{"sha": "7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjNjJiMjU3NTQ4ZTU5YTc3ZWI3YjdjMmZmYzQ2N2JjNWZhMjFjNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-05-27T17:37:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-05-27T17:37:11Z"}, "message": "re PR libstdc++/40497 ([C++0x] troubles with std::next / std::prev declarations)\n\n2010-05-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/40497\n\t* include/bits/cpp_type_traits.h (__is_iterator): Add.\n\t* include/bits/stl_iterator_base_funcs.h (next, prev): Use it.\n\t* testsuite/24_iterators/operations/40497.cc: New.\n\nFrom-SVN: r159933", "tree": {"sha": "f449730c6e302a946c5d8cb6a9822be36cca98a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f449730c6e302a946c5d8cb6a9822be36cca98a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/comments", "author": null, "committer": null, "parents": [{"sha": "cdc029b948e1c72a033599cacb0d0fdb7587f7db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc029b948e1c72a033599cacb0d0fdb7587f7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc029b948e1c72a033599cacb0d0fdb7587f7db"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "0af8ae6c73034a5c7f25921653f97beac48ccbf5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7", "patch": "@@ -1,3 +1,10 @@\n+2010-05-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/40497\n+\t* include/bits/cpp_type_traits.h (__is_iterator): Add.\n+\t* include/bits/stl_iterator_base_funcs.h (next, prev): Use it.\n+\t* testsuite/24_iterators/operations/40497.cc: New.\n+\n 2010-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/25306"}, {"sha": "8c5d8e9ca279f73fb387f26b15f3930ea70c9160", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7", "patch": "@@ -414,6 +414,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n #endif\n \n+  template<typename _Tp>\n+    class __is_iterator_helper\n+    {\n+      typedef char __one;\n+      typedef struct { char __arr[2]; } __two;\n+\n+      template<typename _Up>\n+        struct _Wrap_type\n+\t{ };\n+\n+      template<typename _Up>\n+        static __one __test(_Wrap_type<typename _Up::iterator_category>*);\n+\n+      template<typename _Up>\n+        static __two __test(...);\n+\n+    public:\n+      static const bool __value = (sizeof(__test<_Tp>(0)) == 1\n+\t\t\t\t   || __is_pointer<_Tp>::__value);\n+    };\n+\n+  template<typename _Tp>\n+    struct __is_iterator\n+    {\n+      enum { __value = __is_iterator_helper<_Tp>::__value };\n+      typedef typename __truth_type<__value>::__type __type;\n+    };\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif //_CPP_TYPE_TRAITS_H"}, {"sha": "50e0bca83e28a2455942eb8e3e2d2264aa9ef95c", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7", "patch": "@@ -61,6 +61,7 @@\n #define _STL_ITERATOR_BASE_FUNCS_H 1\n \n #pragma GCC system_header\n+\n #include <bits/concept_check.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -172,9 +173,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       std::__advance(__i, __d, std::__iterator_category(__i));\n     }\n \n+_GLIBCXX_END_NAMESPACE\n+\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\n+#include <ext/type_traits.h> // For __enable_if and __is_iterator\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n   template<typename _ForwardIterator>\n-    inline _ForwardIterator\n+    inline typename\n+    __gnu_cxx::__enable_if<__is_iterator<_ForwardIterator>::__value,\n+\t\t\t   _ForwardIterator>::__type\n     next(_ForwardIterator __x, typename\n \t iterator_traits<_ForwardIterator>::difference_type __n = 1)\n     {\n@@ -183,15 +193,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   template<typename _BidirectionalIterator>\n-    inline _BidirectionalIterator \n+    inline typename\n+    __gnu_cxx::__enable_if<__is_iterator<_BidirectionalIterator>::__value,\n+\t\t\t   _BidirectionalIterator>::__type\n     prev(_BidirectionalIterator __x, typename\n \t iterator_traits<_BidirectionalIterator>::difference_type __n = 1) \n     {\n       std::advance(__x, -__n);\n       return __x;\n     }\n-#endif\n \n _GLIBCXX_END_NAMESPACE\n \n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n #endif /* _STL_ITERATOR_BASE_FUNCS_H */"}, {"sha": "59a64fbb0992e5eb79f7153f8d0da530b7a446e7", "filename": "libstdc++-v3/testsuite/24_iterators/operations/40497.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2F40497.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2F40497.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2F40497.cc?ref=7ec62b257548e59a77eb7b7c2ffc467bc5fa21c7", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+namespace X\n+{\n+  class C { };\n+\n+  template<class T> void next(T) { }\n+  template<class T> void prev(T) { }\n+}\n+\n+using namespace X;\n+\n+#include <iterator>\n+\n+using namespace std;\n+\n+// libstdc++/40497\n+void test01()\n+{\n+  C c;\n+  next(c);\n+  prev(c);\n+}"}]}