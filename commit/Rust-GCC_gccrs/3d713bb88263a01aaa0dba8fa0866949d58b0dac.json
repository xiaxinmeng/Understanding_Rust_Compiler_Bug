{"sha": "3d713bb88263a01aaa0dba8fa0866949d58b0dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3MTNiYjg4MjYzYTAxYWFhMGRiYThmYTA4NjY5NDlkNThiMGRhYw==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2003-03-05T16:09:55Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2003-03-05T16:09:55Z"}, "message": "raise.c (__gnat_Unwind_RaiseException): Add prototype to avoid warning, and fix return type for the IN_RTS && !SJLJ case.\n\n\tada/9961\n        * raise.c (__gnat_Unwind_RaiseException): Add prototype to avoid\n        warning, and fix return type for the IN_RTS && !SJLJ case.\n\nFrom-SVN: r63842", "tree": {"sha": "c6bf3a99574c35a3d8549df2d29d84986c275f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6bf3a99574c35a3d8549df2d29d84986c275f71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d713bb88263a01aaa0dba8fa0866949d58b0dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d713bb88263a01aaa0dba8fa0866949d58b0dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d713bb88263a01aaa0dba8fa0866949d58b0dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d713bb88263a01aaa0dba8fa0866949d58b0dac/comments", "author": null, "committer": null, "parents": [{"sha": "8c38a24fa04d1955502395f4dc05915fbf9da886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c38a24fa04d1955502395f4dc05915fbf9da886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c38a24fa04d1955502395f4dc05915fbf9da886"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "009cd6ef862e939dce0a7980ac01e6b38d259917", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d713bb88263a01aaa0dba8fa0866949d58b0dac/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d713bb88263a01aaa0dba8fa0866949d58b0dac/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3d713bb88263a01aaa0dba8fa0866949d58b0dac", "patch": "@@ -1,8 +1,14 @@\n+2003-03-05  Olivier Hainque  <hainque@gnat.com>\n+\n+\tada/9961\n+        * raise.c (__gnat_Unwind_RaiseException): Add prototype to avoid\n+        warning, and fix return type for the IN_RTS && !SJLJ case.\n+\n 2003-03-04  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (ada.tags): New target.\n \n-2003-03-04  Olivier Hainque <hainque@act-europe.fr>\n+2003-03-04  Olivier Hainque  <hainque@act-europe.fr>\n \n \tada/9911\n \t* a-except.adb (Unwind_RaiseException): Import a GNAT specific"}, {"sha": "a9841740d88027df5ef4979f403b39a4cbb64d54", "filename": "gcc/ada/raise.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d713bb88263a01aaa0dba8fa0866949d58b0dac/gcc%2Fada%2Fraise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d713bb88263a01aaa0dba8fa0866949d58b0dac/gcc%2Fada%2Fraise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.c?ref=3d713bb88263a01aaa0dba8fa0866949d58b0dac", "patch": "@@ -88,10 +88,20 @@ __gnat_unhandled_terminate ()\n }\n \n /* Below is the code related to the integration of the GCC mechanism for\n-   exception handling.  */\n+   exception handling. Still work in progress. */\n \n #include \"unwind.h\"\n \n+/* If the underlying GCC scheme for exception handling is SJLJ, the standard\n+   propagation routine (_Unwind_RaiseException) is actually renamed using a\n+   #define directive (see unwing-sjlj.c). We need a consistently named\n+   interface to import from a-except, so stubs are defined here, at the end\n+   of this file.  */\n+\n+_Unwind_Reason_Code\n+__gnat_Unwind_RaiseException PARAMS ((struct _Unwind_Exception *));\n+\n+\n /* Exception Handling personality routine for Ada.\n \n    ??? It is currently inspired from the one for C++, needs cleanups and\n@@ -597,10 +607,7 @@ __gnat_eh_personality (version, actions, exception_class, ue_header, context)\n }\n \n \n-/* If the underlying GCC scheme for exception handling is SJLJ, the standard\n-   propagation routine (_Unwind_RaiseException) is actually renamed using a\n-   #define directive (see unwing-sjlj.c). We need a consistently named\n-   interface to import from a-except, so stubs are defined here.  */\n+/* Stubs for the libgcc unwinding interface, to be imported by a-except.  */ \n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n \n@@ -614,7 +621,7 @@ __gnat_Unwind_RaiseException (e)\n #else\n /* __USING_SJLJ_EXCEPTIONS__ not defined */\n \n-void\n+_Unwind_Reason_Code\n __gnat_Unwind_RaiseException (e)\n      struct _Unwind_Exception *e;\n {"}]}