{"sha": "dffa4176aec81e6b81d355d99732be709d3bc8fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZmYTQxNzZhZWM4MWU2YjgxZDM1NWQ5OTczMmJlNzA5ZDNiYzhmZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-04-03T23:43:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-04-03T23:43:35Z"}, "message": "re PR c++/5104 (template using std::set_terminate fails due to throw() qualifier in <exception>)\n\n        PR c++/5104\n        * typeck.c (comptypes) [FUNCTION_TYPE]: Don't compare exception\n        specifiers.\n        [METHOD_TYPE]: Use same code as FUNCTION_TYPE.\n\nFrom-SVN: r51821", "tree": {"sha": "69e4a662d2162898470b7ba451b541230b34c6a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e4a662d2162898470b7ba451b541230b34c6a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dffa4176aec81e6b81d355d99732be709d3bc8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffa4176aec81e6b81d355d99732be709d3bc8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dffa4176aec81e6b81d355d99732be709d3bc8fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffa4176aec81e6b81d355d99732be709d3bc8fe/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36c2272c905e791fa3241e7e26a02c2a322d95d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c2272c905e791fa3241e7e26a02c2a322d95d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c2272c905e791fa3241e7e26a02c2a322d95d7"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "15e12d6858cc71acffec2427611e0d12a119e105", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffa4176aec81e6b81d355d99732be709d3bc8fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffa4176aec81e6b81d355d99732be709d3bc8fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dffa4176aec81e6b81d355d99732be709d3bc8fe", "patch": "@@ -1,3 +1,10 @@\n+2002-04-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/5104\n+\t* typeck.c (comptypes) [FUNCTION_TYPE]: Don't compare exception\n+\tspecifiers.\n+\t[METHOD_TYPE]: Use same code as FUNCTION_TYPE.\n+\n 2002-04-03  Richard Henderson  <rth@redhat.com>\n \n \t* cp-lang.c (cxx_warn_unused_global_decl): New."}, {"sha": "7596d297f4a85f1dc3380e265f2dcafb0589e3b4", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffa4176aec81e6b81d355d99732be709d3bc8fe/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffa4176aec81e6b81d355d99732be709d3bc8fe/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dffa4176aec81e6b81d355d99732be709d3bc8fe", "patch": "@@ -763,7 +763,7 @@ comp_except_types (a, b, exact)\n }\n \n /* Return 1 if TYPE1 and TYPE2 are equivalent exception specifiers.\n-   If EXACT is 0, T2 can be a subset of T1 (according to 15.4/7),\n+   If EXACT is 0, T2 can be stricter than T1 (according to 15.4/7),\n    otherwise it must be exact. Exception lists are unordered, but\n    we've already filtered out duplicates. Most lists will be in order,\n    we should try to make use of that.  */\n@@ -786,7 +786,7 @@ comp_except_specs (t1, t2, exact)\n     return t2 != NULL_TREE && !TREE_VALUE (t2);\n   if (t2 == NULL_TREE)              /* T2 is ... */\n     return 0;\n-  if (TREE_VALUE(t1) && !TREE_VALUE (t2)) /* T2 is EMPTY, T1 is not */\n+  if (TREE_VALUE (t1) && !TREE_VALUE (t2)) /* T2 is EMPTY, T1 is not */\n     return !exact;\n   \n   /* Neither set is ... or EMPTY, make sure each part of T2 is in T1.\n@@ -987,20 +987,6 @@ comptypes (t1, t2, strict)\n \t     && comptypes (TREE_TYPE (t1), TREE_TYPE (t2), strict));\n       break;\n \n-    case METHOD_TYPE:\n-      if (! comp_except_specs (TYPE_RAISES_EXCEPTIONS (t1),\n-\t\t\t       TYPE_RAISES_EXCEPTIONS (t2), 1))\n-\treturn 0;\n-\n-      /* This case is anti-symmetrical!\n-\t One can pass a base member (or member function)\n-\t to something expecting a derived member (or member function),\n-\t but not vice-versa!  */\n-\n-      val = (comptypes (TREE_TYPE (t1), TREE_TYPE (t2), strict)\n-\t     && compparms (TYPE_ARG_TYPES (t1), TYPE_ARG_TYPES (t2)));\n-      break;\n-\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n       t1 = TREE_TYPE (t1);\n@@ -1015,11 +1001,8 @@ comptypes (t1, t2, strict)\n \tgoto look_hard;\n       break;\n \n+    case METHOD_TYPE:\n     case FUNCTION_TYPE:\n-      if (! comp_except_specs (TYPE_RAISES_EXCEPTIONS (t1),\n-\t\t\t       TYPE_RAISES_EXCEPTIONS (t2), 1))\n-\treturn 0;\n-\n       val = ((TREE_TYPE (t1) == TREE_TYPE (t2)\n \t      || comptypes (TREE_TYPE (t1), TREE_TYPE (t2), strict))\n \t     && compparms (TYPE_ARG_TYPES (t1), TYPE_ARG_TYPES (t2)));"}, {"sha": "a41605f56378657fe03fea104337216d2db588c0", "filename": "gcc/testsuite/g++.dg/eh/spec4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffa4176aec81e6b81d355d99732be709d3bc8fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffa4176aec81e6b81d355d99732be709d3bc8fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fspec4.C?ref=dffa4176aec81e6b81d355d99732be709d3bc8fe", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/5104\n+// Test that a function with a throw spec is a valid template argument.\n+\n+#include <exception>\n+\n+typedef void (*HandlerFunction)();\n+typedef HandlerFunction (*SetHandlerFunction)(HandlerFunction);\n+\n+template <SetHandlerFunction set_function>\n+class HandlerStack {\n+public:\n+  static void defaultHandler();\n+};\n+\n+typedef HandlerStack<std::set_terminate> Terminate;\n+\n+template<> void Terminate::defaultHandler() {};"}]}