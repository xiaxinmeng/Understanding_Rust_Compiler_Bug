{"sha": "cd3bb27790771150d4ab39e5b3b0094bafe0cd19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QzYmIyNzc5MDc3MTE1MGQ0YWIzOWU1YjNiMDA5NGJhZmUwY2QxOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-08T19:42:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-08T19:42:28Z"}, "message": "gcc.texi, [...]: Add index of command line options.\n\n\t* doc/gcc.texi, doc/invoke.texi: Add index of command line\n\toptions.  Use @opindex to index them rather than other indexing\n\tcommands.  Use @var{...} instead of <...>.  Avoid spaces in names\n\tinside @var.  Don't use @kindex to index escape sequences in\n\tsource code.\n\nFrom-SVN: r43041", "tree": {"sha": "0adad3721c3db479eead6125fd982afcb2f534c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0adad3721c3db479eead6125fd982afcb2f534c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd3bb27790771150d4ab39e5b3b0094bafe0cd19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3bb27790771150d4ab39e5b3b0094bafe0cd19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3bb27790771150d4ab39e5b3b0094bafe0cd19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3bb27790771150d4ab39e5b3b0094bafe0cd19/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c399c87ef6c1ad926fc039b89dff307119f7856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c399c87ef6c1ad926fc039b89dff307119f7856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c399c87ef6c1ad926fc039b89dff307119f7856"}], "stats": {"total": 1167, "additions": 1030, "deletions": 137}, "files": [{"sha": "08fe5e032a448281e20cb3540012ff76ec6bc79f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3bb27790771150d4ab39e5b3b0094bafe0cd19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3bb27790771150d4ab39e5b3b0094bafe0cd19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd3bb27790771150d4ab39e5b3b0094bafe0cd19", "patch": "@@ -1,3 +1,11 @@\n+2001-06-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/gcc.texi, doc/invoke.texi: Add index of command line\n+\toptions.  Use @opindex to index them rather than other indexing\n+\tcommands.  Use @var{...} instead of <...>.  Avoid spaces in names\n+\tinside @var.  Don't use @kindex to index escape sequences in\n+\tsource code.\n+\n 2001-06-08  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* stmt.c (current_nesting_level): New fn."}, {"sha": "b383c06db9b091e7e74df145b5e5784f0ffed39f", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3bb27790771150d4ab39e5b3b0094bafe0cd19/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3bb27790771150d4ab39e5b3b0094bafe0cd19/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=cd3bb27790771150d4ab39e5b3b0094bafe0cd19", "patch": "@@ -75,6 +75,9 @@\n @settitle Porting the GNU Compiler Collection\n @end ifclear\n \n+@c Create a separate index for command line options.\n+@defindex op\n+@c Merge the standard indexes into a single one.\n @syncodeindex fn cp\n @syncodeindex vr cp\n @syncodeindex ky cp\n@@ -264,6 +267,7 @@ bugs.  It corresponds to GCC version 3.1.\n * GNU Free Documentation License:: How you can copy and share this manual.\n * Contributors::    People who have contributed to GCC.\n \n+* Option Index::    Index to command line options.\n * Index::\t    Index of concepts and symbol names.\n @end menu\n \n@@ -369,6 +373,10 @@ with some exceptions, and possibly with some extensions.\n GCC supports three versions of the C standard, although support for\n the most recent version is not yet complete.\n \n+@opindex std\n+@opindex ansi\n+@opindex pedantic\n+@opindex pedantic-errors\n The original ANSI C standard (X3.159-1989) was ratified in 1989 and\n published in 1990.  This standard was ratified as an ISO standard\n (ISO/IEC 9899:1990) later in 1990.  There were no technical\n@@ -404,6 +412,7 @@ standard, use @samp{-std=c99} or @samp{-std=iso9899:1999}.  (While in\n development, drafts of this standard version were referred to as\n @dfn{C9X}.)\n \n+@opindex traditional\n GCC also has some limited support for traditional (pre-ISO) C with the\n @samp{-traditional} option.  This support may be of use for compiling\n some very old programs that have not been updated to ISO C, but should\n@@ -443,6 +452,7 @@ char *[])}.  An OS kernel would be a freestanding environment; a\n program using the facilities of an operating system would normally be\n in a hosted implementation.\n \n+@opindex ffreestanding\n GNU CC aims towards being usable as a conforming freestanding\n implementation, or as the compiler for a conforming hosted\n implementation.  By default, it will act as the compiler for a hosted\n@@ -547,6 +557,7 @@ edit the offending file and place the typedef in front of the\n prototypes.\n \n @item\n+@opindex pedantic-errors\n When @samp{-pedantic-errors} is specified, GCC will incorrectly give\n an error message when a function name is specified in an expression\n involving the comma operator.\n@@ -852,6 +863,7 @@ If you have this problem, set the LANG environment variable to \"C\" or\n \"En_US\".\n \n @item\n+@opindex fdollars-in-identifiers\n Even if you specify @samp{-fdollars-in-identifiers},\n you cannot successfully use @samp{$} in identifiers on the RS/6000 due\n to a restriction in the IBM assembler.  GAS supports these\n@@ -863,6 +875,7 @@ version 1.3.0.1 or later fixes this problem.  You can obtain XLC-1.3.0.2\n by requesting PTF 421749 from IBM.\n \n @item\n+@opindex mno-serialize-volatile\n There is an assembler bug in versions of DG/UX prior to 5.4.2.01 that\n occurs when the @samp{fldcr} instruction is used.  GCC uses\n @samp{fldcr} on the 88100 to serialize volatile memory references.  Use\n@@ -896,6 +909,7 @@ what options are used.\n @cindex RT PC\n @cindex IBM RT PC\n @item\n+@opindex mhc-struct-return\n On the IBM RT PC, the MetaWare HighC compiler (hc) uses a different\n convention for structure and union returning.  Use the option\n @samp{-mhc-struct-return} to tell GCC to use a convention compatible\n@@ -904,6 +918,7 @@ with it.\n @cindex Vax calling convention\n @cindex Ultrix calling convention\n @item\n+@opindex fcall-saved\n On Ultrix, the Fortran compiler expects registers 2 through 5 to be saved\n by function calls.  However, the C compiler uses conventions compatible\n with BSD Unix: registers 2 through 5 may be clobbered by function calls.\n@@ -945,6 +960,7 @@ sometimes reorders instructions incorrectly when optimization is turned\n on.  If you think this may be happening to you, try using the GNU\n assembler; GAS version 2.1 supports ECOFF on Irix.\n \n+@opindex noasmopt\n Or use the @samp{-noasmopt} option when you compile GCC with itself,\n and then again when you compile your program.  (This is a temporary\n kludge to turn off assembler optimization on Irix.)  If this proves to\n@@ -1003,6 +1019,7 @@ MALLOC=gmalloc.o\n @node Incompatibilities\n @section Incompatibilities of GCC\n @cindex incompatibilities of GCC\n+@opindex traditional\n \n There are several noteworthy incompatibilities between GNU C and K&R\n (non-ISO) versions of C.  The @samp{-traditional} option\n@@ -1031,6 +1048,7 @@ when passed a string constant as its format control string or input.\n This is because @code{sscanf} incorrectly tries to write into the string\n constant.  Likewise @code{fscanf} and @code{scanf}.\n \n+@opindex fwritable-strings\n The best solution to these problems is to change the program to use\n @code{char}-array variables with initialization strings for these\n purposes instead of string constants.  But if this is not possible,\n@@ -1089,6 +1107,7 @@ Here @code{a} may or may not be restored to its first value when the\n its first value is restored; otherwise, it keeps the last value stored\n in it.\n \n+@opindex W\n If you use the @samp{-W} option with the @samp{-O} option, you will\n get a warning when GCC thinks such a problem might be possible.\n \n@@ -1240,6 +1259,7 @@ structure and union returning.  GCC on most of these machines uses a\n compatible convention when returning structures and unions in memory,\n but still returns small structures and unions in registers.\n \n+@opindex fpcc-struct-return\n You can tell GCC to use a compatible convention for all structure and\n union returning with the option @samp{-fpcc-struct-return}.\n \n@@ -1318,6 +1338,7 @@ does mean that there's nothing for us to do about them.\n @node Standard Libraries\n @section Standard Libraries\n \n+@opindex Wall\n GCC by itself attempts to be a conforming freestanding implementation.\n @xref{Standards,,Language Standards Supported by GCC}, for details of\n what this means.  Beyond the library facilities required of such an\n@@ -1424,6 +1445,7 @@ hold a few more bits of precision than fit in a @code{double} in memory.\n Compiled code moves values between memory and floating point registers\n at its convenience, and moving them into memory truncates them.\n \n+@opindex ffloat-store\n You can partially avoid this problem by using the @samp{-ffloat-store}\n option (@pxref{Optimize Options}).\n \n@@ -1644,6 +1666,7 @@ you are removing prototypes that were made with @code{protoize}; if\n the program worked before without any prototypes, it will work again\n without them.\n \n+@opindex Wconversion\n You can find all the places where this problem might occur by compiling\n the program with the @samp{-Wconversion} option.  It prints a warning\n whenever an argument is converted.\n@@ -1735,6 +1758,7 @@ clutter the program with a cast to @code{void} whenever the value isn't\n useful.\n \n @item\n+@opindex fshort-enums\n Making @samp{-fshort-enums} the default.\n \n This would cause storage layout to be incompatible with most other C\n@@ -1751,6 +1775,8 @@ The ISO C standard leaves it up to the implementation whether a bitfield\n declared plain @code{int} is signed or not.  This in effect creates two\n alternative dialects of C.\n \n+@opindex fsigned-bitfields\n+@opindex funsigned-bitfields\n The GNU C compiler supports both dialects; you can specify the signed\n dialect with @samp{-fsigned-bitfields} and the unsigned dialect with\n @samp{-funsigned-bitfields}.  However, this leaves open the question of\n@@ -1800,6 +1826,9 @@ explicitly in each bitfield whether it is signed or not.  In this way,\n they write programs which have the same meaning in both C dialects.)\n \n @item\n+@opindex ansi\n+@opindex traditional\n+@opindex std\n Undefining @code{__STDC__} when @samp{-ansi} is not used.\n \n Currently, GCC defines @code{__STDC__} as long as you don't use\n@@ -1868,6 +1897,7 @@ However, the rationale here is that optimization of a nonempty loop\n cannot produce an empty one, which holds for C but is not always the\n case for C++.\n \n+@opindex funroll-loops\n Moreover, with @samp{-funroll-loops} small ``empty'' loops are already\n removed, so the current behavior is both sub-optimal and inconsistent\n and will change in the future.\n@@ -1907,6 +1937,7 @@ Making certain warnings into errors by default.\n Some ISO C testsuites report failure when the compiler does not produce\n an error message for a certain program.\n \n+@opindex pedantic-errors\n ISO C requires a ``diagnostic'' message for certain kinds of invalid\n programs, but a warning is defined by GCC to count as a diagnostic.  If\n GCC produces a warning but not an error, that is correct ISO C support.\n@@ -1946,6 +1977,8 @@ warnings are issued only if you ask for them, with one of the @samp{-W}\n options (for instance, @samp{-Wall} requests a variety of useful\n warnings).\n \n+@opindex pedantic\n+@opindex pedantic-errors\n GCC always tries to compile your program if possible; it never\n gratuitously rejects a program whose meaning is clear merely because\n (for instance) it fails to conform to a standard.  In some cases,\n@@ -3052,6 +3085,7 @@ go in a register:\n \n @cindex arithmetic libraries\n @cindex math libraries\n+@opindex msoft-float\n Code compiled with GCC may call certain library routines.  Most of\n them handle arithmetic for which there are no instructions.  This\n includes multiply and divide on some machines, and floating point\n@@ -3225,6 +3259,7 @@ the code to save a function's rtl for later inlining and to inline that\n rtl when the function is called.  The header file @file{integrate.h}\n is also used for this purpose.\n \n+@opindex dr\n The option @samp{-dr} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.rtl} to\n the input file name.\n@@ -3251,6 +3286,7 @@ optimizations described above.\n \n The source file of this pass is @file{jump.c}.\n \n+@opindex dj\n The option @samp{-dj} causes a debugging dump of the RTL code after\n this pass is run for the first time.  This dump file's name is made by\n appending @samp{.jump} to the input file name.\n@@ -3263,6 +3299,7 @@ is in @file{regclass.c}.\n \n @cindex jump threading\n @item\n+@opindex fthread-jumps\n Jump threading.  This pass detects a condition jump that branches to an\n identical or inverse test.  Such jumps can be @samp{threaded} through\n the second conditional test.  The source code for this pass is in\n@@ -3277,6 +3314,7 @@ propagation.  Its source file is @file{cse.c}.  If constant\n propagation causes conditional jumps to become unconditional or to\n become no-ops, jump optimization is run again when CSE is finished.\n \n+@opindex ds\n The option @samp{-ds} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.cse} to\n the input file name.\n@@ -3293,6 +3331,7 @@ and copy propagation.\n \n The source file for this pass is gcse.c.\n \n+@opindex dG\n The option @samp{-dG} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.gcse} to\n the input file name.\n@@ -3307,15 +3346,18 @@ Its source files are @file{loop.c} and @file{unroll.c}, plus the header\n @file{loop.h} used for communication between them.  Loop unrolling uses\n some functions in @file{integrate.c} and the header @file{integrate.h}.\n \n+@opindex dL\n The option @samp{-dL} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.loop} to\n the input file name.\n \n @item\n+@opindex frerun-cse-after-loop\n If @samp{-frerun-cse-after-loop} was enabled, a second common\n subexpression elimination pass is performed after the loop optimization\n pass.  Jump threading is also done again at this time if it was specified.\n \n+@opindex dt\n The option @samp{-dt} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.cse2} to\n the input file name.\n@@ -3335,6 +3377,7 @@ This pass also deletes computations whose results are never used, and\n combines memory references with add or subtract instructions to make\n autoincrement or autodecrement addressing.\n \n+@opindex df\n The option @samp{-df} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.flow} to\n the input file name.  If stupid register allocation is in use, this\n@@ -3348,6 +3391,7 @@ flow into single instructions.  It combines the RTL expressions for\n the instructions by substitution, simplifies the result using algebra,\n and then attempts to match the result against the machine description.\n \n+@opindex dc\n The option @samp{-dc} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.combine}\n to the input file name.\n@@ -3360,6 +3404,7 @@ this reload would be a register to register move.  It then attempts\n to change the registers used by the instruction to avoid the move\n instruction.\n \n+@opindex dN\n The option @samp{-dN} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.regmove}\n to the input file name.\n@@ -3377,6 +3422,7 @@ use of items that otherwise would cause pipeline stalls.\n Instruction scheduling is performed twice.  The first time is immediately\n after instruction combination and the second is immediately after reload.\n \n+@opindex dS\n The option @samp{-dS} causes a debugging dump of the RTL code after this\n pass is run for the first time.  The dump file's name is made by\n appending @samp{.sched} to the input file name.\n@@ -3395,6 +3441,7 @@ hard registers to pseudo registers that are used only within one basic\n block.  Because the basic block is linear, it can use fast and\n powerful techniques to do a very good job.\n \n+@opindex dl\n The option @samp{-dl} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.lreg} to\n the input file name.\n@@ -3422,6 +3469,7 @@ instructions to save and restore call-clobbered registers around calls.\n Source files are @file{reload.c} and @file{reload1.c}, plus the header\n @file{reload.h} used for communication between them.\n \n+@opindex dg\n The option @samp{-dg} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.greg} to\n the input file name.\n@@ -3432,6 +3480,7 @@ the input file name.\n Instruction scheduling is repeated here to try to avoid pipeline stalls\n due to memory loads generated for spilled pseudo registers.\n \n+@opindex dR\n The option @samp{-dR} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.sched2}\n to the input file name.\n@@ -3442,6 +3491,7 @@ to the input file name.\n Jump optimization is repeated, this time including cross-jumping\n and deletion of no-op move instructions.\n \n+@opindex dJ\n The option @samp{-dJ} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.jump2}\n to the input file name.\n@@ -3453,6 +3503,7 @@ Delayed branch scheduling.  This optional pass attempts to find\n instructions that can go into the delay slots of other instructions,\n usually jumps and calls.  The source file name is @file{reorg.c}.\n \n+@opindex dd\n The option @samp{-dd} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.dbr}\n to the input file name.\n@@ -3473,6 +3524,7 @@ stack may be done at this point.  Currently, this is supported only\n for the floating-point registers of the Intel 80387 coprocessor.   The\n source file name is @file{reg-stack.c}.\n \n+@opindex dk\n The options @samp{-dk} causes a debugging dump of the RTL code after\n this pass.  This dump file's name is made by appending @samp{.stack}\n to the input file name.\n@@ -4491,9 +4543,20 @@ Public License instead of this License.\n @include contrib.texi\n \n @c ---------------------------------------------------------------------\n-@c Node Index\n+@c Indexes\n @c ---------------------------------------------------------------------\n \n+@node Option Index\n+@unnumbered Option Index\n+\n+GCC's command line options are indexed here without any initial @samp{-}\n+or @samp{--}.  Where an option has both positive and negative forms\n+(such as @option{-f@var{option}} and @option{-fno-@var{option}}),\n+relevant entries in the manual are indexed under the most appropriate\n+form; it may sometimes be useful to look up both forms.\n+\n+@printindex op\n+\n @node Index\n @unnumbered Index\n "}, {"sha": "a0d0c936f3e769c61b8ada1c7577ae264d92e43d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 958, "deletions": 136, "changes": 1094, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd3bb27790771150d4ab39e5b3b0094bafe0cd19/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd3bb27790771150d4ab39e5b3b0094bafe0cd19/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cd3bb27790771150d4ab39e5b3b0094bafe0cd19"}]}