{"sha": "09dbcd96d6b668e325e3b34297648d12f25e51b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlkYmNkOTZkNmI2NjhlMzI1ZTNiMzQyOTc2NDhkMTJmMjVlNTFiOQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2011-10-19T15:50:00Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2011-10-19T15:50:00Z"}, "message": "re PR middle-end/49310 (Compile time hog in var-tracking emit)\n\nPR debug/49310\n* var-tracking.c (loc_exp_dep, onepart_aux): New structs.\n(variable_part): Replace offset with union.\n(enum onepart_enum, onepart_enum_t): New.\n(variable_def): Drop cur_loc_changed, add onepart.\n(value_chain_def, const_value_chain): Remove.\n(VAR_PART_OFFSET, VAR_LOC_1PAUX): New macros, with checking.\n(VAR_LOC_DEP_LST, VAR_LOC_DEP_LSTP): New macros.\n(VAR_LOC_FROM, VAR_LOC_DEPTH, VAR_LOC_DEP_VEC): Likewise.\n(value_chain_pool, value_chains): Remove.\n(dropped_values): New.\n(struct parm_reg): Only if HAVE_window_save.\n(vt_stack_adjustments): Don't record register arguments.\n(dv_as_rtx): New.\n(dv_onepart_p): Return a onepart_enum_t.\n(onepart_pool): New.\n(dv_pool): Remove.\n(dv_from_rtx): New.\n(variable_htab_free): Release onepart aux data.  Reset flags.\n(value_chain_htab_hash, value_chain_htab_eq): Remove.\n(unshare_variable): Use onepart field.  Propagate onepart aux\ndata or offset.  Drop cur_loc_changed.\n(val_store): Cope with NULL insn.  Rephrase dump output.  Check\nfor unsuitable locs.  Add FIXME on using cselib locs.\n(val_reset): Remove FIXME of unfounded concerns.\n(val_resolve): Check for unsuitable locs.  Add FIXME on using\ncselib locs.\n(variable_union): Use onepart field, adjust access to offset.\n(NO_LOC_P): New.\n(VALUE_CHANGED, DECL_CHANGED): Update doc.\n(set_dv_changed): Clear NO_LOC_P when changed.\n(find_loc_in_1pdv): Use onepart field.\n(intersect_loc_chains): Likewise.\n(unsuitable_loc): New.\n(loc_cmp): Keep ENTRY_VALUEs at the end of the loc list.\n(add_value_chain, add_value_chains): Remove.\n(add_cselib_value_chains, remove_value_chain): Likewise.\n(remove_value_chains, remove_cselib_value_chains): Likewise.\n(canonicalize_loc_order_check): Use onepart.  Drop cur_loc_changed.\n(canonicalize_values_star, canonicalize_vars_star): Use onepart.\n(variable_merge_over_cur): Likewise.  Adjust access to offset.\nDrop cur_loc_changed.\n(variable_merge_over_src): Use onepart field.\n(remove_duplicate_values): Likewise.\n(variable_post_merge_new_vals): Likewise.\n(find_mem_expr_in_1pdv): Likewise.\n(dataflow_set_preserve_mem_locs): Likewise.  Drop cur_loc_changed\nand value chains.\n(dataflow_set_remove_mem_locs): Likewise.  Use VAR_LOC_FROM.\n(variable_different_p): Use onepart field.  Move onepart test out\nof the loop.\n(argument_reg_set): Drop.\n(add_uses, add_stores): Preserve but do not record in dynamic\ntables equivalences for ENTRY_VALUEs and CFA_based addresses.\nAvoid unsuitable address expressions.\n(EXPR_DEPTH): Unlimit.\n(EXPR_USE_DEPTH): Repurpose PARAM_MAX_VARTRACK_EXPR_DEPTH.\n(prepare_call_arguments): Use DECL_RTL_IF_SET.\n(dump_var): Adjust access to offset.\n(variable_from_dropped, recover_dropped_1paux): New.\n(variable_was_changed): Drop cur_loc_changed.  Use onepart.\nPreserve onepart aux in empty_var.  Recover empty_var and onepart\naux from dropped_values.\n(find_variable_location_part): Special-case onepart.  Adjust\naccess to offset.\n(set_slot_part): Use onepart.  Drop cur_loc_changed.  Adjust\naccess to offset.  Initialize onepaux.  Drop value chains.\n(delete_slot_part): Drop value chains.  Use VAR_LOC_FROM.\n(VEC (variable, heap), VEC (rtx, stack)): Define.\n(expand_loc_callback_data): Drop dummy, cur_loc_changed,\nignore_cur_loc.  Add expanding, pending, depth.\n(loc_exp_dep_alloc, loc_exp_dep_clear): New.\n(loc_exp_dep_insert, loc_exp_dep_set): New.\n(notify_dependents_of_resolved_value): New.\n(update_depth, vt_expand_var_loc_chain): New.\n(vt_expand_loc_callback): Revamped.\n(resolve_expansions_pending_recursion): New.\n(INIT_ELCD, FINI_ELCD): New.\n(vt_expand_loc): Use the new macros above.  Drop ignore_cur_loc\nparameter, adjust all callers.\n(vt_expand_loc_dummy): Drop.\n(vt_expand_1pvar): New.\n(emit_note_insn_var_location): Operate on non-debug decls only.\nRevamp multi-part cur_loc recomputation and one-part expansion.\nDrop cur_loc_changed.  Adjust access to offset.\n(VEC (variable, heap)): Drop.\n(changed_variables_stack, changed_values_stack): Drop.\n(check_changed_vars_0, check_changed_vars_1): Remove.\n(check_changed_vars_2, check_changed_vars_3): Remove.\n(values_to_stack, remove_value_from_changed_variables): New.\n(notify_dependents_of_changed_value, process_changed_values): New.\n(emit_notes_for_changes): Revamp onepart updates.\n(emit_notes_for_differences_1): Use onepart.  Drop cur_loc_changed\nand value chains.  Propagate onepaux.  Recover empty_var and onepaux\nfrom dropped_values.\n(emit_notes_for_differences_2): Drop value chains.\n(emit_notes_in_bb): Adjust.\n(vt_emit_notes): Drop value chains, changed_variables_stack.\nInitialize and release dropped_values.\n(create_entry_value): Revamp.\n(vt_add_function_parameter): Use new interface.\n(note_register_arguments): Remove.\n(vt_initialize): Drop value chains and register arguments.\n(vt_finalize): Drop value chains.  Release windowed_parm_regs only\nif HAVE_window_save.\n* rtl.h: Document various pass-local uses of RTL flags.\n* tree.h (DECL_RTL_KNOWN_SET): New.\n* doc/invoke.texi (param max-vartrack-expr-depth): Update\ndescription and default.\n\nFrom-SVN: r180194", "tree": {"sha": "09d9289cc5c7291cb78b366d6d4743cff25a797d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09d9289cc5c7291cb78b366d6d4743cff25a797d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09dbcd96d6b668e325e3b34297648d12f25e51b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09dbcd96d6b668e325e3b34297648d12f25e51b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09dbcd96d6b668e325e3b34297648d12f25e51b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09dbcd96d6b668e325e3b34297648d12f25e51b9/comments", "author": null, "committer": null, "parents": [{"sha": "2f47b8d3be24beae7974234c972aaae5612aae4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f47b8d3be24beae7974234c972aaae5612aae4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f47b8d3be24beae7974234c972aaae5612aae4e"}], "stats": {"total": 2299, "additions": 1418, "deletions": 881}, "files": [{"sha": "ecf319db0196091cb66c7e64719788d8cf1a9ced", "filename": "gcc/ChangeLog", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09dbcd96d6b668e325e3b34297648d12f25e51b9", "patch": "@@ -1,3 +1,115 @@\n+2011-10-19  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/49310\n+\t* var-tracking.c (loc_exp_dep, onepart_aux): New structs.\n+\t(variable_part): Replace offset with union.\n+\t(enum onepart_enum, onepart_enum_t): New.\n+\t(variable_def): Drop cur_loc_changed, add onepart.\n+\t(value_chain_def, const_value_chain): Remove.\n+\t(VAR_PART_OFFSET, VAR_LOC_1PAUX): New macros, with checking.\n+\t(VAR_LOC_DEP_LST, VAR_LOC_DEP_LSTP): New macros.\n+\t(VAR_LOC_FROM, VAR_LOC_DEPTH, VAR_LOC_DEP_VEC): Likewise.\n+\t(value_chain_pool, value_chains): Remove.\n+\t(dropped_values): New.\n+\t(struct parm_reg): Only if HAVE_window_save.\n+\t(vt_stack_adjustments): Don't record register arguments.\n+\t(dv_as_rtx): New.\n+\t(dv_onepart_p): Return a onepart_enum_t.\n+\t(onepart_pool): New.\n+\t(dv_pool): Remove.\n+\t(dv_from_rtx): New.\n+\t(variable_htab_free): Release onepart aux data.  Reset flags.\n+\t(value_chain_htab_hash, value_chain_htab_eq): Remove.\n+\t(unshare_variable): Use onepart field.  Propagate onepart aux\n+\tdata or offset.  Drop cur_loc_changed.\n+\t(val_store): Cope with NULL insn.  Rephrase dump output.  Check\n+\tfor unsuitable locs.  Add FIXME on using cselib locs.\n+\t(val_reset): Remove FIXME of unfounded concerns.\n+\t(val_resolve): Check for unsuitable locs.  Add FIXME on using\n+\tcselib locs.\n+\t(variable_union): Use onepart field, adjust access to offset.\n+\t(NO_LOC_P): New.\n+\t(VALUE_CHANGED, DECL_CHANGED): Update doc.\n+\t(set_dv_changed): Clear NO_LOC_P when changed.\n+\t(find_loc_in_1pdv): Use onepart field.\n+\t(intersect_loc_chains): Likewise.\n+\t(unsuitable_loc): New.\n+\t(loc_cmp): Keep ENTRY_VALUEs at the end of the loc list.\n+\t(add_value_chain, add_value_chains): Remove.\n+\t(add_cselib_value_chains, remove_value_chain): Likewise.\n+\t(remove_value_chains, remove_cselib_value_chains): Likewise.\n+\t(canonicalize_loc_order_check): Use onepart.  Drop cur_loc_changed.\n+\t(canonicalize_values_star, canonicalize_vars_star): Use onepart.\n+\t(variable_merge_over_cur): Likewise.  Adjust access to offset.\n+\tDrop cur_loc_changed.\n+\t(variable_merge_over_src): Use onepart field.\n+\t(remove_duplicate_values): Likewise.\n+\t(variable_post_merge_new_vals): Likewise.\n+\t(find_mem_expr_in_1pdv): Likewise.\n+\t(dataflow_set_preserve_mem_locs): Likewise.  Drop cur_loc_changed\n+\tand value chains.\n+\t(dataflow_set_remove_mem_locs): Likewise.  Use VAR_LOC_FROM.\n+\t(variable_different_p): Use onepart field.  Move onepart test out\n+\tof the loop.\n+\t(argument_reg_set): Drop.\n+\t(add_uses, add_stores): Preserve but do not record in dynamic\n+\ttables equivalences for ENTRY_VALUEs and CFA_based addresses.\n+\tAvoid unsuitable address expressions.\n+\t(EXPR_DEPTH): Unlimit.\n+\t(EXPR_USE_DEPTH): Repurpose PARAM_MAX_VARTRACK_EXPR_DEPTH.\n+\t(prepare_call_arguments): Use DECL_RTL_IF_SET.\n+\t(dump_var): Adjust access to offset.\n+\t(variable_from_dropped, recover_dropped_1paux): New.\n+\t(variable_was_changed): Drop cur_loc_changed.  Use onepart.\n+\tPreserve onepart aux in empty_var.  Recover empty_var and onepart\n+\taux from dropped_values.\n+\t(find_variable_location_part): Special-case onepart.  Adjust\n+\taccess to offset.\n+\t(set_slot_part): Use onepart.  Drop cur_loc_changed.  Adjust\n+\taccess to offset.  Initialize onepaux.  Drop value chains.\n+\t(delete_slot_part): Drop value chains.  Use VAR_LOC_FROM.\n+\t(VEC (variable, heap), VEC (rtx, stack)): Define.\n+\t(expand_loc_callback_data): Drop dummy, cur_loc_changed,\n+\tignore_cur_loc.  Add expanding, pending, depth.\n+\t(loc_exp_dep_alloc, loc_exp_dep_clear): New.\n+\t(loc_exp_dep_insert, loc_exp_dep_set): New.\n+\t(notify_dependents_of_resolved_value): New.\n+\t(update_depth, vt_expand_var_loc_chain): New.\n+\t(vt_expand_loc_callback): Revamped.\n+\t(resolve_expansions_pending_recursion): New.\n+\t(INIT_ELCD, FINI_ELCD): New.\n+\t(vt_expand_loc): Use the new macros above.  Drop ignore_cur_loc\n+\tparameter, adjust all callers.\n+\t(vt_expand_loc_dummy): Drop.\n+\t(vt_expand_1pvar): New.\n+\t(emit_note_insn_var_location): Operate on non-debug decls only.\n+\tRevamp multi-part cur_loc recomputation and one-part expansion.\n+\tDrop cur_loc_changed.  Adjust access to offset.\n+\t(VEC (variable, heap)): Drop.\n+\t(changed_variables_stack, changed_values_stack): Drop.\n+\t(check_changed_vars_0, check_changed_vars_1): Remove.\n+\t(check_changed_vars_2, check_changed_vars_3): Remove.\n+\t(values_to_stack, remove_value_from_changed_variables): New.\n+\t(notify_dependents_of_changed_value, process_changed_values): New.\n+\t(emit_notes_for_changes): Revamp onepart updates.\n+\t(emit_notes_for_differences_1): Use onepart.  Drop cur_loc_changed\n+\tand value chains.  Propagate onepaux.  Recover empty_var and onepaux\n+\tfrom dropped_values.\n+\t(emit_notes_for_differences_2): Drop value chains.\n+\t(emit_notes_in_bb): Adjust.\n+\t(vt_emit_notes): Drop value chains, changed_variables_stack.\n+\tInitialize and release dropped_values.\n+\t(create_entry_value): Revamp.\n+\t(vt_add_function_parameter): Use new interface.\n+\t(note_register_arguments): Remove.\n+\t(vt_initialize): Drop value chains and register arguments.\n+\t(vt_finalize): Drop value chains.  Release windowed_parm_regs only\n+\tif HAVE_window_save.\n+\t* rtl.h: Document various pass-local uses of RTL flags.\n+\t* tree.h (DECL_RTL_KNOWN_SET): New.\n+\t* doc/invoke.texi (param max-vartrack-expr-depth): Update\n+\tdescription and default.\n+\n 2011-10-19  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50447"}, {"sha": "0ac9f39b51bba1b840e4516f71468ebedb74cb33", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=09dbcd96d6b668e325e3b34297648d12f25e51b9", "patch": "@@ -9081,8 +9081,7 @@ compile time for more complete debug information.  If this is set too\n low, value expressions that are available and could be represented in\n debug information may end up not being used; setting this higher may\n enable the compiler to find more complex debug expressions, but compile\n-time may grow exponentially, and even then, it may fail to find more\n-usable expressions.  The default is 10.\n+time and memory use may grow.  The default is 12.\n \n @item min-nondebug-insn-uid\n Use uids starting at this parameter for nondebug insns.  The range below"}, {"sha": "1ffc7c26d7fb5694a0361e6ecf9e53ae4287dcf8", "filename": "gcc/rtl.h", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=09dbcd96d6b668e325e3b34297648d12f25e51b9", "patch": "@@ -265,7 +265,8 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      when we access a component.\n      1 in a CALL_INSN if it is a sibling call.\n      1 in a SET that is for a return.\n-     In a CODE_LABEL, part of the two-bit alternate entry field.  */\n+     In a CODE_LABEL, part of the two-bit alternate entry field.\n+     1 in a CONCAT is VAL_EXPR_IS_COPIED in var-tracking.c.  */\n   unsigned int jump : 1;\n   /* In a CODE_LABEL, part of the two-bit alternate entry field.\n      1 in a MEM if it cannot trap.\n@@ -278,7 +279,9 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      constants pool.\n      1 in a CALL_INSN logically equivalent to ECF_CONST and TREE_READONLY.\n      1 in a NOTE, or EXPR_LIST for a const call.\n-     1 in a JUMP_INSN of an annulling branch.  */\n+     1 in a JUMP_INSN of an annulling branch.\n+     1 in a CONCAT is VAL_EXPR_IS_CLOBBERED in var-tracking.c.\n+     1 in a preserved VALUE is PRESERVED_VALUE_P in cselib.c.  */\n   unsigned int unchanging : 1;\n   /* 1 in a MEM or ASM_OPERANDS expression if the memory reference is volatile.\n      1 in an INSN, CALL_INSN, JUMP_INSN, CODE_LABEL, BARRIER, or NOTE\n@@ -290,7 +293,8 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      non-local label.\n      In a SYMBOL_REF, this flag is used for machine-specific purposes.\n      In a PREFETCH, this flag indicates that it should be considered a scheduling\n-     barrier.  */\n+     barrier.\n+     1 in a CONCAT is VAL_NEEDS_RESOLUTION in var-tracking.c.  */\n   unsigned int volatil : 1;\n   /* 1 in a MEM referring to a field of an aggregate.\n      0 if the MEM was a variable or the result of a * operator in C;\n@@ -311,19 +315,24 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n      In a REG, this is not needed for that purpose, and used instead\n      in `leaf_renumber_regs_insn'.\n      1 in a SYMBOL_REF, means that emit_library_call\n-     has used it as the function.  */\n+     has used it as the function.\n+     1 in a CONCAT is VAL_HOLDS_TRACK_EXPR in var-tracking.c.\n+     1 in a VALUE or DEBUG_EXPR is VALUE_RECURSED_INTO in var-tracking.c.  */\n   unsigned int used : 1;\n   /* 1 in an INSN or a SET if this rtx is related to the call frame,\n      either changing how we compute the frame address or saving and\n      restoring registers in the prologue and epilogue.\n      1 in a REG or MEM if it is a pointer.\n      1 in a SYMBOL_REF if it addresses something in the per-function\n-     constant string pool.  */\n+     constant string pool.\n+     1 in a VALUE is VALUE_CHANGED in var-tracking.c.  */\n   unsigned frame_related : 1;\n   /* 1 in a REG or PARALLEL that is the current function's return value.\n      1 in a MEM if it refers to a scalar.\n      1 in a SYMBOL_REF for a weak symbol.\n-     1 in a CALL_INSN logically equivalent to ECF_PURE and DECL_PURE_P. */\n+     1 in a CALL_INSN logically equivalent to ECF_PURE and DECL_PURE_P.\n+     1 in a CONCAT is VAL_EXPR_HAS_REVERSE in var-tracking.c.\n+     1 in a VALUE or DEBUG_EXPR is NO_LOC_P in var-tracking.c.  */\n   unsigned return_val : 1;\n \n   /* The first element of the operands of this rtx."}, {"sha": "64ccdb034171b7b4c45b2bec9de5f61640eb3cea", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=09dbcd96d6b668e325e3b34297648d12f25e51b9", "patch": "@@ -2967,6 +2967,17 @@ extern void decl_value_expr_insert (tree, tree);\n /* The DECL_RTL for NODE, if it is set, or NULL, if it is not set.  */\n #define DECL_RTL_IF_SET(NODE) (DECL_RTL_SET_P (NODE) ? DECL_RTL (NODE) : NULL)\n \n+#if (GCC_VERSION >= 2007)\n+#define DECL_RTL_KNOWN_SET(decl) __extension__\t\t\t\t\\\n+({  tree const __d = (decl);\t\t\t\t\t\t\\\n+    gcc_checking_assert (DECL_RTL_SET_P (__d));\t\t\t\t\\\n+    /* Dereference it so the compiler knows it can't be NULL even\t\\\n+       without assertion checking.  */\t\t\t\t\t\\\n+    &*DECL_RTL_IF_SET (__d); })\n+#else\n+#define DECL_RTL_KNOWN_SET(decl) (&*DECL_RTL_IF_SET (decl))\n+#endif\n+\n /* In VAR_DECL and PARM_DECL nodes, nonzero means declared `register'.  */\n #define DECL_REGISTER(NODE) (DECL_WRTL_CHECK (NODE)->decl_common.decl_flag_0)\n "}, {"sha": "8a64000b616310304d00adf125b247d20977d38c", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1279, "deletions": 873, "changes": 2152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dbcd96d6b668e325e3b34297648d12f25e51b9/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=09dbcd96d6b668e325e3b34297648d12f25e51b9"}]}