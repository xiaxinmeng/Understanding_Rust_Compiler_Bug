{"sha": "efa591c57ef118d3e21c0a1550a31fb00d75407e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZhNTkxYzU3ZWYxMThkM2UyMWMwYTE1NTBhMzFmYjAwZDc1NDA3ZQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2007-03-22T22:51:50Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-03-22T22:51:50Z"}, "message": "re PR fortran/31262 (-fno-range-check with large integer values triggers ICE)\n\n\tPR fortran/31262\n\n\t* trans-const.c (gfc_conv_mpz_to_tree): Allow integer constants\n\tlarger than twice the width of a HOST_WIDE_INT.\n\n\t* gfortran.dg/no_range_check_1.f90: New test.\n\nFrom-SVN: r123136", "tree": {"sha": "0a5617457fdf2cbc258625c013283ae7a6b8e6b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a5617457fdf2cbc258625c013283ae7a6b8e6b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efa591c57ef118d3e21c0a1550a31fb00d75407e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa591c57ef118d3e21c0a1550a31fb00d75407e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa591c57ef118d3e21c0a1550a31fb00d75407e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa591c57ef118d3e21c0a1550a31fb00d75407e/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac294f0bbc8c83fb170f567c1032b7bf2cda829c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac294f0bbc8c83fb170f567c1032b7bf2cda829c"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "0cee9c8c1bdd36db02f19091fe632e581081d6a4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa591c57ef118d3e21c0a1550a31fb00d75407e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa591c57ef118d3e21c0a1550a31fb00d75407e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=efa591c57ef118d3e21c0a1550a31fb00d75407e", "patch": "@@ -1,3 +1,9 @@\n+2007-03-22  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/31262\n+\t* trans-const.c (gfc_conv_mpz_to_tree): Allow integer constants\n+\tlarger than twice the width of a HOST_WIDE_INT.\n+\n 2006-03-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31193"}, {"sha": "5e27134b006dc78533eda2562561b576feb6af23", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa591c57ef118d3e21c0a1550a31fb00d75407e/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa591c57ef118d3e21c0a1550a31fb00d75407e/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=efa591c57ef118d3e21c0a1550a31fb00d75407e", "patch": "@@ -165,23 +165,33 @@ gfc_conv_mpz_to_tree (mpz_t i, int kind)\n     }\n   else\n     {\n-      unsigned HOST_WIDE_INT words[2];\n-      size_t count;\n+      unsigned HOST_WIDE_INT *words;\n+      size_t count, numb;\n+\n+      /* Determine the number of unsigned HOST_WIDE_INT that are required\n+         for represent the value.  The code to calculate count is\n+\t extracted from the GMP manual, section \"Integer Import and Export\":\n+         http://gmplib.org/manual/Integer-Import-and-Export.html  */\n+      numb = 8*sizeof(HOST_WIDE_INT);\n+      count = (mpz_sizeinbase (i, 2) + numb-1) / numb;\n+      if (count < 2)\n+\tcount = 2;\n+      words = (unsigned HOST_WIDE_INT *) alloca (count * sizeof(HOST_WIDE_INT));\n \n       /* Since we know that the value is not zero (mpz_fits_slong_p),\n \t we know that at least one word will be written, but we don't know\n \t about the second.  It's quicker to zero the second word before\n \t than conditionally clear it later.  */\n       words[1] = 0;\n-\n+      \n       /* Extract the absolute value into words.  */\n-      mpz_export (words, &count, -1, sizeof (HOST_WIDE_INT), 0, 0, i);\n-\n-      /* We assume that all numbers are in range for its type, and that\n-\t we never create a type larger than 2*HWI, which is the largest\n-\t that the middle-end can handle.  */\n-      gcc_assert (count == 1 || count == 2);\n+      mpz_export (words, &count, -1, sizeof(HOST_WIDE_INT), 0, 0, i);\n \n+      /* We don't assume that all numbers are in range for its type.\n+         However, we never create a type larger than 2*HWI, which is the\n+\t largest that the middle-end can handle. So, we only take the\n+\t first two elements of words, which is equivalent to wrapping the\n+\t value if it's larger than the type range.  */\n       low = words[0];\n       high = words[1];\n "}, {"sha": "936cebc8237e198c06f2825ebfd3d89c13391ff5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa591c57ef118d3e21c0a1550a31fb00d75407e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa591c57ef118d3e21c0a1550a31fb00d75407e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efa591c57ef118d3e21c0a1550a31fb00d75407e", "patch": "@@ -1,3 +1,8 @@\n+2007-03-22  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/31262\n+\t* gfortran.dg/no_range_check_1.f90: New test.\n+\n 2007-03-22  Dirk Mueller  <dmueller@suse.de>\n \n \t* g++.old-deja/g++.brendan/warnings2.C: Don't use -pedantic."}, {"sha": "36890866e3a3b344152452816d1ecff37a55eb96", "filename": "gcc/testsuite/gfortran.dg/no_range_check_1.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa591c57ef118d3e21c0a1550a31fb00d75407e/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa591c57ef118d3e21c0a1550a31fb00d75407e/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_range_check_1.f90?ref=efa591c57ef118d3e21c0a1550a31fb00d75407e", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fno-range-check -O0\" }\n+!\n+! This testcase arose from PR 31262\n+  integer :: a\n+  integer(kind=8) :: b\n+  a = -3\n+  b = -huge(b) / 7\n+  a = a ** 73\n+  b = 7894_8 * b - 78941_8\n+  if ((-3)**73 /= a) call abort\n+  if (7894_8 * (-huge(b) / 7) - 78941_8 /= b) call abort\n+\n+  a = 1234789786453123\n+  if (a - 1234789786453123 /= a - (-426244989)) call abort\n+  end"}]}