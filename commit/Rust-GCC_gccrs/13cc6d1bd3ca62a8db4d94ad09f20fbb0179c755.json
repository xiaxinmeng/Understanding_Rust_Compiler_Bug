{"sha": "13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjYzZkMWJkM2NhNjJhOGRiNGQ5NGFkMDlmMjBmYmIwMTc5Yzc1NQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2007-05-03T19:05:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-05-03T19:05:39Z"}, "message": "double.h, [...]: Update from glibc CVS.\n\n\t* config/soft-fp/double.h, config/soft-fp/extended.h,\n\tconfig/soft-fp/floatundidf.c, config/soft-fp/floatundisf.c,\n\tconfig/soft-fp/floatunsidf.c, config/soft-fp/floatunsisf.c,\n\tconfig/soft-fp/op-2.h, config/soft-fp/op-4.h,\n\tconfig/soft-fp/op-common.h, config/soft-fp/quad.h: Update from\n\tglibc CVS.\n\nFrom-SVN: r124388", "tree": {"sha": "5ce9137f21176772c7b51c83b586d725d2957c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ce9137f21176772c7b51c83b586d725d2957c9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97797e00e784d263526d88a3949e6bd7fa838101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97797e00e784d263526d88a3949e6bd7fa838101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97797e00e784d263526d88a3949e6bd7fa838101"}], "stats": {"total": 163, "additions": 88, "deletions": 75}, "files": [{"sha": "8bb6798d696f2577534cf9ba1f1665822004700c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,3 +1,12 @@\n+2007-05-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/soft-fp/double.h, config/soft-fp/extended.h,\n+\tconfig/soft-fp/floatundidf.c, config/soft-fp/floatundisf.c,\n+\tconfig/soft-fp/floatunsidf.c, config/soft-fp/floatunsisf.c,\n+\tconfig/soft-fp/op-2.h, config/soft-fp/op-4.h,\n+\tconfig/soft-fp/op-common.h, config/soft-fp/quad.h: Update from\n+\tglibc CVS.\n+\n 2007-05-03  Ian Lance Taylor  <iant@google.com>\n \n \t* config/rs6000/rs6000.c (rs6000_override_options): Don't se"}, {"sha": "b012d9d51be7d8a9dd4b73a166c216cbaf66e902", "filename": "gcc/config/soft-fp/double.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fdouble.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fdouble.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Fdouble.h?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Definitions for IEEE Double Precision\n-   Copyright (C) 1997,1998,1999,2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997,1998,1999,2006,2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -168,13 +168,13 @@ union _FP_UNION_D\n   DFtype flt;\n   struct {\n #if __BYTE_ORDER == __BIG_ENDIAN\n-    unsigned sign : 1;\n-    unsigned exp  : _FP_EXPBITS_D;\n-    unsigned long frac : _FP_FRACBITS_D - (_FP_IMPLBIT_D != 0);\n+    unsigned sign   : 1;\n+    unsigned exp    : _FP_EXPBITS_D;\n+    _FP_W_TYPE frac : _FP_FRACBITS_D - (_FP_IMPLBIT_D != 0);\n #else\n-    unsigned long frac : _FP_FRACBITS_D - (_FP_IMPLBIT_D != 0);\n-    unsigned exp  : _FP_EXPBITS_D;\n-    unsigned sign : 1;\n+    _FP_W_TYPE frac : _FP_FRACBITS_D - (_FP_IMPLBIT_D != 0);\n+    unsigned exp    : _FP_EXPBITS_D;\n+    unsigned sign   : 1;\n #endif\n   } bits __attribute__((packed));\n };"}, {"sha": "e5f16debecb996083ab417322f29c798f131c6c1", "filename": "gcc/config/soft-fp/extended.h", "status": "modified", "additions": 16, "deletions": 38, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fextended.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fextended.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Fextended.h?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Definitions for IEEE Extended Precision.\n-   Copyright (C) 1999,2006 Free Software Foundation, Inc.\n+   Copyright (C) 1999,2006,2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek (jj@ultra.linux.cz).\n \n@@ -94,12 +94,6 @@ union _FP_UNION_E\n     X##_f[1] = _flo.bits.frac1;\t\t\t\t\\\n     X##_e  = _flo.bits.exp;\t\t\t\t\\\n     X##_s  = _flo.bits.sign;\t\t\t\t\\\n-    if (!X##_e && (X##_f[1] || X##_f[0])\t\t\\\n-        && !(X##_f[1] & _FP_IMPLBIT_E))\t\t\t\\\n-      {\t\t\t\t\t\t\t\\\n-        X##_e++;\t\t\t\t\t\\\n-        FP_SET_EXCEPTION(FP_EX_DENORM);\t\t\t\\\n-      }\t\t\t\t\t\t\t\\\n   } while (0)\n \n #define FP_UNPACK_RAW_EP(X, val)\t\t\t\\\n@@ -112,12 +106,6 @@ union _FP_UNION_E\n     X##_f[1] = _flo->bits.frac1;\t\t\t\\\n     X##_e  = _flo->bits.exp;\t\t\t\t\\\n     X##_s  = _flo->bits.sign;\t\t\t\t\\\n-    if (!X##_e && (X##_f[1] || X##_f[0])\t\t\\\n-        && !(X##_f[1] & _FP_IMPLBIT_E))\t\t\t\\\n-      {\t\t\t\t\t\t\t\\\n-        X##_e++;\t\t\t\t\t\\\n-        FP_SET_EXCEPTION(FP_EX_DENORM);\t\t\t\\\n-      }\t\t\t\t\t\t\t\\\n   } while (0)\n \n #define FP_PACK_RAW_E(val, X)\t\t\t\t\\\n@@ -164,13 +152,13 @@ union _FP_UNION_E\n \n #define FP_UNPACK_SEMIRAW_E(X,val)\t\\\n   do {\t\t\t\t\t\\\n-    _FP_UNPACK_RAW_E(X,val);\t\t\\\n+    FP_UNPACK_RAW_E(X,val);\t\t\\\n     _FP_UNPACK_SEMIRAW(E,4,X);\t\t\\\n   } while (0)\n \n #define FP_UNPACK_SEMIRAW_EP(X,val)\t\\\n   do {\t\t\t\t\t\\\n-    _FP_UNPACK_RAW_EP(X,val);\t\t\\\n+    FP_UNPACK_RAW_EP(X,val);\t\t\\\n     _FP_UNPACK_SEMIRAW(E,4,X);\t\t\\\n   } while (0)\n \n@@ -189,13 +177,13 @@ union _FP_UNION_E\n #define FP_PACK_SEMIRAW_E(val,X)\t\\\n   do {\t\t\t\t\t\\\n     _FP_PACK_SEMIRAW(E,4,X);\t\t\\\n-    _FP_PACK_RAW_E(val,X);\t\t\\\n+    FP_PACK_RAW_E(val,X);\t\t\\\n   } while (0)\n \n #define FP_PACK_SEMIRAW_EP(val,X)\t\\\n   do {\t\t\t\t\t\\\n     _FP_PACK_SEMIRAW(E,4,X);\t\t\\\n-    _FP_PACK_RAW_EP(val,X);\t\t\\\n+    FP_PACK_RAW_EP(val,X);\t\t\\\n   } while (0)\n \n #define FP_ISSIGNAN_E(X)\t_FP_ISSIGNAN(E,4,X)\n@@ -277,14 +265,14 @@ union _FP_UNION_E\n   XFtype flt;\n   struct {\n #if __BYTE_ORDER == __BIG_ENDIAN\n-    unsigned long pad : (_FP_W_TYPE_SIZE - 1 - _FP_EXPBITS_E);\n-    unsigned sign  : 1;\n-    unsigned exp   : _FP_EXPBITS_E;\n-    unsigned long frac : _FP_W_TYPE_SIZE;\n+    _FP_W_TYPE pad  : (_FP_W_TYPE_SIZE - 1 - _FP_EXPBITS_E);\n+    unsigned sign   : 1;\n+    unsigned exp    : _FP_EXPBITS_E;\n+    _FP_W_TYPE frac : _FP_W_TYPE_SIZE;\n #else\n-    unsigned long frac : _FP_W_TYPE_SIZE;\n-    unsigned exp   : _FP_EXPBITS_E;\n-    unsigned sign  : 1;\n+    _FP_W_TYPE frac : _FP_W_TYPE_SIZE;\n+    unsigned exp    : _FP_EXPBITS_E;\n+    unsigned sign   : 1;\n #endif\n   } bits;\n };\n@@ -299,11 +287,6 @@ union _FP_UNION_E\n     X##_f1 = 0;\t\t\t\t\t\t\t\\\n     X##_e = _flo.bits.exp;\t\t\t\t\t\\\n     X##_s = _flo.bits.sign;\t\t\t\t\t\\\n-    if (!X##_e && X##_f0 && !(X##_f0 & _FP_IMPLBIT_E))\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        X##_e++;\t\t\t\t\t\t\\\n-        FP_SET_EXCEPTION(FP_EX_DENORM);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n #define FP_UNPACK_RAW_EP(X, val)\t\t\t\t\\\n@@ -315,11 +298,6 @@ union _FP_UNION_E\n     X##_f1 = 0;\t\t\t\t\t\t\t\\\n     X##_e = _flo->bits.exp;\t\t\t\t\t\\\n     X##_s = _flo->bits.sign;\t\t\t\t\t\\\n-    if (!X##_e && X##_f0 && !(X##_f0 & _FP_IMPLBIT_E))\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        X##_e++;\t\t\t\t\t\t\\\n-        FP_SET_EXCEPTION(FP_EX_DENORM);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n #define FP_PACK_RAW_E(val, X)\t\t\t\t\t\\\n@@ -365,13 +343,13 @@ union _FP_UNION_E\n \n #define FP_UNPACK_SEMIRAW_E(X,val)\t\\\n   do {\t\t\t\t\t\\\n-    _FP_UNPACK_RAW_E(X,val);\t\t\\\n+    FP_UNPACK_RAW_E(X,val);\t\t\\\n     _FP_UNPACK_SEMIRAW(E,2,X);\t\t\\\n   } while (0)\n \n #define FP_UNPACK_SEMIRAW_EP(X,val)\t\\\n   do {\t\t\t\t\t\\\n-    _FP_UNPACK_RAW_EP(X,val);\t\t\\\n+    FP_UNPACK_RAW_EP(X,val);\t\t\\\n     _FP_UNPACK_SEMIRAW(E,2,X);\t\t\\\n   } while (0)\n \n@@ -390,13 +368,13 @@ union _FP_UNION_E\n #define FP_PACK_SEMIRAW_E(val,X)\t\\\n   do {\t\t\t\t\t\\\n     _FP_PACK_SEMIRAW(E,2,X);\t\t\\\n-    _FP_PACK_RAW_E(val,X);\t\t\\\n+    FP_PACK_RAW_E(val,X);\t\t\\\n   } while (0)\n \n #define FP_PACK_SEMIRAW_EP(val,X)\t\\\n   do {\t\t\t\t\t\\\n     _FP_PACK_SEMIRAW(E,2,X);\t\t\\\n-    _FP_PACK_RAW_EP(val,X);\t\t\\\n+    FP_PACK_RAW_EP(val,X);\t\t\\\n   } while (0)\n \n #define FP_ISSIGNAN_E(X)\t_FP_ISSIGNAN(E,2,X)"}, {"sha": "af8e4a5aefe8e1d0d9c72d7ece9db5827de1e62e", "filename": "gcc/config/soft-fp/floatundidf.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Ffloatundidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Ffloatundidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloatundidf.c?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 64bit unsigned integer to IEEE double\n-   Copyright (C) 1997,1999, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1999, 2006, 2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz).\n@@ -32,8 +32,7 @@\n #include \"soft-fp.h\"\n #include \"double.h\"\n \n-double\n-__floatundidf(UDItype i)\n+DFtype __floatundidf(UDItype i)\n {\n   FP_DECL_EX;\n   FP_DECL_D(A);"}, {"sha": "977f7dfc79f9ba531221f2c3b7e54180a55d5c01", "filename": "gcc/config/soft-fp/floatundisf.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Ffloatundisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Ffloatundisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloatundisf.c?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 64bit unsigned integer to IEEE single\n-   Copyright (C) 1997,1999, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1999, 2006, 2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz).\n@@ -32,8 +32,7 @@\n #include \"soft-fp.h\"\n #include \"single.h\"\n \n-float\n-__floatundisf(UDItype i)\n+SFtype __floatundisf(UDItype i)\n {\n   FP_DECL_EX;\n   FP_DECL_S(A);"}, {"sha": "12d0f25bf0fee92d8dd8f6fa07e7baa60ecbe741", "filename": "gcc/config/soft-fp/floatunsidf.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Ffloatunsidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Ffloatunsidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloatunsidf.c?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 32bit unsigned integer to IEEE double\n-   Copyright (C) 1997,1999, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1999, 2006, 2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz).\n@@ -32,8 +32,7 @@\n #include \"soft-fp.h\"\n #include \"double.h\"\n \n-double\n-__floatunsidf(USItype i)\n+DFtype __floatunsidf(USItype i)\n {\n   FP_DECL_EX;\n   FP_DECL_D(A);"}, {"sha": "80c5d3d359fa49dd9e92dbbe1ce1578262bfc977", "filename": "gcc/config/soft-fp/floatunsisf.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Ffloatunsisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Ffloatunsisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Ffloatunsisf.c?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 32bit unsigned integer to IEEE single\n-   Copyright (C) 1997,1999, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1999, 2006, 2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz).\n@@ -32,8 +32,7 @@\n #include \"soft-fp.h\"\n #include \"single.h\"\n \n-float\n-__floatunsisf(USItype i)\n+SFtype __floatunsisf(USItype i)\n {\n   FP_DECL_EX;\n   FP_DECL_S(A);"}, {"sha": "3a3b3aa0691342798d41c5c99eb65c4e9a868934", "filename": "gcc/config/soft-fp/op-2.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fop-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fop-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Fop-2.h?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Basic two-word fraction declaration and manipulation.\n-   Copyright (C) 1997,1998,1999,2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997,1998,1999,2006,2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -613,3 +613,5 @@\n #define _FP_FRAC_COPY_1_2(D, S)\t\t(D##_f = S##_f0)\n \n #define _FP_FRAC_COPY_2_1(D, S)\t\t((D##_f0 = S##_f), (D##_f1 = 0))\n+\n+#define _FP_FRAC_COPY_2_2(D,S)\t\t_FP_FRAC_COPY_2(D,S)"}, {"sha": "70b9fafbe5a5efd30ed69a5637f92eab445e74a0", "filename": "gcc/config/soft-fp/op-4.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fop-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fop-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Fop-4.h?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Basic four-word fraction declaration and manipulation.\n-   Copyright (C) 1997,1998,1999,2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997,1998,1999,2006,2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -684,3 +684,5 @@ do {\t\t\t\t\t\t\\\n   D##_f[1] = S##_f1;\t\t\t\t\\\n   D##_f[2] = D##_f[3] = 0;\t\t\t\\\n } while (0)\n+\n+#define _FP_FRAC_COPY_4_4(D,S)\t_FP_FRAC_COPY_4(D,S)"}, {"sha": "ef11b527b7063a0bd57c2978bcff8c65929b8526", "filename": "gcc/config/soft-fp/op-common.h", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fop-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fop-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Fop-common.h?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1153,7 +1153,8 @@ do {\t\t\t\t\t\t\t\t\t \\\n   if (_FP_FRACBITS_##dfs < _FP_FRACBITS_##sfs\t\t\t\t \\\n       || (_FP_EXPMAX_##dfs - _FP_EXPBIAS_##dfs\t\t\t\t \\\n \t  < _FP_EXPMAX_##sfs - _FP_EXPBIAS_##sfs)\t\t\t \\\n-      || _FP_EXPBIAS_##dfs < _FP_EXPBIAS_##sfs + _FP_FRACBITS_##sfs - 1) \\\n+      || (_FP_EXPBIAS_##dfs < _FP_EXPBIAS_##sfs + _FP_FRACBITS_##sfs - 1 \\\n+\t  && _FP_EXPBIAS_##dfs != _FP_EXPBIAS_##sfs))\t\t\t \\\n     abort();\t\t\t\t\t\t\t\t \\\n   D##_s = S##_s;\t\t\t\t\t\t\t \\\n   _FP_FRAC_COPY_##dwc##_##swc(D, S);\t\t\t\t\t \\\n@@ -1168,6 +1169,14 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t{\t\t\t\t\t\t\t\t \\\n \t  if (_FP_FRAC_ZEROP_##swc(S))\t\t\t\t\t \\\n \t    D##_e = 0;\t\t\t\t\t\t\t \\\n+\t  else if (_FP_EXPBIAS_##dfs\t\t\t\t\t \\\n+\t\t   < _FP_EXPBIAS_##sfs + _FP_FRACBITS_##sfs - 1)\t \\\n+\t    {\t\t\t\t\t\t\t\t \\\n+\t      FP_SET_EXCEPTION(FP_EX_DENORM);\t\t\t\t \\\n+\t      _FP_FRAC_SLL_##dwc(D, (_FP_FRACBITS_##dfs\t\t\t \\\n+\t\t\t\t     - _FP_FRACBITS_##sfs));\t\t \\\n+\t      D##_e = 0;\t\t\t\t\t\t \\\n+\t    }\t\t\t\t\t\t\t\t \\\n \t  else\t\t\t\t\t\t\t\t \\\n \t    {\t\t\t\t\t\t\t\t \\\n \t      int _lz;\t\t\t\t\t\t\t \\\n@@ -1199,7 +1208,8 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define FP_TRUNC(dfs,sfs,dwc,swc,D,S)\t\t\t\t\t     \\\n do {\t\t\t\t\t\t\t\t\t     \\\n   if (_FP_FRACBITS_##sfs < _FP_FRACBITS_##dfs\t\t\t\t     \\\n-      || _FP_EXPBIAS_##sfs < _FP_EXPBIAS_##dfs + _FP_FRACBITS_##dfs - 1)     \\\n+      || (_FP_EXPBIAS_##sfs < _FP_EXPBIAS_##dfs + _FP_FRACBITS_##dfs - 1     \\\n+\t  && _FP_EXPBIAS_##sfs != _FP_EXPBIAS_##dfs))\t\t\t     \\\n     abort();\t\t\t\t\t\t\t\t     \\\n   D##_s = S##_s;\t\t\t\t\t\t\t     \\\n   if (_FP_EXP_NORMAL(sfs, swc, S))\t\t\t\t\t     \\\n@@ -1211,8 +1221,11 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \t{\t\t\t\t\t\t\t\t     \\\n \t  if (D##_e <= 0)\t\t\t\t\t\t     \\\n \t    {\t\t\t\t\t\t\t\t     \\\n-\t      if (D##_e <= 1 - _FP_FRACBITS_##dfs)\t\t\t     \\\n-\t\t_FP_FRAC_SET_##swc(S, _FP_ZEROFRAC_##swc);\t\t     \\\n+\t      if (D##_e < 1 - _FP_FRACBITS_##dfs)\t\t\t     \\\n+\t\t{\t\t\t\t\t\t\t     \\\n+\t\t  _FP_FRAC_SET_##swc(S, _FP_ZEROFRAC_##swc);\t\t     \\\n+\t\t  _FP_FRAC_LOW_##swc(S) |= 1;\t\t\t\t     \\\n+\t\t}\t\t\t\t\t\t\t     \\\n \t      else\t\t\t\t\t\t\t     \\\n \t\t{\t\t\t\t\t\t\t     \\\n \t\t  _FP_FRAC_HIGH_##sfs(S) |= _FP_IMPLBIT_SH_##sfs;\t     \\\n@@ -1234,11 +1247,24 @@ do {\t\t\t\t\t\t\t\t\t     \\\n       if (S##_e == 0)\t\t\t\t\t\t\t     \\\n \t{\t\t\t\t\t\t\t\t     \\\n \t  D##_e = 0;\t\t\t\t\t\t\t     \\\n-\t  _FP_FRAC_SET_##dwc(D, _FP_ZEROFRAC_##dwc);\t\t\t     \\\n-\t  if (!_FP_FRAC_ZEROP_##swc(S))\t\t\t\t\t     \\\n+\t  if (_FP_FRAC_ZEROP_##swc(S))\t\t\t\t\t     \\\n+\t    _FP_FRAC_SET_##dwc(D, _FP_ZEROFRAC_##dwc);\t\t\t     \\\n+\t  else\t\t\t\t\t\t\t\t     \\\n \t    {\t\t\t\t\t\t\t\t     \\\n \t      FP_SET_EXCEPTION(FP_EX_DENORM);\t\t\t\t     \\\n-\t      FP_SET_EXCEPTION(FP_EX_INEXACT);\t\t\t\t     \\\n+\t      if (_FP_EXPBIAS_##sfs\t\t\t\t\t     \\\n+\t\t  < _FP_EXPBIAS_##dfs + _FP_FRACBITS_##dfs - 1)\t\t     \\\n+\t\t{\t\t\t\t\t\t\t     \\\n+\t\t  _FP_FRAC_SRS_##swc(S, (_FP_WFRACBITS_##sfs\t\t     \\\n+\t\t\t\t\t - _FP_WFRACBITS_##dfs),\t     \\\n+\t\t\t\t     _FP_WFRACBITS_##sfs);\t\t     \\\n+\t\t  _FP_FRAC_COPY_##dwc##_##swc(D, S);\t\t\t     \\\n+\t\t}\t\t\t\t\t\t\t     \\\n+\t      else\t\t\t\t\t\t\t     \\\n+\t\t{\t\t\t\t\t\t\t     \\\n+\t\t  _FP_FRAC_SET_##dwc(D, _FP_ZEROFRAC_##dwc);\t\t     \\\n+\t\t  _FP_FRAC_LOW_##dwc(D) |= 1;\t\t\t\t     \\\n+\t\t}\t\t\t\t\t\t\t     \\\n \t    }\t\t\t\t\t\t\t\t     \\\n \t}\t\t\t\t\t\t\t\t     \\\n       else\t\t\t\t\t\t\t\t     \\"}, {"sha": "c22e944029f4606fbe23fbb0a00f6e05b4abaf2e", "filename": "gcc/config/soft-fp/quad.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fquad.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755/gcc%2Fconfig%2Fsoft-fp%2Fquad.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsoft-fp%2Fquad.h?ref=13cc6d1bd3ca62a8db4d94ad09f20fbb0179c755", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Definitions for IEEE Quad Precision.\n-   Copyright (C) 1997,1998,1999,2006 Free Software Foundation, Inc.\n+   Copyright (C) 1997,1998,1999,2006,2007 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -176,15 +176,15 @@ union _FP_UNION_Q\n   } longs;\n   struct {\n #if __BYTE_ORDER == __BIG_ENDIAN\n-    unsigned sign  : 1;\n-    unsigned exp   : _FP_EXPBITS_Q;\n-    unsigned long frac1 : _FP_FRACBITS_Q-(_FP_IMPLBIT_Q != 0)-_FP_W_TYPE_SIZE;\n-    unsigned long frac0 : _FP_W_TYPE_SIZE;\n+    unsigned sign    : 1;\n+    unsigned exp     : _FP_EXPBITS_Q;\n+    _FP_W_TYPE frac1 : _FP_FRACBITS_Q - (_FP_IMPLBIT_Q != 0) - _FP_W_TYPE_SIZE;\n+    _FP_W_TYPE frac0 : _FP_W_TYPE_SIZE;\n #else\n-    unsigned long frac0 : _FP_W_TYPE_SIZE;\n-    unsigned long frac1 : _FP_FRACBITS_Q-(_FP_IMPLBIT_Q != 0)-_FP_W_TYPE_SIZE;\n-    unsigned exp   : _FP_EXPBITS_Q;\n-    unsigned sign  : 1;\n+    _FP_W_TYPE frac0 : _FP_W_TYPE_SIZE;\n+    _FP_W_TYPE frac1 : _FP_FRACBITS_Q - (_FP_IMPLBIT_Q != 0) - _FP_W_TYPE_SIZE;\n+    unsigned exp     : _FP_EXPBITS_Q;\n+    unsigned sign    : 1;\n #endif\n   } bits;\n };"}]}