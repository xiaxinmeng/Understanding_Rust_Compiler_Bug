{"sha": "528a80c14ee077f5f801181a1732dc1c9fa1ffd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI4YTgwYzE0ZWUwNzdmNWY4MDExODFhMTczMmRjMWM5ZmExZmZkMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T15:36:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T15:36:14Z"}, "message": "explow.c: Use rtx_insn and rtx_code_label\n\ngcc/\n\t* explow.c (force_reg): Strengthen local \"insn\" from rtx to\n\trtx_insn *.\n\t(adjust_stack_1): Likewise.\n\t(allocate_dynamic_stack_space): Likewise.  Strengthen locals\n\t\"final_label\", \"available_label\", \"space_available\" from rtx to\n\trtx_code_label *.\n\t(probe_stack_range): Likewise for locals \"loop_lab\", \"end_lab\".\n\t(anti_adjust_stack_and_probe): Likewise.\n\nFrom-SVN: r214322", "tree": {"sha": "24a2e61f9511b585ae9679bfa1a9459e800190c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24a2e61f9511b585ae9679bfa1a9459e800190c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/528a80c14ee077f5f801181a1732dc1c9fa1ffd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/528a80c14ee077f5f801181a1732dc1c9fa1ffd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/528a80c14ee077f5f801181a1732dc1c9fa1ffd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/528a80c14ee077f5f801181a1732dc1c9fa1ffd2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8b2330207cc45676d01e735248df779c82f9334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b2330207cc45676d01e735248df779c82f9334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b2330207cc45676d01e735248df779c82f9334"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "bd7265e5a57ea47f2f578c86c4d8b6d401af2b52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/528a80c14ee077f5f801181a1732dc1c9fa1ffd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/528a80c14ee077f5f801181a1732dc1c9fa1ffd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=528a80c14ee077f5f801181a1732dc1c9fa1ffd2", "patch": "@@ -1,3 +1,14 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* explow.c (force_reg): Strengthen local \"insn\" from rtx to\n+\trtx_insn *.\n+\t(adjust_stack_1): Likewise.\n+\t(allocate_dynamic_stack_space): Likewise.  Strengthen locals\n+\t\"final_label\", \"available_label\", \"space_available\" from rtx to\n+\trtx_code_label *.\n+\t(probe_stack_range): Likewise for locals \"loop_lab\", \"end_lab\".\n+\t(anti_adjust_stack_and_probe): Likewise.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* except.h (sjlj_emit_function_exit_after): Strengthen param"}, {"sha": "91de63996ef9fd388371dfd48eae520d32c9965a", "filename": "gcc/explow.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/528a80c14ee077f5f801181a1732dc1c9fa1ffd2/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/528a80c14ee077f5f801181a1732dc1c9fa1ffd2/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=528a80c14ee077f5f801181a1732dc1c9fa1ffd2", "patch": "@@ -649,7 +649,8 @@ copy_to_mode_reg (enum machine_mode mode, rtx x)\n rtx\n force_reg (enum machine_mode mode, rtx x)\n {\n-  rtx temp, insn, set;\n+  rtx temp, set;\n+  rtx_insn *insn;\n \n   if (REG_P (x))\n     return x;\n@@ -880,7 +881,8 @@ static bool suppress_reg_args_size;\n static void\n adjust_stack_1 (rtx adjust, bool anti_p)\n {\n-  rtx temp, insn;\n+  rtx temp;\n+  rtx_insn *insn;\n \n #ifndef STACK_GROWS_DOWNWARD\n   /* Hereafter anti_p means subtract_p.  */\n@@ -1160,7 +1162,8 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n \t\t\t      unsigned required_align, bool cannot_accumulate)\n {\n   HOST_WIDE_INT stack_usage_size = -1;\n-  rtx final_label, final_target, target;\n+  rtx_code_label *final_label;\n+  rtx final_target, target;\n   unsigned extra_align = 0;\n   bool must_align;\n \n@@ -1184,7 +1187,8 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n         {\n \t  /* Look into the last emitted insn and see if we can deduce\n \t     something for the register.  */\n-\t  rtx insn, set, note;\n+\t  rtx_insn *insn;\n+\t  rtx set, note;\n \t  insn = get_last_insn ();\n \t  if ((set = single_set (insn)) && rtx_equal_p (SET_DEST (set), size))\n \t    {\n@@ -1313,7 +1317,7 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n \tcurrent_function_has_unbounded_dynamic_stack_size = 1;\n     }\n \n-  final_label = NULL_RTX;\n+  final_label = NULL;\n   final_target = NULL_RTX;\n \n   /* If we are splitting the stack, we need to ask the backend whether\n@@ -1325,9 +1329,10 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n      least it doesn't cause a stack overflow.  */\n   if (flag_split_stack)\n     {\n-      rtx available_label, ask, space, func;\n+      rtx_code_label *available_label;\n+      rtx ask, space, func;\n \n-      available_label = NULL_RTX;\n+      available_label = NULL;\n \n #ifdef HAVE_split_stack_space_check\n       if (HAVE_split_stack_space_check)\n@@ -1420,7 +1425,7 @@ allocate_dynamic_stack_space (rtx size, unsigned size_align,\n       if (crtl->limit_stack)\n \t{\n \t  rtx available;\n-\t  rtx space_available = gen_label_rtx ();\n+\t  rtx_code_label *space_available = gen_label_rtx ();\n #ifdef STACK_GROWS_DOWNWARD\n \t  available = expand_binop (Pmode, sub_optab,\n \t\t\t\t    stack_pointer_rtx, stack_limit_rtx,\n@@ -1622,9 +1627,8 @@ probe_stack_range (HOST_WIDE_INT first, rtx size)\n   else\n     {\n       rtx rounded_size, rounded_size_op, test_addr, last_addr, temp;\n-      rtx loop_lab = gen_label_rtx ();\n-      rtx end_lab = gen_label_rtx ();\n-\n+      rtx_code_label *loop_lab = gen_label_rtx ();\n+      rtx_code_label *end_lab = gen_label_rtx ();\n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */\n \n@@ -1770,8 +1774,8 @@ anti_adjust_stack_and_probe (rtx size, bool adjust_back)\n   else\n     {\n       rtx rounded_size, rounded_size_op, last_addr, temp;\n-      rtx loop_lab = gen_label_rtx ();\n-      rtx end_lab = gen_label_rtx ();\n+      rtx_code_label *loop_lab = gen_label_rtx ();\n+      rtx_code_label *end_lab = gen_label_rtx ();\n \n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */"}]}