{"sha": "97c54d9afb7e891eff59d464ce0b74cb45bb3c39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjNTRkOWFmYjdlODkxZWZmNTlkNDY0Y2UwYjc0Y2I0NWJiM2MzOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-03-13T20:28:29Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-03-13T20:28:29Z"}, "message": "predicates.md (mem_or_easy_const_operand): Delete.\n\n        * config/rs6000/predicates.md (mem_or_easy_const_operand): Delete.\n        (reg_or_none500mem_operand): New predicate.\n        (zero_reg_mem_operand): New predicate.\n        * config/rs6000/rs6000.md (extendsfdf2): Change operand1 predicate\n        to reg_or_none500mem_operand.\n        (extendsfdf2_fpr): Add MEM alternative.\n        (extenddftf2_internal): Change operand2 predicate to\n        zero_reg_mem_operand.\n\nFrom-SVN: r96390", "tree": {"sha": "a70ae0c8ffccafe4321d6e6c0205f17d502b9e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a70ae0c8ffccafe4321d6e6c0205f17d502b9e08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97c54d9afb7e891eff59d464ce0b74cb45bb3c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c54d9afb7e891eff59d464ce0b74cb45bb3c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c54d9afb7e891eff59d464ce0b74cb45bb3c39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c54d9afb7e891eff59d464ce0b74cb45bb3c39/comments", "author": null, "committer": null, "parents": [{"sha": "f96c612393e4e8e97f839fcd8f3ff87971190923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f96c612393e4e8e97f839fcd8f3ff87971190923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f96c612393e4e8e97f839fcd8f3ff87971190923"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "c5989d35b5994aa54d4c5c43090da31894ad6f94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c54d9afb7e891eff59d464ce0b74cb45bb3c39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c54d9afb7e891eff59d464ce0b74cb45bb3c39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97c54d9afb7e891eff59d464ce0b74cb45bb3c39", "patch": "@@ -1,3 +1,14 @@\n+2005-03-13  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/predicates.md (mem_or_easy_const_operand): Delete.\n+\t(reg_or_none500mem_operand): New predicate.\n+\t(zero_reg_mem_operand): New predicate.\n+\t* config/rs6000/rs6000.md (extendsfdf2): Change operand1 predicate\n+\tto reg_or_none500mem_operand.\n+\t(extendsfdf2_fpr): Add MEM alternative.\n+\t(extenddftf2_internal): Change operand2 predicate to\n+\tzero_reg_mem_operand.\n+\n 2005-03-13  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* ggc-zone.c: Rewritten."}, {"sha": "110898fcec6720b8d56147021995bbc9e7da9276", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c54d9afb7e891eff59d464ce0b74cb45bb3c39/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c54d9afb7e891eff59d464ce0b74cb45bb3c39/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=97c54d9afb7e891eff59d464ce0b74cb45bb3c39", "patch": "@@ -342,12 +342,6 @@\n \t\t\t\t\t   || reload_in_progress,\n \t\t\t\t\t   mode, XEXP (op, 0))\")))\n \n-;; Return 1 if the operand is either an easy FP constant or memory.\n-(define_predicate \"mem_or_easy_const_operand\"\n-  (if_then_else (match_code \"const_double\")\n-    (match_operand 0 \"easy_fp_constant\")\n-    (match_operand 0 \"memory_operand\")))\n-\n ;; Return 1 if the operand is either a non-special register or can be used\n ;; as the operand of a `mode' add insn.\n (define_predicate \"add_operand\"\n@@ -537,6 +531,20 @@\n \t       (match_operand 0 \"volatile_mem_operand\")))\n      (match_operand 0 \"gpc_reg_operand\")))\n \n+;; Return 1 if the operand is either an easy FP constant or memory or reg.\n+(define_predicate \"reg_or_none500mem_operand\"\n+  (if_then_else (match_code \"mem\")\n+     (and (match_test \"!TARGET_E500_DOUBLE\")\n+\t  (ior (match_operand 0 \"memory_operand\")\n+\t       (ior (match_test \"macho_lo_sum_memory_operand (op, mode)\")\n+\t\t    (match_operand 0 \"volatile_mem_operand\"))))\n+     (match_operand 0 \"gpc_reg_operand\")))\n+\n+;; Return 1 if the operand is CONST_DOUBLE 0, register or memory operand.\n+(define_predicate \"zero_reg_mem_operand\"\n+  (ior (match_operand 0 \"zero_fp_constant\")\n+       (match_operand 0 \"reg_or_mem_operand\")))\n+\n ;; Return 1 if the operand is a general register or memory operand without\n ;; pre_inc or pre_dec, which produces invalid form of PowerPC lwa\n ;; instruction."}, {"sha": "17d81f242304384ffcbaf641f4e102a4a8ab5d8d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c54d9afb7e891eff59d464ce0b74cb45bb3c39/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c54d9afb7e891eff59d464ce0b74cb45bb3c39/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=97c54d9afb7e891eff59d464ce0b74cb45bb3c39", "patch": "@@ -4410,24 +4410,25 @@\n \n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n-\t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n+\t(float_extend:DF (match_operand:SF 1 \"reg_or_none500mem_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n   \"\")\n \n (define_insn_and_split \"*extendsfdf2_fpr\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,?f\")\n-\t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"0,f\")))]\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,?f,f\")\n+\t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"@\n    #\n-   fmr %0,%1\"\n+   fmr %0,%1\n+   lfs%U1%X1 %0,%1\"\n   \"&& reload_completed && REGNO (operands[0]) == REGNO (operands[1])\"\n   [(const_int 0)]\n {\n   emit_note (NOTE_INSN_DELETED);\n   DONE;\n }\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp,fp,fpload\")])\n \n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -8300,7 +8301,7 @@\n (define_insn_and_split \"*extenddftf2_internal\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=o,f,&f,r\")\n        (float_extend:TF (match_operand:DF 1 \"input_operand\" \"fr,mf,mf,rmGHF\")))\n-   (use (match_operand:DF 2 \"input_operand\" \"rf,m,f,n\"))]\n+   (use (match_operand:DF 2 \"zero_reg_mem_operand\" \"rf,m,f,n\"))]\n   \"(DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\""}]}