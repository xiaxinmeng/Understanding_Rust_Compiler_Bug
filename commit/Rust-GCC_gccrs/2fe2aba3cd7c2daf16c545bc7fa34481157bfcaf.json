{"sha": "2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlMmFiYTNjZDdjMmRhZjE2YzU0NWJjN2ZhMzQ0ODExNTdiZmNhZg==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@imgtec.com", "date": "2016-11-16T17:12:08Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2016-11-16T17:12:08Z"}, "message": "MIPS/GCC: Mark text contents as code or data\n\n\tgcc/\n\t* config/mips/mips-protos.h (mips_set_text_contents_type): New\n\tprototype.\n\t* config/mips/mips.h (ASM_OUTPUT_BEFORE_CASE_LABEL): New macro.\n\t(ASM_OUTPUT_CASE_END): Likewise.\n\t* config/mips/mips.c (mips_set_text_contents_type): New\n\tfunction.\n\t(mips16_emit_constants): Record the pool's initial label number\n\twith the `consttable' insn.  Emit a `consttable_end' insn at the\n\tend.\n\t(mips_final_prescan_insn): Call `mips_set_text_contents_type'\n\tfor `consttable' insns.\n\t(mips_final_postscan_insn): Call `mips_set_text_contents_type'\n\tfor `consttable_end' insns.\n\t* config/mips/mips.md (unspec): Add UNSPEC_CONSTTABLE_END enum\n\tvalue.\n\t(consttable): Add operand.\n\t(consttable_end): New insn.\n\n\tgcc/testsuite/\n\t* gcc.target/mips/data-sym-jump.c: New test case.\n\t* gcc.target/mips/data-sym-pool.c: New test case.\n\t* gcc.target/mips/insn-pseudo-4.c: Adjust for constant pool\n\tannotation.\n\nFrom-SVN: r242502", "tree": {"sha": "931dfe15f072d0bff6ee2f255e808b318ed13700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/931dfe15f072d0bff6ee2f255e808b318ed13700"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/comments", "author": null, "committer": null, "parents": [{"sha": "598eaaa2a2368bb7d5ac3bafe7a0d1bb26d43f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598eaaa2a2368bb7d5ac3bafe7a0d1bb26d43f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598eaaa2a2368bb7d5ac3bafe7a0d1bb26d43f6e"}], "stats": {"total": 215, "additions": 209, "deletions": 6}, "files": [{"sha": "6f46dd404f2de58374c5e969d5bd16055f5aee9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -1,3 +1,23 @@\n+2016-11-16  Maciej W. Rozycki  <macro@imgtec.com>\n+\n+\t* config/mips/mips-protos.h (mips_set_text_contents_type): New\n+\tprototype.\n+\t* config/mips/mips.h (ASM_OUTPUT_BEFORE_CASE_LABEL): New macro.\n+\t(ASM_OUTPUT_CASE_END): Likewise.\n+\t* config/mips/mips.c (mips_set_text_contents_type): New\n+\tfunction.\n+\t(mips16_emit_constants): Record the pool's initial label number\n+\twith the `consttable' insn.  Emit a `consttable_end' insn at the\n+\tend.\n+\t(mips_final_prescan_insn): Call `mips_set_text_contents_type'\n+\tfor `consttable' insns.\n+\t(mips_final_postscan_insn): Call `mips_set_text_contents_type'\n+\tfor `consttable_end' insns.\n+\t* config/mips/mips.md (unspec): Add UNSPEC_CONSTTABLE_END enum\n+\tvalue.\n+\t(consttable): Add operand.\n+\t(consttable_end): New insn.\n+\n 2016-11-16  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* params.def (PARAM_VECT_EPILOGUES_NOMASK): New."}, {"sha": "117c78cc34f1f9e640fb0f669a0e1808cfbaed3d", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -271,6 +271,8 @@ extern void mips_declare_object (FILE *, const char *, const char *,\n \t\t\t\t const char *, ...) ATTRIBUTE_PRINTF_4;\n extern void mips_declare_object_name (FILE *, const char *, tree);\n extern void mips_finish_declare_object (FILE *, tree, int, int);\n+extern void mips_set_text_contents_type (FILE *, const char *,\n+\t\t\t\t\t unsigned long, bool);\n \n extern bool mips_small_data_pattern_p (rtx);\n extern rtx mips_rewrite_small_data (rtx);"}, {"sha": "10c20393ca4a7e292adc6ba8992ce38bf7165148", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 65, "deletions": 4, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -9749,6 +9749,37 @@ mips_finish_declare_object (FILE *stream, tree decl, int top_level, int at_end)\n     }\n }\n #endif\n+\n+/* Mark text contents as code or data, mainly for the purpose of correct\n+   disassembly.  Emit a local symbol and set its type appropriately for\n+   that purpose.  Also emit `.insn' if marking contents as code so that\n+   the ISA mode is recorded and any padding that follows is disassembled\n+   as correct instructions.  */\n+\n+void\n+mips_set_text_contents_type (FILE *file ATTRIBUTE_UNUSED,\n+\t\t\t     const char *prefix ATTRIBUTE_UNUSED,\n+\t\t\t     unsigned long num ATTRIBUTE_UNUSED,\n+\t\t\t     bool function_p ATTRIBUTE_UNUSED)\n+{\n+#ifdef ASM_OUTPUT_TYPE_DIRECTIVE\n+  char buf[(sizeof (num) * 10) / 4 + 2];\n+  const char *fnname;\n+  char *sname;\n+  rtx symbol;\n+\n+  sprintf (buf, \"%lu\", num);\n+  symbol = XEXP (DECL_RTL (current_function_decl), 0);\n+  fnname = targetm.strip_name_encoding (XSTR (symbol, 0));\n+  sname = ACONCAT ((prefix, fnname, \"_\", buf, NULL));\n+\n+  ASM_OUTPUT_TYPE_DIRECTIVE (file, sname, function_p ? \"function\" : \"object\");\n+  assemble_name (file, sname);\n+  fputs (\":\\n\", file);\n+  if (function_p)\n+    fputs (\"\\t.insn\\n\", file);\n+#endif\n+}\n \f\n /* Return the FOO in the name of the \".mdebug.FOO\" section associated\n    with the current ABI.  */\n@@ -17131,17 +17162,22 @@ mips16_emit_constants_1 (machine_mode mode, rtx value, rtx_insn *insn)\n   gcc_unreachable ();\n }\n \n-/* Dump out the constants in CONSTANTS after INSN.  */\n+/* Dump out the constants in CONSTANTS after INSN.  Record the initial\n+   label number in the `consttable' and `consttable_end' insns emitted\n+   at the beginning and the end of the constant pool respectively, so\n+   that individual pools can be uniquely marked as data for the purpose\n+   of disassembly.  */\n \n static void\n mips16_emit_constants (struct mips16_constant *constants, rtx_insn *insn)\n {\n+  int label_num = constants ? CODE_LABEL_NUMBER (constants->label) : 0;\n   struct mips16_constant *c, *next;\n   int align;\n \n   align = 0;\n   if (constants)\n-    insn = emit_insn_after (gen_consttable (), insn);\n+    insn = emit_insn_after (gen_consttable (GEN_INT (label_num)), insn);\n   for (c = constants; c != NULL; c = next)\n     {\n       /* If necessary, increase the alignment of PC.  */\n@@ -17158,6 +17194,8 @@ mips16_emit_constants (struct mips16_constant *constants, rtx_insn *insn)\n       next = c->next;\n       free (c);\n     }\n+  if (constants)\n+    insn = emit_insn_after (gen_consttable_end (GEN_INT (label_num)), insn);\n \n   emit_barrier_after (insn);\n }\n@@ -20268,23 +20306,46 @@ mips_need_noat_wrapper_p (rtx_insn *insn, rtx *opvec, int noperands)\n   return false;\n }\n \n-/* Implement FINAL_PRESCAN_INSN.  */\n+/* Implement FINAL_PRESCAN_INSN.  Mark MIPS16 inline constant pools\n+   as data for the purpose of disassembly.  For simplicity embed the\n+   pool's initial label number in the local symbol produced so that\n+   multiple pools within a single function end up marked with unique\n+   symbols.  The label number is carried by the `consttable' insn\n+   emitted at the beginning of each pool.  */\n \n void\n mips_final_prescan_insn (rtx_insn *insn, rtx *opvec, int noperands)\n {\n+  if (INSN_P (insn)\n+      && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n+      && XINT (PATTERN (insn), 1) == UNSPEC_CONSTTABLE)\n+    mips_set_text_contents_type (asm_out_file, \"__pool_\",\n+\t\t\t\t XINT (XVECEXP (PATTERN (insn), 0, 0), 0),\n+\t\t\t\t FALSE);\n+\n   if (mips_need_noat_wrapper_p (insn, opvec, noperands))\n     mips_push_asm_switch (&mips_noat);\n }\n \n-/* Implement TARGET_ASM_FINAL_POSTSCAN_INSN.  */\n+/* Implement TARGET_ASM_FINAL_POSTSCAN_INSN.  Reset text marking to\n+   code after a MIPS16 inline constant pool.  Like with the beginning\n+   of a pool table use the pool's initial label number to keep symbols\n+   unique.  The label number is carried by the `consttable_end' insn\n+   emitted at the end of each pool.  */\n \n static void\n mips_final_postscan_insn (FILE *file ATTRIBUTE_UNUSED, rtx_insn *insn,\n \t\t\t  rtx *opvec, int noperands)\n {\n   if (mips_need_noat_wrapper_p (insn, opvec, noperands))\n     mips_pop_asm_switch (&mips_noat);\n+\n+  if (INSN_P (insn)\n+      && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n+      && XINT (PATTERN (insn), 1) == UNSPEC_CONSTTABLE_END)\n+    mips_set_text_contents_type (asm_out_file, \"__pend_\",\n+\t\t\t\t XINT (XVECEXP (PATTERN (insn), 0, 0), 0),\n+\t\t\t\t TRUE);\n }\n \n /* Return the function that is used to expand the <u>mulsidi3 pattern."}, {"sha": "bb66c428dd1a7d0546974fe890590ed93595f13b", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -2986,6 +2986,32 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t     LOCAL_LABEL_PREFIX, VALUE);\t\t\t\t\\\n } while (0)\n \n+/* Mark inline jump tables as data for the purpose of disassembly.  For\n+   simplicity embed the jump table's label number in the local symbol\n+   produced so that multiple jump tables within a single function end\n+   up marked with unique symbols.  Retain the alignment setting from\n+   `elfos.h' as we are replacing the definition from there.  */\n+\n+#undef ASM_OUTPUT_BEFORE_CASE_LABEL\n+#define ASM_OUTPUT_BEFORE_CASE_LABEL(STREAM, PREFIX, NUM, TABLE)\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_ALIGN ((STREAM), 2);\t\t\t\t\t\\\n+      if (JUMP_TABLES_IN_TEXT_SECTION)\t\t\t\t\t\\\n+\tmips_set_text_contents_type (STREAM, \"__jump_\", NUM, FALSE);\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0);\n+\n+/* Reset text marking to code after an inline jump table.  Like with\n+   the beginning of a jump table use the label number to keep symbols\n+   unique.  */\n+\n+#define ASM_OUTPUT_CASE_END(STREAM, NUM, TABLE)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    if (JUMP_TABLES_IN_TEXT_SECTION)\t\t\t\t\t\\\n+      mips_set_text_contents_type (STREAM, \"__jend_\", NUM, TRUE);\t\\\n+  while (0);\n+\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */"}, {"sha": "dc071d5e7b2ceaa3f54bcd855c9b934249363328", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -121,6 +121,7 @@\n   ;; MIPS16 constant pools.\n   UNSPEC_ALIGN\n   UNSPEC_CONSTTABLE\n+  UNSPEC_CONSTTABLE_END\n   UNSPEC_CONSTTABLE_INT\n   UNSPEC_CONSTTABLE_FLOAT\n \n@@ -7321,7 +7322,16 @@\n ;;\n \n (define_insn \"consttable\"\n-  [(unspec_volatile [(const_int 0)] UNSPEC_CONSTTABLE)]\n+  [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"\")]\n+\t\t    UNSPEC_CONSTTABLE)]\n+  \"\"\n+  \"\"\n+  [(set_attr \"mode\" \"none\")\n+   (set_attr \"insn_count\" \"0\")])\n+\n+(define_insn \"consttable_end\"\n+  [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"\")]\n+\t\t    UNSPEC_CONSTTABLE_END)]\n   \"\"\n   \"\"\n   [(set_attr \"mode\" \"none\")"}, {"sha": "a1a66c3775a407f7efa3b322872df7c298ca9ad0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -1,3 +1,10 @@\n+2016-11-16  Maciej W. Rozycki  <macro@imgtec.com>\n+\n+\t* gcc.target/mips/data-sym-jump.c: New test case.\n+\t* gcc.target/mips/data-sym-pool.c: New test case.\n+\t* gcc.target/mips/insn-pseudo-4.c: Adjust for constant pool\n+\tannotation.\n+\n 2016-11-16  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t* lib/target-supports.exp (check_avx2_hw_available): New."}, {"sha": "c3ba2944cdcc9130016788dac683bc1c7d6e65ce", "filename": "gcc/testsuite/gcc.target/mips/data-sym-jump.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-jump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-jump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-jump.c?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mips16 -mcode-readable=yes\" } */\n+/* { dg-skip-if \"MIPS16 `casesi' loses at -Os\" { *-*-* } { \"-Os\"} { \"\" } } */\n+\n+int\n+frob (int i)\n+{\n+  switch (i)\n+    {\n+    case -5:\n+      return -2;\n+    case -3:\n+      return -1;\n+    case 0:\n+      return 0;\n+    case 3:\n+      return 1;\n+    case 5:\n+      break;\n+    default:\n+      __builtin_unreachable ();\n+    }\n+  return i;\n+}\n+\n+/* Expect assembly like:\n+\n+\tla\t$2, $L4\n+\t\t\t\t\t\t# Anything goes here.\n+\t.type\t__jump_frob_4, @object\t\t# Symbol # must match label.\n+__jump_frob_4:\t\t\t\t\t# The symbol must match.\n+$L4:\t\t\t\t\t\t# The label must match.\n+\t.half\t$L3-$L4\t\t\t\t# Or `.word'.  The subtrahend\n+\t.half\t$L2-$L4\t\t\t\t# label must match thoughout\n+\t.half\t$L9-$L4\t\t\t\t# (repeated 11 times).\n+\t.half\t$L2-$L4\t\t\t\t# .\n+\t.half\t$L2-$L4\t\t\t\t# .\n+\t.half\t$L8-$L4\t\t\t\t# .\n+\t.half\t$L2-$L4\t\t\t\t# .\n+\t.half\t$L2-$L4\t\t\t\t# .\n+\t.half\t$L7-$L4\t\t\t\t# .\n+\t.half\t$L2-$L4\t\t\t\t# .\n+\t.half\t$L8-$L4\t\t\t\t# .\n+\t.type\t__jend_frob_4, @function\t# Symbol # must match label.\n+__jend_frob_4:\t\t\t\t\t# The symbol must match.\n+\t.insn\n+\n+   that is `__jump_*'/`__jend_*' symbols inserted around a jump table.  */\n+\n+/* { dg-final { scan-assembler \"\\tla\\t\\\\\\$\\[0-9\\]+, (.L(\\[0-9\\]+))\\n.*\\t\\\\.type\\t(__jump_frob_\\\\2), @object\\n\\\\3:\\n\\\\1:\\n(?:\\t\\\\.(?:half|word)\\t.L\\[0-9\\]+-\\\\1\\n)\\{11\\}\\t\\\\.type\\t(__jend_frob_\\\\2), @function\\n\\\\4:\\n\\t\\\\.insn\\n\" } } */"}, {"sha": "805778322e9265e1c42540a447c7f76e9d26c85d", "filename": "gcc/testsuite/gcc.target/mips/data-sym-pool.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-pool.c?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mips16 -mcode-readable=yes\" } */\n+\n+int\n+frob (void)\n+{\n+  return 0x12345678;\n+}\n+\n+/* Expect assembly like:\n+\n+\tlw\t$2,$L3\n+\t\t\t\t\t\t# Anything goes here.\n+\t.type\t__pool_frob_3, @object\t\t# Symbol # must match label.\n+__pool_frob_3:\t\t\t\t\t# The symbol must match.\n+\t.align\t2\n+$L3:\t\t\t\t\t\t# The label must match.\n+\t.word\t305419896\n+\t.type\t__pend_frob_3, @function\t# Symbol # must match label.\n+__pend_frob_3:\t\t\t\t\t# The symbol must match.\n+\t.insn\n+\n+   that is `__pool_*'/`__pend_*' symbols inserted around a constant pool.  */\n+\n+/* { dg-final { scan-assembler \"\\tlw\\t\\\\\\$\\[0-9\\]+,(.L(\\[0-9\\]+))\\n.*\\t\\\\.type\\t(__pool_frob_\\\\2), @object\\n\\\\3:\\n\\t\\\\.align\\t2\\n\\\\1:\\n\\t\\\\.word\\t305419896\\n\\t\\\\.type\\t(__pend_frob_\\\\2), @function\\n\\\\4:\\n\\t\\\\.insn\\n\" } } */"}, {"sha": "ad4f2d9ddf35f65789e67eb81121400e24438591", "filename": "gcc/testsuite/gcc.target/mips/insn-pseudo-4.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finsn-pseudo-4.c?ref=2fe2aba3cd7c2daf16c545bc7fa34481157bfcaf", "patch": "@@ -18,10 +18,12 @@ unreachable (void)\n $L2:\t\t\t\t# The label must match.\n \t.insn\n $L3 = .\t\t\t\t# It's there, but we don't care.\n+\t.type\t__pool_unreachable_5, @object\n+__pool_unreachable_5:\n \t.align\t2\n $L5:\t\t\t\t# The label must match.\n \t.word\t305419896\n \n    that is .insn to be inserted if a code label is at a constant pool.  */\n \n-/* { dg-final { scan-assembler \"\\tlw\\t(\\\\\\$\\[0-9\\]+),(.L\\[0-9\\]+)\\n.*\\tbeqz\\t\\\\1,(.L\\[0-9\\]+)\\n.*\\n\\\\3:\\n\\t\\\\.insn\\n(?:.L\\[0-9\\]+ = \\\\.\\n)?\\t\\\\.align\\t2\\n\\\\2:\\n\\t\\\\.word\\t305419896\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tlw\\t(\\\\\\$\\[0-9\\]+),(.L\\[0-9\\]+)\\n.*\\tbeqz\\t\\\\1,(.L\\[0-9\\]+)\\n.*\\n\\\\3:\\n\\t\\\\.insn\\n(?:.L\\[0-9\\]+ = \\\\.\\n)?\\t\\\\.type\\t__pool_unreachable_\\[0-9\\]+, @object\\n__pool_unreachable_\\[0-9\\]+:\\n\\t\\\\.align\\t2\\n\\\\2:\\n\\t\\\\.word\\t305419896\\n\" } } */"}]}