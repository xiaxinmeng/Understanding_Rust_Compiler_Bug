{"sha": "1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4NGEyZDI1ZWNkNGMwM2RkZTc0NWYzNmE0NzYyZGQ0NWY5N2M4NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T15:05:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T15:05:37Z"}, "message": "Replace vec_info::vector_size with vec_info::vector_mode\n\nThis patch replaces vec_info::vector_size with vec_info::vector_mode,\nbut for now continues to use it as a way of specifying a single\nvector size.  This makes it easier for later patches to use\nrelated_vector_mode instead.\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vec_info::vector_size): Replace with...\n\t(vec_info::vector_mode): ...this new field.\n\t* tree-vect-loop.c (vect_update_vf_for_slp): Update accordingly.\n\t(vect_analyze_loop, vect_transform_loop): Likewise.\n\t* tree-vect-loop-manip.c (vect_do_peeling): Likewise.\n\t* tree-vect-slp.c (can_duplicate_and_interleave_p): Likewise.\n\t(vect_make_slp_decision, vect_slp_bb_region): Likewise.\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Likewise.\n\t* tree-vectorizer.c (try_vectorize_loop_1): Likewise.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-tail-nomask-1.c: Update expected epilogue\n\tvectorization message.\n\nFrom-SVN: r278237", "tree": {"sha": "ade2b975bc48ad715b167c702ef02abc267644df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ade2b975bc48ad715b167c702ef02abc267644df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e021fb865564b62a10adb1e98f75b5ea05058047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e021fb865564b62a10adb1e98f75b5ea05058047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e021fb865564b62a10adb1e98f75b5ea05058047"}], "stats": {"total": 96, "additions": 55, "deletions": 41}, "files": [{"sha": "bd9eeecea9e31aed07544aacd74d1ae779987a6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -1,3 +1,15 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vec_info::vector_size): Replace with...\n+\t(vec_info::vector_mode): ...this new field.\n+\t* tree-vect-loop.c (vect_update_vf_for_slp): Update accordingly.\n+\t(vect_analyze_loop, vect_transform_loop): Likewise.\n+\t* tree-vect-loop-manip.c (vect_do_peeling): Likewise.\n+\t* tree-vect-slp.c (can_duplicate_and_interleave_p): Likewise.\n+\t(vect_make_slp_decision, vect_slp_bb_region): Likewise.\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type): Likewise.\n+\t* tree-vectorizer.c (try_vectorize_loop_1): Likewise.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.h (vector_sizes, auto_vector_sizes): Delete."}, {"sha": "4445c17a1c406a9cb2864d6124f9230a51f59530", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -1,3 +1,8 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-tail-nomask-1.c: Update expected epilogue\n+\tvectorization message.\n+\n 2019-11-14  Richard Henderson  <richard.henderson@linaro.org>\n \n \t* gcc.target/aarch64/asm-flag-1.c: New test."}, {"sha": "e5bbeaede095b292c070594e47429ff1f606aa55", "filename": "gcc/testsuite/gcc.dg/vect/vect-tail-nomask-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-tail-nomask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-tail-nomask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-tail-nomask-1.c?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -106,4 +106,4 @@ main (int argc, const char **argv)\n }\n \n /* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { target avx2_runtime } } } */\n-/* { dg-final { scan-tree-dump-times \"LOOP EPILOGUE VECTORIZED \\\\(VS=16\\\\)\" 2 \"vect\" { target avx2_runtime } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP EPILOGUE VECTORIZED \\\\(MODE=V16QI\\\\)\" 2 \"vect\" { target avx2_runtime } } } */"}, {"sha": "b4dda971b18e17733b121038e89e95fc59f09d0c", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -2538,8 +2538,9 @@ vect_do_peeling (loop_vec_info loop_vinfo, tree niters, tree nitersm1,\n       unsigned int ratio;\n       unsigned int epilogue_gaps\n \t= LOOP_VINFO_PEELING_FOR_GAPS (epilogue_vinfo);\n-      while (!(constant_multiple_p (loop_vinfo->vector_size,\n-\t\t\t\t    epilogue_vinfo->vector_size, &ratio)\n+      while (!(constant_multiple_p\n+\t       (GET_MODE_SIZE (loop_vinfo->vector_mode),\n+\t\tGET_MODE_SIZE (epilogue_vinfo->vector_mode), &ratio)\n \t       && eiters >= lowest_vf / ratio + epilogue_gaps))\n \t{\n \t  delete epilogue_vinfo;"}, {"sha": "213d620ed2c67ab2259bf505cc4cfa5ad04fde70", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -1422,8 +1422,8 @@ vect_update_vf_for_slp (loop_vec_info loop_vinfo)\n \tdump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t \"Loop contains SLP and non-SLP stmts\\n\");\n       /* Both the vectorization factor and unroll factor have the form\n-\t loop_vinfo->vector_size * X for some rational X, so they must have\n-\t a common multiple.  */\n+\t GET_MODE_SIZE (loop_vinfo->vector_mode) * X for some rational X,\n+\t so they must have a common multiple.  */\n       vectorization_factor\n \t= force_common_multiple (vectorization_factor,\n \t\t\t\t LOOP_VINFO_SLP_UNROLLING_FACTOR (loop_vinfo));\n@@ -2404,7 +2404,7 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n        \" loops cannot be vectorized\\n\");\n \n   unsigned n_stmts = 0;\n-  poly_uint64 autodetected_vector_size = 0;\n+  machine_mode autodetected_vector_mode = VOIDmode;\n   opt_loop_vec_info first_loop_vinfo = opt_loop_vec_info::success (NULL);\n   machine_mode next_vector_mode = VOIDmode;\n   poly_uint64 lowest_th = 0;\n@@ -2425,7 +2425,7 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n \t  gcc_checking_assert (first_loop_vinfo == NULL);\n \t  return loop_vinfo;\n \t}\n-      loop_vinfo->vector_size = GET_MODE_SIZE (next_vector_mode);\n+      loop_vinfo->vector_mode = next_vector_mode;\n \n       bool fatal = false;\n \n@@ -2434,7 +2434,7 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n \n       res = vect_analyze_loop_2 (loop_vinfo, fatal, &n_stmts);\n       if (mode_i == 0)\n-\tautodetected_vector_size = loop_vinfo->vector_size;\n+\tautodetected_vector_mode = loop_vinfo->vector_mode;\n \n       loop->aux = NULL;\n       if (res)\n@@ -2502,11 +2502,11 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n \n       if (mode_i < vector_modes.length ()\n \t  && known_eq (GET_MODE_SIZE (vector_modes[mode_i]),\n-\t\t       autodetected_vector_size))\n+\t\t       GET_MODE_SIZE (autodetected_vector_mode)))\n \tmode_i += 1;\n \n       if (mode_i == vector_modes.length ()\n-\t  || known_eq (autodetected_vector_size, 0U))\n+\t  || autodetected_vector_mode == VOIDmode)\n \tbreak;\n \n       /* Try the next biggest vector size.  */\n@@ -2521,12 +2521,9 @@ vect_analyze_loop (class loop *loop, vec_info_shared *shared)\n     {\n       loop->aux = (loop_vec_info) first_loop_vinfo;\n       if (dump_enabled_p ())\n-\t{\n-\t  dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t   \"***** Choosing vector size \");\n-\t  dump_dec (MSG_NOTE, first_loop_vinfo->vector_size);\n-\t  dump_printf (MSG_NOTE, \"\\n\");\n-\t}\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"***** Choosing vector mode %s\\n\",\n+\t\t\t GET_MODE_NAME (first_loop_vinfo->vector_mode));\n       LOOP_VINFO_VERSIONING_THRESHOLD (first_loop_vinfo) = lowest_th;\n       return first_loop_vinfo;\n     }\n@@ -8580,12 +8577,9 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n \t  dump_printf (MSG_NOTE, \"\\n\");\n \t}\n       else\n-\t{\n-\t  dump_printf_loc (MSG_NOTE, vect_location,\n-\t\t\t   \"LOOP EPILOGUE VECTORIZED (VS=\");\n-\t  dump_dec (MSG_NOTE, loop_vinfo->vector_size);\n-\t  dump_printf (MSG_NOTE, \")\\n\");\n-\t}\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"LOOP EPILOGUE VECTORIZED (MODE=%s)\\n\",\n+\t\t\t GET_MODE_NAME (loop_vinfo->vector_mode));\n     }\n \n   /* Loops vectorized with a variable factor won't benefit from"}, {"sha": "3885d9cbe4ae962f7c585ebbcf48a8ea4d4c22b1", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -271,7 +271,7 @@ can_duplicate_and_interleave_p (vec_info *vinfo, unsigned int count,\n     {\n       scalar_int_mode int_mode;\n       poly_int64 elt_bits = elt_bytes * BITS_PER_UNIT;\n-      if (multiple_p (vinfo->vector_size, elt_bytes, &nelts)\n+      if (multiple_p (GET_MODE_SIZE (vinfo->vector_mode), elt_bytes, &nelts)\n \t  && int_mode_for_size (elt_bits, 0).exists (&int_mode))\n \t{\n \t  tree int_type = build_nonstandard_integer_type\n@@ -475,7 +475,7 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char *swap,\n \t    }\n \t  if ((dt == vect_constant_def\n \t       || dt == vect_external_def)\n-\t      && !vinfo->vector_size.is_constant ()\n+\t      && !GET_MODE_SIZE (vinfo->vector_mode).is_constant ()\n \t      && (TREE_CODE (type) == BOOLEAN_TYPE\n \t\t  || !can_duplicate_and_interleave_p (vinfo, stmts.length (),\n \t\t\t\t\t\t      TYPE_MODE (type))))\n@@ -2381,8 +2381,11 @@ vect_make_slp_decision (loop_vec_info loop_vinfo)\n   FOR_EACH_VEC_ELT (slp_instances, i, instance)\n     {\n       /* FORNOW: SLP if you can.  */\n-      /* All unroll factors have the form vinfo->vector_size * X for some\n-\t rational X, so they must have a common multiple.  */\n+      /* All unroll factors have the form:\n+\n+\t   GET_MODE_SIZE (vinfo->vector_mode) * X\n+\n+\t for some rational X, so they must have a common multiple.  */\n       unrolling_factor\n \t= force_common_multiple (unrolling_factor,\n \t\t\t\t SLP_INSTANCE_UNROLLING_FACTOR (instance));\n@@ -3181,7 +3184,7 @@ vect_slp_bb_region (gimple_stmt_iterator region_begin,\n \n   vec_info_shared shared;\n \n-  poly_uint64 autodetected_vector_size = 0;\n+  machine_mode autodetected_vector_mode = VOIDmode;\n   while (1)\n     {\n       bool vectorized = false;\n@@ -3194,7 +3197,7 @@ vect_slp_bb_region (gimple_stmt_iterator region_begin,\n \tbb_vinfo->shared->save_datarefs ();\n       else\n \tbb_vinfo->shared->check_datarefs ();\n-      bb_vinfo->vector_size = GET_MODE_SIZE (next_vector_mode);\n+      bb_vinfo->vector_mode = next_vector_mode;\n \n       if (vect_slp_analyze_bb_1 (bb_vinfo, n_stmts, fatal)\n \t  && dbg_cnt (vect_slp))\n@@ -3208,7 +3211,7 @@ vect_slp_bb_region (gimple_stmt_iterator region_begin,\n \t  unsigned HOST_WIDE_INT bytes;\n \t  if (dump_enabled_p ())\n \t    {\n-\t      if (bb_vinfo->vector_size.is_constant (&bytes))\n+\t      if (GET_MODE_SIZE (bb_vinfo->vector_mode).is_constant (&bytes))\n \t\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n \t\t\t\t \"basic block part vectorized using %wu byte \"\n \t\t\t\t \"vectors\\n\", bytes);\n@@ -3222,18 +3225,18 @@ vect_slp_bb_region (gimple_stmt_iterator region_begin,\n \t}\n \n       if (mode_i == 0)\n-\tautodetected_vector_size = bb_vinfo->vector_size;\n+\tautodetected_vector_mode = bb_vinfo->vector_mode;\n \n       delete bb_vinfo;\n \n       if (mode_i < vector_modes.length ()\n \t  && known_eq (GET_MODE_SIZE (vector_modes[mode_i]),\n-\t\t       autodetected_vector_size))\n+\t\t       GET_MODE_SIZE (autodetected_vector_mode)))\n \tmode_i += 1;\n \n       if (vectorized\n \t  || mode_i == vector_modes.length ()\n-\t  || known_eq (autodetected_vector_size, 0U)\n+\t  || autodetected_vector_mode == VOIDmode\n \t  /* If vect_slp_analyze_bb_1 signaled that analysis for all\n \t     vector sizes will fail do not bother iterating.  */\n \t  || fatal)"}, {"sha": "43b2b0fa84e516f3880259e46e16a75bdb6d5e59", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -11226,11 +11226,10 @@ tree\n get_vectype_for_scalar_type (vec_info *vinfo, tree scalar_type)\n {\n   tree vectype;\n-  vectype = get_vectype_for_scalar_type_and_size (scalar_type,\n-\t\t\t\t\t\t  vinfo->vector_size);\n-  if (vectype\n-      && known_eq (vinfo->vector_size, 0U))\n-    vinfo->vector_size = GET_MODE_SIZE (TYPE_MODE (vectype));\n+  poly_uint64 vector_size = GET_MODE_SIZE (vinfo->vector_mode);\n+  vectype = get_vectype_for_scalar_type_and_size (scalar_type, vector_size);\n+  if (vectype && vinfo->vector_mode == VOIDmode)\n+    vinfo->vector_mode = TYPE_MODE (vectype);\n   return vectype;\n }\n "}, {"sha": "d6de78350e62b943f0f111d8f96ff6413c18ac51", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -978,7 +978,7 @@ try_vectorize_loop_1 (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n   unsigned HOST_WIDE_INT bytes;\n   if (dump_enabled_p ())\n     {\n-      if (loop_vinfo->vector_size.is_constant (&bytes))\n+      if (GET_MODE_SIZE (loop_vinfo->vector_mode).is_constant (&bytes))\n \tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n \t\t\t \"loop vectorized using %wu byte vectors\\n\", bytes);\n       else"}, {"sha": "f6efed1f863452073a690eacb07949d79150f814", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c84a2d25ecd4c03dde745f36a4762dd45f97c85/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=1c84a2d25ecd4c03dde745f36a4762dd45f97c85", "patch": "@@ -335,9 +335,9 @@ class vec_info {\n   /* Cost data used by the target cost model.  */\n   void *target_cost_data;\n \n-  /* The vector size for this loop in bytes, or 0 if we haven't picked\n-     a size yet.  */\n-  poly_uint64 vector_size;\n+  /* If we've chosen a vector size for this vectorization region,\n+     this is one mode that has such a size, otherwise it is VOIDmode.  */\n+  machine_mode vector_mode;\n \n private:\n   stmt_vec_info new_stmt_vec_info (gimple *stmt);"}]}