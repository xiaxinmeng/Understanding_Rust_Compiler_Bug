{"sha": "26060734c0470c74ccef2f4b755d7be4ad6a0e20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwNjA3MzRjMDQ3MGM3NGNjZWYyZjRiNzU1ZDdiZTRhZDZhMGUyMA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-11-04T15:51:38Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-11-04T15:51:38Z"}, "message": "fold-const.c (fold_cond_expr_with_comparison): Remove call to pedantic_non_lvalue_loc.\n\n\t* fold-const.c (fold_cond_expr_with_comparison): Remove call\n\tto pedantic_non_lvalue_loc.  Remove useless code for lvalue\n\twhere cond_expr can't be a lvalue.\n\nFrom-SVN: r241847", "tree": {"sha": "370a46b1911783cba506d452293205a75b071155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/370a46b1911783cba506d452293205a75b071155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26060734c0470c74ccef2f4b755d7be4ad6a0e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26060734c0470c74ccef2f4b755d7be4ad6a0e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26060734c0470c74ccef2f4b755d7be4ad6a0e20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26060734c0470c74ccef2f4b755d7be4ad6a0e20/comments", "author": null, "committer": null, "parents": [{"sha": "dac9376aeebc6021e3a73c34f5b8bc7e87e09fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac9376aeebc6021e3a73c34f5b8bc7e87e09fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac9376aeebc6021e3a73c34f5b8bc7e87e09fc7"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "11518b77eaf1f01eab37a1d26da58873e9165e59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26060734c0470c74ccef2f4b755d7be4ad6a0e20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26060734c0470c74ccef2f4b755d7be4ad6a0e20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26060734c0470c74ccef2f4b755d7be4ad6a0e20", "patch": "@@ -1,3 +1,9 @@\n+2016-11-04  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* fold-const.c (fold_cond_expr_with_comparison): Remove call\n+\tto pedantic_non_lvalue_loc.  Remove useless code for lvalue\n+\twhere cond_expr can't be a lvalue.\n+\n 2016-11-04  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_process_double_reg_moves): Use"}, {"sha": "593ea16f8d454f6fd05be596bb7524b5e3fd48fb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26060734c0470c74ccef2f4b755d7be4ad6a0e20/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26060734c0470c74ccef2f4b755d7be4ad6a0e20/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=26060734c0470c74ccef2f4b755d7be4ad6a0e20", "patch": "@@ -5082,12 +5082,10 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n       case EQ_EXPR:\n       case UNEQ_EXPR:\n \ttem = fold_convert_loc (loc, arg1_type, arg1);\n-\treturn pedantic_non_lvalue_loc (loc,\n-\t\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t\t  negate_expr (tem)));\n+\treturn fold_convert_loc (loc, type, negate_expr (tem));\n       case NE_EXPR:\n       case LTGT_EXPR:\n-\treturn pedantic_non_lvalue_loc (loc, fold_convert_loc (loc, type, arg1));\n+\treturn fold_convert_loc (loc, type, arg1);\n       case UNGE_EXPR:\n       case UNGT_EXPR:\n \tif (flag_trapping_math)\n@@ -5098,7 +5096,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n \tif (TYPE_UNSIGNED (TREE_TYPE (arg1)))\n \t  break;\n \ttem = fold_build1_loc (loc, ABS_EXPR, TREE_TYPE (arg1), arg1);\n-\treturn pedantic_non_lvalue_loc (loc, fold_convert_loc (loc, type, tem));\n+\treturn fold_convert_loc (loc, type, tem);\n       case UNLE_EXPR:\n       case UNLT_EXPR:\n \tif (flag_trapping_math)\n@@ -5124,7 +5122,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n       && integer_zerop (arg01) && integer_zerop (arg2))\n     {\n       if (comp_code == NE_EXPR)\n-\treturn pedantic_non_lvalue_loc (loc, fold_convert_loc (loc, type, arg1));\n+\treturn fold_convert_loc (loc, type, arg1);\n       else if (comp_code == EQ_EXPR)\n \treturn build_zero_cst (type);\n     }\n@@ -5170,20 +5168,12 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n       tree comp_op1 = arg01;\n       tree comp_type = TREE_TYPE (comp_op0);\n \n-      /* Avoid adding NOP_EXPRs in case this is an lvalue.  */\n-      if (TYPE_MAIN_VARIANT (comp_type) == TYPE_MAIN_VARIANT (type))\n-\t{\n-\t  comp_type = type;\n-\t  comp_op0 = arg1;\n-\t  comp_op1 = arg2;\n-\t}\n-\n       switch (comp_code)\n \t{\n \tcase EQ_EXPR:\n-\t  return pedantic_non_lvalue_loc (loc, fold_convert_loc (loc, type, arg2));\n+\t  return fold_convert_loc (loc, type, arg2);\n \tcase NE_EXPR:\n-\t  return pedantic_non_lvalue_loc (loc, fold_convert_loc (loc, type, arg1));\n+\t  return fold_convert_loc (loc, type, arg1);\n \tcase LE_EXPR:\n \tcase LT_EXPR:\n \tcase UNLE_EXPR:\n@@ -5200,8 +5190,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n \t\t    ? fold_build2_loc (loc, MIN_EXPR, comp_type, comp_op0, comp_op1)\n \t\t    : fold_build2_loc (loc, MIN_EXPR, comp_type,\n \t\t\t\t   comp_op1, comp_op0);\n-\t      return pedantic_non_lvalue_loc (loc,\n-\t\t\t\t\t  fold_convert_loc (loc, type, tem));\n+\t      return fold_convert_loc (loc, type, tem);\n \t    }\n \t  break;\n \tcase GE_EXPR:\n@@ -5216,19 +5205,16 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n \t\t    ? fold_build2_loc (loc, MAX_EXPR, comp_type, comp_op0, comp_op1)\n \t\t    : fold_build2_loc (loc, MAX_EXPR, comp_type,\n \t\t\t\t   comp_op1, comp_op0);\n-\t      return pedantic_non_lvalue_loc (loc,\n-\t\t\t\t\t  fold_convert_loc (loc, type, tem));\n+\t      return fold_convert_loc (loc, type, tem);\n \t    }\n \t  break;\n \tcase UNEQ_EXPR:\n \t  if (!HONOR_NANS (arg1))\n-\t    return pedantic_non_lvalue_loc (loc,\n-\t\t\t\t\tfold_convert_loc (loc, type, arg2));\n+\t    return fold_convert_loc (loc, type, arg2);\n \t  break;\n \tcase LTGT_EXPR:\n \t  if (!HONOR_NANS (arg1))\n-\t    return pedantic_non_lvalue_loc (loc,\n-\t\t\t\t\tfold_convert_loc (loc, type, arg1));\n+\t    return fold_convert_loc (loc, type, arg1);\n \t  break;\n \tdefault:\n \t  gcc_assert (TREE_CODE_CLASS (comp_code) == tcc_comparison);\n@@ -5267,8 +5253,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n \t    tem = fold_build2_loc (loc, MIN_EXPR, TREE_TYPE (arg00), arg00,\n \t\t\t\t   fold_convert_loc (loc, TREE_TYPE (arg00),\n \t\t\t\t\t\t     arg2));\n-\t    return pedantic_non_lvalue_loc (loc,\n-\t\t\t\t\t    fold_convert_loc (loc, type, tem));\n+\t    return fold_convert_loc (loc, type, tem);\n \t  }\n \tbreak;\n \n@@ -5285,8 +5270,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n \t    tem = fold_build2_loc (loc, MIN_EXPR, TREE_TYPE (arg00), arg00,\n \t\t\t\t   fold_convert_loc (loc, TREE_TYPE (arg00),\n \t\t\t\t\t\t     arg2));\n-\t    return pedantic_non_lvalue_loc (loc,\n-\t\t\t\t\t    fold_convert_loc (loc, type, tem));\n+\t    return fold_convert_loc (loc, type, tem);\n \t  }\n \tbreak;\n \n@@ -5303,7 +5287,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n \t    tem = fold_build2_loc (loc, MAX_EXPR, TREE_TYPE (arg00), arg00,\n \t\t\t\t   fold_convert_loc (loc, TREE_TYPE (arg00),\n \t\t\t\t\t\t     arg2));\n-\t    return pedantic_non_lvalue_loc (loc, fold_convert_loc (loc, type, tem));\n+\t    return fold_convert_loc (loc, type, tem);\n \t  }\n \tbreak;\n \n@@ -5319,7 +5303,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n \t    tem = fold_build2_loc (loc, MAX_EXPR, TREE_TYPE (arg00), arg00,\n \t\t\t\t   fold_convert_loc (loc, TREE_TYPE (arg00),\n \t\t\t\t\t\t     arg2));\n-\t    return pedantic_non_lvalue_loc (loc, fold_convert_loc (loc, type, tem));\n+\t    return fold_convert_loc (loc, type, tem);\n \t  }\n \tbreak;\n       case NE_EXPR:"}]}