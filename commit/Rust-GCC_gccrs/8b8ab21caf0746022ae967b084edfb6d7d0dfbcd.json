{"sha": "8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI4YWIyMWNhZjA3NDYwMjJhZTk2N2IwODRlZGZiNmQ3ZDBkZmJjZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-25T12:50:06Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-25T12:50:06Z"}, "message": "acconfig.h: List _GLIBCPP_USE_THREADS.\n\n\n2000-10-24  Phil Edwards  <pme@sources.redhat.com>\n\n        * acconfig.h:  List _GLIBCPP_USE_THREADS.\n        * acinclude.m4:  General formatting cleanup (tabs/spaces), typo\n          correction, etc.  Add comments about following *real* changes\n          where they are used.\n          (GLIBCPP_ENABLE_C_MBCHAR):  New test...\n          (GLIBCPP_CHECK_WCHAR_T_SUPPORT):  ...results used here.\n          (GLIBCPP_ENABLE_CSTDIO):  Define need_wlibio iff wide characters\n          are requested.\n          (GLIBCPP_ENABLE_THREADS):  If threads are used, define new\n          macro _GLIBCPP_USE_THREADS in c++config.h.\n          (GLIBCPP_ENABLE_SHADOW):  For C_INCLUDE_DIR, change () to {} as\n          this is used in both makefiles and shell scripts (mkcheck).\n        * configure.in:  Call GLIBCPP_ENABLE_C_MBCHAR.\n\n        * libio/_G_config.h:  Wrap _IO_MTSAFE_IO in _GLIBCPP_USE_THREADS.\n        * config/c_io_libio.h:  In nonthreaded case, typedef __c_lock to\n          something harmless, like int.\n\n        * config/os/aix/bits/os_defines.h:  Guard with _GLIBCPP_OS_DEFINES,\n          add comment/instructions.\n        * config/os/bsd/bits/os_defines.h:  Ditto.\n        * config/os/generic/bits/os_defines.h:  Ditto.\n        * config/os/gnu-linux/bits/os_defines.h:  Ditto.\n        * config/os/irix/bits/os_defines.h:  Ditto.\n        * config/os/newlib/bits/os_defines.h:  Ditto.\n        * config/os/solaris/solaris2.5/bits/os_defines.h:  Ditto.\n        * config/os/solaris/solaris2.6/bits/os_defines.h:  Ditto.\n\n        * mkcheck.in:  Limit the available heap size for testsuite\n          binaries, initially at 2MB.\n\nFrom-SVN: r37050", "tree": {"sha": "4e62f6efa220096245ca6b43de35fd545351ca96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e62f6efa220096245ca6b43de35fd545351ca96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/comments", "author": null, "committer": null, "parents": [{"sha": "9aa1d5ac5e9074af1562cc32a217588c690d7e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa1d5ac5e9074af1562cc32a217588c690d7e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa1d5ac5e9074af1562cc32a217588c690d7e63"}], "stats": {"total": 3364, "additions": 1836, "deletions": 1528}, "files": [{"sha": "239fb0cc816813f3c5eadc0c00642f2ddf701874", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -1,3 +1,87 @@\n+2000-10-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+        * include/bits/stl_pair.h (make_pair): Add LWG solution.\n+\n+        * testsuite/21_strings/compare.cc (test01): Inject namespace std\n+\tinto the mix.\n+\n+\t* mkcheck.in (MAX_MEM_USAGE): Bump up to 3072. Strangely enough,\n+\tthis works. \n+\n+2000-10-24  Levente Farkas  <lfarkas@mindmaker.hu>\n+\n+\t* include/bits/std_bitset.h (_M_do_find_next): Fix typo.\n+\n+2000-10-24  Phil Edwards  <pme@sources.redhat.com>\n+\n+        * acconfig.h:  List _GLIBCPP_USE_THREADS.\n+        * acinclude.m4:  General formatting cleanup (tabs/spaces), typo\n+          correction, etc.  Add comments about following *real* changes\n+          where they are used.\n+          (GLIBCPP_ENABLE_C_MBCHAR):  New test...\n+          (GLIBCPP_CHECK_WCHAR_T_SUPPORT):  ...results used here.\n+          (GLIBCPP_ENABLE_CSTDIO):  Define need_wlibio iff wide characters\n+          are requested.\n+          (GLIBCPP_ENABLE_THREADS):  If threads are used, define new\n+          macro _GLIBCPP_USE_THREADS in c++config.h.\n+          (GLIBCPP_ENABLE_SHADOW):  For C_INCLUDE_DIR, change () to {} as\n+          this is used in both makefiles and shell scripts (mkcheck).\n+        * configure.in:  Call GLIBCPP_ENABLE_C_MBCHAR.\n+\n+        * libio/_G_config.h:  Wrap _IO_MTSAFE_IO in _GLIBCPP_USE_THREADS.\n+        * config/c_io_libio.h:  In nonthreaded case, typedef __c_lock to\n+          something harmless, like int.\n+\n+        * config/os/aix/bits/os_defines.h:  Guard with _GLIBCPP_OS_DEFINES,\n+          add comment/instructions.\n+        * config/os/bsd/bits/os_defines.h:  Ditto.\n+        * config/os/generic/bits/os_defines.h:  Ditto.\n+        * config/os/gnu-linux/bits/os_defines.h:  Ditto.\n+        * config/os/irix/bits/os_defines.h:  Ditto.\n+        * config/os/newlib/bits/os_defines.h:  Ditto.\n+        * config/os/solaris/solaris2.5/bits/os_defines.h:  Ditto.\n+        * config/os/solaris/solaris2.6/bits/os_defines.h:  Ditto.\n+\n+        * mkcheck.in:  Limit the available heap size for testsuite\n+          binaries, initially at 2MB.\n+\n+2000-10-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/21_strings/compare.cc (test01): Add using declarations.\n+\n+\t* include/c_std/bits/std_cerrno.h: And here.\n+\t* include/c_std/bits/std_cassert.h: Tweaks.\n+\n+\t* mkcheck.in: Simplify.\n+\t\n+\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): Simplify.\n+\t(GLIBCPP_ENABLE_LONG_LONG): Same.\n+\t* aclocal.m4: Regenerate.\n+\n+\t* src/Makefile.am (c_shadow_headers): Add features.h,\n+\tbits/wrap_features.h.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/c_std/features.h: New file.\n+\t* include/c_std/bits/wrap_features.h (_CPP_WRAP_FEATURES_H): New\n+\tfile. Need to have c++config.h included before this file so\n+\t_ISOC99_SOURCE around.\n+\n+\t* include/c_std/sys/cdefs.h: Hack.\n+\t* include/c_std/stdlib.h: Same, use c++config.h.\n+\t* include/c_std/bits/std_cstdlib.h: Use _GLIBCPP_HAVE_STRTOLD.\n+\n+\t* include/c_std/bits/std_cassert.h: Fix.\n+\t* include/c_std/bits/std_cerrno.h: Make consistent.\n+\n+\t* include/c_std/bits/std_csetjmp.h (setjmp): Unscope global\n+\tdeclaration from ::_C_legacy to _C_legacy.\n+\n+\t* include/c_std/bits/std_cstdio.h: same with printf.\n+\t* include/c_std/stdio.h: And here.\n+\n+\t* include/c_std/bits/std_cstdlib.h: abort, exit comment.\n+\t* include/c_std/stdlib.h: Same here.\n+\t\n 2000-10-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/21_strings/compare.cc (test01): Add using declarations."}, {"sha": "bc945fcc9df73ac146abfa8f768d501c988cfe0c", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -1,5 +1,8 @@\n // acconfig.h symbols and macros for libstdc++ v3 -*- C++ -*-\n \n+// Include support for multiple threads, e.g., in the I/O package.\n+#undef _GLIBCPP_USE_THREADS\n+\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n "}, {"sha": "aedd6b96b63c3771c69292c99d4763b1234e4032", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 230, "deletions": 180, "changes": 410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -137,8 +137,8 @@ LIB_AC_PROG_CXX\n   fi\n \n   # configure.host sets the following important variables\n-  #\tglibcpp_cflags    - host specific C compiler flags\n-  #\tglibcpp_cxxflags  - host specific C++ compiler flags\n+  #        glibcpp_cflags    - host specific C compiler flags\n+  #        glibcpp_cxxflags  - host specific C++ compiler flags\n   glibcpp_cflags=\n   glibcpp_cxxflags=\n \n@@ -168,7 +168,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n   #if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \n     ok\n   #endif\n-  ], gpp_satisfactory=yes, AC_MSG_ERROR(\"please upgrade to gcc-2.95 or above\"))\n+  ], gpp_satisfactory=yes, AC_MSG_ERROR([please upgrade to gcc-2.95 or above]))\n   AC_MSG_RESULT($gpp_satisfactory)\n ])\n \n@@ -668,7 +668,7 @@ dnl Check to see if there is native support for complex\n dnl\n dnl Don't compile bits in math/* if native support exits.\n dnl\n-dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"cargf\" is found.\n+dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"atan2l/copysignl\" is found.\n dnl\n dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n@@ -701,34 +701,34 @@ dnl GLIBCPP_CHECK_CPU\n AC_DEFUN(GLIBCPP_CHECK_CPU, [\n     AC_MSG_CHECKING([for cpu config directory])\n # Currently unused, but could be useful.\n-#    CPU_FLAGS=\t\t\t\n+#    CPU_FLAGS=                        \n     case \"${target_cpu}\" in\n       alpha*)\n-\tcpu_include_dir=\"config/cpu/alpha\"\n+        cpu_include_dir=\"config/cpu/alpha\"\n         ;;\n       arm*)\n-\tcpu_include_dir=\"config/cpu/arm\"\n+        cpu_include_dir=\"config/cpu/arm\"\n         ;;\n       ia64)\n-\tcpu_include_dir=\"config/cpu/ia64\"\n-\t;;\n+        cpu_include_dir=\"config/cpu/ia64\"\n+        ;;\n       i386)\n-\tcpu_include_dir=\"config/cpu/i386\"\n-\t;;\n+        cpu_include_dir=\"config/cpu/i386\"\n+        ;;\n       i486 | i586 | i686 | i786)\n-\tcpu_include_dir=\"config/cpu/i486\"\n+        cpu_include_dir=\"config/cpu/i486\"\n         ;;\n       powerpc | rs6000)\n-\tcpu_include_dir=\"config/cpu/powerpc\"\n+        cpu_include_dir=\"config/cpu/powerpc\"\n         ;;\n       sparc64 | ultrasparc)\n-\tcpu_include_dir=\"config/cpu/sparc/sparc64\"\n+        cpu_include_dir=\"config/cpu/sparc/sparc64\"\n         ;;\n       sparc*)\n-\tcpu_include_dir=\"config/cpu/sparc/sparc32\"\n+        cpu_include_dir=\"config/cpu/sparc/sparc32\"\n         ;;\n       *)\n-\tcpu_include_dir=\"config/cpu/generic\"\n+        cpu_include_dir=\"config/cpu/generic\"\n         ;;\n     esac\n     AC_MSG_RESULT($cpu_include_dir)\n@@ -745,28 +745,28 @@ AC_DEFUN(GLIBCPP_CHECK_OS, [\n #    OS_FLAGS=\n     case \"${target_os}\" in\n       aix*)\n-\tos_include_dir=\"config/os/aix\"\n+        os_include_dir=\"config/os/aix\"\n         ;;\n       bsd* | freebsd*)\n-\tos_include_dir=\"config/os/bsd\"\n+        os_include_dir=\"config/os/bsd\"\n         ;;\n       linux*)\n-\tos_include_dir=\"config/os/gnu-linux\"\n-\t;;\n+        os_include_dir=\"config/os/gnu-linux\"\n+        ;;\n       irix*)\n-\tos_include_dir=\"config/os/irix\"\n-\t;;\n+        os_include_dir=\"config/os/irix\"\n+        ;;\n       solaris2.5*)\n-\tos_include_dir=\"config/os/solaris/solaris2.5\"\n+        os_include_dir=\"config/os/solaris/solaris2.5\"\n         ;;\n       solaris2.6*)\n-\tos_include_dir=\"config/os/solaris/solaris2.6\"\n+        os_include_dir=\"config/os/solaris/solaris2.6\"\n         ;;\n       solaris2.7* | solaris2.8*)\n-\tos_include_dir=\"config/os/solaris/solaris2.7\"\n+        os_include_dir=\"config/os/solaris/solaris2.7\"\n         ;;\n       *)\n-\tos_include_dir=\"config/os/generic\"\n+        os_include_dir=\"config/os/generic\"\n         ;;\n     esac\n     AC_MSG_RESULT($os_include_dir)\n@@ -795,8 +795,8 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _ISspace + _ISprint + _IScntrl + _ISupper + _ISlower + _ISalpha \\\n-\t+ _ISdigit + _ISpunct + _ISxdigit + _ISalnum + _ISgraph \\\n-\t+ __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}], \\\n+        + _ISdigit + _ISpunct + _ISxdigit + _ISalnum + _ISgraph \\\n+        + __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}], \\\n     ctype_linux=yes, ctype_linux=no)\n     AC_MSG_RESULT($ctype_linux)\n     if test $ctype_linux = \"yes\"; then\n@@ -811,7 +811,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _CTYPE_S + _CTYPE_R + _CTYPE_C + _CTYPE_U + _CTYPE_L + _CTYPE_A \\\n-\t+ _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}], \\\n+        + _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}], \\\n     ctype_bsd=yes, ctype_bsd=no)\n     AC_MSG_RESULT($ctype_bsd)\n     if test $ctype_bsd = \"yes\"; then\n@@ -843,8 +843,8 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _ISSPACE + _ISPRINT + _ISCNTRL + _ISUPPER + _ISLOWER + _ISALPHA \\\n-\t+ _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n-\t+ __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}], \\\n+        + _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n+        + __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}], \\\n     ctype_solaris=yes, ctype_solaris=no)\n     AC_MSG_RESULT($ctype_solaris)\n \n@@ -874,7 +874,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _U + _L + _N + _S + _P + _C + _X + _B \\\n-\t+ __ctype[a];}], \\\n+        + __ctype[a];}], \\\n     ctype_solaris25=yes, ctype_solaris25=no)\n     AC_MSG_RESULT($ctype_solaris25)\n     if test $ctype_solaris25 = \"yes\"; then\n@@ -890,8 +890,8 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _ISSPACE + _ISPRINT + _ISCNTRL + _ISUPPER + _ISLOWER + _ISALPHA \\\n-\t+ _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n-\t+ _VALC('a') + _IS('c', 0);}], \\\n+        + _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n+        + _VALC('a') + _IS('c', 0);}], \\\n     ctype_aix=yes, ctype_aix=no)\n     AC_MSG_RESULT($ctype_aix)\n     if test $ctype_aix = \"yes\"; then\n@@ -907,7 +907,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _U + _L + _N + _S + _P + _C + _X + _B \\\n-\t+ _ctype_[a];}], \\\n+        + _ctype_[a];}], \\\n     ctype_newlib=yes, ctype_newlib=no)\n     AC_MSG_RESULT($ctype_newlib)\n     if test $ctype_newlib = \"yes\"; then\n@@ -931,94 +931,103 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n dnl\n dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n+dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n+dnl must have been previously checked.)\n dnl\n dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found \n dnl Define _GLIBCPP_NEED_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n-\n-  dnl Sanity check for existence of ISO C9X headers for extended encoding.\n-  AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n-  AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n-\t\n-  dnl Only continue checking if the ISO C9X headers exist.\n-  if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n-\n-    dnl Test wchar.h for mbstate_t, which is needed for char_traits and others.\n-    AC_MSG_CHECKING([for mbstate_t])\n-    AC_TRY_COMPILE([#include <wchar.h>],\n-    [mbstate_t teststate;], \n-    use_native_mbstatet=yes, use_native_mbstatet=no)\n-    AC_MSG_RESULT($use_native_mbstatet)\n-    if test x\"$use_native_mbstatet\" = xno; then\n-      AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n-    fi\n+  if test x$enable_c_mbchar != xno; then\n+\n+    dnl Sanity check for existence of ISO C9X headers for extended encoding.\n+    AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n+    AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n+          \n+    dnl Only continue checking if the ISO C9X headers exist.\n+    if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n   \n-    dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n-    dnl numeric_limits can instantiate type_traits<wchar_t>\n-    AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n-    AC_TRY_COMPILE([#include <wchar.h>],\n-    [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n-    has_wchar_minmax=yes, has_wchar_minmax=no)\n-    AC_MSG_RESULT($has_wchar_minmax)\n+      dnl Test wchar.h for mbstate_t, which is needed for char_traits\n+      dnl and others.\n+      AC_MSG_CHECKING([for mbstate_t])\n+      AC_TRY_COMPILE([#include <wchar.h>],\n+      [mbstate_t teststate;], \n+      use_native_mbstatet=yes, use_native_mbstatet=no)\n+      AC_MSG_RESULT($use_native_mbstatet)\n+      if test x\"$use_native_mbstatet\" = xno; then\n+        AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n+      fi\n+    \n+      dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n+      dnl numeric_limits can instantiate type_traits<wchar_t>\n+      AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n+      AC_TRY_COMPILE([#include <wchar.h>],\n+      [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n+      has_wchar_minmax=yes, has_wchar_minmax=no)\n+      AC_MSG_RESULT($has_wchar_minmax)\n+    \n+      dnl Test wchar.h for WEOF, which is what we use to determine whether\n+      dnl to specialize for char_traits<wchar_t> or not.\n+      AC_MSG_CHECKING([for WEOF])\n+      AC_TRY_COMPILE([\n+        #include <wchar.h>\n+        #include <stddef.h>],\n+      [wint_t i = WEOF;],\n+      has_weof=yes, has_weof=no)\n+      AC_MSG_RESULT($has_weof)\n+  \n+      dnl Tests for wide character functions used in char_traits<wchar_t>.\n+      AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n+      wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n+  \n+      AC_MSG_CHECKING([for ISO C9X wchar_t support])\n+      if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n+         && test x\"$ac_wfuncs\" = xyes; then\n+        ac_isoC9X_wchar_t=yes\n+      else\n+        ac_isoC9X_wchar_t=no\n+      fi\n+      AC_MSG_RESULT($ac_isoC9X_wchar_t)\n+  \n+      dnl Use iconv for wchar_t to char conversions. As such, check for \n+      dnl X/Open Portability Guide, version 2 features (XPG2).\n+      AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n+      AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n+      AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n+      ac_XPG2funcs=yes, ac_XPG2funcs=no)\n+  \n+      AC_MSG_CHECKING([for XPG2 wchar_t support])\n+      if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n+         && test x\"$ac_XPG2funcs\" = xyes; then\n+        ac_XPG2_wchar_t=yes\n+      else\n+        ac_XPG2_wchar_t=no\n+      fi\n+      AC_MSG_RESULT($ac_XPG2_wchar_t)\n+  \n+      dnl At the moment, only enable wchar_t specializations if all the\n+      dnl above support is present.\n+      AC_MSG_CHECKING([for enabled wchar_t specializations])\n+      if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+         && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+        libinst_wstring_la=\"libinst-wstring.la\"\n+        AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n+        AC_MSG_RESULT(\"yes\")\n+      else\n+        libinst_wstring_la=\"\"\n+        AC_MSG_RESULT(\"no\")\n+      fi\n+      AC_SUBST(libinst_wstring_la)\n   \n-    dnl Test wchar.h for WEOF, which is what we use to determine whether\n-    dnl to specialize for char_traits<wchar_t> or not.\n-    AC_MSG_CHECKING([for WEOF])\n-    AC_TRY_COMPILE([\n-      #include <wchar.h>\n-      #include <stddef.h>],\n-    [wint_t i = WEOF;],\n-    has_weof=yes, has_weof=no)\n-    AC_MSG_RESULT($has_weof)\n-\n-    dnl Tests for wide character functions used in char_traits<wchar_t>.\n-    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n-    wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n-\n-    AC_MSG_CHECKING([for ISO C9X wchar_t support])\n-    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n-       && test x\"$ac_wfuncs\" = xyes; then\n-      ac_isoC9X_wchar_t=yes\n-    else\n-      ac_isoC9X_wchar_t=no\n-    fi\n-    AC_MSG_RESULT($ac_isoC9X_wchar_t)\n-\n-    dnl Use iconv for wchar_t to char conversions. As such, check for \n-    dnl X/Open Portability Guide, version 2 features (XPG2).\n-    AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n-    AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n-    AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n-    ac_XPG2funcs=yes, ac_XPG2funcs=no)\n-\n-    AC_MSG_CHECKING([for XPG2 wchar_t support])\n-    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n-       && test x\"$ac_XPG2funcs\" = xyes; then\n-      ac_XPG2_wchar_t=yes\n-    else\n-      ac_XPG2_wchar_t=no\n-    fi\n-    AC_MSG_RESULT($ac_XPG2_wchar_t)\n-\n-    dnl At the moment, only enable wchar_t specializations if all the\n-    dnl above support is present.\n-    AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n-       && test x\"$ac_XPG2_wchar_t\" = xyes; then\n-      libinst_wstring_la=\"libinst-wstring.la\"\n-      AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n-      AC_MSG_RESULT(\"yes\")\n     else\n-      libinst_wstring_la=\"\"\n-      AC_MSG_RESULT(\"no\")\n+      AC_MSG_WARN([<wchar.h> not found])\n+      AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n     fi\n-    AC_SUBST(libinst_wstring_la)\n \n   else\n-    AC_MSG_WARN([<wchar.h> not found])\n-    AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n+    dnl Wide characters disabled by the user.  Maybe print a warning?\n+    :\n   fi\n ])\n \n@@ -1044,8 +1053,8 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT, [\n     AC_LANG_SAVE\n     AC_LANG_CPLUSPLUS\n     AC_TRY_COMPILE([struct dcomplex { __complex__ double x; }; \\\n-\t\t    dcomplex f(const dcomplex& x) { return dcomplex(x); }], \\\n-\t\t    [ dcomplex x; f(x); ],\n+                    dcomplex f(const dcomplex& x) { return dcomplex(x); }], \\\n+                    [ dcomplex x; f(x); ],\n       glibcpp_cv_complex=ok,\n       glibcpp_cv_complex=buggy\n     )\n@@ -1120,10 +1129,10 @@ enable_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n dnl Option parsed, now set things appropriately\n case \"${enable_debug}\" in\n     yes) \n-\tDEBUG_FLAGS='-O0 -ggdb'\t\t\t\n-\t;;\n+        DEBUG_FLAGS='-O0 -ggdb'                        \n+        ;;\n     no)   \n-\tDEBUG_FLAGS='-g'\n+        DEBUG_FLAGS='-g'\n         ;;\n esac\n AC_SUBST(DEBUG_FLAGS)\n@@ -1154,11 +1163,11 @@ changequote(<<, >>)dnl\n changequote([, ])dnl\n [case \"x$enableval\" in\n  xyes)   \n-\tAC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n+        AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n  xno|x)  \n-\tenable_cxx_flags='' ;;\n+        enable_cxx_flags='' ;;\n  *)      \n-\tenable_cxx_flags=\"$enableval\" ;;\n+        enable_cxx_flags=\"$enableval\" ;;\n  esac],\n enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')\n \n@@ -1198,13 +1207,13 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   [  --enable-cstdio        enable GNU libio for target io package. (default)\n      --enable-cstdio=LIB    use LIB target-speific io package.], \n   if test x$enable_cstdio = xno; then\n-    enable_cstdio=libio\n+     enable_cstdio=libio\n   fi,\n      enable_cstdio=libio)\n \n   enable_cstdio_flag=$enable_cstdio\n \n-  dnl Check if a valid thread package\n+  dnl Check if a valid I/O package\n   case x${enable_cstdio_flag} in\n     xlibio | x | xno | xnone | xyes)\n       # default\n@@ -1221,38 +1230,48 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       if test x$has_libio = x\"yes\"; then\n         case \"$target\" in\n           *-*-linux*)\n-  \t    AC_MSG_CHECKING([for glibc version >= 2.2])\n-  \t    AC_EGREP_CPP([ok], [\n-\t    #include <features.h>\n-  \t    #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n-    \t\tok\n-  \t    #endif\n-  \t    ], glibc_satisfactory=yes, glibc_satisfactory=no)\n-  \t    AC_MSG_RESULT($glibc_satisfactory)\n-\t    ;;\n+              AC_MSG_CHECKING([for glibc version >= 2.2])\n+              AC_EGREP_CPP([ok], [\n+            #include <features.h>\n+              #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+                    ok\n+              #endif\n+              ], glibc_satisfactory=yes, glibc_satisfactory=no)\n+              AC_MSG_RESULT($glibc_satisfactory)\n+            ;;\n         esac\n \n-\t# XXX at the moment, admit defeat and force the recompilation\n+        # XXX at the moment, admit defeat and force the recompilation\n         # XXX of glibc even on glibc-2.2 systems, because libio is not synched.\n-        glibc_satisfactory=no\t\n-\n-  \tif test x$glibc_satisfactory = x\"yes\"; then\n-\t  need_libio=no\n-\t  need_xtra_libio=no\n-      \t  need_wlibio=no\t\n-      \telse\n-\t  need_libio=yes\n-\t  need_xtra_libio=yes\n-          # bkoz XXX need to add checks to enable this\n-          need_wlibio=yes\n-\tfi\n+        glibc_satisfactory=no        \n+\n+        if test x$glibc_satisfactory = x\"yes\"; then\n+           need_libio=no\n+           need_xtra_libio=no\n+           need_wlibio=no        \n+        else\n+           need_libio=yes\n+           need_xtra_libio=yes\n+           # bkoz XXX need to add checks to enable this\n+           # pme XXX here's a first pass at such a check\n+           if test x$enable_c_mbchar != xno; then\n+              need_wlibio=yes\n+           else\n+              need_wlibio=no\n+           fi\n+        fi\n \n       # Using libio, but <libio.h> doesn't exist on the target system. . .\n       else\n-\tneed_libio=yes\n-        need_xtra_libio=no\n-        # bkoz XXX need to add checks to enable this\n-        need_wlibio=no\n+         need_libio=yes\n+         need_xtra_libio=no\n+         # bkoz XXX need to add checks to enable this\n+         # pme XXX here's a first pass at such a check\n+         if test x$enable_c_mbchar != xno; then\n+             need_wlibio=yes\n+         else\n+             need_wlibio=no\n+         fi\n       fi\n       ;;\n \n@@ -1275,7 +1294,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   CCODECVT_C=config/c_io_libio_codecvt.c\n   AC_LINK_FILES($CCODECVT_C, libio/c_codecvt.c)\n   # 2000-08-04 bkoz hack\n-\t\n+\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_XTRA_LIBIO, test \"$need_xtra_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)\n@@ -1288,7 +1307,8 @@ dnl\n dnl GLIBCPP_ENABLE_THREADS\n dnl --enable-threads=posix sets config/threads-posix.h et. al.\n dnl \n-dnl default is no threads\n+dnl Default is no threads, which also disables _IO_MTSAFE_IO in\n+dnl libio.  Any actual thread package will enable it.\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   dnl Note this comes from the gcc/config.in and libjava/config.in\n@@ -1306,22 +1326,22 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n \n   dnl Check if a valid thread package\n   case x${enable_threads_flag} in\n-\tx | xno | xnone)\n-\t\t# No threads\n-\t\ttarget_thread_file='single'\n-\t\t;;\n-\txyes)\n-\t\t# default\n-\t\ttarget_thread_file=''\n-\t\t;;\n-\txdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \\\n-\txsolaris | xwin32 | xdce | xvxworks)\n-\t\ttarget_thread_file=$enable_threads_flag\n-\t\t;;\n-\t*)\n-\t\techo \"$enable_threads is an unknown thread package\" 1>&2\n-\t\texit 1\n-\t\t;;\n+        x | xno | xnone)\n+                # No threads\n+                target_thread_file='single'\n+                ;;\n+        xyes)\n+                # default\n+                target_thread_file=''\n+                ;;\n+        xdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \\\n+        xsolaris | xwin32 | xdce | xvxworks)\n+                target_thread_file=$enable_threads_flag\n+                ;;\n+        *)\n+                echo \"$enable_threads is an unknown thread package\" 1>&2\n+                exit 1\n+                ;;\n   esac\n \n   dnl Check for thread package actually supported in libstdc++ \n@@ -1343,6 +1363,9 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_MSG_RESULT($THREADH)\n \n   AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n+  if test $THREADH != threads-no.h; then\n+    AC_DEFINE(_GLIBCPP_USE_THREADS)\n+  fi\n ])\n \n \n@@ -1351,16 +1374,16 @@ dnl GLIBCPP_ENABLE_ATOMICITY\n AC_DEFUN(GLIBCPP_ENABLE_ATOMICITY, [\n     AC_MSG_CHECKING([for atomicity.h])\n     case \"$target\" in\n-      *-*-linux*)\n-\tATOMICITYH=$cpu_include_dir\n-\t;;\t\n+      *-*-linux* | sparc*-*-*)\n+        ATOMICITYH=$cpu_include_dir\n+        ;;    \n       *-*-aix*)\n         ATOMICITYH=$os_include_dir\n-\t;;\n+        ;;\n       *)\n-\techo \"$enable_threads is an unknown thread package\" 1>&2\n-\texit 1\n-\t;;\n+        # bit of overkill on this text...\n+        AC_MSG_ERROR([Atomic locking requested, but $enable_threads is an unknown thread package and atomic operations are not present in the CPU])\n+        ;;\n     esac\n     AC_MSG_RESULT($ATOMICITYH/bits/atomicity.h)\n     AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, bits/atomicity.h)\n@@ -1473,11 +1496,11 @@ changequote(<<, >>)dnl\n changequote([, ])\n   [case \"$enableval\" in\n    yes) enable_cshadow_headers=yes \n-\t;;\n+        ;;\n    no)  enable_cshadow_headers=no \n-\t;;\n+        ;;\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable shadowed C headers]) \n-\t;;\n+        ;;\n   esac],\n   enable_cshadow_headers=GLIBCPP_ENABLE_SHADOW_DEFAULT)\n   AC_MSG_RESULT($enable_cshadow_headers)\n@@ -1486,13 +1509,13 @@ changequote([, ])\n   dnl NB: these things may be duplicated in c++config.h as well.\n   case \"$enable_cshadow_headers\" in\n     yes) \n-\tCSHADOW_FLAGS=\"-fno-builtin\"\n-\tC_INCLUDE_DIR='$(top_srcdir)/include/c_std'\n+        CSHADOW_FLAGS=\"-fno-builtin\"\n+        C_INCLUDE_DIR='${top_srcdir}/include/c_std'\n         AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n-\t;;\n+        ;;\n     no)   \n-\tCSHADOW_FLAGS=\"\"\n-\tC_INCLUDE_DIR='$(top_srcdir)/include/c'\n+        CSHADOW_FLAGS=\"\"\n+        C_INCLUDE_DIR='${top_srcdir}/include/c'\n         ;;\n   esac\n \n@@ -1501,6 +1524,33 @@ changequote([, ])\n   AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n ])\n \n+\n+dnl\n+dnl Check for wide character support.  Has the same effect as the option\n+dnl in gcc's configure, but in a form that autoconf can mess with.\n+dnl\n+dnl GLIBCPP_ENABLE_C_MBCHAR\n+dnl --enable-c-mbchar requests all the wchar_t stuff.\n+dnl --disable-c-mbchar doesn't.\n+dnl  +  Usage:  GLIBCPP_ENABLE_C_MBCHAR[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       defaults to `no'.\n+AC_DEFUN(GLIBCPP_ENABLE_C_MBCHAR, [dnl\n+define([GLIBCPP_ENABLE_C_MBCHAR_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_ARG_ENABLE(c-mbchar,\n+changequote(<<, >>)dnl\n+<<  --enable-c-mbchar       enable multibyte (wide) characters [default=>>GLIBCPP_ENABLE_C_MBCHAR_DEFAULT],\n+changequote([, ])dnl\n+[case \"$enableval\" in\n+ yes) enable_c_mbchar=yes ;;\n+ no)  enable_c_mbchar=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable c-mbchar]) ;;\n+ esac],\n+enable_c_mbchar=GLIBCPP_ENABLE_C_MBCHAR_DEFAULT)dnl\n+dnl Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n+])\n+\n+\n dnl\n dnl Set up *_INCLUDES and *_INCLUDE_DIR variables for all sundry Makefile.am's.\n dnl"}, {"sha": "e3c0fd57ffcbdbdf3ec4bd37b6400ae4017cb590", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 230, "deletions": 180, "changes": 410, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -149,8 +149,8 @@ LIB_AC_PROG_CXX\n   fi\n \n   # configure.host sets the following important variables\n-  #\tglibcpp_cflags    - host specific C compiler flags\n-  #\tglibcpp_cxxflags  - host specific C++ compiler flags\n+  #        glibcpp_cflags    - host specific C compiler flags\n+  #        glibcpp_cxxflags  - host specific C++ compiler flags\n   glibcpp_cflags=\n   glibcpp_cxxflags=\n \n@@ -180,7 +180,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPILER_VERSION, [\n   #if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95) \n     ok\n   #endif\n-  ], gpp_satisfactory=yes, AC_MSG_ERROR(\"please upgrade to gcc-2.95 or above\"))\n+  ], gpp_satisfactory=yes, AC_MSG_ERROR([please upgrade to gcc-2.95 or above]))\n   AC_MSG_RESULT($gpp_satisfactory)\n ])\n \n@@ -680,7 +680,7 @@ dnl Check to see if there is native support for complex\n dnl\n dnl Don't compile bits in math/* if native support exits.\n dnl\n-dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"cargf\" is found.\n+dnl Define USE_COMPLEX_LONG_DOUBLE etc if \"atan2l/copysignl\" is found.\n dnl\n dnl GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n@@ -713,34 +713,34 @@ dnl GLIBCPP_CHECK_CPU\n AC_DEFUN(GLIBCPP_CHECK_CPU, [\n     AC_MSG_CHECKING([for cpu config directory])\n # Currently unused, but could be useful.\n-#    CPU_FLAGS=\t\t\t\n+#    CPU_FLAGS=                        \n     case \"${target_cpu}\" in\n       alpha*)\n-\tcpu_include_dir=\"config/cpu/alpha\"\n+        cpu_include_dir=\"config/cpu/alpha\"\n         ;;\n       arm*)\n-\tcpu_include_dir=\"config/cpu/arm\"\n+        cpu_include_dir=\"config/cpu/arm\"\n         ;;\n       ia64)\n-\tcpu_include_dir=\"config/cpu/ia64\"\n-\t;;\n+        cpu_include_dir=\"config/cpu/ia64\"\n+        ;;\n       i386)\n-\tcpu_include_dir=\"config/cpu/i386\"\n-\t;;\n+        cpu_include_dir=\"config/cpu/i386\"\n+        ;;\n       i486 | i586 | i686 | i786)\n-\tcpu_include_dir=\"config/cpu/i486\"\n+        cpu_include_dir=\"config/cpu/i486\"\n         ;;\n       powerpc | rs6000)\n-\tcpu_include_dir=\"config/cpu/powerpc\"\n+        cpu_include_dir=\"config/cpu/powerpc\"\n         ;;\n       sparc64 | ultrasparc)\n-\tcpu_include_dir=\"config/cpu/sparc/sparc64\"\n+        cpu_include_dir=\"config/cpu/sparc/sparc64\"\n         ;;\n       sparc*)\n-\tcpu_include_dir=\"config/cpu/sparc/sparc32\"\n+        cpu_include_dir=\"config/cpu/sparc/sparc32\"\n         ;;\n       *)\n-\tcpu_include_dir=\"config/cpu/generic\"\n+        cpu_include_dir=\"config/cpu/generic\"\n         ;;\n     esac\n     AC_MSG_RESULT($cpu_include_dir)\n@@ -757,28 +757,28 @@ AC_DEFUN(GLIBCPP_CHECK_OS, [\n #    OS_FLAGS=\n     case \"${target_os}\" in\n       aix*)\n-\tos_include_dir=\"config/os/aix\"\n+        os_include_dir=\"config/os/aix\"\n         ;;\n       bsd* | freebsd*)\n-\tos_include_dir=\"config/os/bsd\"\n+        os_include_dir=\"config/os/bsd\"\n         ;;\n       linux*)\n-\tos_include_dir=\"config/os/gnu-linux\"\n-\t;;\n+        os_include_dir=\"config/os/gnu-linux\"\n+        ;;\n       irix*)\n-\tos_include_dir=\"config/os/irix\"\n-\t;;\n+        os_include_dir=\"config/os/irix\"\n+        ;;\n       solaris2.5*)\n-\tos_include_dir=\"config/os/solaris/solaris2.5\"\n+        os_include_dir=\"config/os/solaris/solaris2.5\"\n         ;;\n       solaris2.6*)\n-\tos_include_dir=\"config/os/solaris/solaris2.6\"\n+        os_include_dir=\"config/os/solaris/solaris2.6\"\n         ;;\n       solaris2.7* | solaris2.8*)\n-\tos_include_dir=\"config/os/solaris/solaris2.7\"\n+        os_include_dir=\"config/os/solaris/solaris2.7\"\n         ;;\n       *)\n-\tos_include_dir=\"config/os/generic\"\n+        os_include_dir=\"config/os/generic\"\n         ;;\n     esac\n     AC_MSG_RESULT($os_include_dir)\n@@ -807,8 +807,8 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _ISspace + _ISprint + _IScntrl + _ISupper + _ISlower + _ISalpha \\\n-\t+ _ISdigit + _ISpunct + _ISxdigit + _ISalnum + _ISgraph \\\n-\t+ __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}], \\\n+        + _ISdigit + _ISpunct + _ISxdigit + _ISalnum + _ISgraph \\\n+        + __ctype_tolower[a] + __ctype_toupper[a] + __ctype_b[a];}], \\\n     ctype_linux=yes, ctype_linux=no)\n     AC_MSG_RESULT($ctype_linux)\n     if test $ctype_linux = \"yes\"; then\n@@ -823,7 +823,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _CTYPE_S + _CTYPE_R + _CTYPE_C + _CTYPE_U + _CTYPE_L + _CTYPE_A \\\n-\t+ _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}], \\\n+        + _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}], \\\n     ctype_bsd=yes, ctype_bsd=no)\n     AC_MSG_RESULT($ctype_bsd)\n     if test $ctype_bsd = \"yes\"; then\n@@ -855,8 +855,8 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _ISSPACE + _ISPRINT + _ISCNTRL + _ISUPPER + _ISLOWER + _ISALPHA \\\n-\t+ _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n-\t+ __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}], \\\n+        + _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n+        + __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}], \\\n     ctype_solaris=yes, ctype_solaris=no)\n     AC_MSG_RESULT($ctype_solaris)\n \n@@ -886,7 +886,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _U + _L + _N + _S + _P + _C + _X + _B \\\n-\t+ __ctype[a];}], \\\n+        + __ctype[a];}], \\\n     ctype_solaris25=yes, ctype_solaris25=no)\n     AC_MSG_RESULT($ctype_solaris25)\n     if test $ctype_solaris25 = \"yes\"; then\n@@ -902,8 +902,8 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _ISSPACE + _ISPRINT + _ISCNTRL + _ISUPPER + _ISLOWER + _ISALPHA \\\n-\t+ _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n-\t+ _VALC('a') + _IS('c', 0);}], \\\n+        + _ISDIGIT + _ISPUNCT + _ISXDIGIT + _ISALNUM + _ISGRAPH \\\n+        + _VALC('a') + _IS('c', 0);}], \\\n     ctype_aix=yes, ctype_aix=no)\n     AC_MSG_RESULT($ctype_aix)\n     if test $ctype_aix = \"yes\"; then\n@@ -919,7 +919,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n     [int\n     foo (int a)\n     { return _U + _L + _N + _S + _P + _C + _X + _B \\\n-\t+ _ctype_[a];}], \\\n+        + _ctype_[a];}], \\\n     ctype_newlib=yes, ctype_newlib=no)\n     AC_MSG_RESULT($ctype_newlib)\n     if test $ctype_newlib = \"yes\"; then\n@@ -943,94 +943,103 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n \n dnl\n dnl Check to see if this target can enable the wchar_t parts of libstdc++.\n+dnl If --disable-c-mbchar was given, no wchar_t stuff is enabled.  (This\n+dnl must have been previously checked.)\n dnl\n dnl Define _GLIBCPP_USE_WCHAR_T if all the bits are found \n dnl Define _GLIBCPP_NEED_MBSTATE_T if mbstate_t is not in wchar.h\n dnl\n dnl GLIBCPP_CHECK_WCHAR_T_SUPPORT\n AC_DEFUN(GLIBCPP_CHECK_WCHAR_T_SUPPORT, [\n-\n-  dnl Sanity check for existence of ISO C9X headers for extended encoding.\n-  AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n-  AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n-\t\n-  dnl Only continue checking if the ISO C9X headers exist.\n-  if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n-\n-    dnl Test wchar.h for mbstate_t, which is needed for char_traits and others.\n-    AC_MSG_CHECKING([for mbstate_t])\n-    AC_TRY_COMPILE([#include <wchar.h>],\n-    [mbstate_t teststate;], \n-    use_native_mbstatet=yes, use_native_mbstatet=no)\n-    AC_MSG_RESULT($use_native_mbstatet)\n-    if test x\"$use_native_mbstatet\" = xno; then\n-      AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n-    fi\n+  if test x$enable_c_mbchar != xno; then\n+\n+    dnl Sanity check for existence of ISO C9X headers for extended encoding.\n+    AC_CHECK_HEADER(wchar.h, ac_has_wchar_h=yes, ac_has_wchar_h=no)\n+    AC_CHECK_HEADER(wctype.h, ac_has_wctype_h=yes, ac_has_wctype_h=no)\n+          \n+    dnl Only continue checking if the ISO C9X headers exist.\n+    if test x\"$ac_has_wchar_h\" = xyes && test x\"$ac_has_wctype_h\" = xyes; then\n   \n-    dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n-    dnl numeric_limits can instantiate type_traits<wchar_t>\n-    AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n-    AC_TRY_COMPILE([#include <wchar.h>],\n-    [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n-    has_wchar_minmax=yes, has_wchar_minmax=no)\n-    AC_MSG_RESULT($has_wchar_minmax)\n+      dnl Test wchar.h for mbstate_t, which is needed for char_traits\n+      dnl and others.\n+      AC_MSG_CHECKING([for mbstate_t])\n+      AC_TRY_COMPILE([#include <wchar.h>],\n+      [mbstate_t teststate;], \n+      use_native_mbstatet=yes, use_native_mbstatet=no)\n+      AC_MSG_RESULT($use_native_mbstatet)\n+      if test x\"$use_native_mbstatet\" = xno; then\n+        AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n+      fi\n+    \n+      dnl Test wchar.h for WCHAR_MIN, WCHAR_MAX, which is needed before\n+      dnl numeric_limits can instantiate type_traits<wchar_t>\n+      AC_MSG_CHECKING([for WCHAR_MIN and WCHAR_MAX])\n+      AC_TRY_COMPILE([#include <wchar.h>],\n+      [int i = WCHAR_MIN; int j = WCHAR_MAX;], \n+      has_wchar_minmax=yes, has_wchar_minmax=no)\n+      AC_MSG_RESULT($has_wchar_minmax)\n+    \n+      dnl Test wchar.h for WEOF, which is what we use to determine whether\n+      dnl to specialize for char_traits<wchar_t> or not.\n+      AC_MSG_CHECKING([for WEOF])\n+      AC_TRY_COMPILE([\n+        #include <wchar.h>\n+        #include <stddef.h>],\n+      [wint_t i = WEOF;],\n+      has_weof=yes, has_weof=no)\n+      AC_MSG_RESULT($has_weof)\n+  \n+      dnl Tests for wide character functions used in char_traits<wchar_t>.\n+      AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n+      wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n+  \n+      AC_MSG_CHECKING([for ISO C9X wchar_t support])\n+      if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n+         && test x\"$ac_wfuncs\" = xyes; then\n+        ac_isoC9X_wchar_t=yes\n+      else\n+        ac_isoC9X_wchar_t=no\n+      fi\n+      AC_MSG_RESULT($ac_isoC9X_wchar_t)\n+  \n+      dnl Use iconv for wchar_t to char conversions. As such, check for \n+      dnl X/Open Portability Guide, version 2 features (XPG2).\n+      AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n+      AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n+      AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n+      ac_XPG2funcs=yes, ac_XPG2funcs=no)\n+  \n+      AC_MSG_CHECKING([for XPG2 wchar_t support])\n+      if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n+         && test x\"$ac_XPG2funcs\" = xyes; then\n+        ac_XPG2_wchar_t=yes\n+      else\n+        ac_XPG2_wchar_t=no\n+      fi\n+      AC_MSG_RESULT($ac_XPG2_wchar_t)\n+  \n+      dnl At the moment, only enable wchar_t specializations if all the\n+      dnl above support is present.\n+      AC_MSG_CHECKING([for enabled wchar_t specializations])\n+      if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n+         && test x\"$ac_XPG2_wchar_t\" = xyes; then\n+        libinst_wstring_la=\"libinst-wstring.la\"\n+        AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n+        AC_MSG_RESULT(\"yes\")\n+      else\n+        libinst_wstring_la=\"\"\n+        AC_MSG_RESULT(\"no\")\n+      fi\n+      AC_SUBST(libinst_wstring_la)\n   \n-    dnl Test wchar.h for WEOF, which is what we use to determine whether\n-    dnl to specialize for char_traits<wchar_t> or not.\n-    AC_MSG_CHECKING([for WEOF])\n-    AC_TRY_COMPILE([\n-      #include <wchar.h>\n-      #include <stddef.h>],\n-    [wint_t i = WEOF;],\n-    has_weof=yes, has_weof=no)\n-    AC_MSG_RESULT($has_weof)\n-\n-    dnl Tests for wide character functions used in char_traits<wchar_t>.\n-    AC_CHECK_FUNCS(wcslen wmemchr wmemcmp wmemcpy wmemmove wmemset \\\n-    wcsrtombs mbsrtowcs, ac_wfuncs=yes, ac_wfuncs=no)\n-\n-    AC_MSG_CHECKING([for ISO C9X wchar_t support])\n-    if test x\"$has_weof\" = xyes && test x\"$has_wchar_minmax\" = xyes \\\n-       && test x\"$ac_wfuncs\" = xyes; then\n-      ac_isoC9X_wchar_t=yes\n-    else\n-      ac_isoC9X_wchar_t=no\n-    fi\n-    AC_MSG_RESULT($ac_isoC9X_wchar_t)\n-\n-    dnl Use iconv for wchar_t to char conversions. As such, check for \n-    dnl X/Open Portability Guide, version 2 features (XPG2).\n-    AC_CHECK_HEADER(iconv.h, ac_has_iconv_h=yes, ac_has_iconv_h=no)\n-    AC_CHECK_HEADER(langinfo.h, ac_has_langinfo_h=yes, ac_has_langinfo_h=no)\n-    AC_CHECK_FUNCS(iconv_open iconv_close iconv nl_langinfo, \\\n-    ac_XPG2funcs=yes, ac_XPG2funcs=no)\n-\n-    AC_MSG_CHECKING([for XPG2 wchar_t support])\n-    if test x\"$ac_has_iconv_h\" = xyes && test x\"$ac_has_langinfo_h\" = xyes \\\n-       && test x\"$ac_XPG2funcs\" = xyes; then\n-      ac_XPG2_wchar_t=yes\n-    else\n-      ac_XPG2_wchar_t=no\n-    fi\n-    AC_MSG_RESULT($ac_XPG2_wchar_t)\n-\n-    dnl At the moment, only enable wchar_t specializations if all the\n-    dnl above support is present.\n-    AC_MSG_CHECKING([for enabled wchar_t specializations])\n-    if test x\"$ac_isoC9X_wchar_t\" = xyes \\\n-       && test x\"$ac_XPG2_wchar_t\" = xyes; then\n-      libinst_wstring_la=\"libinst-wstring.la\"\n-      AC_DEFINE(_GLIBCPP_USE_WCHAR_T)\n-      AC_MSG_RESULT(\"yes\")\n     else\n-      libinst_wstring_la=\"\"\n-      AC_MSG_RESULT(\"no\")\n+      AC_MSG_WARN([<wchar.h> not found])\n+      AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n     fi\n-    AC_SUBST(libinst_wstring_la)\n \n   else\n-    AC_MSG_WARN([<wchar.h> not found])\n-    AC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n+    dnl Wide characters disabled by the user.  Maybe print a warning?\n+    :\n   fi\n ])\n \n@@ -1056,8 +1065,8 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT, [\n     AC_LANG_SAVE\n     AC_LANG_CPLUSPLUS\n     AC_TRY_COMPILE([struct dcomplex { __complex__ double x; }; \\\n-\t\t    dcomplex f(const dcomplex& x) { return dcomplex(x); }], \\\n-\t\t    [ dcomplex x; f(x); ],\n+                    dcomplex f(const dcomplex& x) { return dcomplex(x); }], \\\n+                    [ dcomplex x; f(x); ],\n       glibcpp_cv_complex=ok,\n       glibcpp_cv_complex=buggy\n     )\n@@ -1132,10 +1141,10 @@ enable_debug=GLIBCPP_ENABLE_DEBUG_DEFAULT)dnl\n dnl Option parsed, now set things appropriately\n case \"${enable_debug}\" in\n     yes) \n-\tDEBUG_FLAGS='-O0 -ggdb'\t\t\t\n-\t;;\n+        DEBUG_FLAGS='-O0 -ggdb'                        \n+        ;;\n     no)   \n-\tDEBUG_FLAGS='-g'\n+        DEBUG_FLAGS='-g'\n         ;;\n esac\n AC_SUBST(DEBUG_FLAGS)\n@@ -1166,11 +1175,11 @@ changequote(<<, >>)dnl\n changequote([, ])dnl\n [case \"x$enableval\" in\n  xyes)   \n-\tAC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n+        AC_MSG_ERROR([--enable-cxx-flags needs compiler flags as arguments]) ;;\n  xno|x)  \n-\tenable_cxx_flags='' ;;\n+        enable_cxx_flags='' ;;\n  *)      \n-\tenable_cxx_flags=\"$enableval\" ;;\n+        enable_cxx_flags=\"$enableval\" ;;\n  esac],\n enable_cxx_flags='GLIBCPP_ENABLE_CXX_FLAGS_DEFAULT')\n \n@@ -1210,13 +1219,13 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   [  --enable-cstdio        enable GNU libio for target io package. (default)\n      --enable-cstdio=LIB    use LIB target-speific io package.], \n   if test x$enable_cstdio = xno; then\n-    enable_cstdio=libio\n+     enable_cstdio=libio\n   fi,\n      enable_cstdio=libio)\n \n   enable_cstdio_flag=$enable_cstdio\n \n-  dnl Check if a valid thread package\n+  dnl Check if a valid I/O package\n   case x${enable_cstdio_flag} in\n     xlibio | x | xno | xnone | xyes)\n       # default\n@@ -1233,38 +1242,48 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       if test x$has_libio = x\"yes\"; then\n         case \"$target\" in\n           *-*-linux*)\n-  \t    AC_MSG_CHECKING([for glibc version >= 2.2])\n-  \t    AC_EGREP_CPP([ok], [\n-\t    #include <features.h>\n-  \t    #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n-    \t\tok\n-  \t    #endif\n-  \t    ], glibc_satisfactory=yes, glibc_satisfactory=no)\n-  \t    AC_MSG_RESULT($glibc_satisfactory)\n-\t    ;;\n+              AC_MSG_CHECKING([for glibc version >= 2.2])\n+              AC_EGREP_CPP([ok], [\n+            #include <features.h>\n+              #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 2) \n+                    ok\n+              #endif\n+              ], glibc_satisfactory=yes, glibc_satisfactory=no)\n+              AC_MSG_RESULT($glibc_satisfactory)\n+            ;;\n         esac\n \n-\t# XXX at the moment, admit defeat and force the recompilation\n+        # XXX at the moment, admit defeat and force the recompilation\n         # XXX of glibc even on glibc-2.2 systems, because libio is not synched.\n-        glibc_satisfactory=no\t\n-\n-  \tif test x$glibc_satisfactory = x\"yes\"; then\n-\t  need_libio=no\n-\t  need_xtra_libio=no\n-      \t  need_wlibio=no\t\n-      \telse\n-\t  need_libio=yes\n-\t  need_xtra_libio=yes\n-          # bkoz XXX need to add checks to enable this\n-          need_wlibio=yes\n-\tfi\n+        glibc_satisfactory=no        \n+\n+        if test x$glibc_satisfactory = x\"yes\"; then\n+           need_libio=no\n+           need_xtra_libio=no\n+           need_wlibio=no        \n+        else\n+           need_libio=yes\n+           need_xtra_libio=yes\n+           # bkoz XXX need to add checks to enable this\n+           # pme XXX here's a first pass at such a check\n+           if test x$enable_c_mbchar != xno; then\n+              need_wlibio=yes\n+           else\n+              need_wlibio=no\n+           fi\n+        fi\n \n       # Using libio, but <libio.h> doesn't exist on the target system. . .\n       else\n-\tneed_libio=yes\n-        need_xtra_libio=no\n-        # bkoz XXX need to add checks to enable this\n-        need_wlibio=no\n+         need_libio=yes\n+         need_xtra_libio=no\n+         # bkoz XXX need to add checks to enable this\n+         # pme XXX here's a first pass at such a check\n+         if test x$enable_c_mbchar != xno; then\n+             need_wlibio=yes\n+         else\n+             need_wlibio=no\n+         fi\n       fi\n       ;;\n \n@@ -1287,7 +1306,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n   CCODECVT_C=config/c_io_libio_codecvt.c\n   AC_LINK_FILES($CCODECVT_C, libio/c_codecvt.c)\n   # 2000-08-04 bkoz hack\n-\t\n+\n   AM_CONDITIONAL(GLIBCPP_NEED_LIBIO, test \"$need_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_XTRA_LIBIO, test \"$need_xtra_libio\" = yes)\n   AM_CONDITIONAL(GLIBCPP_NEED_WLIBIO, test \"$need_wlibio\" = yes)\n@@ -1300,7 +1319,8 @@ dnl\n dnl GLIBCPP_ENABLE_THREADS\n dnl --enable-threads=posix sets config/threads-posix.h et. al.\n dnl \n-dnl default is no threads\n+dnl Default is no threads, which also disables _IO_MTSAFE_IO in\n+dnl libio.  Any actual thread package will enable it.\n dnl\n AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   dnl Note this comes from the gcc/config.in and libjava/config.in\n@@ -1318,22 +1338,22 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n \n   dnl Check if a valid thread package\n   case x${enable_threads_flag} in\n-\tx | xno | xnone)\n-\t\t# No threads\n-\t\ttarget_thread_file='single'\n-\t\t;;\n-\txyes)\n-\t\t# default\n-\t\ttarget_thread_file=''\n-\t\t;;\n-\txdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \\\n-\txsolaris | xwin32 | xdce | xvxworks)\n-\t\ttarget_thread_file=$enable_threads_flag\n-\t\t;;\n-\t*)\n-\t\techo \"$enable_threads is an unknown thread package\" 1>&2\n-\t\texit 1\n-\t\t;;\n+        x | xno | xnone)\n+                # No threads\n+                target_thread_file='single'\n+                ;;\n+        xyes)\n+                # default\n+                target_thread_file=''\n+                ;;\n+        xdecosf1 | xirix | xmach | xos2 | xposix | xpthreads | xsingle | \\\n+        xsolaris | xwin32 | xdce | xvxworks)\n+                target_thread_file=$enable_threads_flag\n+                ;;\n+        *)\n+                echo \"$enable_threads is an unknown thread package\" 1>&2\n+                exit 1\n+                ;;\n   esac\n \n   dnl Check for thread package actually supported in libstdc++ \n@@ -1355,6 +1375,9 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   AC_MSG_RESULT($THREADH)\n \n   AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n+  if test $THREADH != threads-no.h; then\n+    AC_DEFINE(_GLIBCPP_USE_THREADS)\n+  fi\n ])\n \n \n@@ -1363,16 +1386,16 @@ dnl GLIBCPP_ENABLE_ATOMICITY\n AC_DEFUN(GLIBCPP_ENABLE_ATOMICITY, [\n     AC_MSG_CHECKING([for atomicity.h])\n     case \"$target\" in\n-      *-*-linux*)\n-\tATOMICITYH=$cpu_include_dir\n-\t;;\t\n+      *-*-linux* | sparc*-*-*)\n+        ATOMICITYH=$cpu_include_dir\n+        ;;    \n       *-*-aix*)\n         ATOMICITYH=$os_include_dir\n-\t;;\n+        ;;\n       *)\n-\techo \"$enable_threads is an unknown thread package\" 1>&2\n-\texit 1\n-\t;;\n+        # bit of overkill on this text...\n+        AC_MSG_ERROR([Atomic locking requested, but $enable_threads is an unknown thread package and atomic operations are not present in the CPU])\n+        ;;\n     esac\n     AC_MSG_RESULT($ATOMICITYH/bits/atomicity.h)\n     AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, bits/atomicity.h)\n@@ -1485,11 +1508,11 @@ changequote(<<, >>)dnl\n changequote([, ])\n   [case \"$enableval\" in\n    yes) enable_cshadow_headers=yes \n-\t;;\n+        ;;\n    no)  enable_cshadow_headers=no \n-\t;;\n+        ;;\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable shadowed C headers]) \n-\t;;\n+        ;;\n   esac],\n   enable_cshadow_headers=GLIBCPP_ENABLE_SHADOW_DEFAULT)\n   AC_MSG_RESULT($enable_cshadow_headers)\n@@ -1498,13 +1521,13 @@ changequote([, ])\n   dnl NB: these things may be duplicated in c++config.h as well.\n   case \"$enable_cshadow_headers\" in\n     yes) \n-\tCSHADOW_FLAGS=\"-fno-builtin\"\n-\tC_INCLUDE_DIR='$(top_srcdir)/include/c_std'\n+        CSHADOW_FLAGS=\"-fno-builtin\"\n+        C_INCLUDE_DIR='${top_srcdir}/include/c_std'\n         AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n-\t;;\n+        ;;\n     no)   \n-\tCSHADOW_FLAGS=\"\"\n-\tC_INCLUDE_DIR='$(top_srcdir)/include/c'\n+        CSHADOW_FLAGS=\"\"\n+        C_INCLUDE_DIR='${top_srcdir}/include/c'\n         ;;\n   esac\n \n@@ -1513,6 +1536,33 @@ changequote([, ])\n   AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n ])\n \n+\n+dnl\n+dnl Check for wide character support.  Has the same effect as the option\n+dnl in gcc's configure, but in a form that autoconf can mess with.\n+dnl\n+dnl GLIBCPP_ENABLE_C_MBCHAR\n+dnl --enable-c-mbchar requests all the wchar_t stuff.\n+dnl --disable-c-mbchar doesn't.\n+dnl  +  Usage:  GLIBCPP_ENABLE_C_MBCHAR[(DEFAULT)]\n+dnl       Where DEFAULT is either `yes' or `no'.  If ommitted, it\n+dnl       defaults to `no'.\n+AC_DEFUN(GLIBCPP_ENABLE_C_MBCHAR, [dnl\n+define([GLIBCPP_ENABLE_C_MBCHAR_DEFAULT], ifelse($1, yes, yes, no))dnl\n+AC_ARG_ENABLE(c-mbchar,\n+changequote(<<, >>)dnl\n+<<  --enable-c-mbchar       enable multibyte (wide) characters [default=>>GLIBCPP_ENABLE_C_MBCHAR_DEFAULT],\n+changequote([, ])dnl\n+[case \"$enableval\" in\n+ yes) enable_c_mbchar=yes ;;\n+ no)  enable_c_mbchar=no ;;\n+ *)   AC_MSG_ERROR([Unknown argument to enable/disable c-mbchar]) ;;\n+ esac],\n+enable_c_mbchar=GLIBCPP_ENABLE_C_MBCHAR_DEFAULT)dnl\n+dnl Option parsed, now other scripts can test enable_c_mbchar for yes/no.\n+])\n+\n+\n dnl\n dnl Set up *_INCLUDES and *_INCLUDE_DIR variables for all sundry Makefile.am's.\n dnl"}, {"sha": "7d59d181932e8ced1d3f005b980803378ff17990", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -3,6 +3,9 @@\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n+// Include support for multiple threads, e.g., in the I/O package.\n+#undef _GLIBCPP_USE_THREADS\n+\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n "}, {"sha": "d14ec5c352f54a77085dfb8c0492c795e7129830", "filename": "libstdc++-v3/config/c_io_libio.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -50,7 +50,12 @@ namespace std {\n   typedef _IO_off_t  \twstreamoff;\n #endif\n \n-  typedef _IO_lock_t\t__c_lock;\n+#ifdef _GLIBCPP_USE_THREADS\n+  typedef _IO_lock_t   __c_lock;\n+#else\n+  typedef int          __c_lock;\n+#endif\n+\n \n // from basic_file.h\n #define _GLIBCPP_BASIC_FILE_INHERITANCE 1"}, {"sha": "d012d24a8f157b0a325144f7f3c26627e2feba24", "filename": "libstdc++-v3/config/os/aix/bits/os_defines.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Faix%2Fbits%2Fos_defines.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -28,5 +28,13 @@\n // the GNU General Public License.\n \n \n+#ifndef _GLIBCPP_OS_DEFINES\n+#  define _GLIBCPP_OS_DEFINES\n \n \n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+\n+#endif\n+"}, {"sha": "1cb71d149ec16ac457a29ce0085dae50698584bd", "filename": "libstdc++-v3/config/os/bsd/bits/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Fbits%2Fos_defines.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -28,5 +28,14 @@\n // the GNU General Public License.\n \n \n+#ifndef _GLIBCPP_OS_DEFINES\n+#  define _GLIBCPP_OS_DEFINES\n+\n+\n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+\n+#endif\n \n "}, {"sha": "c21e775be265f1ea11af6c8a14b8b169ddce3302", "filename": "libstdc++-v3/config/os/generic/bits/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgeneric%2Fbits%2Fos_defines.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -28,5 +28,14 @@\n // the GNU General Public License.\n \n \n+#ifndef _GLIBCPP_OS_DEFINES\n+#  define _GLIBCPP_OS_DEFINES\n+\n+\n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+\n+#endif\n \n "}, {"sha": "6147f0b67f9f87bd363032f62330bae1bb834423", "filename": "libstdc++-v3/config/os/gnu-linux/bits/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -28,5 +28,14 @@\n // the GNU General Public License.\n \n \n+#ifndef _GLIBCPP_OS_DEFINES\n+#  define _GLIBCPP_OS_DEFINES\n+\n+\n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+\n+#endif\n \n "}, {"sha": "6107c9757a0f3058be92d8708bd0a217ed3a96e4", "filename": "libstdc++-v3/config/os/irix/bits/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Firix%2Fbits%2Fos_defines.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -28,5 +28,14 @@\n // the GNU General Public License.\n \n \n+#ifndef _GLIBCPP_OS_DEFINES\n+#  define _GLIBCPP_OS_DEFINES\n+\n+\n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+\n+#endif\n \n "}, {"sha": "ba40cee3975fce557f5e3013485e85dfd9664321", "filename": "libstdc++-v3/config/os/newlib/bits/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fnewlib%2Fbits%2Fos_defines.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -28,5 +28,14 @@\n // the GNU General Public License.\n \n \n+#ifndef _GLIBCPP_OS_DEFINES\n+#  define _GLIBCPP_OS_DEFINES\n+\n+\n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+\n+#endif\n \n "}, {"sha": "61bcd200a839549ccccaa8e0ca06010f4984ba40", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -28,5 +28,14 @@\n // the GNU General Public License.\n \n \n+#ifndef _GLIBCPP_OS_DEFINES\n+#  define _GLIBCPP_OS_DEFINES\n+\n+\n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+\n+#endif\n \n "}, {"sha": "9913f738f45223eec8018c434f1e9716d26bf1c6", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/os_defines.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -28,5 +28,14 @@\n // the GNU General Public License.\n \n \n+#ifndef _GLIBCPP_OS_DEFINES\n+#  define _GLIBCPP_OS_DEFINES\n+\n+\n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+\n+#endif\n \n "}, {"sha": "1ba903d90f2d55ef56b2c97bae4d6aaec3b8297b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1202, "deletions": 1165, "changes": 2367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd"}, {"sha": "66df1bfe52e215147f2e83a267dded7089f80b9f", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -31,8 +31,9 @@ GLIBCPP_CHECK_OS\n \n AC_CACHE_SAVE\n \n-# Enable all the crazy c++ stuff.\n+# Enable all the crazy c++ stuff.  C_MBCHAR must come early.\n GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n+GLIBCPP_ENABLE_C_MBCHAR([yes])\n GLIBCPP_ENABLE_CSTDIO\n GLIBCPP_ENABLE_LONG_LONG(yes)\n GLIBCPP_ENABLE_LONG_DOUBLE(yes)\n@@ -249,6 +250,8 @@ fi\n # Sanity checking & User-visible messages.\n # Checks down here, otherwise they get scrolled off before\n # the user will notice.\n+### warnings removed; none were applicable anymore\n+\n \n # Trying to get more people to read documentation.  Possibly remove\n # check and warn all the time. There is no \"informational\" AC_MSG_"}, {"sha": "98afe0a93b25d0f96503d44ba144a8c1f3df30ed", "filename": "libstdc++-v3/libio/_G_config.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8ab21caf0746022ae967b084edfb6d7d0dfbcd/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2F_G_config.h?ref=8b8ab21caf0746022ae967b084edfb6d7d0dfbcd", "patch": "@@ -6,7 +6,9 @@\n \n #ifndef _LIBC\n # include <bits/c++config.h>\n-# define _IO_MTSAFE_IO\n+# ifdef _GLIBCPP_USE_THREADS\n+#   define _IO_MTSAFE_IO\n+# endif\n #endif\n \n /* Define types for libio in terms of the standard internal type names.  */"}]}