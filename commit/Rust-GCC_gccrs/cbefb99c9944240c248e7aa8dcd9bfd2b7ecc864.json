{"sha": "cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JlZmI5OWM5OTQ0MjQwYzI0OGU3YWE4ZGNkOWJmZDJiN2VjYzg2NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-03-11T04:52:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-03-11T04:52:42Z"}, "message": "re PR tree-optimization/15784 (fold misses binary optimization)\n\n        PR tree-optimization/15784\n        * fold-const.c (fold): Fold ~A + 1 to -A.  Fold -A - 1\n        and -1 - A to ~A.\n\n\n        * stmt.c (expand_case): Don't change index_type.  Convert minval\n        to the proper type.\n\nFrom-SVN: r96289", "tree": {"sha": "b68e8b88fbd204957fa2a685eaa6985b21264dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b68e8b88fbd204957fa2a685eaa6985b21264dfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864/comments", "author": null, "committer": null, "parents": [{"sha": "c0cbd601303809da24e1ea49b711193cba4815be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0cbd601303809da24e1ea49b711193cba4815be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0cbd601303809da24e1ea49b711193cba4815be"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "8f21dbb91063558da7ab70509665438300a6a2da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864", "patch": "@@ -1,5 +1,12 @@\n 2005-03-11  James A. Morrison  <phython@gcc.gnu.org>\n \n+        PR tree-optimization/15784\n+        * fold-const.c (fold): Fold ~A + 1 to -A.  Fold -A - 1\n+        and -1 - A to ~A.\n+\n+        * stmt.c (expand_case): Don't change index_type.  Convert minval\n+        to the proper type.\n+\n \tPR tree-optimization/20130\n \t* fold-const.c (fold): Fold x * -1 into -x.\n \n@@ -722,7 +729,7 @@\n \tRevert for now:\n \t2005-03-03  James A. Morrison  <phython@gcc.gnu.org>\n \tPR tree-optimization/15784\n-\t* fold-const.c (fold): Fold ~A + 1 to -1.  Fold -A - 1\n+\t* fold-const.c (fold): Fold ~A + 1 to -A.  Fold -A - 1\n \tand -1 - A to ~A.\n \n 2005-03-04  Ben Elliston  <bje@au.ibm.com>\n@@ -756,7 +763,7 @@\n 2005-03-03  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR tree-optimization/15784\n-\t* fold-const.c (fold): Fold ~A + 1 to -1.  Fold -A - 1\n+\t* fold-const.c (fold): Fold ~A + 1 to -A.  Fold -A - 1\n \tand -1 - A to ~A.\n \n 2005-03-03  David Edelsohn  <edelsohn@gnu.org>"}, {"sha": "3fdfb92f3b215c5fa9830e38f3bd5576389aefee", "filename": "gcc/fold-const.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864", "patch": "@@ -7198,6 +7198,11 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n \t  && reorder_operands_p (TREE_OPERAND (arg0, 0), arg1))\n \treturn fold (build2 (MINUS_EXPR, type, arg1, TREE_OPERAND (arg0, 0)));\n+      /* Convert ~A + 1 to -A.  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TREE_CODE (arg0) == BIT_NOT_EXPR\n+\t  && integer_onep (arg1))\n+\treturn fold (build1 (NEGATE_EXPR, type, TREE_OPERAND (arg0, 0)));\n \n       if (TREE_CODE (type) == COMPLEX_TYPE)\n \t{\n@@ -7636,6 +7641,16 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  && reorder_operands_p (arg0, arg1))\n \treturn fold (build2 (MINUS_EXPR, type, negate_expr (arg1),\n \t\t\t     TREE_OPERAND (arg0, 0)));\n+      /* Convert -A - 1 to ~A.  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TREE_CODE (arg0) == NEGATE_EXPR\n+\t  && integer_onep (arg1))\n+\treturn fold (build1 (BIT_NOT_EXPR, type, TREE_OPERAND (arg0, 0)));\n+\n+      /* Convert -1 - A to ~A.  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && integer_all_onesp (arg0))\n+\treturn fold (build1 (BIT_NOT_EXPR, type, arg1));\n \n       if (TREE_CODE (type) == COMPLEX_TYPE)\n \t{"}, {"sha": "9a1df90ef2247669b85868d2c3a76b06d24fb088", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=cbefb99c9944240c248e7aa8dcd9bfd2b7ecc864", "patch": "@@ -2424,7 +2424,7 @@ expand_case (tree exp)\n \t  if (compare_tree_int (minval, 0) > 0\n \t      && compare_tree_int (maxval, GET_MODE_BITSIZE (word_mode)) < 0)\n \t    {\n-\t      minval = integer_zero_node;\n+\t      minval = fold_convert (index_type, integer_zero_node);\n \t      range = maxval;\n \t    }\n \t  emit_case_bit_tests (index_type, index_expr, minval, range,\n@@ -2502,15 +2502,14 @@ expand_case (tree exp)\n \t\t\t    table_label, default_label))\n \t    {\n \t      bool ok;\n-\t      index_type = integer_type_node;\n \n \t      /* Index jumptables from zero for suitable values of\n                  minval to avoid a subtraction.  */\n \t      if (! optimize_size\n \t\t  && compare_tree_int (minval, 0) > 0\n \t\t  && compare_tree_int (minval, 3) < 0)\n \t\t{\n-\t\t  minval = integer_zero_node;\n+\t\t  minval = fold_convert (index_type, integer_zero_node);\n \t\t  range = maxval;\n \t\t}\n "}]}