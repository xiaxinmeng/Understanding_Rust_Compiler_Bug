{"sha": "8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmZDljNDViNmU4NDE5M2IyZmMxMmEyMzMyMTkxZTI4Y2RiZGQ3MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-03-20T18:49:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-03-20T18:49:10Z"}, "message": "PR c++/79640 - infinite recursion with generic lambda.\n\n\t* pt.c (tsubst_copy) [VAR_DECL]: Register the dummy instantiation\n\tbefore substituting its initializer.\n\nFrom-SVN: r246289", "tree": {"sha": "5c2706753e33aa0373e9e7fb94bbf729b43745af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2706753e33aa0373e9e7fb94bbf729b43745af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afd9c45b6e84193b2fc12a2332191e28cdbdd70/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f5af26dacc26944d1a9db6e937afc6909d18e48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5af26dacc26944d1a9db6e937afc6909d18e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5af26dacc26944d1a9db6e937afc6909d18e48"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "2797f8c71574df382b3b77a905ebe3bedda927e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afd9c45b6e84193b2fc12a2332191e28cdbdd70/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afd9c45b6e84193b2fc12a2332191e28cdbdd70/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "patch": "@@ -1,3 +1,9 @@\n+2017-03-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/79640 - infinite recursion with generic lambda.\n+\t* pt.c (tsubst_copy) [VAR_DECL]: Register the dummy instantiation\n+\tbefore substituting its initializer.\n+\n 2017-03-20  Marek Polacek  <polacek@redhat.com>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "f18071068154a8af5f311782a8a4edfd26e1fa0c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afd9c45b6e84193b2fc12a2332191e28cdbdd70/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afd9c45b6e84193b2fc12a2332191e28cdbdd70/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "patch": "@@ -14581,6 +14581,9 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t     local static or constant.  Building a new VAR_DECL\n \t\t     should be OK in all those cases.  */\n \t\t  r = tsubst_decl (t, args, complain);\n+\t\t  if (local_specializations)\n+\t\t    /* Avoid infinite recursion (79640).  */\n+\t\t    register_local_specialization (r, t);\n \t\t  if (decl_maybe_constant_var_p (r))\n \t\t    {\n \t\t      /* We can't call cp_finish_decl, so handle the"}, {"sha": "9c9dbac70ad8e92cd4fecc0fc5e9b16b2d1fb602", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-const3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afd9c45b6e84193b2fc12a2332191e28cdbdd70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afd9c45b6e84193b2fc12a2332191e28cdbdd70/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-const3.C?ref=8afd9c45b6e84193b2fc12a2332191e28cdbdd70", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/79640\n+// { dg-do compile { target c++14 } }\n+\n+template<typename F> void foo(F f)\n+{\n+  f(1);\n+}\n+\n+template<int> void bar()\n+{\n+  const int i = i;\n+  foo([] (auto) { sizeof(i); });\n+}\n+\n+void baz() { bar<1>(); }"}]}