{"sha": "b36a8cc273592c1c2083aa8d00d9928c4556b701", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM2YThjYzI3MzU5MmMxYzIwODNhYThkMDBkOTkyOGM0NTU2YjcwMQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-03-17T16:23:50Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2003-03-17T16:23:50Z"}, "message": "function.c (assign_parms): For a struct value address passed as first argument...\n\n\t* function.c (assign_parms): For a struct value address passed as\n\tfirst argument, delay the function's result RTL setup code until\n\tafter the emission of parameter conversions.\n\nFrom-SVN: r64493", "tree": {"sha": "d39dd381ff2965bfa9f220ab49dc97fcb9454267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d39dd381ff2965bfa9f220ab49dc97fcb9454267"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b36a8cc273592c1c2083aa8d00d9928c4556b701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36a8cc273592c1c2083aa8d00d9928c4556b701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b36a8cc273592c1c2083aa8d00d9928c4556b701", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36a8cc273592c1c2083aa8d00d9928c4556b701/comments", "author": null, "committer": null, "parents": [{"sha": "3897ea90dfc69feb6bbd30214ebdb7e0070a48dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3897ea90dfc69feb6bbd30214ebdb7e0070a48dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3897ea90dfc69feb6bbd30214ebdb7e0070a48dd"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "905cb24b32f487f9855b9a8e6b0c455649534e38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36a8cc273592c1c2083aa8d00d9928c4556b701/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36a8cc273592c1c2083aa8d00d9928c4556b701/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b36a8cc273592c1c2083aa8d00d9928c4556b701", "patch": "@@ -1,3 +1,9 @@\n+2003-03-17  Olivier Hainque  <hainque@act-europe.fr>\n+\n+\t* function.c (assign_parms): For a struct value address passed as\n+\tfirst argument, delay the function's result RTL setup code until\n+\tafter the emission of parameter conversions.\n+\t\n 2003-03-17  Dave Love  <fx@gnu.org>\n \t    Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n "}, {"sha": "0828969e5721cbd35bfeee0aa80ec97d410fc274", "filename": "gcc/function.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36a8cc273592c1c2083aa8d00d9928c4556b701/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36a8cc273592c1c2083aa8d00d9928c4556b701/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b36a8cc273592c1c2083aa8d00d9928c4556b701", "patch": "@@ -5009,30 +5009,32 @@ assign_parms (fndecl)\n \n \t  SET_DECL_RTL (parm, stack_parm);\n \t}\n-\n-      /* If this \"parameter\" was the place where we are receiving the\n-\t function's incoming structure pointer, set up the result.  */\n-      if (parm == function_result_decl)\n-\t{\n-\t  tree result = DECL_RESULT (fndecl);\n-\t  rtx addr = DECL_RTL (parm);\n-\t  rtx x;\n-\n-#ifdef POINTERS_EXTEND_UNSIGNED\n-\t  if (GET_MODE (addr) != Pmode)\n-\t    addr = convert_memory_address (Pmode, addr);\n-#endif\n-\n-\t  x = gen_rtx_MEM (DECL_MODE (result), addr);\n-\t  set_mem_attributes (x, result, 1);\n-\t  SET_DECL_RTL (result, x);\n-\t}\n     }\n \n   /* Output all parameter conversion instructions (possibly including calls)\n      now that all parameters have been copied out of hard registers.  */\n   emit_insn (conversion_insns);\n \n+  /* If we are receiving a struct value address as the first argument, set up\n+     the RTL for the function result. As this might require code to convert\n+     the transmitted address to Pmode, we do this here to ensure that possible\n+     preliminary conversions of the address have been emitted already.  */\n+  if (function_result_decl)\n+    {\n+      tree result = DECL_RESULT (fndecl);\n+      rtx addr = DECL_RTL (function_result_decl);\n+      rtx x;\n+      \n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      if (GET_MODE (addr) != Pmode)\n+\taddr = convert_memory_address (Pmode, addr);\n+#endif\n+      \n+      x = gen_rtx_MEM (DECL_MODE (result), addr);\n+      set_mem_attributes (x, result, 1);\n+      SET_DECL_RTL (result, x);\n+    }\n+\n   last_parm_insn = get_last_insn ();\n \n   current_function_args_size = stack_args_size.constant;"}]}