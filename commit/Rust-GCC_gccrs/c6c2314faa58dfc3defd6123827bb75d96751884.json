{"sha": "c6c2314faa58dfc3defd6123827bb75d96751884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZjMjMxNGZhYTU4ZGZjM2RlZmQ2MTIzODI3YmI3NWQ5Njc1MTg4NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-03-20T23:47:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-03-20T23:47:23Z"}, "message": "* expr.c (expand_expr_real_1): Remove outdated comment.\n\nFrom-SVN: r208740", "tree": {"sha": "20233a798b9d575eb786c8c0056dbf50e7b48b66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20233a798b9d575eb786c8c0056dbf50e7b48b66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6c2314faa58dfc3defd6123827bb75d96751884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c2314faa58dfc3defd6123827bb75d96751884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c2314faa58dfc3defd6123827bb75d96751884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c2314faa58dfc3defd6123827bb75d96751884/comments", "author": null, "committer": null, "parents": [{"sha": "7b8fda082f1729a6e7f15f3f10cb5396feb0d2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8fda082f1729a6e7f15f3f10cb5396feb0d2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8fda082f1729a6e7f15f3f10cb5396feb0d2b9"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "dc03b1d6058d282dfe29911821ef06512b85ace3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c2314faa58dfc3defd6123827bb75d96751884/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c2314faa58dfc3defd6123827bb75d96751884/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6c2314faa58dfc3defd6123827bb75d96751884", "patch": "@@ -1,3 +1,7 @@\n+2014-03-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (expand_expr_real_1): Remove outdated comment.\n+\n 2014-03-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/60597"}, {"sha": "cdb45518d2752ad16c80d0b207a94ff9fdd43ef1", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6c2314faa58dfc3defd6123827bb75d96751884/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6c2314faa58dfc3defd6123827bb75d96751884/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c6c2314faa58dfc3defd6123827bb75d96751884", "patch": "@@ -1993,7 +1993,6 @@ emit_group_store (rtx orig_dst, rtx src, tree type ATTRIBUTE_UNUSED, int ssize)\n       /* It is unclear if we can ever reach here, but we may as well handle\n \t it.  Allocate a temporary, and split this into a store/load to/from\n \t the temporary.  */\n-\n       temp = assign_stack_temp (GET_MODE (dst), ssize);\n       emit_group_store (temp, src, type, ssize);\n       emit_group_load (dst, temp, type, ssize);\n@@ -10242,19 +10241,13 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \n \t    /* If the result type is BLKmode, store the data into a temporary\n \t       of the appropriate type, but with the mode corresponding to the\n-\t       mode for the data we have (op0's mode).  It's tempting to make\n-\t       this a constant type, since we know it's only being stored once,\n-\t       but that can cause problems if we are taking the address of this\n-\t       COMPONENT_REF because the MEM of any reference via that address\n-\t       will have flags corresponding to the type, which will not\n-\t       necessarily be constant.  */\n+\t       mode for the data we have (op0's mode).  */\n \t    if (mode == BLKmode)\n \t      {\n-\t\trtx new_rtx;\n-\n-\t\tnew_rtx = assign_stack_temp_for_type (ext_mode,\n-\t\t\t\t\t\t   GET_MODE_BITSIZE (ext_mode),\n-\t\t\t\t\t\t   type);\n+\t\trtx new_rtx\n+\t\t  = assign_stack_temp_for_type (ext_mode,\n+\t\t\t\t\t\tGET_MODE_BITSIZE (ext_mode),\n+\t\t\t\t\t\ttype);\n \t\temit_move_insn (new_rtx, op0);\n \t\top0 = copy_rtx (new_rtx);\n \t\tPUT_MODE (op0, BLKmode);"}]}