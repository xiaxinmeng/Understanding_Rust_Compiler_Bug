{"sha": "b3d4e1b2a12a6a808ba480b063d5036b3ffe7379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkNGUxYjJhMTJhNmE4MDhiYTQ4MGIwNjNkNTAzNmIzZmZlNzM3OQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-17T04:24:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-17T04:24:33Z"}, "message": "(expand_shift, expand_set_flag):\n\nCall protect_from_queue before convert_to_mode.\n\nFrom-SVN: r1606", "tree": {"sha": "4b0a882c0e730cf7f856bb37ee2b48d56ba80511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b0a882c0e730cf7f856bb37ee2b48d56ba80511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3d4e1b2a12a6a808ba480b063d5036b3ffe7379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d4e1b2a12a6a808ba480b063d5036b3ffe7379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d4e1b2a12a6a808ba480b063d5036b3ffe7379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d4e1b2a12a6a808ba480b063d5036b3ffe7379/comments", "author": null, "committer": null, "parents": [{"sha": "06e40b261a3949c40ae98fe08fb68ea1d6903e63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06e40b261a3949c40ae98fe08fb68ea1d6903e63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06e40b261a3949c40ae98fe08fb68ea1d6903e63"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "94878d16b5d772f0f849e40b5770725829c6ccce", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3d4e1b2a12a6a808ba480b063d5036b3ffe7379/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3d4e1b2a12a6a808ba480b063d5036b3ffe7379/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b3d4e1b2a12a6a808ba480b063d5036b3ffe7379", "patch": "@@ -763,7 +763,6 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n \n   if (tmode == VOIDmode)\n     tmode = mode;\n-\n   while (GET_CODE (op0) == SUBREG)\n     {\n       offset += SUBREG_WORD (op0);\n@@ -1581,8 +1580,9 @@ expand_shift (code, mode, shifted, amount, target, unsignedp)\n \t      || (methods == OPTAB_WIDEN\n \t\t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (output_mode)))\n \t    {\n-\t      /* Note convert_to_mode does protect_from_queue.  */\n-\t      rtx shifted1 = convert_to_mode (output_mode, shifted, 1);\n+\t      rtx shifted1 = convert_to_mode (output_mode,\n+\t\t\t\t\t      protect_from_queue (shifted, 0),\n+\t\t\t\t\t      1);\n \t      enum machine_mode length_mode\n \t\t= insn_operand_mode[(int) CODE_FOR_extzv][2];\n \t      enum machine_mode pos_mode\n@@ -1610,6 +1610,7 @@ expand_shift (code, mode, shifted, amount, target, unsignedp)\n \t\t\t(target1, output_mode)))\n \t\ttarget1 = gen_reg_rtx (output_mode);\n \n+\t      xop1 = protect_from_queue (xop1, 0);\n \t      xop1 = convert_to_mode (pos_mode, xop1,\n \t\t\t\t      TREE_UNSIGNED (TREE_TYPE (amount)));\n \n@@ -1626,6 +1627,7 @@ expand_shift (code, mode, shifted, amount, target, unsignedp)\n \t      else\n \t\t{\n \t\t  /* Now get the width in the proper mode.  */\n+\t\t  op1 = protect_from_queue (op1, 0);\n \t\t  width = convert_to_mode (length_mode, op1,\n \t\t\t\t\t   TREE_UNSIGNED (TREE_TYPE (amount)));\n \n@@ -2709,6 +2711,7 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \t first.  */\n       if (GET_MODE_SIZE (target_mode) > GET_MODE_SIZE (mode))\n \t{\n+\t  op0 = protect_from_queue (op0, 0);\n \t  op0 = convert_to_mode (target_mode, op0, 0);\n \t  mode = target_mode;\n \t}\n@@ -2943,6 +2946,7 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n       else if (GET_MODE_SIZE (mode) < UNITS_PER_WORD)\n \t{\n \t  mode = word_mode;\n+\t  op0 = protect_from_queue (op0, 0);\n \t  tem = convert_to_mode (mode, op0, 1);\n \t}\n "}]}