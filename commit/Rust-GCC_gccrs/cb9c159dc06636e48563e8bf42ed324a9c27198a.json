{"sha": "cb9c159dc06636e48563e8bf42ed324a9c27198a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5YzE1OWRjMDY2MzZlNDg1NjNlOGJmNDJlZDMyNGE5YzI3MTk4YQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-04-08T13:14:39Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2007-04-08T13:14:39Z"}, "message": "langhooks.c (lhd_tree_inlining_add_pending_fn_decls, [...]): Remove.\n\n\t* langhooks.c (lhd_tree_inlining_add_pending_fn_decls,\n\tlhd_tree_inlining_anon_aggr_type_p, lhd_tree_inlining_start_inlining,\n\tlhd_tree_inlining_end_inlining): Remove.\n\t* langhooks.h (struct lang_hooks_for_tree_inlining): Remove then\n\tadd_pending_fn_decls, anon_aggr_type_p, start_inlining, and\n\tend_inlining hooks.\n\t* langhooks-def.h (lhd_tree_inlining_add_pending_fn_decls,\n\tlhd_tree_inlining_anon_aggr_type_p, lhd_tree_inlining_start_inlining,\n\tlhd_tree_inlining_end_inlining): Remove prototypes.\n\t(LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS,\n\tLANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P,\n\tLANG_HOOKS_TREE_INLINING_START_INLINING,\n\tLANG_HOOKS_TREE_INLINING_END_INLINING): Remove.\n\n\t* c-objc-common.h (LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P): Do\n\tnot set it.\n\ncp/\n\t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS):\n\tDo not set it.\n\t(LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P): Do not set it.\n\t* tree.c (cp_add_pending_fn_decls): Remove.\n\t* cp-tree.h (cp_add_pending_fn_decls): Remove prototype.\n\nFrom-SVN: r123658", "tree": {"sha": "3131cbc57239573b2da8bd670e8d0495b8a896a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3131cbc57239573b2da8bd670e8d0495b8a896a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb9c159dc06636e48563e8bf42ed324a9c27198a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9c159dc06636e48563e8bf42ed324a9c27198a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb9c159dc06636e48563e8bf42ed324a9c27198a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9c159dc06636e48563e8bf42ed324a9c27198a/comments", "author": null, "committer": null, "parents": [{"sha": "d8a1f0fb6410959cdba82bfc82e0d37bf102fe98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a1f0fb6410959cdba82bfc82e0d37bf102fe98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a1f0fb6410959cdba82bfc82e0d37bf102fe98"}], "stats": {"total": 118, "additions": 27, "deletions": 91}, "files": [{"sha": "ac16f435283e3e521d7fe70ae94c3af5256d3671", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -1,3 +1,22 @@\n+2007-04-08  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* langhooks.c (lhd_tree_inlining_add_pending_fn_decls,\n+\tlhd_tree_inlining_anon_aggr_type_p, lhd_tree_inlining_start_inlining,\n+\tlhd_tree_inlining_end_inlining): Remove.\n+\t* langhooks.h (struct lang_hooks_for_tree_inlining): Remove then\n+\tadd_pending_fn_decls, anon_aggr_type_p, start_inlining, and\n+\tend_inlining hooks.\n+\t* langhooks-def.h (lhd_tree_inlining_add_pending_fn_decls,\n+\tlhd_tree_inlining_anon_aggr_type_p, lhd_tree_inlining_start_inlining,\n+\tlhd_tree_inlining_end_inlining): Remove prototypes.\n+\t(LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS,\n+\tLANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P,\n+\tLANG_HOOKS_TREE_INLINING_START_INLINING,\n+\tLANG_HOOKS_TREE_INLINING_END_INLINING): Remove.\n+\n+\t* c-objc-common.h (LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P): Do\n+\tnot set it.\n+\n 2007-04-08  Anatoly Sokolov <aesok@post.ru>\n \n \tPR target/29932"}, {"sha": "78438ad9ef8bc8c5ea0622e60349afebcda8edd2", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -89,9 +89,6 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #undef LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS\n #define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n   c_disregard_inline_limits\n-#undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n-#define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n-  anon_aggr_type_p\n #undef LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING\n #define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n   c_convert_parm_for_inlining"}, {"sha": "2dd5fe4613881c5b1ccaeff46c79cc8e7e44033d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -1,3 +1,11 @@\n+2007-04-08  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* cp-objcp-common.h (LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS):\n+\tDo not set it.\n+\t(LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P): Do not set it.\n+\t* tree.c (cp_add_pending_fn_decls): Remove.\n+\t* cp-tree.h (cp_add_pending_fn_decls): Remove prototype.\n+\n 2007-04-07  Daniel Berlin  <dberlin@dberlin.org>\n \n \tRevert change removing staticp."}, {"sha": "2c0dd838e8ec485269a4a5e4193adb695e7400d8", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -111,14 +111,9 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n #define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n   cp_cannot_inline_tree_fn\n-#undef LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS\n-#define LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS \\\n-  cp_add_pending_fn_decls\n #undef LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P\n #define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n   cp_auto_var_in_fn_p\n-#undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n-#define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P anon_aggr_type_p\n #undef LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P cp_var_mod_type_p\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN"}, {"sha": "68d8f5ad88970f3bf670d0afdb7d5818ceeaa083", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -4686,7 +4686,6 @@ extern linkage_kind decl_linkage\t\t(tree);\n extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n \t\t\t      void*, struct pointer_set_t*);\n extern int cp_cannot_inline_tree_fn\t\t(tree*);\n-extern tree cp_add_pending_fn_decls\t\t(void*,tree);\n extern int cp_auto_var_in_fn_p\t\t\t(tree,tree);\n extern tree fold_if_not_in_template\t\t(tree);\n extern tree rvalue\t\t\t\t(tree);"}, {"sha": "30aa359219fccee6ef63a933460417a87b0c003d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -2362,26 +2362,6 @@ cp_cannot_inline_tree_fn (tree* fnp)\n   return 0;\n }\n \n-/* Add any pending functions other than the current function (already\n-   handled by the caller), that thus cannot be inlined, to FNS_P, then\n-   return the latest function added to the array, PREV_FN.  */\n-\n-tree\n-cp_add_pending_fn_decls (void* fns_p, tree prev_fn)\n-{\n-  varray_type *fnsp = (varray_type *)fns_p;\n-  struct saved_scope *s;\n-\n-  for (s = scope_chain; s; s = s->prev)\n-    if (s->function_decl && s->function_decl != prev_fn)\n-      {\n-\tVARRAY_PUSH_TREE (*fnsp, s->function_decl);\n-\tprev_fn = s->function_decl;\n-      }\n-\n-  return prev_fn;\n-}\n-\n /* Determine whether VAR is a declaration of an automatic variable in\n    function FN.  */\n "}, {"sha": "d6d6b33b9ffec983bb8600dd10755f5b499d52f3", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -76,11 +76,7 @@ extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n \t\t\t\t\t     void *, struct pointer_set_t*);\n extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);\n extern int lhd_tree_inlining_disregard_inline_limits (tree);\n-extern tree lhd_tree_inlining_add_pending_fn_decls (void *, tree);\n extern int lhd_tree_inlining_auto_var_in_fn_p (tree, tree);\n-extern int lhd_tree_inlining_anon_aggr_type_p (tree);\n-extern int lhd_tree_inlining_start_inlining (tree);\n-extern void lhd_tree_inlining_end_inlining (tree);\n extern tree lhd_tree_inlining_convert_parm_for_inlining (tree, tree, tree, int);\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n@@ -150,31 +146,19 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n   lhd_tree_inlining_cannot_inline_tree_fn\n #define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n   lhd_tree_inlining_disregard_inline_limits\n-#define LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS \\\n-  lhd_tree_inlining_add_pending_fn_decls\n #define LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P \\\n   lhd_tree_inlining_auto_var_in_fn_p\n-#define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n-  lhd_tree_inlining_anon_aggr_type_p\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P \\\n   hook_bool_tree_tree_false\n-#define LANG_HOOKS_TREE_INLINING_START_INLINING \\\n-  lhd_tree_inlining_start_inlining\n-#define LANG_HOOKS_TREE_INLINING_END_INLINING \\\n-  lhd_tree_inlining_end_inlining\n #define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n   lhd_tree_inlining_convert_parm_for_inlining\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n   LANG_HOOKS_TREE_INLINING_WALK_SUBTREES, \\\n   LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN, \\\n   LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS, \\\n-  LANG_HOOKS_TREE_INLINING_ADD_PENDING_FN_DECLS, \\\n   LANG_HOOKS_TREE_INLINING_AUTO_VAR_IN_FN_P, \\\n-  LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P, \\\n   LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P, \\\n-  LANG_HOOKS_TREE_INLINING_START_INLINING, \\\n-  LANG_HOOKS_TREE_INLINING_END_INLINING, \\\n   LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n }\n "}, {"sha": "ebd20b9ee723cfb174285994b0771f029e1351c0", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -318,19 +318,6 @@ lhd_tree_inlining_disregard_inline_limits (tree fn)\n   return 0;\n }\n \n-/* lang_hooks.tree_inlining.add_pending_fn_decls is called before\n-   starting to inline a function, to push any language-specific\n-   functions that should not be inlined into the current function,\n-   into VAFNP.  PFN is the top of varray, and should be returned if no\n-   functions are pushed into VAFNP.  The top of the varray should be\n-   returned.  */\n-\n-tree\n-lhd_tree_inlining_add_pending_fn_decls (void *vafnp ATTRIBUTE_UNUSED, tree pfn)\n-{\n-  return pfn;\n-}\n-\n /* lang_hooks.tree_inlining.auto_var_in_fn_p is called to determine\n    whether VT is an automatic variable defined in function FT.  */\n \n@@ -344,35 +331,6 @@ lhd_tree_inlining_auto_var_in_fn_p (tree var, tree fn)\n \t      || TREE_CODE (var) == RESULT_DECL));\n }\n \n-/* lang_hooks.tree_inlining.anon_aggr_type_p determines whether T is a\n-   type node representing an anonymous aggregate (union, struct, etc),\n-   i.e., one whose members are in the same scope as the union itself.  */\n-\n-int\n-lhd_tree_inlining_anon_aggr_type_p (tree t ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}\n-\n-/* lang_hooks.tree_inlining.start_inlining and end_inlining perform any\n-   language-specific bookkeeping necessary for processing\n-   FN. start_inlining returns nonzero if inlining should proceed, zero if\n-   not.\n-\n-   For instance, the C++ version keeps track of template instantiations to\n-   avoid infinite recursion.  */\n-\n-int\n-lhd_tree_inlining_start_inlining (tree fn ATTRIBUTE_UNUSED)\n-{\n-  return 1;\n-}\n-\n-void\n-lhd_tree_inlining_end_inlining (tree fn ATTRIBUTE_UNUSED)\n-{\n-}\n-\n /* lang_hooks.tree_inlining.convert_parm_for_inlining performs any\n    language-specific conversion before assigning VALUE to PARM.  */\n "}, {"sha": "39066959a1caa72505311e0a068c7913e1ca966a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb9c159dc06636e48563e8bf42ed324a9c27198a/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=cb9c159dc06636e48563e8bf42ed324a9c27198a", "patch": "@@ -40,12 +40,8 @@ struct lang_hooks_for_tree_inlining\n \t\t\t void *, struct pointer_set_t*);\n   int (*cannot_inline_tree_fn) (tree *);\n   int (*disregard_inline_limits) (tree);\n-  tree (*add_pending_fn_decls) (void *, tree);\n   int (*auto_var_in_fn_p) (tree, tree);\n-  int (*anon_aggr_type_p) (tree);\n   bool (*var_mod_type_p) (tree, tree);\n-  int (*start_inlining) (tree);\n-  void (*end_inlining) (tree);\n   tree (*convert_parm_for_inlining) (tree, tree, tree, int);\n };\n "}]}