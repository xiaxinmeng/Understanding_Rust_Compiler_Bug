{"sha": "dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM5MzZmYjIzNmY5ZTg1Yjg4YThmNTllMmQzM2FmMmI3NmI3ODZmNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-11-19T16:50:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-11-19T16:50:04Z"}, "message": "Eliminate n_edges macro\n\n\t* basic-block.h (n_edges_for_function): Rename macro to...\n\t(n_edges_for_fn): ...this.\n\t(n_edges): Eliminate macro as work towards making uses of\n\tcfun be explicit.\n\n\t* cfg.c (init_flow): Update for renaming of \"n_edges_for_function\"\n\tto \"n_edges_for_fn\".\n\n\t* cfg.c (unchecked_make_edge): Remove usage of n_edges macro.\n\t(clear_edges): Likewise.\n\t(free_edge): Likewise.\n\t* cfghooks.c (dump_flow_info): Likewise.\n\t* cprop.c (is_too_expensive): Likewise.\n\t* df-core.c (df_worklist_dataflow_doublequeue): Likewise.\n\t* gcse.c (is_too_expensive): Likewise.\n\t(prune_insertions_deletions): Likewise.\n\t* mcf.c (create_fixup_graph): Likewise.\n\t* sched-rgn.c (haifa_find_rgns): Likewise.\n\t* tree-cfg.c (gimple_dump_cfg): Likewise.\n\t* var-tracking.c (variable_tracking_main_1): Likewise.\n\nFrom-SVN: r205044", "tree": {"sha": "0e4b37c013785f1d15280b4b88f14b5e0e90663e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e4b37c013785f1d15280b4b88f14b5e0e90663e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0f396bc05ef40940f4f158209df176e6c120b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f396bc05ef40940f4f158209df176e6c120b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f396bc05ef40940f4f158209df176e6c120b1c"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "91000ce7cd033ed0f51af8032be17956bb048605", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -1,3 +1,26 @@\n+2013-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (n_edges_for_function): Rename macro to...\n+\t(n_edges_for_fn): ...this.\n+\t(n_edges): Eliminate macro as work towards making uses of\n+\tcfun be explicit.\n+\n+\t* cfg.c (init_flow): Update for renaming of \"n_edges_for_function\"\n+\tto \"n_edges_for_fn\".\n+\n+\t* cfg.c (unchecked_make_edge): Remove usage of n_edges macro.\n+\t(clear_edges): Likewise.\n+\t(free_edge): Likewise.\n+\t* cfghooks.c (dump_flow_info): Likewise.\n+\t* cprop.c (is_too_expensive): Likewise.\n+\t* df-core.c (df_worklist_dataflow_doublequeue): Likewise.\n+\t* gcse.c (is_too_expensive): Likewise.\n+\t(prune_insertions_deletions): Likewise.\n+\t* mcf.c (create_fixup_graph): Likewise.\n+\t* sched-rgn.c (haifa_find_rgns): Likewise.\n+\t* tree-cfg.c (gimple_dump_cfg): Likewise.\n+\t* var-tracking.c (variable_tracking_main_1): Likewise.\n+\n 2013-11-19  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_save_or_restore_fprs): Fix over"}, {"sha": "38391beffb388ddda49a46dec2a3923f4a72d5e7", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -316,7 +316,7 @@ struct GTY(()) control_flow_graph {\n #define EXIT_BLOCK_PTR_FOR_FUNCTION(FN)\t     ((FN)->cfg->x_exit_block_ptr)\n #define basic_block_info_for_function(FN)    ((FN)->cfg->x_basic_block_info)\n #define n_basic_blocks_for_fn(FN)\t     ((FN)->cfg->x_n_basic_blocks)\n-#define n_edges_for_function(FN)\t     ((FN)->cfg->x_n_edges)\n+#define n_edges_for_fn(FN)\t\t     ((FN)->cfg->x_n_edges)\n #define last_basic_block_for_function(FN)    ((FN)->cfg->x_last_basic_block)\n #define label_to_block_map_for_function(FN)  ((FN)->cfg->x_label_to_block_map)\n #define profile_status_for_function(FN)\t     ((FN)->cfg->x_profile_status)\n@@ -330,7 +330,6 @@ struct GTY(()) control_flow_graph {\n #define ENTRY_BLOCK_PTR\t\t(cfun->cfg->x_entry_block_ptr)\n #define EXIT_BLOCK_PTR\t\t(cfun->cfg->x_exit_block_ptr)\n #define basic_block_info\t(cfun->cfg->x_basic_block_info)\n-#define n_edges\t\t\t(cfun->cfg->x_n_edges)\n #define last_basic_block\t(cfun->cfg->x_last_basic_block)\n #define label_to_block_map\t(cfun->cfg->x_label_to_block_map)\n #define profile_status\t\t(cfun->cfg->x_profile_status)"}, {"sha": "166ad38c4969208d8a221c1bfd0a28a7c9570def", "filename": "gcc/cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -69,7 +69,7 @@ init_flow (struct function *the_fun)\n {\n   if (!the_fun->cfg)\n     the_fun->cfg = ggc_alloc_cleared_control_flow_graph ();\n-  n_edges_for_function (the_fun) = 0;\n+  n_edges_for_fn (the_fun) = 0;\n   ENTRY_BLOCK_PTR_FOR_FUNCTION (the_fun)\n     = ggc_alloc_cleared_basic_block_def ();\n   ENTRY_BLOCK_PTR_FOR_FUNCTION (the_fun)->index = ENTRY_BLOCK;\n@@ -88,7 +88,7 @@ init_flow (struct function *the_fun)\n static void\n free_edge (edge e)\n {\n-  n_edges--;\n+  n_edges_for_fn (cfun)--;\n   ggc_free (e);\n }\n \n@@ -114,7 +114,7 @@ clear_edges (void)\n   vec_safe_truncate (EXIT_BLOCK_PTR->preds, 0);\n   vec_safe_truncate (ENTRY_BLOCK_PTR->succs, 0);\n \n-  gcc_assert (!n_edges);\n+  gcc_assert (!n_edges_for_fn (cfun));\n }\n \f\n /* Allocate memory for basic_block.  */\n@@ -262,7 +262,7 @@ unchecked_make_edge (basic_block src, basic_block dst, int flags)\n {\n   edge e;\n   e = ggc_alloc_cleared_edge_def ();\n-  n_edges++;\n+  n_edges_for_fn (cfun)++;\n \n   e->src = src;\n   e->dest = dst;"}, {"sha": "20b90bfebf3e993efdfbe1eb61cb90ee345ec85d", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -324,7 +324,7 @@ dump_flow_info (FILE *file, int flags)\n   basic_block bb;\n \n   fprintf (file, \"\\n%d basic blocks, %d edges.\\n\", n_basic_blocks_for_fn (cfun),\n-\t   n_edges);\n+\t   n_edges_for_fn (cfun));\n   FOR_ALL_BB (bb)\n     dump_bb (file, bb, 0, flags);\n "}, {"sha": "35a44f28a19b3503b799d53ad457523d45b3ed3e", "filename": "gcc/cprop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -1729,12 +1729,12 @@ is_too_expensive (const char *pass)\n      which have a couple switch statements.  Rather than simply\n      threshold the number of blocks, uses something with a more\n      graceful degradation.  */\n-  if (n_edges > 20000 + n_basic_blocks_for_fn (cfun) * 4)\n+  if (n_edges_for_fn (cfun) > 20000 + n_basic_blocks_for_fn (cfun) * 4)\n     {\n       warning (OPT_Wdisabled_optimization,\n \t       \"%s: %d basic blocks and %d edges/basic block\",\n \t       pass, n_basic_blocks_for_fn (cfun),\n-\t       n_edges / n_basic_blocks_for_fn (cfun));\n+\t       n_edges_for_fn (cfun) / n_basic_blocks_for_fn (cfun));\n \n       return true;\n     }"}, {"sha": "37876af7b016b65178cbe1c917635e6e00ffe1eb", "filename": "gcc/df-core.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -1097,7 +1097,7 @@ df_worklist_dataflow_doublequeue (struct dataflow *dataflow,\n     fprintf (dump_file, \"df_worklist_dataflow_doublequeue:\"\n \t     \"n_basic_blocks %d n_edges %d\"\n \t     \" count %d (%5.2g)\\n\",\n-\t     n_basic_blocks_for_fn (cfun), n_edges,\n+\t     n_basic_blocks_for_fn (cfun), n_edges_for_fn (cfun),\n \t     dcount, dcount / (float)n_basic_blocks_for_fn (cfun));\n }\n "}, {"sha": "a37ac6bc1f8d4a12c8c59d77509838d4e8a0bad1", "filename": "gcc/gcse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -1964,7 +1964,7 @@ prune_insertions_deletions (int n_elems)\n \n   /* Iterate over the edges counting the number of times each expression\n      needs to be inserted.  */\n-  for (i = 0; i < (unsigned) n_edges; i++)\n+  for (i = 0; i < (unsigned) n_edges_for_fn (cfun); i++)\n     {\n       EXECUTE_IF_SET_IN_BITMAP (pre_insert_map[i], 0, j, sbi)\n \tinsertions[j]++;\n@@ -1990,7 +1990,7 @@ prune_insertions_deletions (int n_elems)\n   /* Now prune PRE_INSERT_MAP and PRE_DELETE_MAP based on PRUNE_EXPRS.  */\n   EXECUTE_IF_SET_IN_BITMAP (prune_exprs, 0, j, sbi)\n     {\n-      for (i = 0; i < (unsigned) n_edges; i++)\n+      for (i = 0; i < (unsigned) n_edges_for_fn (cfun); i++)\n \tbitmap_clear_bit (pre_insert_map[i], j);\n \n       for (i = 0; i < (unsigned) last_basic_block; i++)\n@@ -4069,12 +4069,12 @@ is_too_expensive (const char *pass)\n      which have a couple switch statements.  Rather than simply\n      threshold the number of blocks, uses something with a more\n      graceful degradation.  */\n-  if (n_edges > 20000 + n_basic_blocks_for_fn (cfun) * 4)\n+  if (n_edges_for_fn (cfun) > 20000 + n_basic_blocks_for_fn (cfun) * 4)\n     {\n       warning (OPT_Wdisabled_optimization,\n \t       \"%s: %d basic blocks and %d edges/basic block\",\n \t       pass, n_basic_blocks_for_fn (cfun),\n-\t       n_edges / n_basic_blocks_for_fn (cfun));\n+\t       n_edges_for_fn (cfun) / n_basic_blocks_for_fn (cfun));\n \n       return true;\n     }"}, {"sha": "45adda3afc047fc79bade8970081010361a2dd42", "filename": "gcc/mcf.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fmcf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fmcf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmcf.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -472,11 +472,13 @@ create_fixup_graph (fixup_graph_type *fixup_graph)\n \n   /* Each basic_block will be split into 2 during vertex transformation.  */\n   int fnum_vertices_after_transform =  2 * n_basic_blocks_for_fn (cfun);\n-  int fnum_edges_after_transform = n_edges + n_basic_blocks_for_fn (cfun);\n+  int fnum_edges_after_transform =\n+    n_edges_for_fn (cfun) + n_basic_blocks_for_fn (cfun);\n \n   /* Count the new SOURCE and EXIT vertices to be added.  */\n   int fmax_num_vertices =\n-    fnum_vertices_after_transform + n_edges + n_basic_blocks_for_fn (cfun) + 2;\n+    (fnum_vertices_after_transform + n_edges_for_fn (cfun)\n+     + n_basic_blocks_for_fn (cfun) + 2);\n \n   /* In create_fixup_graph: Each basic block and edge can be split into 3\n      edges. Number of balance edges = n_basic_blocks. So after\n@@ -486,7 +488,8 @@ create_fixup_graph (fixup_graph_type *fixup_graph)\n      max_edges = 2 * (4 * n_basic_blocks + 3 * n_edges)\n      = 8 * n_basic_blocks + 6 * n_edges\n      < 8 * n_basic_blocks + 8 * n_edges.  */\n-  int fmax_num_edges = 8 * (n_basic_blocks_for_fn (cfun) + n_edges);\n+  int fmax_num_edges = 8 * (n_basic_blocks_for_fn (cfun) +\n+\t\t\t    n_edges_for_fn (cfun));\n \n   /* Initial num of vertices in the fixup graph.  */\n   fixup_graph->num_vertices = n_basic_blocks_for_fn (cfun);"}, {"sha": "87042dd7c1c25112c64ee50a12551c7d895af93f", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -643,7 +643,7 @@ haifa_find_rgns (void)\n   /* Allocate and initialize variables for the first traversal.  */\n   max_hdr = XNEWVEC (int, last_basic_block);\n   dfs_nr = XCNEWVEC (int, last_basic_block);\n-  stack = XNEWVEC (edge_iterator, n_edges);\n+  stack = XNEWVEC (edge_iterator, n_edges_for_fn (cfun));\n \n   inner = sbitmap_alloc (last_basic_block);\n   bitmap_ones (inner);"}, {"sha": "d2af39e2bbe64c213794b3212e99880d2545380c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -2106,7 +2106,8 @@ gimple_dump_cfg (FILE *file, int flags)\n     {\n       dump_function_header (file, current_function_decl, flags);\n       fprintf (file, \";; \\n%d basic blocks, %d edges, last basic block %d.\\n\\n\",\n-\t       n_basic_blocks_for_fn (cfun), n_edges, last_basic_block);\n+\t       n_basic_blocks_for_fn (cfun), n_edges_for_fn (cfun),\n+\t       last_basic_block);\n \n       brief_dump_cfg (file, flags | TDF_COMMENT);\n       fprintf (file, \"\\n\");"}, {"sha": "cfda63a0682d4df204edddef4a30545a231ccb3d", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc936fb236f9e85b88a8f59e2d33af2b76b786f7/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=dc936fb236f9e85b88a8f59e2d33af2b76b786f7", "patch": "@@ -10161,7 +10161,7 @@ variable_tracking_main_1 (void)\n     }\n \n   if (n_basic_blocks_for_fn (cfun) > 500 &&\n-      n_edges / n_basic_blocks_for_fn (cfun) >= 20)\n+      n_edges_for_fn (cfun) / n_basic_blocks_for_fn (cfun) >= 20)\n     {\n       vt_debug_insns_local (true);\n       return 0;"}]}