{"sha": "3f16a1678156035bbe73b217fbce4d9c27d1d559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YxNmExNjc4MTU2MDM1YmJlNzNiMjE3ZmJjZTRkOWMyN2QxZDU1OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-16T11:42:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-16T11:48:07Z"}, "message": "tree-optimization/38474 - improve PTA varinfo sorting\n\nThis improves a previous heuristic to sort address-taken variables\nfirst (because those appear in points-to bitmaps) by tracking which\nvariables appear in ADDRESSOF constraints (there's also\ngraph->address_taken but that's computed only later).\n\nThis shaves off 30s worth of compile-time for the full testcase in\nPR38474 (which then still takes 965s to compile at -O2).\n\n2021-02-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/38474\n\t* tree-ssa-structalias.c (variable_info::address_taken): New.\n\t(new_var_info): Initialize address_taken.\n\t(process_constraint): Set address_taken.\n\t(solve_constraints): Use the new address_taken flag rather\n\tthan is_reg_var for sorting variables.\n\t(dump_constraint): Dump the variable number if the name\n\tis just NULL.", "tree": {"sha": "f8d21947d8f38f1e57586d6250bf1c5bb02f85e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8d21947d8f38f1e57586d6250bf1c5bb02f85e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f16a1678156035bbe73b217fbce4d9c27d1d559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f16a1678156035bbe73b217fbce4d9c27d1d559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f16a1678156035bbe73b217fbce4d9c27d1d559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f16a1678156035bbe73b217fbce4d9c27d1d559/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1531f39268c8973cf9478585fba5c5bbdb6e9c4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1531f39268c8973cf9478585fba5c5bbdb6e9c4c"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "529ec3a5b8049c9eb25f7ac9fd4dac1f9fb9a5cc", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f16a1678156035bbe73b217fbce4d9c27d1d559/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f16a1678156035bbe73b217fbce4d9c27d1d559/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=3f16a1678156035bbe73b217fbce4d9c27d1d559", "patch": "@@ -280,6 +280,9 @@ struct variable_info\n   /* True if this represents a IPA function info.  */\n   unsigned int is_fn_info : 1;\n \n+  /* True if this appears as RHS in a ADDRESSOF constraint.  */\n+  unsigned int address_taken : 1;\n+\n   /* ???  Store somewhere better.  */\n   unsigned short ruid;\n \n@@ -393,6 +396,7 @@ new_var_info (tree t, const char *name, bool add_id)\n   ret->is_global_var = (t == NULL_TREE);\n   ret->is_ipa_escape_point = false;\n   ret->is_fn_info = false;\n+  ret->address_taken = false;\n   if (t && DECL_P (t))\n     ret->is_global_var = (is_global_var (t)\n \t\t\t  /* We have to treat even local register variables\n@@ -674,7 +678,10 @@ dump_constraint (FILE *file, constraint_t c)\n     fprintf (file, \"&\");\n   else if (c->lhs.type == DEREF)\n     fprintf (file, \"*\");\n-  fprintf (file, \"%s\", get_varinfo (c->lhs.var)->name);\n+  if (dump_file)\n+    fprintf (file, \"%s\", get_varinfo (c->lhs.var)->name);\n+  else\n+    fprintf (file, \"V%d\", c->lhs.var);\n   if (c->lhs.offset == UNKNOWN_OFFSET)\n     fprintf (file, \" + UNKNOWN\");\n   else if (c->lhs.offset != 0)\n@@ -684,7 +691,10 @@ dump_constraint (FILE *file, constraint_t c)\n     fprintf (file, \"&\");\n   else if (c->rhs.type == DEREF)\n     fprintf (file, \"*\");\n-  fprintf (file, \"%s\", get_varinfo (c->rhs.var)->name);\n+  if (dump_file)\n+    fprintf (file, \"%s\", get_varinfo (c->rhs.var)->name);\n+  else\n+    fprintf (file, \"V%d\", c->rhs.var);\n   if (c->rhs.offset == UNKNOWN_OFFSET)\n     fprintf (file, \" + UNKNOWN\");\n   else if (c->rhs.offset != 0)\n@@ -3101,6 +3111,8 @@ process_constraint (constraint_t t)\n   else\n     {\n       gcc_assert (rhs.type != ADDRESSOF || rhs.offset == 0);\n+      if (rhs.type == ADDRESSOF)\n+\tget_varinfo (get_varinfo (rhs.var)->head)->address_taken = true;\n       constraints.safe_push (t);\n     }\n }\n@@ -7288,15 +7300,14 @@ solve_constraints (void)\n   unsigned int *map = XNEWVEC (unsigned int, varmap.length ());\n   for (unsigned i = 0; i < integer_id + 1; ++i)\n     map[i] = i;\n-  /* Start with non-register vars (as possibly address-taken), followed\n-     by register vars as conservative set of vars never appearing in\n-     the points-to solution bitmaps.  */\n+  /* Start with address-taken vars, followed by not address-taken vars\n+     to move vars never appearing in the points-to solution bitmaps last.  */\n   unsigned j = integer_id + 1;\n   for (unsigned i = integer_id + 1; i < varmap.length (); ++i)\n-    if (! varmap[i]->is_reg_var)\n+    if (varmap[varmap[i]->head]->address_taken)\n       map[i] = j++;\n   for (unsigned i = integer_id + 1; i < varmap.length (); ++i)\n-    if (varmap[i]->is_reg_var)\n+    if (! varmap[varmap[i]->head]->address_taken)\n       map[i] = j++;\n   /* Shuffle varmap according to map.  */\n   for (unsigned i = integer_id + 1; i < varmap.length (); ++i)"}]}