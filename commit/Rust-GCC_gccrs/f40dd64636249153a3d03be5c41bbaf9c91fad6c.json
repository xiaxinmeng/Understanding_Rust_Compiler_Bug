{"sha": "f40dd64636249153a3d03be5c41bbaf9c91fad6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQwZGQ2NDYzNjI0OTE1M2EzZDAzYmU1YzQxYmJhZjljOTFmYWQ2Yw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-12-12T02:14:39Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-12-12T02:14:39Z"}, "message": "[SFN] adjust RTL insn-walking API\n\nThis patch removes unused RTL functions, introduces alternate ones for\nuse in a later SFN patch, and regroups other related functions so that\nthey appear in a more consistent order.\n\nfor  gcc/ChangeLog\n\n\t* emit-rtl.c (next_nondebug_insn, prev_nondebug_insn): Reorder.\n\t(next_nonnote_nondebug_insn, prev_nonnote_nondebug_insn): Reorder.\n\t(next_nonnote_nondebug_insn_bb): New.\n\t(prev_nonnote_nondebug_insn_bb): New.\n\t(prev_nonnote_insn_bb, next_nonnote_insn_bb): Remove.\n\t* rtl.h\t(prev_nonnote_insn_bb, next_nonnote_insn_bb): Remove decls.\n\t(prev_nonnote_nondebug_insn_bb): Declare.\n\t(next_nonnote_nondebug_insn_bb): Declare.\n\t* cfgbuild.c (find_bb_boundaries): Adjust to skip debug insns.\n\t* cfgrtl.c (get_last_bb_insn): Likewise.\n\t* lra.c (push_insns): Likewise.\n\nFrom-SVN: r255564", "tree": {"sha": "9d5d5fdef4e1b78d7b24169be239f455f6e72a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d5d5fdef4e1b78d7b24169be239f455f6e72a50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f40dd64636249153a3d03be5c41bbaf9c91fad6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40dd64636249153a3d03be5c41bbaf9c91fad6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40dd64636249153a3d03be5c41bbaf9c91fad6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40dd64636249153a3d03be5c41bbaf9c91fad6c/comments", "author": null, "committer": null, "parents": [{"sha": "421b29d6153301fdaee458a1dc7e3a254e6a662a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421b29d6153301fdaee458a1dc7e3a254e6a662a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421b29d6153301fdaee458a1dc7e3a254e6a662a"}], "stats": {"total": 95, "additions": 58, "deletions": 37}, "files": [{"sha": "6d0a64e6adcc6231b642f12e667df13948589269", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f40dd64636249153a3d03be5c41bbaf9c91fad6c", "patch": "@@ -1,3 +1,17 @@\n+2017-12-12  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* emit-rtl.c (next_nondebug_insn, prev_nondebug_insn): Reorder.\n+\t(next_nonnote_nondebug_insn, prev_nonnote_nondebug_insn): Reorder.\n+\t(next_nonnote_nondebug_insn_bb): New.\n+\t(prev_nonnote_nondebug_insn_bb): New.\n+\t(prev_nonnote_insn_bb, next_nonnote_insn_bb): Remove.\n+\t* rtl.h\t(prev_nonnote_insn_bb, next_nonnote_insn_bb): Remove decls.\n+\t(prev_nonnote_nondebug_insn_bb): Declare.\n+\t(next_nonnote_nondebug_insn_bb): Declare.\n+\t* cfgbuild.c (find_bb_boundaries): Adjust to skip debug insns.\n+\t* cfgrtl.c (get_last_bb_insn): Likewise.\n+\t* lra.c (push_insns): Likewise.\n+\n 2017-12-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/82050"}, {"sha": "77a221de21193a10ccd578d994a4df3f6ee0906a", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=f40dd64636249153a3d03be5c41bbaf9c91fad6c", "patch": "@@ -511,7 +511,7 @@ find_bb_boundaries (basic_block bb)\n \t     the middle of a BB.  We need to split it in the same manner as\n \t     if the barrier were preceded by a control_flow_insn_p insn.  */\n \t  if (!flow_transfer_insn)\n-\t    flow_transfer_insn = prev_nonnote_insn_bb (insn);\n+\t    flow_transfer_insn = prev_nonnote_nondebug_insn_bb (insn);\n \t}\n \n       if (control_flow_insn_p (insn))"}, {"sha": "eb673a1e079937986f7a14d87baf3eb0e8851f65", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=f40dd64636249153a3d03be5c41bbaf9c91fad6c", "patch": "@@ -2285,11 +2285,11 @@ get_last_bb_insn (basic_block bb)\n     end = table;\n \n   /* Include any barriers that may follow the basic block.  */\n-  tmp = next_nonnote_insn_bb (end);\n+  tmp = next_nonnote_nondebug_insn_bb (end);\n   while (tmp && BARRIER_P (tmp))\n     {\n       end = tmp;\n-      tmp = next_nonnote_insn_bb (end);\n+      tmp = next_nonnote_nondebug_insn_bb (end);\n     }\n \n   return end;"}, {"sha": "42de598067f46de8d456727520e1a698aacb588c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f40dd64636249153a3d03be5c41bbaf9c91fad6c", "patch": "@@ -3370,20 +3370,17 @@ next_nonnote_insn (rtx_insn *insn)\n   return insn;\n }\n \n-/* Return the next insn after INSN that is not a NOTE, but stop the\n-   search before we enter another basic block.  This routine does not\n-   look inside SEQUENCEs.  */\n+/* Return the next insn after INSN that is not a DEBUG_INSN.  This\n+   routine does not look inside SEQUENCEs.  */\n \n rtx_insn *\n-next_nonnote_insn_bb (rtx_insn *insn)\n+next_nondebug_insn (rtx_insn *insn)\n {\n   while (insn)\n     {\n       insn = NEXT_INSN (insn);\n-      if (insn == 0 || !NOTE_P (insn))\n+      if (insn == 0 || !DEBUG_INSN_P (insn))\n \tbreak;\n-      if (NOTE_INSN_BASIC_BLOCK_P (insn))\n-\treturn NULL;\n     }\n \n   return insn;\n@@ -3405,85 +3402,95 @@ prev_nonnote_insn (rtx_insn *insn)\n   return insn;\n }\n \n-/* Return the previous insn before INSN that is not a NOTE, but stop\n-   the search before we enter another basic block.  This routine does\n-   not look inside SEQUENCEs.  */\n+/* Return the previous insn before INSN that is not a DEBUG_INSN.\n+   This routine does not look inside SEQUENCEs.  */\n \n rtx_insn *\n-prev_nonnote_insn_bb (rtx_insn *insn)\n+prev_nondebug_insn (rtx_insn *insn)\n {\n-\n   while (insn)\n     {\n       insn = PREV_INSN (insn);\n-      if (insn == 0 || !NOTE_P (insn))\n+      if (insn == 0 || !DEBUG_INSN_P (insn))\n \tbreak;\n-      if (NOTE_INSN_BASIC_BLOCK_P (insn))\n-\treturn NULL;\n     }\n \n   return insn;\n }\n \n-/* Return the next insn after INSN that is not a DEBUG_INSN.  This\n-   routine does not look inside SEQUENCEs.  */\n+/* Return the next insn after INSN that is not a NOTE nor DEBUG_INSN.\n+   This routine does not look inside SEQUENCEs.  */\n \n rtx_insn *\n-next_nondebug_insn (rtx_insn *insn)\n+next_nonnote_nondebug_insn (rtx_insn *insn)\n {\n   while (insn)\n     {\n       insn = NEXT_INSN (insn);\n-      if (insn == 0 || !DEBUG_INSN_P (insn))\n+      if (insn == 0 || (!NOTE_P (insn) && !DEBUG_INSN_P (insn)))\n \tbreak;\n     }\n \n   return insn;\n }\n \n-/* Return the previous insn before INSN that is not a DEBUG_INSN.\n-   This routine does not look inside SEQUENCEs.  */\n+/* Return the next insn after INSN that is not a NOTE nor DEBUG_INSN,\n+   but stop the search before we enter another basic block.  This\n+   routine does not look inside SEQUENCEs.  */\n \n rtx_insn *\n-prev_nondebug_insn (rtx_insn *insn)\n+next_nonnote_nondebug_insn_bb (rtx_insn *insn)\n {\n   while (insn)\n     {\n-      insn = PREV_INSN (insn);\n-      if (insn == 0 || !DEBUG_INSN_P (insn))\n+      insn = NEXT_INSN (insn);\n+      if (insn == 0)\n+\tbreak;\n+      if (DEBUG_INSN_P (insn))\n+\tcontinue;\n+      if (!NOTE_P (insn))\n \tbreak;\n+      if (NOTE_INSN_BASIC_BLOCK_P (insn))\n+\treturn NULL;\n     }\n \n   return insn;\n }\n \n-/* Return the next insn after INSN that is not a NOTE nor DEBUG_INSN.\n+/* Return the previous insn before INSN that is not a NOTE nor DEBUG_INSN.\n    This routine does not look inside SEQUENCEs.  */\n \n rtx_insn *\n-next_nonnote_nondebug_insn (rtx_insn *insn)\n+prev_nonnote_nondebug_insn (rtx_insn *insn)\n {\n   while (insn)\n     {\n-      insn = NEXT_INSN (insn);\n+      insn = PREV_INSN (insn);\n       if (insn == 0 || (!NOTE_P (insn) && !DEBUG_INSN_P (insn)))\n \tbreak;\n     }\n \n   return insn;\n }\n \n-/* Return the previous insn before INSN that is not a NOTE nor DEBUG_INSN.\n-   This routine does not look inside SEQUENCEs.  */\n+/* Return the previous insn before INSN that is not a NOTE nor\n+   DEBUG_INSN, but stop the search before we enter another basic\n+   block.  This routine does not look inside SEQUENCEs.  */\n \n rtx_insn *\n-prev_nonnote_nondebug_insn (rtx_insn *insn)\n+prev_nonnote_nondebug_insn_bb (rtx_insn *insn)\n {\n   while (insn)\n     {\n       insn = PREV_INSN (insn);\n-      if (insn == 0 || (!NOTE_P (insn) && !DEBUG_INSN_P (insn)))\n+      if (insn == 0)\n \tbreak;\n+      if (DEBUG_INSN_P (insn))\n+\tcontinue;\n+      if (!NOTE_P (insn))\n+\tbreak;\n+      if (NOTE_INSN_BASIC_BLOCK_P (insn))\n+\treturn NULL;\n     }\n \n   return insn;"}, {"sha": "f790904ec57fb25422bf841d318871c9599e14fa", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=f40dd64636249153a3d03be5c41bbaf9c91fad6c", "patch": "@@ -1806,7 +1806,7 @@ push_insns (rtx_insn *from, rtx_insn *to)\n static void\n setup_sp_offset (rtx_insn *from, rtx_insn *last)\n {\n-  rtx_insn *before = next_nonnote_insn_bb (last);\n+  rtx_insn *before = next_nonnote_nondebug_insn_bb (last);\n   HOST_WIDE_INT offset = (before == NULL_RTX || ! INSN_P (before)\n \t\t\t  ? 0 : lra_get_insn_recog_data (before)->sp_offset);\n "}, {"sha": "9cc982172f531aec0390f057d6775cc1f0bb1464", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f40dd64636249153a3d03be5c41bbaf9c91fad6c/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f40dd64636249153a3d03be5c41bbaf9c91fad6c", "patch": "@@ -3085,13 +3085,13 @@ extern rtx_call_insn *last_call_insn (void);\n extern rtx_insn *previous_insn (rtx_insn *);\n extern rtx_insn *next_insn (rtx_insn *);\n extern rtx_insn *prev_nonnote_insn (rtx_insn *);\n-extern rtx_insn *prev_nonnote_insn_bb (rtx_insn *);\n extern rtx_insn *next_nonnote_insn (rtx_insn *);\n-extern rtx_insn *next_nonnote_insn_bb (rtx_insn *);\n extern rtx_insn *prev_nondebug_insn (rtx_insn *);\n extern rtx_insn *next_nondebug_insn (rtx_insn *);\n extern rtx_insn *prev_nonnote_nondebug_insn (rtx_insn *);\n+extern rtx_insn *prev_nonnote_nondebug_insn_bb (rtx_insn *);\n extern rtx_insn *next_nonnote_nondebug_insn (rtx_insn *);\n+extern rtx_insn *next_nonnote_nondebug_insn_bb (rtx_insn *);\n extern rtx_insn *prev_real_insn (rtx_insn *);\n extern rtx_insn *next_real_insn (rtx);\n extern rtx_insn *prev_active_insn (rtx_insn *);"}]}