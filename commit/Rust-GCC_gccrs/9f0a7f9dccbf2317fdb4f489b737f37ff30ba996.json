{"sha": "9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwYTdmOWRjY2JmMjMxN2ZkYjRmNDg5YjczN2YzN2ZmMzBiYTk5Ng==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-10T13:05:54Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-10T13:05:54Z"}, "message": "builtins.c (fold_builtin): Optimize cos(-x) as cos(x).\n\n\n\t* builtins.c (fold_builtin): Optimize cos(-x) as cos(x).\n\t* fold-const.c (fold <NEGATE_EXPR>): Convert -f(x) into f(-x)\n\twhen x is easily negated and f is sin, tan or atan.\n\t(fold <MULT_EXPR>): Optimize tan(x)*cos(x) and cos(x)*tan(x) as\n\tsin(x) with flag_unsafe_math_optimizations.\n\t(fold <RDIV_EXPR>): With flag_unsafe_math_optimizations fold\n\tsin(x)/cos(x) as tan(x) and cos(x)/sin(x) as 1.0/tan(x).\n\n\t* gcc.dg/builtins-20.c: New test case.\n\nFrom-SVN: r67701", "tree": {"sha": "c3bfed8bf44d2e144c58458d3cfa991de969b782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3bfed8bf44d2e144c58458d3cfa991de969b782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/comments", "author": null, "committer": null, "parents": [{"sha": "8936c82f1ea5c9146ca32ac5c75ab166d242cf0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8936c82f1ea5c9146ca32ac5c75ab166d242cf0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8936c82f1ea5c9146ca32ac5c75ab166d242cf0d"}], "stats": {"total": 249, "additions": 249, "deletions": 0}, "files": [{"sha": "1565c4871c2d97a0e04b1bdb42e4cae04ae31899", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "patch": "@@ -1,3 +1,13 @@\n+2003-06-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (fold_builtin): Optimize cos(-x) as cos(x).\n+\t* fold-const.c (fold <NEGATE_EXPR>): Convert -f(x) into f(-x)\n+\twhen x is easily negated and f is sin, tan or atan.\n+\t(fold <MULT_EXPR>): Optimize tan(x)*cos(x) and cos(x)*tan(x) as\n+\tsin(x) with flag_unsafe_math_optimizations.\n+\t(fold <RDIV_EXPR>): With flag_unsafe_math_optimizations fold\n+\tsin(x)/cos(x) as tan(x) and cos(x)/sin(x) as 1.0/tan(x).\n+\n 2003-06-10  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold <EQ_EXPR>):  Don't fold x == x only if x"}, {"sha": "9c5a18b50a52bd0732d9a99ca91e93f03e870db5", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "patch": "@@ -5346,6 +5346,14 @@ fold_builtin (exp)\n \t  /* Optimize cos(0.0) = 1.0.  */\n \t  if (real_zerop (arg))\n \t    return build_real (type, dconst1);\n+\n+\t  /* Optimize cos(-x) into cos(x).  */\n+\t  if (TREE_CODE (arg) == NEGATE_EXPR)\n+\t    {\n+\t      tree arglist = build_tree_list (NULL_TREE,\n+\t\t\t\t\t      TREE_OPERAND (arg, 0));\n+\t      return build_function_call_expr (fndecl, arglist);\n+\t    }\n \t}\n       break;\n "}, {"sha": "927b4d7410c5ddf0e3b33caa80f0152d838e60e8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "patch": "@@ -5376,6 +5376,33 @@ fold (expr)\n \treturn build (MINUS_EXPR, type, TREE_OPERAND (arg0, 1),\n \t\t      TREE_OPERAND (arg0, 0));\n \n+      /* Convert -f(x) into f(-x) where f is sin, tan or atan.  */\n+      switch (builtin_mathfn_code (arg0))\n+\t{\n+\tcase BUILT_IN_SIN:\n+\tcase BUILT_IN_SINF:\n+\tcase BUILT_IN_SINL:\n+\tcase BUILT_IN_TAN:\n+\tcase BUILT_IN_TANF:\n+\tcase BUILT_IN_TANL:\n+\tcase BUILT_IN_ATAN:\n+\tcase BUILT_IN_ATANF:\n+\tcase BUILT_IN_ATANL:\n+\t  if (negate_expr_p (TREE_VALUE (TREE_OPERAND (arg0, 1))))\n+\t    {\n+\t      tree fndecl, arg, arglist;\n+\n+\t      fndecl = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n+\t      arg = TREE_VALUE (TREE_OPERAND (arg0, 1));\n+\t      arg = fold (build1 (NEGATE_EXPR, type, arg));\n+\t      arglist = build_tree_list (NULL_TREE, arg);\n+\t      return build_function_call_expr (fndecl, arglist);\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n       return t;\n \n     case ABS_EXPR:\n@@ -5965,6 +5992,41 @@ fold (expr)\n \t\t      return build_function_call_expr (powfn, arglist);\n \t\t    }\n \t\t}\n+\n+\t      /* Optimize tan(x)*cos(x) as sin(x).  */\n+\t      if (((fcode0 == BUILT_IN_TAN && fcode1 == BUILT_IN_COS)\n+\t\t   || (fcode0 == BUILT_IN_TANF && fcode1 == BUILT_IN_COSF)\n+\t\t   || (fcode0 == BUILT_IN_TANL && fcode1 == BUILT_IN_COSL)\n+\t\t   || (fcode0 == BUILT_IN_COS && fcode1 == BUILT_IN_TAN)\n+\t\t   || (fcode0 == BUILT_IN_COSF && fcode1 == BUILT_IN_TANF)\n+\t\t   || (fcode0 == BUILT_IN_COSL && fcode1 == BUILT_IN_TANL))\n+\t\t  && operand_equal_p (TREE_VALUE (TREE_OPERAND (arg0, 1)),\n+\t\t\t\t      TREE_VALUE (TREE_OPERAND (arg1, 1)), 0))\n+\t\t{\n+\t\t  tree sinfn;\n+\n+\t\t  switch (fcode0)\n+\t\t    {\n+\t\t    case BUILT_IN_TAN:\n+\t\t    case BUILT_IN_COS:\n+\t\t      sinfn = implicit_built_in_decls[BUILT_IN_SIN];\n+\t\t      break;\n+\t\t    case BUILT_IN_TANF:\n+\t\t    case BUILT_IN_COSF:\n+\t\t      sinfn = implicit_built_in_decls[BUILT_IN_SINF];\n+\t\t      break;\n+\t\t    case BUILT_IN_TANL:\n+\t\t    case BUILT_IN_COSL:\n+\t\t      sinfn = implicit_built_in_decls[BUILT_IN_SINL];\n+\t\t      break;\n+\t\t    default:\n+\t\t      sinfn = NULL_TREE;\n+\t\t    }\n+\n+\t\t  if (sinfn != NULL_TREE)\n+\t\t    return build_function_call_expr (sinfn,\n+\t\t\t\t\t\t     TREE_OPERAND (arg0, 1));\n+\t\t}\n \t    }\n \t}\n       goto associate;\n@@ -6166,6 +6228,63 @@ fold (expr)\n \t      return fold (build (MULT_EXPR, type, arg0, arg1));\n \t    }\n \t}\n+\n+      if (flag_unsafe_math_optimizations)\n+\t{\n+\t  enum built_in_function fcode0 = builtin_mathfn_code (arg0);\n+\t  enum built_in_function fcode1 = builtin_mathfn_code (arg1);\n+\n+\t  /* Optimize sin(x)/cos(x) as tan(x).  */\n+\t  if (((fcode0 == BUILT_IN_SIN && fcode1 == BUILT_IN_COS)\n+\t       || (fcode0 == BUILT_IN_SINF && fcode1 == BUILT_IN_COSF)\n+\t       || (fcode0 == BUILT_IN_SINL && fcode1 == BUILT_IN_COSL))\n+\t      && operand_equal_p (TREE_VALUE (TREE_OPERAND (arg0, 1)),\n+\t\t\t\t  TREE_VALUE (TREE_OPERAND (arg1, 1)), 0))\n+\t    {\n+\t      tree tanfn;\n+\n+\t      if (fcode0 == BUILT_IN_SIN)\n+\t\ttanfn = implicit_built_in_decls[BUILT_IN_TAN];\n+\t      else if (fcode0 == BUILT_IN_SINF)\n+\t\ttanfn = implicit_built_in_decls[BUILT_IN_TANF];\n+\t      else if (fcode0 == BUILT_IN_SINL)\n+\t\ttanfn = implicit_built_in_decls[BUILT_IN_TANL];\n+\t      else\n+\t\ttanfn = NULL_TREE;\n+\n+\t      if (tanfn != NULL_TREE)\n+\t\treturn build_function_call_expr (tanfn,\n+\t\t\t\t\t\t TREE_OPERAND (arg0, 1));\n+\t    }\n+\n+\t  /* Optimize cos(x)/sin(x) as 1.0/tan(x).  */\n+\t  if (((fcode0 == BUILT_IN_COS && fcode1 == BUILT_IN_SIN)\n+\t       || (fcode0 == BUILT_IN_COSF && fcode1 == BUILT_IN_SINF)\n+\t       || (fcode0 == BUILT_IN_COSL && fcode1 == BUILT_IN_SINL))\n+\t      && operand_equal_p (TREE_VALUE (TREE_OPERAND (arg0, 1)),\n+\t\t\t\t  TREE_VALUE (TREE_OPERAND (arg1, 1)), 0))\n+\t    {\n+\t      tree tanfn;\n+\n+\t      if (fcode0 == BUILT_IN_COS)\n+\t\ttanfn = implicit_built_in_decls[BUILT_IN_TAN];\n+\t      else if (fcode0 == BUILT_IN_COSF)\n+\t\ttanfn = implicit_built_in_decls[BUILT_IN_TANF];\n+\t      else if (fcode0 == BUILT_IN_COSL)\n+\t\ttanfn = implicit_built_in_decls[BUILT_IN_TANL];\n+\t      else\n+\t\ttanfn = NULL_TREE;\n+\n+\t      if (tanfn != NULL_TREE)\n+\t\t{\n+\t\t  tree tmp = TREE_OPERAND (arg0, 1);\n+\t\t  tmp = build_function_call_expr (tanfn, tmp);\n+\t\t  return fold (build (RDIV_EXPR, type,\n+\t\t\t\t      build_real (type, dconst1),\n+\t\t\t\t      tmp));\n+\t\t}\n+\t    }\n+\t}\n       goto binary;\n \n     case TRUNC_DIV_EXPR:"}, {"sha": "01cf4e7438ba2e0a4cbe8813e88017cf35069ea7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "patch": "@@ -1,3 +1,7 @@\n+2003-06-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-20.c: New test case.\n+\n 2003-06-10  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/11131"}, {"sha": "a4e24a8029b3452691ad2273e153b48d7cbf44c8", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0a7f9dccbf2317fdb4f489b737f37ff30ba996/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=9f0a7f9dccbf2317fdb4f489b737f37ff30ba996", "patch": "@@ -0,0 +1,108 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that built-in math function constant folding doesn't break\n+   anything and produces the expected results.\n+\n+   Written by Roger Sayle, 8th June 2003.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void link_error(void);\n+\n+void test1(double x)\n+{\n+  if (cos(x) != cos(-x))\n+    link_error ();\n+\n+  if (sin(x)/cos(x) != tan(x))\n+    link_error ();\n+\n+  if (cos(x)/sin(x) != 1.0/tan(x))\n+    link_error ();\n+\n+  if (tan(x)*cos(x) != sin(x))\n+    link_error ();\n+\n+  if (cos(x)*tan(x) != sin(x))\n+    link_error ();\n+}\n+\n+void test2(double x, double y)\n+{\n+  if (-tan(x-y) != tan(y-x))\n+    link_error ();\n+\n+  if (-sin(x-y) != sin(y-x))\n+    link_error ();\n+}\n+\n+void test1f(float x)\n+{\n+  if (cosf(x) != cosf(-x))\n+    link_error ();\n+\n+  if (sinf(x)/cosf(x) != tanf(x))\n+    link_error ();\n+\n+  if (cosf(x)/sinf(x) != 1.0f/tanf(x))\n+    link_error ();\n+\n+  if (tanf(x)*cosf(x) != sinf(x))\n+    link_error ();\n+\n+  if (cosf(x)*tanf(x) != sinf(x))\n+    link_error ();\n+}\n+\n+void test2f(float x, float y)\n+{\n+  if (-tanf(x-y) != tanf(y-x))\n+    link_error ();\n+\n+  if (-sinf(x-y) != sinf(y-x))\n+    link_error ();\n+}\n+\n+\n+void test1l(long double x)\n+{\n+  if (cosl(x) != cosl(-x))\n+    link_error ();\n+\n+  if (sinl(x)/cosl(x) != tanl(x))\n+    link_error ();\n+\n+  if (cosl(x)/sinl(x) != 1.0l/tanl(x))\n+    link_error ();\n+\n+  if (tanl(x)*cosl(x) != sinl(x))\n+    link_error ();\n+\n+  if (cosl(x)*tanl(x) != sinl(x))\n+    link_error ();\n+}\n+\n+void test2l(long double x, long double y)\n+{\n+  if (-tanl(x-y) != tanl(y-x))\n+    link_error ();\n+\n+  if (-sinl(x-y) != sinl(y-x))\n+    link_error ();\n+}\n+\n+int main()\n+{\n+  test1 (1.0);\n+  test2 (1.0, 2.0);\n+\n+  test1f (1.0f);\n+  test2f (1.0f, 2.0f);\n+\n+  test1l (1.0l);\n+  test2l (1.0l, 2.0l);\n+\n+  return 0;\n+}\n+"}]}