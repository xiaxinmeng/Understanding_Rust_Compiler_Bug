{"sha": "f3a5e75cb66dc96efca7d494fe6060746c88acb1", "node_id": "C_kwDOANBUbNoAKGYzYTVlNzVjYjY2ZGM5NmVmY2E3ZDQ5NGZlNjA2MDc0NmM4OGFjYjE", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-06-18T00:02:05Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-07-03T17:30:07Z"}, "message": "x86: Support 2/4/8 byte constant vector stores\n\n1. Add a predicate for constant vectors which can be converted to integer\nconstants suitable for constant integer stores.  For a 8-byte constant\nvector, the converted 64-bit integer must be valid for store with 64-bit\nimmediate, which is a 64-bit integer sign-extended from a 32-bit integer.\n2. Add a new pattern to allow 2-byte, 4-byte and 8-byte constant vector\nstores, like\n\n(set (mem:V2HI (reg:DI 84))\n     (const_vector:V2HI [(const_int 0 [0]) (const_int 1 [0x1])]))\n\n3. After reload, convert constant vector stores to constant integer\nstores, like\n\n(set (mem:SI (reg:DI 5 di [84]))\n     (const_int 65536 [0x10000]))\n\nFor\n\nvoid\nfoo (short * c)\n{\n  c[0] = 0;\n  c[1] = 1;\n}\n\nit generates\n\n\tmovl\t$65536, (%rdi)\n\ninstead of\n\n\tmovl\t.LC0(%rip), %eax\n\tmovl\t%eax, (%rdi)\n\ngcc/\n\n\tPR target/106022\n\t* config/i386/i386-protos.h (ix86_convert_const_vector_to_integer):\n\tNew.\n\t* config/i386/i386.cc (ix86_convert_const_vector_to_integer):\n\tNew.\n\t* config/i386/mmx.md (V_16_32_64): New.\n\t(*mov<mode>_imm): New patterns for stores with 16-bit, 32-bit\n\tand 64-bit constant vector.\n\t* config/i386/predicates.md (x86_64_const_vector_operand): New.\n\ngcc/testsuite/\n\n\tPR target/106022\n\t* gcc.target/i386/pr106022-1.c: New test.\n\t* gcc.target/i386/pr106022-2.c: Likewise.\n\t* gcc.target/i386/pr106022-3.c: Likewise.\n\t* gcc.target/i386/pr106022-4.c: Likewise.", "tree": {"sha": "2a9e8a05756635c4a3243c4ac5078de4205880ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a9e8a05756635c4a3243c4ac5078de4205880ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3a5e75cb66dc96efca7d494fe6060746c88acb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a5e75cb66dc96efca7d494fe6060746c88acb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3a5e75cb66dc96efca7d494fe6060746c88acb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3a5e75cb66dc96efca7d494fe6060746c88acb1/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ae9def08565c36af2dc0bff495545ee1e9db642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae9def08565c36af2dc0bff495545ee1e9db642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae9def08565c36af2dc0bff495545ee1e9db642"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "cf847751ac5cde4880b0af5e914643c2debc501e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=f3a5e75cb66dc96efca7d494fe6060746c88acb1", "patch": "@@ -122,6 +122,8 @@ extern void ix86_expand_unary_operator (enum rtx_code, machine_mode,\n \t\t\t\t\trtx[]);\n extern rtx ix86_build_const_vector (machine_mode, bool, rtx);\n extern rtx ix86_build_signbit_mask (machine_mode, bool, bool);\n+extern HOST_WIDE_INT ix86_convert_const_vector_to_integer (rtx,\n+\t\t\t\t\t\t\t   machine_mode);\n extern void ix86_split_convert_uns_si_sse (rtx[]);\n extern void ix86_expand_convert_uns_didf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sixf_sse (rtx, rtx);"}, {"sha": "0cfe9962f7539ac72dc8ad92a5d4f18a29bf76cb", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=f3a5e75cb66dc96efca7d494fe6060746c88acb1", "patch": "@@ -15723,6 +15723,53 @@ ix86_build_signbit_mask (machine_mode mode, bool vect, bool invert)\n   return force_reg (vec_mode, v);\n }\n \n+/* Return HOST_WIDE_INT for const vector OP in MODE.  */\n+\n+HOST_WIDE_INT\n+ix86_convert_const_vector_to_integer (rtx op, machine_mode mode)\n+{\n+  if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n+    gcc_unreachable ();\n+\n+  int nunits = GET_MODE_NUNITS (mode);\n+  wide_int val = wi::zero (GET_MODE_BITSIZE (mode));\n+  machine_mode innermode = GET_MODE_INNER (mode);\n+  unsigned int innermode_bits = GET_MODE_BITSIZE (innermode);\n+\n+  switch (mode)\n+    {\n+    case E_V2QImode:\n+    case E_V4QImode:\n+    case E_V2HImode:\n+    case E_V8QImode:\n+    case E_V4HImode:\n+    case E_V2SImode:\n+      for (int i = 0; i < nunits; ++i)\n+\t{\n+\t  int v = INTVAL (XVECEXP (op, 0, i));\n+\t  wide_int wv = wi::shwi (v, innermode_bits);\n+\t  val = wi::insert (val, wv, innermode_bits * i, innermode_bits);\n+\t}\n+      break;\n+    case E_V2HFmode:\n+    case E_V4HFmode:\n+    case E_V2SFmode:\n+      for (int i = 0; i < nunits; ++i)\n+\t{\n+\t  rtx x = XVECEXP (op, 0, i);\n+\t  int v = real_to_target (NULL, CONST_DOUBLE_REAL_VALUE (x),\n+\t\t\t\t  REAL_MODE_FORMAT (innermode));\n+\t  wide_int wv = wi::shwi (v, innermode_bits);\n+\t  val = wi::insert (val, wv, innermode_bits * i, innermode_bits);\n+\t}\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  return val.to_shwi ();\n+}\n+\n /* Return TRUE or FALSE depending on whether the first SET in INSN\n    has source and destination with matching CC modes, and that the\n    CC mode is at least as constrained as REQ_MODE.  */"}, {"sha": "3294c1e6274e8834f4801e0d78070aec16b1762e", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=f3a5e75cb66dc96efca7d494fe6060746c88acb1", "patch": "@@ -69,6 +69,12 @@\n ;; 4-byte and 2-byte QImode vector modes\n (define_mode_iterator VI1_16_32 [V4QI V2QI])\n \n+;; All 2-byte, 4-byte and 8-byte vector modes with more than 1 element\n+(define_mode_iterator V_16_32_64\n+   [V2QI V4QI V2HI V2HF\n+    (V8QI \"TARGET_64BIT\") (V4HI \"TARGET_64BIT\") (V4HF \"TARGET_64BIT\")\n+    (V2SI \"TARGET_64BIT\") (V2SF \"TARGET_64BIT\")])\n+\n ;; V2S* modes\n (define_mode_iterator V2FI [V2SF V2SI])\n \n@@ -331,6 +337,37 @@\n \t   ]\n \t   (symbol_ref \"true\")))])\n \n+;; 16-bit, 32-bit and 64-bit constant vector stores.  After reload,\n+;; convert them to immediate integer stores.\n+(define_insn_and_split \"*mov<mode>_imm\"\n+  [(set (match_operand:V_16_32_64 0 \"memory_operand\" \"=m\")\n+\t(match_operand:V_16_32_64 1 \"x86_64_const_vector_operand\" \"i\"))]\n+  \"\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+{\n+  HOST_WIDE_INT val = ix86_convert_const_vector_to_integer (operands[1],\n+\t\t\t\t\t\t\t    <MODE>mode);\n+  operands[1] = GEN_INT (val);\n+  machine_mode mode;\n+  switch (GET_MODE_SIZE (<MODE>mode))\n+    {\n+    case 2:\n+      mode = HImode;\n+      break;\n+    case 4:\n+      mode = SImode;\n+      break;\n+    case 8:\n+      mode = DImode;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  operands[0] = lowpart_subreg (mode, operands[0], <MODE>mode);\n+})\n+\n ;; For TARGET_64BIT we always round up to 8 bytes.\n (define_insn \"*push<mode>2_rex64\"\n   [(set (match_operand:V_32 0 \"push_operand\" \"=X,X\")"}, {"sha": "c71c453cceb740c26b7fe956bb314be1cad24e14", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=f3a5e75cb66dc96efca7d494fe6060746c88acb1", "patch": "@@ -1194,6 +1194,17 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_code \"const_vector\")))\n \n+;; Return true when OP is CONST_VECTOR which can be converted to a\n+;; sign extended 32-bit integer.\n+(define_predicate \"x86_64_const_vector_operand\"\n+  (match_code \"const_vector\")\n+{\n+  if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n+    return false;\n+  HOST_WIDE_INT val = ix86_convert_const_vector_to_integer (op, mode);\n+  return trunc_int_for_mode (val, SImode) == val;\n+})\n+\n ;; Return true when OP is nonimmediate or standard SSE constant.\n (define_predicate \"nonimmediate_or_sse_const_operand\"\n   (ior (match_operand 0 \"nonimmediate_operand\")"}, {"sha": "6643b4c30f136f940d42cf574774f0dc9e013db0", "filename": "gcc/testsuite/gcc.target/i386/pr106022-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-1.c?ref=f3a5e75cb66dc96efca7d494fe6060746c88acb1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+void\n+foo (char *c)\n+{\n+  c[0] = 0;\n+  c[1] = 1;\n+  c[2] = 2;\n+  c[3] = 3;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$50462976,\" 1 } } */"}, {"sha": "0e79fb532972266f5c64cd6affbb134cd62927cf", "filename": "gcc/testsuite/gcc.target/i386/pr106022-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-2.c?ref=f3a5e75cb66dc96efca7d494fe6060746c88acb1", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+void\n+foo (int *c)\n+{\n+  c = __builtin_assume_aligned (c, 16);\n+  c[0] = -1;\n+  c[1] = -1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movq\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 { target { ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movq\\[ \\\\t\\]+\\\\\\$-1,\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xmm\" { target { ! ia32 } } } } */"}, {"sha": "8b0c2a8f6d85d7b006669709c7904c1523d147d8", "filename": "gcc/testsuite/gcc.target/i386/pr106022-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-3.c?ref=f3a5e75cb66dc96efca7d494fe6060746c88acb1", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+void\n+foo (int *c)\n+{\n+  c[0] = 0;\n+  c[1] = 1;\n+  c[2] = 2;\n+  c[3] = 3;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */"}, {"sha": "8ecda170af371dbc13846ce85f35537b44c48863", "filename": "gcc/testsuite/gcc.target/i386/pr106022-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3a5e75cb66dc96efca7d494fe6060746c88acb1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106022-4.c?ref=f3a5e75cb66dc96efca7d494fe6060746c88acb1", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=x86-64\" } */\n+\n+void\n+foo (float *c)\n+{\n+  c[0] = 2.3;\n+  c[1] = 0.0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$0x40133333\" 1 { target { ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movl\\[ \\\\t\\]+\\\\\\$0x00000000\" 1 { target { ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"movq\\[ \\\\t\\]+\\\\\\$1075000115,\" 1 { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xmm\" } } */"}]}