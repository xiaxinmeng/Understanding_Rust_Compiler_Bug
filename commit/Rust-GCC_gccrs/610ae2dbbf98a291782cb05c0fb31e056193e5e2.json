{"sha": "610ae2dbbf98a291782cb05c0fb31e056193e5e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEwYWUyZGJiZjk4YTI5MTc4MmNiMDVjMGZiMzFlMDU2MTkzZTVlMg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-20T13:15:48Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-20T13:15:48Z"}, "message": "c++: spec_hasher and TYPENAME_TYPE resolution [PR95223]\n\nAfter enabling sanitization of the specialization tables, we are\ntriggering one of the hash table sanity checks in the below testcase.\n\nThe reason is that when looking up the specialization j<int> in the\ntype_specializations table, the sanity check finds that the existing\nentry j<n<t>::m> compares equal to j<int> but hashes differently.\n\nThe discrepancy is due to structural_comptypes looking through\nTYPENAME_TYPEs (via resolve_typename_type), something which\niterative_hash_template_arg doesn't do.  So the TYPENAME_TYPE n<t>::m is\nconsidered equal to int, but the hashes of these two template arguments\nare different.\n\nIt seems wrong for the result of a specialization table lookup to depend\non the current scope, so this patch makes structural_comptypes avoid\ncalling resolve_typename_type when comparing_specializations.\n\nIn order for the below testcase to deterministically trigger the\nsanitization error without this patch, we also need to fix the location\nof the call to hash_table::verify within hash_table::find_with_hash.\n\ngcc/ChangeLog:\n\n\tPR c++/95223\n\t* hash-table.h (hash_table::find_with_hash): Move up the call to\n\thash_table::verify.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95223\n\t* typeck.c (structural_comptypes): Don't perform\n\tcontext-dependent resolution of TYPENAME_TYPEs when\n\tcomparing_specializations.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95223\n\t* g++.dg/template/typename23.C: New test.", "tree": {"sha": "f5edf193aa25d5def8c3a2ab87a7ac47912ca9dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5edf193aa25d5def8c3a2ab87a7ac47912ca9dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/610ae2dbbf98a291782cb05c0fb31e056193e5e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610ae2dbbf98a291782cb05c0fb31e056193e5e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/610ae2dbbf98a291782cb05c0fb31e056193e5e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/610ae2dbbf98a291782cb05c0fb31e056193e5e2/comments", "author": null, "committer": null, "parents": [{"sha": "053dc901e0227bb62b65f3a8d7a9deccb61dffa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053dc901e0227bb62b65f3a8d7a9deccb61dffa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053dc901e0227bb62b65f3a8d7a9deccb61dffa1"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "cef2e7bfd031670d7b1b306b6f7fe7b55efdfe0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=610ae2dbbf98a291782cb05c0fb31e056193e5e2", "patch": "@@ -1,3 +1,9 @@\n+2020-05-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95223\n+\t* hash-table.h (hash_table::find_with_hash): Move up the call to\n+\thash_table::verify.\n+\n 2020-05-20  Martin Liska  <mliska@suse.cz>\n \n \t* lto-compress.c (lto_compression_zstd): Fill up"}, {"sha": "c59137faa3f16800767dd4a447ea3d681aaa68f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=610ae2dbbf98a291782cb05c0fb31e056193e5e2", "patch": "@@ -1,3 +1,10 @@\n+2020-05-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95223\n+\t* typeck.c (structural_comptypes): Don't perform\n+\tcontext-dependent resolution of TYPENAME_TYPEs when\n+\tcomparing_specializations.\n+\n 2020-05-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* pt.c (lookup_template_class_1): Do not reinit template_info of an"}, {"sha": "0181984bb99578cd1c9c9f24e2f8e2da8707277a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=610ae2dbbf98a291782cb05c0fb31e056193e5e2", "patch": "@@ -1256,13 +1256,16 @@ structural_comptypes (tree t1, tree t2, int strict)\n \n   gcc_assert (TYPE_P (t1) && TYPE_P (t2));\n \n-  /* TYPENAME_TYPEs should be resolved if the qualifying scope is the\n-     current instantiation.  */\n-  if (TREE_CODE (t1) == TYPENAME_TYPE)\n-    t1 = resolve_typename_type (t1, /*only_current_p=*/true);\n+  if (!comparing_specializations)\n+    {\n+      /* TYPENAME_TYPEs should be resolved if the qualifying scope is the\n+\t current instantiation.  */\n+      if (TREE_CODE (t1) == TYPENAME_TYPE)\n+\tt1 = resolve_typename_type (t1, /*only_current_p=*/true);\n \n-  if (TREE_CODE (t2) == TYPENAME_TYPE)\n-    t2 = resolve_typename_type (t2, /*only_current_p=*/true);\n+      if (TREE_CODE (t2) == TYPENAME_TYPE)\n+\tt2 = resolve_typename_type (t2, /*only_current_p=*/true);\n+    }\n \n   if (TYPE_PTRMEMFUNC_P (t1))\n     t1 = TYPE_PTRMEMFUNC_FN_TYPE (t1);"}, {"sha": "32f3a634e1ed7bef91741cdc7327b383516fa0db", "filename": "gcc/hash-table.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=610ae2dbbf98a291782cb05c0fb31e056193e5e2", "patch": "@@ -912,6 +912,12 @@ ::find_with_hash (const compare_type &comparable, hashval_t hash)\n \n   if (Lazy && m_entries == NULL)\n     m_entries = alloc_entries (size);\n+\n+#if CHECKING_P\n+  if (m_sanitize_eq_and_hash)\n+    verify (comparable, hash);\n+#endif\n+\n   value_type *entry = &m_entries[index];\n   if (is_empty (*entry)\n       || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))\n@@ -928,13 +934,7 @@ ::find_with_hash (const compare_type &comparable, hashval_t hash)\n       entry = &m_entries[index];\n       if (is_empty (*entry)\n           || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))\n-\t{\n-#if CHECKING_P\n-\t  if (m_sanitize_eq_and_hash)\n-\t    verify (comparable, hash);\n-#endif\n-\t  return *entry;\n-\t}\n+\treturn *entry;\n     }\n }\n "}, {"sha": "3594d01cb93802e564eaf342344f591ba1f2d0ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=610ae2dbbf98a291782cb05c0fb31e056193e5e2", "patch": "@@ -1,3 +1,8 @@\n+2020-05-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95223\n+\t* g++.dg/template/typename23.C: New test.\n+\n 2020-05-20  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \tPR target/94959"}, {"sha": "d2fb0ca72f52d3069ff4bf4ce4caba7eaa1935f7", "filename": "gcc/testsuite/g++.dg/template/typename23.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/610ae2dbbf98a291782cb05c0fb31e056193e5e2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename23.C?ref=610ae2dbbf98a291782cb05c0fb31e056193e5e2", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/95223\n+// { dg-do compile }\n+// { dg-additional-options \"--param=hash-table-verification-limit=10000\" }\n+\n+template <typename> struct j {};\n+template <typename t> struct n {\n+  typedef int m;\n+  j<n<t>::m> p();\n+};\n+template <typename o> j<typename n<o>::m> n<o>::p() { return o::f(); }"}]}