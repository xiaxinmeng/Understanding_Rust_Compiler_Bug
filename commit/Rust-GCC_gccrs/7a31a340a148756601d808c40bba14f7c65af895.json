{"sha": "7a31a340a148756601d808c40bba14f7c65af895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzMWEzNDBhMTQ4NzU2NjAxZDgwOGM0MGJiYTE0ZjdjNjVhZjg5NQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-08T17:20:48Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-08T17:20:48Z"}, "message": "re PR target/6082 (memory model wrong for FreeBSD/sparc64)\n\n2002-04-08  David S. Miller  <davem@redhat.com>\n\n\tPR target/6082\n\t* config/sparc/freebsd.h (SPARC_DEFAULT_CMODEL): Set to CM_MEDLOW\n\n\tMake init_priority work on Sparc when using GNU ld.\n\t* config/sparc/linux.h, config/sparc/linux64.h,\n\tconfig/sparc/netbsd-elf.h, config/sparc/freebsd.h\n\t(CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Undefine.\n\t* config/sparc/sol2-gld.h: New file to do the same.\n\t* config.gcc (sparc*-*-solaris2*): If gnu_ld=yes add\n\tsparc/sol2-gld.h to tm_file.\n\n\tPR optimization/4328\n\t* config/sparc/sparc.h (EXTRA_CONSTRAINT): Add new constraint 'W'.\n\t* doc/md.texi: Document it.\n\t* config/sparc/sparc.md (movdi_insn_sp64_novis,\n\tmovdi_insn_sp64_vis, movdf_insn_sp32, movdf_insn_v9only_novis,\n\tmovdf_insn_v9only_vis, movdf_insn_sp64_novis,\n\tmovdf_insn_sp64_vis): Use it as MEM constraing with 'e' registers.\n\t* config/sparc/sparc.c (mem_min_alignment): Fix comment.\n\nFrom-SVN: r52031", "tree": {"sha": "0e7759702ad29794fe850c40c3f34a61eef0b489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e7759702ad29794fe850c40c3f34a61eef0b489"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a31a340a148756601d808c40bba14f7c65af895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a31a340a148756601d808c40bba14f7c65af895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a31a340a148756601d808c40bba14f7c65af895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a31a340a148756601d808c40bba14f7c65af895/comments", "author": null, "committer": null, "parents": [{"sha": "11579f33b913b2fc5187a356597252e4c5e7ef0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11579f33b913b2fc5187a356597252e4c5e7ef0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11579f33b913b2fc5187a356597252e4c5e7ef0a"}], "stats": {"total": 135, "additions": 102, "deletions": 33}, "files": [{"sha": "81074d5c076662f3b8886080186b81ae5b4987d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -1,3 +1,25 @@\n+2002-04-08  David S. Miller  <davem@redhat.com>\n+\n+\tPR target/6082\n+\t* config/sparc/freebsd.h (SPARC_DEFAULT_CMODEL): Set to CM_MEDLOW\n+\n+\tMake init_priority work on Sparc when using GNU ld.\n+\t* config/sparc/linux.h, config/sparc/linux64.h,\n+\tconfig/sparc/netbsd-elf.h, config/sparc/freebsd.h\n+\t(CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Undefine.\n+\t* config/sparc/sol2-gld.h: New file to do the same.\n+\t* config.gcc (sparc*-*-solaris2*): If gnu_ld=yes add\n+\tsparc/sol2-gld.h to tm_file.\n+\n+\tPR optimization/4328\n+\t* config/sparc/sparc.h (EXTRA_CONSTRAINT): Add new constraint 'W'.\n+\t* doc/md.texi: Document it.\n+\t* config/sparc/sparc.md (movdi_insn_sp64_novis,\n+\tmovdi_insn_sp64_vis, movdf_insn_sp32, movdf_insn_v9only_novis,\n+\tmovdf_insn_v9only_vis, movdf_insn_sp64_novis,\n+\tmovdf_insn_sp64_vis): Use it as MEM constraing with 'e' registers.\n+\t* config/sparc/sparc.c (mem_min_alignment): Fix comment.\n+\n 2002-04-08  Andreas Jaeger  <aj@suse.de>\n \n \t* stmt.c (expand_asm_operands): Revert last patch from Richard"}, {"sha": "07afdce33a1f4e22fdcc5cae3a94a689ab9b2402", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -3075,7 +3075,7 @@ sparc-*-rtems*|sparc-*-rtemself*)\n sparcv9-*-solaris2* | sparc64-*-solaris2*)\n \tif test x$gnu_ld = xyes\n \tthen\n-\t\ttm_file=\"sparc/sol2-sld-64.h sparc/sol2-64.h\"\n+\t\ttm_file=\"sparc/sol2-sld-64.h sparc/sol2-64.h sparc/sol2-gld.h\"\n \telse\n \t\ttm_file=sparc/sol2-sld-64.h\n \tfi\n@@ -3107,6 +3107,7 @@ sparc-hal-solaris2*)\n         tm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/hal.h\"\n         tmake_file=\"sparc/t-halos sparc/t-sol2 sparc/t-crtfm\"\n \tif test x$gnu_ld = xyes; then\n+\t\ttm_file=\"${tm_file} sparc/sol2-gld.h\"\n \t\ttmake_file=\"$tmake_file t-slibgcc-elf-ver\"\n \telse\n \t\ttmake_file=\"$tmake_file t-slibgcc-sld\"\n@@ -3125,7 +3126,7 @@ sparc-hal-solaris2*)\n sparc-*-solaris2*)\n \tif test x$gnu_ld = xyes\n \tthen\n-\t\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h\"\n+\t\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sol2-gld.h\"\n \telse\n \t\ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sparc/sol2.h sparc/sol2-sld.h\"\n \tfi\n@@ -3142,7 +3143,7 @@ sparc-*-solaris2*)\n \t*-*-solaris2*)\n \t\tif test x$gnu_ld = xyes\n \t\tthen\n-\t\t\ttm_file=\"sparc/sol2-sld-64.h sparc/sol2-64.h\"\n+\t\t\ttm_file=\"sparc/sol2-sld-64.h sparc/sol2-64.h sparc/sol2-gld.h\"\n \t\telse\n \t\t\ttm_file=\"sparc/sol2-sld-64.h\"\n \t\tfi"}, {"sha": "d50de8457333aced4348d735da4e4056a7a095a3", "filename": "gcc/config/sparc/freebsd.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ffreebsd.h?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -97,7 +97,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* The default code model.  */\n #undef  SPARC_DEFAULT_CMODEL\n-#define SPARC_DEFAULT_CMODEL\tCM_MEDMID\n+#define SPARC_DEFAULT_CMODEL\tCM_MEDLOW\n \n \n /************************[  Assembler stuff  ]********************************/\n@@ -153,3 +153,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define ENDFILE_SPEC \\\n   \t\"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s}\" \\\n \tFBSD_ENDFILE_SPEC\n+\n+/* We use GNU ld so undefine this so that attribute((init_priority)) works.  */\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP"}, {"sha": "f7ae4d7f9f1570ecb995964c3a877356f9f7ba76", "filename": "gcc/config/sparc/linux.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux.h?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -187,7 +187,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_SPEC\n #define ASM_SPEC \\\n   \"%{V} %{v:%{!V:-V}} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Wa,*:%*} -s %{fpic:-K PIC} \\\n-   %{fPIC:-K PIC} %(asm_relax)\"\n+   %{fPIC:-K PIC} %(asm_cpu) %(asm_relax)\"\n \n /* Same as sparc.h */\n #undef DBX_REGISTER_NUMBER\n@@ -253,3 +253,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Don't be different from other Linux platforms in this regard.  */\n #define HANDLE_PRAGMA_PACK_PUSH_POP\n+\n+/* We use GNU ld so undefine this so that attribute((init_priority)) works.  */\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP"}, {"sha": "9540efc40d70f162e441618cf40aeb0691e6d56a", "filename": "gcc/config/sparc/linux64.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flinux64.h?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -60,8 +60,8 @@ Boston, MA 02111-1307, USA.  */\n \n #define STARTFILE_SPEC32 \\\n   \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} %{!p:crt1.o%s}}}\\\n-   crti.o%s %{static:crtbeginT.o%s}\\\n+     %{pg:/usr/lib/gcrt1.o%s} %{!pg:%{/usr/lib/p:gcrt1.o%s} %{!p:/usr/lib/crt1.o%s}}}\\\n+   /usr/lib/crti.o%s %{static:crtbeginT.o%s}\\\n    %{!static:%{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}}\"\n \n #define STARTFILE_SPEC64 \\\n@@ -99,7 +99,7 @@ Boston, MA 02111-1307, USA.  */\n #undef  ENDFILE_SPEC\n \n #define ENDFILE_SPEC32 \\\n-  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} /usr/lib/crtn.o%s\"\n \n #define ENDFILE_SPEC64 \\\n   \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} /usr/lib64/crtn.o%s\"\n@@ -371,3 +371,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Don't be different from other Linux platforms in this regard.  */\n #define HANDLE_PRAGMA_PACK_PUSH_POP\n+\n+/* We use GNU ld so undefine this so that attribute((init_priority)) works.  */\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP"}, {"sha": "f1255a75245731f53df2b6b76588ee8135372038", "filename": "gcc/config/sparc/netbsd-elf.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fnetbsd-elf.h?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -336,3 +336,7 @@ Boston, MA 02111-1307, USA.  */\n \t|| TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc */\n \n #endif\t/* SPARC_BI_ARCH */\n+\n+/* We use GNU ld so undefine this so that attribute((init_priority)) works.  */\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP"}, {"sha": "76e034e46f1e45c814c428ee870a6b81a6b7be2a", "filename": "gcc/config/sparc/sol2-gld.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fsol2-gld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fsol2-gld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-gld.h?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -0,0 +1,6 @@\n+/* Definitions of target machine for GNU compiler, for SPARC running Solaris 2\n+   using the GNU linker.  */\n+\n+/* Undefine this so that attribute((init_priority)) works.  */\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP"}, {"sha": "29778375a03817e253fdddcbcc04c7b302f62f04", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -2989,7 +2989,7 @@ load_pic_register ()\n }\n \f\n /* Return 1 if RTX is a MEM which is known to be aligned to at\n-   least an 8 byte boundary.  */\n+   least a DESIRED byte boundary.  */\n \n int\n mem_min_alignment (mem, desired)\n@@ -3702,12 +3702,22 @@ sparc_nonflat_function_epilogue (file, size, leaf_function)\n   if (current_function_epilogue_delay_list == 0)\n     {\n       /* If code does not drop into the epilogue, we need\n-\t do nothing except output pending case vectors.  */\n-      rtx insn = get_last_insn ();                               \n-      if (GET_CODE (insn) == NOTE)                               \n-      insn = prev_nonnote_insn (insn);                           \n-      if (insn && GET_CODE (insn) == BARRIER)                    \n-      goto output_vectors;                                                    \n+\t do nothing except output pending case vectors.\n+\n+\t We have to still output a dummy nop for the sake of\n+\t sane backtraces.  Otherwise, if the last two instructions\n+\t of a function were call foo; dslot; this can make the return\n+\t PC of foo (ie. address of call instruction plus 8) point to\n+\t the first instruction in the next function.  */\n+      rtx insn;\n+\n+      fputs(\"\\tnop\\n\", file);\n+\n+      insn = get_last_insn ();\n+      if (GET_CODE (insn) == NOTE)\n+\t      insn = prev_nonnote_insn (insn);\n+      if (insn && GET_CODE (insn) == BARRIER)\n+\t      goto output_vectors;\n     }\n \n   if (num_gfregs)"}, {"sha": "fbbb96cf8aa596ecdee8cf26324a6942a85d9e63", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -2099,7 +2099,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n        be at least 8 bytes.\n \n    `U' handles all pseudo registers or a hard even numbered\n-       integer register, needed for ldd/std instructions.  */\n+       integer register, needed for ldd/std instructions.\n+\n+   'W' handles the memory operand when moving operands in/out\n+       of 'e' constraint floating point registers.  */\n \n #define EXTRA_CONSTRAINT_BASE(OP, C)   \\\n    ((C) == 'Q' ? fp_sethi_p(OP)        \\\n@@ -2120,15 +2123,19 @@ do {\t\t\t\t\t\t\t\t\t\\\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_BASE_P(X)  REG_OK_FOR_INDEX_P (X)\n \n-/* 'T', 'U' are for aligned memory loads which aren't needed for arch64.  */\n+/* 'T', 'U' are for aligned memory loads which aren't needed for arch64.\n+   'W' is like 'T' but is assumed true on arch64.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\\\n    (EXTRA_CONSTRAINT_BASE(OP, C)                        \\\n     || ((! TARGET_ARCH64 && (C) == 'T')\t\t\t\\\n         ? (mem_min_alignment (OP, 8))\t\t\t\\\n         : ((! TARGET_ARCH64 && (C) == 'U')\t\t\\\n             ? (register_ok_for_ldd (OP))\t\t\\\n-            : 0)))\n+            : ((C) == 'W'\t\t\t\t\\\n+\t       ? ((TARGET_ARCH64 && GET_CODE (OP) == MEM) \\\n+\t          || mem_min_alignment (OP, 8)) \\\n+\t       : 0))))\n \n #else\n \n@@ -2146,7 +2153,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n               && (REGNO (OP) < FIRST_PSEUDO_REGISTER\t\\\n \t          || reg_renumber[REGNO (OP)] >= 0)\t\\\n               && register_ok_for_ldd (OP))\t\t\\\n-           : 0)))\n+           : ((C) == 'W'\t\t\t\t\\\n+\t      ? (((TARGET_ARCH64 && GET_CODE (OP) == MEM) \\\n+\t\t  || mem_min_alignment (OP, 8))\t\t\\\n+                 && strict_memory_address_p (Pmode, XEXP (OP, 0))) \\\n+\t      : 0))))\n \n #endif\n \f"}, {"sha": "02699e519e9503b34e4fc0574e3c3de52969ebde", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -2592,8 +2592,8 @@\n   \"sethi\\\\t%%hi(%a1), %0\")\n \n (define_insn \"*movdi_insn_sp64_novis\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,?e,?e,?m\")\n-        (match_operand:DI 1 \"input_operand\"   \"rI,N,J,m,rJ,e,m,e\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,?e,?e,?W\")\n+        (match_operand:DI 1 \"input_operand\"   \"rI,N,J,m,rJ,e,W,e\"))]\n   \"TARGET_ARCH64 && ! TARGET_VIS\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n@@ -2610,8 +2610,8 @@\n    (set_attr \"fptype\" \"*,*,*,*,*,double,*,*\")])\n \n (define_insn \"*movdi_insn_sp64_vis\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,?e,?e,?m,b\")\n-        (match_operand:DI 1 \"input_operand\"   \"rI,N,J,m,rJ,e,m,e,J\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,r,m,?e,?e,?W,b\")\n+        (match_operand:DI 1 \"input_operand\"   \"rI,N,J,m,rJ,e,W,e,J\"))]\n   \"TARGET_ARCH64 && TARGET_VIS &&\n    (register_operand (operands[0], DImode)\n     || reg_or_0_operand (operands[1], DImode))\"\n@@ -3272,8 +3272,8 @@\n \n ;; Be careful, fmovd does not exist when !v9.\n (define_insn \"*movdf_insn_sp32\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,T,U,T,o,e,*r,o,e,o\")\n-\t(match_operand:DF 1 \"input_operand\"    \"T#F,e,T,U,G,e,*rFo,*r,o#F,e\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,W,U,T,o,e,*r,o,e,o\")\n+\t(match_operand:DF 1 \"input_operand\"    \"W#F,e,T,U,G,e,*rFo,*r,o#F,e\"))]\n   \"TARGET_FPU\n    && ! TARGET_V9\n    && (register_operand (operands[0], DFmode)\n@@ -3332,8 +3332,8 @@\n ;; We have available v9 double floats but not 64-bit\n ;; integer registers and no VIS.\n (define_insn \"*movdf_insn_v9only_novis\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,T,T,U,T,e,*r,o\")\n-        (match_operand:DF 1 \"input_operand\"    \"e,T#F,G,e,T,U,o#F,*roF,*rGe\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,T,W,U,T,e,*r,o\")\n+        (match_operand:DF 1 \"input_operand\"    \"e,W#F,G,e,T,U,o#F,*roF,*rGe\"))]\n   \"TARGET_FPU\n    && TARGET_V9\n    && ! TARGET_VIS\n@@ -3358,8 +3358,8 @@\n ;; We have available v9 double floats but not 64-bit\n ;; integer registers but we have VIS.\n (define_insn \"*movdf_insn_v9only_vis\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,e,T,T,U,T,e,*r,o\")\n-        (match_operand:DF 1 \"input_operand\" \"G,e,T#F,G,e,T,U,o#F,*roGF,*rGe\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,e,T,W,U,T,e,*r,o\")\n+        (match_operand:DF 1 \"input_operand\" \"G,e,W#F,G,e,T,U,o#F,*roGF,*rGe\"))]\n   \"TARGET_FPU\n    && TARGET_VIS\n    && ! TARGET_ARCH64\n@@ -3384,8 +3384,8 @@\n ;; We have available both v9 double floats and 64-bit\n ;; integer registers. No VIS though.\n (define_insn \"*movdf_insn_sp64_novis\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,m,*r,*r,m,*r\")\n-        (match_operand:DF 1 \"input_operand\"    \"e,m#F,e,*rG,m,*rG,F\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,W,*r,*r,m,*r\")\n+        (match_operand:DF 1 \"input_operand\"    \"e,W#F,e,*rG,m,*rG,F\"))]\n   \"TARGET_FPU\n    && ! TARGET_VIS\n    && TARGET_ARCH64\n@@ -3407,8 +3407,8 @@\n ;; We have available both v9 double floats and 64-bit\n ;; integer registers. And we have VIS.\n (define_insn \"*movdf_insn_sp64_vis\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,e,m,*r,*r,m,*r\")\n-        (match_operand:DF 1 \"input_operand\"    \"G,e,m#F,e,*rG,m,*rG,F\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=e,e,e,W,*r,*r,m,*r\")\n+        (match_operand:DF 1 \"input_operand\"    \"G,e,W#F,e,*rG,m,*rG,F\"))]\n   \"TARGET_FPU\n    && TARGET_VIS\n    && TARGET_ARCH64"}, {"sha": "c5bfd627fa5f2abb30027bc8939c47dcccb30137", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a31a340a148756601d808c40bba14f7c65af895/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=7a31a340a148756601d808c40bba14f7c65af895", "patch": "@@ -1897,6 +1897,9 @@ Memory address aligned to an 8-byte boundary\n @item U\n Even register\n \n+@item W\n+Memory address for @samp{e} constraint registers.\n+\n @end table\n \n @item TMS320C3x/C4x---@file{c4x.h}"}]}