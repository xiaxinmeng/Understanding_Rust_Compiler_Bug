{"sha": "902cf50c93298503d3966675cd01841b97c909e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAyY2Y1MGM5MzI5ODUwM2QzOTY2Njc1Y2QwMTg0MWI5N2M5MDllOA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2003-02-13T17:21:20Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2003-02-13T17:21:20Z"}, "message": "re PR c++/7612 (Memory leaks in cplus-dem.c)\n\n\tFix PR c++/7612.\n\t* cplus-dem.c (demangle_signature): Call string_delete.\n\tRemove extra string_init.\n\t(demangle_arm_hp_template): Call string_delete instead of\n\tstring_clear.  Add missing string_delete call.\n\t(demangle_qualified): Add missing string_delete call.\n\t(do_type): Remove unused variable btype.  Add missing string_delete\n\tcall.  Call string_delete instead of string_clear.\n\t(demangle_fund_type): Move variable btype inside of the switch\n\tstatement.  Add missing string_delete call.\n\t(do_arg): Call string_delete instead of string_clear.  Remove extra\n\tstring_init.\n\t(demangle_nested_args): Free work->previous_argument.\n\nFrom-SVN: r62852", "tree": {"sha": "00a1550f7547f4fa4a0eeaa5515253bed70bc16b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00a1550f7547f4fa4a0eeaa5515253bed70bc16b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/902cf50c93298503d3966675cd01841b97c909e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902cf50c93298503d3966675cd01841b97c909e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902cf50c93298503d3966675cd01841b97c909e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902cf50c93298503d3966675cd01841b97c909e8/comments", "author": null, "committer": null, "parents": [{"sha": "894c84e4d9cf6e9880474b0a0681d03fe7a54209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/894c84e4d9cf6e9880474b0a0681d03fe7a54209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/894c84e4d9cf6e9880474b0a0681d03fe7a54209"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "29ecf9ff720a1d57e74ce6c6d1443b291a4a6cb9", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cf50c93298503d3966675cd01841b97c909e8/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cf50c93298503d3966675cd01841b97c909e8/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=902cf50c93298503d3966675cd01841b97c909e8", "patch": "@@ -1,3 +1,19 @@\n+2003-02-13  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\tFix PR c++/7612.\n+\t* cplus-dem.c (demangle_signature): Call string_delete.\n+\tRemove extra string_init.\n+\t(demangle_arm_hp_template): Call string_delete instead of\n+\tstring_clear.  Add missing string_delete call.\n+\t(demangle_qualified): Add missing string_delete call.\n+\t(do_type): Remove unused variable btype.  Add missing string_delete\n+\tcall.  Call string_delete instead of string_clear.\n+\t(demangle_fund_type): Move variable btype inside of the switch\n+\tstatement.  Add missing string_delete call.\n+\t(do_arg): Call string_delete instead of string_clear.  Remove extra\n+\tstring_init.\n+\t(demangle_nested_args): Free work->previous_argument.\n+\n 2003-02-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* acconfig.h: New file.  Add uintptr_t."}, {"sha": "5eb26a346172e9defeddf41da3dfc9dda3514df0", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/902cf50c93298503d3966675cd01841b97c909e8/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/902cf50c93298503d3966675cd01841b97c909e8/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=902cf50c93298503d3966675cd01841b97c909e8", "patch": "@@ -1429,6 +1429,7 @@ demangle_signature (work, mangled, declp)\n \t      {\n \t\tstring_append (&s, SCOPE_STRING (work));\n \t\tstring_prepends (declp, &s);\n+\t\tstring_delete (&s);\n \t      }\n \t    oldmangled = NULL;\n \t    expect_func = 1;\n@@ -1508,7 +1509,6 @@ demangle_signature (work, mangled, declp)\n \t    {\n \t      /* Read the return type. */\n \t      string return_type;\n-\t      string_init (&return_type);\n \n \t      (*mangled)++;\n \t      success = do_type (work, mangled, &return_type);\n@@ -2321,7 +2321,7 @@ demangle_arm_hp_template (work, mangled, n, declp)\n       string_append (declp, \"<\");\n       while (1)\n         {\n-          string_clear (&arg);\n+          string_delete (&arg);\n           switch (**mangled)\n             {\n               case 'T':\n@@ -2378,7 +2378,7 @@ demangle_arm_hp_template (work, mangled, n, declp)\n       string_append (declp, \"<\");\n       /* should do error checking here */\n       while (args < e) {\n-\tstring_clear (&arg);\n+\tstring_delete (&arg);\n \n \t/* Check for type or literal here */\n \tswitch (*args)\n@@ -2393,6 +2393,7 @@ demangle_arm_hp_template (work, mangled, n, declp)\n \t      goto cfront_template_args_done;\n             string_append (&arg, \"(\");\n             string_appends (&arg, &type_str);\n+            string_delete (&type_str);\n             string_append (&arg, \")\");\n             if (*args != 'L')\n               goto cfront_template_args_done;\n@@ -3350,6 +3351,7 @@ demangle_qualified (work, mangled, result, isfuncname, append)\n             }\n           else\n             {\n+              string_delete (&last_name);\n               success = do_type (work, mangled, &last_name);\n               if (!success)\n                 break;\n@@ -3492,10 +3494,8 @@ do_type (work, mangled, result)\n   string decl;\n   const char *remembered_type;\n   int type_quals;\n-  string btype;\n   type_kind_t tk = tk_none;\n \n-  string_init (&btype);\n   string_init (&decl);\n   string_init (result);\n \n@@ -3613,6 +3613,7 @@ do_type (work, mangled, result)\n \t\tstring temp;\n \t\tdo_type (work, mangled, &temp);\n \t\tstring_prepends (&decl, &temp);\n+\t\tstring_delete (&temp);\n \t      }\n \t    else if (**mangled == 't')\n \t      {\n@@ -3623,7 +3624,7 @@ do_type (work, mangled, result)\n \t\tif (success)\n \t\t  {\n \t\t    string_prependn (&decl, temp.b, temp.p - temp.b);\n-\t\t    string_clear (&temp);\n+\t\t    string_delete (&temp);\n \t\t  }\n \t\telse\n \t\t  break;\n@@ -3803,11 +3804,8 @@ demangle_fund_type (work, mangled, result)\n   int success = 1;\n   char buf[10];\n   unsigned int dec = 0;\n-  string btype;\n   type_kind_t tk = tk_integral;\n \n-  string_init (&btype);\n-\n   /* First pick off any type qualifiers.  There can be more than one.  */\n \n   while (!done)\n@@ -3979,8 +3977,11 @@ demangle_fund_type (work, mangled, result)\n       }\n     case 't':\n       {\n+        string btype;\n+        string_init (&btype);\n         success = demangle_template (work, mangled, &btype, 0, 1, 1);\n         string_appends (result, &btype);\n+        string_delete (&btype);\n         break;\n       }\n     default:\n@@ -4182,12 +4183,9 @@ do_arg (work, mangled, result)\n      do not want to add additional types to the back-referenceable\n      type vector when processing a repeated type.  */\n   if (work->previous_argument)\n-    string_clear (work->previous_argument);\n+    string_delete (work->previous_argument);\n   else\n-    {\n-      work->previous_argument = (string*) xmalloc (sizeof (string));\n-      string_init (work->previous_argument);\n-    }\n+    work->previous_argument = (string*) xmalloc (sizeof (string));\n \n   if (!do_type (work, mangled, work->previous_argument))\n     return 0;\n@@ -4551,7 +4549,10 @@ demangle_nested_args (work, mangled, declp)\n \n   /* Restore the previous_argument field.  */\n   if (work->previous_argument)\n-    string_delete (work->previous_argument);\n+    {\n+      string_delete (work->previous_argument);\n+      free ((char *) work->previous_argument);\n+    }\n   work->previous_argument = saved_previous_argument;\n   --work->forgetting_types;\n   work->nrepeats = saved_nrepeats;"}]}