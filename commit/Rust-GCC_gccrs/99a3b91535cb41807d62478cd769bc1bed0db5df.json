{"sha": "99a3b91535cb41807d62478cd769bc1bed0db5df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlhM2I5MTUzNWNiNDE4MDdkNjI0NzhjZDc2OWJjMWJlZDBkYjVkZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-09T15:18:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-09T15:18:32Z"}, "message": "[AArch64] Specify some SVE ACLE functions in a more generic way\n\nThis patch generalises some boilerplate that becomes much more\ncommon with SVE2 intrinsics.\n\n2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve-builtins-functions.h\n\t(code_for_mode_function): New class.\n\t(CODE_FOR_MODE0, QUIET_CODE_FOR_MODE0): New macros.\n\t* config/aarch64/aarch64-sve-builtins-base.cc (svcompact_impl)\n\t(svext_impl, svmul_lane_impl, svsplice_impl, svtmad_impl): Delete.\n\t(svcompact, svext, svsplice): Use QUIET_CODE_FOR_MODE0.\n\t(svmul_lane, svtmad): Use CODE_FOR_MODE0.\n\nFrom-SVN: r280051", "tree": {"sha": "948fed3af0468ba130e1b96fb033f55f3604c389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/948fed3af0468ba130e1b96fb033f55f3604c389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99a3b91535cb41807d62478cd769bc1bed0db5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a3b91535cb41807d62478cd769bc1bed0db5df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99a3b91535cb41807d62478cd769bc1bed0db5df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99a3b91535cb41807d62478cd769bc1bed0db5df/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "694e6b194b584505e10e89d373eba095df960f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694e6b194b584505e10e89d373eba095df960f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694e6b194b584505e10e89d373eba095df960f26"}], "stats": {"total": 93, "additions": 38, "deletions": 55}, "files": [{"sha": "1c2a4a92d691108edaa4f21db5de0677ffb658db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a3b91535cb41807d62478cd769bc1bed0db5df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a3b91535cb41807d62478cd769bc1bed0db5df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99a3b91535cb41807d62478cd769bc1bed0db5df", "patch": "@@ -1,3 +1,13 @@\n+2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins-functions.h\n+\t(code_for_mode_function): New class.\n+\t(CODE_FOR_MODE0, QUIET_CODE_FOR_MODE0): New macros.\n+\t* config/aarch64/aarch64-sve-builtins-base.cc (svcompact_impl)\n+\t(svext_impl, svmul_lane_impl, svsplice_impl, svtmad_impl): Delete.\n+\t(svcompact, svext, svsplice): Use QUIET_CODE_FOR_MODE0.\n+\t(svmul_lane, svtmad): Use CODE_FOR_MODE0.\n+\n 2020-01-09  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/iterators.md (addsub): New code attribute."}, {"sha": "10af6e9078db2c5ccbd11a479e19d6d1b93547aa", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 5, "deletions": 55, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a3b91535cb41807d62478cd769bc1bed0db5df/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a3b91535cb41807d62478cd769bc1bed0db5df/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=99a3b91535cb41807d62478cd769bc1bed0db5df", "patch": "@@ -533,16 +533,6 @@ class svcntp_impl : public function_base\n   }\n };\n \n-class svcompact_impl : public quiet<function_base>\n-{\n-public:\n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.use_exact_insn (code_for_aarch64_sve_compact (e.vector_mode (0)));\n-  }\n-};\n-\n /* Implements svcreate2, svcreate3 and svcreate4.  */\n class svcreate_impl : public quiet<multi_vector_function>\n {\n@@ -909,16 +899,6 @@ class svdupq_lane_impl : public quiet<function_base>\n   }\n };\n \n-class svext_impl : public quiet<function_base>\n-{\n-public:\n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.use_exact_insn (code_for_aarch64_sve_ext (e.vector_mode (0)));\n-  }\n-};\n-\n /* Implements svextb, svexth and svextw.  */\n class svext_bhw_impl : public function_base\n {\n@@ -1463,16 +1443,6 @@ class svmsb_impl : public function_base\n   }\n };\n \n-class svmul_lane_impl : public function_base\n-{\n-public:\n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.use_exact_insn (code_for_aarch64_mul_lane (e.vector_mode (0)));\n-  }\n-};\n-\n class svnand_impl : public function_base\n {\n public:\n@@ -2002,16 +1972,6 @@ class svsetffr_impl : public function_base\n   }\n };\n \n-class svsplice_impl : public quiet<function_base>\n-{\n-public:\n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.use_exact_insn (code_for_aarch64_sve_splice (e.vector_mode (0)));\n-  }\n-};\n-\n class svst1_impl : public full_width_access\n {\n public:\n@@ -2196,16 +2156,6 @@ class svtbl_impl : public permute\n   }\n };\n \n-class svtmad_impl : public function_base\n-{\n-public:\n-  rtx\n-  expand (function_expander &e) const OVERRIDE\n-  {\n-    return e.use_exact_insn (code_for_aarch64_sve_tmad (e.vector_mode (0)));\n-  }\n-};\n-\n /* Implements svtrn1 and svtrn2.  */\n class svtrn_impl : public binary_permute\n {\n@@ -2522,7 +2472,7 @@ FUNCTION (svcnth_pat, svcnt_bhwd_pat_impl, (VNx8HImode))\n FUNCTION (svcntp, svcntp_impl,)\n FUNCTION (svcntw, svcnt_bhwd_impl, (VNx4SImode))\n FUNCTION (svcntw_pat, svcnt_bhwd_pat_impl, (VNx4SImode))\n-FUNCTION (svcompact, svcompact_impl,)\n+FUNCTION (svcompact, QUIET_CODE_FOR_MODE0 (aarch64_sve_compact),)\n FUNCTION (svcreate2, svcreate_impl, (2))\n FUNCTION (svcreate3, svcreate_impl, (3))\n FUNCTION (svcreate4, svcreate_impl, (4))\n@@ -2538,7 +2488,7 @@ FUNCTION (svdupq_lane, svdupq_lane_impl,)\n FUNCTION (sveor, rtx_code_function, (XOR, XOR, -1))\n FUNCTION (sveorv, reduction, (UNSPEC_XORV))\n FUNCTION (svexpa, unspec_based_function, (-1, -1, UNSPEC_FEXPA))\n-FUNCTION (svext, svext_impl,)\n+FUNCTION (svext, QUIET_CODE_FOR_MODE0 (aarch64_sve_ext),)\n FUNCTION (svextb, svext_bhw_impl, (QImode))\n FUNCTION (svexth, svext_bhw_impl, (HImode))\n FUNCTION (svextw, svext_bhw_impl, (SImode))\n@@ -2610,7 +2560,7 @@ FUNCTION (svmls_lane, svmla_svmls_lane_impl, (UNSPEC_FMLS))\n FUNCTION (svmov, svmov_impl,)\n FUNCTION (svmsb, svmsb_impl,)\n FUNCTION (svmul, rtx_code_function, (MULT, MULT, UNSPEC_COND_FMUL))\n-FUNCTION (svmul_lane, svmul_lane_impl,)\n+FUNCTION (svmul_lane, CODE_FOR_MODE0 (aarch64_mul_lane),)\n FUNCTION (svmulh, unspec_based_function, (UNSPEC_SMUL_HIGHPART,\n \t\t\t\t\t  UNSPEC_UMUL_HIGHPART, -1))\n FUNCTION (svmulx, unspec_based_function, (-1, -1, UNSPEC_COND_FMULX))\n@@ -2686,7 +2636,7 @@ FUNCTION (svset2, svset_impl, (2))\n FUNCTION (svset3, svset_impl, (3))\n FUNCTION (svset4, svset_impl, (4))\n FUNCTION (svsetffr, svsetffr_impl,)\n-FUNCTION (svsplice, svsplice_impl,)\n+FUNCTION (svsplice, QUIET_CODE_FOR_MODE0 (aarch64_sve_splice),)\n FUNCTION (svsqrt, rtx_code_function, (SQRT, SQRT, UNSPEC_COND_FSQRT))\n FUNCTION (svst1, svst1_impl,)\n FUNCTION (svst1_scatter, svst1_scatter_impl,)\n@@ -2703,7 +2653,7 @@ FUNCTION (svstnt1, svstnt1_impl,)\n FUNCTION (svsub, svsub_impl,)\n FUNCTION (svsubr, rtx_code_function_rotated, (MINUS, MINUS, UNSPEC_COND_FSUB))\n FUNCTION (svtbl, svtbl_impl,)\n-FUNCTION (svtmad, svtmad_impl,)\n+FUNCTION (svtmad, CODE_FOR_MODE0 (aarch64_sve_tmad),)\n FUNCTION (svtrn1, svtrn_impl, (0))\n FUNCTION (svtrn2, svtrn_impl, (1))\n FUNCTION (svtsmul, unspec_based_function, (-1, -1, UNSPEC_FTSMUL))"}, {"sha": "97821766ef91e0c9ef21393f5d36ef3c67928775", "filename": "gcc/config/aarch64/aarch64-sve-builtins-functions.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99a3b91535cb41807d62478cd769bc1bed0db5df/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99a3b91535cb41807d62478cd769bc1bed0db5df/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h?ref=99a3b91535cb41807d62478cd769bc1bed0db5df", "patch": "@@ -293,6 +293,29 @@ class unspec_based_function_rotated : public function_base\n   int m_unspec_for_fp;\n };\n \n+/* A function_base that uses CODE_FOR_MODE (M) to get the associated\n+   instruction code, where M is the vector mode associated with type\n+   suffix N.  */\n+template<insn_code (*CODE_FOR_MODE) (machine_mode), unsigned int N>\n+class code_for_mode_function : public function_base\n+{\n+public:\n+  rtx\n+  expand (function_expander &e) const OVERRIDE\n+  {\n+    return e.use_exact_insn (CODE_FOR_MODE (e.vector_mode (N)));\n+  }\n+};\n+\n+/* A function that uses code_for_<PATTERN> (M), where M is the vector\n+   mode associated with the first type suffix.  */\n+#define CODE_FOR_MODE0(PATTERN) code_for_mode_function<code_for_##PATTERN, 0>\n+\n+/* Like CODE_FOR_MODE0, but the function doesn't raise exceptions when\n+   operating on floating-point data.  */\n+#define QUIET_CODE_FOR_MODE0(PATTERN) \\\n+  quiet< code_for_mode_function<code_for_##PATTERN, 0> >\n+\n /* A function_base for functions that permute their arguments.  */\n class permute : public quiet<function_base>\n {"}]}