{"sha": "c100de59ebf2f118ce0757c475b078b6f62d4017", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEwMGRlNTllYmYyZjExOGNlMDc1N2M0NzViMDc4YjZmNjJkNDAxNw==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2008-05-30T00:57:56Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2008-05-30T00:57:56Z"}, "message": "cpplib.h (struct cpp_dir): Add new field, canonical_name.\n\nlibcpp/ChangeLog\n\t* include/cpplib.h (struct cpp_dir): Add new field, canonical_name.\n\ngcc/ChangeLog\n\n\t* incpath.c: Use HOST_LACKS_INODE_NUMBERS conditional\n\trather than OS names to choose INO_T_EQ definition.\n\t(DIRS_EQ) [!INO_T_EQ]: Don't worry about case in comparison.\n\t(add_path) [!INO_T_EQ]: Use lrealpath to fill canonical_name field.\n\nFrom-SVN: r136196", "tree": {"sha": "35dcdd0c466cec159fe8d590dfb3a71beab2939f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35dcdd0c466cec159fe8d590dfb3a71beab2939f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c100de59ebf2f118ce0757c475b078b6f62d4017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c100de59ebf2f118ce0757c475b078b6f62d4017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c100de59ebf2f118ce0757c475b078b6f62d4017", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c100de59ebf2f118ce0757c475b078b6f62d4017/comments", "author": null, "committer": null, "parents": [{"sha": "6551374ace72044a13edb955ff95b89aafe96029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6551374ace72044a13edb955ff95b89aafe96029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6551374ace72044a13edb955ff95b89aafe96029"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "aeff771692be73cabd97fdfbe78cacfd983d4ebd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c100de59ebf2f118ce0757c475b078b6f62d4017/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c100de59ebf2f118ce0757c475b078b6f62d4017/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c100de59ebf2f118ce0757c475b078b6f62d4017", "patch": "@@ -1,3 +1,11 @@\n+2008-05-30  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* incpath.c: Use HOST_LACKS_INODE_NUMBERS conditional\n+\trather than OS names to choose INO_T_EQ definition.\n+\t(DIRS_EQ) [!INO_T_EQ]: Don't worry about case in comparison.\n+\t(add_path) [!INO_T_EQ]: Use lrealpath to fill canonical_name\n+\tfield.\n+\n 2008-05-29  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR target/36348"}, {"sha": "761b1cf6305934d37af29d4b1735919d7d4a02c4", "filename": "gcc/incpath.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c100de59ebf2f118ce0757c475b078b6f62d4017/gcc%2Fincpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c100de59ebf2f118ce0757c475b078b6f62d4017/gcc%2Fincpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fincpath.c?ref=c100de59ebf2f118ce0757c475b078b6f62d4017", "patch": "@@ -31,13 +31,12 @@\n #include \"incpath.h\"\n #include \"cppdefault.h\"\n \n-/* Windows does not natively support inodes, and neither does MSDOS.\n-   Cygwin's emulation can generate non-unique inodes, so don't use it.\n+/* Microsoft Windows does not natively support inodes.\n    VMS has non-numeric inodes.  */\n #ifdef VMS\n # define INO_T_EQ(A, B) (!memcmp (&(A), &(B), sizeof (A)))\n # define INO_T_COPY(DEST, SRC) memcpy(&(DEST), &(SRC), sizeof (SRC))\n-#elif !((defined _WIN32 && !defined (_UWIN)) || defined __MSDOS__)\n+#elif !defined (HOST_LACKS_INODE_NUMBERS)\n # define INO_T_EQ(A, B) ((A) == (B))\n # define INO_T_COPY(DEST, SRC) (DEST) = (SRC)\n #endif\n@@ -46,7 +45,7 @@\n #define DIRS_EQ(A, B) ((A)->dev == (B)->dev \\\n \t&& INO_T_EQ((A)->ino, (B)->ino))\n #else\n-#define DIRS_EQ(A, B) (!strcasecmp ((A)->name, (B)->name))\n+#define DIRS_EQ(A, B) (!strcmp ((A)->canonical_name, (B)->canonical_name))\n #endif\n \n static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n@@ -408,6 +407,9 @@ add_path (char *path, int chain, int cxx_aware, bool user_supplied_p)\n   p = XNEW (cpp_dir);\n   p->next = NULL;\n   p->name = path;\n+#ifndef INO_T_EQ\n+  p->canonical_name = lrealpath (path);\n+#endif\n   if (chain == SYSTEM || chain == AFTER)\n     p->sysp = 1 + !cxx_aware;\n   else"}, {"sha": "6df683eee916b8f36988839f8ca03ace077e708d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c100de59ebf2f118ce0757c475b078b6f62d4017/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c100de59ebf2f118ce0757c475b078b6f62d4017/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c100de59ebf2f118ce0757c475b078b6f62d4017", "patch": "@@ -1,3 +1,7 @@\n+2008-05-30  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* include/cpplib.h (struct cpp_dir): Add new field, canonical_name.\n+\n 2008-05-21  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/27777:"}, {"sha": "92ab291db2cdd350d51100e472550ff944e71d79", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c100de59ebf2f118ce0757c475b078b6f62d4017/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c100de59ebf2f118ce0757c475b078b6f62d4017/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c100de59ebf2f118ce0757c475b078b6f62d4017", "patch": "@@ -508,6 +508,10 @@ struct cpp_dir\n   char *name;\n   unsigned int len;\n \n+  /* The canonicalized NAME as determined by lrealpath.  This field \n+     is only used by hosts that lack reliable inode numbers.  */\n+  char *canonical_name;\n+\n   /* One if a system header, two if a system header that has extern\n      \"C\" guards for C++.  */\n   unsigned char sysp;"}]}