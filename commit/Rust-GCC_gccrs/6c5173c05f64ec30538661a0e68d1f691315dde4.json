{"sha": "6c5173c05f64ec30538661a0e68d1f691315dde4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM1MTczYzA1ZjY0ZWMzMDUzODY2MWEwZTY4ZDFmNjkxMzE1ZGRlNA==", "commit": {"author": {"name": "Daniel Kruegler", "email": "daniel.kruegler@gmail.com", "date": "2012-10-24T20:37:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-10-24T20:37:05Z"}, "message": "type_traits (common_type): Implement LWG 2141.\n\n2012-10-24  Daniel Krugler  <daniel.kruegler@gmail.com>\n\n\t* include/std/type_traits (common_type): Implement LWG 2141.\n\t* testsuite/20_util/duration/requirements/sfinae_friendly_1.cc:\n\tUpdate.\n\t* testsuite/20_util/common_type/requirements/typedefs-1.cc: Likewise.\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n\tLikewise.\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc:\n\tLikewise.\n\t* testsuite/20_util/common_type/requirements/typedefs-2.cc: Likewise.\n\nFrom-SVN: r192780", "tree": {"sha": "b599d6b47751d814e3082fc348b5666a9b442c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b599d6b47751d814e3082fc348b5666a9b442c87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c5173c05f64ec30538661a0e68d1f691315dde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c5173c05f64ec30538661a0e68d1f691315dde4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c5173c05f64ec30538661a0e68d1f691315dde4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c5173c05f64ec30538661a0e68d1f691315dde4/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e5769ce15b051c09cbec5d7b4acf42ff76d78e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5769ce15b051c09cbec5d7b4acf42ff76d78e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5769ce15b051c09cbec5d7b4acf42ff76d78e2"}], "stats": {"total": 155, "additions": 80, "deletions": 75}, "files": [{"sha": "d0a915dea6d897352dc0a7510f2d1c0a4b28ce8f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c5173c05f64ec30538661a0e68d1f691315dde4", "patch": "@@ -1,3 +1,15 @@\n+2012-10-24  Daniel Krugler  <daniel.kruegler@gmail.com>\n+\n+\t* include/std/type_traits (common_type): Implement LWG 2141.\n+\t* testsuite/20_util/duration/requirements/sfinae_friendly_1.cc:\n+\tUpdate.\n+\t* testsuite/20_util/common_type/requirements/typedefs-1.cc: Likewise.\n+\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n+\tLikewise.\n+\t* testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc:\n+\tLikewise.\n+\t* testsuite/20_util/common_type/requirements/typedefs-2.cc: Likewise.\n+\n 2012-10-24   Haakan Younes  <hyounes@google.com>\n \t     Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -247,7 +259,7 @@\n \t* testsuite/23_containers/bitset/45713.cc: Skip for avr*-*-*\n \tcris*-*-* h8300*-*-* mcore*-*-* moxie*-*-*.\n \n-2012-10-11  Daniel Krugler  <daniel.kruegler@googlemail.com>\n+2012-10-11  Daniel Krugler  <daniel.kruegler@gmail.com>\n \n \t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n \tUpdate / extend.\n@@ -289,7 +301,7 @@\n \t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n \tAdjust.\n \n-2012-10-09  Daniel Krugler  <daniel.kruegler@googlemail.com>\n+2012-10-09  Daniel Krugler  <daniel.kruegler@gmail.com>\n \n \t* include/std/type_traits (common_time): Provide \"SFINAE-friendly\"\n \timplementation.\n@@ -466,7 +478,7 @@\n \t* include/ext/random.tcc (rice_distribution<>::__generate_impl):\n \tLikewise.\n \n-2012-10-01  Daniel Krugler  <daniel.kruegler@googlemail.com>\n+2012-10-01  Daniel Krugler  <daniel.kruegler@gmail.com>\n \n \t* include/std/type_traits (result_of): Provide \"SFINAE-friendly\"\n \t(see N3436) implementation.\n@@ -1810,7 +1822,7 @@\n \tPR libstdc++/52689\n \t* testsuite/17_intro/static.cc: New.\n \n-2012-04-23  Daniel Krugler  <daniel.kruegler@googlemail.com>\n+2012-04-23  Daniel Krugler  <daniel.kruegler@gmail.com>\n \n \t* include/std/type_traits (is_nothrow_destructible): Implement.\n \t(is_destructible): Implement LWG 2049."}, {"sha": "11f06c13e904611e7f0af137f36c12425439c819", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=6c5173c05f64ec30538661a0e68d1f691315dde4", "patch": "@@ -1792,9 +1792,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __do_common_type_impl\n   {\n     template<typename _Tp, typename _Up>\n-      static __success_type<decltype\n+      static __success_type<typename decay<decltype\n \t\t\t    (true ? std::declval<_Tp>()\n-\t\t\t     : std::declval<_Up>())> _S_test(int);\n+\t\t\t     : std::declval<_Up>())>::type> _S_test(int);\n \n     template<typename, typename>\n       static __failure_type _S_test(...);\n@@ -1835,7 +1835,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct common_type<_Tp>\n-    { typedef _Tp type; };\n+    { typedef typename decay<_Tp>::type type; };\n \n   template<typename _Tp, typename _Up>\n     struct common_type<_Tp, _Up>"}, {"sha": "d7f3f2eba1f09f3327303b4b672a7f72d560519f", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc", "status": "modified", "additions": 36, "deletions": 52, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc?ref=6c5173c05f64ec30538661a0e68d1f691315dde4", "patch": "@@ -163,23 +163,19 @@ namespace std {\n   };\n }\n \n-#ifdef HAS_53000_FIXED\n-static_assert(is_type<std::common_type<int, int>, int&&>(), \"\");\n-static_assert(is_type<std::common_type<ScEn, ScEn>, ScEn&&>(), \"\");\n-static_assert(is_type<std::common_type<UnscEn, UnscEn>, UnscEn&&>(), \"\");\n-#endif\n+static_assert(is_type<std::common_type<int, int>, int>(), \"\");\n+static_assert(is_type<std::common_type<ScEn, ScEn>, ScEn>(), \"\");\n+static_assert(is_type<std::common_type<UnscEn, UnscEn>, UnscEn>(), \"\");\n static_assert(is_type<std::common_type<UnscEn, int>, int>(), \"\");\n-#ifdef HAS_53000_FIXED\n-static_assert(is_type<std::common_type<int, int, int>, int&&>(), \"\");\n-static_assert(is_type<std::common_type<int, int, int, int>, int&&>(), \"\");\n-static_assert(is_type<std::common_type<int, int, int, int, int>, int&&>(), \"\");\n-static_assert(is_type<std::common_type<S, S>, S&&>(), \"\");\n-static_assert(is_type<std::common_type<const S, const S>, const S&&>(), \"\");\n+static_assert(is_type<std::common_type<int, int, int>, int>(), \"\");\n+static_assert(is_type<std::common_type<int, int, int, int>, int>(), \"\");\n+static_assert(is_type<std::common_type<int, int, int, int, int>, int>(), \"\");\n+static_assert(is_type<std::common_type<S, S>, S>(), \"\");\n+static_assert(is_type<std::common_type<const S, const S>, S>(), \"\");\n static_assert(is_type<std::common_type<std::initializer_list<int>,\n-\t      std::initializer_list<int>>, std::initializer_list<int>&&>(), \"\");\n-static_assert(is_type<std::common_type<B, D>, B&&>(), \"\");\n-static_assert(is_type<std::common_type<D, B>, B&&>(), \"\");\n-#endif\n+\t      std::initializer_list<int>>, std::initializer_list<int>>(), \"\");\n+static_assert(is_type<std::common_type<B, D>, B>(), \"\");\n+static_assert(is_type<std::common_type<D, B>, B>(), \"\");\n static_assert(is_type<std::common_type<F1, F2>, void*>(), \"\");\n static_assert(is_type<std::common_type<F2, F1>, void*>(), \"\");\n static_assert(is_type<std::common_type<G1, G2>, const volatile void*>(), \"\");\n@@ -191,16 +187,12 @@ static_assert(is_type<std::common_type<void*, const volatile int*>,\n static_assert(is_type<std::common_type<void, void>, void>(), \"\");\n static_assert(is_type<std::common_type<const void, const void>, void>(), \"\");\n static_assert(is_type<std::common_type<int&, int&&>, int>(), \"\");\n-static_assert(is_type<std::common_type<int&, int&>, int&>(), \"\");\n-#ifdef HAS_53000_FIXED\n-static_assert(is_type<std::common_type<int&&, int&&>, int&&>(), \"\");\n-static_assert(is_type<std::common_type<int&&, const int&&>, const int&&>(), \"\");\n-#endif\n-static_assert(is_type<std::common_type<U&, const U&&>, const U>(), \"\");\n-static_assert(is_type<std::common_type<U&, U&>, U&>(), \"\");\n-#ifdef HAS_53000_FIXED\n-static_assert(is_type<std::common_type<U&&, U&&>, U&&>(), \"\");\n-#endif\n+static_assert(is_type<std::common_type<int&, int&>, int>(), \"\");\n+static_assert(is_type<std::common_type<int&&, int&&>, int>(), \"\");\n+static_assert(is_type<std::common_type<int&&, const int&&>, int>(), \"\");\n+static_assert(is_type<std::common_type<U&, const U&&>, U>(), \"\");\n+static_assert(is_type<std::common_type<U&, U&>, U>(), \"\");\n+static_assert(is_type<std::common_type<U&&, U&&>, U>(), \"\");\n static_assert(is_type<std::common_type<int B::*, int D::*>, int D::*>(), \"\");\n static_assert(is_type<std::common_type<int D::*, int B::*>, int D::*>(), \"\");\n static_assert(is_type<std::common_type<const int B::*, volatile int D::*>,\n@@ -209,34 +201,28 @@ static_assert(is_type<std::common_type<int (B::*)(), int (D::*)()>,\n \t      int (D::*)()>(), \"\");\n static_assert(is_type<std::common_type<int (B::*)() const, int (D::*)() const>,\n \t      int (D::*)() const>(), \"\");\n-#ifdef HAS_53000_FIXED\n-static_assert(is_type<std::common_type<int[3], int[3]>, int(&&)[3]>(), \"\");\n-#endif\n+static_assert(is_type<std::common_type<int[3], int[3]>, int*>(), \"\");\n static_assert(is_type<std::common_type<int[1], const int[3]>,\n \t      const int*>(), \"\");\n-static_assert(is_type<std::common_type<void(), void()>, void(&)()>(), \"\");\n-static_assert(is_type<std::common_type<void(&)(), void(&)()>, void(&)()>(), \"\");\n+static_assert(is_type<std::common_type<void(), void()>, void(*)()>(), \"\");\n+static_assert(is_type<std::common_type<void(&)(), void(&)()>, void(*)()>(), \"\");\n static_assert(is_type<std::common_type<void(&)(), void(&&)()>,\n-\t      void(&)()>(), \"\");\n+\t      void(*)()>(), \"\");\n static_assert(is_type<std::common_type<void(&&)(), void(&)()>,\n-\t      void(&)()>(), \"\");\n+\t      void(*)()>(), \"\");\n static_assert(is_type<std::common_type<void(&&)(), void(&&)()>,\n-\t      void(&)()>(), \"\");\n+\t      void(*)()>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<int>, int>, int>(), \"\");\n-#ifdef HAS_53000_FIXED\n static_assert(is_type<std::common_type<ImplicitTo<int>, ImplicitTo<int>>,\n-\t      ImplicitTo<int>&&>(), \"\");\n-#endif\n+\t      ImplicitTo<int>>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<int>, int,\n \t      ImplicitTo<int>>, int>(), \"\");\n-#ifdef HAS_53000_FIXED\n static_assert(is_type<std::common_type<ExplicitTo<int>, ExplicitTo<int>>,\n-\t      ExplicitTo<int>&&>(), \"\");\n+\t      ExplicitTo<int>>(), \"\");\n static_assert(is_type<std::common_type<decltype(lmd1), decltype(lmd1)>,\n-\t      decltype(lmd1)&&>(), \"\");\n-#endif\n+\t      decltype(lmd1)>(), \"\");\n static_assert(is_type<std::common_type<decltype(lmd1)&, decltype(lmd1)&>,\n-\t      decltype(lmd1)&>(), \"\");\n+\t      decltype(lmd1)>(), \"\");\n static_assert(is_type<std::common_type<decltype(lmd1)&, decltype(lmd2)&>,\n \t      void(*)(int, double)>(), \"\");\n static_assert(is_type<std::common_type<decltype(nullptr), void*>, void*>(), \"\");\n@@ -251,9 +237,9 @@ static_assert(is_type<std::common_type<decltype(nullptr), int (B::*)() const>,\n \t      int (B::*)() const>(), \"\");\n static_assert(is_type<std::common_type<decltype(nullptr), const int B::*>,\n \t      const int B::*>(), \"\");\n-static_assert(is_type<std::common_type<Abstract&, Abstract&>, Abstract&>(), \"\");\n-static_assert(is_type<std::common_type<Ukn&, Ukn&>, Ukn&>(), \"\");\n-static_assert(is_type<std::common_type<ImplicitTo<B&>, B&>, B&>(), \"\");\n+static_assert(is_type<std::common_type<Abstract&, Abstract&>, Abstract>(), \"\");\n+static_assert(is_type<std::common_type<Ukn&, Ukn&>, Ukn>(), \"\");\n+static_assert(is_type<std::common_type<ImplicitTo<B&>, B&>, B>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<B&>&, B&&>, B>(), \"\");\n static_assert(is_type<std::common_type<UConv1, const Abstract*&>,\n \t      const Abstract*>(), \"\");\n@@ -262,12 +248,12 @@ static_assert(is_type<std::common_type<UConv1&, UConv2&>, Abstract*>(), \"\");\n \n #ifdef HAS_53000_FIXED\n static_assert(is_type<std::common_type<Abstract&&, Abstract&&>,\n-\t      Abstract&&>(), \"\");\n+\t      Abstract>(), \"\");\n static_assert(is_type<std::common_type<const Abstract&&,\n-\t\t\t\t       volatile Abstract&&>, const volatile Abstract&&>(), \"\");\n-static_assert(is_type<std::common_type<Ukn&&, Ukn&&>, Ukn&&>(), \"\");\n+\t\t\t\t       volatile Abstract&&>, Abstract>(), \"\");\n+static_assert(is_type<std::common_type<Ukn&&, Ukn&&>, Ukn>(), \"\");\n static_assert(is_type<std::common_type<const Ukn&&, volatile Ukn&&>,\n-\t      const volatile Ukn&&>(), \"\");\n+\t      Ukn>(), \"\");\n #endif\n \n static_assert(is_type<std::common_type<X1, X2>, RX12>(), \"\");\n@@ -337,14 +323,12 @@ void test(int i)\n   auto local_lmd1 = [=](int, double) { return i + i; };\n   auto local_lmd2 = [=](int, double) { return i - i; };\n \n-#ifdef HAS_53000_FIXED\n   static_assert(is_type<std::common_type<decltype(local_lmd1),\n-\t\t        decltype(local_lmd1)>, decltype(local_lmd1)&&>(), \"\");\n-#endif\n+\t\t        decltype(local_lmd1)>, decltype(local_lmd1)>(), \"\");\n   static_assert(is_type<std::common_type<decltype(local_lmd1)&,\n \t\t        decltype(local_lmd1)>, decltype(local_lmd1)>(), \"\");\n   static_assert(is_type<std::common_type<decltype(local_lmd1)&,\n-\t\t\tdecltype(local_lmd1)&>, decltype(local_lmd1)&>(), \"\");\n+\t\t\tdecltype(local_lmd1)&>, decltype(local_lmd1)>(), \"\");\n \n   static_assert(!has_type<std::common_type<decltype(local_lmd1),\n \t\tdecltype(lmd1)>>(), \"\");"}, {"sha": "2ab5d94141a3c62bb9d4b0f0af589df951e2d1b7", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc?ref=6c5173c05f64ec30538661a0e68d1f691315dde4", "patch": "@@ -24,12 +24,11 @@\n \n template<typename... Args>\n constexpr\n-std::array<typename std::decay<typename std::common_type<Args...>::type>::type, \n+std::array<typename std::common_type<Args...>::type, \n   sizeof...(Args)>\n make_array(Args&&... args)  // { dg-error \"invalid use\" }\n {\n-  typedef typename std::decay<typename std::common_type<Args...>::type>::type \n-    CT;\n+  typedef typename std::common_type<Args...>::type CT;\n   return std::array<CT, sizeof...(Args)>{static_cast<CT>\n       (std::forward<Args>(args))...};\n }\n@@ -39,10 +38,26 @@ void test01()\n   constexpr auto a1 = make_array(0);\n   constexpr auto a2 = make_array(0, 1.2);\n   constexpr auto a3 = make_array(5, true, 3.1415f, 'c');\n+  \n+  int i{};\n+  double d{1.2};\n+  float f{3.1415f};\n+  \n+  auto b1 = make_array(i);\n+  auto b2 = make_array(i, 1.2);\n+  auto b3 = make_array(i, d);\n+  auto b4 = make_array(0, d);\n+  auto b5 = make_array(i, true, f, 'c');\n \n   static_assert(std::is_same<decltype(a1), const std::array<int, 1>>(), \"\");\n   static_assert(std::is_same<decltype(a2), const std::array<double, 2>>(), \"\");\n   static_assert(std::is_same<decltype(a3), const std::array<float, 4>>(), \"\");\n+\n+  static_assert(std::is_same<decltype(b1), std::array<int, 1>>(), \"\");\n+  static_assert(std::is_same<decltype(b2), std::array<double, 2>>(), \"\");\n+  static_assert(std::is_same<decltype(b3), std::array<double, 2>>(), \"\");\n+  static_assert(std::is_same<decltype(b4), std::array<double, 2>>(), \"\");\n+  static_assert(std::is_same<decltype(b5), std::array<float, 4>>(), \"\");\n }\n \n void test02()"}, {"sha": "2d6babef02c779eb0a541cbe94d721cf631e27be", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/typedefs-1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc?ref=6c5173c05f64ec30538661a0e68d1f691315dde4", "patch": "@@ -105,7 +105,7 @@ void test02()\n   COMMON_TYPE_TEST_ALL_2(int, int, int, 1);\n   COMMON_TYPE_TEST_ALL_2(int, double, double, 2);\n   COMMON_TYPE_TEST_2(NO_CV, A, A, A, 3);\n-  COMMON_TYPE_TEST_2(const, A, A, const A, 4);\n+  COMMON_TYPE_TEST_2(const, A, A, A, 4);\n   COMMON_TYPE_TEST_2(NO_CV, B, A, A, 5);  \n }\n "}, {"sha": "3fd3024c682b4cca1a1bc100cc4b4100efa5688e", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/typedefs-2.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc?ref=6c5173c05f64ec30538661a0e68d1f691315dde4", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // 2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -29,10 +29,9 @@ void test01()\n   using std::is_same;\n \n   VERIFY( (is_same<common_type<void>::type, void>::value) );\n-  VERIFY( (is_same<common_type<const void>::type, const void>::value) );\n-  VERIFY( (is_same<common_type<volatile void>::type, volatile void>::value) );\n-  VERIFY( (is_same<common_type<const volatile void>::type,\n-\t           const volatile void>::value) );\n+  VERIFY( (is_same<common_type<const void>::type, void>::value) );\n+  VERIFY( (is_same<common_type<volatile void>::type, void>::value) );\n+  VERIFY( (is_same<common_type<const volatile void>::type, void>::value) );\n \n   VERIFY( (is_same<common_type<void, void>::type, void>::value) );\n   VERIFY( (is_same<common_type<void, const void>::type, void>::value) );"}, {"sha": "48b0197d91163694d2b16031c15c17d984dd0eed", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/sfinae_friendly_1.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fsfinae_friendly_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c5173c05f64ec30538661a0e68d1f691315dde4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fsfinae_friendly_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fsfinae_friendly_1.cc?ref=6c5173c05f64ec30538661a0e68d1f691315dde4", "patch": "@@ -21,9 +21,6 @@\n #include <type_traits>\n #include <chrono>\n \n-//TODO: Uncomment this once gcc bug 53000 has been resolved:\n-//#define HAS_53000_FIXED\n-\n // Helper types:\n struct has_type_impl\n {\n@@ -55,10 +52,8 @@ typedef std::chrono::duration<int, std::nano> din;\n typedef std::chrono::duration<double, std::nano> ddn;\n typedef std::chrono::duration<int, std::milli> dim;\n \n-#ifdef HAS_53000_FIXED\n-static_assert(is_type<std::common_type<din, din>, din&&>(), \"\");\n-static_assert(is_type<std::common_type<din, din, din>, din&&>(), \"\");\n-#endif\n+static_assert(is_type<std::common_type<din, din>, din>(), \"\");\n+static_assert(is_type<std::common_type<din, din, din>, din>(), \"\");\n \n static_assert(is_type<std::common_type<din, ddn>, ddn>(), \"\");\n static_assert(is_type<std::common_type<din, din, ddn>, ddn>(), \"\");"}]}