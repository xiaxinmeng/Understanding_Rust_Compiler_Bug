{"sha": "f2264ac2cd6325b96d5a742ce72159a011636f38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyNjRhYzJjZDYzMjViOTZkNWE3NDJjZTcyMTU5YTAxMTYzNmYzOA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-26T13:12:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-26T13:12:34Z"}, "message": "sem_ch13.adb (Build_Invariant_Procedure): New calling sequence.\n\n2010-10-26  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Build_Invariant_Procedure): New calling sequence.\n\t(Build_Invariant_Procedure): Properly handle analysis of invariant\n\texpression with proper end-of-visible-decls visibility.\n\t* sem_ch13.ads (Build_Invariant_Procedure): Changed calling sequence.\n\t* sem_ch3.adb (Process_Full_View): Don't build invariant procedure\n\t(too late).\n\t(Analyze_Private_Extension_Declaration): Propagate invariant flags.\n\t* sem_ch7.adb (Analyze_Package_Specification): Build invariant\n\tprocedures.\n\nFrom-SVN: r165960", "tree": {"sha": "8a6ecde825359b408b09247b4efe229b7d9826f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a6ecde825359b408b09247b4efe229b7d9826f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2264ac2cd6325b96d5a742ce72159a011636f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2264ac2cd6325b96d5a742ce72159a011636f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2264ac2cd6325b96d5a742ce72159a011636f38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2264ac2cd6325b96d5a742ce72159a011636f38/comments", "author": null, "committer": null, "parents": [{"sha": "1ce9dff334e66750cfc2a42509c8bed0d7a16f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce9dff334e66750cfc2a42509c8bed0d7a16f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce9dff334e66750cfc2a42509c8bed0d7a16f63"}], "stats": {"total": 182, "additions": 101, "deletions": 81}, "files": [{"sha": "b5ecd08fa15b352ca2dc5b8ea02b0ab148a092e0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2264ac2cd6325b96d5a742ce72159a011636f38", "patch": "@@ -1,3 +1,15 @@\n+2010-10-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Invariant_Procedure): New calling sequence.\n+\t(Build_Invariant_Procedure): Properly handle analysis of invariant\n+\texpression with proper end-of-visible-decls visibility.\n+\t* sem_ch13.ads (Build_Invariant_Procedure): Changed calling sequence.\n+\t* sem_ch3.adb (Process_Full_View): Don't build invariant procedure\n+\t(too late).\n+\t(Analyze_Private_Extension_Declaration): Propagate invariant flags.\n+\t* sem_ch7.adb (Analyze_Package_Specification): Build invariant\n+\tprocedures.\n+\n 2010-10-26  Vincent Celier  <celier@adacore.com>\n \n \t* opt.ads (Old_Checksums, Old_Old_Checksums): New Boolean flags,"}, {"sha": "d2e8958c8f255042e7ef5c60ace1898283fb6ae6", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f2264ac2cd6325b96d5a742ce72159a011636f38", "patch": "@@ -3549,15 +3549,16 @@ package body Sem_Ch13 is\n    --     ...\n    --  end typInvariant;\n \n-   procedure Build_Invariant_Procedure\n-     (Typ   : Entity_Id;\n-      PDecl : out Node_Id;\n-      PBody : out Node_Id)\n-   is\n+   procedure Build_Invariant_Procedure (Typ : Entity_Id; N : Node_Id) is\n       Loc   : constant Source_Ptr := Sloc (Typ);\n       Stmts : List_Id;\n       Spec  : Node_Id;\n       SId   : Entity_Id;\n+      PDecl : Node_Id;\n+      PBody : Node_Id;\n+\n+      Visible_Decls : constant List_Id := Visible_Declarations (N);\n+      Private_Decls : constant List_Id := Private_Declarations (N);\n \n       procedure Add_Invariants (T : Entity_Id; Inherit : Boolean);\n       --  Appends statements to Stmts for any invariants in the rep item chain\n@@ -3570,6 +3571,10 @@ package body Sem_Ch13 is\n       Object_Name : constant Name_Id := New_Internal_Name ('I');\n       --  Name for argument of invariant procedure\n \n+      Object_Entity : constant Node_Id :=\n+                        Make_Defining_Identifier (Loc, Object_Name);\n+      --  The procedure declaration entity for the argument\n+\n       --------------------\n       -- Add_Invariants --\n       --------------------\n@@ -3594,7 +3599,10 @@ package body Sem_Ch13 is\n            new Replace_Type_References_Generic (Replace_Type_Reference);\n          --  Traverse an expression replacing all occurrences of the subtype\n          --  name with appropriate references to the object that is the formal\n-         --  parameter of the predicate function.\n+         --  parameter of the predicate function. Note that we must ensure\n+         --  that the type and entity information is properly set in the\n+         --  replacement node, since we will do a Preanalyze call of this\n+         --  expression without proper visibility of the procedure argument.\n \n          ----------------------------\n          -- Replace_Type_Reference --\n@@ -3616,12 +3624,15 @@ package body Sem_Ch13 is\n                      Make_Identifier (Loc,\n                        Chars => Object_Name)));\n \n+               Set_Entity (Expression (N), Object_Entity);\n+               Set_Etype  (Expression (N), Typ);\n+\n             --  Invariant, replace with obj\n \n             else\n-               Rewrite (N,\n-                 Make_Identifier (Loc,\n-                   Chars => Object_Name));\n+               Rewrite (N, Make_Identifier (Loc, Chars => Object_Name));\n+               Set_Entity (N, Object_Entity);\n+               Set_Etype  (N, Typ);\n             end if;\n          end Replace_Type_Reference;\n \n@@ -3668,13 +3679,20 @@ package body Sem_Ch13 is\n \n                Replace_Type_References (Exp, Chars (T));\n \n+               --  Now we need to preanalyze the expression to properly capture\n+               --  the visibility in the visible part. The expression will not\n+               --  be analyzed for real until the body is analyzed, but that is\n+               --  at the end of the private part and has the wrong visibility.\n+\n+               Set_Parent (Exp, N);\n+               Preanalyze_Spec_Expression (Exp, Standard_Boolean);\n+\n                --  Build first two arguments for Check pragma\n \n                Assoc := New_List (\n                  Make_Pragma_Argument_Association (Loc,\n                     Expression =>\n-                      Make_Identifier (Loc,\n-                        Chars => Name_Invariant)),\n+                      Make_Identifier (Loc, Chars => Name_Invariant)),\n                   Make_Pragma_Argument_Association (Loc,\n                     Expression => Exp));\n \n@@ -3705,8 +3723,7 @@ package body Sem_Ch13 is\n                Append_To (Stmts,\n                  Make_Pragma (Loc,\n                    Pragma_Identifier            =>\n-                     Make_Identifier (Loc,\n-                       Chars => Name_Check),\n+                     Make_Identifier (Loc, Chars => Name_Check),\n                    Pragma_Argument_Associations => Assoc));\n \n                --  If Inherited case and option enabled, output info msg. Note\n@@ -3731,6 +3748,7 @@ package body Sem_Ch13 is\n       Stmts := No_List;\n       PDecl := Empty;\n       PBody := Empty;\n+      Set_Etype (Object_Entity, Typ);\n \n       --  Add invariants for the current type\n \n@@ -3766,7 +3784,6 @@ package body Sem_Ch13 is\n \n          --  Build procedure declaration\n \n-         pragma Assert (Has_Invariants (Typ));\n          SId :=\n            Make_Defining_Identifier (Loc,\n              Chars => New_External_Name (Chars (Typ), \"Invariant\"));\n@@ -3778,15 +3795,10 @@ package body Sem_Ch13 is\n              Defining_Unit_Name       => SId,\n              Parameter_Specifications => New_List (\n                Make_Parameter_Specification (Loc,\n-                 Defining_Identifier =>\n-                   Make_Defining_Identifier (Loc,\n-                     Chars => Object_Name),\n-                 Parameter_Type =>\n-                   New_Occurrence_Of (Typ, Loc))));\n+                 Defining_Identifier => Object_Entity,\n+                 Parameter_Type      => New_Occurrence_Of (Typ, Loc))));\n \n-         PDecl :=\n-           Make_Subprogram_Declaration (Loc,\n-             Specification => Spec);\n+         PDecl := Make_Subprogram_Declaration (Loc, Specification => Spec);\n \n          --  Build procedure body\n \n@@ -3812,6 +3824,27 @@ package body Sem_Ch13 is\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => Stmts));\n+\n+         --  Insert procedure declaration and spec at the appropriate points.\n+         --  Skip this if there are no private declarations (that's an error\n+         --  that will be diagnosed elsewhere, and there is no point in having\n+         --  an invariant procedure set if the full declaration is missing).\n+\n+         if Present (Private_Decls) then\n+\n+            --  The spec goes at the end of visible declarations, but they have\n+            --  already been analyzed, so we need to explicitly do the analyze.\n+\n+            Append_To (Visible_Decls, PDecl);\n+            Analyze (PDecl);\n+\n+            --  The body goes at the end of the private declarations, which we\n+            --  have not analyzed yet, so we do not need to perform an explicit\n+            --  analyze call. We skip this if there are no private declarations\n+            --  (this is an error that will be caught elsewhere);\n+\n+            Append_To (Private_Decls, PBody);\n+         end if;\n       end if;\n    end Build_Invariant_Procedure;\n "}, {"sha": "1c51a27e32e05f204d75011bc1b76d37e6154832", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=f2264ac2cd6325b96d5a742ce72159a011636f38", "patch": "@@ -52,17 +52,16 @@ package Sem_Ch13 is\n    --  order is specified and there is at least one component clause. Adjusts\n    --  component positions according to either Ada 95 or Ada 2005 (AI-133).\n \n-   procedure Build_Invariant_Procedure\n-     (Typ   : Entity_Id;\n-      PDecl : out Node_Id;\n-      PBody : out Node_Id);\n-   --  If Typ has Invariants (indicated by Has_Invariants being set for Typ,\n-   --  indicating the presence of pragma Invariant entries on the rep chain,\n-   --  note that Invariant aspects are converted to pragma Invariant), then\n-   --  this procedure builds the spec and body for the corresponding Invariant\n-   --  procedure, returning themn in PDecl and PBody. Invariant_Procedure is\n-   --  set for Typ. In some error situations no procedure is built, in which\n-   --  case PDecl/PBody are empty on return.\n+   procedure Build_Invariant_Procedure (Typ : Entity_Id; N : Node_Id);\n+   --  Typ is a private type with invariants (indicated by Has_Invariants being\n+   --  set for Typ, indicating the presence of pragma Invariant entries on the\n+   --  rep chain, note that Invariant aspects have already been converted to\n+   --  pragma Invariant), then this procedure builds the spec and body for the\n+   --  corresponding Invariant procedure, inserting them at appropriate points\n+   --  in the package specification N. Invariant_Procedure is set for Typ. Note\n+   --  that this procedure is called at the end of processing the declarations\n+   --  in the visible part (i.e. the right point for visibility analysis of\n+   --  the invariant expression).\n \n    procedure Check_Record_Representation_Clause (N : Node_Id);\n    --  This procedure completes the analysis of a record representation clause"}, {"sha": "60caeb99f9cf3f714cad4db817742dc428d4ecec", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 47, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f2264ac2cd6325b96d5a742ce72159a011636f38", "patch": "@@ -3731,6 +3731,15 @@ package body Sem_Ch3 is\n \n       Build_Derived_Record_Type (N, Parent_Type, T);\n \n+      --  Propagate inherited invariant information. The new type has\n+      --  invariants, if the parent type has inheritable invariants,\n+      --  and these invariants can in turn be inherited.\n+\n+      if Has_Inheritable_Invariants (Parent_Type) then\n+         Set_Has_Inheritable_Invariants (T);\n+         Set_Has_Invariants (T);\n+      end if;\n+\n       --  Ada 2005 (AI-443): Synchronized private extension or a rewritten\n       --  synchronized formal derived type.\n \n@@ -17439,58 +17448,15 @@ package body Sem_Ch3 is\n          Set_Has_Specified_Stream_Output (Full_T);\n       end if;\n \n-      --  Deal with invariants\n+      --  Propagate invariants to full type\n \n-      if Has_Invariants (Full_T)\n-           or else\n-         Has_Invariants (Priv_T)\n-      then\n+      if Has_Invariants (Priv_T) then\n          Set_Has_Invariants (Full_T);\n-         Set_Has_Invariants (Priv_T);\n+         Set_Invariant_Procedure (Full_T, Invariant_Procedure (Priv_T));\n       end if;\n \n-      if Has_Inheritable_Invariants (Full_T)\n-           or else\n-         Has_Inheritable_Invariants (Priv_T)\n-      then\n+      if Has_Inheritable_Invariants (Priv_T) then\n          Set_Has_Inheritable_Invariants (Full_T);\n-         Set_Has_Inheritable_Invariants (Priv_T);\n-      end if;\n-\n-      --  This is where we build the invariant procedure if needed\n-\n-      if Has_Invariants (Priv_T) then\n-         declare\n-            PDecl : Entity_Id;\n-            PBody : Entity_Id;\n-            Packg : constant Node_Id := Declaration_Node (Scope (Priv_T));\n-\n-         begin\n-            Build_Invariant_Procedure (Full_T, PDecl, PBody);\n-\n-            --  Error defense, normally these should be set\n-\n-            if Present (PDecl) and then Present (PBody) then\n-\n-               --  Spec goes at the end of the public part of the package.\n-               --  That's behind us, so we have to manually analyze the\n-               --  inserted spec.\n-\n-               Append_To (Visible_Declarations (Packg), PDecl);\n-               Analyze (PDecl);\n-\n-               --  Body goes at the end of the private part of the package.\n-               --  That's ahead of us so it will get analyzed later on when\n-               --  we come to it.\n-\n-               Append_To (Private_Declarations (Packg), PBody);\n-\n-               --  Copy Invariant procedure to private declaration\n-\n-               Set_Invariant_Procedure (Priv_T, Invariant_Procedure (Full_T));\n-               Set_Has_Invariants (Priv_T);\n-            end if;\n-         end;\n       end if;\n \n       --  Propagate predicates to full type"}, {"sha": "b769357dd80001309f6a1f82a0d21538da30f00a", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2264ac2cd6325b96d5a742ce72159a011636f38/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=f2264ac2cd6325b96d5a742ce72159a011636f38", "patch": "@@ -1128,16 +1128,26 @@ package body Sem_Ch7 is\n          Analyze_Declarations (Vis_Decls);\n       end if;\n \n-      --  Verify that incomplete types have received full declarations\n+      --  Verify that incomplete types have received full declarations and\n+      --  also build invariant procedures for any types with invariants.\n \n       E := First_Entity (Id);\n       while Present (E) loop\n+\n+         --  Check on incomplete types\n+\n          if Ekind (E) = E_Incomplete_Type\n            and then No (Full_View (E))\n          then\n             Error_Msg_N (\"no declaration in visible part for incomplete}\", E);\n          end if;\n \n+         --  Build invariant procedures\n+\n+         if Is_Type (E) and then Has_Invariants (E) then\n+            Build_Invariant_Procedure (E, N);\n+         end if;\n+\n          Next_Entity (E);\n       end loop;\n "}]}