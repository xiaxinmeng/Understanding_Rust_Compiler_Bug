{"sha": "bc41faa231ce34036ff2217d887f75357f0aee77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM0MWZhYTIzMWNlMzQwMzZmZjIyMTdkODg3Zjc1MzU3ZjBhZWU3Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:48:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:48:53Z"}, "message": "sem_ch8.adb (Find_Type): If node is a reference to 'Base and the prefix is not a scalar type...\n\n\t* sem_ch8.adb (Find_Type): If node is a reference to 'Base and the\n\tprefix is not a scalar type, place error message on prefix, not on\n\ttype entity.\n\nFrom-SVN: r91894", "tree": {"sha": "51fe8a2c3c267829f3470e2788399458d5720f36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51fe8a2c3c267829f3470e2788399458d5720f36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc41faa231ce34036ff2217d887f75357f0aee77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc41faa231ce34036ff2217d887f75357f0aee77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc41faa231ce34036ff2217d887f75357f0aee77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc41faa231ce34036ff2217d887f75357f0aee77/comments", "author": null, "committer": null, "parents": [{"sha": "e2d6a9e577a281708dabbfd4666ae1b6bdd5d018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2d6a9e577a281708dabbfd4666ae1b6bdd5d018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2d6a9e577a281708dabbfd4666ae1b6bdd5d018"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "7c9e607becba1c8e64e9789570769990c8a42548", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc41faa231ce34036ff2217d887f75357f0aee77/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc41faa231ce34036ff2217d887f75357f0aee77/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=bc41faa231ce34036ff2217d887f75357f0aee77", "patch": "@@ -471,7 +471,7 @@ package body Sem_Ch8 is\n    --  to one of these types.\n \n    procedure Premature_Usage (N : Node_Id);\n-   --  Diagnose usage of an entity before it is visible.\n+   --  Diagnose usage of an entity before it is visible\n \n    procedure Use_One_Package (P : Entity_Id; N : Node_Id);\n    --  Make visible entities declared in package P potentially use-visible\n@@ -754,7 +754,7 @@ package body Sem_Ch8 is\n                   and then Is_Function_Attribute_Name\n                     (Attribute_Name (Original_Node (Nam))))\n \n-            --  Weird but legal, equivalent to renaming a function call.\n+            --  Weird but legal, equivalent to renaming a function call\n \n         or else (Is_Entity_Name (Nam)\n                   and then Ekind (Entity (Nam)) = E_Enumeration_Literal)\n@@ -842,7 +842,7 @@ package body Sem_Ch8 is\n                Name (N), Old_P);\n          end if;\n \n-         --  Set basic attributes to minimize cascaded errors.\n+         --  Set basic attributes to minimize cascaded errors\n \n          Set_Ekind (New_P, E_Package);\n          Set_Etype (New_P, Standard_Void_Type);\n@@ -1016,7 +1016,7 @@ package body Sem_Ch8 is\n    begin\n       if Entity (Sel) = Any_Id then\n \n-         --  Selector is undefined on prefix. Error emitted already.\n+         --  Selector is undefined on prefix. Error emitted already\n \n          Set_Has_Completion (New_S);\n          return;\n@@ -1142,7 +1142,7 @@ package body Sem_Ch8 is\n \n                if Orig_Subp = Rename_Spec then\n \n-                  --  Circularity detected.\n+                  --  Circularity detected\n \n                   return Orig_Subp;\n \n@@ -1587,7 +1587,7 @@ package body Sem_Ch8 is\n          Error_Msg_N (\"use clause not allowed in predefined spec\", N);\n       end if;\n \n-      --  Chain clause to list of use clauses in current scope.\n+      --  Chain clause to list of use clauses in current scope\n \n       if Nkind (Parent (N)) /= N_Compilation_Unit then\n          Chain_Use_Clause (N);\n@@ -1669,7 +1669,7 @@ package body Sem_Ch8 is\n    begin\n       Set_Hidden_By_Use_Clause (N, No_Elist);\n \n-      --  Chain clause to list of use clauses in current scope.\n+      --  Chain clause to list of use clauses in current scope\n \n       if Nkind (Parent (N)) /= N_Compilation_Unit then\n          Chain_Use_Clause (N);\n@@ -2012,7 +2012,7 @@ package body Sem_Ch8 is\n          then\n             Par := Nam;\n \n-            --  Find root library unit in with_clause.\n+            --  Find root library unit in with_clause\n \n             while Nkind (Par) = N_Expanded_Name loop\n                Par := Prefix (Par);\n@@ -2415,7 +2415,7 @@ package body Sem_Ch8 is\n       Msg  : Boolean;\n \n       Inst : Entity_Id := Empty;\n-      --  Enclosing instance, if any.\n+      --  Enclosing instance, if any\n \n       Homonyms : Entity_Id;\n       --  Saves start of homonym chain\n@@ -3023,7 +3023,7 @@ package body Sem_Ch8 is\n             --      V2 : Integer := B;\n             --    end C;\n \n-            --  V1 resolves to A.B, but V2 resolves to library unit B.\n+            --  V1 resolves to A.B, but V2 resolves to library unit B\n \n             elsif Ekind (E2) = E_Function\n               and then Scope (E2) = Standard_Standard\n@@ -3061,7 +3061,7 @@ package body Sem_Ch8 is\n             if In_Instance then\n                Inst := Current_Scope;\n \n-               --  Find current instance.\n+               --  Find current instance\n \n                while Present (Inst)\n                  and then Inst /= Standard_Standard\n@@ -3199,7 +3199,7 @@ package body Sem_Ch8 is\n          then\n             Collect_Interps (N);\n \n-            --  If no homonyms were visible, the entity is unambiguous.\n+            --  If no homonyms were visible, the entity is unambiguous\n \n             if not Is_Overloaded (N) then\n                Generate_Reference (E, N);\n@@ -3227,7 +3227,7 @@ package body Sem_Ch8 is\n                   Set_Referenced (E, R);\n                end;\n \n-            --  Normal case, not a label. Generate reference.\n+            --  Normal case, not a label. Generate reference\n \n             else\n                Generate_Reference (E, N);\n@@ -3357,16 +3357,15 @@ package body Sem_Ch8 is\n          --  the formals, which is declared in the enclosing wrapper package.\n \n          P_Name := Scope (P_Name);\n-         Id := Current_Entity (Selector);\n \n+         Id := Current_Entity (Selector);\n          while Present (Id) loop\n-            exit when  Scope (Id) = P_Name;\n+            exit when Scope (Id) = P_Name;\n             Id := Homonym (Id);\n          end loop;\n       end if;\n \n-      if No (Id) or else Chars (Id) /=  Chars (Selector) then\n-\n+      if No (Id) or else Chars (Id) /= Chars (Selector) then\n          Set_Etype (N, Any_Type);\n \n          --  If we are looking for an entity defined in System, try to\n@@ -3488,7 +3487,7 @@ package body Sem_Ch8 is\n \n                   Error_Msg_NE (\"& not declared in&\", N, Selector);\n \n-                  --  Check for misspelling of some entity in prefix.\n+                  --  Check for misspelling of some entity in prefix\n \n                   Id := First_Entity (P_Name);\n                   Get_Name_String (Chars (Selector));\n@@ -4102,7 +4101,7 @@ package body Sem_Ch8 is\n \n             if Is_Overloaded (P) then\n \n-               --  The prefix must resolve to a unique enclosing construct.\n+               --  The prefix must resolve to a unique enclosing construct\n \n                declare\n                   Found : Boolean := False;\n@@ -4345,7 +4344,8 @@ package body Sem_Ch8 is\n                  and then not Is_Generic_Type (Typ)\n                then\n                   Error_Msg_N\n-                    (\"prefix of Base attribute must be scalar type\", Typ);\n+                    (\"prefix of Base attribute must be scalar type\",\n+                      Prefix (N));\n \n                elsif Sloc (Typ) = Standard_Location\n                  and then Base_Type (Typ) = Typ\n@@ -4637,7 +4637,7 @@ package body Sem_Ch8 is\n                Next_Entity (Id);\n             end loop;\n \n-         --  Equality: look for any non-limited type. Result is Boolean.\n+         --  Equality: look for any non-limited type (result is Boolean)\n \n          when Name_Op_Eq | Name_Op_Ne =>\n \n@@ -4654,7 +4654,7 @@ package body Sem_Ch8 is\n                Next_Entity (Id);\n             end loop;\n \n-         --  Comparison operators: scalar type, or array of scalar.\n+         --  Comparison operators: scalar type, or array of scalar\n \n          when Name_Op_Lt | Name_Op_Le | Name_Op_Gt | Name_Op_Ge =>\n \n@@ -5160,7 +5160,7 @@ package body Sem_Ch8 is\n    --  Start of processing for Present_System_Aux\n \n    begin\n-      --  The child unit may have been loaded and analyzed already.\n+      --  The child unit may have been loaded and analyzed already\n \n       if Present (System_Aux_Id) then\n          return True;\n@@ -5278,7 +5278,7 @@ package body Sem_Ch8 is\n       SS_Last   : constant Int := Scope_Stack.Last;\n \n    begin\n-      --  Restore visibility of previous scope stack, if any.\n+      --  Restore visibility of previous scope stack, if any\n \n       for J in reverse 0 .. Scope_Stack.Last loop\n          exit when  Scope_Stack.Table (J).Entity = Standard_Standard\n@@ -5488,7 +5488,7 @@ package body Sem_Ch8 is\n          Error_Msg_N (\"limited withed package cannot appear in use clause\", N);\n       end if;\n \n-      --  Find enclosing instance, if any.\n+      --  Find enclosing instance, if any\n \n       if In_Instance then\n          Current_Instance := Current_Scope;\n@@ -5597,7 +5597,7 @@ package body Sem_Ch8 is\n             Prev := Homonym (Prev);\n          end loop;\n \n-         --  On exit, we know entity is not hidden, unless it is private.\n+         --  On exit, we know entity is not hidden, unless it is private\n \n          if not Is_Hidden (Id)\n            and then ((not Is_Child_Unit (Id))"}]}