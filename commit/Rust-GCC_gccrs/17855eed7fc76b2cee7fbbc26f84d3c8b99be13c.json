{"sha": "17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc4NTVlZWQ3ZmM3NmIyY2VlN2ZiYmMyNmY4NGQzYzhiOTliZTEzYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-14T19:14:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-15T15:25:42Z"}, "message": "libstdc++: Fix std::get<T> for std::tuple [PR101427]\n\nThe std::get<T> functions relied on deduction failing if more than one\nbase class existed for the type T.  However the implementation of Core\nDR 2303 (in r11-4693) made deduction succeed (and select the\nmore-derived base class).\n\nThis rewrites the implementation of std::get<T> to explicitly check for\nmore than one occurrence of T in the tuple elements, making it\nill-formed again. Additionally, the large wall of overload resolution\nerrors described in PR c++/101460 is avoided by making std::get<T> use\n__get_helper<I> directly instead of calling std::get<I>, and by adding a\ndeleted overload of __get_helper<N> for out-of-range N.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101427\n\t* include/std/tuple (tuple_element): Improve static_assert text.\n\t(__get_helper): Add deleted overload.\n\t(get<i>(tuple<T...>&&), get<i>(const tuple<T...>&&)): Use\n\t__get_helper directly.\n\t(__get_helper2): Remove.\n\t(__find_uniq_type_in_pack): New constexpr helper function.\n\t(get<T>): Use __find_uniq_type_in_pack and __get_helper instead\n\tof __get_helper2.\n\t* testsuite/20_util/tuple/element_access/get_neg.cc: Adjust\n\texpected errors.\n\t* testsuite/20_util/tuple/element_access/101427.cc: New test.", "tree": {"sha": "ef7722160a90b453394b26c6522ac758e9c3de8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef7722160a90b453394b26c6522ac758e9c3de8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f7182d68c24985dace2a94422c671ff987c262c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7182d68c24985dace2a94422c671ff987c262c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7182d68c24985dace2a94422c671ff987c262c"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "6953f8715d74488ecf124bed1e6f5ad5fe98ac9a", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 53, "deletions": 16, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "patch": "@@ -1358,7 +1358,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct tuple_element<__i, tuple<>>\n     {\n       static_assert(__i < tuple_size<tuple<>>::value,\n-\t  \"tuple index is in range\");\n+\t  \"tuple index must be in range\");\n     };\n \n   template<size_t __i, typename _Head, typename... _Tail>\n@@ -1371,6 +1371,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n \n+  // Deleted overload to improve diagnostics for invalid indices\n+  template<size_t __i, typename... _Types>\n+    __enable_if_t<(__i >= sizeof...(_Types))>\n+    __get_helper(const tuple<_Types...>&) = delete;\n+\n   /// Return a reference to the ith element of a tuple.\n   template<size_t __i, typename... _Elements>\n     constexpr __tuple_element_t<__i, tuple<_Elements...>>&\n@@ -1389,7 +1394,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(tuple<_Elements...>&& __t) noexcept\n     {\n       typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;\n-      return std::forward<__element_type&&>(std::get<__i>(__t));\n+      return std::forward<__element_type>(std::__get_helper<__i>(__t));\n     }\n \n   /// Return a const rvalue reference to the ith element of a const tuple rvalue.\n@@ -1398,47 +1403,79 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     get(const tuple<_Elements...>&& __t) noexcept\n     {\n       typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;\n-      return std::forward<const __element_type&&>(std::get<__i>(__t));\n+      return std::forward<const __element_type>(std::__get_helper<__i>(__t));\n     }\n \n #if __cplusplus >= 201402L\n \n #define __cpp_lib_tuples_by_type 201304\n \n-  template<typename _Head, size_t __i, typename... _Tail>\n-    constexpr _Head&\n-    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n-    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n-\n-  template<typename _Head, size_t __i, typename... _Tail>\n-    constexpr const _Head&\n-    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n-    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }\n+  // Return the index of _Tp in _Types, if it occurs exactly once.\n+  // Otherwise, return sizeof...(_Types).\n+  // TODO reuse this for __detail::__variant::__exactly_once.\n+  template<typename _Tp, typename... _Types>\n+    constexpr size_t\n+    __find_uniq_type_in_pack()\n+    {\n+      constexpr size_t __sz = sizeof...(_Types);\n+      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };\n+      size_t __n = __sz;\n+      for (size_t __i = 0; __i < __sz; ++__i)\n+\t{\n+\t  if (__found[__i])\n+\t    {\n+\t      if (__n < __sz) // more than one _Tp found\n+\t\treturn __sz;\n+\t      __n = __i;\n+\t    }\n+\t}\n+      return __n;\n+    }\n \n   /// Return a reference to the unique element of type _Tp of a tuple.\n   template <typename _Tp, typename... _Types>\n     constexpr _Tp&\n     get(tuple<_Types...>& __t) noexcept\n-    { return std::__get_helper2<_Tp>(__t); }\n+    {\n+      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();\n+      static_assert(__idx < sizeof...(_Types),\n+\t  \"the type T in std::get<T> must occur exactly once in the tuple\");\n+      return std::__get_helper<__idx>(__t);\n+    }\n \n   /// Return a reference to the unique element of type _Tp of a tuple rvalue.\n   template <typename _Tp, typename... _Types>\n     constexpr _Tp&&\n     get(tuple<_Types...>&& __t) noexcept\n-    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }\n+    {\n+      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();\n+      static_assert(__idx < sizeof...(_Types),\n+\t  \"the type T in std::get<T> must occur exactly once in the tuple\");\n+      return std::forward<_Tp>(std::__get_helper<__idx>(__t));\n+    }\n \n   /// Return a const reference to the unique element of type _Tp of a tuple.\n   template <typename _Tp, typename... _Types>\n     constexpr const _Tp&\n     get(const tuple<_Types...>& __t) noexcept\n-    { return std::__get_helper2<_Tp>(__t); }\n+    {\n+      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();\n+      static_assert(__idx < sizeof...(_Types),\n+\t  \"the type T in std::get<T> must occur exactly once in the tuple\");\n+      return std::__get_helper<__idx>(__t);\n+    }\n \n   /// Return a const reference to the unique element of type _Tp of\n   /// a const tuple rvalue.\n   template <typename _Tp, typename... _Types>\n     constexpr const _Tp&&\n     get(const tuple<_Types...>&& __t) noexcept\n-    { return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t)); }\n+    {\n+      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();\n+      static_assert(__idx < sizeof...(_Types),\n+\t  \"the type T in std::get<T> must occur exactly once in the tuple\");\n+      return std::forward<const _Tp>(std::__get_helper<__idx>(__t));\n+    }\n #endif\n \n   // This class performs the comparison operations on tuples"}, {"sha": "6490afda1936227c0b28cf5cb5619e0f520d78af", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/101427.cc", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2F101427.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2F101427.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2F101427.cc?ref=17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile { target c++14 } }\n+// PR libstdc++/101427\n+\n+#include <tuple>\n+\n+void test_pr101427()\n+{\n+  std::tuple<int, int> tup1;\n+  std::get<int>(tup1); // { dg-error \"here\" }\n+\n+  const std::tuple<int, long, int, long> tup2;\n+  std::get<long>(tup2); // { dg-error \"here\" }\n+\n+  std::tuple<char, short, float, short, int> tup3;\n+  std::get<short>(std::move(tup3)); // { dg-error \"here\" }\n+\n+  const std::tuple<double, long, double, long> tup4;\n+  std::get<double>(std::move(tup4)); // { dg-error \"here\" }\n+\n+  // { dg-error \"must occur exactly once in the tuple\" \"\" { target *-*-* } 0 }\n+}\n+\n+// { dg-prune-output \"use of deleted function\" }"}, {"sha": "cd850fdc21b59adf7bb9b0780198b429ae7c5991", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_neg.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17855eed7fc76b2cee7fbbc26f84d3c8b99be13c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc?ref=17855eed7fc76b2cee7fbbc26f84d3c8b99be13c", "patch": "@@ -17,7 +17,6 @@\n \n // { dg-options \"-fno-show-column\" }\n // { dg-do compile { target c++14 } }\n-// { dg-prune-output \"tuple index is in range\" }\n \n #include <tuple>\n \n@@ -60,5 +59,7 @@ test03()\n   std::get<6>(static_cast<test_type&&>(t));\t// { dg-error \"no match\" }\n }\n \n+// { dg-prune-output \"tuple index must be in range\" }\n // { dg-prune-output \"no type named .type\" }\n // { dg-prune-output \"type/value mismatch\" }\n+// { dg-prune-output \"use of deleted function\" }"}]}