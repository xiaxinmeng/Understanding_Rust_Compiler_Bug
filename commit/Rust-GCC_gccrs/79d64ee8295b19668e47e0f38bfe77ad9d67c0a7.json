{"sha": "79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlkNjRlZTgyOTViMTk2NjhlNDdlMGYzOGJmZTc3YWQ5ZDY3YzBhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-28T22:33:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-28T22:33:29Z"}, "message": "re PR middle-end/89621 (ICE with allocatable character and openmp)\n\n\tPR middle-end/89621\n\t* tree-inline.h (struct copy_body_data): Add\n\tdont_remap_vla_if_no_change flag.\n\t* tree-inline.c (remap_type_3, remap_type_2): New functions.\n\t(remap_type): Don't remap vla types if id->dont_remap_vla_if_no_change\n\tand remap_type_2 returns false.\n\t* omp-low.c (new_omp_context): Set ctx->cb.dont_remap_vla_if_no_change.\n\tMove ctx->cb.adjust_array_error_bounds setting to the outermost ctx\n\tonly from where it is copied to nested contexts.\n\n\t* gfortran.dg/gomp/pr89621.f90: New test.\n\nFrom-SVN: r270009", "tree": {"sha": "89da244f9e4f48eabb4b07ba477ea7762b9c30fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89da244f9e4f48eabb4b07ba477ea7762b9c30fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4479ec676b96445e52f47950703218162c4637a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4479ec676b96445e52f47950703218162c4637a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4479ec676b96445e52f47950703218162c4637a"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "167c37e737293fe79f22dee7af46d90d97d14378", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "patch": "@@ -1,3 +1,15 @@\n+2019-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/89621\n+\t* tree-inline.h (struct copy_body_data): Add\n+\tdont_remap_vla_if_no_change flag.\n+\t* tree-inline.c (remap_type_3, remap_type_2): New functions.\n+\t(remap_type): Don't remap vla types if id->dont_remap_vla_if_no_change\n+\tand remap_type_2 returns false.\n+\t* omp-low.c (new_omp_context): Set ctx->cb.dont_remap_vla_if_no_change.\n+\tMove ctx->cb.adjust_array_error_bounds setting to the outermost ctx\n+\tonly from where it is copied to nested contexts.\n+\n 2019-03-28  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/89865"}, {"sha": "874781ac5b5135242fa492fb365cf75ac225ed77", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "patch": "@@ -868,11 +868,12 @@ new_omp_context (gimple *stmt, omp_context *outer_ctx)\n       ctx->cb.copy_decl = omp_copy_decl;\n       ctx->cb.eh_lp_nr = 0;\n       ctx->cb.transform_call_graph_edges = CB_CGE_MOVE;\n+      ctx->cb.adjust_array_error_bounds = true;\n+      ctx->cb.dont_remap_vla_if_no_change = true;\n       ctx->depth = 1;\n     }\n \n   ctx->cb.decl_map = new hash_map<tree, tree>;\n-  ctx->cb.adjust_array_error_bounds = true;\n \n   return ctx;\n }"}, {"sha": "1c483614208741c10b3df2543758482efab0024c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "patch": "@@ -1,3 +1,8 @@\n+2019-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/89621\n+\t* gfortran.dg/gomp/pr89621.f90: New test.\n+\n 2019-03-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/66548"}, {"sha": "24ac18c061b74bc32f1fc1451ce5797e981fe208", "filename": "gcc/testsuite/gfortran.dg/gomp/pr89621.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr89621.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr89621.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr89621.f90?ref=79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "patch": "@@ -0,0 +1,18 @@\n+! PR middle-end/89621\n+! { dg-do compile }\n+\n+subroutine sub(str)\n+  character(*), intent(in) :: str\n+end subroutine sub\n+\n+program pr89621\n+  implicit none\n+  integer i\n+  character(len=:), allocatable :: str\n+  str = \"test\"\n+  !$omp parallel do\n+  do i = 1, 10\n+    call sub(str)\n+  enddo\n+  !$omp end parallel do\n+end program pr89621"}, {"sha": "9bf1c4080f50417149077c7f6691e4a349333f94", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "patch": "@@ -598,6 +598,92 @@ remap_type_1 (tree type, copy_body_data *id)\n   return new_tree;\n }\n \n+/* Helper function for remap_type_2, called through walk_tree.  */\n+\n+static tree\n+remap_type_3 (tree *tp, int *walk_subtrees, void *data)\n+{\n+  copy_body_data *id = (copy_body_data *) data;\n+\n+  if (TYPE_P (*tp))\n+    *walk_subtrees = 0;\n+\n+  else if (DECL_P (*tp) && remap_decl (*tp, id) != *tp)\n+    return *tp;\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return true if TYPE needs to be remapped because remap_decl on any\n+   needed embedded decl returns something other than that decl.  */\n+\n+static bool\n+remap_type_2 (tree type, copy_body_data *id)\n+{\n+  tree t;\n+\n+#define RETURN_TRUE_IF_VAR(T) \\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      tree _t = (T);\t\t\t\t\t\t\\\n+      if (_t)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (DECL_P (_t) && remap_decl (_t, id) != _t)\t\t\\\n+\t    return true;\t\t\t\t\t\\\n+\t  if (!TYPE_SIZES_GIMPLIFIED (type)\t\t\t\\\n+\t      && walk_tree (&_t, remap_type_3, id, NULL))\t\\\n+\t    return true;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+  switch (TREE_CODE (type))\n+    {\n+    case POINTER_TYPE:\n+    case REFERENCE_TYPE:\n+    case FUNCTION_TYPE:\n+    case METHOD_TYPE:\n+      return remap_type_2 (TREE_TYPE (type), id);\n+\n+    case INTEGER_TYPE:\n+    case REAL_TYPE:\n+    case FIXED_POINT_TYPE:\n+    case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n+      RETURN_TRUE_IF_VAR (TYPE_MIN_VALUE (type));\n+      RETURN_TRUE_IF_VAR (TYPE_MAX_VALUE (type));\n+      return false;\n+\n+    case ARRAY_TYPE:\n+      if (remap_type_2 (TREE_TYPE (type), id)\n+\t  || (TYPE_DOMAIN (type) && remap_type_2 (TYPE_DOMAIN (type), id)))\n+\treturn true;\n+      break;\n+\n+    case RECORD_TYPE:\n+    case UNION_TYPE:\n+    case QUAL_UNION_TYPE:\n+      for (t = TYPE_FIELDS (type); t; t = DECL_CHAIN (t))\n+\tif (TREE_CODE (t) == FIELD_DECL)\n+\t  {\n+\t    RETURN_TRUE_IF_VAR (DECL_FIELD_OFFSET (t));\n+\t    RETURN_TRUE_IF_VAR (DECL_SIZE (t));\n+\t    RETURN_TRUE_IF_VAR (DECL_SIZE_UNIT (t));\n+\t    if (TREE_CODE (type) == QUAL_UNION_TYPE)\n+\t      RETURN_TRUE_IF_VAR (DECL_QUALIFIER (t));\n+\t  }\n+      break;\n+\n+    default:\n+      return false;\n+    }\n+\n+  RETURN_TRUE_IF_VAR (TYPE_SIZE (type));\n+  RETURN_TRUE_IF_VAR (TYPE_SIZE_UNIT (type));\n+  return false;\n+#undef RETURN_TRUE_IF_VAR\n+}\n+\n tree\n remap_type (tree type, copy_body_data *id)\n {\n@@ -613,7 +699,10 @@ remap_type (tree type, copy_body_data *id)\n     return *node;\n \n   /* The type only needs remapping if it's variably modified.  */\n-  if (! variably_modified_type_p (type, id->src_fn))\n+  if (! variably_modified_type_p (type, id->src_fn)\n+      /* Don't remap if copy_decl method doesn't always return a new\n+\t decl and for all embedded decls returns the passed in decl.  */\n+      || (id->dont_remap_vla_if_no_change && !remap_type_2 (type, id)))\n     {\n       insert_decl_map (id, type, type);\n       return type;"}, {"sha": "9e3c249ba9688815a88f55062ae41a2e3cbc98b3", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d64ee8295b19668e47e0f38bfe77ad9d67c0a7/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=79d64ee8295b19668e47e0f38bfe77ad9d67c0a7", "patch": "@@ -123,6 +123,13 @@ struct copy_body_data\n      an uninitialized VAR_DECL temporary.  */\n   bool adjust_array_error_bounds;\n \n+  /* Usually copy_decl callback always creates new decls, in that case\n+     we want to remap all variably_modified_type_p types.  If this flag\n+     is set, remap_type will do further checks to see if remap_decl\n+     of any decls mentioned in the type will remap to anything but itself\n+     and only in that case will actually remap the type.  */\n+  bool dont_remap_vla_if_no_change;\n+\n   /* A function to be called when duplicating BLOCK nodes.  */\n   void (*transform_lang_insert_block) (tree);\n "}]}