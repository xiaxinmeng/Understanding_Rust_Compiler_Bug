{"sha": "e1b218d1748136d02c99a5e5f3f664e9c5a563ed", "node_id": "C_kwDOANBUbNoAKGUxYjIxOGQxNzQ4MTM2ZDAyYzk5YTVlNWYzZjY2NGU5YzVhNTYzZWQ", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-10T15:16:24Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:52Z"}, "message": "aarch64: Use type-qualified builtins for vcombine_* Neon intrinsics\n\nDeclare unsigned and polynomial type-qualified builtins for\nvcombine_* Neon intrinsics. Using these builtins removes the need for\nmany casts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-10  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c (TYPES_COMBINE): Delete.\n\t(TYPES_COMBINEP): Delete.\n\t* config/aarch64/aarch64-simd-builtins.def: Declare type-\n\tqualified builtins for vcombine_* intrinsics.\n\t* config/aarch64/arm_neon.h (vcombine_s8): Remove unnecessary\n\tcast.\n\t(vcombine_s16): Likewise.\n\t(vcombine_s32): Likewise.\n\t(vcombine_f32): Likewise.\n\t(vcombine_u8): Use type-qualified builtin and remove casts.\n\t(vcombine_u16): Likewise.\n\t(vcombine_u32): Likewise.\n\t(vcombine_u64): Likewise.\n\t(vcombine_p8): Likewise.\n\t(vcombine_p16): Likewise.\n\t(vcombine_p64): Likewise.\n\t(vcombine_bf16): Remove unnecessary cast.\n\t* config/aarch64/iterators.md (VD_I): New mode iterator.\n\t(VDC_P): New mode iterator.", "tree": {"sha": "b97ecae894d211287d90f59571068963f0b6ef45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b97ecae894d211287d90f59571068963f0b6ef45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1b218d1748136d02c99a5e5f3f664e9c5a563ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b218d1748136d02c99a5e5f3f664e9c5a563ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b218d1748136d02c99a5e5f3f664e9c5a563ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1716ddd1e9e7a5c63062e07ac3ca41364fea9917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1716ddd1e9e7a5c63062e07ac3ca41364fea9917"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "303e1e542823f01558c5afc3b1015df12737f06d", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=e1b218d1748136d02c99a5e5f3f664e9c5a563ed", "patch": "@@ -353,17 +353,6 @@ aarch64_types_unsigned_shiftacc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_immediate };\n #define TYPES_USHIFTACC (aarch64_types_unsigned_shiftacc_qualifiers)\n \n-\n-static enum aarch64_type_qualifiers\n-aarch64_types_combine_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_none, qualifier_none, qualifier_none };\n-#define TYPES_COMBINE (aarch64_types_combine_qualifiers)\n-\n-static enum aarch64_type_qualifiers\n-aarch64_types_combine_p_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_poly, qualifier_poly, qualifier_poly };\n-#define TYPES_COMBINEP (aarch64_types_combine_p_qualifiers)\n-\n static enum aarch64_type_qualifiers\n aarch64_types_load1_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_const_pointer_map_mode };"}, {"sha": "b4b95d7c4c8455edb79c3ba078b6a314317500db", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=e1b218d1748136d02c99a5e5f3f664e9c5a563ed", "patch": "@@ -43,8 +43,9 @@\n    help describe the attributes (for example, pure) for the intrinsic\n    function.  */\n \n-  BUILTIN_VDC (COMBINE, combine, 0, AUTO_FP)\n-  VAR1 (COMBINEP, combine, 0, NONE, di)\n+  BUILTIN_VDC (BINOP, combine, 0, AUTO_FP)\n+  BUILTIN_VD_I (BINOPU, combine, 0, NONE)\n+  BUILTIN_VDC_P (BINOPP, combine, 0, NONE)\n   BUILTIN_VB (BINOPP, pmul, 0, NONE)\n   VAR1 (BINOPP, pmull, 0, NONE, v8qi)\n   VAR1 (BINOPP, pmull_hi, 0, NONE, v16qi)"}, {"sha": "dd6877bcd65b4089b380ff7375673c174c87ede6", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=e1b218d1748136d02c99a5e5f3f664e9c5a563ed", "patch": "@@ -5975,21 +5975,21 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  return (int8x16_t) __builtin_aarch64_combinev8qi (__a, __b);\n+  return __builtin_aarch64_combinev8qi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_combinev4hi (__a, __b);\n+  return __builtin_aarch64_combinev4hi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_combinev2si (__a, __b);\n+  return __builtin_aarch64_combinev2si (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n@@ -6010,38 +6010,35 @@ __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_f32 (float32x2_t __a, float32x2_t __b)\n {\n-  return (float32x4_t) __builtin_aarch64_combinev2sf (__a, __b);\n+  return __builtin_aarch64_combinev2sf (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_combinev8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t     (int8x8_t) __b);\n+  return __builtin_aarch64_combinev8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_combinev4hi ((int16x4_t) __a,\n-\t\t\t\t\t\t     (int16x4_t) __b);\n+  return __builtin_aarch64_combinev4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_combinev2si ((int32x2_t) __a,\n-\t\t\t\t\t\t     (int32x2_t) __b);\n+  return __builtin_aarch64_combinev2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_combinedi (__a[0], __b[0]);\n+  return __builtin_aarch64_combinedi_uuu (__a[0], __b[0]);\n }\n \n __extension__ extern __inline float64x2_t\n@@ -6055,23 +6052,21 @@ __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_p8 (poly8x8_t __a, poly8x8_t __b)\n {\n-  return (poly8x16_t) __builtin_aarch64_combinev8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t     (int8x8_t) __b);\n+  return __builtin_aarch64_combinev8qi_ppp (__a, __b);\n }\n \n __extension__ extern __inline poly16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_p16 (poly16x4_t __a, poly16x4_t __b)\n {\n-  return (poly16x8_t) __builtin_aarch64_combinev4hi ((int16x4_t) __a,\n-\t\t\t\t\t\t     (int16x4_t) __b);\n+  return __builtin_aarch64_combinev4hi_ppp (__a, __b);\n }\n \n __extension__ extern __inline poly64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_p64 (poly64x1_t __a, poly64x1_t __b)\n {\n-  return (poly64x2_t) __builtin_aarch64_combinedi_ppp (__a[0], __b[0]);\n+  return __builtin_aarch64_combinedi_ppp (__a[0], __b[0]);\n }\n \n /* Start of temporary inline asm implementations.  */\n@@ -30648,7 +30643,7 @@ __extension__ extern __inline bfloat16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcombine_bf16 (bfloat16x4_t __a, bfloat16x4_t __b)\n {\n-  return (bfloat16x8_t)__builtin_aarch64_combinev4bf (__a, __b);\n+  return __builtin_aarch64_combinev4bf (__a, __b);\n }\n \n /* vdup */"}, {"sha": "a9842b3bddf646d93817de59bed92ad53459247a", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b218d1748136d02c99a5e5f3f664e9c5a563ed/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=e1b218d1748136d02c99a5e5f3f664e9c5a563ed", "patch": "@@ -119,6 +119,9 @@\n ;; VQMOV without 2-element modes.\n (define_mode_iterator VQMOV_NO2E [V16QI V8HI V4SI V8HF V8BF V4SF])\n \n+;; Double integer vector modes.\n+(define_mode_iterator VD_I [V8QI V4HI V2SI DI])\n+\n ;; Quad integer vector modes.\n (define_mode_iterator VQ_I [V16QI V8HI V4SI V2DI])\n \n@@ -238,6 +241,9 @@\n ;; Double vector modes for combines.\n (define_mode_iterator VDC [V8QI V4HI V4BF V4HF V2SI V2SF DI DF])\n \n+;; Polynomial modes for vector combines.\n+(define_mode_iterator VDC_P [V8QI V4HI DI])\n+\n ;; Advanced SIMD modes except double int.\n (define_mode_iterator VDQIF [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF V2DF])\n (define_mode_iterator VDQIF_F16 [V8QI V16QI V4HI V8HI V2SI V4SI"}]}