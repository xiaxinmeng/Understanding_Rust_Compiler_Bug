{"sha": "51ac3042e79ed2a67bd5979dadd324f46a58c51e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFhYzMwNDJlNzllZDJhNjdiZDU5NzlkYWRkMzI0ZjQ2YTU4YzUxZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2013-12-30T16:28:08Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2013-12-30T16:28:08Z"}, "message": "msp430.c (msp430_print_operand): Rename %B to %b and %A to %Q.\n\n\t* config/msp430/msp430.c (msp430_print_operand): Rename %B to %b\n\tand %A to %Q.  Add %A, %B, %C and %D as selectors for 16-bit parts\n\tof a 64-bit operand.\n\t* config/msp430/msp430.md: Replace uses of %B with %b and uses of\n\t%A with %q.\n\nFrom-SVN: r206247", "tree": {"sha": "37c2e934593f827c749c265f014cd6064eb7dcc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37c2e934593f827c749c265f014cd6064eb7dcc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51ac3042e79ed2a67bd5979dadd324f46a58c51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ac3042e79ed2a67bd5979dadd324f46a58c51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ac3042e79ed2a67bd5979dadd324f46a58c51e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ac3042e79ed2a67bd5979dadd324f46a58c51e/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c99ebd4dde82b900c255b594ce5617a52796340b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99ebd4dde82b900c255b594ce5617a52796340b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99ebd4dde82b900c255b594ce5617a52796340b"}], "stats": {"total": 160, "additions": 115, "deletions": 45}, "files": [{"sha": "1a6ae5e7692939ee61e9f40995d2eff1af4b5426", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ac3042e79ed2a67bd5979dadd324f46a58c51e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ac3042e79ed2a67bd5979dadd324f46a58c51e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51ac3042e79ed2a67bd5979dadd324f46a58c51e", "patch": "@@ -1,3 +1,11 @@\n+2013-12-30  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/msp430/msp430.c (msp430_print_operand): Rename %B to %b\n+\tand %A to %Q.  Add %A, %B, %C and %D as selectors for 16-bit parts\n+\tof a 64-bit operand.\n+\t* config/msp430/msp430.md: Replace uses of %B with %b and uses of\n+\t%A with %q.\n+\n 2013-12-30  Felix Yang  <felix.yang@huawei.com>\n \n \t* ira-costs.c (cost_classes_hasher::equal): Check equality of"}, {"sha": "beee438aeb92c5f3d7dcc676bf46ce998a6dce1e", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ac3042e79ed2a67bd5979dadd324f46a58c51e/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ac3042e79ed2a67bd5979dadd324f46a58c51e/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=51ac3042e79ed2a67bd5979dadd324f46a58c51e", "patch": "@@ -1914,6 +1914,24 @@ msp430_print_operand_addr (FILE * file, rtx addr)\n #undef  TARGET_PRINT_OPERAND\n #define TARGET_PRINT_OPERAND\t\tmsp430_print_operand\n \n+/* A   low 16-bits of int/lower of register pair\n+   B   high 16-bits of int/higher of register pair\n+   C   bits 32-47 of a 64-bit value/reg 3 of a DImode value\n+   D   bits 48-63 of a 64-bit value/reg 4 of a DImode value\n+   H   like %B (for backwards compatibility)\n+   I   inverse of value\n+   L   like %A (for backwards compatibility)\n+   O   offset of the top of the stack\n+   Q   like X but generates an A postfix\n+   R   inverse of condition code, unsigned.\n+   X   X instruction postfix in large mode\n+   Y   value - 4\n+   Z   value - 1\n+   b   .B or .W or .A, depending upon the mode\n+   p   bit position\n+   r   inverse of condition code\n+   x   like X but only for pointers.  */\n+\n static void\n msp430_print_operand (FILE * file, rtx op, int letter)\n {\n@@ -1978,7 +1996,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n       gcc_assert (CONST_INT_P (op));\n       fprintf (file, \"#%d\", 1 << INTVAL (op));\n       return;\n-    case 'B':\n+    case 'b':\n       switch (GET_MODE (op))\n \t{\n \tcase QImode: fprintf (file, \".B\"); return;\n@@ -1988,6 +2006,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \tdefault:\n \t  return;\n \t}\n+    case 'A':\n     case 'L': /* Low half.  */\n       switch (GET_CODE (op))\n \t{\n@@ -2005,6 +2024,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \t  gcc_unreachable ();\n \t}\n       break;\n+    case 'B':\n     case 'H': /* high half */\n       switch (GET_CODE (op))\n \t{\n@@ -2023,6 +2043,42 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \t  gcc_unreachable ();\n \t}\n       break;\n+    case 'C':\n+      switch (GET_CODE (op))\n+\t{\n+\tcase MEM:\n+\t  op = adjust_address (op, Pmode, 3);\n+\t  break;\n+\tcase REG:\n+\t  op = gen_rtx_REG (Pmode, REGNO (op) + 2);\n+\t  break;\n+\tcase CONST_INT:\n+\t  op = GEN_INT (INTVAL (op) >> 32);\n+\t  letter = 0;\n+\t  break;\n+\tdefault:\n+\t  /* If you get here, figure out a test case :-) */\n+\t  gcc_unreachable ();\n+\t}\n+      break;\n+    case 'D':\n+      switch (GET_CODE (op))\n+\t{\n+\tcase MEM:\n+\t  op = adjust_address (op, Pmode, 4);\n+\t  break;\n+\tcase REG:\n+\t  op = gen_rtx_REG (Pmode, REGNO (op) + 3);\n+\t  break;\n+\tcase CONST_INT:\n+\t  op = GEN_INT (INTVAL (op) >> 48);\n+\t  letter = 0;\n+\t  break;\n+\tdefault:\n+\t  /* If you get here, figure out a test case :-) */\n+\t  gcc_unreachable ();\n+\t}\n+      break;\n \n     case 'X':\n       /* This is used to turn, for example, an ADD opcode into an ADDX\n@@ -2039,7 +2095,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \tfprintf (file, \"X\");\n       return;\n \n-    case 'A':\n+    case 'Q':\n       /* Likewise, for BR -> BRA.  */\n       if (TARGET_LARGE)\n \tfprintf (file, \"A\");\n@@ -2053,6 +2109,12 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \t       msp430_initial_elimination_offset (ARG_POINTER_REGNUM, STACK_POINTER_REGNUM)\n \t        - 2);\n       return;\n+\n+    case 0:\n+      break;\n+    default:\n+      output_operand_lossage (\"invalid operand prefix\");\n+      return;\n     }\n \n   switch (GET_CODE (op))"}, {"sha": "ef59beeb6c646db6d90dbfba058bc26ef377f262", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 43, "deletions": 43, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ac3042e79ed2a67bd5979dadd324f46a58c51e/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ac3042e79ed2a67bd5979dadd324f46a58c51e/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=51ac3042e79ed2a67bd5979dadd324f46a58c51e", "patch": "@@ -87,7 +87,7 @@\n   [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")\n \t\t     (match_operand 1 \"immediate_operand\" \"n\")] UNS_PUSHM)]\n   \"\"\n-  \"PUSHM%B0\\t%1, %0\"\n+  \"PUSHM%b0\\t%1, %0\"\n   )\n \n (define_insn \"pop\"\n@@ -105,7 +105,7 @@\n   )\n \n ;; This is nasty.  Operand0 is bogus.  It is only there so that we can get a\n-;; mode for the %B0 to work.  We should use operand1 for this, but that does\n+;; mode for the %b0 to work.  We should use operand1 for this, but that does\n ;; not have a mode.\n ;; \n ;; Operand1 is actually a register, but we cannot accept (REG...) because the\n@@ -115,7 +115,7 @@\n ;; because that is the only operator that will omit the # prefix to an\n ;; integer value.  Unfortunately it also inverts the integer value, so we\n ;; have pre-invert it when generating this insn.  (We could of course add a\n-;; new operator, eg %D, just for this pattern...)\n+;; new operator, eg %J, just for this pattern...)\n ;;\n ;; The pushm pattern does not have this problem because of all of the\n ;; frame info cruft attached to it, so cprop_hardreg leaves it alone.\n@@ -124,7 +124,7 @@\n \t\t     (match_operand 1 \"immediate_operand\" \"i\")\n \t\t     (match_operand 2 \"immediate_operand\" \"i\")] UNS_POPM)]\n   \"\"\n-  \"POPM%B0\\t%2, r%I1\"\n+  \"POPM%b0\\t%2, r%I1\"\n   )\n \n ;; The next two patterns are here to support a \"feature\" of how GCC implements\n@@ -215,9 +215,9 @@\n \t(match_operand:PSI 1 \"msp_general_operand\" \"riYa,r,rmi\"))]\n   \"\"\n   \"@\n-  MOV%A0\\t%1, %0\n-  MOV%A0\\t%1, %0\n-  MOV%X0.%A0\\t%1, %0\")\n+  MOV%Q0\\t%1, %0\n+  MOV%Q0\\t%1, %0\n+  MOV%X0.%Q0\\t%1, %0\")\n \n ; This pattern is identical to the truncsipsi2 pattern except\n ; that it uses a SUBREG instead of a TRUNC.  It is needed in\n@@ -316,7 +316,7 @@\n ; that are not single_set() very well.\n \n (define_insn \"addhi3_cy\"\n-  [(set (match_operand:HI 0 \"msp_nonimmediate_operand\" \"=r,rm\")\n+  [(set (match_operand:HI          0 \"msp_nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_operand:HI 1 \"msp_nonimmediate_operand\" \"%0,0\")\n \t\t (match_operand:HI 2 \"msp_general_operand\" \"r,rm\")))\n    (set (reg:BI CARRY)\n@@ -347,7 +347,7 @@\n \n ; Version of addhi that adds the carry, for SImode adds.\n (define_insn \"addchi4_cy\"\n-  [(set (match_operand:HI 0 \"msp_nonimmediate_operand\" \"=r,rm\")\n+  [(set (match_operand:HI                   0 \"msp_nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (plus:HI (match_operand:HI 1 \"msp_nonimmediate_operand\" \"%0,0\")\n \t\t\t  (match_operand:HI 2 \"msp_general_operand\" \"ri,rmi\"))\n \t\t (zero_extend:HI (reg:BI CARRY))))\n@@ -362,7 +362,7 @@\n ; so that gcc knows when it can and can't optimize away the two\n ; halves.\n (define_split\n-  [(set (match_operand:SI 0 \"msp430_nonsubreg_operand\")\n+  [(set (match_operand:SI          0 \"msp430_nonsubreg_operand\")\n \t(plus:SI (match_operand:SI 1 \"nonimmediate_operand\")\n \t\t (match_operand:SI 2 \"general_operand\")))\n    ]\n@@ -452,8 +452,8 @@\n \t\t (match_operand 2 \"msp430_inv_constgen_operator\" \"n,n\")))]\n   \"\"\n   \"@\n-   BIC%x0%B0\\t#%I2, %0\n-   BIC%X0%B0\\t#%I2, %0\"\n+   BIC%x0%b0\\t#%I2, %0\n+   BIC%X0%b0\\t#%I2, %0\"\n )\n \n (define_insn \"bic<mode>3\"\n@@ -462,8 +462,8 @@\n \t\t (match_operand:QHI          2 \"msp_nonimmediate_operand\"  \"0,0\")))]\n   \"\"\n   \"@\n-   BIC%x0%B0\\t%1, %0\n-   BIC%X0%B0\\t%1, %0\"\n+   BIC%x0%b0\\t%1, %0\n+   BIC%X0%b0\\t%1, %0\"\n )\n \n (define_insn \"and<mode>3\"\n@@ -472,42 +472,42 @@\n \t\t (match_operand:QHI 2 \"msp_general_operand\" \"riYs,rmi\")))]\n   \"\"\n   \"@\n-   AND%x0%B0\\t%2, %0\n-   AND%X0%B0\\t%2, %0\"\n+   AND%x0%b0\\t%2, %0\n+   AND%X0%b0\\t%2, %0\"\n )\n \n (define_insn \"ior<mode>3\"\n-  [(set (match_operand:QHI 0 \"msp_nonimmediate_operand\" \"=rYs,rm\")\n+  [(set (match_operand:QHI          0 \"msp_nonimmediate_operand\" \"=rYs,rm\")\n \t(ior:QHI (match_operand:QHI 1 \"msp_nonimmediate_operand\" \"%0,0\")\n \t\t (match_operand:QHI 2 \"msp_general_operand\" \"riYs,rmi\")))]\n   \"\"\n   \"@\n-   BIS%x0%B0\\t%2, %0\n-   BIS%X0%B0\\t%2, %0\"\n+   BIS%x0%b0\\t%2, %0\n+   BIS%X0%b0\\t%2, %0\"\n )\n \n (define_insn \"xor<mode>3\"\n-  [(set (match_operand:QHI 0 \"msp_nonimmediate_operand\" \"=rYs,rm\")\n+  [(set (match_operand:QHI          0 \"msp_nonimmediate_operand\" \"=rYs,rm\")\n \t(xor:QHI (match_operand:QHI 1 \"msp_nonimmediate_operand\" \"%0,0\")\n \t\t (match_operand:QHI 2 \"msp_general_operand\" \"riYs,rmi\")))]\n   \"\"\n   \"@\n-   XOR%x0%B0\\t%2, %0\n-   XOR%X0%B0\\t%2, %0\"\n+   XOR%x0%b0\\t%2, %0\n+   XOR%X0%b0\\t%2, %0\"\n )\n \n ;; Macro : XOR #~0, %0\n (define_insn \"one_cmpl<mode>2\"\n-  [(set (match_operand:QHI 0 \"msp_nonimmediate_operand\" \"=rYs,m\")\n+  [(set (match_operand:QHI          0 \"msp_nonimmediate_operand\" \"=rYs,m\")\n \t(not:QHI (match_operand:QHI 1 \"msp_nonimmediate_operand\" \"0,0\")))]\n   \"\"\n   \"@\n-   INV%x0%B0\\t%0\n-   INV%X0%B0\\t%0\"\n+   INV%x0%b0\\t%0\n+   INV%X0%b0\\t%0\"\n )\n \n (define_insn \"extendqihi2\"\n-  [(set (match_operand:HI 0 \"msp_nonimmediate_operand\" \"=rYs,m\")\n+  [(set (match_operand:HI                 0 \"msp_nonimmediate_operand\" \"=rYs,m\")\n \t(sign_extend:HI (match_operand:QI 1 \"msp_nonimmediate_operand\" \"0,0\")))]\n   \"\"\n   \"@\n@@ -920,7 +920,7 @@\n (define_insn \"epilogue_helper\"\n   [(unspec_volatile [(match_operand 0 \"immediate_operand\" \"i\")] UNS_EPILOGUE_HELPER)]\n   \"\"\n-  \"BR%A0\\t#__mspabi_func_epilog_%D0\"\n+  \"BR%Q0\\t#__mspabi_func_epilog_%0\"\n   )\n \n \n@@ -956,7 +956,7 @@\n   [(call (mem:HI (match_operand 0 \"general_operand\" \"rmi\"))\n \t (match_operand 1 \"\"))]\n   \"\"\n-  \"CALL%A0\\t%0\"\n+  \"CALL%Q0\\t%0\"\n )\n \n (define_expand \"call_value\"\n@@ -972,7 +972,7 @@\n \t(call (mem:HI (match_operand 1 \"general_operand\" \"rmi\"))\n \t      (match_operand 2 \"\")))]\n   \"\"\n-  \"CALL%A0\\t%1\"\n+  \"CALL%Q0\\t%1\"\n )\n \n (define_insn \"msp_return\"\n@@ -1010,7 +1010,7 @@\n   [(set (pc)\n \t(label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n-  \"BR%A0\\t#%l0\"\n+  \"BR%Q0\\t#%l0\"\n )\n \n ;; FIXME: GCC currently (8/feb/2013) cannot handle symbol_refs\n@@ -1019,7 +1019,7 @@\n   [(set (pc)\n \t(match_operand 0 \"nonimmediate_operand\" \"rYl\"))]\n   \"\"\n-  \"BR%A0\\t%0\"\n+  \"BR%Q0\\t%0\"\n )\n \n ;;------------------------------------------------------------\n@@ -1049,7 +1049,7 @@\n    ]\n   \"\"\n   \"@\n-  CMP%A0\\t%2, %1 { J%0\\t%l3\n+  CMP%Q0\\t%2, %1 { J%0\\t%l3\n   CMPX.A\\t%2, %1 { J%0\\t%l3\n   CMPX.A\\t%2, %1 { J%0\\t%l3\"\n   )\n@@ -1095,7 +1095,7 @@\n    ]\n   \"\"\n   \"@\n-  CMP%A0\\t%1, %2 { J%R0\\t%l3\n+  CMP%Q0\\t%1, %2 { J%R0\\t%l3\n   CMPX.A\\t%1, %2 { J%R0\\t%l3\n   CMPX.A\\t%1, %2 { J%R0\\t%l3\"\n   )\n@@ -1141,8 +1141,8 @@\n    ]\n   \"\"\n   \"@\n-   BIT%x0%B0\\t%1, %0 { JNE\\t%l2\n-   BIT%X0%B0\\t%1, %0 { JNE\\t%l2\"\n+   BIT%x0%b0\\t%1, %0 { JNE\\t%l2\n+   BIT%X0%b0\\t%1, %0 { JNE\\t%l2\"\n   )\n \n (define_insn \"*bitbranch<mode>4\"\n@@ -1155,7 +1155,7 @@\n    (clobber (reg:BI CARRY))\n    ]\n   \"\"\n-  \"BIT%x0%X0%B0\\t%1, %0 { JEQ\\t%l2\"\n+  \"BIT%x0%X0%b0\\t%1, %0 { JEQ\\t%l2\"\n   )\n \n (define_insn \"*bitbranch<mode>4\"\n@@ -1168,7 +1168,7 @@\n    (clobber (reg:BI CARRY))\n    ]\n   \"\"\n-  \"BIT%X0%B0\\t%1, %0 { JNE\\t%l2\"\n+  \"BIT%X0%b0\\t%1, %0 { JNE\\t%l2\"\n   )\n \n (define_insn \"*bitbranch<mode>4\"\n@@ -1181,7 +1181,7 @@\n    (clobber (reg:BI CARRY))\n    ]\n   \"\"\n-  \"BIT%X0%B0\\t%1, %0 { JEQ\\t%l2\"\n+  \"BIT%X0%b0\\t%1, %0 { JEQ\\t%l2\"\n   )\n \n ;;------------------------------------------------------------\n@@ -1199,8 +1199,8 @@\n    ]\n   \"\"\n   \"@\n-   BIT%x0%B0\\t%p1, %0 { JNE\\t%l2\n-   BIT%X0%B0\\t%p1, %0 { JNE\\t%l2\"\n+   BIT%x0%b0\\t%p1, %0 { JNE\\t%l2\n+   BIT%X0%b0\\t%p1, %0 { JNE\\t%l2\"\n   )\n \n (define_insn \"*bitbranch<mode>4_z\"\n@@ -1214,7 +1214,7 @@\n    (clobber (reg:BI CARRY))\n    ]\n   \"\"\n-  \"BIT%x0%X0%B0\\t%p1, %0 { JEQ\\t%l2\"\n+  \"BIT%x0%X0%b0\\t%p1, %0 { JEQ\\t%l2\"\n   )\n \n (define_insn \"*bitbranch<mode>4_z\"\n@@ -1228,7 +1228,7 @@\n    (clobber (reg:BI CARRY))\n    ]\n   \"\"\n-  \"BIT%X0%B0\\t%p1, %0 { JNE\\t%l2\"\n+  \"BIT%X0%b0\\t%p1, %0 { JNE\\t%l2\"\n   )\n \n (define_insn \"*bitbranch<mode>4_z\"\n@@ -1242,7 +1242,7 @@\n    (clobber (reg:BI CARRY))\n    ]\n   \"\"\n-  \"BIT%X0%B0\\t%p1, %0 { JEQ\\t%l2\"\n+  \"BIT%X0%b0\\t%p1, %0 { JEQ\\t%l2\"\n   )\n \n ;;------------------------------------------------------------"}]}