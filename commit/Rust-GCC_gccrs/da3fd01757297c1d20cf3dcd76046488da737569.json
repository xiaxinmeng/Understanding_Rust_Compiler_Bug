{"sha": "da3fd01757297c1d20cf3dcd76046488da737569", "node_id": "C_kwDOANBUbNoAKGRhM2ZkMDE3NTcyOTdjMWQyMGNmM2RjZDc2MDQ2NDg4ZGE3Mzc1Njk", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2023-04-03T13:53:36Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2023-04-03T14:00:54Z"}, "message": "ipa: Avoid constructing aggregate jump functions with huge offsets (PR 109303)\n\nWe are in the process of changing data structures holding information\nabout constants passed by reference and in aggregates to use unsigned\nint offsets rather than HOST_WIDE_INT (which was selected simply\nbecause that is what fell out of get_ref_base_and_extent at that time)\nin order to conserve memory, especially at WPA time.\n\nPR 109303 testcase discovers that we do not properly check that we\nonly create jump functions with offsets (plus sizes) that fit into the\nsmaller type.  This patch adds the necessary check.\n\ngcc/ChangeLog:\n\n2023-03-30  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/109303\n\t* ipa-prop.cc (determine_known_aggregate_parts): Check that the\n\toffset + size will be representable in unsigned int.\n\ngcc/testsuite/ChangeLog:\n\n2023-03-30  Jakub Jelinek  <jakub@redhat.com>\n\t    Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/109303\n\t* gcc.dg/pr109303.c: New test.", "tree": {"sha": "f7ee666c0d9ea2890862050f9c9dea14d23c4934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7ee666c0d9ea2890862050f9c9dea14d23c4934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da3fd01757297c1d20cf3dcd76046488da737569", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmQq3BYACgkQv2PBvD+k\nNUCyShAAjzkWP95LALC9Asp8BWdz/rgBvxvUgvdex4BZwzT+OGvHf6KGs/LGIKCJ\nDam4+z4uZccR3HJf0wvXpj3wqFgaZm+mf1ptxL8Fxffy3njdICn4lvt8lZH6EaXm\nQ5Xe/LPO+7nR8boSj63h3S7Dej9DAbJturmNY4nkat40yvKx1fxJTqG6wHCrVTix\noBvFAxfk5VgjwkliS+b2iwcNTRdhHwQMo+0rVosYXY4kWmgL3QI5dpEiCOi5Ef3y\nH4KBH5ZgYWPcpcVguju+/EEfj1JUVAWqLTKQ5BTISmQpdL6lPHJc+cuOjg15IecO\npduMiPq+l37N1Ol6+kce3yi9E7jfLZSrOG7Fr+kdkD0WRUXh26lAk56rLrOxJ2FB\nniMcrYvePmf9h7pNAkA+Vh5QjDBP5LqDzn1YQ3zF/Dg8T2UAYhPN6Mg/QB+U7fWD\nyALn0hgE2V/xRzD4Wi6AkXZLdnC/pO+SBeHRNHJaSh3F0jDB8RIiRQOD05LpYILa\n6G+43Im0Qs6ISNfWSLY1anpKbViF7Sp2x4QI+7PMUsNQMJB72e0ke11Ge5l0cgNf\ndPwJFe7zzkusqjH2wFs8lJW5r2xJThQJEIfoPXOVIOqQozDFwqRng9yErlhFaCGw\nsFXy5SiUUXAaLJ28INab4w3YOCSXEW20S5N9xvR9LoO1GWR+WJI=\n=Urw/\n-----END PGP SIGNATURE-----", "payload": "tree f7ee666c0d9ea2890862050f9c9dea14d23c4934\nparent b0248580b68d970788bb43ac3ab8fe3e21ef71be\nauthor Martin Jambor <mjambor@suse.cz> 1680530016 +0200\ncommitter Martin Jambor <mjambor@suse.cz> 1680530454 +0200\n\nipa: Avoid constructing aggregate jump functions with huge offsets (PR 109303)\n\nWe are in the process of changing data structures holding information\nabout constants passed by reference and in aggregates to use unsigned\nint offsets rather than HOST_WIDE_INT (which was selected simply\nbecause that is what fell out of get_ref_base_and_extent at that time)\nin order to conserve memory, especially at WPA time.\n\nPR 109303 testcase discovers that we do not properly check that we\nonly create jump functions with offsets (plus sizes) that fit into the\nsmaller type.  This patch adds the necessary check.\n\ngcc/ChangeLog:\n\n2023-03-30  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/109303\n\t* ipa-prop.cc (determine_known_aggregate_parts): Check that the\n\toffset + size will be representable in unsigned int.\n\ngcc/testsuite/ChangeLog:\n\n2023-03-30  Jakub Jelinek  <jakub@redhat.com>\n\t    Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/109303\n\t* gcc.dg/pr109303.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3fd01757297c1d20cf3dcd76046488da737569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da3fd01757297c1d20cf3dcd76046488da737569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3fd01757297c1d20cf3dcd76046488da737569/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0248580b68d970788bb43ac3ab8fe3e21ef71be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0248580b68d970788bb43ac3ab8fe3e21ef71be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0248580b68d970788bb43ac3ab8fe3e21ef71be"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "83a181672738bcebe1a62ae35032d43b4d814246", "filename": "gcc/ipa-prop.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3fd01757297c1d20cf3dcd76046488da737569/gcc%2Fipa-prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3fd01757297c1d20cf3dcd76046488da737569/gcc%2Fipa-prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.cc?ref=da3fd01757297c1d20cf3dcd76046488da737569", "patch": "@@ -2086,7 +2086,12 @@ determine_known_aggregate_parts (struct ipa_func_body_info *fbi,\n \t     whether its value is clobbered any other dominating one.  */\n \t  if ((content->value.pass_through.formal_id >= 0\n \t       || content->value.pass_through.operand)\n-\t      && !clobber_by_agg_contents_list_p (all_list, content))\n+\t      && !clobber_by_agg_contents_list_p (all_list, content)\n+\t      /* Since IPA-CP stores results with unsigned int offsets, we can\n+\t\t discard those which would not fit now before we stream them to\n+\t\t WPA.  */\n+\t      && (content->offset + content->size - arg_offset\n+\t\t  <= (HOST_WIDE_INT) UINT_MAX * BITS_PER_UNIT))\n \t    {\n \t      struct ipa_known_agg_contents_list *copy\n \t\t\t= XALLOCA (struct ipa_known_agg_contents_list);"}, {"sha": "f91535991c78cbc1360be2e4f2d0b88eeb0513cc", "filename": "gcc/testsuite/gcc.dg/pr109303.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3fd01757297c1d20cf3dcd76046488da737569/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109303.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3fd01757297c1d20cf3dcd76046488da737569/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109303.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr109303.c?ref=da3fd01757297c1d20cf3dcd76046488da737569", "patch": "@@ -0,0 +1,24 @@\n+/* PR ipa/109303 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct __attribute__((packed)) A { char c1; short a1[__INT_MAX__]; };\n+struct __attribute__((packed)) B { char c2; short a2[100]; };\n+struct S { struct A p1; struct B p2[4]; };\n+void bar (short int);\n+\n+static void\n+foo (struct S *q)\n+{\n+  for (int i = 0; i < q->p1.c1; i++)\n+    for (int j = 0; j < q->p2[i].c2; j++)\n+      bar (q->p2[i].a2[j]);\n+}\n+\n+int\n+main ()\n+{\n+  struct S q = {};\n+  q.p2[0].c2 = q.p2[1].c2 = 3;\n+  foo (&q);\n+}"}]}