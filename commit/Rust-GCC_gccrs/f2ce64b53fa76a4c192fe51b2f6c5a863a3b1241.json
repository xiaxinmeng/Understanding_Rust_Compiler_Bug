{"sha": "f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJjZTY0YjUzZmE3NmE0YzE5MmZlNTFiMmY2YzVhODYzYTNiMTI0MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-30T23:30:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-01T17:45:48Z"}, "message": "libstdc++: Improvements to Doxygen markup\n\nThis attempst to improve the doxygen output to work around what seems to\nbe some bugs in doxygen (issues 8635 and 8638).\n\nThe @addtogroup command doesn't work for entities inside a nested\nnamespace (see 8635) so we need to close and reopen groups on entering\nand elaving nested namespaces. This fixes the problem that\nchrono::duration and chrono::time_point were not documented in the\n\"Time\" documentation group. I am unable to make the path classes appear\nas part of their relevant groups (File System and Filesystem TS), nor\nthe contents of <exception> or <system_error>. I have made some minor\nimprovements to the docs for those types, including starting to address\nPR 97001 by adding @since to the doxygen comments.\n\nThis change also excludes the <experimental/bits/net.h> header from\nDoxygen processing, so we don't get an unwanted \"Networking-ts\" group\nin the documentation.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/doxygroups.cc: Fix docs for std::literals.\n\t* doc/doxygen/user.cfg.in: Exclude the Networking TS header.\n\tAdd some more predefined macros.\n\t* include/bits/fs_fwd.h: Move @addtogroup commands inside\n\tnamespaces. Add better documentation.\n\t* include/bits/fs_path.h: Likewise.\n\t* include/experimental/bits/fs_fwd.h: Likewise.\n\t* include/experimental/bits/fs_path.h: Likewise.\n\t* include/ext/throw_allocator.h: Fix typo and improve docs.\n\t* include/std/chrono: Move @addtogroup commands.\n\t* include/std/system_error: Move @addtogroup commands.\n\t* libsupc++/exception: Improve documentation.\n\t* libsupc++/exception.h: Add @since documentation.", "tree": {"sha": "4339fdd1187675dd694f0fa06e8ca5240f1f9cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4339fdd1187675dd694f0fa06e8ca5240f1f9cbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3d8860d6386cd12942bc0b1995765ea516297bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d8860d6386cd12942bc0b1995765ea516297bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d8860d6386cd12942bc0b1995765ea516297bd"}], "stats": {"total": 222, "additions": 163, "deletions": 59}, "files": [{"sha": "42f7d44752018d641f7f9924b31a0120b4db61f6", "filename": "libstdc++-v3/doc/doxygen/doxygroups.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fdoxygroups.cc?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -19,7 +19,7 @@\n /** @namespace std\n  *  @brief ISO C++ entities toplevel namespace is std.\n */\n-/** @namespace std\n+/** @namespace std::literals\n  *  @brief ISO C++ inline namespace for literal suffixes.\n */\n /** @namespace std::__detail\n@@ -43,7 +43,7 @@\n  *  @ingroup extensions\n */\n /** @namespace __gnu_cxx::__detail\n- *  @brief Implementation details not part of the namespace __gnu_cxx \n+ *  @brief Implementation details not part of the namespace __gnu_cxx\n  *  interface.\n */\n /** @namespace __gnu_internal"}, {"sha": "349b9ec9c36a763b1cc39f3c1f72e27f74fa5d3f", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -1092,7 +1092,8 @@ RECURSIVE              = NO\n # Note that relative paths are relative to the directory from which doxygen is\n # run.\n \n-EXCLUDE                = Makefile\n+EXCLUDE                = Makefile \\\n+                         include/experimental/bits/net.h\n \n # The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n # directories that are symbolic links (a Unix file system feature) are excluded\n@@ -2446,7 +2447,9 @@ PREDEFINED             = __cplusplus=201703L \\\n                          \"_GLIBCXX17_DEPRECATED_SUGGEST(E)= \" \\\n                          \"_GLIBCXX20_DEPRECATED(E)= \" \\\n                          \"_GLIBCXX20_DEPRECATED(E)= \" \\\n-                         _GLIBCXX17_INLINE=inline\n+                         _GLIBCXX17_INLINE=inline \\\n+\t\t\t _GLIBCXX_CHRONO_INT64_T=int64_t \\\n+\t\t\t _GLIBCXX_DEFAULT_ABI_TAG\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"}, {"sha": "a7f5a37709c5b97ded4b50458eb0717cd87c6c64", "filename": "libstdc++-v3/include/bits/fs_fwd.h", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -40,17 +40,18 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-/** @addtogroup filesystem\n- *  @{\n- */\n-\n /// ISO C++ 2017 namespace for File System library\n namespace filesystem\n {\n #if _GLIBCXX_USE_CXX11_ABI\n+/// @cond undocumented\n inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n+/// @endcond\n #endif\n \n+/** @addtogroup filesystem\n+ *  @{\n+ */\n \n   class file_status;\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n@@ -61,6 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   class recursive_directory_iterator;\n _GLIBCXX_END_NAMESPACE_CXX11\n \n+  /// Information about free space on a disk\n   struct space_info\n   {\n     uintmax_t capacity;\n@@ -72,12 +74,13 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #endif\n   };\n \n+  /// Enumerated type representing the type of a file\n   enum class file_type : signed char {\n       none = 0, not_found = -1, regular = 1, directory = 2, symlink = 3,\n       block = 4, character = 5, fifo = 6, socket = 7, unknown = 8\n   };\n \n-  /// Bitmask type\n+  /// Bitmask type controlling effects of `filesystem::copy`\n   enum class copy_options : unsigned short {\n       none = 0,\n       skip_existing = 1, overwrite_existing = 2, update_existing = 4,\n@@ -86,6 +89,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       directories_only = 64, create_symlinks = 128, create_hard_links = 256\n   };\n \n+  /// @{\n+  /// @relates copy_options\n   constexpr copy_options\n   operator&(copy_options __x, copy_options __y) noexcept\n   {\n@@ -128,9 +133,10 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   inline copy_options&\n   operator^=(copy_options& __x, copy_options __y) noexcept\n   { return __x = __x ^ __y; }\n+  /// @}\n \n \n-  /// Bitmask type\n+  /// Bitmask type representing file access permissions\n   enum class perms : unsigned {\n       none\t\t=  0,\n       owner_read\t=  0400,\n@@ -153,6 +159,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       unknown\t\t=  0xFFFF,\n   };\n \n+  /// @{\n+  /// @relates perm_options\n   constexpr perms\n   operator&(perms __x, perms __y) noexcept\n   {\n@@ -195,15 +203,18 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   inline perms&\n   operator^=(perms& __x, perms __y) noexcept\n   { return __x = __x ^ __y; }\n+  /// @}\n \n-  /// Bitmask type\n+  /// Bitmask type controlling changes to permissions\n   enum class perm_options : unsigned {\n       replace\t= 0x1,\n       add\t= 0x2,\n       remove\t= 0x4,\n       nofollow\t= 0x8\n   };\n \n+  /// @{\n+  /// @relates perm_options\n   constexpr perm_options\n   operator&(perm_options __x, perm_options __y) noexcept\n   {\n@@ -246,12 +257,15 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   inline perm_options&\n   operator^=(perm_options& __x, perm_options __y) noexcept\n   { return __x = __x ^ __y; }\n+  /// @}\n \n-  // Bitmask type\n+  /// Bitmask type controlling directory iteration\n   enum class directory_options : unsigned char {\n       none = 0, follow_directory_symlink = 1, skip_permission_denied = 2\n   };\n \n+  /// @{\n+  /// @relates directory_options\n   constexpr directory_options\n   operator&(directory_options __x, directory_options __y) noexcept\n   {\n@@ -294,7 +308,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   inline directory_options&\n   operator^=(directory_options& __x, directory_options __y) noexcept\n   { return __x = __x ^ __y; }\n+  /// @}\n \n+  /// The type used for file timestamps\n   using file_time_type = __file_clock::time_point;\n \n   // operational functions\n@@ -338,8 +354,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   bool is_regular_file(file_status) noexcept;\n   bool is_symlink(file_status) noexcept;\n \n-} // namespace filesystem\n /// @}\n+} // namespace filesystem\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17"}, {"sha": "4fcd1def92f273fff01dd9988a32705452f8dacd", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -63,15 +63,13 @@ namespace filesystem\n {\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n-  /** @addtogroup filesystem\n-   *  @{\n-   */\n-\n   class path;\n \n   /// @cond undocumented\n namespace __detail\n {\n+  /// @addtogroup filesystem\n+  /// @{\n   template<typename _CharT>\n     inline constexpr bool __is_encoded_char = false;\n   template<>\n@@ -238,10 +236,15 @@ namespace __detail\n \treturn basic_string<_EcharT>(__first, __last);\n     }\n \n+  /// @} group filesystem\n } // namespace __detail\n   /// @endcond\n \n-  /// A filesystem path.\n+  /// @addtogroup filesystem\n+  /// @{\n+\n+  /// A filesystem path\n+  /// @ingroup filesystem\n   class path\n   {\n   public:\n@@ -693,7 +696,8 @@ namespace __detail\n     struct _Parser;\n   };\n \n-  /// @relates std::filesystem::path @{\n+  /// @{\n+  /// @relates std::filesystem::path\n \n   inline void swap(path& __lhs, path& __rhs) noexcept { __lhs.swap(__rhs); }\n \n@@ -1347,6 +1351,8 @@ namespace __detail\n _GLIBCXX_END_NAMESPACE_CXX11\n } // namespace filesystem\n \n+/// @cond undocumented\n+\n inline ptrdiff_t\n distance(filesystem::path::iterator __first, filesystem::path::iterator __last)\n { return __path_iter_distance(__first, __last); }\n@@ -1358,6 +1364,8 @@ template<typename _InputIterator, typename _Distance>\n \n extern template class __shared_ptr<const filesystem::filesystem_error::_Impl>;\n \n+/// @endcond\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "8d63e095be51f0edb6d586f436d3e293aca3b4af", "filename": "libstdc++-v3/include/experimental/bits/fs_fwd.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_fwd.h?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -60,6 +60,11 @@ inline namespace __cxx11 __attribute__((__abi_tag__ (\"cxx11\"))) { }\n    * such as paths, regular files, and directories.\n    *\n    * ISO/IEC TS 18822:2015\tC++ File System Technical Specification\n+   *\n+   * @since C++11\n+   *\n+   * @remark Link using `-lstdc++fs` to use these types and functions.\n+   *\n    * @{\n    */\n \n@@ -72,19 +77,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   class recursive_directory_iterator;\n _GLIBCXX_END_NAMESPACE_CXX11\n \n+  /// Information about free space on a disk\n   struct space_info\n   {\n     uintmax_t capacity;\n     uintmax_t free;\n     uintmax_t available;\n   };\n \n+  /// Enumerated type representing the type of a file\n   enum class file_type : signed char {\n       none = 0, not_found = -1, regular = 1, directory = 2, symlink = 3,\n       block = 4, character = 5, fifo = 6, socket = 7, unknown = 8\n   };\n \n-  /// Bitmask type\n+  /// Bitmask type controlling effects of `filesystem::copy`\n   enum class copy_options : unsigned short {\n       none = 0,\n       skip_existing = 1, overwrite_existing = 2, update_existing = 4,\n@@ -93,6 +100,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       directories_only = 64, create_symlinks = 128, create_hard_links = 256\n   };\n \n+  /// @{\n+  /// @relates copy_options\n   constexpr copy_options\n   operator&(copy_options __x, copy_options __y) noexcept\n   {\n@@ -135,9 +144,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   inline copy_options&\n   operator^=(copy_options& __x, copy_options __y) noexcept\n   { return __x = __x ^ __y; }\n+  /// @}\n \n-\n-  /// Bitmask type\n+  /// Bitmask type representing file access permissions\n   enum class perms : unsigned {\n       none\t\t=  0,\n       owner_read\t=  0400,\n@@ -163,6 +172,8 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       symlink_nofollow\t= 0x40000\n   };\n \n+  /// @{\n+  /// @relates std::experimental::filesystem::perms\n   constexpr perms\n   operator&(perms __x, perms __y) noexcept\n   {\n@@ -205,12 +216,15 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   inline perms&\n   operator^=(perms& __x, perms __y) noexcept\n   { return __x = __x ^ __y; }\n+  /// @}\n \n-  // Bitmask type\n+  /// Bitmask type controlling directory iteration\n   enum class directory_options : unsigned char {\n       none = 0, follow_directory_symlink = 1, skip_permission_denied = 2\n   };\n \n+  /// @{\n+  /// @relates directory_options\n   constexpr directory_options\n   operator&(directory_options __x, directory_options __y) noexcept\n   {\n@@ -253,7 +267,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   inline directory_options&\n   operator^=(directory_options& __x, directory_options __y) noexcept\n   { return __x = __x ^ __y; }\n+  /// @}\n \n+  /// The type used for file timestamps\n   using file_time_type = std::chrono::system_clock::time_point;\n \n   // operational functions"}, {"sha": "a2bc931c69601ac119aed76379cc39dd37d95c7b", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -71,13 +71,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   using std::basic_string_view;\n #endif\n \n+  /// @cond undocumented\n+namespace __detail\n+{\n   /** @addtogroup filesystem-ts\n    *  @{\n    */\n \n-  /// @cond undocumented\n-namespace __detail\n-{\n   template<typename _CharT,\n \t   typename _Ch = typename remove_const<_CharT>::type>\n     using __is_encoded_char\n@@ -188,10 +188,16 @@ namespace __detail\n #endif\n       >::value, _UnqualVal>::type;\n \n+  /// @} group filesystem-ts\n } // namespace __detail\n   /// @endcond\n \n+  /** @addtogroup filesystem-ts\n+   *  @{\n+   */\n+\n   /// A filesystem path.\n+  /// @ingroup filesystem-ts\n   class path\n   {\n   public:"}, {"sha": "6abef705f9acbf9051cb8609d1dd3846be2604f2", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -73,7 +73,7 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   *  @brief Thown by exception safety machinery.\n+   *  @brief Thrown by utilities for testing exception safety.\n    *  @ingroup exceptions\n    */\n   struct forced_error : public std::exception"}, {"sha": "a3290546f16b2150b846c4dd861264ec43559821", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -59,21 +59,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @ingroup utilities\n    *\n    * Classes and functions for time.\n-   * @{\n+   *\n+   * @since C++11\n    */\n \n   /** @namespace std::chrono\n    *  @brief ISO C++ 2011 namespace for date and time utilities\n+   *  @ingroup chrono\n    */\n   namespace chrono\n   {\n+    /// @addtogroup chrono\n+    /// @{\n+\n+    /// `chrono::duration` represents a distance between two points in time\n     template<typename _Rep, typename _Period = ratio<1>>\n       struct duration;\n \n+    /// `chrono::time_point` represents a point in time as measured by a clock\n     template<typename _Clock, typename _Dur = typename _Clock::duration>\n       struct time_point;\n+    /// @}\n   }\n \n+  /// @addtogroup chrono\n+  /// @{\n+\n   // 20.11.4.3 specialization of common_type (for duration, sfinae-friendly)\n \n   /// @cond undocumented\n@@ -99,8 +110,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @endcond\n \n+  /// @{\n+  /// @relates chrono::duration\n+\n   /// Specialization of common_type for chrono::duration types.\n-  /// @relates duration\n   template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>\n     struct common_type<chrono::duration<_Rep1, _Period1>,\n \t\t       chrono::duration<_Rep2, _Period2>>\n@@ -110,7 +123,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /// Specialization of common_type for two identical chrono::duration types.\n-  /// @relates duration\n   template<typename _Rep, typename _Period>\n     struct common_type<chrono::duration<_Rep, _Period>,\n \t\t       chrono::duration<_Rep, _Period>>\n@@ -120,13 +132,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   /// Specialization of common_type for one chrono::duration type.\n-  /// @relates duration\n   template<typename _Rep, typename _Period>\n     struct common_type<chrono::duration<_Rep, _Period>>\n     {\n       using type = chrono::duration<typename common_type<_Rep>::type,\n \t\t\t\t    typename _Period::type>;\n     };\n+  /// @}\n \n   // 20.11.4.3 specialization of common_type (for time_point, sfinae-friendly)\n \n@@ -144,26 +156,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @endcond\n \n+  /// @{\n+  /// @relates chrono::time_point\n+\n   /// Specialization of common_type for chrono::time_point types.\n-  /// @relates time_point\n   template<typename _Clock, typename _Duration1, typename _Duration2>\n     struct common_type<chrono::time_point<_Clock, _Duration1>,\n \t\t       chrono::time_point<_Clock, _Duration2>>\n     : __timepoint_common_type<common_type<_Duration1, _Duration2>, _Clock>\n     { };\n \n   /// Specialization of common_type for two identical chrono::time_point types.\n-  /// @relates time_point\n   template<typename _Clock, typename _Duration>\n     struct common_type<chrono::time_point<_Clock, _Duration>,\n \t\t       chrono::time_point<_Clock, _Duration>>\n     { using type = chrono::time_point<_Clock, _Duration>; };\n \n   /// Specialization of common_type for one chrono::time_point type.\n-  /// @relates time_point\n   template<typename _Clock, typename _Duration>\n     struct common_type<chrono::time_point<_Clock, _Duration>>\n     { using type = chrono::time_point<_Clock, _Duration>; };\n+  /// @}\n \n   /// @} group chrono\n \n@@ -442,7 +455,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// @endcond\n \n-    /// duration\n     template<typename _Rep, typename _Period>\n       struct duration\n       {\n@@ -623,7 +635,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \trep __r;\n       };\n \n-    /// @relates duration @{\n+    /// @{\n+    /// @relates std::chrono::duration\n \n     /// The sum of two durations.\n     template<typename _Rep1, typename _Period1,\n@@ -668,9 +681,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// @endcond\n \n-    /// @relates duration @{\n+    /** @{\n+     * Arithmetic operators for chrono::duration\n+     * @relates std::chrono::duration\n+     */\n \n-    /// Multiply a duration by a scalar value.\n     template<typename _Rep1, typename _Period, typename _Rep2>\n       constexpr duration<__common_rep_t<_Rep1, _Rep2>, _Period>\n       operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)\n@@ -680,7 +695,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __cd(__cd(__d).count() * __s);\n       }\n \n-    /// Multiply a duration by a scalar value.\n     template<typename _Rep1, typename _Rep2, typename _Period>\n       constexpr duration<__common_rep_t<_Rep2, _Rep1>, _Period>\n       operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)\n@@ -731,9 +745,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef typename common_type<__dur1,__dur2>::type\t__cd;\n \treturn __cd(__cd(__lhs).count() % __cd(__rhs).count());\n       }\n+    /// @}\n \n     // comparisons\n \n+    /** @{\n+     * Comparisons for chrono::duration\n+     * @relates std::chrono::duration\n+     */\n+\n     template<typename _Rep1, typename _Period1,\n \t     typename _Rep2, typename _Period2>\n       constexpr bool\n@@ -802,6 +822,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     /// @}\n \n+    /// @cond undocumented\n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n # define _GLIBCXX_CHRONO_INT64_T int64_t\n #elif defined __INT64_TYPE__\n@@ -811,6 +832,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\"Representation type for nanoseconds must have at least 64 bits\");\n # define _GLIBCXX_CHRONO_INT64_T long long\n #endif\n+    /// @endcond\n \n     /// nanoseconds\n     using nanoseconds\t= duration<_GLIBCXX_CHRONO_INT64_T, nano>;\n@@ -846,7 +868,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #undef _GLIBCXX_CHRONO_INT64_T\n \n-    /// time_point\n     template<typename _Clock, typename _Dur>\n       struct time_point\n       {\n@@ -970,7 +991,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n #endif // C++17\n \n-    /// @relates time_point @{\n+    /// @{\n+    /// @relates time_point\n \n     /// Adjust a time point forwards by the given duration.\n     template<typename _Clock, typename _Dur1,\n@@ -1014,16 +1036,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __time_point(__lhs.time_since_epoch() -__rhs);\n       }\n \n-    /// @}\n-\n-    /// @relates time_point @{\n-\n     /// The difference between two time points (as a duration)\n     template<typename _Clock, typename _Dur1, typename _Dur2>\n       constexpr typename common_type<_Dur1, _Dur2>::type\n       operator-(const time_point<_Clock, _Dur1>& __lhs,\n \t\tconst time_point<_Clock, _Dur2>& __rhs)\n       { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }\n+    /// @}\n+\n+    /** @{\n+     * Comparisons for time_point\n+     * @relates chrono::time_point\n+     */\n \n     template<typename _Clock, typename _Dur1, typename _Dur2>\n       constexpr bool\n@@ -3135,7 +3159,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       };\n #endif // C++20\n \n-    /// @}\n+    /// @} group chrono\n   } // namespace chrono\n \n #if __cplusplus > 201103L\n@@ -3169,6 +3193,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   inline namespace chrono_literals\n   {\n+    /// @addtogroup chrono\n+    /// @{\n+\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n     /// @cond undocumented\n@@ -3260,6 +3287,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++20\n \n #pragma GCC diagnostic pop\n+    /// @}\n   } // inline namespace chrono_literals\n   } // inline namespace literals\n \n@@ -3271,6 +3299,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201703L\n   namespace chrono\n   {\n+    /// @addtogroup chrono\n+    /// @{\n+\n     // 12/24 HOURS FUNCTIONS\n \n     constexpr bool\n@@ -3309,7 +3340,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    return __h + 12h;\n \t}\n     }\n-  }\n+    /// @} group chrono\n+  } // namespace chrono\n #endif\n \n #if __cplusplus >= 201703L"}, {"sha": "142af7100d00d3da31d5eb351ea596c3f560c911", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -48,7 +48,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /** @addtogroup diagnostics\n-   *  @{\n+   * @{\n    */\n \n   class error_code;\n@@ -75,8 +75,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline constexpr bool is_error_condition_enum_v =\n       is_error_condition_enum<_Tp>::value;\n #endif // C++17\n+  /// @}\n+\n   inline namespace _V2 {\n \n+  /** @addtogroup diagnostics\n+   * @{\n+   */\n+\n   /** Abstract base class for types defining a category of error codes.\n    *\n    * An error category defines a context that give meaning to the integer\n@@ -85,6 +91,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * associated with the \"generic\" category and other OS-specific error\n    * numbers are associated with the \"system\" category, but a user-defined\n    * category might give different meanings to the same numerical values.\n+   *\n+   * @since C++11\n    */\n   class error_category\n   {\n@@ -159,8 +167,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Error category for other error codes defined by the OS.\n   _GLIBCXX_CONST const error_category& system_category() noexcept;\n \n+  /// @}\n   } // end inline namespace\n \n+  /** @addtogroup diagnostics\n+   * @{\n+   */\n+\n   error_code make_error_code(errc) noexcept;\n \n   /** Class error_code\n@@ -176,6 +189,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * an `errno` value and the \"generic\" category, but errors from an HTTP\n    * library might be represented by an HTTP response status code (e.g. 404)\n    * and a custom category defined by the library.\n+   *\n+   * @since C++11\n+   * @ingroup diagnostics\n    */\n   class error_code\n   {\n@@ -275,6 +291,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * An `error_condition` represents something that the program can test for,\n    * and subsequently take appropriate action.\n+   *\n+   * @since C++11\n    */\n   class error_condition\n   {\n@@ -346,7 +364,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    && __lhs.value() == __rhs.value()); }\n \n   /// @relates error_code\n-  /// @relates error_condition\n   inline bool\n   operator==(const error_code& __lhs, const error_condition& __rhs) noexcept\n   {\n@@ -386,7 +403,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t&& __lhs.value() < __rhs.value()));\n   }\n \n-  /// @relates error_code\n   /// @relates error_condition\n   inline bool\n   operator==(const error_condition& __lhs, const error_code& __rhs) noexcept\n@@ -401,12 +417,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return !(__lhs == __rhs); }\n \n   /// @relates error_code\n-  /// @relates error_condition\n   inline bool\n   operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n \n-  /// @relates error_code\n   /// @relates error_condition\n   inline bool\n   operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept\n@@ -418,13 +432,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t     const error_condition& __rhs) noexcept\n   { return !(__lhs == __rhs); }\n #endif // three_way_comparison\n+  /// @}\n \n   /**\n    * @brief An exception type that includes an `error_code` value.\n    *\n    * Typically used to report errors from the operating system and other\n    * low-level APIs.\n    *\n+   * @since C++11\n    * @ingroup exceptions\n    */\n   class system_error : public std::runtime_error"}, {"sha": "a023e22ea89f39b82afa8cf0a2552d6a878d0805", "filename": "libstdc++-v3/libsupc++/exception", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -46,7 +46,10 @@ namespace std\n    */\n \n   /** If an %exception is thrown which is not listed in a function's\n-   *  %exception specification, one of these may be thrown.  */\n+   *  %exception specification, one of these may be thrown.\n+   *\n+   *  @ingroup exceptions\n+   */\n   class bad_exception : public exception\n   {\n   public:\n@@ -93,21 +96,24 @@ namespace std\n \n   /** [18.6.4]/1:  'Returns true after completing evaluation of a\n    *  throw-expression until either completing initialization of the\n-   *  exception-declaration in the matching handler or entering @c unexpected()\n-   *  due to the throw; or after entering @c terminate() for any reason\n-   *  other than an explicit call to @c terminate().  [Note: This includes\n+   *  exception-declaration in the matching handler or entering `unexpected()`\n+   *  due to the throw; or after entering `terminate()` for any reason\n+   *  other than an explicit call to `terminate()`.  [Note: This includes\n    *  stack unwinding [15.2].  end note]'\n    *\n-   *  2: 'When @c uncaught_exception() is true, throwing an\n-   *  %exception can result in a call of @c terminate()\n+   *  2: 'When `uncaught_exception()` is true, throwing an\n+   *  %exception can result in a call of 1terminate()`\n    *  (15.5.1).'\n    */\n   _GLIBCXX17_DEPRECATED\n   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n \n #if __cplusplus >= 201703L || !defined(__STRICT_ANSI__) // c++17 or gnu++98\n #define __cpp_lib_uncaught_exceptions 201411L\n-  /// The number of uncaught exceptions.\n+  /** The number of uncaught exceptions.\n+   *  @since C++17, or any non-strict mode, e.g. `-std=gnu++98`\n+   *  @see uncaught_exception()\n+   */\n   int uncaught_exceptions() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));\n #endif\n "}, {"sha": "60faa8836b86e3d8921294a1973c6c261b54b81f", "filename": "libstdc++-v3/libsupc++/exception.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception.h?ref=f2ce64b53fa76a4c192fe51b2f6c5a863a3b1241", "patch": "@@ -44,6 +44,7 @@ namespace std\n   /**\n    * @defgroup exceptions Exceptions\n    * @ingroup diagnostics\n+   * @since C++98\n    *\n    * Classes and functions for reporting errors via exceptions.\n    * @{"}]}