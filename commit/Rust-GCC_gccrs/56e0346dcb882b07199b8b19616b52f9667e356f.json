{"sha": "56e0346dcb882b07199b8b19616b52f9667e356f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZlMDM0NmRjYjg4MmIwNzE5OWI4YjE5NjE2YjUyZjk2NjdlMzU2Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-10-31T02:01:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-10-31T02:01:16Z"}, "message": "PR c++/92268 - hard error satisfying return-type-requirement\n\nPreviously we would put the template arguments for the concept-check in a\nTEMPLATE_ID and then also pass them to constraints_satisfied_p, which meant\nthat we would try to normalize the concept-check with the fully instantiated\narguments, leading to sadness.  Simply not passing the args to\nconstraints_satisfied_p fixes the problem.\n\nI also noticed that we weren't detecting substitution failure in the\nconstraints, but were silently treating it as success.\n\n\t* constraint.cc (type_deducible_p): Check for substitution failure.\n\t(diagnose_compound_requirement): Adjust diagnostic.\n\t* pt.c (do_auto_deduction): Don't pass cargs to\n\tconstraints_satisfied_p.\n\nFrom-SVN: r277654", "tree": {"sha": "7547594aa1edb233eafc2a8935fc82ee8742e7c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7547594aa1edb233eafc2a8935fc82ee8742e7c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56e0346dcb882b07199b8b19616b52f9667e356f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e0346dcb882b07199b8b19616b52f9667e356f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56e0346dcb882b07199b8b19616b52f9667e356f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56e0346dcb882b07199b8b19616b52f9667e356f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d11368e6e0bc88033c2ff8a0e5f534d6d2f36b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11368e6e0bc88033c2ff8a0e5f534d6d2f36b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d11368e6e0bc88033c2ff8a0e5f534d6d2f36b89"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "585420a62c3c188c557e462c8903d2bd16519f1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -1,3 +1,11 @@\n+2019-10-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92268 - hard error satisfying return-type-requirement\n+\t* constraint.cc (type_deducible_p): Check for substitution failure.\n+\t(diagnose_compound_requirement): Adjust diagnostic.\n+\t* pt.c (do_auto_deduction): Don't pass cargs to\n+\tconstraints_satisfied_p.\n+\n 2019-10-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91369 - Implement P0784R7: constexpr new"}, {"sha": "db2a30ced7cc05de1a2babf53df8dbccb7bbf410", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -1822,10 +1822,7 @@ tsubst_type_requirement (tree t, tree args, subst_info info)\n   return finish_type_requirement (EXPR_LOCATION (t), type);\n }\n \n-/* True if TYPE can be deduced from EXPR.\n-\n-   FIXME: C++20 compound requirement constraints should be normalized and then\n-   satisfied rather than substituted.  */\n+/* True if TYPE can be deduced from EXPR.  */\n \n static bool\n type_deducible_p (tree expr, tree type, tree placeholder, tree args,\n@@ -1839,12 +1836,17 @@ type_deducible_p (tree expr, tree type, tree placeholder, tree args,\n      substitutes args into any template parameters in the trailing\n      result type.  */\n   tree saved_constr = PLACEHOLDER_TYPE_CONSTRAINTS (placeholder);\n-  PLACEHOLDER_TYPE_CONSTRAINTS (placeholder)\n+  tree subst_constr\n     = tsubst_constraint (saved_constr,\n \t\t\t args,\n \t\t\t info.complain | tf_partial,\n \t\t\t info.in_decl);\n \n+  if (subst_constr == error_mark_node)\n+    return false;\n+\n+  PLACEHOLDER_TYPE_CONSTRAINTS (placeholder) = subst_constr;\n+\n   /* Temporarily unlink the canonical type.  */\n   tree saved_type = TYPE_CANONICAL (placeholder);\n   TYPE_CANONICAL (placeholder) = NULL_TREE;\n@@ -3139,7 +3141,8 @@ diagnose_compound_requirement (tree req, tree args, tree in_decl)\n \t  if (!type_deducible_p (expr, type, placeholder, args, quiet))\n \t    {\n \t      tree orig_expr = TREE_OPERAND (req, 0);\n-\t      inform (loc, \"type deduction from %qE failed\", orig_expr);\n+\t      inform (loc, \"%qE does not satisfy return-type-requirement\",\n+\t\t      orig_expr);\n \n \t      /* Further explain the reason for the error.  */\n \t      type_deducible_p (expr, type, placeholder, args, noisy);"}, {"sha": "414140ade6c661a4e45488a444e02117b0541afc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -28138,7 +28138,7 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t/* Rebuild the check using the deduced arguments.  */\n \tcheck = build_concept_check (cdecl, cargs, tf_none);\n \n-\tif (!constraints_satisfied_p (check, cargs))\n+\tif (!constraints_satisfied_p (check))\n           {\n             if (complain & tf_warning_or_error)\n               {"}, {"sha": "7da08db27920f46b715ce70e67cc286f9d86b06e", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic1.C?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -8,12 +8,12 @@ concept bool SameAs = __is_same_as(T, U);\n template <class T>\n concept bool R1 = requires (T& t) { // { dg-message \"in requirements\" }\n   { t.begin() } -> T;\t\t// { dg-error \"no match\" }\n-  { t.end() } -> SameAs<T*>;\t// { dg-error \"does not satisfy\" }\n+  { t.end() } -> SameAs<T*>;\t// { dg-message \"does not satisfy\" }\n };\n \n template <class T>\n concept bool R2 = requires (T& t) { // { dg-message \"in requirements\" }\n-  { t.end() } -> SameAs<T*>;\t// { dg-error \"does not satisfy\" }\n+  { t.end() } -> SameAs<T*>;\t// { dg-message \"does not satisfy\" }\n };\n \n struct foo {"}, {"sha": "d90e5cfb02f6e92557c08ae67a7a2ba5e08098ba", "filename": "gcc/testsuite/g++.dg/concepts/placeholder3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder3.C?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -8,7 +8,7 @@ concept bool Same = __is_same_as(T, U);\n template <class T>\n concept bool C =\n   requires { // { dg-message \"in requirements\" }\n-    { 0 } -> Same<T>;\t\t// { dg-error \"does not satisfy\" }\n+    { 0 } -> Same<T>;\t\t// { dg-message \"does not satisfy\" }\n   };\n \n template <C c>"}, {"sha": "ab9d8e632af2a7e6c4b7551077ab8f463aede82b", "filename": "gcc/testsuite/g++.dg/concepts/placeholder4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fplaceholder4.C?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -8,7 +8,7 @@ concept bool Same = __is_same_as(T, U);\n template <class T>\n concept bool C =\n   requires { // { dg-message \"in requirements\" }\n-    { 0 } -> Same<T>;\t\t// { dg-error \"does not satisfy\" }\n+    { 0 } -> Same<T>;\t\t// { dg-message \"does not satisfy\" }\n   };\n \n template <class T>"}, {"sha": "264b873c7f4f7847cb7c26c5d5d3326f8f33a417", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67178.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -12,7 +12,7 @@ concept C0 = requires (auto x) { // { dg-error \"placeholder type\" }\n template<typename T>\n concept C1 = requires (C1 auto x) { // { dg-error \"not been declared|placeholder|two or more|in requirements\" }\n   x; // { dg-error \"not declared\" }\n-  { x } -> c; // { dg-error \"not declared|does not satisfy\" }\n+  { x } -> c; // { dg-message \"not declared|does not satisfy\" }\n };\n \n template<typename T>"}, {"sha": "065876e94e49bd89e1371a7f93725bd2ed7cacce", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires6.C?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -10,7 +10,7 @@ concept SameAs = __is_same_as(T, U);\n template <typename T>\n concept C1 = requires(T t) { // { dg-message \"in requirements\" }\n   { t } -> SameAs<T>; // NOTE: t deduced as decltype((t))\n-  // { dg-error \"does not satisfy placeholder constraints\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"does not satisfy\" \"\" { target *-*-* } .-1 }\n };\n \n template <typename T>"}, {"sha": "1d005f059d0dd8478d330c39a450781d03dda4ce", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-return-req1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56e0346dcb882b07199b8b19616b52f9667e356f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C?ref=56e0346dcb882b07199b8b19616b52f9667e356f", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/92268\n+// { dg-do compile { target c++2a } }\n+\n+template <class T> concept Two = true;\n+template <class T> concept One = Two<typename T::type>;\n+template <class T> concept Zero = requires\n+  {\n+   { T() } -> One;\n+  };\n+\n+template <class T>\n+void f() requires Zero<T>;\n+template <class T>\n+int f(...);\n+\n+int main()\n+{\n+  f<int>();\n+}"}]}