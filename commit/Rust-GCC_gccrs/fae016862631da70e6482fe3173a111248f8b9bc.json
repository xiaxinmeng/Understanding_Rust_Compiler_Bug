{"sha": "fae016862631da70e6482fe3173a111248f8b9bc", "node_id": "C_kwDOANBUbNoAKGZhZTAxNjg2MjYzMWRhNzBlNjQ4MmZlMzE3M2ExMTEyNDhmOGI5YmM", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-16T19:57:07Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-17T18:08:17Z"}, "message": "c++: Improve diagnostic for class tmpl/class redecl [PR103749]\n\nFor code like\n\n  template<typename>\n  struct bar;\n\n  struct bar {\n    int baz;\n  };\n\n  bar var;\n\nwe emit a fairly misleading and unwieldy diagnostic:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n$ g++ -c u.cc\nu.cc:6:8: error: template argument required for 'struct bar'\n    6 | struct bar {\n      |        ^~~\nu.cc:10:5: error: class template argument deduction failed:\n   10 | bar var;\n      |     ^~~\nu.cc:10:5: error: no matching function for call to 'bar()'\nu.cc:3:17: note: candidate: 'template<class> bar()-> bar< <template-parameter-1-1> >'\n    3 |   friend struct bar;\n      |                 ^~~\nu.cc:3:17: note:   template argument deduction/substitution failed:\nu.cc:10:5: note:   couldn't deduce template parameter '<template-parameter-1-1>'\n   10 | bar var;\n      |     ^~~\nu.cc:3:17: note: candidate: 'template<class> bar(bar< <template-parameter-1-1> >)-> bar< <template-parameter-1-1> >'\n    3 |   friend struct bar;\n      |                 ^~~\nu.cc:3:17: note:   template argument deduction/substitution failed:\nu.cc:10:5: note:   candidate expects 1 argument, 0 provided\n   10 | bar var;\n      |     ^~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nbut with this patch we get:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nz.C:4:10: error: class template 'bar' redeclared as non-template\n    4 |   struct bar {\n      |          ^~~\nz.C:2:10: note: previous declaration here\n    2 |   struct bar;\n      |          ^~~\nz.C:8:7: error: 'bar<...auto...> var' has incomplete type\n    8 |   bar var;\n      |       ^~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nwhich is clearer about what the problem is.\n\nI thought it'd be nice to avoid printing the messages about failed CTAD,\ntoo.  To that end, I'm using CLASSTYPE_ERRONEOUS to suppress CTAD.  Not\nsure if that's entirely kosher.\n\nThe other direction (first a non-template class declaration followed by\na class template definition) we handle quite well:\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nz.C:11:8: error: 'bar' is not a template\n   11 | struct bar {};\n      |        ^~~\nz.C:8:8: note: previous declaration here\n    8 | struct bar;\n      |        ^~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\tPR c++/103749\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (lookup_and_check_tag): Give an error when a class was\n\tdeclared as template but no template header has been provided.\n\t* pt.c (do_class_deduction): Don't deduce CLASSTYPE_ERRONEOUS\n\ttypes.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/redecl4.C: Adjust dg-error.\n\t* g++.dg/diagnostic/redeclaration-2.C: New test.", "tree": {"sha": "7df53a4ee969e86cb50294e6f92a04188336e940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7df53a4ee969e86cb50294e6f92a04188336e940"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fae016862631da70e6482fe3173a111248f8b9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae016862631da70e6482fe3173a111248f8b9bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae016862631da70e6482fe3173a111248f8b9bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae016862631da70e6482fe3173a111248f8b9bc/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ae8d7613a8b15d0d729b38ffd49153f1314799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ae8d7613a8b15d0d729b38ffd49153f1314799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ae8d7613a8b15d0d729b38ffd49153f1314799"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "982fca8983d467c65bb5f28a869e2181fa33710e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae016862631da70e6482fe3173a111248f8b9bc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae016862631da70e6482fe3173a111248f8b9bc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fae016862631da70e6482fe3173a111248f8b9bc", "patch": "@@ -15438,6 +15438,16 @@ lookup_and_check_tag (enum tag_types tag_code, tree name,\n       return error_mark_node;\n     }\n \n+  if (DECL_CLASS_TEMPLATE_P (decl)\n+      && !template_header_p\n+      && how == TAG_how::CURRENT_ONLY)\n+    {\n+      error (\"class template %qD redeclared as non-template\", name);\n+      inform (location_of (decl), \"previous declaration here\");\n+      CLASSTYPE_ERRONEOUS (TREE_TYPE (decl)) = true;\n+      return error_mark_node;\n+    }\n+\n   if (DECL_CLASS_TEMPLATE_P (decl)\n       /* If scope is TAG_how::CURRENT_ONLY we're defining a class,\n \t so ignore a template template parameter.  */"}, {"sha": "4f0ae6d58513f70f1adcdb3afa273ffebf62ea7c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae016862631da70e6482fe3173a111248f8b9bc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae016862631da70e6482fe3173a111248f8b9bc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fae016862631da70e6482fe3173a111248f8b9bc", "patch": "@@ -29601,6 +29601,13 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n   if (DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl))\n     return ptype;\n \n+  /* If the class was erroneous, don't try to deduce, because that\n+     can generate a lot of diagnostic.  */\n+  if (TREE_TYPE (tmpl)\n+      && TYPE_LANG_SPECIFIC (TREE_TYPE (tmpl))\n+      && CLASSTYPE_ERRONEOUS (TREE_TYPE (tmpl)))\n+    return ptype;\n+\n   /* Wait until the enclosing scope is non-dependent.  */\n   if (DECL_CLASS_SCOPE_P (tmpl)\n       && dependent_type_p (DECL_CONTEXT (tmpl)))"}, {"sha": "4423e12b0b130c72c8bf762df9f7a9c5fbd805b4", "filename": "gcc/testsuite/g++.dg/diagnostic/redeclaration-2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae016862631da70e6482fe3173a111248f8b9bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fredeclaration-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae016862631da70e6482fe3173a111248f8b9bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fredeclaration-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fredeclaration-2.C?ref=fae016862631da70e6482fe3173a111248f8b9bc", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/103749\n+\n+struct foo {\n+  template<typename>\n+  friend struct bar;\n+};\n+\n+struct bar { // { dg-error \"redeclared as non-template\" }\n+  int baz;\n+};\n+\n+template<typename>\n+struct T; // { dg-message \"previous\" }\n+\n+struct T { // { dg-error \"redeclared as non-template\" }\n+};\n+\n+bar var; // { dg-error \"\" }\n+T t; // { dg-error \"\" }"}, {"sha": "c9282cde8601064a1ea89d56fed5c94744d43763", "filename": "gcc/testsuite/g++.dg/template/redecl4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fae016862631da70e6482fe3173a111248f8b9bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fae016862631da70e6482fe3173a111248f8b9bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl4.C?ref=fae016862631da70e6482fe3173a111248f8b9bc", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile }\n \n template<int> union A;  // { dg-message \"previous\" }\n-struct A;               // { dg-error \"non-template\" }\n+struct A;               // { dg-error \"redeclared as non-template\" }"}]}