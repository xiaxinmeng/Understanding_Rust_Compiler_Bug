{"sha": "9b4eee5fd158c4ee75d1f1000debbf5082fb9b56", "node_id": "C_kwDOANBUbNoAKDliNGVlZTVmZDE1OGM0ZWU3NWQxZjEwMDBkZWJiZjUwODJmYjliNTY", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-01-28T16:02:09Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-02T14:51:07Z"}, "message": "analyzer: stop -ftrivial-auto-var-init from suppressing uninit warnings [PR104270]\n\nGCC 12 has gained two features for dealing with uninitialized variables:\n\n(a) a new -Wanalyzer-use-of-uninitialized-value warning within -fanalyzer\nfor interprocedural path-sensitive detection of ununit uses, and\n\n(b) a new -ftrivial-auto-var-init option for mitigating some uses of\nuninit variables\n\nIt turns out that using (b) was thwarting (a), as it led to -fanalyzer\nseeing calls to IFN_DEFERRED_INIT, which -fanalyzer wasn't\nspecial-casing, thus treating it as initializing the variables in\nquestion, and thus silencing -Wanalyzer-use-of-uninitialized-value on\nthem.\n\ninvoke.texi says:\n\n\"GCC still considers an automatic variable that doesn't have an explicit\ninitializer as uninitialized, @option{-Wuninitialized} will still report\nwarning messages on such automatic variables.\"\n\nand thus -Wanalyzer-use-of-uninitialized-value ought to as well.\n\nThis patch adds special-case handling to -fanalyzer for\nIFN_DEFERRED_INIT,  so that -fanalyzer will warn on uninit uses of\nvariables that are mitigated by -ftrivial-auto-var-init.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/104270\n\t* region-model.cc (region_model::on_call_pre): Handle\n\tIFN_DEFERRED_INIT.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/104270\n\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-pattern.c: New\n\ttest.\n\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-uninitialized.c:\n\tNew test.\n\t* gcc.dg/analyzer/uninit-trivial-auto-var-init-zero.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "525c279dd4a7ca0dffb3f70bd2af9b3857912289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/525c279dd4a7ca0dffb3f70bd2af9b3857912289"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cac2f69cdad434ad5cb60f5fe931d45cd82ef476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cac2f69cdad434ad5cb60f5fe931d45cd82ef476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cac2f69cdad434ad5cb60f5fe931d45cd82ef476"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "4c312b053f807affc04aa70e3b4eb3d92aa6e142", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=9b4eee5fd158c4ee75d1f1000debbf5082fb9b56", "patch": "@@ -1109,6 +1109,16 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \n   bool unknown_side_effects = false;\n \n+  /* Special-case for IFN_DEFERRED_INIT.\n+     We want to report uninitialized variables with -fanalyzer (treating\n+     -ftrivial-auto-var-init= as purely a mitigation feature).\n+     Handle IFN_DEFERRED_INIT by treating it as no-op: don't touch the\n+     lhs of the call, so that it is still uninitialized from the point of\n+     view of the analyzer.  */\n+  if (gimple_call_internal_p (call)\n+      && gimple_call_internal_fn (call) == IFN_DEFERRED_INIT)\n+    return false;\n+\n   /* Some of the cases below update the lhs of the call based on the\n      return value, but not all.  Provide a default value, which may\n      get overwritten below.  */"}, {"sha": "0b78dc652670d515456e6963712151d6ee3603f9", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-trivial-auto-var-init-pattern.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-pattern.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-pattern.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-pattern.c?ref=9b4eee5fd158c4ee75d1f1000debbf5082fb9b56", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-additional-options \"-ftrivial-auto-var-init=pattern\" } */\n+\n+int test_1 (void)\n+{\n+  int i; /* { dg-message \"region created on stack here\" } */\n+  return i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n+}"}, {"sha": "124d3a327b8a59d159c10eb0a840caa871228ce6", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-trivial-auto-var-init-uninitialized.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-uninitialized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-uninitialized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-uninitialized.c?ref=9b4eee5fd158c4ee75d1f1000debbf5082fb9b56", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-additional-options \"-ftrivial-auto-var-init=uninitialized\" } */\n+\n+int test_1 (void)\n+{\n+  int i; /* { dg-message \"region created on stack here\" } */\n+  return i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n+}"}, {"sha": "ef7dc674867450780b417c0e18d61e7c0296bfdd", "filename": "gcc/testsuite/gcc.dg/analyzer/uninit-trivial-auto-var-init-zero.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4eee5fd158c4ee75d1f1000debbf5082fb9b56/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Funinit-trivial-auto-var-init-zero.c?ref=9b4eee5fd158c4ee75d1f1000debbf5082fb9b56", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-additional-options \"-ftrivial-auto-var-init=zero\" } */\n+\n+int test_1 (void)\n+{\n+  int i; /* { dg-message \"region created on stack here\" } */\n+  return i; /* { dg-warning \"use of uninitialized value 'i'\" } */\n+}"}]}