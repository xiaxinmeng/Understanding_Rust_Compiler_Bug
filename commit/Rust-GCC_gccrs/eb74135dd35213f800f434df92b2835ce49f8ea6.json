{"sha": "eb74135dd35213f800f434df92b2835ce49f8ea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3NDEzNWRkMzUyMTNmODAwZjQzNGRmOTJiMjgzNWNlNDlmOGVhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:07Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:07Z"}, "message": "recog: Add a way of temporarily undoing changes\n\nIn some cases, it can be convenient to roll back the changes that\nhave been made by validate_change to see how things looked before,\nthen reroll the changes.  For example, this makes it possible\nto defer calculating the cost of an instruction until we know that\nthe result is actually needed.  It can also make dumps easier to read.\n\nThis patch adds a couple of helper functions for doing that.\n\ngcc/\n\t* recog.h (temporarily_undo_changes, redo_changes): Declare.\n\t* recog.c (temporarily_undone_changes): New variable.\n\t(validate_change_1, confirm_change_group): Check that it's zero.\n\t(cancel_changes): Likewise.\n\t(swap_change, temporarily_undo_changes): New functions.\n\t(redo_changes): Likewise.", "tree": {"sha": "7b9bc5b0bd2a9e257ed765d0fa8a057877c5b0f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9bc5b0bd2a9e257ed765d0fa8a057877c5b0f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb74135dd35213f800f434df92b2835ce49f8ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb74135dd35213f800f434df92b2835ce49f8ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb74135dd35213f800f434df92b2835ce49f8ea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb74135dd35213f800f434df92b2835ce49f8ea6/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6059a3dd084d157759309357e5a52f8a8cc504c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6059a3dd084d157759309357e5a52f8a8cc504c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6059a3dd084d157759309357e5a52f8a8cc504c1"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "cee481f4fa06ae35f92be6a86961235f85f2a88d", "filename": "gcc/recog.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74135dd35213f800f434df92b2835ce49f8ea6/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74135dd35213f800f434df92b2835ce49f8ea6/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=eb74135dd35213f800f434df92b2835ce49f8ea6", "patch": "@@ -193,6 +193,7 @@ static change_t *changes;\n static int changes_allocated;\n \n static int num_changes = 0;\n+static int temporarily_undone_changes = 0;\n \n /* Validate a proposed change to OBJECT.  LOC is the location in the rtl\n    at which NEW_RTX will be placed.  If NEW_LEN is >= 0, XVECLEN (NEW_RTX, 0)\n@@ -218,6 +219,7 @@ static bool\n validate_change_1 (rtx object, rtx *loc, rtx new_rtx, bool in_group,\n \t\t   bool unshare, int new_len = -1)\n {\n+  gcc_assert (temporarily_undone_changes == 0);\n   rtx old = *loc;\n \n   /* Single-element parallels aren't valid and won't match anything.\n@@ -506,6 +508,7 @@ confirm_change_group (void)\n   int i;\n   rtx last_object = NULL;\n \n+  gcc_assert (temporarily_undone_changes == 0);\n   for (i = 0; i < num_changes; i++)\n     {\n       rtx object = changes[i].object;\n@@ -561,6 +564,7 @@ num_validated_changes (void)\n void\n cancel_changes (int num)\n {\n+  gcc_assert (temporarily_undone_changes == 0);\n   int i;\n \n   /* Back out all the changes.  Do this in the opposite order in which\n@@ -577,6 +581,50 @@ cancel_changes (int num)\n   num_changes = num;\n }\n \n+/* Swap the status of change NUM from being applied to not being applied,\n+   or vice versa.  */\n+\n+static void\n+swap_change (int num)\n+{\n+  if (changes[num].old_len >= 0)\n+    std::swap (XVECLEN (*changes[num].loc, 0), changes[num].old_len);\n+  else\n+    std::swap (*changes[num].loc, changes[num].old);\n+  if (changes[num].object && !MEM_P (changes[num].object))\n+    std::swap (INSN_CODE (changes[num].object), changes[num].old_code);\n+}\n+\n+/* Temporarily undo all the changes numbered NUM and up, with a view\n+   to reapplying them later.  The next call to the changes machinery\n+   must be:\n+\n+      redo_changes (NUM)\n+\n+   otherwise things will end up in an invalid state.  */\n+\n+void\n+temporarily_undo_changes (int num)\n+{\n+  gcc_assert (temporarily_undone_changes == 0 && num <= num_changes);\n+  for (int i = num_changes - 1; i >= num; i--)\n+    swap_change (i);\n+  temporarily_undone_changes = num_changes - num;\n+}\n+\n+/* Redo the changes that were temporarily undone by:\n+\n+      temporarily_undo_changes (NUM).  */\n+\n+void\n+redo_changes (int num)\n+{\n+  gcc_assert (temporarily_undone_changes == num_changes - num);\n+  for (int i = num; i < num_changes; ++i)\n+    swap_change (i);\n+  temporarily_undone_changes = 0;\n+}\n+\n /* Reduce conditional compilation elsewhere.  */\n /* A subroutine of validate_replace_rtx_1 that tries to simplify the resulting\n    rtx.  */"}, {"sha": "facf36e7c08cf616826875e446ebb3c87c730aaf", "filename": "gcc/recog.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74135dd35213f800f434df92b2835ce49f8ea6/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74135dd35213f800f434df92b2835ce49f8ea6/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=eb74135dd35213f800f434df92b2835ce49f8ea6", "patch": "@@ -96,6 +96,8 @@ extern void confirm_change_group (void);\n extern int apply_change_group (void);\n extern int num_validated_changes (void);\n extern void cancel_changes (int);\n+extern void temporarily_undo_changes (int);\n+extern void redo_changes (int);\n extern int constrain_operands (int, alternative_mask);\n extern int constrain_operands_cached (rtx_insn *, int);\n extern int memory_address_addr_space_p (machine_mode, rtx, addr_space_t);"}]}