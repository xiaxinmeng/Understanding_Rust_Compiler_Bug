{"sha": "88a3dbc1a94b7bed9dfd556d4064d9b3ed721a11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhM2RiYzFhOTRiN2JlZDlkZmQ1NTZkNDA2NGQ5YjNlZDcyMWExMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-22T22:18:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-22T22:18:10Z"}, "message": "(c_expand_return): Issue a warning if returning address of non-static\nlocal object.\n\nFrom-SVN: r6405", "tree": {"sha": "04c92440c5472daddbbdd32f096eecff6067cb6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c92440c5472daddbbdd32f096eecff6067cb6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a3dbc1a94b7bed9dfd556d4064d9b3ed721a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a3dbc1a94b7bed9dfd556d4064d9b3ed721a11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a3dbc1a94b7bed9dfd556d4064d9b3ed721a11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a3dbc1a94b7bed9dfd556d4064d9b3ed721a11/comments", "author": null, "committer": null, "parents": [{"sha": "3a19aabc45f40cf20c867d292d9a38ebd29a6f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a19aabc45f40cf20c867d292d9a38ebd29a6f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a19aabc45f40cf20c867d292d9a38ebd29a6f48"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "f2f507d922df30132e9b0d7716cd3aafc8bf0664", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a3dbc1a94b7bed9dfd556d4064d9b3ed721a11/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a3dbc1a94b7bed9dfd556d4064d9b3ed721a11/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=88a3dbc1a94b7bed9dfd556d4064d9b3ed721a11", "patch": "@@ -1,5 +1,5 @@\n /* Build expressions with type checking for C compiler.\n-   Copyright (C) 1987, 1988, 1989, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91, 92, 93, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -6202,12 +6202,36 @@ c_expand_return (retval)\n       tree t = convert_for_assignment (valtype, retval, \"return\",\n \t\t\t\t       NULL_TREE, NULL_TREE, 0);\n       tree res = DECL_RESULT (current_function_decl);\n+      tree inner;\n \n       if (t == error_mark_node)\n \treturn;\n \n-      t = build (MODIFY_EXPR, TREE_TYPE (res),\n-\t\t res, convert (TREE_TYPE (res), t));\n+      inner = t = convert (TREE_TYPE (res), t);\n+\n+      /* Strip any conversions, additions, and subtractions, and see if\n+\t we are returning the address of a local variable.  Warn if so.  */\n+      while (TREE_CODE (inner) == NOP_EXPR\n+\t     || TREE_CODE (inner) == NON_LVALUE_EXPR\n+\t     || TREE_CODE (inner) == CONVERT_EXPR\n+\t     || TREE_CODE (inner) == PLUS_EXPR\n+\t     || TREE_CODE (inner) == MINUS_EXPR)\n+\tinner = TREE_OPERAND (inner, 0);\n+\n+      if (TREE_CODE (inner) == ADDR_EXPR)\n+\t{\n+\t  inner = TREE_OPERAND (inner, 0);\n+\n+\t  while (TREE_CODE_CLASS (TREE_CODE (inner)) == 'r')\n+\t    inner = TREE_OPERAND (inner, 0);\n+\n+\t  if (TREE_CODE (inner) == VAR_DECL\n+\t      && ! TREE_STATIC (inner)\n+\t      && DECL_CONTEXT (inner) == current_function_decl)\n+\t    warning (\"function returns address of local variable\");\n+\t}\n+\n+      t = build (MODIFY_EXPR, TREE_TYPE (res), res, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_return (t);\n       current_function_returns_value = 1;"}]}