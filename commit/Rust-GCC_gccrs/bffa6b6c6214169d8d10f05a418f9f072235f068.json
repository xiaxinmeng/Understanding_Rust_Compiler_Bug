{"sha": "bffa6b6c6214169d8d10f05a418f9f072235f068", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZmYTZiNmM2MjE0MTY5ZDhkMTBmMDVhNDE4ZjlmMDcyMjM1ZjA2OA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "aivchenk@gcc.gnu.org", "date": "2016-12-27T15:35:19Z"}, "committer": {"name": "Alexander Ivchenko", "email": "aivchenk@gcc.gnu.org", "date": "2016-12-27T15:35:19Z"}, "message": "libtool-version: New version.\n\nlibmpx/\n\n2016-12-27  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Alexander Ivchenko  <alexander.ivchenko@intel.com>\n\n\t* mpxwrap/libtool-version: New version.\n\t* mpxwrap/mpx_wrappers.c (__mpx_wrapper_realloc): Make it\n\tstatic with external alias.\n\t(__mpx_wrapper_bzero): Ditto.\n\t(mpx_wrapper_memcpy): Ditto.\n\t(__mpx_wrapper_mempcpy): Ditto.\n\nFrom-SVN: r243942", "tree": {"sha": "e2879c0655bdacaf6b2e1c5755568957d0b3f79d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2879c0655bdacaf6b2e1c5755568957d0b3f79d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bffa6b6c6214169d8d10f05a418f9f072235f068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bffa6b6c6214169d8d10f05a418f9f072235f068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bffa6b6c6214169d8d10f05a418f9f072235f068", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bffa6b6c6214169d8d10f05a418f9f072235f068/comments", "author": null, "committer": null, "parents": [{"sha": "2700d0e3ab767c765246cdc480ff7ad5792eb2e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2700d0e3ab767c765246cdc480ff7ad5792eb2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2700d0e3ab767c765246cdc480ff7ad5792eb2e6"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "fd5ca94eb65770588cb2177e0023f13fbb4d4ad1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffa6b6c6214169d8d10f05a418f9f072235f068/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffa6b6c6214169d8d10f05a418f9f072235f068/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bffa6b6c6214169d8d10f05a418f9f072235f068", "patch": "@@ -3,6 +3,10 @@\n \tPR target/78904\n \t* gcc.target/i386/pr78904-3.c: New test.\n \n+2016-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+        * gcc.target/i386/mpx/memcpy-1.c: New test.\n+\n 2016-12-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \t* gcc.target/i386/mpx/vla-trailing-1-lbv.c: New test."}, {"sha": "169134829aa0d6d372903aa5fb79688340b5fd8f", "filename": "gcc/testsuite/gcc.target/i386/mpx/memcpy-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffa6b6c6214169d8d10f05a418f9f072235f068/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffa6b6c6214169d8d10f05a418f9f072235f068/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemcpy-1.c?ref=bffa6b6c6214169d8d10f05a418f9f072235f068", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"bounds violation\" } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n+\n+/* Fix for PR78631 */\n+\n+#define SHOULDFAIL\n+\n+#include <stdio.h>\n+#include <string.h>\n+\n+char s[10];\n+char d[10];\n+__attribute__((noinline))\n+\n+char* foo(char* dst, char* src, size_t size) {\n+  return memcpy(dst, src, size);\n+}\n+int main() {\n+  char* r = foo(d, s, 11);\n+  printf(\"r = %p\\n\", r);\n+  return 0;\n+}"}, {"sha": "67ae96a352e5e2adf6866a3c5863cc3807384541", "filename": "libmpx/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffa6b6c6214169d8d10f05a418f9f072235f068/libmpx%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffa6b6c6214169d8d10f05a418f9f072235f068/libmpx%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2FChangeLog?ref=bffa6b6c6214169d8d10f05a418f9f072235f068", "patch": "@@ -1,3 +1,13 @@\n+2016-12-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* mpxwrap/libtool-version: New version.\n+\t* mpxwrap/mpx_wrappers.c (__mpx_wrapper_realloc): Make it\n+\tstatic with external alias.\n+\t(__mpx_wrapper_bzero): Ditto.\n+\t(mpx_wrapper_memcpy): Ditto.\n+\t(__mpx_wrapper_mempcpy): Ditto.\n+\n 2016-12-26  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \n \t* mpxrt/libtool-version: New version."}, {"sha": "e241350d23b958b102794edf85abdec36feae2cb", "filename": "libmpx/mpxwrap/libtool-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffa6b6c6214169d8d10f05a418f9f072235f068/libmpx%2Fmpxwrap%2Flibtool-version", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffa6b6c6214169d8d10f05a418f9f072235f068/libmpx%2Fmpxwrap%2Flibtool-version", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2Fmpxwrap%2Flibtool-version?ref=bffa6b6c6214169d8d10f05a418f9f072235f068", "patch": "@@ -3,4 +3,4 @@\n # a separate file so that version updates don't involve re-running\n # automake.\n # CURRENT:REVISION:AGE\n-2:0:0\n+2:1:0"}, {"sha": "aea0346b93352ed3e466bf74b797f4a31f571b8b", "filename": "libmpx/mpxwrap/mpx_wrappers.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bffa6b6c6214169d8d10f05a418f9f072235f068/libmpx%2Fmpxwrap%2Fmpx_wrappers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bffa6b6c6214169d8d10f05a418f9f072235f068/libmpx%2Fmpxwrap%2Fmpx_wrappers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmpx%2Fmpxwrap%2Fmpx_wrappers.c?ref=bffa6b6c6214169d8d10f05a418f9f072235f068", "patch": "@@ -30,14 +30,20 @@\n #include <assert.h>\n #include \"mpxrt/mpxrt.h\"\n \n-void *\n-__mpx_wrapper_malloc (size_t size)\n+/* Since internal MPX wrapper calls must avoid PLT which will clear bound\n+   registers, we make them static with an external alias.  */\n+#define EXTERN_ALIAS(f) \\\n+  __typeof (f) __##f __attribute__((alias(#f)));\n+\n+static void *\n+mpx_wrapper_malloc (size_t size)\n {\n   void *p = (void *)malloc (size);\n   if (!p) return __bnd_null_ptr_bounds (p);\n   return __bnd_set_ptr_bounds (p, size);\n }\n \n+EXTERN_ALIAS (mpx_wrapper_malloc)\n \n void *\n __mpx_wrapper_mmap (void *addr, size_t length, int prot, int flags,\n@@ -52,7 +58,7 @@ void *\n __mpx_wrapper_realloc (void *ptr, size_t n)\n {\n   if (!ptr)\n-    return __mpx_wrapper_malloc (n);\n+    return mpx_wrapper_malloc (n);\n \n   /* We don't kwnow how much data is copied by realloc\n      and therefore may check only lower bounds.  */\n@@ -74,8 +80,8 @@ __mpx_wrapper_calloc (size_t n_elements, size_t element_size)\n   return __bnd_set_ptr_bounds (p, n_elements * element_size);\n }\n \n-void *\n-__mpx_wrapper_memset (void *dstpp, int c, size_t len)\n+static void *\n+mpx_wrapper_memset (void *dstpp, int c, size_t len)\n {\n   if (len > 0)\n     {\n@@ -85,10 +91,12 @@ __mpx_wrapper_memset (void *dstpp, int c, size_t len)\n   return dstpp;\n }\n \n+EXTERN_ALIAS (mpx_wrapper_memset)\n+\n void\n __mpx_wrapper_bzero (void *dst, size_t len)\n {\n-  __mpx_wrapper_memset (dst, 0, len);\n+  mpx_wrapper_memset (dst, 0, len);\n }\n \n /* The mpx_pointer type is used for getting bits\n@@ -484,8 +492,8 @@ move_bounds (void *dst, const void *src, size_t n)\n   return;\n }\n \n-void *\n-__mpx_wrapper_memmove (void *dst, const void *src, size_t n)\n+static void *\n+mpx_wrapper_memmove (void *dst, const void *src, size_t n)\n {\n   if (n == 0)\n     return dst;\n@@ -513,17 +521,20 @@ __mpx_wrapper_memmove (void *dst, const void *src, size_t n)\n   return dst;\n }\n \n+EXTERN_ALIAS (mpx_wrapper_memmove)\n \n-void *\n-__mpx_wrapper_memcpy (void *dst, const void *src, size_t n)\n+static void *\n+mpx_wrapper_memcpy (void *dst, const void *src, size_t n)\n {\n-  return __mpx_wrapper_memmove (dst, src, n);\n+  return mpx_wrapper_memmove (dst, src, n);\n }\n \n+EXTERN_ALIAS (mpx_wrapper_memcpy)\n+\n void *\n __mpx_wrapper_mempcpy (void *dst, const void *src, size_t n)\n {\n-  return (char *)__mpx_wrapper_memcpy (dst, src, n) + n;\n+  return (char *)mpx_wrapper_memcpy (dst, src, n) + n;\n }\n \n char *"}]}