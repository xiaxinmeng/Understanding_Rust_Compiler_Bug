{"sha": "4a314e0c77f06189ef52888d417faa7e5759c116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzMTRlMGM3N2YwNjE4OWVmNTI4ODhkNDE3ZmFhN2U1NzU5YzExNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mitchell@dumbledore.codesourcery.com", "date": "2000-01-11T02:28:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-01-11T02:28:01Z"}, "message": "class.c (dfs_finish_vtbls): New function.\n\n\t* class.c (dfs_finish_vtbls): New function.\n\t(finish_vtbls): Use it.\n\t(dump_class_hierarchy): New function.\n\nFrom-SVN: r31313", "tree": {"sha": "8cf5c36141d9753642b200834f0298460f51cd06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cf5c36141d9753642b200834f0298460f51cd06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a314e0c77f06189ef52888d417faa7e5759c116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a314e0c77f06189ef52888d417faa7e5759c116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a314e0c77f06189ef52888d417faa7e5759c116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a314e0c77f06189ef52888d417faa7e5759c116/comments", "author": null, "committer": null, "parents": [{"sha": "174eceea4095a5c49ddae331f80dc79d072702e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/174eceea4095a5c49ddae331f80dc79d072702e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/174eceea4095a5c49ddae331f80dc79d072702e7"}], "stats": {"total": 92, "additions": 59, "deletions": 33}, "files": [{"sha": "405e80b77152abb5d7452b42a9ad9d9f34572157", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a314e0c77f06189ef52888d417faa7e5759c116/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a314e0c77f06189ef52888d417faa7e5759c116/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4a314e0c77f06189ef52888d417faa7e5759c116", "patch": "@@ -1,5 +1,9 @@\n 2000-01-10  Mark Mitchell  <mitchell@dumbledore.codesourcery.com>\n \n+\t* class.c (dfs_finish_vtbls): New function.\n+\t(finish_vtbls): Use it.\n+\t(dump_class_hierarchy): New function.\n+\t\n \t* cp-tree.h (BINFO_PRIMARY_MARKED_P): Change definition.\n \t(BINFO_VBASE_PRIMARY_P): New macro.\n \t(BINFO_VIRTUALS): Add to documentation."}, {"sha": "fe29af20ba6196f2695ee56d581689e8cdffdc01", "filename": "gcc/cp/class.c", "status": "modified", "additions": 55, "deletions": 33, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a314e0c77f06189ef52888d417faa7e5759c116/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a314e0c77f06189ef52888d417faa7e5759c116/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4a314e0c77f06189ef52888d417faa7e5759c116", "patch": "@@ -84,7 +84,8 @@ static void build_vtable PROTO((tree, tree));\n static void prepare_fresh_vtable PROTO((tree, tree));\n static void fixup_vtable_deltas1 PROTO((tree, tree));\n static void fixup_vtable_deltas PROTO((tree, int, tree));\n-static void finish_vtbls PROTO((tree, int, tree));\n+static tree dfs_finish_vtbls PROTO((tree, void *));\n+static void finish_vtbls PROTO((tree));\n static void modify_vtable_entry PROTO((tree, tree, tree));\n static tree get_vtable_entry_n PROTO((tree, unsigned HOST_WIDE_INT));\n static void add_virtual_function PROTO((tree *, tree *, int *, tree, tree));\n@@ -2228,43 +2229,44 @@ build_vtbl_initializer (binfo)\n   return build_nt (CONSTRUCTOR, NULL_TREE, inits);\n }\n \n-/* finish up all new vtables.  */\n+/* Called from finish_vtbls via dfs_walk.  */\n \n-static void\n-finish_vtbls (binfo, do_self, t)\n+static tree\n+dfs_finish_vtbls (binfo, data)\n      tree binfo;\n-     int do_self;\n-     tree t;\n+     void *data ATTRIBUTE_UNUSED;\n {\n-  tree binfos = BINFO_BASETYPES (binfo);\n-  int i, n_baselinks = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n-\n-  /* Should we use something besides CLASSTYPE_VFIELDS? */\n-  if (do_self && CLASSTYPE_VFIELDS (BINFO_TYPE (binfo)))\n+  if (!BINFO_PRIMARY_MARKED_P (binfo)\n+      && CLASSTYPE_VFIELDS (BINFO_TYPE (binfo))\n+      && BINFO_NEW_VTABLE_MARKED (binfo))\n     {\n-      if (BINFO_NEW_VTABLE_MARKED (binfo))\n-\t{\n-\t  tree decl, context;\n-\n-\t  decl = BINFO_VTABLE (binfo);\n-\t  context = DECL_CONTEXT (decl);\n-\t  DECL_CONTEXT (decl) = 0;\n-\t  DECL_INITIAL (decl) = build_vtbl_initializer (binfo);\n-\t  cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0);\n-\t  DECL_CONTEXT (decl) = context;\n-\t}\n-      CLEAR_BINFO_NEW_VTABLE_MARKED (binfo);\n+      tree decl;\n+      tree context;\n+      \n+      decl = BINFO_VTABLE (binfo);\n+      context = DECL_CONTEXT (decl);\n+      DECL_CONTEXT (decl) = 0;\n+      DECL_INITIAL (decl) = build_vtbl_initializer (binfo);\n+      cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0);\n+      DECL_CONTEXT (decl) = context;\n     }\n \n-  for (i = 0; i < n_baselinks; i++)\n-    {\n-      tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      int is_not_base_vtable\n-\t= i != CLASSTYPE_VFIELD_PARENT (BINFO_TYPE (binfo));\n-      if (TREE_VIA_VIRTUAL (base_binfo))\n-\tbase_binfo = BINFO_FOR_VBASE (BINFO_TYPE (base_binfo), t);\n-      finish_vtbls (base_binfo, is_not_base_vtable, t);\n-    }\n+  CLEAR_BINFO_NEW_VTABLE_MARKED (binfo);\n+  SET_BINFO_MARKED (binfo);\n+\n+  return NULL_TREE;\n+}\n+\n+/* Create all the necessary vtables for T and its base classes.  */\n+\n+static void\n+finish_vtbls (t)\n+     tree t;\n+{\n+  dfs_walk (TYPE_BINFO (t), dfs_finish_vtbls, \n+\t    dfs_unmarked_real_bases_queue_p, t);\n+  dfs_walk (TYPE_BINFO (t), dfs_unmark, \n+\t    dfs_marked_real_bases_queue_p, t);\n }\n \n /* True if we should override the given BASE_FNDECL with the given\n@@ -4793,7 +4795,7 @@ finish_struct_1 (t)\n \n   /* Make the rtl for any new vtables we have created, and unmark\n      the base types we marked.  */\n-  finish_vtbls (TYPE_BINFO (t), 1, t);\n+  finish_vtbls (t);\n   hack_incomplete_structures (t);\n \n   if (warn_overloaded_virtual)\n@@ -6010,3 +6012,23 @@ note_name_declared_in_class (name, decl)\n \t\t   (tree) n->value);\n     }\n }\n+\n+/* Dump the offsets of all the bases rooted at BINFO to stderr.\n+   INDENT should be zero when called from the top level; it is\n+   incremented recursively.  */\n+\n+void\n+dump_class_hierarchy (binfo, indent)\n+     tree binfo;\n+     int indent;\n+{\n+  int i;\n+\n+  fprintf (stderr, \"%*s0x%x (%s) %d\\n\", indent, \"\",\n+\t   (unsigned int) binfo,\n+\t   type_as_string (binfo, TS_PLAIN),\n+\t   TREE_INT_CST_LOW (BINFO_OFFSET (binfo)));\n+\n+  for (i = 0; i < BINFO_N_BASETYPES (binfo); ++i)\n+    dump_class_hierarchy (BINFO_BASETYPE (binfo, i), indent + 2);\n+}"}]}