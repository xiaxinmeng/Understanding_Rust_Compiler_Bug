{"sha": "a87b4257946d4453f250585aa22adc4f70db1165", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3YjQyNTc5NDZkNDQ1M2YyNTA1ODVhYTIyYWRjNGY3MGRiMTE2NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-02-06T10:49:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-02-06T10:49:44Z"}, "message": "pt.c (lookup_template_class): Make sure it's a primary template or template_template_parm when...\n\ncp:\n\t* pt.c (lookup_template_class): Make sure it's a primary\n\ttemplate or template_template_parm when called from the parser.\n\t(instantiate_template_class): Add assertion.\ntestsuite:\n\t* g++.old-deja/g++.pt/spec39.C: New test.\n\nFrom-SVN: r39488", "tree": {"sha": "6a08cb3fd371edfc5ba41f41aca58244a2e031de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a08cb3fd371edfc5ba41f41aca58244a2e031de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a87b4257946d4453f250585aa22adc4f70db1165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87b4257946d4453f250585aa22adc4f70db1165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87b4257946d4453f250585aa22adc4f70db1165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87b4257946d4453f250585aa22adc4f70db1165/comments", "author": null, "committer": null, "parents": [{"sha": "4050de4912df9909d867d887c60378c7a74621f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4050de4912df9909d867d887c60378c7a74621f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4050de4912df9909d867d887c60378c7a74621f9"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "29901cb26fb0a0b779dc047c6975ab9232f3f5da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87b4257946d4453f250585aa22adc4f70db1165/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87b4257946d4453f250585aa22adc4f70db1165/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a87b4257946d4453f250585aa22adc4f70db1165", "patch": "@@ -1,3 +1,9 @@\n+2001-02-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* pt.c (lookup_template_class): Make sure it's a primary\n+\ttemplate or template_template_parm when called from the parser.\n+\t(instantiate_template_class): Add assertion.\n+\n 2001-02-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* method.c (build_mangled_name) [old abi]: Protect flush_repeats()"}, {"sha": "e85ec792d051cb6a0eb2ebaf4d5eebd60a84301f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87b4257946d4453f250585aa22adc4f70db1165/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87b4257946d4453f250585aa22adc4f70db1165/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a87b4257946d4453f250585aa22adc4f70db1165", "patch": "@@ -3893,7 +3893,12 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope, complain)\n       return error_mark_node;\n     }\n \n-  if (TREE_CODE (template) != TEMPLATE_DECL)\n+  if (TREE_CODE (template) != TEMPLATE_DECL\n+         /* If we're called from the parser, make sure it's a user visible\n+            template.  */\n+      || ((!arglist || TREE_CODE (arglist) == TREE_LIST)\n+          && !DECL_TEMPLATE_PARM_P (template)\n+          && !PRIMARY_TEMPLATE_P (template)))\n     {\n       if (complain)\n         {\n@@ -5109,6 +5114,7 @@ instantiate_class_template (type)\n       tree newtag;\n \n       newtag = tsubst (tag, args, /*complain=*/1, NULL_TREE);\n+      my_friendly_assert (newtag != error_mark_node, 20010206);\n       if (TREE_CODE (newtag) != ENUMERAL_TYPE)\n \t{\n \t  if (TYPE_LANG_SPECIFIC (tag) && CLASSTYPE_IS_TEMPLATE (tag))"}, {"sha": "b7b998d9e98adf161f24613ab5cdace1a7f7dd19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87b4257946d4453f250585aa22adc4f70db1165/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87b4257946d4453f250585aa22adc4f70db1165/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a87b4257946d4453f250585aa22adc4f70db1165", "patch": "@@ -1,3 +1,7 @@\n+2001-02-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/spec39.C: New test.\n+\n 2001-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/compile/20010202-1.c: New test."}, {"sha": "9cdf75c3d7776042ec2792f29045cc409e7fd3fc", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec39.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87b4257946d4453f250585aa22adc4f70db1165/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87b4257946d4453f250585aa22adc4f70db1165/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec39.C?ref=a87b4257946d4453f250585aa22adc4f70db1165", "patch": "@@ -0,0 +1,43 @@\n+// Build don't link:\n+// \n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 19 Jan 2001 <nathan@codesourcery.com>\n+\n+// Bug 1656. We failed to make sure that a template-id was built\n+// from a primary template.\n+\n+template <int dim> struct Outer\n+{\n+  struct Inner {};\n+\n+  void f()\n+  {\n+    Inner<dim> i;         // ERROR - non-template\n+    Inner<> j;            // ERROR - non-template\n+  }\n+};\n+struct O {};\n+void foo ()\n+{\n+  Outer<1> x;\n+  x.f ();\n+  Outer<1>::Inner<2> z;   // ERROR - non-template\n+  O<1> w;                 // ERROR - non-template\n+}\n+\n+template <typename T, template <typename C> class TPL>\n+struct X\n+{\n+  TPL<T> t;\n+  T<int> s;     // ERROR - non-template\n+};\n+\n+template <typename T> struct Y\n+{\n+};\n+\n+void bar ()\n+{\n+  X<int, Y> a;\n+  X<int, O> b;  // ERROR - non-template\n+}"}]}