{"sha": "c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmMjhjZDU4ZTEyMzkxZjhlNGU1YzUwOTY4ZWQxYzc2ZGRiZGRiMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-04-24T08:05:07Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-04-24T08:05:07Z"}, "message": "[AArch64] Vectorise bswap[16,32,64]\n\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_builtin_vectorized_function): Handle BUILT_IN_BSWAP16,\n\tBUILT_IN_BSWAP32, BUILT_IN_BSWAP64.\n\t* config/aarch64/aarch64-simd.md (bswap<mode>): New pattern.\n\t* config/aarch64/aarch64-simd-builtins.def: Define vector bswap\n\tbuiltins.\n\t* config/aarch64/iterator.md (VDQHSD): New mode iterator.\n\t(Vrevsuff): New mode attribute.\n\n\t* lib/target-supports.exp (check_effective_target_vect_bswap): New.\n\t* gcc.dg/vect/vect-bswap16: New test.\n\t* gcc.dg/vect/vect-bswap32: Likewise.\n\t* gcc.dg/vect/vect-bswap64: Likewise.\n\nFrom-SVN: r209736", "tree": {"sha": "d75eb1689e288d18f6af7502ba97ab07a3ee2e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d75eb1689e288d18f6af7502ba97ab07a3ee2e05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b041949151f3ba686dc6e8fe0ced121aef9347f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b041949151f3ba686dc6e8fe0ced121aef9347f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b041949151f3ba686dc6e8fe0ced121aef9347f2"}], "stats": {"total": 208, "additions": 207, "deletions": 1}, "files": [{"sha": "6b419f22082dc261a3c48839cba0221c7c48159e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -1,3 +1,14 @@\n+2014-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_builtin_vectorized_function): Handle BUILT_IN_BSWAP16,\n+\tBUILT_IN_BSWAP32, BUILT_IN_BSWAP64.\n+\t* config/aarch64/aarch64-simd.md (bswap<mode>): New pattern.\n+\t* config/aarch64/aarch64-simd-builtins.def: Define vector bswap\n+\tbuiltins.\n+\t* config/aarch64/iterator.md (VDQHSD): New mode iterator.\n+\t(Vrevsuff): New mode attribute.\n+\n 2014-04-24  Terry Guo  <terry.guo@arm.com>\n \n \t* config/arm/arm.h (machine_function): Define variable"}, {"sha": "4616ad24c07fe8212d2090d63ccd9b265bd71bdb", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -1104,7 +1104,29 @@ aarch64_builtin_vectorized_function (tree fndecl, tree type_out, tree type_in)\n \n \t    return aarch64_builtin_decls[builtin];\n \t  }\n-\n+\tcase BUILT_IN_BSWAP16:\n+#undef AARCH64_CHECK_BUILTIN_MODE\n+#define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n+  (out_mode == N##Imode && out_n == C \\\n+   && in_mode == N##Imode && in_n == C)\n+\t  if (AARCH64_CHECK_BUILTIN_MODE (4, H))\n+\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv4hi];\n+\t  else if (AARCH64_CHECK_BUILTIN_MODE (8, H))\n+\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv8hi];\n+\t  else\n+\t    return NULL_TREE;\n+\tcase BUILT_IN_BSWAP32:\n+\t  if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n+\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv2si];\n+\t  else if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n+\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv4si];\n+\t  else\n+\t    return NULL_TREE;\n+\tcase BUILT_IN_BSWAP64:\n+\t  if (AARCH64_CHECK_BUILTIN_MODE (2, D))\n+\t    return aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOPU_bswapv2di];\n+\t  else\n+\t    return NULL_TREE;\n \tdefault:\n \t  return NULL_TREE;\n       }"}, {"sha": "fa332ae5948de56db65039488b397bbd362e6a8b", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -341,6 +341,8 @@\n   VAR1 (UNOP, floatunsv4si, 2, v4sf)\n   VAR1 (UNOP, floatunsv2di, 2, v2df)\n \n+  VAR5 (UNOPU, bswap, 10, v4hi, v8hi, v2si, v4si, v2di)\n+\n   /* Implemented by\n      aarch64_<PERMUTE:perm_insn><PERMUTE:perm_hilo><mode>.  */\n   BUILTIN_VALL (BINOP, zip1, 0)"}, {"sha": "c05767b2045addf0d9be9136cd4f711d537251ce", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -286,6 +286,14 @@\n   [(set_attr \"type\" \"neon_mul_<Vetype><q>\")]\n )\n \n+(define_insn \"bswap<mode>\"\n+  [(set (match_operand:VDQHSD 0 \"register_operand\" \"=w\")\n+        (bswap:VDQHSD (match_operand:VDQHSD 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"rev<Vrevsuff>\\\\t%0.<Vbtype>, %1.<Vbtype>\"\n+  [(set_attr \"type\" \"neon_rev<q>\")]\n+)\n+\n (define_insn \"*aarch64_mul3_elt<mode>\"\n  [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n     (mult:VMUL"}, {"sha": "fd1eb482f0f43280a06e13cd9cb04fd0112fdb1b", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -150,6 +150,9 @@\n ;; Vector modes for H and S types.\n (define_mode_iterator VDQHS [V4HI V8HI V2SI V4SI])\n \n+;; Vector modes for H, S and D types.\n+(define_mode_iterator VDQHSD [V4HI V8HI V2SI V4SI V2DI])\n+\n ;; Vector modes for Q, H and S types.\n (define_mode_iterator VDQQHS [V8QI V16QI V4HI V8HI V2SI V4SI])\n \n@@ -356,6 +359,9 @@\n                          (V2DI \"2d\") (V2SF \"2s\")\n \t\t\t (V4SF \"4s\") (V2DF \"2d\")])\n \n+(define_mode_attr Vrevsuff [(V4HI \"16\") (V8HI \"16\") (V2SI \"32\")\n+                            (V4SI \"32\") (V2DI \"64\")])\n+\n (define_mode_attr Vmtype [(V8QI \".8b\") (V16QI \".16b\")\n \t\t\t (V4HI \".4h\") (V8HI  \".8h\")\n \t\t\t (V2SI \".2s\") (V4SI  \".4s\")"}, {"sha": "40df580a4f1414ed733b9b39994a838cec8304b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -1,3 +1,10 @@\n+2014-04-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_bswap): New.\n+\t* gcc.dg/vect/vect-bswap16: New test.\n+\t* gcc.dg/vect/vect-bswap32: Likewise.\n+\t* gcc.dg/vect/vect-bswap64: Likewise.\n+\n 2014-04-23  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/60902"}, {"sha": "c5627183d23ee65d0b518b51a0b4109fb86fe1b4", "filename": "gcc/testsuite/gcc.dg/vect/vect-bswap16.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap16.c?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-require-effective-target vect_bswap } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+volatile int y = 0;\n+\n+static inline void\n+vfoo16 (unsigned short int* a)\n+{\n+  int i = 0;\n+  for (i = 0; i < N; ++i)\n+    a[i] = __builtin_bswap16 (a[i]);\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned short arr[N];\n+  unsigned short expect[N];\n+  int i;\n+\n+  for (i = 0; i < N; ++i)\n+    {\n+      arr[i] = i;\n+      expect[i] = __builtin_bswap16 (i);\n+      if (y) /* Avoid vectorisation.  */\n+        abort ();\n+    }\n+\n+  vfoo16 (arr);\n+\n+  for (i = 0; i < N; ++i)\n+    {\n+      if (arr[i] != expect[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "9596677617f3093ad65d4ea764c10f288ed62ff6", "filename": "gcc/testsuite/gcc.dg/vect/vect-bswap32.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-require-effective-target vect_bswap } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+volatile int y = 0;\n+\n+static inline void\n+vfoo32 (unsigned int* a)\n+{\n+  int i = 0;\n+  for (i = 0; i < N; ++i)\n+    a[i] = __builtin_bswap32 (a[i]);\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned int arr[N];\n+  unsigned int expect[N];\n+  int i;\n+\n+  for (i = 0; i < N; ++i)\n+    {\n+      arr[i] = i;\n+      expect[i] = __builtin_bswap32 (i);\n+      if (y) /* Avoid vectorisation.  */\n+        abort ();\n+    }\n+\n+  vfoo32 (arr);\n+\n+  for (i = 0; i < N; ++i)\n+    {\n+      if (arr[i] != expect[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "088c8c62a0ab5644a6ea33231fc5ebcbca35e0c7", "filename": "gcc/testsuite/gcc.dg/vect/vect-bswap64.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-require-effective-target vect_bswap } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 128\n+\n+volatile int y = 0;\n+\n+static inline void\n+vfoo64 (unsigned long long* a)\n+{\n+  int i = 0;\n+  for (i = 0; i < N; ++i)\n+    a[i] = __builtin_bswap64 (a[i]);\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned long long arr[N];\n+  unsigned long long expect[N];\n+  int i;\n+\n+  for (i = 0; i < N; ++i)\n+    {\n+      arr[i] = i;\n+      expect[i] = __builtin_bswap64 (i);\n+      if (y) /* Avoid vectorisation.  */\n+        abort ();\n+    }\n+\n+  vfoo64 (arr);\n+\n+  for (i = 0; i < N; ++i)\n+    {\n+      if (arr[i] != expect[i])\n+        abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "badfac3ffcaca8082fd06aedb93a1881ed9a29da", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c7f28cd58e12391f8e4e5c50968ed1c76ddbddb0", "patch": "@@ -3271,6 +3271,24 @@ proc check_effective_target_vect_shift { } {\n     return $et_vect_shift_saved\n }\n \n+# Return 1 if the target supports vector bswap operations.\n+\n+proc check_effective_target_vect_bswap { } {\n+    global et_vect_bswap_saved\n+\n+    if [info exists et_vect_bswap_saved] {\n+\tverbose \"check_effective_target_vect_bswap: using cached result\" 2\n+    } else {\n+\tset et_vect_bswap_saved 0\n+\tif { [istarget aarch64*-*-*] } {\n+\t   set et_vect_bswap_saved 1\n+\t}\n+    }\n+\n+    verbose \"check_effective_target_vect_bswap: returning $et_vect_bswap_saved\" 2\n+    return $et_vect_bswap_saved\n+}\n+\n # Return 1 if the target supports hardware vector shift operation for char.\n \n proc check_effective_target_vect_shift_char { } {"}]}