{"sha": "47efdea45ed80d81aac8c2e74208bc0631467b2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlZmRlYTQ1ZWQ4MGQ4MWFhYzhjMmU3NDIwOGJjMDYzMTQ2N2IyZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-08-08T16:29:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-08-08T16:29:51Z"}, "message": "i386.c (legitimate_pic_address_disp_p): Refuse GOTOFF in 64bit mode.\n\n\t* i386.c (legitimate_pic_address_disp_p): Refuse GOTOFF in 64bit mode.\n\t(legitimate_address_p): Refuse GOT and GOTOFF in 64bit mode.\n\t* i386.md (movdi*): Use pic_32bit_operand.\n\t* predicates.md (pic_32bit_operand): New.\n\nFrom-SVN: r102860", "tree": {"sha": "4be64b5a5be5f789fc52c7980d0846e03dd7c748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4be64b5a5be5f789fc52c7980d0846e03dd7c748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47efdea45ed80d81aac8c2e74208bc0631467b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47efdea45ed80d81aac8c2e74208bc0631467b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47efdea45ed80d81aac8c2e74208bc0631467b2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47efdea45ed80d81aac8c2e74208bc0631467b2f/comments", "author": null, "committer": null, "parents": [{"sha": "063fb392d218bfecd0d60dc790a94cf7208b92aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063fb392d218bfecd0d60dc790a94cf7208b92aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063fb392d218bfecd0d60dc790a94cf7208b92aa"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "fdeef963043b694cb45a95d92699b778c74658d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47efdea45ed80d81aac8c2e74208bc0631467b2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47efdea45ed80d81aac8c2e74208bc0631467b2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47efdea45ed80d81aac8c2e74208bc0631467b2f", "patch": "@@ -1,3 +1,10 @@\n+2005-08-08  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (legitimate_pic_address_disp_p): Refuse GOTOFF in 64bit mode.\n+\t(legitimate_address_p): Refuse GOT and GOTOFF in 64bit mode.\n+\t* i386.md (movdi*): Use pic_32bit_operand.\n+\t* predicates.md (pic_32bit_operand): New.\n+\n 2005-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/21166"}, {"sha": "68589b28da9f0f6a7bd7bde97aaebebc84757fd2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47efdea45ed80d81aac8c2e74208bc0631467b2f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47efdea45ed80d81aac8c2e74208bc0631467b2f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=47efdea45ed80d81aac8c2e74208bc0631467b2f", "patch": "@@ -5542,8 +5542,12 @@ legitimate_pic_address_disp_p (rtx disp)\n \treturn false;\n       return GET_CODE (XVECEXP (disp, 0, 0)) == SYMBOL_REF;\n     case UNSPEC_GOTOFF:\n-      if (GET_CODE (XVECEXP (disp, 0, 0)) == SYMBOL_REF\n-\t  || GET_CODE (XVECEXP (disp, 0, 0)) == LABEL_REF)\n+      /* Refuse GOTOFF in 64bit mode since it is always 64bit when used.\n+\t While ABI specify also 32bit relocation but we don't produce it in\n+\t small PIC model at all.  */\n+      if ((GET_CODE (XVECEXP (disp, 0, 0)) == SYMBOL_REF\n+\t   || GET_CODE (XVECEXP (disp, 0, 0)) == LABEL_REF)\n+\t  && !TARGET_64BIT)\n         return local_symbolic_operand (XVECEXP (disp, 0, 0), Pmode);\n       return false;\n     case UNSPEC_GOTTPOFF:\n@@ -5697,8 +5701,17 @@ legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n \t  && GET_CODE (XEXP (disp, 0)) == UNSPEC)\n \tswitch (XINT (XEXP (disp, 0), 1))\n \t  {\n+\t  /* Refuse GOTOFF and GOT in 64bit mode since it is always 64bit when\n+\t     used.  While ABI specify also 32bit relocations, we don't produce\n+\t     them at all and use IP relative instead.  */\n \t  case UNSPEC_GOT:\n \t  case UNSPEC_GOTOFF:\n+\t    gcc_assert (flag_pic);\n+\t    if (!TARGET_64BIT)\n+\t      goto is_legitimate_pic;\n+\t    reason = \"64bit address unspec\";\n+\t    goto report_error;\n+ \n \t  case UNSPEC_GOTPCREL:\n \t    gcc_assert (flag_pic);\n \t    goto is_legitimate_pic;"}, {"sha": "9e7e92ce8e5516db7f193658017600e9b81b233c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47efdea45ed80d81aac8c2e74208bc0631467b2f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47efdea45ed80d81aac8c2e74208bc0631467b2f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=47efdea45ed80d81aac8c2e74208bc0631467b2f", "patch": "@@ -1200,8 +1200,7 @@\n \t      (const_string \"sselog1\")\n \t    (eq_attr \"alternative\" \"7,8,9,10,11\")\n \t      (const_string \"ssemov\")\n-\t    (and (ne (symbol_ref \"flag_pic\") (const_int 0))\n-\t\t (match_operand:SI 1 \"symbolic_operand\" \"\"))\n+ \t    (match_operand:DI 1 \"pic_32bit_operand\" \"\")\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n@@ -2019,8 +2018,7 @@\n \t      (const_string \"ssecvt\")\n \t    (eq_attr \"alternative\" \"4\")\n \t      (const_string \"multi\")\n- \t    (and (ne (symbol_ref \"flag_pic\") (const_int 0))\n-\t\t (match_operand:DI 1 \"symbolic_operand\" \"\"))\n+ \t    (match_operand:DI 1 \"pic_32bit_operand\" \"\")\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))"}, {"sha": "71dd6880030e9e144caac981efa6a69e3aa42b37", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47efdea45ed80d81aac8c2e74208bc0631467b2f/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47efdea45ed80d81aac8c2e74208bc0631467b2f/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=47efdea45ed80d81aac8c2e74208bc0631467b2f", "patch": "@@ -318,6 +318,28 @@\n \t      (match_operand 0 \"x86_64_zext_immediate_operand\")))\n     (match_operand 0 \"nonmemory_operand\")))\n \n+;; Return true when operand is PIC expression that can be computed by lea\n+;; operation.\n+(define_predicate \"pic_32bit_operand\"\n+  (match_code \"const,symbol_ref,label_ref\")\n+{\n+  if (!flag_pic)\n+    return 0;\n+  /* Rule out relocations that translate into 64bit constants.  */\n+  if (TARGET_64BIT && GET_CODE (op) == CONST)\n+    {\n+      op = XEXP (op, 0);\n+      if (GET_CODE (op) == PLUS && GET_CODE (XEXP (op, 1)) == CONST_INT)\n+\top = XEXP (op, 0);\n+      if (GET_CODE (op) == UNSPEC\n+\t  && (XINT (op, 1) == UNSPEC_GOTOFF\n+\t      || XINT (op, 1) == UNSPEC_GOT))\n+\treturn 0;\n+    }\n+  return symbolic_operand (op, mode);\n+})\n+\n+\n ;; Return nonzero if OP is nonmemory operand acceptable by movabs patterns.\n (define_predicate \"x86_64_movabs_operand\"\n   (if_then_else (match_test \"!TARGET_64BIT || !flag_pic\")"}]}