{"sha": "7d9cf8015969054f044ee815f0308e7130c59b83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5Y2Y4MDE1OTY5MDU0ZjA0NGVlODE1ZjAzMDhlNzEzMGM1OWI4Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-20T13:48:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-20T13:48:40Z"}, "message": "re PR middle-end/77624 (ICE on x86_64-linux-gnu (internal compiler error: in fold_builtin_atomic_always_lock_free, at builtins.c:5583))\n\n\tPR middle-end/77624\n\t* builtins.c (fold_builtin_atomic_always_lock_free): Only look through\n\tcast to void * if the cast is from some other pointer type.\n\n\t* c-c++-common/pr77624-1.c: New test.\n\t* c-c++-common/pr77624-2.c: New test.\n\nFrom-SVN: r240263", "tree": {"sha": "0317661a91abecaca87f11977e90131e5694f151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0317661a91abecaca87f11977e90131e5694f151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9cf8015969054f044ee815f0308e7130c59b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9cf8015969054f044ee815f0308e7130c59b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9cf8015969054f044ee815f0308e7130c59b83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9cf8015969054f044ee815f0308e7130c59b83/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3aebb6ff7588a68535cbc3c865bb316d29932c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aebb6ff7588a68535cbc3c865bb316d29932c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aebb6ff7588a68535cbc3c865bb316d29932c7f"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "fbc0724fc2be318274d2bb7740c25bffe6945a3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d9cf8015969054f044ee815f0308e7130c59b83", "patch": "@@ -1,3 +1,9 @@\n+2016-09-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/77624\n+\t* builtins.c (fold_builtin_atomic_always_lock_free): Only look through\n+\tcast to void * if the cast is from some other pointer type.\n+\n 2016-09-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77646"}, {"sha": "9a19a75cc8ed6edb5f543cd7bd26bcc0693e6ebb", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7d9cf8015969054f044ee815f0308e7130c59b83", "patch": "@@ -5575,8 +5575,10 @@ fold_builtin_atomic_always_lock_free (tree arg0, tree arg1)\n \t end before anything else has a chance to look at it.  The pointer\n \t parameter at this point is usually cast to a void *, so check for that\n \t and look past the cast.  */\n-      if (CONVERT_EXPR_P (arg1) && POINTER_TYPE_P (ttype)\n-\t  && VOID_TYPE_P (TREE_TYPE (ttype)))\n+      if (CONVERT_EXPR_P (arg1)\n+\t  && POINTER_TYPE_P (ttype)\n+\t  && VOID_TYPE_P (TREE_TYPE (ttype))\n+\t  && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (arg1, 0))))\n \targ1 = TREE_OPERAND (arg1, 0);\n \n       ttype = TREE_TYPE (arg1);"}, {"sha": "d434027b52b18ba04cf0842e6cd4147053b27d27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d9cf8015969054f044ee815f0308e7130c59b83", "patch": "@@ -1,3 +1,9 @@\n+2016-09-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/77624\n+\t* c-c++-common/pr77624-1.c: New test.\n+\t* c-c++-common/pr77624-2.c: New test.\n+\n 2016-09-20  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \t* gfortran.dg/coarray_allocate_7.f08: Using + instead of fixed number"}, {"sha": "f3c095649aa5ffd97cbba215de6cec2bb9cc091c", "filename": "gcc/testsuite/c-c++-common/pr77624-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-1.c?ref=7d9cf8015969054f044ee815f0308e7130c59b83", "patch": "@@ -0,0 +1,14 @@\n+/* PR middle-end/77624 */\n+/* { dg-do compile } */\n+\n+int\n+foo (int a)\n+{\n+  return __atomic_is_lock_free (2, a);\t\t/* { dg-warning \"pointer from integer\" \"\" { target c } } */\n+}\t\t\t\t\t\t/* { dg-error \"invalid conversion\" \"\" { target c++ } 7 } */\n+\n+int\n+bar (int a)\n+{\n+  return __atomic_always_lock_free (2, a);\t/* { dg-warning \"pointer from integer\" \"\" { target c } } */\n+}\t\t\t\t\t\t/* { dg-error \"invalid conversion\" \"\" { target c++ } 13 } */"}, {"sha": "64d20e0eb6ac1934c633bf922d7ae8f0d01694c0", "filename": "gcc/testsuite/c-c++-common/pr77624-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9cf8015969054f044ee815f0308e7130c59b83/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr77624-2.c?ref=7d9cf8015969054f044ee815f0308e7130c59b83", "patch": "@@ -0,0 +1,26 @@\n+/* PR middle-end/77624 */\n+/* { dg-do compile } */\n+\n+void\n+foo (int *a)\n+{\n+  double b = 0;\n+  __atomic_is_lock_free (2, a, 2);\t/* { dg-error \"too many arguments\" } */\n+  __atomic_is_lock_free (2);\t\t/* { dg-error \"too few arguments\" } */\n+  __atomic_is_lock_free (2, b);\t\t/* { dg-error \"incompatible type\" \"\" { target c } } */\n+\t\t\t\t\t/* { dg-message \"expected\" \"\" { target c } 10 } */\n+\t\t\t\t\t/* { dg-error \"convert\" \"\" { target c++ } 10 } */\n+  __atomic_is_lock_free (2, 0);\n+}\n+\n+void\n+bar (int *a)\n+{\n+  double b = 0;\n+  __atomic_always_lock_free (2, a, 2);\t/* { dg-error \"too many arguments\" } */\n+  __atomic_always_lock_free (2);\t/* { dg-error \"too few arguments\" } */\n+  __atomic_always_lock_free (2, b);\t/* { dg-error \"incompatible type\" \"\" { target c } } */\n+\t\t\t\t\t/* { dg-message \"expected\" \"\" { target c } 22 } */\n+\t\t\t\t\t/* { dg-error \"convert\" \"\" { target c++ } 22 } */\n+  __atomic_always_lock_free (2, 0);\n+}"}]}