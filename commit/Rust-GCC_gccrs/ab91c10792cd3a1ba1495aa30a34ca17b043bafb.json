{"sha": "ab91c10792cd3a1ba1495aa30a34ca17b043bafb", "node_id": "C_kwDOANBUbNoAKGFiOTFjMTA3OTJjZDNhMWJhMTQ5NWFhMzBhMzRjYTE3YjA0M2JhZmI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-01T09:30:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-25T07:25:33Z"}, "message": "tree-optimization/100810 - avoid undefs in IVOPT rewrites\n\nThe following attempts to avoid IVOPTs rewriting uses using\nIV candidates that involve undefined behavior by using uninitialized\nSSA names.  First we restrict the set of candidates we produce\nfor such IVs to the original ones and mark them as not important.\nSecond we try to only allow expressing uses with such IV if they\noriginally use them.  That is to avoid rewriting all such uses\nin terms of other IVs.  Since cand->iv and use->iv seem to never\nexactly match up we resort to comparing the IV bases.\n\nThe approach ends up similar to the one posted by Roger at\nhttps://gcc.gnu.org/pipermail/gcc-patches/2021-August/578441.html\nbut it marks IV candidates rather than use groups and the cases\nwe allow in determine_group_iv_cost_generic are slightly different.\n\n2022-01-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/100810\n\t* tree-ssa-loop-ivopts.cc (struct iv_cand): Add involves_undefs flag.\n\t(find_ssa_undef): New function.\n\t(add_candidate_1): Avoid adding derived candidates with\n\tundefined SSA names and mark the original ones.\n\t(determine_group_iv_cost_generic): Reject rewriting\n\tuses with a different IV when that involves undefined SSA names.\n\n\t* gcc.dg/torture/pr100810.c: New testcase.\n\t* gcc.dg/torture/pr105337.c: Likewise.", "tree": {"sha": "20282594335b34cce5bcc453665bd344695bbd39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20282594335b34cce5bcc453665bd344695bbd39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab91c10792cd3a1ba1495aa30a34ca17b043bafb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab91c10792cd3a1ba1495aa30a34ca17b043bafb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab91c10792cd3a1ba1495aa30a34ca17b043bafb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab91c10792cd3a1ba1495aa30a34ca17b043bafb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6e22db8564827c82108e0b7fa1a84675379c12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e22db8564827c82108e0b7fa1a84675379c12b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e22db8564827c82108e0b7fa1a84675379c12b"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "63566f530f7300d7dd7c2ca49968d2673674bf87", "filename": "gcc/testsuite/gcc.dg/torture/pr100810.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab91c10792cd3a1ba1495aa30a34ca17b043bafb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100810.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab91c10792cd3a1ba1495aa30a34ca17b043bafb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100810.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr100810.c?ref=ab91c10792cd3a1ba1495aa30a34ca17b043bafb", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+\n+int a, b = 1, c = 1, e, f = 1, g, h, j;\n+volatile int d;\n+static void k()\n+{\n+  int i;\n+  h = b;\n+  if (c && a >= 0) {\n+      while (a) {\n+\t  i++;\n+\t  h--;\n+      }\n+      if (g)\n+\tfor (h = 0; h < 2; h++)\n+\t  ;\n+      if (!b)\n+\ti &&d;\n+  }\n+}\n+static void l()\n+{\n+  for (; j < 1; j++)\n+    if (!e && c && f)\n+      k();\n+}\n+int main()\n+{\n+  if (f)\n+    l();\n+  if (h != 1)\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "4a0bdf0363c6e2db3f68750824c4bb9aa254a91b", "filename": "gcc/testsuite/gcc.dg/torture/pr105337.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab91c10792cd3a1ba1495aa30a34ca17b043bafb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105337.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab91c10792cd3a1ba1495aa30a34ca17b043bafb/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105337.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105337.c?ref=ab91c10792cd3a1ba1495aa30a34ca17b043bafb", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+__attribute__((noipa)) void\n+bar (int x)\n+{\n+  (void) x;\n+}\n+\n+int a;\n+\n+int\n+foo (void)\n+{\n+  int b, c;\n+  for (b = 0; b < 3; b++)\n+    {\n+      if (!a)\n+\tbreak;\n+      c--;\n+      bar (c);\n+    }\n+  return b;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo ())\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "81b536f930415e478b63952f53398a10b24ec46b", "filename": "gcc/tree-ssa-loop-ivopts.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab91c10792cd3a1ba1495aa30a34ca17b043bafb/gcc%2Ftree-ssa-loop-ivopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab91c10792cd3a1ba1495aa30a34ca17b043bafb/gcc%2Ftree-ssa-loop-ivopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.cc?ref=ab91c10792cd3a1ba1495aa30a34ca17b043bafb", "patch": "@@ -452,6 +452,7 @@ struct iv_cand\n   unsigned id;\t\t/* The number of the candidate.  */\n   bool important;\t/* Whether this is an \"important\" candidate, i.e. such\n \t\t\t   that it should be considered by all uses.  */\n+  bool involves_undefs; /* Whether the IV involves undefined values.  */\n   ENUM_BITFIELD(iv_position) pos : 8;\t/* Where it is computed.  */\n   gimple *incremented_at;/* For original biv, the statement where it is\n \t\t\t   incremented.  */\n@@ -3070,6 +3071,19 @@ get_loop_invariant_expr (struct ivopts_data *data, tree inv_expr)\n   return *slot;\n }\n \n+/* Find the first undefined SSA name in *TP.  */\n+\n+static tree\n+find_ssa_undef (tree *tp, int *walk_subtrees, void *)\n+{\n+  if (TREE_CODE (*tp) == SSA_NAME\n+      && ssa_undefined_value_p (*tp, false))\n+    return *tp;\n+  if (!EXPR_P (*tp))\n+    *walk_subtrees = 0;\n+  return NULL;\n+}\n+\n /* Adds a candidate BASE + STEP * i.  Important field is set to IMPORTANT and\n    position to POS.  If USE is not NULL, the candidate is set as related to\n    it.  If both BASE and STEP are NULL, we add a pseudocandidate for the\n@@ -3097,6 +3111,17 @@ add_candidate_1 (struct ivopts_data *data, tree base, tree step, bool important,\n   if (flag_keep_gc_roots_live && POINTER_TYPE_P (TREE_TYPE (base)))\n     return NULL;\n \n+  /* If BASE contains undefined SSA names make sure we only record\n+     the original IV.  */\n+  bool involves_undefs = false;\n+  if (walk_tree (&base, find_ssa_undef, NULL, NULL))\n+    {\n+      if (pos != IP_ORIGINAL)\n+\treturn NULL;\n+      important = false;\n+      involves_undefs = true;\n+    }\n+\n   /* For non-original variables, make sure their values are computed in a type\n      that does not invoke undefined behavior on overflows (since in general,\n      we cannot prove that these induction variables are non-wrapping).  */\n@@ -3145,6 +3170,7 @@ add_candidate_1 (struct ivopts_data *data, tree base, tree step, bool important,\n \t  cand->var_after = cand->var_before;\n \t}\n       cand->important = important;\n+      cand->involves_undefs = involves_undefs;\n       cand->incremented_at = incremented_at;\n       cand->doloop_p = doloop;\n       data->vcands.safe_push (cand);\n@@ -4958,6 +4984,11 @@ determine_group_iv_cost_generic (struct ivopts_data *data,\n      the candidate.  */\n   if (cand->pos == IP_ORIGINAL && cand->incremented_at == use->stmt)\n     cost = no_cost;\n+  /* If the IV candidate involves undefined SSA values and is not the\n+     same IV as on the USE avoid using that candidate here.  */\n+  else if (cand->involves_undefs\n+\t   && (!use->iv || !operand_equal_p (cand->iv->base, use->iv->base, 0)))\n+    return false;\n   else\n     cost = get_computation_cost (data, use, cand, false,\n \t\t\t\t &inv_vars, NULL, &inv_expr);"}]}