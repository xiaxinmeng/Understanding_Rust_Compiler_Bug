{"sha": "91c6dda6c7acfeb8d9896557da02316109b0d05c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFjNmRkYTZjN2FjZmViOGQ5ODk2NTU3ZGEwMjMxNjEwOWIwZDA1Yw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-12-09T00:17:07Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-12-09T00:17:07Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (java/lang/reflect/Method.h): ObjectInputStream now\n\ta friend.\n\t* java/lang/natClass.cc (getSignature): Only look at elements of\n\tnon-null parameters.\n\t(getPrivateMethod): Removed old FIXME comment.\n\t* java/io/natObjectInputStream.cc (allocateObject): Removed old\n\tFIXME comment.\n\t(callConstructor): Simply use `NULL' for value of parameters.\n\t(ObjectClass): Removed.\n\t(ClassClass): Likewise.\n\t* java/io/ObjectInputStream.java (readObject): Fixed typo.\n\nFrom-SVN: r47800", "tree": {"sha": "95fd70232045f8c0dde73b4269fe6f1381eb3062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95fd70232045f8c0dde73b4269fe6f1381eb3062"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91c6dda6c7acfeb8d9896557da02316109b0d05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c6dda6c7acfeb8d9896557da02316109b0d05c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91c6dda6c7acfeb8d9896557da02316109b0d05c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c6dda6c7acfeb8d9896557da02316109b0d05c/comments", "author": null, "committer": null, "parents": [{"sha": "3297bb4667ebba9490c4e692fb8ce64b1a0bcef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3297bb4667ebba9490c4e692fb8ce64b1a0bcef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3297bb4667ebba9490c4e692fb8ce64b1a0bcef3"}], "stats": {"total": 105, "additions": 69, "deletions": 36}, "files": [{"sha": "379973c3c9df5a8892ea9f5b48f3736babb42c65", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=91c6dda6c7acfeb8d9896557da02316109b0d05c", "patch": "@@ -1,5 +1,18 @@\n 2001-12-08  Tom Tromey  <tromey@redhat.com>\n \n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (java/lang/reflect/Method.h): ObjectInputStream now\n+\ta friend.\n+\t* java/lang/natClass.cc (getSignature): Only look at elements of\n+\tnon-null parameters.\n+\t(getPrivateMethod): Removed old FIXME comment.\n+\t* java/io/natObjectInputStream.cc (allocateObject): Removed old\n+\tFIXME comment.\n+\t(callConstructor): Simply use `NULL' for value of parameters.\n+\t(ObjectClass): Removed.\n+\t(ClassClass): Likewise.\n+\t* java/io/ObjectInputStream.java (readObject): Fixed typo.\n+\n \t* verify.cc (_Jv_BytecodeVerifier::is_assignable_from_slow):\n \tHandle case of array whose component type is not prepared.\n "}, {"sha": "bf5e28fb5b2ecce44210f40a0e22997a609826e7", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=91c6dda6c7acfeb8d9896557da02316109b0d05c", "patch": "@@ -313,6 +313,7 @@ java/lang/reflect/Method.h: java/lang/reflect/Method.class\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \\\n \t    -friend 'class java::lang::Class;' \\\n+\t    -friend 'class java::io::ObjectInputStream;' \\\n \t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n "}, {"sha": "50ccb88c90557f4e69fd6e34888f3fc81aceea6c", "filename": "libjava/Makefile.in", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=91c6dda6c7acfeb8d9896557da02316109b0d05c", "patch": "@@ -123,28 +123,40 @@ libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n \n AUTOMAKE_OPTIONS = foreign\n-@TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n-@TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n-@USE_LIBDIR_TRUE@toolexeclibdir = @USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexeclibdir = @USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@toolexecdir = @USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n-@XLIB_AWT_TRUE@cond_x_ltlibrary = @XLIB_AWT_TRUE@libgcjx.la\n-@XLIB_AWT_FALSE@cond_x_ltlibrary = \n+@TESTSUBDIR_TRUE@SUBDIRS = \\\n+@TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n+@TESTSUBDIR_FALSE@SUBDIRS = \\\n+@TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n+@USE_LIBDIR_TRUE@toolexeclibdir = \\\n+@USE_LIBDIR_TRUE@$(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = \\\n+@USE_LIBDIR_FALSE@$(toolexecdir)/lib$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexecdir = \\\n+@USE_LIBDIR_FALSE@$(exec_prefix)/$(target_alias)\n+@XLIB_AWT_TRUE@cond_x_ltlibrary = \\\n+@XLIB_AWT_TRUE@libgcjx.la\n+@XLIB_AWT_FALSE@cond_x_ltlibrary = \\\n \n toolexeclib_LTLIBRARIES = libgcj.la $(cond_x_ltlibrary)\n toolexeclib_DATA = libgcj.spec\n data_DATA = libgcj.jar\n \n secdir = $(libdir)/security\n \n-@NATIVE_TRUE@bin_PROGRAMS = @NATIVE_TRUE@jv-convert gij rmic rmiregistry\n+@NATIVE_TRUE@bin_PROGRAMS = \\\n+@NATIVE_TRUE@jv-convert gij rmic rmiregistry\n \n bin_SCRIPTS = addr2name.awk\n-@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = @CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n-@CANADIAN_FALSE@ZIP = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n-@CANADIAN_TRUE@GCJH = @CANADIAN_TRUE@gcjh\n-@CANADIAN_FALSE@GCJH = @CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_TRUE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@ZIP = \\\n+@CANADIAN_TRUE@@NULL_TARGET_FALSE@jar\n+@CANADIAN_FALSE@ZIP = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/fastjar/jar$(EXEEXT)\n+@CANADIAN_TRUE@GCJH = \\\n+@CANADIAN_TRUE@gcjh\n+@CANADIAN_FALSE@GCJH = \\\n+@CANADIAN_FALSE@$(MULTIBUILDTOP)../$(COMPPATH)/gcc/gcjh$(EXEEXT)\n \n GCJ_WITH_FLAGS = $(GCJ) --encoding=UTF-8\n \n@@ -164,8 +176,10 @@ AM_CXXFLAGS = -fno-rtti -fnon-call-exceptions \\\n \t@LIBGCJ_CXXFLAGS@ @X_CFLAGS@ $(WARNINGS) -D_GNU_SOURCE \\\n \t-DPREFIX=\"\\\"$(prefix)\\\"\"\n \n-@USING_GCC_TRUE@AM_CFLAGS = @USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n-@USING_GCC_FALSE@AM_CFLAGS = @USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n+@USING_GCC_TRUE@AM_CFLAGS = \\\n+@USING_GCC_TRUE@@LIBGCJ_CFLAGS@ $(WARNINGS)\n+@USING_GCC_FALSE@AM_CFLAGS = \\\n+@USING_GCC_FALSE@@LIBGCJ_CFLAGS@\n \n JCFLAGS = -g\n JC1FLAGS = @LIBGCJ_JAVAFLAGS@ $(GCJFLAGS)\n@@ -238,7 +252,8 @@ extra_headers = java/lang/Object.h java/lang/Class.h\n \n NM = nm\n \n-@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = @NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@noinst_PROGRAMS = \\\n+@NATIVE_TRUE@@MAINTAINER_MODE_TRUE@gen-from-JIS\n \n CONVERT_DIR = gnu/gcj/convert\n \n@@ -1567,7 +1582,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -2715,7 +2730,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\\n@@ -3003,6 +3018,7 @@ java/lang/reflect/Method.h: java/lang/reflect/Method.class\n \t$(GCJH) -classpath $(top_builddir) \\\n \t    -friend 'jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);' \\\n \t    -friend 'class java::lang::Class;' \\\n+\t    -friend 'class java::io::ObjectInputStream;' \\\n \t    -friend 'jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);' \\\n \t    $(basename $<)\n "}, {"sha": "7a67f3fb9a8a7eb7fe8ebfbe83f9a5ed1e8852b6", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=91c6dda6c7acfeb8d9896557da02316109b0d05c", "patch": "@@ -1,5 +1,5 @@\n /* ObjectInputStream.java -- Class used to read serialized objects\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -225,13 +225,13 @@ public final Object readObject () throws ClassNotFoundException, IOException\n       {\n \tdumpElementln (\"ARRAY\");\n \tObjectStreamClass osc = (ObjectStreamClass)readObject ();\n-\tClass componenetType = osc.forClass ().getComponentType ();\n+\tClass componentType = osc.forClass ().getComponentType ();\n \tdumpElement (\"ARRAY LENGTH=\");\n \tint length = this.realInputStream.readInt ();\n-\tdumpElementln (length + \"; COMPONENT TYPE=\" + componenetType);\n-\tObject array = Array.newInstance (componenetType, length);\n+\tdumpElementln (length + \"; COMPONENT TYPE=\" + componentType);\n+\tObject array = Array.newInstance (componentType, length);\n \tint handle = assignNewHandle (array);\n-\treadArrayElements (array, componenetType);\n+\treadArrayElements (array, componentType);\n \tfor (int i=0, len=Array.getLength(array); i < len; i++)\n \t  dumpElementln (\"  ELEMENT[\" + i + \"]=\" + Array.get(array, i).toString());\n \tret_val = processResolution (array, handle);\n@@ -1295,7 +1295,7 @@ private void setBlockDataMode (boolean on)\n \n \n   // returns a new instance of REAL_CLASS that has been constructed\n-  // only to th level of CONSTRUCTOR_CLASS (a super class of REAL_CLASS)\n+  // only to the level of CONSTRUCTOR_CLASS (a super class of REAL_CLASS)\n   private Object newObject (Class real_class, Class constructor_class)\n   {\n     try"}, {"sha": "8240144827f3bddede097d7756124b653d4a8be9", "filename": "libjava/java/io/natObjectInputStream.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2Fjava%2Fio%2FnatObjectInputStream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2Fjava%2Fio%2FnatObjectInputStream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatObjectInputStream.cc?ref=91c6dda6c7acfeb8d9896557da02316109b0d05c", "patch": "@@ -1,6 +1,6 @@\n // natObjectInputStream.cc - Native part of ObjectInputStream class.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation\n \n    This ObjectInputStream is part of libgcj.\n \n@@ -38,7 +38,6 @@ java::io::ObjectInputStream::allocateObject (jclass klass)\n \tobj = NULL;\t\n       else\n \t{\n-\t  // FIXME: will this work for String?\n \t  obj = JvAllocObject (klass);\n \t}\n     }\n@@ -51,19 +50,24 @@ java::io::ObjectInputStream::allocateObject (jclass klass)\n }\n \n \n-#define ObjectClass java::lang::Object::class$\n-#define ClassClass java::lang::Class::class$\n-\n void \n java::io::ObjectInputStream::callConstructor (jclass klass, jobject obj)\n { \n   jstring init_name = JvNewStringLatin1 (\"<init>\");\n+  // This is a bit inefficient, and a bit of a hack, since we don't\n+  // actually use the Method and since what is returned isn't\n+  // technically a Method.  We can't use Method.invoke as it looks up\n+  // the declared method.\n   JArray<jclass> *arg_types\n-    = (JArray<jclass> *) JvNewObjectArray (0, &ClassClass, NULL);\n-  JArray<jobject> *args\n-    = (JArray<jobject> *) JvNewObjectArray (0, &ObjectClass, NULL);\n-  java::lang::reflect::Method *m = klass->getPrivateMethod (init_name, arg_types);\n-  m->invoke (obj, args);\n+    = (JArray<jclass> *) JvNewObjectArray (0, &java::lang::Class::class$,\n+\t\t\t\t\t   NULL);\n+  java::lang::reflect::Method *m = klass->getPrivateMethod (init_name,\n+\t\t\t\t\t\t\t    arg_types);\n+  // We lie about this being a constructor.  If we put `true' here\n+  // then _Jv_CallAnyMethodA would try to allocate the object for us.\n+  jmethodID meth = (jmethodID) ((char *) (klass->methods)\n+\t\t\t\t+ m->offset);\n+  _Jv_CallAnyMethodA (obj, JvPrimClass (void), meth, false, arg_types, NULL);\n }\n   \n java::lang::reflect::Field *"}, {"sha": "54289b34102a00a7df53576a5b4415747ea367d5", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c6dda6c7acfeb8d9896557da02316109b0d05c/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=91c6dda6c7acfeb8d9896557da02316109b0d05c", "patch": "@@ -286,10 +286,10 @@ java::lang::Class::getSignature (JArray<jclass> *param_types,\n {\n   java::lang::StringBuffer *buf = new java::lang::StringBuffer ();\n   buf->append((jchar) '(');\n-  jclass *v = elements (param_types);\n   // A NULL param_types means \"no parameters\".\n   if (param_types != NULL)\n     {\n+      jclass *v = elements (param_types);\n       for (int i = 0; i < param_types->length; ++i)\n \tv[i]->getSignature(buf);\n     }\n@@ -1399,7 +1399,6 @@ java::lang::Class::getPrivateMethod (jstring name, JArray<jclass> *param_types)\n       int i = klass->isPrimitive () ? 0 : klass->method_count;\n       while (--i >= 0)\n \t{\n-\t  // FIXME: access checks.\n \t  if (_Jv_equalUtf8Consts (klass->methods[i].name, utf_name)\n \t      && _Jv_equaln (klass->methods[i].signature, partial_sig, p_len))\n \t    {"}]}