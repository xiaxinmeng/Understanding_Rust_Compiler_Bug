{"sha": "a5573239ecfabfa338f4c73f0d259ace76004a9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU1NzMyMzllY2ZhYmZhMzM4ZjRjNzNmMGQyNTlhY2U3NjAwNGE5ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-12-23T14:30:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-12-23T14:30:36Z"}, "message": "toplev.c (dump_memory_report): Break out from...\n\n\t* toplev.c (dump_memory_report): Break out from...\n\t(finalize): Here.\n\t* toplev.h (dump_memory_report): Declare.\n\t(cmp_statistic): Rename to ...\n\t(final_cmp_statistic): ... this one\n\t(cmp_statistic): New.\n\t(dump_ggc_loc_staitsitcs): New FINAL parpameter.\n\t* common.opt (-fpre-ipa-mem-report, -fpost-ipa-mem-report): Declare.\n\t* varray.c (dump_varray_staitiscs): Do not segfault when no varray was\n\tallocated so far.\n\nFrom-SVN: r120168", "tree": {"sha": "7448acc1c5f3340010e52d07355ec0e394271f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7448acc1c5f3340010e52d07355ec0e394271f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5573239ecfabfa338f4c73f0d259ace76004a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5573239ecfabfa338f4c73f0d259ace76004a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5573239ecfabfa338f4c73f0d259ace76004a9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5573239ecfabfa338f4c73f0d259ace76004a9e/comments", "author": null, "committer": null, "parents": [{"sha": "5b42ae41cbef45d89d615b566d5eef2469496240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b42ae41cbef45d89d615b566d5eef2469496240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b42ae41cbef45d89d615b566d5eef2469496240"}], "stats": {"total": 118, "additions": 93, "deletions": 25}, "files": [{"sha": "6f49f862c32aa46126a2914ef6d175cdceecbcbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -1,3 +1,17 @@\n+2006-12-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* toplev.c (dump_memory_report): Break out from...\n+\t(finalize): Here.\n+\t* toplev.h (dump_memory_report): Declare.\n+\t(cmp_statistic): Rename to ...\n+\t(final_cmp_statistic): ... this one\n+\t(cmp_statistic): New.\n+\t(dump_ggc_loc_staitsitcs): New FINAL parpameter.\n+\t* common.opt (-fpre-ipa-mem-report, -fpost-ipa-mem-report): Declare.\n+\t* varray.c (dump_varray_staitiscs): Do not segfault when no varray was\n+\tallocated so far.\n+        * cgraphunit.c (cgraph_optimize): Dump the memory reports.\n+\n 2006-12-22  Mike Stump  <mrs@apple.com>\n \n \t* config/rs6000/t-darwin (DARWIN_EXTRA_CRT_BUILD_CFLAGS): Add"}, {"sha": "cb2f824fb70784e158b61dccb6e24b6135708d23", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -1394,6 +1394,11 @@ cgraph_optimize (void)\n   varpool_analyze_pending_decls ();\n \n   timevar_push (TV_CGRAPHOPT);\n+  if (pre_ipa_mem_report)\n+    {\n+      fprintf (stderr, \"Memory consumption before IPA\\n\");\n+      dump_memory_report (false);\n+    }\n   if (!quiet_flag)\n     fprintf (stderr, \"Performing interprocedural optimizations\\n\");\n \n@@ -1419,6 +1424,11 @@ cgraph_optimize (void)\n       dump_cgraph (cgraph_dump_file);\n       dump_varpool (cgraph_dump_file);\n     }\n+  if (post_ipa_mem_report)\n+    {\n+      fprintf (stderr, \"Memory consumption before IPA\\n\");\n+      dump_memory_report (false);\n+    }\n   timevar_pop (TV_CGRAPHOPT);\n \n   /* Output everything.  */"}, {"sha": "7ad2f1dbacbad6b8c9cde64cff75b107eafdfa74", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -644,6 +644,14 @@ foptimize-sibling-calls\n Common Report Var(flag_optimize_sibling_calls)\n Optimize sibling and tail recursive calls\n \n+fpre-ipa-mem-report\n+Common Report Var(pre_ipa_mem_report)\n+Report on memory allocation before interprocedural optimization\n+\n+fpost-ipa-mem-report\n+Common Report Var(post_ipa_mem_report)\n+Report on memory allocation before interprocedural optimization\n+\n fpack-struct\n Common Report Var(flag_pack_struct)\n Pack structure members together without holes"}, {"sha": "63f22f2fbb6fadfd8be85fc3bd1b84da6523e97a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -290,7 +290,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdump-tree-storeccp@r{[}-@var{n}@r{]} @gol\n -feliminate-dwarf2-dups -feliminate-unused-debug-types @gol\n -feliminate-unused-debug-symbols -femit-class-debug-always @gol\n--fmem-report -fprofile-arcs @gol\n+-fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs @gol\n -frandom-seed=@var{string} -fsched-verbose=@var{n} @gol\n -ftest-coverage  -ftime-report -fvar-tracking @gol\n -g  -g@var{level}  -gcoff -gdwarf-2 @gol\n@@ -3728,6 +3728,13 @@ pass when it finishes.\n Makes the compiler print some statistics about permanent memory\n allocation when it finishes.\n \n+@item -fpre-ipa-mem-report\n+@opindex fpre-ipa-mem-report\n+@item -fpost-ipa-mem-report\n+@opindex fpost-ipa-mem-report\n+Makes the compiler print some statistics about permanent memory\n+allocation before or after interprocedural optimization.\n+\n @item -fprofile-arcs\n @opindex fprofile-arcs\n Add code so that program flow @dfn{arcs} are instrumented.  During"}, {"sha": "7341e968edca280b17648fc6e1ee9cfa044a2fe8", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -919,12 +919,31 @@ ggc_free_overhead (void *ptr)\n \n /* Helper for qsort; sort descriptors by amount of memory consumed.  */\n static int\n-cmp_statistic (const void *loc1, const void *loc2)\n+final_cmp_statistic (const void *loc1, const void *loc2)\n {\n   struct loc_descriptor *l1 = *(struct loc_descriptor **) loc1;\n   struct loc_descriptor *l2 = *(struct loc_descriptor **) loc2;\n-  return ((l1->allocated + l1->overhead - l1->freed) -\n+  long diff;\n+  diff = ((long)(l1->allocated + l1->overhead - l1->freed) -\n \t  (l2->allocated + l2->overhead - l2->freed));\n+  return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n+}\n+\n+/* Helper for qsort; sort descriptors by amount of memory consumed.  */\n+static int\n+cmp_statistic (const void *loc1, const void *loc2)\n+{\n+  struct loc_descriptor *l1 = *(struct loc_descriptor **) loc1;\n+  struct loc_descriptor *l2 = *(struct loc_descriptor **) loc2;\n+  long diff;\n+\n+  diff = ((long)(l1->allocated + l1->overhead - l1->freed - l1->collected) -\n+\t  (l2->allocated + l2->overhead - l2->freed - l2->collected));\n+  if (diff)\n+    return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n+  diff =  ((long)(l1->allocated + l1->overhead - l1->freed) -\n+\t   (l2->allocated + l2->overhead - l2->freed));\n+  return diff > 0 ? 1 : diff < 0 ? -1 : 0;\n }\n \n /* Collect array of the descriptors from hashtable.  */\n@@ -941,7 +960,7 @@ add_statistics (void **slot, void *b)\n /* Dump per-site memory statistics.  */\n #endif\n void\n-dump_ggc_loc_statistics (void)\n+dump_ggc_loc_statistics (bool final ATTRIBUTE_UNUSED)\n {\n #ifdef GATHER_STATISTICS\n   int nentries = 0;\n@@ -958,7 +977,8 @@ dump_ggc_loc_statistics (void)\n \t   \"source location\", \"Garbage\", \"Freed\", \"Leak\", \"Overhead\", \"Times\");\n   fprintf (stderr, \"-------------------------------------------------------\\n\");\n   htab_traverse (loc_hash, add_statistics, &nentries);\n-  qsort (loc_array, nentries, sizeof (*loc_array), cmp_statistic);\n+  qsort (loc_array, nentries, sizeof (*loc_array),\n+\t final ? final_cmp_statistic : cmp_statistic);\n   for (i = 0; i < nentries; i++)\n     {\n       struct loc_descriptor *d = loc_array[i];"}, {"sha": "3ff04567ab0ce53ef10f217846510066b90ac1f1", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -222,7 +222,7 @@ extern void ggc_record_overhead (size_t, size_t, void * MEM_STAT_DECL);\n extern void ggc_free_overhead (void *);\n extern void ggc_prune_overhead_list (void);\n \n-extern void dump_ggc_loc_statistics (void);\n+extern void dump_ggc_loc_statistics (bool);\n \n /* Type-safe, C++-friendly versions of ggc_alloc() and gcc_calloc().  */\n #define GGC_NEW(T)\t\t((T *) ggc_alloc (sizeof (T)))"}, {"sha": "bcefdc091f1ecb515b623be4c3d93571d420b767", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -2012,6 +2012,19 @@ lang_dependent_init (const char *name)\n   return 1;\n }\n \n+void\n+dump_memory_report (bool final)\n+{\n+  ggc_print_statistics ();\n+  stringpool_statistics ();\n+  dump_tree_statistics ();\n+  dump_rtx_statistics ();\n+  dump_varray_statistics ();\n+  dump_alloc_pool_statistics ();\n+  dump_bitmap_statistics ();\n+  dump_ggc_loc_statistics (final);\n+}\n+\n /* Clean up: close opened files, etc.  */\n \n static void\n@@ -2040,16 +2053,7 @@ finalize (void)\n   finish_optimization_passes ();\n \n   if (mem_report)\n-    {\n-      ggc_print_statistics ();\n-      stringpool_statistics ();\n-      dump_tree_statistics ();\n-      dump_rtx_statistics ();\n-      dump_varray_statistics ();\n-      dump_alloc_pool_statistics ();\n-      dump_bitmap_statistics ();\n-      dump_ggc_loc_statistics ();\n-    }\n+    dump_memory_report (true);\n \n   /* Free up memory for the benefit of leak detectors.  */\n   free_reg_info ();"}, {"sha": "a23d52c8983746db5179da19bc3c675c6ac5438b", "filename": "gcc/toplev.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -100,6 +100,8 @@ extern void check_global_declarations (tree *, int);\n extern void emit_debug_global_declarations (tree *, int);\n extern void write_global_declarations (void);\n \n+extern void dump_memory_report (bool);\n+\n /* A unique local time stamp, might be zero if none is available.  */\n extern unsigned local_tick;\n "}, {"sha": "2044629eee0a3181f73c1bfd07cffe32deb34f65", "filename": "gcc/varray.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5573239ecfabfa338f4c73f0d259ace76004a9e/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=a5573239ecfabfa338f4c73f0d259ace76004a9e", "patch": "@@ -246,14 +246,17 @@ dump_varray_statistics (void)\n #ifdef GATHER_STATISTICS\n   struct output_info info;\n \n-  fprintf (stderr, \"\\nVARRAY Kind            Count      Bytes  Resized copied\\n\");\n-  fprintf (stderr, \"-------------------------------------------------------\\n\");\n-  info.count = 0;\n-  info.size = 0;\n-  htab_traverse (varray_hash, print_statistics, &info);\n-  fprintf (stderr, \"-------------------------------------------------------\\n\");\n-  fprintf (stderr, \"%-20s %7d %10d\\n\",\n-\t   \"Total\", info.count, info.size);\n-  fprintf (stderr, \"-------------------------------------------------------\\n\");\n+  if (varray_hash)\n+    {\n+      fprintf (stderr, \"\\nVARRAY Kind            Count      Bytes  Resized copied\\n\");\n+      fprintf (stderr, \"-------------------------------------------------------\\n\");\n+      info.count = 0;\n+      info.size = 0;\n+      htab_traverse (varray_hash, print_statistics, &info);\n+      fprintf (stderr, \"-------------------------------------------------------\\n\");\n+      fprintf (stderr, \"%-20s %7d %10d\\n\",\n+\t       \"Total\", info.count, info.size);\n+      fprintf (stderr, \"-------------------------------------------------------\\n\");\n+   }\n #endif\n }"}]}