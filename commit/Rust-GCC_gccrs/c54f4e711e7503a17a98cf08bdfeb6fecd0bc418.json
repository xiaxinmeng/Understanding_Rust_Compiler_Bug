{"sha": "c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0ZjRlNzExZTc1MDNhMTdhOThjZjA4YmRmZWI2ZmVjZDBiYzQxOA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-07-07T09:27:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:18Z"}, "message": "Added (very bad and provisional) Nvidia PTX target hook", "tree": {"sha": "02e48416e61d5486872ff7bfb8e7e33dddac79f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e48416e61d5486872ff7bfb8e7e33dddac79f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9c2eb329b3df4c281a2f586d87e6c81c12c6b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9c2eb329b3df4c281a2f586d87e6c81c12c6b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e9c2eb329b3df4c281a2f586d87e6c81c12c6b5"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "a81f8580a9f401cca1298c7aa777b094a76ed67b", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "patch": "@@ -526,6 +526,7 @@ nios2-*-*)\n \t;;\n nvptx-*-*)\n \tcpu_type=nvptx\n+\trust_target_objs=\"nvptx-rust.o\"\n \t;;\n or1k*-*-*)\n \tcpu_type=or1k"}, {"sha": "34e8b770c3699f40c94a362c72ca3fe8efc2e14b", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "patch": "@@ -43,6 +43,9 @@ extern void nvptx_output_ascii (FILE *, const char *, unsigned HOST_WIDE_INT);\n extern void nvptx_register_pragmas (void);\n extern unsigned int nvptx_data_alignment (const_tree, unsigned int);\n \n+/* Routines implemented in nvptx-rust.c  */\n+extern void nvptx_rust_target_cpu_info (void);\n+\n #ifdef RTX_CODE\n extern void nvptx_expand_oacc_fork (unsigned);\n extern void nvptx_expand_oacc_join (unsigned);"}, {"sha": "c73bb16296e1e8ef48d183fa58a6d54685ac5d1f", "filename": "gcc/config/nvptx/nvptx-rust.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig%2Fnvptx%2Fnvptx-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig%2Fnvptx%2Fnvptx-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-rust.c?ref=c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "patch": "@@ -0,0 +1,64 @@\n+/* Subroutines for the Rust front end for the Nvidia PTX architecture.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"rust/rust-target.h\"\n+#include \"rust/rust-target-def.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for NVPTX targets.  */\n+\n+void nvptx_rust_target_cpu_info(void) {\n+    if (TARGET_ABI64)\n+        rust_add_target_info(\"target_arch\", \"nvptx64\");\n+    else\n+        rust_add_target_info(\"target_arch\", \"nvptx\");\n+\n+    // TODO: should this also override target_os and target_vendor to be \"cuda\" and \"nvidia\"?\n+\n+    // names derived from llvm\n+    // TODO: ensure below variable and switch works\n+    switch (ptx_isa_option) {\n+        /* TODO: if gcc adds other sm versions (llvm has 20, 21, 32, 37, 50, 52, 53, 60, 61, 62, 70, 72, \n+         * 75, 80 as well), add them here  */\n+        case PTX_ISA_SM30:\n+            rust_add_target_info(\"target_feature\", \"sm_30\");\n+            break;\n+        case PTX_ISA_SM35:\n+            rust_add_target_info(\"target_feature\", \"sm_35\");\n+            break;\n+        default: // should this be an error?\n+            break;\n+    }\n+    /* TODO: add ptx versions as separate features if gcc adds them (ptx32, 40, 41, 42, 43, 50, 60, 61, \n+     * 63, 64, 65, 70)  */\n+\n+    // NOTE: below are all gcc-derived features that do not appear in llvm. they appeared useful, so added\n+    // TODO: ensure below variable works\n+    if (nvptx_optimize)\n+        rust_add_target_info(\"target_feature\", \"optimize\");\n+    if (TARGET_SOFT_STACK)\n+        rust_add_target_info(\"target_feature\", \"soft-stack\");\n+    // TODO: find way to have soft-stack-reserve-local as define\n+    if (TARGET_UNIFORM_SIMT)\n+        rust_add_target_info(\"target_feature\", \"uniform-simt\");\n+    if (TARGET_GOMP)\n+        rust_add_target_info(\"target_feature\", \"gomp\");\n+}"}, {"sha": "00df79466326c6bdcacbdce0c1abc05cfdd1513c", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "patch": "@@ -46,6 +46,8 @@\n         builtin_define (\"__nvptx_unisimt__\");\t\\\n     } while (0)\n \n+#define TARGET_RUST_CPU_INFO nvptx_rust_target_cpu_info\n+\n /* Avoid the default in ../../gcc.c, which adds \"-pthread\", which is not\n    supported for nvptx.  */\n #define GOMP_SELF_SPECS \"\""}, {"sha": "3d4454853aef4bc04da738e96d2fe4080969e0a8", "filename": "gcc/config/nvptx/t-nvptx", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54f4e711e7503a17a98cf08bdfeb6fecd0bc418/gcc%2Fconfig%2Fnvptx%2Ft-nvptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Ft-nvptx?ref=c54f4e711e7503a17a98cf08bdfeb6fecd0bc418", "patch": "@@ -10,3 +10,7 @@ mkoffload$(exeext): mkoffload.o collect-utils.o libcommon-target.a $(LIBIBERTY)\n \t  mkoffload.o collect-utils.o libcommon-target.a $(LIBIBERTY) $(LIBS)\n \n MULTILIB_OPTIONS = mgomp\n+\n+nvptx-rust.o: $(srcdir)/config/nvptx/nvptx-rust.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(C_COMMON_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}