{"sha": "979e89a9a94f66241fa8355e2b2e8f4a680c83e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5ZTg5YTlhOTRmNjYyNDFmYTgzNTVlMmIyZThmNGE2ODBjODNlMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-27T20:58:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-27T20:58:56Z"}, "message": "libstdc++: Fix std::reverse_iterator comparisons (PR 94354)\n\nThe std::reverse_iterator comparisons have always been implemented only\nin terms of equality and less than. In C++98 that made no difference for\nreasonable code, because when the underlying operators are the same type\nthey are required to support all comparisons anyway.\n\nBut since LWG 280 it's possible to compare reverse_iterator<X> and\nreverse_iterator<Y>, and comparisons between X and Y might not support\nthe full set of equality and relational operators. This means that it\nmatters whether we implement operator!= as x.base() != y.base() or\n!(x.base() == y.base()), and the current implementation is\nnon-conforming.\n\nThis was already fixed in GCC 10.1 for C++20, this change also fixes it\nfor all other -std modes.\n\n\tPR libstdc++/94354\n\t* include/bits/stl_iterator.h (reverse_iterator): Fix comparison\n\toperators to use the correct operations on the underlying\n\titerators.\n\t* testsuite/24_iterators/reverse_iterator/rel_ops.cc: New test.", "tree": {"sha": "4b5847f39a85c3f6ee3d1b8dd3c9f718b99301a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b5847f39a85c3f6ee3d1b8dd3c9f718b99301a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/979e89a9a94f66241fa8355e2b2e8f4a680c83e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979e89a9a94f66241fa8355e2b2e8f4a680c83e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979e89a9a94f66241fa8355e2b2e8f4a680c83e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979e89a9a94f66241fa8355e2b2e8f4a680c83e1/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1852a26b925970f64f8d31518ba732fe9c3ade23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1852a26b925970f64f8d31518ba732fe9c3ade23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1852a26b925970f64f8d31518ba732fe9c3ade23"}], "stats": {"total": 110, "additions": 105, "deletions": 5}, "files": [{"sha": "b0f45499aec21701f17ea217f1a00391dfbac9fd", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979e89a9a94f66241fa8355e2b2e8f4a680c83e1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979e89a9a94f66241fa8355e2b2e8f4a680c83e1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=979e89a9a94f66241fa8355e2b2e8f4a680c83e1", "patch": "@@ -393,6 +393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 280. Comparison of reverse_iterator to const reverse_iterator.\n+\n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const reverse_iterator<_IteratorL>& __x,\n@@ -403,31 +404,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n-    { return __y.base() < __x.base(); }\n+    { return __x.base() > __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n-    { return !(__x == __y); }\n+    { return __x.base() != __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n-    { return __y < __x; }\n+    { return __x.base() < __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n-    { return !(__y < __x); }\n+    { return __x.base() >= __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n-    { return !(__x < __y); }\n+    { return __x.base() <= __y.base(); }\n #else // C++20\n   template<typename _IteratorL, typename _IteratorR>\n     constexpr bool"}, {"sha": "4f2675f471b87dcd94decb889cd12daa049b698c", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/rel_ops.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979e89a9a94f66241fa8355e2b2e8f4a680c83e1/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979e89a9a94f66241fa8355e2b2e8f4a680c83e1/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops.cc?ref=979e89a9a94f66241fa8355e2b2e8f4a680c83e1", "patch": "@@ -0,0 +1,99 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile }\n+\n+#include <iterator>\n+\n+template<int>\n+struct Iter\n+{\n+  typedef std::random_access_iterator_tag iterator_category;\n+  typedef int value_type;\n+  typedef int* pointer;\n+  typedef int& reference;\n+  typedef std::ptrdiff_t difference_type;\n+\n+  Iter();\n+\n+  Iter& operator++();\n+  Iter operator++(int);\n+  Iter& operator--();\n+  Iter operator--(int);\n+  int& operator*() const;\n+  int* operator->() const;\n+\n+  int& operator[](difference_type) const;\n+\n+  Iter& operator+=(difference_type);\n+  Iter& operator-=(difference_type);\n+\n+  template<int N> friend Iter operator+(Iter<N>, difference_type);\n+  template<int N> friend Iter operator+(difference_type, Iter<N>);\n+  template<int N> friend Iter operator-(Iter<N>, difference_type);\n+  template<int N> friend difference_type operator-(Iter<N>, Iter<N>);\n+\n+  // Define the full set of operators for same-type comparisons\n+  template<int N> friend bool operator==(Iter<N>, Iter<N>); // synthesizes !=\n+  template<int N> friend bool operator<(Iter<N>, Iter<N>);\n+  template<int N> friend bool operator>(Iter<N>, Iter<N>);\n+  template<int N> friend bool operator<=(Iter<N>, Iter<N>);\n+  template<int N> friend bool operator>=(Iter<N>, Iter<N>);\n+};\n+\n+// Define a single kind of mixed-type comparison for each specialization.\n+int   operator==(Iter<0>, long*);\n+void* operator!=(Iter<1>, long*);\n+bool& operator< (Iter<2>, long*);\n+int   operator> (Iter<3>, long*);\n+void* operator<=(Iter<4>, long*);\n+bool& operator>=(Iter<5>, long*);\n+\n+using std::reverse_iterator;\n+\n+reverse_iterator< Iter<0> > l0;\n+reverse_iterator< Iter<1> > l1;\n+reverse_iterator< Iter<2> > l2;\n+reverse_iterator< Iter<3> > l3;\n+reverse_iterator< Iter<4> > l4;\n+reverse_iterator< Iter<5> > l5;\n+reverse_iterator<long*> r;\n+\n+// PR libstdc++/94354\n+// Check that these operators use the correct operator on the\n+// underlying iterator types.\n+bool b0 = l0 == r;\n+bool b1 = l1 != r;\n+bool b2 = l2 > r;\n+bool b3 = l3 < r;\n+bool b4 = l4 >= r;\n+bool b5 = l5 <= r;\n+\n+#if __cplusplus >= 201703L\n+int arr[3] = { 1, 2, 3 };\n+constexpr std::reverse_iterator<int*> rbeg = std::rbegin(arr);\n+constexpr std::reverse_iterator<const int*> crbeg = std::crbegin(arr);\n+static_assert( rbeg == crbeg );\n+static_assert( rbeg <= crbeg );\n+static_assert( rbeg >= crbeg );\n+constexpr std::reverse_iterator<const int*> crend = std::crend(arr);\n+static_assert( rbeg != crend );\n+static_assert( rbeg < crend );\n+static_assert( crend > rbeg );\n+static_assert( rbeg <= crend );\n+static_assert( crend >= rbeg );\n+#endif // C++17"}]}