{"sha": "ff37b816e74091972c6722cce57338bacec6fb00", "node_id": "C_kwDOANBUbNoAKGZmMzdiODE2ZTc0MDkxOTcyYzY3MjJjY2U1NzMzOGJhY2VjNmZiMDA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-18T15:26:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-18T15:26:55Z"}, "message": "Merge #1252 #1254\n\n1252: privacy: Handle calls to functions defined in previous ancestors r=CohenArthur a=CohenArthur\n\nPreviously, we would only check if `current_module` was a direct\r\ndescendant of the item's module. However, we also need to visit each of this\r\nitem's module's children recursively.\r\n\n\n1254: issue #1233: Do not rely on the endianness for testing r=CohenArthur a=CohenArthur\n\nThis testcase uncovered a very interesting bug requiring a refactor of\r\nour `AST::Block` class (#1253), but should still be fixed/adapted in the\r\nmeantime so that the BE builds on our buildbot do not fail.\r\n\r\nI've tested this newtestcase with a compiler from 74e836599ce80a11b1fe28065ed7aae6ffa3b7e2, which was the commit pointed out in #1233. The same ICE would still trigger, so I can safely say that this is a different exemple showing the same underlying issue. I'll work on fixing #1253 but it is a refactor we need to think about a little.\r\n\r\nThis should make all the architectures on buildbot happy again!\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "7f8e64e7d020f055fb28deed010bf55050a22660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f8e64e7d020f055fb28deed010bf55050a22660"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff37b816e74091972c6722cce57338bacec6fb00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihRA/CRBK7hj4Ov3rIwAA2kEIAFjSJFa3egplUk3ina8RLlDY\nAYxuPAZrxn7p/M3L8OKhZohVNLVZ1IZ6PRVZEXuNKPh5gli7fagoosdSMqXRLKOC\n6Zp3yIIiRzkSz93w7/gOvRfC25tirqFU1BoCXuQ7C7FfuS93AaOMlu9vXTdMrq27\nBNtqfI33kp+be6NK16Fy7D4dB4d+4JxYISbwb/mPMEIOdkoUBKfbkSnMuJ8z457G\nUXHBIBI/X1KXKhZ21Ts5hmWGkhbcvION3hy3f5893kj25N7xfjTpUNkzoXrPEeY6\n6e205lMH3PCz95uMcI1SX+7n5qTEmi90JraVCYL8a56tGSB3NJWFIBLy0UbGqa8=\n=uXdC\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f8e64e7d020f055fb28deed010bf55050a22660\nparent 9e61c6eb220cf54b3fcac3d3fe7a7f1f59bcc7ad\nparent 7ebe376bd68eb0d9aae9cef6308f3ec15407862d\nparent 6c0be4876868d4afcff4acc507cf136abd066bb0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1652887615 +0000\ncommitter GitHub <noreply@github.com> 1652887615 +0000\n\nMerge #1252 #1254\n\n1252: privacy: Handle calls to functions defined in previous ancestors r=CohenArthur a=CohenArthur\n\nPreviously, we would only check if `current_module` was a direct\r\ndescendant of the item's module. However, we also need to visit each of this\r\nitem's module's children recursively.\r\n\n\n1254: issue #1233: Do not rely on the endianness for testing r=CohenArthur a=CohenArthur\n\nThis testcase uncovered a very interesting bug requiring a refactor of\r\nour `AST::Block` class (#1253), but should still be fixed/adapted in the\r\nmeantime so that the BE builds on our buildbot do not fail.\r\n\r\nI've tested this newtestcase with a compiler from 74e836599ce80a11b1fe28065ed7aae6ffa3b7e2, which was the commit pointed out in #1233. The same ICE would still trigger, so I can safely say that this is a different exemple showing the same underlying issue. I'll work on fixing #1253 but it is a refactor we need to think about a little.\r\n\r\nThis should make all the architectures on buildbot happy again!\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff37b816e74091972c6722cce57338bacec6fb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff37b816e74091972c6722cce57338bacec6fb00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff37b816e74091972c6722cce57338bacec6fb00/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e61c6eb220cf54b3fcac3d3fe7a7f1f59bcc7ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e61c6eb220cf54b3fcac3d3fe7a7f1f59bcc7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e61c6eb220cf54b3fcac3d3fe7a7f1f59bcc7ad"}, {"sha": "7ebe376bd68eb0d9aae9cef6308f3ec15407862d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebe376bd68eb0d9aae9cef6308f3ec15407862d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ebe376bd68eb0d9aae9cef6308f3ec15407862d"}, {"sha": "6c0be4876868d4afcff4acc507cf136abd066bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0be4876868d4afcff4acc507cf136abd066bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0be4876868d4afcff4acc507cf136abd066bb0"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "a974de039c756489ab9b129647bb1c2750198003", "filename": "gcc/rust/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff37b816e74091972c6722cce57338bacec6fb00/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff37b816e74091972c6722cce57338bacec6fb00/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc?ref=ff37b816e74091972c6722cce57338bacec6fb00", "patch": "@@ -20,15 +20,22 @@ PrivacyReporter::go (HIR::Crate &crate)\n }\n \n static bool\n-is_child_module (NodeId current_module,\n-\t\t Optional<std::vector<NodeId> &> children)\n+is_child_module (Analysis::Mappings &mappings, NodeId parent,\n+\t\t NodeId possible_child)\n {\n+  auto children = mappings.lookup_module_children (parent);\n+\n   if (!children)\n     return false;\n \n-  // FIXME: This checks for one step - we need to go deeper\n+  // Visit all toplevel children\n   for (auto &child : *children)\n-    if (child == current_module)\n+    if (child == possible_child)\n+      return true;\n+\n+  // Now descend recursively in the child module tree\n+  for (auto &child : *children)\n+    if (is_child_module (mappings, child, possible_child))\n       return true;\n \n   return false;\n@@ -72,11 +79,9 @@ PrivacyReporter::check_for_privacy_violation (const NodeId &use_id,\n \tif (mod_node_id == current_module.get ())\n \t  break;\n \n-\tauto children = mappings.lookup_module_children (mod_node_id);\n-\n \t// FIXME: This needs a LOT of TLC: hinting about the definition, a\n \t// string to say if it's a module, function, type, etc...\n-\tif (!is_child_module (current_module.get (), children))\n+\tif (!is_child_module (mappings, mod_node_id, current_module.get ()))\n \t  valid = false;\n       }\n       break;"}, {"sha": "7fab787b9e8dcf54b1dca34dc243944335bedc90", "filename": "gcc/testsuite/rust/compile/macro-issue1233.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff37b816e74091972c6722cce57338bacec6fb00/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff37b816e74091972c6722cce57338bacec6fb00/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs?ref=ff37b816e74091972c6722cce57338bacec6fb00", "patch": "@@ -1,15 +1,15 @@\n-// { dg-additional-options \"-w\" }\n+// { dg-additional-options \"-frust-cfg=A -w\" }\n \n macro_rules! impl_uint {\n     ($($ty:ident = $lang:literal),*) => {\n         $(\n             impl $ty {\n                 pub fn to_le(self) -> Self {\n-                    #[cfg(not(target_endian = \"little\"))]\n+                    #[cfg(not(A))]\n                     {\n                         self\n                     }\n-                    #[cfg(target_endian = \"little\")]\n+                    #[cfg(A)]\n                     {\n                         self\n                     }"}, {"sha": "3c0744928b19d7b85ee18c24b7e9276c7edddc38", "filename": "gcc/testsuite/rust/compile/privacy2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff37b816e74091972c6722cce57338bacec6fb00/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff37b816e74091972c6722cce57338bacec6fb00/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy2.rs?ref=ff37b816e74091972c6722cce57338bacec6fb00", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod orange {\n+    fn tangerine() {}\n+\n+    mod green {\n+        mod blue {\n+            fn berry() {\n+                tangerine();\n+            }\n+        }\n+    }\n+}"}]}