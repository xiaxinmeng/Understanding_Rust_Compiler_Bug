{"sha": "cff7879a381d3f5ed6556206896e6a6229800167", "node_id": "C_kwDOANBUbNoAKGNmZjc4NzlhMzgxZDNmNWVkNjU1NjIwNjg5NmU2YTYyMjk4MDAxNjc", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-03T17:58:25Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-12-03T20:32:13Z"}, "message": "rs6000: Fix up flag_shrink_wrap handling in presence of -mrop-protect [PR101324]\n\nPR101324 shows a problem in disabling shrink-wrapping when using -mrop-protect\nwhen there is a attribute optimize/pragma.  The fix envolves moving the handling\nof flag_shrink_wrap so it gets re-disbled when we change or add options.\n\n2021-12-03  Martin Liska  <mliska@suse.cz>\n\ngcc/\n\tPR target/101324\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Move the\n\tdisabling of shrink-wrapping when using -mrop-protect from here...\n\t(rs6000_override_options_after_change): ...to here.\n\n2021-12-03  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/testsuite/\n\tPR target/101324\n\t* gcc.target/powerpc/pr101324.c: New test.", "tree": {"sha": "0736f08bfea8273d9a95c984c66256b3397ed79c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0736f08bfea8273d9a95c984c66256b3397ed79c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cff7879a381d3f5ed6556206896e6a6229800167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff7879a381d3f5ed6556206896e6a6229800167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff7879a381d3f5ed6556206896e6a6229800167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff7879a381d3f5ed6556206896e6a6229800167/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81722ee16e339af7c11b3d1bf51c17246557595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81722ee16e339af7c11b3d1bf51c17246557595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81722ee16e339af7c11b3d1bf51c17246557595"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "5e1299865164222994d8ad24fb8a4b3ac9191314", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7879a381d3f5ed6556206896e6a6229800167/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7879a381d3f5ed6556206896e6a6229800167/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cff7879a381d3f5ed6556206896e6a6229800167", "patch": "@@ -3477,6 +3477,10 @@ rs6000_override_options_after_change (void)\n     }\n   else if (!OPTION_SET_P (flag_cunroll_grow_size))\n     flag_cunroll_grow_size = flag_peel_loops || optimize >= 3;\n+\n+  /* If we are inserting ROP-protect instructions, disable shrink wrap.  */\n+  if (rs6000_rop_protect)\n+    flag_shrink_wrap = 0;\n }\n \n #ifdef TARGET_USES_LINUX64_OPT\n@@ -4041,10 +4045,6 @@ rs6000_option_override_internal (bool global_init_p)\n       && ((rs6000_isa_flags_explicit & OPTION_MASK_QUAD_MEMORY_ATOMIC) == 0))\n     rs6000_isa_flags |= OPTION_MASK_QUAD_MEMORY_ATOMIC;\n \n-  /* If we are inserting ROP-protect instructions, disable shrink wrap.  */\n-  if (rs6000_rop_protect)\n-    flag_shrink_wrap = 0;\n-\n   /* If we can shrink-wrap the TOC register save separately, then use\n      -msave-toc-indirect unless explicitly disabled.  */\n   if ((rs6000_isa_flags_explicit & OPTION_MASK_SAVE_TOC_INDIRECT) == 0"}, {"sha": "ca0fca80213a839385eb3dfa5c5299cf893a9675", "filename": "gcc/testsuite/gcc.target/powerpc/pr101324.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cff7879a381d3f5ed6556206896e6a6229800167/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101324.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cff7879a381d3f5ed6556206896e6a6229800167/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101324.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101324.c?ref=cff7879a381d3f5ed6556206896e6a6229800167", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target rop_ok } */\n+/* { dg-options \"-O1 -mrop-protect -mdejagnu-cpu=power10\" } */\n+\n+extern void foo (void);\n+\n+long int\n+__attribute__ ((__optimize__ (\"no-inline\")))\n+func (long int cond)\n+{\n+  if (cond)\n+    foo ();\n+  return cond;\n+}\n+\n+/* Ensure hashst comes after mflr and hashchk comes after ld 0,16(1).  */\n+/* { dg-final { scan-assembler {(?p)\\mmflr 0.*\\n.*\\n.*\\mhashst 0,} } } */\n+/* { dg-final { scan-assembler {(?p)ld 0,.*\\n.*\\n.*\\n.*\\mhashchk 0,} } } */"}]}