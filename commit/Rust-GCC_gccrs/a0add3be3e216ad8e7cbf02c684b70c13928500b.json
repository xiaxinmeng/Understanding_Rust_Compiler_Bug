{"sha": "a0add3be3e216ad8e7cbf02c684b70c13928500b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhZGQzYmUzZTIxNmFkOGU3Y2JmMDJjNjg0YjcwYzEzOTI4NTAwYg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T22:04:50Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-03T22:04:50Z"}, "message": "trans.h (struct gfc_ss, [...]): Move field string_length from the former struct to the latter.\n\n\t* trans.h (struct gfc_ss, struct gfc_ss_info): Move field\n\tstring_length from the former struct to the latter.\n\t* trans-array.c\n\t(gfc_get_temp_ss, gfc_trans_array_constructor, gfc_add_loop_ss_code,\n\tgfc_conv_ss_descriptor, gfc_conv_scalarized_array_ref,\n\tgfc_conv_resolve_dependencies, gfc_conv_loop_setup,\n\tgfc_conv_expr_descriptor): Update references to string_length and\n\tfactor common reference chains where possible.\n\t* trans-const.c (gfc_conv_constant): Ditto.\n\t* trans-expr.c (gfc_conv_variable, gfc_conv_subref_array_arg,\n\tgfc_conv_expr): Ditto.\n\nFrom-SVN: r180869", "tree": {"sha": "377c8552e9248eaa6500645e7b95fabb3ae3f542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/377c8552e9248eaa6500645e7b95fabb3ae3f542"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0add3be3e216ad8e7cbf02c684b70c13928500b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0add3be3e216ad8e7cbf02c684b70c13928500b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0add3be3e216ad8e7cbf02c684b70c13928500b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0add3be3e216ad8e7cbf02c684b70c13928500b/comments", "author": null, "committer": null, "parents": [{"sha": "f98cfd3c42d1aca224bfe463f5852d1ae1e5bd2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f98cfd3c42d1aca224bfe463f5852d1ae1e5bd2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f98cfd3c42d1aca224bfe463f5852d1ae1e5bd2e"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "3f1339f36e2342bd7d7eb6a1d27bc45afce49729", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a0add3be3e216ad8e7cbf02c684b70c13928500b", "patch": "@@ -1,3 +1,17 @@\n+2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans.h (struct gfc_ss, struct gfc_ss_info): Move field\n+\tstring_length from the former struct to the latter.\n+\t* trans-array.c\n+\t(gfc_get_temp_ss, gfc_trans_array_constructor, gfc_add_loop_ss_code,\n+\tgfc_conv_ss_descriptor, gfc_conv_scalarized_array_ref,\n+\tgfc_conv_resolve_dependencies, gfc_conv_loop_setup,\n+\tgfc_conv_expr_descriptor): Update references to string_length and\n+\tfactor common reference chains where possible.\n+\t* trans-const.c (gfc_conv_constant): Ditto.\n+\t* trans-expr.c (gfc_conv_variable, gfc_conv_subref_array_arg,\n+\tgfc_conv_expr): Ditto.\n+\n 2011-11-03  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans.h (struct gfc_ss, struct gfc_ss_info): Move field expr from"}, {"sha": "827d13d3946cead9fd8b678528350fffc3f300b6", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=a0add3be3e216ad8e7cbf02c684b70c13928500b", "patch": "@@ -557,11 +557,11 @@ gfc_get_temp_ss (tree type, tree string_length, int dimen)\n \n   ss_info = gfc_get_ss_info ();\n   ss_info->type = GFC_SS_TEMP;\n+  ss_info->string_length = string_length;\n \n   ss = gfc_get_ss ();\n   ss->info = ss_info;\n   ss->next = gfc_ss_terminator;\n-  ss->string_length = string_length;\n   ss->data.temp.type = type;\n   ss->dimen = dimen;\n   for (i = 0; i < ss->dimen; i++)\n@@ -1953,14 +1953,16 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss, locus * where)\n   bool dynamic;\n   bool old_first_len, old_typespec_chararray_ctor;\n   tree old_first_len_val;\n+  gfc_ss_info *ss_info;\n   gfc_expr *expr;\n \n   /* Save the old values for nested checking.  */\n   old_first_len = first_len;\n   old_first_len_val = first_len_val;\n   old_typespec_chararray_ctor = typespec_chararray_ctor;\n \n-  expr = ss->info->expr;\n+  ss_info = ss->info;\n+  expr = ss_info->expr;\n \n   /* Do bounds-checking here and in gfc_trans_array_ctor_element only if no\n      typespec was given for the array constructor.  */\n@@ -1993,21 +1995,21 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss, locus * where)\n \t  gfc_init_se (&length_se, NULL);\n \t  gfc_conv_expr_type (&length_se, expr->ts.u.cl->length,\n \t\t\t      gfc_charlen_type_node);\n-\t  ss->string_length = length_se.expr;\n+\t  ss_info->string_length = length_se.expr;\n \t  gfc_add_block_to_block (&loop->pre, &length_se.pre);\n \t  gfc_add_block_to_block (&loop->post, &length_se.post);\n \t}\n       else\n \tconst_string = get_array_ctor_strlen (&loop->pre, c,\n-\t\t\t\t\t      &ss->string_length);\n+\t\t\t\t\t      &ss_info->string_length);\n \n       /* Complex character array constructors should have been taken care of\n \t and not end up here.  */\n-      gcc_assert (ss->string_length);\n+      gcc_assert (ss_info->string_length);\n \n-      expr->ts.u.cl->backend_decl = ss->string_length;\n+      expr->ts.u.cl->backend_decl = ss_info->string_length;\n \n-      type = gfc_get_character_type_len (expr->ts.kind, ss->string_length);\n+      type = gfc_get_character_type_len (expr->ts.kind, ss_info->string_length);\n       if (const_string)\n \ttype = build_pointer_type (type);\n     }\n@@ -2207,7 +2209,7 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript,\n \t    gfc_add_block_to_block (&loop->post, &se.post);\n \n \t  ss->data.scalar.expr = se.expr;\n-\t  ss->string_length = se.string_length;\n+\t  ss_info->string_length = se.string_length;\n \t  break;\n \n \tcase GFC_SS_REFERENCE:\n@@ -2219,7 +2221,7 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript,\n \t  gfc_add_block_to_block (&loop->post, &se.post);\n \n \t  ss->data.scalar.expr = gfc_evaluate_now (se.expr, &loop->pre);\n-\t  ss->string_length = se.string_length;\n+\t  ss_info->string_length = se.string_length;\n \t  break;\n \n \tcase GFC_SS_SECTION:\n@@ -2254,19 +2256,19 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript,\n \t  gfc_conv_expr (&se, expr);\n \t  gfc_add_block_to_block (&loop->pre, &se.pre);\n \t  gfc_add_block_to_block (&loop->post, &se.post);\n-\t  ss->string_length = se.string_length;\n+\t  ss_info->string_length = se.string_length;\n \t  break;\n \n \tcase GFC_SS_CONSTRUCTOR:\n \t  if (expr->ts.type == BT_CHARACTER\n-\t      && ss->string_length == NULL\n+\t      && ss_info->string_length == NULL\n \t      && expr->ts.u.cl\n \t      && expr->ts.u.cl->length)\n \t    {\n \t      gfc_init_se (&se, NULL);\n \t      gfc_conv_expr_type (&se, expr->ts.u.cl->length,\n \t\t\t\t  gfc_charlen_type_node);\n-\t      ss->string_length = se.expr;\n+\t      ss_info->string_length = se.expr;\n \t      gfc_add_block_to_block (&loop->pre, &se.pre);\n \t      gfc_add_block_to_block (&loop->post, &se.post);\n \t    }\n@@ -2304,7 +2306,7 @@ gfc_conv_ss_descriptor (stmtblock_t * block, gfc_ss * ss, int base)\n   gfc_conv_expr_lhs (&se, ss_info->expr);\n   gfc_add_block_to_block (block, &se.pre);\n   ss->data.info.descriptor = se.expr;\n-  ss->string_length = se.string_length;\n+  ss_info->string_length = se.string_length;\n \n   if (base)\n     {\n@@ -2697,7 +2699,7 @@ gfc_conv_scalarized_array_ref (gfc_se * se, gfc_array_ref * ar)\n void\n gfc_conv_tmp_array_ref (gfc_se * se)\n {\n-  se->string_length = se->ss->string_length;\n+  se->string_length = se->ss->info->string_length;\n   gfc_conv_scalarized_array_ref (se, NULL);\n   gfc_advance_se_ss_chain (se);\n }\n@@ -3899,7 +3901,7 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n       if (GFC_ARRAY_TYPE_P (base_type)\n \t  || GFC_DESCRIPTOR_TYPE_P (base_type))\n \tbase_type = gfc_get_element_type (base_type);\n-      loop->temp_ss = gfc_get_temp_ss (base_type, dest->string_length,\n+      loop->temp_ss = gfc_get_temp_ss (base_type, dest->info->string_length,\n \t\t\t\t       loop->dimen);\n       gfc_add_ss_to_loop (loop, loop->temp_ss);\n     }\n@@ -4124,11 +4126,11 @@ gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n       gcc_assert (tmp_ss_info->type == GFC_SS_TEMP);\n \n       /* Make absolutely sure that this is a complete type.  */\n-      if (loop->temp_ss->string_length)\n+      if (tmp_ss_info->string_length)\n \tloop->temp_ss->data.temp.type\n \t\t= gfc_get_character_type_len_for_eltype\n \t\t\t(TREE_TYPE (loop->temp_ss->data.temp.type),\n-\t\t\t loop->temp_ss->string_length);\n+\t\t\t tmp_ss_info->string_length);\n \n       tmp = loop->temp_ss->data.temp.type;\n       memset (&loop->temp_ss->data.info, 0, sizeof (gfc_array_info));\n@@ -5973,7 +5975,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t\t\t\t       : NULL),\n \t\t\t\t      loop.dimen);\n \n-      se->string_length = loop.temp_ss->string_length;\n+      se->string_length = loop.temp_ss->info->string_length;\n       gcc_assert (loop.temp_ss->dimen == loop.dimen);\n       gfc_add_ss_to_loop (&loop, loop.temp_ss);\n     }\n@@ -6030,7 +6032,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n   else if (expr->expr_type == EXPR_FUNCTION && !transposed_dims (ss))\n     {\n       desc = info->descriptor;\n-      se->string_length = ss->string_length;\n+      se->string_length = ss_info->string_length;\n     }\n   else\n     {"}, {"sha": "35a5e687d53ce7171e64b4fa687a39b3196d0e06", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=a0add3be3e216ad8e7cbf02c684b70c13928500b", "patch": "@@ -393,7 +393,7 @@ gfc_conv_constant (gfc_se * se, gfc_expr * expr)\n       gcc_assert (ss_info->expr == expr);\n \n       se->expr = se->ss->data.scalar.expr;\n-      se->string_length = se->ss->string_length;\n+      se->string_length = ss_info->string_length;\n       gfc_advance_se_ss_chain (se);\n       return;\n     }"}, {"sha": "87734f179848c6999d9980cb3ed0b1d01798d86c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=a0add3be3e216ad8e7cbf02c684b70c13928500b", "patch": "@@ -626,13 +626,15 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n   ss = se->ss;\n   if (ss != NULL)\n     {\n+      gfc_ss_info *ss_info = ss->info;\n+\n       /* Check that something hasn't gone horribly wrong.  */\n       gcc_assert (ss != gfc_ss_terminator);\n-      gcc_assert (ss->info->expr == expr);\n+      gcc_assert (ss_info->expr == expr);\n \n       /* A scalarized term.  We already know the descriptor.  */\n       se->expr = se->ss->data.info.descriptor;\n-      se->string_length = se->ss->string_length;\n+      se->string_length = ss_info->string_length;\n       for (ref = se->ss->data.info.ref; ref; ref = ref->next)\n \tif (ref->type == REF_ARRAY && ref->u.ar.type != AR_ELEMENT)\n \t  break;\n@@ -2402,7 +2404,7 @@ gfc_conv_subref_array_arg (gfc_se * parmse, gfc_expr * expr, int g77,\n \t\t\t\t\t      : NULL),\n \t\t\t\t  loop.dimen);\n \n-  parmse->string_length = loop.temp_ss->string_length;\n+  parmse->string_length = loop.temp_ss->info->string_length;\n \n   /* Associate the SS with the loop.  */\n   gfc_add_ss_to_loop (&loop, loop.temp_ss);\n@@ -4833,12 +4835,15 @@ gfc_conv_expr (gfc_se * se, gfc_expr * expr)\n       && (ss->info->type == GFC_SS_SCALAR\n \t  || ss->info->type == GFC_SS_REFERENCE))\n     {\n+      gfc_ss_info *ss_info;\n+\n+      ss_info = ss->info;\n       /* Substitute a scalar expression evaluated outside the scalarization\n          loop.  */\n       se->expr = se->ss->data.scalar.expr;\n-      if (ss->info->type == GFC_SS_REFERENCE)\n+      if (ss_info->type == GFC_SS_REFERENCE)\n \tse->expr = gfc_build_addr_expr (NULL_TREE, se->expr);\n-      se->string_length = se->ss->string_length;\n+      se->string_length = ss_info->string_length;\n       gfc_advance_se_ss_chain (se);\n       return;\n     }"}, {"sha": "f1b109a80e8dae531eafd44f983a9888c62054eb", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0add3be3e216ad8e7cbf02c684b70c13928500b/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=a0add3be3e216ad8e7cbf02c684b70c13928500b", "patch": "@@ -187,6 +187,7 @@ typedef struct gfc_ss_info\n {\n   gfc_ss_type type;\n   gfc_expr *expr;\n+  tree string_length;\n }\n gfc_ss_info;\n \n@@ -205,7 +206,6 @@ typedef struct gfc_ss\n {\n   gfc_ss_info *info;\n \n-  tree string_length;\n   union\n   {\n     /* If type is GFC_SS_SCALAR or GFC_SS_REFERENCE.  */"}]}