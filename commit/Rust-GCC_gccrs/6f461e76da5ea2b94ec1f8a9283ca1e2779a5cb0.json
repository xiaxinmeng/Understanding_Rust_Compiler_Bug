{"sha": "6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0NjFlNzZkYTVlYTJiOTRlYzFmOGE5MjgzY2ExZTI3NzlhNWNiMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-07-06T14:00:46Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-07-06T14:00:46Z"}, "message": "tls.m4 (GCC_CHECK_CC_TLS): New.\n\nconfig/\n\n2007-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* tls.m4 (GCC_CHECK_CC_TLS): New.\n\nlibgcc/\n\n2007-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config.host (tmake_file): Add t-tls for i[34567]86-*-linux*\n\tand x86_64-*-linux*.\n\n\t* config/t-tls: New file.\n\n\t* Makefile.in (INTERNAL_CFLAGS): Add @set_have_cc_tls@. \n\n\t* configure.ac: Include ../config/enable.m4 and\n\t../config/tls.m4.  Use GCC_CHECK_CC_TLS to check if assembler\n\tsupports TLS and substitute set_have_cc_tls.\n\t* configure: Regenerated.\n\nlibbid/\n\n2007-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tUpdated from Intel BID library:\n\t* bid_conf.h (BID_THREAD): Defined only if both HAVE_CC_TLS\n\tand USE_TLS are defined.\n\nFrom-SVN: r126416", "tree": {"sha": "41af967850b0489a1585cb2751cc5c75b0cb21a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41af967850b0489a1585cb2751cc5c75b0cb21a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/comments", "author": null, "committer": null, "parents": [{"sha": "374d961c0df2af3d7fc3367d63daec408b09d148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374d961c0df2af3d7fc3367d63daec408b09d148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374d961c0df2af3d7fc3367d63daec408b09d148"}], "stats": {"total": 139, "additions": 134, "deletions": 5}, "files": [{"sha": "ffa8a92cd74131573b69b203b3bc60e7d0cc01e3", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -1,7 +1,11 @@\n+2007-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* tls.m4 (GCC_CHECK_CC_TLS): New.\n+\n 2007-07-05  Sebastian Pop  <sebpop@gmail.com>\n \n \tPR bootstrap/32622\n-\t* config/mh-x86omitfp (BOOT_CFLAGS): Add -fomit-frame-pointer,\n+\t* mh-x86omitfp (BOOT_CFLAGS): Add -fomit-frame-pointer,\n \tdon't reset its value.\n \n 2007-06-27  Mike Stump  <mrs@apple.com>"}, {"sha": "69cf6d4f9d2b6096d87c83676cb1d5f834a55582", "filename": "config/tls.m4", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/config%2Ftls.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/config%2Ftls.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Ftls.m4?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -73,3 +73,16 @@ AC_DEFUN([GCC_CHECK_TLS], [\n     AC_DEFINE(HAVE_TLS, 1,\n \t      [Define to 1 if the target supports thread-local storage.])\n   fi])\n+\n+dnl Check whether the target assembler supports TLS.\n+AC_DEFUN([GCC_CHECK_CC_TLS], [\n+  GCC_ENABLE(tls, yes, [], [Use thread-local storage])\n+  AC_CACHE_CHECK([whether the target asssembler upports thread-local storage],\n+\t\t have_cc_tls, [\n+    AC_COMPILE_IFELSE([__thread int a; int b; int main() { return a = b; }],\n+      [have_cc_tls=yes], [have_cc_tls=no])]\n+    )])\n+  if test \"$enable_tls $have_cc_tls\" = \"yes yes\"; then\n+    AC_DEFINE(HAVE_CC_TLS, 1,\n+\t      [Define to 1 if the target assembler supports thread-local storage.])\n+  fi])"}, {"sha": "1ba29ac0f04a79aedb28da7f2c537830b3287202", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -1,3 +1,17 @@\n+2007-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config.host (tmake_file): Add t-tls for i[34567]86-*-linux*\n+\tand x86_64-*-linux*.\n+\n+\t* config/t-tls: New file.\n+\n+\t* Makefile.in (INTERNAL_CFLAGS): Add @set_have_cc_tls@. \n+\n+\t* configure.ac: Include ../config/enable.m4 and\n+\t../config/tls.m4.  Use GCC_CHECK_CC_TLS to check if assembler\n+\tsupports TLS and substitute set_have_cc_tls.\n+\t* configure: Regenerated.\n+\n 2007-07-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in: Use libbid for DFP when BID is enabled.\n@@ -8,7 +22,6 @@\n \textra_parts. Add config/i386/t-cygming to tmake_file. \n \t* config/i386/t-cygming: New file with rules for crtbegin.o, crtend.o.\n \n-\n 2007-05-29  Zuxy Meng  <zuxy.meng@gmail.com>\n \t    Danny Smith  <dannysmith@users.sourceforge.net>\n "}, {"sha": "ca7ed066a83faee2d8f685d750b6c62dcc5c26d4", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -214,7 +214,8 @@ override CFLAGS := $(filter-out -fprofile-generate -fprofile-use,$(CFLAGS))\n # options in LIBGCC2_CFLAGS.  But LIBGCC2_CFLAGS may contain -g0, and CFLAGS\n # will usually contain -g, so for the moment CFLAGS goes first.  We must\n # include CFLAGS - that's where multilib options live.\n-INTERNAL_CFLAGS = $(CFLAGS) $(LIBGCC2_CFLAGS) $(HOST_LIBGCC2_CFLAGS) $(INCLUDES)\n+INTERNAL_CFLAGS = $(CFLAGS) $(LIBGCC2_CFLAGS) $(HOST_LIBGCC2_CFLAGS) \\\n+\t\t  $(INCLUDES) @set_have_cc_tls@\n \n MULTIDIR := $(shell $(CC) $(CFLAGS) -print-multi-directory)\n MULTIOSDIR := $(shell $(CC) $(CFLAGS) -print-multi-os-directory)"}, {"sha": "642f45fdbddd1e1d003a506e8bef549c88c2afe5", "filename": "libgcc/config.host", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -654,3 +654,9 @@ m32c-*-elf*)\n \texit 1\n \t;;\n esac\n+\n+case ${host} in\n+i[34567]86-*-linux* | x86_64-*-linux*)\n+\ttmake_file=\"${tmake_file} t-tls\"\n+\t;;\n+esac"}, {"sha": "a660fcb7565041d1dfbb54e9a144ad4321caffb9", "filename": "libgcc/config/libbid/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfig%2Flibbid%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfig%2Flibbid%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2FChangeLog?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -1,3 +1,9 @@\n+2007-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tUpdated from Intel BID library:\n+\t* bid_conf.h (BID_THREAD): Defined only if both HAVE_CC_TLS\n+\tand USE_TLS are defined.\n+\n 2007-07-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tUpdated from Intel BID library:"}, {"sha": "b3038d342ddeb11cbb3b384d4f6d61ca346d057e", "filename": "libgcc/config/libbid/bid_conf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfig%2Flibbid%2Fbid_conf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfig%2Flibbid%2Fbid_conf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Flibbid%2Fbid_conf.h?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -41,7 +41,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #endif\n \n #ifndef BID_THREAD\n-#ifdef USE_TLS\n+#if defined (HAVE_CC_TLS) && defined (USE_TLS)\n #define BID_THREAD __thread\n #endif\n #endif"}, {"sha": "405128f78bf465812416a5bf4df3776c3f4b2a0d", "filename": "libgcc/config/t-tls", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfig%2Ft-tls", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfig%2Ft-tls", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-tls?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -0,0 +1,2 @@\n+# Use thread-local storage\n+INTERNAL_CFLAGS += -DUSE_TLS"}, {"sha": "b95512c84ac2566f2145f7eabb13531077a096ab", "filename": "libgcc/configure", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -272,7 +272,7 @@ PACKAGE_STRING='GNU C Runtime Library 1.0'\n PACKAGE_BUGREPORT=''\n \n ac_unique_file=\"static-object.mk\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libgcc_topdir enable_shared slibdir INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA AWK build build_cpu build_vendor build_os host host_cpu host_vendor host_os host_noncanonical build_libsubdir build_subdir host_subdir target_subdir AR ac_ct_AR LIPO ac_ct_LIPO NM ac_ct_NM RANLIB ac_ct_RANLIB STRIP ac_ct_STRIP LN_S CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CPP decimal_float enable_decimal_float vis_hide tmake_file extra_parts asm_hidden_op LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libgcc_topdir enable_shared slibdir INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA AWK build build_cpu build_vendor build_os host host_cpu host_vendor host_os host_noncanonical build_libsubdir build_subdir host_subdir target_subdir AR ac_ct_AR LIPO ac_ct_LIPO NM ac_ct_NM RANLIB ac_ct_RANLIB STRIP ac_ct_STRIP LN_S CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CPP decimal_float enable_decimal_float vis_hide set_have_cc_tls tmake_file extra_parts asm_hidden_op LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -815,6 +815,7 @@ Optional Features:\n \t\t\tenable decimal float extension to C.  Selecting 'bid'\n \t\t\tor 'dpd' choses which decimal floating point format\n \t\t\tto use\n+  --enable-tls            Use thread-local storage [default=yes]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -3365,6 +3366,75 @@ else\n fi\n \n \n+# See if we have thread-local storage.  We can only test assembler\n+# sicne link-time and run-time tests require the newly built\n+# gcc, which can't be used to build executable due to that libgcc\n+# is yet to be built here.\n+\n+   # Check whether --enable-tls or --disable-tls was given.\n+if test \"${enable_tls+set}\" = set; then\n+  enableval=\"$enable_tls\"\n+\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Argument to enable/disable tls must be yes or no\" >&5\n+echo \"$as_me: error: Argument to enable/disable tls must be yes or no\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+      esac\n+\n+else\n+  enable_tls=yes\n+fi;\n+\n+  echo \"$as_me:$LINENO: checking whether the target asssembler upports thread-local storage\" >&5\n+echo $ECHO_N \"checking whether the target asssembler upports thread-local storage... $ECHO_C\" >&6\n+if test \"${have_cc_tls+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    cat >conftest.$ac_ext <<_ACEOF\n+__thread int a; int b; int main() { return a = b; }\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  have_cc_tls=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+have_cc_tls=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+echo \"$as_me:$LINENO: result: $have_cc_tls\" >&5\n+echo \"${ECHO_T}$have_cc_tls\" >&6\n+set_have_cc_tls\n+if test \"$enable_tls $have_cc_tls\" = \"yes yes\"; then\n+  set_have_cc_tls=\"-DHAVE_CC_TLS\"\n+fi\n+\n+\n # Conditionalize the makefile for this target machine.\n tmake_file_=\n for f in ${tmake_file}\n@@ -4083,6 +4153,7 @@ s,@CPP@,$CPP,;t t\n s,@decimal_float@,$decimal_float,;t t\n s,@enable_decimal_float@,$enable_decimal_float,;t t\n s,@vis_hide@,$vis_hide,;t t\n+s,@set_have_cc_tls@,$set_have_cc_tls,;t t\n s,@tmake_file@,$tmake_file,;t t\n s,@extra_parts@,$extra_parts,;t t\n s,@asm_hidden_op@,$asm_hidden_op,;t t"}, {"sha": "1bf3644aacebfcfc8e3423f769b96637e8c5a7ef", "filename": "libgcc/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=6f461e76da5ea2b94ec1f8a9283ca1e2779a5cb0", "patch": "@@ -1,5 +1,7 @@\n dnl Process this file with autoconf to produce a configure script.\n \n+sinclude(../config/enable.m4)\n+sinclude(../config/tls.m4)\n sinclude(../config/acx.m4)\n sinclude(../config/no-executables.m4)\n \n@@ -167,6 +169,17 @@ else\n fi\n AC_SUBST(vis_hide)\n \n+# See if we have thread-local storage.  We can only test assembler\n+# sicne link-time and run-time tests require the newly built\n+# gcc, which can't be used to build executable due to that libgcc\n+# is yet to be built here.\n+GCC_CHECK_CC_TLS\n+set_have_cc_tls\n+if test \"$enable_tls $have_cc_tls\" = \"yes yes\"; then\n+  set_have_cc_tls=\"-DHAVE_CC_TLS\"\n+fi\n+AC_SUBST(set_have_cc_tls)\n+\n # Conditionalize the makefile for this target machine.\n tmake_file_=\n for f in ${tmake_file}"}]}