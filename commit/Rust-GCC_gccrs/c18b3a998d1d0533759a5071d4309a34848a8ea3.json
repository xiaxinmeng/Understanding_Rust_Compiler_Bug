{"sha": "c18b3a998d1d0533759a5071d4309a34848a8ea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE4YjNhOTk4ZDFkMDUzMzc1OWE1MDcxZDQzMDlhMzQ4NDhhOGVhMw==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2008-08-04T09:49:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-04T09:49:33Z"}, "message": "g-comlin.adb (Group_Switches): Preserve the switch order when grouping and allow switch grouping of switches...\n\n2008-08-04  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* g-comlin.adb (Group_Switches): Preserve the switch order when\n\tgrouping and allow switch grouping of switches with more than one\n\tcharacter extension (e.g. gnatw.x).\n\t(Args_From_Expanded): Remove this now obsolete method.\n\nFrom-SVN: r138596", "tree": {"sha": "322b8d7b25962293d192473481e0357708e14a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/322b8d7b25962293d192473481e0357708e14a7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c18b3a998d1d0533759a5071d4309a34848a8ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18b3a998d1d0533759a5071d4309a34848a8ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c18b3a998d1d0533759a5071d4309a34848a8ea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c18b3a998d1d0533759a5071d4309a34848a8ea3/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5d33d09466f647e5697a9e061ffdddf1d5bd4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d33d09466f647e5697a9e061ffdddf1d5bd4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d33d09466f647e5697a9e061ffdddf1d5bd4ef"}], "stats": {"total": 72, "additions": 18, "deletions": 54}, "files": [{"sha": "195e63026aec8e66f2e03570430c0c4fb121b50d", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 18, "deletions": 54, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c18b3a998d1d0533759a5071d4309a34848a8ea3/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c18b3a998d1d0533759a5071d4309a34848a8ea3/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=c18b3a998d1d0533759a5071d4309a34848a8ea3", "patch": "@@ -32,7 +32,8 @@\n ------------------------------------------------------------------------------\n \n with Ada.Unchecked_Deallocation;\n-with GNAT.OS_Lib;      use GNAT.OS_Lib;\n+with Ada.Strings.Unbounded;\n+with GNAT.OS_Lib; use GNAT.OS_Lib;\n \n package body GNAT.Command_Line is\n \n@@ -101,8 +102,6 @@ package body GNAT.Command_Line is\n    procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n      (Command_Line_Configuration_Record, Command_Line_Configuration);\n \n-   type Boolean_Chars is array (Character) of Boolean;\n-\n    procedure Remove (Line : in out Argument_List_Access; Index : Integer);\n    --  Remove a specific element from Line\n \n@@ -111,9 +110,6 @@ package body GNAT.Command_Line is\n       Str  : String_Access);\n    --  Append a new element to Line\n \n-   function Args_From_Expanded (Args : Boolean_Chars) return String;\n-   --  Return the string made of all characters with True in Args\n-\n    generic\n       with procedure Callback (Simple_Switch : String);\n    procedure For_Each_Simple_Switch\n@@ -1050,25 +1046,6 @@ package body GNAT.Command_Line is\n       end if;\n    end Free;\n \n-   ------------------------\n-   -- Args_From_Expanded --\n-   ------------------------\n-\n-   function Args_From_Expanded (Args : Boolean_Chars) return String is\n-      Result : String (1 .. Args'Length);\n-      Index  : Natural := Result'First;\n-\n-   begin\n-      for A in Args'Range loop\n-         if Args (A) then\n-            Result (Index) := A;\n-            Index := Index + 1;\n-         end if;\n-      end loop;\n-\n-      return Result (1 .. Index - 1);\n-   end Args_From_Expanded;\n-\n    ------------------\n    -- Define_Alias --\n    ------------------\n@@ -1470,12 +1447,9 @@ package body GNAT.Command_Line is\n       Result : Argument_List_Access;\n       Params : Argument_List_Access)\n    is\n-      type Boolean_Array is array (Result'Range) of Boolean;\n-\n-      Matched   : Boolean_Array;\n-      Count     : Natural;\n+      Group     : Ada.Strings.Unbounded.Unbounded_String;\n       First     : Natural;\n-      From_Args : Boolean_Chars;\n+      use type Ada.Strings.Unbounded.Unbounded_String;\n \n    begin\n       if Cmd.Config = null\n@@ -1485,41 +1459,31 @@ package body GNAT.Command_Line is\n       end if;\n \n       for P in Cmd.Config.Prefixes'Range loop\n-         Matched := (others => False);\n-         Count   := 0;\n+         Group   := Ada.Strings.Unbounded.Null_Unbounded_String;\n+         First   := 0;\n \n          for C in Result'Range loop\n             if Result (C) /= null\n               and then Params (C) = null  --  ignored if has a parameter\n               and then Looking_At\n                 (Result (C).all, Result (C)'First, Cmd.Config.Prefixes (P).all)\n             then\n-               Matched (C) := True;\n-               Count := Count + 1;\n+               Group :=  Group &\n+                 Result (C)\n+                   (Result (C)'First + Cmd.Config.Prefixes (P)'Length ..\n+                      Result (C)'Last);\n+               if First = 0 then\n+                  First := C;\n+               end if;\n+\n+               Free (Result (C));\n             end if;\n          end loop;\n \n-         if Count > 1 then\n-            From_Args := (others => False);\n-            First   := 0;\n-\n-            for M in Matched'Range loop\n-               if Matched (M) then\n-                  if First = 0 then\n-                     First := M;\n-                  end if;\n-\n-                  for A in Result (M)'First + Cmd.Config.Prefixes (P)'Length\n-                    .. Result (M)'Last\n-                  loop\n-                     From_Args (Result (M)(A)) := True;\n-                  end loop;\n-                  Free (Result (M));\n-               end if;\n-            end loop;\n-\n+         if First > 0 then\n             Result (First) := new String'\n-              (Cmd.Config.Prefixes (P).all & Args_From_Expanded (From_Args));\n+              (Cmd.Config.Prefixes (P).all &\n+               Ada.Strings.Unbounded.To_String (Group));\n          end if;\n       end loop;\n    end Group_Switches;"}]}