{"sha": "b7211528d51b9069f57eef8f0bde905618ba8fce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyMTE1MjhkNTFiOTA2OWY1N2VlZjhmMGJkZTkwNTYxOGJhOGZjZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-10-08T22:56:55Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-10-08T22:56:55Z"}, "message": "cfgexpand.c (maybe_dump_rtl_for_tree_stmt): New function.\n\n\t* cfgexpand.c (maybe_dump_rtl_for_tree_stmt): New function.\n\t(expand_gimple_cond_expr, expand_gimple_tailcall,\n\texpand_gimple_basic_block): Use it to dump RTL for each stmt.\n\t(tree_expand_cfg): Announce full RTL function dump.\n\t* tree-optimize.c (execute_one_pass): Use normal RTL printing,\n\tnot the graph version.\n\t* tree-pretty-print.c (dump_generic_node): Allow empty statements\n\tin the arms of a COND_EXPR for lowered nodes.\n\nFrom-SVN: r88800", "tree": {"sha": "0e70dc6e47d913581bbdee9730cb947877160d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e70dc6e47d913581bbdee9730cb947877160d2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7211528d51b9069f57eef8f0bde905618ba8fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7211528d51b9069f57eef8f0bde905618ba8fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7211528d51b9069f57eef8f0bde905618ba8fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7211528d51b9069f57eef8f0bde905618ba8fce/comments", "author": null, "committer": null, "parents": [{"sha": "a1e063e53ac1b57747b885f963af8660856d7bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e063e53ac1b57747b885f963af8660856d7bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e063e53ac1b57747b885f963af8660856d7bfd"}], "stats": {"total": 105, "additions": 76, "deletions": 29}, "files": [{"sha": "078ee8283320d8434ce17dc0d249818f3e8584d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7211528d51b9069f57eef8f0bde905618ba8fce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7211528d51b9069f57eef8f0bde905618ba8fce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7211528d51b9069f57eef8f0bde905618ba8fce", "patch": "@@ -1,3 +1,14 @@\n+2004-10-09  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* cfgexpand.c (maybe_dump_rtl_for_tree_stmt): New function.\n+\t(expand_gimple_cond_expr, expand_gimple_tailcall,\n+\texpand_gimple_basic_block): Use it to dump RTL for each stmt.\n+\t(tree_expand_cfg): Announce full RTL function dump.\n+\t* tree-optimize.c (execute_one_pass): Use normal RTL printing,\n+\tnot the graph version.\n+\t* tree-pretty-print.c (dump_generic_node): Allow empty statements\n+\tin the arms of a COND_EXPR for lowered nodes.\n+\n 2004-10-08  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* config/rs6000/spe.h (atosfix16, atosfix32, atosfix64, atoufix16,\n@@ -192,21 +203,21 @@\n \n 2004-10-07  Devang Patel  <dpatel@apple.com>\n \n-        * rs6000/altivec.md (UNSPEC_VCMPBFP, UNSPEC_VCMPEQUB, UNSPEC_VCMPEQUH,\n-        UNSPEC_VCMPEQUW, UNSPEC_VCMPGEFP, UNSPEC_VCMPGTUB, UNSPEC_VCMPGTSB,\n-        UNSPEC_VCMPGTUH, UNSPEC_VCMPGTSH, UNSPEC_VCMPGTUW, UNSPEC_VCMPGTSW,\n-        UNSPEC_VCMPGTFP, UNSPEC_VSEL4SI, UNSPEC_VSEL4SF, UNSPEC_VSEL8HI,\n-        UNSPEC_VSEL16QI, UNSPEC_VCOND_V4SI, UNSPEC_VCOND_V4SF, UNSPEC_VCOND_V8HI,\n-        UNSPEC_VCOND_V16QI, UNSPEC_VCONDU_V4SI, UNSPEC_VCONDU_V8HI, \n+\t* rs6000/altivec.md (UNSPEC_VCMPBFP, UNSPEC_VCMPEQUB, UNSPEC_VCMPEQUH,\n+\tUNSPEC_VCMPEQUW, UNSPEC_VCMPGEFP, UNSPEC_VCMPGTUB, UNSPEC_VCMPGTSB,\n+\tUNSPEC_VCMPGTUH, UNSPEC_VCMPGTSH, UNSPEC_VCMPGTUW, UNSPEC_VCMPGTSW,\n+\tUNSPEC_VCMPGTFP, UNSPEC_VSEL4SI, UNSPEC_VSEL4SF, UNSPEC_VSEL8HI,\n+\tUNSPEC_VSEL16QI, UNSPEC_VCOND_V4SI, UNSPEC_VCOND_V4SF, UNSPEC_VCOND_V8HI,\n+\tUNSPEC_VCOND_V16QI, UNSPEC_VCONDU_V4SI, UNSPEC_VCONDU_V8HI, \n \tUNSPEC_VCONDU_V16QI): New constant defines.\n-        (vcondv4si, vcondv4sf, vcondv8hi, vcondv16qi, vconduv4si, vconduv8hi,\n+\t(vcondv4si, vcondv4sf, vcondv8hi, vcondv16qi, vconduv4si, vconduv8hi,\n \tvconduv16qi): New patterns.\n-        * rs6000/rs6000-protos.h (rs6000_emit_vector_cond_expr): New function.\n-        * rs6000/rs6000.c (rs6000_emit_vector_cond_expr): New function.\n-        (get_vec_cmp_insn): Same.\n-        (get_vsel_insn): Same.\n-        (rs6000_emit_vector_compare): Same.\n-        (rs6000_emit_vector_select): Same.\n+\t* rs6000/rs6000-protos.h (rs6000_emit_vector_cond_expr): New function.\n+\t* rs6000/rs6000.c (rs6000_emit_vector_cond_expr): New function.\n+\t(get_vec_cmp_insn): Same.\n+\t(get_vsel_insn): Same.\n+\t(rs6000_emit_vector_compare): Same.\n+\t(rs6000_emit_vector_select): Same.\n \t(INSN_NOT_AVAILABLE): New.\n \t\n 2004-10-07  Zdenek Dvorak  <dvorakz@suse.cz>"}, {"sha": "a04f3ae42314a40072c9647618491e98a0fe3f80", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7211528d51b9069f57eef8f0bde905618ba8fce/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7211528d51b9069f57eef8f0bde905618ba8fce/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=b7211528d51b9069f57eef8f0bde905618ba8fce", "patch": "@@ -833,6 +833,23 @@ expand_used_vars (void)\n }\n \n \n+/* If we need to produce a detailed dump, print the tree representation\n+   for STMT to the dump file.  SINCE is the last RTX after which the RTL\n+   generated for STMT should have been appended.  */\n+\n+static void\n+maybe_dump_rtl_for_tree_stmt (tree stmt, rtx since)\n+{\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"\\n;; \");\n+      print_generic_expr (dump_file, stmt, TDF_SLIM);\n+      fprintf (dump_file, \"\\n\");\n+\n+      print_rtl (dump_file, since ? NEXT_INSN (since) : since);\n+    }\n+}\n+\n /* A subroutine of expand_gimple_basic_block.  Expand one COND_EXPR.\n    Returns a new basic block if we've terminated the current basic\n    block and created a new one.  */\n@@ -847,7 +864,9 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n   tree pred = COND_EXPR_COND (stmt);\n   tree then_exp = COND_EXPR_THEN (stmt);\n   tree else_exp = COND_EXPR_ELSE (stmt);\n-  rtx last = get_last_insn ();\n+  rtx last2, last;\n+\n+  last2 = last = get_last_insn ();\n \n   extract_true_false_edges_from_block (bb, &true_edge, &false_edge);\n   if (EXPR_LOCUS (stmt))\n@@ -866,12 +885,14 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n     {\n       jumpif (pred, label_rtx (GOTO_DESTINATION (then_exp)));\n       add_reg_br_prob_note (dump_file, last, true_edge->probability);\n+      maybe_dump_rtl_for_tree_stmt (stmt, last);\n       return NULL;\n     }\n   if (TREE_CODE (else_exp) == GOTO_EXPR && IS_EMPTY_STMT (then_exp))\n     {\n       jumpifnot (pred, label_rtx (GOTO_DESTINATION (else_exp)));\n       add_reg_br_prob_note (dump_file, last, false_edge->probability);\n+      maybe_dump_rtl_for_tree_stmt (stmt, last);\n       return NULL;\n     }\n   gcc_assert (TREE_CODE (then_exp) == GOTO_EXPR\n@@ -900,11 +921,7 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n     BB_END (new_bb) = PREV_INSN (BB_END (new_bb));\n   update_bb_for_insn (new_bb);\n \n-  if (dump_file)\n-    {\n-      dump_bb (bb, dump_file, 0);\n-      dump_bb (new_bb, dump_file, 0);\n-    }\n+  maybe_dump_rtl_for_tree_stmt (stmt, last2);\n \n   return new_bb;\n }\n@@ -922,18 +939,22 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n static basic_block\n expand_gimple_tailcall (basic_block bb, tree stmt, bool *can_fallthru)\n {\n-  rtx last = get_last_insn ();\n+  rtx last2, last;\n   edge e;\n   edge_iterator ei;\n   int probability;\n   gcov_type count;\n \n+  last2 = last = get_last_insn ();\n+\n   expand_expr_stmt (stmt);\n \n   for (last = NEXT_INSN (last); last; last = NEXT_INSN (last))\n     if (CALL_P (last) && SIBLING_CALL_P (last))\n       goto found;\n \n+  maybe_dump_rtl_for_tree_stmt (stmt, last);\n+\n   *can_fallthru = true;\n   return NULL;\n \n@@ -1007,6 +1028,8 @@ expand_gimple_tailcall (basic_block bb, tree stmt, bool *can_fallthru)\n \tBB_END (bb) = PREV_INSN (last);\n     }\n \n+  maybe_dump_rtl_for_tree_stmt (stmt, last2);\n+\n   return bb;\n }\n \n@@ -1023,9 +1046,9 @@ expand_gimple_basic_block (basic_block bb, FILE * dump_file)\n \n   if (dump_file)\n     {\n-      tree_register_cfg_hooks ();\n-      dump_bb (bb, dump_file, 0);\n-      rtl_register_cfg_hooks ();\n+      fprintf (dump_file,\n+\t       \"\\n;; Generating RTL for tree basic block %d\\n\",\n+\t       bb->index);\n     }\n \n   if (!bsi_end_p (bsi))\n@@ -1044,6 +1067,8 @@ expand_gimple_basic_block (basic_block bb, FILE * dump_file)\n \tBB_HEAD (bb) = NEXT_INSN (BB_HEAD (bb));\n       bsi_next (&bsi);\n       note = emit_note_after (NOTE_INSN_BASIC_BLOCK, BB_HEAD (bb));\n+\n+      maybe_dump_rtl_for_tree_stmt (stmt, last);\n     }\n   else\n     note = BB_HEAD (bb) = emit_note (NOTE_INSN_BASIC_BLOCK);\n@@ -1096,7 +1121,11 @@ expand_gimple_basic_block (basic_block bb, FILE * dump_file)\n \t\t}\n \t    }\n \t  else\n-\t    expand_expr_stmt (stmt);\n+\t    {\n+\t      last = get_last_insn ();\n+\t      expand_expr_stmt (stmt);\n+\t      maybe_dump_rtl_for_tree_stmt (stmt, last);\n+\t    }\n \t}\n     }\n \n@@ -1111,8 +1140,6 @@ expand_gimple_basic_block (basic_block bb, FILE * dump_file)\n     last = PREV_INSN (PREV_INSN (last));\n   BB_END (bb) = last;\n \n-  if (dump_file)\n-    dump_bb (bb, dump_file, 0);\n   update_bb_for_insn (bb);\n \n   return bb;\n@@ -1303,6 +1330,13 @@ tree_expand_cfg (void)\n   generating_concat_p = 0;\n \n   finalize_block_changes ();\n+\n+  if (dump_file)\n+    {\n+      fprintf (dump_file,\n+\t       \"\\n\\n;;\\n;; Full RTL generated for this function:\\n;;\\n\");\n+      /* And the pass manager will dump RTL for us.  */\n+    }\n }\n \n struct tree_opt_pass pass_expand ="}, {"sha": "4fd6240fb94ad184d8ba086f35ac8be3276b107e", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7211528d51b9069f57eef8f0bde905618ba8fce/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7211528d51b9069f57eef8f0bde905618ba8fce/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=b7211528d51b9069f57eef8f0bde905618ba8fce", "patch": "@@ -505,7 +505,7 @@ execute_one_pass (struct tree_opt_pass *pass)\n   if (dump_file\n       && (pass->properties_provided & (PROP_cfg | PROP_rtl))\n \t  == (PROP_cfg | PROP_rtl))\n-    print_rtl_graph_with_bb (dump_file_name, get_insns ());\n+    print_rtl_with_bb (dump_file, get_insns ());\n \n   /* Run post-pass cleanup and verification.  */\n   todo = pass->todo_flags_finish;"}, {"sha": "a4731392f8902710a3a183718b59cdd2723e5fd1", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7211528d51b9069f57eef8f0bde905618ba8fce/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7211528d51b9069f57eef8f0bde905618ba8fce/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=b7211528d51b9069f57eef8f0bde905618ba8fce", "patch": "@@ -845,9 +845,11 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t  pp_character (buffer, ')');\n \t  /* The lowered cond_exprs should always be printed in full.  */\n \t  if (COND_EXPR_THEN (node)\n-\t      && TREE_CODE (COND_EXPR_THEN (node)) == GOTO_EXPR\n+\t      && (IS_EMPTY_STMT (COND_EXPR_THEN (node))\n+\t\t  || TREE_CODE (COND_EXPR_THEN (node)) == GOTO_EXPR)\n \t      && COND_EXPR_ELSE (node)\n-\t      && TREE_CODE (COND_EXPR_ELSE (node)) == GOTO_EXPR)\n+\t      && (IS_EMPTY_STMT (COND_EXPR_ELSE (node))\n+\t\t  || TREE_CODE (COND_EXPR_ELSE (node)) == GOTO_EXPR))\n \t    {\n \t      pp_space (buffer);\n \t      dump_generic_node (buffer, COND_EXPR_THEN (node), 0, flags, true);"}]}