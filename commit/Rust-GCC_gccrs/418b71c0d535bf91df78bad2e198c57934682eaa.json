{"sha": "418b71c0d535bf91df78bad2e198c57934682eaa", "node_id": "C_kwDOANBUbNoAKDQxOGI3MWMwZDUzNWJmOTFkZjc4YmFkMmUxOThjNTc5MzQ2ODJlYWE", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-15T16:39:47Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-15T16:39:47Z"}, "message": "PR tree-optimization/64992: (B << 2) != 0 is B when B is Boolean.\n\nThis patch resolves both PR tree-optimization/64992 and PR\ntree-optimization/98956 which are missed optimization enhancement\nrequest, for which Andrew Pinski already has a proposed solution\n(related to a fix for PR tree-optimization/98954).  Yesterday,\nI proposed an alternate improved patch for PR98954, which although\nsuperior in most respects, alas didn't address this case [which\ndoesn't include a BIT_AND_EXPR], hence this follow-up fix.\n\nFor many functions, F(B), of a (zero-one) Boolean value B, the\nexpression F(B) != 0 can often be simplified to just B.  Hence\n\"(B * 5) != 0\" is B, \"-B != 0\" is B, \"bswap(B) != 0\" is B,\n\"(B >>r 3) != 0\" is B.  These are all currently optimized by GCC,\nwith the strange exception of left shifts by a constant (possibly\ndue to the undefined/implementation defined behaviour when the\nshift constant is larger than the first operand's precision).\nThis patch adds support for this particular case, when the shift\nconstant is valid.\n\n2022-08-15  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR tree-optimization/64992\n\tPR tree-optimization/98956\n\t* match.pd (ne (lshift @0 @1) 0): Simplify (X << C) != 0 to X\n\twhen X is zero_one_valued_p and the shift constant C is valid.\n\t(eq (lshift @0 @1) 0): Likewise, simplify (X << C) == 0 to !X\n\twhen X is zero_one_valued_p and the shift constant C is valid.\n\ngcc/testsuite/ChangeLog\n\tPR tree-optimization/64992\n\t* gcc.dg/pr64992.c: New test case.", "tree": {"sha": "16091b0ba4b39cef0024221c90b938a31b1c0939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16091b0ba4b39cef0024221c90b938a31b1c0939"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/418b71c0d535bf91df78bad2e198c57934682eaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418b71c0d535bf91df78bad2e198c57934682eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/418b71c0d535bf91df78bad2e198c57934682eaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/418b71c0d535bf91df78bad2e198c57934682eaa/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03acd8b6429e22068330dce5abf129291d3f26de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03acd8b6429e22068330dce5abf129291d3f26de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03acd8b6429e22068330dce5abf129291d3f26de"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "e32bda64e6440ffb8a4d1adeb8e77d14bb2a7d50", "filename": "gcc/match.pd", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418b71c0d535bf91df78bad2e198c57934682eaa/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418b71c0d535bf91df78bad2e198c57934682eaa/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=418b71c0d535bf91df78bad2e198c57934682eaa", "patch": "@@ -1920,6 +1920,26 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       && TYPE_PRECISION (type) <= TYPE_PRECISION (TREE_TYPE (@0)))\n   (mult (convert @1) (convert @2))))\n \n+/* (X << C) != 0 can be simplified to X, when C is zero_one_valued_p.\n+   Check that the shift is well-defined (C is less than TYPE_PRECISION)\n+   as some targets (such as x86's SSE) may return zero for larger C.  */\n+(simplify\n+  (ne (lshift zero_one_valued_p@0 INTEGER_CST@1) integer_zerop@2)\n+  (if (tree_fits_shwi_p (@1)\n+       && tree_to_shwi (@1) > 0\n+       && tree_to_shwi (@1) < TYPE_PRECISION (TREE_TYPE (@0)))\n+    (convert @0)))\n+\n+/* (X << C) == 0 can be simplified to X == 0, when C is zero_one_valued_p.\n+   Check that the shift is well-defined (C is less than TYPE_PRECISION)\n+   as some targets (such as x86's SSE) may return zero for larger C.  */\n+(simplify\n+  (eq (lshift zero_one_valued_p@0 INTEGER_CST@1) integer_zerop@2)\n+  (if (tree_fits_shwi_p (@1)\n+       && tree_to_shwi (@1) > 0\n+       && tree_to_shwi (@1) < TYPE_PRECISION (TREE_TYPE (@0)))\n+    (eq @0 @2)))\n+\n /* Convert ~ (-A) to A - 1.  */\n (simplify\n  (bit_not (convert? (negate @0)))"}, {"sha": "43fbcf7ac5074b44eb482571ef968b205c6b0fd7", "filename": "gcc/testsuite/gcc.dg/pr64992.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/418b71c0d535bf91df78bad2e198c57934682eaa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64992.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/418b71c0d535bf91df78bad2e198c57934682eaa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64992.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr64992.c?ref=418b71c0d535bf91df78bad2e198c57934682eaa", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+_Bool foo(_Bool x) { return (x << 2) != 0; }\n+_Bool bar(_Bool x) { return (x << 2) == 0; }\n+\n+/* { dg-final { scan-tree-dump-not \" << \" \"optimized\" } } */"}]}