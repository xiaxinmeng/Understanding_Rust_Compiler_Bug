{"sha": "019dd7b55ff05854569bc7e271a8b695e4c27065", "node_id": "C_kwDOANBUbNoAKDAxOWRkN2I1NWZmMDU4NTQ1NjliYzdlMjcxYThiNjk1ZTRjMjcwNjU", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-05-28T17:33:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-30T08:36:00Z"}, "message": "Avoid invalid metavariable substitutions\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-macro-substitute-ctx.cc\n\t(SubstituteCtx::substitute_metavar): Allow substitution failure.\n\t(SubstituteCtx::substitute_token):\n\tHandle substitution failure, include dollar sign in count of tokens to substitute.\n\t(SubstituteCtx::substitute_tokens):\n\tInclude dollar sign in count of tokens to substitute.\n\t* expand/rust-macro-substitute-ctx.h\n\t(SubstituteCtx::substitute_metavar):\n\tAdjust signature and document new substitution failure handling.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2225.rs: New test.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "c4d29695b754de2958bab8ad4a5ca61c884682df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d29695b754de2958bab8ad4a5ca61c884682df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019dd7b55ff05854569bc7e271a8b695e4c27065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019dd7b55ff05854569bc7e271a8b695e4c27065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019dd7b55ff05854569bc7e271a8b695e4c27065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019dd7b55ff05854569bc7e271a8b695e4c27065/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0162ff3900ae032958d16c0a4af6c76ca3dd4335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0162ff3900ae032958d16c0a4af6c76ca3dd4335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0162ff3900ae032958d16c0a4af6c76ca3dd4335"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "84df2c2623e699615cd038be65c9d047994ab424", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dd7b55ff05854569bc7e271a8b695e4c27065/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dd7b55ff05854569bc7e271a8b695e4c27065/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=019dd7b55ff05854569bc7e271a8b695e4c27065", "patch": "@@ -2,17 +2,18 @@\n \n namespace Rust {\n \n-std::vector<std::unique_ptr<AST::Token>>\n-SubstituteCtx::substitute_metavar (std::unique_ptr<AST::Token> &metavar)\n+bool\n+SubstituteCtx::substitute_metavar (\n+  std::unique_ptr<AST::Token> &metavar,\n+  std::vector<std::unique_ptr<AST::Token>> &expanded)\n {\n   auto metavar_name = metavar->get_str ();\n \n-  std::vector<std::unique_ptr<AST::Token>> expanded;\n   auto it = fragments.find (metavar_name);\n   if (it == fragments.end ())\n     {\n-      // Return a copy of the original token\n-      expanded.push_back (metavar->clone_token ());\n+      // fail to substitute\n+      return false;\n     }\n   else\n     {\n@@ -28,7 +29,7 @@ SubstituteCtx::substitute_metavar (std::unique_ptr<AST::Token> &metavar)\n \t    metavar->get_locus (),\n \t    \"you probably forgot the repetition operator: %<%s%s%s%>\", \"$(\",\n \t    metavar->as_string ().c_str (), \")*\");\n-\t  return expanded;\n+\t  return true;\n \t}\n \n       // We only care about the vector when expanding repetitions.\n@@ -42,7 +43,7 @@ SubstituteCtx::substitute_metavar (std::unique_ptr<AST::Token> &metavar)\n \t}\n     }\n \n-  return expanded;\n+  return true;\n }\n \n bool\n@@ -209,14 +210,17 @@ SubstituteCtx::substitute_token (size_t token_idx)\n       if (token_id_is_keyword (token->get_id ()))\n \t{\n \tcase IDENTIFIER:\n+\t  std::vector<std::unique_ptr<AST::Token>> expanded;\n+\n \t  rust_debug (\"expanding metavar: %s\", token->get_str ().c_str ());\n-\t  return {substitute_metavar (token), 1};\n+\n+\t  if (substitute_metavar (token, expanded))\n+\t    return {std::move (expanded), 2};\n \t}\n-      rust_error_at (token->get_locus (),\n-\t\t     \"unexpected token in macro transcribe: expected \"\n-\t\t     \"%<(%> or identifier after %<$%>, got %<%s%>\",\n-\t\t     get_token_description (token->get_id ()));\n-      break;\n+\n+      // don't substitute, dollar sign is alone/metavar is unknown\n+      return {std::vector<std::unique_ptr<AST::Token>> (), 0};\n+\n       case LEFT_PAREN: {\n \t// We need to parse up until the closing delimiter and expand this\n \t// fragment->n times.\n@@ -285,17 +289,11 @@ SubstituteCtx::substitute_token (size_t token_idx)\n \n \treturn {substitute_repetition (pattern_start, pattern_end,\n \t\t\t\t       std::move (separator_token)),\n-\t\tpattern_end - pattern_start + to_skip};\n+\t\tpattern_end - pattern_start + to_skip + 1};\n       }\n-      // TODO: We need to check if the $ was alone. In that case, do\n-      // not error out: Simply act as if there was an empty identifier\n-      // with no associated fragment and paste the dollar sign in the\n-      // transcription. Unsure how to do that since we always have at\n-      // least the closing curly brace after an empty $...\n     }\n \n-  // FIXME: gcc_unreachable() error case?\n-  return {std::vector<std::unique_ptr<AST::Token>> (), 0};\n+  gcc_unreachable ();\n }\n \n std::vector<std::unique_ptr<AST::Token>>\n@@ -304,7 +302,7 @@ SubstituteCtx::substitute_tokens ()\n   std::vector<std::unique_ptr<AST::Token>> replaced_tokens;\n   rust_debug (\"expanding tokens\");\n \n-  for (size_t i = 0; i < macro.size (); i++)\n+  for (size_t i = 0; i < macro.size ();)\n     {\n       auto &tok = macro.at (i);\n       if (tok->get_id () == DOLLAR_SIGN)\n@@ -315,6 +313,12 @@ SubstituteCtx::substitute_tokens ()\n \t  auto expanded = std::move (p.first);\n \t  auto tok_to_skip = p.second;\n \n+\t  if (!tok_to_skip)\n+\t    {\n+\t      replaced_tokens.emplace_back (tok->clone_token ());\n+\t      tok_to_skip++;\n+\t    }\n+\n \t  i += tok_to_skip;\n \n \t  for (auto &token : expanded)\n@@ -323,6 +327,7 @@ SubstituteCtx::substitute_tokens ()\n       else\n \t{\n \t  replaced_tokens.emplace_back (tok->clone_token ());\n+\t  i++;\n \t}\n     }\n "}, {"sha": "d8e4e31d579d765cd6b2574a4a6a0fb94ddea4d1", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dd7b55ff05854569bc7e271a8b695e4c27065/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dd7b55ff05854569bc7e271a8b695e4c27065/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h?ref=019dd7b55ff05854569bc7e271a8b695e4c27065", "patch": "@@ -49,12 +49,13 @@ class SubstituteCtx\n    * i.e. replacing $var with the associated fragment.\n    *\n    * @param metavar Metavariable to try and replace\n+   * @param expanded Reference to a vector upon which expanded tokens will be\n+   * pushed\n    *\n-   * @return A token containing the associated fragment expanded into tokens if\n-   * any, or the cloned token if no fragment was associated\n+   * @return True iff the substitution succeeded\n    */\n-  std::vector<std::unique_ptr<AST::Token>>\n-  substitute_metavar (std::unique_ptr<AST::Token> &metavar);\n+  bool substitute_metavar (std::unique_ptr<AST::Token> &metavar,\n+\t\t\t   std::vector<std::unique_ptr<AST::Token>> &expanded);\n \n   /**\n    * Substitute a macro repetition by its given fragments"}, {"sha": "53757c1bae66f739e2d14ec07451c81a6c9b5a23", "filename": "gcc/testsuite/rust/compile/issue-2225.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019dd7b55ff05854569bc7e271a8b695e4c27065/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2225.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019dd7b55ff05854569bc7e271a8b695e4c27065/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2225.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2225.rs?ref=019dd7b55ff05854569bc7e271a8b695e4c27065", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! foo {\n+    ($_:tt) => {};\n+    () => {foo!($);};\n+}\n+\n+macro_rules! bar {\n+    () => {let $_a = 12;} // { dg-error \"unrecognised token\" }\n+}\n+\n+pub fn main() -> i32 {\n+    foo!();\n+    bar!();\n+    0\n+}"}]}