{"sha": "c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0ZjA3ZjRjZmUwNjIxYWIyYjcwN2FlNzY5MWI1Mjc0N2I5Y2U0NA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-09-22T23:33:20Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-09-22T23:33:20Z"}, "message": "re PR tree-optimization/16721 (Accesses to volatile objects optimized away)\n\n\n\tPR tree-optimization/16721\n\t* tree-dfa.c (dump_variable): Show TREE_THIS_VOLATILE.\n\t* tree-ssa-alias.c (create_memory_tag): Move setting of\n\tTREE_THIS_VOLATILE ...\n\t(get_tmt_for): ... here.\n\n\ntestsuite/ChangeLog\n\n\tPR tree-optimization/16721\n\t* testsuite/gcc.dg/tree-ssa/pr16721.c: New test.\n\nFrom-SVN: r87895", "tree": {"sha": "d729fab0bca584700b3abb9898aff081a36e46f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d729fab0bca584700b3abb9898aff081a36e46f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/comments", "author": null, "committer": null, "parents": [{"sha": "ba652ba92560c4aca703d809ff2b535fdb3215cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba652ba92560c4aca703d809ff2b535fdb3215cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba652ba92560c4aca703d809ff2b535fdb3215cc"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "9feec2ead0bbae08e5508f8863dbff93ff0115e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "patch": "@@ -1,3 +1,11 @@\n+2004-09-22  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/16721\n+\t* tree-dfa.c (dump_variable): Show TREE_THIS_VOLATILE.\n+\t* tree-ssa-alias.c (create_memory_tag): Move setting of\n+\tTREE_THIS_VOLATILE ...\n+\t(get_tmt_for): ... here.\n+\n 2004-09-22  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.md (cmove splitter): Fix formatting."}, {"sha": "5c6e8958fd9c5b5845761addff0c20a10e738292", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "patch": "@@ -1,3 +1,8 @@\n+2004-09-22  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/16721\n+\t* testsuite/gcc.dg/tree-ssa/pr16721.c: New test.\n+\n 2004-09-23  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* gcc.dg/20030123-1.c: Add prototypes for builtin functions."}, {"sha": "869ab96497e96e3e9ce8357391d3fbfac4cf8608", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr16721.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr16721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr16721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr16721.c?ref=c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fno-strict-aliasing -fdump-tree-optimized\" } */\n+\n+struct data {\n+\tvolatile unsigned long *addr;\n+} *p;\n+\n+int test()\n+{\n+\t*p->addr;\n+\treturn 0;\n+}\n+\n+/* The load from p->addr should not disappear.  */\n+/* { dg-final { scan-tree-dump-times \"\\->addr\" 1 \"optimized\"} } */"}, {"sha": "9db0cbb243aab525cb12e5f735df44ffb5fbc694", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "patch": "@@ -552,6 +552,9 @@ dump_variable (FILE *file, tree var)\n   if (is_global_var (var))\n     fprintf (file, \", is global\");\n \n+  if (TREE_THIS_VOLATILE (var))\n+    fprintf (file, \", is volatile\");\n+\n   if (is_call_clobbered (var))\n     fprintf (file, \", call clobbered\");\n "}, {"sha": "3d99d94e92ee4187c5e02b770fa1346015e34d73", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04f07f4cfe0621ab2b707ae7691b52747b9ce44/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=c04f07f4cfe0621ab2b707ae7691b52747b9ce44", "patch": "@@ -2025,9 +2025,6 @@ create_memory_tag (tree type, bool is_type_tag)\n      determine whether they should be considered globals.  */\n   DECL_CONTEXT (tag) = current_function_decl;\n \n-  /* If the pointed-to type is volatile, so is the tag.  */\n-  TREE_THIS_VOLATILE (tag) = TREE_THIS_VOLATILE (type);\n-\n   /* Memory tags are by definition addressable.  This also prevents\n      is_gimple_ref frome confusing memory tags with optimizable\n      variables.  */\n@@ -2126,6 +2123,9 @@ get_tmt_for (tree ptr, struct alias_info *ai)\n       ai->pointers[ai->num_pointers++] = alias_map;\n     }\n \n+  /* If the pointed-to type is volatile, so is the tag.  */\n+  TREE_THIS_VOLATILE (tag) = TREE_THIS_VOLATILE (tag_type);\n+\n   /* Make sure that the type tag has the same alias set as the\n      pointed-to type.  */\n   gcc_assert (tag_set == get_alias_set (tag));"}]}