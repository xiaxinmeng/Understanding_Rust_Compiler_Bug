{"sha": "58385f6ace42d17da5a73cb9b68ce6173295840f", "node_id": "C_kwDOANBUbNoAKDU4Mzg1ZjZhY2U0MmQxN2RhNWE3M2NiOWI2OGNlNjE3MzI5NTg0MGY", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T15:31:55Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T16:25:37Z"}, "message": "Fix -Wformat-diag in various targets.\n\ngcc/ChangeLog:\n\n\t* collect2.cc (scan_libraries): Fix -Wformat-diag issues.\n\t* config/aarch64/aarch64-builtins.cc (aarch64_simd_expand_builtin): Likewise.\n\t* config/arc/arc.md: Likewise.\n\t* config/avr/avr.cc (avr_section_type_flags): Likewise.\n\t* config/bfin/bfin.cc (bfin_option_override): Likewise.\n\t(bfin_handle_longcall_attribute): Likewise.\n\t* config/cris/cris.h (FUNCTION_PROFILER): Likewise.\n\t* config/frv/frv.cc (frv_expand_builtin): Likewise.\n\t* config/ia64/ia64-c.cc (ia64_hpux_handle_builtin_pragma): Likewise.\n\t* config/iq2000/iq2000.cc (save_restore_insns): Likewise.\n\t(iq2000_print_operand_address): Likewise.\n\t(iq2000_print_operand): Likewise.\n\t* config/m32c/m32c-pragma.cc (m32c_pragma_memregs): Likewise.\n\t(m32c_pragma_address): Likewise.\n\t* config/m68k/m68k.cc (m68k_handle_fndecl_attribute): Likewise.\n\t* config/mips/mips.cc (mips_handle_interrupt_attr): Likewise.\n\t(mips_set_compression_mode): Likewise.\n\t* config/mmix/mmix.cc (mmix_function_profiler): Likewise.\n\t(mmix_print_operand): Likewise.\n\t(mmix_output_shiftvalue_op_from_str): Likewise.\n\t(mmix_output_shifted_value): Likewise.\n\t* config/msp430/driver-msp430.cc (msp430_select_hwmult_lib): Likewise.\n\t* config/msp430/msp430.cc (msp430_option_override): Likewise.\n\t(msp430_attr): Likewise.\n\t(msp430_expand_delay_cycles): Likewise.\n\t(msp430_expand_builtin): Likewise.\n\t* config/rs6000/aix73.h: Likewise.\n\t* config/rs6000/rtems.h (INVALID_64BIT): Likewise.\n\t* config/rx/rx.cc (rx_expand_builtin_mvtc): Likewise.\n\t(valid_psw_flag): Likewise.\n\t* config/sh/sh.cc (parse_validate_atomic_model_option): Likewise.\n\t* config/stormy16/stormy16.cc (xstormy16_function_profiler): Likewise.\n\t(xstormy16_expand_builtin_va_start): Likewise.\n\t(xstormy16_handle_below100_attribute): Likewise.", "tree": {"sha": "adc84fc404276b2f61788a52a6e7638bab6fe80b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adc84fc404276b2f61788a52a6e7638bab6fe80b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58385f6ace42d17da5a73cb9b68ce6173295840f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58385f6ace42d17da5a73cb9b68ce6173295840f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58385f6ace42d17da5a73cb9b68ce6173295840f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58385f6ace42d17da5a73cb9b68ce6173295840f/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88619b5b4cc7de9ca7f5d62fcbb759a846b0397d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88619b5b4cc7de9ca7f5d62fcbb759a846b0397d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88619b5b4cc7de9ca7f5d62fcbb759a846b0397d"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "d81c7f28f16af87a9b4a668d919565b221e3e4a5", "filename": "gcc/collect2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fcollect2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fcollect2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -2552,7 +2552,7 @@ scan_libraries (const char *prog_name)\n \n   pex = pex_init (PEX_USE_PIPES, \"collect2\", NULL);\n   if (pex == NULL)\n-    fatal_error (input_location, \"pex_init failed: %m\");\n+    fatal_error (input_location, \"%<pex_init%> failed: %m\");\n \n   errmsg = pex_run (pex, 0, ldd_file_name, real_ldd_argv, NULL, NULL, &err);\n   if (errmsg != NULL)"}, {"sha": "b7f338d622960eebb0ab8800b5d810a2d3ee8098", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -1943,7 +1943,7 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n \t}\n       else\n \terror_at (EXPR_LOCATION (exp),\n-\t\t  \"total size and element size must be a non-zero \"\n+\t\t  \"total size and element size must be a nonzero \"\n \t\t  \"constant immediate\");\n       /* Don't generate any RTL.  */\n       return const0_rtx;"}, {"sha": "ace3cb70424d511eee53943626960e46d332dae8", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -4666,7 +4666,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   /* Keep this message in sync with the one in arc.cc:arc_expand_builtin,\n      because *.md files do not get scanned by exgettext.  */\n   fatal_error (input_location,\n-\t       \\\"operand to trap_s should be an unsigned 6-bit value\\\");\n+\t       \\\"operand to %<trap_s%> should be an unsigned 6-bit value\\\");\n }\n   [(set_attr \"length\" \"2\")\n   (set_attr \"type\" \"misc\")])"}, {"sha": "4ed390e4cf9ec39c97c2dc67da48defa5dcf4f3e", "filename": "gcc/config/avr/avr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Favr%2Favr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Favr%2Favr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -10195,7 +10195,7 @@ avr_section_type_flags (tree decl, const char *name, int reloc)\n \tflags |= SECTION_BSS;  /* @nobits */\n       else\n \twarning (0, \"only uninitialized variables can be placed in the \"\n-\t\t \".noinit section\");\n+\t\t \"%<.noinit%> section\");\n     }\n \n   if (decl && DECL_P (decl)"}, {"sha": "c749b4894d7de6b1f9714a93d9dccf432734a5dd", "filename": "gcc/config/bfin/bfin.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fbfin%2Fbfin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fbfin%2Fbfin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -2382,10 +2382,10 @@ bfin_option_override (void)\n     }\n \n   if (stack_limit_rtx && TARGET_STACK_CHECK_L1)\n-    error (\"can%'t use multiple stack checking methods together\");\n+    error (\"cannot use multiple stack checking methods together\");\n \n   if (TARGET_ID_SHARED_LIBRARY && TARGET_FDPIC)\n-    error (\"ID shared libraries and FD-PIC mode can%'t be used together\");\n+    error (\"ID shared libraries and FD-PIC mode cannot be used together\");\n \n   /* Don't allow the user to specify -mid-shared-library and -msep-data\n      together, as it makes little sense from a user's point of view...  */\n@@ -2419,7 +2419,7 @@ bfin_option_override (void)\n     error (\"%<-mcoreb%> should be used with %<-mmulticore%>\");\n \n   if (TARGET_COREA && TARGET_COREB)\n-    error (\"%<-mcorea%> and %<-mcoreb%> can%'t be used together\");\n+    error (\"%<-mcorea%> and %<-mcoreb%> cannot be used together\");\n \n   flag_schedule_insns = 0;\n \n@@ -4763,7 +4763,7 @@ bfin_handle_longcall_attribute (tree *node, tree name,\n \t  && lookup_attribute (\"longcall\", TYPE_ATTRIBUTES (*node))))\n     {\n       warning (OPT_Wattributes,\n-\t       \"can%'t apply both longcall and shortcall attributes to the same function\");\n+\t       \"cannott apply both longcall and shortcall attributes to the same function\");\n       *no_add_attrs = true;\n     }\n "}, {"sha": "b274e11662034c8b5e326f7d7cb9c97e9d53d5a8", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -663,7 +663,7 @@ struct cum_args {int regs;};\n /* Node: Profiling */\n \n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n- error (\"no FUNCTION_PROFILER for CRIS\")\n+ error (\"no %<FUNCTION_PROFILER%> for CRIS\")\n \n /* FIXME: Some of the undefined macros might be mandatory.  If so, fix\n    documentation.  */"}, {"sha": "6f1904b358cd3a63ef8ae145e2dc011a82977d3c", "filename": "gcc/config/frv/frv.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Ffrv%2Ffrv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Ffrv%2Ffrv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -9134,7 +9134,7 @@ frv_expand_builtin (tree exp,\n     case FRV_BUILTIN_IACCsetl:\n       if (!TARGET_FR405_BUILTINS)\n \t{\n-\t  error (\"this builtin function is only available\"\n+\t  error (\"this built-in function is only available\"\n \t\t \" on the fr405 and fr450\");\n \t  return NULL_RTX;\n \t}\n@@ -9143,7 +9143,7 @@ frv_expand_builtin (tree exp,\n     case FRV_BUILTIN_PREFETCH:\n       if (!TARGET_FR500_FR550_BUILTINS)\n \t{\n-\t  error (\"this builtin function is only available on the fr500\"\n+\t  error (\"this built-in function is only available on the fr500\"\n \t\t \" and fr550\");\n \t  return NULL_RTX;\n \t}\n@@ -9155,7 +9155,7 @@ frv_expand_builtin (tree exp,\n     case FRV_BUILTIN_MQSRAHI:\n       if (!TARGET_MEDIA_FR450)\n \t{\n-\t  error (\"this builtin function is only available on the fr450\");\n+\t  error (\"this built-in function is only available on the fr450\");\n \t  return NULL_RTX;\n \t}\n       break;"}, {"sha": "fa1b3817d93fb9b5bb05d17df96bb45a851655d9", "filename": "gcc/config/ia64/ia64-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fia64%2Fia64-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fia64%2Fia64-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-c.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -47,7 +47,7 @@ ia64_hpux_handle_builtin_pragma (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \ttype = pragma_lex (&x);\n     }\n   if (type != CPP_EOF)\n-    warning (OPT_Wpragmas, \"malformed #pragma builtin\");\n+    warning (OPT_Wpragmas, \"malformed %<#pragma builtin%>\");\n }\n \n /* List of standard math functions which do not set matherr by default"}, {"sha": "062734102ba76ce01ecc2b059c27f309ede506f3", "filename": "gcc/config/iq2000/iq2000.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fiq2000%2Fiq2000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fiq2000%2Fiq2000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -1864,7 +1864,7 @@ save_restore_insns (int store_p)\n \n   if (gp_offset < 0 || end_offset < 0)\n     internal_error\n-      (\"gp_offset (%ld) or end_offset (%ld) is less than zero\",\n+      (\"%<gp_offset%> (%ld) or %<end_offset%> (%ld) is less than zero\",\n        (long) gp_offset, (long) end_offset);\n \n   else if (gp_offset < 32768)\n@@ -2890,7 +2890,7 @@ static void\n iq2000_print_operand_address (FILE * file, machine_mode mode, rtx addr)\n {\n   if (!addr)\n-    error (\"PRINT_OPERAND_ADDRESS, null pointer\");\n+    error (\"%<PRINT_OPERAND_ADDRESS%>, null pointer\");\n \n   else\n     switch (GET_CODE (addr))\n@@ -3045,7 +3045,7 @@ iq2000_print_operand (FILE *file, rtx op, int letter)\n \t  break;\n \n \tdefault:\n-\t  error (\"PRINT_OPERAND: Unknown punctuation %<%c%>\", letter);\n+\t  error (\"%<PRINT_OPERAND%>: Unknown punctuation %<%c%>\", letter);\n \t  break;\n \t}\n \n@@ -3054,7 +3054,7 @@ iq2000_print_operand (FILE *file, rtx op, int letter)\n \n   if (! op)\n     {\n-      error (\"PRINT_OPERAND null pointer\");\n+      error (\"%<PRINT_OPERAND%> null pointer\");\n       return;\n     }\n "}, {"sha": "c7d01a99d1420c9480d62b0de16c9f7d60eaf3b1", "filename": "gcc/config/m32c/m32c-pragma.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -51,29 +51,29 @@ m32c_pragma_memregs (cpp_reader * reader ATTRIBUTE_UNUSED)\n \n \t  type = pragma_lex (&val);\n \t  if (type != CPP_EOF)\n-\t    warning (0, \"junk at end of #pragma GCC memregs [0..16]\");\n+\t    warning (0, \"junk at end of %<#pragma GCC memregs%> [0-16]\");\n \n \t  if (i >= 0 && i <= 16)\n \t    {\n \t      if (!ok_to_change_target_memregs)\n \t\t{\n \t\t  warning (0,\n-\t\t\t   \"#pragma GCC memregs must precede any function decls\");\n+\t\t\t   \"%<#pragma GCC memregs%> must precede any function declarations\");\n \t\t  return;\n \t\t}\n \t      target_memregs = i;\n \t      m32c_conditional_register_usage ();\n \t    }\n \t  else\n \t    {\n-\t      warning (0, \"#pragma GCC memregs takes a number [0..16]\");\n+\t      warning (0, \"%<#pragma GCC memregs%> takes a number [0-16]\");\n \t    }\n \n \t  return;\n \t}\n     }\n \n-  error (\"#pragma GCC memregs takes a number [0..16]\");\n+  error (\"%<#pragma GCC memregs%> takes a number [0-16]\");\n }\n \n /* Implements the \"pragma ADDRESS\" pragma.  This pragma takes a\n@@ -101,12 +101,12 @@ m32c_pragma_address (cpp_reader * reader ATTRIBUTE_UNUSED)\n \t  type = pragma_lex (&var);\n \t  if (type != CPP_EOF)\n \t    {\n-\t      error (\"junk at end of #pragma ADDRESS\");\n+\t      error (\"junk at end of %<#pragma ADDRESS%>\");\n \t    }\n \t  return;\n \t}\n     }\n-  error (\"malformed #pragma ADDRESS variable address\");\n+  error (\"malformed %<#pragma ADDRESS%> variable address\");\n }\n \n /* Implements REGISTER_TARGET_PRAGMAS.  */"}, {"sha": "62898dafe92721ea2a9e6ba413cb3072867f561a", "filename": "gcc/config/m68k/m68k.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fm68k%2Fm68k.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fm68k%2Fm68k.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -803,7 +803,7 @@ m68k_handle_fndecl_attribute (tree *node, tree name,\n   if (!TARGET_FIDOA\n       && !strcmp (IDENTIFIER_POINTER (name), \"interrupt_thread\"))\n     {\n-      error (\"interrupt_thread is available only on fido\");\n+      error (\"%<interrupt_thread%> is available only on fido\");\n       *no_add_attrs = true;\n     }\n "}, {"sha": "4f9683e8bf4305af8b819ebbfa810afed8f33152", "filename": "gcc/config/mips/mips.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fmips%2Fmips.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fmips%2Fmips.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -1519,7 +1519,7 @@ mips_handle_interrupt_attr (tree *node ATTRIBUTE_UNUSED, tree name, tree args,\n \t{\n \t  warning (OPT_Wattributes,\n \t\t   \"argument to %qE attribute is neither eic, nor \"\n-\t\t   \"vector=<line>\", name);\n+\t\t   \"%<vector=<line>%>\", name);\n \t  *no_add_attrs = true;\n \t}\n       else if (startswith (TREE_STRING_POINTER (cst), \"vector=\"))\n@@ -1535,7 +1535,7 @@ mips_handle_interrupt_attr (tree *node ATTRIBUTE_UNUSED, tree name, tree args,\n \t    {\n \t      warning (OPT_Wattributes,\n \t\t       \"interrupt vector to %qE attribute is not \"\n-\t\t       \"vector=(sw0|sw1|hw0|hw1|hw2|hw3|hw4|hw5)\",\n+\t\t       \"%<vector=(sw0|sw1|hw0|hw1|hw2|hw3|hw4|hw5)%>\",\n \t\t       name);\n \t      *no_add_attrs = true;\n \t    }\n@@ -19712,7 +19712,7 @@ mips_set_compression_mode (unsigned int compression_mode)\n \tsorry (\"MIPS16 %<-mxgot%> code\");\n \n       if (TARGET_HARD_FLOAT_ABI && !TARGET_OLDABI)\n-\tsorry (\"hard-float MIPS16 code for ABIs other than o32 and o64\");\n+\tsorry (\"%<hard-float%> MIPS16 code for ABIs other than o32 and o64\");\n \n       if (TARGET_MSA)\n \tsorry (\"MSA MIPS16 code\");"}, {"sha": "439ae8f044f3b7e4344e80f8d73d7f0908f1a04a", "filename": "gcc/config/mmix/mmix.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fmmix%2Fmmix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fmmix%2Fmmix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -977,7 +977,7 @@ void\n mmix_function_profiler (FILE *stream ATTRIBUTE_UNUSED,\n \t\t\tint labelno ATTRIBUTE_UNUSED)\n {\n-  sorry (\"function_profiler support for MMIX\");\n+  sorry (\"%<function_profiler%> support for MMIX\");\n }\n \n /* Worker function for TARGET_SETUP_INCOMING_VARARGS.  For the moment,\n@@ -1763,7 +1763,7 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n \n     default:\n       /* Presumably there's a missing case above if we get here.  */\n-      internal_error (\"MMIX Internal: Missing %qc case in mmix_print_operand\", code);\n+      internal_error (\"MMIX Internal: Missing %qc case in %<mmix_print_operand%>\", code);\n     }\n \n   switch (GET_CODE (modified_x))\n@@ -2591,7 +2591,7 @@ mmix_output_shiftvalue_op_from_str (FILE *stream,\n     {\n       char s[sizeof (\"0xffffffffffffffff\")];\n       sprintf (s, \"%#\" PRIx64, value);\n-      internal_error (\"MMIX Internal: %s is not a shiftable int\", s);\n+      internal_error (\"MMIX Internal: %s is not a shiftable integer\", s);\n     }\n \n   for (i = 0; i < 4; i++)\n@@ -2650,7 +2650,7 @@ mmix_output_shifted_value (FILE *stream, int64_t value)\n     {\n       char s[16+2+1];\n       sprintf (s, \"%#\" PRIx64, value);\n-      internal_error (\"MMIX Internal: %s is not a shiftable int\", s);\n+      internal_error (\"MMIX Internal: %s is not a shiftable integer\", s);\n     }\n \n   for (i = 0; i < 4; i++)"}, {"sha": "b4bff424f55a3d8451cc222a2611243748c04e7b", "filename": "gcc/config/msp430/driver-msp430.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fdriver-msp430.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -89,7 +89,7 @@ msp430_select_hwmult_lib (int argc ATTRIBUTE_UNUSED,\n     {\n     case 1:\n       if (strcasecmp (argv[0], \"default\"))\n-\terror (\"unexpected argument to msp430_select_hwmult_lib: %s\", argv[0]);\n+\terror (\"unexpected argument to %<msp430_select_hwmult_lib%>: %s\", argv[0]);\n       break;\n \n     default:\n@@ -138,12 +138,12 @@ msp430_select_hwmult_lib (int argc ATTRIBUTE_UNUSED,\n \t    }\n \t}\n       else\n-\terror (\"unexpected first argument to msp430_select_hwmult_lib: %s\",\n+\terror (\"unexpected first argument to %<msp430_select_hwmult_lib%>: %s\",\n \t       argv[0]);\n       break;\n \n     case 0:\n-      error (\"msp430_select_hwmult_lib needs one or more arguments\");\n+      error (\"%<msp430_select_hwmult_lib%> needs one or more arguments\");\n       break;\n     }\n "}, {"sha": "eb219fd5e71bd57bfc36eda1ff4756a271041a3b", "filename": "gcc/config/msp430/msp430.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fmsp430%2Fmsp430.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fmsp430%2Fmsp430.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -222,16 +222,16 @@ msp430_option_override (void)\n \t\t{\n \t\t  if (target_cpu == MSP430_CPU_MSP430X_DEFAULT)\n \t\t    warning (0,\n-\t\t\t     \"Unrecognized MCU name %qs, assuming that it is \"\n-\t\t\t     \"just a MSP430X with no hardware multiply.\\n\"\n-\t\t\t     \"Use the %<-mcpu%> and %<-mhwmult%> options to \"\n-\t\t\t     \"set these explicitly.\",\n+\t\t\t     \"unrecognized MCU name %qs, assuming that it is \"\n+\t\t\t     \"just a MSP430X with no hardware multiply; \"\n+\t\t\t     \"use the %<-mcpu%> and %<-mhwmult%> options to \"\n+\t\t\t     \"set these explicitly\",\n \t\t\t     target_mcu);\n \t\t  else\n \t\t    warning (0,\n-\t\t\t     \"Unrecognized MCU name %qs, assuming that it \"\n-\t\t\t     \"has no hardware multiply.\\nUse the %<-mhwmult%> \"\n-\t\t\t     \"option to set this explicitly.\",\n+\t\t\t     \"unrecognized MCU name %qs, assuming that it \"\n+\t\t\t     \"has no hardware multiply; use the %<-mhwmult%> \"\n+\t\t\t     \"option to set this explicitly\",\n \t\t\t     target_mcu);\n \t\t}\n \n@@ -241,9 +241,9 @@ msp430_option_override (void)\n \t    {\n \t      if (msp430_warn_mcu)\n \t\twarning (0,\n-\t\t\t \"Unrecognized MCU name %qs, assuming that it just \"\n-\t\t\t \"supports the MSP430X ISA.\\nUse the %<-mcpu%> option \"\n-\t\t\t \"to set the ISA explicitly.\",\n+\t\t\t \"unrecognized MCU name %qs, assuming that it just \"\n+\t\t\t \"supports the MSP430X ISA; use the %<-mcpu%> option \"\n+\t\t\t \"to set the ISA explicitly\",\n \t\t\t target_mcu);\n \t    }\n \t  else if (msp430_warn_mcu)\n@@ -1901,7 +1901,7 @@ msp430_attr (tree * node,\n \t    /* Allow the attribute to be added - the linker script\n \t       being used may still recognise this value.  */\n \t    warning (OPT_Wattributes,\n-\t\t     \"numeric argument of %qE attribute must be in range 0..63\",\n+\t\t     \"numeric argument of %qE attribute must be in range [0-63]\",\n \t\t     name);\n \t  break;\n \n@@ -2744,7 +2744,7 @@ msp430_expand_delay_cycles (rtx arg)\n \n   if (GET_CODE (arg) != CONST_INT)\n     {\n-      error (\"__delay_cycles() only takes constant arguments\");\n+      error (\"%<__delay_cycles()%> only takes constant arguments\");\n       return NULL_RTX;\n     }\n \n@@ -2754,7 +2754,7 @@ msp430_expand_delay_cycles (rtx arg)\n     {\n       if (c < 0)\n \t{\n-\t  error (\"__delay_cycles only takes non-negative cycle counts\");\n+\t  error (\"%<__delay_cycles%> only takes non-negative cycle counts\");\n \t  return NULL_RTX;\n \t}\n     }\n@@ -2775,7 +2775,7 @@ msp430_expand_delay_cycles (rtx arg)\n \t  c %= 4;\n \t  if ((unsigned long long) i > 0xffffffffULL)\n \t    {\n-\t      error (\"__delay_cycles is limited to 32-bit loop counts\");\n+\t      error (\"%<__delay_cycles%> is limited to 32-bit loop counts\");\n \t      return NULL_RTX;\n \t    }\n \t}\n@@ -2846,7 +2846,7 @@ msp430_expand_builtin (tree exp,\n \n   if (! msp430_is_interrupt_func ())\n     {\n-      error (\"MSP430 builtin functions only work inside interrupt handlers\");\n+      error (\"MSP430 built-in functions only work inside interrupt handlers\");\n       return NULL_RTX;\n     }\n "}, {"sha": "0b847900d3ac5199c60000418c3092472f226af7", "filename": "gcc/config/rs6000/aix73.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Frs6000%2Faix73.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Frs6000%2Faix73.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix73.h?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -34,7 +34,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_long_double_type_size = 64;\t\t\t\t\\\n       if (OPTION_SET_P (rs6000_long_double_type_size))\t\t\\\n-\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+\twarning (0, \"%<soft-float%> and long-double-128 are incompatible\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "8aa41d5448dca8f5fa0c9a0dddca36fee28a6e9a", "filename": "gcc/config/rs6000/rtems.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Frs6000%2Frtems.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Frs6000%2Frtems.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frtems.h?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -82,7 +82,7 @@\n #define\tRS6000_ABI_NAME \"linux\"\n \n /* Copy and paste from linux64.h and freebsd64.h */\n-#define INVALID_64BIT \"-m%s not supported in this configuration\"\n+#define INVALID_64BIT \"%<-m%s%> not supported in this configuration\"\n \n /* A lot of copy and paste from linux64.h and freebsd64.h */\n #undef\tSUBSUBTARGET_OVERRIDE_OPTIONS"}, {"sha": "7c3975e63dd199da88c3193cba4f2c799e2caa33", "filename": "gcc/config/rx/rx.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Frx%2Frx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Frx%2Frx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -2477,7 +2477,7 @@ rx_expand_builtin_mvtc (tree exp)\n \n   if (INTVAL (arg1) == 1)\n     {\n-      warning (0, \"invalid control register for mvtc : %d - using 'psw'\",\n+      warning (0, \"invalid control register for mvtc: %d - using 'psw'\",\n \t       (int) INTVAL (arg1));\n       arg1 = const0_rtx;\n     }\n@@ -2602,7 +2602,7 @@ valid_psw_flag (rtx op, const char *which)\n   error (\"%<__builtin_rx_%s%> takes %<C%>, %<Z%>, %<S%>, %<O%>, %<I%>, \"\n \t \"or %<U%>\", which);\n   if (!mvtc_inform_done)\n-    error (\"use %<__builtin_rx_mvtc%> (0, ... ) to write arbitrary values to PSW\");\n+    error (\"use %<__builtin_rx_mvtc (0, ... )%> to write arbitrary values to PSW\");\n   mvtc_inform_done = 1;\n \n   return 0;"}, {"sha": "8d4056338a54f2b327ba504d50e4dfe92a636e12", "filename": "gcc/config/sh/sh.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fsh%2Fsh.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fsh%2Fsh.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -728,7 +728,7 @@ parse_validate_atomic_model_option (const char* str)\n \t  goto got_mode_name;\n \t}\n \n-    err_ret (\"invalid atomic model name \\\"%s\\\"\", tokens.front ().c_str ());\n+    err_ret (\"invalid atomic model name %qs\", tokens.front ().c_str ());\n got_mode_name:;\n   }\n \n@@ -742,11 +742,11 @@ got_mode_name:;\n \t  std::string offset_str = tokens[i].substr (strlen (\"gbr-offset=\"));\n \t  ret.tcb_gbr_offset = integral_argument (offset_str.c_str ());\n \t  if (offset_str.empty () || ret.tcb_gbr_offset == -1)\n-\t    err_ret (\"could not parse gbr-offset value \\\"%s\\\" in atomic model \"\n+\t    err_ret (\"could not parse gbr-offset value %qs in atomic model \"\n \t\t     \"option\", offset_str.c_str ());\n \t}\n       else\n-\terr_ret (\"unknown parameter \\\"%s\\\" in atomic model option\",\n+\terr_ret (\"unknown parameter %qs in atomic model option\",\n \t\t tokens[i].c_str ());\n     }\n "}, {"sha": "fabf09ab9a055034adf7041ac4f2ffd6d3e729d1", "filename": "gcc/config/stormy16/stormy16.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fstormy16%2Fstormy16.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58385f6ace42d17da5a73cb9b68ce6173295840f/gcc%2Fconfig%2Fstormy16%2Fstormy16.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.cc?ref=58385f6ace42d17da5a73cb9b68ce6173295840f", "patch": "@@ -1212,7 +1212,7 @@ xstormy16_epilogue_uses (int regno)\n void\n xstormy16_function_profiler (void)\n {\n-  sorry (\"function_profiler support\");\n+  sorry (\"%<function_profiler%> support\");\n }\n \f\n /* Update CUM to advance past argument ARG.  Once this is done,\n@@ -1306,7 +1306,7 @@ xstormy16_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n   tree t,u;\n \n   if (xstormy16_interrupt_function_p ())\n-    error (\"cannot use va_start in interrupt function\");\n+    error (\"cannot use %<va_start%> in interrupt function\");\n \n   f_base = TYPE_FIELDS (va_list_type_node);\n   f_count = DECL_CHAIN (f_base);\n@@ -2256,7 +2256,7 @@ xstormy16_handle_below100_attribute (tree *node,\n     {\n       if (! (TREE_PUBLIC (*node) || TREE_STATIC (*node)))\n \t{\n-\t  warning (OPT_Wattributes, \"__BELOW100__ attribute not allowed \"\n+\t  warning (OPT_Wattributes, \"%<__BELOW100__%> attribute not allowed \"\n \t\t   \"with auto storage class\");\n \t  *no_add_attrs = true;\n \t}"}]}