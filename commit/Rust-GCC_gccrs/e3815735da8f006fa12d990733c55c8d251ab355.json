{"sha": "e3815735da8f006fa12d990733c55c8d251ab355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM4MTU3MzVkYThmMDA2ZmExMmQ5OTA3MzNjNTVjOGQyNTFhYjM1NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-11-29T13:53:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-11-29T13:53:42Z"}, "message": "tree-ssa-pre.c (get_expr_value_id): Do not add expr to the set of value expressions here.\n\n2012-11-29  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (get_expr_value_id): Do not add expr\n\tto the set of value expressions here.\n\t(add_to_exp_gen, make_values_for_phi): Fold into ...\n\t(compute_avail): ... here, and avoid useless work.  Dump\n\tavail sets in processing order.\n\t(do_pre): Do not dump avail sets here.\n\nFrom-SVN: r193933", "tree": {"sha": "92d4a4969ea735f30246f83718412024e0382063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92d4a4969ea735f30246f83718412024e0382063"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3815735da8f006fa12d990733c55c8d251ab355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3815735da8f006fa12d990733c55c8d251ab355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3815735da8f006fa12d990733c55c8d251ab355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3815735da8f006fa12d990733c55c8d251ab355/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88f519b295d8f41ed0b12704ea1701d8df1c78ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f519b295d8f41ed0b12704ea1701d8df1c78ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f519b295d8f41ed0b12704ea1701d8df1c78ae"}], "stats": {"total": 134, "additions": 61, "deletions": 73}, "files": [{"sha": "b45e6e32db4b19f21e459e1cd94beaad5c665433", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3815735da8f006fa12d990733c55c8d251ab355/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3815735da8f006fa12d990733c55c8d251ab355/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3815735da8f006fa12d990733c55c8d251ab355", "patch": "@@ -1,3 +1,12 @@\n+2012-11-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (get_expr_value_id): Do not add expr\n+\tto the set of value expressions here.\n+\t(add_to_exp_gen, make_values_for_phi): Fold into ...\n+\t(compute_avail): ... here, and avoid useless work.  Dump\n+\tavail sets in processing order.\n+\t(do_pre): Do not dump avail sets here.\n+\n 2012-11-29  Matthew Gretton-Dann  <matthew.gretton-dann@linaro.org>\n \n \tPR target/54974"}, {"sha": "9cf874df7b73910add8b41e16f1137846c642b33", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 52, "deletions": 73, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3815735da8f006fa12d990733c55c8d251ab355/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3815735da8f006fa12d990733c55c8d251ab355/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=e3815735da8f006fa12d990733c55c8d251ab355", "patch": "@@ -612,28 +612,28 @@ bitmap_set_new (void)\n static unsigned int\n get_expr_value_id (pre_expr expr)\n {\n+  unsigned int id;\n   switch (expr->kind)\n     {\n     case CONSTANT:\n-      {\n-\tunsigned int id;\n-\tid = get_constant_value_id (PRE_EXPR_CONSTANT (expr));\n-\tif (id == 0)\n-\t  {\n-\t    id = get_or_alloc_constant_value_id (PRE_EXPR_CONSTANT (expr));\n-\t    add_to_value (id, expr);\n-\t  }\n-\treturn id;\n-      }\n+      id = get_or_alloc_constant_value_id (PRE_EXPR_CONSTANT (expr));\n+      break;\n     case NAME:\n-      return VN_INFO (PRE_EXPR_NAME (expr))->value_id;\n+      id = VN_INFO (PRE_EXPR_NAME (expr))->value_id;\n+      break;\n     case NARY:\n-      return PRE_EXPR_NARY (expr)->value_id;\n+      id = PRE_EXPR_NARY (expr)->value_id;\n+      break;\n     case REFERENCE:\n-      return PRE_EXPR_REFERENCE (expr)->value_id;\n+      id = PRE_EXPR_REFERENCE (expr)->value_id;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n+  /* ???  We cannot assert that expr has a value-id (it can be 0), because\n+     we assign value-ids only to expressions that have a result\n+     in set_hashtable_value_ids.  */\n+  return id;\n }\n \n /* Return a SCCVN valnum (SSA name or constant) for the PRE value-id VAL.  */\n@@ -3624,48 +3624,6 @@ insert (void)\n }\n \n \n-/* Add OP to EXP_GEN (block), and possibly to the maximal set.  */\n-\n-static void\n-add_to_exp_gen (basic_block block, tree op)\n-{\n-  pre_expr result;\n-\n-  if (TREE_CODE (op) == SSA_NAME && ssa_undefined_value_p (op))\n-    return;\n-\n-  result = get_or_alloc_expr_for_name (op);\n-  bitmap_value_insert_into_set (EXP_GEN (block), result);\n-}\n-\n-/* Create value ids for PHI in BLOCK.  */\n-\n-static void\n-make_values_for_phi (gimple phi, basic_block block)\n-{\n-  tree result = gimple_phi_result (phi);\n-  unsigned i;\n-\n-  /* We have no need for virtual phis, as they don't represent\n-     actual computations.  */\n-  if (virtual_operand_p (result))\n-    return;\n-\n-  pre_expr e = get_or_alloc_expr_for_name (result);\n-  add_to_value (get_expr_value_id (e), e);\n-  bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n-  bitmap_insert_into_set (PHI_GEN (block), e);\n-  for (i = 0; i < gimple_phi_num_args (phi); ++i)\n-    {\n-      tree arg = gimple_phi_arg_def (phi, i);\n-      if (TREE_CODE (arg) == SSA_NAME)\n-\t{\n-\t  e = get_or_alloc_expr_for_name (arg);\n-\t  add_to_value (get_expr_value_id (e), e);\n-\t}\n-    }\n-}\n-\n /* Compute the AVAIL set for all basic blocks.\n \n    This function performs value numbering of the statements in each basic\n@@ -3703,6 +3661,14 @@ compute_avail (void)\n       bitmap_value_insert_into_set (AVAIL_OUT (ENTRY_BLOCK_PTR), e);\n     }\n \n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      print_bitmap_set (dump_file, TMP_GEN (ENTRY_BLOCK_PTR),\n+\t\t\t\"tmp_gen\", ENTRY_BLOCK);\n+      print_bitmap_set (dump_file, AVAIL_OUT (ENTRY_BLOCK_PTR),\n+\t\t\t\"avail_out\", ENTRY_BLOCK);\n+    }\n+\n   /* Allocate the worklist.  */\n   worklist = XNEWVEC (basic_block, n_basic_blocks);\n \n@@ -3731,7 +3697,19 @@ compute_avail (void)\n \n       /* Generate values for PHI nodes.  */\n       for (gsi = gsi_start_phis (block); !gsi_end_p (gsi); gsi_next (&gsi))\n-\tmake_values_for_phi (gsi_stmt (gsi), block);\n+\t{\n+\t  tree result = gimple_phi_result (gsi_stmt (gsi));\n+\n+\t  /* We have no need for virtual phis, as they don't represent\n+\t     actual computations.  */\n+\t  if (virtual_operand_p (result))\n+\t    continue;\n+\n+\t  pre_expr e = get_or_alloc_expr_for_name (result);\n+\t  add_to_value (get_expr_value_id (e), e);\n+\t  bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n+\t  bitmap_insert_into_set (PHI_GEN (block), e);\n+\t}\n \n       BB_MAY_NOTRETURN (block) = 0;\n \n@@ -3775,7 +3753,12 @@ compute_avail (void)\n \t    continue;\n \n \t  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n-\t    add_to_exp_gen (block, op);\n+\t    {\n+\t      if (ssa_undefined_value_p (op))\n+\t\tcontinue;\n+\t      pre_expr e = get_or_alloc_expr_for_name (op);\n+\t      bitmap_value_insert_into_set (EXP_GEN (block), e);\n+\t    }\n \n \t  switch (gimple_code (stmt))\n \t    {\n@@ -3911,6 +3894,18 @@ compute_avail (void)\n \t    }\n \t}\n \n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  print_bitmap_set (dump_file, EXP_GEN (block),\n+\t\t\t    \"exp_gen\", block->index);\n+\t  print_bitmap_set (dump_file, PHI_GEN (block),\n+\t\t\t    \"phi_gen\", block->index);\n+\t  print_bitmap_set (dump_file, TMP_GEN (block),\n+\t\t\t    \"tmp_gen\", block->index);\n+\t  print_bitmap_set (dump_file, AVAIL_OUT (block),\n+\t\t\t    \"avail_out\", block->index);\n+\t}\n+\n       /* Put the dominator children of BLOCK on the worklist of blocks\n \t to compute available sets for.  */\n       for (son = first_dom_son (CDI_DOMINATORS, block);\n@@ -4667,22 +4662,6 @@ do_pre (void)\n   /* Collect and value number expressions computed in each basic block.  */\n   compute_avail ();\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    {\n-      basic_block bb;\n-      FOR_ALL_BB (bb)\n-\t{\n-\t  print_bitmap_set (dump_file, EXP_GEN (bb),\n-\t\t\t    \"exp_gen\", bb->index);\n-\t  print_bitmap_set (dump_file, PHI_GEN (bb),\n-\t\t\t    \"phi_gen\", bb->index);\n-\t  print_bitmap_set (dump_file, TMP_GEN (bb),\n-\t\t\t    \"tmp_gen\", bb->index);\n-\t  print_bitmap_set (dump_file, AVAIL_OUT (bb),\n-\t\t\t    \"avail_out\", bb->index);\n-\t}\n-    }\n-\n   /* Insert can get quite slow on an incredibly large number of basic\n      blocks due to some quadratic behavior.  Until this behavior is\n      fixed, don't run it when he have an incredibly large number of"}]}