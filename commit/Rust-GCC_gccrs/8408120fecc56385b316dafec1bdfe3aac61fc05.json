{"sha": "8408120fecc56385b316dafec1bdfe3aac61fc05", "node_id": "C_kwDOANBUbNoAKDg0MDgxMjBmZWNjNTYzODViMzE2ZGFmZWMxYmRmZTNhYWM2MWZjMDU", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-11-07T08:07:27Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-11-07T08:07:27Z"}, "message": "vect: Fold LEN_{LOAD,STORE} if it's for the whole vector [PR107412]\n\nAs the test case in PR107412 shows, we can fold IFN .LEN_{LOAD,\nSTORE} into normal vector load/store if the given length is known\nto be equal to the length of the whole vector.  It would help to\nimprove overall cycles as normally the latency of vector access\nwith length in bytes is bigger than normal vector access, and it\nalso saves the preparation for length if constant length can not\nbe encoded into instruction (such as on power).\n\n\tPR tree-optimization/107412\n\ngcc/ChangeLog:\n\n\t* gimple-fold.cc (gimple_fold_mask_load_store_mem_ref): Rename to ...\n\t(gimple_fold_partial_load_store_mem_ref): ... this, add one parameter\n\tmask_p indicating it's for mask or length, and add some handlings for\n\tIFN LEN_{LOAD,STORE}.\n\t(gimple_fold_mask_load): Rename to ...\n\t(gimple_fold_partial_load): ... this, add one parameter mask_p.\n\t(gimple_fold_mask_store): Rename to ...\n\t(gimple_fold_partial_store): ... this, add one parameter mask_p.\n\t(gimple_fold_call): Add the handlings for IFN LEN_{LOAD,STORE},\n\tand adjust calls on gimple_fold_mask_load_store_mem_ref to\n\tgimple_fold_partial_load_store_mem_ref.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr107412.c: New test.\n\t* gcc.target/powerpc/p9-vec-length-epil-8.c: Adjust scan times for\n\tfolded LEN_LOAD.", "tree": {"sha": "e3908485afbce699af140ca7636af383e498c266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3908485afbce699af140ca7636af383e498c266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8408120fecc56385b316dafec1bdfe3aac61fc05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8408120fecc56385b316dafec1bdfe3aac61fc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8408120fecc56385b316dafec1bdfe3aac61fc05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8408120fecc56385b316dafec1bdfe3aac61fc05/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f8f8afd07680f9e718de1331cd09607bdd9ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f8f8afd07680f9e718de1331cd09607bdd9ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4f8f8afd07680f9e718de1331cd09607bdd9ac8"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "410544c17bb12983c9c3745440df4329ad833a49", "filename": "gcc/gimple-fold.cc", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8408120fecc56385b316dafec1bdfe3aac61fc05/gcc%2Fgimple-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8408120fecc56385b316dafec1bdfe3aac61fc05/gcc%2Fgimple-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.cc?ref=8408120fecc56385b316dafec1bdfe3aac61fc05", "patch": "@@ -5370,36 +5370,58 @@ arith_overflowed_p (enum tree_code code, const_tree type,\n   return wi::min_precision (wres, sign) > TYPE_PRECISION (type);\n }\n \n-/* If IFN_MASK_LOAD/STORE call CALL is unconditional, return a MEM_REF\n+/* If IFN_{MASK,LEN}_LOAD/STORE call CALL is unconditional, return a MEM_REF\n    for the memory it references, otherwise return null.  VECTYPE is the\n-   type of the memory vector.  */\n+   type of the memory vector.  MASK_P indicates it's for MASK if true,\n+   otherwise it's for LEN.  */\n \n static tree\n-gimple_fold_mask_load_store_mem_ref (gcall *call, tree vectype)\n+gimple_fold_partial_load_store_mem_ref (gcall *call, tree vectype, bool mask_p)\n {\n   tree ptr = gimple_call_arg (call, 0);\n   tree alias_align = gimple_call_arg (call, 1);\n-  tree mask = gimple_call_arg (call, 2);\n-  if (!tree_fits_uhwi_p (alias_align) || !integer_all_onesp (mask))\n+  if (!tree_fits_uhwi_p (alias_align))\n     return NULL_TREE;\n \n+  if (mask_p)\n+    {\n+      tree mask = gimple_call_arg (call, 2);\n+      if (!integer_all_onesp (mask))\n+\treturn NULL_TREE;\n+    } else {\n+      tree basic_len = gimple_call_arg (call, 2);\n+      if (!tree_fits_uhwi_p (basic_len))\n+\treturn NULL_TREE;\n+      unsigned int nargs = gimple_call_num_args (call);\n+      tree bias = gimple_call_arg (call, nargs - 1);\n+      gcc_assert (tree_fits_uhwi_p (bias));\n+      tree biased_len = int_const_binop (MINUS_EXPR, basic_len, bias);\n+      unsigned int len = tree_to_uhwi (biased_len);\n+      unsigned int vect_len\n+\t= GET_MODE_SIZE (TYPE_MODE (vectype)).to_constant ();\n+      if (vect_len != len)\n+\treturn NULL_TREE;\n+    }\n+\n   unsigned HOST_WIDE_INT align = tree_to_uhwi (alias_align);\n   if (TYPE_ALIGN (vectype) != align)\n     vectype = build_aligned_type (vectype, align);\n   tree offset = build_zero_cst (TREE_TYPE (alias_align));\n   return fold_build2 (MEM_REF, vectype, ptr, offset);\n }\n \n-/* Try to fold IFN_MASK_LOAD call CALL.  Return true on success.  */\n+/* Try to fold IFN_{MASK,LEN}_LOAD call CALL.  Return true on success.\n+   MASK_P indicates it's for MASK if true, otherwise it's for LEN.  */\n \n static bool\n-gimple_fold_mask_load (gimple_stmt_iterator *gsi, gcall *call)\n+gimple_fold_partial_load (gimple_stmt_iterator *gsi, gcall *call, bool mask_p)\n {\n   tree lhs = gimple_call_lhs (call);\n   if (!lhs)\n     return false;\n \n-  if (tree rhs = gimple_fold_mask_load_store_mem_ref (call, TREE_TYPE (lhs)))\n+  if (tree rhs\n+      = gimple_fold_partial_load_store_mem_ref (call, TREE_TYPE (lhs), mask_p))\n     {\n       gassign *new_stmt = gimple_build_assign (lhs, rhs);\n       gimple_set_location (new_stmt, gimple_location (call));\n@@ -5410,13 +5432,16 @@ gimple_fold_mask_load (gimple_stmt_iterator *gsi, gcall *call)\n   return false;\n }\n \n-/* Try to fold IFN_MASK_STORE call CALL.  Return true on success.  */\n+/* Try to fold IFN_{MASK,LEN}_STORE call CALL.  Return true on success.\n+   MASK_P indicates it's for MASK if true, otherwise it's for LEN.  */\n \n static bool\n-gimple_fold_mask_store (gimple_stmt_iterator *gsi, gcall *call)\n+gimple_fold_partial_store (gimple_stmt_iterator *gsi, gcall *call,\n+\t\t\t   bool mask_p)\n {\n   tree rhs = gimple_call_arg (call, 3);\n-  if (tree lhs = gimple_fold_mask_load_store_mem_ref (call, TREE_TYPE (rhs)))\n+  if (tree lhs\n+      = gimple_fold_partial_load_store_mem_ref (call, TREE_TYPE (rhs), mask_p))\n     {\n       gassign *new_stmt = gimple_build_assign (lhs, rhs);\n       gimple_set_location (new_stmt, gimple_location (call));\n@@ -5635,10 +5660,16 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t  cplx_result = true;\n \t  break;\n \tcase IFN_MASK_LOAD:\n-\t  changed |= gimple_fold_mask_load (gsi, stmt);\n+\t  changed |= gimple_fold_partial_load (gsi, stmt, true);\n \t  break;\n \tcase IFN_MASK_STORE:\n-\t  changed |= gimple_fold_mask_store (gsi, stmt);\n+\t  changed |= gimple_fold_partial_store (gsi, stmt, true);\n+\t  break;\n+\tcase IFN_LEN_LOAD:\n+\t  changed |= gimple_fold_partial_load (gsi, stmt, false);\n+\t  break;\n+\tcase IFN_LEN_STORE:\n+\t  changed |= gimple_fold_partial_store (gsi, stmt, false);\n \t  break;\n \tdefault:\n \t  break;"}, {"sha": "8b9c9107814ab6e1684f217bd554a5e469bd2c82", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vec-length-epil-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8408120fecc56385b316dafec1bdfe3aac61fc05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8408120fecc56385b316dafec1bdfe3aac61fc05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vec-length-epil-8.c?ref=8408120fecc56385b316dafec1bdfe3aac61fc05", "patch": "@@ -8,5 +8,5 @@\n \n #include \"p9-vec-length-8.h\"\n \n-/* { dg-final { scan-assembler-times {\\mlxvl\\M} 21 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvl\\M} 16 } } */\n /* { dg-final { scan-assembler-times {\\mstxvl\\M} 7 } } */"}, {"sha": "4526ea8639d5b663f90998ddd42c9ce8d3eb955d", "filename": "gcc/testsuite/gcc.target/powerpc/pr107412.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8408120fecc56385b316dafec1bdfe3aac61fc05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr107412.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8408120fecc56385b316dafec1bdfe3aac61fc05/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr107412.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr107412.c?ref=8408120fecc56385b316dafec1bdfe3aac61fc05", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2 -ftree-vectorize -fno-vect-cost-model -funroll-loops -fno-tree-loop-distribute-patterns --param vect-partial-vector-usage=2 -fdump-tree-optimized\" } */\n+\n+/* Verify there is only one IFN call LEN_LOAD and IFN_STORE separately.  */\n+\n+#define N 16\n+int src[N];\n+int dest[N];\n+\n+void\n+foo ()\n+{\n+  for (int i = 0; i < (N - 1); i++)\n+    dest[i] = src[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times {\\mLEN_LOAD\\M} 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times {\\mLEN_STORE\\M} 1 \"optimized\" } } */"}]}