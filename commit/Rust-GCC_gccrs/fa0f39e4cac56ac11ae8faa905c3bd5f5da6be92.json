{"sha": "fa0f39e4cac56ac11ae8faa905c3bd5f5da6be92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwZjM5ZTRjYWM1NmFjMTFhZThmYWE5MDVjM2JkNWY1ZGE2YmU5Mg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-01-25T13:55:06Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-01-25T13:55:06Z"}, "message": "(*): Replace TARGET_V9 with TARGET_ARCH64 in places\nrequiring 64 bit environment.\n\nFrom-SVN: r11098", "tree": {"sha": "677ad06a8648c84ba5f44cd4cfa1173ccdf42127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/677ad06a8648c84ba5f44cd4cfa1173ccdf42127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa0f39e4cac56ac11ae8faa905c3bd5f5da6be92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0f39e4cac56ac11ae8faa905c3bd5f5da6be92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa0f39e4cac56ac11ae8faa905c3bd5f5da6be92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa0f39e4cac56ac11ae8faa905c3bd5f5da6be92/comments", "author": null, "committer": null, "parents": [{"sha": "cc21923bbcafebf10f28b771d83e25ed3c149e4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc21923bbcafebf10f28b771d83e25ed3c149e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc21923bbcafebf10f28b771d83e25ed3c149e4f"}], "stats": {"total": 363, "additions": 182, "deletions": 181}, "files": [{"sha": "70947495be53784f78cea803963f8575c9b23877", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 182, "deletions": 181, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa0f39e4cac56ac11ae8faa905c3bd5f5da6be92/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa0f39e4cac56ac11ae8faa905c3bd5f5da6be92/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=fa0f39e4cac56ac11ae8faa905c3bd5f5da6be92", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for SPARC chip for GNU C compiler\n-;;  Copyright (C) 1987, 88, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n+;;  Copyright (C) 1987, 88, 89, 92-95, 1996 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@cygnus.com)\n ;;  64 bit SPARC V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n ;;  at Cygnus Support.\n@@ -30,7 +30,7 @@\n ;; 'f' for all DF/TFmode values, including those that are specific to the v8.\n \n ;; Architecture type.  Arch32bit includes v7, sparclite, v8.\n-\n+;; ??? Delete and use `TARGET_ARCH64' instead.\n (define_attr \"arch\" \"arch32bit,arch64bit\"\n   (const (symbol_ref \"sparc_arch_type\")))\n \n@@ -271,7 +271,7 @@\n   [(set (reg:CCX 0)\n \t(compare:CCX (match_operand:DI 0 \"register_operand\" \"\")\n \t\t     (match_operand:DI 1 \"arith_double_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   sparc_compare_op0 = operands[0];\n@@ -342,7 +342,7 @@\n    (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t\t   (eq:DI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CCX 0))])]\n-  \"\"\n+  \"TARGET_ARCH64\"\n   \"{ operands[3] = gen_reg_rtx (DImode); }\")\n \n (define_expand \"snesi_special\"\n@@ -362,7 +362,7 @@\n    (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t\t   (ne:DI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CCX 0))])]\n-  \"\"\n+  \"TARGET_ARCH64\"\n   \"{ operands[3] = gen_reg_rtx (DImode); }\")\n \n (define_expand \"seqdi_special_trunc\"\n@@ -372,7 +372,7 @@\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (eq:DI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CCX 0))])]\n-  \"\"\n+  \"TARGET_ARCH64\"\n   \"{ operands[3] = gen_reg_rtx (DImode); }\")\n \n (define_expand \"snedi_special_trunc\"\n@@ -382,7 +382,7 @@\n    (parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (ne:DI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CCX 0))])]\n-  \"\"\n+  \"TARGET_ARCH64\"\n   \"{ operands[3] = gen_reg_rtx (DImode); }\")\n \n (define_expand \"seqsi_special_extend\"\n@@ -392,7 +392,7 @@\n    (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t\t   (eq:SI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CC 0))])]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"{ operands[3] = gen_reg_rtx (SImode); }\")\n \n (define_expand \"snesi_special_extend\"\n@@ -402,7 +402,7 @@\n    (parallel [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t\t   (ne:SI (match_dup 3) (const_int 0)))\n \t      (clobber (reg:CC 0))])]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"{ operands[3] = gen_reg_rtx (SImode); }\")\n \n ;; ??? v9: Operand 0 needs a mode, so SImode was chosen.\n@@ -420,7 +420,7 @@\n       if (GET_MODE (operands[0]) == SImode)\n \tpat = gen_seqsi_special (operands[0], sparc_compare_op0,\n \t\t\t\t sparc_compare_op1);\n-      else if (! TARGET_V9)\n+      else if (! TARGET_ARCH64)\n \tFAIL;\n       else\n \tpat = gen_seqsi_special_extend (operands[0], sparc_compare_op0,\n@@ -432,11 +432,11 @@\n     {\n       rtx pat;\n \n-      if (GET_MODE (operands[0]) == SImode)\n+      if (! TARGET_ARCH64)\n+\tFAIL;\n+      else if (GET_MODE (operands[0]) == SImode)\n \tpat = gen_seqdi_special_trunc (operands[0], sparc_compare_op0,\n \t\t\t\t       sparc_compare_op1);\n-      else if (! TARGET_V9)\n-\tFAIL;\n       else\n \tpat = gen_seqdi_special (operands[0], sparc_compare_op0,\n \t\t\t\t sparc_compare_op1);\n@@ -473,7 +473,7 @@\n       if (GET_MODE (operands[0]) == SImode)\n \tpat = gen_snesi_special (operands[0], sparc_compare_op0,\n \t\t\t\t sparc_compare_op1);\n-      else if (! TARGET_V9)\n+      else if (! TARGET_ARCH64)\n \tFAIL;\n       else\n \tpat = gen_snesi_special_extend (operands[0], sparc_compare_op0,\n@@ -485,11 +485,11 @@\n     {\n       rtx pat;\n \n-      if (GET_MODE (operands[0]) == SImode)\n+      if (! TARGET_ARCH64)\n+\tFAIL;\n+      else if (GET_MODE (operands[0]) == SImode)\n \tpat = gen_snedi_special_trunc (operands[0], sparc_compare_op0,\n \t\t\t\t       sparc_compare_op1);\n-      else if (! TARGET_V9)\n-\tFAIL;\n       else\n \tpat = gen_snedi_special (operands[0], sparc_compare_op0,\n \t\t\t\t sparc_compare_op1);\n@@ -749,7 +749,7 @@\n   [(set (reg:CCX 0)\n \t(compare:CCX (match_operand:DI 0 \"register_operand\" \"r\")\n \t\t     (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"cmp %r0,%1\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -829,7 +829,7 @@\n \t(ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CC 0))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"subcc %%g0,%1,%%g0\\;addx %%g0,0,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n@@ -839,7 +839,7 @@\n \t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CCX 0))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov 0,%0\\;movrnz %1,1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n@@ -849,7 +849,7 @@\n \t(neg:DI (ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n    (clobber (reg:CCX 0))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov 0,%0\\;movrnz %1,-1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n@@ -859,7 +859,7 @@\n \t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CCX 0))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"xor %1,%R1,%0\\;subcc %%g0,%0,%%g0\\;addx %%g0,0,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"3\")])\n@@ -869,7 +869,7 @@\n \t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CCX 0))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov 0,%0\\;movrnz %1,1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n@@ -899,7 +899,7 @@\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CC 0))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"subcc %%g0,%1,%%g0\\;subx %%g0,-1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n@@ -909,7 +909,7 @@\n \t(eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CCX 0))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov 0,%0\\;movrz %1,1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n@@ -919,7 +919,7 @@\n \t(neg:DI (eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n    (clobber (reg:CCX 0))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov 0,%0\\;movrz %1,-1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")]) \n@@ -929,7 +929,7 @@\n \t(eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CCX 0))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"xor %1,%R1,%0\\;subcc %%g0,%0,%%g0\\;subx %%g0,-1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"3\")])\n@@ -939,7 +939,7 @@\n \t(eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n    (clobber (reg:CCX 0))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov 0,%0\\;movrz %1,1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n@@ -1115,7 +1115,7 @@\n (define_insn \"*scc_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operator:DI 1 \"noov_compare_op\" [(reg 0) (const_int 0)]))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"* return output_scc_insn (operands, insn); \"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"3\")])\n@@ -1134,7 +1134,7 @@\n   \"\"\n   \"\n {\n-  if (TARGET_V9 && sparc_compare_op1 == const0_rtx\n+  if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode)\n     {\n@@ -1158,7 +1158,7 @@\n   \"\"\n   \"\n {\n-  if (TARGET_V9 && sparc_compare_op1 == const0_rtx\n+  if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode)\n     {\n@@ -1182,7 +1182,7 @@\n   \"\"\n   \"\n {\n-  if (TARGET_V9 && sparc_compare_op1 == const0_rtx\n+  if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode)\n     {\n@@ -1216,7 +1216,7 @@\n   \"\"\n   \"\n {\n-  if (TARGET_V9 && sparc_compare_op1 == const0_rtx\n+  if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode)\n     {\n@@ -1250,7 +1250,7 @@\n   \"\"\n   \"\n {\n-  if (TARGET_V9 && sparc_compare_op1 == const0_rtx\n+  if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode)\n     {\n@@ -1284,7 +1284,7 @@\n   \"\"\n   \"\n {\n-  if (TARGET_V9 && sparc_compare_op1 == const0_rtx\n+  if (TARGET_ARCH64 && sparc_compare_op1 == const0_rtx\n       && GET_CODE (sparc_compare_op0) == REG\n       && GET_MODE (sparc_compare_op0) == DImode)\n     {\n@@ -1418,7 +1418,7 @@\n \t\t\t\t       (const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"*\n {\n   return output_v9branch (operands[0], 1, 2, 0,\n@@ -1434,7 +1434,7 @@\n \t\t\t\t       (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"*\n {\n   return output_v9branch (operands[0], 1, 2, 1,\n@@ -1452,7 +1452,7 @@\n   \"\"\n   ;; V9 needs \"add\" because of the code models.  We still use \"or\" for v8\n   ;; so we can compare the old compiler with the new.\n-  \"* return TARGET_V9 ? \\\"add %1,%%lo(%a2),%0\\\" : \\\"or %1,%%lo(%a2),%0\\\";\"\n+  \"* return TARGET_ARCH64 ? \\\"add %1,%%lo(%a2),%0\\\" : \\\"or %1,%%lo(%a2),%0\\\";\"\n   ;; Need to set length for this arith insn because operand2\n   ;; is not an \"arith_operand\".\n   [(set_attr \"length\" \"1\")])\n@@ -1466,7 +1466,7 @@\n   \"\"\n   ;; V9 needs \"add\" because of the code models.  We still use \"or\" for v8\n   ;; so we can compare the old compiler with the new.\n-  \"* return TARGET_V9 ? \\\"add %1,%%lo(%a2),%0\\\" : \\\"or %1,%%lo(%a2),%0\\\";\"\n+  \"* return TARGET_ARCH64 ? \\\"add %1,%%lo(%a2),%0\\\" : \\\"or %1,%%lo(%a2),%0\\\";\"\n   ;; Need to set length for this arith insn because operand2\n   ;; is not an \"arith_operand\".\n   [(set_attr \"length\" \"1\")])\n@@ -1516,7 +1516,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"move_pic_label\" \"i\"))\n    (set (reg:DI 15) (pc))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\\\\n1:\\;call 2f\\;sethi %%hi(%l1-1b),%0\\\\n2:\\\\tor %0,%%lo(%l1-1b),%0\\;add %0,%%o7,%0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"4\")])\n@@ -1525,7 +1525,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:DI 2 \"immediate_operand\" \"in\")))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"*\n {\n   /* Don't output a 64 bit constant, since we can't trust the assembler to\n@@ -1538,15 +1538,15 @@\n   ;; is not an \"arith_operand\".\n   [(set_attr \"length\" \"1\")])\n \n-;; ??? Gas does not handle %lo(DI), so we use the same code for ! TARGET_V9.\n+;; ??? Gas does not handle %lo(DI), so we use the same code for ! TARGET_ARCH64.\n ;; ??? The previous comment is obsolete.\n ;; ??? Optimizer does not handle \"or %o1,%lo(0),%o1\". How about add?\n \n (define_insn \"*lo_sum_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:DI 2 \"immediate_operand\" \"in\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"*\n {\n   /* Don't output a 64 bit constant, since we can't trust the assembler to\n@@ -1564,7 +1564,7 @@\n (define_insn \"*sethi_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"\" \"\")))]\n-  \"! TARGET_V9 && check_pic (1)\"\n+  \"! TARGET_ARCH64 && check_pic (1)\"\n   \"*\n {\n   rtx op0 = operands[0];\n@@ -1616,7 +1616,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"const_double_operand\" \"\")))\n    (clobber (reg:DI 1))]\n-  \"TARGET_V9 && check_pic (1)\"\n+  \"TARGET_ARCH64 && check_pic (1)\"\n   \"*\n {\n   rtx high, low;\n@@ -1659,7 +1659,7 @@\n (define_insn \"*sethi_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"\" \"\")))\n-;; ??? Why the clobber?\n+  ;; The clobber is here because emit_move_sequence assumes the worst case.\n    (clobber (reg:DI 1))]\n   \"TARGET_MEDLOW && check_pic (1)\"\n   \"sethi %%hi(%a1),%0\"\n@@ -1672,7 +1672,7 @@\n (define_insn \"*sethi_di_medany_data\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"data_segment_operand\" \"\")))\n-;; ??? Why the clobber?\n+  ;; The clobber is here because emit_move_sequence assumes the worst case.\n    (clobber (reg:DI 1))]\n   \"TARGET_MEDANY && check_pic (1)\"\n   \"sethi %%hi(%a1),%0; add %0,%%g4,%0\"\n@@ -1682,12 +1682,12 @@\n (define_insn \"*sethi_di_medany_text\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"text_segment_operand\" \"\")))\n-;; ??? Why the clobber?\n+  ;; The clobber is here because emit_move_sequence assumes the worst case.\n    (clobber (reg:DI 1))]\n   \"TARGET_MEDANY && check_pic (1)\"\n-  \"sethi %%hi(%a1),%0\"\n+  \"sethi %%uhi(%a1),%%g1; or %%g1,%%ulo(%a1),%%g1; sllx %%g1,32,%%g1; sethi %%hi(%a1),%0; or %0,%%g1,%0\"\n   [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"1\")])\n+   (set_attr \"length\" \"5\")])\n \n (define_insn \"*sethi_di_fullany\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -1839,7 +1839,7 @@\n (define_insn \"*movdi_sp32_insn\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\" \"=r,T,U,Q,r,r,?f,?f,?Q\")\n \t(match_operand:DI 1 \"general_operand\" \"r,U,T,r,Q,i,f,Q,f\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode)\n        || operands[1] == const0_rtx)\"\n@@ -1863,7 +1863,7 @@\n (define_insn \"*movdi_sp64_insn\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,Q,?f,?f,?Q\")\n \t(match_operand:DI 1 \"move_operand\" \"rI,K,Q,rJ,f,Q,f\"))]\n-  \"TARGET_V9\n+  \"TARGET_ARCH64\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode)\n        || operands[1] == const0_rtx)\"\n@@ -2049,7 +2049,7 @@\n     case 1:\n       return output_fp_move_double (operands);\n     case 2:\n-      if (TARGET_V9)\n+      if (TARGET_ARCH64)\n \t{\n \t  return \\\"stx %%g0,%0\\\";\n \t}\n@@ -2108,7 +2108,7 @@\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"! TARGET_V9 && reload_completed\"\n+  \"! TARGET_ARCH64 && reload_completed\"\n   [(set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 5))]\n   \"\n@@ -2164,7 +2164,7 @@\n     case 1:\n       return output_fp_move_quad (operands);\n     case 2:\n-      if (TARGET_V9)\n+      if (TARGET_ARCH64)\n \t{\n \t  operands[1] = adj_offsettable_operand (operands[0], 8);\n \t  return \\\"stx %%g0,%0\\;stx %%g0,%1\\\";\n@@ -2255,7 +2255,7 @@\n \t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n \t\t      (match_operand:SI 2 \"arith10_operand\" \"\")\n \t\t      (match_operand:SI 3 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n@@ -2281,7 +2281,7 @@\n \t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n \t\t      (match_operand:DI 2 \"arith10_operand\" \"\")\n \t\t      (match_operand:DI 3 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n@@ -2307,7 +2307,7 @@\n \t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n \t\t      (match_operand:SF 2 \"register_operand\" \"\")\n \t\t      (match_operand:SF 3 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n@@ -2333,7 +2333,7 @@\n \t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n \t\t      (match_operand:DF 2 \"register_operand\" \"\")\n \t\t      (match_operand:DF 3 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n@@ -2359,7 +2359,7 @@\n \t(if_then_else (match_operand 1 \"comparison_operator\" \"\")\n \t\t      (match_operand:TF 2 \"register_operand\" \"\")\n \t\t      (match_operand:TF 3 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n@@ -2398,7 +2398,7 @@\n \t\t\t\t      [(reg:CC 0) (const_int 0)])\n \t\t      (match_operand:DI 2 \"arith11_double_operand\" \"rHI\")\n \t\t      (match_operand:DI 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov%C1 %%icc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2408,7 +2408,7 @@\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n \t\t      (match_operand:SI 2 \"arith11_operand\" \"ri\")\n \t\t      (match_operand:SI 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov%C1 %%xcc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2418,7 +2418,7 @@\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n \t\t      (match_operand:DI 2 \"arith11_double_operand\" \"rHI\")\n \t\t      (match_operand:DI 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov%C1 %%xcc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2451,7 +2451,7 @@\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:DI 3 \"arith11_double_operand\" \"rHI\")\n \t\t      (match_operand:DI 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2462,7 +2462,7 @@\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:DI 3 \"arith11_double_operand\" \"rHI\")\n \t\t      (match_operand:DI 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mov%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2473,7 +2473,7 @@\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:SI 3 \"arith10_operand\" \"ri\")\n \t\t      (match_operand:SI 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"movr%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2484,7 +2484,7 @@\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:DI 3 \"arith10_double_operand\" \"ri\")\n \t\t      (match_operand:DI 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"movr%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2495,7 +2495,7 @@\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:SF 3 \"register_operand\" \"f\")\n \t\t      (match_operand:SF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"fmovrs%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2506,7 +2506,7 @@\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:DF 3 \"register_operand\" \"e\")\n \t\t      (match_operand:DF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"fmovrd%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2517,7 +2517,7 @@\n \t\t\t\t (const_int 0)])\n \t\t      (match_operand:TF 3 \"register_operand\" \"e\")\n \t\t      (match_operand:TF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"fmovrq%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2623,7 +2623,7 @@\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n \t\t      (match_operand:SF 2 \"register_operand\" \"f\")\n \t\t      (match_operand:SF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"fmovs%C1 %%xcc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2633,7 +2633,7 @@\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n \t\t      (match_operand:DF 2 \"register_operand\" \"e\")\n \t\t      (match_operand:DF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"fmovd%C1 %%xcc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n@@ -2643,7 +2643,7 @@\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n \t\t      (match_operand:TF 2 \"register_operand\" \"e\")\n \t\t      (match_operand:TF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"fmovq%C1 %%xcc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \f\n@@ -2718,13 +2718,13 @@\n (define_expand \"zero_extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI (match_operand:QI 1 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\")\n \n (define_insn \"*zero_extendqidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (match_operand:QI 1 \"sparc_operand\" \"r,Q\")))]\n-  \"TARGET_V9 && GET_CODE (operands[1]) != CONST_INT\"\n+  \"TARGET_ARCH64 && GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n    and %1,0xff,%0\n    ldub %1,%0\"\n@@ -2734,7 +2734,7 @@\n (define_expand \"zero_extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI (match_operand:HI 1 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n@@ -2757,7 +2757,7 @@\n (define_insn \"*zero_extendhidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"lduh %1,%0\"\n   [(set_attr \"type\" \"load\")])\n \n@@ -2766,13 +2766,13 @@\n (define_expand \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\")\n \n (define_insn \"*zero_extendsidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (match_operand:SI 1 \"sparc_operand\" \"r,Q\")))]\n-  \"TARGET_V9 && GET_CODE (operands[1]) != CONST_INT\"\n+  \"TARGET_ARCH64 && GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n    srl %1,0,%0\n    lduw %1,%0\"\n@@ -2925,7 +2925,7 @@\n (define_expand \"extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(sign_extend:DI (match_operand:QI 1 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n@@ -2948,14 +2948,14 @@\n (define_insn \"*sign_extendqidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"ldsb %1,%0\"\n   [(set_attr \"type\" \"load\")])\n \n (define_expand \"extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(sign_extend:DI (match_operand:HI 1 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\n {\n   rtx temp = gen_reg_rtx (DImode);\n@@ -2978,20 +2978,20 @@\n (define_insn \"*sign_extendhidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"ldsh %1,%0\"\n   [(set_attr \"type\" \"load\")])\n \n (define_expand \"extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"\")\n \n (define_insn \"*sign_extendsidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI (match_operand:SI 1 \"sparc_operand\" \"r,Q\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"@\n   sra %1,0,%0\n   ldsw %1,%0\"\n@@ -3026,7 +3026,7 @@\n \t\t\t  (match_operand:SI 1 \"small_int\" \"n\")\n \t\t\t  (match_operand:SI 2 \"small_int\" \"n\"))\n \t (const_int 0)))]\n-  \"TARGET_V9 && INTVAL (operands[2]) > 51\"\n+  \"TARGET_ARCH64 && INTVAL (operands[2]) > 51\"\n   \"*\n {\n   int len = INTVAL (operands[1]);\n@@ -3118,7 +3118,7 @@\n \t\t   (float:SF (match_operand:DI 1 \"general_operand\" \"\")))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DFmode);\n@@ -3130,7 +3130,7 @@\n \t\t   (float:DF (match_operand:DI 1 \"general_operand\" \"\")))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DFmode);\n@@ -3142,7 +3142,7 @@\n \t\t   (float:TF (match_operand:DI 1 \"general_operand\" \"\")))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n-  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"TARGET_ARCH64 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DFmode);\n@@ -3154,7 +3154,7 @@\n \t\t   (float:SF (match_operand:DI 1 \"general_operand\" \"rm\")))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n \t      (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))])]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"*\n {\n   if (GET_CODE (operands[1]) == MEM)\n@@ -3171,7 +3171,7 @@\n \t\t   (float:DF (match_operand:DI 1 \"general_operand\" \"rm\")))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n \t      (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))])]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"*\n {\n   if (GET_CODE (operands[1]) == MEM)\n@@ -3188,7 +3188,7 @@\n \t\t   (float:TF (match_operand:DI 1 \"general_operand\" \"rm\")))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n \t      (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))])]\n-  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"TARGET_ARCH64 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"*\n {\n   if (GET_CODE (operands[1]) == MEM)\n@@ -3205,21 +3205,21 @@\n (define_insn \"floatdisf2_sp64\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:DI 1 \"register_operand\" \"e\")))]\n-  \"0 && TARGET_V9 && TARGET_FPU\"\n+  \"0 && TARGET_ARCH64 && TARGET_FPU\"\n   \"fxtos %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floatdidf2_sp64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(float:DF (match_operand:DI 1 \"register_operand\" \"e\")))]\n-  \"0 && TARGET_V9 && TARGET_FPU\"\n+  \"0 && TARGET_ARCH64 && TARGET_FPU\"\n   \"fxtod %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"floatditf2_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(float:TF (match_operand:DI 1 \"register_operand\" \"e\")))]\n-  \"0 && TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"0 && TARGET_ARCH64 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fxtoq %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -3260,7 +3260,7 @@\n \t\t   (fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"\"))))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DFmode);\n@@ -3272,7 +3272,7 @@\n \t\t   (fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"\"))))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DFmode);\n@@ -3284,7 +3284,7 @@\n \t\t   (fix:DI (fix:TF (match_operand:TF 1 \"register_operand\" \"\"))))\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))])]\n-  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"TARGET_ARCH64 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DFmode);\n@@ -3296,7 +3296,7 @@\n \t\t   (fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n \t      (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))])]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"*\n {\n   output_asm_insn (\\\"fstox %1,%2\\\", operands);\n@@ -3313,7 +3313,7 @@\n \t\t   (fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"e\"))))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n \t      (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))])]\n-  \"TARGET_V9 && TARGET_FPU\"\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n   \"*\n {\n   output_asm_insn (\\\"fdtox %1,%2\\\", operands);\n@@ -3330,7 +3330,7 @@\n \t\t   (fix:DI (fix:TF (match_operand:TF 1 \"register_operand\" \"e\"))))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n \t      (clobber (match_operand:DI 3 \"memory_operand\" \"m\"))])]\n-  \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"TARGET_ARCH64 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"*\n {\n   output_asm_insn (\\\"fqtox %1,%2\\\", operands);\n@@ -3347,21 +3347,21 @@\n (define_insn \"fix_truncsfdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))]\n-  \"0 && TARGET_V9 && TARGET_FPU\"\n+  \"0 && TARGET_ARCH64 && TARGET_FPU\"\n   \"fstox %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_truncdfdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"e\"))))]\n-  \"0 && TARGET_V9 && TARGET_FPU\"\n+  \"0 && TARGET_ARCH64 && TARGET_FPU\"\n   \"fdtox %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fix_trunctfdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n \t(fix:DI (fix:TF (match_operand:TF 1 \"register_operand\" \"e\"))))]\n-  \"0 && TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n+  \"0 && TARGET_ARCH64 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fqtox %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \f\n@@ -3374,7 +3374,7 @@\n   \"\"\n   \"\n {\n-  if (! TARGET_V9)\n+  if (! TARGET_ARCH64)\n     {\n       emit_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n \t\t\t  gen_rtx (SET, VOIDmode, operands[0],\n@@ -3390,7 +3390,7 @@\n \t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (clobber (reg:SI 0))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"*\n {\n   rtx op2 = operands[2];\n@@ -3425,7 +3425,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"add %1,%2,%0\")\n \n (define_insn \"addsi3\"\n@@ -3450,7 +3450,7 @@\n \t(compare:CCX_NOOV (plus:DI (match_operand:DI 0 \"arith_double_operand\" \"%r\")\n \t\t\t\t   (match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n \t\t\t  (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"addcc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -3471,7 +3471,7 @@\n \t\t\t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"addcc %1,%2,%0\")\n \n (define_expand \"subdi3\"\n@@ -3481,7 +3481,7 @@\n   \"\"\n   \"\n {\n-  if (! TARGET_V9)\n+  if (! TARGET_ARCH64)\n     {\n       emit_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n \t\t\t  gen_rtx (SET, VOIDmode, operands[0],\n@@ -3497,7 +3497,7 @@\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (clobber (reg:SI 0))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"*\n {\n   rtx op2 = operands[2];\n@@ -3532,7 +3532,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"sub %1,%2,%0\")\n \n (define_insn \"subsi3\"\n@@ -3557,7 +3557,7 @@\n \t(compare:CCX_NOOV (minus:DI (match_operand:DI 0 \"register_operand\" \"r\")\n \t\t\t\t    (match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n \t\t\t  (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"subcc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -3578,7 +3578,7 @@\n \t\t\t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"subcc %1,%2,%0\")\n \n ;; This is anachronistic, and should not be used in v9 software.\n@@ -3596,7 +3596,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"mulx %1,%2,%0\")\n \n ;; It is not known whether this will match.\n@@ -3764,7 +3764,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(div:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"sdivx %1,%2,%0\")\n \n ;; It is not known whether this will match.\n@@ -3793,7 +3793,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(udiv:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"udivx %1,%2,%0\")\n \n ;; It is not known whether this will match.\n@@ -3824,7 +3824,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"*\n {\n   rtx op2 = operands[2];\n@@ -3858,7 +3858,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"and %1,%2,%0\")\n \n (define_insn \"andsi3\"\n@@ -3888,15 +3888,15 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"andn %2,%1,%0\\;andn %R2,%R1,%R0\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"*and_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"andn %2,%1,%0\")\n \n (define_insn \"*and_not_si\"\n@@ -3918,7 +3918,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"*\n {\n   rtx op2 = operands[2];\n@@ -3952,7 +3952,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"or %1,%2,%0\")\n \n (define_insn \"iorsi3\"\n@@ -3982,15 +3982,15 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"orn %2,%1,%0\\;orn %R2,%R1,%R0\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"*or_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"orn %2,%1,%0\")\n \n (define_insn \"*or_not_si\"\n@@ -4012,7 +4012,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(xor:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"*\n {\n   rtx op2 = operands[2];\n@@ -4046,7 +4046,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(xor:DI (match_operand:DI 1 \"arith_double_operand\" \"%rJ\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"xor %r1,%2,%0\")\n \n (define_insn \"xorsi3\"\n@@ -4093,15 +4093,15 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (xor:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t\t(match_operand:DI 2 \"register_operand\" \"r\"))))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"xnor %1,%2,%0\\;xnor %R1,%R2,%R0\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"*xor_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (xor:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\"))))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"xnor %r1,%2,%0\")\n \n (define_insn \"*xor_not_si\"\n@@ -4133,7 +4133,7 @@\n \t\t\t    [(match_operand:DI 0 \"arith_double_operand\" \"%r\")\n \t\t\t     (match_operand:DI 1 \"arith_double_operand\" \"rHI\")])\n \t (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"%A2cc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -4158,7 +4158,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_dup 3))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"%A3cc %1,%2,%0\")\n \n (define_insn \"*cmp_cc_xor_not\"\n@@ -4177,7 +4177,7 @@\n \t (not:DI (xor:DI (match_operand:DI 0 \"reg_or_0_operand\" \"%rJ\")\n \t\t\t (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))\n \t (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"xnorcc %r0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -4200,7 +4200,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (xor:DI (match_dup 1) (match_dup 2))))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"xnorcc %r1,%2,%0\")\n \n (define_insn \"*cmp_cc_arith_op_not\"\n@@ -4221,7 +4221,7 @@\n \t\t\t    [(not:DI (match_operand:DI 0 \"arith_double_operand\" \"rHI\"))\n \t\t\t     (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")])\n \t (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"%B2cc %r1,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -4246,7 +4246,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_dup 3))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"%B3cc %r2,%1,%0\")\n \n ;; We cannot use the \"neg\" pseudo insn because the Sun assembler\n@@ -4258,7 +4258,7 @@\n   \"\"\n   \"\n {\n-  if (! TARGET_V9)\n+  if (! TARGET_ARCH64)\n     {\n       emit_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n \t\t\t  gen_rtx (SET, VOIDmode, operand0,\n@@ -4272,15 +4272,15 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (reg:SI 0))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"subcc %%g0,%R1,%R0\\;subx %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n (define_insn \"*negdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"sub %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"1\")])\n@@ -4304,7 +4304,7 @@\n   [(set (reg:CCX_NOOV 0)\n \t(compare:CCX_NOOV (neg:DI (match_operand:DI 0 \"arith_double_operand\" \"rHI\"))\n \t\t\t  (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"subcc %%g0,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -4324,7 +4324,7 @@\n \t\t\t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_dup 1)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"subcc %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n@@ -4339,15 +4339,15 @@\n (define_insn \"*one_cmpldi2_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"xnor %%g0,%1,%0\\;xnor %%g0,%R1,%R0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n (define_insn \"*one_cmpldi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"xnor %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n@@ -4370,7 +4370,7 @@\n   [(set (reg:CCX 0)\n \t(compare:CCX (not:DI (match_operand:DI 0 \"arith_double_operand\" \"rHI\"))\n \t\t     (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"xnorcc %%g0,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n@@ -4390,7 +4390,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (match_dup 1)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"xnorcc %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \f\n@@ -4480,7 +4480,7 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(mult:TF (float_extend:TF (match_operand:DF 1 \"register_operand\" \"e\"))\n \t\t (float_extend:TF (match_operand:DF 2 \"register_operand\" \"e\"))))]\n-  \"(TARGET_V8 || TARGET_V9) && TARGET_FPU\"\n+  \"(TARGET_V8 || TARGET_V9) && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fdmulq %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n@@ -4637,7 +4637,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n@@ -4685,7 +4685,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n@@ -4714,7 +4714,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT\n@@ -4867,7 +4867,7 @@\n \t call-clobbered registers?  We lose this if it is a JUMP_INSN.\n \t Why cannot we have delay slots filled if it were a CALL?  */\n \n-      if (! TARGET_V9 && INTVAL (operands[3]) != 0)\n+      if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n \temit_jump_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (3,\n \t\t\t\t gen_rtx (SET, VOIDmode, pc_rtx,\n \t\t\t\t\t  XEXP (operands[0], 0)),\n@@ -4897,7 +4897,7 @@\n   nregs_rtx = const0_rtx;\n #endif\n \n-  if (! TARGET_V9 && INTVAL (operands[3]) != 0)\n+  if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n     emit_call_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (3,\n \t\t\t     gen_rtx (CALL, VOIDmode, fn_rtx, nregs_rtx),\n \t\t\t     operands[3],\n@@ -4913,7 +4913,7 @@\n #if 0\n   /* If this call wants a structure value,\n      emit an unimp insn to let the called function know about this.  */\n-  if (! TARGET_V9 && INTVAL (operands[3]) > 0)\n+  if (! TARGET_ARCH64 && INTVAL (operands[3]) > 0)\n     {\n       rtx insn = emit_insn (operands[3]);\n       SCHED_GROUP_P (insn) = 1;\n@@ -4970,7 +4970,7 @@\n    (match_operand 2 \"immediate_operand\" \"\")\n    (clobber (reg:SI 15))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_V9 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n+  \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n   \"call %a0,%1\\;nop\\;unimp %2\"\n   [(set_attr \"type\" \"call_no_delay_slot\")])\n \n@@ -4982,7 +4982,7 @@\n    (match_operand 2 \"immediate_operand\" \"\")\n    (clobber (reg:SI 15))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_V9 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n+  \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n   \"call %a0,%1\\;nop\\;unimp %2\"\n   [(set_attr \"type\" \"call_no_delay_slot\")])\n \n@@ -4994,7 +4994,7 @@\n    (match_operand 2 \"immediate_operand\" \"\")\n    (clobber (reg:SI 15))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_V9 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n+  \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n   \"call %a0,%1\\;nop\\;nop\"\n   [(set_attr \"type\" \"call_no_delay_slot\")])\n \n@@ -5005,7 +5005,7 @@\n    (match_operand 2 \"immediate_operand\" \"\")\n    (clobber (reg:SI 15))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_V9 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n+  \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n   \"call %a0,%1\\;nop\\;nop\"\n   [(set_attr \"type\" \"call_no_delay_slot\")])\n \n@@ -5133,10 +5133,10 @@\n   \"\n {\n   rtx valreg1 = gen_rtx (REG, DImode, 24);\n-  rtx valreg2 = gen_rtx (REG, TARGET_V9 ? TFmode : DFmode, 32);\n+  rtx valreg2 = gen_rtx (REG, TARGET_ARCH64 ? TFmode : DFmode, 32);\n   rtx result = operands[0];\n \n-  if (! TARGET_V9)\n+  if (! TARGET_ARCH64)\n     {\n       rtx rtnreg = gen_rtx (REG, SImode, (leaf_function ? 15 : 31));\n       rtx value = gen_reg_rtx (SImode);\n@@ -5153,7 +5153,7 @@\n   /* Reload the function value registers.  */\n   emit_move_insn (valreg1, change_address (result, DImode, XEXP (result, 0)));\n   emit_move_insn (valreg2,\n-\t\t  change_address (result, TARGET_V9 ? TFmode : DFmode,\n+\t\t  change_address (result, TARGET_ARCH64 ? TFmode : DFmode,\n \t\t\t\t  plus_constant (XEXP (result, 0), 8)));\n \n   /* Put USE insns before the return.  */\n@@ -5172,7 +5172,7 @@\n (define_insn \"update_return\"\n   [(unspec:SI [(match_operand:SI 0 \"register_operand\" \"r\")\n \t       (match_operand:SI 1 \"register_operand\" \"r\")] 0)]\n-  \"! TARGET_V9\"\n+  \"! TARGET_ARCH64\"\n   \"cmp %1,0\\;be,a .+8\\;add %0,4,%0\"\n   [(set_attr \"type\" \"multi\")])\n \f\n@@ -5247,7 +5247,8 @@\n (define_insn \"flush_register_windows\"\n   [(unspec_volatile [(const_int 0)] 1)]\n   \"\"\n-  \"* return TARGET_V9 ? \\\"flushw\\\" : \\\"ta 3\\\";\"\n+  ;; ??? Use TARGET_V9 instead?\n+  \"* return TARGET_ARCH64 ? \\\"flushw\\\" : \\\"ta 3\\\";\"\n   [(set_attr \"type\" \"misc\")])\n \n (define_insn \"goto_handler_and_restore\"\n@@ -5288,7 +5289,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(ffs:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (match_scratch:DI 2 \"=&r\"))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"neg %1,%2\\;not %2,%2\\;xor %1,%2,%2\\;popc %2,%0\\;movrz %1,%%g0,%0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5\")])\n@@ -5503,7 +5504,7 @@\n         (match_operand:SI 1 \"memory_operand\" \"\"))\n    (set (match_operand:SI 2 \"register_operand\" \"=rf\")\n         (match_operand:SI 3 \"memory_operand\" \"\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && registers_ok_for_ldd_peep (operands[0], operands[2]) \n    && ! MEM_VOLATILE_P (operands[1]) && ! MEM_VOLATILE_P (operands[3])\n    && addrs_ok_for_ldd_peep (XEXP (operands[1], 0), XEXP (operands[3], 0))\" \n@@ -5514,7 +5515,7 @@\n         (match_operand:SI 1 \"register_operand\" \"rf\"))\n    (set (match_operand:SI 2 \"memory_operand\" \"\")\n         (match_operand:SI 3 \"register_operand\" \"rf\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && registers_ok_for_ldd_peep (operands[1], operands[3]) \n    && ! MEM_VOLATILE_P (operands[0]) && ! MEM_VOLATILE_P (operands[2])\n    && addrs_ok_for_ldd_peep (XEXP (operands[0], 0), XEXP (operands[2], 0))\"\n@@ -5525,7 +5526,7 @@\n         (match_operand:SF 1 \"memory_operand\" \"\"))\n    (set (match_operand:SF 2 \"register_operand\" \"=fr\")\n         (match_operand:SF 3 \"memory_operand\" \"\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && registers_ok_for_ldd_peep (operands[0], operands[2]) \n    && ! MEM_VOLATILE_P (operands[1]) && ! MEM_VOLATILE_P (operands[3])\n    && addrs_ok_for_ldd_peep (XEXP (operands[1], 0), XEXP (operands[3], 0))\"\n@@ -5536,7 +5537,7 @@\n         (match_operand:SF 1 \"register_operand\" \"fr\"))\n    (set (match_operand:SF 2 \"memory_operand\" \"\")\n         (match_operand:SF 3 \"register_operand\" \"fr\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && registers_ok_for_ldd_peep (operands[1], operands[3]) \n    && ! MEM_VOLATILE_P (operands[0]) && ! MEM_VOLATILE_P (operands[2])\n    && addrs_ok_for_ldd_peep (XEXP (operands[0], 0), XEXP (operands[2], 0))\"\n@@ -5547,7 +5548,7 @@\n         (match_operand:SI 1 \"memory_operand\" \"\"))\n    (set (match_operand:SI 2 \"register_operand\" \"=rf\")\n         (match_operand:SI 3 \"memory_operand\" \"\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && registers_ok_for_ldd_peep (operands[2], operands[0]) \n    && ! MEM_VOLATILE_P (operands[3]) && ! MEM_VOLATILE_P (operands[1])\n    && addrs_ok_for_ldd_peep (XEXP (operands[3], 0), XEXP (operands[1], 0))\"\n@@ -5558,7 +5559,7 @@\n         (match_operand:SI 1 \"register_operand\" \"rf\"))\n    (set (match_operand:SI 2 \"memory_operand\" \"\")\n         (match_operand:SI 3 \"register_operand\" \"rf\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && registers_ok_for_ldd_peep (operands[3], operands[1]) \n    && ! MEM_VOLATILE_P (operands[2]) && ! MEM_VOLATILE_P (operands[0])\n    && addrs_ok_for_ldd_peep (XEXP (operands[2], 0), XEXP (operands[0], 0))\" \n@@ -5569,7 +5570,7 @@\n         (match_operand:SF 1 \"memory_operand\" \"\"))\n    (set (match_operand:SF 2 \"register_operand\" \"=fr\")\n         (match_operand:SF 3 \"memory_operand\" \"\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && registers_ok_for_ldd_peep (operands[2], operands[0]) \n    && ! MEM_VOLATILE_P (operands[3]) && ! MEM_VOLATILE_P (operands[1])\n    && addrs_ok_for_ldd_peep (XEXP (operands[3], 0), XEXP (operands[1], 0))\"\n@@ -5580,7 +5581,7 @@\n         (match_operand:SF 1 \"register_operand\" \"fr\"))\n    (set (match_operand:SF 2 \"memory_operand\" \"\")\n         (match_operand:SF 3 \"register_operand\" \"fr\"))]\n-  \"! TARGET_V9\n+  \"! TARGET_ARCH64\n    && registers_ok_for_ldd_peep (operands[3], operands[1]) \n    && ! MEM_VOLATILE_P (operands[2]) && ! MEM_VOLATILE_P (operands[0])\n    && addrs_ok_for_ldd_peep (XEXP (operands[2], 0), XEXP (operands[0], 0))\"\n@@ -5607,7 +5608,7 @@\n    (set (reg:CCX 0)\n \t(compare:CCX (match_operand:DI 2 \"register_operand\" \"r\")\n \t\t    (const_int 0)))]\n-  \"TARGET_V9\n+  \"TARGET_ARCH64\n    && (rtx_equal_p (operands[2], operands[0])\n        || rtx_equal_p (operands[2], operands[1]))\n    && ! FP_REG_P (operands[0]) && ! FP_REG_P (operands[1])\"\n@@ -5636,7 +5637,7 @@\n    (set (reg:CCX 0)\n \t(compare:CCX (match_dup 2)\n \t\t     (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"ldsh %1,%0\\;orcc %0,%%g0,%2\")\n \n (define_peephole\n@@ -5658,7 +5659,7 @@\n    (set (reg:CCX 0)\n \t(compare:CCX (match_dup 2)\n \t\t     (const_int 0)))]\n-  \"TARGET_V9\"\n+  \"TARGET_ARCH64\"\n   \"ldsb %1,%0\\;orcc %0,%%g0,%2\")\n \n ;; Floating-point move peepholes\n@@ -5702,7 +5703,7 @@\n   \"! TARGET_EPILOGUE\"\n   \"*\n {\n-  if (! TARGET_V9 && current_function_returns_struct)\n+  if (! TARGET_ARCH64 && current_function_returns_struct)\n     return \\\"jmp %%i7+12\\;restore %%g0,%1,%Y0\\\";\n   else\n     return \\\"ret\\;restore %%g0,%1,%Y0\\\";\n@@ -5716,7 +5717,7 @@\n   \"! TARGET_EPILOGUE\"\n   \"*\n {\n-  if (! TARGET_V9 && current_function_returns_struct)\n+  if (! TARGET_ARCH64 && current_function_returns_struct)\n     return \\\"jmp %%i7+12\\;restore %%g0,%1,%Y0\\\";\n   else\n     return \\\"ret\\;restore %%g0,%1,%Y0\\\";\n@@ -5730,7 +5731,7 @@\n   \"! TARGET_EPILOGUE\"\n   \"*\n {\n-  if (! TARGET_V9 && current_function_returns_struct)\n+  if (! TARGET_ARCH64 && current_function_returns_struct)\n     return \\\"jmp %%i7+12\\;restore %%g0,%1,%Y0\\\";\n   else\n     return \\\"ret\\;restore %%g0,%1,%Y0\\\";\n@@ -5747,7 +5748,7 @@\n   \"! TARGET_FPU && ! TARGET_EPILOGUE\"\n   \"*\n {\n-  if (! TARGET_V9 && current_function_returns_struct)\n+  if (! TARGET_ARCH64 && current_function_returns_struct)\n     return \\\"jmp %%i7+12\\;restore %%g0,%1,%Y0\\\";\n   else\n     return \\\"ret\\;restore %%g0,%1,%Y0\\\";\n@@ -5762,7 +5763,7 @@\n   \"! TARGET_EPILOGUE\"\n   \"*\n {\n-  if (! TARGET_V9 && current_function_returns_struct)\n+  if (! TARGET_ARCH64 && current_function_returns_struct)\n     return \\\"jmp %%i7+12\\;restore %r1,%2,%Y0\\\";\n   else\n     return \\\"ret\\;restore %r1,%2,%Y0\\\";\n@@ -5773,7 +5774,7 @@\n   [(set (match_operand:DI 0 \"restore_operand\" \"\")\n \t(match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n    (return)]\n-  \"TARGET_V9 && ! TARGET_EPILOGUE\"\n+  \"TARGET_ARCH64 && ! TARGET_EPILOGUE\"\n   \"ret\\;restore %%g0,%1,%Y0\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -5782,7 +5783,7 @@\n \t(plus:DI (match_operand:DI 1 \"arith_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (return)]\n-  \"TARGET_V9 && ! TARGET_EPILOGUE\"\n+  \"TARGET_ARCH64 && ! TARGET_EPILOGUE\"\n   \"ret\\;restore %r1,%2,%Y0\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -5836,15 +5837,15 @@\n \t\t\t (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:DI 15))])\n    (set (pc) (label_ref (match_operand 3 \"\" \"\")))]\n-  \"TARGET_V9 && short_branch (INSN_UID (insn), INSN_UID (operands[3]))\"\n+  \"TARGET_ARCH64 && short_branch (INSN_UID (insn), INSN_UID (operands[3]))\"\n   \"call %a1,%2\\;add %%o7,(%l3-.-4),%%o7\")\n \n (define_peephole\n   [(parallel [(call (mem:SI (match_operand:DI 0 \"call_operand_address\" \"ps\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (clobber (reg:DI 15))])\n    (set (pc) (label_ref (match_operand 2 \"\" \"\")))]\n-  \"TARGET_V9 && short_branch (INSN_UID (insn), INSN_UID (operands[2]))\"\n+  \"TARGET_ARCH64 && short_branch (INSN_UID (insn), INSN_UID (operands[2]))\"\n   \"call %a0,%1\\;add %%o7,(%l2-.-4),%%o7\")\n \n ;; Other miscellaneous peepholes."}]}