{"sha": "108f6c2f4efe0141c859eeb52fae610b8806ffc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4ZjZjMmY0ZWZlMDE0MWM4NTllZWI1MmZhZTYxMGI4ODA2ZmZjOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-03-31T13:16:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-03-31T13:16:36Z"}, "message": "tree.h (div_if_zero_remainder): Declare.\n\n2009-03-31  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (div_if_zero_remainder): Declare.\n\t* fold-const.c (div_if_zero_remainder): Export.\n\t* tree-ssa-forwprop.c\n\t(forward_propagate_addr_into_variable_array_index): Handle\n\tconstant array index addition outside of the variable index.\n\n\t* gcc.dg/tree-ssa/forwprop-12.c: New testcase.\n\nFrom-SVN: r145343", "tree": {"sha": "3df6a2c649d9c629a5bac8622a791c03866243b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3df6a2c649d9c629a5bac8622a791c03866243b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/108f6c2f4efe0141c859eeb52fae610b8806ffc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108f6c2f4efe0141c859eeb52fae610b8806ffc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108f6c2f4efe0141c859eeb52fae610b8806ffc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108f6c2f4efe0141c859eeb52fae610b8806ffc8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f6121903f11d285d7494ae15bb9d36a27e1a405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6121903f11d285d7494ae15bb9d36a27e1a405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6121903f11d285d7494ae15bb9d36a27e1a405"}], "stats": {"total": 85, "additions": 74, "deletions": 11}, "files": [{"sha": "0f81767d3793f06eef748e3a61e70a7460a854dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=108f6c2f4efe0141c859eeb52fae610b8806ffc8", "patch": "@@ -1,3 +1,11 @@\n+2009-03-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (div_if_zero_remainder): Declare.\n+\t* fold-const.c (div_if_zero_remainder): Export.\n+\t* tree-ssa-forwprop.c\n+\t(forward_propagate_addr_into_variable_array_index): Handle\n+\tconstant array index addition outside of the variable index.\n+\n 2009-03-31  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR target/39592"}, {"sha": "4951600a2976b18f5561a00f6a805ee7b7259ade", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=108f6c2f4efe0141c859eeb52fae610b8806ffc8", "patch": "@@ -874,7 +874,7 @@ div_and_round_double (enum tree_code code, int uns,\n    of type CODE and returns the quotient.\n    Otherwise returns NULL_TREE.  */\n \n-static tree\n+tree\n div_if_zero_remainder (enum tree_code code, const_tree arg1, const_tree arg2)\n {\n   unsigned HOST_WIDE_INT int1l, int2l;"}, {"sha": "9b1aef31f30688cf21b966a75da571e6bbe5256b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=108f6c2f4efe0141c859eeb52fae610b8806ffc8", "patch": "@@ -1,3 +1,7 @@\n+2009-03-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/forwprop-12.c: New testcase.\n+\n 2009-03-31  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR target/39592"}, {"sha": "a74809b609e39ac797f7aa51f407d993568b2b2e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-12.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-12.c?ref=108f6c2f4efe0141c859eeb52fae610b8806ffc8", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+struct X { int a[256]; };\n+\n+int foo(struct X *p, __SIZE_TYPE__ i)\n+{\n+  int *q = &p->a[0];\n+  int *q2 = (int *)((void *)q + i*4 + 32);\n+  return *q2;\n+}\n+\n+int bar(struct X *p, int i)\n+{\n+  return *((int *)p + i + 8);\n+}\n+\n+/* We should have propagated the base array address through the\n+   address arithmetic into the memory access as an array access.  */\n+\n+/* { dg-final { scan-tree-dump-times \"->a\\\\\\[D\\\\\\.\" 2 \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "044f8436559e38158363744ef769ff8ff5f27466", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=108f6c2f4efe0141c859eeb52fae610b8806ffc8", "patch": "@@ -618,8 +618,13 @@ forward_propagate_addr_into_variable_array_index (tree offset,\n \t\t\t\t\t\t  tree def_rhs,\n \t\t\t\t\t\t  gimple_stmt_iterator *use_stmt_gsi)\n {\n-  tree index;\n+  tree index, tunit;\n   gimple offset_def, use_stmt = gsi_stmt (*use_stmt_gsi);\n+  tree tmp;\n+\n+  tunit = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (def_rhs)));\n+  if (!host_integerp (tunit, 1))\n+    return false;\n \n   /* Get the offset's defining statement.  */\n   offset_def = SSA_NAME_DEF_STMT (offset);\n@@ -629,7 +634,7 @@ forward_propagate_addr_into_variable_array_index (tree offset,\n      along in case the element size is one. In that case, however, we do not\n      allow multiplications because they can be computing index to a higher\n      level dimension (PR 37861). */\n-  if (integer_onep (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (def_rhs)))))\n+  if (integer_onep (tunit))\n     {\n       if (is_gimple_assign (offset_def)\n \t  && gimple_assign_rhs_code (offset_def) == MULT_EXPR)\n@@ -648,18 +653,41 @@ forward_propagate_addr_into_variable_array_index (tree offset,\n \t multiplication of an object by the size of the array elements. \n \t This implicitly verifies that the size of the array elements\n \t is constant.  */\n-     offset = gimple_assign_rhs1 (offset_def);\n-     if (gimple_assign_rhs_code (offset_def) != MULT_EXPR\n-\t || TREE_CODE (gimple_assign_rhs2 (offset_def)) != INTEGER_CST\n-\t || !simple_cst_equal (gimple_assign_rhs2 (offset_def),\n-\t\t\t       TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (def_rhs)))))\n+     if (gimple_assign_rhs_code (offset_def) == MULT_EXPR\n+\t && TREE_CODE (gimple_assign_rhs2 (offset_def)) == INTEGER_CST\n+\t && tree_int_cst_equal (gimple_assign_rhs2 (offset_def), tunit))\n+       {\n+\t /* The first operand to the MULT_EXPR is the desired index.  */\n+\t index = gimple_assign_rhs1 (offset_def);\n+       }\n+     /* If we have idx * tunit + CST * tunit re-associate that.  */\n+     else if ((gimple_assign_rhs_code (offset_def) == PLUS_EXPR\n+\t       || gimple_assign_rhs_code (offset_def) == MINUS_EXPR)\n+\t      && TREE_CODE (gimple_assign_rhs1 (offset_def)) == SSA_NAME\n+\t      && TREE_CODE (gimple_assign_rhs2 (offset_def)) == INTEGER_CST\n+\t      && (tmp = div_if_zero_remainder (EXACT_DIV_EXPR,\n+\t\t\t\t\t       gimple_assign_rhs2 (offset_def),\n+\t\t\t\t\t       tunit)) != NULL_TREE)\n+       {\n+\t gimple offset_def2 = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (offset_def));\n+\t if (gimple_assign_rhs_code (offset_def2) == MULT_EXPR\n+\t     && TREE_CODE (gimple_assign_rhs2 (offset_def2)) == INTEGER_CST\n+\t     && tree_int_cst_equal (gimple_assign_rhs2 (offset_def2), tunit))\n+\t   {\n+\t     index = fold_build2 (gimple_assign_rhs_code (offset_def),\n+\t\t\t\t  TREE_TYPE (offset),\n+\t\t\t\t  gimple_assign_rhs1 (offset_def2), tmp);\n+\t   }\n+\t else\n+\t   return false;\n+       }\n+     else\n \treturn false;\n-\n-      /* The first operand to the MULT_EXPR is the desired index.  */\n-      index = offset;\n     }\n \n   /* Replace the pointer addition with array indexing.  */\n+  index = force_gimple_operand_gsi (use_stmt_gsi, index, true, NULL_TREE,\n+\t\t\t\t    true, GSI_SAME_STMT);\n   gimple_assign_set_rhs_from_tree (use_stmt_gsi, unshare_expr (def_rhs));\n   use_stmt = gsi_stmt (*use_stmt_gsi);\n   TREE_OPERAND (TREE_OPERAND (gimple_assign_rhs1 (use_stmt), 0), 1)"}, {"sha": "4e67c6aeaddb00bc1312ae65be1a484b04155318", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108f6c2f4efe0141c859eeb52fae610b8806ffc8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=108f6c2f4efe0141c859eeb52fae610b8806ffc8", "patch": "@@ -4832,6 +4832,7 @@ extern tree build_fold_indirect_ref (tree);\n extern tree fold_indirect_ref (tree);\n extern tree constant_boolean_node (int, tree);\n extern tree build_low_bits_mask (tree, unsigned);\n+extern tree div_if_zero_remainder (enum tree_code, const_tree, const_tree);\n \n extern bool tree_swap_operands_p (const_tree, const_tree, bool);\n extern enum tree_code swap_tree_comparison (enum tree_code);"}]}