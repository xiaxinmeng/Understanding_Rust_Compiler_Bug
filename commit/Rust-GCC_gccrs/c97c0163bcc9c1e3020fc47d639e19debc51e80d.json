{"sha": "c97c0163bcc9c1e3020fc47d639e19debc51e80d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk3YzAxNjNiY2M5YzFlMzAyMGZjNDdkNjM5ZTE5ZGViYzUxZTgwZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-05T09:08:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-05T09:08:50Z"}, "message": "[multiple changes]\n\n2010-08-05  Robert Dewar  <dewar@adacore.com>\n\n\t* a-suezse.adb, a-suezse.ads, a-suezen.adb, a-suezen.ads: Removed.\n\t* a-suewse.adb, a-suewse.ads, a-suesen.adb, a-suesen.ads,\n\ta-suewen.adb, a-suewen.ads: New files.\n\t* Makefile.rtl, impunit.adb: Update implementation of Ada 2012 string\n\tencoding packages.\n\t* sem_elab.adb: Minor reformatting.\n\n2010-08-05  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_ch8.adb (Use_One_Type): Protect against empty scopes.\n\t* exp_util.adb (Component_May_Be_Bit_Aligned): Prevent assert failure\n\tin case of null Comp.\n\nFrom-SVN: r162904", "tree": {"sha": "0f2fa14ed20ebea4be91248f8d43e6b6bef912d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f2fa14ed20ebea4be91248f8d43e6b6bef912d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c97c0163bcc9c1e3020fc47d639e19debc51e80d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97c0163bcc9c1e3020fc47d639e19debc51e80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97c0163bcc9c1e3020fc47d639e19debc51e80d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97c0163bcc9c1e3020fc47d639e19debc51e80d/comments", "author": null, "committer": null, "parents": [{"sha": "b94e425dc2a3a7ae3c9f9c9c9799cdef9c45b12e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94e425dc2a3a7ae3c9f9c9c9799cdef9c45b12e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b94e425dc2a3a7ae3c9f9c9c9799cdef9c45b12e"}], "stats": {"total": 524, "additions": 473, "deletions": 51}, "files": [{"sha": "9958ead770407b391915e2bf632b2ad97a25f85b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -1,3 +1,18 @@\n+2010-08-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-suezse.adb, a-suezse.ads, a-suezen.adb, a-suezen.ads: Removed.\n+\t* a-suewse.adb, a-suewse.ads, a-suesen.adb, a-suesen.ads,\n+\ta-suewen.adb, a-suewen.ads: New files.\n+\t* Makefile.rtl, impunit.adb: Update implementation of Ada 2012 string\n+\tencoding packages.\n+\t* sem_elab.adb: Minor reformatting.\n+\n+2010-08-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Use_One_Type): Protect against empty scopes.\n+\t* exp_util.adb (Component_May_Be_Bit_Aligned): Prevent assert failure\n+\tin case of null Comp.\n+\n 2010-08-05  Robert Dewar  <dewar@adacore.com>\n \n \t* errout.adb, a-suewen.adb, a-suezen.adb: Minor reformatting."}, {"sha": "169c368427c9645dd82b86cefac31edca692cc13", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -227,8 +227,9 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-stzsup$(objext) \\\n   a-stzunb$(objext) \\\n   a-suenco$(objext) \\\n-  a-suewen$(objext) \\\n-  a-suezen$(objext) \\\n+  a-suesen$(objext) \\\n+  a-suewse$(objext) \\\n+  a-suezse$(objext) \\\n   a-suteio$(objext) \\\n   a-swbwha$(objext) \\\n   a-swfwha$(objext) \\"}, {"sha": "263e6ec9241a3ff3c5f3f4ce6e3945db7668a00e", "filename": "gcc/ada/a-suesen.adb", "status": "added", "additions": 341, "deletions": 0, "changes": 341, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suesen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suesen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suesen.adb?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -0,0 +1,341 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                 ADA.STRINGS.UTF_ENCODING.STRING_ENCODING                 --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2010, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body Ada.Strings.UTF_Encoding.String_Encoding is\n+   use Interfaces;\n+\n+   ------------\n+   -- Decode --\n+   ------------\n+\n+   --  Decode UTF-8/UTF-16BE/UTF-16LE input to String\n+\n+   function Decode\n+     (Item         : UTF_String;\n+      Input_Scheme : Encoding_Scheme) return String\n+   is\n+   begin\n+      if Input_Scheme = UTF_8 then\n+         return Decode (Item);\n+      else\n+         return Decode (To_UTF_16 (Item, Input_Scheme));\n+      end if;\n+   end Decode;\n+\n+   --  Decode UTF-8 input to String\n+\n+   function Decode (Item : UTF_8_String) return String is\n+      Result : String (1 .. Item'Length);\n+      --  Result string (worst case is same length as input)\n+\n+      Len : Natural := 0;\n+      --  Length of result stored so far\n+\n+      Iptr : Natural;\n+      --  Input Item pointer\n+\n+      C : Unsigned_8;\n+      R : Unsigned_16;\n+\n+      procedure Get_Continuation;\n+      --  Reads a continuation byte of the form 10xxxxxx, shifts R left\n+      --  by 6 bits, and or's in the xxxxxx to the low order 6 bits. On\n+      --  return Ptr is incremented. Raises exceptioon if continuation\n+      --  byte does not exist or is invalid.\n+\n+      ----------------------\n+      -- Get_Continuation --\n+      ----------------------\n+\n+      procedure Get_Continuation is\n+      begin\n+         if Iptr > Item'Last then\n+            Raise_Encoding_Error (Iptr - 1);\n+\n+         else\n+            C := To_Unsigned_8 (Item (Iptr));\n+            Iptr := Iptr + 1;\n+\n+            if C not in 2#10_000000# .. 2#10_111111# then\n+               Raise_Encoding_Error (Iptr - 1);\n+            else\n+               R := Shift_Left (R, 6) or Unsigned_16 (C and 2#00_111111#);\n+            end if;\n+         end if;\n+      end Get_Continuation;\n+\n+   --  Start of processing for Decode\n+\n+   begin\n+      Iptr := Item'First;\n+\n+      --  Skip BOM at start\n+\n+      if Item'Length >= 3\n+        and then Item (Iptr .. Iptr + 2) = BOM_8\n+      then\n+         Iptr := Iptr + 3;\n+\n+      --  Error if bad BOM\n+\n+      elsif Item'Length >= 2\n+        and then (Item (Iptr .. Iptr + 1) = BOM_16BE\n+                    or else\n+                  Item (Iptr .. Iptr + 1) = BOM_16LE)\n+      then\n+         Raise_Encoding_Error (Iptr);\n+      end if;\n+\n+      while Iptr <= Item'Last loop\n+         C := To_Unsigned_8 (Item (Iptr));\n+         Iptr := Iptr + 1;\n+\n+         --  Codes in the range 16#00# - 16#7F# are represented as\n+         --    0xxxxxxx\n+\n+         if C <= 16#7F# then\n+            R := Unsigned_16 (C);\n+\n+         --  No initial code can be of the form 10xxxxxx. Such codes are used\n+         --  only for continuations.\n+\n+         elsif C <= 2#10_111111# then\n+            Raise_Encoding_Error (Iptr - 1);\n+\n+         --  Codes in the range 16#80# - 16#7FF# are represented as\n+         --    110yyyxx 10xxxxxx\n+\n+         elsif C <= 2#110_11111# then\n+            R := Unsigned_16 (C and 2#000_11111#);\n+            Get_Continuation;\n+\n+         --  Codes in the range 16#800# - 16#FFFF# are represented as\n+         --    1110yyyy 10yyyyxx 10xxxxxx\n+\n+         --  Such codes are out of range for type Character\n+\n+         --  Codes in the range 16#10000# - 16#10FFFF# are represented as\n+         --    11110zzz 10zzyyyy 10yyyyxx 10xxxxxx\n+\n+         --  Such codes are out of range for Wide_String output\n+\n+         --  Thus all remaining cases raise Encoding_Error\n+\n+         else\n+            Raise_Encoding_Error (Iptr - 1);\n+         end if;\n+\n+         Len := Len + 1;\n+         Result (Len) := Character'Val (R);\n+      end loop;\n+\n+      return Result (1 .. Len);\n+   end Decode;\n+\n+   --  Decode UTF-16 input to String\n+\n+   function Decode (Item : UTF_16_Wide_String) return String is\n+      Result : String (1 .. Item'Length);\n+      --  Result is same length as input (possibly minus 1 if BOM present)\n+\n+      Len : Natural := 0;\n+      --  Length of result\n+\n+      Iptr : Natural;\n+      --  Index of next Item element\n+\n+      C : Unsigned_16;\n+\n+   begin\n+      --  Skip UTF-16 BOM at start\n+\n+      Iptr := Item'First;\n+\n+      if Item'Length > 0 and then Item (Iptr) = BOM_16 (1) then\n+         Iptr := Iptr + 1;\n+      end if;\n+\n+      --  Loop through input characters\n+\n+      while Iptr <= Item'Last loop\n+         C := To_Unsigned_16 (Item (Iptr));\n+         Iptr := Iptr + 1;\n+\n+         --  Codes in the range 16#0000#..16#00FF# represent their own value\n+\n+         if C <= 16#00FF# then\n+            Len := Len + 1;\n+            Result (Len) := Character'Val (C);\n+\n+         --  All other codes are invalid, either they are invalid UTF-16\n+         --  encoding sequences, or they represent values that are out of\n+         --  range for type Character.\n+\n+         else\n+            Raise_Encoding_Error (Iptr - 1);\n+         end if;\n+      end loop;\n+\n+      return Result (1 .. Len);\n+   end Decode;\n+\n+   ------------\n+   -- Encode --\n+   ------------\n+\n+   --  Encode String in UTF-8, UTF-16BE or UTF-16LE\n+\n+   function Encode\n+     (Item          : String;\n+      Output_Scheme : Encoding_Scheme;\n+      Output_BOM    : Boolean  := False) return UTF_String\n+   is\n+   begin\n+      --  Case of UTF_8\n+\n+      if Output_Scheme = UTF_8 then\n+         return Encode (Item, Output_BOM);\n+\n+      --  Case of UTF_16LE or UTF_16BE, use UTF-16 intermediary\n+\n+      else\n+         return From_UTF_16 (UTF_16_Wide_String'(Encode (Item)),\n+                             Output_Scheme, Output_BOM);\n+      end if;\n+   end Encode;\n+\n+   --  Encode String in UTF-8\n+\n+   function Encode\n+     (Item       : String;\n+      Output_BOM : Boolean  := False) return UTF_8_String\n+   is\n+      Result : UTF_8_String (1 .. 3 * Item'Length + 3);\n+      --  Worst case is three bytes per input byte + space for BOM\n+\n+      Len : Natural;\n+      --  Number of output codes stored in Result\n+\n+      C : Unsigned_8;\n+      --  Single input character\n+\n+      procedure Store (C : Unsigned_8);\n+      pragma Inline (Store);\n+      --  Store one output code, C is in the range 0 .. 255\n+\n+      -----------\n+      -- Store --\n+      -----------\n+\n+      procedure Store (C : Unsigned_8) is\n+      begin\n+         Len := Len + 1;\n+         Result (Len) := Character'Val (C);\n+      end Store;\n+\n+   --  Start of processing for UTF8_Encode\n+\n+   begin\n+      --  Output BOM if required\n+\n+      if Output_BOM then\n+         Result (1 .. 3) := BOM_8;\n+         Len := 3;\n+      else\n+         Len := 0;\n+      end if;\n+\n+      --  Loop through characters of input\n+\n+      for J in Item'Range loop\n+         C := To_Unsigned_8 (Item (J));\n+\n+         --  Codes in the range 16#00# - 16#7F# are represented as\n+         --    0xxxxxxx\n+\n+         if C <= 16#7F# then\n+            Store (C);\n+\n+         --  Codes in the range 16#80# - 16#7FF# are represented as\n+         --    110yyyxx 10xxxxxx\n+\n+         --  For type character of course, the limit is 16#FF# in any case\n+\n+         else\n+            Store (2#110_00000# or Shift_Right (C, 6));\n+            Store (2#10_000000# or (C and 2#00_111111#));\n+         end if;\n+      end loop;\n+\n+      return Result (1 .. Len);\n+   end Encode;\n+\n+   --  Encode String in UTF-16\n+\n+   function Encode\n+     (Item       : String;\n+      Output_BOM : Boolean  := False) return UTF_16_Wide_String\n+   is\n+      Result : UTF_16_Wide_String\n+                 (1 .. Item'Length + Boolean'Pos (Output_BOM));\n+      --  Output is same length as input + possible BOM\n+\n+      Len : Integer;\n+      --  Length of output string\n+\n+      C : Unsigned_8;\n+\n+   begin\n+      --  Output BOM if required\n+\n+      if Output_BOM then\n+         Result (1) := BOM_16 (1);\n+         Len := 1;\n+      else\n+         Len := 0;\n+      end if;\n+\n+      --  Loop through input characters encoding them\n+\n+      for Iptr in Item'Range loop\n+         C := To_Unsigned_8 (Item (Iptr));\n+\n+         --  Codes in the range 16#0000#..16#00FF# are output unchanged. This\n+         --  includes all possible cases of Character values.\n+\n+         Len := Len + 1;\n+         Result (Len) := Wide_Character'Val (C);\n+      end loop;\n+\n+      return Result;\n+   end Encode;\n+\n+end Ada.Strings.UTF_Encoding.String_Encoding;"}, {"sha": "a8f913e454d7559f004fdd8f61aaf5ced2717ee6", "filename": "gcc/ada/a-suesen.ads", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suesen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suesen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suesen.ads?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -0,0 +1,65 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                 ADA.STRINGS.UTF_ENCODING.STRING_ENCODING                 --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is an Ada 2012 package defined in AI05-0137-1. It is used for encoding\n+--  and decoding String values using UTF encodings. Note: this package is\n+--  consistent with Ada 95, and may be included in Ada 95 implementations.\n+\n+package Ada.Strings.UTF_Encoding.String_Encoding is\n+   pragma Pure (String_Encoding);\n+\n+   --  The encoding routines take a String as input and encode the result\n+   --  using the specified UTF encoding method. The result includes a BOM if\n+   --  the Output_BOM argument is set to True. All 256 values of type Character\n+   --  are valid, so Encoding_Error cannot be raised for string input data.\n+\n+   function Encode\n+     (Item          : String;\n+      Output_Scheme : Encoding_Scheme;\n+      Output_BOM    : Boolean  := False) return UTF_String;\n+   --  Encode String using UTF-8, UTF-16LE or UTF-16BE encoding as specified by\n+   --  the Output_Scheme parameter.\n+\n+   function Encode\n+     (Item       : String;\n+      Output_BOM : Boolean  := False) return UTF_8_String;\n+   --  Encode String using UTF-8 encoding\n+\n+   function Encode\n+     (Item       : String;\n+      Output_BOM : Boolean  := False) return UTF_16_Wide_String;\n+   --  Encode String using UTF_16 encoding\n+\n+   --  The decoding routines take a UTF String as input, and return a decoded\n+   --  Wide_String. If the UTF String starts with a BOM that matches the\n+   --  encoding method, it is ignored. An incorrect BOM raises Encoding_Error,\n+   --  as does a code out of range of type Character.\n+\n+   function Decode\n+     (Item         : UTF_String;\n+      Input_Scheme : Encoding_Scheme) return String;\n+   --  The input is encoded in UTF_8, UTF_16LE or UTF_16BE as specified by the\n+   --  Input_Scheme parameter. It is decoded and returned as a String value.\n+   --  Note: a convenient form for scheme may be Encoding (UTF_String).\n+\n+   function Decode\n+     (Item : UTF_8_String) return String;\n+   --  The input is encoded in UTF-8 and returned as a String value\n+\n+   function Decode\n+     (Item : UTF_16_Wide_String) return String;\n+   --  The input is encoded in UTF-16 and returned as a String value\n+\n+end Ada.Strings.UTF_Encoding.String_Encoding;"}, {"sha": "1b697b91f9dd3eea8f8f8cfaf41035cd0e191d58", "filename": "gcc/ada/a-suewse.adb", "status": "renamed", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suewse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suewse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suewse.adb?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -2,36 +2,34 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                  ADA.STRINGS.UTF_ENCODING.WIDE_ENCODING                  --\n+--               ADA.STRINGS.UTF_ENCODING.WIDE_STRING_ENCODING              --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n --             Copyright (C) 2010, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS  FOR A PARTICULAR PURPOSE. See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n --                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n --                                                                          --\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package body Ada.Strings.UTF_Encoding.Wide_Encoding is\n+package body Ada.Strings.UTF_Encoding.Wide_String_Encoding is\n    use Interfaces;\n \n    ------------\n@@ -369,4 +367,4 @@ package body Ada.Strings.UTF_Encoding.Wide_Encoding is\n       return Result;\n    end Encode;\n \n-end Ada.Strings.UTF_Encoding.Wide_Encoding;\n+end Ada.Strings.UTF_Encoding.Wide_String_Encoding;", "previous_filename": "gcc/ada/a-suewen.adb"}, {"sha": "c013bad69769480d2535deeb2baea24b15dfd83b", "filename": "gcc/ada/a-suewse.ads", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suewse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suewse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suewse.ads?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                  ADA.STRINGS.UTF_ENCODING.WIDE_ENCODING                  --\n+--               ADA.STRINGS.UTF_ENCODING.WIDE_STRING_ENCODING              --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n@@ -17,8 +17,8 @@\n --  and decoding Wide_String values using UTF encodings. Note: this package is\n --  consistent with Ada 95, and may be included in Ada 95 implementations.\n \n-package Ada.Strings.UTF_Encoding.Wide_Encoding is\n-   pragma Pure (Wide_Encoding);\n+package Ada.Strings.UTF_Encoding.Wide_String_Encoding is\n+   pragma Pure (Wide_String_Encoding);\n \n    --  The encoding routines take a Wide_String as input and encode the result\n    --  using the specified UTF encoding method. The result includes a BOM if\n@@ -64,4 +64,4 @@ package Ada.Strings.UTF_Encoding.Wide_Encoding is\n      (Item : UTF_16_Wide_String) return Wide_String;\n    --  The input is encoded in UTF-16 and returned as a Wide_String value\n \n-end Ada.Strings.UTF_Encoding.Wide_Encoding;\n+end Ada.Strings.UTF_Encoding.Wide_String_Encoding;", "previous_filename": "gcc/ada/a-suewen.ads"}, {"sha": "2aaf6b8329f7a34c25c72aace3e180af359d0546", "filename": "gcc/ada/a-suezse.adb", "status": "renamed", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suezse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suezse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suezse.adb?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -2,36 +2,34 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---               ADA.STRINGS.UTF_ENCODING.WIDE_WIDE_ENCODING                --\n+--            ADA.STRINGS.UTF_ENCODING.WIDE_WIDE_STRING_ENCODING            --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n --             Copyright (C) 2010, Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n -- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n -- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS  FOR A PARTICULAR PURPOSE. See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n --                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n --                                                                          --\n -- GNAT was originally developed  by the GNAT team at  New York University. --\n -- Extensive contributions were provided by Ada Core Technologies Inc.      --\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package body Ada.Strings.UTF_Encoding.Wide_Wide_Encoding is\n+package body Ada.Strings.UTF_Encoding.Wide_Wide_String_Encoding is\n    use Interfaces;\n \n    ------------\n@@ -428,4 +426,4 @@ package body Ada.Strings.UTF_Encoding.Wide_Wide_Encoding is\n       return Result (1 .. Len);\n    end Encode;\n \n-end Ada.Strings.UTF_Encoding.Wide_Wide_Encoding;\n+end Ada.Strings.UTF_Encoding.Wide_Wide_String_Encoding;", "previous_filename": "gcc/ada/a-suezen.adb"}, {"sha": "1882f426d8e77e42ee4b109db9e0824670a8b123", "filename": "gcc/ada/a-suezse.ads", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suezse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fa-suezse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suezse.ads?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---                ADA.STRINGS.UTF_ENCODING.WIDE_WIDE_ENCODING               --\n+--            ADA.STRINGS.UTF_ENCODING.WIDE_WIDE_STRING_ENCODING            --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n@@ -18,8 +18,8 @@\n --  consistent with Ada 2005, and may be used in Ada 2005 mode, but cannot be\n --  used in Ada 95 mode, since Wide_Wide_Character is an Ada 2005 feature.\n \n-package Ada.Strings.UTF_Encoding.Wide_Wide_Encoding is\n-   pragma Pure (Wide_Wide_Encoding);\n+package Ada.Strings.UTF_Encoding.Wide_Wide_String_Encoding is\n+   pragma Pure (Wide_Wide_String_Encoding);\n \n    --  The encoding routines take a Wide_Wide_String as input and encode the\n    --  result using the specified UTF encoding method. The result includes a\n@@ -61,4 +61,4 @@ package Ada.Strings.UTF_Encoding.Wide_Wide_Encoding is\n      (Item : UTF_16_Wide_String) return Wide_Wide_String;\n    --  The input is encoded in UTF-16 and returned as a Wide_String value\n \n-end Ada.Strings.UTF_Encoding.Wide_Wide_Encoding;\n+end Ada.Strings.UTF_Encoding.Wide_Wide_String_Encoding;", "previous_filename": "gcc/ada/a-suezen.ads"}, {"sha": "133a767f0562d8e33ff6faa64222fa4692e99ee4", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -904,17 +904,19 @@ package body Exp_Util is\n    ----------------------------------\n \n    function Component_May_Be_Bit_Aligned (Comp : Entity_Id) return Boolean is\n-      UT : constant Entity_Id := Underlying_Type (Etype (Comp));\n+      UT : Entity_Id;\n \n    begin\n       --  If no component clause, then everything is fine, since the back end\n       --  never bit-misaligns by default, even if there is a pragma Packed for\n       --  the record.\n \n-      if No (Component_Clause (Comp)) then\n+      if No (Comp) or else No (Component_Clause (Comp)) then\n          return False;\n       end if;\n \n+      UT := Underlying_Type (Etype (Comp));\n+\n       --  It is only array and record types that cause trouble\n \n       if not Is_Record_Type (UT)"}, {"sha": "53f47830d660aa98109ca3dfa7313ed28cb12e68", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -173,13 +173,14 @@ package body Impunit is\n      \"a-wichun\",    -- Ada.Wide_Characters.Unicode\n      \"a-widcha\",    -- Ada.Wide_Characters\n \n-      --  Note: strictly the next two should be Ada 2012 units, but it seems\n+      --  Note: strictly the following should be Ada 2012 units, but it seems\n       --  harmless (and useful) to make then available in Ada 95 mode, since\n-      --  they only deal with Wide_Character, not Wide_Wide_Character.\n+      --  they do not deal with Wide_Wide_Character.\n \n      \"a-stuten\",    -- Ada.Strings.UTF_Encoding\n      \"a-suenco\",    -- Ada.Strings.UTF_Encoding.Conversions\n-     \"a-suewen\",    -- Ada.Strings.UTF_Encoding.Wide_Encoding\n+     \"a-suesen\",    -- Ada.Strings.UTF_Encoding.String_Encoding\n+     \"a-suewse\",    -- Ada.Strings.UTF_Encoding.Wide_String_Encoding\n \n    ---------------------------\n    -- GNAT Special IO Units --\n@@ -470,7 +471,7 @@ package body Impunit is\n       --  Note: strictly the following should be Ada 2012 units, but it seems\n       --  harmless (and useful) to make then available in Ada 2005 mode.\n \n-     \"a-suezen\",    -- Ada.Strings.UTF_Encoding.Wide_Wide_Encoding\n+     \"a-suezse\",    -- Ada.Strings.UTF_Encoding.Wide_Wide_String_Encoding\n \n    ---------------------------\n    -- GNAT Special IO Units --"}, {"sha": "69588621a7d25a316766bf82609145d619095eea", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -7622,9 +7622,10 @@ package body Sem_Ch8 is\n                         begin\n                            S1 := Scope (Ent1);\n                            S2 := Scope (Ent2);\n-                           while S1 /= Standard_Standard\n-                                   and then\n-                                 S2 /= Standard_Standard\n+                           while Present (S1)\n+                             and then Present (S2)\n+                             and then S1 /= Standard_Standard\n+                             and then S2 /= Standard_Standard\n                            loop\n                               S1 := Scope (S1);\n                               S2 := Scope (S2);"}, {"sha": "7ed76f61ee8a686a027174f81ab1729ed9b83567", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97c0163bcc9c1e3020fc47d639e19debc51e80d/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=c97c0163bcc9c1e3020fc47d639e19debc51e80d", "patch": "@@ -2850,8 +2850,8 @@ package body Sem_Elab is\n                Typ : constant Entity_Id := Etype (N);\n                Chk : constant Boolean   := Do_Range_Check (N);\n \n-               R   : constant Node_Id :=\n-                       Make_Raise_Program_Error (Loc,\n+               R  : constant Node_Id :=\n+                      Make_Raise_Program_Error (Loc,\n                          Reason => PE_Access_Before_Elaboration);\n \n                Reloc_N : Node_Id;"}]}