{"sha": "488ce07ba2af2b5d6175511025539989afd317a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg4Y2UwN2JhMmFmMmI1ZDYxNzU1MTEwMjU1Mzk5ODlhZmQzMTdhMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2005-12-16T09:16:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-12-16T09:16:12Z"}, "message": "(gfc_conv_descriptor_data_addr): Use build_fold_addr_expr where appropriate.\n\n2005-12-16  Richard Guenther  <rguenther@suse.de>\n\n\t(gfc_conv_descriptor_data_addr): Use build_fold_addr_expr where\n\tappropriate.\n\t(gfc_trans_allocate_array_storage): Likewise.\n\t(gfc_trans_array_constructor_value): Likewise.\n\t(gfc_conv_array_data): Likewise.\n\t(gfc_conv_expr_descriptor): Likewise.\n\t(gfc_conv_array_parameter): Likewise.\n\t(gfc_conv_variable): Likewise.\n\t(gfc_conv_function_val): Likewise.\n\t(gfc_conv_function_call): Likewise.\n\t(gfc_conv_expr_reference): Likewise.\n\t(gfc_conv_intrinsic_ctime): Likewise.\n\t(gfc_conv_intrinsic_fdate): Likewise.\n\t(gfc_conv_intrinsic_ttynam): Likewise.\n\t(gfc_conv_intrinsic_si_kind): Likewise.\n\t(gfc_conv_intrinsic_trim): Likewise.\n\t(set_parameter_ref): Likewise.\n\t(gfc_convert_array_to_string): Likewise.\n\t(gfc_trans_open): Likewise.\n\t(gfc_trans_close): Likewise.\n\t(build_filepos): Likewise.\n\t(gfc_trans_inquire): Likewise.\n\t(nml_get_addr_expr): Likewise.\n\t(transfer_namelist_element): Likewise.\n\t(build_dt): Likewise.\n\t(gfc_trans_dt_end): Likewise.\n\t(transfer_array_component): Likewise.\n\t(transfer_expr): Likewise.\n\t(transfer_array_desc): Likewise.\n\t(gfc_trans_transfer): Likewise.\n\t(gfc_trans_allocate): Likewise.\n\t(gfc_trans_deallocate): Likewise.\n\nFrom-SVN: r108633", "tree": {"sha": "4a55c902f62046bb86afef26740e4f24ad3820c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a55c902f62046bb86afef26740e4f24ad3820c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/488ce07ba2af2b5d6175511025539989afd317a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488ce07ba2af2b5d6175511025539989afd317a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/488ce07ba2af2b5d6175511025539989afd317a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488ce07ba2af2b5d6175511025539989afd317a2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52c6b0b7dcd73fac95b1cd07b7fe4a0bc1935233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c6b0b7dcd73fac95b1cd07b7fe4a0bc1935233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c6b0b7dcd73fac95b1cd07b7fe4a0bc1935233"}], "stats": {"total": 125, "additions": 80, "deletions": 45}, "files": [{"sha": "3f19ea402086c929feeb05e44302120d0d50e591", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=488ce07ba2af2b5d6175511025539989afd317a2", "patch": "@@ -1,3 +1,38 @@\n+2005-12-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t(gfc_conv_descriptor_data_addr): Use build_fold_addr_expr where\n+\tappropriate.\n+\t(gfc_trans_allocate_array_storage): Likewise.\n+\t(gfc_trans_array_constructor_value): Likewise.\n+\t(gfc_conv_array_data): Likewise.\n+\t(gfc_conv_expr_descriptor): Likewise.\n+\t(gfc_conv_array_parameter): Likewise.\n+\t(gfc_conv_variable): Likewise.\n+\t(gfc_conv_function_val): Likewise.\n+\t(gfc_conv_function_call): Likewise.\n+\t(gfc_conv_expr_reference): Likewise.\n+\t(gfc_conv_intrinsic_ctime): Likewise.\n+\t(gfc_conv_intrinsic_fdate): Likewise.\n+\t(gfc_conv_intrinsic_ttynam): Likewise.\n+\t(gfc_conv_intrinsic_si_kind): Likewise.\n+\t(gfc_conv_intrinsic_trim): Likewise.\n+\t(set_parameter_ref): Likewise.\n+\t(gfc_convert_array_to_string): Likewise.\n+\t(gfc_trans_open): Likewise.\n+\t(gfc_trans_close): Likewise.\n+\t(build_filepos): Likewise.\n+\t(gfc_trans_inquire): Likewise.\n+\t(nml_get_addr_expr): Likewise.\n+\t(transfer_namelist_element): Likewise.\n+\t(build_dt): Likewise.\n+\t(gfc_trans_dt_end): Likewise.\n+\t(transfer_array_component): Likewise.\n+\t(transfer_expr): Likewise.\n+\t(transfer_array_desc): Likewise.\n+\t(gfc_trans_transfer): Likewise.\n+\t(gfc_trans_allocate): Likewise.\n+\t(gfc_trans_deallocate): Likewise.\n+\n 2005-12-16  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* dependency.c, resolve.c, trans-array.c: Fix comment typos."}, {"sha": "1c03f2a03cee43b230420188fc6f42d692aefadc", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=488ce07ba2af2b5d6175511025539989afd317a2", "patch": "@@ -188,7 +188,7 @@ gfc_conv_descriptor_data_addr (tree desc)\n   gcc_assert (DATA_FIELD == 0);\n \n   t = build3 (COMPONENT_REF, TREE_TYPE (field), desc, field, NULL_TREE);\n-  return gfc_build_addr_expr (NULL, t);\n+  return build_fold_addr_expr (t);\n }\n \n tree\n@@ -519,7 +519,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n \t  tmp = build_array_type (gfc_get_element_type (TREE_TYPE (desc)),\n \t\t\t\t  tmp);\n \t  tmp = gfc_create_var (tmp, \"A\");\n-\t  tmp = gfc_build_addr_expr (NULL, tmp);\n+\t  tmp = build_fold_addr_expr (tmp);\n \t  gfc_conv_descriptor_data_set (pre, desc, tmp);\n \t}\n       else\n@@ -1159,8 +1159,8 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t      tmp = gfc_conv_descriptor_data_get (desc);\n \t      tmp = gfc_build_indirect_ref (tmp);\n \t      tmp = gfc_build_array_ref (tmp, *poffset);\n-\t      tmp = gfc_build_addr_expr (NULL, tmp);\n-\t      init = gfc_build_addr_expr (NULL, init);\n+\t      tmp = build_fold_addr_expr (tmp);\n+\t      init = build_fold_addr_expr (init);\n \n \t      size = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (type));\n \t      bound = build_int_cst (NULL_TREE, n * size);\n@@ -1670,7 +1670,7 @@ gfc_conv_array_data (tree descriptor)\n       else\n         {\n           /* Descriptorless arrays.  */\n-\t  return gfc_build_addr_expr (NULL, descriptor);\n+\t  return build_fold_addr_expr (descriptor);\n         }\n     }\n   else\n@@ -3830,7 +3830,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t    {\n \t      /* We pass full arrays directly.  This means that pointers and\n \t\t allocatable arrays should also work.  */\n-\t      se->expr = gfc_build_addr_expr (NULL_TREE, desc);\n+\t      se->expr = build_fold_addr_expr (desc);\n \t    }\n \t  else\n \t    {\n@@ -3861,7 +3861,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \n \t  /* For pointer assignments pass the descriptor directly.  */\n \t  se->ss = secss;\n-\t  se->expr = gfc_build_addr_expr (NULL, se->expr);\n+\t  se->expr = build_fold_addr_expr (se->expr);\n \t  gfc_conv_expr (se, expr);\n \t  return;\n \t}\n@@ -4144,7 +4144,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n     {\n       /* Get a pointer to the new descriptor.  */\n       if (se->want_pointer)\n-\tse->expr = gfc_build_addr_expr (NULL, desc);\n+\tse->expr = build_fold_addr_expr (desc);\n       else\n \tse->expr = desc;\n     }\n@@ -4187,7 +4187,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n           if (sym->attr.dummy || POINTER_TYPE_P (TREE_TYPE (tmp)))\n             se->expr = tmp;\n           else\n-\t    se->expr = gfc_build_addr_expr (NULL, tmp);\n+\t    se->expr = build_fold_addr_expr (tmp);\n \t  return;\n         }\n       if (sym->attr.allocatable)"}, {"sha": "7d233d5db724f3f94a24a1d79b7b1dcc6355de5d", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=488ce07ba2af2b5d6175511025539989afd317a2", "patch": "@@ -355,7 +355,7 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n \t  if (!sym->attr.dummy)\n \t    {\n \t      gcc_assert (TREE_CODE (se->expr) == FUNCTION_DECL);\n-\t      se->expr = gfc_build_addr_expr (NULL, se->expr);\n+\t      se->expr = build_fold_addr_expr (se->expr);\n \t    }\n \t  return;\n \t}\n@@ -451,7 +451,7 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n       if (expr->ts.type == BT_CHARACTER)\n \tgfc_conv_string_parameter (se);\n       else \n-\tse->expr = gfc_build_addr_expr (NULL, se->expr);\n+\tse->expr = build_fold_addr_expr (se->expr);\n     }\n }\n \n@@ -1099,7 +1099,7 @@ gfc_conv_function_val (gfc_se * se, gfc_symbol * sym)\n       if (!POINTER_TYPE_P (TREE_TYPE (tmp)))\n \t{\n \t  gcc_assert (TREE_CODE (tmp) == FUNCTION_DECL);\n-\t  tmp = gfc_build_addr_expr (NULL, tmp);\n+\t  tmp = build_fold_addr_expr (tmp);\n \t}\n     }\n   se->expr = tmp;\n@@ -1590,7 +1590,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n                   /* Scalar pointer dummy args require an extra level of\n \t\t  indirection. The null pointer already contains\n \t\t  this level of indirection.  */\n-                  parmse.expr = gfc_build_addr_expr (NULL, parmse.expr);\n+                  parmse.expr = build_fold_addr_expr (parmse.expr);\n                 }\n             }\n \t  else\n@@ -1674,7 +1674,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \n \t  /* Pass the temporary as the first argument.  */\n \t  tmp = info->descriptor;\n-\t  tmp = gfc_build_addr_expr (NULL, tmp);\n+\t  tmp = build_fold_addr_expr (tmp);\n \t  retargs = gfc_chainon_list (retargs, tmp);\n \t}\n       else if (ts.type == BT_CHARACTER)\n@@ -1696,7 +1696,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t      var = gfc_create_var (build_pointer_type (tmp), \"pstr\");\n \n \t      /* Provide an address expression for the function arguments.  */\n-\t      var = gfc_build_addr_expr (NULL, var);\n+\t      var = build_fold_addr_expr (var);\n \t    }\n \t  else\n \t    var = gfc_conv_string_tmp (se, type, len);\n@@ -1708,7 +1708,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t  gcc_assert (gfc_option.flag_f2c && ts.type == BT_COMPLEX);\n \n \t  type = gfc_get_complex_type (ts.kind);\n-\t  var = gfc_build_addr_expr (NULL, gfc_create_var (type, \"cmplx\"));\n+\t  var = build_fold_addr_expr (gfc_create_var (type, \"cmplx\"));\n \t  retargs = gfc_chainon_list (retargs, var);\n \t}\n \n@@ -1736,7 +1736,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n       TREE_TYPE (sym->backend_decl)\n         = build_function_type (integer_type_node,\n                                TYPE_ARG_TYPES (TREE_TYPE (sym->backend_decl)));\n-      se->expr = gfc_build_addr_expr (NULL, sym->backend_decl);\n+      se->expr = build_fold_addr_expr (sym->backend_decl);\n     }\n \n   fntype = TREE_TYPE (TREE_TYPE (se->expr));\n@@ -2437,7 +2437,7 @@ gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr)\n   gfc_add_block_to_block (&se->pre, &se->post);\n \n   /* Take the address of that value.  */\n-  se->expr = gfc_build_addr_expr (NULL, var);\n+  se->expr = build_fold_addr_expr (var);\n }\n \n "}, {"sha": "7beed1ac114f575b4c7193ed6d4b9e536192d282", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=488ce07ba2af2b5d6175511025539989afd317a2", "patch": "@@ -1053,8 +1053,8 @@ gfc_conv_intrinsic_ctime (gfc_se * se, gfc_expr * expr)\n   len = gfc_create_var (gfc_int8_type_node, \"len\");\n \n   tmp = gfc_conv_intrinsic_function_args (se, expr);\n-  arglist = gfc_chainon_list (NULL_TREE, gfc_build_addr_expr (NULL, var));\n-  arglist = gfc_chainon_list (arglist, gfc_build_addr_expr (NULL, len));\n+  arglist = gfc_chainon_list (NULL_TREE, build_fold_addr_expr (var));\n+  arglist = gfc_chainon_list (arglist, build_fold_addr_expr (len));\n   arglist = chainon (arglist, tmp);\n \n   tmp = gfc_build_function_call (gfor_fndecl_ctime, arglist);\n@@ -1089,8 +1089,8 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n   len = gfc_create_var (gfc_int4_type_node, \"len\");\n \n   tmp = gfc_conv_intrinsic_function_args (se, expr);\n-  arglist = gfc_chainon_list (NULL_TREE, gfc_build_addr_expr (NULL, var));\n-  arglist = gfc_chainon_list (arglist, gfc_build_addr_expr (NULL, len));\n+  arglist = gfc_chainon_list (NULL_TREE, build_fold_addr_expr (var));\n+  arglist = gfc_chainon_list (arglist, build_fold_addr_expr (len));\n   arglist = chainon (arglist, tmp);\n \n   tmp = gfc_build_function_call (gfor_fndecl_fdate, arglist);\n@@ -1127,8 +1127,8 @@ gfc_conv_intrinsic_ttynam (gfc_se * se, gfc_expr * expr)\n   len = gfc_create_var (gfc_int4_type_node, \"len\");\n \n   tmp = gfc_conv_intrinsic_function_args (se, expr);\n-  arglist = gfc_chainon_list (NULL_TREE, gfc_build_addr_expr (NULL, var));\n-  arglist = gfc_chainon_list (arglist, gfc_build_addr_expr (NULL, len));\n+  arglist = gfc_chainon_list (NULL_TREE, build_fold_addr_expr (var));\n+  arglist = gfc_chainon_list (arglist, build_fold_addr_expr (len));\n   arglist = chainon (arglist, tmp);\n \n   tmp = gfc_build_function_call (gfor_fndecl_ttynam, arglist);\n@@ -2721,7 +2721,7 @@ gfc_conv_intrinsic_si_kind (gfc_se * se, gfc_expr * expr)\n \n   args = gfc_conv_intrinsic_function_args (se, expr);\n   args = TREE_VALUE (args);\n-  args = gfc_build_addr_expr (NULL, args);\n+  args = build_fold_addr_expr (args);\n   args = tree_cons (NULL_TREE, args, NULL_TREE);\n   se->expr = gfc_build_function_call (gfor_fndecl_si_kind, args);\n }\n@@ -2776,7 +2776,7 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   len = gfc_create_var (gfc_int4_type_node, \"len\");\n \n   tmp = gfc_conv_intrinsic_function_args (se, expr);\n-  arglist = gfc_chainon_list (arglist, gfc_build_addr_expr (NULL, len));\n+  arglist = gfc_chainon_list (arglist, build_fold_addr_expr (len));\n   arglist = gfc_chainon_list (arglist, addr);\n   arglist = chainon (arglist, tmp);\n "}, {"sha": "6b3ef8e5bb5a04928347afb589f35b85162666de", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=488ce07ba2af2b5d6175511025539989afd317a2", "patch": "@@ -414,7 +414,7 @@ set_parameter_ref (stmtblock_t *block, stmtblock_t *postblock,\n   if (TYPE_MODE (TREE_TYPE (se.expr))\n       == TYPE_MODE (TREE_TYPE (TREE_TYPE (p->field))))\n     addr = convert (TREE_TYPE (p->field),\n-\t\t    gfc_build_addr_expr (NULL, se.expr));\n+\t\t    build_fold_addr_expr (se.expr));\n   else\n     {\n       /* The type used by the library has different size\n@@ -423,7 +423,7 @@ set_parameter_ref (stmtblock_t *block, stmtblock_t *postblock,\n       tree tmpvar\n \t= gfc_create_var (TREE_TYPE (TREE_TYPE (p->field)),\n \t\t\t  st_parameter_field[type].name);\n-      addr = gfc_build_addr_expr (NULL, tmpvar);\n+      addr = build_fold_addr_expr (tmpvar);\n       tmp = convert (TREE_TYPE (se.expr), tmpvar);\n       gfc_add_modify_expr (postblock, se.expr, tmp);\n     }\n@@ -491,7 +491,7 @@ gfc_convert_array_to_string (gfc_se * se, gfc_expr * e)\n     {\n       size = fold_build2 (MINUS_EXPR, gfc_array_index_type, size,\n \t\tTREE_OPERAND (se->expr, 1));\n-      se->expr = gfc_build_addr_expr (NULL, se->expr);\n+      se->expr = build_fold_addr_expr (se->expr);\n     }\n \n   tmp = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n@@ -797,7 +797,7 @@ gfc_trans_open (gfc_code * code)\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n-  tmp = gfc_build_addr_expr (NULL_TREE, var);\n+  tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n   tmp = gfc_build_function_call (iocall[IOCALL_OPEN], tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -850,7 +850,7 @@ gfc_trans_close (gfc_code * code)\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n-  tmp = gfc_build_addr_expr (NULL_TREE, var);\n+  tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n   tmp = gfc_build_function_call (iocall[IOCALL_CLOSE], tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -901,7 +901,7 @@ build_filepos (tree function, gfc_code * code)\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n-  tmp = gfc_build_addr_expr (NULL_TREE, var);\n+  tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n   tmp = gfc_build_function_call (function, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -1083,7 +1083,7 @@ gfc_trans_inquire (gfc_code * code)\n \n   set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n-  tmp = gfc_build_addr_expr (NULL_TREE, var);\n+  tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n   tmp = gfc_build_function_call (iocall[IOCALL_INQUIRE], tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -1191,7 +1191,7 @@ nml_get_addr_expr (gfc_symbol * sym, gfc_component * c,\n \n   /* Now build the address expression.  */\n \n-  tmp = gfc_build_addr_expr (NULL, tmp);\n+  tmp = build_fold_addr_expr (tmp);\n \n   /* If scalar dummy, resolve indirect reference now.  */\n \n@@ -1287,7 +1287,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n      The call for the scalar part transfers:\n      (address, name, type, kind or string_length, dtype)  */\n \n-  dt_parm_addr = gfc_build_addr_expr (NULL_TREE, dt_parm);\n+  dt_parm_addr = build_fold_addr_expr (dt_parm);\n   NML_FIRST_ARG (dt_parm_addr);\n   NML_ADD_ARG (addr_expr);\n   NML_ADD_ARG (string);\n@@ -1465,7 +1465,7 @@ build_dt (tree function, gfc_code * code)\n   else\n     set_parameter_const (&block, var, IOPARM_common_flags, mask);\n \n-  tmp = gfc_build_addr_expr (NULL_TREE, var);\n+  tmp = build_fold_addr_expr (var);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n   tmp = gfc_build_function_call (function, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -1544,7 +1544,7 @@ gfc_trans_dt_end (gfc_code * code)\n       gcc_unreachable ();\n     }\n \n-  tmp = gfc_build_addr_expr (NULL_TREE, dt_parm);\n+  tmp = build_fold_addr_expr (dt_parm);\n   tmp = gfc_chainon_list (NULL_TREE, tmp);\n   tmp = gfc_build_function_call (function, tmp);\n   gfc_add_expr_to_block (&block, tmp);\n@@ -1629,7 +1629,7 @@ transfer_array_component (tree expr, gfc_component * cm)\n \n   /* Now se.expr contains an element of the array.  Take the address and pass\n      it to the IO routines.  */\n-  tmp = gfc_build_addr_expr (NULL, se.expr);\n+  tmp = build_fold_addr_expr (se.expr);\n   transfer_expr (&se, &cm->ts, tmp);\n \n   /* We are done now with the loop body.  Wrap up the scalarizer and\n@@ -1720,7 +1720,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n           else\n             {\n               if (!c->pointer)\n-                tmp = gfc_build_addr_expr (NULL, tmp);\n+                tmp = build_fold_addr_expr (tmp);\n               transfer_expr (se, &c->ts, tmp);\n             }\n \t}\n@@ -1730,7 +1730,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n       internal_error (\"Bad IO basetype (%d)\", ts->type);\n     }\n \n-  tmp = gfc_build_addr_expr (NULL_TREE, dt_parm);\n+  tmp = build_fold_addr_expr (dt_parm);\n   args = gfc_chainon_list (NULL_TREE, tmp);\n   args = gfc_chainon_list (args, addr_expr);\n   args = gfc_chainon_list (args, arg2);\n@@ -1757,7 +1757,7 @@ transfer_array_desc (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n \n   kind_arg = build_int_cst (NULL_TREE, ts->kind);\n \n-  tmp = gfc_build_addr_expr (NULL_TREE, dt_parm);\n+  tmp = build_fold_addr_expr (dt_parm);\n   args = gfc_chainon_list (NULL_TREE, tmp);\n   args = gfc_chainon_list (args, addr_expr);\n   args = gfc_chainon_list (args, kind_arg);\n@@ -1812,7 +1812,7 @@ gfc_trans_transfer (gfc_code * code)\n \t{\n \t  /* Get the descriptor.  */\n \t  gfc_conv_expr_descriptor (&se, expr, ss);\n-\t  tmp = gfc_build_addr_expr (NULL, se.expr);\n+\t  tmp = build_fold_addr_expr (se.expr);\n \t  transfer_array_desc (&se, &expr->ts, tmp);\n \t  goto finish_block_label;\n \t}"}, {"sha": "fbaa1a5b74b65ed065f1a9353997cd43e875f1e8", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488ce07ba2af2b5d6175511025539989afd317a2/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=488ce07ba2af2b5d6175511025539989afd317a2", "patch": "@@ -3135,7 +3135,7 @@ gfc_trans_allocate (gfc_code * code)\n       tree gfc_int4_type_node = gfc_get_int_type (4);\n \n       stat = gfc_create_var (gfc_int4_type_node, \"stat\");\n-      pstat = gfc_build_addr_expr (NULL, stat);\n+      pstat = build_fold_addr_expr (stat);\n \n       error_label = gfc_build_label_decl (NULL_TREE);\n       TREE_USED (error_label) = 1;\n@@ -3253,11 +3253,11 @@ gfc_trans_deallocate (gfc_code * code)\n \n       /* Variable used with the library call.  */\n       stat = gfc_create_var (gfc_int4_type_node, \"stat\");\n-      pstat = gfc_build_addr_expr (NULL, stat);\n+      pstat = build_fold_addr_expr (stat);\n \n       /* Running total of possible deallocation failures.  */\n       astat = gfc_create_var (gfc_int4_type_node, \"astat\");\n-      apstat = gfc_build_addr_expr (NULL, astat);\n+      apstat = build_fold_addr_expr (astat);\n \n       /* Initialize astat to 0.  */\n       gfc_add_modify_expr (&block, astat, build_int_cst (TREE_TYPE (astat), 0));"}]}