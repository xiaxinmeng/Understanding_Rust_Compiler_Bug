{"sha": "2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0YmIwMmY2MmNkZjVhMzdiMWQyNjE4ODEzOGRhZDZhNjllMTRkMQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-06-23T19:19:09Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-06-23T19:19:09Z"}, "message": "predicates.md (splat_input_operand): Rework.\n\n[gcc]\n2016-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/predicates.md (splat_input_operand): Rework.\n\tDon't allow constants, since the insns that use this predicate\n\tdon't support constants.  Constants are handled by other insns\n\tthat are created via combine.  During and after register\n\tallocation, only allow indexed or indirect addresses, and not\n\tgeneral addresses.  Only allow modes supported by the hardware.\n\t* config/rs6000/rs6000.c (xxsplitb_constant_p): Update usage\n\tcomment.  Move check for using VSPLTIS<x> to a common location,\n\tinstead of doing it in two different places.\n\n[gcc/testsuite]\n2016-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/p9-splat-5.c: New test.\n\n\nCo-Authored-By: Bill Schmidt <wschmidt@linux.vnet.ibm.com>\n\nFrom-SVN: r237743", "tree": {"sha": "895cc035e8e6215f8641f6773aa984410f6d6283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/895cc035e8e6215f8641f6773aa984410f6d6283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/comments", "author": null, "committer": null, "parents": [{"sha": "a239d460519a9d8a4b7c973a3d9f3f356faf3e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a239d460519a9d8a4b7c973a3d9f3f356faf3e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a239d460519a9d8a4b7c973a3d9f3f356faf3e15"}], "stats": {"total": 92, "additions": 63, "deletions": 29}, "files": [{"sha": "e53614d339a9e800531a53baf25ae41f9ffb8d4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "patch": "@@ -1,3 +1,16 @@\n+2016-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/predicates.md (splat_input_operand): Rework.\n+\tDon't allow constants, since the insns that use this predicate\n+\tdon't support constants.  Constants are handled by other insns\n+\tthat are created via combine.  During and after register\n+\tallocation, only allow indexed or indirect addresses, and not\n+\tgeneral addresses.  Only allow modes supported by the hardware.\n+\t* config/rs6000/rs6000.c (xxsplitb_constant_p): Update usage\n+\tcomment.  Move check for using VSPLTIS<x> to a common location,\n+\tinstead of doing it in two different places.\n+\n 2016-06-23  Jocelyn Mayer  <l_indien@magic.fr>\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Set"}, {"sha": "5fb051af6360d49773fbe4fbf59b5b8707544238", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "patch": "@@ -1056,27 +1056,34 @@\n \n ;; Return 1 if this operand is a valid input for a vsx_splat insn.\n (define_predicate \"splat_input_operand\"\n-  (match_code \"symbol_ref,const,reg,subreg,mem,\n-\t       const_double,const_wide_int,const_vector,const_int\")\n+  (match_code \"reg,subreg,mem\")\n {\n+  machine_mode vmode;\n+\n+  if (mode == DFmode)\n+    vmode = V2DFmode;\n+  else if (mode == DImode)\n+    vmode = V2DImode;\n+  else if (mode == SImode && TARGET_P9_VECTOR)\n+    vmode = V4SImode;\n+  else if (mode == SFmode && TARGET_P9_VECTOR)\n+    vmode = V4SFmode;\n+  else\n+    return false;\n+\n   if (MEM_P (op))\n     {\n+      rtx addr = XEXP (op, 0);\n+\n       if (! volatile_ok && MEM_VOLATILE_P (op))\n \treturn 0;\n-      if (mode == DFmode)\n-\tmode = V2DFmode;\n-      else if (mode == DImode)\n-\tmode = V2DImode;\n-      else if (mode == SImode && TARGET_P9_VECTOR)\n-\tmode = V4SImode;\n-      else if (mode == SFmode && TARGET_P9_VECTOR)\n-\tmode = V4SFmode;\n+\n+      if (reload_in_progress || lra_in_progress || reload_completed)\n+\treturn indexed_or_indirect_address (addr, vmode);\n       else\n-\tgcc_unreachable ();\n-      return memory_address_addr_space_p (mode, XEXP (op, 0),\n-\t\t\t\t\t  MEM_ADDR_SPACE (op));\n+\treturn memory_address_addr_space_p (vmode, addr, MEM_ADDR_SPACE (op));\n     }\n-  return input_operand (op, mode);\n+  return gpc_reg_operand (op, mode);\n })\n \n ;; Return true if OP is a non-immediate operand and not an invalid"}, {"sha": "4762c21b7a11c7f750a2ae096d0f65eb2d2f64d2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "patch": "@@ -6282,14 +6282,7 @@ gen_easy_altivec_constant (rtx op)\n    Return the number of instructions needed (1 or 2) into the address pointed\n    via NUM_INSNS_PTR.\n \n-   If NOSPLIT_P, only return true for constants that only generate the XXSPLTIB\n-   instruction and can go in any VSX register.  If !NOSPLIT_P, only return true\n-   for constants that generate XXSPLTIB and need a sign extend operation, which\n-   restricts us to the Altivec registers.\n-\n-   Allow either (vec_const [...]) or (vec_duplicate <const>).  If OP is a valid\n-   XXSPLTIB constant, return the constant being set via the CONST_PTR\n-   pointer.  */\n+   Return the constant that is being split via CONSTANT_PTR.  */\n \n bool\n xxspltib_constant_p (rtx op,\n@@ -6355,13 +6348,6 @@ xxspltib_constant_p (rtx op,\n \t  if (value != INTVAL (element))\n \t    return false;\n \t}\n-\n-      /* See if we could generate vspltisw/vspltish directly instead of\n-\t xxspltib + sign extend.  Special case 0/-1 to allow getting\n-         any VSX register instead of an Altivec register.  */\n-      if (!IN_RANGE (value, -1, 0) && EASY_VECTOR_15 (value)\n-\t  && (mode == V4SImode || mode == V8HImode))\n-\treturn false;\n     }\n \n   /* Handle integer constants being loaded into the upper part of the VSX\n@@ -6389,6 +6375,13 @@ xxspltib_constant_p (rtx op,\n   else\n     return false;\n \n+  /* See if we could generate vspltisw/vspltish directly instead of xxspltib +\n+     sign extend.  Special case 0/-1 to allow getting any VSX register instead\n+     of an Altivec register.  */\n+  if ((mode == V4SImode || mode == V8HImode) && !IN_RANGE (value, -1, 0)\n+      && EASY_VECTOR_15 (value))\n+    return false;\n+\n   /* Return # of instructions and the constant byte for XXSPLTIB.  */\n   if (mode == V16QImode)\n     *num_insns_ptr = 1;"}, {"sha": "6e813cf372cb5f9496903f3598eda7b1b96f300b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "patch": "@@ -1,3 +1,8 @@\n+2016-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-splat-5.c: New test.\n+\n 2016-06-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR tree-optimization/71488"}, {"sha": "1aac2e81a1106842bf034b08af61653b88b5607a", "filename": "gcc/testsuite/gcc.target/powerpc/p9-splat-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-splat-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4bb02f62cdf5a37b1d26188138dad6a69e14d1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-splat-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-splat-5.c?ref=2d4bb02f62cdf5a37b1d26188138dad6a69e14d1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-final { scan-assembler \"vspltish\" } } */\n+/* { dg-final { scan-assembler-not \"xxspltib\" } } */\n+\n+/* Make sure we don't use an inefficient sequence for small integer splat.  */\n+\n+#include <altivec.h>\n+\n+vector short\n+foo ()\n+{\n+  return vec_splat_s16 (5);\n+}"}]}