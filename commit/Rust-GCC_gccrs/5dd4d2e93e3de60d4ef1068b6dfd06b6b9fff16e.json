{"sha": "5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e", "node_id": "C_kwDOANBUbNoAKDVkZDRkMmU5M2UzZGU2MGQ0ZWYxMDY4YjZkZmQwNmI2YjlmZmYxNmU", "commit": {"author": {"name": "Yuri Gribov", "email": "y.gribov@samsung.com", "date": "2022-08-14T05:42:44Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-11-28T09:49:30Z"}, "message": "asan: fix unsafe optimization of Asan checks.\n\n\tPR sanitizer/106558\n\ngcc/\n\t* sanopt.cc: Do not optimize out checks for non-SSA addresses.\n\ngcc/testsuite/\n\t* c-c++-common/asan/pr106558.c: New test.", "tree": {"sha": "bd316f1d01e742dda514e1650a38de4f33fd6ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd316f1d01e742dda514e1650a38de4f33fd6ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e/comments", "author": null, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee629d242d9f93a38e49bed904bb334bbe15dde1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee629d242d9f93a38e49bed904bb334bbe15dde1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee629d242d9f93a38e49bed904bb334bbe15dde1"}], "stats": {"total": 65, "additions": 56, "deletions": 9}, "files": [{"sha": "6ee51e9e37fc8d83f008efb17c7d63ff30602a30", "filename": "gcc/sanopt.cc", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e/gcc%2Fsanopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e/gcc%2Fsanopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.cc?ref=5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e", "patch": "@@ -80,16 +80,16 @@ struct sanopt_info\n \n /* If T has a single definition of form T = T2, return T2.  */\n \n-static tree\n+static gimple *\n maybe_get_single_definition (tree t)\n {\n   if (TREE_CODE (t) == SSA_NAME)\n     {\n       gimple *g = SSA_NAME_DEF_STMT (t);\n       if (gimple_assign_single_p (g))\n-\treturn gimple_assign_rhs1 (g);\n+\treturn g;\n     }\n-  return NULL_TREE;\n+  return NULL;\n }\n \n /* Tree triplet for vptr_check_map.  */\n@@ -618,11 +618,31 @@ maybe_optimize_ubsan_vptr_ifn (class sanopt_ctx *ctx, gimple *stmt)\n   return true;\n }\n \n+/* Checks whether value of T in CHECK and USE is the same.  */\n+\n+static bool\n+same_value_p (gimple *check, gimple *use, tree t)\n+{\n+  tree check_vuse = gimple_vuse (check);\n+  tree use_vuse = gimple_vuse (use);\n+\n+  if (TREE_CODE (t) == SSA_NAME\n+      || is_gimple_min_invariant (t)\n+      || ! use_vuse)\n+    return true;\n+\n+  if (check_vuse == use_vuse)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Returns TRUE if ASan check of length LEN in block BB can be removed\n    if preceded by checks in V.  */\n \n static bool\n-can_remove_asan_check (auto_vec<gimple *> &v, tree len, basic_block bb)\n+can_remove_asan_check (auto_vec<gimple *> &v, tree len, basic_block bb,\n+\t\t       gimple *base_stmt, tree base_addr)\n {\n   unsigned int i;\n   gimple *g;\n@@ -674,8 +694,10 @@ can_remove_asan_check (auto_vec<gimple *> &v, tree len, basic_block bb)\n \n \t  last_bb = imm;\n \t}\n-      if (last_bb == gbb)\n-\tremove = true;\n+      if (last_bb != gbb)\n+\tbreak;\n+      // In case of base_addr residing in memory we also need to check aliasing\n+      remove = ! base_addr || same_value_p (g, base_stmt, base_addr);\n       break;\n     }\n \n@@ -718,7 +740,8 @@ maybe_optimize_asan_check_ifn (class sanopt_ctx *ctx, gimple *stmt)\n \n   auto_vec<gimple *> *ptr_checks = &ctx->asan_check_map.get_or_insert (ptr);\n \n-  tree base_addr = maybe_get_single_definition (ptr);\n+  gimple *base_stmt = maybe_get_single_definition (ptr);\n+  tree base_addr = base_stmt ? gimple_assign_rhs1 (base_stmt) : NULL_TREE;\n   auto_vec<gimple *> *base_checks = NULL;\n   if (base_addr)\n     {\n@@ -747,11 +770,12 @@ maybe_optimize_asan_check_ifn (class sanopt_ctx *ctx, gimple *stmt)\n   bool remove = false;\n \n   if (ptr_checks)\n-    remove = can_remove_asan_check (*ptr_checks, len, bb);\n+    remove = can_remove_asan_check (*ptr_checks, len, bb, NULL, NULL);\n \n   if (!remove && base_checks)\n     /* Try with base address as well.  */\n-    remove = can_remove_asan_check (*base_checks, len, bb);\n+    remove = can_remove_asan_check (*base_checks, len, bb, base_stmt,\n+\t\t\t\t    base_addr);\n \n   if (!remove)\n     {"}, {"sha": "d82b2dc7a83d9bf9c414b7cad1726cca1757b273", "filename": "gcc/testsuite/c-c++-common/asan/pr106558.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr106558.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr106558.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr106558.c?ref=5dd4d2e93e3de60d4ef1068b6dfd06b6b9fff16e", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-w -fpermissive\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+int a;\n+int *b = &a;\n+int **c = &b;\n+int d[1];\n+int *e = &d[1];\n+\n+static int f(int *g) {\n+  *b = e;\n+  *c = e;\n+  *b = 2;\n+  *g = 2;\n+}\n+\n+int main() {\n+    f(b);\n+    return *b;\n+}\n+\n+/* { dg-output \"AddressSanitizer: global-buffer-overflow on address\" } */"}]}