{"sha": "7c85c9fec43464462528c5ecfb22af8505d85431", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4NWM5ZmVjNDM0NjQ0NjI1MjhjNWVjZmIyMmFmODUwNWQ4NTQzMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-11T18:12:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-11T18:12:25Z"}, "message": "re PR target/80706 (peephole2 uses uninitialized stack variables on i686)\n\n\tPR target/80706\n\t* config/i386/sync.md (UNSPEC_LDX_ATOMIC): New unspec.\n\t(UNSPEC_STX_ATOMIC): Ditto.\n\t(loaddi_via_sse): New insn.\n\t(storedi_via_sse): Ditto.\n\t(atomic_loaddi_fpu): Emit loaddi_via_sse and storedi_via_sse.\n\tUpdate corresponding peephole2 patterns.\n\t(atomic_storedi_fpu): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/80706\n\t* gcc.target/i386/pr80706.c: New test.\n\nFrom-SVN: r247921", "tree": {"sha": "8c7b6995b18dbaa39263a5ac7171cc0c6840be48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c7b6995b18dbaa39263a5ac7171cc0c6840be48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c85c9fec43464462528c5ecfb22af8505d85431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c85c9fec43464462528c5ecfb22af8505d85431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c85c9fec43464462528c5ecfb22af8505d85431", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c85c9fec43464462528c5ecfb22af8505d85431/comments", "author": null, "committer": null, "parents": [{"sha": "d7a33a4cb02589a3f336ae831e67c8981ab24b4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7a33a4cb02589a3f336ae831e67c8981ab24b4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7a33a4cb02589a3f336ae831e67c8981ab24b4f"}], "stats": {"total": 121, "additions": 104, "deletions": 17}, "files": [{"sha": "5db55057fd0b061912725a815c55c59bc455a1ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c85c9fec43464462528c5ecfb22af8505d85431/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c85c9fec43464462528c5ecfb22af8505d85431/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c85c9fec43464462528c5ecfb22af8505d85431", "patch": "@@ -1,3 +1,23 @@\n+2017-05-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/80706\n+\t* config/i386/sync.md (UNSPEC_LDX_ATOMIC): New unspec.\n+\t(UNSPEC_STX_ATOMIC): Ditto.\n+\t(loaddi_via_sse): New insn.\n+\t(storedi_via_sse): Ditto.\n+\t(atomic_loaddi_fpu): Emit loaddi_via_sse and storedi_via_sse.\n+\tUpdate corresponding peephole2 patterns.\n+\t(atomic_storedi_fpu): Ditto.\n+\n+2017-05-11  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/avx512fintrin.h (_mm_mask_rsqrt14_sd)\n+\t(_mm_maskz_rsqrt14_sd, _mm_mask_rsqrt14_ss, _mm_maskz_rsqrt14_ss):\n+\tNew intrinsics.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_rsqrt14sd_mask)\n+\t(__builtin_ia32_rsqrt14ss_mask): New builtins.\n+\t* config/i386/sse.md (rsqrt14_<mode>_mask): New pattern.\n+\n 2017-05-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* graphite-poly.c: Include dumpfile.h."}, {"sha": "29b82f86d43a07f128082d292ba726c59192b5bb", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c85c9fec43464462528c5ecfb22af8505d85431/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c85c9fec43464462528c5ecfb22af8505d85431/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=7c85c9fec43464462528c5ecfb22af8505d85431", "patch": "@@ -25,6 +25,9 @@\n   UNSPEC_FILD_ATOMIC\n   UNSPEC_FIST_ATOMIC\n \n+  UNSPEC_LDX_ATOMIC\n+  UNSPEC_STX_ATOMIC\n+\n   ;; __atomic support\n   UNSPEC_LDA\n   UNSPEC_STA\n@@ -199,9 +202,8 @@\n \t}\n       else\n \t{\n-\t  adjust_reg_mode (tmp, DImode);\n-\t  emit_move_insn (tmp, src);\n-\t  emit_move_insn (mem, tmp);\n+\t  emit_insn (gen_loaddi_via_sse (tmp, src));\n+\t  emit_insn (gen_storedi_via_sse (mem, tmp));\n \t}\n \n       if (mem != dst)\n@@ -226,10 +228,12 @@\n   \"operands[5] = gen_lowpart (DFmode, operands[1]);\")\n \n (define_peephole2\n-  [(set (match_operand:DI 0 \"sse_reg_operand\")\n-\t(match_operand:DI 1 \"memory_operand\"))\n+  [(set (match_operand:DF 0 \"sse_reg_operand\")\n+\t(unspec:DF [(match_operand:DI 1 \"memory_operand\")]\n+\t\t   UNSPEC_LDX_ATOMIC))\n    (set (match_operand:DI 2 \"memory_operand\")\n-\t(match_dup 0))\n+\t(unspec:DI [(match_dup 0)]\n+\t\t   UNSPEC_STX_ATOMIC))\n    (set (match_operand:DF 3 \"fp_register_operand\")\n \t(match_operand:DF 4 \"memory_operand\"))]\n   \"!TARGET_64BIT\n@@ -301,7 +305,9 @@\n   rtx dst = operands[0], src = operands[1];\n   rtx mem = operands[2], tmp = operands[3];\n \n-  if (!SSE_REG_P (src))\n+  if (SSE_REG_P (src))\n+    emit_move_insn (dst, src);\n+  else\n     {\n       if (REG_P (src))\n \t{\n@@ -313,16 +319,13 @@\n \t{\n \t  emit_insn (gen_loaddi_via_fpu (tmp, src));\n \t  emit_insn (gen_storedi_via_fpu (dst, tmp));\n-\t  DONE;\n \t}\n       else\n \t{\n-\t  adjust_reg_mode (tmp, DImode);\n-\t  emit_move_insn (tmp, src);\n-\t  src = tmp;\n+\t  emit_insn (gen_loaddi_via_sse (tmp, src));\n+\t  emit_insn (gen_storedi_via_sse (dst, tmp));\n \t}\n     }\n-  emit_move_insn (dst, src);\n   DONE;\n })\n \n@@ -344,10 +347,12 @@\n (define_peephole2\n   [(set (match_operand:DF 0 \"memory_operand\")\n \t(match_operand:DF 1 \"fp_register_operand\"))\n-   (set (match_operand:DI 2 \"sse_reg_operand\")\n-\t(match_operand:DI 3 \"memory_operand\"))\n+   (set (match_operand:DF 2 \"sse_reg_operand\")\n+\t(unspec:DF [(match_operand:DI 3 \"memory_operand\")]\n+\t\t   UNSPEC_LDX_ATOMIC))\n    (set (match_operand:DI 4 \"memory_operand\")\n-\t(match_dup 2))]\n+\t(unspec:DI [(match_dup 2)]\n+\t\t   UNSPEC_STX_ATOMIC))]\n   \"!TARGET_64BIT\n    && peep2_reg_dead_p (3, operands[2])\n    && rtx_equal_p (operands[0], adjust_address_nv (operands[3], DFmode, 0))\"\n@@ -382,6 +387,32 @@\n   [(set_attr \"type\" \"fmov\")\n    (set_attr \"mode\" \"DI\")])\n \n+(define_insn \"loaddi_via_sse\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=x\")\n+\t(unspec:DF [(match_operand:DI 1 \"memory_operand\" \"m\")]\n+\t\t   UNSPEC_LDX_ATOMIC))]\n+  \"TARGET_SSE\"\n+{\n+  if (TARGET_SSE2)\n+    return \"%vmovq\\t{%1, %0|%0, %1}\";\n+  return \"movlps\\t{%1, %0|%0, %1}\";\n+}\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"storedi_via_sse\"\n+  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+\t(unspec:DI [(match_operand:DF 1 \"register_operand\" \"x\")]\n+\t\t   UNSPEC_STX_ATOMIC))]\n+  \"TARGET_SSE\"\n+{\n+  if (TARGET_SSE2)\n+    return \"%vmovq\\t{%1, %0|%0, %1}\";\n+  return \"movlps\\t{%1, %0|%0, %1}\";\n+}\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"mode\" \"DI\")])\n+\n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(match_operand:QI 0 \"register_operand\")\t;; bool success output\n    (match_operand:SWI124 1 \"register_operand\")\t;; oldval output"}, {"sha": "9fba93cff2f6c521189a1d5d46b772c706f4d3b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c85c9fec43464462528c5ecfb22af8505d85431/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c85c9fec43464462528c5ecfb22af8505d85431/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c85c9fec43464462528c5ecfb22af8505d85431", "patch": "@@ -1,3 +1,9 @@\n+2017-05-11  Uros Bizjak  <ubizjak@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80706\n+\t* gcc.target/i386/pr80706.c: New test.\n+\n 2017-05-11  Julia Koval  <julia.koval@intel.com>\n \n \t* gcc.target/i386/avx512f-vrsqrt14sd-1.c: Test new intrinsics.\n@@ -12,8 +18,8 @@\n \n 2017-05-11  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* gcc.target/i386/pr22152.c: Fix undefined testcase.  Remove\n-\tunnecessary loop.  Run on 32-bit targets only.\n+\t* gcc.target/i386/pr22152.c: Fix undefined testcase.\n+\tRemove unnecessary loop.  Run on 32-bit targets only.\n \t(dg-options): Remove -fno-tree-sink.\n \n 2017-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>"}, {"sha": "7cc1b8f57b9b0209808f9c34fb14914b404aa28e", "filename": "gcc/testsuite/gcc.target/i386/pr80706.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c85c9fec43464462528c5ecfb22af8505d85431/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80706.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c85c9fec43464462528c5ecfb22af8505d85431/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80706.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr80706.c?ref=7c85c9fec43464462528c5ecfb22af8505d85431", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/80706 */\n+/* { dg-do run { target sse2_runtime } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+union U { double value; struct S { int lsw; int msw; } parts; };\n+\n+__attribute__((noinline, noclone)) double\n+foo (void)\n+{\n+  __asm volatile (\"\" : : : \"memory\");\n+  return 2.0;\n+}\n+\n+__attribute__((noinline, noclone)) double\n+bar (void)\n+{\n+  double s = foo ();\n+  union U z;\n+  z.value = s;\n+  z.parts.lsw = 0;\n+  return z.value * z.value + s * s;\n+}\n+\n+int\n+main ()\n+{\n+  if (bar () != 8.0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}