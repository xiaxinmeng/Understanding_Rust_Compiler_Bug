{"sha": "9f61fd17476282a3c279b3b70c7cee1e12b265f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2MWZkMTc0NzYyODJhM2MyNzliM2I3MGM3Y2VlMWUxMmIyNjVmNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-26T12:37:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-26T12:37:00Z"}, "message": "re PR middle-end/49840 (New test failures)\n\n2011-07-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49840\n\t* tree-vrp.c (range_fits_type_p): Properly handle full\n\tdouble-int precision.\n\nFrom-SVN: r176790", "tree": {"sha": "975b95703cc2a091d0283d1a5f3597ffadbc5dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/975b95703cc2a091d0283d1a5f3597ffadbc5dba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f61fd17476282a3c279b3b70c7cee1e12b265f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f61fd17476282a3c279b3b70c7cee1e12b265f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f61fd17476282a3c279b3b70c7cee1e12b265f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f61fd17476282a3c279b3b70c7cee1e12b265f5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5bf3d50db7d56329bb773c1ff87e30296e65cb87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf3d50db7d56329bb773c1ff87e30296e65cb87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf3d50db7d56329bb773c1ff87e30296e65cb87"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "74f58cdde69c7f3a744bfada1c09db0c706e357a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f61fd17476282a3c279b3b70c7cee1e12b265f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f61fd17476282a3c279b3b70c7cee1e12b265f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f61fd17476282a3c279b3b70c7cee1e12b265f5", "patch": "@@ -1,3 +1,9 @@\n+2011-07-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49840\n+\t* tree-vrp.c (range_fits_type_p): Properly handle full\n+\tdouble-int precision.\n+\n 2011-07-26  Martin Jambor  <mjambor@suse.cz>\n \n \tPR bootstrap/49786"}, {"sha": "1756dd25bd35c3ab18e5d9afa1e10ef7c7d79cb4", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f61fd17476282a3c279b3b70c7cee1e12b265f5/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f61fd17476282a3c279b3b70c7cee1e12b265f5/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9f61fd17476282a3c279b3b70c7cee1e12b265f5", "patch": "@@ -7423,18 +7423,40 @@ simplify_conversion_using_ranges (gimple stmt)\n static bool\n range_fits_type_p (value_range_t *vr, unsigned precision, bool unsigned_p)\n {\n+  tree src_type;\n+  unsigned src_precision;\n   double_int tem;\n \n-  /* We can only handle constant ranges.  */\n+  /* We can only handle integral and pointer types.  */\n+  src_type = TREE_TYPE (vr->min);\n+  if (!INTEGRAL_TYPE_P (src_type)\n+      && !POINTER_TYPE_P (src_type))\n+    return false;\n+\n+  /* An extension is always fine, so is an identity transform.  */\n+  src_precision = TYPE_PRECISION (TREE_TYPE (vr->min));\n+  if (src_precision < precision\n+      || (src_precision == precision\n+\t  && TYPE_UNSIGNED (src_type) == unsigned_p))\n+    return true;\n+\n+  /* Now we can only handle ranges with constant bounds.  */\n   if (vr->type != VR_RANGE\n       || TREE_CODE (vr->min) != INTEGER_CST\n       || TREE_CODE (vr->max) != INTEGER_CST)\n     return false;\n \n+  /* For precision-preserving sign-changes the MSB of the double-int\n+     has to be clear.  */\n+  if (src_precision == precision\n+      && (TREE_INT_CST_HIGH (vr->min) | TREE_INT_CST_HIGH (vr->max)) < 0)\n+    return false;\n+\n+  /* Then we can perform the conversion on both ends and compare\n+     the result for equality.  */\n   tem = double_int_ext (tree_to_double_int (vr->min), precision, unsigned_p);\n   if (!double_int_equal_p (tree_to_double_int (vr->min), tem))\n     return false;\n-\n   tem = double_int_ext (tree_to_double_int (vr->max), precision, unsigned_p);\n   if (!double_int_equal_p (tree_to_double_int (vr->max), tem))\n     return false;"}]}