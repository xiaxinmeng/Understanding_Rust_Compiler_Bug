{"sha": "6ae9194fc25f0f5d44191aba155e60de88aa856f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFlOTE5NGZjMjVmMGY1ZDQ0MTkxYWJhMTU1ZTYwZGU4OGFhODU2Zg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-19T02:02:09Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-19T02:02:09Z"}, "message": "re PR c/52952 (Wformat location info is bad (wrong column number))\n\ngcc/c-family/ChangeLog:\n\n2014-08-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\t    Steven Bosscher  <steven@gcc.gnu.org>\n\n\tPR c/52952\n\t* c-format.c: Add extra_arg_loc and format_string_loc to struct\n\tformat_check_results.\n\t(check_function_format): Use true and add comment for boolean\n\targument.\n\t(finish_dollar_format_checking): Use explicit location when warning.\n\t(check_format_info): Likewise.\n\t(check_format_arg): Set extra_arg_loc and format_string_loc.\n\t(check_format_info_main): Use explicit location when warning.\n\t(check_format_types): Pass explicit location.\n\t(format_type_warning): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2014-08-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\t    Steven Bosscher  <steven@gcc.gnu.org>\n\n\tPR c/52952\n\t* gcc.dg/redecl-4.c: Add column markers.\n\t* gcc.dg/format/bitfld-1.c: Likewise.\n\t* gcc.dg/format/attr-2.c: Likewise.\n\t* gcc.dg/format/attr-6.c: Likewise.\n\t* gcc.dg/format/array-1.c: Likewise.\n\t* gcc.dg/format/attr-7.c: Likewise.\n\t* gcc.dg/format/asm_fprintf-1.c: Likewise.\n\t* gcc.dg/format/attr-4.c: Likewise.\n\t* gcc.dg/format/branch-1.c: Likewise.\n\t* gcc.dg/format/c90-printf-1.c: Likewise.\n\n\nCo-Authored-By: Steven Bosscher <steven@gcc.gnu.org>\n\nFrom-SVN: r214129", "tree": {"sha": "059a972b495e416202bd37761cd22b71dc419bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/059a972b495e416202bd37761cd22b71dc419bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ae9194fc25f0f5d44191aba155e60de88aa856f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae9194fc25f0f5d44191aba155e60de88aa856f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae9194fc25f0f5d44191aba155e60de88aa856f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae9194fc25f0f5d44191aba155e60de88aa856f/comments", "author": null, "committer": null, "parents": [{"sha": "0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f82e5c9fb49a2618233fcaca6db40fe856e66c1"}], "stats": {"total": 606, "additions": 341, "deletions": 265}, "files": [{"sha": "fe2b11ae135090dc49909ce86618bc8b45853e81", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -1,3 +1,18 @@\n+2014-08-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t    Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR c/52952\n+\t* c-format.c: Add extra_arg_loc and format_string_loc to struct\n+\tformat_check_results.\n+\t(check_function_format): Use true and add comment for boolean\n+\targument.\n+\t(finish_dollar_format_checking): Use explicit location when warning.\n+\t(check_format_info): Likewise.\n+\t(check_format_arg): Set extra_arg_loc and format_string_loc.\n+\t(check_format_info_main): Use explicit location when warning.\n+\t(check_format_types): Pass explicit location.\n+\t(format_type_warning): Likewise.\n+\n 2014-08-15  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR fortran/44054"}, {"sha": "129be6e191c0559df472a76c94f0197313b8d0d2", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 150, "deletions": 106, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -895,6 +895,7 @@ typedef struct\n   /* Number of leaves of the format argument that were null pointers or\n      string literals, but had extra format arguments.  */\n   int number_extra_args;\n+  location_t extra_arg_loc;\n   /* Number of leaves of the format argument that were null pointers or\n      string literals, but had extra format arguments and used $ operand\n      numbers.  */\n@@ -909,6 +910,8 @@ typedef struct\n   int number_unterminated;\n   /* Number of leaves of the format argument that were not counted above.  */\n   int number_other;\n+  /* Location of the format string.  */\n+  location_t format_string_loc;\n } format_check_results;\n \n typedef struct\n@@ -954,8 +957,8 @@ static void finish_dollar_format_checking (format_check_results *, int);\n static const format_flag_spec *get_flag_spec (const format_flag_spec *,\n \t\t\t\t\t      int, const char *);\n \n-static void check_format_types (format_wanted_type *);\n-static void format_type_warning (format_wanted_type *, tree, tree);\n+static void check_format_types (location_t, format_wanted_type *);\n+static void format_type_warning (location_t, format_wanted_type *, tree, tree);\n \n /* Decode a format type from a string, returning the type, or\n    format_type_error if not valid, in which case the caller should print an\n@@ -1002,7 +1005,7 @@ check_function_format (tree attrs, int nargs, tree *argarray)\n \t{\n \t  /* Yup; check it.  */\n \t  function_format_info info;\n-\t  decode_format_attr (TREE_VALUE (a), &info, 1);\n+\t  decode_format_attr (TREE_VALUE (a), &info, /*validated=*/true);\n \t  if (warn_format)\n \t    {\n \t      /* FIXME: Rewrite all the internal functions in this file\n@@ -1256,9 +1259,9 @@ finish_dollar_format_checking (format_check_results *res, int pointer_gap_ok)\n \t\t\t\t || dollar_arguments_pointer_p[i]))\n \t    found_pointer_gap = true;\n \t  else\n-\t    warning (OPT_Wformat_,\n-\t\t     \"format argument %d unused before used argument %d in $-style format\",\n-\t\t     i + 1, dollar_max_arg_used);\n+\t    warning_at (res->format_string_loc, OPT_Wformat_,\n+\t\t\t\"format argument %d unused before used argument %d in $-style format\",\n+\t\t\ti + 1, dollar_max_arg_used);\n \t}\n     }\n   if (found_pointer_gap\n@@ -1329,11 +1332,13 @@ check_format_info (function_format_info *info, tree params)\n \n   res.number_non_literal = 0;\n   res.number_extra_args = 0;\n+  res.extra_arg_loc = UNKNOWN_LOCATION;\n   res.number_dollar_extra_args = 0;\n   res.number_wide = 0;\n   res.number_empty = 0;\n   res.number_unterminated = 0;\n   res.number_other = 0;\n+  res.format_string_loc = input_location;\n \n   format_ctx.res = &res;\n   format_ctx.info = info;\n@@ -1342,6 +1347,10 @@ check_format_info (function_format_info *info, tree params)\n   check_function_arguments_recurse (check_format_arg, &format_ctx,\n \t\t\t\t    format_tree, arg_num);\n \n+  location_t loc = format_ctx.res->format_string_loc;\n+  if (res.extra_arg_loc == UNKNOWN_LOCATION)\n+    res.extra_arg_loc = loc;\n+\n   if (res.number_non_literal > 0)\n     {\n       /* Functions taking a va_list normally pass a non-literal format\n@@ -1351,8 +1360,8 @@ check_format_info (function_format_info *info, tree params)\n \t{\n \t  /* For strftime-like formats, warn for not checking the format\n \t     string; but there are no arguments to check.  */\n-\t  warning (OPT_Wformat_nonliteral,\n-\t\t   \"format not a string literal, format string not checked\");\n+\t  warning_at (loc, OPT_Wformat_nonliteral,\n+\t\t      \"format not a string literal, format string not checked\");\n \t}\n       else if (info->first_arg_num != 0)\n \t{\n@@ -1366,14 +1375,14 @@ check_format_info (function_format_info *info, tree params)\n \t      ++arg_num;\n \t    }\n \t  if (params == 0 && warn_format_security)\n-\t    warning (OPT_Wformat_security,\n-\t\t     \"format not a string literal and no format arguments\");\n+\t    warning_at (loc, OPT_Wformat_security,\n+\t\t\t\"format not a string literal and no format arguments\");\n \t  else if (params == 0 && warn_format_nonliteral)\n-\t    warning (OPT_Wformat_nonliteral,\n-\t\t     \"format not a string literal and no format arguments\");\n+\t    warning_at (loc, OPT_Wformat_nonliteral,\n+\t\t\t\"format not a string literal and no format arguments\");\n \t  else\n-\t    warning (OPT_Wformat_nonliteral,\n-\t\t     \"format not a string literal, argument types not checked\");\n+\t    warning_at (loc, OPT_Wformat_nonliteral,\n+\t\t\t\"format not a string literal, argument types not checked\");\n \t}\n     }\n \n@@ -1386,20 +1395,21 @@ check_format_info (function_format_info *info, tree params)\n      case of extra format arguments.  */\n   if (res.number_extra_args > 0 && res.number_non_literal == 0\n       && res.number_other == 0)\n-    warning (OPT_Wformat_extra_args, \"too many arguments for format\");\n+    warning_at (res.extra_arg_loc, OPT_Wformat_extra_args,\n+\t\t\"too many arguments for format\");\n   if (res.number_dollar_extra_args > 0 && res.number_non_literal == 0\n       && res.number_other == 0)\n-    warning (OPT_Wformat_extra_args, \"unused arguments in $-style format\");\n+    warning_at (loc, OPT_Wformat_extra_args, \"unused arguments in $-style format\");\n   if (res.number_empty > 0 && res.number_non_literal == 0\n       && res.number_other == 0)\n-    warning (OPT_Wformat_zero_length, \"zero-length %s format string\",\n+    warning_at (loc, OPT_Wformat_zero_length, \"zero-length %s format string\",\n \t     format_types[info->format_type].name);\n \n   if (res.number_wide > 0)\n-    warning (OPT_Wformat_, \"format is a wide character string\");\n+    warning_at (loc, OPT_Wformat_, \"format is a wide character string\");\n \n   if (res.number_unterminated > 0)\n-    warning (OPT_Wformat_, \"unterminated format string\");\n+    warning_at (loc, OPT_Wformat_, \"unterminated format string\");\n }\n \n /* Callback from check_function_arguments_recurse to check a\n@@ -1437,9 +1447,13 @@ check_format_arg (void *ctx, tree format_tree,\n \n       if (params == 0)\n \tres->number_other++;\n-      else\n-\tres->number_extra_args++;\n-\n+      else \n+\t{\n+\t  if (res->number_extra_args == 0)\n+\t    res->extra_arg_loc = EXPR_LOC_OR_LOC (TREE_VALUE (params),\n+\t\t\t\t\t\t  input_location);\n+\t  res->number_extra_args++;\n+\t}\n       return;\n     }\n \n@@ -1471,6 +1485,7 @@ check_format_arg (void *ctx, tree format_tree,\n       res->number_non_literal++;\n       return;\n     }\n+  res->format_string_loc = EXPR_LOC_OR_LOC (format_tree, input_location);\n   format_tree = TREE_OPERAND (format_tree, 0);\n   if (format_types[info->format_type].flags \n       & (int) FMT_FLAG_PARSE_ARG_CONVERT_EXTERNAL)\n@@ -1606,6 +1621,7 @@ check_format_info_main (format_check_results *res,\n   const format_kind_info *fki = &format_types[info->format_type];\n   const format_flag_spec *flag_specs = fki->flag_specs;\n   const format_flag_pair *bad_flag_pairs = fki->bad_flag_pairs;\n+  location_t format_string_loc = res->format_string_loc;\n \n   /* -1 if no conversions taking an operand have been found; 0 if one has\n      and it didn't use $; 1 if $ formats are in use.  */\n@@ -1643,7 +1659,8 @@ check_format_info_main (format_check_results *res,\n \tcontinue;\n       if (*format_chars == 0)\n \t{\n-\t  warning (OPT_Wformat_, \"spurious trailing %<%%%> in format\");\n+          warning_at (format_string_loc, OPT_Wformat_,\n+\t\t      \"spurious trailing %<%%%> in format\");\n \t  continue;\n \t}\n       if (*format_chars == '%')\n@@ -1687,7 +1704,8 @@ check_format_info_main (format_check_results *res,\n \t\t\t\t\t\t     *format_chars, NULL);\n \t  if (strchr (flag_chars, *format_chars) != 0)\n \t    {\n-\t      warning (OPT_Wformat_, \"repeated %s in format\", _(s->name));\n+\t      warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t  \"repeated %s in format\", _(s->name));\n \t    }\n \t  else\n \t    {\n@@ -1700,7 +1718,8 @@ check_format_info_main (format_check_results *res,\n \t      ++format_chars;\n \t      if (*format_chars == 0)\n \t\t{\n-\t\t  warning (OPT_Wformat_, \"missing fill character at end of strfmon format\");\n+\t\t  warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t      \"missing fill character at end of strfmon format\");\n \t\t  return;\n \t\t}\n \t    }\n@@ -1788,7 +1807,8 @@ check_format_info_main (format_check_results *res,\n \t\t}\n \t      if (found_width && !non_zero_width_char &&\n \t\t  (fki->flags & (int) FMT_FLAG_ZERO_WIDTH_BAD))\n-\t\twarning (OPT_Wformat_, \"zero width in %s format\", fki->name);\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"zero width in %s format\", fki->name);\n \t      if (found_width)\n \t\t{\n \t\t  i = strlen (flag_chars);\n@@ -1806,7 +1826,8 @@ check_format_info_main (format_check_results *res,\n \t  flag_chars[i++] = fki->left_precision_char;\n \t  flag_chars[i] = 0;\n \t  if (!ISDIGIT (*format_chars))\n-\t    warning (OPT_Wformat_, \"empty left precision in %s format\", fki->name);\n+\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t\"empty left precision in %s format\", fki->name);\n \t  while (ISDIGIT (*format_chars))\n \t    ++format_chars;\n \t}\n@@ -1882,7 +1903,8 @@ check_format_info_main (format_check_results *res,\n \t    {\n \t      if (!(fki->flags & (int) FMT_FLAG_EMPTY_PREC_OK)\n \t\t  && !ISDIGIT (*format_chars))\n-\t\twarning (OPT_Wformat_, \"empty precision in %s format\", fki->name);\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"empty precision in %s format\", fki->name);\n \t      while (ISDIGIT (*format_chars))\n \t\t++format_chars;\n \t    }\n@@ -1950,10 +1972,10 @@ check_format_info_main (format_check_results *res,\n \t    {\n \t      /* Warn if the length modifier is non-standard.  */\n \t      if (ADJ_STD (length_chars_std) > C_STD_VER)\n-\t\twarning (OPT_Wformat_,\n-\t\t\t \"%s does not support the %qs %s length modifier\",\n-\t\t\t C_STD_NAME (length_chars_std), length_chars,\n-\t\t\t fki->name);\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"%s does not support the %qs %s length modifier\",\n+\t\t\t    C_STD_NAME (length_chars_std), length_chars,\n+\t\t\t    fki->name);\n \t    }\n \t}\n \n@@ -1967,7 +1989,8 @@ check_format_info_main (format_check_results *res,\n \t\t{\n \t\t  const format_flag_spec *s = get_flag_spec (flag_specs,\n \t\t\t\t\t\t\t     *format_chars, NULL);\n-\t\t  warning (OPT_Wformat_, \"repeated %s in format\", _(s->name));\n+\t\t  warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t      \"repeated %s in format\", _(s->name));\n \t\t}\n \t      else\n \t\t{\n@@ -1984,7 +2007,8 @@ check_format_info_main (format_check_results *res,\n \t  || (!(fki->flags & (int) FMT_FLAG_FANCY_PERCENT_OK)\n \t      && format_char == '%'))\n \t{\n-\t  warning (OPT_Wformat_, \"conversion lacks type at end of format\");\n+\t  warning_at (format_string_loc, OPT_Wformat_,\n+\t\t      \"conversion lacks type at end of format\");\n \t  continue;\n \t}\n       format_chars++;\n@@ -1995,18 +2019,21 @@ check_format_info_main (format_check_results *res,\n       if (fci->format_chars == 0)\n \t{\n \t  if (ISGRAPH (format_char))\n-\t    warning (OPT_Wformat_, \"unknown conversion type character %qc in format\",\n-\t\t     format_char);\n+\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t\"unknown conversion type character %qc in format\",\n+\t\t\tformat_char);\n \t  else\n-\t    warning (OPT_Wformat_, \"unknown conversion type character 0x%x in format\",\n-\t\t     format_char);\n+\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t\"unknown conversion type character 0x%x in format\",\n+\t\t\tformat_char);\n \t  continue;\n \t}\n       if (pedantic)\n \t{\n \t  if (ADJ_STD (fci->std) > C_STD_VER)\n-\t    warning (OPT_Wformat_, \"%s does not support the %<%%%c%> %s format\",\n-\t\t     C_STD_NAME (fci->std), format_char, fki->name);\n+\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t\"%s does not support the %<%%%c%> %s format\",\n+\t\t\tC_STD_NAME (fci->std), format_char, fki->name);\n \t}\n \n       /* Validate the individual flags used, removing any that are invalid.  */\n@@ -2021,28 +2048,30 @@ check_format_info_main (format_check_results *res,\n \t      continue;\n \t    if (strchr (fci->flag_chars, flag_chars[i]) == 0)\n \t      {\n-\t\twarning (OPT_Wformat_, \"%s used with %<%%%c%> %s format\",\n-\t\t\t _(s->name), format_char, fki->name);\n+\t\twarning_at (format_string_loc, \n+                            OPT_Wformat_, \"%s used with %<%%%c%> %s format\",\n+\t\t\t    _(s->name), format_char, fki->name);\n \t\td++;\n \t\tcontinue;\n \t      }\n \t    if (pedantic)\n \t      {\n \t\tconst format_flag_spec *t;\n \t\tif (ADJ_STD (s->std) > C_STD_VER)\n-\t\t  warning (OPT_Wformat_, \"%s does not support %s\",\n-\t\t\t   C_STD_NAME (s->std), _(s->long_name));\n+\t\t  warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t      \"%s does not support %s\",\n+                              C_STD_NAME (s->std), _(s->long_name));\n \t\tt = get_flag_spec (flag_specs, flag_chars[i], fci->flags2);\n \t\tif (t != NULL && ADJ_STD (t->std) > ADJ_STD (s->std))\n \t\t  {\n \t\t    const char *long_name = (t->long_name != NULL\n \t\t\t\t\t     ? t->long_name\n \t\t\t\t\t     : s->long_name);\n \t\t    if (ADJ_STD (t->std) > C_STD_VER)\n-\t\t      warning (OPT_Wformat_,\n-\t\t\t       \"%s does not support %s with the %<%%%c%> %s format\",\n-\t\t\t       C_STD_NAME (t->std), _(long_name),\n-\t\t\t       format_char, fki->name);\n+\t\t      warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t\t  \"%s does not support %s with the %<%%%c%> %s format\",\n+\t\t\t\t  C_STD_NAME (t->std), _(long_name),\n+\t\t\t\t  format_char, fki->name);\n \t\t  }\n \t      }\n \t  }\n@@ -2075,24 +2104,26 @@ check_format_info_main (format_check_results *res,\n \t  if (bad_flag_pairs[i].ignored)\n \t    {\n \t      if (bad_flag_pairs[i].predicate != 0)\n-\t\twarning (OPT_Wformat_,\n-\t\t\t \"%s ignored with %s and %<%%%c%> %s format\",\n-\t\t\t _(s->name), _(t->name), format_char,\n-\t\t\t fki->name);\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"%s ignored with %s and %<%%%c%> %s format\",\n+\t\t\t    _(s->name), _(t->name), format_char,\n+\t\t\t    fki->name);\n \t      else\n-\t\twarning (OPT_Wformat_, \"%s ignored with %s in %s format\",\n-\t\t\t _(s->name), _(t->name), fki->name);\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"%s ignored with %s in %s format\",\n+\t\t\t    _(s->name), _(t->name), fki->name);\n \t    }\n \t  else\n \t    {\n \t      if (bad_flag_pairs[i].predicate != 0)\n-\t\twarning (OPT_Wformat_,\n-\t\t\t \"use of %s and %s together with %<%%%c%> %s format\",\n-\t\t\t _(s->name), _(t->name), format_char,\n-\t\t\t fki->name);\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"use of %s and %s together with %<%%%c%> %s format\",\n+\t\t\t    _(s->name), _(t->name), format_char,\n+\t\t\t    fki->name);\n \t      else\n-\t\twarning (OPT_Wformat_, \"use of %s and %s together in %s format\",\n-\t\t\t _(s->name), _(t->name), fki->name);\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"use of %s and %s together in %s format\",\n+\t\t\t    _(s->name), _(t->name), fki->name);\n \t    }\n \t}\n \n@@ -2110,11 +2141,13 @@ check_format_info_main (format_check_results *res,\n \t  else if (strchr (fci->flags2, '2') != 0)\n \t    y2k_level = 2;\n \t  if (y2k_level == 3)\n-\t    warning (OPT_Wformat_y2k, \"%<%%%c%> yields only last 2 digits of \"\n-\t\t     \"year in some locales\", format_char);\n+\t    warning_at (format_string_loc, OPT_Wformat_y2k,\n+\t\t\t\"%<%%%c%> yields only last 2 digits of \"\n+\t\t\t\"year in some locales\", format_char);\n \t  else if (y2k_level == 2)\n-\t    warning (OPT_Wformat_y2k, \"%<%%%c%> yields only last 2 digits of \"\n-\t\t     \"year\", format_char);\n+\t    warning_at (format_string_loc, OPT_Wformat_y2k,\n+\t\t\t\"%<%%%c%> yields only last 2 digits of year\",\n+\t\t\tformat_char);\n \t}\n \n       if (strchr (fci->flags2, '[') != 0)\n@@ -2130,7 +2163,8 @@ check_format_info_main (format_check_results *res,\n \t    ++format_chars;\n \t  if (*format_chars != ']')\n \t    /* The end of the format string was reached.  */\n-\t    warning (OPT_Wformat_, \"no closing %<]%> for %<%%[%> format\");\n+\t    warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t\"no closing %<]%> for %<%%[%> format\");\n \t}\n \n       wanted_type = 0;\n@@ -2143,9 +2177,9 @@ check_format_info_main (format_check_results *res,\n \t  wanted_type_std = fci->types[length_chars_val].std;\n \t  if (wanted_type == 0)\n \t    {\n-\t      warning (OPT_Wformat_,\n-\t\t       \"use of %qs length modifier with %qc type character\",\n-\t\t       length_chars, format_char);\n+\t      warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t  \"use of %qs length modifier with %qc type character\",\n+\t\t\t  length_chars, format_char);\n \t      /* Heuristic: skip one argument when an invalid length/type\n \t\t combination is encountered.  */\n \t      arg_num++;\n@@ -2161,10 +2195,10 @@ check_format_info_main (format_check_results *res,\n \t\t   && ADJ_STD (wanted_type_std) > ADJ_STD (fci->std))\n \t    {\n \t      if (ADJ_STD (wanted_type_std) > C_STD_VER)\n-\t\twarning (OPT_Wformat_,\n-\t\t\t \"%s does not support the %<%%%s%c%> %s format\",\n-\t\t\t C_STD_NAME (wanted_type_std), length_chars,\n-\t\t\t format_char, fki->name);\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"%s does not support the %<%%%s%c%> %s format\",\n+\t\t\t    C_STD_NAME (wanted_type_std), length_chars,\n+\t\t\t    format_char, fki->name);\n \t    }\n \t}\n \n@@ -2179,11 +2213,13 @@ check_format_info_main (format_check_results *res,\n \t  if (main_arg_num != 0)\n \t    {\n \t      if (suppressed)\n-\t\twarning (OPT_Wformat_, \"operand number specified with \"\n-\t\t\t \"suppressed assignment\");\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"operand number specified with \"\n+\t\t\t    \"suppressed assignment\");\n \t      else\n-\t\twarning (OPT_Wformat_, \"operand number specified for format \"\n-\t\t\t \"taking no argument\");\n+\t\twarning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t    \"operand number specified for format \"\n+\t\t\t    \"taking no argument\");\n \t    }\n \t}\n       else\n@@ -2200,7 +2236,8 @@ check_format_info_main (format_check_results *res,\n \t      ++arg_num;\n \t      if (has_operand_number > 0)\n \t\t{\n-\t\t  warning (OPT_Wformat_, \"missing $ operand number in format\");\n+\t\t  warning_at (format_string_loc, OPT_Wformat_,\n+\t\t\t      \"missing $ operand number in format\");\n \t\t  return;\n \t\t}\n \t      else\n@@ -2263,11 +2300,12 @@ check_format_info_main (format_check_results *res,\n \t}\n \n       if (first_wanted_type != 0)\n-        check_format_types (first_wanted_type);\n+        check_format_types (format_string_loc, first_wanted_type);\n     }\n \n   if (format_chars - orig_format_chars != format_length)\n-    warning (OPT_Wformat_contains_nul, \"embedded %<\\\\0%> in format\");\n+    warning_at (format_string_loc, OPT_Wformat_contains_nul,\n+\t\t\"embedded %<\\\\0%> in format\");\n   if (info->first_arg_num != 0 && params != 0\n       && has_operand_number <= 0)\n     {\n@@ -2280,9 +2318,10 @@ check_format_info_main (format_check_results *res,\n \n \n /* Check the argument types from a single format conversion (possibly\n-   including width and precision arguments).  */\n+   including width and precision arguments).  LOC is the location of\n+   the format string.  */\n static void\n-check_format_types (format_wanted_type *types)\n+check_format_types (location_t loc, format_wanted_type *types)\n {\n   for (; types != 0; types = types->next)\n     {\n@@ -2309,7 +2348,7 @@ check_format_types (format_wanted_type *types)\n       cur_param = types->param;\n       if (!cur_param)\n         {\n-          format_type_warning (types, wanted_type, NULL);\n+          format_type_warning (loc, types, wanted_type, NULL);\n           continue;\n         }\n \n@@ -2383,7 +2422,7 @@ check_format_types (format_wanted_type *types)\n \t    }\n \t  else\n \t    {\n-              format_type_warning (types, wanted_type, orig_cur_type);\n+              format_type_warning (loc, types, wanted_type, orig_cur_type);\n \t      break;\n \t    }\n \t}\n@@ -2437,20 +2476,21 @@ check_format_types (format_wanted_type *types)\n \t  && TYPE_PRECISION (cur_type) == TYPE_PRECISION (wanted_type))\n \tcontinue;\n       /* Now we have a type mismatch.  */\n-      format_type_warning (types, wanted_type, orig_cur_type);\n+      format_type_warning (loc, types, wanted_type, orig_cur_type);\n     }\n }\n \n \n-/* Give a warning about a format argument of different type from that\n+/* Give a warning at LOC about a format argument of different type from that\n    expected.  WANTED_TYPE is the type the argument should have, possibly\n    stripped of pointer dereferences.  The description (such as \"field\n    precision\"), the placement in the format string, a possibly more\n    friendly name of WANTED_TYPE, and the number of pointer dereferences\n    are taken from TYPE.  ARG_TYPE is the type of the actual argument,\n    or NULL if it is missing.  */\n static void\n-format_type_warning (format_wanted_type *type, tree wanted_type, tree arg_type)\n+format_type_warning (location_t loc, format_wanted_type *type,\n+\t\t     tree wanted_type, tree arg_type)\n {\n   int kind = type->kind;\n   const char *wanted_type_name = type->wanted_type_name;\n@@ -2494,32 +2534,36 @@ format_type_warning (format_wanted_type *type, tree wanted_type, tree arg_type)\n   if (wanted_type_name)\n     {\n       if (arg_type)\n-        warning (OPT_Wformat_, \"%s %<%s%.*s%> expects argument of type %<%s%s%>, \"\n-                 \"but argument %d has type %qT\",\n-                 gettext (kind_descriptions[kind]),\n-                 (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n-                 format_length, format_start, \n-                 wanted_type_name, p, arg_num, arg_type);\n+        warning_at (loc, OPT_Wformat_,\n+\t\t    \"%s %<%s%.*s%> expects argument of type %<%s%s%>, \"\n+\t\t    \"but argument %d has type %qT\",\n+\t\t    gettext (kind_descriptions[kind]),\n+\t\t    (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n+\t\t    format_length, format_start, \n+\t\t    wanted_type_name, p, arg_num, arg_type);\n       else\n-        warning (OPT_Wformat_, \"%s %<%s%.*s%> expects a matching %<%s%s%> argument\",\n-                 gettext (kind_descriptions[kind]),\n-                 (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n-                 format_length, format_start, wanted_type_name, p);\n+        warning_at (loc, OPT_Wformat_,\n+\t\t    \"%s %<%s%.*s%> expects a matching %<%s%s%> argument\",\n+\t\t    gettext (kind_descriptions[kind]),\n+\t\t    (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n+\t\t    format_length, format_start, wanted_type_name, p);\n     }\n   else\n     {\n       if (arg_type)\n-        warning (OPT_Wformat_, \"%s %<%s%.*s%> expects argument of type %<%T%s%>, \"\n-                 \"but argument %d has type %qT\",\n-                 gettext (kind_descriptions[kind]),\n-                 (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n-                 format_length, format_start, \n-                 wanted_type, p, arg_num, arg_type);\n+        warning_at (loc, OPT_Wformat_,\n+\t\t    \"%s %<%s%.*s%> expects argument of type %<%T%s%>, \"\n+\t\t    \"but argument %d has type %qT\",\n+\t\t    gettext (kind_descriptions[kind]),\n+\t\t    (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n+\t\t    format_length, format_start, \n+\t\t    wanted_type, p, arg_num, arg_type);\n       else\n-        warning (OPT_Wformat_, \"%s %<%s%.*s%> expects a matching %<%T%s%> argument\",\n-                 gettext (kind_descriptions[kind]),\n-                 (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n-                 format_length, format_start, wanted_type, p);\n+        warning_at (loc, OPT_Wformat_,\n+\t\t    \"%s %<%s%.*s%> expects a matching %<%T%s%> argument\",\n+\t\t    gettext (kind_descriptions[kind]),\n+\t\t    (kind == CF_KIND_FORMAT ? \"%\" : \"\"),\n+\t\t    format_length, format_start, wanted_type, p);\n     }\n }\n "}, {"sha": "55d921655c2ecf3d0bbad86ec5c965bbcc738586", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -1,3 +1,18 @@\n+2014-08-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t    Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR c/52952\n+\t* gcc.dg/redecl-4.c: Add column markers.\n+\t* gcc.dg/format/bitfld-1.c: Likewise.\n+\t* gcc.dg/format/attr-2.c: Likewise.\n+\t* gcc.dg/format/attr-6.c: Likewise.\n+\t* gcc.dg/format/array-1.c: Likewise.\n+\t* gcc.dg/format/attr-7.c: Likewise.\n+\t* gcc.dg/format/asm_fprintf-1.c: Likewise.\n+\t* gcc.dg/format/attr-4.c: Likewise.\n+\t* gcc.dg/format/branch-1.c: Likewise.\n+\t* gcc.dg/format/c90-printf-1.c: Likewise.\n+\n 2014-08-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* guality/nrv-1.c: Add `used' attribute to a1."}, {"sha": "d276ce5af8d269b8e296208fb498741f7b50d109", "filename": "gcc/testsuite/gcc.dg/format/array-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Farray-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Farray-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Farray-1.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -23,19 +23,19 @@ foo (int i, long l)\n   static const char q2[] = \"bar%d\";\n   printf (a1);\n   printf (a2, i);\n-  printf (a2, l); /* { dg-warning \"format\" \"wrong type with array\" } */\n-  printf (b1); /* { dg-warning \"unterminated\" \"unterminated array\" } */\n-  printf (b2); /* { dg-warning \"unterminated\" \"unterminated array\" } */\n+  printf (a2, l); /* { dg-warning \"11:format\" \"wrong type with array\" } */\n+  printf (b1); /* { dg-warning \"11:unterminated\" \"unterminated array\" } */\n+  printf (b2); /* { dg-warning \"11:unterminated\" \"unterminated array\" } */\n   printf (c1);\n   printf (c2, i);\n-  printf (c2, l); /* { dg-warning \"format\" \"wrong type with array\" } */\n+  printf (c2, l); /* { dg-warning \"11:format\" \"wrong type with array\" } */\n   printf (p1);\n   printf (p2, i);\n-  printf (p2, l); /* { dg-warning \"format\" \"wrong type with array\" } */\n+  printf (p2, l); /* { dg-warning \"11:format\" \"wrong type with array\" } */\n   printf (q1);\n   printf (q2, i);\n-  printf (q2, l); /* { dg-warning \"format\" \"wrong type with array\" } */\n+  printf (q2, l); /* { dg-warning \"11:format\" \"wrong type with array\" } */\n   /* Volatile or non-constant arrays must not be checked.  */\n-  printf (d); /* { dg-warning \"not a string literal\" \"non-const\" } */\n-  printf ((const char *)e); /* { dg-warning \"not a string literal\" \"volatile\" } */\n+  printf (d); /* { dg-warning \"11:not a string literal\" \"non-const\" } */\n+  printf ((const char *)e); /* { dg-warning \"25:not a string literal\" \"volatile\" } */\n }"}, {"sha": "623a6f3e7f653418c2bb76b3611f8ffb17676167", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-1.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -42,39 +42,39 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   asm_fprintf (\"%wd%wi%wo%wu%wx%wX\", ll, ll, ull, ull, ull, ull);\n \n   /* Standard specifiers not accepted in asm_fprintf.  */\n-  asm_fprintf (\"%f\\n\", d); /* { dg-warning \"format\" \"float\" } */\n-  asm_fprintf (\"%e\\n\", d); /* { dg-warning \"format\" \"float\" } */\n-  asm_fprintf (\"%E\\n\", d); /* { dg-warning \"format\" \"float\" } */\n-  asm_fprintf (\"%g\\n\", d); /* { dg-warning \"format\" \"float\" } */\n-  asm_fprintf (\"%G\\n\", d); /* { dg-warning \"format\" \"float\" } */\n-  asm_fprintf (\"%p\\n\", p); /* { dg-warning \"format\" \"pointer\" } */\n-  asm_fprintf (\"%n\\n\", n); /* { dg-warning \"format\" \"counter\" } */\n-  asm_fprintf (\"%hd\\n\", i); /* { dg-warning \"format\" \"conversion\" } */\n+  asm_fprintf (\"%f\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n+  asm_fprintf (\"%e\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n+  asm_fprintf (\"%E\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n+  asm_fprintf (\"%g\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n+  asm_fprintf (\"%G\\n\", d); /* { dg-warning \"16:format\" \"float\" } */\n+  asm_fprintf (\"%p\\n\", p); /* { dg-warning \"16:format\" \"pointer\" } */\n+  asm_fprintf (\"%n\\n\", n); /* { dg-warning \"16:format\" \"counter\" } */\n+  asm_fprintf (\"%hd\\n\", i); /* { dg-warning \"16:format\" \"conversion\" } */\n \n   /* Various tests of bad argument types.  */\n-  asm_fprintf (\"%d\", l); /* { dg-warning \"format\" \"bad argument types\" } */\n-  asm_fprintf (\"%wd\", l); /* { dg-warning \"format\" \"bad argument types\" } */\n-  asm_fprintf (\"%d\", ll); /* { dg-warning \"format\" \"bad argument types\" } */\n-  asm_fprintf (\"%*d\\n\", i1, i); /* { dg-warning \"format\" \"bad * argument types\" } */\n-  asm_fprintf (\"%.*d\\n\", i2, i); /* { dg-warning \"format\" \"bad * argument types\" } */\n-  asm_fprintf (\"%*.*ld\\n\", i1, i2, l); /* { dg-warning \"format\" \"bad * argument types\" } */\n-  asm_fprintf (\"%ld\", i); /* { dg-warning \"format\" \"bad argument types\" } */\n-  asm_fprintf (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+  asm_fprintf (\"%d\", l); /* { dg-warning \"16:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%wd\", l); /* { dg-warning \"16:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%d\", ll); /* { dg-warning \"16:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%*d\\n\", i1, i); /* { dg-warning \"16:format\" \"bad * argument types\" } */\n+  asm_fprintf (\"%.*d\\n\", i2, i); /* { dg-warning \"16:format\" \"bad * argument types\" } */\n+  asm_fprintf (\"%*.*ld\\n\", i1, i2, l); /* { dg-warning \"16:format\" \"bad * argument types\" } */\n+  asm_fprintf (\"%ld\", i); /* { dg-warning \"16:format\" \"bad argument types\" } */\n+  asm_fprintf (\"%s\", n); /* { dg-warning \"16:format\" \"bad argument types\" } */\n \n   /* Wrong number of arguments.  */\n-  asm_fprintf (\"%d%d\", i); /* { dg-warning \"matching\" \"wrong number of args\" } */\n-  asm_fprintf (\"%d\", i, i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  asm_fprintf (\"%d%d\", i); /* { dg-warning \"16:matching\" \"wrong number of args\" } */\n+  asm_fprintf (\"%d\", i, i); /* { dg-warning \"16:arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n-  asm_fprintf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */\n-  asm_fprintf (\"\\0\"); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n-  asm_fprintf (\"%d\\0\", i); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n-  asm_fprintf (\"%d\\0%d\", i, i); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"\"); /* { dg-warning \"16:zero-length\" \"warning for empty format\" } */\n+  asm_fprintf (\"\\0\"); /* { dg-warning \"16:embedded\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"%d\\0\", i); /* { dg-warning \"16:embedded\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"%d\\0%d\", i, i); /* { dg-warning \"16:embedded|too many\" \"warning for embedded NUL\" } */\n   asm_fprintf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n-  asm_fprintf (\"%\"); /* { dg-warning \"trailing\" \"trailing % warning\" } */\n-  asm_fprintf (\"%++d\", i); /* { dg-warning \"repeated\" \"repeated flag warning\" } */\n-  asm_fprintf ((const char *)L\"foo\"); /* { dg-warning \"wide\" \"wide string\" } */\n+  asm_fprintf (\"%\"); /* { dg-warning \"16:trailing\" \"trailing % warning\" } */\n+  asm_fprintf (\"%++d\", i); /* { dg-warning \"16:repeated\" \"repeated flag warning\" } */\n+  asm_fprintf ((const char *)L\"foo\"); /* { dg-warning \"30:wide\" \"wide string\" } */\n   asm_fprintf (\"%s\", (char *)0); /* { dg-warning \"null\" \"%s with NULL\" } */\n \n   /* Make sure we still get warnings for regular printf.  */\n-  printf (\"%d\\n\", ll); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%d\\n\", ll); /* { dg-warning \"11:format\" \"bad argument types\" } */\n }"}, {"sha": "bd697e7502be8fa0ae43eda39753582948d88021", "filename": "gcc/testsuite/gcc.dg/format/attr-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-2.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -30,7 +30,7 @@ void\n foo (int i, int *ip, double d)\n {\n   tformatprintf (\"%d\", i);\n-  tformatprintf (\"%\"); /* { dg-warning \"format\" \"attribute format printf\" } */\n+  tformatprintf (\"%\"); /* { dg-warning \"18:format\" \"attribute format printf\" } */\n   tformat__printf__ (\"%d\", i);\n   tformat__printf__ (\"%\"); /* { dg-warning \"format\" \"attribute format __printf__\" } */\n   tformatscanf (\"%d\", ip);"}, {"sha": "5f7971906df25009f6586b0cf1612091bd17e3f6", "filename": "gcc/testsuite/gcc.dg/format/attr-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-4.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -16,7 +16,7 @@ void\n baz (int i, int *ip, double d)\n {\n   tformatprintf0 (\"%d\", i);\n-  tformatprintf0 (\"%\"); /* { dg-warning \"format\" \"attribute format printf case 0\" } */\n+  tformatprintf0 (\"%\"); /* { dg-warning \"19:format\" \"attribute format printf case 0\" } */\n   tformatprintf1 (\"%d\", i);\n   tformatprintf1 (\"%\"); /* { dg-warning \"format\" \"attribute format printf case 1\" } */\n   tformatprintf2 (\"%d\", i);"}, {"sha": "7a85f35e4212653fd31c898d9237a5520a953970", "filename": "gcc/testsuite/gcc.dg/format/attr-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-6.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -17,6 +17,6 @@\n void\n foo (const char *s, int *p)\n {\n-  scanf(\"%ld\", p); /* { dg-warning \"format\" \"implicit scanf\" } */\n+  scanf(\"%ld\", p); /* { dg-warning \"9:format\" \"implicit scanf\" } */\n   /* { dg-warning \"implicit\" \"implicit decl warning\" { target *-*-* } 20 } */\n }"}, {"sha": "b3a31ef6b6e72f5f7cf64934190cf09e70be4c72", "filename": "gcc/testsuite/gcc.dg/format/attr-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fattr-7.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -18,7 +18,7 @@ baz (int i)\n {\n   (*tformatprintf0) (\"%d\", i);\n   (*tformatprintf0) ((*tformat_arg) (\"%d\"), i);\n-  (*tformatprintf0) (\"%\"); /* { dg-warning \"format\" \"prefix\" } */\n+  (*tformatprintf0) (\"%\"); /* { dg-warning \"22:format\" \"prefix\" } */\n   (*tformatprintf0) ((*tformat_arg) (\"%\")); /* { dg-warning \"format\" \"prefix\" } */\n   (*tformatprintf1) (\"%d\", i);\n   (*tformatprintf1) ((*tformat_arg) (\"%d\"), i);"}, {"sha": "d67260693a033ed17fbf1fba3233b8edee7f8ba9", "filename": "gcc/testsuite/gcc.dg/format/bitfld-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -46,6 +46,6 @@ foo (void)\n   printf (\"%ld%lu\", x.u32, x.u32);\n   printf (\"%ld%lu\", x.s32, x.s32);\n #endif\n-  printf (\"%llu\", x.u48); /* { dg-warning \"has type '.*unsigned int:48'\" } */\n+  printf (\"%llu\", x.u48); /* { dg-warning \"11:has type '.*unsigned int:48'\" } */\n   printf (\"%llu\", (unsigned long long)x.u48);\n }"}, {"sha": "5118473e77c252f7fdf37ea8923c1722b51e8479", "filename": "gcc/testsuite/gcc.dg/format/branch-1.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -9,19 +9,20 @@ void\n foo (long l, int nfoo)\n {\n   printf ((nfoo > 1) ? \"%d foos\" : \"%d foo\", nfoo);\n-  printf ((l > 1) ? \"%d foos\" : \"%d foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n-  printf ((l > 1) ? \"%ld foos\" : \"%d foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n-  printf ((l > 1) ? \"%d foos\" : \"%ld foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%d foos\" /* { dg-warning \"21:int\" \"wrong type in conditional expr\" } */\n+\t          : \"%d foo\", l); /* { dg-warning \"14:int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%ld foos\" : \"%d foo\", l); /* { dg-warning \"34:int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%d foos\" : \"%ld foo\", l); /* { dg-warning \"21:int\" \"wrong type in conditional expr\" } */\n   /* Should allow one case to have extra arguments.  */\n   printf ((nfoo > 1) ? \"%d foos\" : \"1 foo\", nfoo);\n-  printf ((nfoo > 1) ? \"many foos\" : \"1 foo\", nfoo); /* { dg-warning \"too many\" \"too many args in all branches\" } */\n+  printf ((nfoo > 1) ? \"many foos\" : \"1 foo\", nfoo); /* { dg-warning \"38:too many\" \"too many args in all branches\" } */\n   printf ((nfoo > 1) ? \"%d foos\" : \"\", nfoo);\n   printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"1 foo\" : \"no foos\"), nfoo);\n   printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo);\n-  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%ld foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n-  printf ((nfoo > 1) ? \"%ld foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n-  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%ld foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%ld foos\"), nfoo); /* { dg-warning \"61:long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%ld foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo); /* { dg-warning \"24:long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%ld foo\" : \"%d foos\"), nfoo); /* { dg-warning \"50:long int\" \"wrong type\" } */\n   /* Extra arguments to NULL should be complained about.  */\n-  printf (NULL, \"foo\"); /* { dg-warning \"too many\" \"NULL extra args\" } */\n-  /* { dg-warning \"null\" \"null format arg\" { target *-*-* } 25 } */\n+  printf (0, \"foo\"); /* { dg-warning \"14:too many\" \"NULL extra args\" } */\n+  /* { dg-warning \"null\" \"null format arg\" { target *-*-* } 26 } */\n }"}, {"sha": "55ba8bdb719b228c53ea2a893727da0c989fe576", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-1.c", "status": "modified", "additions": 110, "deletions": 110, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -34,28 +34,28 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%.e\\n\", d); /* { dg-bogus \"precision\" \"bogus precision warning\" } */\n   /* Bogus use of width.  */\n-  printf (\"%5n\\n\", n); /* { dg-warning \"width\" \"width with %n\" } */\n+  printf (\"%5n\\n\", n); /* { dg-warning \"11:width\" \"width with %n\" } */\n   /* Erroneous, ignored or pointless constructs with precision.  */\n   /* Whether negative values for precision may be included in the format\n      string is not entirely clear; presume not, following Clive Feather's\n      proposed resolution to DR#220 against C99.  In any case, such a\n      construct should be warned about.\n   */\n-  printf (\"%.-5d\\n\", i); /* { dg-warning \"format|precision\" \"negative precision warning\" } */\n-  printf (\"%.-*d\\n\", i); /* { dg-warning \"format\" \"broken %.-*d format\" } */\n-  printf (\"%.3c\\n\", i); /* { dg-warning \"precision\" \"precision with %c\" } */\n-  printf (\"%.3p\\n\", p); /* { dg-warning \"precision\" \"precision with %p\" } */\n-  printf (\"%.3n\\n\", n); /* { dg-warning \"precision\" \"precision with %n\" } */\n+  printf (\"%.-5d\\n\", i); /* { dg-warning \"11:format|precision\" \"negative precision warning\" } */\n+  printf (\"%.-*d\\n\", i); /* { dg-warning \"11:format\" \"broken %.-*d format\" } */\n+  printf (\"%.3c\\n\", i); /* { dg-warning \"11:precision\" \"precision with %c\" } */\n+  printf (\"%.3p\\n\", p); /* { dg-warning \"11:precision\" \"precision with %p\" } */\n+  printf (\"%.3n\\n\", n); /* { dg-warning \"11:precision\" \"precision with %n\" } */\n   /* Valid and invalid %% constructions.  Some of the warning messages\n      are non-optimal, but they do detect the errorneous nature of the\n      format string.\n   */\n   printf (\"%%\");\n-  printf (\"%.3%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n-  printf (\"%-%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n-  printf (\"%-%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n-  printf (\"%5%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n-  printf (\"%h%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  printf (\"%.3%\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n+  printf (\"%-%\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n+  printf (\"%-%\\n\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n+  printf (\"%5%\\n\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n+  printf (\"%h%\\n\"); /* { dg-warning \"11:format\" \"bogus %%\" } */\n   /* Valid and invalid %h, %l, %L constructions.  */\n   printf (\"%hd\", i);\n   printf (\"%hi\", i);\n@@ -67,122 +67,122 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%ho%hu%hx%hX\", u, u, u, u);\n   printf (\"%hn\", hn);\n-  printf (\"%hf\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n-  printf (\"%he\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n-  printf (\"%hE\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n-  printf (\"%hg\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n-  printf (\"%hG\", d); /* { dg-warning \"length\" \"bad use of %h\" } */\n-  printf (\"%hc\", i); /* { dg-warning \"length\" \"bad use of %h\" } */\n-  printf (\"%hs\", s); /* { dg-warning \"length\" \"bad use of %h\" } */\n-  printf (\"%hp\", p); /* { dg-warning \"length\" \"bad use of %h\" } */\n-  printf (\"%h\"); /* { dg-warning \"conversion lacks type\" \"bare %h\" } */\n-  printf (\"%h.\"); /* { dg-warning \"conversion\" \"bogus %h.\" } */\n+  printf (\"%hf\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n+  printf (\"%he\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n+  printf (\"%hE\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n+  printf (\"%hg\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n+  printf (\"%hG\", d); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n+  printf (\"%hc\", i); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n+  printf (\"%hs\", s); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n+  printf (\"%hp\", p); /* { dg-warning \"11:length\" \"bad use of %h\" } */\n+  printf (\"%h\"); /* { dg-warning \"11:conversion lacks type\" \"bare %h\" } */\n+  printf (\"%h.\"); /* { dg-warning \"11:conversion\" \"bogus %h.\" } */\n   printf (\"%ld%li%lo%lu%lx%lX\", l, l, ul, ul, ul, ul);\n   printf (\"%ln\", ln);\n-  printf (\"%lf\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n-  printf (\"%le\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n-  printf (\"%lE\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n-  printf (\"%lg\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n-  printf (\"%lG\", d); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n-  printf (\"%lp\", p); /* { dg-warning \"length|C\" \"bad use of %l\" } */\n+  printf (\"%lf\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n+  printf (\"%le\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n+  printf (\"%lE\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n+  printf (\"%lg\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n+  printf (\"%lG\", d); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n+  printf (\"%lp\", p); /* { dg-warning \"11:length|C\" \"bad use of %l\" } */\n   /* These next two were added in C94, but should be objected to in C90.\n      For the first one, GCC has wanted wchar_t instead of the correct C94\n      and C99 wint_t.\n   */\n-  printf (\"%lc\", lc); /* { dg-warning \"length|C\" \"C90 bad use of %l\" } */\n-  printf (\"%ls\", ls); /* { dg-warning \"length|C\" \"C90 bad use of %l\" } */\n+  printf (\"%lc\", lc); /* { dg-warning \"11:length|C\" \"C90 bad use of %l\" } */\n+  printf (\"%ls\", ls); /* { dg-warning \"11:length|C\" \"C90 bad use of %l\" } */\n   /* These uses of %L are legitimate, though GCC has wrongly warned for\n      them in the past.\n   */\n   printf (\"%Le%LE%Lf%Lg%LG\", ld, ld, ld, ld, ld);\n   /* These next six are accepted by GCC as referring to long long,\n      but -pedantic correctly warns.\n   */\n-  printf (\"%Ld\", ll); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n-  printf (\"%Li\", ll); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n-  printf (\"%Lo\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n-  printf (\"%Lu\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n-  printf (\"%Lx\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n-  printf (\"%LX\", ull); /* { dg-warning \"does not support\" \"bad use of %L\" } */\n-  printf (\"%Lc\", i); /* { dg-warning \"length\" \"bad use of %L\" } */\n-  printf (\"%Ls\", s); /* { dg-warning \"length\" \"bad use of %L\" } */\n-  printf (\"%Lp\", p); /* { dg-warning \"length\" \"bad use of %L\" } */\n-  printf (\"%Ln\", n); /* { dg-warning \"length\" \"bad use of %L\" } */\n+  printf (\"%Ld\", ll); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n+  printf (\"%Li\", ll); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n+  printf (\"%Lo\", ull); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n+  printf (\"%Lu\", ull); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n+  printf (\"%Lx\", ull); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n+  printf (\"%LX\", ull); /* { dg-warning \"11:does not support\" \"bad use of %L\" } */\n+  printf (\"%Lc\", i); /* { dg-warning \"11:length\" \"bad use of %L\" } */\n+  printf (\"%Ls\", s); /* { dg-warning \"11:length\" \"bad use of %L\" } */\n+  printf (\"%Lp\", p); /* { dg-warning \"11:length\" \"bad use of %L\" } */\n+  printf (\"%Ln\", n); /* { dg-warning \"11:length\" \"bad use of %L\" } */\n   /* Valid uses of each bare conversion.  */\n   printf (\"%d%i%o%u%x%X%f%e%E%g%G%c%s%p%n%%\", i, i, u, u, u, u, d, d, d, d, d,\n \t  i, s, p, n);\n   /* Uses of the - flag (valid on all non-%, non-n conversions).  */\n   printf (\"%-d%-i%-o%-u%-x%-X%-f%-e%-E%-g%-G%-c%-s%-p\", i, i, u, u, u, u,\n \t  d, d, d, d, d, i, s, p);\n-  printf (\"%-n\", n); /* { dg-warning \"flag\" \"bad use of %-n\" } */\n+  printf (\"%-n\", n); /* { dg-warning \"11:flag\" \"bad use of %-n\" } */\n   /* Uses of the + flag (valid on signed conversions only).  */\n   printf (\"%+d%+i%+f%+e%+E%+g%+G\\n\", i, i, d, d, d, d, d);\n-  printf (\"%+o\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n-  printf (\"%+u\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n-  printf (\"%+x\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n-  printf (\"%+X\", u); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n-  printf (\"%+c\", i); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n-  printf (\"%+s\", s); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n-  printf (\"%+p\", p); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n-  printf (\"%+n\", n); /* { dg-warning \"flag\" \"bad use of + flag\" } */\n+  printf (\"%+o\", u); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n+  printf (\"%+u\", u); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n+  printf (\"%+x\", u); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n+  printf (\"%+X\", u); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n+  printf (\"%+c\", i); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n+  printf (\"%+s\", s); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n+  printf (\"%+p\", p); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n+  printf (\"%+n\", n); /* { dg-warning \"11:flag\" \"bad use of + flag\" } */\n   /* Uses of the space flag (valid on signed conversions only, and ignored\n      with +).\n   */\n-  printf (\"% +d\", i); /* { dg-warning \"use of both|ignored\" \"use of space and + flags\" } */\n-  printf (\"%+ d\", i); /* { dg-warning \"use of both|ignored\" \"use of space and + flags\" } */\n+  printf (\"% +d\", i); /* { dg-warning \"11:use of both|ignored\" \"use of space and + flags\" } */\n+  printf (\"%+ d\", i); /* { dg-warning \"11:use of both|ignored\" \"use of space and + flags\" } */\n   printf (\"% d% i% f% e% E% g% G\\n\", i, i, d, d, d, d, d);\n-  printf (\"% o\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n-  printf (\"% u\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n-  printf (\"% x\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n-  printf (\"% X\", u); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n-  printf (\"% c\", i); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n-  printf (\"% s\", s); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n-  printf (\"% p\", p); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n-  printf (\"% n\", n); /* { dg-warning \"flag\" \"bad use of space flag\" } */\n+  printf (\"% o\", u); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n+  printf (\"% u\", u); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n+  printf (\"% x\", u); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n+  printf (\"% X\", u); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n+  printf (\"% c\", i); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n+  printf (\"% s\", s); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n+  printf (\"% p\", p); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n+  printf (\"% n\", n); /* { dg-warning \"11:flag\" \"bad use of space flag\" } */\n   /* Uses of the # flag.  */\n   printf (\"%#o%#x%#X%#e%#E%#f%#g%#G\", u, u, u, d, d, d, d, d);\n-  printf (\"%#d\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n-  printf (\"%#i\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n-  printf (\"%#u\", u); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n-  printf (\"%#c\", i); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n-  printf (\"%#s\", s); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n-  printf (\"%#p\", p); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n-  printf (\"%#n\", n); /* { dg-warning \"flag\" \"bad use of # flag\" } */\n+  printf (\"%#d\", i); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n+  printf (\"%#i\", i); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n+  printf (\"%#u\", u); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n+  printf (\"%#c\", i); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n+  printf (\"%#s\", s); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n+  printf (\"%#p\", p); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n+  printf (\"%#n\", n); /* { dg-warning \"11:flag\" \"bad use of # flag\" } */\n   /* Uses of the 0 flag.  */\n   printf (\"%08d%08i%08o%08u%08x%08X%08e%08E%08f%08g%08G\", i, i, u, u, u, u,\n \t  d, d, d, d, d);\n-  printf (\"%0c\", i); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n-  printf (\"%0s\", s); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n-  printf (\"%0p\", p); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n-  printf (\"%0n\", n); /* { dg-warning \"flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0c\", i); /* { dg-warning \"11:flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0s\", s); /* { dg-warning \"11:flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0p\", p); /* { dg-warning \"11:flag\" \"bad use of 0 flag\" } */\n+  printf (\"%0n\", n); /* { dg-warning \"11:flag\" \"bad use of 0 flag\" } */\n   /* 0 flag ignored with precision for certain types, not others.  */\n-  printf (\"%08.5d\", i); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n-  printf (\"%08.5i\", i); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n-  printf (\"%08.5o\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n-  printf (\"%08.5u\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n-  printf (\"%08.5x\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n-  printf (\"%08.5X\", u); /* { dg-warning \"ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5d\", i); /* { dg-warning \"11:ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5i\", i); /* { dg-warning \"11:ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5o\", u); /* { dg-warning \"11:ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5u\", u); /* { dg-warning \"11:ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5x\", u); /* { dg-warning \"11:ignored\" \"0 flag ignored with precision\" } */\n+  printf (\"%08.5X\", u); /* { dg-warning \"11:ignored\" \"0 flag ignored with precision\" } */\n   printf (\"%08.5f%08.5e%08.5E%08.5g%08.5G\", d, d, d, d, d);\n   /* 0 flag ignored with - flag.  */\n-  printf (\"%-08d\", i); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08i\", i); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08o\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08u\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08x\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08X\", u); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08e\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08E\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08f\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08g\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n-  printf (\"%-08G\", d); /* { dg-warning \"flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08d\", i); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08i\", i); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08o\", u); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08u\", u); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08x\", u); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08X\", u); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08e\", d); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08E\", d); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08f\", d); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08g\", d); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n+  printf (\"%-08G\", d); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n   /* Various tests of bad argument types.  */\n-  printf (\"%d\", l); /* { dg-warning \"format\" \"bad argument types\" } */\n-  printf (\"%*.*d\", l, i2, i); /* { dg-warning \"field\" \"bad * argument types\" } */\n-  printf (\"%*.*d\", i1, l, i); /* { dg-warning \"field\" \"bad * argument types\" } */\n-  printf (\"%ld\", i); /* { dg-warning \"format\" \"bad argument types\" } */\n-  printf (\"%s\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n-  printf (\"%p\", i); /* { dg-warning \"format\" \"bad argument types\" } */\n-  printf (\"%n\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%d\", l); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%*.*d\", l, i2, i); /* { dg-warning \"11:field\" \"bad * argument types\" } */\n+  printf (\"%*.*d\", i1, l, i); /* { dg-warning \"11:field\" \"bad * argument types\" } */\n+  printf (\"%ld\", i); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%s\", n); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%p\", i); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%n\", p); /* { dg-warning \"11:format\" \"bad argument types\" } */\n   /* With -pedantic, we want some further checks for pointer targets:\n      %p should allow only pointers to void (possibly qualified) and\n      to character types (possibly qualified), but not function pointers\n@@ -196,9 +196,9 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n      char * or unsigned char * being passed to %hhn, even if strictly\n      legitimate by the standard.)\n   */\n-  printf (\"%p\", foo); /* { dg-warning \"format\" \"bad argument types\" } */\n-  printf (\"%n\", un); /* { dg-warning \"format\" \"bad argument types\" } */\n-  printf (\"%p\", n); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%p\", foo); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%n\", un); /* { dg-warning \"11:format\" \"bad argument types\" } */\n+  printf (\"%p\", n); /* { dg-warning \"11:format\" \"bad argument types\" } */\n   /* Allow character pointers with %p.  */\n   printf (\"%p%p%p%p\", s, ss, us, css);\n   /* %s allows any character type.  */\n@@ -207,7 +207,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n      and seems useful to keep, even if some standard versions might be\n      read to permit it.\n   */\n-  printf (\"%s\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%s\", p); /* { dg-warning \"11:format\" \"bad argument types\" } */\n   /* The historical behavior is to allow signed / unsigned types\n      interchangeably as arguments.  For values representable in both types,\n      such usage may be correct.  For now preserve the behavior of GCC\n@@ -220,18 +220,18 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%*.*d\", u1, u2, i);\n   /* Wrong number of arguments.  */\n-  printf (\"%d%d\", i); /* { dg-warning \"matching\" \"wrong number of args\" } */\n-  printf (\"%d\", i, i); /* { dg-warning \"arguments\" \"wrong number of args\" } */\n+  printf (\"%d%d\", i); /* { dg-warning \"11:matching\" \"wrong number of args\" } */\n+  printf (\"%d\", i, i); /* { dg-warning \"11:arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n-  printf (\"\"); /* { dg-warning \"zero-length\" \"warning for empty format\" } */\n-  printf (\"\\0\"); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n-  printf (\"%d\\0\", i); /* { dg-warning \"embedded\" \"warning for embedded NUL\" } */\n-  printf (\"%d\\0%d\", i, i); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n-  printf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n-  printf (\"%\"); /* { dg-warning \"trailing\" \"trailing % warning\" } */\n-  printf (\"%++d\", i); /* { dg-warning \"repeated\" \"repeated flag warning\" } */\n-  printf (\"%n\", cn); /* { dg-warning \"constant\" \"%n with const\" } */\n-  printf ((const char *)L\"foo\"); /* { dg-warning \"wide\" \"wide string\" } */\n-  printf (\"%n\", (int *)0); /* { dg-warning \"null\" \"%n with NULL\" } */\n-  printf (\"%s\", (char *)0); /* { dg-warning \"null\" \"%s with NULL\" } */\n+  printf (\"\"); /* { dg-warning \"11:zero-length\" \"warning for empty format\" } */\n+  printf (\"\\0\"); /* { dg-warning \"11:embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0\", i); /* { dg-warning \"11:embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0%d\", i, i); /* { dg-warning \"11:embedded|too many\" \"warning for embedded NUL\" } */\n+  printf (NULL); /* { dg-warning \"3:null\" \"null format string warning\" } */\n+  printf (\"%\"); /* { dg-warning \"11:trailing\" \"trailing % warning\" } */\n+  printf (\"%++d\", i); /* { dg-warning \"11:repeated\" \"repeated flag warning\" } */\n+  printf (\"%n\", cn); /* { dg-warning \"3:constant\" \"%n with const\" } */\n+  printf ((const char *)L\"foo\"); /* { dg-warning \"25:wide\" \"wide string\" } */\n+  printf (\"%n\", (int *)0); /* { dg-warning \"3:null\" \"%n with NULL\" } */\n+  printf (\"%s\", (char *)0); /* { dg-warning \"3:null\" \"%s with NULL\" } */\n }"}, {"sha": "53cf327fbaa2170294cc3f79fc6353ee84e353a2", "filename": "gcc/testsuite/gcc.dg/redecl-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ae9194fc25f0f5d44191aba155e60de88aa856f/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-4.c?ref=6ae9194fc25f0f5d44191aba155e60de88aa856f", "patch": "@@ -14,7 +14,8 @@ f (void)\n     int strcmp ();\n     /* Should get format warnings even though the built-in declaration\n        isn't \"visible\".  */\n-    printf (\"%s\", 1); /* { dg-warning \"format\" } */\n+    printf (\n+\t    \"%s\", 1); /* { dg-warning \"6:format\" } */\n     /* The type of strcmp here should have no prototype.  */\n     if (0)\n       strcmp (1);"}]}