{"sha": "06c37c965a32bf125f32111fac25707bee54708a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjMzdjOTY1YTMyYmYxMjVmMzIxMTFmYWMyNTcwN2JlZTU0NzA4YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-08-27T16:20:45Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-27T16:20:45Z"}, "message": "configure.ac: Add ENABLE_ASSERT_CHECKING control.\n\n\t* configure.ac: Add ENABLE_ASSERT_CHECKING control.\n\tAdd is_release variable, use it for --enable-werror and\n\t--enable-checking defaults.\n\t* system.h (gcc_assert, gcc_unreachable): New.\n\t* doc/install.texi (--enable-checking): Update.\n\t* configure, config.in: Rebuilt.\n\nFrom-SVN: r86666", "tree": {"sha": "e2fce412e85b16b97075f73dc19c83b703a40a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2fce412e85b16b97075f73dc19c83b703a40a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06c37c965a32bf125f32111fac25707bee54708a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c37c965a32bf125f32111fac25707bee54708a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c37c965a32bf125f32111fac25707bee54708a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c37c965a32bf125f32111fac25707bee54708a/comments", "author": null, "committer": null, "parents": [{"sha": "9d64df18fd9175749aea2742096b172f59a5ebeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d64df18fd9175749aea2742096b172f59a5ebeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d64df18fd9175749aea2742096b172f59a5ebeb"}], "stats": {"total": 122, "additions": 101, "deletions": 21}, "files": [{"sha": "b583862145c13b9d7fe9aa2b3f7f4520ba1f1774", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c37c965a32bf125f32111fac25707bee54708a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c37c965a32bf125f32111fac25707bee54708a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06c37c965a32bf125f32111fac25707bee54708a", "patch": "@@ -1,3 +1,12 @@\n+2004-08-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* configure.ac: Add ENABLE_ASSERT_CHECKING control.\n+\tAdd is_release variable, use it for --enable-werror and\n+\t--enable-checking defaults.\n+\t* system.h (gcc_assert, gcc_unreachable): New.\n+\t* doc/install.texi (--enable-checking): Update.\n+\t* configure, config.in: Rebuilt.\n+\n 2004-08-26  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* rtl.h (read_rtx): Change prototype."}, {"sha": "a104c6739c3c4d37e987ff21a5a9414b918be3ce", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=06c37c965a32bf125f32111fac25707bee54708a", "patch": "@@ -21,6 +21,9 @@\n    __cxa_atexit in libc. */\n #undef DEFAULT_USE_CXA_ATEXIT\n \n+/* Define if you want assertions enabled. This is a cheap check. */\n+#undef ENABLE_ASSERT_CHECKING\n+\n /* Define if you want more run-time sanity checks. This one gets a grab bag of\n    miscellaneous but relatively cheap checks. */\n #undef ENABLE_CHECKING"}, {"sha": "3aaefd3ff19442342e0f2a6be953bde8a4a0789d", "filename": "gcc/configure", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=06c37c965a32bf125f32111fac25707bee54708a", "patch": "@@ -867,8 +867,9 @@ Optional Features:\n   --enable-checking=LIST\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n-\t\t\t  Categories are: fold,gc,gcac,misc,rtlflag,rtl,\n-\t\t\t  tree,valgrind; default is gc,misc,rtlflag,tree\n+\t\t\t  Categories are: none,assert,fold,gc,gcac,misc,\n+\t\t\t  rtlflag,rtl,tree,valgrind;\n+\t\t\t  default is assert,gc,misc,rtlflag,tree\n   --enable-mapped-location   location_t is fileline integer cookie\n   --enable-coverage=LEVEL\n \t\t\t  enable compiler's code coverage collection.\n@@ -1381,6 +1382,9 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n           ac_config_headers=\"$ac_config_headers auto-host.h:config.in\"\n \n \n+#Set to 1 on a release branch\n+is_release=\n+\n # Determine the host, build, and target systems\n ac_aux_dir=\n for ac_dir in $srcdir $srcdir/.. $srcdir/../..; do\n@@ -3902,13 +3906,18 @@ fi\n \n \n # Enable -Werror in bootstrap stage2 and later.\n-# Change the default to \"no\" on release branches.\n # Check whether --enable-werror or --disable-werror was given.\n if test \"${enable_werror+set}\" = set; then\n   enableval=\"$enable_werror\"\n \n else\n+  if test x$is_release = x ; then\n+  # Default to \"yes\" on development branches.\n   enable_werror=yes\n+else\n+  # Default to \"no\" on release branches.\n+  enable_werror=no\n+fi\n fi;\n if test x$enable_werror = xyes ; then\n   WERROR=-Werror\n@@ -3926,16 +3935,19 @@ ac_rtlflag_checking=\n ac_gc_checking=\n ac_gc_always_collect=\n ac_fold_checking=\n+ac_assert_checking=\n case \"${enableval}\" in\n yes)\tac_checking=1 ; ac_tree_checking=1 ; ac_gc_checking=1 ;\n-\tac_rtlflag_checking=1 ;;\n+\tac_rtlflag_checking=1 ; ac_assert_checking=1 ;;\n no)\t;;\n *)\tIFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n \tset fnord $enableval; shift\n \tIFS=\"$ac_save_IFS\"\n+\tac_assert_checking=1\n \tfor check\n \tdo\n \t\tcase $check in\n+\t\tassert) ac_assert_checking=1 ;;\n \t\tfold)\tac_fold_checking=1 ;;\n \t\tgc)\tac_gc_checking=1 ;;\n \t\tgcac)\tac_gc_always_collect=1 ;;\n@@ -3953,8 +3965,16 @@ echo \"$as_me: error: unknown check category $check\" >&2;}\n esac\n \n else\n-  # Enable some checks by default for development versions of GCC\n-ac_checking=1; ac_tree_checking=1; ac_gc_checking=1; ac_rtlflag_checking=1;\n+\n+# Determine the default checks.\n+if test x$is_release = x ; then\n+  # Enable some checks for development versions of GCC\n+  ac_assert_checking=1;\n+  ac_checking=1; ac_tree_checking=1; ac_gc_checking=1; ac_rtlflag_checking=1;\n+else\n+  # Disable all but assertions for release versions of GCC.\n+  ac_assert_checking=1;\n+fi\n fi;\n nocommon_flag=\"\"\n if test x$ac_checking != x ; then\n@@ -3966,6 +3986,13 @@ _ACEOF\n   nocommon_flag=-fno-common\n fi\n \n+if test x$ac_assert_checking != x ; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define ENABLE_ASSERT_CHECKING 1\n+_ACEOF\n+\n+fi\n if test x$ac_tree_checking != x ; then\n \n cat >>confdefs.h <<\\_ACEOF\n@@ -5263,7 +5290,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:5266: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:5293: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[2-9]*)"}, {"sha": "993d81d8736b4882ea14dea026b77f64c830b907", "filename": "gcc/configure.ac", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=06c37c965a32bf125f32111fac25707bee54708a", "patch": "@@ -30,6 +30,9 @@ AC_INIT\n AC_CONFIG_SRCDIR(tree.c)\n AC_CONFIG_HEADER(auto-host.h:config.in)\n \n+#Set to 1 on a release branch\n+is_release=\n+\n # Determine the host, build, and target systems\n AC_CANONICAL_BUILD\n AC_CANONICAL_HOST\n@@ -370,10 +373,15 @@ fi\n AC_SUBST(warn_cflags)\n \n # Enable -Werror in bootstrap stage2 and later.\n-# Change the default to \"no\" on release branches.\n AC_ARG_ENABLE(werror, \n [  --enable-werror         enable -Werror in bootstrap stage2 and later], [],\n-[enable_werror=yes])\n+[if test x$is_release = x ; then\n+  # Default to \"yes\" on development branches.\n+  enable_werror=yes\n+else\n+  # Default to \"no\" on release branches.\n+  enable_werror=no\n+fi])\n if test x$enable_werror = xyes ; then\n   WERROR=-Werror\n fi\n@@ -384,25 +392,29 @@ AC_ARG_ENABLE(checking,\n [  --enable-checking[=LIST]\n \t\t\t  enable expensive run-time checks.  With LIST,\n \t\t\t  enable only specific categories of checks.\n-\t\t\t  Categories are: fold,gc,gcac,misc,rtlflag,rtl,\n-\t\t\t  tree,valgrind; default is gc,misc,rtlflag,tree],\n+\t\t\t  Categories are: none,assert,fold,gc,gcac,misc,\n+\t\t\t  rtlflag,rtl,tree,valgrind;\n+\t\t\t  default is assert,gc,misc,rtlflag,tree],\n [ac_checking=\n ac_tree_checking=\n ac_rtl_checking=\n ac_rtlflag_checking=\n ac_gc_checking=\n ac_gc_always_collect=\n ac_fold_checking=\n+ac_assert_checking=\n case \"${enableval}\" in\n yes)\tac_checking=1 ; ac_tree_checking=1 ; ac_gc_checking=1 ;\n-\tac_rtlflag_checking=1 ;;\n+\tac_rtlflag_checking=1 ; ac_assert_checking=1 ;;\n no)\t;;\n *)\tIFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"$IFS,\"\n \tset fnord $enableval; shift\n \tIFS=\"$ac_save_IFS\"\n+\tac_assert_checking=1\n \tfor check\n \tdo\n \t\tcase $check in\n+\t\tassert) ac_assert_checking=1 ;;\n \t\tfold)\tac_fold_checking=1 ;;\n \t\tgc)\tac_gc_checking=1 ;;\n \t\tgcac)\tac_gc_always_collect=1 ;;\n@@ -416,9 +428,16 @@ no)\t;;\n \tdone\n \t;;\n esac\n-], \n-# Enable some checks by default for development versions of GCC\n-[ac_checking=1; ac_tree_checking=1; ac_gc_checking=1; ac_rtlflag_checking=1;])\n+], [\n+# Determine the default checks.\n+if test x$is_release = x ; then\n+  # Enable some checks for development versions of GCC\n+  ac_assert_checking=1;\n+  ac_checking=1; ac_tree_checking=1; ac_gc_checking=1; ac_rtlflag_checking=1;\n+else\n+  # Disable all but assertions for release versions of GCC.\n+  ac_assert_checking=1;\n+fi])\n nocommon_flag=\"\"\n if test x$ac_checking != x ; then\n   AC_DEFINE(ENABLE_CHECKING, 1,\n@@ -427,6 +446,10 @@ if test x$ac_checking != x ; then\n   nocommon_flag=-fno-common\n fi\n AC_SUBST(nocommon_flag)\n+if test x$ac_assert_checking != x ; then\n+  AC_DEFINE(ENABLE_ASSERT_CHECKING, 1,\n+[Define if you want assertions enabled.  This is a cheap check.])\n+fi\n if test x$ac_tree_checking != x ; then\n   AC_DEFINE(ENABLE_TREE_CHECKING, 1,\n [Define if you want all operations on trees (the basic data"}, {"sha": "90effbf4710c382f5d3a754d04c03445d0dfaad2", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=06c37c965a32bf125f32111fac25707bee54708a", "patch": "@@ -1097,12 +1097,17 @@ compiler and may only work properly if you are building the compiler\n with GCC@.  This is on by default when building from CVS or snapshots,\n but off for releases.  More control over the checks may be had by\n specifying @var{list}; the categories of checks available are\n-@samp{misc}, @samp{tree}, @samp{gc}, @samp{rtl}, @samp{rtlflag},\n-@samp{fold}, @samp{gcac} and @samp{valgrind}.  The check @samp{valgrind}\n-requires the external @command{valgrind} simulator, available from\n-@uref{http://valgrind.kde.org/}.  The default when @var{list} is\n-not specified is @samp{misc,tree,gc,rtlflag}; the checks @samp{rtl},\n-@samp{gcac} and @samp{valgrind} are very expensive.\n+@samp{assert}, @samp{misc}, @samp{tree}, @samp{gc}, @samp{rtl},\n+@samp{rtlflag}, @samp{fold}, @samp{gcac} and @samp{valgrind}.  The check\n+@samp{valgrind} requires the external @command{valgrind} simulator,\n+available from @uref{http://valgrind.kde.org/}.  The default when\n+@var{list} is not specified is @samp{assert,misc,tree,gc,rtlflag}; the\n+checks @samp{rtl}, @samp{gcac} and @samp{valgrind} are very expensive.\n+When checking is neither explicitly enabled nor disabled, assertion\n+checks are still done.  To disable all checking,\n+@samp{--disable-checking} must be explicitly requested.  Disabling\n+assertions will make the compiler slightly faster but increase the risk\n+undetected internal errors causing wrong code to be generated.\n \n @item --enable-coverage\n @itemx --enable-coverage=@var{level}"}, {"sha": "934a332162ff9a6e40d9e07991b1b11240339a52", "filename": "gcc/system.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c37c965a32bf125f32111fac25707bee54708a/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=06c37c965a32bf125f32111fac25707bee54708a", "patch": "@@ -505,6 +505,19 @@ extern int snprintf (char *, size_t, const char *, ...);\n extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n #define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)\n \n+/* Use gcc_assert(EXPR) to test invariants.  */\n+#if ENABLE_ASSERT_CHECKING\n+#define gcc_assert(EXPR) \t\t\t\t\t\t\\\n+   ((void)(__builtin_expect (!(EXPR), 0)\t\t\t\t\\\n+\t   ? fancy_abort (__FILE__, __LINE__, __FUNCTION__), 0 : 0))\n+#else\n+#define gcc_assert(EXPR) ((void)0)\n+#endif\n+\n+/* Use gcc_unreachable() to mark unreachable locations (like an\n+   unreachable default case of a switch.  Do not use gcc_assert(0).  */\n+#define gcc_unreachable() (fancy_abort (__FILE__, __LINE__, __FUNCTION__))\n+\n /* Provide a fake boolean type.  We make no attempt to use the\n    C99 _Bool, as it may not be available in the bootstrap compiler,\n    and even if it is, it is liable to be buggy."}]}