{"sha": "a7a7710d423cba8feb795c3e626df5ce4075cebb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhNzcxMGQ0MjNjYmE4ZmViNzk1YzNlNjI2ZGY1Y2U0MDc1Y2ViYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-01-16T16:31:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-16T16:31:12Z"}, "message": "cp-tree.h (struct lang_type): Added has_mutable flag.\n\n\t* cp-tree.h (struct lang_type): Added has_mutable flag.\n\t(CLASSTYPE_HAS_MUTABLE): New macro to access it.\n\t(TYPE_HAS_MUTABLE_P): New macro to read it.\n\t(cp_has_mutable_p): Prototype for new function.\n\t* class.c (finish_struct_1): Set has_mutable from members.\n\t* decl.c (cp_finish_decl): Clear decl's TREE_READONLY flag, if\n\tit contains a mutable.\n\t* typeck.c (cp_has_mutable_p): New function.\nFixes g++.other/mutable1.C\n\nFrom-SVN: r24701", "tree": {"sha": "8f9d4e6c38db1bc57ed11c767e476cf0f914efb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f9d4e6c38db1bc57ed11c767e476cf0f914efb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a7710d423cba8feb795c3e626df5ce4075cebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a7710d423cba8feb795c3e626df5ce4075cebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a7710d423cba8feb795c3e626df5ce4075cebb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a7710d423cba8feb795c3e626df5ce4075cebb/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "854b494a9ef17692e2daabf8fa0c478161becd41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854b494a9ef17692e2daabf8fa0c478161becd41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854b494a9ef17692e2daabf8fa0c478161becd41"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "32f5df1ce3848c0c1138490518631916da0ea6a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a7a7710d423cba8feb795c3e626df5ce4075cebb", "patch": "@@ -1,3 +1,14 @@\n+1999-01-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (struct lang_type): Added has_mutable flag.\n+\t(CLASSTYPE_HAS_MUTABLE): New macro to access it.\n+\t(TYPE_HAS_MUTABLE_P): New macro to read it.\n+\t(cp_has_mutable_p): Prototype for new function.\n+\t* class.c (finish_struct_1): Set has_mutable from members.\n+\t* decl.c (cp_finish_decl): Clear decl's TREE_READONLY flag, if\n+\tit contains a mutable.\n+\t* typeck.c (cp_has_mutable_p): New function.\n+\n 1999-01-15  Mark Mitchell  <mark@markmitchell.com>\n \n \t* pt.c (process_template_parm): Ignore top-level qualifiers on"}, {"sha": "1688e025d2a1aeaec8d398c4bb3ce23032b143e7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a7a7710d423cba8feb795c3e626df5ce4075cebb", "patch": "@@ -3316,6 +3316,7 @@ finish_struct_1 (t, warn_anon)\n   int cant_have_default_ctor;\n   int cant_have_const_ctor;\n   int no_const_asn_ref;\n+  int has_mutable = 0;\n \n   /* The index of the first base class which has virtual\n      functions.  Only applied to non-virtual baseclasses.  */\n@@ -3578,6 +3579,9 @@ finish_struct_1 (t, warn_anon)\n       if (TREE_CODE (TREE_TYPE (x)) == POINTER_TYPE)\n \thas_pointers = 1;\n \n+      if (DECL_MUTABLE_P (x) || TYPE_HAS_MUTABLE_P (TREE_TYPE (x)))\n+        has_mutable = 1;\n+\n       /* If any field is const, the structure type is pseudo-const.  */\n       if (TREE_READONLY (x))\n \t{\n@@ -3794,6 +3798,7 @@ finish_struct_1 (t, warn_anon)\n   CLASSTYPE_READONLY_FIELDS_NEED_INIT (t) = const_sans_init;\n   CLASSTYPE_REF_FIELDS_NEED_INIT (t) = ref_sans_init;\n   CLASSTYPE_ABSTRACT_VIRTUALS (t) = abstract_virtuals;\n+  CLASSTYPE_HAS_MUTABLE (t) = has_mutable;\n \n   /* Effective C++ rule 11.  */\n   if (has_pointers && warn_ecpp && TYPE_HAS_CONSTRUCTOR (t)"}, {"sha": "fb80e38cd3cb79298ea8ec9b41f7d855fb59397e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a7a7710d423cba8feb795c3e626df5ce4075cebb", "patch": "@@ -726,11 +726,12 @@ struct lang_type\n       unsigned has_abstract_assign_ref : 1;\n       unsigned non_aggregate : 1;\n       unsigned is_partial_instantiation : 1;\n+      unsigned has_mutable : 1;\n \n       /* The MIPS compiler gets it wrong if this struct also\n \t does not fill out to a multiple of 4 bytes.  Add a\n \t member `dummy' with new bits if you go over the edge.  */\n-      unsigned dummy : 11;\n+      unsigned dummy : 10;\n     } type_flags;\n \n   int n_ancestors;\n@@ -1037,6 +1038,10 @@ struct lang_type\n /* Ditto, for operator=.  */\n #define TYPE_HAS_NONPUBLIC_ASSIGN_REF(NODE) (TYPE_LANG_SPECIFIC(NODE)->type_flags.has_nonpublic_assign_ref)\n \n+/* Nonzero means that this type contains a mutable member */\n+#define CLASSTYPE_HAS_MUTABLE(NODE) (TYPE_LANG_SPECIFIC(NODE)->type_flags.has_mutable)\n+#define TYPE_HAS_MUTABLE_P(NODE) (cp_has_mutable_p (NODE))\n+\n /* Many routines need to cons up a list of basetypes for access\n    checking.  This field contains a TREE_LIST node whose TREE_VALUE\n    is the main variant of the type, and whose TREE_VIA_PUBLIC\n@@ -3372,6 +3377,7 @@ extern int comp_ptr_ttypes\t\t\tPROTO((tree, tree));\n extern int ptr_reasonably_similar\t\tPROTO((tree, tree));\n extern tree build_ptrmemfunc\t\t\tPROTO((tree, tree, int));\n extern int cp_type_quals                        PROTO((tree));\n+extern int cp_has_mutable_p                     PROTO((tree));\n extern int at_least_as_qualified_p              PROTO((tree, tree));\n extern int more_qualified_p                     PROTO((tree, tree));\n "}, {"sha": "b15cec558278e1b6f5267f064d3b9339428785b4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a7a7710d423cba8feb795c3e626df5ce4075cebb", "patch": "@@ -7369,6 +7369,9 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n       return;\n     }\n \n+  if (TYPE_HAS_MUTABLE_P (type))\n+    TREE_READONLY (decl) = 0;\n+  \n   if (processing_template_decl)\n     {\n       if (init && DECL_INITIAL (decl))"}, {"sha": "4fb4f593f14c8f9956339167130a79b691c702ca", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a7710d423cba8feb795c3e626df5ce4075cebb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a7a7710d423cba8feb795c3e626df5ce4075cebb", "patch": "@@ -7471,3 +7471,15 @@ cp_type_quals (type)\n \n   return TYPE_QUALS (type);\n }\n+\n+/* Returns non-zero if the TYPE contains a mutable member */\n+\n+int\n+cp_has_mutable_p (type)\n+     tree type;\n+{\n+  while (TREE_CODE (type) == ARRAY_TYPE)\n+    type = TREE_TYPE (type);\n+\n+  return CLASS_TYPE_P (type) && CLASSTYPE_HAS_MUTABLE (type);\n+}"}]}