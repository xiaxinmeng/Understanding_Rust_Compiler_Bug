{"sha": "c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk3NGM5NmVkZjNiZGI1ZDk1YmE5OTc1MjZlOTJjZTgzNGMwYWFhMQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-04-04T15:42:19Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-04-04T15:42:19Z"}, "message": "re PR middle-end/70457 (ICE (segfault) in gimple_expand_builtin_pow on powerpc64le-linux-gnu)\n\n[gcc]\n\n2016-04-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\t    Jakub Jelinek <jakub@redhat.com>\n\n\tPR middle-end/70457\n\t* tree-inline.c (estimate_num_insn): Use gimple_call_builtin_p\n\tto ensure a call statement is compatible with a built-in's\n\tprototype.\n\t* tree-ssa-math-opts.c (pass_optimize_windening_mul::execute):\n\tLikewise.\n\n[gcc/testsuite]\n\n2016-04-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\t    Jakub Jelinek <jakub@redhat.com>\n\n\tPR middle-end/70457\n\t* gcc.dg/torture/pr70457.c: New.\n\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r234716", "tree": {"sha": "9d67f382c1c643eabb3c6bf93bf62b0ab5d236c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d67f382c1c643eabb3c6bf93bf62b0ab5d236c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a85da896a9ceac338801d6ad0997ef7834660cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a85da896a9ceac338801d6ad0997ef7834660cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a85da896a9ceac338801d6ad0997ef7834660cb"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "b478b0f2832aee12b9caa4369b84030d94b459ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "patch": "@@ -1,3 +1,13 @@\n+2016-04-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\t    Jakub Jelinek <jakub@redhat.com>\n+\n+\tPR middle-end/70457\n+\t* tree-inline.c (estimate_num_insn): Use gimple_call_builtin_p\n+\tto ensure a call statement is compatible with a built-in's\n+\tprototype.\n+\t* tree-ssa-math-opts.c (pass_optimize_windening_mul::execute):\n+\tLikewise.\n+\n 2016-04-04  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/70484"}, {"sha": "c9b020524d61bcd84c9c75c11959b138c607b239", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "patch": "@@ -1,3 +1,9 @@\n+2016-04-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\t    Jakub Jelinek <jakub@redhat.com>\n+\n+\tPR middle-end/70457\n+\t* gcc.dg/torture/pr70457.c: New.\n+\n 2016-04-04  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/67538"}, {"sha": "74daed4d36f6ff448ddf7bd40d78afaee64d1653", "filename": "gcc/testsuite/gcc.dg/torture/pr70457.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70457.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70457.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70457.c?ref=c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+\n+/* This formerly ICEd when trying to expand pow as a built-in with\n+   the wrong number of arguments.  */\n+\n+extern double pow (double, double) __attribute__ ((__nothrow__ , __leaf__));\n+\n+typedef struct {\n+  long long data;\n+  int tag;\n+} Object;\n+\n+extern Object Make_Flonum (double);\n+extern Object P_Pow (Object, Object);\n+\n+Object General_Function (Object x, Object y, double (*fun)()) {\n+  double d, ret;\n+\n+  d = 1.0;\n+\n+  if (y.tag >> 1)\n+    ret = (*fun) (d);\n+  else\n+    ret = (*fun) (d, 0.0);\n+\n+  return Make_Flonum (ret);\n+}\n+\n+Object P_Pow (Object x, Object y) { return General_Function (x, y, pow); }"}, {"sha": "a4e044c611b26f97e4230d0da118a630018f474d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "patch": "@@ -4065,7 +4065,7 @@ estimate_num_insns (gimple *stmt, eni_weights *weights)\n \t      return 0;\n \t    else if (is_inexpensive_builtin (decl))\n \t      return weights->target_builtin_call_cost;\n-\t    else if (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL)\n+\t    else if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n \t      {\n \t\t/* We canonicalize x * x to pow (x, 2.0) with -ffast-math, so\n \t\t   specialize the cheap expansion we do here."}, {"sha": "735b7c67c31df0c8317544346396fb8b15315879", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c974c96edf3bdb5d95ba997526e92ce834c0aaa1/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "patch": "@@ -3827,7 +3827,7 @@ pass_optimize_widening_mul::execute (function *fun)\n \t    {\n \t      tree fndecl = gimple_call_fndecl (stmt);\n \t      if (fndecl\n-\t\t  && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+\t\t  && gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n \t\t{\n \t\t  switch (DECL_FUNCTION_CODE (fndecl))\n \t\t    {"}]}