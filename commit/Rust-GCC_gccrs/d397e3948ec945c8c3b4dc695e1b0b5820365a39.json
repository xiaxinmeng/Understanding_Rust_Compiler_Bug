{"sha": "d397e3948ec945c8c3b4dc695e1b0b5820365a39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM5N2UzOTQ4ZWM5NDVjOGMzYjRkYzY5NWUxYjBiNTgyMDM2NWEzOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-05T22:28:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-05T22:28:25Z"}, "message": "re PR c++/89187 (ICE in initialize_argument_information, at calls.c:2023)\n\n\tPR c++/89187\n\t* optimize.c (maybe_thunk_body): Clear TREE_ADDRESSABLE on\n\tPARM_DECLs of the thunk.\n\t* lambda.c (maybe_add_lambda_conv_op): Likewise.\n\n\t* g++.dg/opt/pr89187.C: New test.\n\nFrom-SVN: r268564", "tree": {"sha": "d28c490bd10459d8af9c855f87d56d907710a30b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d28c490bd10459d8af9c855f87d56d907710a30b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d397e3948ec945c8c3b4dc695e1b0b5820365a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d397e3948ec945c8c3b4dc695e1b0b5820365a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d397e3948ec945c8c3b4dc695e1b0b5820365a39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d397e3948ec945c8c3b4dc695e1b0b5820365a39/comments", "author": null, "committer": null, "parents": [{"sha": "216090cc0fb7dc4de5fa9176860c845d5646c6b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216090cc0fb7dc4de5fa9176860c845d5646c6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216090cc0fb7dc4de5fa9176860c845d5646c6b7"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "660d746ef7444976345dbaf593d056d1c97f6e4a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d397e3948ec945c8c3b4dc695e1b0b5820365a39", "patch": "@@ -1,3 +1,10 @@\n+2019-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/89187\n+\t* optimize.c (maybe_thunk_body): Clear TREE_ADDRESSABLE on\n+\tPARM_DECLs of the thunk.\n+\t* lambda.c (maybe_add_lambda_conv_op): Likewise.\n+\n 2019-02-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89158 - by-value capture of constexpr variable broken."}, {"sha": "2290fe0efeec70ef251bc7a44f70be54233af1e6", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=d397e3948ec945c8c3b4dc695e1b0b5820365a39", "patch": "@@ -1130,6 +1130,9 @@ maybe_add_lambda_conv_op (tree type)\n       {\n \ttree new_node = copy_node (src);\n \n+\t/* Clear TREE_ADDRESSABLE on thunk arguments.  */\n+\tTREE_ADDRESSABLE (new_node) = 0;\n+\n \tif (!fn_args)\n \t  fn_args = tgt = new_node;\n \telse"}, {"sha": "aace7dea6841133e5543cb3bfc984535065eda43", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=d397e3948ec945c8c3b4dc695e1b0b5820365a39", "patch": "@@ -417,6 +417,8 @@ maybe_thunk_body (tree fn, bool force)\n \t\t  gcc_assert (clone_parm);\n \t\t  DECL_ABSTRACT_ORIGIN (clone_parm) = NULL;\n \t\t  args[parmno] = clone_parm;\n+\t\t  /* Clear TREE_ADDRESSABLE on thunk arguments.  */\n+\t\t  TREE_ADDRESSABLE (clone_parm) = 0;\n \t\t  clone_parm = TREE_CHAIN (clone_parm);\n \t\t}\n \t      if (fn_parm_typelist)"}, {"sha": "ac70c7281399a1e06001519759422ebd4264814c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d397e3948ec945c8c3b4dc695e1b0b5820365a39", "patch": "@@ -1,4 +1,9 @@\n-2019-02-05  Andrea Corallo <andrea.corallo@arm.com>\n+2019-02-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/89187\n+\t* g++.dg/opt/pr89187.C: New test.\n+\n+2019-02-05  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* jit.dg/add-driver-options-testlib.c: Add support file for\n \ttest-add-driver-options.c testcase."}, {"sha": "3e24a8fe72e70dd08a56e26dd0f5407f2107f554", "filename": "gcc/testsuite/g++.dg/opt/pr89187.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr89187.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d397e3948ec945c8c3b4dc695e1b0b5820365a39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr89187.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr89187.C?ref=d397e3948ec945c8c3b4dc695e1b0b5820365a39", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/89187\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Os -fno-tree-ccp -fno-tree-sra -fno-inline\" }\n+\n+template <typename T, int N> struct A {\n+  typedef T __attribute__((vector_size (N))) type;\n+};\n+template <typename T, int N> using B = typename A<T, N>::type;\n+template <typename T> using C = B<T, 4>;\n+struct D {\n+  D (C<int> x) : d{x[3]} {}\n+  D foo () { return d; }\n+  C<int> d;\n+};\n+extern D d;\n+struct { D bar () { return d; } } l;\n+struct E { void baz () const; };\n+\n+void\n+E::baz () const\n+{\n+  l.bar ().foo ();\n+}"}]}