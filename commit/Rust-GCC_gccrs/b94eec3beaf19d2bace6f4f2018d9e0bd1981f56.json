{"sha": "b94eec3beaf19d2bace6f4f2018d9e0bd1981f56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0ZWVjM2JlYWYxOWQyYmFjZTZmNGYyMDE4ZDllMGJkMTk4MWY1Ng==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-07-01T15:15:41Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-07-01T15:15:41Z"}, "message": "rs6000: Improve indexed addressing\n\nThe function rs6000_force_indexed_or_indirect_mem makes a memory\noperand suitable for indexed (or indirect) addressing.  If the memory\naddress isn't yet valid, it loads the whole thing into a register to\nmake it valid.  That isn't optimal.  This changes it to load an\naddress that is the sum of two things into two registers instead.\nThis results in lower latency code, and if inside loops, a constant\nterm can be moved outside the loop.\n\n\n\t* config/rs6000/rs6000.c (rs6000_force_indexed_or_indirect_mem):\n\tLoad both operands of a PLUS into registers separately.\n\nFrom-SVN: r272886", "tree": {"sha": "0b7ddf6017519fecd267146cbf9d0b6c304299f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b7ddf6017519fecd267146cbf9d0b6c304299f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5c15d688abd1aca27202e690cc13f686051c116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5c15d688abd1aca27202e690cc13f686051c116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5c15d688abd1aca27202e690cc13f686051c116"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "868ac766d9ec6f02fc916a09c9431c5b009559f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b94eec3beaf19d2bace6f4f2018d9e0bd1981f56", "patch": "@@ -1,3 +1,8 @@\n+2019-07-01  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_force_indexed_or_indirect_mem):\n+\tLoad both operands of a PLUS into registers separately.\n+\n 2019-07-01  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/vector.md: Fix shift count operand printing."}, {"sha": "f59f3a96237662b9e0921c30e969a83a7b6a96a9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b94eec3beaf19d2bace6f4f2018d9e0bd1981f56", "patch": "@@ -32100,7 +32100,16 @@ rs6000_force_indexed_or_indirect_mem (rtx x)\n \t  addr = reg;\n \t}\n \n-      x = replace_equiv_address (x, force_reg (Pmode, addr));\n+      if (GET_CODE (addr) == PLUS)\n+\t{\n+\t  rtx op0 = XEXP (addr, 0);\n+\t  rtx op1 = XEXP (addr, 1);\n+\t  op0 = force_reg (Pmode, op0);\n+\t  op1 = force_reg (Pmode, op1);\n+\t  x = replace_equiv_address (x, gen_rtx_PLUS (Pmode, op0, op1));\n+\t}\n+      else\n+\tx = replace_equiv_address (x, force_reg (Pmode, addr));\n     }\n \n   return x;"}]}