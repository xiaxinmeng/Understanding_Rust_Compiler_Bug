{"sha": "7109d224774bce3eb27e945b2e2f7ec9d7620fa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEwOWQyMjQ3NzRiY2UzZWIyN2U5NDViMmUyZjdlYzlkNzYyMGZhOQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2017-12-05T16:32:55Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2017-12-05T16:32:55Z"}, "message": "[Patch ARM] Fix probe_stack constraint.\n\nThe probe_stack pattern uses r0 as a fixed register. This can cause issues if we have auto-increment instructions coming out that have r0 as the base register. \n\nTested with a bootstrap and regression run. richi reports that the original issue was fixed in the run. I did consider whether probe_stack_range was affected but it all comes back to probe_stack pattern so I think we are ok.\n\nI don't have a testcase that seems to provoke this but it seems to be default on most distributions so I'm expecting the testcoverage to come from there.\n\nApplied.\n\nRamana\n\nPR target/82248\n\n* config/arm/arm.md (probe_stack) : Use the 'o' constraint.\n\nFrom-SVN: r255428", "tree": {"sha": "d9d3cd25b698db0b880e696ea059d924ce156c96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9d3cd25b698db0b880e696ea059d924ce156c96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7109d224774bce3eb27e945b2e2f7ec9d7620fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7109d224774bce3eb27e945b2e2f7ec9d7620fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7109d224774bce3eb27e945b2e2f7ec9d7620fa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7109d224774bce3eb27e945b2e2f7ec9d7620fa9/comments", "author": null, "committer": null, "parents": [{"sha": "26c2efbc5a9baa65dfcffaf40e00955076574147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c2efbc5a9baa65dfcffaf40e00955076574147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c2efbc5a9baa65dfcffaf40e00955076574147"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "d47c575763a0deee62d0039af6491115e1c2607f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7109d224774bce3eb27e945b2e2f7ec9d7620fa9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7109d224774bce3eb27e945b2e2f7ec9d7620fa9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7109d224774bce3eb27e945b2e2f7ec9d7620fa9", "patch": "@@ -1,3 +1,8 @@\n+2017-12-05  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/82248\n+\t* config/arm/arm.md (probe_stack) : Use the 'o' constraint.\n+\n 2017-12-05  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-dce.c (simple_dce_from_worklist): Move and rename from"}, {"sha": "d60c5af551ccf42edc9d24f94f931cc07e6f6c11", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7109d224774bce3eb27e945b2e2f7ec9d7620fa9/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7109d224774bce3eb27e945b2e2f7ec9d7620fa9/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=7109d224774bce3eb27e945b2e2f7ec9d7620fa9", "patch": "@@ -8612,8 +8612,11 @@\n    (set_attr \"type\" \"block\")]\n )\n \n+;; Since we hard code r0 here use the 'o' constraint to prevent\n+;; provoking undefined behaviour in the hardware with putting out\n+;; auto-increment operations with potentially r0 as the base register.\n (define_insn \"probe_stack\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n+  [(set (match_operand:SI 0 \"memory_operand\" \"=o\")\n         (unspec:SI [(const_int 0)] UNSPEC_PROBE_STACK))]\n   \"TARGET_32BIT\"\n   \"str%?\\\\tr0, %0\""}]}