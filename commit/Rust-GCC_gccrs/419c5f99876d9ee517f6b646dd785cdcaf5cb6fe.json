{"sha": "419c5f99876d9ee517f6b646dd785cdcaf5cb6fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5YzVmOTk4NzZkOWVlNTE3ZjZiNjQ2ZGQ3ODVjZGNhZjVjYjZmZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-03T10:47:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-03T10:47:21Z"}, "message": "tree-vect-stmts.c (get_group_load_store_type): Avoid peeling for gaps by loading only lower halves of vectors if possible.\n\n2019-05-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (get_group_load_store_type): Avoid\n\tpeeling for gaps by loading only lower halves of vectors\n\tif possible.\n\t(vectorizable_load): Likewise.\n\n\t* gcc.dg/vect/slp-reduc-sad-2.c: New testcase.\n\nFrom-SVN: r270847", "tree": {"sha": "5add58bfd54eee00530551bcf25b1802a86355cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5add58bfd54eee00530551bcf25b1802a86355cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "839d0860cf808e7457a5e57d745830023d57998b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839d0860cf808e7457a5e57d745830023d57998b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839d0860cf808e7457a5e57d745830023d57998b"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "8b34efa5c03b81cf624b883fcc99d96c5f946452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=419c5f99876d9ee517f6b646dd785cdcaf5cb6fe", "patch": "@@ -1,3 +1,10 @@\n+2019-05-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (get_group_load_store_type): Avoid\n+\tpeeling for gaps by loading only lower halves of vectors\n+\tif possible.\n+\t(vectorizable_load): Likewise.\n+\n 2019-05-03  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/89518"}, {"sha": "7ae100f4fb267cefbcfcc7645bf5d8b6d43e79c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=419c5f99876d9ee517f6b646dd785cdcaf5cb6fe", "patch": "@@ -1,3 +1,7 @@\n+2019-05-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-reduc-sad-2.c: New testcase.\n+\n 2019-05-03  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/89518"}, {"sha": "5179fcc104dd45cc9cfb2d187f012f32d30e6b32", "filename": "gcc/testsuite/gcc.dg/vect/slp-reduc-sad-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-sad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-sad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-reduc-sad-2.c?ref=419c5f99876d9ee517f6b646dd785cdcaf5cb6fe", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_usad_char } */\n+/* With AVX256 or more we do not pull off the trick eliding the epilogue.  */\n+/* { dg-additional-options \"-mprefer-avx128\" { target { x86_64-*-* i?86-*-* } } } */\n+\n+typedef unsigned char uint8_t;\n+int x264_pixel_sad_8x8( uint8_t *pix1, uint8_t *pix2, int i_stride_pix2 )\n+{\n+  int i_sum = 0;\n+  for( int y = 0; y < 8; y++ )\n+    {\n+      i_sum += __builtin_abs( pix1[0] - pix2[0] );\n+      i_sum += __builtin_abs( pix1[1] - pix2[1] );\n+      i_sum += __builtin_abs( pix1[2] - pix2[2] );\n+      i_sum += __builtin_abs( pix1[3] - pix2[3] );\n+      i_sum += __builtin_abs( pix1[4] - pix2[4] );\n+      i_sum += __builtin_abs( pix1[5] - pix2[5] );\n+      i_sum += __builtin_abs( pix1[6] - pix2[6] );\n+      i_sum += __builtin_abs( pix1[7] - pix2[7] );\n+      pix1 += 16;\n+      pix2 += i_stride_pix2;\n+    }\n+  return i_sum;\n+}\n+\n+/* { dg-final { scan-tree-dump \"vect_recog_sad_pattern: detected\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"access with gaps requires scalar epilogue loop\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "247d4353cb5949f492fcd6e6201ab6130a82bbf3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419c5f99876d9ee517f6b646dd785cdcaf5cb6fe/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=419c5f99876d9ee517f6b646dd785cdcaf5cb6fe", "patch": "@@ -2258,6 +2258,29 @@ get_group_load_store_type (stmt_vec_info stmt_info, tree vectype, bool slp,\n \t      && gap < (vect_known_alignment_in_bytes (first_dr_info)\n \t\t\t/ vect_get_scalar_dr_size (first_dr_info)))\n \t    overrun_p = false;\n+\n+\t  /* If the gap splits the vector in half and the target\n+\t     can do half-vector operations avoid the epilogue peeling\n+\t     by simply loading half of the vector only.  Usually\n+\t     the construction with an upper zero half will be elided.  */\n+\t  dr_alignment_support alignment_support_scheme;\n+\t  scalar_mode elmode = SCALAR_TYPE_MODE (TREE_TYPE (vectype));\n+\t  machine_mode vmode;\n+\t  if (overrun_p\n+\t      && !masked_p\n+\t      && (((alignment_support_scheme\n+\t\t      = vect_supportable_dr_alignment (first_dr_info, false)))\n+\t\t   == dr_aligned\n+\t\t  || alignment_support_scheme == dr_unaligned_supported)\n+\t      && known_eq (nunits, (group_size - gap) * 2)\n+\t      && mode_for_vector (elmode, (group_size - gap)).exists (&vmode)\n+\t      && VECTOR_MODE_P (vmode)\n+\t      && targetm.vector_mode_supported_p (vmode)\n+\t      && (convert_optab_handler (vec_init_optab,\n+\t\t\t\t\t TYPE_MODE (vectype), vmode)\n+\t\t  != CODE_FOR_nothing))\n+\t    overrun_p = false;\n+\n \t  if (overrun_p && !can_overrun_p)\n \t    {\n \t      if (dump_enabled_p ())\n@@ -8516,8 +8539,24 @@ vectorizable_load (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t      }\n \t\t    else\n \t\t      {\n+\t\t\ttree ltype = vectype;\n+\t\t\t/* If there's no peeling for gaps but we have a gap\n+\t\t\t   with slp loads then load the lower half of the\n+\t\t\t   vector only.  See get_group_load_store_type for\n+\t\t\t   when we apply this optimization.  */\n+\t\t\tif (slp\n+\t\t\t    && loop_vinfo\n+\t\t\t    && !LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n+\t\t\t    && DR_GROUP_GAP (first_stmt_info) != 0\n+\t\t\t    && known_eq (nunits,\n+\t\t\t\t\t (group_size\n+\t\t\t\t\t  - DR_GROUP_GAP (first_stmt_info)) * 2))\n+\t\t\t  ltype = build_vector_type (TREE_TYPE (vectype),\n+\t\t\t\t\t\t     (group_size\n+\t\t\t\t\t\t      - DR_GROUP_GAP\n+\t\t\t\t\t\t          (first_stmt_info)));\n \t\t\tdata_ref\n-\t\t\t  = fold_build2 (MEM_REF, vectype, dataref_ptr,\n+\t\t\t  = fold_build2 (MEM_REF, ltype, dataref_ptr,\n \t\t\t\t\t dataref_offset\n \t\t\t\t\t ? dataref_offset\n \t\t\t\t\t : build_int_cst (ref_type, 0));\n@@ -8531,6 +8570,23 @@ vectorizable_load (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t\t  TREE_TYPE (data_ref)\n \t\t\t    = build_aligned_type (TREE_TYPE (data_ref),\n \t\t\t\t\t\t  TYPE_ALIGN (elem_type));\n+\t\t\tif (ltype != vectype)\n+\t\t\t  {\n+\t\t\t    vect_copy_ref_info (data_ref, DR_REF (first_dr_info->dr));\n+\t\t\t    tree tem = make_ssa_name (ltype);\n+\t\t\t    new_stmt = gimple_build_assign (tem, data_ref);\n+\t\t\t    vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n+\t\t\t    data_ref = NULL;\n+\t\t\t    vec<constructor_elt, va_gc> *v;\n+\t\t\t    vec_alloc (v, 2);\n+\t\t\t    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, tem);\n+\t\t\t    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+\t\t\t\t\t\t    build_zero_cst (ltype));\n+\t\t\t    new_stmt\n+\t\t\t      = gimple_build_assign (vec_dest,\n+\t\t\t\t\t\t     build_constructor\n+\t\t\t\t\t\t       (vectype, v));\n+\t\t\t  }\n \t\t      }\n \t\t    break;\n \t\t  }"}]}