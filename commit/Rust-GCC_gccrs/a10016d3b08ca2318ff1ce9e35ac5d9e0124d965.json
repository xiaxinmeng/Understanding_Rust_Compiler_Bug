{"sha": "a10016d3b08ca2318ff1ce9e35ac5d9e0124d965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwMDE2ZDNiMDhjYTIzMThmZjFjZTllMzVhYzVkOWUwMTI0ZDk2NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-02-28T02:43:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-02-28T02:43:41Z"}, "message": "re PR rtl-optimization/7871 (ICE on legal code, global register variables problems)\n\n\tPR optimization/7871\n\t* flow.c (mark_set_1): Don't add LOG_LINKS for global registers\n\tfrom or to call insns.\n\t(propagate_one_insn): Interpret calls as setting global registers,\n\tnot merely clobbering them.\n\nFrom-SVN: r78601", "tree": {"sha": "a3651d71be1e792c213e1dac9cc5cad8c4992b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3651d71be1e792c213e1dac9cc5cad8c4992b1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a10016d3b08ca2318ff1ce9e35ac5d9e0124d965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10016d3b08ca2318ff1ce9e35ac5d9e0124d965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10016d3b08ca2318ff1ce9e35ac5d9e0124d965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10016d3b08ca2318ff1ce9e35ac5d9e0124d965/comments", "author": null, "committer": null, "parents": [{"sha": "6bd5c787cc8d48e3e2eb992e0a8286704ab10ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd5c787cc8d48e3e2eb992e0a8286704ab10ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd5c787cc8d48e3e2eb992e0a8286704ab10ca9"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "879bbfcf17054ff3f800e259022230cad1b2ce19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10016d3b08ca2318ff1ce9e35ac5d9e0124d965/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10016d3b08ca2318ff1ce9e35ac5d9e0124d965/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a10016d3b08ca2318ff1ce9e35ac5d9e0124d965", "patch": "@@ -1,4 +1,17 @@\n+2004-02-27  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\tPR optimization/7871\n+\t* flow.c (mark_set_1): Don't add LOG_LINKS for global registers\n+\tfrom or to call insns.\t\n+\n+2004-02-27  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/7871\n+\t* flow.c (propagate_one_insn): Interpret calls as setting global\n+\tregisters, not merely clobbering them.\n+\n 2004-02-27  Dale Johannesen  <dalej@apple.com>\n+\n \t* config/darwin.c (machopic_output_possible_stub_label):  Remove.\n \tconfig/darwin-protos.h:  Ditto.\n \tconfig/darwin.h:  Remove call to it."}, {"sha": "66dbf1c7dd95e33c56c2deabb0567f90aea69dfe", "filename": "gcc/flow.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10016d3b08ca2318ff1ce9e35ac5d9e0124d965/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10016d3b08ca2318ff1ce9e35ac5d9e0124d965/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=a10016d3b08ca2318ff1ce9e35ac5d9e0124d965", "patch": "@@ -1772,8 +1772,9 @@ propagate_one_insn (struct propagate_block_info *pbi, rtx insn)\n \t\t\t\t\t      current_function_return_rtx,\n \t\t\t\t\t      (rtx *) 0)))\n \t      {\n+\t\tenum rtx_code code = global_regs[i] ? SET : CLOBBER;\n \t\t/* We do not want REG_UNUSED notes for these registers.  */\n-\t\tmark_set_1 (pbi, CLOBBER, regno_reg_rtx[i], cond, insn,\n+\t\tmark_set_1 (pbi, code, regno_reg_rtx[i], cond, insn,\n \t\t\t    pbi->flags & ~(PROP_DEATH_NOTES | PROP_REG_INFO));\n \t      }\n \t}\n@@ -2799,10 +2800,18 @@ mark_set_1 (struct propagate_block_info *pbi, enum rtx_code code, rtx reg, rtx c\n \t\t     in ASM_OPERANDs.  If these registers get replaced,\n \t\t     we might wind up changing the semantics of the insn,\n \t\t     even if reload can make what appear to be valid\n-\t\t     assignments later.  */\n+\t\t     assignments later.\n+\n+\t\t     We don't build a LOG_LINK for global registers to\n+\t\t     or from a function call.  We don't want to let\n+\t\t     combine think that it knows what is going on with\n+\t\t     global registers.  */\n \t\t  if (y && (BLOCK_NUM (y) == blocknum)\n \t\t      && (regno_first >= FIRST_PSEUDO_REGISTER\n-\t\t\t  || asm_noperands (PATTERN (y)) < 0))\n+\t\t\t  || (asm_noperands (PATTERN (y)) < 0\n+\t\t\t      && ! ((GET_CODE (insn) == CALL_INSN\n+\t\t\t\t     || GET_CODE (y) == CALL_INSN)\n+\t\t\t\t    && global_regs[regno_first]))))\n \t\t    LOG_LINKS (y) = alloc_INSN_LIST (insn, LOG_LINKS (y));\n \t\t}\n \t    }"}]}