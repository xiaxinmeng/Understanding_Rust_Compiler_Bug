{"sha": "0244e6f7e07176d02c4135e64e776bc117553c90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI0NGU2ZjdlMDcxNzZkMDJjNDEzNWU2NGU3NzZiYzExNzU1M2M5MA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-09T15:18:40Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-09T15:18:40Z"}, "message": "call.c (build_java_interface_fn_ref): Call build_function_type_list instead of build_function_type.\n\n\t* call.c (build_java_interface_fn_ref): Call build_function_type_list\n\tinstead of build_function_type.\n\t* decl.c (cxx_init_decl_processing): Likewise.\n\t(declare_global_var): Likewise.\n\t(get_atexit_node): Likewise.\n\t(expand_static_init): Likewise.\n\t* decl2.c (start_objects): Likewise.\n\t(start_static_storage_duration_function): Likewise.\n\t* except.c (init_exception_processing): Likewise.\n\t(build_exc_ptr): Likewise.\n\t(build_throw): Likewise.\n\t* rtti.c (throw_bad_cast): Likewise.\n\t(throw_bad_typeid): Likewise.\n\t(build_dynamic_cast_1): Likewise.\n\nFrom-SVN: r160486", "tree": {"sha": "99c1017dc9ca532faa156ceb39817e89d18bfb28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99c1017dc9ca532faa156ceb39817e89d18bfb28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0244e6f7e07176d02c4135e64e776bc117553c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0244e6f7e07176d02c4135e64e776bc117553c90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0244e6f7e07176d02c4135e64e776bc117553c90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0244e6f7e07176d02c4135e64e776bc117553c90/comments", "author": null, "committer": null, "parents": [{"sha": "86b8fed14d69f81d4b2d7229fb5e4333ec8abe14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86b8fed14d69f81d4b2d7229fb5e4333ec8abe14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86b8fed14d69f81d4b2d7229fb5e4333ec8abe14"}], "stats": {"total": 139, "additions": 73, "deletions": 66}, "files": [{"sha": "aca50f84c35716767c58d87e639bf2cca54320b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0244e6f7e07176d02c4135e64e776bc117553c90", "patch": "@@ -1,3 +1,20 @@\n+2010-06-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* call.c (build_java_interface_fn_ref): Call build_function_type_list\n+\tinstead of build_function_type.\n+\t* decl.c (cxx_init_decl_processing): Likewise.\n+\t(declare_global_var): Likewise.\n+\t(get_atexit_node): Likewise.\n+\t(expand_static_init): Likewise.\n+\t* decl2.c (start_objects): Likewise.\n+\t(start_static_storage_duration_function): Likewise.\n+\t* except.c (init_exception_processing): Likewise.\n+\t(build_exc_ptr): Likewise.\n+\t(build_throw): Likewise.\n+\t* rtti.c (throw_bad_cast): Likewise.\n+\t(throw_bad_typeid): Likewise.\n+\t(build_dynamic_cast_1): Likewise.\n+\n 2010-06-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* call.c (build_call_n): Call XALLOCAVEC instead of alloca."}, {"sha": "e432f7490bf80374bd9504e121fed15e2725a62e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0244e6f7e07176d02c4135e64e776bc117553c90", "patch": "@@ -6008,14 +6008,11 @@ build_java_interface_fn_ref (tree fn, tree instance)\n \n   if (!java_iface_lookup_fn)\n     {\n-      tree endlink = build_void_list_node ();\n-      tree t = tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t  tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t     tree_cons (NULL_TREE, java_int_type_node,\n-\t\t\t\t\t\tendlink)));\n+      tree ftype = build_function_type_list (ptr_type_node,\n+\t\t\t\t\t     ptr_type_node, ptr_type_node,\n+\t\t\t\t\t     java_int_type_node, NULL_TREE);\n       java_iface_lookup_fn\n-\t= add_builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n-\t\t\t\tbuild_function_type (ptr_type_node, t),\n+\t= add_builtin_function (\"_Jv_LookupInterfaceMethodIdx\", ftype,\n \t\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n     }\n "}, {"sha": "0c4ad496db3fb3a8758bddaeb94e9ef69c8013d9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0244e6f7e07176d02c4135e64e776bc117553c90", "patch": "@@ -3445,11 +3445,9 @@ cxx_init_decl_processing (void)\n   vtable_index_type = ptrdiff_type_node;\n \n   vtt_parm_type = build_pointer_type (const_ptr_type_node);\n-  void_ftype = build_function_type (void_type_node, void_list_node);\n-  void_ftype_ptr = build_function_type (void_type_node,\n-\t\t\t\t\ttree_cons (NULL_TREE,\n-\t\t\t\t\t\t   ptr_type_node,\n-\t\t\t\t\t\t   void_list_node));\n+  void_ftype = build_function_type_list (void_type_node, NULL_TREE);\n+  void_ftype_ptr = build_function_type_list (void_type_node,\n+\t\t\t\t\t     ptr_type_node, NULL_TREE);\n   void_ftype_ptr\n     = build_exception_variant (void_ftype_ptr, empty_except_spec);\n \n@@ -3506,10 +3504,7 @@ cxx_init_decl_processing (void)\n     tree new_eh_spec;\n \n     ptr_ftype_sizetype\n-      = build_function_type (ptr_type_node,\n-\t\t\t     tree_cons (NULL_TREE,\n-\t\t\t\t\tsize_type_node,\n-\t\t\t\t\tvoid_list_node));\n+      = build_function_type_list (ptr_type_node, size_type_node, NULL_TREE);\n     if (cxx_dialect == cxx98)\n       {\n \ttree bad_alloc_id;\n@@ -6077,20 +6072,21 @@ declare_global_var (tree name, tree type)\n static tree\n get_atexit_fn_ptr_type (void)\n {\n-  tree arg_types;\n   tree fn_type;\n \n   if (!atexit_fn_ptr_type_node)\n     {\n+      tree arg_type;\n       if (flag_use_cxa_atexit \n \t  && !targetm.cxx.use_atexit_for_cxa_atexit ())\n \t/* The parameter to \"__cxa_atexit\" is \"void (*)(void *)\".  */\n-\targ_types = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+\targ_type = ptr_type_node;\n       else\n \t/* The parameter to \"atexit\" is \"void (*)(void)\".  */\n-\targ_types = void_list_node;\n+\targ_type = NULL_TREE;\n       \n-      fn_type = build_function_type (void_type_node, arg_types);\n+      fn_type = build_function_type_list (void_type_node,\n+\t\t\t\t\t  arg_type, NULL_TREE);\n       atexit_fn_ptr_type_node = build_pointer_type (fn_type);\n     }\n \n@@ -6105,7 +6101,6 @@ static tree\n get_atexit_node (void)\n {\n   tree atexit_fndecl;\n-  tree arg_types;\n   tree fn_type;\n   tree fn_ptr_type;\n   const char *name;\n@@ -6122,25 +6117,28 @@ get_atexit_node (void)\n \n \t We build up the argument types and then then function type\n \t itself.  */\n+      tree argtype0, argtype1, argtype2;\n \n       use_aeabi_atexit = targetm.cxx.use_aeabi_atexit ();\n       /* First, build the pointer-to-function type for the first\n \t argument.  */\n       fn_ptr_type = get_atexit_fn_ptr_type ();\n       /* Then, build the rest of the argument types.  */\n-      arg_types = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n+      argtype2 = ptr_type_node;\n       if (use_aeabi_atexit)\n \t{\n-\t  arg_types = tree_cons (NULL_TREE, fn_ptr_type, arg_types);\n-\t  arg_types = tree_cons (NULL_TREE, ptr_type_node, arg_types);\n+\t  argtype1 = fn_ptr_type;\n+\t  argtype0 = ptr_type_node;\n \t}\n       else\n \t{\n-\t  arg_types = tree_cons (NULL_TREE, ptr_type_node, arg_types);\n-\t  arg_types = tree_cons (NULL_TREE, fn_ptr_type, arg_types);\n+\t  argtype1 = ptr_type_node;\n+\t  argtype0 = fn_ptr_type;\n \t}\n       /* And the final __cxa_atexit type.  */\n-      fn_type = build_function_type (integer_type_node, arg_types);\n+      fn_type = build_function_type_list (integer_type_node,\n+\t\t\t\t\t  argtype0, argtype1, argtype2,\n+\t\t\t\t\t  NULL_TREE);\n       fn_ptr_type = build_pointer_type (fn_type);\n       if (use_aeabi_atexit)\n \tname = \"__aeabi_atexit\";\n@@ -6156,9 +6154,9 @@ get_atexit_node (void)\n \t We build up the argument types and then then function type\n \t itself.  */\n       fn_ptr_type = get_atexit_fn_ptr_type ();\n-      arg_types = tree_cons (NULL_TREE, fn_ptr_type, void_list_node);\n       /* Build the final atexit type.  */\n-      fn_type = build_function_type (integer_type_node, arg_types);\n+      fn_type = build_function_type_list (integer_type_node,\n+\t\t\t\t\t  fn_ptr_type, NULL_TREE);\n       name = \"atexit\";\n     }\n \n@@ -6438,11 +6436,13 @@ expand_static_init (tree decl, tree init)\n \t  abort_fn = get_identifier (\"__cxa_guard_abort\");\n \t  if (!get_global_value_if_present (acquire_fn, &acquire_fn))\n \t    {\n-\t      tree argtypes = tree_cons (NULL_TREE, TREE_TYPE (guard_addr),\n-\t\t\t\t\t void_list_node);\n-\t      tree vfntype = build_function_type (void_type_node, argtypes);\n+\t      tree vfntype = build_function_type_list (void_type_node,\n+\t\t\t\t\t\t       TREE_TYPE (guard_addr),\n+\t\t\t\t\t\t       NULL_TREE);\n \t      acquire_fn = push_library_fn\n-\t\t(acquire_fn, build_function_type (integer_type_node, argtypes),\n+\t\t(acquire_fn, build_function_type_list (integer_type_node,\n+\t\t\t\t\t\t       TREE_TYPE (guard_addr),\n+\t\t\t\t\t\t       NULL_TREE),\n \t\t NULL_TREE);\n \t      release_fn = push_library_fn (release_fn, vfntype, NULL_TREE);\n \t      abort_fn = push_library_fn (abort_fn, vfntype, NULL_TREE);"}, {"sha": "a33751cdccf785ce3ffea65155b0d42ba475f554", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0244e6f7e07176d02c4135e64e776bc117553c90", "patch": "@@ -2725,8 +2725,8 @@ start_objects (int method_type, int initp)\n \n   fndecl = build_lang_decl (FUNCTION_DECL,\n \t\t\t    get_file_function_name (type),\n-\t\t\t    build_function_type (void_type_node,\n-\t\t\t\t\t\t void_list_node));\n+\t\t\t    build_function_type_list (void_type_node,\n+\t\t\t\t\t\t      NULL_TREE));\n   start_preparsed_function (fndecl, /*attrs=*/NULL_TREE, SF_PRE_PARSED);\n \n   TREE_PUBLIC (current_function_decl) = 0;\n@@ -2818,7 +2818,6 @@ static splay_tree priority_info_map;\n static tree\n start_static_storage_duration_function (unsigned count)\n {\n-  tree parm_types;\n   tree type;\n   tree body;\n   char id[sizeof (SSDF_IDENTIFIER) + 1 /* '\\0' */ + 32];\n@@ -2827,11 +2826,9 @@ start_static_storage_duration_function (unsigned count)\n      SSDF_IDENTIFIER_<number>.  */\n   sprintf (id, \"%s_%u\", SSDF_IDENTIFIER, count);\n \n-  /* Create the parameters.  */\n-  parm_types = void_list_node;\n-  parm_types = tree_cons (NULL_TREE, integer_type_node, parm_types);\n-  parm_types = tree_cons (NULL_TREE, integer_type_node, parm_types);\n-  type = build_function_type (void_type_node, parm_types);\n+  type = build_function_type_list (void_type_node,\n+\t\t\t\t   integer_type_node, integer_type_node,\n+\t\t\t\t   NULL_TREE);\n \n   /* Create the FUNCTION_DECL itself.  */\n   ssdf_decl = build_lang_decl (FUNCTION_DECL,"}, {"sha": "c682c8d8cfe380d203386d351f39a6be73d9eb2a", "filename": "gcc/cp/except.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=0244e6f7e07176d02c4135e64e776bc117553c90", "patch": "@@ -62,15 +62,14 @@ init_exception_processing (void)\n \n   /* void std::terminate (); */\n   push_namespace (std_identifier);\n-  tmp = build_function_type (void_type_node, void_list_node);\n+  tmp = build_function_type_list (void_type_node, NULL_TREE);\n   terminate_node = build_cp_library_fn_ptr (\"terminate\", tmp);\n   TREE_THIS_VOLATILE (terminate_node) = 1;\n   TREE_NOTHROW (terminate_node) = 1;\n   pop_namespace ();\n \n   /* void __cxa_call_unexpected(void *); */\n-  tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n-  tmp = build_function_type (void_type_node, tmp);\n+  tmp = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n   call_unexpected_node\n     = push_throw_library_fn (get_identifier (\"__cxa_call_unexpected\"), tmp);\n \n@@ -160,8 +159,9 @@ build_exc_ptr (void)\n static tree\n declare_nothrow_library_fn (tree name, tree return_type, tree parm_type)\n {\n-  tree tmp = tree_cons (NULL_TREE, parm_type, void_list_node);\n-  return push_library_fn (name, build_function_type (return_type, tmp),\n+  return push_library_fn (name, build_function_type_list (return_type,\n+\t\t\t\t\t\t\t  parm_type,\n+\t\t\t\t\t\t\t  NULL_TREE),\n \t\t\t  empty_except_spec);\n }\n \n@@ -650,8 +650,9 @@ build_throw (tree exp)\n       if (!get_global_value_if_present (fn, &fn))\n \t{\n \t  /* Declare void _Jv_Throw (void *).  */\n-\t  tree tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n-\t  tmp = build_function_type (ptr_type_node, tmp);\n+\t  tree tmp;\n+\t  tmp = build_function_type_list (ptr_type_node,\n+\t\t\t\t\t  ptr_type_node, NULL_TREE);\n \t  fn = push_throw_library_fn (fn, tmp);\n \t}\n       else if (really_overloaded_fn (fn))\n@@ -675,9 +676,8 @@ build_throw (tree exp)\n       /* The CLEANUP_TYPE is the internal type of a destructor.  */\n       if (!cleanup_type)\n \t{\n-\t  tmp = void_list_node;\n-\t  tmp = tree_cons (NULL_TREE, ptr_type_node, tmp);\n-\t  tmp = build_function_type (void_type_node, tmp);\n+\t  tmp = build_function_type_list (void_type_node,\n+\t\t\t\t\t  ptr_type_node, NULL_TREE);\n \t  cleanup_type = build_pointer_type (tmp);\n \t}\n \n@@ -686,11 +686,9 @@ build_throw (tree exp)\n \t{\n \t  /* Declare void __cxa_throw (void*, void*, void (*)(void*)).  */\n \t  /* ??? Second argument is supposed to be \"std::type_info*\".  */\n-\t  tmp = void_list_node;\n-\t  tmp = tree_cons (NULL_TREE, cleanup_type, tmp);\n-\t  tmp = tree_cons (NULL_TREE, ptr_type_node, tmp);\n-\t  tmp = tree_cons (NULL_TREE, ptr_type_node, tmp);\n-\t  tmp = build_function_type (void_type_node, tmp);\n+\t  tmp = build_function_type_list (void_type_node,\n+\t\t\t\t\t  ptr_type_node, ptr_type_node,\n+\t\t\t\t\t  cleanup_type, NULL_TREE);\n \t  fn = push_throw_library_fn (fn, tmp);\n \t}\n \n@@ -808,7 +806,7 @@ build_throw (tree exp)\n \t{\n \t  /* Declare void __cxa_rethrow (void).  */\n \t  fn = push_throw_library_fn\n-\t    (fn, build_function_type (void_type_node, void_list_node));\n+\t    (fn, build_function_type_list (void_type_node, NULL_TREE));\n \t}\n \n       /* ??? Indicate that this function call allows exceptions of the type"}, {"sha": "dde8e825dbe473b5e1f57a960bafc2c0b72848a3", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0244e6f7e07176d02c4135e64e776bc117553c90/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=0244e6f7e07176d02c4135e64e776bc117553c90", "patch": "@@ -207,8 +207,8 @@ throw_bad_cast (void)\n {\n   tree fn = get_identifier (\"__cxa_bad_cast\");\n   if (!get_global_value_if_present (fn, &fn))\n-    fn = push_throw_library_fn (fn, build_function_type (ptr_type_node,\n-\t\t\t\t\t\t\t void_list_node));\n+    fn = push_throw_library_fn (fn, build_function_type_list (ptr_type_node,\n+\t\t\t\t\t\t\t      NULL_TREE));\n \n   return build_cxx_call (fn, 0, NULL);\n }\n@@ -225,7 +225,7 @@ throw_bad_typeid (void)\n       tree t;\n \n       t = build_reference_type (const_type_info_type_node);\n-      t = build_function_type (t, void_list_node);\n+      t = build_function_type_list (t, NULL_TREE);\n       fn = push_throw_library_fn (fn, t);\n     }\n \n@@ -729,12 +729,10 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t\t(cp_build_qualified_type\n \t\t (tinfo_ptr, TYPE_QUAL_CONST));\n \t      name = \"__dynamic_cast\";\n-\t      tmp = tree_cons\n-\t\t(NULL_TREE, const_ptr_type_node, tree_cons\n-\t\t (NULL_TREE, tinfo_ptr, tree_cons\n-\t\t  (NULL_TREE, tinfo_ptr, tree_cons\n-\t\t   (NULL_TREE, ptrdiff_type_node, void_list_node))));\n-\t      tmp = build_function_type (ptr_type_node, tmp);\n+\t      tmp = build_function_type_list (ptr_type_node,\n+\t\t\t\t\t      const_ptr_type_node,\n+\t\t\t\t\t      tinfo_ptr, tinfo_ptr,\n+\t\t\t\t\t      ptrdiff_type_node, NULL_TREE);\n \t      dcast_fn = build_library_fn_ptr (name, tmp);\n \t      DECL_PURE_P (dcast_fn) = 1;\n \t      pop_abi_namespace ();"}]}