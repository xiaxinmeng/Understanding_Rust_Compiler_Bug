{"sha": "9a40d6bc0c227843acdae95248f17fc8c7bf81e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE0MGQ2YmMwYzIyNzg0M2FjZGFlOTUyNDhmMTdmYzhjN2JmODFlNg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-09-22T20:24:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-09-22T20:24:45Z"}, "message": "pa.md (fused multiply): Add variants which reduce height for the fused multiply...\n\n        * pa.md (fused multiply): Add variants which reduce height for the\n        fused multiply, but which still generate 2 insns.\n        (fnegabs): Similarly.\n\nFrom-SVN: r29598", "tree": {"sha": "9204c161300bf602acd79499ef6fd7b84e98205f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9204c161300bf602acd79499ef6fd7b84e98205f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a40d6bc0c227843acdae95248f17fc8c7bf81e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a40d6bc0c227843acdae95248f17fc8c7bf81e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a40d6bc0c227843acdae95248f17fc8c7bf81e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a40d6bc0c227843acdae95248f17fc8c7bf81e6/comments", "author": null, "committer": null, "parents": [{"sha": "80559c31a6955c02751911a9af2a8446432f2eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80559c31a6955c02751911a9af2a8446432f2eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80559c31a6955c02751911a9af2a8446432f2eae"}], "stats": {"total": 284, "additions": 284, "deletions": 0}, "files": [{"sha": "982be6d66d05a9485b170b950f91960134c67666", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a40d6bc0c227843acdae95248f17fc8c7bf81e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a40d6bc0c227843acdae95248f17fc8c7bf81e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a40d6bc0c227843acdae95248f17fc8c7bf81e6", "patch": "@@ -37,6 +37,10 @@ Wed Sep 22 06:25:15 1999  Jim Kingdon  <http://developer.redhat.com>\n \n Wed Sep 22 06:06:57 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.md (fused multiply): Add variants which reduce height for the\n+\tfused multiply, but which still generate 2 insns.\n+\t(fnegabs): Similarly.\n+\n \t* pa.md (subsi3): Turn into an expander.  Create two anonymous\n \tpatterns.  One for PA2.0 one for PA1.x.  Use mtsarcm for PA2.0.\n \t* pa.h (EXTRA_CONSTRAINT): Handle 'S'."}, {"sha": "6e98c957593a9fb69563a2fbf6f4855514ce43ad", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a40d6bc0c227843acdae95248f17fc8c7bf81e6/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a40d6bc0c227843acdae95248f17fc8c7bf81e6/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=9a40d6bc0c227843acdae95248f17fc8c7bf81e6", "patch": "@@ -3886,6 +3886,286 @@\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n+;; Generating a fused multiply sequence is a win for this case as it will\n+;; reduce the latency for the fused case without impacting the plain\n+;; multiply case.\n+;;\n+;; Similar possibilities exist for fnegabs, shadd and other insns which\n+;; perform two operations with the result of the first feeding the second.\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\"))\n+\t\t (match_operand:DF 3 \"register_operand\" \"f\")))\n+   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n+\t(mult:DF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; We want to split this up during scheduling since we want both insns\n+;; to schedule independently.\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\"))\n+\t\t (match_operand:DF 3 \"register_operand\" \"f\")))\n+   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n+\t(mult:DF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 4) (mult:DF (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:DF (mult:DF (match_dup 1) (match_dup 2))\n+\t\t\t       (match_dup 3)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\"))\n+\t\t (match_operand:SF 3 \"register_operand\" \"f\")))\n+   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n+\t(mult:SF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"8\")])\n+\n+;; We want to split this up during scheduling since we want both insns\n+;; to schedule independently.\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\"))\n+\t\t (match_operand:SF 3 \"register_operand\" \"f\")))\n+   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n+\t(mult:SF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 4) (mult:SF (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:SF (mult:SF (match_dup 1) (match_dup 2))\n+\t\t\t       (match_dup 3)))]\n+  \"\")\n+\n+;; Negating a multiply can be faked by adding zero in a fused multiply-add\n+;; instruction.\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t (match_operand:DF 2 \"register_operand\" \"f\"))))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"fmpynfadd,dbl %1,%2,0,%0\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t (match_operand:SF 2 \"register_operand\" \"f\"))))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"fmpynfadd,sgl %1,%2,0,%0\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t (match_operand:DF 2 \"register_operand\" \"f\"))))\n+   (set (match_operand:DF 3 \"register_operand\" \"=&f\")\n+\t(mult:DF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t (match_operand:DF 2 \"register_operand\" \"f\"))))\n+   (set (match_operand:DF 3 \"register_operand\" \"=&f\")\n+\t(mult:DF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 3) (mult:DF (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (neg:DF (mult:DF (match_dup 1) (match_dup 2))))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t (match_operand:SF 2 \"register_operand\" \"f\"))))\n+   (set (match_operand:SF 3 \"register_operand\" \"=&f\")\n+\t(mult:SF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t (match_operand:SF 2 \"register_operand\" \"f\"))))\n+   (set (match_operand:SF 3 \"register_operand\" \"=&f\")\n+\t(mult:SF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 3) (mult:SF (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (neg:SF (mult:SF (match_dup 1) (match_dup 2))))]\n+  \"\")\n+\n+;; Now fused multiplies with the result of the multiply negated.\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(plus:DF (neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\")))\n+\t\t (match_operand:DF 3 \"register_operand\" \"f\")))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"fmpynfadd,dbl %1,%2,%3,%0\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(plus:SF (neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t (match_operand:SF 2 \"register_operand\" \"f\")))\n+\t\t (match_operand:SF 3 \"register_operand\" \"f\")))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"fmpynfadd,sgl %1,%2,%3,%0\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(plus:DF (neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\")))\n+\t\t (match_operand:DF 3 \"register_operand\" \"f\")))\n+   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n+\t(mult:DF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(plus:DF (neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\")))\n+\t\t (match_operand:DF 3 \"register_operand\" \"f\")))\n+   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n+\t(mult:DF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 4) (mult:DF (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:DF (neg:DF (mult:DF (match_dup 1) (match_dup 2)))\n+\t\t\t       (match_dup 3)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(plus:SF (neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\")))\n+\t\t (match_operand:SF 3 \"register_operand\" \"f\")))\n+   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n+\t(mult:SF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(plus:SF (neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\")))\n+\t\t (match_operand:SF 3 \"register_operand\" \"f\")))\n+   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n+\t(mult:SF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 4) (mult:SF (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (plus:SF (neg:SF (mult:SF (match_dup 1) (match_dup 2)))\n+\t\t\t       (match_dup 3)))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(minus:DF (match_operand:DF 3 \"register_operand\" \"f\")\n+\t\t  (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t   (match_operand:DF 2 \"register_operand\" \"f\"))))\n+   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n+\t(mult:DF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(minus:DF (match_operand:DF 3 \"register_operand\" \"f\")\n+\t\t  (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t\t   (match_operand:DF 2 \"register_operand\" \"f\"))))\n+   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n+\t(mult:DF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 4) (mult:DF (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (minus:DF (match_dup 3)\n+\t\t\t\t(mult:DF (match_dup 1) (match_dup 2))))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(minus:SF (match_operand:SF 3 \"register_operand\" \"f\")\n+\t\t  (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t   (match_operand:SF 2 \"register_operand\" \"f\"))))\n+   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n+\t(mult:SF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpmuldbl\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(minus:SF (match_operand:SF 3 \"register_operand\" \"f\")\n+\t\t  (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t\t   (match_operand:SF 2 \"register_operand\" \"f\"))))\n+   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n+\t(mult:SF (match_dup 1) (match_dup 2)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 4) (mult:SF (match_dup 1) (match_dup 2)))\n+   (set (match_dup 0) (minus:SF (match_dup 3)\n+\t\t\t\t(mult:SF (match_dup 1) (match_dup 2))))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(neg:DF (abs:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n+   (set (match_operand:DF 2 \"register_operand\" \"=&f\") (abs:DF (match_dup 1)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpalu\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(neg:DF (abs:DF (match_operand:DF 1 \"register_operand\" \"f\"))))\n+   (set (match_operand:DF 2 \"register_operand\" \"=&f\") (abs:DF (match_dup 1)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 2) (abs:DF (match_dup 1)))\n+   (set (match_dup 0) (neg:DF (abs:DF (match_dup 1))))]\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(neg:SF (abs:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n+   (set (match_operand:SF 2 \"register_operand\" \"=&f\") (abs:SF (match_dup 1)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  \"#\"\n+  [(set_attr \"type\" \"fpalu\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(neg:SF (abs:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n+   (set (match_operand:SF 2 \"register_operand\" \"=&f\") (abs:SF (match_dup 1)))]\n+  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n+  [(set (match_dup 2) (abs:SF (match_dup 1)))\n+   (set (match_dup 0) (neg:SF (abs:SF (match_dup 1))))]\n+  \"\")\n \f\n ;;- Shift instructions\n "}]}