{"sha": "c4914de6185a913d2dbb152a15b0c43b9d70106c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ5MTRkZTYxODVhOTEzZDJkYmIxNTJhMTViMGM0M2I5ZDcwMTA2Yw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-18T19:36:19Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-18T19:36:19Z"}, "message": "Use explicit locations for some warnings in c-pragma.c.\n\ngcc/cp/ChangeLog:\n\n2015-09-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* parser.c (pragma_lex): Add loc argument. Rearrange the code to\n\tmake it more similar to the C version.\n\ngcc/c-family/ChangeLog:\n\n2015-09-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c-pragma.c (handle_pragma_diagnostic): Use explicit location\n\twhen warning.\n\t* c-pragma.h (pragma_lex): Add optional loc argument.\n\ngcc/c/ChangeLog:\n\n2015-09-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c-parser.c (pragma_lex): Add loc argument.\n\ngcc/testsuite/ChangeLog:\n\n2015-09-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* gcc.dg/pragma-diag-5.c: New test.\n\nFrom-SVN: r227923", "tree": {"sha": "616fcade21d35e7c06e245ee5b7578f95ca8ad86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/616fcade21d35e7c06e245ee5b7578f95ca8ad86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4914de6185a913d2dbb152a15b0c43b9d70106c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4914de6185a913d2dbb152a15b0c43b9d70106c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4914de6185a913d2dbb152a15b0c43b9d70106c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4914de6185a913d2dbb152a15b0c43b9d70106c/comments", "author": null, "committer": null, "parents": [{"sha": "edfc92491b22d1cd8f5fc1101cc148cc85f49441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfc92491b22d1cd8f5fc1101cc148cc85f49441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfc92491b22d1cd8f5fc1101cc148cc85f49441"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "49df8c9ed76345db62472c87b8350bbec61539a1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -1,3 +1,9 @@\n+2015-09-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c-pragma.c (handle_pragma_diagnostic): Use explicit location\n+\twhen warning.\n+\t* c-pragma.h (pragma_lex): Add optional loc argument.\n+\n 2015-09-16  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* c-format.c (check_format_arg): Adjust to use common block size in all"}, {"sha": "4679555ac298385d036bb5a72a0c73b3875d6ef4", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -704,17 +704,19 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n static void\n handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n {\n-  const char *kind_string, *option_string;\n-  unsigned int option_index;\n-  enum cpp_ttype token;\n-  diagnostic_t kind;\n   tree x;\n-  struct cl_option_handlers handlers;\n-\n-  token = pragma_lex (&x);\n+  location_t loc;\n+  enum cpp_ttype token = pragma_lex (&x, &loc);\n   if (token != CPP_NAME)\n-    GCC_BAD (\"missing [error|warning|ignored] after %<#pragma GCC diagnostic%>\");\n-  kind_string = IDENTIFIER_POINTER (x);\n+    {\n+      warning_at (loc, OPT_Wpragmas,\n+\t\t  \"missing [error|warning|ignored|push|pop]\"\n+\t\t  \" after %<#pragma GCC diagnostic%>\");\n+    }\n+  return;\n+\n+  diagnostic_t kind;\n+  const char *kind_string = IDENTIFIER_POINTER (x);\n   if (strcmp (kind_string, \"error\") == 0)\n     kind = DK_ERROR;\n   else if (strcmp (kind_string, \"warning\") == 0)\n@@ -732,13 +734,26 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n       return;\n     }\n   else\n-    GCC_BAD (\"expected [error|warning|ignored|push|pop] after %<#pragma GCC diagnostic%>\");\n+    {\n+      warning_at (loc, OPT_Wpragmas,\n+\t\t  \"expected [error|warning|ignored|push|pop]\"\n+\t\t  \" after %<#pragma GCC diagnostic%>\");\n+      return;\n+    }\n \n-  token = pragma_lex (&x);\n+  token = pragma_lex (&x, &loc);\n   if (token != CPP_STRING)\n-    GCC_BAD (\"missing option after %<#pragma GCC diagnostic%> kind\");\n-  option_string = TREE_STRING_POINTER (x);\n+    {\n+      warning_at (loc, OPT_Wpragmas,\n+\t\t  \"missing option after %<#pragma GCC diagnostic%> kind\");\n+      return;\n+    }\n+\n+  struct cl_option_handlers handlers;\n   set_default_handlers (&handlers);\n+\n+  unsigned int option_index;\n+  const char *option_string = TREE_STRING_POINTER (x);\n   for (option_index = 0; option_index < cl_options_count; option_index++)\n     if (strcmp (cl_options[option_index].opt_text, option_string) == 0)\n       {\n@@ -748,7 +763,8 @@ handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n \t\t\t\tglobal_dc);\n \treturn;\n       }\n-  GCC_BAD (\"unknown option after %<#pragma GCC diagnostic%> kind\");\n+  warning_at (loc, OPT_Wpragmas,\n+\t      \"unknown option after %<#pragma GCC diagnostic%> kind\");\n }\n \n /*  Parse #pragma GCC target (xxx) to set target specific options.  */"}, {"sha": "f6e10900a63e06e21e45d743ce6bc93982388813", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -212,7 +212,7 @@ extern void maybe_apply_pending_pragma_weaks (void);\n extern tree maybe_apply_renaming_pragma (tree, tree);\n extern void add_to_renaming_pragma_list (tree, tree);\n \n-extern enum cpp_ttype pragma_lex (tree *);\n+extern enum cpp_ttype pragma_lex (tree *, location_t *loc = NULL);\n \n /* Flags for use with c_lex_with_flags.  The values here were picked\n    so that 0 means to translate and join strings.  */"}, {"sha": "aa6d715288d84d041dd9d6d47403462eceeeb6f3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -1,3 +1,7 @@\n+2015-09-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c-parser.c (pragma_lex): Add loc argument.\n+\n 2015-09-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/67580"}, {"sha": "2fab3f0ebe404f207f6d55b14a0d0d7dc110a2f4", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -9846,12 +9846,15 @@ c_parser_pragma (c_parser *parser, enum pragma_context context)\n /* The interface the pragma parsers have to the lexer.  */\n \n enum cpp_ttype\n-pragma_lex (tree *value)\n+pragma_lex (tree *value, location_t *loc)\n {\n   c_token *tok = c_parser_peek_token (the_parser);\n   enum cpp_ttype ret = tok->type;\n \n   *value = tok->value;\n+  if (loc)\n+    *loc = tok->location;\n+\n   if (ret == CPP_PRAGMA_EOL || ret == CPP_EOF)\n     ret = CPP_EOF;\n   else"}, {"sha": "c72e913e1b3d17c8f7e21235d23f22d9048d141b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -1,3 +1,8 @@\n+2015-09-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* parser.c (pragma_lex): Add loc argument. Rearrange the code to\n+\tmake it more similar to the C version.\n+\n 2015-09-17  Andrew Sutton  <andrew.n.sutton@gmail.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "637118c2b271c8ac0fdd754717afbdf99f2c3c5e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -34447,25 +34447,24 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context)\n /* The interface the pragma parsers have to the lexer.  */\n \n enum cpp_ttype\n-pragma_lex (tree *value)\n+pragma_lex (tree *value, location_t *loc)\n {\n-  cp_token *tok;\n-  enum cpp_ttype ret;\n-\n-  tok = cp_lexer_peek_token (the_parser->lexer);\n+  cp_token *tok = cp_lexer_peek_token (the_parser->lexer);\n+  enum cpp_ttype ret = tok->type;\n \n-  ret = tok->type;\n   *value = tok->u.value;\n+  if (loc)\n+    *loc = tok->location;\n \n   if (ret == CPP_PRAGMA_EOL || ret == CPP_EOF)\n     ret = CPP_EOF;\n   else if (ret == CPP_STRING)\n     *value = cp_parser_string_literal (the_parser, false, false);\n   else\n     {\n-      cp_lexer_consume_token (the_parser->lexer);\n       if (ret == CPP_KEYWORD)\n \tret = CPP_NAME;\n+      cp_lexer_consume_token (the_parser->lexer);\n     }\n \n   return ret;"}, {"sha": "95a19a7818181513c06e232a2192d1795a467a32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -1,3 +1,7 @@\n+2015-09-18  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/pragma-diag-5.c: New test.\n+\n 2015-09-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/67619"}, {"sha": "64fe97fc3f0a4d82d00f6a827edf5826edb70a0c", "filename": "gcc/testsuite/gcc.dg/pragma-diag-5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4914de6185a913d2dbb152a15b0c43b9d70106c/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-diag-5.c?ref=c4914de6185a913d2dbb152a15b0c43b9d70106c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+#pragma GCC diagnostic /* { dg-warning \"24:missing\" \"missing\" { xfail *-*-* } } */\n+\n+#pragma GCC diagnostic warn /* { dg-warning \"24:expected\" } */\n+\n+#pragma GCC diagnostic ignored \"-Wfoo\" /* { dg-warning \"32:unknown\" } */"}]}