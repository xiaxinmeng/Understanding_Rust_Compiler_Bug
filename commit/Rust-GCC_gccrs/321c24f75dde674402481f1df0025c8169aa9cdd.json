{"sha": "321c24f75dde674402481f1df0025c8169aa9cdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIxYzI0Zjc1ZGRlNjc0NDAyNDgxZjFkZjAwMjVjODE2OWFhOWNkZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:00:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:00:46Z"}, "message": "[multiple changes]\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Add_Internal_Interface_Entities): Move\n\tHas_Non_Trivial_Precondition to sem_util. for use elsewhere.\n\tImprove error message on operations that inherit non-conforming\n\tclasswide preconditions from ancestor and progenitor.\n\t* sem_util.ads, sem_util.adb (Has_Non_Trivial_Precondition):\n\tmoved here from sem_ch3.\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Implement legality\n\tcheck given in RM 6.1.1 (17) concerning renamings of overriding\n\toperations that inherits class-wide preconditions from ancestor\n\tor progenitor.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Build_Adjust_Or_Finalize_Statements): Code cleanup.\n\t(Build_Adjust_Statements): Code cleanup.\n\t(Build_Finalizer): Update the initialization of\n\tExceptions_OK.\n\t(Build_Finalize_Statements): Code cleanup.\n\t(Build_Initialize_Statements): Code cleanup.\n\t(Make_Deep_Array_Body): Update the initialization of\n\tExceptions_OK.\n\t(Make_Deep_Record_Body): Update the initialization of Exceptions_OK.\n\t(Process_Object_Declaration): Generate a null exception handler only\n\twhen exceptions are allowed.\n\t(Process_Transients_In_Scope): Update the initialization of\n\tExceptions_OK.\n\t* exp_util.ads, exp_util.adb (Exceptions_In_Finalization_OK): New\n\troutine.\n\t* sem_ch11.adb (Analyze_Exception_Handlers): Do not check any\n\trestrictions when the handler is internally generated and the\n\tmode is warnings.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Has_Non_Trivial_Precondition): New predicate to\n\tenforce legality rule on classwide preconditions inherited from\n\tboth an ancestor and a progenitor (RM 6.1.1 (10-13).\n\t* sem_disp.adb (Check_Dispatching_Context): A call to an abstract\n\tsubprogram need not be dispatching if it appears in a precondition\n\tfor an abstract or null subprogram.\n\n2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch10.adb: Minor typo fix.\n\nFrom-SVN: r247192", "tree": {"sha": "60c389a4af1d5a6dcd6d295987bda6a9f9a76fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60c389a4af1d5a6dcd6d295987bda6a9f9a76fcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/321c24f75dde674402481f1df0025c8169aa9cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321c24f75dde674402481f1df0025c8169aa9cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/321c24f75dde674402481f1df0025c8169aa9cdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321c24f75dde674402481f1df0025c8169aa9cdd/comments", "author": null, "committer": null, "parents": [{"sha": "6948bc18f0a5bd5cfca40f6d18131b0673f05541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6948bc18f0a5bd5cfca40f6d18131b0673f05541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6948bc18f0a5bd5cfca40f6d18131b0673f05541"}], "stats": {"total": 265, "additions": 203, "deletions": 62}, "files": [{"sha": "842af1f9939d3a8d5df7730e6e8e4becf93eee3f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -1,3 +1,50 @@\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Add_Internal_Interface_Entities): Move\n+\tHas_Non_Trivial_Precondition to sem_util. for use elsewhere.\n+\tImprove error message on operations that inherit non-conforming\n+\tclasswide preconditions from ancestor and progenitor.\n+\t* sem_util.ads, sem_util.adb (Has_Non_Trivial_Precondition):\n+\tmoved here from sem_ch3.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Implement legality\n+\tcheck given in RM 6.1.1 (17) concerning renamings of overriding\n+\toperations that inherits class-wide preconditions from ancestor\n+\tor progenitor.\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Adjust_Or_Finalize_Statements): Code cleanup.\n+\t(Build_Adjust_Statements): Code cleanup.\n+\t(Build_Finalizer): Update the initialization of\n+\tExceptions_OK.\n+\t(Build_Finalize_Statements): Code cleanup.\n+\t(Build_Initialize_Statements): Code cleanup.\n+\t(Make_Deep_Array_Body): Update the initialization of\n+\tExceptions_OK.\n+\t(Make_Deep_Record_Body): Update the initialization of Exceptions_OK.\n+\t(Process_Object_Declaration): Generate a null exception handler only\n+\twhen exceptions are allowed.\n+\t(Process_Transients_In_Scope): Update the initialization of\n+\tExceptions_OK.\n+\t* exp_util.ads, exp_util.adb (Exceptions_In_Finalization_OK): New\n+\troutine.\n+\t* sem_ch11.adb (Analyze_Exception_Handlers): Do not check any\n+\trestrictions when the handler is internally generated and the\n+\tmode is warnings.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Has_Non_Trivial_Precondition): New predicate to\n+\tenforce legality rule on classwide preconditions inherited from\n+\tboth an ancestor and a progenitor (RM 6.1.1 (10-13).\n+\t* sem_disp.adb (Check_Dispatching_Context): A call to an abstract\n+\tsubprogram need not be dispatching if it appears in a precondition\n+\tfor an abstract or null subprogram.\n+\n+2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch10.adb: Minor typo fix.\n+\n 2017-04-25  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Cleanup VxWorks targets."}, {"sha": "d20b5389a45b1260fafbf91d2e86734e2f7ba048", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 54, "deletions": 56, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -1327,8 +1327,7 @@ package body Exp_Ch7 is\n                              or else\n                                (Present (Clean_Stmts)\n                                  and then Is_Non_Empty_List (Clean_Stmts));\n-      Exceptions_OK    : constant Boolean :=\n-                           not Restriction_Active (No_Exception_Propagation);\n+      Exceptions_OK    : constant Boolean := Exceptions_In_Finalization_OK;\n       For_Package_Body : constant Boolean := Nkind (N) = N_Package_Body;\n       For_Package_Spec : constant Boolean := Nkind (N) = N_Package_Declaration;\n       For_Package      : constant Boolean :=\n@@ -2844,7 +2843,7 @@ package body Exp_Ch7 is\n          Body_Ins  : Node_Id;\n          Count_Ins : Node_Id;\n          Fin_Call  : Node_Id;\n-         Fin_Stmts : List_Id;\n+         Fin_Stmts : List_Id := No_List;\n          Inc_Decl  : Node_Id;\n          Label     : Node_Id;\n          Label_Id  : Entity_Id;\n@@ -3004,8 +3003,6 @@ package body Exp_Ch7 is\n          --  manual finalization of their lock managers.\n \n          if Is_Protected then\n-            Fin_Stmts := No_List;\n-\n             if Is_Simple_Protected_Type (Obj_Typ) then\n                Fin_Call := Cleanup_Protected_Object (Decl, Obj_Ref);\n \n@@ -3031,8 +3028,8 @@ package body Exp_Ch7 is\n             --          null;\n             --    end;\n \n-            if Present (Fin_Stmts) then\n-               Append_To (Finalizer_Stmts,\n+            if Present (Fin_Stmts) and then Exceptions_OK then\n+               Fin_Stmts := New_List (\n                  Make_Block_Statement (Loc,\n                    Handled_Statement_Sequence =>\n                      Make_Handled_Sequence_Of_Statements (Loc,\n@@ -4866,8 +4863,7 @@ package body Exp_Ch7 is\n          Last_Object  : Node_Id;\n          Related_Node : Node_Id)\n       is\n-         Exceptions_OK : constant Boolean :=\n-                           not Restriction_Active (No_Exception_Propagation);\n+         Exceptions_OK : constant Boolean := Exceptions_In_Finalization_OK;\n \n          Must_Hook : Boolean := False;\n          --  Flag denoting whether the context requires transient object\n@@ -5529,6 +5525,8 @@ package body Exp_Ch7 is\n      (Prim : Final_Primitives;\n       Typ  : Entity_Id) return List_Id\n    is\n+      Exceptions_OK : constant Boolean := Exceptions_In_Finalization_OK;\n+\n       function Build_Adjust_Or_Finalize_Statements\n         (Typ : Entity_Id) return List_Id;\n       --  Create the statements necessary to adjust or finalize an array of\n@@ -5645,12 +5643,10 @@ package body Exp_Ch7 is\n       function Build_Adjust_Or_Finalize_Statements\n         (Typ : Entity_Id) return List_Id\n       is\n-         Comp_Typ      : constant Entity_Id  := Component_Type (Typ);\n-         Exceptions_OK : constant Boolean    :=\n-                           not Restriction_Active (No_Exception_Propagation);\n-         Index_List    : constant List_Id    := New_List;\n-         Loc           : constant Source_Ptr := Sloc (Typ);\n-         Num_Dims      : constant Int        := Number_Dimensions (Typ);\n+         Comp_Typ   : constant Entity_Id  := Component_Type (Typ);\n+         Index_List : constant List_Id    := New_List;\n+         Loc        : constant Source_Ptr := Sloc (Typ);\n+         Num_Dims   : constant Int        := Number_Dimensions (Typ);\n \n          procedure Build_Indexes;\n          --  Generate the indexes used in the dimension loops\n@@ -5822,13 +5818,11 @@ package body Exp_Ch7 is\n       ---------------------------------\n \n       function Build_Initialize_Statements (Typ : Entity_Id) return List_Id is\n-         Comp_Typ      : constant Entity_Id  := Component_Type (Typ);\n-         Exceptions_OK : constant Boolean    :=\n-                           not Restriction_Active (No_Exception_Propagation);\n-         Final_List    : constant List_Id    := New_List;\n-         Index_List    : constant List_Id    := New_List;\n-         Loc           : constant Source_Ptr := Sloc (Typ);\n-         Num_Dims      : constant Int        := Number_Dimensions (Typ);\n+         Comp_Typ   : constant Entity_Id  := Component_Type (Typ);\n+         Final_List : constant List_Id    := New_List;\n+         Index_List : constant List_Id    := New_List;\n+         Loc        : constant Source_Ptr := Sloc (Typ);\n+         Num_Dims   : constant Int        := Number_Dimensions (Typ);\n \n          function Build_Assignment (Counter_Id : Entity_Id) return Node_Id;\n          --  Generate the following assignment:\n@@ -6349,6 +6343,8 @@ package body Exp_Ch7 is\n       Typ      : Entity_Id;\n       Is_Local : Boolean := False) return List_Id\n    is\n+      Exceptions_OK : constant Boolean := Exceptions_In_Finalization_OK;\n+\n       function Build_Adjust_Statements (Typ : Entity_Id) return List_Id;\n       --  Build the statements necessary to adjust a record type. The type may\n       --  have discriminants and contain variant parts. Generate:\n@@ -6498,17 +6494,10 @@ package body Exp_Ch7 is\n       -----------------------------\n \n       function Build_Adjust_Statements (Typ : Entity_Id) return List_Id is\n-         Exceptions_OK  : constant Boolean    :=\n-                            not Restriction_Active (No_Exception_Propagation);\n-         Loc            : constant Source_Ptr := Sloc (Typ);\n-         Typ_Def        : constant Node_Id    :=\n-                            Type_Definition (Parent (Typ));\n+         Loc     : constant Source_Ptr := Sloc (Typ);\n+         Typ_Def : constant Node_Id    := Type_Definition (Parent (Typ));\n \n-         Bod_Stmts       : List_Id;\n-         Finalizer_Data  : Finalization_Exception_Data;\n-         Finalizer_Decls : List_Id := No_List;\n-         Rec_Def         : Node_Id;\n-         Var_Case        : Node_Id;\n+         Finalizer_Data : Finalization_Exception_Data;\n \n          function Process_Component_List_For_Adjust\n            (Comps : Node_Id) return List_Id;\n@@ -6581,6 +6570,7 @@ package body Exp_Ch7 is\n             Decl_Typ  : Entity_Id;\n             Has_POC   : Boolean;\n             Num_Comps : Nat;\n+            Var_Case  : Node_Id;\n \n          --  Start of processing for Process_Component_List_For_Adjust\n \n@@ -6710,6 +6700,12 @@ package body Exp_Ch7 is\n             return Stmts;\n          end Process_Component_List_For_Adjust;\n \n+         --  Local variables\n+\n+         Bod_Stmts       : List_Id;\n+         Finalizer_Decls : List_Id := No_List;\n+         Rec_Def         : Node_Id;\n+\n       --  Start of processing for Build_Adjust_Statements\n \n       begin\n@@ -6914,18 +6910,12 @@ package body Exp_Ch7 is\n       -------------------------------\n \n       function Build_Finalize_Statements (Typ : Entity_Id) return List_Id is\n-         Exceptions_OK  : constant Boolean    :=\n-                            not Restriction_Active (No_Exception_Propagation);\n-         Loc            : constant Source_Ptr := Sloc (Typ);\n-         Typ_Def        : constant Node_Id    :=\n-                            Type_Definition (Parent (Typ));\n+         Loc     : constant Source_Ptr := Sloc (Typ);\n+         Typ_Def : constant Node_Id    := Type_Definition (Parent (Typ));\n \n-         Bod_Stmts       : List_Id;\n-         Counter         : Int := 0;\n-         Finalizer_Data  : Finalization_Exception_Data;\n-         Finalizer_Decls : List_Id := No_List;\n-         Rec_Def         : Node_Id;\n-         Var_Case        : Node_Id;\n+         Counter        : Int := 0;\n+         Finalizer_Data : Finalization_Exception_Data;\n+         Num_Comps      : Nat := 0;\n \n          function Process_Component_List_For_Finalize\n            (Comps : Node_Id) return List_Id;\n@@ -6940,19 +6930,6 @@ package body Exp_Ch7 is\n          function Process_Component_List_For_Finalize\n            (Comps : Node_Id) return List_Id\n          is\n-            Alts       : List_Id;\n-            Counter_Id : Entity_Id;\n-            Decl       : Node_Id;\n-            Decl_Id    : Entity_Id;\n-            Decl_Typ   : Entity_Id;\n-            Decls      : List_Id;\n-            Has_POC    : Boolean;\n-            Jump_Block : Node_Id;\n-            Label      : Node_Id;\n-            Label_Id   : Entity_Id;\n-            Num_Comps  : Nat;\n-            Stmts      : List_Id;\n-\n             procedure Process_Component_For_Finalize\n               (Decl  : Node_Id;\n                Alts  : List_Id;\n@@ -7066,6 +7043,21 @@ package body Exp_Ch7 is\n                end if;\n             end Process_Component_For_Finalize;\n \n+            --  Local variables\n+\n+            Alts       : List_Id;\n+            Counter_Id : Entity_Id;\n+            Decl       : Node_Id;\n+            Decl_Id    : Entity_Id;\n+            Decl_Typ   : Entity_Id;\n+            Decls      : List_Id;\n+            Has_POC    : Boolean;\n+            Jump_Block : Node_Id;\n+            Label      : Node_Id;\n+            Label_Id   : Entity_Id;\n+            Stmts      : List_Id;\n+            Var_Case   : Node_Id;\n+\n          --  Start of processing for Process_Component_List_For_Finalize\n \n          begin\n@@ -7286,6 +7278,12 @@ package body Exp_Ch7 is\n             end if;\n          end Process_Component_List_For_Finalize;\n \n+         --  Local variables\n+\n+         Bod_Stmts       : List_Id;\n+         Finalizer_Decls : List_Id := No_List;\n+         Rec_Def         : Node_Id;\n+\n       --  Start of processing for Build_Finalize_Statements\n \n       begin"}, {"sha": "db6a8582adb4e49955098707accc7a8bdcb01686", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -4784,6 +4784,18 @@ package body Exp_Util is\n       end if;\n    end Evolve_Or_Else;\n \n+   -----------------------------------\n+   -- Exceptions_In_Finalization_OK --\n+   -----------------------------------\n+\n+   function Exceptions_In_Finalization_OK return Boolean is\n+   begin\n+      return\n+        not (Restriction_Active (No_Exception_Handlers)    or else\n+             Restriction_Active (No_Exception_Propagation) or else\n+             Restriction_Active (No_Exceptions));\n+   end Exceptions_In_Finalization_OK;\n+\n    -----------------------------------------\n    -- Expand_Static_Predicates_In_Choices --\n    -----------------------------------------"}, {"sha": "ee12a240d41ab0884caeb41cae9607ce3eeefea5", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -535,6 +535,10 @@ package Exp_Util is\n    --  indicating that no checks were required). The Sloc field of the\n    --  constructed N_Or_Else node is copied from Cond1.\n \n+   function Exceptions_In_Finalization_OK return Boolean;\n+   --  Determine whether the finalization machinery can safely add exception\n+   --  handlers and recovery circuitry.\n+\n    procedure Expand_Static_Predicates_In_Choices (N : Node_Id);\n    --  N is either a case alternative or a variant. The Discrete_Choices field\n    --  of N points to a list of choices. If any of these choices is the name"}, {"sha": "3559e8e7f09a18241693c728399dde7b13dff073", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -1134,7 +1134,7 @@ package body Sem_Ch10 is\n             Style_Check := Save_Style_Check;\n          end;\n \n-         --  In GNATprove mode, force the loading of a Interrupt_Priority when\n+         --  In GNATprove mode, force the loading of an Interrupt_Priority when\n          --  processing compilation units with potentially \"main\" subprograms.\n          --  This is required for the ceiling priority protocol checks, which\n          --  are triggered by these subprograms."}, {"sha": "13ba280a1c5e5fc0dc295c3b23ab23dca4acbea1", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -165,8 +165,24 @@ package body Sem_Ch11 is\n \n    begin\n       Handler := First (L);\n-      Check_Restriction (No_Exceptions, Handler);\n-      Check_Restriction (No_Exception_Handlers, Handler);\n+\n+      --  Pragma Restriction_Warnings has more related semantics than pragma\n+      --  Restrictions in that it flags exception handlers as violators. Note\n+      --  that the compiler must still generate handlers for certain critical\n+      --  scenarios such as finalization. As a result, these handlers should\n+      --  not be subjected to the restriction check when in warnings mode.\n+\n+      if not Comes_From_Source (Handler)\n+        and then (Restriction_Warnings (No_Exception_Handlers)\n+                   or else Restriction_Warnings (No_Exception_Propagation)\n+                   or else Restriction_Warnings (No_Exceptions))\n+      then\n+         null;\n+\n+      else\n+         Check_Restriction (No_Exceptions, Handler);\n+         Check_Restriction (No_Exception_Handlers, Handler);\n+      end if;\n \n       --  Kill current remembered values, since we don't know where we were\n       --  when the exception was raised."}, {"sha": "7a0feef8c25f7a33e95132ca17cc9d75a3bd556c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -1717,6 +1717,43 @@ package body Sem_Ch3 is\n                   Derived_Type => Tagged_Type,\n                   Parent_Type  => Iface);\n \n+               declare\n+                  Anc : Entity_Id;\n+               begin\n+                  if Is_Inherited_Operation (Prim)\n+                    and then Present (Alias (Prim))\n+                  then\n+                     Anc := Alias (Prim);\n+                  else\n+                     Anc := Overridden_Operation (Prim);\n+                  end if;\n+\n+                  --  Apply legality checks in RM 6.1.1 (10-13) concerning\n+                  --  non-conforming preconditions in both an ancestor and\n+                  --  a progenitor operation.\n+\n+                  if Present (Anc)\n+                    and then Has_Non_Trivial_Precondition (Anc)\n+                    and then Has_Non_Trivial_Precondition (Iface_Prim)\n+                  then\n+                     if Is_Abstract_Subprogram (Prim)\n+                       or else (Ekind (Prim) = E_Procedure\n+                         and then\n+                           Nkind (Parent (Prim)) = N_Procedure_Specification\n+                         and then Null_Present (Parent (Prim)))\n+                     then\n+                        null;\n+\n+                     --  The inherited operation must be overridden\n+\n+                     elsif not Comes_From_Source (Prim) then\n+                        Error_Msg_NE (\"&inherits non-conforming preconditions \"\n+                          & \"and must be overridden (RM 6.1.1 (10-16)\",\n+                            Parent (Tagged_Type), Prim);\n+                     end if;\n+                  end if;\n+               end;\n+\n                --  Ada 2005 (AI-251): Decorate internal entity Iface_Subp\n                --  associated with interface types. These entities are\n                --  only registered in the list of primitives of its"}, {"sha": "4c7de392d934486152d56a70c151aad3d87b6461", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -3191,6 +3191,19 @@ package body Sem_Ch8 is\n               (\"renamed entity cannot be subprogram that requires overriding \"\n                & \"(RM 8.5.4 (5.1))\", N);\n          end if;\n+\n+         declare\n+            Prev : constant Entity_Id := Overridden_Operation (New_S);\n+         begin\n+            if Present (Prev)\n+              and then\n+                 (Has_Non_Trivial_Precondition (Prev)\n+                    or else Has_Non_Trivial_Precondition (Old_S))\n+            then\n+               Error_Msg_NE (\"conflicting inherited classwide preconditions \"\n+                 & \"in renaming of& (RM 6.1.1 (17)\", N, Old_S);\n+            end if;\n+         end;\n       end if;\n \n       if Old_S /= Any_Id then"}, {"sha": "e322894fd6b0da074728fa7f08609a9477cbd5c8", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -574,9 +574,7 @@ package body Sem_Disp is\n             --  a primitive of an abstract type. The call is non-dispatching\n             --  but will be legal in overridings of the operation.\n \n-            elsif In_Spec_Expression\n-              and then\n-                (Is_Subprogram (Scop)\n+            elsif (Is_Subprogram (Scop)\n                   or else Chars (Scop) = Name_Postcondition)\n               and then\n                 (Is_Abstract_Subprogram (Scop)"}, {"sha": "34ef713319a7c44d8e607f640225b338d2a691df", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -9820,6 +9820,18 @@ package body Sem_Util is\n           and then Nkind (Node (First_Elmt (Constits))) /= N_Null;\n    end Has_Non_Null_Refinement;\n \n+   ----------------------------------\n+   -- Has_Non_Trivial_Precondition --\n+   ----------------------------------\n+\n+   function Has_Non_Trivial_Precondition (P : Entity_Id) return Boolean is\n+      Cont : constant Node_Id := Find_Aspect (P, Aspect_Pre);\n+   begin\n+      return Present (Cont)\n+        and then Class_Present (Cont)\n+        and then not Is_Entity_Name (Expression (Cont));\n+   end Has_Non_Trivial_Precondition;\n+\n    -------------------\n    -- Has_Null_Body --\n    -------------------"}, {"sha": "0d5de62d5fc2064cd40e6addbcd7c06d9328fb1f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/321c24f75dde674402481f1df0025c8169aa9cdd/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=321c24f75dde674402481f1df0025c8169aa9cdd", "patch": "@@ -1169,6 +1169,10 @@ package Sem_Util is\n    --  null statement, possibly followed by an optional return. Used to\n    --  optimize useless calls to assertion checks.\n \n+      function Has_Non_Trivial_Precondition (P : Entity_Id) return Boolean;\n+      --  True if subprogram has a class-wide precondition that is not\n+      --  statically True.\n+\n    function Has_Null_Exclusion (N : Node_Id) return Boolean;\n    --  Determine whether node N has a null exclusion\n "}]}