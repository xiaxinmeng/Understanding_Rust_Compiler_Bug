{"sha": "6224db0e4d6d3bd91cbf1767a971d4be86a39c55", "node_id": "C_kwDOANBUbNoAKDYyMjRkYjBlNGQ2ZDNiZDkxY2JmMTc2N2E5NzFkNGJlODZhMzljNTU", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-01-11T12:59:08Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2023-01-11T12:59:08Z"}, "message": "rs6000: Make P10_FUSION honour tuning setting\n\nWe noticed this issue when Segher reviewed the patch for\nPR104024.  When there is no explicit setting for option\n-mpower10-fusion, we enable OPTION_MASK_P10_FUSION for\nTARGET_POWER10.  But it's not right, it should honour\ntuning setting instead.\n\nThis patch is to fix it accordingly, it's bootstrapped\n, and regtested on powerpc64-linux-gnu P8 and\npowerpc64le-linux-gnu P9.\n\nBut on powerpc64le-linux-gnu P10 it had one regression\nfailure against the test case gcc.target/powerpc/pr105586.c.\nI looked into it and confirmed that a latent bug was\nexposed and filed one separated bug PR108273 instead.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Make\n\tOPTION_MASK_P10_FUSION implicit setting honour Power10 tuning setting.\n\t* config/rs6000/rs6000-cpus.def (ISA_3_1_MASKS_SERVER): Remove\n\tOPTION_MASK_P10_FUSION.", "tree": {"sha": "ab3cd52c1d40bf5f24d13ffdb02383b9165dea84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab3cd52c1d40bf5f24d13ffdb02383b9165dea84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6224db0e4d6d3bd91cbf1767a971d4be86a39c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6224db0e4d6d3bd91cbf1767a971d4be86a39c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6224db0e4d6d3bd91cbf1767a971d4be86a39c55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6224db0e4d6d3bd91cbf1767a971d4be86a39c55/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99d7d669eaa2830eb5878df4da67e77ec791522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99d7d669eaa2830eb5878df4da67e77ec791522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99d7d669eaa2830eb5878df4da67e77ec791522"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "4d5544e927abbce258fec1b4c1c768507bb246ef", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6224db0e4d6d3bd91cbf1767a971d4be86a39c55/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6224db0e4d6d3bd91cbf1767a971d4be86a39c55/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=6224db0e4d6d3bd91cbf1767a971d4be86a39c55", "patch": "@@ -84,8 +84,7 @@\n \n #define ISA_3_1_MASKS_SERVER\t(ISA_3_0_MASKS_SERVER\t\t\t\\\n \t\t\t\t | OPTION_MASK_POWER10\t\t\t\\\n-\t\t\t\t | OTHER_POWER10_MASKS\t\t\t\\\n-\t\t\t\t | OPTION_MASK_P10_FUSION)\n+\t\t\t\t | OTHER_POWER10_MASKS)\n \n /* Flags that need to be turned off if -mno-power9-vector.  */\n #define OTHER_P9_VECTOR_MASKS\t(OPTION_MASK_FLOAT128_HW\t\t\\"}, {"sha": "3baa2c3b7b08eae7c34db78bfddc8a7da5ca0455", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6224db0e4d6d3bd91cbf1767a971d4be86a39c55/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6224db0e4d6d3bd91cbf1767a971d4be86a39c55/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=6224db0e4d6d3bd91cbf1767a971d4be86a39c55", "patch": "@@ -4397,9 +4397,15 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_MMA;\n     }\n \n-  if (TARGET_POWER10\n-      && (rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION) == 0)\n-    rs6000_isa_flags |= OPTION_MASK_P10_FUSION;\n+  /* Enable power10 fusion if we are tuning for power10, even if we aren't\n+     generating power10 instructions.  */\n+  if (!(rs6000_isa_flags_explicit & OPTION_MASK_P10_FUSION))\n+    {\n+      if (rs6000_tune == PROCESSOR_POWER10)\n+\trs6000_isa_flags |= OPTION_MASK_P10_FUSION;\n+      else\n+\trs6000_isa_flags &= ~OPTION_MASK_P10_FUSION;\n+    }\n \n   /* MMA requires SIMD support as ISA 3.1 claims and our implementation\n      such as \"*movoo\" uses vector pair access which use VSX registers."}]}