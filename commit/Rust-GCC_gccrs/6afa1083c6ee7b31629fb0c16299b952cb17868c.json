{"sha": "6afa1083c6ee7b31629fb0c16299b952cb17868c", "node_id": "C_kwDOANBUbNoAKDZhZmExMDgzYzZlZTdiMzE2MjlmYjBjMTYyOTliOTUyY2IxNzg2OGM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-17T10:23:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-17T17:21:25Z"}, "message": "libstdc++: Set active member of union in std::string [PR103295]\n\nClang diagnoses that the new constexpr std::string constructors are not\nusable in constant expressions, because they start to write to members\nof the union without setting an active member.\n\nThis adds a new helper function which returns the address of the local\nbuffer after making it the active member.\n\nThis doesn't fix all problems with Clang, because it still refuses to\nwrite to memory returned by the allocator.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103295\n\t* include/bits/basic_string.h (_M_use_local_data()): New\n\tmember function to make local buffer the active member.\n\t(assign(const basic_string&)): Use it.\n\t* include/bits/basic_string.tcc (_M_construct, reserve()):\n\tLikewise.", "tree": {"sha": "80ca1827605ce99fa1690f650cb3f707e857a363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80ca1827605ce99fa1690f650cb3f707e857a363"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6afa1083c6ee7b31629fb0c16299b952cb17868c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afa1083c6ee7b31629fb0c16299b952cb17868c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afa1083c6ee7b31629fb0c16299b952cb17868c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afa1083c6ee7b31629fb0c16299b952cb17868c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "054bf99841aad3869c70643b2ba2d9f85770c980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054bf99841aad3869c70643b2ba2d9f85770c980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/054bf99841aad3869c70643b2ba2d9f85770c980"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "9d281f5daf28297a49142da9de358f7f5d2ba834", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afa1083c6ee7b31629fb0c16299b952cb17868c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afa1083c6ee7b31629fb0c16299b952cb17868c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=6afa1083c6ee7b31629fb0c16299b952cb17868c", "patch": "@@ -325,6 +325,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_get_allocator() const\n       { return _M_dataplus; }\n \n+      // Ensure that _M_local_buf is the active member of the union.\n+      __attribute__((__always_inline__))\n+      _GLIBCXX14_CONSTEXPR\n+      pointer\n+      _M_use_local_data() _GLIBCXX_NOEXCEPT\n+      {\n+#if __cpp_lib_is_constant_evaluated\n+\tif (__builtin_is_constant_evaluated())\n+\t  _M_local_buf[0] = _CharT();\n+#endif\n+\treturn _M_local_data();\n+      }\n+\n     private:\n \n #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST\n@@ -1487,7 +1500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\tif (__str.size() <= _S_local_capacity)\n \t\t  {\n \t\t    _M_destroy(_M_allocated_capacity);\n-\t\t    _M_data(_M_local_data());\n+\t\t    _M_data(_M_use_local_data());\n \t\t    _M_set_length(0);\n \t\t  }\n \t\telse"}, {"sha": "5a51f7e21b5f9df84dc823a0e5f9c7b4e39c571a", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afa1083c6ee7b31629fb0c16299b952cb17868c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afa1083c6ee7b31629fb0c16299b952cb17868c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=6afa1083c6ee7b31629fb0c16299b952cb17868c", "patch": "@@ -170,9 +170,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tsize_type __len = 0;\n \tsize_type __capacity = size_type(_S_local_capacity);\n \n+\tpointer __p = _M_use_local_data();\n+\n \twhile (__beg != __end && __len < __capacity)\n \t  {\n-\t    _M_data()[__len++] = *__beg;\n+\t    __p[__len++] = *__beg;\n \t    ++__beg;\n \t  }\n \n@@ -223,6 +225,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_data(_M_create(__dnew, size_type(0)));\n \t    _M_capacity(__dnew);\n \t  }\n+\telse\n+\t  _M_use_local_data();\n \n \t// Check for out_of_range and length_error exceptions.\n \t__try\n@@ -247,6 +251,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_data(_M_create(__n, size_type(0)));\n \t  _M_capacity(__n);\n \t}\n+      else\n+\t_M_use_local_data();\n \n       if (__n)\n \tthis->_S_assign(_M_data(), __n, __c);\n@@ -355,7 +361,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       if (__length <= size_type(_S_local_capacity))\n \t{\n-\t  this->_S_copy(_M_local_data(), _M_data(), __length + 1);\n+\t  this->_S_copy(_M_use_local_data(), _M_data(), __length + 1);\n \t  _M_destroy(__capacity);\n \t  _M_data(_M_local_data());\n \t}"}]}