{"sha": "c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d", "node_id": "C_kwDOANBUbNoAKGMwMTY4ODdjOTFhNzlkNjdiNmEzYzdlMTliOTIxOWY1YWIxZTJhNGQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-30T21:08:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-30T21:08:25Z"}, "message": "c++: Fix up ICE in build_min_non_dep_op_overload [PR109319]\n\nThe following testcase ICEs, because grok_array_decl during\nprocessing_template_decl handling of a non-dependent subscript\nemits a -Wcomma-subscript pedwarn, we decide to pass to the\nsingle index argument the index expressions as if it was wrapped\nwith () around it, but then when preparing it for later instantiation\nwe don't actually take that into account and ICE on a mismatch of\nnumber of index arguments (the overload expects a single index,\ntestcase has two index expressions in this case).\nFor non-dependent subscript which are builtin subscripts we also\nemit the same pedwarn and don't ICE, but emit the same pedwarn\nagain whenever we instantiate it, which is also IMHO undesirable,\nit is enough to warn once during parsing the template.\n\nThe following patch fixes it by turning even the original index expressions\n(those which didn't go through make_args_non_dependent) into a single\nindex using comma expression(s).\n\n2023-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/109319\n\t* decl2.cc (grok_array_decl): After emitting a pedwarn for\n\t-Wcomma-subscript, if processing_template_decl set orig_index_exp\n\tto compound expr from orig_index_exp_list.\n\n\t* g++.dg/cpp23/subscript14.C: New test.", "tree": {"sha": "8d5821208321ade40891b4cfc39f5d1bf984463f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d5821208321ade40891b4cfc39f5d1bf984463f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429a7a88438cc80e7c58d9f63d44838089899b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/429a7a88438cc80e7c58d9f63d44838089899b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/429a7a88438cc80e7c58d9f63d44838089899b12"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "2b195e999975cee7c5be03a11cef0ad367a23be8", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d", "patch": "@@ -474,11 +474,23 @@ grok_array_decl (location_t loc, tree array_expr, tree index_exp,\n \t\t\t\t\t     &overload, complain);\n \t\t}\n \t      else\n-\t\t/* If it would be valid albeit deprecated expression in C++20,\n-\t\t   just pedwarn on it and treat it as if wrapped in ().  */\n-\t\tpedwarn (loc, OPT_Wcomma_subscript,\n-\t\t\t \"top-level comma expression in array subscript \"\n-\t\t\t \"changed meaning in C++23\");\n+\t\t{\n+\t\t  /* If it would be valid albeit deprecated expression in\n+\t\t     C++20, just pedwarn on it and treat it as if wrapped\n+\t\t     in ().  */\n+\t\t  pedwarn (loc, OPT_Wcomma_subscript,\n+\t\t\t   \"top-level comma expression in array subscript \"\n+\t\t\t   \"changed meaning in C++23\");\n+\t\t  if (processing_template_decl)\n+\t\t    {\n+\t\t      orig_index_exp\n+\t\t\t= build_x_compound_expr_from_vec (orig_index_exp_list,\n+\t\t\t\t\t\t\t  NULL, complain);\n+\t\t      if (orig_index_exp == error_mark_node)\n+\t\t\texpr = error_mark_node;\n+\t\t      release_tree_vector (orig_index_exp_list);\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n     }\n@@ -519,6 +531,15 @@ grok_array_decl (location_t loc, tree array_expr, tree index_exp,\n \t      return error_mark_node;\n \t    }\n \t  index_exp = idx;\n+\t  if (processing_template_decl)\n+\t    {\n+\t      orig_index_exp\n+\t\t= build_x_compound_expr_from_vec (orig_index_exp_list,\n+\t\t\t\t\t\t  NULL, complain);\n+\t      release_tree_vector (orig_index_exp_list);\n+\t      if (orig_index_exp == error_mark_node)\n+\t\treturn error_mark_node;\n+\t    }\n \t}\n \n       if (TREE_CODE (TREE_TYPE (index_exp)) == ARRAY_TYPE)"}, {"sha": "042799c6aba12da311e4c40f973ce1093ccd17b5", "filename": "gcc/testsuite/g++.dg/cpp23/subscript14.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fsubscript14.C?ref=c016887c91a79d67b6a3c7e19b9219f5ab1e2a4d", "patch": "@@ -0,0 +1,42 @@\n+// PR c++/109319\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+struct A { static int &operator[] (int x) { static int a[2]; return a[x]; } };\t// { dg-warning \"may be a static member function only with\" \"\" { target c++20_down } }\n+struct B { int &operator[] (int x) { static int b[2]; return b[x]; } };\n+int c[2];\n+\n+template <typename T, typename U, typename V>\n+int\n+foo ()\n+{\n+  A a;\n+  ++a[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+  B b;\t\t\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+  ++b[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+\t\t\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+  ++c[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+  T d;\t\t\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+  ++d[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+  U e;\t\t\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+  ++e[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+  extern V f[2];\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+  ++f[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+  return 0;\t\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+}\n+\n+int f[2];\n+\n+int\n+main ()\n+{\n+  A a;\n+  ++a[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+  B b;\t\t\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+  ++b[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+\t\t\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+  ++c[0, 1];\t\t// { dg-warning \"top-level comma expression in array subscript changed meaning\" \"\" { target c++23 } }\n+  foo <A, B, int> ();\t// { dg-warning \"top-level comma expression in array subscript is deprecated\" \"\" { target c++20_only } .-1 }\n+  if (a.operator[] (1) != 3 || b.operator[] (1) != 3 || c[1] != 2 || f[1] != 1)\n+    __builtin_abort ();\n+}"}]}