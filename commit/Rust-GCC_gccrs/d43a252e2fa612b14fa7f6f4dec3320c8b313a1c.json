{"sha": "d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQzYTI1MmUyZmE2MTJiMTRmYTdmNmY0ZGVjMzMyMGM4YjMxM2ExYw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-10-27T14:20:52Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-10-27T14:20:52Z"}, "message": "Add new optabs for reducing vectors to scalars\n\n\tPR tree-optimization/61114\n\t* doc/md.texi (Standard Names): Add reduc_(plus,[us](min|max))|scal\n\toptabs, and note in reduc_[us](plus|min|max) to prefer the former.\n\n\t* expr.c (expand_expr_real_2): Use reduc_..._scal if available, fall\n\tback to old reduc_... + BIT_FIELD_REF only if not.\n\n\t* optabs.c (optab_for_tree_code): for REDUC_(MAX,MIN,PLUS)_EXPR,\n\treturn the reduce-to-scalar (reduc_..._scal) optab.\n\t(scalar_reduc_to_vector): New.\n\n\t* optabs.def (reduc_smax_scal_optab, reduc_smin_scal_optab,\n\treduc_plus_scal_optab, reduc_umax_scal_optab, reduc_umin_scal_optab):\n\tNew.\n\n\t* optabs.h (scalar_reduc_to_vector): Declare.\n\n\t* tree-vect-loop.c (vectorizable_reduction): Look for optabs reducing\n\tto either scalar or vector.\n\nFrom-SVN: r216737", "tree": {"sha": "bcaacd0bd9927dbb5bc3f3a2660d16c40919ad1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcaacd0bd9927dbb5bc3f3a2660d16c40919ad1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/comments", "author": null, "committer": null, "parents": [{"sha": "99f76d9bacfcef28546dda5a51cb3651ba422518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f76d9bacfcef28546dda5a51cb3651ba422518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f76d9bacfcef28546dda5a51cb3651ba422518"}], "stats": {"total": 141, "additions": 118, "deletions": 23}, "files": [{"sha": "aeb5c68e7d050322c01b4071b21721d67bddd493", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "patch": "@@ -1,3 +1,25 @@\n+2014-10-27  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR tree-optimization/61114\n+\t* doc/md.texi (Standard Names): Add reduc_(plus,[us](min|max))|scal\n+\toptabs, and note in reduc_[us](plus|min|max) to prefer the former.\n+\n+\t* expr.c (expand_expr_real_2): Use reduc_..._scal if available, fall\n+\tback to old reduc_... + BIT_FIELD_REF only if not.\n+\n+\t* optabs.c (optab_for_tree_code): for REDUC_(MAX,MIN,PLUS)_EXPR,\n+\treturn the reduce-to-scalar (reduc_..._scal) optab.\n+\t(scalar_reduc_to_vector): New.\n+\n+\t* optabs.def (reduc_smax_scal_optab, reduc_smin_scal_optab,\n+\treduc_plus_scal_optab, reduc_umax_scal_optab, reduc_umin_scal_optab):\n+\tNew.\n+\n+\t* optabs.h (scalar_reduc_to_vector): Declare.\n+\n+\t* tree-vect-loop.c (vectorizable_reduction): Look for optabs reducing\n+\tto either scalar or vector.\n+\n 2014-10-27  Alan Lawrence  <alan.lawrence@arm.com>\n \n \tPR tree-optimization/61114"}, {"sha": "827c8e633d5642cc4ffee5a8489c28563421d87d", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "patch": "@@ -4724,29 +4724,48 @@ it is unspecified which of the two operands is returned as the result.\n @cindex @code{reduc_smax_@var{m}} instruction pattern\n @item @samp{reduc_smin_@var{m}}, @samp{reduc_smax_@var{m}}\n Find the signed minimum/maximum of the elements of a vector. The vector is\n-operand 1, and the scalar result is stored in the least significant bits of\n+operand 1, and the result is stored in the least significant bits of\n operand 0 (also a vector). The output and input vector should have the same\n-modes.\n+modes. These are legacy optabs, and platforms should prefer to implement\n+@samp{reduc_smin_scal_@var{m}} and @samp{reduc_smax_scal_@var{m}}.\n \n @cindex @code{reduc_umin_@var{m}} instruction pattern\n @cindex @code{reduc_umax_@var{m}} instruction pattern\n @item @samp{reduc_umin_@var{m}}, @samp{reduc_umax_@var{m}}\n Find the unsigned minimum/maximum of the elements of a vector. The vector is\n-operand 1, and the scalar result is stored in the least significant bits of\n+operand 1, and the result is stored in the least significant bits of\n operand 0 (also a vector). The output and input vector should have the same\n-modes.\n+modes. These are legacy optabs, and platforms should prefer to implement\n+@samp{reduc_umin_scal_@var{m}} and @samp{reduc_umax_scal_@var{m}}.\n \n @cindex @code{reduc_splus_@var{m}} instruction pattern\n-@item @samp{reduc_splus_@var{m}}\n-Compute the sum of the signed elements of a vector. The vector is operand 1,\n-and the scalar result is stored in the least significant bits of operand 0\n-(also a vector). The output and input vector should have the same modes.\n-\n @cindex @code{reduc_uplus_@var{m}} instruction pattern\n-@item @samp{reduc_uplus_@var{m}}\n-Compute the sum of the unsigned elements of a vector. The vector is operand 1,\n-and the scalar result is stored in the least significant bits of operand 0\n+@item @samp{reduc_splus_@var{m}}, @samp{reduc_uplus_@var{m}}\n+Compute the sum of the signed/unsigned elements of a vector. The vector is\n+operand 1, and the result is stored in the least significant bits of operand 0\n (also a vector). The output and input vector should have the same modes.\n+These are legacy optabs, and platforms should prefer to implement\n+@samp{reduc_plus_scal_@var{m}}.\n+\n+@cindex @code{reduc_smin_scal_@var{m}} instruction pattern\n+@cindex @code{reduc_smax_scal_@var{m}} instruction pattern\n+@item @samp{reduc_smin_scal_@var{m}}, @samp{reduc_smax_scal_@var{m}}\n+Find the signed minimum/maximum of the elements of a vector. The vector is\n+operand 1, and operand 0 is the scalar result, with mode equal to the mode of\n+the elements of the input vector.\n+\n+@cindex @code{reduc_umin_scal_@var{m}} instruction pattern\n+@cindex @code{reduc_umax_scal_@var{m}} instruction pattern\n+@item @samp{reduc_umin_scal_@var{m}}, @samp{reduc_umax_scal_@var{m}}\n+Find the unsigned minimum/maximum of the elements of a vector. The vector is\n+operand 1, and operand 0 is the scalar result, with mode equal to the mode of\n+the elements of the input vector.\n+\n+@cindex @code{reduc_plus_scal_@var{m}} instruction pattern\n+@item @samp{reduc_plus_scal_@var{m}}\n+Compute the sum of the elements of a vector. The vector is operand 1, and\n+operand 0 is the scalar result, with mode equal to the mode of the elements of\n+the input vector.\n \n @cindex @code{sdot_prod@var{m}} instruction pattern\n @item @samp{sdot_prod@var{m}}"}, {"sha": "a5bf13a980d79a387cab81e550cc650d969658a6", "filename": "gcc/expr.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "patch": "@@ -9052,6 +9052,24 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n         op0 = expand_normal (treeop0);\n         this_optab = optab_for_tree_code (code, type, optab_default);\n         enum machine_mode vec_mode = TYPE_MODE (TREE_TYPE (treeop0));\n+\n+\tif (optab_handler (this_optab, vec_mode) != CODE_FOR_nothing)\n+\t  {\n+\t    struct expand_operand ops[2];\n+\t    enum insn_code icode = optab_handler (this_optab, vec_mode);\n+\n+\t    create_output_operand (&ops[0], target, mode);\n+\t    create_input_operand (&ops[1], op0, vec_mode);\n+\t    if (maybe_expand_insn (icode, 2, ops))\n+\t      {\n+\t\ttarget = ops[0].value;\n+\t\tif (GET_MODE (target) != mode)\n+\t\t  return gen_lowpart (tmode, target);\n+\t\treturn target;\n+\t      }\n+\t  }\n+\t/* Fall back to optab with vector result, and then extract scalar.  */\n+\tthis_optab = scalar_reduc_to_vector (this_optab, type);\n         temp = expand_unop (vec_mode, this_optab, op0, NULL_RTX, unsignedp);\n         gcc_assert (temp);\n         /* The tree code produces a scalar result, but (somewhat by convention)"}, {"sha": "c3623eae15a98c0e0c8094b61f7af1ab47200272", "filename": "gcc/optabs.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "patch": "@@ -509,13 +509,15 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n       return fma_optab;\n \n     case REDUC_MAX_EXPR:\n-      return TYPE_UNSIGNED (type) ? reduc_umax_optab : reduc_smax_optab;\n+      return TYPE_UNSIGNED (type)\n+\t     ? reduc_umax_scal_optab : reduc_smax_scal_optab;\n \n     case REDUC_MIN_EXPR:\n-      return TYPE_UNSIGNED (type) ? reduc_umin_optab : reduc_smin_optab;\n+      return TYPE_UNSIGNED (type)\n+\t     ? reduc_umin_scal_optab : reduc_smin_scal_optab;\n \n     case REDUC_PLUS_EXPR:\n-      return TYPE_UNSIGNED (type) ? reduc_uplus_optab : reduc_splus_optab;\n+      return reduc_plus_scal_optab;\n \n     case VEC_LSHIFT_EXPR:\n       return vec_shl_optab;\n@@ -611,7 +613,26 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n       return unknown_optab;\n     }\n }\n-\f\n+\n+/* Given optab UNOPTAB that reduces a vector to a scalar, find instead the old\n+   optab that produces a vector with the reduction result in one element,\n+   for a tree with type TYPE.  */\n+\n+optab\n+scalar_reduc_to_vector (optab unoptab, const_tree type)\n+{\n+  switch (unoptab)\n+    {\n+    case reduc_plus_scal_optab:\n+      return TYPE_UNSIGNED (type) ? reduc_uplus_optab : reduc_splus_optab;\n+\n+    case reduc_smin_scal_optab: return reduc_smin_optab;\n+    case reduc_umin_scal_optab: return reduc_umin_optab;\n+    case reduc_smax_scal_optab: return reduc_smax_optab;\n+    case reduc_umax_scal_optab: return reduc_umax_optab;\n+    default: return unknown_optab;\n+    }\n+}\n \n /* Expand vector widening operations.\n "}, {"sha": "131ea048b012b073345be3b426d4ac8f33061809", "filename": "gcc/optabs.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "patch": "@@ -243,12 +243,20 @@ OPTAB_D (sin_optab, \"sin$a2\")\n OPTAB_D (sincos_optab, \"sincos$a3\")\n OPTAB_D (tan_optab, \"tan$a2\")\n \n+/* Vector reduction to a scalar.  */\n+OPTAB_D (reduc_smax_scal_optab, \"reduc_smax_scal_$a\")\n+OPTAB_D (reduc_smin_scal_optab, \"reduc_smin_scal_$a\")\n+OPTAB_D (reduc_plus_scal_optab, \"reduc_plus_scal_$a\")\n+OPTAB_D (reduc_umax_scal_optab, \"reduc_umax_scal_$a\")\n+OPTAB_D (reduc_umin_scal_optab, \"reduc_umin_scal_$a\")\n+/* (Old) Vector reduction, returning a vector with the result in one lane.  */\n OPTAB_D (reduc_smax_optab, \"reduc_smax_$a\")\n OPTAB_D (reduc_smin_optab, \"reduc_smin_$a\")\n OPTAB_D (reduc_splus_optab, \"reduc_splus_$a\")\n OPTAB_D (reduc_umax_optab, \"reduc_umax_$a\")\n OPTAB_D (reduc_umin_optab, \"reduc_umin_$a\")\n OPTAB_D (reduc_uplus_optab, \"reduc_uplus_$a\")\n+\n OPTAB_D (sdot_prod_optab, \"sdot_prod$I$a\")\n OPTAB_D (ssum_widen_optab, \"widen_ssum$I$a3\")\n OPTAB_D (udot_prod_optab, \"udot_prod$I$a\")"}, {"sha": "5d150f618a49d4fe795c766735f1373eef79b42c", "filename": "gcc/optabs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "patch": "@@ -162,6 +162,11 @@ enum optab_subtype\n    vector shifts and rotates */\n extern optab optab_for_tree_code (enum tree_code, const_tree, enum optab_subtype);\n \n+/* Given an optab that reduces a vector to a scalar, find instead the old\n+   optab that produces a vector with the reduction result in one element,\n+   for a tree with the specified type.  */\n+extern optab scalar_reduc_to_vector (optab, const_tree type);\n+\n /* The various uses that a comparison can have; used by can_compare_p:\n    jumps, conditional moves, store flag operations.  */\n enum can_compare_purpose"}, {"sha": "a15ce14ef841d4573f7937522bcdaab8d6cb5efe", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d43a252e2fa612b14fa7f6f4dec3320c8b313a1c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=d43a252e2fa612b14fa7f6f4dec3320c8b313a1c", "patch": "@@ -5113,15 +5113,17 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n \n           epilog_reduc_code = ERROR_MARK;\n         }\n-\n-      if (reduc_optab\n-          && optab_handler (reduc_optab, vec_mode) == CODE_FOR_nothing)\n+      else if (optab_handler (reduc_optab, vec_mode) == CODE_FOR_nothing)\n         {\n-          if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"reduc op not supported by target.\\n\");\n+          optab = scalar_reduc_to_vector (reduc_optab, vectype_out);\n+          if (optab_handler (optab, vec_mode) == CODE_FOR_nothing)\n+            {\n+              if (dump_enabled_p ())\n+\t        dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"reduc op not supported by target.\\n\");\n \n-          epilog_reduc_code = ERROR_MARK;\n+\t      epilog_reduc_code = ERROR_MARK;\n+\t    }\n         }\n     }\n   else"}]}