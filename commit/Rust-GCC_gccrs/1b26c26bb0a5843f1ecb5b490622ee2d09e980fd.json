{"sha": "1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIyNmMyNmJiMGE1ODQzZjFlY2I1YjQ5MDYyMmVlMmQwOWU5ODBmZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-12-15T20:51:19Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-12-15T20:51:19Z"}, "message": "trans-expr.c (gfc_walk_function_expr): Detect elemental procedure components as well as elemental procedures.\n\n2011-12-15  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* trans-expr.c (gfc_walk_function_expr): Detect elemental\n\tprocedure components as well as elemental procedures.\n\t* trans-array.c (gfc_conv_procedure_call): Ditto.\n\t* trans-decl.c (gfc_trans_deferred_vars): Correct erroneous\n\tbreak for class pointers to continue.\n\n2011-12-15  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* gfortran.dg/class_array_3.f03: Remove explicit indexing of\n\tA%disp() to use scalarizer.\n\t* gfortran.dg/class_array_9.f03: New.\n\nFrom-SVN: r182389", "tree": {"sha": "5c301268e71763607d00b663bac4776dc0c0f439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c301268e71763607d00b663bac4776dc0c0f439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/comments", "author": null, "committer": null, "parents": [{"sha": "363477c0bd7f45f44c3ec6207223c8e1e12d1e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/363477c0bd7f45f44c3ec6207223c8e1e12d1e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/363477c0bd7f45f44c3ec6207223c8e1e12d1e1a"}], "stats": {"total": 76, "additions": 68, "deletions": 8}, "files": [{"sha": "5093f7da4109a636622577bfe5436e787027ea09", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "patch": "@@ -1,3 +1,11 @@\n+2011-12-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_walk_function_expr): Detect elemental\n+\tprocedure components as well as elemental procedures.\n+\t* trans-array.c (gfc_conv_procedure_call): Ditto.\n+\t* trans-decl.c (gfc_trans_deferred_vars): Correct erroneous\n+\tbreak for class pointers to continue.\n+\n 2011-12-15  Toon Moene  <toon@moene.org>\n \n \tPR fortran/51310"}, {"sha": "a644312915637739bcd9491c74911d9f64400d95", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "patch": "@@ -8358,7 +8358,7 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n \n   sym = expr->value.function.esym;\n   if (!sym)\n-      sym = expr->symtree->n.sym;\n+    sym = expr->symtree->n.sym;\n \n   /* A function that returns arrays.  */\n   gfc_is_proc_ptr_comp (expr, &comp);\n@@ -8368,7 +8368,7 @@ gfc_walk_function_expr (gfc_ss * ss, gfc_expr * expr)\n \n   /* Walk the parameters of an elemental function.  For now we always pass\n      by reference.  */\n-  if (sym->attr.elemental)\n+  if (sym->attr.elemental || (comp && comp->attr.elemental))\n     return gfc_walk_elemental_function_args (ss, expr->value.function.actual,\n \t\t\t\t\t     GFC_SS_REFERENCE);\n "}, {"sha": "14332f69f6d094af3936882df69b2c4192c3f280", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "patch": "@@ -3680,7 +3680,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n       else if ((!sym->attr.dummy || sym->ts.deferred)\n \t\t&& (sym->ts.type == BT_CLASS\n \t\t&& CLASS_DATA (sym)->attr.pointer))\n-\tbreak;\n+\tcontinue;\n       else if ((!sym->attr.dummy || sym->ts.deferred)\n \t\t&& (sym->attr.allocatable\n \t\t    || (sym->ts.type == BT_CLASS"}, {"sha": "83d8087fd505557f276c92d52b0e3c9d13ca84e8", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "patch": "@@ -3115,7 +3115,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n   if (se->ss != NULL)\n     {\n-      if (!sym->attr.elemental)\n+      if (!sym->attr.elemental && !(comp && comp->attr.elemental))\n \t{\n \t  gcc_assert (se->ss->info->type == GFC_SS_FUNCTION);\n \t  if (se->ss->info->useflags)"}, {"sha": "8786f421b4f432ded43bf570e5becb5230f79d18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "patch": "@@ -1,3 +1,9 @@\n+2011-12-15  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* gfortran.dg/class_array_3.f03: Remove explicit indexing of\n+\tA%disp() to use scalarizer.\n+\t* gfortran.dg/class_array_9.f03: New.\n+\n 2011-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/vect/vect-sdivmod-1.c: New test."}, {"sha": "874fecc357503b909543b0d6f860d02ae9a55b69", "filename": "gcc/testsuite/gfortran.dg/class_array_3.f03", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_3.f03?ref=1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "patch": "@@ -124,7 +124,7 @@ impure elemental logical function lt_cmp_int(a,b) result(cmp)\n          cmp = .false.\n        end if\n      class default\n-         ERROR STOP \"Don't compare apples with oranges\"\n+       ERROR STOP \"Don't compare apples with oranges\"\n    end select\n  end function lt_cmp_int\n end module test\n@@ -134,10 +134,10 @@ program main\n  class(sort_t), allocatable :: A(:)\n  integer :: i, m(5)= [7 , 4, 5, 2, 3]\n  allocate (A(5), source = [(sort_int_t(m(i)), i=1,5)])\n-!  print *, \"Before qsort: \", (A(i)%disp(), i = 1, size(a,1))\n+!  print *, \"Before qsort: \", A%disp()\n  call qsort(A)\n-!  print *, \"After qsort:  \", (A(i)%disp(), i = 1, size(a,1))\n- if (any ([(A(i)%disp(), i = 1, size(a,1))] .ne. [2,3,4,5,7])) call abort\n+!  print *, \"After qsort:  \", A%disp()\n+ if (any (A%disp() .ne. [2,3,4,5,7])) call abort\n end program main\n \n ! { dg-final { cleanup-modules \"m_qsort test\" } }"}, {"sha": "6b07aeac4d9f0979d4946336b164740d1a2f09aa", "filename": "gcc/testsuite/gfortran.dg/class_array_9.f03", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b26c26bb0a5843f1ecb5b490622ee2d09e980fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_array_9.f03?ref=1b26c26bb0a5843f1ecb5b490622ee2d09e980fd", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do run }\n+! Test typebound elemental functions on class arrays\n+!\n+module m\n+  type :: t1\n+    integer :: i\n+  contains\n+    procedure, pass :: disp => disp_t1\n+  end type t1\n+\n+  type, extends(t1) :: t2\n+    real :: r\n+  contains\n+    procedure, pass :: disp => disp_t2\n+  end type t2\n+\n+contains\n+  integer elemental function disp_t1 (q)\n+    class(t1), intent(in) :: q\n+    disp_t1 = q%i\n+  end function\n+\n+  integer elemental function disp_t2 (q)\n+    class(t2), intent(in) :: q\n+    disp_t2 = int (q%r)\n+  end function\n+end module\n+\n+  use m\n+  class(t1), allocatable :: x(:)\n+  allocate (x(4), source = [(t1 (i), i=1,4)])\n+  if (any (x%disp () .ne. [1,2,3,4])) call abort\n+  if (any (x(2:3)%disp () .ne. [2,3])) call abort\n+  if (any (x(4:3:-1)%disp () .ne. [4,3])) call abort\n+  if (x(4)%disp () .ne. 4) call abort\n+\n+  deallocate (x)\n+  allocate (x(4), source = [(t2 (2 * i, real (i) + 0.333), i=1,4)])\n+  if (any (x%disp () .ne. [1,2,3,4])) call abort\n+  if (any (x(2:3)%disp () .ne. [2,3])) call abort\n+  if (any (x(4:3:-1)%disp () .ne. [4,3])) call abort\n+  if (x(4)%disp () .ne. 4) call abort\n+\n+end\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}