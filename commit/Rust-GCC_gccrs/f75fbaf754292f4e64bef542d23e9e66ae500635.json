{"sha": "f75fbaf754292f4e64bef542d23e9e66ae500635", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc1ZmJhZjc1NDI5MmY0ZTY0YmVmNTQyZDIzZTllNjZhZTUwMDYzNQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-03-23T23:47:53Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-03-23T23:47:53Z"}, "message": "PR 12267, 12391, 12560, 13129, 14114, 14113\n\n\t* c-tree.h: Forward declare struct c_binding.  Declare\n\tc_override_bindings_to_false.  Update prototypes.\n\t(struct lang_identifier): Update comments.  Change fields to be\n\tstruct c_binding *.\n\t(IDENTIFIER_SYMBOL_VALUE, IDENTIFIER_TAG_VALUE)\n\t(IDENTIFIER_LABEL_VALUE, C_DECL_INVISIBLE)\n\t(KEEP_NO, KEEP_YES, KEEP_MAYBE): Delete.\n\t(C_DECL_IN_EXTERNAL_SCOPE, C_DECL_DECLARED_BUILTIN): New.\n\t* c-common.h: Update prototypes.\n\t* c-decl.c (struct c_scope): Update commentary.  Remove names,\n\tnames_last, parms, parms_last, tags, and shadowed fields.  Add\n\tbindings and depth fields.\n\t(scope_freelist): Move to more appropriate location.\n\t(c_print_identifier): Update for changes to struct lang_identifier.\n\t(objc_mark_locals_volatile): Update for new bindings structures.\n\t(global_bindings_p): Honor c_override_global_bindings_to_false.\n\t(pushlevel): Rename to push_scope; take no arguments; use the\n\tscope_freelist; initialize scope->depth and check for overflow.\n\t(poplevel): Rename to pop_scope; totally rewritten for new bindings\n\tstructures.\n\t(diagnose_mismatched_decls): Use C_DECL_DECLARED_BUILTIN, not\n\tC_DECL_INVISIBLE, for certain decisions.  Adjust some diagnostics.\n\tImprove some commentary.  Adjust handling of forward parm decls.\n\t(merge_decls): Set C_DECL_DECLARED_BUILTIN when appropriate.\n\tPreserve C_DECL_IN_EXTERNAL_SCOPE.\n\t(warn_if_shadowing): Correct indentation.  Improve diagnostics.\n\t(pushdecl): Remove unnecessary assertion.  Short-circuit anonymous\n\tdecls.  Rewrite for new bindings structures.  Improve commentary.\n\tEliminate the copy_node call.\n\t(implicit_decl_warning): Use the \"diag\" idiom (as seen in\n\tlocate_old_decl) to reduce code duplication; call locate_old_decl\n\tif appropriate.  Relocate to remove need for forward declaration.\n\t(implicitly_declare): Adjust for new bindings structures.  Kludge\n\taround Objective-C not-really-builtin functions.\n\t(undeclared_variable): Improve diagnostics.  If current_function_decl\n\tis nonnull but current_function_scope is null, use current_scope.\n\tUse bind.\n\t(lookup_tag): Adjust for new bindings structures.  Kludge around\n\tObjective-C's tag declarations that wind up in the external scope.\n\t(lookup_name): Adjust for new bindings structures.  Kludge around\n\tc-common.c's pseudo-typedefs that wind up in the external scope.\n\t(lookup_name_current_level): Rename lookup_name_in_scope; take a\n\tsecond argument indicating the scope to examine; rewrite for\n\tnew bindings structures.\n\t(c_init_decl_processing): Adjust for renamed functions.  Do not\n\tinitialize current_file_decl, first_builtin_decl, last_builtin_decl.\n\tFirst scope pushed is the external scope, not the global scope.\n\t(builtin_function): Use bind, not pushdecl.  Adjust other bits\n\tfor new data structures.  Keep track of builtins that should be\n\tmade visible automatically.\n\t(start_decl): Adjust diagnostics.  Remove unnecessary call to\n\texpand_decl.\n\t(grokparms): Return 0 if arg_types is error_mark_node.\n\t(get_parm_info): Rename \"void_at_end\" argument to \"ellipsis\", with\n\treversed sense.  Rewrite for new bindings structures.  Do not\n\tleave any decls in the scope, to prevent pop_scope from doing\n\tcontradictory things with them.\n\t(finish_struct, finish_enum): Remove redundant diagnostics.\n\t(build_enumerator): Don't cascade diagnostics for error_mark_node.\n\tMark location where -pedantic changes the meaning of the program.\n\t(store_parm_decls_newstyle, store_parm_decls_oldstyle): Load the\n\tparameter decls into the function's scope structure using bind.\n\tWarn here about function definitions in the wrong style.\n\tAdjust diagnostics.\n\t(store_parm_decls): Correct the determination of whether a\n\tfunction was defined with a prototype.\n\t(c_write_global_declarations): Operate on all file decls and on\n\tthe external scope.  Split body of the loop to...\n\t(c_write_global_declarations_1): ... this new function, to avoid\n\tcode duplication.\n\t(truly_local_externals, first_builtin_decl, last_builtin_decl)\n\t(make_scope, pop_scope, in_parm_level_p, set_block)\n\t(any_external_decl, record_external_decl, bind_label, getdecls)\n\t(link_hash_hash, link_hash_eq, merge_translation_unit_decls)\n\t(c_reset_state): Delete.\n\t(visible_builtins, c_override_global_bindings_to_false)\n\t(c_binding, I_SYMBOL_BINDING, I_SYMBOL_DECL, I_TAG_BINDING)\n\t(I_TAG_DECL, I_LABEL_BINDING, I_LABEL_DECL, file_scope)\n\t(external_scope, binding_freelist, bind, free_binding_and_advance)\n\t(push_file_scope, pop_file_scope): New.\n\t(pushtag, pushdecl_top_level, lookup_label, declare_label)\n\t(define_label, c_make_fname_decl, finish_decl)\n\t(mark_forward_parm_decls, build_compound_literal)\n\t(grokdeclarator, start_function, check_for_loop_decls)\n\t(identifier_global_value, record_builtin_type): Minor adjustments\n\tfor new bindings structures.  Improve diagnostics and commentary.\n\t* c-objc-common.c (start_cdtor, finish_cdtor): Adjust calls to\n\tpushlevel/poplevel respectively.\n\t(c_objc_common_finish_file): Don't call merge_translation_unit_decls.\n\t* c-opts.c (c_common_parse_file): Remove spurious ATTRIBUTE_UNUSED.\n\tWarn about YYDEBUG not being defined only if -dy.  Remove no-longer-\n\tcorrect loop over multiple translation units; call fatal_error if\n\trequested to compile more than one file at once.  (This disables\n\tIMA temporarily - an up-front error being preferable to a crash.)\n\t* c-parse.in (pushlevel, poplevel rules): Rename push_scope, pop_scope.\n\t(all actions): Adjust calls to pushlevel/poplevel.\n\t(parsing_iso_function_signature): Delete.\n\t(extdef_1): Fold into extdef.\n\t(old_style_parm_decls_1): Fold into old_style_parm_decls.  Don't\n\twarn here about function definitions in the wrong style.\n\t(after_tyle_declarator, parm_declarator_starttypename)\n\t(parm_declarator_nostarttypename, notype_declarator): Remove\n\tcommented-out productions.\n\t(parmlist_1, parmlist_2): Use make_node, not tree_cons, to create\n\tan empty TREE_LIST node.  Adjust calls to get_parm_info.\n\t(parmlist_2 : ELLIPSIS): Tag the arg-info block with error_mark_node\n\tto suppress -Wold-style-definition after this error.\n\t(c_parse_file): Don't clear the binding stack or call\n\tfinish_fname_decls here.  Correct comment.\n\t* c-typeck.c (same_translation_unit_p): Export.\n\t(common_type): Use c_override_global_bindings_to_false, not\n\tpushlevel/poplevel/declare_parm_level.\n\t* c-lang.c: Override LANG_HOOKS_CLEAR_BINDING_STACK,\n\tLANG_HOOKS_PUSHLEVEL, LANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK,\n\tand LANG_HOOKS_GETDECLS with do-nothing stubs.\n\t* objc/objc-lang.c: Likewise.\n\t* objc/objc-act.c: Adjust all calls to pushlevel, poplevel,\n\tget_parm_info.\n\t(OBJC_VOID_AT_END): Delete; replace all uses\n\twith void_list_node.\n\t(generate_forward_declaration_to_string_table): Delete.\n\t* objc/objc-act.h (OCTI_STRG_DECL, UOBJC_STRINGS_decl): Delete.\n\n\t* coverage.c (create_coverage): Don't pushdecl anything.\n\t* langhooks.c (lhd_clear_binding_stack): Call\n\tlang_hooks.decls.poplevel, not poplevel.\n\t* tree.c (list_length): If ENABLE_TREE_CHECKING, abort on a\n\tcircular list rather than going into an infinite loop.\n\ncp:\n\t* cp-lang.c (c_reset_state): Delete.\n\t(push_file_scope, pop_file_scope): New stubs.\n\t* parser.c (c_parse_file): Call sorry() here if called more than once.\n\ntestsuite:\n\t* gcc.dg/Wold-style-definition-1.c, gcc.dg/builtins-30.c\n\t* gcc.dg/unused-4.c, gcc.dg/noncompile/label-1.c\n\t* gcc.dg/noncompile/label-lineno-1.c, objc.dg/naming-1.m:\n\tAdjust error regexps.\n\t* gcc.dg/Wshadow-2.c, gcc.dg/noncompile/incomplete-3.c\n\t* gcc.dg/noncompile/undeclared-1.c: New test cases.\n\t* gcc.dg/decl-5.c, gcc.dg/redecl-1.c: Remove XFAIL.\n\t* gcc.dg/local1.c: Add explanatory comment.\n\nFrom-SVN: r79883", "tree": {"sha": "9fca15bf978e2eb7c57b3483c5dfb6949062ad3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fca15bf978e2eb7c57b3483c5dfb6949062ad3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f75fbaf754292f4e64bef542d23e9e66ae500635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75fbaf754292f4e64bef542d23e9e66ae500635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75fbaf754292f4e64bef542d23e9e66ae500635", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75fbaf754292f4e64bef542d23e9e66ae500635/comments", "author": null, "committer": null, "parents": [{"sha": "5595a2bd855cc9bdd52db434454cd755a73ca44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5595a2bd855cc9bdd52db434454cd755a73ca44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5595a2bd855cc9bdd52db434454cd755a73ca44c"}], "stats": {"total": 2702, "additions": 1383, "deletions": 1319}, "files": [{"sha": "b885df98dc421186ec75e059158bf85e58fba6bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 145, "deletions": 12, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -1,8 +1,141 @@\n+2004-03-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 12267, 12391, 12560, 13129, 14114, 14113\n+\n+\t* c-tree.h: Forward declare struct c_binding.  Declare\n+\tc_override_bindings_to_false.  Update prototypes.\n+\t(struct lang_identifier): Update comments.  Change fields to be\n+\tstruct c_binding *.\n+\t(IDENTIFIER_SYMBOL_VALUE, IDENTIFIER_TAG_VALUE)\n+\t(IDENTIFIER_LABEL_VALUE, C_DECL_INVISIBLE)\n+\t(KEEP_NO, KEEP_YES, KEEP_MAYBE): Delete.\n+\t(C_DECL_IN_EXTERNAL_SCOPE, C_DECL_DECLARED_BUILTIN): New.\n+\t* c-common.h: Update prototypes.\n+\t* c-decl.c (struct c_scope): Update commentary.  Remove names,\n+\tnames_last, parms, parms_last, tags, and shadowed fields.  Add\n+\tbindings and depth fields.\n+\t(scope_freelist): Move to more appropriate location.\n+\t(c_print_identifier): Update for changes to struct lang_identifier.\n+\t(objc_mark_locals_volatile): Update for new bindings structures.\n+\t(global_bindings_p): Honor c_override_global_bindings_to_false.\n+\t(pushlevel): Rename to push_scope; take no arguments; use the\n+\tscope_freelist; initialize scope->depth and check for overflow.\n+\t(poplevel): Rename to pop_scope; totally rewritten for new bindings\n+\tstructures.\n+\t(diagnose_mismatched_decls): Use C_DECL_DECLARED_BUILTIN, not\n+\tC_DECL_INVISIBLE, for certain decisions.  Adjust some diagnostics.\n+\tImprove some commentary.  Adjust handling of forward parm decls.\n+\t(merge_decls): Set C_DECL_DECLARED_BUILTIN when appropriate.\n+\tPreserve C_DECL_IN_EXTERNAL_SCOPE.\n+\t(warn_if_shadowing): Correct indentation.  Improve diagnostics.\n+\t(pushdecl): Remove unnecessary assertion.  Short-circuit anonymous\n+\tdecls.  Rewrite for new bindings structures.  Improve commentary.\n+\tEliminate the copy_node call.\n+\t(implicit_decl_warning): Use the \"diag\" idiom (as seen in\n+\tlocate_old_decl) to reduce code duplication; call locate_old_decl\n+\tif appropriate.  Relocate to remove need for forward declaration.\n+\t(implicitly_declare): Adjust for new bindings structures.  Kludge\n+\taround Objective-C not-really-builtin functions.\n+\t(undeclared_variable): Improve diagnostics.  If current_function_decl\n+\tis nonnull but current_function_scope is null, use current_scope.\n+\tUse bind.\n+\t(lookup_tag): Adjust for new bindings structures.  Kludge around\n+\tObjective-C's tag declarations that wind up in the external scope.\n+\t(lookup_name): Adjust for new bindings structures.  Kludge around\n+\tc-common.c's pseudo-typedefs that wind up in the external scope.\n+\t(lookup_name_current_level): Rename lookup_name_in_scope; take a\n+\tsecond argument indicating the scope to examine; rewrite for\n+\tnew bindings structures.\n+\t(c_init_decl_processing): Adjust for renamed functions.  Do not\n+\tinitialize current_file_decl, first_builtin_decl, last_builtin_decl.\n+\tFirst scope pushed is the external scope, not the global scope.\n+\t(builtin_function): Use bind, not pushdecl.  Adjust other bits\n+\tfor new data structures.  Keep track of builtins that should be\n+\tmade visible automatically.\n+\t(start_decl): Adjust diagnostics.  Remove unnecessary call to\n+\texpand_decl.\n+\t(grokparms): Return 0 if arg_types is error_mark_node.\n+\t(get_parm_info): Rename \"void_at_end\" argument to \"ellipsis\", with\n+\treversed sense.  Rewrite for new bindings structures.  Do not\n+\tleave any decls in the scope, to prevent pop_scope from doing\n+\tcontradictory things with them.\n+\t(finish_struct, finish_enum): Remove redundant diagnostics.\n+\t(build_enumerator): Don't cascade diagnostics for error_mark_node.\n+\tMark location where -pedantic changes the meaning of the program.\n+\t(store_parm_decls_newstyle, store_parm_decls_oldstyle): Load the\n+\tparameter decls into the function's scope structure using bind.\n+\tWarn here about function definitions in the wrong style.\n+\tAdjust diagnostics.\n+\t(store_parm_decls): Correct the determination of whether a\n+\tfunction was defined with a prototype.\n+\t(c_write_global_declarations): Operate on all file decls and on\n+\tthe external scope.  Split body of the loop to...\n+\t(c_write_global_declarations_1): ... this new function, to avoid\n+\tcode duplication.\n+\t(truly_local_externals, first_builtin_decl, last_builtin_decl)\n+\t(make_scope, pop_scope, in_parm_level_p, set_block)\n+\t(any_external_decl, record_external_decl, bind_label, getdecls)\n+\t(link_hash_hash, link_hash_eq, merge_translation_unit_decls)\n+\t(c_reset_state): Delete.\n+\t(visible_builtins, c_override_global_bindings_to_false)\n+\t(c_binding, I_SYMBOL_BINDING, I_SYMBOL_DECL, I_TAG_BINDING)\n+\t(I_TAG_DECL, I_LABEL_BINDING, I_LABEL_DECL, file_scope)\n+\t(external_scope, binding_freelist, bind, free_binding_and_advance)\n+\t(push_file_scope, pop_file_scope): New.\n+\t(pushtag, pushdecl_top_level, lookup_label, declare_label)\n+\t(define_label, c_make_fname_decl, finish_decl)\n+\t(mark_forward_parm_decls, build_compound_literal)\n+\t(grokdeclarator, start_function, check_for_loop_decls)\n+\t(identifier_global_value, record_builtin_type): Minor adjustments\n+\tfor new bindings structures.  Improve diagnostics and commentary.\n+\t* c-objc-common.c (start_cdtor, finish_cdtor): Adjust calls to\n+\tpushlevel/poplevel respectively.\n+\t(c_objc_common_finish_file): Don't call merge_translation_unit_decls.\n+\t* c-opts.c (c_common_parse_file): Remove spurious ATTRIBUTE_UNUSED.\n+\tWarn about YYDEBUG not being defined only if -dy.  Remove no-longer-\n+\tcorrect loop over multiple translation units; call fatal_error if\n+\trequested to compile more than one file at once.  (This disables\n+\tIMA temporarily - an up-front error being preferable to a crash.)\n+\t* c-parse.in (pushlevel, poplevel rules): Rename push_scope, pop_scope.\n+\t(all actions): Adjust calls to pushlevel/poplevel.\n+\t(parsing_iso_function_signature): Delete.\n+\t(extdef_1): Fold into extdef.\n+\t(old_style_parm_decls_1): Fold into old_style_parm_decls.  Don't\n+\twarn here about function definitions in the wrong style.\n+\t(after_tyle_declarator, parm_declarator_starttypename)\n+\t(parm_declarator_nostarttypename, notype_declarator): Remove\n+\tcommented-out productions.\n+\t(parmlist_1, parmlist_2): Use make_node, not tree_cons, to create\n+\tan empty TREE_LIST node.  Adjust calls to get_parm_info.\n+\t(parmlist_2 : ELLIPSIS): Tag the arg-info block with error_mark_node\n+\tto suppress -Wold-style-definition after this error.\n+\t(c_parse_file): Don't clear the binding stack or call\n+\tfinish_fname_decls here.  Correct comment.\n+\t* c-typeck.c (same_translation_unit_p): Export.\n+\t(common_type): Use c_override_global_bindings_to_false, not\n+\tpushlevel/poplevel/declare_parm_level.\n+\t* c-lang.c: Override LANG_HOOKS_CLEAR_BINDING_STACK,\n+\tLANG_HOOKS_PUSHLEVEL, LANG_HOOKS_POPLEVEL, LANG_HOOKS_SET_BLOCK,\n+\tand LANG_HOOKS_GETDECLS with do-nothing stubs.\n+\t* objc/objc-lang.c: Likewise.\n+\t* objc/objc-act.c: Adjust all calls to pushlevel, poplevel,\n+\tget_parm_info.\n+\t(OBJC_VOID_AT_END): Delete; replace all uses\n+\twith void_list_node.\n+\t(generate_forward_declaration_to_string_table): Delete.\n+\t* objc/objc-act.h (OCTI_STRG_DECL, UOBJC_STRINGS_decl): Delete.\n+\n+\t* coverage.c (create_coverage): Don't pushdecl anything.\n+\t* langhooks.c (lhd_clear_binding_stack): Call\n+\tlang_hooks.decls.poplevel, not poplevel.\n+\t* tree.c (list_length): If ENABLE_TREE_CHECKING, abort on a\n+\tcircular list rather than going into an infinite loop.\n+\n 2004-03-23  Olivier Hainque  <hainque@act-europe.fr>\n \n-        * optabs.c (expand_binop): When synthesizing double word rotates\n-        from single word shifts, use a new register target if the provided\n-        target is not a REG already.\n+\t* optabs.c (expand_binop): When synthesizing double word rotates\n+\tfrom single word shifts, use a new register target if the provided\n+\ttarget is not a REG already.\n \n 2004-03-23  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n@@ -198,8 +331,8 @@\n \t* frontends.texi: Add missing line.\n \n 2004-03-21  Zack Weinberg  <zack@codesourcery.com>\n-            Chris Devers  <cdevers@pobox.com>\n-            Joseph S. Myers  <jsm@polyomino.org.uk>\n+\t    Chris Devers  <cdevers@pobox.com>\n+\t    Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* doc/frontends.texi: Rewrite.\n \t* doc/gcc.texi: Update last modification date.\n@@ -404,7 +537,7 @@\n \t(ir_sr70_icmp): Delete.\n \n 2004-03-18  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n-\t\n+\n \t* tree.h (TREE_CHECK2, TREE_CHECK3, TREE_CHECK5): New macros.\n \t(tree_check2_failed, tree_check3_failed, tree_check5_failed): New decl.\n \t(FUNC_OR_METHOD_CHECK, SET_ARRAY_OR_VECTOR_CHECK): New macros.\n@@ -462,12 +595,12 @@\n \n 2004-03-17  Fariborz Jahanian <fjahanian@apple.com>\n \n-        * config/rs6000/rs6000.c (rs6000_stack_info): correct reg_size\n-        for mixed mode.\n-        (rs6000_emit_prologue): Ditto.\n-        (rs6000_emit_epilogue): Ditto.\n-        * config/rs6000/rs6000.h: Definition of DWARF_CIE_DATA_ALIGNMENT\n-        macro for mixed mode.\n+\t* config/rs6000/rs6000.c (rs6000_stack_info): correct reg_size\n+\tfor mixed mode.\n+\t(rs6000_emit_prologue): Ditto.\n+\t(rs6000_emit_epilogue): Ditto.\n+\t* config/rs6000/rs6000.h: Definition of DWARF_CIE_DATA_ALIGNMENT\n+\tmacro for mixed mode.\n \n 2004-03-18  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "4326a59480f35e2c33c4a2911590e4318c664949", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -329,6 +329,8 @@ extern void (*lang_expand_function_end) (void);\n    noreturn attribute.  */\n extern int (*lang_missing_noreturn_ok_p) (tree);\n \n+extern void push_file_scope (void);\n+extern void pop_file_scope (void);\n extern int yyparse (void);\n extern stmt_tree current_stmt_tree (void);\n extern tree *current_scope_stmt_stack (void);\n@@ -950,9 +952,6 @@ extern int self_promoting_args_p (tree);\n extern tree strip_array_types (tree);\n extern tree strip_pointer_operator (tree);\n \n-/* This function resets the parsers' state in preparation for parsing\n-   a new file.  */\n-extern void c_reset_state (void);\n /* This is the basic parsing function.  */\n extern void c_parse_file (void);\n /* This is misnamed, it actually performs end-of-compilation processing.  */"}, {"sha": "e74347997c5780bfbf0d3f552f49a8d29836f4a7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 993, "deletions": 1047, "changes": 2040, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635"}, {"sha": "391e8bddfaf76e21a461659fa0e339c0ff3a7f3d", "filename": "gcc/c-lang.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -65,6 +65,8 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n+#undef LANG_HOOKS_CLEAR_BINDING_STACK\n+#define LANG_HOOKS_CLEAR_BINDING_STACK lhd_do_nothing\n #undef LANG_HOOKS_TRUTHVALUE_CONVERSION\n #define LANG_HOOKS_TRUTHVALUE_CONVERSION c_objc_common_truthvalue_conversion\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL\n@@ -136,6 +138,19 @@ enum c_language_kind c_language = clk_c;\n #undef LANG_HOOKS_REGISTER_BUILTIN_TYPE\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n \n+/* The C front end's scoping structure is very different from\n+   that expected by the language-independent code; it is best\n+   to disable all of pushlevel, poplevel, set_block, and getdecls.\n+   This means it must also provide its own write_globals.  */\n+\n+#undef LANG_HOOKS_PUSHLEVEL\n+#define LANG_HOOKS_PUSHLEVEL lhd_do_nothing_i\n+#undef LANG_HOOKS_POPLEVEL\n+#define LANG_HOOKS_POPLEVEL lhd_do_nothing_iii_return_null_tree\n+#undef LANG_HOOKS_SET_BLOCK\n+#define LANG_HOOKS_SET_BLOCK lhd_do_nothing_t\n+#undef LANG_HOOKS_GETDECLS\n+#define LANG_HOOKS_GETDECLS lhd_return_null_tree_v\n #undef LANG_HOOKS_WRITE_GLOBALS\n #define LANG_HOOKS_WRITE_GLOBALS c_write_global_declarations\n "}, {"sha": "e736110e6be882b22da08c484f8b5662749bc023", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -206,7 +206,7 @@ start_cdtor (int method_type)\n \n   body = c_begin_compound_stmt ();\n \n-  pushlevel (0);\n+  push_scope ();\n   clear_last_expr ();\n   add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n \n@@ -220,7 +220,7 @@ finish_cdtor (tree body)\n   tree block;\n \n   scope = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n-  block = poplevel (0, 0, 0);\n+  block = pop_scope ();\n   SCOPE_STMT_BLOCK (TREE_PURPOSE (scope)) = block;\n   SCOPE_STMT_BLOCK (TREE_VALUE (scope)) = block;\n \n@@ -237,10 +237,6 @@ c_objc_common_finish_file (void)\n   if (pch_file)\n     c_common_write_pch ();\n \n-  /* If multiple translation units were built, copy information between\n-     them based on linkage rules.  */\n-  merge_translation_unit_decls ();\n-\n   cgraph_finalize_compilation_unit ();\n   cgraph_optimize ();\n "}, {"sha": "ac2fe9761566e629e3d1d9c68ed17b076661cf97", "filename": "gcc/c-opts.c", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -1216,41 +1216,24 @@ c_common_init (void)\n /* Initialize the integrated preprocessor after debug output has been\n    initialized; loop over each input file.  */\n void\n-c_common_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n+c_common_parse_file (int set_yydebug)\n {\n-  unsigned file_index;\n-  \n #if YYDEBUG != 0\n   yydebug = set_yydebug;\n #else\n-  warning (\"YYDEBUG not defined\");\n+  if (set_yydebug)\n+    warning (\"YYDEBUG not defined\");\n #endif\n \n-  file_index = 0;\n-  \n-  do\n-    {\n-      if (file_index > 0)\n-\t{\n-\t  /* Reset the state of the parser.  */\n-\t  c_reset_state();\n-\n-\t  /* Reset cpplib's macros and start a new file.  */\n-\t  cpp_undef_all (parse_in);\n-\t  main_input_filename = this_input_filename\n-\t    = cpp_read_main_file (parse_in, in_fnames[file_index]);\n-\t  if (this_input_filename == NULL)\n-\t    break;\n-\t}\n-      finish_options ();\n-      if (file_index == 0)\n-\tpch_init();\n-      c_parse_file ();\n+  if (num_in_fnames > 1)\n+    fatal_error (\"sorry, inter-module analysis temporarily out of commission\");\n \n-      file_index++;\n-    } while (file_index < num_in_fnames);\n-  \n+  finish_options ();\n+  pch_init ();\n+  push_file_scope ();\n+  c_parse_file ();\n   finish_file ();\n+  pop_file_scope ();\n }\n \n /* Common finish hook for the C, ObjC and C++ front ends.  */"}, {"sha": "91a42d91814b9d72f0afef67a4e363621600e434", "filename": "gcc/c-parse.in", "status": "modified", "additions": 23, "deletions": 81, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -208,7 +208,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n %type <ttype> any_word\n \n %type <ttype> compstmt compstmt_start compstmt_nostart compstmt_primary_start\n-%type <ttype> do_stmt_start poplevel stmt label\n+%type <ttype> do_stmt_start pop_scope stmt label\n \n %type <ttype> c99_block_start c99_block_end\n %type <ttype> declarator\n@@ -328,8 +328,6 @@ static int objc_need_raw_identifier;\n #define OBJC_NEED_RAW_IDENTIFIER(VAL)\t/* nothing */\n @@end_ifc\n \n-static bool parsing_iso_function_signature;\n-\n /* Tell yyparse how to print a token's value, if yydebug is set.  */\n \n #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)\n@@ -368,11 +366,6 @@ extdefs:\n \t;\n \n extdef:\n-\textdef_1\n-\t{ parsing_iso_function_signature = false; } /* Reset after any external definition.  */\n-\t;\n-\n-extdef_1:\n \tfndef\n \t| datadef\n \t| asmdef\n@@ -741,28 +734,8 @@ primary:\n \t;\n \n old_style_parm_decls:\n-\told_style_parm_decls_1\n-\t{\n-\t  parsing_iso_function_signature = false; /* Reset after decls.  */\n-\t}\n-\t;\n-\n-old_style_parm_decls_1:\n \t/* empty */\n-\t{\n-\t  if (warn_traditional && !in_system_header\n-\t      && parsing_iso_function_signature)\n-\t    warning (\"traditional C rejects ISO C style function definitions\");\n-\t  if (warn_old_style_definition && !in_system_header\n-\t      && !parsing_iso_function_signature)\n-\t    warning (\"old-style parameter declaration\");\n-\t  parsing_iso_function_signature = false; /* Reset after warning.  */\n-\t}\n \t| datadecls\n-\t{\n-\t  if (warn_old_style_definition && !in_system_header)\n-\t    warning (\"old-style parameter declaration\");\n-\t}\n \t;\n \n /* The following are analogous to lineno_decl, decls and decl\n@@ -1555,7 +1528,6 @@ nested_function:\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n \t\t    }\n-\t\t  parsing_iso_function_signature = false; /* Don't warn about nested functions.  */\n \t\t}\n \t   old_style_parm_decls save_location\n \t\t{ tree decl = current_function_decl;\n@@ -1586,7 +1558,6 @@ notype_nested_function:\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n \t\t    }\n-\t\t  parsing_iso_function_signature = false; /* Don't warn about nested functions.  */\n \t\t}\n \t  old_style_parm_decls save_location\n \t\t{ tree decl = current_function_decl;\n@@ -1620,9 +1591,6 @@ after_type_declarator:\n \t\t{ $$ = $2 ? tree_cons ($2, $3, NULL_TREE) : $3; }\n \t| after_type_declarator '(' parmlist_or_identifiers  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n-/*\t| after_type_declarator '(' error ')'  %prec '.'\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, NULL_TREE, NULL_TREE);\n-\t\t  poplevel (0, 0, 0); }  */\n \t| after_type_declarator array_declarator  %prec '.'\n \t\t{ $$ = set_array_declarator_type ($2, $1, 0); }\n \t| '*' maybe_type_quals_attrs after_type_declarator  %prec UNARY\n@@ -1645,9 +1613,6 @@ parm_declarator:\n parm_declarator_starttypename:\n \t  parm_declarator_starttypename '(' parmlist_or_identifiers  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n-/*\t| parm_declarator_starttypename '(' error ')'  %prec '.'\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, NULL_TREE, NULL_TREE);\n-\t\t  poplevel (0, 0, 0); }  */\n \t| parm_declarator_starttypename array_declarator  %prec '.'\n \t\t{ $$ = set_array_declarator_type ($2, $1, 0); }\n \t| TYPENAME\n@@ -1659,9 +1624,6 @@ parm_declarator_starttypename:\n parm_declarator_nostarttypename:\n \t  parm_declarator_nostarttypename '(' parmlist_or_identifiers  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n-/*\t| parm_declarator_nostarttypename '(' error ')'  %prec '.'\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, NULL_TREE, NULL_TREE);\n-\t\t  poplevel (0, 0, 0); }  */\n \t| parm_declarator_nostarttypename array_declarator  %prec '.'\n \t\t{ $$ = set_array_declarator_type ($2, $1, 0); }\n \t| '*' maybe_type_quals_attrs parm_declarator_starttypename  %prec UNARY\n@@ -1678,9 +1640,6 @@ parm_declarator_nostarttypename:\n notype_declarator:\n \t  notype_declarator '(' parmlist_or_identifiers  %prec '.'\n \t\t{ $$ = build_nt (CALL_EXPR, $1, $3, NULL_TREE); }\n-/*\t| notype_declarator '(' error ')'  %prec '.'\n-\t\t{ $$ = build_nt (CALL_EXPR, $1, NULL_TREE, NULL_TREE);\n-\t\t  poplevel (0, 0, 0); }  */\n \t| '(' maybe_attribute notype_declarator ')'\n \t\t{ $$ = $2 ? tree_cons ($2, $3, NULL_TREE) : $3; }\n \t| '*' maybe_type_quals_attrs notype_declarator  %prec UNARY\n@@ -2037,14 +1996,14 @@ lineno_stmt_decl_or_labels:\n errstmt:  error ';'\n \t;\n \n-pushlevel:  /* empty */\n-\t\t{ pushlevel (0);\n+push_scope:  /* empty */\n+\t\t{ push_scope ();\n \t\t  clear_last_expr ();\n \t\t  add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n \t\t}\n \t;\n \n-poplevel:  /* empty */\n+pop_scope:  /* empty */\n                 {\n @@ifobjc\n \t\t  if (c_dialect_objc ())\n@@ -2059,7 +2018,7 @@ c99_block_start: /* empty */\n \t\t{ if (flag_isoc99)\n \t\t    {\n \t\t      $$ = c_begin_compound_stmt ();\n-\t\t      pushlevel (0);\n+\t\t      push_scope ();\n \t\t      clear_last_expr ();\n \t\t      add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n \t\t    }\n@@ -2075,7 +2034,7 @@ c99_block_end: /* empty */\n                 { if (flag_isoc99)\n \t\t    {\n \t\t      tree scope_stmt = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n-\t\t      $$ = poplevel (KEEP_MAYBE, 0, 0);\n+\t\t      $$ = pop_scope ();\n \t\t      SCOPE_STMT_BLOCK (TREE_PURPOSE (scope_stmt))\n \t\t\t= SCOPE_STMT_BLOCK (TREE_VALUE (scope_stmt))\n \t\t\t= $$;\n@@ -2124,8 +2083,8 @@ compstmt_start: '{' { compstmt_count++;\n \n compstmt_nostart: '}'\n \t\t{ $$ = convert (void_type_node, integer_zero_node); }\n-\t| pushlevel maybe_label_decls compstmt_contents_nonempty '}' poplevel\n-\t\t{ $$ = poplevel (KEEP_MAYBE, 0, 0);\n+\t| push_scope maybe_label_decls compstmt_contents_nonempty '}' pop_scope\n+\t\t{ $$ = pop_scope ();\n \t\t  SCOPE_STMT_BLOCK (TREE_PURPOSE ($5))\n \t\t    = SCOPE_STMT_BLOCK (TREE_VALUE ($5))\n \t\t    = $$; }\n@@ -2589,11 +2548,11 @@ start_string_translation:\n    \"void bar (int (__attribute__((__mode__(SI))) int foo));\".  */\n parmlist:\n \t  maybe_attribute\n-\t\t{ pushlevel (0);\n+\t\t{ push_scope ();\n \t\t  declare_parm_level (); }\n \t  parmlist_1\n \t\t{ $$ = $3;\n-\t\t  poplevel (0, 0, 0); }\n+\t\t  pop_scope (); }\n \t;\n \n parmlist_1:\n@@ -2606,32 +2565,23 @@ parmlist_1:\n \t  parmlist_1\n \t\t{ $$ = $6; }\n \t| error ')'\n-\t\t{ $$ = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); }\n+\t\t{ $$ = make_node (TREE_LIST); }\n \t;\n \n /* This is what appears inside the parens in a function declarator.\n    Is value is represented in the format that grokdeclarator expects.  */\n parmlist_2:  /* empty */\n-\t\t{ $$ = get_parm_info (0); }\n+\t\t{ $$ = make_node (TREE_LIST); }\n \t| ELLIPSIS\n-\t\t{ $$ = get_parm_info (0);\n-\t\t  /* Gcc used to allow this as an extension.  However, it does\n-\t\t     not work for all targets, and thus has been disabled.\n-\t\t     Also, since func (...) and func () are indistinguishable,\n-\t\t     it caused problems with the code in expand_builtin which\n-\t\t     tries to verify that BUILT_IN_NEXT_ARG is being used\n-\t\t     correctly.  */\n+\t\t{ $$ = make_node (TREE_LIST); \n+\t\t  /* Suppress -Wold-style-definition for this case.  */\n+\t\t  TREE_CHAIN ($$) = error_mark_node;\n \t\t  error (\"ISO C requires a named argument before `...'\");\n-\t\t  parsing_iso_function_signature = true;\n \t\t}\n \t| parms\n-\t\t{ $$ = get_parm_info (1);\n-\t\t  parsing_iso_function_signature = true;\n-\t\t}\n+\t\t{ $$ = get_parm_info (/*ellipsis=*/false); }\n \t| parms ',' ELLIPSIS\n-\t\t{ $$ = get_parm_info (0);\n-\t\t  parsing_iso_function_signature = true;\n-\t\t}\n+\t\t{ $$ = get_parm_info (/*ellipsis=*/true); }\n \t;\n \n parms:\n@@ -2706,11 +2656,11 @@ setspecs_fp:\n    Its value is a list of ..._TYPE nodes or a list of identifiers.  */\n parmlist_or_identifiers:\n \t  maybe_attribute\n-\t\t{ pushlevel (0);\n+\t\t{ push_scope ();\n \t\t  declare_parm_level (); }\n \t  parmlist_or_identifiers_1\n \t\t{ $$ = $3;\n-\t\t  poplevel (0, 0, 0); }\n+\t\t  pop_scope (); }\n \t;\n \n parmlist_or_identifiers_1:\n@@ -3128,13 +3078,13 @@ optparmlist:\n \t\t}\n \t| ','\n \t\t{\n-\t\t  pushlevel (0);\n+\t\t  push_scope ();\n \t\t}\n \t  parmlist_2\n \t\t{\n \t\t  /* returns a tree list node generated by get_parm_info */\n \t\t  $$ = $3;\n-\t\t  poplevel (0, 0, 0);\n+\t\t  pop_scope ();\n \t\t}\n \t;\n \n@@ -3799,22 +3749,14 @@ yyprint (FILE *file, int yychar, YYSTYPE yyl)\n     }\n }\n \f\n-/* This is not the ideal place to put these, but we have to get them out\n-   of c-lex.c because cp/lex.c has its own versions.  */\n+/* This is not the ideal place to put this, but we have to get it out\n+   of c-lex.c because cp/lex.c has its own version.  */\n \n /* Parse the file.  */\n void\n c_parse_file (void)\n {\n   yyparse ();\n-  /* In case there were missing closebraces, get us back to the global\n-     binding level.  */\n-  while (! global_bindings_p ())\n-    poplevel (0, 0, 0);\n-  /* __FUNCTION__ is defined at file scope (\"\").  This\n-     call may not be necessary as my tests indicate it\n-     still works without it.  */\n-  finish_fname_decls ();\n \n   if (malloced_yyss)\n     {"}, {"sha": "bd53dbc56e9e3a6ff0d2578f7f89bf454fda6a05", "filename": "gcc/c-tree.h", "status": "modified", "additions": 25, "deletions": 46, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -24,22 +24,21 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n #include \"c-common.h\"\n \n-/* Language-dependent contents of an identifier.  */\n+/* Each C symbol points to three linked lists of c_binding structures.\n+   These describe the values of the identifier in the three different\n+   namespaces defined by the language.  The contents of these lists\n+   are private to c-decl.c.  */\n \n-/* The limbo_value is used for block level extern declarations, which need\n-   to be type checked against subsequent extern declarations.  They can't\n-   be referenced after they fall out of scope, so they can't be global.\n+struct c_binding;\n \n-   The rid_code field is used for keywords.  It is in all\n-   lang_identifier nodes, because some keywords are only special in a\n-   particular context.  */\n+/* Language-dependent contents of an identifier.  */\n \n struct lang_identifier GTY(())\n {\n   struct c_common_identifier common_id;\n-  tree symbol_value;\n-  tree tag_value;\n-  tree label_value;\n+  struct c_binding *symbol_binding; /* vars, funcs, constants, typedefs */\n+  struct c_binding *tag_binding;    /* struct/union/enum tags */\n+  struct c_binding *label_binding;  /* labels */\n };\n \n /* The resulting tree type.  */\n@@ -64,26 +63,6 @@ struct lang_decl GTY(())\n   tree pending_sizes;\n };\n \n-/* Macros for access to language-specific slots in an identifier.  */\n-/* Each of these slots contains a DECL node or null.  */\n-\n-/* The value of the identifier in the namespace of \"ordinary identifiers\"\n-   (data objects, enum constants, functions, typedefs).  */\n-#define IDENTIFIER_SYMBOL_VALUE(NODE)\t\\\n-  (((struct lang_identifier *) (NODE))->symbol_value)\n-/* The value of the identifier in the namespace of struct, union,\n-   and enum tags.  */\n-#define IDENTIFIER_TAG_VALUE(NODE)\t\\\n-  (((struct lang_identifier *) (NODE))->tag_value)\n-/* The value of the identifier in the namespace of labels.  */\n-#define IDENTIFIER_LABEL_VALUE(NODE)\t\\\n-  (((struct lang_identifier *) (NODE))->label_value)\n-\n-/* In identifiers, C uses the following fields in a special way:\n-   TREE_PUBLIC        to record that there was a previous local extern decl.\n-   TREE_USED          to record that such a decl was used.\n-   TREE_ADDRESSABLE   to record that the address of such a decl was used.  */\n-\n /* In a RECORD_TYPE or UNION_TYPE, nonzero if any component is read-only.  */\n #define C_TYPE_FIELDS_READONLY(TYPE) TREE_LANG_FLAG_1 (TYPE)\n \n@@ -128,11 +107,13 @@ struct lang_type GTY(())\n /* For a FUNCTION_DECL, nonzero if it was an implicit declaration.  */\n #define C_DECL_IMPLICIT(EXP) DECL_LANG_FLAG_2 (EXP)\n \n-/* Nonzero for a declaration of an external object which is not\n-   currently in scope.  This is either a built-in declaration of\n-   a library function, before a real declaration has been seen,\n-   or a declaration that appeared in an inner scope that has ended.  */\n-#define C_DECL_INVISIBLE(EXP) DECL_LANG_FLAG_3 (EXP)\n+/* For any decl, nonzero if it is bound in the externals scope and\n+   pop_scope mustn't chain it into any higher block.  */\n+#define C_DECL_IN_EXTERNAL_SCOPE(EXP) DECL_LANG_FLAG_3 (EXP)\n+\n+/* For FUNCTION_DECLs, evaluates true if the decl is built-in but has\n+   been declared.  */\n+#define C_DECL_DECLARED_BUILTIN(EXP) DECL_LANG_FLAG_4 (EXP)\n \n /* Nonzero for a decl which either doesn't exist or isn't a prototype.\n    N.B. Could be simplified if all built-in decls had complete prototypes\n@@ -147,11 +128,6 @@ struct lang_type GTY(())\n    without prototypes.  */\n #define TYPE_ACTUAL_ARG_TYPES(NODE) TYPE_BINFO (NODE)\n \n-/* Values for the first parameter to poplevel.  */\n-#define KEEP_NO\t\t0\n-#define KEEP_YES\t1\n-#define KEEP_MAYBE\t2\n-\n /* Save and restore the variables in this file and elsewhere\n    that keep track of the progress of compilation of the current function.\n    Used for nested functions.  */\n@@ -181,9 +157,9 @@ extern int c_in_case_stmt;\n \n extern int global_bindings_p (void);\n extern tree getdecls (void);\n-extern void pushlevel (int);\n+extern void push_scope (void);\n+extern tree pop_scope (void);\n extern void insert_block (tree);\n-extern void set_block (tree);\n extern tree pushdecl (tree);\n extern void c_expand_body (tree);\n \n@@ -203,20 +179,18 @@ extern void finish_decl (tree, tree, tree);\n extern tree finish_enum (tree, tree, tree);\n extern void finish_function (void);\n extern tree finish_struct (tree, tree, tree);\n-extern tree get_parm_info (int);\n+extern tree get_parm_info (bool);\n extern tree grokfield (tree, tree, tree);\n extern tree groktypename (tree);\n extern tree groktypename_in_parm_context (tree);\n extern tree implicitly_declare (tree);\n-extern int  in_parm_level_p (void);\n extern void keep_next_level (void);\n extern tree lookup_name (tree);\n extern void pending_xref_error (void);\n extern void c_push_function_context (struct function *);\n extern void c_pop_function_context (struct function *);\n extern void push_parm_decl (tree);\n extern tree pushdecl_top_level (tree);\n-extern void pushtag (tree, tree);\n extern tree set_array_declarator_type (tree, tree, int);\n extern void shadow_tag (tree);\n extern void shadow_tag_warned (tree, int);\n@@ -230,7 +204,6 @@ extern tree c_begin_compound_stmt (void);\n extern void c_expand_decl_stmt (tree);\n extern void c_static_assembler_name (tree);\n extern tree make_pointer_declarator (tree, tree);\n-extern void merge_translation_unit_decls (void);\n \n /* in c-objc-common.c */\n extern int c_disregard_inline_limits (tree);\n@@ -257,6 +230,7 @@ enum {\n };\n \n extern tree require_complete_type (tree);\n+extern int same_translation_unit_p (tree, tree);\n extern int comptypes (tree, tree, int);\n extern tree c_size_in_bytes (tree);\n extern bool c_mark_addressable (tree);\n@@ -313,6 +287,11 @@ extern int current_function_returns_abnormally;\n \n extern int system_header_p;\n \n+/* True means global_bindings_p should return false even if the scope stack\n+   says we are in file scope.  */\n+\n+extern bool c_override_global_bindings_to_false;\n+\n /* In c-decl.c */\n extern void c_finish_incomplete_decl (tree);\n extern void *get_current_scope (void);"}, {"sha": "2e57ba7ccebbba2f64438e44504bdd0cbadee651", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -51,7 +51,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n static int missing_braces_mentioned;\n \n static tree qualify_type (tree, tree);\n-static int same_translation_unit_p (tree, tree);\n static int tagged_types_tu_compatible_p (tree, tree, int);\n static int comp_target_types (tree, tree, int);\n static int function_types_compatible_p (tree, tree, int);\n@@ -369,9 +368,9 @@ common_type (tree t1, tree t2)\n \n \t/* If both args specify argument types, we must merge the two\n \t   lists, argument by argument.  */\n-\n-\tpushlevel (0);\n-\tdeclare_parm_level ();\n+\t/* Tell global_bindings_p to return false so that variable_size\n+\t   doesn't abort on VLAs in parameter types.  */\n+\tc_override_global_bindings_to_false = true;\n \n \tlen = list_length (p1);\n \tnewargs = 0;\n@@ -434,8 +433,7 @@ common_type (tree t1, tree t2)\n \t  parm_done: ;\n \t  }\n \n-\tpoplevel (0, 0, 0);\n-\n+\tc_override_global_bindings_to_false = false;\n \tt1 = build_function_type (valtype, newargs);\n \t/* ... falls through ...  */\n       }\n@@ -614,11 +612,11 @@ comp_target_types (tree ttl, tree ttr, int reflexive)\n \f\n /* Subroutines of `comptypes'.  */\n \n-/* Determine whether two types derive from the same translation unit.\n-   If the CONTEXT chain ends in a null, that type's context is still\n-   being parsed, so if two types have context chains ending in null,\n+/* Determine whether two trees derive from the same translation unit.\n+   If the CONTEXT chain ends in a null, that tree's context is still\n+   being parsed, so if two trees have context chains ending in null,\n    they're in the same translation unit.  */\n-static int\n+int\n same_translation_unit_p (tree t1, tree t2)\n {\n   while (t1 && TREE_CODE (t1) != TRANSLATION_UNIT_DECL)"}, {"sha": "ccc8339cb5f41b3bc1b1ef6150eb19aa4f05b9f5", "filename": "gcc/coverage.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -902,7 +902,6 @@ create_coverage (void)\n   DECL_RESULT (ctor) = build_decl (RESULT_DECL, NULL_TREE, void_type_node);\n   DECL_UNINLINABLE (ctor) = 1;\n \n-  ctor = lang_hooks.decls.pushdecl (ctor);\n   rest_of_decl_compilation (ctor, 0, 1, 0);\n   announce_function (ctor);\n   current_function_decl = ctor;"}, {"sha": "008aa4adf74358a9683f485f0fba7849ac85169b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -1,3 +1,10 @@\n+2004-03-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 12267, 12391, 12560, 13129, 14114, 14113\n+\t* cp-lang.c (c_reset_state): Delete.\n+\t(push_file_scope, pop_file_scope): New stubs.\n+\t* parser.c (c_parse_file): Call sorry() here if called more than once.\n+\n 2004-03-23  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* typeck.c (build_c_cast): Only look at TREE_CONSTANT_OVERFLOW\n@@ -17,13 +24,13 @@\n \t(dump_simple_decl): Likewise.\n \t(dump_function_decl): Likewise.\n \t(cv_to_string): Likewise.\n-\t(dump_type_prefix): Likewise.  Adjust return void.  \n+\t(dump_type_prefix): Likewise.  Adjust return void.\n \t* cxx-pretty-print.c (pp_cxx_cv_qualifier_seq): Move to\n \tcxx_pretty_print.h.\n \t(pp_cxx_template_keyword_if_needed): Document.\n \t(pp_cxx_qualified_id): Document case FUNCTION_DECL.  Tidy.\n \t(pp_cxx_expression): Handle NON_DEPENDENT_EXPR and\n-\tMUST_NOT_THROW_EXPR.  \n+\tMUST_NOT_THROW_EXPR.\n \n 2004-03-21  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -69,7 +76,7 @@\n \n \t* typeck.c (lookup_destructor): Allow the use of destructors from\n \tbase classes.\n-\t\n+\n 2004-03-19  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* cxx-pretty-print.c (pp_cxx_unqualified_id): Use\n@@ -194,7 +201,7 @@\n \t* pt.c (do_type_instantiation): On systems where weak symbols\n \tdon't go in a static archive's TOC, explicit instantiation of a\n \tclass must imply *explicit* instantiation of its memeber.\n-\t\n+\n 2004-03-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* call.c, cp-tree.h, pt.c: Fix comment typos.\n@@ -203,7 +210,7 @@\n \n \tPR c++/14510\n \t* decl.c (xref_tag): Disregard non-type declarations when\n-\tlooking up a tagged type. \n+\tlooking up a tagged type.\n \n 2004-03-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -294,7 +301,7 @@\n \tPR debug/14079\n \t* name-lookup.c (add_decl_to_level): Add extern variables, as well\n \tas static, to static_decls array.\n-\t\n+\n 2004-03-05  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (list_hash_pieces): s/TYPE_HASH/TREE_HASH/.\n@@ -326,7 +333,7 @@\n \t* parser.c (cp_parser_late_parsing_default_args): Check that there\n \tare no extra tokens after the end of the default-argument\n \texpression.\n-\t\n+\n 2004-03-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14324\n@@ -341,7 +348,7 @@\n \tPR c++/14337\n \t* pt.c (tsubst_qualified_id): Handle dependent qualifying scopes.\n \t(tsubst_expr): Do not call tsubst_copy, even when\n-\tprocessing_template_decl.\t\n+\tprocessing_template_decl.\n \n 2004-03-01  Jeff Law  <law@redhat.com>\n \n@@ -429,7 +436,7 @@\n 2004-02-23  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/14143\n-\t* name-lookup.c\t(arg_assoc_class): Don't look into template \n+\t* name-lookup.c\t(arg_assoc_class): Don't look into template\n \targuments if it is not a primary template.\n \n 2004-02-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n@@ -464,7 +471,7 @@\n 2004-02-19  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n \tPR c++/14181\n-\t* parser.c (cp_parser_new_expression): Parse an ill-formed \n+\t* parser.c (cp_parser_new_expression): Parse an ill-formed\n \tdirect-new-declarator after a parenthesized type-id to emit good\n \tdiagnostic.\n \n@@ -640,7 +647,7 @@\n \twhether or not a friend template is a definition.\n \t(tsubst_decl): Clear DECL_INITIAL for new FUNCTION_DECLs.\n \t* tree.c (build_zc_wrapper): Remove.\n-\t\n+\n 2004-02-12  Zack Weinberg  <zack@codesourcery.com>\n \n \t* cp-lang.c: Don't define LANG_HOOKS_BUILTIN_TYPE_DECLS."}, {"sha": "b0b927b850e9b7e4f55025249e0aaa1df6965b8d", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -388,13 +388,6 @@ cp_var_mod_type_p (tree type)\n   return false;\n }\n \n-/* Stub routine to tell people that this doesn't work yet.  */\n-void\n-c_reset_state (void)\n-{\n-  sorry (\"inter-module optimisations not implemented yet\");\n-}\n-\n /* Construct a C++-aware pretty-printer for CONTEXT.  It is assumed\n    that CONTEXT->printer is an already constructed basic pretty_printer.  */\n static void\n@@ -409,3 +402,14 @@ cxx_initialize_diagnostics (diagnostic_context *context)\n   /* It is safe to free this object because it was previously malloc()'d.  */\n   free (base);\n }\n+\n+/* Stubs to keep c-opts.c happy.  */\n+void\n+push_file_scope (void)\n+{\n+}\n+\n+void\n+pop_file_scope (void)\n+{\n+}"}, {"sha": "e58fda4cc4fa73d35073fee566872b5e6410f1ea", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -15347,7 +15347,6 @@ cp_parser_allow_gnu_extensions_p (cp_parser* parser)\n }\n \n \f\n-\n /* The parser.  */\n \n static GTY (()) cp_parser *the_parser;\n@@ -15360,6 +15359,14 @@ void\n c_parse_file (void)\n {\n   bool error_occurred;\n+  static bool already_called = false;\n+\n+  if (already_called)\n+    {\n+      sorry (\"inter-module optimizations not implemented for C++\");\n+      return;\n+    }\n+  already_called = true;\n \n   the_parser = cp_parser_new ();\n   push_deferring_access_checks (flag_access_control"}, {"sha": "3e15a359333c62d7f3732b65e98fb80676fa153d", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -216,7 +216,7 @@ void\n lhd_clear_binding_stack (void)\n {\n   while (! lang_hooks.decls.global_bindings_p ())\n-    poplevel (0, 0, 0);\n+    lang_hooks.decls.poplevel (0, 0, 0);\n }\n \n /* Type promotion for variable arguments.  */"}, {"sha": "89abaf4c19856c285c54f817d3611fdec324fe6b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -64,8 +64,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"diagnostic.h\"\n #include \"cgraph.h\"\n \n-#define OBJC_VOID_AT_END\tbuild_tree_list (NULL_TREE, void_type_node)\n-\n /* This is the default way of generating a method name.  */\n /* I am not sure it is really correct.\n    Perhaps there's a danger that it will make name conflicts\n@@ -161,7 +159,6 @@ static void generate_ivar_lists (void);\n static void generate_dispatch_tables (void);\n static void generate_shared_structures (void);\n static tree generate_protocol_list (tree);\n-static void generate_forward_declaration_to_string_table (void);\n static void build_protocol_reference (tree);\n \n static tree build_keyword_selector (tree);\n@@ -1238,7 +1235,7 @@ synth_module_prologue (void)\n         = build_function_type (IMP_type,\n                                tree_cons (NULL_TREE, id_type,\n                                           tree_cons (NULL_TREE, selector_type,\n-                                                     OBJC_VOID_AT_END)));\n+                                                     void_list_node)));\n       umsg_decl = builtin_function (TAG_MSGSEND,\n \t\t\t\t    temp_type, 0, NOT_BUILT_IN,\n \t\t\t\t    NULL, NULL_TREE);\n@@ -1248,7 +1245,7 @@ synth_module_prologue (void)\n         = build_function_type (IMP_type,\n                                tree_cons (NULL_TREE, super_type,\n                                           tree_cons (NULL_TREE, selector_type,\n-                                                     OBJC_VOID_AT_END)));\n+                                                     void_list_node)));\n       umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n \t\t\t\t\t  temp_type, 0, NOT_BUILT_IN,\n \t\t\t\t\t  NULL, NULL_TREE);\n@@ -1259,7 +1256,7 @@ synth_module_prologue (void)\n   temp_type = build_function_type (id_type,\n \t\t\t\t   tree_cons (NULL_TREE,\n \t\t\t\t\t      const_string_type_node,\n-\t\t\t\t\t      OBJC_VOID_AT_END));\n+\t\t\t\t\t      void_list_node));\n \n   objc_get_class_decl\n     = builtin_function (TAG_GETCLASS, temp_type, 0, NOT_BUILT_IN,\n@@ -1305,8 +1302,6 @@ synth_module_prologue (void)\n       TREE_USED (UOBJC_SELECTOR_TABLE_decl) = 1;\n     }\n \n-  generate_forward_declaration_to_string_table ();\n-\n   /* Forward declare constant_string_id and constant_string_type.  */\n   if (!constant_string_class_name)\n     constant_string_class_name = default_constant_string_class_name;\n@@ -1877,7 +1872,7 @@ build_module_descriptor (void)\n \t\t\t\t get_identifier (TAG_EXECCLASS),\n \t\t\t\t build_function_type (void_type_node,\n \t\t\t\t\ttree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t   OBJC_VOID_AT_END)));\n+\t\t\t\t\t\t   void_list_node)));\n \t\t\t\t\t\t\n     DECL_EXTERNAL (execclass_decl) = 1;\n     DECL_ARTIFICIAL (execclass_decl) = 1;\n@@ -1892,7 +1887,7 @@ build_module_descriptor (void)\n     start_function (void_list_node_1,\n \t\t    build_nt (CALL_EXPR, init_function_name,\n \t\t\t      tree_cons (NULL_TREE, NULL_TREE,\n-\t\t\t\t\t OBJC_VOID_AT_END),\n+\t\t\t\t\t void_list_node),\n \t\t\t      NULL_TREE),\n \t\t    NULL_TREE);\n     store_parm_decls ();\n@@ -1919,22 +1914,6 @@ build_module_descriptor (void)\n   }\n }\n \n-/* extern const char _OBJC_STRINGS[]; */\n-\n-static void\n-generate_forward_declaration_to_string_table (void)\n-{\n-  tree sc_spec, decl_specs, expr_decl;\n-\n-  sc_spec = tree_cons (NULL_TREE, ridpointers[(int) RID_EXTERN], NULL_TREE);\n-  decl_specs = tree_cons (NULL_TREE, ridpointers[(int) RID_CHAR], sc_spec);\n-\n-  expr_decl\n-    = build_nt (ARRAY_REF, get_identifier (\"_OBJC_STRINGS\"), NULL_TREE);\n-\n-  UOBJC_STRINGS_decl = define_decl (expr_decl, decl_specs);\n-}\n-\n /* Return the DECL of the string IDENT in the SECTION.  */\n \n static tree\n@@ -2699,7 +2678,7 @@ objc_enter_block (void)\n   block = begin_compound_stmt (0);\n #else\n   block = c_begin_compound_stmt ();\n-  pushlevel (0);\n+  push_scope ();\n   clear_last_expr ();\n   add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n #endif\n@@ -2724,7 +2703,7 @@ objc_exit_block (void)\n   finish_compound_stmt (0, block);\n #else\n   scope_stmt = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);\n-  inner = poplevel (KEEP_MAYBE, 1, 0);\n+  inner = pop_scope ();\n \n   SCOPE_STMT_BLOCK (TREE_PURPOSE (scope_stmt))\n \t= SCOPE_STMT_BLOCK (TREE_VALUE (scope_stmt))\n@@ -3331,7 +3310,7 @@ build_objc_exception_stuff (void)\n     = build_function_type (id_type,\n \t\t\t   tree_cons (NULL_TREE,\n \t\t\t\t      build_pointer_type (objc_exception_data_template),\n-\t\t\t\t      OBJC_VOID_AT_END));\n+\t\t\t\t      void_list_node));\n   objc_exception_extract_decl\n     = builtin_function (TAG_EXCEPTIONEXTRACT, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* void objc_exception_try_enter(struct _objc_exception_data *); */\n@@ -3340,7 +3319,7 @@ build_objc_exception_stuff (void)\n     = build_function_type (void_type_node,\n \t\t\t   tree_cons (NULL_TREE,\n \t\t\t\t      build_pointer_type (objc_exception_data_template),\n-\t\t\t\t      OBJC_VOID_AT_END));\n+\t\t\t\t      void_list_node));\n   objc_exception_try_enter_decl\n     = builtin_function (TAG_EXCEPTIONTRYENTER, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n   objc_exception_try_exit_decl\n@@ -3350,7 +3329,7 @@ build_objc_exception_stuff (void)\n   /* void objc_sync_exit(id); */\n   temp_type = build_function_type (void_type_node,\n \t\t\t\t   tree_cons (NULL_TREE, id_type,\n-\t\t\t\t\t      OBJC_VOID_AT_END));\n+\t\t\t\t\t      void_list_node));\n   objc_exception_throw_decl\n     = builtin_function (TAG_EXCEPTIONTHROW, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_ATTRIBUTES (objc_exception_throw_decl)\n@@ -3363,7 +3342,7 @@ build_objc_exception_stuff (void)\n   temp_type = build_function_type (integer_type_node,\n \t\t\t\t   tree_cons (NULL_TREE, id_type,\n \t\t\t\t\t      tree_cons (NULL_TREE, id_type,\n-\t\t\t\t\t\t\t OBJC_VOID_AT_END)));\n+\t\t\t\t\t\t\t void_list_node)));\n   objc_exception_match_decl\n     = builtin_function (TAG_EXCEPTIONMATCH, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n \t\n@@ -5463,7 +5442,7 @@ get_arg_type_list (tree meth, int context, int superflag)\n \n   if (METHOD_ADD_ARGS (meth) == objc_ellipsis_node)\n     /* We have a `, ...' immediately following the selector,\n-       finalize the arglist...simulate get_parm_info (0).  */\n+       finalize the arglist...simulate get_parm_info (true).  */\n     ;\n   else if (METHOD_ADD_ARGS (meth))\n     {\n@@ -5472,8 +5451,8 @@ get_arg_type_list (tree meth, int context, int superflag)\n       chainon (arglist, add_arg_list);\n     }\n   else\n-    /* finalize the arglist...simulate get_parm_info (1) */\n-    chainon (arglist, OBJC_VOID_AT_END);\n+    /* finalize the arglist...simulate get_parm_info (false) */\n+    chainon (arglist, void_list_node);\n \n   return arglist;\n }\n@@ -7539,7 +7518,8 @@ start_method_def (tree method)\n   UOBJC_SUPER_decl = NULL_TREE;\n \n   /* Must be called BEFORE start_function.  */\n-  pushlevel (0);\n+  push_scope ();\n+  declare_parm_level ();\n \n   /* Generate prototype declarations for arguments...\"new-style\".  */\n   synth_self_and_ucmd_args ();\n@@ -7819,17 +7799,17 @@ continue_method_def (void)\n \n   if (METHOD_ADD_ARGS (objc_method_context) == objc_ellipsis_node)\n     /* We have a `, ...' immediately following the selector.  */\n-    parmlist = get_parm_info (0);\n+    parmlist = get_parm_info (/*ellipsis=*/true);\n   else\n-    parmlist = get_parm_info (1); /* place a `void_at_end' */\n+    parmlist = get_parm_info (/*ellipsis=*/false);\n \n #ifndef OBJCPLUS\n   /* Set self_decl from the first argument...this global is used by\n      build_ivar_reference calling build_indirect_ref.  */\n   self_decl = TREE_PURPOSE (parmlist);\n #endif /* !OBJCPLUS */\n \n-  poplevel (0, 0, 0);\n+  pop_scope ();\n   really_start_method (objc_method_context, parmlist);\n   store_parm_decls ();\n }\n@@ -8801,8 +8781,6 @@ finish_objc (void)\n       objc_implementation_context = NULL_TREE;\n     }\n \n-  generate_forward_declaration_to_string_table ();\n-\n   /* Process the static instances here because initialization of objc_symtab\n      depends on them.  */\n   if (objc_static_instances)"}, {"sha": "db7eeca514143d85c65ee670889719254ffa03ec", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -234,7 +234,6 @@ enum objc_tree_index\n     OCTI_MCLS_DECL,\n     OCTI_SEL_TABLE_DECL,\n     OCTI_MODULES_DECL,\n-    OCTI_STRG_DECL,\n \n     OCTI_INTF_CTX,\n     OCTI_IMPL_CTX,\n@@ -360,7 +359,6 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define UOBJC_METACLASS_decl\t\tobjc_global_trees[OCTI_MCLS_DECL]\n #define UOBJC_SELECTOR_TABLE_decl\tobjc_global_trees[OCTI_SEL_TABLE_DECL]\n #define UOBJC_MODULES_decl\t\tobjc_global_trees[OCTI_MODULES_DECL]\n-#define UOBJC_STRINGS_decl\t\tobjc_global_trees[OCTI_STRG_DECL]\n \n /* The following are used when compiling a class implementation.\n    implementation_template will normally be an interface, however if"}, {"sha": "877867ac39ddaf40930fcce16266477a9e53c649", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -55,6 +55,8 @@ enum c_language_kind c_language = clk_objc;\n #define LANG_HOOKS_SAFE_FROM_P c_safe_from_p\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n+#undef LANG_HOOKS_CLEAR_BINDING_STACK\n+#define LANG_HOOKS_CLEAR_BINDING_STACK lhd_do_nothing\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n #undef LANG_HOOKS_MARK_ADDRESSABLE\n@@ -130,6 +132,19 @@ enum c_language_kind c_language = clk_objc;\n #undef LANG_HOOKS_TYPE_PROMOTES_TO\n #define LANG_HOOKS_TYPE_PROMOTES_TO c_type_promotes_to\n \n+/* The C front end's scoping structure is very different from\n+   that expected by the language-independent code; it is best\n+   to disable all of pushlevel, poplevel, set_block, and getdecls.\n+   This means it must also provide its own write_globals.  */\n+\n+#undef LANG_HOOKS_PUSHLEVEL\n+#define LANG_HOOKS_PUSHLEVEL lhd_do_nothing_i\n+#undef LANG_HOOKS_POPLEVEL\n+#define LANG_HOOKS_POPLEVEL lhd_do_nothing_iii_return_null_tree\n+#undef LANG_HOOKS_SET_BLOCK\n+#define LANG_HOOKS_SET_BLOCK lhd_do_nothing_t\n+#undef LANG_HOOKS_GETDECLS\n+#define LANG_HOOKS_GETDECLS lhd_return_null_tree_v\n #undef LANG_HOOKS_WRITE_GLOBALS\n #define LANG_HOOKS_WRITE_GLOBALS c_write_global_declarations\n "}, {"sha": "de52f548e686e747d320833d102f47bbadab7286", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -1,3 +1,15 @@\n+2004-03-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 12267, 12391, 12560, 13129, 14114, 14113\n+\t* gcc.dg/Wold-style-definition-1.c, gcc.dg/builtins-30.c\n+\t* gcc.dg/unused-4.c, gcc.dg/noncompile/label-1.c\n+\t* gcc.dg/noncompile/label-lineno-1.c, objc.dg/naming-1.m:\n+\tAdjust error regexps.\n+\t* gcc.dg/Wshadow-2.c, gcc.dg/noncompile/incomplete-3.c\n+\t* gcc.dg/noncompile/undeclared-1.c: New test cases.\n+\t* gcc.dg/decl-5.c, gcc.dg/redecl-1.c: Remove XFAIL.\n+\t* gcc.dg/local1.c: Add explanatory comment.\n+\n 2004-03-23  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/14669\n@@ -55,11 +67,11 @@\n \t* g++.dg/template/spec13.C: New test.\n \n \t* g++.dg/lookup/using11.C: New test.\n-\t\n+\n \t* g++.dg/lookup/koenig3.C: New test.\n \n \t* g++.dg/template/operator2.C: New test.\n-\t\n+\n \t* g++.dg/expr/dtor3.C: New test.\n \t* g++.old-deja/g++.brendan/crash15.C: Remove incorrect dg-error\n \tmarker."}, {"sha": "aa016338b5e8472f9d2caf6f3e3bfd1b9c3dc152", "filename": "gcc/testsuite/gcc.dg/Wold-style-definition-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2FWold-style-definition-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2FWold-style-definition-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWold-style-definition-1.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -5,19 +5,19 @@\n /* { dg-options \"-Wold-style-definition\" } */\n \n void\n-bar (a) int a; { } /* { dg-warning \"old-style parameter declaration\" } */\n+bar (a) int a; { } /* { dg-warning \"old-style function definition\" } */\n \n-void bar1 () {} /* { dg-warning \"old-style parameter declaration\" } */\n+void bar1 () {} /* { dg-warning \"old-style function definition\" } */\n \n extern void bar2 (void);\n \n-void bar2 () {} /* { dg-warning \"old-style parameter declaration\" } */\n+void bar2 () {} /* { dg-warning \"old-style function definition\" } */\n \n extern void bar3 (int);\n \n-void bar3 (a) {} /* { dg-warning \"old-style parameter declaration\" } */\n+void bar3 (a) {} /* { dg-warning \"old-style function definition\" } */\n \n-void bar4 (a) {} /* { dg-warning \"old-style parameter declaration\" } */\n+void bar4 (a) {} /* { dg-warning \"old-style function definition\" } */\n \n void bar5 (int a) {}\n "}, {"sha": "b0c051271eed7d1ac9e5b046679388eabf481d17", "filename": "gcc/testsuite/gcc.dg/Wshadow-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWshadow-2.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -0,0 +1,10 @@\n+/* Bogus warning for a double declaration of the same extern variable,\n+   first at file scope, then at block scope.  PR 13129.  */\n+\n+/* { dg-options \"-Wshadow\" } */\n+\n+extern struct foo bar;\n+void dummy()\n+{\n+  extern struct foo bar;  /* { dg-bogus \"shadows\" } */\n+}"}, {"sha": "7c700c514dcecb73c5cc89fc57015119ca236b85", "filename": "gcc/testsuite/gcc.dg/builtins-30.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-30.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -7,20 +7,20 @@ extern double strtod (const char *, char **);\n /* A built-in function may be overridden by an old-style definition\n    specifying too few arguments... */\n double cos ()\n-{  /* { dg-warning \"shadowing built-in\" } */\n+{  /* { dg-warning \"shadows a built-in\" } */\n   return strtod (\"nan\", 0);\n }\n \n /* the right number, but the wrong type, arguments... */\n double sin (foo)\n-     int foo UNUSED;  /* { dg-warning \"shadowing built-in\" } */\n+     int foo UNUSED;  /* { dg-warning \"shadows a built-in\" } */\n {\n   return strtod (\"nan\", 0);\n }\n \n /* or too many arguments.  */\n long double cosl (foo, bar)\n-     long double foo UNUSED;  /* { dg-warning \"shadowing built-in\" } */\n+     const char *foo UNUSED;  /* { dg-warning \"shadows a built-in\" } */\n      int bar UNUSED;\n {\n   return strtod (\"nan\", 0);"}, {"sha": "9b7782464598bb47f86f24223ea1b87c965271d5", "filename": "gcc/testsuite/gcc.dg/decl-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-5.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -10,7 +10,7 @@ void a()\n {\n   void c();\n   c();\n-} /* { dg-bogus \"error\" \"PR c/14114\" { xfail *-*-* } } */\n+}\n \n void b()\n {"}, {"sha": "9d6fdb167523814c53431c1378f5352d2ed28983", "filename": "gcc/testsuite/gcc.dg/local1.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Flocal1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Flocal1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flocal1.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -1,3 +1,19 @@\n+/* This is allowed, with the effect that the 'extern' declaration at block\n+   scope refers to the same object as the 'static' declaration at file scope.\n+\n+      C90 6.1.2.2 [as corrected by TC1], C99 6.2.2:\n+\n+          For an identifier declared with the storage-class specifier\n+          extern in a scope in which a prior declaration of that\n+          identifier is visible, if the prior declaration specifies\n+          internal or external linkage, the linkage of the identifier at\n+          the later daclaration is the same as the linkage specified at\n+          the prior declaration.  If no prior declaration is visible,\n+          or if the prior declaration specifies no linkage, then the\n+          identifer has external linkage.\n+\n+   This is PR 14366.  */\n+\n static int i;\n \n extern int i;"}, {"sha": "735ef465b38a5265fa51a5c0bcd270a59ec903b5", "filename": "gcc/testsuite/gcc.dg/noncompile/incomplete-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fincomplete-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fincomplete-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fincomplete-3.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -0,0 +1,9 @@\n+/* Both occurrences of \"c\" should get diagnostics.  PR 12391.  */\n+typedef struct { int a; } b_t;\n+\n+int foo (void)\n+{\n+  b_t d;\n+  struct b_t *c = &d;\t/* { dg-warning \"incompatible pointer type\" } */\n+  c->a;\t\t\t/* { dg-error \"incomplete type\" } */\n+}"}, {"sha": "e9bde7b3b7b6ffdd9ac8830323b9cc86ebe91628", "filename": "gcc/testsuite/gcc.dg/noncompile/label-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-1.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -28,15 +28,15 @@ void c(void)\n /* can't have two labels with the same name in the same function */\n void d(void)\n {\n- l: dummy();  /* { dg-error \"previously defined\" \"prev def same scope\" } */\n+ l: dummy();  /* { dg-error \"previous definition\" \"prev def same scope\" } */\n  l: dummy();  /* { dg-error \"duplicate label\" \"dup label same scope\" } */\n  goto l;\n }\n \n /* even at different scopes */\n void e(void)\n {\n- l: dummy();\t/* { dg-error \"previously defined\"  \"prev def diff scope\" } */\n+ l: dummy();\t/* { dg-error \"previous definition\"  \"prev def diff scope\" } */\n   {\n   l: dummy();\t/* { dg-error \"duplicate label\" \"dup label diff scope\" } */\n   }\n@@ -150,7 +150,7 @@ void m(void)\n \n void n(void)\n {\n-  __label__ l; /* { dg-error \"previously declared\" \"outer label decl\" } */\n+  __label__ l; /* { dg-error \"previous declaration\" \"outer label decl\" } */\n   void nest(void)\n     {\n     l: goto l;  /* { dg-error \"duplicate label\" \"inner label defn\" } */"}, {"sha": "76d4d96edaf9ee7a947bf2752cc715d93fca3869", "filename": "gcc/testsuite/gcc.dg/noncompile/label-lineno-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-lineno-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-lineno-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Flabel-lineno-1.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -4,7 +4,7 @@\n void\n foo(int i)\n {\n- my_label: /* { dg-error \"previously defined\" \"prev label\" } */\n+ my_label: /* { dg-error \"previous definition\" \"prev label\" } */\n \n   i++;\n "}, {"sha": "5bb7c2a4df900eb99876dca7c3f2a0f57dff8e0d", "filename": "gcc/testsuite/gcc.dg/noncompile/undeclared-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fundeclared-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fundeclared-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fundeclared-1.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -0,0 +1,8 @@\n+/* Test for no ICE with an undeclared identifier in an enum in old-style\n+   parameter decls.  PR 12560.  */\n+/* { dg-options \"-w\" } */\n+\n+foo(c)\n+     enum { a = b } c;  /* { dg-error \"undeclared|for each\" } */\n+{\n+}"}, {"sha": "14877667e91d7fc9763e365c287c10a5e37b7a78", "filename": "gcc/testsuite/gcc.dg/redecl-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -64,7 +64,7 @@ void test4(void)\n \n void prime5(void)\n {\n-  extern double bar5(double);\t/* { dg-error \"previous\" \"\" { xfail *-*-* } } */\n+  extern double bar5(double);\t/* { dg-error \"previous\" \"\" } */\n }\n \n void test5(void)"}, {"sha": "4b33a7fbb698f3e3236c29df5a9a42c48b24c3c4", "filename": "gcc/testsuite/gcc.dg/unused-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Funused-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fgcc.dg%2Funused-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funused-4.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wunused -O3\" } */\n \n-static const int i = 0;\n+static const int i = 0;\t\t/* { dg-warning \"unused variable\" } */\n static void f() { }\t\t/* { dg-warning \"defined but not used\" } */\n static inline void g() { }"}, {"sha": "1be7eba664c6df6bfbd81a49621eefb0d932e9b6", "filename": "gcc/testsuite/objc.dg/naming-1.m", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fnaming-1.m?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -9,9 +9,7 @@ void foo(void)\n {\n         int View;\t/* ok */\n         View = 1;\t/* ok */\n-\tView *view;\t/* { dg-error \"`view' undeclared\" } */\n-\t/* { dg-error \"is reported only once\" \"\" { target *-*-* } 12 } */\n-\t/* { dg-error \"function it appears in\" \"\" { target *-*-* } 12 } */\n+\tView *view;\t/* { dg-error \"undeclared|only once|it appears\" } */\n }\n \n void bar(void)"}, {"sha": "eca5f20dd7b48aa6e3d087c3d1d3c388d13e58f2", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f75fbaf754292f4e64bef542d23e9e66ae500635/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f75fbaf754292f4e64bef542d23e9e66ae500635", "patch": "@@ -941,11 +941,23 @@ chain_member (tree elem, tree chain)\n int\n list_length (tree t)\n {\n-  tree tail;\n+  tree p = t;\n+#ifdef ENABLE_TREE_CHECKING\n+  tree q = t;\n+#endif\n   int len = 0;\n \n-  for (tail = t; tail; tail = TREE_CHAIN (tail))\n-    len++;\n+  while (p)\n+    {\n+      p = TREE_CHAIN (p);\n+#ifdef ENABLE_TREE_CHECKING\n+      if (len % 2)\n+\tq = TREE_CHAIN (q);\n+      if (p == q)\n+\tabort ();\n+#endif\n+      len++;\n+    }\n \n   return len;\n }"}]}