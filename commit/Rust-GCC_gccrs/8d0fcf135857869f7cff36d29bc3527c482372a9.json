{"sha": "8d0fcf135857869f7cff36d29bc3527c482372a9", "node_id": "C_kwDOANBUbNoAKDhkMGZjZjEzNTg1Nzg2OWY3Y2ZmMzZkMjliYzM1MjdjNDgyMzcyYTk", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-24T01:01:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-29T18:22:27Z"}, "message": "c++: check completeness after auto deduction [PR80351]\n\nNormally we check for incomplete type in start_decl, but that obviously\ndoesn't work for auto variables. Thanks to Pokechu22 for the analysis and\ntestcases:\n\n\"When cp_finish_decl calls cp_apply_type_quals_to_decl on a const auto or\nconstexpr auto variable, the type might not be complete the first time\n(this happened when auto deduces to an initializer_list).\ncp_apply_type_quals_to_decl removes the const qualifier if the type is\nnot complete, which is appropriate for grokdeclarator, on the assumption\nthat the type will be complete when called by cp_finish_decl.\"\n\n\tPR c++/80351\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (cp_finish_decl): Check completeness of deduced type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-77482.C: Adjust message.\n\t* g++.dg/cpp1y/auto-fn27.C: Likewise.\n\t* g++.dg/cpp1y/lambda-generic-variadic22.C: Likewise.\n\t* g++.dg/cpp1z/decomp54.C: Likewise.\n\t* g++.dg/cpp0x/initlist-const1.C: New test.\n\t* g++.dg/warn/Wunused-var-37.C: New test.\n\t* g++.dg/warn/Wunused-var-38.C: New test.\n\t* g++.dg/warn/Wunused-var-39.C: New test.", "tree": {"sha": "231843bc29a0076c60ca961aec1124b888156ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/231843bc29a0076c60ca961aec1124b888156ba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d0fcf135857869f7cff36d29bc3527c482372a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0fcf135857869f7cff36d29bc3527c482372a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d0fcf135857869f7cff36d29bc3527c482372a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d0fcf135857869f7cff36d29bc3527c482372a9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8b45e8bc8246bd141dad65f571a3e0cc499c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8b45e8bc8246bd141dad65f571a3e0cc499c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8b45e8bc8246bd141dad65f571a3e0cc499c6b"}], "stats": {"total": 124, "additions": 119, "deletions": 5}, "files": [{"sha": "45206c236c1cabed940f22d9c3daa71d1df05f83", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -8129,6 +8129,17 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t  TREE_TYPE (decl) = error_mark_node;\n \t  return;\n \t}\n+      /* As in start_decl_1, complete so TREE_READONLY is set properly.  */\n+      if (!processing_template_decl\n+\t  && !type_uses_auto (type)\n+\t  && !COMPLETE_TYPE_P (complete_type (type)))\n+\t{\n+\t  error_at (location_of (decl),\n+\t\t    \"deduced type %qT for %qD is incomplete\", type, decl);\n+\t  cxx_incomplete_type_inform (type);\n+\t  TREE_TYPE (decl) = error_mark_node;\n+\t  return;\n+\t}\n       cp_apply_type_quals_to_decl (cp_type_quals (type), decl);\n     }\n "}, {"sha": "bed66c7fa81cf7aef473e82500c91c1acc59d0f1", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-77482.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-77482.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-77482.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-77482.C?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -3,4 +3,4 @@\n \n constexpr auto x;\t// { dg-error \"declaration\\[^\\n\\r]*has no initializer\" }\n extern struct S s;\n-constexpr auto y = s;\t// { dg-error \"has incomplete type\" }\n+constexpr auto y = s;\t// { dg-error \"incomplete\" }"}, {"sha": "de807316be6c1f351ceaf3704077f4e39883f041", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-const1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-const1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-const1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-const1.C?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <initializer_list>\n+\n+const auto x = { 1, 2 };\n+\n+// { dg-final { scan-assembler-not {\\.data} } }"}, {"sha": "b22647a38dee5c46d7be5418af177250c884e932", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn27.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn27.C?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -31,7 +31,7 @@ F<T>::bar (const G &)\n {\n   auto s = I;\n   typedef decltype (s) L;\n-  auto u =[&](L) { auto t = foo (J::K (), 0); }; // { dg-error \"25:declared void\" }\n+  auto u =[&](L) { auto t = foo (J::K (), 0); }; // { dg-error \"25:incomplete|void\" }\n }\n struct B {\n   typedef int G;"}, {"sha": "9c02d0715c11c6b29414e786047e634a1b08ecb4", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic22.C?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -4,7 +4,7 @@\n template <typename T>\n auto f (T)\n {\n-  auto a = [](auto ... i)\t// { dg-prune-output \"incomplete type\" }\n+  auto a = [](auto ... i)\t// { dg-prune-output \"incomplete\" }\n   {\n     int x[][i] = { 0 };\t\t// { dg-error \"not expanded\" }\n   }();"}, {"sha": "1094329e69d5a2d023cf4a989980501078ad3a94", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp54.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp54.C?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -3,9 +3,9 @@\n // { dg-options \"\" }\n \n extern int a[];\n-auto [b] { a };\t// { dg-error \"has incomplete type\" }\n+auto [b] { a };\t// { dg-error \"incomplete\" }\n \t\t// { dg-warning \"only available with\" \"\" { target c++14_down } .-1 }\n-auto [c] = a;\t// { dg-error \"has incomplete type\" }\n+auto [c] = a;\t// { dg-error \"incomplete\" }\n \t\t// { dg-warning \"only available with\" \"\" { target c++14_down } .-1 }\n extern int d[0];\n auto [e] { d };\t// { dg-error \"too many initializers for\" }"}, {"sha": "54e76ac4e1171062916b1aba979dded636c37da3", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-37.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-37.C?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -0,0 +1,64 @@\n+// Tangentially to PR c++/80351\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-Wunused-variable\" }\n+#include <initializer_list>\n+\n+// Warnings:\n+static int           int_s1  = 0; // { dg-warning \"defined but not used\" }\n+static int           int_s2  = 0; // { dg-warning \"defined but not used\" }\n+inline static int    int_is1 = 0; // { dg-warning \"defined but not used\" }\n+inline static int    int_is2 = 0; // { dg-warning \"defined but not used\" }\n+// No warnings:\n+constexpr static int int_cs1 = 0; // { dg-bogus \"defined but not used\" }\n+constexpr static int int_cs2 = 0; // { dg-bogus \"defined but not used\" }\n+int                  int_1   = 0; // { dg-bogus \"defined but not used\" }\n+int                  int_2   = 0; // { dg-bogus \"defined but not used\" }\n+inline int           int_i1  = 0; // { dg-bogus \"defined but not used\" }\n+inline int           int_i2  = 0; // { dg-bogus \"defined but not used\" }\n+constexpr int        int_c1  = 0; // { dg-bogus \"defined but not used\" }\n+constexpr int        int_c2  = 0; // { dg-bogus \"defined but not used\" }\n+\n+// Warnings:\n+static auto           int_as1  = 0; // { dg-warning \"defined but not used\" }\n+static auto           int_as2  = 0; // { dg-warning \"defined but not used\" }\n+inline static auto    int_ais1 = 0; // { dg-warning \"defined but not used\" }\n+inline static auto    int_ais2 = 0; // { dg-warning \"defined but not used\" }\n+// No warnings:\n+constexpr static auto int_acs1 = 0; // { dg-bogus \"defined but not used\" }\n+constexpr static auto int_acs2 = 0; // { dg-bogus \"defined but not used\" }\n+auto                  int_a1   = 0; // { dg-bogus \"defined but not used\" }\n+auto                  int_a2   = 0; // { dg-bogus \"defined but not used\" }\n+inline auto           int_ai1  = 0; // { dg-bogus \"defined but not used\" }\n+inline auto           int_ai2  = 0; // { dg-bogus \"defined but not used\" }\n+constexpr auto        int_ac1  = 0; // { dg-bogus \"defined but not used\" }\n+constexpr auto        int_ac2  = 0; // { dg-bogus \"defined but not used\" }\n+\n+// Warnings:\n+static std::initializer_list<int>           il_s1  = {0, 1}; // { dg-warning \"defined but not used\" }\n+static std::initializer_list<int>           il_s2  = {0, 1}; // { dg-warning \"defined but not used\" }\n+inline static std::initializer_list<int>    il_is1 = {0, 1}; // { dg-warning \"defined but not used\" }\n+inline static std::initializer_list<int>    il_is2 = {0, 1}; // { dg-warning \"defined but not used\" }\n+// No warnings:\n+constexpr static std::initializer_list<int> il_cs1 = {0, 1}; // { dg-bogus \"defined but not used\" }\n+constexpr static std::initializer_list<int> il_cs2 = {0, 1}; // { dg-bogus \"defined but not used\" }\n+std::initializer_list<int>                  il_1   = {0, 1}; // { dg-bogus \"defined but not used\" }\n+std::initializer_list<int>                  il_2   = {0, 1}; // { dg-bogus \"defined but not used\" }\n+inline std::initializer_list<int>           il_i1  = {0, 1}; // { dg-bogus \"defined but not used\" }\n+inline std::initializer_list<int>           il_i2  = {0, 1}; // { dg-bogus \"defined but not used\" }\n+constexpr std::initializer_list<int>        il_c1  = {0, 1}; // { dg-bogus \"defined but not used\" }\n+constexpr std::initializer_list<int>        il_c2  = {0, 1}; // { dg-bogus \"defined but not used\" }\n+\n+// Warnings:\n+static auto           il_as1  = {0, 1}; // { dg-warning \"defined but not used\" }\n+static auto           il_as2  = {0, 1}; // { dg-warning \"defined but not used\" }\n+inline static auto    il_ais1 = {0, 1}; // { dg-warning \"defined but not used\" }\n+inline static auto    il_ais2 = {0, 1}; // { dg-warning \"defined but not used\" }\n+// No warnings:\n+constexpr static auto il_acs1 = {0, 1}; // { dg-bogus \"defined but not used\" }\n+constexpr static auto il_acs2 = {0, 1}; // { dg-bogus \"defined but not used\" }\n+auto                  il_a1   = {0, 1}; // { dg-bogus \"defined but not used\" }\n+auto                  il_a2   = {0, 1}; // { dg-bogus \"defined but not used\" }\n+inline auto           il_ai1  = {0, 1}; // { dg-bogus \"defined but not used\" }\n+inline auto           il_ai2  = {0, 1}; // { dg-bogus \"defined but not used\" }\n+constexpr auto        il_ac1  = {0, 1}; // { dg-bogus \"defined but not used\" }\n+constexpr auto        il_ac2  = {0, 1}; // { dg-bogus \"defined but not used\" }"}, {"sha": "3d34bc8e8c13fb23c0bca3456ef1f401bfc7e1ac", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-38.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-38.C?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/80351\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wunused-variable\" }\n+#include <initializer_list>\n+\n+constexpr auto int_1 = 1; // { dg-bogus \"defined but not used\" }\n+constexpr auto int_2 = 2; // { dg-bogus \"defined but not used\" }\n+\n+constexpr auto il_int_1 = {3, 3}; // { dg-bogus \"defined but not used\" \"Triggered by PR80351\" }\n+constexpr auto il_int_2 = {4, 4}; // { dg-bogus \"defined but not used\" \"Not triggered by PR80351\" }\n+\n+constexpr auto il_uint_1 = {5u, 5u}; // { dg-bogus \"defined but not used\" \"Triggered by PR80351\" }\n+constexpr auto il_uint_2 = {6u, 6u}; // { dg-bogus \"defined but not used\" \"Not triggered by PR80351\" }\n+\n+constexpr auto uint_1 = 7u; // { dg-bogus \"defined but not used\" }\n+constexpr auto uint_2 = 8u; // { dg-bogus \"defined but not used\" }"}, {"sha": "d25a74c43c2198af928df79bb7641f82cd464fb4", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-39.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d0fcf135857869f7cff36d29bc3527c482372a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-39.C?ref=8d0fcf135857869f7cff36d29bc3527c482372a9", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/80351\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wunused-variable\" }\n+#include <initializer_list>\n+\n+const auto int_1 = 1; // { dg-bogus \"defined but not used\" }\n+const auto int_2 = 2; // { dg-bogus \"defined but not used\" }\n+\n+const auto il_int_1 = {3, 3}; // { dg-bogus \"defined but not used\" \"Triggered by PR80351\" }\n+const auto il_int_2 = {4, 4}; // { dg-bogus \"defined but not used\" \"Not triggered by PR80351\" }\n+\n+const auto il_uint_1 = {5u, 5u}; // { dg-bogus \"defined but not used\" \"Triggered by PR80351\" }\n+const auto il_uint_2 = {6u, 6u}; // { dg-bogus \"defined but not used\" \"Not triggered by PR80351\" }\n+\n+const auto uint_1 = 7u; // { dg-bogus \"defined but not used\" }\n+const auto uint_2 = 8u; // { dg-bogus \"defined but not used\" }"}]}