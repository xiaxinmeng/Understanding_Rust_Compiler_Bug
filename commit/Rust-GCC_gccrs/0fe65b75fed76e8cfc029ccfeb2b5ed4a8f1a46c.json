{"sha": "0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlNjViNzVmZWQ3NmU4Y2ZjMDI5Y2NmZWIyYjVlZDRhOGYxYTQ2Yw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-15T13:51:56Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-15T13:51:56Z"}, "message": "predicates.md (register_or_constm1_operand): New.\n\n        * config/i386/predicates.md (register_or_constm1_operand): New.\n        * config/i386/sse.md (unspec): Add UNSPEC_UNSIGNED_PCMP, UNSPEC_TESTM,\n        UNSPEC_TESTNM, UNSPEC_VTERNLOG, UNSPEC_ALIGN, UNSPEC_CONFLICT,\n        UNSPEC_MASKED_EQ, UNSPEC_MASKED_GT, UNSPEC_GATHER_PREFETCH,\n        UNSPEC_SCATTER_PREFETCH\n        (VI48_512): New.\n        (avx512f_ucmp<mode>3): Ditto.\n        (avx512f_vternlog<mode>): Ditto.\n        (avx512f_align<mode>): Ditto.\n        (<shift_insn><mode>3): Ditto.\n        (avx512f_<rotate>v<mode>): Ditto.\n        (avx512f_<rotate><mode>): Ditto.\n        (avx512f_eq<mode>3): Ditto.\n        (avx512f_eq<mode>3_1): Ditto.\n        (avx512f_gt<mode>3): Ditto.\n        (avx512f_testm<mode>3): Ditto.\n        (avx512f_testnm<mode>3): Ditto.\n        (avx512pf_gatherpf<mode>): Ditto.\n        (*avx512pf_gatherpf<mode>_mask): Ditto.\n        (*avx512pf_gatherpf<mode>): Ditto.\n        (avx512pf_scatterpf<mode>): Ditto.\n        (*avx512pf_scatterpf<mode>_mask): Ditto.\n        (*avx512pf_scatterpf<mode>): Ditto.\n        (avx512f_vec_dup_gpr<mode>): Ditto.\n        (clz<mode>2): Ditto.\n        (conflict<mode>): Ditto.\n        (REDUC_SMINMAX_MODE): Extened with wider modes.\n        (reduc_<code>_<mode>): Ditto.\n        (vlshr<mode>3): Ditto.\n        (vashl<mode>3): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203605", "tree": {"sha": "4237a4fb00bd4c12a7b9704a46ca53cdc9efac3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4237a4fb00bd4c12a7b9704a46ca53cdc9efac3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c/comments", "author": null, "committer": null, "parents": [{"sha": "ab931c7111e8221b8182ce9caf130cb5cdd11e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab931c7111e8221b8182ce9caf130cb5cdd11e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab931c7111e8221b8182ce9caf130cb5cdd11e15"}], "stats": {"total": 391, "additions": 390, "deletions": 1}, "files": [{"sha": "a492c8e3580384de27c3a0ce194d50958aa5759c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "patch": "@@ -1,3 +1,44 @@\n+2013-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/predicates.md (register_or_constm1_operand): New.\n+\t* config/i386/sse.md (unspec): Add UNSPEC_UNSIGNED_PCMP, UNSPEC_TESTM,\n+\tUNSPEC_TESTNM, UNSPEC_VTERNLOG, UNSPEC_ALIGN, UNSPEC_CONFLICT,\n+\tUNSPEC_MASKED_EQ, UNSPEC_MASKED_GT, UNSPEC_GATHER_PREFETCH,\n+\tUNSPEC_SCATTER_PREFETCH\n+\t(VI48_512): New.\n+\t(avx512f_ucmp<mode>3): Ditto.\n+\t(avx512f_vternlog<mode>): Ditto.\n+\t(avx512f_align<mode>): Ditto.\n+\t(<shift_insn><mode>3): Ditto.\n+\t(avx512f_<rotate>v<mode>): Ditto.\n+\t(avx512f_<rotate><mode>): Ditto.\n+\t(avx512f_eq<mode>3): Ditto.\n+\t(avx512f_eq<mode>3_1): Ditto.\n+\t(avx512f_gt<mode>3): Ditto.\n+\t(avx512f_testm<mode>3): Ditto.\n+\t(avx512f_testnm<mode>3): Ditto.\n+\t(avx512pf_gatherpf<mode>): Ditto.\n+\t(*avx512pf_gatherpf<mode>_mask): Ditto.\n+\t(*avx512pf_gatherpf<mode>): Ditto.\n+\t(avx512pf_scatterpf<mode>): Ditto.\n+\t(*avx512pf_scatterpf<mode>_mask): Ditto.\n+\t(*avx512pf_scatterpf<mode>): Ditto.\n+\t(avx512f_vec_dup_gpr<mode>): Ditto.\n+\t(clz<mode>2): Ditto.\n+\t(conflict<mode>): Ditto.\n+\t(REDUC_SMINMAX_MODE): Extened with wider modes.\n+\t(reduc_<code>_<mode>): Ditto.\n+\t(vlshr<mode>3): Ditto.\n+\t(vashl<mode>3): Ditto.\n+\n 2013-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "aeebb3dda5f2abf86c18e8ccb4cde2a821a8cbec", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "patch": "@@ -1332,3 +1332,9 @@\n (define_predicate \"general_vector_operand\"\n   (ior (match_operand 0 \"nonimmediate_operand\")\n        (match_code \"const_vector\")))\n+\n+;; Return true if OP is either -1 constant or stored in register.\n+(define_predicate \"register_or_constm1_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_code \"const_int\")\n+\t    (match_test \"op == constm1_rtx\"))))"}, {"sha": "515326c94aeb9104d575fe2fa239b1a758c203dc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 343, "deletions": 1, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "patch": "@@ -87,7 +87,19 @@\n   ;; For AVX512F support\n   UNSPEC_VPERMI2\n   UNSPEC_VPERMT2\n+  UNSPEC_UNSIGNED_PCMP\n+  UNSPEC_TESTM\n+  UNSPEC_TESTNM\n   UNSPEC_SCATTER\n+  UNSPEC_VTERNLOG\n+  UNSPEC_ALIGN\n+  UNSPEC_CONFLICT\n+  UNSPEC_MASKED_EQ\n+  UNSPEC_MASKED_GT\n+\n+  ;; For AVX512PF support\n+  UNSPEC_GATHER_PREFETCH\n+  UNSPEC_SCATTER_PREFETCH\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -364,6 +376,7 @@\n (define_mode_iterator VI124_256_48_512\n   [V32QI V16HI V8SI (V8DI \"TARGET_AVX512F\") (V16SI \"TARGET_AVX512F\")])\n (define_mode_iterator VI48_256 [V8SI V4DI])\n+(define_mode_iterator VI48_512 [V16SI V8DI])\n \n ;; Int-float size matches\n (define_mode_iterator VI4F_128 [V4SI V4SF])\n@@ -1741,7 +1754,9 @@\n   [(V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")\n    (V8SF \"TARGET_AVX\") (V4DF \"TARGET_AVX\")\n-   (V4SF \"TARGET_SSE\")])\n+   (V4SF \"TARGET_SSE\") (V16SI \"TARGET_AVX512F\")\n+   (V8DI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\")\n+   (V8DF \"TARGET_AVX512F\")])\n \n (define_expand \"reduc_<code>_<mode>\"\n   [(smaxmin:REDUC_SMINMAX_MODE\n@@ -1753,6 +1768,16 @@\n   DONE;\n })\n \n+(define_expand \"reduc_<code>_<mode>\"\n+  [(umaxmin:VI48_512\n+     (match_operand:VI48_512 0 \"register_operand\")\n+     (match_operand:VI48_512 1 \"register_operand\"))]\n+  \"TARGET_AVX512F\"\n+{\n+  ix86_expand_reduc (gen_<code><mode>3, operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_expand \"reduc_<code>_<mode>\"\n   [(umaxmin:VI_256\n      (match_operand:VI_256 0 \"register_operand\")\n@@ -1877,6 +1902,20 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_ucmp<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 3 \"const_0_to_7_operand\" \"n\")]\n+\t  UNSPEC_UNSIGNED_PCMP))]\n+  \"TARGET_AVX512F\"\n+  \"vpcmpu<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"<sse>_comi\"\n   [(set (reg:CCFP FLAGS_REG)\n \t(compare:CCFP\n@@ -5117,6 +5156,31 @@\n   operands[1] = adjust_address (operands[1], DFmode, INTVAL (operands[2]) * 8);\n })\n \n+(define_insn \"avx512f_vternlog<mode>\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VI48_512\n+\t  [(match_operand:VI48_512 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI48_512 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI48_512 3 \"nonimmediate_operand\" \"vm\")\n+\t   (match_operand:SI 4 \"const_0_to_255_operand\")]\n+\t  UNSPEC_VTERNLOG))]\n+  \"TARGET_AVX512F\"\n+  \"vpternlog<ssemodesuffix>\\t{%4, %3, %2, %0|%0, %2, %3, %4}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512f_align<mode>\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n+        (unspec:VI48_512 [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")\n+\t\t\t  (match_operand:SI 3 \"const_0_to_255_operand\")]\n+\t\t\t UNSPEC_ALIGN))]\n+  \"TARGET_AVX512F\"\n+  \"valign<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx512f_rndscale<mode>\"\n   [(set (match_operand:VF_512 0 \"register_operand\" \"=v\")\n        (unspec:VF_512\n@@ -6141,6 +6205,22 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"<shift_insn><mode>3\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v,v\")\n+\t(any_lshift:VI48_512\n+\t  (match_operand:VI48_512 1 \"register_operand\" \"v,m\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"vN,N\")))]\n+  \"TARGET_AVX512F\"\n+  \"vp<vshift><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"avx512f\")\n+   (set_attr \"type\" \"sseishft\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else (match_operand 2 \"const_int_operand\")\n+       (const_string \"1\")\n+       (const_string \"0\")))\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"vec_shl_<mode>\"\n   [(set (match_operand:VI_128 0 \"register_operand\")\n \t(ashift:V1TI\n@@ -6216,6 +6296,25 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_<rotate>v<mode>\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n+\t(any_rotate:VI48_512\n+\t  (match_operand:VI48_512 1 \"register_operand\" \"v\")\n+\t  (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vp<rotate>v<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512f_<rotate><mode>\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n+\t(any_rotate:VI48_512\n+\t  (match_operand:VI48_512 1 \"nonimmediate_operand\" \"vm\")\n+\t  (match_operand:SI 2 \"const_0_to_255_operand\")))]\n+  \"TARGET_AVX512F\"\n+  \"vp<rotate><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI124_256_48_512 0 \"register_operand\")\n@@ -6449,6 +6548,28 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_expand \"avx512f_eq<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_operand:VI48_512 1 \"register_operand\")\n+\t   (match_operand:VI48_512 2 \"nonimmediate_operand\")]\n+\t  UNSPEC_MASKED_EQ))]\n+  \"TARGET_AVX512F\"\n+  \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n+\n+(define_insn \"avx512f_eq<mode>3_1\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_operand:VI48_512 1 \"register_operand\" \"%v\")\n+\t   (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_MASKED_EQ))]\n+  \"TARGET_AVX512F && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n+  \"vpcmpeq<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"*sse4_1_eqv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(eq:V2DI\n@@ -6523,6 +6644,18 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn \"avx512f_gt<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")] UNSPEC_MASKED_GT))]\n+  \"TARGET_AVX512F\"\n+  \"vpcmpgt<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"sse2_gt<mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"=x,x\")\n \t(gt:VI124_128\n@@ -6907,6 +7040,28 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n+(define_insn \"avx512f_testm<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(unspec:<avx512fmaskmode>\n+\t [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n+\t  (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")]\n+\t UNSPEC_TESTM))]\n+  \"TARGET_AVX512F\"\n+  \"vptestm<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\"  \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512f_testnm<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+\t(unspec:<avx512fmaskmode>\n+\t [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n+\t  (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")]\n+\t UNSPEC_TESTNM))]\n+  \"TARGET_AVX512CD\"\n+  \"%vptestnm<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\"  \"<sseinsnmode>\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral element swizzling\n@@ -9863,6 +10018,148 @@\n    (set_attr \"btver2_decode\" \"vector,vector,vector,vector\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"avx512pf_gatherpf<mode>\"\n+  [(unspec\n+     [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n+      (mem:<ssescalarmode>\n+\t(match_par_dup 5\n+\t  [(match_operand 2 \"vsib_address_operand\")\n+\t   (match_operand:VI48_512 1 \"register_operand\")\n+\t   (match_operand:SI 3 \"const1248_operand\")]))\n+      (match_operand:SI 4 \"const_0_to_1_operand\")]\n+     UNSPEC_GATHER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  operands[5]\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[1],\n+\t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n+})\n+\n+(define_insn \"*avx512pf_gatherpf<mode>_mask\"\n+  [(unspec\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n+      (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n+\t[(unspec:P\n+\t   [(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n+\t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n+\t   UNSPEC_VSIBADDR)])\n+      (match_operand:SI 4 \"const_0_to_1_operand\" \"n\")]\n+     UNSPEC_GATHER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  switch (INTVAL (operands[4]))\n+    {\n+    case 0:\n+      return \"vgatherpf0<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n+    case 1:\n+      return \"vgatherpf1<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"*avx512pf_gatherpf<mode>\"\n+  [(unspec\n+     [(const_int -1)\n+      (match_operator:<ssescalarmode> 4 \"vsib_mem_operator\"\n+\t[(unspec:P\n+\t   [(match_operand:P 1 \"vsib_address_operand\" \"p\")\n+\t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n+\t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n+\t   UNSPEC_VSIBADDR)])\n+      (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")]\n+     UNSPEC_GATHER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  switch (INTVAL (operands[3]))\n+    {\n+    case 0:\n+      return \"vgatherpf0<ssemodesuffix>ps\\t{%4|%4}\";\n+    case 1:\n+      return \"vgatherpf1<ssemodesuffix>ps\\t{%4|%4}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_expand \"avx512pf_scatterpf<mode>\"\n+  [(unspec\n+     [(match_operand:<avx512fmaskmode> 0 \"register_or_constm1_operand\")\n+      (mem:<ssescalarmode>\n+\t(match_par_dup 5\n+\t  [(match_operand 2 \"vsib_address_operand\")\n+\t   (match_operand:VI48_512 1 \"register_operand\")\n+\t   (match_operand:SI 3 \"const1248_operand\")]))\n+      (match_operand:SI 4 \"const_0_to_1_operand\")]\n+     UNSPEC_SCATTER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  operands[5]\n+    = gen_rtx_UNSPEC (Pmode, gen_rtvec (3, operands[2], operands[1],\n+\t\t\t\t\toperands[3]), UNSPEC_VSIBADDR);\n+})\n+\n+(define_insn \"*avx512pf_scatterpf<mode>_mask\"\n+  [(unspec\n+     [(match_operand:<avx512fmaskmode> 0 \"register_operand\" \"k\")\n+      (match_operator:<ssescalarmode> 5 \"vsib_mem_operator\"\n+\t[(unspec:P\n+\t   [(match_operand:P 2 \"vsib_address_operand\" \"p\")\n+\t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n+\t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n+\t   UNSPEC_VSIBADDR)])\n+      (match_operand:SI 4 \"const_0_to_1_operand\" \"n\")]\n+     UNSPEC_SCATTER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  switch (INTVAL (operands[4]))\n+    {\n+    case 0:\n+      return \"vscatterpf0<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n+    case 1:\n+      return \"vscatterpf1<ssemodesuffix>ps\\t{%5%{%0%}|%5%{%0%}}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"*avx512pf_scatterpf<mode>\"\n+  [(unspec\n+     [(const_int -1)\n+      (match_operator:<ssescalarmode> 4 \"vsib_mem_operator\"\n+\t[(unspec:P\n+\t   [(match_operand:P 1 \"vsib_address_operand\" \"p\")\n+\t    (match_operand:VI48_512 0 \"register_operand\" \"v\")\n+\t    (match_operand:SI 2 \"const1248_operand\" \"n\")]\n+\t   UNSPEC_VSIBADDR)])\n+      (match_operand:SI 3 \"const_0_to_1_operand\" \"n\")]\n+     UNSPEC_SCATTER_PREFETCH)]\n+  \"TARGET_AVX512PF\"\n+{\n+  switch (INTVAL (operands[3]))\n+    {\n+    case 0:\n+      return \"vscatterpf0<ssemodesuffix>ps\\t{%4|%4}\";\n+    case 1:\n+      return \"vscatterpf1<ssemodesuffix>ps\\t{%4|%4}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; XOP instructions\n@@ -10409,6 +10706,13 @@\n     }\n })\n \n+(define_expand \"vlshr<mode>3\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\")\n+\t(lshiftrt:VI48_512\n+\t  (match_operand:VI48_512 1 \"register_operand\")\n+\t  (match_operand:VI48_512 2 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n (define_expand \"vlshr<mode>3\"\n   [(set (match_operand:VI48_256 0 \"register_operand\")\n \t(lshiftrt:VI48_256\n@@ -10476,6 +10780,13 @@\n     }\n })\n \n+(define_expand \"vashl<mode>3\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\")\n+\t(ashift:VI48_512\n+\t  (match_operand:VI48_512 1 \"register_operand\")\n+\t  (match_operand:VI48_512 2 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512F\")\n+\n (define_expand \"vashl<mode>3\"\n   [(set (match_operand:VI48_256 0 \"register_operand\")\n \t(ashift:VI48_256\n@@ -10994,6 +11305,16 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_vec_dup_gpr<mode>\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n+\t(vec_duplicate:VI48_512\n+\t  (match_operand:<ssescalarmode> 1 \"register_operand\" \"r\")))]\n+  \"TARGET_AVX512F && (<MODE>mode != V8DImode || TARGET_64BIT)\"\n+  \"vpbroadcast<bcstscalarsuff>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx512f_vec_dup_mem<mode>\"\n   [(set (match_operand:VI48F_512 0 \"register_operand\" \"=v\")\n \t(vec_duplicate:VI48F_512\n@@ -12140,3 +12461,24 @@\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"clz<mode>2\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n+\t(clz:VI48_512\n+\t  (match_operand:VI48_512 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512CD\"\n+  \"vplzcnt<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"conflict<mode>\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n+\t(unspec:VI48_512\n+\t  [(match_operand:VI48_512 1 \"nonimmediate_operand\" \"vm\")]\n+\t  UNSPEC_CONFLICT))]\n+  \"TARGET_AVX512CD\"\n+  \"vpconflict<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])"}]}