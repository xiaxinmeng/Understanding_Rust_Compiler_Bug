{"sha": "5a2aa3bd76f62ded8be6d373beb0987181b15a7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyYWEzYmQ3NmY2MmRlZDhiZTZkMzczYmViMDk4NzE4MWIxNWE3ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-07-24T23:43:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-24T23:43:55Z"}, "message": "simplify-rtx.c (avoid_constant_pool_reference): Coerce the retrieved constant into the expected mode.\n\n        * simplify-rtx.c (avoid_constant_pool_reference): Coerce\n        the retrieved constant into the expected mode.\n\nFrom-SVN: r44321", "tree": {"sha": "ea355d498f15ab1bd17b5eeda86b06733e3fd1cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea355d498f15ab1bd17b5eeda86b06733e3fd1cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a2aa3bd76f62ded8be6d373beb0987181b15a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2aa3bd76f62ded8be6d373beb0987181b15a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2aa3bd76f62ded8be6d373beb0987181b15a7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2aa3bd76f62ded8be6d373beb0987181b15a7d/comments", "author": null, "committer": null, "parents": [{"sha": "ca9fef16af6d5678e16a3165f7d54ad3fa26c58b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9fef16af6d5678e16a3165f7d54ad3fa26c58b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9fef16af6d5678e16a3165f7d54ad3fa26c58b"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "819ee9b8a78c54664ca911e2ea4899e94854054d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2aa3bd76f62ded8be6d373beb0987181b15a7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2aa3bd76f62ded8be6d373beb0987181b15a7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a2aa3bd76f62ded8be6d373beb0987181b15a7d", "patch": "@@ -1,3 +1,8 @@\n+2001-07-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* simplify-rtx.c (avoid_constant_pool_reference): Coerce\n+\tthe retrieved constant into the expected mode.\n+\n Wed Jul 25 01:41:27 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* flow.c (try_simplify_condjump): Avoid duplicated edges."}, {"sha": "1961f194ebac00c206a93135b56452014d703aa6", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2aa3bd76f62ded8be6d373beb0987181b15a7d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2aa3bd76f62ded8be6d373beb0987181b15a7d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5a2aa3bd76f62ded8be6d373beb0987181b15a7d", "patch": "@@ -136,18 +136,36 @@ simplify_gen_binary (code, mode, op0, op1)\n     return gen_rtx_fmt_ee (code, mode, op0, op1);\n }\n \f\n-/* In case X is MEM referencing constant pool, return the real value.\n+/* If X is a MEM referencing the constant pool, return the real value.\n    Otherwise return X.  */\n static rtx\n avoid_constant_pool_reference (x)\n      rtx x;\n {\n+  rtx c, addr;\n+  enum machine_mode cmode;\n+\n   if (GET_CODE (x) != MEM)\n     return x;\n-  if (GET_CODE (XEXP (x, 0)) != SYMBOL_REF\n-      || !CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)))\n+  addr = XEXP (x, 0);\n+\n+  if (GET_CODE (addr) != SYMBOL_REF\n+      || ! CONSTANT_POOL_ADDRESS_P (addr))\n     return x;\n-  return get_pool_constant (XEXP (x, 0));\n+\n+  c = get_pool_constant (addr);\n+  cmode = get_pool_mode (addr);\n+\n+  /* If we're accessing the constant in a different mode than it was\n+     originally stored, attempt to fix that up via subreg simplifications.\n+     If that fails we have no choice but to return the original memory.  */\n+  if (cmode != GET_MODE (x))\n+    {\n+      c = simplify_subreg (GET_MODE (x), c, cmode, 0);\n+      return c ? c : x;\n+    }\n+\n+  return c;\n }\n \f\n /* Make a unary operation by first seeing if it folds and otherwise making"}]}