{"sha": "dd96e83ac7b0577204f57da5953181a972da2780", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ5NmU4M2FjN2IwNTc3MjA0ZjU3ZGE1OTUzMTgxYTk3MmRhMjc4MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-03-03T23:24:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-03-03T23:24:12Z"}, "message": "xmmintrin.h (enum _mm_hint): Correct hint value.\n\n\t* config/i386/xmmintrin.h (enum _mm_hint) <_MM_HINT_ET0>: Correct\n\thint value.\n\t(_mm_prefetch): Move out of GCC target(\"sse\") pragma.\n\t* config/i386/prfchwintrin.h (_m_prefetchw): Move out of\n\tGCC target(\"prfchw\") pragma.\n\t* config/i386/i386.md (prefetch): Emit prefetchwt1 only\n\tfor locality <= 2.\n\t* config/i386/i386.c (ix86_option_override_internal): Enable\n\t-mprfchw with -mprefetchwt1.\n\nFrom-SVN: r208296", "tree": {"sha": "1e280d335b4d8965be3740e841d4abaebd8870ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e280d335b4d8965be3740e841d4abaebd8870ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd96e83ac7b0577204f57da5953181a972da2780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd96e83ac7b0577204f57da5953181a972da2780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd96e83ac7b0577204f57da5953181a972da2780", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd96e83ac7b0577204f57da5953181a972da2780/comments", "author": null, "committer": null, "parents": [{"sha": "220c1a51844ac28cb45155d0e9cad6b5a187818f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220c1a51844ac28cb45155d0e9cad6b5a187818f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220c1a51844ac28cb45155d0e9cad6b5a187818f"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "6f5bd57bef0b72e7b9002b6f0bd4dbd0444d858a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd96e83ac7b0577204f57da5953181a972da2780", "patch": "@@ -1,3 +1,15 @@\n+2014-03-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/xmmintrin.h (enum _mm_hint) <_MM_HINT_ET0>: Correct\n+\thint value.\n+\t(_mm_prefetch): Move out of GCC target(\"sse\") pragma.\n+\t* config/i386/prfchwintrin.h (_m_prefetchw): Move out of\n+\tGCC target(\"prfchw\") pragma.\n+\t* config/i386/i386.md (prefetch): Emit prefetchwt1 only\n+\tfor locality <= 2.\n+\t* config/i386/i386.c (ix86_option_override_internal): Enable\n+\t-mprfchw with -mprefetchwt1.\n+\n 2014-03-03  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/arc/arc.md (casesi_load) <length attribute alternative 0>:\n@@ -35,7 +47,7 @@\n \t* doc/avr-mmcu.texi: Regenerate.\n \n 2014-03-03  Tobias Grosser  <tobias@grosser.es>\n-\tMircea Namolaru  <mircea.namolaru@inria.fr>\n+\t    Mircea Namolaru  <mircea.namolaru@inria.fr>\n \n \tPR tree-optimization/58028\n \t* graphite-clast-to-gimple.c (set_cloog_options): Don't remove"}, {"sha": "13e873a2886c4203f0fe1c94f9800e4b81eb47e8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dd96e83ac7b0577204f57da5953181a972da2780", "patch": "@@ -3874,8 +3874,9 @@ ix86_option_override_internal (bool main_args_p,\n       || (TARGET_PRFCHW && !TARGET_3DNOW_P (opts->x_ix86_isa_flags)))\n     x86_prefetch_sse = true;\n \n-  /* Enable prefetch{,w} instructions for -m3dnow.  */\n-  if (TARGET_3DNOW_P (opts->x_ix86_isa_flags))\n+  /* Enable prefetch{,w} instructions for -m3dnow and -mprefetchwt1.  */\n+  if (TARGET_3DNOW_P (opts->x_ix86_isa_flags)\n+      || TARGET_PREFETCHWT1_P (opts->x_ix86_isa_flags))\n     opts->x_ix86_isa_flags\n       |= OPTION_MASK_ISA_PRFCHW & ~opts->x_ix86_isa_flags_explicit;\n "}, {"sha": "4ccb3a5e6feccca662845dc55db77a7916e64f93", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=dd96e83ac7b0577204f57da5953181a972da2780", "patch": "@@ -17867,7 +17867,7 @@\n      supported by SSE counterpart or the SSE prefetch is not available\n      (K6 machines).  Otherwise use SSE prefetch as it allows specifying\n      of locality.  */\n-  if (TARGET_PREFETCHWT1 && write)\n+  if (TARGET_PREFETCHWT1 && write && locality <= 2)\n     operands[2] = const2_rtx;\n   else if (TARGET_PRFCHW && (write || !TARGET_PREFETCH_SSE))\n     operands[2] = GEN_INT (3);"}, {"sha": "b2f5772ec2212067bbc0364b213165483155af25", "filename": "gcc/config/i386/prfchwintrin.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fprfchwintrin.h?ref=dd96e83ac7b0577204f57da5953181a972da2780", "patch": "@@ -25,25 +25,13 @@\n # error \"Never use <prfchwintrin.h> directly; include <x86intrin.h> or <mm3dnow.h> instead.\"\n #endif\n \n-\n #ifndef _PRFCHWINTRIN_H_INCLUDED\n #define _PRFCHWINTRIN_H_INCLUDED\n \n-#ifndef __PRFCHW__\n-#pragma GCC push_options\n-#pragma GCC target(\"prfchw\")\n-#define __DISABLE_PRFCHW__\n-#endif /* __PRFCHW__ */\n-\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _m_prefetchw (void *__P)\n {\n   __builtin_prefetch (__P, 1, 3 /* _MM_HINT_T0 */);\n }\n \n-#ifdef __DISABLE_PRFCHW__\n-#undef __DISABLE_PRFCHW__\n-#pragma GCC pop_options\n-#endif /* __DISABLE_PRFCHW__ */\n-\n #endif /* _PRFCHWINTRIN_H_INCLUDED */"}, {"sha": "023843904aebd304d3d71f0d7bceb19e392935d0", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd96e83ac7b0577204f57da5953181a972da2780/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=dd96e83ac7b0577204f57da5953181a972da2780", "patch": "@@ -33,6 +33,31 @@\n /* Get _mm_malloc () and _mm_free ().  */\n #include <mm_malloc.h>\n \n+/* Constants for use with _mm_prefetch.  */\n+enum _mm_hint\n+{\n+  /* _MM_HINT_ET is _MM_HINT_T with set 3rd bit.  */\n+  _MM_HINT_ET0 = 7,\n+  _MM_HINT_ET1 = 6,\n+  _MM_HINT_T0 = 3,\n+  _MM_HINT_T1 = 2,\n+  _MM_HINT_T2 = 1,\n+  _MM_HINT_NTA = 0\n+};\n+\n+/* Loads one cache line from address P to a location \"closer\" to the\n+   processor.  The selector I specifies the type of prefetch operation.  */\n+#ifdef __OPTIMIZE__\n+extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_prefetch (const void *__P, enum _mm_hint __I)\n+{\n+  __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);\n+}\n+#else\n+#define _mm_prefetch(P, I) \\\n+  __builtin_prefetch ((P), ((I & 0x4) >> 2), (I & 0x3))\n+#endif\n+\n #ifndef __SSE__\n #pragma GCC push_options\n #pragma GCC target(\"sse\")\n@@ -50,18 +75,6 @@ typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n #define _MM_SHUFFLE(fp3,fp2,fp1,fp0) \\\n  (((fp3) << 6) | ((fp2) << 4) | ((fp1) << 2) | (fp0))\n \n-/* Constants for use with _mm_prefetch.  */\n-enum _mm_hint\n-{\n-  /* _MM_HINT_ET is _MM_HINT_T with set 3rd bit.  */\n-  _MM_HINT_ET0 = 5,\n-  _MM_HINT_ET1 = 6,\n-  _MM_HINT_T0 = 3,\n-  _MM_HINT_T1 = 2,\n-  _MM_HINT_T2 = 1,\n-  _MM_HINT_NTA = 0\n-};\n-\n /* Bits in the MXCSR.  */\n #define _MM_EXCEPT_MASK       0x003f\n #define _MM_EXCEPT_INVALID    0x0001\n@@ -1188,19 +1201,6 @@ _m_psadbw (__m64 __A, __m64 __B)\n   return _mm_sad_pu8 (__A, __B);\n }\n \n-/* Loads one cache line from address P to a location \"closer\" to the\n-   processor.  The selector I specifies the type of prefetch operation.  */\n-#ifdef __OPTIMIZE__\n-extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_prefetch (const void *__P, enum _mm_hint __I)\n-{\n-  __builtin_prefetch (__P, (__I & 0x4) >> 2, __I & 0x3);\n-}\n-#else\n-#define _mm_prefetch(P, I) \\\n-  __builtin_prefetch ((P), ((I & 0x4) >> 2), (I & 0x3))\n-#endif\n-\n /* Stores the data in A to the address P without polluting the caches.  */\n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_stream_pi (__m64 *__P, __m64 __A)"}]}