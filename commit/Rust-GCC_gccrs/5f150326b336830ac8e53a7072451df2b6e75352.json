{"sha": "5f150326b336830ac8e53a7072451df2b6e75352", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxNTAzMjZiMzM2ODMwYWM4ZTUzYTcwNzI0NTFkZjJiNmU3NTM1Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-05-15T16:03:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-05-15T16:03:56Z"}, "message": "cp-tree.h (DECL_MAYBE_IN_CHARGE_CDTOR_P): New.\n\n2018-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cp-tree.h (DECL_MAYBE_IN_CHARGE_CDTOR_P): New.\n\t(FOR_EACH_CLONE): Update.\n\t* decl.c (grokdeclarator): Use it.\n\t* decl2.c (vague_linkage_p): Likewise.\n\t* mangle.c (mangle_decl): Likewise.\n\t* method.c (lazily_declare_fn): Likewise.\n\t* optimize.c (can_alias_cdtor, maybe_clone_body): Likewise.\n\t* repo.c (repo_emit_p): Likewise.\n\t* tree.c (decl_linkage): Likewise.\n\nFrom-SVN: r260264", "tree": {"sha": "de8826a8ed6f3eb667225fe3f17a498d31361127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de8826a8ed6f3eb667225fe3f17a498d31361127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f150326b336830ac8e53a7072451df2b6e75352", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f150326b336830ac8e53a7072451df2b6e75352", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f150326b336830ac8e53a7072451df2b6e75352", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f150326b336830ac8e53a7072451df2b6e75352/comments", "author": null, "committer": null, "parents": [{"sha": "5a7960da41fec497eb4203d71215bcb1077207a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7960da41fec497eb4203d71215bcb1077207a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a7960da41fec497eb4203d71215bcb1077207a9"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "322c5b9ed99c89eb0dc207a50436a5362461caab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -1,3 +1,15 @@\n+2018-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* cp-tree.h (DECL_MAYBE_IN_CHARGE_CDTOR_P): New.\n+\t(FOR_EACH_CLONE): Update.\n+\t* decl.c (grokdeclarator): Use it.\n+\t* decl2.c (vague_linkage_p): Likewise.\n+\t* mangle.c (mangle_decl): Likewise.\n+\t* method.c (lazily_declare_fn): Likewise.\n+\t* optimize.c (can_alias_cdtor, maybe_clone_body): Likewise.\n+\t* repo.c (repo_emit_p): Likewise.\n+\t* tree.c (decl_linkage): Likewise.\n+\n 2018-05-14  Jason Merrill  <jason@redhat.com>\n \n \tHandle TYPE_HAS_LATE_RETURN_TYPE like ref-qualifier and eh spec."}, {"sha": "9a2eb3be4d1a8838c0f434e32537e3e8c871b711", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -2783,6 +2783,12 @@ struct GTY(()) lang_decl {\n #define DECL_DELETING_DESTRUCTOR_P(NODE)\t\t\\\n   (DECL_NAME (NODE) == deleting_dtor_identifier)\n \n+/* Nonzero if either DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P or\n+   DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P is true of NODE.  */\n+#define DECL_MAYBE_IN_CHARGE_CDTOR_P(NODE)              \\\n+  (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (NODE)            \\\n+   || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (NODE))\n+\n /* Nonzero if NODE (a FUNCTION_DECL) is a cloned constructor or\n    destructor.  */\n #define DECL_CLONED_FUNCTION_P(NODE) (!!decl_cloned_function_p (NODE, true))\n@@ -2800,8 +2806,7 @@ struct GTY(()) lang_decl {\n   */\n #define FOR_EACH_CLONE(CLONE, FN)\t\t\t\\\n   if (!(TREE_CODE (FN) == FUNCTION_DECL\t\t\t\\\n-\t&& (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (FN)\t\\\n-\t    || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (FN))))\\\n+\t&& DECL_MAYBE_IN_CHARGE_CDTOR_P (FN)))          \\\n     ;\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\\\n     for (CLONE = DECL_CHAIN (FN);\t\t\t\\"}, {"sha": "10e3079beed5b9bee1b85784c00b46ac12f6a262", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -11721,9 +11721,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t{\n \t  if (!current_function_decl)\n \t    DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n-\t  else if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (current_function_decl)\n-\t\t   || (DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P\n-\t\t       (current_function_decl)))\n+\t  else if (DECL_MAYBE_IN_CHARGE_CDTOR_P (current_function_decl))\n \t    /* The TYPE_DECL is \"abstract\" because there will be\n \t       clones of this constructor/destructor, and there will\n \t       be copies of this TYPE_DECL generated in those"}, {"sha": "126356d5de4937d8f88ef1120b38b6383169ea04", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -1933,8 +1933,7 @@ vague_linkage_p (tree decl)\n \t maybe-in-charge 'tor variants; in that case we need to check one of\n \t the \"clones\" for the real linkage.  But only in that case; before\n \t maybe_clone_body we haven't yet copied the linkage to the clones.  */\n-      if ((DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl)\n-\t   || DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl))\n+      if (DECL_MAYBE_IN_CHARGE_CDTOR_P (decl)\n \t  && !DECL_ABSTRACT_P (decl)\n \t  && DECL_CHAIN (decl)\n \t  && DECL_CLONED_FUNCTION_P (DECL_CHAIN (decl)))"}, {"sha": "6a7df804cafa2937552992ef74724af4137c9ae3", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -3862,8 +3862,7 @@ mangle_decl (const tree decl)\n   if (id != DECL_NAME (decl)\n       /* Don't do this for a fake symbol we aren't going to emit anyway.  */\n       && TREE_CODE (decl) != TYPE_DECL\n-      && !DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl)\n-      && !DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl))\n+      && !DECL_MAYBE_IN_CHARGE_CDTOR_P (decl))\n     {\n       int save_ver = flag_abi_version;\n       tree id2 = NULL_TREE;"}, {"sha": "ef0df7eb8d9472a846c381f1f18a5f2f613af36f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -2422,8 +2422,7 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n   fixup_type_variants (type);\n \n   maybe_add_class_template_decl_list (type, fn, /*friend_p=*/0);\n-  if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn)\n-      || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (fn))\n+  if (DECL_MAYBE_IN_CHARGE_CDTOR_P (fn))\n     /* Create appropriate clones.  */\n     clone_function_decl (fn, /*update_methods=*/true);\n "}, {"sha": "0e9b84ed8a4d7e6a9aa6b7ef0c92948ff89c74ee", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -194,8 +194,7 @@ can_alias_cdtor (tree fn)\n   /* ??? Why not use aliases with -frepo?  */\n   if (flag_use_repository)\n     return false;\n-  gcc_assert (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn)\n-\t      || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (fn));\n+  gcc_assert (DECL_MAYBE_IN_CHARGE_CDTOR_P (fn));\n   /* Don't use aliases for weak/linkonce definitions unless we can put both\n      symbols in the same COMDAT group.  */\n   return (DECL_INTERFACE_KNOWN (fn)\n@@ -440,8 +439,7 @@ maybe_clone_body (tree fn)\n   bool need_alias = false;\n \n   /* We only clone constructors and destructors.  */\n-  if (!DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (fn)\n-      && !DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (fn))\n+  if (!DECL_MAYBE_IN_CHARGE_CDTOR_P (fn))\n     return 0;\n \n   populate_clone_array (fn, fns);"}, {"sha": "6af8f19a8b89c330ba76ef02b3119d9fbd0ee27e", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -330,8 +330,7 @@ repo_emit_p (tree decl)\n   /* For constructors and destructors, the repository contains\n      information about the clones -- not the original function --\n      because only the clones are emitted in the object file.  */\n-  if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl)\n-      || DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl))\n+  if (DECL_MAYBE_IN_CHARGE_CDTOR_P (decl))\n     {\n       int emit_p = 0;\n       tree clone;"}, {"sha": "ecb88df23b91563a6529f759e835395d5da88a21", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f150326b336830ac8e53a7072451df2b6e75352/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5f150326b336830ac8e53a7072451df2b6e75352", "patch": "@@ -5012,8 +5012,7 @@ decl_linkage (tree decl)\n \n   /* maybe_thunk_body clears TREE_PUBLIC on the maybe-in-charge 'tor variants,\n      check one of the \"clones\" for the real linkage.  */\n-  if ((DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl)\n-       || DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl))\n+  if (DECL_MAYBE_IN_CHARGE_CDTOR_P (decl)\n       && DECL_CHAIN (decl)\n       && DECL_CLONED_FUNCTION_P (DECL_CHAIN (decl)))\n     return decl_linkage (DECL_CHAIN (decl));"}]}