{"sha": "c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "node_id": "C_kwDOANBUbNoAKGM2Y2Y1NTVhODhmOGZmYjhlYzg1YzJiOTRmZTY1NmFiMjE3MjYwZWE", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-06-17T14:33:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-07-14T21:10:17Z"}, "message": "Simplify memchr with small constant strings\n\nWhen memchr is applied on a constant string of no more than the bytes of\na word, simplify memchr by checking each byte in the constant string.\n\nint f (int a)\n{\n   return  __builtin_memchr (\"AE\", a, 2) != 0;\n}\n\nis simplified to\n\nint f (int a)\n{\n  return ((char) a == 'A' || (char) a == 'E') != 0;\n}\n\ngcc/\n\n\tPR tree-optimization/103798\n\t* tree-ssa-forwprop.cc: Include \"tree-ssa-strlen.h\".\n\t(simplify_builtin_call): Inline memchr with constant strings of\n\tno more than the bytes of a word.\n\t* tree-ssa-strlen.cc (use_in_zero_equality): Make it global.\n\t* tree-ssa-strlen.h (use_in_zero_equality): New.\n\ngcc/testsuite/\n\n\tPR tree-optimization/103798\n\t* c-c++-common/pr103798-1.c: New test.\n\t* c-c++-common/pr103798-2.c: Likewise.\n\t* c-c++-common/pr103798-3.c: Likewise.\n\t* c-c++-common/pr103798-4.c: Likewise.\n\t* c-c++-common/pr103798-5.c: Likewise.\n\t* c-c++-common/pr103798-6.c: Likewise.\n\t* c-c++-common/pr103798-7.c: Likewise.\n\t* c-c++-common/pr103798-8.c: Likewise.\n\t* c-c++-common/pr103798-9.c: Likewise.\n\t* c-c++-common/pr103798-10.c: Likewise.", "tree": {"sha": "fac88fef4d594a13125d3f361569adae0c57446a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fac88fef4d594a13125d3f361569adae0c57446a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "748f8a8b145dde59c7b63aa68b5a59515b7efc49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/748f8a8b145dde59c7b63aa68b5a59515b7efc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/748f8a8b145dde59c7b63aa68b5a59515b7efc49"}], "stats": {"total": 319, "additions": 317, "deletions": 2}, "files": [{"sha": "cd3edf569fcfe07bbf67eb327bf8e11dec8970e9", "filename": "gcc/testsuite/c-c++-common/pr103798-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-1.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -save-temps\" } */\n+\n+__attribute__ ((weak))\n+int\n+f (char a)\n+{\n+   return  __builtin_memchr (\"a\", a, 1) == 0;\n+}\n+\n+__attribute__ ((weak))\n+int\n+g (char a)\n+{\n+  return a != 'a';\n+}\n+\n+int\n+main ()\n+{\n+ for (int i = 0; i < 255; i++)\n+   if (f (i) != g (i))\n+     __builtin_abort ();\n+\n+ return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "4677e9539faa85e61cced069a1c55f711bf22b9f", "filename": "gcc/testsuite/c-c++-common/pr103798-10.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-10.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-optimized -save-temps\" } */\n+\n+int\n+f (char a)\n+{\n+  return  __builtin_memchr (\"ac\", a, 1) == 0;\n+}\n+\n+/* { dg-final { scan-assembler \"memchr\" } } */"}, {"sha": "e7e99c3679ecbcb802a0f768fdcaaee89f54f465", "filename": "gcc/testsuite/c-c++-common/pr103798-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-2.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -save-temps\" } */\n+\n+#include <string.h>\n+\n+__attribute__ ((weak))\n+int\n+f (int a)\n+{\n+   return memchr (\"aE\", a, 2) != NULL;\n+}\n+\n+__attribute__ ((weak))\n+int\n+g (char a)\n+{\n+  return a == 'a' || a == 'E';\n+}\n+\n+int\n+main ()\n+{\n+ for (int i = 0; i < 255; i++)\n+   if (f (i + 256) != g (i + 256))\n+     __builtin_abort ();\n+\n+ return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "ddcedc7e238d5173e0fbb48f5f47b9e48bba79f8", "filename": "gcc/testsuite/c-c++-common/pr103798-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-3.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -save-temps\" } */\n+\n+__attribute__ ((weak))\n+int\n+f (char a)\n+{\n+   return  __builtin_memchr (\"aEgZ\", a, 3) == 0;\n+}\n+\n+__attribute__ ((weak))\n+int\n+g (char a)\n+{\n+  return a != 'a' && a != 'E' && a != 'g';\n+}\n+\n+int\n+main ()\n+{\n+ for (int i = 0; i < 255; i++)\n+   if (f (i) != g (i))\n+     __builtin_abort ();\n+\n+ return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "00e8302a8331e001864e6a587507c9206397a60b", "filename": "gcc/testsuite/c-c++-common/pr103798-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-4.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -save-temps\" } */\n+\n+__attribute__ ((weak))\n+int\n+f (char a)\n+{\n+   return  __builtin_memchr (\"aEgi\", a, 4) != 0;\n+}\n+\n+__attribute__ ((weak))\n+int\n+g (char a)\n+{\n+  return a == 'a' || a == 'E' || a == 'g' || a == 'i';\n+}\n+\n+int\n+main ()\n+{\n+ for (int i = 0; i < 255; i++)\n+   if (f (i) != g (i))\n+     __builtin_abort ();\n+\n+ return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "0d6487a13df6e962233be8f3ab9091d5a354101f", "filename": "gcc/testsuite/c-c++-common/pr103798-5.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-5.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -save-temps\" } */\n+\n+__attribute__ ((weak))\n+int f(char a)\n+{\n+   return  __builtin_memchr (\"aEgiH\", a, 5) == 0;\n+}\n+\n+__attribute__ ((weak))\n+int g(char a)\n+{\n+  return a != 'a' && a != 'E' && a != 'g' && a != 'i' && a != 'H';\n+}\n+\n+int\n+main ()\n+{\n+ for (int i = 0; i < 255; i++)\n+   if (f (i) != g (i))\n+     __builtin_abort ();\n+\n+ return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "5ccb5ee66e0e12f8bcaacaf145888776d88f0875", "filename": "gcc/testsuite/c-c++-common/pr103798-6.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-6.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -save-temps\" } */\n+\n+__attribute__ ((weak))\n+int f(char a)\n+{\n+   return  __builtin_memchr (\"aEgiHx\", a, 6) != 0;\n+}\n+\n+__attribute__ ((weak))\n+int g(char a)\n+{\n+  return (a == 'a' || a == 'E' || a == 'g' || a == 'i' || a == 'H'\n+\t  || a == 'x');\n+}\n+\n+int\n+main ()\n+{\n+ for (int i = 0; i < 255; i++)\n+   if (f (i) != g (i))\n+     __builtin_abort ();\n+\n+ return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "40fd38257d107d72f9d68868bf5d900be05104ab", "filename": "gcc/testsuite/c-c++-common/pr103798-7.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-7.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -save-temps\" } */\n+\n+__attribute__ ((weak))\n+int f(char a)\n+{\n+   return  __builtin_memchr (\"aEgiHjZ\", a, 7) == 0;\n+}\n+\n+__attribute__ ((weak))\n+int g(char a)\n+{\n+  return (a != 'a' && a != 'E' && a != 'g' && a != 'i' && a != 'H'\n+\t  && a != 'j' && a != 'Z');\n+}\n+\n+int\n+main ()\n+{\n+ for (int i = 0; i < 255; i++)\n+   if (f (i) != g (i))\n+     __builtin_abort ();\n+\n+ return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "0841b18cea44cd15b42df5f300cff4ab9c1a746c", "filename": "gcc/testsuite/c-c++-common/pr103798-8.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-8.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -save-temps\" } */\n+\n+__attribute__ ((weak))\n+int f(int a)\n+{\n+   return  __builtin_memchr (\"aEgiHx19ABC\", a, 8) != 0;\n+}\n+\n+__attribute__ ((weak))\n+int g(char a)\n+{\n+  return (a == 'a' || a == 'E' || a == 'g' || a == 'i' || a == 'H'\n+\t  || a == 'x' || a == '1' || a == '9');\n+}\n+\n+int\n+main ()\n+{\n+ for (int i = 0; i < 255; i++)\n+   if (f (i + 256) != g (i + 256))\n+     __builtin_abort ();\n+\n+ return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "c5f0f94a4b57ff1ad8082f792efc07f9033b3d01", "filename": "gcc/testsuite/c-c++-common/pr103798-9.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr103798-9.c?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fdump-tree-optimized -save-temps\" } */\n+\n+int\n+f (char a)\n+{\n+  return  __builtin_memchr (\"a\", a, 1) == 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"memchr\" } } */"}, {"sha": "fdc4bc8909d2763876550e53277ff2b3dcca796a", "filename": "gcc/tree-ssa-forwprop.cc", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftree-ssa-forwprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftree-ssa-forwprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.cc?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dfa.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"tree-ssa-dom.h\"\n+#include \"tree-ssa-strlen.h\"\n #include \"builtins.h\"\n #include \"tree-cfgcleanup.h\"\n #include \"cfganal.h\"\n@@ -1177,6 +1178,15 @@ constant_pointer_difference (tree p1, tree p2)\n    memcpy (p, \"abcd   \", 7);\n    call if the latter can be stored by pieces during expansion.\n \n+   Optimize\n+   memchr (\"abcd\", a, 4) == 0;\n+   or\n+   memchr (\"abcd\", a, 4) != 0;\n+   to\n+   (a == 'a' || a == 'b' || a == 'c' || a == 'd') == 0\n+   or\n+   (a == 'a' || a == 'b' || a == 'c' || a == 'd') != 0\n+\n    Also canonicalize __atomic_fetch_op (p, x, y) op x\n    to __atomic_op_fetch (p, x, y) or\n    __atomic_op_fetch (p, x, y) iop x\n@@ -1193,8 +1203,70 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n     return false;\n   stmt1 = SSA_NAME_DEF_STMT (vuse);\n \n+  tree res;\n+\n   switch (DECL_FUNCTION_CODE (callee2))\n     {\n+    case BUILT_IN_MEMCHR:\n+      if (gimple_call_num_args (stmt2) == 3\n+\t  && (res = gimple_call_lhs (stmt2)) != nullptr\n+\t  && use_in_zero_equality (res) != nullptr\n+\t  && CHAR_BIT == 8\n+\t  && BITS_PER_UNIT == 8)\n+\t{\n+\t  tree ptr = gimple_call_arg (stmt2, 0);\n+\t  if (TREE_CODE (ptr) != ADDR_EXPR\n+\t      || TREE_CODE (TREE_OPERAND (ptr, 0)) != STRING_CST)\n+\t    break;\n+\t  unsigned HOST_WIDE_INT slen\n+\t    = TREE_STRING_LENGTH (TREE_OPERAND (ptr, 0));\n+\t  /* It must be a non-empty string constant.  */\n+\t  if (slen < 2)\n+\t    break;\n+\t  /* For -Os, only simplify strings with a single character.  */\n+\t  if (!optimize_bb_for_speed_p (gimple_bb (stmt2))\n+\t      && slen > 2)\n+\t    break;\n+\t  tree size = gimple_call_arg (stmt2, 2);\n+\t  /* Size must be a constant which is <= UNITS_PER_WORD and\n+\t     <= the string length.  */\n+\t  if (TREE_CODE (size) != INTEGER_CST || integer_zerop (size))\n+\t    break;\n+\n+\t  if (!tree_fits_uhwi_p (size))\n+\t    break;\n+\n+\t  unsigned HOST_WIDE_INT sz = tree_to_uhwi (size);\n+\t  if (sz > UNITS_PER_WORD || sz >= slen)\n+\t    break;\n+\n+\t  tree ch = gimple_call_arg (stmt2, 1);\n+\t  location_t loc = gimple_location (stmt2);\n+\t  if (!useless_type_conversion_p (char_type_node,\n+\t\t\t\t\t  TREE_TYPE (ch)))\n+\t    ch = fold_convert_loc (loc, char_type_node, ch);\n+\t  const char *p = TREE_STRING_POINTER (TREE_OPERAND (ptr, 0));\n+\t  unsigned int isize = sz;\n+\t  tree *op = XALLOCAVEC (tree, isize);\n+\t  for (unsigned int i = 0; i < isize; i++)\n+\t    {\n+\t      op[i] = build_int_cst (char_type_node, p[i]);\n+\t      op[i] = fold_build2_loc (loc, EQ_EXPR, boolean_type_node,\n+\t\t\t\t       op[i], ch);\n+\t    }\n+\t  for (unsigned int i = isize - 1; i >= 1; i--)\n+\t    op[i - 1] = fold_convert_loc (loc, boolean_type_node,\n+\t\t\t\t\t  fold_build2_loc (loc,\n+\t\t\t\t\t\t\t   BIT_IOR_EXPR,\n+\t\t\t\t\t\t\t   boolean_type_node,\n+\t\t\t\t\t\t\t   op[i - 1],\n+\t\t\t\t\t\t\t   op[i]));\n+\t  res = fold_convert_loc (loc, TREE_TYPE (res), op[0]);\n+\t  gimplify_and_update_call_from_tree (gsi_p, res);\n+\t  return true;\n+\t}\n+      break;\n+\n     case BUILT_IN_MEMSET:\n       if (gimple_call_num_args (stmt2) != 3\n \t  || gimple_call_lhs (stmt2)"}, {"sha": "5afbae1b72e324b4c9102b877cd0ca5d1da3c971", "filename": "gcc/tree-ssa-strlen.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftree-ssa-strlen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftree-ssa-strlen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.cc?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -3913,8 +3913,8 @@ strlen_pass::handle_builtin_memset (bool *zero_write)\n    nonnull if and only RES is used in such expressions exclusively and\n    in none other.  */\n \n-static gimple *\n-use_in_zero_equality (tree res, bool exclusive = true)\n+gimple *\n+use_in_zero_equality (tree res, bool exclusive)\n {\n   gimple *first_use = NULL;\n "}, {"sha": "fdb4d9d7783de7ef2946ae6f7d3d4e085ba9d15f", "filename": "gcc/tree-ssa-strlen.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftree-ssa-strlen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6cf555a88f8ffb8ec85c2b94fe656ab217260ea/gcc%2Ftree-ssa-strlen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.h?ref=c6cf555a88f8ffb8ec85c2b94fe656ab217260ea", "patch": "@@ -35,6 +35,8 @@ struct c_strlen_data;\n extern void get_range_strlen_dynamic (tree, gimple *, c_strlen_data *,\n \t\t\t\t      pointer_query &);\n \n+extern gimple *use_in_zero_equality (tree, bool = true);\n+\n /* APIs internal to strlen pass.  Defined in gimple-ssa-sprintf.cc.  */\n extern bool handle_printf_call (gimple_stmt_iterator *, pointer_query &);\n "}]}