{"sha": "542ad08cea053ac4a02729e2f37c67bb50019bc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQyYWQwOGNlYTA1M2FjNGEwMjcyOWUyZjM3YzY3YmI1MDAxOWJjMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:23:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:23:11Z"}, "message": "[16/46] Make STMT_VINFO_REDUC_DEF a stmt_vec_info\n\nThis patch changes STMT_VINFO_REDUC_DEF from a gimple stmt to a\nstmt_vec_info.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (_stmt_vec_info::reduc_def): Change from\n\ta gimple stmt to a stmt_vec_info.\n\t* tree-vect-loop.c (vect_active_double_reduction_p)\n\t(vect_force_simple_reduction, vectorizable_reduction): Update\n\taccordingly.\n\nFrom-SVN: r263131", "tree": {"sha": "a254959046f50c17984a1da9797d188c9cf93c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a254959046f50c17984a1da9797d188c9cf93c95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/542ad08cea053ac4a02729e2f37c67bb50019bc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/542ad08cea053ac4a02729e2f37c67bb50019bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/542ad08cea053ac4a02729e2f37c67bb50019bc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/542ad08cea053ac4a02729e2f37c67bb50019bc0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16edaeb8a6b1cd72b2eedfe8cac684ac3f4785c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16edaeb8a6b1cd72b2eedfe8cac684ac3f4785c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16edaeb8a6b1cd72b2eedfe8cac684ac3f4785c2"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "40b551be85055481d198bbc96a6ebc4d704ff9ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542ad08cea053ac4a02729e2f37c67bb50019bc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542ad08cea053ac4a02729e2f37c67bb50019bc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=542ad08cea053ac4a02729e2f37c67bb50019bc0", "patch": "@@ -1,3 +1,11 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (_stmt_vec_info::reduc_def): Change from\n+\ta gimple stmt to a stmt_vec_info.\n+\t* tree-vect-loop.c (vect_active_double_reduction_p)\n+\t(vect_force_simple_reduction, vectorizable_reduction): Update\n+\taccordingly.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (_slp_tree::vec_stmts): Change from a"}, {"sha": "70c3f9bff2172ecb748c4d7ec212ce85bc7d8fe4", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542ad08cea053ac4a02729e2f37c67bb50019bc0/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542ad08cea053ac4a02729e2f37c67bb50019bc0/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=542ad08cea053ac4a02729e2f37c67bb50019bc0", "patch": "@@ -1499,8 +1499,7 @@ vect_active_double_reduction_p (stmt_vec_info stmt_info)\n   if (STMT_VINFO_DEF_TYPE (stmt_info) != vect_double_reduction_def)\n     return false;\n \n-  gimple *other_phi = STMT_VINFO_REDUC_DEF (stmt_info);\n-  return STMT_VINFO_RELEVANT_P (vinfo_for_stmt (other_phi));\n+  return STMT_VINFO_RELEVANT_P (STMT_VINFO_REDUC_DEF (stmt_info));\n }\n \n /* Function vect_analyze_loop_operations.\n@@ -3293,12 +3292,12 @@ vect_force_simple_reduction (loop_vec_info loop_info, gimple *phi,\n \t\t\t\t\t  &v_reduc_type);\n   if (def)\n     {\n-      stmt_vec_info reduc_def_info = vinfo_for_stmt (phi);\n-      STMT_VINFO_REDUC_TYPE (reduc_def_info) = v_reduc_type;\n-      STMT_VINFO_REDUC_DEF (reduc_def_info) = def;\n-      reduc_def_info = vinfo_for_stmt (def);\n-      STMT_VINFO_REDUC_TYPE (reduc_def_info) = v_reduc_type;\n-      STMT_VINFO_REDUC_DEF (reduc_def_info) = phi;\n+      stmt_vec_info phi_info = vinfo_for_stmt (phi);\n+      stmt_vec_info def_info = vinfo_for_stmt (def);\n+      STMT_VINFO_REDUC_TYPE (phi_info) = v_reduc_type;\n+      STMT_VINFO_REDUC_DEF (phi_info) = def_info;\n+      STMT_VINFO_REDUC_TYPE (def_info) = v_reduc_type;\n+      STMT_VINFO_REDUC_DEF (def_info) = phi_info;\n     }\n   return def;\n }\n@@ -6153,17 +6152,16 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t   for reductions involving a single statement.  */\n \treturn true;\n \n-      gimple *reduc_stmt = STMT_VINFO_REDUC_DEF (stmt_info);\n-      if (STMT_VINFO_IN_PATTERN_P (vinfo_for_stmt (reduc_stmt)))\n-\treduc_stmt = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (reduc_stmt));\n+      stmt_vec_info reduc_stmt_info = STMT_VINFO_REDUC_DEF (stmt_info);\n+      if (STMT_VINFO_IN_PATTERN_P (reduc_stmt_info))\n+\treduc_stmt_info = STMT_VINFO_RELATED_STMT (reduc_stmt_info);\n \n-      stmt_vec_info reduc_stmt_info = vinfo_for_stmt (reduc_stmt);\n       if (STMT_VINFO_VEC_REDUCTION_TYPE (reduc_stmt_info)\n \t  == EXTRACT_LAST_REDUCTION)\n \t/* Leave the scalar phi in place.  */\n \treturn true;\n \n-      gcc_assert (is_gimple_assign (reduc_stmt));\n+      gassign *reduc_stmt = as_a <gassign *> (reduc_stmt_info->stmt);\n       for (unsigned k = 1; k < gimple_num_ops (reduc_stmt); ++k)\n \t{\n \t  tree op = gimple_op (reduc_stmt, k);\n@@ -6314,7 +6312,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n      The last use is the reduction variable.  In case of nested cycle this\n      assumption is not true: we use reduc_index to record the index of the\n      reduction variable.  */\n-  gimple *reduc_def_stmt = NULL;\n+  stmt_vec_info reduc_def_info = NULL;\n   int reduc_index = -1;\n   for (i = 0; i < op_type; i++)\n     {\n@@ -6329,7 +6327,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n       gcc_assert (is_simple_use);\n       if (dt == vect_reduction_def)\n \t{\n-\t  reduc_def_stmt = def_stmt_info;\n+\t  reduc_def_info = def_stmt_info;\n \t  reduc_index = i;\n \t  continue;\n \t}\n@@ -6353,7 +6351,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n       if (dt == vect_nested_cycle)\n \t{\n \t  found_nested_cycle_def = true;\n-\t  reduc_def_stmt = def_stmt_info;\n+\t  reduc_def_info = def_stmt_info;\n \t  reduc_index = i;\n \t}\n \n@@ -6391,12 +6389,16 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t}\n \n       if (orig_stmt_info)\n-\treduc_def_stmt = STMT_VINFO_REDUC_DEF (orig_stmt_info);\n+\treduc_def_info = STMT_VINFO_REDUC_DEF (orig_stmt_info);\n       else\n-\treduc_def_stmt = STMT_VINFO_REDUC_DEF (stmt_info);\n+\treduc_def_info = STMT_VINFO_REDUC_DEF (stmt_info);\n     }\n \n-  if (! reduc_def_stmt || gimple_code (reduc_def_stmt) != GIMPLE_PHI)\n+  if (! reduc_def_info)\n+    return false;\n+\n+  gphi *reduc_def_phi = dyn_cast <gphi *> (reduc_def_info->stmt);\n+  if (!reduc_def_phi)\n     return false;\n \n   if (!(reduc_index == -1\n@@ -6415,12 +6417,11 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n       return false;\n     }\n \n-  stmt_vec_info reduc_def_info = vinfo_for_stmt (reduc_def_stmt);\n   /* PHIs should not participate in patterns.  */\n   gcc_assert (!STMT_VINFO_RELATED_STMT (reduc_def_info));\n   enum vect_reduction_type v_reduc_type\n     = STMT_VINFO_REDUC_TYPE (reduc_def_info);\n-  gimple *tmp = STMT_VINFO_REDUC_DEF (reduc_def_info);\n+  stmt_vec_info tmp = STMT_VINFO_REDUC_DEF (reduc_def_info);\n \n   STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = v_reduc_type;\n   /* If we have a condition reduction, see if we can simplify it further.  */\n@@ -6547,15 +6548,14 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \n   if (orig_stmt_info)\n     gcc_assert (tmp == orig_stmt_info\n-\t\t|| (REDUC_GROUP_FIRST_ELEMENT (vinfo_for_stmt (tmp))\n-\t\t    == orig_stmt_info));\n+\t\t|| REDUC_GROUP_FIRST_ELEMENT (tmp) == orig_stmt_info);\n   else\n     /* We changed STMT to be the first stmt in reduction chain, hence we\n        check that in this case the first element in the chain is STMT.  */\n-    gcc_assert (stmt == tmp\n-\t\t|| REDUC_GROUP_FIRST_ELEMENT (vinfo_for_stmt (tmp)) == stmt);\n+    gcc_assert (tmp == stmt_info\n+\t\t|| REDUC_GROUP_FIRST_ELEMENT (tmp) == stmt_info);\n \n-  if (STMT_VINFO_LIVE_P (vinfo_for_stmt (reduc_def_stmt)))\n+  if (STMT_VINFO_LIVE_P (reduc_def_info))\n     return false;\n \n   if (slp_node)\n@@ -6702,9 +6702,9 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \n   if (nested_cycle)\n     {\n-      def_bb = gimple_bb (reduc_def_stmt);\n+      def_bb = gimple_bb (reduc_def_phi);\n       def_stmt_loop = def_bb->loop_father;\n-      def_arg = PHI_ARG_DEF_FROM_EDGE (reduc_def_stmt,\n+      def_arg = PHI_ARG_DEF_FROM_EDGE (reduc_def_phi,\n                                        loop_preheader_edge (def_stmt_loop));\n       stmt_vec_info def_arg_stmt_info = loop_vinfo->lookup_def (def_arg);\n       if (def_arg_stmt_info\n@@ -6954,7 +6954,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n    in vectorizable_reduction and there are no intermediate stmts\n    participating.  */\n   stmt_vec_info use_stmt_info;\n-  tree reduc_phi_result = gimple_phi_result (reduc_def_stmt);\n+  tree reduc_phi_result = gimple_phi_result (reduc_def_phi);\n   if (ncopies > 1\n       && (STMT_VINFO_RELEVANT (stmt_info) <= vect_used_only_live)\n       && (use_stmt_info = loop_vinfo->lookup_single_use (reduc_phi_result))\n@@ -7039,7 +7039,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \n   if (reduction_type == FOLD_LEFT_REDUCTION)\n     return vectorize_fold_left_reduction\n-      (stmt, gsi, vec_stmt, slp_node, reduc_def_stmt, code,\n+      (stmt, gsi, vec_stmt, slp_node, reduc_def_phi, code,\n        reduc_fn, ops, vectype_in, reduc_index, masks);\n \n   if (reduction_type == EXTRACT_LAST_REDUCTION)\n@@ -7070,7 +7070,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   if (slp_node)\n     phis.splice (SLP_TREE_VEC_STMTS (slp_node_instance->reduc_phis));\n   else\n-    phis.quick_push (STMT_VINFO_VEC_STMT (vinfo_for_stmt (reduc_def_stmt)));\n+    phis.quick_push (STMT_VINFO_VEC_STMT (reduc_def_info));\n \n   for (j = 0; j < ncopies; j++)\n     {\n@@ -7208,7 +7208,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   if ((!single_defuse_cycle || code == COND_EXPR) && !slp_node)\n     vect_defs[0] = gimple_get_lhs ((*vec_stmt)->stmt);\n \n-  vect_create_epilog_for_reduction (vect_defs, stmt, reduc_def_stmt,\n+  vect_create_epilog_for_reduction (vect_defs, stmt, reduc_def_phi,\n \t\t\t\t    epilog_copies, reduc_fn, phis,\n \t\t\t\t    double_reduc, slp_node, slp_node_instance,\n \t\t\t\t    cond_reduc_val, cond_reduc_op_code,"}, {"sha": "9222f9368ba71f7b67b49e9b80aed74e1be22776", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/542ad08cea053ac4a02729e2f37c67bb50019bc0/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/542ad08cea053ac4a02729e2f37c67bb50019bc0/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=542ad08cea053ac4a02729e2f37c67bb50019bc0", "patch": "@@ -921,7 +921,7 @@ struct _stmt_vec_info {\n   /* On a reduction PHI the def returned by vect_force_simple_reduction.\n      On the def returned by vect_force_simple_reduction the\n      corresponding PHI.  */\n-  gimple *reduc_def;\n+  stmt_vec_info reduc_def;\n \n   /* The number of scalar stmt references from active SLP instances.  */\n   unsigned int num_slp_uses;"}]}