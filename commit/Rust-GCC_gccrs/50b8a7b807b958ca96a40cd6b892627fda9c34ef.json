{"sha": "50b8a7b807b958ca96a40cd6b892627fda9c34ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiOGE3YjgwN2I5NThjYTk2YTQwY2Q2Yjg5MjYyN2ZkYTljMzRlZg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-08-14T08:44:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:44:31Z"}, "message": "sem_ch10.adb: Create a limited view of an incomplete type...\n\n2007-08-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb: Create a limited view of an incomplete type, to make\n\ttreatment of limited views uniform for all visible declarations in a\n\tlimited_withed package.\n\tSet flag indicating that a subprogram body for a child unit has a\n\tgenerated spec.\n\t(Analyze_Compilation_Unit): If unit is a subprogram body that has no\n\tseparate declaration, remove the unit name from visibility after\n\tcompilation, so that environment is clean for subsequent compilations.\n\t(Install_Limited_Context_Clauses): Do not install a\n\tlimited_private_with_clause unless the current unit is a body or a\n\tprivate child unit.\n\t(Analyze_Subunit, Install_Parents): Treat generic and non-generic units\n\tin the same fashion.\n\t(Install_Limited_Withed_Unit): Do not install a limited with clause if\n\tit applies to the declaration of the current package body.\n\t(Remove_Private_With_Clauses): If there is a regular with_clause for\n\tthe unit, delete Private_With_Clause from context, to prevent improper\n\thiding when processing subsequent nested packages and instantiations.\n\nFrom-SVN: r127436", "tree": {"sha": "736bf5b16443cf391effc0a90fbf87937a8a9535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/736bf5b16443cf391effc0a90fbf87937a8a9535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b8a7b807b958ca96a40cd6b892627fda9c34ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b8a7b807b958ca96a40cd6b892627fda9c34ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b8a7b807b958ca96a40cd6b892627fda9c34ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b8a7b807b958ca96a40cd6b892627fda9c34ef/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "febb581c99239fc2aea70aa3647e941604568f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febb581c99239fc2aea70aa3647e941604568f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/febb581c99239fc2aea70aa3647e941604568f06"}], "stats": {"total": 418, "additions": 248, "deletions": 170}, "files": [{"sha": "e044406fdd8d53f4567a95fc3388c62221935963", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 248, "deletions": 170, "changes": 418, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b8a7b807b958ca96a40cd6b892627fda9c34ef/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b8a7b807b958ca96a40cd6b892627fda9c34ef/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=50b8a7b807b958ca96a40cd6b892627fda9c34ef", "patch": "@@ -230,7 +230,7 @@ package body Sem_Ch10 is\n    procedure Analyze_Compilation_Unit (N : Node_Id) is\n       Unit_Node     : constant Node_Id := Unit (N);\n       Lib_Unit      : Node_Id          := Library_Unit (N);\n-      Spec_Id       : Node_Id;\n+      Spec_Id       : Entity_Id;\n       Main_Cunit    : constant Node_Id := Cunit (Main_Unit);\n       Par_Spec_Name : Unit_Name_Type;\n       Unum          : Unit_Number_Type;\n@@ -590,7 +590,7 @@ package body Sem_Ch10 is\n          P_Name : Entity_Id := P_Id;\n \n       begin\n-         Pref   := Name (Parent (Defining_Entity (N)));\n+         Pref := Name (Parent (Defining_Entity (N)));\n \n          if Nkind (Pref) = N_Expanded_Name then\n \n@@ -707,10 +707,10 @@ package body Sem_Ch10 is\n             --  If the subprogram body is a child unit, we must create a\n             --  declaration for it, in order to properly load the parent(s).\n             --  After this, the original unit does not acts as a spec, because\n-            --  there is an explicit one. If this  unit appears in a context\n+            --  there is an explicit one. If this unit appears in a context\n             --  clause, then an implicit with on the parent will be added when\n             --  installing the context. If this is the main unit, there is no\n-            --  Unit_Table entry for the declaration, (It has the unit number\n+            --  Unit_Table entry for the declaration (it has the unit number\n             --  of the main unit) and code generation is unaffected.\n \n             Unum := Get_Cunit_Unit_Number (N);\n@@ -729,7 +729,10 @@ package body Sem_Ch10 is\n                   --  Build subprogram declaration and attach parent unit to it\n                   --  This subprogram declaration does not come from source,\n                   --  Nevertheless the backend must generate debugging info for\n-                  --  it, and this must be indicated explicitly.\n+                  --  it, and this must be indicated explicitly. We also mark\n+                  --  the body entity as a child unit now, to prevent a\n+                  --  cascaded error if the spec entity cannot be entered\n+                  --  in its scope.\n \n                   declare\n                      Loc : constant Source_Ptr := Sloc (N);\n@@ -752,7 +755,12 @@ package body Sem_Ch10 is\n                      Set_Library_Unit (N, Lib_Unit);\n                      Set_Parent_Spec (Unit (Lib_Unit), Cunit (Unum));\n                      Semantics (Lib_Unit);\n+\n+                     --  Now that a separate declaration exists, the body\n+                     --  of the child unit does not act as spec any longer.\n+\n                      Set_Acts_As_Spec (N, False);\n+                     Set_Is_Child_Unit (Defining_Entity (Unit_Node));\n                      Set_Needs_Debug_Info (Defining_Entity (Unit (Lib_Unit)));\n                      Set_Comes_From_Source_Default (SCS);\n                   end;\n@@ -801,9 +809,9 @@ package body Sem_Ch10 is\n       end if;\n \n       --  With the analysis done, install the context. Note that we can't\n-      --  install the context from the with clauses as we analyze them,\n-      --  because each with clause must be analyzed in a clean visibility\n-      --  context, so we have to wait and install them all at once.\n+      --  install the context from the with clauses as we analyze them, because\n+      --  each with clause must be analyzed in a clean visibility context, so\n+      --  we have to wait and install them all at once.\n \n       Install_Context (N);\n \n@@ -838,8 +846,8 @@ package body Sem_Ch10 is\n          end if;\n       end if;\n \n-      --  The above call might have made Unit_Node an N_Subprogram_Body\n-      --  from something else, so propagate any Acts_As_Spec flag.\n+      --  The above call might have made Unit_Node an N_Subprogram_Body from\n+      --  something else, so propagate any Acts_As_Spec flag.\n \n       if Nkind (Unit_Node) = N_Subprogram_Body\n         and then Acts_As_Spec (Unit_Node)\n@@ -907,16 +915,23 @@ package body Sem_Ch10 is\n \n       end if;\n \n+      --  Remove unit from visibility, so that environment is clean for\n+      --  the next compilation, which is either the main unit or some\n+      --  other unit in the context.\n+\n       if Nkind (Unit_Node) = N_Package_Declaration\n         or else Nkind (Unit_Node) in N_Generic_Declaration\n         or else Nkind (Unit_Node) = N_Package_Renaming_Declaration\n         or else Nkind (Unit_Node) = N_Subprogram_Declaration\n+        or else\n+          (Nkind (Unit_Node) = N_Subprogram_Body\n+            and then Acts_As_Spec (Unit_Node))\n       then\n          Remove_Unit_From_Visibility (Defining_Entity (Unit_Node));\n \n-      --  If the unit is an instantiation whose body will be elaborated\n-      --  for inlining purposes, use the the proper entity of the instance.\n-      --  The entity may be missing if the instantiation was illegal.\n+      --  If the unit is an instantiation whose body will be elaborated for\n+      --  inlining purposes, use the the proper entity of the instance. The\n+      --  entity may be missing if the instantiation was illegal.\n \n       elsif Nkind (Unit_Node) = N_Package_Instantiation\n         and then not Error_Posted (Unit_Node)\n@@ -929,41 +944,41 @@ package body Sem_Ch10 is\n         or else (Nkind (Unit_Node) = N_Subprogram_Body\n                   and then not Acts_As_Spec (Unit_Node))\n       then\n-         --  Bodies that are not the main unit are compiled if they\n-         --  are generic or contain generic or inlined units. Their\n-         --  analysis brings in the context of the corresponding spec\n-         --  (unit declaration) which must be removed as well, to\n-         --  return the compilation environment to its proper state.\n+         --  Bodies that are not the main unit are compiled if they are generic\n+         --  or contain generic or inlined units. Their analysis brings in the\n+         --  context of the corresponding spec (unit declaration) which must be\n+         --  removed as well, to return the compilation environment to its\n+         --  proper state.\n \n          Remove_Context (Lib_Unit);\n          Set_Is_Immediately_Visible (Defining_Entity (Unit (Lib_Unit)), False);\n       end if;\n \n-      --  Last step is to deinstall the context we just installed\n-      --  as well as the unit just compiled.\n+      --  Last step is to deinstall the context we just installed as well as\n+      --  the unit just compiled.\n \n       Remove_Context (N);\n \n-      --  If this is the main unit and we are generating code, we must\n-      --  check that all generic units in the context have a body if they\n-      --  need it, even if they have not been instantiated. In the absence\n-      --  of .ali files for generic units, we must force the load of the body,\n-      --  just to produce the proper error if the body is absent. We skip this\n+      --  If this is the main unit and we are generating code, we must check\n+      --  that all generic units in the context have a body if they need it,\n+      --  even if they have not been instantiated. In the absence of .ali files\n+      --  for generic units, we must force the load of the body, just to\n+      --  produce the proper error if the body is absent. We skip this\n       --  verification if the main unit itself is generic.\n \n       if Get_Cunit_Unit_Number (N) = Main_Unit\n         and then Operating_Mode = Generate_Code\n         and then Expander_Active\n       then\n-         --  Check whether the source for the body of the unit must be\n-         --  included in a standalone library.\n+         --  Check whether the source for the body of the unit must be included\n+         --  in a standalone library.\n \n          Check_Body_Needed_For_SAL (Cunit_Entity (Main_Unit));\n \n          --  Indicate that the main unit is now analyzed, to catch possible\n-         --  circularities between it and generic bodies. Remove main unit\n-         --  from visibility. This might seem superfluous, but the main unit\n-         --  must not be visible in the generic body expansions that follow.\n+         --  circularities between it and generic bodies. Remove main unit from\n+         --  visibility. This might seem superfluous, but the main unit must\n+         --  not be visible in the generic body expansions that follow.\n \n          Set_Analyzed (N, True);\n          Set_Is_Immediately_Visible (Cunit_Entity (Main_Unit), False);\n@@ -1050,23 +1065,23 @@ package body Sem_Ch10 is\n \n       if Comes_From_Source (N)\n         and then\n-          (Nkind (Unit (N)) =  N_Package_Declaration            or else\n-           Nkind (Unit (N)) =  N_Generic_Package_Declaration    or else\n-           Nkind (Unit (N)) =  N_Subprogram_Declaration         or else\n-           Nkind (Unit (N)) =  N_Generic_Subprogram_Declaration)\n+          (Nkind (Unit_Node) = N_Package_Declaration         or else\n+           Nkind (Unit_Node) = N_Generic_Package_Declaration or else\n+           Nkind (Unit_Node) = N_Subprogram_Declaration      or else\n+           Nkind (Unit_Node) = N_Generic_Subprogram_Declaration)\n       then\n          declare\n             Loc  : constant Source_Ptr := Sloc (N);\n             Unum : constant Unit_Number_Type := Get_Source_Unit (Loc);\n \n          begin\n-            Spec_Id := Defining_Entity (Unit (N));\n+            Spec_Id := Defining_Entity (Unit_Node);\n             Generate_Definition (Spec_Id);\n \n-            --  See if an elaboration entity is required for possible\n-            --  access before elaboration checking. Note that we must\n-            --  allow for this even if -gnatE is not set, since a client\n-            --  may be compiled in -gnatE mode and reference the entity.\n+            --  See if an elaboration entity is required for possible access\n+            --  before elaboration checking. Note that we must allow for this\n+            --  even if -gnatE is not set, since a client may be compiled in\n+            --  -gnatE mode and reference the entity.\n \n             --  These entities are also used by the binder to prevent multiple\n             --  attempts to execute the elaboration code for the library case\n@@ -1168,7 +1183,7 @@ package body Sem_Ch10 is\n          --  Push current compilation unit as scope, so that the test for\n          --  being within an obsolescent unit will work correctly.\n \n-         Push_Scope (Defining_Entity (Unit (N)));\n+         Push_Scope (Defining_Entity (Unit_Node));\n \n          --  Loop through context items to deal with with clauses\n \n@@ -1375,14 +1390,14 @@ package body Sem_Ch10 is\n                                                       Unit_Name)\n                               then\n                                  Error_Msg_Sloc := Sloc (It);\n+                                 Error_Msg_N\n+                                   (\"simultaneous visibility of limited \"\n+                                    & \"and unlimited views not allowed\",\n+                                    Item);\n                                  Error_Msg_NE\n-                                   (\"unlimited view visible through the\"\n-                                    & \" context clause found #\",\n+                                   (\"\\unlimited view visible through \"\n+                                    & \"context clause #\",\n                                     Item, It);\n-                                 Error_Msg_N\n-                                   (\"\\simultaneous visibility of the limited\"\n-                                    & \" and unlimited views not allowed\"\n-                                    , Item);\n                                  exit;\n \n                               elsif Nkind (Unit_Name) = N_Identifier then\n@@ -1979,7 +1994,9 @@ package body Sem_Ch10 is\n          --  all the parents are bodies. Restore full visibility of their\n          --  private entities.\n \n-         if Ekind (Scop) = E_Package then\n+         if Ekind (Scop) = E_Package\n+           or else Ekind (Scop) = E_Generic_Package\n+         then\n             Set_In_Package_Body (Scop);\n             Install_Private_Declarations (Scop);\n          end if;\n@@ -2069,7 +2086,9 @@ package body Sem_Ch10 is\n          --  context includes another subunit of the same parent which in\n          --  turn includes a child unit in its context.\n \n-         if Ekind (Par_Unit) = E_Package then\n+         if Ekind (Par_Unit) = E_Package\n+           or else Ekind (Par_Unit) = E_Generic_Package\n+         then\n             if not Is_Immediately_Visible (Par_Unit)\n               or else (Present (First_Entity (Par_Unit))\n                         and then not Is_Immediately_Visible\n@@ -2236,15 +2255,15 @@ package body Sem_Ch10 is\n       U := Unit (Library_Unit (N));\n       Intunit := Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit));\n \n-      --  Following checks are skipped for dummy packages (those supplied\n-      --  for with's where no matching file could be found). Such packages\n-      --  are identified by the Sloc value being set to No_Location\n+      --  Following checks are skipped for dummy packages (those supplied for\n+      --  with's where no matching file could be found). Such packages are\n+      --  identified by the Sloc value being set to No_Location\n \n       if Sloc (U) /= No_Location then\n \n-         --  Check restrictions, except that we skip the check if this\n-         --  is an internal unit unless we are compiling the internal\n-         --  unit as the main unit. We also skip this for dummy packages.\n+         --  Check restrictions, except that we skip the check if this is an\n+         --  internal unit unless we are compiling the internal unit as the\n+         --  main unit. We also skip this for dummy packages.\n \n          Check_Restriction_No_Dependence (Nam, N);\n \n@@ -2266,10 +2285,10 @@ package body Sem_Ch10 is\n             Special_Exception_Package_Used := True;\n          end if;\n \n-         --  Check for inappropriate with of internal implementation unit\n-         --  if we are currently compiling the main unit and the main unit\n-         --  is itself not an internal unit. We do not issue this message\n-         --  for implicit with's generated by the compiler itself.\n+         --  Check for inappropriate with of internal implementation unit if we\n+         --  are currently compiling the main unit and the main unit is itself\n+         --  not an internal unit. We do not issue this message for implicit\n+         --  with's generated by the compiler itself.\n \n          if Implementation_Unit_Warnings\n            and then Current_Sem_Unit = Main_Unit\n@@ -2306,11 +2325,11 @@ package body Sem_Ch10 is\n       if Unit_Kind in N_Generic_Declaration then\n          E_Name := Defining_Entity (U);\n \n-      --  Note: in the following test, Unit_Kind is the original Nkind, but\n-      --  in the case of an instantiation, semantic analysis above will\n-      --  have replaced the unit by its instantiated version. If the instance\n-      --  body has been generated, the instance now denotes the body entity.\n-      --  For visibility purposes we need the entity of its spec.\n+      --  Note: in the following test, Unit_Kind is the original Nkind, but in\n+      --  the case of an instantiation, semantic analysis above will have\n+      --  replaced the unit by its instantiated version. If the instance body\n+      --  has been generated, the instance now denotes the body entity. For\n+      --  visibility purposes we need the entity of its spec.\n \n       elsif (Unit_Kind = N_Package_Instantiation\n               or else Nkind (Original_Node (Unit (Library_Unit (N)))) =\n@@ -2330,9 +2349,9 @@ package body Sem_Ch10 is\n \n       elsif Unit_Kind in N_Subprogram_Instantiation then\n \n-         --  Instantiation node is replaced with a wrapper package.\n-         --  Retrieve the visible subprogram created by the instance from\n-         --  the corresponding attribute of the wrapper.\n+         --  Instantiation node is replaced with a wrapper package. Retrieve\n+         --  the visible subprogram created by the instance from corresponding\n+         --  attribute of the wrapper.\n \n          E_Name := Related_Instance (Defining_Entity (U));\n \n@@ -2469,8 +2488,8 @@ package body Sem_Ch10 is\n \n       elsif Nkind (Lib_Unit) = N_Subunit then\n \n-         --  The parent is itself a body. The parent entity is to be found\n-         --  in the corresponding spec.\n+         --  The parent is itself a body. The parent entity is to be found in\n+         --  the corresponding spec.\n \n          Sub_Parent := Library_Unit (N);\n          Curr_Unit  := Defining_Entity (Unit (Library_Unit (Sub_Parent)));\n@@ -2519,9 +2538,9 @@ package body Sem_Ch10 is\n                Curr_Private : Boolean   := Is_Private_Library_Unit (Curr_Unit);\n \n             begin\n-               --  If the child unit is a public child then locate\n-               --  the nearest private ancestor; Child_Parent will\n-               --  then be set to the parent of that ancestor.\n+               --  If the child unit is a public child then locate the nearest\n+               --  private ancestor. Child_Parent will then be set to the\n+               --  parent of that ancestor.\n \n                if not Is_Private_Library_Unit (Priv_Child) then\n                   while Present (Prv_Ancestor)\n@@ -2710,18 +2729,15 @@ package body Sem_Ch10 is\n    is\n       Loc    : constant Source_Ptr := Sloc (N);\n       P      : constant Node_Id    := Parent_Spec (Child_Unit);\n-\n-      P_Unit : Node_Id    := Unit (P);\n-\n+      P_Unit : Node_Id             := Unit (P);\n       P_Name : constant Entity_Id  := Get_Parent_Entity (P_Unit);\n       Withn  : Node_Id;\n \n       function Build_Ancestor_Name (P : Node_Id) return Node_Id;\n       --  Build prefix of child unit name. Recurse if needed\n \n       function Build_Unit_Name return Node_Id;\n-      --  If the unit is a child unit, build qualified name with all\n-      --  ancestors.\n+      --  If the unit is a child unit, build qualified name with all ancestors\n \n       -------------------------\n       -- Build_Ancestor_Name --\n@@ -2775,19 +2791,19 @@ package body Sem_Ch10 is\n    --  Start of processing for Implicit_With_On_Parent\n \n    begin\n-      --  The unit of the current compilation may be a package body\n-      --  that replaces an instance node. In this case we need the\n-      --  original instance node to construct the proper parent name.\n+      --  The unit of the current compilation may be a package body that\n+      --  replaces an instance node. In this case we need the original instance\n+      --  node to construct the proper parent name.\n \n       if Nkind (P_Unit) = N_Package_Body\n         and then Nkind (Original_Node (P_Unit)) = N_Package_Instantiation\n       then\n          P_Unit := Original_Node (P_Unit);\n       end if;\n \n-      --  We add the implicit with if the child unit is the current unit\n-      --  being compiled. If the current unit is a body, we do not want\n-      --  to add an implicit_with a second time to the corresponding spec.\n+      --  We add the implicit with if the child unit is the current unit being\n+      --  compiled. If the current unit is a body, we do not want to add an\n+      --  implicit_with a second time to the corresponding spec.\n \n       if Nkind (Child_Unit) = N_Package_Declaration\n         and then Child_Unit /= Unit (Cunit (Current_Sem_Unit))\n@@ -2918,8 +2934,8 @@ package body Sem_Ch10 is\n \n             Decl_Node := Unit_Declaration_Node (Uname_Node);\n \n-            --  If the unit is a subprogram instance, it appears nested\n-            --  within a package that carries the parent information.\n+            --  If the unit is a subprogram instance, it appears nested within\n+            --  a package that carries the parent information.\n \n             if Is_Generic_Instance (Uname_Node)\n               and then Ekind (Uname_Node) /= E_Package\n@@ -3213,8 +3229,8 @@ package body Sem_Ch10 is\n                           (\"unlimited view visible through use clause \", W);\n                         return;\n                      end if;\n-\n                   end if;\n+\n                   Next (Nam);\n                end loop;\n             end if;\n@@ -3264,7 +3280,6 @@ package body Sem_Ch10 is\n          --  unit to check if it is a descendant of named library unit.\n \n          Curr_Parent := Parent (Item);\n-\n          while Present (Parent_Spec (Unit (Curr_Parent)))\n            and then Curr_Parent /= Child_Parent\n          loop\n@@ -3422,15 +3437,27 @@ package body Sem_Ch10 is\n                Check_Renamings (Parent_Spec (Unit (N)), Item);\n             end if;\n \n-            --  A unit may have a limited with on itself if it has a\n-            --  limited with_clause on one of its child units. In that\n-            --  case it is already being compiled and it makes no sense\n-            --  to install its limited view.\n+            --  A unit may have a limited with on itself if it has a limited\n+            --  with_clause on one of its child units. In that case it is\n+            --  already being compiled and it makes no sense to install its\n+            --  limited view.\n+\n+            --  If the item is a limited_private_with_clause, install it if the\n+            --  current unit is a body or if it is a private child. Otherwise\n+            --  the private clause is installed before analyzing the private\n+            --  part of the current unit.\n \n             if Library_Unit (Item) /= Cunit (Current_Sem_Unit)\n               and then not Limited_View_Installed (Item)\n             then\n-               Install_Limited_Withed_Unit (Item);\n+               if not Private_Present (Item)\n+                or else Private_Present (N)\n+                or else Nkind (Unit (N)) = N_Package_Body\n+                or else Nkind (Unit (N)) = N_Subprogram_Body\n+                or else Nkind (Unit (N)) = N_Subunit\n+               then\n+                  Install_Limited_Withed_Unit (Item);\n+               end if;\n             end if;\n \n          --  All items other than Limited_With clauses are ignored (they were\n@@ -3475,7 +3502,8 @@ package body Sem_Ch10 is\n                      --  This is usually the case when analyzing a body that\n                      --  has regular with-clauses, when the spec has limited\n                      --  ones.\n-                     --  if the non-limited view is still incomplete, it is\n+\n+                     --  If the non-limited view is still incomplete, it is\n                      --  the dummy entry already created, and the declaration\n                      --  cannot be reanalyzed. This is the case when installing\n                      --  a parent unit that has limited with-clauses.\n@@ -3536,12 +3564,12 @@ package body Sem_Ch10 is\n          Error_Msg_N (\"parent unit cannot be a renaming\", Lib_Unit);\n          raise Unrecoverable_Error;\n \n-      --  Verify that a child of an instance is itself an instance, or\n-      --  the renaming of one. Given that an instance that is a unit is\n-      --  replaced with a package declaration, check against the original\n-      --  node. The parent may be currently being instantiated, in which\n-      --  case it appears as a declaration, but the generic_parent is\n-      --  already established indicating that we deal with an instance.\n+      --  Verify that a child of an instance is itself an instance, or the\n+      --  renaming of one. Given that an instance that is a unit is replaced\n+      --  with a package declaration, check against the original node. The\n+      --  parent may be currently being instantiated, in which case it appears\n+      --  as a declaration, but the generic_parent is already established\n+      --  indicating that we deal with an instance.\n \n       elsif Nkind (Original_Node (P)) = N_Package_Instantiation then\n \n@@ -3572,13 +3600,13 @@ package body Sem_Ch10 is\n       Install_Limited_Context_Clauses (Parent_Spec (Lib_Unit));\n       Install_Siblings (P_Name, Parent (Lib_Unit));\n \n-      --  The child unit is in the declarative region of the parent. The\n-      --  parent must therefore appear in the scope stack and be visible,\n-      --  as when compiling the corresponding body. If the child unit is\n-      --  private or it is a package body, private declarations must be\n-      --  accessible as well. Use declarations in the parent must also\n-      --  be installed. Finally, other child units of the same parent that\n-      --  are in the context are immediately visible.\n+      --  The child unit is in the declarative region of the parent. The parent\n+      --  must therefore appear in the scope stack and be visible, as when\n+      --  compiling the corresponding body. If the child unit is private or it\n+      --  is a package body, private declarations must be accessible as well.\n+      --  Use declarations in the parent must also be installed. Finally, other\n+      --  child units of the same parent that are in the context are\n+      --  immediately visible.\n \n       --  Find entity for compilation unit, and set its private descendant\n       --  status as needed.\n@@ -3602,8 +3630,8 @@ package body Sem_Ch10 is\n       Install_Visible_Declarations (P_Name);\n       Set_Use (Visible_Declarations (P_Spec));\n \n-      --  If the parent is a generic unit, its formal part may contain\n-      --  formal packages and use clauses for them.\n+      --  If the parent is a generic unit, its formal part may contain formal\n+      --  packages and use clauses for them.\n \n       if Ekind (P_Name) = E_Generic_Package then\n          Set_Use (Generic_Formal_Declarations (Parent (P_Spec)));\n@@ -3662,9 +3690,9 @@ package body Sem_Ch10 is\n       Id   : Entity_Id;\n       Prev : Entity_Id;\n    begin\n-      --  Iterate over explicit with clauses, and check whether the\n-      --  scope of each entity is an ancestor of the current unit, in\n-      --  which case it is immediately visible.\n+      --  Iterate over explicit with clauses, and check whether the scope of\n+      --  each entity is an ancestor of the current unit, in which case it is\n+      --  immediately visible.\n \n       Item := First (Context_Items (N));\n       while Present (Item) loop\n@@ -3717,11 +3745,11 @@ package body Sem_Ch10 is\n                   end;\n                end if;\n \n-            --  The With_Clause may be on a grand-child or one of its\n-            --  further descendants, which makes a child immediately visible.\n-            --  Examine ancestry to determine whether such a child exists.\n-            --  For example, if current unit is A.C, and with_clause is on\n-            --  A.X.Y.Z, then X is immediately visible.\n+            --  The With_Clause may be on a grand-child or one of its further\n+            --  descendants, which makes a child immediately visible. Examine\n+            --  ancestry to determine whether such a child exists. For example,\n+            --  if current unit is A.C, and with_clause is on A.X.Y.Z, then X\n+            --  is immediately visible.\n \n             elsif Is_Child_Unit (Id) then\n                declare\n@@ -3816,14 +3844,14 @@ package body Sem_Ch10 is\n \n                         if Kind = N_Package_Declaration then\n                            Error_Msg_N\n-                             (\"simultaneous visibility of the limited and\" &\n-                              \" unlimited views not allowed\", N);\n+                             (\"simultaneous visibility of the limited and \" &\n+                              \"unlimited views not allowed\", N);\n                            Error_Msg_Sloc := Sloc (Item);\n                            Error_Msg_NE\n-                             (\"\\unlimited view of & visible through the\" &\n-                              \" context clause found #\", N, P);\n+                             (\"\\\\  unlimited view of & visible through the \" &\n+                              \"context clause #\", N, P);\n                            Error_Msg_Sloc := Sloc (Decl);\n-                           Error_Msg_NE (\"\\and the renaming found #\", N, P);\n+                           Error_Msg_NE (\"\\\\  and the renaming #\", N, P);\n                         end if;\n \n                         return True;\n@@ -3890,9 +3918,14 @@ package body Sem_Ch10 is\n       --  This unusual case will happen when a unit has a limited_with clause\n       --  on one of its children. The compilation of the child forces the\n       --  load of the parent which tries to install the limited view of the\n-      --  child again.\n+      --  child again. Installing the limited view must also be disabled\n+      --  when compiling the body of the child unit.\n \n-      if P = Cunit_Entity (Current_Sem_Unit) then\n+      if P = Cunit_Entity (Current_Sem_Unit)\n+        or else\n+         (Nkind (Unit (Cunit (Current_Sem_Unit))) = N_Package_Body\n+           and then  P = Main_Unit_Entity)\n+      then\n          return;\n       end if;\n \n@@ -4013,7 +4046,7 @@ package body Sem_Ch10 is\n       --  by the shadow ones.\n \n       --  This code must be kept synchronized with the code that replaces the\n-      --  the shadow entities by the real entities (see body of Remove_Limited\n+      --  shadow entities by the real entities (see body of Remove_Limited\n       --  With_Clause); otherwise the contents of the homonym chains are not\n       --  consistent.\n \n@@ -4035,7 +4068,8 @@ package body Sem_Ch10 is\n          --  Replace the real entities by the shadow entities of the limited\n          --  view. The first element of the limited view is a header that is\n          --  used to reference the first shadow entity in the private part\n-         --  of the package.\n+         --  of the package. Successive elements are the limited views of the\n+         --  type (including regular incomplete types) declared in the package.\n \n          Lim_Header := Limited_View (P);\n \n@@ -4055,18 +4089,10 @@ package body Sem_Ch10 is\n \n                begin\n                   Prev := Current_Entity (Lim_Typ);\n+                  E := Prev;\n \n-                  --  Handle incomplete types\n-\n-                  if Ekind (Prev) = E_Incomplete_Type\n-                    and then Present (Full_View (Prev))\n-                  then\n-                     E := Full_View (Prev);\n-                  else\n-                     E := Prev;\n-                  end if;\n-\n-                  --  Replace E in the homonyms list\n+                  --  Replace E in the homonyms list, so that the limited\n+                  --  view becomes available.\n \n                   if E = Non_Limited_View (Lim_Typ) then\n                      Set_Homonym (Lim_Typ, Homonym (Prev));\n@@ -4075,21 +4101,21 @@ package body Sem_Ch10 is\n                   else\n                      loop\n                         E := Homonym (Prev);\n-                        pragma Assert (Present (E));\n \n-                        --  Handle incomplete types\n+                        --  E may have been removed when installing a\n+                        --  previous limited_with_clause.\n \n-                        if Ekind (E) = E_Incomplete_Type then\n-                           E := Full_View (E);\n-                        end if;\n+                        exit when No (E);\n \n                         exit when E = Non_Limited_View (Lim_Typ);\n \n                         Prev := Homonym (Prev);\n                      end loop;\n \n-                     Set_Homonym (Lim_Typ, Homonym (Homonym (Prev)));\n-                     Set_Homonym (Prev, Lim_Typ);\n+                     if Present (E) then\n+                        Set_Homonym (Lim_Typ, Homonym (Homonym (Prev)));\n+                        Set_Homonym (Prev, Lim_Typ);\n+                     end if;\n                   end if;\n                end;\n \n@@ -4282,7 +4308,7 @@ package body Sem_Ch10 is\n          begin\n             U2 := Homonym (Uname);\n             while Present (U2)\n-              and U2 /= Standard_Standard\n+              and then U2 /= Standard_Standard\n            loop\n                P2 := Scope (U2);\n                Decl2  := Unit_Declaration_Node (P2);\n@@ -4297,7 +4323,7 @@ package body Sem_Ch10 is\n                      Error_Msg_N (\"illegal with_clause\", With_Clause);\n                      Error_Msg_N\n                        (\"\\child unit has visible homograph\" &\n-                           \" ('R'M 8.3(26), 10.1.1(19))\",\n+                           \" (RM 8.3(26), 10.1.1(19))\",\n                          With_Clause);\n                      exit;\n \n@@ -4322,7 +4348,7 @@ package body Sem_Ch10 is\n                         Error_Msg_N (\"illegal with_clause\", Prev_Clause);\n                         Error_Msg_N\n                           (\"\\child unit has visible homograph\" &\n-                              \" ('R'M 8.3(26), 10.1.1(19))\",\n+                              \" (RM 8.3(26), 10.1.1(19))\",\n                             Prev_Clause);\n                         exit;\n                      end;\n@@ -4357,15 +4383,14 @@ package body Sem_Ch10 is\n    -- Load_Needed_Body --\n    -----------------------\n \n-   --  N is a generic unit named in a with clause, or else it is\n-   --  a unit that contains a generic unit or an inlined function.\n-   --  In order to perform an instantiation, the body of the unit\n-   --  must be present. If the unit itself is generic, we assume\n-   --  that an instantiation follows, and  load and analyze the body\n-   --  unconditionally. This forces analysis of the spec as well.\n+   --  N is a generic unit named in a with clause, or else it is a unit that\n+   --  contains a generic unit or an inlined function. In order to perform an\n+   --  instantiation, the body of the unit must be present. If the unit itself\n+   --  is generic, we assume that an instantiation follows, and load & analyze\n+   --  the body unconditionally. This forces analysis of the spec as well.\n \n-   --  If the unit is not generic, but contains a generic unit, it\n-   --  is loaded on demand, at the point of instantiation (see ch12).\n+   --  If the unit is not generic, but contains a generic unit, it is loaded on\n+   --  demand, at the point of instantiation (see ch12).\n \n    procedure Load_Needed_Body (N : Node_Id; OK : out Boolean) is\n       Body_Name : Unit_Name_Type;\n@@ -4569,16 +4594,17 @@ package body Sem_Ch10 is\n             --  For each library_package_declaration in the environment, there\n             --  is an implicit declaration of a *limited view* of that library\n             --  package. The limited view of a package contains:\n-            --\n+\n             --   * For each nested package_declaration, a declaration of the\n             --     limited view of that package, with the same defining-\n             --     program-unit name.\n-            --\n+\n             --   * For each type_declaration in the visible part, an incomplete\n             --     type-declaration with the same defining_identifier, whose\n             --     completion is the type_declaration. If the type_declaration\n             --     is tagged, then the incomplete_type_declaration is tagged\n             --     incomplete.\n+\n             --     The partial view is tagged if the declaration has the\n             --     explicit keyword, or else if it is a type extension, both\n             --     of which can be ascertained syntactically.\n@@ -4622,7 +4648,9 @@ package body Sem_Ch10 is\n \n                Set_Non_Limited_View (Lim_Typ, Comp_Typ);\n \n-            elsif Nkind (Decl) = N_Private_Type_Declaration then\n+            elsif Nkind (Decl) = N_Private_Type_Declaration\n+              or else Nkind (Decl) = N_Incomplete_Type_Declaration\n+            then\n                Comp_Typ := Defining_Identifier (Decl);\n \n                if not Analyzed_Unit then\n@@ -4716,8 +4744,8 @@ package body Sem_Ch10 is\n    begin\n       pragma Assert (Limited_Present (N));\n \n-      --  A library_item mentioned in a limited_with_clause shall be\n-      --  a package_declaration, not a subprogram_declaration,\n+      --  A library_item mentioned in a limited_with_clause shall\n+      --  be a package_declaration, not a subprogram_declaration,\n       --  generic_declaration, generic_instantiation, or\n       --  package_renaming_declaration\n \n@@ -4779,8 +4807,8 @@ package body Sem_Ch10 is\n       Set_Is_Internal (Lim_Header);\n       Set_Limited_View (P, Lim_Header);\n \n-      --  Create the auxiliary chain. All the shadow entities are appended\n-      --  to the list of entities of the limited-view header\n+      --  Create the auxiliary chain. All the shadow entities are appended to\n+      --  the list of entities of the limited-view header\n \n       Build_Chain\n         (Scope      => P,\n@@ -4815,9 +4843,9 @@ package body Sem_Ch10 is\n    procedure Check_Body_Needed_For_SAL (Unit_Name : Entity_Id) is\n \n       function Entity_Needs_Body (E : Entity_Id) return Boolean;\n-      --  Determine whether use of entity E might require the presence\n-      --  of its body. For a package this requires a recursive traversal\n-      --  of all nested declarations.\n+      --  Determine whether use of entity E might require the presence of its\n+      --  body. For a package this requires a recursive traversal of all nested\n+      --  declarations.\n \n       ---------------------------\n       -- Entity_Needed_For_SAL --\n@@ -4960,8 +4988,8 @@ package body Sem_Ch10 is\n       Item := First (Context_Items (N));\n       while Present (Item) loop\n \n-         --  We are interested only in with clauses which got installed\n-         --  on entry, as indicated by their Context_Installed flag set\n+         --  We are interested only in with clauses which got installed on\n+         --  entry, as indicated by their Context_Installed flag set\n \n          if Nkind (Item) = N_With_Clause\n            and then Limited_Present (Item)\n@@ -5107,9 +5135,10 @@ package body Sem_Ch10 is\n                   loop\n                      Prev := Homonym (Prev);\n                   end loop;\n-                  pragma Assert (Present (Prev));\n \n-                  Set_Homonym (Prev, E);\n+                  if Present (Prev) then\n+                     Set_Homonym (Prev, E);\n+                  end if;\n                end if;\n \n                --  We must also set the next homonym entity of the real entity\n@@ -5188,23 +5217,72 @@ package body Sem_Ch10 is\n    procedure Remove_Private_With_Clauses (Comp_Unit : Node_Id) is\n       Item : Node_Id;\n \n+      function In_Regular_With_Clause (E : Entity_Id) return Boolean;\n+      --  Check whether a given unit appears in a regular with_clause.\n+      --  Used to determine whether a private_with_clause, implicit or\n+      --  explicit, should be ignored.\n+\n+      ----------------------------\n+      -- In_Regular_With_Clause --\n+      ----------------------------\n+\n+      function In_Regular_With_Clause (E : Entity_Id) return Boolean\n+      is\n+         Item : Node_Id;\n+\n+      begin\n+         Item := First (Context_Items (Comp_Unit));\n+         while Present (Item) loop\n+            if Nkind (Item) = N_With_Clause\n+              and then Entity (Name (Item)) = E\n+              and then not Private_Present (Item)\n+            then\n+               return True;\n+            end if;\n+            Next (Item);\n+         end loop;\n+\n+         return False;\n+      end In_Regular_With_Clause;\n+\n+   --  Start of processing for Remove_Private_With_Clauses\n+\n    begin\n       Item := First (Context_Items (Comp_Unit));\n       while Present (Item) loop\n          if Nkind (Item) = N_With_Clause\n            and then Private_Present (Item)\n          then\n-            if Limited_Present (Item) then\n+\n+            --  If private_with_clause is redundant, remove it from\n+            --  context, as a small optimization to subsequent handling\n+            --  of private_with clauses in other nested packages..\n+\n+            if In_Regular_With_Clause (Entity (Name (Item))) then\n+               declare\n+                  Nxt : constant Node_Id := Next (Item);\n+\n+               begin\n+                  Remove (Item);\n+                  Item := Nxt;\n+               end;\n+\n+            elsif Limited_Present (Item) then\n                if not Limited_View_Installed (Item) then\n                   Remove_Limited_With_Clause (Item);\n                end if;\n+\n+               Next (Item);\n+\n             else\n                Remove_Unit_From_Visibility (Entity (Name (Item)));\n                Set_Context_Installed (Item, False);\n+               Next (Item);\n             end if;\n-         end if;\n \n-         Next (Item);\n+         else\n+            Next (Item);\n+         end if;\n       end loop;\n    end Remove_Private_With_Clauses;\n "}]}