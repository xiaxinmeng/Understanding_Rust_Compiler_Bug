{"sha": "eb647f7d99c589f55a643403e7ab0e3cf5e78867", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2NDdmN2Q5OWM1ODlmNTVhNjQzNDAzZTdhYjBlM2NmNWU3ODg2Nw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-12-06T21:49:55Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-12-06T21:49:55Z"}, "message": "re PR libfortran/29810 (Unsatisfied symbol \"fmodl\" in libgfortran shared library)\n\n\tPR libfortran/29810\n\t* intrinsics/c99_functions.c (fmodf, fmodl, floorl): New functions.\n\t* c99_protos.h (fmodf, fmodl, floorl): New prototypes.\n\t* configure.ac: Check for fmodf, fmod and fmodl.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\nFrom-SVN: r119599", "tree": {"sha": "0a0aa053c7b5edceafd1800778f20b7eb32a9f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a0aa053c7b5edceafd1800778f20b7eb32a9f8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb647f7d99c589f55a643403e7ab0e3cf5e78867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb647f7d99c589f55a643403e7ab0e3cf5e78867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb647f7d99c589f55a643403e7ab0e3cf5e78867", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb647f7d99c589f55a643403e7ab0e3cf5e78867/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4c811bd14e0b3ea5a995b711aae60ee1d3daaab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c811bd14e0b3ea5a995b711aae60ee1d3daaab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c811bd14e0b3ea5a995b711aae60ee1d3daaab"}], "stats": {"total": 317, "additions": 317, "deletions": 0}, "files": [{"sha": "6d9739a6f8c1d6e38642f07a6d27896819998ca0", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=eb647f7d99c589f55a643403e7ab0e3cf5e78867", "patch": "@@ -1,3 +1,12 @@\n+2006-12-06  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/29810\n+\t* intrinsics/c99_functions.c (fmodf, fmodl, floorl): New functions.\n+\t* c99_protos.h (fmodf, fmodl, floorl): New prototypes.\n+\t* configure.ac: Check for fmodf, fmod and fmodl.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2006-12-06  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/30009"}, {"sha": "369299dc77dca6f476f560a479652068e877a08c", "filename": "libgfortran/c99_protos.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=eb647f7d99c589f55a643403e7ab0e3cf5e78867", "patch": "@@ -100,6 +100,21 @@ extern float fabsf(float);\n extern float floorf(float);\n #endif\n \n+#ifndef HAVE_FLOORL\n+#define HAVE_FLOORL 1\n+extern long double floorl (long double x);\n+#endif\n+\n+#ifndef HAVE_FMODF\n+#define HAVE_FMODF 1\n+extern float fmodf (float x, float y);\n+#endif\n+\n+#ifndef HAVE_FMODL\n+#define HAVE_FMODL 1\n+extern long double fmodl (long double x, long double y);\n+#endif\n+\n #ifndef HAVE_FREXPF\n #define HAVE_FREXPF 1\n extern float frexpf(float, int *);"}, {"sha": "11f7cc6db754f17da87b734e5b48447fb8e32d3b", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=eb647f7d99c589f55a643403e7ab0e3cf5e78867", "patch": "@@ -327,6 +327,15 @@\n /* libm includes floorl */\n #undef HAVE_FLOORL\n \n+/* libm includes fmod */\n+#undef HAVE_FMOD\n+\n+/* libm includes fmodf */\n+#undef HAVE_FMODF\n+\n+/* libm includes fmodl */\n+#undef HAVE_FMODL\n+\n /* Define to 1 if you have the `fork' function. */\n #undef HAVE_FORK\n "}, {"sha": "d775aec393582c5aa14b60d1ac417a3481ba64be", "filename": "libgfortran/configure", "status": "modified", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=eb647f7d99c589f55a643403e7ab0e3cf5e78867", "patch": "@@ -14893,6 +14893,237 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for fmodf in -lm\" >&5\n+echo $ECHO_N \"checking for fmodf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_fmodf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char fmodf ();\n+int\n+main ()\n+{\n+fmodf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_fmodf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_fmodf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_fmodf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_fmodf\" >&6\n+if test $ac_cv_lib_m_fmodf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_FMODF 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for fmod in -lm\" >&5\n+echo $ECHO_N \"checking for fmod in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_fmod+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char fmod ();\n+int\n+main ()\n+{\n+fmod ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_fmod=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_fmod=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_fmod\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_fmod\" >&6\n+if test $ac_cv_lib_m_fmod = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_FMOD 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for fmodl in -lm\" >&5\n+echo $ECHO_N \"checking for fmodl in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_fmodl+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char fmodl ();\n+int\n+main ()\n+{\n+fmodl ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_fmodl=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_fmodl=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_fmodl\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_fmodl\" >&6\n+if test $ac_cv_lib_m_fmodl = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_FMODL 1\n+_ACEOF\n+\n+fi\n+\n echo \"$as_me:$LINENO: checking for frexpf in -lm\" >&5\n echo $ECHO_N \"checking for frexpf in -lm... $ECHO_C\" >&6\n if test \"${ac_cv_lib_m_frexpf+set}\" = set; then"}, {"sha": "23e80fda38bcdb8df7e53528f2027314c43059e1", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=eb647f7d99c589f55a643403e7ab0e3cf5e78867", "patch": "@@ -241,6 +241,9 @@ AC_CHECK_LIB([m],[cabsl],[AC_DEFINE([HAVE_CABSL],[1],[libm includes cabsl])])\n AC_CHECK_LIB([m],[floorf],[AC_DEFINE([HAVE_FLOORF],[1],[libm includes floorf])])\n AC_CHECK_LIB([m],[floor],[AC_DEFINE([HAVE_FLOOR],[1],[libm includes floor])])\n AC_CHECK_LIB([m],[floorl],[AC_DEFINE([HAVE_FLOORL],[1],[libm includes floorl])])\n+AC_CHECK_LIB([m],[fmodf],[AC_DEFINE([HAVE_FMODF],[1],[libm includes fmodf])])\n+AC_CHECK_LIB([m],[fmod],[AC_DEFINE([HAVE_FMOD],[1],[libm includes fmod])])\n+AC_CHECK_LIB([m],[fmodl],[AC_DEFINE([HAVE_FMODL],[1],[libm includes fmodl])])\n AC_CHECK_LIB([m],[frexpf],[AC_DEFINE([HAVE_FREXPF],[1],[libm includes frexpf])])\n AC_CHECK_LIB([m],[frexp],[AC_DEFINE([HAVE_FREXP],[1],[libm includes frexp])])\n AC_CHECK_LIB([m],[frexpl],[AC_DEFINE([HAVE_FREXPL],[1],[libm includes frexpl])])"}, {"sha": "7278169684f9dfe6a5b87cbefd0f053b4fe4839c", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb647f7d99c589f55a643403e7ab0e3cf5e78867/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=eb647f7d99c589f55a643403e7ab0e3cf5e78867", "patch": "@@ -294,6 +294,15 @@ floorf(float x)\n }\n #endif\n \n+#ifndef HAVE_FMODF\n+#define HAVE_FMODF 1\n+float\n+fmodf (float x, float y)\n+{\n+  return (float) fmod (x, y);\n+}\n+#endif\n+\n #ifndef HAVE_FREXPF\n #define HAVE_FREXPF 1\n float\n@@ -592,6 +601,47 @@ log10l(long double x)\n #endif\n \n \n+#ifndef HAVE_FLOORL\n+#define HAVE_FLOORL 1\n+long double\n+floorl (long double x)\n+{\n+  /* Zero, possibly signed.  */\n+  if (x == 0)\n+    return x;\n+\n+  /* Large magnitude.  */\n+  if (x > DBL_MAX || x < (-DBL_MAX))\n+    return x;\n+\n+  /* Small positive values.  */\n+  if (x >= 0 && x < DBL_MIN)\n+    return 0;\n+\n+  /* Small negative values.  */\n+  if (x < 0 && x > (-DBL_MIN))\n+    return -1;\n+\n+  return floor (x);\n+}\n+#endif\n+\n+\n+#ifndef HAVE_FMODL\n+#define HAVE_FMODL 1\n+long double\n+fmodl (long double x, long double y)\n+{\n+  if (y == 0.0L)\n+    return 0.0L;\n+\n+  /* Need to check that the result has the same sign as x and magnitude\n+     less than the magnitude of y.  */\n+  return x - floorl (x / y) * y;\n+}\n+#endif\n+\n+\n #if !defined(HAVE_CABSF)\n #define HAVE_CABSF 1\n float"}]}