{"sha": "f517845606b6b8290b52f2068775a9325eceff6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxNzg0NTYwNmI2YjgyOTBiNTJmMjA2ODc3NWE5MzI1ZWNlZmY2Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2009-08-09T18:38:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-08-09T18:38:04Z"}, "message": "c-common.c (c_fully_fold_internal): Issue a warning if a binary operation overflows.\n\ngcc/\n\t* c-common.c (c_fully_fold_internal): Issue a warning if a binary\n\toperation overflows.  Likewise non-cast unary arithmetic.\n\tIf one arm of a conditional expression is always taken,\n\tinhibit evaluation warnings for the other arm.  Likewise inhibit\n\tevaluation warnings for the second && or || operand if the first\n\toperand is enough to determine the result.\n\t* c-typeck.c (build_conditional_expr): Apply the same inhibition\n\trules here.\n\t(build_binary_op): Prevent duplicate evaluation warnings.\n\ngcc/testsuite/\n\t* gcc.dg/overflow-warn-8.c: New test.\n\nFrom-SVN: r150594", "tree": {"sha": "4f384af8342874e6f72150b4b11a160bb03fa4be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f384af8342874e6f72150b4b11a160bb03fa4be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f517845606b6b8290b52f2068775a9325eceff6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f517845606b6b8290b52f2068775a9325eceff6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f517845606b6b8290b52f2068775a9325eceff6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f517845606b6b8290b52f2068775a9325eceff6b/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f048d2f21ea75e65fe9000cd9f7c1cfbbb7788a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f048d2f21ea75e65fe9000cd9f7c1cfbbb7788a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f048d2f21ea75e65fe9000cd9f7c1cfbbb7788a"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "c1a92de2ee967fb2708c2a410fa6611301d2d727", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f517845606b6b8290b52f2068775a9325eceff6b", "patch": "@@ -1,3 +1,15 @@\n+2009-08-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-common.c (c_fully_fold_internal): Issue a warning if a binary\n+\toperation overflows.  Likewise non-cast unary arithmetic.\n+\tIf one arm of a conditional expression is always taken,\n+\tinhibit evaluation warnings for the other arm.  Likewise inhibit\n+\tevaluation warnings for the second && or || operand if the first\n+\toperand is enough to determine the result.\n+\t* c-typeck.c (build_conditional_expr): Apply the same inhibition\n+\trules here.\n+\t(build_binary_op): Prevent duplicate evaluation warnings.\n+\n 2009-08-09  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* tree-out-of-ssa.c (insert_value_copy_on_edge): If the source"}, {"sha": "ee4991ad6238db6f2036b12ca19dd44b91a5731f", "filename": "gcc/c-common.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f517845606b6b8290b52f2068775a9325eceff6b", "patch": "@@ -1133,6 +1133,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n   bool op0_const = true, op1_const = true, op2_const = true;\n   bool op0_const_self = true, op1_const_self = true, op2_const_self = true;\n   bool nowarning = TREE_NO_WARNING (expr);\n+  int unused_p;\n \n   /* This function is not relevant to C++ because C++ folds while\n      parsing, and may need changes to be correct for C++ when C++\n@@ -1308,6 +1309,10 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  : fold_build2_loc (loc, code, TREE_TYPE (expr), op0, op1);\n       else\n \tret = fold (expr);\n+      if (TREE_OVERFLOW_P (ret)\n+\t  && !TREE_OVERFLOW_P (op0)\n+\t  && !TREE_OVERFLOW_P (op1))\n+\toverflow_warning (EXPR_LOCATION (expr), ret);\n       goto out;\n \n     case INDIRECT_REF:\n@@ -1342,6 +1347,20 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  TREE_SIDE_EFFECTS (ret) = TREE_SIDE_EFFECTS (expr);\n \t  TREE_THIS_VOLATILE (ret) = TREE_THIS_VOLATILE (expr);\n \t}\n+      switch (code)\n+\t{\n+\tcase FIX_TRUNC_EXPR:\n+\tcase FLOAT_EXPR:\n+\tCASE_CONVERT:\n+\t  /* Don't warn about explicit conversions.  We will already\n+\t     have warned about suspect implicit conversions.  */\n+\t  break;\n+\n+\tdefault:\n+\t  if (TREE_OVERFLOW_P (ret) && !TREE_OVERFLOW_P (op0))\n+\t    overflow_warning (EXPR_LOCATION (expr), ret);\n+\t  break;\n+\t}\n       goto out;\n \n     case TRUTH_ANDIF_EXPR:\n@@ -1351,7 +1370,14 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self);\n+\n+      unused_p = (op0 == (code == TRUTH_ANDIF_EXPR\n+\t\t\t  ? truthvalue_false_node\n+\t\t\t  : truthvalue_true_node));\n+      c_inhibit_evaluation_warnings += unused_p;\n       op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self);\n+      c_inhibit_evaluation_warnings -= unused_p;\n+\n       if (op0 != orig_op0 || op1 != orig_op1 || in_init)\n \tret = in_init\n \t  ? fold_build2_initializer_loc (loc, code, TREE_TYPE (expr), op0, op1)\n@@ -1380,8 +1406,15 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       orig_op2 = op2 = TREE_OPERAND (expr, 2);\n       op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self);\n+\n+      c_inhibit_evaluation_warnings += (op0 == truthvalue_false_node);\n       op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self);\n+      c_inhibit_evaluation_warnings -= (op0 == truthvalue_false_node);\n+\n+      c_inhibit_evaluation_warnings += (op0 == truthvalue_true_node);\n       op2 = c_fully_fold_internal (op2, in_init, &op2_const, &op2_const_self);\n+      c_inhibit_evaluation_warnings -= (op0 == truthvalue_true_node);\n+\n       if (op0 != orig_op0 || op1 != orig_op1 || op2 != orig_op2)\n \tret = fold_build3_loc (loc, code, TREE_TYPE (expr), op0, op1, op2);\n       else"}, {"sha": "01cdcd201fe042af249298791ad7060347f0a922", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f517845606b6b8290b52f2068775a9325eceff6b", "patch": "@@ -3912,10 +3912,19 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n \t\t     that folding in this case even without\n \t\t     warn_sign_compare to avoid warning options\n \t\t     possibly affecting code generation.  */\n+\t\t  c_inhibit_evaluation_warnings\n+\t\t    += (ifexp == truthvalue_false_node);\n \t\t  op1 = c_fully_fold (op1, require_constant_value,\n \t\t\t\t      &op1_maybe_const);\n+\t\t  c_inhibit_evaluation_warnings\n+\t\t    -= (ifexp == truthvalue_false_node);\n+\n+\t\t  c_inhibit_evaluation_warnings\n+\t\t    += (ifexp == truthvalue_true_node);\n \t\t  op2 = c_fully_fold (op2, require_constant_value,\n \t\t\t\t      &op2_maybe_const);\n+\t\t  c_inhibit_evaluation_warnings\n+\t\t    -= (ifexp == truthvalue_true_node);\n \n \t\t  if (warn_sign_compare)\n \t\t    {\n@@ -9509,10 +9518,12 @@ build_binary_op (location_t location, enum tree_code code,\n \t\t     build_conditional_expr.  This requires the\n \t\t     \"original\" values to be folded, not just op0 and\n \t\t     op1.  */\n+\t\t  c_inhibit_evaluation_warnings++;\n \t\t  op0 = c_fully_fold (op0, require_constant_value,\n \t\t\t\t      &op0_maybe_const);\n \t\t  op1 = c_fully_fold (op1, require_constant_value,\n \t\t\t\t      &op1_maybe_const);\n+\t\t  c_inhibit_evaluation_warnings--;\n \t\t  orig_op0_folded = c_fully_fold (orig_op0,\n \t\t\t\t\t\t  require_constant_value,\n \t\t\t\t\t\t  NULL);"}, {"sha": "dbb473d1b9658bd8ee88ea1736e7a9d2cb31882f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f517845606b6b8290b52f2068775a9325eceff6b", "patch": "@@ -1,3 +1,7 @@\n+2009-08-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.dg/overflow-warn-8.c: New test.\n+\n 2009-08-09  Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/41008"}, {"sha": "43ecda0a56e83e67d492f4dab9b9b22c25ef0ef8", "filename": "gcc/testsuite/gcc.dg/overflow-warn-8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f517845606b6b8290b52f2068775a9325eceff6b/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Foverflow-warn-8.c?ref=f517845606b6b8290b52f2068775a9325eceff6b", "patch": "@@ -0,0 +1,23 @@\n+#include <limits.h>\n+\n+void foo (int j)\n+{\n+  int i1 = (int)(double)1.0 + INT_MAX; /* { dg-warning \"integer overflow\" } */\n+  int i2 = (int)(double)1 + INT_MAX; /* { dg-warning \"integer overflow\" } */\n+  int i3 = 1 + INT_MAX; /* { dg-warning \"integer overflow\" } */\n+  int i4 = +1 + INT_MAX; /* { dg-warning \"integer overflow\" } */\n+  int i5 = (int)((double)1.0 + INT_MAX);\n+  int i6 = (double)1.0 + INT_MAX; /* { dg-warning \"overflow in implicit constant\" } */\n+  int i7 = 0 ? (int)(double)1.0 + INT_MAX : 1;\n+  int i8 = 1 ? 1 : (int)(double)1.0 + INT_MAX;\n+  int i9 = j ? (int)(double)1.0 + INT_MAX : 1; /* { dg-warning \"integer overflow\" } */\n+  unsigned int i10 = 0 ? (int)(double)1.0 + INT_MAX : 9U;\n+  unsigned int i11 = 1 ? 9U : (int)(double)1.0 + INT_MAX;\n+  unsigned int i12 = j ? (int)(double)1.0 + INT_MAX : 9U; /* { dg-warning \"integer overflow\" } */\n+  int i13 = 1 || (int)(double)1.0 + INT_MAX < 0;\n+  int i14 = 0 && (int)(double)1.0 + INT_MAX < 0;\n+  int i15 = 0 || (int)(double)1.0 + INT_MAX < 0; /* { dg-warning \"integer overflow\" } */\n+  int i16 = 1 && (int)(double)1.0 + INT_MAX < 0; /* { dg-warning \"integer overflow\" } */\n+  int i17 = j || (int)(double)1.0 + INT_MAX < 0; /* { dg-warning \"integer overflow\" } */\n+  int i18 = j && (int)(double)1.0 + INT_MAX < 0; /* { dg-warning \"integer overflow\" } */\n+}"}]}