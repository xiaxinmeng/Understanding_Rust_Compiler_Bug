{"sha": "e4691ba99bff054f10be59543a6571fdbabbb427", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ2OTFiYTk5YmZmMDU0ZjEwYmU1OTU0M2E2NTcxZmRiYWJiYjQyNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T12:58:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T12:58:07Z"}, "message": "[multiple changes]\n\n2013-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_prag.adb, sem_prag.adb, a-exexda.adb, s-vmexta.ads: Minor\n\treformatting.\n\n2013-10-14  Vincent Celier  <celier@adacore.com>\n\n\t* ali.adb (Get_File_Name): New Boolean parameter May_Be_Quoted,\n\tdefaulted to False.  Calls Get_Name with May_Be_Quoted.\n\t(Get_Name): New Boolean parameter May_Be_Quoted, defaulted to\n\tFalse. If May_Be_Quoted is True and first non blank charater is\n\t'\"', unquote the name.\n\t(Scan_ALI): For the file/path name on the D line, call Get_File_Name\n\twith May_Be_Quoted = True, as it may have been quoted.\n\t* lib-util.adb, lib-util.ads (Write_Info_Name_May_Be_Quoted): New\n\tprocedure to write file/path names that may contain spaces and if they\n\tdo are quoted.\n\t* lib-writ.adb (Write_ALI): Use new procedure\n\tWrite_Info_Name_May_Be_Quoted to write file/path names on D lines.\n\nFrom-SVN: r203534", "tree": {"sha": "0da9ae3cf125fe15279d8fbab380186d017f8e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0da9ae3cf125fe15279d8fbab380186d017f8e4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4691ba99bff054f10be59543a6571fdbabbb427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4691ba99bff054f10be59543a6571fdbabbb427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4691ba99bff054f10be59543a6571fdbabbb427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4691ba99bff054f10be59543a6571fdbabbb427/comments", "author": null, "committer": null, "parents": [{"sha": "0a387eca30eaf0766b8de644dd61bf9cadbbf21d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a387eca30eaf0766b8de644dd61bf9cadbbf21d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a387eca30eaf0766b8de644dd61bf9cadbbf21d"}], "stats": {"total": 232, "additions": 180, "deletions": 52}, "files": [{"sha": "ab038b7bd2853e2cd635e34719671240b6e4c0c7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -1,3 +1,23 @@\n+2013-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_prag.adb, sem_prag.adb, a-exexda.adb, s-vmexta.ads: Minor\n+\treformatting.\n+\n+2013-10-14  Vincent Celier  <celier@adacore.com>\n+\n+\t* ali.adb (Get_File_Name): New Boolean parameter May_Be_Quoted,\n+\tdefaulted to False.  Calls Get_Name with May_Be_Quoted.\n+\t(Get_Name): New Boolean parameter May_Be_Quoted, defaulted to\n+\tFalse. If May_Be_Quoted is True and first non blank charater is\n+\t'\"', unquote the name.\n+\t(Scan_ALI): For the file/path name on the D line, call Get_File_Name\n+\twith May_Be_Quoted = True, as it may have been quoted.\n+\t* lib-util.adb, lib-util.ads (Write_Info_Name_May_Be_Quoted): New\n+\tprocedure to write file/path names that may contain spaces and if they\n+\tdo are quoted.\n+\t* lib-writ.adb (Write_ALI): Use new procedure\n+\tWrite_Info_Name_May_Be_Quoted to write file/path names on D lines.\n+\n 2013-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Depends_In_Decl_Part,"}, {"sha": "a201551b70216694ba20c1cfb5234acf257b3120", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -390,6 +390,7 @@ package body Exception_Data is\n       Ptr  : in out Natural)\n    is\n       Load_Address : Address;\n+\n    begin\n       if X.Num_Tracebacks = 0 then\n          return;\n@@ -398,6 +399,7 @@ package body Exception_Data is\n       --  The executable load address line\n \n       Load_Address := Get_Executable_Load_Address;\n+\n       if Load_Address /= Null_Address then\n          Append_Info_String (LDAD_Header, Info, Ptr);\n          Append_Info_Address (Load_Address, Info, Ptr);\n@@ -427,9 +429,9 @@ package body Exception_Data is\n       Space_Per_Address : constant := 2 + 16 + 1;\n       --  Space for \"0x\" + HHHHHHHHHHHHHHHH + \" \"\n    begin\n-      return LDAD_Header'Length + Space_Per_Address +\n-               BETB_Header'Length + 1 +\n-               X.Num_Tracebacks * Space_Per_Address + 1;\n+      return\n+        LDAD_Header'Length + Space_Per_Address + BETB_Header'Length + 1 +\n+          X.Num_Tracebacks * Space_Per_Address + 1;\n    end Basic_Exception_Tback_Maxlength;\n \n    ---------------------------------------"}, {"sha": "aff6740f4050c08bb8d16d5f828f18eb81429cda", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 85, "deletions": 27, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -186,9 +186,13 @@ package body ALI is\n       function Getc return Character;\n       --  Get next character, bumping P past the character obtained\n \n-      function Get_File_Name (Lower : Boolean := False) return File_Name_Type;\n+      function Get_File_Name\n+        (Lower         : Boolean := False;\n+         May_Be_Quoted : Boolean := False) return File_Name_Type;\n       --  Skip blanks, then scan out a file name (name is left in Name_Buffer\n       --  with length in Name_Len, as well as returning a File_Name_Type value.\n+      --  If May_Be_Quoted is True and the first non blank character is '\"',\n+      --  then remove starting and ending quotes and undoubled internal quotes.\n       --  If lower is false, the case is unchanged, if Lower is True then the\n       --  result is forced to all lower case for systems where file names are\n       --  not case sensitive. This ensures that gnatbind works correctly\n@@ -198,7 +202,8 @@ package body ALI is\n \n       function Get_Name\n         (Ignore_Spaces  : Boolean := False;\n-         Ignore_Special : Boolean := False) return Name_Id;\n+         Ignore_Special : Boolean := False;\n+         May_Be_Quoted  : Boolean := False) return Name_Id;\n       --  Skip blanks, then scan out a name (name is left in Name_Buffer with\n       --  length in Name_Len, as well as being returned in Name_Id form).\n       --  If Lower is set to True then the Name_Buffer will be converted to\n@@ -215,6 +220,10 @@ package body ALI is\n       --    an operator name starting with a double quote which is terminated\n       --    by another double quote.\n       --\n+      --    If May_Be_Quoted is True and the first non blank character is '\"'\n+      --    the name is 'unquoted'. In this case Ignore_Special is ignored and\n+      --    assumed to be True.\n+      --\n       --  It is an error to set both Ignore_Spaces and Ignore_Special to True.\n       --  This function handles wide characters properly.\n \n@@ -450,12 +459,14 @@ package body ALI is\n       -------------------\n \n       function Get_File_Name\n-        (Lower : Boolean := False) return File_Name_Type\n+        (Lower         : Boolean := False;\n+         May_Be_Quoted : Boolean := False) return File_Name_Type\n       is\n          F : Name_Id;\n \n       begin\n-         F := Get_Name (Ignore_Special => True);\n+         F := Get_Name (Ignore_Special => True,\n+                        May_Be_Quoted  => May_Be_Quoted);\n \n          --  Convert file name to all lower case if file names are not case\n          --  sensitive. This ensures that we handle names in the canonical\n@@ -475,8 +486,11 @@ package body ALI is\n \n       function Get_Name\n         (Ignore_Spaces  : Boolean := False;\n-         Ignore_Special : Boolean := False) return Name_Id\n+         Ignore_Special : Boolean := False;\n+         May_Be_Quoted  : Boolean := False) return Name_Id\n       is\n+         Char : Character;\n+\n       begin\n          Name_Len := 0;\n          Skip_Space;\n@@ -489,38 +503,79 @@ package body ALI is\n             end if;\n          end if;\n \n-         loop\n-            Add_Char_To_Name_Buffer (Getc);\n+         Char := Getc;\n \n-            exit when At_End_Of_Field and then not Ignore_Spaces;\n+         --  Deal with quoted characters\n \n-            if not Ignore_Special then\n-               if Name_Buffer (1) = '\"' then\n-                  exit when Name_Len > 1 and then Name_Buffer (Name_Len) = '\"';\n+         if May_Be_Quoted and then Char = '\"' then\n+            loop\n+               if At_Eol then\n+                  if Ignore_Errors then\n+                     return Error_Name;\n+                  else\n+                     Fatal_Error;\n+                  end if;\n+               end if;\n \n-               else\n-                  --  Terminate on parens or angle brackets or equal sign\n+               Char := Getc;\n \n-                  exit when Nextc = '(' or else Nextc = ')'\n-                    or else Nextc = '{' or else Nextc = '}'\n-                    or else Nextc = '<' or else Nextc = '>'\n-                    or else Nextc = '=';\n+               if Char = '\"' then\n+                  if At_Eol then\n+                     exit;\n \n-                  --  Terminate on comma\n+                  else\n+                     Char := Getc;\n \n-                  exit when Nextc = ',';\n+                     if Char /= '\"' then\n+                        P := P - 1;\n+                        exit;\n+                     end if;\n+                  end if;\n+               end if;\n \n-                  --  Terminate if left bracket not part of wide char sequence\n-                  --  Note that we only recognize brackets notation so far ???\n+               Add_Char_To_Name_Buffer (Char);\n+            end loop;\n \n-                  exit when Nextc = '[' and then T (P + 1) /= '\"';\n+         --  Other than case of quoted character\n \n-                  --  Terminate if right bracket not part of wide char sequence\n+         else\n+            P := P - 1;\n+            loop\n+               Add_Char_To_Name_Buffer (Getc);\n+\n+               exit when At_End_Of_Field and then not Ignore_Spaces;\n+\n+               if not Ignore_Special then\n+                  if Name_Buffer (1) = '\"' then\n+                     exit when Name_Len > 1\n+                               and then Name_Buffer (Name_Len) = '\"';\n+\n+                  else\n+                     --  Terminate on parens or angle brackets or equal sign\n+\n+                     exit when Nextc = '(' or else Nextc = ')'\n+                       or else Nextc = '{' or else Nextc = '}'\n+                       or else Nextc = '<' or else Nextc = '>'\n+                       or else Nextc = '=';\n+\n+                     --  Terminate on comma\n+\n+                     exit when Nextc = ',';\n+\n+                     --  Terminate if left bracket not part of wide char\n+                     --  sequence Note that we only recognize brackets\n+                     --  notation so far ???\n \n-                  exit when Nextc = ']' and then T (P - 1) /= '\"';\n+                     exit when Nextc = '[' and then T (P + 1) /= '\"';\n+\n+                     --  Terminate if right bracket not part of wide char\n+                     --  sequence.\n+\n+                     exit when Nextc = ']' and then T (P - 1) /= '\"';\n+                  end if;\n                end if;\n-            end if;\n-         end loop;\n+            end loop;\n+         end if;\n \n          return Name_Find;\n       end Get_Name;\n@@ -2224,7 +2279,10 @@ package body ALI is\n             --  In the following call, Lower is not set to True, this is either\n             --  a bug, or it deserves a special comment as to why this is so???\n \n-            Sdep.Table (Sdep.Last).Sfile := Get_File_Name;\n+            --  The file/path name may be quoted\n+\n+            Sdep.Table (Sdep.Last).Sfile :=\n+              Get_File_Name (May_Be_Quoted =>  True);\n \n             Sdep.Table (Sdep.Last).Stamp := Get_Stamp;\n             Sdep.Table (Sdep.Last).Dummy_Entry :="}, {"sha": "3576444b17f2242e3a649cf630b6581e44e7544c", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -642,8 +642,8 @@ package body Exp_Prag is\n \n                   if Exception_Code (Id) /= No_Uint then\n \n-                     --  The code for the exception is present.Create a\n-                     --  linker alias to define the symbol.\n+                     --  The code for the exception is present. Create a linker\n+                     --  alias to define the symbol.\n \n                      Code :=\n                        Make_Integer_Literal (Loc,\n@@ -666,8 +666,8 @@ package body Exp_Prag is\n                      Store_String_Int\n                        (UI_To_Int (Exception_Code (Id)) / 8 * 8);\n \n-                     --  Insert a pragma Linker_Alias to set the value of\n-                     --  the dummy object symbol.\n+                     --  Insert a pragma Linker_Alias to set the value of the\n+                     --  dummy object symbol.\n \n                      Excep_Alias :=\n                        Make_Pragma (Loc,"}, {"sha": "ae6e204c223b492fa8c8b6597041d5e7810d2fa4", "filename": "gcc/ada/lib-util.adb", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Flib-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Flib-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-util.adb?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -176,6 +176,51 @@ package body Lib.Util is\n       Write_Info_Name (Name_Id (Name));\n    end Write_Info_Name;\n \n+   -----------------------------------\n+   -- Write_Info_Name_May_Be_Quoted --\n+   -----------------------------------\n+\n+   procedure Write_Info_Name_May_Be_Quoted (Name : File_Name_Type) is\n+      Quoted : Boolean := False;\n+      Cur    : Positive;\n+\n+   begin\n+      Get_Name_String (Name);\n+\n+      --  The file/path name is quoted only if it includes spaces\n+\n+      for J in 1 .. Name_Len loop\n+         if Name_Buffer (J) = ' ' then\n+            Quoted := True;\n+            exit;\n+         end if;\n+      end loop;\n+\n+      --  Deal with quoting string if needed\n+\n+      if Quoted then\n+         Insert_Str_In_Name_Buffer (\"\"\"\", 1);\n+         Add_Char_To_Name_Buffer ('\"');\n+\n+         --  Any character '\"' is doubled\n+\n+         Cur := 2;\n+         while Cur < Name_Len loop\n+            if Name_Buffer (Cur) = '\"' then\n+               Insert_Str_In_Name_Buffer (\"\"\"\", Cur);\n+               Cur := Cur + 2;\n+            else\n+               Cur := Cur + 1;\n+            end if;\n+         end loop;\n+      end if;\n+\n+      Info_Buffer (Info_Buffer_Len + 1 .. Info_Buffer_Len + Name_Len) :=\n+        Name_Buffer (1 .. Name_Len);\n+      Info_Buffer_Len := Info_Buffer_Len + Name_Len;\n+      Info_Buffer_Col := Info_Buffer_Col + Name_Len;\n+   end Write_Info_Name_May_Be_Quoted;\n+\n    --------------------\n    -- Write_Info_Nat --\n    --------------------"}, {"sha": "f4034d62d6dd4fd0bdd78742745c46872612509e", "filename": "gcc/ada/lib-util.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Flib-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Flib-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-util.ads?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,6 +65,10 @@ package Lib.Util is\n    --  name is written literally from the names table entry without modifying\n    --  the case, using simply Get_Name_String.\n \n+   procedure Write_Info_Name_May_Be_Quoted (Name : File_Name_Type);\n+   --  Similar to Write_Info_Name, but if Name includes spaces, then it is\n+   --  quoted and the '\"' are doubled.\n+\n    procedure Write_Info_Slit (S : String_Id);\n    --  Write string literal value in format required for L/N lines in ali file\n "}, {"sha": "cb5278cde7b543c40e3dd9a9d564476cefb2affe", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -1428,7 +1428,7 @@ package body Lib.Writ is\n                   Fname := Name_Find;\n                end if;\n \n-               Write_Info_Name (Fname);\n+               Write_Info_Name_May_Be_Quoted (Fname);\n                Write_Info_Tab (25);\n                Write_Info_Str (String (Time_Stamp (Sind)));\n                Write_Info_Char (' ');"}, {"sha": "b6ac23cc2ba2166c0a122f8dafbaf25f43e01abf", "filename": "gcc/ada/s-vmexta.ads", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fs-vmexta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fs-vmexta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vmexta.ads?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -41,13 +41,12 @@ package System.VMS_Exception_Table is\n    procedure Register_VMS_Exception\n      (Code : SSL.Exception_Code;\n       E    : SSL.Exception_Data_Ptr);\n-   --  Register an exception in the hash table mapping with a VMS\n-   --  condition code.\n-\n-   --  The table is used by exception code (the personnality routine) to\n-   --  detect wether a VMS exception (aka condition) is known by the Ada code.\n-   --  In that case, the identity of the imported or exported exception is\n-   --  used to create the occurrence.\n+   --  Register an exception in hash table mapping with a VMS condition code.\n+   --\n+   --  The table is used by exception code (the personnality routine) to detect\n+   --  wether a VMS exception (aka condition) is known by the Ada code. In\n+   --  that case, the identity of the imported or exported exception is used\n+   --  to create the occurrence.\n \n    --  LOTS more comments needed here regarding the entire scheme ???\n \n@@ -61,6 +60,6 @@ private\n \n    function Coded_Exception (X : SSL.Exception_Code)\n      return SSL.Exception_Data_Ptr;\n-   --  Given a VMS condition, find and return it's allocated Ada exception\n+   --  Given a VMS condition, find and return its allocated Ada exception\n \n end System.VMS_Exception_Table;"}, {"sha": "308685ff829b2d400ae56b1dcd7857a49ec06387", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4691ba99bff054f10be59543a6571fdbabbb427/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e4691ba99bff054f10be59543a6571fdbabbb427", "patch": "@@ -213,13 +213,13 @@ package body Sem_Prag is\n       Has_In_Out_State : out Boolean;\n       Has_Out_State    : out Boolean;\n       Has_Null_State   : out Boolean);\n-   --  Subsidiary to the analysis of pragma Refined_Depends and pragma\n-   --  Refined_Global. Prag denotes pragma [Refined_]Global. Gather all input,\n-   --  in out and output items of Prag in lists In_Items, In_Out_Items and\n-   --  Out_Items. Flags Has_In_State, Has_In_Out_State and Has_Out_State are\n-   --  set when there is at least one abstract state with visible refinement\n-   --  available in the corresponding mode. Flag Has_Null_State is set when at\n-   --  least state has a null refinement.\n+   --  Subsidiary to the analysis of pragma Refined_Depends/Refined_Global.\n+   --  Prag denotes pragma [Refined_]Global. Gather all input, in out and\n+   --  output items of Prag in lists In_Items, In_Out_Items and Out_Items.\n+   --  Flags Has_In_State, Has_In_Out_State and Has_Out_State are set when\n+   --  there is at least one abstract state with visible refinement available\n+   --  in the corresponding mode. Flag Has_Null_State is set when at least\n+   --  state has a null refinement.\n \n    procedure Collect_Subprogram_Inputs_Outputs\n      (Subp_Id      : Entity_Id;"}]}