{"sha": "91f9108f1bd90c307daadfb4876258ec57cb746b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmOTEwOGYxYmQ5MGMzMDdkYWFkZmI0ODc2MjU4ZWM1N2NiNzQ2Yg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-03-23T01:18:48Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-03-23T01:18:48Z"}, "message": "Disable auto_is_implicit_function_template_parm_p while parsing attributes\n\nWe don't want functions to become implicit templates just because of\nrandom uses of auto in unexpected places.  Disabling the special\nhandling of auto while parsing attributes, for example, makes for\nmore sensible errors.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/84610\n\tPR c++/84642\n\tPR c++/84942\n\t* cp-tree.h (temp_override): New template class, generalizing\n\ta cleanup that was only used...\n\t* parser.c (cp_parser_parameter_declaration_clause):\n\t... here for auto_is_implicit_function_template_parm_p.\n\t(cp_parser_gnu_attributes_opt): Use it here as well.\n\t(cp_parser_std_attribute): Likewise.\n\nFrom-SVN: r258790", "tree": {"sha": "fff8b26767172444ca89fa6022588042e5fe90f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff8b26767172444ca89fa6022588042e5fe90f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91f9108f1bd90c307daadfb4876258ec57cb746b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f9108f1bd90c307daadfb4876258ec57cb746b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f9108f1bd90c307daadfb4876258ec57cb746b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f9108f1bd90c307daadfb4876258ec57cb746b/comments", "author": null, "committer": null, "parents": [{"sha": "c95bcbe3c10bff29c8a6f2b53a192f0ad2d22740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c95bcbe3c10bff29c8a6f2b53a192f0ad2d22740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c95bcbe3c10bff29c8a6f2b53a192f0ad2d22740"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "5dae29d23a14f899b0b7ba45a0dc7340ab1a780a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f9108f1bd90c307daadfb4876258ec57cb746b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f9108f1bd90c307daadfb4876258ec57cb746b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=91f9108f1bd90c307daadfb4876258ec57cb746b", "patch": "@@ -1,3 +1,15 @@\n+2018-03-22  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/84610\n+\tPR c++/84642\n+\tPR c++/84942\n+\t* cp-tree.h (temp_override): New template class, generalizing\n+\ta cleanup that was only used...\n+\t* parser.c (cp_parser_parameter_declaration_clause):\n+\t... here for auto_is_implicit_function_template_parm_p.\n+\t(cp_parser_gnu_attributes_opt): Use it here as well.\n+\t(cp_parser_std_attribute): Likewise.\n+\n 2018-03-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/84854"}, {"sha": "c8f4bc43fa3c39597664b5b66603fcefc7ab0137", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f9108f1bd90c307daadfb4876258ec57cb746b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f9108f1bd90c307daadfb4876258ec57cb746b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=91f9108f1bd90c307daadfb4876258ec57cb746b", "patch": "@@ -1657,6 +1657,25 @@ struct warning_sentinel\n   ~warning_sentinel() { flag = val; }\n };\n \n+/* RAII sentinel that saves the value of a variable, optionally\n+   overrides it right away, and restores its value when the sentinel\n+   id destructed.  */\n+\n+template <typename T>\n+class temp_override\n+{\n+  T& overridden_variable;\n+  T saved_value;\n+public:\n+  temp_override(T& var) : overridden_variable (var), saved_value (var) {}\n+  temp_override(T& var, T overrider)\n+    : overridden_variable (var), saved_value (var)\n+  {\n+    overridden_variable = overrider;\n+  }\n+  ~temp_override() { overridden_variable = saved_value; }\n+};\n+\n /* The cached class binding level, from the most recently exited\n    class, or NULL if none.  */\n "}, {"sha": "34619293120b6e2e3c1dd0a66587c32a89b924c1", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f9108f1bd90c307daadfb4876258ec57cb746b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f9108f1bd90c307daadfb4876258ec57cb746b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=91f9108f1bd90c307daadfb4876258ec57cb746b", "patch": "@@ -21196,16 +21196,8 @@ cp_parser_parameter_declaration_clause (cp_parser* parser)\n   bool ellipsis_p;\n   bool is_error;\n \n-  struct cleanup {\n-    cp_parser* parser;\n-    int auto_is_implicit_function_template_parm_p;\n-    ~cleanup() {\n-      parser->auto_is_implicit_function_template_parm_p\n-\t= auto_is_implicit_function_template_parm_p;\n-    }\n-  } cleanup = { parser, parser->auto_is_implicit_function_template_parm_p };\n-\n-  (void) cleanup;\n+  temp_override<bool> cleanup\n+    (parser->auto_is_implicit_function_template_parm_p);\n \n   if (!processing_specialization\n       && !processing_template_parmlist\n@@ -24968,6 +24960,9 @@ cp_parser_gnu_attributes_opt (cp_parser* parser)\n {\n   tree attributes = NULL_TREE;\n \n+  temp_override<bool> cleanup\n+    (parser->auto_is_implicit_function_template_parm_p, false);\n+\n   while (true)\n     {\n       cp_token *token;\n@@ -25159,6 +25154,9 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n   tree attribute, attr_id = NULL_TREE, arguments;\n   cp_token *token;\n \n+  temp_override<bool> cleanup\n+    (parser->auto_is_implicit_function_template_parm_p, false);\n+\n   /* First, parse name of the attribute, a.k.a attribute-token.  */\n \n   token = cp_lexer_peek_token (parser->lexer);"}]}