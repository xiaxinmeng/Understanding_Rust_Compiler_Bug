{"sha": "de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUyZTA4MzU1YWE1MWViMTU5NmNmZTY3NGJmMWFiMWE4ZmM4Mzk3Ng==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-01-10T09:57:59Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2020-01-10T09:57:59Z"}, "message": "IPA-CP: Always access param_ipa_max_agg_items through opt_for_fn\n\n2020-01-10  Martin Jambor  <mjambor@suse.cz>\n\n\t* params.opt (param_ipa_max_agg_items): Mark as Optimization\n\t* ipa-cp.c (merge_agg_lats_step): New parameter max_agg_items, use\n\tinstead of param_ipa_max_agg_items.\n\t(merge_aggregate_lattices): Extract param_ipa_max_agg_items from\n\toptimization info for the callee.\n\nFrom-SVN: r280098", "tree": {"sha": "d3a7e09805d12bc8fe16a59fc341d5aed6ebb784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a7e09805d12bc8fe16a59fc341d5aed6ebb784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8509584524592955a721ffb7ecfb38b70eee2e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8509584524592955a721ffb7ecfb38b70eee2e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8509584524592955a721ffb7ecfb38b70eee2e51"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "712541d41da32af095eb546a1c19d1d5434777ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "patch": "@@ -1,3 +1,11 @@\n+2020-01-10  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* params.opt (param_ipa_max_agg_items): Mark as Optimization\n+\t* ipa-cp.c (merge_agg_lats_step): New parameter max_agg_items, use\n+\tinstead of param_ipa_max_agg_items.\n+\t(merge_aggregate_lattices): Extract param_ipa_max_agg_items from\n+\toptimization info for the callee.\n+\n 2020-01-09  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n \t* lto-streamer-in.c (input_function): Remove streamed-in inline debug"}, {"sha": "9131c6acf38f6eae2b1af0a65873b80cba6c0413", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "patch": "@@ -2479,13 +2479,13 @@ set_check_aggs_by_ref (class ipcp_param_lattices *dest_plats,\n    unless there are too many already.  If there are two many, return false.  If\n    there are overlaps turn whole DEST_PLATS to bottom and return false.  If any\n    skipped lattices were newly marked as containing variable, set *CHANGE to\n-   true.  */\n+   true.  MAX_AGG_ITEMS is the maximum number of lattices.  */\n \n static bool\n merge_agg_lats_step (class ipcp_param_lattices *dest_plats,\n \t\t     HOST_WIDE_INT offset, HOST_WIDE_INT val_size,\n \t\t     struct ipcp_agg_lattice ***aglat,\n-\t\t     bool pre_existing, bool *change)\n+\t\t     bool pre_existing, bool *change, int max_agg_items)\n {\n   gcc_checking_assert (offset >= 0);\n \n@@ -2520,7 +2520,7 @@ merge_agg_lats_step (class ipcp_param_lattices *dest_plats,\n \t  set_agg_lats_to_bottom (dest_plats);\n \t  return false;\n \t}\n-      if (dest_plats->aggs_count == param_ipa_max_agg_items)\n+      if (dest_plats->aggs_count == max_agg_items)\n \treturn false;\n       dest_plats->aggs_count++;\n       new_al = ipcp_agg_lattice_pool.allocate ();\n@@ -2574,6 +2574,8 @@ merge_aggregate_lattices (struct cgraph_edge *cs,\n     ret |= set_agg_lats_contain_variable (dest_plats);\n   dst_aglat = &dest_plats->aggs;\n \n+  int max_agg_items = opt_for_fn (cs->callee->function_symbol ()->decl,\n+\t\t\t\t  param_ipa_max_agg_items);\n   for (struct ipcp_agg_lattice *src_aglat = src_plats->aggs;\n        src_aglat;\n        src_aglat = src_aglat->next)\n@@ -2583,7 +2585,7 @@ merge_aggregate_lattices (struct cgraph_edge *cs,\n       if (new_offset < 0)\n \tcontinue;\n       if (merge_agg_lats_step (dest_plats, new_offset, src_aglat->size,\n-\t\t\t       &dst_aglat, pre_existing, &ret))\n+\t\t\t       &dst_aglat, pre_existing, &ret, max_agg_items))\n \t{\n \t  struct ipcp_agg_lattice *new_al = *dst_aglat;\n \n@@ -2763,6 +2765,8 @@ propagate_aggs_across_jump_function (struct cgraph_edge *cs,\n       if (set_check_aggs_by_ref (dest_plats, jfunc->agg.by_ref))\n \treturn true;\n \n+      int max_agg_items = opt_for_fn (cs->callee->function_symbol ()->decl,\n+\t\t\t\t      param_ipa_max_agg_items);\n       FOR_EACH_VEC_ELT (*jfunc->agg.items, i, item)\n \t{\n \t  HOST_WIDE_INT val_size;\n@@ -2772,7 +2776,7 @@ propagate_aggs_across_jump_function (struct cgraph_edge *cs,\n \t  val_size = tree_to_shwi (TYPE_SIZE (item->type));\n \n \t  if (merge_agg_lats_step (dest_plats, item->offset, val_size,\n-\t\t\t\t   &aglat, pre_existing, &ret))\n+\t\t\t\t   &aglat, pre_existing, &ret, max_agg_items))\n \t    {\n \t      ret |= propagate_aggregate_lattice (cs, item, *aglat);\n \t      aglat = &(*aglat)->next;"}, {"sha": "6dc3cf6b3550842c2f7bc1603e6b2330fc668a64", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "patch": "@@ -1852,8 +1852,9 @@ determine_known_aggregate_parts (struct ipa_func_body_info *fbi,\n   tree arg_base;\n   bool check_ref, by_ref;\n   ao_ref r;\n+  int max_agg_items = opt_for_fn (fbi->node->decl, param_ipa_max_agg_items);\n \n-  if (param_ipa_max_agg_items == 0)\n+  if (max_agg_items == 0)\n     return;\n \n   /* The function operates in three stages.  First, we prepare check_ref, r,\n@@ -1951,14 +1952,14 @@ determine_known_aggregate_parts (struct ipa_func_body_info *fbi,\n \t\t operands, whose definitions can finally reach the call.  */\n \t      add_to_agg_contents_list (&list, (*copy = *content, copy));\n \n-\t      if (++value_count == param_ipa_max_agg_items)\n+\t      if (++value_count == max_agg_items)\n \t\tbreak;\n \t    }\n \n \t  /* Add to the list consisting of all dominating virtual operands.  */\n \t  add_to_agg_contents_list (&all_list, content);\n \n-\t  if (++item_count == 2 * param_ipa_max_agg_items)\n+\t  if (++item_count == 2 * max_agg_items)\n \t    break;\n \t}\n       dom_vuse = gimple_vuse (stmt);"}, {"sha": "46e891362ca15e6d40ae6c37576a112ab828f7e9", "filename": "gcc/params.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de2e08355aa51eb1596cfe674bf1ab1a8fc83976/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "patch": "@@ -227,7 +227,7 @@ Common Joined UInteger Var(param_ipa_max_aa_steps) Init(25000) Param Optimizatio\n Maximum number of statements that will be visited by IPA formal parameter analysis based on alias analysis in any given function.\n \n -param=ipa-max-agg-items=\n-Common Joined UInteger Var(param_ipa_max_agg_items) Init(16) Param\n+Common Joined UInteger Var(param_ipa_max_agg_items) Init(16) Param Optimization\n Maximum number of aggregate content items for a parameter in jump functions and lattices.\n \n -param=ipa-max-param-expr-ops="}]}