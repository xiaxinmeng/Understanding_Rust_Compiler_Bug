{"sha": "4fea820523334138d7165f20333ef30ba8e01c1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlYTgyMDUyMzMzNDEzOGQ3MTY1ZjIwMzMzZWYzMGJhOGUwMWMxZA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2018-11-19T15:05:18Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2018-11-19T15:05:18Z"}, "message": "re PR libstdc++/87855 (std::optional<T> only copy-constructible if T is trivially copy-constructible)\n\nPR libstdc++/87855\n\nAlso implement P0602R4 (variant and optional\nshould propagate copy/move triviality) for std::optional.\n* include/std/optional (_Optional_payload): Change\nthe main constraints to check constructibility in\naddition to assignability.\n(operator=): Make constexpr.\n(_M_reset): Likewise.\n(_M_construct): Likewise.\n(operator->): Likewise.\n* testsuite/20_util/optional/assignment/8.cc: Adjust.\n* testsuite/20_util/optional/assignment/9.cc: New.\n\nFrom-SVN: r266278", "tree": {"sha": "0828c69521fcbb3b64b70574083219e58f70668c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0828c69521fcbb3b64b70574083219e58f70668c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fea820523334138d7165f20333ef30ba8e01c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fea820523334138d7165f20333ef30ba8e01c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fea820523334138d7165f20333ef30ba8e01c1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fea820523334138d7165f20333ef30ba8e01c1d/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f615cb162df6f026d7f8798a74f0241df43251b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f615cb162df6f026d7f8798a74f0241df43251b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f615cb162df6f026d7f8798a74f0241df43251b1"}], "stats": {"total": 154, "additions": 150, "deletions": 4}, "files": [{"sha": "9396e227bd13efea1ace14d74a8f993dcea7ba88", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fea820523334138d7165f20333ef30ba8e01c1d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fea820523334138d7165f20333ef30ba8e01c1d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4fea820523334138d7165f20333ef30ba8e01c1d", "patch": "@@ -1,3 +1,18 @@\n+2018-11-19  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/87855\n+\tAlso implement P0602R4 (variant and optional\n+\tshould propagate copy/move triviality) for std::optional.\n+\t* include/std/optional (_Optional_payload): Change\n+\tthe main constraints to check constructibility in\n+\taddition to assignability.\n+\t(operator=): Make constexpr.\n+\t(_M_reset): Likewise.\n+\t(_M_construct): Likewise.\n+\t(operator->): Likewise.\n+\t* testsuite/20_util/optional/assignment/8.cc: Adjust.\n+\t* testsuite/20_util/optional/assignment/9.cc: New.\n+\n 2018-11-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/88084 - Implement LWG 2777"}, {"sha": "fefd9a37ce521f4c5bf45b35e1bdc9b7ba3e4cbe", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fea820523334138d7165f20333ef30ba8e01c1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fea820523334138d7165f20333ef30ba8e01c1d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=4fea820523334138d7165f20333ef30ba8e01c1d", "patch": "@@ -103,10 +103,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp,\n \t    bool /*_HasTrivialDestructor*/ =\n \t      is_trivially_destructible_v<_Tp>,\n-\t    bool /*_HasTrivialCopyAssignment*/ =\n-\t      is_trivially_copy_assignable_v<_Tp>,\n-\t    bool /*_HasTrivialMoveAssignment*/ =\n-\t      is_trivially_move_assignable_v<_Tp>>\n+\t    bool /*_HasTrivialCopy */ =\n+\t      is_trivially_copy_assignable_v<_Tp>\n+\t      && is_trivially_copy_constructible_v<_Tp>,\n+\t    bool /*_HasTrivialMove */ =\n+\t      is_trivially_move_assignable_v<_Tp>\n+\t      && is_trivially_move_constructible_v<_Tp>>\n     struct _Optional_payload\n     {\n       constexpr _Optional_payload() noexcept : _M_empty() { }\n@@ -148,6 +150,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->_M_construct(std::move(__other._M_payload));\n       }\n \n+      constexpr\n       _Optional_payload&\n       operator=(const _Optional_payload& __other)\n       {\n@@ -163,6 +166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      constexpr\n       _Optional_payload&\n       operator=(_Optional_payload&& __other)\n       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,\n@@ -216,6 +220,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->_M_payload; }\n \n       // _M_reset is a 'safe' operation with no precondition.\n+      constexpr\n       void\n       _M_reset() noexcept\n       {\n@@ -346,6 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Optional_payload(const _Optional_payload&) = default;\n       _Optional_payload(_Optional_payload&&) = default;\n \n+      constexpr\n       _Optional_payload&\n       operator=(const _Optional_payload& __other)\n       {\n@@ -394,6 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->_M_payload; }\n \n       // _M_reset is a 'safe' operation with no precondition.\n+      constexpr\n       void\n       _M_reset() noexcept\n       {\n@@ -466,6 +473,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Optional_payload&\n       operator=(const _Optional_payload& __other) = default;\n \n+      constexpr\n       _Optional_payload&\n       operator=(_Optional_payload&& __other)\n       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,\n@@ -513,6 +521,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->_M_payload; }\n \n       // _M_reset is a 'safe' operation with no precondition.\n+      constexpr\n       void\n       _M_reset() noexcept\n       {\n@@ -581,6 +590,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Optional_payload(const _Optional_payload&) = default;\n       _Optional_payload(_Optional_payload&&) = default;\n \n+      constexpr\n       _Optional_payload&\n       operator=(const _Optional_payload& __other)\n       {\n@@ -596,6 +606,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      constexpr\n       _Optional_payload&\n       operator=(_Optional_payload&& __other)\n       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,\n@@ -624,6 +635,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool _M_engaged;\n \n       template<typename... _Args>\n+        constexpr\n         void\n         _M_construct(_Args&&... __args)\n         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)\n@@ -643,6 +655,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return this->_M_payload; }\n \n       // _M_reset is a 'safe' operation with no precondition.\n+      constexpr\n       void\n       _M_reset() noexcept\n       {\n@@ -681,6 +694,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n       \n       // _M_reset is a 'safe' operation with no precondition.\n+      constexpr\n       void\n       _M_reset() noexcept\n       {\n@@ -1217,6 +1231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator->() const\n       { return std::__addressof(this->_M_get()); }\n \n+      constexpr\n       _Tp*\n       operator->()\n       { return std::__addressof(this->_M_get()); }"}, {"sha": "7241b92488908484d577fbf214b030f63c4e6514", "filename": "libstdc++-v3/testsuite/20_util/optional/assignment/8.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fea820523334138d7165f20333ef30ba8e01c1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fea820523334138d7165f20333ef30ba8e01c1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F8.cc?ref=4fea820523334138d7165f20333ef30ba8e01c1d", "patch": "@@ -91,6 +91,24 @@ struct S2 {\n };\n static_assert(std::is_trivially_move_assignable_v<S2>);\n \n+struct S3 {\n+  S3(const S3&);\n+  S3& operator=(const S3&) = default;\n+};\n+static_assert(std::is_trivially_copy_assignable_v<S3>);\n+static_assert(std::is_copy_assignable_v<S3>);\n+static_assert(!std::is_trivially_copy_assignable_v<std::optional<S3>>);\n+static_assert(std::is_copy_assignable_v<std::optional<S3>>);\n+\n+struct S4 {\n+  S4(S4&&);\n+  S4& operator=(S4&&) = default;\n+};\n+static_assert(std::is_trivially_move_assignable_v<S4>);\n+static_assert(std::is_move_assignable_v<S4>);\n+static_assert(!std::is_trivially_move_assignable_v<std::optional<S4>>);\n+static_assert(std::is_move_assignable_v<std::optional<S4>>);\n+\n union U2 {\n   char dummy;\n   S2 s;"}, {"sha": "1195dbb0e2e9c6f323ebb50ea8c81c2d7b8c91ca", "filename": "libstdc++-v3/testsuite/20_util/optional/assignment/9.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fea820523334138d7165f20333ef30ba8e01c1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fea820523334138d7165f20333ef30ba8e01c1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F9.cc?ref=4fea820523334138d7165f20333ef30ba8e01c1d", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <optional>\n+\n+constexpr bool f()\n+{\n+  std::optional<int> o1{42};\n+  std::optional<int> o2;\n+  o2 = o1;\n+  return (o1 == o2);\n+}\n+\n+constexpr bool f2()\n+{\n+  std::optional<int> o1{42};\n+  std::optional<int> o2;\n+  std::optional<int> o3;\n+  o2 = o1;\n+  o3 = std::move(o2);\n+  return (o1 == o3);\n+}\n+\n+void g()\n+{\n+  constexpr bool b = f();\n+  static_assert(b);\n+  constexpr bool b2 = f2();\n+  static_assert(b2);\n+}\n+\n+struct NonTrivialButConstexpr\n+{\n+  int dummy;\n+  NonTrivialButConstexpr() = default;\n+  constexpr NonTrivialButConstexpr(int val) : dummy(val) {}\n+  NonTrivialButConstexpr(const NonTrivialButConstexpr&) = default;\n+  NonTrivialButConstexpr(NonTrivialButConstexpr&&) = default;\n+  constexpr NonTrivialButConstexpr&\n+  operator=(const NonTrivialButConstexpr& other)\n+  {\n+    dummy = other.dummy;\n+    return *this;\n+  }\n+  constexpr NonTrivialButConstexpr&\n+  operator=(NonTrivialButConstexpr&& other)\n+  {\n+    dummy = other.dummy;\n+    return *this;\n+  }\n+};\n+\n+constexpr bool f3()\n+{\n+  std::optional<NonTrivialButConstexpr> d1, d2;\n+  d1 = d2;\n+  std::optional<NonTrivialButConstexpr> o1{42};\n+  std::optional<NonTrivialButConstexpr> o2{22};\n+  o2 = o1;\n+  return ((*o1).dummy == (*o2).dummy && o1->dummy == o2->dummy);\n+}\n+\n+constexpr bool f4()\n+{\n+  std::optional<NonTrivialButConstexpr> d1, d2;\n+  d1 = std::move(d2);\n+  std::optional<NonTrivialButConstexpr> o1{42};\n+  std::optional<NonTrivialButConstexpr> o2{22};\n+  std::optional<NonTrivialButConstexpr> o3{33};\n+  o2 = o1;\n+  o3 = std::move(o2);\n+  return ((*o1).dummy == (*o3).dummy && o1->dummy == o3->dummy);\n+}\n+\n+void g2()\n+{\n+  constexpr bool b = f3();\n+  static_assert(b);\n+  constexpr bool b2 = f4();\n+  static_assert(b2);\n+}"}]}