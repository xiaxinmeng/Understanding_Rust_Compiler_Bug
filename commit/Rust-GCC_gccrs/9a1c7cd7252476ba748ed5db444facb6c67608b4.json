{"sha": "9a1c7cd7252476ba748ed5db444facb6c67608b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExYzdjZDcyNTI0NzZiYTc0OGVkNWRiNDQ0ZmFjYjZjNjc2MDhiNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-25T20:24:37Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-01-25T20:24:37Z"}, "message": "(CPP_SPEC): Delete __sparc_frw__ define.\n\n(TARGET_FRW_COMPAT): New macro.\n(TARGET_DEFAULTS): Comment out -mfrw option.  Add new commented\nout option -mfrw-compat.\n(EXPAND_BUILTIN_SAVEREGS): Call sparc_builtin_saveregs to emit rtl\ninline instead of calling builtin_saveregs in libgcc.a.\n\nFrom-SVN: r3338", "tree": {"sha": "c0839934f4e9e1b758c8abe5556a60e9da97370d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0839934f4e9e1b758c8abe5556a60e9da97370d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a1c7cd7252476ba748ed5db444facb6c67608b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1c7cd7252476ba748ed5db444facb6c67608b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1c7cd7252476ba748ed5db444facb6c67608b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1c7cd7252476ba748ed5db444facb6c67608b4/comments", "author": null, "committer": null, "parents": [{"sha": "3ea1fdd31863e664a1beffbec13556184a1848cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ea1fdd31863e664a1beffbec13556184a1848cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ea1fdd31863e664a1beffbec13556184a1848cf"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "c56b64dab8df4fdd70d6bc2abe9c3deea43bb276", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1c7cd7252476ba748ed5db444facb6c67608b4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1c7cd7252476ba748ed5db444facb6c67608b4/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=9a1c7cd7252476ba748ed5db444facb6c67608b4", "patch": "@@ -34,8 +34,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define ASM_SPEC \" %| %{fpic:-k} %{fPIC:-k}\"\n \n /* Define macros to distinguish architectures.  */\n-#define CPP_SPEC \"%{msparclite:-D__sparclite__} %{mv8:-D__sparc_v8__} \\\n-  %{mfrw:-D__sparc_frw__}\"\n+#define CPP_SPEC \"%{msparclite:-D__sparclite__} %{mv8:-D__sparc_v8__}\"\n \n /* Prevent error on `-sun4' and `-target sun4' options.  */\n /* This used to translate -dalign to -malign, but that is no good\n@@ -122,9 +121,21 @@ extern int target_flags;\n #define TARGET_SPARCLITE (target_flags & 128)\n \n /* Nonzero means that we should generate code using a flat register window\n-   model, i.e. no save/restore instructions are generated.  */\n+   model, i.e. no save/restore instructions are generated, in the most\n+   efficient manner.  This code is not compatible with normal sparc code.  */\n+/* This is not a user selectable option yet, because it requires changes\n+   that are not yet switchable via command line arguments.  */\n #define TARGET_FRW (target_flags & 256)\n \n+/* Nonzero means that we should generate code using a flat register window\n+   model, i.e. no save/restore instructions are generated, but which is\n+   compatible with normal sparc code.   This is the same as above, except\n+   that the frame pointer is %l6 instead of %fp.  This code is not as efficient\n+   as TARGET_FRW, because it has one less allocatable register.  */\n+/* This is not a user selectable option yet, because it requires changes\n+   that are not yet switchable via command line arguments.  */\n+#define TARGET_FRW_COMPAT (target_flags & 512)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -146,8 +157,10 @@ extern int target_flags;\n     {\"sparclite\", -1},\t\t\\\n     {\"no-sparclite\", -128},\t\\\n     {\"no-sparclite\", 1},\t\\\n-    {\"frw\", 256},\t\t\\\n-    {\"no-frw\", -256},\t\t\\\n+/*  {\"frw\", 256}, */\t\t\\\n+/*  {\"no-frw\", -256}, */\t\\\n+/*  {\"frw-compat\", 256+512}, */\t\\\n+/*  {\"no-frw-compat\", -(256+512)}, */ \\\n     { \"\", TARGET_DEFAULT}}\n \n #define TARGET_DEFAULT 3\n@@ -1032,15 +1045,10 @@ extern union tree_node *current_function_decl;\n   emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 16)), low_cxt);\\\n }\n \n-/* Emit code for a call to builtin_saveregs.  We must emit USE insns which\n-   reference the 6 input registers.  Ordinarily they are not call used\n-   registers, but they are for _builtin_saveregs, so we must make this\n-   explicit.  */\n-\n-#define EXPAND_BUILTIN_SAVEREGS(ARGLIST)\t\t\t\t\\\n-  (emit_insn (gen_rtx (USE, VOIDmode, gen_rtx (REG, TImode, BASE_INCOMING_ARG_REG (VOIDmode)))),\t\\\n-   emit_insn (gen_rtx (USE, VOIDmode, gen_rtx (REG, DImode, BASE_INCOMING_ARG_REG (VOIDmode)+4))),\t\\\n-   expand_call (exp, target, ignore))\n+/* Generate necessary RTL for __builtin_saveregs().\n+   ARGLIST is the argument list; see expr.c.  */\n+extern struct rtx_def *sparc_builtin_saveregs ();\n+#define EXPAND_BUILTIN_SAVEREGS(ARGLIST) sparc_builtin_saveregs (ARGLIST)\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}]}