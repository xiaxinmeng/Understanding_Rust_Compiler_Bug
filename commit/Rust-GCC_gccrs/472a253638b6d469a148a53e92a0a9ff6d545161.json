{"sha": "472a253638b6d469a148a53e92a0a9ff6d545161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyYTI1MzYzOGI2ZDQ2OWExNDhhNTNlOTJhMGE5ZmY2ZDU0NTE2MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-10T13:25:23Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-10T13:25:23Z"}, "message": "re PR bootstrap/80838 (PGO/LTO bootstrapped compiler 5% slower than pure PGO bootstrapped one)\n\n\n\tPR lto/80838\n\t* lto-wrapper.c (remove_option): New function.\n\t(merge_and_complain): Merge PIC/PIE options more realistically.\n\nFrom-SVN: r250094", "tree": {"sha": "b93e0c6569843ec81879963539fd57ca563429ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b93e0c6569843ec81879963539fd57ca563429ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/472a253638b6d469a148a53e92a0a9ff6d545161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472a253638b6d469a148a53e92a0a9ff6d545161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472a253638b6d469a148a53e92a0a9ff6d545161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472a253638b6d469a148a53e92a0a9ff6d545161/comments", "author": null, "committer": null, "parents": [{"sha": "63866e04b770cefcfa0c64b427dc924cce475201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63866e04b770cefcfa0c64b427dc924cce475201", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63866e04b770cefcfa0c64b427dc924cce475201"}], "stats": {"total": 106, "additions": 90, "deletions": 16}, "files": [{"sha": "aa82521884eba27bf9dcc4afab5b91c8a7725e95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472a253638b6d469a148a53e92a0a9ff6d545161/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472a253638b6d469a148a53e92a0a9ff6d545161/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=472a253638b6d469a148a53e92a0a9ff6d545161", "patch": "@@ -1,3 +1,9 @@\n+2017-07-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR lto/80838\n+\t* lto-wrapper.c (remove_option): New function.\n+\t(merge_and_complain): Merge PIC/PIE options more realistically.\n+\n 2017-07-10  Georg-Johann Lay  <avr@gjlay.de>\n \n \tBetter ISR prologues by supporting GASes __gcc_isr pseudo insn."}, {"sha": "5e75a4fa48cef999fd34c8bdcdcd42bf807d62af", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 84, "deletions": 16, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472a253638b6d469a148a53e92a0a9ff6d545161/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472a253638b6d469a148a53e92a0a9ff6d545161/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=472a253638b6d469a148a53e92a0a9ff6d545161", "patch": "@@ -192,6 +192,20 @@ append_option (struct cl_decoded_option **decoded_options,\n \t  sizeof (struct cl_decoded_option));\n }\n \n+/* Remove option number INDEX from DECODED_OPTIONS, update\n+   DECODED_OPTIONS_COUNT.  */\n+\n+static void\n+remove_option (struct cl_decoded_option **decoded_options,\n+\t       int index, unsigned int *decoded_options_count)\n+{\n+  --*decoded_options_count;\n+  memmove (&(*decoded_options)[index + 1],\n+\t   &(*decoded_options)[index],\n+\t   sizeof (struct cl_decoded_option)\n+\t   * (*decoded_options_count - index));\n+}\n+\n /* Try to merge and complain about options FDECODED_OPTIONS when applied\n    ontop of DECODED_OPTIONS.  */\n \n@@ -202,6 +216,8 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t\t    unsigned int fdecoded_options_count)\n {\n   unsigned int i, j;\n+  struct cl_decoded_option *pic_option = NULL;\n+  struct cl_decoded_option *pie_option = NULL;\n \n   /* ???  Merge options from files.  Most cases can be\n      handled by either unioning or intersecting\n@@ -238,10 +254,6 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \tcase OPT_fdiagnostics_show_option:\n \tcase OPT_fdiagnostics_show_location_:\n \tcase OPT_fshow_column:\n-\tcase OPT_fPIC:\n-\tcase OPT_fpic:\n-\tcase OPT_fPIE:\n-\tcase OPT_fpie:\n \tcase OPT_fcommon:\n \tcase OPT_fgnu_tm:\n \t  /* Do what the old LTO code did - collect exactly one option\n@@ -255,6 +267,16 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t    append_option (decoded_options, decoded_options_count, foption);\n \t  break;\n \n+\t/* Figure out what PIC/PIE level wins and merge the results.  */\n+\tcase OPT_fPIC:\n+\tcase OPT_fpic:\n+\t  pic_option = foption;\n+\t  break;\n+\tcase OPT_fPIE:\n+\tcase OPT_fpie:\n+\t  pie_option = foption;\n+\t  break;\n+\n \tcase OPT_fopenmp:\n \tcase OPT_fopenacc:\n \tcase OPT_fcilkplus:\n@@ -286,18 +308,6 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t\t\t foption->orig_option_with_args_text);\n \t  break;\n \n-\tcase OPT_foffload_abi_:\n-\t  for (j = 0; j < *decoded_options_count; ++j)\n-\t    if ((*decoded_options)[j].opt_index == foption->opt_index)\n-\t      break;\n-\t  if (j == *decoded_options_count)\n-\t    append_option (decoded_options, decoded_options_count, foption);\n-\t  else if (foption->value != (*decoded_options)[j].value)\n-\t    fatal_error (input_location,\n-\t\t\t \"Option %s not used consistently in all LTO input\"\n-\t\t\t \" files\", foption->orig_option_with_args_text);\n-\t  break;\n-\n \tcase OPT_O:\n \tcase OPT_Ofast:\n \tcase OPT_Og:\n@@ -368,12 +378,70 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \t      (*decoded_options)[j].value = 1;\n \t    }\n \t  break;\n+ \n+\n+\tcase OPT_foffload_abi_:\n+\t  for (j = 0; j < *decoded_options_count; ++j)\n+\t    if ((*decoded_options)[j].opt_index == foption->opt_index)\n+\t      break;\n+\t  if (j == *decoded_options_count)\n+\t    append_option (decoded_options, decoded_options_count, foption);\n+\t  else if (foption->value != (*decoded_options)[j].value)\n+\t    fatal_error (input_location,\n+\t\t\t \"Option %s not used consistently in all LTO input\"\n+\t\t\t \" files\", foption->orig_option_with_args_text);\n+\t  break;\n+\n \n \tcase OPT_foffload_:\n \t  append_option (decoded_options, decoded_options_count, foption);\n \t  break;\n \t}\n     }\n+\n+  /* Merge PIC options:\n+      -fPIC + -fpic = -fpic\n+      -fPIC + -fno-pic = -fno-pic\n+      -fpic/-fPIC + nothin = nothing.  \n+     It is a common mistake to mix few -fPIC compiled objects into otherwise\n+     non-PIC code.  We do not want to build everything with PIC then.\n+\n+     It would be good to warn on mismatches, but it is bit hard to do as\n+     we do not know what nothing translates to.  */\n+    \n+  for (unsigned int j = 0; j < *decoded_options_count;)\n+    if ((*decoded_options)[j].opt_index == OPT_fPIC\n+        || (*decoded_options)[j].opt_index == OPT_fpic)\n+      {\n+\tif (!pic_option\n+\t    || (pic_option->value > 0) != ((*decoded_options)[j].value > 0))\n+\t  remove_option (decoded_options, j, decoded_options_count);\n+\telse if (pic_option->opt_index == OPT_fPIC\n+\t\t && (*decoded_options)[j].opt_index == OPT_fpic)\n+\t  {\n+\t    (*decoded_options)[j] = *pic_option;\n+\t    j++;\n+\t  }\n+\telse\n+\t  j++;\n+      }\n+   else if ((*decoded_options)[j].opt_index == OPT_fPIE\n+            || (*decoded_options)[j].opt_index == OPT_fpie)\n+      {\n+\tif (!pie_option\n+\t    || pie_option->value != (*decoded_options)[j].value)\n+\t  remove_option (decoded_options, j, decoded_options_count);\n+\telse if (pie_option->opt_index == OPT_fPIE\n+\t\t && (*decoded_options)[j].opt_index == OPT_fpie)\n+\t  {\n+\t    (*decoded_options)[j] = *pie_option;\n+\t    j++;\n+\t  }\n+\telse\n+\t  j++;\n+      }\n+   else\n+     j++;\n }\n \n /* Auxiliary function that frees elements of PTR and PTR itself."}]}