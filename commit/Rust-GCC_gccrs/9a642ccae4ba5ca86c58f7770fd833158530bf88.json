{"sha": "9a642ccae4ba5ca86c58f7770fd833158530bf88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2NDJjY2FlNGJhNWNhODZjNThmNzc3MGZkODMzMTU4NTMwYmY4OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-03-02T01:58:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-03-02T01:58:30Z"}, "message": "Class template argument deduction in new-expression\n\n\tClass template argument deduction in new-expression\n\t* init.c (build_new): Handle deduction from no initializer.\n\t* parser.c (cp_parser_new_expression): Don't require a single\n\texpression for class template deduction.\n\t* typeck2.c (cxx_incomplete_type_diagnostic): Fix diagnostic for\n\tclass template placeholder.\n\t* pt.c (tsubst_copy) [TEMPLATE_DECL]: Handle dependent context.\n\t(tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: Handle SCOPE_REF.\n\t(redeclare_class_template): Set TEMPLATE_TYPE_PARM_FOR_CLASS.\n\nFrom-SVN: r245826", "tree": {"sha": "a5e071e800e22c73c4e996eec76b100110eb382d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5e071e800e22c73c4e996eec76b100110eb382d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a642ccae4ba5ca86c58f7770fd833158530bf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a642ccae4ba5ca86c58f7770fd833158530bf88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a642ccae4ba5ca86c58f7770fd833158530bf88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a642ccae4ba5ca86c58f7770fd833158530bf88/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2b83483746b7b66f51ada58f5ac2a5f821154935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b83483746b7b66f51ada58f5ac2a5f821154935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b83483746b7b66f51ada58f5ac2a5f821154935"}], "stats": {"total": 99, "additions": 89, "deletions": 10}, "files": [{"sha": "405e3d52b7e3642a36012ef7ef24f13d1cc34638", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a642ccae4ba5ca86c58f7770fd833158530bf88", "patch": "@@ -1,3 +1,15 @@\n+2017-03-01  Jason Merrill  <jason@redhat.com>\n+\n+\tClass template argument deduction in new-expression\n+\t* init.c (build_new): Handle deduction from no initializer.\n+\t* parser.c (cp_parser_new_expression): Don't require a single\n+\texpression for class template deduction.\n+\t* typeck2.c (cxx_incomplete_type_diagnostic): Fix diagnostic for\n+\tclass template placeholder.\n+\t* pt.c (tsubst_copy) [TEMPLATE_DECL]: Handle dependent context.\n+\t(tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: Handle SCOPE_REF.\n+\t(redeclare_class_template): Set TEMPLATE_TYPE_PARM_FOR_CLASS.\n+\n 2017-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79746"}, {"sha": "191fe13e31039947d1d5d660eef0b9c0d8d9ba94", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9a642ccae4ba5ca86c58f7770fd833158530bf88", "patch": "@@ -3478,15 +3478,19 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  if (nelts == NULL_TREE && vec_safe_length (*init) == 1\n+  if (nelts == NULL_TREE\n       /* Don't do auto deduction where it might affect mangling.  */\n       && (!processing_template_decl || at_function_scope_p ()))\n     {\n       tree auto_node = type_uses_auto (type);\n       if (auto_node)\n \t{\n-\t  tree d_init = (**init)[0];\n-\t  d_init = resolve_nondeduced_context (d_init, complain);\n+\t  tree d_init = NULL_TREE;\n+\t  if (vec_safe_length (*init) == 1)\n+\t    {\n+\t      d_init = (**init)[0];\n+\t      d_init = resolve_nondeduced_context (d_init, complain);\n+\t    }\n \t  type = do_auto_deduction (type, d_init, auto_node);\n \t}\n     }"}, {"sha": "e6848701150020f02cd683b271a8d32ba01540ea", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9a642ccae4ba5ca86c58f7770fd833158530bf88", "patch": "@@ -8228,7 +8228,8 @@ cp_parser_new_expression (cp_parser* parser)\n      contain a new-initializer of the form ( assignment-expression )\".\n      Additionally, consistently with the spirit of DR 1467, we want to accept\n      'new auto { 2 }' too.  */\n-  else if (type_uses_auto (type)\n+  else if ((ret = type_uses_auto (type))\n+\t   && !CLASS_PLACEHOLDER_TEMPLATE (ret)\n \t   && (vec_safe_length (initializer) != 1\n \t       || (BRACE_ENCLOSED_INITIALIZER_P ((*initializer)[0])\n \t\t   && CONSTRUCTOR_NELTS ((*initializer)[0]) != 1)))"}, {"sha": "8144ca66a0152b80ab191a478d7197dfd0ceb3ce", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9a642ccae4ba5ca86c58f7770fd833158530bf88", "patch": "@@ -5732,6 +5732,9 @@ redeclare_class_template (tree type, tree parms, tree cons)\n \t  gcc_assert (DECL_CONTEXT (parm) == NULL_TREE);\n \t  DECL_CONTEXT (parm) = tmpl;\n \t}\n+\n+      if (TREE_CODE (parm) == TYPE_DECL)\n+\tTEMPLATE_TYPE_PARM_FOR_CLASS (TREE_TYPE (parm)) = true;\n     }\n \n   // Cannot redeclare a class template with a different set of constraints.\n@@ -14638,6 +14641,15 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t     have to substitute this with one having context `D<int>'.  */\n \n \t  tree context = tsubst (DECL_CONTEXT (t), args, complain, in_decl);\n+\t  if (dependent_scope_p (context))\n+\t    {\n+\t      /* When rewriting a constructor into a deduction guide, a\n+\t\t non-dependent name can become dependent, so memtmpl<args>\n+\t\t becomes context::template memtmpl<args>.  */\n+\t      tree type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\t      return build_qualified_name (type, context, DECL_NAME (t),\n+\t\t\t\t\t   /*template*/true);\n+\t    }\n \t  return lookup_field (context, DECL_NAME(t), 0, false);\n \t}\n       else\n@@ -16621,6 +16633,14 @@ tsubst_copy_and_build (tree t,\n \tif (targs == error_mark_node)\n \t  return error_mark_node;\n \n+\tif (TREE_CODE (templ) == SCOPE_REF)\n+\t  {\n+\t    tree name = TREE_OPERAND (templ, 1);\n+\t    tree tid = lookup_template_function (name, targs);\n+\t    TREE_OPERAND (templ, 1) = tid;\n+\t    return templ;\n+\t  }\n+\n \tif (variable_template_p (templ))\n \t  RETURN (lookup_and_finish_template_variable (templ, targs, complain));\n \n@@ -25144,7 +25164,7 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n       type = TREE_TYPE (most_general_template (tmpl));\n     }\n \n-  bool saw_default = false;\n+  bool saw_ctor = false;\n   bool saw_copy = false;\n   if (CLASSTYPE_METHOD_VEC (type))\n     // FIXME cache artificial deduction guides\n@@ -25154,9 +25174,9 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n \ttree guide = build_deduction_guide (fn, outer_args, complain);\n \tcands = ovl_cons (guide, cands);\n \n+\tsaw_ctor = true;\n+\n \ttree parms = FUNCTION_FIRST_USER_PARMTYPE (fn);\n-\tif (sufficient_parms_p (parms))\n-\t  saw_default = true;\n \tif (parms && sufficient_parms_p (TREE_CHAIN (parms)))\n \t  {\n \t    tree pt = TREE_VALUE (parms);\n@@ -25167,7 +25187,7 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n \t  }\n       }\n \n-  if (!saw_default && args->length() == 0)\n+  if (!saw_ctor && args->length() == 0)\n     {\n       tree guide = build_deduction_guide (type, outer_args, complain);\n       cands = ovl_cons (guide, cands);"}, {"sha": "58a01c98f2a5f9fb8797f8086007b92ca7a63ec6", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=9a642ccae4ba5ca86c58f7770fd833158530bf88", "patch": "@@ -523,8 +523,14 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \n     case TEMPLATE_TYPE_PARM:\n       if (is_auto (type))\n-\temit_diagnostic (diag_kind, loc, 0,\n-\t\t\t \"invalid use of %<auto%>\");\n+\t{\n+\t  if (CLASS_PLACEHOLDER_TEMPLATE (type))\n+\t    emit_diagnostic (diag_kind, loc, 0,\n+\t\t\t     \"invalid use of placeholder %qT\", type);\n+\t  else\n+\t    emit_diagnostic (diag_kind, loc, 0,\n+\t\t\t     \"invalid use of %qT\", type);\n+\t}\n       else\n \temit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"invalid use of template type parameter %qT\", type);"}, {"sha": "d135031c277de084657875bf2eaee556ebeeadc2", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction33.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction33.C?ref=9a642ccae4ba5ca86c58f7770fd833158530bf88", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options -std=c++1z }\n+\n+template <class,class> struct same;\n+template <class T> struct same<T,T> {};\n+\n+template <class T = void> struct A { };\n+template <class T> struct B { B(T,T); };\n+\n+int main()\n+{\n+  same<decltype(new A),A<void>*>();\n+  same<decltype(new B{1,2}),B<int>*>();\n+}"}, {"sha": "b03587969cfa8358e0d34e1224a6cbd37edf1375", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction34.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction34.C?ref=9a642ccae4ba5ca86c58f7770fd833158530bf88", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options -std=c++1z }\n+\n+template <class T>\n+struct A\n+{\n+  template <class U>\n+  static constexpr bool B = U();\n+\n+  template <class U, bool V = B<U>>\n+  A(T, U);\n+};\n+\n+A a (1,2);"}, {"sha": "b0e53d1c75e82afdf9a030a905114d77737493c6", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction35.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a642ccae4ba5ca86c58f7770fd833158530bf88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction35.C?ref=9a642ccae4ba5ca86c58f7770fd833158530bf88", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options -std=c++1z }\n+\n+template <class T> struct A;\n+\n+template <class T> struct A {\n+  A(T&&);\n+};\n+\n+int i;\n+A a = i;\t\t\t// { dg-error \"\" }"}]}