{"sha": "288cbbbdacf90e3da12df2fd0cffba69f66369ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4Y2JiYmRhY2Y5MGUzZGExMmRmMmZkMGNmZmJhNjlmNjYzNjlhYw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2015-05-25T12:37:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-25T12:37:37Z"}, "message": "einfo.ads, einfo.adb (Has_Out_Or_In_Out_Parameter): This attribute is now present in subprograms...\n\n2015-05-25  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.ads, einfo.adb (Has_Out_Or_In_Out_Parameter): This attribute\n\tis now present in subprograms, generic subprograms, entries and\n\tentry families.\n\t* sem_ch6.adb (Set_Formal_Mode): Set As_Out_Or_In_Out_Parameter\n\ton entries, entry families, subprograms and generic subprograms.\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration):\n\tMinor code reorganization to ensure that the Ekind attribute\n\tof the subprogram entity is set before its formals are\n\tprocessed. Required to allow the use of the attribute\n\tHas_Out_Or_In_Out_Parameter on the subprogram entity.\n\t* sem_aggr.adb (Resolve_Aggregate, Resolve_Extension_Aggregate):\n\tPerform the check on writable actuals only if the value of some\n\tcomponent of the aggregate involves calling a function with\n\tout-mode parameters.\n\t(Resolve_Record_Aggregate): Propagate the Check_Actuals flag to the\n\tinternally built aggregate.\n\t* sem_ch3.adb (Build_Derived_Record_Type, Record_Type_Declaration):\n\tPerform the check on writable actuals only if the initialization of\n\tsome component involves calling a function with out-mode parameters.\n\t* sem_ch4.adb (Analyze_Arithmetic_Op, Analyze_Comparison_Op,\n\tAnalyze_Equality_Op, Analyze_Logical_Op, Analyze_Membership_Op,\n\tAnalyze_Range): Check writable actuals only if the\n\tsubtrees have a call to a function with out-mode parameters\n\t(Analyze_Call.Check_Writable_Actuals): New subprogram. If the call\n\thas out or in-out parameters then mark its outermost enclosing\n\tconstruct as a node on which the writable actuals check must\n\tbe performed.\n\t(Analyze_Call): Check if the flag must be set and if the outermost\n\tenclosing construct.\n\t* sem_util.adb (Check_Function_Writable_Actuals): Code cleanup\n\tand reorganization. We skip processing aggregate discriminants\n\tsince their precise analysis involves two phases traversal.\n\t* sem_res.adb (Resolve_Actuals, Resolve_Arithmetic_Op,\n\tResolve_Logical_Op, Resolve_Membership_Op): Remove call to\n\tcheck_writable_actuals.\n\nFrom-SVN: r223643", "tree": {"sha": "3e3cdc877bdf2c5b61464ad922de2bd1e6c7320e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e3cdc877bdf2c5b61464ad922de2bd1e6c7320e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/288cbbbdacf90e3da12df2fd0cffba69f66369ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288cbbbdacf90e3da12df2fd0cffba69f66369ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/288cbbbdacf90e3da12df2fd0cffba69f66369ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288cbbbdacf90e3da12df2fd0cffba69f66369ac/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "277420210d9e1e3d281d40a88b9d8b54be8fc91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277420210d9e1e3d281d40a88b9d8b54be8fc91f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/277420210d9e1e3d281d40a88b9d8b54be8fc91f"}], "stats": {"total": 369, "additions": 329, "deletions": 40}, "files": [{"sha": "5afd2f8f583556e2babba5ddddac5e1fd8402026", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -1,3 +1,41 @@\n+2015-05-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Has_Out_Or_In_Out_Parameter): This attribute\n+\tis now present in subprograms, generic subprograms, entries and\n+\tentry families.\n+\t* sem_ch6.adb (Set_Formal_Mode): Set As_Out_Or_In_Out_Parameter\n+\ton entries, entry families, subprograms and generic subprograms.\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration):\n+\tMinor code reorganization to ensure that the Ekind attribute\n+\tof the subprogram entity is set before its formals are\n+\tprocessed. Required to allow the use of the attribute\n+\tHas_Out_Or_In_Out_Parameter on the subprogram entity.\n+\t* sem_aggr.adb (Resolve_Aggregate, Resolve_Extension_Aggregate):\n+\tPerform the check on writable actuals only if the value of some\n+\tcomponent of the aggregate involves calling a function with\n+\tout-mode parameters.\n+\t(Resolve_Record_Aggregate): Propagate the Check_Actuals flag to the\n+\tinternally built aggregate.\n+\t* sem_ch3.adb (Build_Derived_Record_Type, Record_Type_Declaration):\n+\tPerform the check on writable actuals only if the initialization of\n+\tsome component involves calling a function with out-mode parameters.\n+\t* sem_ch4.adb (Analyze_Arithmetic_Op, Analyze_Comparison_Op,\n+\tAnalyze_Equality_Op, Analyze_Logical_Op, Analyze_Membership_Op,\n+\tAnalyze_Range): Check writable actuals only if the\n+\tsubtrees have a call to a function with out-mode parameters\n+\t(Analyze_Call.Check_Writable_Actuals): New subprogram. If the call\n+\thas out or in-out parameters then mark its outermost enclosing\n+\tconstruct as a node on which the writable actuals check must\n+\tbe performed.\n+\t(Analyze_Call): Check if the flag must be set and if the outermost\n+\tenclosing construct.\n+\t* sem_util.adb (Check_Function_Writable_Actuals): Code cleanup\n+\tand reorganization. We skip processing aggregate discriminants\n+\tsince their precise analysis involves two phases traversal.\n+\t* sem_res.adb (Resolve_Actuals, Resolve_Arithmetic_Op,\n+\tResolve_Logical_Op, Resolve_Membership_Op): Remove call to\n+\tcheck_writable_actuals.\n+\n 2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Constrain_Concurrent): If the context is a"}, {"sha": "2c9a4bab0f96ac007a5950b2fd9143d1838f5621", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -1611,7 +1611,9 @@ package body Einfo is\n \n    function Has_Out_Or_In_Out_Parameter (Id : E) return B is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Generic_Function));\n+      pragma Assert\n+        (Ekind_In (Id, E_Entry, E_Entry_Family)\n+          or else Is_Subprogram_Or_Generic_Subprogram (Id));\n       return Flag110 (Id);\n    end Has_Out_Or_In_Out_Parameter;\n \n@@ -4505,7 +4507,9 @@ package body Einfo is\n \n    procedure Set_Has_Out_Or_In_Out_Parameter (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Generic_Function));\n+      pragma Assert\n+        (Ekind_In (Id, E_Entry, E_Entry_Family)\n+          or else Is_Subprogram_Or_Generic_Subprogram (Id));\n       Set_Flag110 (Id, V);\n    end Set_Has_Out_Or_In_Out_Parameter;\n "}, {"sha": "8676713b7b98df1a21a6f66133b1394911b3c1ff", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -1756,8 +1756,9 @@ package Einfo is\n --       Object_Size clauses for a given entity.\n \n --    Has_Out_Or_In_Out_Parameter (Flag110)\n---       Present in function and generic function entities. Set if the function\n---       has at least one OUT or IN OUT parameter (allowed only in Ada 2012).\n+--       Present in subprograms, generic subprograms, entries and entry\n+--       families. Set if they have at least one OUT or IN OUT parameter\n+--       (allowed for functions only in Ada 2012).\n \n --    Has_Per_Object_Constraint (Flag154)\n --       Defined in E_Component entities. Set if the subtype of the component"}, {"sha": "d38547d701ce91af7d2ce6256be9b83300dd2f68", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -1161,7 +1161,9 @@ package body Sem_Aggr is\n          Set_Analyzed (N);\n       end if;\n \n-      Check_Function_Writable_Actuals (N);\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Resolve_Aggregate;\n \n    -----------------------------\n@@ -2904,7 +2906,9 @@ package body Sem_Aggr is\n          Error_Msg_N (\"no unique type for this aggregate\",  A);\n       end if;\n \n-      Check_Function_Writable_Actuals (N);\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Resolve_Extension_Aggregate;\n \n    ------------------------------\n@@ -4677,6 +4681,7 @@ package body Sem_Aggr is\n          Set_Expressions            (New_Aggregate, No_List);\n          Set_Etype                  (New_Aggregate, Etype (N));\n          Set_Component_Associations (New_Aggregate, New_Assoc_List);\n+         Set_Check_Actuals          (New_Aggregate, Check_Actuals (N));\n \n          Rewrite (N, New_Aggregate);\n       end Step_8;"}, {"sha": "a915a43f33b9f89c8f0845de1b13d31b6a49de11", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -3366,13 +3366,17 @@ package body Sem_Ch12 is\n \n       Formals := Parameter_Specifications (Spec);\n \n+      if Nkind (Spec) = N_Function_Specification then\n+         Set_Ekind (Id, E_Generic_Function);\n+      else\n+         Set_Ekind (Id, E_Generic_Procedure);\n+      end if;\n+\n       if Present (Formals) then\n          Process_Formals (Formals, Spec);\n       end if;\n \n       if Nkind (Spec) = N_Function_Specification then\n-         Set_Ekind (Id, E_Generic_Function);\n-\n          if Nkind (Result_Definition (Spec)) = N_Access_Definition then\n             Result_Type := Access_Definition (Spec, Result_Definition (Spec));\n             Set_Etype (Id, Result_Type);\n@@ -3420,7 +3424,6 @@ package body Sem_Ch12 is\n          end if;\n \n       else\n-         Set_Ekind (Id, E_Generic_Procedure);\n          Set_Etype (Id, Standard_Void_Type);\n       end if;\n "}, {"sha": "ecd1639242f7361a139bdce9103a01470efa2a31", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -8953,7 +8953,9 @@ package body Sem_Ch3 is\n            (Class_Wide_Type (Derived_Type), Last_Entity (Derived_Type));\n       end if;\n \n-      Check_Function_Writable_Actuals (N);\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Build_Derived_Record_Type;\n \n    ------------------------\n@@ -21116,7 +21118,9 @@ package body Sem_Ch3 is\n          Derive_Progenitor_Subprograms (T, T);\n       end if;\n \n-      Check_Function_Writable_Actuals (N);\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Record_Type_Declaration;\n \n    ----------------------------"}, {"sha": "e87af41e5e7f4cbf4c8c60eb72b9c8915edcd2f0", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 182, "deletions": 1, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -830,6 +830,10 @@ package body Sem_Ch4 is\n       end if;\n \n       Operator_Check (N);\n+\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Analyze_Arithmetic_Op;\n \n    ------------------\n@@ -862,6 +866,11 @@ package body Sem_Ch4 is\n       --  Check that parameter and named associations are not mixed. This is\n       --  a restriction in SPARK mode.\n \n+      procedure Check_Writable_Actuals (N : Node_Id);\n+      --  If the call has out or in-out parameters then mark its outermost\n+      --  enclosing construct as a node on which the writable actuals check\n+      --  must be performed.\n+\n       function Name_Denotes_Function return Boolean;\n       --  If the type of the name is an access to subprogram, this may be the\n       --  type of a name, or the return type of the function being called. If\n@@ -902,6 +911,140 @@ package body Sem_Ch4 is\n          end loop;\n       end Check_Mixed_Parameter_And_Named_Associations;\n \n+      ----------------------------\n+      -- Check_Writable_Actuals --\n+      ----------------------------\n+\n+      --  The identification of conflicts in calls to functions with writable\n+      --  actuals is performed in the analysis phase of the frontend to ensure\n+      --  that it reports exactly the same errors compiling with and without\n+      --  expansion enabled. It is performed in two stages:\n+\n+      --    1) When a call to a function with out-mode parameters is found\n+      --       we climb to the outermost enclosing construct which can be\n+      --       evaluated in arbitrary order and we mark it with the flag\n+      --       Check_Actuals.\n+\n+      --    2) When the analysis of the marked node is complete then we\n+      --       traverse its decorated subtree searching for conflicts\n+      --       (see function Sem_Util.Check_Function_Writable_Actuals).\n+\n+      --  The unique exception to this general rule are aggregates, since\n+      --  their analysis is performed by the frontend in the resolution\n+      --  phase. For aggregates we do not climb to its enclosing construct:\n+      --  we restrict the analysis to the subexpressions initializing the\n+      --  aggregate components.\n+\n+      --  This implies that the analysis of expressions containing aggregates\n+      --  is not complete since there may be conflicts on writable actuals\n+      --  involving subexpressions of the enclosing logical or arithmetic\n+      --  expressions. However, we cannot wait and perform the analysis when\n+      --  the whole subtree is resolved since the subtrees may be transformed\n+      --  thus adding extra complexity and computation cost to identify and\n+      --  report exactly the same errors compiling with and without expansion\n+      --  enabled.\n+\n+      procedure Check_Writable_Actuals (N : Node_Id) is\n+\n+         function Is_Arbitrary_Evaluation_Order_Construct\n+           (N : Node_Id) return Boolean;\n+         --  Return True if N is an Ada construct which may evaluate in\n+         --  arbitrary order. This function does not cover all the language\n+         --  constructs which can be evaluated in arbitrary order but the\n+         --  subset needed for AI05-0144.\n+\n+         ---------------------------------------------\n+         -- Is_Arbitrary_Evaluation_Order_Construct --\n+         ---------------------------------------------\n+\n+         function Is_Arbitrary_Evaluation_Order_Construct\n+           (N : Node_Id) return Boolean is\n+         begin\n+            return Nkind (N) = N_Aggregate\n+               or else Nkind (N) = N_Assignment_Statement\n+               or else Nkind (N) = N_Full_Type_Declaration\n+               or else Nkind (N) = N_Entry_Call_Statement\n+               or else Nkind (N) = N_Extension_Aggregate\n+               or else Nkind (N) = N_Indexed_Component\n+               or else Nkind (N) = N_Object_Declaration\n+               or else Nkind (N) = N_Pragma\n+               or else Nkind (N) = N_Range\n+               or else Nkind (N) = N_Slice\n+\n+               or else Nkind (N) in N_Array_Type_Definition\n+               or else Nkind (N) in N_Membership_Test\n+               or else Nkind (N) in N_Op\n+               or else Nkind (N) in N_Subprogram_Call;\n+         end Is_Arbitrary_Evaluation_Order_Construct;\n+\n+      --  Start of processing for Check_Writable_Actuals\n+\n+      begin\n+         if Comes_From_Source (N)\n+           and then Present (Get_Subprogram_Entity (N))\n+           and then Has_Out_Or_In_Out_Parameter (Get_Subprogram_Entity (N))\n+         then\n+            --  For procedures and entries there is no need to climb since\n+            --  we only need to check if the actuals of this call invoke\n+            --  functions whose out-mode parameters overlap.\n+\n+            if Nkind (N) /= N_Function_Call then\n+               Set_Check_Actuals (N);\n+\n+            --  For calls to functions we climb to the outermost enclosing\n+            --  construct where the out-mode actuals of this function may\n+            --  introduce conflicts.\n+\n+            else\n+               declare\n+                  Outermost : Node_Id;\n+                  P         : Node_Id := N;\n+\n+               begin\n+                  while Present (P) loop\n+\n+                     --  For object declarations we can climb to such node from\n+                     --  its object definition branch or from its initializing\n+                     --  expression. We prefer to mark the child node as the\n+                     --  outermost construct to avoid adding further complexity\n+                     --  to the routine which will take care later of\n+                     --  performing the writable actuals check.\n+\n+                     if Is_Arbitrary_Evaluation_Order_Construct (P)\n+                       and then Nkind (P) /= N_Assignment_Statement\n+                       and then Nkind (P) /= N_Object_Declaration\n+                     then\n+                        Outermost := P;\n+                     end if;\n+\n+                     --  Avoid climbing more than needed!\n+\n+                     exit when Nkind (P) = N_Aggregate\n+                       or else Nkind (P) = N_Assignment_Statement\n+                       or else Nkind (P) = N_Entry_Call_Statement\n+                       or else Nkind (P) = N_Extended_Return_Statement\n+                       or else Nkind (P) = N_Extension_Aggregate\n+                       or else Nkind (P) = N_Full_Type_Declaration\n+                       or else Nkind (P) = N_Object_Declaration\n+                       or else Nkind (P) = N_Object_Renaming_Declaration\n+                       or else Nkind (P) = N_Package_Specification\n+                       or else Nkind (P) = N_Pragma\n+                       or else Nkind (P) = N_Procedure_Call_Statement\n+                       or else Nkind (P) = N_Simple_Return_Statement\n+                       or else (Nkind (P) = N_Range\n+                                 and then not\n+                                   Nkind_In (Parent (P), N_In, N_Not_In))\n+                       or else Nkind (P) in N_Has_Condition;\n+\n+                     P := Parent (P);\n+                  end loop;\n+\n+                  Set_Check_Actuals (Outermost);\n+               end;\n+            end if;\n+         end if;\n+      end Check_Writable_Actuals;\n+\n       ---------------------------\n       -- Name_Denotes_Function --\n       ---------------------------\n@@ -1257,6 +1400,21 @@ package body Sem_Ch4 is\n \n          End_Interp_List;\n       end if;\n+\n+      if Ada_Version >= Ada_2012 then\n+\n+         --  Check if the call contains a function with writable actuals\n+\n+         Check_Writable_Actuals (N);\n+\n+         --  If found and the outermost construct which can be evaluated in\n+         --  arbitrary order is precisely this call then check all its\n+         --  actuals.\n+\n+         if Check_Actuals (N) then\n+            Check_Function_Writable_Actuals (N);\n+         end if;\n+      end if;\n    end Analyze_Call;\n \n    -----------------------------\n@@ -1474,6 +1632,10 @@ package body Sem_Ch4 is\n       end if;\n \n       Operator_Check (N);\n+\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Analyze_Comparison_Op;\n \n    ---------------------------\n@@ -1721,6 +1883,10 @@ package body Sem_Ch4 is\n       end if;\n \n       Operator_Check (N);\n+\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Analyze_Equality_Op;\n \n    ----------------------------------\n@@ -2544,6 +2710,10 @@ package body Sem_Ch4 is\n       end if;\n \n       Operator_Check (N);\n+\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Analyze_Logical_Op;\n \n    ---------------------------\n@@ -2699,6 +2869,11 @@ package body Sem_Ch4 is\n \n       if No (R) and then Ada_Version >= Ada_2012 then\n          Analyze_Set_Membership;\n+\n+         if Check_Actuals (N) then\n+            Check_Function_Writable_Actuals (N);\n+         end if;\n+\n          return;\n       end if;\n \n@@ -2770,6 +2945,10 @@ package body Sem_Ch4 is\n       then\n          Error_Msg_N (\"membership test not applicable to cpp-class types\", N);\n       end if;\n+\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Analyze_Membership_Op;\n \n    -----------------\n@@ -3849,7 +4028,9 @@ package body Sem_Ch4 is\n          Check_Universal_Expression (H);\n       end if;\n \n-      Check_Function_Writable_Actuals (N);\n+      if Check_Actuals (N) then\n+         Check_Function_Writable_Actuals (N);\n+      end if;\n    end Analyze_Range;\n \n    -----------------------"}, {"sha": "5e3be75ae989a87047957a3ffbdd6ae77e4f6320", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -10539,14 +10539,21 @@ package body Sem_Ch6 is\n \n    procedure Set_Formal_Mode (Formal_Id : Entity_Id) is\n       Spec : constant Node_Id := Parent (Formal_Id);\n+      Id   : constant Entity_Id := Scope (Formal_Id);\n \n    begin\n       --  Note: we set Is_Known_Valid for IN parameters and IN OUT parameters\n       --  since we ensure that corresponding actuals are always valid at the\n       --  point of the call.\n \n       if Out_Present (Spec) then\n-         if Ekind_In (Scope (Formal_Id), E_Function, E_Generic_Function) then\n+         if Ekind_In (Id, E_Entry, E_Entry_Family)\n+           or else Is_Subprogram_Or_Generic_Subprogram (Id)\n+         then\n+            Set_Has_Out_Or_In_Out_Parameter (Id, True);\n+         end if;\n+\n+         if Ekind_In (Id, E_Function, E_Generic_Function) then\n \n             --  [IN] OUT parameters allowed for functions in Ada 2012\n \n@@ -10564,8 +10571,6 @@ package body Sem_Ch6 is\n                   Set_Ekind (Formal_Id, E_Out_Parameter);\n                end if;\n \n-               Set_Has_Out_Or_In_Out_Parameter (Scope (Formal_Id), True);\n-\n             --  But not in earlier versions of Ada\n \n             else"}, {"sha": "fe739341b8fcd8188a51cf33fc98fb49b1defd9d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -3566,7 +3566,6 @@ package body Sem_Res is\n \n    begin\n       Check_Argument_Order;\n-      Check_Function_Writable_Actuals (N);\n \n       if Is_Overloadable (Nam)\n         and then Is_Inherited_Operation (Nam)\n@@ -5508,7 +5507,6 @@ package body Sem_Res is\n \n       Check_Unset_Reference (L);\n       Check_Unset_Reference (R);\n-      Check_Function_Writable_Actuals (N);\n    end Resolve_Arithmetic_Op;\n \n    ------------------\n@@ -8600,8 +8598,6 @@ package body Sem_Res is\n             end if;\n          end;\n       end if;\n-\n-      Check_Function_Writable_Actuals (N);\n    end Resolve_Logical_Op;\n \n    ---------------------------\n@@ -8793,7 +8789,6 @@ package body Sem_Res is\n       <<SM_Exit>>\n \n       Eval_Membership_Op (N);\n-      Check_Function_Writable_Actuals (N);\n    end Resolve_Membership_Op;\n \n    ------------------"}, {"sha": "5f6f464c1ff830cdef0f0bc9da65e1917a419a7c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 73, "deletions": 20, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288cbbbdacf90e3da12df2fd0cffba69f66369ac/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=288cbbbdacf90e3da12df2fd0cffba69f66369ac", "patch": "@@ -2119,11 +2119,37 @@ package body Sem_Util is\n                then\n                   return Skip;\n \n+               --  For now we skip aggregate discriminants since they require\n+               --  performing the analysis in two phases to identify conflicts:\n+               --  first one analyzing discriminants and second one analyzing\n+               --  the rest of components (since at runtime discriminants are\n+               --  evaluated prior to components): too much computation cost\n+               --  to identify a corner case???\n+\n+               elsif Nkind (Parent (N)) = N_Component_Association\n+                  and then Nkind_In (Parent (Parent (N)),\n+                             N_Aggregate,\n+                             N_Extension_Aggregate)\n+               then\n+                  declare\n+                     Choice : constant Node_Id := First (Choices (Parent (N)));\n+                  begin\n+                     if Ekind (Entity (N)) = E_Discriminant then\n+                        return Skip;\n+\n+                     elsif Expression (Parent (N)) = N\n+                        and then Nkind (Choice) = N_Identifier\n+                        and then Ekind (Entity (Choice)) = E_Discriminant\n+                     then\n+                        return Skip;\n+                     end if;\n+                  end;\n+\n                --  Analyze if N is a writable actual of a function\n \n                elsif Nkind (Parent (N)) = N_Function_Call then\n                   declare\n-                     Call   : constant Node_Id   := Parent (N);\n+                     Call   : constant Node_Id := Parent (N);\n                      Actual : Node_Id;\n                      Formal : Node_Id;\n \n@@ -2136,32 +2162,59 @@ package body Sem_Util is\n                         return Abandon;\n                      end if;\n \n-                     Formal := First_Formal (Id);\n-                     Actual := First_Actual (Call);\n-                     while Present (Actual) and then Present (Formal) loop\n-                        if Actual = N then\n-                           if Ekind_In (Formal, E_Out_Parameter,\n-                                                E_In_Out_Parameter)\n-                           then\n-                              Is_Writable_Actual := True;\n-                           end if;\n+                     if Ekind_In (Id, E_Function, E_Generic_Function)\n+                       and then Has_Out_Or_In_Out_Parameter (Id)\n+                     then\n+                        Formal := First_Formal (Id);\n+                        Actual := First_Actual (Call);\n+                        while Present (Actual) and then Present (Formal) loop\n+                           if Actual = N then\n+                              if Ekind_In (Formal, E_Out_Parameter,\n+                                                   E_In_Out_Parameter)\n+                              then\n+                                 Is_Writable_Actual := True;\n+                              end if;\n \n-                           exit;\n-                        end if;\n+                              exit;\n+                           end if;\n \n-                        Next_Formal (Formal);\n-                        Next_Actual (Actual);\n-                     end loop;\n+                           Next_Formal (Formal);\n+                           Next_Actual (Actual);\n+                        end loop;\n+                     end if;\n                   end;\n                end if;\n \n                if Is_Writable_Actual then\n                   if Contains (Writable_Actuals_List, N) then\n-                     Error_Msg_NE\n-                       (\"value may be affected by call to& \"\n-                        & \"because order of evaluation is arbitrary\", N, Id);\n-                     Error_Node := N;\n-                     return Abandon;\n+\n+                     --  Report the error on the second occurrence of the\n+                     --  identifier. We cannot assume that N is the second\n+                     --  occurrence since traverse_func walks through Field2\n+                     --  last (see comment in the body of traverse_func).\n+\n+                     declare\n+                        Elmt : Elmt_Id := First_Elmt (Writable_Actuals_List);\n+\n+                     begin\n+                        while Present (Elmt)\n+                           and then Entity (Node (Elmt)) /= Entity (N)\n+                        loop\n+                           Next_Elmt (Elmt);\n+                        end loop;\n+\n+                        if Sloc (N) > Sloc (Node (Elmt)) then\n+                           Error_Node := N;\n+                        else\n+                           Error_Node := Node (Elmt);\n+                        end if;\n+\n+                        Error_Msg_NE\n+                          (\"value may be affected by call to& \"\n+                           & \"because order of evaluation is arbitrary\",\n+                           Error_Node, Id);\n+                        return Abandon;\n+                     end;\n                   end if;\n \n                   Append_New_Elmt (N, To => Writable_Actuals_List);"}]}