{"sha": "b899fd784b2e89080c853afd5bb1776328c9d4e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5OWZkNzg0YjJlODkwODBjODUzYWZkNWJiMTc3NjMyOGM5ZDRlNw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2011-01-19T15:23:06Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2011-01-19T15:23:06Z"}, "message": "tm.texi.in: Spell out that a lack of register class unions can lead to ICEs.\n\n\t* doc/tm.texi.in: Spell out that a lack of register class unions\n\tcan lead to ICEs.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r168998", "tree": {"sha": "61d760d08b33ace1f32c11078ec43d5980b02e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d760d08b33ace1f32c11078ec43d5980b02e04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b899fd784b2e89080c853afd5bb1776328c9d4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b899fd784b2e89080c853afd5bb1776328c9d4e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b899fd784b2e89080c853afd5bb1776328c9d4e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b899fd784b2e89080c853afd5bb1776328c9d4e7/comments", "author": null, "committer": null, "parents": [{"sha": "2e0642cde2ace61ba98145609d5f62796666cbfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0642cde2ace61ba98145609d5f62796666cbfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0642cde2ace61ba98145609d5f62796666cbfa"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "9af2456e621aa220af1d8eac2b55d0cc3ae26971", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b899fd784b2e89080c853afd5bb1776328c9d4e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b899fd784b2e89080c853afd5bb1776328c9d4e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b899fd784b2e89080c853afd5bb1776328c9d4e7", "patch": "@@ -1,3 +1,9 @@\n+2011-01-19  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\t* doc/tm.texi.in: Spell out that a lack of register class unions\n+\tcan lead to ICEs.\n+\t* doc/tm.texi: Regenerate.\n+\n 2011-01-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/47337"}, {"sha": "e3325b05896cf8d72456ddef520030d0f6d744c1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b899fd784b2e89080c853afd5bb1776328c9d4e7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b899fd784b2e89080c853afd5bb1776328c9d4e7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b899fd784b2e89080c853afd5bb1776328c9d4e7", "patch": "@@ -2341,7 +2341,9 @@ You should define a class for the union of two classes whenever some\n instruction allows both classes.  For example, if an instruction allows\n either a floating point (coprocessor) register or a general register for a\n certain operand, you should define a class @code{FLOAT_OR_GENERAL_REGS}\n-which includes both of them.  Otherwise you will get suboptimal code.\n+which includes both of them.  Otherwise you will get suboptimal code,\n+or even internal compiler errors when reload cannot find a register in the\n+the class computed via @code{reg_class_subunion}.\n \n You must also specify certain redundant information about the register\n classes: for each class, which classes contain it and which ones are"}, {"sha": "1a5f0403fa299e315a9593ea603721b4ddbc155e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b899fd784b2e89080c853afd5bb1776328c9d4e7/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b899fd784b2e89080c853afd5bb1776328c9d4e7/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=b899fd784b2e89080c853afd5bb1776328c9d4e7", "patch": "@@ -2331,7 +2331,9 @@ You should define a class for the union of two classes whenever some\n instruction allows both classes.  For example, if an instruction allows\n either a floating point (coprocessor) register or a general register for a\n certain operand, you should define a class @code{FLOAT_OR_GENERAL_REGS}\n-which includes both of them.  Otherwise you will get suboptimal code.\n+which includes both of them.  Otherwise you will get suboptimal code,\n+or even internal compiler errors when reload cannot find a register in the\n+the class computed via @code{reg_class_subunion}.\n \n You must also specify certain redundant information about the register\n classes: for each class, which classes contain it and which ones are"}]}