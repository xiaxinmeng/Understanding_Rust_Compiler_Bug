{"sha": "3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmOWUxZWM0YmNkODU5ZmNhMmU4YjgwNzM5ZWM1ZDk4NjE4YmIyMw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2017-11-15T21:21:32Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2017-11-15T21:21:32Z"}, "message": "altivec.h (vec_xst_be): New #define.\n\n[gcc]\n\n2017-11-15  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_xst_be): New #define.\n\t* config/rs6000/altivec.md (altivec_vperm_<mode>_direct): Rename\n\tand externalize from *altivec_vperm_<mode>_internal.\n\t* config/rs6000/rs6000-builtin.def (XL_BE_V16QI): Remove macro\n\tinstantiation.\n\t(XL_BE_V8HI): Likewise.\n\t(XL_BE_V4SI): Likewise.\n\t(XL_BE_V4SI): Likewise.\n\t(XL_BE_V2DI): Likewise.\n\t(XL_BE_V4SF): Likewise.\n\t(XL_BE_V2DF): Likewise.\n\t(XST_BE): Add BU_VSX_OVERLOAD_X macro instantiation.\n\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Correct\n\tall array entries with these keys: VSX_BUILTIN_VEC_XL,\n\tVSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_VEC_XST.  Add entries for key\n\tVSX_BUILTIN_VEC_XST_BE.\n\t* config/rs6000/rs6000.c (altivec_expand_xl_be_builtin): Remove.\n\t(altivec_expand_builtin): Remove handling for VSX_BUILTIN_XL_BE_*\n\tbuilt-ins.\n\t(altivec_init_builtins): Replace conditional calls to def_builtin\n\tfor __builtin_vsx_ld_elemrev_{v8hi,v16qi} and\n\t__builtin_vsx_st_elemrev_{v8hi,v16qi} based on TARGET_P9_VECTOR\n\twith unconditional calls.  Remove calls to def_builtin for\n\t__builtin_vsx_le_be_<mode>.  Add a call to def_builtin for\n\t__builtin_vec_xst_be.\n\t* config/rs6000/vsx.md (vsx_ld_elemrev_v8hi): Convert define_insn\n\tto define_expand, and add alternate RTL generation for P8.\n\t(*vsx_ld_elemrev_v8hi_internal): New define_insn based on\n\tvsx_ld_elemrev_v8hi.\n\t(vsx_ld_elemrev_v16qi): Convert define_insn to define_expand, and\n\tadd alternate RTL generation for P8.\n\t(*vsx_ld_elemrev_v16qi_internal): New define_insn based on\n\tvsx_ld_elemrev_v16qi.\n\t(vsx_st_elemrev_v8hi): Convert define_insn\n\tto define_expand, and add alternate RTL generation for P8.\n\t(*vsx_st_elemrev_v8hi_internal): New define_insn based on\n\tvsx_st_elemrev_v8hi.\n\t(vsx_st_elemrev_v16qi): Convert define_insn to define_expand, and\n\tadd alternate RTL generation for P8.\n\t(*vsx_st_elemrev_v16qi_internal): New define_insn based on\n\tvsx_st_elemrev_v16qi.\n\n[gcc/testsuite]\n\n2017-11-15  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/swaps-p8-26.c: Modify expected code\n\tgeneration.\n\nFrom-SVN: r254787", "tree": {"sha": "9da9cffd707165901dd76848ea090b28101ab84b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9da9cffd707165901dd76848ea090b28101ab84b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb8e79827943a491ccf190e9d05270ace2d64827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8e79827943a491ccf190e9d05270ace2d64827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8e79827943a491ccf190e9d05270ace2d64827"}], "stats": {"total": 616, "additions": 380, "deletions": 236}, "files": [{"sha": "8ad4d7b1d8cc7817330085c07f44714191694240", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -1,3 +1,47 @@\n+2017-11-15  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_xst_be): New #define.\n+\t* config/rs6000/altivec.md (altivec_vperm_<mode>_direct): Rename\n+\tand externalize from *altivec_vperm_<mode>_internal.\n+\t* config/rs6000/rs6000-builtin.def (XL_BE_V16QI): Remove macro\n+\tinstantiation.\n+\t(XL_BE_V8HI): Likewise.\n+\t(XL_BE_V4SI): Likewise.\n+\t(XL_BE_V4SI): Likewise.\n+\t(XL_BE_V2DI): Likewise.\n+\t(XL_BE_V4SF): Likewise.\n+\t(XL_BE_V2DF): Likewise.\n+\t(XST_BE): Add BU_VSX_OVERLOAD_X macro instantiation.\n+\t* config/rs6000/rs6000-c.c (altivec_overloaded_builtins): Correct\n+\tall array entries with these keys: VSX_BUILTIN_VEC_XL,\n+\tVSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_VEC_XST.  Add entries for key\n+\tVSX_BUILTIN_VEC_XST_BE.\n+\t* config/rs6000/rs6000.c (altivec_expand_xl_be_builtin): Remove.\n+\t(altivec_expand_builtin): Remove handling for VSX_BUILTIN_XL_BE_*\n+\tbuilt-ins.\n+\t(altivec_init_builtins): Replace conditional calls to def_builtin\n+\tfor __builtin_vsx_ld_elemrev_{v8hi,v16qi} and\n+\t__builtin_vsx_st_elemrev_{v8hi,v16qi} based on TARGET_P9_VECTOR\n+\twith unconditional calls.  Remove calls to def_builtin for\n+\t__builtin_vsx_le_be_<mode>.  Add a call to def_builtin for\n+\t__builtin_vec_xst_be.\n+\t* config/rs6000/vsx.md (vsx_ld_elemrev_v8hi): Convert define_insn\n+\tto define_expand, and add alternate RTL generation for P8.\n+\t(*vsx_ld_elemrev_v8hi_internal): New define_insn based on\n+\tvsx_ld_elemrev_v8hi.\n+\t(vsx_ld_elemrev_v16qi): Convert define_insn to define_expand, and\n+\tadd alternate RTL generation for P8.\n+\t(*vsx_ld_elemrev_v16qi_internal): New define_insn based on\n+\tvsx_ld_elemrev_v16qi.\n+\t(vsx_st_elemrev_v8hi): Convert define_insn\n+\tto define_expand, and add alternate RTL generation for P8.\n+\t(*vsx_st_elemrev_v8hi_internal): New define_insn based on\n+\tvsx_st_elemrev_v8hi.\n+\t(vsx_st_elemrev_v16qi): Convert define_insn to define_expand, and\n+\tadd alternate RTL generation for P8.\n+\t(*vsx_st_elemrev_v16qi_internal): New define_insn based on\n+\tvsx_st_elemrev_v16qi.\n+\n 2017-11-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/82990"}, {"sha": "068dfef2e0081bdd2b87b7764f2ef9cbb6b59222", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -357,6 +357,7 @@\n #define vec_xl __builtin_vec_vsx_ld\n #define vec_xl_be __builtin_vec_xl_be\n #define vec_xst __builtin_vec_vsx_st\n+#define vec_xst_be __builtin_vec_xst_be\n \n /* Note, xxsldi and xxpermdi were added as __builtin_vsx_<xxx> functions\n    instead of __builtin_vec_<xxx>  */"}, {"sha": "7122f99bffdec52481dbff5b3dabf29c8a94c2fe", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -2130,7 +2130,7 @@\n })\n \n ;; Slightly prefer vperm, since the target does not overlap the source\n-(define_insn \"*altivec_vperm_<mode>_internal\"\n+(define_insn \"altivec_vperm_<mode>_direct\"\n   [(set (match_operand:VM 0 \"register_operand\" \"=v,?wo\")\n \t(unspec:VM [(match_operand:VM 1 \"register_operand\" \"v,wo\")\n \t\t    (match_operand:VM 2 \"register_operand\" \"v,0\")"}, {"sha": "cfb6e55edc04e2df45bf9fa683d79ebdd0ac0455", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -1774,14 +1774,6 @@ BU_VSX_X (LXVW4X_V4SF,\t      \"lxvw4x_v4sf\",\tMEM)\n BU_VSX_X (LXVW4X_V4SI,        \"lxvw4x_v4si\",\tMEM)\n BU_VSX_X (LXVW4X_V8HI,        \"lxvw4x_v8hi\",\tMEM)\n BU_VSX_X (LXVW4X_V16QI,\t      \"lxvw4x_v16qi\",\tMEM)\n-\n-BU_VSX_X (XL_BE_V16QI, \"xl_be_v16qi\", MEM)\n-BU_VSX_X (XL_BE_V8HI, \"xl_be_v8hi\", MEM)\n-BU_VSX_X (XL_BE_V4SI, \"xl_be_v4si\", MEM)\n-BU_VSX_X (XL_BE_V2DI, \"xl_be_v2di\", MEM)\n-BU_VSX_X (XL_BE_V4SF, \"xl_be_v4sf\", MEM)\n-BU_VSX_X (XL_BE_V2DF, \"xl_be_v2df\", MEM)\n-\n BU_VSX_X (STXSDX,\t      \"stxsdx\",\t\tMEM)\n BU_VSX_X (STXVD2X_V1TI,\t      \"stxvd2x_v1ti\",\tMEM)\n BU_VSX_X (STXVD2X_V2DF,\t      \"stxvd2x_v2df\",\tMEM)\n@@ -1884,6 +1876,7 @@ BU_VSX_OVERLOAD_X (ST,\t     \"st\")\n BU_VSX_OVERLOAD_X (XL,\t     \"xl\")\n BU_VSX_OVERLOAD_X (XL_BE,    \"xl_be\")\n BU_VSX_OVERLOAD_X (XST,\t     \"xst\")\n+BU_VSX_OVERLOAD_X (XST_BE,   \"xst_be\")\n \f\n /* 1 argument builtins pre ISA 2.04.  */\n BU_FP_MISC_1 (FCTID,\t\t\"fctid\",\tCONST,  lrintdfdi2)"}, {"sha": "645260a27a4c2fe655551182ff9cb658e2054451", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 141, "deletions": 58, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -3111,69 +3111,94 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_SUMS, ALTIVEC_BUILTIN_VSUMSWS,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DF,\n+\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DF,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_long_long, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SF,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SF,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V16QI, 0 },\n-  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V16QI,\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V16QI,\n-    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V8HI,\n-    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V8HI,\n-    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V4SI,\n-    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V4SI,\n-    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V2DI,\n+\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V2DI,\n-    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_long_long, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V4SF,\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_long_long, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n-  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V2DF,\n-    RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V16QI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n@@ -3949,53 +3974,111 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_STVRXL, ALTIVEC_BUILTIN_STVRXL,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DF,\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVD2X_V2DF,\n+    RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVD2X_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVD2X_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_unsigned_V2DI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVD2X_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI,\n+    ~RS6000_BTI_bool_V2DI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SF,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SF,\n+    RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V4SI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V4SI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V4SI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V8HI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V8HI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_V16QI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V16QI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V16QI,\n+    RS6000_BTI_void, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n+  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_STXVW4X_V8HI,\n+    RS6000_BTI_void, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_pixel_V8HI },\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DF,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DI,\n     RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DI,\n     RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_long_long },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V2DI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_long_long },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SF,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V4SF,\n     RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SF,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V4SF,\n     RS6000_BTI_void, RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V4SI,\n     RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_V4SI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V4SI,\n     RS6000_BTI_void, RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V4SI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V4SI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V4SI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V4SI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_UINTSI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V8HI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V8HI,\n     RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_V8HI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V8HI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V8HI,\n     RS6000_BTI_void, RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V8HI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V8HI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V8HI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V8HI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V8HI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_UINTHI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V16QI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V16QI,\n     RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_V16QI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V16QI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V16QI,\n     RS6000_BTI_void, RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V16QI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V16QI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V16QI },\n-  { VSX_BUILTIN_VEC_XST, VSX_BUILTIN_ST_ELEMREV_V16QI,\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V16QI,\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_UINTQI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_16QI,"}, {"sha": "80499fd198ac1d2df3c5cf4e8702784610556d7b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 132, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -14477,58 +14477,6 @@ altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n   return target;\n }\n \n-static rtx\n-altivec_expand_xl_be_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n-{\n-  rtx pat, addr;\n-  tree arg0 = CALL_EXPR_ARG (exp, 0);\n-  tree arg1 = CALL_EXPR_ARG (exp, 1);\n-  machine_mode tmode = insn_data[icode].operand[0].mode;\n-  machine_mode mode0 = Pmode;\n-  machine_mode mode1 = Pmode;\n-  rtx op0 = expand_normal (arg0);\n-  rtx op1 = expand_normal (arg1);\n-\n-  if (icode == CODE_FOR_nothing)\n-    /* Builtin not supported on this processor.  */\n-    return 0;\n-\n-  /* If we got invalid arguments bail out before generating bad rtl.  */\n-  if (arg0 == error_mark_node || arg1 == error_mark_node)\n-    return const0_rtx;\n-\n-  if (target == 0\n-      || GET_MODE (target) != tmode\n-      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n-\t  target = gen_reg_rtx (tmode);\n-\n-  op1 = copy_to_mode_reg (mode1, op1);\n-\n-  if (op0 == const0_rtx)\n-    addr = gen_rtx_MEM (blk ? BLKmode : tmode, op1);\n-  else\n-    {\n-      op0 = copy_to_mode_reg (mode0, op0);\n-      addr = gen_rtx_MEM (blk ? BLKmode : tmode,\n-                          gen_rtx_PLUS (Pmode, op1, op0));\n-    }\n-\n-  pat = GEN_FCN (icode) (target, addr);\n-  if (!pat)\n-    return 0;\n-\n-  emit_insn (pat);\n-  /*  Reverse element order of elements if in LE mode */\n-  if (!VECTOR_ELT_ORDER_BIG)\n-    {\n-      rtx sel = swap_selector_for_mode (tmode);\n-      rtx vperm = gen_rtx_UNSPEC (tmode, gen_rtvec (3, target, target, sel),\n-\t\t\t\t  UNSPEC_VPERM);\n-      emit_insn (gen_rtx_SET (target, vperm));\n-    }\n-  return target;\n-}\n-\n static rtx\n paired_expand_stv_builtin (enum insn_code icode, tree exp)\n {\n@@ -15925,50 +15873,6 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       /* Fall through.  */\n     }\n \n-  /* XL_BE  We initialized them to always load in big endian order.  */\n-  switch (fcode)\n-    {\n-    case VSX_BUILTIN_XL_BE_V2DI:\n-      {\n-        enum insn_code code = CODE_FOR_vsx_load_v2di;\n-        return altivec_expand_xl_be_builtin (code, exp, target, false);\n-      }\n-      break;\n-    case VSX_BUILTIN_XL_BE_V4SI:\n-      {\n-        enum insn_code code = CODE_FOR_vsx_load_v4si;\n-        return altivec_expand_xl_be_builtin (code, exp, target, false);\n-      }\n-      break;\n-    case VSX_BUILTIN_XL_BE_V8HI:\n-      {\n-        enum insn_code code = CODE_FOR_vsx_load_v8hi;\n-        return altivec_expand_xl_be_builtin (code, exp, target, false);\n-      }\n-      break;\n-    case VSX_BUILTIN_XL_BE_V16QI:\n-      {\n-        enum insn_code code = CODE_FOR_vsx_load_v16qi;\n-        return altivec_expand_xl_be_builtin (code, exp, target, false);\n-       }\n-      break;\n-    case VSX_BUILTIN_XL_BE_V2DF:\n-      {\n-        enum insn_code code = CODE_FOR_vsx_load_v2df;\n-        return altivec_expand_xl_be_builtin (code, exp, target, false);\n-      }\n-      break;\n-    case VSX_BUILTIN_XL_BE_V4SF:\n-      {\n-        enum insn_code code = CODE_FOR_vsx_load_v4sf;\n-        return altivec_expand_xl_be_builtin (code, exp, target, false);\n-      }\n-      break;\n-    default:\n-      break;\n-      /* Fall through.  */\n-    }\n-\n   *expandedp = false;\n   return NULL_RTX;\n }\n@@ -17629,6 +17533,10 @@ altivec_init_builtins (void)\n \t       VSX_BUILTIN_LD_ELEMREV_V4SF);\n   def_builtin (\"__builtin_vsx_ld_elemrev_v4si\", v4si_ftype_long_pcvoid,\n \t       VSX_BUILTIN_LD_ELEMREV_V4SI);\n+  def_builtin (\"__builtin_vsx_ld_elemrev_v8hi\", v8hi_ftype_long_pcvoid,\n+\t       VSX_BUILTIN_LD_ELEMREV_V8HI);\n+  def_builtin (\"__builtin_vsx_ld_elemrev_v16qi\", v16qi_ftype_long_pcvoid,\n+\t       VSX_BUILTIN_LD_ELEMREV_V16QI);\n   def_builtin (\"__builtin_vsx_st_elemrev_v2df\", void_ftype_v2df_long_pvoid,\n \t       VSX_BUILTIN_ST_ELEMREV_V2DF);\n   def_builtin (\"__builtin_vsx_st_elemrev_v2di\", void_ftype_v2di_long_pvoid,\n@@ -17637,42 +17545,10 @@ altivec_init_builtins (void)\n \t       VSX_BUILTIN_ST_ELEMREV_V4SF);\n   def_builtin (\"__builtin_vsx_st_elemrev_v4si\", void_ftype_v4si_long_pvoid,\n \t       VSX_BUILTIN_ST_ELEMREV_V4SI);\n-\n-  def_builtin (\"__builtin_vsx_le_be_v8hi\", v8hi_ftype_long_pcvoid,\n-\t\t   VSX_BUILTIN_XL_BE_V8HI);\n-  def_builtin (\"__builtin_vsx_le_be_v4si\", v4si_ftype_long_pcvoid,\n-\t\t   VSX_BUILTIN_XL_BE_V4SI);\n-  def_builtin (\"__builtin_vsx_le_be_v2di\", v2di_ftype_long_pcvoid,\n-\t\t   VSX_BUILTIN_XL_BE_V2DI);\n-  def_builtin (\"__builtin_vsx_le_be_v4sf\", v4sf_ftype_long_pcvoid,\n-\t\t   VSX_BUILTIN_XL_BE_V4SF);\n-  def_builtin (\"__builtin_vsx_le_be_v2df\", v2df_ftype_long_pcvoid,\n-\t\t   VSX_BUILTIN_XL_BE_V2DF);\n-  def_builtin (\"__builtin_vsx_le_be_v16qi\", v16qi_ftype_long_pcvoid,\n-\t\t   VSX_BUILTIN_XL_BE_V16QI);\n-\n-  if (TARGET_P9_VECTOR)\n-    {\n-      def_builtin (\"__builtin_vsx_ld_elemrev_v8hi\", v8hi_ftype_long_pcvoid,\n-\t\t   VSX_BUILTIN_LD_ELEMREV_V8HI);\n-      def_builtin (\"__builtin_vsx_ld_elemrev_v16qi\", v16qi_ftype_long_pcvoid,\n-\t\t   VSX_BUILTIN_LD_ELEMREV_V16QI);\n-      def_builtin (\"__builtin_vsx_st_elemrev_v8hi\",\n-\t\t   void_ftype_v8hi_long_pvoid, VSX_BUILTIN_ST_ELEMREV_V8HI);\n-      def_builtin (\"__builtin_vsx_st_elemrev_v16qi\",\n-\t\t   void_ftype_v16qi_long_pvoid, VSX_BUILTIN_ST_ELEMREV_V16QI);\n-    }\n-  else\n-    {\n-      rs6000_builtin_decls[(int) VSX_BUILTIN_LD_ELEMREV_V8HI]\n-\t= rs6000_builtin_decls[(int) VSX_BUILTIN_LXVW4X_V8HI];\n-      rs6000_builtin_decls[(int) VSX_BUILTIN_LD_ELEMREV_V16QI]\n-\t= rs6000_builtin_decls[(int) VSX_BUILTIN_LXVW4X_V16QI];\n-      rs6000_builtin_decls[(int) VSX_BUILTIN_ST_ELEMREV_V8HI]\n-\t= rs6000_builtin_decls[(int) VSX_BUILTIN_STXVW4X_V8HI];\n-      rs6000_builtin_decls[(int) VSX_BUILTIN_ST_ELEMREV_V16QI]\n-\t= rs6000_builtin_decls[(int) VSX_BUILTIN_STXVW4X_V16QI];\n-    }\n+  def_builtin (\"__builtin_vsx_st_elemrev_v8hi\", void_ftype_v8hi_long_pvoid,\n+\t       VSX_BUILTIN_ST_ELEMREV_V8HI);\n+  def_builtin (\"__builtin_vsx_st_elemrev_v16qi\", void_ftype_v16qi_long_pvoid,\n+\t       VSX_BUILTIN_ST_ELEMREV_V16QI);\n \n   def_builtin (\"__builtin_vec_vsx_ld\", opaque_ftype_long_pcvoid,\n \t       VSX_BUILTIN_VEC_LD);\n@@ -17684,6 +17560,8 @@ altivec_init_builtins (void)\n \t       VSX_BUILTIN_VEC_XL_BE);\n   def_builtin (\"__builtin_vec_xst\", void_ftype_opaque_long_pvoid,\n \t       VSX_BUILTIN_VEC_XST);\n+  def_builtin (\"__builtin_vec_xst_be\", void_ftype_opaque_long_pvoid,\n+\t       VSX_BUILTIN_VEC_XST_BE);\n \n   def_builtin (\"__builtin_vec_step\", int_ftype_opaque, ALTIVEC_BUILTIN_VEC_STEP);\n   def_builtin (\"__builtin_vec_splats\", opaque_ftype_opaque, ALTIVEC_BUILTIN_VEC_SPLATS);"}, {"sha": "00d76563f37eb78e51f6d9b5e17033beea006b16", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 174, "deletions": 34, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -1122,58 +1122,130 @@\n   \"lxvw4x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n-(define_insn \"vsx_ld_elemrev_v8hi\"\n+(define_expand \"vsx_ld_elemrev_v8hi\"\n   [(set (match_operand:V8HI 0 \"vsx_register_operand\" \"=wa\")\n         (vec_select:V8HI\n \t  (match_operand:V8HI 1 \"memory_operand\" \"Z\")\n \t  (parallel [(const_int 7) (const_int 6)\n \t             (const_int 5) (const_int 4)\n \t\t     (const_int 3) (const_int 2)\n \t             (const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V8HImode) && !BYTES_BIG_ENDIAN\"\n+{\n+  if (!TARGET_P9_VECTOR)\n+    {\n+      rtx tmp = gen_reg_rtx (V4SImode);\n+      rtx subreg, subreg2, perm[16], pcv;\n+      /* 2 is leftmost element in register */\n+      unsigned int reorder[16] = {13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2};\n+      int i;\n+\n+      subreg = simplify_gen_subreg (V4SImode, operands[1], V8HImode, 0);\n+      emit_insn (gen_vsx_ld_elemrev_v4si (tmp, subreg));\n+      subreg2 = simplify_gen_subreg (V8HImode, tmp, V4SImode, 0);\n+\n+      for (i = 0; i < 16; ++i)\n+      \tperm[i] = GEN_INT (reorder[i]);\n+\n+      pcv = force_reg (V16QImode,\n+                       gen_rtx_CONST_VECTOR (V16QImode,\n+                                             gen_rtvec_v (16, perm)));\n+      emit_insn (gen_altivec_vperm_v8hi_direct (operands[0], subreg2,\n+                                                subreg2, pcv));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*vsx_ld_elemrev_v8hi_internal\"\n+  [(set (match_operand:V8HI 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V8HI\n+          (match_operand:V8HI 1 \"memory_operand\" \"Z\")\n+          (parallel [(const_int 7) (const_int 6)\n+                     (const_int 5) (const_int 4)\n+                     (const_int 3) (const_int 2)\n+                     (const_int 1) (const_int 0)])))]\n   \"VECTOR_MEM_VSX_P (V8HImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n   \"lxvh8x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n-(define_insn \"vsx_ld_elemrev_v16qi\"\n+(define_expand \"vsx_ld_elemrev_v16qi\"\n   [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n         (vec_select:V16QI\n-\t  (match_operand:V16QI 1 \"memory_operand\" \"Z\")\n-\t  (parallel [(const_int 15) (const_int 14)\n-\t             (const_int 13) (const_int 12)\n-\t\t     (const_int 11) (const_int 10)\n-\t\t     (const_int  9) (const_int  8)\n-\t\t     (const_int  7) (const_int  6)\n-\t             (const_int  5) (const_int  4)\n-\t\t     (const_int  3) (const_int  2)\n-\t             (const_int  1) (const_int  0)])))]\n+          (match_operand:V16QI 1 \"memory_operand\" \"Z\")\n+          (parallel [(const_int 15) (const_int 14)\n+                     (const_int 13) (const_int 12)\n+                     (const_int 11) (const_int 10)\n+                     (const_int  9) (const_int  8)\n+                     (const_int  7) (const_int  6)\n+                     (const_int  5) (const_int  4)\n+                     (const_int  3) (const_int  2)\n+                     (const_int  1) (const_int  0)])))]\n+  \"VECTOR_MEM_VSX_P (V16QImode) && !BYTES_BIG_ENDIAN\"\n+{\n+  if (!TARGET_P9_VECTOR)\n+    {\n+      rtx tmp = gen_reg_rtx (V4SImode);\n+      rtx subreg, subreg2, perm[16], pcv;\n+      /* 3 is leftmost element in register */\n+      unsigned int reorder[16] = {12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3};\n+      int i;\n+\n+      subreg = simplify_gen_subreg (V4SImode, operands[1], V16QImode, 0);\n+      emit_insn (gen_vsx_ld_elemrev_v4si (tmp, subreg));\n+      subreg2 = simplify_gen_subreg (V16QImode, tmp, V4SImode, 0);\n+\n+      for (i = 0; i < 16; ++i)\n+        perm[i] = GEN_INT (reorder[i]);\n+\n+      pcv = force_reg (V16QImode,\n+                       gen_rtx_CONST_VECTOR (V16QImode,\n+                                             gen_rtvec_v (16, perm)));\n+      emit_insn (gen_altivec_vperm_v16qi_direct (operands[0], subreg2,\n+                                                 subreg2, pcv));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*vsx_ld_elemrev_v16qi_internal\"\n+  [(set (match_operand:V16QI 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V16QI\n+          (match_operand:V16QI 1 \"memory_operand\" \"Z\")\n+          (parallel [(const_int 15) (const_int 14)\n+                     (const_int 13) (const_int 12)\n+                     (const_int 11) (const_int 10)\n+                     (const_int  9) (const_int  8)\n+                     (const_int  7) (const_int  6)\n+                     (const_int  5) (const_int  4)\n+                     (const_int  3) (const_int  2)\n+                     (const_int  1) (const_int  0)])))]\n   \"VECTOR_MEM_VSX_P (V16QImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n   \"lxvb16x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"vsx_st_elemrev_v2df\"\n   [(set (match_operand:V2DF 0 \"memory_operand\" \"=Z\")\n         (vec_select:V2DF\n-\t  (match_operand:V2DF 1 \"vsx_register_operand\" \"wa\")\n-\t  (parallel [(const_int 1) (const_int 0)])))]\n+          (match_operand:V2DF 1 \"vsx_register_operand\" \"wa\")\n+          (parallel [(const_int 1) (const_int 0)])))]\n   \"VECTOR_MEM_VSX_P (V2DFmode) && !BYTES_BIG_ENDIAN\"\n   \"stxvd2x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"vsx_st_elemrev_v2di\"\n   [(set (match_operand:V2DI 0 \"memory_operand\" \"=Z\")\n         (vec_select:V2DI\n-\t  (match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")\n-\t  (parallel [(const_int 1) (const_int 0)])))]\n+          (match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")\n+          (parallel [(const_int 1) (const_int 0)])))]\n   \"VECTOR_MEM_VSX_P (V2DImode) && !BYTES_BIG_ENDIAN\"\n   \"stxvd2x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"vsx_st_elemrev_v4sf\"\n   [(set (match_operand:V4SF 0 \"memory_operand\" \"=Z\")\n         (vec_select:V4SF\n-\t  (match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")\n-\t  (parallel [(const_int 3) (const_int 2)\n-\t             (const_int 1) (const_int 0)])))]\n+          (match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")\n+          (parallel [(const_int 3) (const_int 2)\n+                     (const_int 1) (const_int 0)])))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && !BYTES_BIG_ENDIAN\"\n   \"stxvw4x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n@@ -1188,30 +1260,98 @@\n   \"stxvw4x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-(define_insn \"vsx_st_elemrev_v8hi\"\n+(define_expand \"vsx_st_elemrev_v8hi\"\n   [(set (match_operand:V8HI 0 \"memory_operand\" \"=Z\")\n         (vec_select:V8HI\n-\t  (match_operand:V8HI 1 \"vsx_register_operand\" \"wa\")\n-\t  (parallel [(const_int 7) (const_int 6)\n-\t             (const_int 5) (const_int 4)\n-\t\t     (const_int 3) (const_int 2)\n-\t             (const_int 1) (const_int 0)])))]\n+          (match_operand:V8HI 1 \"vsx_register_operand\" \"wa\")\n+          (parallel [(const_int 7) (const_int 6)\n+                     (const_int 5) (const_int 4)\n+                     (const_int 3) (const_int 2)\n+                     (const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V8HImode) && !BYTES_BIG_ENDIAN\"\n+{\n+  if (!TARGET_P9_VECTOR)\n+    {\n+      rtx subreg, perm[16], pcv;\n+      rtx tmp = gen_reg_rtx (V8HImode);\n+      /* 2 is leftmost element in register */\n+      unsigned int reorder[16] = {13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2};\n+      int i;\n+\n+      for (i = 0; i < 16; ++i)\n+      \tperm[i] = GEN_INT (reorder[i]);\n+\n+      pcv = force_reg (V16QImode,\n+                       gen_rtx_CONST_VECTOR (V16QImode,\n+                                             gen_rtvec_v (16, perm)));\n+      emit_insn (gen_altivec_vperm_v8hi_direct (tmp, operands[1],\n+                                                operands[1], pcv));\n+      subreg = simplify_gen_subreg (V4SImode, tmp, V8HImode, 0);\n+      emit_insn (gen_vsx_st_elemrev_v4si (subreg, operands[0]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*vsx_st_elemrev_v8hi_internal\"\n+  [(set (match_operand:V8HI 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V8HI\n+          (match_operand:V8HI 1 \"vsx_register_operand\" \"wa\")\n+          (parallel [(const_int 7) (const_int 6)\n+                     (const_int 5) (const_int 4)\n+                     (const_int 3) (const_int 2)\n+                     (const_int 1) (const_int 0)])))]\n   \"VECTOR_MEM_VSX_P (V8HImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n   \"stxvh8x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-(define_insn \"vsx_st_elemrev_v16qi\"\n+(define_expand \"vsx_st_elemrev_v16qi\"\n+  [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V16QI\n+          (match_operand:V16QI 1 \"vsx_register_operand\" \"wa\")\n+          (parallel [(const_int 15) (const_int 14)\n+                     (const_int 13) (const_int 12)\n+                     (const_int 11) (const_int 10)\n+                     (const_int  9) (const_int  8)\n+                     (const_int  7) (const_int  6)\n+                     (const_int  5) (const_int  4)\n+                     (const_int  3) (const_int  2)\n+                     (const_int  1) (const_int  0)])))]\n+  \"VECTOR_MEM_VSX_P (V16QImode) && !BYTES_BIG_ENDIAN\"\n+{\n+  if (!TARGET_P9_VECTOR)\n+    {\n+      rtx subreg, perm[16], pcv;\n+      rtx tmp = gen_reg_rtx (V16QImode);\n+      /* 3 is leftmost element in register */\n+      unsigned int reorder[16] = {12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3};\n+      int i;\n+\n+      for (i = 0; i < 16; ++i)\n+      \tperm[i] = GEN_INT (reorder[i]);\n+\n+      pcv = force_reg (V16QImode,\n+                       gen_rtx_CONST_VECTOR (V16QImode,\n+                                             gen_rtvec_v (16, perm)));\n+      emit_insn (gen_altivec_vperm_v16qi_direct (tmp, operands[1],\n+                                                 operands[1], pcv));\n+      subreg = simplify_gen_subreg (V4SImode, tmp, V16QImode, 0);\n+      emit_insn (gen_vsx_st_elemrev_v4si (subreg, operands[0]));\n+      DONE;\n+    }\n+})\n+\n+(define_insn \"*vsx_st_elemrev_v16qi_internal\"\n   [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n         (vec_select:V16QI\n-\t  (match_operand:V16QI 1 \"vsx_register_operand\" \"wa\")\n-\t  (parallel [(const_int 15) (const_int 14)\n-\t             (const_int 13) (const_int 12)\n-\t\t     (const_int 11) (const_int 10)\n-\t\t     (const_int  9) (const_int  8)\n-\t             (const_int  7) (const_int  6)\n-\t             (const_int  5) (const_int  4)\n-\t\t     (const_int  3) (const_int  2)\n-\t             (const_int  1) (const_int  0)])))]\n+          (match_operand:V16QI 1 \"vsx_register_operand\" \"wa\")\n+          (parallel [(const_int 15) (const_int 14)\n+                     (const_int 13) (const_int 12)\n+                     (const_int 11) (const_int 10)\n+                     (const_int  9) (const_int  8)\n+                     (const_int  7) (const_int  6)\n+                     (const_int  5) (const_int  4)\n+                     (const_int  3) (const_int  2)\n+                     (const_int  1) (const_int  0)])))]\n   \"VECTOR_MEM_VSX_P (V16QImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n   \"stxvb16x %x1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])"}, {"sha": "eda6451457dd4b940baa92c624df323c6e413829", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -1,3 +1,8 @@\n+2017-11-15  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/swaps-p8-26.c: Modify expected code\n+\tgeneration.\n+\n 2017-11-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/82988"}, {"sha": "28ce1cd39e45e25513830405030e4a61383a670c", "filename": "gcc/testsuite/gcc.target/powerpc/swaps-p8-26.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-26.c?ref=3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile { target { powerpc64le-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-options \"-mcpu=power8 -O3 \" } */\n-/* { dg-final { scan-assembler-times \"lxvw4x\" 2 } } */\n-/* { dg-final { scan-assembler \"stxvw4x\" } } */\n+/* { dg-final { scan-assembler-times \"lxvd2x\" 2 } } */\n+/* { dg-final { scan-assembler \"stxvd2x\" } } */\n /* { dg-final { scan-assembler-not \"xxpermdi\" } } */\n \n-/* Verify that swap optimization does not interfere with element-reversing\n+/* Verify that swap optimization does not interfere with unaligned\n    loads and stores.  */\n \n /* Test case to resolve PR79044.  */"}]}