{"sha": "26f7753013e52c93c6d63bb678b1544da43a2384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmNzc1MzAxM2U1MmM5M2M2ZDYzYmI2NzhiMTU0NGRhNDNhMjM4NA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@sfr.fr", "date": "2011-09-08T15:30:39Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-09-08T15:30:39Z"}, "message": "trans-array.h (gfc_get_scalar_ss): New prototype.\n\n2011-09-08  Mikael Morin  <mikael.morin@sfr.fr>\n\n\t* trans-array.h (gfc_get_scalar_ss): New prototype.\n\t* trans-array.c (gfc_get_scalar_ss): New function.\n\t(gfc_walk_variable_expr, gfc_walk_op_expr,\n\tgfc_walk_elemental_function_args): Re-use gfc_get_scalar_ss.\n\t* trans-expr.c (gfc_trans_subarray_assign): Ditto.\n\t(gfc_trans_assignment_1): Ditto.\n\t* trans-stmt.c (compute_inner_temp_size, gfc_trans_where_assign,\n\tgfc_trans_where_3): Ditto.\n\nFrom-SVN: r178697", "tree": {"sha": "bf1d67ae319908ea0112fe103dc2c1d5de388cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf1d67ae319908ea0112fe103dc2c1d5de388cdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f7753013e52c93c6d63bb678b1544da43a2384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f7753013e52c93c6d63bb678b1544da43a2384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f7753013e52c93c6d63bb678b1544da43a2384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f7753013e52c93c6d63bb678b1544da43a2384/comments", "author": null, "committer": null, "parents": [{"sha": "a1ae4f435fc547fcae4bf04b6c4efcc310328b3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ae4f435fc547fcae4bf04b6c4efcc310328b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ae4f435fc547fcae4bf04b6c4efcc310328b3e"}], "stats": {"total": 120, "additions": 50, "deletions": 70}, "files": [{"sha": "eb03a866e699ed9e6c8a219392aac6e8c8d2972d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=26f7753013e52c93c6d63bb678b1544da43a2384", "patch": "@@ -1,3 +1,14 @@\n+2011-09-08  Mikael Morin  <mikael.morin@sfr.fr>\n+\n+\t* trans-array.h (gfc_get_scalar_ss): New prototype.\n+\t* trans-array.c (gfc_get_scalar_ss): New function.\n+\t(gfc_walk_variable_expr, gfc_walk_op_expr,\n+\tgfc_walk_elemental_function_args): Re-use gfc_get_scalar_ss.\n+\t* trans-expr.c (gfc_trans_subarray_assign): Ditto.\n+\t(gfc_trans_assignment_1): Ditto.\n+\t* trans-stmt.c (compute_inner_temp_size, gfc_trans_where_assign,\n+\tgfc_trans_where_3): Ditto.\n+\n 2011-09-08  Mikael Morin  <mikael.morin@sfr.fr>\n \n \t* trans-array.h (gfc_get_temp_ss): New prototype."}, {"sha": "80a6fe67467b0543bcdae6df70fa627b76e683c7", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=26f7753013e52c93c6d63bb678b1544da43a2384", "patch": "@@ -550,6 +550,22 @@ gfc_get_temp_ss (tree type, tree string_length, int dimen)\n \n   return ss;\n }\n+\t\t\n+\n+/* Creates and initializes a scalar type gfc_ss struct.  */\n+\n+gfc_ss *\n+gfc_get_scalar_ss (gfc_ss *next, gfc_expr *expr)\n+{\n+  gfc_ss *ss;\n+\n+  ss = gfc_get_ss ();\n+  ss->next = next;\n+  ss->type = GFC_SS_SCALAR;\n+  ss->expr = expr;\n+\n+  return ss;\n+}\n \n \n /* Free all the SS associated with a loop.  */\n@@ -7597,17 +7613,8 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n     {\n       if (ref->type == REF_SUBSTRING)\n \t{\n-\t  newss = gfc_get_ss ();\n-\t  newss->type = GFC_SS_SCALAR;\n-\t  newss->expr = ref->u.ss.start;\n-\t  newss->next = ss;\n-\t  ss = newss;\n-\n-\t  newss = gfc_get_ss ();\n-\t  newss->type = GFC_SS_SCALAR;\n-\t  newss->expr = ref->u.ss.end;\n-\t  newss->next = ss;\n-\t  ss = newss;\n+\t  ss = gfc_get_scalar_ss (ss, ref->u.ss.start);\n+\t  ss = gfc_get_scalar_ss (ss, ref->u.ss.end);\n \t}\n \n       /* We're only interested in array sections from now on.  */\n@@ -7626,13 +7633,7 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n \t{\n \tcase AR_ELEMENT:\n \t  for (n = ar->dimen + ar->codimen - 1; n >= 0; n--)\n-\t    {\n-\t      newss = gfc_get_ss ();\n-\t      newss->type = GFC_SS_SCALAR;\n-\t      newss->expr = ar->start[n];\n-\t      newss->next = ss;\n-\t      ss = newss;\n-\t    }\n+\t    ss = gfc_get_scalar_ss (ss, ar->start[n]);\n \t  break;\n \n \tcase AR_FULL:\n@@ -7678,10 +7679,7 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n \t\tcase DIMEN_ELEMENT:\n \t\t  /* Add SS for elemental (scalar) subscripts.  */\n \t\t  gcc_assert (ar->start[n]);\n-\t\t  indexss = gfc_get_ss ();\n-\t\t  indexss->type = GFC_SS_SCALAR;\n-\t\t  indexss->expr = ar->start[n];\n-\t\t  indexss->next = gfc_ss_terminator;\n+\t\t  indexss = gfc_get_scalar_ss (gfc_ss_terminator, ar->start[n]);\n \t\t  indexss->loop_chain = gfc_ss_terminator;\n \t\t  newss->data.info.subscript[n] = indexss;\n \t\t  break;\n@@ -7736,7 +7734,6 @@ gfc_walk_op_expr (gfc_ss * ss, gfc_expr * expr)\n {\n   gfc_ss *head;\n   gfc_ss *head2;\n-  gfc_ss *newss;\n \n   head = gfc_walk_subexpr (ss, expr->value.op.op1);\n   if (expr->value.op.op2 == NULL)\n@@ -7754,8 +7751,6 @@ gfc_walk_op_expr (gfc_ss * ss, gfc_expr * expr)\n \n   /* One of the operands needs scalarization, the other is scalar.\n      Create a gfc_ss for the scalar expression.  */\n-  newss = gfc_get_ss ();\n-  newss->type = GFC_SS_SCALAR;\n   if (head == ss)\n     {\n       /* First operand is scalar.  We build the chain in reverse order, so\n@@ -7765,17 +7760,13 @@ gfc_walk_op_expr (gfc_ss * ss, gfc_expr * expr)\n \thead = head->next;\n       /* Check we haven't somehow broken the chain.  */\n       gcc_assert (head);\n-      newss->next = ss;\n-      head->next = newss;\n-      newss->expr = expr->value.op.op1;\n+      head->next = gfc_get_scalar_ss (ss, expr->value.op.op1);\n     }\n   else\t\t\t\t/* head2 == head */\n     {\n       gcc_assert (head2 == head);\n       /* Second operand is scalar.  */\n-      newss->next = head2;\n-      head2 = newss;\n-      newss->expr = expr->value.op.op2;\n+      head2 = gfc_get_scalar_ss (head2, expr->value.op.op2);\n     }\n \n   return head2;\n@@ -7830,10 +7821,9 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n       if (newss == head)\n \t{\n \t  /* Scalar argument.  */\n-\t  newss = gfc_get_ss ();\n+\t  gcc_assert (type == GFC_SS_SCALAR || type == GFC_SS_REFERENCE);\n+\t  newss = gfc_get_scalar_ss (head, arg->expr);\n \t  newss->type = type;\n-\t  newss->expr = arg->expr;\n-\t  newss->next = head;\n \t}\n       else\n \tscalar = 0;"}, {"sha": "73d8c40c9e9d5490dcc7d3fd5c02a2b10cddc19c", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=26f7753013e52c93c6d63bb678b1544da43a2384", "patch": "@@ -91,6 +91,8 @@ void gfc_free_ss_chain (gfc_ss *);\n gfc_ss *gfc_get_array_ss (gfc_ss *, gfc_expr *, int, gfc_ss_type);\n /* Allocate a new temporary type ss.  */\n gfc_ss *gfc_get_temp_ss (tree, tree, int);\n+/* Allocate a new scalar type ss.  */\n+gfc_ss *gfc_get_scalar_ss (gfc_ss *, gfc_expr *);\n \n /* Calculates the lower bound and stride of array sections.  */\n void gfc_conv_ss_startstride (gfc_loopinfo *);"}, {"sha": "6a337191fc98e78c1b0c4fa9c2323a3d62af3462", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=26f7753013e52c93c6d63bb678b1544da43a2384", "patch": "@@ -4352,13 +4352,8 @@ gfc_trans_subarray_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n   /* Walk the rhs.  */\n   rss = gfc_walk_expr (expr);\n   if (rss == gfc_ss_terminator)\n-    {\n-      /* The rhs is scalar.  Add a ss for the expression.  */\n-      rss = gfc_get_ss ();\n-      rss->next = gfc_ss_terminator;\n-      rss->type = GFC_SS_SCALAR;\n-      rss->expr = expr;\n-    }\n+    /* The rhs is scalar.  Add a ss for the expression.  */\n+    rss = gfc_get_scalar_ss (gfc_ss_terminator, expr);\n \n   /* Create a SS for the destination.  */\n   lss = gfc_get_array_ss (gfc_ss_terminator, NULL, cm->as->rank,\n@@ -6158,13 +6153,9 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n       /* Walk the rhs.  */\n       rss = gfc_walk_expr (expr2);\n       if (rss == gfc_ss_terminator)\n-\t{\n-\t  /* The rhs is scalar.  Add a ss for the expression.  */\n-\t  rss = gfc_get_ss ();\n-\t  rss->next = gfc_ss_terminator;\n-\t  rss->type = GFC_SS_SCALAR;\n-\t  rss->expr = expr2;\n-\t}\n+\t/* The rhs is scalar.  Add a ss for the expression.  */\n+\trss = gfc_get_scalar_ss (gfc_ss_terminator, expr2);\n+\n       /* Associate the SS with the loop.  */\n       gfc_add_ss_to_loop (&loop, lss);\n       gfc_add_ss_to_loop (&loop, rss);"}, {"sha": "8e43f4de1e7f9fb127aa953d6eaf2a0a4b2a68c8", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f7753013e52c93c6d63bb678b1544da43a2384/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=26f7753013e52c93c6d63bb678b1544da43a2384", "patch": "@@ -3023,13 +3023,8 @@ compute_inner_temp_size (gfc_expr *expr1, gfc_expr *expr2,\n       /* Walk the RHS of the expression.  */\n       *rss = gfc_walk_expr (expr2);\n       if (*rss == gfc_ss_terminator)\n-        {\n-          /* The rhs is scalar.  Add a ss for the expression.  */\n-          *rss = gfc_get_ss ();\n-          (*rss)->next = gfc_ss_terminator;\n-          (*rss)->type = GFC_SS_SCALAR;\n-          (*rss)->expr = expr2;\n-        }\n+\t/* The rhs is scalar.  Add a ss for the expression.  */\n+\t*rss = gfc_get_scalar_ss (gfc_ss_terminator, expr2);\n \n       /* Associate the SS with the loop.  */\n       gfc_add_ss_to_loop (&loop, *lss);\n@@ -4064,13 +4059,10 @@ gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2,\n   /* Walk the rhs.  */\n   rss = gfc_walk_expr (expr2);\n   if (rss == gfc_ss_terminator)\n-   {\n-     /* The rhs is scalar.  Add a ss for the expression.  */\n-     rss = gfc_get_ss ();\n-     rss->where = 1;\n-     rss->next = gfc_ss_terminator;\n-     rss->type = GFC_SS_SCALAR;\n-     rss->expr = expr2;\n+    {\n+      /* The rhs is scalar.  Add a ss for the expression.  */\n+      rss = gfc_get_scalar_ss (gfc_ss_terminator, expr2);\n+      rss->where = 1;\n     }\n \n   /* Associate the SS with the loop.  */\n@@ -4508,11 +4500,8 @@ gfc_trans_where_3 (gfc_code * cblock, gfc_code * eblock)\n   tsss = gfc_walk_expr (tsrc);\n   if (tsss == gfc_ss_terminator)\n     {\n-      tsss = gfc_get_ss ();\n+      tsss = gfc_get_scalar_ss (gfc_ss_terminator, tsrc);\n       tsss->where = 1;\n-      tsss->next = gfc_ss_terminator;\n-      tsss->type = GFC_SS_SCALAR;\n-      tsss->expr = tsrc;\n     }\n   gfc_add_ss_to_loop (&loop, tdss);\n   gfc_add_ss_to_loop (&loop, tsss);\n@@ -4526,11 +4515,8 @@ gfc_trans_where_3 (gfc_code * cblock, gfc_code * eblock)\n       esss = gfc_walk_expr (esrc);\n       if (esss == gfc_ss_terminator)\n \t{\n-\t  esss = gfc_get_ss ();\n+\t  esss = gfc_get_scalar_ss (gfc_ss_terminator, esrc);\n \t  esss->where = 1;\n-\t  esss->next = gfc_ss_terminator;\n-\t  esss->type = GFC_SS_SCALAR;\n-\t  esss->expr = esrc;\n \t}\n       gfc_add_ss_to_loop (&loop, edss);\n       gfc_add_ss_to_loop (&loop, esss);"}]}