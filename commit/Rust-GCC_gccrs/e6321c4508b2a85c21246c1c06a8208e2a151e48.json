{"sha": "e6321c4508b2a85c21246c1c06a8208e2a151e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYzMjFjNDUwOGIyYTg1YzIxMjQ2YzFjMDZhODIwOGUyYTE1MWU0OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-25T00:46:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-07-02T17:20:23Z"}, "message": "c++: Support C++20 virtual consteval functions. [PR88335]\n\nJakub's partial implementation of consteval virtual had trouble with the\ncurrent ABI requirement that we omit the vtable slot for a consteval virtual\nfunction; it's difficult to use the normal code for constant evaluation and\nalso magically make the slots disappear if the vtables get written out.  I\nnotice that Clang trunk also doesn't implement that requirement, and it\nseems unnecessary to me; I expect consteval virtual functions to be\nextremely rare, so it should be fine to just give them a vtable slot as\nnormal but put zero in it if the vtable gets emitted.  I've commented as\nmuch to the ABI committee.\n\nOne of Jakub's testcases points out that we weren't handling thunks in\nour constexpr virtual handling; that is fixed here as well.\n\nIncidentally, being able to use C++11 range-for definitely simplified\nclear_consteval_vfns.\n\ngcc/c-family/ChangeLog:\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __cpp_consteval.\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (grokfndecl): Allow consteval virtual.\n\t* search.c (check_final_overrider): Check consteval mismatch.\n\t* constexpr.c (cxx_eval_thunk_call): New.\n\t(cxx_eval_call_expression): Call it.\n\t* cvt.c (cp_get_fndecl_from_callee): Handle FDESC_EXPR.\n\t* decl2.c (mark_vtable_entries): Track vtables with consteval.\n\t(maybe_emit_vtables): Pass consteval_vtables through.\n\t(clear_consteval_vfns): Replace consteval with nullptr.\n\t(c_parse_final_cleanups): Call it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/consteval-virtual1.C: New test.\n\t* g++.dg/cpp2a/consteval-virtual2.C: New test.\n\t* g++.dg/cpp2a/consteval-virtual3.C: New test.\n\t* g++.dg/cpp2a/consteval-virtual4.C: New test.\n\t* g++.dg/cpp2a/consteval-virtual5.C: New test.\n\nCo-authored-by: Jakub Jelinek <jakub@redhat.com>", "tree": {"sha": "7185013f41363425d08894d5e1704a3c3d6e7025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7185013f41363425d08894d5e1704a3c3d6e7025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6321c4508b2a85c21246c1c06a8208e2a151e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6321c4508b2a85c21246c1c06a8208e2a151e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6321c4508b2a85c21246c1c06a8208e2a151e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6321c4508b2a85c21246c1c06a8208e2a151e48/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105ecbea5f402713130fef4d41bb000e2d23493b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105ecbea5f402713130fef4d41bb000e2d23493b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105ecbea5f402713130fef4d41bb000e2d23493b"}], "stats": {"total": 341, "additions": 307, "deletions": 34}, "files": [{"sha": "83f52fdf5d872a250aef5fdbad51510188e0ca47", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -995,7 +995,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_constexpr=201907L\");\n \t  cpp_define (pfile, \"__cpp_constexpr_in_decltype=201711L\");\n \t  cpp_define (pfile, \"__cpp_conditional_explicit=201806L\");\n-\t  /* cpp_define (pfile, \"__cpp_consteval=201811L\"); */\n+\t  cpp_define (pfile, \"__cpp_consteval=201811L\");\n \t  cpp_define (pfile, \"__cpp_constinit=201907L\");\n \t  cpp_define (pfile, \"__cpp_deduction_guides=201907L\");\n \t  cpp_define (pfile, \"__cpp_nontype_template_parameter_class=201806L\");"}, {"sha": "1939166e90792219a2564ddb26913de06a9388d8", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -2129,6 +2129,52 @@ replace_result_decl (tree *tp, tree decl, tree replacement)\n   return data.changed;\n }\n \n+/* Evaluate the call T to virtual function thunk THUNK_FNDECL.  */\n+\n+static tree\n+cxx_eval_thunk_call (const constexpr_ctx *ctx, tree t, tree thunk_fndecl,\n+\t\t     bool lval,\n+\t\t     bool *non_constant_p, bool *overflow_p)\n+{\n+  tree function = THUNK_TARGET (thunk_fndecl);\n+\n+  /* virtual_offset is only set in the presence of virtual bases, which make\n+     the class non-literal, so we don't need to handle it here.  */\n+  if (THUNK_VIRTUAL_OFFSET (thunk_fndecl))\n+    {\n+      gcc_assert (!DECL_DECLARED_CONSTEXPR_P (function));\n+      if (!ctx->quiet)\n+\t{\n+\t  error (\"call to non-%<constexpr%> function %qD\", function);\n+\t  explain_invalid_constexpr_fn (function);\n+\t}\n+      *non_constant_p = true;\n+      return t;\n+    }\n+\n+  tree new_call = copy_node (t);\n+  CALL_EXPR_FN (new_call) = function;\n+  TREE_TYPE (new_call) = TREE_TYPE (TREE_TYPE (function));\n+\n+  tree offset = size_int (THUNK_FIXED_OFFSET (thunk_fndecl));\n+\n+  if (DECL_THIS_THUNK_P (thunk_fndecl))\n+    {\n+      /* 'this'-adjusting thunk.  */\n+      tree this_arg = CALL_EXPR_ARG (t, 0);\n+      this_arg = build2 (POINTER_PLUS_EXPR, TREE_TYPE (this_arg),\n+\t\t\t this_arg, offset);\n+      CALL_EXPR_ARG (new_call, 0) = this_arg;\n+    }\n+  else\n+    /* Return-adjusting thunk.  */\n+    new_call = build2 (POINTER_PLUS_EXPR, TREE_TYPE (new_call),\n+\t\t       new_call, offset);\n+\n+  return cxx_eval_constant_expression (ctx, new_call, lval,\n+\t\t\t\t       non_constant_p, overflow_p);\n+}\n+\n /* Subroutine of cxx_eval_constant_expression.\n    Evaluate the call expression tree T in the context of OLD_CALL expression\n    evaluation.  */\n@@ -2209,6 +2255,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n   if (fndecl_built_in_p (fun))\n     return cxx_eval_builtin_function_call (ctx, t, fun,\n \t\t\t\t\t   lval, non_constant_p, overflow_p);\n+  if (DECL_THUNK_P (fun))\n+    return cxx_eval_thunk_call (ctx, t, fun, lval, non_constant_p, overflow_p);\n   if (!DECL_DECLARED_CONSTEXPR_P (fun))\n     {\n       if (TREE_CODE (t) == CALL_EXPR"}, {"sha": "c9e7b1ff04415d142a67e0fd1fdf8a73eff0cf43", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -1000,12 +1000,11 @@ cp_get_fndecl_from_callee (tree fn, bool fold /* = true */)\n   if (fold)\n     fn = maybe_constant_init (fn);\n   STRIP_NOPS (fn);\n-  if (TREE_CODE (fn) == ADDR_EXPR)\n-    {\n-      fn = TREE_OPERAND (fn, 0);\n-      if (TREE_CODE (fn) == FUNCTION_DECL)\n-\treturn fn;\n-    }\n+  if (TREE_CODE (fn) == ADDR_EXPR\n+      || TREE_CODE (fn) == FDESC_EXPR)\n+    fn = TREE_OPERAND (fn, 0);\n+  if (TREE_CODE (fn) == FUNCTION_DECL)\n+    return fn;\n   return NULL_TREE;\n }\n "}, {"sha": "1eb5c2a29ac48998d81a64fb3aa55478442311f5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -9560,15 +9560,6 @@ grokfndecl (tree ctype,\n \t  }\n     }\n \n-  /* FIXME: For now.  */\n-  if (virtualp && (inlinep & 8) != 0)\n-    {\n-      sorry_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\"%<virtual%> %<consteval%> method %qD not supported yet\",\n-\t\tdecl);\n-      inlinep &= ~8;\n-    }\n-\n   /* If this decl has namespace scope, set that up.  */\n   if (in_namespace)\n     set_decl_namespace (decl, in_namespace, friendp);"}, {"sha": "ddc2023a75bed8fe18a4bce5e63f45baf171968e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -65,8 +65,6 @@ typedef struct priority_info_s {\n   int destructions_p;\n } *priority_info;\n \n-static void mark_vtable_entries (tree);\n-static bool maybe_emit_vtables (tree);\n static tree start_objects (int, int);\n static void finish_objects (int, int, tree);\n static tree start_static_storage_duration_function (unsigned);\n@@ -1879,14 +1877,16 @@ coerce_delete_type (tree decl, location_t loc)\n    and mark them as needed.  */\n \n static void\n-mark_vtable_entries (tree decl)\n+mark_vtable_entries (tree decl, vec<tree> &consteval_vtables)\n {\n   tree fnaddr;\n   unsigned HOST_WIDE_INT idx;\n \n   /* It's OK for the vtable to refer to deprecated virtual functions.  */\n   warning_sentinel w(warn_deprecated_decl);\n \n+  bool consteval_seen = false;\n+\n   FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (DECL_INITIAL (decl)),\n \t\t\t      idx, fnaddr)\n     {\n@@ -1901,6 +1901,15 @@ mark_vtable_entries (tree decl)\n \tcontinue;\n \n       fn = TREE_OPERAND (fnaddr, 0);\n+      if (TREE_CODE (fn) == FUNCTION_DECL && DECL_IMMEDIATE_FUNCTION_P (fn))\n+\t{\n+\t  if (!consteval_seen)\n+\t    {\n+\t      consteval_seen = true;\n+\t      consteval_vtables.safe_push (decl);\n+\t    }\n+\t  continue;\n+\t}\n       TREE_ADDRESSABLE (fn) = 1;\n       /* When we don't have vcall offsets, we output thunks whenever\n \t we output the vtables that contain them.  With vcall offsets,\n@@ -1917,6 +1926,20 @@ mark_vtable_entries (tree decl)\n     }\n }\n \n+/* Replace any consteval functions in vtables with null pointers.  */\n+\n+static void\n+clear_consteval_vfns (vec<tree> &consteval_vtables)\n+{\n+  for (tree vtable : consteval_vtables)\n+    for (constructor_elt &elt : *CONSTRUCTOR_ELTS (DECL_INITIAL (vtable)))\n+      {\n+\ttree fn = cp_get_fndecl_from_callee (elt.value, /*fold*/false);\n+\tif (fn && DECL_IMMEDIATE_FUNCTION_P (fn))\n+\t  elt.value = build_zero_cst (vtable_entry_type);\n+      }\n+}\n+\n /* Adjust the TLS model on variable DECL if need be, typically after\n    the linkage of DECL has been modified.  */\n \n@@ -2228,7 +2251,7 @@ decl_needed_p (tree decl)\n    Returns true if any vtables were emitted.  */\n \n static bool\n-maybe_emit_vtables (tree ctype)\n+maybe_emit_vtables (tree ctype, vec<tree> &consteval_vtables)\n {\n   tree vtbl;\n   tree primary_vtbl;\n@@ -2273,7 +2296,7 @@ maybe_emit_vtables (tree ctype)\n   for (vtbl = CLASSTYPE_VTABLES (ctype); vtbl; vtbl = DECL_CHAIN (vtbl))\n     {\n       /* Mark entities references from the virtual table as used.  */\n-      mark_vtable_entries (vtbl);\n+      mark_vtable_entries (vtbl, consteval_vtables);\n \n       if (TREE_TYPE (DECL_INITIAL (vtbl)) == 0)\n \t{\n@@ -4887,6 +4910,9 @@ c_parse_final_cleanups (void)\n \n   emit_support_tinfos ();\n \n+  /* Track vtables we want to emit that refer to consteval functions.  */\n+  auto_vec<tree> consteval_vtables;\n+\n   do\n     {\n       tree t;\n@@ -4906,7 +4932,7 @@ c_parse_final_cleanups (void)\n \t have to look at it again.  */\n       for (i = keyed_classes->length ();\n \t   keyed_classes->iterate (--i, &t);)\n-\tif (maybe_emit_vtables (t))\n+\tif (maybe_emit_vtables (t, consteval_vtables))\n \t  {\n \t    reconsider = true;\n \t    keyed_classes->unordered_remove (i);\n@@ -5177,6 +5203,7 @@ c_parse_final_cleanups (void)\n   perform_deferred_noexcept_checks ();\n \n   fini_constexpr ();\n+  clear_consteval_vfns (consteval_vtables);\n \n   /* The entire file is now complete.  If requested, dump everything\n      to a file.  */"}, {"sha": "e36a8aed8f852916d57548ddf00547b988cebff0", "filename": "gcc/cp/search.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -1958,20 +1958,13 @@ check_final_overrider (tree overrider, tree basefn)\n     /* OK */;\n   else\n     {\n+      auto_diagnostic_group d;\n       if (fail == 1)\n-\t{\n-\t  auto_diagnostic_group d;\n-\t  error (\"invalid covariant return type for %q+#D\", overrider);\n-\t  inform (DECL_SOURCE_LOCATION (basefn),\n-\t\t  \"overridden function is %q#D\", basefn);\n-\t}\n+\terror (\"invalid covariant return type for %q+#D\", overrider);\n       else\n-\t{\n-\t  auto_diagnostic_group d;\n-\t  error (\"conflicting return type specified for %q+#D\", overrider);\n-\t  inform (DECL_SOURCE_LOCATION (basefn),\n-\t\t  \"overridden function is %q#D\", basefn);\n-\t}\n+\terror (\"conflicting return type specified for %q+#D\", overrider);\n+      inform (DECL_SOURCE_LOCATION (basefn),\n+\t      \"overridden function is %q#D\", basefn);\n       DECL_INVALID_OVERRIDER_P (overrider) = 1;\n       return 0;\n     }\n@@ -1993,6 +1986,25 @@ check_final_overrider (tree overrider, tree basefn)\n       return 0;\n     }\n \n+  /* A consteval virtual function shall not override a virtual function that is\n+     not consteval. A consteval virtual function shall not be overridden by a\n+     virtual function that is not consteval.  */\n+  if (DECL_IMMEDIATE_FUNCTION_P (overrider)\n+      != DECL_IMMEDIATE_FUNCTION_P (basefn))\n+    {\n+      auto_diagnostic_group d;\n+      if (DECL_IMMEDIATE_FUNCTION_P (overrider))\n+\terror (\"%<consteval%> function %q+D overriding non-%<consteval%> \"\n+\t       \"function\", overrider);\n+      else\n+\terror (\"non-%<consteval%> function %q+D overriding %<consteval%> \"\n+\t       \"function\", overrider);\n+      inform (DECL_SOURCE_LOCATION (basefn),\n+\t      \"overridden function is %qD\", basefn);\n+      DECL_INVALID_OVERRIDER_P (overrider) = 1;\n+      return 0;\n+    }\n+\n   /* A function declared transaction_safe_dynamic that overrides a function\n      declared transaction_safe (but not transaction_safe_dynamic) is\n      ill-formed.  */"}, {"sha": "5cdb75ab89af1c147a79f9a84afd614e9b7e13d8", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval-virtual1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual1.C?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  virtual int foo () { return 42; }\t\t// { dg-message \"overridden function is 'virtual int S::foo\\\\\\(\\\\\\)'\" }\n+  consteval virtual int bar () { return 43; }\t// { dg-message \"overridden function is 'virtual consteval int S::bar\\\\\\(\\\\\\)'\" }\n+};\n+struct T : public S {\n+  int bar () { return 44; }\t// { dg-error \"non-'consteval' function 'virtual int T::bar\\\\\\(\\\\\\)' overriding 'consteval' function\" }\n+};\n+struct U : public S {\n+  consteval virtual int foo () { return 45; }\t// { dg-error \"'consteval' function 'virtual consteval int U::foo\\\\\\(\\\\\\)' overriding non-'consteval' function\" }\n+};"}, {"sha": "d5d8f798cab02890566145f84e182a0c7ff4774e", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval-virtual2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual2.C?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile { target c++20 } }\n+\n+struct A\n+{\n+  virtual consteval int f() const { return 1; };\n+};\n+\n+struct B: A\n+{\n+  virtual consteval int f() const { return 2; };\n+  virtual void g() { }\n+};\n+\n+consteval int f()\n+{\n+  const A& ar = B();\n+  return ar.f();\n+}\n+\n+static_assert (f() == 2);\n+\n+B b;"}, {"sha": "376e3ba50d3577f214fe95f77faacddd14baa12b", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval-virtual3.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual3.C?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  constexpr S () : s (0) {}\n+  virtual int foo () const { return 42; }\n+  consteval virtual int bar () const { return 43; }\n+  consteval virtual int baz () const { return 44; }\n+  consteval virtual int qux () const { return 47; }\n+  int s;\n+};\n+struct T : public S {\n+  constexpr T () : t (0) {}\n+  consteval int bar () const { return 45; }\n+  consteval virtual int baz () const { return 46; }\n+  consteval virtual int grault () const { return 48; }\n+  int t;\n+};\n+\n+consteval int\n+foo ()\n+{\n+  S s;\n+  T t;\n+  S *u = (S *) &t;\n+  T *v = &t;\n+  if (s.bar () != 43) throw 1;\n+  if (s.baz () != 44) throw 2;\n+  if (t.bar () != 45) throw 3;\n+  if (t.baz () != 46) throw 4;\n+  if (u->bar () != 45) throw 5;\n+  if (u->baz () != 46) throw 6;\n+  if (s.qux () != 47) throw 7;\n+  if (t.qux () != 47) throw 8;\n+  if (u->qux () != 47) throw 9;\n+  if (v->qux () != 47) throw 10;\n+  if (v->grault () != 48) throw 11;\n+  return 0;\n+}\n+\n+constexpr S s;\n+constexpr T t;\n+\n+constexpr const S *\n+bar (bool x)\n+{\n+  return x ? &s : (const S *) &t;\n+}\n+\n+int a = foo ();\n+int b = bar (false)->bar ();\n+int c = bar (true)->baz ();\n+static_assert (bar (false)->bar () == 45);\n+static_assert (bar (true)->baz () == 44);"}, {"sha": "83405fe7aee836fd06838fffe2fc50d0ac51f008", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval-virtual4.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual4.C?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  constexpr S () : s (0) {}\n+  virtual int foo () const { return 42; }\n+  consteval virtual int bar () const { return 43; }\n+  consteval virtual int baz () const { return 44; }\n+  int s;\n+};\n+struct T : public S {\n+  constexpr T () : t (0) {}\n+  consteval int bar () const { return 45; }\n+  consteval virtual int baz () const { return 46; }\n+  int t;\n+};\n+\n+consteval int\n+foo ()\n+{\n+  S s;\n+  T t;\n+  S *u = (S *) &t;\n+  T *v = &t;\n+  auto pmf1 = &S::bar;\n+  auto pmf2 = &S::baz;\n+  if ((s.*pmf1) () != 43) throw 1;\n+  if ((s.*pmf2) () != 44) throw 2;\n+  if ((t.*pmf1) () != 45) throw 3;\n+  if ((t.*pmf2) () != 46) throw 4;\n+  if ((u->*pmf1) () != 45) throw 5;\n+  if ((u->*pmf2) () != 46) throw 6;\n+  return 0;\n+}\n+\n+constexpr S s;\n+constexpr T t;\n+\n+constexpr const S *\n+bar (bool x)\n+{\n+  return x ? &s : (const S *) &t;\n+}\n+\n+int a = foo ();\n+int b = bar (false)->bar ();\n+int c = bar (true)->baz ();\n+static_assert (bar (false)->bar () == 45);\n+static_assert (bar (true)->baz () == 44);"}, {"sha": "85ad1182fb093acc98ae40b61a89f2834c371eb3", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval-virtual5.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6321c4508b2a85c21246c1c06a8208e2a151e48/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval-virtual5.C?ref=e6321c4508b2a85c21246c1c06a8208e2a151e48", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do compile { target c++20 } }\n+\n+struct B1;\n+struct B2;\n+struct D;\n+\n+struct B1\n+{\n+  virtual consteval const B1 *foo1 () const {return this;}\n+  virtual consteval const B2 *foo2 (const D *) const;\n+};\n+struct B2\n+{\n+  virtual consteval const B2 *baz1 () const {return this;}\n+  virtual consteval const B1 *baz2 (const D *) const;\n+};\n+\n+struct D : public B1, B2\n+{\n+  virtual consteval const D *foo1 () const {return this;}\n+  virtual consteval const D *foo2 (const D *d) const {return d;}\n+  virtual consteval const D *baz1 () const {return this;}\n+  virtual consteval const D *baz2 (const D *d) const {return d;}\n+};\n+\n+consteval const B2 *B1::foo2 (const D *d) const {return d;}\n+consteval const B1 *B2::baz2 (const D *d) const {return d;}\n+\n+consteval int\n+test (const B1 *b1, const B2 *b2, const D *d)\n+{\n+  if (b1->foo1 () != b1)\n+    return 1;\n+  if (b2->baz1 () != b2)\n+    return 2;\n+  if (b1->foo2 (d) != b2)\n+    return 3;\n+  if (b2->baz2 (d) != b1)\n+    return 4;\n+  return 0;\n+}\n+\n+consteval int\n+test (const D *d)\n+{\n+  if (d->foo2 (d) != d)\n+    return 11;\n+  if (d->baz2 (d) != d)\n+    return 12;\n+  if (d->foo1 () != d)\n+    return 13;\n+  if (d->baz1 () != d)\n+    return 14;\n+  return 0;\n+}\n+\n+constexpr D d;\n+constexpr auto e = test (&d, &d, &d);\n+constexpr auto f = test (&d);\n+static_assert (e == 0);\n+static_assert (f == 0);"}]}