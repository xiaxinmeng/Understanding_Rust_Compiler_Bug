{"sha": "2147b1541cb6a841b54cf92f025ddc62857998e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0N2IxNTQxY2I2YTg0MWI1NGNmOTJmMDI1ZGRjNjI4NTc5OThlNQ==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-06-21T15:25:56Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-06-21T15:25:56Z"}, "message": "contrib.texi, [...]: Use the correct name \"Objective-C\" everywhere instead of \"Objective C\".\n\n\t* doc/contrib.texi, doc/cpp.texi, doc/cppinternals.texi,\n\tdoc/extend.texi, doc/gcc.texi, doc/install.texi, doc/invoke.texi,\n\tdoc/objc.texi, doc/tm.texi: Use the correct name \"Objective-C\"\n\teverywhere instead of \"Objective C\".\n\nFrom-SVN: r43485", "tree": {"sha": "b1f04a24541a040bf15be9c8b6793290d24f81e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f04a24541a040bf15be9c8b6793290d24f81e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2147b1541cb6a841b54cf92f025ddc62857998e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2147b1541cb6a841b54cf92f025ddc62857998e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2147b1541cb6a841b54cf92f025ddc62857998e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2147b1541cb6a841b54cf92f025ddc62857998e5/comments", "author": null, "committer": null, "parents": [{"sha": "470042c71248ae02ba02e8a4dba8b03df3230943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/470042c71248ae02ba02e8a4dba8b03df3230943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/470042c71248ae02ba02e8a4dba8b03df3230943"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "cbdf8c398c26bb63d82bb82fc15def6068cc8542", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -1,3 +1,10 @@\n+2001-06-21  Stan Shebs  <shebs@apple.com>\n+\n+\t* doc/contrib.texi, doc/cpp.texi, doc/cppinternals.texi,\n+\tdoc/extend.texi, doc/gcc.texi, doc/install.texi, doc/invoke.texi,\n+\tdoc/objc.texi, doc/tm.texi: Use the correct name \"Objective-C\"\n+\teverywhere instead of \"Objective C\".\n+\n 2001-06-21  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/c-tree.texi, doc/contrib.texi, doc/extend.texi,"}, {"sha": "b145eadcfb97e0b3b72b9be96892a3cea5dadc28", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -380,7 +380,7 @@ C99 support, and continuous emphasis on (and contributions to) documentation.\n Nathan Myers for his work on libstdc++-v3.\n \n @item\n-NeXT, Inc.@: donated the front end that supports the Objective C\n+NeXT, Inc.@: donated the front end that supports the Objective-C\n language.\n \n @item\n@@ -527,7 +527,7 @@ Gary Thomas for his ongoing work to make the PPC work for Linux.\n Philipp Thomas for random bugfixes throughout the compiler\n \n @item\n-Kresten Krab Thorup wrote the run time support for the Objective C\n+Kresten Krab Thorup wrote the run time support for the Objective-C\n language.\n \n @item"}, {"sha": "a13a3f4a87f3977d37e0a2f71b267250265b8373", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -76,7 +76,7 @@ This manual contains no Invariant Sections.  The Front-Cover Texts are\n @node Top\n @top\n The C preprocessor implements the macro language used to transform C,\n-C++, and Objective C programs before they are compiled.  It can also be\n+C++, and Objective-C programs before they are compiled.  It can also be\n useful on its own.\n \n @menu\n@@ -187,7 +187,7 @@ you to define @dfn{macros}, which are brief abbreviations for longer\n constructs.\n \n The C preprocessor is intended to be used only with C, C++, and\n-Objective C source code.  In the past, it has been abused as a general\n+Objective-C source code.  In the past, it has been abused as a general\n text processor.  It will choke on input which does not obey C's lexical\n rules.  For example, apostrophes will be interpreted as the beginning of\n character constants, and cause errors.  Also, you cannot rely on it\n@@ -1809,7 +1809,7 @@ the 1999 revision of the C standard.  Support for the 1999 revision is\n not yet complete.\n \n This macro is not defined if the @option{-traditional} option is used, nor\n-when compiling C++ or Objective C@.\n+when compiling C++ or Objective-C@.\n \n @item __STDC_HOSTED__\n This macro is defined, with value 1, if the compiler's target is a\n@@ -1842,7 +1842,7 @@ underscores.\n @itemx __GNUC_MINOR__\n @itemx __GNUC_PATCHLEVEL__\n These macros are defined by all GNU compilers that use the C\n-preprocessor: C, C++, and Objective C.  Their values are the major\n+preprocessor: C, C++, and Objective-C.  Their values are the major\n version, minor version, and patch level of the compiler, as integer\n constants.  For example, GCC 3.2.1 will define @code{__GNUC__} to 3,\n @code{__GNUC_MINOR__} to 2, and @code{__GNUC_PATCHLEVEL__} to 1.  They\n@@ -3172,7 +3172,7 @@ produce no output, rather than a line of output containing just a\n @node Preprocessor Output\n @chapter Preprocessor Output\n \n-When the C preprocessor is used with the C, C++, or Objective C\n+When the C preprocessor is used with the C, C++, or Objective-C\n compilers, it is integrated into the compiler and communicates a stream\n of binary tokens directly to the compiler's parser.  However, it can\n also be used in the more conventional standalone mode, where it produces\n@@ -3626,12 +3626,12 @@ read only once.  Neither one is as portable as a wrapper @samp{#ifndef},\n and we recommend you do not use them in new programs.\n \n @findex #import\n-In the Objective C language, there is a variant of @samp{#include}\n+In the Objective-C language, there is a variant of @samp{#include}\n called @samp{#import} which includes a file, but does so at most once.\n If you use @samp{#import} instead of @samp{#include}, then you don't\n need the conditionals inside the header file to prevent multiple\n inclusion of the contents.  GCC permits the use of @samp{#import} in C\n-and C++ as well as Objective C.  However, it is not in standard C or C++\n+and C++ as well as Objective-C.  However, it is not in standard C or C++\n and should therefore not be used by portable programs.\n \n @samp{#import} is not a well designed feature.  It requires the users of"}, {"sha": "44e42ee3dd52b209f1f6ec35e385326b96ecb874", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -72,7 +72,7 @@ into another language, under the above conditions for modified versions.\n The GNU C preprocessor in GCC 3.0 has been completely rewritten.  It is\n now implemented as a library, cpplib, so it can be easily shared between\n a stand-alone preprocessor, and a preprocessor integrated with the C,\n-C++ and Objective C front ends.  It is also available for use by other\n+C++ and Objective-C front ends.  It is also available for use by other\n programs, though this is not recommended as its exposed interface has\n not yet reached a point of reasonable stability.\n \n@@ -90,7 +90,7 @@ Identifiers, macro expansion, hash nodes, lexing.\n \n @menu\n * Conventions::\t    Conventions used in the code.\n-* Lexer::\t    The combined C, C++ and Objective C Lexer.\n+* Lexer::\t    The combined C, C++ and Objective-C Lexer.\n * Whitespace::      Input and output newlines and whitespace.\n * Hash Nodes::      All identifiers are hashed.\n * Macro Expansion:: Macro expansion algorithm.\n@@ -191,7 +191,7 @@ we don't allow the terminators of header names to be escaped; the first\n @samp{\"} or @samp{>} terminates the header name.\n \n Interpretation of some character sequences depends upon whether we are\n-lexing C, C++ or Objective C, and on the revision of the standard in\n+lexing C, C++ or Objective-C, and on the revision of the standard in\n force.  For example, @samp{::} is a single token in C++, but two\n separate @samp{:} tokens, and almost certainly a syntax error, in C.\n Such cases are handled in the main function @samp{_cpp_lex_token}, based"}, {"sha": "006251bd963a25df4c41e5ba771000ab7c9b8998", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -14,7 +14,7 @@ any of these features is used.)  To test for the availability of these\n features in conditional compilation, check for a predefined macro\n @code{__GNUC__}, which is always defined under GNU CC.\n \n-These extensions are available in C and Objective C.  Most of them are\n+These extensions are available in C and Objective-C.  Most of them are\n also available in C++.  @xref{C++ Extensions,,Extensions to the\n C++ Language}, for extensions that apply @emph{only} to C++.\n \n@@ -1797,7 +1797,7 @@ been called.  Functions with these attributes are useful for\n initializing data that will be used implicitly during the execution of\n the program.\n \n-These attributes are not currently implemented for Objective C.\n+These attributes are not currently implemented for Objective-C.\n \n @item unused\n This attribute, attached to a function, means that the function is meant\n@@ -2072,7 +2072,7 @@ Preprocessing Directives, cpp, The C Preprocessor}.\n \n This section describes the syntax with which @code{__attribute__} may be\n used, and the constructs to which attribute specifiers bind, for the C\n-language.  Some details may vary for C++ and Objective C.  Because of\n+language.  Some details may vary for C++ and Objective-C.  Because of\n infelicities in the grammar for attributes, some forms described here\n may not be successfully parsed in all cases.\n \n@@ -2866,7 +2866,7 @@ and nested functions (@pxref{Nested Functions}).  Using @option{-Winline}\n will warn when a function marked @code{inline} could not be substituted,\n and will give the reason for the failure.\n \n-Note that in C and Objective C, unlike C++, the @code{inline} keyword\n+Note that in C and Objective-C, unlike C++, the @code{inline} keyword\n does not affect the linkage of the function.\n \n @cindex automatic @code{inline} for C++ member fns"}, {"sha": "82e377c464a2ac9ff37c0a77585f43f724b40149", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -250,7 +250,7 @@ bugs.  It corresponds to GCC version 3.1.\n * Installation::    How to configure, compile and install GCC.\n * C Extensions::    GNU extensions to the C language family.\n * C++ Extensions::  GNU extensions to the C++ language.\n-* Objective C::     GNU Objective-C runtime features.\n+* Objective-C::     GNU Objective-C runtime features.\n * Gcov::\t    gcov: a GCC test coverage program.\n * Trouble::         If you have trouble installing GCC.\n * Bugs::            How, why and where to report bugs.\n@@ -285,13 +285,13 @@ bugs.  It corresponds to GCC version 3.1.\n \n @ifset USING\n @node G++ and GCC\n-@chapter Compile C, C++, Objective C, Fortran, Java or CHILL\n+@chapter Compile C, C++, Objective-C, Fortran, Java or CHILL\n \n-@cindex Objective C\n+@cindex Objective-C\n @cindex Fortran\n @cindex Java\n @cindex CHILL\n-Several versions of the compiler (C, C++, Objective C, Fortran, Java\n+Several versions of the compiler (C, C++, Objective-C, Fortran, Java\n and CHILL) are integrated; this is why we use the name\n ``GNU Compiler Collection''. GCC can compile programs written in any of these\n languages. The Fortran, CHILL, and Java compilers are described in\n@@ -319,7 +319,7 @@ Front ends for other languages, such as Ada 95 and Pascal exist but\n have not yet been integrated into GCC. These front ends, like that for C++,\n are built in subdirectories of GCC and link to it.  The result is an\n integrated compiler that can compile programs written in C, C++,\n-Objective C, or any of the languages for which you have installed front\n+Objective-C, or any of the languages for which you have installed front\n ends.\n \n In this manual, we only discuss the options for the C, Objective-C, and\n@@ -340,7 +340,7 @@ GNU debugger, GDB, works with this information in the object code to\n give you comprehensive C++ source-level editing capabilities\n (@pxref{C,,C and C++,gdb.info, Debugging with GDB}).\n \n-@c FIXME!  Someone who knows something about Objective C ought to put in\n+@c FIXME!  Someone who knows something about Objective-C ought to put in\n @c a paragraph or two about it here, and move the index entry down when\n @c there is more to point to than the general mention in the 1st par.\n \n@@ -628,7 +628,7 @@ libraries and debuggers on certain systems.\n \n @itemize @bullet\n @item\n-Objective C does not work on the RS/6000.\n+Objective-C does not work on the RS/6000.\n \n @item\n GNU C++ does not do name mangling in the same way as other C++\n@@ -3215,7 +3215,7 @@ They are @file{parse.y},\n @file{typeck.c}, along with header files @file{cp-tree.def},\n @file{cp-tree.h}, and @file{decl.h}.\n \n-The special source files for parsing Objective C are in @file{objc/}.\n+The special source files for parsing Objective-C are in @file{objc/}.\n They are @file{objc-parse.y}, @file{objc-act.c}, @file{objc-tree.def}, and\n @file{objc-act.h}.  Certain C-specific files are used for this as\n well."}, {"sha": "0c586350ed3a631e76ac235e9240cd8ebb01bfa9", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.29 2001/06/15 22:25:18 ljrittle Exp $\n+@comment $Id: install.texi,v 1.30 2001/06/21 00:03:47 jsm28 Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -392,7 +392,7 @@ will be built.  Package names currently recognized in the GCC tree are\n @samp{libstdc++-v3}), @samp{libffi}, @samp{zlib}, @samp{boehm-gc} and\n @samp{libjava}.  Note that @samp{libobjc} does not recognize itself by\n any name, so, if you list package names in @option{--enable-shared},\n-you'll only get static Objective C libraries.  @samp{libf2c} and\n+you'll only get static Objective-C libraries.  @samp{libf2c} and\n @samp{libiberty} do not support shared libraries at all.\n \n Use @option{--disable-shared} to build only static libraries.  Note that\n@@ -911,7 +911,7 @@ Finally, you can run the testsuite (which may take a long time):\n @end example\n \n The testing process will try to test as many components in the GCC\n-distribution as possible, including the C, C++, Objective C and Fortran\n+distribution as possible, including the C, C++, Objective-C and Fortran\n compilers as well as the C++ and Java runtime libraries.\n \n @section How can I run the test suite on selected tests?\n@@ -2397,7 +2397,7 @@ to look like:\n Current GCC versions probably do not work on version 2 of the NeXT\n operating system.\n \n-On NeXTStep 3.0, the Objective C compiler does not work, due,\n+On NeXTStep 3.0, the Objective-C compiler does not work, due,\n apparently, to a kernel bug that it happens to trigger.  This problem\n does not happen on 3.1.\n "}, {"sha": "ac7b137f47bb8fd68badcadbd7b7cd3bce284c43", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -864,7 +864,7 @@ explanations of options that are meaningful only for C++ programs.\n @cindex options, dialect\n \n The following options control the dialect of C (or languages derived\n-from C, such as C++ and Objective C) that the compiler accepts:\n+from C, such as C++ and Objective-C) that the compiler accepts:\n \n @table @gcctabopt\n @cindex ANSI support\n@@ -4192,7 +4192,7 @@ and searches several directories.\n @item -lobjc\n @opindex lobjc\n You need this special case of the @option{-l} option in order to\n-link an Objective C program.\n+link an Objective-C program.\n \n @item -nostartfiles\n @opindex nostartfiles"}, {"sha": "2c26b0ea20ff9f1a5b0baec95f45c3fd0d3ec014", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -3,7 +3,7 @@\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n-@node Objective C\n+@node Objective-C\n @comment  node-name,  next,  previous,  up\n \n @chapter GNU Objective-C runtime features\n@@ -22,7 +22,7 @@ comments about this document to Ovidiu Predescu\n * compatibility_alias::\n @end menu\n \n-@node Executing code before main, Type encoding, Objective C, Objective C\n+@node Executing code before main, Type encoding, Objective-C, Objective-C\n @section @code{+load}: Executing code before main\n \n \n@@ -168,7 +168,7 @@ above apply to classes defined in bundle.\n \n \n \n-@node Type encoding, Garbage Collection, Executing code before main, Objective C\n+@node Type encoding, Garbage Collection, Executing code before main, Objective-C\n @section Type encoding\n \n The Objective-C compiler generates type encodings for all the\n@@ -308,7 +308,7 @@ however, the type specifiers are only encoded when they appear in method\n argument types.\n \n \n-@node Garbage Collection, Constant string objects, Type encoding, Objective C\n+@node Garbage Collection, Constant string objects, Type encoding, Objective-C\n @section Garbage Collection\n \n Support for a new memory management policy has been added by using a"}, {"sha": "a8d8f4189fc563bf15c56ea43fb41d52a932f8a3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147b1541cb6a841b54cf92f025ddc62857998e5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2147b1541cb6a841b54cf92f025ddc62857998e5", "patch": "@@ -4523,7 +4523,7 @@ differently, such as the i860.\n \n @findex NEXT_OBJC_RUNTIME\n @item NEXT_OBJC_RUNTIME\n-Define this macro to generate code for Objective C message sending using\n+Define this macro to generate code for Objective-C message sending using\n the calling convention of the NeXT system.  This calling convention\n involves passing the object, the selector and the method arguments all\n at once to the method-lookup library function.\n@@ -5645,8 +5645,8 @@ When this macro is undefined, section attributes are disabled.\n @findex OBJC_PROLOGUE\n @item OBJC_PROLOGUE\n A C statement to output any assembler statements which are required to\n-precede any Objective C object definitions or message sending.  The\n-statement is executed only when compiling an Objective C program.\n+precede any Objective-C object definitions or message sending.  The\n+statement is executed only when compiling an Objective-C program.\n @end table\n \n @need 2000\n@@ -6276,7 +6276,7 @@ ASM_OUTPUT_DEF instead if possible.\n @findex OBJC_GEN_METHOD_LABEL\n @item OBJC_GEN_METHOD_LABEL (@var{buf}, @var{is_inst}, @var{class_name}, @var{cat_name}, @var{sel_name})\n Define this macro to override the default assembler names used for\n-Objective C methods.\n+Objective-C methods.\n \n The default name is a unique method number followed by the name of the\n class (e.g.@: @samp{_1_Foo}).  For methods in categories, the name of"}]}