{"sha": "d9771cbd4a62f2921a85e1763874bbf6f42208f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3NzFjYmQ0YTYyZjI5MjFhODVlMTc2Mzg3NGJiZjZmNDIyMDhmOA==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-26T00:17:02Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-26T00:17:02Z"}, "message": "treelang.texi: Fix whitespacing.\n\n2005-02-25  James A. Morrison  <phython@gcc.gnu.org>\n\n        * treelang.texi: Fix whitespacing.\n\nFrom-SVN: r95568", "tree": {"sha": "453498450d5245bf6d4e40dbb590649b18ae2c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/453498450d5245bf6d4e40dbb590649b18ae2c0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9771cbd4a62f2921a85e1763874bbf6f42208f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9771cbd4a62f2921a85e1763874bbf6f42208f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9771cbd4a62f2921a85e1763874bbf6f42208f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9771cbd4a62f2921a85e1763874bbf6f42208f8/comments", "author": null, "committer": null, "parents": [{"sha": "ae7a02719ca0933d2f788be27ee1fb42b09a724c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7a02719ca0933d2f788be27ee1fb42b09a724c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7a02719ca0933d2f788be27ee1fb42b09a724c"}], "stats": {"total": 196, "additions": 101, "deletions": 95}, "files": [{"sha": "6c3000da779b7a73c55ab0e9f986a2cb568bdcfc", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9771cbd4a62f2921a85e1763874bbf6f42208f8/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9771cbd4a62f2921a85e1763874bbf6f42208f8/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=d9771cbd4a62f2921a85e1763874bbf6f42208f8", "patch": "@@ -1,3 +1,7 @@\n+2005-02-25  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* treelang.texi: Fix whitespacing.\n+\n 2005-02-24  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR other/19896"}, {"sha": "23add218e59dcd846afaa4c617b8b28e2a4eabcc", "filename": "gcc/treelang/treelang.texi", "status": "modified", "additions": 97, "deletions": 95, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9771cbd4a62f2921a85e1763874bbf6f42208f8/gcc%2Ftreelang%2Ftreelang.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9771cbd4a62f2921a85e1763874bbf6f42208f8/gcc%2Ftreelang%2Ftreelang.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.texi?ref=d9771cbd4a62f2921a85e1763874bbf6f42208f8", "patch": "@@ -257,10 +257,10 @@ Reporting Bugs\n @cindex credits\n \n Treelang was based on 'toy' by Richard Kenner, and also uses code from\n-the GCC core code tree. Tim Josling first created the language and\n+the GCC core code tree.  Tim Josling first created the language and\n documentation, based on the GCC Fortran compiler's documentation\n-framework.  Treelang was updated to use the TreeSSA infrastructure by James A.\n-Morrison.\n+framework.  Treelang was updated to use the TreeSSA infrastructure by\n+James A. Morrison.\n \n @itemize @bullet\n @item\n@@ -275,7 +275,7 @@ standard C runtime.\n \n @item\n It would have been difficult to build treelang without access to Joachim\n-Nadler's guide to writing a front end to GCC (written in German). A\n+Nadler's guide to writing a front end to GCC (written in German).  A\n translation of this document into English is available via the\n CobolForGCC project or via the documentation links from the GCC home\n page @uref{http://gcc.gnu.org}.\n@@ -291,9 +291,9 @@ page @uref{http://gcc.gnu.org}.\n @cindex beginners\n \n Treelang is a sample language, useful only to help people understand how\n-to implement a new language front end to GCC. It is not a useful\n+to implement a new language front end to GCC.  It is not a useful\n language in itself other than as an example or basis for building a new\n-language. Therefore only language developers are likely to have an\n+language.  Therefore only language developers are likely to have an\n interest in it.\n \n This manual assumes familiarity with GCC, which you can obtain by using\n@@ -325,11 +325,11 @@ replacement for, or alternative to, the 'toy' language, but which is\n amenable to inclusion within the GCC source tree. \n \n @code{treelang} is largely a cut down version of C, designed to showcase\n-the features of the GCC code generation back end. Only those features\n+the features of the GCC code generation back end.  Only those features\n that are directly supported by the GCC code generation back end are\n-implemented. Features are implemented in a manner which is easiest and\n-clearest to implement. Not all or even most code generation back end\n-features are implemented. The intention is to add features incrementally\n+implemented.  Features are implemented in a manner which is easiest and\n+clearest to implement.  Not all or even most code generation back end\n+features are implemented.  The intention is to add features incrementally\n until most features of the GCC back end are implemented in treelang.\n \n The main features missing are structures, arrays and pointers.\n@@ -394,8 +394,8 @@ Treelang programs consist of whitespace, comments, keywords and names.\n @item\n Whitespace consists of the space character, a tab, and the end of line\n character.  Line terminations are as defined by the\n-standard C library. Whitespace is ignored except within comments,\n-and where it separates parts of the program. In the example below, A and\n+standard C library.  Whitespace is ignored except within comments,\n+and where it separates parts of the program.  In the example below, A and\n B are two separate names separated by whitespace. \n \n @smallexample\n@@ -404,7 +404,7 @@ A B\n \n @item\n Comments consist of @samp{//} followed by any characters up to the end\n-of the line. C style comments (/* */) are not supported. For example,\n+of the line.  C style comments (/* */) are not supported.  For example,\n the assignment below is followed by a not very helpful comment.\n \n @smallexample\n@@ -463,9 +463,9 @@ used as function type to indicate function returns nothing\n \n @item\n Names consist of any letter or \"_\" followed by any number of letters,\n-numbers, or \"_\".  \"$\" is not allowed in a name. All names must be globally\n+numbers, or \"_\".  \"$\" is not allowed in a name.  All names must be globally\n unique, i.e. may not be used twice in any context, and must\n-not be a keyword.  Names and keywords are case sensitive. For example:\n+not be a keyword.  Names and keywords are case sensitive.  For example:\n \n @smallexample\n a A _a a_ IF_X\n@@ -479,7 +479,7 @@ are all different names.\n @chapter Parsing Syntax\n @cindex Parsing Syntax\n \n-Declarations are built up from the lexical elements described above. A\n+Declarations are built up from the lexical elements described above.  A\n file may contain one of more declarations.\n \n @itemize @bullet\n@@ -520,17 +520,17 @@ within functions. It cannot be used for functions.\n \n @item \n static: This means a variable is allocated at start of program and\n-remains allocated until the program as a whole ends. For a function, it\n+remains allocated until the program as a whole ends.  For a function, it\n means that the function is only visible within the current file.\n \n @item\n external_definition: For a variable, which must be defined outside a\n-function, it means that the variable is visible from other files. For a\n+function, it means that the variable is visible from other files.  For a\n function, it means that the function is visible from another file.\n \n @item\n external_reference: For a variable, which must be defined outside a\n-function, it means that the variable is defined in another file. For a\n+function, it means that the variable is defined in another file.  For a\n function, it means that the function is defined in another file.\n \n @end enumerate\n@@ -543,16 +543,16 @@ This defines the data type of a variable or the return type of a function.\n @enumerate a\n \n @item \n-int: The variable is a signed integer. The function returns a signed integer.\n+int: The variable is a signed integer.  The function returns a signed integer.\n \n @item \n-unsigned int: The variable is an unsigned integer. The function returns an unsigned integer.\n+unsigned int: The variable is an unsigned integer.  The function returns an unsigned integer.\n \n @item \n-char: The variable is a signed character. The function returns a signed character.\n+char: The variable is a signed character.  The function returns a signed character.\n \n @item \n-unsigned char: The variable is an unsigned character. The function returns an unsigned character.\n+unsigned char: The variable is an unsigned character.  The function returns an unsigned character.\n \n @end enumerate\n \n@@ -618,18 +618,18 @@ be absent, and if the function is not void the expression must be\n present.\n \n @item\n-expression: variable OR integer_constant OR expression+expression\n-OR expression-expression OR expression==expression OR (expression)\n-OR variable=expression OR function_call\n+expression: variable OR integer_constant OR expression + expression\n+OR expression - expression OR expression == expression OR ( expression )\n+OR variable = expression OR function_call\n \n An expression can be a constant or a variable reference or a\n-function_call. Expressions can be combined as a sum of two expressions\n+function_call.  Expressions can be combined as a sum of two expressions\n or the difference of two expressions, or an equality test of two\n-expresions. An assignment is also an expression. Expresions and operator\n+expresions.  An assignment is also an expression.  Expresions and operator\n precedence work as in C.\n \n @item\n-function_call: function_name (comma_separated_expressions)\n+function_call: function_name ( optional_comma_separated_expressions )\n \n This invokes the function, passing to it the values of the expressions\n as actual parameters.\n@@ -699,7 +699,7 @@ compiler indicate the problem and the location in the user's source file\n where the problem was first noticed.  The user can use this information\n to locate and fix the problem.\n \n-The compiler stops after the first error. There are no plans to fix\n+The compiler stops after the first error.  There are no plans to fix\n this, ever, as it would vastly complicate the implementation of treelang\n to little or no benefit.\n \n@@ -745,8 +745,8 @@ The @code{treelang} command itself.\n The @code{libc} run-time library.  This library contains the machine\n code needed to support capabilities of the Treelang language that are\n not directly provided by the machine code generated by the\n-@code{treelang} compilation phase. This is the same library that the\n-main c compiler uses (libc).\n+@code{treelang} compilation phase.  This is the same library that the\n+main C compiler uses (libc).\n \n @cindex @code{tree1}, program\n @cindex programs, @code{tree1}\n@@ -799,8 +799,8 @@ same as @samp{gcc foo.c}, but instead of using the C compiler named\n In a GNU Treelang installation, @code{gcc} recognizes Treelang source\n files by name just like it does C and C++ source files.  It knows to use\n the Treelang compiler named @code{tree1}, instead of @code{cc1} or\n-@code{cc1plus}, to compile Treelang files. If a file's name ends in\n-@code{.tree} then GCC knows that the program is written in treelang. You\n+@code{cc1plus}, to compile Treelang files.  If a file's name ends in\n+@code{.tree} then GCC knows that the program is written in treelang.  You\n can also manually override the language.\n \n @cindex @code{gcc}, not recognizing Treelang source\n@@ -887,7 +887,7 @@ for information on the way different languages are handled\n by the GCC compiler (@code{gcc}).\n \n You can use this, combined with the output of the @samp{gcc -v x.tree}\n-command to get the options applicable to treelang. Treelang programs\n+command to get the options applicable to treelang.  Treelang programs\n must end with the suffix @samp{.tree}.\n \n @cindex preprocessor\n@@ -936,10 +936,10 @@ to C, you need to specify the promoted value, not the nominal value.\n @section treelang files\n \n To create a compiler that integrates into GCC, you need create many\n-files. Some of the files are integrated into the main GCC makefile, to\n+files.  Some of the files are integrated into the main GCC makefile, to\n build the various parts of the compiler and to run the test\n-suite. Others are incorporated into various GCC programs such as\n-GCC.c. Finally you must provide the actual programs comprising your\n+suite.  Others are incorporated into various GCC programs such as\n+@file{gcc.c}.  Finally you must provide the actual programs comprising your\n compiler. \n \n @cindex files\n@@ -949,48 +949,48 @@ The files are:\n @enumerate 1\n \n @item\n-COPYING. This is the copyright file, assuming you are going to use the\n-GNU General Public Licence. You probably need to use the GPL because if\n+COPYING.  This is the copyright file, assuming you are going to use the\n+GNU General Public Licence.  You probably need to use the GPL because if\n you use the GCC back end your program and the back end are one program,\n and the back end is GPLed.\n \n This need not be present if the language is incorporated into the main\n GCC tree, as the main GCC directory has this file. \n \n @item\n-COPYING.LIB. This is the copyright file for those parts of your program\n+COPYING.LIB.  This is the copyright file for those parts of your program\n that are not to be covered by the GPL, but are instead to be covered by\n-the LGPL (Library or Lesser GPL). This licence may be appropriate for\n+the LGPL (Library or Lesser GPL).  This licence may be appropriate for\n the library routines associated with your compiler. These are the\n-routines that are linked with the @emph{output} of the compiler. Using\n+routines that are linked with the @emph{output} of the compiler.  Using\n the LGPL for these programs allows programs written using your compiler\n to be closed source. For example LIBC is under the LGPL. \n \n This need not be present if the language is incorporated into the main\n GCC tree, as the main GCC directory has this file. \n \n @item\n-ChangeLog. Record all the changes to your compiler. Use the same format\n+ChangeLog.  Record all the changes to your compiler.  Use the same format\n as used in treelang as it is supported by an emacs editing mode and is\n-part of the FSF coding standard. Normally each directory has its own\n-changelog. The FSF standard allows but does not require a meaningful\n+part of the FSF coding standard.  Normally each directory has its own\n+changelog.  The FSF standard allows but does not require a meaningful\n comment on why the changes were made, above and beyond @emph{why} they\n-were made. In the author's opinion it is useful to provide this\n+were made.  In the author's opinion it is useful to provide this\n information.\n \n @item\n-treelang.texi. The manual, written in texinfo. Your manual would have a\n-different file name. You need not write it in texinfo if you don't want\n+treelang.texi.  The manual, written in texinfo. Your manual would have a\n+different file name.  You need not write it in texinfo if you don't want\n do, but a lot of GNU software does use texinfo. \n \n @cindex Make-lang.in\n @item\n-Make-lang.in. This file is part of the make file which in incorporated\n+Make-lang.in.  This file is part of the make file which in incorporated\n with the GCC make file skeleton (Makefile.in in the GCC directory) to\n make Makefile, as part of the configuration process.\n \n Makefile in turn is the main instruction to actually build\n-everything. The build instructions are held in the main GCC manual and\n+everything.  The build instructions are held in the main GCC manual and\n web site so they are not repeated here. \n \n There are some comments at the top which will help you understand what\n@@ -1002,76 +1002,77 @@ how much progress you are making), build info and html files from the\n texinfo source, run the tests etc.\n \n @item\n-README. Just a brief informative text file saying what is in this\n+README.  Just a brief informative text file saying what is in this\n directory. \n \n @cindex config-lang.in\n @item\n-config-lang.in. This file is read by the configuration progress and must\n+config-lang.in.  This file is read by the configuration progress and must\n be present. You specify the name of your language, the name(s) of the\n compiler(s) incouding preprocessors you are going to build, whether any,\n usually generated, files should be excluded from diffs (ie when making\n-diff files to send in patches). Whether the equate 'stagestuff' is used\n+diff files to send in patches).  Whether the equate 'stagestuff' is used\n is unknown (???).\n \n-@cindex lang-options\n+@cindex lang.opt\n @item\n-lang-options. This file is included into GCC.c, the main GCC driver, and\n-tells it what options your language supports. This is only used to\n-display help (is this true ???).\n+lang.opt.  This file is included into @file{gcc.c}, the main GCC driver, and\n+tells it what options your language supports.  This is also used to\n+display help.\n \n-@cindex lang-specs\n+@cindex lang-specs.h\n @item\n-lang-specs. This file is also included in GCC.c. It tells GCC.c when to\n-call your programs and what options to send them. The mini-language\n-'specs' is documented in the source of GCC.c. Do not attempt to write a\n-specs file from scratch - use an existing one as the base and enhance\n-it. \n+lang-specs.h.  This file is also included in @file{gcc.c}. It tells\n+@file{gcc.c} when to call your programs and what options to send them.  The\n+mini-language 'specs' is documented in the source of @file{gcc.c}.  Do not\n+attempt to write a specs file from scratch - use an existing one as the base\n+and enhance it. \n \n @item\n-Your texi files. Texinfo can be used to build documentation in HTML,\n+Your texi files.  Texinfo can be used to build documentation in HTML,\n info, dvi and postscript formats. It is a tagged language, is documented\n in its own manual, and has its own emacs mode.\n \n @item\n-Your programs. The relationships between all the programs are explained\n-in the next section. You need to write or use the following programs:\n+Your programs.  The relationships between all the programs are explained\n+in the next section.  You need to write or use the following programs:\n \n @itemize @bullet\n \n @item\n-lexer. This breaks the input into words and passes these to the\n-parser. This is lex.l in treelang, which is passed through flex, a lex\n-variant, to produce C code lex.c. Note there is a school of thought that\n-says real men hand code their own lexers, however you may prefer to\n+lexer.  This breaks the input into words and passes these to the\n+parser.  This is @file{lex.l} in treelang, which is passed through flex, a lex\n+variant, to produce C code @file{lex.c}.  Note there is a school of thought\n+that says real men hand code their own lexers.  However, you may prefer to\n write far less code and use flex, as was done with treelang.\n \n @item\n-parser. This breaks the program into recognizable constructs such as\n-expressions, statements etc. This is parse.y in treelang, which is\n-passed through bison, which is a yacc variant, to produce C code parse.c.\n+parser.  This breaks the program into recognizable constructs such as\n+expressions, statements etc.  This is @file{parse.y} in treelang, which is\n+passed through bison, which is a yacc variant, to produce C code\n+@file{parse.c}.\n \n @item\n-back end interface. This interfaces to the code generation back end. In\n-treelang, this is tree1.c which mainly interfaces to toplev.c and\n-treetree.c which mainly interfaces to everything else. Many languages\n+back end interface.  This interfaces to the code generation back end.  In\n+treelang, this is @file{tree1.c} which mainly interfaces to @file{toplev.c} and\n+@file{treetree.c} which mainly interfaces to everything else. Many languages\n mix up the back end interface with the parser, as in the C compiler for\n-example. It is a matter of taste which way to do it, but with treelang\n+example.  It is a matter of taste which way to do it, but with treelang\n it is separated out to make the back end interface cleaner and easier to\n understand.\n \n @item\n-header files. For function prototypes and common data items. One point\n+header files.  For function prototypes and common data items.  One point\n to note here is that bison can generate a header files with all the\n numbers is has assigned to the keywords and symbols, and you can include\n-the same header in your lexer. This technique is demonstrated in\n+the same header in your lexer.  This technique is demonstrated in\n treelang.\n \n @item\n-compiler main file. GCC comes with a program toplev.c which is a\n-perfectly serviceable main program for your compiler. treelang uses\n-toplev.c but other languages have been known to replace it with their\n-own main program. Again this is a matter of taste and how much code you\n+compiler main file.  GCC comes with a file @file{toplev.c} which is a\n+perfectly serviceable main program for your compiler.  GNU Treelang uses\n+@file{toplev.c} but other languages have been known to replace it with their\n+own main program.  Again this is a matter of taste and how much code you\n want to write. \n \n @end itemize\n@@ -1095,38 +1096,39 @@ want to write.\n The GCC compiler consists of a driver, which then executes the various\n compiler phases based on the instructions in the specs files. \n \n-Typically a program's language will be identified from its suffix (eg\n-.tree) for treelang programs.\n+Typically a program's language will be identified from its suffix\n+(e.g., @file{.tree}) for treelang programs.\n \n-The driver (gcc.c) will then drive (exec) in turn a preprocessor, the main\n-compiler, the assembler and the link editor. Options to GCC allow you to\n-override all of this. In the case of treelang programs there is no\n+The driver (@file{gcc.c}) will then drive (exec) in turn a preprocessor,\n+the main compiler, the assembler and the link editor. Options to GCC allow you\n+to override all of this. In the case of treelang programs there is no\n preprocessor, and mostly these days the C preprocessor is run within the\n main C compiler rather than as a separate process, apparently for reasons of speed.\n \n You will be using the standard assembler and linkage editor so these are\n ignored from now on. \n \n-You have to write your own preprocessor if you want one. This is usually\n-totally language specific. The main point to be aware of is to ensure\n+You have to write your own preprocessor if you want one.  This is usually\n+totally language specific.  The main point to be aware of is to ensure\n that you find some way to pass file name and line number information\n through to the main compiler so that it can tell the back end this\n information and so the debugger can find the right source line for each\n-piece of code. That is all there is to say about the preprocessor except\n+piece of code.  That is all there is to say about the preprocessor except\n that the preprocessor will probably not be the slowest part of the\n compiler and will probably not use the most memory so don't waste too\n much time tuning it until you know you need to do so.\n \n @node treelang main compiler,  , treelang driver, treelang compiler interfaces\n @subsection treelang main compiler\n \n-The main compiler for treelang consists of toplev.c from the main GCC\n+The main compiler for treelang consists of @file{toplev.c} from the main GCC\n compiler, the parser, lexer and back end interface routines, and the\n back end routines themselves, of which there are many.\n \n-toplev.c does a lot of work for you and you should almost certainly use it,\n+@file{toplev.c} does a lot of work for you and you should almost certainly\n+use it.\n \n-Writing this code is the hard part of creating a compiler using GCC. The\n+Writing this code is the hard part of creating a compiler using GCC.  The\n back end interface documentation is incomplete and the interface is\n complex. \n "}]}