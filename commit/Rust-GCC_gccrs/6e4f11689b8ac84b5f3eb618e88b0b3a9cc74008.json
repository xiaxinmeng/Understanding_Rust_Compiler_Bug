{"sha": "6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0ZjExNjg5YjhhYzg0YjVmM2ViNjE4ZTg4YjBiM2E5Y2M3NDAwOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-01-18T16:26:26Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-01-18T16:26:26Z"}, "message": "re PR target/38736 (-mavx can change the ABI via BIGGEST_ALIGNMENT)\n\ngcc/\n\n2009-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/38736\n\t* c-common.c (handle_aligned_attribute): Use\n\tATTRIBUTE_ALIGNED_VALUE instead of BIGGEST_ALIGNMENT for\n\tdefault alignment value.\n\n\t* c-cppbuiltin.c (c_cpp_builtins): Define __BIGGEST_ALIGNMENT__.\n\n\t* defaults.h (ATTRIBUTE_ALIGNED_VALUE): New.\n\t* config/i386/i386.h (ATTRIBUTE_ALIGNED_VALUE): Likewise.\n\n\t* doc/extend.texi: Update __attribute__ ((aligned)).  Document\n\t__BIGGEST_ALIGNMENT__.\n\n\t* doc/tm.texi: Document ATTRIBUTE_ALIGNED_VALUE.\n\ngcc/testsuite/\n\n2009-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/38736\n\t* g++.dg/compat/abi/pr38736_main.C: New.\n\t* g++.dg/compat/abi/pr38736_x.C: Likewise.\n\t* g++.dg/compat/abi/pr38736_y.C: Likewise.\n\t* g++.dg/other/macro-1.C: Likewise.\n\t* gcc.dg/macro-1.c: Likewise.\n\t* gcc.dg/compat/pr38736_main.c: Likewise.\n\t* gcc.dg/compat/pr38736_x.c: Likewise.\n\t* gcc.dg/compat/pr38736_y.c: Likewise.\n\nFrom-SVN: r143486", "tree": {"sha": "d74a458bc64925e0158a42b28d1bdf62ea7614fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d74a458bc64925e0158a42b28d1bdf62ea7614fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "890065bfe4a9d3367568a2f5a9a12b6289f377d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890065bfe4a9d3367568a2f5a9a12b6289f377d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/890065bfe4a9d3367568a2f5a9a12b6289f377d0"}], "stats": {"total": 160, "additions": 148, "deletions": 12}, "files": [{"sha": "fed14be4e6114678c7c21ec0c0f02a0a412d461f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -1,3 +1,20 @@\n+2009-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/38736\n+\t* c-common.c (handle_aligned_attribute): Use\n+\tATTRIBUTE_ALIGNED_VALUE instead of BIGGEST_ALIGNMENT for\n+\tdefault alignment value.\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __BIGGEST_ALIGNMENT__.\n+\n+\t* defaults.h (ATTRIBUTE_ALIGNED_VALUE): New.\n+\t* config/i386/i386.h (ATTRIBUTE_ALIGNED_VALUE): Likewise.\n+\n+\t* doc/extend.texi: Update __attribute__ ((aligned)).  Document\n+\t__BIGGEST_ALIGNMENT__.\n+\n+\t* doc/tm.texi: Document ATTRIBUTE_ALIGNED_VALUE.\n+\n 2009-01-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38819"}, {"sha": "5eed1dc89e1b5dda78afb85aa3d30569059aaa33", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -5906,7 +5906,7 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   tree *type = NULL;\n   int is_type = 0;\n   tree align_expr = (args ? TREE_VALUE (args)\n-\t\t     : size_int (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n+\t\t     : size_int (ATTRIBUTE_ALIGNED_VALUE / BITS_PER_UNIT));\n   int i;\n \n   if (DECL_P (*node))"}, {"sha": "c6112d8afcae66a7d6470779168b3fb789ff7b72", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -762,6 +762,9 @@ c_cpp_builtins (cpp_reader *pfile)\n      format.  */\n   if (ENABLE_DECIMAL_FLOAT && ENABLE_DECIMAL_BID_FORMAT)\n     cpp_define (pfile, \"__DECIMAL_BID_FORMAT__\");\n+\n+  builtin_define_with_int_value (\"__BIGGEST_ALIGNMENT__\",\n+\t\t\t\t BIGGEST_ALIGNMENT / BITS_PER_UNIT);\n }\n \n /* Pass an object-like macro.  If it doesn't lie in the user's"}, {"sha": "14e7438c4a51a7432d447d7c70699583a670ef7b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -710,6 +710,10 @@ enum target_cpu_default\n /* Maximum stack alignment.  */\n #define MAX_STACK_ALIGNMENT MAX_OFILE_ALIGNMENT\n \n+/* Alignment value for attribute ((aligned)).  It is a constant since\n+   it is the part of the ABI.  We shouldn't change it with -mavx.  */\n+#define ATTRIBUTE_ALIGNED_VALUE 128\n+\n /* Decide whether a variable of mode MODE should be 128 bit aligned.  */\n #define ALIGN_MODE_128(MODE) \\\n  ((MODE) == XFmode || SSE_REG_MODE_P (MODE))"}, {"sha": "c9097349795f64c0ea09d9e54679c6e9ea2af884", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -944,4 +944,9 @@ along with GCC; see the file COPYING3.  If not see\n   ((TYPE) ? LOCAL_ALIGNMENT ((TYPE), (ALIGN)) : (ALIGN))\n #endif\n \n+/* Alignment value for attribute ((aligned)).  */\n+#ifndef ATTRIBUTE_ALIGNED_VALUE\n+#define ATTRIBUTE_ALIGNED_VALUE BIGGEST_ALIGNMENT\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "5a7e2d83e29030b1016376a3acc1908e170d186c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -3697,21 +3697,27 @@ that forces the union to be double-word aligned.\n As in the preceding examples, you can explicitly specify the alignment\n (in bytes) that you wish the compiler to use for a given variable or\n structure field.  Alternatively, you can leave out the alignment factor\n-and just ask the compiler to align a variable or field to the maximum\n-useful alignment for the target machine you are compiling for.  For\n-example, you could write:\n+and just ask the compiler to align a variable or field to the\n+default alignment for the target architecture you are compiling for.\n+The default alignment is sufficient for all scalar types, but may not be\n+enough for all vector types on a target which supports vector operations.\n+The default alignment is fixed for a particular target ABI.\n+\n+Gcc also provides a target specific macro @code{__BIGGEST_ALIGNMENT__},\n+which is the largest alignment ever used for any data type on the\n+target machine you are compiling for.  For example, you could write:\n \n @smallexample\n-short array[3] __attribute__ ((aligned));\n+short array[3] __attribute__ ((aligned (__BIGGEST_ALIGNMENT__)));\n @end smallexample\n \n-Whenever you leave out the alignment factor in an @code{aligned} attribute\n-specification, the compiler automatically sets the alignment for the declared\n-variable or field to the largest alignment which is ever used for any data\n-type on the target machine you are compiling for.  Doing this can often make\n-copy operations more efficient, because the compiler can use whatever\n-instructions copy the biggest chunks of memory when performing copies to\n-or from the variables or fields that you have aligned this way.\n+The compiler automatically sets the alignment for the declared\n+variable or field to @code{__BIGGEST_ALIGNMENT__}.  Doing this can\n+often make copy operations more efficient, because the compiler can\n+use whatever instructions copy the biggest chunks of memory when\n+performing copies to or from the variables or fields that you have\n+aligned this way.  Note that the value of @code{__BIGGEST_ALIGNMENT__}\n+may change depending on command line options.\n \n When used on a struct, or struct member, the @code{aligned} attribute can\n only increase the alignment; in order to decrease it, the @code{packed}"}, {"sha": "92de6e5b8ac4226291dadfff947b0ef4a25b7c9d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -1105,6 +1105,11 @@ Alignment, in bits, a C conformant malloc implementation has to\n provide.  If not defined, the default value is @code{BITS_PER_WORD}.\n @end defmac\n \n+@defmac ATTRIBUTE_ALIGNED_VALUE\n+Alignment used by the @code{__attribute__ ((aligned))} construct.  If\n+not defined, the default value is @code{BIGGEST_ALIGNMENT}.\n+@end defmac\n+\n @defmac MINIMUM_ATOMIC_ALIGNMENT\n If defined, the smallest alignment, in bits, that can be given to an\n object that can be referenced in one operation, without disturbing any"}, {"sha": "8f42d58e6c6c675f8d4dcf2ae7fb0029ea8294fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -1,3 +1,15 @@\n+2009-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/38736\n+\t* g++.dg/compat/abi/pr38736_main.C: New.\n+\t* g++.dg/compat/abi/pr38736_x.C: Likewise.\n+\t* g++.dg/compat/abi/pr38736_y.C: Likewise.\n+\t* g++.dg/other/macro-1.C: Likewise.\n+\t* gcc.dg/macro-1.c: Likewise.\n+\t* gcc.dg/compat/pr38736_main.c: Likewise.\n+\t* gcc.dg/compat/pr38736_x.c: Likewise.\n+\t* gcc.dg/compat/pr38736_y.c: Likewise.\n+\n 2009-01-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38819"}, {"sha": "b9f6ac898ffafae81ab30db2c460222a631919e2", "filename": "gcc/testsuite/g++.dg/compat/abi/pr38736_main.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_main.C?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/38736 */\n+/* { dg-skip-if \"attribute ((aligned))\" { ! { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target avx } */\n+\n+/* Test compatibility of attribute ((aligned)) with and without -mavx.  */\n+\n+extern int aligned_x (void);\n+extern int aligned_y_avx (void);\n+extern \"C\" void abort (void);\n+\n+int\n+main ()\n+{\n+  if (aligned_x () != aligned_y_avx ())\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "aeab257aae9ff7276aa265498a0d19b386b30f76", "filename": "gcc/testsuite/g++.dg/compat/abi/pr38736_x.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_x.C?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/38736 */\n+/* { dg-options \"-O2\" } */\n+\n+struct alignment_test_struct\n+{\n+  char space[4] __attribute__((__aligned__));\n+};\n+\n+extern int aligned_x (void);\n+\n+int\n+aligned_x (void)\n+{\n+  return __alignof__(struct alignment_test_struct);\n+}"}, {"sha": "bade1b2927be481131443993dfa31ac16ac0813f", "filename": "gcc/testsuite/g++.dg/compat/abi/pr38736_y.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fabi%2Fpr38736_y.C?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -0,0 +1,6 @@\n+/* PR target/38736 */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define aligned_x aligned_y_avx\n+\n+#include \"pr38736_x.C\""}, {"sha": "e1d9d34cd031bcbb36a6123495d3f9cf5db27bbe", "filename": "gcc/testsuite/g++.dg/other/macro-1.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmacro-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmacro-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fmacro-1.C?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-do compile } */\n+\n+short array[3] __attribute__ ((aligned (__BIGGEST_ALIGNMENT__)));"}, {"sha": "88c3586db4b8b1125321a9876c7aacf82a42a65f", "filename": "gcc/testsuite/gcc.dg/compat/pr38736_main.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_main.c?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/38736 */\n+/* { dg-skip-if \"attribute ((aligned))\" { ! { i?86-*-* x86_64-*-* } } } */\n+/* { dg-require-effective-target avx } */\n+\n+/* Test compatibility of attribute ((aligned)) with and without -mavx.  */\n+\n+extern int aligned_x (void);\n+extern int aligned_y_avx (void);\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  if (aligned_x () != aligned_y_avx ())\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "aeab257aae9ff7276aa265498a0d19b386b30f76", "filename": "gcc/testsuite/gcc.dg/compat/pr38736_x.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_x.c?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/38736 */\n+/* { dg-options \"-O2\" } */\n+\n+struct alignment_test_struct\n+{\n+  char space[4] __attribute__((__aligned__));\n+};\n+\n+extern int aligned_x (void);\n+\n+int\n+aligned_x (void)\n+{\n+  return __alignof__(struct alignment_test_struct);\n+}"}, {"sha": "7e46afa8d1758c36936fda5000a59afcdf8052bb", "filename": "gcc/testsuite/gcc.dg/compat/pr38736_y.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fpr38736_y.c?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -0,0 +1,6 @@\n+/* PR target/38736 */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define aligned_x aligned_y_avx\n+\n+#include \"pr38736_x.c\""}, {"sha": "e1d9d34cd031bcbb36a6123495d3f9cf5db27bbe", "filename": "gcc/testsuite/gcc.dg/macro-1.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-1.c?ref=6e4f11689b8ac84b5f3eb618e88b0b3a9cc74008", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-do compile } */\n+\n+short array[3] __attribute__ ((aligned (__BIGGEST_ALIGNMENT__)));"}]}