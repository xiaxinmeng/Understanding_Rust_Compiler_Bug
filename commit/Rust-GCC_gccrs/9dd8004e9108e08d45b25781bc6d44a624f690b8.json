{"sha": "9dd8004e9108e08d45b25781bc6d44a624f690b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkODAwNGU5MTA4ZTA4ZDQ1YjI1NzgxYmM2ZDQ0YTYyNGY2OTBiOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-01-17T17:33:35Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-01-17T17:33:35Z"}, "message": "re PR fortran/30476 ([Regression 4.2, 4.3] Via other module imported generic interface rejected)\n\n2007-01-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30476\n\t* module.c (load_generic_interfaces): Make the marking of the\n\tsymbol as ambiguous conditional on the module names being\n\tdifferent.\n\t(write_generic): Ensure that the generic interface has a\n\tnon-NULL module field.\n\n2007-01-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/30476\n\t* gfortran.dg/generic_12.f90: New test.\n\nFrom-SVN: r120860", "tree": {"sha": "645ca4be34c9123444441514fc00fbc40f0f5d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/645ca4be34c9123444441514fc00fbc40f0f5d07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dd8004e9108e08d45b25781bc6d44a624f690b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd8004e9108e08d45b25781bc6d44a624f690b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd8004e9108e08d45b25781bc6d44a624f690b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd8004e9108e08d45b25781bc6d44a624f690b8/comments", "author": null, "committer": null, "parents": [{"sha": "8086b65daacc347fcbb79f4f3e4312b18a3accfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8086b65daacc347fcbb79f4f3e4312b18a3accfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8086b65daacc347fcbb79f4f3e4312b18a3accfe"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "9dcead3472ee94b13c683d2c4d72b72b3f1c00c4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8004e9108e08d45b25781bc6d44a624f690b8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8004e9108e08d45b25781bc6d44a624f690b8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9dd8004e9108e08d45b25781bc6d44a624f690b8", "patch": "@@ -1,3 +1,12 @@\n+2007-01-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30476\n+\t* module.c (load_generic_interfaces): Make the marking of the\n+\tsymbol as ambiguous conditional on the module names being\n+\tdifferent.\n+\t(write_generic): Ensure that the generic interface has a\n+\tnon-NULL module field.\n+\n 2007-01-16  Roger Sayle  <roger@eyesopen.com>\n \n \tPR fortran/30404"}, {"sha": "1613a740046c59ad27543a179932511b3e309748", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8004e9108e08d45b25781bc6d44a624f690b8/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8004e9108e08d45b25781bc6d44a624f690b8/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=9dd8004e9108e08d45b25781bc6d44a624f690b8", "patch": "@@ -3097,9 +3097,11 @@ load_generic_interfaces (void)\n \t      gfc_symtree *st;\n \t      p = p ? p : name;\n \t      st = gfc_find_symtree (gfc_current_ns->sym_root, p);\n-\t      st->ambiguous = sym->attr.generic ? 0 : 1;\n+\t      if (!sym->attr.generic\n+\t\t    && sym->module != NULL\n+\t\t    && strcmp(module, sym->module) != 0)\n+\t\tst->ambiguous = 1;\n \t    }\n-\n \t  if (i == 1)\n \t    {\n \t      mio_interface_rest (&sym->generic);\n@@ -3748,6 +3750,9 @@ write_generic (gfc_symbol * sym)\n       || !gfc_check_access (sym->attr.access, sym->ns->default_access))\n     return;\n \n+  if (sym->module == NULL)\n+    sym->module = gfc_get_string (module_name);\n+\n   mio_symbol_interface (&sym->name, &sym->module, &sym->generic);\n }\n "}, {"sha": "e5724aee2167a5bf3b96742f5ee9cde224403b5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8004e9108e08d45b25781bc6d44a624f690b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8004e9108e08d45b25781bc6d44a624f690b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9dd8004e9108e08d45b25781bc6d44a624f690b8", "patch": "@@ -1,3 +1,8 @@\n+2007-01-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/30476\n+\t* gfortran.dg/generic_12.f90: New test.\n+\n 2007-01-17  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* gcc.target/i386/vectorize1.c: Add cleanup-tree-dump."}, {"sha": "59c3c96e3e2945546c92080c64a09b947e0049ec", "filename": "gcc/testsuite/gfortran.dg/generic_12.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd8004e9108e08d45b25781bc6d44a624f690b8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd8004e9108e08d45b25781bc6d44a624f690b8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_12.f90?ref=9dd8004e9108e08d45b25781bc6d44a624f690b8", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+! Test the fix for PR30476 in which the generic interface hello\n+! was found incorrectly to be ambiguous.\n+!\n+!Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+SUBROUTINE hello_x(dum)\n+   IMPLICIT NONE\n+   INTEGER :: dum\n+   WRITE(0,*) \"Hello world: \", dum\n+END SUBROUTINE hello_x\n+\n+MODULE interfaces\n+IMPLICIT NONE\n+INTERFACE hello\n+   SUBROUTINE hello_x(dum)\n+      IMPLICIT NONE\n+      INTEGER :: dum\n+   END SUBROUTINE hello_x\n+END INTERFACE\n+END MODULE interfaces\n+\n+MODULE global_module\n+  USE interfaces\n+END MODULE global_module\n+\n+PROGRAM main\n+  USE global_module\n+  IMPLICIT NONE\n+  CALL hello(10)\n+END PROGRAM main\n+! { dg-final { cleanup-modules \"interfaces global_module\" } }"}]}