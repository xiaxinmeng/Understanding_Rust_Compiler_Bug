{"sha": "f50d67f64e861c52bef8a7c6d330cee72f4679f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUwZDY3ZjY0ZTg2MWM1MmJlZjhhN2M2ZDMzMGNlZTcyZjQ2NzlmOQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-09-28T22:48:48Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-09-28T22:48:48Z"}, "message": "re PR tree-optimization/36891 (ICE with vector division and -ffast-math and LIM)\n\n2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n            Kaushal Kantawala  <kaushal_kantawala@playstation.sony.com>\n\n        PR tree-opt/36891\n        * tree-ssa-loop-im.c (rewrite_reciprocal): Set DECL_GIMPLE_REG_P on\n        the newly created variable.\n        Create a VECTOR_CST of all 1s for vector types.\n\n2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n            Kaushal Kantawala  <kaushal_kantawala@playstation.sony.com>\n\n        PR tree-opt/36891\n        * gcc.dg/torture/pr36891.c: New testcase.\n\n\nCo-Authored-By: Kaushal Kantawala <Kaushal_Kantawala@playstation.sony.com>\n\nFrom-SVN: r140738", "tree": {"sha": "b6ac98bcf3c5bd31e17c4546d4d572075a550624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6ac98bcf3c5bd31e17c4546d4d572075a550624"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f50d67f64e861c52bef8a7c6d330cee72f4679f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50d67f64e861c52bef8a7c6d330cee72f4679f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50d67f64e861c52bef8a7c6d330cee72f4679f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50d67f64e861c52bef8a7c6d330cee72f4679f9/comments", "author": null, "committer": null, "parents": [{"sha": "0d5f7a16ebc7931c798d266a2b172c856ef26531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5f7a16ebc7931c798d266a2b172c856ef26531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5f7a16ebc7931c798d266a2b172c856ef26531"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "e3b90463f12ff77ce605e9754faf7dd6acb165fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50d67f64e861c52bef8a7c6d330cee72f4679f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50d67f64e861c52bef8a7c6d330cee72f4679f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f50d67f64e861c52bef8a7c6d330cee72f4679f9", "patch": "@@ -1,3 +1,11 @@\n+2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+            Kaushal Kantawala  <kaushal_kantawala@playstation.sony.com>\n+\n+\tPR tree-opt/36891\n+\t* tree-ssa-loop-im.c (rewrite_reciprocal): Set DECL_GIMPLE_REG_P on\n+\tthe newly created variable.\n+\tCreate a VECTOR_CST of all 1s for vector types.\n+\n 2008-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/36575"}, {"sha": "0723a51250d680748a968f028243159e2dd32aa2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50d67f64e861c52bef8a7c6d330cee72f4679f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50d67f64e861c52bef8a7c6d330cee72f4679f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f50d67f64e861c52bef8a7c6d330cee72f4679f9", "patch": "@@ -1,3 +1,9 @@\n+2008-09-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+            Kaushal Kantawala  <kaushal_kantawala@playstation.sony.com>\n+\n+\tPR tree-opt/36891\n+\t* gcc.dg/torture/pr36891.c: New testcase.\n+\n 2008-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/conv_decimal.adb: New test."}, {"sha": "0d5bc98d44b5eaf36da29178a69707f5a16977e7", "filename": "gcc/testsuite/gcc.dg/torture/pr36891.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50d67f64e861c52bef8a7c6d330cee72f4679f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36891.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50d67f64e861c52bef8a7c6d330cee72f4679f9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36891.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr36891.c?ref=f50d67f64e861c52bef8a7c6d330cee72f4679f9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ffast-math\" } */\n+\n+#define __vector __attribute__((vector_size(16) ))\n+__vector float f(void);\n+void g(__vector float);\n+void RRB( __vector float vdist, __vector float vx)\n+{\n+  int detail;\n+  for(detail = 0; detail < 5;++detail)\n+  {\n+   __vector float frand = f();\n+   __vector float pullperc =  frand/ vdist;\n+   __vector float pullx =  vx * pullperc;\n+   g(pullx);\n+  }\n+}"}, {"sha": "fe7a22203fc5c03b6b94d11840b7b7bccb76ab50", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50d67f64e861c52bef8a7c6d330cee72f4679f9/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50d67f64e861c52bef8a7c6d330cee72f4679f9/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=f50d67f64e861c52bef8a7c6d330cee72f4679f9", "patch": "@@ -763,16 +763,32 @@ rewrite_reciprocal (gimple_stmt_iterator *bsi)\n {\n   gimple stmt, stmt1, stmt2;\n   tree var, name, lhs, type;\n+  tree real_one;\n \n   stmt = gsi_stmt (*bsi);\n   lhs = gimple_assign_lhs (stmt);\n   type = TREE_TYPE (lhs);\n \n   var = create_tmp_var (type, \"reciptmp\");\n   add_referenced_var (var);\n+  DECL_GIMPLE_REG_P (var) = 1;\n+\n+  /* For vectors, create a VECTOR_CST full of 1's.  */\n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    {\n+      int i, len;\n+      tree list = NULL_TREE;\n+      real_one = build_real (TREE_TYPE (type), dconst1);\n+      len = TYPE_VECTOR_SUBPARTS (type);\n+      for (i = 0; i < len; i++)\n+\tlist = tree_cons (NULL, real_one, list);\n+      real_one = build_vector (type, list);\n+    }\n+  else\n+    real_one = build_real (type, dconst1);\n \n   stmt1 = gimple_build_assign_with_ops (RDIV_EXPR,\n-\t\tvar, build_real (type, dconst1), gimple_assign_rhs2 (stmt));\n+\t\tvar, real_one, gimple_assign_rhs2 (stmt));\n   name = make_ssa_name (var, stmt1);\n   gimple_assign_set_lhs (stmt1, name);\n "}]}