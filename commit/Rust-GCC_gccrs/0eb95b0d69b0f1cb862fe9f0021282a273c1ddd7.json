{"sha": "0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGViOTViMGQ2OWIwZjFjYjg2MmZlOWYwMDIxMjgyYTI3M2MxZGRkNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2010-02-10T05:45:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2010-02-10T05:45:24Z"}, "message": "streambuf: Adjust doxygen group markup.\n\n2010-02-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * include/std/streambuf: Adjust doxygen group markup.\n        * include/std/functional: Same.\n        * include/ext/vstring.h: Same.\n        * include/ext/pb_ds/assoc_container.hpp: Same.\n        * include/ext/stdio_filebuf.h: Same.\n        * include/ext/stdio_sync_filebuf.h: Same.\n        * include/bits/localefwd.h: Same.\n        * include/bits/functional_hash.h: Same.\n        * include/bits/locale_classes.h: Same.\n        * include/bits/locale_facets.h: Same.\n        * include/bits/ios_base.h: Same.\n        * include/bits/codecvt.h: Same.\n        * include/bits/locale_facets_nonio.h: Same.\n\n        * testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n        * testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n\nFrom-SVN: r156644", "tree": {"sha": "20c4f88ab26e67ce8d55f69aece783ccac97217d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20c4f88ab26e67ce8d55f69aece783ccac97217d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/comments", "author": null, "committer": null, "parents": [{"sha": "52f126782f91d7277e11864fb53d4d7eb769bcc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f126782f91d7277e11864fb53d4d7eb769bcc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f126782f91d7277e11864fb53d4d7eb769bcc2"}], "stats": {"total": 257, "additions": 199, "deletions": 58}, "files": [{"sha": "5b6eae736795cc242aa5cd46680f9d664e004bf8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -1,3 +1,22 @@\n+2010-02-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/streambuf: Adjust doxygen group markup.\n+\t* include/std/functional: Same.\n+\t* include/ext/vstring.h: Same.\n+\t* include/ext/pb_ds/assoc_container.hpp: Same.\n+\t* include/ext/stdio_filebuf.h: Same.\n+\t* include/ext/stdio_sync_filebuf.h: Same.\n+\t* include/bits/localefwd.h: Same.\n+\t* include/bits/functional_hash.h: Same.\n+\t* include/bits/locale_classes.h: Same.\n+\t* include/bits/locale_facets.h: Same.\n+\t* include/bits/ios_base.h: Same.\n+\t* include/bits/codecvt.h: Same.\n+\t* include/bits/locale_facets_nonio.h: Same.\n+\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n+\n 2010-02-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/42460"}, {"sha": "98ca3ae326371821cf198312b97a3b6bc1d3a975", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -1,7 +1,7 @@\n // Locale support (codecvt) -*- C++ -*-\n \n // Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-// 2009  Free Software Foundation, Inc.\n+// 2009, 2010  Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -262,9 +262,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       do_max_length() const throw() = 0;\n     };\n \n-  /// @brief class codecvt [22.2.1.5].\n-  /// NB: Generic, mostly useless implementation.\n-  template<typename _InternT, typename _ExternT, typename _StateT>\n+\n+\n+  /**\n+   *  @brief  Primary class template codecvt.\n+   *  @ingroup locales\n+   *\n+   *  NB: Generic, mostly useless implementation.\n+   *\n+  */\n+   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt\n     : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>\n     {"}, {"sha": "18c8c04ca3f328e64d23feef9fef0d226ea8083e", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -1,6 +1,6 @@\n // functional_hash.h header -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,7 +41,15 @@\n \n namespace std\n {\n-  /// Class template hash.\n+  /** @defgroup hashes Hashes\n+   *  @ingroup functors\n+   *\n+   *   Hashing functors taking a variable type and returning a @c std::size_t.\n+   *\n+   *  @{\n+   */\n+ \n+  /// Primary class template hash.\n   template<typename _Tp>\n     struct hash;\n \n@@ -54,7 +62,7 @@ namespace std\n       { return reinterpret_cast<size_t>(__p); }\n     };\n \n-  /// Explicit specializations for integer types.\n+  // Explicit specializations for integer types.\n #define _Cxx_hashtable_define_trivial_hash(_Tp) \t       \\\n   template<>\t\t\t\t\t\t       \\\n     struct hash<_Tp> : public std::unary_function<_Tp, size_t> \\\n@@ -64,30 +72,59 @@ namespace std\n       { return static_cast<size_t>(__val); }\t\t       \\\n     };\n \n+  /// Explicit specialization for bool.\n   _Cxx_hashtable_define_trivial_hash(bool);\n+\n+  /// Explicit specialization for char.\n   _Cxx_hashtable_define_trivial_hash(char);\n+\n+  /// Explicit specialization for signed char.\n   _Cxx_hashtable_define_trivial_hash(signed char);\n+\n+  /// Explicit specialization for unsigned char.\n   _Cxx_hashtable_define_trivial_hash(unsigned char);\n+\n+  /// Explicit specialization for wchar_t.\n   _Cxx_hashtable_define_trivial_hash(wchar_t);\n+\n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  /// Explicit specialization for char16_t.\n   _Cxx_hashtable_define_trivial_hash(char16_t);\n+\n+  /// Explicit specialization for char32_t.\n   _Cxx_hashtable_define_trivial_hash(char32_t);\n #endif\n+\n+  /// Explicit specialization for short.\n   _Cxx_hashtable_define_trivial_hash(short);\n+\n+  /// Explicit specialization for int.\n   _Cxx_hashtable_define_trivial_hash(int);\n+\n+  /// Explicit specialization for long.\n   _Cxx_hashtable_define_trivial_hash(long);\n+\n+  /// Explicit specialization for long long.\n   _Cxx_hashtable_define_trivial_hash(long long);\n+\n+  /// Explicit specialization for unsigned short.\n   _Cxx_hashtable_define_trivial_hash(unsigned short);\n+\n+  /// Explicit specialization for unsigned int.\n   _Cxx_hashtable_define_trivial_hash(unsigned int);\n+\n+  /// Explicit specialization for unsigned long.\n   _Cxx_hashtable_define_trivial_hash(unsigned long);\n+\n+  /// Explicit specialization for unsigned long long.\n   _Cxx_hashtable_define_trivial_hash(unsigned long long);\n \n #undef _Cxx_hashtable_define_trivial_hash\n \n   // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n   // (Used by the next specializations of std::tr1::hash.)\n \n-  /// Dummy generic implementation (for sizeof(size_t) != 4, 8).\n+  // Dummy generic implementation (for sizeof(size_t) != 4, 8).\n   template<size_t = sizeof(size_t)>\n     struct _Fnv_hash\n     {\n@@ -202,6 +239,7 @@ namespace std\n       }\n     };\n \n+  /// Explicit specializations for string.\n   template<>\n     struct hash<string>\n     : public std::unary_function<string, size_t>\n@@ -212,6 +250,7 @@ namespace std\n     };\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n+  /// Explicit specializations for wstring.\n   template<>\n     struct hash<wstring>\n     : public std::unary_function<wstring, size_t>\n@@ -226,6 +265,7 @@ namespace std\n #endif\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  /// Explicit specializations for u16string.\n   template<>\n     struct hash<u16string>\n     : public std::unary_function<u16string, size_t>\n@@ -238,6 +278,7 @@ namespace std\n       }\n     };\n \n+  /// Explicit specializations for u32string.\n   template<>\n     struct hash<u32string>\n     : public std::unary_function<u32string, size_t>\n@@ -251,6 +292,7 @@ namespace std\n     };\n #endif\n \n+  /// Explicit specializations for error_code.\n   template<>\n     struct hash<error_code>\n     : public std::unary_function<error_code, size_t>\n@@ -262,6 +304,7 @@ namespace std\n \treturn _Fnv_hash<>::hash(__p, sizeof(__e));\n       }\n     };\n+  // @} group hashes\n }\n \n #endif // _FUNCTIONAL_HASH_H"}, {"sha": "601e5209cf1d7d8b6b5a3b73f3cbda0a847648bb", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -457,16 +457,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     register_callback(event_callback __fn, int __index);\n \n   protected:\n-    //@{\n-    /**\n-     *  ios_base data members (doc me)\n-    */\n     streamsize\t\t_M_precision;\n     streamsize\t\t_M_width;\n     fmtflags\t\t_M_flags;\n     iostate\t\t_M_exception;\n     iostate\t\t_M_streambuf_state;\n-    //@}\n \n     // 27.4.2.6  Members for callbacks\n     // 27.4.2.6  ios_base callbacks"}, {"sha": "9f7346e7e75ee535054badba28d304cc1badbeff", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -47,6 +47,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 22.1.1 Class locale\n   /**\n    *  @brief  Container class for localization functionality.\n+   *  @ingroup locales\n    *\n    *  The locale class is first a class wrapper for C library locales.  It is\n    *  also an extensible container for user-defined localization.  A locale is\n@@ -325,6 +326,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 22.1.1.1.2  Class locale::facet\n   /**\n    *  @brief  Localization functionality base class.\n+   *  @ingroup locales\n    *\n    *  The facet class is the base class for a localization feature, such as\n    *  money, time, and number printing.  It provides common support for facets\n@@ -419,6 +421,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 22.1.1.1.3 Class locale::id\n   /**\n    *  @brief  Facet ID class.\n+   *  @ingroup locales\n    *\n    *  The ID class provides facets with an index used to identify them.\n    *  Every facet class must define a public static member locale::id, or be"}, {"sha": "c931502e9a2039cd806668ea2cd4bce252efa918", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -130,7 +130,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // 22.2.1.1  Template class ctype\n   // Include host and configuration specific ctype enums for ctype_base.\n \n-  // Common base for ctype<_CharT>.\n   /**\n    *  @brief  Common base for ctype facet\n    *\n@@ -583,9 +582,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\tchar __dfault, char* __dest) const = 0;\n     };\n \n-  // NB: Generic, mostly useless implementation.\n   /**\n-   *  @brief  Template ctype facet\n+   *  @brief  Primary class template ctype facet.\n+   *  @ingroup locales\n    *\n    *  This template class defines classification and conversion functions for\n    *  character sets.  It wraps <cctype> functionality.  Ctype gets used by\n@@ -661,9 +660,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT>\n     locale::id ctype<_CharT>::id;\n \n-  // 22.2.1.3  ctype<char> specialization.\n   /**\n    *  @brief  The ctype<char> specialization.\n+   *  @ingroup locales\n    *\n    *  This class defines classification and conversion functions for\n    *  the char type.  It gets used by char streams for many I/O\n@@ -1160,9 +1159,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  // 22.2.1.3  ctype<wchar_t> specialization\n   /**\n    *  @brief  The ctype<wchar_t> specialization.\n+   *  @ingroup locales\n    *\n    *  This class defines classification and conversion functions for the\n    *  wchar_t type.  It gets used by wchar_t streams for many I/O operations.\n@@ -1620,7 +1619,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   /**\n-   *  @brief  Numpunct facet.\n+   *  @brief  Primary class template numpunct.\n+   *  @ingroup locales\n    *\n    *  This facet stores several pieces of information related to printing and\n    *  scanning numbers, such as the decimal point character.  It takes a\n@@ -1893,7 +1893,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \n   /**\n-   *  @brief  Facet for parsing number strings.\n+   *  @brief  Primary class template num_get.\n+   *  @ingroup locales\n    *\n    *  This facet encapsulates the code to parse and return a number\n    *  from a string.  It is used by the istream numeric extraction\n@@ -2231,7 +2232,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \n \n   /**\n-   *  @brief  Facet for converting numbers to strings.\n+   *  @brief  Primary class template num_put.\n+   *  @ingroup locales\n    *\n    *  This facet encapsulates the code to convert a number to a string.  It is\n    *  used by the ostream numeric insertion operators."}, {"sha": "a25e0acd2c0322b86e497e5f99d9e189e8b57596", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -42,9 +42,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Time format ordering data.\n+   *  @ingroup locales\n    *\n-   *  This class provides an enum representing different orderings of day,\n-   *  month, and year.\n+   *  This class provides an enum representing different orderings of\n+   *  time: day, month, and year.\n   */\n   class time_base\n   {\n@@ -346,7 +347,8 @@ _GLIBCXX_END_NAMESPACE\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n-   *  @brief  Facet for parsing dates and times.\n+   *  @brief  Primary class template time_get.\n+   *  @ingroup locales\n    *\n    *  This facet encapsulates the code to parse and return a date or\n    *  time from a string.  It is used by the istream numeric\n@@ -693,7 +695,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /**\n-   *  @brief  Facet for outputting dates and times.\n+   *  @brief  Primary class template time_put.\n+   *  @ingroup locales\n    *\n    *  This facet encapsulates the code to format and output dates and times\n    *  according to formats used by strftime().\n@@ -820,6 +823,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  Money format ordering data.\n+   *  @ingroup locales\n    *\n    *  This class contains an ordered array of 4 fields to represent the\n    *  pattern for formatting a money amount.  Each field may contain one entry\n@@ -915,7 +919,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     }\n \n   /**\n-   *  @brief  Facet for formatting data for money amounts.\n+   *  @brief  Primary class template moneypunct.\n+   *  @ingroup locales\n    *\n    *  This facet encapsulates the punctuation, grouping and other formatting\n    *  features of money amount string representations.\n@@ -1343,7 +1348,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n _GLIBCXX_BEGIN_LDBL_NAMESPACE\n \n   /**\n-   *  @brief  Facet for parsing monetary amounts.\n+   *  @brief  Primary class template money_get.\n+   *  @ingroup locales\n    *\n    *  This facet encapsulates the code to parse and return a monetary\n    *  amount from a string.\n@@ -1493,7 +1499,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n     locale::id money_get<_CharT, _InIter>::id;\n \n   /**\n-   *  @brief  Facet for outputting monetary amounts.\n+   *  @brief  Primary class template money_put.\n+   *  @ingroup locales\n    *\n    *  This facet encapsulates the code to format and output a monetary\n    *  amount.\n@@ -1650,14 +1657,16 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \n   /**\n    *  @brief  Messages facet base class providing catalog typedef.\n+   *  @ingroup locales\n    */\n   struct messages_base\n   {\n     typedef int catalog;\n   };\n \n   /**\n-   *  @brief  Facet for handling message catalogs\n+   *  @brief  Primary class template messages.\n+   *  @ingroup locales\n    *\n    *  This facet encapsulates the code to retrieve messages from\n    *  message catalogs.  The only thing defined by the standard for this facet\n@@ -1881,7 +1890,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n   template<typename _CharT>\n     locale::id messages<_CharT>::id;\n \n-  // Specializations for required instantiations.\n+  /// Specializations for required instantiations.\n   template<>\n     string\n     messages<char>::do_get(catalog, int, int, const string&) const;"}, {"sha": "c81e39b12ba86c0a836560b4b9a695000142c70f", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -1,7 +1,7 @@\n // Locale support -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2009\n+// 2006, 2007, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -45,6 +45,12 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /** \n+   *  @defgroup locales Locales\n+   *\n+   *  Classes and functions for internationalization and localization.\n+   */\n+\n   // 22.1.1 Locale\n   class locale;\n "}, {"sha": "dca953b49116ab2fb65e2d93d9d7eb0bc39688bc", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -49,10 +49,25 @@\n \n namespace __gnu_pbds\n {\n+  /** @defgroup pbds Policy-Based Data Structures\n+   *  @ingroup extensions\n+   *\n+   *  This is a library of policy-based elementary data structures:\n+   *  associative containers and priority queues. It is designed for\n+   *  high-performance, flexibility, semantic safety, and conformance\n+   *  to the corresponding containers in std (except for some points\n+   *  where it differs by design).\n+   *\n+   *  For details, see: \n+   *  http://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/index.html\n+   *\n+   *  @{\n+   */\n+ \n #define PB_DS_BASE_C_DEC \\\n   detail::container_base_dispatch<Key, Mapped, Tag, Policy_Tl, Allocator>::type\n \n-  // An abstract basic associative container.\n+  /// An abstract basic associative container.\n   template<typename Key, \n \t   typename Mapped, \n \t   typename Tag, \n@@ -115,7 +130,7 @@ namespace __gnu_pbds\n   container_base<Key, Mapped, Tag, typename __gnu_cxx::typelist::append< \\\n   typename __gnu_cxx::typelist::create4<Hash_Fn, Eq_Fn, Resize_Policy, detail::integral_constant<int, Store_Hash> >::type, Policy_TL>::type, Allocator>\n \n-  // An abstract basic hash-based associative container.\n+  /// An abstract basic hash-based associative container.\n   template<typename Key,\n \t   typename Mapped,\n \t   typename Hash_Fn,\n@@ -152,7 +167,7 @@ namespace __gnu_pbds\n \t\t   cc_hash_tag,\t\\\n \t  typename __gnu_cxx::typelist::create1<Comb_Hash_Fn>::type, Allocator>\n \n-  // A concrete collision-chaining hash-based associative container.\n+  /// A concrete collision-chaining hash-based associative container.\n   template<typename Key,\n \t   typename Mapped,\n \t   typename Hash_Fn = typename detail::default_hash_fn<Key>::type,\n@@ -289,7 +304,7 @@ namespace __gnu_pbds\n \t\t   gp_hash_tag, \\\n \t\t   typename __gnu_cxx::typelist::create2<Comb_Probe_Fn, Probe_Fn>::type, Allocator>\n \n-  // A concrete general-probing hash-based associative container.\n+  /// A concrete general-probing hash-based associative container.\n   template<typename Key,\n \t   typename Mapped,\n \t   typename Hash_Fn = typename detail::default_hash_fn<Key>::type,\n@@ -455,7 +470,7 @@ namespace __gnu_pbds\n #define PB_DS_BASE_C_DEC \\\n   container_base<Key, Mapped, Tag, Policy_Tl, Allocator>\n \n-  // An abstract basic tree-like (tree, trie) associative container.\n+  /// An abstract basic tree-like (tree, trie) associative container.\n   template<typename Key, typename Mapped, typename Tag, \n \t   typename Node_Update, typename Policy_Tl, typename Allocator>\n   class basic_tree : public PB_DS_BASE_C_DEC\n@@ -485,7 +500,7 @@ namespace __gnu_pbds\n   basic_tree<Key,Mapped,Tag,typename PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC::node_update, \\\n \t     typename __gnu_cxx::typelist::create2<Cmp_Fn, PB_DS_TREE_NODE_AND_IT_TRAITS_C_DEC >::type, Allocator>\n \n-  // A concrete basic tree-based associative container.\n+  /// A concrete basic tree-based associative container.\n   template<typename Key, typename Mapped, typename Cmp_Fn = std::less<Key>,\n \t   typename Tag = rb_tree_tag,\n \t   template<typename Const_Node_Iterator, typename Node_Iterator, typename Cmp_Fn_, typename Allocator_>\n@@ -556,7 +571,7 @@ namespace __gnu_pbds\n   basic_tree<Key,Mapped,Tag, typename PB_DS_TRIE_NODE_AND_ITS_TRAITS::node_update, \\\n \t     typename __gnu_cxx::typelist::create2<E_Access_Traits, PB_DS_TRIE_NODE_AND_ITS_TRAITS >::type, Allocator>\n \n-  // A concrete basic trie-based associative container.\n+  /// A concrete basic trie-based associative container.\n   template<typename Key,\n \t   typename Mapped,\n \t   typename E_Access_Traits = typename detail::default_trie_e_access_traits<Key>::type,\n@@ -629,7 +644,7 @@ namespace __gnu_pbds\n   container_base<Key, Mapped, list_update_tag, \\\n \t\t typename __gnu_cxx::typelist::create2<Eq_Fn, Update_Policy>::type, Allocator>\n \n-  // A list-update based associative container.\n+  /// A list-update based associative container.\n   template<typename Key,\n \t   typename Mapped,\n \t   class Eq_Fn = typename detail::default_eq_fn<Key>::type,\n@@ -678,6 +693,7 @@ namespace __gnu_pbds\n \n #undef PB_DS_BASE_C_DEC\n \n+  // @} group pbds\n } // namespace __gnu_pbds\n \n #endif "}, {"sha": "09c3c268de099d400502ca4c2b10ed7817f287b7", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -1,6 +1,7 @@\n // File descriptor layer for filebuf -*- C++ -*-\n \n-// Copyright (C) 2002, 2003, 2004, 2005, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004, 2005, 2009, 2010\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +38,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /**\n    *  @brief Provides a layer of compatibility for C/POSIX.\n+   *  @ingroup io\n    *\n    *  This GNU extension provides extensions for working with standard C\n    *  FILE*'s and POSIX file descriptors.  It must be instantiated by the"}, {"sha": "84a8c26f18dddeb9aba7ecac4635c5c2b725535b", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -43,7 +43,14 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-  /// class stdio_sync_filebuf.\n+  /**\n+   *  @brief Provides a layer of compatibility for C.\n+   *  @ingroup io\n+   *\n+   *  This GNU extension provides extensions for working with standard\n+   *  C FILE*'s.  It must be instantiated by the user with the type of\n+   *  character used in the file stream, e.g., stdio_filebuf<char>.\n+  */\n   template<typename _CharT, typename _Traits = std::char_traits<_CharT> >\n     class stdio_sync_filebuf : public std::basic_streambuf<_CharT, _Traits>\n     {"}, {"sha": "721af0084adaedaefe81140ddbbbadf982995538", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -41,10 +41,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   /**\n    *  @class __versa_string vstring.h\n-   *  @brief  Managing sequences of characters and character-like objects.\n+   *  @brief  Template class __versa_string. \n+   *  @ingroup extensions\n+   *\n+   *  Data structure managing sequences of characters and\n+   *  character-like objects. \n    */\n-\n-  // Template class __versa_string\n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   template <typename, typename, typename> class _Base>\n     class __versa_string"}, {"sha": "491e38151532a541734b897a1fddd2a23dc134da", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -90,9 +90,6 @@ namespace std\n \t      _Has_result_type_helper<typename remove_cv<_Tp>::type>::value>\n     { };\n \n-  /**\n-   *  \n-  */\n   /// If we have found a result_type, extract it.\n   template<bool _Has_result_type, typename _Functor>\n     struct _Maybe_get_result_type\n@@ -385,7 +382,11 @@ namespace std\n     : binary_function<const volatile _T1*, _T2, _Res>\n     { };\n \n-  /// reference_wrapper\n+  /**\n+   *  @brief Primary class template for reference_wrapper.\n+   *  @ingroup functors\n+   *  @{\n+   */\n   template<typename _Tp>\n     class reference_wrapper\n     : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>\n@@ -431,28 +432,32 @@ namespace std\n     };\n \n \n-  // Denotes a reference should be taken to a variable.\n+  /// Denotes a reference should be taken to a variable.\n   template<typename _Tp>\n     inline reference_wrapper<_Tp>\n     ref(_Tp& __t)\n     { return reference_wrapper<_Tp>(__t); }\n \n-  // Denotes a const reference should be taken to a variable.\n+  /// Denotes a const reference should be taken to a variable.\n   template<typename _Tp>\n     inline reference_wrapper<const _Tp>\n     cref(const _Tp& __t)\n     { return reference_wrapper<const _Tp>(__t); }\n \n+  /// Partial specialization.\n   template<typename _Tp>\n     inline reference_wrapper<_Tp>\n     ref(reference_wrapper<_Tp> __t)\n     { return ref(__t.get()); }\n \n+  /// Partial specialization.\n   template<typename _Tp>\n     inline reference_wrapper<const _Tp>\n     cref(reference_wrapper<_Tp> __t)\n     { return cref(__t.get()); }\n \n+  // @} group functors\n+\n   template<typename _Tp, bool>\n     struct _Mem_fn_const_or_non\n     {\n@@ -753,6 +758,7 @@ namespace std\n   /**\n    *  @brief Returns a function object that forwards to the member\n    *  pointer @a pm.\n+   *  @ingroup functors\n    */\n   template<typename _Tp, typename _Class>\n     inline _Mem_fn<_Tp _Class::*>\n@@ -765,6 +771,7 @@ namespace std\n    *  @brief Determines if the given type _Tp is a function object\n    *  should be treated as a subexpression when evaluating calls to\n    *  function objects returned by bind(). [TR1 3.6.1]\n+   *  @ingroup binders\n    */\n   template<typename _Tp>\n     struct is_bind_expression\n@@ -773,6 +780,7 @@ namespace std\n   /**\n    *  @brief Determines if the given type _Tp is a placeholder in a\n    *  bind() expression and, if so, which placeholder it is. [TR1 3.6.2]\n+   *  @ingroup binders\n    */\n   template<typename _Tp>\n     struct is_placeholder\n@@ -784,6 +792,7 @@ namespace std\n \n   /** @namespace std::placeholders\n    *  @brief ISO C++ 0x entities sub namespace for functional.\n+   *  @ingroup binders\n    *\n    *  Define a large number of placeholders. There is no way to\n    *  simplify this with variadic templates, because we're introducing\n@@ -828,6 +837,7 @@ namespace std\n   /**\n    *  Partial specialization of is_placeholder that provides the placeholder\n    *  number for the placeholder objects defined by libstdc++.\n+   *  @ingroup binders\n    */\n   template<int _Num>\n     struct is_placeholder<_Placeholder<_Num> >\n@@ -1335,17 +1345,26 @@ namespace std\n         }\n     };\n \n-  /// Class template _Bind is always a bind expression.\n+  /**\n+   *  @brief Class template _Bind is always a bind expression.\n+   *  @ingroup binders\n+   */\n   template<typename _Signature>\n     struct is_bind_expression<_Bind<_Signature> >\n     : public true_type { };\n \n-  /// Class template _Bind_result is always a bind expression.\n+  /**\n+   *  @brief Class template _Bind is always a bind expression.\n+   *  @ingroup binders\n+   */\n   template<typename _Result, typename _Signature>\n     struct is_bind_expression<_Bind_result<_Result, _Signature> >\n     : public true_type { };\n \n-  /// bind\n+  /**\n+   *  @brief Function template for std::bind.\n+   *  @ingroup binders\n+   */\n   template<typename _Functor, typename... _ArgTypes>\n     inline\n     _Bind<typename _Maybe_wrap_member_pointer<_Functor>::type(_ArgTypes...)>\n@@ -1358,6 +1377,10 @@ namespace std\n                            std::forward<_ArgTypes>(__args)...);\n     } \n \n+  /**\n+   *  @brief Function template for std::bind.\n+   *  @ingroup binders\n+   */\n   template<typename _Result, typename _Functor, typename... _ArgTypes>\n     inline\n     _Bind_result<_Result,\n@@ -1766,7 +1789,12 @@ namespace std\n       }\n     };\n \n-  /// class function\n+  /**\n+   *  @brief Primary class template for std::function.\n+   *  @ingroup functors\n+   *\n+   *  Polymorphic function wrapper.\n+   */\n   template<typename _Res, typename... _ArgTypes>\n     class function<_Res(_ArgTypes...)>\n     : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,\n@@ -2033,6 +2061,7 @@ namespace std\n       _Invoker_type _M_invoker;\n   };\n \n+  // Out-of-line member definitions.\n   template<typename _Res, typename... _ArgTypes>\n     function<_Res(_ArgTypes...)>::\n     function(const function& __x)"}, {"sha": "178a1e74f520ca6fa5d7f077fd340f45356c3e83", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -52,6 +52,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /**\n    *  @brief  The actual work of input and output (interface).\n+   *  @ingroup io\n    *\n    *  This is a base class.  Derived stream buffers each control a\n    *  pair of character sequences:  one for input, and one for output."}, {"sha": "f569a7bce82d82c4eae08be9a8fd99ac12c124c1", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software\n // Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,5 +34,5 @@ void test01()\n }\n // { dg-error \"synthesized\" \"\" { target *-*-* } 33 } \n // { dg-error \"within this context\" \"\" { target *-*-* } 26 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 793 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 788 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "012482299e8c70ed3f4d56106115000e7ea663b4", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=0eb95b0d69b0f1cb862fe9f0021282a273c1ddd7", "patch": "@@ -34,5 +34,5 @@ void test02()\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 27 } \n // { dg-error \"synthesized\" \"\" { target *-*-* } 33 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 790 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 785 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}]}