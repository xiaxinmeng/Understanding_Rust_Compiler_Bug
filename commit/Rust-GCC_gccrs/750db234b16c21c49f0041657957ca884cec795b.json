{"sha": "750db234b16c21c49f0041657957ca884cec795b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwZGIyMzRiMTZjMjFjNDlmMDA0MTY1Nzk1N2NhODg0Y2VjNzk1Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-09-06T18:32:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-09-06T18:32:08Z"}, "message": "configure.target: Use cpu_include_dir=\"config/cpu/sparc\" for all sparc targets.\n\n\t* configure.target: Use cpu_include_dir=\"config/cpu/sparc\" for all\n\tsparc targets.\n\t* config/cpu/sparc/bits/atomicity.h: New file.\n\t* config/cpu/sparc/sparc32/bits/atomicity.h: Removed.\n\t* config/cpu/sparc/sparc64/bits/atomicity.h: Removed.\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r56897.2", "tree": {"sha": "08745201c8cf24613acb6c3e0353f880cf50613b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08745201c8cf24613acb6c3e0353f880cf50613b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/750db234b16c21c49f0041657957ca884cec795b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750db234b16c21c49f0041657957ca884cec795b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/750db234b16c21c49f0041657957ca884cec795b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750db234b16c21c49f0041657957ca884cec795b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fe707cc0eeb5fb375ba76f3c1d9c7f6de4e9a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe707cc0eeb5fb375ba76f3c1d9c7f6de4e9a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe707cc0eeb5fb375ba76f3c1d9c7f6de4e9a98"}], "stats": {"total": 125, "additions": 53, "deletions": 72}, "files": [{"sha": "693edc82834301d90086e3361f40cfaa265ef9e7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750db234b16c21c49f0041657957ca884cec795b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750db234b16c21c49f0041657957ca884cec795b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=750db234b16c21c49f0041657957ca884cec795b", "patch": "@@ -1,3 +1,11 @@\n+2002-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.target: Use cpu_include_dir=\"config/cpu/sparc\" for all\n+\tsparc targets.\n+\t* config/cpu/sparc/atomicity.h: New file.\n+\t* config/cpu/sparc/sparc32/atomicity.h: Removed.\n+\t* config/cpu/sparc/sparc64/atomicity.h: Removed.\n+\n 2002-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/os/gnu-linux/ctype_noninline.h"}, {"sha": "23804db00b7ff91386765b631885810110772775", "filename": "libstdc++-v3/config/cpu/sparc/atomicity.h", "status": "renamed", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/750db234b16c21c49f0041657957ca884cec795b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/750db234b16c21c49f0041657957ca884cec795b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fatomicity.h?ref=750db234b16c21c49f0041657957ca884cec795b", "patch": "@@ -1,6 +1,6 @@\n-// Low-level functions for atomic operations: Sparc32 version  -*- C++ -*-\n+// Low-level functions for atomic operations: Sparc version  -*- C++ -*-\n \n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,6 +30,47 @@\n #ifndef _BITS_ATOMICITY_H\n #define _BITS_ATOMICITY_H\t1\n \n+#ifdef __arch64__\n+\n+typedef long _Atomic_word;\n+\n+static inline _Atomic_word\n+__attribute__ ((__unused__))\n+__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n+{\n+  _Atomic_word __tmp1, __tmp2;\n+\n+  __asm__ __volatile__(\"1:\tldx\t[%2], %0\\n\\t\"\n+\t\t       \"\tadd\t%0, %3, %1\\n\\t\"\n+\t\t       \"\tcasx\t[%2], %0, %1\\n\\t\"\n+\t\t       \"\tsub\t%0, %1, %0\\n\\t\"\n+\t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n+\t\t       \"\t nop\"\n+\t\t       : \"=&r\" (__tmp1), \"=&r\" (__tmp2)\n+\t\t       : \"r\" (__mem), \"r\" (__val)\n+\t\t       : \"memory\");\n+  return __tmp2;\n+}\n+\n+static inline void\n+__attribute__ ((__unused__))\n+__atomic_add (volatile _Atomic_word* __mem, int __val)\n+{\n+  _Atomic_word __tmp1, __tmp2;\n+\n+  __asm__ __volatile__(\"1:\tldx\t[%2], %0\\n\\t\"\n+\t\t       \"\tadd\t%0, %3, %1\\n\\t\"\n+\t\t       \"\tcasx\t[%2], %0, %1\\n\\t\"\n+\t\t       \"\tsub\t%0, %1, %0\\n\\t\"\n+\t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n+\t\t       \"\t nop\"\n+\t\t       : \"=&r\" (__tmp1), \"=&r\" (__tmp2)\n+\t\t       : \"r\" (__mem), \"r\" (__val)\n+\t\t       : \"memory\");\n+}\n+\n+#else /* __arch32__ */\n+\n typedef int _Atomic_word;\n \n template <int __inst>\n@@ -85,4 +126,6 @@ __atomic_add (volatile _Atomic_word* __mem, int __val)\n \t\t       : \"memory\");\n }\n \n+#endif /* __arch32__ */\n+\n #endif /* atomicity.h */", "previous_filename": "libstdc++-v3/config/cpu/sparc/sparc32/atomicity.h"}, {"sha": "e13ca82fad2ddea7783d7934e0da38bc1bf937fc", "filename": "libstdc++-v3/config/cpu/sparc/sparc64/atomicity.h", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe707cc0eeb5fb375ba76f3c1d9c7f6de4e9a98/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc64%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe707cc0eeb5fb375ba76f3c1d9c7f6de4e9a98/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc64%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fsparc%2Fsparc64%2Fatomicity.h?ref=0fe707cc0eeb5fb375ba76f3c1d9c7f6de4e9a98", "patch": "@@ -1,70 +0,0 @@\n-// Low-level functions for atomic operations: Sparc64 version  -*- C++ -*-\n-\n-// Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#ifndef _BITS_ATOMICITY_H\n-#define _BITS_ATOMICITY_H\t1\n-\n-typedef long _Atomic_word;\n-\n-static inline _Atomic_word\n-__attribute__ ((__unused__))\n-__exchange_and_add (volatile _Atomic_word *__mem, int __val)\n-{\n-  _Atomic_word __tmp1, __tmp2;\n-\n-  __asm__ __volatile__(\"1:\tldx\t[%2], %0\\n\\t\"\n-\t\t       \"\tadd\t%0, %3, %1\\n\\t\"\n-\t\t       \"\tcasx\t[%2], %0, %1\\n\\t\"\n-\t\t       \"\tsub\t%0, %1, %0\\n\\t\"\n-\t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n-\t\t       \"\t nop\"\n-\t\t       : \"=&r\" (__tmp1), \"=&r\" (__tmp2)\n-\t\t       : \"r\" (__mem), \"r\" (__val)\n-\t\t       : \"memory\");\n-  return __tmp2;\n-}\n-\n-static inline void\n-__attribute__ ((__unused__))\n-__atomic_add (volatile _Atomic_word* __mem, int __val)\n-{\n-  _Atomic_word __tmp1, __tmp2;\n-\n-  __asm__ __volatile__(\"1:\tldx\t[%2], %0\\n\\t\"\n-\t\t       \"\tadd\t%0, %3, %1\\n\\t\"\n-\t\t       \"\tcasx\t[%2], %0, %1\\n\\t\"\n-\t\t       \"\tsub\t%0, %1, %0\\n\\t\"\n-\t\t       \"\tbrnz,pn\t%0, 1b\\n\\t\"\n-\t\t       \"\t nop\"\n-\t\t       : \"=&r\" (__tmp1), \"=&r\" (__tmp2)\n-\t\t       : \"r\" (__mem), \"r\" (__val)\n-\t\t       : \"memory\");\n-}\n-\n-#endif /* atomicity.h */"}]}