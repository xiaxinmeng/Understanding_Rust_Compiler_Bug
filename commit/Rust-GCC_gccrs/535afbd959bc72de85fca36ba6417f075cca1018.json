{"sha": "535afbd959bc72de85fca36ba6417f075cca1018", "node_id": "C_kwDOANBUbNoAKDUzNWFmYmQ5NTliYzcyZGU4NWZjYTM2YmE2NDE3ZjA3NWNjYTEwMTg", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-11T14:11:25Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-12T14:37:27Z"}, "message": "OpenACC 'kernels' decomposition: wrong-code cases unless manually making certain variables addressable [PR104892]\n\nDocument a few examples of the status quo.\n\n\tPR middle-end/104892\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c: Point\n\tto PR104892.\n\t* testsuite/libgomp.oacc-c-c++-common/default-1.c: Likewise,\n\tenable '--param=openacc-kernels=decompose' and adjust.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-reduction-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-reduction-1.f90:\n\tLikewise.", "tree": {"sha": "c90f2af7be5cb307c71512f66c9c3fb77fcb1154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c90f2af7be5cb307c71512f66c9c3fb77fcb1154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/535afbd959bc72de85fca36ba6417f075cca1018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535afbd959bc72de85fca36ba6417f075cca1018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535afbd959bc72de85fca36ba6417f075cca1018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535afbd959bc72de85fca36ba6417f075cca1018/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e53fa7bb2ae9fe1152c27e423be9e261da82ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e53fa7bb2ae9fe1152c27e423be9e261da82ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e53fa7bb2ae9fe1152c27e423be9e261da82ddc"}], "stats": {"total": 75, "additions": 59, "deletions": 16}, "files": [{"sha": "fed65c8dccc81dbd8d45a35887cd5a246b96130c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/default-1.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdefault-1.c?ref=535afbd959bc72de85fca36ba6417f075cca1018", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-fopt-info-all-omp\" }\n    { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */\n \n@@ -63,6 +65,8 @@ int test_parallel ()\n int test_kernels ()\n {\n   int val = 2;\n+  /*TODO <https://gcc.gnu.org/PR104892> */\n+  (volatile int *) &val;\n   int ary[32];\n   int ondev = 0;\n \n@@ -71,12 +75,18 @@ int test_kernels ()\n \n   /* val defaults to copy, ary defaults to copy.  */\n #pragma acc kernels copy(ondev) /* { dg-line l_compute[incr c_compute] } */\n-  /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'ondev\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'val\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     ondev = acc_on_device (acc_device_not_host);\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { c++ && { ! __OPTIMIZE__ } } } .-1 }\n+       ..., as without optimizations, we're not inlining the C++ 'acc_on_device' wrapper.  */\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n     for (unsigned i = 0; i < 32; i++)\n       {\n \tary[i] = val;"}, {"sha": "3db59e8a75c85613fd41bcae3d0ff0d0c53ab06e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c?ref=535afbd959bc72de85fca36ba6417f075cca1018", "patch": "@@ -29,12 +29,12 @@ static int g2;\n static void f1 ()\n {\n   int a = 0;\n-  /*TODO Without making 'a' addressable, for GCN offloading we will not see the expected value copied out.  (But it does work for nvptx offloading, strange...)  */\n+  /*TODO <https://gcc.gnu.org/PR104892> */\n   (volatile int *) &a;\n #define N 123\n   int b[N] = { 0 };\n   unsigned long long f1;\n-  /*TODO See above.  */\n+  /*TODO <https://gcc.gnu.org/PR104892> */\n   (volatile void *) &f1;\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */"}, {"sha": "e7b2817a3915dcebfeff6f03d92c07c6f3708fe3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-reduction-1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c?ref=535afbd959bc72de85fca36ba6417f075cca1018", "patch": "@@ -1,6 +1,8 @@\n /* Verify that a simple, explicit acc loop reduction works inside\n  a kernels region.  */\n \n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-fopt-info-all-omp\" }\n    { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */\n \n@@ -17,12 +19,16 @@ int\n main ()\n {\n   int i, red = 0;\n+  /*TODO <https://gcc.gnu.org/PR104892> */\n+  (volatile int *) &red;\n \n #pragma acc kernels /* { dg-line l_compute1 } */\n-  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute1 } */\n+  /* { dg-note {variable 'red\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 } */\n   {\n #pragma acc loop reduction (+:red) /* { dg-line l_loop_i1 } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i1 } */\n     /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i1 } */\n   for (i = 0; i < N; i++)\n     red++;\n   }"}, {"sha": "75e8cb510ccd6ece73ca3b3590fa339d49cfb23d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=535afbd959bc72de85fca36ba6417f075cca1018", "patch": "@@ -1,6 +1,8 @@\n /* OpenACC parallelism dimensions clauses: num_gangs, num_workers,\n    vector_length.  */\n \n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-fopt-info-all-omp\" }\n    { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */\n \n@@ -640,20 +642,26 @@ int main ()\n      kernels.  */\n   {\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n+    /*TODO <https://gcc.gnu.org/PR104892> */\n+    (volatile int *) &gangs_min, &gangs_max, &workers_min, &workers_max, &vectors_min, &vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'gangs_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'workers_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'vectors_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n     {\n-      /* This is to make the OpenACC kernels construct unparallelizable.  */\n-      asm volatile (\"\" : : : \"memory\");\n-\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */ \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+      /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n       for (int i = 100; i > -100; --i)\n \t{\n+\t  /* This is to make the loop unparallelizable.  */\n+\t  asm volatile (\"\" : : : \"memory\");\n+\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n \t  vectors_min = vectors_max = acc_vector ();\n@@ -674,23 +682,29 @@ int main ()\n #define WORKERS 5\n #define VECTORS 13\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n+    /*TODO <https://gcc.gnu.org/PR104892> */\n+    (volatile int *) &gangs_min, &gangs_max, &workers_min, &workers_max, &vectors_min, &vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */ \\\n   num_gangs (gangs) \\\n   num_workers (WORKERS) \\\n   vector_length (VECTORS)\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n-    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'gangs_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'workers_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'vectors_max\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n     {\n-      /* This is to make the OpenACC kernels construct unparallelizable.  */\n-      asm volatile (\"\" : : : \"memory\");\n-\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */ \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n+      /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n       for (int i = 100; i > -100; --i)\n \t{\n+\t  /* This is to make the loop unparallelizable.  */\n+\t  asm volatile (\"\" : : : \"memory\");\n+\n \t  gangs_min = gangs_max = acc_gang ();\n \t  workers_min = workers_max = acc_worker ();\n \t  vectors_min = vectors_max = acc_vector ();"}, {"sha": "89bae49c94c35052852e90cf1a142fdb9681ea20", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-reduction-1.f90", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/535afbd959bc72de85fca36ba6417f075cca1018/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90?ref=535afbd959bc72de85fca36ba6417f075cca1018", "patch": "@@ -2,6 +2,8 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"--param=openacc-kernels=decompose\" }\n+\n ! { dg-additional-options \"-fopt-info-all-omp\" }\n ! { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */\n \n@@ -13,17 +15,28 @@\n program reduction\n   integer, parameter     :: n = 20\n   integer                :: i, red\n+  !TODO <https://gcc.gnu.org/PR104892>\n+  call make_addressable (red)\n \n   red = 0\n \n   !$acc kernels ! { dg-line l_compute1 } */\n-  ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute1 }\n+  ! { dg-note {variable 'red\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute1 }\n   !$acc loop reduction (+:red) ! { dg-line l_loop_i1 }\n+  ! { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i1 }\n   ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i1 }\n+  ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i1 }\n   do i = 1, n\n      red = red + 1\n   end do\n   !$acc end kernels\n \n   if (red .ne. n) stop 1\n+\n+contains\n+\n+  subroutine make_addressable (v)\n+    integer :: v ! by reference\n+  end subroutine make_addressable\n+\n end program reduction"}]}