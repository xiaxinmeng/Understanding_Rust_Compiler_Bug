{"sha": "6de5f432f1e671c985b02a29bea02eb15e7553cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlNWY0MzJmMWU2NzFjOTg1YjAyYTI5YmVhMDJlYjE1ZTc1NTNjYw==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2006-06-23T12:14:44Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2006-06-23T12:14:44Z"}, "message": "java-tree.h (update_aliases): Remove\n\n2006-06-21  Andrew Haley  <aph@redhat.com>\n\n        * java-tree.h (update_aliases): Remove\n        * expr.c (expand_iinc): Remove call to update_aliases().\n        (STORE_INTERNAL): Likewise.\n        * decl.c (update_aliases, initialize_local_variable) \n        (maybe_pushlevels): Set DECL_VALUE_EXPR for debugging decls.\n\nFrom-SVN: r114931", "tree": {"sha": "9ca7264cd13ebb0aa80f3806562412371dca2e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca7264cd13ebb0aa80f3806562412371dca2e44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6de5f432f1e671c985b02a29bea02eb15e7553cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de5f432f1e671c985b02a29bea02eb15e7553cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de5f432f1e671c985b02a29bea02eb15e7553cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de5f432f1e671c985b02a29bea02eb15e7553cc/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "410ed785dd9560b052318fe9bd4f41cdc12ef7ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410ed785dd9560b052318fe9bd4f41cdc12ef7ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410ed785dd9560b052318fe9bd4f41cdc12ef7ed"}], "stats": {"total": 108, "additions": 17, "deletions": 91}, "files": [{"sha": "9a116078bc6d48cccf7c81a46f3e4d698874b018", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de5f432f1e671c985b02a29bea02eb15e7553cc/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de5f432f1e671c985b02a29bea02eb15e7553cc/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6de5f432f1e671c985b02a29bea02eb15e7553cc", "patch": "@@ -1,3 +1,11 @@\n+2006-06-21  Andrew Haley  <aph@redhat.com>\n+\n+\t* java-tree.h (update_aliases): Remove\n+\t* expr.c (expand_iinc): Remove call to update_aliases().\n+\t(STORE_INTERNAL): Likewise.\n+\t* decl.c (update_aliases, initialize_local_variable) \n+\t(maybe_pushlevels): Set DECL_VALUE_EXPR for debugging decls.\n+\n 2006-06-19  Andrew Haley  <aph@redhat.com>\n \n         PR java/1305"}, {"sha": "8497fbf787bc903dcefa0e0a1e01b011e263c9f7", "filename": "gcc/java/decl.c", "status": "modified", "additions": 9, "deletions": 88, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de5f432f1e671c985b02a29bea02eb15e7553cc/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de5f432f1e671c985b02a29bea02eb15e7553cc/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=6de5f432f1e671c985b02a29bea02eb15e7553cc", "patch": "@@ -160,46 +160,6 @@ debug_variable_p (tree decl)\n   return true;\n }\n  \n-/* Copy the value in decl into every live alias in the same local\n-   variable slot.  Some of these will be dead stores removed by the\n-   optimizer.  */\n-\n-void \n-update_aliases (tree decl, int index, int pc)\n-{\n-  tree decl_type = TREE_TYPE (decl);\n-  tree tmp;\n-\n-  gcc_assert (! debug_variable_p (decl));\n-\n-  for (tmp = TREE_VEC_ELT (decl_map, index); \n-       tmp != NULL_TREE; \n-       tmp = DECL_LOCAL_SLOT_CHAIN (tmp))\n-    {\n-      tree tmp_type = TREE_TYPE (tmp);\n-      if (tmp != decl\n-\t  && LOCAL_SLOT_P (tmp) == 0\n-\t  && (pc == -1\n-\t      || (pc >= DECL_LOCAL_START_PC (tmp)\n-\t\t  && pc < DECL_LOCAL_END_PC (tmp)))\n-\t  /* This test is < (rather than <=) because there's no point\n-\t     updating an alias that's about to die at the end of this\n-\t     instruction.  */\n-\t  && (tmp_type == decl_type\n-\t      || (INTEGRAL_TYPE_P (tmp_type)\n-\t\t  && INTEGRAL_TYPE_P (decl_type)\n-\t\t  && TYPE_PRECISION (decl_type) <= 32\n-\t\t  && TYPE_PRECISION (tmp_type) <= 32)\n-\t      || (TREE_CODE (tmp_type) == POINTER_TYPE\n-\t\t  && TREE_CODE (decl_type) == POINTER_TYPE)))\n-\t{\n-\t  tree src = build1 (NOP_EXPR, tmp_type, decl);\n-\t  gcc_assert (! LOCAL_VAR_OUT_OF_SCOPE_P (tmp));\n-\t  java_add_stmt (build2 (MODIFY_EXPR, tmp_type, tmp, src));\n-\t}\n-    }\n-}\n-\n static tree\n push_jvm_slot (int index, tree decl)\n {\n@@ -220,52 +180,6 @@ push_jvm_slot (int index, tree decl)\n   return decl;\n }\n \n-/*  At the point of its creation a local variable decl inherits\n-    whatever is already in the same slot.  In the case of a local\n-    variable that is declared but unused, we won't find anything.  */\n-\n-static void\n-initialize_local_variable (tree decl, int index)\n-{\n-  tree decl_type = TREE_TYPE (decl);\n-  if (TREE_CODE (decl_type) == POINTER_TYPE)\n-    {\n-      tree tmp = TREE_VEC_ELT (base_decl_map, index);\n-\n-      if (tmp)\n-        {\n-\t  /* At the point of its creation this decl inherits whatever\n-\t     is in the slot.  */\n-\t  tree src = build1 (NOP_EXPR, decl_type, tmp);\n-\t  java_add_stmt (build2 (MODIFY_EXPR, decl_type, decl, src));\t\n-\t}\n-    }\n-  else\n-    {\n-      tree tmp;\n-  \n-      for (tmp = TREE_VEC_ELT (decl_map, index); \n-\t   tmp != NULL_TREE; \n-\t   tmp = DECL_LOCAL_SLOT_CHAIN (tmp))\n-\t{\n-\t  tree tmp_type = TREE_TYPE (tmp);\n-\t  if (tmp != decl\n-\t      && ! debug_variable_p (tmp)\n-\t      && (tmp_type == decl_type\n-\t\t  || (INTEGRAL_TYPE_P (tmp_type)\n-\t\t      && INTEGRAL_TYPE_P (decl_type)\n-\t\t      && TYPE_PRECISION (decl_type) <= 32\n-\t\t      && TYPE_PRECISION (tmp_type) <= 32\n-\t\t      && TYPE_PRECISION (tmp_type)\n-\t\t\t >= TYPE_PRECISION (decl_type))))\n-\t    {\n-\t      java_add_stmt (build2 (MODIFY_EXPR, decl_type, decl, tmp));\t\n-\t      return;\n-\t    }\n-\t}  \n-    }\n-}\n-\n /* Find the best declaration based upon type.  If 'decl' fits 'type' better\n    than 'best', return 'decl'.  Otherwise return 'best'.  */\n \n@@ -1800,10 +1714,17 @@ maybe_pushlevels (int pc)\n       current_binding_level->names = NULL;\n       for ( ; decl != NULL_TREE; decl = next)\n \t{\n+\t  int index = DECL_LOCAL_SLOT_NUMBER (decl);\n+\t  tree base_decl;\n \t  next = TREE_CHAIN (decl);\n-\t  push_jvm_slot (DECL_LOCAL_SLOT_NUMBER (decl), decl);\n+\t  push_jvm_slot (index, decl);\n \t  pushdecl (decl);\n-\t  initialize_local_variable (decl, DECL_LOCAL_SLOT_NUMBER (decl));\n+\t  base_decl\n+\t    = find_local_variable (index, TREE_TYPE (decl), pc);\n+\t  if (TREE_CODE (TREE_TYPE (base_decl)) == POINTER_TYPE)\n+\t    base_decl = TREE_VEC_ELT (base_decl_map, index);\n+\t  SET_DECL_VALUE_EXPR (decl, base_decl);\n+\t  DECL_HAS_VALUE_EXPR_P (decl) = 1;\n \t}\n     }      \n "}, {"sha": "a64bda8ff02e6a28e21a98cc3c33eb1f13d8065e", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de5f432f1e671c985b02a29bea02eb15e7553cc/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de5f432f1e671c985b02a29bea02eb15e7553cc/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=6de5f432f1e671c985b02a29bea02eb15e7553cc", "patch": "@@ -1451,7 +1451,6 @@ expand_iinc (unsigned int local_var_index, int ival, int pc)\n   constant_value = build_int_cst (NULL_TREE, ival);\n   res = fold_build2 (PLUS_EXPR, int_type_node, local_var, constant_value);\n   java_add_stmt (build2 (MODIFY_EXPR, TREE_TYPE (local_var), local_var, res));\n-  update_aliases (local_var, local_var_index, pc);\n }\n \n \n@@ -3413,7 +3412,6 @@ process_jvm_instruction (int PC, const unsigned char* byte_ops,\n     decl = find_local_variable (index, type, oldpc);\t\t\\\n     set_local_type (index, type);\t\t\t\t\\\n     java_add_stmt (build2 (MODIFY_EXPR, type, decl, value));\t\\\n-    update_aliases (decl, index, PC);\t\t\t\t\\\n   }\n \n #define STORE(OPERAND_TYPE, OPERAND_VALUE) \\"}, {"sha": "f3478692d7016a0a95784c0c9b9f58e9af52797f", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de5f432f1e671c985b02a29bea02eb15e7553cc/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de5f432f1e671c985b02a29bea02eb15e7553cc/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=6de5f432f1e671c985b02a29bea02eb15e7553cc", "patch": "@@ -1221,7 +1221,6 @@ extern void set_java_signature (tree, tree);\n extern tree build_static_field_ref (tree);\n extern tree build_address_of (tree);\n extern tree find_local_variable (int index, tree type, int pc);\n-extern void update_aliases (tree decl, int index, int pc);\n extern tree find_stack_slot (int index, tree type);\n extern tree build_prim_array_type (tree, HOST_WIDE_INT);\n extern tree build_java_array_type (tree, HOST_WIDE_INT);"}]}