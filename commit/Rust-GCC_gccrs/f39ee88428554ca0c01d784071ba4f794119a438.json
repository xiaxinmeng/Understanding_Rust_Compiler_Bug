{"sha": "f39ee88428554ca0c01d784071ba4f794119a438", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5ZWU4ODQyODU1NGNhMGMwMWQ3ODQwNzFiYTRmNzk0MTE5YTQzOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-24T08:03:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-24T08:03:42Z"}, "message": "decl.c (pushdecl): Don't make local declarations of extern variables give the variable a...\n\n\t* decl.c (pushdecl): Don't make local declarations of extern\n\tvariables give the variable a DECL_CONTEXT for the function.\n\t(make_rtl_for_nonlocal_decl): Don't fuss with obstacks.  Simplify.\n\tDon't accidentally make RTL for local declarations.\n\t(emit_local_var): Handle declarations with asm-specifiers here.\n\nFrom-SVN: r29650", "tree": {"sha": "62ab6c893fe00e5e5c37b56aba255d2c1c2dec48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62ab6c893fe00e5e5c37b56aba255d2c1c2dec48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f39ee88428554ca0c01d784071ba4f794119a438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39ee88428554ca0c01d784071ba4f794119a438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39ee88428554ca0c01d784071ba4f794119a438", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39ee88428554ca0c01d784071ba4f794119a438/comments", "author": null, "committer": null, "parents": [{"sha": "d2cd3d9fca34e1097c737c0e875b64383beca6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2cd3d9fca34e1097c737c0e875b64383beca6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2cd3d9fca34e1097c737c0e875b64383beca6b0"}], "stats": {"total": 68, "additions": 48, "deletions": 20}, "files": [{"sha": "8caac2b2a3023887168a486909f71cba159739d2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39ee88428554ca0c01d784071ba4f794119a438/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39ee88428554ca0c01d784071ba4f794119a438/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f39ee88428554ca0c01d784071ba4f794119a438", "patch": "@@ -1,3 +1,11 @@\n+1999-09-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (pushdecl): Don't make local declarations of extern\n+\tvariables give the variable a DECL_CONTEXT for the function.\n+\t(make_rtl_for_nonlocal_decl): Don't fuss with obstacks.  Simplify.\n+\tDon't accidentally make RTL for local declarations.\n+\t(emit_local_var): Handle declarations with asm-specifiers here.\n+\t\n 1999-09-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* ir.texi: Improve documentation for TARGET_EXPRs.  Discuss"}, {"sha": "d4d7be622ca7425d264ac138cb92bf0dcd1f218e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39ee88428554ca0c01d784071ba4f794119a438/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39ee88428554ca0c01d784071ba4f794119a438/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f39ee88428554ca0c01d784071ba4f794119a438", "patch": "@@ -3666,7 +3666,11 @@ pushdecl (x)\n       if (current_function_decl && x != current_function_decl\n \t  /* A local declaration for a function doesn't constitute\n              nesting.  */\n-\t  && (TREE_CODE (x) != FUNCTION_DECL || DECL_INITIAL (x))\n+\t  && !(TREE_CODE (x) == FUNCTION_DECL && !DECL_INITIAL (x))\n+\t  /* A local declaration for an `extern' variable is in the\n+\t     scoped of the current namespace, not the current\n+\t     function.  */\n+\t  && !(TREE_CODE (x) == VAR_DECL && DECL_EXTERNAL (x))\n \t  /* Don't change DECL_CONTEXT of virtual methods.  */\n \t  && (TREE_CODE (x) != FUNCTION_DECL || !DECL_VIRTUAL_P (x))\n \t  && !DECL_CONTEXT (x))\n@@ -7369,25 +7373,27 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n \n   type = TREE_TYPE (decl);\n   toplev = toplevel_bindings_p ();\n-  push_obstacks_nochange ();\n-  if (TREE_STATIC (decl) \n-      && TYPE_NEEDS_DESTRUCTOR (type)\n-      && allocation_temporary_p ())\n-    end_temporary_allocation  ();\n \n-  if (TREE_CODE (decl) == VAR_DECL && DECL_VIRTUAL_P (decl))\n+  /* Handle non-variables up front.  */\n+  if (TREE_CODE (decl) != VAR_DECL)\n+    {\n+      rest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n+      return;\n+    }\n+\n+  /* Set the DECL_ASSEMBLER_NAME for the variable.  */\n+  if (asmspec)\n+    DECL_ASSEMBLER_NAME (decl) = get_identifier (asmspec);\n+\n+  if (DECL_VIRTUAL_P (decl))\n     make_decl_rtl (decl, NULL_PTR, toplev);\n-  else if (TREE_CODE (decl) == VAR_DECL\n-\t   && TREE_READONLY (decl)\n+  else if (TREE_READONLY (decl)\n \t   && DECL_INITIAL (decl) != NULL_TREE\n \t   && DECL_INITIAL (decl) != error_mark_node\n \t   && ! EMPTY_CONSTRUCTOR_P (DECL_INITIAL (decl)))\n     {\n       DECL_INITIAL (decl) = save_expr (DECL_INITIAL (decl));\n \n-      if (asmspec)\n-\tDECL_ASSEMBLER_NAME (decl) = get_identifier (asmspec);\n-\n       if (! toplev\n \t  && TREE_STATIC (decl)\n \t  && ! TREE_SIDE_EFFECTS (decl)\n@@ -7415,12 +7421,10 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n \t    }\n \t  make_decl_rtl (decl, asmspec, toplev);\n \t}\n-      else\n+      else if (toplev)\n \trest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n     }\n-  else if (TREE_CODE (decl) == VAR_DECL\n-\t   && DECL_LANG_SPECIFIC (decl)\n-\t   && DECL_IN_AGGR_P (decl))\n+  else if (DECL_LANG_SPECIFIC (decl) && DECL_IN_AGGR_P (decl))\n     {\n       my_friendly_assert (TREE_STATIC (decl), 19990828);\n \n@@ -7439,10 +7443,9 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n       else\n \trest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n     }\n-  else\n+  else if (TREE_CODE (CP_DECL_CONTEXT (decl)) == NAMESPACE_DECL\n+\t   || (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)))\n     rest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n-\n-  pop_obstacks ();\n }\n \n /* The old ARM scoping rules injected variables declared in the\n@@ -7587,7 +7590,16 @@ emit_local_var (decl)\n     my_friendly_assert (TREE_CODE (decl) == RESULT_DECL, \n \t\t\t19990828);\n   else\n-    expand_decl (decl);\n+    {\n+      if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n+\t/* The user must have specified an assembler name for this\n+\t   variable.  Set that up now.  */\n+\trest_of_decl_compilation \n+\t  (decl, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n+\t   /*top_level=*/0, /*at_end=*/0);\n+      else\n+\texpand_decl (decl);\n+    }\n \n   /* Actually do the initialization.  */\n   expand_start_target_temps ();"}, {"sha": "d86d30a74d1e6b2b1b33c20b70b81a5874dc2a3e", "filename": "gcc/testsuite/g++.old-deja/g++.ext/asmspec1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39ee88428554ca0c01d784071ba4f794119a438/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fasmspec1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39ee88428554ca0c01d784071ba4f794119a438/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fasmspec1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fasmspec1.C?ref=f39ee88428554ca0c01d784071ba4f794119a438", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link:\n+// Skip if not target: i?86-*-*\n+// Origin: Anthony Green  <green@cygnus.com>\n+\n+void foo ()\n+{ \n+  register const char *h asm(\"%esi\") = \"hey\"; \n+}"}]}