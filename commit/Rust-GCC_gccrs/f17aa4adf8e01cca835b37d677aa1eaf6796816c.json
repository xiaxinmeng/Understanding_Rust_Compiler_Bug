{"sha": "f17aa4adf8e01cca835b37d677aa1eaf6796816c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3YWE0YWRmOGUwMWNjYTgzNWIzN2Q2NzdhYTFlYWY2Nzk2ODE2Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-28T17:45:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-28T17:45:52Z"}, "message": "re PR target/46153 (ICE: in extract_insn, at recog.c:2110 (unrecognizable insn) with -ffloat-store and __builtin_ia32_movlhps)\n\n\tPR target/46153\n\t* config/i386/sse.md (sse_movhlps_exp): Use destination\n\treturned from ix86_fixup_binary_operands to expand insn.\n\t(sse_movlhps_exp): Ditto.\n\t(sse_loadhps_exp): Ditto.\n\t(sse_loadlps_exp): Ditto.\n\t(sse2_loadhpd_exp): Ditto.\n\t(sse2_loadlpd_exp): Ditto.\n\t(*avx_movhlps): Use ix86_binary_operator_ok in insn predicate.\n\t(sse_movhlps): Ditto.\n\t(*avx_movlhps): Ditto.\n\t(sse_movlhps): Ditto.\n\t(*avx_loadhps): Ditto.\n\t(sse_loadhps): Ditto.\n\t(*avx_loadhpd): Ditto.\n\t(sse_loadhpd): Ditto.\n\t(*avx_storelps): Prevent both operands in memory.\n\t(sse_storelps): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/46153\n\t* gcc.target/i386/pr46153.c: New test.\n\nFrom-SVN: r166031", "tree": {"sha": "6f5ed26288ca36b712bb5c85ba5ed3e04d95a332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f5ed26288ca36b712bb5c85ba5ed3e04d95a332"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f17aa4adf8e01cca835b37d677aa1eaf6796816c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17aa4adf8e01cca835b37d677aa1eaf6796816c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17aa4adf8e01cca835b37d677aa1eaf6796816c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17aa4adf8e01cca835b37d677aa1eaf6796816c/comments", "author": null, "committer": null, "parents": [{"sha": "fb7342fd6f834c6786278eeb9d99d704c2f6a0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb7342fd6f834c6786278eeb9d99d704c2f6a0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb7342fd6f834c6786278eeb9d99d704c2f6a0a1"}], "stats": {"total": 209, "additions": 148, "deletions": 61}, "files": [{"sha": "3a6a55795aa8b4fe56b0025196b59b61aaf14eba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17aa4adf8e01cca835b37d677aa1eaf6796816c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17aa4adf8e01cca835b37d677aa1eaf6796816c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f17aa4adf8e01cca835b37d677aa1eaf6796816c", "patch": "@@ -1,3 +1,24 @@\n+2010-10-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/46153\n+\t* config/i386/sse.md (sse_movhlps_exp): Use destination\n+\treturned from ix86_fixup_binary_operands to expand insn.\n+\t(sse_movlhps_exp): Ditto.\n+\t(sse_loadhps_exp): Ditto.\n+\t(sse_loadlps_exp): Ditto.\n+\t(sse2_loadhpd_exp): Ditto.\n+\t(sse2_loadlpd_exp): Ditto.\n+\t(*avx_movhlps): Use ix86_binary_operator_ok in insn predicate.\n+\t(sse_movhlps): Ditto.\n+\t(*avx_movlhps): Ditto.\n+\t(sse_movlhps): Ditto.\n+\t(*avx_loadhps): Ditto.\n+\t(sse_loadhps): Ditto.\n+\t(*avx_loadhpd): Ditto.\n+\t(sse_loadhpd): Ditto.\n+\t(*avx_storelps): Prevent both operands in memory.\n+\t(sse_storelps): Ditto.\n+\n 2010-10-28  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/arm/arm.c (const_ok_for_arm): Support 0xXY00XY00 pattern\n@@ -104,8 +125,7 @@\n \tcaller_pass_avx256_p based on argument type.\n \t(ix86_expand_epilogue): Emit vzeroupper if 256bit AVX register\n \tis used, but not returned by caller.\n-\t(ix86_expand_call): Emit vzeroupper if 256bit AVX register is\n-\tused.\n+\t(ix86_expand_call): Emit vzeroupper if 256bit AVX register is used.\n \t(ix86_local_alignment): Set use_avx256_p if 256bit AVX register\n \tis used.\n \t(ix86_minimum_alignment): Likewise.\n@@ -136,7 +156,7 @@\n \t* config/i386/t-mingw-w64 (SHLIB_LC): Likewise.\n \n 2010-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n-            Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n \n \t* config/i386/w32-unwind.h (i386_w32_fallback_frame_state): Fix regnum\n \tof EBP.  Do not restore reg #9.  Remove +1 adjustment to EIP and set\n@@ -165,11 +185,10 @@\n \tc_parser_objc_at_property, now\n \tc_parser_objc_at_property_declaration.\n \t(c_parser_objc_methodprotolist): Same change.\n-\t\n+\n 2010-10-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* config/i386/i386.md (split_stack_return): Put back\n-\tunspec_volatile.\n+\t* config/i386/i386.md (split_stack_return): Put back unspec_volatile.\n \n 2010-10-26  Jan Hubicka  <jh@suse.cz>\n \n@@ -180,7 +199,8 @@\n \n 2010-10-26  Jan Hubicka  <jh@suse.cz>\n \n-\t* cgraphbuild.c (build_cgraph_edges): Use ipa-reference to represent OMP.\n+\t* cgraphbuild.c (build_cgraph_edges): Use ipa-reference\n+\tto represent OMP.\n \n 2010-10-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -213,31 +233,33 @@\n \t(cgraph_can_remove_if_no_direct_calls_and_refs): Do not try\n \tto optimize away static ctors/dtors; it does not work on inline clones;\n \texternal functions can always be rmeoved.\n-\t(cgraph_will_be_removed_from_program_if_no_direct_calls): Assert on inline\n-\tclones; in LTO external functions always can go.\n+\t(cgraph_will_be_removed_from_program_if_no_direct_calls): Assert on\n+\tinline clones; in LTO external functions always can go.\n \t(cgraph_used_from_object_file_p): Handle EXTERNAL functions correctly.\n-\t(cgraph_mark_address_taken_node): Assert that we are not taking address of\n-\tinline clone.\n+\t(cgraph_mark_address_taken_node): Assert that we are not taking\n+\taddress of inline clone.\n \t(cgraph_can_remove_if_no_direct_calls_p): We always eventually remove\n \texternal functions.\n-\t* ipa-cp.c (ipcp_cloning_candidate_p): Do not clone functions with address taken.\n-\t(ipcp_initialize_node_lattices): Only local functions can be handled without cloning.\n+\t* ipa-cp.c (ipcp_cloning_candidate_p): Do not clone functions with\n+\taddress taken.\n+\t(ipcp_initialize_node_lattices): Only local functions can be\n+\thandled without cloning.\n \t* cgraph.h (cgraph_set_readonly_flag,\n \tcgraph_set_looping_const_or_pure_flag): Remove.\n \t(cgraph_set_const_flag): Declare.\n \t(cgraph_set_pure_flag): Update.\n \t* ipa-pure-const (propagate_pure_const, local_pure_const): Update\n \tflags setting code.\n-\t* ipa.c (cgraph_remove_unreachable_nodes): Fix formating; do not look at inline\n-\tclones; fix handling of external definitions.\n+\t* ipa.c (cgraph_remove_unreachable_nodes): Fix formating; do not\n+\tlook at inline clones; fix handling of external definitions.\n \t(cgraph_postorder): Do not look at inline clones in the first pass.\n \t(function_and_variable_visibility): Drop constructors/destructor\n \tflags at pure and const functions.\n \t* tree-profile.c (tree_profiling): Update.\n \t* ipa-inline.c (cgraph_clone_inlined_nodes): Always clone functions with\n \taddress taken; external functions do not account to whole program size.\n-\t(cgraph_decide_inlining): Likewise; do not try to inline functions already\n-\tinlined.\n+\t(cgraph_decide_inlining): Likewise; do not try to inline\n+\tfunctions already inlined.\n \n 2010-10-26  Jie Zhang  <jie@codesourcery.com>\n \n@@ -260,7 +282,7 @@\n \tPR target/44948\n \t* config/i386/i386.c (ix86_old_function_arg_boundary): New.\n \t(ix86_function_arg_boundary): Always align parameters on stack\n-\tin 64bit and align parameters with alignment >= 16byte on stack \n+\tin 64bit and align parameters with alignment >= 16byte on stack\n \tin 32bit.  Warn alignment change.\n \n 2010-10-26  Ian Lance Taylor  <iant@google.com>\n@@ -269,7 +291,7 @@\n \t* ipa-prop.c (ipa_modify_call_arguments): Correct type of MEM_REF\n \toffset.\n \n-2010-10-25  Rodrigo Rivas Costa <rodrigorivascosta@gmail.com>\n+2010-10-25  Rodrigo Rivas Costa  <rodrigorivascosta@gmail.com>\n \n \tImplement opaque-enum-specifiesr for C++0x\n \t* tree.h (ENUM_IS_OPAQUE): New.\n@@ -278,8 +300,7 @@\n 2010-10-26  Jie Zhang  <jie@codesourcery.com>\n \n \t* stor-layout.c (layout_decl): Use the field's type to\n-\tdetermine the mode and keep DECL_BIT_FIELD for a volatile\n-\tbit-field.\n+\tdetermine the mode and keep DECL_BIT_FIELD for a volatile bit-field.\n \t* config/arm/arm.c (arm_override_options): Default to\n \t-fstrict-volatile-bitfields.\n \n@@ -290,10 +311,6 @@\n \t* config/pdp11/pdp11.c: Use named constants instead of numbers.\n \t* config/pdp11.pdp11.h: Ditto.\n \n-2010-10-25  Changpeng Fang  <changpeng.fang@amd.com>\n-\n-\t* Changelog (2010-10-22  Changpeng Fang): Correct the Changelog entries.\n-\n 2010-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* configure.ac: Use $cpu_type instead of $target to define the nop.\n@@ -323,8 +340,7 @@\n \n 2010-10-24  Ian Lance Taylor  <iant@google.com>\n \n-\t* config/i386/i386.c (ix86_va_start): Remove extraneous blank\n-\tline.\n+\t* config/i386/i386.c (ix86_va_start): Remove extraneous blank line.\n \n 2010-10-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -338,8 +354,7 @@\n \t* gcc.c (n_switches_alloc_debug_check): New.\n \t(set_option_handlers): New.\n \t(process_command): Use set_option_handlers.\n-\t(do_self_spec): Pass spec-generated options through option\n-\thandlers.\n+\t(do_self_spec): Pass spec-generated options through option handlers.\n \t(main): Also save and restore n_switches_alloc when swapping\n \tswitch arrays.\n \n@@ -399,7 +414,7 @@\n \t(TARGET_SCHED_REORDER2): Define to mips_sched_reorder2\n \tinstead of mips_sched_reorder.\n \n-\tRevert\n+\tRevert:\n \t2008-09-09  Andrey Belevantsev  <abel@ispras.ru>\n \tPR rtl-optimization/37360\n \t* haifa-sched.c (max_issue): Do not assert that we never issue more\n@@ -432,8 +447,7 @@\n \t(m32c_addr_space_subset_p): New.\n \t(m32c_addr_space_convert): New.\n \t(conversions): Add __far operand patterns.\n-\t(m32c_prepare_move): Force constants into registers for __far\n-\tmoves.\n+\t(m32c_prepare_move): Force constants into registers for __far moves.\n \t(m32c_split_move): __far moves are always split.\n \t* config/m32c/addsub.md (addsi3_1): Support SImode symbols.\n \t* config/m32c/mov.md (mov<mode>_far_op1): New.\n@@ -442,8 +456,8 @@\n \t(movhi_op): Likewise.\n \t(movsi_splittable): Split A1A0 also.\n \n-2010-10-22  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n-\t    Andrew Pinski <pinskia@gmail.com>\n+2010-10-22  Artjoms Sinkarovs  <artyom.shinakroff@gmail.com>\n+\t    Andrew Pinski  <pinskia@gmail.com>\n \n \t* c-typeck.c (build_array_ref): Handle subscripting of vectors.\n \t* doc/extend.texi: New paragraph\n@@ -476,8 +490,7 @@\n \n \t* gcc.c (DEFAULT_SWITCH_CURTAILS_COMPILATION,\n \tSWITCH_CURTAILS_COMPILATION): Remove.\n-\t* doc/tm.texi.in (SWITCH_CURTAILS_COMPILATION): Remove\n-\tdocumentation.\n+\t* doc/tm.texi.in (SWITCH_CURTAILS_COMPILATION): Remove documentation.\n \t* doc/tm.texi: Regenerate.\n \t* system.h (SWITCH_CURTAILS_COMPILATION): Poison.\n "}, {"sha": "eefa745686ad5bcb87d129d5dc0877c2b5d009c2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 76, "deletions": 16, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17aa4adf8e01cca835b37d677aa1eaf6796816c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17aa4adf8e01cca835b37d677aa1eaf6796816c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f17aa4adf8e01cca835b37d677aa1eaf6796816c", "patch": "@@ -3244,7 +3244,17 @@\n \t\t     (const_int 2)\n \t\t     (const_int 3)])))]\n   \"TARGET_SSE\"\n-  \"ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\")\n+{\n+  rtx dst = ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\n+  \n+  emit_insn (gen_sse_movhlps (dst, operands[1], operands[2]));\n+\n+  /* Fix up the destination if needed.  */\n+  if (dst != operands[0])\n+    emit_move_insn (operands[0], dst);\n+\n+  DONE;\n+})\n \n (define_insn \"*avx_movhlps\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\"     \"=x,x,m\")\n@@ -3256,7 +3266,7 @@\n \t\t     (const_int 7)\n \t\t     (const_int 2)\n \t\t     (const_int 3)])))]\n-  \"TARGET_AVX && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"TARGET_AVX && ix86_binary_operator_ok (UNKNOWN, V4SFmode, operands)\"\n   \"@\n    vmovhlps\\t{%2, %1, %0|%0, %1, %2}\n    vmovlps\\t{%H2, %1, %0|%0, %1, %H2}\n@@ -3275,7 +3285,7 @@\n \t\t     (const_int 7)\n \t\t     (const_int 2)\n \t\t     (const_int 3)])))]\n-  \"TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"TARGET_SSE && ix86_binary_operator_ok (UNKNOWN, V4SFmode, operands)\"\n   \"@\n    movhlps\\t{%2, %0|%0, %2}\n    movlps\\t{%H2, %0|%0, %H2}\n@@ -3294,7 +3304,17 @@\n \t\t     (const_int 4)\n \t\t     (const_int 5)])))]\n   \"TARGET_SSE\"\n-  \"ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\")\n+{\n+  rtx dst = ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\n+  \n+  emit_insn (gen_sse_movlhps (dst, operands[1], operands[2]));\n+\n+  /* Fix up the destination if needed.  */\n+  if (dst != operands[0])\n+    emit_move_insn (operands[0], dst);\n+\n+  DONE;\n+})\n \n (define_insn \"*avx_movlhps\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\"     \"=x,x,o\")\n@@ -3701,7 +3721,17 @@\n \t    (parallel [(const_int 0) (const_int 1)]))\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE\"\n-  \"ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\")\n+{\n+  rtx dst = ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\n+  \n+  emit_insn (gen_sse_loadhps (dst, operands[1], operands[2]));\n+\n+  /* Fix up the destination if needed.  */\n+  if (dst != operands[0])\n+    emit_move_insn (operands[0], dst);\n+\n+  DONE;\n+})\n \n (define_insn \"*avx_loadhps\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=x,x,o\")\n@@ -3710,7 +3740,7 @@\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,x,0\")\n \t    (parallel [(const_int 0) (const_int 1)]))\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"m,x,x\")))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && ix86_binary_operator_ok (UNKNOWN, V4SFmode, operands)\"\n   \"@\n    vmovhps\\t{%2, %1, %0|%0, %1, %2}\n    vmovlhps\\t{%2, %1, %0|%0, %1, %2}\n@@ -3726,7 +3756,7 @@\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"0,0,0\")\n \t    (parallel [(const_int 0) (const_int 1)]))\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"m,x,x\")))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE && ix86_binary_operator_ok (UNKNOWN, V4SFmode, operands)\"\n   \"@\n    movhps\\t{%2, %0|%0, %2}\n    movlhps\\t{%2, %0|%0, %2}\n@@ -3739,7 +3769,7 @@\n \t(vec_select:V2SF\n \t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,x,m\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    vmovlps\\t{%1, %0|%0, %1}\n    vmovaps\\t{%1, %0|%0, %1}\n@@ -3753,7 +3783,7 @@\n \t(vec_select:V2SF\n \t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,x,m\")\n \t  (parallel [(const_int 0) (const_int 1)])))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    movlps\\t{%1, %0|%0, %1}\n    movaps\\t{%1, %0|%0, %1}\n@@ -3769,7 +3799,17 @@\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")\n \t    (parallel [(const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE\"\n-  \"ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\")\n+{\n+  rtx dst = ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\n+  \n+  emit_insn (gen_sse_loadlps (dst, operands[1], operands[2]));\n+\n+  /* Fix up the destination if needed.  */\n+  if (dst != operands[0])\n+    emit_move_insn (operands[0], dst);\n+\n+  DONE;\n+})\n \n (define_insn \"*avx_loadlps\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=x,x,m\")\n@@ -3778,7 +3818,7 @@\n \t  (vec_select:V2SF\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,x,0\")\n \t    (parallel [(const_int 2) (const_int 3)]))))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && ix86_binary_operator_ok (UNKNOWN, V4SFmode, operands)\"\n   \"@\n    shufps\\t{$0xe4, %1, %2, %0|%0, %2, %1, 0xe4}\n    vmovlps\\t{%2, %1, %0|%0, %1, %2}\n@@ -3795,7 +3835,7 @@\n \t  (vec_select:V2SF\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,0,0\")\n \t    (parallel [(const_int 2) (const_int 3)]))))]\n-  \"TARGET_SSE\"\n+  \"TARGET_SSE && ix86_binary_operator_ok (UNKNOWN, V4SFmode, operands)\"\n   \"@\n    shufps\\t{$0xe4, %1, %0|%0, %1, 0xe4}\n    movlps\\t{%2, %0|%0, %2}\n@@ -4898,7 +4938,17 @@\n \t    (parallel [(const_int 0)]))\n \t  (match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n+{\n+  rtx dst = ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\n+  \n+  emit_insn (gen_sse2_loadhpd (dst, operands[1], operands[2]));\n+\n+  /* Fix up the destination if needed.  */\n+  if (dst != operands[0])\n+    emit_move_insn (operands[0], dst);\n+\n+  DONE;\n+})\n \n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n@@ -4909,7 +4959,7 @@\n \t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" x,x,0,0,0\")\n \t    (parallel [(const_int 0)]))\n \t  (match_operand:DF 2 \"nonimmediate_operand\"     \" m,x,x,*f,r\")))]\n-  \"TARGET_AVX && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"TARGET_AVX && ix86_binary_operator_ok (UNKNOWN, V2DFmode, operands)\"\n   \"@\n    vmovhpd\\t{%2, %1, %0|%0, %1, %2}\n    vunpcklpd\\t{%2, %1, %0|%0, %1, %2}\n@@ -4927,7 +4977,7 @@\n \t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,0,x,0,0,0\")\n \t    (parallel [(const_int 0)]))\n \t  (match_operand:DF 2 \"nonimmediate_operand\"     \" m,x,0,x,*f,r\")))]\n-  \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"TARGET_SSE2 && ix86_binary_operator_ok (UNKNOWN, V2DFmode, operands)\"\n   \"@\n    movhpd\\t{%2, %0|%0, %2}\n    unpcklpd\\t{%2, %0|%0, %2}\n@@ -4957,7 +5007,17 @@\n \t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"\")\n \t    (parallel [(const_int 1)]))))]\n   \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n+{\n+  rtx dst = ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\n+  \n+  emit_insn (gen_sse2_loadlpd (dst, operands[1], operands[2]));\n+\n+  /* Fix up the destination if needed.  */\n+  if (dst != operands[0])\n+    emit_move_insn (operands[0], dst);\n+\n+  DONE;\n+})\n \n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c"}, {"sha": "b28c07803079a5b1b522b362519b1c5e6b7feb51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17aa4adf8e01cca835b37d677aa1eaf6796816c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17aa4adf8e01cca835b37d677aa1eaf6796816c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f17aa4adf8e01cca835b37d677aa1eaf6796816c", "patch": "@@ -1,3 +1,8 @@\n+2010-10-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/46153\n+\t* gcc.target/i386/pr46153.c: New test.\n+\n 2010-10-27  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-is_literal.C: New.\n@@ -33,16 +38,16 @@\n \tupdates in warning.\n \t* obj-c++.dg/property/property-neg-5.mm: Updated testcase for\n \tupdates in warning.\n-\t\n+\n 2010-10-27  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n-\t* objc.dg/property/at-property-1.m: New.\t\n+\t* objc.dg/property/at-property-1.m: New.\n \t* objc.dg/property/at-property-2.m: New.\n \t* objc.dg/property/at-property-3.m: New.\n \t* objc.dg/ivar-invalid-type-1.m: New.\n \t* obj-c++.dg/property/at-property-1.mm: New.\n \t* obj-c++.dg/property/at-property-2.mm: New.\n-\t* obj-c++.dg/property/at-property-3.mm: New.\t\n+\t* obj-c++.dg/property/at-property-3.mm: New.\n \t* obj-c++.dg/ivar-invalid-type-1.mm: New.\n \t* objc.dg/property/property-neg-6.m: Updated testcase for updates\n \tin error reporting.\n@@ -172,8 +177,8 @@\n \n 2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n-\tPR objc/45735\t\n-\t* obj-c.dg/pr45735.mm: New.\t\n+\tPR objc/45735\n+\t* obj-c.dg/pr45735.mm: New.\n \t* obj-c++.dg/pr45735.mm: New.\n \n 2010-10-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n@@ -194,10 +199,10 @@\n \tparameter attributes are now supported.\n \t* obj-c++.dg/attributes/method-attribute-2.m: Same change.\n \t* objc.dg/attributes/parameter-attribute-1.m: New test.\n-\t* objc.dg/attributes/parameter-attribute-2.m: New test.\t\n+\t* objc.dg/attributes/parameter-attribute-2.m: New test.\n \t* obj-c++.dg/attributes/parameter-attribute-1.m: New test.\n-\t* obj-c++.dg/attributes/parameter-attribute-2.m: New test.\t\n-\t\n+\t* obj-c++.dg/attributes/parameter-attribute-2.m: New test.\n+\n 2010-10-23  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tBased on the CFString implementation in FSF apple/trunk branch.\n@@ -213,7 +218,7 @@\n \t* objc.dg/demangle-1.m: New test.\n \t* obj-c++.dg/demangle-1.mm: New test.\n \t* obj-c++.dg/demangle-2.mm: New test.\n-\t* obj-c++.dg/demangle-3.mm: New test.\t\n+\t* obj-c++.dg/demangle-3.mm: New test.\n \n 2010-10-23  Ian Lance Taylor  <iant@google.com>\n "}, {"sha": "c6e0f52e894eb1515b4bec5df9d0a06fabfe62b8", "filename": "gcc/testsuite/gcc.target/i386/pr46153.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f17aa4adf8e01cca835b37d677aa1eaf6796816c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46153.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f17aa4adf8e01cca835b37d677aa1eaf6796816c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46153.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46153.c?ref=f17aa4adf8e01cca835b37d677aa1eaf6796816c", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse -ffloat-store\" } */\n+\n+typedef float v4sf __attribute__ ((__vector_size__ (16)));\n+\n+v4sf foo (v4sf a)\n+{\n+  return __builtin_ia32_movlhps (a, a);\n+}"}]}