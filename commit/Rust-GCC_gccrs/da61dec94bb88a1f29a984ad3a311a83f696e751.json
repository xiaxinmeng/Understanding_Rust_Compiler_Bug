{"sha": "da61dec94bb88a1f29a984ad3a311a83f696e751", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE2MWRlYzk0YmI4OGExZjI5YTk4NGFkM2EzMTFhODNmNjk2ZTc1MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-03T18:55:54Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-03T18:55:54Z"}, "message": "Use memset/memcmp instead of bzero/bcmp.\n\n\t* c-decl.c (duplicate_decls, copy_lang_decl), dwarfout.c\n\t(dwarfout_line), gcc.c (main, save_string), tree.c (init_obstacks,\n\tperm_calloc, get_identifier, maybe_get_identifier,\n\treal_value_from_int_cst, simple_cst_equal), varasm.c\n\t(assemble_name, assemble_real, immed_real_const_1,\n\tcompare_constant_1, decode_rtx_const, output_constant_pool): Use\n\tstrrchr () instead of rindex ().  Use memcmp () instead of bcmp\n\t().  Use memcpy () instead of bcopy ().  Use memset () instead of\n\tbzero ().\n\ncp:\n\t* tree.c (cp_tree_equal): Use memcmp () instead of bcmp ().\n\nFrom-SVN: r37228", "tree": {"sha": "4cb28c9deaf8fa480ffad4062b24bc022b087a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cb28c9deaf8fa480ffad4062b24bc022b087a25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da61dec94bb88a1f29a984ad3a311a83f696e751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da61dec94bb88a1f29a984ad3a311a83f696e751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da61dec94bb88a1f29a984ad3a311a83f696e751", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da61dec94bb88a1f29a984ad3a311a83f696e751/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def3263a3364034c8cd6cd865975529f9fd80e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def3263a3364034c8cd6cd865975529f9fd80e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def3263a3364034c8cd6cd865975529f9fd80e69"}], "stats": {"total": 84, "additions": 50, "deletions": 34}, "files": [{"sha": "c5fe3b611cc7bffba3414bf42feb0a8548611af4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da61dec94bb88a1f29a984ad3a311a83f696e751", "patch": "@@ -1,3 +1,15 @@\n+2000-11-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-decl.c (duplicate_decls, copy_lang_decl), dwarfout.c\n+\t(dwarfout_line), gcc.c (main, save_string), tree.c (init_obstacks,\n+\tperm_calloc, get_identifier, maybe_get_identifier,\n+\treal_value_from_int_cst, simple_cst_equal), varasm.c\n+\t(assemble_name, assemble_real, immed_real_const_1,\n+\tcompare_constant_1, decode_rtx_const, output_constant_pool): Use\n+\tstrrchr () instead of rindex ().  Use memcmp () instead of bcmp\n+\t().  Use memcpy () instead of bcopy ().  Use memset () instead of\n+\tbzero ().\n+\n 2000-11-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cppfiles.c (open_file): If already read, then don't reopen."}, {"sha": "2bbfd4613cea865700db86b8c7e9d0313524b5ef", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=da61dec94bb88a1f29a984ad3a311a83f696e751", "patch": "@@ -2054,9 +2054,9 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n   {\n     register unsigned olddecl_uid = DECL_UID (olddecl);\n \n-    bcopy ((char *) newdecl + sizeof (struct tree_common),\n-\t   (char *) olddecl + sizeof (struct tree_common),\n-\t   sizeof (struct tree_decl) - sizeof (struct tree_common));\n+    memcpy ((char *) olddecl + sizeof (struct tree_common),\n+\t    (char *) newdecl + sizeof (struct tree_common),\n+\t    sizeof (struct tree_decl) - sizeof (struct tree_common));\n     DECL_UID (olddecl) = olddecl_uid;\n   }\n \n@@ -7006,8 +7006,8 @@ copy_lang_decl (decl)\n     return;\n \n   ld = (struct lang_decl *) ggc_alloc (sizeof (struct lang_decl));\n-  bcopy ((char *)DECL_LANG_SPECIFIC (decl), (char *)ld, \n-\t sizeof (struct lang_decl));\n+  memcpy ((char *) ld, (char *) DECL_LANG_SPECIFIC (decl),\n+\t  sizeof (struct lang_decl));\n   DECL_LANG_SPECIFIC (decl) = ld;\n }\n "}, {"sha": "9075e79d1549a9bb710dac920a2c85a6f2f46978", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da61dec94bb88a1f29a984ad3a311a83f696e751", "patch": "@@ -1,3 +1,7 @@\n+2000-11-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* tree.c (cp_tree_equal): Use memcmp () instead of bcmp ().\n+\n 2000-11-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* dump.c (dequeue_and_dump), lex.c (interface_strcmp), method.c"}, {"sha": "2768ef8afd46b8eb5ab2fb2488d2b348022fa025", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=da61dec94bb88a1f29a984ad3a311a83f696e751", "patch": "@@ -1984,7 +1984,7 @@ cp_tree_equal (t1, t2)\n \n     case STRING_CST:\n       return TREE_STRING_LENGTH (t1) == TREE_STRING_LENGTH (t2)\n-\t&& !bcmp (TREE_STRING_POINTER (t1), TREE_STRING_POINTER (t2),\n+\t&& !memcmp (TREE_STRING_POINTER (t1), TREE_STRING_POINTER (t2),\n \t\t  TREE_STRING_LENGTH (t1));\n \n     case CONSTRUCTOR:"}, {"sha": "653f8dec197d2e4aa76829a37354e8c36bae4b83", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=da61dec94bb88a1f29a984ad3a311a83f696e751", "patch": "@@ -5535,7 +5535,7 @@ dwarfout_line (filename, line)\n         }\n \n       {\n-        register const char *tail = rindex (filename, '/');\n+        register const char *tail = strrchr (filename, '/');\n \n         if (tail != NULL)\n           filename = tail;"}, {"sha": "901a3cc5848a9cfe1e11c88f0f05b3decf1e826f", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=da61dec94bb88a1f29a984ad3a311a83f696e751", "patch": "@@ -5319,8 +5319,8 @@ main (argc, argv)\n      This means one element containing 0s, as a terminator.  */\n \n   compilers = (struct compiler *) xmalloc (sizeof default_compilers);\n-  bcopy ((char *) default_compilers, (char *) compilers,\n-\t sizeof default_compilers);\n+  memcpy ((char *) compilers, (char *) default_compilers,\n+\t  sizeof default_compilers);\n   n_compilers = n_default_compilers;\n \n   /* Read specs from a file if there is one.  */\n@@ -5737,7 +5737,7 @@ save_string (s, len)\n {\n   register char *result = xmalloc (len + 1);\n \n-  bcopy (s, result, len);\n+  memcpy (result, s, len);\n   result[len] = 0;\n   return result;\n }"}, {"sha": "c765dae5a88bf52e63597cb7e1c521ec7bb3b644", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=da61dec94bb88a1f29a984ad3a311a83f696e751", "patch": "@@ -205,7 +205,7 @@ init_obstacks ()\n   gcc_obstack_init (&permanent_obstack);\n \n   /* Init the hash table of identifiers.  */\n-  bzero ((char *) hash_table, sizeof hash_table);\n+  memset ((char *) hash_table, 0, sizeof hash_table);\n   ggc_add_tree_root (hash_table, sizeof hash_table / sizeof (tree));\n \n   /* Initialize the hash table of types.  */\n@@ -257,7 +257,7 @@ perm_calloc (nelem, size)\n      long size;\n {\n   char *rval = (char *) obstack_alloc (&permanent_obstack, nelem * size);\n-  bzero (rval, nelem * size);\n+  memset (rval, 0, nelem * size);\n   return rval;\n }\n \n@@ -591,7 +591,7 @@ get_identifier (text)\n   for (idp = hash_table[hi]; idp; idp = TREE_CHAIN (idp))\n     if (IDENTIFIER_LENGTH (idp) == len\n \t&& IDENTIFIER_POINTER (idp)[0] == text[0]\n-\t&& !bcmp (IDENTIFIER_POINTER (idp), text, len))\n+\t&& !memcmp (IDENTIFIER_POINTER (idp), text, len))\n       /* Return if found.  */\n       return idp;\n \n@@ -655,7 +655,7 @@ maybe_get_identifier (text)\n   for (idp = hash_table[hi]; idp; idp = TREE_CHAIN (idp))\n     if (IDENTIFIER_LENGTH (idp) == len\n \t&& IDENTIFIER_POINTER (idp)[0] == text[0]\n-\t&& !bcmp (IDENTIFIER_POINTER (idp), text, len))\n+\t&& !memcmp (IDENTIFIER_POINTER (idp), text, len))\n       return idp;\t\t/* <-- return if found */\n \n   return NULL_TREE;\n@@ -739,7 +739,7 @@ real_value_from_int_cst (type, i)\n #ifdef REAL_ARITHMETIC\n   /* Clear all bits of the real value type so that we can later do\n      bitwise comparisons to see if two values are the same.  */\n-  bzero ((char *) &d, sizeof d);\n+  memset ((char *) &d, 0, sizeof d);\n \n   if (! TREE_UNSIGNED (TREE_TYPE (i)))\n     REAL_VALUE_FROM_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i),\n@@ -3625,7 +3625,7 @@ simple_cst_equal (t1, t2)\n \n     case STRING_CST:\n       return (TREE_STRING_LENGTH (t1) == TREE_STRING_LENGTH (t2)\n-\t      && ! bcmp (TREE_STRING_POINTER (t1), TREE_STRING_POINTER (t2),\n+\t      && ! memcmp (TREE_STRING_POINTER (t1), TREE_STRING_POINTER (t2),\n \t\t\t TREE_STRING_LENGTH (t1)));\n \n     case CONSTRUCTOR:"}, {"sha": "c4229037ed1a08fa8317b0fba43fe7cb914f3eab", "filename": "gcc/varasm.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da61dec94bb88a1f29a984ad3a311a83f696e751/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=da61dec94bb88a1f29a984ad3a311a83f696e751", "patch": "@@ -1772,7 +1772,7 @@ assemble_name (file, name)\n \n   STRIP_NAME_ENCODING (real_name, name);\n   if (flag_prefix_function_name \n-      && ! bcmp (real_name, CHKR_PREFIX, CHKR_PREFIX_SIZE))\n+      && ! memcmp (real_name, CHKR_PREFIX, CHKR_PREFIX_SIZE))\n     real_name = real_name + CHKR_PREFIX_SIZE;\n \n   id = maybe_get_identifier (real_name);\n@@ -1972,7 +1972,7 @@ assemble_real (d, mode)\n     {\n       error (\"floating point trap outputting a constant\");\n #ifdef REAL_IS_NOT_DOUBLE\n-      bzero ((char *) &d, sizeof d);\n+      memset ((char *) &d, 0, sizeof d);\n       d = dconst0;\n #else\n       d = 0;\n@@ -2164,7 +2164,7 @@ immed_real_const_1 (d, mode)\n      If one is found, return it.  */\n   if (cfun != 0)\n     for (r = const_double_chain; r; r = CONST_DOUBLE_CHAIN (r))\n-      if (! bcmp ((char *) &CONST_DOUBLE_LOW (r), (char *) &u, sizeof u)\n+      if (! memcmp ((char *) &CONST_DOUBLE_LOW (r), (char *) &u, sizeof u)\n \t  && GET_MODE (r) == mode)\n \treturn r;\n \n@@ -2176,7 +2176,7 @@ immed_real_const_1 (d, mode)\n      freed memory.  */\n   r = rtx_alloc (CONST_DOUBLE);\n   PUT_MODE (r, mode);\n-  bcopy ((char *) &u, (char *) &CONST_DOUBLE_LOW (r), sizeof u);\n+  memcpy ((char *) &CONST_DOUBLE_LOW (r), (char *) &u, sizeof u);\n \n   /* If we aren't inside a function, don't put r on the\n      const_double_chain.  */\n@@ -2533,7 +2533,7 @@ compare_constant_1 (exp, p)\n \n       strp = (unsigned char *)TREE_STRING_POINTER (exp);\n       len = TREE_STRING_LENGTH (exp);\n-      if (bcmp ((char *) &TREE_STRING_LENGTH (exp), p,\n+      if (memcmp ((char *) &TREE_STRING_LENGTH (exp), p,\n \t\tsizeof TREE_STRING_LENGTH (exp)))\n \treturn 0;\n \n@@ -2555,7 +2555,7 @@ compare_constant_1 (exp, p)\n \n \t  get_set_constructor_bytes (exp, tmp, len);\n \t  strp = (unsigned char *) tmp;\n-\t  if (bcmp ((char *) &xlen, p, sizeof xlen))\n+\t  if (memcmp ((char *) &xlen, p, sizeof xlen))\n \t    return 0;\n \n \t  p += sizeof xlen;\n@@ -2573,7 +2573,7 @@ compare_constant_1 (exp, p)\n \t    if (TREE_PURPOSE (link))\n \t      have_purpose = 1;\n \n-\t  if (bcmp ((char *) &length, p, sizeof length))\n+\t  if (memcmp ((char *) &length, p, sizeof length))\n \t    return 0;\n \n \t  p += sizeof length;\n@@ -2587,20 +2587,20 @@ compare_constant_1 (exp, p)\n \t  else\n \t    type = 0;\n \n-\t  if (bcmp ((char *) &type, p, sizeof type))\n+\t  if (memcmp ((char *) &type, p, sizeof type))\n \t    return 0;\n \n \t  if (TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n \t    {\n-\t      if (bcmp ((char *) &mode, p, sizeof mode))\n+\t      if (memcmp ((char *) &mode, p, sizeof mode))\n \t\treturn 0;\n \n \t      p += sizeof mode;\n \t    }\n \n \t  p += sizeof type;\n \n-\t  if (bcmp ((char *) &have_purpose, p, sizeof have_purpose))\n+\t  if (memcmp ((char *) &have_purpose, p, sizeof have_purpose))\n \t    return 0;\n \n \t  p += sizeof have_purpose;\n@@ -2610,7 +2610,7 @@ compare_constant_1 (exp, p)\n \t    {\n \t      HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (exp));\n \n-\t      if (bcmp ((char *) &size, p, sizeof size))\n+\t      if (memcmp ((char *) &size, p, sizeof size))\n \t\treturn 0;\n \n \t      p += sizeof size;\n@@ -2627,7 +2627,7 @@ compare_constant_1 (exp, p)\n \t\t{\n \t\t  tree zero = 0;\n \n-\t\t  if (bcmp ((char *) &zero, p, sizeof zero))\n+\t\t  if (memcmp ((char *) &zero, p, sizeof zero))\n \t\t    return 0;\n \n \t\t  p += sizeof zero;\n@@ -2636,7 +2636,7 @@ compare_constant_1 (exp, p)\n \t      if (TREE_PURPOSE (link)\n \t\t  && TREE_CODE (TREE_PURPOSE (link)) == FIELD_DECL)\n \t\t{\n-\t\t  if (bcmp ((char *) &TREE_PURPOSE (link), p,\n+\t\t  if (memcmp ((char *) &TREE_PURPOSE (link), p,\n \t\t\t    sizeof TREE_PURPOSE (link)))\n \t\t    return 0;\n \n@@ -2651,7 +2651,7 @@ compare_constant_1 (exp, p)\n \t\t{\n \t\t  int zero = 0;\n \n-\t\t  if (bcmp ((char *) &zero, p, sizeof zero))\n+\t\t  if (memcmp ((char *) &zero, p, sizeof zero))\n \t\t    return 0;\n \n \t\t  p += sizeof zero;\n@@ -3352,7 +3352,7 @@ decode_rtx_const (mode, x, value)\n      struct rtx_const *value;\n {\n   /* Clear the whole structure, including any gaps.  */\n-  bzero (value, sizeof (struct rtx_const));\n+  memset (value, 0, sizeof (struct rtx_const));\n \n   value->kind = RTX_INT;\t/* Most usual kind.  */\n   value->mode = mode;\n@@ -3364,8 +3364,8 @@ decode_rtx_const (mode, x, value)\n       if (GET_MODE (x) != VOIDmode)\n \t{\n \t  value->mode = GET_MODE (x);\n-\t  bcopy ((char *) &CONST_DOUBLE_LOW (x),\n-\t\t (char *) &value->un.du, sizeof value->un.du);\n+\t  memcpy ((char *) &value->un.du,\n+\t\t  (char *) &CONST_DOUBLE_LOW (x), sizeof value->un.du);\n \t}\n       else\n \t{\n@@ -3797,7 +3797,7 @@ output_constant_pool (fnname, fndecl)\n \t  if (GET_CODE (x) != CONST_DOUBLE)\n \t    abort ();\n \n-\t  bcopy ((char *) &CONST_DOUBLE_LOW (x), (char *) &u, sizeof u);\n+\t  memcpy ((char *) &u, (char *) &CONST_DOUBLE_LOW (x), sizeof u);\n \t  assemble_real (u.d, pool->mode);\n \t  break;\n "}]}