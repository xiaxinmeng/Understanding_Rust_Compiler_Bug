{"sha": "5a0fe1f6c4ad0e50bf4684e723ae2ba17d94c9e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwZmUxZjZjNGFkMGU1MGJmNDY4NGU3MjNhZTJiYTE3ZDk0YzllNA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-20T13:55:18Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-21T18:08:14Z"}, "message": "[OpenACC privatization] Explain OpenACC privatization candidate selection [PR90115]\n\n\tgcc/\n\tPR middle-end/90115\n\t* omp-low.c (oacc_privatization_candidate_p): New function.\n\t(oacc_privatization_scan_clause_chain)\n\t(oacc_privatization_scan_decl_chain): Use it.  Also\n\t'gcc_checking_assert' that we're not seeing duplicates.", "tree": {"sha": "7eed1739ad53a61016f4ed979bbad4afde3501ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eed1739ad53a61016f4ed979bbad4afde3501ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a0fe1f6c4ad0e50bf4684e723ae2ba17d94c9e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0fe1f6c4ad0e50bf4684e723ae2ba17d94c9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0fe1f6c4ad0e50bf4684e723ae2ba17d94c9e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0fe1f6c4ad0e50bf4684e723ae2ba17d94c9e4/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad4612cb048b261f6834e9155e41e40e9252c80b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4612cb048b261f6834e9155e41e40e9252c80b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4612cb048b261f6834e9155e41e40e9252c80b"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "577676b2a169975899d0eee5b35618debea077be", "filename": "gcc/omp-low.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0fe1f6c4ad0e50bf4684e723ae2ba17d94c9e4/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0fe1f6c4ad0e50bf4684e723ae2ba17d94c9e4/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=5a0fe1f6c4ad0e50bf4684e723ae2ba17d94c9e4", "patch": "@@ -10144,6 +10144,36 @@ lower_omp_for_lastprivate (struct omp_for_data *fd, gimple_seq *body_p,\n     }\n }\n \n+/* OpenACC privatization.\n+\n+   Or, in other words, *sharing* at the respective OpenACC level of\n+   parallelism.\n+\n+   From a correctness perspective, a non-addressable variable can't be accessed\n+   outside the current thread, so it can go in a (faster than shared memory)\n+   register -- though that register may need to be broadcast in some\n+   circumstances.  A variable can only meaningfully be \"shared\" across workers\n+   or vector lanes if its address is taken, e.g. by a call to an atomic\n+   builtin.\n+\n+   From an optimisation perspective, the answer might be fuzzier: maybe\n+   sometimes, using shared memory directly would be faster than\n+   broadcasting.  */\n+\n+static bool\n+oacc_privatization_candidate_p (const tree decl)\n+{\n+  bool res = true;\n+\n+  if (res && !VAR_P (decl))\n+    res = false;\n+\n+  if (res && !TREE_ADDRESSABLE (decl))\n+    res = false;\n+\n+  return res;\n+}\n+\n /* Scan CLAUSES for candidates for adjusting OpenACC privatization level in\n    CTX.  */\n \n@@ -10154,8 +10184,12 @@ oacc_privatization_scan_clause_chain (omp_context *ctx, tree clauses)\n     if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_PRIVATE)\n       {\n \ttree decl = OMP_CLAUSE_DECL (c);\n-\tif (VAR_P (decl) && TREE_ADDRESSABLE (decl))\n-\t  ctx->oacc_privatization_candidates.safe_push (decl);\n+\n+\tif (!oacc_privatization_candidate_p (decl))\n+\t  continue;\n+\n+\tgcc_checking_assert (!ctx->oacc_privatization_candidates.contains (decl));\n+\tctx->oacc_privatization_candidates.safe_push (decl);\n       }\n }\n \n@@ -10166,8 +10200,13 @@ static void\n oacc_privatization_scan_decl_chain (omp_context *ctx, tree decls)\n {\n   for (tree decl = decls; decl; decl = DECL_CHAIN (decl))\n-    if (VAR_P (decl) && TREE_ADDRESSABLE (decl))\n+    {\n+      if (!oacc_privatization_candidate_p (decl))\n+\tcontinue;\n+\n+      gcc_checking_assert (!ctx->oacc_privatization_candidates.contains (decl));\n       ctx->oacc_privatization_candidates.safe_push (decl);\n+    }\n }\n \n /* Callback for walk_gimple_seq.  Find #pragma omp scan statement.  */"}]}