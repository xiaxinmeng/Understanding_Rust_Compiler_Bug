{"sha": "25eb3455aeec24f5084fd68f92287fba1d1c1718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlYjM0NTVhZWVjMjRmNTA4NGZkNjhmOTIyODdmYmExZDFjMTcxOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-10-22T08:42:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-10-22T08:42:34Z"}, "message": "decl.c (gnat_to_gnu_entity): In type annotation mode, break circularities introduced by AI05-0151.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>: In\n\ttype annotation mode, break circularities introduced by AI05-0151.\n\nFrom-SVN: r192671", "tree": {"sha": "e58170eae5f9c8d21c4cc45c5c4a3e83a7c2f66a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e58170eae5f9c8d21c4cc45c5c4a3e83a7c2f66a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25eb3455aeec24f5084fd68f92287fba1d1c1718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25eb3455aeec24f5084fd68f92287fba1d1c1718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25eb3455aeec24f5084fd68f92287fba1d1c1718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25eb3455aeec24f5084fd68f92287fba1d1c1718/comments", "author": null, "committer": null, "parents": [{"sha": "00a22e5e4bf265fcc0e6e1a3252194c87fc8d4aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a22e5e4bf265fcc0e6e1a3252194c87fc8d4aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a22e5e4bf265fcc0e6e1a3252194c87fc8d4aa"}], "stats": {"total": 112, "additions": 104, "deletions": 8}, "files": [{"sha": "db9eebcff2a63076a41d5953fa800ec0ea86766b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=25eb3455aeec24f5084fd68f92287fba1d1c1718", "patch": "@@ -1,3 +1,8 @@\n+2012-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Subprogram_Type>: In\n+\ttype annotation mode, break circularities introduced by AI05-0151.\n+\n 2012-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Loop_Statement_to_gnu): Use gnat_type_for_size"}, {"sha": "3e0d733248797d1b4a7558f6ca967fd3f0df4342", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=25eb3455aeec24f5084fd68f92287fba1d1c1718", "patch": "@@ -4142,7 +4142,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  gnu_return_type = void_type_node;\n \telse\n \t  {\n-\t    gnu_return_type = gnat_to_gnu_type (gnat_return_type);\n+\t    /* Ada 2012 (AI05-0151): Incomplete types coming from a limited\n+\t       context may now appear in parameter and result profiles.  If\n+\t       we are only annotating types, break circularities here.  */\n+\t    if (type_annotate_only\n+\t\t&& IN (Ekind (gnat_return_type), Incomplete_Kind)\n+\t        && From_With_Type (gnat_return_type)\n+\t\t&& In_Extended_Main_Code_Unit\n+\t\t   (Non_Limited_View (gnat_return_type))\n+\t\t&& !present_gnu_tree (Non_Limited_View (gnat_return_type)))\n+\t      gnu_return_type = ptr_void_type_node;\n+\t    else\n+\t      gnu_return_type = gnat_to_gnu_type (gnat_return_type);\n \n \t    /* If this function returns by reference, make the actual return\n \t       type the pointer type and make a note of that.  */\n@@ -4238,11 +4249,30 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t     Present (gnat_param);\n \t     gnat_param = Next_Formal_With_Extras (gnat_param), parmnum++)\n \t  {\n+\t    Entity_Id gnat_param_type = Etype (gnat_param);\n \t    tree gnu_param_name = get_entity_name (gnat_param);\n-\t    tree gnu_param_type = gnat_to_gnu_type (Etype (gnat_param));\n-\t    tree gnu_param, gnu_field;\n-\t    bool copy_in_copy_out = false;\n+\t    tree gnu_param_type, gnu_param, gnu_field;\n \t    Mechanism_Type mech = Mechanism (gnat_param);\n+  \t    bool copy_in_copy_out = false, fake_param_type;\n+\n+\t    /* Ada 2012 (AI05-0151): Incomplete types coming from a limited\n+\t       context may now appear in parameter and result profiles.  If\n+\t       we are only annotating types, break circularities here.  */\n+\t    if (type_annotate_only\n+\t\t&& IN (Ekind (gnat_param_type), Incomplete_Kind)\n+\t        && From_With_Type (Etype (gnat_param_type))\n+\t\t&& In_Extended_Main_Code_Unit\n+\t\t   (Non_Limited_View (gnat_param_type))\n+\t\t&& !present_gnu_tree (Non_Limited_View (gnat_param_type)))\n+\t      {\n+\t\tgnu_param_type = ptr_void_type_node;\n+\t\tfake_param_type = true;\n+\t      }\n+\t    else\n+\t      {\n+\t\tgnu_param_type = gnat_to_gnu_type (gnat_param_type);\n+\t\tfake_param_type = false;\n+\t      }\n \n \t    /* Builtins are expanded inline and there is no real call sequence\n \t       involved.  So the type expected by the underlying expander is\n@@ -4280,10 +4310,28 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\tmech = Default;\n \t      }\n \n-\t    gnu_param\n-\t      = gnat_to_gnu_param (gnat_param, mech, gnat_entity,\n-\t\t\t\t   Has_Foreign_Convention (gnat_entity),\n-\t\t\t\t   &copy_in_copy_out);\n+\t    /* Do not call gnat_to_gnu_param for a fake parameter type since\n+\t       it will try to use the real type again.  */\n+\t    if (fake_param_type)\n+\t      {\n+\t\tif (Ekind (gnat_param) == E_Out_Parameter)\n+\t\t  gnu_param = NULL_TREE;\n+\t\telse\n+\t\t  {\n+\t\t    gnu_param\n+\t\t      = create_param_decl (gnu_param_name, gnu_param_type,\n+\t\t\t\t\t   false);\n+\t\t    Set_Mechanism (gnat_param,\n+\t\t\t\t   mech == Default ? By_Copy : mech);\n+\t\t    if (Ekind (gnat_param) == E_In_Out_Parameter)\n+\t\t      copy_in_copy_out = true;\n+\t\t  }\n+\t      }\n+\t    else\n+\t      gnu_param\n+\t\t= gnat_to_gnu_param (gnat_param, mech, gnat_entity,\n+\t\t\t\t     Has_Foreign_Convention (gnat_entity),\n+\t\t\t\t     &copy_in_copy_out);\n \n \t    /* We are returned either a PARM_DECL or a type if no parameter\n \t       needs to be passed; in either case, adjust the type.  */"}, {"sha": "2d514d2b41a1ab268215ba02fecb4beb5c39b670", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25eb3455aeec24f5084fd68f92287fba1d1c1718", "patch": "@@ -1,3 +1,8 @@\n+2012-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/limited_with4.ads: New test.\n+\t* gnat.dg/specs/limited_with4_pkg.ads: New helper.\n+\n 2012-10-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/modular4.adb: New test."}, {"sha": "e182571f3359398f5d0162e0bda6efd93d0c67ae", "filename": "gcc/testsuite/gnat.dg/specs/limited_with4.ads", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Flimited_with4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Flimited_with4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Flimited_with4.ads?ref=25eb3455aeec24f5084fd68f92287fba1d1c1718", "patch": "@@ -0,0 +1,23 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnat12 -gnatct\" }\n+\n+with Ada.Containers.Vectors;\n+with Limited_With4_Pkg;\n+\n+package Limited_With4 is\n+\n+   type Object is tagged private;\n+   type Object_Ref is access all Object;\n+   type Class_Ref is access all Object'Class;\n+\n+   package Vec is new Ada.Containers.Vectors\n+     (Positive, Limited_With4_Pkg.Object_Ref,Limited_With4_Pkg .\"=\");\n+   subtype Vector is Vec.Vector;\n+\n+private\n+\n+   type Object is tagged record\n+      V : Vector;\n+   end record;\n+\n+end Limited_With4;"}, {"sha": "f69ab47bab9b0184fdd71e4d66032998433cc6e1", "filename": "gcc/testsuite/gnat.dg/specs/limited_with4_pkg.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Flimited_with4_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25eb3455aeec24f5084fd68f92287fba1d1c1718/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Flimited_with4_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Flimited_with4_pkg.ads?ref=25eb3455aeec24f5084fd68f92287fba1d1c1718", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnat12 -gnatct\" }\n+\n+limited with Limited_With4;\n+\n+package Limited_With4_Pkg is\n+\n+   type Object is tagged null record;\n+   type Object_Ref is access all Object;\n+   type Class_Ref is access all Object'Class;\n+\n+   function Func return Limited_With4.Class_Ref;\n+   procedure Proc (Arg : Limited_With4.Class_Ref);\n+\n+end Limited_With4_Pkg;"}]}