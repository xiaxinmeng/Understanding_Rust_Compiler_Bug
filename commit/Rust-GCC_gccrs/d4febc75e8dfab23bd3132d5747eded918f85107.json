{"sha": "d4febc75e8dfab23bd3132d5747eded918f85107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmZWJjNzVlOGRmYWIyM2JkMzEzMmQ1NzQ3ZWRlZDkxOGY4NTEwNw==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-09-07T14:20:21Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-09-07T14:20:21Z"}, "message": "aarch64: Don't emit invalid zero/sign-extend syntax\n\nGiven the following C function:\n\ndouble *f(double *p, unsigned x)\n{\n    return p + x;\n}\n\nprior to this patch, GCC at -O2 would generate:\n\nf:\n        add     x0, x0, x1, uxtw 3\n        ret\n\nbut this add instruction uses architecturally-invalid syntax: the width\nof the third operand conflicts with the width of the extension\nspecifier. The third operand is only permitted to be an x register when\nthe extension specifier is (u|s)xtx.\n\nThis instruction, and analogous insns for adds, sub, subs, and cmp, are\nrejected by clang, but accepted by binutils. Assembling and\ndisassembling such an insn with binutils gives the architecturally-valid\nversion in the disassembly:\n\n   0:   8b214c00        add     x0, x0, w1, uxtw #3\n\nThis patch fixes several patterns in the AArch64 backend to use the\nstandard syntax as specified in the Arm ARM such that GCC's output can\nbe assembled by assemblers other than GAS.\n\n---\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.md\n\t(*adds_<optab><ALLX:mode>_<GPI:mode>): Ensure extended operand\n\tagrees with width of extension specifier.\n\t(*subs_<optab><ALLX:mode>_<GPI:mode>): Likewise.\n\t(*adds_<optab><ALLX:mode>_shift_<GPI:mode>): Likewise.\n\t(*subs_<optab><ALLX:mode>_shift_<GPI:mode>): Likewise.\n\t(*add_<optab><ALLX:mode>_<GPI:mode>): Likewise.\n\t(*add_<optab><ALLX:mode>_shft_<GPI:mode>): Likewise.\n\t(*add_uxt<mode>_shift2): Likewise.\n\t(*sub_<optab><ALLX:mode>_<GPI:mode>): Likewise.\n\t(*sub_<optab><ALLX:mode>_shft_<GPI:mode>): Likewise.\n\t(*sub_uxt<mode>_shift2): Likewise.\n\t(*cmp_swp_<optab><ALLX:mode>_reg<GPI:mode>): Likewise.\n\t(*cmp_swp_<optab><ALLX:mode>_shft_<GPI:mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/adds3.c: Fix test w.r.t. new syntax.\n\t* gcc.target/aarch64/cmp.c: Likewise.\n\t* gcc.target/aarch64/subs3.c: Likewise.\n\t* gcc.target/aarch64/subsp.c: Likewise.\n\t* gcc.target/aarch64/extend-syntax.c: New test.", "tree": {"sha": "fadcf0f96673852361863451a2deb435bb79b5a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fadcf0f96673852361863451a2deb435bb79b5a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4febc75e8dfab23bd3132d5747eded918f85107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4febc75e8dfab23bd3132d5747eded918f85107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4febc75e8dfab23bd3132d5747eded918f85107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4febc75e8dfab23bd3132d5747eded918f85107/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "931832a5ccd92c7289f4933c42cf007e1a6b737f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931832a5ccd92c7289f4933c42cf007e1a6b737f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931832a5ccd92c7289f4933c42cf007e1a6b737f"}], "stats": {"total": 153, "additions": 137, "deletions": 16}, "files": [{"sha": "b1e83dfda788af2c3101d67b5df00673f88b4a75", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d4febc75e8dfab23bd3132d5747eded918f85107", "patch": "@@ -2383,7 +2383,7 @@\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(plus:GPI (ANY_EXTEND:GPI (match_dup 1)) (match_dup 2)))]\n   \"\"\n-  \"adds\\\\t%<GPI:w>0, %<GPI:w>2, %<GPI:w>1, <su>xt<ALLX:size>\"\n+  \"adds\\\\t%<GPI:w>0, %<GPI:w>2, %w1, <su>xt<ALLX:size>\"\n   [(set_attr \"type\" \"alus_ext\")]\n )\n \n@@ -2397,7 +2397,7 @@\n    (set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(minus:GPI (match_dup 1) (ANY_EXTEND:GPI (match_dup 2))))]\n   \"\"\n-  \"subs\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size>\"\n+  \"subs\\\\t%<GPI:w>0, %<GPI:w>1, %w2, <su>xt<ALLX:size>\"\n   [(set_attr \"type\" \"alus_ext\")]\n )\n \n@@ -2415,7 +2415,7 @@\n \t\t\t      (match_dup 2))\n \t\t  (match_dup 3)))]\n   \"\"\n-  \"adds\\\\t%<GPI:w>0, %<GPI:w>3, %<GPI:w>1, <su>xt<ALLX:size> %2\"\n+  \"adds\\\\t%<GPI:w>0, %<GPI:w>3, %w1, <su>xt<ALLX:size> %2\"\n   [(set_attr \"type\" \"alus_ext\")]\n )\n \n@@ -2433,7 +2433,7 @@\n \t\t   (ashift:GPI (ANY_EXTEND:GPI (match_dup 2))\n \t\t\t       (match_dup 3))))]\n   \"\"\n-  \"subs\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size> %3\"\n+  \"subs\\\\t%<GPI:w>0, %<GPI:w>1, %w2, <su>xt<ALLX:size> %3\"\n   [(set_attr \"type\" \"alus_ext\")]\n )\n \n@@ -2549,7 +2549,7 @@\n \t(plus:GPI (ANY_EXTEND:GPI (match_operand:ALLX 1 \"register_operand\" \"r\"))\n \t\t  (match_operand:GPI 2 \"register_operand\" \"r\")))]\n   \"\"\n-  \"add\\\\t%<GPI:w>0, %<GPI:w>2, %<GPI:w>1, <su>xt<ALLX:size>\"\n+  \"add\\\\t%<GPI:w>0, %<GPI:w>2, %w1, <su>xt<ALLX:size>\"\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n@@ -2571,7 +2571,7 @@\n \t\t\t      (match_operand 2 \"aarch64_imm3\" \"Ui3\"))\n \t\t  (match_operand:GPI 3 \"register_operand\" \"r\")))]\n   \"\"\n-  \"add\\\\t%<GPI:w>0, %<GPI:w>3, %<GPI:w>1, <su>xt<ALLX:size> %2\"\n+  \"add\\\\t%<GPI:w>0, %<GPI:w>3, %w1, <su>xt<ALLX:size> %2\"\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n@@ -2819,7 +2819,7 @@\n   \"*\n   operands[3] = GEN_INT (aarch64_uxt_size (INTVAL(operands[2]),\n \t\t\t\t\t   INTVAL (operands[3])));\n-  return \\\"add\\t%<w>0, %<w>4, %<w>1, uxt%e3 %2\\\";\"\n+  return \\\"add\\t%<w>0, %<w>4, %w1, uxt%e3 %2\\\";\"\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n@@ -3305,7 +3305,7 @@\n \t\t   (ANY_EXTEND:GPI\n \t\t    (match_operand:ALLX 2 \"register_operand\" \"r\"))))]\n   \"\"\n-  \"sub\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size>\"\n+  \"sub\\\\t%<GPI:w>0, %<GPI:w>1, %w2, <su>xt<ALLX:size>\"\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n@@ -3328,7 +3328,7 @@\n \t\t\t\t(match_operand:ALLX 2 \"register_operand\" \"r\"))\n \t\t\t       (match_operand 3 \"aarch64_imm3\" \"Ui3\"))))]\n   \"\"\n-  \"sub\\\\t%<GPI:w>0, %<GPI:w>1, %<GPI:w>2, <su>xt<ALLX:size> %3\"\n+  \"sub\\\\t%<GPI:w>0, %<GPI:w>1, %w2, <su>xt<ALLX:size> %3\"\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n@@ -3607,7 +3607,7 @@\n   \"*\n   operands[3] = GEN_INT (aarch64_uxt_size (INTVAL (operands[2]),\n \t\t\t\t\t   INTVAL (operands[3])));\n-  return \\\"sub\\t%<w>0, %<w>4, %<w>1, uxt%e3 %2\\\";\"\n+  return \\\"sub\\t%<w>0, %<w>4, %w1, uxt%e3 %2\\\";\"\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n@@ -4054,7 +4054,7 @@\n \t\t\t (match_operand:ALLX 0 \"register_operand\" \"r\"))\n \t\t\t(match_operand:GPI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"cmp\\\\t%<GPI:w>1, %<GPI:w>0, <su>xt<ALLX:size>\"\n+  \"cmp\\\\t%<GPI:w>1, %w0, <su>xt<ALLX:size>\"\n   [(set_attr \"type\" \"alus_ext\")]\n )\n \n@@ -4066,7 +4066,7 @@\n \t\t\t (match_operand 1 \"aarch64_imm3\" \"Ui3\"))\n \t(match_operand:GPI 2 \"register_operand\" \"r\")))]\n   \"\"\n-  \"cmp\\\\t%<GPI:w>2, %<GPI:w>0, <su>xt<ALLX:size> %1\"\n+  \"cmp\\\\t%<GPI:w>2, %w0, <su>xt<ALLX:size> %1\"\n   [(set_attr \"type\" \"alus_ext\")]\n )\n "}, {"sha": "e938c8049cf6326db52565dea807b174ea672c67", "filename": "gcc/testsuite/gcc.target/aarch64/adds3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadds3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadds3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadds3.c?ref=d4febc75e8dfab23bd3132d5747eded918f85107", "patch": "@@ -58,4 +58,4 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"adds\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, sxtw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"adds\\tx\\[0-9\\]+, x\\[0-9\\]+, w\\[0-9\\]+, sxtw\" 2 } } */"}, {"sha": "a6487a4f77acaaefc5f730411146dc6831fffa29", "filename": "gcc/testsuite/gcc.target/aarch64/cmp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmp.c?ref=d4febc75e8dfab23bd3132d5747eded918f85107", "patch": "@@ -58,4 +58,5 @@ cmp_di_test4 (int a, s64 b, s64 c)\n }\n \n /* { dg-final { scan-assembler-times \"cmp\\tw\\[0-9\\]+, w\\[0-9\\]+\" 2 } } */\n-/* { dg-final { scan-assembler-times \"cmp\\tx\\[0-9\\]+, x\\[0-9\\]+\" 4 } } */\n+/* { dg-final { scan-assembler-times \"cmp\\tx\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmp\\tx\\[0-9\\]+, w\\[0-9\\]+, sxtw\" 2 } } */"}, {"sha": "23fa9f4ffc5a34d08a550468794a6c85134ad3c9", "filename": "gcc/testsuite/gcc.target/aarch64/extend-syntax.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend-syntax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend-syntax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fextend-syntax.c?ref=d4febc75e8dfab23bd3132d5747eded918f85107", "patch": "@@ -0,0 +1,120 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+// Hits *add_uxtdi_shift2 (*add_uxt<mode>_shift2).\n+/*\n+** add1:\n+** \tadd\tx0, x0, w1, uxtw 3\n+** \tret\n+*/\n+unsigned long long *add1(unsigned long long *p, unsigned x)\n+{\n+  return p + x;\n+}\n+\n+// Hits *add_zero_extendsi_di (*add_<optab><ALLX:mode>_<GPI:mode>).\n+/*\n+** add2:\n+** \tadd\tx0, x0, w1, uxtw\n+** \tret\n+*/\n+unsigned long long add2(unsigned long long x, unsigned y)\n+{\n+  return x + y;\n+}\n+\n+// Hits *add_extendsi_shft_di (*add_<optab><ALLX:mode>_shft_<GPI:mode>).\n+/*\n+** add3:\n+** \tadd\tx0, x0, w1, sxtw 3\n+** \tret\n+*/\n+double *add3(double *p, int x)\n+{\n+  return p + x;\n+}\n+\n+// Hits *sub_zero_extendsi_di (*sub_<optab><ALLX:mode>_<GPI:mode>).\n+/*\n+** sub1:\n+** \tsub\tx0, x0, w1, uxtw\n+** \tret\n+*/\n+unsigned long long sub1(unsigned long long x, unsigned n)\n+{\n+    return x - n;\n+}\n+\n+// Hits *sub_uxtdi_shift2 (*sub_uxt<mode>_shift2).\n+/*\n+** sub2:\n+** \tsub\tx0, x0, w1, uxtw 3\n+** \tret\n+*/\n+double *sub2(double *x, unsigned n)\n+{\n+  return x - n;\n+}\n+\n+// Hits *sub_extendsi_shft_di (*sub_<optab><ALLX:mode>_shft_<GPI:mode>).\n+/*\n+** sub3:\n+** \tsub\tx0, x0, w1, sxtw 3\n+** \tret\n+*/\n+double *sub3(double *p, int n)\n+{\n+  return p - n;\n+}\n+\n+// Hits *adds_zero_extendsi_di (*adds_<optab><ALLX:mode>_<GPI:mode>).\n+int adds1(unsigned long long x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler-times \"adds\\tx\\[0-9\\]+, x\\[0-9\\]+, w\\[0-9\\]+, uxtw\" 1 } } */\n+  unsigned long long l = x + y;\n+  return !!l;\n+}\n+\n+// Hits *adds_extendsi_shift_di (*adds_<optab><ALLX:mode>_shift_<GPI:mode>).\n+int adds2(long long x, int y)\n+{\n+  /* { dg-final { scan-assembler-times \"adds\\tx\\[0-9\\]+, x\\[0-9\\]+, w\\[0-9\\]+, sxtw 3\" 1 } } */\n+  long long t = x + ((long long)y << 3);\n+  return !!t;\n+}\n+\n+// Hits *subs_zero_extendsi_di (*subs_<optab><ALLX:mode>_<GPI:mode>).\n+unsigned long long z;\n+int subs1(unsigned long long x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+, x\\[0-9\\]+, w\\[0-9\\]+, uxtw\" 1 } } */\n+  unsigned long long t = x - y;\n+  z = t;\n+  return !!t;\n+}\n+\n+// Hits *subs_extendsi_shift_di (*subs_<optab><ALLX:mode>_shift_<GPI:mode>).\n+unsigned long long *w;\n+int subs2(unsigned long long *x, int y)\n+{\n+  /* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+, x\\[0-9\\]+, w\\[0-9\\]+, sxtw 3\" 1 } } */\n+  unsigned long long *t = x - y;\n+  w = t;\n+  return !!t;\n+}\n+\n+// Hits *cmp_swp_zero_extendsi_regdi (*cmp_swp_<optab><ALLX:mode>_reg<GPI:mode>).\n+int cmp(unsigned long long x, unsigned y)\n+{\n+  /* { dg-final { scan-assembler-times \"cmp\\tx\\[0-9\\]+, w\\[0-9\\]+, uxtw\" 1 } } */\n+  return !!(x - y);\n+}\n+\n+// Hits *cmp_swp_extendsi_shft_di (*cmp_swp_<optab><ALLX:mode>_shft_<GPI:mode>).\n+int cmp2(unsigned long long x, int y)\n+{\n+  /* { dg-final { scan-assembler-times \"cmp\\tx\\[0-9\\]+, w\\[0-9\\]+, sxtw 3\" 1 } } */\n+  return x == ((unsigned long long)y << 3);\n+}\n+\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */"}, {"sha": "0470a3bde343aeefdbcbb729a0211a03a0c2c543", "filename": "gcc/testsuite/gcc.target/aarch64/subs3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubs3.c?ref=d4febc75e8dfab23bd3132d5747eded918f85107", "patch": "@@ -58,4 +58,4 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+, sxtw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+, x\\[0-9\\]+, w\\[0-9\\]+, sxtw\" 2 } } */"}, {"sha": "341b83dca863cb3b9097bbd09c8d0997f981a2a4", "filename": "gcc/testsuite/gcc.target/aarch64/subsp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4febc75e8dfab23bd3132d5747eded918f85107/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsubsp.c?ref=d4febc75e8dfab23bd3132d5747eded918f85107", "patch": "@@ -16,4 +16,4 @@ f2 (int *x, int y)\n }\n \n /* { dg-final { scan-assembler \"sub\\tsp, sp, x\\[0-9\\]*\\n\" } } */\n-/* { dg-final { scan-assembler \"sub\\tsp, sp, x\\[0-9\\]*, sxtw 4\\n\" } } */\n+/* { dg-final { scan-assembler \"sub\\tsp, sp, w\\[0-9\\]*, sxtw 4\\n\" } } */"}]}