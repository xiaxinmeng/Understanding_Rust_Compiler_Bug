{"sha": "fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ4NzYyNDZlZThhNWFhYmI3MTA2NzNmN2E4YmM0OWI3YzE1ZmU4NA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-21T17:26:23Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-09-21T17:26:23Z"}, "message": "re PR fortran/87359 (pointer being freed was not allocated)\n\n2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/87359\n\t* trans-stmt.c (gfc_trans_allocate): Don't deallocate alloc\n\tcomponents if must_finalize is set for expr3.\n\n2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/87359\n\t* gfortran.dg/finalize_33.f90 : New test.\n\nFrom-SVN: r264485", "tree": {"sha": "d39b0852443d85292d6513518286b03d2d484a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d39b0852443d85292d6513518286b03d2d484a1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/comments", "author": null, "committer": null, "parents": [{"sha": "d4accef391a4aa4c10daeef79c7103fae96a97ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4accef391a4aa4c10daeef79c7103fae96a97ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4accef391a4aa4c10daeef79c7103fae96a97ba"}], "stats": {"total": 133, "additions": 132, "deletions": 1}, "files": [{"sha": "0d8797eaab0fe62bd229ff0e2dfa1603e0559d00", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "patch": "@@ -1,3 +1,9 @@\n+2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87359\n+\t* trans-stmt.c (gfc_trans_allocate): Don't deallocate alloc\n+\tcomponents if must_finalize is set for expr3.\n+\n 2018-09-21  Andrew Stubbs  <ams@codesourcery.com>\n             Kwok Cheung Yeung  <kcy@codesourcery.com>\n "}, {"sha": "833c6c5f0a7c66e77d7052a7b6a5303d67aba840", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "patch": "@@ -5998,7 +5998,8 @@ gfc_trans_allocate (gfc_code * code)\n       if ((code->expr3->ts.type == BT_DERIVED\n \t   || code->expr3->ts.type == BT_CLASS)\n \t  && (code->expr3->expr_type != EXPR_VARIABLE || temp_obj_created)\n-\t  && code->expr3->ts.u.derived->attr.alloc_comp)\n+\t  && code->expr3->ts.u.derived->attr.alloc_comp\n+\t  && !code->expr3->must_finalize)\n \t{\n \t  tmp = gfc_deallocate_alloc_comp (code->expr3->ts.u.derived,\n \t\t\t\t\t   expr3, code->expr3->rank);"}, {"sha": "97b60da78ec915679b7934c04ac1286c8598caa6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "patch": "@@ -1,3 +1,8 @@\n+2018-09-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87359\n+\t* gfortran.dg/finalize_33.f90 : New test.\n+\n 2018-09-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR tree-optimization/87309"}, {"sha": "3857e4485ee8b9ec7ceeb9baaa64c5d6ea9df8fb", "filename": "gcc/testsuite/gfortran.dg/finalize_33.f90", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd876246ee8a5aabb710673f7a8bc49b7c15fe84/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_33.f90?ref=fd876246ee8a5aabb710673f7a8bc49b7c15fe84", "patch": "@@ -0,0 +1,119 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Tests the fix for PR87359 in which the finalization of\n+! 'source=process%component%extract_mci_template()' in the allocation\n+! of 'process%mci' caused invalid reads and freeing of already freed\n+! memory. This test is a greatly reduced version of the original code.\n+!\n+! Contributed by Juergen Reuter  <juergen.reuter@desy.de>\n+!\n+module mci_base\n+  implicit none\n+  private\n+  public :: mci_t\n+  public :: mci_midpoint_t\n+  public :: cnt\n+  integer :: cnt = 0\n+  type, abstract :: mci_t\n+     integer, dimension(:), allocatable :: chain\n+  end type mci_t\n+  type, extends (mci_t) :: mci_midpoint_t\n+  contains\n+    final :: mci_midpoint_final\n+  end type mci_midpoint_t\n+contains\n+  IMPURE ELEMENTAL SUBROUTINE mci_midpoint_final(arg)\n+    TYPE(mci_midpoint_t), INTENT(INOUT) :: arg\n+    cnt = cnt + 1\n+  END SUBROUTINE mci_midpoint_final\n+end module mci_base\n+\n+!!!!!\n+\n+module process_config\n+  use mci_base\n+  implicit none\n+  private\n+  public :: process_component_t\n+  type :: process_component_t\n+     class(mci_t), allocatable :: mci_template\n+   contains\n+     procedure :: init => process_component_init\n+     procedure :: extract_mci_template => process_component_extract_mci_template\n+  end type process_component_t\n+\n+contains\n+\n+  subroutine process_component_init (component, mci_template)\n+    class(process_component_t), intent(out) :: component\n+    class(mci_t), intent(in), allocatable :: mci_template\n+    if (allocated (mci_template)) &\n+         allocate (component%mci_template, source = mci_template)\n+  end subroutine process_component_init\n+\n+  function process_component_extract_mci_template (component) &\n+         result (mci_template)\n+    class(mci_t), allocatable :: mci_template\n+    class(process_component_t), intent(in) :: component\n+    if (allocated (component%mci_template)) &\n+       allocate (mci_template, source = component%mci_template)\n+  end function process_component_extract_mci_template\n+end module process_config\n+\n+!!!!!\n+\n+module process\n+  use mci_base\n+  use process_config\n+  implicit none\n+  private\n+  public :: process_t\n+  type :: process_t\n+     private\n+     type(process_component_t) :: component\n+     class(mci_t), allocatable :: mci\n+   contains\n+     procedure :: init_component => process_init_component\n+     procedure :: setup_mci => process_setup_mci\n+  end type process_t\n+contains\n+  subroutine process_init_component &\n+       (process, mci_template)\n+    class(process_t), intent(inout), target :: process\n+    class(mci_t), intent(in), allocatable :: mci_template\n+    call process%component%init (mci_template)\n+  end subroutine process_init_component\n+\n+  subroutine process_setup_mci (process)\n+    class(process_t), intent(inout) :: process\n+    allocate (process%mci, source=process%component%extract_mci_template ())\n+  end subroutine process_setup_mci\n+\n+end module process\n+\n+!!!!!\n+\n+program main_ut\n+  use mci_base\n+  use process, only: process_t\n+  implicit none\n+  call event_transforms_1 ()\n+  if (cnt .ne. 4) stop 2\n+contains\n+\n+  subroutine event_transforms_1 ()\n+    class(mci_t), allocatable :: mci_template\n+    type(process_t), allocatable, target :: process\n+    allocate (process)\n+    allocate (mci_midpoint_t :: mci_template)\n+    call process%init_component (mci_template)\n+    call process%setup_mci ()                  ! generates 1 final call from call to extract_mci_template\n+    if (cnt .ne. 1) stop 1\n+  end subroutine event_transforms_1            ! generates 3 final calls to mci_midpoint_final:\n+                                               ! (i) process%component%mci_template\n+                                               ! (ii) process%mci\n+                                               ! (iii) mci_template\n+end program main_ut\n+! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 17 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 20 \"original\" } }"}]}