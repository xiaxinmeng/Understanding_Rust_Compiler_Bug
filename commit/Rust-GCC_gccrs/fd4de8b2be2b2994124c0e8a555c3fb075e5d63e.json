{"sha": "fd4de8b2be2b2994124c0e8a555c3fb075e5d63e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ0ZGU4YjJiZTJiMjk5NDEyNGMwZThhNTU1YzNmYjA3NWU1ZDYzZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-08T21:28:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-07-08T21:28:17Z"}, "message": "re PR go/61308 (gccgo: ICE in Expression::check_bounds [GoSmith])\n\n\tPR go/61308\n\ncompiler: Convert array start index before bounds checking.\n\nFrom-SVN: r212372", "tree": {"sha": "bc50ed8007463a31599c6fc7da23894649df1b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc50ed8007463a31599c6fc7da23894649df1b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd4de8b2be2b2994124c0e8a555c3fb075e5d63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4de8b2be2b2994124c0e8a555c3fb075e5d63e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd4de8b2be2b2994124c0e8a555c3fb075e5d63e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4de8b2be2b2994124c0e8a555c3fb075e5d63e/comments", "author": null, "committer": null, "parents": [{"sha": "0630a48fdf38d31f5a413b5907f95ca0c3bed52b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0630a48fdf38d31f5a413b5907f95ca0c3bed52b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0630a48fdf38d31f5a413b5907f95ca0c3bed52b"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "53c0068e3a5a1092fa277e73314696d5ff836df1", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4de8b2be2b2994124c0e8a555c3fb075e5d63e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4de8b2be2b2994124c0e8a555c3fb075e5d63e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=fd4de8b2be2b2994124c0e8a555c3fb075e5d63e", "patch": "@@ -10218,7 +10218,8 @@ Array_index_expression::do_get_backend(Translate_context* context)\n   Location loc = this->location();\n   Gogo* gogo = context->gogo();\n \n-  Btype* int_btype = Type::lookup_integer_type(\"int\")->get_backend(gogo);\n+  Type* int_type = Type::lookup_integer_type(\"int\");\n+  Btype* int_btype = int_type->get_backend(gogo);\n \n   // We need to convert the length and capacity to the Go \"int\" type here\n   // because the length of a fixed-length array could be of type \"uintptr\"\n@@ -10259,8 +10260,15 @@ Array_index_expression::do_get_backend(Translate_context* context)\n \t\t : RUNTIME_ERROR_SLICE_SLICE_OUT_OF_BOUNDS));\n   Bexpression* crash = gogo->runtime_error(code, loc)->get_backend(context);\n \n+  if (this->start_->type()->integer_type() == NULL\n+      && !Type::are_convertible(int_type, this->start_->type(), NULL))\n+    {\n+      go_assert(saw_errors());\n+      return context->backend()->error_expression();\n+    }\n+  Expression* start_expr = Expression::make_cast(int_type, this->start_, loc);\n   Bexpression* bad_index =\n-    Expression::check_bounds(this->start_, loc)->get_backend(context);\n+    Expression::check_bounds(start_expr, loc)->get_backend(context);\n \n   Bexpression* start = this->start_->get_backend(context);\n   start = gogo->backend()->convert_expression(int_btype, start, loc);"}]}