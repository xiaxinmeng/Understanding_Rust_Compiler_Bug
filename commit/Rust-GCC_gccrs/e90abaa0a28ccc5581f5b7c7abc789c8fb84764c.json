{"sha": "e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwYWJhYTBhMjhjY2M1NTgxZjViN2M3YWJjNzg5YzhmYjg0NzY0Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-28T15:38:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-28T15:38:29Z"}, "message": "Core DR 342 PR c++/48582\n\n\tCore DR 342\n\tPR c++/48582\n\t* pt.c (check_valid_ptrmem_cst_expr): A null member pointer value\n\tis valid in C++11.\n\t(convert_nontype_argument): Likewise.  Implicitly convert nullptr\n\tand do constant folding.\n\t* mangle.c (write_template_arg_literal): Mangle null member\n\tpointer values as 0.\n\t* call.c (null_member_pointer_value_p): New.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r178144", "tree": {"sha": "66c53e1699feba9e99d474d7b0964f8cd338cec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66c53e1699feba9e99d474d7b0964f8cd338cec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2aef967bc8e30972f0ddf792e6045d716078b55a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aef967bc8e30972f0ddf792e6045d716078b55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aef967bc8e30972f0ddf792e6045d716078b55a"}], "stats": {"total": 127, "additions": 107, "deletions": 20}, "files": [{"sha": "2e0d6ab93050992c02f091c8fce9a11f9298f926", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "patch": "@@ -1,3 +1,16 @@\n+2011-08-26  Jason Merrill  <jason@redhat.com>\n+\n+\tCore DR 342\n+\tPR c++/48582\n+\t* pt.c (check_valid_ptrmem_cst_expr): A null member pointer value\n+\tis valid in C++11.\n+\t(convert_nontype_argument): Likewise.  Implicitly convert nullptr\n+\tand do constant folding.\n+\t* mangle.c (write_template_arg_literal): Mangle null member\n+\tpointer values as 0.\n+\t* call.c (null_member_pointer_value_p): New.\n+\t* cp-tree.h: Declare it.\n+\n 2011-08-25  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (convert_like_real): Remove redundant complain checks."}, {"sha": "84212603b1ab5f5f1bb14858e42f8f6518dc43a4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "patch": "@@ -553,6 +553,23 @@ null_ptr_cst_p (tree t)\n   return false;\n }\n \n+/* Returns true iff T is a null member pointer value (4.11).  */\n+\n+bool\n+null_member_pointer_value_p (tree t)\n+{\n+  tree type = TREE_TYPE (t);\n+  if (!type)\n+    return false;\n+  else if (TYPE_PTRMEMFUNC_P (type))\n+    return (TREE_CODE (t) == CONSTRUCTOR\n+\t    && integer_zerop (CONSTRUCTOR_ELT (t, 0)->value));\n+  else if (TYPE_PTRMEM_P (type))\n+    return integer_all_onesp (t);\n+  else\n+    return false;\n+}\n+\n /* Returns nonzero if PARMLIST consists of only default parms,\n    ellipsis, and/or undeduced parameter packs.  */\n "}, {"sha": "d1256424defd3a0272931d00244264d27e14b719", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "patch": "@@ -4722,6 +4722,7 @@ extern tree build_addr_func\t\t\t(tree);\n extern tree build_call_a\t\t\t(tree, int, tree*);\n extern tree build_call_n\t\t\t(tree, int, ...);\n extern bool null_ptr_cst_p\t\t\t(tree);\n+extern bool null_member_pointer_value_p\t\t(tree);\n extern bool sufficient_parms_p\t\t\t(const_tree);\n extern tree type_decays_to\t\t\t(tree);\n extern tree build_user_type_conversion\t\t(tree, tree, int);"}, {"sha": "1fcd999e5850d598ce7d15446891ceedf8bc3293", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "patch": "@@ -2762,29 +2762,34 @@ write_template_arg_literal (const tree value)\n   write_char ('L');\n   write_type (TREE_TYPE (value));\n \n-  switch (TREE_CODE (value))\n-    {\n-    case CONST_DECL:\n-      write_integer_cst (DECL_INITIAL (value));\n-      break;\n+  /* Write a null member pointer value as (type)0, regardless of its\n+     real representation.  */\n+  if (null_member_pointer_value_p (value))\n+    write_integer_cst (integer_zero_node);\n+  else\n+    switch (TREE_CODE (value))\n+      {\n+      case CONST_DECL:\n+\twrite_integer_cst (DECL_INITIAL (value));\n+\tbreak;\n \n-    case INTEGER_CST:\n-      gcc_assert (!same_type_p (TREE_TYPE (value), boolean_type_node)\n-\t\t  || integer_zerop (value) || integer_onep (value));\n-      write_integer_cst (value);\n-      break;\n+      case INTEGER_CST:\n+\tgcc_assert (!same_type_p (TREE_TYPE (value), boolean_type_node)\n+\t\t    || integer_zerop (value) || integer_onep (value));\n+\twrite_integer_cst (value);\n+\tbreak;\n \n-    case REAL_CST:\n-      write_real_cst (value);\n-      break;\n+      case REAL_CST:\n+\twrite_real_cst (value);\n+\tbreak;\n \n-    case STRING_CST:\n-      sorry (\"string literal in function template signature\");\n-      break;\n+      case STRING_CST:\n+\tsorry (\"string literal in function template signature\");\n+\tbreak;\n \n-    default:\n-      gcc_unreachable ();\n-    }\n+      default:\n+\tgcc_unreachable ();\n+      }\n \n   write_char ('E');\n }\n@@ -2845,7 +2850,8 @@ write_template_arg (tree node)\n     /* A template appearing as a template arg is a template template arg.  */\n     write_template_template_arg (node);\n   else if ((TREE_CODE_CLASS (code) == tcc_constant && code != PTRMEM_CST)\n-\t   || (abi_version_at_least (2) && code == CONST_DECL))\n+\t   || (abi_version_at_least (2) && code == CONST_DECL)\n+\t   || null_member_pointer_value_p (node))\n     write_template_arg_literal (node);\n   else if (DECL_P (node))\n     {"}, {"sha": "1f43ff1fbf0376f220c5690a31796abbed123688", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "patch": "@@ -5240,6 +5240,8 @@ check_valid_ptrmem_cst_expr (tree type, tree expr,\n   STRIP_NOPS (expr);\n   if (expr && (null_ptr_cst_p (expr) || TREE_CODE (expr) == PTRMEM_CST))\n     return true;\n+  if (cxx_dialect >= cxx0x && null_member_pointer_value_p (expr))\n+    return true;\n   if (complain & tf_error)\n     {\n       error (\"%qE is not a valid template argument for type %qT\",\n@@ -5550,6 +5552,17 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n   else\n     expr = mark_rvalue_use (expr);\n \n+  /* 14.3.2/5: The null pointer{,-to-member} conversion is applied\n+     to a non-type argument of \"nullptr\".  */\n+  if (expr == nullptr_node\n+      && (TYPE_PTR_P (type) || TYPE_PTR_TO_MEMBER_P (type)))\n+    expr = convert (type, expr);\n+\n+  /* In C++11, non-type template arguments can be arbitrary constant\n+     expressions.  But don't fold a PTRMEM_CST to a CONSTRUCTOR yet.  */\n+  if (cxx_dialect >= cxx0x && TREE_CODE (expr) != PTRMEM_CST)\n+    expr = maybe_constant_value (expr);\n+\n   /* HACK: Due to double coercion, we can get a\n      NOP_EXPR<REFERENCE_TYPE>(ADDR_EXPR<POINTER_TYPE> (arg)) here,\n      which is the tree that we built on the first call (see\n@@ -5658,6 +5671,8 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n       if (DECL_P (expr) && DECL_TEMPLATE_PARM_P (expr))\n \t/* Non-type template parameters are OK.  */\n \t;\n+      else if (cxx_dialect >= cxx0x && integer_zerop (expr))\n+\t/* Null pointer values are OK in C++11.  */;\n       else if (TREE_CODE (expr) != ADDR_EXPR\n \t       && TREE_CODE (expr_type) != ARRAY_TYPE)\n \t{\n@@ -5785,6 +5800,10 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t    return error_mark_node;\n \t}\n \n+      if (cxx_dialect >= cxx0x && integer_zerop (expr))\n+\t/* Null pointer values are OK in C++11.  */\n+\treturn perform_qualification_conversions (type, expr);\n+\n       expr = convert_nontype_argument_function (type, expr);\n       if (!expr || expr == error_mark_node)\n \treturn expr;"}, {"sha": "03a45a4ee07b111081999a4b1b59525d4b6f6974", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "patch": "@@ -1,3 +1,9 @@\n+2011-08-26  Jason Merrill  <jason@redhat.com>\n+\n+\tCore DR 342\n+\tPR c++/48582\n+\t* g++.dg/abi/mangle50.C: New.\n+\n 2011-08-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/50202"}, {"sha": "df7afb97edcaf51e160f91cc597f9da2d3d14040", "filename": "gcc/testsuite/g++.dg/abi/mangle50.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90abaa0a28ccc5581f5b7c7abc789c8fb84764c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle50.C?ref=e90abaa0a28ccc5581f5b7c7abc789c8fb84764c", "patch": "@@ -0,0 +1,25 @@\n+// DR 342, PR c++/48582\n+// { dg-options -std=c++0x }\n+\n+struct A;\n+template < void * = nullptr > void f() { }\n+template < void (A::*)() = nullptr > void g() { }\n+template < int A::* = nullptr > void h() { }\n+\n+int main()\n+{\n+  // { dg-final { scan-assembler \"_Z1fILPv0EEvv\" } }\n+  f();\n+  f<nullptr>();\n+\n+  // { dg-final { scan-assembler \"_Z1gILM1AFvvE0EEvv\" } }\n+  g();\n+  g<nullptr>();\n+\n+  // { dg-final { scan-assembler \"_Z1fILPv0EEvv\" } }\n+  h();\n+  h<nullptr>();\n+\n+  constexpr void * ptr = nullptr;\n+  f<ptr>();\n+}"}]}