{"sha": "bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIwZjljMDI0OWVlNmExYjUzZTZhZThiZGQ5ZDM1NDM5OTFjNzI5MQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-12-09T19:31:06Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-12-09T19:31:06Z"}, "message": "rs6000: clz/ctz/ffs improvement (PR78683)\n\nOn CPUs that implement popcnt[wd] but not cnttz[wd] we can do better for\nthe ctz sequences than we do today.\n\nCL[TZ]_DEFINED_VALUE_AT_ZERO can return 2, since we always return the\nsame fixed value (only dependent on TARGET_* options).\n\n\n\tPR target/78683\n\t* config/rs6000/rs6000.h (CLZ_DEFINED_VALUE_AT_ZERO): Use\n\tGET_MODE_BITSIZE.  Return 2.\n\t(CTZ_DEFINED_VALUE_AT_ZERO): Use GET_MODE_BITSIZE.  Return 2.  Handle\n\tTARGET_POPCNTD the same as TARGET_CTZ.\n\t* config/rs6000/rs6000.md (ctz<mode>2): Reimplement.\n\t(ffs<mode>2): Reimplement.\n\nFrom-SVN: r243499", "tree": {"sha": "025154146b8b80c430204be6d22a894a97eea00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025154146b8b80c430204be6d22a894a97eea00f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59ab1319cb6664c39d8cf7f05bcf1ec0a625ecdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ab1319cb6664c39d8cf7f05bcf1ec0a625ecdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ab1319cb6664c39d8cf7f05bcf1ec0a625ecdb"}], "stats": {"total": 83, "additions": 48, "deletions": 35}, "files": [{"sha": "269f785d7a1411bbff22614ce3da237ef6047993", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291", "patch": "@@ -1,3 +1,13 @@\n+2016-12-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/78683\n+\t* config/rs6000/rs6000.h (CLZ_DEFINED_VALUE_AT_ZERO): Use\n+\tGET_MODE_BITSIZE.  Return 2.\n+\t(CTZ_DEFINED_VALUE_AT_ZERO): Use GET_MODE_BITSIZE.  Return 2.  Handle\n+\tTARGET_POPCNTD the same as TARGET_CTZ.\n+\t* config/rs6000/rs6000.md (ctz<mode>2): Reimplement.\n+\t(ffs<mode>2): Reimplement.\n+\n 2016-12-09  Andre Vieira <andre.simoesdiasvieira@arm.com>\n \n \tPR rtl-optimization/78255"}, {"sha": "fe314bff8cac1ba8344455e92e169214f6df4bb8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291", "patch": "@@ -2199,14 +2199,15 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n /* The cntlzw and cntlzd instructions return 32 and 64 for input of zero.  */\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n-  ((VALUE) = ((MODE) == SImode ? 32 : 64), 1)\n+  ((VALUE) = GET_MODE_BITSIZE (MODE), 2)\n \n /* The CTZ patterns that are implemented in terms of CLZ return -1 for input of\n-   zero.  The hardware instructions added in Power9 return 32 or 64.  */\n+   zero.  The hardware instructions added in Power9 and the sequences using\n+   popcount return 32 or 64.  */\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)\t\t\t\t\\\n-  ((!TARGET_CTZ)\t\t\t\t\t\t\t\\\n-   ? ((VALUE) = -1, 1)\t\t\t\t\t\t\t\\\n-   : ((VALUE) = ((MODE) == SImode ? 32 : 64), 1))\n+  (TARGET_CTZ || TARGET_POPCNTD\t\t\t\t\t\t\\\n+   ? ((VALUE) = GET_MODE_BITSIZE (MODE), 2)\t\t\t\t\\\n+   : ((VALUE) = -1, 2))\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction"}, {"sha": "777b996991bdc76db3ed38ec8b46e074e6788c47", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=bb0f9c0249ee6a1b53e6ae8bdd9d3543991c7291", "patch": "@@ -2220,17 +2220,8 @@\n   [(set_attr \"type\" \"cntlz\")])\n \n (define_expand \"ctz<mode>2\"\n-  [(set (match_dup 2)\n-\t(neg:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")))\n-   (set (match_dup 3)\n-\t(and:GPR (match_dup 1)\n-\t\t (match_dup 2)))\n-   (set (match_dup 4)\n-\t(clz:GPR (match_dup 3)))\n-   (parallel [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t\t   (minus:GPR (match_dup 5)\n-\t\t\t      (match_dup 4)))\n-\t      (clobber (reg:GPR CA_REGNO))])]\n+   [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t (ctz:GPR (match_operand:GPR 1 \"gpc_reg_operand\")))]\n   \"\"\n {\n   if (TARGET_CTZ)\n@@ -2239,10 +2230,26 @@\n       DONE;\n     }\n \n-  operands[2] = gen_reg_rtx (<MODE>mode);\n-  operands[3] = gen_reg_rtx (<MODE>mode);\n-  operands[4] = gen_reg_rtx (<MODE>mode);\n-  operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 1);\n+  rtx tmp1 = gen_reg_rtx (<MODE>mode);\n+  rtx tmp2 = gen_reg_rtx (<MODE>mode);\n+  rtx tmp3 = gen_reg_rtx (<MODE>mode);\n+\n+  if (TARGET_POPCNTD)\n+    {\n+      emit_insn (gen_add<mode>3 (tmp1, operands[1], constm1_rtx));\n+      emit_insn (gen_one_cmpl<mode>2 (tmp2, operands[1]));\n+      emit_insn (gen_and<mode>3 (tmp3, tmp1, tmp2));\n+      emit_insn (gen_popcntd<mode>2 (operands[0], tmp3));\n+    }\n+  else\n+    {\n+      emit_insn (gen_neg<mode>2 (tmp1, operands[1]));\n+      emit_insn (gen_and<mode>3 (tmp2, operands[1], tmp1));\n+      emit_insn (gen_clz<mode>2 (tmp3, tmp2));\n+      emit_insn (gen_sub<mode>3 (operands[0], GEN_INT (<bits> - 1), tmp3));\n+    }\n+\n+  DONE;\n })\n \n (define_insn \"ctz<mode>2_hw\"\n@@ -2253,23 +2260,18 @@\n   [(set_attr \"type\" \"cntlz\")])\n \n (define_expand \"ffs<mode>2\"\n-  [(set (match_dup 2)\n-\t(neg:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")))\n-   (set (match_dup 3)\n-\t(and:GPR (match_dup 1)\n-\t\t (match_dup 2)))\n-   (set (match_dup 4)\n-\t(clz:GPR (match_dup 3)))\n-   (parallel [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n-\t\t   (minus:GPR (match_dup 5)\n-\t\t\t      (match_dup 4)))\n-\t      (clobber (reg:GPR CA_REGNO))])]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\")\n+\t(ffs:GPR (match_operand:GPR 1 \"gpc_reg_operand\")))]\n   \"\"\n {\n-  operands[2] = gen_reg_rtx (<MODE>mode);\n-  operands[3] = gen_reg_rtx (<MODE>mode);\n-  operands[4] = gen_reg_rtx (<MODE>mode);\n-  operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n+  rtx tmp1 = gen_reg_rtx (<MODE>mode);\n+  rtx tmp2 = gen_reg_rtx (<MODE>mode);\n+  rtx tmp3 = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_neg<mode>2 (tmp1, operands[1]));\n+  emit_insn (gen_and<mode>3 (tmp2, operands[1], tmp1));\n+  emit_insn (gen_clz<mode>2 (tmp3, tmp2));\n+  emit_insn (gen_sub<mode>3 (operands[0], GEN_INT (<bits>), tmp3));\n+  DONE;\n })\n \n "}]}