{"sha": "134afa38f0befc49f51747f3afe931fa4707c2f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0YWZhMzhmMGJlZmM0OWY1MTc0N2YzYWZlOTMxZmE0NzA3YzJmOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-16T15:15:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-16T15:15:35Z"}, "message": "varasm: Fix up __patchable_function_entries handling\n\nThe SECTION_LINK_ORDER changes don't seem to work properly.\n\nIf I compile:\nstatic inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((patchable_function_entry(0, 0))) int foo (int x)\n{\n  return x + 1;\n}\n\nstatic inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((patchable_function_entry(0, 0))) int bar (int x)\n{\n  return x + 2;\n}\n\nint\nbaz (int x)\n{\n  return foo (x) + 1;\n}\n\nint\nqux (int x)\n{\n  return bar (x) + 2;\n}\n(distilled from aarch64 Linux kernel) with\n-O2 -fpatchable-function-entry=2 on aarch64 compiler configured against\nlatest binutils, I get:\n...\n\t.section\t__patchable_function_entries,\"awo\",@progbits,baz\n...\n\t.section\t__patchable_function_entries\n...\nin the assembly, but when it is assembled, one gets:\n  [ 4] __patchable_function_entries PROGBITS        0000000000000000 000060 000008 00 WAL  1   0  8\n  [ 5] .rela__patchable_function_entries RELA            0000000000000000 000280 000018 18   I 12   4  8\n  [ 6] __patchable_function_entries PROGBITS        0000000000000000 000068 000008 00      0   0  8\n  [ 7] .rela__patchable_function_entries RELA            0000000000000000 000298 000018 18   I 12   6  8\ni.e. one writable allocated section with SHF_LINK_ORDER and another\nnon-allocated non-writable without link order.  In the kernel case there is\nalways one entry in the WAL section and then dozens or more in the\nnon-allocated one.\nThe kernel then fails to link:\nWARNING: modpost: vmlinux.o (__patchable_function_entries): unexpected non-allocatable section.\nDid you forget to use \"ax\"/\"aw\" in a .S file?\nNote that for example <linux/init.h> contains\nsection definitions for use in .S files.\nld: .init.data has both ordered [`__patchable_function_entries' in init/main.o] and unordered [`.init.data' in\n+./drivers/firmware/efi/libstub/vsprintf.stub.o] sections\nld: final link failed: bad value\nmake: *** [Makefile:1175: vmlinux] Error 1\n\nThe following patch fixes it by always forcing full section flags for\nSECTION_LINK_ORDER sections.\n\n2020-12-16  Jakub Jelinek  <jakub@redhat.com>\n\n\t* varasm.c (default_elf_asm_named_section): Always force\n\tsection flags even for sections with SECTION_LINK_ORDER flag.", "tree": {"sha": "da5e758223c8f13a5500d93204c5190f9539eb78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da5e758223c8f13a5500d93204c5190f9539eb78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/134afa38f0befc49f51747f3afe931fa4707c2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134afa38f0befc49f51747f3afe931fa4707c2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134afa38f0befc49f51747f3afe931fa4707c2f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134afa38f0befc49f51747f3afe931fa4707c2f8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e42f6ebf483452015c3d102c6ac45741fceb87b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e42f6ebf483452015c3d102c6ac45741fceb87b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e42f6ebf483452015c3d102c6ac45741fceb87b"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "ce5d4491657322ea413b36a40e957c81f0aafb2e", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134afa38f0befc49f51747f3afe931fa4707c2f8/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134afa38f0befc49f51747f3afe931fa4707c2f8/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=134afa38f0befc49f51747f3afe931fa4707c2f8", "patch": "@@ -6791,10 +6791,10 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n \n   /* If we have already declared this section, we can use an\n      abbreviated form to switch back to it -- unless this section is\n-     part of a COMDAT groups or with SHF_GNU_RETAIN, in which case GAS\n-     requires the full declaration every time.  */\n+     part of a COMDAT groups or with SHF_GNU_RETAIN or with SHF_LINK_ORDER,\n+     in which case GAS requires the full declaration every time.  */\n   if (!(HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n-      && !(flags & SECTION_RETAIN)\n+      && !(flags & (SECTION_RETAIN | SECTION_LINK_ORDER))\n       && (flags & SECTION_DECLARED))\n     {\n       fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);"}]}