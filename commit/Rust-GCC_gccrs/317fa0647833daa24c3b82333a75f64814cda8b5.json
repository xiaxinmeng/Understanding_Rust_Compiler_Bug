{"sha": "317fa0647833daa24c3b82333a75f64814cda8b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE3ZmEwNjQ3ODMzZGFhMjRjM2I4MjMzM2E3NWY2NDgxNGNkYThiNQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-12-11T17:39:07Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-12-11T17:39:07Z"}, "message": "re PR fortran/45689 ([F03] Missing transformational intrinsic in the trans_func_f2003 list)\n\n2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45689\n\t* simplify.c (min_max_choose): Add prototype.\n\t(gfc_count): Format correctly.\n\t(simplify_transformation): Pass array argument to init_result_expr.\n\t(gfc_simplify_minval_maxval): Remove.\n\t(gfc_min): New function.\n\t(gfc_simplify_minval): Call simplify_transformation.\n\t(gfc_max): New function.\n\t(gfc_simplify_maxval): Call simplify_transformation.\n\n2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45689\n\t* gfortran.dg/minval_parameter_1.f90: New test.\n\t* gfortran.dg/maxval_parameter_1.f90: New test.\n\nFrom-SVN: r255542", "tree": {"sha": "7ae25d60bf85259234a89fb1ea7e803126e883a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ae25d60bf85259234a89fb1ea7e803126e883a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/317fa0647833daa24c3b82333a75f64814cda8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317fa0647833daa24c3b82333a75f64814cda8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317fa0647833daa24c3b82333a75f64814cda8b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317fa0647833daa24c3b82333a75f64814cda8b5/comments", "author": null, "committer": null, "parents": [{"sha": "ad3f54ab8e70aba72eb278d12d5e3c5d8b0de912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad3f54ab8e70aba72eb278d12d5e3c5d8b0de912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad3f54ab8e70aba72eb278d12d5e3c5d8b0de912"}], "stats": {"total": 192, "additions": 145, "deletions": 47}, "files": [{"sha": "7817b1eb1b8c3455963a9b19496f88789c5282f2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=317fa0647833daa24c3b82333a75f64814cda8b5", "patch": "@@ -1,3 +1,15 @@\n+2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45689\n+\t* simplify.c (min_max_choose): Add prototype.\n+\t(gfc_count): Format correctly.\n+\t(simplify_transformation): Pass array argument to init_result_expr.\n+\t(gfc_simplify_minval_maxval): Remove.\n+\t(gfc_min): New function.\n+\t(gfc_simplify_minval): Call simplify_transformation.\n+\t(gfc_max): New function.\n+\t(gfc_simplify_maxval): Call simplify_transformation.\n+\n 2017-12-10  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR fortran/53478"}, {"sha": "7c3fefe60f9e082214fb44b13c12924144f82f58", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 25, "deletions": 47, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=317fa0647833daa24c3b82333a75f64814cda8b5", "patch": "@@ -29,6 +29,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"constructor.h\"\n #include \"version.h\"\t/* For version_string.  */\n \n+/* Prototypes.  */\n+\n+static void min_max_choose (gfc_expr *, gfc_expr *, int);\n \n gfc_expr gfc_bad_expr;\n \n@@ -436,7 +439,8 @@ typedef gfc_expr* (*transformational_op)(gfc_expr*, gfc_expr*);\n    Interface and implementation mimics arith functions as\n    gfc_add, gfc_multiply, etc.  */\n \n-static gfc_expr* gfc_count (gfc_expr *op1, gfc_expr *op2)\n+static gfc_expr *\n+gfc_count (gfc_expr *op1, gfc_expr *op2)\n {\n   gfc_expr *result;\n \n@@ -666,7 +670,7 @@ simplify_transformation (gfc_expr *array, gfc_expr *dim, gfc_expr *mask,\n \n   result = transformational_result (array, dim, array->ts.type,\n \t\t\t\t    array->ts.kind, &array->where);\n-  init_result_expr (result, init_val, NULL);\n+  init_result_expr (result, init_val, array);\n \n   return !dim || array->rank == 1 ?\n     simplify_transformation_to_scalar (result, array, mask, op) :\n@@ -4539,67 +4543,41 @@ gfc_simplify_max (gfc_expr *e)\n   return simplify_min_max (e, 1);\n }\n \n-\n-/* This is a simplified version of simplify_min_max to provide\n-   simplification of minval and maxval for a vector.  */\n+/* Helper function for gfc_simplify_minval.  */\n \n static gfc_expr *\n-simplify_minval_maxval (gfc_expr *expr, int sign)\n+gfc_min (gfc_expr *op1, gfc_expr *op2)\n {\n-  gfc_constructor *c, *extremum;\n-  gfc_intrinsic_sym * specific;\n-\n-  extremum = NULL;\n-  specific = expr->value.function.isym;\n-\n-  for (c = gfc_constructor_first (expr->value.constructor);\n-       c; c = gfc_constructor_next (c))\n-    {\n-      if (c->expr->expr_type != EXPR_CONSTANT)\n-\treturn NULL;\n-\n-      if (extremum == NULL)\n-\t{\n-\t  extremum = c;\n-\t  continue;\n-\t}\n-\n-      min_max_choose (c->expr, extremum->expr, sign);\n-     }\n-\n-  if (extremum == NULL)\n-    return NULL;\n-\n-  /* Convert to the correct type and kind.  */\n-  if (expr->ts.type != BT_UNKNOWN)\n-    return gfc_convert_constant (extremum->expr,\n-\texpr->ts.type, expr->ts.kind);\n-\n-  if (specific->ts.type != BT_UNKNOWN)\n-    return gfc_convert_constant (extremum->expr,\n-\tspecific->ts.type, specific->ts.kind);\n-\n-  return gfc_copy_expr (extremum->expr);\n+  min_max_choose (op1, op2, -1);\n+  gfc_free_expr (op1);\n+  return op2;\n }\n \n+/* Simplify minval for constant arrays.  */\n \n gfc_expr *\n gfc_simplify_minval (gfc_expr *array, gfc_expr* dim, gfc_expr *mask)\n {\n-  if (array->expr_type != EXPR_ARRAY || array->rank != 1 || dim || mask)\n-    return NULL;\n+  return simplify_transformation (array, dim, mask, INT_MAX, gfc_min);\n+}\n+\n+/* Helper function for gfc_simplify_maxval.  */\n \n-  return simplify_minval_maxval (array, -1);\n+static gfc_expr *\n+gfc_max (gfc_expr *op1, gfc_expr *op2)\n+{\n+  min_max_choose (op1, op2, 1);\n+  gfc_free_expr (op1);\n+  return op2;\n }\n \n \n+/* Simplify maxval for constant arrays.  */\n+\n gfc_expr *\n gfc_simplify_maxval (gfc_expr *array, gfc_expr* dim, gfc_expr *mask)\n {\n-  if (array->expr_type != EXPR_ARRAY || array->rank != 1 || dim || mask)\n-    return NULL;\n-\n-  return simplify_minval_maxval (array, 1);\n+  return simplify_transformation (array, dim, mask, INT_MIN, gfc_max);\n }\n \n "}, {"sha": "c51c2000de0185d08898dc047f216dc7e6d08dca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=317fa0647833daa24c3b82333a75f64814cda8b5", "patch": "@@ -1,3 +1,9 @@\n+2017-12-11  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45689\n+\t* gfortran.dg/minval_parameter_1.f90: New test.\n+\t* gfortran.dg/maxval_parameter_1.f90: New test.\n+\n 2017-12-10  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR fortran/53478"}, {"sha": "a8a1cb05d7146cf46227b77f0787dfbd42d5f06f", "filename": "gcc/testsuite/gfortran.dg/maxval_parameter_1.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxval_parameter_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxval_parameter_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmaxval_parameter_1.f90?ref=317fa0647833daa24c3b82333a75f64814cda8b5", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do  run }\n+! Test for run-time simplification of maxval\n+program main\n+  implicit none\n+  integer, dimension(2,3), parameter :: i = &\n+       & reshape([-1,2,-3,5,-7,11], shape(i))\n+  integer, dimension(3), parameter :: im1 = maxval(i,dim=1)\n+  integer, parameter :: im2 = maxval(i,mask=i<0)\n+  integer, dimension(2), parameter :: im3 = maxval(i,dim=2)\n+  integer, parameter :: im4 = maxval(i, mask=i<-1)\n+  integer, dimension(3), parameter :: im5 = maxval(i,dim=1,mask=i<-2)\n+  integer, dimension(2), parameter :: im6 = maxval(i,dim=2,mask=i<0)\n+\n+  real, dimension(2,3), parameter :: r = &\n+       & reshape([-1.,2.,-3.,5.,-7.,11.], shape(r))\n+  real, dimension(3), parameter :: rm1 = maxval(r,dim=1)\n+  real, parameter :: rm2 = maxval(r,mask=r<0)\n+  real, dimension(2), parameter :: rm3 = maxval(r,dim=2)\n+  real, parameter :: rm4 = maxval(r, mask=r<-1)\n+  real, dimension(3), parameter :: rm5 = maxval(r,dim=1,mask=r<-2)\n+  real, dimension(2), parameter :: rm6 = maxval(r,dim=2,mask=r<0)\n+\n+  character(len=3), parameter :: minv = achar(0) // achar(0) // achar(0)\n+  character(len=3), dimension(2,3), parameter :: c = &\n+       reshape([\"asd\", \"fgh\", \"qwe\", \"jkl\", \"ert\", \"zui\"], shape(c))\n+  character(len=3), parameter :: cm1 = maxval(c)\n+  character(len=3), dimension(3), parameter :: cm2 = maxval(c,dim=1)\n+  character(len=3), dimension(2), parameter :: cm3 = maxval(c,dim=2)\n+  character(len=3), parameter :: cm4 = maxval (c, c<\"g\")\n+  character(len=3), dimension(3), parameter :: cm5 = maxval(c,dim=1,mask=c<\"p\")\n+\n+  if (any (im1 /= [ 2, 5, 11])) call abort\n+  if (im2 /= -1) call abort\n+  if (any (im3 /= [ -1,11])) call abort\n+  if (im4 /= -3) call abort\n+  if (any (im5 /= [-huge(im5)-1, -3, -7])) call abort ! { dg-warning \"Integer outside symmetric range\" }\n+  if (any (im6 /= [-1, -huge(im6)-1])) call abort ! { dg-warning \"Integer outside symmetric range\" }\n+\n+  if (any (rm1 /= [ 2., 5., 11.])) call abort\n+  if (rm2 /= -1.) call abort\n+  if (any (rm3 /= [ -1.,11.])) call abort\n+  if (rm4 /= -3.) call abort\n+  if (any (rm5 /= [-huge(rm5), -3., -7.])) call abort\n+  if (any (rm6 /= [-1.,-huge(rm6)])) call abort\n+\n+  if (cm1 /= \"zui\") call abort\n+  if (any (cm2 /= [\"fgh\", \"qwe\", \"zui\" ])) call abort\n+  if (any (cm3 /= [\"qwe\", \"zui\" ])) call abort\n+  if (cm4 /= \"fgh\") call abort\n+  if (any(cm5 /= [ \"fgh\", \"jkl\", \"ert\" ] )) call abort\n+end program main"}, {"sha": "2d0193596f94edf8cb2e8cfd165130e8932f097e", "filename": "gcc/testsuite/gfortran.dg/minval_parameter_1.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ftestsuite%2Fgfortran.dg%2Fminval_parameter_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317fa0647833daa24c3b82333a75f64814cda8b5/gcc%2Ftestsuite%2Fgfortran.dg%2Fminval_parameter_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fminval_parameter_1.f90?ref=317fa0647833daa24c3b82333a75f64814cda8b5", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do  run }\n+! Test for run-time simplification of minval\n+program main\n+  implicit none\n+  integer, dimension(2,3), parameter :: i = &\n+       & reshape([-1,2,-3,5,-7,11], shape(i))\n+  integer, dimension(3), parameter :: im1 = minval(i,dim=1)\n+  integer, parameter :: im2 = minval(i,mask=i>4)\n+  integer, dimension(2), parameter :: im3 = minval(i,dim=2)\n+  integer, parameter :: im4 = minval(i, mask=i>-1)\n+  integer, dimension(3), parameter :: im5 = minval(i,dim=1,mask=i>4)\n+  integer, dimension(2), parameter :: im6 = minval(i,dim=2,mask=i>4)\n+\n+  real, dimension(2,3), parameter :: r = &\n+       & reshape([-1.,2.,-3.,5.,-7.,11.], shape(r))\n+  real, dimension(3), parameter :: rm1 = minval(r,dim=1)\n+  real, parameter :: rm2 = minval(r,mask=r>4)\n+  real, dimension(2), parameter :: rm3 = minval(r,dim=2)\n+  real, parameter :: rm4 = minval(r, mask=r>-1)\n+  real, dimension(3), parameter :: rm5 = minval(r,dim=1,mask=r>4)\n+  real, dimension(2), parameter :: rm6 = minval(r,dim=2,mask=r>4)\n+\n+  character(len=3), parameter :: maxv = achar(255) // achar(255) // achar(255)\n+  character(len=3), dimension(2,3), parameter :: c = &\n+       reshape([\"asd\", \"fgh\", \"qwe\", \"jkl\", \"ert\", \"zui\"], shape(c))\n+  character(len=3), parameter :: cm1 = minval(c)\n+  character(len=3), dimension(3), parameter :: cm2 = minval(c,dim=1)\n+  character(len=3), dimension(2), parameter :: cm3 = minval(c,dim=2)\n+  character(len=3), parameter :: cm4 = minval (c, c>\"g\")\n+  character(len=3), dimension(3), parameter :: cm5 = minval(c,dim=1,mask=c>\"g\")\n+\n+  if (any (im1 /= [ -1, -3, -7])) call abort\n+  if (im2 /= 5) call abort\n+  if (any (im3 /= [ -7,2])) call abort\n+  if (im4 /= 2) call abort\n+  if (any (im5 /= [huge(im5), 5, 11])) call abort\n+  if (any (im6 /= [huge(im6), 5])) call abort\n+\n+  if (any (rm1 /= [ -1., -3., -7.])) call abort\n+  if (rm2 /= 5) call abort\n+  if (any (rm3 /= [ -7.,2.])) call abort\n+  if (rm4 /= 2) call abort\n+  if (any (rm5 /= [huge(rm5), 5., 11.])) call abort\n+  if (any (rm6 /= [huge(rm6), 5.])) call abort\n+\n+  if (cm1 /= \"asd\") call abort\n+  if (any (cm2 /= [\"asd\", \"jkl\", \"ert\" ])) call abort\n+  if (any (cm3 /= [\"asd\", \"fgh\" ])) call abort\n+  if (cm4 /= \"jkl\") call abort\n+  if (any(cm5 /= [ maxv, \"jkl\", \"zui\" ] )) call abort\n+end program main"}]}