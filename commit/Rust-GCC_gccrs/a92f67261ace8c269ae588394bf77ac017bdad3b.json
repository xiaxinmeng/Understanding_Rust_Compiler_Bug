{"sha": "a92f67261ace8c269ae588394bf77ac017bdad3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkyZjY3MjYxYWNlOGMyNjlhZTU4ODM5NGJmNzdhYzAxN2JkYWQzYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-11T16:35:18Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-11T16:35:18Z"}, "message": "[PATCH] DECL_ASSEMBLER_NAME and friends\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg00582.html\n\t* tree.h (DECL_ASSEMBLER_NAME_SET_P): Don't check\n\tHAS_DECL_ASSEMBLER_NAME_P.\n\t* gimple-expr.c (gimple_decl_printable_name: Check\n\tHAS_DECL_ASSEMBLER_NAME_P too.\n\t* ipa-utils.h (type_in_anonymous_namespace_p): Check\n\tDECL_ASSEMBLER_NAME_SET_P of TYPE_NAME.\n\t(odr_type_p): No need to assert TYPE_NAME is a TYPE_DECL.\n\t* passes.c (rest_of_decl_compilation): Check\n\tHAS_DECL_ASSEMBLER_NAME_P too.\n\t* recog.c (verify_changes): Likewise.\n\t* tree-pretty-print.c (dump_decl_name): Likewise.\n\t* tree-ssa-structalias.c (alias_get_name): Likewise.  Reimplement.\n\n\tc/\n\t* c-decl.c (grokdeclarator): Check HAS_DECL_ASSEMBLER_NAME_P too.\n\nFrom-SVN: r253649", "tree": {"sha": "3391663508708f07e1d69dd68f414f42a8bb0a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3391663508708f07e1d69dd68f414f42a8bb0a94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a92f67261ace8c269ae588394bf77ac017bdad3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92f67261ace8c269ae588394bf77ac017bdad3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a92f67261ace8c269ae588394bf77ac017bdad3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a92f67261ace8c269ae588394bf77ac017bdad3b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e7d02606ea8b0dac11887b1f759ea61d5394d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7d02606ea8b0dac11887b1f759ea61d5394d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7d02606ea8b0dac11887b1f759ea61d5394d86"}], "stats": {"total": 109, "additions": 61, "deletions": 48}, "files": [{"sha": "d2518321cdab1a3922b44e6c263fa9f91d51a30a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -1,5 +1,18 @@\n 2017-10-11  Nathan Sidwell  <nathan@acm.org>\n \n+\t* tree.h (DECL_ASSEMBLER_NAME_SET_P): Don't check\n+\tHAS_DECL_ASSEMBLER_NAME_P.\n+\t* gimple-expr.c (gimple_decl_printable_name: Check\n+\tHAS_DECL_ASSEMBLER_NAME_P too.\n+\t* ipa-utils.h (type_in_anonymous_namespace_p): Check\n+\tDECL_ASSEMBLER_NAME_SET_P of TYPE_NAME.\n+\t(odr_type_p): No need to assert TYPE_NAME is a TYPE_DECL.\n+\t* passes.c (rest_of_decl_compilation): Check\n+\tHAS_DECL_ASSEMBLER_NAME_P too.\n+\t* recog.c (verify_changes): Likewise.\n+\t* tree-pretty-print.c (dump_decl_name): Likewise.\n+\t* tree-ssa-structalias.c (alias_get_name): Likewise.  Reimplement.\n+\n \t* tree.h (DECL_ASSEMBLER_NAME_RAW): New.\n \t(SET_DECL_ASSEMBLER_NAME): Use it.\n \t(DECL_ASSEMBLER_NAME_SET_P): Likewise."}, {"sha": "baf57c1f95add0028dd816f7f1a7c5a14a6ca298", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -1,3 +1,7 @@\n+2017-10-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-decl.c (grokdeclarator): Check HAS_DECL_ASSEMBLER_NAME_P too.\n+\n 2017-10-10  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* c-parser.c (c_parser_cilk_clause_vectorlength): Use wi::to_wide when"}, {"sha": "26b34ab3e50ab461fb7a228688c42895345ff4fc", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -7011,7 +7011,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \n   /* This is the earliest point at which we might know the assembler\n      name of a variable.  Thus, if it's known before this, die horribly.  */\n-    gcc_assert (!DECL_ASSEMBLER_NAME_SET_P (decl));\n+    gcc_assert (!HAS_DECL_ASSEMBLER_NAME_P (decl)\n+\t\t|| !DECL_ASSEMBLER_NAME_SET_P (decl));\n \n     if (warn_cxx_compat\n \t&& VAR_P (decl)"}, {"sha": "324f101658515ec2a2d3480af9ceb9d588a635d2", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -337,9 +337,8 @@ gimple_decl_printable_name (tree decl, int verbosity)\n   if (!DECL_NAME (decl))\n     return NULL;\n \n-  if (DECL_ASSEMBLER_NAME_SET_P (decl))\n+  if (HAS_DECL_ASSEMBLER_NAME_P (decl) && DECL_ASSEMBLER_NAME_SET_P (decl))\n     {\n-      const char *str, *mangled_str;\n       int dmgl_opts = DMGL_NO_OPTS;\n \n       if (verbosity >= 2)\n@@ -352,9 +351,10 @@ gimple_decl_printable_name (tree decl, int verbosity)\n \t    dmgl_opts |= DMGL_PARAMS;\n \t}\n \n-      mangled_str = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-      str = cplus_demangle_v3 (mangled_str, dmgl_opts);\n-      return (str) ? str : mangled_str;\n+      const char *mangled_str\n+\t= IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME_RAW (decl));\n+      const char *str = cplus_demangle_v3 (mangled_str, dmgl_opts);\n+      return str ? str : mangled_str;\n     }\n \n   return IDENTIFIER_POINTER (DECL_NAME (decl));"}, {"sha": "2affbd66d13780f9fcf636a7ff5546887b923fe2", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -217,11 +217,11 @@ type_in_anonymous_namespace_p (const_tree t)\n     {\n       /* C++ FE uses magic <anon> as assembler names of anonymous types.\n  \t verify that this match with type_in_anonymous_namespace_p.  */\n-      gcc_checking_assert (!in_lto_p || !DECL_ASSEMBLER_NAME_SET_P (t)\n-\t\t\t   || !strcmp\n-\t\t\t\t (\"<anon>\",\n-\t\t\t\t  IDENTIFIER_POINTER\n-\t\t\t\t     (DECL_ASSEMBLER_NAME (TYPE_NAME (t)))));\n+      gcc_checking_assert (!in_lto_p\n+\t\t\t   || !DECL_ASSEMBLER_NAME_SET_P (TYPE_NAME (t))\n+\t\t\t   || !strcmp (\"<anon>\",\n+\t\t\t\t       IDENTIFIER_POINTER\n+\t\t\t\t       (DECL_ASSEMBLER_NAME (TYPE_NAME (t)))));\n       return true;\n     }\n   return false;\n@@ -245,14 +245,13 @@ odr_type_p (const_tree t)\n   if (type_in_anonymous_namespace_p (t))\n     return true;\n \n-  if (TYPE_NAME (t) && TREE_CODE (TYPE_NAME (t)) == TYPE_DECL\n-      && DECL_ASSEMBLER_NAME_SET_P (TYPE_NAME (t)))\n+  if (TYPE_NAME (t) && DECL_ASSEMBLER_NAME_SET_P (TYPE_NAME (t)))\n     {\n       /* C++ FE uses magic <anon> as assembler names of anonymous types.\n  \t verify that this match with type_in_anonymous_namespace_p.  */\n       gcc_checking_assert (strcmp (\"<anon>\",\n-\t\t\t\t      IDENTIFIER_POINTER\n-\t\t\t\t\t(DECL_ASSEMBLER_NAME (TYPE_NAME (t)))));\n+\t\t\t\t   IDENTIFIER_POINTER\n+\t\t\t\t   (DECL_ASSEMBLER_NAME (TYPE_NAME (t)))));\n       return true;\n     }\n   return false;"}, {"sha": "65568e052fcd7eeae32307109e4ba9c4bfb6ebe0", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -197,7 +197,9 @@ rest_of_decl_compilation (tree decl,\n \n   /* Can't defer this, because it needs to happen before any\n      later function definitions are processed.  */\n-  if (DECL_ASSEMBLER_NAME_SET_P (decl) && DECL_REGISTER (decl))\n+  if (HAS_DECL_ASSEMBLER_NAME_P (decl)\n+      && DECL_ASSEMBLER_NAME_SET_P (decl)\n+      && DECL_REGISTER (decl))\n     make_decl_rtl (decl);\n \n   /* Forward declarations for nested functions are not \"external\","}, {"sha": "b8e9b1ba3a83af68ec3f3df95b068f63aafa9350", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -408,6 +408,7 @@ verify_changes (int num)\n \t       && REG_P (changes[i].old)\n \t       && asm_noperands (PATTERN (object)) > 0\n \t       && REG_EXPR (changes[i].old) != NULL_TREE\n+\t       && HAS_DECL_ASSEMBLER_NAME_P (REG_EXPR (changes[i].old))\n \t       && DECL_ASSEMBLER_NAME_SET_P (REG_EXPR (changes[i].old))\n \t       && DECL_REGISTER (REG_EXPR (changes[i].old)))\n \t{"}, {"sha": "61a28c6757fbc7db468f6c86d27e47a569fd2671", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -249,8 +249,10 @@ dump_decl_name (pretty_printer *pp, tree node, dump_flags_t flags)\n {\n   if (DECL_NAME (node))\n     {\n-      if ((flags & TDF_ASMNAME) && DECL_ASSEMBLER_NAME_SET_P (node))\n-\tpp_tree_identifier (pp, DECL_ASSEMBLER_NAME (node));\n+      if ((flags & TDF_ASMNAME)\n+\t  && HAS_DECL_ASSEMBLER_NAME_P (node)\n+\t  && DECL_ASSEMBLER_NAME_SET_P (node))\n+\tpp_tree_identifier (pp, DECL_ASSEMBLER_NAME_RAW (node));\n       /* For DECL_NAMELESS names look for embedded uids in the\n \t names and sanitize them for TDF_NOUID.  */\n       else if ((flags & TDF_NOUID) && DECL_NAMELESS (node))"}, {"sha": "89135eaf312cf502616ae58ae8ca4e5c73aea2f5", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -2849,41 +2849,33 @@ lookup_vi_for_tree (tree t)\n static const char *\n alias_get_name (tree decl)\n {\n-  const char *res = NULL;\n-  char *temp;\n-\n-  if (!dump_file)\n-    return \"NULL\";\n-\n-  if (TREE_CODE (decl) == SSA_NAME)\n-    {\n-      res = get_name (decl);\n-      if (res)\n-\ttemp = xasprintf (\"%s_%u\", res, SSA_NAME_VERSION (decl));\n-      else\n-\ttemp = xasprintf (\"_%u\", SSA_NAME_VERSION (decl));\n-      res = ggc_strdup (temp);\n-      free (temp);\n-    }\n-  else if (DECL_P (decl))\n+  const char *res = \"NULL\";\n+  if (dump_file)\n     {\n-      if (DECL_ASSEMBLER_NAME_SET_P (decl))\n-\tres = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-      else\n+      char *temp = NULL;\n+      if (TREE_CODE (decl) == SSA_NAME)\n+\t{\n+\t  res = get_name (decl);\n+\t  temp = xasprintf (\"%s_%u\", res ? res : \"\", SSA_NAME_VERSION (decl));\n+\t}\n+      else if (HAS_DECL_ASSEMBLER_NAME_P (decl)\n+\t       && DECL_ASSEMBLER_NAME_SET_P (decl))\n+\tres = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME_RAW (decl));\n+      else if (DECL_P (decl))\n \t{\n \t  res = get_name (decl);\n \t  if (!res)\n-\t    {\n-\t      temp = xasprintf (\"D.%u\", DECL_UID (decl));\n-\t      res = ggc_strdup (temp);\n-\t      free (temp);\n-\t    }\n+\t    temp = xasprintf (\"D.%u\", DECL_UID (decl));\n+\t}\n+\n+      if (temp)\n+\t{\n+\t  res = ggc_strdup (temp);\n+\t  free (temp);\n \t}\n     }\n-  if (res != NULL)\n-    return res;\n \n-  return \"NULL\";\n+  return res;\n }\n \n /* Find the variable id for tree T in the map."}, {"sha": "0fd383c4736707077787c0d228f2167a1b56b326", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a92f67261ace8c269ae588394bf77ac017bdad3b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a92f67261ace8c269ae588394bf77ac017bdad3b", "patch": "@@ -2734,8 +2734,7 @@ extern void decl_value_expr_insert (tree, tree);\n    the NODE might still have a DECL_ASSEMBLER_NAME -- it just hasn't been set\n    yet.  */\n #define DECL_ASSEMBLER_NAME_SET_P(NODE) \\\n-  (HAS_DECL_ASSEMBLER_NAME_P (NODE) \\\n-   && DECL_ASSEMBLER_NAME_RAW (NODE) != NULL_TREE)\n+  (DECL_ASSEMBLER_NAME_RAW (NODE) != NULL_TREE)\n \n /* Set the DECL_ASSEMBLER_NAME for NODE to NAME.  */\n #define SET_DECL_ASSEMBLER_NAME(NODE, NAME) \\"}]}