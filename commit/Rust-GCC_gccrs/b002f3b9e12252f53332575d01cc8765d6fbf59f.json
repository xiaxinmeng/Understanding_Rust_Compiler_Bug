{"sha": "b002f3b9e12252f53332575d01cc8765d6fbf59f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwMmYzYjllMTIyNTJmNTMzMzI1NzVkMDFjYzg3NjVkNmZiZjU5Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-01-27T12:30:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-01-27T12:30:43Z"}, "message": "re PR tree-optimization/71433 (-Warray-bounds false positive with -O2)\n\n2017-01-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71433\n\t* tree-vrp.c (register_new_assert_for): Revert earlier changes.\n\t(compare_assert_loc): New function.\n\t(process_assert_insertions): Sort and optimize assert locations\n\tto remove duplicates and push down identical assertions on\n\tedges to their destination block.\n\n\t* gcc.dg/Warray-bounds-21.c: New testcase.\n\nFrom-SVN: r244974", "tree": {"sha": "0990a8ec2839c1b7a30c2eb4a0a97dbb5d9c3a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0990a8ec2839c1b7a30c2eb4a0a97dbb5d9c3a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b002f3b9e12252f53332575d01cc8765d6fbf59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b002f3b9e12252f53332575d01cc8765d6fbf59f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b002f3b9e12252f53332575d01cc8765d6fbf59f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b002f3b9e12252f53332575d01cc8765d6fbf59f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38f50ab65ae67aa9896ca7a18a80d77b4648a0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f50ab65ae67aa9896ca7a18a80d77b4648a0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f50ab65ae67aa9896ca7a18a80d77b4648a0b0"}], "stats": {"total": 144, "additions": 128, "deletions": 16}, "files": [{"sha": "a9f2421636885af53697afc4f0b89005ae9520aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b002f3b9e12252f53332575d01cc8765d6fbf59f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b002f3b9e12252f53332575d01cc8765d6fbf59f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b002f3b9e12252f53332575d01cc8765d6fbf59f", "patch": "@@ -1,3 +1,12 @@\n+2017-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71433\n+\t* tree-vrp.c (register_new_assert_for): Revert earlier changes.\n+\t(compare_assert_loc): New function.\n+\t(process_assert_insertions): Sort and optimize assert locations\n+\tto remove duplicates and push down identical assertions on\n+\tedges to their destination block.\n+\n 2017-01-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79244"}, {"sha": "2c044f58d9e2bdae1898994bc73f493c18bec34b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b002f3b9e12252f53332575d01cc8765d6fbf59f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b002f3b9e12252f53332575d01cc8765d6fbf59f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b002f3b9e12252f53332575d01cc8765d6fbf59f", "patch": "@@ -1,3 +1,8 @@\n+2017-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71433\n+\t* gcc.dg/Warray-bounds-21.c: New testcase.\n+\n 2017-01-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79244"}, {"sha": "759944fc00c88f32469dd4c72ab2030cb71f65cb", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-21.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b002f3b9e12252f53332575d01cc8765d6fbf59f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b002f3b9e12252f53332575d01cc8765d6fbf59f/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-21.c?ref=b002f3b9e12252f53332575d01cc8765d6fbf59f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+int t[1];\n+int a (void);\n+int fct (int r, long e, int neg)\n+{\n+  int d = 0;\n+  if (r == 4)\n+    r = neg ? 3 : 2;\n+  if (__builtin_expect(e < -52, 0))\n+    d = r == 0 && a () ? 1 : 2;\n+  else\n+    {\n+      int i, n = 53;\n+      if (e < 0)\n+\tn += e;\n+      for (i = 1 ; i < n / 64 + 1 ; i++)\n+\td = t[i]; /* { dg-bogus \"array bounds\" } */\n+    }\n+  return d;\n+}"}, {"sha": "5c43e35d89cce921cd14eaef8a75b5f8596867c6", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 92, "deletions": 16, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b002f3b9e12252f53332575d01cc8765d6fbf59f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b002f3b9e12252f53332575d01cc8765d6fbf59f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b002f3b9e12252f53332575d01cc8765d6fbf59f", "patch": "@@ -5032,18 +5032,6 @@ register_new_assert_for (tree name, tree expr,\n \t      loc->si = si;\n \t      return;\n \t    }\n-\t  /* If we have the same assertion on all incoming edges of a BB\n-\t     instead insert it at the beginning of it.  */\n-\t  if (e && loc->e\n-\t      && e != loc->e\n-\t      && dest_bb == loc->e->dest\n-\t      && EDGE_COUNT (dest_bb->preds) == 2)\n-\t    {\n-\t      loc->bb = dest_bb;\n-\t      loc->e = NULL;\n-\t      loc->si = gsi_none ();\n-\t      return;\n-\t    }\n \t}\n \n       /* Update the last node of the list and move to the next one.  */\n@@ -6473,6 +6461,41 @@ process_assert_insertions_for (tree name, assert_locus *loc)\n   gcc_unreachable ();\n }\n \n+/* Qsort helper for sorting assert locations.  */\n+\n+static int\n+compare_assert_loc (const void *pa, const void *pb)\n+{\n+  assert_locus * const a = *(assert_locus * const *)pa;\n+  assert_locus * const b = *(assert_locus * const *)pb;\n+  if (! a->e && b->e)\n+    return 1;\n+  else if (a->e && ! b->e)\n+    return -1;\n+\n+  /* Sort after destination index.  */\n+  if (! a->e && ! b->e)\n+    ;\n+  else if (a->e->dest->index > b->e->dest->index)\n+    return 1;\n+  else if (a->e->dest->index < b->e->dest->index)\n+    return -1;\n+\n+  /* Sort after comp_code.  */\n+  if (a->comp_code > b->comp_code)\n+    return 1;\n+  else if (a->comp_code < b->comp_code)\n+    return -1;\n+\n+  /* Break the tie using hashing and source/bb index.  */\n+  hashval_t ha = iterative_hash_expr (a->expr, iterative_hash_expr (a->val, 0));\n+  hashval_t hb = iterative_hash_expr (b->expr, iterative_hash_expr (b->val, 0));\n+  if (ha == hb)\n+    return (a->e && b->e\n+\t    ? a->e->src->index - b->e->src->index\n+\t    : a->bb->index - b->bb->index);\n+  return ha - hb;\n+}\n \n /* Process all the insertions registered for every name N_i registered\n    in NEED_ASSERT_FOR.  The list of assertions to be inserted are\n@@ -6494,13 +6517,66 @@ process_assert_insertions (void)\n       assert_locus *loc = asserts_for[i];\n       gcc_assert (loc);\n \n-      while (loc)\n+      auto_vec<assert_locus *, 16> asserts;\n+      for (; loc; loc = loc->next)\n+\tasserts.safe_push (loc);\n+      asserts.qsort (compare_assert_loc);\n+\n+      /* Push down common asserts to successors and remove redundant ones.  */\n+      unsigned ecnt = 0;\n+      assert_locus *common = NULL;\n+      unsigned commonj = 0;\n+      for (unsigned j = 0; j < asserts.length (); ++j)\n+\t{\n+\t  loc = asserts[j];\n+\t  if (! loc->e)\n+\t    common = NULL;\n+\t  else if (! common\n+\t\t   || loc->e->dest != common->e->dest\n+\t\t   || loc->comp_code != common->comp_code\n+\t\t   || ! operand_equal_p (loc->val, common->val, 0)\n+\t\t   || ! operand_equal_p (loc->expr, common->expr, 0))\n+\t    {\n+\t      commonj = j;\n+\t      common = loc;\n+\t      ecnt = 1;\n+\t    }\n+\t  else if (loc->e == asserts[j-1]->e)\n+\t    {\n+\t      /* Remove duplicate asserts.  */\n+\t      free (asserts[j-1]);\n+\t      asserts[j-1] = NULL;\n+\t    }\n+\t  else\n+\t    {\n+\t      ecnt++;\n+\t      if (EDGE_COUNT (common->e->dest->preds) == ecnt)\n+\t\t{\n+\t\t  /* We have the same assertion on all incoming edges of a BB.\n+\t\t     Insert it at the beginning of that block.  */\n+\t\t  loc->bb = loc->e->dest;\n+\t\t  loc->e = NULL;\n+\t\t  loc->si = gsi_none ();\n+\t\t  common = NULL;\n+\t\t  /* Clear asserts commoned.  */\n+\t\t  for (; commonj != j; ++commonj)\n+\t\t    if (asserts[commonj])\n+\t\t      {\n+\t\t\tfree (asserts[commonj]);\n+\t\t\tasserts[commonj] = NULL;\n+\t\t      }\n+\t\t}\n+\t    }\n+\t}\n+\n+      for (unsigned j = 0; j < asserts.length (); ++j)\n \t{\n-\t  assert_locus *next = loc->next;\n+\t  loc = asserts[j];\n+\t  if (! loc)\n+\t    continue;\n \t  update_edges_p |= process_assert_insertions_for (ssa_name (i), loc);\n-\t  free (loc);\n-\t  loc = next;\n \t  num_asserts++;\n+\t  free (loc);\n \t}\n     }\n "}]}