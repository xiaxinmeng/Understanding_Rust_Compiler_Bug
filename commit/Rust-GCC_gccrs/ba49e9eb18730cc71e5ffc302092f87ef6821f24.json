{"sha": "ba49e9eb18730cc71e5ffc302092f87ef6821f24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0OWU5ZWIxODczMGNjNzFlNWZmYzMwMjA5MmY4N2VmNjgyMWYyNA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-26T17:31:01Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-27T17:47:17Z"}, "message": "libstdc++: Add missing friend declarations in some range adaptors\n\nSome of the range adaptors have distinct constant and non-constant\niterator/sentinel types, along with converting constructors that can convert a\nnon-constant iterator/sentinel to a constant iterator/sentinel.  This patch adds\nthe missing appropriate friend declarations in order to make these converting\nconstructors well formed.\n\nStrictly speaking it seems the friendship relations don't need to go both ways\n-- we could get away with declaring e.g. friend _Iterator<false>; instead of\nfriend _Iterator<!_Const>; but both reference implementations seem to use the\nlatter symmetric form anyway.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (transform_view::_Iterator<_Const>): Befriend\n\t_Iterator<!_Const>.\n\t(transform_view::_Sentinel<_Const>): Befriend _Sentinel<!_Const>.\n\t(take_view::_Sentinel<_Const>): Likewise.\n\t(take_while_view::_Sentinel<_Const>): Likewise.\n\t(split_view::_OuterIter<_Const>): Befriend _OuterIter<!_Const>.\n\t* testsuite/std/ranges/adaptors/split.cc: Augment test.\n\t* testsuite/std/ranges/adaptors/take.cc: Augment test.\n\t* testsuite/std/ranges/adaptors/take_while.cc: Augment test.\n\t* testsuite/std/ranges/adaptors/transform.cc: Augment test.", "tree": {"sha": "ee475a61860977eda886a2ecd3e52d191986f9b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee475a61860977eda886a2ecd3e52d191986f9b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba49e9eb18730cc71e5ffc302092f87ef6821f24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba49e9eb18730cc71e5ffc302092f87ef6821f24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba49e9eb18730cc71e5ffc302092f87ef6821f24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba49e9eb18730cc71e5ffc302092f87ef6821f24/comments", "author": null, "committer": null, "parents": [{"sha": "10a32d479861c3a39987d3468f6a400e907499a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10a32d479861c3a39987d3468f6a400e907499a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10a32d479861c3a39987d3468f6a400e907499a2"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "dd28617d8d9d3faa86cca1abb4877dfa62156444", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ba49e9eb18730cc71e5ffc302092f87ef6821f24", "patch": "@@ -1,5 +1,16 @@\n 2020-02-27  Patrick Palka  <ppalka@redhat.com>\n \n+\t* include/std/ranges (transform_view::_Iterator<_Const>): Befriend\n+\t_Iterator<!_Const>.\n+\t(transform_view::_Sentinel<_Const>): Befriend _Sentinel<!_Const>.\n+\t(take_view::_Sentinel<_Const>): Likewise.\n+\t(take_while_view::_Sentinel<_Const>): Likewise.\n+\t(split_view::_OuterIter<_Const>): Befriend _OuterIter<!_Const>.\n+\t* testsuite/std/ranges/adaptors/split.cc: Augment test.\n+\t* testsuite/std/ranges/adaptors/take.cc: Augment test.\n+\t* testsuite/std/ranges/adaptors/take_while.cc: Augment test.\n+\t* testsuite/std/ranges/adaptors/transform.cc: Augment test.\n+\n \t* testsuite/25_algorithms/copy/constrained.cc: Don't assume that the\n \tbase() of a vector<>::iterator is a pointer.\n \t* testsuite/25_algorithms/copy_backward/constrained.cc: Likewise."}, {"sha": "38d497ec88e187d5b130255934e60deac36e9f8c", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=ba49e9eb18730cc71e5ffc302092f87ef6821f24", "patch": "@@ -1759,6 +1759,7 @@ namespace views\n \t    requires indirectly_swappable<_Base_iter>\n \t  { return ranges::iter_swap(__x._M_current, __y._M_current); }\n \n+\t  friend _Iterator<!_Const>;\n \t  friend _Sentinel<_Const>;\n \t};\n \n@@ -1811,6 +1812,8 @@ namespace views\n \t  operator-(const _Sentinel& __y, const _Iterator<_Const>& __x)\n \t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n \t  { return __y.__distance_from(__x); }\n+\n+\t  friend _Sentinel<!_Const>;\n \t};\n \n       _Vp _M_base = _Vp();\n@@ -1916,6 +1919,8 @@ namespace views\n \n \t  friend constexpr bool operator==(const _CI& __y, const _Sentinel& __x)\n \t  { return __y.count() == 0 || __y.base() == __x._M_end; }\n+\n+\t  friend _Sentinel<!_Const>;\n \t};\n \n       _Vp _M_base = _Vp();\n@@ -2055,6 +2060,8 @@ namespace views\n \t  friend constexpr bool\n \t  operator==(const iterator_t<_Base>& __x, const _Sentinel& __y)\n \t  { return __y._M_end == __x || !std::__invoke(*__y._M_pred, *__x); }\n+\n+\t  friend _Sentinel<!_Const>;\n \t};\n \n       _Vp _M_base = _Vp();\n@@ -2730,6 +2737,7 @@ namespace views\n \t  operator==(const _OuterIter& __x, default_sentinel_t)\n \t  { return __x.__at_end(); };\n \n+\t  friend _OuterIter<!_Const>;\n \t  friend _InnerIter<_Const>;\n \t};\n "}, {"sha": "e7556725e4f924e36b13d4ab2a553841c7caa699", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/split.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc?ref=ba49e9eb18730cc71e5ffc302092f87ef6821f24", "patch": "@@ -108,6 +108,19 @@ test05()\n \t\t\tstr | views::filter(not_space_p)) );\n }\n \n+void\n+test06()\n+{\n+  std::string str = \"hello world\";\n+  auto v = str | views::transform(std::identity{}) | views::split(' ');\n+\n+  // Verify that _Iterator<false> is implicitly convertible to _Iterator<true>.\n+  static_assert(!std::same_as<decltype(ranges::begin(v)),\n+\t\t\t      decltype(ranges::cbegin(v))>);\n+  auto b = ranges::cbegin(v);\n+  b = ranges::begin(v);\n+}\n+\n int\n main()\n {\n@@ -116,4 +129,5 @@ main()\n   test03();\n   test04();\n   test05();\n+  test06();\n }"}, {"sha": "c42505b44cb0f3694088c2cd320579acd70ad007", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/take.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake.cc?ref=ba49e9eb18730cc71e5ffc302092f87ef6821f24", "patch": "@@ -19,6 +19,7 @@\n // { dg-do run { target c++2a } }\n \n #include <algorithm>\n+#include <forward_list>\n #include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n@@ -85,11 +86,26 @@ test04()\n   VERIFY( ranges::equal(v | views::take(5), (int[]){1,2,3}) );\n }\n \n+void\n+test05()\n+{\n+  std::forward_list<int> x = {1,2,3,4,5};\n+  auto v = x | views::transform(std::negate{}) | views::take(4);\n+\n+  // Verify that _Sentinel<false> is implicitly convertible to _Sentinel<true>.\n+  static_assert(!ranges::common_range<decltype(v)>);\n+  static_assert(!std::same_as<decltype(ranges::end(v)),\n+\t\t\t      decltype(ranges::cend(v))>);\n+  auto b = ranges::cend(v);\n+  b = ranges::end(v);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}, {"sha": "d587127b97ebe54039df6434dc73b5057d208c20", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/take_while.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake_while.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake_while.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftake_while.cc?ref=ba49e9eb18730cc71e5ffc302092f87ef6821f24", "patch": "@@ -19,6 +19,7 @@\n // { dg-do run { target c++2a } }\n \n #include <algorithm>\n+#include <forward_list>\n #include <ranges>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n@@ -54,9 +55,25 @@ test02()\n   static_assert(ranges::forward_range<R>);\n }\n \n+void\n+test03()\n+{\n+  std::forward_list<int> x = {1,2,3,4,5};\n+  auto v\n+    = x | views::transform(std::negate{}) | views::take_while(std::identity{});\n+\n+  // Verify that _Sentinel<false> is implicitly convertible to _Sentinel<true>.\n+  static_assert(!ranges::common_range<decltype(v)>);\n+  static_assert(!std::same_as<decltype(ranges::end(v)),\n+\t\t\t      decltype(ranges::cend(v))>);\n+  auto b = ranges::cend(v);\n+  b = ranges::end(v);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n+  test03();\n }"}, {"sha": "c14e36e0cefa5609d5caa8349f3e695ab7b9b852", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/transform.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftransform.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba49e9eb18730cc71e5ffc302092f87ef6821f24/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftransform.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftransform.cc?ref=ba49e9eb18730cc71e5ffc302092f87ef6821f24", "patch": "@@ -100,11 +100,34 @@ test04()\n     }\n }\n \n+void\n+test05()\n+{\n+  int x[] = {1,2,3,4,5};\n+  auto i = std::counted_iterator(x, 5);\n+  auto r = ranges::subrange{i, std::default_sentinel};\n+  auto v = r | views::transform(std::negate{});\n+\n+  // Verify that _Iterator<false> is implicitly convertible to _Iterator<true>.\n+  static_assert(!std::same_as<decltype(ranges::begin(v)),\n+\t\t\t      decltype(ranges::cbegin(v))>);\n+  auto a = ranges::cbegin(v);\n+  a = ranges::begin(v);\n+\n+  // Verify that _Sentinel<false> is implicitly convertible to _Sentinel<true>.\n+  static_assert(!ranges::common_range<decltype(v)>);\n+  static_assert(!std::same_as<decltype(ranges::end(v)),\n+\t\t\t      decltype(ranges::cend(v))>);\n+  auto b = ranges::cend(v);\n+  b = ranges::end(v);\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}]}