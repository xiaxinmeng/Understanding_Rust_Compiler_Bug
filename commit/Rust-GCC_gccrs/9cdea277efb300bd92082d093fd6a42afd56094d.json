{"sha": "9cdea277efb300bd92082d093fd6a42afd56094d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNkZWEyNzdlZmIzMDBiZDkyMDgyZDA5M2ZkNmE0MmFmZDU2MDk0ZA==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-05-14T12:41:42Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-05-14T12:41:42Z"}, "message": "gcc/\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_CLFLUSHOPT_SET): Define.\n\t(OPTION_MASK_ISA_XSAVES_SET): Ditto.\n\t(OPTION_MASK_ISA_XSAVEC_SET): Ditto.\n\t(OPTION_MASK_ISA_CLFLUSHOPT_UNSET): Ditto.\n\t(OPTION_MASK_ISA_XSAVES_UNSET): Ditto.\n\t(OPTION_MASK_ISA_XSAVEC_UNSET): Ditto.\n\t(ix86_handle_option): Handle OPT_mxsavec, OPT_mxsaves,\n\tOPT_mclflushopt.\n\t* config.gcc (i[34567]86-*-*): Add clflushoptintrin.h,\n\txsavecintrin.h, xsavesintrin.h.\n\t(x86_64-*-*): Ditto.\n\t* config/i386/clflushoptintrin.h: New.\n\t* config/i386/xsavecintrin.h: Ditto.\n\t* config/i386/xsavesintrin.h: Ditto.\n\t* config/i386/cpuid.h (bit_CLFLUSHOPT): Define.\n\t(bit_XSAVES): Ditto.\n\t(bit_XSAVES): Ditto.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Handle\n\t-mclflushopt, -mxsavec, -mxsaves, -mno-xsaves, -mno-xsavec,\n\t-mno-clflushopt.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n\tOPTION_MASK_ISA_CLFLUSHOPT, OPTION_MASK_ISA_XSAVEC,\n\tOPTION_MASK_ISA_XSAVES.\n\t* config/i386/i386.c (ix86_target_string): Handle -mclflushopt,\n\t-mxsavec, -mxsaves.\n\t(PTA_CLFLUSHOPT) Define.\n\t(PTA_XSAVEC): Ditto.\n\t(PTA_XSAVES): Ditto.\n\t(ix86_option_override_internal): Handle new options.\n\t(ix86_valid_target_attribute_inner_p): Ditto.\n\t(ix86_builtins): Add IX86_BUILTIN_XSAVEC, IX86_BUILTIN_XSAVEC64,\n\tIX86_BUILTIN_XSAVES, IX86_BUILTIN_XRSTORS, IX86_BUILTIN_XSAVES64,\n\tIX86_BUILTIN_XRSTORS64, IX86_BUILTIN_CLFLUSHOPT.\n\t(bdesc_special_args): Add __builtin_ia32_xsaves, __builtin_ia32_xrstors,\n\t__builtin_ia32_xsavec, __builtin_ia32_xsaves64, __builtin_ia32_xrstors64,\n\t__builtin_ia32_xsavec64.\n\t(ix86_init_mmx_sse_builtins): Add __builtin_ia32_clflushopt.\n\t(ix86_expand_builtin): Handle new builtins.\n\t* config/i386/i386.h (TARGET_CLFLUSHOPT) Define.\n\t(TARGET_CLFLUSHOPT_P): Ditto.\n\t(TARGET_XSAVEC): Ditto.\n\t(TARGET_XSAVEC_P): Ditto.\n\t(TARGET_XSAVES): Ditto.\n\t(TARGET_XSAVES_P): Ditto.\n\t* config/i386/i386.md (ANY_XSAVE): Add UNSPECV_XSAVEC, UNSPECV_XSAVES.\n\t(ANY_XSAVE64)\" Add UNSPECV_XSAVEC64, UNSPECV_XSAVES64.\n\t(attr xsave): Add xsavec, xsavec64, xsaves, xsaves64.\n\t(ANY_XRSTOR): New.\n\t(ANY_XRSTOR64): Ditto.\n\t(xrstor): Ditto.\n\t(xrstor): Change into <xrstor>.\n\t(xrstor_rex64): Change into <xrstor>_rex64.\n\t(xrstor64): Change into <xrstor>64\n\t(clflushopt): New.\n\t* config/i386/i386.opt (mclflushopt): New.\n\t(mxsavec): Ditto.\n\t(mxsaves): Ditto.\n\t* config/i386/x86intrin.h: Add clflushoptintrin.h, xsavesintrin.h,\n\txsavecintrin.h.\n\t* doc/invoke.texi: Document new options.\n\ngcc/testsuite/\n\t* gcc.target/i386/clflushopt-1.c: New.\n\t* gcc.target/i386/xsavec-1.c: Ditto.\n\t* gcc.target/i386/xsavec64-1.c: Ditto.\n\t* gcc.target/i386/xsaves-1.c: Ditto.\n\t* gcc.target/i386/xsaves64-1.c: Ditto.\n\t* gcc.target/i386/sse-12.c: Test new options.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* g++.dg/other/i386-2.C: Ditto.\n\t* g++.dg/other/i386-3.C: Ditto.\n\nFrom-SVN: r210421", "tree": {"sha": "1c4bf26f13325c4aba56d5bec9ba08dc20cacf1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c4bf26f13325c4aba56d5bec9ba08dc20cacf1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cdea277efb300bd92082d093fd6a42afd56094d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cdea277efb300bd92082d093fd6a42afd56094d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cdea277efb300bd92082d093fd6a42afd56094d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cdea277efb300bd92082d093fd6a42afd56094d/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92e265ac1e6d109ef206070ad539beaede53c504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92e265ac1e6d109ef206070ad539beaede53c504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92e265ac1e6d109ef206070ad539beaede53c504"}], "stats": {"total": 583, "additions": 560, "deletions": 23}, "files": [{"sha": "8bf080a53444f35ef15bf98ee7734e580cf0d7e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -1,3 +1,67 @@\n+2014-05-14  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_CLFLUSHOPT_SET): Define.\n+\t(OPTION_MASK_ISA_XSAVES_SET): Ditto.\n+\t(OPTION_MASK_ISA_XSAVEC_SET): Ditto.\n+\t(OPTION_MASK_ISA_CLFLUSHOPT_UNSET): Ditto.\n+\t(OPTION_MASK_ISA_XSAVES_UNSET): Ditto.\n+\t(OPTION_MASK_ISA_XSAVEC_UNSET): Ditto.\n+\t(ix86_handle_option): Handle OPT_mxsavec, OPT_mxsaves,\n+\tOPT_mclflushopt.\n+\t* config.gcc (i[34567]86-*-*): Add clflushoptintrin.h,\n+\txsavecintrin.h, xsavesintrin.h.\n+\t(x86_64-*-*): Ditto.\n+\t* config/i386/clflushoptintrin.h: New.\n+\t* config/i386/xsavecintrin.h: Ditto.\n+\t* config/i386/xsavesintrin.h: Ditto.\n+\t* config/i386/cpuid.h (bit_CLFLUSHOPT): Define.\n+\t(bit_XSAVES): Ditto.\n+\t(bit_XSAVES): Ditto.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Handle\n+\t-mclflushopt, -mxsavec, -mxsaves, -mno-xsaves, -mno-xsavec,\n+\t-mno-clflushopt.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tOPTION_MASK_ISA_CLFLUSHOPT, OPTION_MASK_ISA_XSAVEC,\n+\tOPTION_MASK_ISA_XSAVES.\n+\t* config/i386/i386.c (ix86_target_string): Handle -mclflushopt,\n+\t-mxsavec, -mxsaves.\n+\t(PTA_CLFLUSHOPT) Define.\n+\t(PTA_XSAVEC): Ditto.\n+\t(PTA_XSAVES): Ditto.\n+\t(ix86_option_override_internal): Handle new options.\n+\t(ix86_valid_target_attribute_inner_p): Ditto.\n+\t(ix86_builtins): Add IX86_BUILTIN_XSAVEC, IX86_BUILTIN_XSAVEC64,\n+\tIX86_BUILTIN_XSAVES, IX86_BUILTIN_XRSTORS, IX86_BUILTIN_XSAVES64,\n+\tIX86_BUILTIN_XRSTORS64, IX86_BUILTIN_CLFLUSHOPT.\n+\t(bdesc_special_args): Add __builtin_ia32_xsaves, __builtin_ia32_xrstors,\n+\t__builtin_ia32_xsavec, __builtin_ia32_xsaves64, __builtin_ia32_xrstors64,\n+\t__builtin_ia32_xsavec64.\n+\t(ix86_init_mmx_sse_builtins): Add __builtin_ia32_clflushopt.\n+\t(ix86_expand_builtin): Handle new builtins.\n+\t* config/i386/i386.h (TARGET_CLFLUSHOPT) Define.\n+\t(TARGET_CLFLUSHOPT_P): Ditto.\n+\t(TARGET_XSAVEC): Ditto.\n+\t(TARGET_XSAVEC_P): Ditto.\n+\t(TARGET_XSAVES): Ditto.\n+\t(TARGET_XSAVES_P): Ditto.\n+\t* config/i386/i386.md (ANY_XSAVE): Add UNSPECV_XSAVEC, UNSPECV_XSAVES.\n+\t(ANY_XSAVE64)\" Add UNSPECV_XSAVEC64, UNSPECV_XSAVES64.\n+\t(attr xsave): Add xsavec, xsavec64, xsaves, xsaves64.\n+\t(ANY_XRSTOR): New.\n+\t(ANY_XRSTOR64): Ditto.\n+\t(xrstor): Ditto.\n+\t(xrstor): Change into <xrstor>.\n+\t(xrstor_rex64): Change into <xrstor>_rex64.\n+\t(xrstor64): Change into <xrstor>64\n+\t(clflushopt): New.\n+\t* config/i386/i386.opt (mclflushopt): New.\n+\t(mxsavec): Ditto.\n+\t(mxsaves): Ditto.\n+\t* config/i386/x86intrin.h: Add clflushoptintrin.h, xsavesintrin.h,\n+\txsavecintrin.h.\n+\t* doc/invoke.texi: Document new options.\n+\n 2014-05-14  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/60866"}, {"sha": "3012783d24ab638e1f7922a8983601f5e0f3acb7", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -70,6 +70,11 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n #define OPTION_MASK_ISA_ADX_SET OPTION_MASK_ISA_ADX\n #define OPTION_MASK_ISA_PREFETCHWT1_SET OPTION_MASK_ISA_PREFETCHWT1\n+#define OPTION_MASK_ISA_CLFLUSHOPT_SET OPTION_MASK_ISA_CLFLUSHOPT\n+#define OPTION_MASK_ISA_XSAVES_SET \\\n+  (OPTION_MASK_ISA_XSAVES | OPTION_MASK_ISA_XSAVE)\n+#define OPTION_MASK_ISA_XSAVEC_SET \\\n+  (OPTION_MASK_ISA_XSAVEC | OPTION_MASK_ISA_XSAVE)\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -156,6 +161,9 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n #define OPTION_MASK_ISA_ADX_UNSET OPTION_MASK_ISA_ADX\n #define OPTION_MASK_ISA_PREFETCHWT1_UNSET OPTION_MASK_ISA_PREFETCHWT1\n+#define OPTION_MASK_ISA_CLFLUSHOPT_UNSET OPTION_MASK_ISA_CLFLUSHOPT\n+#define OPTION_MASK_ISA_XSAVEC_UNSET OPTION_MASK_ISA_XSAVEC\n+#define OPTION_MASK_ISA_XSAVES_UNSET OPTION_MASK_ISA_XSAVES\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -720,6 +728,32 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mxsavec:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVEC_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVEC_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_XSAVEC_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVEC_UNSET;\n+\t}\n+      return true;\n+\n+    case OPT_mxsaves:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVES_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVES_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_XSAVES_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_XSAVES_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mrdseed:\n       if (value)\n \t{\n@@ -772,6 +806,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mclflushopt:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLFLUSHOPT_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CLFLUSHOPT_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_CLFLUSHOPT_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CLFLUSHOPT_UNSET;\n+\t}\n+      return true;\n+\n   /* Comes from final.c -- no real reason to change it.  */\n #define MAX_CODE_ALIGN 16\n "}, {"sha": "bc1e4c56843c9589027977d7881cbf93579cc291", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -375,7 +375,8 @@ i[34567]86-*-*)\n \t\t       rtmintrin.h xtestintrin.h rdseedintrin.h prfchwintrin.h\n \t\t       adxintrin.h fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\n \t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\n-\t\t       shaintrin.h\"\n+\t\t       shaintrin.h clflushoptintrin.h xsavecintrin.h\n+\t\t       xsavesintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -392,7 +393,8 @@ x86_64-*-*)\n \t\t       rtmintrin.h xtestintrin.h rdseedintrin.h prfchwintrin.h\n \t\t       adxintrin.h fxsrintrin.h xsaveintrin.h xsaveoptintrin.h\n \t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\n-\t\t       shaintrin.h\"\n+\t\t       shaintrin.h clflushoptintrin.h xsavecintrin.h\n+\t\t       xsavesintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "026561242ab4e13423742591a371c3f53de93393", "filename": "gcc/config/i386/clflushoptintrin.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fclflushoptintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fclflushoptintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fclflushoptintrin.h?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -0,0 +1,49 @@\n+/* Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <clflushoptintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _CLFLUSHOPTINTRIN_H_INCLUDED\n+#define _CLFLUSHOPTINTRIN_H_INCLUDED\n+\n+#ifndef __CLFLUSHOPT__\n+#pragma GCC push_options\n+#pragma GCC target(\"clflushopt\")\n+#define __DISABLE_CLFLUSHOPT__\n+#endif /* __CLFLUSHOPT__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_clflushopt (void *__A)\n+{\n+  __builtin_ia32_clflushopt (__A);\n+}\n+\n+#ifdef __DISABLE_CLFLUSHOPT__\n+#undef __DISABLE_CLFLUSHOPT__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_CLFLUSHOPT__ */\n+\n+#endif /* _CLFLUSHOPTINTRIN_H_INCLUDED */"}, {"sha": "7ac22a1683d878567e527cdf55c64680c7f6d9dd", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -75,6 +75,7 @@\n #define bit_AVX512F\t(1 << 16)\n #define bit_RDSEED\t(1 << 18)\n #define bit_ADX\t(1 << 19)\n+#define bit_CLFLUSHOPT\t(1 << 23)\n #define bit_AVX512PF\t(1 << 26)\n #define bit_AVX512ER\t(1 << 27)\n #define bit_AVX512CD\t(1 << 28)\n@@ -85,6 +86,8 @@\n \n /* Extended State Enumeration Sub-leaf (%eax == 13, %ecx == 1) */\n #define bit_XSAVEOPT\t(1 << 0)\n+#define bit_XSAVEC\t(1 << 1)\n+#define bit_XSAVES\t(1 << 3)\n \n /* Signatures for different CPU implementations as returned in uses\n    of cpuid with level 0.  */"}, {"sha": "3e8a995f2856cd9bd5ae45fa92dcacc271ac2032", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -410,6 +410,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_osxsave = 0, has_fxsr = 0, has_xsave = 0, has_xsaveopt = 0;\n   unsigned int has_avx512er = 0, has_avx512pf = 0, has_avx512cd = 0;\n   unsigned int has_avx512f = 0, has_sha = 0, has_prefetchwt1 = 0;\n+  unsigned int has_clflushopt = 0, has_xsavec = 0, has_xsaves = 0;\n \n   bool arch;\n \n@@ -486,6 +487,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_avx512pf = ebx & bit_AVX512PF;\n       has_avx512cd = ebx & bit_AVX512CD;\n       has_sha = ebx & bit_SHA;\n+      has_clflushopt = ebx & bit_CLFLUSHOPT;\n \n       has_prefetchwt1 = ecx & bit_PREFETCHWT1;\n     }\n@@ -495,6 +497,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       __cpuid_count (13, 1, eax, ebx, ecx, edx);\n \n       has_xsaveopt = eax & bit_XSAVEOPT;\n+      has_xsavec = eax & bit_XSAVEC;\n+      has_xsaves = eax & bit_XSAVES;\n     }\n \n   /* Check cpuid level of extended features.  */\n@@ -541,6 +545,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_xop = 0;\n       has_xsave = 0;\n       has_xsaveopt = 0;\n+      has_xsaves = 0;\n+      has_xsavec = 0;\n     }\n \n   if (!arch)\n@@ -886,14 +892,18 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512cd = has_avx512cd ? \" -mavx512cd\" : \" -mno-avx512cd\";\n       const char *avx512pf = has_avx512pf ? \" -mavx512pf\" : \" -mno-avx512pf\";\n       const char *prefetchwt1 = has_prefetchwt1 ? \" -mprefetchwt1\" : \" -mno-prefetchwt1\";\n+      const char *clflushopt = has_clflushopt ? \" -mclflushopt\" : \" -mno-clflushopt\";\n+      const char *xsavec = has_xsavec ? \" -mxsavec\" : \" -mno-xsavec\";\n+      const char *xsaves = has_xsaves ? \" -mxsaves\" : \" -mno-xsaves\";\n \n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n \t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, rtm,\n \t\t\thle, rdrnd, f16c, fsgsbase, rdseed, prfchw, adx,\n \t\t\tfxsr, xsave, xsaveopt, avx512f, avx512er,\n-\t\t\tavx512cd, avx512pf, prefetchwt1, NULL);\n+\t\t\tavx512cd, avx512pf, prefetchwt1, clflushopt,\n+\t\t\txsavec, xsaves, NULL);\n     }\n \n done:"}, {"sha": "2c05cec0c4b86c33a5098dc1a729bec9d12634da", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -393,6 +393,12 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__SSE_MATH__\");\n   if ((fpmath & FPMATH_SSE) && (isa_flag & OPTION_MASK_ISA_SSE2))\n     def_or_undef (parse_in, \"__SSE2_MATH__\");\n+  if (isa_flag & OPTION_MASK_ISA_CLFLUSHOPT)\n+    def_or_undef (parse_in, \"__CLFLUSHOPT__\");\n+  if (isa_flag & OPTION_MASK_ISA_XSAVEC)\n+    def_or_undef (parse_in, \"__XSAVEC__\");\n+  if (isa_flag & OPTION_MASK_ISA_XSAVES)\n+    def_or_undef (parse_in, \"__XSAVES__\");\n }\n \n \f"}, {"sha": "b78f3c0e91ae8c050204a9b27770e32d76de4b7c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -2626,6 +2626,9 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mxsave\",\tOPTION_MASK_ISA_XSAVE },\n     { \"-mxsaveopt\",\tOPTION_MASK_ISA_XSAVEOPT },\n     { \"-mprefetchwt1\",\tOPTION_MASK_ISA_PREFETCHWT1 },\n+    { \"-mclflushopt\",   OPTION_MASK_ISA_CLFLUSHOPT },\n+    { \"-mxsavec\",\tOPTION_MASK_ISA_XSAVEC },\n+    { \"-mxsaves\",\tOPTION_MASK_ISA_XSAVES },\n   };\n \n   /* Flag options.  */\n@@ -3117,6 +3120,9 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_AVX512CD\t\t(HOST_WIDE_INT_1 << 43)\n #define PTA_SHA\t\t\t(HOST_WIDE_INT_1 << 45)\n #define PTA_PREFETCHWT1\t\t(HOST_WIDE_INT_1 << 46)\n+#define PTA_CLFLUSHOPT\t\t(HOST_WIDE_INT_1 << 47)\n+#define PTA_XSAVEC\t\t(HOST_WIDE_INT_1 << 48)\n+#define PTA_XSAVES\t\t(HOST_WIDE_INT_1 << 49)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -3674,6 +3680,15 @@ ix86_option_override_internal (bool main_args_p,\n \tif (processor_alias_table[i].flags & PTA_PREFETCHWT1\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_PREFETCHWT1))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_PREFETCHWT1;\n+\tif (processor_alias_table[i].flags & PTA_CLFLUSHOPT\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_CLFLUSHOPT))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CLFLUSHOPT;\n+\tif (processor_alias_table[i].flags & PTA_XSAVEC\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVEC))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVEC;\n+\tif (processor_alias_table[i].flags & PTA_XSAVES\n+\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_XSAVES))\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_XSAVES;\n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n \n@@ -4557,6 +4572,9 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"xsave\",\tOPT_mxsave),\n     IX86_ATTR_ISA (\"xsaveopt\",\tOPT_mxsaveopt),\n     IX86_ATTR_ISA (\"prefetchwt1\", OPT_mprefetchwt1),\n+    IX86_ATTR_ISA (\"clflushopt\",\tOPT_mclflushopt),\n+    IX86_ATTR_ISA (\"xsavec\",\tOPT_mxsavec),\n+    IX86_ATTR_ISA (\"xsaves\",\tOPT_mxsaves),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -27311,6 +27329,14 @@ enum ix86_builtins\n   IX86_BUILTIN_XSAVEOPT,\n   IX86_BUILTIN_XSAVEOPT64,\n \n+  IX86_BUILTIN_XSAVEC,\n+  IX86_BUILTIN_XSAVEC64,\n+\n+  IX86_BUILTIN_XSAVES,\n+  IX86_BUILTIN_XRSTORS,\n+  IX86_BUILTIN_XSAVES64,\n+  IX86_BUILTIN_XRSTORS64,\n+\n   /* 3DNow! Original */\n   IX86_BUILTIN_FEMMS,\n   IX86_BUILTIN_PAVGUSB,\n@@ -28506,6 +28532,9 @@ enum ix86_builtins\n   IX86_BUILTIN_SHA256MSG2,\n   IX86_BUILTIN_SHA256RNDS2,\n \n+  /* CLFLUSHOPT instructions.  */\n+  IX86_BUILTIN_CLFLUSHOPT,\n+\n   /* TFmode support builtins.  */\n   IX86_BUILTIN_INFQ,\n   IX86_BUILTIN_HUGE_VALQ,\n@@ -28965,18 +28994,24 @@ static const struct builtin_description bdesc_special_args[] =\n   /* 3DNow! */\n   { OPTION_MASK_ISA_3DNOW, CODE_FOR_mmx_femms, \"__builtin_ia32_femms\", IX86_BUILTIN_FEMMS, UNKNOWN, (int) VOID_FTYPE_VOID },\n \n-  /* FXSR, XSAVE and XSAVEOPT */\n+  /* FXSR, XSAVE, XSAVEOPT, XSAVEC and XSAVES.  */\n   { OPTION_MASK_ISA_FXSR, CODE_FOR_nothing, \"__builtin_ia32_fxsave\", IX86_BUILTIN_FXSAVE, UNKNOWN, (int) VOID_FTYPE_PVOID },\n   { OPTION_MASK_ISA_FXSR, CODE_FOR_nothing, \"__builtin_ia32_fxrstor\", IX86_BUILTIN_FXRSTOR, UNKNOWN, (int) VOID_FTYPE_PVOID },\n   { OPTION_MASK_ISA_XSAVE, CODE_FOR_nothing, \"__builtin_ia32_xsave\", IX86_BUILTIN_XSAVE, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n   { OPTION_MASK_ISA_XSAVE, CODE_FOR_nothing, \"__builtin_ia32_xrstor\", IX86_BUILTIN_XRSTOR, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n   { OPTION_MASK_ISA_XSAVEOPT, CODE_FOR_nothing, \"__builtin_ia32_xsaveopt\", IX86_BUILTIN_XSAVEOPT, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVES, CODE_FOR_nothing, \"__builtin_ia32_xsaves\", IX86_BUILTIN_XSAVES, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVES, CODE_FOR_nothing, \"__builtin_ia32_xrstors\", IX86_BUILTIN_XRSTORS, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVEC, CODE_FOR_nothing, \"__builtin_ia32_xsavec\", IX86_BUILTIN_XSAVEC, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n \n   { OPTION_MASK_ISA_FXSR | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_fxsave64\", IX86_BUILTIN_FXSAVE64, UNKNOWN, (int) VOID_FTYPE_PVOID },\n   { OPTION_MASK_ISA_FXSR | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_fxrstor64\", IX86_BUILTIN_FXRSTOR64, UNKNOWN, (int) VOID_FTYPE_PVOID },\n   { OPTION_MASK_ISA_XSAVE | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xsave64\", IX86_BUILTIN_XSAVE64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n   { OPTION_MASK_ISA_XSAVE | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xrstor64\", IX86_BUILTIN_XRSTOR64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n   { OPTION_MASK_ISA_XSAVEOPT | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xsaveopt64\", IX86_BUILTIN_XSAVEOPT64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVES | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xsaves64\", IX86_BUILTIN_XSAVES64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVES | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xrstors64\", IX86_BUILTIN_XRSTORS64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n+  { OPTION_MASK_ISA_XSAVEC | OPTION_MASK_ISA_64BIT, CODE_FOR_nothing, \"__builtin_ia32_xsavec64\", IX86_BUILTIN_XSAVEC64, UNKNOWN, (int) VOID_FTYPE_PVOID_INT64 },\n \n   /* SSE */\n   { OPTION_MASK_ISA_SSE, CODE_FOR_sse_storeups, \"__builtin_ia32_storeups\", IX86_BUILTIN_STOREUPS, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V4SF },\n@@ -31154,6 +31189,9 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (OPTION_MASK_ISA_64BIT, \"__builtin_ia32_writeeflags_u64\",\n                VOID_FTYPE_UINT64, IX86_BUILTIN_WRITE_FLAGS);\n \n+  /* CLFLUSHOPT.  */\n+  def_builtin (OPTION_MASK_ISA_CLFLUSHOPT, \"__builtin_ia32_clflushopt\",\n+\t       VOID_FTYPE_PCVOID, IX86_BUILTIN_CLFLUSHOPT);\n \n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n@@ -35086,6 +35124,16 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \temit_insn (gen_sse2_clflush (op0));\n \treturn 0;\n \n+    case IX86_BUILTIN_CLFLUSHOPT:\n+\targ0 = CALL_EXPR_ARG (exp, 0);\n+\top0 = expand_normal (arg0);\n+\ticode = CODE_FOR_clflushopt;\n+\tif (!insn_data[icode].operand[0].predicate (op0, Pmode))\n+\t  op0 = ix86_zero_extend_to_Pmode (op0);\n+\n+\temit_insn (gen_clflushopt (op0));\n+\treturn 0;\n+\n     case IX86_BUILTIN_MONITOR:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n@@ -35277,6 +35325,12 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n     case IX86_BUILTIN_XRSTOR64:\n     case IX86_BUILTIN_XSAVEOPT:\n     case IX86_BUILTIN_XSAVEOPT64:\n+    case IX86_BUILTIN_XSAVES:\n+    case IX86_BUILTIN_XRSTORS:\n+    case IX86_BUILTIN_XSAVES64:\n+    case IX86_BUILTIN_XRSTORS64:\n+    case IX86_BUILTIN_XSAVEC:\n+    case IX86_BUILTIN_XSAVEC64:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       op0 = expand_normal (arg0);\n@@ -35315,6 +35369,24 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t    case IX86_BUILTIN_XSAVEOPT64:\n \t      icode = CODE_FOR_xsaveopt64;\n \t      break;\n+\t    case IX86_BUILTIN_XSAVES:\n+\t      icode = CODE_FOR_xsaves_rex64;\n+\t      break;\n+\t    case IX86_BUILTIN_XRSTORS:\n+\t      icode = CODE_FOR_xrstors_rex64;\n+\t      break;\n+\t    case IX86_BUILTIN_XSAVES64:\n+\t      icode = CODE_FOR_xsaves64;\n+\t      break;\n+\t    case IX86_BUILTIN_XRSTORS64:\n+\t      icode = CODE_FOR_xrstors64;\n+\t      break;\n+\t    case IX86_BUILTIN_XSAVEC:\n+\t      icode = CODE_FOR_xsavec_rex64;\n+\t      break;\n+\t    case IX86_BUILTIN_XSAVEC64:\n+\t      icode = CODE_FOR_xsavec64;\n+\t      break;\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n@@ -35336,6 +35408,15 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t    case IX86_BUILTIN_XSAVEOPT:\n \t      icode = CODE_FOR_xsaveopt;\n \t      break;\n+\t    case IX86_BUILTIN_XSAVES:\n+\t      icode = CODE_FOR_xsaves;\n+\t      break;\n+\t    case IX86_BUILTIN_XRSTORS:\n+\t      icode = CODE_FOR_xrstors;\n+\t      break;\n+\t    case IX86_BUILTIN_XSAVEC:\n+\t      icode = CODE_FOR_xsavec;\n+\t      break;\n \t    default:\n \t      gcc_unreachable ();\n \t    }"}, {"sha": "a4009d3a83bc627f4b6a9437c5d4bb7eb866256e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -104,6 +104,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AES_P(x)\tTARGET_ISA_AES_P(x)\n #define TARGET_SHA\tTARGET_ISA_SHA\n #define TARGET_SHA_P(x)\tTARGET_ISA_SHA_P(x)\n+#define TARGET_CLFLUSHOPT\tTARGET_ISA_CLFLUSHOPT\n+#define TARGET_CLFLUSHOPT_P(x)\tTARGET_ISA_CLFLUSHOPT_P(x)\n+#define TARGET_XSAVEC\tTARGET_ISA_XSAVEC\n+#define TARGET_XSAVEC_P(x)\tTARGET_ISA_XSAVEC_P(x)\n+#define TARGET_XSAVES\tTARGET_ISA_XSAVES\n+#define TARGET_XSAVES_P(x)\tTARGET_ISA_XSAVES_P(x)\n #define TARGET_PCLMUL\tTARGET_ISA_PCLMUL\n #define TARGET_PCLMUL_P(x)\tTARGET_ISA_PCLMUL_P(x)\n #define TARGET_CMPXCHG16B\tTARGET_ISA_CX16"}, {"sha": "44e80ecc5cfbd4b991c6525aabb2ca3d74a282ef", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -213,6 +213,12 @@\n   UNSPECV_XRSTOR64\n   UNSPECV_XSAVEOPT\n   UNSPECV_XSAVEOPT64\n+  UNSPECV_XSAVES\n+  UNSPECV_XRSTORS\n+  UNSPECV_XSAVES64\n+  UNSPECV_XRSTORS64\n+  UNSPECV_XSAVEC\n+  UNSPECV_XSAVEC64\n \n   ;; For atomic compound assignments.\n   UNSPECV_FNSTENV\n@@ -233,6 +239,9 @@\n   UNSPECV_XTEST\n \n   UNSPECV_NLGR\n+\n+  ;; For CLFLUSHOPT support\n+  UNSPECV_CLFLUSHOPT\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -17798,17 +17807,39 @@\n \n (define_int_iterator ANY_XSAVE\n \t[UNSPECV_XSAVE\n-\t (UNSPECV_XSAVEOPT \"TARGET_XSAVEOPT\")])\n+\t (UNSPECV_XSAVEOPT \"TARGET_XSAVEOPT\")\n+\t (UNSPECV_XSAVEC \"TARGET_XSAVEC\")\n+\t (UNSPECV_XSAVES \"TARGET_XSAVES\")])\n \n (define_int_iterator ANY_XSAVE64\n \t[UNSPECV_XSAVE64\n-\t (UNSPECV_XSAVEOPT64 \"TARGET_XSAVEOPT\")])\n+\t (UNSPECV_XSAVEOPT64 \"TARGET_XSAVEOPT\")\n+\t (UNSPECV_XSAVEC64 \"TARGET_XSAVEC\")\n+\t (UNSPECV_XSAVES64 \"TARGET_XSAVES\")])\n \n (define_int_attr xsave\n \t[(UNSPECV_XSAVE \"xsave\")\n \t (UNSPECV_XSAVE64 \"xsave64\")\n \t (UNSPECV_XSAVEOPT \"xsaveopt\")\n-\t (UNSPECV_XSAVEOPT64 \"xsaveopt64\")])\n+\t (UNSPECV_XSAVEOPT64 \"xsaveopt64\")\n+\t (UNSPECV_XSAVEC \"xsavec\")\n+\t (UNSPECV_XSAVEC64 \"xsavec64\")\n+\t (UNSPECV_XSAVES \"xsaves\")\n+\t (UNSPECV_XSAVES64 \"xsaves64\")])\n+\n+(define_int_iterator ANY_XRSTOR\n+\t[UNSPECV_XRSTOR\n+\t (UNSPECV_XRSTORS \"TARGET_XSAVES\")])\n+\n+(define_int_iterator ANY_XRSTOR64\n+\t[UNSPECV_XRSTOR64\n+\t (UNSPECV_XRSTORS64 \"TARGET_XSAVES\")])\n+\n+(define_int_attr xrstor\n+\t[(UNSPECV_XRSTOR \"xrstor\")\n+\t (UNSPECV_XRSTOR64 \"xrstor\")\n+\t (UNSPECV_XRSTORS \"xrstors\")\n+\t (UNSPECV_XRSTORS64 \"xrstors\")])\n \n (define_insn \"<xsave>\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n@@ -17848,39 +17879,39 @@\n    (set (attr \"length\")\n         (symbol_ref \"ix86_attr_length_address_default (insn) + 4\"))])\n \n-(define_insn \"xrstor\"\n+(define_insn \"<xrstor>\"\n    [(unspec_volatile:BLK\n      [(match_operand:BLK 0 \"memory_operand\" \"m\")\n       (match_operand:DI 1 \"register_operand\" \"A\")]\n-     UNSPECV_XRSTOR)]\n+     ANY_XRSTOR)]\n   \"!TARGET_64BIT && TARGET_XSAVE\"\n-  \"xrstor\\t%0\"\n+  \"<xrstor>\\t%0\"\n   [(set_attr \"type\" \"other\")\n    (set_attr \"memory\" \"load\")\n    (set (attr \"length\")\n         (symbol_ref \"ix86_attr_length_address_default (insn) + 3\"))])\n \n-(define_insn \"xrstor_rex64\"\n+(define_insn \"<xrstor>_rex64\"\n    [(unspec_volatile:BLK\n      [(match_operand:BLK 0 \"memory_operand\" \"m\")\n       (match_operand:SI 1 \"register_operand\" \"a\")\n       (match_operand:SI 2 \"register_operand\" \"d\")]\n-     UNSPECV_XRSTOR)]\n+     ANY_XRSTOR)]\n   \"TARGET_64BIT && TARGET_XSAVE\"\n-  \"xrstor\\t%0\"\n+  \"<xrstor>\\t%0\"\n   [(set_attr \"type\" \"other\")\n    (set_attr \"memory\" \"load\")\n    (set (attr \"length\")\n         (symbol_ref \"ix86_attr_length_address_default (insn) + 3\"))])\n \n-(define_insn \"xrstor64\"\n+(define_insn \"<xrstor>64\"\n    [(unspec_volatile:BLK\n      [(match_operand:BLK 0 \"memory_operand\" \"m\")\n       (match_operand:SI 1 \"register_operand\" \"a\")\n       (match_operand:SI 2 \"register_operand\" \"d\")]\n-     UNSPECV_XRSTOR64)]\n+     ANY_XRSTOR64)]\n   \"TARGET_64BIT && TARGET_XSAVE\"\n-  \"xrstor64\\t%0\"\n+  \"<xrstor>64\\t%0\"\n   [(set_attr \"type\" \"other\")\n    (set_attr \"memory\" \"load\")\n    (set (attr \"length\")\n@@ -18178,6 +18209,15 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"length\" \"3\")])\n \n+(define_insn \"clflushopt\"\n+  [(unspec_volatile [(match_operand 0 \"address_operand\" \"p\")]\n+                   UNSPECV_CLFLUSHOPT)]\n+  \"TARGET_CLFLUSHOPT\"\n+  \"clflushopt\\t%a0\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"atom_sse_attr\" \"fence\")\n+   (set_attr \"memory\" \"unknown\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "dc1302c5a01f42af96e13390154634cc5331bcd1", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -697,6 +697,10 @@ madx\n Target Report Mask(ISA_ADX) Var(ix86_isa_flags) Save\n Support flag-preserving add-carry instructions\n \n+mclflushopt\n+Target Report Mask(ISA_CLFLUSHOPT) Var(ix86_isa_flags) Save\n+Support CLFLUSHOPT instructions\n+\n mfxsr\n Target Report Mask(ISA_FXSR) Var(ix86_isa_flags) Save\n Support FXSAVE and FXRSTOR instructions\n@@ -709,6 +713,14 @@ mxsaveopt\n Target Report Mask(ISA_XSAVEOPT) Var(ix86_isa_flags) Save\n Support XSAVEOPT instruction\n \n+mxsavec\n+Target Report Mask(ISA_XSAVEC) Var(ix86_isa_flags) Save\n+Support XSAVEC instructions\n+\n+mxsaves\n+Target Report Mask(ISA_XSAVES) Var(ix86_isa_flags) Save\n+Support XSAVES and XRSTORS instructions\n+\n mtbm\n Target Report Mask(ISA_TBM) Var(ix86_isa_flags) Save\n Support TBM built-in functions and code generation"}, {"sha": "c84ab88c8c03af8b9c601eda967f52fac7d708c2", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -75,4 +75,10 @@\n \n #include <adxintrin.h>\n \n+#include <clflushoptintrin.h>\n+\n+#include <xsavesintrin.h>\n+\n+#include <xsavecintrin.h>\n+\n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "99fadd5988ec7080e78fbc26fa32cde5992d7496", "filename": "gcc/config/i386/xsavecintrin.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fxsavecintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fxsavecintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsavecintrin.h?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -0,0 +1,58 @@\n+/* Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <xsavecintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _XSAVECINTRIN_H_INCLUDED\n+#define _XSAVECINTRIN_H_INCLUDED\n+\n+#ifndef __XSAVEC__\n+#pragma GCC push_options\n+#pragma GCC target(\"xsavec\")\n+#define __DISABLE_XSAVEC__\n+#endif /* __XSAVEC__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsavec (void *__P, long long __M)\n+{\n+  __builtin_ia32_xsavec (__P, __M);\n+}\n+\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsavec64 (void *__P, long long __M)\n+{\n+  __builtin_ia32_xsavec64 (__P, __M);\n+}\n+#endif\n+\n+#ifdef __DISABLE_XSAVEC__\n+#undef __DISABLE_XSAVEC__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_XSAVEC__ */\n+\n+#endif /* _XSAVECINTRIN_H_INCLUDED */"}, {"sha": "a08a81ae82d0fbd005f3e061778e3c7381ddf8a3", "filename": "gcc/config/i386/xsavesintrin.h", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fxsavesintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fconfig%2Fi386%2Fxsavesintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxsavesintrin.h?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -0,0 +1,72 @@\n+/* Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <xsavesintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _XSAVESINTRIN_H_INCLUDED\n+#define _XSAVESINTRIN_H_INCLUDED\n+\n+#ifndef __XSAVES__\n+#pragma GCC push_options\n+#pragma GCC target(\"xsaves\")\n+#define __DISABLE_XSAVES__\n+#endif /* __XSAVES__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsaves (void *__P, long long __M)\n+{\n+  __builtin_ia32_xsaves (__P, __M);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xrstors (void *__P, long long __M)\n+{\n+  __builtin_ia32_xrstors (__P, __M);\n+}\n+\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xrstors64 (void *__P, long long __M)\n+{\n+  __builtin_ia32_xrstors64 (__P, __M);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_xsaves64 (void *__P, long long __M)\n+{\n+  __builtin_ia32_xsaves64 (__P, __M);\n+}\n+#endif\n+\n+#ifdef __DISABLE_XSAVES__\n+#undef __DISABLE_XSAVES__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_XSAVES__ */\n+\n+#endif /* _XSAVESINTRIN_H_INCLUDED */"}, {"sha": "6baaf2a5a37e0306a23c81933fe8b2c9e01aeb01", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -672,6 +672,7 @@ Objective-C and Objective-C++ Dialects}.\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -mavx2 -mavx512f -mavx512pf -mavx512er -mavx512cd -msha @gol\n -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma -mprefetchwt1 @gol\n+-mclflushopt -mxsavec -mxsaves @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n -mbmi2 -mfxsr -mxsave -mxsaveopt -mrtm -mlwp -mthreads @gol\n -mno-align-stringops  -minline-all-stringops @gol\n@@ -15337,6 +15338,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-aes\n @itemx -mpclmul\n @itemx -mno-pclmul\n+@itemx -mclfushopt\n+@itemx -mno-clflsuhopt\n @need 800\n @itemx -mfsgsbase\n @itemx -mno-fsgsbase\n@@ -15375,6 +15378,10 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mrtm\n @itemx -mtbm\n @itemx -mno-tbm\n+@itemx -mxsavec\n+@itemx -mno-xsavec\n+@itemx -mxsaves\n+@itemx -mno-xsaves\n @opindex mmmx\n @opindex mno-mmx\n @opindex msse"}, {"sha": "410e4f3926feac6155c209268b10cf535526b416", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -1,3 +1,18 @@\n+2014-05-14  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/clflushopt-1.c: New.\n+\t* gcc.target/i386/xsavec-1.c: Ditto.\n+\t* gcc.target/i386/xsavec64-1.c: Ditto.\n+\t* gcc.target/i386/xsaves-1.c: Ditto.\n+\t* gcc.target/i386/xsaves64-1.c: Ditto.\n+\t* gcc.target/i386/sse-12.c: Test new options.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\n 2014-05-14  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/60866"}, {"sha": "b205c3d466d2d55c4fd3d4b295480ecd46f8c810", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "aa94a481327b48149ac9d75292c4ad4631b30d34", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "756937305f2cc36a4286467a5996e1d9e1e0d9e5", "filename": "gcc/testsuite/gcc.target/i386/clflushopt-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclflushopt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclflushopt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclflushopt-1.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mclflushopt\" } */\n+/* { dg-final { scan-assembler \"clflushopt\\[ \\\\t\\]\" } } */\n+\n+#include \"x86intrin.h\"\n+\n+void\n+test_clflushopt (void *__A)\n+{\n+  _mm_clflushopt (__A);\n+}"}, {"sha": "88a7613e043e18ec6d97a96335ef2387ac3889cc", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "de54a45a2e0f7222c78abac09c07c4219e6a3722", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "2641b801a03d76378449eb787c92d2a0bf40c1b7", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "26b805d4a414c0adb73223b0dae21c0f6dd992bb", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -694,7 +694,7 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n /* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma,rdseed,prfchw,adx,fxsr,xsaveopt,xsavec,xsaves,clflushopt\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "fe61e17df971cdc0bece5cb13ae01e562eb78038", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -385,7 +385,7 @@\n /* shaintrin.h */\n #define __builtin_ia32_sha1rnds4(A, B, C) __builtin_ia32_sha1rnds4(A, B, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}, {"sha": "3be71b8b04e3a95ffe0ff6cd5f80497b9702daf1", "filename": "gcc/testsuite/gcc.target/i386/xsavec-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsavec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsavec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsavec-1.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mxsavec\" } */\n+/* { dg-final { scan-assembler \"xsavec\\[ \\\\t\\]\" } } */\n+\n+#include \"x86intrin.h\"\n+\n+void\n+test_xsavec (void *__A, long long __B)\n+{\n+  _xsavec (__A, __B);\n+}"}, {"sha": "5d4faff6fe05f81ebce69a579012f776da2f8685", "filename": "gcc/testsuite/gcc.target/i386/xsavec64-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsavec64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsavec64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsavec64-1.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mxsavec\" } */\n+/* { dg-final { scan-assembler \"xsavec64\\[ \\\\t\\]\" } } */\n+\n+#include \"x86intrin.h\"\n+\n+void\n+test_xsavec (void *__A, long long __B)\n+{\n+  _xsavec64 (__A, __B);\n+}"}, {"sha": "05ff765489d430994ccdab8ddc2e3688e1d0af97", "filename": "gcc/testsuite/gcc.target/i386/xsaves-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaves-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaves-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaves-1.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mxsaves\" } */\n+/* { dg-final { scan-assembler \"xsaves\\[ \\\\t\\]\" } } */\n+/* { dg-final { scan-assembler \"xrstors\\[ \\\\t\\]\" } } */\n+\n+#include \"x86intrin.h\"\n+\n+void\n+test_xsaves (void *__A, long long __B)\n+{\n+  _xsaves (__A, __B);\n+  _xrstors (__A, __B);\n+}"}, {"sha": "a3725d2d6c26383402037e2c02dde87c297c88d4", "filename": "gcc/testsuite/gcc.target/i386/xsaves64-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaves64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cdea277efb300bd92082d093fd6a42afd56094d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaves64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fxsaves64-1.c?ref=9cdea277efb300bd92082d093fd6a42afd56094d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mxsaves\" } */\n+/* { dg-final { scan-assembler \"xsaves64\\[ \\\\t\\]\" } } */\n+/* { dg-final { scan-assembler \"xrstors64\\[ \\\\t\\]\" } } */\n+\n+#include \"x86intrin.h\"\n+\n+void\n+test_xsaves (void *__A, long long __B)\n+{\n+  _xsaves64 (__A, __B);\n+  _xrstors64 (__A, __B);\n+}"}]}