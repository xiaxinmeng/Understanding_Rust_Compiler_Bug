{"sha": "9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZmOTNlYjAxY2U1OWJlNWQ3YjI2NDI4ZGY1ZTViZjY2NzFiY2U4Ng==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2005-01-27T01:49:01Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-01-27T01:49:01Z"}, "message": "dbxout.c (dbxout_symbol_location): Resolve constant pool references even for variables with NULL DECL_INITIAL.\n\nChangeLog:\n\t* dbxout.c (dbxout_symbol_location): Resolve constant pool references\n\teven for variables with NULL DECL_INITIAL.\n\ntestsuite/ChangeLog:\n\t* gcc.dg/20041216-1.c: New test.\n\nFrom-SVN: r94303", "tree": {"sha": "eaa07f07a8bac1d3a3fb744243c80780d71c498f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaa07f07a8bac1d3a3fb744243c80780d71c498f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/comments", "author": null, "committer": null, "parents": [{"sha": "4356a1bf59fa37ac5abeebc13bb2a5676563b7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4356a1bf59fa37ac5abeebc13bb2a5676563b7b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4356a1bf59fa37ac5abeebc13bb2a5676563b7b1"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "ca995ccadfe5c476a60cd72a75ab80359311db4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "patch": "@@ -1,3 +1,8 @@\n+2005-01-26  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* dbxout.c (dbxout_symbol_location): Resolve constant pool references\n+\teven for variables with NULL DECL_INITIAL.\n+\n 2005-01-26  Stuart Hastings  <stuart@apple.com>\n \n \t* gcc/gimplify.c (shortcut_cond_expr): Re-compute side-effects."}, {"sha": "d4c78e99c9f7b66e84ffe3c7fe5e6110e5b1f21b", "filename": "gcc/dbxout.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "patch": "@@ -2733,6 +2733,37 @@ dbxout_symbol_location (tree decl, tree type, const char *suffix, rtx home)\n \n \t  letter = decl_function_context (decl) ? 'V' : 'S';\n \n+\t  /* Some ports can transform a symbol ref into a label ref,\n+\t     because the symbol ref is too far away and has to be\n+\t     dumped into a constant pool.  Alternatively, the symbol\n+\t     in the constant pool might be referenced by a different\n+\t     symbol.  */\n+\t  if (GET_CODE (addr) == SYMBOL_REF\n+\t      && CONSTANT_POOL_ADDRESS_P (addr))\n+\t    {\n+\t      bool marked;\n+\t      rtx tmp = get_pool_constant_mark (addr, &marked);\n+\n+\t      if (GET_CODE (tmp) == SYMBOL_REF)\n+\t\t{\n+\t\t  addr = tmp;\n+\t\t  if (CONSTANT_POOL_ADDRESS_P (addr))\n+\t\t    get_pool_constant_mark (addr, &marked);\n+\t\t  else\n+\t\t    marked = true;\n+\t\t}\n+\t      else if (GET_CODE (tmp) == LABEL_REF)\n+\t\t{\n+\t\t  addr = tmp;\n+\t\t  marked = true;\n+\t\t}\n+\n+\t      /* If all references to the constant pool were optimized\n+\t\t out, we just ignore the symbol.  */\n+\t      if (!marked)\n+\t\treturn 0;\n+\t    }\n+\n \t  /* This should be the same condition as in assemble_variable, but\n \t     we don't have access to dont_output_data here.  So, instead,\n \t     we rely on the fact that error_mark_node initializers always\n@@ -2747,37 +2778,6 @@ dbxout_symbol_location (tree decl, tree type, const char *suffix, rtx home)\n \t    code = DBX_STATIC_CONST_VAR_CODE;\n \t  else\n \t    {\n-\t      /* Some ports can transform a symbol ref into a label ref,\n-\t\t because the symbol ref is too far away and has to be\n-\t\t dumped into a constant pool.  Alternatively, the symbol\n-\t\t in the constant pool might be referenced by a different\n-\t\t symbol.  */\n-\t      if (GET_CODE (addr) == SYMBOL_REF\n-\t\t  && CONSTANT_POOL_ADDRESS_P (addr))\n-\t\t{\n-\t\t  bool marked;\n-\t\t  rtx tmp = get_pool_constant_mark (addr, &marked);\n-\n-\t\t  if (GET_CODE (tmp) == SYMBOL_REF)\n-\t\t    {\n-\t\t      addr = tmp;\n-\t\t      if (CONSTANT_POOL_ADDRESS_P (addr))\n-\t\t        get_pool_constant_mark (addr, &marked);\n-\t\t      else\n-\t\t\tmarked = true;\n-\t\t    }\n-\t\t  else if (GET_CODE (tmp) == LABEL_REF)\n-\t\t    {\n-\t\t      addr = tmp;\n-\t\t      marked = true;\n-\t\t    }\n-\n-\t\t   /* If all references to the constant pool were optimized\n-\t\t      out, we just ignore the symbol.  */\n-\t\t  if (!marked)\n-\t\t    return 0;\n-\t\t}\n-\n \t      /* Ultrix `as' seems to need this.  */\n #ifdef DBX_STATIC_STAB_DATA_SECTION\n \t      data_section ();"}, {"sha": "0140e9aa7e40d693270d9d997437b7a28b6cdfa2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "patch": "@@ -1,3 +1,7 @@\n+2005-01-26  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* gcc.dg/20041216-1.c: New test.\n+\n 2005-01-26  Alexander Malmberg  <alexander@malmberg.org>\n \n \tPR objc/18862"}, {"sha": "3f892a2e375c8d81c9a0658759476349f8fa3a47", "filename": "gcc/testsuite/gcc.dg/20041216-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/gcc%2Ftestsuite%2Fgcc.dg%2F20041216-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff93eb01ce59be5d7b26428df5e5bf6671bce86/gcc%2Ftestsuite%2Fgcc.dg%2F20041216-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20041216-1.c?ref=9ff93eb01ce59be5d7b26428df5e5bf6671bce86", "patch": "@@ -0,0 +1,23 @@\n+/* This test case would get an unresolved symbol during link\n+   because stabs referred to an optimized-away literal pool\n+   entry.  */\n+\n+/* { dg-do run { target s390*-*-* } } */\n+/* { dg-options \"-O2 -fno-omit-frame-pointer -gstabs\" } */\n+\n+int main (void)\n+{\n+  static char buf[4096];\n+  char *p;\n+\n+  do\n+    {\n+      p = buf;\n+      asm volatile (\"\" : : : \"memory\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\n+\t\t\t\t       \"7\", \"8\", \"9\", \"10\", \"12\");\n+    }\n+  while (*p);\n+\n+  return 0;\n+}\n+"}]}