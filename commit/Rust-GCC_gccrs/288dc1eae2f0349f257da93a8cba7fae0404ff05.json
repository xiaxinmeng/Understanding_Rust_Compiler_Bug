{"sha": "288dc1eae2f0349f257da93a8cba7fae0404ff05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4ZGMxZWFlMmYwMzQ5ZjI1N2RhOTNhOGNiYTdmYWUwNDA0ZmYwNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@act-europe.fr", "date": "2004-02-27T08:11:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-02-27T08:11:34Z"}, "message": "fold-const.c (fold): Revert 2004-02-25 change.\n\n\t* fold-const.c (fold): Revert 2004-02-25 change.  Use the original\n\toperands to build a tree with swapped operands.\n\t* expr.c (expand_expr_real) <MAX_EXPR>: Consistently use the\n\t'unsignedp' predicate to specify the signedness.\n\nCo-Authored-By: Roger Sayle <roger@eyesopen.com>\n\nFrom-SVN: r78558", "tree": {"sha": "89b9c323fc395b30c52bd4ad180647a25da37dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89b9c323fc395b30c52bd4ad180647a25da37dd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/288dc1eae2f0349f257da93a8cba7fae0404ff05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288dc1eae2f0349f257da93a8cba7fae0404ff05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/288dc1eae2f0349f257da93a8cba7fae0404ff05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288dc1eae2f0349f257da93a8cba7fae0404ff05/comments", "author": null, "committer": null, "parents": [{"sha": "7a0a47c77ffab06d18d4a0fc54905060eaeecd05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0a47c77ffab06d18d4a0fc54905060eaeecd05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0a47c77ffab06d18d4a0fc54905060eaeecd05"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "d0d6185725b034fbe80eabbb4c8b77f0ab86d14f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288dc1eae2f0349f257da93a8cba7fae0404ff05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288dc1eae2f0349f257da93a8cba7fae0404ff05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=288dc1eae2f0349f257da93a8cba7fae0404ff05", "patch": "@@ -1,3 +1,11 @@\n+2004-02-27  Eric Botcazou  <ebotcazou@act-europe.fr>\n+            Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (fold): Revert 2004-02-25 change.  Use the original\n+\toperands to build a tree with swapped operands.\n+\t* expr.c (expand_expr_real) <MAX_EXPR>: Consistently use the\n+\t'unsignedp' predicate to specify the signedness.\n+\n 2004-02-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-decl.c, c-ppoutput.c, combine.c, cppfiles.c, dwarf2out.c,"}, {"sha": "205dc78f9d8e38a93ad2c22cfec5e47c833fd000", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288dc1eae2f0349f257da93a8cba7fae0404ff05/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288dc1eae2f0349f257da93a8cba7fae0404ff05/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=288dc1eae2f0349f257da93a8cba7fae0404ff05", "patch": "@@ -8034,7 +8034,7 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n       /* First try to do it with a special MIN or MAX instruction.\n \t If that does not win, use a conditional jump to select the proper\n \t value.  */\n-      this_optab = (TREE_UNSIGNED (type)\n+      this_optab = (unsignedp\n \t\t    ? (code == MIN_EXPR ? umin_optab : umax_optab)\n \t\t    : (code == MIN_EXPR ? smin_optab : smax_optab));\n \n@@ -8068,18 +8068,16 @@ expand_expr_real (tree exp, rtx target, enum machine_mode tmode,\n \t  && ! can_compare_p (GE, mode, ccp_jump))\n \t{\n \t  if (code == MAX_EXPR)\n-\t    do_jump_by_parts_greater_rtx (mode, TREE_UNSIGNED (type),\n-\t\t\t\t\t  target, op1, NULL_RTX, op0);\n+\t    do_jump_by_parts_greater_rtx (mode, unsignedp, target, op1,\n+\t\t\t\t\t  NULL_RTX, op0);\n \t  else\n-\t    do_jump_by_parts_greater_rtx (mode, TREE_UNSIGNED (type),\n-\t\t\t\t\t  op1, target, NULL_RTX, op0);\n+\t    do_jump_by_parts_greater_rtx (mode, unsignedp, op1, target,\n+\t\t\t\t\t  NULL_RTX, op0);\n \t}\n       else\n \t{\n-\t  int unsignedp = TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 1)));\n \t  do_compare_rtx_and_jump (target, op1, code == MAX_EXPR ? GE : LE,\n-\t\t\t\t   unsignedp, mode, NULL_RTX, NULL_RTX,\n-\t\t\t\t   op0);\n+\t\t\t\t   unsignedp, mode, NULL_RTX, NULL_RTX, op0);\n \t}\n       emit_move_insn (target, op1);\n       emit_label (op0);"}, {"sha": "9178a34417821dd5836908b6d4991513231f0814", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288dc1eae2f0349f257da93a8cba7fae0404ff05/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288dc1eae2f0349f257da93a8cba7fae0404ff05/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=288dc1eae2f0349f257da93a8cba7fae0404ff05", "patch": "@@ -5423,10 +5423,7 @@ fold (tree expr)\n \t  if (op == 0)\n \t    continue;\t\t/* Valid for CALL_EXPR, at least.  */\n \n-\t  if (kind == '<'\n-\t      || code == MAX_EXPR\n-\t      || code == MIN_EXPR\n-\t      || code == RSHIFT_EXPR)\n+\t  if (kind == '<' || code == RSHIFT_EXPR)\n \t    {\n \t      /* Signedness matters here.  Perhaps we can refine this\n \t\t later.  */\n@@ -5459,7 +5456,8 @@ fold (tree expr)\n      to ARG1 to reduce the number of tests below.  */\n   if (commutative_tree_code (code)\n       && tree_swap_operands_p (arg0, arg1, true))\n-    return fold (build (code, type, arg1, arg0));\n+    return fold (build (code, type, TREE_OPERAND (t, 1),\n+\t\t\tTREE_OPERAND (t, 0)));\n \n   /* Now WINS is set as described above,\n      ARG0 is the first operand of EXPR,"}]}