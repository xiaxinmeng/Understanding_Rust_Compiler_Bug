{"sha": "5f516a6a5d7ecce48a86d01fed1aeb4fc4ccc534", "node_id": "C_kwDOANBUbNoAKDVmNTE2YTZhNWQ3ZWNjZTQ4YTg2ZDAxZmVkMWFlYjRmYzRjY2M1MzQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-12T11:37:26Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-12T11:40:02Z"}, "message": "Remove unused function.\n\n\tPR tree-optimization/102497\n\ngcc/ChangeLog:\n\n\t* gimple-predicate-analysis.cc (add_pred): Remove unused\n\tfunction:", "tree": {"sha": "8ee9bba2dc836a3e597cf4f4c39b834ecc0a9d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ee9bba2dc836a3e597cf4f4c39b834ecc0a9d54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f516a6a5d7ecce48a86d01fed1aeb4fc4ccc534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f516a6a5d7ecce48a86d01fed1aeb4fc4ccc534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f516a6a5d7ecce48a86d01fed1aeb4fc4ccc534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f516a6a5d7ecce48a86d01fed1aeb4fc4ccc534/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "140346fa246dc2476c5c2bf2ecadebd18a3af5d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140346fa246dc2476c5c2bf2ecadebd18a3af5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/140346fa246dc2476c5c2bf2ecadebd18a3af5d0"}], "stats": {"total": 61, "additions": 0, "deletions": 61}, "files": [{"sha": "6dde020384103821d8aa392be1751ca15d74db4c", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f516a6a5d7ecce48a86d01fed1aeb4fc4ccc534/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f516a6a5d7ecce48a86d01fed1aeb4fc4ccc534/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=5f516a6a5d7ecce48a86d01fed1aeb4fc4ccc534", "patch": "@@ -2105,67 +2105,6 @@ predicate::normalize (gimple *use_or_def, bool is_use)\n     }\n }\n \n-/* Add a predicate for the condition or logical assignment STMT to CHAIN.\n-   Expand SSA_NAME into constituent subexpressions.  Invert the result\n-   if INVERT is true.  Return true if the predicate has been added.  */\n-\n-static bool\n-add_pred (pred_chain *chain, gimple *stmt, bool invert)\n-{\n-  if (gimple_code (stmt) == GIMPLE_COND)\n-    {\n-      tree lhs = gimple_cond_lhs (stmt);\n-      if (TREE_CODE (lhs) == SSA_NAME)\n-\t{\n-\t  gimple *def = SSA_NAME_DEF_STMT (lhs);\n-\t  if (is_gimple_assign (def)\n-\t      && add_pred (chain, def, invert))\n-\t    return true;\n-\t}\n-\n-      pred_info pred;\n-      pred.pred_lhs = lhs;\n-      pred.pred_rhs = gimple_cond_rhs (stmt);\n-      pred.cond_code = gimple_cond_code (stmt);\n-      pred.invert = invert;\n-      chain->safe_push (pred);\n-      return true;\n-    }\n-\n-  if (!is_gimple_assign (stmt))\n-    return false;\n-\n-  if (gimple_assign_single_p (stmt))\n-    // FIXME: handle this?\n-    return false;\n-\n-  if (TREE_TYPE (gimple_assign_lhs (stmt)) != boolean_type_node)\n-    return false;\n-\n-  tree rhs1 = gimple_assign_rhs1 (stmt);\n-  tree rhs2 = gimple_assign_rhs2 (stmt);\n-  tree_code code = gimple_assign_rhs_code (stmt);\n-  if (code == BIT_AND_EXPR)\n-    {\n-      if (TREE_CODE (rhs1) == SSA_NAME\n-\t  && add_pred (chain, SSA_NAME_DEF_STMT (rhs1), invert)\n-\t  && TREE_CODE (rhs2) == SSA_NAME\n-\t  /* FIXME: Need to handle failure below! */\n-\t  && add_pred (chain, SSA_NAME_DEF_STMT (rhs2), invert))\n-\treturn true;\n-    }\n-  else if (TREE_CODE_CLASS (code) != tcc_comparison)\n-    return false;\n-\n-  pred_info pred;\n-  pred.pred_lhs = rhs1;\n-  pred.pred_rhs = rhs2;\n-  pred.cond_code = code;\n-  pred.invert = invert;\n-  chain->safe_push (pred);\n-  return true;\n-}\n-\n /* Convert the chains of control dependence edges into a set of predicates.\n    A control dependence chain is represented by a vector edges.  DEP_CHAINS\n    points to an array of NUM_CHAINS dependence chains. One edge in"}]}