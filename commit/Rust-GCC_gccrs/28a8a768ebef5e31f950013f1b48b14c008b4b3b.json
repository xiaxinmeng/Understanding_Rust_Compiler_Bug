{"sha": "28a8a768ebef5e31f950013f1b48b14c008b4b3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhOGE3NjhlYmVmNWUzMWY5NTAwMTNmMWI0OGIxNGMwMDhiNGIzYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-17T09:54:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-17T09:54:36Z"}, "message": "re PR target/85323 (SSE/AVX/AVX512 shift by 0 not optimized away)\n\n\tPR target/85323\n\t* config/i386/i386.c: Include tree-vector-builder.h.\n\t(ix86_vector_shift_count): New function.\n\t(ix86_fold_builtin): Fold shift builtins by scalar count.\n\t(ix86_gimple_fold_builtin): Likewise.\n\n\t* gcc.target/i386/pr85323-1.c: New test.\n\t* gcc.target/i386/pr85323-2.c: New test.\n\t* gcc.target/i386/pr85323-3.c: New test.\n\nFrom-SVN: r260311", "tree": {"sha": "b55a59fb3a2c1d50c6700d7191faf3008347f9ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55a59fb3a2c1d50c6700d7191faf3008347f9ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28a8a768ebef5e31f950013f1b48b14c008b4b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a8a768ebef5e31f950013f1b48b14c008b4b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a8a768ebef5e31f950013f1b48b14c008b4b3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a8a768ebef5e31f950013f1b48b14c008b4b3b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e6a811fad69dde184dd2900d4809a6cd7b42cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6a811fad69dde184dd2900d4809a6cd7b42cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e6a811fad69dde184dd2900d4809a6cd7b42cf9"}], "stats": {"total": 653, "additions": 653, "deletions": 0}, "files": [{"sha": "994fc63cc25b67a562b50d9808d327d9f305a78e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28a8a768ebef5e31f950013f1b48b14c008b4b3b", "patch": "@@ -1,5 +1,11 @@\n 2018-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85323\n+\t* config/i386/i386.c: Include tree-vector-builder.h.\n+\t(ix86_vector_shift_count): New function.\n+\t(ix86_fold_builtin): Fold shift builtins by scalar count.\n+\t(ix86_gimple_fold_builtin): Likewise.\n+\n \t* config/i386/avx512fintrin.h (_mm512_set_epi16, _mm512_set_epi8,\n \t_mm512_setzero): New intrinsics.\n "}, {"sha": "f802adde7b2ac7dfc9ba074152c80a7f1c7f9b49", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 340, "deletions": 0, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=28a8a768ebef5e31f950013f1b48b14c008b4b3b", "patch": "@@ -91,6 +91,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-prop.h\"\n #include \"ipa-fnsummary.h\"\n #include \"wide-int-bitmask.h\"\n+#include \"tree-vector-builder.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -33365,6 +33366,28 @@ fold_builtin_cpu (tree fndecl, tree *args)\n   gcc_unreachable ();\n }\n \n+/* Return the shift count of a vector by scalar shift builtin second argument\n+   ARG1.  */\n+static tree\n+ix86_vector_shift_count (tree arg1)\n+{\n+  if (tree_fits_uhwi_p (arg1))\n+    return arg1;\n+  else if (TREE_CODE (arg1) == VECTOR_CST && CHAR_BIT == 8)\n+    {\n+      /* The count argument is weird, passed in as various 128-bit\n+\t (or 64-bit) vectors, the low 64 bits from it are the count.  */\n+      unsigned char buf[16];\n+      int len = native_encode_expr (arg1, buf, 16);\n+      if (len == 0)\n+\treturn NULL_TREE;\n+      tree t = native_interpret_expr (uint64_type_node, buf, len);\n+      if (t && tree_fits_uhwi_p (t))\n+\treturn t;\n+    }\n+  return NULL_TREE;\n+}\n+\n static tree\n ix86_fold_builtin (tree fndecl, int n_args,\n \t\t   tree *args, bool ignore ATTRIBUTE_UNUSED)\n@@ -33373,6 +33396,8 @@ ix86_fold_builtin (tree fndecl, int n_args,\n     {\n       enum ix86_builtins fn_code = (enum ix86_builtins)\n \t\t\t\t   DECL_FUNCTION_CODE (fndecl);\n+      enum rtx_code rcode;\n+\n       switch (fn_code)\n \t{\n \tcase IX86_BUILTIN_CPU_IS:\n@@ -33553,6 +33578,168 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \t    }\n \t  break;\n \n+\tcase IX86_BUILTIN_PSLLD:\n+\tcase IX86_BUILTIN_PSLLD128:\n+\tcase IX86_BUILTIN_PSLLD128_MASK:\n+\tcase IX86_BUILTIN_PSLLD256:\n+\tcase IX86_BUILTIN_PSLLD256_MASK:\n+\tcase IX86_BUILTIN_PSLLD512:\n+\tcase IX86_BUILTIN_PSLLDI:\n+\tcase IX86_BUILTIN_PSLLDI128:\n+\tcase IX86_BUILTIN_PSLLDI128_MASK:\n+\tcase IX86_BUILTIN_PSLLDI256:\n+\tcase IX86_BUILTIN_PSLLDI256_MASK:\n+\tcase IX86_BUILTIN_PSLLDI512:\n+\tcase IX86_BUILTIN_PSLLQ:\n+\tcase IX86_BUILTIN_PSLLQ128:\n+\tcase IX86_BUILTIN_PSLLQ128_MASK:\n+\tcase IX86_BUILTIN_PSLLQ256:\n+\tcase IX86_BUILTIN_PSLLQ256_MASK:\n+\tcase IX86_BUILTIN_PSLLQ512:\n+\tcase IX86_BUILTIN_PSLLQI:\n+\tcase IX86_BUILTIN_PSLLQI128:\n+\tcase IX86_BUILTIN_PSLLQI128_MASK:\n+\tcase IX86_BUILTIN_PSLLQI256:\n+\tcase IX86_BUILTIN_PSLLQI256_MASK:\n+\tcase IX86_BUILTIN_PSLLQI512:\n+\tcase IX86_BUILTIN_PSLLW:\n+\tcase IX86_BUILTIN_PSLLW128:\n+\tcase IX86_BUILTIN_PSLLW128_MASK:\n+\tcase IX86_BUILTIN_PSLLW256:\n+\tcase IX86_BUILTIN_PSLLW256_MASK:\n+\tcase IX86_BUILTIN_PSLLW512_MASK:\n+\tcase IX86_BUILTIN_PSLLWI:\n+\tcase IX86_BUILTIN_PSLLWI128:\n+\tcase IX86_BUILTIN_PSLLWI128_MASK:\n+\tcase IX86_BUILTIN_PSLLWI256:\n+\tcase IX86_BUILTIN_PSLLWI256_MASK:\n+\tcase IX86_BUILTIN_PSLLWI512_MASK:\n+\t  rcode = ASHIFT;\n+\t  goto do_shift;\n+\tcase IX86_BUILTIN_PSRAD:\n+\tcase IX86_BUILTIN_PSRAD128:\n+\tcase IX86_BUILTIN_PSRAD128_MASK:\n+\tcase IX86_BUILTIN_PSRAD256:\n+\tcase IX86_BUILTIN_PSRAD256_MASK:\n+\tcase IX86_BUILTIN_PSRAD512:\n+\tcase IX86_BUILTIN_PSRADI:\n+\tcase IX86_BUILTIN_PSRADI128:\n+\tcase IX86_BUILTIN_PSRADI128_MASK:\n+\tcase IX86_BUILTIN_PSRADI256:\n+\tcase IX86_BUILTIN_PSRADI256_MASK:\n+\tcase IX86_BUILTIN_PSRADI512:\n+\tcase IX86_BUILTIN_PSRAQ128_MASK:\n+\tcase IX86_BUILTIN_PSRAQ256_MASK:\n+\tcase IX86_BUILTIN_PSRAQ512:\n+\tcase IX86_BUILTIN_PSRAQI128_MASK:\n+\tcase IX86_BUILTIN_PSRAQI256_MASK:\n+\tcase IX86_BUILTIN_PSRAQI512:\n+\tcase IX86_BUILTIN_PSRAW:\n+\tcase IX86_BUILTIN_PSRAW128:\n+\tcase IX86_BUILTIN_PSRAW128_MASK:\n+\tcase IX86_BUILTIN_PSRAW256:\n+\tcase IX86_BUILTIN_PSRAW256_MASK:\n+\tcase IX86_BUILTIN_PSRAW512:\n+\tcase IX86_BUILTIN_PSRAWI:\n+\tcase IX86_BUILTIN_PSRAWI128:\n+\tcase IX86_BUILTIN_PSRAWI128_MASK:\n+\tcase IX86_BUILTIN_PSRAWI256:\n+\tcase IX86_BUILTIN_PSRAWI256_MASK:\n+\tcase IX86_BUILTIN_PSRAWI512:\n+\t  rcode = ASHIFTRT;\n+\t  goto do_shift;\n+\tcase IX86_BUILTIN_PSRLD:\n+\tcase IX86_BUILTIN_PSRLD128:\n+\tcase IX86_BUILTIN_PSRLD128_MASK:\n+\tcase IX86_BUILTIN_PSRLD256:\n+\tcase IX86_BUILTIN_PSRLD256_MASK:\n+\tcase IX86_BUILTIN_PSRLD512:\n+\tcase IX86_BUILTIN_PSRLDI:\n+\tcase IX86_BUILTIN_PSRLDI128:\n+\tcase IX86_BUILTIN_PSRLDI128_MASK:\n+\tcase IX86_BUILTIN_PSRLDI256:\n+\tcase IX86_BUILTIN_PSRLDI256_MASK:\n+\tcase IX86_BUILTIN_PSRLDI512:\n+\tcase IX86_BUILTIN_PSRLQ:\n+\tcase IX86_BUILTIN_PSRLQ128:\n+\tcase IX86_BUILTIN_PSRLQ128_MASK:\n+\tcase IX86_BUILTIN_PSRLQ256:\n+\tcase IX86_BUILTIN_PSRLQ256_MASK:\n+\tcase IX86_BUILTIN_PSRLQ512:\n+\tcase IX86_BUILTIN_PSRLQI:\n+\tcase IX86_BUILTIN_PSRLQI128:\n+\tcase IX86_BUILTIN_PSRLQI128_MASK:\n+\tcase IX86_BUILTIN_PSRLQI256:\n+\tcase IX86_BUILTIN_PSRLQI256_MASK:\n+\tcase IX86_BUILTIN_PSRLQI512:\n+\tcase IX86_BUILTIN_PSRLW:\n+\tcase IX86_BUILTIN_PSRLW128:\n+\tcase IX86_BUILTIN_PSRLW128_MASK:\n+\tcase IX86_BUILTIN_PSRLW256:\n+\tcase IX86_BUILTIN_PSRLW256_MASK:\n+\tcase IX86_BUILTIN_PSRLW512:\n+\tcase IX86_BUILTIN_PSRLWI:\n+\tcase IX86_BUILTIN_PSRLWI128:\n+\tcase IX86_BUILTIN_PSRLWI128_MASK:\n+\tcase IX86_BUILTIN_PSRLWI256:\n+\tcase IX86_BUILTIN_PSRLWI256_MASK:\n+\tcase IX86_BUILTIN_PSRLWI512:\n+\t  rcode = LSHIFTRT;\n+\t  goto do_shift;\n+\n+\tdo_shift:\n+\t  gcc_assert (n_args >= 2);\n+\t  if (TREE_CODE (args[0]) != VECTOR_CST)\n+\t    break;\n+\t  if (n_args > 2)\n+\t    {\n+\t      /* This is masked shift.  Only optimize if the mask is all\n+\t\t ones.  */\n+\t      if (!tree_fits_uhwi_p (args[n_args - 1])\n+\t\t  || TREE_SIDE_EFFECTS (args[n_args - 2]))\n+\t\tbreak;\n+\t      unsigned HOST_WIDE_INT mask = tree_to_uhwi (args[n_args - 1]);\n+\t      unsigned elems = TYPE_VECTOR_SUBPARTS (TREE_TYPE (args[0]));\n+\t      if ((mask | (HOST_WIDE_INT_M1U << elems)) != HOST_WIDE_INT_M1U)\n+\t\tbreak;\n+\t    }\n+\t  if (tree tem = ix86_vector_shift_count (args[1]))\n+\t    {\n+\t      unsigned HOST_WIDE_INT count = tree_to_uhwi (tem);\n+\t      if (count == 0)\n+\t\treturn args[0];\n+\t      if (count >= TYPE_PRECISION (TREE_TYPE (TREE_TYPE (args[0]))))\n+\t\t{\n+\t\t  if (rcode != ASHIFTRT)\n+\t\t    return build_zero_cst (TREE_TYPE (args[0]));\n+\t\t  count = TYPE_PRECISION (TREE_TYPE (TREE_TYPE (args[0]))) - 1;\n+\t\t}\n+\t      tree countt = build_int_cst (integer_type_node, count);\n+\t      tree_vector_builder builder;\n+\t      builder.new_unary_operation (TREE_TYPE (args[0]), args[0],\n+\t\t\t\t\t   false);\n+\t      unsigned int cnt = builder.encoded_nelts ();\n+\t      for (unsigned int i = 0; i < cnt; ++i)\n+\t\t{\n+\t\t  tree elt = VECTOR_CST_ELT (args[0], i);\n+\t\t  if (TREE_CODE (elt) != INTEGER_CST || TREE_OVERFLOW (elt))\n+\t\t    return NULL_TREE;\n+\t\t  tree type = TREE_TYPE (elt);\n+\t\t  if (rcode == LSHIFTRT)\n+\t\t    elt = fold_convert (unsigned_type_for (type), elt);\n+\t\t  elt = const_binop (rcode == ASHIFT\n+\t\t\t\t     ? LSHIFT_EXPR : RSHIFT_EXPR, TREE_TYPE (elt),\n+\t\t\t\t     elt, countt);\n+\t\t  if (!elt || TREE_CODE (elt) != INTEGER_CST)\n+\t\t    return NULL_TREE;\n+\t\t  if (rcode == LSHIFTRT)\n+\t\t    elt = fold_convert (type, elt);\n+\t\t  builder.quick_push (elt);\n+\t\t}\n+\t      return builder.build ();\n+\t    }\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -33578,6 +33765,8 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   enum ix86_builtins fn_code = (enum ix86_builtins) DECL_FUNCTION_CODE (fndecl);\n   tree decl = NULL_TREE;\n   tree arg0, arg1;\n+  enum rtx_code rcode;\n+  unsigned HOST_WIDE_INT count;\n \n   switch (fn_code)\n     {\n@@ -33657,6 +33846,157 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t}\n       break;\n \n+    case IX86_BUILTIN_PSLLD:\n+    case IX86_BUILTIN_PSLLD128:\n+    case IX86_BUILTIN_PSLLD128_MASK:\n+    case IX86_BUILTIN_PSLLD256:\n+    case IX86_BUILTIN_PSLLD256_MASK:\n+    case IX86_BUILTIN_PSLLD512:\n+    case IX86_BUILTIN_PSLLDI:\n+    case IX86_BUILTIN_PSLLDI128:\n+    case IX86_BUILTIN_PSLLDI128_MASK:\n+    case IX86_BUILTIN_PSLLDI256:\n+    case IX86_BUILTIN_PSLLDI256_MASK:\n+    case IX86_BUILTIN_PSLLDI512:\n+    case IX86_BUILTIN_PSLLQ:\n+    case IX86_BUILTIN_PSLLQ128:\n+    case IX86_BUILTIN_PSLLQ128_MASK:\n+    case IX86_BUILTIN_PSLLQ256:\n+    case IX86_BUILTIN_PSLLQ256_MASK:\n+    case IX86_BUILTIN_PSLLQ512:\n+    case IX86_BUILTIN_PSLLQI:\n+    case IX86_BUILTIN_PSLLQI128:\n+    case IX86_BUILTIN_PSLLQI128_MASK:\n+    case IX86_BUILTIN_PSLLQI256:\n+    case IX86_BUILTIN_PSLLQI256_MASK:\n+    case IX86_BUILTIN_PSLLQI512:\n+    case IX86_BUILTIN_PSLLW:\n+    case IX86_BUILTIN_PSLLW128:\n+    case IX86_BUILTIN_PSLLW128_MASK:\n+    case IX86_BUILTIN_PSLLW256:\n+    case IX86_BUILTIN_PSLLW256_MASK:\n+    case IX86_BUILTIN_PSLLW512_MASK:\n+    case IX86_BUILTIN_PSLLWI:\n+    case IX86_BUILTIN_PSLLWI128:\n+    case IX86_BUILTIN_PSLLWI128_MASK:\n+    case IX86_BUILTIN_PSLLWI256:\n+    case IX86_BUILTIN_PSLLWI256_MASK:\n+    case IX86_BUILTIN_PSLLWI512_MASK:\n+      rcode = ASHIFT;\n+      goto do_shift;\n+    case IX86_BUILTIN_PSRAD:\n+    case IX86_BUILTIN_PSRAD128:\n+    case IX86_BUILTIN_PSRAD128_MASK:\n+    case IX86_BUILTIN_PSRAD256:\n+    case IX86_BUILTIN_PSRAD256_MASK:\n+    case IX86_BUILTIN_PSRAD512:\n+    case IX86_BUILTIN_PSRADI:\n+    case IX86_BUILTIN_PSRADI128:\n+    case IX86_BUILTIN_PSRADI128_MASK:\n+    case IX86_BUILTIN_PSRADI256:\n+    case IX86_BUILTIN_PSRADI256_MASK:\n+    case IX86_BUILTIN_PSRADI512:\n+    case IX86_BUILTIN_PSRAQ128_MASK:\n+    case IX86_BUILTIN_PSRAQ256_MASK:\n+    case IX86_BUILTIN_PSRAQ512:\n+    case IX86_BUILTIN_PSRAQI128_MASK:\n+    case IX86_BUILTIN_PSRAQI256_MASK:\n+    case IX86_BUILTIN_PSRAQI512:\n+    case IX86_BUILTIN_PSRAW:\n+    case IX86_BUILTIN_PSRAW128:\n+    case IX86_BUILTIN_PSRAW128_MASK:\n+    case IX86_BUILTIN_PSRAW256:\n+    case IX86_BUILTIN_PSRAW256_MASK:\n+    case IX86_BUILTIN_PSRAW512:\n+    case IX86_BUILTIN_PSRAWI:\n+    case IX86_BUILTIN_PSRAWI128:\n+    case IX86_BUILTIN_PSRAWI128_MASK:\n+    case IX86_BUILTIN_PSRAWI256:\n+    case IX86_BUILTIN_PSRAWI256_MASK:\n+    case IX86_BUILTIN_PSRAWI512:\n+      rcode = ASHIFTRT;\n+      goto do_shift;\n+    case IX86_BUILTIN_PSRLD:\n+    case IX86_BUILTIN_PSRLD128:\n+    case IX86_BUILTIN_PSRLD128_MASK:\n+    case IX86_BUILTIN_PSRLD256:\n+    case IX86_BUILTIN_PSRLD256_MASK:\n+    case IX86_BUILTIN_PSRLD512:\n+    case IX86_BUILTIN_PSRLDI:\n+    case IX86_BUILTIN_PSRLDI128:\n+    case IX86_BUILTIN_PSRLDI128_MASK:\n+    case IX86_BUILTIN_PSRLDI256:\n+    case IX86_BUILTIN_PSRLDI256_MASK:\n+    case IX86_BUILTIN_PSRLDI512:\n+    case IX86_BUILTIN_PSRLQ:\n+    case IX86_BUILTIN_PSRLQ128:\n+    case IX86_BUILTIN_PSRLQ128_MASK:\n+    case IX86_BUILTIN_PSRLQ256:\n+    case IX86_BUILTIN_PSRLQ256_MASK:\n+    case IX86_BUILTIN_PSRLQ512:\n+    case IX86_BUILTIN_PSRLQI:\n+    case IX86_BUILTIN_PSRLQI128:\n+    case IX86_BUILTIN_PSRLQI128_MASK:\n+    case IX86_BUILTIN_PSRLQI256:\n+    case IX86_BUILTIN_PSRLQI256_MASK:\n+    case IX86_BUILTIN_PSRLQI512:\n+    case IX86_BUILTIN_PSRLW:\n+    case IX86_BUILTIN_PSRLW128:\n+    case IX86_BUILTIN_PSRLW128_MASK:\n+    case IX86_BUILTIN_PSRLW256:\n+    case IX86_BUILTIN_PSRLW256_MASK:\n+    case IX86_BUILTIN_PSRLW512:\n+    case IX86_BUILTIN_PSRLWI:\n+    case IX86_BUILTIN_PSRLWI128:\n+    case IX86_BUILTIN_PSRLWI128_MASK:\n+    case IX86_BUILTIN_PSRLWI256:\n+    case IX86_BUILTIN_PSRLWI256_MASK:\n+    case IX86_BUILTIN_PSRLWI512:\n+      rcode = LSHIFTRT;\n+      goto do_shift;\n+\n+    do_shift:\n+      gcc_assert (n_args >= 2);\n+      arg0 = gimple_call_arg (stmt, 0);\n+      arg1 = gimple_call_arg (stmt, 1);\n+      if (n_args > 2)\n+\t{\n+\t  /* This is masked shift.  Only optimize if the mask is all ones.  */\n+\t  tree argl = gimple_call_arg (stmt, n_args - 1);\n+\t  if (!tree_fits_uhwi_p (argl))\n+\t    break;\n+\t  unsigned HOST_WIDE_INT mask = tree_to_uhwi (argl);\n+\t  unsigned elems = TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0));\n+\t  if ((mask | (HOST_WIDE_INT_M1U << elems)) != HOST_WIDE_INT_M1U)\n+\t    break;\n+\t}\n+      arg1 = ix86_vector_shift_count (arg1);\n+      if (!arg1)\n+\tbreak;\n+      count = tree_to_uhwi (arg1);\n+      if (count == 0)\n+\t{\n+\t  /* Just return the first argument for shift by 0.  */\n+\t  location_t loc = gimple_location (stmt);\n+\t  gimple *g = gimple_build_assign (gimple_call_lhs (stmt), arg0);\n+\t  gimple_set_location (g, loc);\n+\t  gsi_replace (gsi, g, false);\n+\t  return true;\n+\t}\n+      if (rcode != ASHIFTRT\n+\t  && count >= TYPE_PRECISION (TREE_TYPE (TREE_TYPE (arg0))))\n+\t{\n+\t  /* For shift counts equal or greater than precision, except for\n+\t     arithmetic right shift the result is zero.  */\n+\t  location_t loc = gimple_location (stmt);\n+\t  gimple *g = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t   build_zero_cst (TREE_TYPE (arg0)));\n+\t  gimple_set_location (g, loc);\n+\t  gsi_replace (gsi, g, false);\n+\t  return true;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "5d98ff400c169398aeda6070ae4f7d5ea8a34534", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28a8a768ebef5e31f950013f1b48b14c008b4b3b", "patch": "@@ -1,5 +1,10 @@\n 2018-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85323\n+\t* gcc.target/i386/pr85323-1.c: New test.\n+\t* gcc.target/i386/pr85323-2.c: New test.\n+\t* gcc.target/i386/pr85323-3.c: New test.\n+\n \t* gcc.target/i386/avx512f-set-v32hi-1.c: New test.\n \t* gcc.target/i386/avx512f-set-v32hi-2.c: New test.\n \t* gcc.target/i386/avx512f-set-v32hi-3.c: New test."}, {"sha": "f0518264e1b7bff540788d62bf46d7805069fc5d", "filename": "gcc/testsuite/gcc.target/i386/pr85323-1.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-1.c?ref=28a8a768ebef5e31f950013f1b48b14c008b4b3b", "patch": "@@ -0,0 +1,78 @@\n+/* PR target/85323 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return x_\\[0-9]*.D.;\" 3 \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+foo (__m128i x)\n+{\n+  x = _mm_sll_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm_sll_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm_sll_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm_srl_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm_srl_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm_srl_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm_sra_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm_sra_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm_sra_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm_slli_epi64 (x, 0);\n+  x = _mm_slli_epi32 (x, 0);\n+  x = _mm_slli_epi16 (x, 0);\n+  x = _mm_srli_epi64 (x, 0);\n+  x = _mm_srli_epi32 (x, 0);\n+  x = _mm_srli_epi16 (x, 0);\n+  x = _mm_srai_epi64 (x, 0);\n+  x = _mm_srai_epi32 (x, 0);\n+  x = _mm_srai_epi16 (x, 0);\n+  return x;\n+}\n+\n+__m256i\n+bar (__m256i x)\n+{\n+  x = _mm256_sll_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm256_sll_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm256_sll_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm256_srl_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm256_srl_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm256_srl_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm256_sra_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm256_sra_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm256_sra_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm256_slli_epi64 (x, 0);\n+  x = _mm256_slli_epi32 (x, 0);\n+  x = _mm256_slli_epi16 (x, 0);\n+  x = _mm256_srli_epi64 (x, 0);\n+  x = _mm256_srli_epi32 (x, 0);\n+  x = _mm256_srli_epi16 (x, 0);\n+  x = _mm256_srai_epi64 (x, 0);\n+  x = _mm256_srai_epi32 (x, 0);\n+  x = _mm256_srai_epi16 (x, 0);\n+  return x;\n+}\n+\n+__m512i\n+baz (__m512i x)\n+{\n+  x = _mm512_sll_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm512_sll_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm512_sll_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm512_srl_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm512_srl_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm512_srl_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm512_sra_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm512_sra_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm512_sra_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm512_slli_epi64 (x, 0);\n+  x = _mm512_slli_epi32 (x, 0);\n+  x = _mm512_slli_epi16 (x, 0);\n+  x = _mm512_srli_epi64 (x, 0);\n+  x = _mm512_srli_epi32 (x, 0);\n+  x = _mm512_srli_epi16 (x, 0);\n+  x = _mm512_srai_epi64 (x, 0);\n+  x = _mm512_srai_epi32 (x, 0);\n+  x = _mm512_srai_epi16 (x, 0);\n+  return x;\n+}"}, {"sha": "9fa21f525227cec243521aec8d97accd242a4152", "filename": "gcc/testsuite/gcc.target/i386/pr85323-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-2.c?ref=28a8a768ebef5e31f950013f1b48b14c008b4b3b", "patch": "@@ -0,0 +1,59 @@\n+/* PR target/85323 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"= \\{ 0, 0 \\};\" 12 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"= \\{ 0, 0, 0, 0 \\};\" 12 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"= \\{ 0, 0, 0, 0, 0, 0, 0, 0 \\};\" 12 \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (__m128i x[12])\n+{\n+  x[0] = _mm_sll_epi64 (x[0], _mm_set1_epi64x (64));\n+  x[1] = _mm_sll_epi32 (x[1], _mm_set1_epi64x (32));\n+  x[2] = _mm_sll_epi16 (x[2], _mm_set1_epi64x (16));\n+  x[3] = _mm_srl_epi64 (x[3], _mm_set1_epi64x (65));\n+  x[4] = _mm_srl_epi32 (x[4], _mm_set1_epi64x (33));\n+  x[5] = _mm_srl_epi16 (x[5], _mm_set1_epi64x (17));\n+  x[6] = _mm_slli_epi64 (x[6], 66);\n+  x[7] = _mm_slli_epi32 (x[7], 34);\n+  x[8] = _mm_slli_epi16 (x[8], 18);\n+  x[9] = _mm_srli_epi64 (x[9], 67);\n+  x[10] = _mm_srli_epi32 (x[10], 35);\n+  x[11] = _mm_srli_epi16 (x[11], 19);\n+}\n+\n+void\n+bar (__m256i x[12])\n+{\n+  x[0] = _mm256_sll_epi64 (x[0], _mm_set1_epi64x (64));\n+  x[1] = _mm256_sll_epi32 (x[1], _mm_set1_epi64x (32));\n+  x[2] = _mm256_sll_epi16 (x[2], _mm_set1_epi64x (16));\n+  x[3] = _mm256_srl_epi64 (x[3], _mm_set1_epi64x (65));\n+  x[4] = _mm256_srl_epi32 (x[4], _mm_set1_epi64x (33));\n+  x[5] = _mm256_srl_epi16 (x[5], _mm_set1_epi64x (17));\n+  x[6] = _mm256_slli_epi64 (x[6], 66);\n+  x[7] = _mm256_slli_epi32 (x[7], 34);\n+  x[8] = _mm256_slli_epi16 (x[8], 18);\n+  x[9] = _mm256_srli_epi64 (x[9], 67);\n+  x[10] = _mm256_srli_epi32 (x[10], 35);\n+  x[11] = _mm256_srli_epi16 (x[11], 19);\n+}\n+\n+void\n+baz (__m512i x[12])\n+{\n+  x[0] = _mm512_sll_epi64 (x[0], _mm_set1_epi64x (64));\n+  x[1] = _mm512_sll_epi32 (x[1], _mm_set1_epi64x (32));\n+  x[2] = _mm512_sll_epi16 (x[2], _mm_set1_epi64x (16));\n+  x[3] = _mm512_srl_epi64 (x[3], _mm_set1_epi64x (65));\n+  x[4] = _mm512_srl_epi32 (x[4], _mm_set1_epi64x (33));\n+  x[5] = _mm512_srl_epi16 (x[5], _mm_set1_epi64x (17));\n+  x[6] = _mm512_slli_epi64 (x[6], 66);\n+  x[7] = _mm512_slli_epi32 (x[7], 34);\n+  x[8] = _mm512_slli_epi16 (x[8], 18);\n+  x[9] = _mm512_srli_epi64 (x[9], 67);\n+  x[10] = _mm512_srli_epi32 (x[10], 35);\n+  x[11] = _mm512_srli_epi16 (x[11], 19);\n+}"}, {"sha": "6b4b7b7ef2f3546ba1f9c4534255a2127e8269d2", "filename": "gcc/testsuite/gcc.target/i386/pr85323-3.c", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a8a768ebef5e31f950013f1b48b14c008b4b3b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-3.c?ref=28a8a768ebef5e31f950013f1b48b14c008b4b3b", "patch": "@@ -0,0 +1,165 @@\n+/* PR target/85323 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -fdump-tree-optimized\" } */\n+\n+#include <x86intrin.h>\n+\n+struct S1 { __m128i a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r; } s1;\n+struct S2 { __m256i a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r; } s2;\n+struct S3 { __m512i a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r; } s3;\n+\n+/* { dg-final { scan-tree-dump-times \"s1.a = \\{ -644307835425925520, -761680639942076944 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.b = \\{ -655884249613729784, 149501664998336 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.c = \\{ -7953356323460470064, -763088040595761680 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.d = \\{ 2295775699285163865, 2005711373062887255 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.e = \\{ 2295594818081914880, 1729384589115689679 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.f = \\{ 163818445303977131, 2005535447444297559 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.g = \\{ -10067309928530087, -300131636150806697 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.h = \\{ -10248187373682688, -576458420098004273 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.i = \\{ 163818449062130859, -300061267406620841 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.j = \\{ -1288615670851851040, -1523361279884153888 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.k = \\{ -2623536998454919136, 597998070058752 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.l = \\{ -8286618366555171200, -6106674658193395840 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.m = \\{ 143485981205322741, 125356960816430453 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.n = \\{ 71737335514923008, 54043264249115734 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.o = \\{ 2533274794590290, 31244130443395165 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.p = \\{ -78650858816642, -2344778407428178 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.q = \\{ -40029096247296, -2251791223601526 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.r = \\{ 4294967295, -1 \\};\" 1 \"optimized\" } } */\n+\n+void\n+foo (void)\n+{\n+  __m128i a = _mm_set_epi64x (0xdeadbeefcafebabeULL, 0xfee1deadfeedfaceULL);\n+  __m128i b = _mm_set1_epi64x (3);\n+  __m128i c = _mm_set_epi32 (0xc00010ffU, 0x12345678U, 0xfedcba98U, 0x80000001U);\n+  __m128i d = _mm_set_epi16 (0xdead, 0xbeef, 0xcafe, 0xbabe,\n+\t\t\t     0x1234, 0x0012, 0x8001, 0xa55a);\n+  s1.a = _mm_sll_epi64 (a, b);\n+  s1.b = _mm_sll_epi32 (c, b);\n+  s1.c = _mm_sll_epi16 (d, b);\n+  s1.d = _mm_srl_epi64 (a, b);\n+  s1.e = _mm_srl_epi32 (c, b);\n+  s1.f = _mm_srl_epi16 (d, b);\n+  s1.g = _mm_sra_epi64 (a, b);\n+  s1.h = _mm_sra_epi32 (c, b);\n+  s1.i = _mm_sra_epi16 (d, b);\n+  s1.j = _mm_slli_epi64 (a, 4);\n+  s1.k = _mm_slli_epi32 (c, 5);\n+  s1.l = _mm_slli_epi16 (d, 6);\n+  s1.m = _mm_srli_epi64 (a, 7);\n+  s1.n = _mm_srli_epi32 (c, 8);\n+  s1.o = _mm_srli_epi16 (d, 9);\n+  s1.p = _mm_srai_epi64 (a, 10);\n+  s1.q = _mm_srai_epi32 (c, 11);\n+  s1.r = _mm_srai_epi16 (d, 17);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"s2.a = \\{ -81985529216486896, 2541551405711093504, -1288615670851851040, -1523361279884153888 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.b = \\{ -5770329518966239232, -1523361330099340656, -1311768499227459568, 298999035029376 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.c = \\{ 504495724104253440, 7458149828057367040, 2540031426788611488, -1526457556168299552 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.d = \\{ 71737338064426034, 81985529216486895, 1147887849642581932, 1002855686531443627 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.e = \\{ 914208369051504912, 1002855682308758714, 1147797406893473792, 864692292410361191 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.f = \\{ 578438035006881792, 389290523068662018, 81909222651988565, 1002626984086277035 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.g = \\{ 71737338064426034, 81985529216486895, -5033654964265044, -150065818075403349 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.h = \\{ -238713135555342064, -150065822298088262, -5124093686841344, -288229212196485785 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.i = \\{ -574483469599965184, 389554409885860098, 81909226678581845, -150030633703310421 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.j = \\{ 9182379272246532360, -7952596333999229056, -644307835425925520, -761680639942076944 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.k = \\{ 6906085035777073152, -3046722664493648608, -2623536998454919136, 597998070058752 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.l = \\{ 2017701421440303104, -7061451798027958272, -8286618366555171200, -6106674658193395840 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.m = \\{ 8967167258053254, 10248191152060861, 143485981205322741, 125356960816430453 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.n = \\{ 57138020112929041, 62678476386201035, 71737335514923008, 54043264249115734 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.o = \\{ 18014613258436608, 12103754718314504, 2533274794590290, 31244130443395165 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.p = \\{ 1120895907256656, 1281023894007607, -78650858816642, -2344778407428178 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.q = \\{ -1864947814366686, -1172392927691335, -40029096247296, -2251791223601526 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.r = \\{ -281474976710656, 281474976645120, 4294967295, -1 \\};\" 1 \"optimized\" } } */\n+void\n+bar (void)\n+{\n+  __m256i a = _mm256_set_epi64x (0xdeadbeefcafebabeULL, 0xfee1deadfeedfaceULL,\n+\t\t\t\t 0x123456789abcdef0ULL, 0x0fedcba987654321ULL);\n+  __m128i b = _mm_set1_epi64x (4);\n+  __m256i c = _mm256_set_epi32 (0xc00010ffU, 0x12345678U, 0xfedcba98U, 0x80000001U,\n+\t\t\t\t0xdeadbeefU, 0x0fedcba9U, 0xcafebabeU, 0x00111100U);\n+  __m256i d = _mm256_set_epi16 (0xdead, 0xbeef, 0xcafe, 0xbabe,\n+\t\t\t\t0x1234, 0x0012, 0x8001, 0xa55a,\n+\t\t\t\t0x5678, 0x9abc, 0xdef0, 0x1020,\n+\t\t\t\t0x8070, 0x6543, 0x129f, 0);\n+  s2.a = _mm256_sll_epi64 (a, b);\n+  s2.b = _mm256_sll_epi32 (c, b);\n+  s2.c = _mm256_sll_epi16 (d, b);\n+  s2.d = _mm256_srl_epi64 (a, b);\n+  s2.e = _mm256_srl_epi32 (c, b);\n+  s2.f = _mm256_srl_epi16 (d, b);\n+  s2.g = _mm256_sra_epi64 (a, b);\n+  s2.h = _mm256_sra_epi32 (c, b);\n+  s2.i = _mm256_sra_epi16 (d, b);\n+  s2.j = _mm256_slli_epi64 (a, 3);\n+  s2.k = _mm256_slli_epi32 (c, 5);\n+  s2.l = _mm256_slli_epi16 (d, 6);\n+  s2.m = _mm256_srli_epi64 (a, 7);\n+  s2.n = _mm256_srli_epi32 (c, 8);\n+  s2.o = _mm256_srli_epi16 (d, 9);\n+  s2.p = _mm256_srai_epi64 (a, 10);\n+  s2.q = _mm256_srai_epi32 (c, 11);\n+  s2.r = _mm256_srai_epi16 (d, 17);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"s3.a = \\{ -3046722559768307776, 5083102811422187008, -163971058432973792, -2577231341703702080, -163971058432973792, 5083102811422187008, -2577231341703702080, -3046722559768307776 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.b = \\{ 597996922347520, -3046722665164841504, 5083102728347975712, 4256789792, 6906085035777073152, -3046722664493648608, -2623536998454919136, 597998070058752 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.c = \\{ -3053196591608342592, 1008991448208531392, -2458860116837868032, 162129725630732224, 1008991448208506880, -3530725896866495488, 5080062853577222976, -3053196591608342592 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.d = \\{ 501427843265721813, 40992764608243447, 35868669032213017, 573943924821290966, 35868669032213017, 40992764608243447, 573943924821290966, 501427843265721813 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.e = \\{ 432346144048187528, 501427841262775799, 40992761372999680, 8351325, 457104182378268808, 501427841154379357, 573898701299253248, 432346144057696947 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.f = \\{ 501313492043105749, 289078280015054423, 429819260250162935, 4398152877525, 289078280015052800, 194504521898459265, 40813871690155306, 501313492043105749 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.g = \\{ -75032909037701675, 40992764608243447, 35868669032213017, -2516827482132522, 35868669032213017, 40992764608243447, -2516827482132522, -75032909037701675 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.h = \\{ -144114608255235960, -75032906879898121, 40992765533749248, 8351325, -119356569925154680, -75032911149044131, -2562046843420672, -144114608245726541 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.i = \\{ -74874577215816235, -287382472288305577, -146368809008759049, 277081197379029, -287382472288370688, 194777204942897281, 40813875850968362, -74874577215816235 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.j = \\{ -761680639942076944, -7952596333999229056, 9182379272246532360, -644307835425925520, 9182379272246532360, -7952596333999229056, -644307835425925520, -761680639942076944 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.k = \\{ 298998461173760, -1523361330434937104, 2541551364173987856, 4275878544, -5770329518966239232, -1523361330099340656, -1311768499227459568, 298999035029376 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.l = \\{ -6106674658193395840, 2017701421440352128, -4917720233675801600, 324259451261464448, 2017701421440303104, -7061451798027958272, -8286618366555171200, -6106674658193395840 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.m = \\{ 125356960816430453, 10248191152060861, 8967167258053254, 143485981205322741, 8967167258053254, 10248191152060861, 143485981205322741, 125356960816430453 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.n = \\{ 54043264247927057, 62678476399750590, 5124093561012224, 1043915, 57138020112929041, 62678476386201035, 71737335514923008, 54043264249115734 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.o = \\{ 31244130443395165, 18014613258436709, 26740556584255599, 274884526173, 18014613258436608, 12103754718314504, 2533274794590290, 31244130443395165 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.p = \\{ -2344778407428178, 1281023894007607, 1120895907256656, -78650858816642, 1120895907256656, 1281023894007607, -78650858816642, -2344778407428178 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.q = \\{ -2251791223750110, -1172388633127497, 640512766771200, 130489, -1864947814366686, -1172392927691335, -40029096247296, -2251791223601526 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.r = \\{ -1, -281474976645121, -1, 281474976710655, -281474976710656, 281474976645120, 4294967295, -1 \\};\" 1 \"optimized\" } } */\n+\n+void\n+baz (void)\n+{\n+  __m512i a = _mm512_set_epi64 (0xdeadbeefcafebabeULL, 0xfee1deadfeedfaceULL,\n+\t\t\t\t0x123456789abcdef0ULL, 0x0fedcba987654321ULL,\n+\t\t\t\t0xfee1deadfeedfaceULL, 0x0fedcba987654321ULL,\n+\t\t\t\t0x123456789abcdef0ULL, 0xdeadbeefcafebabeULL);\n+  __m128i b = _mm_set1_epi64x (5);\n+  __m512i c = _mm512_set_epi32 (0xc00010ffU, 0x12345678U, 0xfedcba98U, 0x80000001U,\n+\t\t\t\t0xdeadbeefU, 0x0fedcba9U, 0xcafebabeU, 0x00111100U,\n+\t\t\t\t0, 0x0fedcba9U, 0x12345678U, 0x80000001U,\n+\t\t\t\t0xdeadbeefU, 0xdeadbeefU, 0xc00010ffU, 0x00111100U);\n+  __m512i d = _mm512_set_epi16 (0xdead, 0xbeef, 0xcafe, 0xbabe,\n+\t\t\t\t0x1234, 0x0012, 0x8001, 0xa55a,\n+\t\t\t\t0x5678, 0x9abc, 0xdef0, 0x1020,\n+\t\t\t\t0x8070, 0x6543, 0x129f, 0,\n+\t\t\t\t0x0012, 0x8001, 0xcafe, 0xbabe,\n+\t\t\t\t0xbeef, 0xcafe, 0x9abc, 0xdef0,\n+\t\t\t\t0x8070, 0x6543, 0x129f, 0xcafe,\n+\t\t\t\t0xdead, 0xbeef, 0xcafe, 0xbabe);\n+  s3.a = _mm512_sll_epi64 (a, b);\n+  s3.b = _mm512_sll_epi32 (c, b);\n+  s3.c = _mm512_sll_epi16 (d, b);\n+  s3.d = _mm512_srl_epi64 (a, b);\n+  s3.e = _mm512_srl_epi32 (c, b);\n+  s3.f = _mm512_srl_epi16 (d, b);\n+  s3.g = _mm512_sra_epi64 (a, b);\n+  s3.h = _mm512_sra_epi32 (c, b);\n+  s3.i = _mm512_sra_epi16 (d, b);\n+  s3.j = _mm512_slli_epi64 (a, 3);\n+  s3.k = _mm512_slli_epi32 (c, 4);\n+  s3.l = _mm512_slli_epi16 (d, 6);\n+  s3.m = _mm512_srli_epi64 (a, 7);\n+  s3.n = _mm512_srli_epi32 (c, 8);\n+  s3.o = _mm512_srli_epi16 (d, 9);\n+  s3.p = _mm512_srai_epi64 (a, 10);\n+  s3.q = _mm512_srai_epi32 (c, 11);\n+  s3.r = _mm512_srai_epi16 (d, 17);\n+}"}]}