{"sha": "6844185d068284ecccb52c718e2740fc9f3a1daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg0NDE4NWQwNjgyODRlY2NjYjUyYzcxOGUyNzQwZmM5ZjNhMWRhZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-06-27T23:33:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-06-27T23:33:02Z"}, "message": "tree-optimize.c (exercute_free_datastructures): Do not disband implicit edges...\n\n\n\t* tree-optimize.c (exercute_free_datastructures):\n\tDo not disband implicit edges; do not attempt to build insn list;\n\tdo not free cfg annotations.\n\t(execute_free_cfg_annotations); Disband implicit edges here;\n\tfree cfg annotations here too.\n\t(pass_free_cfg_annotations); New pass.\n\t(init_tree_optimization_passes); Add pass_free_cfg_annotations.\n\t* tree-ssa-operands.c (free_ssa_operands); Recover; export.\n\t* tree-ssa-operands.h (free_ssa_operands); declare.\n\t* tree-ssa.c (delete_tree_ssa); Free SSA operand; mark stmt modified;\n\tkill PHI nodes.\n\t* tree-ssanames.c (release_defs): Kill addresses_taken.\n\nFrom-SVN: r101360", "tree": {"sha": "52ebb42ae3f07c4bfcb29a8a669cb78feed3a95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52ebb42ae3f07c4bfcb29a8a669cb78feed3a95c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6844185d068284ecccb52c718e2740fc9f3a1daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6844185d068284ecccb52c718e2740fc9f3a1daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6844185d068284ecccb52c718e2740fc9f3a1daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6844185d068284ecccb52c718e2740fc9f3a1daf/comments", "author": null, "committer": null, "parents": [{"sha": "370369e1a7e0b3a217c016236374883e274f6a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/370369e1a7e0b3a217c016236374883e274f6a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/370369e1a7e0b3a217c016236374883e274f6a44"}], "stats": {"total": 93, "additions": 67, "deletions": 26}, "files": [{"sha": "bdbbe42e418fcee9b5db99905d8a5fd4bfa7409b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6844185d068284ecccb52c718e2740fc9f3a1daf", "patch": "@@ -1,5 +1,18 @@\n 2005-06-28  Jan Hubicka  <jh@suse.cz>\n \n+\t* tree-optimize.c (exercute_free_datastructures):\n+\tDo not disband implicit edges; do not attempt to build insn list;\n+\tdo not free cfg annotations.\n+\t(execute_free_cfg_annotations); Disband implicit edges here;\n+\tfree cfg annotations here too.\n+\t(pass_free_cfg_annotations); New pass.\n+\t(init_tree_optimization_passes); Add pass_free_cfg_annotations.\n+\t* tree-ssa-operands.c (free_ssa_operands); Recover; export.\n+\t* tree-ssa-operands.h (free_ssa_operands); declare.\n+\t* tree-ssa.c (delete_tree_ssa); Free SSA operand; mark stmt modified;\n+\tkill PHI nodes.\n+\t* tree-ssanames.c (release_defs): Kill addresses_taken.\n+\n \t* basic-block.h (basic_block_def): Kill rbi.\n \t(reorder_block_def): Kill; Remove next field (replaced by aux);\n \tmove other fields to ..."}, {"sha": "24db18684f3db95c9335fbf6396c255c6879ecce", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=6844185d068284ecccb52c718e2740fc9f3a1daf", "patch": "@@ -120,32 +120,61 @@ static struct tree_opt_pass pass_cleanup_cfg_post_optimizing =\n static void\n execute_free_datastructures (void)\n {\n-  tree *chain;\n-\n   /* ??? This isn't the right place for this.  Worse, it got computed\n      more or less at random in various passes.  */\n   free_dominance_info (CDI_DOMINATORS);\n-\n-  /* Emit gotos for implicit jumps.  */\n-  disband_implicit_edges ();\n+  free_dominance_info (CDI_POST_DOMINATORS);\n \n   /* Remove the ssa structures.  Do it here since this includes statement\n      annotations that need to be intact during disband_implicit_edges.  */\n   delete_tree_ssa ();\n+}\n+\n+static struct tree_opt_pass pass_free_datastructures =\n+{\n+  NULL,\t\t\t\t\t/* name */\n+  NULL,\t\t\t\t\t/* gate */\n+  execute_free_datastructures,\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  0,\t\t\t\t\t/* tv_id */\n+  PROP_cfg,\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};\n+/* Pass: free cfg annotations.  */\n+\n+static void\n+execute_free_cfg_annotations (void)\n+{\n+  basic_block bb;\n+  block_stmt_iterator bsi;\n \n-  /* Re-chain the statements from the blocks.  */\n-  chain = &DECL_SAVED_TREE (current_function_decl);\n-  *chain = alloc_stmt_list ();\n+  /* Emit gotos for implicit jumps.  */\n+  disband_implicit_edges ();\n+\n+  /* Remove annotations from every tree in the function.  */\n+  FOR_EACH_BB (bb)\n+    for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+      {\n+\ttree stmt = bsi_stmt (bsi);\n+\tggc_free (stmt->common.ann);\n+\tstmt->common.ann = NULL;\n+      }\n \n   /* And get rid of annotations we no longer need.  */\n   delete_tree_cfg_annotations ();\n }\n \n-static struct tree_opt_pass pass_free_datastructures =\n+static struct tree_opt_pass pass_free_cfg_annotations =\n {\n   NULL,\t\t\t\t\t/* name */\n   NULL,\t\t\t\t\t/* gate */\n-  execute_free_datastructures,\t\t\t/* execute */\n+  execute_free_cfg_annotations,\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */\n   0,\t\t\t\t\t/* static_pass_number */\n@@ -157,7 +186,6 @@ static struct tree_opt_pass pass_free_datastructures =\n   0,\t\t\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n-\n /* Pass: fixup_cfg - IPA passes or compilation of earlier functions might've\n    changed some properties - such as marked functions nothrow.  Remove now\n    redundant edges and basic blocks.  */\n@@ -387,6 +415,7 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_warn_function_noreturn);\n   NEXT_PASS (pass_mudflap_2);\n   NEXT_PASS (pass_free_datastructures);\n+  NEXT_PASS (pass_free_cfg_annotations);\n   NEXT_PASS (pass_expand);\n   NEXT_PASS (pass_rest_of_compilation);\n   *p = NULL;"}, {"sha": "b2419e58cf2ab8b44509b7a5d2b00330349819c8", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=6844185d068284ecccb52c718e2740fc9f3a1daf", "patch": "@@ -998,23 +998,15 @@ build_ssa_operands (tree stmt)\n \n \n /* Free any operands vectors in OPS.  */\n-#if 0\n-static void \n+void \n free_ssa_operands (stmt_operands_p ops)\n {\n   ops->def_ops = NULL;\n   ops->use_ops = NULL;\n   ops->maydef_ops = NULL;\n   ops->mustdef_ops = NULL;\n   ops->vuse_ops = NULL;\n-  while (ops->memory.next != NULL)\n-    {\n-      operand_memory_p tmp = ops->memory.next;\n-      ops->memory.next = tmp->next;\n-      ggc_free (tmp);\n-    }\n }\n-#endif\n \n \n /* Get the operands of statement STMT.  Note that repeated calls to"}, {"sha": "99233fced7a383361c4df2a5e1774e82a9eeca42", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=6844185d068284ecccb52c718e2740fc9f3a1daf", "patch": "@@ -153,6 +153,7 @@ typedef struct stmt_operands_d *stmt_operands_p;\n \n extern void init_ssa_operands (void);\n extern void fini_ssa_operands (void);\n+extern void free_ssa_operands (stmt_operands_p);\n extern void update_stmt_operands (tree);\n extern bool verify_imm_links (FILE *f, tree var);\n "}, {"sha": "1a09ef93acfe88d2b8853e11791c9e6fc66197ef", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6844185d068284ecccb52c718e2740fc9f3a1daf/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=6844185d068284ecccb52c718e2740fc9f3a1daf", "patch": "@@ -819,12 +819,18 @@ delete_tree_ssa (void)\n \n   /* Remove annotations from every tree in the function.  */\n   FOR_EACH_BB (bb)\n-    for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-      {\n-\ttree stmt = bsi_stmt (bsi);\n-\tggc_free (stmt->common.ann);\n-\tstmt->common.ann = NULL;\n-      }\n+    {\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\t{\n+\t  tree stmt = bsi_stmt (bsi);\n+\t  stmt_ann_t ann = get_stmt_ann (stmt);\n+\n+\t  free_ssa_operands (&ann->operands);\n+\t  ann->addresses_taken = 0;\n+\t  mark_stmt_modified (stmt);\n+\t}\n+      set_phi_nodes (bb, NULL);\n+    }\n \n   /* Remove annotations from every referenced variable.  */\n   for (i = 0; i < num_referenced_vars; i++)"}]}