{"sha": "54303b5cb3076f7bae9102c08b59d57b1a9f5104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzMDNiNWNiMzA3NmY3YmFlOTEwMmMwOGI1OWQ1N2IxYTlmNTEwNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-07-07T13:41:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-07-07T13:41:17Z"}, "message": "* gcc.c-torture/execute/bcp-1.c: New test.\n\nFrom-SVN: r20998", "tree": {"sha": "8c24efeb721595035b149eddb46624e1b5546912", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c24efeb721595035b149eddb46624e1b5546912"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54303b5cb3076f7bae9102c08b59d57b1a9f5104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54303b5cb3076f7bae9102c08b59d57b1a9f5104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54303b5cb3076f7bae9102c08b59d57b1a9f5104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54303b5cb3076f7bae9102c08b59d57b1a9f5104/comments", "author": null, "committer": null, "parents": [{"sha": "41b083c42ebb10185b1155afbaa4bb09c7bb435a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41b083c42ebb10185b1155afbaa4bb09c7bb435a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41b083c42ebb10185b1155afbaa4bb09c7bb435a"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "5fc53848a6dee873568f0c4213bf64b3a3ec11c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54303b5cb3076f7bae9102c08b59d57b1a9f5104/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54303b5cb3076f7bae9102c08b59d57b1a9f5104/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54303b5cb3076f7bae9102c08b59d57b1a9f5104", "patch": "@@ -1,3 +1,7 @@\n+Tue Jul  7 13:41:27 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* gcc.c-torture/execute/bcp-1.c: New test.\n+\n Tue Jul  7 11:49:04 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/execute/980707-1.c: New test."}, {"sha": "629d9c710df44743423baf9dd985841396d092c8", "filename": "gcc/testsuite/gcc.c-torture/execute/bcp-1.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54303b5cb3076f7bae9102c08b59d57b1a9f5104/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbcp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54303b5cb3076f7bae9102c08b59d57b1a9f5104/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbcp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbcp-1.c?ref=54303b5cb3076f7bae9102c08b59d57b1a9f5104", "patch": "@@ -0,0 +1,78 @@\n+int global;\n+\n+/* These must fail.  */\n+int bad0(void) { return __builtin_constant_p(global); }\n+int bad1(void) { return __builtin_constant_p(global++); }\n+inline int bad2(int x) { return __builtin_constant_p(x++); }\n+inline int bad3(int x) { return __builtin_constant_p(x); }\n+inline int bad4(const char *x) { return __builtin_constant_p(x); }\n+int bad5(void) { return bad2(1); }\n+inline int bad6(int x) { return __builtin_constant_p(x+1); }\n+int bad7(void) { return __builtin_constant_p(abort()); }\n+int bad8(void) { char buf[10]; return __builtin_constant_p(buf); }\n+int bad9(const char *x) { return __builtin_constant_p(x[123456]); }\n+\n+/* These must pass, or we've broken gcc2 functionality.  */\n+int good0(void) { return __builtin_constant_p(1); }\n+int good1(void) { return __builtin_constant_p(\"hi\"); }\n+int good2(void) { return __builtin_constant_p((1234 + 45) & ~7); }\n+\n+/* These are extensions to gcc2.  Failure indicates an optimization\n+   regression.  */\n+int opt0(void) { return bad3(1); }\n+int opt1(void) { return bad4(\"hi\"); }\n+int opt2(void) { return bad6(1); }\n+int opt3(void) { return __builtin_constant_p(&global); }\n+int opt4(void) { return __builtin_constant_p(\"hi\"[0]); }\n+\n+/* Call through tables so -finline-functions can't screw with us.  */\n+int (*bad_t0[])(void) = {\n+\tbad0, bad1, bad5, bad7, bad8\n+};\n+\n+int (*bad_t1[])(int x) = {\n+\tbad2, bad3, bad6\n+};\n+\n+int (*bad_t2[])(const char *x) = {\n+\tbad4, bad9\n+};\n+\n+int (*good_t0[])(void) = {\n+\tgood0, good1, good2\n+};\n+\n+int (*opt_t0[])(void) = {\n+\topt0, opt1, opt2, opt3, opt4\n+};\n+\n+#define N(arr) (sizeof(arr)/sizeof(*arr))\n+\n+int main()\n+{\n+  int i;\n+\n+  for (i = 0; i < N(bad_t0); ++i)\n+    if ((*bad_t0[i])())\n+      abort();\n+\n+  for (i = 0; i < N(bad_t1); ++i)\n+    if ((*bad_t1[i])(1))\n+      abort();\n+\n+  for (i = 0; i < N(bad_t2); ++i)\n+    if ((*bad_t2[i])(\"hi\"))\n+      abort();\n+\n+  for (i = 0; i < N(good_t0); ++i)\n+    if (! (*good_t0[i])())\n+      abort();\n+\n+#ifdef __OPTIMIZE__\n+  for (i = 0; i < N(good_t0); ++i)\n+    if (! (*opt_t0[i])())\n+      abort();\n+#endif\n+\n+  exit(0);\n+}"}]}