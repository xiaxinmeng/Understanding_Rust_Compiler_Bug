{"sha": "47bcd81fe7f8f9251f0777ae5ee77520b615af26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdiY2Q4MWZlN2Y4ZjkyNTFmMDc3N2FlNWVlNzc1MjBiNjE1YWYyNg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2019-07-08T08:14:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-08T08:14:22Z"}, "message": "[Ada] Diagnostics for Elaboration order v4.0\n\nThis patch adds a missing case to the output of cycle diagnostics here a\ntransition from an Elaborate_Body pair may reach a destination which is\nin the context of an active Elaborate_All.\n\n2019-07-08  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* bindo-diagnostics.adb (Diagnose_Cycle): Capture the presence\n\tof an Elaborate_All edge before iterating over the edges of the\n\tcycle.\n\t(Output_Elaborate_Body_Transition): Update the parameter profile\n\tand the comment on usage. Add a missing case where the edge is\n\twithin the context of an Elaborate_All.\n\t(Output_Transition): Update the call to\n\tOutput_Elaborate_Body_Transition.\n\t* bindo-graphs.ads, bindo-graphs.adb\n\t(Contains_Elaborate_All_Edge): New routine.\n\nFrom-SVN: r273217", "tree": {"sha": "247b9c03c130defad6c9e4472bcfa286f1d655af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247b9c03c130defad6c9e4472bcfa286f1d655af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47bcd81fe7f8f9251f0777ae5ee77520b615af26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bcd81fe7f8f9251f0777ae5ee77520b615af26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47bcd81fe7f8f9251f0777ae5ee77520b615af26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bcd81fe7f8f9251f0777ae5ee77520b615af26/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56730418631c887e3c20f6529ed9399b80b50915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56730418631c887e3c20f6529ed9399b80b50915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56730418631c887e3c20f6529ed9399b80b50915"}], "stats": {"total": 176, "additions": 126, "deletions": 50}, "files": [{"sha": "cc8978d79184a18c4fc62c79ac68faa4cbaeb019", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bcd81fe7f8f9251f0777ae5ee77520b615af26/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bcd81fe7f8f9251f0777ae5ee77520b615af26/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=47bcd81fe7f8f9251f0777ae5ee77520b615af26", "patch": "@@ -1,3 +1,16 @@\n+2019-07-08  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* bindo-diagnostics.adb (Diagnose_Cycle): Capture the presence\n+\tof an Elaborate_All edge before iterating over the edges of the\n+\tcycle.\n+\t(Output_Elaborate_Body_Transition): Update the parameter profile\n+\tand the comment on usage. Add a missing case where the edge is\n+\twithin the context of an Elaborate_All.\n+\t(Output_Transition): Update the call to\n+\tOutput_Elaborate_Body_Transition.\n+\t* bindo-graphs.ads, bindo-graphs.adb\n+\t(Contains_Elaborate_All_Edge): New routine.\n+\n 2019-07-08  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* lib-xref-spark_specific.adb (Create_Heap): Set dummy Etype for"}, {"sha": "9cd9d68edbecea4538fcd6e2ac63b5992f53597b", "filename": "gcc/ada/bindo-diagnostics.adb", "status": "modified", "additions": 67, "deletions": 50, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bcd81fe7f8f9251f0777ae5ee77520b615af26/gcc%2Fada%2Fbindo-diagnostics.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bcd81fe7f8f9251f0777ae5ee77520b615af26/gcc%2Fada%2Fbindo-diagnostics.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-diagnostics.adb?ref=47bcd81fe7f8f9251f0777ae5ee77520b615af26", "patch": "@@ -115,13 +115,15 @@ package body Bindo.Diagnostics is\n      (G                    : Library_Graph;\n       Source               : Library_Graph_Vertex_Id;\n       Actual_Destination   : Library_Graph_Vertex_Id;\n-      Expected_Destination : Library_Graph_Vertex_Id);\n+      Expected_Destination : Library_Graph_Vertex_Id;\n+      Elaborate_All_Active : Boolean);\n    pragma Inline (Output_Elaborate_Body_Transition);\n    --  Output a transition through an edge of library graph G with successor\n-   --  Source and predecessor Actual_Destination. Vertex Source is either a\n-   --  spec subject to pragma Elaborate_Body or denotes the body of such a\n-   --  spec. Expected_Destination denotes the predecessor as specified by the\n-   --  next edge in a cycle.\n+   --  Source and predecessor Actual_Destination. Vertex Source is either\n+   --  a spec subject to pragma Elaborate_Body or denotes the body of such\n+   --  a spec. Expected_Destination denotes the predecessor as specified by\n+   --  the next edge in a cycle. Elaborate_All_Active should be set when the\n+   --  transition occurs within a cycle that involves an Elaborate_All edge.\n \n    procedure Output_Elaborate_Suggestions\n      (G    : Library_Graph;\n@@ -160,7 +162,8 @@ package body Bindo.Diagnostics is\n    --  Output a transition through a Forced edge of library graph G with\n    --  successor Source and predecessor Actual_Destination. Parameter\n    --  Expected_Destination denotes the predecessor as specified by the\n-   --  next edge in a cycle.\n+   --  next edge in a cycle. Elaborate_All_Active should be set when the\n+   --  transition occurs within a cycle that involves an Elaborate_All edge.\n \n    procedure Output_Full_Encoding_Suggestions\n      (G          : Library_Graph;\n@@ -328,18 +331,21 @@ package body Bindo.Diagnostics is\n       Lib_Graph : Library_Graph;\n       Cycle     : Library_Graph_Cycle_Id)\n    is\n-      Current_Edge         : Library_Graph_Edge_Id;\n-      Elaborate_All_Active : Boolean;\n-      First_Edge           : Library_Graph_Edge_Id;\n-      Iter                 : Edges_Of_Cycle_Iterator;\n-      Next_Edge            : Library_Graph_Edge_Id;\n-\n-   begin\n       pragma Assert (Present (Inv_Graph));\n       pragma Assert (Present (Lib_Graph));\n       pragma Assert (Present (Cycle));\n \n-      Elaborate_All_Active := False;\n+      Elaborate_All_Active : constant Boolean :=\n+                               Contains_Elaborate_All_Edge\n+                                 (G     => Lib_Graph,\n+                                  Cycle => Cycle);\n+\n+      Current_Edge : Library_Graph_Edge_Id;\n+      First_Edge   : Library_Graph_Edge_Id;\n+      Iter         : Edges_Of_Cycle_Iterator;\n+      Next_Edge    : Library_Graph_Edge_Id;\n+\n+   begin\n       First_Edge := No_Library_Graph_Edge;\n \n       --  Inspect the edges of the cycle in pairs, emitting diagnostics based\n@@ -355,11 +361,6 @@ package body Bindo.Diagnostics is\n             Next (Iter, Current_Edge);\n \n             First_Edge := Current_Edge;\n-            Elaborate_All_Active :=\n-              Is_Elaborate_All_Edge\n-                (G    => Lib_Graph,\n-                 Edge => First_Edge);\n-\n             Output_Reason_And_Circularity_Header\n               (G          => Lib_Graph,\n                First_Edge => First_Edge);\n@@ -374,12 +375,6 @@ package body Bindo.Diagnostics is\n          --  taking into account the predecessors and successors involved, as\n          --  well as the nature of the edge.\n \n-         Elaborate_All_Active :=\n-           Elaborate_All_Active\n-             or else Is_Elaborate_All_Edge\n-                       (G    => Lib_Graph,\n-                        Edge => Current_Edge);\n-\n          Output_Transition\n            (Inv_Graph            => Inv_Graph,\n             Lib_Graph            => Lib_Graph,\n@@ -590,7 +585,7 @@ package body Bindo.Diagnostics is\n       pragma Assert (Present (Expected_Destination));\n \n       --  The actual and expected destination vertices match, and denote the\n-      --  spec of a unit.\n+      --  initial declaration of a unit.\n       --\n       --            Elaborate_All   Actual_Destination\n       --    Source ---------------> spec -->\n@@ -668,45 +663,67 @@ package body Bindo.Diagnostics is\n      (G                    : Library_Graph;\n       Source               : Library_Graph_Vertex_Id;\n       Actual_Destination   : Library_Graph_Vertex_Id;\n-      Expected_Destination : Library_Graph_Vertex_Id)\n+      Expected_Destination : Library_Graph_Vertex_Id;\n+      Elaborate_All_Active : Boolean)\n    is\n    begin\n       pragma Assert (Present (G));\n       pragma Assert (Present (Source));\n       pragma Assert (Present (Actual_Destination));\n       pragma Assert (Present (Expected_Destination));\n \n-      --  The actual and expected destination vertices match, and denote the\n-      --  spec or body of a unit subject to pragma Elaborate_Body. There is no\n-      --  need to mention the pragma because it does not affect the path of the\n-      --  cycle. Treat the edge as a regular with edge.\n+      --  The actual and expected destination vertices match\n       --\n-      --               Actual_Destination\n-      --    Source --> spec Elaborate_Body -->\n-      --               Expected_Destination\n+      --                     Actual_Destination\n+      --    Source --------> spec -->\n+      --    Elaborate_Body   Expected_Destination\n       --\n-      --               spec Elaborate_Body\n+      --                     spec\n       --\n-      --               Actual_Destination\n-      --    Source --> body -->\n-      --               Expected_Destination\n+      --                     Actual_Destination\n+      --    Source --------> body -->\n+      --    Elaborate_Body   Expected_Destination\n \n       if Actual_Destination = Expected_Destination then\n          Error_Msg_Unit_1 := Name (G, Source);\n          Error_Msg_Unit_2 := Name (G, Actual_Destination);\n          Error_Msg_Info\n            (\"    unit $ has with clause for unit $\");\n \n+      --  The actual destination vertex denotes the spec of a unit while the\n+      --  expected destination is the corresponding body, and the unit is in\n+      --  the closure of an earlier Elaborate_All pragma.\n+      --\n+      --                     Actual_Destination\n+      --    Source --------> spec\n+      --    Elaborate_Body\n+      --                     body -->\n+      --                     Expected_Destination\n+\n+      elsif Elaborate_All_Active then\n+         pragma Assert (Is_Spec_With_Body (G, Actual_Destination));\n+         pragma Assert (Is_Body_With_Spec (G, Expected_Destination));\n+         pragma Assert\n+           (Proper_Body (G, Actual_Destination) = Expected_Destination);\n+\n+         Error_Msg_Unit_1 := Name (G, Source);\n+         Error_Msg_Unit_2 := Name (G, Actual_Destination);\n+         Error_Msg_Info\n+           (\"    unit $ has with clause for unit $\");\n+\n+         Error_Msg_Unit_1 := Name (G, Expected_Destination);\n+         Error_Msg_Info\n+           (\"    unit $ is in the closure of pragma Elaborate_All\");\n+\n       --  Otherwise the actual destination vertex is the spec of a unit subject\n       --  to pragma Elaborate_Body and the expected destination vertex is the\n-      --  completion body. The pragma must be mentioned because it directs the\n-      --  path of the cycle from the spec to the body.\n-      --\n-      --               Actual_Destination\n-      --    Source --> spec Elaborate_Body\n+      --  completion body.\n       --\n-      --               body -->\n-      --               Expected_Destination\n+      --                     Actual_Destination\n+      --    Source --------> spec Elaborate_Body\n+      --    Elaborate_Body\n+      --                     body -->\n+      --                     Expected_Destination\n \n       else\n          pragma Assert\n@@ -769,7 +786,7 @@ package body Bindo.Diagnostics is\n       pragma Assert (Present (Expected_Destination));\n \n       --  The actual and expected destination vertices match, and denote the\n-      --  spec of a unit.\n+      --  initial declaration of a unit.\n       --\n       --            Elaborate   Actual_Destination\n       --    Source -----------> spec -->\n@@ -876,8 +893,7 @@ package body Bindo.Diagnostics is\n       pragma Assert (Present (Actual_Destination));\n       pragma Assert (Present (Expected_Destination));\n \n-      --  The actual and expected destination vertices match, and denote the\n-      --  spec of a unit.\n+      --  The actual and expected destination vertices match\n       --\n       --            Forced   Actual_Destination\n       --    Source --------> spec -->\n@@ -1291,7 +1307,8 @@ package body Bindo.Diagnostics is\n            (G                    => Lib_Graph,\n             Source               => Source,\n             Actual_Destination   => Actual_Destination,\n-            Expected_Destination => Expected_Destination);\n+            Expected_Destination => Expected_Destination,\n+            Elaborate_All_Active => Elaborate_All_Active);\n \n       elsif Is_Elaborate_Edge (Lib_Graph, Current_Edge) then\n          Output_Elaborate_Transition\n@@ -1345,7 +1362,7 @@ package body Bindo.Diagnostics is\n       pragma Assert (Present (Expected_Destination));\n \n       --  The actual and expected destination vertices match, and denote the\n-      --  spec of a unit.\n+      --  initial declaration of a unit.\n       --\n       --            with   Actual_Destination\n       --    Source ------> spec -->"}, {"sha": "5443b790e3709d3abbebc73ad37f3d86f1bd8213", "filename": "gcc/ada/bindo-graphs.adb", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bcd81fe7f8f9251f0777ae5ee77520b615af26/gcc%2Fada%2Fbindo-graphs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bcd81fe7f8f9251f0777ae5ee77520b615af26/gcc%2Fada%2Fbindo-graphs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.adb?ref=47bcd81fe7f8f9251f0777ae5ee77520b615af26", "patch": "@@ -1840,6 +1840,45 @@ package body Bindo.Graphs is\n          return DG.Component (G.Graph, Vertex);\n       end Component;\n \n+      ---------------------------------\n+      -- Contains_Elaborate_All_Edge --\n+      ---------------------------------\n+\n+      function Contains_Elaborate_All_Edge\n+        (G     : Library_Graph;\n+         Cycle : Library_Graph_Cycle_Id) return Boolean\n+      is\n+         Edge : Library_Graph_Edge_Id;\n+         Iter : Edges_Of_Cycle_Iterator;\n+         Seen : Boolean;\n+\n+      begin\n+         pragma Assert (Present (G));\n+         pragma Assert (Present (Cycle));\n+\n+         --  Assume that no Elaborate_All edge has been seen\n+\n+         Seen := False;\n+\n+         --  IMPORTANT:\n+         --\n+         --    * The iteration must run to completion in order to unlock the\n+         --      edges of the cycle.\n+\n+         Iter := Iterate_Edges_Of_Cycle (G, Cycle);\n+         while Has_Next (Iter) loop\n+            Next (Iter, Edge);\n+\n+            if not Seen\n+              and then Is_Elaborate_All_Edge (G, Edge)\n+            then\n+               Seen := True;\n+            end if;\n+         end loop;\n+\n+         return Seen;\n+      end Contains_Elaborate_All_Edge;\n+\n       ------------------------------------\n       -- Contains_Weak_Static_Successor --\n       ------------------------------------"}, {"sha": "84e83b9d673436bae5c0d84990466e92beca0a7a", "filename": "gcc/ada/bindo-graphs.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bcd81fe7f8f9251f0777ae5ee77520b615af26/gcc%2Fada%2Fbindo-graphs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bcd81fe7f8f9251f0777ae5ee77520b615af26/gcc%2Fada%2Fbindo-graphs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.ads?ref=47bcd81fe7f8f9251f0777ae5ee77520b615af26", "patch": "@@ -980,6 +980,13 @@ package Bindo.Graphs is\n       --\n       --  This behavior can be forced by setting flag Force_Complement to True.\n \n+      function Contains_Elaborate_All_Edge\n+        (G     : Library_Graph;\n+         Cycle : Library_Graph_Cycle_Id) return Boolean;\n+      pragma Inline (Contains_Elaborate_All_Edge);\n+      --  Determine whether cycle Cycle of library graph G contains an\n+      --  Elaborate_All edge.\n+\n       function Contains_Weak_Static_Successor\n         (G     : Library_Graph;\n          Cycle : Library_Graph_Cycle_Id) return Boolean;"}]}