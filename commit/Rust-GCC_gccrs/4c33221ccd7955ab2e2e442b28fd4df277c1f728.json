{"sha": "4c33221ccd7955ab2e2e442b28fd4df277c1f728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMzMzIyMWNjZDc5NTVhYjJlMmU0NDJiMjhmZDRkZjI3N2MxZjcyOA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2009-04-22T11:31:56Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2009-04-22T11:31:56Z"}, "message": "function.c (expand_function_end): Do not emit a jump to the \"naked\" return label for fall-through returns.\n\n\t* function.c (expand_function_end): Do not emit a jump to the \"naked\"\n\treturn label for fall-through returns.\n\t* except.c (sjlj_emit_function_exit): Always place the call to the\n\tunregister function at the location installed by expand_function_end.\n\nFrom-SVN: r146570", "tree": {"sha": "869fe1a9b21d0e0d0899b90686c82c84b6ee0c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/869fe1a9b21d0e0d0899b90686c82c84b6ee0c49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c33221ccd7955ab2e2e442b28fd4df277c1f728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c33221ccd7955ab2e2e442b28fd4df277c1f728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c33221ccd7955ab2e2e442b28fd4df277c1f728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c33221ccd7955ab2e2e442b28fd4df277c1f728/comments", "author": null, "committer": null, "parents": [{"sha": "9925bce0b85fd64eb1aa4afac20552781ecfa5e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9925bce0b85fd64eb1aa4afac20552781ecfa5e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9925bce0b85fd64eb1aa4afac20552781ecfa5e2"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "cce04d58cab2afdb5ef43bb64a2b08a31b0f3d83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33221ccd7955ab2e2e442b28fd4df277c1f728/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33221ccd7955ab2e2e442b28fd4df277c1f728/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c33221ccd7955ab2e2e442b28fd4df277c1f728", "patch": "@@ -1,3 +1,10 @@\n+2009-04-22  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* function.c (expand_function_end): Do not emit a jump to the \"naked\"\n+\treturn label for fall-through returns.\n+\t* except.c (sjlj_emit_function_exit): Always place the call to the\n+\tunregister function at the location installed by expand_function_end.\n+\n 2009-04-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39845"}, {"sha": "bec73834e236c2ccdbdff7a18f840c72bb43653a", "filename": "gcc/except.c", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33221ccd7955ab2e2e442b28fd4df277c1f728/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33221ccd7955ab2e2e442b28fd4df277c1f728/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=4c33221ccd7955ab2e2e442b28fd4df277c1f728", "patch": "@@ -1968,9 +1968,7 @@ sjlj_emit_function_exit_after (rtx after)\n static void\n sjlj_emit_function_exit (void)\n {\n-  rtx seq;\n-  edge e;\n-  edge_iterator ei;\n+  rtx seq, insn;\n \n   start_sequence ();\n \n@@ -1984,31 +1982,11 @@ sjlj_emit_function_exit (void)\n      post-dominates all can_throw_internal instructions.  This is\n      the last possible moment.  */\n \n-  FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR->preds)\n-    if (e->flags & EDGE_FALLTHRU)\n-      break;\n-  if (e)\n-    {\n-      rtx insn;\n+  insn = crtl->eh.sjlj_exit_after;\n+  if (LABEL_P (insn))\n+    insn = NEXT_INSN (insn);\n \n-      /* Figure out whether the place we are supposed to insert libcall\n-         is inside the last basic block or after it.  In the other case\n-         we need to emit to edge.  */\n-      gcc_assert (e->src->next_bb == EXIT_BLOCK_PTR);\n-      for (insn = BB_HEAD (e->src); ; insn = NEXT_INSN (insn))\n-\t{\n-\t  if (insn == crtl->eh.sjlj_exit_after)\n-\t    {\n-\t      if (LABEL_P (insn))\n-\t\tinsn = NEXT_INSN (insn);\n-\t      emit_insn_after (seq, insn);\n-\t      return;\n-\t    }\n-\t  if (insn == BB_END (e->src))\n-\t    break;\n-\t}\n-      insert_insn_on_edge (seq, e);\n-    }\n+  emit_insn_after (seq, insn);\n }\n \n static void"}, {"sha": "60b734827c31579e66f25f69eb6110aa827911cf", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c33221ccd7955ab2e2e442b28fd4df277c1f728/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c33221ccd7955ab2e2e442b28fd4df277c1f728/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4c33221ccd7955ab2e2e442b28fd4df277c1f728", "patch": "@@ -4804,15 +4804,15 @@ expand_function_end (void)\n \n     start_sequence ();\n     clobber_return_register ();\n-    expand_naked_return ();\n     seq = get_insns ();\n     end_sequence ();\n \n     emit_insn_after (seq, clobber_after);\n   }\n \n   /* Output the label for the naked return from the function.  */\n-  emit_label (naked_return_label);\n+  if (naked_return_label)\n+    emit_label (naked_return_label);\n \n   /* @@@ This is a kludge.  We want to ensure that instructions that\n      may trap are not moved into the epilogue by scheduling, because"}]}