{"sha": "08cd8d5929eac84b27788d8483fd75ab7ad13129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjZDhkNTkyOWVhYzg0YjI3Nzg4ZDg0ODNmZDc1YWI3YWQxMzEyOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-09-18T13:51:05Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-09-24T03:14:08Z"}, "message": "[RS6000] Power10 libffi fixes\n\nPower10 pc-relative code doesn't use or preserve r2 as a TOC pointer.\nThat means calling between pc-relative and TOC using code can't be\ndone without intervening linker stubs, and a call from TOC code to\npc-relative code must have a nop after the bl in order to restore r2.\n\nNow the PowerPC libffi assembly code doesn't use r2 except for the\nimplicit use when making calls back to C, ffi_closure_helper_LINUX64\nand ffi_prep_args64.  So changing the assembly to interoperate with\npc-relative code without stubs is easily done.\n\n\t* src/powerpc/linux64.S (ffi_call_LINUX64): Don't emit global\n\tentry when __PCREL__.  Call using @notoc.  Add nops.\n\t* src/powerpc/linux64_closure.S (ffi_closure_LINUX64): Likewise.\n\t(ffi_go_closure_linux64): Likewise.", "tree": {"sha": "d1f75adbe7f47d535916b92a0e7efa179ebae7e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1f75adbe7f47d535916b92a0e7efa179ebae7e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08cd8d5929eac84b27788d8483fd75ab7ad13129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cd8d5929eac84b27788d8483fd75ab7ad13129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08cd8d5929eac84b27788d8483fd75ab7ad13129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08cd8d5929eac84b27788d8483fd75ab7ad13129/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "677b9150f54a0483d3de1182ac40717b7c4431a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677b9150f54a0483d3de1182ac40717b7c4431a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677b9150f54a0483d3de1182ac40717b7c4431a5"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "f0006fe90c5f2a0cfca232d44b980697d5d313a1", "filename": "libffi/src/powerpc/linux64.S", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cd8d5929eac84b27788d8483fd75ab7ad13129/libffi%2Fsrc%2Fpowerpc%2Flinux64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cd8d5929eac84b27788d8483fd75ab7ad13129/libffi%2Fsrc%2Fpowerpc%2Flinux64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Flinux64.S?ref=08cd8d5929eac84b27788d8483fd75ab7ad13129", "patch": "@@ -36,8 +36,10 @@\n \t.cfi_startproc\n # if _CALL_ELF == 2\n ffi_call_LINUX64:\n+#  ifndef __PCREL__\n \taddis\t%r2, %r12, .TOC.-ffi_call_LINUX64@ha\n \taddi\t%r2, %r2, .TOC.-ffi_call_LINUX64@l\n+#  endif\n \t.localentry ffi_call_LINUX64, . - ffi_call_LINUX64\n # else\n \t.section\t\".opd\",\"aw\"\n@@ -89,9 +91,15 @@ ffi_call_LINUX64:\n \t/* Call ffi_prep_args64.  */\n \tmr\t%r4, %r1\n # if defined _CALL_LINUX || _CALL_ELF == 2\n+#  ifdef __PCREL__\n+\tbl\tffi_prep_args64@notoc\n+#  else\n \tbl\tffi_prep_args64\n+\tnop\n+#  endif\n # else\n \tbl\t.ffi_prep_args64\n+\tnop\n # endif\n \n # if _CALL_ELF == 2"}, {"sha": "3e30db361905b41e236c59769dbe68f70c116e30", "filename": "libffi/src/powerpc/linux64_closure.S", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08cd8d5929eac84b27788d8483fd75ab7ad13129/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08cd8d5929eac84b27788d8483fd75ab7ad13129/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Flinux64_closure.S?ref=08cd8d5929eac84b27788d8483fd75ab7ad13129", "patch": "@@ -37,8 +37,10 @@\n \t.cfi_startproc\n # if _CALL_ELF == 2\n ffi_closure_LINUX64:\n+#  ifndef __PCREL__\n \taddis\t%r2, %r12, .TOC.-ffi_closure_LINUX64@ha\n \taddi\t%r2, %r2, .TOC.-ffi_closure_LINUX64@l\n+#  endif\n \t.localentry ffi_closure_LINUX64, . - ffi_closure_LINUX64\n # else\n \t.section        \".opd\",\"aw\"\n@@ -143,7 +145,7 @@ ffi_closure_LINUX64:\n \tstfd\t%f12, -104+(11*8)(%r1)\n \tstfd\t%f13, -104+(12*8)(%r1)\n \n-\t# load up the pointer to the saved fpr registers */\n+\t# load up the pointer to the saved fpr registers\n \taddi\t%r8, %r1, -104\n \n \t# load up the pointer to the result storage\n@@ -155,9 +157,15 @@ ffi_closure_LINUX64:\n \n \t# make the call\n # if defined _CALL_LINUX || _CALL_ELF == 2\n+#  ifdef __PCREL__\n+\tbl ffi_closure_helper_LINUX64@notoc\n+#  else\n \tbl ffi_closure_helper_LINUX64\n+\tnop\n+#  endif\n # else\n \tbl .ffi_closure_helper_LINUX64\n+\tnop\n # endif\n .Lret:\n \n@@ -396,8 +404,10 @@ ffi_closure_LINUX64:\n \t.cfi_startproc\n # if _CALL_ELF == 2\n ffi_go_closure_linux64:\n+#  ifndef __PCREL__\n \taddis\t%r2, %r12, .TOC.-ffi_go_closure_linux64@ha\n \taddi\t%r2, %r2, .TOC.-ffi_go_closure_linux64@l\n+#  endif\n \t.localentry ffi_go_closure_linux64, . - ffi_go_closure_linux64\n # else\n \t.section        \".opd\",\"aw\""}]}