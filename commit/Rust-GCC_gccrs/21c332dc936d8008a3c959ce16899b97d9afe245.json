{"sha": "21c332dc936d8008a3c959ce16899b97d9afe245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjMzMyZGM5MzZkODAwOGEzYzk1OWNlMTY4OTliOTdkOWFmZTI0NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-14T21:09:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-14T21:09:38Z"}, "message": "re PR libstdc++/19422 (assoc. containers: ctor taking range is O(n log n) even if the range is sorted)\n\n2005-01-14  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/19422\n\t* include/bits/stl_tree.h (_Rb_tree<>::insert_equal(_II, _II),\n\t_Rb_tree<>::insert_unique(_II, _II)): Use insert_equal (insert_unique,\n\trespectively) with hint (end()).\n\t* testsuite/performance/23_containers/set_create_from_sorted.cc: New.\n\nFrom-SVN: r93663", "tree": {"sha": "1edc62653f696883b1dd317ef506925f15342695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1edc62653f696883b1dd317ef506925f15342695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21c332dc936d8008a3c959ce16899b97d9afe245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c332dc936d8008a3c959ce16899b97d9afe245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c332dc936d8008a3c959ce16899b97d9afe245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c332dc936d8008a3c959ce16899b97d9afe245/comments", "author": null, "committer": null, "parents": [{"sha": "66f9a6de4ccd427bcbec14104465b1f0efa7c10f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f9a6de4ccd427bcbec14104465b1f0efa7c10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f9a6de4ccd427bcbec14104465b1f0efa7c10f"}], "stats": {"total": 95, "additions": 93, "deletions": 2}, "files": [{"sha": "00deb297d0c1ed6671a5e75c28898b714b2e0470", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c332dc936d8008a3c959ce16899b97d9afe245/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c332dc936d8008a3c959ce16899b97d9afe245/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=21c332dc936d8008a3c959ce16899b97d9afe245", "patch": "@@ -1,3 +1,11 @@\n+2005-01-14  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/19422\n+\t* include/bits/stl_tree.h (_Rb_tree<>::insert_equal(_II, _II),\n+\t_Rb_tree<>::insert_unique(_II, _II)): Use insert_equal (insert_unique,\n+\trespectively) with hint (end()).\n+\t* testsuite/performance/23_containers/set_create_from_sorted.cc: New.\n+\n 2005-01-13  Geoffrey Keating  <geoffk@apple.com>\n \n \t* configure.host (darwin): On darwin8 or later, no need to build"}, {"sha": "a49b898e16bce247477cd6bc4ec7d3307da6f85f", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c332dc936d8008a3c959ce16899b97d9afe245/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c332dc936d8008a3c959ce16899b97d9afe245/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=21c332dc936d8008a3c959ce16899b97d9afe245", "patch": "@@ -986,7 +986,7 @@ namespace std\n       insert_equal(_II __first, _II __last)\n       {\n \tfor (; __first != __last; ++__first)\n-\t  insert_equal(*__first);\n+\t  insert_equal(end(), *__first);\n       }\n \n   template<typename _Key, typename _Val, typename _KoV,\n@@ -997,7 +997,7 @@ namespace std\n     insert_unique(_II __first, _II __last)\n     {\n       for (; __first != __last; ++__first)\n-\tinsert_unique(*__first);\n+\tinsert_unique(end(), *__first);\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,"}, {"sha": "a1b1b0d680436ae57cc8a93e89b32b2d60eca897", "filename": "libstdc++-v3/testsuite/performance/23_containers/set_create_from_sorted.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21c332dc936d8008a3c959ce16899b97d9afe245/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fset_create_from_sorted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21c332dc936d8008a3c959ce16899b97d9afe245/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fset_create_from_sorted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Fset_create_from_sorted.cc?ref=21c332dc936d8008a3c959ce16899b97d9afe245", "patch": "@@ -0,0 +1,83 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <vector>\n+#include <set>\n+#include <list>\n+#include <sstream>\n+#include <testsuite_performance.h>\n+\n+// adjust for your setup\n+static const unsigned max_size = 1000000; // avoid excessive swap file use!\n+static const unsigned iterations = 10;    // make results less random while\n+static const unsigned step = 50000;       // keeping the total time reasonable\n+\n+// libstdc++/19422\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+  time_counter time;\n+  resource_counter resource;\n+\n+  typedef set<unsigned>  the_set;\n+  typedef list<unsigned> the_list;\n+\n+  vector<unsigned> v(max_size, 0);\n+  for (unsigned i = 0; i != max_size; ++i)\n+    v[i] = i; // initialize sorted array\n+\n+  report_header(__FILE__, \"set:\");\n+  for (unsigned count = step; count <= max_size; count += step)\n+    {\n+      ostringstream oss;\n+      oss << count;\n+\n+      // measure set construction time\n+      start_counters(time, resource);\n+      for (unsigned i = 0; i != iterations; ++i)\n+\tthe_set(v.begin(), v.begin() + count);\n+      stop_counters(time, resource);\n+      report_performance(__FILE__, oss.str(), time, resource);\n+      clear_counters(time, resource);\n+    }\n+\n+  report_header(__FILE__, \"list:\");\n+  for (unsigned count = step; count <= max_size; count += step)\n+    {\n+      ostringstream oss;\n+      oss << count;\n+\n+      // measure list construction time (surely linear in count)\n+      start_counters(time, resource);\n+      for (unsigned i = 0; i != iterations; ++i)\n+\tthe_list(v.begin(), v.begin() + count);\n+      stop_counters(time, resource);\n+      report_performance(__FILE__, oss.str(), time, resource);\n+      clear_counters(time, resource);\n+    }\n+}"}]}