{"sha": "a3d8777127800e056bf525c39ab4f7bd72b7818b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkODc3NzEyNzgwMGUwNTZiZjUyNWMzOWFiNGY3YmQ3MmI3ODE4Yg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-07-14T05:12:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-07-14T05:12:56Z"}, "message": "re PR c++/11503 (segfault when instantiating template with ADDR_EXPR)\n\n\tPR c++/11503\n\t* g++.dg/template/anon1.C: New test.\n\n\tPR c++/11503\n\t* cp-tree.h (DECL_SELF_REFERENCE_P): New macro.\n\t(SET_DECL_SELF_REFERENCE_P): Likewise.\n\t* class.c (build_self_reference): Use SET_DECL_SELF_REFERENCE_P.\n\t* pt.c (tsubst_decl): Copy it.\n\t* search.c (lookup_base): Use DECL_SELF_REFERENCE_P.\n\nFrom-SVN: r69317", "tree": {"sha": "87f9283f2bab95f2d3eae355b5779dedea7a7f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87f9283f2bab95f2d3eae355b5779dedea7a7f1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3d8777127800e056bf525c39ab4f7bd72b7818b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d8777127800e056bf525c39ab4f7bd72b7818b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d8777127800e056bf525c39ab4f7bd72b7818b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d8777127800e056bf525c39ab4f7bd72b7818b/comments", "author": null, "committer": null, "parents": [{"sha": "b34459943bbfaf3f6fb32408bec5443b5bd007a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b34459943bbfaf3f6fb32408bec5443b5bd007a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b34459943bbfaf3f6fb32408bec5443b5bd007a9"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "6351dd6365cc3dbf72030eb17d594cd884193c6d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a3d8777127800e056bf525c39ab4f7bd72b7818b", "patch": "@@ -1,5 +1,14 @@\n 2003-07-13  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/11503\n+\t* cp-tree.h (DECL_SELF_REFERENCE_P): New macro.\n+\t(SET_DECL_SELF_REFERENCE_P): Likewise.\n+\t* class.c (build_self_reference): Use SET_DECL_SELF_REFERENCE_P.\n+\t* pt.c (tsubst_decl): Copy it.\n+\t* search.c (lookup_base): Use DECL_SELF_REFERENCE_P.\n+\n+\t* pt.c (reregister_specialization): Fix thinko in previous change.\n+\t\n \t* cp-tree.h (cp_id_kind): New type.\n \t(unqualified_name_lookup_error): Change prototype.\n \t(unqualified_fn_lookup_error): New function."}, {"sha": "56745901e9a0b8309432f40dd4c05602d81094ed", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a3d8777127800e056bf525c39ab4f7bd72b7818b", "patch": "@@ -6307,6 +6307,7 @@ build_self_reference (void)\n   DECL_NONLOCAL (value) = 1;\n   DECL_CONTEXT (value) = current_class_type;\n   DECL_ARTIFICIAL (value) = 1;\n+  SET_DECL_SELF_REFERENCE_P (value);\n \n   if (processing_template_decl)\n     value = push_template_decl (value);"}, {"sha": "32b791fb8054d34333e55eab7a00afde96fe2965", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a3d8777127800e056bf525c39ab4f7bd72b7818b", "patch": "@@ -97,6 +97,7 @@ struct diagnostic_context;\n    3: DECL_IN_AGGR_P.\n    4: DECL_C_BIT_FIELD (in a FIELD_DECL)\n       DECL_VAR_MARKED_P (in a VAR_DECL)\n+      DECL_SELF_REFERENCE_P (in a TYPE_DECL)\n    5: DECL_INTERFACE_KNOWN.\n    6: DECL_THIS_STATIC (in VAR_DECL or FUNCTION_DECL).\n    7: DECL_DEAD_FOR_LOCAL (in VAR_DECL).\n@@ -2751,16 +2752,20 @@ struct lang_decl GTY(())\n   (TREE_CODE (NODE) == TYPE_DECL || DECL_CLASS_TEMPLATE_P (NODE))\n \n /* Nonzero if NODE is the typedef implicitly generated for a type when\n-   the type is declared.  (In C++, `struct S {};' is roughly equivalent\n-   to `struct S {}; typedef struct S S;' in C.  This macro will hold\n-   for the typedef indicated in this example.  Note that in C++, there\n-   is a second implicit typedef for each class, in the scope of `S'\n-   itself, so that you can say `S::S'.  This macro does *not* hold for\n-   those typedefs.  */\n+   the type is declared.  In C++, `struct S {};' is roughly\n+   equivalent to `struct S {}; typedef struct S S;' in C.\n+   DECL_IMPLICIT_TYPEDEF_P will hold for the typedef indicated in this\n+   example.  In C++, there is a second implicit typedef for each\n+   class, in the scope of `S' itself, so that you can say `S::S'.\n+   DECL_SELF_REFERENCE_P will hold for that second typedef.  */\n #define DECL_IMPLICIT_TYPEDEF_P(NODE) \\\n   (TREE_CODE (NODE) == TYPE_DECL && DECL_LANG_FLAG_2 (NODE))\n #define SET_DECL_IMPLICIT_TYPEDEF_P(NODE) \\\n   (DECL_LANG_FLAG_2 (NODE) = 1)\n+#define DECL_SELF_REFERENCE_P(NODE) \\\n+  (TREE_CODE (NODE) == TYPE_DECL && DECL_LANG_FLAG_4 (NODE))\n+#define SET_DECL_SELF_REFERENCE_P(NODE) \\\n+  (DECL_LANG_FLAG_4 (NODE) = 1)\n \n /* A `primary' template is one that has its own template header.  A\n    member function of a class template is a template, but not primary."}, {"sha": "ac032d13d953b84d910cd90d8c1072b24db6cfd9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a3d8777127800e056bf525c39ab4f7bd72b7818b", "patch": "@@ -1002,7 +1002,7 @@ reregister_specialization (tree spec, tree tmpl, tree new_spec)\n \tif (!new_spec)\n \t  *s = TREE_CHAIN (*s);\n \telse\n-\t  TREE_VALUE (*s) == new_spec;\n+\t  TREE_VALUE (*s) = new_spec;\n \treturn 1;\n       }\n \n@@ -6200,6 +6200,8 @@ tsubst_decl (tree t, tree args, tree type, tsubst_flags_t complain)\n \tr = copy_decl (t);\n \tif (TREE_CODE (r) == VAR_DECL)\n \t  type = complete_type (type);\n+\telse if (DECL_SELF_REFERENCE_P (t))\n+\t  SET_DECL_SELF_REFERENCE_P (r);\n \tTREE_TYPE (r) = type;\n \tc_apply_type_quals_to_decl (cp_type_quals (type), r);\n \tDECL_CONTEXT (r) = ctx;"}, {"sha": "1161084980df26e573b3d8b218699c74b71071bc", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=a3d8777127800e056bf525c39ab4f7bd72b7818b", "patch": "@@ -305,9 +305,7 @@ lookup_base (tree t, tree base, base_access access, base_kind *kind_ptr)\n \t    /* Rather than inventing a public member, we use the implicit\n \t       public typedef created in the scope of every class.  */\n \t    decl = TYPE_FIELDS (base);\n-\t    while (TREE_CODE (decl) != TYPE_DECL\n-\t\t   || !DECL_ARTIFICIAL (decl)\n-\t\t   || DECL_NAME (decl) != constructor_name (base))\n+\t    while (!DECL_SELF_REFERENCE_P (decl))\n \t      decl = TREE_CHAIN (decl);\n \t    while (ANON_AGGR_TYPE_P (t))\n \t      t = TYPE_CONTEXT (t);"}, {"sha": "e51dda898336556f3a40fe0ed712086ab679d8b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3d8777127800e056bf525c39ab4f7bd72b7818b", "patch": "@@ -1,5 +1,8 @@\n 2003-07-13  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/11503\n+\t* g++.dg/template/anon1.C: New test.\n+\n \tPR c++/11493\n \tPR c++/11495\n \t* g++.dg/parse/template9.C: Likewise."}, {"sha": "ef73df6b39e6b93b5cd1bb876b1aff6ffcb3963f", "filename": "gcc/testsuite/g++.dg/template/anon1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fanon1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d8777127800e056bf525c39ab4f7bd72b7818b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fanon1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fanon1.C?ref=a3d8777127800e056bf525c39ab4f7bd72b7818b", "patch": "@@ -0,0 +1,21 @@\n+struct x {\n+    int foo () {}\n+};\n+\n+template <class T>\n+struct vector {\n+    T& bar () {}\n+};\n+\n+template <class T>\n+struct y {\n+    typedef struct {   \n+        x t;\n+    } s;\n+    \n+    vector<s> array;\n+\n+    int foo ()\n+      { return array.bar().t.foo(); }\n+};\n+int i = y<x>().foo ();"}]}