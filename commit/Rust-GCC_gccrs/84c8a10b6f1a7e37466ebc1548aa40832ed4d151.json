{"sha": "84c8a10b6f1a7e37466ebc1548aa40832ed4d151", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRjOGExMGI2ZjFhN2UzNzQ2NmViYzE1NDhhYTQwODMyZWQ0ZDE1MQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-01-20T21:44:51Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-01-20T21:44:51Z"}, "message": "[ARM/AArch64][testsuite] Add vmla and vmls tests.\n\n2015-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vmlX.inc: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmla.c: New file.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmls.c: New file.\n\nFrom-SVN: r219917", "tree": {"sha": "aa12f22dd12f9125d14e0f57d42dbdac26e3b52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa12f22dd12f9125d14e0f57d42dbdac26e3b52a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84c8a10b6f1a7e37466ebc1548aa40832ed4d151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c8a10b6f1a7e37466ebc1548aa40832ed4d151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c8a10b6f1a7e37466ebc1548aa40832ed4d151", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/comments", "author": null, "committer": null, "parents": [{"sha": "2d8536f61419a898706e351bba964250af57006a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8536f61419a898706e351bba964250af57006a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8536f61419a898706e351bba964250af57006a"}], "stats": {"total": 201, "additions": 201, "deletions": 0}, "files": [{"sha": "b67abe04806bb69b34021b15dadd9f256a790c2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84c8a10b6f1a7e37466ebc1548aa40832ed4d151", "patch": "@@ -1,3 +1,9 @@\n+2015-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmlX.inc: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmla.c: New file.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmls.c: New file.\n+\n 2015-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vldX_dup.c: New file."}, {"sha": "6bea6965b73a2717474e98f4e7e42e768431eff6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmlX.inc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlX.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlX.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvmlX.inc?ref=84c8a10b6f1a7e37466ebc1548aa40832ed4d151", "patch": "@@ -0,0 +1,123 @@\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+#define DECL_VMLX(T, W, N)\t\t\t\\\n+  DECL_VARIABLE(vector1, T, W, N);\t\t\\\n+  DECL_VARIABLE(vector2, T, W, N);\t\t\\\n+  DECL_VARIABLE(vector3, T, W, N);\t\t\\\n+  DECL_VARIABLE(vector_res, T, W, N)\n+\n+  /* vector_res = vmla(vector, vector3, vector4),\n+     then store the result.  */\n+#define TEST_VMLX1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =                                      \\\n+    INSN##Q##_##T2##W(VECT_VAR(vector1, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector3, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),                         \\\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_VMLX(INSN, Q, T1, T2, W, N)\t\\\n+  TEST_VMLX1(INSN, Q, T1, T2, W, N)\n+\n+  DECL_VMLX(int, 8, 8);\n+  DECL_VMLX(int, 16, 4);\n+  DECL_VMLX(int, 32, 2);\n+  DECL_VMLX(uint, 8, 8);\n+  DECL_VMLX(uint, 16, 4);\n+  DECL_VMLX(uint, 32, 2);\n+  DECL_VMLX(float, 32, 2);\n+  DECL_VMLX(int, 8, 16);\n+  DECL_VMLX(int, 16, 8);\n+  DECL_VMLX(int, 32, 4);\n+  DECL_VMLX(uint, 8, 16);\n+  DECL_VMLX(uint, 16, 8);\n+  DECL_VMLX(uint, 32, 4);\n+  DECL_VMLX(float, 32, 4);\n+\n+  clean_results ();\n+\n+  VLOAD(vector1, buffer, , int, s, 8, 8);\n+  VLOAD(vector1, buffer, , int, s, 16, 4);\n+  VLOAD(vector1, buffer, , int, s, 32, 2);\n+  VLOAD(vector1, buffer, , uint, u, 8, 8);\n+  VLOAD(vector1, buffer, , uint, u, 16, 4);\n+  VLOAD(vector1, buffer, , uint, u, 32, 2);\n+  VLOAD(vector1, buffer, , float, f, 32, 2);\n+  VLOAD(vector1, buffer, q, int, s, 8, 16);\n+  VLOAD(vector1, buffer, q, int, s, 16, 8);\n+  VLOAD(vector1, buffer, q, int, s, 32, 4);\n+  VLOAD(vector1, buffer, q, uint, u, 8, 16);\n+  VLOAD(vector1, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector1, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector1, buffer, q, float, f, 32, 4);\n+\n+  VDUP(vector2, , int, s, 8, 8, 0x11);\n+  VDUP(vector2, , int, s, 16, 4, 0x22);\n+  VDUP(vector2, , int, s, 32, 2, 0x33);\n+  VDUP(vector2, , uint, u, 8, 8, 0x44);\n+  VDUP(vector2, , uint, u, 16, 4, 0x55);\n+  VDUP(vector2, , uint, u, 32, 2, 0x66);\n+  VDUP(vector2, , float, f, 32, 2, 33.1f);\n+  VDUP(vector2, q, int, s, 8, 16, 0x77);\n+  VDUP(vector2, q, int, s, 16, 8, 0x88);\n+  VDUP(vector2, q, int, s, 32, 4, 0x99);\n+  VDUP(vector2, q, uint, u, 8, 16, 0xAA);\n+  VDUP(vector2, q, uint, u, 16, 8, 0xBB);\n+  VDUP(vector2, q, uint, u, 32, 4, 0xCC);\n+  VDUP(vector2, q, float, f, 32, 4, 99.2f);\n+\n+  VDUP(vector3, , int, s, 8, 8, 0xFF);\n+  VDUP(vector3, , int, s, 16, 4, 0xEE);\n+  VDUP(vector3, , int, s, 32, 2, 0xDD);\n+  VDUP(vector3, , uint, u, 8, 8, 0xCC);\n+  VDUP(vector3, , uint, u, 16, 4, 0xBB);\n+  VDUP(vector3, , uint, u, 32, 2, 0xAA);\n+  VDUP(vector3, , float, f, 32, 2, 10.23f);\n+  VDUP(vector3, q, int, s, 8, 16, 0x99);\n+  VDUP(vector3, q, int, s, 16, 8, 0x88);\n+  VDUP(vector3, q, int, s, 32, 4, 0x77);\n+  VDUP(vector3, q, uint, u, 8, 16, 0x66);\n+  VDUP(vector3, q, uint, u, 16, 8, 0x55);\n+  VDUP(vector3, q, uint, u, 32, 4, 0x44);\n+  VDUP(vector3, q, float, f, 32, 4, 77.8f);\n+\n+  TEST_VMLX(INSN_NAME, , int, s, 8, 8);\n+  TEST_VMLX(INSN_NAME, , int, s, 16, 4);\n+  TEST_VMLX(INSN_NAME, , int, s, 32, 2);\n+  TEST_VMLX(INSN_NAME, , uint, u, 8, 8);\n+  TEST_VMLX(INSN_NAME, , uint, u, 16, 4);\n+  TEST_VMLX(INSN_NAME, , uint, u, 32, 2);\n+  TEST_VMLX(INSN_NAME, , float, f, 32, 2);\n+  TEST_VMLX(INSN_NAME, q, int, s, 8, 16);\n+  TEST_VMLX(INSN_NAME, q, int, s, 16, 8);\n+  TEST_VMLX(INSN_NAME, q, int, s, 32, 4);\n+  TEST_VMLX(INSN_NAME, q, uint, u, 8, 16);\n+  TEST_VMLX(INSN_NAME, q, uint, u, 16, 8);\n+  TEST_VMLX(INSN_NAME, q, uint, u, 32, 4);\n+  TEST_VMLX(INSN_NAME, q, float, f, 32, 4);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}\n+"}, {"sha": "6443fb101b5d88b54d5534ecb3c231bbcf64df75", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmla.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmla.c?ref=84c8a10b6f1a7e37466ebc1548aa40832ed4d151", "patch": "@@ -0,0 +1,35 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmla\n+#define TEST_MSG \"VMLA\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xdf, 0xe0, 0xe1, 0xe2,\n+\t\t\t\t       0xe3, 0xe4, 0xe5, 0xe6 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x1f8c, 0x1f8d, 0x1f8e, 0x1f8f };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x2bf7, 0x2bf8 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x20, 0x21, 0x22, 0x23,\n+\t\t\t\t\t0x24, 0x25, 0x26, 0x27 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x43ac, 0x43ad };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x43a14e76, 0x43a1ce76 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf, 0x10, 0x11, 0x12,\n+\t\t\t\t\t0x13, 0x14, 0x15, 0x16,\n+\t\t\t\t\t0x17, 0x18, 0x19, 0x1a,\n+\t\t\t\t\t0x1b, 0x1c, 0x1d, 0x1e };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x4830, 0x4831, 0x4832, 0x4833,\n+\t\t\t\t\t0x4834, 0x4835, 0x4836, 0x4837 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x470f, 0x4710, 0x4711, 0x4712 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xac, 0xad, 0xae, 0xaf,\n+\t\t\t\t\t 0xb0, 0xb1, 0xb2, 0xb3,\n+\t\t\t\t\t 0xb4, 0xb5, 0xb6, 0xb7,\n+\t\t\t\t\t 0xb8, 0xb9, 0xba, 0xbb };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x3e07, 0x3e08, 0x3e09, 0x3e0a,\n+\t\t\t\t\t 0x3e0b, 0x3e0c, 0x3e0d, 0x3e0e };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x3620, 0x3621, 0x3622, 0x3623 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x45f0ae15, 0x45f0b615,\n+\t\t\t\t\t   0x45f0be15, 0x45f0c615 };\n+\n+#include \"vmlX.inc\""}, {"sha": "a3fc14abbe58bbb8e48cef6665908cd63ff9df4d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmls.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c8a10b6f1a7e37466ebc1548aa40832ed4d151/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmls.c?ref=84c8a10b6f1a7e37466ebc1548aa40832ed4d151", "patch": "@@ -0,0 +1,37 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmls\n+#define TEST_MSG \"VMLS\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x1, 0x2, 0x3, 0x4,\n+\t\t\t\t       0x5, 0x6, 0x7, 0x8 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xe054, 0xe055, 0xe056, 0xe057 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xffffd3e9, 0xffffd3ea };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xc0, 0xc1, 0xc2, 0xc3,\n+\t\t\t\t\t0xc4, 0xc5, 0xc6, 0xc7 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xc1d9, 0xc1da, 0xc1db, 0xc1dc };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffbc34, 0xffffbc35 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc3b14e76, 0xc3b0ce76 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xd1, 0xd2, 0xd3, 0xd4,\n+\t\t\t\t\t0xd5, 0xd6, 0xd7, 0xd8,\n+\t\t\t\t\t0xd9, 0xda, 0xdb, 0xdc,\n+\t\t\t\t\t0xdd, 0xde, 0xdf, 0xe0 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xb7b0, 0xb7b1, 0xb7b2, 0xb7b3,\n+\t\t\t\t\t0xb7b4, 0xb7b5, 0xb7b6, 0xb7b7 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xffffb8d1, 0xffffb8d2,\n+\t\t\t\t\t0xffffb8d3, 0xffffb8d4 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x34, 0x35, 0x36, 0x37,\n+\t\t\t\t\t 0x38, 0x39, 0x3a, 0x3b,\n+\t\t\t\t\t 0x3c, 0x3d, 0x3e, 0x3f,\n+\t\t\t\t\t 0x40, 0x41, 0x42, 0x43 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xc1d9, 0xc1da, 0xc1db, 0xc1dc,\n+\t\t\t\t\t 0xc1dd, 0xc1de, 0xc1df, 0xc1e0 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffc9c0, 0xffffc9c1,\n+\t\t\t\t\t 0xffffc9c2, 0xffffc9c3 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc5f1ae15, 0xc5f1a615,\n+\t\t\t\t\t   0xc5f19e15, 0xc5f19615 };\n+\n+#include \"vmlX.inc\""}]}