{"sha": "04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRjZGQzYzY2MDE0YjJjZTIzYTNmMDRjYTU2NjJjYzFkYzI4MDdlNg==", "commit": {"author": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-05-19T06:57:43Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-05-19T06:57:43Z"}, "message": "Add file omitted from last checkin.\n\nFrom-SVN: r135525", "tree": {"sha": "04421a42fda66b3dd11493cec62c567bb6c839b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04421a42fda66b3dd11493cec62c567bb6c839b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6/comments", "author": null, "committer": null, "parents": [{"sha": "678a51b378f995e276ef40d934ff270b8f68ac1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678a51b378f995e276ef40d934ff270b8f68ac1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678a51b378f995e276ef40d934ff270b8f68ac1b"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "6dc2326ede072867bbd7e6267a3eb31bb12413e4", "filename": "gcc/testsuite/gcc.dg/torture/builtin-isinf_sign-1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-isinf_sign-1.c?ref=04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6", "patch": "@@ -0,0 +1,56 @@\n+/* Copyright (C) 2008  Free Software Foundation.\n+\n+   Verify that __builtin_isinf_sign folds correctly.\n+\n+   Origin: Kaveh R. Ghazi,  May 17, 2008.  */\n+\n+/* { dg-do link } */\n+\n+/* All references to link_error should go away at compile-time.  */\n+extern void link_error(int);\n+\n+void __attribute__ ((__noinline__))\n+foo (float f, double d, long double ld)\n+{\n+  /* Test the generic expansion of isinf_sign.  */\n+\n+  if (__builtin_isinf_sign(f)\n+      != (__builtin_isinf(f) ? (__builtin_signbitf(f) ? -1 : 1) : 0))\n+    link_error (__LINE__);\n+  if (__builtin_isinf_sign(d)\n+      != (__builtin_isinf(d) ? (__builtin_signbit(d) ? -1 : 1) : 0))\n+    link_error (__LINE__);\n+  if (__builtin_isinf_sign(ld)\n+      != (__builtin_isinf(ld) ? (__builtin_signbitl(ld) ? -1 : 1) : 0))\n+    link_error (__LINE__);\n+\n+  /* In boolean contexts, GCC will fold the inner conditional\n+     expression to 1.  So isinf_sign folds to plain isinf.  */\n+\n+  if ((_Bool)__builtin_isinf_sign(f) != (__builtin_isinf(f) != 0))\n+    link_error (__LINE__);\n+  if ((_Bool)__builtin_isinf_sign(d) != (__builtin_isinf(d) != 0))\n+    link_error (__LINE__);\n+  if ((_Bool)__builtin_isinf_sign(ld) != (__builtin_isinf(ld) != 0))\n+    link_error (__LINE__);\n+\n+  if ((__builtin_isinf_sign(f) != 0) != (__builtin_isinf(f) != 0))\n+    link_error (__LINE__);\n+  if ((__builtin_isinf_sign(d) != 0) != (__builtin_isinf(d) != 0))\n+    link_error (__LINE__);\n+  if ((__builtin_isinf_sign(ld) != 0) != (__builtin_isinf(ld) != 0))\n+    link_error (__LINE__);\n+\n+  if ((__builtin_isinf_sign(f) ? 5 : 6) != (__builtin_isinf(f) ? 5 : 6))\n+    link_error (__LINE__);\n+  if ((__builtin_isinf_sign(d) ? 5 : 6) != (__builtin_isinf(d) ? 5 : 6))\n+    link_error (__LINE__);\n+  if ((__builtin_isinf_sign(ld) ? 5 : 6) != (__builtin_isinf(ld) ? 5 : 6))\n+    link_error (__LINE__);\n+}\n+\n+int main (void)\n+{\n+  foo (1, 2, 3);\n+  return 0;\n+}"}]}