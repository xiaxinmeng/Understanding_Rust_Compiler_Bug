{"sha": "468d95c82cff4d16e5384b1f878d1050cb3deb32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY4ZDk1YzgyY2ZmNGQxNmU1Mzg0YjFmODc4ZDEwNTBjYjNkZWIzMg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-08-29T08:29:16Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-08-29T08:29:16Z"}, "message": "PR fortran/77261 Run random_3 testcase only when real(10) is available.\n\nFrom-SVN: r239817", "tree": {"sha": "a0f4be16906bd09717a41d1613c0310c870fe9d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0f4be16906bd09717a41d1613c0310c870fe9d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/468d95c82cff4d16e5384b1f878d1050cb3deb32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/468d95c82cff4d16e5384b1f878d1050cb3deb32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/468d95c82cff4d16e5384b1f878d1050cb3deb32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/468d95c82cff4d16e5384b1f878d1050cb3deb32/comments", "author": null, "committer": null, "parents": [{"sha": "78a3bdba8acbefb75f3f32a568c87fdf9ac046b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a3bdba8acbefb75f3f32a568c87fdf9ac046b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a3bdba8acbefb75f3f32a568c87fdf9ac046b8"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "13f0282809ac630282a2a2aa6679360c87bc27cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/468d95c82cff4d16e5384b1f878d1050cb3deb32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/468d95c82cff4d16e5384b1f878d1050cb3deb32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=468d95c82cff4d16e5384b1f878d1050cb3deb32", "patch": "@@ -1,3 +1,9 @@\n+2016-08-29  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/77261\n+\t* gfortran.dg/random_3.f90: Run testcase only when real(10) is\n+\tavailable.\n+\n 2016-08-28  Tom de Vries  <tom@codesourcery.com>\n \n \tPR lto/70955"}, {"sha": "04910002c1fc4e860514bd3222701d6b80ce7ac2", "filename": "gcc/testsuite/gfortran.dg/random_3.f90", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/468d95c82cff4d16e5384b1f878d1050cb3deb32/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/468d95c82cff4d16e5384b1f878d1050cb3deb32/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frandom_3.f90?ref=468d95c82cff4d16e5384b1f878d1050cb3deb32", "patch": "@@ -1,10 +1,10 @@\n ! { dg-do run }\n ! { dg-require-effective-target fortran_large_real }\n-! Check that the random_seed for real(10) or real(16) exists and that\n-! real(8) and real(10) or real(16) random number generators\n+! Check that the random_seed for real(10) exists and that\n+! real(8) and real(10) random number generators\n ! return the same sequence of values.\n ! Mostly copied from random_2.f90\n-program random_4\n+program random_3\n   integer,parameter :: k = selected_real_kind (precision (0.0_8) + 1)\n \n   integer, dimension(:), allocatable :: seed\n@@ -13,17 +13,23 @@ program random_4\n   real, parameter :: delta = 1.d-10\n   integer n\n \n-  call random_seed (size=n)\n-  allocate (seed(n))\n-  call random_seed (get=seed)\n-  ! Test both array valued and scalar routines.\n-  call random_number(r8)\n-  call random_number (r8(10))\n+  ! Run the test only if real(10) is available. With the current\n+  ! xorshift1024* PRNG the real(16) generator uses two uint64_t values\n+  ! for every real(16) value generated, and hence the sequences won't\n+  ! be the same as with real(4,8,10).\n+  if (k == 10) then\n+     call random_seed (size=n)\n+     allocate (seed(n))\n+     call random_seed (get=seed)\n+     ! Test both array valued and scalar routines.\n+     call random_number(r8)\n+     call random_number (r8(10))\n \n-  ! Reset the seed and get the real(8) values.\n-  call random_seed (put=seed)\n-  call random_number(r10)\n-  call random_number (r10(10))\n+     ! Reset the seed and get the real(8) values.\n+     call random_seed (put=seed)\n+     call random_number(r10)\n+     call random_number (r10(10))\n \n-  if (any ((r8 - r10) .gt. delta)) call abort\n-end program random_4\n+     if (any ((r8 - r10) .gt. delta)) call abort\n+  end if\n+end program random_3"}]}