{"sha": "4341106354c6a463ce3628a4ef9c1a1d37193b59", "node_id": "C_kwDOANBUbNoAKDQzNDExMDYzNTRjNmE0NjNjZTM2MjhhNGVmOWMxYTFkMzcxOTNiNTk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-25T00:17:49Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-25T00:17:49Z"}, "message": "Daily bump.", "tree": {"sha": "c59b903f40c5fb65c2a61397ca126dd8e8659d04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c59b903f40c5fb65c2a61397ca126dd8e8659d04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4341106354c6a463ce3628a4ef9c1a1d37193b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4341106354c6a463ce3628a4ef9c1a1d37193b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4341106354c6a463ce3628a4ef9c1a1d37193b59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4341106354c6a463ce3628a4ef9c1a1d37193b59/comments", "author": null, "committer": null, "parents": [{"sha": "c8373dc8bf146994458473ce7abe546ac9ebaedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8373dc8bf146994458473ce7abe546ac9ebaedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8373dc8bf146994458473ce7abe546ac9ebaedc"}], "stats": {"total": 281, "additions": 280, "deletions": 1}, "files": [{"sha": "bbabd38bba2ffb371c10dc0c33b45242069df355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4341106354c6a463ce3628a4ef9c1a1d37193b59", "patch": "@@ -1,3 +1,105 @@\n+2023-02-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* vec.h (vec<T, A, vl_embed>::m_vecdata): Remove.\n+\t(vec<T, A, vl_embed>::m_vecpfx): Align as T to avoid\n+\tchanging alignment of vec<T, A, vl_embed> and simplifying\n+\taddress.\n+\t(vec<T, A, vl_embed>::address): Compute as this + 1.\n+\t(vec<T, A, vl_embed>::embedded_size): Use sizeof the\n+\tvector instead of the offset of the m_vecdata member.\n+\t(auto_vec<T, N>::m_data): Turn storage into\n+\tuninitialized unsigned char.\n+\t(auto_vec<T, N>::auto_vec): Allow allocation of one\n+\tstack member.  Initialize m_vec in a special way to\n+\tavoid later stringop overflow diagnostics.\n+\t* vec.cc (test_auto_alias): New.\n+\t(vec_cc_tests): Call it.\n+\n+2023-02-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* vec.h (vec<T, A, vl_embed>::lower_bound): Adjust to\n+\ttake a const reference to the object, use address to\n+\taccess data.\n+\t(vec<T, A, vl_embed>::contains): Use address to access data.\n+\t(vec<T, A, vl_embed>::operator[]): Use address instead of\n+\tm_vecdata to access data.\n+\t(vec<T, A, vl_embed>::iterate): Likewise.\n+\t(vec<T, A, vl_embed>::copy): Likewise.\n+\t(vec<T, A, vl_embed>::quick_push): Likewise.\n+\t(vec<T, A, vl_embed>::pop): Likewise.\n+\t(vec<T, A, vl_embed>::quick_insert): Likewise.\n+\t(vec<T, A, vl_embed>::ordered_remove): Likewise.\n+\t(vec<T, A, vl_embed>::unordered_remove): Likewise.\n+\t(vec<T, A, vl_embed>::block_remove): Likewise.\n+\t(vec<T, A, vl_heap>::address): Likewise.\n+\n+2023-02-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/108834\n+\t* asan.cc (asan_add_global): Use proper TU name for normal\n+\tglobal variables (and aux_base_name for the artificial one).\n+\n+2023-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386-builtin.def: Update description of BDESC\n+\tand BDESC_FIRST in file comment to include mask2.\n+\n+2023-02-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (FLAGS): Update comment.\n+\n+2023-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/108854\n+\t* cgraphclones.cc (duplicate_thunk_for_node): If no parameter\n+\tchanges are needed, copy at least DECL_ARGUMENTS PARM_DECL\n+\tnodes and adjust their DECL_CONTEXT.\n+\n+2023-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108881\n+\t* config/i386/i386-builtin.def (__builtin_ia32_cvtne2ps2bf16_v16bf,\n+\t__builtin_ia32_cvtne2ps2bf16_v16bf_mask,\n+\t__builtin_ia32_cvtne2ps2bf16_v16bf_maskz,\n+\t__builtin_ia32_cvtne2ps2bf16_v8bf,\n+\t__builtin_ia32_cvtne2ps2bf16_v8bf_mask,\n+\t__builtin_ia32_cvtne2ps2bf16_v8bf_maskz,\n+\t__builtin_ia32_cvtneps2bf16_v8sf_mask,\n+\t__builtin_ia32_cvtneps2bf16_v8sf_maskz,\n+\t__builtin_ia32_cvtneps2bf16_v4sf_mask,\n+\t__builtin_ia32_cvtneps2bf16_v4sf_maskz,\n+\t__builtin_ia32_dpbf16ps_v8sf, __builtin_ia32_dpbf16ps_v8sf_mask,\n+\t__builtin_ia32_dpbf16ps_v8sf_maskz, __builtin_ia32_dpbf16ps_v4sf,\n+\t__builtin_ia32_dpbf16ps_v4sf_mask,\n+\t__builtin_ia32_dpbf16ps_v4sf_maskz): Require also\n+\tOPTION_MASK_ISA_AVX512VL.\n+\n+2023-02-24  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* config/riscv/t-rtems: Keep only -mcmodel=medany 64-bit multilibs.\n+\tAdd non-compact 32-bit multilibs.\n+\n+2023-02-24  Junxian Zhu  <zhujunxian@oss.cipunited.com>\n+\n+\t* config/mips/mips.md (*clo<mode>2): New pattern.\n+\n+2023-02-24  Prachi Godbole  <prachi.godbole@imgtec.com>\n+\n+\t* config/mips/mips.h (machine_function): New variable\n+\tuse_hazard_barrier_return_p.\n+\t* config/mips/mips.md (UNSPEC_JRHB): New unspec.\n+\t(mips_hb_return_internal): New insn pattern.\n+\t* config/mips/mips.cc (mips_attribute_table): Add attribute\n+\tuse_hazard_barrier_return.\n+\t(mips_use_hazard_barrier_return_p): New static function.\n+\t(mips_function_attr_inlinable_p): Likewise.\n+\t(mips_compute_frame_info): Set use_hazard_barrier_return_p.\n+\tEmit error for unsupported architecture choice.\n+\t(mips_function_ok_for_sibcall, mips_can_use_return_insn):\n+\tReturn false for use_hazard_barrier_return.\n+\t(mips_expand_epilogue): Emit hazard barrier return.\n+\t* doc/extend.texi: Document use_hazard_barrier_return.\n+\n 2023-02-23  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/xtensa-dynconfig.cc (config.h, system.h)"}, {"sha": "cd4bc360c21365408fde19a0805045abd8e48912", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=4341106354c6a463ce3628a4ef9c1a1d37193b59", "patch": "@@ -1 +1 @@\n-20230224\n+20230225"}, {"sha": "39f049a8251527858e3a6b2d36fdc6a2514f47b4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4341106354c6a463ce3628a4ef9c1a1d37193b59", "patch": "@@ -1,3 +1,21 @@\n+2023-02-24  Rimvydas Jasinskas  <rimvydas.jas@gmail.com>\n+\n+\t* trans-decl.cc (gfc_finish_var_decl): Apply attribute.\n+\t(generate_local_decl): Add diagnostic for dummy and local variables.\n+\n+2023-02-24  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/108923\n+\t* expr.cc (gfc_free_actual_arglist): Free associated_dummy\n+\tmemory.\n+\t(gfc_copy_actual_arglist): Make a copy of the associated_dummy\n+\tfield if it is set in the original element.\n+\n+2023-02-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/108924\n+\t* frontend-passes.cc (do_subscript): Clear used gmp variable.\n+\n 2023-02-23  Arsen Arsenovi\u0107  <arsen@aarsen.me>\n \n \t* invoke.texi: Reorder index entries around @items."}, {"sha": "e7782c1df9e9f87fc986a949786df800074812a3", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=4341106354c6a463ce3628a4ef9c1a1d37193b59", "patch": "@@ -1,3 +1,9 @@\n+2023-02-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,\n+\tja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,\n+\tzh_TW.po: Update.\n+\n 2023-02-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.pot: Regenerate."}, {"sha": "f01e988ace3d5e86d48bde7f81a82cda6ac3e1e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341106354c6a463ce3628a4ef9c1a1d37193b59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4341106354c6a463ce3628a4ef9c1a1d37193b59", "patch": "@@ -1,3 +1,39 @@\n+2023-02-24  Rimvydas Jasinskas  <rimvydas.jas@gmail.com>\n+\n+\t* gfortran.dg/weak-2.f90: New test.\n+\t* gfortran.dg/weak-3.f90: New test.\n+\n+2023-02-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/108834\n+\t* c-c++-common/asan/global-overflow-1.c: Test line and column\n+\tinfo for a global variable.\n+\n+2023-02-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR c++/105224\n+\t* g++.dg/modules/virt-2_a.C: Skip on arm_eabi.\n+\n+2023-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/108854\n+\t* g++.dg/opt/pr108854.C: New test.\n+\n+2023-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108881\n+\t* gcc.target/i386/avx512bf16-pr108881.c: New test.\n+\n+2023-02-24  Junxian Zhu  <zhujunxian@oss.cipunited.com>\n+\n+\t* gcc.target/mips/clz.c: New test.\n+\t* gcc.target/mips/clo.c: New test.\n+\t* gcc.target/mips/mips.exp: New option HAS_CLZ.\n+\n+2023-02-24  Prachi Godbole  <prachi.godbole@imgtec.com>\n+\n+\t* gcc.target/mips/hazard-barrier-return-attribute.c: New test.\n+\n 2023-02-23  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \t* gcc.target/xtensa/elim_GP_regmove_0.c: New test."}, {"sha": "90c80fde9bfec494c789c44d3d93fdc639676312", "filename": "libcpp/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341106354c6a463ce3628a4ef9c1a1d37193b59/libcpp%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341106354c6a463ce3628a4ef9c1a1d37193b59/libcpp%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2FChangeLog?ref=4341106354c6a463ce3628a4ef9c1a1d37193b59", "patch": "@@ -1,3 +1,9 @@\n+2023-02-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, ca.po, da.po, de.po, el.po, eo.po, es.po, fi.po, fr.po,\n+\tid.po, ja.po, ka.po, nl.po, pt_BR.po, ro.po, ru.po, sr.po, sv.po,\n+\ttr.po, uk.po, vi.po, zh_CN.po, zh_TW.po: Update.\n+\n 2023-02-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* cpplib.pot: Regenerate."}, {"sha": "4f90475d945f6173b46aaa99648d5ab5958bfede", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4341106354c6a463ce3628a4ef9c1a1d37193b59/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4341106354c6a463ce3628a4ef9c1a1d37193b59/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4341106354c6a463ce3628a4ef9c1a1d37193b59", "patch": "@@ -1,3 +1,114 @@\n+2023-02-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd.h: Line breaks and indenting\n+\tfixed to follow the libstdc++ standard.\n+\t* include/experimental/bits/simd_builtin.h: Likewise.\n+\t* include/experimental/bits/simd_fixed_size.h: Likewise.\n+\t* include/experimental/bits/simd_neon.h: Likewise.\n+\t* include/experimental/bits/simd_ppc.h: Likewise.\n+\t* include/experimental/bits/simd_scalar.h: Likewise.\n+\t* include/experimental/bits/simd_x86.h: Likewise.\n+\n+2023-02-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\tPR libstdc++/108030\n+\t* include/experimental/bits/simd_fixed_size.h\n+\t(_SimdImplFixedSize::_S_broadcast): Replace inline with\n+\t_GLIBCXX_SIMD_INTRINSIC.\n+\t(_SimdImplFixedSize::_S_generate): Likewise.\n+\t(_SimdImplFixedSize::_S_load): Likewise.\n+\t(_SimdImplFixedSize::_S_masked_load): Likewise.\n+\t(_SimdImplFixedSize::_S_store): Likewise.\n+\t(_SimdImplFixedSize::_S_masked_store): Likewise.\n+\t(_SimdImplFixedSize::_S_min): Likewise.\n+\t(_SimdImplFixedSize::_S_max): Likewise.\n+\t(_SimdImplFixedSize::_S_complement): Likewise.\n+\t(_SimdImplFixedSize::_S_unary_minus): Likewise.\n+\t(_SimdImplFixedSize::_S_plus): Likewise.\n+\t(_SimdImplFixedSize::_S_minus): Likewise.\n+\t(_SimdImplFixedSize::_S_multiplies): Likewise.\n+\t(_SimdImplFixedSize::_S_divides): Likewise.\n+\t(_SimdImplFixedSize::_S_modulus): Likewise.\n+\t(_SimdImplFixedSize::_S_bit_and): Likewise.\n+\t(_SimdImplFixedSize::_S_bit_or): Likewise.\n+\t(_SimdImplFixedSize::_S_bit_xor): Likewise.\n+\t(_SimdImplFixedSize::_S_bit_shift_left): Likewise.\n+\t(_SimdImplFixedSize::_S_bit_shift_right): Likewise.\n+\t(_SimdImplFixedSize::_S_remquo): Add inline keyword (to be\n+\texplicit about not always-inline, yet).\n+\t(_SimdImplFixedSize::_S_isinf): Likewise.\n+\t(_SimdImplFixedSize::_S_isfinite): Likewise.\n+\t(_SimdImplFixedSize::_S_isnan): Likewise.\n+\t(_SimdImplFixedSize::_S_isnormal): Likewise.\n+\t(_SimdImplFixedSize::_S_signbit): Likewise.\n+\n+2023-02-24  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\tPR libstdc++/108856\n+\t* include/experimental/bits/simd_builtin.h\n+\t(_SimdImplBuiltin::_S_masked_unary): More efficient\n+\timplementation of masked inc-/decrement for integers and floats\n+\twithout AVX2.\n+\t* include/experimental/bits/simd_x86.h\n+\t(_SimdImplX86::_S_masked_unary): New. Use AVX512 masked subtract\n+\tbuiltins for masked inc-/decrement.\n+\n+2023-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/executor (executor): Constrain template\n+\tconstructors.\n+\n+2023-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (basic_endpoint): Add missing\n+\tconstexpr to comparison operators.\n+\t* testsuite/experimental/net/internet/endpoint/cons.cc: New test.\n+\n+2023-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (network_v4::netmask()): Avoid\n+\tundefined shift.\n+\t(network_v4::broadcast()): Optimize and fix for targets with\n+\tuint_least32_t wider than 32 bits.\n+\t(network_v4::to_string(const Allocator&)): Fix for custom\n+\tallocators and optimize using to_chars.\n+\t(operator==(const network_v4&, const network_v4&)): Add missing\n+\tconstexpr.\n+\t(operator==(const network_v6&, const network_v6&)): Likewise.\n+\t* testsuite/experimental/net/internet/network/v4/cons.cc: New test.\n+\t* testsuite/experimental/net/internet/network/v4/members.cc: New test.\n+\n+2023-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (address_4(const bytes_type&)):\n+\tUse __builtin_bit_cast if available, otherwise convert to\n+\tnetwork byte order.\n+\t(address_v4::to_bytes()): Likewise, but convert from network\n+\tbyte order.\n+\t* testsuite/experimental/net/internet/address/v4/cons.cc: Fix\n+\tincorrect tests. Check for constexpr too.\n+\t* testsuite/experimental/net/internet/address/v4/creation.cc:\n+\tLikewise.\n+\t* testsuite/experimental/net/internet/address/v4/members.cc:\n+\tCheck that bytes_type is a standard-layout type.\n+\n+2023-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/internet (address_v4::to_string):\n+\tOptimize.\n+\t* testsuite/experimental/net/internet/address/v4/members.cc:\n+\tCheck more addresses.\n+\n+2023-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/aligned_buffer.h (__aligned_buffer): Add\n+\tdiagnostic pragmas.\n+\n+2023-02-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/std/format/arguments/lwg3810.cc: Move dg-options\n+\tbefore dg-do.\n+\n 2023-02-23  Matthias Kretz  <m.kretz@gsi.de>\n \n \t* testsuite/experimental/simd/tests/reductions.cc: Introduce"}]}