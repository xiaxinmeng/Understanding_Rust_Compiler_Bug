{"sha": "1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2YTJiNTFkMWQwYzJhM2E4MzVjYzQ3ZDM0YzBjNTJiMGY1Njk0NQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-02-15T09:36:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:36:57Z"}, "message": "opt.ads opt.adb: Add Ada_Version_Explicit_Config along with save/restore routines.\n\n2006-02-13  Robert Dewar  <dewar@adacore.com>\n\t    Serguei Rybin  <rybin@adacore.com>\n\n\t* opt.ads opt.adb: Add Ada_Version_Explicit_Config along with\n\tsave/restore routines.\n\tProperly handle Ada_Version_Explicit and Ada_Version_Config, which\n\twere not always properly handled previously.\n\tSince we are changing the tree format anyway, also get rid of the\n\tjunk obsolete Immediate_Errors flag.\n\t(Tree_Read): Change the way of reading Tree_Version_String - now we\n\tread the version string from the tree even if its length is not the\n\tsame as the length of the version string computed from Gnatvsn.\n\t(Search_Directory_Present): New Boolean flag for the compiler.\n\tDefine Tree_Version_String as a dynamic string.\n\t(Default_Stack_Size): new variable, used to handle switch -d.\n\n\t* par-prag.adb: \n\tFor pragma Ada_2005, remove stuff about setting Ada_Version_Explicit\n\tonly for main unit.\n\tAdd pragma Ada_2005 (synonym for Ada_05)\n\tProperly handle Ada_Version_Explicit and Ada_Version_Config, which\n\twere not always properly handled previously.\n\n\t* directio.ads, ioexcept.ads, sequenio.ads, text_io.ads: Change\n\texplicit Ada_95 to Ada_2005.\n\nFrom-SVN: r111054", "tree": {"sha": "9648ffa2fef61a47fdbcd90b5f5de65b15f23b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9648ffa2fef61a47fdbcd90b5f5de65b15f23b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/comments", "author": null, "committer": null, "parents": [{"sha": "61dddae4e72e300597afeff4b081114a25598c5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61dddae4e72e300597afeff4b081114a25598c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61dddae4e72e300597afeff4b081114a25598c5f"}], "stats": {"total": 139, "additions": 89, "deletions": 50}, "files": [{"sha": "c8239ec60048148e712ce85d2c2db8211968cfcd", "filename": "gcc/ada/directio.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fdirectio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fdirectio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdirectio.ads?ref=1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "patch": "@@ -13,7 +13,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Ada_95;\n+pragma Ada_2005;\n+--  Explicit setting of Ada 2005 mode is required here, since we want to with a\n+--  child unit (not possible in Ada 83 mode), and Text_IO is not considered to\n+--  be an internal unit that is automatically compiled in Ada 2005 mode (since\n+--  a user is allowed to redeclare Direct_IO).\n+\n with Ada.Direct_IO;\n \n generic package Direct_IO renames Ada.Direct_IO;"}, {"sha": "548fd37fd663687769a7c8c97f1e3cafac477dcc", "filename": "gcc/ada/ioexcept.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fioexcept.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fioexcept.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fioexcept.ads?ref=1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "patch": "@@ -13,6 +13,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Ada_95;\n+pragma Ada_2005;\n+--  Explicit setting of Ada 2005 mode is required here, since we want to with a\n+--  child unit (not possible in Ada 83 mode), and Text_IO is not considered to\n+--  be an internal unit that is automatically compiled in Ada 2005 mode (since\n+--  a user is allowed to redeclare IO_Exceptions).\n+\n with Ada.IO_Exceptions;\n+\n package IO_Exceptions renames Ada.IO_Exceptions;"}, {"sha": "8c11718e1897d340c31646cf462228a74d6c89ac", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,17 +31,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Gnatvsn; use Gnatvsn;\n with System;  use System;\n with Tree_IO; use Tree_IO;\n \n package body Opt is\n \n-   Immediate_Errors : Boolean := True;\n-   --  This is an obsolete flag that is no longer present in opt.ads. We\n-   --  retain it here because this flag was written to the tree and there\n-   --  is no point in making trees incomaptible just for the sake of saving\n-   --  one byte of data. The value written is ignored.\n-\n    ----------------------------------\n    -- Register_Opt_Config_Switches --\n    ----------------------------------\n@@ -114,6 +109,11 @@ package body Opt is\n       --  Case of internal unit\n \n       if Internal_Unit then\n+\n+         --  Set standard switches. Note we do NOT set Ada_Version_Explicit\n+         --  since the whole point of this is that it still properly indicates\n+         --  the configuration setting even in a run time unit.\n+\n          Ada_Version                := Ada_Version_Runtime;\n          Dynamic_Elaboration_Checks := False;\n          Extensions_Allowed         := True;\n@@ -126,17 +126,18 @@ package body Opt is\n          --  is the main unit and they were explicitly enabled.\n \n          if Main_Unit then\n-            Assertions_Enabled := Assertions_Enabled_Config;\n+            Assertions_Enabled    := Assertions_Enabled_Config;\n             Debug_Pragmas_Enabled := Debug_Pragmas_Enabled_Config;\n          else\n-            Assertions_Enabled := False;\n+            Assertions_Enabled    := False;\n             Debug_Pragmas_Enabled := False;\n          end if;\n \n       --  Case of non-internal unit\n \n       else\n          Ada_Version                := Ada_Version_Config;\n+         Ada_Version_Explicit       := Ada_Version_Explicit_Config;\n          Assertions_Enabled         := Assertions_Enabled_Config;\n          Debug_Pragmas_Enabled      := Debug_Pragmas_Enabled_Config;\n          Dynamic_Elaboration_Checks := Dynamic_Elaboration_Checks_Config;\n@@ -149,7 +150,6 @@ package body Opt is\n \n       Exception_Locations_Suppressed := Exception_Locations_Suppressed_Config;\n       Polling_Required               := Polling_Required_Config;\n-      Ada_Version_Explicit           := Ada_Version_Explicit_Config;\n    end Set_Opt_Config_Switches;\n \n    ---------------\n@@ -189,28 +189,22 @@ package body Opt is\n       Assertions_Enabled_Config :=\n         Boolean'Val (Assertions_Enabled_Config_Val);\n \n-      --  Read version string: we have to check the length first\n+      --  Read version string: we have to get the length first\n \n       Tree_Read_Int (Tree_Version_String_Len);\n \n-      if Tree_Version_String_Len = Tree_Version_String'Length then\n+      declare\n+         Tmp : String (1 .. Integer (Tree_Version_String_Len));\n+      begin\n          Tree_Read_Data\n-           (Tree_Version_String'Address, Tree_Version_String_Len);\n-      else\n-         Tree_Version_String := (others => '?');\n-\n-         declare\n-            Tmp : String (1 .. Integer (Tree_Version_String_Len));\n-         begin\n-            Tree_Read_Data\n-              (Tmp'Address, Tree_Version_String_Len);\n-         end;\n-\n-      end if;\n+           (Tmp'Address, Tree_Version_String_Len);\n+         GNAT.Strings.Free (Tree_Version_String);\n+         Free (Tree_Version_String);\n+         Tree_Version_String := new String'(Tmp);\n+      end;\n \n       Tree_Read_Data (Distribution_Stub_Mode'Address,\n                       Distribution_Stub_Mode_Type'Object_Size / Storage_Unit);\n-      Tree_Read_Bool (Immediate_Errors);\n       Tree_Read_Bool (Inline_Active);\n       Tree_Read_Bool (Inline_Processing_Required);\n       Tree_Read_Bool (List_Units);\n@@ -231,6 +225,7 @@ package body Opt is\n \n    procedure Tree_Write is\n       Version_String : String := Gnat_Version_String;\n+\n    begin\n       Tree_Write_Int  (ASIS_Version_Number);\n       Tree_Write_Bool (Brief_Output);\n@@ -255,7 +250,6 @@ package body Opt is\n                        Version_String'Length);\n       Tree_Write_Data (Distribution_Stub_Mode'Address,\n                        Distribution_Stub_Mode_Type'Object_Size / Storage_Unit);\n-      Tree_Write_Bool (Immediate_Errors);\n       Tree_Write_Bool (Inline_Active);\n       Tree_Write_Bool (Inline_Processing_Required);\n       Tree_Write_Bool (List_Units);"}, {"sha": "0db00ea1e677eca5aa393d4cf9863f824f9c1c32", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +36,6 @@\n --  other GNAT tools. The comments indicate which options are used by which\n --  programs (GNAT, GNATBIND, GNATLINK, GNATMAKE, GPRMAKE, etc).\n \n-with Gnatvsn;  use Gnatvsn;\n with Hostparm; use Hostparm;\n with Types;    use Types;\n \n@@ -51,7 +50,7 @@ package Opt is\n \n    --  The following mode values represent the current state of processing.\n    --  The values set here are the default values. Unless otherwise noted,\n-   --  the value may be reset in Switch with an appropropiate switch. In\n+   --  the value may be reset in Switch-? with an appropropiate switch. In\n    --  some cases, the values can also be modified by pragmas, and in the\n    --  case of some binder variables, Gnatbind.Scan_Bind_Arg may modify\n    --  the default values.\n@@ -93,13 +92,13 @@ package Opt is\n    --  not Ada_Version_Explicit) when compiling predefined or internal units.\n \n    Ada_Final_Suffix : constant String := \"final\";\n-   Ada_Final_Name : String_Ptr := new String'(\"ada\" & Ada_Final_Suffix);\n+   Ada_Final_Name   : String_Ptr := new String'(\"ada\" & Ada_Final_Suffix);\n    --  GNATBIND\n    --  The name of the procedure that performs the finalization at the end of\n    --  execution. This variable may be modified by Gnatbind.Scan_Bind_Arg.\n \n    Ada_Init_Suffix : constant String := \"init\";\n-   Ada_Init_Name : String_Ptr := new String'(\"ada\" & Ada_Init_Suffix);\n+   Ada_Init_Name   : String_Ptr := new String'(\"ada\" & Ada_Init_Suffix);\n    --  GNATBIND\n    --  The name of the procedure that performs initialization at the start\n    --  of execution. This variable may be modified by Gnatbind.Scan_Bind_Arg.\n@@ -300,9 +299,15 @@ package Opt is\n    --  Set the default exit status value. Set by the -Xnnn switch for the\n    --  binder.\n \n+   Default_Stack_Size : Int := -1;\n+   --  GNATBIND\n+   --  Set to default primary stack size in units of bytes. Set by\n+   --  the -dnnn switch for the binder. A value of -1 indicates that no\n+   --  default was set by the binder.\n+\n    Default_Sec_Stack_Size : Int := -1;\n    --  GNATBIND\n-   --  Set to default secondary stack size in units of kilobytes. Set by\n+   --  Set to default secondary stack size in units of bytes. Set by\n    --  the -Dnnn switch for the binder. A value of -1 indicates that no\n    --  default was set by the binder, and that the default should be the\n    --  initial value of System.Secondary_Stack.Default_Secondary_Stack_Size.\n@@ -857,6 +862,15 @@ package Opt is\n    --  GNATMAKE, GNATLINK\n    --  Set to False when no run_path_option should be issued to the linker\n \n+   Search_Directory_Present : Boolean := False;\n+   --  GNAT\n+   --  Set to True when argument is -I. Reset to False when next argument,\n+   --  a search directory path is taken into account. Note that this is\n+   --  quite different from other switches in this section in that it is\n+   --  only set in a transitory manner as a result of scanning a -I switch\n+   --  with no file name, and if set, is an indication that the next argument\n+   --  is to be treated as a file name.\n+\n    Sec_Stack_Used : Boolean := False;\n    --  GNAT, GBATBIND\n    --  Set True if generated code uses the System.Secondary_Stack package.\n@@ -1161,8 +1175,10 @@ package Opt is\n \n    Ada_Version_Explicit_Config : Ada_Version_Type;\n    --  GNAT\n-   --  Same as above but used to initialize Ada_Version_Explicit. Currently\n-   --  this will always have the same value as Ada_Version_Config.\n+   --  This is set in the same manner as Ada_Version_Config. The difference is\n+   --  that the setting of this flag is not ignored for internal and predefined\n+   --  units, which for some purposes do indeed access this value, regardless\n+   --  of the fact that they are compiled the the most up to date ada version).\n \n    Assertions_Enabled_Config : Boolean;\n    --  GNAT\n@@ -1306,20 +1322,28 @@ package Opt is\n    --  tree, and they are supposed to be compared with the corresponding values\n    --  from the Gnatvsn package which is a part of ASIS implementation.\n \n-   Tree_Version_String : String (Gnat_Version_String'Range);\n+   Tree_Version_String : String_Access;\n    --  Used to store the compiler version string read from a tree file to check\n-   --  if it is the same as stored in the version string in Gnatvsn. Therefore\n-   --  its length is taken directly from the version string in Gnatvsn. If the\n-   --  length of the version string stored in the tree is different, then\n-   --  versions are for sure different, and a string containing '?' characters\n-   --  is assigned to this variable as a result of tree read.\n+   --  if it is from the same date as stored in the version string in Gnatvsn.\n+   --  We require that ASIS Pro can be used only with GNAT Pro, but we allow\n+   --  non-Pro ASIS and ASIS-based tools to be used with any version of the\n+   --  GNAT compiler. Therefore, we need the possibility to compare the dates\n+   --  of the corresponding source sets, using version strings that may be\n+   --  of different lengths.\n \n    Tree_ASIS_Version_Number : Int;\n    --  Used to store the ASIS version number read from a tree file to check if\n    --  it is the same as stored in the ASIS version number in Gnatvsn.\n \n private\n \n+   --  The following type is used to save and restore settings of switches in\n+   --  Opt that represent the configuration (i.e. result of config pragmas).\n+\n+   --  Note that Ada_Version_Explicit is not included, since this is a sticky\n+   --  flag that once set does not get reset, since the whole idea of this flag\n+   --  is to record the setting for the main unit.\n+\n    type Config_Switches_Type is record\n       Ada_Version                    : Ada_Version_Type;\n       Ada_Version_Explicit           : Ada_Version_Type;"}, {"sha": "7646f6e03fe1f118e7076c9928ba4940255fd4cd", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -302,19 +302,19 @@ begin\n          Ada_Version := Ada_95;\n          Ada_Version_Explicit := Ada_Version;\n \n-      ------------\n-      -- Ada_05 --\n-      ------------\n+      ---------------------\n+      -- Ada_05/Ada_2005 --\n+      ---------------------\n \n       --  This pragma must be processed at parse time, since we want to set\n       --  the Ada version properly at parse time to recognize the appropriate\n       --  Ada version syntax. However, it is only the zero argument form that\n       --  must be processed at parse time.\n \n-      when Pragma_Ada_05 =>\n+      when Pragma_Ada_05 | Pragma_Ada_2005 =>\n          if Arg_Count = 0 then\n             Ada_Version := Ada_05;\n-            Ada_Version_Explicit := Ada_Version;\n+            Ada_Version_Explicit := Ada_05;\n          end if;\n \n       -----------"}, {"sha": "8ea1890585198c43e93839d831dfebbd4cb83c77", "filename": "gcc/ada/sequenio.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fsequenio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Fsequenio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsequenio.ads?ref=1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "patch": "@@ -13,7 +13,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Ada_95;\n+pragma Ada_2005;\n+--  Explicit setting of Ada 2005 mode is required here, since we want to with a\n+--  child unit (not possible in Ada 83 mode), and Text_IO is not considered to\n+--  be an internal unit that is automatically compiled in Ada 2005 mode (since\n+--  a user is allowed to redeclare Sequential_IO).\n+\n with Ada.Sequential_IO;\n \n generic package Sequential_IO renames Ada.Sequential_IO;"}, {"sha": "f51e1c22da95af4ec1164b42ade9bad3d3e5e5fb", "filename": "gcc/ada/text_io.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Ftext_io.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945/gcc%2Fada%2Ftext_io.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftext_io.ads?ref=1f6a2b51d1d0c2a3a835cc47d34c0c52b0f56945", "patch": "@@ -13,7 +13,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Ada_95;\n+pragma Ada_2005;\n+--  Explicit setting of Ada 2005 mode is required here, since we want to with a\n+--  child unit (not possible in Ada 83 mode), and Text_IO is not considered to\n+--  be an internal unit that is automatically compiled in Ada 2005 mode (since\n+--  a user is allowed to redeclare Text_IO).\n+\n with Ada.Text_IO;\n \n package Text_IO renames Ada.Text_IO;"}]}