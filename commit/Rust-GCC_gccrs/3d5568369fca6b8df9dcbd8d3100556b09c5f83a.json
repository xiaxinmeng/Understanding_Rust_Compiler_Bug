{"sha": "3d5568369fca6b8df9dcbd8d3100556b09c5f83a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q1NTY4MzY5ZmNhNmI4ZGY5ZGNiZDhkMzEwMDU1NmIwOWM1ZjgzYQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2001-11-28T02:37:44Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2001-11-28T02:37:44Z"}, "message": "cris.c: Tweak spacing for prototypes.\n\n\t* config/cris/cris.c: Tweak spacing for prototypes.\n\t(LOSE_AND_RETURN): New macro.\n\t(cris_operand_lossage): New function.\n\t(cris_print_index, cris_print_base): Use cris_operand_lossage\n\trather than fatal_insn.\n\t(cris_print_operand, cris_print_operand_address): Use\n\tLOSE_AND_RETURN rather than fatal_insn and internal_error.\n\t(cris_output_addr_const): Use LOSE_AND_RETURN and\n\toutput_operand_lossage rather than fatal_insn and internal_error\n\tfor valid but unexpected rtx expressions.\n\n\t* config/cris/cris.c (cris_split_movdx): Don't call alter_subreg\n\tfor a SUBREG in src or dest, abort instead.\n\nFrom-SVN: r47395", "tree": {"sha": "0ef2873cde3d0bec88fd0b662d4a67074171ff39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ef2873cde3d0bec88fd0b662d4a67074171ff39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d5568369fca6b8df9dcbd8d3100556b09c5f83a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5568369fca6b8df9dcbd8d3100556b09c5f83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d5568369fca6b8df9dcbd8d3100556b09c5f83a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5568369fca6b8df9dcbd8d3100556b09c5f83a/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd2aba001d4f7cd247fb5300afca7312af7dd094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2aba001d4f7cd247fb5300afca7312af7dd094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2aba001d4f7cd247fb5300afca7312af7dd094"}], "stats": {"total": 134, "additions": 82, "deletions": 52}, "files": [{"sha": "6a87c32bc615ef651a5cf9c43b90ea8ea6342267", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d5568369fca6b8df9dcbd8d3100556b09c5f83a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d5568369fca6b8df9dcbd8d3100556b09c5f83a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d5568369fca6b8df9dcbd8d3100556b09c5f83a", "patch": "@@ -1,3 +1,19 @@\n+2001-11-28  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.c: Tweak spacing for prototypes.\n+\t(LOSE_AND_RETURN): New macro.\n+\t(cris_operand_lossage): New function.\n+\t(cris_print_index, cris_print_base): Use cris_operand_lossage\n+\trather than fatal_insn.\n+\t(cris_print_operand, cris_print_operand_address): Use\n+\tLOSE_AND_RETURN rather than fatal_insn and internal_error.\n+\t(cris_output_addr_const): Use LOSE_AND_RETURN and\n+\toutput_operand_lossage rather than fatal_insn and internal_error\n+\tfor valid but unexpected rtx expressions.\n+\n+\t* config/cris/cris.c (cris_split_movdx): Don't call alter_subreg\n+\tfor a SUBREG in src or dest, abort instead.\n+\n 2001-11-28  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* doc/passes.texi: Remove reference to c-dump.c. Update tree inlining"}, {"sha": "c95430427d7460a6b95614f99cd22cf62ad7cb32", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 66, "deletions": 52, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d5568369fca6b8df9dcbd8d3100556b09c5f83a/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d5568369fca6b8df9dcbd8d3100556b09c5f83a/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=3d5568369fca6b8df9dcbd8d3100556b09c5f83a", "patch": "@@ -55,15 +55,19 @@ Boston, MA 02111-1307, USA.  */\n \tabort ();\t\t\t\t\t\t\\\n     } while (0)\n \n+#define LOSE_AND_RETURN(msg, x)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      cris_operand_lossage (msg, x);\t\t\\\n+      return;\t\t\t\t\t\\\n+    } while (0)\n+\n /* Per-function machine data.  */\n struct machine_function\n  {\n    int needs_return_address_on_stack;\n  };\n \n-/* Fix for reg_overlap_mentioned_p.  */\n-static int cris_reg_overlap_mentioned_p PARAMS ((rtx, rtx));\n-\n /* This little fix suppresses the 'u' or 's' when '%e' in assembly\n    pattern.  */\n static char cris_output_insn_is_bound = 0;\n@@ -74,28 +78,30 @@ static char cris_output_insn_is_bound = 0;\n    just the \"sym:GOTOFF\" part.  */\n static int cris_pic_sympart_only = 0;\n \n-static void\n-cris_print_base PARAMS ((rtx, FILE *));\n+/* Fix for reg_overlap_mentioned_p.  */\n+static int cris_reg_overlap_mentioned_p PARAMS ((rtx, rtx));\n \n-static void\n-cris_print_index PARAMS ((rtx, FILE *));\n+static void cris_print_base PARAMS ((rtx, FILE *));\n \n-static void\n-cris_init_machine_status PARAMS ((struct function *));\n+static void cris_print_index PARAMS ((rtx, FILE *));\n \n-static int\n-cris_initial_frame_pointer_offset PARAMS ((void));\n+static void cris_init_machine_status PARAMS ((struct function *));\n \n-static int\n-saved_regs_mentioned PARAMS ((rtx));\n+static int cris_initial_frame_pointer_offset PARAMS ((void));\n+\n+static int saved_regs_mentioned PARAMS ((rtx));\n \n static void cris_target_asm_function_prologue\n   PARAMS ((FILE *, HOST_WIDE_INT));\n+\n static void cris_target_asm_function_epilogue\n   PARAMS ((FILE *, HOST_WIDE_INT));\n \n+static void cris_operand_lossage PARAMS ((const char *, rtx));\n+\n /* The function cris_target_asm_function_epilogue puts the last insn to\n-   output here.  Used in delay_slots_for_epilogue and function_epilogue.  */\n+   output here.  It always fits; there won't be a symbol operand.  Used in\n+   delay_slots_for_epilogue and function_epilogue.  */\n static char save_last[80];\n \n /* This is the argument from the \"-max-stack-stackframe=\" option.  */\n@@ -476,6 +482,20 @@ cris_op_str (x)\n   }\n }\n \n+/* Emit an error message when we're in an asm, and a fatal error for\n+   \"normal\" insns.  Formatted output isn't easily implemented, since we\n+   use output_operand_lossage to output the actual message and handle the\n+   categorization of the error.  */\n+\n+static void\n+cris_operand_lossage (msg, op)\n+     const char *msg;\n+     rtx op;\n+{\n+  debug_rtx (op);\n+  output_operand_lossage (msg);\n+}\n+\n /* Print an index part of an address to file.  */\n \n static void\n@@ -527,7 +547,8 @@ cris_print_index (index, file)\n \tfprintf (file, \"[$%s].d\", reg_names[REGNO (inner)]);\n     }\n   else\n-    fatal_insn (\"Unexpected index-type in cris_print_index\", index);\n+    cris_operand_lossage (\"unexpected index-type in cris_print_index\", \n+\t\t\t  index);\n }\n \n /* Print a base rtx of an address to file.  */\n@@ -542,7 +563,8 @@ cris_print_base (base, file)\n   else if (GET_CODE (base) == POST_INC)\n     fprintf (file, \"$%s+\", reg_names[REGNO (XEXP (base, 0))]);\n   else\n-    fatal_insn (\"Unexpected base-type in cris_print_base\", base);\n+    cris_operand_lossage (\"unexpected base-type in cris_print_base\", \n+\t\t\t  base);\n }\n \n /* Usable as a guard in expressions.  */\n@@ -1238,7 +1260,7 @@ cris_print_operand (file, x, code)\n \t and < 0, i.e print 255 or 65535 as -1, 254, 65534 as -2, etc.  */\n       if (GET_CODE (x) != CONST_INT\n \t  || ! CONST_OK_FOR_LETTER_P (INTVAL (x), 'O'))\n-\tfatal_insn (\"Internal: Invalid operand with 'b'\", x);\n+\tLOSE_AND_RETURN (\"invalid operand for 'b' modifier\", x);\n       fprintf (file, \"%d\", INTVAL (x)| (INTVAL (x) <= 255 ? ~255 : ~65535));\n       return;\n \n@@ -1249,8 +1271,8 @@ cris_print_operand (file, x, code)\n \n     case 'v':\n       /* Print the operand without the PIC register.  */\n-      if (! flag_pic || ! cris_gotless_symbol (x))\n-\tfatal_insn (\"Internal: Invalid operand with 'v'\", x);\n+      if (! flag_pic || ! CONSTANT_P (x) || ! cris_gotless_symbol (x))\n+\tLOSE_AND_RETURN (\"invalid operand for 'v' modifier\", x);\n       cris_pic_sympart_only++;\n       cris_output_addr_const (file, x);\n       cris_pic_sympart_only--;\n@@ -1259,15 +1281,15 @@ cris_print_operand (file, x, code)\n     case 'P':\n       /* Print the PIC register.  Applied to a GOT-less PIC symbol for\n          sanity.  */\n-      if (! flag_pic || ! cris_gotless_symbol (x))\n-\tfatal_insn (\"Internal: Invalid operand with 'P'\", x);\n+      if (! flag_pic || ! CONSTANT_P (x) || ! cris_gotless_symbol (x))\n+\tLOSE_AND_RETURN (\"invalid operand for 'P' modifier\", x);\n       fprintf (file, \"$%s\", reg_names [PIC_OFFSET_TABLE_REGNUM]);\n       return;\n \n     case 'p':\n       /* Adjust a power of two to its log2.  */\n       if (GET_CODE (x) != CONST_INT || exact_log2 (INTVAL (x)) < 0 )\n-\tfatal_insn (\"Internal: Invalid operand with 'p'\", x);\n+\tLOSE_AND_RETURN (\"invalid operand for 'p' modifier\", x);\n       fprintf (file, \"%d\", exact_log2 (INTVAL (x)));\n       return;\n \n@@ -1306,7 +1328,7 @@ cris_print_operand (file, x, code)\n \t w for -32768 <= x <= 65535, else abort.  */\n       if (GET_CODE (x) != CONST_INT\n \t  || INTVAL (x) < -32768 || INTVAL (x) > 65535)\n-\tfatal_insn (\"Internal: Invalid operand with 'z'\", x);\n+\tLOSE_AND_RETURN (\"invalid operand for 'z' modifier\", x);\n       putc (INTVAL (x) >= -128 && INTVAL (x) <= 255 ? 'b' : 'w', file);\n       return;\n \n@@ -1334,13 +1356,13 @@ cris_print_operand (file, x, code)\n \t      return;\n \t    }\n \t  else\n-\t    fatal_insn (\"Internal: Invalid operand with 'H'\", x);\n+\t    LOSE_AND_RETURN (\"invalid operand for 'H' modifier\", x);\n \n \tcase REG:\n \t  /* Print reg + 1.  Check that there's not an attempt to print\n \t     high-parts of registers like stack-pointer or higher.  */\n \t  if (REGNO (operand) > STACK_POINTER_REGNUM - 2)\n-\t    internal_error (\"Internal: Bad register: %d\", REGNO (operand));\n+\t    LOSE_AND_RETURN (\"bad register\", operand);\n \t  fprintf (file, \"$%s\", reg_names[REGNO (operand) + 1]);\n \t  return;\n \n@@ -1364,7 +1386,7 @@ cris_print_operand (file, x, code)\n \t  }\n \n \tdefault:\n-\t  fatal_insn (\"Internal: Invalid operand for 'H'\", x);\n+\t  LOSE_AND_RETURN (\"invalid operand for 'H' modifier\", x);\n \t}\n \n     case 'L':\n@@ -1378,7 +1400,7 @@ cris_print_operand (file, x, code)\n       if (GET_CODE (operand) != SIGN_EXTEND\n \t  && GET_CODE (operand) != ZERO_EXTEND\n \t  && GET_CODE (operand) != CONST_INT)\n-\tfatal_insn (\"Internal: Invalid operand with 'e'\", x);\n+\tLOSE_AND_RETURN (\"invalid operand for 'e' modifier\", x);\n \n       if (cris_output_insn_is_bound)\n \t{\n@@ -1395,7 +1417,7 @@ cris_print_operand (file, x, code)\n       /* Print the size letter of the inner element.  We can do it by\n \t calling ourselves with the 's' modifier.  */\n       if (GET_CODE (operand) != SIGN_EXTEND && GET_CODE (operand) != ZERO_EXTEND)\n-\tfatal_insn (\"Internal: Invalid operand with 'm'\", x);\n+\tLOSE_AND_RETURN (\"invalid operand for 'm' modifier\", x);\n       cris_print_operand (file, XEXP (operand, 0), 's');\n       return;\n \n@@ -1414,15 +1436,15 @@ cris_print_operand (file, x, code)\n       /* When emitting an add for the high part of a DImode constant, we\n \t want to use addq for 0 and adds.w for -1.  */\n       if (GET_CODE (operand) != CONST_INT)\n-\tfatal_insn (\"Internal: Invalid operand with 'A' output modifier\", x);\n+\tLOSE_AND_RETURN (\"invalid operand for 'A' modifier\", x);\n       fprintf (file, INTVAL (operand) < 0 ? \"adds.w\" : \"addq\");\n       return;\n \n     case 'D':\n       /* When emitting an sub for the high part of a DImode constant, we\n \t want to use subq for 0 and subs.w for -1.  */\n       if (GET_CODE (operand) != CONST_INT)\n-\tfatal_insn (\"Internal: Invalid operand with 'D' output modifier\", x);\n+\tLOSE_AND_RETURN (\"invalid operand for 'D' modifier\", x);\n       fprintf (file, INTVAL (operand) < 0 ? \"subs.w\" : \"subq\");\n       return;\n \n@@ -1436,8 +1458,7 @@ cris_print_operand (file, x, code)\n       /* Print the size letter for an operand to a MULT, which must be a\n \t const_int with a suitable value.  */\n       if (GET_CODE (operand) != CONST_INT || INTVAL (operand) > 4)\n-\tfatal_insn (\"Internal: Invalid operand with 'T'\", x);\n-\n+\tLOSE_AND_RETURN (\"invalid operand for 'T' modifier\", x);\n       fprintf (file, \"%s\", mults[INTVAL (operand)]);\n       return;\n \n@@ -1446,12 +1467,7 @@ cris_print_operand (file, x, code)\n       break;\n \n     default:\n-      {\n-#define BADFORMAT \"Internal: Invalid operand for '%c'\"\n-\tchar s[sizeof BADFORMAT];\n-\tsprintf (s, BADFORMAT, code);\n-\tfatal_insn (s, x);\n-      }\n+      LOSE_AND_RETURN (\"invalid operand modifier letter\", x);\n     }\n \n   /* Print an operand as without a modifier letter.  */\n@@ -1507,7 +1523,7 @@ cris_print_operand (file, x, code)\n \tif (GET_CODE (reg) != REG\n \t    || (GET_CODE (XEXP (operand, 0)) != CONST_INT\n \t\t&& GET_CODE (XEXP (operand, 1)) != CONST_INT))\n-\t  fatal_insn (\"Can't print operand\", x);\n+\t  LOSE_AND_RETURN (\"unexpected multiplicative operand\", x);\n \n \tcris_print_base (reg, file);\n \tfprintf (file, \".%c\",\n@@ -1527,7 +1543,7 @@ cris_print_operand (file, x, code)\n \t  return;\n \t}\n \n-      fatal_insn (\"Internal: Cannot decode operand\", x);\n+      LOSE_AND_RETURN (\"unexpected operand\", x);\n     }\n }\n \n@@ -1562,7 +1578,7 @@ cris_print_operand_address (file, x)\n \t  cris_print_index (x1, file);\n \t}\n       else\n-\tfatal_insn (\"Internal: This is not a recognized address\", x);\n+\tLOSE_AND_RETURN (\"unrecognized address\", x);\n     }\n   else if (GET_CODE (x) == MEM)\n     {\n@@ -1572,7 +1588,7 @@ cris_print_operand_address (file, x)\n       putc (']', file);\n     }\n   else\n-    fatal_insn (\"Internal: This is not a recognized address\", x);\n+    LOSE_AND_RETURN (\"unrecognized address\", x);\n \n   putc (']', file);\n }\n@@ -2612,13 +2628,11 @@ cris_split_movdx (operands)\n   rtx src  = operands[1];\n   rtx val;\n \n-  /* We might have (SUBREG (MEM)) here, so just get rid of the\n-     subregs to make this code simpler.  It is safe to call\n-     alter_subreg any time after reload.  */\n-  if (GET_CODE (dest) == SUBREG)\n-    dest = alter_subreg (dest);\n-  if (GET_CODE (src) == SUBREG)\n-    src = alter_subreg (src);\n+  /* We used to have to handle (SUBREG (MEM)) here, but that should no\n+     longer happen; after reload there are no SUBREGs any more, and we're\n+     only called after reload.  */\n+  if (GET_CODE (dest) == SUBREG || GET_CODE (src) == SUBREG)\n+    abort ();\n \n   start_sequence ();\n   if (GET_CODE (dest) == REG)\n@@ -2831,11 +2845,11 @@ cris_output_addr_const (file, x)\n \t\tfprintf (file, \":GOT]\");\n \t    }\n \t  else\n-\t    fatal_insn (\"Unexpected PIC symbol\", x);\n+\t    LOSE_AND_RETURN (\"unexpected PIC symbol\", x);\n \n \t  /* Sanity check.  */\n \t  if (! current_function_uses_pic_offset_table)\n-\t    internal_error (\"Emitting PIC operand, but PIC register isn't set up\");\n+\t    output_operand_lossage (\"PIC register isn't set up\");\n \t}\n       else\n \tassemble_name (file, XSTR (x, 0));\n@@ -2931,7 +2945,7 @@ cris_output_addr_const (file, x)\n       break;\n \n     default:\n-      fatal_insn (\"Unexpected address expression\", x);\n+      LOSE_AND_RETURN (\"unexpected address expression\", x);\n     }\n }\n "}]}