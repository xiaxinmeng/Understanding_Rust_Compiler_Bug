{"sha": "9779c871afc648329500747748c70b59b47abdf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc3OWM4NzFhZmM2NDgzMjk1MDA3NDc3NDhjNzBiNTliNDdhYmRmNw==", "commit": {"author": {"name": "Paul Pluzhnikov", "email": "ppluzhnikov@google.com", "date": "2013-09-22T02:04:13Z"}, "committer": {"name": "Paul Pluzhnikov", "email": "ppluzhnikov@gcc.gnu.org", "date": "2013-09-22T02:04:13Z"}, "message": "Print additional info when various out-of-range conditions are detected.\n\n2013-09-21  Paul Pluzhnikov  <ppluzhnikov@google.com>\n\n\t* include/bits/functexcept.h (__throw_out_of_range_fmt): New.\n\t* src/c++11/functexcept.cc (__throw_out_of_range_fmt): New.\n\t* src/c++11/snprintf_lite.cc: New.\n\t* src/c++11/Makefile.am: Add snprintf_lite.cc.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* config/abi/pre/gnu.ver: Add _ZSt24__throw_out_of_range_fmtPKcz.\n\t* include/std/array (at): Use __throw_out_of_range_fmt.\n\t* include/debug/array (at): Likewise.\n\t* include/profile/array (at): Likewise.\n\t* include/std/bitset (_M_check_initial_position, _M_check): New.\n\t(bitset::bitset): Use _M_check_initial_position.\n\t(set, reset, flip, test): Use _M_check.\n\t* include/ext/vstring.h (_M_check, at): Use __throw_out_of_range_fmt.\n\t* include/bits/stl_vector.h (_M_range_check): Likewise.\n\t* include/bits/stl_bvector.h (_M_range_check): Likewise.\n\t* include/bits/stl_deque.h (_M_range_check): Likewise.\n\t* include/bits/basic_string.h (_M_check, at): Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc: Adjust.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc: Likewise.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Likewise.\n\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc: Likewise.\n\t* testsuite/util/exception/safety.h (generate): Use __throw_out_of_range_fmt.\n\nFrom-SVN: r202818", "tree": {"sha": "1807bb351c1ef7b319a9d9f950ffb248e213222c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1807bb351c1ef7b319a9d9f950ffb248e213222c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9779c871afc648329500747748c70b59b47abdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9779c871afc648329500747748c70b59b47abdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9779c871afc648329500747748c70b59b47abdf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9779c871afc648329500747748c70b59b47abdf7/comments", "author": {"login": "EmployedRussian", "id": 39165328, "node_id": "MDQ6VXNlcjM5MTY1MzI4", "avatar_url": "https://avatars.githubusercontent.com/u/39165328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EmployedRussian", "html_url": "https://github.com/EmployedRussian", "followers_url": "https://api.github.com/users/EmployedRussian/followers", "following_url": "https://api.github.com/users/EmployedRussian/following{/other_user}", "gists_url": "https://api.github.com/users/EmployedRussian/gists{/gist_id}", "starred_url": "https://api.github.com/users/EmployedRussian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EmployedRussian/subscriptions", "organizations_url": "https://api.github.com/users/EmployedRussian/orgs", "repos_url": "https://api.github.com/users/EmployedRussian/repos", "events_url": "https://api.github.com/users/EmployedRussian/events{/privacy}", "received_events_url": "https://api.github.com/users/EmployedRussian/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e2148ad570e2c48e69e1d861a02bb9445719410", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2148ad570e2c48e69e1d861a02bb9445719410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2148ad570e2c48e69e1d861a02bb9445719410"}], "stats": {"total": 393, "additions": 327, "deletions": 66}, "files": [{"sha": "069bd405123e50b02db41cabd23a075af9df3fec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -1,3 +1,41 @@\n+2013-09-21  Paul Pluzhnikov  <ppluzhnikov@google.com>\n+\n+\t* include/bits/functexcept.h (__throw_out_of_range_fmt): New.\n+\t* src/c++11/functexcept.cc (__throw_out_of_range_fmt): New.\n+\t* src/c++11/snprintf_lite.cc: New.\n+\t* src/c++11/Makefile.am: Add snprintf_lite.cc.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* config/abi/pre/gnu.ver: Add _ZSt24__throw_out_of_range_fmtPKcz.\n+\t* include/std/array (at): Use __throw_out_of_range_fmt.\n+\t* include/debug/array (at): Likewise.\n+\t* include/profile/array (at): Likewise.\n+\t* include/std/bitset (_M_check_initial_position, _M_check): New.\n+\t(bitset::bitset): Use _M_check_initial_position.\n+\t(set, reset, flip, test): Use _M_check.\n+\t* include/ext/vstring.h (_M_check, at): Use __throw_out_of_range_fmt.\n+\t* include/bits/stl_vector.h (_M_range_check): Likewise.\n+\t* include/bits/stl_bvector.h (_M_range_check): Likewise.\n+\t* include/bits/stl_deque.h (_M_range_check): Likewise.\n+\t* include/bits/basic_string.h (_M_check, at): Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc: Adjust.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc: Likewise.\n+\t* testsuite/util/exception/safety.h (generate): Use __throw_out_of_range_fmt.\n+\n 2013-09-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/57605"}, {"sha": "d3c399f6bf2e9465e52cfa15ac0c9dcdd7e20e85", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -1365,6 +1365,9 @@ GLIBCXX_3.4.20 {\n     # std::get_unexpected()\n     _ZSt14get_unexpectedv;\n \n+    # std::__throw_out_of_range_fmt(char const*, ...)\n+    _ZSt24__throw_out_of_range_fmtPKcz;\n+\n } GLIBCXX_3.4.19;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "566186f4d172c5671f3e9b9e2968939aa9a1328c", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -321,7 +321,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_check(size_type __pos, const char* __s) const\n       {\n \tif (__pos > this->size())\n-\t  __throw_out_of_range(__N(__s));\n+\t  __throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > \"\n+\t\t\t\t       \"this->size() (which is %zu)\"),\n+\t\t\t\t   __s, __pos, this->size());\n \treturn __pos;\n       }\n \n@@ -869,7 +871,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       at(size_type __n) const\n       {\n \tif (__n >= this->size())\n-\t  __throw_out_of_range(__N(\"basic_string::at\"));\n+\t  __throw_out_of_range_fmt(__N(\"basic_string::at: __n \"\n+\t\t\t\t       \"(which is %zu) >= this->size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __n, this->size());\n \treturn _M_data()[__n];\n       }\n \n@@ -888,7 +893,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       at(size_type __n)\n       {\n \tif (__n >= size())\n-\t  __throw_out_of_range(__N(\"basic_string::at\"));\n+\t  __throw_out_of_range_fmt(__N(\"basic_string::at: __n \"\n+\t\t\t\t       \"(which is %zu) >= this->size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __n, this->size());\n \t_M_leak();\n \treturn _M_data()[__n];\n       }"}, {"sha": "03e2040d96a054ebb328003dea90582cfca361db", "filename": "libstdc++-v3/include/bits/functexcept.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctexcept.h?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -74,6 +74,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   void\n   __throw_out_of_range(const char*) __attribute__((__noreturn__));\n \n+  void\n+  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))\n+    __attribute__((__format__(__printf__, 1, 2)));\n+\n   void\n   __throw_runtime_error(const char*) __attribute__((__noreturn__));\n "}, {"sha": "8e4b023061490602edf18ce54119931f86420de8", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -785,7 +785,10 @@ template<typename _Alloc>\n     _M_range_check(size_type __n) const\n     {\n       if (__n >= this->size())\n-        __throw_out_of_range(__N(\"vector<bool>::_M_range_check\"));\n+\t__throw_out_of_range_fmt(__N(\"vector<bool>::_M_range_check: __n \"\n+\t\t\t\t     \"(which is %zu) >= this->size() \"\n+\t\t\t\t     \"(which is %zu)\"),\n+\t\t\t\t __n, this->size());\n     }\n \n   public:"}, {"sha": "ca9e4179b06f73b83ddce7f71dbfb98df46105b9", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -1264,7 +1264,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_range_check(size_type __n) const\n       {\n \tif (__n >= this->size())\n-\t  __throw_out_of_range(__N(\"deque::_M_range_check\"));\n+\t  __throw_out_of_range_fmt(__N(\"deque::_M_range_check: __n \"\n+\t\t\t\t       \"(which is %zu)>= this->size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __n, this->size());\n       }\n \n     public:"}, {"sha": "376f39af2169842d5fe0d23841f041169f556a4a", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -785,7 +785,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_range_check(size_type __n) const\n       {\n \tif (__n >= this->size())\n-\t  __throw_out_of_range(__N(\"vector::_M_range_check\"));\n+\t  __throw_out_of_range_fmt(__N(\"vector::_M_range_check: __n \"\n+\t\t\t\t       \"(which is %zu) >= this->size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __n, this->size());\n       }\n \n     public:"}, {"sha": "6ee23846518a6e28a79a4328c575414ed7e0dbe0", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -165,7 +165,10 @@ namespace __debug\n       at(size_type __n)\n       {\n \tif (__n >= _Nm)\n-\t  std::__throw_out_of_range(__N(\"array::at\"));\n+\t  std::__throw_out_of_range_fmt(__N(\"array::at: __n \"\n+\t\t\t\t            \"(which is %zu) >= _Nm \"\n+\t\t\t\t\t    \"(which is %zu)\"),\n+\t\t\t\t\t__n, _Nm);\n \treturn _AT_Type::_S_ref(_M_elems, __n);\n       }\n \n@@ -175,7 +178,9 @@ namespace __debug\n \t// Result of conditional expression must be an lvalue so use\n \t// boolean ? lvalue : (throw-expr, lvalue)\n \treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n-\t  : (std::__throw_out_of_range(__N(\"array::at\")),\n+\t  : (std::__throw_out_of_range_fmt(__N(\"array::at: __n (which is %zu) \"\n+\t\t\t\t\t       \">= _Nm (which is %zu)\"),\n+\t\t\t\t\t   __n, _Nm),\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n "}, {"sha": "8eb8597c804ea1e6704bfce0f1517c293f71bfc4", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -85,7 +85,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_check(size_type __pos, const char* __s) const\n       {\n \tif (__pos > this->size())\n-\t  std::__throw_out_of_range(__N(__s));\n+\t  std::__throw_out_of_range_fmt(__N(\"%s: __pos (which is %zu) > \"\n+\t\t\t\t\t    \"this->size() (which is %zu)\"),\n+\t\t\t\t\t__s, __pos, this->size());\n \treturn __pos;\n       }\n \n@@ -575,7 +577,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       at(size_type __n) const\n       {\n \tif (__n >= this->size())\n-\t  std::__throw_out_of_range(__N(\"__versa_string::at\"));\n+\t  std::__throw_out_of_range_fmt(__N(\"__versa_string::at: __n \"\n+\t\t\t\t\t    \"(which is %zu) >= this->size() \"\n+\t\t\t\t\t    \"(which is %zu)\"),\n+\t\t\t\t\t__n, this->size());\n \treturn this->_M_data()[__n];\n       }\n \n@@ -594,7 +599,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       at(size_type __n)\n       {\n \tif (__n >= this->size())\n-\t  std::__throw_out_of_range(__N(\"__versa_string::at\"));\n+\t  std::__throw_out_of_range_fmt(__N(\"__versa_string::at: __n \"\n+\t\t\t\t\t    \"(which is %zu) >= this->size() \"\n+\t\t\t\t\t    \"(which is %zu)\"),\n+\t\t\t\t\t__n, this->size());\n \tthis->_M_leak();\n \treturn this->_M_data()[__n];\n       }"}, {"sha": "138ad311ed7c67a7f102d4a0d32ef0306ffcdafb", "filename": "libstdc++-v3/include/profile/array", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -138,7 +138,10 @@ namespace __profile\n       at(size_type __n)\n       {\n \tif (__n >= _Nm)\n-\t  std::__throw_out_of_range(__N(\"array::at\"));\n+\t  std::__throw_out_of_range_fmt(__N(\"array::at: __n \"\n+\t\t\t\t            \"(which is %zu) >= _Nm \"\n+\t\t\t\t\t    \"(which is %zu)\"),\n+\t\t\t\t\t__n, _Nm);\n \treturn _AT_Type::_S_ref(_M_elems, __n);\n       }\n \n@@ -148,7 +151,9 @@ namespace __profile\n \t// Result of conditional expression must be an lvalue so use\n \t// boolean ? lvalue : (throw-expr, lvalue)\n \treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n-\t  : (std::__throw_out_of_range(__N(\"array::at\")),\n+\t  : (std::__throw_out_of_range_fmt(__N(\"array::at: __n (which is %zu) \"\n+\t\t\t\t\t       \">= _Nm (which is %zu)\"),\n+\t\t\t\t\t   __n, _Nm),\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n "}, {"sha": "673d0e4b18d78c2447e0099b00bb1308cec98dd9", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -180,7 +180,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       at(size_type __n)\n       {\n \tif (__n >= _Nm)\n-\t  std::__throw_out_of_range(__N(\"array::at\"));\n+\t  std::__throw_out_of_range_fmt(__N(\"array::at: __n (which is %zu) \"\n+\t\t\t\t\t    \">= _Nm (which is %zu)\"),\n+\t\t\t\t\t__n, _Nm);\n \treturn _AT_Type::_S_ref(_M_elems, __n);\n       }\n \n@@ -190,7 +192,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t// Result of conditional expression must be an lvalue so use\n \t// boolean ? lvalue : (throw-expr, lvalue)\n \treturn __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)\n-\t  : (std::__throw_out_of_range(__N(\"array::at\")),\n+\t  : (std::__throw_out_of_range_fmt(__N(\"array::at: __n (which is %zu) \"\n+\t\t\t\t\t       \">= _Nm (which is %zu)\"),\n+\t\t\t\t\t   __n, _Nm),\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n "}, {"sha": "708a434af9e178afda26e2136abcfce5a443b214", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -752,6 +752,26 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Base_bitset<_GLIBCXX_BITSET_WORDS(_Nb)> _Base;\n       typedef unsigned long _WordT;\n \n+      template<class _CharT, class _Traits, class _Alloc>\n+      void\n+      _M_check_initial_position(const std::basic_string<_CharT, _Traits, _Alloc>& __s,\n+\t\t\t\tsize_t __position) const\n+      {\n+\tif (__position > __s.size())\n+\t  __throw_out_of_range_fmt(__N(\"bitset::bitset: __position \"\n+\t\t\t\t       \"(which is %zu) > __s.size() \"\n+\t\t\t\t       \"(which is %zu)\"),\n+\t\t\t\t   __position, __s.size());\n+      }\n+\n+      void _M_check(size_t __position, const char *__s) const\n+      {\n+\tif (__position >= _Nb)\n+\t  __throw_out_of_range_fmt(__N(\"%s: __position (which is %zu) \"\n+\t\t\t\t       \">= _Nb (which is %zu)\"),\n+\t\t\t\t   __s, __position, _Nb);\n+      }\n+\n       void\n       _M_do_sanitize() _GLIBCXX_NOEXCEPT\n       { \n@@ -867,9 +887,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t       size_t __position = 0)\n \t: _Base()\n \t{\n-\t  if (__position > __s.size())\n-\t    __throw_out_of_range(__N(\"bitset::bitset initial position \"\n-\t\t\t\t     \"not valid\"));\n+\t  _M_check_initial_position(__s, __position);\n \t  _M_copy_from_string(__s, __position,\n \t\t\t      std::basic_string<_CharT, _Traits, _Alloc>::npos,\n \t\t\t      _CharT('0'), _CharT('1'));\n@@ -890,9 +908,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t       size_t __position, size_t __n)\n \t: _Base()\n \t{\n-\t  if (__position > __s.size())\n-\t    __throw_out_of_range(__N(\"bitset::bitset initial position \"\n-\t\t\t\t     \"not valid\"));\n+\t  _M_check_initial_position(__s, __position);\n \t  _M_copy_from_string(__s, __position, __n, _CharT('0'), _CharT('1'));\n \t}\n \n@@ -904,9 +920,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t       _CharT __zero, _CharT __one = _CharT('1'))\n \t: _Base()\n \t{\n-\t  if (__position > __s.size())\n-\t    __throw_out_of_range(__N(\"bitset::bitset initial position \"\n-\t\t\t\t     \"not valid\"));\n+\t  _M_check_initial_position(__s, __position);\n \t  _M_copy_from_string(__s, __position, __n, __zero, __one);\n \t}\n \n@@ -1067,8 +1081,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       bitset<_Nb>&\n       set(size_t __position, bool __val = true)\n       {\n-\tif (__position >= _Nb)\n-\t  __throw_out_of_range(__N(\"bitset::set\"));\n+\tthis->_M_check(__position, __N(\"bitset::set\"));\n \treturn _Unchecked_set(__position, __val);\n       }\n \n@@ -1092,8 +1105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       bitset<_Nb>&\n       reset(size_t __position)\n       {\n-\tif (__position >= _Nb)\n-\t  __throw_out_of_range(__N(\"bitset::reset\"));\n+\tthis->_M_check(__position, __N(\"bitset::reset\"));\n \treturn _Unchecked_reset(__position);\n       }\n       \n@@ -1116,8 +1128,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       bitset<_Nb>&\n       flip(size_t __position)\n       {\n-\tif (__position >= _Nb)\n-\t  __throw_out_of_range(__N(\"bitset::flip\"));\n+\tthis->_M_check(__position, __N(\"bitset::flip\"));\n \treturn _Unchecked_flip(__position);\n       }\n       \n@@ -1302,8 +1313,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       bool\n       test(size_t __position) const\n       {\n-\tif (__position >= _Nb)\n-\t  __throw_out_of_range(__N(\"bitset::test\"));\n+\tthis->_M_check(__position, __N(\"bitset::test\"));\n \treturn _Unchecked_test(__position);\n       }\n "}, {"sha": "7dda9483b7bdeaac8beba95b3a9373fa86a890c9", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -42,6 +42,7 @@ sources = \\\n \trandom.cc \\\n \tregex.cc  \\\n \tshared_ptr.cc \\\n+\tsnprintf_lite.cc \\\n \tsystem_error.cc \\\n \tthread.cc\n "}, {"sha": "83b7bd155b9263d072c085e949a50c23effb9320", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -70,7 +70,8 @@ libc__11convenience_la_LIBADD =\n am__objects_1 = chrono.lo condition_variable.lo debug.lo \\\n \tfunctexcept.lo functional.lo future.lo hash_c++0x.lo \\\n \thashtable_c++0x.lo limits.lo mutex.lo placeholders.lo \\\n-\trandom.lo regex.lo shared_ptr.lo system_error.lo thread.lo\n+\trandom.lo regex.lo shared_ptr.lo snprintf_lite.lo \\\n+\tsystem_error.lo thread.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = fstream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.lo wstring-inst.lo\n am_libc__11convenience_la_OBJECTS = $(am__objects_1) $(am__objects_2)\n@@ -324,6 +325,7 @@ sources = \\\n \trandom.cc \\\n \tregex.cc  \\\n \tshared_ptr.cc \\\n+\tsnprintf_lite.cc \\\n \tsystem_error.cc \\\n \tthread.cc\n "}, {"sha": "b18f8ad5706840b7db64b29bbdce03c6565c414b", "filename": "libstdc++-v3/src/c++11/functexcept.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -31,6 +31,7 @@\n #include <future>\n #include <functional>\n #include <bits/regex_error.h>\n+#include <stdarg.h>\n \n #ifdef _GLIBCXX_USE_NLS\n # include <libintl.h>\n@@ -39,6 +40,12 @@\n # define _(msgid)   (msgid)\n #endif\n \n+namespace __gnu_cxx\n+{\n+  int __snprintf_lite(char *__buf, size_t __bufsize, const char *__fmt,\n+\t\t      va_list __ap);\n+}\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -79,6 +86,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __throw_out_of_range(const char* __s __attribute__((unused)))\n   { _GLIBCXX_THROW_OR_ABORT(out_of_range(_(__s))); }\n \n+  void\n+  __throw_out_of_range_fmt(const char* __fmt, ...)\n+  {\n+    const size_t __len = __builtin_strlen(__fmt);\n+    // We expect at most 2 numbers, and 1 short string. The additional\n+    // 512 bytes should provide more than enough space for expansion.\n+    const size_t __alloca_size = __len + 512;\n+    char *const __s = static_cast<char*>(__builtin_alloca(__alloca_size));\n+    va_list __ap;\n+\n+    va_start(__ap, __fmt);\n+    __gnu_cxx::__snprintf_lite(__s, __alloca_size, __fmt, __ap);\n+    _GLIBCXX_THROW_OR_ABORT(out_of_range(_(__s)));\n+    va_end(__ap);  // Not reached.\n+  }\n+\n   void\n   __throw_runtime_error(const char* __s __attribute__((unused)))\n   { _GLIBCXX_THROW_OR_ABORT(runtime_error(_(__s))); }"}, {"sha": "9509c4210f9511773f59c00c6f73a20884020c79", "filename": "libstdc++-v3/src/c++11/snprintf_lite.cc", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsnprintf_lite.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsnprintf_lite.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsnprintf_lite.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -0,0 +1,152 @@\n+// Debugging support -*- C++ -*-\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of GCC.\n+//\n+// GCC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// GCC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <stdarg.h>\n+#include <bits/functexcept.h>\n+#include <bits/locale_facets.h>\n+\n+namespace std {\n+  template<typename _CharT, typename _ValueT>\n+  int\n+  __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,\n+                ios_base::fmtflags __flags, bool __dec);\n+}\n+\n+namespace __gnu_cxx {\n+\n+  // Private helper to throw logic error if snprintf_lite runs out\n+  // of space (which is not expected to ever happen).\n+  // NUL-terminates __buf.\n+  void\n+  __throw_insufficient_space(const char *__buf, const char *__bufend)\n+    __attribute__((__noreturn__));\n+\n+  void\n+  __throw_insufficient_space(const char *__buf, const char *__bufend)\n+  {\n+    // Include space for trailing NUL.\n+    const size_t __len = __bufend - __buf + 1;\n+\n+    const char __err[] = \"not enough space for format expansion \"\n+      \"(Please submit full bug report at http://gcc.gnu.org/bugs.html):\\n    \";\n+    const size_t __errlen = sizeof(__err) - 1;\n+\n+    char *const __e\n+      = static_cast<char*>(__builtin_alloca(__errlen + __len));\n+\n+    __builtin_memcpy(__e, __err, __errlen);\n+    __builtin_memcpy(__e + __errlen, __buf, __len - 1);\n+    __e[__errlen + __len - 1] = '\\0';\n+    std::__throw_logic_error(__e);\n+  }\n+\n+\n+  // Private routine to append decimal representation of VAL to the given\n+  // BUFFER, but not more than BUFSIZE characters.\n+  // Does not NUL-terminate the output buffer.\n+  // Returns number of characters appended, or -1 if BUFSIZE is too small.\n+  int __concat_size_t(char *__buf, size_t __bufsize, size_t __val)\n+  {\n+    // Long enough for decimal representation.\n+    int __ilen = 3 * sizeof(__val);\n+    char *__cs = static_cast<char*>(__builtin_alloca(__ilen));\n+    size_t __len = std::__int_to_char(__cs + __ilen, __val,\n+\t\t\t\t      std::__num_base::_S_atoms_out,\n+\t\t\t\t      std::ios_base::dec, true);\n+    if (__bufsize < __len)\n+      return -1;\n+\n+    __builtin_memcpy(__buf, __cs + __ilen - __len, __len);\n+    return __len;\n+  }\n+\n+\n+  // Private routine to print into __buf arguments according to format,\n+  // not to exceed __bufsize.\n+  // Only '%%', '%s' and '%zu' format specifiers are understood.\n+  // Returns number of characters printed (excluding terminating NUL).\n+  // Always NUL-terminates __buf.\n+  // Throws logic_error on insufficient space.\n+  int __snprintf_lite(char *__buf, size_t __bufsize, const char *__fmt,\n+\t\t      va_list __ap)\n+  {\n+    char *__d = __buf;\n+    const char *__s = __fmt;\n+    const char *const __limit = __d + __bufsize - 1;  // Leave space for NUL.\n+\n+    while (__s[0] != '\\0' && __d < __limit)\n+      {\n+\tif (__s[0] == '%')\n+\t  switch (__s[1])\n+\t    {\n+\t    default:  // Stray '%'. Just print it.\n+\t      break;\n+\t    case '%':  // '%%'\n+\t      __s += 1;\n+\t      break;\n+\t    case 's':  // '%s'.\n+\t      {\n+\t\tconst char *__v = va_arg(__ap, const char *);\n+\n+\t\twhile (__v[0] != '\\0' && __d < __limit)\n+\t\t  *__d++ = *__v++;\n+\n+\t\tif (__v[0] != '\\0')\n+\t\t  // Not enough space for __fmt expansion.\n+\t\t  __throw_insufficient_space(__buf, __d);\n+\n+\t\t__s += 2;  // Step over %s.\n+\t\tcontinue;\n+\t      }\n+\t      break;\n+\t    case 'z':\n+\t      if (__s[2] == 'u')  // '%zu' -- expand next size_t arg.\n+\t\t{\n+\t\t  const int __len = __concat_size_t(__d, __limit - __d,\n+\t\t\t\t\t\t    va_arg(__ap, size_t));\n+\t\t  if (__len > 0)\n+\t\t    __d += __len;\n+\t\t  else\n+\t\t    // Not enough space for __fmt expansion.\n+\t\t    __throw_insufficient_space(__buf, __d);\n+\n+\t\t  __s += 3;  // Step over %zu\n+\t\t  continue;\n+\t\t}\n+\t      // Stray '%zX'. Just print it.\n+\t      break;\n+\t    }\n+\t*__d++ = *__s++;\n+      }\n+\n+    if (__s[0] != '\\0')\n+      // Not enough space for __fmt expansion.\n+      __throw_insufficient_space(__buf, __d);\n+\n+    *__d = '\\0';\n+    return __d - __buf;\n+  }\n+\n+}  // __gnu_cxx"}, {"sha": "6667629e149db31c463de595dfcb8a225218bcca", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_debug_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_debug_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -28,6 +28,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 266 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 275 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 283 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 271 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 280 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 288 }"}, {"sha": "ca6f9f84e825667db5bb653de120053853be86e7", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -28,6 +28,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 270 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 279 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 287 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 274 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 283 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 291 }"}, {"sha": "a8e0624ee6e03b5c4015a5d72f678281a6b2f9ae", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_debug_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -23,4 +23,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 300 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 305 }"}, {"sha": "0648bc1176e614344cf204686e544cff87c9fd03", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -23,4 +23,4 @@\n \n typedef std::tuple_element<1, std::array<int, 1>>::type type;\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 316 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 320 }"}, {"sha": "e5917b81f604cc57b659aac524a36de477f507bb", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1755 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1758 }\n \n #include <deque>\n "}, {"sha": "fd83c0e14939d731d05e91ca48e80a657eae60aa", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1688 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1691 }\n \n #include <deque>\n "}, {"sha": "4dc6e8dec737292b20f3b7ef1a5a44815c899929", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1688 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1691 }\n \n #include <deque>\n #include <utility>"}, {"sha": "dbbfbaa5c6dc6e8be7f96a817d7fd1d8cdb3aba0", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1839 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1842 }\n \n #include <deque>\n \n@@ -32,4 +32,3 @@ void f()\n   std::deque<A> d;\n   d.insert(d.begin(), 10, 1);\n }\n-"}, {"sha": "b8a6621b33919989b1d0fd27a63f91d79036ecd5", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1302 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1305 }\n \n #include <vector>\n "}, {"sha": "ec3aa5a62e896da42a53866689ae7fc562cc02c3", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1228 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1231 }\n \n #include <vector>\n "}, {"sha": "5c7d436ad344449a213283c19573d7c7d6bc74ea", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1228 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1231 }\n \n #include <vector>\n #include <utility>"}, {"sha": "2daaf52719738a137f6d36bd0afe812b0e1b4978", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1343 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1346 }\n \n #include <vector>\n "}, {"sha": "ca311797bad2975b0e5cbb8a79d8973c1c0c9aba", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9779c871afc648329500747748c70b59b47abdf7/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=9779c871afc648329500747748c70b59b47abdf7", "patch": "@@ -47,22 +47,12 @@ namespace __gnu_test\n       const typename distribution_type::param_type p(0, __max_size);\n       size_type random = generator(p);\n       if (random < distribution.min() || random > distribution.max())\n-\t{\n-\t  std::string __s(\"setup_base::generate\");\n-\t  __s += \"\\n\";\n-\t  __s += \"random number generated is: \";\n-\t  char buf[40];\n-\t  __builtin_sprintf(buf, \"%lu\", (unsigned long)random);\n-\t  __s += buf;\n-\t  __s += \" on range [\";\n-\t  __builtin_sprintf(buf, \"%lu\", (unsigned long)distribution.min());\n-\t  __s += buf;\n-\t  __s += \", \";\n-\t  __builtin_sprintf(buf, \"%lu\", (unsigned long)distribution.max());\n-\t  __s += buf;\n-\t  __s += \"]\\n\";\n-\t  std::__throw_out_of_range(__s.c_str());\n-\t}\n+\tstd::__throw_out_of_range_fmt(__N(\"setup_base::generate\\n\"\n+\t\t\t\t\t  \"random number generated is: %zu \"\n+\t\t\t\t\t  \"out of range [%zu, %zu]\\n\"),\n+\t\t\t\t      (size_t)random,\n+\t\t\t\t      (size_t)distribution.min(),\n+\t\t\t\t      (size_t)distribution.max());\n       return random;\n     }\n "}]}