{"sha": "4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlZjhlNGQ4Yzg5MDFkYjBmYTIxYzRkNDliN2E4NTFiZmY0YWM5YQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-23T08:16:42Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-23T08:16:42Z"}, "message": "[nvptx, libgomp] Fix assert (!s->map->active) in map_fini\n\nThere are currently two situations where this assert triggers:\n...\nlibgomp/plugin/plugin-nvptx.c: map_fini: Assertion `!s->map->active' failed.\n...\n\nFirst, in abort-1.c, a parallel region triggering an abort:\n...\nint\nmain (void)\n{\n  #pragma acc parallel\n  abort ();\n\n  return 0;\n}\n...\n\nThe abort is detected in nvptx_exec as the CUDA_ERROR_ILLEGAL_INSTRUCTION\nreturn status of the cuStreamSynchronize call after kernel launch, which is\nthen handled by calling non-returning function GOMP_PLUGIN_fatal.\nConsequently, the map_pop in nvptx_exec that in case of cuStreamSynchronize\nsuccess would remove or inactive the element added by the map_push earlier in\nnvptx_exec, does not trigger.  With the element no longer active, but still\nmarked active and a member of s->map,  we run into the assert during\nGOMP_OFFLOAD_fini_device, which is triggered from atexit handler\ngomp_target_fini (which is triggered by the GOMP_PLUGIN_fatal mentioned above\ncalling exit).\n\nSecond, in pr88941.c, an async parallel region without wait:\n...\nint\nmain (void)\n{\n  #pragma acc parallel async\n  ;\n\n  /* no #pragma acc wait */\n  return 0;\n}\n...\n\nBecause nvptx_exec is handling an async region, it does not call map_pop for\nthe element added by map_push, but schedules an kernel execution completion\nevent to call map_pop.  Again, we run into the assert during\nGOMP_OFFLOAD_fini_device, which is triggered from atexit handler\ngomp_target_fini, but the exit in this case is triggered by returning from main.\nSo either the kernel is still running, or the kernel has completed but the\ncorresponding event that is supposed to call map_pop is stuck in the event\nqueue, waiting for an event_gc.\n\nFix this by removing the assert, and skipping the freeing of device memory if\nthe map is still marked active (though in the async case, this is more a\nworkaround than an fix).\n\n2019-01-23  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/88941\n\tPR target/88939\n\t* plugin/plugin-nvptx.c (cuda_map_destroy): Handle map->active case.\n\t(map_fini): Remove \"assert (!s->map->active)\".\n\t* testsuite/libgomp.oacc-c-c++-common/pr88941.c: New test.\n\nFrom-SVN: r268177", "tree": {"sha": "e8f6f4c73e7afd5d86bed89020eda4b89054f71f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f6f4c73e7afd5d86bed89020eda4b89054f71f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "30fb11d0290904d8a509cd7d0ff562af3e20e5d2", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "patch": "@@ -1,3 +1,11 @@\n+2019-01-23  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/88941\n+\tPR target/88939\n+\t* plugin/plugin-nvptx.c (cuda_map_destroy): Handle map->active case.\n+\t(map_fini): Remove \"assert (!s->map->active)\".\n+\t* testsuite/libgomp.oacc-c-c++-common/pr88941.c: New test.\n+\n 2019-01-23  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/87835"}, {"sha": "4a67191932e3101e94fcdfdcef4e1a2691c2b5f2", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "patch": "@@ -237,7 +237,31 @@ cuda_map_create (size_t size)\n static void\n cuda_map_destroy (struct cuda_map *map)\n {\n-  CUDA_CALL_ASSERT (cuMemFree, map->d);\n+  if (map->active)\n+    /* Possible reasons for the map to be still active:\n+       - the associated async kernel might still be running.\n+       - the associated async kernel might have finished, but the\n+         corresponding event that should trigger the pop_map has not been\n+\t processed by event_gc.\n+       - the associated sync kernel might have aborted\n+\n+       The async cases could happen if the user specified an async region\n+       without adding a corresponding wait that is guaranteed to be executed\n+       (before returning from main, or in an atexit handler).\n+       We do not want to deallocate a device pointer that is still being\n+       used, so skip it.\n+\n+       In the sync case, the device pointer is no longer used, but deallocating\n+       it using cuMemFree will not succeed, so skip it.\n+\n+       TODO: Handle this in a more constructive way, by f.i. waiting for streams\n+       to finish before de-allocating them (PR88981), or by ensuring the CUDA\n+       lib atexit handler is called before rather than after the libgomp plugin\n+       atexit handler (PR83795).  */\n+    ;\n+  else\n+    CUDA_CALL_ASSERT (cuMemFree, map->d);\n+\n   free (map);\n }\n \n@@ -268,7 +292,6 @@ static bool\n map_fini (struct ptx_stream *s)\n {\n   assert (s->map->next == NULL);\n-  assert (!s->map->active);\n \n   cuda_map_destroy (s->map);\n "}, {"sha": "e31bb527df332e87474aa7ed0554664c40600be7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr88941.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr88941.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr88941.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr88941.c?ref=4fef8e4d8c8901db0fa21c4d49b7a851bff4ac9a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+\n+#pragma acc parallel async\n+  ;\n+\n+  /* no #pragma acc wait */\n+  return 0;\n+}\n+"}]}