{"sha": "f4c0a30368a46ab95f266646085ac4d65c61725d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjMGEzMDM2OGE0NmFiOTVmMjY2NjQ2MDg1YWM0ZDY1YzYxNzI1ZA==", "commit": {"author": {"name": "Carlos O'Donell", "email": "carlos@codesourcery.com", "date": "2006-11-13T17:25:59Z"}, "committer": {"name": "Carlos O'Donell", "email": "carlos@gcc.gnu.org", "date": "2006-11-13T17:25:59Z"}, "message": "gcc.c: Organize search path variables into $prefix relative, and well-known native.\n\ngcc/\n\n2006-11-13  Carlos O'Donell  <carlos@codesourcery.com>\n\t    Mark Mitchell  <mark@codesourcery.com>\n\n\t* gcc.c: Organize search path variables into $prefix relative,\n\tand well-known native. Add comments.\n\t(add_sysrooted_prefix): Add comment.\n\t(process_command): If !gcc_exec_prefix add $prefix based paths.\n\tIf *cross_compile == '0', add native well-known paths.\n\tAssert tooldir_base_prefix is always relative.\n\t(main): If print_search_dirs, and if gcc_exec_prefix is set,\n\tuse this value for 'install:' path.\n\t* Makefile.in: Add GCC_EXEC_PREFIX to generated site.exp.\n\ngcc/testsuite/\n\n2006-11-13  Carlos O'Donell  <carlos@codesourcery.com>\n\n\t* lib/c-torture.exp: Use target-libpath.exp.\n\t* lib/target-libpath.exp (set_ld_library_path_env_vars): If present,\n\tset GCC_EXEC_PREFIX env var from global variable of same name.\n\n\nCo-Authored-By: Mark Mitchell <mark@codesourcery.com>\n\nFrom-SVN: r118765", "tree": {"sha": "b2b381f6bd3379450a720433fc3f23f49629711b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2b381f6bd3379450a720433fc3f23f49629711b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4c0a30368a46ab95f266646085ac4d65c61725d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c0a30368a46ab95f266646085ac4d65c61725d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4c0a30368a46ab95f266646085ac4d65c61725d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c0a30368a46ab95f266646085ac4d65c61725d/comments", "author": null, "committer": null, "parents": [{"sha": "8fbbf354fc9230d584c96f57ac11e708d6163b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fbbf354fc9230d584c96f57ac11e708d6163b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fbbf354fc9230d584c96f57ac11e708d6163b57"}], "stats": {"total": 174, "additions": 110, "deletions": 64}, "files": [{"sha": "304eda7b0c31afc9a9a6fa6f778bbe7697b8a847", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4c0a30368a46ab95f266646085ac4d65c61725d", "patch": "@@ -1,3 +1,16 @@\n+2006-11-13  Carlos O'Donell  <carlos@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.c: Organize search path variables into $prefix relative,\n+\tand well-known native. Add comments.\n+\t(add_sysrooted_prefix): Add comment.\n+\t(process_command): If !gcc_exec_prefix add $prefix based paths.\n+\tIf *cross_compile == '0', add native well-known paths.\n+\tAssert tooldir_base_prefix is always relative.\n+\t(main): If print_search_dirs, and if gcc_exec_prefix is set,\n+\tuse this value for 'install:' path.\n+\t* Makefile.in: Add GCC_EXEC_PREFIX to generated site.exp.\n+\n 2006-11-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c: Fix a typo in comment."}, {"sha": "8a499d155984ca92e91ff75202b9f4532e7b8a6f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f4c0a30368a46ab95f266646085ac4d65c61725d", "patch": "@@ -3986,6 +3986,7 @@ site.exp: ./config.status Makefile\n \t@echo \"set HOSTCFLAGS \\\"$(CFLAGS)\\\"\" >> ./tmp0\n \t@echo \"set TESTING_IN_BUILD_TREE 1\" >> ./tmp0\n \t@echo \"set HAVE_LIBSTDCXX_V3 1\" >> ./tmp0\n+\t@echo \"set GCC_EXEC_PREFIX \\\"$(libdir)/gcc/\\\"\" >> ./tmp0\n # If newlib has been configured, we need to pass -B to gcc so it can find\n # newlib's crt0.o if it exists.  This will cause a \"path prefix not used\"\n # message if it doesn't, but the testsuite is supposed to ignore the message -"}, {"sha": "76b6de6697862461cb77fbc014f28d8244b4c9de", "filename": "gcc/gcc.c", "status": "modified", "additions": 70, "deletions": 64, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f4c0a30368a46ab95f266646085ac4d65c61725d", "patch": "@@ -1472,25 +1472,33 @@ static const char *gcc_libexec_prefix;\n #define MD_STARTFILE_PREFIX_1 \"\"\n #endif\n \n+/* These directories are locations set at configure-time based on the\n+   --prefix option provided to configure.  Their initializers are\n+   defined in Makefile.in.  These paths are not *directly* used when\n+   gcc_exec_prefix is set because, in that case, we know where the\n+   compiler has been installed, and use paths relative to that\n+   location instead.  */\n static const char *const standard_exec_prefix = STANDARD_EXEC_PREFIX;\n+static const char *const standard_libexec_prefix = STANDARD_LIBEXEC_PREFIX;\n+static const char *const standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n+static const char *const standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;\n+\n+/* For native compilers, these are well-known paths containing\n+   components that may be provided by the system.  For cross\n+   compilers, these paths are not used.  */\n static const char *const standard_exec_prefix_1 = \"/usr/libexec/gcc/\";\n static const char *const standard_exec_prefix_2 = \"/usr/lib/gcc/\";\n static const char *md_exec_prefix = MD_EXEC_PREFIX;\n-\n static const char *md_startfile_prefix = MD_STARTFILE_PREFIX;\n static const char *md_startfile_prefix_1 = MD_STARTFILE_PREFIX_1;\n-static const char *const standard_startfile_prefix = STANDARD_STARTFILE_PREFIX;\n-static const char *const standard_startfile_prefix_1\n+static const char *const standard_startfile_prefix_1 \n   = STANDARD_STARTFILE_PREFIX_1;\n static const char *const standard_startfile_prefix_2\n   = STANDARD_STARTFILE_PREFIX_2;\n \n+/* A relative path to be used in finding the location of tools\n+   relative to the driver.  */\n static const char *const tooldir_base_prefix = TOOLDIR_BASE_PREFIX;\n-static const char *tooldir_prefix;\n-\n-static const char *const standard_bindir_prefix = STANDARD_BINDIR_PREFIX;\n-\n-static const char *standard_libexec_prefix = STANDARD_LIBEXEC_PREFIX;\n \n /* Subdirectory to use for locating libraries.  Set by\n    set_multilib_dir based on the compilation options.  */\n@@ -2749,6 +2757,7 @@ add_prefix (struct path_prefix *pprefix, const char *prefix,\n }\n \n /* Same as add_prefix, but prepending target_system_root to prefix.  */\n+/* The target_system_root prefix has been relocated by gcc_exec_prefix.  */\n static void\n add_sysrooted_prefix (struct path_prefix *pprefix, const char *prefix,\n \t\t      const char *component,\n@@ -3278,6 +3287,7 @@ process_command (int argc, const char **argv)\n   int is_modify_target_name;\n   unsigned int j;\n #endif\n+  const char *tooldir_prefix;\n \n   GET_ENVIRONMENT (gcc_exec_prefix, \"GCC_EXEC_PREFIX\");\n \n@@ -3383,10 +3393,18 @@ process_command (int argc, const char **argv)\n       gcc_libexec_prefix = make_relative_prefix (tmp_prefix,\n \t\t\t\t\t\t standard_exec_prefix,\n \t\t\t\t\t\t standard_libexec_prefix);\n+\n+      /* The path is unrelocated, so fallback to the original setting.  */\n+      if (!gcc_libexec_prefix)\n+\tgcc_libexec_prefix = standard_libexec_prefix;\n+\n       free (tmp_prefix);\n     }\n #else\n #endif\n+  /* From this point onward, gcc_exec_prefix is non-null if the toolchain\n+     is relocated. The toolchain was either relocated using GCC_EXEC_PREFIX\n+     or an automatically created GCC_EXEC_PREFIX from argv[0].  */\n \n   if (gcc_exec_prefix)\n     {\n@@ -3936,62 +3954,50 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n       use_pipes = 0;\n     }\n \n-  /* Set up the search paths before we go looking for config files.  */\n+  /* Set up the search paths.  We add directories that we expect to\n+     contain GNU Toolchain components before directories specified by\n+     the machine description so that we will find GNU components (like\n+     the GNU assembler) before those of the host system.  */ \n \n-  /* These come before the md prefixes so that we will find gcc's subcommands\n-     (such as cpp) rather than those of the host system.  */\n-  /* Use 2 as fourth arg meaning try just the machine as a suffix,\n-     as well as trying the machine and the version.  */\n+  /* If we don't know where the toolchain has been installed, use the\n+     configured-in locations.  */\n+  if (!gcc_exec_prefix)\n+    {\n #ifndef OS2\n-  add_prefix (&exec_prefixes, standard_libexec_prefix, \"GCC\",\n-\t      PREFIX_PRIORITY_LAST, 1, 0);\n-  add_prefix (&exec_prefixes, standard_libexec_prefix, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 2, 0);\n-  add_prefix (&exec_prefixes, standard_exec_prefix, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 2, 0);\n-  add_prefix (&exec_prefixes, standard_exec_prefix_1, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 2, 0);\n-  add_prefix (&exec_prefixes, standard_exec_prefix_2, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 2, 0);\n+      add_prefix (&exec_prefixes, standard_libexec_prefix, \"GCC\",\n+\t\t  PREFIX_PRIORITY_LAST, 1, 0);\n+      add_prefix (&exec_prefixes, standard_libexec_prefix, \"BINUTILS\",\n+\t\t  PREFIX_PRIORITY_LAST, 2, 0);\n+      add_prefix (&exec_prefixes, standard_exec_prefix, \"BINUTILS\",\n+\t\t  PREFIX_PRIORITY_LAST, 2, 0);\n #endif\n+      add_prefix (&startfile_prefixes, standard_exec_prefix, \"BINUTILS\",\n+\t\t  PREFIX_PRIORITY_LAST, 1, 0);\n+    }\n \n-  add_prefix (&startfile_prefixes, standard_exec_prefix, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 1, 0);\n-  add_prefix (&startfile_prefixes, standard_exec_prefix_2, \"BINUTILS\",\n-\t      PREFIX_PRIORITY_LAST, 1, 0);\n+  /* If not cross-compiling, search well-known system locations.  */\n+  if (*cross_compile == '0')\n+    {\n+#ifndef OS2\n+      add_prefix (&exec_prefixes, standard_exec_prefix_1, \"BINUTILS\",\n+\t\t  PREFIX_PRIORITY_LAST, 2, 0);\n+      add_prefix (&exec_prefixes, standard_exec_prefix_2, \"BINUTILS\",\n+\t\t  PREFIX_PRIORITY_LAST, 2, 0);\n+#endif\n+      add_prefix (&startfile_prefixes, standard_exec_prefix_2, \"BINUTILS\",\n+\t\t  PREFIX_PRIORITY_LAST, 1, 0);\n+    }\n \n+  gcc_assert (!IS_ABSOLUTE_PATH (tooldir_base_prefix));\n   tooldir_prefix = concat (tooldir_base_prefix, spec_machine,\n \t\t\t   dir_separator_str, NULL);\n \n-  /* If tooldir is relative, base it on exec_prefixes.  A relative\n-     tooldir lets us move the installed tree as a unit.\n-\n-     If GCC_EXEC_PREFIX is defined, then we want to add two relative\n-     directories, so that we can search both the user specified directory\n-     and the standard place.  */\n-\n-  if (!IS_ABSOLUTE_PATH (tooldir_prefix))\n-    {\n-      if (gcc_exec_prefix)\n-\t{\n-\t  char *gcc_exec_tooldir_prefix\n-\t    = concat (gcc_exec_prefix, spec_machine, dir_separator_str,\n-\t\t      spec_version, dir_separator_str, tooldir_prefix, NULL);\n-\n-\t  add_prefix (&exec_prefixes,\n-\t\t      concat (gcc_exec_tooldir_prefix, \"bin\",\n-\t\t\t      dir_separator_str, NULL),\n-\t\t      NULL, PREFIX_PRIORITY_LAST, 0, 0);\n-\t  add_prefix (&startfile_prefixes,\n-\t\t      concat (gcc_exec_tooldir_prefix, \"lib\",\n-\t\t\t      dir_separator_str, NULL),\n-\t\t      NULL, PREFIX_PRIORITY_LAST, 0, 1);\n-\t}\n-\n-      tooldir_prefix = concat (standard_exec_prefix, spec_machine,\n-\t\t\t       dir_separator_str, spec_version,\n-\t\t\t       dir_separator_str, tooldir_prefix, NULL);\n-    }\n+  /* Look for tools relative to the location from which the driver is\n+     running, or, if that is not available, the configured prefix.  */\n+  tooldir_prefix\n+    = concat (gcc_exec_prefix ? gcc_exec_prefix : standard_exec_prefix,\n+\t      spec_machine, dir_separator_str,\n+\t      spec_version, dir_separator_str, tooldir_prefix, NULL);\n \n   add_prefix (&exec_prefixes,\n \t      concat (tooldir_prefix, \"bin\", dir_separator_str, NULL),\n@@ -6314,18 +6320,16 @@ main (int argc, char **argv)\n \t\t\t      PREFIX_PRIORITY_LAST, 0, 1);\n       else if (*cross_compile == '0')\n \t{\n-\t  if (gcc_exec_prefix)\n-\t    add_prefix (&startfile_prefixes,\n-\t\t\tconcat (gcc_exec_prefix, machine_suffix,\n-\t\t\t\tstandard_startfile_prefix, NULL),\n-\t\t\tNULL, PREFIX_PRIORITY_LAST, 0, 1);\n \t  add_prefix (&startfile_prefixes,\n-\t\t      concat (standard_exec_prefix,\n-\t\t\t      machine_suffix,\n+\t\t      concat (gcc_exec_prefix \n+\t\t\t      ? gcc_exec_prefix : standard_exec_prefix, \n+\t\t\t      machine_suffix, \n \t\t\t      standard_startfile_prefix, NULL),\n \t\t      NULL, PREFIX_PRIORITY_LAST, 0, 1);\n \t}\n \n+      /* Sysrooted prefixes are relocated because target_system_root is\n+\t also relocated by gcc_exec_prefix.  */\n       if (*standard_startfile_prefix_1)\n  \tadd_sysrooted_prefix (&startfile_prefixes,\n \t\t\t      standard_startfile_prefix_1, \"BINUTILS\",\n@@ -6369,7 +6373,9 @@ main (int argc, char **argv)\n \n   if (print_search_dirs)\n     {\n-      printf (_(\"install: %s%s\\n\"), standard_exec_prefix, machine_suffix);\n+      printf (_(\"install: %s%s\\n\"),\n+\t      gcc_exec_prefix ? gcc_exec_prefix : standard_exec_prefix,\n+\t      gcc_exec_prefix ? \"\" : machine_suffix);\n       printf (_(\"programs: %s\\n\"),\n \t      build_search_list (&exec_prefixes, \"\", false, false));\n       printf (_(\"libraries: %s\\n\"),"}, {"sha": "b0dc1fe4d089e9ba37fa6c689364a169f533eb0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4c0a30368a46ab95f266646085ac4d65c61725d", "patch": "@@ -1,3 +1,9 @@\n+2006-11-13  Carlos O'Donell  <carlos@codesourcery.com>\n+\n+\t* lib/c-torture.exp: Use target-libpath.exp.\n+\t* lib/target-libpath.exp (set_ld_library_path_env_vars): If present,\n+\tset GCC_EXEC_PREFIX env var from global variable of same name.\n+\n 2006-11-12  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR fortran/26994"}, {"sha": "185775d224907060b38ca92d894c79eda59cd423", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=f4c0a30368a46ab95f266646085ac4d65c61725d", "patch": "@@ -17,6 +17,7 @@\n # This file was written by Rob Savoye. (rob@cygnus.com)\n \n load_lib file-format.exp\n+load_lib target-libpath.exp\n \n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n@@ -40,6 +41,19 @@ if ![info exists TORTURE_OPTIONS] {\n \t{ -Os } ]\n }\n \n+global GCC_UNDER_TEST\n+if ![info exists GCC_UNDER_TEST] {\n+    set GCC_UNDER_TEST \"[find_gcc]\"\n+}\n+\n+global orig_environment_saved\n+\n+# This file may be sourced, so don't override environment settings\n+# that have been previously setup.\n+if { $orig_environment_saved == 0 } {\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+    set_ld_library_path_env_vars\n+}\n \n # Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n # one for testcases without loops."}, {"sha": "8135b3f4c965b529c5e5f3708a216c60520c244d", "filename": "gcc/testsuite/lib/target-libpath.exp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c0a30368a46ab95f266646085ac4d65c61725d/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp?ref=f4c0a30368a46ab95f266646085ac4d65c61725d", "patch": "@@ -50,6 +50,12 @@ proc set_ld_library_path_env_vars { } {\n   global orig_ld_library_path_32\n   global orig_ld_library_path_64\n   global orig_dyld_library_path\n+  global GCC_EXEC_PREFIX\n+\n+  # Set the relocated compiler prefix, but only if the user hasn't specified one.\n+  if { [info exists GCC_EXEC_PREFIX] && ![info exists env(GCC_EXEC_PREFIX)] } {\n+    setenv GCC_EXEC_PREFIX \"$GCC_EXEC_PREFIX\"\n+  }\n \n   # Setting the ld library path causes trouble when testing cross-compilers.\n   if { [is_remote target] } {"}]}