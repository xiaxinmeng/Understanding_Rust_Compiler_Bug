{"sha": "82fa5f8aa727db4ab9f172ddc454fc25325b82ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmYTVmOGFhNzI3ZGI0YWI5ZjE3MmRkYzQ1NGZjMjUzMjViODJjYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-03-18T13:10:49Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-03-18T13:10:49Z"}, "message": "Remove the REG_EQUAL note if we don't know its invariant status.\n\ngcc/\n\n2010-03-18  Steven Bosscher  <steven@gcc.gnu.org>\n\t    Eric Botcazou  <ebotcazou@adacore.com>\n\n\tPR rtl-optimization/43360\n\t* loop-invariant.c (move_invariant_reg): Remove the REG_EQUAL\n\tnote if we don't know its invariant status.\n\ngcc/testsuite/\n\n2010-03-18  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR rtl-optimization/43360\n\t* gcc.dg/torture/pr43360.c: New.\n\nFrom-SVN: r157539", "tree": {"sha": "2e9989fbc201d38d90f3ecc75bcfe7e74cb4b8ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9989fbc201d38d90f3ecc75bcfe7e74cb4b8ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82fa5f8aa727db4ab9f172ddc454fc25325b82ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82fa5f8aa727db4ab9f172ddc454fc25325b82ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82fa5f8aa727db4ab9f172ddc454fc25325b82ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/comments", "author": null, "committer": null, "parents": [{"sha": "eb45755f642d26039a0422bfbc457b08c6a3fcde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb45755f642d26039a0422bfbc457b08c6a3fcde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb45755f642d26039a0422bfbc457b08c6a3fcde"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "a4254a8696955cc0676381fe115c4d05d4a9ab7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82fa5f8aa727db4ab9f172ddc454fc25325b82ca", "patch": "@@ -1,3 +1,10 @@\n+2010-03-18  Steven Bosscher  <steven@gcc.gnu.org>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/43360\n+\t* loop-invariant.c (move_invariant_reg): Remove the REG_EQUAL\n+\tnote if we don't know its invariant status.\n+\n 2010-03-18  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/43402"}, {"sha": "57973c195233e214b72197f92413d26f847a4b28", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=82fa5f8aa727db4ab9f172ddc454fc25325b82ca", "patch": "@@ -1423,14 +1423,16 @@ move_invariant_reg (struct loop *loop, unsigned invno)\n       emit_insn_after (gen_move_insn (dest, reg), inv->insn);\n       reorder_insns (inv->insn, inv->insn, BB_END (preheader));\n \n-      /* If there is a REG_EQUAL note on the insn we just moved, and\n-\t insn is in a basic block that is not always executed, the note\n-\t may no longer be valid after we move the insn.\n-\t Note that uses in REG_EQUAL notes are taken into account in\n-\t the computation of invariants.  Hence it is safe to retain the\n-\t note even if the note contains register references.  */\n-      if (! inv->always_executed\n-\t  && (note = find_reg_note (inv->insn, REG_EQUAL, NULL_RTX)))\n+      /* If there is a REG_EQUAL note on the insn we just moved, and the\n+\t insn is in a basic block that is not always executed or the note\n+\t contains something for which we don't know the invariant status,\n+\t the note may no longer be valid after we move the insn.  Note that\n+\t uses in REG_EQUAL notes are taken into account in the computation\n+\t of invariants, so it is safe to retain the note even if it contains\n+\t register references for which we know the invariant status.  */\n+      if ((note = find_reg_note (inv->insn, REG_EQUAL, NULL_RTX))\n+\t  && (!inv->always_executed\n+\t      || !check_maybe_invariant (XEXP (note, 0))))\n \tremove_note (inv->insn, note);\n     }\n   else"}, {"sha": "4b69cb7f5799706327612fc65ad7a36bf26d5a10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82fa5f8aa727db4ab9f172ddc454fc25325b82ca", "patch": "@@ -1,3 +1,8 @@\n+2010-03-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/43360\n+\t* gcc.dg/torture/pr43360.c: New.\n+\n 2010-03-18  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/43402"}, {"sha": "9ed9872db26345c98f2e571904a2490dba8f92f4", "filename": "gcc/testsuite/gcc.dg/torture/pr43360.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr43360.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82fa5f8aa727db4ab9f172ddc454fc25325b82ca/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr43360.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr43360.c?ref=82fa5f8aa727db4ab9f172ddc454fc25325b82ca", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+\n+int l_5_5_2 = 4;\n+int g_3[1][1];\n+\n+void func_1 (void)\n+{\n+  for (g_3[0][0] = 1; g_3[0][0] < 8; g_3[0][0] += 7) {\n+    int *l_6 = &g_3[0][0];\n+    *l_6 = l_5_5_2;\n+  }\n+}\n+\n+int main (void)\n+{\n+  func_1 ();\n+  if (g_3[0][0] != 11)\n+      __builtin_abort ();\n+  return 0;\n+}"}]}