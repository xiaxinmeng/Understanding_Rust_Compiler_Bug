{"sha": "959eb7588fd26f99adfd96a0163454649e782e4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5ZWI3NTg4ZmQyNmY5OWFkZmQ5NmEwMTYzNDU0NjQ5ZTc4MmU0ZA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-10-07T02:17:57Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-10-07T02:17:57Z"}, "message": "sol2-sld-64.h (TRANSFER_FROM_TRAMPOLINE): Rework for efficiency by checking whether we need to modify the current stack...\n\n\t* config/sparc/sol2-sld-64.h (TRANSFER_FROM_TRAMPOLINE): Rework\n\tfor efficiency by checking whether we need to modify the current\n\tstack permission at all.\n\t(ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR): Define.\n\t* config/sparc/sparc.c (sparc_initialize_trampoline): Emit\n\t__enable_execute_stack libcall here too if\n\tTRANSFER_FROM_TRAMPOLINE is defined.\n\t* config/sparc/sparc.h: Set TARGET_ARCH32 to a constant if\n\tIN_LIBGCC2.\n\nFrom-SVN: r22880", "tree": {"sha": "10362a8001d2a926748452d7b70c8528263e4c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10362a8001d2a926748452d7b70c8528263e4c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/959eb7588fd26f99adfd96a0163454649e782e4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959eb7588fd26f99adfd96a0163454649e782e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/959eb7588fd26f99adfd96a0163454649e782e4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959eb7588fd26f99adfd96a0163454649e782e4d/comments", "author": null, "committer": null, "parents": [{"sha": "849da744cd78bb82f78c7eb4c680088ebda3bbdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849da744cd78bb82f78c7eb4c680088ebda3bbdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849da744cd78bb82f78c7eb4c680088ebda3bbdb"}], "stats": {"total": 109, "additions": 91, "deletions": 18}, "files": [{"sha": "4d2c2c973df72710608f17b72d9b1125aceba5ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959eb7588fd26f99adfd96a0163454649e782e4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959eb7588fd26f99adfd96a0163454649e782e4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=959eb7588fd26f99adfd96a0163454649e782e4d", "patch": "@@ -1,3 +1,15 @@\n+Wed Oct  7 02:05:20 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n+\n+\t* config/sparc/sol2-sld-64.h (TRANSFER_FROM_TRAMPOLINE): Rework\n+\tfor efficiency by checking whether we need to modify the current\n+\tstack permission at all.\n+\t(ASM_OUTPUT_CONSTRUCTOR, ASM_OUTPUT_DESTRUCTOR): Define.\n+\t* config/sparc/sparc.c (sparc_initialize_trampoline): Emit\n+\t__enable_execute_stack libcall here too if\n+\tTRANSFER_FROM_TRAMPOLINE is defined.\n+\t* config/sparc/sparc.h: Set TARGET_ARCH32 to a constant if\n+\tIN_LIBGCC2.\n+\n Wed Oct  7 02:27:52 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (DRIVER_DEFINES): Remove last change."}, {"sha": "13b0fe32cfe1bfc5719747e8fbf48f795815851d", "filename": "gcc/config/sparc/sol2-sld-64.h", "status": "modified", "additions": 66, "deletions": 17, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959eb7588fd26f99adfd96a0163454649e782e4d/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959eb7588fd26f99adfd96a0163454649e782e4d/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-sld-64.h?ref=959eb7588fd26f99adfd96a0163454649e782e4d", "patch": "@@ -293,22 +293,71 @@\n    \n #undef MD_STARTFILE_PREFIX\n #define MD_STARTFILE_PREFIX \"/usr/lib/sparcv9/\"\n+ \n+#endif /* ! SPARC_BI_ARCH */\n+\n+/*\n+ * Attempt to turn on access permissions for the stack.\n+ *\n+ * This code must be defined when compiling gcc but not when compiling\n+ * libgcc2.a, unless we're generating code for 64 bits SPARC\n+ *\n+ * _SC_STACK_PROT is only defined for post 2.6, but we want this code\n+ * to run always.  2.6 can change the stack protection but has no way to\n+ * query it.\n+ *\n+ */\n \n-/* Attempt to turn on access permissions for the stack.  */\n-\n-#define TRANSFER_FROM_TRAMPOLINE                                       \\\n-void                                                                   \\\n-__enable_execute_stack (addr)                                          \\\n-     void *addr;                                                       \\\n-{                                                                      \\\n-  long size = getpagesize ();                                          \\\n-  long mask = ~(size-1);                                               \\\n-  char *page = (char *) (((long) addr) & mask);                               \\\n-  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-                                                                       \\\n-  /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */                               \\\n-  if (mprotect (page, end - page, 7) < 0)                              \\\n-    perror (\"mprotect of trampoline code\");                            \\\n+#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n+static int need_enable_exec_stack;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+static void check_enabling(void) __attribute__ ((constructor));\t\t\\\n+static void check_enabling(void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  extern long sysconf(int);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  int prot = (int) sysconf(515 /*_SC_STACK_PROT */);\t\t\t\\\n+  if (prot != 7)\t\t\t\t\t\t\t\\\n+    need_enable_exec_stack = 1;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+__enable_execute_stack (addr)\t\t\t\t\t\t\\\n+     void *addr;\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (!need_enable_exec_stack)\t\t\t\t\t\t\\\n+    return;\t\t\t\t\t\t\t\t\\\n+  else {\t\t\t\t\t\t\t\t\\\n+    long size = getpagesize ();\t\t\t\t\t\t\\\n+    long mask = ~(size-1);\t\t\t\t\t\t\\\n+    char *page = (char *) (((long) addr) & mask); \t\t\t\\\n+    char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n+\t\t\t\t\t\t\t\t\t\\\n+    /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */ \t\t\t\\\n+    if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n+      perror (\"mprotect of trampoline code\");\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n }\n-   \n-#endif /* ! SPARC_BI_ARCH */\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", TARGET_ARCH64 ? ASM_LONGLONG : INT_ASM_OP); \\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#undef ASM_OUTPUT_DESTRUCTOR\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", TARGET_ARCH64 ? ASM_LONGLONG : INT_ASM_OP); \\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+"}, {"sha": "ae207027b0fa0539b5971865978082e6d030f599", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959eb7588fd26f99adfd96a0163454649e782e4d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959eb7588fd26f99adfd96a0163454649e782e4d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=959eb7588fd26f99adfd96a0163454649e782e4d", "patch": "@@ -5438,6 +5438,10 @@ sparc_initialize_trampoline (tramp, fnaddr, cxt)\n     SETHI i,r  = 00rr rrr1 00ii iiii iiii iiii iiii iiii\n     JMPL r+i,d = 10dd ddd1 1100 0rrr rr1i iiii iiii iiii\n    */\n+#ifdef TRANSFER_FROM_TRAMPOLINE\n+  emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n+                     0, VOIDmode, 1, tramp, Pmode);\n+#endif\n \n   emit_move_insn (gen_rtx_MEM (SImode, plus_constant (tramp, 0)),\n \t\t  expand_binop (SImode, ior_optab,"}, {"sha": "177c3327adba07e9c5e82215ba0ee14da0f984a0", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959eb7588fd26f99adfd96a0163454649e782e4d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959eb7588fd26f99adfd96a0163454649e782e4d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=959eb7588fd26f99adfd96a0163454649e782e4d", "patch": "@@ -34,10 +34,18 @@ Boston, MA 02111-1307, USA.  */\n    architectures to compile for.  We allow targets to choose compile time or\n    runtime selection.  */\n #ifdef SPARC_BI_ARCH\n+#ifdef IN_LIBGCC2\n+#if defined(__sparcv9) || defined(__sparcv_v9) || defined(__arch64__)\n+#define TARGET_ARCH32 0\n+#else\n+#define TARGET_ARCH32 1\n+#endif /* V9 sparc */\n+#else\n #define TARGET_ARCH32 (! TARGET_64BIT)\n+#endif /* IN_LIBGCC2 */\n #else\n #define TARGET_ARCH32 (DEFAULT_ARCH32_P)\n-#endif\n+#endif /* SPARC_BI_ARCH */\n #define TARGET_ARCH64 (! TARGET_ARCH32)\n \n /* Code model selection."}]}