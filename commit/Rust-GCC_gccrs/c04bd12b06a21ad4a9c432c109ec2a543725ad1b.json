{"sha": "c04bd12b06a21ad4a9c432c109ec2a543725ad1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0YmQxMmIwNmEyMWFkNGE5YzQzMmMxMDllYzJhNTQzNzI1YWQxYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-28T11:54:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-28T12:01:41Z"}, "message": "Fix PR target/97939\n\nThe little dance around 4096 that add/sub instructions do on the SPARC\nneeds to be taken into account for the overflow arithmetic operations.\nIt cannot be done for unsigned overflow, but it can be done for signed\noverflow.\n\ngcc/ChangeLog:\n\tPR target/97939\n\t* config/sparc/predicates.md (arith_double_add_operand): Comment.\n\t* config/sparc/sparc.md (uaddvdi4): Use arith_double_operand.\n\t(addvdi4): Use arith_double_add_operand.\n\t(addsi3): Remove useless attributes.\n\t(addvsi4): Use arith_add_operand.\n\t(*cmp_ccv_plus): Likewise and add second alternative accordingly.\n\t(*cmp_ccxv_plus): Likewise.\n\t(*cmp_ccv_plus_set): Likewise.\n\t(*cmp_ccxv_plus_set): Likewise.\n\t(*cmp_ccv_plus_sltu_set): Likewise.\n\t(usubvdi4): Use arith_double_operand.\n\t(subvdi4): Use arith_double_add_operand.\n\t(subsi3): Remove useless attributes.\n\t(subvsi4): Use arith_add_operand.\n\t(*cmp_ccv_minus): Likewise and add second alternative accordingly.\n\t(*cmp_ccxv_minus): Likewise.\n\t(*cmp_ccv_minus_set): Likewise.\n\t(*cmp_ccxv_minus_set): Likewise.\n\t(*cmp_ccv_minus_sltu_set): Likewise.\n\t(negsi2): Use register_operand.\n\t(unegvsi3): Likewise.\n\t(negvsi3) Likewise.\n\t(*cmp_ccnz_neg): Likewise.\n\t(*cmp_ccxnz_neg): Likewise.\n\t(*cmp_ccnz_neg_set): Likewise.\n\t(*cmp_ccxnz_neg_set): Likewise.\n\t(*cmp_ccc_neg_set): Likewise.\n\t(*cmp_ccxc_neg_set): Likewise.\n\t(*cmp_ccc_neg_sltu_set): Likewise.\n\t(*cmp_ccv_neg): Likewise.\n\t(*cmp_ccxv_neg): Likewise.\n\t(*cmp_ccv_neg_set): Likewise.\n\t(*cmp_ccxv_neg_set): Likewise.\n\t(*cmp_ccv_neg_sltu_set): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/sparc/overflow-6.c: New test.", "tree": {"sha": "e7e3f760877b50cce72852c0bff6478f8e3d0359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7e3f760877b50cce72852c0bff6478f8e3d0359"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c04bd12b06a21ad4a9c432c109ec2a543725ad1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04bd12b06a21ad4a9c432c109ec2a543725ad1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04bd12b06a21ad4a9c432c109ec2a543725ad1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04bd12b06a21ad4a9c432c109ec2a543725ad1b/comments", "author": null, "committer": null, "parents": [{"sha": "36ec54aac7da134441c83248e14825381b8d6f17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ec54aac7da134441c83248e14825381b8d6f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ec54aac7da134441c83248e14825381b8d6f17"}], "stats": {"total": 168, "additions": 113, "deletions": 55}, "files": [{"sha": "42316adc94e01fe12bca40416b500e7dcba38d1d", "filename": "gcc/config/sparc/predicates.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bd12b06a21ad4a9c432c109ec2a543725ad1b/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bd12b06a21ad4a9c432c109ec2a543725ad1b/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpredicates.md?ref=c04bd12b06a21ad4a9c432c109ec2a543725ad1b", "patch": "@@ -296,6 +296,8 @@\n   if (arith_double_operand (op, mode))\n     return true;\n \n+  /* Turning an add/sub instruction into the other changes the Carry flag\n+     so the 4096 trick cannot be used for double operations in 32-bit mode.  */\n   return TARGET_ARCH64 && const_4096_operand (op, mode);\n })\n "}, {"sha": "6e9ccb4ecfd7b69e859a760d916a23f27b5b0b5a", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 91, "deletions": 55, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bd12b06a21ad4a9c432c109ec2a543725ad1b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bd12b06a21ad4a9c432c109ec2a543725ad1b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c04bd12b06a21ad4a9c432c109ec2a543725ad1b", "patch": "@@ -3768,10 +3768,13 @@ visl\")\n     }\n })\n \n+;; Turning an add/sub instruction into the other changes the Carry flag\n+;; so the 4096 trick cannot be used for operations in CCXCmode.\n+\n (define_expand \"uaddvdi4\"\n   [(parallel [(set (reg:CCXC CC_REG)\n \t\t   (compare:CCXC (plus:DI (match_operand:DI 1 \"register_operand\")\n-\t\t\t\t\t  (match_operand:DI 2 \"arith_add_operand\"))\n+\t\t\t\t\t  (match_operand:DI 2 \"arith_double_operand\"))\n \t\t\t         (match_dup 1)))\n \t      (set (match_operand:DI 0 \"register_operand\")\n \t\t   (plus:DI (match_dup 1) (match_dup 2)))])\n@@ -3790,10 +3793,13 @@ visl\")\n     }\n })\n \n+;; Turning an add/sub instruction into the other does not change the Overflow\n+;; flag so the 4096 trick can be used for operations in CCXVmode.\n+\n (define_expand \"addvdi4\"\n   [(parallel [(set (reg:CCXV CC_REG)\n \t\t   (compare:CCXV (plus:DI (match_operand:DI 1 \"register_operand\")\n-\t\t\t\t\t  (match_operand:DI 2 \"arith_add_operand\"))\n+\t\t\t\t\t  (match_operand:DI 2 \"arith_double_add_operand\"))\n \t\t\t         (unspec:DI [(match_dup 1) (match_dup 2)]\n \t\t\t\t\t    UNSPEC_ADDV)))\n \t      (set (match_operand:DI 0 \"register_operand\")\n@@ -3966,9 +3972,10 @@ visl\")\n   \"\"\n   \"@\n    add\\t%1, %2, %0\n-   sub\\t%1, -%2, %0\"\n-  [(set_attr \"type\" \"*,*\")\n-   (set_attr \"fptype\" \"*,*\")])\n+   sub\\t%1, -%2, %0\")\n+\n+;; Turning an add/sub instruction into the other changes the Carry flag\n+;; so the 4096 trick cannot be used for operations in CCCmode.\n \n (define_expand \"uaddvsi4\"\n   [(parallel [(set (reg:CCC CC_REG)\n@@ -3982,10 +3989,13 @@ visl\")\n \t\t\t   (pc)))]\n  \"\")\n \n+;; Turning an add/sub instruction into the other does not change the Overflow\n+;; flag so the 4096 trick can be used for operations in CCVmode.\n+\n (define_expand \"addvsi4\"\n   [(parallel [(set (reg:CCV CC_REG)\n \t\t   (compare:CCV (plus:SI (match_operand:SI 1 \"register_operand\")\n-\t\t\t\t\t (match_operand:SI 2 \"arith_operand\"))\n+\t\t\t\t\t (match_operand:SI 2 \"arith_add_operand\"))\n \t\t\t        (unspec:SI [(match_dup 1) (match_dup 2)]\n \t\t\t\t\t   UNSPEC_ADDV)))\n \t      (set (match_operand:SI 0 \"register_operand\")\n@@ -4094,42 +4104,50 @@ visl\")\n \n (define_insn \"*cmp_ccv_plus\"\n   [(set (reg:CCV CC_REG)\n-\t(compare:CCV (plus:SI (match_operand:SI 0 \"register_operand\" \"%r\")\n-\t\t\t      (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCV (plus:SI (match_operand:SI 0 \"register_operand\" \"%r,r\")\n+\t\t\t      (match_operand:SI 1 \"arith_add_operand\" \"rI,O\"))\n \t\t     (unspec:SI [(match_dup 0) (match_dup 1)] UNSPEC_ADDV)))]\n   \"\"\n-  \"addcc\\t%0, %1, %%g0\"\n+  \"@\n+   addcc\\t%0, %1, %%g0\n+   subcc\\t%0, -%1, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccxv_plus\"\n   [(set (reg:CCXV CC_REG)\n-\t(compare:CCXV (plus:DI (match_operand:DI 0 \"register_operand\" \"%r\")\n-\t\t\t       (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCXV (plus:DI (match_operand:DI 0 \"register_operand\" \"%r,r\")\n+\t\t\t       (match_operand:DI 1 \"arith_add_operand\" \"rI,O\"))\n \t\t      (unspec:DI [(match_dup 0) (match_dup 1)] UNSPEC_ADDV)))]\n   \"TARGET_ARCH64\"\n-  \"addcc\\t%0, %1, %%g0\"\n+  \"@\n+   addcc\\t%0, %1, %%g0\n+   subcc\\t%0, -%1, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccv_plus_set\"\n   [(set (reg:CCV CC_REG)\n-\t(compare:CCV (plus:SI (match_operand:SI 1 \"register_operand\" \"%r\")\n-\t\t\t      (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t(compare:CCV (plus:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")\n+\t\t\t      (match_operand:SI 2 \"arith_add_operand\" \"rI,O\"))\n \t\t     (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"addcc\\t%1, %2, %0\"\n+  \"@\n+   addcc\\t%1, %2, %0\n+   subcc\\t%1, -%2, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccxv_plus_set\"\n   [(set (reg:CCXV CC_REG)\n-\t(compare:CCXV (plus:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n-\t\t\t       (match_operand:DI 2 \"arith_operand\" \"rI\"))\n+\t(compare:CCXV (plus:DI (match_operand:DI 1 \"register_operand\" \"%r,r\")\n+\t\t\t       (match_operand:DI 2 \"arith_add_operand\" \"rI,O\"))\n \t\t      (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_ARCH64\"\n-  \"addcc\\t%1, %2, %0\"\n+  \"@\n+   addcc\\t%1, %2, %0\n+   subcc\\t%1, -%2, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccv_plus_sltu_set\"\n@@ -4161,10 +4179,13 @@ visl\")\n     }\n })\n \n+;; Turning an add/sub instruction into the other changes the Carry flag\n+;; so the 4096 trick cannot be used for operations in CCXmode.\n+\n (define_expand \"usubvdi4\"\n   [(parallel [(set (reg:CCX CC_REG)\n \t\t   (compare:CCX (match_operand:DI 1 \"register_or_zero_operand\")\n-\t\t\t\t(match_operand:DI 2 \"arith_add_operand\")))\n+\t\t\t\t(match_operand:DI 2 \"arith_double_operand\")))\n \t      (set (match_operand:DI 0 \"register_operand\")\n \t\t   (minus:DI (match_dup 1) (match_dup 2)))])\n    (set (pc) (if_then_else (ltu (reg:CCX CC_REG) (const_int 0))\n@@ -4188,10 +4209,13 @@ visl\")\n     }\n })\n \n+;; Turning an add/sub instruction into the other does not change the Overflow\n+;; flag so the 4096 trick can be used for operations in CCXVmode.\n+\n (define_expand \"subvdi4\"\n   [(parallel [(set (reg:CCXV CC_REG)\n \t\t   (compare:CCXV (minus:DI (match_operand:DI 1 \"register_operand\")\n-\t\t\t\t\t   (match_operand:DI 2 \"arith_add_operand\"))\n+\t\t\t\t\t   (match_operand:DI 2 \"arith_double_add_operand\"))\n \t\t\t         (unspec:DI [(match_dup 1) (match_dup 2)]\n \t\t\t\t\t    UNSPEC_SUBV)))\n \t      (set (match_operand:DI 0 \"register_operand\")\n@@ -4362,9 +4386,10 @@ visl\")\n   \"\"\n   \"@\n    sub\\t%1, %2, %0\n-   add\\t%1, -%2, %0\"\n-  [(set_attr \"type\" \"*,*\")\n-   (set_attr \"fptype\" \"*,*\")])\n+   add\\t%1, -%2, %0\")\n+\n+;; Turning an add/sub instruction into the other changes the Carry flag\n+;; so the 4096 trick cannot be used for operations in CCmode.\n \n (define_expand \"usubvsi4\"\n   [(parallel [(set (reg:CC CC_REG)\n@@ -4384,10 +4409,13 @@ visl\")\n     }\n })\n \n+;; Turning an add/sub instruction into the other does not change the Overflow\n+;; flag so the 4096 trick can be used for operations in CCVmode.\n+\n (define_expand \"subvsi4\"\n   [(parallel [(set (reg:CCV CC_REG)\n \t\t   (compare:CCV (minus:SI (match_operand:SI 1 \"register_operand\")\n-\t\t\t\t\t  (match_operand:SI 2 \"arith_operand\"))\n+\t\t\t\t\t  (match_operand:SI 2 \"arith_add_operand\"))\n \t\t\t        (unspec:SI [(match_dup 1) (match_dup 2)]\n \t\t\t\t\t   UNSPEC_SUBV)))\n \t      (set (match_operand:SI 0 \"register_operand\")\n@@ -4480,42 +4508,50 @@ visl\")\n \n (define_insn \"*cmp_ccv_minus\"\n   [(set (reg:CCV CC_REG)\n-\t(compare:CCV (minus:SI (match_operand:SI 0 \"register_or_zero_operand\" \"rJ\")\n-\t\t\t       (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCV (minus:SI (match_operand:SI 0 \"register_or_zero_operand\" \"rJ,rJ\")\n+\t\t\t       (match_operand:SI 1 \"arith_add_operand\" \"rI,O\"))\n \t\t     (unspec:SI [(match_dup 0) (match_dup 1)] UNSPEC_SUBV)))]\n   \"\"\n-  \"subcc\\t%r0, %1, %%g0\"\n+  \"@\n+   subcc\\t%r0, %1, %%g0\n+   addcc\\t%r0, -%1, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccxv_minus\"\n   [(set (reg:CCXV CC_REG)\n-\t(compare:CCXV (minus:DI (match_operand:DI 0 \"register_or_zero_operand\" \"rJ\")\n-\t\t\t        (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCXV (minus:DI (match_operand:DI 0 \"register_or_zero_operand\" \"rJ,rJ\")\n+\t\t\t        (match_operand:DI 1 \"arith_add_operand\" \"rI,O\"))\n \t\t      (unspec:DI [(match_dup 0) (match_dup 1)] UNSPEC_SUBV)))]\n   \"TARGET_ARCH64\"\n-  \"subcc\\t%r0, %1, %%g0\"\n+  \"@\n+   subcc\\t%r0, %1, %%g0\n+   addcc\\t%r0, -%1, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccv_minus_set\"\n   [(set (reg:CCV CC_REG)\n-\t(compare:CCV (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n-\t\t\t       (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t(compare:CCV (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ,rJ\")\n+\t\t\t       (match_operand:SI 2 \"arith_add_operand\" \"rI,O\"))\n \t\t     (unspec:SI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"subcc\\t%r1, %2, %0\"\n+  \"@\n+   subcc\\t%r1, %2, %0\n+   addcc\\t%r1, -%2, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccxv_minus_set\"\n   [(set (reg:CCXV CC_REG)\n-\t(compare:CCXV (minus:DI (match_operand:DI 1 \"register_or_zero_operand\" \"rJ\")\n-\t\t\t        (match_operand:DI 2 \"arith_operand\" \"rI\"))\n+\t(compare:CCXV (minus:DI (match_operand:DI 1 \"register_or_zero_operand\" \"rJ,rJ\")\n+\t\t\t        (match_operand:DI 2 \"arith_add_operand\" \"rI,O\"))\n \t\t      (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))\n-   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+   (set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(minus:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_ARCH64\"\n-  \"subcc\\t%r1, %2, %0\"\n+  \"@\n+   subcc\\t%r1, %2, %0\n+   addcc\\t%r1, -%2, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccv_minus_sltu_set\"\n@@ -5766,13 +5802,13 @@ visl\")\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n+        (neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"sub\\t%%g0, %1, %0\")\n \n (define_expand \"unegvsi3\"\n   [(parallel [(set (reg:CCC CC_REG)\n-\t\t   (compare:CCC (not:SI (match_operand:SI 1 \"arith_operand\" \"\"))\n+\t\t   (compare:CCC (not:SI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t\t\t(const_int -1)))\n \t      (set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (neg:SI (match_dup 1)))])\n@@ -5784,7 +5820,7 @@ visl\")\n \n (define_expand \"negvsi3\"\n   [(parallel [(set (reg:CCV CC_REG)\n-\t\t   (compare:CCV (neg:SI (match_operand:SI 1 \"arith_operand\" \"\"))\n+\t\t   (compare:CCV (neg:SI (match_operand:SI 1 \"register_operand\" \"\"))\n \t\t\t\t(unspec:SI [(match_dup 1)] UNSPEC_NEGV)))\n \t      (set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (neg:SI (match_dup 1)))])\n@@ -5796,23 +5832,23 @@ visl\")\n \n (define_insn \"*cmp_ccnz_neg\"\n   [(set (reg:CCNZ CC_REG)\n-\t(compare:CCNZ (neg:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n+\t(compare:CCNZ (neg:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n \t\t      (const_int 0)))]\n   \"\"\n   \"subcc\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccxnz_neg\"\n   [(set (reg:CCXNZ CC_REG)\n-\t(compare:CCXNZ (neg:DI (match_operand:DI 0 \"arith_operand\" \"rI\"))\n+\t(compare:CCXNZ (neg:DI (match_operand:DI 0 \"register_operand\" \"r\"))\n \t\t       (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"subcc\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccnz_neg_set\"\n   [(set (reg:CCNZ CC_REG)\n-\t(compare:CCNZ (neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCNZ (neg:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t      (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_dup 1)))]\n@@ -5822,7 +5858,7 @@ visl\")\n \n (define_insn \"*cmp_ccxnz_neg_set\"\n   [(set (reg:CCXNZ CC_REG)\n-\t(compare:CCXNZ (neg:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCXNZ (neg:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t       (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_dup 1)))]\n@@ -5832,7 +5868,7 @@ visl\")\n \n (define_insn \"*cmp_ccc_neg_set\"\n   [(set (reg:CCC CC_REG)\n-\t(compare:CCC (not:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCC (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t     (const_int -1)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_dup 1)))]\n@@ -5842,7 +5878,7 @@ visl\")\n \n (define_insn \"*cmp_ccxc_neg_set\"\n   [(set (reg:CCXC CC_REG)\n-\t(compare:CCXC (not:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCXC (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t      (const_int -1)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_dup 1)))]\n@@ -5853,7 +5889,7 @@ visl\")\n (define_insn \"*cmp_ccc_neg_sltu_set\"\n   [(set (reg:CCC CC_REG)\n \t(compare:CCC (zero_extend:DI\n-\t\t       (neg:SI (plus:SI (match_operand:SI 1 \"arith_operand\" \"rI\")\n+\t\t       (neg:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t        (ltu:SI (reg:CCC CC_REG)\n \t\t\t\t\t\t(const_int 0)))))\n \t\t     (neg:DI (plus:DI (zero_extend:DI (match_dup 1))\n@@ -5868,23 +5904,23 @@ visl\")\n \n (define_insn \"*cmp_ccv_neg\"\n   [(set (reg:CCV CC_REG)\n-\t(compare:CCV (neg:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n+\t(compare:CCV (neg:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n \t\t     (unspec:SI [(match_dup 0)] UNSPEC_NEGV)))]\n   \"\"\n   \"subcc\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccxv_neg\"\n   [(set (reg:CCXV CC_REG)\n-\t(compare:CCXV (neg:DI (match_operand:DI 0 \"arith_operand\" \"rI\"))\n+\t(compare:CCXV (neg:DI (match_operand:DI 0 \"register_operand\" \"r\"))\n \t\t      (unspec:DI [(match_dup 0)] UNSPEC_NEGV)))]\n   \"TARGET_ARCH64\"\n   \"subcc\\t%%g0, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccv_neg_set\"\n   [(set (reg:CCV CC_REG)\n-\t(compare:CCV (neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCV (neg:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t     (unspec:SI [(match_dup 1)] UNSPEC_NEGV)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_dup 1)))]\n@@ -5894,7 +5930,7 @@ visl\")\n \n (define_insn \"*cmp_ccxv_neg_set\"\n   [(set (reg:CCXV CC_REG)\n-\t(compare:CCXV (neg:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t(compare:CCXV (neg:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t      (unspec:DI [(match_dup 1)] UNSPEC_NEGV)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_dup 1)))]\n@@ -5904,7 +5940,7 @@ visl\")\n \n (define_insn \"*cmp_ccv_neg_sltu_set\"\n   [(set (reg:CCV CC_REG)\n-\t(compare:CCV (neg:SI (plus:SI (match_operand:SI 1 \"arith_operand\" \"rI\")\n+\t(compare:CCV (neg:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t      (ltu:SI (reg:CCC CC_REG) (const_int 0))))\n \t\t     (unspec:SI [(plus:SI (match_dup 1)\n \t\t\t\t          (ltu:SI (reg:CCC CC_REG)"}, {"sha": "11aafc581da07d0e9d6051647cd0ac68c97a309d", "filename": "gcc/testsuite/gcc.target/sparc/overflow-6.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04bd12b06a21ad4a9c432c109ec2a543725ad1b/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04bd12b06a21ad4a9c432c109ec2a543725ad1b/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Foverflow-6.c?ref=c04bd12b06a21ad4a9c432c109ec2a543725ad1b", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/97939 */\n+/* Reported by Vincent Lefevre <vincent-gcc@vinc17.net> */\n+\n+/* { dg-do run } */\n+\n+#include <limits.h>\n+\n+long add (long i)\n+{\n+  long r;\n+  if (!__builtin_add_overflow (i, 4096, &r))\n+    __builtin_abort ();\n+  return r;\n+}\n+\n+int main (void)\n+{\n+  add (LONG_MAX);\n+  return 0;\n+}"}]}