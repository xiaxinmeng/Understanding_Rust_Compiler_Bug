{"sha": "eb50138bec5581401884dcfd86080d27bd7c446f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1MDEzOGJlYzU1ODE0MDE4ODRkY2ZkODYwODBkMjdiZDdjNDQ2Zg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-09-12T08:54:21Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-09-12T08:54:21Z"}, "message": "* ir.texi: Add more documentation.\n\nFrom-SVN: r36355", "tree": {"sha": "0c405a97f48658f048ce8c517e26b4a05b25d360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c405a97f48658f048ce8c517e26b4a05b25d360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb50138bec5581401884dcfd86080d27bd7c446f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb50138bec5581401884dcfd86080d27bd7c446f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb50138bec5581401884dcfd86080d27bd7c446f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb50138bec5581401884dcfd86080d27bd7c446f/comments", "author": null, "committer": null, "parents": [{"sha": "f1c1dfc3899118a8cc7151550dd8917909b9c112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c1dfc3899118a8cc7151550dd8917909b9c112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c1dfc3899118a8cc7151550dd8917909b9c112"}], "stats": {"total": 166, "additions": 163, "deletions": 3}, "files": [{"sha": "2b2b97f1e4189432454d626036ef03c891cfa1d1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb50138bec5581401884dcfd86080d27bd7c446f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb50138bec5581401884dcfd86080d27bd7c446f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eb50138bec5581401884dcfd86080d27bd7c446f", "patch": "@@ -1,3 +1,7 @@\n+2000-09-11  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+        * ir.texi: Add more documentation.\n+\n 2000-09-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (struct saved_scope): Remove x_function_parms."}, {"sha": "6e96d3c0fff732d8419d643583c8d8073bd38d1d", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 159, "deletions": 3, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb50138bec5581401884dcfd86080d27bd7c446f/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb50138bec5581401884dcfd86080d27bd7c446f/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=eb50138bec5581401884dcfd86080d27bd7c446f", "patch": "@@ -342,6 +342,7 @@ The elements are indexed from zero.\n @findex TYPE_NAME\n @findex TYPENAME_TYPE_FULLNAME\n @findex TYPE_FIELDS\n+@findex TYPE_PTROBV_P\n \n All C++ types have corresponding tree nodes.  However, you should not\n assume that there is exactly one tree node corresponding to each C++\n@@ -383,6 +384,11 @@ This macro holds if the type is @code{volatile}-qualified.\n @item CP_TYPE_RESTRICT_P\n This macro holds if the type is @code{restrict}-qualified.\n \n+@item CP_TYPE_CONST_NON_VOLATILE_P\n+This predicate holds for a type that is @code{const}-qualified, but\n+@emph{not} @code{volatile}-qualified; other cv-qualifiers are ignored as\n+well: only the @code{const}-ness is tested. \n+\n @item TYPE_MAIN_VARIANT\n This macro returns the unqualified version of a type.  It may be applied\n to an unqualified type, but it is not always the identity function in\n@@ -408,6 +414,36 @@ actual name of the type.  The @code{TYPE_NAME} will be @code{NULL_TREE}\n for a type that is not a builtin type, the result of a typedef, or a\n named class type.\n \n+@item CP_INTEGRAL_TYPE\n+This predicate holds if the type is an integral type.  Notice that in\n+C++, enumerations are @emph{not} integral types. \n+\n+@item ARITHMETIC_TYPE_P\n+This predicate holds if the type is an integral type (in the C++ sense)\n+or a floating point type.\n+\n+@item CLASS_TYPE_P\n+This predicate holds for a class-type.\n+\n+@item TYPE_BUILT_IN\n+This predicate holds for a builtin type.\n+\n+@item TYPE_PTRMEM_P\n+This predicate holds if the type is a pointer to data member.\n+\n+@item TYPE_PTR_P\n+This predicate holds if the type is a pointer type, and the pointee is\n+not a data member. \n+\n+@item TYPE_PTRFN_P\n+This predicate holds for a pointer to function type.\n+\n+@item TYPE_PTROB_P\n+This predicate holds for a pointer to object type.  Note however that it\n+does not hold for the generic pointer to object type @code{void *}. You\n+may use @code{TYPE_PTROBV_P} to test for a pointer to object type as\n+well as @code{void *}.\n+\n @item same_type_p\n This predicate takes two types as input, and holds if they are the same\n type.  For example, if one type is a @code{typedef} for the other, or\n@@ -656,7 +692,6 @@ This macro returns the enclosing namespace.  The @code{DECL_CONTEXT} for\n the @code{global_namespace} is @code{NULL_TREE}.\n \n @item DECL_NAMESPACE_ALIAS\n-\n If this declaration is for a namespace alias, then\n @code{DECL_NAMESPACE_ALIAS} is the namespace for which this one is an\n alias.  \n@@ -666,6 +701,10 @@ an alias.  Instead, follow @code{DECL_NAMESPACE_ALIAS} links until you\n reach an ordinary, non-alias, namespace, and call\n @code{cp_namespace_decls} there.\n \n+@item DECL_NAMESPACE_STD_P\n+This predicate holds if the namespace is the special @code{::std}\n+namespace. \n+\n @item cp_namespace_decls\n This function will return the declarations contained in the namespace,\n including types, overloaded functions, other namespaces, and so forth.\n@@ -774,6 +813,50 @@ virtually.\n \n FIXME: Talk about @code{TYPE_NONCOPIED_PARTS}.\n \n+The following macros can be used on a tree node representing a class-type. \n+\n+@ftable @code\n+@item LOCAL_CLASS_P\n+This predicate holds if the class is local class @emph{i.e.} declared\n+inside a function body.\n+\n+@item TYPE_POLYMORPHIC_P\n+This predicate holds if the class has at least one virtual function\n+(declared or inherited).\n+\n+@item TYPE_HAS_DEFAULT_CONSTRUCTOR\n+This predicate holds whenever its argument represents a class-type with\n+default constructor.\n+\n+@item CLASSTYPE_HAS_MUTABLE\n+@item TYPE_HAS_MUTABLE_P\n+These predicates hold for a class-type having a mutable data member. \n+\n+@item CLASSTYPE_NON_POD_P\n+This predicate holds only for class-types that are not PODs.\n+\n+@item TYPE_HAS_NEW_OPERATOR\n+This predicate holds for a class-type that defines \n+@code{operator new}.\n+\n+@item TYPE_HAS_ARRAY_NEW_OPERATOR\n+This predicate holds for a class-type for which \n+@code{operator new[]} is defined.\n+\n+@item TYPE_OVERLOADS_CALL_EXPR\n+This predicate holds for class-type for which the function call \n+@code{operator()} is overloaded.\n+\n+@item TYPE_OVERLOADS_ARRAY_REF\n+This predicate holds for a class-type that overloads \n+@code{operator[]}\n+\n+@item TYPE_OVERLOADS_ARROW\n+This predicate holds for a class-type for which @code{operator->} is\n+overloaded. \n+\n+@end ftable\n+\n @c ---------------------------------------------------------------------\n @c Declarations\n @c ---------------------------------------------------------------------\n@@ -793,8 +876,8 @@ FIXME: Talk about @code{TYPE_NONCOPIED_PARTS}.\n @tindex RESULT_DECL\n @tindex TEMPLATE_DECL\n @tindex THUNK_DECL\n-@findex THUNK_DELTA\n @tindex USING_DECL\n+@findex THUNK_DELTA\n @findex DECL_INITIAL\n @findex DECL_SIZE\n @findex DECL_ALIGN\n@@ -840,6 +923,17 @@ typedef struct S S;\n @end example\n The implicitly generated @code{typedef} declaration is represented by a\n @code{TYPE_DECL} for which @code{DECL_ARTIFICIAL} holds.\n+\n+@item DECL_NAMESPACE_SCOPE_P\n+This predicate holds if the entity was declared at a namespace scope.\n+\n+@item DECL_CLASS_SCOPE_P\n+This predicate holds if the entity was declared at a class scope.\n+\n+@item DECL_FUNCTION_SCOPE_P\n+This predicate holds if the entity was declared inside a function\n+body. \n+\n @end ftable\n \n The various kinds of declarations include:\n@@ -874,7 +968,10 @@ analogous to @code{TYPE_SIZE} and @code{TYPE_ALIGN}.  For a declaration,\n you should always use the @code{DECL_SIZE} and @code{DECL_ALIGN} rather\n than the @code{TYPE_SIZE} and @code{TYPE_ALIGN} given by the\n @code{TREE_TYPE}, since special attributes may have been applied to the\n-variable to give it a particular size and alignment.\n+variable to give it a particular size and alignment. You may use the\n+predicates @code{DECL_THIS_STATIC} or @code{DECL_THIS_EXTERN} to test\n+whether the storage class specifiers @code{static} or @code{extern} were\n+used to declare a variable. \n \n If this variable is initialized (but does not require a constructor),\n the @code{DECL_INITIAL} will be an expression for the initializer.  The\n@@ -1003,6 +1100,10 @@ the @code{DECL_REAL_CONTEXT} for @code{f} will be the\n \n The following macros and functions can be used on a @code{FUNCTION_DECL}:\n @ftable @code\n+@item DECL_MAIN_P\n+This predicate holds for a function that is the program entry point\n+@code{::code}. \n+\n @item DECL_NAME\n This macro returns the unqualified name of the function, as an\n @code{IDENTIFIER_NODE}.  For an instantiation of a function template,\n@@ -1029,6 +1130,18 @@ This predicate holds if the function is undefined.\n @item TREE_PUBLIC\n This predicate holds if the function has external linkage.\n \n+@item DECL_LOCAL_FUNCTION_P\n+This predicate holds if the function was declared at block scope, even\n+though it has a global scope.\n+\n+@item DECL_ANTICIPATED\n+This predicate holds if the function is a built-in function but its\n+prototype is not yet explicitly declared. \n+\n+@item DECL_EXTERN_C_FUNCTION_P\n+This predicate holds if the function is declared as an\n+`@code{extern \"C\"}' function.\n+\n @item DECL_LINKONCE_P\n This macro holds if multiple copies of this function may be emitted in\n various translation units.  It is the responsibility of the linker to\n@@ -1043,15 +1156,42 @@ FIXME: This macro is not yet implemented.\n This macro holds if the function is a member of a class, rather than a\n member of a namespace.\n \n+@item DECL_STATIC_FUNCTION_P\n+This predicate holds if the function a static member function.\n+\n @item DECL_NONSTATIC_MEMBER_FUNCTION_P\n This macro holds for a non-static member function.\n \n+@item DECL_CONST_MEMFUNC_P\n+This predicate holds for a @code{const}-member function.\n+\n+@item DECL_VOLATILE_MEMFUNC_P\n+This predicate holds for a @code{volatile}-member function.\n+\n @item DECL_CONSTRUCTOR_P\n This macro holds if the function is a constructor.\n \n+@item DECL_NONCONVERTING_P\n+This predicate holds if the constructor is a non-converting constructor.\n+\n+@item DECL_COMPLETE_CONSTRUCTOR_P\n+This predicate holds for a function which is a constructor for an object\n+of a complete type.\n+\n+@item DECL_BASE_CONSTRUCTOR_P\n+This predicate holds for a function which is a constructor for a base\n+class sub-object.\n+\n+@item DECL_COPY_CONSTRUCTOR_P\n+This predicate holds for a function which is a copy-constructor.\n+\n @item DECL_DESTRUCTOR_P\n This macro holds if the function is a destructor.\n \n+@item DECL_COMPLETE_DESTRUCTOR_P\n+This predicate holds if the function is the destructor for an object a\n+complet type.\n+\n @item DECL_OVERLOADED_OPERATOR_P\n This macro holds if the function is an overloaded operator.\n \n@@ -1091,6 +1231,9 @@ Finally, the thunk should jump to the location given\n by @code{DECL_INITIAL}; this will always be an expression for the\n address of a function.\n \n+@item DECL_NON_THUNK_FUNCTION_P\n+This predicate holds if the function is @emph{not} a thunk function.\n+\n @item GLOBAL_INIT_PRIORITY\n If either @code{DECL_GLOBAL_CTOR_P} or @code{DECL_GLOBAL_DTOR_P} holds,\n then this gives the initialization priority for the function.  The\n@@ -1118,6 +1261,19 @@ This macro returns the @code{RESULT_DECL} for the function.\n This macro returns the @code{FUNCTION_TYPE} or @code{METHOD_TYPE} for\n the function.\n \n+@item TYPE_RAISES_EXCEPTIONS\n+This macro returns the list of exceptions that a (member-)function can\n+raise.  The returned list, if non @code{NULL}, is comprised of nodes\n+whose @code{TREE_VALUE} represents a type.\n+\n+@item TYPE_NOTHROW_P\n+This predicate holds when the exception-specification of its arguments\n+if of the form `@code{()}'.\n+\n+@item DECL_ARRAY_DELETE_OPERATOR_P\n+This predicate holds if the function an overloaded\n+@code{operator delete[]}.\n+\n @end ftable\n \n @c ---------------------------------------------------------------------"}]}