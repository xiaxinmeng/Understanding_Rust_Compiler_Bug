{"sha": "e0f396bc05ef40940f4f158209df176e6c120b1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmMzk2YmMwNWVmNDA5NDBmNGYxNTgyMDlkZjE3NmU2YzEyMGIxYw==", "commit": {"author": {"name": "Marcus Shawcroft", "email": "marcus.shawcroft@arm.com", "date": "2013-11-19T16:39:32Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2013-11-19T16:39:32Z"}, "message": "[AArch64] Fix over length lines around aarch64_save_or_restore_fprs.\n\nFrom-SVN: r205043", "tree": {"sha": "e4a87b249affde96809c58a3d6dac969d2dcb6d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4a87b249affde96809c58a3d6dac969d2dcb6d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f396bc05ef40940f4f158209df176e6c120b1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f396bc05ef40940f4f158209df176e6c120b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f396bc05ef40940f4f158209df176e6c120b1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f396bc05ef40940f4f158209df176e6c120b1c/comments", "author": {"login": "mshawcroft", "id": 6357566, "node_id": "MDQ6VXNlcjYzNTc1NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6357566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mshawcroft", "html_url": "https://github.com/mshawcroft", "followers_url": "https://api.github.com/users/mshawcroft/followers", "following_url": "https://api.github.com/users/mshawcroft/following{/other_user}", "gists_url": "https://api.github.com/users/mshawcroft/gists{/gist_id}", "starred_url": "https://api.github.com/users/mshawcroft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mshawcroft/subscriptions", "organizations_url": "https://api.github.com/users/mshawcroft/orgs", "repos_url": "https://api.github.com/users/mshawcroft/repos", "events_url": "https://api.github.com/users/mshawcroft/events{/privacy}", "received_events_url": "https://api.github.com/users/mshawcroft/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a9704d007e10db4c8de1e7119e82ce6e5b2553b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9704d007e10db4c8de1e7119e82ce6e5b2553b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9704d007e10db4c8de1e7119e82ce6e5b2553b"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "9740f62667677222a51a5d35357b5da3e047b7a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f396bc05ef40940f4f158209df176e6c120b1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f396bc05ef40940f4f158209df176e6c120b1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0f396bc05ef40940f4f158209df176e6c120b1c", "patch": "@@ -1,3 +1,8 @@\n+2013-11-19  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_save_or_restore_fprs): Fix over\n+\tlength lines.\n+\n 2013-11-19  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/aarch64.md"}, {"sha": "aad9a2987612e24444daf99efe9d0731477d377a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f396bc05ef40940f4f158209df176e6c120b1c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f396bc05ef40940f4f158209df176e6c120b1c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e0f396bc05ef40940f4f158209df176e6c120b1c", "patch": "@@ -1800,7 +1800,8 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n   unsigned regno;\n   unsigned regno2;\n   rtx insn;\n-  rtx (*gen_mem_ref)(enum machine_mode, rtx) = (frame_pointer_needed)? gen_frame_mem : gen_rtx_MEM;\n+  rtx (*gen_mem_ref)(enum machine_mode, rtx)\n+    = (frame_pointer_needed)? gen_frame_mem : gen_rtx_MEM;\n \n \n   for (regno = V0_REGNUM; regno <= V31_REGNUM; regno++)\n@@ -1843,16 +1844,17 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t\t    ( gen_load_pairdf (gen_rtx_REG (DFmode, regno), mem,\n \t\t\t\t       gen_rtx_REG (DFmode, regno2), mem2));\n \n-\t\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DFmode, regno));\n-\t\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DFmode, regno2));\n+\t\t  add_reg_note (insn, REG_CFA_RESTORE,\n+\t\t\t\tgen_rtx_REG (DFmode, regno));\n+\t\t  add_reg_note (insn, REG_CFA_RESTORE,\n+\t\t\t\tgen_rtx_REG (DFmode, regno2));\n \t\t}\n \n \t\t  /* The first part of a frame-related parallel insn\n \t\t     is always assumed to be relevant to the frame\n \t\t     calculations; subsequent parts, are only\n \t\t     frame-related if explicitly marked.  */\n-\t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0,\n-\t\t\t\t\t    1)) = 1;\n+\t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 1)) = 1;\n \t      regno = regno2;\n \t      start_offset += increment * 2;\n \t    }\n@@ -1863,7 +1865,8 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t      else\n \t\t{\n \t\t  insn = emit_move_insn (gen_rtx_REG (DFmode, regno), mem);\n-\t\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DImode, regno));\n+\t\t  add_reg_note (insn, REG_CFA_RESTORE,\n+\t\t\t\tgen_rtx_REG (DImode, regno));\n \t\t}\n \t      start_offset += increment;\n \t    }"}]}