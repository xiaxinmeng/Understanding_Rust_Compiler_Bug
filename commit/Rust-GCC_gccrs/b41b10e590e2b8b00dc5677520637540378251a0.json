{"sha": "b41b10e590e2b8b00dc5677520637540378251a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxYjEwZTU5MGUyYjhiMDBkYzU2Nzc1MjA2Mzc1NDAzNzgyNTFhMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-20T09:42:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-20T09:42:35Z"}, "message": "re PR fortran/38181 (calls to SIZE not optimized out of loops)\n\n\tPR fortran/38181\n\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Inline 2 argument\n\tsize if the second argument is not optional and one argument size\n\tfor rank 1 arrays.\n\n\t* gfortran.dg/array_section_2.f90: Adjust pattern to match\n\tthe inlined size0 instead of a size0 call.\n\nFrom-SVN: r142037", "tree": {"sha": "32fbf0f44b765f71c71b0b6e62f00b0e8df1eb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32fbf0f44b765f71c71b0b6e62f00b0e8df1eb11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b41b10e590e2b8b00dc5677520637540378251a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41b10e590e2b8b00dc5677520637540378251a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41b10e590e2b8b00dc5677520637540378251a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41b10e590e2b8b00dc5677520637540378251a0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc5b3407f2997631c15eebccd8c9260e186f3e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5b3407f2997631c15eebccd8c9260e186f3e0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5b3407f2997631c15eebccd8c9260e186f3e0a"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "5659329f39fcfbc97d354cc820e792f60da37eb8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b10e590e2b8b00dc5677520637540378251a0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b10e590e2b8b00dc5677520637540378251a0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b41b10e590e2b8b00dc5677520637540378251a0", "patch": "@@ -1,3 +1,10 @@\n+2008-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/38181\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Inline 2 argument\n+\tsize if the second argument is not optional and one argument size\n+\tfor rank 1 arrays.\n+\n 2008-11-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/38171"}, {"sha": "22e30ab375d15289664e50527e1c7952aaee25c4", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b10e590e2b8b00dc5677520637540378251a0/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b10e590e2b8b00dc5677520637540378251a0/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=b41b10e590e2b8b00dc5677520637540378251a0", "patch": "@@ -3397,17 +3397,17 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n \t\t\t  gfc_array_index_type);\n       gfc_add_block_to_block (&se->pre, &argse.pre);\n \n-      /* Build the call to size1.  */\n-      fncall1 = build_call_expr (gfor_fndecl_size1, 2,\n-\t\t\t\t arg1, argse.expr);\n-\n       /* Unusually, for an intrinsic, size does not exclude\n \t an optional arg2, so we must test for it.  */  \n       if (actual->expr->expr_type == EXPR_VARIABLE\n \t    && actual->expr->symtree->n.sym->attr.dummy\n \t    && actual->expr->symtree->n.sym->attr.optional)\n \t{\n \t  tree tmp;\n+\t  /* Build the call to size1.  */\n+\t  fncall1 = build_call_expr (gfor_fndecl_size1, 2,\n+\t\t\t\t     arg1, argse.expr);\n+\n \t  gfc_init_se (&argse, NULL);\n \t  argse.want_pointer = 1;\n \t  argse.data_not_needed = 1;\n@@ -3420,11 +3420,36 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n \t\t\t\t  tmp, fncall1, fncall0);\n \t}\n       else\n-\tse->expr = fncall1;\n+\t{\n+\t  se->expr = NULL_TREE;\n+\t  argse.expr = fold_build2 (MINUS_EXPR,\n+\t\t\t\t    gfc_array_index_type, argse.expr,\n+\t\t\t\t    build_int_cst (gfc_array_index_type, 1));\n+\t}\n+    }\n+  else if (expr->value.function.actual->expr->rank == 1)\n+    {\n+      argse.expr = build_int_cst (gfc_array_index_type, 0);\n+      se->expr = NULL_TREE;\n     }\n   else\n     se->expr = fncall0;\n \n+  if (se->expr == NULL_TREE)\n+    {\n+      tree ubound, lbound;\n+\n+      arg1 = build_fold_indirect_ref (arg1);\n+      ubound = gfc_conv_descriptor_ubound (arg1, argse.expr);\n+      lbound = gfc_conv_descriptor_lbound (arg1, argse.expr);\n+      se->expr = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n+\t\t\t      ubound, lbound);\n+      se->expr = fold_build2 (PLUS_EXPR, gfc_array_index_type, se->expr,\n+\t\t\t      build_int_cst (gfc_array_index_type, 1));\n+      se->expr = fold_build2 (MAX_EXPR, gfc_array_index_type, se->expr,\n+\t\t\t      build_int_cst (gfc_array_index_type, 0));\n+    }\n+\n   type = gfc_typenode_for_spec (&expr->ts);\n   se->expr = convert (type, se->expr);\n }"}, {"sha": "1a543e5ac07c2c763a8f599f533837cfccf7f5d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b10e590e2b8b00dc5677520637540378251a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b10e590e2b8b00dc5677520637540378251a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b41b10e590e2b8b00dc5677520637540378251a0", "patch": "@@ -1,5 +1,9 @@\n 2008-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR fortran/38181\n+\t* gfortran.dg/array_section_2.f90: Adjust pattern to match\n+\tthe inlined size0 instead of a size0 call.\n+\n \tPR c++/36631\n \t* g++.dg/template/call5.C: New test.\n "}, {"sha": "ed5208cf3ada6915d7f6489e333b464944fed00d", "filename": "gcc/testsuite/gfortran.dg/array_section_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41b10e590e2b8b00dc5677520637540378251a0/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41b10e590e2b8b00dc5677520637540378251a0/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_2.f90?ref=b41b10e590e2b8b00dc5677520637540378251a0", "patch": "@@ -12,5 +12,5 @@ program test\n    allocate(a(n), temp(n))\n    temp(1:size(a)) = a\n end program\n-! { dg-final { scan-tree-dump-times \"size0\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"MAX_EXPR\\[^\\n\\t\\]+ubound\\[^\\n\\t\\]+lbound\" 1 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}]}