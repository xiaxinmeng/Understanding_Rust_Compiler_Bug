{"sha": "bc31a87ac791bc6e733405b1539fbd710c92813e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMzMWE4N2FjNzkxYmM2ZTczMzQwNWIxNTM5ZmJkNzEwYzkyODEzZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-03T18:38:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-03T18:38:13Z"}, "message": "Add fix-it hint for missing return statement in assignment operators (PR c++/85523)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/85523\n\t* decl.c: Include \"gcc-rich-location.h\".\n\t(add_return_star_this_fixit): New function.\n\t(finish_function): When warning about missing return statements in\n\tfunctions returning non-void, add a \"return *this;\" fix-it hint for\n\tassignment operators.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/85523\n\t* g++.dg/pr85523.C: New test.\n\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r263298", "tree": {"sha": "7f272d1d2161125dd562b5c1f25dd467eb8fcf7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f272d1d2161125dd562b5c1f25dd467eb8fcf7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc31a87ac791bc6e733405b1539fbd710c92813e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc31a87ac791bc6e733405b1539fbd710c92813e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc31a87ac791bc6e733405b1539fbd710c92813e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc31a87ac791bc6e733405b1539fbd710c92813e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e2bd24b7c8ede398669d61852d962498889942a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2bd24b7c8ede398669d61852d962498889942a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2bd24b7c8ede398669d61852d962498889942a"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "90af73d48102bb312b1d11cba000fbd88e377ca2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc31a87ac791bc6e733405b1539fbd710c92813e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc31a87ac791bc6e733405b1539fbd710c92813e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bc31a87ac791bc6e733405b1539fbd710c92813e", "patch": "@@ -1,3 +1,12 @@\n+2018-08-03  David Malcolm  <dmalcolm@redhat.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* decl.c: Include \"gcc-rich-location.h\".\n+\t(add_return_star_this_fixit): New function.\n+\t(finish_function): When warning about missing return statements in\n+\tfunctions returning non-void, add a \"return *this;\" fix-it hint for\n+\tassignment operators.\n+\n 2018-08-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86706"}, {"sha": "cf216a1a960c22a8c5d628f66c6a5a298604668c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc31a87ac791bc6e733405b1539fbd710c92813e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc31a87ac791bc6e733405b1539fbd710c92813e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bc31a87ac791bc6e733405b1539fbd710c92813e", "patch": "@@ -15710,6 +15710,22 @@ maybe_save_function_definition (tree fun)\n     register_constexpr_fundef (fun, DECL_SAVED_TREE (fun));\n }\n \n+/* Attempt to add a fix-it hint to RICHLOC suggesting the insertion\n+   of \"return *this;\" immediately before its location, using FNDECL's\n+   first statement (if any) to give the indentation, if appropriate.  */\n+\n+static void\n+add_return_star_this_fixit (gcc_rich_location *richloc, tree fndecl)\n+{\n+  location_t indent = UNKNOWN_LOCATION;\n+  tree stmts = expr_first (DECL_SAVED_TREE (fndecl));\n+  if (stmts)\n+    indent = EXPR_LOCATION (stmts);\n+  richloc->add_fixit_insert_formatted (\"return *this;\",\n+\t\t\t\t       richloc->get_loc (),\n+\t\t\t\t       indent);\n+}\n+\n /* Finish up a function declaration and compile that function\n    all the way to assembler language output.  The free the storage\n    for the function definition. INLINE_P is TRUE if we just\n@@ -15903,8 +15919,21 @@ finish_function (bool inline_p)\n       && !DECL_DESTRUCTOR_P (fndecl)\n       && targetm.warn_func_return (fndecl))\n     {\n-      warning (OPT_Wreturn_type,\n- \t       \"no return statement in function returning non-void\");\n+      gcc_rich_location richloc (input_location);\n+      /* Potentially add a \"return *this;\" fix-it hint for\n+\t assignment operators.  */\n+      if (IDENTIFIER_ASSIGN_OP_P (DECL_NAME (fndecl)))\n+\t{\n+\t  tree valtype = TREE_TYPE (DECL_RESULT (fndecl));\n+\t  if (TREE_CODE (valtype) == REFERENCE_TYPE\n+\t      && same_type_ignoring_top_level_qualifiers_p\n+\t\t  (TREE_TYPE (valtype), TREE_TYPE (current_class_ref)))\n+\t    if (global_dc->option_enabled (OPT_Wreturn_type,\n+\t\t\t\t\t   global_dc->option_state))\n+\t      add_return_star_this_fixit (&richloc, fndecl);\n+\t}\n+      warning_at (&richloc, OPT_Wreturn_type,\n+\t\t  \"no return statement in function returning non-void\");\n       TREE_NO_WARNING (fndecl) = 1;\n     }\n "}, {"sha": "0b61339a0b426343a9dbded2be9e17942b6f4eca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc31a87ac791bc6e733405b1539fbd710c92813e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc31a87ac791bc6e733405b1539fbd710c92813e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc31a87ac791bc6e733405b1539fbd710c92813e", "patch": "@@ -1,3 +1,9 @@\n+2018-08-03  David Malcolm  <dmalcolm@redhat.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/85523\n+\t* g++.dg/pr85523.C: New test.\n+\n 2018-08-03  Bogdan Harjoc  <harjoc@gmail.com>\n \n \tPR c/86690"}, {"sha": "9cd939be54d178c857841473979b869a221749d2", "filename": "gcc/testsuite/g++.dg/pr85523.C", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc31a87ac791bc6e733405b1539fbd710c92813e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85523.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc31a87ac791bc6e733405b1539fbd710c92813e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85523.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr85523.C?ref=bc31a87ac791bc6e733405b1539fbd710c92813e", "patch": "@@ -0,0 +1,88 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+/* Verify that we emit a \"return *this;\" fix-it hint for\n+   a missing return in an assignment operator.  */\n+\n+struct s1 {\n+  s1& operator=(const s1&) { } // { dg-warning \"no return statement in function returning non-void\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   s1& operator=(const s1&) { }\n+                              ^\n+                              return *this;\n+     { dg-end-multiline-output \"\" } */\n+};\n+\n+/* Likewise for +=.  */\n+\n+struct s2 {\n+  s2& operator+=(const s2&) {} // { dg-warning \"no return statement in function returning non-void\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   s2& operator+=(const s2&) {}\n+                              ^\n+                              return *this;\n+     { dg-end-multiline-output \"\" } */\n+};\n+\n+/* No warning for \"void\" return.  */\n+\n+struct s3 {\n+  void operator=(const s3&) { }\n+};\n+\n+/* We shouldn't issue the fix-it hint if the return type isn't right.  */\n+\n+struct s4 {\n+  int operator=(int) { } // { dg-warning \"no return statement in function returning non-void\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   int operator=(int) { }\n+                        ^\n+     { dg-end-multiline-output \"\" } */\n+};\n+\n+/* Example of a multi-line fix-it hint.  */\n+\n+struct s5 {\n+  int i;\n+  s5& operator=(const s5& z) {\n+    i = z.i;\n+  } // { dg-warning \"no return statement in function returning non-void\" }\n+  /* { dg-begin-multiline-output \"\" }\n++    return *this;\n+   }\n+   ^\n+     { dg-end-multiline-output \"\" } */\n+};\n+\n+/* Example of a multi-line fix-it hint with other statements.  */\n+\n+extern void log (const char *);\n+struct s6 {\n+  int i;\n+  s6& operator=(const s6& z) {\n+    log (\"operator=\\n\");\n+    i = z.i;\n+  } // { dg-warning \"no return statement in function returning non-void\" }\n+  /* { dg-begin-multiline-output \"\" }\n++    return *this;\n+   }\n+   ^\n+     { dg-end-multiline-output \"\" } */\n+};\n+\n+/* Another example of a multi-line fix-it hint with other statements.  */\n+\n+struct s7 {\n+  int i;\n+  s7& operator=(const s6& z) {\n+    if (z.i)\n+      log (\"operator=\\n\");\n+    else\n+      log (\"operator=\\n\");\n+    i = z.i;\n+  } // { dg-warning \"no return statement in function returning non-void\" }\n+  /* { dg-begin-multiline-output \"\" }\n++    return *this;\n+   }\n+   ^\n+     { dg-end-multiline-output \"\" } */\n+};"}]}