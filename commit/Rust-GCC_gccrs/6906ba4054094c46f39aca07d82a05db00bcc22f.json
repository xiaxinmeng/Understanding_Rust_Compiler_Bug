{"sha": "6906ba4054094c46f39aca07d82a05db00bcc22f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkwNmJhNDA1NDA5NGM0NmYzOWFjYTA3ZDgyYTA1ZGIwMGJjYzIyZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-07-05T05:27:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-07-05T05:27:22Z"}, "message": "genattr.c (internal_dfa_insn_code): Output prototype.\n\n\t* genattr.c (internal_dfa_insn_code): Output prototype.\n\t* genattrtab.c: Don't output unnecessary decls, output in ISO C.\n\t* genautomata.c: Likewise.\n\t* genconditions.c: Likewise.\n\t* genemit.c: Likewise.\n\t* genextract.c: Likewise.\n\t* gengenrtl.c: Likewise.\n\t* gengtype.c: Likewise.\n\t* genopinit.c: Likewise.\n\t* genoutput.c: Likewise.\n\t* genpeep.c: Likewise.\n\t* genrecog.c: Likewise.\n\nFrom-SVN: r68959", "tree": {"sha": "d50d814f99d556b8b58fa2fb6da18f5ac6b89824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d50d814f99d556b8b58fa2fb6da18f5ac6b89824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6906ba4054094c46f39aca07d82a05db00bcc22f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6906ba4054094c46f39aca07d82a05db00bcc22f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6906ba4054094c46f39aca07d82a05db00bcc22f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6906ba4054094c46f39aca07d82a05db00bcc22f/comments", "author": null, "committer": null, "parents": [{"sha": "3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d7c150e3f05f0dc6e15c1517c4a652c3ecbcfd8"}], "stats": {"total": 303, "additions": 99, "deletions": 204}, "files": [{"sha": "c7ddc8c974826bacf09b4484318c5267cb7c230c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -1,3 +1,18 @@\n+2003-07-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* genattr.c (internal_dfa_insn_code): Output prototype.\n+\t* genattrtab.c: Don't output unnecessary decls, output in ISO C.\n+\t* genautomata.c: Likewise.\n+\t* genconditions.c: Likewise.\n+\t* genemit.c: Likewise.\n+\t* genextract.c: Likewise.\n+\t* gengenrtl.c: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* genopinit.c: Likewise.\n+\t* genoutput.c: Likewise.\n+\t* genpeep.c: Likewise.\n+\t* genrecog.c: Likewise.\n+\n 2003-07-04  Zack Weinberg  <zack@codesourcery.com>\n \n \t* cpplib.h (CPP_AT_NAME, CPP_OBJC_STRING): New token types."}, {"sha": "587751696404f5eccd4ec6599e38f6079867c859", "filename": "gcc/genattr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -379,6 +379,7 @@ main (int argc, char **argv)\n       printf (\"   insns scheduling heuristics. */\\n\");\n       printf (\"extern int insn_alts (rtx);\\n\\n\");\n       printf (\"#endif\\n\\n\");\n+      printf (\"extern int internal_dfa_insn_code (rtx);\\n\\n\");\n       printf (\"/* Maximal possible number of insns waiting results being\\n\");\n       printf (\"   produced by insns whose execution is not finished. */\\n\");\n       printf (\"extern int max_insn_queue_index;\\n\\n\");"}, {"sha": "990cb0e70f924e1773d3a427a58104dd4d37bafa", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -4765,21 +4765,6 @@ write_attr_get (struct attr_desc *attr)\n      switch we will generate.  */\n   common_av = find_most_used (attr);\n \n-  /* Write out prototype of function.  */\n-  if (!attr->is_numeric)\n-    printf (\"extern enum attr_%s \", attr->name);\n-  else if (attr->unsigned_p)\n-    printf (\"extern unsigned int \");\n-  else\n-    printf (\"extern int \");\n-  /* If the attribute name starts with a star, the remainder is the name of\n-     the subroutine to use, instead of `get_attr_...'.  */\n-  if (attr->name[0] == '*')\n-    printf (\"%s (rtx);\\n\", &attr->name[1]);\n-  else\n-    printf (\"get_attr_%s (%s);\\n\", attr->name,\n-\t    (attr->is_const ? \"void\" : \"rtx\"));\n-\n   /* Write out start of function, then all values with explicit `case' lines,\n      then a `default', then the value with the most uses.  */\n   if (!attr->is_numeric)\n@@ -4792,12 +4777,12 @@ write_attr_get (struct attr_desc *attr)\n   /* If the attribute name starts with a star, the remainder is the name of\n      the subroutine to use, instead of `get_attr_...'.  */\n   if (attr->name[0] == '*')\n-    printf (\"%s (insn)\\n\", &attr->name[1]);\n+    printf (\"%s (rtx insn ATTRIBUTE_UNUSED)\\n\", &attr->name[1]);\n   else if (attr->is_const == 0)\n-    printf (\"get_attr_%s (insn)\\n\", attr->name);\n+    printf (\"get_attr_%s (rtx insn ATTRIBUTE_UNUSED)\\n\", attr->name);\n   else\n     {\n-      printf (\"get_attr_%s ()\\n\", attr->name);\n+      printf (\"get_attr_%s (void)\\n\", attr->name);\n       printf (\"{\\n\");\n \n       for (av = attr->first_value; av; av = av->next)\n@@ -4810,7 +4795,6 @@ write_attr_get (struct attr_desc *attr)\n       return;\n     }\n \n-  printf (\"     rtx insn ATTRIBUTE_UNUSED;\\n\");\n   printf (\"{\\n\");\n \n   if (GET_CODE (common_av->value) == FFS)\n@@ -5284,12 +5268,8 @@ write_eligible_delay (const char *kind)\n   /* Write function prelude.  */\n \n   printf (\"int\\n\");\n-  printf (\"eligible_for_%s (delay_insn, slot, candidate_insn, flags)\\n\",\n+  printf (\"eligible_for_%s (rtx delay_insn ATTRIBUTE_UNUSED, int slot, rtx candidate_insn, int flags ATTRIBUTE_UNUSED)\\n\",\n \t  kind);\n-  printf (\"     rtx delay_insn ATTRIBUTE_UNUSED;\\n\");\n-  printf (\"     int slot;\\n\");\n-  printf (\"     rtx candidate_insn;\\n\");\n-  printf (\"     int flags ATTRIBUTE_UNUSED;\\n\");\n   printf (\"{\\n\");\n   printf (\"  rtx insn;\\n\");\n   printf (\"\\n\");\n@@ -5467,11 +5447,9 @@ write_complex_function (struct function_unit *unit,\n   int using_case;\n   int i;\n \n-  printf (\"static int %s_unit_%s (rtx, rtx);\\n\", unit->name, name);\n   printf (\"static int\\n\");\n-  printf (\"%s_unit_%s (executing_insn, candidate_insn)\\n\", unit->name, name);\n-  printf (\"     rtx executing_insn;\\n\");\n-  printf (\"     rtx candidate_insn;\\n\");\n+  printf (\"%s_unit_%s (rtx executing_insn, rtx candidate_insn)\\n\",\n+\t  unit->name, name);\n   printf (\"{\\n\");\n   printf (\"  rtx insn;\\n\");\n   printf (\"  int casenum;\\n\\n\");\n@@ -5723,8 +5701,7 @@ write_const_num_delay_slots (void)\n \n   if (attr)\n     {\n-      printf (\"int\\nconst_num_delay_slots (insn)\\n\");\n-      printf (\"     rtx insn;\\n\");\n+      printf (\"int\\nconst_num_delay_slots (rtx insn)\\n\");\n       printf (\"{\\n\");\n       printf (\"  switch (recog_memoized (insn))\\n\");\n       printf (\"    {\\n\");"}, {"sha": "1edb5c59740add89fc5e1a4f91b5913f4f9b8de4", "filename": "gcc/genautomata.c", "status": "modified", "additions": 39, "deletions": 69, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -8207,13 +8207,10 @@ output_automata_list_min_issue_delay_code (automata_list_el_t automata_list)\n static void\n output_internal_min_issue_delay_func (void)\n {\n-  fprintf (output_file, \"static int %s (int, struct %s *);\\n\",\n-\t   INTERNAL_MIN_ISSUE_DELAY_FUNC_NAME, CHIP_NAME);\n   fprintf (output_file,\n-\t   \"static int\\n%s (%s, %s)\\n\\tint %s;\\n\\tstruct %s *%s  ATTRIBUTE_UNUSED;\\n\",\n+\t   \"static int\\n%s (int %s, struct %s *%s ATTRIBUTE_UNUSED)\\n\",\n \t   INTERNAL_MIN_ISSUE_DELAY_FUNC_NAME, INTERNAL_INSN_CODE_NAME,\n-\t   CHIP_PARAMETER_NAME, INTERNAL_INSN_CODE_NAME, CHIP_NAME,\n-\t   CHIP_PARAMETER_NAME);\n+\t   CHIP_NAME, CHIP_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s ATTRIBUTE_UNUSED;\\n  int %s = -1;\\n\",\n \t   TEMPORARY_VARIABLE_NAME, RESULT_VARIABLE_NAME);\n   fprintf (output_file, \"\\n  switch (%s)\\n    {\\n\", INTERNAL_INSN_CODE_NAME);\n@@ -8323,12 +8320,9 @@ output_automata_list_transition_code (automata_list_el_t automata_list)\n static void\n output_internal_trans_func (void)\n {\n-  fprintf (output_file, \"static int %s (int, struct %s *);\\n\",\n-\t   INTERNAL_TRANSITION_FUNC_NAME, CHIP_NAME);\n   fprintf (output_file,\n-\t   \"static int\\n%s (%s, %s)\\n\\tint %s;\\n\\tstruct %s *%s  ATTRIBUTE_UNUSED;\\n\",\n+\t   \"static int\\n%s (int %s, struct %s *%s ATTRIBUTE_UNUSED)\\n\",\n \t   INTERNAL_TRANSITION_FUNC_NAME, INTERNAL_INSN_CODE_NAME,\n-\t   CHIP_PARAMETER_NAME, INTERNAL_INSN_CODE_NAME,\n \t   CHIP_NAME, CHIP_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s ATTRIBUTE_UNUSED;\\n\", TEMPORARY_VARIABLE_NAME);\n   fprintf (output_file, \"\\n  switch (%s)\\n    {\\n\", INTERNAL_INSN_CODE_NAME);\n@@ -8373,10 +8367,9 @@ output_dfa_insn_code_func (void)\n   /* Emacs c-mode gets really confused if there's a { or } in column 0\n      inside a string, so don't do that.  */\n   fprintf (output_file, \"\\\n-static void dfa_insn_code_enlarge (int);\\n\\\n static void\\n\\\n-dfa_insn_code_enlarge (uid)\\n\\\n-     int uid;\\n{\\n\\\n+dfa_insn_code_enlarge (int uid)\\n\\\n+{\\n\\\n   int i = %s;\\n\\\n   %s = 2 * uid;\\n\\\n   %s = xrealloc (%s,\\n\\\n@@ -8390,15 +8383,12 @@ dfa_insn_code_enlarge (uid)\\n\\\n \t   DFA_INSN_CODES_LENGTH_VARIABLE_NAME,\n \t   DFA_INSN_CODES_VARIABLE_NAME);\n   fprintf (output_file, \"\\\n-static inline int %s (rtx);\\n\\\n-static inline int\\n%s (%s)\\n\\\n-    rtx %s;\\n{\\n\\\n- int uid = INSN_UID (%s);\\n\\\n- int %s;\\n\\n\",\n-\t   DFA_INSN_CODE_FUNC_NAME, DFA_INSN_CODE_FUNC_NAME,\n-\t   INSN_PARAMETER_NAME, INSN_PARAMETER_NAME,\n-\t   INSN_PARAMETER_NAME,\n-\t   INTERNAL_INSN_CODE_NAME);\n+static inline int\\n%s (rtx %s)\\n\\\n+{\\n\\\n+  int uid = INSN_UID (%s);\\n\\\n+  int %s;\\n\\n\",\n+\t   DFA_INSN_CODE_FUNC_NAME, INSN_PARAMETER_NAME,\n+\t   INSN_PARAMETER_NAME, INTERNAL_INSN_CODE_NAME);\n \n   fprintf (output_file,\n \t   \"  if (uid >= %s)\\n    dfa_insn_code_enlarge (uid);\\n\\n\",\n@@ -8422,9 +8412,9 @@ static inline int\\n%s (%s)\\n\\\n static void\n output_trans_func (void)\n {\n-  fprintf (output_file, \"int\\n%s (%s, %s)\\n\\t%s %s;\\n\\trtx %s;\\n\",\n-\t   TRANSITION_FUNC_NAME, STATE_NAME, INSN_PARAMETER_NAME,\n-\t   STATE_TYPE_NAME, STATE_NAME, INSN_PARAMETER_NAME);\n+  fprintf (output_file, \"int\\n%s (%s %s, rtx %s)\\n\",\n+\t   TRANSITION_FUNC_NAME, STATE_TYPE_NAME, STATE_NAME,\n+\t   INSN_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s;\\n\", INTERNAL_INSN_CODE_NAME);\n   output_internal_insn_code_evaluation (INSN_PARAMETER_NAME,\n \t\t\t\t\tINTERNAL_INSN_CODE_NAME, -1);\n@@ -8497,13 +8487,10 @@ output_automata_list_state_alts_code (automata_list_el_t automata_list)\n static void\n output_internal_state_alts_func (void)\n {\n-  fprintf (output_file, \"static int %s (int, struct %s *);\\n\",\n-\t   INTERNAL_STATE_ALTS_FUNC_NAME, CHIP_NAME);\n   fprintf (output_file,\n-\t   \"static int\\n%s (%s, %s)\\n\\tint %s;\\n\\tstruct %s *%s;\\n\",\n+\t   \"static int\\n%s (int %s, struct %s *%s)\\n\",\n \t   INTERNAL_STATE_ALTS_FUNC_NAME, INTERNAL_INSN_CODE_NAME,\n-\t   CHIP_PARAMETER_NAME, INTERNAL_INSN_CODE_NAME, CHIP_NAME,\n-\t   CHIP_PARAMETER_NAME);\n+\t   CHIP_NAME, CHIP_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s;\\n\", RESULT_VARIABLE_NAME);\n   fprintf (output_file, \"\\n  switch (%s)\\n    {\\n\", INTERNAL_INSN_CODE_NAME);\n   output_insn_code_cases (output_automata_list_state_alts_code);\n@@ -8532,9 +8519,9 @@ output_state_alts_func (void)\n static void\n output_min_issue_delay_func (void)\n {\n-  fprintf (output_file, \"int\\n%s (%s, %s)\\n\\t%s %s;\\n\\trtx %s;\\n\",\n-\t   MIN_ISSUE_DELAY_FUNC_NAME, STATE_NAME, INSN_PARAMETER_NAME,\n-\t   STATE_TYPE_NAME, STATE_NAME, INSN_PARAMETER_NAME);\n+  fprintf (output_file, \"int\\n%s (%s %s, rtx %s)\\n\",\n+\t   MIN_ISSUE_DELAY_FUNC_NAME, STATE_TYPE_NAME, STATE_NAME,\n+\t   INSN_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s;\\n\", INTERNAL_INSN_CODE_NAME);\n   fprintf (output_file, \"\\n  if (%s != 0)\\n    {\\n\", INSN_PARAMETER_NAME);\n   fprintf (output_file, \"      %s = %s (%s);\\n\", INTERNAL_INSN_CODE_NAME,\n@@ -8555,11 +8542,8 @@ output_internal_dead_lock_func (void)\n {\n   automaton_t automaton;\n \n-  fprintf (output_file, \"static int %s (struct %s *);\\n\",\n-\t   INTERNAL_DEAD_LOCK_FUNC_NAME, CHIP_NAME);\n-  fprintf (output_file, \"static int\\n%s (%s)\\n\\tstruct %s *%s;\\n\",\n-\t   INTERNAL_DEAD_LOCK_FUNC_NAME, CHIP_PARAMETER_NAME, CHIP_NAME,\n-\t   CHIP_PARAMETER_NAME);\n+  fprintf (output_file, \"static int\\n%s (struct %s *%s)\\n\",\n+\t   INTERNAL_DEAD_LOCK_FUNC_NAME, CHIP_NAME, CHIP_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n\");\n   for (automaton = description->first_automaton;\n        automaton != NULL;\n@@ -8578,8 +8562,8 @@ output_internal_dead_lock_func (void)\n static void\n output_dead_lock_func (void)\n {\n-  fprintf (output_file, \"int\\n%s (%s)\\n\\t%s %s;\\n\",\n-\t   DEAD_LOCK_FUNC_NAME, STATE_NAME, STATE_TYPE_NAME, STATE_NAME);\n+  fprintf (output_file, \"int\\n%s (%s %s)\\n\",\n+\t   DEAD_LOCK_FUNC_NAME, STATE_TYPE_NAME, STATE_NAME);\n   fprintf (output_file, \"{\\n  return %s (%s);\\n}\\n\\n\",\n \t   INTERNAL_DEAD_LOCK_FUNC_NAME, STATE_NAME);\n }\n@@ -8588,11 +8572,8 @@ output_dead_lock_func (void)\n static void\n output_internal_reset_func (void)\n {\n-  fprintf (output_file, \"static void %s (struct %s *);\\n\",\n-\t   INTERNAL_RESET_FUNC_NAME, CHIP_NAME);\n-  fprintf (output_file, \"static void\\n%s (%s)\\n\\tstruct %s *%s;\\n\",\n-\t   INTERNAL_RESET_FUNC_NAME, CHIP_PARAMETER_NAME,\n-\t   CHIP_NAME, CHIP_PARAMETER_NAME);\n+  fprintf (output_file, \"static void\\n%s (struct %s *%s)\\n\",\n+\t   INTERNAL_RESET_FUNC_NAME, CHIP_NAME, CHIP_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  memset (%s, 0, sizeof (struct %s));\\n}\\n\\n\",\n \t   CHIP_PARAMETER_NAME, CHIP_NAME);\n }\n@@ -8601,16 +8582,16 @@ output_internal_reset_func (void)\n static void\n output_size_func (void)\n {\n-  fprintf (output_file, \"int\\n%s ()\\n\", SIZE_FUNC_NAME);\n+  fprintf (output_file, \"int\\n%s (void)\\n\", SIZE_FUNC_NAME);\n   fprintf (output_file, \"{\\n  return sizeof (struct %s);\\n}\\n\\n\", CHIP_NAME);\n }\n \n /* The function outputs PHR interface function `state_reset'.  */\n static void\n output_reset_func (void)\n {\n-  fprintf (output_file, \"void\\n%s (%s)\\n\\t %s %s;\\n\",\n-\t   RESET_FUNC_NAME, STATE_NAME, STATE_TYPE_NAME, STATE_NAME);\n+  fprintf (output_file, \"void\\n%s (%s %s)\\n\",\n+\t   RESET_FUNC_NAME, STATE_TYPE_NAME, STATE_NAME);\n   fprintf (output_file, \"{\\n  %s (%s);\\n}\\n\\n\", INTERNAL_RESET_FUNC_NAME,\n \t   STATE_NAME);\n }\n@@ -8620,11 +8601,9 @@ static void\n output_min_insn_conflict_delay_func (void)\n {\n   fprintf (output_file,\n-\t   \"int\\n%s (%s, %s, %s)\\n\\t%s %s;\\n\\trtx %s;\\n\\trtx %s;\\n\",\n-\t   MIN_INSN_CONFLICT_DELAY_FUNC_NAME,\n-\t   STATE_NAME, INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME,\n-\t   STATE_TYPE_NAME, STATE_NAME,\n-\t   INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n+\t   \"int\\n%s (%s %s, rtx %s, rtx %s)\\n\",\n+\t   MIN_INSN_CONFLICT_DELAY_FUNC_NAME, STATE_TYPE_NAME,\n+\t   STATE_NAME, INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  struct %s %s;\\n  int %s, %s;\\n\",\n \t   CHIP_NAME, CHIP_NAME, INTERNAL_INSN_CODE_NAME,\n \t   INTERNAL_INSN2_CODE_NAME);\n@@ -8665,18 +8644,11 @@ output_internal_insn_latency_func (void)\n \t  tabletype = \"int\";\n       }\n \n-  fprintf (output_file, \"static int %s (int, int, rtx, rtx);\\n\",\n-\t   INTERNAL_INSN_LATENCY_FUNC_NAME);\n-  fprintf (output_file, \"static int\\n%s (%s, %s, %s, %s)\",\n+  fprintf (output_file, \"static int\\n%s (int %s ATTRIBUTE_UNUSED,\\n\\tint %s ATTRIBUTE_UNUSED,\\n\\trtx %s ATTRIBUTE_UNUSED,\\n\\trtx %s ATTRIBUTE_UNUSED)\\n\",\n \t   INTERNAL_INSN_LATENCY_FUNC_NAME, INTERNAL_INSN_CODE_NAME,\n \t   INTERNAL_INSN2_CODE_NAME, INSN_PARAMETER_NAME,\n \t   INSN2_PARAMETER_NAME);\n-  fprintf (output_file,\n-\t   \"\\n\\tint %s ATTRIBUTE_UNUSED;\\n\\tint %s ATTRIBUTE_UNUSED;\\n\",\n-\t   INTERNAL_INSN_CODE_NAME, INTERNAL_INSN2_CODE_NAME);\n-  fprintf (output_file,\n-\t   \"\\trtx %s ATTRIBUTE_UNUSED;\\n\\trtx %s ATTRIBUTE_UNUSED;\\n{\\n\",\n-\t   INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n+  fprintf (output_file, \"{\\n\");\n \n   if (DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num == 0)\n     {\n@@ -8751,9 +8723,8 @@ output_internal_insn_latency_func (void)\n static void\n output_insn_latency_func (void)\n {\n-  fprintf (output_file, \"int\\n%s (%s, %s)\\n\\trtx %s;\\n\\trtx %s;\\n\",\n-\t   INSN_LATENCY_FUNC_NAME, INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME,\n-\t   INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n+  fprintf (output_file, \"int\\n%s (rtx %s, rtx %s)\\n\",\n+\t   INSN_LATENCY_FUNC_NAME, INSN_PARAMETER_NAME, INSN2_PARAMETER_NAME);\n   fprintf (output_file, \"{\\n  int %s, %s;\\n\",\n \t   INTERNAL_INSN_CODE_NAME, INTERNAL_INSN2_CODE_NAME);\n   output_internal_insn_code_evaluation (INSN_PARAMETER_NAME,\n@@ -8774,9 +8745,8 @@ output_print_reservation_func (void)\n   int i, j;\n \n   fprintf (output_file,\n-\t   \"void\\n%s (%s, %s)\\n\\tFILE *%s;\\n\\trtx %s ATTRIBUTE_UNUSED;\\n{\\n\",\n+\t   \"void\\n%s (FILE *%s, rtx %s ATTRIBUTE_UNUSED)\\n{\\n\",\n            PRINT_RESERVATION_FUNC_NAME, FILE_PARAMETER_NAME,\n-           INSN_PARAMETER_NAME, FILE_PARAMETER_NAME,\n            INSN_PARAMETER_NAME);\n \n   if (DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num == 0)\n@@ -8941,7 +8911,7 @@ static void\n output_dfa_clean_insn_cache_func (void)\n {\n   fprintf (output_file,\n-\t   \"void\\n%s ()\\n{\\n  int %s;\\n\\n\",\n+\t   \"void\\n%s (void)\\n{\\n  int %s;\\n\\n\",\n \t   DFA_CLEAN_INSN_CACHE_FUNC_NAME, I_VARIABLE_NAME);\n   fprintf (output_file,\n \t   \"  for (%s = 0; %s < %s; %s++)\\n    %s [%s] = -1;\\n}\\n\\n\",\n@@ -8955,7 +8925,7 @@ static void\n output_dfa_start_func (void)\n {\n   fprintf (output_file,\n-\t   \"void\\n%s ()\\n{\\n  %s = get_max_uid ();\\n\",\n+\t   \"void\\n%s (void)\\n{\\n  %s = get_max_uid ();\\n\",\n \t   DFA_START_FUNC_NAME, DFA_INSN_CODES_LENGTH_VARIABLE_NAME);\n   fprintf (output_file, \"  %s = (int *) xmalloc (%s * sizeof (int));\\n\",\n \t   DFA_INSN_CODES_VARIABLE_NAME, DFA_INSN_CODES_LENGTH_VARIABLE_NAME);\n@@ -8966,7 +8936,7 @@ output_dfa_start_func (void)\n static void\n output_dfa_finish_func (void)\n {\n-  fprintf (output_file, \"void\\n%s ()\\n{\\n  free (%s);\\n}\\n\\n\",\n+  fprintf (output_file, \"void\\n%s (void)\\n{\\n  free (%s);\\n}\\n\\n\",\n \t   DFA_FINISH_FUNC_NAME, DFA_INSN_CODES_VARIABLE_NAME);\n }\n "}, {"sha": "2d4cf8d2a611b37360092542b40f466bb26dcfcf", "filename": "gcc/genconditions.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -118,8 +118,7 @@ write_header (void)\n /* Dummy external declarations.  */\\n\\\n extern rtx insn;\\n\\\n extern rtx ins1;\\n\\\n-extern rtx operands[];\\n\\\n-extern int next_insn_tests_no_inequality (rtx);\\n\");\n+extern rtx operands[];\\n\");\n \n   puts (\"\\\n /* If we don't have __builtin_constant_p, or it's not acceptable in\\n\\"}, {"sha": "edeb1542bd0ba15088aa3f0b59919284c773d27b", "filename": "gcc/genemit.c", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -386,14 +386,15 @@ gen_insn (rtx insn, int lineno)\n \n   /* Output the function name and argument declarations.  */\n   printf (\"rtx\\ngen_%s (\", XSTR (insn, 0));\n-  for (i = 0; i < operands; i++)\n-    if (i)\n-      printf (\", operand%d\", i);\n-    else\n-      printf (\"operand%d\", i);\n+  if (operands)\n+    for (i = 0; i < operands; i++)\n+      if (i)\n+\tprintf (\",\\n\\trtx operand%d ATTRIBUTE_UNUSED\", i);\n+      else\n+\tprintf (\"rtx operand%d ATTRIBUTE_UNUSED\", i);\n+  else\n+    printf (\"void\");\n   printf (\")\\n\");\n-  for (i = 0; i < operands; i++)\n-    printf (\"     rtx operand%d ATTRIBUTE_UNUSED;\\n\", i);\n   printf (\"{\\n\");\n \n   /* Output code to construct and return the rtl for the instruction body */\n@@ -439,14 +440,15 @@ gen_expand (rtx expand)\n \n   /* Output the function name and argument declarations.  */\n   printf (\"rtx\\ngen_%s (\", XSTR (expand, 0));\n-  for (i = 0; i < operands; i++)\n-    if (i)\n-      printf (\", operand%d\", i);\n-    else\n-      printf (\"operand%d\", i);\n+  if (operands)\n+    for (i = 0; i < operands; i++)\n+      if (i)\n+\tprintf (\",\\n\\trtx operand%d\", i);\n+      else\n+\tprintf (\"rtx operand%d\", i);\n+  else\n+    printf (\"void\");\n   printf (\")\\n\");\n-  for (i = 0; i < operands; i++)\n-    printf (\"     rtx operand%d;\\n\", i);\n   printf (\"{\\n\");\n \n   /* If we don't have any C code to write, only one insn is being written,\n@@ -585,16 +587,13 @@ gen_split (rtx split)\n     {\n       printf (\"extern rtx gen_%s_%d (rtx, rtx *);\\n\",\n \t      name, insn_code_number);\n-      printf (\"rtx\\ngen_%s_%d (curr_insn, operands)\\n\",\n+      printf (\"rtx\\ngen_%s_%d (rtx curr_insn ATTRIBUTE_UNUSED, rtx *operands)\\n\",\n \t      name, insn_code_number);\n-      printf (\"     rtx curr_insn ATTRIBUTE_UNUSED;\\n\");\n-      printf (\"     rtx *operands%s;\\n\", unused);\n     }\n   else\n     {\n       printf (\"extern rtx gen_split_%d (rtx *);\\n\", insn_code_number);\n-      printf (\"rtx\\ngen_%s_%d (operands)\\n\", name, insn_code_number);\n-      printf (\"      rtx *operands%s;\\n\", unused);\n+      printf (\"rtx\\ngen_%s_%d (rtx *operands)\\n\", name, insn_code_number);\n     }\n   printf (\"{\\n\");\n \n@@ -678,8 +677,7 @@ output_add_clobbers ()\n   struct clobber_ent *ent;\n   int i;\n \n-  printf (\"\\n\\nvoid\\nadd_clobbers (pattern, insn_code_number)\\n\");\n-  printf (\"     rtx pattern ATTRIBUTE_UNUSED;\\n     int insn_code_number;\\n\");\n+  printf (\"\\n\\nvoid\\nadd_clobbers (rtx pattern ATTRIBUTE_UNUSED, int insn_code_number)\\n\");\n   printf (\"{\\n\");\n   printf (\"  switch (insn_code_number)\\n\");\n   printf (\"    {\\n\");\n@@ -717,8 +715,7 @@ output_added_clobbers_hard_reg_p (void)\n   struct clobber_ent *ent;\n   int clobber_p, used;\n \n-  printf (\"\\n\\nint\\nadded_clobbers_hard_reg_p (insn_code_number)\\n\");\n-  printf (\"     int insn_code_number;\\n\");\n+  printf (\"\\n\\nint\\nadded_clobbers_hard_reg_p (int insn_code_number)\\n\");\n   printf (\"{\\n\");\n   printf (\"  switch (insn_code_number)\\n\");\n   printf (\"    {\\n\");"}, {"sha": "cf2f2ab50fd04126beb66e0d02c3d5283535fc23", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -381,8 +381,7 @@ from the machine description file `md'.  */\\n\\n\");\n      of any missing operand whose numbers are skipped by a given pattern.  */\n   printf (\"static rtx junk ATTRIBUTE_UNUSED;\\n\");\n \n-  printf (\"void\\ninsn_extract (insn)\\n\");\n-  printf (\"     rtx insn;\\n\");\n+  printf (\"void\\ninsn_extract (rtx insn)\\n\");\n   printf (\"{\\n\");\n   printf (\"  rtx *ro = recog_data.operand;\\n\");\n   printf (\"  rtx **ro_loc = recog_data.operand_loc;\\n\");"}, {"sha": "80ff784ba540d8f57e2fd64051e37d5b8668ffc7", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -259,15 +259,12 @@ gendef (const char *format)\n   /* Start by writing the definition of the function name and the types\n      of the arguments.  */\n \n-  printf (\"rtx\\ngen_rtx_fmt_%s (code, mode\", format);\n+  printf (\"rtx\\ngen_rtx_fmt_%s (RTX_CODE code, enum machine_mode mode\", format);\n   for (p = format, i = 0; *p != 0; p++)\n     if (*p != '0')\n-      printf (\", arg%d\", i++);\n+      printf (\",\\n\\t%sarg%d\", type_from_format (*p), i++);\n \n-  puts (\")\\n     RTX_CODE code;\\n     enum machine_mode mode;\");\n-  for (p = format, i = 0; *p != 0; p++)\n-    if (*p != '0')\n-      printf (\"     %sarg%d;\\n\", type_from_format (*p), i++);\n+  puts (\")\");\n \n   /* Now write out the body of the function itself, which allocates\n      the memory and initializes it.  */"}, {"sha": "101b37825114d869e46d0ad337e263bbeb974fe3", "filename": "gcc/gengtype.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -1960,8 +1960,7 @@ write_func_for_structure  (type_p orig_s, type_p s, type_p *param,\n       oprintf (d.of, \"gt_%s_\", wtd->prefix);\n       output_mangled_typename (d.of, orig_s);\n     }\n-  oprintf (d.of, \" (x_p)\\n\");\n-  oprintf (d.of, \"      void *x_p;\\n\");\n+  oprintf (d.of, \" (void *x_p)\\n\");\n   oprintf (d.of, \"{\\n\");\n   oprintf (d.of, \"  %s %s * %sx = (%s %s *)x_p;\\n\",\n \t   s->kind == TYPE_UNION ? \"union\" : \"struct\", s->u.s.tag,\n@@ -2209,11 +2208,7 @@ write_local_func_for_structure (type_p orig_s, type_p s, type_p *param)\n   oprintf (d.of, \"void\\n\");\n   oprintf (d.of, \"gt_pch_p_\");\n   output_mangled_typename (d.of, orig_s);\n-  oprintf (d.of, \" (this_obj, x_p, op, cookie)\\n\");\n-  oprintf (d.of, \"      void *this_obj ATTRIBUTE_UNUSED;\\n\");\n-  oprintf (d.of, \"      void *x_p;\\n\");\n-  oprintf (d.of, \"      gt_pointer_operator op ATTRIBUTE_UNUSED;\\n\");\n-  oprintf (d.of, \"      void *cookie ATTRIBUTE_UNUSED;\\n\");\n+  oprintf (d.of, \" (void *this_obj ATTRIBUTE_UNUSED,\\n\\tvoid *x_p,\\n\\tgt_pointer_operator op ATTRIBUTE_UNUSED,\\n\\tvoid *cookie ATTRIBUTE_UNUSED)\\n\");\n   oprintf (d.of, \"{\\n\");\n   oprintf (d.of, \"  %s %s * const x ATTRIBUTE_UNUSED = (%s %s *)x_p;\\n\",\n \t   s->kind == TYPE_UNION ? \"union\" : \"struct\", s->u.s.tag,"}, {"sha": "a0728faf09bda4321ac7fbaa1bb3f80e2258755c", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -352,7 +352,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"optabs.h\\\"\\n\");\n   printf (\"#include \\\"reload.h\\\"\\n\\n\");\n \n-  printf (\"void\\ninit_all_optabs ()\\n{\\n\");\n+  printf (\"void\\ninit_all_optabs (void)\\n{\\n\");\n \n   /* Read the machine description.  */\n "}, {"sha": "e3810749ea3df434af4bfbb450d65d1489c5b31e", "filename": "gcc/genoutput.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -174,7 +174,6 @@ struct data\n static struct data *idata, **idata_end = &idata;\n \f\n static void output_prologue (void);\n-static void output_predicate_decls (void);\n static void output_operand_data (void);\n static void output_insn_data (void);\n static void output_get_insn_name (void);\n@@ -243,45 +242,6 @@ output_prologue (void)\n   printf (\"#include \\\"target.h\\\"\\n\");\n }\n \n-\n-/* We need to define all predicates used.  Keep a list of those we\n-   have defined so far.  There normally aren't very many predicates\n-   used, so a linked list should be fast enough.  */\n-struct predicate { const char *name; struct predicate *next; };\n-\n-static void\n-output_predicate_decls (void)\n-{\n-  struct predicate *predicates = 0;\n-  struct operand_data *d;\n-  struct predicate *p, *next;\n-\n-  for (d = odata; d; d = d->next)\n-    if (d->predicate && d->predicate[0])\n-      {\n-\tfor (p = predicates; p; p = p->next)\n-\t  if (strcmp (p->name, d->predicate) == 0)\n-\t    break;\n-\n-\tif (p == 0)\n-\t  {\n-\t    printf (\"extern int %s (rtx, enum machine_mode);\\n\",\n-\t\t    d->predicate);\n-\t    p = (struct predicate *) xmalloc (sizeof (struct predicate));\n-\t    p->name = d->predicate;\n-\t    p->next = predicates;\n-\t    predicates = p;\n-\t  }\n-      }\n-\n-  printf (\"\\n\\n\");\n-  for (p = predicates; p; p = next)\n-    {\n-      next = p->next;\n-      free (p);\n-    }\n-}\n-\n static void\n output_operand_data (void)\n {\n@@ -415,8 +375,7 @@ static void\n output_get_insn_name (void)\n {\n   printf (\"const char *\\n\");\n-  printf (\"get_insn_name (code)\\n\");\n-  printf (\"     int code;\\n\");\n+  printf (\"get_insn_name (int code)\\n\");\n   printf (\"{\\n\");\n   printf (\"  if (code == NOOP_MOVE_INSN_CODE)\\n\");\n   printf (\"    return \\\"NOOP_MOVE\\\";\\n\");\n@@ -678,12 +637,9 @@ process_template (struct data *d, const char *template)\n       d->template = 0;\n       d->output_format = INSN_OUTPUT_FORMAT_FUNCTION;\n \n-      printf (\"\\nstatic const char *output_%d (rtx *, rtx);\\n\",\n-\t      d->code_number);\n       puts (\"\\nstatic const char *\");\n-      printf (\"output_%d (operands, insn)\\n\", d->code_number);\n-      puts (\"     rtx *operands ATTRIBUTE_UNUSED;\");\n-      puts (\"     rtx insn ATTRIBUTE_UNUSED;\");\n+      printf (\"output_%d (rtx *operands ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)\\n\",\n+\t      d->code_number);\n       puts (\"{\");\n \n       puts (template + 1);\n@@ -1023,7 +979,6 @@ main (int argc, char **argv)\n     }\n \n   printf(\"\\n\\n\");\n-  output_predicate_decls ();\n   output_operand_data ();\n   output_insn_data ();\n   output_get_insn_name ();"}, {"sha": "4c6e64b79abdd4d54770ba52eb08835e18a87421", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -386,7 +386,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"extern rtx peep_operand[];\\n\\n\");\n   printf (\"#define operands peep_operand\\n\\n\");\n \n-  printf (\"rtx\\npeephole (ins1)\\n     rtx ins1;\\n{\\n\");\n+  printf (\"rtx\\npeephole (rtx ins1)\\n{\\n\");\n   printf (\"  rtx insn ATTRIBUTE_UNUSED, x ATTRIBUTE_UNUSED, pat ATTRIBUTE_UNUSED;\\n\\n\");\n \n   /* Early out: no peepholes for insns followed by barriers.  */"}, {"sha": "9723126b274f4fdaf03233bb05acdc8eeec2c8d7", "filename": "gcc/genrecog.c", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6906ba4054094c46f39aca07d82a05db00bcc22f/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=6906ba4054094c46f39aca07d82a05db00bcc22f", "patch": "@@ -2272,28 +2272,18 @@ write_subroutine (struct decision_head *head, enum routine_type type)\n   switch (type)\n     {\n     case RECOG:\n-      printf (\"%sint recog%s (rtx, rtx, int *);\\n\", s_or_e, extension);\n       printf (\"%sint\\n\\\n-recog%s (x0, insn, pnum_clobbers)\\n\\\n-     rtx x0 ATTRIBUTE_UNUSED;\\n\\\n-     rtx insn ATTRIBUTE_UNUSED;\\n\\\n-     int *pnum_clobbers ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n+recog%s (rtx x0 ATTRIBUTE_UNUSED,\\n\\trtx insn ATTRIBUTE_UNUSED,\\n\\tint *pnum_clobbers ATTRIBUTE_UNUSED)\\n\", s_or_e, extension);\n       break;\n     case SPLIT:\n-      printf (\"%srtx split%s (rtx, rtx);\\n\", s_or_e, extension);\n       printf (\"%srtx\\n\\\n-split%s (x0, insn)\\n\\\n-     rtx x0 ATTRIBUTE_UNUSED;\\n\\\n-     rtx insn ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n+split%s (rtx x0 ATTRIBUTE_UNUSED, rtx insn ATTRIBUTE_UNUSED)\\n\",\n+\t      s_or_e, extension);\n       break;\n     case PEEPHOLE2:\n-      printf (\"%srtx peephole2%s (rtx, rtx, int *);\\n\",\n-\t      s_or_e, extension);\n       printf (\"%srtx\\n\\\n-peephole2%s (x0, insn, _pmatch_len)\\n\\\n-     rtx x0 ATTRIBUTE_UNUSED;\\n\\\n-     rtx insn ATTRIBUTE_UNUSED;\\n\\\n-     int *_pmatch_len ATTRIBUTE_UNUSED;\\n\", s_or_e, extension);\n+peephole2%s (rtx x0 ATTRIBUTE_UNUSED,\\n\\trtx insn ATTRIBUTE_UNUSED,\\n\\tint *_pmatch_len ATTRIBUTE_UNUSED)\\n\",\n+\t      s_or_e, extension);\n       break;\n     }\n "}]}