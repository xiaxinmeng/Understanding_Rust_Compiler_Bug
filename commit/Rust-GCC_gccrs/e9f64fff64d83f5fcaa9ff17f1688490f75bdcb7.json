{"sha": "e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmNjRmZmY2NGQ4M2Y1ZmNhYTlmZjE3ZjE2ODg0OTBmNzViZGNiNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-02T17:34:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-03T14:24:52Z"}, "message": "libstdc++: Reduce header dependencies in <regex>\n\nThis reduces the size of <regex> a little. This is one of the largest\nand slowest headers in the library.\n\nBy using <bits/stl_algobase.h> and <bits/stl_algo.h> instead of\n<algorithm> we don't need to parse all the parallel algorithms and\nstd::ranges:: algorithms that are not needed by <regex>. Similarly, by\nusing <bits/stl_tree.h> and <bits/stl_map.h> instead of <map> we don't\nneed to parse the definition of std::multimap.\n\nThe _State_info type is not movable or copyable, so doesn't need to use\nstd::unique_ptr<bool[]> to manage a bitset, we can just delete it in the\ndestructor. It would use a lot less space if we used a bitset instead,\nbut that would be an ABI break. We could do it for the versioned\nnamespace, but this patch doesn't do so. For future reference, using\nvector<bool> would work, but would increase sizeof(_State_info) by two\npointers, because it's three times as large as unique_ptr<bool[]>. We\ncan't use std::bitset because the length isn't constant. We want a\nbitset with a non-constant but fixed length.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex_executor.h (_State_info): Replace\n\tunique_ptr<bool[]> with array of bool.\n\t* include/bits/regex_executor.tcc: Likewise.\n\t* include/bits/regex_scanner.tcc: Replace std::strchr with\n\t__builtin_strchr.\n\t* include/std/regex: Replace standard headers with smaller\n\tinternal ones.\n\t* testsuite/28_regex/traits/char/lookup_classname.cc: Include\n\t<string.h> for strlen.\n\t* testsuite/28_regex/traits/char/lookup_collatename.cc:\n\tLikewise.", "tree": {"sha": "92ee44a5f8db749c9b67bbd1add54b966ac17eb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92ee44a5f8db749c9b67bbd1add54b966ac17eb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98d7f305d5081bc91c16b9d2b4d62196b86bca86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d7f305d5081bc91c16b9d2b4d62196b86bca86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d7f305d5081bc91c16b9d2b4d62196b86bca86"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "014b4e830647c44da9c1752e182cdc979bfa60ba", "filename": "libstdc++-v3/include/bits/regex_executor.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.h?ref=e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "patch": "@@ -195,6 +195,11 @@ namespace __detail\n \t  : _M_visited_states(new bool[__n]()), _M_start(__start)\n \t  { }\n \n+\t  ~_State_info() { delete[] _M_visited_states; }\n+\n+\t  _State_info(const _State_info&) = delete;\n+\t  _State_info& operator=(const _State_info&) = delete;\n+\n \t  bool _M_visited(_StateIdT __i)\n \t  {\n \t    if (_M_visited_states[__i])\n@@ -212,7 +217,7 @@ namespace __detail\n \t  // Saves states that need to be considered for the next character.\n \t  vector<pair<_StateIdT, _ResultsVec>>\t_M_match_queue;\n \t  // Indicates which states are already visited.\n-\t  unique_ptr<bool[]>\t\t\t_M_visited_states;\n+\t  bool*     _M_visited_states;\n \t  // To record current solution.\n \t  _StateIdT _M_start;\n \t};"}, {"sha": "3cefeda48a3d927529ce4209c39ad4bdd165eaf1", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "patch": "@@ -122,7 +122,7 @@ namespace __detail\n \t  _M_has_sol = false;\n \t  if (_M_states._M_match_queue.empty())\n \t    break;\n-\t  std::fill_n(_M_states._M_visited_states.get(), _M_nfa.size(), false);\n+\t  std::fill_n(_M_states._M_visited_states, _M_nfa.size(), false);\n \t  auto __old_queue = std::move(_M_states._M_match_queue);\n \t  for (auto& __task : __old_queue)\n \t    {"}, {"sha": "a9d6a6136489ca1007f1801459c6fd143cc0d226", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "patch": "@@ -98,7 +98,7 @@ namespace __detail\n     {\n       auto __c = *_M_current++;\n \n-      if (std::strchr(_M_spec_char, _M_ctype.narrow(__c, ' ')) == nullptr)\n+      if (__builtin_strchr(_M_spec_char, _M_ctype.narrow(__c, ' ')) == nullptr)\n \t{\n \t  _M_token = _S_token_ord_char;\n \t  _M_value.assign(1, __c);\n@@ -394,7 +394,7 @@ namespace __detail\n \t\t\t    \"Unexpected end of regex when escaping.\");\n \n       auto __c = *_M_current;\n-      auto __pos = std::strchr(_M_spec_char, _M_ctype.narrow(__c, '\\0'));\n+      auto __pos = __builtin_strchr(_M_spec_char, _M_ctype.narrow(__c, '\\0'));\n \n       if (__pos != nullptr && *__pos != '\\0')\n \t{"}, {"sha": "04fb8b2d9714dc85ba434a5c895d754fd13f5bef", "filename": "libstdc++-v3/include/std/regex", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "patch": "@@ -35,26 +35,26 @@\n # include <bits/c++0x_warning.h>\n #else\n \n-#include <algorithm>\n #include <bitset>\n-#ifdef _GLIBCXX_DEBUG\n-# include <iosfwd>\n-#endif\n-#include <iterator>\n #include <locale>\n-#include <memory>\n #include <sstream>\n #include <stack>\n #include <stdexcept>\n #include <string>\n-#include <vector>\n-#include <map>\n-#include <cstring>\n \n #include <ext/aligned_buffer.h>\n #include <ext/numeric_traits.h>\n+#include <bits/shared_ptr.h>\n #include <bits/std_function.h>\n+#include <bits/stl_algobase.h> // std::copy, std::fill_n\n+#include <bits/stl_algo.h>     // std::sort, std::unique\n+#include <bits/stl_iterator_base_types.h> // std::iterator_traits\n #include <bits/stl_pair.h>\n+#include <bits/stl_tree.h>\n+#include <bits/stl_map.h>\n+#include <bits/stl_vector.h>\n+#include <bits/stl_bvector.h>\n+#include <bits/vector.tcc>\n #include <bits/regex_constants.h>\n #include <bits/regex_error.h>\n #include <bits/regex_automaton.h>"}, {"sha": "6c2baf21b5634351fdb213131d24b2c783456016", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/lookup_classname.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_classname.cc?ref=e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "patch": "@@ -27,6 +27,7 @@\n \n #include <regex>\n #include <forward_list>\n+#include <string.h>\n #include <testsuite_hooks.h>\n \n void"}, {"sha": "35447d49f7c7f10661dcf30edacc46ee9d631f1c", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/lookup_collatename.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Flookup_collatename.cc?ref=e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7", "patch": "@@ -27,6 +27,7 @@\n \n #include <regex>\n #include <forward_list>\n+#include <string.h>\n #include <testsuite_hooks.h>\n \n void"}]}