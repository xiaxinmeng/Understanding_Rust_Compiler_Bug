{"sha": "bf866c202187704045043091c764bace53fb2ae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4NjZjMjAyMTg3NzA0MDQ1MDQzMDkxYzc2NGJhY2U1M2ZiMmFlNQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2009-08-24T22:54:25Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2009-08-24T22:54:25Z"}, "message": "builtin-math-6.c (link_error): Accept a value number, update all callers and synchronize results for latest MPC.\n\n\t* gcc.dg/torture/builtin-math-6.c (link_error): Accept a value\n\tnumber, update all callers and synchronize results for latest MPC.\n\nFrom-SVN: r151065", "tree": {"sha": "20b8596b1678cc535f9fbefd7125a33063220da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b8596b1678cc535f9fbefd7125a33063220da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf866c202187704045043091c764bace53fb2ae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf866c202187704045043091c764bace53fb2ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf866c202187704045043091c764bace53fb2ae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf866c202187704045043091c764bace53fb2ae5/comments", "author": null, "committer": null, "parents": [{"sha": "c331341273322605ca5d5d0dcd76ac3dee77c271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c331341273322605ca5d5d0dcd76ac3dee77c271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c331341273322605ca5d5d0dcd76ac3dee77c271"}], "stats": {"total": 170, "additions": 89, "deletions": 81}, "files": [{"sha": "330e1cc80aa99fe97fff293b5bf2e7f1cf627858", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf866c202187704045043091c764bace53fb2ae5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf866c202187704045043091c764bace53fb2ae5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf866c202187704045043091c764bace53fb2ae5", "patch": "@@ -1,3 +1,8 @@\n+2009-08-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-math-6.c (link_error): Accept a value\n+\tnumber, update all callers and synchronize results for latest MPC.\n+\n 2009-08-21  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/warn/Wunused-17.C: New."}, {"sha": "1bf367a5debc1cb4df15643cde1ad9ccc0468292", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-6.c", "status": "modified", "additions": 84, "deletions": 81, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf866c202187704045043091c764bace53fb2ae5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf866c202187704045043091c764bace53fb2ae5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-6.c?ref=bf866c202187704045043091c764bace53fb2ae5", "patch": "@@ -8,8 +8,11 @@\n /* { dg-do link } */\n /* { dg-require-effective-target mpc_pow } */\n \n-/* All references to link_error should go away at compile-time.  */\n-extern void link_error(int);\n+/* All references to link_error should go away at compile-time.  The\n+   first number is the line number and the second is the value number\n+   among several tests.  These appear in the tree dump file and aid in\n+   debugging.  */\n+extern void link_error(int, int);\n \n #define CONJ(X) __builtin_conjf(X)\n \n@@ -32,69 +35,69 @@ extern void link_error(int);\n   (CKSGN_L(__real__ (X), __real__ (Y)) || CKSGN_L (__imag__ (X), __imag__ (Y)))\n \n /* For complex numbers, test that FUNC(ARG) == (RES).  */\n-#define TESTIT_COMPLEX(FUNC, ARG, RES) do { \\\n+#define TESTIT_COMPLEX(VAL_NUM, FUNC, ARG, RES) do { \\\n   if (__builtin_##FUNC##f(ARG) != (RES) \\\n     || COMPLEX_CKSGN_F(__builtin_##FUNC##f(ARG), (RES))) \\\n-      link_error(__LINE__); \\\n+      link_error(__LINE__, VAL_NUM); \\\n   if (__builtin_##FUNC(ARG) != (RES) \\\n     || COMPLEX_CKSGN(__builtin_##FUNC(ARG), (RES))) \\\n-      link_error(__LINE__); \\\n+      link_error(__LINE__, VAL_NUM); \\\n   if (__builtin_##FUNC##l(ARG) != (RES) \\\n     || COMPLEX_CKSGN_L(__builtin_##FUNC##l(ARG), (RES))) \\\n-      link_error(__LINE__); \\\n+      link_error(__LINE__, VAL_NUM); \\\n   } while (0)\n \n /* For complex numbers, call the TESTIT_COMPLEX macro for all\n    combinations of neg and conj.  */\n #define TESTIT_COMPLEX_ALLNEG(FUNC, ARG, RES1, RES2, RES3, RES4) do { \\\n-  TESTIT_COMPLEX(FUNC, (_Complex float)(ARG), RES1); \\\n-  TESTIT_COMPLEX(FUNC, -CONJ(ARG), RES2); \\\n-  TESTIT_COMPLEX(FUNC, CONJ(ARG), RES3); \\\n-  TESTIT_COMPLEX(FUNC, -(_Complex float)(ARG), RES4); \\\n+  TESTIT_COMPLEX(1, FUNC, (_Complex float)(ARG), RES1); \\\n+  TESTIT_COMPLEX(2, FUNC, -CONJ(ARG), RES2); \\\n+  TESTIT_COMPLEX(3, FUNC, CONJ(ARG), RES3); \\\n+  TESTIT_COMPLEX(4, FUNC, -(_Complex float)(ARG), RES4); \\\n } while (0)\n \n /* For complex numbers, call the TESTIT_COMPLEX_R macro for all\n    combinations of neg and conj.  */\n #define TESTIT_COMPLEX_R_ALLNEG(FUNC, ARG, RES1, RES2, RES3, RES4) do { \\\n-  TESTIT_COMPLEX_R(FUNC, (_Complex float)(ARG), RES1); \\\n-  TESTIT_COMPLEX_R(FUNC, -CONJ(ARG), RES2); \\\n-  TESTIT_COMPLEX_R(FUNC, CONJ(ARG), RES3); \\\n-  TESTIT_COMPLEX_R(FUNC, -(_Complex float)(ARG), RES4); \\\n+  TESTIT_COMPLEX_R(1, FUNC, (_Complex float)(ARG), RES1); \\\n+  TESTIT_COMPLEX_R(2, FUNC, -CONJ(ARG), RES2); \\\n+  TESTIT_COMPLEX_R(3, FUNC, CONJ(ARG), RES3); \\\n+  TESTIT_COMPLEX_R(4, FUNC, -(_Complex float)(ARG), RES4); \\\n } while (0)\n \n /* For complex numbers, test that FUNC(ARG0, ARG1) == (RES).  */\n-#define TESTIT_COMPLEX2(FUNC, ARG0, ARG1, RES) do { \\\n+#define TESTIT_COMPLEX2(VAL_NUM, FUNC, ARG0, ARG1, RES) do { \\\n   if (__builtin_##FUNC##f(ARG0, ARG1) != (RES) \\\n     || COMPLEX_CKSGN_F(__builtin_##FUNC##f(ARG0, ARG1), (RES))) \\\n-      link_error(__LINE__); \\\n+      link_error(__LINE__, VAL_NUM); \\\n   if (__builtin_##FUNC(ARG0, ARG1) != (RES) \\\n     || COMPLEX_CKSGN(__builtin_##FUNC(ARG0, ARG1), (RES))) \\\n-      link_error(__LINE__); \\\n+      link_error(__LINE__, VAL_NUM); \\\n   if (__builtin_##FUNC##l(ARG0, ARG1) != (RES) \\\n     || COMPLEX_CKSGN_L(__builtin_##FUNC##l(ARG0, ARG1), (RES))) \\\n-      link_error(__LINE__); \\\n+      link_error(__LINE__, VAL_NUM); \\\n   } while (0)\n \n /* For complex numbers, call the TESTIT_COMPLEX2 macro for all\n    combinations of neg and conj.  */\n #define TESTIT_COMPLEX2_ALLNEG(FUNC, ARG0, ARG1, RES1, RES2, RES3, RES4, RES5,\\\n  RES6, RES7, RES8, RES9, RES10, RES11, RES12, RES13, RES14, RES15, RES16) do{ \\\n-  TESTIT_COMPLEX2(FUNC, (_Complex float)(ARG0),(_Complex float)(ARG1), RES1);\\\n-  TESTIT_COMPLEX2(FUNC, (_Complex float)(ARG0),CONJ(ARG1), RES2); \\\n-  TESTIT_COMPLEX2(FUNC, (_Complex float)(ARG0),-(_Complex float)(ARG1), RES3); \\\n-  TESTIT_COMPLEX2(FUNC, (_Complex float)(ARG0),-CONJ(ARG1), RES4); \\\n-  TESTIT_COMPLEX2(FUNC, -(_Complex float)(ARG0),(_Complex float)(ARG1), RES5); \\\n-  TESTIT_COMPLEX2(FUNC, -(_Complex float)(ARG0),CONJ(ARG1), RES6); \\\n-  TESTIT_COMPLEX2(FUNC, -(_Complex float)(ARG0),-(_Complex float)(ARG1), RES7); \\\n-  TESTIT_COMPLEX2(FUNC, -(_Complex float)(ARG0),-CONJ(ARG1), RES8); \\\n-  TESTIT_COMPLEX2(FUNC, CONJ(ARG0),(_Complex float)(ARG1), RES9); \\\n-  TESTIT_COMPLEX2(FUNC, CONJ(ARG0),CONJ(ARG1), RES10); \\\n-  TESTIT_COMPLEX2(FUNC, CONJ(ARG0),-(_Complex float)(ARG1), RES11); \\\n-  TESTIT_COMPLEX2(FUNC, CONJ(ARG0),-CONJ(ARG1), RES12); \\\n-  TESTIT_COMPLEX2(FUNC, -CONJ(ARG0),(_Complex float)(ARG1), RES13); \\\n-  TESTIT_COMPLEX2(FUNC, -CONJ(ARG0),CONJ(ARG1), RES14); \\\n-  TESTIT_COMPLEX2(FUNC, -CONJ(ARG0),-(_Complex float)(ARG1), RES15); \\\n-  TESTIT_COMPLEX2(FUNC, -CONJ(ARG0),-CONJ(ARG1), RES16); \\\n+  TESTIT_COMPLEX2(1, FUNC, (_Complex float)(ARG0),(_Complex float)(ARG1), RES1);\\\n+  TESTIT_COMPLEX2(2, FUNC, (_Complex float)(ARG0),CONJ(ARG1), RES2); \\\n+  TESTIT_COMPLEX2(3, FUNC, (_Complex float)(ARG0),-(_Complex float)(ARG1), RES3); \\\n+  TESTIT_COMPLEX2(4, FUNC, (_Complex float)(ARG0),-CONJ(ARG1), RES4); \\\n+  TESTIT_COMPLEX2(5, FUNC, -(_Complex float)(ARG0),(_Complex float)(ARG1), RES5); \\\n+  TESTIT_COMPLEX2(6, FUNC, -(_Complex float)(ARG0),CONJ(ARG1), RES6); \\\n+  TESTIT_COMPLEX2(7, FUNC, -(_Complex float)(ARG0),-(_Complex float)(ARG1), RES7); \\\n+  TESTIT_COMPLEX2(8, FUNC, -(_Complex float)(ARG0),-CONJ(ARG1), RES8); \\\n+  TESTIT_COMPLEX2(9, FUNC, CONJ(ARG0),(_Complex float)(ARG1), RES9); \\\n+  TESTIT_COMPLEX2(10, FUNC, CONJ(ARG0),CONJ(ARG1), RES10); \\\n+  TESTIT_COMPLEX2(11, FUNC, CONJ(ARG0),-(_Complex float)(ARG1), RES11); \\\n+  TESTIT_COMPLEX2(12, FUNC, CONJ(ARG0),-CONJ(ARG1), RES12); \\\n+  TESTIT_COMPLEX2(13, FUNC, -CONJ(ARG0),(_Complex float)(ARG1), RES13); \\\n+  TESTIT_COMPLEX2(14, FUNC, -CONJ(ARG0),CONJ(ARG1), RES14); \\\n+  TESTIT_COMPLEX2(15, FUNC, -CONJ(ARG0),-(_Complex float)(ARG1), RES15); \\\n+  TESTIT_COMPLEX2(16, FUNC, -CONJ(ARG0),-CONJ(ARG1), RES16); \\\n } while (0)\n \n /* Return TRUE if X differs from EXPECTED by more than 1%.  If\n@@ -124,55 +127,55 @@ extern void link_error(int);\n    merely checking that we get relatively sane results.  I.e. the GCC\n    builtin is hooked up to the correct MPC function call.  We first\n    check the magnitude and then the sign.  */\n-#define TESTIT_COMPLEX_R(FUNC, ARG, RES) do { \\\n+#define TESTIT_COMPLEX_R(VAL_NUM, FUNC, ARG, RES) do { \\\n   if (COMPLEX_DIFF1PCT_F (__builtin_##FUNC##f(ARG), (RES)) \\\n       || COMPLEX_CKSGN_F(__builtin_##FUNC##f(ARG), (RES))) \\\n-    link_error(__LINE__); \\\n+    link_error(__LINE__, VAL_NUM); \\\n   if (COMPLEX_DIFF1PCT (__builtin_##FUNC(ARG), (RES)) \\\n       || COMPLEX_CKSGN(__builtin_##FUNC(ARG), (RES))) \\\n-    link_error(__LINE__); \\\n+    link_error(__LINE__, VAL_NUM); \\\n   if (COMPLEX_DIFF1PCT (__builtin_##FUNC(ARG), (RES)) \\\n       || COMPLEX_CKSGN(__builtin_##FUNC(ARG), (RES))) \\\n-    link_error(__LINE__); \\\n+    link_error(__LINE__, VAL_NUM); \\\n   } while (0)\n \n /* Range test, for complex numbers check that FUNC(ARG0, ARG1) is\n    within 1% of RES.  This is NOT a test for accuracy to the last-bit,\n    we're merely checking that we get relatively sane results.\n    I.e. the GCC builtin is hooked up to the correct MPC function call.\n    We first check the magnitude and then the sign.  */\n-#define TESTIT_COMPLEX_R2(FUNC, ARG0, ARG1, RES) do { \\\n+#define TESTIT_COMPLEX_R2(VAL_NUM, FUNC, ARG0, ARG1, RES) do { \\\n   if (COMPLEX_DIFF1PCT_F (__builtin_##FUNC##f(ARG0, ARG1), (RES)) \\\n       || COMPLEX_CKSGN_F (__builtin_##FUNC##f(ARG0, ARG1), (RES))) \\\n-    link_error(__LINE__); \\\n+    link_error(__LINE__, VAL_NUM); \\\n   if (COMPLEX_DIFF1PCT (__builtin_##FUNC(ARG0, ARG1), (RES)) \\\n       || COMPLEX_CKSGN (__builtin_##FUNC(ARG0, ARG1), (RES))) \\\n-    link_error(__LINE__); \\\n+    link_error(__LINE__, VAL_NUM); \\\n   if (COMPLEX_DIFF1PCT_L (__builtin_##FUNC##l(ARG0, ARG1), (RES)) \\\n       || COMPLEX_CKSGN_L (__builtin_##FUNC##l(ARG0, ARG1), (RES))) \\\n-    link_error(__LINE__); \\\n+    link_error(__LINE__, VAL_NUM); \\\n   } while (0)\n \n /* For complex numbers, call the TESTIT_COMPLEX_R2 macro for all\n    combinations of neg and conj.  */\n #define TESTIT_COMPLEX_R2_ALLNEG(FUNC, ARG0, ARG1, RES1, RES2, RES3, RES4, RES5,\\\n  RES6, RES7, RES8, RES9, RES10, RES11, RES12, RES13, RES14, RES15, RES16) do{ \\\n-  TESTIT_COMPLEX_R2(FUNC, (_Complex float)(ARG0),(_Complex float)(ARG1), RES1);\\\n-  TESTIT_COMPLEX_R2(FUNC, (_Complex float)(ARG0),CONJ(ARG1), RES2); \\\n-  TESTIT_COMPLEX_R2(FUNC, (_Complex float)(ARG0),-(_Complex float)(ARG1), RES3); \\\n-  TESTIT_COMPLEX_R2(FUNC, (_Complex float)(ARG0),-CONJ(ARG1), RES4); \\\n-  TESTIT_COMPLEX_R2(FUNC, -(_Complex float)(ARG0),(_Complex float)(ARG1), RES5); \\\n-  TESTIT_COMPLEX_R2(FUNC, -(_Complex float)(ARG0),CONJ(ARG1), RES6); \\\n-  TESTIT_COMPLEX_R2(FUNC, -(_Complex float)(ARG0),-(_Complex float)(ARG1), RES7); \\\n-  TESTIT_COMPLEX_R2(FUNC, -(_Complex float)(ARG0),-CONJ(ARG1), RES8); \\\n-  TESTIT_COMPLEX_R2(FUNC, CONJ(ARG0),(_Complex float)(ARG1), RES9); \\\n-  TESTIT_COMPLEX_R2(FUNC, CONJ(ARG0),CONJ(ARG1), RES10); \\\n-  TESTIT_COMPLEX_R2(FUNC, CONJ(ARG0),-(_Complex float)(ARG1), RES11); \\\n-  TESTIT_COMPLEX_R2(FUNC, CONJ(ARG0),-CONJ(ARG1), RES12); \\\n-  TESTIT_COMPLEX_R2(FUNC, -CONJ(ARG0),(_Complex float)(ARG1), RES13); \\\n-  TESTIT_COMPLEX_R2(FUNC, -CONJ(ARG0),CONJ(ARG1), RES14); \\\n-  TESTIT_COMPLEX_R2(FUNC, -CONJ(ARG0),-(_Complex float)(ARG1), RES15); \\\n-  TESTIT_COMPLEX_R2(FUNC, -CONJ(ARG0),-CONJ(ARG1), RES16); \\\n+  TESTIT_COMPLEX_R2(1, FUNC, (_Complex float)(ARG0),(_Complex float)(ARG1), RES1);\\\n+  TESTIT_COMPLEX_R2(2, FUNC, (_Complex float)(ARG0),CONJ(ARG1), RES2); \\\n+  TESTIT_COMPLEX_R2(3, FUNC, (_Complex float)(ARG0),-(_Complex float)(ARG1), RES3); \\\n+  TESTIT_COMPLEX_R2(4, FUNC, (_Complex float)(ARG0),-CONJ(ARG1), RES4); \\\n+  TESTIT_COMPLEX_R2(5, FUNC, -(_Complex float)(ARG0),(_Complex float)(ARG1), RES5); \\\n+  TESTIT_COMPLEX_R2(6, FUNC, -(_Complex float)(ARG0),CONJ(ARG1), RES6); \\\n+  TESTIT_COMPLEX_R2(7, FUNC, -(_Complex float)(ARG0),-(_Complex float)(ARG1), RES7); \\\n+  TESTIT_COMPLEX_R2(8, FUNC, -(_Complex float)(ARG0),-CONJ(ARG1), RES8); \\\n+  TESTIT_COMPLEX_R2(9, FUNC, CONJ(ARG0),(_Complex float)(ARG1), RES9); \\\n+  TESTIT_COMPLEX_R2(10, FUNC, CONJ(ARG0),CONJ(ARG1), RES10); \\\n+  TESTIT_COMPLEX_R2(11, FUNC, CONJ(ARG0),-(_Complex float)(ARG1), RES11); \\\n+  TESTIT_COMPLEX_R2(12, FUNC, CONJ(ARG0),-CONJ(ARG1), RES12); \\\n+  TESTIT_COMPLEX_R2(13, FUNC, -CONJ(ARG0),(_Complex float)(ARG1), RES13); \\\n+  TESTIT_COMPLEX_R2(14, FUNC, -CONJ(ARG0),CONJ(ARG1), RES14); \\\n+  TESTIT_COMPLEX_R2(15, FUNC, -CONJ(ARG0),-(_Complex float)(ARG1), RES15); \\\n+  TESTIT_COMPLEX_R2(16, FUNC, -CONJ(ARG0),-CONJ(ARG1), RES16); \\\n } while (0)\n \n int main (void)\n@@ -214,10 +217,10 @@ int main (void)\n \t\t\t   1.000040F - 0.001988FI, -1.000040F - 0.001988FI,\n \t\t\t   1.000040F + 0.001988FI, -1.000040F + 0.001988FI);\n \n-  TESTIT_COMPLEX (clog, 1, 0);\n-  TESTIT_COMPLEX_R (clog, -1, 3.141593FI);\n-  TESTIT_COMPLEX (clog, CONJ(1), CONJ(0)); /* Fails with mpc-0.6.  */\n-  TESTIT_COMPLEX_R (clog, CONJ(-1), CONJ(3.141593FI)); /* Fails with mpc-0.6.  */\n+  TESTIT_COMPLEX (1, clog, 1, 0);\n+  TESTIT_COMPLEX_R (1, clog, -1, 3.141593FI);\n+  TESTIT_COMPLEX (1, clog, CONJ(1), CONJ(0)); /* Fails with mpc-0.6.  */\n+  TESTIT_COMPLEX_R (1, clog, CONJ(-1), CONJ(3.141593FI)); /* Fails with mpc-0.6.  */\n   TESTIT_COMPLEX_R_ALLNEG (clog, 3.45678F + 2.34567FI,\n \t\t\t   1.429713F + 0.596199FI, 1.429713F + 2.545394FI,\n \t\t\t   1.429713F - 0.596199FI, 1.429713F - 2.545394FI);\n@@ -229,33 +232,33 @@ int main (void)\n \t\t\t   1.953750F - 0.600299FI, 0.600299F - 1.953750FI);\n   \n   TESTIT_COMPLEX2_ALLNEG (cpow, 1, 0,\n-\t\t\t  1, 1, CONJ(1), CONJ(1), 1, CONJ(1), 1, 1,\n-\t\t\t  CONJ(1), CONJ(1), 1, 1, 1, 1, CONJ(1), 1);\n+\t\t\t  1, 1, CONJ(1), CONJ(1), CONJ(1), CONJ(1), 1, 1,\n+\t\t\t  CONJ(1), CONJ(1), 1, 1, 1, 1, CONJ(1), CONJ(1));\n   TESTIT_COMPLEX2_ALLNEG (cpow, 1.FI, 0,\n-\t\t\t  1, 1, CONJ(1), 1, 1, CONJ(1), 1, 1,\n-\t\t\t  1, CONJ(1), 1, 1, 1, 1, CONJ(1), 1);\n+\t\t\t  1, 1, CONJ(1), CONJ(1), CONJ(1), CONJ(1), 1, 1,\n+\t\t\t  CONJ(1), CONJ(1), 1, 1, 1, 1, CONJ(1), CONJ(1));\n   TESTIT_COMPLEX_R2_ALLNEG (cpow, 2, 3,\n-\t\t\t    8, 8, CONJ(1/8.F), 1/8.F, CONJ(-8), -8, -1/8.F, -1/8.F,\n-\t\t\t    8, CONJ(8), 1/8.F, 1/8.F, -8, -8, -1/8.F, CONJ(-1/8.F));\n+\t\t\t    8, 8, CONJ(1/8.F), CONJ(1/8.F), CONJ(-8), CONJ(-8), -1/8.F, -1/8.F,\n+\t\t\t    CONJ(8), CONJ(8), 1/8.F, 1/8.F, -8, -8, CONJ(-1/8.F), CONJ(-1/8.F));\n   TESTIT_COMPLEX_R2_ALLNEG (cpow, 3, 4,\n-\t\t\t    81, 81, CONJ(1/81.F), 1/81.F, 81, 81, CONJ(1/81.F), 1/81.F,\n-\t\t\t    81, CONJ(81), 1/81.F, 1/81.F, 81, CONJ(81), 1/81.F, 1/81.F);\n+\t\t\t    81, 81, CONJ(1/81.F), CONJ(1/81.F), CONJ(81), CONJ(81), 1/81.F, 1/81.F,\n+\t\t\t    CONJ(81), CONJ(81), 1/81.F, 1/81.F, 81, 81, CONJ(1/81.F), CONJ(1/81.F));\n   TESTIT_COMPLEX_R2_ALLNEG (cpow, 3, 5,\n-\t\t\t    243, 243, CONJ(1/243.F), 1/243.F, CONJ(-243), -243, -1/243.F, -1/243.F,\n-\t\t\t    243, CONJ(243), 1/243.F, 1/243.F, -243, -243, -1/243.F, CONJ(-1/243.F));\n+\t\t\t    243, 243, CONJ(1/243.F), CONJ(1/243.F), CONJ(-243), CONJ(-243), -1/243.F, -1/243.F,\n+\t\t\t    CONJ(243), CONJ(243), 1/243.F, 1/243.F, -243, -243, CONJ(-1/243.F), CONJ(-1/243.F));\n   TESTIT_COMPLEX_R2_ALLNEG (cpow, 4, 2,\n-\t\t\t    16, 16, CONJ(1/16.F), 1/16.F, 16, 16, CONJ(1/16.F), 1/16.F,\n-\t\t\t    16, CONJ(16), 1/16.F, 1/16.F, 16, CONJ(16), 1/16.F, 1/16.F);\n+\t\t\t    16, 16, CONJ(1/16.F), CONJ(1/16.F), CONJ(16), CONJ(16), 1/16.F, 1/16.F,\n+\t\t\t    CONJ(16), CONJ(16), 1/16.F, 1/16.F, 16, 16, CONJ(1/16.F), CONJ(1/16.F));\n   TESTIT_COMPLEX_R2_ALLNEG (cpow, 1.5, 3,\n-\t\t\t    3.375F, 3.375F, CONJ(1/3.375F), 1/3.375F, CONJ(-3.375F), -3.375F, -1/3.375F, -1/3.375F,\n-\t\t\t    3.375F, CONJ(3.375F), 1/3.375F, 1/3.375F, -3.375F, -3.375F, -1/3.375F, CONJ(-1/3.375F));\n+\t\t\t    3.375F, 3.375F, CONJ(1/3.375F), CONJ(1/3.375F), CONJ(-3.375F), CONJ(-3.375F), -1/3.375F, -1/3.375F,\n+\t\t\t    CONJ(3.375F), CONJ(3.375F), 1/3.375F, 1/3.375F, -3.375F, -3.375F, CONJ(-1/3.375F), CONJ(-1/3.375F));\n   \n-  TESTIT_COMPLEX2 (cpow, 16, 0.25F, 2);\n+  TESTIT_COMPLEX2 (1, cpow, 16, 0.25F, 2);\n \n-  TESTIT_COMPLEX_R2 (cpow, 3.45678F + 2.34567FI, 1.23456 + 4.56789FI, 0.212485F + 0.319304FI);\n-  TESTIT_COMPLEX_R2 (cpow, 3.45678F - 2.34567FI, 1.23456 + 4.56789FI, 78.576402F + -41.756208FI);\n-  TESTIT_COMPLEX_R2 (cpow, -1.23456F + 2.34567FI, 2.34567 - 1.23456FI, -110.629847F + -57.021655FI);\n-  TESTIT_COMPLEX_R2 (cpow, -1.23456F - 2.34567FI, 2.34567 - 1.23456FI, 0.752336F + 0.199095FI);\n+  TESTIT_COMPLEX_R2 (1, cpow, 3.45678F + 2.34567FI, 1.23456 + 4.56789FI, 0.212485F + 0.319304FI);\n+  TESTIT_COMPLEX_R2 (1, cpow, 3.45678F - 2.34567FI, 1.23456 + 4.56789FI, 78.576402F + -41.756208FI);\n+  TESTIT_COMPLEX_R2 (1, cpow, -1.23456F + 2.34567FI, 2.34567 - 1.23456FI, -110.629847F + -57.021655FI);\n+  TESTIT_COMPLEX_R2 (1, cpow, -1.23456F - 2.34567FI, 2.34567 - 1.23456FI, 0.752336F + 0.199095FI);\n   \n   return 0;\n }"}]}