{"sha": "2873c8af66e1248734bb638a49e6bc53f5e45382", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3M2M4YWY2NmUxMjQ4NzM0YmI2MzhhNDllNmJjNTNmNWU0NTM4Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-14T08:14:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-14T08:14:19Z"}, "message": "dwarf2: Emit DW_TAG_unspecified_parameters even in late DWARF [PR97599]\n\nAldy's PR71855 fix avoided emitting multiple redundant\nDW_TAG_unspecified_parameters sub-DIEs of a single DIE by restricting\nit to early dwarf only.  That unfortunately means if we need to emit\nanother DIE for the function (whether it is for LTO, or e.g. because of\nIPA cloning), we don't emit DW_TAG_unspecified_parameters, it remains\nsolely in the DW_AT_abstract_origin's referenced DIE.\nBut DWARF consumers don't really use DW_TAG_unspecified_parameters\nfrom there, like we duplicate DW_TAG_formal_parameter sub-DIEs even in the\nclones because either they have some more specific location, or e.g.\na function clone could have fewer or different argument types etc.,\nthey need to assume that originally stdarg function isn't later stdarg etc.\nUnfortunately, while for DW_TAG_formal_parameter sub-DIEs, we can use the\nhash tabs to look the PARM_DECLs if we already have the DIEs, for\nDW_TAG_unspecified_parameters we don't have an easy way to look it up.\n\nThe following patch handles it by trying to figure out if we are creating a\nfresh new DIE (in that case we add DW_TAG_unspecified_parameters if it is\nstdarg), or if gen_subprogram_die is called again on an pre-existing DIE\nto fill in some further details (then it will not touch it).\n\nExcept for lto, subr_die != old_die would be good enough, but unfortunately\nfor LTO the new DIE that will refer to early dwarf created DIE is created\non the fly during lookup_decl_die.  So the patch tracks if the DIE has\nno children before any children are added to it.\n\n2020-11-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/97599\n\t* dwarf2out.c (gen_subprogram_die): Call\n\tgen_unspecified_parameters_die even if not early dwarf, but only\n\tif subr_die is a newly created DIE.", "tree": {"sha": "a1d551a59f742ec8c66436e192c5c341e25b44c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1d551a59f742ec8c66436e192c5c341e25b44c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2873c8af66e1248734bb638a49e6bc53f5e45382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2873c8af66e1248734bb638a49e6bc53f5e45382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2873c8af66e1248734bb638a49e6bc53f5e45382", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2873c8af66e1248734bb638a49e6bc53f5e45382/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8270a7238ba1b535cc81848ef026d30e9d96447f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8270a7238ba1b535cc81848ef026d30e9d96447f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8270a7238ba1b535cc81848ef026d30e9d96447f"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "54eb445665ca326703c431dbc707cd9d16230241", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2873c8af66e1248734bb638a49e6bc53f5e45382/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2873c8af66e1248734bb638a49e6bc53f5e45382/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2873c8af66e1248734bb638a49e6bc53f5e45382", "patch": "@@ -22779,6 +22779,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n   tree origin = decl_ultimate_origin (decl);\n   dw_die_ref subr_die;\n   dw_die_ref old_die = lookup_decl_die (decl);\n+  bool old_die_had_no_children = false;\n \n   /* This function gets called multiple times for different stages of\n      the debug process.  For example, for func() in this code:\n@@ -22870,6 +22871,9 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n   if (old_die && declaration)\n     return;\n \n+  if (in_lto_p && old_die && old_die->die_child == NULL)\n+    old_die_had_no_children = true;\n+\n   /* Now that the C++ front end lazily declares artificial member fns, we\n      might need to retrofit the declaration into its class.  */\n   if (!declaration && !origin && !old_die\n@@ -23389,6 +23393,10 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t  else if (DECL_INITIAL (decl) == NULL_TREE)\n \t    gen_unspecified_parameters_die (decl, subr_die);\n \t}\n+      else if ((subr_die != old_die || old_die_had_no_children)\n+\t       && prototype_p (TREE_TYPE (decl))\n+\t       && stdarg_p (TREE_TYPE (decl)))\n+\tgen_unspecified_parameters_die (decl, subr_die);\n     }\n \n   if (subr_die != old_die)"}]}