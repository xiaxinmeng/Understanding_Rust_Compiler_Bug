{"sha": "91c7c5edd2c1d31bf379be1d077b39644391cc31", "node_id": "C_kwDOANBUbNoAKDkxYzdjNWVkZDJjMWQzMWJmMzc5YmUxZDA3N2IzOTY0NDM5MWNjMzE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-24T08:09:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-24T10:12:13Z"}, "message": "middle-end/105711 - properly handle CONST_INT when expanding bitfields\n\nThis is another place where we fail to pass down the mode of a\nCONST_INT.\n\n2022-05-24  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/105711\n\t* expmed.cc (extract_bit_field_as_subreg): Add op0_mode parameter\n\tand use it.\n\t(extract_bit_field_1): Pass down the mode of op0 to\n\textract_bit_field_as_subreg.\n\n\t* gcc.target/i386/pr105711.c: New testcase.", "tree": {"sha": "e963e823cd7d1a3d144ac265109e861df755f310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e963e823cd7d1a3d144ac265109e861df755f310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91c7c5edd2c1d31bf379be1d077b39644391cc31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c7c5edd2c1d31bf379be1d077b39644391cc31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91c7c5edd2c1d31bf379be1d077b39644391cc31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91c7c5edd2c1d31bf379be1d077b39644391cc31/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fb2b4f7ea6b80ae75d3efb6f86e7c6179080535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fb2b4f7ea6b80ae75d3efb6f86e7c6179080535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fb2b4f7ea6b80ae75d3efb6f86e7c6179080535"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "c3e4aa8019a69431641f8b1097e32e9d28892039", "filename": "gcc/expmed.cc", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c7c5edd2c1d31bf379be1d077b39644391cc31/gcc%2Fexpmed.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c7c5edd2c1d31bf379be1d077b39644391cc31/gcc%2Fexpmed.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.cc?ref=91c7c5edd2c1d31bf379be1d077b39644391cc31", "patch": "@@ -1605,20 +1605,22 @@ extract_bit_field_using_extv (const extraction_insn *extv, rtx op0,\n   return NULL_RTX;\n }\n \n-/* See whether it would be valid to extract the part of OP0 described\n-   by BITNUM and BITSIZE into a value of mode MODE using a subreg\n-   operation.  Return the subreg if so, otherwise return null.  */\n+/* See whether it would be valid to extract the part of OP0 with\n+   mode OP0_MODE described by BITNUM and BITSIZE into a value of\n+   mode MODE using a subreg operation.\n+   Return the subreg if so, otherwise return null.  */\n \n static rtx\n extract_bit_field_as_subreg (machine_mode mode, rtx op0,\n+\t\t\t     machine_mode op0_mode,\n \t\t\t     poly_uint64 bitsize, poly_uint64 bitnum)\n {\n   poly_uint64 bytenum;\n   if (multiple_p (bitnum, BITS_PER_UNIT, &bytenum)\n       && known_eq (bitsize, GET_MODE_BITSIZE (mode))\n-      && lowpart_bit_field_p (bitnum, bitsize, GET_MODE (op0))\n-      && TRULY_NOOP_TRUNCATION_MODES_P (mode, GET_MODE (op0)))\n-    return simplify_gen_subreg (mode, op0, GET_MODE (op0), bytenum);\n+      && lowpart_bit_field_p (bitnum, bitsize, op0_mode)\n+      && TRULY_NOOP_TRUNCATION_MODES_P (mode, op0_mode))\n+    return simplify_gen_subreg (mode, op0, op0_mode, bytenum);\n   return NULL_RTX;\n }\n \n@@ -1777,7 +1779,8 @@ extract_bit_field_1 (rtx str_rtx, poly_uint64 bitsize, poly_uint64 bitnum,\n \t for valid bitsize and bitnum, so we don't need to do that here.  */\n       if (VECTOR_MODE_P (mode))\n \t{\n-\t  rtx sub = extract_bit_field_as_subreg (mode, op0, bitsize, bitnum);\n+\t  rtx sub = extract_bit_field_as_subreg (mode, op0, outermode,\n+\t\t\t\t\t\t bitsize, bitnum);\n \t  if (sub)\n \t    return sub;\n \t}\n@@ -1824,9 +1827,10 @@ extract_bit_field_1 (rtx str_rtx, poly_uint64 bitsize, poly_uint64 bitnum,\n   /* Extraction of a full MODE1 value can be done with a subreg as long\n      as the least significant bit of the value is the least significant\n      bit of either OP0 or a word of OP0.  */\n-  if (!MEM_P (op0) && !reverse)\n+  if (!MEM_P (op0) && !reverse && op0_mode.exists (&imode))\n     {\n-      rtx sub = extract_bit_field_as_subreg (mode1, op0, bitsize, bitnum);\n+      rtx sub = extract_bit_field_as_subreg (mode1, op0, imode,\n+\t\t\t\t\t     bitsize, bitnum);\n       if (sub)\n \treturn convert_extracted_bit_field (sub, mode, tmode, unsignedp);\n     }"}, {"sha": "6d07e08138ac73fef8c9d8e432c9a94398e4ab60", "filename": "gcc/testsuite/gcc.target/i386/pr105711.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91c7c5edd2c1d31bf379be1d077b39644391cc31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105711.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91c7c5edd2c1d31bf379be1d077b39644391cc31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105711.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105711.c?ref=91c7c5edd2c1d31bf379be1d077b39644391cc31", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --param=sccvn-max-alias-queries-per-access=0\" } */\n+\n+int *p, a, b;\n+\n+void\n+foo (_Complex char c)\n+{\n+  c /= 3040;\n+  a %= __builtin_memcmp (1 + &c, p, 1);\n+  b = c + __imag__ c;\n+}"}]}