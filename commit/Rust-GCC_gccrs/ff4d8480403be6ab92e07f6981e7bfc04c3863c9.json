{"sha": "ff4d8480403be6ab92e07f6981e7bfc04c3863c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY0ZDg0ODA0MDNiZTZhYjkyZTA3ZjY5ODFlN2JmYzA0YzM4NjNjOQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-11-14T12:35:36Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-11-14T12:35:36Z"}, "message": "[AArch64] Fix PR62178 testcase failures\n\nThe testcase for PR62178 has been failing for a while due to the pass\nconditions being too tight, resulting in failures with -mcmodel=tiny:\n\n\tldr\tq2, [x0], 124\n\tld1r\t{v1.4s}, [x1], 4\n\tcmp\tx0, x2\n\tmla\tv0.4s, v2.4s, v1.4s\n\tbne\t.L7\n\n-mcmodel=small generates the slightly different:\n\n\tldr\tq1, [x0], 124\n\tldr\ts2, [x1, 4]!\n\tcmp\tx0, x2\n\tmla\tv0.4s, v1.4s, v2.s[0]\n\tbne\t.L7\n\nThis is due to Combine merging a DUP instruction with either a load\nor MLA - we can't force it to prefer one over the other.  However the\ngenerated vector loop is fast either way since it generates MLA and\nmerges the DUP either with a load or MLA.  So relax the conditions\nslightly and check we still generate MLA and there is no DUP or FMOV.\n\nThe testcase now passes - committed as obvious.\n\n    testsuite/\n\t* gcc.target/aarch64/pr62178.c: Relax scan-assembler checks.\n\nFrom-SVN: r266139", "tree": {"sha": "558da2565d60de053556689fc74e2fb15ff65e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/558da2565d60de053556689fc74e2fb15ff65e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff4d8480403be6ab92e07f6981e7bfc04c3863c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4d8480403be6ab92e07f6981e7bfc04c3863c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4d8480403be6ab92e07f6981e7bfc04c3863c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4d8480403be6ab92e07f6981e7bfc04c3863c9/comments", "author": null, "committer": null, "parents": [{"sha": "b258173580ec8ed49c1655593531c9819e064730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b258173580ec8ed49c1655593531c9819e064730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b258173580ec8ed49c1655593531c9819e064730"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "303bca4bd534bc81855455a82309de7e76a3f60d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4d8480403be6ab92e07f6981e7bfc04c3863c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4d8480403be6ab92e07f6981e7bfc04c3863c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff4d8480403be6ab92e07f6981e7bfc04c3863c9", "patch": "@@ -1,3 +1,7 @@\n+2018-11-14  Wilco Dijkstra  <wdijkstr@arm.com>  \n+\n+\t* gcc.target/aarch64/pr62178.c: Relax scan-assembler checks.\n+\n 2018-11-14  Patrick Bernardi  <bernardi@adacore.com>\n \n \t* gnat.dg/rt_signals.adb: New testcase."}, {"sha": "f50567ee61272e90b7b50bf8fa0962eecd6bb468", "filename": "gcc/testsuite/gcc.target/aarch64/pr62178.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff4d8480403be6ab92e07f6981e7bfc04c3863c9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr62178.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff4d8480403be6ab92e07f6981e7bfc04c3863c9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr62178.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr62178.c?ref=ff4d8480403be6ab92e07f6981e7bfc04c3863c9", "patch": "@@ -16,6 +16,7 @@ void foo (void) {\n     }\n }\n \n-/* { dg-final { scan-assembler \"ldr\\\\ts\\[0-9\\]+, \\\\\\[x\\[0-9\\]+, \\[0-9\\]+\\\\\\]!\" } } */\n /* { dg-final { scan-assembler \"ldr\\\\tq\\[0-9\\]+, \\\\\\[x\\[0-9\\]+\\\\\\], \\[0-9\\]+\" } } */\n-/* { dg-final { scan-assembler \"mla\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\\\\\\[0\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"mla\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler-not { dup } } } */\n+/* { dg-final { scan-assembler-not { fmov } } } */"}]}