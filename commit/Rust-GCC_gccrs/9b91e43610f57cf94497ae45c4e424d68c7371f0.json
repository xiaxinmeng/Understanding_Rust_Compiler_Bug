{"sha": "9b91e43610f57cf94497ae45c4e424d68c7371f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5MWU0MzYxMGY1N2NmOTQ0OTdhZTQ1YzRlNDI0ZDY4YzczNzFmMA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-07-23T18:32:25Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-07-23T18:32:25Z"}, "message": "re PR preprocessor/41943 (include search path composition is bogus)\n\n2010-07-23  Kai Tietz  <kai.tietz@onevision.com>\n\n\tPR target/41943\n\t* Makefile.in (USER_H_INC_NEXT_PRE,\n\tUSER_H_INC_NEXT_POST): New.\n\t(stmp-int-hdrs): Prefix/postfix headers by include_next.\n\t* config.gcc (user_headers_inc_next_pre): New.\n\t(user_headers_inc_next_post): Likewise.\n\t(*-w64-mingw*): Use for float.h post-fixing, and for\n\tstddef.h/stdarg.h pre-fixing by include_next.\n\t* configure.ac (user_headers_inc_next_post): New.\n\t(user_headers_inc_next_pre): New.\n\t* configure: Regenerated.\n\nFrom-SVN: r162479", "tree": {"sha": "ffbcaa87745a690fdcac1766d8e4a154926ba972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffbcaa87745a690fdcac1766d8e4a154926ba972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b91e43610f57cf94497ae45c4e424d68c7371f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b91e43610f57cf94497ae45c4e424d68c7371f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b91e43610f57cf94497ae45c4e424d68c7371f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b91e43610f57cf94497ae45c4e424d68c7371f0/comments", "author": null, "committer": null, "parents": [{"sha": "16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c9d3b171f9e89b23d58db8ab05efa3e4cea872"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "0a566ff5432dcf8bed2793130d5a236c77b78bf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b91e43610f57cf94497ae45c4e424d68c7371f0", "patch": "@@ -1,3 +1,17 @@\n+2010-07-23  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR target/41943\n+\t* Makefile.in (USER_H_INC_NEXT_PRE,\n+\tUSER_H_INC_NEXT_POST): New.\n+\t(stmp-int-hdrs): Prefix/postfix headers by include_next.\n+\t* config.gcc (user_headers_inc_next_pre): New.\n+\t(user_headers_inc_next_post): Likewise.\n+\t(*-w64-mingw*): Use for float.h post-fixing, and for\n+\tstddef.h/stdarg.h pre-fixing by include_next.\n+\t* configure.ac (user_headers_inc_next_post): New.\n+\t(user_headers_inc_next_pre): New.\n+\t* configure: Regenerated.\n+\n 2010-07-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac: Don't disable TLS on Solaris 8/9 by default"}, {"sha": "d66b905633e9920e041ea1662f86dd73974496ba", "filename": "gcc/Makefile.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9b91e43610f57cf94497ae45c4e424d68c7371f0", "patch": "@@ -366,6 +366,9 @@ USER_H = $(srcdir)/ginclude/float.h \\\n \t $(srcdir)/ginclude/stdfix.h \\\n \t $(EXTRA_HEADERS)\n \n+USER_H_INC_NEXT_PRE = @user_headers_inc_next_pre@\n+USER_H_INC_NEXT_POST = @user_headers_inc_next_post@\n+\n UNWIND_H = $(srcdir)/unwind-generic.h\n \n # The GCC to use for compiling crt*.o.\n@@ -4014,6 +4017,21 @@ stmp-int-hdrs: $(STMP_FIXINC) $(USER_H) $(UNWIND_H) fixinc_list\n \t    chmod a+r include/$$realfile; \\\n \t  fi; \\\n \tdone\n+\tfor file in .. $(USER_H_INC_NEXT_PRE); do \\\n+\t  if [ X$$file != X.. ]; then \\\n+            mv include/$$file include/x_$$file; \\\n+            echo \"#include_next <$$file>\" >include/$$file; \\\n+            cat include/x_$$file >>include/$$file; \\\n+            rm -f include/x_$$file; \\\n+\t    chmod a+r include/$$file; \\\n+\t  fi; \\\n+\tdone\n+\tfor file in .. $(USER_H_INC_NEXT_POST); do \\\n+\t  if [ X$$file != X.. ]; then \\\n+\t    echo \"#include_next <$$file>\" >>include/$$file; \\\n+\t    chmod a+r include/$$file; \\\n+\t  fi; \\\n+\tdone\n \trm -f include/unwind.h\n \tcp $(UNWIND_H) include/unwind.h\n \tchmod a+r include/unwind.h"}, {"sha": "eef0942c53209df4d29acd68e9f6a45e0bfb288d", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=9b91e43610f57cf94497ae45c4e424d68c7371f0", "patch": "@@ -101,6 +101,12 @@\n #  extra_headers\tList of used header files from the directory\n #\t\t\tconfig/${cpu_type}.\n #\n+#  user_headers_inc_next_pre\n+#\t\t\tList of header file names of internal gcc header\n+#\t\t\tfiles, which should be prefixed by an include_next.\n+#  user_headers_inc_next_post\n+#\t\t\tList of header file names of internal gcc header\n+#\t\t\tfiles, which should be postfixed by an include_next.\n #  use_gcc_tgmath\tIf set, add tgmath.h to the list of used header\n #\t\t\tfiles.\n #\n@@ -171,6 +177,8 @@\n out_file=\n tmake_file=\n extra_headers=\n+user_headers_inc_next_pre=\n+user_headers_inc_next_post=\n use_gcc_tgmath=yes\n use_gcc_stdint=none\n extra_passes=\n@@ -1379,6 +1387,8 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t# This makes the logic if mingw's or the w64 feature set has to be used\n \tcase ${target} in\n \t\t*-w64-*)\n+\t\t\tuser_headers_inc_next_post=\"${user_headers_inc_next_post} float.h\"\n+\t\t\tuser_headers_inc_next_pre=\"${user_headers_inc_next_pre} stddef.h stdarg.h\"\n \t\t\ttm_file=\"${tm_file} i386/mingw-w64.h\"\n \t\t\tif test x$enable_targets = xall; then\n \t\t\t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\""}, {"sha": "aa61cd6589ce2df937cee791ee856c43d0efa796", "filename": "gcc/configure", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=9b91e43610f57cf94497ae45c4e424d68c7371f0", "patch": "@@ -646,6 +646,8 @@ extra_passes\n extra_parts\n extra_objs\n extra_headers_list\n+user_headers_inc_next_post\n+user_headers_inc_next_pre\n extra_gcc_objs\n TM_MULTILIB_EXCEPTIONS_CONFIG\n TM_MULTILIB_CONFIG\n@@ -17107,7 +17109,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17110 \"configure\"\n+#line 17112 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17213,7 +17215,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17216 \"configure\"\n+#line 17218 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -25570,6 +25572,8 @@ fi\n \n \n \n+\n+\n \n \n "}, {"sha": "24d38aa73c30fc9655bf0e8101c184b37d27e74f", "filename": "gcc/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b91e43610f57cf94497ae45c4e424d68c7371f0/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=9b91e43610f57cf94497ae45c4e424d68c7371f0", "patch": "@@ -4550,6 +4550,8 @@ AC_SUBST(TM_ENDIAN_CONFIG)\n AC_SUBST(TM_MULTILIB_CONFIG)\n AC_SUBST(TM_MULTILIB_EXCEPTIONS_CONFIG)\n AC_SUBST(extra_gcc_objs)\n+AC_SUBST(user_headers_inc_next_pre)\n+AC_SUBST(user_headers_inc_next_post)\n AC_SUBST(extra_headers_list)\n AC_SUBST(extra_objs)\n AC_SUBST(extra_parts)"}]}