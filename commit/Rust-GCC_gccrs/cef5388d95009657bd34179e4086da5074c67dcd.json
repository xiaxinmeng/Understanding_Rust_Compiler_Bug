{"sha": "cef5388d95009657bd34179e4086da5074c67dcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmNTM4OGQ5NTAwOTY1N2JkMzQxNzllNDA4NmRhNTA3NGM2N2RjZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-19T10:19:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-19T10:19:46Z"}, "message": "re PR tree-optimization/71901 (ice in find_or_generate_expression)\n\n2016-07-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71901\n\t* tree-ssa-sccvn.h (struct vn_reference_op_struct): Add\n\talign member, group stuff with the bitfield.\n\t(vn_ref_op_align_unit): New inline.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): For ARRAY_REFs\n\trecord element alignment and operand 3 unchanged.\n\t(ao_ref_init_from_vn_reference): Adjust.\n\t(valueize_refs_1): Likewise.\n\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Likewise.\n\n\t* gcc.dg/torture/pr71901.c: New testcase.\n\nFrom-SVN: r238468", "tree": {"sha": "05880e90b539eab18ab3f9cd3a92b9fd7c120e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05880e90b539eab18ab3f9cd3a92b9fd7c120e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cef5388d95009657bd34179e4086da5074c67dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef5388d95009657bd34179e4086da5074c67dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef5388d95009657bd34179e4086da5074c67dcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef5388d95009657bd34179e4086da5074c67dcd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4cb9733db86b7be143a2b8ab7d03406e025a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4cb9733db86b7be143a2b8ab7d03406e025a5d"}], "stats": {"total": 106, "additions": 75, "deletions": 31}, "files": [{"sha": "271706c02001e5bae72f713ab461de4ddeb19673", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cef5388d95009657bd34179e4086da5074c67dcd", "patch": "@@ -1,4 +1,16 @@\n-2016-07-18  Richard Biener  <rguenther@suse.de>\n+2016-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71901\n+\t* tree-ssa-sccvn.h (struct vn_reference_op_struct): Add\n+\talign member, group stuff with the bitfield.\n+\t(vn_ref_op_align_unit): New inline.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): For ARRAY_REFs\n+\trecord element alignment and operand 3 unchanged.\n+\t(ao_ref_init_from_vn_reference): Adjust.\n+\t(valueize_refs_1): Likewise.\n+\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Likewise.\n+\n+2016-07-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71908\n \t* tree-ssa-structalias.c (get_constraint_for_component_ref): Handle"}, {"sha": "457eb1094db007960567998071de74cb3a627a45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cef5388d95009657bd34179e4086da5074c67dcd", "patch": "@@ -1,4 +1,9 @@\n-2016-07-18  Richard Biener  <rguenther@suse.de>\n+2016-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71901\n+\t* gcc.dg/torture/pr71901.c: New testcase.\n+\n+2016-07-19  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71908\n \t* gcc.dg/torture/pr71908.c: New testcase."}, {"sha": "0be1d73b38cf7ff5abc468940046fdbc89ee3fcd", "filename": "gcc/testsuite/gcc.dg/torture/pr71901.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71901.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71901.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr71901.c?ref=cef5388d95009657bd34179e4086da5074c67dcd", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+typedef struct { int _mp_size; } mpz_t[1];\n+int a, b;\n+void fn1()\n+{\n+  mpz_t c[1][b];\n+  for (;;) {\n+      int d = 0 >= 0 ? 0 == 0 ? c[0][0]->_mp_size ? -1 : 0 : 0 : 0,\n+\t  e = 0 >= 0 ? 0 == 0 ? c[1][1]->_mp_size ? -1 : 0 : 0 : 0;\n+      if (d != e)\n+\ta++;\n+  }\n+}"}, {"sha": "a5f34862417dde9dc0d18846d85254e4855fdb6e", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=cef5388d95009657bd34179e4086da5074c67dcd", "patch": "@@ -2570,15 +2570,14 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n \t       here as the element alignment may be not visible.  See\n \t       PR43783.  Simply drop the element size for constant\n \t       sizes.  */\n-\t    if (tree_int_cst_equal (genop3, TYPE_SIZE_UNIT (elmt_type)))\n+\t    if (TREE_CODE (genop3) == INTEGER_CST\n+\t\t&& TREE_CODE (TYPE_SIZE_UNIT (elmt_type)) == INTEGER_CST\n+\t\t&& wi::eq_p (wi::to_offset (TYPE_SIZE_UNIT (elmt_type)),\n+\t\t\t     (wi::to_offset (genop3)\n+\t\t\t      * vn_ref_op_align_unit (currop))))\n \t      genop3 = NULL_TREE;\n \t    else\n \t      {\n-\t\tgenop3 = size_binop (EXACT_DIV_EXPR, genop3,\n-\t\t\t\t     size_int (TYPE_ALIGN_UNIT (elmt_type)));\n-\t\t/* We may have a useless conversion added by\n-\t\t   array_ref_element_size via copy_reference_opts_from_ref.  */\n-\t\tSTRIP_USELESS_TYPE_CONVERSION (genop3);\n \t\tgenop3 = find_or_generate_expression (block, genop3, stmts);\n \t\tif (!genop3)\n \t\t  return NULL_TREE;"}, {"sha": "e6853420b6c90cd57fc7616837ed1c646d24da12", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=cef5388d95009657bd34179e4086da5074c67dcd", "patch": "@@ -805,24 +805,30 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \t  break;\n \tcase ARRAY_RANGE_REF:\n \tcase ARRAY_REF:\n-\t  /* Record index as operand.  */\n-\t  temp.op0 = TREE_OPERAND (ref, 1);\n-\t  /* Always record lower bounds and element size.  */\n-\t  temp.op1 = array_ref_low_bound (ref);\n-\t  temp.op2 = array_ref_element_size (ref);\n-\t  /* array_ref_element_size forces the result to sizetype\n-\t     even if that is the same as bitsizetype.  */\n-\t  STRIP_USELESS_TYPE_CONVERSION (temp.op2);\n-\t  if (TREE_CODE (temp.op0) == INTEGER_CST\n-\t      && TREE_CODE (temp.op1) == INTEGER_CST\n-\t      && TREE_CODE (temp.op2) == INTEGER_CST)\n-\t    {\n-\t      offset_int off = ((wi::to_offset (temp.op0)\n-\t\t\t\t - wi::to_offset (temp.op1))\n-\t\t\t\t* wi::to_offset (temp.op2));\n-\t      if (wi::fits_shwi_p (off))\n-\t\ttemp.off = off.to_shwi();\n-\t    }\n+\t  {\n+\t    tree eltype = TREE_TYPE (TREE_TYPE (TREE_OPERAND (ref, 0)));\n+\t    /* Record index as operand.  */\n+\t    temp.op0 = TREE_OPERAND (ref, 1);\n+\t    /* Always record lower bounds and element size.  */\n+\t    temp.op1 = array_ref_low_bound (ref);\n+\t    /* But record element size in units of the type alignment.  */\n+\t    temp.op2 = TREE_OPERAND (ref, 3);\n+\t    temp.align = eltype->type_common.align;\n+\t    if (! temp.op2)\n+\t      temp.op2 = size_binop (EXACT_DIV_EXPR, TYPE_SIZE_UNIT (eltype),\n+\t\t\t\t     size_int (TYPE_ALIGN_UNIT (eltype)));\n+\t    if (TREE_CODE (temp.op0) == INTEGER_CST\n+\t\t&& TREE_CODE (temp.op1) == INTEGER_CST\n+\t\t&& TREE_CODE (temp.op2) == INTEGER_CST)\n+\t      {\n+\t\toffset_int off = ((wi::to_offset (temp.op0)\n+\t\t\t\t   - wi::to_offset (temp.op1))\n+\t\t\t\t  * wi::to_offset (temp.op2)\n+\t\t\t\t  * vn_ref_op_align_unit (&temp));\n+\t\tif (wi::fits_shwi_p (off))\n+\t\t  temp.off = off.to_shwi();\n+\t      }\n+\t  }\n \t  break;\n \tcase VAR_DECL:\n \t  if (DECL_HARD_REGISTER (ref))\n@@ -1021,7 +1027,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \t      offset_int woffset\n \t\t= wi::sext (wi::to_offset (op->op0) - wi::to_offset (op->op1),\n \t\t\t    TYPE_PRECISION (TREE_TYPE (op->op0)));\n-\t      woffset *= wi::to_offset (op->op2);\n+\t      woffset *= wi::to_offset (op->op2) * vn_ref_op_align_unit (op);\n \t      woffset <<= LOG2_BITS_PER_UNIT;\n \t      offset += woffset;\n \t    }\n@@ -1471,7 +1477,8 @@ valueize_refs_1 (vec<vn_reference_op_s> orig, bool *valueized_anything)\n \t{\n \t  offset_int off = ((wi::to_offset (vro->op0)\n \t\t\t     - wi::to_offset (vro->op1))\n-\t\t\t    * wi::to_offset (vro->op2));\n+\t\t\t    * wi::to_offset (vro->op2)\n+\t\t\t    * vn_ref_op_align_unit (vro));\n \t  if (wi::fits_shwi_p (off))\n \t    vro->off = off.to_shwi ();\n \t}"}, {"sha": "d77dbaf42c0d42d7f4fa9626dd2f607dcb9e2b69", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef5388d95009657bd34179e4086da5074c67dcd/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=cef5388d95009657bd34179e4086da5074c67dcd", "patch": "@@ -81,22 +81,29 @@ typedef const struct vn_phi_s *const_vn_phi_t;\n typedef struct vn_reference_op_struct\n {\n   ENUM_BITFIELD(tree_code) opcode : 16;\n-  /* 1 for instrumented calls.  */\n-  unsigned with_bounds : 1;\n   /* Dependence info, used for [TARGET_]MEM_REF only.  */\n   unsigned short clique;\n   unsigned short base;\n+  /* 1 for instrumented calls.  */\n+  unsigned with_bounds : 1;\n+  unsigned reverse : 1;\n+  /* For storing TYPE_ALIGN for array ref element size computation.  */\n+  unsigned align : 6;\n   /* Constant offset this op adds or -1 if it is variable.  */\n   HOST_WIDE_INT off;\n   tree type;\n   tree op0;\n   tree op1;\n   tree op2;\n-  bool reverse;\n } vn_reference_op_s;\n typedef vn_reference_op_s *vn_reference_op_t;\n typedef const vn_reference_op_s *const_vn_reference_op_t;\n \n+inline unsigned\n+vn_ref_op_align_unit (vn_reference_op_t op)\n+{\n+  return op->align ? ((unsigned)1 << (op->align - 1)) / BITS_PER_UNIT : 0;\n+}\n \n /* A reference operation in the hashtable is representation as\n    the vuse, representing the memory state at the time of"}]}