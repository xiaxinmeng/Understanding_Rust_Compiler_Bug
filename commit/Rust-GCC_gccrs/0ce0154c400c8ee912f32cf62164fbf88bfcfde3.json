{"sha": "0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNlMDE1NGM0MDBjOGVlOTEyZjMyY2Y2MjE2NGZiZjg4YmZjZmRlMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-07-03T14:28:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-07-03T14:28:03Z"}, "message": "c-format.c (gcc_gfc_format_type, [...]): New.\n\n\t* c-format.c (gcc_gfc_format_type, gcc_gfc_flag_pairs,\n\tgcc_gfc_char_table, init_dynamic_gfc_info): New.\n\t(format_types_orig, handle_format_attribute): Add support for\n\tformat \"gcc_gfc\".\n\nfortran:\n\t* error.c (error_printf, error_print): Use ATTRIBUTE_GCC_GFC.\n\t* gfortran.h (ATTRIBUTE_GCC_GFC): New.\n\t(gfc_warning, gfc_warning_now, gfc_error, gfc_error_now,\n\tgfc_fatal_error, gfc_internal_error, gfc_notify_std): Use\n\tATTRIBUTE_GCC_GFC.\n\ntestsuite:\n\t* gcc.dg/format/gcc_gfc-1.c: New.\n\nFrom-SVN: r101552", "tree": {"sha": "fc2772efedbf66e55c9a9b40eaefe5699f7ff993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2772efedbf66e55c9a9b40eaefe5699f7ff993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/comments", "author": null, "committer": null, "parents": [{"sha": "4c5bc6f8191db75af2b024bc981562b0c0648ae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5bc6f8191db75af2b024bc981562b0c0648ae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c5bc6f8191db75af2b024bc981562b0c0648ae2"}], "stats": {"total": 159, "additions": 149, "deletions": 10}, "files": [{"sha": "fccafdd3cfa8ace191e565cb2580cc34f9bf1948", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "patch": "@@ -1,3 +1,10 @@\n+2005-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-format.c (gcc_gfc_format_type, gcc_gfc_flag_pairs,\n+\tgcc_gfc_char_table, init_dynamic_gfc_info): New.\n+\t(format_types_orig, handle_format_attribute): Add support for\n+\tformat \"gcc_gfc\".\n+\n 2005-07-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* varasm.c (assemble_variable): Fix format specifier thinko."}, {"sha": "10a5f21db5967dd311923a020bb1d5b9f2f73584", "filename": "gcc/c-format.c", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "patch": "@@ -60,7 +60,7 @@ set_Wformat (int setting)\n enum format_type { printf_format_type, asm_fprintf_format_type,\n \t\t   gcc_diag_format_type, gcc_tdiag_format_type,\n \t\t   gcc_cdiag_format_type,\n-\t\t   gcc_cxxdiag_format_type,\n+\t\t   gcc_cxxdiag_format_type, gcc_gfc_format_type,\n \t\t   scanf_format_type, strftime_format_type,\n \t\t   strfmon_format_type, format_type_error = -1};\n \n@@ -392,6 +392,11 @@ static const format_flag_pair gcc_diag_flag_pairs[] =\n #define gcc_cdiag_flag_pairs gcc_diag_flag_pairs\n #define gcc_cxxdiag_flag_pairs gcc_diag_flag_pairs\n \n+static const format_flag_pair gcc_gfc_flag_pairs[] =\n+{\n+  { 0, 0, 0, 0 }\n+};\n+\n static const format_flag_spec gcc_diag_flag_specs[] =\n {\n   { '+',  0, 0, N_(\"'+' flag\"),        N_(\"the '+' printf flag\"),              STD_C89 },\n@@ -619,6 +624,23 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n   { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n };\n \n+static const format_char_info gcc_gfc_char_table[] =\n+{\n+  /* C89 conversion specifiers.  */\n+  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n+  { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n+  { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"cR\", NULL },\n+\n+  /* gfc conversion specifiers.  */\n+\n+  { \"C\",   0, STD_C89, NOARGUMENTS, \"\",      \"\",   NULL },\n+\n+  /* This will require a \"locus\" at runtime.  */\n+  { \"L\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"R\", NULL },\n+\n+  { NULL,  0, 0, NOLENGTHS, NULL, NULL, NULL }\n+};\n+\n static const format_char_info scan_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n@@ -711,6 +733,12 @@ static const format_kind_info format_types_orig[] =\n     0, 0, 'p', 0, 'L',\n     NULL, &integer_type_node\n   },\n+  { \"gcc_gfc\", NULL, gcc_gfc_char_table, \"\", NULL, \n+    NULL, gcc_gfc_flag_pairs,\n+    FMT_FLAG_ARG_CONVERT,\n+    0, 0, 0, 0, 0,\n+    NULL, NULL\n+  },\n   { \"scanf\",    scanf_length_specs,   scan_char_table,  \"*'I\", NULL, \n     scanf_flag_specs, scanf_flag_pairs,\n     FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_ZERO_WIDTH_BAD|FMT_FLAG_DOLLAR_GAP_POINTER_OK,\n@@ -2383,6 +2411,55 @@ init_dynamic_asm_fprintf_info (void)\n     }\n }\n \n+/* Determine the type of a \"locus\" in the code being compiled for use\n+   in GCC's __gcc_gfc__ custom format attribute.  You must have set\n+   dynamic_format_types before calling this function.  */\n+static void\n+init_dynamic_gfc_info (void)\n+{\n+  static tree locus;\n+  \n+  if (!locus)\n+    {\n+      static format_char_info *gfc_fci;\n+\n+      /* For the GCC __gcc_gfc__ custom format specifier to work, one\n+\t must have declared 'locus' prior to using this attribute.  If\n+\t we haven't seen this declarations then you shouldn't use the\n+\t specifier requiring that type.  */\n+      if ((locus = maybe_get_identifier (\"locus\")))\n+\t{\n+\t  locus = identifier_global_value (locus);\n+\t  if (locus)\n+\t    {\n+\t      if (TREE_CODE (locus) != TYPE_DECL)\n+\t\t{\n+\t\t  error (\"%<locus%> is not defined as a type\");\n+\t\t  locus = 0;\n+\t\t}\n+\t      else\n+\t\tlocus = TREE_TYPE (locus);\n+\t    }\n+\t}\n+\n+      /* Assign the new data for use.  */\n+\n+      /* Handle the __gcc_gfc__ format specifics.  */\n+      if (!gfc_fci)\n+\tdynamic_format_types[gcc_gfc_format_type].conversion_specs =\n+\t  gfc_fci = (format_char_info *)\n+\t\t     xmemdup (gcc_gfc_char_table,\n+\t\t\t      sizeof (gcc_gfc_char_table),\n+\t\t\t      sizeof (gcc_gfc_char_table));\n+      if (locus)\n+        {\n+\t  const unsigned i = find_char_info_specifier_index (gfc_fci, 'L');\n+\t  gfc_fci[i].types[0].type = &locus;\n+\t  gfc_fci[i].pointer_count = 1;\n+\t}\n+    }\n+}\n+\n /* Determine the types of \"tree\" and \"location_t\" in the code being\n    compiled for use in GCC's diagnostic custom format attributes.  You\n    must have set dynamic_format_types before calling this function.  */\n@@ -2660,6 +2737,7 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   /* If this is a custom GCC-internal format type, we have to\n      initialize certain bits a runtime.  */\n   if (info.format_type == asm_fprintf_format_type\n+      || info.format_type == gcc_gfc_format_type\n       || info.format_type == gcc_diag_format_type\n       || info.format_type == gcc_tdiag_format_type\n       || info.format_type == gcc_cdiag_format_type\n@@ -2676,6 +2754,10 @@ handle_format_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n          GCC's notion of HOST_WIDE_INT for checking %wd.  */\n       if (info.format_type == asm_fprintf_format_type)\n \tinit_dynamic_asm_fprintf_info ();\n+      /* If this is format __gcc_gfc__, we have to initialize GCC's\n+\t notion of 'locus' at runtime for %L.  */\n+      else if (info.format_type == gcc_gfc_format_type)\n+\tinit_dynamic_gfc_info ();\n       /* If this is one of the diagnostic attributes, then we have to\n          initialize 'location_t' and 'tree' at runtime.  */\n       else if (info.format_type == gcc_diag_format_type"}, {"sha": "b589f66711e896a6ffb71c9b78fc0bb53bd89fc4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "patch": "@@ -1,3 +1,11 @@\n+2005-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* error.c (error_printf, error_print): Use ATTRIBUTE_GCC_GFC.\n+\t* gfortran.h (ATTRIBUTE_GCC_GFC): New.\n+\t(gfc_warning, gfc_warning_now, gfc_error, gfc_error_now,\n+\tgfc_fatal_error, gfc_internal_error, gfc_notify_std): Use\n+\tATTRIBUTE_GCC_GFC.\n+\n 2005-07-03  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/20842"}, {"sha": "fe7decc5dfbf75250ab04cd92abc4603ccede885", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "patch": "@@ -118,7 +118,7 @@ error_string (const char *p)\n    locus.  Calls error_printf() recursively, but the recursion is at\n    most one level deep.  */\n \n-static void error_printf (const char *, ...) ATTRIBUTE_PRINTF_1;\n+static void error_printf (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n \n static void\n show_locus (int offset, locus * loc)\n@@ -314,7 +314,7 @@ show_loci (locus * l1, locus * l2)\n #define IBUF_LEN 30\n #define MAX_ARGS 10\n \n-static void\n+static void ATTRIBUTE_GCC_GFC(2,0)\n error_print (const char *type, const char *format0, va_list argp)\n {\n   char c, *p, int_buf[IBUF_LEN], c_arg[MAX_ARGS], *cp_arg[MAX_ARGS];"}, {"sha": "07a3f2c2bba97f1f4a063f03c1be8b479e5e6eff", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "patch": "@@ -501,6 +501,14 @@ typedef struct\n   gfc_linebuf *lb;\n } locus;\n \n+/* In order for the \"gfc\" format checking to work correctly, you must\n+   have declared a typedef locus first.  */\n+#if GCC_VERSION >= 4001\n+#define ATTRIBUTE_GCC_GFC(m, n) __attribute__ ((__format__ (__gcc_gfc__, m, n))) ATTRIBUTE_NONNULL(m)\n+#else\n+#define ATTRIBUTE_GCC_GFC(m, n) ATTRIBUTE_NONNULL(m)\n+#endif\n+\n \n #include <limits.h>\n #ifndef PATH_MAX\n@@ -1543,19 +1551,19 @@ typedef struct gfc_error_buf\n void gfc_error_init_1 (void);\n void gfc_buffer_error (int);\n \n-void gfc_warning (const char *, ...);\n-void gfc_warning_now (const char *, ...);\n+void gfc_warning (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+void gfc_warning_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n void gfc_clear_warning (void);\n void gfc_warning_check (void);\n \n-void gfc_error (const char *, ...);\n-void gfc_error_now (const char *, ...);\n-void gfc_fatal_error (const char *, ...) ATTRIBUTE_NORETURN;\n-void gfc_internal_error (const char *, ...) ATTRIBUTE_NORETURN;\n+void gfc_error (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+void gfc_error_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+void gfc_fatal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n+void gfc_internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_GCC_GFC(1,2);\n void gfc_clear_error (void);\n int gfc_error_check (void);\n \n-try gfc_notify_std (int, const char *, ...);\n+try gfc_notify_std (int, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);\n \n /* A general purpose syntax error.  */\n #define gfc_syntax_error(ST)\t\\"}, {"sha": "2cc6f5c63c219e81c69883732a60782ac9dacafc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "patch": "@@ -1,3 +1,7 @@\n+2005-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/format/gcc_gfc-1.c: New.\n+\n 2005-07-03  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* pr14490-[1-4].c: Fix typos scan-tree-dump-times so they now pass."}, {"sha": "d23701d8d17472594c64e6bf2f719af3490a8653", "filename": "gcc/testsuite/gcc.dg/format/gcc_gfc-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_gfc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ce0154c400c8ee912f32cf62164fbf88bfcfde3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_gfc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_gfc-1.c?ref=0ce0154c400c8ee912f32cf62164fbf88bfcfde3", "patch": "@@ -0,0 +1,30 @@\n+/* Test for gcc_gfc formats.  */\n+/* Origin: Kaveh Ghazi <ghazi@caip.rutgers.edu> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wformat\" } */\n+\n+#include \"format.h\"\n+\n+/* Magic identifier must be set before the attribute is used.  */\n+typedef struct locus locus;\n+\n+extern int gfc_warn (const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 1, 2))) __attribute__ ((__nonnull__));\n+\n+void\n+foo (int i, char *s, long int l, llong ll, locus *loc)\n+{\n+  /* Acceptable C90 specifiers, flags and modifiers.  */\n+  gfc_warn (\"%%\");\n+  gfc_warn (\"%d%i%c%s%%\", i, i, i, s);\n+\n+  /* Extensions provided in gfc_warn.  */\n+  gfc_warn (\"%C\");\n+  gfc_warn (\"%L\", loc);\n+\n+  /* Various tests of bad argument types.  */\n+  gfc_warn (\"%d\", l); /* { dg-warning \"format\" \"bad argument types\" } */\n+  gfc_warn (\"%d\", ll); /* { dg-warning \"format\" \"bad argument types\" } */\n+  gfc_warn (\"%s\", &i); /* { dg-warning \"format\" \"bad argument types\" } */\n+  gfc_warn (\"%L\", &i); /* { dg-warning \"format\" \"bad argument types\" } */\n+  gfc_warn (\"%C\", i); /* { dg-warning \"format\" \"too many arguments\" } */\n+}"}]}