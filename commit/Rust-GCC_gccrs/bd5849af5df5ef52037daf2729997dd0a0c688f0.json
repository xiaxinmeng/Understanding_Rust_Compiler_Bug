{"sha": "bd5849af5df5ef52037daf2729997dd0a0c688f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ1ODQ5YWY1ZGY1ZWY1MjAzN2RhZjI3Mjk5OTdkZDBhMGM2ODhmMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2016-10-31T22:20:52Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2016-10-31T22:20:52Z"}, "message": "driver-aarch64.c (host_detect_local_cpu): Rewrite handling of part num to handle the case where multiple implementers...\n\n2016-10-31  Andrew Pinski  <apinski@cavium.com>\n\n        * config/aarch64/driver-aarch64.c (host_detect_local_cpu):\n        Rewrite handling of part num to handle the case where\n        multiple implementers share the same part num.\n\nFrom-SVN: r241726", "tree": {"sha": "644f40cc59bade61bb074a6f49b1b6e8992a9c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/644f40cc59bade61bb074a6f49b1b6e8992a9c91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd5849af5df5ef52037daf2729997dd0a0c688f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5849af5df5ef52037daf2729997dd0a0c688f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5849af5df5ef52037daf2729997dd0a0c688f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5849af5df5ef52037daf2729997dd0a0c688f0/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8628bc67f12fbbe9e5d4072ff3b1e28f57b3ef8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8628bc67f12fbbe9e5d4072ff3b1e28f57b3ef8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8628bc67f12fbbe9e5d4072ff3b1e28f57b3ef8e"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "d67a20fb75619d57dfda29097bcffa2a586e95f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5849af5df5ef52037daf2729997dd0a0c688f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5849af5df5ef52037daf2729997dd0a0c688f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd5849af5df5ef52037daf2729997dd0a0c688f0", "patch": "@@ -1,3 +1,9 @@\n+2016-10-31  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/aarch64/driver-aarch64.c (host_detect_local_cpu):\n+\tRewrite handling of part num to handle the case where\n+\tmultiple implementers share the same part num.\n+\n 2016-10-31  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "c21942c1aab0872a0be97a10c573f05b18cc1d38", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd5849af5df5ef52037daf2729997dd0a0c688f0/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd5849af5df5ef52037daf2729997dd0a0c688f0/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=bd5849af5df5ef52037daf2729997dd0a0c688f0", "patch": "@@ -169,7 +169,6 @@ host_detect_local_cpu (int argc, const char **argv)\n   bool tune = false;\n   bool cpu = false;\n   unsigned int i = 0;\n-  unsigned int core_idx = 0;\n   unsigned char imp = INVALID_IMP;\n   unsigned int cores[2] = { INVALID_CORE, INVALID_CORE };\n   unsigned int n_cores = 0;\n@@ -219,18 +218,13 @@ host_detect_local_cpu (int argc, const char **argv)\n       if (strstr (buf, \"part\") != NULL)\n \t{\n \t  unsigned ccore = parse_field (buf);\n-\t  for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n-\t    if (ccore == aarch64_cpu_data[i].part_no\n-\t\t&& !contains_core_p (cores, ccore))\n-\t      {\n-\t\tif (n_cores == 2)\n-\t\t  goto not_found;\n-\n-\t\tcores[n_cores++] = ccore;\n-\t\tcore_idx = i;\n-\t\tarch_id = aarch64_cpu_data[i].arch;\n-\t\tbreak;\n-\t      }\n+\t  if (!contains_core_p (cores, ccore))\n+\t    {\n+\t      if (n_cores == 2)\n+\t\tgoto not_found;\n+\n+\t      cores[n_cores++] = ccore;\n+\t    }\n \t  continue;\n \t}\n       if (!tune && !processed_exts && strstr (buf, \"Features\") != NULL)\n@@ -276,11 +270,19 @@ host_detect_local_cpu (int argc, const char **argv)\n   if (n_cores == 0 || n_cores > 2 || imp == INVALID_IMP)\n     goto not_found;\n \n-  if (arch && !arch_id)\n-    goto not_found;\n-\n   if (arch)\n     {\n+      /* Search for one of the cores in the list. */\n+      for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n+\tif (aarch64_cpu_data[i].implementer_id == imp\n+\t    && contains_core_p (cores, aarch64_cpu_data[i].part_no))\n+\t  {\n+\t    arch_id = aarch64_cpu_data[i].arch;\n+\t    break;\n+\t  }\n+      if (!arch_id)\n+\tgoto not_found;\n+\n       struct aarch64_arch_driver_info* arch_info = get_arch_from_id (arch_id);\n \n       /* We got some arch indentifier that's not in aarch64-arches.def?  */\n@@ -312,7 +314,15 @@ host_detect_local_cpu (int argc, const char **argv)\n   /* The simple, non-big.LITTLE case.  */\n   else\n     {\n-      if (aarch64_cpu_data[core_idx].implementer_id != imp)\n+      int core_idx = -1;\n+      for (i = 0; aarch64_cpu_data[i].name != NULL; i++)\n+\tif (cores[0] == aarch64_cpu_data[i].part_no\n+\t    && aarch64_cpu_data[i].implementer_id == imp)\n+\t  {\n+\t    core_idx = i;\n+\t    break;\n+\t  }\n+      if (core_idx == -1)\n \tgoto not_found;\n \n       res = concat (\"-m\", cpu ? \"cpu\" : \"tune\", \"=\","}]}