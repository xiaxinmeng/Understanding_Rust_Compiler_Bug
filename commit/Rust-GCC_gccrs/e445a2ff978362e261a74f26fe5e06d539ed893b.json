{"sha": "e445a2ff978362e261a74f26fe5e06d539ed893b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0NWEyZmY5NzgzNjJlMjYxYTc0ZjI2ZmU1ZTA2ZDUzOWVkODkzYg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-18T14:59:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-18T14:59:48Z"}, "message": "tree-ssa.c (uid_ssaname_map_eq): New function.\n\n2007-10-18  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa.c (uid_ssaname_map_eq): New function.\n\t(uid_ssaname_map_has): Likewise.\n\t(init_tree_ssa): Allocate default_defs as uid_ssaname map.\n\t* tree-flow.h (struct gimple_df): Make default_defs a\n\tuid_ssaname map.\n\t* tree-dfa.c (gimple_default_def): Deal with it.\n\t(set_default_def): Likewise.\n\nFrom-SVN: r129441", "tree": {"sha": "ee9ea6e05bfb23fe8dcffc5c462dc9595eba198f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee9ea6e05bfb23fe8dcffc5c462dc9595eba198f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e445a2ff978362e261a74f26fe5e06d539ed893b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e445a2ff978362e261a74f26fe5e06d539ed893b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e445a2ff978362e261a74f26fe5e06d539ed893b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e445a2ff978362e261a74f26fe5e06d539ed893b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fc5a389d68d7fbfc32d86f3ad7f631cb4fc634d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc5a389d68d7fbfc32d86f3ad7f631cb4fc634d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc5a389d68d7fbfc32d86f3ad7f631cb4fc634d"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "e93e4cb9150c1ae34b06c32facf1b2a8bb1feaad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e445a2ff978362e261a74f26fe5e06d539ed893b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e445a2ff978362e261a74f26fe5e06d539ed893b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e445a2ff978362e261a74f26fe5e06d539ed893b", "patch": "@@ -1,3 +1,13 @@\n+2007-10-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa.c (uid_ssaname_map_eq): New function.\n+\t(uid_ssaname_map_has): Likewise.\n+\t(init_tree_ssa): Allocate default_defs as uid_ssaname map.\n+\t* tree-flow.h (struct gimple_df): Make default_defs a\n+\tuid_ssaname map.\n+\t* tree-dfa.c (gimple_default_def): Deal with it.\n+\t(set_default_def): Likewise.\n+\n 2007-10-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (struct gimple_df): Make referenced_vars"}, {"sha": "f7f4243948cc18dc85f4e384c3a91be1fa64df90", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e445a2ff978362e261a74f26fe5e06d539ed893b/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e445a2ff978362e261a74f26fe5e06d539ed893b/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=e445a2ff978362e261a74f26fe5e06d539ed893b", "patch": "@@ -675,53 +675,42 @@ referenced_var_check_and_insert (tree to)\n tree \n gimple_default_def (struct function *fn, tree var)\n {\n-  struct int_tree_map *h, in;\n+  struct tree_decl_minimal ind;\n+  struct tree_ssa_name in;\n   gcc_assert (SSA_VAR_P (var));\n-  in.uid = DECL_UID (var);\n-  h = (struct int_tree_map *) htab_find_with_hash (DEFAULT_DEFS (fn),\n-\t\t\t\t\t\t   &in,\n-                                                   DECL_UID (var));\n-  if (h)\n-    return h->to;\n-  return NULL_TREE;\n+  in.var = (tree)&ind;\n+  ind.uid = DECL_UID (var);\n+  return (tree) htab_find_with_hash (DEFAULT_DEFS (fn), &in, DECL_UID (var));\n }\n \n /* Insert the pair VAR's UID, DEF into the default_defs hashtable.  */\n \n void\n set_default_def (tree var, tree def)\n { \n-  struct int_tree_map in;\n-  struct int_tree_map *h;\n+  struct tree_decl_minimal ind;\n+  struct tree_ssa_name in;\n   void **loc;\n \n   gcc_assert (SSA_VAR_P (var));\n-  in.uid = DECL_UID (var);\n-  if (!def && gimple_default_def (cfun, var))\n+  in.var = (tree)&ind;\n+  ind.uid = DECL_UID (var);\n+  if (!def)\n     {\n       loc = htab_find_slot_with_hash (DEFAULT_DEFS (cfun), &in,\n             DECL_UID (var), INSERT);\n+      gcc_assert (*loc);\n       htab_remove_elt (DEFAULT_DEFS (cfun), *loc);\n       return;\n     }\n-  gcc_assert (!def || TREE_CODE (def) == SSA_NAME);\n+  gcc_assert (TREE_CODE (def) == SSA_NAME && SSA_NAME_VAR (def) == var);\n   loc = htab_find_slot_with_hash (DEFAULT_DEFS (cfun), &in,\n                                   DECL_UID (var), INSERT);\n \n   /* Default definition might be changed by tail call optimization.  */\n-  if (!*loc)\n-    {\n-      h = GGC_NEW (struct int_tree_map);\n-      h->uid = DECL_UID (var);\n-      h->to = def;\n-      *(struct int_tree_map **)  loc = h;\n-    }\n-   else\n-    {\n-      h = (struct int_tree_map *) *loc;\n-      SSA_NAME_IS_DEFAULT_DEF (h->to) = false;\n-      h->to = def;\n-    }\n+  if (*loc)\n+    SSA_NAME_IS_DEFAULT_DEF (*(tree *) loc) = false;\n+  *(tree *) loc = def;\n \n    /* Mark DEF as the default definition for VAR.  */\n    SSA_NAME_IS_DEFAULT_DEF (def) = true;"}, {"sha": "e07e2b2c00625c37f04715252db2e731711794d1", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e445a2ff978362e261a74f26fe5e06d539ed893b/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e445a2ff978362e261a74f26fe5e06d539ed893b/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=e445a2ff978362e261a74f26fe5e06d539ed893b", "patch": "@@ -159,7 +159,7 @@ struct gimple_df GTY(())\n      means that the first reference to this variable in the function is a\n      USE or a VUSE.  In those cases, the SSA renamer creates an SSA name\n      for this variable with an empty defining statement.  */\n-  htab_t GTY((param_is (struct int_tree_map))) default_defs;\n+  htab_t GTY((param_is (union tree_node))) default_defs;\n \n   /* 'true' after aliases have been computed (see compute_may_aliases).  */\n   unsigned int aliases_computed_p : 1;"}, {"sha": "c6386beb8162a00be3324063a33548e54711b3a7", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e445a2ff978362e261a74f26fe5e06d539ed893b/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e445a2ff978362e261a74f26fe5e06d539ed893b/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=e445a2ff978362e261a74f26fe5e06d539ed893b", "patch": "@@ -810,6 +810,24 @@ var_ann_hash (const void *item)\n   return ((const struct static_var_ann_d *)item)->uid;\n }\n \n+/* Return true if the DECL_UID in both trees are equal.  */\n+\n+static int\n+uid_ssaname_map_eq (const void *va, const void *vb)\n+{\n+  const_tree a = (const_tree) va;\n+  const_tree b = (const_tree) vb;\n+  return (a->ssa_name.var->decl_minimal.uid == b->ssa_name.var->decl_minimal.uid);\n+}\n+\n+/* Hash a tree in a uid_decl_map.  */\n+\n+static unsigned int\n+uid_ssaname_map_hash (const void *item)\n+{\n+  return ((const_tree)item)->ssa_name.var->decl_minimal.uid;\n+}\n+\n \n /* Initialize global DFA and SSA structures.  */\n \n@@ -819,8 +837,8 @@ init_tree_ssa (void)\n   cfun->gimple_df = GGC_CNEW (struct gimple_df);\n   cfun->gimple_df->referenced_vars = htab_create_ggc (20, uid_decl_map_hash, \n \t\t\t\t     \t\t      uid_decl_map_eq, NULL);\n-  cfun->gimple_df->default_defs = htab_create_ggc (20, int_tree_map_hash, \n-\t\t\t\t                   int_tree_map_eq, NULL);\n+  cfun->gimple_df->default_defs = htab_create_ggc (20, uid_ssaname_map_hash, \n+\t\t\t\t                   uid_ssaname_map_eq, NULL);\n   cfun->gimple_df->var_anns = htab_create_ggc (20, var_ann_hash, \n \t\t\t\t\t       var_ann_eq, NULL);\n   cfun->gimple_df->call_clobbered_vars = BITMAP_GGC_ALLOC ();"}]}