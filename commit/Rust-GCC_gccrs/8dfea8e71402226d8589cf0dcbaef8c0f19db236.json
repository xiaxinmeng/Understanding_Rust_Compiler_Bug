{"sha": "8dfea8e71402226d8589cf0dcbaef8c0f19db236", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmZWE4ZTcxNDAyMjI2ZDg1ODljZjBkY2JhZWY4YzBmMTlkYjIzNg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-09-26T10:41:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:41:58Z"}, "message": "adaint.c (if defined (__Lynx__)): Wrap #def/#undef VMOS_DEV around #include <utime.h> and #define GCC_RESOURCE_H...\n\n2007-09-26  Olivier Hainque  <hainque@adacore.com>\n\n\t* adaint.c (if defined (__Lynx__)): Wrap #def/#undef VMOS_DEV around\n\t#include <utime.h> and #define GCC_RESOURCE_H before\n\t#include <sys/wait.h>.\n\tAdd more protections in __gnat_translate_vms.\n\n\t* expect.c (if defined (__Lynx__)): #define GCC_RESOURCE_H before\n\t#include <sys/wait.h>.\n\nFrom-SVN: r128782", "tree": {"sha": "4e574c2bb77d20de915d980ed78369f3b541db69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e574c2bb77d20de915d980ed78369f3b541db69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dfea8e71402226d8589cf0dcbaef8c0f19db236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfea8e71402226d8589cf0dcbaef8c0f19db236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dfea8e71402226d8589cf0dcbaef8c0f19db236", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfea8e71402226d8589cf0dcbaef8c0f19db236/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed18d8583b01ea9b8053162d3bb6dc0714921530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed18d8583b01ea9b8053162d3bb6dc0714921530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed18d8583b01ea9b8053162d3bb6dc0714921530"}], "stats": {"total": 55, "additions": 40, "deletions": 15}, "files": [{"sha": "74fb670f30d076fdd6dbe1ddb37cfb7c0687e273", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfea8e71402226d8589cf0dcbaef8c0f19db236/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfea8e71402226d8589cf0dcbaef8c0f19db236/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=8dfea8e71402226d8589cf0dcbaef8c0f19db236", "patch": "@@ -76,14 +76,22 @@\n #include \"version.h\"\n #endif\n \n-#ifdef __MINGW32__\n+#if defined (__MINGW32__)\n+\n #include \"mingw32.h\"\n #include <sys/utime.h>\n #include <ctype.h>\n-#else\n-#ifndef VMS\n+\n+#elif defined (__Lynx__)\n+\n+/* Lynx utime.h only defines the entities of interest to us if\n+   defined (VMOS_DEV), so ... */\n+#define VMOS_DEV\n+#include <utime.h>\n+#undef VMOS_DEV\n+\n+#elif !defined (VMS)\n #include <utime.h>\n-#endif\n #endif\n \n #ifdef __MINGW32__\n@@ -92,6 +100,14 @@\n #endif\n #elif defined (__vxworks) && defined (__RTP__)\n #include <wait.h>\n+#elif defined (__Lynx__)\n+/* ??? We really need wait.h and it includes resource.h on Lynx.  GCC\n+   has a resource.h header as well, included instead of the lynx\n+   version in our setup, causing lots of errors.  We don't really need\n+   the lynx contents of this file, so just workaround the issue by\n+   preventing the inclusion of the GCC header from doing anything.  */\n+#define GCC_RESOURCE_H\n+#include <sys/wait.h>\n #else\n #include <sys/wait.h>\n #endif\n@@ -2430,8 +2446,8 @@ __gnat_translate_vms (char *src)\n         *(retpos++) = '.';\n       }\n \n-      /* There is qualified path */\n-      while (*pos1 != ']' && *pos1 != '>') {\n+      /* There is a qualified path */\n+      while (*pos1 && *pos1 != ']' && *pos1 != '>') {\n         switch (*pos1) {\n           case '.':\n             /* '.' is used to separate directories. Replace it with '/' but\n@@ -2445,13 +2461,18 @@ __gnat_translate_vms (char *src)\n             }\n             break;\n           case '-' :\n-            /* Equivalent to Unix .. but there may be several in a row */\n-            while (*pos1 == '-') {\n-              pos1++;\n-              *(retpos++) = '.'; *(retpos++) = '.'; *(retpos++) = '/';\n+            /* When after '.' '[' '<' is equivalent to Unix \"..\" but there\n+            may be several in a row */\n+            if (*(pos1 - 1) == '.' || *(pos1 - 1) == '[' ||\n+                *(pos1 - 1) == '<') {\n+              while (*pos1 == '-') {\n+                pos1++;\n+                *(retpos++) = '.'; *(retpos++) = '.'; *(retpos++) = '/';\n+              }\n+              retpos--;\n+              break;\n             }\n-            retpos--;\n-            break;\n+            /* otherwise fall through to default */\n           default:\n             *(retpos++) = *(pos1++);\n         }\n@@ -2540,7 +2561,7 @@ __gnat_to_canonical_file_spec (char *filespec)\n \n   if (strchr (filespec, ']') || strchr (filespec, ':'))\n     {\n-      char *tspec = (char *) decc$translate_vms (filespec);\n+      char *tspec = (char *) __gnat_translate_vms (filespec);\n \n       if (tspec != (char *) -1)\n \tstrncpy (new_canonical_filespec, tspec, MAXPATH);\n@@ -2549,7 +2570,7 @@ __gnat_to_canonical_file_spec (char *filespec)\n \t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\"))\n \t&& (filespec1 = getenv (filespec)))\n     {\n-      char *tspec = (char *) decc$translate_vms (filespec1);\n+      char *tspec = (char *) __gnat_translate_vms (filespec1);\n \n       if (tspec != (char *) -1)\n \tstrncpy (new_canonical_filespec, tspec, MAXPATH);"}, {"sha": "7503de0b88dfa8d2f325860eda2d3f3fccd341ae", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfea8e71402226d8589cf0dcbaef8c0f19db236/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfea8e71402226d8589cf0dcbaef8c0f19db236/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=8dfea8e71402226d8589cf0dcbaef8c0f19db236", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                     Copyright (C) 2001-2005, AdaCore                     *\n+ *                     Copyright (C) 2001-2007, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -51,6 +51,10 @@\n #endif\n #elif defined (__vxworks) && defined (__RTP__)\n #include <wait.h>\n+#elif defined (__Lynx__)\n+/* ??? See comment in adaint.c.  */\n+#define GCC_RESOURCE_H\n+#include <sys/wait.h>\n #else\n #include <sys/wait.h>\n #endif"}]}