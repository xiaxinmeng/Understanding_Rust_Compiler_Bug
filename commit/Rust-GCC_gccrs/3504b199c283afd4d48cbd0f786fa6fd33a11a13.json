{"sha": "3504b199c283afd4d48cbd0f786fa6fd33a11a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUwNGIxOTljMjgzYWZkNGQ0OGNiZDBmNzg2ZmE2ZmQzM2ExMWExMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-09-23T06:04:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-09-23T06:04:14Z"}, "message": "c-common.c (c_common_signed_or_unsigned_type): Examine mode, not precision.\n\n        * c-common.c (c_common_signed_or_unsigned_type): Examine mode,\n        not precision.\n\t* g++.dg/opt/enum1.C: New.\n\nFrom-SVN: r71677", "tree": {"sha": "25aa3fd7b1ba9fdbd7f88065a488abc158ffdf71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25aa3fd7b1ba9fdbd7f88065a488abc158ffdf71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3504b199c283afd4d48cbd0f786fa6fd33a11a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3504b199c283afd4d48cbd0f786fa6fd33a11a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3504b199c283afd4d48cbd0f786fa6fd33a11a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3504b199c283afd4d48cbd0f786fa6fd33a11a13/comments", "author": null, "committer": null, "parents": [{"sha": "92f6e625321d576fdcafebd2ad540f8709508a35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f6e625321d576fdcafebd2ad540f8709508a35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f6e625321d576fdcafebd2ad540f8709508a35"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "2dd2543bb5fe1f15d0895d529e030f5df24fca5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3504b199c283afd4d48cbd0f786fa6fd33a11a13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3504b199c283afd4d48cbd0f786fa6fd33a11a13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3504b199c283afd4d48cbd0f786fa6fd33a11a13", "patch": "@@ -1,3 +1,8 @@\n+2003-09-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (c_common_signed_or_unsigned_type): Examine mode, \n+\tnot precision.\n+\n 2003-09-22  David Edelsohn  <edelsohn@gnu.org>\n \t    Hartmut Penner  <hpenner@de.ibm.com>\n "}, {"sha": "905ad9316c376adc3b97cf2820e4f152850ce208", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3504b199c283afd4d48cbd0f786fa6fd33a11a13/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3504b199c283afd4d48cbd0f786fa6fd33a11a13/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3504b199c283afd4d48cbd0f786fa6fd33a11a13", "patch": "@@ -1982,32 +1982,37 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)\n       || TREE_UNSIGNED (type) == unsignedp)\n     return type;\n \n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (signed_char_type_node))\n+  /* Must check the mode of the types, not the precision.  Enumeral types\n+     in C++ have precision set to match their range, but may use a wider\n+     mode to match an ABI.  If we change modes, we may wind up with bad\n+     conversions.  */\n+\n+  if (TYPE_MODE (type) == TYPE_MODE (signed_char_type_node))\n     return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (integer_type_node))\n     return unsignedp ? unsigned_type_node : integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (short_integer_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (short_integer_type_node))\n     return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_integer_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (long_integer_type_node))\n     return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (long_long_integer_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (long_long_integer_type_node))\n     return (unsignedp ? long_long_unsigned_type_node\n \t    : long_long_integer_type_node);\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (widest_integer_literal_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (widest_integer_literal_type_node))\n     return (unsignedp ? widest_unsigned_literal_type_node\n \t    : widest_integer_literal_type_node);\n \n #if HOST_BITS_PER_WIDE_INT >= 64\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (intTI_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (intTI_type_node))\n     return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n #endif\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (intDI_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (intDI_type_node))\n     return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (intSI_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (intSI_type_node))\n     return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (intHI_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (intHI_type_node))\n     return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n-  if (TYPE_PRECISION (type) == TYPE_PRECISION (intQI_type_node))\n+  if (TYPE_MODE (type) == TYPE_MODE (intQI_type_node))\n     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n \n   return type;"}, {"sha": "6416b3f1b868dfbc62708a509c876983dc5fa82e", "filename": "gcc/testsuite/g++.dg/opt/enum1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3504b199c283afd4d48cbd0f786fa6fd33a11a13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fenum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3504b199c283afd4d48cbd0f786fa6fd33a11a13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fenum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fenum1.C?ref=3504b199c283afd4d48cbd0f786fa6fd33a11a13", "patch": "@@ -0,0 +1,30 @@\n+// Verify that we don't confuse precision and mode for enums.\n+// { dg-do run }\n+// { dg-options \"-O\" }\n+\n+extern \"C\" void abort();\n+\n+enum E {\n+  zero = 0, \n+  test = 0xbb\n+};\n+\n+static bool foo(unsigned char *x)\n+{\n+  E e = static_cast<E>(*x);\n+  switch (e)\n+    {\n+    case test:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+int main()\n+{\n+  unsigned char dummy = test;\n+  if (! foo(&dummy))\n+    abort ();\n+  return 0;\n+}"}]}