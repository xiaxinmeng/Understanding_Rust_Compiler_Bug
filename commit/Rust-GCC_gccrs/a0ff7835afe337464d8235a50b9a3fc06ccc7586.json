{"sha": "a0ff7835afe337464d8235a50b9a3fc06ccc7586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBmZjc4MzVhZmUzMzc0NjRkODIzNWE1MGI5YTNmYzA2Y2NjNzU4Ng==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-07-10T20:30:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-07-10T20:30:10Z"}, "message": "Allow indirect sibcall with register arguments\n\nIndirect sibcall with register arguments is OK when there is register\navailable for argument passing.\n\ngcc/\n\n\tPR target/66819\n\t* config/i386/i386.c (ix86_function_ok_for_sibcall): Allow\n\tindirect sibcall with register arguments if register available\n\tfor argument passing.\n\t(init_cumulative_args): Set cfun->machine->arg_reg_available\n\tto (cum->nregs > 0) or to true if function has a variable\n\targument list.\n\t(function_arg_advance_32): Set cfun->machine->arg_reg_available\n\tto false if cum->nregs <= 0.\n\t* config/i386/i386.h (machine_function): Add arg_reg_available.\n\ngcc/testsuite/\n\n\tPR target/66819\n\t* gcc.target/i386/pr66819-1.c: New test.\n\t* gcc.target/i386/pr66819-2.c: Likewise.\n\t* gcc.target/i386/pr66819-3.c: Likewise.\n\t* gcc.target/i386/pr66819-4.c: Likewise.\n\t* gcc.target/i386/pr66819-5.c: Likewise.\n\nFrom-SVN: r225688", "tree": {"sha": "853a4dab0f9999a5a26b2b91f5029e74503d9032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/853a4dab0f9999a5a26b2b91f5029e74503d9032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0ff7835afe337464d8235a50b9a3fc06ccc7586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ff7835afe337464d8235a50b9a3fc06ccc7586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ff7835afe337464d8235a50b9a3fc06ccc7586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ff7835afe337464d8235a50b9a3fc06ccc7586/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb49ee66ef413295fee5f319d3c4129b624bbf8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb49ee66ef413295fee5f319d3c4129b624bbf8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb49ee66ef413295fee5f319d3c4129b624bbf8e"}], "stats": {"total": 100, "additions": 94, "deletions": 6}, "files": [{"sha": "efaf9d37dc54b1311830b955c3dba378b886cc63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -1,3 +1,16 @@\n+2015-07-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66819\n+\t* config/i386/i386.c (ix86_function_ok_for_sibcall): Allow\n+\tindirect sibcall with register arguments if register available\n+\tfor argument passing.\n+\t(init_cumulative_args): Set cfun->machine->arg_reg_available\n+\tto (cum->nregs > 0) or to true if function has a variable\n+\targument list.\n+\t(function_arg_advance_32): Set cfun->machine->arg_reg_available\n+\tto false if cum->nregs <= 0.\n+\t* config/i386/i386.h (machine_function): Add arg_reg_available.\n+\n 2015-07-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sse.md (movdi_to_sse): Use gen_lowpart"}, {"sha": "6b5af11a96b2b048916722a286e5b6b055158859", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -5629,12 +5629,16 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n       if (!decl\n \t  || (TARGET_DLLIMPORT_DECL_ATTRIBUTES && DECL_DLLIMPORT_P (decl)))\n \t{\n-\t  if (ix86_function_regparm (type, NULL) >= 3)\n-\t    {\n-\t      /* ??? Need to count the actual number of registers to be used,\n-\t\t not the possible number of registers.  Fix later.  */\n-\t      return false;\n-\t    }\n+\t  /* Check if regparm >= 3 since arg_reg_available is set to\n+\t     false if regparm == 0.  If regparm is 1 or 2, there is\n+\t     always a call-clobbered register available.\n+\n+\t     ??? The symbol indirect call doesn't need a call-clobbered\n+\t     register.  But we don't know if this is a symbol indirect\n+\t     call or not here.  */\n+\t  if (ix86_function_regparm (type, NULL) >= 3\n+\t      && !cfun->machine->arg_reg_available)\n+\t    return false;\n \t}\n     }\n \n@@ -6610,6 +6614,10 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n       if (stdarg_p (fntype))\n \t{\n \t  cum->nregs = 0;\n+\t  /* Since in 32-bit, variable arguments are always passed on\n+\t     stack, there is scratch register available for indirect\n+\t     sibcall.  */\n+\t  cfun->machine->arg_reg_available = true;\n \t  cum->sse_nregs = 0;\n \t  cum->mmx_nregs = 0;\n \t  cum->warn_avx512f = false;\n@@ -6642,6 +6650,8 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t and DFmode arguments.  Warn for mismatching ABI.  */\n       cum->float_in_sse = ix86_function_sseregparm (fntype, fndecl, true);\n     }\n+\n+  cfun->machine->arg_reg_available = (cum->nregs > 0);\n }\n \n /* Return the \"natural\" mode for TYPE.  In most cases, this is just TYPE_MODE.\n@@ -7584,6 +7594,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, machine_mode mode,\n       if (cum->nregs <= 0)\n \t{\n \t  cum->nregs = 0;\n+\t  cfun->machine->arg_reg_available = false;\n \t  cum->regno = 0;\n \t}\n       break;"}, {"sha": "0fcf391dbe3cafa40baffa0e061ba7760433299e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -2479,6 +2479,13 @@ struct GTY(()) machine_function {\n   /* If true, it is safe to not save/restore DRAP register.  */\n   BOOL_BITFIELD no_drap_save_restore : 1;\n \n+  /* If true, there is register available for argument passing.  This\n+     is used only in ix86_function_ok_for_sibcall by 32-bit to determine\n+     if there is scratch register available for indirect sibcall.  In\n+     64-bit, rax, r10 and r11 are scratch registers which aren't used to\n+     pass arguments and can be used for indirect sibcall.  */\n+  BOOL_BITFIELD arg_reg_available : 1;\n+\n   /* During prologue/epilogue generation, the current frame state.\n      Otherwise, the frame state at the end of the prologue.  */\n   struct machine_frame_state fs;"}, {"sha": "44d391b8ba104f66c91c1a74a6bfea390c63f7a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -1,3 +1,12 @@\n+2015-07-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66819\n+\t* gcc.target/i386/pr66819-1.c: New test.\n+\t* gcc.target/i386/pr66819-2.c: Likewise.\n+\t* gcc.target/i386/pr66819-3.c: Likewise.\n+\t* gcc.target/i386/pr66819-4.c: Likewise.\n+\t* gcc.target/i386/pr66819-5.c: Likewise.\n+\n 2015-07-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/66703"}, {"sha": "7c8a1ab08c3d538c40d87db4f4bf42065267d4e7", "filename": "gcc/testsuite/gcc.target/i386/pr66819-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-1.c?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mregparm=3\" } */\n+/* { dg-final { scan-assembler-not \"call\" } } */\n+\n+void foo(void (*bar)(void))\n+{\n+  bar();\n+}"}, {"sha": "9de4f97a9063eb6ecc76a33766f6d26d27ec526d", "filename": "gcc/testsuite/gcc.target/i386/pr66819-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-2.c?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-fPIC -O2 -mregparm=3\" } */\n+/* { dg-final { scan-assembler-not \"call\" } } */\n+\n+void foo(void (*bar)(void))\n+{\n+  bar();\n+}"}, {"sha": "3bc5a3471e61cc23bbecc86c12b7946a5ffdd0c3", "filename": "gcc/testsuite/gcc.target/i386/pr66819-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-3.c?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mregparm=3\" } */\n+/* { dg-final { scan-assembler-not \"call\" } } */\n+\n+void (*bar)(int, int);\n+\n+void foo(int i, int j)\n+{\n+  bar(i, j);\n+}"}, {"sha": "18b2ccf8120e625d5aedfd0111877df588ff1678", "filename": "gcc/testsuite/gcc.target/i386/pr66819-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-4.c?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mregparm=3\" } */\n+/* { dg-final { scan-assembler-not \"call\" } } */\n+\n+#include <stdarg.h>\n+\n+void (*bar)(int, va_list); \n+\n+void foo(int i, va_list args)\n+{\n+  bar(i, args);\n+}"}, {"sha": "6b019d1aefc3e16d7cf93a7adb67da12f99bf5ad", "filename": "gcc/testsuite/gcc.target/i386/pr66819-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0ff7835afe337464d8235a50b9a3fc06ccc7586/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66819-5.c?ref=a0ff7835afe337464d8235a50b9a3fc06ccc7586", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mregparm=3\" } */\n+/* { dg-final { scan-assembler \"call\" } } */\n+\n+void (*bar)(int, int, int);\n+\n+void foo(int i, int j, int k)\n+{\n+  bar(i, j, k);\n+}"}]}