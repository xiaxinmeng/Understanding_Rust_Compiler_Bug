{"sha": "d4fc83c642213b4362533ef548c8fffe208ea59a", "node_id": "C_kwDOANBUbNoAKGQ0ZmM4M2M2NDIyMTNiNDM2MjUzM2VmNTQ4YzhmZmZlMjA4ZWE1OWE", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-02-04T02:00:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-12T12:38:35Z"}, "message": "[Ada] Introduce hardbool Machine_Attribute for Ada\n\nImplement and document hardened booleans, from nonstandard boolean types\nwith representation clauses to the extra validity checking performed on\nboolean types annotated with the \"hardbool\" Machine_Attribute pragma.\n\ngcc/ada/\n\n\t* doc/gnat_rm/security_hardening_features.rst (Hardened\n\tBooleans): New.\n\t* exp_util.adb (Adjust_Condition): Perform validity checking on\n\thardbool-annotated types even with -gnatVT.\n\t* gnat_rm.texi: Regenerate.\n\t* gcc-interface/utils.cc (gnat_internal_attribute_table): Ignore\n\thardbool.", "tree": {"sha": "5e088ee898189fd9f50fcea7a9245296b26efe46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e088ee898189fd9f50fcea7a9245296b26efe46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4fc83c642213b4362533ef548c8fffe208ea59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fc83c642213b4362533ef548c8fffe208ea59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4fc83c642213b4362533ef548c8fffe208ea59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4fc83c642213b4362533ef548c8fffe208ea59a/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1c939d9b800ef9aadf8a82cbafdfae5c88210c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb1c939d9b800ef9aadf8a82cbafdfae5c88210c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb1c939d9b800ef9aadf8a82cbafdfae5c88210c"}], "stats": {"total": 202, "additions": 175, "deletions": 27}, "files": [{"sha": "5322d987fabf5d1dc301e35eaf464553916ed91b", "filename": "gcc/ada/doc/gnat_rm/security_hardening_features.rst", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fc83c642213b4362533ef548c8fffe208ea59a/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fc83c642213b4362533ef548c8fffe208ea59a/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fsecurity_hardening_features.rst?ref=d4fc83c642213b4362533ef548c8fffe208ea59a", "patch": "@@ -160,3 +160,39 @@ files of the corresponding passes, through command line options\n \n They are separate options, however, because of the significantly\n different performance impact of the hardening transformations.\n+\n+\n+.. Hardened Booleans:\n+\n+Hardened Booleans\n+=================\n+\n+Ada has built-in support for introducing boolean types with\n+alternative representations, using representation clauses:\n+\n+.. code-block:: ada\n+\n+   type HBool is new Boolean;\n+   for HBool use (16#5a#, 16#a5#);\n+   for HBool'Size use 8;\n+\n+When validity checking is enabled, the compiler will check that\n+variables of such types hold values corresponding to the selected\n+representations.\n+\n+There are multiple strategies for where to introduce validity checking\n+(see *-gnatV* options).  Their goal is to guard against various kinds\n+of programming errors, and GNAT strives to omit checks when program\n+logic rules out an invalid value, and optimizers may further remove\n+checks found to be redundant.\n+\n+For additional hardening, the ``hardbool`` :samp:`Machine_Attribute`\n+pragma can be used to annotate boolean types with representation\n+clauses, so that expressions of such types used as conditions are\n+checked even when compiling with *-gnatVT*.\n+\n+.. code-block:: ada\n+\n+   pragma Machine_Attribute (HBool, \"hardbool\");\n+\n+Note that *-gnatVn* will disable even ``hardbool`` testing."}, {"sha": "cd0dd4950d661ed98bc4fd177a0253058268e4ca", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fc83c642213b4362533ef548c8fffe208ea59a/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fc83c642213b4362533ef548c8fffe208ea59a/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d4fc83c642213b4362533ef548c8fffe208ea59a", "patch": "@@ -328,6 +328,72 @@ package body Exp_Util is\n    ----------------------\n \n    procedure Adjust_Condition (N : Node_Id) is\n+\n+      function Is_Hardbool_Type (T : Entity_Id) return Boolean;\n+      --  Return True iff T is a type annotated with the\n+      --  Machine_Attribute pragma \"hardbool\".\n+\n+      ----------------------\n+      -- Is_Hardbool_Type --\n+      ----------------------\n+\n+      function Is_Hardbool_Type (T : Entity_Id) return Boolean is\n+\n+         function Find_Hardbool_Pragma\n+           (Id : Entity_Id) return Node_Id;\n+         --  Return a Rep_Item associated with entity Id that\n+         --  corresponds to the Hardbool Machine_Attribute pragma, if\n+         --  any, or Empty otherwise.\n+\n+         function Pragma_Arg_To_String (Item : Node_Id) return String is\n+            (To_String (Strval (Expr_Value_S (Item))));\n+         --  Return the pragma argument Item as a String\n+\n+         function Hardbool_Pragma_P (Item : Node_Id) return Boolean is\n+            (Nkind (Item) = N_Pragma\n+               and then\n+             Pragma_Name (Item) = Name_Machine_Attribute\n+               and then\n+             Pragma_Arg_To_String\n+               (Get_Pragma_Arg\n+                  (Next (First (Pragma_Argument_Associations (Item)))))\n+               = \"hardbool\");\n+         --  Return True iff representation Item is a \"hardbool\"\n+         --  Machine_Attribute pragma.\n+\n+         --------------------------\n+         -- Find_Hardbool_Pragma --\n+         --------------------------\n+\n+         function Find_Hardbool_Pragma\n+           (Id : Entity_Id) return Node_Id\n+         is\n+            Item : Node_Id;\n+\n+         begin\n+            if not Has_Gigi_Rep_Item (Id) then\n+               return Empty;\n+            end if;\n+\n+            Item := First_Rep_Item (Id);\n+            while Present (Item) loop\n+               if Hardbool_Pragma_P (Item) then\n+                  return Item;\n+               end if;\n+               Item := Next_Rep_Item (Item);\n+            end loop;\n+\n+            return Empty;\n+         end Find_Hardbool_Pragma;\n+\n+      --  Start of processing for Is_Hardbool_Type\n+\n+      begin\n+         return Present (Find_Hardbool_Pragma (T));\n+      end Is_Hardbool_Type;\n+\n+   --  Start of processing for Adjust_Condition\n+\n    begin\n       if No (N) then\n          return;\n@@ -347,7 +413,10 @@ package body Exp_Util is\n \n          --  Apply validity checking if needed\n \n-         if Validity_Checks_On and Validity_Check_Tests then\n+         if Validity_Checks_On\n+           and then\n+             (Validity_Check_Tests or else Is_Hardbool_Type (T))\n+         then\n             Ensure_Valid (N);\n          end if;\n "}, {"sha": "5722ed2611db8e3f3fc1f7689ab543c5dacbd708", "filename": "gcc/ada/gcc-interface/utils.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fc83c642213b4362533ef548c8fffe208ea59a/gcc%2Fada%2Fgcc-interface%2Futils.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fc83c642213b4362533ef548c8fffe208ea59a/gcc%2Fada%2Fgcc-interface%2Futils.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.cc?ref=d4fc83c642213b4362533ef548c8fffe208ea59a", "patch": "@@ -208,6 +208,10 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n   { \"format_arg\",   1, 1,  false, true,  true,  false,\n     fake_attribute_handler, NULL },\n \n+  /* This is handled entirely in the front end.  */\n+  { \"hardbool\",     0, 0,  false, true, false, true,\n+    fake_attribute_handler, NULL },\n+\n   { NULL,           0, 0,  false, false, false, false,\n     NULL, NULL }\n };"}, {"sha": "9986c535fb13ff5eae1c49d7ef426cf54cb3ccd2", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 65, "deletions": 26, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4fc83c642213b4362533ef548c8fffe208ea59a/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4fc83c642213b4362533ef548c8fffe208ea59a/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d4fc83c642213b4362533ef548c8fffe208ea59a", "patch": "@@ -885,6 +885,7 @@ Security Hardening Features\n * Register Scrubbing:: \n * Stack Scrubbing:: \n * Hardened Conditionals:: \n+* Hardened Booleans:: \n \n Obsolescent Features\n \n@@ -28853,6 +28854,7 @@ are provided by GNAT.\n * Register Scrubbing:: \n * Stack Scrubbing:: \n * Hardened Conditionals:: \n+* Hardened Booleans:: \n \n @end menu\n \n@@ -28967,7 +28969,7 @@ Bar_Callable_Ptr.\n \n @c Hardened Conditionals:\n \n-@node Hardened Conditionals,,Stack Scrubbing,Security Hardening Features\n+@node Hardened Conditionals,Hardened Booleans,Stack Scrubbing,Security Hardening Features\n @anchor{gnat_rm/security_hardening_features hardened-conditionals}@anchor{440}\n @section Hardened Conditionals\n \n@@ -29007,8 +29009,45 @@ files of the corresponding passes, through command line options\n They are separate options, however, because of the significantly\n different performance impact of the hardening transformations.\n \n+@c Hardened Booleans:\n+\n+@node Hardened Booleans,,Hardened Conditionals,Security Hardening Features\n+@anchor{gnat_rm/security_hardening_features hardened-booleans}@anchor{441}\n+@section Hardened Booleans\n+\n+\n+Ada has built-in support for introducing boolean types with\n+alternative representations, using representation clauses:\n+\n+@example\n+type HBool is new Boolean;\n+for HBool use (16#5a#, 16#a5#);\n+for HBool'Size use 8;\n+@end example\n+\n+When validity checking is enabled, the compiler will check that\n+variables of such types hold values corresponding to the selected\n+representations.\n+\n+There are multiple strategies for where to introduce validity checking\n+(see @emph{-gnatV} options).  Their goal is to guard against various kinds\n+of programming errors, and GNAT strives to omit checks when program\n+logic rules out an invalid value, and optimizers may further remove\n+checks found to be redundant.\n+\n+For additional hardening, the @code{hardbool} @code{Machine_Attribute}\n+pragma can be used to annotate boolean types with representation\n+clauses, so that expressions of such types used as conditions are\n+checked even when compiling with @emph{-gnatVT}.\n+\n+@example\n+pragma Machine_Attribute (HBool, \"hardbool\");\n+@end example\n+\n+Note that @emph{-gnatVn} will disable even @code{hardbool} testing.\n+\n @node Obsolescent Features,Compatibility and Porting Guide,Security Hardening Features,Top\n-@anchor{gnat_rm/obsolescent_features doc}@anchor{441}@anchor{gnat_rm/obsolescent_features id1}@anchor{442}@anchor{gnat_rm/obsolescent_features obsolescent-features}@anchor{16}\n+@anchor{gnat_rm/obsolescent_features doc}@anchor{442}@anchor{gnat_rm/obsolescent_features id1}@anchor{443}@anchor{gnat_rm/obsolescent_features obsolescent-features}@anchor{16}\n @chapter Obsolescent Features\n \n \n@@ -29027,7 +29066,7 @@ compatibility purposes.\n @end menu\n \n @node pragma No_Run_Time,pragma Ravenscar,,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features id2}@anchor{443}@anchor{gnat_rm/obsolescent_features pragma-no-run-time}@anchor{444}\n+@anchor{gnat_rm/obsolescent_features id2}@anchor{444}@anchor{gnat_rm/obsolescent_features pragma-no-run-time}@anchor{445}\n @section pragma No_Run_Time\n \n \n@@ -29040,7 +29079,7 @@ preferred usage is to use an appropriately configured run-time that\n includes just those features that are to be made accessible.\n \n @node pragma Ravenscar,pragma Restricted_Run_Time,pragma No_Run_Time,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features id3}@anchor{445}@anchor{gnat_rm/obsolescent_features pragma-ravenscar}@anchor{446}\n+@anchor{gnat_rm/obsolescent_features id3}@anchor{446}@anchor{gnat_rm/obsolescent_features pragma-ravenscar}@anchor{447}\n @section pragma Ravenscar\n \n \n@@ -29049,7 +29088,7 @@ The pragma @code{Ravenscar} has exactly the same effect as pragma\n is part of the new Ada 2005 standard.\n \n @node pragma Restricted_Run_Time,pragma Task_Info,pragma Ravenscar,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features id4}@anchor{447}@anchor{gnat_rm/obsolescent_features pragma-restricted-run-time}@anchor{448}\n+@anchor{gnat_rm/obsolescent_features id4}@anchor{448}@anchor{gnat_rm/obsolescent_features pragma-restricted-run-time}@anchor{449}\n @section pragma Restricted_Run_Time\n \n \n@@ -29059,7 +29098,7 @@ preferred since the Ada 2005 pragma @code{Profile} is intended for\n this kind of implementation dependent addition.\n \n @node pragma Task_Info,package System Task_Info s-tasinf ads,pragma Restricted_Run_Time,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features id5}@anchor{449}@anchor{gnat_rm/obsolescent_features pragma-task-info}@anchor{44a}\n+@anchor{gnat_rm/obsolescent_features id5}@anchor{44a}@anchor{gnat_rm/obsolescent_features pragma-task-info}@anchor{44b}\n @section pragma Task_Info\n \n \n@@ -29085,7 +29124,7 @@ in the spec of package System.Task_Info in the runtime\n library.\n \n @node package System Task_Info s-tasinf ads,,pragma Task_Info,Obsolescent Features\n-@anchor{gnat_rm/obsolescent_features package-system-task-info}@anchor{44b}@anchor{gnat_rm/obsolescent_features package-system-task-info-s-tasinf-ads}@anchor{44c}\n+@anchor{gnat_rm/obsolescent_features package-system-task-info}@anchor{44c}@anchor{gnat_rm/obsolescent_features package-system-task-info-s-tasinf-ads}@anchor{44d}\n @section package System.Task_Info (@code{s-tasinf.ads})\n \n \n@@ -29095,7 +29134,7 @@ to support the @code{Task_Info} pragma. The predefined Ada package\n standard replacement for GNAT\u2019s @code{Task_Info} functionality.\n \n @node Compatibility and Porting Guide,GNU Free Documentation License,Obsolescent Features,Top\n-@anchor{gnat_rm/compatibility_and_porting_guide doc}@anchor{44d}@anchor{gnat_rm/compatibility_and_porting_guide compatibility-and-porting-guide}@anchor{17}@anchor{gnat_rm/compatibility_and_porting_guide id1}@anchor{44e}\n+@anchor{gnat_rm/compatibility_and_porting_guide doc}@anchor{44e}@anchor{gnat_rm/compatibility_and_porting_guide compatibility-and-porting-guide}@anchor{17}@anchor{gnat_rm/compatibility_and_porting_guide id1}@anchor{44f}\n @chapter Compatibility and Porting Guide\n \n \n@@ -29117,7 +29156,7 @@ applications developed in other Ada environments.\n @end menu\n \n @node Writing Portable Fixed-Point Declarations,Compatibility with Ada 83,,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide id2}@anchor{44f}@anchor{gnat_rm/compatibility_and_porting_guide writing-portable-fixed-point-declarations}@anchor{450}\n+@anchor{gnat_rm/compatibility_and_porting_guide id2}@anchor{450}@anchor{gnat_rm/compatibility_and_porting_guide writing-portable-fixed-point-declarations}@anchor{451}\n @section Writing Portable Fixed-Point Declarations\n \n \n@@ -29239,7 +29278,7 @@ If you follow this scheme you will be guaranteed that your fixed-point\n types will be portable.\n \n @node Compatibility with Ada 83,Compatibility between Ada 95 and Ada 2005,Writing Portable Fixed-Point Declarations,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-ada-83}@anchor{451}@anchor{gnat_rm/compatibility_and_porting_guide id3}@anchor{452}\n+@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-ada-83}@anchor{452}@anchor{gnat_rm/compatibility_and_porting_guide id3}@anchor{453}\n @section Compatibility with Ada 83\n \n \n@@ -29267,7 +29306,7 @@ following subsections treat the most likely issues to be encountered.\n @end menu\n \n @node Legal Ada 83 programs that are illegal in Ada 95,More deterministic semantics,,Compatibility with Ada 83\n-@anchor{gnat_rm/compatibility_and_porting_guide id4}@anchor{453}@anchor{gnat_rm/compatibility_and_porting_guide legal-ada-83-programs-that-are-illegal-in-ada-95}@anchor{454}\n+@anchor{gnat_rm/compatibility_and_porting_guide id4}@anchor{454}@anchor{gnat_rm/compatibility_and_porting_guide legal-ada-83-programs-that-are-illegal-in-ada-95}@anchor{455}\n @subsection Legal Ada 83 programs that are illegal in Ada 95\n \n \n@@ -29367,7 +29406,7 @@ the fix is usually simply to add the @code{(<>)} to the generic declaration.\n @end itemize\n \n @node More deterministic semantics,Changed semantics,Legal Ada 83 programs that are illegal in Ada 95,Compatibility with Ada 83\n-@anchor{gnat_rm/compatibility_and_porting_guide id5}@anchor{455}@anchor{gnat_rm/compatibility_and_porting_guide more-deterministic-semantics}@anchor{456}\n+@anchor{gnat_rm/compatibility_and_porting_guide id5}@anchor{456}@anchor{gnat_rm/compatibility_and_porting_guide more-deterministic-semantics}@anchor{457}\n @subsection More deterministic semantics\n \n \n@@ -29395,7 +29434,7 @@ which open select branches are executed.\n @end itemize\n \n @node Changed semantics,Other language compatibility issues,More deterministic semantics,Compatibility with Ada 83\n-@anchor{gnat_rm/compatibility_and_porting_guide changed-semantics}@anchor{457}@anchor{gnat_rm/compatibility_and_porting_guide id6}@anchor{458}\n+@anchor{gnat_rm/compatibility_and_porting_guide changed-semantics}@anchor{458}@anchor{gnat_rm/compatibility_and_porting_guide id6}@anchor{459}\n @subsection Changed semantics\n \n \n@@ -29437,7 +29476,7 @@ covers only the restricted range.\n @end itemize\n \n @node Other language compatibility issues,,Changed semantics,Compatibility with Ada 83\n-@anchor{gnat_rm/compatibility_and_porting_guide id7}@anchor{459}@anchor{gnat_rm/compatibility_and_porting_guide other-language-compatibility-issues}@anchor{45a}\n+@anchor{gnat_rm/compatibility_and_porting_guide id7}@anchor{45a}@anchor{gnat_rm/compatibility_and_porting_guide other-language-compatibility-issues}@anchor{45b}\n @subsection Other language compatibility issues\n \n \n@@ -29470,7 +29509,7 @@ include @code{pragma Interface} and the floating point type attributes\n @end itemize\n \n @node Compatibility between Ada 95 and Ada 2005,Implementation-dependent characteristics,Compatibility with Ada 83,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide compatibility-between-ada-95-and-ada-2005}@anchor{45b}@anchor{gnat_rm/compatibility_and_porting_guide id8}@anchor{45c}\n+@anchor{gnat_rm/compatibility_and_porting_guide compatibility-between-ada-95-and-ada-2005}@anchor{45c}@anchor{gnat_rm/compatibility_and_porting_guide id8}@anchor{45d}\n @section Compatibility between Ada 95 and Ada 2005\n \n \n@@ -29542,7 +29581,7 @@ can declare a function returning a value from an anonymous access type.\n @end itemize\n \n @node Implementation-dependent characteristics,Compatibility with Other Ada Systems,Compatibility between Ada 95 and Ada 2005,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide id9}@anchor{45d}@anchor{gnat_rm/compatibility_and_porting_guide implementation-dependent-characteristics}@anchor{45e}\n+@anchor{gnat_rm/compatibility_and_porting_guide id9}@anchor{45e}@anchor{gnat_rm/compatibility_and_porting_guide implementation-dependent-characteristics}@anchor{45f}\n @section Implementation-dependent characteristics\n \n \n@@ -29565,7 +29604,7 @@ transition from certain Ada 83 compilers.\n @end menu\n \n @node Implementation-defined pragmas,Implementation-defined attributes,,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide id10}@anchor{45f}@anchor{gnat_rm/compatibility_and_porting_guide implementation-defined-pragmas}@anchor{460}\n+@anchor{gnat_rm/compatibility_and_porting_guide id10}@anchor{460}@anchor{gnat_rm/compatibility_and_porting_guide implementation-defined-pragmas}@anchor{461}\n @subsection Implementation-defined pragmas\n \n \n@@ -29587,7 +29626,7 @@ avoiding compiler rejection of units that contain such pragmas; they are not\n relevant in a GNAT context and hence are not otherwise implemented.\n \n @node Implementation-defined attributes,Libraries,Implementation-defined pragmas,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide id11}@anchor{461}@anchor{gnat_rm/compatibility_and_porting_guide implementation-defined-attributes}@anchor{462}\n+@anchor{gnat_rm/compatibility_and_porting_guide id11}@anchor{462}@anchor{gnat_rm/compatibility_and_porting_guide implementation-defined-attributes}@anchor{463}\n @subsection Implementation-defined attributes\n \n \n@@ -29601,7 +29640,7 @@ Ada 83, GNAT supplies the attributes @code{Bit}, @code{Machine_Size} and\n @code{Type_Class}.\n \n @node Libraries,Elaboration order,Implementation-defined attributes,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide id12}@anchor{463}@anchor{gnat_rm/compatibility_and_porting_guide libraries}@anchor{464}\n+@anchor{gnat_rm/compatibility_and_porting_guide id12}@anchor{464}@anchor{gnat_rm/compatibility_and_porting_guide libraries}@anchor{465}\n @subsection Libraries\n \n \n@@ -29630,7 +29669,7 @@ be preferable to retrofit the application using modular types.\n @end itemize\n \n @node Elaboration order,Target-specific aspects,Libraries,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide elaboration-order}@anchor{465}@anchor{gnat_rm/compatibility_and_porting_guide id13}@anchor{466}\n+@anchor{gnat_rm/compatibility_and_porting_guide elaboration-order}@anchor{466}@anchor{gnat_rm/compatibility_and_porting_guide id13}@anchor{467}\n @subsection Elaboration order\n \n \n@@ -29666,7 +29705,7 @@ pragmas either globally (as an effect of the @emph{-gnatE} switch) or locally\n @end itemize\n \n @node Target-specific aspects,,Elaboration order,Implementation-dependent characteristics\n-@anchor{gnat_rm/compatibility_and_porting_guide id14}@anchor{467}@anchor{gnat_rm/compatibility_and_porting_guide target-specific-aspects}@anchor{468}\n+@anchor{gnat_rm/compatibility_and_porting_guide id14}@anchor{468}@anchor{gnat_rm/compatibility_and_porting_guide target-specific-aspects}@anchor{469}\n @subsection Target-specific aspects\n \n \n@@ -29679,10 +29718,10 @@ on the robustness of the original design.  Moreover, Ada 95 (and thus\n Ada 2005 and Ada 2012) are sometimes\n incompatible with typical Ada 83 compiler practices regarding implicit\n packing, the meaning of the Size attribute, and the size of access values.\n-GNAT\u2019s approach to these issues is described in @ref{469,,Representation Clauses}.\n+GNAT\u2019s approach to these issues is described in @ref{46a,,Representation Clauses}.\n \n @node Compatibility with Other Ada Systems,Representation Clauses,Implementation-dependent characteristics,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-other-ada-systems}@anchor{46a}@anchor{gnat_rm/compatibility_and_porting_guide id15}@anchor{46b}\n+@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-other-ada-systems}@anchor{46b}@anchor{gnat_rm/compatibility_and_porting_guide id15}@anchor{46c}\n @section Compatibility with Other Ada Systems\n \n \n@@ -29725,7 +29764,7 @@ far beyond this minimal set, as described in the next section.\n @end itemize\n \n @node Representation Clauses,Compatibility with HP Ada 83,Compatibility with Other Ada Systems,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide id16}@anchor{46c}@anchor{gnat_rm/compatibility_and_porting_guide representation-clauses}@anchor{469}\n+@anchor{gnat_rm/compatibility_and_porting_guide id16}@anchor{46d}@anchor{gnat_rm/compatibility_and_porting_guide representation-clauses}@anchor{46a}\n @section Representation Clauses\n \n \n@@ -29818,7 +29857,7 @@ with thin pointers.\n @end itemize\n \n @node Compatibility with HP Ada 83,,Representation Clauses,Compatibility and Porting Guide\n-@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-hp-ada-83}@anchor{46d}@anchor{gnat_rm/compatibility_and_porting_guide id17}@anchor{46e}\n+@anchor{gnat_rm/compatibility_and_porting_guide compatibility-with-hp-ada-83}@anchor{46e}@anchor{gnat_rm/compatibility_and_porting_guide id17}@anchor{46f}\n @section Compatibility with HP Ada 83\n \n \n@@ -29848,7 +29887,7 @@ extension of package System.\n @end itemize\n \n @node GNU Free Documentation License,Index,Compatibility and Porting Guide,Top\n-@anchor{share/gnu_free_documentation_license doc}@anchor{46f}@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{470}\n+@anchor{share/gnu_free_documentation_license doc}@anchor{470}@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{471}\n @chapter GNU Free Documentation License\n \n "}]}