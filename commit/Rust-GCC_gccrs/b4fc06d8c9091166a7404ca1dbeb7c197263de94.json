{"sha": "b4fc06d8c9091166a7404ca1dbeb7c197263de94", "node_id": "C_kwDOANBUbNoAKGI0ZmMwNmQ4YzkwOTExNjZhNzQwNGNhMWRiZWI3YzE5NzI2M2RlOTQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-10T13:29:13Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-10T15:41:25Z"}, "message": "Do not specify NAN sign in frange::set_nonnegative.\n\nAfter further reading of the IEEE 754 standard, it has become clear\nthat there are no guarantees with regards to the sign of a NAN when it\ncomes to any operation other than copy, copysign, abs, and negate.\n\nCurrently, set_nonnegative() is only used in one place in ranger\napplicable to floating point values, when expanding unknown calls.\nSince we already specially handle copy, copysign, abs, and negate, all\nthe calls to set_nonnegative() must be NAN-sign agnostic.\n\nThe cleanest solution is to leave the sign unspecificied in\nfrange::set_nonnegative().  Any special case, must be handled by the\ncaller.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (frange::set_nonnegative): Remove NAN sign handling.\n\t(range_tests_signed_zeros): Adjust test.", "tree": {"sha": "81fe2936ccae9c944a4d12ab44fd575a7b838fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81fe2936ccae9c944a4d12ab44fd575a7b838fcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4fc06d8c9091166a7404ca1dbeb7c197263de94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fc06d8c9091166a7404ca1dbeb7c197263de94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4fc06d8c9091166a7404ca1dbeb7c197263de94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4fc06d8c9091166a7404ca1dbeb7c197263de94/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b76811f2c3773e8cabcc07932bf13e82e264db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b76811f2c3773e8cabcc07932bf13e82e264db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b76811f2c3773e8cabcc07932bf13e82e264db"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "d55d85846c1e756ca85333062885312202389443", "filename": "gcc/value-range.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4fc06d8c9091166a7404ca1dbeb7c197263de94/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4fc06d8c9091166a7404ca1dbeb7c197263de94/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=b4fc06d8c9091166a7404ca1dbeb7c197263de94", "patch": "@@ -797,14 +797,17 @@ frange::zero_p () const\n \t  && real_iszero (&m_max));\n }\n \n+// Set the range to non-negative numbers, that is [+0.0, +INF].\n+//\n+// The NAN in the resulting range (if HONOR_NANS) has a varying sign\n+// as there are no guarantees in IEEE 754 wrt to the sign of a NAN,\n+// except for copy, abs, and copysign.  It is the responsibility of\n+// the caller to set the NAN's sign if desired.\n+\n void\n frange::set_nonnegative (tree type)\n {\n   set (type, dconst0, frange_val_max (type));\n-\n-  // Set +NAN as the only possibility.\n-  if (HONOR_NANS (type))\n-    update_nan (/*sign=*/false);\n }\n \n // Here we copy between any two irange's.  The ranges can be legacy or\n@@ -3923,7 +3926,6 @@ range_tests_signed_zeros ()\n     ASSERT_TRUE (r0.undefined_p ());\n \n   r0.set_nonnegative (float_type_node);\n-  ASSERT_TRUE (r0.signbit_p (signbit) && !signbit);\n   if (HONOR_NANS (float_type_node))\n     ASSERT_TRUE (r0.maybe_isnan ());\n }"}]}