{"sha": "e88fb323aad7bc8974da3cb28aae2ef1b500583d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg4ZmIzMjNhYWQ3YmM4OTc0ZGEzY2IyOGFhZTJlZjFiNTAwNTgzZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-11-06T11:22:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-11-06T11:22:03Z"}, "message": "mips-protos.h (mips_initial_elimination_offset): Change return type to HOST_WIDE_INT.\n\n\t* config/mips/mips-protos.h (mips_initial_elimination_offset): Change\n\treturn type to HOST_WIDE_INT.\n\t* config/mips/mips.c (mips_frame_info): Give sizes type HOST_WIDE_INT.\n\tMake initialized a bool.  Make register masks unsigned ints.\n\t(compute_frame_size): Make same mask change here.  Use HOST_WIDE_INT\n\twhere appropriate.\n\t(mips_initial_elimination_offset): Return a HOST_WIDE_INT.\n\t(mips_output_function_prologue): Print sizes as HOST_WIDE_INTs.\n\nFrom-SVN: r73303", "tree": {"sha": "fb900b9f64bc13d7679a0583f8c195f80702393b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb900b9f64bc13d7679a0583f8c195f80702393b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e88fb323aad7bc8974da3cb28aae2ef1b500583d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88fb323aad7bc8974da3cb28aae2ef1b500583d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88fb323aad7bc8974da3cb28aae2ef1b500583d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88fb323aad7bc8974da3cb28aae2ef1b500583d/comments", "author": null, "committer": null, "parents": [{"sha": "88d6a75f25860f8a6d1f646d7d616ac87bf84fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d6a75f25860f8a6d1f646d7d616ac87bf84fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d6a75f25860f8a6d1f646d7d616ac87bf84fce"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "fbb999c2a0e0b3dc15fe6ee45a80607a0cb574cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88fb323aad7bc8974da3cb28aae2ef1b500583d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88fb323aad7bc8974da3cb28aae2ef1b500583d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e88fb323aad7bc8974da3cb28aae2ef1b500583d", "patch": "@@ -1,3 +1,14 @@\n+2003-11-06  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips-protos.h (mips_initial_elimination_offset): Change\n+\treturn type to HOST_WIDE_INT.\n+\t* config/mips/mips.c (mips_frame_info): Give sizes type HOST_WIDE_INT.\n+\tMake initialized a bool.  Make register masks unsigned ints.\n+\t(compute_frame_size): Make same mask change here.  Use HOST_WIDE_INT\n+\twhere appropriate.\n+\t(mips_initial_elimination_offset): Return a HOST_WIDE_INT.\n+\t(mips_output_function_prologue): Print sizes as HOST_WIDE_INTs.\n+\n 2003-11-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/frv/frv.c (frv_initial_elimination_offset): Remove bogus"}, {"sha": "a5daae098272d44128d9a8b782aedab117422278", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88fb323aad7bc8974da3cb28aae2ef1b500583d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88fb323aad7bc8974da3cb28aae2ef1b500583d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=e88fb323aad7bc8974da3cb28aae2ef1b500583d", "patch": "@@ -113,7 +113,7 @@ extern void mips_finish_declare_object (FILE *, tree, int, int);\n \n extern rtx mips_rewrite_small_data (rtx);\n extern HOST_WIDE_INT compute_frame_size (HOST_WIDE_INT);\n-extern int mips_initial_elimination_offset (int, int);\n+extern HOST_WIDE_INT mips_initial_elimination_offset (int, int);\n extern rtx mips_return_addr (int, rtx);\n extern void mips_expand_prologue (void);\n extern void mips_expand_epilogue (int);"}, {"sha": "8d2c780990cbeadf7f4a6ee8b470abecb6239009", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88fb323aad7bc8974da3cb28aae2ef1b500583d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88fb323aad7bc8974da3cb28aae2ef1b500583d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e88fb323aad7bc8974da3cb28aae2ef1b500583d", "patch": "@@ -294,21 +294,21 @@ static unsigned int irix_section_type_flags (tree, const char *, int);\n \n struct mips_frame_info GTY(())\n {\n-  long total_size;\t\t/* # bytes that the entire frame takes up */\n-  long var_size;\t\t/* # bytes that variables take up */\n-  long args_size;\t\t/* # bytes that outgoing arguments take up */\n-  long cprestore_size;\t\t/* # bytes that the .cprestore slot takes up */\n-  int  gp_reg_size;\t\t/* # bytes needed to store gp regs */\n-  int  fp_reg_size;\t\t/* # bytes needed to store fp regs */\n-  long mask;\t\t\t/* mask of saved gp registers */\n-  long fmask;\t\t\t/* mask of saved fp registers */\n-  long gp_save_offset;\t\t/* offset from vfp to store gp registers */\n-  long fp_save_offset;\t\t/* offset from vfp to store fp registers */\n-  long gp_sp_offset;\t\t/* offset from new sp to store gp registers */\n-  long fp_sp_offset;\t\t/* offset from new sp to store fp registers */\n-  int  initialized;\t\t/* != 0 if frame size already calculated */\n-  int  num_gp;\t\t\t/* number of gp registers saved */\n-  int  num_fp;\t\t\t/* number of fp registers saved */\n+  HOST_WIDE_INT total_size;\t/* # bytes that the entire frame takes up */\n+  HOST_WIDE_INT var_size;\t/* # bytes that variables take up */\n+  HOST_WIDE_INT args_size;\t/* # bytes that outgoing arguments take up */\n+  HOST_WIDE_INT cprestore_size;\t/* # bytes that the .cprestore slot takes up */\n+  HOST_WIDE_INT gp_reg_size;\t/* # bytes needed to store gp regs */\n+  HOST_WIDE_INT fp_reg_size;\t/* # bytes needed to store fp regs */\n+  unsigned int mask;\t\t/* mask of saved gp registers */\n+  unsigned int fmask;\t\t/* mask of saved fp registers */\n+  HOST_WIDE_INT gp_save_offset;\t/* offset from vfp to store gp registers */\n+  HOST_WIDE_INT fp_save_offset;\t/* offset from vfp to store fp registers */\n+  HOST_WIDE_INT gp_sp_offset;\t/* offset from new sp to store gp registers */\n+  HOST_WIDE_INT fp_sp_offset;\t/* offset from new sp to store fp registers */\n+  bool initialized;\t\t/* true if frame size already calculated */\n+  int num_gp;\t\t\t/* number of gp registers saved */\n+  int num_fp;\t\t\t/* number of fp registers saved */\n };\n \n struct machine_function GTY(()) {\n@@ -6190,8 +6190,8 @@ compute_frame_size (HOST_WIDE_INT size)\n   HOST_WIDE_INT gp_reg_rounded;\t/* # bytes needed to store gp after rounding */\n   HOST_WIDE_INT gp_reg_size;\t/* # bytes needed to store gp regs */\n   HOST_WIDE_INT fp_reg_size;\t/* # bytes needed to store fp regs */\n-  long mask;\t\t\t/* mask of saved gp registers */\n-  long fmask;\t\t\t/* mask of saved fp registers */\n+  unsigned int mask;\t\t/* mask of saved gp registers */\n+  unsigned int fmask;\t\t/* mask of saved fp registers */\n \n   cfun->machine->global_pointer = mips_global_pointer ();\n \n@@ -6224,7 +6224,7 @@ compute_frame_size (HOST_WIDE_INT size)\n     if (mips_save_reg_p (regno))\n       {\n \tgp_reg_size += GET_MODE_SIZE (gpr_mode);\n-\tmask |= 1L << (regno - GP_REG_FIRST);\n+\tmask |= 1 << (regno - GP_REG_FIRST);\n       }\n \n   /* We need to restore these for the handler.  */\n@@ -6237,7 +6237,7 @@ compute_frame_size (HOST_WIDE_INT size)\n \t  if (regno == INVALID_REGNUM)\n \t    break;\n \t  gp_reg_size += GET_MODE_SIZE (gpr_mode);\n-\t  mask |= 1L << (regno - GP_REG_FIRST);\n+\t  mask |= 1 << (regno - GP_REG_FIRST);\n \t}\n     }\n \n@@ -6277,7 +6277,7 @@ compute_frame_size (HOST_WIDE_INT size)\n \n   if (mask)\n     {\n-      unsigned long offset;\n+      HOST_WIDE_INT offset;\n \n       offset = (args_size + cprestore_size + var_size\n \t\t+ gp_reg_size - GET_MODE_SIZE (gpr_mode));\n@@ -6292,9 +6292,11 @@ compute_frame_size (HOST_WIDE_INT size)\n \n   if (fmask)\n     {\n-      unsigned long offset = (args_size + cprestore_size + var_size\n-\t\t\t      + gp_reg_rounded + fp_reg_size\n-\t\t\t      - FP_INC * UNITS_PER_FPREG);\n+      HOST_WIDE_INT offset;\n+\n+      offset = (args_size + cprestore_size + var_size\n+\t\t+ gp_reg_rounded + fp_reg_size\n+\t\t- FP_INC * UNITS_PER_FPREG);\n       cfun->machine->frame.fp_sp_offset = offset;\n       cfun->machine->frame.fp_save_offset = offset - total_size;\n     }\n@@ -6312,10 +6314,10 @@ compute_frame_size (HOST_WIDE_INT size)\n    pointer or argument pointer.  TO is either the stack pointer or\n    hard frame pointer.  */\n \n-int\n+HOST_WIDE_INT\n mips_initial_elimination_offset (int from, int to)\n {\n-  int offset;\n+  HOST_WIDE_INT offset;\n \n   compute_frame_size (get_frame_size ());\n \n@@ -6460,12 +6462,15 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n     {\n       /* .frame FRAMEREG, FRAMESIZE, RETREG */\n       fprintf (file,\n-\t       \"\\t.frame\\t%s,%ld,%s\\t\\t# vars= %ld, regs= %d/%d, args= %ld, gp= %ld\\n\",\n+\t       \"\\t.frame\\t%s,\" HOST_WIDE_INT_PRINT_DEC \",%s\\t\\t\"\n+\t       \"# vars= \" HOST_WIDE_INT_PRINT_DEC \", regs= %d/%d\"\n+\t       \", args= \" HOST_WIDE_INT_PRINT_DEC\n+\t       \", gp= \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n \t       (reg_names[(frame_pointer_needed)\n \t\t\t  ? HARD_FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM]),\n \t       ((frame_pointer_needed && TARGET_MIPS16)\n-\t\t? ((long) tsize - cfun->machine->frame.args_size)\n-\t\t: (long) tsize),\n+\t\t? tsize - cfun->machine->frame.args_size\n+\t\t: tsize),\n \t       reg_names[GP_REG_FIRST + 31],\n \t       cfun->machine->frame.var_size,\n \t       cfun->machine->frame.num_gp,\n@@ -6474,9 +6479,10 @@ mips_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \t       cfun->machine->frame.cprestore_size);\n \n       /* .mask MASK, GPOFFSET; .fmask FPOFFSET */\n-      fprintf (file, \"\\t.mask\\t0x%08lx,%ld\\n\\t.fmask\\t0x%08lx,%ld\\n\",\n+      fprintf (file, \"\\t.mask\\t0x%08x,\" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n \t       cfun->machine->frame.mask,\n-\t       cfun->machine->frame.gp_save_offset,\n+\t       cfun->machine->frame.gp_save_offset);\n+      fprintf (file, \"\\t.fmask\\t0x%08x,\" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n \t       cfun->machine->frame.fmask,\n \t       cfun->machine->frame.fp_save_offset);\n "}]}