{"sha": "9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0NjE0YzNmOGZlMGQ3ZjIzYjFkNDg2MjNmMjIwZmYwNWQ1ZWEzZg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-05-01T01:51:23Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-05-01T01:51:23Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r862", "tree": {"sha": "c0dbd8b314183891b6bdee8f01227fd47e74788e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0dbd8b314183891b6bdee8f01227fd47e74788e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f/comments", "author": null, "committer": null, "parents": [{"sha": "052aaaef3959a745a0108a6e55ea115f949f32da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052aaaef3959a745a0108a6e55ea115f949f32da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052aaaef3959a745a0108a6e55ea115f949f32da"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "5515960122c567ae92d137c6c6a1e6e65951573c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f", "patch": "@@ -466,7 +466,7 @@ float.h: enquire\n enquire: enquire.o $(GCC_PARTS)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@\n enquire.o: $(srcdir)/enquire.c $(GCC_PASSES)\n-\tif [ \"$(srcdir)\" != \".\" ]; then rm -f enquire.c; else false; fi\n+\t-if [ \"$(srcdir)\" != \".\" ]; then rm -f enquire.c; else true; fi\n \t-cp $(srcdir)/enquire.c . > /dev/null 2>&1\n # Breaking this line caused a problem with one version of GNU make.\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ALL_CPPFLAGS) $(ENQUIRE_CFLAGS) -I. -c enquire.c\n@@ -741,7 +741,7 @@ rtl.o : rtl.c $(CONFIG_H) $(RTL_H)\n print-rtl.o : print-rtl.c $(CONFIG_H) $(RTL_H)\n rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)\n \n-varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h \\\n+varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h defaults.h \\\n    insn-codes.h expr.h hard-reg-set.h regs.h xcoffout.h\n function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n    insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \\\n@@ -1431,8 +1431,8 @@ install-common-headers: install-dir $(USER_H) gvarargs.h gstdarg.h gstddef.h\n # so that fixinc.svr4 can get at it if necessary.\n # If the dirs are the same, this won't do anything.\n # Delete file first in case it is read-only\n-\tif [ \"$(srcdir)\" != \".\" ]; then rm -f byteorder.h; else false; fi\n-\t-cp $(srcdir)/byteorder.h .\n+\t-if [ \"$(srcdir)\" != \".\" ]; then rm -f byteorder.h; else true; fi\n+\t-cp $(srcdir)/byteorder.h . > /dev/null 2>&1\n \n # $(libsubdir)/include:\n #\t-if [ -d $(libsubdir)/include ] ; then true ; else mkdir $(libsubdir)/include ; fi\n@@ -1556,8 +1556,11 @@ maketest:\n \t-rm tm.h aux-output.c config.h md\n \tmake clean\n # You must then run config to set up for compilation.\n-\n-bootstrap: all force\n+bootstrap: force\n+# Only build the C compiler for stage1, because that is the only one that\n+# we can guarantee will build with the native compiler, and also it is the\n+# only thing useful for building stage2.\n+\t$(MAKE) LANGUAGES=c\n \t$(MAKE) stage1\n # This used to define ALLOCA as empty, but that would lead to bad results\n # for a subsequent `make install' since that would not have ALLOCA empty."}, {"sha": "d94ce5004c156c938c7ce18477f4cfeb1c6bd418", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9c4614c3f8fe0d7f23b1d48623f220ff05d5ea3f", "patch": "@@ -2226,6 +2226,7 @@ init_decl_processing ()\n   tree traditional_ptr_type_node;\n   /* Data type of memcpy.  */\n   tree memcpy_ftype;\n+  tree void_ftype_any;\n   int wchar_type_size;\n   tree temp;\n \n@@ -2386,6 +2387,9 @@ init_decl_processing ()\n \n   endlink = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n \n+  void_ftype_any\n+    = build_function_type (void_type_node, 0);\n+\n   double_ftype_double\n     = build_function_type (double_type_node,\n \t\t\t   tree_cons (NULL_TREE, double_type_node, endlink));\n@@ -2486,7 +2490,6 @@ init_decl_processing ()\n \t\t    BUILT_IN_ALLOCA, \"alloca\");\n   if (! flag_no_builtin && !flag_no_nonansi_builtin)\n     {\n-      tree exit_type;\n       temp = builtin_function (\"alloca\",\n \t\t\t       build_function_type (ptr_type_node,\n \t\t\t\t\t\t    tree_cons (NULL_TREE,\n@@ -2495,7 +2498,7 @@ init_decl_processing ()\n \t\t\t       BUILT_IN_ALLOCA, 0);\n       /* Suppress error if redefined as a non-function.  */\n       DECL_BUILT_IN_NONANSI (temp) = 1;\n-      temp = builtin_function (\"_exit\", exit_type, NOT_BUILT_IN, 0);\n+      temp = builtin_function (\"_exit\", void_ftype_any, NOT_BUILT_IN, 0);\n       TREE_THIS_VOLATILE (temp) = 1;\n       TREE_SIDE_EFFECTS (temp) = 1;\n       /* Suppress error if redefined as a non-function.  */\n@@ -2548,8 +2551,6 @@ init_decl_processing ()\n      However, honor the -fno-builtin option.  */\n   if (!flag_no_builtin)\n     {\n-      tree exit_type;\n-\n       builtin_function (\"abs\", int_ftype_int, BUILT_IN_ABS, 0);\n       builtin_function (\"fabs\", double_ftype_double, BUILT_IN_FABS, 0);\n       builtin_function (\"labs\", long_ftype_long, BUILT_IN_LABS, 0);\n@@ -2564,17 +2565,14 @@ init_decl_processing ()\n \t to avoid spurious \"control drops through\" warnings.  */\n       /* Don't specify the argument types, to avoid errors\n \t from certain code which isn't valid in ANSI but which exists.  */\n-      temp = builtin_function (\"abort\",\n-\t\t\t       build_function_type (void_type_node, 0),\n-\t\t\t       NOT_BUILT_IN, 0);\n+      temp = builtin_function (\"abort\", void_ftype_any, NOT_BUILT_IN, 0);\n       TREE_THIS_VOLATILE (temp) = 1;\n       TREE_SIDE_EFFECTS (temp) = 1;\n #if 0\n       /* Suppress error if redefined as a non-function.  */\n       DECL_BUILT_IN_NONANSI (temp) = 1;\n #endif\n-      exit_type = build_function_type (void_type_node, 0);\n-      temp = builtin_function (\"exit\", exit_type, NOT_BUILT_IN, 0);\n+      temp = builtin_function (\"exit\", void_ftype_any, NOT_BUILT_IN, 0);\n       TREE_THIS_VOLATILE (temp) = 1;\n       TREE_SIDE_EFFECTS (temp) = 1;\n #if 0"}]}