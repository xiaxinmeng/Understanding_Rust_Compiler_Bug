{"sha": "dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ5MTJjYjg5YzRlNWRmZGE0YTI3MTBhZTMwODJmNWNiMTJhMWQwNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-12-22T09:19:09Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-12-22T09:19:09Z"}, "message": "ipa-prop uses symbol_summary class.\n\n\t* lto-partition.c: Include of symbol-summary.h is added.\n\t* lto-symtab.c: Likewise.\n\t* lto.c: Likewise.\n\t* auto-profile.c: Include of symbol-summary.h is added.\n\t* cgraph.c: Likewise.\n\t* cgraphbuild.c: Likewise.\n\t* cgraphclones.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\t* ipa-cp.c: Likewise.\n\t* ipa-devirt.c: Likewise.\n\t* ipa-icf.c: Likewise.\n\t* ipa-inline-analysis.c (evaluate_properties_for_edge): New\n\tipa_node_params_sum data structure is used.\n\t(inline_node_duplication_hook): Likewise.\n\t(estimate_function_body_sizes): Likewise.\n\t(remap_edge_change_prob): Likewise.\n\t(inline_merge_summary): Likewise.\n\t* ipa-inline-transform.c: Include of symbol-summary.h is added.\n\t* ipa-inline.c (early_inliner): New ipa_node_params_sum data structure\n\tis used.\n\t* ipa-polymorphic-call.c: Include of symbol-summary.h is added.\n\t* ipa-profile.c: Include of symbol-summary.h is added.\n\t* ipa-prop.c (ipa_propagate_indirect_call_infos): New ipa_node_params_sum\n\tdata structure is used.\n\t(ipa_node_params::~ipa_node_params): New function.\n\t(ipa_free_all_node_params): Destruction is simplified.\n\t(ipa_node_removal_hook): Removed.\n\t(ipa_add_new_function): Renamed from ipa_node_duplication_hook.\n\t(ipa_node_params_t::duplicate): New function.\n\t(ipa_register_cgraph_hooks): Few hooks are removed.\n\t(ipa_unregister_cgraph_hooks): Likewise.\n\t(ipa_prop_write_jump_functions): New ipa_node_params_sum is used.\n\t* ipa-prop.h (struct ipa_node_params): Destructor introduced for\n\tthe structure.\n\t(ipa_check_create_node_params): Vector for ipa_node_params is replaced\n\twith function_summary.\n\t* ipa-split.c: Include of symbol-summary.h is added.\n\t* ipa-utils.c: Include of symbol-summary.h is added.\n\t* ipa.c: Include of symbol-summary.h is added.\n\t* omp-low.c: Include of symbol-summary.h is added.\n\t* tree-inline.c: Include of symbol-summary.h is added.\n\t* tree-sra.c: Include of symbol-summary.h is added.\n\t* tree-ssa-pre.c: Include of symbol-summary.h is added.\n\nFrom-SVN: r219005", "tree": {"sha": "844d04e2bcaef55647fafa93f6a03d340b1f3412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/844d04e2bcaef55647fafa93f6a03d340b1f3412"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4008290f65988de470218021818009fddeaf50dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4008290f65988de470218021818009fddeaf50dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4008290f65988de470218021818009fddeaf50dd"}], "stats": {"total": 221, "additions": 136, "deletions": 85}, "files": [{"sha": "abe1785955f6ebf6828dc339f99b71e35d61f8e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -1,3 +1,46 @@\n+2014-12-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* auto-profile.c: Include of symbol-summary.h is added.\n+\t* cgraph.c: Likewise.\n+\t* cgraphbuild.c: Likewise.\n+\t* cgraphclones.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\t* ipa-cp.c: Likewise.\n+\t* ipa-devirt.c: Likewise.\n+\t* ipa-icf.c: Likewise.\n+\t* ipa-inline-analysis.c (evaluate_properties_for_edge): New\n+\tipa_node_params_sum data structure is used.\n+\t(inline_node_duplication_hook): Likewise.\n+\t(estimate_function_body_sizes): Likewise.\n+\t(remap_edge_change_prob): Likewise.\n+\t(inline_merge_summary): Likewise.\n+\t* ipa-inline-transform.c: Include of symbol-summary.h is added.\n+\t* ipa-inline.c (early_inliner): New ipa_node_params_sum data structure\n+\tis used.\n+\t* ipa-polymorphic-call.c: Include of symbol-summary.h is added.\n+\t* ipa-profile.c: Include of symbol-summary.h is added.\n+\t* ipa-prop.c (ipa_propagate_indirect_call_infos): New ipa_node_params_sum\n+\tdata structure is used.\n+\t(ipa_node_params::~ipa_node_params): New function.\n+\t(ipa_free_all_node_params): Destruction is simplified.\n+\t(ipa_node_removal_hook): Removed.\n+\t(ipa_add_new_function): Renamed from ipa_node_duplication_hook.\n+\t(ipa_node_params_t::duplicate): New function.\n+\t(ipa_register_cgraph_hooks): Few hooks are removed.\n+\t(ipa_unregister_cgraph_hooks): Likewise.\n+\t(ipa_prop_write_jump_functions): New ipa_node_params_sum is used.\n+\t* ipa-prop.h (struct ipa_node_params): Destructor introduced for\n+\tthe structure.\n+\t(ipa_check_create_node_params): Vector for ipa_node_params is replaced\n+\twith function_summary.\n+\t* ipa-split.c: Include of symbol-summary.h is added.\n+\t* ipa-utils.c: Include of symbol-summary.h is added.\n+\t* ipa.c: Include of symbol-summary.h is added.\n+\t* omp-low.c: Include of symbol-summary.h is added.\n+\t* tree-inline.c: Include of symbol-summary.h is added.\n+\t* tree-sra.c: Include of symbol-summary.h is added.\n+\t* tree-ssa-pre.c: Include of symbol-summary.h is added.\n+\n 2014-12-22  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.h (symbol_table::allocate_cgraph_symbol): Summary UID"}, {"sha": "a7fa559fee5f879372b7db6cb5ae10cc00245910", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -67,6 +67,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"params.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\""}, {"sha": "c415a0302f3bdf9de498c191b8772640e94e57ea", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -72,6 +72,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"lto-streamer.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"cfgloop.h\""}, {"sha": "2a5bc9b2eb349bde7d294f1b875436a25f6ae0de", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"except.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n "}, {"sha": "77d0b1181582f3326006dbfdb59b4e59c906ee1a", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -103,6 +103,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"tree-iterator.h\"\n #include \"tree-dump.h\""}, {"sha": "41b284c466b3b8dbfc6d867f07981398db69c9a1", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -203,6 +203,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"tree-iterator.h\"\n #include \"tree-pass.h\""}, {"sha": "ba86f0e85837b1166c8b3c3701fb9b7aa57b73fb", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -123,6 +123,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"bitmap.h\"\n #include \"tree-pass.h\""}, {"sha": "497db77e458a4ad93f12ccaaf022a5b4d72321eb", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -139,6 +139,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-expr.h\"\n #include \"gimple.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"diagnostic.h\""}, {"sha": "6cdc21b1ae6a075a837cb90598ee5d640e087d62", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -87,6 +87,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"cfgloop.h\""}, {"sha": "888d6e35f85b151184990a114ef7bb6387594649", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -110,6 +110,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"lto-streamer.h\"\n #include \"data-streamer.h\"\n@@ -920,7 +921,7 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n   if (known_contexts_ptr)\n     known_contexts_ptr->create (0);\n \n-  if (ipa_node_params_vector.exists ()\n+  if (ipa_node_params_sum\n       && !e->call_stmt_cannot_inline_p\n       && ((clause_ptr && info->conds) || known_vals_ptr || known_contexts_ptr))\n     {\n@@ -1142,7 +1143,7 @@ inline_node_duplication_hook (struct cgraph_node *src,\n \n   /* When there are any replacements in the function body, see if we can figure\n      out that something was optimized out.  */\n-  if (ipa_node_params_vector.exists () && dst->clone.tree_map)\n+  if (ipa_node_params_sum && dst->clone.tree_map)\n     {\n       vec<size_time_entry, va_gc> *entry = info->entry;\n       /* Use SRC parm info since it may not be copied yet.  */\n@@ -2487,7 +2488,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n       calculate_dominance_info (CDI_DOMINATORS);\n       loop_optimizer_init (LOOPS_NORMAL | LOOPS_HAVE_RECORDED_EXITS);\n \n-      if (ipa_node_params_vector.exists ())\n+      if (ipa_node_params_sum)\n \t{\n \t  parms_info = IPA_NODE_REF (node);\n \t  nonconstant_names.safe_grow_cleared\n@@ -2637,7 +2638,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n \t\t  nonconstant_names[SSA_NAME_VERSION (gimple_call_lhs (stmt))]\n \t\t    = false_p;\n \t\t}\n-\t      if (ipa_node_params_vector.exists ())\n+\t      if (ipa_node_params_sum)\n \t\t{\n \t\t  int count = gimple_call_num_args (stmt);\n \t\t  int i;\n@@ -3384,7 +3385,7 @@ static void\n remap_edge_change_prob (struct cgraph_edge *inlined_edge,\n \t\t\tstruct cgraph_edge *edge)\n {\n-  if (ipa_node_params_vector.exists ())\n+  if (ipa_node_params_sum)\n     {\n       int i;\n       struct ipa_edge_args *args = IPA_EDGE_REF (edge);\n@@ -3540,7 +3541,7 @@ inline_merge_summary (struct cgraph_edge *edge)\n   else\n     toplev_predicate = true_predicate ();\n \n-  if (ipa_node_params_vector.exists () && callee_info->conds)\n+  if (ipa_node_params_sum && callee_info->conds)\n     {\n       struct ipa_edge_args *args = IPA_EDGE_REF (edge);\n       int count = ipa_get_cs_argument_count (args);"}, {"sha": "62f68f0997211412523dba3dd6c07d796a1dbd24", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\""}, {"sha": "dc017c6ff460a9c1c65a0c10f729156a5a232c8a", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -128,6 +128,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"except.h\"\n #include \"target.h\"\n@@ -2394,7 +2395,7 @@ early_inliner (function *fun)\n      it.  This may confuse ourself when early inliner decide to inline call to\n      function clone, because function clones don't have parameter list in\n      ipa-prop matching their signature.  */\n-  if (ipa_node_params_vector.exists ())\n+  if (ipa_node_params_sum)\n     return 0;\n \n #ifdef ENABLE_CHECKING"}, {"sha": "75820a99934e575634323b0e6166e394b0404977", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-expr.h\"\n #include \"gimple.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"diagnostic.h\""}, {"sha": "eaa6b4960a8dea62132e978532193de572759c5e", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -82,6 +82,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"lto-streamer.h\"\n #include \"data-streamer.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n "}, {"sha": "febcd0cef87dc3cc6325d67521bcc753290f4c9f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 36, "deletions": 67, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"bitmap.h\"\n #include \"gimple-ssa.h\"\n@@ -131,18 +132,16 @@ struct func_body_info\n   unsigned int aa_walked;\n };\n \n-/* Vector where the parameter infos are actually stored. */\n-vec<ipa_node_params> ipa_node_params_vector;\n+/* Function summary where the parameter infos are actually stored. */\n+ipa_node_params_t *ipa_node_params_sum = NULL;\n /* Vector of IPA-CP transformation data for each clone.  */\n vec<ipcp_transformation_summary, va_gc> *ipcp_transformations;\n /* Vector where the parameter infos are actually stored. */\n vec<ipa_edge_args, va_gc> *ipa_edge_args_vector;\n \n /* Holders of ipa cgraph hooks: */\n static struct cgraph_edge_hook_list *edge_removal_hook_holder;\n-static struct cgraph_node_hook_list *node_removal_hook_holder;\n static struct cgraph_2edge_hook_list *edge_duplication_hook_holder;\n-static struct cgraph_2node_hook_list *node_duplication_hook_holder;\n static struct cgraph_node_hook_list *function_insertion_hook_holder;\n \n /* Description of a reference to an IPA constant.  */\n@@ -3300,7 +3299,7 @@ ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n   bool changed;\n   /* Do nothing if the preparation phase has not been carried out yet\n      (i.e. during early inlining).  */\n-  if (!ipa_node_params_vector.exists ())\n+  if (!ipa_node_params_sum)\n     return false;\n   gcc_assert (ipa_edge_args_vector);\n \n@@ -3340,30 +3339,30 @@ ipa_free_all_edge_args (void)\n /* Frees all dynamically allocated structures that the param info points\n    to.  */\n \n-void\n-ipa_free_node_params_substructures (struct ipa_node_params *info)\n+ipa_node_params::~ipa_node_params ()\n {\n-  info->descriptors.release ();\n-  free (info->lattices);\n+  descriptors.release ();\n+  free (lattices);\n   /* Lattice values and their sources are deallocated with their alocation\n      pool.  */\n-  info->known_csts.release ();\n-  info->known_contexts.release ();\n-  memset (info, 0, sizeof (*info));\n+  known_contexts.release ();\n+\n+  lattices = NULL;\n+  ipcp_orig_node = NULL;\n+  analysis_done = 0;\n+  node_enqueued = 0;\n+  do_clone_for_all_contexts = 0;\n+  is_all_contexts_clone = 0;\n+  node_dead = 0;\n }\n \n /* Free all ipa_node_params structures.  */\n \n void\n ipa_free_all_node_params (void)\n {\n-  int i;\n-  struct ipa_node_params *info;\n-\n-  FOR_EACH_VEC_ELT (ipa_node_params_vector, i, info)\n-    ipa_free_node_params_substructures (info);\n-\n-  ipa_node_params_vector.release ();\n+  delete ipa_node_params_sum;\n+  ipa_node_params_sum = NULL;\n }\n \n /* Grow ipcp_transformations if necessary.  */\n@@ -3416,26 +3415,11 @@ ipa_edge_removal_hook (struct cgraph_edge *cs, void *data ATTRIBUTE_UNUSED)\n   ipa_free_edge_args_substructures (IPA_EDGE_REF (cs));\n }\n \n-/* Hook that is called by cgraph.c when a node is removed.  */\n-\n-static void\n-ipa_node_removal_hook (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n-{\n-  /* During IPA-CP updating we can be called on not-yet analyze clones.  */\n-  if (ipa_node_params_vector.length () > (unsigned)node->uid)\n-    ipa_free_node_params_substructures (IPA_NODE_REF (node));\n-  if (vec_safe_length (ipcp_transformations) > (unsigned)node->uid)\n-    {\n-      (*ipcp_transformations)[(unsigned)node->uid].agg_values = NULL;\n-      (*ipcp_transformations)[(unsigned)node->uid].alignments = NULL;\n-    }\n-}\n-\n /* Hook that is called by cgraph.c when an edge is duplicated.  */\n \n static void\n ipa_edge_duplication_hook (struct cgraph_edge *src, struct cgraph_edge *dst,\n-\t\t\t   __attribute__((unused)) void *data)\n+\t\t\t   void *)\n {\n   struct ipa_edge_args *old_args, *new_args;\n   unsigned int i;\n@@ -3535,18 +3519,23 @@ ipa_edge_duplication_hook (struct cgraph_edge *src, struct cgraph_edge *dst,\n     }\n }\n \n-/* Hook that is called by cgraph.c when a node is duplicated.  */\n+/* Analyze newly added function into callgraph.  */\n \n static void\n-ipa_node_duplication_hook (struct cgraph_node *src, struct cgraph_node *dst,\n-\t\t\t   ATTRIBUTE_UNUSED void *data)\n+ipa_add_new_function (cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n {\n-  struct ipa_node_params *old_info, *new_info;\n-  struct ipa_agg_replacement_value *old_av, *new_av;\n+  if (node->has_gimple_body_p ())\n+    ipa_analyze_node (node);\n+}\n \n-  ipa_check_create_node_params ();\n-  old_info = IPA_NODE_REF (src);\n-  new_info = IPA_NODE_REF (dst);\n+/* Hook that is called by summary when a node is duplicated.  */\n+\n+void\n+ipa_node_params_t::duplicate(cgraph_node *src, cgraph_node *dst,\n+\t\t\t     ipa_node_params *old_info,\n+\t\t\t     ipa_node_params *new_info)\n+{\n+  ipa_agg_replacement_value *old_av, *new_av;\n \n   new_info->descriptors = old_info->descriptors.copy ();\n   new_info->lattices = NULL;\n@@ -3587,35 +3576,20 @@ ipa_node_duplication_hook (struct cgraph_node *src, struct cgraph_node *dst,\n     }\n }\n \n-\n-/* Analyze newly added function into callgraph.  */\n-\n-static void\n-ipa_add_new_function (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n-{\n-  if (node->has_gimple_body_p ())\n-    ipa_analyze_node (node);\n-}\n-\n /* Register our cgraph hooks if they are not already there.  */\n \n void\n ipa_register_cgraph_hooks (void)\n {\n+  ipa_check_create_node_params ();\n+\n   if (!edge_removal_hook_holder)\n     edge_removal_hook_holder =\n       symtab->add_edge_removal_hook (&ipa_edge_removal_hook, NULL);\n-  if (!node_removal_hook_holder)\n-    node_removal_hook_holder =\n-      symtab->add_cgraph_removal_hook (&ipa_node_removal_hook, NULL);\n   if (!edge_duplication_hook_holder)\n     edge_duplication_hook_holder =\n       symtab->add_edge_duplication_hook (&ipa_edge_duplication_hook, NULL);\n-  if (!node_duplication_hook_holder)\n-    node_duplication_hook_holder =\n-      symtab->add_cgraph_duplication_hook (&ipa_node_duplication_hook, NULL);\n-  if (!function_insertion_hook_holder)\n-    function_insertion_hook_holder =\n+  function_insertion_hook_holder =\n       symtab->add_cgraph_insertion_hook (&ipa_add_new_function, NULL);\n }\n \n@@ -3626,12 +3600,8 @@ ipa_unregister_cgraph_hooks (void)\n {\n   symtab->remove_edge_removal_hook (edge_removal_hook_holder);\n   edge_removal_hook_holder = NULL;\n-  symtab->remove_cgraph_removal_hook (node_removal_hook_holder);\n-  node_removal_hook_holder = NULL;\n   symtab->remove_edge_duplication_hook (edge_duplication_hook_holder);\n   edge_duplication_hook_holder = NULL;\n-  symtab->remove_cgraph_duplication_hook (node_duplication_hook_holder);\n-  node_duplication_hook_holder = NULL;\n   symtab->remove_cgraph_insertion_hook (function_insertion_hook_holder);\n   function_insertion_hook_holder = NULL;\n }\n@@ -4801,8 +4771,7 @@ ipa_prop_write_jump_functions (void)\n   lto_symtab_encoder_iterator lsei;\n   lto_symtab_encoder_t encoder;\n \n-\n-  if (!ipa_node_params_vector.exists ())\n+  if (!ipa_node_params_sum)\n     return;\n \n   ob = create_output_block (LTO_section_jump_functions);"}, {"sha": "16ab1d08e890099fd9c87db9ebad49c0cef5c842", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -20,7 +20,6 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef IPA_PROP_H\n #define IPA_PROP_H\n \n-\n /* The following definitions and interfaces are used by\n    interprocedural analyses or parameters.  */\n \n@@ -301,6 +300,8 @@ struct ipa_param_descriptor\n \n struct ipa_node_params\n {\n+  ~ipa_node_params ();\n+\n   /* Information about individual formal parameters that are gathered when\n      summaries are generated. */\n   vec<ipa_param_descriptor> descriptors;\n@@ -470,18 +471,30 @@ ipa_get_ith_polymorhic_call_context (struct ipa_edge_args *args, int i)\n   return &(*args->polymorphic_call_contexts)[i];\n }\n \n-/* Types of vectors holding the infos.  */\n+/* Callgraph summary for ipa_node_params.  */\n+class ipa_node_params_t: public function_summary <ipa_node_params *>\n+{\n+public:\n+  ipa_node_params_t (symbol_table *table):\n+    function_summary<ipa_node_params *> (table) { }\n \n-/* Vector where the parameter infos are actually stored. */\n-extern vec<ipa_node_params> ipa_node_params_vector;\n+  /* Hook that is called by summary when a node is duplicated.  */\n+  virtual void duplicate (cgraph_node *node,\n+\t\t\t  cgraph_node *node2,\n+\t\t\t  ipa_node_params *data,\n+\t\t\t  ipa_node_params *data2);\n+};\n+\n+/* Function summary where the parameter infos are actually stored. */\n+extern ipa_node_params_t *ipa_node_params_sum;\n /* Vector of IPA-CP transformation data for each clone.  */\n extern GTY(()) vec<ipcp_transformation_summary, va_gc> *ipcp_transformations;\n /* Vector where the parameter infos are actually stored. */\n extern GTY(()) vec<ipa_edge_args, va_gc> *ipa_edge_args_vector;\n \n /* Return the associated parameter/argument info corresponding to the given\n    node/edge.  */\n-#define IPA_NODE_REF(NODE) (&ipa_node_params_vector[(NODE)->uid])\n+#define IPA_NODE_REF(NODE) (ipa_node_params_sum->get (NODE))\n #define IPA_EDGE_REF(EDGE) (&(*ipa_edge_args_vector)[(EDGE)->uid])\n /* This macro checks validity of index returned by\n    ipa_get_param_decl_index function.  */\n@@ -491,11 +504,11 @@ extern GTY(()) vec<ipa_edge_args, va_gc> *ipa_edge_args_vector;\n void ipa_create_all_node_params (void);\n void ipa_create_all_edge_args (void);\n void ipa_free_edge_args_substructures (struct ipa_edge_args *);\n-void ipa_free_node_params_substructures (struct ipa_node_params *);\n void ipa_free_all_node_params (void);\n void ipa_free_all_edge_args (void);\n void ipa_free_all_structures_after_ipa_cp (void);\n void ipa_free_all_structures_after_iinln (void);\n+\n void ipa_register_cgraph_hooks (void);\n int count_formal_params (tree fndecl);\n \n@@ -505,11 +518,8 @@ int count_formal_params (tree fndecl);\n static inline void\n ipa_check_create_node_params (void)\n {\n-  if (!ipa_node_params_vector.exists ())\n-    ipa_node_params_vector.create (symtab->cgraph_max_uid);\n-\n-  if (ipa_node_params_vector.length () <= (unsigned) symtab->cgraph_max_uid)\n-    ipa_node_params_vector.safe_grow_cleared (symtab->cgraph_max_uid + 1);\n+  if (!ipa_node_params_sum)\n+    ipa_node_params_sum = new ipa_node_params_t (symtab);\n }\n \n /* This function ensures the array of edge arguments infos is big enough to"}, {"sha": "2670643f06baf51a4a354aff37a561be957ea793", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -109,6 +109,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"gimple-ssa.h\"\n #include \"tree-cfg.h\""}, {"sha": "2e07f2022b2f2e3b18d03438be89c1badeebc3df", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"lto-streamer.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n "}, {"sha": "aca9498b7ade0c7f869de08b2a339edd2945f058", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-iterator.h\"\n #include \"ipa-utils.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"tree-inline.h\""}, {"sha": "8e158bedef9d90fc014a6c53f816c34fb54f6834", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -1,3 +1,9 @@\n+2014-12-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-partition.c: Include of symbol-summary.h is added.\n+\t* lto-symtab.c: Likewise.\n+\t* lto.c: Likewise.\n+\n 2014-12-11  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/61324"}, {"sha": "13beafbdb2a020d5e035bc05da01c7daafd4a7f8", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"params.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"ipa-utils.h\""}, {"sha": "0366067a75f9332d6912111b1bf295d43cc6c602", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-streamer.h\"\n #include \"ipa-utils.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"ipa-inline.h\"\n #include \"builtins.h\""}, {"sha": "7f5233fb559e26350fc01d9c627970b29d038ab3", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"inchash.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"common.h\"\n #include \"debug.h\""}, {"sha": "a5cc857b02bfcd7600b9db9e18151f6498b5b281", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -83,6 +83,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-cfgcleanup.h\"\n #include \"pretty-print.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"tree-nested.h\"\n #include \"tree-eh.h\""}, {"sha": "b68770013d64e086a44362c39ea7fc5afd1375a5", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -74,6 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"alloc-pool.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"value-prof.h\"\n #include \"tree-pass.h\""}, {"sha": "4c0aa15bab96f8071d7de6a9f0c8c388e0eca573", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -115,6 +115,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"plugin-api.h\"\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"statistics.h\"\n #include \"params.h\""}, {"sha": "062dc681388d2d5aee2e532b732f8c375f8ab06c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=dd912cb89c4e5dfda4a2710ae3082f5cb12a1d04", "patch": "@@ -77,6 +77,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"plugin-api.h\"\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n+#include \"symbol-summary.h\"\n #include \"ipa-prop.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"ipa-utils.h\""}]}