{"sha": "d166d4c3e54199524a809b00f388d2731774793e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2NmQ0YzNlNTQxOTk1MjRhODA5YjAwZjM4OGQyNzMxNzc0NzkzZQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2010-06-24T12:47:30Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-06-24T12:47:30Z"}, "message": "c-parser.c (c_parser_conditional_expression): Call warn_for_omitted_condop.\n\n2010-06-24  Andi Kleen  <ak@linux.intel.com>\n\n\t* c-parser.c (c_parser_conditional_expression):\n        Call warn_for_omitted_condop.\n        * doc/invoke.texi: Document omitted condop warning.\nc-family/\t\n        * c-common.c (warn_for_omitted_condop): New.\n        * c-common.h (warn_for_omitted_condop): Add prototype.\ntestsuite/\n        * c-c++-common/warn-omitted-condop.c: New.\ncp/\n\t* parser.c: (cp_parser_question_colon_clause):\n        Switch to use cp_lexer_peek_token.\n        Call warn_for_omitted_condop. Call pedwarn for omitted\n        middle operand.\n\nFrom-SVN: r161318", "tree": {"sha": "feb6608bcdc33e63afab0b9361ebcd8869ffbf0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feb6608bcdc33e63afab0b9361ebcd8869ffbf0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d166d4c3e54199524a809b00f388d2731774793e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d166d4c3e54199524a809b00f388d2731774793e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d166d4c3e54199524a809b00f388d2731774793e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d166d4c3e54199524a809b00f388d2731774793e/comments", "author": null, "committer": null, "parents": [{"sha": "b27c1cde2eef96d0aadf6231817c40c688bec12f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27c1cde2eef96d0aadf6231817c40c688bec12f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27c1cde2eef96d0aadf6231817c40c688bec12f"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "cb164143b54b9c82518636885cda6545d2f0e452", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -1,3 +1,9 @@\n+2010-06-24  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* c-parser.c (c_parser_conditional_expression):\n+        Call warn_for_omitted_condop.\n+        * doc/invoke.texi: Document omitted condop warning.\n+\n 2010-06-24  Nick Clifton<nickc@redhat.com>\n \n \t* loop-unswitch.c (compare_and_jump_seq): Assert that the last"}, {"sha": "0d54b2d01fc0f453f008dd072209cfa7ac1b3336", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -1,3 +1,8 @@\n+2010-06-24  Andi Kleen  <ak@linux.intel.com>\n+\n+        * c-common.c (warn_for_omitted_condop): New.\n+        * c-common.h (warn_for_omitted_condop): Add prototype.\n+\n 2010-06-21  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c.opt (lang-objc): Remove."}, {"sha": "14675bcf67ef5b128a76e9818609ebc5dccf7388", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -8405,6 +8405,18 @@ fold_offsetof (tree expr, tree stop_ref)\n   return convert (size_type_node, fold_offsetof_1 (expr, stop_ref));\n }\n \n+/* Warn for A ?: C expressions (with B omitted) where A is a boolean \n+   expression, because B will always be true. */\n+\n+void\n+warn_for_omitted_condop (location_t location, tree cond) \n+{ \n+  if (truth_value_p (TREE_CODE (cond))) \n+      warning_at (location, OPT_Wparentheses, \n+\t\t\"the omitted middle operand in ?: will always be %<true%>, \"\n+\t\t\"suggest explicit middle operand\");\n+} \n+\n /* Print an error message for an invalid lvalue.  USE says\n    how the lvalue is being used and so selects the error message.  */\n "}, {"sha": "5784746e90a34cd07f8b05c4676f98d3b702acb9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -736,6 +736,7 @@ extern void c_parse_file (void);\n /* This is misnamed, it actually performs end-of-compilation processing.  */\n extern void finish_file\t(void);\n \n+extern void warn_for_omitted_condop (location_t, tree);\n \n /* These macros provide convenient access to the various _STMT nodes.  */\n "}, {"sha": "ba184783343a84b4aafa73069b139917c29f72ce", "filename": "gcc/c-parser.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -4795,7 +4795,7 @@ static struct c_expr\n c_parser_conditional_expression (c_parser *parser, struct c_expr *after)\n {\n   struct c_expr cond, exp1, exp2, ret;\n-  location_t cond_loc, colon_loc;\n+  location_t cond_loc, colon_loc, middle_loc;\n \n   gcc_assert (!after || c_dialect_objc ());\n \n@@ -4809,8 +4809,11 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after)\n   if (c_parser_next_token_is (parser, CPP_COLON))\n     {\n       tree eptype = NULL_TREE;\n-      pedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n+\n+      middle_loc = c_parser_peek_token (parser)->location;\n+      pedwarn (middle_loc, OPT_pedantic, \n \t       \"ISO C forbids omitting the middle term of a ?: expression\");\n+      warn_for_omitted_condop (middle_loc, cond.value);\n       if (TREE_CODE (cond.value) == EXCESS_PRECISION_EXPR)\n \t{\n \t  eptype = TREE_TYPE (cond.value);"}, {"sha": "b5ba3bc6e58ac4e19cedd43f859debe8cbcfcbd4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -1,3 +1,10 @@\n+2010-06-24  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* parser.c: (cp_parser_question_colon_clause):\n+        Switch to use cp_lexer_peek_token.\n+        Call warn_for_omitted_condop. Call pedwarn for omitted\n+        middle operand.\n+\n 2010-06-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/44619"}, {"sha": "4e4db2d6d760ef9eeed2dd72d50331fdc17be40f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -6815,15 +6815,20 @@ cp_parser_question_colon_clause (cp_parser* parser, tree logical_or_expr)\n {\n   tree expr;\n   tree assignment_expr;\n+  struct cp_token *token;\n \n   /* Consume the `?' token.  */\n   cp_lexer_consume_token (parser->lexer);\n+  token = cp_lexer_peek_token (parser->lexer);\n   if (cp_parser_allow_gnu_extensions_p (parser)\n-      && cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n+      && token->type == CPP_COLON)\n     {\n+      pedwarn (token->location, OPT_pedantic, \n+               \"ISO C++ does not allow ?: with omitted middle operand\");\n       /* Implicit true clause.  */\n       expr = NULL_TREE;\n       c_inhibit_evaluation_warnings += logical_or_expr == truthvalue_true_node;\n+      warn_for_omitted_condop (token->location, logical_or_expr);\n     }\n   else\n     {"}, {"sha": "3eae7d7a36e1f61dfda122b7102dec6067429a41", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -3275,6 +3275,12 @@ look like this:\n @end group\n @end smallexample\n \n+Also warn for dangerous uses of the \n+?: with omitted middle operand GNU extension. When the condition\n+in the ?: operator is a boolean expression the omitted value will\n+be always 1. Often the user expects it to be a value computed\n+inside the conditional expression instead. \n+\n This warning is enabled by @option{-Wall}.\n \n @item -Wsequence-point"}, {"sha": "351dcd8e8d169c177e1b81b94c9fb8b3588ca305", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -1,3 +1,7 @@\n+2010-06-24  Andi Kleen  <ak@linux.intel.com>\n+\n+        * c-c++-common/warn-omitted-condop.c: New.\n+\n 2010-06-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/44614"}, {"sha": "de92b8f2cdc9622f316162e70f0df9634f0c1a4e", "filename": "gcc/testsuite/c-c++-common/warn-ommitted-condop.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d166d4c3e54199524a809b00f388d2731774793e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fwarn-ommitted-condop.c?ref=d166d4c3e54199524a809b00f388d2731774793e", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-options \"-Wparentheses\" } */\n+\n+extern void f2 (int);\n+\n+void bar (int x, int y, int z)\n+{\n+#define T(op) f2 (x op y ? : 1) \n+#define T2(op) f2 (x op y ? 2 : 1) \n+\n+  T(<); /* { dg-warning \"omitted middle operand\" } */\n+  T(>); /* { dg-warning \"omitted middle operand\" } */\n+  T(<=); /* { dg-warning \"omitted middle operand\" } */\n+  T(>=); /* { dg-warning \"omitted middle operand\" } */\n+  T(==); /* { dg-warning \"omitted middle operand\" } */\n+  T(!=); /* { dg-warning \"omitted middle operand\" } */\n+  T(||); /* { dg-warning \"omitted middle operand\" } */\n+  T(&&); /* { dg-warning \"omitted middle operand\" } */\n+  f2 (!x ? : 1);  /* { dg-warning \"omitted middle operand\" } */\n+  T2(<); /* { dg-bogus \"omitted middle operand\" } */\n+  T2(>); /* { dg-bogus \"omitted middle operand\" } */\n+  T2(==); /* { dg-bogus \"omitted middle operand\" } */\n+  T2(||); /* { dg-bogus \"omitted middle operand\" } */\n+  T2(&&); /* { dg-bogus \"omitted middle operand\" } */\n+  T(+); /* { dg-bogus \"omitted middle operand\" } */\n+  T(-); /* { dg-bogus \"omitted middle operand\" } */\n+  T(*); /* { dg-bogus \"omitted middle operand\" } */\n+  T(/); /* { dg-bogus \"omitted middle operand\" } */\n+  T(^); /* { dg-bogus \"omitted middle operand\" } */\n+}"}]}