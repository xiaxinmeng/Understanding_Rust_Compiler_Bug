{"sha": "f735a153482c5fd3b7f4055f910096730ed02f19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjczNWExNTM0ODJjNWZkM2I3ZjQwNTVmOTEwMDk2NzMwZWQwMmYxOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-19T08:47:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-19T08:47:14Z"}, "message": "re PR c/5656 (ICE in emit_move_insn, at expr.c:2748, regression from gcc 3.0)\n\n\tPR c/5656\n\t* langhooks.h (struct lang_hooks_for_tree_inlining): Add\n\tconvert_parm_for_inlining.\n\t* c-lang.c (LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING):\n\tDefine.\n\t* langhooks-def.h: Likewise.\n\t* objc/objc-lang.c: Likewise.\n\t* langhooks.c (lhd_tree_inlining_convert_parm_for_inlining): New\n\tfunction.\n\t* tree-inline.c (initialize_inlined_parameters):\n\tCall convert_parm_for_inlining lang hook if needed.\n\t* c-typeck.c (c_convert_parm_for_inlining): New function.\n\t* c-tree.h (c_convert_parm_for_inlining): Add prototype.\n\n\t* gcc.c-torture/compile/20020318-1.c: New test.\n\nFrom-SVN: r51025", "tree": {"sha": "f8f50124b7cee68203bee922ac64a4b0c77721a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8f50124b7cee68203bee922ac64a4b0c77721a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f735a153482c5fd3b7f4055f910096730ed02f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f735a153482c5fd3b7f4055f910096730ed02f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f735a153482c5fd3b7f4055f910096730ed02f19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f735a153482c5fd3b7f4055f910096730ed02f19/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1ea78430722efa016fb62d2af76cfdbf31fec02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ea78430722efa016fb62d2af76cfdbf31fec02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ea78430722efa016fb62d2af76cfdbf31fec02"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "795c75f1932a12bafc710e480bc57f73c5877684", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -1,3 +1,19 @@\n+2002-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/5656\n+\t* langhooks.h (struct lang_hooks_for_tree_inlining): Add\n+\tconvert_parm_for_inlining.\n+\t* c-lang.c (LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING):\n+\tDefine.\n+\t* langhooks-def.h: Likewise.\n+\t* objc/objc-lang.c: Likewise.\n+\t* langhooks.c (lhd_tree_inlining_convert_parm_for_inlining): New\n+\tfunction.\n+\t* tree-inline.c (initialize_inlined_parameters):\n+\tCall convert_parm_for_inlining lang hook if needed.\n+\t* c-typeck.c (c_convert_parm_for_inlining): New function.\n+\t* c-tree.h (c_convert_parm_for_inlining): Add prototype.\n+\n 2002-03-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* calls.c (precompute_arguments): Do not assume that temporaries "}, {"sha": "325ebd5d15d6bb16d064dba34146b5322d9f90b6", "filename": "gcc/c-lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -70,6 +70,9 @@ static void c_post_options PARAMS ((void));\n #undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n   anon_aggr_type_p\n+#undef LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING\n+#define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n+  c_convert_parm_for_inlining\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n "}, {"sha": "f01b5238d0e033a6024c196f721374133d517dd7", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -270,6 +270,7 @@ extern void c_finish_case                       PARAMS ((void));\n extern tree simple_asm_stmt\t\t\tPARAMS ((tree));\n extern tree build_asm_stmt\t\t\tPARAMS ((tree, tree, tree,\n \t\t\t\t\t\t\t tree, tree));\n+extern tree c_convert_parm_for_inlining\t\tPARAMS ((tree, tree, tree));\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */"}, {"sha": "1772557449c4ffb400faaa3a1bb27ab25b82ebfa", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -4259,6 +4259,30 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n   return error_mark_node;\n }\n \n+/* Convert VALUE for assignment into inlined parameter PARM.  */\n+\n+tree\n+c_convert_parm_for_inlining (parm, value, fn)\n+     tree parm, value, fn;\n+{\n+  tree ret, type;\n+\n+  /* If FN was prototyped, the value has been converted already\n+     in convert_arguments.  */\n+  if (! value || TYPE_ARG_TYPES (TREE_TYPE (fn)))\n+    return value;\n+\n+  type = TREE_TYPE (parm);\n+  ret = convert_for_assignment (type, value, \n+\t\t\t\t(char *) 0 /* arg passing  */, fn,\n+\t\t\t\tDECL_NAME (fn), 0);\n+  if (PROMOTE_PROTOTYPES\n+      && INTEGRAL_TYPE_P (type)\n+      && (TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)))\n+    ret = default_conversion (ret);\n+  return ret;\n+}\n+\n /* Print a warning using MSGID.\n    It gets OPNAME as its one parameter.\n    If OPNAME is null, it is replaced by \"passing arg ARGNUM of `FUNCTION'\"."}, {"sha": "abd28471f8ffbde78a29f397cd2f3443c4e94b49", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -63,6 +63,7 @@ tree lhd_tree_inlining_copy_res_decl_for_inlining PARAMS ((tree, tree,\n int lhd_tree_inlining_anon_aggr_type_p\t\tPARAMS ((tree));\n int lhd_tree_inlining_start_inlining\t\tPARAMS ((tree));\n void lhd_tree_inlining_end_inlining\t\tPARAMS ((tree));\n+tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n \n #define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n@@ -107,6 +108,8 @@ void lhd_tree_inlining_end_inlining\t\tPARAMS ((tree));\n   lhd_tree_inlining_start_inlining\n #define LANG_HOOKS_TREE_INLINING_END_INLINING \\\n   lhd_tree_inlining_end_inlining\n+#define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n+  lhd_tree_inlining_convert_parm_for_inlining\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n   LANG_HOOKS_TREE_INLINING_WALK_SUBTREES, \\\n@@ -118,7 +121,8 @@ void lhd_tree_inlining_end_inlining\t\tPARAMS ((tree));\n   LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING, \\\n   LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P, \\\n   LANG_HOOKS_TREE_INLINING_START_INLINING, \\\n-  LANG_HOOKS_TREE_INLINING_END_INLINING \\\n+  LANG_HOOKS_TREE_INLINING_END_INLINING, \\\n+  LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n } \\\n \n /* Tree dump hooks.  */"}, {"sha": "6be5304a3285777d3e1ce9a076e02e62ed243fb8", "filename": "gcc/langhooks.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -277,6 +277,18 @@ lhd_tree_inlining_end_inlining (fn)\n {\n }\n \n+/* lang_hooks.tree_inlining.convert_parm_for_inlining performs any\n+   language-specific conversion before assigning VALUE to PARM.  */\n+\n+tree\n+lhd_tree_inlining_convert_parm_for_inlining (parm, value, fndecl)\n+     tree parm ATTRIBUTE_UNUSED;\n+     tree value;\n+     tree fndecl ATTRIBUTE_UNUSED;\n+{\n+  return value;\n+}\n+\n /* lang_hooks.tree_dump.dump_tree:  Dump language-specific parts of tree \n    nodes.  Returns non-zero if it does not want the usual dumping of the \n    second argument.  */"}, {"sha": "902bb55bc8c9bfdf64ea9372122b8bd090014ca9", "filename": "gcc/langhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -48,6 +48,9 @@ struct lang_hooks_for_tree_inlining\n   int (*anon_aggr_type_p) PARAMS ((union tree_node *));\n   int (*start_inlining) PARAMS ((union tree_node *));\n   void (*end_inlining) PARAMS ((union tree_node *));\n+  union tree_node *(*convert_parm_for_inlining) PARAMS ((union tree_node *,\n+\t\t\t\t\t\t\t union tree_node *,\n+\t\t\t\t\t\t\t union tree_node *));\n };\n \n /* The following hooks are used by tree-dump.c.  */"}, {"sha": "d779e69d24703ca734690922c33c4077496945e7", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -64,6 +64,9 @@ static void objc_post_options                   PARAMS ((void));\n #undef LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P\n #define LANG_HOOKS_TREE_INLINING_ANON_AGGR_TYPE_P \\\n   anon_aggr_type_p\n+#undef LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING\n+#define LANG_HOOKS_TREE_INLINING_CONVERT_PARM_FOR_INLINING \\\n+  c_convert_parm_for_inlining\n \n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "f5cd64c333bc0071321c3a96626b8fbb1225c5a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -1,3 +1,7 @@\n+2002-03-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/compile/20020318-1.c: New test.\n+\n 2002-03-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/opt/conj1.C: New test."}, {"sha": "097a35d79560c42f474a2941f0d9eec45c546d3a", "filename": "gcc/testsuite/gcc.c-torture/compile/20020318-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020318-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020318-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020318-1.c?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/5656\n+   This testcase ICEd on IA-32 at -O3, due to tree inliner not converting\n+   parameter assignment when using K&R syntax.  */\n+\n+void foo (c)\n+     char c;\n+{\n+  (void) &c;\n+}\n+\n+int bar (void);\n+\n+void baz (void)\n+{\n+  foo (bar ());\n+}"}, {"sha": "831f6019c7b3fc70155fd3289ecef9e9e049f3ad", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f735a153482c5fd3b7f4055f910096730ed02f19/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=f735a153482c5fd3b7f4055f910096730ed02f19", "patch": "@@ -483,7 +483,8 @@ initialize_inlined_parameters (id, args, fn)\n       tree cleanup;\n \n       /* Find the initializer.  */\n-      value = a ? TREE_VALUE (a) : NULL_TREE;\n+      value = (*lang_hooks.tree_inlining.convert_parm_for_inlining)\n+\t      (p, a ? TREE_VALUE (a) : NULL_TREE, fn);\n \n       /* If the parameter is never assigned to, we may not need to\n \t create a new variable here at all.  Instead, we may be able"}]}