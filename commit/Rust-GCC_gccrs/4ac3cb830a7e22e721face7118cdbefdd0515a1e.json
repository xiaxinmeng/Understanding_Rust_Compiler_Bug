{"sha": "4ac3cb830a7e22e721face7118cdbefdd0515a1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFjM2NiODMwYTdlMjJlNzIxZmFjZTcxMThjZGJlZmRkMDUxNWExZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-31T00:50:36Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-31T00:50:36Z"}, "message": "Makefile.in (CFILES): Add calloc.c and getpwd.c.\n\n\t* Makefile.in (CFILES): Add calloc.c and getpwd.c.\n\t(REQUIRED_OFILES): Add getpwd.o.\n\t(getpwd.o): Add target.\n\n\t* configure.in (AC_PREREQ): Bump to 2.13.\n\t(AC_CHECK_HEADERS): Add check for <sys/stat.h>.\n\n\t* getpwd.c: New file, moved here from gcc.\n\nFrom-SVN: r28996", "tree": {"sha": "a1e4c9bfa7ee3e601f8a9bb78fe7b268f30e707b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1e4c9bfa7ee3e601f8a9bb78fe7b268f30e707b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ac3cb830a7e22e721face7118cdbefdd0515a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac3cb830a7e22e721face7118cdbefdd0515a1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac3cb830a7e22e721face7118cdbefdd0515a1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac3cb830a7e22e721face7118cdbefdd0515a1e/comments", "author": null, "committer": null, "parents": [{"sha": "00d30284b84eedd162ed081fe008c459dc7c98e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d30284b84eedd162ed081fe008c459dc7c98e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d30284b84eedd162ed081fe008c459dc7c98e3"}], "stats": {"total": 144, "additions": 138, "deletions": 6}, "files": [{"sha": "2f02a0f608e12f576872c044055608336e077c51", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=4ac3cb830a7e22e721face7118cdbefdd0515a1e", "patch": "@@ -1,3 +1,14 @@\n+1999-08-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (CFILES): Add calloc.c and getpwd.c.\n+\t(REQUIRED_OFILES): Add getpwd.o.\n+\t(getpwd.o): Add target.\n+\n+\t* configure.in (AC_PREREQ): Bump to 2.13.\n+\t(AC_CHECK_HEADERS): Add check for <sys/stat.h>.\n+\n+\t* getpwd.c: New file, moved here from gcc.\n+\n 1999-08-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cplus-dem.c (gnu_special): Cast a `size_t' to `long' when"}, {"sha": "001a714cd467d05141089038c28369e192ce22a4", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=4ac3cb830a7e22e721face7118cdbefdd0515a1e", "patch": "@@ -121,8 +121,8 @@ HFILES = alloca-conf.h\n # (alphabetical), and add them to REQUIRED_OFILES or funcs in\n # configure.in.\n CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c \\\n-\tbzero.c choose-temp.c clock.c concat.c cplus-dem.c fdmatch.c \\\n-\tfnmatch.c getcwd.c getopt.c getopt1.c getpagesize.c \\\n+\tbzero.c calloc.c choose-temp.c clock.c concat.c cplus-dem.c fdmatch.c \\\n+\tfnmatch.c getcwd.c getpwd.c getopt.c getopt1.c getpagesize.c \\\n \tgetruntime.c floatformat.c hex.c index.c insque.c memchr.c \\\n \tmemcmp.c memcpy.c memmove.c memset.c mkstemps.c objalloc.c obstack.c \\\n \tpexecute.c putenv.c random.c rename.c rindex.c setenv.c sigsetmask.c \\\n@@ -133,7 +133,7 @@ CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c \\\n \n # These are always included in the library.\n REQUIRED_OFILES = argv.o choose-temp.o concat.o cplus-dem.o \\\n-  fdmatch.o fnmatch.o getopt.o getopt1.o getruntime.o hex.o \\\n+  fdmatch.o fnmatch.o getopt.o getopt1.o getpwd.o getruntime.o hex.o \\\n   floatformat.o objalloc.o obstack.o pexecute.o spaces.o \\\n   splay-tree.o strerror.o strsignal.o xatexit.o xexit.o xmalloc.o \\\n   xstrdup.o xstrerror.o\n@@ -254,6 +254,7 @@ getcwd.o: config.h\n getopt.o: config.h $(INCDIR)/getopt.h\n getopt1.o: config.h $(INCDIR)/getopt.h\n getpagesize.o: config.h\n+getpwd.o: config.h $(INCDIR)/libiberty.h\n getruntime.o: config.h $(INCDIR)/libiberty.h\n hex.o: $(INCDIR)/libiberty.h\n floatformat.o: $(INCDIR)/floatformat.h"}, {"sha": "6e64208da924e6b5e18914de22359ce7b6928363", "filename": "libiberty/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=4ac3cb830a7e22e721face7118cdbefdd0515a1e", "patch": "@@ -214,6 +214,9 @@\n /* Define if you have the <sys/resource.h> header file.  */\n #undef HAVE_SYS_RESOURCE_H\n \n+/* Define if you have the <sys/stat.h> header file.  */\n+#undef HAVE_SYS_STAT_H\n+\n /* Define if you have the <sys/time.h> header file.  */\n #undef HAVE_SYS_TIME_H\n "}, {"sha": "d7efa12ae430663810793d2e193be56105f0d793", "filename": "libiberty/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=4ac3cb830a7e22e721face7118cdbefdd0515a1e", "patch": "@@ -1055,7 +1055,7 @@ else\n fi\n echo \"$ac_t\"\"$CPP\" 1>&6\n \n-for ac_hdr in sys/file.h sys/param.h stdlib.h string.h unistd.h strings.h sys/time.h sys/resource.h\n+for ac_hdr in sys/file.h sys/param.h stdlib.h string.h unistd.h strings.h sys/time.h sys/resource.h sys/stat.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6"}, {"sha": "10b8294198bf7cb6de24e75718e709ea8e38525e", "filename": "libiberty/configure.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=4ac3cb830a7e22e721face7118cdbefdd0515a1e", "patch": "@@ -1,6 +1,6 @@\n dnl Process this file with autoconf to produce a configure script\n \n-AC_PREREQ(2.12.1)\n+AC_PREREQ(2.13)\n AC_INIT(pexecute.c)\n \n dnl We use these options to decide which functions to include.\n@@ -106,7 +106,7 @@ AC_SUBST_FILE(host_makefile_frag)\n # It's OK to check for header files.  Although the compiler may not be\n # able to link anything, it had better be able to at least compile\n # something.\n-AC_CHECK_HEADERS(sys/file.h sys/param.h stdlib.h string.h unistd.h strings.h sys/time.h sys/resource.h)\n+AC_CHECK_HEADERS(sys/file.h sys/param.h stdlib.h string.h unistd.h strings.h sys/time.h sys/resource.h sys/stat.h)\n AC_HEADER_SYS_WAIT\n \n # This is the list of functions which libiberty will provide if they"}, {"sha": "2fa341681e3486745b168083c398dd8c6a0833ec", "filename": "libiberty/getpwd.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2Fgetpwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac3cb830a7e22e721face7118cdbefdd0515a1e/libiberty%2Fgetpwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetpwd.c?ref=4ac3cb830a7e22e721face7118cdbefdd0515a1e", "patch": "@@ -0,0 +1,117 @@\n+/* getpwd.c - get the working directory */\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+\n+#include <sys/types.h>\n+\n+#include <errno.h>\n+#ifndef errno\n+extern int errno;\n+#endif\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+#ifdef HAVE_SYS_PARAM_H\n+#include <sys/param.h>\n+#endif\n+#if HAVE_SYS_STAT_H\n+#include <sys/stat.h>\n+#endif\n+\n+/* Prototype these in case the system headers don't provide them. */\n+extern char *getpwd ();\n+extern char *getwd ();\n+\n+#include \"libiberty.h\"\n+\n+/* Virtually every UN*X system now in common use (except for pre-4.3-tahoe\n+   BSD systems) now provides getcwd as called for by POSIX.  Allow for\n+   the few exceptions to the general rule here.  */\n+\n+#if !(defined (POSIX) || defined (USG) || defined (VMS)) || defined (HAVE_GETWD)\n+#define getcwd(buf,len) getwd(buf)\n+#ifdef MAXPATHLEN\n+#define GUESSPATHLEN (MAXPATHLEN + 1)\n+#else\n+#define GUESSPATHLEN 100\n+#endif\n+#else /* (defined (USG) || defined (VMS)) */\n+/* We actually use this as a starting point, not a limit.  */\n+#define GUESSPATHLEN 100\n+#endif /* (defined (USG) || defined (VMS)) */\n+\n+#if !(defined (VMS) || (defined(_WIN32) && !defined(__CYGWIN__)))\n+\n+/* Get the working directory.  Use the PWD environment variable if it's\n+   set correctly, since this is faster and gives more uniform answers\n+   to the user.  Yield the working directory if successful; otherwise,\n+   yield 0 and set errno.  */\n+\n+char *\n+getpwd ()\n+{\n+  static char *pwd;\n+  static int failure_errno;\n+\n+  char *p = pwd;\n+  size_t s;\n+  struct stat dotstat, pwdstat;\n+\n+  if (!p && !(errno = failure_errno))\n+    {\n+      if (! ((p = getenv (\"PWD\")) != 0\n+\t     && *p == '/'\n+\t     && stat (p, &pwdstat) == 0\n+\t     && stat (\".\", &dotstat) == 0\n+\t     && dotstat.st_ino == pwdstat.st_ino\n+\t     && dotstat.st_dev == pwdstat.st_dev))\n+\n+\t/* The shortcut didn't work.  Try the slow, ``sure'' way.  */\n+\tfor (s = GUESSPATHLEN;  ! getcwd (p = xmalloc (s), s);  s *= 2)\n+\t  {\n+\t    int e = errno;\n+\t    free (p);\n+#ifdef ERANGE\n+\t    if (e != ERANGE)\n+#endif\n+\t      {\n+\t\terrno = failure_errno = e;\n+\t\tp = 0;\n+\t\tbreak;\n+\t      }\n+\t  }\n+\n+      /* Cache the result.  This assumes that the program does\n+\t not invoke chdir between calls to getpwd.  */\n+      pwd = p;\n+    }\n+  return p;\n+}\n+\n+#else\t/* VMS || _WIN32 && !__CYGWIN__ */\n+\n+#ifndef MAXPATHLEN\n+#define MAXPATHLEN 255\n+#endif\n+\n+char *\n+getpwd ()\n+{\n+  static char *pwd = 0;\n+\n+  if (!pwd)\n+    pwd = getcwd (xmalloc (MAXPATHLEN + 1), MAXPATHLEN + 1\n+#ifdef VMS\n+\t\t  , 0\n+#endif\n+\t\t  );\n+  return pwd;\n+}\n+\n+#endif\t/* VMS || _WIN32 && !__CYGWIN__ */"}]}