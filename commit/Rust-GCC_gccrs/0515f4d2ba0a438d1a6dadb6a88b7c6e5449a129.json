{"sha": "0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxNWY0ZDJiYTBhNDM4ZDFhNmRhZGI2YTg4YjdjNmU1NDQ5YTEyOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-18T17:19:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-18T17:19:15Z"}, "message": "re PR c++/48948 ([C++0x] constexpr friend function cannot be defined in-class)\n\n\tPR c++/48948\n\tPR c++/49015\n\t* class.c (finalize_literal_type_property): Do check\n\tfor constexpr member functions of non-literal class.\n\t(finish_struct): Don't call check_deferred_constexpr_decls.\n\t* cp-tree.h: Don't declare it.\n\t(DECL_DEFERRED_CONSTEXPR_CHECK): Remove.\n\t* decl.c (grok_special_member_properties): Don't check it\n\t(grokfnedcl): Don't call validate_constexpr_fundecl.\n\t(start_preparsed_function): Do call it.\n\t* pt.c (tsubst_decl): Don't call it.\n\t(instantiate_class_template_1): Don't call\n\tcheck_deferred_constexpr_decls.\n\t* semantics.c (literal_type_p): Check for any incompleteness.\n\t(ensure_literal_type_for_constexpr_object): Likewise.\n\t(is_valid_constexpr_fn): Revert deferral changes.\n\t(validate_constexpr_fundecl): Likewise.\n\t(register_constexpr_fundef): Likewise.\n\t(check_deferred_constexpr_decls): Remove.\n\nFrom-SVN: r173869", "tree": {"sha": "610494ba7abd94cabdfb2a873151cbc9247c7d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/610494ba7abd94cabdfb2a873151cbc9247c7d95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41d471d612cc2929a39553fea761e587ed3076ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d471d612cc2929a39553fea761e587ed3076ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d471d612cc2929a39553fea761e587ed3076ab"}], "stats": {"total": 175, "additions": 80, "deletions": 95}, "files": [{"sha": "cc4319eeff0cd6f7e873d1b651c9b04de366a836", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -1,3 +1,25 @@\n+2011-05-18  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48948\n+\tPR c++/49015\n+\t* class.c (finalize_literal_type_property): Do check\n+\tfor constexpr member functions of non-literal class.\n+\t(finish_struct): Don't call check_deferred_constexpr_decls.\n+\t* cp-tree.h: Don't declare it.\n+\t(DECL_DEFERRED_CONSTEXPR_CHECK): Remove.\n+\t* decl.c (grok_special_member_properties): Don't check it\n+\t(grokfnedcl): Don't call validate_constexpr_fundecl.\n+\t(start_preparsed_function): Do call it.\n+\t* pt.c (tsubst_decl): Don't call it.\n+\t(instantiate_class_template_1): Don't call\n+\tcheck_deferred_constexpr_decls.\n+\t* semantics.c (literal_type_p): Check for any incompleteness.\n+\t(ensure_literal_type_for_constexpr_object): Likewise.\n+\t(is_valid_constexpr_fn): Revert deferral changes.\n+\t(validate_constexpr_fundecl): Likewise.\n+\t(register_constexpr_fundef): Likewise.\n+\t(check_deferred_constexpr_decls): Remove.\n+\n 2011-05-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48969"}, {"sha": "4e52b1854881b117cd38a52e3a0918d543306a07", "filename": "gcc/cp/class.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -4582,6 +4582,8 @@ type_requires_array_cookie (tree type)\n static void\n finalize_literal_type_property (tree t)\n {\n+  tree fn;\n+\n   if (cxx_dialect < cxx0x\n       || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n       /* FIXME These constraints seem unnecessary; remove from standard.\n@@ -4591,6 +4593,18 @@ finalize_literal_type_property (tree t)\n   else if (CLASSTYPE_LITERAL_P (t) && !TYPE_HAS_TRIVIAL_DFLT (t)\n \t   && !TYPE_HAS_CONSTEXPR_CTOR (t))\n     CLASSTYPE_LITERAL_P (t) = false;\n+\n+  if (!CLASSTYPE_LITERAL_P (t))\n+    for (fn = TYPE_METHODS (t); fn; fn = DECL_CHAIN (fn))\n+      if (DECL_DECLARED_CONSTEXPR_P (fn)\n+\t  && TREE_CODE (fn) != TEMPLATE_DECL\n+\t  && DECL_NONSTATIC_MEMBER_FUNCTION_P (fn)\n+\t  && !DECL_CONSTRUCTOR_P (fn))\n+\t{\n+\t  DECL_DECLARED_CONSTEXPR_P (fn) = false;\n+\t  if (!DECL_TEMPLATE_INFO (fn))\n+\t    error (\"enclosing class of %q+#D is not a literal type\", fn);\n+\t}\n }\n \n /* Check the validity of the bases and members declared in T.  Add any\n@@ -5831,8 +5845,6 @@ finish_struct (tree t, tree attributes)\n   else\n     error (\"trying to finish struct, but kicked out due to previous parse errors\");\n \n-  check_deferred_constexpr_decls ();\n-\n   if (processing_template_decl && at_function_scope_p ())\n     add_stmt (build_min (TAG_DEFN, t));\n "}, {"sha": "dfb2b66c0ba2128e1148f595a2fa511239c9d673", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -93,7 +93,6 @@ c-common.h, not after.\n       TYPENAME_IS_RESOLVING_P (in TYPE_NAME_TYPE)\n       LAMBDA_EXPR_DEDUCE_RETURN_TYPE_P (in LAMBDA_EXPR)\n       TARGET_EXPR_DIRECT_INIT_P (in TARGET_EXPR)\n-      DECL_DEFERRED_CONSTEXPR_CHECK (in FUNCTION_DECL)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n@@ -2345,11 +2344,6 @@ struct GTY((variable_size)) lang_decl {\n #define DECL_DECLARED_CONSTEXPR_P(DECL) \\\n   DECL_LANG_FLAG_8 (VAR_OR_FUNCTION_DECL_CHECK (STRIP_TEMPLATE (DECL)))\n \n-/* True if we can't tell yet whether the argument/return types of DECL\n-   are literal because one is still being defined.  */\n-#define DECL_DEFERRED_CONSTEXPR_CHECK(DECL) \\\n-  TREE_LANG_FLAG_2 (FUNCTION_DECL_CHECK (STRIP_TEMPLATE (DECL)))\n-\n /* Nonzero if this DECL is the __PRETTY_FUNCTION__ variable in a\n    template function.  */\n #define DECL_PRETTY_FUNCTION_P(NODE) \\\n@@ -5337,7 +5331,6 @@ extern void finish_handler_parms\t\t(tree, tree);\n extern void finish_handler\t\t\t(tree);\n extern void finish_cleanup\t\t\t(tree, tree);\n extern bool literal_type_p (tree);\n-extern void check_deferred_constexpr_decls (void);\n extern tree validate_constexpr_fundecl (tree);\n extern tree register_constexpr_fundef (tree, tree);\n extern bool check_constexpr_ctor_body (tree, tree);"}, {"sha": "e950c43e9cf19a6830bbe134722b1daa86806021", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -7200,10 +7200,7 @@ grokfndecl (tree ctype,\n   if (inlinep)\n     DECL_DECLARED_INLINE_P (decl) = 1;\n   if (inlinep & 2)\n-    {\n-      DECL_DECLARED_CONSTEXPR_P (decl) = true;\n-      validate_constexpr_fundecl (decl);\n-    }\n+    DECL_DECLARED_CONSTEXPR_P (decl) = true;\n \n   DECL_EXTERNAL (decl) = 1;\n   if (quals && TREE_CODE (type) == FUNCTION_TYPE)\n@@ -10681,9 +10678,6 @@ grok_special_member_properties (tree decl)\n \tTYPE_HAS_LIST_CTOR (class_type) = 1;\n \n       if (DECL_DECLARED_CONSTEXPR_P (decl)\n-\t  /* It doesn't count if we can't tell yet whether or not\n-\t     the constructor is actually constexpr.  */\n-\t  && !DECL_DEFERRED_CONSTEXPR_CHECK (decl)\n \t  && !copy_fn_p (decl) && !move_fn_p (decl))\n \tTYPE_HAS_CONSTEXPR_CTOR (class_type) = 1;\n     }\n@@ -12524,6 +12518,10 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \tmaybe_apply_pragma_weak (decl1);\n     }\n \n+  /* constexpr functions must have literal argument types and\n+     literal return type.  */\n+  validate_constexpr_fundecl (decl1);\n+\n   /* Reset this in case the call to pushdecl changed it.  */\n   current_function_decl = decl1;\n "}, {"sha": "75d0674bb40e4c647e1aff18c794daa40c9f2f09", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -8595,8 +8595,6 @@ instantiate_class_template_1 (tree type)\n   pop_deferring_access_checks ();\n   pop_tinst_level ();\n \n-  check_deferred_constexpr_decls ();\n-\n   /* The vtable for a template class can be emitted in any translation\n      unit in which the class is instantiated.  When there is no key\n      method, however, finish_struct_1 will already have added TYPE to\n@@ -9743,7 +9741,6 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tif (DECL_DEFAULTED_OUTSIDE_CLASS_P (r)\n \t    && !processing_template_decl)\n \t  defaulted_late_check (r);\n-\tvalidate_constexpr_fundecl (r);\n \n \tapply_late_template_attributes (&r, DECL_ATTRIBUTES (r), 0,\n \t\t\t\t\targs, complain, in_decl);"}, {"sha": "8d0cce1c478c0b5203e1afc3a6e50c0336e3d16f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 17, "deletions": 72, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -5337,9 +5337,9 @@ literal_type_p (tree t)\n     return true;\n   if (CLASS_TYPE_P (t))\n     {\n-      /* We can't answer this question until the class is complete.  */\n-      gcc_assert (!TYPE_BEING_DEFINED (t) || errorcount);\n-      return CLASSTYPE_LITERAL_P (complete_type (t));\n+      t = complete_type (t);\n+      gcc_assert (COMPLETE_TYPE_P (t) || errorcount);\n+      return CLASSTYPE_LITERAL_P (t);\n     }\n   if (TREE_CODE (t) == ARRAY_TYPE)\n     return literal_type_p (strip_array_types (t));\n@@ -5356,7 +5356,7 @@ ensure_literal_type_for_constexpr_object (tree decl)\n   if (TREE_CODE (decl) == VAR_DECL && DECL_DECLARED_CONSTEXPR_P (decl)\n       && !processing_template_decl)\n     {\n-      if (CLASS_TYPE_P (type) && TYPE_BEING_DEFINED (type))\n+      if (CLASS_TYPE_P (type) && !COMPLETE_TYPE_P (complete_type (type)))\n \t/* Don't complain here, we'll complain about incompleteness\n \t   when we try to initialize the variable.  */;\n       else if (!literal_type_p (type))\n@@ -5417,22 +5417,15 @@ retrieve_constexpr_fundef (tree fun)\n }\n \n /* Check whether the parameter and return types of FUN are valid for a\n-   constexpr function, and complain if COMPLAIN.  If DEFER_OK is true,\n-   return -1 if we can't tell yet because some of the types are still being\n-   defined.  */\n+   constexpr function, and complain if COMPLAIN.  */\n \n-static int\n-is_valid_constexpr_fn (tree fun, bool complain, bool defer_ok)\n+static bool\n+is_valid_constexpr_fn (tree fun, bool complain)\n {\n-#define IF_NON_LITERAL(TYPE)\t\t\t\t\t\t\\\n-  if (defer_ok && CLASS_TYPE_P (TYPE) && TYPE_BEING_DEFINED (TYPE))\t\\\n-    return -1;\t\t\t\t\t\t\t\t\\\n-  else if (!literal_type_p (TYPE))\n-\n   tree parm = FUNCTION_FIRST_USER_PARM (fun);\n   bool ret = true;\n   for (; parm != NULL; parm = TREE_CHAIN (parm))\n-    IF_NON_LITERAL (TREE_TYPE (parm))\n+    if (!literal_type_p (TREE_TYPE (parm)))\n       {\n \tret = false;\n \tif (complain)\n@@ -5443,62 +5436,27 @@ is_valid_constexpr_fn (tree fun, bool complain, bool defer_ok)\n   if (!DECL_CONSTRUCTOR_P (fun))\n     {\n       tree rettype = TREE_TYPE (TREE_TYPE (fun));\n-      IF_NON_LITERAL (rettype)\n+      if (!literal_type_p (rettype))\n \t{\n \t  ret = false;\n \t  if (complain)\n \t    error (\"invalid return type %qT of constexpr function %q+D\",\n \t\t   rettype, fun);\n \t}\n \n-      if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fun))\n+      /* Check this again here for cxx_eval_call_expression.  */\n+      if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fun)\n+\t  && !CLASSTYPE_LITERAL_P (DECL_CONTEXT (fun)))\n \t{\n-\t  IF_NON_LITERAL (DECL_CONTEXT (fun))\n-\t    {\n-\t      ret = false;\n-\t      if (complain)\n-\t\terror (\"enclosing class of %q+#D is not a literal type\", fun);\n-\t    }\n+\t  ret = false;\n+\t  if (complain)\n+\t    error (\"enclosing class of %q+#D is not a literal type\", fun);\n \t}\n     }\n \n   return ret;\n }\n \n-/* We can't check the parameter and return types of a constexpr function\n-   for literality until any open classes are complete, so we defer checking\n-   of any constexpr functions declared in a class.  */\n-\n-static GTY(()) VEC(tree,gc) *deferred_constexpr_decls;\n-\n-void\n-check_deferred_constexpr_decls (void)\n-{\n-  unsigned i;\n-  tree fn;\n-\n-  /* Some of the deferred decls might still need to be deferred,\n-     so move the vector out of the way.  */\n-  VEC(tree,gc) *vec = deferred_constexpr_decls;\n-  deferred_constexpr_decls = NULL;\n-\n-  FOR_EACH_VEC_ELT (tree, vec, i, fn)\n-    {\n-      DECL_DEFERRED_CONSTEXPR_CHECK (fn) = false;\n-      validate_constexpr_fundecl (fn);\n-    }\n-\n-  if (deferred_constexpr_decls == NULL)\n-    {\n-      /* If we didn't need to re-defer any, keep the same vector.  */\n-      VEC_truncate (tree, vec, 0);\n-      deferred_constexpr_decls = vec;\n-    }\n-  else\n-    /* Otherwise, discard the old vector.  */\n-    release_tree_vector (vec);\n-}\n-\n /* Return non-null if FUN certainly designates a valid constexpr function\n    declaration.  Otherwise return NULL.  Issue appropriate diagnostics\n    if necessary.  Note that we only check the declaration, not the body\n@@ -5507,23 +5465,13 @@ check_deferred_constexpr_decls (void)\n tree\n validate_constexpr_fundecl (tree fun)\n {\n-  int valid;\n-\n   if (processing_template_decl || !DECL_DECLARED_CONSTEXPR_P (fun))\n     return NULL;\n   else if (DECL_CLONED_FUNCTION_P (fun))\n     /* We already checked the original function.  */\n     return fun;\n \n-  valid = is_valid_constexpr_fn (fun, !DECL_TEMPLATE_INFO (fun),\n-\t\t\t\t /*defer_ok=*/true);\n-  if (valid < 0)\n-    {\n-      DECL_DEFERRED_CONSTEXPR_CHECK (fun) = true;\n-      VEC_safe_push (tree, gc, deferred_constexpr_decls, fun);\n-      return NULL;\n-    }\n-  else if (valid == 0)\n+  if (!is_valid_constexpr_fn (fun, !DECL_TEMPLATE_INFO (fun)))\n     {\n       DECL_DECLARED_CONSTEXPR_P (fun) = false;\n       return NULL;\n@@ -5768,9 +5716,6 @@ register_constexpr_fundef (tree fun, tree body)\n   constexpr_fundef entry;\n   constexpr_fundef **slot;\n \n-  gcc_assert (DECL_DECLARED_CONSTEXPR_P (fun)\n-\t      && !DECL_DEFERRED_CONSTEXPR_CHECK (fun));\n-\n   if (DECL_CONSTRUCTOR_P (fun))\n     body = build_constexpr_constructor_member_initializers\n       (DECL_CONTEXT (fun), body);\n@@ -6143,7 +6088,7 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n \t  if (DECL_TEMPLATE_INFO (fun)\n \t      && DECL_DECLARED_CONSTEXPR_P (DECL_TEMPLATE_RESULT\n \t\t\t\t\t    (DECL_TI_TEMPLATE (fun))))\n-\t    is_valid_constexpr_fn (fun, true, /*defer_ok=*/false);\n+\t    is_valid_constexpr_fn (fun, true);\n \t}\n       *non_constant_p = true;\n       return t;"}, {"sha": "111a32251c09d6557114349a2d69d56cc117b069", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -1,3 +1,9 @@\n+2011-05-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-incomplete3.C: New.\n+\t* g++.dg/cpp0x/constexpr-incomplete2.C: Adjust.\n+\t* g++.dg/cpp0x/constexpr-memfn1.C: Adjust.\n+\n 2011-05-18  Stuart Henderson  <shenders@gcc.gnu.org>\n \n \t* gcc.target/bfin/mcpu-bf592.c: New test."}, {"sha": "dc0b7429dc65c7c52f92e2a9bfae3196b6df8966", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-incomplete2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete2.C?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -1,4 +1,4 @@\n-// A constructor that might or might not be constexpr doesn't make\n+// A constructor that might or might not be constexpr still makes\n // its class literal.\n // { dg-options -std=c++0x }\n \n@@ -28,4 +28,4 @@ struct D\n   C<D> c;\n };\n \n-constexpr D d {};\t\t// { dg-error \"not literal\" }\n+constexpr D d {};\t\t// { dg-error \"not a constexpr function\" }"}, {"sha": "81822b07e2fac0ac99e540873895b16f1f46fdc0", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-incomplete3.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-incomplete3.C?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/49015\n+// { dg-options -std=c++0x }\n+\n+class A;\n+\n+class B {\n+  friend constexpr B f(A); // Line 5\n+};\n+\n+class A {};\n+\n+constexpr B f(A) { return B(); } // Line 10"}, {"sha": "ef7ac6b4842aa448961e11da0b6ce8b760f1663f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-memfn1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-memfn1.C?ref=0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "patch": "@@ -13,6 +13,6 @@ constexpr X X::g(X x) { return x; }\n struct Y\n {\n   Y() { }\n-  constexpr Y f(Y y);\t\t// { dg-error \"constexpr\" }\n-  static constexpr Y g(Y y);\t// { dg-error \"constexpr\" }\n+  constexpr Y f(Y y);\t\t// { dg-error \"not a literal type\" }\n+  static constexpr Y g(Y y) {}\t// { dg-error \"constexpr\" }\n };"}]}