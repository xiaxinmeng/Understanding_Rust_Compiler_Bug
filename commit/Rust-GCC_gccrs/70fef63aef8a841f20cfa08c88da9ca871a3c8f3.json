{"sha": "70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmZWY2M2FlZjhhODQxZjIwY2ZhMDhjODhkYTljYTg3MWEzYzhmMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-12T14:25:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-12T14:25:48Z"}, "message": "revert: [multiple changes]\n\n2008-03-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR c++/35469\n\tRevert:\n\t2008-02-04  Richard Guenther  <rguenther@suse.de>\n\n        PR java/35035\n        * decl.c (record_builtin_java_type): Make jboolean a\n        integer type again where its mode doesn't match that of bool.\n\n\t2008-01-25  Richard Guenther  <rguenther@suse.de>\n\n        PR c++/33887\n        * decl.c (record_builtin_java_type): Make __java_boolean\n        a variant of bool.\n        * typeck.c (structural_comptypes): Move TYPE_FOR_JAVA check\n        after TYPE_MAIN_VARIANT check.\n\nFrom-SVN: r133142", "tree": {"sha": "1e0d020d20c33cc0e5f0b108ebac2951ace73a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e0d020d20c33cc0e5f0b108ebac2951ace73a98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70fef63aef8a841f20cfa08c88da9ca871a3c8f3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "675144497811ddea99d9e240e8793a4642c728f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675144497811ddea99d9e240e8793a4642c728f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/675144497811ddea99d9e240e8793a4642c728f7"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "c73fd6b25d520d4b3d711ea498d0b3afa03f5112", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70fef63aef8a841f20cfa08c88da9ca871a3c8f3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70fef63aef8a841f20cfa08c88da9ca871a3c8f3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "patch": "@@ -1,3 +1,21 @@\n+2008-03-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c++/35469\n+\tRevert:\n+\t2008-02-04  Richard Guenther  <rguenther@suse.de>\n+\n+        PR java/35035\n+        * decl.c (record_builtin_java_type): Make jboolean a\n+        integer type again where its mode doesn't match that of bool.\n+\n+\t2008-01-25  Richard Guenther  <rguenther@suse.de>\n+\n+        PR c++/33887\n+        * decl.c (record_builtin_java_type): Make __java_boolean\n+        a variant of bool.\n+        * typeck.c (structural_comptypes): Move TYPE_FOR_JAVA check\n+        after TYPE_MAIN_VARIANT check.\n+\n 2008-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/35328"}, {"sha": "2318f6912d0565e403fac38b073453544080d175", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70fef63aef8a841f20cfa08c88da9ca871a3c8f3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70fef63aef8a841f20cfa08c88da9ca871a3c8f3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "patch": "@@ -3159,19 +3159,10 @@ record_builtin_java_type (const char* name, int size)\n   tree type, decl;\n   if (size > 0)\n     type = make_signed_type (size);\n-  else if (size == -1)\n-    { /* \"__java_boolean\".  */\n-      if ((TYPE_MODE (boolean_type_node)\n-\t   == smallest_mode_for_size (1, MODE_INT)))\n-        type = build_variant_type_copy (boolean_type_node);\n-      else\n-\t/* ppc-darwin has SImode bool, make jboolean a 1-bit\n-\t   integer type without boolean semantics there.  */\n-\ttype = make_unsigned_type (1);\n-    }\n   else if (size > -32)\n-    { /* \"__java_char\".  */\n+    { /* \"__java_char\" or \"\"__java_boolean\".  */\n       type = make_unsigned_type (-size);\n+      /*if (size == -1)\tTREE_SET_CODE (type, BOOLEAN_TYPE);*/\n     }\n   else\n     { /* \"__java_float\" or \"\"__java_double\".  */"}, {"sha": "fa4c3ad27c18e3e44324bf12bd9916b8d2f7c7fb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70fef63aef8a841f20cfa08c88da9ca871a3c8f3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70fef63aef8a841f20cfa08c88da9ca871a3c8f3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "patch": "@@ -962,6 +962,8 @@ structural_comptypes (tree t1, tree t2, int strict)\n   if (TREE_CODE (t1) != ARRAY_TYPE\n       && TYPE_QUALS (t1) != TYPE_QUALS (t2))\n     return false;\n+  if (TYPE_FOR_JAVA (t1) != TYPE_FOR_JAVA (t2))\n+    return false;\n \n   /* Allow for two different type nodes which have essentially the same\n      definition.  Note that we already checked for equality of the type\n@@ -971,9 +973,6 @@ structural_comptypes (tree t1, tree t2, int strict)\n       && TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n     return true;\n \n-  if (TYPE_FOR_JAVA (t1) != TYPE_FOR_JAVA (t2))\n-    return false;\n-\n   /* Compare the types.  Break out if they could be the same.  */\n   switch (TREE_CODE (t1))\n     {"}]}