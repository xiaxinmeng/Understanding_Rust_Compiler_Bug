{"sha": "4af6a063722d474da500dd104b1e4a9687430857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFmNmEwNjM3MjJkNDc0ZGE1MDBkZDEwNGIxZTRhOTY4NzQzMDg1Nw==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2003-01-16T00:34:45Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-01-16T00:34:45Z"}, "message": "som.h (SUPPORTS_WEAK, [...]): Define.\n\n\t* som.h (SUPPORTS_WEAK, SUPPORTS_ONE_ONLY, MAKE_DECL_ONE_ONLY,\n\tASM_WEAKEN_LABEL, GTHREAD_USE_WEAK): Define.\n\t* pa.h (TARGET_SOM_SDEF): Define.\n\t* pa-hpux11.h (TARGET_SOM_SDEF): Define.\n\t* config/os/hpux/os_defines.h (_GLIBCPP_GTHREAD_USE_WEAK): Define for\n\t__hppa__.\n\nFrom-SVN: r61372", "tree": {"sha": "2cb9964dd1c8c5cce2af849f133edc3faab40ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cb9964dd1c8c5cce2af849f133edc3faab40ab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4af6a063722d474da500dd104b1e4a9687430857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af6a063722d474da500dd104b1e4a9687430857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4af6a063722d474da500dd104b1e4a9687430857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4af6a063722d474da500dd104b1e4a9687430857/comments", "author": null, "committer": null, "parents": [{"sha": "f826d5952cbea7d361f5e7869868acb7cce47d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f826d5952cbea7d361f5e7869868acb7cce47d95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f826d5952cbea7d361f5e7869868acb7cce47d95"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "0d7d19c3e41f84e168600cc8f79ad57b889dd0ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af6a063722d474da500dd104b1e4a9687430857/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af6a063722d474da500dd104b1e4a9687430857/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4af6a063722d474da500dd104b1e4a9687430857", "patch": "@@ -1,3 +1,10 @@\n+2003-01-15  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* som.h (SUPPORTS_WEAK, SUPPORTS_ONE_ONLY, MAKE_DECL_ONE_ONLY,\n+\tASM_WEAKEN_LABEL, GTHREAD_USE_WEAK): Define.\n+\t* pa.h (TARGET_SOM_SDEF): Define.\n+\t* pa-hpux11.h (TARGET_SOM_SDEF): Define.\n+\n 2003-01-16  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.c (expand_prologue): Use push/pop to "}, {"sha": "502b82b7af4eb01497d0b070965f4b6b778e481e", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af6a063722d474da500dd104b1e4a9687430857/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af6a063722d474da500dd104b1e4a9687430857/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=4af6a063722d474da500dd104b1e4a9687430857", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for HP PA-RISC\n-   Copyright (C) 1998, 1999, 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -130,3 +130,8 @@ Boston, MA 02111-1307, USA.  */\n #define LD_INIT_SWITCH \"+init\"\n #undef LD_FINI_SWITCH\n #define LD_FINI_SWITCH \"+fini\"\n+\n+/* The HP-UX 11.X SOM linker (ld32) can successfully link shared libraries\n+   with secondary definition (weak) symbols.  */\n+#undef TARGET_SOM_SDEF\n+#define TARGET_SOM_SDEF 1"}, {"sha": "2361ba4368cffef057bf51ead4cd1a9e03ad0bcd", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af6a063722d474da500dd104b1e4a9687430857/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af6a063722d474da500dd104b1e4a9687430857/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=4af6a063722d474da500dd104b1e4a9687430857", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for the HP Spectrum.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002 Free Software Foundation, Inc.\n+   2001, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) of Cygnus Support\n    and Tim Moore (moore@defmacro.cs.utah.edu) of the Center for\n    Software Science at the University of Utah.\n@@ -206,6 +206,11 @@ extern int target_flags;\n    not for external calls.  */\n #define TARGET_LONG_PIC_PCREL_CALL 0\n \n+/* Define to a C expression evaluating to true to use SOM secondary\n+   definition symbols for weak support.  Linker support for secondary\n+   definition symbols is buggy prior to HP-UX 11.X.  */\n+#define TARGET_SOM_SDEF 0\n+\n /* Macro to define tables used to set the flags.  This is a\n    list in braces of target switches with each switch being\n    { \"NAME\", VALUE, \"HELP_STRING\" }.  VALUE is the bits to set,"}, {"sha": "577a67ea31e75c827346eb48e4f4e0dbc0e201b9", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af6a063722d474da500dd104b1e4a9687430857/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af6a063722d474da500dd104b1e4a9687430857/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=4af6a063722d474da500dd104b1e4a9687430857", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for SOM assembler support.\n-   Copyright (C) 1999, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -371,3 +371,52 @@ do {\t\t\t\t\t\t\\\n /* Aggregates with a single float or double field should be passed and\n    returned in the general registers.  */\n #define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) (MODE==SFmode || MODE==DFmode)\n+\n+/* If GAS supports weak, we can support weak when we have working linker\n+   support for secondary definitions and are generating code for GAS.  */\n+#ifdef HAVE_GAS_WEAK\n+#define SUPPORTS_WEAK (TARGET_SOM_SDEF && TARGET_GAS)\n+#else\n+#define SUPPORTS_WEAK 0\n+#endif\n+\n+/* We can support one only if we support weak.  */\n+#define SUPPORTS_ONE_ONLY SUPPORTS_WEAK\n+\n+/* Use weak (secondary definitions) to make one only declarations.  */\n+#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n+\n+/* This is how we tell the assembler that a symbol is weak.  The SOM\n+   weak implementation uses the secondary definition (sdef) flag.\n+\n+   The behavior of sdef symbols is similar to ELF weak symbols in that\n+   multiple definitions can occur without incurring a link error.\n+   However, they differ in the following ways:\n+     1) Undefined sdef symbols are not allowed.\n+     2) The linker searches for undefined sdef symbols and will load an\n+\tarchive library member to resolve an undefined sdef symbol.\n+     3) The exported symbol from a shared library is a primary symbol\n+        rather than a sdef symbol.  Thus, more care is needed in the\n+\tordering of libraries.\n+\n+   It appears that the linker discards extra copies of \"weak\" functions\n+   when linking shared libraries, independent of whether or not they\n+   are in their own section.  In linking final executables, -Wl,-O can\n+   be used to remove dead procedures.  Thus, support for named sections\n+   is not needed and in previous testing caused problems with various\n+   HP tools.  */\n+#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+  do { fputs (\"\\t.weak\\t\", FILE);\t\t\t\t\\\n+       assemble_name (FILE, NAME);\t\t\t\t\\\n+       fputc ('\\n', FILE);\t\t\t\t\t\\\n+       if (! FUNCTION_NAME_P (NAME))\t\t\t\t\\\n+\t {\t\t\t\t\t\t\t\\\n+\t   fputs (\"\\t.EXPORT \", FILE);\t\t\t\t\\\n+\t   assemble_name (FILE, NAME);\t\t\t\t\\\n+\t   fputs (\",DATA\\n\", FILE);\t\t\t\t\\\n+\t }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* We can't handle weak aliases, and therefore can't support pragma weak.\n+   Suppress the use of pragma weak in gthr-dce.h and gthr-posix.h.  */\n+#define GTHREAD_USE_WEAK 0"}, {"sha": "6a1ef31d98ed5ab68e1d1692cabf91a180415e08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af6a063722d474da500dd104b1e4a9687430857/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af6a063722d474da500dd104b1e4a9687430857/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4af6a063722d474da500dd104b1e4a9687430857", "patch": "@@ -1,3 +1,8 @@\n+2003-01-15  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* config/os/hpux/os_defines.h (_GLIBCPP_GTHREAD_USE_WEAK): Define for\n+\t__hppa__.\n+\n 2003-01-14  Jeffrey D. Oldham  <oldham@codesourcery.com>\n \n \tFurther conform g++'s __vmi_class_type_info to the C++ ABI"}, {"sha": "87d9d4f8d8e0b4fdf9793bb05a72da1b9041a452", "filename": "libstdc++-v3/config/os/hpux/os_defines.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4af6a063722d474da500dd104b1e4a9687430857/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4af6a063722d474da500dd104b1e4a9687430857/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fhpux%2Fos_defines.h?ref=4af6a063722d474da500dd104b1e4a9687430857", "patch": "@@ -89,4 +89,9 @@ typedef long int __padding_type;\n #if !defined(_GLIBCPP_SUPPORTS_WEAK) && defined (__hppa__)\n #define _GLIBCPP_INST_ATOMICITY_LOCK 1\n #endif\n+\n+/* Don't use pragma weak in gthread headers.  */\n+#ifdef __hppa__\n+#define _GLIBCPP_GTHREAD_USE_WEAK 0\n+#endif\n #endif"}]}