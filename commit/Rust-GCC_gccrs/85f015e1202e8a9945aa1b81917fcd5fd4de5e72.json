{"sha": "85f015e1202e8a9945aa1b81917fcd5fd4de5e72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVmMDE1ZTEyMDJlOGE5OTQ1YWExYjgxOTE3ZmNkNWZkNGRlNWU3Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-06-25T19:33:08Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-06-25T19:33:08Z"}, "message": "hwint.h (HOST_WIDE_INT_PRINT, [...]): New macros.\n\n\t* hwint.h (HOST_WIDE_INT_PRINT, HOST_WIDE_INT_PRINT_C): New macros.\n\t(HOST_WIDE_INT_PRINT_DEC_SPACE,\n\tHOST_WIDE_INT_PRINT_UNSIGNED_SPACE,\n\tHOST_WIDEST_INT_PRINT_DEC_SPACE,\n\tHOST_WIDEST_INT_PRINT_UNSIGNED_SPACE): Delete.\n\t(HOST_WIDE_INT_PRINT_DEC, HOST_WIDE_INT_PRINT_DEC_C,\n\tHOST_WIDE_INT_PRINT_UNSIGNED, HOST_WIDE_INT_PRINT_HEX): Define in\n\tterms of HOST_WIDE_INT_PRINT and possibly HOST_WIDE_INT_PRINT_C.\n\n\t* final.c (asm_fprintf): Use HOST_WIDE_INT_PRINT.\n\t* ra-debug.c (dump_static_insn_cost): Likewise.\n\nFrom-SVN: r68489", "tree": {"sha": "b1c1fa8a85e884953150c2002096cb56966b0d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1c1fa8a85e884953150c2002096cb56966b0d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85f015e1202e8a9945aa1b81917fcd5fd4de5e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f015e1202e8a9945aa1b81917fcd5fd4de5e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85f015e1202e8a9945aa1b81917fcd5fd4de5e72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/comments", "author": null, "committer": null, "parents": [{"sha": "2784775405bab5290a9e9feb425d85a5c42b94de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2784775405bab5290a9e9feb425d85a5c42b94de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2784775405bab5290a9e9feb425d85a5c42b94de"}], "stats": {"total": 79, "additions": 36, "deletions": 43}, "files": [{"sha": "c0351c8897a2e1ec461a283f2225b6b532f1bf51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85f015e1202e8a9945aa1b81917fcd5fd4de5e72", "patch": "@@ -1,3 +1,17 @@\n+2003-06-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* hwint.h (HOST_WIDE_INT_PRINT, HOST_WIDE_INT_PRINT_C): New macros.\n+\t(HOST_WIDE_INT_PRINT_DEC_SPACE,\n+\tHOST_WIDE_INT_PRINT_UNSIGNED_SPACE,\n+\tHOST_WIDEST_INT_PRINT_DEC_SPACE,\n+\tHOST_WIDEST_INT_PRINT_UNSIGNED_SPACE): Delete.\n+\t(HOST_WIDE_INT_PRINT_DEC, HOST_WIDE_INT_PRINT_DEC_C,\n+\tHOST_WIDE_INT_PRINT_UNSIGNED, HOST_WIDE_INT_PRINT_HEX): Define in\n+\tterms of HOST_WIDE_INT_PRINT and possibly HOST_WIDE_INT_PRINT_C.\n+\n+\t* final.c (asm_fprintf): Use HOST_WIDE_INT_PRINT.\n+\t* ra-debug.c (dump_static_insn_cost): Likewise.\n+\n 2003-06-26  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/arm.h (BIGGEST_FIELD_ALIGNMENT): Define instead"}, {"sha": "6015cd000e5b636266704333c3b04fb4ecad746a", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=85f015e1202e8a9945aa1b81917fcd5fd4de5e72", "patch": "@@ -3419,17 +3419,8 @@ asm_fprintf (FILE *file, const char *p, ...)\n \t       'o' cases, but we do not check for those cases.  It\n \t       means that the value is a HOST_WIDE_INT, which may be\n \t       either `long' or `long long'.  */\n-\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-\t    *q++ = 'l';\n-#else\n-\t    *q++ = 'l';\n-\t    *q++ = 'l';\n-#endif\n-#endif\n-\n+\t    memcpy (q, HOST_WIDE_INT_PRINT, strlen (HOST_WIDE_INT_PRINT));\n+\t    q += strlen (HOST_WIDE_INT_PRINT);\n \t    *q++ = *p++;\n \t    *q = 0;\n \t    fprintf (file, buf, va_arg (argptr, HOST_WIDE_INT));"}, {"sha": "4fed004cbf6cdcf9c6001b9b26411d5d8a040fdf", "filename": "gcc/hwint.h", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=85f015e1202e8a9945aa1b81917fcd5fd4de5e72", "patch": "@@ -64,12 +64,8 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n /* Various printf format strings for HOST_WIDE_INT.  */\n \n #if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-# define HOST_WIDE_INT_PRINT_DEC \"%ld\"\n-# define HOST_WIDE_INT_PRINT_DEC_C \"%ldL\"\n-# define HOST_WIDE_INT_PRINT_DEC_SPACE \"% *ld\"\n-# define HOST_WIDE_INT_PRINT_UNSIGNED \"%lu\"\n-# define HOST_WIDE_INT_PRINT_UNSIGNED_SPACE \"% *lu\"\n-# define HOST_WIDE_INT_PRINT_HEX \"0x%lx\"\n+# define HOST_WIDE_INT_PRINT \"l\"\n+# define HOST_WIDE_INT_PRINT_C \"L\"\n   /* 'long' might be 32 or 64 bits, and the number of leading zeroes\n      must be tweaked accordingly.  */\n # if HOST_BITS_PER_WIDE_INT == 64\n@@ -78,15 +74,16 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n #  define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%lx%08lx\"\n # endif\n #else\n-# define HOST_WIDE_INT_PRINT_DEC \"%lld\"\n-# define HOST_WIDE_INT_PRINT_DEC_C \"%lldLL\"\n-# define HOST_WIDE_INT_PRINT_DEC_SPACE \"% *lld\"\n-# define HOST_WIDE_INT_PRINT_UNSIGNED \"%llu\"\n-# define HOST_WIDE_INT_PRINT_UNSIGNED_SPACE \"% *llu\"\n-# define HOST_WIDE_INT_PRINT_HEX \"0x%llx\"\n+# define HOST_WIDE_INT_PRINT \"ll\"\n+# define HOST_WIDE_INT_PRINT_C \"LL\"\n   /* We can assume that 'long long' is at least 64 bits.  */\n # define HOST_WIDE_INT_PRINT_DOUBLE_HEX \"0x%llx%016llx\"\n-#endif\n+#endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n+\n+#define HOST_WIDE_INT_PRINT_DEC \"%\" HOST_WIDE_INT_PRINT \"d\"\n+#define HOST_WIDE_INT_PRINT_DEC_C HOST_WIDE_INT_PRINT_DEC HOST_WIDE_INT_PRINT_C\n+#define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_WIDE_INT_PRINT \"u\"\n+#define HOST_WIDE_INT_PRINT_HEX \"0x%\" HOST_WIDE_INT_PRINT \"x\"\n \n /* Set HOST_WIDEST_INT.  This is a 64-bit type unless the compiler\n    in use has no 64-bit type at all; in that case it's 32 bits.  */\n@@ -97,9 +94,7 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n # define HOST_BITS_PER_WIDEST_INT\t      HOST_BITS_PER_WIDE_INT\n # define HOST_WIDEST_INT_PRINT_DEC\t      HOST_WIDE_INT_PRINT_DEC\n # define HOST_WIDEST_INT_PRINT_DEC_C\t      HOST_WIDE_INT_PRINT_DEC_C\n-# define HOST_WIDEST_INT_PRINT_DEC_SPACE      HOST_WIDE_INT_PRINT_DEC_SPACE\n # define HOST_WIDEST_INT_PRINT_UNSIGNED\t      HOST_WIDE_INT_PRINT_UNSIGNED\n-# define HOST_WIDEST_INT_PRINT_UNSIGNED_SPACE HOST_WIDE_INT_PRINT_UNSIGNED_SPACE\n # define HOST_WIDEST_INT_PRINT_HEX\t      HOST_WIDE_INT_PRINT_HEX\n # define HOST_WIDEST_INT_PRINT_DOUBLE_HEX     HOST_WIDE_INT_PRINT_DOUBLE_HEX\n #else\n@@ -116,9 +111,7 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n # endif\n # define HOST_WIDEST_INT_PRINT_DEC\t      \"%lld\"\n # define HOST_WIDEST_INT_PRINT_DEC_C\t      \"%lldLL\"\n-# define HOST_WIDEST_INT_PRINT_DEC_SPACE      \"% *lld\"\n # define HOST_WIDEST_INT_PRINT_UNSIGNED\t      \"%llu\"\n-# define HOST_WIDEST_INT_PRINT_UNSIGNED_SPACE \"% *llu\"\n # define HOST_WIDEST_INT_PRINT_HEX\t      \"0x%llx\"\n # define HOST_WIDEST_INT_PRINT_DOUBLE_HEX     \"0x%llx%016llx\"\n #endif"}, {"sha": "7d59bac42e34011db2daad3b0d1513b837bdfafb", "filename": "gcc/ra-debug.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/gcc%2Fra-debug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f015e1202e8a9945aa1b81917fcd5fd4de5e72/gcc%2Fra-debug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-debug.c?ref=85f015e1202e8a9945aa1b81917fcd5fd4de5e72", "patch": "@@ -985,21 +985,16 @@ dump_static_insn_cost (file, message, prefix)\n   if (!prefix)\n     prefix = \"\";\n   fprintf (file, \"static insn cost %s\\n\", message ? message : \"\");\n-  fprintf (file, \"  %soverall:\\tnum=%6d\\tcost=\"\n-\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n-\t   prefix, overall.count, 8, overall.cost);\n-  fprintf (file, \"  %sloads:\\tnum=%6d\\tcost=\"\n-\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n-\t   prefix, load.count, 8, load.cost);\n-  fprintf (file, \"  %sstores:\\tnum=%6d\\tcost=\"\n-\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n-\t   prefix, store.count, 8, store.cost);\n-  fprintf (file, \"  %sregcopy:\\tnum=%6d\\tcost=\"\n-\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n-\t   prefix, regcopy.count, 8, regcopy.cost);\n-  fprintf (file, \"  %sselfcpy:\\tnum=%6d\\tcost=\"\n-\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n-\t   prefix, selfcopy.count, 8, selfcopy.cost);\n+  fprintf (file, \"  %soverall:\\tnum=%6d\\tcost=% 8\" HOST_WIDE_INT_PRINT \"d\\n\",\n+\t   prefix, overall.count, overall.cost);\n+  fprintf (file, \"  %sloads:\\tnum=%6d\\tcost=% 8\" HOST_WIDE_INT_PRINT \"d\\n\",\n+\t   prefix, load.count, load.cost);\n+  fprintf (file, \"  %sstores:\\tnum=%6d\\tcost=% 8\" HOST_WIDE_INT_PRINT \"d\\n\",\n+\t   prefix, store.count, store.cost);\n+  fprintf (file, \"  %sregcopy:\\tnum=%6d\\tcost=% 8\" HOST_WIDE_INT_PRINT \"d\\n\",\n+\t   prefix, regcopy.count, regcopy.cost);\n+  fprintf (file, \"  %sselfcpy:\\tnum=%6d\\tcost=% 8\" HOST_WIDE_INT_PRINT \"d\\n\",\n+\t   prefix, selfcopy.count, selfcopy.cost);\n }\n \n /* Returns nonzero, if WEB1 and WEB2 have some possible"}]}