{"sha": "f18a7b25aaafd514f2a6e674536780bca389b608", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4YTdiMjVhYWFmZDUxNGYyYTZlNjc0NTM2NzgwYmNhMzg5YjYwOA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2012-02-22T10:37:03Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2012-02-22T10:37:03Z"}, "message": "re PR middle-end/51782 (-ftree-sra: Missing address-space information leads to wrong)\n\n2012-02-22  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/51782\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Set address space\n\taccording to the base object.\n\nFrom-SVN: r184463", "tree": {"sha": "65df171e024e226db47a0d48bf7e08c34764c3f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65df171e024e226db47a0d48bf7e08c34764c3f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18a7b25aaafd514f2a6e674536780bca389b608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18a7b25aaafd514f2a6e674536780bca389b608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18a7b25aaafd514f2a6e674536780bca389b608", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18a7b25aaafd514f2a6e674536780bca389b608/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cfa78994aa1cfbf28b6e0fb367f34900f0eeb76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cfa78994aa1cfbf28b6e0fb367f34900f0eeb76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cfa78994aa1cfbf28b6e0fb367f34900f0eeb76"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "ff81abd699cdf10f319b79f2940fca621699fe98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18a7b25aaafd514f2a6e674536780bca389b608/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18a7b25aaafd514f2a6e674536780bca389b608/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f18a7b25aaafd514f2a6e674536780bca389b608", "patch": "@@ -1,3 +1,9 @@\n+2012-02-22  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/51782\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Set address space\n+\taccording to the base object.\n+\n 2012-02-22  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR rtl-optimization/50063"}, {"sha": "a95c14611c9a318d092ed0359c816513ec624f6b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18a7b25aaafd514f2a6e674536780bca389b608/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18a7b25aaafd514f2a6e674536780bca389b608/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f18a7b25aaafd514f2a6e674536780bca389b608", "patch": "@@ -1548,6 +1548,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n   HOST_WIDE_INT apply_bitpos = 0;\n   tree type;\n   struct mem_attrs attrs, *defattrs, *refattrs;\n+  addr_space_t as;\n \n   /* It can happen that type_for_mode was given a mode for which there\n      is no language-level type.  In which case it returns NULL, which\n@@ -1681,17 +1682,29 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n       MEM_NOTRAP_P (ref) = !tree_could_trap_p (t);\n \n       base = get_base_address (t);\n-      if (base && DECL_P (base)\n-\t  && TREE_READONLY (base)\n-\t  && (TREE_STATIC (base) || DECL_EXTERNAL (base))\n-\t  && !TREE_THIS_VOLATILE (base))\n-\tMEM_READONLY_P (ref) = 1;\n-\n-      /* Mark static const strings readonly as well.  */\n-      if (base && TREE_CODE (base) == STRING_CST\n-\t  && TREE_READONLY (base)\n-\t  && TREE_STATIC (base))\n-\tMEM_READONLY_P (ref) = 1;\n+      if (base)\n+\t{\n+\t  if (DECL_P (base)\n+\t      && TREE_READONLY (base)\n+\t      && (TREE_STATIC (base) || DECL_EXTERNAL (base))\n+\t      && !TREE_THIS_VOLATILE (base))\n+\t    MEM_READONLY_P (ref) = 1;\n+\n+\t  /* Mark static const strings readonly as well.  */\n+\t  if (TREE_CODE (base) == STRING_CST\n+\t      && TREE_READONLY (base)\n+\t      && TREE_STATIC (base))\n+\t    MEM_READONLY_P (ref) = 1;\n+\n+\t  if (TREE_CODE (base) == MEM_REF\n+\t      || TREE_CODE (base) == TARGET_MEM_REF)\n+\t    as = TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (base,\n+\t\t\t\t\t\t\t\t      0))));\n+\t  else\n+\t    as = TYPE_ADDR_SPACE (TREE_TYPE (base));\n+\t}\n+      else\n+\tas = TYPE_ADDR_SPACE (type);\n \n       /* If this expression uses it's parent's alias set, mark it such\n \t that we won't change it.  */\n@@ -1830,6 +1843,8 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t  attrs.align = MAX (attrs.align, obj_align);\n \t}\n     }\n+  else\n+    as = TYPE_ADDR_SPACE (type);\n \n   /* If we modified OFFSET based on T, then subtract the outstanding\n      bit position offset.  Similarly, increase the size of the accessed\n@@ -1843,7 +1858,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n     }\n \n   /* Now set the attributes we computed above.  */\n-  attrs.addrspace = TYPE_ADDR_SPACE (type);\n+  attrs.addrspace = as;\n   set_mem_attrs (ref, &attrs);\n }\n "}]}