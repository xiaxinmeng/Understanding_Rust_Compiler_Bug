{"sha": "1716efeb6d3e9097e75143d9ef98f504856fd34d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcxNmVmZWI2ZDNlOTA5N2U3NTE0M2Q5ZWY5OGY1MDQ4NTZmZDM0ZA==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@codesourcery.com", "date": "2015-05-27T06:16:37Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2015-05-27T06:16:37Z"}, "message": "target.c (gomp_map_pointer): New function abstracting out GOMP_MAP_POINTER handling.\n\n2015-05-27  Chung-Lin Tang  <cltang@codesourcery.com>\n\n\tlibgomp/\n\t* target.c (gomp_map_pointer): New function abstracting out\n\tGOMP_MAP_POINTER handling.\n\t(gomp_map_vars): Remove GOMP_MAP_POINTER handling code and use\n\tgomp_map_pointer().\n\nFrom-SVN: r223737", "tree": {"sha": "21ff71cf71f9bbc489340387beea3ffdd6c796e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21ff71cf71f9bbc489340387beea3ffdd6c796e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1716efeb6d3e9097e75143d9ef98f504856fd34d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1716efeb6d3e9097e75143d9ef98f504856fd34d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1716efeb6d3e9097e75143d9ef98f504856fd34d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1716efeb6d3e9097e75143d9ef98f504856fd34d/comments", "author": {"login": "cltang", "id": 4055966, "node_id": "MDQ6VXNlcjQwNTU5NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/4055966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cltang", "html_url": "https://github.com/cltang", "followers_url": "https://api.github.com/users/cltang/followers", "following_url": "https://api.github.com/users/cltang/following{/other_user}", "gists_url": "https://api.github.com/users/cltang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cltang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cltang/subscriptions", "organizations_url": "https://api.github.com/users/cltang/orgs", "repos_url": "https://api.github.com/users/cltang/repos", "events_url": "https://api.github.com/users/cltang/events{/privacy}", "received_events_url": "https://api.github.com/users/cltang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7553271edd14ffe2cf3557700ebd641febd7acb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7553271edd14ffe2cf3557700ebd641febd7acb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7553271edd14ffe2cf3557700ebd641febd7acb1"}], "stats": {"total": 169, "additions": 69, "deletions": 100}, "files": [{"sha": "07eec068ef3a85ab0095a71aaea0901c6361b3fc", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1716efeb6d3e9097e75143d9ef98f504856fd34d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1716efeb6d3e9097e75143d9ef98f504856fd34d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1716efeb6d3e9097e75143d9ef98f504856fd34d", "patch": "@@ -1,3 +1,10 @@\n+2015-05-27  Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* target.c (gomp_map_pointer): New function abstracting out\n+\tGOMP_MAP_POINTER handling.\n+\t(gomp_map_vars): Remove GOMP_MAP_POINTER handling code and use\n+\tgomp_map_pointer().\n+\n 2015-05-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/66199"}, {"sha": "6e82792c8197d66eada5c49b2d0d20e2ee32eb99", "filename": "libgomp/target.c", "status": "modified", "additions": 62, "deletions": 100, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1716efeb6d3e9097e75143d9ef98f504856fd34d/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1716efeb6d3e9097e75143d9ef98f504856fd34d/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=1716efeb6d3e9097e75143d9ef98f504856fd34d", "patch": "@@ -163,6 +163,60 @@ get_kind (bool is_openacc, void *kinds, int idx)\n \t\t    : ((unsigned char *) kinds)[idx];\n }\n \n+static void\n+gomp_map_pointer (struct target_mem_desc *tgt, uintptr_t host_ptr,\n+\t\t  uintptr_t target_offset, uintptr_t bias)\n+{\n+  struct gomp_device_descr *devicep = tgt->device_descr;\n+  struct splay_tree_s *mem_map = &devicep->mem_map;\n+  struct splay_tree_key_s cur_node;\n+\n+  cur_node.host_start = host_ptr;\n+  if (cur_node.host_start == (uintptr_t) NULL)\n+    {\n+      cur_node.tgt_offset = (uintptr_t) NULL;\n+      /* FIXME: see comment about coalescing host/dev transfers below.  */\n+      devicep->host2dev_func (devicep->target_id,\n+\t\t\t      (void *) (tgt->tgt_start + target_offset),\n+\t\t\t      (void *) &cur_node.tgt_offset,\n+\t\t\t      sizeof (void *));\n+      return;\n+    }\n+  /* Add bias to the pointer value.  */\n+  cur_node.host_start += bias;\n+  cur_node.host_end = cur_node.host_start + 1;\n+  splay_tree_key n = splay_tree_lookup (mem_map, &cur_node);\n+  if (n == NULL)\n+    {\n+      /* Could be possibly zero size array section.  */\n+      cur_node.host_end--;\n+      n = splay_tree_lookup (mem_map, &cur_node);\n+      if (n == NULL)\n+\t{\n+\t  cur_node.host_start--;\n+\t  n = splay_tree_lookup (mem_map, &cur_node);\n+\t  cur_node.host_start++;\n+\t}\n+    }\n+  if (n == NULL)\n+    {\n+      gomp_mutex_unlock (&devicep->lock);\n+      gomp_fatal (\"Pointer target of array section wasn't mapped\");\n+    }\n+  cur_node.host_start -= n->host_start;\n+  cur_node.tgt_offset\n+    = n->tgt->tgt_start + n->tgt_offset + cur_node.host_start;\n+  /* At this point tgt_offset is target address of the\n+     array section.  Now subtract bias to get what we want\n+     to initialize the pointer with.  */\n+  cur_node.tgt_offset -= bias;\n+  /* FIXME: see comment about coalescing host/dev transfers below.  */\n+  devicep->host2dev_func (devicep->target_id,\n+\t\t\t  (void *) (tgt->tgt_start + target_offset),\n+\t\t\t  (void *) &cur_node.tgt_offset,\n+\t\t\t  sizeof (void *));\n+}\n+\n attribute_hidden struct target_mem_desc *\n gomp_map_vars (struct gomp_device_descr *devicep, size_t mapnum,\n \t       void **hostaddrs, void **devaddrs, size_t *sizes, void *kinds,\n@@ -336,54 +390,8 @@ gomp_map_vars (struct gomp_device_descr *devicep, size_t mapnum,\n \t\t\t\t\t    k->host_end - k->host_start);\n \t\t    break;\n \t\t  case GOMP_MAP_POINTER:\n-\t\t    cur_node.host_start\n-\t\t      = (uintptr_t) *(void **) k->host_start;\n-\t\t    if (cur_node.host_start == (uintptr_t) NULL)\n-\t\t      {\n-\t\t\tcur_node.tgt_offset = (uintptr_t) NULL;\n-\t\t\t/* FIXME: see above FIXME comment.  */\n-\t\t\tdevicep->host2dev_func (devicep->target_id,\n-\t\t\t\t\t\t(void *) (tgt->tgt_start\n-\t\t\t\t\t\t\t  + k->tgt_offset),\n-\t\t\t\t\t\t(void *) &cur_node.tgt_offset,\n-\t\t\t\t\t\tsizeof (void *));\n-\t\t\tbreak;\n-\t\t      }\n-\t\t    /* Add bias to the pointer value.  */\n-\t\t    cur_node.host_start += sizes[i];\n-\t\t    cur_node.host_end = cur_node.host_start + 1;\n-\t\t    n = splay_tree_lookup (mem_map, &cur_node);\n-\t\t    if (n == NULL)\n-\t\t      {\n-\t\t\t/* Could be possibly zero size array section.  */\n-\t\t\tcur_node.host_end--;\n-\t\t\tn = splay_tree_lookup (mem_map, &cur_node);\n-\t\t\tif (n == NULL)\n-\t\t\t  {\n-\t\t\t    cur_node.host_start--;\n-\t\t\t    n = splay_tree_lookup (mem_map, &cur_node);\n-\t\t\t    cur_node.host_start++;\n-\t\t\t  }\n-\t\t      }\n-\t\t    if (n == NULL)\n-\t\t      {\n-\t\t\tgomp_mutex_unlock (&devicep->lock);\n-\t\t\tgomp_fatal (\"Pointer target of array section \"\n-\t\t\t\t    \"wasn't mapped\");\n-\t\t      }\n-\t\t    cur_node.host_start -= n->host_start;\n-\t\t    cur_node.tgt_offset = n->tgt->tgt_start + n->tgt_offset\n-\t\t\t\t\t  + cur_node.host_start;\n-\t\t    /* At this point tgt_offset is target address of the\n-\t\t       array section.  Now subtract bias to get what we want\n-\t\t       to initialize the pointer with.  */\n-\t\t    cur_node.tgt_offset -= sizes[i];\n-\t\t    /* FIXME: see above FIXME comment.  */\n-\t\t    devicep->host2dev_func (devicep->target_id,\n-\t\t\t\t\t    (void *) (tgt->tgt_start\n-\t\t\t\t\t\t      + k->tgt_offset),\n-\t\t\t\t\t    (void *) &cur_node.tgt_offset,\n-\t\t\t\t\t    sizeof (void *));\n+\t\t    gomp_map_pointer (tgt, (uintptr_t) *(void **) k->host_start,\n+\t\t\t\t      k->tgt_offset, sizes[i]);\n \t\t    break;\n \t\t  case GOMP_MAP_TO_PSET:\n \t\t    /* FIXME: see above FIXME comment.  */\n@@ -405,58 +413,12 @@ gomp_map_vars (struct gomp_device_descr *devicep, size_t mapnum,\n \t\t\t{\n \t\t\t  tgt->list[j] = k;\n \t\t\t  k->refcount++;\n-\t\t\t  cur_node.host_start\n-\t\t\t    = (uintptr_t) *(void **) hostaddrs[j];\n-\t\t\t  if (cur_node.host_start == (uintptr_t) NULL)\n-\t\t\t    {\n-\t\t\t      cur_node.tgt_offset = (uintptr_t) NULL;\n-\t\t\t      /* FIXME: see above FIXME comment.  */\n-\t\t\t      devicep->host2dev_func (devicep->target_id,\n-\t\t\t\t (void *) (tgt->tgt_start + k->tgt_offset\n-\t\t\t\t\t   + ((uintptr_t) hostaddrs[j]\n-\t\t\t\t\t      - k->host_start)),\n-\t\t\t\t (void *) &cur_node.tgt_offset,\n-\t\t\t\t sizeof (void *));\n-\t\t\t      i++;\n-\t\t\t      continue;\n-\t\t\t    }\n-\t\t\t  /* Add bias to the pointer value.  */\n-\t\t\t  cur_node.host_start += sizes[j];\n-\t\t\t  cur_node.host_end = cur_node.host_start + 1;\n-\t\t\t  n = splay_tree_lookup (mem_map, &cur_node);\n-\t\t\t  if (n == NULL)\n-\t\t\t    {\n-\t\t\t      /* Could be possibly zero size array section.  */\n-\t\t\t      cur_node.host_end--;\n-\t\t\t      n = splay_tree_lookup (mem_map, &cur_node);\n-\t\t\t      if (n == NULL)\n-\t\t\t\t{\n-\t\t\t\t  cur_node.host_start--;\n-\t\t\t\t  n = splay_tree_lookup (mem_map, &cur_node);\n-\t\t\t\t  cur_node.host_start++;\n-\t\t\t\t}\n-\t\t\t    }\n-\t\t\t  if (n == NULL)\n-\t\t\t    {\n-\t\t\t      gomp_mutex_unlock (&devicep->lock);\n-\t\t\t      gomp_fatal (\"Pointer target of array section \"\n-\t\t\t\t\t  \"wasn't mapped\");\n-\t\t\t    }\n-\t\t\t  cur_node.host_start -= n->host_start;\n-\t\t\t  cur_node.tgt_offset = n->tgt->tgt_start\n-\t\t\t\t\t\t+ n->tgt_offset\n-\t\t\t\t\t\t+ cur_node.host_start;\n-\t\t\t  /* At this point tgt_offset is target address of the\n-\t\t\t     array section.  Now subtract bias to get what we\n-\t\t\t     want to initialize the pointer with.  */\n-\t\t\t  cur_node.tgt_offset -= sizes[j];\n-\t\t\t  /* FIXME: see above FIXME comment.  */\n-\t\t\t  devicep->host2dev_func (devicep->target_id,\n-\t\t\t     (void *) (tgt->tgt_start + k->tgt_offset\n-\t\t\t\t       + ((uintptr_t) hostaddrs[j]\n-\t\t\t\t\t  - k->host_start)),\n-\t\t\t     (void *) &cur_node.tgt_offset,\n-\t\t\t     sizeof (void *));\n+\t\t\t  gomp_map_pointer (tgt,\n+\t\t\t\t\t    (uintptr_t) *(void **) hostaddrs[j],\n+\t\t\t\t\t    k->tgt_offset\n+\t\t\t\t\t    + ((uintptr_t) hostaddrs[j]\n+\t\t\t\t\t       - k->host_start),\n+\t\t\t\t\t    sizes[j]);\n \t\t\t  i++;\n \t\t\t}\n \t\t    break;"}]}