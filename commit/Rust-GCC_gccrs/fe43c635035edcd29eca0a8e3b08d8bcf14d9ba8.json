{"sha": "fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU0M2M2MzUwMzVlZGNkMjllY2EwYThlM2IwOGQ4YmNmMTRkOWJhOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-04-30T21:21:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-04-30T21:21:32Z"}, "message": "PR c++/84701 - unsigned typeof.\n\n\t* decl.c (grokdeclarator): Overhaul diagnostics for invalid use\n\tof long/short/signed/unsigned.\n\nFrom-SVN: r259780", "tree": {"sha": "68ce143bccd54bdb40859152c8f1686258230203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68ce143bccd54bdb40859152c8f1686258230203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f026530a85c3d13aaebec5c4e96cd0a2f6ef4f17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f026530a85c3d13aaebec5c4e96cd0a2f6ef4f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f026530a85c3d13aaebec5c4e96cd0a2f6ef4f17"}], "stats": {"total": 96, "additions": 62, "deletions": 34}, "files": [{"sha": "65f556e0c7675ff87f6edab7c7d6285157516063", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8", "patch": "@@ -1,5 +1,9 @@\n 2018-04-30  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/84701 - unsigned typeof.\n+\t* decl.c (grokdeclarator): Overhaul diagnostics for invalid use\n+\tof long/short/signed/unsigned.\n+\n \tPR c++/85305 - pack in lambda init-capture.\n \t* parser.c (cp_parser_initializer): Add subexpression_p parm; don't\n \tcheck_for_bare_parameter_packs in a subexpression."}, {"sha": "6f2fe01d83d34b465f5401a435646eea59c4e04f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 49, "deletions": 33, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8", "patch": "@@ -10608,45 +10608,61 @@ grokdeclarator (const cp_declarator *declarator,\n \n   if (unsigned_p || signed_p || long_p || short_p)\n     {\n-      int ok = 0;\n-\n-      if ((signed_p || unsigned_p) && TREE_CODE (type) != INTEGER_TYPE)\n-\terror (\"%<signed%> or %<unsigned%> invalid for %qs\", name);\n-      else if (signed_p && unsigned_p)\n-\terror (\"%<signed%> and %<unsigned%> specified together for %qs\", name);\n-      else if (longlong && TREE_CODE (type) != INTEGER_TYPE)\n-\terror (\"%<long long%> invalid for %qs\", name);\n-      else if (long_p && TREE_CODE (type) == REAL_TYPE)\n-\terror (\"%<long%> invalid for %qs\", name);\n-      else if (short_p && TREE_CODE (type) == REAL_TYPE)\n-\terror (\"%<short%> invalid for %qs\", name);\n-      else if ((long_p || short_p) && TREE_CODE (type) != INTEGER_TYPE)\n-\terror (\"%<long%> or %<short%> invalid for %qs\", name);\n-      else if ((long_p || short_p || explicit_char || explicit_int) && explicit_intN)\n-\terror (\"%<long%>, %<int%>, %<short%>, or %<char%> invalid for %qs\", name);\n-      else if ((long_p || short_p) && explicit_char)\n-\terror (\"%<long%> or %<short%> specified with char for %qs\", name);\n-      else if (long_p && short_p)\n-\terror (\"%<long%> and %<short%> specified together for %qs\", name);\n-      else if (type == char16_type_node || type == char32_type_node)\n+      location_t loc;\n+      const char *key;\n+      if (unsigned_p)\n \t{\n-\t  if (signed_p || unsigned_p)\n-\t    error (\"%<signed%> or %<unsigned%> invalid for %qs\", name);\n-\t  else if (short_p || long_p)\n-\t    error (\"%<short%> or %<long%> invalid for %qs\", name);\n+\t  key = \"unsigned\";\n+\t  loc = declspecs->locations[ds_unsigned];\n \t}\n-      else\n+      else if (signed_p)\n+\t{\n+\t  key = \"signed\";\n+\t  loc = declspecs->locations[ds_signed];\n+\t}\n+      else if (longlong)\n+\t{\n+\t  key = \"long long\";\n+\t  loc = declspecs->locations[ds_long_long];\n+\t}\n+      else if (long_p)\n \t{\n-\t  ok = 1;\n-\t  if (!explicit_int && !defaulted_int && !explicit_char && !explicit_intN && pedantic)\n+\t  key = \"long\";\n+\t  loc = declspecs->locations[ds_long];\n+\t}\n+      else /* if (short_p) */\n+\t{\n+\t  key = \"short\";\n+\t  loc = declspecs->locations[ds_short];\n+\t}\n+\n+      int ok = 0;\n+\n+      if (signed_p && unsigned_p)\n+\terror_at (loc, \"%<signed%> and %<unsigned%> specified together\");\n+      else if (long_p && short_p)\n+\terror_at (loc, \"%<long%> and %<short%> specified together\");\n+      else if (TREE_CODE (type) != INTEGER_TYPE\n+\t       || type == char16_type_node || type == char32_type_node\n+\t       || ((long_p || short_p)\n+\t\t   && (explicit_char || explicit_intN)))\n+\terror_at (loc, \"%qs specified with %qT\", key, type);\n+      else if (!explicit_int && !defaulted_int\n+\t       && !explicit_char && !explicit_intN)\n+\t{\n+\t  if (typedef_decl)\n \t    {\n-\t      pedwarn (input_location, OPT_Wpedantic, \n-\t\t       \"long, short, signed or unsigned used invalidly for %qs\",\n-\t\t       name);\n-\t      if (flag_pedantic_errors)\n-\t\tok = 0;\n+\t      pedwarn (loc, OPT_Wpedantic, \"%qs specified with %qT\",\n+\t\t       key, type);\n+\t      ok = !flag_pedantic_errors;\n \t    }\n+\t  else if (declspecs->decltype_p)\n+\t    error_at (loc, \"%qs specified with %<decltype%>\", key);\n+\t  else\n+\t    error_at (loc, \"%qs specified with %<typeof%>\", key);\n \t}\n+      else\n+\tok = 1;\n \n       /* Discard the type modifiers if they are invalid.  */\n       if (! ok)"}, {"sha": "4d75e938098879e96ae8a8457c950dc83845b5db", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp3.C?ref=fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8", "patch": "@@ -29,7 +29,7 @@ test (A &b, B c)\n \t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   __restrict auto [ t ] = c;\t\t// { dg-error \"invalid use of 'restrict'\" }\n \t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n-  long long auto [ u ] = c;\t\t// { dg-error \"'long long' invalid for 'structured binding'\" }\n+  long long auto [ u ] = c;\t\t// { dg-error \"'long long' specified with 'auto'\" }\n \t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }\n   virtual auto [ v ] = c;\t\t// { dg-error \"'virtual' outside class declaration\" }\n \t\t\t\t\t// { dg-warning \"structured bindings only available with -std=c..17 or -std=gnu..17\" \"\" { target c++14_down } .-1 }"}, {"sha": "820d50d23a3c6e8d9247ba2246147011ebf35d83", "filename": "gcc/testsuite/g++.dg/ext/typeof13.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypeof13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypeof13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftypeof13.C?ref=fe43c635035edcd29eca0a8e3b08d8bcf14d9ba8", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/84701\n+// { dg-options \"-pedantic\" }\n+\n+typedef short foo_t;\n+foo_t s = -1;  /* FFFF */\n+\n+unsigned u = (unsigned foo_t)s;\t       // { dg-warning foo_t }\n+unsigned u2 = (unsigned __typeof(s))s;   // { dg-error typeof }"}]}