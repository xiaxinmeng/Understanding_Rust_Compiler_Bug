{"sha": "7c42a3675c791b2eafae4a352a7d8adbe510e027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M0MmEzNjc1Yzc5MWIyZWFmYWU0YTM1MmE3ZDhhZGJlNTEwZTAyNw==", "commit": {"author": {"name": "James Bowman", "email": "james.bowman@ftdichip.com", "date": "2017-11-02T19:41:02Z"}, "committer": {"name": "James Bowman", "email": "jamesbowman@gcc.gnu.org", "date": "2017-11-02T19:41:02Z"}, "message": "Add FT32B support\n\nFT32B is a new FT32 architecture type. FT32B has a code compression\nscheme which uses linker relaxations. It also has a security option to\nprevent reads from program memory.\n\ngcc/\n\t* config/ft32/ft32.c (ft32_addr_space_legitimate_address_p): increase\n\toffset range for FT32B.\n\t* config/ft32/ft32.h: option \"mcompress\" enables relaxation.\n\t* config/ft32/ft32.md: Add TARGET_NOPM.\n\t* config/ft32/ft32.opt: Add mft32b, mcompress, mnopm.\n\t* gcc/doc/invoke.texi: Add mft32b, mcompress, mnopm.\n\nFrom-SVN: r254351", "tree": {"sha": "b5c73ecc2d4891e100dc689388a3b9472fa967db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5c73ecc2d4891e100dc689388a3b9472fa967db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c42a3675c791b2eafae4a352a7d8adbe510e027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c42a3675c791b2eafae4a352a7d8adbe510e027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c42a3675c791b2eafae4a352a7d8adbe510e027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c42a3675c791b2eafae4a352a7d8adbe510e027/comments", "author": null, "committer": null, "parents": [{"sha": "9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "574793efe794b47a140124e2c57958021b829d5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c42a3675c791b2eafae4a352a7d8adbe510e027", "patch": "@@ -1,3 +1,12 @@\n+2017-11-02  James Bowman  <james.bowman@ftdichip.com>\n+\n+\t* config/ft32/ft32.c (ft32_addr_space_legitimate_address_p): increase\n+\toffset range for FT32B.\n+\t* config/ft32/ft32.h: option \"mcompress\" enables relaxation.\n+\t* config/ft32/ft32.md: Add TARGET_NOPM.\n+\t* config/ft32/ft32.opt: Add mft32b, mcompress, mnopm.\n+\t* gcc/doc/invoke.texi: Add mft32b, mcompress, mnopm.\n+\n 2017-11-02  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.h (MALLOC_ABI_ALIGNMENT): New define."}, {"sha": "d7d41a2f3cae6081894e0d6d84baf86597ea266e", "filename": "gcc/config/ft32/ft32.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fconfig%2Fft32%2Fft32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fconfig%2Fft32%2Fft32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.c?ref=7c42a3675c791b2eafae4a352a7d8adbe510e027", "patch": "@@ -866,6 +866,8 @@ static bool\n ft32_addr_space_legitimate_address_p (machine_mode mode, rtx x, bool strict,\n                                       addr_space_t as ATTRIBUTE_UNUSED)\n {\n+  int max_offset = TARGET_FT32B ? 16384 : 128;\n+\n   if (mode != BLKmode)\n     {\n       if (GET_CODE (x) == PLUS)\n@@ -875,8 +877,9 @@ ft32_addr_space_legitimate_address_p (machine_mode mode, rtx x, bool strict,\n           op2 = XEXP (x, 1);\n           if (GET_CODE (op1) == REG\n               && CONST_INT_P (op2)\n-              && INTVAL (op2) >= -128\n-              && INTVAL (op2) < 128 && reg_ok_for_base_p (op1, strict))\n+              && (-max_offset <= INTVAL (op2))\n+              && (INTVAL (op2) < max_offset)\n+              && reg_ok_for_base_p (op1, strict))\n             goto yes;\n           if (GET_CODE (op1) == SYMBOL_REF && CONST_INT_P (op2))\n             goto yes;"}, {"sha": "8bb0d399a0c2f08e2246120aa92a5f11b0731bfb", "filename": "gcc/config/ft32/ft32.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fconfig%2Fft32%2Fft32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fconfig%2Fft32%2Fft32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.h?ref=7c42a3675c791b2eafae4a352a7d8adbe510e027", "patch": "@@ -39,6 +39,7 @@\n \n #undef LIB_SPEC\n #define LIB_SPEC \"%{!shared:%{!symbolic:-lc}} \\\n+                   %{mcompress:--relax} \\\n                    %{msim:-Tsim.ld}\"\n \n #undef  LINK_SPEC\n@@ -199,12 +200,12 @@ enum reg_class\n \n #define GLOBAL_ASM_OP \"\\t.global\\t\"\n \n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n+#define JUMP_TABLES_IN_TEXT_SECTION (TARGET_NOPM ? 0 : 1)\n \n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n-    fprintf (FILE, \"\\tjmp\\t.L%d\\n\", VALUE);\t\t\t\t\\\n+    fprintf (FILE, \"\\t.long\\t.L%d\\n\", VALUE);\t\t\t\t\\\n \n /* Passing Arguments in Registers */\n \n@@ -469,7 +470,7 @@ do { \\\n #define ADDR_SPACE_PM 1\n \n #define REGISTER_TARGET_PRAGMAS() do { \\\n-  c_register_addr_space (\"__flash__\", ADDR_SPACE_PM); \\\n+  c_register_addr_space (\"__flash__\", TARGET_NOPM ? 0 : ADDR_SPACE_PM); \\\n } while (0);\n \n extern int ft32_is_mem_pm(rtx o);"}, {"sha": "2e772faf72fd588a0d3bc5eba5d48bff2efb9bd2", "filename": "gcc/config/ft32/ft32.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fconfig%2Fft32%2Fft32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fconfig%2Fft32%2Fft32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.md?ref=7c42a3675c791b2eafae4a352a7d8adbe510e027", "patch": "@@ -777,8 +777,12 @@\n    (clobber (match_scratch:SI 2 \"=&r\"))\n   ]\n   \"\"\n-  \"ldk.l\\t$cc,%l1\\;ashl.l\\t%2,%0,2\\;add.l\\t%2,%2,$cc\\;jmpi\\t%2\"\n-  )\n+  {\n+    if (TARGET_NOPM)\n+      return \\\"ldk.l\\t$cc,%l1\\;ashl.l\\t%2,%0,2\\;add.l\\t%2,%2,$cc\\;ldi.l\\t%2,%2,0\\;jmpi\\t%2\\\";\n+    else\n+      return \\\"ldk.l\\t$cc,%l1\\;ashl.l\\t%2,%0,2\\;add.l\\t%2,%2,$cc\\;lpmi.l\\t%2,%2,0\\;jmpi\\t%2\\\";\n+  })\n \n ;; -------------------------------------------------------------------------\n ;; Atomic exchange instruction"}, {"sha": "9e75f3403353ec57ded9542b142fa772e888c78f", "filename": "gcc/config/ft32/ft32.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fconfig%2Fft32%2Fft32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fconfig%2Fft32%2Fft32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.opt?ref=7c42a3675c791b2eafae4a352a7d8adbe510e027", "patch": "@@ -29,3 +29,15 @@ Use LRA instead of reload.\n mnodiv\n Target Report Mask(NODIV)\n Avoid use of the DIV and MOD instructions\n+\n+mft32b\n+Target Report Mask(FT32B)\n+target the FT32B architecture\n+\n+mcompress\n+Target Report Mask(COMPRESS)\n+enable FT32B code compression\n+\n+mnopm\n+Target Report Mask(NOPM)\n+Avoid placing any readable data in program memory"}, {"sha": "e47a0e32b770244cd192d0dc448df7c687af4c45", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c42a3675c791b2eafae4a352a7d8adbe510e027/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7c42a3675c791b2eafae4a352a7d8adbe510e027", "patch": "@@ -743,7 +743,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-msmall-model  -mno-lsim}\n \n @emph{FT32 Options}\n-@gccoptlist{-msim  -mlra  -mnodiv}\n+@gccoptlist{-msim  -mlra  -mnodiv  -mft32b  -mcompress  -mnopm}\n \n @emph{FRV Options}\n @gccoptlist{-mgpr-32  -mgpr-64  -mfpr-32  -mfpr-64 @gol\n@@ -17768,6 +17768,18 @@ so by default the compiler uses standard reload.\n @opindex mnodiv\n Do not use div and mod instructions.\n \n+@item -mft32b\n+@opindex mft32b\n+Enable use of the extended instructions of the FT32B processor.\n+\n+@item -mcompress\n+@opindex mcompress\n+Compress all code using the Ft32B code compression scheme.\n+\n+@item -mnopm\n+@opindex  mnopm\n+Do not generate code that reads program memory.\n+\n @end table\n \n @node FRV Options"}]}