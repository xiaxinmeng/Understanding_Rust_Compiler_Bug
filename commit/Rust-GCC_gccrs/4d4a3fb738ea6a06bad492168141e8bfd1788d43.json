{"sha": "4d4a3fb738ea6a06bad492168141e8bfd1788d43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0YTNmYjczOGVhNmEwNmJhZDQ5MjE2ODE0MWU4YmZkMTc4OGQ0Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-09-17T22:32:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-26T08:59:09Z"}, "message": "[Ada] Relax assertion on Small in Ada.Text_IO.Fixed_IO\n\ngcc/ada/\n\n\t* libgnat/a-tifiio.adb: Change the range of supported Small\n\tvalues.\n\t(E0, E1, E2): Adjust factors.\n\t(Exact): Return false if the Small does not fit in 64 bits.", "tree": {"sha": "0b90f521e82e4fba1554e1e7573bff4410316efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b90f521e82e4fba1554e1e7573bff4410316efc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4a3fb738ea6a06bad492168141e8bfd1788d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4a3fb738ea6a06bad492168141e8bfd1788d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4a3fb738ea6a06bad492168141e8bfd1788d43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4a3fb738ea6a06bad492168141e8bfd1788d43/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d774f68ee399ec3f17549aed9f2d0baeb0ea81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d774f68ee399ec3f17549aed9f2d0baeb0ea81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d774f68ee399ec3f17549aed9f2d0baeb0ea81"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "f48239fd206f1b788bf2110b52c3b933567ed4eb", "filename": "gcc/ada/libgnat/a-tifiio.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4a3fb738ea6a06bad492168141e8bfd1788d43/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4a3fb738ea6a06bad492168141e8bfd1788d43/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-tifiio.adb?ref=4d4a3fb738ea6a06bad492168141e8bfd1788d43", "patch": "@@ -261,10 +261,8 @@ package body Ada.Text_IO.Fixed_IO is\n    --  will not overflow.\n \n    pragma Assert (System.Fine_Delta >= 2.0**(-63));\n-   pragma Assert (Num'Small in 2.0**(-63) .. 2.0**63);\n+   pragma Assert (Num'Small in 2.0**(-80) .. 2.0**80);\n    pragma Assert (Num'Fore <= 37);\n-   --  These assertions need to be relaxed to allow for a Small of\n-   --  2.0**(-64) at least, since there is an ACATS test for this ???\n \n    Max_Digits : constant := 18;\n    --  Maximum number of decimal digits that can be represented in a\n@@ -275,9 +273,9 @@ package body Ada.Text_IO.Fixed_IO is\n    --  decimal point.\n \n    subtype Int is Integer;\n-   E0 : constant Int := -(20 * Boolean'Pos (Num'Small >= 1.0E1));\n-   E1 : constant Int := E0 + 10 * Boolean'Pos (Num'Small * 10.0**E0 < 1.0E-10);\n-   E2 : constant Int := E1 +  5 * Boolean'Pos (Num'Small * 10.0**E1 < 1.0E-5);\n+   E0 : constant Int := -(25 * Boolean'Pos (Num'Small >= 1.0E1));\n+   E1 : constant Int := E0 + 13 * Boolean'Pos (Num'Small * 10.0**E0 < 1.0E-13);\n+   E2 : constant Int := E1 +  6 * Boolean'Pos (Num'Small * 10.0**E1 < 1.0E-6);\n    E3 : constant Int := E2 +  3 * Boolean'Pos (Num'Small * 10.0**E2 < 1.0E-3);\n    E4 : constant Int := E3 +  2 * Boolean'Pos (Num'Small * 10.0**E3 < 1.0E-1);\n    E5 : constant Int := E4 +  1 * Boolean'Pos (Num'Small * 10.0**E4 < 1.0E-0);\n@@ -288,10 +286,12 @@ package body Ada.Text_IO.Fixed_IO is\n                    and then Num'Small * 10.0**Scale < 10.0);\n \n    Exact : constant Boolean :=\n-     Float'Floor (Num'Small) = Float'Ceiling (Num'Small)\n-       or else Float'Floor (1.0 / Num'Small) = Float'Ceiling (1.0 / Num'Small)\n-       or else Num'Small >= 10.0**Max_Digits;\n-   --  True iff a numerator and denominator can be calculated such that\n+     (Float'Floor (Num'Small) = Float'Ceiling (Num'Small)\n+        or else Float'Floor (1.0 / Num'Small) = Float'Ceiling (1.0 / Num'Small)\n+        or else Num'Small >= 10.0**Max_Digits)\n+     and then Num'Small >= 2.0**(-63)\n+     and then Num'Small <= 2.0**63;\n+   --  True iff a 64-bit numerator and denominator can be calculated such that\n    --  their ratio exactly represents the small of Num.\n \n    procedure Put\n@@ -563,7 +563,7 @@ package body Ada.Text_IO.Fixed_IO is\n \n          Q  : array (0 .. N - 1) of Int64 := (others => 0);\n          --  Each element of Q has Max_Digits decimal digits, except the\n-         --  last, which has eAA rem Max_Digits. Only Q (Q'First) may have an\n+         --  last, which has AA rem Max_Digits. Only Q (Q'First) may have an\n          --  absolute value equal to or larger than 10**Max_Digits. Only the\n          --  absolute value of the elements is not significant, not the sign.\n "}]}