{"sha": "0f44b097321c42ba8f9301f369a9799424aa6d46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY0NGIwOTczMjFjNDJiYThmOTMwMWYzNjlhOTc5OTQyNGFhNmQ0Ng==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-02-23T01:20:48Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-08-03T18:58:41Z"}, "message": "rs6000: Add test for _mm_minpos_epu16\n\nCopy the test for _mm_minpos_epu16 from\ngcc/testsuite/gcc.target/i386/sse4_1-phminposuw.c, with\na few adjustments:\n\n- Adjust the dejagnu directives for powerpc platform.\n- Make the data not be monotonically increasing,\n  such that some of the returned values are not\n  always the first value (index 0).\n- Create a list of input data testing various scenarios\n  including more than one minimum value and different\n  orders and indices of the minimum value.\n- Fix a masking issue where the index was being truncated\n  to 2 bits instead of 3 bits, which wasn't found because\n  all of the returned indices were 0 with the original\n  generated data.\n- Support big-endian.\n\n2021-08-03  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-phminposuw.c: Copy from\n\tgcc/testsuite/gcc.target/i386, adjust dg directives to suit,\n\tmake more robust.", "tree": {"sha": "d7cf022bf2180afd7910697fcaa62700c6636a3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7cf022bf2180afd7910697fcaa62700c6636a3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f44b097321c42ba8f9301f369a9799424aa6d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f44b097321c42ba8f9301f369a9799424aa6d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f44b097321c42ba8f9301f369a9799424aa6d46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f44b097321c42ba8f9301f369a9799424aa6d46/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "146df24777a96ab604837bdb5e13e9da0d6d235f", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-phminposuw.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f44b097321c42ba8f9301f369a9799424aa6d46/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-phminposuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f44b097321c42ba8f9301f369a9799424aa6d46/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-phminposuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-phminposuw.c?ref=0f44b097321c42ba8f9301f369a9799424aa6d46", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mvsx -Wno-psabi\" } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define DIM(a) (sizeof (a) / sizeof (a)[0])\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x;\n+      unsigned short s[8];\n+    } src[] =\n+    {\n+      { .s = { 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 } },\n+      { .s = { 0x0000, 0xffff, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 } },\n+      { .s = { 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0xffff, 0x0000, 0xffff } },\n+      { .s = { 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008 } },\n+      { .s = { 0x0008, 0x0007, 0x0006, 0x0005, 0x0004, 0x0003, 0x0002, 0x0001 } },\n+      { .s = { 0xfff4, 0xfff3, 0xfff2, 0xfff1, 0xfff3, 0xfff1, 0xfff2, 0xfff3 } }\n+    };\n+  unsigned short minVal[DIM (src)];\n+  int minInd[DIM (src)];\n+  unsigned short minValScalar, minIndScalar;\n+  int i, j;\n+  union\n+    {\n+      int si;\n+      unsigned short s[2];\n+    } res;\n+\n+  for (i = 0; i < DIM (src); i++)\n+    {\n+      res.si = _mm_cvtsi128_si32 (_mm_minpos_epu16 (src[i].x));\n+      minVal[i] = res.s[0];\n+      minInd[i] = res.s[1] & 0b111;\n+    }\n+\n+  for (i = 0; i < DIM (src); i++)\n+    {\n+      minValScalar = src[i].s[0];\n+      minIndScalar = 0;\n+\n+      for (j = 1; j < 8; j++)\n+\tif (minValScalar > src[i].s[j])\n+\t  {\n+\t    minValScalar = src[i].s[j];\n+\t    minIndScalar = j;\n+\t  }\n+\n+      if (minValScalar != minVal[i] && minIndScalar != minInd[i])\n+\tabort ();\n+    }\n+}"}]}