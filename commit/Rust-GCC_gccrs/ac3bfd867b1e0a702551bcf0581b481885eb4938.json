{"sha": "ac3bfd867b1e0a702551bcf0581b481885eb4938", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMzYmZkODY3YjFlMGE3MDI1NTFiY2YwNTgxYjQ4MTg4NWViNDkzOA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-12-24T05:23:10Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-12-24T05:23:10Z"}, "message": "re PR tree-optimization/14638 (Variables disappear from debug info at -O1)\n\n2004-12-24  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR debug/14638\n\n\t* tree.h (DECL_DEBUG_ALIAS_OF): New macro.\n\t* var-tracking.c (track_expr_p): Don't disqualify tracking of variables\n\tthat are aliases of variables we want to track, unless the\n\toriginal variable is also ignored for debugging purposes.\n\t(VARIABLE_HASH_VAL): Use DECL_UID, so that this is deterministic.\n \t* tree-outof-ssa.c (create_temp): Note who we are a debug alias of.\n\t* dwarf2out.c (dwarf2out_var_location): Add us to the location of\n\tthe decl we are an alias of.\n\nFrom-SVN: r92585", "tree": {"sha": "a627db8a80c09e929338b90c21134a1193390049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a627db8a80c09e929338b90c21134a1193390049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac3bfd867b1e0a702551bcf0581b481885eb4938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3bfd867b1e0a702551bcf0581b481885eb4938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3bfd867b1e0a702551bcf0581b481885eb4938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3bfd867b1e0a702551bcf0581b481885eb4938/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1c42f20d6c2ac53feefd4ba02febe6c3ff4d992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c42f20d6c2ac53feefd4ba02febe6c3ff4d992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c42f20d6c2ac53feefd4ba02febe6c3ff4d992"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "0bd56df349661398c63896e13a24b2012b060b15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac3bfd867b1e0a702551bcf0581b481885eb4938", "patch": "@@ -1,3 +1,16 @@\n+2004-12-24  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\tFix PR debug/14638\n+\n+\t* tree.h (DECL_DEBUG_ALIAS_OF): New macro.\n+\t* var-tracking.c (track_expr_p): Don't disqualify tracking of variables\n+\tthat are aliases of variables we want to track, unless the\n+\toriginal variable is also ignored for debugging purposes.\n+\t(VARIABLE_HASH_VAL): Use DECL_UID, so that this is deterministic.\n+ \t* tree-outof-ssa.c (create_temp): Note who we are a debug alias of.\n+\t* dwarf2out.c (dwarf2out_var_location): Add us to the location of\n+\tthe decl we are an alias of.\n+\n 2004-12-24  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/19142"}, {"sha": "26174ec1c51bd8a2174d77d5077062dd8170bd7a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ac3bfd867b1e0a702551bcf0581b481885eb4938", "patch": "@@ -13037,6 +13037,7 @@ dwarf2out_var_location (rtx loc_note)\n   rtx prev_insn;\n   static rtx last_insn;\n   static const char *last_label;\n+  tree decl;\n \n   if (!DECL_P (NOTE_VAR_LOCATION_DECL (loc_note)))\n     return;\n@@ -13065,8 +13066,10 @@ dwarf2out_var_location (rtx loc_note)\n \n   last_insn = loc_note;\n   last_label = newloc->label;\n-\n-  add_var_loc_to_decl (NOTE_VAR_LOCATION_DECL (loc_note), newloc);\n+  decl = NOTE_VAR_LOCATION_DECL (loc_note);\n+  if (DECL_DEBUG_ALIAS_OF (decl))\n+    decl = DECL_DEBUG_ALIAS_OF (decl); \n+  add_var_loc_to_decl (decl, newloc);\n }\n \n /* We need to reset the locations at the beginning of each"}, {"sha": "a5fc99309a5aad14e30e39ac6422229729f1e237", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=ac3bfd867b1e0a702551bcf0581b481885eb4938", "patch": "@@ -156,6 +156,11 @@ create_temp (tree t)\n   if (name == NULL)\n     name = \"temp\";\n   tmp = create_tmp_var (type, name);\n+\n+  if (DECL_DEBUG_ALIAS_OF (t))\n+    DECL_DEBUG_ALIAS_OF (tmp) = DECL_DEBUG_ALIAS_OF (t);  \n+  else if (!DECL_IGNORED_P (t))\n+    DECL_DEBUG_ALIAS_OF (tmp) = t;\n   DECL_ARTIFICIAL (tmp) = DECL_ARTIFICIAL (t);\n   add_referenced_tmp_var (tmp);\n "}, {"sha": "0858670609c7ac2e02f20edfe077f944cf6d319d", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ac3bfd867b1e0a702551bcf0581b481885eb4938", "patch": "@@ -2014,6 +2014,10 @@ struct tree_binfo GTY (())\n    writing debugging information about vfield and vbase decls for C++.  */\n #define DECL_FCONTEXT(NODE) (FIELD_DECL_CHECK (NODE)->decl.vindex)\n \n+/* For VAR_DECL, this is set to the variable we were split from, due to\n+   optimization. */\n+#define DECL_DEBUG_ALIAS_OF(NODE) (DECL_CHECK (NODE)->decl.vindex)\n+\n /* Every ..._DECL node gets a unique number.  */\n #define DECL_UID(NODE) (DECL_CHECK (NODE)->decl.uid)\n "}, {"sha": "ef9f9dcc5d6bf79ca867bf0f93cd75b1afe6d43f", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac3bfd867b1e0a702551bcf0581b481885eb4938/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=ac3bfd867b1e0a702551bcf0581b481885eb4938", "patch": "@@ -244,7 +244,7 @@ typedef struct variable_def\n } *variable;\n \n /* Hash function for DECL for VARIABLE_HTAB.  */\n-#define VARIABLE_HASH_VAL(decl) ((size_t) (decl))\n+#define VARIABLE_HASH_VAL(decl) (DECL_UID (decl))\n \n /* Pointer to the BB's information specific to variable tracking pass.  */\n #define VTI(BB) ((variable_tracking_info) (BB)->aux)\n@@ -1441,6 +1441,7 @@ static bool\n track_expr_p (tree expr)\n {\n   rtx decl_rtl;\n+  tree realdecl;\n \n   /* If EXPR is not a parameter or a variable do not track it.  */\n   if (TREE_CODE (expr) != VAR_DECL && TREE_CODE (expr) != PARM_DECL)\n@@ -1454,14 +1455,22 @@ track_expr_p (tree expr)\n   decl_rtl = DECL_RTL_IF_SET (expr);\n   if (!decl_rtl)\n     return 0;\n-\n-  /* Do not track EXPR if it should be ignored for debugging purposes.  */\n-  if (DECL_IGNORED_P (expr))\n+  \n+  /* If this expression is really a debug alias of some other declaration, we \n+     don't need to track this expression if the ultimate declaration is\n+     ignored.  */\n+  realdecl = expr;\n+  if (DECL_DEBUG_ALIAS_OF (realdecl))\n+    realdecl = DECL_DEBUG_ALIAS_OF  (realdecl);\n+\n+  /* Do not track EXPR if REALDECL it should be ignored for debugging\n+     purposes.  */ \n+  if (DECL_IGNORED_P (realdecl))\n     return 0;\n \n   /* Do not track global variables until we are able to emit correct location\n      list for them.  */\n-  if (TREE_STATIC (expr))\n+  if (TREE_STATIC (realdecl))\n     return 0;\n \n   /* When the EXPR is a DECL for alias of some variable (see example)"}]}