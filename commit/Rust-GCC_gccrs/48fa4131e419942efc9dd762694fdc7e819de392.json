{"sha": "48fa4131e419942efc9dd762694fdc7e819de392", "node_id": "C_kwDOANBUbNoAKDQ4ZmE0MTMxZTQxOTk0MmVmYzlkZDc2MjY5NGZkYzdlODE5ZGUzOTI", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-11-07T03:21:14Z"}, "committer": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2022-11-07T03:21:17Z"}, "message": "i386: Prefer remote atomic insn for atomic_fetch{add, and, or, xor}\n\nAdd flag -mprefer-remote-atomic to control whether to generate raoint\ninsn for atomic operations.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.opt:Add -mprefer-remote-atomic.\n\t* config/i386/sync.md (atomic_<plus_logic><mode>):\n\tNew define_expand.\n\t(atomic_add<mode>): Rename to below one.\n\t(atomic_add<mode>_1): To this.\n\t(atomic_<logic><mode>): Ditto.\n\t(atomic_<logic><mode>_1): Ditto.\n\t* doc/invoke.texi: Add -mprefer-remote-atomic.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/raoint-atomic-fetch.c: New test.", "tree": {"sha": "328441a50522b2b07e240a1c34eae4c44057347e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/328441a50522b2b07e240a1c34eae4c44057347e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48fa4131e419942efc9dd762694fdc7e819de392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48fa4131e419942efc9dd762694fdc7e819de392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48fa4131e419942efc9dd762694fdc7e819de392", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48fa4131e419942efc9dd762694fdc7e819de392/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf1c61995f5221edf51bb7f34e4b000fe558753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf1c61995f5221edf51bb7f34e4b000fe558753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf1c61995f5221edf51bb7f34e4b000fe558753"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "abb1e5ecbdce5f3abe8ef14b9c1099fb3cb1229a", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fa4131e419942efc9dd762694fdc7e819de392/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fa4131e419942efc9dd762694fdc7e819de392/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=48fa4131e419942efc9dd762694fdc7e819de392", "patch": "@@ -1246,3 +1246,7 @@ Support PREFETCHI built-in functions and code generation.\n mraoint\n Target Mask(ISA2_RAOINT) Var(ix86_isa_flags2) Save\n Support RAOINT built-in functions and code generation.\n+\n+mprefer-remote-atomic\n+Target Var(flag_prefer_remote_atomic) Init(0)\n+Prefer use remote atomic insn for atomic operations."}, {"sha": "250899160c3ef5ee098e6eced4d856781a58c011", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fa4131e419942efc9dd762694fdc7e819de392/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fa4131e419942efc9dd762694fdc7e819de392/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=48fa4131e419942efc9dd762694fdc7e819de392", "patch": "@@ -791,7 +791,28 @@\n (define_code_iterator any_plus_logic [and ior xor plus])\n (define_code_attr plus_logic [(and \"and\") (ior \"or\") (xor \"xor\") (plus \"add\")])\n \n-(define_insn \"rao_a<plus_logic><mode>\"\n+(define_expand \"atomic_<plus_logic><mode>\"\n+  [(match_operand:SWI 0 \"memory_operand\")\n+   (any_plus_logic:SWI (match_dup 0)\n+                      (match_operand:SWI 1 \"nonmemory_operand\"))\n+   (match_operand:SI 2 \"const_int_operand\")]\n+  \"\"\n+{\n+  if (flag_prefer_remote_atomic\n+      && TARGET_RAOINT && operands[2] == const0_rtx\n+      && (<MODE>mode == SImode || <MODE>mode == DImode))\n+  {\n+    if (CONST_INT_P (operands[1]))\n+      operands[1] = force_reg (<MODE>mode, operands[1]);\n+    emit_insn (maybe_gen_rao_a (<CODE>, <MODE>mode, operands[0], operands[1]));\n+  }\n+  else\n+    emit_insn (gen_atomic_<plus_logic><mode>_1 (operands[0], operands[1],\n+\t\t\t\t\t\toperands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"@rao_a<plus_logic><mode>\"\n   [(set (match_operand:SWI48 0 \"memory_operand\" \"+m\")\n        (unspec_volatile:SWI48\n          [(any_plus_logic:SWI48 (match_dup 0)\n@@ -801,7 +822,7 @@\n   \"TARGET_RAOINT\"\n   \"a<plus_logic>\\t{%1, %0|%0, %1}\")\n \n-(define_insn \"atomic_add<mode>\"\n+(define_insn \"atomic_add<mode>_1\"\n   [(set (match_operand:SWI 0 \"memory_operand\" \"+m\")\n \t(unspec_volatile:SWI\n \t  [(plus:SWI (match_dup 0)\n@@ -855,7 +876,7 @@\n   return \"lock{%;} %K2sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n-(define_insn \"atomic_<logic><mode>\"\n+(define_insn \"atomic_<logic><mode>_1\"\n   [(set (match_operand:SWI 0 \"memory_operand\" \"+m\")\n \t(unspec_volatile:SWI\n \t  [(any_logic:SWI (match_dup 0)"}, {"sha": "fa6adfdd683cc815c9b812dd972df81cbd61efb1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fa4131e419942efc9dd762694fdc7e819de392/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fa4131e419942efc9dd762694fdc7e819de392/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=48fa4131e419942efc9dd762694fdc7e819de392", "patch": "@@ -1438,7 +1438,7 @@ See RS/6000 and PowerPC Options.\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 @gol\n--mprefetchi -mraoint @gol\n+-mprefetchi -mraoint -mprefer-remote-atomic@gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -33666,6 +33666,10 @@ execute pause if load value is not expected. This reduces excessive\n cachline bouncing when and works for all atomic logic fetch builtins\n that generates compare and swap loop.\n \n+@item -mprefer-remote-atomic\n+@opindex mprefer-remote-atomic\n+Prefer use remote atomic insn for atomic operations.\n+\n @item -mindirect-branch=@var{choice}\n @opindex mindirect-branch\n Convert indirect call and jump with @var{choice}.  The default is"}, {"sha": "ac4099d888e0b4b78021a769e5779da942dfda8f", "filename": "gcc/testsuite/gcc.target/i386/raoint-atomic-fetch.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fa4131e419942efc9dd762694fdc7e819de392/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-atomic-fetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fa4131e419942efc9dd762694fdc7e819de392/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-atomic-fetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fraoint-atomic-fetch.c?ref=48fa4131e419942efc9dd762694fdc7e819de392", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mraoint -O2 -mprefer-remote-atomic\" } */\n+/* { dg-final { scan-assembler-times \"aadd\" 2 { target {! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"aand\" 2 { target {! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"aor\" 2 { target {! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"axor\" 2 { target {! ia32 } } } } */\n+/* { dg-final { scan-assembler-times \"aadd\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"aand\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"aor\" 1 { target ia32 } } } */\n+/* { dg-final { scan-assembler-times \"axor\" 1 { target ia32 } } } */\n+volatile int x;\n+volatile long long y;\n+int *a;\n+long long *b;\n+\n+void extern\n+rao_int_test (void)\n+{\n+  __atomic_add_fetch (a, x, __ATOMIC_RELAXED);\n+  __atomic_and_fetch (a, x, __ATOMIC_RELAXED);\n+  __atomic_or_fetch (a, x, __ATOMIC_RELAXED);\n+  __atomic_xor_fetch (a, x, __ATOMIC_RELAXED);\n+#ifdef __x86_64__\n+  __atomic_add_fetch (b, y, __ATOMIC_RELAXED);\n+  __atomic_and_fetch (b, y, __ATOMIC_RELAXED);\n+  __atomic_or_fetch (b, y, __ATOMIC_RELAXED);\n+  __atomic_xor_fetch (b, y, __ATOMIC_RELAXED);\n+#endif\n+}"}]}