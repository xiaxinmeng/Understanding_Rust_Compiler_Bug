{"sha": "583722ee5836f737b0a05f915d6d4ffc095565f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgzNzIyZWU1ODM2ZjczN2IwYTA1ZjkxNWQ2ZDRmZmMwOTU1NjVmOQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-04-20T16:16:28Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-04-20T16:16:28Z"}, "message": "ChangeLog gcc/\n\n2011-04-20  Kai Tietz  <ktietz@redhat.com>\n\n\t* fold-const.c (fold_binary_loc): Add handling for\n\t(X & ~Y) | (~X & Y) and (X && !Y) | (!X && Y) optimization\n\tto (X ^ Y).\n\nChangeLog gcc/testsuite\n\n2011-04-20  Kai Tietz  <ktietz@redhat.com>\n\n\t* gcc.dg/binio-xor1.c: New test.\n\t* gcc.dg/binio-xor2.c: New test.\n\t* gcc.dg/binio-xor3.c: New test.\n\t* gcc.dg/binio-xor4.c: New test.\n\t* gcc.dg/binio-xor5.c: New test.\n\nFrom-SVN: r172776", "tree": {"sha": "946228850bcada56ffd10a40a2a1dfe0ba959199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/946228850bcada56ffd10a40a2a1dfe0ba959199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/583722ee5836f737b0a05f915d6d4ffc095565f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583722ee5836f737b0a05f915d6d4ffc095565f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/583722ee5836f737b0a05f915d6d4ffc095565f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/583722ee5836f737b0a05f915d6d4ffc095565f9/comments", "author": null, "committer": null, "parents": [{"sha": "422c0989b5a4470dabec04c3795eafec7015c2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/422c0989b5a4470dabec04c3795eafec7015c2ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/422c0989b5a4470dabec04c3795eafec7015c2ff"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "cdb4d3ba4968b56fb28b25962ee82531dd304462", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=583722ee5836f737b0a05f915d6d4ffc095565f9", "patch": "@@ -1,3 +1,9 @@\n+2011-04-20  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* fold-const.c (fold_binary_loc): Add handling for\n+\t(X & ~Y) | (~X & Y) and (X && !Y) | (!X && Y) optimization\n+\tto (X ^ Y).\n+\n 2011-04-20  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/arm/arm.c (arm_gen_constant): Remove redundant can_invert."}, {"sha": "c4bf08819b38002087f4619c5336768da7cdd4f9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=583722ee5836f737b0a05f915d6d4ffc095565f9", "patch": "@@ -10660,6 +10660,28 @@ fold_binary_loc (location_t loc,\n \t  && reorder_operands_p (arg0, TREE_OPERAND (arg1, 0)))\n \treturn omit_one_operand_loc (loc, type, arg0, TREE_OPERAND (arg1, 0));\n \n+      /* (X & ~Y) | (~X & Y) is X ^ Y */\n+      if (TREE_CODE (arg0) == BIT_AND_EXPR\n+\t  && TREE_CODE (arg1) == BIT_AND_EXPR)\n+        {\n+\t  tree a0, a1, l0, l1, n0, n1;\n+\n+\t  a0 = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 0));\n+\t  a1 = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 1));\n+\n+\t  l0 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n+\t  l1 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 1));\n+\t  \n+\t  n0 = fold_build1_loc (loc, BIT_NOT_EXPR, type, l0);\n+\t  n1 = fold_build1_loc (loc, BIT_NOT_EXPR, type, l1);\n+\t  \n+\t  if ((operand_equal_p (n0, a0, 0)\n+\t       && operand_equal_p (n1, a1, 0))\n+\t      || (operand_equal_p (n0, a1, 0)\n+\t\t  && operand_equal_p (n1, a0, 0)))\n+\t    return fold_build2_loc (loc, BIT_XOR_EXPR, type, l0, n1);\n+\t}\n+\n       t1 = distribute_bit_expr (loc, code, type, arg0, arg1);\n       if (t1 != NULL_TREE)\n \treturn t1;\n@@ -12039,6 +12061,27 @@ fold_binary_loc (location_t loc,\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \treturn omit_one_operand_loc (loc, type, integer_one_node, arg0);\n \n+      /* (X && !Y) || (!X && Y) is X ^ Y */\n+      if (TREE_CODE (arg0) == TRUTH_AND_EXPR\n+\t  && TREE_CODE (arg1) == TRUTH_AND_EXPR)\n+        {\n+\t  tree a0, a1, l0, l1, n0, n1;\n+\n+\t  a0 = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 0));\n+\t  a1 = fold_convert_loc (loc, type, TREE_OPERAND (arg1, 1));\n+\n+\t  l0 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 0));\n+\t  l1 = fold_convert_loc (loc, type, TREE_OPERAND (arg0, 1));\n+\t  \n+\t  n0 = fold_build1_loc (loc, TRUTH_NOT_EXPR, type, l0);\n+\t  n1 = fold_build1_loc (loc, TRUTH_NOT_EXPR, type, l1);\n+\t  \n+\t  if ((operand_equal_p (n0, a0, 0)\n+\t       && operand_equal_p (n1, a1, 0))\n+\t      || (operand_equal_p (n0, a1, 0)\n+\t\t  && operand_equal_p (n1, a0, 0)))\n+\t    return fold_build2_loc (loc, TRUTH_XOR_EXPR, type, l0, n1);\n+\t}\n       goto truth_andor;\n \n     case TRUTH_XOR_EXPR:"}, {"sha": "95646de029a4d1cd2e2329adad5541def286bc05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=583722ee5836f737b0a05f915d6d4ffc095565f9", "patch": "@@ -1,3 +1,11 @@\n+2011-04-20  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* gcc.dg/binio-xor1.c: New test.\n+\t* gcc.dg/binio-xor2.c: New test.\n+\t* gcc.dg/binio-xor3.c: New test.\n+\t* gcc.dg/binio-xor4.c: New test.\n+\t* gcc.dg/binio-xor5.c: New test.\n+\n 2011-04-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/47892"}, {"sha": "7e46286468d3cb36bd1ce3b64b25ec85ff4c3f35", "filename": "gcc/testsuite/gcc.dg/binop-xor1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c?ref=583722ee5836f737b0a05f915d6d4ffc095565f9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (int a, int b, int c)\n+{\n+  return ((a && !b && c) || (!a && b && c));\n+}\n+\n+/* We expect to see \"<bb N>\"; confirm that, so that we know to count\n+   it in the real test.  */\n+/* { dg-final { scan-tree-dump-times \"<bb\\[^>\\]*>\" 5 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\^\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "369b3502b5257c6dd28bf0fd9e7ddd65e48b15a7", "filename": "gcc/testsuite/gcc.dg/binop-xor2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor2.c?ref=583722ee5836f737b0a05f915d6d4ffc095565f9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (int a, int b)\n+{\n+  return ((a & ~b) | (~a & b));\n+}\n+\n+/* We expect to see \"<bb N>\"; confirm that, so that we know to count\n+   it in the real test.  */\n+/* { dg-final { scan-tree-dump-times \"<bb\\[^>\\]*>\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\^\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "ef4b82f4e39ae22afbe2176d6bb6bf07be6ce30d", "filename": "gcc/testsuite/gcc.dg/binop-xor3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor3.c?ref=583722ee5836f737b0a05f915d6d4ffc095565f9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (int a, int b)\n+{\n+  return ((a && !b) || (!a && b));\n+}\n+\n+/* We expect to see \"<bb N>\"; confirm that, so that we know to count\n+   it in the real test.  */\n+/* { dg-final { scan-tree-dump-times \"<bb\\[^>\\]*>\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\^\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "af228d966483a7a796693cba66a994f0c2f24672", "filename": "gcc/testsuite/gcc.dg/binop-xor4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor4.c?ref=583722ee5836f737b0a05f915d6d4ffc095565f9", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (int a, int b, int c)\n+{\n+  return ((a & ~b) | (~a & b)) & c;\n+}\n+\n+/* We expect to see \"<bb N>\"; confirm that, so that we know to count\n+   it in the real test.  */\n+/* { dg-final { scan-tree-dump-times \"<bb\\[^>\\]*>\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\^\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "5f2b8df1accb17b71bb3b92484a28569620dc147", "filename": "gcc/testsuite/gcc.dg/binop-xor5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/583722ee5836f737b0a05f915d6d4ffc095565f9/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor5.c?ref=583722ee5836f737b0a05f915d6d4ffc095565f9", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int\n+foo (int a, int b, int c)\n+{\n+  return ((a & ~b & c) | (~a & b & c));\n+}\n+\n+/* We expect to see \"<bb N>\"; confirm that, so that we know to count\n+   it in the real test.  */\n+/* { dg-final { scan-tree-dump-times \"<bb\\[^>\\]*>\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\^\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\&\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}]}