{"sha": "64e8f3613227827e9f1c5b2e062902209891e0b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRlOGYzNjEzMjI3ODI3ZTlmMWM1YjJlMDYyOTAyMjA5ODkxZTBiNw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-10-10T22:00:29Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-10-10T22:00:29Z"}, "message": "howto.html: Write #5, char_traits.\n\n2002-10-10  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* docs/html/21_strings/howto.html:  Write #5, char_traits.\n\t* docs/html/17_intro/porting.texi:  Expand on os_include_dir.\n\t* docs/html/17_intro/porting.html:  Regenerate.\n\nFrom-SVN: r58031", "tree": {"sha": "59fdd3d0628899e052594d2801f4b8123853df67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59fdd3d0628899e052594d2801f4b8123853df67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64e8f3613227827e9f1c5b2e062902209891e0b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e8f3613227827e9f1c5b2e062902209891e0b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e8f3613227827e9f1c5b2e062902209891e0b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e8f3613227827e9f1c5b2e062902209891e0b7/comments", "author": null, "committer": null, "parents": [{"sha": "9785f1d9c3cb4155b18c7ed2d187461637ff6196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9785f1d9c3cb4155b18c7ed2d187461637ff6196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9785f1d9c3cb4155b18c7ed2d187461637ff6196"}], "stats": {"total": 99, "additions": 84, "deletions": 15}, "files": [{"sha": "d3e936ae1df6360cb77c3ed2fd23959bacc822c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e8f3613227827e9f1c5b2e062902209891e0b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e8f3613227827e9f1c5b2e062902209891e0b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=64e8f3613227827e9f1c5b2e062902209891e0b7", "patch": "@@ -1,3 +1,9 @@\n+2002-10-10  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* docs/html/21_strings/howto.html:  Write #5, char_traits.\n+\t* docs/html/17_intro/porting.texi:  Expand on os_include_dir.\n+\t* docs/html/17_intro/porting.html:  Regenerate.\n+\n 2002-10-09  Benjamin Kosnik  <bkoz@redhat.com>\t\n \n \t* src/locale.cc: Fix comments, move ctors together."}, {"sha": "c28f89f407f898bfd5d28c76617318229997301c", "filename": "libstdc++-v3/docs/html/17_intro/porting.html", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e8f3613227827e9f1c5b2e062902209891e0b7/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e8f3613227827e9f1c5b2e062902209891e0b7/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.html?ref=64e8f3613227827e9f1c5b2e062902209891e0b7", "patch": "@@ -68,12 +68,13 @@ <h2>Operating system</h2>\n directory under <code>config/os</code> to store the files for your operating\n system.\n \n-<p>You'll have to change the <code>configure.target</code> file to ensure that\n-your new directory is activated.  Look for the switch statement that\n-sets <code>os_include_dir</code>, and add a pattern to handle your operating\n-system.  The switch statement switches on only the OS portion of the\n-standard target triplet; e.g., the <code>solaris2.8</code> in\n-<code>sparc-sun-solaris2.8</code>.\n+<p>You might have to change the <code>configure.target</code> file to ensure that\n+your new directory is activated.  Look for the switch statement that sets\n+<code>os_include_dir</code>, and add a pattern to handle your operating system\n+if the default will not suffice.  The switch statement switches on only\n+the OS portion of the standard target triplet; e.g., the <code>solaris2.8</code>\n+in <code>sparc-sun-solaris2.8</code>.  If the new directory is named after the\n+OS portion of the triplet (the default), then nothing needs to be changed.\n \n <p>The first file to create in this directory, should be called\n <code>os_defines.h</code>.  This file contains basic macro definitions"}, {"sha": "6c6ec1f7f48d13058aeb1ced90bf2afe756e4eb2", "filename": "libstdc++-v3/docs/html/17_intro/porting.texi", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e8f3613227827e9f1c5b2e062902209891e0b7/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e8f3613227827e9f1c5b2e062902209891e0b7/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi?ref=64e8f3613227827e9f1c5b2e062902209891e0b7", "patch": "@@ -102,12 +102,13 @@ directory.  The important information is that there needs to be a\n directory under @file{config/os} to store the files for your operating\n system.\n \n-You'll have to change the @file{configure.target} file to ensure that\n-your new directory is activated.  Look for the switch statement that\n-sets @code{os_include_dir}, and add a pattern to handle your operating\n-system.  The switch statement switches on only the OS portion of the\n-standard target triplet; e.g., the @code{solaris2.8} in\n-@code{sparc-sun-solaris2.8}.\n+You might have to change the @file{configure.target} file to ensure that\n+your new directory is activated.  Look for the switch statement that sets\n+@code{os_include_dir}, and add a pattern to handle your operating system\n+if the default will not suffice.  The switch statement switches on only\n+the OS portion of the standard target triplet; e.g., the @code{solaris2.8}\n+in @code{sparc-sun-solaris2.8}.  If the new directory is named after the\n+OS portion of the triplet (the default), then nothing needs to be changed.\n \n The first file to create in this directory, should be called\n @file{os_defines.h}.  This file contains basic macro definitions"}, {"sha": "4a8006d38e19c90175c6b3c6bf5728cf14a40578", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64e8f3613227827e9f1c5b2e062902209891e0b7/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64e8f3613227827e9f1c5b2e062902209891e0b7/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=64e8f3613227827e9f1c5b2e062902209891e0b7", "patch": "@@ -340,15 +340,76 @@ <h2><a name=\"4\">Simple transformations</a></h2>\n \n <hr />\n <h2><a name=\"5\">Making strings of arbitrary character types</a></h2>\n-   <p>how to work with char_traits -- in the archives, just need to\n-      go through and pull the examples together\n+   <p>The <code>std::basic_string</code> is tantalizingly general, in that\n+      it is parameterized on the type of the characters which it holds.\n+      In theory, you could whip up a Unicode character class and instantiate\n+      <code>std::basic_string&lt;my_unicode_char&gt;</code>, or assuming\n+      that integers are wider than characters on your platform, maybe just\n+      declare variables of type <code>std::basic_string&lt;int&gt;</code>.\n+   </p>\n+   <p>That's the theory.  Remember however that basic_string has additional\n+      type parameters, which take default arguments based on the character\n+      type (called CharT here):\n+      <pre>\n+      template &lt;typename CharT,\n+                typename Traits = char_traits&lt;CharT&gt;,\n+                typename Alloc = allocator&lt;CharT&gt; &gt;\n+      class basic_string { .... };</pre>\n+      Now, <code>allocator&lt;CharT&gt;</code> will probably Do The Right\n+      Thing by default, unless you need to do something very strange with\n+      memory allocation in your characters.\n+   </p>\n+   <p>But <code>char_traits</code> takes more work.  The char_traits\n+      template is <em>declared</em> but not <em>defined</em>.\n+      That means there is only\n+      <pre>\n+      template &lt;typename CharT&gt;\n+        struct char_traits\n+        {\n+            static void foo (type1 x, type2 y);\n+            ...\n+        };</pre>\n+      and functions such as char_traits&lt;CharT&gt;::foo() are not\n+      actually defined anywhere for the general case.  The C++ standard\n+      permits this, because writing such a definition to fit all possible\n+      CharT's cannot be done.  (For a time, in earlier versions of GCC,\n+      there was a mostly-correct implementation that let programmers be\n+      lazy.  :-)  But it broke under many situations, so it was removed.\n+      You are no longer allowed to be lazy and non-portable.)\n+   </p>\n+   <p>The C++ standard also requires that char_traits be specialized for\n+      instantiations of <code>char</code> and <code>wchar_t</code>, and it\n+      is these template specializations that permit entities like\n+      <code>basic_string&lt;char,char_traits&lt;char&gt;&gt;</code> to work.\n+   </p>\n+   <p>If you want to use character types other than char and wchar_t,\n+      such as <code>unsigned char</code> and <code>int</code>, you will\n+      need to write specializations for them at the present time.  If you\n+      want to use your own special character class, then you have\n+      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00163.html\">a lot\n+      of work to do</a>, especially if you with to use i18n features\n+      (facets require traits information but don't have a traits argument).\n+   </p>\n+   <p>One example of how to specialize char_traits is given\n+      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00260.html\">in\n+      this message</a>.  We agree that the way it's used with basic_string\n+      (scroll down to main()) doesn't look nice, but that's because\n+      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00236.html\">the\n+      nice-looking first attempt</a> turned out to\n+      <a href=\"http://gcc.gnu.org/ml/libstdc++/2002-08/msg00242.html\">not\n+      be conforming C++</a>, due to the rule that CharT must be a POD.\n+      (See how tricky this is?)\n+   </p>\n+   <p>Other approaches were suggested in that same thread, such as providing\n+      more specializations and/or some helper types in the library to assist\n+      users writing such code.  So far nobody has had the time...\n+      <a href=\"../17_intro/contribute.html\">do you?</a>\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n    </p>\n \n \n-\n <!-- ####################################################### -->\n \n <hr />"}]}