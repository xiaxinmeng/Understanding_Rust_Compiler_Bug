{"sha": "1d3155fc2e6bcaf799aec31fe75c868dc2d0391b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzMTU1ZmMyZTZiY2FmNzk5YWVjMzFmZTc1Yzg2OGRjMmQwMzkxYg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2008-07-04T02:32:01Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2008-07-04T02:32:01Z"}, "message": "re PR target/36634 (-msecure-plt combine gives invalid call insn)\n\n\tPR target/36634\n\t* config/rs6000/rs6000.md (call, call_value): Don't arrange for\n\tpic_offset_table_rtx to be marked as used here.\n\t(call_nonlocal_sysv, call_value_nonlocal_sysv): Add split for\n\tTARGET_SECURE_PLT to \"use\" pic_offset_table_rtx.\n\t(call_nonlocal_sysv_secure, call_value_nonlocal_sysv_secure): New insn.\n\t(sibcall_nonlocal_sysv, sibcall_value_nonlocal_sysv): Assert\n\t!TARGET_SECURE_PLT.\n\nFrom-SVN: r137447", "tree": {"sha": "06103566f1f3da55926dc539b33b52c72c34bd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06103566f1f3da55926dc539b33b52c72c34bd5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d3155fc2e6bcaf799aec31fe75c868dc2d0391b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3155fc2e6bcaf799aec31fe75c868dc2d0391b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3155fc2e6bcaf799aec31fe75c868dc2d0391b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3155fc2e6bcaf799aec31fe75c868dc2d0391b/comments", "author": null, "committer": null, "parents": [{"sha": "aebde504ad45f511fbc01e81a1c4b829c0a86379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebde504ad45f511fbc01e81a1c4b829c0a86379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aebde504ad45f511fbc01e81a1c4b829c0a86379"}], "stats": {"total": 160, "additions": 96, "deletions": 64}, "files": [{"sha": "cfdf170e1ec2383e50e5ce10f0704b6564df09e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3155fc2e6bcaf799aec31fe75c868dc2d0391b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3155fc2e6bcaf799aec31fe75c868dc2d0391b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d3155fc2e6bcaf799aec31fe75c868dc2d0391b", "patch": "@@ -1,3 +1,14 @@\n+2008-07-04  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/36634\n+\t* config/rs6000/rs6000.md (call, call_value): Don't arrange for\n+\tpic_offset_table_rtx to be marked as used here.\n+\t(call_nonlocal_sysv, call_value_nonlocal_sysv): Add split for\n+\tTARGET_SECURE_PLT to \"use\" pic_offset_table_rtx.\n+\t(call_nonlocal_sysv_secure, call_value_nonlocal_sysv_secure): New insn.\n+\t(sibcall_nonlocal_sysv, sibcall_value_nonlocal_sysv): Assert\n+\t!TARGET_SECURE_PLT.\n+\n 2008-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alloc-pool.c (hash_descriptor, eq_descriptor,"}, {"sha": "8fe16464285dcd8a357500e3b431402d41c320e5", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 85, "deletions": 64, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3155fc2e6bcaf799aec31fe75c868dc2d0391b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3155fc2e6bcaf799aec31fe75c868dc2d0391b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=1d3155fc2e6bcaf799aec31fe75c868dc2d0391b", "patch": "@@ -10745,26 +10745,6 @@\n \n   operands[0] = XEXP (operands[0], 0);\n \n-  if (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT\n-      && flag_pic\n-      && GET_CODE (operands[0]) == SYMBOL_REF\n-      && !SYMBOL_REF_LOCAL_P (operands[0]))\n-    {\n-      rtx call;\n-      rtvec tmp;\n-\n-      tmp = gen_rtvec (3,\n-\t\t       gen_rtx_CALL (VOIDmode,\n-\t\t\t\t     gen_rtx_MEM (SImode, operands[0]),\n-\t\t\t\t     operands[1]),\n-\t\t       gen_rtx_USE (VOIDmode, operands[2]),\n-\t\t       gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\tgen_rtx_REG (Pmode, LR_REGNO)));\n-      call = emit_call_insn (gen_rtx_PARALLEL (VOIDmode, tmp));\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (call), pic_offset_table_rtx);\n-      DONE;\n-    }\n-\n   if (GET_CODE (operands[0]) != SYMBOL_REF\n       || (DEFAULT_ABI == ABI_AIX && !SYMBOL_REF_FUNCTION_P (operands[0]))\n       || (DEFAULT_ABI != ABI_DARWIN && (INTVAL (operands[2]) & CALL_LONG) != 0))\n@@ -10816,29 +10796,6 @@\n \n   operands[1] = XEXP (operands[1], 0);\n \n-  if (DEFAULT_ABI == ABI_V4 && TARGET_SECURE_PLT\n-      && flag_pic\n-      && GET_CODE (operands[1]) == SYMBOL_REF\n-      && !SYMBOL_REF_LOCAL_P (operands[1]))\n-    {\n-      rtx call;\n-      rtvec tmp;\n-\n-      tmp = gen_rtvec (3,\n-\t\t       gen_rtx_SET (VOIDmode,\n-\t\t\t\t    operands[0],\n-\t\t\t\t    gen_rtx_CALL (VOIDmode,\n-\t\t\t\t\t\t  gen_rtx_MEM (SImode,\n-\t\t\t\t\t\t\t       operands[1]),\n-\t\t\t\t\t\t  operands[2])),\n-\t\t       gen_rtx_USE (VOIDmode, operands[3]),\n-\t\t       gen_rtx_CLOBBER (VOIDmode, \n-\t\t\t\t\tgen_rtx_REG (Pmode, LR_REGNO)));\n-      call = emit_call_insn (gen_rtx_PARALLEL (VOIDmode, tmp));\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (call), pic_offset_table_rtx);\n-      DONE;\n-    }\n-\n   if (GET_CODE (operands[1]) != SYMBOL_REF\n       || (DEFAULT_ABI == ABI_AIX && !SYMBOL_REF_FUNCTION_P (operands[1]))\n       || (DEFAULT_ABI != ABI_DARWIN && (INTVAL (operands[3]) & CALL_LONG) != 0))\n@@ -11094,7 +11051,7 @@\n   [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n    (set_attr \"length\" \"4,4,8,8\")])\n \n-(define_insn \"*call_nonlocal_sysv<mode>\"\n+(define_insn_and_split \"*call_nonlocal_sysv<mode>\"\n   [(call (mem:SI (match_operand:P 0 \"symbol_ref_operand\" \"s,s\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n@@ -11114,17 +11071,50 @@\n #else\n   if (DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n-      if (TARGET_SECURE_PLT && flag_pic == 2)\n-\t/* The magic 32768 offset here and in the other sysv call insns\n-\t   corresponds to the offset of r30 in .got2, as given by LCTOC1.\n-\t   See sysv4.h:toc_section.  */\n-\treturn \"bl %z0+32768@plt\";\n-      else\n-\treturn \"bl %z0@plt\";\n+      gcc_assert (!TARGET_SECURE_PLT);\n+      return \"bl %z0@plt\";\n     }\n   else\n     return \"bl %z0\";\n #endif\n+}\n+  \"DEFAULT_ABI == ABI_V4\n+   && TARGET_SECURE_PLT && flag_pic && !SYMBOL_REF_LOCAL_P (operands[0])\n+   && (INTVAL (operands[2]) & CALL_LONG) == 0\"\n+  [(parallel [(call (mem:SI (match_dup 0))\n+\t\t    (match_dup 1))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (clobber (reg:SI LR_REGNO))])]\n+{\n+  operands[3] = pic_offset_table_rtx;\n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*call_nonlocal_sysv_secure<mode>\"\n+  [(call (mem:SI (match_operand:P 0 \"symbol_ref_operand\" \"s,s\"))\n+\t (match_operand 1 \"\" \"g,g\"))\n+   (use (match_operand:SI 2 \"immediate_operand\" \"O,n\"))\n+   (use (match_operand:SI 3 \"register_operand\" \"r,r\"))\n+   (clobber (reg:SI LR_REGNO))]\n+  \"(DEFAULT_ABI == ABI_V4\n+    && TARGET_SECURE_PLT && flag_pic && !SYMBOL_REF_LOCAL_P (operands[0])\n+    && (INTVAL (operands[2]) & CALL_LONG) == 0)\"\n+{\n+  if (INTVAL (operands[2]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\"crxor 6,6,6\", operands);\n+\n+  else if (INTVAL (operands[2]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\"creqv 6,6,6\", operands);\n+\n+  if (flag_pic == 2)\n+    /* The magic 32768 offset here and in the other sysv call insns\n+       corresponds to the offset of r30 in .got2, as given by LCTOC1.\n+       See sysv4.h:toc_section.  */\n+    return \"bl %z0+32768@plt\";\n+  else\n+    return \"bl %z0@plt\";\n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -11149,7 +11139,7 @@\n   [(set_attr \"type\" \"jmpreg,jmpreg,jmpreg,jmpreg\")\n    (set_attr \"length\" \"4,4,8,8\")])\n \n-(define_insn \"*call_value_nonlocal_sysv<mode>\"\n+(define_insn_and_split \"*call_value_nonlocal_sysv<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s,s\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n@@ -11170,14 +11160,49 @@\n #else\n   if (DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n-      if (TARGET_SECURE_PLT && flag_pic == 2)\n-\treturn \"bl %z1+32768@plt\";\n-      else\n-\treturn \"bl %z1@plt\";\n+      gcc_assert (!TARGET_SECURE_PLT);\n+      return \"bl %z1@plt\";\n     }\n   else\n     return \"bl %z1\";\n #endif\n+}\n+  \"DEFAULT_ABI == ABI_V4\n+   && TARGET_SECURE_PLT && flag_pic && !SYMBOL_REF_LOCAL_P (operands[1])\n+   && (INTVAL (operands[3]) & CALL_LONG) == 0\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (call (mem:SI (match_dup 1))\n+\t\t\t (match_dup 2)))\n+\t      (use (match_dup 3))\n+\t      (use (match_dup 4))\n+\t      (clobber (reg:SI LR_REGNO))])]\n+{\n+  operands[4] = pic_offset_table_rtx;\n+}\n+  [(set_attr \"type\" \"branch,branch\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+(define_insn \"*call_value_nonlocal_sysv_secure<mode>\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:SI (match_operand:P 1 \"symbol_ref_operand\" \"s,s\"))\n+\t      (match_operand 2 \"\" \"g,g\")))\n+   (use (match_operand:SI 3 \"immediate_operand\" \"O,n\"))\n+   (use (match_operand:SI 4 \"register_operand\" \"r,r\"))\n+   (clobber (reg:SI LR_REGNO))]\n+  \"(DEFAULT_ABI == ABI_V4\n+    && TARGET_SECURE_PLT && flag_pic && !SYMBOL_REF_LOCAL_P (operands[1])\n+    && (INTVAL (operands[3]) & CALL_LONG) == 0)\"\n+{\n+  if (INTVAL (operands[3]) & CALL_V4_SET_FP_ARGS)\n+    output_asm_insn (\"crxor 6,6,6\", operands);\n+\n+  else if (INTVAL (operands[3]) & CALL_V4_CLEAR_FP_ARGS)\n+    output_asm_insn (\"creqv 6,6,6\", operands);\n+\n+  if (flag_pic == 2)\n+    return \"bl %z1+32768@plt\";\n+  else\n+    return \"bl %z1@plt\";\n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n@@ -11391,10 +11416,8 @@\n \n   if (DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n-      if (TARGET_SECURE_PLT && flag_pic == 2)\n-\treturn \\\"b %z0+32768@plt\\\";\n-      else\n-\treturn \\\"b %z0@plt\\\";\n+      gcc_assert (!TARGET_SECURE_PLT);\n+      return \\\"b %z0@plt\\\";\n     }\n   else\n     return \\\"b %z0\\\";\n@@ -11443,10 +11466,8 @@\n \n   if (DEFAULT_ABI == ABI_V4 && flag_pic)\n     {\n-      if (TARGET_SECURE_PLT && flag_pic == 2)\n-\treturn \\\"b %z1+32768@plt\\\";\n-      else\n-\treturn \\\"b %z1@plt\\\";\n+      gcc_assert (!TARGET_SECURE_PLT);\n+      return \\\"b %z1@plt\\\";\n     }\n   else\n     return \\\"b %z1\\\";"}]}