{"sha": "e976ed37efdfa2e84bac519e0069353366cc8db7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3NmVkMzdlZmRmYTJlODRiYWM1MTllMDA2OTM1MzM2NmNjOGRiNw==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2003-06-12T15:39:17Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2003-06-12T15:39:17Z"}, "message": "jni.cc (_Jv_JNI_check_types): New.\n\n2003-06-11  Andrew Haley  <aph@redhat.com>\n\n        * jni.cc (_Jv_JNI_check_types): New.\n        (_Jv_JNI_SetPrimgitiveArrayRegion): Check array type.\n        (_Jv_JNI_GetPrimitiveArrayRegion): Ditto.\n        (_Jv_JNI_GetPrimitiveArrayElements): Ditto.\n        (_Jv_JNI_ReleasePrimitiveArrayElements): Ditto.\n\n        * java/lang/natVMSecurityManager.cc (getClassContext): Fix\n        infinite loop.\n\nFrom-SVN: r67835", "tree": {"sha": "e88e76ad59e851f610211c3adcd66b2a169d0025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e88e76ad59e851f610211c3adcd66b2a169d0025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e976ed37efdfa2e84bac519e0069353366cc8db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e976ed37efdfa2e84bac519e0069353366cc8db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e976ed37efdfa2e84bac519e0069353366cc8db7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e976ed37efdfa2e84bac519e0069353366cc8db7/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14b96a951ae3840b566c96393aa8930b4b4de16d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b96a951ae3840b566c96393aa8930b4b4de16d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b96a951ae3840b566c96393aa8930b4b4de16d"}], "stats": {"total": 151, "additions": 109, "deletions": 42}, "files": [{"sha": "81c271b07633c73e93fdf92b0957fe206cbd520c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976ed37efdfa2e84bac519e0069353366cc8db7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976ed37efdfa2e84bac519e0069353366cc8db7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e976ed37efdfa2e84bac519e0069353366cc8db7", "patch": "@@ -1,3 +1,14 @@\n+2003-06-11  Andrew Haley  <aph@redhat.com>\n+\n+\t* jni.cc (_Jv_JNI_check_types): New.\n+\t(_Jv_JNI_SetPrimgitiveArrayRegion): Check array type.\n+\t(_Jv_JNI_GetPrimitiveArrayRegion): Ditto.\n+\t(_Jv_JNI_GetPrimitiveArrayElements): Ditto.\n+\t(_Jv_JNI_ReleasePrimitiveArrayElements): Ditto.\n+\t\n+\t* java/lang/natVMSecurityManager.cc (getClassContext): Fix\n+\tinfinite loop.\n+\n 2003-06-11  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/ClassLoader.java (loadClass): Not deprecated."}, {"sha": "33aa8873f1d57f932d49032b2ed2a31e63c3c39a", "filename": "libjava/java/lang/natVMSecurityManager.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976ed37efdfa2e84bac519e0069353366cc8db7/libjava%2Fjava%2Flang%2FnatVMSecurityManager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976ed37efdfa2e84bac519e0069353366cc8db7/libjava%2Fjava%2Flang%2FnatVMSecurityManager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatVMSecurityManager.cc?ref=e976ed37efdfa2e84bac519e0069353366cc8db7", "patch": "@@ -28,9 +28,9 @@ java::lang::VMSecurityManager::getClassContext ()\n       int maxlen = t->length();\n \n       int len = 0;\n-      while (len < maxlen)\n+      for (int i=0; i<len; i++)\n \t{\n-\t  jclass klass = t->classAt(len);\n+\t  jclass klass = t->classAt(i);\n \t  if (klass != NULL && klass != &java::lang::VMSecurityManager::class$\n \t      && klass != &java::lang::SecurityManager::class$)\n \t    ++len;\n@@ -41,9 +41,9 @@ java::lang::VMSecurityManager::getClassContext ()\n \t\t\t\t\t       NULL);\n \n       len = 0;\n-      while (len < maxlen)\n+      for (int i=0; i<len; i++)\n \t{\n-\t  jclass klass = t->classAt(len);\n+\t  jclass klass = t->classAt(i);\n \t  if (klass != NULL && klass != &java::lang::VMSecurityManager::class$\n \t      && klass != &java::lang::SecurityManager::class$)\n \t    elements(result)[len++] = klass;"}, {"sha": "68aeb5d6bc19b9b4ec24af4712e5d0b541ca092a", "filename": "libjava/jni.cc", "status": "modified", "additions": 94, "deletions": 38, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e976ed37efdfa2e84bac519e0069353366cc8db7/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e976ed37efdfa2e84bac519e0069353366cc8db7/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=e976ed37efdfa2e84bac519e0069353366cc8db7", "patch": "@@ -39,6 +39,7 @@ details.  */\n #include <java/lang/Integer.h>\n #include <java/lang/ThreadGroup.h>\n #include <java/lang/Thread.h>\n+#include <java/lang/IllegalAccessError.h>\n \n #include <gcj/method.h>\n #include <gcj/field.h>\n@@ -384,6 +385,22 @@ static jobject\n   return _Jv_JNI_PopLocalFrame (env, result, MARK_USER);\n }\n \n+// Make sure an array's type is compatible with the type of the\n+// destination.\n+template<typename T>\n+static bool\n+_Jv_JNI_check_types (JNIEnv *env, JArray<T> *array, jclass K)\n+{\n+  jclass klass = array->getClass()->getComponentType();\n+  if (__builtin_expect (klass != K, false))\n+    {\n+      env->ex = new java::lang::IllegalAccessError ();\n+      return false;\n+    }\n+  else\n+    return true;\n+}\n+\n // Pop a `system' frame from the stack.  This is `extern \"C\"' as it is\n // used by the compiler.\n extern \"C\" void\n@@ -1446,12 +1463,14 @@ static JArray<T> *\n     }\n }\n \n-template<typename T>\n+template<typename T, jclass K>\n static T *\n-(JNICALL _Jv_JNI_GetPrimitiveArrayElements) (JNIEnv *, JArray<T> *array,\n+(JNICALL _Jv_JNI_GetPrimitiveArrayElements) (JNIEnv *env, JArray<T> *array,\n \t\t\t\t             jboolean *isCopy)\n {\n   array = unwrap (array);\n+  if (! _Jv_JNI_check_types (env, array, K))\n+    return NULL;\n   T *elts = elements (array);\n   if (isCopy)\n     {\n@@ -1462,25 +1481,28 @@ static T *\n   return elts;\n }\n \n-template<typename T>\n+template<typename T, jclass K>\n static void\n-(JNICALL _Jv_JNI_ReleasePrimitiveArrayElements) (JNIEnv *, JArray<T> *array,\n+(JNICALL _Jv_JNI_ReleasePrimitiveArrayElements) (JNIEnv *env, JArray<T> *array,\n \t\t\t\t                 T *, jint /* mode */)\n {\n   array = unwrap (array);\n+  _Jv_JNI_check_types (env, array, K);\n   // Note that we ignore MODE.  We can do this because we never copy\n   // the array elements.  My reading of the JNI documentation is that\n   // this is an option for the implementor.\n   unmark_for_gc (array, global_ref_table);\n }\n \n-template<typename T>\n+template<typename T, jclass K>\n static void\n (JNICALL _Jv_JNI_GetPrimitiveArrayRegion) (JNIEnv *env, JArray<T> *array,\n \t\t\t\t           jsize start, jsize len,\n \t\t\t\t T *buf)\n {\n   array = unwrap (array);\n+  if (! _Jv_JNI_check_types (env, array, K))\n+    return;\n \n   // The cast to unsigned lets us save a comparison.\n   if (start < 0 || len < 0\n@@ -1504,12 +1526,14 @@ static void\n     }\n }\n \n-template<typename T>\n+template<typename T, jclass K>\n static void\n (JNICALL _Jv_JNI_SetPrimitiveArrayRegion) (JNIEnv *env, JArray<T> *array,\n \t\t\t\t           jsize start, jsize len, T *buf)\n {\n   array = unwrap (array);\n+  if (! _Jv_JNI_check_types (env, array, K))\n+    return;\n \n   // The cast to unsigned lets us save a comparison.\n   if (start < 0 || len < 0\n@@ -2688,38 +2712,70 @@ struct JNINativeInterface _Jv_JNIFunctions =\n   _Jv_JNI_NewPrimitiveArray<jlong, JvPrimClass (long)>,\t    // NewLongArray\n   _Jv_JNI_NewPrimitiveArray<jfloat, JvPrimClass (float)>,   // NewFloatArray\n   _Jv_JNI_NewPrimitiveArray<jdouble, JvPrimClass (double)>, // NewDoubleArray\n-  _Jv_JNI_GetPrimitiveArrayElements,\t    // GetBooleanArrayElements\n-  _Jv_JNI_GetPrimitiveArrayElements,\t    // GetByteArrayElements\n-  _Jv_JNI_GetPrimitiveArrayElements,\t    // GetCharArrayElements\n-  _Jv_JNI_GetPrimitiveArrayElements,\t    // GetShortArrayElements\n-  _Jv_JNI_GetPrimitiveArrayElements,\t    // GetIntArrayElements\n-  _Jv_JNI_GetPrimitiveArrayElements,\t    // GetLongArrayElements\n-  _Jv_JNI_GetPrimitiveArrayElements,\t    // GetFloatArrayElements\n-  _Jv_JNI_GetPrimitiveArrayElements,\t    // GetDoubleArrayElements\n-  _Jv_JNI_ReleasePrimitiveArrayElements,    // ReleaseBooleanArrayElements\n-  _Jv_JNI_ReleasePrimitiveArrayElements,    // ReleaseByteArrayElements\n-  _Jv_JNI_ReleasePrimitiveArrayElements,    // ReleaseCharArrayElements\n-  _Jv_JNI_ReleasePrimitiveArrayElements,    // ReleaseShortArrayElements\n-  _Jv_JNI_ReleasePrimitiveArrayElements,    // ReleaseIntArrayElements\n-  _Jv_JNI_ReleasePrimitiveArrayElements,    // ReleaseLongArrayElements\n-  _Jv_JNI_ReleasePrimitiveArrayElements,    // ReleaseFloatArrayElements\n-  _Jv_JNI_ReleasePrimitiveArrayElements,    // ReleaseDoubleArrayElements\n-  _Jv_JNI_GetPrimitiveArrayRegion,\t    // GetBooleanArrayRegion\n-  _Jv_JNI_GetPrimitiveArrayRegion,\t    // GetByteArrayRegion\n-  _Jv_JNI_GetPrimitiveArrayRegion,\t    // GetCharArrayRegion\n-  _Jv_JNI_GetPrimitiveArrayRegion,\t    // GetShortArrayRegion\n-  _Jv_JNI_GetPrimitiveArrayRegion,\t    // GetIntArrayRegion\n-  _Jv_JNI_GetPrimitiveArrayRegion,\t    // GetLongArrayRegion\n-  _Jv_JNI_GetPrimitiveArrayRegion,\t    // GetFloatArrayRegion\n-  _Jv_JNI_GetPrimitiveArrayRegion,\t    // GetDoubleArrayRegion\n-  _Jv_JNI_SetPrimitiveArrayRegion,\t    // SetBooleanArrayRegion\n-  _Jv_JNI_SetPrimitiveArrayRegion,\t    // SetByteArrayRegion\n-  _Jv_JNI_SetPrimitiveArrayRegion,\t    // SetCharArrayRegion\n-  _Jv_JNI_SetPrimitiveArrayRegion,\t    // SetShortArrayRegion\n-  _Jv_JNI_SetPrimitiveArrayRegion,\t    // SetIntArrayRegion\n-  _Jv_JNI_SetPrimitiveArrayRegion,\t    // SetLongArrayRegion\n-  _Jv_JNI_SetPrimitiveArrayRegion,\t    // SetFloatArrayRegion\n-  _Jv_JNI_SetPrimitiveArrayRegion,\t    // SetDoubleArrayRegion\n+  _Jv_JNI_GetPrimitiveArrayElements<jboolean, JvPrimClass (boolean)>,\t    \n+\t\t\t\t\t    // GetBooleanArrayElements\n+  _Jv_JNI_GetPrimitiveArrayElements<jbyte, JvPrimClass (byte)>,\t \n+\t\t\t\t\t    // GetByteArrayElements\n+  _Jv_JNI_GetPrimitiveArrayElements<jchar, JvPrimClass (char)>,\n+\t\t\t\t\t    // GetCharArrayElements\n+  _Jv_JNI_GetPrimitiveArrayElements<jshort, JvPrimClass (short)>,\t    \n+\t\t\t\t\t    // GetShortArrayElements\n+  _Jv_JNI_GetPrimitiveArrayElements<jint, JvPrimClass (int)>,\t\t    \n+\t\t\t\t\t    // GetIntArrayElements\n+  _Jv_JNI_GetPrimitiveArrayElements<jlong, JvPrimClass (long)>,\t\t    \n+\t\t\t\t\t    // GetLongArrayElements\n+  _Jv_JNI_GetPrimitiveArrayElements<jfloat, JvPrimClass (float)>,\t    \n+\t\t\t\t\t    // GetFloatArrayElements\n+  _Jv_JNI_GetPrimitiveArrayElements<jdouble, JvPrimClass (double)>,\t    \n+\t\t\t\t\t    // GetDoubleArrayElements\n+  _Jv_JNI_ReleasePrimitiveArrayElements<jboolean, JvPrimClass (boolean)>,    \n+\t\t\t\t\t    // ReleaseBooleanArrayElements\n+  _Jv_JNI_ReleasePrimitiveArrayElements<jbyte, JvPrimClass (byte)>,    \n+\t\t\t\t\t    // ReleaseByteArrayElements\n+  _Jv_JNI_ReleasePrimitiveArrayElements<jchar, JvPrimClass (char)>,    \n+\t\t\t\t\t    // ReleaseCharArrayElements\n+  _Jv_JNI_ReleasePrimitiveArrayElements<jshort, JvPrimClass (short)>,\t \n+\t\t\t\t\t    // ReleaseShortArrayElements\n+  _Jv_JNI_ReleasePrimitiveArrayElements<jint, JvPrimClass (int)>,    \n+\t\t\t\t\t    // ReleaseIntArrayElements\n+  _Jv_JNI_ReleasePrimitiveArrayElements<jlong, JvPrimClass (long)>,    \n+\t\t\t\t\t    // ReleaseLongArrayElements\n+  _Jv_JNI_ReleasePrimitiveArrayElements<jfloat, JvPrimClass (float)>,\t \n+\t\t\t\t\t    // ReleaseFloatArrayElements\n+  _Jv_JNI_ReleasePrimitiveArrayElements<jdouble, JvPrimClass (double)>,\t   \n+\t\t\t\t\t    // ReleaseDoubleArrayElements\n+  _Jv_JNI_GetPrimitiveArrayRegion<jboolean, JvPrimClass (boolean)>,\t    \n+\t\t\t\t\t    // GetBooleanArrayRegion\n+  _Jv_JNI_GetPrimitiveArrayRegion<jbyte, JvPrimClass (byte)>,\t    \n+\t\t\t\t\t    // GetByteArrayRegion\n+  _Jv_JNI_GetPrimitiveArrayRegion<jchar, JvPrimClass (char)>,\t    \n+\t\t\t\t\t    // GetCharArrayRegion\n+  _Jv_JNI_GetPrimitiveArrayRegion<jshort, JvPrimClass (short)>,\t    \n+\t\t\t\t\t    // GetShortArrayRegion\n+  _Jv_JNI_GetPrimitiveArrayRegion<jint, JvPrimClass (int)>,\t    \n+\t\t\t\t\t    // GetIntArrayRegion\n+  _Jv_JNI_GetPrimitiveArrayRegion<jlong, JvPrimClass (long)>,\t    \n+\t\t\t\t\t    // GetLongArrayRegion\n+  _Jv_JNI_GetPrimitiveArrayRegion<jfloat, JvPrimClass (float)>,\t    \n+\t\t\t\t\t    // GetFloatArrayRegion\n+  _Jv_JNI_GetPrimitiveArrayRegion<jdouble, JvPrimClass (double)>,\t    \n+\t\t\t\t\t    // GetDoubleArrayRegion\n+  _Jv_JNI_SetPrimitiveArrayRegion<jboolean, JvPrimClass (boolean)>,\t    \n+\t\t\t\t\t    // SetBooleanArrayRegion\n+  _Jv_JNI_SetPrimitiveArrayRegion<jbyte, JvPrimClass (byte)>,\t    \n+\t\t\t\t\t    // SetByteArrayRegion\n+  _Jv_JNI_SetPrimitiveArrayRegion<jchar, JvPrimClass (char)>,\t    \n+\t\t\t\t\t    // SetCharArrayRegion\n+  _Jv_JNI_SetPrimitiveArrayRegion<jshort, JvPrimClass (short)>,\t    \n+\t\t\t\t\t    // SetShortArrayRegion\n+  _Jv_JNI_SetPrimitiveArrayRegion<jint, JvPrimClass (int)>,\t    \n+\t\t\t\t\t    // SetIntArrayRegion\n+  _Jv_JNI_SetPrimitiveArrayRegion<jlong, JvPrimClass (long)>,\t    \n+\t\t\t\t\t    // SetLongArrayRegion\n+  _Jv_JNI_SetPrimitiveArrayRegion<jfloat, JvPrimClass (float)>,\t    \n+\t\t\t\t\t    // SetFloatArrayRegion\n+  _Jv_JNI_SetPrimitiveArrayRegion<jdouble, JvPrimClass (double)>,\t    \n+\t\t\t\t\t    // SetDoubleArrayRegion\n   _Jv_JNI_RegisterNatives,\t\t    // RegisterNatives\n   _Jv_JNI_UnregisterNatives,\t\t    // UnregisterNatives\n   _Jv_JNI_MonitorEnter,\t\t\t    // MonitorEnter"}]}