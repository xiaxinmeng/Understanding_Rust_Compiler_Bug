{"sha": "105b20842245211519ea4c2cf5614399d315ec5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA1YjIwODQyMjQ1MjExNTE5ZWE0YzJjZjU2MTQzOTlkMzE1ZWM1YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-31T18:43:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-31T18:43:31Z"}, "message": "sparc.c (function_arg_record_value_1): Pass complex floating fields in float regs.\n\n\t* config/sparc/sparc.c (function_arg_record_value_1): Pass complex\n\tfloating fields in float regs.\n\t(function_arg_record_value_2): Likewise.\n\nFrom-SVN: r51667", "tree": {"sha": "91f17267a6bf10046e4271b3527eee114588c753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91f17267a6bf10046e4271b3527eee114588c753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/105b20842245211519ea4c2cf5614399d315ec5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105b20842245211519ea4c2cf5614399d315ec5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105b20842245211519ea4c2cf5614399d315ec5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105b20842245211519ea4c2cf5614399d315ec5a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db08fddf62180a2a983a9be705250b3bfa7669ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db08fddf62180a2a983a9be705250b3bfa7669ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db08fddf62180a2a983a9be705250b3bfa7669ea"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "bf9421784b4809000756773590465cbab3f72bd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105b20842245211519ea4c2cf5614399d315ec5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105b20842245211519ea4c2cf5614399d315ec5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=105b20842245211519ea4c2cf5614399d315ec5a", "patch": "@@ -1,3 +1,9 @@\n+2002-03-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.c (function_arg_record_value_1): Pass complex\n+\tfloating fields in float regs.\n+\t(function_arg_record_value_2): Likewise.\n+\n 2002-03-31  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.md (define_constants): Remove misleading"}, {"sha": "4071f5a277c4372ecd271e2627801b26573b8932", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105b20842245211519ea4c2cf5614399d315ec5a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105b20842245211519ea4c2cf5614399d315ec5a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=105b20842245211519ea4c2cf5614399d315ec5a", "patch": "@@ -4245,7 +4245,10 @@ function_arg_record_value_1 (type, startbitpos, parms)\n \n \t  if (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE)\n \t    function_arg_record_value_1 (TREE_TYPE (field), bitpos, parms);\n-\t  else if (TREE_CODE (TREE_TYPE (field)) == REAL_TYPE\n+\t  else if ((TREE_CODE (TREE_TYPE (field)) == REAL_TYPE\n+\t\t    || (TREE_CODE (TREE_TYPE (field)) == COMPLEX_TYPE\n+\t\t\t&& (TREE_CODE (TREE_TYPE (TREE_TYPE (field)))\n+\t\t\t    == REAL_TYPE)))\n \t           && TARGET_FPU\n \t           && ! packed_p\n \t           && parms->named)\n@@ -4268,6 +4271,8 @@ function_arg_record_value_1 (type, startbitpos, parms)\n \t      /* There's no need to check this_slotno < SPARC_FP_ARG MAX.\n \t\t If it wasn't true we wouldn't be here.  */\n \t      parms->nregs += 1;\n+\t      if (TREE_CODE (TREE_TYPE (field)) == COMPLEX_TYPE)\n+\t\tparms->nregs += 1;\n \t    }\n \t  else\n \t    {\n@@ -4371,24 +4376,45 @@ function_arg_record_value_2 (type, startbitpos, parms)\n \n \t  if (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE)\n \t    function_arg_record_value_2 (TREE_TYPE (field), bitpos, parms);\n-\t  else if (TREE_CODE (TREE_TYPE (field)) == REAL_TYPE\n+\t  else if ((TREE_CODE (TREE_TYPE (field)) == REAL_TYPE\n+\t\t    || (TREE_CODE (TREE_TYPE (field)) == COMPLEX_TYPE\n+\t\t\t&& (TREE_CODE (TREE_TYPE (TREE_TYPE (field)))\n+\t\t\t    == REAL_TYPE)))\n \t           && TARGET_FPU\n \t           && ! packed_p\n \t           && parms->named)\n \t    {\n \t      int this_slotno = parms->slotno + bitpos / BITS_PER_WORD;\n+\t      int regno;\n+\t      enum machine_mode mode = DECL_MODE (field);\n \t      rtx reg;\n \n \t      function_arg_record_value_3 (bitpos, parms);\n-\n-\t      reg = gen_rtx_REG (DECL_MODE (field),\n-\t\t\t         (SPARC_FP_ARG_FIRST + this_slotno * 2\n-\t\t\t          + (DECL_MODE (field) == SFmode\n-\t\t\t\t     && (bitpos & 32) != 0)));\n+\t      regno = SPARC_FP_ARG_FIRST + this_slotno * 2\n+\t\t      + ((mode == SFmode || mode == SCmode)\n+\t\t\t && (bitpos & 32) != 0);\n+\t      switch (mode)\n+\t\t{\n+\t\tcase SCmode: mode = SFmode; break;\n+\t\tcase DCmode: mode = DFmode; break;\n+\t\tcase TCmode: mode = TFmode; break;\n+\t\tdefault: break;\n+\t\t}\n+\t      reg = gen_rtx_REG (mode, regno);\n \t      XVECEXP (parms->ret, 0, parms->nregs)\n \t\t= gen_rtx_EXPR_LIST (VOIDmode, reg,\n \t\t\t   GEN_INT (bitpos / BITS_PER_UNIT));\n \t      parms->nregs += 1;\n+\t      if (TREE_CODE (TREE_TYPE (field)) == COMPLEX_TYPE)\n+\t\t{\n+\t\t  regno += GET_MODE_SIZE (mode) / 4;\n+\t  \t  reg = gen_rtx_REG (mode, regno);\n+\t\t  XVECEXP (parms->ret, 0, parms->nregs)\n+\t\t    = gen_rtx_EXPR_LIST (VOIDmode, reg,\n+\t\t\tGEN_INT ((bitpos + GET_MODE_BITSIZE (mode))\n+\t\t\t\t / BITS_PER_UNIT));\n+\t\t  parms->nregs += 1;\n+\t\t}\n \t    }\n \t  else\n \t    {"}]}