{"sha": "1936a7d49ca05c3569a9889d0fa477a19f86b8e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkzNmE3ZDQ5Y2EwNWMzNTY5YTk4ODlkMGZhNDc3YTE5Zjg2YjhlMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-04-19T15:17:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-04-19T15:17:26Z"}, "message": "re PR middle-end/43796 (ICE in is_overflow_infinity (tree-vrp.c:184) with gfortran -fcheck=bounds -O2)\n\n2010-04-19  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43796\n\t* tree-vrp.c (adjust_range_with_scev): Lookup init and step\n\tfrom SCEV in the lattice.\n\t(vrp_visit_phi_node): Dump change.\n\n\t* gfortran.dg/pr43796.f90: New testcase.\n\nFrom-SVN: r158520", "tree": {"sha": "8a0d83a692e71a81304e1386f71cf1051ed660b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a0d83a692e71a81304e1386f71cf1051ed660b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1936a7d49ca05c3569a9889d0fa477a19f86b8e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1936a7d49ca05c3569a9889d0fa477a19f86b8e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1936a7d49ca05c3569a9889d0fa477a19f86b8e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "479881c395c4048943b57472bdf1b56b911a8381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/479881c395c4048943b57472bdf1b56b911a8381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/479881c395c4048943b57472bdf1b56b911a8381"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "273d492ee9336403cd0acd65f8a1519e8e6d9c06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1936a7d49ca05c3569a9889d0fa477a19f86b8e1", "patch": "@@ -1,3 +1,10 @@\n+2010-04-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43796\n+\t* tree-vrp.c (adjust_range_with_scev): Lookup init and step\n+\tfrom SCEV in the lattice.\n+\t(vrp_visit_phi_node): Dump change.\n+\n 2010-04-19  Richard Guenther  <rguenther@suse.de>\n \n \t* configure.ac: Fix quoting around elf_getshstrndx ABI check."}, {"sha": "c553fe03291ee382b1880a5fe1b80ebf6dc61ae6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1936a7d49ca05c3569a9889d0fa477a19f86b8e1", "patch": "@@ -1,3 +1,8 @@\n+2010-04-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43796\n+\t* gfortran.dg/pr43796.f90: New testcase.\n+\n 2010-04-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43783"}, {"sha": "2e98d7ca8041dc184b7a34e1d553d5207cf22501", "filename": "gcc/testsuite/gfortran.dg/pr43796.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr43796.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr43796.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr43796.f90?ref=1936a7d49ca05c3569a9889d0fa477a19f86b8e1", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fcheck=bounds\" }\n+\n+    FUNCTION F06FKFN(N,W,INCW,X,INCX)\n+       IMPLICIT NONE\n+       INTEGER, PARAMETER :: WP = KIND(0.0D0)\n+       REAL (KIND=WP)                  :: F06FKFN\n+       REAL (KIND=WP), PARAMETER       :: ONE = 1.0E+0_WP\n+       REAL (KIND=WP), PARAMETER       :: ZERO = 0.0E+0_WP\n+       INTEGER, INTENT (IN)            :: INCW, INCX, N\n+       REAL (KIND=WP), INTENT (IN)     :: W(*), X(*)\n+       REAL (KIND=WP)                  :: ABSYI, NORM, SCALE, SSQ\n+       INTEGER                         :: I, IW, IX\n+       REAL (KIND=WP), EXTERNAL        :: F06BMFN\n+       INTRINSIC                          ABS, SQRT\n+       IF (N<1) THEN\n+          NORM = ZERO\n+       ELSE IF (N==1) THEN\n+          NORM = SQRT(W(1))*ABS(X(1))\n+       ELSE\n+          IF (INCW>0) THEN\n+             IW = 1\n+          ELSE\n+             IW = 1 - (N-1)*INCW\n+          END IF\n+          IF (INCX>0) THEN\n+             IX = 1\n+          ELSE\n+             IX = 1 - (N-1)*INCX\n+          END IF\n+          SCALE = ZERO\n+          SSQ = ONE\n+          DO I = 1, N\n+             IF ((W(IW)/=ZERO) .AND. (X(IX)/=ZERO)) THEN\n+                ABSYI = SQRT(W(IW))*ABS(X(IX))\n+                IF (SCALE<ABSYI) THEN\n+                   SSQ = 1 + SSQ*(SCALE/ABSYI)**2\n+                   SCALE = ABSYI\n+                ELSE\n+                   SSQ = SSQ + (ABSYI/SCALE)**2\n+                END IF\n+             END IF\n+             IW = IW + INCW\n+             IX = IX + INCX\n+          END DO\n+          NORM = F06BMFN(SCALE,SSQ)\n+       END IF\n+       F06FKFN = NORM\n+       RETURN\n+    END FUNCTION F06FKFN\n+"}, {"sha": "b23132ca0439e738a523b8c04291114d2069fe95", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1936a7d49ca05c3569a9889d0fa477a19f86b8e1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=1936a7d49ca05c3569a9889d0fa477a19f86b8e1", "patch": "@@ -3153,7 +3153,7 @@ static void\n adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n \t\t\tgimple stmt, tree var)\n {\n-  tree init, step, chrec, tmin, tmax, min, max, type;\n+  tree init, step, chrec, tmin, tmax, min, max, type, tem;\n   enum ev_direction dir;\n \n   /* TODO.  Don't adjust anti-ranges.  An anti-range may provide\n@@ -3174,7 +3174,13 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n     return;\n \n   init = initial_condition_in_loop_num (chrec, loop->num);\n+  tem = op_with_constant_singleton_value_range (init);\n+  if (tem)\n+    init = tem;\n   step = evolution_part_in_loop_num (chrec, loop->num);\n+  tem = op_with_constant_singleton_value_range (step);\n+  if (tem)\n+    step = tem;\n \n   /* If STEP is symbolic, we can't know whether INIT will be the\n      minimum or maximum value in the range.  Also, unless INIT is\n@@ -6432,7 +6438,18 @@ vrp_visit_phi_node (gimple phi)\n   /* If the new range is different than the previous value, keep\n      iterating.  */\n   if (update_value_range (lhs, &vr_result))\n-    return SSA_PROP_INTERESTING;\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Found new range for \");\n+\t  print_generic_expr (dump_file, lhs, 0);\n+\t  fprintf (dump_file, \": \");\n+\t  dump_value_range (dump_file, &vr_result);\n+\t  fprintf (dump_file, \"\\n\\n\");\n+\t}\n+\n+      return SSA_PROP_INTERESTING;\n+    }\n \n   /* Nothing changed, don't add outgoing edges.  */\n   return SSA_PROP_NOT_INTERESTING;"}]}