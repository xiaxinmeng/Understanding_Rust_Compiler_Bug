{"sha": "63b8ef40c432b8045bc6d7665ff17baf50c2fcb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiOGVmNDBjNDMyYjgwNDViYzZkNzY2NWZmMTdiYWY1MGMyZmNiOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-13T15:31:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-13T15:31:06Z"}, "message": "sparc.h (SPARC_STACK_ALIGN): Implement using ROUND_UP macro and UNITS_PER_WORD * 2.\n\n\t* config/sparc/sparc.h (SPARC_STACK_ALIGN): Implement using\n\tROUND_UP macro and UNITS_PER_WORD * 2.\n\t* config/sparc/sparc.c (sparc_compute_frame_size):\n\tUse ROUND_UP and ROUND_DOWN macros where applicable.\n\t(function_arg_record_value, function_arg_record_value_1)\n\t(function_arg_record_value_1): Ditto.\n\t(emit_save_or_restore_regs): Use ROUND_DOWN to preserve offset\n\talignment to double-word.\n\t(sparc_gimplify_va_arg): Use ROUND_UP to calculate rsize.\n\t(sparc_emit_probe_stack_range): Use ROUND_DOWN to calculate\n\trounded_size.\n\nFrom-SVN: r228768", "tree": {"sha": "7388cdbc965e45fd2aec2d93466f6dab63a9c68c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7388cdbc965e45fd2aec2d93466f6dab63a9c68c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63b8ef40c432b8045bc6d7665ff17baf50c2fcb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b8ef40c432b8045bc6d7665ff17baf50c2fcb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63b8ef40c432b8045bc6d7665ff17baf50c2fcb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b8ef40c432b8045bc6d7665ff17baf50c2fcb8/comments", "author": null, "committer": null, "parents": [{"sha": "fdce493deb6604758d71ea759676ff5f3b4dafd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdce493deb6604758d71ea759676ff5f3b4dafd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdce493deb6604758d71ea759676ff5f3b4dafd7"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "3f09fd7234e85207cc66d88757ad87b26093f6a1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b8ef40c432b8045bc6d7665ff17baf50c2fcb8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b8ef40c432b8045bc6d7665ff17baf50c2fcb8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=63b8ef40c432b8045bc6d7665ff17baf50c2fcb8", "patch": "@@ -4981,11 +4981,11 @@ sparc_compute_frame_size (HOST_WIDE_INT size, int leaf_function)\n   else\n     {\n       /* We subtract STARTING_FRAME_OFFSET, remember it's negative.  */\n-      apparent_frame_size = (size - STARTING_FRAME_OFFSET + 7) & -8;\n+      apparent_frame_size = ROUND_UP (size - STARTING_FRAME_OFFSET, 8);\n       apparent_frame_size += n_global_fp_regs * 4;\n \n       /* We need to add the size of the outgoing argument area.  */\n-      frame_size = apparent_frame_size + ((args_size + 7) & -8);\n+      frame_size = apparent_frame_size + ROUND_UP (args_size, 8);\n \n       /* And that of the register window save area.  */\n       frame_size += FIRST_PARM_OFFSET (cfun->decl);\n@@ -5116,7 +5116,7 @@ sparc_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */\n \n-      rounded_size = size & -PROBE_INTERVAL;\n+      rounded_size = ROUND_DOWN (size, PROBE_INTERVAL);\n       emit_move_insn (g4, GEN_INT (rounded_size));\n \n \n@@ -5316,8 +5316,9 @@ emit_save_or_restore_regs (unsigned int low, unsigned int high, rtx base,\n \t  else  /* action_true == SORR_RESTORE */\n \t    emit_move_insn (gen_rtx_REG (mode, regno), mem);\n \n-\t  /* Always preserve double-word alignment.  */\n-\t  offset = (offset + 8) & -8;\n+\t  /* Bump and round down to double word\n+\t     in case we already bumped by 4.  */\n+\t  offset = ROUND_DOWN (offset + 8, 8);\n \t}\n     }\n \n@@ -6439,8 +6440,8 @@ function_arg_record_value_1 (const_tree type, HOST_WIDE_INT startbitpos,\n \t\t  unsigned int startbit, endbit;\n \t\t  int intslots, this_slotno;\n \n-\t\t  startbit = parms->intoffset & -BITS_PER_WORD;\n-\t\t  endbit   = (bitpos + BITS_PER_WORD - 1) & -BITS_PER_WORD;\n+\t\t  startbit = ROUND_DOWN (parms->intoffset, BITS_PER_WORD);\n+\t\t  endbit   = ROUND_UP (bitpos, BITS_PER_WORD);\n \n \t\t  intslots = (endbit - startbit) / BITS_PER_WORD;\n \t\t  this_slotno = parms->slotno + parms->intoffset\n@@ -6495,8 +6496,8 @@ function_arg_record_value_3 (HOST_WIDE_INT bitpos,\n   intoffset = parms->intoffset;\n   parms->intoffset = -1;\n \n-  startbit = intoffset & -BITS_PER_WORD;\n-  endbit = (bitpos + BITS_PER_WORD - 1) & -BITS_PER_WORD;\n+  startbit = ROUND_DOWN (intoffset, BITS_PER_WORD);\n+  endbit = ROUND_UP (bitpos, BITS_PER_WORD);\n   intslots = (endbit - startbit) / BITS_PER_WORD;\n   this_slotno = parms->slotno + intoffset / BITS_PER_WORD;\n \n@@ -6669,8 +6670,8 @@ function_arg_record_value (const_tree type, machine_mode mode,\n       unsigned int startbit, endbit;\n       int intslots, this_slotno;\n \n-      startbit = parms.intoffset & -BITS_PER_WORD;\n-      endbit = (typesize*BITS_PER_UNIT + BITS_PER_WORD - 1) & -BITS_PER_WORD;\n+      startbit = ROUND_DOWN (parms.intoffset, BITS_PER_WORD);\n+      endbit = ROUND_UP (typesize*BITS_PER_UNIT, BITS_PER_WORD);\n       intslots = (endbit - startbit) / BITS_PER_WORD;\n       this_slotno = slotno + parms.intoffset / BITS_PER_WORD;\n \n@@ -7451,7 +7452,7 @@ sparc_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n     {\n       indirect = false;\n       size = int_size_in_bytes (type);\n-      rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n+      rsize = ROUND_UP (size, UNITS_PER_WORD);\n       align = 0;\n \n       if (TARGET_ARCH64)"}, {"sha": "d2782a47bb1630d54828aae16aa73832b1b1b979", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b8ef40c432b8045bc6d7665ff17baf50c2fcb8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b8ef40c432b8045bc6d7665ff17baf50c2fcb8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=63b8ef40c432b8045bc6d7665ff17baf50c2fcb8", "patch": "@@ -510,8 +510,7 @@ extern enum cmodel sparc_cmodel;\n #define SPARC_STACK_BOUNDARY_HACK (TARGET_ARCH64 && TARGET_STACK_BIAS)\n \n /* ALIGN FRAMES on double word boundaries */\n-#define SPARC_STACK_ALIGN(LOC) \\\n-  (TARGET_ARCH64 ? (((LOC)+15) & ~15) : (((LOC)+7) & ~7))\n+#define SPARC_STACK_ALIGN(LOC) ROUND_UP ((LOC), UNITS_PER_WORD * 2)\n \n /* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY 32"}]}