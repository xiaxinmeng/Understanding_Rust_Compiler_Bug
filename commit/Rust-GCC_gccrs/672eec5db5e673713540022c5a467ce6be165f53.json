{"sha": "672eec5db5e673713540022c5a467ce6be165f53", "node_id": "C_kwDOANBUbNoAKDY3MmVlYzVkYjVlNjczNzEzNTQwMDIyYzVhNDY3Y2U2YmUxNjVmNTM", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T16:39:16Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:23Z"}, "message": "arm: improve tests and fix vqabsq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vqabsq_s<mode>): Fix spacing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqabsq_s8.c: Likewise.", "tree": {"sha": "a97fbff8e986863ce35113b10df1eab6e6fe114f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a97fbff8e986863ce35113b10df1eab6e6fe114f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/672eec5db5e673713540022c5a467ce6be165f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672eec5db5e673713540022c5a467ce6be165f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672eec5db5e673713540022c5a467ce6be165f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672eec5db5e673713540022c5a467ce6be165f53/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c828436e7db1787d644153fe07daf356c99f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c828436e7db1787d644153fe07daf356c99f2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c828436e7db1787d644153fe07daf356c99f2a"}], "stats": {"total": 181, "additions": 161, "deletions": 20}, "files": [{"sha": "27691a1e32c23d607b0a9ee311067e8cb5c52c41", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=672eec5db5e673713540022c5a467ce6be165f53", "patch": "@@ -388,7 +388,7 @@\n \t VQABSQ_S))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"vqabs.s%#<V_sz_elem> %q0, %q1\"\n+  \"vqabs.s%#<V_sz_elem>\\t%q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "7172ac5cddd9b503a5278ad280edec9f961f7e93", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_m_s16.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s16.c?ref=672eec5db5e673713540022c5a467ce6be165f53", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqabst.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vqabsq_m_s16 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqabst.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqabst.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t inactive, int16x8_t a, mve_pred16_t p)\n {\n   return vqabsq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "297cb196f1a19950883c27fc0e8c1f3099fb6deb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_m_s32.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s32.c?ref=672eec5db5e673713540022c5a467ce6be165f53", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqabst.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vqabsq_m_s32 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqabst.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqabst.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t inactive, int32x4_t a, mve_pred16_t p)\n {\n   return vqabsq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "83c699312396ebea218a9c9617f44755813a74f9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_m_s8.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_m_s8.c?ref=672eec5db5e673713540022c5a467ce6be165f53", "patch": "@@ -1,22 +1,49 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqabst.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vqabsq_m_s8 (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vqabst.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvqabst.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t inactive, int8x16_t a, mve_pred16_t p)\n {\n   return vqabsq_m (inactive, a, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bf849fe935441bd0fb9b90e202cdbc45c95aedfa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_s16.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s16.c?ref=672eec5db5e673713540022c5a467ce6be165f53", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqabs.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo (int16x8_t a)\n {\n   return vqabsq_s16 (a);\n }\n \n-/* { dg-final { scan-assembler \"vqabs.s16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqabs.s16\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int16x8_t\n foo1 (int16x8_t a)\n {\n   return vqabsq (a);\n }\n \n-/* { dg-final { scan-assembler \"vqabs.s16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1f88821de2307aec79a7144b3d517973deee77a9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_s32.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s32.c?ref=672eec5db5e673713540022c5a467ce6be165f53", "patch": "@@ -1,21 +1,41 @@\n-/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n-/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqabs.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo (int32x4_t a)\n {\n   return vqabsq_s32 (a);\n }\n \n-/* { dg-final { scan-assembler \"vqabs.s32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqabs.s32\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int32x4_t\n foo1 (int32x4_t a)\n {\n   return vqabsq (a);\n }\n \n-/* { dg-final { scan-assembler \"vqabs.s32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1399f7c16365b7c9ca6892994685eff76254e68a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqabsq_s8.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672eec5db5e673713540022c5a467ce6be165f53/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqabsq_s8.c?ref=672eec5db5e673713540022c5a467ce6be165f53", "patch": "@@ -1,21 +1,41 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvqabs.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo (int8x16_t a)\n {\n   return vqabsq_s8 (a);\n }\n \n-/* { dg-final { scan-assembler \"vqabs.s8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvqabs.s8\tq[0-9]+, q[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n int8x16_t\n foo1 (int8x16_t a)\n {\n   return vqabsq (a);\n }\n \n-/* { dg-final { scan-assembler \"vqabs.s8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}