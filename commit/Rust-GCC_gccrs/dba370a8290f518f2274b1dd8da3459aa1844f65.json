{"sha": "dba370a8290f518f2274b1dd8da3459aa1844f65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJhMzcwYTgyOTBmNTE4ZjIyNzRiMWRkOGRhMzQ1OWFhMTg0NGY2NQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2006-03-15T19:10:23Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2006-03-15T19:10:23Z"}, "message": "lang.opt (-freduced-reflection): New option.\n\n\t* lang.opt (-freduced-reflection): New option.\n\t* lang.c (java_post_options): Generate an error if\n\t-freduced-reflection used with -fjni or -findirect-dispatch.\n\t* java-tree.h (flag_reduced_reflection): Declare new variable.\n\t* boehm.c (get_boehm_type_descriptor): Indicate all pointers\n\tif bitmap overflows and flag_reduced_reflection set.\n\t* class.c (uses_jv_markobj_p): New function.\n\t(make_class_data): Moved generation of vtable to before\n\treflection data, generate less reflection data if\n\tflag_reduced_reflection set.\n\t* gcj.texi: Document -freduced-reflection.\n\nFrom-SVN: r112095", "tree": {"sha": "7dd173d7486d8928413e09b912a0357b143e2a68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dd173d7486d8928413e09b912a0357b143e2a68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dba370a8290f518f2274b1dd8da3459aa1844f65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba370a8290f518f2274b1dd8da3459aa1844f65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba370a8290f518f2274b1dd8da3459aa1844f65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba370a8290f518f2274b1dd8da3459aa1844f65/comments", "author": null, "committer": null, "parents": [{"sha": "492edb3ac5fbdee5d8383af723610f5dbc589214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/492edb3ac5fbdee5d8383af723610f5dbc589214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/492edb3ac5fbdee5d8383af723610f5dbc589214"}], "stats": {"total": 149, "additions": 125, "deletions": 24}, "files": [{"sha": "6a0afa2eb718005a4db3f25e7256a9c1d3be918c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=dba370a8290f518f2274b1dd8da3459aa1844f65", "patch": "@@ -1,3 +1,17 @@\n+2006-03-15  David Daney  <ddaney@avtrex.com>\n+\n+\t* lang.opt (-freduced-reflection): New option.\n+\t* lang.c (java_post_options): Generate an error if\n+\t-freduced-reflection used with -fjni or -findirect-dispatch.\n+\t* java-tree.h (flag_reduced_reflection): Declare new variable.\n+\t* boehm.c (get_boehm_type_descriptor): Indicate all pointers\n+\tif bitmap overflows and flag_reduced_reflection set.\n+\t* class.c (uses_jv_markobj_p): New function.\n+\t(make_class_data): Moved generation of vtable to before\n+\treflection data, generate less reflection data if\n+\tflag_reduced_reflection set.\n+\t* gcj.texi: Document -freduced-reflection.\n+\n 2006-03-15  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/26638:"}, {"sha": "6ea59440471861f82c09691ac14268c3629dcb63", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=dba370a8290f518f2274b1dd8da3459aa1844f65", "patch": "@@ -1,5 +1,5 @@\n /* Functions related to the Boehm garbage collector.\n-   Copyright (C) 2000, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2003, 2004, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -184,7 +184,7 @@ get_boehm_type_descriptor (tree type)\n   /* If the object is all pointers, or if the part with pointers fits\n      in our bitmap, then we are ok.  Otherwise we have to allocate it\n      a different way.  */\n-  if (all_bits_set != -1)\n+  if (all_bits_set != -1 || (pointer_after_end && flag_reduced_reflection))\n     {\n       /* In this case the initial part of the object is all reference\n \t fields, and the end of the object is all non-reference\n@@ -193,7 +193,12 @@ get_boehm_type_descriptor (tree type)\n \t this:\n \t value = DS_LENGTH | WORDS_TO_BYTES (last_set_index + 1);\n \t DS_LENGTH is 0.\n-\t WORDS_TO_BYTES shifts by log2(bytes-per-pointer).  */\n+\t WORDS_TO_BYTES shifts by log2(bytes-per-pointer).\n+\n+         In the case of flag_reduced_reflection and the bitmap would\n+         overflow, we tell the gc that the object is all pointers so\n+         that we don't have to emit reflection data for run time\n+         marking. */\n       count = 0;\n       low = 0;\n       high = 0;"}, {"sha": "bce16779b757610c5e417574cd6b528c677ca91c", "filename": "gcc/java/class.c", "status": "modified", "additions": 65, "deletions": 21, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=dba370a8290f518f2274b1dd8da3459aa1844f65", "patch": "@@ -1548,6 +1548,16 @@ supers_all_compiled (tree type)\n   return 1;\n }\n \n+/* The forth (index of 3) element in the vtable is the GC descriptor.\n+   A value of 2 indicates that the class uses _Jv_MarkObj. */\n+static int\n+uses_jv_markobj_p(tree dtable)\n+{\n+  tree v;\n+  v = VEC_index (constructor_elt, CONSTRUCTOR_ELTS (dtable), 3)->value;\n+  return (2 == TREE_INT_CST_LOW (v));\n+}\n+\n void\n make_class_data (tree type)\n {\n@@ -1570,7 +1580,10 @@ make_class_data (tree type)\n   tree constant_pool_constructor;\n   tree interfaces = null_pointer_node;\n   int interface_len = 0;\n+  int uses_jv_markobj = 0;\n   tree type_decl = TYPE_NAME (type);\n+  tree id_main = get_identifier(\"main\");\n+  tree id_class = get_identifier(\"java.lang.Class\");\n   /** Offset from start of virtual function table declaration\n       to where objects actually point at, following new g++ ABI. */\n   tree dtable_start_offset = build_int_cst (NULL_TREE,\n@@ -1579,6 +1592,22 @@ make_class_data (tree type)\n   this_class_addr = build_class_ref (type);\n   decl = TREE_OPERAND (this_class_addr, 0);\n \n+  if (supers_all_compiled (type) && ! CLASS_INTERFACE (type_decl)\n+      && !flag_indirect_dispatch)\n+    {\n+      tree dtable = get_dispatch_table (type, this_class_addr);\n+      uses_jv_markobj = uses_jv_markobj_p(dtable);\n+      dtable_decl = build_dtable_decl (type);\n+      DECL_INITIAL (dtable_decl) = dtable;\n+      TREE_STATIC (dtable_decl) = 1;\n+      DECL_ARTIFICIAL (dtable_decl) = 1;\n+      DECL_IGNORED_P (dtable_decl) = 1;\n+      TREE_PUBLIC (dtable_decl) = 1;\n+      rest_of_decl_compilation (dtable_decl, 1, 0);\n+      if (type == class_type_node)\n+\tclass_dtable_decl = dtable_decl;\n+    }\n+\n   /* Build Field array. */\n   field = TYPE_FIELDS (type);\n   while (field && DECL_ARTIFICIAL (field))\n@@ -1589,9 +1618,11 @@ make_class_data (tree type)\n     {\n       if (! DECL_ARTIFICIAL (field))\n \t{\n-\t  tree init = make_field_value (field);\n \t  if (FIELD_STATIC (field))\n \t    {\n+              /* We must always create reflection data for static fields\n+                 as it is used in the creation of the field itself. */\n+              tree init = make_field_value (field);\n \t      tree initial = DECL_INITIAL (field);\n \t      static_field_count++;\n \t      static_fields = tree_cons (NULL_TREE, init, static_fields);\n@@ -1603,8 +1634,9 @@ make_class_data (tree type)\n \t      rest_of_decl_compilation (field, 1, 1);\n \t      DECL_INITIAL (field) = initial;\n \t    }\n-\t  else\n+\t  else if (uses_jv_markobj || !flag_reduced_reflection)\n \t    {\n+              tree init = make_field_value (field);\n \t      instance_field_count++;\n \t      instance_fields = tree_cons (NULL_TREE, init, instance_fields);\n \t    }\n@@ -1643,9 +1675,35 @@ make_class_data (tree type)\n \t which we don't have a .class file.  */\n       if (METHOD_DUMMY (method))\n \tcontinue;\n-      init = make_method_value (method);\n-      method_count++;\n-      methods = tree_cons (NULL_TREE, init, methods);\n+\n+      /* Generate method reflection data if:\n+\n+          - !flag_reduced_reflection.\n+\n+          - <clinit> -- The runtime uses reflection to initialize the\n+            class.\n+\n+          - Any method in class java.lang.Class -- Class.forName() and\n+            perhaps other things require it.\n+\n+          - class$ -- It does not work if reflection data missing.\n+\n+          - main -- Reflection is used to find main(String[]) methods.\n+\n+          - public not static -- It is potentially part of an\n+            interface.  The runtime uses reflection data to build\n+            interface dispatch tables.  */\n+      if (!flag_reduced_reflection\n+          || DECL_CLINIT_P (method)\n+          || DECL_NAME (type_decl) == id_class\n+          || DECL_NAME (method) == id_main\n+          || (METHOD_PUBLIC (method) && !METHOD_STATIC (method))\n+          || TYPE_DOT_CLASS (type) == method)\n+        {\n+          init = make_method_value (method);\n+          method_count++;\n+          methods = tree_cons (NULL_TREE, init, methods);\n+        }\n     }\n   method_array_type = build_prim_array_type (method_type_node, method_count);\n   methods_decl = build_decl (VAR_DECL, mangled_classname (\"_MT_\", type),\n@@ -1657,21 +1715,6 @@ make_class_data (tree type)\n   DECL_IGNORED_P (methods_decl) = 1;\n   rest_of_decl_compilation (methods_decl, 1, 0);\n \n-  if (supers_all_compiled (type) && ! CLASS_INTERFACE (type_decl)\n-      && !flag_indirect_dispatch)\n-    {\n-      tree dtable = get_dispatch_table (type, this_class_addr);\n-      dtable_decl = build_dtable_decl (type);\n-      DECL_INITIAL (dtable_decl) = dtable;\n-      TREE_STATIC (dtable_decl) = 1;\n-      DECL_ARTIFICIAL (dtable_decl) = 1;\n-      DECL_IGNORED_P (dtable_decl) = 1;\n-      TREE_PUBLIC (dtable_decl) = 1;\n-      rest_of_decl_compilation (dtable_decl, 1, 0);\n-      if (type == class_type_node)\n-\tclass_dtable_decl = dtable_decl;\n-    }\n-\n   if (class_dtable_decl == NULL_TREE)\n     {\n       class_dtable_decl = build_dtable_decl (class_type_node);\n@@ -1781,7 +1824,8 @@ make_class_data (tree type)\n \t\t    CLASS_INTERFACE (type_decl) ? null_pointer_node : super);\n   PUSH_FIELD_VALUE (cons, \"constants\", constant_pool_constructor);\n   PUSH_FIELD_VALUE (cons, \"methods\",\n-\t\t    build1 (ADDR_EXPR, method_ptr_type_node, methods_decl));\n+                    methods_decl == NULL_TREE ? null_pointer_node\n+\t\t    : build1 (ADDR_EXPR, method_ptr_type_node, methods_decl));\n   PUSH_FIELD_VALUE (cons, \"method_count\",\n \t\t    build_int_cst (NULL_TREE, method_count));\n "}, {"sha": "ae7bcb7532b306c8ba4515aca160c61a7549601d", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=dba370a8290f518f2274b1dd8da3459aa1844f65", "patch": "@@ -546,6 +546,28 @@ This is convenient, as it means that things like\n @code{Class.forName()} will search @samp{CLASSPATH} to find the\n desired class.\n \n+@item -freduced-reflection\n+This option causes the code generated by @command{gcj} to contain a\n+reduced amount of the class meta-data used to support runtime\n+reflection. The cost of this savings is the loss of\n+the ability to use certain reflection capabilities of the standard\n+Java runtime environment. When set all meta-data except for that\n+which is needed to obtain correct runtime semantics is eliminated.\n+\n+For code that does not use reflection (i.e. the methods in the\n+@code{java.lang.reflect} package), @code{-freduced-reflection}\n+will result in proper operation with a savings in executable code size.\n+\n+JNI (@code{-fjni}) and the binary compatibility ABI\n+(@code{-findirect-dispatch}) do not work properly without full\n+reflection meta-data.  Because of this, it is an error to use these options\n+with @code{-freduced-reflection}.\n+\n+@strong{Caution:} If there is no reflection meta-data, code that uses\n+a @code{SecurityManager} may not work properly.  Also calling\n+@code{Class.forName()} may fail if the calling method has no\n+reflection meta-data.\n+\n @end table\n \n "}, {"sha": "285945c9935ed431acc59176639a76667d0ac935", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=dba370a8290f518f2274b1dd8da3459aa1844f65", "patch": "@@ -215,6 +215,9 @@ extern int flag_indirect_dispatch;\n /* When zero, don't generate runtime array store checks. */\n extern int flag_store_check;\n \n+/* When nonzero, generate only a limited set of class meta-data. */\n+extern int flag_reduced_reflection;\n+\n /* Encoding used for source files.  */\n extern const char *current_encoding;\n "}, {"sha": "e1f822ea3a3115f62fb29cf681b78273a6a50877", "filename": "gcc/java/lang.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=dba370a8290f518f2274b1dd8da3459aa1844f65", "patch": "@@ -608,6 +608,15 @@ java_post_options (const char **pfilename)\n   if (! flag_indirect_dispatch)\n     flag_verify_invocations = true;\n \n+  if (flag_reduced_reflection)\n+    {\n+      if (flag_indirect_dispatch)\n+        error (\"-findirect-dispatch is incompatible \"\n+               \"with -freduced-reflection\");\n+      if (flag_jni)\n+        error (\"-fjni is incompatible with -freduced-reflection\");\n+    }\n+\n   /* Open input file.  */\n \n   if (filename == 0 || !strcmp (filename, \"-\"))"}, {"sha": "6ffb0aadbd1e213270d87cdbebc45d868b3e2fd7", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dba370a8290f518f2274b1dd8da3459aa1844f65/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=dba370a8290f518f2274b1dd8da3459aa1844f65", "patch": "@@ -164,6 +164,10 @@ Enable optimization of static class initialization code\n foutput-class-dir=\n Java Joined RejectNegative\n \n+freduced-reflection\n+Java Var(flag_reduced_reflection)\n+Reduce the amount of reflection meta-data generated\n+\n fstore-check\n Java Var(flag_store_check) Init(1)\n Enable assignability checks for stores into object arrays"}]}