{"sha": "327940801d612d563781e5b58063889d247058b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI3OTQwODAxZDYxMmQ1NjM3ODFlNWI1ODA2Mzg4OWQyNDcwNThiNA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2019-09-17T07:59:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-17T07:59:53Z"}, "message": "[Ada] Ada 2020: Raise expressions in limited contexts (AI12-0172)\n\nThis patch adds support for the use of raise expressions in more\nlimited contexts (as described in the Ada Isssue AI12-0172).\n\n2019-09-17  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch3.adb (Build_Record_Init_Proc): Do not generate code to\n\tadjust the tag component when the record is initialized with a\n\traise expression.\n\t* sem_aggr.adb (Valid_Limited_Ancestor): Return True for\n\tN_Raise_Expression nodes.\n\t(Valid_Ancestor_Type): Return True for raise expressions.\n\t* sem_ch3.adb (Analyze_Component_Declaration): Do not report an\n\terror when a component is initialized with a raise expression.\n\t* sem_ch4.adb (Analyze_Qualified_Expression): Do not report an\n\terror when the aggregate has a raise expression.\n\ngcc/testsuite/\n\n\t* gnat.dg/limited4.adb: New testcase.\n\nFrom-SVN: r275776", "tree": {"sha": "6b276c14793087a13b68c1e4a127d7569d26b2e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b276c14793087a13b68c1e4a127d7569d26b2e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/327940801d612d563781e5b58063889d247058b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327940801d612d563781e5b58063889d247058b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327940801d612d563781e5b58063889d247058b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327940801d612d563781e5b58063889d247058b4/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92167df3c9735de9c62bab9bf325618febc75198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92167df3c9735de9c62bab9bf325618febc75198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92167df3c9735de9c62bab9bf325618febc75198"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "2855751d857a58be922c2786bce526a1996cdc85", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=327940801d612d563781e5b58063889d247058b4", "patch": "@@ -1,3 +1,16 @@\n+2019-09-17  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Record_Init_Proc): Do not generate code to\n+\tadjust the tag component when the record is initialized with a\n+\traise expression.\n+\t* sem_aggr.adb (Valid_Limited_Ancestor): Return True for\n+\tN_Raise_Expression nodes.\n+\t(Valid_Ancestor_Type): Return True for raise expressions.\n+\t* sem_ch3.adb (Analyze_Component_Declaration): Do not report an\n+\terror when a component is initialized with a raise expression.\n+\t* sem_ch4.adb (Analyze_Qualified_Expression): Do not report an\n+\terror when the aggregate has a raise expression.\n+\n 2019-09-17  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* ali.ads: Fix casing in comment."}, {"sha": "b08f51c31da2ff7eb5817e66404c4d1e47829feb", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=327940801d612d563781e5b58063889d247058b4", "patch": "@@ -1922,9 +1922,15 @@ package body Exp_Ch3 is\n \n          --  Adjust the tag if tagged (because of possible view conversions).\n          --  Suppress the tag adjustment when not Tagged_Type_Expansion because\n-         --  tags are represented implicitly in objects.\n+         --  tags are represented implicitly in objects, and when the record is\n+         --  initialized with a raise expression.\n \n-         if Is_Tagged_Type (Typ) and then Tagged_Type_Expansion then\n+         if Is_Tagged_Type (Typ)\n+           and then Tagged_Type_Expansion\n+           and then Nkind (Exp) /= N_Raise_Expression\n+           and then (Nkind (Exp) /= N_Qualified_Expression\n+                       or else Nkind (Expression (Exp)) /= N_Raise_Expression)\n+         then\n             Append_To (Res,\n               Make_Assignment_Statement (Default_Loc,\n                 Name       =>"}, {"sha": "87fe050bb4c0b1bdbb374ecd5c27cec5bb6723e0", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=327940801d612d563781e5b58063889d247058b4", "patch": "@@ -3158,6 +3158,9 @@ package body Sem_Aggr is\n          elsif Nkind (Anc) = N_Qualified_Expression then\n             return Valid_Limited_Ancestor (Expression (Anc));\n \n+         elsif Nkind (Anc) = N_Raise_Expression then\n+            return True;\n+\n          else\n             return False;\n          end if;\n@@ -3199,6 +3202,13 @@ package body Sem_Aggr is\n             then\n                return True;\n \n+            --  The parent type may be a raise expression (which is legal in\n+            --  any expression context).\n+\n+            elsif A_Type = Raise_Type then\n+               A_Type := Etype (Imm_Type);\n+               return True;\n+\n             else\n                Imm_Type := Etype (Base_Type (Imm_Type));\n             end if;"}, {"sha": "86b6e0d3d5901a2bba628146ca70d17308c134ed", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=327940801d612d563781e5b58063889d247058b4", "patch": "@@ -2047,10 +2047,23 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n+      --  Avoid reporting spurious errors if the component is initialized with\n+      --  a raise expression (which is legal in any expression context)\n+\n+      if Present (E)\n+        and then\n+          (Nkind (E) = N_Raise_Expression\n+             or else (Nkind (E) = N_Qualified_Expression\n+                        and then Nkind (Expression (E)) = N_Raise_Expression))\n+      then\n+         null;\n+\n       --  The parent type may be a private view with unknown discriminants,\n       --  and thus unconstrained. Regular components must be constrained.\n \n-      if not Is_Definite_Subtype (T) and then Chars (Id) /= Name_uParent then\n+      elsif not Is_Definite_Subtype (T)\n+        and then Chars (Id) /= Name_uParent\n+      then\n          if Is_Class_Wide_Type (T) then\n             Error_Msg_N\n                (\"class-wide subtype with unknown discriminants\" &"}, {"sha": "313398a7921f02bff588be7631bc1bcff5202c91", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327940801d612d563781e5b58063889d247058b4/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=327940801d612d563781e5b58063889d247058b4", "patch": "@@ -4001,7 +4001,9 @@ package body Sem_Ch4 is\n \n       if Is_Class_Wide_Type (T) then\n          if not Is_Overloaded (Expr) then\n-            if Base_Type (Etype (Expr)) /= Base_Type (T) then\n+            if Base_Type (Etype (Expr)) /= Base_Type (T)\n+              and then Etype (Expr) /= Raise_Type\n+            then\n                if Nkind (Expr) = N_Aggregate then\n                   Error_Msg_N (\"type of aggregate cannot be class-wide\", Expr);\n                else"}, {"sha": "30c75dfea8f78e2af206132ca89467048e50d3e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327940801d612d563781e5b58063889d247058b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327940801d612d563781e5b58063889d247058b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=327940801d612d563781e5b58063889d247058b4", "patch": "@@ -1,3 +1,7 @@\n+2019-09-17  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat.dg/limited4.adb: New testcase.\n+\n 2019-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/pack25.adb: New testcase."}, {"sha": "1a8ec97f91c85b9649e569be967b8d9cb369a548", "filename": "gcc/testsuite/gnat.dg/limited4.adb", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/327940801d612d563781e5b58063889d247058b4/gcc%2Ftestsuite%2Fgnat.dg%2Flimited4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/327940801d612d563781e5b58063889d247058b4/gcc%2Ftestsuite%2Fgnat.dg%2Flimited4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited4.adb?ref=327940801d612d563781e5b58063889d247058b4", "patch": "@@ -0,0 +1,58 @@\n+--  { dg-do compile }\n+procedure Limited4 is\n+    TBD_Error : exception;\n+\n+    type Lim_Rec is limited record\n+        A : Integer;\n+        B : Boolean;\n+    end record;\n+\n+    type Lim_Tagged is tagged limited record\n+        R : Lim_Rec;\n+        N : Natural;\n+    end record;\n+\n+    type Lim_Ext is new Lim_Tagged with record\n+       G : Natural;\n+    end record;\n+\n+    --  a) initialization expression of a CW object_declaration\n+\n+    Obj1 : Lim_Tagged'Class := (raise TBD_Error);\n+    Obj2 : Lim_Tagged'Class := Lim_Tagged'Class'(raise TBD_Error);\n+\n+    --  b) initialization expression of a CW component_declaration\n+\n+    type Rec is record\n+       Comp01 : Lim_Tagged'Class := (raise TBD_Error);\n+       Comp02 : Lim_Tagged'Class := Lim_Tagged'Class'((raise TBD_Error));\n+    end record;\n+\n+    --  c) the expression of a record_component_association\n+\n+    Obj : Lim_Tagged := (R => raise TBD_Error, N => 4);\n+\n+    --  d) the expression for an ancestor_part of an extension_aggregate\n+\n+    Ext1 : Lim_Ext := ((raise TBD_Error) with G => 0);\n+    Ext2 : Lim_Ext := (Lim_Tagged'(raise TBD_Error) with G => 0);\n+\n+    --  e) default_expression or actual parameter for a formal object of\n+    --     mode in\n+\n+    function Do_Test1 (Obj : Lim_Tagged) return Boolean is\n+    begin\n+       return True;\n+    end;\n+\n+    function Do_Test2\n+      (Obj : Lim_Tagged := (raise TBD_Error)) return Boolean is\n+    begin\n+       return True;\n+    end;\n+\n+    Check : Boolean;\n+begin\n+    Check := Do_Test1 (raise TBD_Error);\n+    Check := Do_Test2;\n+end;\n\\ No newline at end of file"}]}