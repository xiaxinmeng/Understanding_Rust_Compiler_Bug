{"sha": "ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI0NjY0ZWI3M2Y5NDAxYTVjYTY1ZDIxY2RmODdkNjlmZTAwMjZkYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-03T23:19:59Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-03T23:19:59Z"}, "message": "Fix copying of clone_info while reshaping clone tree.\n\n2020-11-04  Jan Hubicka  <hubicka@ucw.cz>\n\n\tPR ipa/97695\n\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Fix ICE with\n\tin dumping code.\n\t(cgraph_node::remove): Save clone info before releasing it and pass it\n\tto unregister.\n\t* cgraph.h (symtab_node::unregister): Add clone_info parameter.\n\t(cgraph_clone::unregister): Likewise.\n\t* cgraphclones.c (cgraph_node::find_replacement): Copy clone info\n\t* symtab-clones.cc (clone_infos_t::duplicate): Remove.\n\t(clone_info::get_create): Simplify.\n\t* symtab.c (symtab_node::unregister): Pass around clone info.\n\t* varpool.c (varpool_node::remove): Update.", "tree": {"sha": "60524595ea5de0b47cc7ad19ad96119358147ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60524595ea5de0b47cc7ad19ad96119358147ba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/comments", "author": null, "committer": null, "parents": [{"sha": "e7144372e06bf446d1bfb529806a803467ba697a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7144372e06bf446d1bfb529806a803467ba697a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7144372e06bf446d1bfb529806a803467ba697a"}], "stats": {"total": 49, "additions": 21, "deletions": 28}, "files": [{"sha": "19dfe2be23b1a6d6dfbf93c1a8a88278004527a1", "filename": "gcc/cgraph.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "patch": "@@ -1503,14 +1503,13 @@ cgraph_edge::redirect_call_stmt_to_callee (cgraph_edge *e)\n \n   if (symtab->dump_file)\n     {\n-\n       fprintf (symtab->dump_file, \"updating call of %s -> %s: \",\n \t       e->caller->dump_name (), e->callee->dump_name ());\n       print_gimple_stmt (symtab->dump_file, e->call_stmt, 0, dump_flags);\n       if (callee_info && callee_info->param_adjustments)\n \tcallee_info->param_adjustments->dump (symtab->dump_file);\n       unsigned performed_len\n-\t= vec_safe_length (caller_info->performed_splits);\n+\t= caller_info ? vec_safe_length (caller_info->performed_splits) : 0;\n       if (performed_len > 0)\n \tfprintf (symtab->dump_file, \"Performed splits records:\\n\");\n       for (unsigned i = 0; i < performed_len; i++)\n@@ -1861,12 +1860,19 @@ cgraph_node::release_body (bool keep_arguments)\n void\n cgraph_node::remove (void)\n {\n+  bool clone_info_set = false;\n+  clone_info *info, saved_info;\n   if (symtab->ipa_clones_dump_file && symtab->cloned_nodes.contains (this))\n     fprintf (symtab->ipa_clones_dump_file,\n \t     \"Callgraph removal;%s;%d;%s;%d;%d\\n\", asm_name (), order,\n \t     DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl),\n \t     DECL_SOURCE_COLUMN (decl));\n \n+  if ((info = clone_info::get (this)) != NULL)\n+    {\n+      saved_info = *info;\n+      clone_info_set = true;\n+    }\n   symtab->call_cgraph_removal_hooks (this);\n   remove_callers ();\n   remove_callees ();\n@@ -1878,7 +1884,7 @@ cgraph_node::remove (void)\n   force_output = false;\n   forced_by_abi = false;\n \n-  unregister ();\n+  unregister (clone_info_set ? &saved_info : NULL);\n   if (prev_sibling_clone)\n     prev_sibling_clone->next_sibling_clone = next_sibling_clone;\n   else if (clone_of)"}, {"sha": "c87180f1e96870f30ebc7421c1bca70c3a709b67", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "patch": "@@ -631,7 +631,7 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n \n   /* Remove node from symbol table.  This function is not used directly, but via\n      cgraph/varpool node removal routines.  */\n-  void unregister (void);\n+  void unregister (struct clone_info *);\n \n   /* Return the initialization and finalization priority information for\n      DECL.  If there is no previous priority information, a freshly\n@@ -949,7 +949,7 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node\n \n   /* cgraph node being removed from symbol table; see if its entry can be\n    replaced by other inline clone.  */\n-  cgraph_node *find_replacement (void);\n+  cgraph_node *find_replacement (struct clone_info *);\n \n   /* Create a new cgraph node which is the new version of\n      callgraph node.  REDIRECT_CALLERS holds the callers"}, {"sha": "bc590819f78599e079dabcf3fa45c4efe6ad5acc", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "patch": "@@ -648,9 +648,10 @@ cgraph_node::create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n }\n \n /* callgraph node being removed from symbol table; see if its entry can be\n-   replaced by other inline clone.  */\n+   replaced by other inline clone. \n+   INFO is clone info to attach to the new root.  */\n cgraph_node *\n-cgraph_node::find_replacement (void)\n+cgraph_node::find_replacement (clone_info *info)\n {\n   cgraph_node *next_inline_clone, *replacement;\n \n@@ -690,7 +691,6 @@ cgraph_node::find_replacement (void)\n       clones = NULL;\n \n       /* Copy clone info.  */\n-      clone_info *info = clone_info::get (this);\n       if (info)\n \t*clone_info::get_create (next_inline_clone) = *info;\n "}, {"sha": "ad154f6522d6ef17a78e6e3b16bb588d5dc68b7e", "filename": "gcc/symtab-clones.cc", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fsymtab-clones.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fsymtab-clones.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab-clones.cc?ref=ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "patch": "@@ -42,22 +42,8 @@ class GTY((user)) clone_infos_t: public function_summary <clone_info *>\n public:\n   clone_infos_t (symbol_table *table, bool ggc):\n     function_summary<clone_info *> (table, ggc) { }\n-\n-  /* Hook that is called by summary when a node is duplicated.  */\n-  virtual void duplicate (cgraph_node *node,\n-\t\t\t  cgraph_node *node2,\n-\t\t\t  clone_info *data,\n-\t\t\t  clone_info *data2);\n };\n \n-/* Duplication hook.  */\n-void\n-clone_infos_t::duplicate (cgraph_node *, cgraph_node *,\n-\t\t\t  clone_info *src, clone_info *dst)\n-{\n-  *dst = *src;\n-}\n-\n }  /* anon namespace  */\n \n /* Return thunk_info possibly creating new one.  */\n@@ -67,8 +53,8 @@ clone_info::get_create (cgraph_node *node)\n   if (!symtab->m_clones)\n     {\n       symtab->m_clones\n-\t = new (ggc_alloc_no_dtor <clone_infos_t> ())\n-\t     clone_infos_t (symtab, true);\n+\t = new (ggc_alloc_no_dtor <function_summary <clone_info *>> ())\n+\t     function_summary <clone_info *> (symtab, true);\n       symtab->m_clones->disable_insertion_hook ();\n       symtab->m_clones->disable_duplication_hook ();\n     }"}, {"sha": "8ce1c0635664b0167c9feb7f56522046caaf0125", "filename": "gcc/symtab.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "patch": "@@ -408,10 +408,11 @@ symtab_node::remove_from_same_comdat_group (void)\n }\n \n /* Remove node from symbol table.  This function is not used directly, but via\n-   cgraph/varpool node removal routines.  */\n+   cgraph/varpool node removal routines.\n+   INFO is a clone info to attach to new root of clone tree (if any).  */\n \n void\n-symtab_node::unregister (void)\n+symtab_node::unregister (clone_info *info)\n {\n   remove_all_references ();\n   remove_all_referring ();\n@@ -430,7 +431,7 @@ symtab_node::unregister (void)\n     {\n       symtab_node *replacement_node = NULL;\n       if (cgraph_node *cnode = dyn_cast <cgraph_node *> (this))\n-\treplacement_node = cnode->find_replacement ();\n+\treplacement_node = cnode->find_replacement (info);\n       decl->decl_with_vis.symtab_node = replacement_node;\n     }\n   if (!is_a <varpool_node *> (this) || !DECL_HARD_REGISTER (decl))"}, {"sha": "dc04d10cd422e37620c63be19c3083bdd92e96c8", "filename": "gcc/varpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab4664eb73f9401a5ca65d21cdf87d69fe0026dc/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=ab4664eb73f9401a5ca65d21cdf87d69fe0026dc", "patch": "@@ -186,7 +186,7 @@ varpool_node::remove (void)\n \t   && !ctor_useable_for_folding_p ())\n     remove_initializer ();\n \n-  unregister ();\n+  unregister (NULL);\n   ggc_free (this);\n }\n "}]}