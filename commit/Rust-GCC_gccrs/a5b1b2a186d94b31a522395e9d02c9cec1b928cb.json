{"sha": "a5b1b2a186d94b31a522395e9d02c9cec1b928cb", "node_id": "C_kwDOANBUbNoAKGE1YjFiMmExODZkOTRiMzFhNTIyMzk1ZTlkMDJjOWNlYzFiOTI4Y2I", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-18T07:10:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-18T08:26:16Z"}, "message": "tree-optimization/102798 - avoid copying PTA info to old SSA names\n\nThe vectorizer duplicates pointer-info to created pointer bases\nbut it has to avoid changing points-to info on existing SSA names\nbecause there's now flow-sensitive info in there (pt->pt_null as\nset from VRP).\n\n2021-10-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/102798\n\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref):\n\tOnly copy points-to info to newly generated SSA names.\n\n\t* gcc.dg/pr102798.c: New testcase.", "tree": {"sha": "0d4f8d1f9b5befdb7f5a438b2ce80d03a7780678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d4f8d1f9b5befdb7f5a438b2ce80d03a7780678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5b1b2a186d94b31a522395e9d02c9cec1b928cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b1b2a186d94b31a522395e9d02c9cec1b928cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b1b2a186d94b31a522395e9d02c9cec1b928cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b1b2a186d94b31a522395e9d02c9cec1b928cb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "724e27046bc3f1b24eb4e153f71da0ac1049127d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724e27046bc3f1b24eb4e153f71da0ac1049127d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/724e27046bc3f1b24eb4e153f71da0ac1049127d"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "3a50546a16b3ab3755e022acb194db9d97b9f675", "filename": "gcc/testsuite/gcc.dg/pr102798.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b1b2a186d94b31a522395e9d02c9cec1b928cb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102798.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b1b2a186d94b31a522395e9d02c9cec1b928cb/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102798.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102798.c?ref=a5b1b2a186d94b31a522395e9d02c9cec1b928cb", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-tree-pta\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+__attribute__((__noipa__))\n+void BUF_reverse (unsigned char *out, const unsigned char *in, size_t size)\n+{\n+  size_t i;\n+  if (in)\n+    {\n+      out += size - 1;\n+      for (i = 0; i < size; i++)\n+        *out++ = *in++;\n+    }\n+  else\n+    {\n+      unsigned char *q;\n+      char c;\n+      q = out + size - 1;\n+      for (i = 0; i < size ; i++)\n+            {\n+              *out++ = 1;\n+            }\n+    }\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned char buf[40];\n+  unsigned char buf1[40];\n+  for (unsigned i = 0; i < sizeof (buf); i++)\n+    buf[i] = i;\n+  BUF_reverse (buf, 0, sizeof (buf));\n+  for (unsigned i = 0; i < sizeof (buf); i++)\n+    if (buf[i] != 1)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "a19045f7e4683d8b7c1c41c0851e02a1619b9461", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b1b2a186d94b31a522395e9d02c9cec1b928cb/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b1b2a186d94b31a522395e9d02c9cec1b928cb/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=a5b1b2a186d94b31a522395e9d02c9cec1b928cb", "patch": "@@ -4785,8 +4785,12 @@ vect_create_addr_base_for_vector_ref (vec_info *vinfo, stmt_vec_info stmt_info,\n \n   if (DR_PTR_INFO (dr)\n       && TREE_CODE (addr_base) == SSA_NAME\n-      && !SSA_NAME_PTR_INFO (addr_base))\n-    vect_duplicate_ssa_name_ptr_info (addr_base, dr_info);\n+      /* We should only duplicate pointer info to newly created SSA names.  */\n+      && SSA_NAME_VAR (addr_base) == dest)\n+    {\n+      gcc_assert (!SSA_NAME_PTR_INFO (addr_base));\n+      vect_duplicate_ssa_name_ptr_info (addr_base, dr_info);\n+    }\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location, \"created %T\\n\", addr_base);"}]}