{"sha": "454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU0ZmE3YTdkYmQwYWVlOTNiMWRiMjNlM2Q3MDQ3YjM1ODk3ZTZjNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-11T16:56:14Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-11T16:56:14Z"}, "message": "cp-tree.h (lang_decl_flags): Rename constructor_for_vbase_attr to has_in_charge_parm_p.\n\n\t* cp-tree.h (lang_decl_flags): Rename constructor_for_vbase_attr\n\tto has_in_charge_parm_p.\n\t(DECL_CONSTRUCTOR_FOR_VBASE_P): Rename to ...\n\t(DECL_HAS_IN_CHARGE_PARM_P): ... this.\n\t(DECL_COPY_CONSTRUCTOR_P): New macro.\n\t* call.c (add_function_candidate): Use DECL_HAS_IN_CHARGE_PARM_P.\n\t(build_user_type_conversion_1): Likewise.\n\t(convert_like_real): Likewise.\n\t(build_over_call): Likeiwse.  Use DECL_COPY_CONSTRUCTOR_P.\n\t* decl.c (grokdeclarator): Use DECL_HAS_IN_CHARGE_PARM_P.\n\t(copy_args_p): Likewise.\n\t(grok_ctor_properties): Likewise.\n\t(start_function): Likewise.\n\t* decl2.c (maybe_retrofit_in_charge): Likewise.  Set it.\n\t* error.c (dump_function_decl): Use DECL_HAS_IN_CHARGE_PARM_P.\n\t* init.c (emit_base_init): Use DECL_COPY_CONSTRUCTOR_P.\n\t* method.c (do_build_copy_constructor): Use\n\tDECL_HAS_IN_CHARGE_PARM_P.\n\t(synthesize_method): Likewise.\n\t* pt.c (instantiate_template): Remove goto.\n\t* tree.c (build_cplus_method_type): Remove mention of obstacks in\n\tcomment.\n\nFrom-SVN: r33080", "tree": {"sha": "15120d6f9393a649570d07809557b715b7b318a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15120d6f9393a649570d07809557b715b7b318a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/comments", "author": null, "committer": null, "parents": [{"sha": "0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acf7199cc1cdd108ad61ddb1b5999f2d510369e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0acf7199cc1cdd108ad61ddb1b5999f2d510369e"}], "stats": {"total": 112, "additions": 67, "deletions": 45}, "files": [{"sha": "95077ca7b47b87af68e674ca6df6ae5f3fd81b81", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -1,5 +1,28 @@\n 2000-04-11  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (lang_decl_flags): Rename constructor_for_vbase_attr\n+\tto has_in_charge_parm_p.\n+\t(DECL_CONSTRUCTOR_FOR_VBASE_P): Rename to ...\n+\t(DECL_HAS_IN_CHARGE_PARM_P): ... this.\n+\t(DECL_COPY_CONSTRUCTOR_P): New macro.\n+\t* call.c (add_function_candidate): Use DECL_HAS_IN_CHARGE_PARM_P.\n+\t(build_user_type_conversion_1): Likewise.\n+\t(convert_like_real): Likewise.\n+\t(build_over_call): Likeiwse.  Use DECL_COPY_CONSTRUCTOR_P.\n+\t* decl.c (grokdeclarator): Use DECL_HAS_IN_CHARGE_PARM_P.\n+\t(copy_args_p): Likewise.\n+\t(grok_ctor_properties): Likewise.\n+\t(start_function): Likewise.\n+\t* decl2.c (maybe_retrofit_in_charge): Likewise.  Set it.\n+\t* error.c (dump_function_decl): Use DECL_HAS_IN_CHARGE_PARM_P.\n+\t* init.c (emit_base_init): Use DECL_COPY_CONSTRUCTOR_P.\n+\t* method.c (do_build_copy_constructor): Use\n+\tDECL_HAS_IN_CHARGE_PARM_P.\n+\t(synthesize_method): Likewise.\n+\t* pt.c (instantiate_template): Remove goto.\n+\t* tree.c (build_cplus_method_type): Remove mention of obstacks in\n+\tcomment.\n+\t\n \t* cp-tre.h (finish_function): Change prototype.\n \t* decl.c (end_cleanup_fn): Adjust caller.\n \t(finish_function): Take only one parameter."}, {"sha": "040801b76ec47261c510a13c9b166077baeb91ce", "filename": "gcc/cp/call.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -1265,7 +1265,7 @@ add_function_candidate (candidates, fn, ctype, arglist, flags)\n     {\n       parmlist = TREE_CHAIN (parmlist);\n       arglist = TREE_CHAIN (arglist);\n-      if (TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn)))\n+      if (DECL_HAS_IN_CHARGE_PARM_P (fn))\n \t{\n \t  parmlist = TREE_CHAIN (parmlist);\n \t  arglist = TREE_CHAIN (arglist);\n@@ -2287,14 +2287,16 @@ build_user_type_conversion_1 (totype, expr, flags)\n \n   if (ctors)\n     {\n-      tree t = build_int_2 (0, 0);\n+      tree t;\n+\n+      ctors = TREE_VALUE (ctors);\n+\n+      t = build_int_2 (0, 0);\n       TREE_TYPE (t) = build_pointer_type (totype);\n       args = build_tree_list (NULL_TREE, expr);\n-      if (TYPE_USES_VIRTUAL_BASECLASSES (totype))\n+      if (DECL_HAS_IN_CHARGE_PARM_P (OVL_CURRENT (ctors)))\n \targs = tree_cons (NULL_TREE, integer_one_node, args);\n       args = tree_cons (NULL_TREE, t, args);\n-\n-      ctors = TREE_VALUE (ctors);\n     }\n   for (; ctors; ctors = OVL_NEXT (ctors))\n     {\n@@ -3658,7 +3660,7 @@ convert_like_real (convs, expr, fn, argnum, inner)\n \t    TREE_TYPE (t) = build_pointer_type (DECL_CONTEXT (fn));\n \n \t    args = build_tree_list (NULL_TREE, expr);\n-\t    if (TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn)))\n+\t    if (DECL_HAS_IN_CHARGE_PARM_P (fn))\n \t      args = tree_cons (NULL_TREE, integer_one_node, args);\n \t    args = tree_cons (NULL_TREE, t, args);\n \t  }\n@@ -3930,7 +3932,7 @@ build_over_call (cand, args, flags)\n       converted_args = tree_cons (NULL_TREE, TREE_VALUE (arg), converted_args);\n       arg = TREE_CHAIN (arg);\n       parm = TREE_CHAIN (parm);\n-      if (TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn)))\n+      if (DECL_HAS_IN_CHARGE_PARM_P (fn))\n \t{\n \t  converted_args = tree_cons\n \t    (NULL_TREE, TREE_VALUE (arg), converted_args);\n@@ -4031,13 +4033,12 @@ build_over_call (cand, args, flags)\n \n   if (! flag_elide_constructors)\n     /* Do things the hard way.  */;\n-  else if (DECL_CONSTRUCTOR_P (fn)\n-\t   && TREE_VEC_LENGTH (convs) == 1\n-\t   && copy_args_p (fn))\n+  else if (TREE_VEC_LENGTH (convs) == 1\n+\t   && DECL_COPY_CONSTRUCTOR_P (fn))\n     {\n       tree targ;\n       arg = TREE_CHAIN (converted_args);\n-      if (TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn)))\n+      if (DECL_HAS_IN_CHARGE_PARM_P (fn))\n \targ = TREE_CHAIN (arg);\n       arg = TREE_VALUE (arg);\n "}, {"sha": "b9fa50e7424d5b4999e47a5ab9a7205df84ca6fa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -1834,7 +1834,7 @@ struct lang_decl_flags\n   unsigned const_memfunc : 1;\n   unsigned volatile_memfunc : 1;\n   unsigned pure_virtual : 1;\n-  unsigned constructor_for_vbase_attr : 1;\n+  unsigned has_in_charge_parm_p : 1;\n \n   unsigned mutable_flag : 1;\n   unsigned deferred : 1;\n@@ -1909,6 +1909,10 @@ struct lang_decl\n /* For FUNCTION_DECLs: nonzero means that this function is a constructor.  */\n #define DECL_CONSTRUCTOR_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.constructor_attr)\n \n+/* Nonzero if NODE (a FUNCTION_DECL) is a copy constructor.  */\n+#define DECL_COPY_CONSTRUCTOR_P(NODE) \\\n+  (DECL_CONSTRUCTOR_P (NODE) && copy_args_p (NODE))\n+\n /* There ought to be a better way to find out whether or not something is\n    a destructor.  */\n #define DECL_DESTRUCTOR_P(NODE)\t\t\t\t\\\n@@ -1923,9 +1927,11 @@ struct lang_decl\n #define DECL_OVERLOADED_OPERATOR_P(NODE)\t\\\n   (IDENTIFIER_OPNAME_P (DECL_NAME ((NODE))))\n \n-/* For FUNCTION_DECLs: nonzero means that this function is a constructor\n-   for an object with virtual baseclasses.  */\n-#define DECL_CONSTRUCTOR_FOR_VBASE_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.constructor_for_vbase_attr)\n+/* For FUNCTION_DECLs: nonzero means that this function is a\n+   constructor or a destructor with an extra in-charge parameter to\n+   control whether or not virtual bases are constructed.  */\n+#define DECL_HAS_IN_CHARGE_PARM_P(NODE) \\\n+  (DECL_LANG_SPECIFIC (NODE)->decl_flags.has_in_charge_parm_p)\n \n /* Non-zero for a FUNCTION_DECL that declares a type-info function.\n    This only happens in the old abi.  */"}, {"sha": "a07cb3acad4d2ec302807e086c114b9b73b63438", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -11250,7 +11250,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t  TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (decl)));\n \n \t\t/* Skip the `in_chrg' argument too, if present.  */\n-\t\tif (TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (decl)))\n+\t\tif (DECL_HAS_IN_CHARGE_PARM_P (decl))\n \t\t  arg_types = TREE_CHAIN (arg_types);\n \n \t\tif (arg_types == void_list_node\n@@ -11968,8 +11968,7 @@ copy_args_p (d)\n     return 0;\n \n   t = FUNCTION_ARG_CHAIN (d);\n-  if (DECL_CONSTRUCTOR_P (d)\n-      && TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (d)))\n+  if (DECL_CONSTRUCTOR_P (d) && DECL_HAS_IN_CHARGE_PARM_P (d))\n     t = TREE_CHAIN (t);\n   if (t && TREE_CODE (TREE_VALUE (t)) == REFERENCE_TYPE\n       && (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_VALUE (t)))\n@@ -12000,7 +11999,7 @@ grok_ctor_properties (ctype, decl)\n      added to any ctor so we can tell if the class has been initialized\n      yet.  This could screw things up in this function, so we deliberately\n      ignore the leading int if we're in that situation.  */\n-  if (TYPE_USES_VIRTUAL_BASECLASSES (ctype))\n+  if (DECL_HAS_IN_CHARGE_PARM_P (decl))\n     {\n       my_friendly_assert (parmtypes\n \t\t\t  && TREE_VALUE (parmtypes) == integer_type_node,\n@@ -13444,8 +13443,7 @@ start_function (declspecs, declarator, attrs, flags)\n \n       /* Constructors and destructors need to know whether they're \"in\n \t charge\" of initializing virtual base classes.  */\n-      if (DECL_CONSTRUCTOR_FOR_VBASE_P (decl1)\n-\t  || DECL_DESTRUCTOR_P (decl1))\n+      if (DECL_HAS_IN_CHARGE_PARM_P (decl1))\n \tcurrent_in_charge_parm = TREE_CHAIN (t);\n     }\n \n@@ -13925,9 +13923,6 @@ finish_destructor_body ()\n    all the way to assembler language output.  The free the storage\n    for the function definition.\n \n-   This is called after parsing the body of the function definition.\n-   LINENO is the current line number.\n-\n    FLAGS is a bitwise or of the following values:\n      1 - CALL_POPLEVEL\n        An extra call to poplevel (and expand_end_bindings) must be"}, {"sha": "3e0a9df8c3979e5f158eda5aad20a09e9b59c0f7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -929,18 +929,15 @@ maybe_retrofit_in_chrg (fn)\n {\n   tree basetype, arg_types, parms, parm, fntype;\n \n-  if (DECL_CONSTRUCTOR_P (fn)\n-      && TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn))\n-      && ! DECL_CONSTRUCTOR_FOR_VBASE_P (fn))\n-    /* OK */;\n-  else if (! DECL_CONSTRUCTOR_P (fn)\n-\t   && TREE_CHAIN (DECL_ARGUMENTS (fn)) == NULL_TREE)\n-    /* OK */;\n-  else\n+  /* If we've already add the in-charge parameter don't do it again.  */\n+  if (DECL_HAS_IN_CHARGE_PARM_P (fn))\n     return;\n \n-  if (DECL_CONSTRUCTOR_P (fn))\n-    DECL_CONSTRUCTOR_FOR_VBASE_P (fn) = 1;\n+  /* We don't need an in-charge parameter for constructors that don't\n+     have virtual bases.  */\n+  if (DECL_CONSTRUCTOR_P (fn)\n+      && !TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn)))\n+    return;\n \n   /* First add it to DECL_ARGUMENTS...  */\n   parm = build_decl (PARM_DECL, in_charge_identifier, integer_type_node);\n@@ -962,6 +959,9 @@ maybe_retrofit_in_chrg (fn)\n     fntype = build_exception_variant (fntype,\n \t\t\t\t      TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fn)));\n   TREE_TYPE (fn) = fntype;\n+\n+  /* Now we've got the in-charge parameter.  */\n+  DECL_HAS_IN_CHARGE_PARM_P (fn) = 1;\n }\n \n /* Classes overload their constituent function names automatically."}, {"sha": "8f0fdf346e640aa71486a27931d31c0481fc0841", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -1169,8 +1169,8 @@ dump_function_decl (t, flags)\n     /* Skip \"this\" parameter.  */\n     parmtypes = TREE_CHAIN (parmtypes);\n     \n-  if (DECL_DESTRUCTOR_P (t) || DECL_CONSTRUCTOR_FOR_VBASE_P (t))\n-    /* Skip past \"in_charge\" identifier.  */\n+  /* Skip past the \"in_charge\" parameter.  */\n+  if (DECL_HAS_IN_CHARGE_PARM_P (t))\n     parmtypes = TREE_CHAIN (parmtypes);\n   \n   dump_parameters (parmtypes, flags);"}, {"sha": "d94c69c635bd76a2f0d8bfc4495bd334df67f6e5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -564,7 +564,8 @@ emit_base_init (t)\n       else if (TYPE_NEEDS_CONSTRUCTING (BINFO_TYPE (base_binfo)))\n \t{\n \t  init = NULL_TREE;\n-\t  if (extra_warnings && copy_args_p (current_function_decl))\n+\t  if (extra_warnings \n+\t      && DECL_COPY_CONSTRUCTOR_P (current_function_decl))\n \t    cp_warning (\"base class `%#T' should be explicitly initialized in the copy constructor\",\n \t\t\tBINFO_TYPE (base_binfo));\n \t}"}, {"sha": "c5e4805d7d99f7b9ccaa73473565b54cb823aed3", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -2179,7 +2179,7 @@ do_build_copy_constructor (fndecl)\n   tree parm = TREE_CHAIN (DECL_ARGUMENTS (fndecl));\n   tree t;\n \n-  if (TYPE_USES_VIRTUAL_BASECLASSES (current_class_type))\n+  if (DECL_HAS_IN_CHARGE_PARM_P (fndecl))\n     parm = TREE_CHAIN (parm);\n   parm = convert_from_reference (parm);\n \n@@ -2388,7 +2388,7 @@ synthesize_method (fndecl)\n   else\n     {\n       tree arg_chain = FUNCTION_ARG_CHAIN (fndecl);\n-      if (DECL_CONSTRUCTOR_FOR_VBASE_P (fndecl))\n+      if (DECL_HAS_IN_CHARGE_PARM_P (fndecl))\n \targ_chain = TREE_CHAIN (arg_chain);\n       if (arg_chain != void_list_node)\n \tdo_build_copy_constructor (fndecl);"}, {"sha": "0e3277e6d945115b3b9b0afa281d1b30fd443e3f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -7420,8 +7420,7 @@ instantiate_template (tmpl, targ_ptr)\n \t    {\n \t      cp_error (\"type `%T' composed from a local class is not a valid template-argument\", t);\n \t      cp_error (\"  trying to instantiate `%D'\", gen_tmpl);\n-\t      fndecl = error_mark_node;\n-\t      goto out;\n+\t      return error_mark_node;\n \t    }\n \t}\n     }\n@@ -7436,7 +7435,6 @@ instantiate_template (tmpl, targ_ptr)\n   if (flag_external_templates)\n     add_pending_template (fndecl);\n \n- out:\n   return fndecl;\n }\n "}, {"sha": "77973d6d59d85eb875e2abf5ce6f3069eef8bf4b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/454fa7a7dbd0aee93b1db23e3d7047b35897e6c6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=454fa7a7dbd0aee93b1db23e3d7047b35897e6c6", "patch": "@@ -460,9 +460,7 @@ build_cplus_method_type (basetype, rettype, argtypes)\n   ptype = build_pointer_type (basetype);\n \n   /* The actual arglist for this function includes a \"hidden\" argument\n-     which is \"this\".  Put it into the list of argument types.  Make\n-     sure that the new argument list is allocated on the same obstack\n-     as the type.  */\n+     which is \"this\".  Put it into the list of argument types.  */\n   argtypes = tree_cons (NULL_TREE, ptype, argtypes);\n   TYPE_ARG_TYPES (t) = argtypes;\n   TREE_SIDE_EFFECTS (argtypes) = 1;  /* Mark first argtype as \"artificial\".  */"}]}