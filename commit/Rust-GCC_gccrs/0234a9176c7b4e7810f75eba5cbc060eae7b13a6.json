{"sha": "0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzNGE5MTc2YzdiNGU3ODEwZjc1ZWJhNWNiYzA2MGVhZTdiMTNhNg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-08-21T07:54:19Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-08-21T07:54:19Z"}, "message": "libphobos: Merge upstream druntime 94686651\n\nAdds extern(C) bindings for version OpenBSD.\n\nReviewed-on: https://github.com/dlang/druntime/pull/2748\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES_OPENBSD): Add\n\tcore/sys/openbsd/sys/cdefs.d, core/sys/openbsd/sys/elf.d,\n\tcore/sys/openbsd/sys/elf32.d, core/sys/openbsd/sys/elf64.d,\n\tcore/sys/openbsd/sys/elf_common.d, core/sys/openbsd/sys/link_elf.d,\n\tcore/sys/openbsd/sys/mman.d, core/sys/openbsd/time.d.\n\t* libdruntime/Makefile.in: Regenerate.\n\nFrom-SVN: r274772", "tree": {"sha": "676bcff0a498aebf94608af533e84e4c2eb58925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/676bcff0a498aebf94608af533e84e4c2eb58925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "134d3a142d18580ddad1286206a759f40dd3cc20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134d3a142d18580ddad1286206a759f40dd3cc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134d3a142d18580ddad1286206a759f40dd3cc20"}], "stats": {"total": 3553, "additions": 3264, "deletions": 289}, "files": [{"sha": "f1576a43f8b47bf53ac0da090d5d1b4094d2b5c8", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -1,3 +1,12 @@\n+2019-08-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES_OPENBSD): Add\n+\tcore/sys/openbsd/sys/cdefs.d, core/sys/openbsd/sys/elf.d,\n+\tcore/sys/openbsd/sys/elf32.d, core/sys/openbsd/sys/elf64.d,\n+\tcore/sys/openbsd/sys/elf_common.d, core/sys/openbsd/sys/link_elf.d,\n+\tcore/sys/openbsd/sys/mman.d, core/sys/openbsd/time.d.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\n 2019-05-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* m4/druntime/os.m4 (DRUNTIME_OS_LINK_SPEC): Only use -z"}, {"sha": "507aad1f4dedd4bdc77cdf35b1e415033295026b", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -1,4 +1,4 @@\n-cb1583b4b7313bb6d79a5102b6c91e71f5181b19\n+94686651757294d608cfd5f053fda09dcf86695e\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "a2b4541c0e6e1c6f9fe9db4ac11ce497ddf30c96", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -162,21 +162,21 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n \tcore/vararg.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/emutls.d gcc/gthread.d gcc/sections/android.d \\\n-\tgcc/sections/elf_shared.d gcc/sections/osx.d \\\n-\tgcc/sections/package.d gcc/sections/win32.d gcc/sections/win64.d \\\n-\tgcc/unwind/arm.d gcc/unwind/arm_common.d gcc/unwind/c6x.d \\\n-\tgcc/unwind/generic.d gcc/unwind/package.d gcc/unwind/pe.d object.d \\\n-\trt/aApply.d rt/aApplyR.d rt/aaA.d rt/adi.d rt/arrayassign.d \\\n-\trt/arraycast.d rt/arraycat.d rt/cast_.d rt/config.d rt/critical_.d \\\n-\trt/deh.d rt/dmain2.d rt/invariant.d rt/lifetime.d rt/memory.d \\\n-\trt/minfo.d rt/monitor_.d rt/obj.d rt/qsort.d rt/sections.d \\\n-\trt/switch_.d rt/tlsgc.d rt/typeinfo/ti_Acdouble.d \\\n-\trt/typeinfo/ti_Acfloat.d rt/typeinfo/ti_Acreal.d \\\n-\trt/typeinfo/ti_Adouble.d rt/typeinfo/ti_Afloat.d rt/typeinfo/ti_Ag.d \\\n-\trt/typeinfo/ti_Aint.d rt/typeinfo/ti_Along.d rt/typeinfo/ti_Areal.d \\\n-\trt/typeinfo/ti_Ashort.d rt/typeinfo/ti_C.d rt/typeinfo/ti_byte.d \\\n-\trt/typeinfo/ti_cdouble.d rt/typeinfo/ti_cent.d rt/typeinfo/ti_cfloat.d \\\n-\trt/typeinfo/ti_char.d rt/typeinfo/ti_creal.d rt/typeinfo/ti_dchar.d \\\n+\tgcc/sections/elf_shared.d gcc/sections/osx.d gcc/sections/package.d \\\n+\tgcc/sections/win32.d gcc/sections/win64.d gcc/unwind/arm.d \\\n+\tgcc/unwind/arm_common.d gcc/unwind/c6x.d gcc/unwind/generic.d \\\n+\tgcc/unwind/package.d gcc/unwind/pe.d object.d rt/aApply.d rt/aApplyR.d \\\n+\trt/aaA.d rt/adi.d rt/arrayassign.d rt/arraycast.d rt/arraycat.d \\\n+\trt/cast_.d rt/config.d rt/critical_.d rt/deh.d rt/dmain2.d \\\n+\trt/invariant.d rt/lifetime.d rt/memory.d rt/minfo.d rt/monitor_.d \\\n+\trt/obj.d rt/qsort.d rt/sections.d rt/switch_.d rt/tlsgc.d \\\n+\trt/typeinfo/ti_Acdouble.d rt/typeinfo/ti_Acfloat.d \\\n+\trt/typeinfo/ti_Acreal.d rt/typeinfo/ti_Adouble.d \\\n+\trt/typeinfo/ti_Afloat.d rt/typeinfo/ti_Ag.d rt/typeinfo/ti_Aint.d \\\n+\trt/typeinfo/ti_Along.d rt/typeinfo/ti_Areal.d rt/typeinfo/ti_Ashort.d \\\n+\trt/typeinfo/ti_C.d rt/typeinfo/ti_byte.d rt/typeinfo/ti_cdouble.d \\\n+\trt/typeinfo/ti_cent.d rt/typeinfo/ti_cfloat.d rt/typeinfo/ti_char.d \\\n+\trt/typeinfo/ti_creal.d rt/typeinfo/ti_dchar.d \\\n \trt/typeinfo/ti_delegate.d rt/typeinfo/ti_double.d \\\n \trt/typeinfo/ti_float.d rt/typeinfo/ti_idouble.d \\\n \trt/typeinfo/ti_ifloat.d rt/typeinfo/ti_int.d rt/typeinfo/ti_ireal.d \\\n@@ -251,7 +251,11 @@ DRUNTIME_DSOURCES_NETBSD = core/sys/netbsd/dlfcn.d \\\n \tcore/sys/netbsd/sys/link_elf.d core/sys/netbsd/sys/mman.d \\\n \tcore/sys/netbsd/time.d\n \n-DRUNTIME_DSOURCES_OPENBSD = core/sys/openbsd/dlfcn.d\n+DRUNTIME_DSOURCES_OPENBSD = core/sys/openbsd/dlfcn.d \\\n+\tcore/sys/openbsd/sys/cdefs.d core/sys/openbsd/sys/elf.d \\\n+\tcore/sys/openbsd/sys/elf32.d core/sys/openbsd/sys/elf64.d \\\n+\tcore/sys/openbsd/sys/elf_common.d core/sys/openbsd/sys/link_elf.d \\\n+\tcore/sys/openbsd/sys/mman.d core/sys/openbsd/time.d\n \n DRUNTIME_DSOURCES_POSIX = core/sys/posix/aio.d \\\n \tcore/sys/posix/arpa/inet.d core/sys/posix/config.d \\"}, {"sha": "1b20f0a756a43da2becc72dbe63c5b093a23ca54", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -316,7 +316,12 @@ am__objects_17 = core/sys/netbsd/dlfcn.lo core/sys/netbsd/execinfo.lo \\\n \tcore/sys/netbsd/sys/event.lo core/sys/netbsd/sys/link_elf.lo \\\n \tcore/sys/netbsd/sys/mman.lo core/sys/netbsd/time.lo\n @DRUNTIME_OS_NETBSD_TRUE@am__objects_18 = $(am__objects_17)\n-am__objects_19 = core/sys/openbsd/dlfcn.lo\n+am__objects_19 = core/sys/openbsd/dlfcn.lo \\\n+\tcore/sys/openbsd/sys/cdefs.lo core/sys/openbsd/sys/elf.lo \\\n+\tcore/sys/openbsd/sys/elf32.lo core/sys/openbsd/sys/elf64.lo \\\n+\tcore/sys/openbsd/sys/elf_common.lo \\\n+\tcore/sys/openbsd/sys/link_elf.lo core/sys/openbsd/sys/mman.lo \\\n+\tcore/sys/openbsd/time.lo\n @DRUNTIME_OS_OPENBSD_TRUE@am__objects_20 = $(am__objects_19)\n am__objects_21 = core/sys/linux/config.lo core/sys/linux/dlfcn.lo \\\n \tcore/sys/linux/elf.lo core/sys/linux/epoll.lo \\\n@@ -758,21 +763,21 @@ DRUNTIME_DSOURCES = core/atomic.d core/attribute.d core/bitop.d \\\n \tcore/sync/rwmutex.d core/sync/semaphore.d core/thread.d core/time.d \\\n \tcore/vararg.d gcc/attribute.d gcc/backtrace.d gcc/builtins.d gcc/deh.d \\\n \tgcc/emutls.d gcc/gthread.d gcc/sections/android.d \\\n-\tgcc/sections/elf_shared.d gcc/sections/osx.d \\\n-\tgcc/sections/package.d gcc/sections/win32.d gcc/sections/win64.d \\\n-\tgcc/unwind/arm.d gcc/unwind/arm_common.d gcc/unwind/c6x.d \\\n-\tgcc/unwind/generic.d gcc/unwind/package.d gcc/unwind/pe.d object.d \\\n-\trt/aApply.d rt/aApplyR.d rt/aaA.d rt/adi.d rt/arrayassign.d \\\n-\trt/arraycast.d rt/arraycat.d rt/cast_.d rt/config.d rt/critical_.d \\\n-\trt/deh.d rt/dmain2.d rt/invariant.d rt/lifetime.d rt/memory.d \\\n-\trt/minfo.d rt/monitor_.d rt/obj.d rt/qsort.d rt/sections.d \\\n-\trt/switch_.d rt/tlsgc.d rt/typeinfo/ti_Acdouble.d \\\n-\trt/typeinfo/ti_Acfloat.d rt/typeinfo/ti_Acreal.d \\\n-\trt/typeinfo/ti_Adouble.d rt/typeinfo/ti_Afloat.d rt/typeinfo/ti_Ag.d \\\n-\trt/typeinfo/ti_Aint.d rt/typeinfo/ti_Along.d rt/typeinfo/ti_Areal.d \\\n-\trt/typeinfo/ti_Ashort.d rt/typeinfo/ti_C.d rt/typeinfo/ti_byte.d \\\n-\trt/typeinfo/ti_cdouble.d rt/typeinfo/ti_cent.d rt/typeinfo/ti_cfloat.d \\\n-\trt/typeinfo/ti_char.d rt/typeinfo/ti_creal.d rt/typeinfo/ti_dchar.d \\\n+\tgcc/sections/elf_shared.d gcc/sections/osx.d gcc/sections/package.d \\\n+\tgcc/sections/win32.d gcc/sections/win64.d gcc/unwind/arm.d \\\n+\tgcc/unwind/arm_common.d gcc/unwind/c6x.d gcc/unwind/generic.d \\\n+\tgcc/unwind/package.d gcc/unwind/pe.d object.d rt/aApply.d rt/aApplyR.d \\\n+\trt/aaA.d rt/adi.d rt/arrayassign.d rt/arraycast.d rt/arraycat.d \\\n+\trt/cast_.d rt/config.d rt/critical_.d rt/deh.d rt/dmain2.d \\\n+\trt/invariant.d rt/lifetime.d rt/memory.d rt/minfo.d rt/monitor_.d \\\n+\trt/obj.d rt/qsort.d rt/sections.d rt/switch_.d rt/tlsgc.d \\\n+\trt/typeinfo/ti_Acdouble.d rt/typeinfo/ti_Acfloat.d \\\n+\trt/typeinfo/ti_Acreal.d rt/typeinfo/ti_Adouble.d \\\n+\trt/typeinfo/ti_Afloat.d rt/typeinfo/ti_Ag.d rt/typeinfo/ti_Aint.d \\\n+\trt/typeinfo/ti_Along.d rt/typeinfo/ti_Areal.d rt/typeinfo/ti_Ashort.d \\\n+\trt/typeinfo/ti_C.d rt/typeinfo/ti_byte.d rt/typeinfo/ti_cdouble.d \\\n+\trt/typeinfo/ti_cent.d rt/typeinfo/ti_cfloat.d rt/typeinfo/ti_char.d \\\n+\trt/typeinfo/ti_creal.d rt/typeinfo/ti_dchar.d \\\n \trt/typeinfo/ti_delegate.d rt/typeinfo/ti_double.d \\\n \trt/typeinfo/ti_float.d rt/typeinfo/ti_idouble.d \\\n \trt/typeinfo/ti_ifloat.d rt/typeinfo/ti_int.d rt/typeinfo/ti_ireal.d \\\n@@ -846,7 +851,12 @@ DRUNTIME_DSOURCES_NETBSD = core/sys/netbsd/dlfcn.d \\\n \tcore/sys/netbsd/sys/link_elf.d core/sys/netbsd/sys/mman.d \\\n \tcore/sys/netbsd/time.d\n \n-DRUNTIME_DSOURCES_OPENBSD = core/sys/openbsd/dlfcn.d\n+DRUNTIME_DSOURCES_OPENBSD = core/sys/openbsd/dlfcn.d \\\n+\tcore/sys/openbsd/sys/cdefs.d core/sys/openbsd/sys/elf.d \\\n+\tcore/sys/openbsd/sys/elf32.d core/sys/openbsd/sys/elf64.d \\\n+\tcore/sys/openbsd/sys/elf_common.d core/sys/openbsd/sys/link_elf.d \\\n+\tcore/sys/openbsd/sys/mman.d core/sys/openbsd/time.d\n+\n DRUNTIME_DSOURCES_POSIX = core/sys/posix/aio.d \\\n \tcore/sys/posix/arpa/inet.d core/sys/posix/config.d \\\n \tcore/sys/posix/dirent.d core/sys/posix/dlfcn.d core/sys/posix/fcntl.d \\\n@@ -1414,6 +1424,19 @@ core/sys/openbsd/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/openbsd\n \t@: > core/sys/openbsd/$(am__dirstamp)\n core/sys/openbsd/dlfcn.lo: core/sys/openbsd/$(am__dirstamp)\n+core/sys/openbsd/sys/$(am__dirstamp):\n+\t@$(MKDIR_P) core/sys/openbsd/sys\n+\t@: > core/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/sys/cdefs.lo: core/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/sys/elf.lo: core/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/sys/elf32.lo: core/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/sys/elf64.lo: core/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/sys/elf_common.lo:  \\\n+\tcore/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/sys/link_elf.lo:  \\\n+\tcore/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/sys/mman.lo: core/sys/openbsd/sys/$(am__dirstamp)\n+core/sys/openbsd/time.lo: core/sys/openbsd/$(am__dirstamp)\n core/sys/linux/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/linux\n \t@: > core/sys/linux/$(am__dirstamp)\n@@ -1753,6 +1776,8 @@ mostlyclean-compile:\n \t-rm -f core/sys/netbsd/sys/*.lo\n \t-rm -f core/sys/openbsd/*.$(OBJEXT)\n \t-rm -f core/sys/openbsd/*.lo\n+\t-rm -f core/sys/openbsd/sys/*.$(OBJEXT)\n+\t-rm -f core/sys/openbsd/sys/*.lo\n \t-rm -f core/sys/posix/*.$(OBJEXT)\n \t-rm -f core/sys/posix/*.lo\n \t-rm -f core/sys/posix/arpa/*.$(OBJEXT)\n@@ -1871,6 +1896,7 @@ clean-libtool:\n \t-rm -rf core/sys/netbsd/.libs core/sys/netbsd/_libs\n \t-rm -rf core/sys/netbsd/sys/.libs core/sys/netbsd/sys/_libs\n \t-rm -rf core/sys/openbsd/.libs core/sys/openbsd/_libs\n+\t-rm -rf core/sys/openbsd/sys/.libs core/sys/openbsd/sys/_libs\n \t-rm -rf core/sys/posix/.libs core/sys/posix/_libs\n \t-rm -rf core/sys/posix/arpa/.libs core/sys/posix/arpa/_libs\n \t-rm -rf core/sys/posix/net/.libs core/sys/posix/net/_libs\n@@ -2025,6 +2051,7 @@ distclean-generic:\n \t-rm -f core/sys/netbsd/$(am__dirstamp)\n \t-rm -f core/sys/netbsd/sys/$(am__dirstamp)\n \t-rm -f core/sys/openbsd/$(am__dirstamp)\n+\t-rm -f core/sys/openbsd/sys/$(am__dirstamp)\n \t-rm -f core/sys/posix/$(am__dirstamp)\n \t-rm -f core/sys/posix/arpa/$(am__dirstamp)\n \t-rm -f core/sys/posix/net/$(am__dirstamp)"}, {"sha": "e7bdd29984b2b281858353f95c12097b84b736de", "filename": "libphobos/libdruntime/core/stdc/assert_.d", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fassert_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fassert_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fassert_.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -60,6 +60,15 @@ else version (NetBSD)\n      */\n     void __assert(const(char)* file, int line, const(char)* exp);\n }\n+else version (OpenBSD)\n+{\n+    /***\n+     * Assert failure function in the NetBSD C library.\n+     */\n+    void __assert(const(char)* file, int line, const(char)* exp);\n+    ///\n+    void __assert2(const(char)* file, int line, const(char)* func, const(char)* exp);\n+}\n else version (DragonFlyBSD)\n {\n     /***"}, {"sha": "492978939d86f77f8036ed46c0bc48070967ff85", "filename": "libphobos/libdruntime/core/stdc/math.d", "status": "modified", "additions": 226, "deletions": 227, "changes": 453, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -2935,407 +2935,406 @@ else version (NetBSD)\n else version (OpenBSD)\n {\n     ///\n-    real    acosl(real x);\n+    double acos(double x);\n     ///\n-    real    asinl(real x);\n+    double asin(double x);\n     ///\n-    pure real    atanl(real x);\n+    pure double atan(double x);\n     ///\n-    real    atan2l(real y, real x);\n+    double atan2(double, double);\n     ///\n-    pure real    cosl(real x);\n+    pure double cos(double x);\n     ///\n-    pure real    sinl(real x);\n+    pure double sin(double x);\n     ///\n-    pure real    tanl(real x);\n+    pure double tan(double x);\n     ///\n-    real    acoshl(real x);\n+    double cosh(double x);\n     ///\n-    pure real    asinhl(real x);\n+    double sinh(double x);\n     ///\n-    real    atanhl(real x);\n+    pure double tanh(double x);\n     ///\n-    real    coshl(real x);\n+    double exp(double x);\n     ///\n-    real    sinhl(real x);\n+    pure double frexp(double, int *exp);\n     ///\n-    pure real    tanhl(real x);\n+    double ldexp(double, int exp);\n     ///\n-    real    expl(real x);\n+    double log(double x);\n     ///\n-    real    exp2l(real x);\n+    double log10(double x);\n     ///\n-    real    expm1l(real x);\n+    pure double modf(double x, double *iptr);\n     ///\n-    pure real    frexpl(real value, int* exp);\n+    double pow(double x, double y);\n     ///\n-    int     ilogbl(real x);\n+    double sqrt(double x);\n     ///\n-    real    ldexpl(real x, int exp);\n+    pure double ceil(double x);\n     ///\n-    real    logbl(real x);\n+    pure double fabs(double x);\n     ///\n-    real    logb10l(real x);\n+    pure double floor(double x);\n     ///\n-    real    logb1pl(real x);\n+    double fmod(double x, double);\n     ///\n-    real    logb2l(real x);\n+    double acosh(double x);\n     ///\n-    real    logbl(real x);\n+    pure double asinh(double x);\n     ///\n-    pure real    modfl(real value, real *iptr);\n+    double atanh(double x);\n     ///\n-    real    scalbnl(real x, int n);\n+    double exp2(double x);\n     ///\n-    real    scalblnl(real x, c_long n);\n+    double expm1(double x);\n     ///\n-    pure real    cbrtl(real x);\n+    int ilogb(double x);\n     ///\n-    pure real    fabsl(real x);\n+    double log1p(double x);\n     ///\n-    real    hypotl(real x, real y);\n+    double log2(double x);\n     ///\n-    real    powl(real x, real y);\n+    double logb(double x);\n     ///\n-    real    sqrtl(real x);\n+    double scalbn(double x, int n);\n     ///\n-    pure real    ceill(real x);\n+    double scalbln(double x, c_long n);\n     ///\n-    pure real    floorl(real x);\n+    pure double cbrt(double x);\n     ///\n-    pure real    nearbyintl(real x);\n+    double hypot(double x, double y);\n     ///\n-    pure real    rintl(real x);\n+    pure double erf(double x);\n     ///\n-    c_long  lrintl(real x);\n+    double erfc(double x);\n     ///\n-    long    llrintl(real x);\n+    double lgamma(double x);\n     ///\n-    pure real    roundl(real x);\n+    double tgamma(double x);\n     ///\n-    c_long  lroundl(real x);\n+    pure double nearbyint(double x);\n     ///\n-    long    llroundl(real x);\n+    pure double rint(double x);\n     ///\n-    pure real    truncl(real x);\n+    c_long lrint(double x);\n     ///\n-    real    fmodl(real x, real y);\n+    long llrint(double x);\n     ///\n-    real    remainderl(real x, real y);\n+    pure double round(double x);\n     ///\n-    real    remquol(real x, real y, int* quo);\n+    c_long lround(double x);\n     ///\n-    pure real    copysignl(real x, real y);\n+    long  llround(double x);\n     ///\n-    pure double  nan(char* tagp);\n+    pure double trunc(double x);\n     ///\n-    pure float   nanf(char* tagp);\n+    double remainder(double x , double y);\n     ///\n-    pure real    nanl(char* tagp);\n+    double remquo(double x, double y, int * quo);\n     ///\n-    real    nextafterl(real x, real y);\n+    pure double copysign(double x, double y);\n     ///\n-    real    nexttowardl(real x, real y);\n+    pure double nan(const char *);\n     ///\n-    real    fdiml(real x, real y);\n+    double nextafter(double x, double y);\n     ///\n-    pure real    fmaxl(real x, real y);\n+    double nexttoward(double x, real y);\n     ///\n-    pure real    fminl(real x, real y);\n+    double fdim(double x, double y);\n     ///\n-    pure real    fmal(real x, real y, real z);\n-\n+    pure double fmax(double x, double y);\n     ///\n-    double  acos(double x);\n+    pure double fmin(double x, double y);\n     ///\n-    float   acosf(float x);\n-\n+    pure double fma(double x, double y, double z);\n     ///\n-    double  asin(double x);\n+    double j0(double x);\n     ///\n-    float   asinf(float x);\n-\n+    double j1(double x);\n     ///\n-    pure double  atan(double x);\n+    double jn(int, double);\n     ///\n-    pure float   atanf(float x);\n-\n+    double y0(double x);\n     ///\n-    double  atan2(double y, double x);\n+    double y1(double x);\n     ///\n-    float   atan2f(float y, float x);\n-\n+    double yn(int, double);\n     ///\n-    pure double  cos(double x);\n+    double gamma(double x);\n     ///\n-    pure float   cosf(float x);\n-\n+    double scalb(double x, double y);\n     ///\n-    pure double  sin(double x);\n+    double drem(double x, double y);\n     ///\n-    pure float   sinf(float x);\n-\n+    int finite(double x);\n     ///\n-    pure double  tan(double x);\n+    double gamma_r(double x, int *);\n     ///\n-    pure float   tanf(float x);\n+    double lgamma_r(double x, int *);\n+    ///\n+    double significand(double x);\n \n     ///\n-    double  acosh(double x);\n+    float acosf(float x);\n     ///\n-    float   acoshf(float x);\n-\n+    float asinf(float x);\n     ///\n-    pure double  asinh(double x);\n+    pure float atanf(float x);\n     ///\n-    pure float   asinhf(float x);\n-\n+    float atan2f(float x, float y);\n     ///\n-    double  atanh(double x);\n+    pure float cosf(float x);\n     ///\n-    float   atanhf(float x);\n-\n+    pure float sinf(float x);\n     ///\n-    double  cosh(double x);\n+    pure float tanf(float x);\n     ///\n-    float   coshf(float x);\n-\n+    float acoshf(float x);\n     ///\n-    double  sinh(double x);\n+    pure float asinhf(float x);\n     ///\n-    float   sinhf(float x);\n-\n+    float atanhf(float x);\n     ///\n-    pure double  tanh(double x);\n+    float coshf(float x);\n     ///\n-    pure float   tanhf(float x);\n-\n+    float sinhf(float x);\n     ///\n-    double  exp(double x);\n+    pure float tanhf(float x);\n     ///\n-    float   expf(float x);\n-\n+    float expf(float x);\n     ///\n-    double  exp2(double x);\n+    float exp2f(float x);\n     ///\n-    float   exp2f(float x);\n+    float expm1f(float x);\n     ///\n-    real    exp2l(real x);\n-\n+    pure float frexpf(float x, int *exp);\n     ///\n-    double  expm1(double x);\n+    int ilogbf(float x);\n     ///\n-    float   expm1f(float x);\n-\n+    float ldexpf(float x, int exp);\n     ///\n-    pure double  frexp(double value, int* exp);\n+    float logf(float x);\n     ///\n-    pure float   frexpf(float value, int* exp);\n-\n+    float log10f(float x);\n     ///\n-    int     ilogb(double x);\n+    float log1pf(float x);\n     ///\n-    int     ilogbf(float x);\n-\n+    float log2f(float x);\n     ///\n-    double  ldexp(double x, int exp);\n+    float logbf(float x);\n     ///\n-    float   ldexpf(float x, int exp);\n-\n+    pure float modff(float x, float *iptr);\n     ///\n-    double  log(double x);\n+    float scalbnf(float x, int y);\n     ///\n-    float   logf(float x);\n-\n+    float scalblnf(float x, c_long y);\n     ///\n-    double  log10(double x);\n+    pure float cbrtf(float x);\n     ///\n-    float   log10f(float x);\n-\n+    pure float fabsf(float x);\n     ///\n-    double  log1p(double x);\n+    float hypotf(float x, float y);\n     ///\n-    float   log1pf(float x);\n-\n+    float powf(float x, float y);\n     ///\n-    double  log2(double x);\n+    float sqrtf(float x);\n     ///\n-    float   log2f(float x);\n+    pure float erff(float x);\n     ///\n-    real    log2l(real x);\n-\n+    float erfcf(float x);\n     ///\n-    double  logb(double x);\n+    float lgammaf(float x);\n     ///\n-    float   logbf(float x);\n-\n+    float tgammaf(float x);\n     ///\n-    pure double  modf(double value, double* iptr);\n+    pure float ceilf(float x);\n     ///\n-    pure float   modff(float value, float* iptr);\n-\n+    pure float floorf(float x);\n     ///\n-    double  scalbn(double x, int n);\n+    pure float nearbyintf(float x);\n     ///\n-    float   scalbnf(float x, int n);\n-\n+    pure float rintf(float x);\n     ///\n-    double  scalbln(double x, c_long n);\n+    c_long lrintf(float x);\n     ///\n-    float   scalblnf(float x, c_long n);\n-\n+    long llrintf(float x);\n     ///\n-    pure double  cbrt(double x);\n+    pure float roundf(float x);\n     ///\n-    pure float   cbrtf(float x);\n-\n+    c_long lroundf(float x);\n     ///\n-    pure double  fabs(double x);\n+    long llroundf(float x);\n     ///\n-    pure float   fabsf(float x);\n-\n+    pure float truncf(float x);\n     ///\n-    double  hypot(double x, double y);\n+    pure float fmodf(float x, float y);\n     ///\n-    float   hypotf(float x, float y);\n-\n+    float remainderf(float x, float y);\n     ///\n-    double  pow(double x, double y);\n+    float remquof(float x, float y, int *iptr);\n     ///\n-    float   powf(float x, float y);\n-\n+    pure float copysignf(float x, float y);\n     ///\n-    double  sqrt(double x);\n+    pure float nanf(const char *);\n     ///\n-    float   sqrtf(float x);\n-\n+    float nextafterf(float x, float y);\n     ///\n-    pure double  erf(double x);\n+    float nexttowardf(float x, real y);\n     ///\n-    pure float   erff(float x);\n+    float fdimf(float x, float y);\n     ///\n-    pure real    erfl(real x);\n-\n+    pure float fmaxf(float x, float y);\n     ///\n-    double  erfc(double x);\n+    pure float fminf(float x, float y);\n     ///\n-    float   erfcf(float x);\n+    pure float fmaf(float x, float y, float z);\n     ///\n-    real    erfcl(real x);\n-\n+    float j0f(float x);\n     ///\n-    double  lgamma(double x);\n+    float j1f(float x);\n     ///\n-    float   lgammaf(float x);\n+    float jnf(int, float);\n     ///\n-    real    lgammal(real x);\n-\n+    float scalbf(float x, float);\n     ///\n-    double  tgamma(double x);\n+    float y0f(float x);\n     ///\n-    float   tgammaf(float x);\n+    float y1f(float x);\n     ///\n-    real    tgammal(real x);\n-\n+    float ynf(int, float);\n     ///\n-    pure double  ceil(double x);\n+    float gammaf(float x);\n     ///\n-    pure float   ceilf(float x);\n-\n+    float dremf(float x, float);\n     ///\n-    pure double  floor(double x);\n+    pure int finitef(float x);\n     ///\n-    pure float   floorf(float x);\n-\n+    pure int isinff(float x);\n     ///\n-    pure double  nearbyint(double x);\n+    pure int isnanf(float x);\n     ///\n-    pure float   nearbyintf(float x);\n-\n+    float gammaf_r(float x, int *);\n     ///\n-    pure double  rint(double x);\n+    float lgammaf_r(float x, int *);\n+    ///\n+    float significandf(float x);\n     ///\n-    pure float   rintf(float x);\n \n     ///\n-    c_long  lrint(double x);\n+    pure real acosl(real x);\n     ///\n-    c_long  lrintf(float x);\n-\n+    pure real asinl(real x);\n     ///\n-    long    llrint(double x);\n+    pure real atanl(real x);\n     ///\n-    long    llrintf(float x);\n-\n+    real atan2l(real x, real y);\n     ///\n-    pure double  round(double x);\n+    pure real cosl(real x);\n     ///\n-    pure float   roundf(float x);\n-\n+    pure real sinl(real x);\n     ///\n-    c_long  lround(double x);\n+    pure real tanl(real x);\n     ///\n-    c_long  lroundf(float x);\n-\n+    real acoshl(real x);\n     ///\n-    long    llround(double x);\n+    pure real asinhl(real x);\n     ///\n-    long    llroundf(float x);\n-\n+    real atanhl(real x);\n     ///\n-    pure double  trunc(double x);\n+    real coshl(real x);\n     ///\n-    pure float   truncf(float x);\n-\n+    real sinhl(real x);\n     ///\n-    double  fmod(double x, double y);\n+    pure real tanhl(real x);\n     ///\n-    float   fmodf(float x, float y);\n-\n+    real expl(real x);\n     ///\n-    double  remainder(double x, double y);\n+    real exp2l(real x);\n     ///\n-    float   remainderf(float x, float y);\n-\n+    real expm1l(real x);\n     ///\n-    double  remquo(double x, double y, int* quo);\n+    pure real frexpl(real x, int *exp);\n     ///\n-    float   remquof(float x, float y, int* quo);\n-\n+    int ilogbl(real x);\n     ///\n-    pure double  copysign(double x, double y);\n+    real ldexpl(real x, int exp);\n     ///\n-    pure float   copysignf(float x, float y);\n-\n+    real logl(real x);\n     ///\n-    double  nextafter(double x, double y);\n+    real log10l(real x);\n     ///\n-    float   nextafterf(float x, float y);\n-\n+    real log1pl(real x);\n     ///\n-    double  nexttoward(double x, real y);\n+    real log2l(real x);\n     ///\n-    float   nexttowardf(float x, real y);\n-\n+    real logbl(real x);\n     ///\n-    double  fdim(double x, double y);\n+    pure real modfl(real x, real *iptr);\n     ///\n-    float   fdimf(float x, float y);\n-\n+    real scalbnl(real x, int y);\n     ///\n-    pure double  fmax(double x, double y);\n+    real scalblnl(real x, c_long y);\n     ///\n-    pure float   fmaxf(float x, float y);\n-\n+    pure real cbrtl(real x);\n     ///\n-    pure double  fmin(double x, double y);\n+    pure real fabsl(real x);\n     ///\n-    pure float   fminf(float x, float y);\n-\n+    real hypotl(real x, real y);\n     ///\n-    pure double  fma(double x, double y, double z);\n+    real powl(real x, real y);\n     ///\n-    pure float   fmaf(float x, float y, float z);\n+    real sqrtl(real x);\n+    ///\n+    pure real erfl(real x);\n+    ///\n+    real erfcl(real x);\n+    ///\n+    real lgammal(real x);\n+    ///\n+    real tgammal(real x);\n+    ///\n+    pure real ceill(real x);\n+    ///\n+    pure real floorl(real x);\n+    ///\n+    pure real nearbyintl(real x);\n+    ///\n+    pure real rintl(real x);\n+    ///\n+    c_long lrintl(real x);\n+    ///\n+    long llrintl(real x);\n+    ///\n+    pure real roundl(real x);\n+    ///\n+    c_long lroundl(real x);\n+    ///\n+    long llroundl(real x);\n+    ///\n+    pure real truncl(real x);\n+    ///\n+    pure real fmodl(real x, real);\n+    ///\n+    pure real remainderl(real x, real);\n+    ///\n+    pure real remquol(real x, real y, int *iptr);\n+    ///\n+    pure real copysignl(real x, real y);\n+    ///\n+    pure real nanl(const char *);\n+    ///\n+    real nextafterl(real x, real y);\n+    ///\n+    real nexttowardl(real x, real y);\n+    ///\n+    real fdiml(real x, real y);\n+    ///\n+    pure real fmaxl(real x, real y);\n+    ///\n+    pure real fminl(real x, real y);\n+    ///\n+    pure real fmal(real x, real, real);\n }\n else version (DragonFlyBSD)\n {"}, {"sha": "e68f393e3e618b6840af2285825040965492ce02", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -425,12 +425,23 @@ else version (CRuntime_Glibc)\n         void*   _markers;\n         _IO_FILE* _chain;\n         int     _fileno;\n-        int     _blksize;\n-        int     _old_offset;\n+        int     _flags2;\n+        ptrdiff_t _old_offset;\n         ushort  _cur_column;\n         byte    _vtable_offset;\n         char[1] _shortbuf = 0;\n         void*   _lock;\n+\n+        ptrdiff_t _offset;\n+\n+        /*_IO_codecvt*/ void* _codecvt;\n+        /*_IO_wide_data*/ void* _wide_data;\n+        _IO_FILE *_freeres_list;\n+        void *_freeres_buf;\n+        size_t __pad5;\n+        int _mode;\n+\n+        char[15 * int.sizeof - 4 * (void*).sizeof - size_t.sizeof] _unused2;\n     }\n \n     ///\n@@ -620,6 +631,8 @@ else version (OpenBSD)\n         fpos_t          _offset;\n     }\n \n+    ///\n+    alias __sFILE _iobuf;\n     ///\n     alias shared(__sFILE) FILE;\n }\n@@ -994,14 +1007,16 @@ else version (OpenBSD)\n         _IONBF = 2,\n     }\n \n-    private extern shared FILE[] __sF;\n-\n+    private extern __gshared FILE[3] __sF;\n+    @property auto __stdin()() { return &__sF[0]; }\n+    @property auto __stdout()() { return &__sF[1]; }\n+    @property auto __stderr()() { return &__sF[2]; }\n     ///\n-    shared stdin  = &__sF[0];\n+    alias __stdin stdin;\n     ///\n-    shared stdout = &__sF[1];\n+    alias __stdout stdout;\n     ///\n-    shared stderr = &__sF[2];\n+    alias __stderr stderr;\n }\n else version (DragonFlyBSD)\n {\n@@ -1476,17 +1491,17 @@ else version (OpenBSD)\n     @trusted private\n     {\n         ///\n-        pure void clearerr(FILE*);\n-        alias __clearerr = clearerr;\n+        pragma(mangle, \"clearerr\")\n+        pure void __clearerr(FILE*);\n         ///\n-        pure int  feof(FILE*);\n-        alias __feof = feof;\n+        pragma(mangle, \"feof\")\n+        pure int __feof(FILE*);\n         ///\n-        pure int  ferror(FILE*);\n-        alias __ferror = ferror;\n+        pragma(mangle, \"ferror\")\n+        pure int __ferror(FILE*);\n         ///\n-        int  fileno(FILE*);\n-        alias __fileno = fileno;\n+        pragma(mangle, \"fileno\")\n+        int __fileno(FILE*);\n     }\n \n     enum __SLBF = 0x0001;\n@@ -1506,9 +1521,9 @@ else version (OpenBSD)\n     enum __SALC = 0x4000;\n     enum __SIGN = 0x8000;\n \n-    extern int __isthreaded;\n+    extern immutable __gshared int __isthreaded;\n \n-    extern (D)\n+    extern (D) @trusted\n     {\n         void __sclearerr()(FILE* p)\n         {\n@@ -1530,17 +1545,17 @@ else version (OpenBSD)\n             return p._file;\n         }\n \n-        int clearerr()(FILE* file)\n+        pure void clearerr()(FILE* file)\n         {\n-            return !__isthreaded ? __sclearerr(file) : __clearerr(file);\n+            !__isthreaded ? __sclearerr(file) : __clearerr(file);\n         }\n \n-        int feof()(FILE* file)\n+        pure int feof()(FILE* file)\n         {\n             return !__isthreaded ? __sfeof(file) : __feof(file);\n         }\n \n-        int ferror()(FILE* file)\n+        pure int ferror()(FILE* file)\n         {\n             return !__isthreaded ? __sferror(file) : __ferror(file);\n         }"}, {"sha": "63d136c1658180a3a39ddcc55e8c3586d48a145c", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/cdefs.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fcdefs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fcdefs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fcdefs.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -0,0 +1,15 @@\n+/**\n+ * D header file for OpenBSD\n+ *\n+ * Authors: Iain Buclaw\n+ */\n+module core.sys.openbsd.sys.cdefs;\n+\n+version (OpenBSD):\n+\n+public import core.sys.posix.config;\n+\n+enum __XPG_VISIBLE = 700;\n+enum __POSIX_VISIBLE = 200809;\n+enum __ISO_C_VISIBLE = 1999;\n+enum __BSD_VISIBLE = true;"}, {"sha": "61bb746fce2144eb585372ac28beb32a9df41abf", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/elf.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -0,0 +1,12 @@\n+/**\n+ * D header file for OpenBSD.\n+ *\n+ * Authors:  Iain Buclaw\n+ * Based-on: core/sys/freebsd/sys\n+ */\n+module core.sys.openbsd.sys.elf;\n+\n+version (OpenBSD):\n+\n+public import core.sys.openbsd.sys.elf32;\n+public import core.sys.openbsd.sys.elf64;"}, {"sha": "cefee38f116e016e75b74ac3129a09734fe7dabb", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/elf32.d", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf32.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf32.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf32.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -0,0 +1,187 @@\n+/**\n+ * D header file for OpenBSD.\n+ *\n+ * Authors:  Iain Buclaw\n+ * Based-on: core/sys/freebsd/sys\n+ */\n+module core.sys.openbsd.sys.elf32;\n+\n+version (OpenBSD):\n+\n+extern (C):\n+\n+import core.stdc.stdint;\n+public import core.sys.openbsd.sys.elf_common;\n+\n+alias uint16_t Elf32_Half;\n+alias uint32_t Elf32_Word;\n+alias int32_t  Elf32_Sword;\n+alias uint64_t Elf32_Lword;\n+alias uint32_t Elf32_Addr;\n+alias uint32_t Elf32_Off;\n+alias Elf32_Word Elf32_Hashelt;\n+alias Elf32_Word Elf32_Size;\n+alias Elf32_Sword Elf32_Ssize;\n+\n+struct Elf32_Ehdr\n+{\n+    char[EI_NIDENT] e_ident = 0;\n+    Elf32_Half    e_type;\n+    Elf32_Half    e_machine;\n+    Elf32_Word    e_version;\n+    Elf32_Addr    e_entry;\n+    Elf32_Off     e_phoff;\n+    Elf32_Off     e_shoff;\n+    Elf32_Word    e_flags;\n+    Elf32_Half    e_ehsize;\n+    Elf32_Half    e_phentsize;\n+    Elf32_Half    e_phnum;\n+    Elf32_Half    e_shentsize;\n+    Elf32_Half    e_shnum;\n+    Elf32_Half    e_shstrndx;\n+}\n+\n+struct Elf32_Shdr\n+{\n+    Elf32_Word    sh_name;\n+    Elf32_Word    sh_type;\n+    Elf32_Word    sh_flags;\n+    Elf32_Addr    sh_addr;\n+    Elf32_Off     sh_offset;\n+    Elf32_Word    sh_size;\n+    Elf32_Word    sh_link;\n+    Elf32_Word    sh_info;\n+    Elf32_Word    sh_addralign;\n+    Elf32_Word    sh_entsize;\n+}\n+\n+struct Elf32_Phdr\n+{\n+    Elf32_Word    p_type;\n+    Elf32_Off     p_offset;\n+    Elf32_Addr    p_vaddr;\n+    Elf32_Addr    p_paddr;\n+    Elf32_Word    p_filesz;\n+    Elf32_Word    p_memsz;\n+    Elf32_Word    p_flags;\n+    Elf32_Word    p_align;\n+}\n+\n+struct Elf32_Dyn\n+{\n+  Elf32_Sword   d_tag;\n+  union _d_un\n+  {\n+      Elf32_Word d_val;\n+      Elf32_Addr d_ptr;\n+  } _d_un d_un;\n+}\n+\n+struct Elf32_Rel\n+{\n+    Elf32_Addr    r_offset;\n+    Elf32_Word    r_info;\n+}\n+\n+struct Elf32_Rela\n+{\n+    Elf32_Addr    r_offset;\n+    Elf32_Word    r_info;\n+    Elf32_Sword   r_addend;\n+}\n+\n+extern (D) pure @safe\n+{\n+    auto ELF32_R_SYM(V)(V val) { return val >> 8; }\n+    auto ELF32_R_TYPE(V)(V val) { return val & 0xff; }\n+    auto ELF32_R_INFO(S, T)(S sym, T type) { return (sym << 8) + (type & 0xff); }\n+}\n+\n+alias Elf_Note Elf32_Nhdr;\n+\n+struct Elf32_Move\n+{\n+    Elf32_Lword   m_value;\n+    Elf32_Word    m_info;\n+    Elf32_Word    m_poffset;\n+    Elf32_Half    m_repeat;\n+    Elf32_Half    m_stride;\n+}\n+\n+extern (D) pure\n+{\n+    auto ELF32_M_SYM(I)(I info) @safe { return info >> 8; }\n+    auto ELF32_M_SIZE(I)(I info) { return cast(ubyte)info; }\n+    auto ELF32_M_INFO(S, SZ)(S sym, SZ size) { return (sym << 8) + cast(ubye)size; }\n+}\n+\n+struct Elf32_Cap\n+{\n+    Elf32_Word    c_tag;\n+    union _c_un\n+    {\n+        Elf32_Word      c_val;\n+        Elf32_Addr      c_ptr;\n+    } _c_un c_un;\n+}\n+\n+struct Elf32_Sym\n+{\n+    Elf32_Word    st_name;\n+    Elf32_Addr    st_value;\n+    Elf32_Word    st_size;\n+    ubyte st_info;\n+    ubyte st_other;\n+    Elf32_Half st_shndx;\n+}\n+\n+extern (D) pure\n+{\n+    auto ELF32_ST_BIND(T)(T val) { return cast(ubyte)val >> 4; }\n+    auto ELF32_ST_TYPE(T)(T val) @safe { return val & 0xf; }\n+    auto ELF32_ST_INFO(B, T)(B bind, T type) @safe { return (bind << 4) + (type & 0xf); }\n+    auto ELF32_ST_VISIBILITY(O)(O o) @safe { return o & 0x03; }\n+}\n+\n+struct Elf32_Verdef\n+{\n+    Elf32_Half    vd_version;\n+    Elf32_Half    vd_flags;\n+    Elf32_Half    vd_ndx;\n+    Elf32_Half    vd_cnt;\n+    Elf32_Word    vd_hash;\n+    Elf32_Word    vd_aux;\n+    Elf32_Word    vd_next;\n+}\n+\n+struct Elf32_Verdaux\n+{\n+    Elf32_Word    vda_name;\n+    Elf32_Word    vda_next;\n+}\n+\n+struct Elf32_Verneed\n+{\n+    Elf32_Half    vn_version;\n+    Elf32_Half    vn_cnt;\n+    Elf32_Word    vn_file;\n+    Elf32_Word    vn_aux;\n+    Elf32_Word    vn_next;\n+}\n+\n+struct Elf32_Vernaux\n+{\n+    Elf32_Word    vna_hash;\n+    Elf32_Half    vna_flags;\n+    Elf32_Half    vna_other;\n+    Elf32_Word    vna_name;\n+    Elf32_Word    vna_next;\n+}\n+\n+alias Elf32_Half Elf32_Versym;\n+\n+struct Elf32_Syminfo\n+{\n+    Elf32_Half si_boundto;\n+    Elf32_Half si_flags;\n+}"}, {"sha": "d5e15fc25207202b2b51db41b75aceecbd555b0e", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/elf64.d", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf64.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf64.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf64.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -0,0 +1,193 @@\n+/**\n+ * D header file for OpenBSD.\n+ *\n+ * Authors:  Iain Buclaw\n+ * Based-on: core/sys/freebsd/sys\n+ */\n+module core.sys.openbsd.sys.elf64;\n+\n+version (OpenBSD):\n+\n+extern (C):\n+\n+import core.stdc.stdint;\n+public import core.sys.openbsd.sys.elf_common;\n+\n+alias uint16_t Elf64_Half;\n+alias uint32_t Elf64_Word;\n+alias int32_t  Elf64_Sword;\n+alias uint64_t Elf64_Lword;\n+alias uint64_t Elf64_Xword;\n+alias int64_t  Elf64_Sxword;\n+alias uint64_t Elf64_Addr;\n+alias uint64_t Elf64_Off;\n+alias Elf64_Word Elf64_Hashelt;\n+alias Elf64_Xword Elf64_Size;\n+alias Elf64_Sxword Elf64_Ssize;\n+\n+struct Elf64_Ehdr\n+{\n+    char[EI_NIDENT] e_ident = 0;\n+    Elf64_Half    e_type;\n+    Elf64_Half    e_machine;\n+    Elf64_Word    e_version;\n+    Elf64_Addr    e_entry;\n+    Elf64_Off     e_phoff;\n+    Elf64_Off     e_shoff;\n+    Elf64_Word    e_flags;\n+    Elf64_Half    e_ehsize;\n+    Elf64_Half    e_phentsize;\n+    Elf64_Half    e_phnum;\n+    Elf64_Half    e_shentsize;\n+    Elf64_Half    e_shnum;\n+    Elf64_Half    e_shstrndx;\n+}\n+\n+struct Elf64_Shdr\n+{\n+    Elf64_Word    sh_name;\n+    Elf64_Word    sh_type;\n+    Elf64_Xword   sh_flags;\n+    Elf64_Addr    sh_addr;\n+    Elf64_Off     sh_offset;\n+    Elf64_Xword   sh_size;\n+    Elf64_Word    sh_link;\n+    Elf64_Word    sh_info;\n+    Elf64_Xword   sh_addralign;\n+    Elf64_Xword   sh_entsize;\n+}\n+\n+struct Elf64_Phdr\n+{\n+    Elf64_Word    p_type;\n+    Elf64_Word    p_flags;\n+    Elf64_Off     p_offset;\n+    Elf64_Addr    p_vaddr;\n+    Elf64_Addr    p_paddr;\n+    Elf64_Xword   p_filesz;\n+    Elf64_Xword   p_memsz;\n+    Elf64_Xword   p_align;\n+}\n+\n+struct Elf64_Dyn\n+{\n+  Elf64_Sxword  d_tag;\n+  union _d_un\n+  {\n+      Elf64_Xword d_val;\n+      Elf64_Addr d_ptr;\n+  } _d_un d_un;\n+}\n+\n+struct Elf64_Rel\n+{\n+    Elf64_Addr    r_offset;\n+    Elf64_Xword   r_info;\n+}\n+\n+struct Elf64_Rela\n+{\n+    Elf64_Addr    r_offset;\n+    Elf64_Xword   r_info;\n+    Elf64_Sxword  r_addend;\n+}\n+\n+extern (D) pure\n+{\n+    auto ELF64_R_SYM(I)(I i) @safe { return i >> 32; }\n+    auto ELF64_R_TYPE(I)(I i) @safe { return i & 0xffffffff; }\n+    auto ELF64_R_INFO(S, T)(S sym, T type) @safe { return (sym << 32) + (type & 0xffffffff); }\n+\n+    auto ELF64_R_TYPE_DATA(I)(I i) { return (cast(Elf64_Xword) i << 32) >> 40; }\n+    auto ELF64_R_TYPE_ID(I)(I i) { return (cast(Elf64_Xword) i << 56 ) >> 56; }\n+    auto ELF64_R_TYPE_INFO(D, T)(D d, T t) { return cast(Elf64_Xword) d << 8 + cast(Elf64_Xword) t; }\n+}\n+\n+alias Elf_Note Elf64_Nhdr;\n+\n+struct Elf64_Move\n+{\n+    Elf64_Lword   m_value;\n+    Elf64_Xword   m_info;\n+    Elf64_Xword   m_poffset;\n+    Elf64_Half    m_repeat;\n+    Elf64_Half    m_stride;\n+}\n+\n+extern (D) pure\n+{\n+    auto ELF64_M_SYM(I)(I info) @safe { return info >> 8; }\n+    auto ELF64_M_SIZE(I)(I info) { return cast(ubyte)info; }\n+    auto ELF64_M_INFO(S, SZ)(S sym, SZ size) @safe { return (sym << 8) + cast(ubye)size; }\n+}\n+\n+struct Elf64_Cap\n+{\n+    Elf64_Xword   c_tag;\n+    union _c_un\n+    {\n+        Elf64_Xword     c_val;\n+        Elf64_Addr      c_ptr;\n+    } _c_un c_un;\n+}\n+\n+struct Elf64_Sym\n+{\n+    Elf64_Word    st_name;\n+    ubyte st_info;\n+    ubyte st_other;\n+    Elf64_Half st_shndx;\n+    Elf64_Addr    st_value;\n+    Elf64_Xword   st_size;\n+}\n+\n+extern (D) pure\n+{\n+    auto ELF64_ST_BIND(T)(T val) { return cast(ubyte)val >> 4; }\n+    auto ELF64_ST_TYPE(T)(T val) @safe { return val & 0xf; }\n+    auto ELF64_ST_INFO(B, T)(B bind, T type) @safe { return (bind << 4) + (type & 0xf); }\n+    auto ELF64_ST_VISIBILITY(O)(O o) @safe { return o & 0x03; }\n+}\n+\n+struct Elf64_Verdef\n+{\n+    Elf64_Half    vd_version;\n+    Elf64_Half    vd_flags;\n+    Elf64_Half    vd_ndx;\n+    Elf64_Half    vd_cnt;\n+    Elf64_Word    vd_hash;\n+    Elf64_Word    vd_aux;\n+    Elf64_Word    vd_next;\n+}\n+\n+struct Elf64_Verdaux\n+{\n+    Elf64_Word    vda_name;\n+    Elf64_Word    vda_next;\n+}\n+\n+struct Elf64_Verneed\n+{\n+    Elf64_Half    vn_version;\n+    Elf64_Half    vn_cnt;\n+    Elf64_Word    vn_file;\n+    Elf64_Word    vn_aux;\n+    Elf64_Word    vn_next;\n+}\n+\n+struct Elf64_Vernaux\n+{\n+    Elf64_Word    vna_hash;\n+    Elf64_Half    vna_flags;\n+    Elf64_Half    vna_other;\n+    Elf64_Word    vna_name;\n+    Elf64_Word    vna_next;\n+}\n+\n+alias Elf64_Half Elf64_Versym;\n+\n+struct Elf64_Syminfo\n+{\n+    Elf64_Half si_boundto;\n+    Elf64_Half si_flags;\n+}"}, {"sha": "bcd2701ae82e4e6d9b0933e6894798e04a7117b3", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/elf_common.d", "status": "added", "additions": 676, "deletions": 0, "changes": 676, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf_common.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf_common.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Felf_common.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -0,0 +1,676 @@\n+/**\n+ * D header file for OpenBSD.\n+ *\n+ * Authors:  Iain Buclaw\n+ * Based-on: core/sys/freebsd/sys\n+ */\n+module core.sys.openbsd.sys.elf_common;\n+\n+version (OpenBSD):\n+\n+extern (C):\n+\n+import core.stdc.stdint;\n+\n+struct Elf_Note\n+{\n+    uint32_t      n_namesz;\n+    uint32_t      n_descsz;\n+    uint32_t      n_type;\n+}\n+\n+struct Elf_GNU_Hash_Header\n+{\n+    uint32_t      gh_nbuckets;\n+    uint32_t      gh_symndx;\n+    uint32_t      gh_maskwords;\n+    uint32_t      gh_shift2;\n+}\n+\n+enum EI_MAG0 =         0;\n+enum EI_MAG1 =         1;\n+enum EI_MAG2 =         2;\n+enum EI_MAG3 =         3;\n+enum EI_CLASS =        4;\n+enum EI_DATA =         5;\n+enum EI_VERSION =      6;\n+enum EI_OSABI =        7;\n+enum EI_ABIVERSION =   8;\n+enum OLD_EI_BRAND =    8;\n+enum EI_PAD =          9;\n+enum EI_NIDENT =       16;\n+\n+enum ELFMAG0 =         0x7f;\n+enum ELFMAG1 =         'E';\n+enum ELFMAG2 =         'L';\n+enum ELFMAG3 =         'F';\n+enum ELFMAG =          \"\\177ELF\";\n+enum SELFMAG =         4;\n+\n+enum EV_NONE =         0;\n+enum EV_CURRENT =      1;\n+\n+enum ELFCLASSNONE =    0;\n+enum ELFCLASS32 =      1;\n+enum ELFCLASS64 =      2;\n+\n+enum ELFDATANONE =     0;\n+enum ELFDATA2LSB =     1;\n+enum ELFDATA2MSB =     2;\n+\n+enum ELFOSABI_NONE =           0;\n+enum ELFOSABI_SYSV =           0;\n+enum ELFOSABI_HPUX =           1;\n+enum ELFOSABI_NETBSD =         2;\n+enum ELFOSABI_LINUX =          3;\n+enum ELFOSABI_HURD  =          4;\n+enum ELFOSABI_86OPEN =         5;\n+enum ELFOSABI_SOLARIS =        6;\n+enum ELFOSABI_AIX =            7;\n+enum ELFOSABI_MONTEREY =       7;\n+enum ELFOSABI_IRIX =           8;\n+enum ELFOSABI_FREEBSD =        9;\n+enum ELFOSABI_TRU64 =          10;\n+enum ELFOSABI_MODESTO =        11;\n+enum ELFOSABI_OPENBSD =        12;\n+enum ELFOSABI_OPENVMS =        13;\n+enum ELFOSABI_NSK =            14;\n+enum ELFOSABI_AROS =           15;\n+enum ELFOSABI_ARM =            97;\n+enum ELFOSABI_STANDALONE =     255;\n+\n+// just a pointer\n+enum ELFOSABI_DRAGONFLYBSD =   ELFOSABI_NONE;\n+\n+extern (D) pure @safe\n+{\n+    auto IS_ELF(T)(T ehdr) { return ehdr.e_ident[EI_MAG0] == ELFMAG0 &&\n+                                    ehdr.e_ident[EI_MAG1] == ELFMAG1 &&\n+                                    ehdr.e_ident[EI_MAG2] == ELFMAG2 &&\n+                                    ehdr.e_ident[EI_MAG3] == ELFMAG3; }\n+}\n+\n+enum ET_NONE =         0;\n+enum ET_REL =          1;\n+enum ET_EXEC =         2;\n+enum ET_DYN =          3;\n+enum ET_CORE =         4;\n+enum ET_LOOS =         0xfe00;\n+enum ET_HIOS =         0xfeff;\n+enum ET_LOPROC =       0xff00;\n+enum ET_HIPROC =       0xffff;\n+\n+enum EM_NONE =          0;\n+enum EM_M32 =           1;\n+enum EM_SPARC =         2;\n+enum EM_386 =           3;\n+enum EM_68K =           4;\n+enum EM_88K =           5;\n+enum EM_860 =           7;\n+enum EM_MIPS =          8;\n+enum EM_S370 =          9;\n+enum EM_MIPS_RS3_LE =  10;\n+enum EM_PARISC =       15;\n+enum EM_VPP500 =       17;\n+enum EM_SPARC32PLUS =  18;\n+enum EM_960 =          19;\n+enum EM_PPC =          20;\n+enum EM_PPC64 =        21;\n+enum EM_S390 =         22;\n+enum EM_V800 =         36;\n+enum EM_FR20 =         37;\n+enum EM_RH32 =         38;\n+enum EM_RCE =          39;\n+enum EM_ARM =          40;\n+enum EM_SH =           42;\n+enum EM_SPARCV9 =      43;\n+enum EM_TRICORE =      44;\n+enum EM_ARC =          45;\n+enum EM_H8_300 =       46;\n+enum EM_H8_300H =      47;\n+enum EM_H8S =          48;\n+enum EM_H8_500 =       49;\n+enum EM_IA_64 =        50;\n+enum EM_MIPS_X =       51;\n+enum EM_COLDFIRE =     52;\n+enum EM_68HC12 =       53;\n+enum EM_MMA =          54;\n+enum EM_PCP =          55;\n+enum EM_NCPU =         56;\n+enum EM_NDR1 =         57;\n+enum EM_STARCORE =     58;\n+enum EM_ME16 =         59;\n+enum EM_ST100 =        60;\n+enum EM_TINYJ =        61;\n+enum EM_X86_64 =       62;\n+enum EM_AMD64 =        62;\n+enum EM_PDSP =         63;\n+enum EM_FX66 =         66;\n+enum EM_ST9PLUS =      67;\n+enum EM_ST7 =          68;\n+enum EM_68HC16 =       69;\n+enum EM_68HC11 =       70;\n+enum EM_68HC08 =       71;\n+enum EM_68HC05 =       72;\n+enum EM_SVX =          73;\n+enum EM_ST19 =         74;\n+enum EM_VAX =          75;\n+enum EM_CRIS =         76;\n+enum EM_JAVELIN =      77;\n+enum EM_FIREPATH =     78;\n+enum EM_ZSP =          79;\n+enum EM_MMIX =         80;\n+enum EM_HUANY =        81;\n+enum EM_PRISM =        82;\n+enum EM_AVR =          83;\n+enum EM_FR30 =         84;\n+enum EM_D10V =         85;\n+enum EM_D30V =         86;\n+enum EM_V850 =         87;\n+enum EM_M32R =         88;\n+enum EM_MN10300 =      89;\n+enum EM_MN10200 =      90;\n+enum EM_PJ =           91;\n+enum EM_OPENRISC =     92;\n+enum EM_ARC_A5 =       93;\n+enum EM_XTENSA =       94;\n+enum EM_VIDEOCORE =    95;\n+enum EM_TMM_GPP =      96;\n+enum EM_NS32K =        97;\n+enum EM_TPC =          98;\n+enum EM_SNP1K =        99;\n+enum EM_ST200 =       100;\n+enum EM_IP2K =        101;\n+enum EM_MAX =         102;\n+enum EM_CR =          103;\n+enum EM_F2MC16 =      104;\n+enum EM_MSP430 =      105;\n+enum EM_BLACKFIN =    106;\n+enum EM_SE_C33 =      107;\n+enum EM_SEP =         108;\n+enum EM_ARCA =        109;\n+enum EM_UNICORE =     110;\n+enum EM_DXP =         112;\n+enum EM_ALTERA_NIOS2 =113;\n+enum EM_CRX =         114;\n+enum EM_XGATE =       115;\n+enum EM_C166  =       116;\n+enum EM_M16C  =       117;\n+enum EM_DSPIC30F =    118;\n+enum EM_CE =          119;\n+enum EM_M32C  =       120;\n+enum EM_res121 =      121;\n+enum EM_res122 =      122;\n+enum EM_res123 =      123;\n+enum EM_res124 =      124;\n+enum EM_res125 =      125;\n+enum EM_res126 =      126;\n+enum EM_res127 =      127;\n+enum EM_res128 =      128;\n+enum EM_res129 =      129;\n+enum EM_res130 =      130;\n+enum EM_TSK3000 =     131;\n+enum EM_RS08  =       132;\n+enum EM_res133 =      133;\n+enum EM_ECOG2 =       134;\n+enum EM_SCORE =       135;\n+enum EM_SCORE7 =      135;\n+enum EM_DSP24 =       136;\n+enum EM_VIDEOCORE3 =  137;\n+enum EM_LATTICEMICO32 = 138;\n+enum EM_SE_C17 =      139;\n+enum EM_TI_C6000 =    140;\n+enum EM_TI_C2000 =    141;\n+enum EM_TI_C5500 =    142;\n+enum EM_res143 =      143;\n+enum EM_res144 =      144;\n+enum EM_res145 =      145;\n+enum EM_res146 =      146;\n+enum EM_res147 =      147;\n+enum EM_res148 =      148;\n+enum EM_res149 =      149;\n+enum EM_res150 =      150;\n+enum EM_res151 =      151;\n+enum EM_res152 =      152;\n+enum EM_res153 =      153;\n+enum EM_res154 =      154;\n+enum EM_res155 =      155;\n+enum EM_res156 =      156;\n+enum EM_res157 =      157;\n+enum EM_res158 =      158;\n+enum EM_res159 =      159;\n+enum EM_MMDSP_PLUS =  160;\n+enum EM_CYPRESS_M8C = 161;\n+enum EM_R32C  =       162;\n+enum EM_TRIMEDIA =    163;\n+enum EM_QDSP6 =       164;\n+enum EM_8051  =       165;\n+enum EM_STXP7X =      166;\n+enum EM_NDS32 =       167;\n+enum EM_ECOG1 =       168;\n+enum EM_ECOG1X =      168;\n+enum EM_MAXQ30 =      169;\n+enum EM_XIMO16 =      170;\n+enum EM_MANIK =       171;\n+enum EM_CRAYNV2 =     172;\n+enum EM_RX =          173;\n+enum EM_METAG =       174;\n+enum EM_MCST_ELBRUS = 175;\n+enum EM_ECOG16 =      176;\n+enum EM_CR16  =       177;\n+enum EM_ETPU  =       178;\n+enum EM_SLE9X =       179;\n+enum EM_L1OM  =       180;\n+enum EM_K1OM  =       181;\n+enum EM_INTEL182 =    182;\n+enum EM_res183 =      183;\n+enum EM_res184 =      184;\n+enum EM_AVR32 =       185;\n+enum EM_STM8  =       186;\n+enum EM_TILE64 =      187;\n+enum EM_TILEPRO =     188;\n+enum EM_MICROBLAZE =  189;\n+enum EM_CUDA  =       190;\n+enum EM_TILEGX =      191;\n+\n+enum EM_486 =           6;\n+enum EM_MIPS_RS4_BE =  10;\n+enum EM_ALPHA_STD =    41;\n+enum EM_ALPHA =    0x9026;\n+\n+enum SHN_UNDEF =       0;\n+enum SHN_LORESERVE =   0xff00;\n+enum SHN_LOPROC =      0xff00;\n+enum SHN_HIPROC =      0xff1f;\n+enum SHN_LOOS =        0xff20;\n+enum SHN_HIOS =        0xff3f;\n+enum SHN_ABS =         0xfff1;\n+enum SHN_COMMON =      0xfff2;\n+enum SHN_XINDEX =      0xffff;\n+enum SHN_HIRESERVE =   0xffff;\n+\n+enum PT_NULL =         0;\n+enum PT_LOAD =         1;\n+enum PT_DYNAMIC =      2;\n+enum PT_INTERP =       3;\n+enum PT_NOTE =         4;\n+enum PT_SHLIB =        5;\n+enum PT_PHDR =         6;\n+enum PT_TLS =          7;\n+enum PT_LOOS =         0x60000000;\n+enum PT_HIOS =         0x6fffffff;\n+enum PT_LOPROC =       0x70000000;\n+enum PT_HIPROC =       0x7fffffff;\n+\n+enum PT_GNU_EH_FRAME =  PT_LOOS + 0x474e550; /* Frame unwind information */\n+enum PT_SUNW_EH_FRAME = PT_GNU_EH_FRAME;     /* Solaris uses the same value */\n+enum PT_GNU_STACK =     PT_LOOS + 0x474e551; /* Stack flags */\n+enum PT_GNU_RELRO =     PT_LOOS + 0x474e552;  /* Read-only after relocation */\n+\n+enum PF_X =            0x1;\n+enum PF_W =            0x2;\n+enum PF_R =            0x4;\n+enum PF_MASKOS =       0x0ff00000;\n+enum PF_MASKPROC =     0xf0000000;\n+\n+enum PN_XNUM =         0xffff;\n+\n+enum SHT_NULL =          0;\n+enum SHT_PROGBITS =      1;\n+enum SHT_SYMTAB =        2;\n+enum SHT_STRTAB =        3;\n+enum SHT_RELA =          4;\n+enum SHT_HASH =          5;\n+enum SHT_DYNAMIC =       6;\n+enum SHT_NOTE =          7;\n+enum SHT_NOBITS =        8;\n+enum SHT_REL =           9;\n+enum SHT_SHLIB =         10;\n+enum SHT_DYNSYM =        11;\n+\n+enum SHT_INIT_ARRAY =    14;\n+enum SHT_FINI_ARRAY =    15;\n+enum SHT_PREINIT_ARRAY = 16;\n+enum SHT_GROUP =         17;\n+enum SHT_SYMTAB_SHNDX =  18;\n+\n+enum SHT_LOOS =          0x60000000;\n+enum SHT_LOSUNW =        0x6ffffff4;\n+\n+enum SHT_GNU_INCREMENTAL_INPUTS =  0x6fff4700;\n+enum SHT_GNU_ATTRIBUTES =       0x6ffffff5;\n+enum SHT_GNU_HASH =             0x6ffffff6;\n+enum SHT_GNU_LIBLIST =          0x6ffffff7;\n+\n+//enum SHT_SUNW_dof =      0x6ffffff4;\n+//enum SHT_SUNW_cap =      0x6ffffff5;\n+//enum SHT_SUNW_SIGNATURE = 0x6ffffff6;\n+enum SHT_SUNW_verdef =   0x6ffffffd;\n+enum SHT_SUNW_verneed =  0x6ffffffe;\n+enum SHT_SUNW_versym =   0x6fffffff;\n+\n+enum SHT_GNU_verdef =    SHT_SUNW_verdef;\n+enum SHT_GNU_verneed =   SHT_SUNW_verneed;\n+enum SHT_GNU_versym =    SHT_SUNW_versym;\n+\n+enum SHT_LOPROC =        0x70000000;\n+enum SHT_HIPROC =        0x7fffffff;\n+enum SHT_LOUSER =        0x80000000;\n+enum SHT_HIUSER =        0x8fffffff;\n+\n+/*\n+enum SHT_GNU_HASH =      0x6ffffff6;\n+enum SHT_SUNW_ANNOTATE = 0x6ffffff7;\n+enum SHT_SUNW_DEBUGSTR = 0x6ffffff8;\n+enum SHT_SUNW_DEBUG =    0x6ffffff9;\n+enum SHT_SUNW_move =     0x6ffffffa;\n+enum SHT_SUNW_COMDAT =   0x6ffffffb;\n+enum SHT_SUNW_syminfo =  0x6ffffffc;\n+enum SHT_HISUNW =        0x6fffffff;\n+enum SHT_HIOS =          0x6fffffff;\n+enum SHT_AMD64_UNWIND =  0x70000001;\n+enum SHT_ARM_EXIDX =     0x70000001;\n+enum SHT_ARM_PREEMPTMAP = 0x70000002;\n+enum SHT_ARM_ATTRIBUTES = 0x70000003;\n+enum SHT_ARM_DEBUGOVERLAY = 0x70000004;\n+enum SHT_ARM_OVERLAYSECTION = 0x70000005;\n+enum SHT_MIPS_REGINFO =  0x70000006;\n+enum SHT_MIPS_OPTIONS =  0x7000000d;\n+enum SHT_MIPS_DWARF =    0x7000001e;\n+*/\n+\n+enum SHF_WRITE =            (1 << 0);\n+enum SHF_ALLOC =            (1 << 1);\n+enum SHF_EXECINSTR =        (1 << 2);\n+enum SHF_MERGE =            (1 << 4);\n+enum SHF_STRINGS =          (1 << 5);\n+enum SHF_INFO_LINK =        (1 << 6);\n+enum SHF_LINK_ORDER =       (1 << 7);\n+enum SHF_OS_NONCONFORMING = (1 << 8);\n+enum SHF_GROUP =            (1 << 9);\n+enum SHF_TLS =              (1 << 10);\n+enum SHF_COMPRESSED =       (1 << 11);\n+\n+enum SHF_MASKOS =           0x0ff00000;\n+enum SHF_MASKPROC =         0xf0000000;\n+\n+enum NT_PRSTATUS =     1;\n+enum NT_FPREGSET =     2;\n+enum NT_PRPSINFO =     3;\n+enum NT_TASKSTRUCT =   4;\n+enum NT_AUXV =         6;\n+\n+/*\n+enum NT_THRMISC =      7;\n+enum NT_PROCSTAT_PROC = 8;\n+enum NT_PROCSTAT_FILES = 9;\n+enum NT_PROCSTAT_VMMAP = 10;\n+enum NT_PROCSTAT_GROUPS = 11;\n+enum NT_PROCSTAT_UMASK = 12;\n+enum NT_PROCSTAT_RLIMIT = 13;\n+enum NT_PROCSTAT_OSREL = 14;\n+enum NT_PROCSTAT_PSSTRINGS = 15;\n+enum NT_PROCSTAT_AUXV = 16;\n+*/\n+\n+enum STN_UNDEF =       0;\n+\n+enum STB_LOCAL =       0;\n+enum STB_GLOBAL =      1;\n+enum STB_WEAK =        2;\n+enum STB_NUM =         3;\n+enum STB_LOOS =        10;\n+enum STB_HIOS =        12;\n+enum STB_LOPROC =      13;\n+enum STB_HIPROC =      15;\n+\n+enum STT_NOTYPE =      0;\n+enum STT_OBJECT =      1;\n+enum STT_FUNC =        2;\n+enum STT_SECTION =     3;\n+enum STT_FILE =        4;\n+enum STT_COMMON =      5;\n+enum STT_TLS =         6;\n+enum STT_NUM =         7;\n+enum STT_LOOS =        10;\n+enum STT_GNU_IFUNC =   10;\n+enum STT_HIOS =        12;\n+enum STT_LOPROC =      13;\n+enum STT_HIPROC =      15;\n+\n+enum STV_DEFAULT =     0;\n+enum STV_INTERNAL =    1;\n+enum STV_HIDDEN =      2;\n+enum STV_PROTECTED =   3;\n+/*\n+enum STV_EXPORTED =    4;\n+enum STV_SINGLETON =   5;\n+enum STV_ELIMINATE =   6;\n+*/\n+\n+enum DT_NULL =         0;\n+enum DT_NEEDED =       1;\n+enum DT_PLTRELSZ =     2;\n+enum DT_PLTGOT =       3;\n+enum DT_HASH =         4;\n+enum DT_STRTAB =       5;\n+enum DT_SYMTAB =       6;\n+enum DT_RELA =         7;\n+enum DT_RELASZ =       8;\n+enum DT_RELAENT =      9;\n+enum DT_STRSZ =        10;\n+enum DT_SYMENT =       11;\n+enum DT_INIT =         12;\n+enum DT_FINI =         13;\n+enum DT_SONAME =       14;\n+enum DT_RPATH =        15;\n+enum DT_SYMBOLIC =     16;\n+enum DT_REL =          17;\n+enum DT_RELSZ =        18;\n+enum DT_RELENT =       19;\n+enum DT_PLTREL =       20;\n+enum DT_DEBUG =        21;\n+enum DT_TEXTREL =      22;\n+enum DT_JMPREL =       23;\n+enum DT_BIND_NOW =     24;\n+enum DT_INIT_ARRAY =   25;\n+enum DT_FINI_ARRAY =   26;\n+enum DT_INIT_ARRAYSZ = 27;\n+enum DT_FINI_ARRAYSZ = 28;\n+enum DT_RUNPATH =      29;\n+enum DT_FLAGS =        30;\n+\n+enum DT_ENCODING =     32;\n+enum DT_PREINIT_ARRAY = 32;\n+enum DT_PREINIT_ARRAYSZ = 33;\n+//enum DT_MAXPOSTAGS =   34;\n+enum DT_LOOS =         0x6000000d;\n+enum DT_HIOS =         0x6ffff000;\n+/*\n+enum DT_SUNW_AUXILIARY = 0x6000000d;\n+enum DT_SUNW_RTLDINF = 0x6000000e;\n+enum DT_SUNW_FILTER =  0x6000000f;\n+enum DT_SUNW_CAP =     0x60000010;\n+*/\n+\n+enum DT_VALRNGLO =     0x6ffffd00;\n+enum DT_GNU_PRELINKED = 0x6ffffdf5;\n+enum DT_GNU_CONFLICTSZ =0x6ffffdf6;\n+enum DT_GNU_LIBLISTSZ = 0x6ffffdf7;\n+enum DT_CHECKSUM =     0x6ffffdf8;\n+enum DT_PLTPADSZ =     0x6ffffdf9;\n+enum DT_MOVEENT =      0x6ffffdfa;\n+enum DT_MOVESZ =       0x6ffffdfb;\n+enum DT_FEATURE_1 =    0x6ffffdfc;\n+enum DT_POSFLAG_1 =    0x6ffffdfd;\n+enum DT_SYMINSZ =      0x6ffffdfe;\n+enum DT_SYMINENT =     0x6ffffdff;\n+enum DT_VALRNGHI =     0x6ffffdff;\n+enum DT_ADDRRNGLO =    0x6ffffe00;\n+enum DT_GNU_HASH =     0x6ffffef5;\n+enum DT_TLSDESC_PLT =  0x6ffffef6;\n+enum DT_TLSDESC_GOT =  0x6ffffef7;\n+enum DT_GNU_CONFLICT = 0x6ffffef8;\n+enum DT_GNU_LIBLIST =  0x6ffffef9;\n+enum DT_CONFIG =       0x6ffffefa;\n+enum DT_DEPAUDIT =     0x6ffffefb;\n+enum DT_AUDIT =        0x6ffffefc;\n+enum DT_PLTPAD =       0x6ffffefd;\n+enum DT_MOVETAB =      0x6ffffefe;\n+enum DT_SYMINFO =      0x6ffffeff;\n+enum DT_ADDRRNGHI =    0x6ffffeff;\n+enum DT_RELACOUNT =    0x6ffffff9;\n+enum DT_RELCOUNT =     0x6ffffffa;\n+enum DT_FLAGS_1 =      0x6ffffffb;\n+enum DT_VERDEF =       0x6ffffffc;\n+enum DT_VERDEFNUM =    0x6ffffffd;\n+enum DT_VERNEED =      0x6ffffffe;\n+enum DT_VERNEEDNUM =   0x6fffffff;\n+enum DT_VERSYM =       0x6ffffff0;\n+enum DT_LOPROC =       0x70000000;\n+//enum DT_DEPRECATED_SPARC_REGISTER = 0x7000001;\n+enum DT_AUXILIARY =    0x7ffffffd;\n+enum DT_USED =         0x7ffffffe;\n+enum DT_FILTER =       0x7fffffff;\n+enum DT_HIPROC =       0x7fffffff;\n+\n+enum DTF_1_PARINIT =   0x00000001;\n+enum DTF_1_CONFEXP =   0x00000002;\n+\n+enum DF_P1_LAZYLOAD =  0x00000001;\n+enum DF_P1_GROUPPERM=  0x00000002;\n+\n+enum DF_1_NOW =        0x00000001;\n+enum DF_1_BIND_NOW =   0x00000001;\n+enum DF_1_GLOBAL =     0x00000002;\n+enum DF_1_GROUP =      0x00000004;\n+enum DF_1_NODELETE =   0x00000008;\n+enum DF_1_LOADFLTR =   0x00000010;\n+enum DF_1_INITFIRST =  0x00000020;\n+enum DF_1_NOOPEN =     0x00000040;\n+enum DF_1_ORIGIN =     0x00000080;\n+enum DF_1_DIRECT =     0x00000100;\n+enum DF_1_TRANS =      0x00000200;\n+enum DF_1_INTERPOSE =  0x00000400;\n+enum DF_1_NODEFLIB =   0x00000800;\n+enum DF_1_NODUMP =     0x00001000;\n+enum DF_1_CONLFAT =    0x00002000;\n+\n+enum DF_ORIGIN =       0x00000001;\n+enum DF_SYMBOLIC =     0x00000002;\n+enum DF_TEXTREL =      0x00000004;\n+enum DF_BIND_NOW =     0x00000008;\n+enum DF_STATIC_TLS =   0x00000010;\n+\n+enum VER_DEF_NONE =    0;\n+enum VER_DEF_CURRENT = 1;\n+alias VER_NDX VER_DEF_IDX;\n+\n+enum VER_FLG_BASE =    0x1;\n+enum VER_FLG_WEAK =    0x2;\n+enum VER_FLG_INFO =    0x4;\n+\n+enum VER_NDX_LOCAL =           0;\n+enum VER_NDX_GLOBAL =          1;\n+enum VER_NDX_GIVEN =           2;\n+enum VER_NDX_HIDDEN =      32768;\n+extern (D) pure @safe\n+{\n+    auto VER_NDX(V)(V v) { return v & ~(1u << 15); }\n+}\n+\n+enum VER_NEED_NONE   = 0;\n+enum VER_NEED_CURRENT = 1;\n+enum VER_NEED_WEAK =    32768;\n+enum VER_NEED_HIDDEN = VER_NDX_HIDDEN;\n+alias VER_NDX VER_NEED_IDX;\n+\n+/*\n+enum CA_SUNW_NULL =    0;\n+enum CA_SUNW_HW_1 =    1;\n+enum CA_SUNW_SF_1 =    2;\n+*/\n+\n+enum VERSYM_HIDDEN =   0x8000;\n+enum VERSYM_VERSION =  0x7fff;\n+enum ELF_VER_CHR =     '@';\n+\n+enum SYMINFO_BT_SELF =         0xffff;\n+enum SYMINFO_BT_PARENT =       0xfffe;\n+//enum SYMINFO_BT_NONE =         0xfffd;\n+//enum SYMINFO_BT_EXTERN =       0xfffc;\n+enum SYMINFO_BT_LOWRESERVE =   0xff00;\n+\n+enum SYMINFO_FLG_DIRECT =      0x0001;\n+enum SYMINFO_FLG_PASSTHRU =    0x0002;\n+enum SYMINFO_FLG_COPY =        0x0004;\n+enum SYMINFO_FLG_LAZYLOAD =    0x0008;\n+//enum SYMINFO_FLG_DIRECTBIND =  0x0010;\n+//enum SYMINFO_FLG_NOEXTDIRECT = 0x0020;\n+//enum SYMINFO_FLG_FILTER =      0x0002;\n+//enum SYMINFO_FLG_AUXILIARY =   0x0040;\n+\n+enum SYMINFO_NONE =            0;\n+enum SYMINFO_CURRENT =         1;\n+enum SYMINFO_NUM =             2;\n+\n+enum GRP_COMDAT =              0x1;\n+\n+enum R_386_NONE =               0;\n+enum R_386_32 =                 1;\n+enum R_386_PC32 =               2;\n+enum R_386_GOT32 =              3;\n+enum R_386_PLT32 =              4;\n+enum R_386_COPY =               5;\n+enum R_386_GLOB_DAT =           6;\n+enum R_386_JMP_SLOT =           7;\n+enum R_386_RELATIVE =           8;\n+enum R_386_GOTOFF =             9;\n+enum R_386_GOTPC =              10;\n+enum R_386_TLS_TPOFF =          14;\n+enum R_386_TLS_IE =             15;\n+enum R_386_TLS_GOTIE =          16;\n+enum R_386_TLS_LE =             17;\n+enum R_386_TLS_GD =             18;\n+enum R_386_TLS_LDM =            19;\n+enum R_386_TLS_GD_32 =          24;\n+enum R_386_TLS_GD_PUSH =        25;\n+enum R_386_TLS_GD_CALL =        26;\n+enum R_386_TLS_GD_POP =         27;\n+enum R_386_TLS_LDM_32 =         28;\n+enum R_386_TLS_LDM_PUSH =       29;\n+enum R_386_TLS_LDM_CALL =       30;\n+enum R_386_TLS_LDM_POP =        31;\n+enum R_386_TLS_LDO_32 =         32;\n+enum R_386_TLS_IE_32 =          33;\n+enum R_386_TLS_LE_32 =          34;\n+enum R_386_TLS_DTPMOD32 =       35;\n+enum R_386_TLS_DTPOFF32 =       36;\n+enum R_386_TLS_TPOFF32 =        37;\n+enum R_386_IRELATIVE =          42;\n+\n+enum R_X86_64_NONE =            0;\n+enum R_X86_64_64 =              1;\n+enum R_X86_64_PC32 =            2;\n+enum R_X86_64_GOT32 =           3;\n+enum R_X86_64_PLT32 =           4;\n+enum R_X86_64_COPY =            5;\n+enum R_X86_64_GLOB_DAT =        6;\n+enum R_X86_64_JMP_SLOT =        7;\n+enum R_X86_64_RELATIVE =        8;\n+enum R_X86_64_GOTPCREL =        9;\n+enum R_X86_64_32 =              10;\n+enum R_X86_64_32S =             11;\n+enum R_X86_64_16 =              12;\n+enum R_X86_64_PC16 =            13;\n+enum R_X86_64_8 =               14;\n+enum R_X86_64_PC8 =             15;\n+enum R_X86_64_DTPMOD64 =        16;\n+enum R_X86_64_DTPOFF64 =        17;\n+enum R_X86_64_TPOFF64 =         18;\n+enum R_X86_64_TLSGD =           19;\n+enum R_X86_64_TLSLD =           20;\n+enum R_X86_64_DTPOFF32 =        21;\n+enum R_X86_64_GOTTPOFF =        22;\n+enum R_X86_64_TPOFF32 =         23;\n+enum R_X86_64_IRELATIVE =       37;"}, {"sha": "3582b4c08c530cf84db14c03fe5cfedd7baf969a", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/link_elf.d", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Flink_elf.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -0,0 +1,65 @@\n+/**\n+ * D header file for OpenBSD.\n+ *\n+ * Authors:  Iain Buclaw\n+ * Based-on: core/sys/freebsd/sys\n+ */\n+module core.sys.openbsd.sys.link_elf;\n+\n+version (OpenBSD):\n+\n+extern (C) nothrow @system:\n+\n+import core.sys.posix.config;\n+import core.sys.posix.sys.types;\n+import core.sys.openbsd.sys.elf;\n+\n+version (D_LP64)\n+    enum __ELF_NATIVE_CLASS = 64;\n+else\n+    enum __ELF_NATIVE_CLASS = 32;\n+\n+template ElfW(string type)\n+{\n+    mixin(\"alias Elf\"~__ELF_NATIVE_CLASS.stringof~\"_\"~type~\" ElfW;\");\n+}\n+\n+struct link_map\n+{\n+    caddr_t     l_addr;\n+    char*       l_name;\n+    void*       l_ld;\n+    link_map*   l_next;\n+    link_map*   l_prev;\n+}\n+\n+enum\n+{\n+    RT_CONSISTENT,\n+    RT_ADD,\n+    RT_DELETE,\n+}\n+\n+struct r_debug\n+{\n+    int                   r_version;\n+    link_map*             r_map;\n+    void function(r_debug*, link_map*) r_brk;\n+    typeof(RT_CONSISTENT) r_state;\n+    c_ulong               r_ldbase;\n+}\n+\n+struct dl_phdr_info\n+{\n+    ElfW!\"Addr\"     dlpi_addr;\n+    char*           dlpi_name;\n+    ElfW!\"Phdr\"*    dlpi_phdr;\n+    ElfW!\"Half\"     dlpi_phnum;\n+};\n+\n+\n+private alias int function(dl_phdr_info*, size_t, void *) dl_iterate_phdr_cb;\n+private alias int function(dl_phdr_info*, size_t, void *) @nogc dl_iterate_phdr_cb_ngc;\n+\n+int dl_iterate_phdr(dl_iterate_phdr_cb __callback, void*__data);\n+int dl_iterate_phdr(dl_iterate_phdr_cb_ngc __callback, void*__data) @nogc;"}, {"sha": "0e882072c94f88af7550bb62529c0fc123236c0f", "filename": "libphobos/libdruntime/core/sys/openbsd/sys/mman.d", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Fsys%2Fmman.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -0,0 +1,51 @@\n+/**\n+ * D header file for OpenBSD\n+ *\n+ * Authors:  Iain Buclaw\n+ * Based-on: core/sys/freebsd/sys\n+ */\n+module core.sys.openbsd.sys.mman;\n+\n+version (OpenBSD):\n+extern (C):\n+nothrow:\n+\n+public import core.sys.posix.sys.mman;\n+import core.sys.openbsd.sys.cdefs;\n+import core.sys.posix.sys.types;\n+\n+// already in core.sys.posix.sys.mman\n+// enum MAP_SHARED = 0x0001;\n+// enum MAP_PRIVATE = 0x0002;\n+// enum MAP_FIXED = 0x0010;\n+// enum MAP_ANON = 0x1000;\n+\n+alias MAP_ANONYMOUS = MAP_ANON;\n+enum MAP_STACK = 0x4000;\n+\n+enum MAP_FLAGMASK = 0x7ff7;\n+\n+alias MAP_COPY = MAP_PRIVATE;\n+enum MAP_FILE = 0;\n+enum MAP_HASSEMAPHORE = 0;\n+enum MAP_INHERIT = 0;\n+enum MAP_NOEXTEND = 0;\n+enum MAP_NORESERVE = 0;\n+enum MAP_RENAME = 0;\n+enum MAP_TRYFIXED = 0;\n+\n+static if (__BSD_VISIBLE)\n+{\n+    alias MADV_NORMAL = POSIX_MADV_NORMAL;\n+    alias MADV_RANDOM = POSIX_MADV_RANDOM;\n+    alias MADV_SEQUENTIAL = POSIX_MADV_SEQUENTIAL;\n+    alias MADV_WILLNEED = POSIX_MADV_WILLNEED;\n+    alias MADV_DONTNEED = POSIX_MADV_DONTNEED;\n+    enum MADV_SPACEAVAIL = 5;\n+    enum MADV_FREE = 6;\n+\n+    int madvise(void *, size_t, int);\n+    int mincore(const(void) *, size_t, char *);\n+    int minherit(void *, size_t, int);\n+    void* mquery(void *, size_t, int, int, int, off_t);\n+}"}, {"sha": "43573f3523620c475dd8c36c6665c652ff97accc", "filename": "libphobos/libdruntime/core/sys/openbsd/time.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fopenbsd%2Ftime.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -0,0 +1,21 @@\n+//Written in the D programming language\n+\n+/++\n+    D header file for OpenBSD's extensions to POSIX's time.h.\n+\n+    Copyright: Copyright 2019\n+    License:   $(HTTP www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n+    Authors:   Iain Buclaw\n+ +/\n+module core.sys.openbsd.time;\n+\n+public import core.sys.posix.time;\n+\n+version (OpenBSD):\n+\n+enum CLOCK_REALTIME           = 0;\n+enum CLOCK_PROCESS_CPUTIME_ID = 2;\n+enum CLOCK_MONOTONIC          = 3;\n+enum CLOCK_THREAD_CPUTIME_ID  = 4;\n+enum CLOCK_UPTIME             = 5;\n+enum CLOCK_BOOTTIME           = 6;"}, {"sha": "817ff90bf1dc3eb65386c60e320c1cb0105dbf1b", "filename": "libphobos/libdruntime/core/sys/posix/aio.d", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -203,6 +203,10 @@ else version (NetBSD)\n \n     version = BSD_Posix;\n }\n+else version (OpenBSD)\n+{\n+    // OpenBSD does not define aiocb.\n+}\n else version (DragonFlyBSD)\n {\n     struct aiocb\n@@ -442,7 +446,7 @@ version (CRuntime_Glibc)\n         int lio_listio(int mode, const(aiocb*)* aiocb_list, int nitems, sigevent* sevp);\n     }\n }\n-version (CRuntime_UClibc)\n+else version (CRuntime_UClibc)\n {\n     static if (__USE_LARGEFILE64)\n     {\n@@ -476,6 +480,10 @@ version (CRuntime_UClibc)\n         int lio_listio(int mode, const(aiocb*)* aiocb_list, int nitems, sigevent* sevp);\n     }\n }\n+else version (OpenBSD)\n+{\n+    // OpenBSD does not implement aio.h\n+}\n else\n {\n     int aio_read(aiocb* aiocbp);"}, {"sha": "ac8e3eb1c76a6db229c5fa8aac40b5995b37c220", "filename": "libphobos/libdruntime/core/sys/posix/arpa/inet.d", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Farpa%2Finet.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Farpa%2Finet.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Farpa%2Finet.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -158,6 +158,47 @@ else version (NetBSD)\n     const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n     int             inet_pton(int, in char*, void*);\n }\n+else version (OpenBSD)\n+{\n+    alias uint16_t in_port_t;\n+    alias uint32_t in_addr_t;\n+\n+    struct in_addr\n+    {\n+        in_addr_t s_addr;\n+    }\n+\n+    enum INET_ADDRSTRLEN = 16;\n+\n+    @safe pure extern (D)\n+    {\n+        private\n+        {\n+            uint32_t __swap32( uint32_t x )\n+            {\n+                uint32_t byte32_swap = (x & 0xff) << 24 | (x &0xff00) << 8 |\n+                                     (x & 0xff0000) >> 8 | (x & 0xff000000) >> 24;\n+                return byte32_swap;\n+            }\n+\n+            uint16_t __swap16( uint16_t x )\n+            {\n+                uint16_t byte16_swap = (x & 0xff) << 8 | (x & 0xff00) >> 8;\n+                return byte16_swap;\n+            }\n+        }\n+\n+        uint32_t htonl(uint32_t x) { return __swap32(x); }\n+        uint16_t htons(uint16_t x) { return __swap16(x); }\n+        uint32_t ntohl(uint32_t x) { return __swap32(x); }\n+        uint16_t ntohs(uint16_t x) { return __swap16(x); }\n+    }\n+\n+    in_addr_t       inet_addr(in char*);\n+    char*           inet_ntoa(in_addr);\n+    const(char)*    inet_ntop(int, in void*, char*, socklen_t);\n+    int             inet_pton(int, in char*, void*);\n+}\n else version (DragonFlyBSD)\n {\n     alias uint16_t in_port_t;\n@@ -324,6 +365,10 @@ else version (NetBSD)\n {\n     enum INET6_ADDRSTRLEN = 46;\n }\n+else version (OpenBSD)\n+{\n+    enum INET6_ADDRSTRLEN = 46;\n+}\n else version (DragonFlyBSD)\n {\n     enum INET6_ADDRSTRLEN = 46;"}, {"sha": "38a75d609af0a3fcb57df85779d1d768388c4ced", "filename": "libphobos/libdruntime/core/sys/posix/config.d", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fconfig.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -111,6 +111,59 @@ else version (CRuntime_Bionic)\n {\n     enum __USE_GNU           = false;\n }\n+else version (OpenBSD)\n+{\n+    version (Alpha)\n+    {\n+        enum _ALIGNBYTES = 7;\n+        enum _STACKALIGNBYTES = 7;\n+        enum _MAX_PAGE_SHIFT = 13;\n+    }\n+    else version (X86_64)\n+    {\n+        enum _ALIGNBYTES = c_long.sizeof - 1;\n+        enum _STACKALIGNBYTES = 15;\n+        enum _MAX_PAGE_SHIFT = 12;\n+    }\n+    else version (AArch64)\n+    {\n+        enum _ALIGNBYTES = c_long.sizeof - 1;\n+        enum _STACKALIGNBYTES = 15;\n+        enum _MAX_PAGE_SHIFT = 12;\n+    }\n+    else version (ARM)\n+    {\n+        enum _ALIGNBYTES = 7;\n+        enum _STACKALIGNBYTES = 7;\n+        enum _MAX_PAGE_SHIFT = 12;\n+    }\n+    else version (HPPA)\n+    {\n+        enum _ALIGNBYTES = 7;\n+        enum _STACKALIGNBYTES = 7;\n+        enum _MAX_PAGE_SHIFT = 12;\n+    }\n+    else version (X86)\n+    {\n+        enum _ALIGNBYTES = 3;\n+        enum _STACKALIGNBYTES = 15;\n+        enum _MAX_PAGE_SHIFT = 12;\n+    }\n+    else version (PPC)\n+    {\n+        enum _ALIGNBYTES = 7;\n+        enum _STACKALIGNBYTES = 15;\n+        enum _MAX_PAGE_SHIFT = 12;\n+    }\n+    else version (SPARC64)\n+    {\n+        enum _ALIGNBYTES = 15;\n+        enum _STACKALIGNBYTES = 15;\n+        enum _MAX_PAGE_SHIFT = 13;\n+    }\n+    else\n+        static assert(false, \"Architecture not supported.\");\n+}\n else version (Solaris)\n {\n     enum _FILE_OFFSET_BITS = 64;"}, {"sha": "e6eb57b7b47f414a4bd107d69bcd3d4d1d8cdf0b", "filename": "libphobos/libdruntime/core/sys/posix/net/if_.d", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnet%2Fif_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnet%2Fif_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnet%2Fif_.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -106,6 +106,21 @@ else version (NetBSD)\n     if_nameindex_t* if_nameindex();\n     void            if_freenameindex(if_nameindex_t*);\n }\n+else version (OpenBSD)\n+{\n+    struct if_nameindex_t\n+    {\n+        uint    if_index;\n+        char*   if_name;\n+    }\n+\n+    enum IF_NAMESIZE = 16;\n+\n+    uint            if_nametoindex(in char*);\n+    char*           if_indextoname(uint, char*);\n+    if_nameindex_t* if_nameindex();\n+    void            if_freenameindex(if_nameindex_t*);\n+}\n else version (DragonFlyBSD)\n {\n     struct if_nameindex_t"}, {"sha": "ef20a8f9453e4bb035e45321c1a5eeff035eb107", "filename": "libphobos/libdruntime/core/sys/posix/netinet/in_.d", "status": "modified", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Fin_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Fin_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Fin_.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -246,6 +246,40 @@ else version (NetBSD)\n \n     //enum INET_ADDRSTRLEN       = 16;\n }\n+else version (OpenBSD)\n+{\n+    struct sockaddr_in\n+    {\n+        ubyte       sin_len;\n+        sa_family_t sin_family;\n+        in_port_t   sin_port;\n+        in_addr     sin_addr;\n+        ubyte[8]    sin_zero;\n+    }\n+\n+    enum\n+    {\n+        IPPROTO_IP   = 0,\n+        IPPROTO_ICMP = 1,\n+        IPPROTO_IGMP = 2,\n+        IPPROTO_GGP  = 3,\n+        IPPROTO_TCP  = 6,\n+        IPPROTO_PUP  = 12,\n+        IPPROTO_UDP  = 17,\n+        IPPROTO_IDP  = 22,\n+        IPPROTO_MAX  = 256\n+    }\n+\n+    enum : uint\n+    {\n+        INADDR_ANY       = 0x00000000,\n+        INADDR_BROADCAST = 0xffffffff,\n+        INADDR_LOOPBACK  = 0x7f000001,\n+        INADDR_NONE      = 0xffffffff\n+    }\n+\n+    enum INET_ADDRSTRLEN       = 16;\n+}\n else version (DragonFlyBSD)\n {\n     //alias uint16_t in_port_t;\n@@ -991,6 +1025,145 @@ else version (NetBSD)\n                __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL;\n     }\n }\n+else version (OpenBSD)\n+{\n+    struct in6_addr\n+    {\n+        union\n+        {\n+            uint8_t[16] s6_addr;\n+            uint16_t[8] s6_addr16;\n+            uint32_t[4] s6_addr32;\n+        }\n+    }\n+\n+    struct sockaddr_in6\n+    {\n+        uint8_t     sin6_len;\n+        sa_family_t sin6_family;\n+        in_port_t   sin6_port;\n+        uint32_t    sin6_flowinfo;\n+        in6_addr    sin6_addr;\n+        uint32_t    sin6_scope_id;\n+    }\n+\n+    extern __gshared immutable in6_addr in6addr_any;\n+    extern __gshared immutable in6_addr in6addr_loopback;\n+\n+    struct ipv6_mreq\n+    {\n+        in6_addr    ipv6mr_multiaddr;\n+        uint        ipv6mr_interface;\n+    }\n+\n+    enum : uint\n+    {\n+        IPPROTO_IPV6        = 41,\n+\n+        INET6_ADDRSTRLEN    = 46,\n+\n+        IPV6_JOIN_GROUP     = 12,\n+        IPV6_LEAVE_GROUP    = 13,\n+        IPV6_MULTICAST_HOPS = 10,\n+        IPV6_MULTICAST_IF   = 9,\n+        IPV6_MULTICAST_LOOP = 11,\n+        IPV6_UNICAST_HOPS   = 4,\n+        IPV6_V6ONLY         = 27,\n+    }\n+\n+    private enum\n+    {\n+        __IPV6_ADDR_SCOPE_NODELOCAL     = 0x01,\n+        __IPV6_ADDR_SCOPE_INTFACELOCAL  = 0x01,\n+        __IPV6_ADDR_SCOPE_LINKLOCAL     = 0x02,\n+        __IPV6_ADDR_SCOPE_SITELOCAL     = 0x05,\n+        __IPV6_ADDR_SCOPE_ORGLOCAL      = 0x08,\n+        __IPV6_ADDR_SCOPE_GLOBAL        = 0x0e,\n+    }\n+\n+    // macros\n+    extern (D) int IN6_IS_ADDR_UNSPECIFIED( in in6_addr* a ) pure\n+    {\n+        return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == 0);\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_LOOPBACK( in in6_addr* a ) pure\n+    {\n+        return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) == ntohl(1));\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_V4COMPAT( in in6_addr* a ) pure\n+    {\n+        return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) != 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[12]) != ntohl(1));\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_V4MAPPED( in in6_addr* a ) pure\n+    {\n+        return (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[0]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[4]) == 0) &&\n+               (*cast(const uint32_t*) cast(const void*) (&a.s6_addr[8]) == ntohl(0x0000ffff));\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_LINKLOCAL( in in6_addr* a ) pure\n+    {\n+        return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0x80;\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_SITELOCAL( in in6_addr* a ) pure\n+    {\n+        return a.s6_addr[0] == 0xfe && (a.s6_addr[1] & 0xc0) == 0xc0;\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_MULTICAST( in in6_addr* a ) pure\n+    {\n+        return a.s6_addr[0] == 0xff;\n+    }\n+\n+    extern (D) uint8_t __IPV6_ADDR_MC_SCOPE( in in6_addr* a ) pure\n+    {\n+        return a.s6_addr[1] & 0x0f;\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_MC_NODELOCAL( in in6_addr* a ) pure\n+    {\n+        return IN6_IS_ADDR_MULTICAST(a) &&\n+               __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_NODELOCAL;\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_MC_LINKLOCAL( in in6_addr* a ) pure\n+    {\n+        return IN6_IS_ADDR_MULTICAST(a) &&\n+               __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_LINKLOCAL;\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_MC_SITELOCAL( in in6_addr* a ) pure\n+    {\n+        return IN6_IS_ADDR_MULTICAST(a) &&\n+               __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_SITELOCAL;\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_MC_ORGLOCAL( in in6_addr* a ) pure\n+    {\n+        return IN6_IS_ADDR_MULTICAST(a) &&\n+               __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_ORGLOCAL;\n+    }\n+\n+    extern (D) int IN6_IS_ADDR_MC_GLOBAL( in in6_addr* a ) pure\n+    {\n+        return IN6_IS_ADDR_MULTICAST(a) &&\n+               __IPV6_ADDR_MC_SCOPE(a) == __IPV6_ADDR_SCOPE_GLOBAL;\n+    }\n+}\n else version (DragonFlyBSD)\n {\n     struct in6_addr\n@@ -1576,6 +1749,10 @@ else version (NetBSD)\n {\n     enum uint IPPROTO_RAW = 255;\n }\n+else version (OpenBSD)\n+{\n+    enum uint IPPROTO_RAW = 255;\n+}\n else version (DragonFlyBSD)\n {\n     enum uint IPPROTO_RAW = 255;"}, {"sha": "134e133d1eb5f5ef64b6770017b854d575b457a0", "filename": "libphobos/libdruntime/core/sys/posix/netinet/tcp.d", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Ftcp.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Ftcp.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fnetinet%2Ftcp.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -51,6 +51,10 @@ else version (NetBSD)\n {\n     enum TCP_NODELAY = 1;\n }\n+else version (OpenBSD)\n+{\n+    enum TCP_NODELAY = 1;\n+}\n else version (DragonFlyBSD)\n {\n     enum TCP_NODELAY = 1;"}, {"sha": "574bf8c7c3afa7e6404a699d835c34314ba1c648", "filename": "libphobos/libdruntime/core/sys/posix/signal.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsignal.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsignal.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsignal.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -3393,6 +3393,8 @@ else version (NetBSD)\n }\n else version (OpenBSD)\n {\n+    // OpenBSD does not implement sigevent.\n+    alias sigevent = void;\n }\n else version (DragonFlyBSD)\n {"}, {"sha": null, "filename": "libphobos/libdruntime/core/sys/posix/sys/ioccom.d", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioccom.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6"}, {"sha": "b8bb03be9a17127385a555816c97b408566c7d60", "filename": "libphobos/libdruntime/core/sys/posix/sys/ioctl.d", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fioctl.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -379,6 +379,18 @@ else version (NetBSD)\n \n     int ioctl(int, c_ulong, ...);\n }\n+else version (OpenBSD)\n+{\n+    struct winsize\n+    {\n+        ushort ws_row;\n+        ushort ws_col;\n+        ushort ws_xpixel;\n+        ushort ws_ypixel;\n+    }\n+\n+    int ioctl(int, c_ulong, ...);\n+}\n else version (DragonFlyBSD)\n {\n     struct fiodgname_arg"}, {"sha": "04601f2eef131bfacc0358b6dad28504c8b95d69", "filename": "libphobos/libdruntime/core/sys/posix/sys/ipc.d", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fipc.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -149,6 +149,31 @@ else version (NetBSD)\n \n     key_t ftok(in char*, int);\n }\n+else version (OpenBSD)\n+{\n+    struct ipc_perm\n+    {\n+        uid_t   cuid;\n+        gid_t   cgid;\n+        uid_t   uid;\n+        gid_t   gid;\n+        mode_t  mode;\n+        ushort  seq;\n+        key_t   key;\n+    }\n+\n+    enum IPC_CREAT      = 0x0200; // 01000\n+    enum IPC_EXCL       = 0x0400; // 02000\n+    enum IPC_NOWAIT     = 0x0800; // 04000\n+\n+    enum key_t IPC_PRIVATE = 0;\n+\n+    enum IPC_RMID       = 0;\n+    enum IPC_SET        = 1;\n+    enum IPC_STAT       = 2;\n+\n+    key_t ftok(in char*, int);\n+}\n else version (DragonFlyBSD)\n {\n     struct ipc_perm"}, {"sha": "6e8a7ea7912420882eacefeb15ce7a33632475c5", "filename": "libphobos/libdruntime/core/sys/posix/sys/mman.d", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fmman.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -111,6 +111,15 @@ else version (NetBSD)\n     enum POSIX_MADV_DONTNEED    = 4;\n     int posix_madvise(void *addr, size_t len, int advice);\n }\n+else version (OpenBSD)\n+{\n+    enum POSIX_MADV_NORMAL      = 0;\n+    enum POSIX_MADV_RANDOM      = 1;\n+    enum POSIX_MADV_SEQUENTIAL  = 2;\n+    enum POSIX_MADV_WILLNEED    = 3;\n+    enum POSIX_MADV_DONTNEED    = 4;\n+    int posix_madvise(void *addr, size_t len, int advice);\n+}\n else version (DragonFlyBSD)\n {\n     enum POSIX_MADV_NORMAL      = 0;\n@@ -184,6 +193,13 @@ else version (NetBSD)\n     enum PROT_WRITE     = 0x02;\n     enum PROT_EXEC      = 0x04;\n }\n+else version (OpenBSD)\n+{\n+    enum PROT_NONE      = 0x00;\n+    enum PROT_READ      = 0x01;\n+    enum PROT_WRITE     = 0x02;\n+    enum PROT_EXEC      = 0x04;\n+}\n else version (DragonFlyBSD)\n {\n     enum PROT_NONE      = 0x00;\n@@ -256,6 +272,11 @@ else version (NetBSD)\n     void* mmap(void*, size_t, int, int, int, off_t);\n     int   munmap(void*, size_t);\n }\n+else version (OpenBSD)\n+{\n+    void* mmap(void*, size_t, int, int, int, off_t);\n+    int   munmap(void*, size_t);\n+}\n else version (DragonFlyBSD)\n {\n     void* mmap(void*, size_t, int, int, int, off_t);\n@@ -423,6 +444,21 @@ else version (NetBSD)\n     int __msync13(void*, size_t, int);\n     alias msync = __msync13;\n }\n+else version (OpenBSD)\n+{\n+    enum MAP_SHARED     = 0x0001;\n+    enum MAP_PRIVATE    = 0x0002;\n+    enum MAP_FIXED      = 0x0010;\n+    enum MAP_ANON       = 0x1000;\n+\n+    enum MAP_FAILED     = cast(void*)-1;\n+\n+    enum MS_SYNC        = 0x0002;\n+    enum MS_ASYNC       = 0x0001;\n+    enum MS_INVALIDATE  = 0x0004;\n+\n+    int msync(void*, size_t, int);\n+}\n else version (DragonFlyBSD)\n {\n     enum MAP_SHARED     = 0x0001;\n@@ -585,6 +621,14 @@ else version (NetBSD)\n     int mlockall(int);\n     int munlockall();\n }\n+else version (OpenBSD)\n+{\n+    enum MCL_CURRENT    = 0x0001;\n+    enum MCL_FUTURE     = 0x0002;\n+\n+    int mlockall(int);\n+    int munlockall();\n+}\n else version (DragonFlyBSD)\n {\n     enum MCL_CURRENT    = 0x0001;\n@@ -657,6 +701,11 @@ else version (NetBSD)\n     int mlock(in void*, size_t);\n     int munlock(in void*, size_t);\n }\n+else version (OpenBSD)\n+{\n+    int mlock(in void*, size_t);\n+    int munlock(in void*, size_t);\n+}\n else version (DragonFlyBSD)\n {\n     int mlock(in void*, size_t);\n@@ -708,6 +757,10 @@ else version (NetBSD)\n {\n     int mprotect(void*, size_t, int);\n }\n+else version (OpenBSD)\n+{\n+    int mprotect(void*, size_t, int);\n+}\n else version (DragonFlyBSD)\n {\n     int mprotect(void*, size_t, int);\n@@ -761,6 +814,11 @@ else version (NetBSD)\n     int shm_open(in char*, int, mode_t);\n     int shm_unlink(in char*);\n }\n+else version (OpenBSD)\n+{\n+    int shm_open(in char*, int, mode_t);\n+    int shm_unlink(in char*);\n+}\n else version (DragonFlyBSD)\n {\n     int shm_open(in char*, int, mode_t);"}, {"sha": "27a7ed2885284bb432ccb5b347a8c2a71b8fdde1", "filename": "libphobos/libdruntime/core/sys/posix/sys/resource.d", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fresource.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -301,6 +301,65 @@ else version (NetBSD)\n         RLIMIT_AS     = 10,\n     }\n }\n+else version (OpenBSD)\n+{\n+    enum\n+    {\n+        PRIO_PROCESS = 0,\n+        PRIO_PGRP    = 1,\n+        PRIO_USER    = 2,\n+    }\n+\n+    alias ulong rlim_t;\n+\n+    enum\n+    {\n+        RLIM_INFINITY  = (cast(rlim_t)((cast(ulong) 1 << 63) - 1)),\n+        RLIM_SAVED_MAX = RLIM_INFINITY,\n+        RLIM_SAVED_CUR = RLIM_INFINITY,\n+    }\n+\n+    enum\n+    {\n+        RUSAGE_SELF     =  0,\n+        RUSAGE_CHILDREN = -1,\n+        RUSAGE_THREAD   =  1,\n+    }\n+\n+    struct rusage\n+    {\n+        timeval ru_utime;\n+        timeval ru_stime;\n+        c_long ru_maxrss;\n+        alias ru_ixrss ru_first;\n+        c_long ru_ixrss;\n+        c_long ru_idrss;\n+        c_long ru_isrss;\n+        c_long ru_minflt;\n+        c_long ru_majflt;\n+        c_long ru_nswap;\n+        c_long ru_inblock;\n+        c_long ru_oublock;\n+        c_long ru_msgsnd;\n+        c_long ru_msgrcv;\n+        c_long ru_nsignals;\n+        c_long ru_nvcsw;\n+        c_long ru_nivcsw;\n+        alias ru_nivcsw ru_last;\n+    }\n+\n+    enum\n+    {\n+        RLIMIT_CORE   =  4,\n+        RLIMIT_CPU    =  0,\n+        RLIMIT_DATA   =  2,\n+        RLIMIT_FSIZE  =  1,\n+        RLIMIT_NOFILE =  8,\n+        RLIMIT_STACK  =  3,\n+        // OpenBSD does not define the following:\n+        //RLIMIT_AS,\n+    }\n+}\n else version (DragonFlyBSD)\n {\n     enum\n@@ -652,6 +711,12 @@ else version (NetBSD)\n     int getrusage(int, rusage*);\n     int setrlimit(int, in rlimit*);\n }\n+else version (OpenBSD)\n+{\n+    int getrlimit(int, rlimit*);\n+    int getrusage(int, rusage*);\n+    int setrlimit(int, in rlimit*);\n+}\n else version (DragonFlyBSD)\n {\n     int getrlimit(int, rlimit*);"}, {"sha": "2508366d69c7d097be386597528477bc2d85a1bf", "filename": "libphobos/libdruntime/core/sys/posix/sys/select.d", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fselect.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -270,6 +270,53 @@ else version (NetBSD)\n     int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n     int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n }\n+else version (OpenBSD)\n+{\n+    private\n+    {\n+        alias uint __fd_mask;\n+        enum _NFDBITS = __fd_mask.sizeof * 8;\n+    }\n+\n+    enum uint FD_SETSIZE = 1024;\n+\n+    struct fd_set\n+    {\n+        __fd_mask[(FD_SETSIZE + (_NFDBITS - 1)) / _NFDBITS] __fds_bits;\n+    }\n+\n+    extern (D) __fd_mask __fdset_mask(uint n) pure\n+    {\n+        return cast(__fd_mask) 1 << (n % _NFDBITS);\n+    }\n+\n+    extern (D) void FD_CLR(int n, fd_set* p) pure\n+    {\n+        p.__fds_bits[n / _NFDBITS] &= ~__fdset_mask(n);\n+    }\n+\n+    extern (D) bool FD_ISSET(int n, const(fd_set)* p) pure\n+    {\n+        return (p.__fds_bits[n / _NFDBITS] & __fdset_mask(n)) != 0;\n+    }\n+\n+    extern (D) void FD_SET(int n, fd_set* p) pure\n+    {\n+        p.__fds_bits[n / _NFDBITS] |= __fdset_mask(n);\n+    }\n+\n+    extern (D) void FD_ZERO(fd_set* p) pure\n+    {\n+        fd_set *_p = p;\n+        size_t _n = (FD_SETSIZE + (_NFDBITS - 1)) / _NFDBITS;\n+\n+        while (_n > 0)\n+            _p.__fds_bits[--_n] = 0;\n+    }\n+\n+    int pselect(int, fd_set*, fd_set*, fd_set*, in timespec*, in sigset_t*);\n+    int select(int, fd_set*, fd_set*, fd_set*, timeval*);\n+}\n else version (DragonFlyBSD)\n {\n     private"}, {"sha": "8902451d95178186c45e1b7c4acf61b0a33ba3c3", "filename": "libphobos/libdruntime/core/sys/posix/sys/shm.d", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fshm.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -156,6 +156,35 @@ else version (NetBSD)\n     int   shmdt(in void*);\n     int   shmget(key_t, size_t, int);\n }\n+else version (OpenBSD)\n+{\n+    enum SHM_RDONLY     = 0x01000; // 010000\n+    enum SHM_RND        = 0x02000; // 020000\n+    enum SHMLBA         = 1 << _MAX_PAGE_SHIFT;\n+\n+    alias short shmatt_t;\n+\n+    struct shmid_ds\n+    {\n+        ipc_perm   shm_perm;\n+        int        shm_segsz;\n+        pid_t      shm_lpid;\n+        pid_t      shm_cpid;\n+        shmatt_t   shm_nattch;\n+        time_t     shm_atime;\n+        c_long   __shm_atimensec;\n+        time_t     shm_dtime;\n+        c_long   __shm_dtimensec;\n+        time_t     shm_ctime;\n+        c_long   __shm_ctimensec;\n+        void*      shm_internal;\n+    }\n+\n+    void* shmat(int, in void*, int);\n+    int   shmctl(int, int, shmid_ds*);\n+    int   shmdt(in void*);\n+    int   shmget(key_t, size_t, int);\n+}\n else version (DragonFlyBSD)\n {\n     enum SHM_RDONLY     = 0x01000; // 010000"}, {"sha": "a745da59c6ea29a9aebb2064d69e4b2842e3e0e7", "filename": "libphobos/libdruntime/core/sys/posix/sys/socket.d", "status": "modified", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fsocket.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -1119,6 +1119,179 @@ else version (NetBSD)\n     int     sockatmark(int) @safe;\n     int     socketpair(int, int, int, ref int[2]) @safe;\n }\n+else version (OpenBSD)\n+{\n+    alias uint   socklen_t;\n+    alias ubyte  sa_family_t;\n+\n+    struct sockaddr\n+    {\n+        ubyte       sa_len;\n+        sa_family_t sa_family;\n+        byte[14]    sa_data;\n+    }\n+\n+    struct sockaddr_storage\n+    {\n+         ubyte       ss_len;\n+         sa_family_t ss_family;\n+         byte[6]     __ss_pad1;\n+         long        __ss_align;\n+         byte[240]   __ss_pad2;\n+    }\n+\n+    struct msghdr\n+    {\n+        void*     msg_name;\n+        socklen_t msg_namelen;\n+        iovec*    msg_iov;\n+        uint      msg_iovlen;\n+        void*     msg_control;\n+        socklen_t msg_controllen;\n+        int       msg_flags;\n+    }\n+\n+    struct cmsghdr\n+    {\n+         socklen_t cmsg_len;\n+         int       cmsg_level;\n+         int       cmsg_type;\n+    }\n+\n+    enum : uint\n+    {\n+        SCM_RIGHTS    = 0x01\n+    }\n+\n+    private // <sys/_types.h>\n+    {\n+        extern (D) size_t _ALIGN(size_t p) { return (p + _ALIGNBYTES) & ~_ALIGNBYTES; }\n+    }\n+\n+    extern (D) ubyte* CMSG_DATA(cmsghdr* cmsg)\n+    {\n+        return cast(ubyte*) cmsg + _ALIGN(cmsghdr.sizeof);\n+    }\n+\n+    extern (D) cmsghdr* CMSG_NXTHDR(msghdr* mhdr, cmsghdr* cmsg)\n+    {\n+        if (cast(ubyte*) cmsg + _ALIGN(cmsg.cmsg_len) + _ALIGN(cmsghdr.sizeof) >\n+                cast(ubyte*) mhdr.msg_control + mhdr.msg_controllen)\n+            return null;\n+        else\n+            return cast(cmsghdr*) (cast(ubyte*) cmsg + _ALIGN(cmsg.cmsg_len));\n+    }\n+\n+    extern (D) cmsghdr* CMSG_FIRSTHDR(msghdr* mhdr)\n+    {\n+        return mhdr.msg_controllen >= cmsghdr.sizeof ? cast(cmsghdr*) mhdr.msg_control : null;\n+    }\n+\n+    struct linger\n+    {\n+        int l_onoff;\n+        int l_linger;\n+    }\n+\n+    enum\n+    {\n+        SOCK_DGRAM      = 2,\n+        SOCK_RDM        = 4,\n+        SOCK_SEQPACKET  = 5,\n+        SOCK_STREAM     = 1\n+    }\n+\n+    enum : uint\n+    {\n+        SOL_SOCKET      = 0xffff\n+    }\n+\n+    enum : uint\n+    {\n+         SO_DEBUG        = 0x0001,\n+         SO_ACCEPTCONN   = 0x0002,\n+         SO_REUSEADDR    = 0x0004,\n+         SO_KEEPALIVE    = 0x0008,\n+         SO_DONTROUTE    = 0x0010,\n+         SO_BROADCAST    = 0x0020,\n+         SO_USELOOPBACK  = 0x0040,\n+         SO_LINGER       = 0x0080,\n+         SO_OOBINLINE    = 0x0100,\n+         SO_REUSEPORT    = 0x0200,\n+         SO_TIMESTAMP    = 0x0800,\n+         SO_BINDANY      = 0x1000,\n+         SO_ZEROSIZE     = 0x2000,\n+\n+         SO_SNDBUF       = 0x1001,\n+         SO_RCVBUF       = 0x1002,\n+         SO_SNDLOWAT     = 0x1003,\n+         SO_RCVLOWAT     = 0x1004,\n+         SO_SNDTIMEO     = 0x1005,\n+         SO_RCVTIMEO     = 0x1006,\n+         SO_ERROR        = 0x1007,\n+         SO_TYPE         = 0x1008,\n+         SO_NETPROC      = 0x1020,\n+         SO_RTABLE       = 0x1021,\n+         SO_PEERCRED     = 0x1022,\n+         SO_SPLICE       = 0x1023,\n+    }\n+\n+    enum\n+    {\n+        SOMAXCONN       = 128\n+    }\n+\n+    enum : uint\n+    {\n+         MSG_OOB          = 0x001,\n+         MSG_PEEK         = 0x002,\n+         MSG_DONTROUTE    = 0x004,\n+         MSG_EOR          = 0x008,\n+         MSG_TRUNC        = 0x010,\n+         MSG_CTRUNC       = 0x020,\n+         MSG_WAITALL      = 0x040,\n+         MSG_DONTWAIT     = 0x080,\n+         MSG_BCAST        = 0x100,\n+         MSG_MCAST        = 0x200,\n+         MSG_NOSIGNAL     = 0x400,\n+         MSG_CMSG_CLOEXEC = 0x800,\n+    }\n+\n+    enum\n+    {\n+        AF_APPLETALK    = 16,\n+        AF_INET         = 2,\n+        AF_IPX          = 23,\n+        AF_UNIX         = 1,\n+        AF_UNSPEC       = 0\n+    }\n+\n+    enum\n+    {\n+        SHUT_RD = 0,\n+        SHUT_WR = 1,\n+        SHUT_RDWR = 2\n+    }\n+\n+    int     accept(int, scope sockaddr*, scope socklen_t*);\n+    int     bind(int, const scope sockaddr*, socklen_t);\n+    int     connect(int, const scope sockaddr*, socklen_t);\n+    int     getpeername(int, scope sockaddr*, scope socklen_t*);\n+    int     getsockname(int, scope sockaddr*, scope socklen_t*);\n+    int     getsockopt(int, int, int, scope void*, scope socklen_t*);\n+    int     listen(int, int) @safe;\n+    ssize_t recv(int, scope void*, size_t, int);\n+    ssize_t recvfrom(int, scope void*, size_t, int, scope sockaddr*, scope socklen_t*);\n+    ssize_t recvmsg(int, scope msghdr*, int);\n+    ssize_t send(int, const scope void*, size_t, int);\n+    ssize_t sendmsg(int, const scope msghdr*, int);\n+    ssize_t sendto(int, const scope void*, size_t, int, const scope sockaddr*, socklen_t);\n+    int     setsockopt(int, int, int, const scope void*, socklen_t);\n+    int     shutdown(int, int) @safe;\n+    int     socket(int, int, int) @safe;\n+    int     sockatmark(int) @safe;\n+    int     socketpair(int, int, int, ref int[2]) @safe;\n+}\n else version (DragonFlyBSD)\n {\n     alias uint   socklen_t;\n@@ -2092,6 +2265,13 @@ else version (NetBSD)\n         AF_INET6    = 24\n     }\n }\n+else version (OpenBSD)\n+{\n+    enum\n+    {\n+        AF_INET6    = 24\n+    }\n+}\n else version (DragonFlyBSD)\n {\n     enum\n@@ -2164,6 +2344,13 @@ else version (NetBSD)\n         SOCK_RAW    = 3\n     }\n }\n+else version (OpenBSD)\n+{\n+    enum\n+    {\n+        SOCK_RAW    = 3\n+    }\n+}\n else version (DragonFlyBSD)\n {\n     enum"}, {"sha": "8692014ffe168d9c3340f95b4db9b98375c7f605", "filename": "libphobos/libdruntime/core/sys/posix/sys/stat.d", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -1200,6 +1200,83 @@ else version (NetBSD)\n     extern (D) bool S_ISLNK( mode_t mode )  { return S_ISTYPE( mode, S_IFLNK );  }\n     extern (D) bool S_ISSOCK( mode_t mode ) { return S_ISTYPE( mode, S_IFSOCK ); }\n }\n+else version (OpenBSD)\n+{\n+    import core.sys.openbsd.sys.cdefs;\n+\n+    struct stat_t\n+    {\n+        mode_t    st_mode;\n+        dev_t     st_dev;\n+        ino_t     st_ino;\n+        nlink_t   st_nlink;\n+        uid_t     st_uid;\n+        gid_t     st_gid;\n+        dev_t     st_rdev;\n+      static if (__POSIX_VISIBLE >= 200809 || __BSD_VISIBLE)\n+      {\n+        timespec  st_atim;\n+        timespec  st_mtim;\n+        timespec  st_ctim;\n+        extern(D)\n+        {\n+            @property ref time_t st_atime() { return st_atim.tv_sec; }\n+            @property ref time_t st_mtime() { return st_mtim.tv_sec; }\n+            @property ref time_t st_ctime() { return st_ctim.tv_sec; }\n+        }\n+      }\n+      else\n+      {\n+        time_t    st_atime;\n+        long      st_atimensec;\n+        time_t    st_mtime;\n+        long      st_mtimensec;\n+        time_t    st_ctime;\n+        long      st_ctimensec;\n+      }\n+        off_t     st_size;\n+        blkcnt_t  st_blocks;\n+        blksize_t st_blksize;\n+        uint32_t  st_flags;\n+        uint32_t  st_gen;\n+      static if (__POSIX_VISIBLE >= 200809 || __BSD_VISIBLE)\n+      {\n+        timespec __st_birthtim;\n+      }\n+      else\n+      {\n+        time_t  __st_birthtime;\n+        long    __st_birthtimensec;\n+      }\n+    }\n+\n+    enum S_IRUSR    = 0x100; // octal 0000400\n+    enum S_IWUSR    = 0x080; // octal 0000200\n+    enum S_IXUSR    = 0x040; // octal 0000100\n+    enum S_IRWXU    = 0x1C0; // octal 0000700\n+\n+    enum S_IRGRP    = 0x020;  // octal 0000040\n+    enum S_IWGRP    = 0x010;  // octal 0000020\n+    enum S_IXGRP    = 0x008;  // octal 0000010\n+    enum S_IRWXG    = 0x038;  // octal 0000070\n+\n+    enum S_IROTH    = 0x4; // 0000004\n+    enum S_IWOTH    = 0x2; // 0000002\n+    enum S_IXOTH    = 0x1; // 0000001\n+    enum S_IRWXO    = 0x7; // 0000007\n+\n+    enum S_ISUID    = 0x800; // octal 0004000\n+    enum S_ISGID    = 0x400; // octal 0002000\n+    enum S_ISVTX    = 0x200; // octal 0001000\n+\n+    extern (D) bool S_ISBLK(mode_t mode)  { return (mode & S_IFMT) == S_IFBLK;  }\n+    extern (D) bool S_ISCHR(mode_t mode)  { return (mode & S_IFMT) == S_IFCHR;  }\n+    extern (D) bool S_ISDIR(mode_t mode)  { return (mode & S_IFMT) == S_IFDIR;  }\n+    extern (D) bool S_ISFIFO(mode_t mode) { return (mode & S_IFMT) == S_IFIFO;  }\n+    extern (D) bool S_ISREG(mode_t mode)  { return (mode & S_IFMT) == S_IFREG;  }\n+    extern (D) bool S_ISLNK(mode_t mode)  { return (mode & S_IFMT) == S_IFLNK;  }\n+    extern (D) bool S_ISSOCK(mode_t mode) { return (mode & S_IFMT) == S_IFSOCK; }\n+}\n else version (DragonFlyBSD)\n {\n     struct stat_t {\n@@ -1948,6 +2025,12 @@ else version (NetBSD)\n     alias __lstat50 lstat;\n     alias __stat50 stat;\n }\n+else version (OpenBSD)\n+{\n+    int   fstat(int, stat_t*);\n+    int   lstat(in char*, stat_t*);\n+    int   stat(in char*, stat_t*);\n+}\n else version (DragonFlyBSD)\n {\n     int   fstat(int, stat_t*);\n@@ -2066,6 +2149,19 @@ else version (NetBSD)\n \n     int mknod(in char*, mode_t, dev_t);\n }\n+else version (OpenBSD)\n+{\n+    enum S_IFMT     = 0xF000; // octal 0170000\n+    enum S_IFBLK    = 0x6000; // octal 0060000\n+    enum S_IFCHR    = 0x2000; // octal 0020000\n+    enum S_IFIFO    = 0x1000; // octal 0010000\n+    enum S_IFREG    = 0x8000; // octal 0100000\n+    enum S_IFDIR    = 0x4000; // octal 0040000\n+    enum S_IFLNK    = 0xA000; // octal 0120000\n+    enum S_IFSOCK   = 0xC000; // octal 0140000\n+\n+    int mknod(in char*, mode_t, dev_t);\n+}\n else version (DragonFlyBSD)\n {\n     enum S_IFMT     = 0xF000; // octal 0170000"}, {"sha": "795d96d87f16177057d29e05681f544f048f5bde", "filename": "libphobos/libdruntime/core/sys/posix/sys/statvfs.d", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstatvfs.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -133,6 +133,29 @@ else version (NetBSD)\n     int statvfs (const char * file, statvfs_t* buf);\n     int fstatvfs (int fildes, statvfs_t *buf) @trusted;\n }\n+else version (OpenBSD)\n+{\n+    struct statvfs_t\n+    {\n+        c_ulong    f_bsize;\n+        c_ulong    f_frsize;\n+        fsblkcnt_t f_blocks;\n+        fsblkcnt_t f_bfree;\n+        fsblkcnt_t f_bavail;\n+        fsfilcnt_t f_files;\n+        fsfilcnt_t f_ffree;\n+        fsfilcnt_t f_favail;\n+        c_ulong    f_fsid;\n+        c_ulong    f_flag;\n+        c_ulong    f_namemax;\n+    }\n+\n+    enum uint ST_RDONLY = 1;\n+    enum uint ST_NOSUID = 2;\n+\n+    int statvfs (const char* file, statvfs_t* buf);\n+    int fstatvfs (int fildes, statvfs_t* buf) @trusted;\n+}\n else version (FreeBSD)\n {\n     import core.sys.freebsd.sys.mount;"}, {"sha": "4c82930ffd6f54c6c5410ffb6f12108570f7f6f9", "filename": "libphobos/libdruntime/core/sys/posix/sys/time.d", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftime.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -163,6 +163,32 @@ else version (NetBSD)\n     int setitimer(int, in itimerval*, itimerval*);\n     int utimes(in char*, ref const(timeval)[2]);\n }\n+else version (OpenBSD)\n+{\n+    struct timeval\n+    {\n+        time_t      tv_sec;\n+        suseconds_t tv_usec;\n+    }\n+\n+    struct itimerval\n+    {\n+        timeval it_interval;\n+        timeval it_value;\n+    }\n+\n+    // non-standard\n+    struct timezone_t\n+    {\n+        int tz_minuteswest;\n+        int tz_dsttime;\n+    }\n+\n+    int getitimer(int, itimerval*);\n+    int gettimeofday(timeval*, timezone_t*);\n+    int setitimer(int, in itimerval*, itimerval*);\n+    int utimes(in char*, ref const(timeval)[2]);\n+}\n else version (DragonFlyBSD)\n {\n     struct timeval"}, {"sha": null, "filename": "libphobos/libdruntime/core/sys/posix/sys/ttycom.d", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fttycom.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6"}, {"sha": "9270bf53ca93007e58d740760921f11719570982", "filename": "libphobos/libdruntime/core/sys/posix/sys/types.d", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -177,6 +177,23 @@ else version (NetBSD)\n     alias c_long      time_t;\n     alias uint        uid_t;\n }\n+else version (OpenBSD)\n+{\n+    alias char*     caddr_t;\n+    alias long      blkcnt_t;\n+    alias int       blksize_t;\n+    alias int       dev_t;\n+    alias uint      gid_t;\n+    alias ulong     ino_t;\n+    alias uint      mode_t;\n+    alias uint      nlink_t;\n+    alias long      off_t;\n+    alias int       pid_t;\n+    //size_t (defined in core.stdc.stddef)\n+    alias c_long    ssize_t;\n+    alias long      time_t;\n+    alias uint      uid_t;\n+}\n else version (DragonFlyBSD)\n {\n     alias long      blkcnt_t;\n@@ -361,6 +378,16 @@ else version (NetBSD)\n     alias c_long    suseconds_t;\n     alias uint      useconds_t;\n }\n+else version (OpenBSD)\n+{\n+    alias ulong     fsblkcnt_t;\n+    alias ulong     fsfilcnt_t;\n+    alias long      clock_t;\n+    alias uint      id_t;\n+    alias c_long    key_t;\n+    alias c_long    suseconds_t;\n+    alias uint      useconds_t;\n+}\n else version (DragonFlyBSD)\n {\n     alias ulong     fsblkcnt_t;\n@@ -934,6 +961,26 @@ else version (NetBSD)\n     alias uint pthread_key_t;\n     alias void* pthread_t;\n }\n+else version (OpenBSD)\n+{\n+    alias void* pthread_attr_t;\n+    alias void* pthread_cond_t;\n+    alias void* pthread_condattr_t;\n+    alias int   pthread_key_t;\n+    alias void* pthread_mutex_t;\n+    alias void* pthread_mutexattr_t;\n+\n+    private struct pthread_once\n+    {\n+        int state;\n+        pthread_mutex_t mutex;\n+    }\n+    alias pthread_once pthread_once_t;\n+\n+    alias void* pthread_rwlock_t;\n+    alias void* pthread_rwlockattr_t;\n+    alias void* pthread_t;\n+}\n else version (DragonFlyBSD)\n {\n     alias int lwpid_t;\n@@ -1270,6 +1317,11 @@ else version (NetBSD)\n     alias void* pthread_barrier_t;\n     alias void* pthread_barrierattr_t;\n }\n+else version (OpenBSD)\n+{\n+    alias void* pthread_barrier_t;\n+    alias void* pthread_barrierattr_t;\n+}\n else version (DragonFlyBSD)\n {\n     alias void* pthread_barrier_t;\n@@ -1339,6 +1391,10 @@ else version (NetBSD)\n {\n     //already defined\n }\n+else version (OpenBSD)\n+{\n+    alias void* pthread_spinlock_t;\n+}\n else version (DragonFlyBSD)\n {\n     alias void* pthread_spinlock_t;"}, {"sha": "c115bf176608fbf239e509aa9f9789f89879851a", "filename": "libphobos/libdruntime/core/sys/posix/sys/uio.d", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fuio.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -90,6 +90,17 @@ else version (NetBSD)\n     ssize_t readv(int, in iovec*, int);\n     ssize_t writev(int, in iovec*, int);\n }\n+else version (OpenBSD)\n+{\n+    struct iovec\n+    {\n+        void*  iov_base;\n+        size_t iov_len;\n+    }\n+\n+    ssize_t readv(int, in iovec*, int);\n+    ssize_t writev(int, in iovec*, int);\n+}\n else version (DragonFlyBSD)\n {\n     struct iovec"}, {"sha": "11e98a72ab2cd107184c3d5989b05ae4f27d2bbe", "filename": "libphobos/libdruntime/core/sys/posix/sys/un.d", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fun.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -78,6 +78,15 @@ else version (NetBSD)\n         byte[104]   sun_path;\n     }\n }\n+else version (OpenBSD)\n+{\n+    struct sockaddr_un\n+    {\n+        ubyte       sun_len;\n+        sa_family_t sun_family;\n+        byte[104]   sun_path;\n+    }\n+}\n else version (DragonFlyBSD)\n {\n     struct sockaddr_un"}, {"sha": "5de50aca4654c8fc94eb0b3edb0a5bed6db67eba", "filename": "libphobos/libdruntime/core/sys/posix/sys/utsname.d", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Futsname.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -89,6 +89,21 @@ else version (NetBSD)\n \n     int uname(utsname* __name);\n }\n+else version (OpenBSD)\n+{\n+    private enum utsNameLength = 256;\n+\n+    struct utsname\n+    {\n+        char[utsNameLength] sysname = 0;\n+        char[utsNameLength] nodename = 0;\n+        char[utsNameLength] release = 0;\n+        char[utsNameLength] version_ = 0;\n+        char[utsNameLength] machine = 0;\n+    }\n+\n+    int uname(utsname* __name);\n+}\n else version (DragonFlyBSD)\n {\n     private enum utsNameLength = 32;"}, {"sha": "af54450b07f6e85b879a0fe05e57c880d4cc28c0", "filename": "libphobos/libdruntime/core/sys/posix/sys/wait.d", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fwait.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -144,6 +144,29 @@ else version (NetBSD)\n     extern (D) int  WSTOPSIG( int status )     { return status >> 8;                     }\n     extern (D) int  WTERMSIG( int status )     { return _WSTATUS( status );              }\n }\n+else version (OpenBSD)\n+{\n+    enum WNOHANG        = 1;\n+    enum WUNTRACED      = 2;\n+\n+    private\n+    {\n+        enum _WSTOPPED   = 0x7F;   // octal 0177\n+        enum _WCONTINUED = 0xFFFF; // octal 0177777\n+    }\n+\n+    extern (D) int _WSTATUS(int status)         { return (status & 0x7F);                     }\n+    extern (D) int  WEXITSTATUS(int status)   { return (status >> 8) & 0xFF;                  }\n+    extern (D) int  WIFCONTINUED(int status)  { return (status & _WCONTINUED) == _WCONTINUED; }\n+    extern (D) bool WIFEXITED(int status)     { return _WSTATUS(status) == 0;                 }\n+    extern (D) bool WIFSIGNALED(int status)\n+    {\n+        return _WSTATUS(status) != _WSTOPPED && _WSTATUS(status) != 0;\n+    }\n+    extern (D) bool WIFSTOPPED(int status)   { return (status & 0xFF) == _WSTOPPED; }\n+    extern (D) int  WSTOPSIG(int status)     { return (status >> 8) & 0xFF;         }\n+    extern (D) int  WTERMSIG(int status)     { return _WSTATUS(status);             }\n+}\n else version (DragonFlyBSD)\n {\n     enum WNOHANG        = 1;\n@@ -312,6 +335,13 @@ else version (NetBSD)\n     //enum WCONTINUED     = 4;\n     enum WNOWAIT        = 0x00010000;\n }\n+else version (OpenBSD)\n+{\n+    enum WCONTINUED     = 8;\n+    // OpenBSD does not define the following:\n+    //enum WSTOPPED\n+    //enum WNOWAIT\n+}\n else version (DragonFlyBSD)\n {\n     enum WSTOPPED       = WUNTRACED;"}, {"sha": "64548fb0563dfa3ee65c4a931faeedb961a4007b", "filename": "libphobos/libdruntime/core/sys/posix/syslog.d", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsyslog.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -276,6 +276,73 @@ else version (NetBSD)\n     void syslog (int __pri, const char *__fmt, ...);\n     void closelog();\n }\n+else version (OpenBSD)\n+{\n+    //PRIORITY\n+    enum\n+    {\n+        LOG_EMERG = 0,     /* system is unusable */\n+        LOG_ALERT = 1,     /* action must be taken immediately */\n+        LOG_CRIT  = 2,     /* critical conditions */\n+        LOG_ERR   = 3,     /* error conditions */\n+        LOG_WARNING = 4,   /* warning conditions */\n+        LOG_NOTICE  = 5,   /* normal but significant condition */\n+        LOG_INFO    = 6,   /* informational */\n+        LOG_DEBUG   = 7,   /* debug-level messages */\n+    }\n+\n+    //OPTIONS\n+    enum\n+    {\n+        LOG_PID    = 0x01,    /* log the pid with each message */\n+        LOG_CONS   = 0x02,    /* log on the console if errors in sending */\n+        LOG_ODELAY = 0x04,    /* delay open until first syslog() (default) */\n+        LOG_NDELAY = 0x08,    /* don't delay open */\n+        LOG_NOWAIT = 0x10,    /* don't wait for console forks: DEPRECATED */\n+        LOG_PERROR = 0x20,    /* log to stderr as well */\n+    }\n+\n+    //FACILITY\n+    enum\n+    {\n+        LOG_KERN   = (0<<3),  /* kernel messages */\n+        LOG_USER   = (1<<3),  /* random user-level messages */\n+        LOG_MAIL   = (2<<3),  /* mail system */\n+        LOG_DAEMON = (3<<3),  /* system daemons */\n+        LOG_AUTH   = (4<<3),  /* security/authorization messages */\n+        LOG_SYSLOG = (5<<3),  /* messages generated internally by syslogd */\n+        LOG_LPR    = (6<<3),  /* line printer subsystem */\n+        LOG_NEWS   = (7<<3),  /* network news subsystem */\n+        LOG_UUCP   = (8<<3),  /* UUCP subsystem */\n+        LOG_CRON   = (9<<3),  /* clock daemon */\n+        LOG_AUTHPRIV = (10<<3), /* security/authorization messages (private), */\n+        LOG_FTP    =  (11<<3), /* ftp daemon */\n+        // OpenBSD does not define the following:\n+        //LOG_NTP\n+        //LOG_SECURITY\n+        //LOG_CONSOLE\n+\n+        /* other codes through 15 reserved for system use */\n+        LOG_LOCAL0 = (16<<3), /* reserved for local use */\n+        LOG_LOCAL1 = (17<<3), /* reserved for local use */\n+        LOG_LOCAL2 = (18<<3), /* reserved for local use */\n+        LOG_LOCAL3 = (19<<3), /* reserved for local use */\n+        LOG_LOCAL4 = (20<<3), /* reserved for local use */\n+        LOG_LOCAL5 = (21<<3), /* reserved for local use */\n+        LOG_LOCAL6 = (22<<3), /* reserved for local use */\n+        LOG_LOCAL7 = (23<<3), /* reserved for local use */\n+\n+        LOG_NFACILITIES = 24,  /* current number of facilities */\n+    }\n+\n+    extern(D) int LOG_MASK(int pri) { return 1 << pri; }            /* mask for one priority */\n+    extern(D) int LOG_UPTO(int pri) { return (1 << (pri+1)) - 1; }  /* all priorities through pri */\n+\n+    void openlog(const char *, int, int);\n+    int  setlogmask(int);\n+    void syslog(int, const char *, ...);\n+    void closelog();\n+}\n else version (DragonFlyBSD)\n {\n     //PRIORITY"}, {"sha": "f296a7f6f2e97f36a328ba09d494f27c82819369", "filename": "libphobos/libdruntime/core/sys/posix/termios.d", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftermios.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -683,6 +683,114 @@ else version (NetBSD)\n     int     tcsendbreak(int, int);\n     int     tcsetattr(int, int, in termios*);\n }\n+else version (OpenBSD)\n+{\n+    alias uint  tcflag_t;\n+    alias ubyte cc_t;\n+    alias uint  speed_t;\n+\n+    enum NCCS   = 20;\n+\n+    struct termios\n+    {\n+        tcflag_t   c_iflag;\n+        tcflag_t   c_oflag;\n+        tcflag_t   c_cflag;\n+        tcflag_t   c_lflag;\n+        cc_t[NCCS] c_cc;\n+        int        c_ispeed;\n+        int        c_ospeed;\n+    }\n+\n+    enum VEOF       = 0;\n+    enum VEOL       = 1;\n+    enum VERASE     = 3;\n+    enum VINTR      = 8;\n+    enum VKILL      = 5;\n+    enum VMIN       = 16;\n+    enum VQUIT      = 9;\n+    enum VSTART     = 12;\n+    enum VSTOP      = 13;\n+    enum VSUSP      = 10;\n+    enum VTIME      = 17;\n+\n+    enum BRKINT     = 0x0000002;\n+    enum ICRNL      = 0x0000100;\n+    enum IGNBRK     = 0x0000001;\n+    enum IGNCR      = 0x0000080;\n+    enum IGNPAR     = 0x0000004;\n+    enum INLCR      = 0x0000040;\n+    enum INPCK      = 0x0000010;\n+    enum ISTRIP     = 0x0000020;\n+    enum IXOFF      = 0x0000400;\n+    enum IXON       = 0x0000200;\n+    enum PARMRK     = 0x0000008;\n+\n+    enum OPOST      = 0x0000001;\n+\n+    enum B0         = 0;\n+    enum B50        = 50;\n+    enum B75        = 75;\n+    enum B110       = 110;\n+    enum B134       = 134;\n+    enum B150       = 150;\n+    enum B200       = 200;\n+    enum B300       = 300;\n+    enum B600       = 600;\n+    enum B1200      = 1200;\n+    enum B1800      = 1800;\n+    enum B2400      = 2400;\n+    enum B4800      = 4800;\n+    enum B9600      = 9600;\n+    enum B19200     = 19200;\n+    enum B38400     = 38400;\n+\n+    enum CSIZE      = 0x0000300;\n+    enum   CS5      = 0x0000000;\n+    enum   CS6      = 0x0000100;\n+    enum   CS7      = 0x0000200;\n+    enum   CS8      = 0x0000300;\n+    enum CSTOPB     = 0x0000400;\n+    enum CREAD      = 0x0000800;\n+    enum PARENB     = 0x0001000;\n+    enum PARODD     = 0x0002000;\n+    enum HUPCL      = 0x0004000;\n+    enum CLOCAL     = 0x0008000;\n+\n+    enum ECHO       = 0x00000008;\n+    enum ECHOE      = 0x00000002;\n+    enum ECHOK      = 0x00000004;\n+    enum ECHONL     = 0x00000010;\n+    enum ICANON     = 0x00000100;\n+    enum IEXTEN     = 0x00000400;\n+    enum ISIG       = 0x00000080;\n+    enum NOFLSH     = 0x80000000;\n+    enum TOSTOP     = 0x00400000;\n+\n+    enum TCSANOW    = 0;\n+    enum TCSADRAIN  = 1;\n+    enum TCSAFLUSH  = 2;\n+\n+    enum TCIFLUSH   = 1;\n+    enum TCOFLUSH   = 2;\n+    enum TCIOFLUSH  = 3;\n+\n+    enum TCIOFF     = 3;\n+    enum TCION      = 4;\n+    enum TCOOFF     = 1;\n+    enum TCOON      = 2;\n+\n+    speed_t cfgetispeed(in termios*);\n+    speed_t cfgetospeed(in termios*);\n+    int     cfsetispeed(termios*, speed_t);\n+    int     cfsetospeed(termios*, speed_t);\n+    int     tcdrain(int);\n+    int     tcflow(int, int);\n+    int     tcflush(int, int);\n+    int     tcgetattr(int, termios*);\n+    int     tcsendbreak(int, int);\n+    int     tcsetattr(int, int, in termios*);\n+}\n else version (Solaris)\n {\n     alias tcflag_t = uint;\n@@ -1141,6 +1249,40 @@ else version (NetBSD)\n \n     pid_t   tcgetsid(int);\n }\n+else version (OpenBSD)\n+{\n+    enum IXANY      = 0x00000800;\n+\n+    enum ONLCR      = 0x00000002;\n+    enum OCRNL      = 0x00000010;\n+    enum ONOCR      = 0x00000040;\n+    enum ONLRET     = 0x00000080;\n+    //enum OFILL\n+    //enum NLDLY\n+    //enum   NL0\n+    //enum   NL1\n+    //enum CRDLY\n+    //enum   CR0\n+    //enum   CR1\n+    //enum   CR2\n+    //enum   CR3\n+    //enum TABDLY\n+    //enum   TAB0\n+    //enum   TAB1\n+    //enum   TAB2\n+    //enum   TAB3\n+    //enum BSDLY\n+    //enum   BS0\n+    //enum   BS1\n+    //enum VTDLY\n+    //enum   VT0\n+    //enum   VT1\n+    //enum FFDLY\n+    //enum   FF0\n+    //enum   FF1\n+\n+    pid_t   tcgetsid(int);\n+}\n else version (Solaris)\n {\n     enum IXANY      = 0x0000800;"}, {"sha": "4f62a92472e91543faa04bfd0074eed622f45537", "filename": "libphobos/libdruntime/core/sys/posix/time.d", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Ftime.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -65,6 +65,10 @@ else version (NetBSD)\n {\n     time_t timegm(tm*); // non-standard\n }\n+else version (OpenBSD)\n+{\n+    time_t timegm(tm*); // non-standard\n+}\n else version (DragonFlyBSD)\n {\n     time_t timegm(tm*); // non-standard\n@@ -145,6 +149,11 @@ else version (NetBSD)\n     // time.h\n     enum CLOCK_MONOTONIC         = 3;\n }\n+else version (OpenBSD)\n+{\n+    // time.h\n+    enum CLOCK_MONOTONIC         = 3;\n+}\n else version (DragonFlyBSD)\n {   // time.h\n     enum CLOCK_MONOTONIC         = 4;\n@@ -335,6 +344,30 @@ else version (NetBSD)\n     int timer_getoverrun(timer_t);\n     int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n }\n+else version (OpenBSD)\n+{\n+    struct itimerspec\n+    {\n+        timespec it_interval;\n+        timespec it_value;\n+    }\n+\n+    enum CLOCK_REALTIME      = 0;\n+    enum TIMER_ABSTIME       = 0x1;\n+\n+    alias int clockid_t; // <sys/_types.h>\n+    alias int timer_t;\n+\n+    int clock_getres(clockid_t, timespec*);\n+    int clock_gettime(clockid_t, timespec*);\n+    int clock_settime(clockid_t, in timespec*);\n+    int nanosleep(in timespec*, timespec*);\n+    int timer_create(clockid_t, sigevent*, timer_t*);\n+    int timer_delete(timer_t);\n+    int timer_gettime(timer_t, itimerspec*);\n+    int timer_getoverrun(timer_t);\n+    int timer_settime(timer_t, int, in itimerspec*, itimerspec*);\n+}\n else version (Solaris)\n {\n     enum CLOCK_PROCESS_CPUTIME_ID = 5; // <sys/time_impl.h>\n@@ -499,6 +532,13 @@ else version (NetBSD)\n     tm*   gmtime_r(in time_t*, tm*);\n     tm*   localtime_r(in time_t*, tm*);\n }\n+else version (OpenBSD)\n+{\n+    char* asctime_r(in tm*, char*);\n+    char* ctime_r(in time_t*, char*);\n+    tm*   gmtime_r(in time_t*, tm*);\n+    tm*   localtime_r(in time_t*, tm*);\n+}\n else version (DragonFlyBSD)\n {\n     char* asctime_r(in tm*, char*);\n@@ -578,6 +618,11 @@ else version (NetBSD)\n     tm*   getdate(in char*);\n     char* strptime(in char*, in char*, tm*);\n }\n+else version (OpenBSD)\n+{\n+    //tm*   getdate(in char*);\n+    char* strptime(in char*, in char*, tm*);\n+}\n else version (DragonFlyBSD)\n {\n     //tm*   getdate(in char*);"}, {"sha": "c37d45fa68acf8a6955780a1606ff926455ae670", "filename": "libphobos/libdruntime/core/sys/posix/ucontext.d", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -968,6 +968,189 @@ else version (NetBSD)\n \n     }\n }\n+else version (OpenBSD)\n+{\n+    version (Alpha)\n+    {\n+        struct sigcontext\n+        {\n+            c_long      sc_cookie;\n+            c_long      sc_mask;\n+            c_long      sc_pc;\n+            c_long      sc_ps;\n+            c_ulong[32] sc_regs;\n+            c_long      sc_ownedfp;\n+            c_ulong[32] sc_fpregs;\n+            c_ulong     sc_fpcr;\n+            c_ulong     sc_fp_control;\n+            c_long[2]   sc_reserved;\n+            c_long[8]   sc_xxx;\n+        }\n+    }\n+    else version (X86_64)\n+    {\n+        struct sigcontext\n+        {\n+            c_long  sc_rdi;\n+            c_long  sc_rsi;\n+            c_long  sc_rdx;\n+            c_long  sc_rcx;\n+            c_long  sc_r8;\n+            c_long  sc_r9;\n+            c_long  sc_r10;\n+            c_long  sc_r11;\n+            c_long  sc_r12;\n+            c_long  sc_r13;\n+            c_long  sc_r14;\n+            c_long  sc_r15;\n+            c_long  sc_rbp;\n+            c_long  sc_rbx;\n+            c_long  sc_rax;\n+            c_long  sc_gs;\n+            c_long  sc_fs;\n+            c_long  sc_es;\n+            c_long  sc_ds;\n+            c_long  sc_trapno;\n+            c_long  sc_err;\n+            c_long  sc_rip;\n+            c_long  sc_cs;\n+            c_long  sc_rflags;\n+            c_long  sc_rsp;\n+            c_long  sc_ss;\n+            void*   sc_fpstate;  // struct fxsave64*\n+            int   __sc_unused;\n+            int     sc_mask;\n+            c_long  sc_cookie;\n+        }\n+    }\n+    else version (AArch64)\n+    {\n+        struct sigcontext\n+        {\n+            int       __sc_unused;\n+            int         sc_mask;\n+            c_ulong     sc_sp;\n+            c_ulong     sc_lr;\n+            c_ulong     sc_elr;\n+            c_ulong     sc_spsr;\n+            c_ulong[30] sc_x;\n+            c_long      sc_cookie;\n+        }\n+    }\n+    else version (ARM)\n+    {\n+        struct sigcontext\n+        {\n+            c_long    sc_cookie;\n+            int       sc_mask;\n+            uint      sc_spsr;\n+            uint      sc_r0;\n+            uint      sc_r1;\n+            uint      sc_r2;\n+            uint      sc_r3;\n+            uint      sc_r4;\n+            uint      sc_r5;\n+            uint      sc_r6;\n+            uint      sc_r7;\n+            uint      sc_r8;\n+            uint      sc_r9;\n+            uint      sc_r10;\n+            uint      sc_r11;\n+            uint      sc_r12;\n+            uint      sc_usr_sp;\n+            uint      sc_usr_lr;\n+            uint      sc_svc_lr;\n+            uint      sc_pc;\n+            uint      sc_fpused;\n+            uint      sc_fpscr;\n+            ulong[32] sc_fpreg;\n+        }\n+    }\n+    else version (HPPA)\n+    {\n+        struct sigcontext\n+        {\n+            c_ulong   __sc_unused;\n+            c_long      sc_mask;\n+            c_ulong     sc_ps;\n+            c_ulong     sc_fp;\n+            c_ulong     sc_pcoqh;\n+            c_ulong     sc_pcoqt;\n+            c_ulong[2]  sc_resv;\n+            c_ulong[32] sc_regs;\n+            c_ulong[64] sc_fpregs;\n+            c_long      sc_cookie;\n+        }\n+    }\n+    else version (X86)\n+    {\n+        struct sigcontext\n+        {\n+            int     sc_gs;\n+            int     sc_fs;\n+            int     sc_es;\n+            int     sc_ds;\n+            int     sc_edi;\n+            int     sc_esi;\n+            int     sc_ebp;\n+            int     sc_ebx;\n+            int     sc_edx;\n+            int     sc_ecx;\n+            int     sc_eax;\n+            int     sc_eip;\n+            int     sc_cs;\n+            int     sc_eflags;\n+            int     sc_esp;\n+            int     sc_ss;\n+            c_long  sc_cookie;\n+            int     sc_mask;\n+            int     sc_trapno;\n+            int     sc_err;\n+            void*   sc_fpstate; // union savefpu*\n+        };\n+    }\n+    else version (PPC)\n+    {\n+        private struct trapframe\n+        {\n+            c_long[32] fixreg;\n+            c_long lr;\n+            c_long cr;\n+            c_long xer;\n+            c_long ctr;\n+            int srr0;\n+            int srr1;\n+            int dar;\n+            int dsisr;\n+            c_long exc;\n+        }\n+\n+        struct sigcontext\n+        {\n+            c_long    sc_cookie;\n+            int       sc_mask;\n+            trapframe sc_frame;\n+        }\n+    }\n+    else version (SPARC64)\n+    {\n+        struct sigcontext\n+        {\n+            c_long sc_cookie;\n+            c_long sc_sp;\n+            c_long sc_pc;\n+            c_long sc_npc;\n+            c_long sc_tstate;\n+            c_long sc_g1;\n+            c_long sc_o0;\n+            int    sc_mask;\n+        }\n+    }\n+    else\n+        static assert(false, \"Architecture not supported.\");\n+\n+    alias ucontext_t = sigcontext;\n+}\n else version (DragonFlyBSD)\n {\n     // <machine/ucontext.h>"}, {"sha": "04de776439052410fceb1f6dc58dcf552a948a8b", "filename": "libphobos/libdruntime/core/sys/posix/unistd.d", "status": "modified", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Funistd.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -131,6 +131,11 @@ else version (NetBSD)\n     off_t lseek(int, off_t, int) @trusted;\n     int   ftruncate(int, off_t) @trusted;\n }\n+else version (OpenBSD)\n+{\n+    off_t lseek(int, off_t, int) @trusted;\n+    int   ftruncate(int, off_t) @trusted;\n+}\n else version (DragonFlyBSD)\n {\n     off_t lseek(int, off_t, int) @trusted;\n@@ -993,6 +998,188 @@ else version (NetBSD)\n         _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS =  14,\n     }\n }\n+else version (OpenBSD)\n+{\n+    enum F_OK       = 0;\n+    enum R_OK       = 0x04;\n+    enum W_OK       = 0x02;\n+    enum X_OK       = 0x01;\n+\n+    enum F_ULOCK    = 0;\n+    enum F_LOCK     = 1;\n+    enum F_TLOCK    = 2;\n+    enum F_TEST     = 3;\n+\n+    enum\n+    {\n+        _SC_ARG_MAX                      =  1,\n+        _SC_CHILD_MAX                    =  2,\n+        _O_SC_CLK_TCK                    =  3,\n+        _SC_NGROUPS_MAX                  =  4,\n+        _SC_OPEN_MAX                     =  5,\n+        _SC_JOB_CONTROL                  =  6,\n+        _SC_SAVED_IDS                    =  7,\n+        _SC_VERSION                      =  8,\n+        _SC_BC_BASE_MAX                  =  9,\n+        _SC_BC_DIM_MAX                   = 10,\n+        _SC_BC_SCALE_MAX                 = 11,\n+        _SC_BC_STRING_MAX                = 12,\n+        _SC_COLL_WEIGHTS_MAX             = 13,\n+        _SC_EXPR_NEST_MAX                = 14,\n+        _SC_LINE_MAX                     = 15,\n+        _SC_RE_DUP_MAX                   = 16,\n+        _SC_2_VERSION                    = 17,\n+        _SC_2_C_BIND                     = 18,\n+        _SC_2_C_DEV                      = 19,\n+        _SC_2_CHAR_TERM                  = 20,\n+        _SC_2_FORT_DEV                   = 21,\n+        _SC_2_FORT_RUN                   = 22,\n+        _SC_2_LOCALEDEF                  = 23,\n+        _SC_2_SW_DEV                     = 24,\n+        _SC_2_UPE                        = 25,\n+        _SC_STREAM_MAX                   = 26,\n+        _SC_TZNAME_MAX                   = 27,\n+        _SC_PAGESIZE                     = 28,\n+        _SC_FSYNC                        = 29,\n+        _SC_XOPEN_SHM                    = 30,\n+        _SC_SEM_NSEMS_MAX                = 31,\n+        _SC_SEM_VALUE_MAX                = 32,\n+        _SC_HOST_NAME_MAX                = 33,\n+        _SC_MONOTONIC_CLOCK              = 34,\n+        _SC_2_PBS                        = 35,\n+        _SC_2_PBS_ACCOUNTING             = 36,\n+        _SC_2_PBS_CHECKPOINT             = 37,\n+        _SC_2_PBS_LOCATE                 = 38,\n+        _SC_2_PBS_MESSAGE                = 39,\n+        _SC_2_PBS_TRACK                  = 40,\n+        _SC_ADVISORY_INFO                = 41,\n+        _SC_AIO_LISTIO_MAX               = 42,\n+        _SC_AIO_MAX                      = 43,\n+        _SC_AIO_PRIO_DELTA_MAX           = 44,\n+        _SC_ASYNCHRONOUS_IO              = 45,\n+        _SC_ATEXIT_MAX                   = 46,\n+        _SC_BARRIERS                     = 47,\n+        _SC_CLOCK_SELECTION              = 48,\n+        _SC_CPUTIME                      = 49,\n+        _SC_DELAYTIMER_MAX               = 50,\n+        _SC_IOV_MAX                      = 51,\n+        _SC_IPV6                         = 52,\n+        _SC_MAPPED_FILES                 = 53,\n+        _SC_MEMLOCK                      = 54,\n+        _SC_MEMLOCK_RANGE                = 55,\n+        _SC_MEMORY_PROTECTION            = 56,\n+        _SC_MESSAGE_PASSING              = 57,\n+        _SC_MQ_OPEN_MAX                  = 58,\n+        _SC_MQ_PRIO_MAX                  = 59,\n+        _SC_PRIORITIZED_IO               = 60,\n+        _SC_PRIORITY_SCHEDULING          = 61,\n+        _SC_RAW_SOCKETS                  = 62,\n+        _SC_READER_WRITER_LOCKS          = 63,\n+        _SC_REALTIME_SIGNALS             = 64,\n+        _SC_REGEXP                       = 65,\n+        _SC_RTSIG_MAX                    = 66,\n+        _SC_SEMAPHORES                   = 67,\n+        _SC_SHARED_MEMORY_OBJECTS        = 68,\n+        _SC_SHELL                        = 69,\n+        _SC_SIGQUEUE_MAX                 = 70,\n+        _SC_SPAWN                        = 71,\n+        _SC_SPIN_LOCKS                   = 72,\n+        _SC_SPORADIC_SERVER              = 73,\n+        _SC_SS_REPL_MAX                  = 74,\n+        _SC_SYNCHRONIZED_IO              = 75,\n+        _SC_SYMLOOP_MAX                  = 76,\n+        _SC_THREAD_ATTR_STACKADDR        = 77,\n+        _SC_THREAD_ATTR_STACKSIZE        = 78,\n+        _SC_THREAD_CPUTIME               = 79,\n+        _SC_THREAD_DESTRUCTOR_ITERATIONS = 80,\n+        _SC_THREAD_KEYS_MAX              = 81,\n+        _SC_THREAD_PRIO_INHERIT          = 82,\n+        _SC_THREAD_PRIO_PROTECT          = 83,\n+        _SC_THREAD_PRIORITY_SCHEDULING   = 84,\n+        _SC_THREAD_PROCESS_SHARED        = 85,\n+        _SC_THREAD_ROBUST_PRIO_INHERIT   = 86,\n+        _SC_THREAD_ROBUST_PRIO_PROTECT   = 87,\n+        _SC_THREAD_SPORADIC_SERVER       = 88,\n+        _SC_THREAD_STACK_MIN             = 89,\n+        _SC_THREAD_THREADS_MAX           = 90,\n+        _SC_THREADS                      = 91,\n+        _SC_TIMEOUTS                     = 92,\n+        _SC_TIMER_MAX                    = 93,\n+        _SC_TIMERS                       = 94,\n+        _SC_TRACE                        = 95,\n+        _SC_TRACE_EVENT_FILTER           = 96,\n+        _SC_TRACE_EVENT_NAME_MAX         = 97,\n+        _SC_TRACE_INHERIT                = 98,\n+        _SC_TRACE_LOG                    = 99,\n+        _SC_GETGR_R_SIZE_MAX             = 100,\n+        _SC_GETPW_R_SIZE_MAX             = 101,\n+        _SC_LOGIN_NAME_MAX               = 102,\n+        _SC_THREAD_SAFE_FUNCTIONS        = 103,\n+        _SC_TRACE_NAME_MAX               = 104,\n+        _SC_TRACE_SYS_MAX                = 105,\n+        _SC_TRACE_USER_EVENT_MAX         = 106,\n+        _SC_TTY_NAME_MAX                 = 107,\n+        _SC_TYPED_MEMORY_OBJECTS         = 108,\n+        _SC_V6_ILP32_OFF32               = 109,\n+        _SC_V6_ILP32_OFFBIG              = 110,\n+        _SC_V6_LP64_OFF64                = 111,\n+        _SC_V6_LPBIG_OFFBIG              = 112,\n+        _SC_V7_ILP32_OFF32               = 113,\n+        _SC_V7_ILP32_OFFBIG              = 114,\n+        _SC_V7_LP64_OFF64                = 115,\n+        _SC_V7_LPBIG_OFFBIG              = 116,\n+        _SC_XOPEN_CRYPT                  = 117,\n+        _SC_XOPEN_ENH_I18N               = 118,\n+        _SC_XOPEN_LEGACY                 = 119,\n+        _SC_XOPEN_REALTIME               = 120,\n+        _SC_XOPEN_REALTIME_THREADS       = 121,\n+        _SC_XOPEN_STREAMS                = 122,\n+        _SC_XOPEN_UNIX                   = 123,\n+        _SC_XOPEN_UUCP                   = 124,\n+        _SC_XOPEN_VERSION                = 125,\n+        _SC_PHYS_PAGES                   = 500,\n+        _SC_AVPHYS_PAGES                 = 501,\n+        _SC_NPROCESSORS_CONF             = 502,\n+        _SC_NPROCESSORS_ONLN             = 503,\n+    }\n+\n+    enum _SC_PAGE_SIZE = _SC_PAGESIZE;\n+\n+    enum\n+    {\n+        _CS_PATH                           = 1,\n+        _CS_POSIX_V6_ILP32_OFF32_CFLAGS    = 2,\n+        _CS_POSIX_V6_ILP32_OFF32_LDFLAGS   = 3,\n+        _CS_POSIX_V6_ILP32_OFF32_LIBS      = 4,\n+        _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS   = 5,\n+        _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS  = 6,\n+        _CS_POSIX_V6_ILP32_OFFBIG_LIBS     = 7,\n+        _CS_POSIX_V6_LP64_OFF64_CFLAGS     = 8,\n+        _CS_POSIX_V6_LP64_OFF64_LDFLAGS    = 9,\n+        _CS_POSIX_V6_LP64_OFF64_LIBS       = 10,\n+        _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS   = 11,\n+        _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS  = 12,\n+        _CS_POSIX_V6_LPBIG_OFFBIG_LIBS     = 13,\n+        _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14,\n+        _CS_V6_ENV                         = 15,\n+        _CS_POSIX_V7_ILP32_OFF32_CFLAGS    = 16,\n+        _CS_POSIX_V7_ILP32_OFF32_LDFLAGS   = 17,\n+        _CS_POSIX_V7_ILP32_OFF32_LIBS      = 18,\n+        _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS   = 19,\n+        _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS  = 20,\n+        _CS_POSIX_V7_ILP32_OFFBIG_LIBS     = 21,\n+        _CS_POSIX_V7_LP64_OFF64_CFLAGS     = 22,\n+        _CS_POSIX_V7_LP64_OFF64_LDFLAGS    = 23,\n+        _CS_POSIX_V7_LP64_OFF64_LIBS       = 24,\n+        _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS   = 25,\n+        _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS  = 26,\n+        _CS_POSIX_V7_LPBIG_OFFBIG_LIBS     = 27,\n+        _CS_POSIX_V7_THREADS_CFLAGS        = 28,\n+        _CS_POSIX_V7_THREADS_LDFLAGS       = 29,\n+        _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 30,\n+        _CS_V7_ENV                         = 31,\n+    }\n+}\n else version (DragonFlyBSD)\n {\n     enum F_OK       = 0;\n@@ -2007,6 +2194,10 @@ else version (NetBSD)\n {\n     int fsync(int) @trusted;\n }\n+else version (OpenBSD)\n+{\n+    int fsync(int) @trusted;\n+}\n else version (DragonFlyBSD)\n {\n     int fsync(int) @trusted;\n@@ -2208,6 +2399,31 @@ else version (NetBSD)\n     int        usleep(useconds_t) @trusted;\n     pid_t      vfork();\n }\n+else version (OpenBSD)\n+{\n+    char*      crypt(in char*, in char*);\n+    //char*      ctermid(char*);\n+    //void       encrypt(ref char[64], int) @trusted;\n+    int        fchdir(int) @trusted;\n+    c_long     gethostid() @trusted;\n+    pid_t      getpgid(pid_t) @trusted;\n+    pid_t      getsid(pid_t) @trusted;\n+    char*      getwd(char*);\n+    int        lchown(in char*, uid_t, gid_t);\n+    int        lockf(int, int, off_t) @trusted;\n+    int        nice(int) @trusted;\n+    ssize_t    pread(int, void*, size_t, off_t);\n+    ssize_t    pwrite(int, in void*, size_t, off_t);\n+    int        setpgrp(pid_t, pid_t) @trusted;\n+    int        setregid(gid_t, gid_t) @trusted;\n+    int        setreuid(uid_t, uid_t) @trusted;\n+    void       swab(in void*, void*, ssize_t);\n+    void       sync() @trusted;\n+    int        truncate(in char*, off_t);\n+    useconds_t ualarm(useconds_t, useconds_t) @trusted;\n+    int        usleep(useconds_t) @trusted;\n+    pid_t      vfork();\n+}\n else version (DragonFlyBSD)\n {\n     char*      crypt(in char*, in char*);"}, {"sha": "ae54c20b2fc0cbb8ba6cf6281fb4aaf4bd3492e7", "filename": "libphobos/libdruntime/core/sys/posix/utime.d", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Futime.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -94,6 +94,16 @@ else version (NetBSD)\n \n     int utime(in char*, in utimbuf*);\n }\n+else version (OpenBSD)\n+{\n+    struct utimbuf\n+    {\n+        time_t  actime;\n+        time_t  modtime;\n+    }\n+\n+    int utime(in char*, in utimbuf*);\n+}\n else version (DragonFlyBSD)\n {\n     struct utimbuf"}, {"sha": "fb5f942e551ada32cb70b81a10f85134e04d9da4", "filename": "libphobos/libdruntime/core/thread.d", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Fthread.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fthread.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -1190,8 +1190,8 @@ class Thread\n             }\n             else\n             {\n-                // NOTE: pthread_setschedprio is not implemented on Darwin, FreeBSD or DragonFlyBSD, so use\n-                //       the more complicated get/set sequence below.\n+                // NOTE: pthread_setschedprio is not implemented on Darwin, FreeBSD, OpenBSD,\n+                //       or DragonFlyBSD, so use the more complicated get/set sequence below.\n                 int         policy;\n                 sched_param param;\n \n@@ -3205,6 +3205,7 @@ extern (C) @nogc nothrow\n     version (CRuntime_Glibc) int pthread_getattr_np(pthread_t thread, pthread_attr_t* attr);\n     version (FreeBSD) int pthread_attr_get_np(pthread_t thread, pthread_attr_t* attr);\n     version (NetBSD) int pthread_attr_get_np(pthread_t thread, pthread_attr_t* attr);\n+    version (OpenBSD) int pthread_stackseg_np(pthread_t thread, stack_t* sinfo);\n     version (DragonFlyBSD) int pthread_attr_get_np(pthread_t thread, pthread_attr_t* attr);\n     version (Solaris) int thr_stksegment(stack_t* stk);\n     version (CRuntime_Bionic) int pthread_getattr_np(pthread_t thid, pthread_attr_t* attr);\n@@ -3298,6 +3299,13 @@ private void* getStackBottom() nothrow @nogc\n             addr += size;\n         return addr;\n     }\n+    else version (OpenBSD)\n+    {\n+        stack_t stk;\n+\n+        pthread_stackseg_np(pthread_self(), &stk);\n+        return stk.ss_sp;\n+    }\n     else version (DragonFlyBSD)\n     {\n         pthread_attr_t attr;\n@@ -4612,6 +4620,7 @@ private:\n             version (Posix) import core.sys.posix.sys.mman; // mmap\n             version (FreeBSD) import core.sys.freebsd.sys.mman : MAP_ANON;\n             version (NetBSD) import core.sys.netbsd.sys.mman : MAP_ANON;\n+            version (OpenBSD) import core.sys.openbsd.sys.mman : MAP_ANON;\n             version (DragonFlyBSD) import core.sys.dragonflybsd.sys.mman : MAP_ANON;\n             version (CRuntime_Glibc) import core.sys.linux.sys.mman : MAP_ANON;\n             version (Darwin) import core.sys.darwin.sys.mman : MAP_ANON;"}, {"sha": "e7744c85fbaf57f8a154b05fb4669eeccb30b8b7", "filename": "libphobos/libdruntime/core/time.d", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Ftime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fcore%2Ftime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Ftime.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -164,7 +164,7 @@ version (CoreDdoc) enum ClockType\n     normal = 0,\n \n     /++\n-        $(BLUE Linux-Only)\n+        $(BLUE Linux,OpenBSD-Only)\n \n         Uses $(D CLOCK_BOOTTIME).\n       +/\n@@ -214,7 +214,7 @@ version (CoreDdoc) enum ClockType\n     precise = 3,\n \n     /++\n-        $(BLUE Linux,Solaris-Only)\n+        $(BLUE Linux,OpenBSD,Solaris-Only)\n \n         Uses $(D CLOCK_PROCESS_CPUTIME_ID).\n       +/\n@@ -251,14 +251,14 @@ version (CoreDdoc) enum ClockType\n     second = 6,\n \n     /++\n-        $(BLUE Linux,Solaris-Only)\n+        $(BLUE Linux,OpenBSD,Solaris-Only)\n \n         Uses $(D CLOCK_THREAD_CPUTIME_ID).\n       +/\n     threadCPUTime = 7,\n \n     /++\n-        $(BLUE FreeBSD-Only)\n+        $(BLUE DragonFlyBSD,FreeBSD,OpenBSD-Only)\n \n         Uses $(D CLOCK_UPTIME).\n       +/\n@@ -320,6 +320,17 @@ else version (NetBSD) enum ClockType\n     precise = 3,\n     second = 6,\n }\n+else version (OpenBSD) enum ClockType\n+{\n+    normal = 0,\n+    bootTime = 1,\n+    coarse = 2,\n+    precise = 3,\n+    processCPUTime = 4,\n+    second = 6,\n+    threadCPUTime = 7,\n+    uptime = 8,\n+}\n else version (DragonFlyBSD) enum ClockType\n {\n     normal = 0,\n@@ -396,6 +407,21 @@ version (Posix)\n             case second: assert(0);\n             }\n         }\n+        else version (OpenBSD)\n+        {\n+            import core.sys.openbsd.time;\n+            with(ClockType) final switch (clockType)\n+            {\n+            case bootTime: return CLOCK_BOOTTIME;\n+            case coarse: return CLOCK_MONOTONIC;\n+            case normal: return CLOCK_MONOTONIC;\n+            case precise: return CLOCK_MONOTONIC;\n+            case processCPUTime: return CLOCK_PROCESS_CPUTIME_ID;\n+            case threadCPUTime: return CLOCK_THREAD_CPUTIME_ID;\n+            case uptime: return CLOCK_UPTIME;\n+            case second: assert(0);\n+            }\n+        }\n         else version (DragonFlyBSD)\n         {\n             import core.sys.dragonflybsd.time;"}, {"sha": "337f134e6bbd1797ffcc57a28e32f93096b46d4d", "filename": "libphobos/libdruntime/gc/os.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fgc%2Fos.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0234a9176c7b4e7810f75eba5cbc060eae7b13a6/libphobos%2Flibdruntime%2Fgc%2Fos.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fgc%2Fos.d?ref=0234a9176c7b4e7810f75eba5cbc060eae7b13a6", "patch": "@@ -43,6 +43,7 @@ else version (Posix)\n     version (FreeBSD) import core.sys.freebsd.sys.mman : MAP_ANON;\n     version (DragonFlyBSD) import core.sys.dragonflybsd.sys.mman : MAP_ANON;\n     version (NetBSD) import core.sys.netbsd.sys.mman : MAP_ANON;\n+    version (OpenBSD) import core.sys.openbsd.sys.mman : MAP_ANON;\n     version (CRuntime_Glibc) import core.sys.linux.sys.mman : MAP_ANON;\n     version (Darwin) import core.sys.darwin.sys.mman : MAP_ANON;\n     version (CRuntime_UClibc) import core.sys.linux.sys.mman : MAP_ANON;"}]}