{"sha": "9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3NTQyYjljMjdhYWQzNGRmZDcwZjRkNmMzY2M5MDM0YjkzMjdhOA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2012-11-29T02:39:20Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2012-11-29T02:39:20Z"}, "message": "* config/epiphany/epiphany.md (isub_i+1): Work around generator bug.\n\nFrom-SVN: r193919", "tree": {"sha": "8095015d66f0a6bd9b60a890c1be56064e569ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8095015d66f0a6bd9b60a890c1be56064e569ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d7aa5780cebd11f16917ca3983cfd65b457317a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7aa5780cebd11f16917ca3983cfd65b457317a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7aa5780cebd11f16917ca3983cfd65b457317a"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "fb11de07682ee075a340112555bd779ace02ade6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8", "patch": "@@ -10,6 +10,8 @@\n \t* config/epiphany/t-epiphany (SPECS): Set.\n \t(specs): New rule.\n \n+\t* config/epiphany/epiphany.md (isub_i+1): Work around generator bug.\n+\n 2012-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/36728"}, {"sha": "fb55e3846fd128ee3fa00397fcd7d687023a2ad7", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=9b7542b9c27aad34dfd70f4d6c3cc9034b9327a8", "patch": "@@ -1024,19 +1024,22 @@\n ; use next_active_insn to look at the 'following' insn.  That should\n ; exist, because peephole2 runs after reload, and there has to be\n ; a return after an fp_int insn.\n+; ??? However, we can not even ordinarily match the preceding insn;\n+; there is some bug in the generators such that then it leaves out\n+; the check for PARALLEL before the length check for the then-second\n+; main insn.  Observed when compiling compatibility-atomic-c++0x.cc\n+; from libstdc++-v3.\n (define_peephole2\n-  [(match_parallel 5 \"float_operation\" [(match_operand 6 \"\" \"\")])\n-   (match_parallel 3 \"float_operation\"\n+  [(match_parallel 3 \"float_operation\"\n      [(set (match_operand:SI 0 \"gpr_operand\" \"\")\n \t   (match_operator:SI 4 \"addsub_operator\"\n \t     [(match_operand:SI 1 \"gpr_operand\" \"\")\n \t      (match_operand:SI 2 \"gpr_operand\" \"\")]))\n       (clobber (reg:CC_FP CCFP_REGNUM))])]\n-  \"get_attr_sched_use_fpu (peep2_next_insn (0))\n-   && peep2_regno_dead_p (2, CC_REGNUM)\n-   && get_attr_sched_use_fpu (next_active_insn (peep2_next_insn (1)))\"\n-  [(match_dup 5)\n-   (parallel [(set (match_dup 0) (match_dup 4))\n+  \"get_attr_sched_use_fpu (prev_active_insn (peep2_next_insn (0)))\n+   && peep2_regno_dead_p (1, CC_REGNUM)\n+   && get_attr_sched_use_fpu (next_active_insn (peep2_next_insn (0)))\"\n+  [(parallel [(set (match_dup 0) (match_dup 4))\n \t      (clobber (reg:CC CC_REGNUM))])]\n )\n "}]}