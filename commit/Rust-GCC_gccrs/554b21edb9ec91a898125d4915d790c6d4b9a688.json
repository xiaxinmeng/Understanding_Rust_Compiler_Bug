{"sha": "554b21edb9ec91a898125d4915d790c6d4b9a688", "node_id": "C_kwDOANBUbNoAKDU1NGIyMWVkYjllYzkxYTg5ODEyNWQ0OTE1ZDc5MGM2ZDRiOWE2ODg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-13T10:38:35Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-13T14:25:28Z"}, "message": "Clear nonzero mask when inverting ranges.\n\nEvery time we set a range we should take into account the nonzero\nmask.  This happens automatically for the set() methods, plus all the\nother assignment, intersect, and union methods.  Unfortunately I\nforgot about the invert code.\n\nAlso, for good measure I audited the rest of the setters in\nvalue_range.cc and plugged the legacy code to pessimize the masks to\n-1 for union/intersect, since we don't support the masks on them (or\nrather, we don't keep very good track of them).\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::copy_to_legacy): Set nonzero mask.\n\t(irange::legacy_intersect): Clear nonzero mask.\n\t(irange::legacy_union): Same.\n\t(irange::invert): Same.", "tree": {"sha": "101ee95fab350ed3a93e545bf920df5b07cab1c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101ee95fab350ed3a93e545bf920df5b07cab1c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/554b21edb9ec91a898125d4915d790c6d4b9a688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554b21edb9ec91a898125d4915d790c6d4b9a688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/554b21edb9ec91a898125d4915d790c6d4b9a688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554b21edb9ec91a898125d4915d790c6d4b9a688/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7970b146f98f58a803a37e9a0b21bb97f1dadd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7970b146f98f58a803a37e9a0b21bb97f1dadd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7970b146f98f58a803a37e9a0b21bb97f1dadd8"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "528ed547ef3693d28f9126ad33281e868863fc58", "filename": "gcc/value-range.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554b21edb9ec91a898125d4915d790c6d4b9a688/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554b21edb9ec91a898125d4915d790c6d4b9a688/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=554b21edb9ec91a898125d4915d790c6d4b9a688", "patch": "@@ -331,6 +331,7 @@ irange::copy_to_legacy (const irange &src)\n       m_base[0] = src.m_base[0];\n       m_base[1] = src.m_base[1];\n       m_kind = src.m_kind;\n+      m_nonzero_mask = src.m_nonzero_mask;\n       return;\n     }\n   // Copy multi-range to legacy.\n@@ -1336,6 +1337,9 @@ irange::legacy_intersect (irange *vr0, const irange *vr1)\n   intersect_ranges (&vr0kind, &vr0min, &vr0max,\n \t\t    vr1->kind (), vr1->min (), vr1->max ());\n \n+  // Pessimize nonzero masks, as we don't support them.\n+  m_nonzero_mask = NULL;\n+\n   /* Make sure to canonicalize the result though as the inversion of a\n      VR_RANGE can still be a VR_RANGE.  */\n   if (vr0kind == VR_UNDEFINED)\n@@ -1657,6 +1661,9 @@ irange::legacy_union (irange *vr0, const irange *vr1)\n   union_ranges (&vr0kind, &vr0min, &vr0max,\n \t\tvr1->kind (), vr1->min (), vr1->max ());\n \n+  // Pessimize nonzero masks, as we don't support them.\n+  m_nonzero_mask = NULL;\n+\n   if (vr0kind == VR_UNDEFINED)\n     vr0->set_undefined ();\n   else if (vr0kind == VR_VARYING)\n@@ -2253,6 +2260,7 @@ irange::invert ()\n     }\n \n   gcc_checking_assert (!undefined_p () && !varying_p ());\n+  m_nonzero_mask = NULL;\n \n   // We always need one more set of bounds to represent an inverse, so\n   // if we're at the limit, we can't properly represent things."}]}