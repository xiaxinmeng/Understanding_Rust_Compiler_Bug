{"sha": "15d315553faafeac849522792b465e522c9d665b", "node_id": "C_kwDOANBUbNoAKDE1ZDMxNTU1M2ZhYWZlYWM4NDk1MjI3OTJiNDY1ZTUyMmM5ZDY2NWI", "commit": {"author": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-11-01T22:43:10Z"}, "committer": {"name": "Lewis Hyatt", "email": "lhyatt@gmail.com", "date": "2022-11-15T15:50:23Z"}, "message": "diagnostics: Use an inline function rather than hardcoding <built-in> string\n\nThe string \"<built-in>\" is hard-coded in several places throughout the\ndiagnostics code, and in some of those places, it is used incorrectly with\nrespect to internationalization. (Comparing a translated string to an\nuntranslated string.) The error is not currently observable in any output GCC\nactually produces, hence no testcase added here, but it's worth fixing, and\nalso, I am shortly going to add a new such string and want to avoid hardcoding\nthat one in similar places.\n\ngcc/c-family/ChangeLog:\n\n\t* c-opts.cc (c_finish_options): Use special_fname_builtin () rather\n\tthan a hard-coded string.\n\ngcc/ChangeLog:\n\n\t* diagnostic.cc (diagnostic_get_location_text): Use\n\tspecial_fname_builtin () rather than a hardcoded string (which was\n\talso incorrectly left untranslated previously.)\n\t* input.cc (special_fname_builtin): New function.\n\t(expand_location_1): Use special_fname_builtin () rather than a\n\thard-coded string.\n\t(test_builtins): Likewise.\n\t* input.h (special_fname_builtin): Declare.\n\ngcc/fortran/ChangeLog:\n\n\t* cpp.cc (gfc_cpp_init): Use special_fname_builtin () rather than a\n\thardcoded string (which was also incorrectly left untranslated\n\tpreviously.)\n\t* error.cc (gfc_diagnostic_build_locus_prefix): Likewise.\n\t* f95-lang.cc (gfc_init): Likewise.", "tree": {"sha": "b8764f475372f44fc50b07607ad3d5075e5f7c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8764f475372f44fc50b07607ad3d5075e5f7c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15d315553faafeac849522792b465e522c9d665b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d315553faafeac849522792b465e522c9d665b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d315553faafeac849522792b465e522c9d665b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d315553faafeac849522792b465e522c9d665b/comments", "author": null, "committer": null, "parents": [{"sha": "6238cc20f0e588f272569230b33458fedf755ab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6238cc20f0e588f272569230b33458fedf755ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6238cc20f0e588f272569230b33458fedf755ab2"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "bc1f85e3b8567b02cb68d0c8d0b0c7f058584cd0", "filename": "gcc/c-family/c-opts.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d315553faafeac849522792b465e522c9d665b/gcc%2Fc-family%2Fc-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d315553faafeac849522792b465e522c9d665b/gcc%2Fc-family%2Fc-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.cc?ref=15d315553faafeac849522792b465e522c9d665b", "patch": "@@ -1473,7 +1473,7 @@ c_finish_options (void)\n     {\n       const line_map_ordinary *bltin_map\n \t= linemap_check_ordinary (linemap_add (line_table, LC_RENAME, 0,\n-\t\t\t\t\t       _(\"<built-in>\"), 0));\n+\t\t\t\t\t       special_fname_builtin (), 0));\n       cb_file_change (parse_in, bltin_map);\n       linemap_line_start (line_table, 0, 1);\n "}, {"sha": "7c7ee6da746effca2f293933a0c9a19a34e9b8b2", "filename": "gcc/diagnostic.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d315553faafeac849522792b465e522c9d665b/gcc%2Fdiagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d315553faafeac849522792b465e522c9d665b/gcc%2Fdiagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.cc?ref=15d315553faafeac849522792b465e522c9d665b", "patch": "@@ -470,7 +470,7 @@ diagnostic_get_location_text (diagnostic_context *context,\n   const char *file = s.file ? s.file : progname;\n   int line = 0;\n   int col = -1;\n-  if (strcmp (file, N_(\"<built-in>\")))\n+  if (strcmp (file, special_fname_builtin ()))\n     {\n       line = s.line;\n       if (context->show_column)"}, {"sha": "0b5755edbb4bf21f998f0d9a3a2a08d73dd60612", "filename": "gcc/fortran/cpp.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d315553faafeac849522792b465e522c9d665b/gcc%2Ffortran%2Fcpp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d315553faafeac849522792b465e522c9d665b/gcc%2Ffortran%2Fcpp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.cc?ref=15d315553faafeac849522792b465e522c9d665b", "patch": "@@ -605,7 +605,7 @@ gfc_cpp_init (void)\n   if (gfc_option.flag_preprocessed)\n     return;\n \n-  cpp_change_file (cpp_in, LC_RENAME, _(\"<built-in>\"));\n+  cpp_change_file (cpp_in, LC_RENAME, special_fname_builtin ());\n   if (!gfc_cpp_option.no_predefined)\n     {\n       /* Make sure all of the builtins about to be declared have"}, {"sha": "214fb78ba7b7226e8ff3c8df5ac58bfd291d3601", "filename": "gcc/fortran/error.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d315553faafeac849522792b465e522c9d665b/gcc%2Ffortran%2Ferror.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d315553faafeac849522792b465e522c9d665b/gcc%2Ffortran%2Ferror.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.cc?ref=15d315553faafeac849522792b465e522c9d665b", "patch": "@@ -1147,7 +1147,7 @@ gfc_diagnostic_build_locus_prefix (diagnostic_context *context,\n   const char *locus_ce = colorize_stop (pp_show_color (pp));\n   return (s.file == NULL\n \t  ? build_message_string (\"%s%s:%s\", locus_cs, progname, locus_ce )\n-\t  : !strcmp (s.file, N_(\"<built-in>\"))\n+\t  : !strcmp (s.file, special_fname_builtin ())\n \t  ? build_message_string (\"%s%s:%s\", locus_cs, s.file, locus_ce)\n \t  : context->show_column\n \t  ? build_message_string (\"%s%s:%d:%d:%s\", locus_cs, s.file, s.line,\n@@ -1167,7 +1167,7 @@ gfc_diagnostic_build_locus_prefix (diagnostic_context *context,\n \n   return (s.file == NULL\n \t  ? build_message_string (\"%s%s:%s\", locus_cs, progname, locus_ce )\n-\t  : !strcmp (s.file, N_(\"<built-in>\"))\n+\t  : !strcmp (s.file, special_fname_builtin ())\n \t  ? build_message_string (\"%s%s:%s\", locus_cs, s.file, locus_ce)\n \t  : context->show_column\n \t  ? build_message_string (\"%s%s:%d:%d-%d:%s\", locus_cs, s.file, s.line,"}, {"sha": "0d83f3f8b6908d462131dbb649091d0cd1eed975", "filename": "gcc/fortran/f95-lang.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d315553faafeac849522792b465e522c9d665b/gcc%2Ffortran%2Ff95-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d315553faafeac849522792b465e522c9d665b/gcc%2Ffortran%2Ff95-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.cc?ref=15d315553faafeac849522792b465e522c9d665b", "patch": "@@ -259,7 +259,7 @@ gfc_init (void)\n   if (!gfc_cpp_enabled ())\n     {\n       linemap_add (line_table, LC_ENTER, false, gfc_source_file, 1);\n-      linemap_add (line_table, LC_RENAME, false, \"<built-in>\", 0);\n+      linemap_add (line_table, LC_RENAME, false, special_fname_builtin (), 0);\n     }\n   else\n     gfc_cpp_init_0 ();"}, {"sha": "18777a813b0ad78242efc8ba9915a2856cc5d0c9", "filename": "gcc/input.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d315553faafeac849522792b465e522c9d665b/gcc%2Finput.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d315553faafeac849522792b465e522c9d665b/gcc%2Finput.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.cc?ref=15d315553faafeac849522792b465e522c9d665b", "patch": "@@ -29,6 +29,12 @@ along with GCC; see the file COPYING3.  If not see\n #define HAVE_ICONV 0\n #endif\n \n+const char *\n+special_fname_builtin ()\n+{\n+  return _(\"<built-in>\");\n+}\n+\n /* Input charset configuration.  */\n static const char *default_charset_callback (const char *)\n {\n@@ -275,7 +281,7 @@ expand_location_1 (location_t loc,\n \n   xloc.data = block;\n   if (loc <= BUILTINS_LOCATION)\n-    xloc.file = loc == UNKNOWN_LOCATION ? NULL : _(\"<built-in>\");\n+    xloc.file = loc == UNKNOWN_LOCATION ? NULL : special_fname_builtin ();\n \n   return xloc;\n }\n@@ -2194,7 +2200,7 @@ test_unknown_location ()\n static void\n test_builtins ()\n {\n-  assert_loceq (_(\"<built-in>\"), 0, 0, BUILTINS_LOCATION);\n+  assert_loceq (special_fname_builtin (), 0, 0, BUILTINS_LOCATION);\n   ASSERT_PRED1 (is_location_from_builtin_token, BUILTINS_LOCATION);\n }\n "}, {"sha": "2173a39a773f382bf35fcfa1dc811430fe434059", "filename": "gcc/input.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d315553faafeac849522792b465e522c9d665b/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d315553faafeac849522792b465e522c9d665b/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=15d315553faafeac849522792b465e522c9d665b", "patch": "@@ -32,6 +32,9 @@ extern GTY(()) class line_maps *saved_line_table;\n /* The location for declarations in \"<built-in>\" */\n #define BUILTINS_LOCATION ((location_t) 1)\n \n+/* Returns the translated string referring to the special location.  */\n+const char *special_fname_builtin ();\n+\n /* line-map.cc reserves RESERVED_LOCATION_COUNT to the user.  Ensure\n    both UNKNOWN_LOCATION and BUILTINS_LOCATION fit into that.  */\n STATIC_ASSERT (BUILTINS_LOCATION < RESERVED_LOCATION_COUNT);"}]}