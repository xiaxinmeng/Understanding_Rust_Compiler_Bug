{"sha": "af120161421cdc935ff98a0e5038775f22a1ca90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxMjAxNjE0MjFjZGM5MzVmZjk4YTBlNTAzODc3NWYyMmExY2E5MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-22T10:28:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-22T10:28:06Z"}, "message": "sse.md (vec_set_lo_<mode><mask_name>, [...]): Add && <mask_avx512dq_condition> condition.\n\n\t* config/i386/sse.md (vec_set_lo_<mode><mask_name>,\n\tvec_set_hi_<mode><mask_name>): Add && <mask_avx512dq_condition>\n\tcondition.  For !TARGET_AVX512DQ, emit 32x4 instruction instead\n\tof 64x2.\n\n\t* gcc.target/i386/avx512dq-vinsert-1.c: New test.\n\t* gcc.target/i386/avx512vl-vinsert-1.c: New test.\n\nFrom-SVN: r236569", "tree": {"sha": "3375b47ec53d429263419273a7c46535e1ff0972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3375b47ec53d429263419273a7c46535e1ff0972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af120161421cdc935ff98a0e5038775f22a1ca90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af120161421cdc935ff98a0e5038775f22a1ca90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af120161421cdc935ff98a0e5038775f22a1ca90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af120161421cdc935ff98a0e5038775f22a1ca90/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "355023cef148556c55768da653b191d826cb6853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355023cef148556c55768da653b191d826cb6853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355023cef148556c55768da653b191d826cb6853"}], "stats": {"total": 218, "additions": 214, "deletions": 4}, "files": [{"sha": "3702823ca50c991133b5e5602d92e99a935baa6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,5 +1,10 @@\n 2016-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (vec_set_lo_<mode><mask_name>,\n+\tvec_set_hi_<mode><mask_name>): Add && <mask_avx512dq_condition>\n+\tcondition.  For !TARGET_AVX512DQ, emit 32x4 instruction instead\n+\tof 64x2.\n+\n \t* config/i386/sse.md (vec_set_lo_v16hi, vec_set_hi_v16hi,\n \tvec_set_lo_v32qi, vec_set_hi_v32qi): Add alternative with\n \tv constraint instead of x and vinserti32x4 insn."}, {"sha": "745b6b665f5fcc78cda3f0e16ef904b14909018f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -17818,10 +17818,12 @@\n \t  (vec_select:<ssehalfvecmode>\n \t    (match_operand:VI8F_256 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 2) (const_int 3)]))))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && <mask_avx512dq_condition>\"\n {\n-  if (TARGET_AVX512VL)\n+  if (TARGET_AVX512DQ)\n     return \"vinsert<shuffletype>64x2\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x0}\";\n+  else if (TARGET_AVX512VL)\n+    return \"vinsert<shuffletype>32x4\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x0}\";\n   else\n     return \"vinsert<i128>\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\";\n }\n@@ -17838,10 +17840,12 @@\n \t    (match_operand:VI8F_256 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0) (const_int 1)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX\"\n+  \"TARGET_AVX && <mask_avx512dq_condition>\"\n {\n-  if (TARGET_AVX512VL)\n+  if (TARGET_AVX512DQ)\n     return \"vinsert<shuffletype>64x2\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x1}\";\n+  else if (TARGET_AVX512VL)\n+    return \"vinsert<shuffletype>32x4\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x1}\";\n   else\n     return \"vinsert<i128>\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\";\n }"}, {"sha": "95728178282e9b0651295c0dae700b650f84282c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -1,5 +1,8 @@\n 2016-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.target/i386/avx512dq-vinsert-1.c: New test.\n+\t* gcc.target/i386/avx512vl-vinsert-1.c: New test.\n+\n \t* gcc.target/i386/avx512vl-vinserti32x4-3.c: New test.\n \n \t* gcc.target/i386/avx512dq-vbroadcast-2.c: New test."}, {"sha": "5d42f44fef3c83f54b79014c8221fd2b7445c176", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-vinsert-1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-vinsert-1.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512dq -masm=att\" } */\n+\n+typedef int V1 __attribute__((vector_size (32)));\n+typedef long long V2 __attribute__((vector_size (32)));\n+typedef float V3 __attribute__((vector_size (32)));\n+typedef double V4 __attribute__((vector_size (32)));\n+\n+void\n+f1 (V1 x, int y)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f2 (V1 x, int y)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[6] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f3 (V2 x, long long y)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[1] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f4 (V2 x, long long y)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f5 (V3 x, float y)\n+{\n+  register V3 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f6 (V3 x, float y)\n+{\n+  register V3 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[6] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f7 (V4 x, double y)\n+{\n+  register V4 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[1] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f8 (V4 x, double y)\n+{\n+  register V4 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\r]*0x0\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x4\\[^\\n\\r]*0x0\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%\\[yz]mm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextractf32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%\\[yz]mm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinserti64x2\\[^\\n\\r]*0x0\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinserti64x2\\[^\\n\\r]*0x1\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x2\\[^\\n\\r]*0x0\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf64x2\\[^\\n\\r]*0x1\\[^\\n\\r]*%ymm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextracti64x2\\[^\\n\\r]*0x1\\[^\\n\\r]*%\\[yz]mm16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vextractf64x2\\[^\\n\\r]*0x1\\[^\\n\\r]*%\\[yz]mm16\" 1 } } */"}, {"sha": "f12260a23f3efb2e95534c7fb17026151d96ff16", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vinsert-1.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vinsert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af120161421cdc935ff98a0e5038775f22a1ca90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vinsert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vinsert-1.c?ref=af120161421cdc935ff98a0e5038775f22a1ca90", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512dq -masm=att\" } */\n+\n+typedef int V1 __attribute__((vector_size (32)));\n+typedef long long V2 __attribute__((vector_size (32)));\n+typedef float V3 __attribute__((vector_size (32)));\n+typedef double V4 __attribute__((vector_size (32)));\n+\n+void\n+f1 (V1 x, int y)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f2 (V1 x, int y)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[6] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f3 (V2 x, long long y)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[1] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f4 (V2 x, long long y)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f5 (V3 x, float y)\n+{\n+  register V3 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f6 (V3 x, float y)\n+{\n+  register V3 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[6] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f7 (V4 x, double y)\n+{\n+  register V4 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[1] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+void\n+f8 (V4 x, double y)\n+{\n+  register V4 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a[3] = y;\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\r]*0x0\\[^\\n\\r]*%ymm16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%ymm16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x4\\[^\\n\\r]*0x0\\[^\\n\\r]*%ymm16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinsertf32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%ymm16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%\\[yz]mm16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vextractf32x4\\[^\\n\\r]*0x1\\[^\\n\\r]*%\\[yz]mm16\" 2 } } */\n+/* { dg-final { scan-assembler-not \"vinserti64x2\" } } */\n+/* { dg-final { scan-assembler-not \"vinsertf64x2\" } } */\n+/* { dg-final { scan-assembler-not \"vextracti64x2\" } } */\n+/* { dg-final { scan-assembler-not \"vextracti64x2\" } } */"}]}