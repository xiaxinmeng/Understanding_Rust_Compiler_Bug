{"sha": "56a05ce0839d83fbbbc7e57d085ca483b884b805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhMDVjZTA4MzlkODNmYmJiYzdlNTdkMDg1Y2E0ODNiODg0YjgwNQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-30T08:57:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:57:21Z"}, "message": "[Ada] Spurious error on legal synchronized constituent\n\nThis patch corrects the predicate which determines whether an entity denotes a\nsynchronized object as per SPARK RM 9.1. to account for a case where the object\nis not atomic, but its type is.\n\nThe patch also cleans up various atomic object-related predicates.\n\n2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Is_Atomic_Object): Cleaned up. Split the entity logic\n\tin a separate routine.\n\t(Is_Atomic_Object_Entity): New routine.\n\t(Is_Atomic_Prefix): Cleaned up.\n\t(Is_Synchronized_Object): Check that the object is atomic, or its type\n\tis atomic.\n\t(Object_Has_Atomic_Components): Removed.\n\t* sem_util.ads (Is_Atomic_Object): Reword the comment on usage.\n\t(Is_Atomic_Object_Entity): New routine.\n\ngcc/testsuite/\n\n\t* gnat.dg/synchronized1.adb, gnat.dg/synchronized1.ads: New testcase.\n\nFrom-SVN: r260933", "tree": {"sha": "4522a0436bfd55179c72a8e6645bd2499cfdcb5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4522a0436bfd55179c72a8e6645bd2499cfdcb5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a05ce0839d83fbbbc7e57d085ca483b884b805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a05ce0839d83fbbbc7e57d085ca483b884b805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a05ce0839d83fbbbc7e57d085ca483b884b805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a05ce0839d83fbbbc7e57d085ca483b884b805/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131780ac08a8dfc1b9c14a9d5c38575fcc34b205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131780ac08a8dfc1b9c14a9d5c38575fcc34b205"}], "stats": {"total": 159, "additions": 100, "deletions": 59}, "files": [{"sha": "e14d14eb32da1c89c9f360021ba135512eced8fd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56a05ce0839d83fbbbc7e57d085ca483b884b805", "patch": "@@ -1,3 +1,15 @@\n+2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Is_Atomic_Object): Cleaned up. Split the entity logic\n+\tin a separate routine.\n+\t(Is_Atomic_Object_Entity): New routine.\n+\t(Is_Atomic_Prefix): Cleaned up.\n+\t(Is_Synchronized_Object): Check that the object is atomic, or its type\n+\tis atomic.\n+\t(Object_Has_Atomic_Components): Removed.\n+\t* sem_util.ads (Is_Atomic_Object): Reword the comment on usage.\n+\t(Is_Atomic_Object_Entity): New routine.\n+\n 2018-05-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Access_Subprogram_Declaration): The flag"}, {"sha": "7aafa8d5df05c889fbd8a88814f45e6d1bbfaf9f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=56a05ce0839d83fbbbc7e57d085ca483b884b805", "patch": "@@ -13156,86 +13156,84 @@ package body Sem_Util is\n    ----------------------\n \n    function Is_Atomic_Object (N : Node_Id) return Boolean is\n+      function Is_Atomic_Entity (Id : Entity_Id) return Boolean;\n+      pragma Inline (Is_Atomic_Entity);\n+      --  Determine whether arbitrary entity Id is either atomic or has atomic\n+      --  components.\n \n-      function Object_Has_Atomic_Components (N : Node_Id) return Boolean;\n-      --  Determines if given object has atomic components\n-\n-      function Is_Atomic_Prefix (N : Node_Id) return Boolean;\n-      --  If prefix is an implicit dereference, examine designated type\n+      function Is_Atomic_Prefix (Pref : Node_Id) return Boolean;\n+      --  Determine whether prefix Pref of a indexed or selected component is\n+      --  an atomic object.\n \n       ----------------------\n-      -- Is_Atomic_Prefix --\n+      -- Is_Atomic_Entity --\n       ----------------------\n \n-      function Is_Atomic_Prefix (N : Node_Id) return Boolean is\n+      function Is_Atomic_Entity (Id : Entity_Id) return Boolean is\n       begin\n-         if Is_Access_Type (Etype (N)) then\n-            return\n-              Has_Atomic_Components (Designated_Type (Etype (N)));\n-         else\n-            return Object_Has_Atomic_Components (N);\n-         end if;\n-      end Is_Atomic_Prefix;\n+         return Is_Atomic (Id) or else Has_Atomic_Components (Id);\n+      end Is_Atomic_Entity;\n+\n+      ----------------------\n+      -- Is_Atomic_Prefix --\n+      ----------------------\n \n-      ----------------------------------\n-      -- Object_Has_Atomic_Components --\n-      ----------------------------------\n+      function Is_Atomic_Prefix (Pref : Node_Id) return Boolean is\n+         Typ : constant Entity_Id := Etype (Pref);\n \n-      function Object_Has_Atomic_Components (N : Node_Id) return Boolean is\n       begin\n-         if Has_Atomic_Components (Etype (N))\n-           or else Is_Atomic (Etype (N))\n-         then\n-            return True;\n+         if Is_Access_Type (Typ) then\n+            return Has_Atomic_Components (Designated_Type (Typ));\n \n-         elsif Is_Entity_Name (N)\n-           and then (Has_Atomic_Components (Entity (N))\n-                      or else Is_Atomic (Entity (N)))\n-         then\n+         elsif Is_Atomic_Entity (Typ) then\n             return True;\n \n-         elsif Nkind (N) = N_Selected_Component\n-           and then Is_Atomic (Entity (Selector_Name (N)))\n+         elsif Is_Entity_Name (Pref)\n+           and then Is_Atomic_Entity (Entity (Pref))\n          then\n             return True;\n \n-         elsif Nkind (N) = N_Indexed_Component\n-           or else Nkind (N) = N_Selected_Component\n-         then\n-            return Is_Atomic_Prefix (Prefix (N));\n+         elsif Nkind (Pref) = N_Indexed_Component then\n+            return Is_Atomic_Prefix (Prefix (Pref));\n \n-         else\n-            return False;\n+         elsif Nkind (Pref) = N_Selected_Component then\n+            return\n+              Is_Atomic_Prefix (Prefix (Pref))\n+                or else Is_Atomic (Entity (Selector_Name (Pref)));\n          end if;\n-      end Object_Has_Atomic_Components;\n+\n+         return False;\n+      end Is_Atomic_Prefix;\n \n    --  Start of processing for Is_Atomic_Object\n \n    begin\n-      --  Predicate is not relevant to subprograms\n+      if Is_Entity_Name (N) then\n+         return Is_Atomic_Object_Entity (Entity (N));\n \n-      if Is_Entity_Name (N) and then Is_Overloadable (Entity (N)) then\n-         return False;\n+      elsif Nkind (N) = N_Indexed_Component then\n+         return Is_Atomic (Etype (N)) or else Is_Atomic_Prefix (Prefix (N));\n \n-      elsif Is_Atomic (Etype (N))\n-        or else (Is_Entity_Name (N) and then Is_Atomic (Entity (N)))\n-      then\n-         return True;\n+      elsif Nkind (N) = N_Selected_Component then\n+         return\n+           Is_Atomic (Etype (N))\n+             or else Is_Atomic_Prefix (Prefix (N))\n+             or else Is_Atomic (Entity (Selector_Name (N)));\n+      end if;\n \n-      elsif Nkind (N) = N_Selected_Component\n-        and then Is_Atomic (Entity (Selector_Name (N)))\n-      then\n-         return True;\n+      return False;\n+   end Is_Atomic_Object;\n \n-      elsif Nkind (N) = N_Indexed_Component\n-        or else Nkind (N) = N_Selected_Component\n-      then\n-         return Is_Atomic_Prefix (Prefix (N));\n+   -----------------------------\n+   -- Is_Atomic_Object_Entity --\n+   -----------------------------\n \n-      else\n-         return False;\n-      end if;\n-   end Is_Atomic_Object;\n+   function Is_Atomic_Object_Entity (Id : Entity_Id) return Boolean is\n+   begin\n+      return\n+        Is_Object (Id)\n+          and then (Is_Atomic (Id) or else Is_Atomic (Etype (Id)));\n+   end Is_Atomic_Object_Entity;\n \n    -----------------------------\n    -- Is_Atomic_Or_VFA_Object --\n@@ -17353,7 +17351,9 @@ package body Sem_Util is\n          --  The object is synchronized if it is atomic and Async_Writers is\n          --  enabled.\n \n-         elsif Is_Atomic (Id) and then Async_Writers_Enabled (Id) then\n+         elsif Is_Atomic_Object_Entity (Id)\n+           and then Async_Writers_Enabled (Id)\n+         then\n             return True;\n \n          --  A constant is a synchronized object by default"}, {"sha": "ad7760c0cbec75c0aafe2111d11e790f512267d4", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=56a05ce0839d83fbbbc7e57d085ca483b884b805", "patch": "@@ -1512,12 +1512,16 @@ package Sem_Util is\n    --  Determine whether package E1 is an ancestor of E2\n \n    function Is_Atomic_Object (N : Node_Id) return Boolean;\n-   --  Determines if the given node denotes an atomic object in the sense of\n-   --  the legality checks described in RM C.6(12).\n+   --  Determine whether arbitrary node N denotes a reference to an atomic\n+   --  object as per Ada RM C.6(12).\n+\n+   function Is_Atomic_Object_Entity (Id : Entity_Id) return Boolean;\n+   --  Determine whether arbitrary entity Id denotes an atomic object as per\n+   --  Ada RM C.6(12).\n \n    function Is_Atomic_Or_VFA_Object (N : Node_Id) return Boolean;\n-   --  Determines if the given node is an atomic object (Is_Atomic_Object true)\n-   --  or else is an object for which VFA is present.\n+   --  Determine whether arbitrary node N denotes a reference to an object\n+   --  which is either atomic or Volatile_Full_Access.\n \n    function Is_Attribute_Result (N : Node_Id) return Boolean;\n    --  Determine whether node N denotes attribute 'Result"}, {"sha": "2e35d647f63f969d80cfd92f3a8a8ea214a3378d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56a05ce0839d83fbbbc7e57d085ca483b884b805", "patch": "@@ -1,3 +1,7 @@\n+2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/synchronized1.adb, gnat.dg/synchronized1.ads: New testcase.\n+\n 2018-05-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/85950"}, {"sha": "d07c351654e31152ba35720c2da33f386de62415", "filename": "gcc/testsuite/gnat.dg/synchronized1.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Ftestsuite%2Fgnat.dg%2Fsynchronized1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Ftestsuite%2Fgnat.dg%2Fsynchronized1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsynchronized1.adb?ref=56a05ce0839d83fbbbc7e57d085ca483b884b805", "patch": "@@ -0,0 +1,14 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+package body Synchronized1\n+  with SPARK_Mode,\n+       Refined_State => (State => Curr_State)\n+is\n+   type Reactor_State is (Stopped, Working) with Atomic;\n+\n+   Curr_State : Reactor_State\n+     with Async_Readers, Async_Writers;\n+\n+   procedure Force_Body is null;\n+end Synchronized1;"}, {"sha": "f814c91d8c66df34d156131d9c487a78fda328ff", "filename": "gcc/testsuite/gnat.dg/synchronized1.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Ftestsuite%2Fgnat.dg%2Fsynchronized1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a05ce0839d83fbbbc7e57d085ca483b884b805/gcc%2Ftestsuite%2Fgnat.dg%2Fsynchronized1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsynchronized1.ads?ref=56a05ce0839d83fbbbc7e57d085ca483b884b805", "patch": "@@ -0,0 +1,7 @@\n+package Synchronized1\n+  with SPARK_Mode,\n+       Abstract_State => (State with Synchronous),\n+       Initializes    => State\n+is\n+   procedure Force_Body;\n+end Synchronized1;"}]}