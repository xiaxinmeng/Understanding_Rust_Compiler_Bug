{"sha": "882a5fbe3c0e81734257bfd8bc0f5c41a769394b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgyYTVmYmUzYzBlODE3MzQyNTdiZmQ4YmMwZjVjNDFhNzY5Mzk0Yg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2014-03-12T10:15:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-03-12T10:15:29Z"}, "message": "re PR tree-optimization/60454 (Code mistakenly detected as doing bswap)\n\n\tPR tree-optimization/60454\n\t* tree-ssa-math-opts.c (find_bswap_1): Fix bswap detection.\n\n\t* gcc.c-torture/execute/pr60454.c: New test.\n\nFrom-SVN: r208509", "tree": {"sha": "9b02b5390b8965759e4404532019e9f29d128bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b02b5390b8965759e4404532019e9f29d128bf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/882a5fbe3c0e81734257bfd8bc0f5c41a769394b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882a5fbe3c0e81734257bfd8bc0f5c41a769394b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/882a5fbe3c0e81734257bfd8bc0f5c41a769394b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3cd024676cbf385396d57b6b1f752040a902779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cd024676cbf385396d57b6b1f752040a902779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3cd024676cbf385396d57b6b1f752040a902779"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "c76fc807dd4159f81815195fced3f35e39de90be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=882a5fbe3c0e81734257bfd8bc0f5c41a769394b", "patch": "@@ -1,3 +1,8 @@\n+2014-03-12  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/60454\n+\t* tree-ssa-math-opts.c (find_bswap_1): Fix bswap detection.\n+\n 2014-03-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config.gcc (aarch64*-*-*): Use ISA flags from aarch64-arches.def."}, {"sha": "dde17b02a9eff1bad6adc4f16169ba73ea674f64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=882a5fbe3c0e81734257bfd8bc0f5c41a769394b", "patch": "@@ -1,3 +1,8 @@\n+2014-03-12  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR tree-optimization/60454\n+\t* gcc.c-torture/execute/pr60454.c: New test.\n+\n 2014-03-12  Jakub Jelinek  <jakub@redhat.com>\n \t    Marc Glisse  <marc.glisse@inria.fr>\n "}, {"sha": "ceec45e699ff4f78ec83d9f4a26ad9ec69e79c9f", "filename": "gcc/testsuite/gcc.c-torture/execute/pr60454.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60454.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60454.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr60454.c?ref=882a5fbe3c0e81734257bfd8bc0f5c41a769394b", "patch": "@@ -0,0 +1,31 @@\n+#ifdef __UINT32_TYPE__\n+typedef __UINT32_TYPE__ uint32_t;\n+#else\n+typedef unsigned uint32_t;\n+#endif\n+\n+#define __fake_const_swab32(x) ((uint32_t)(\t\t\t      \\\n+        (((uint32_t)(x) & (uint32_t)0x000000ffUL) << 24) |            \\\n+        (((uint32_t)(x) & (uint32_t)0x0000ff00UL) <<  8) |            \\\n+        (((uint32_t)(x) & (uint32_t)0x000000ffUL) <<  8) |            \\\n+        (((uint32_t)(x) & (uint32_t)0x0000ff00UL)      ) |            \\\n+        (((uint32_t)(x) & (uint32_t)0xff000000UL) >> 24)))\n+\n+/* Previous version of bswap optimization would detect byte swap when none\n+   happen. This test aims at catching such wrong detection to avoid\n+   regressions.  */\n+\n+__attribute__ ((noinline, noclone)) uint32_t\n+fake_swap32 (uint32_t in)\n+{\n+  return __fake_const_swab32 (in);\n+}\n+\n+int main(void)\n+{\n+  if (sizeof (uint32_t) * __CHAR_BIT__ != 32)\n+    return 0;\n+  if (fake_swap32 (0x12345678UL) != 0x78567E12UL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "9ff857cd65715dfb7d4da21e2ddceb622bc7d84d", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882a5fbe3c0e81734257bfd8bc0f5c41a769394b/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=882a5fbe3c0e81734257bfd8bc0f5c41a769394b", "patch": "@@ -1801,7 +1801,9 @@ find_bswap_1 (gimple stmt, struct symbolic_number *n, int limit)\n \n   if (rhs_class == GIMPLE_BINARY_RHS)\n     {\n+      int i;\n       struct symbolic_number n1, n2;\n+      unsigned HOST_WIDEST_INT mask;\n       tree source_expr2;\n \n       if (code != BIT_IOR_EXPR)\n@@ -1827,6 +1829,15 @@ find_bswap_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t    return NULL_TREE;\n \n \t  n->size = n1.size;\n+\t  for (i = 0, mask = 0xff; i < n->size; i++, mask <<= BITS_PER_UNIT)\n+\t    {\n+\t      unsigned HOST_WIDEST_INT masked1, masked2;\n+\n+\t      masked1 = n1.n & mask;\n+\t      masked2 = n2.n & mask;\n+\t      if (masked1 && masked2 && masked1 != masked2)\n+\t\treturn NULL_TREE;\n+\t    }\n \t  n->n = n1.n | n2.n;\n \n \t  if (!verify_symbolic_number_p (n, stmt))"}]}