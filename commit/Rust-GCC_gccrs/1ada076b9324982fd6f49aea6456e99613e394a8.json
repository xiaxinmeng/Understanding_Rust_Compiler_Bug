{"sha": "1ada076b9324982fd6f49aea6456e99613e394a8", "node_id": "C_kwDOANBUbNoAKDFhZGEwNzZiOTMyNDk4MmZkNmY0OWFlYTY0NTZlOTk2MTNlMzk0YTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-28T09:44:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-28T09:44:04Z"}, "message": "Merge #1189\n\n1189: Add missing `SimplePath`s location r=CohenArthur a=CohenArthur\n\nSorry to new contributors but I think I've taken all the good first issues we opened yesterday... \r\n\r\nCloses #1179 \r\nCloses #1180\r\nCloses #1181\r\nCloses #1182\r\n\r\nNecessary for #1172 \r\nAddresses #1159 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "811ca2f61e351aeda8be3e5f2e94a93993c1881e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/811ca2f61e351aeda8be3e5f2e94a93993c1881e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ada076b9324982fd6f49aea6456e99613e394a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiamHkCRBK7hj4Ov3rIwAA4DEIAIFWyeK+Rz1ds5Pr+w+Xjz3e\nQtXmJXnNJePzVoPbG5TfVzSa9Sf+WWLJzsiNy+qZx4gLyJ2HKLfMkxyoUAtYJ5GN\nR4acacvHJDyt18PTvO77trUCJDCLvTBi+u6cfb7DHvBgm6cjYSdsSV6ZjyfbeZMX\nzrmhegOZJHbusGJ/YgL9VjlsPxC7Q4rVJkmVwNYftJ8Kcc03LjktSmbrYOij56ZN\nJcjcIIITUxQlnE7fwU+CDTkRLMXPof+ym1yBCdBMSFC2KjSOH+re9zohl+Nles1V\njMb50ITni4bGgBI8jn7gxgDw24pqkodLOU4zaqQsBJucl5leB0Bs6t03C6vwT4g=\n=aXo9\n-----END PGP SIGNATURE-----\n", "payload": "tree 811ca2f61e351aeda8be3e5f2e94a93993c1881e\nparent af48e2a3a1554f727e83281cc96071d9b8b3ef91\nparent 471cff253a1c67cf4a85c0a91695e7e6d7803a5e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1651139044 +0000\ncommitter GitHub <noreply@github.com> 1651139044 +0000\n\nMerge #1189\n\n1189: Add missing `SimplePath`s location r=CohenArthur a=CohenArthur\n\nSorry to new contributors but I think I've taken all the good first issues we opened yesterday... \r\n\r\nCloses #1179 \r\nCloses #1180\r\nCloses #1181\r\nCloses #1182\r\n\r\nNecessary for #1172 \r\nAddresses #1159 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ada076b9324982fd6f49aea6456e99613e394a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ada076b9324982fd6f49aea6456e99613e394a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ada076b9324982fd6f49aea6456e99613e394a8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af48e2a3a1554f727e83281cc96071d9b8b3ef91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af48e2a3a1554f727e83281cc96071d9b8b3ef91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af48e2a3a1554f727e83281cc96071d9b8b3ef91"}, {"sha": "471cff253a1c67cf4a85c0a91695e7e6d7803a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471cff253a1c67cf4a85c0a91695e7e6d7803a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471cff253a1c67cf4a85c0a91695e7e6d7803a5e"}], "stats": {"total": 95, "additions": 53, "deletions": 42}, "files": [{"sha": "92325f1e4f3923d2635db555c76267bc6212eb60", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=1ada076b9324982fd6f49aea6456e99613e394a8", "patch": "@@ -4118,12 +4118,14 @@ AttributeParser::parse_meta_item_inner ()\n       return parse_path_meta_item ();\n     }\n \n-  Identifier ident = peek_token ()->as_string ();\n+  auto ident = peek_token ()->as_string ();\n+  auto ident_locus = peek_token ()->get_locus ();\n+\n   if (is_end_meta_item_tok (peek_token (1)->get_id ()))\n     {\n       // meta word syntax\n       skip_token ();\n-      return std::unique_ptr<MetaWord> (new MetaWord (std::move (ident)));\n+      return std::unique_ptr<MetaWord> (new MetaWord (ident, ident_locus));\n     }\n \n   if (peek_token (1)->get_id () == EQUAL)\n@@ -4133,15 +4135,18 @@ AttributeParser::parse_meta_item_inner ()\n \t  && is_end_meta_item_tok (peek_token (3)->get_id ()))\n \t{\n \t  // meta name value str syntax\n-\t  std::string value = peek_token (2)->as_string ();\n+\t  auto &value_tok = peek_token (2);\n+\t  auto value = value_tok->as_string ();\n+\t  auto locus = value_tok->get_locus ();\n \n \t  skip_token (2);\n \n \t  // remove the quotes from the string value\n \t  std::string raw_value = unquote_string (std::move (value));\n \n \t  return std::unique_ptr<MetaNameValueStr> (\n-\t    new MetaNameValueStr (std::move (ident), std::move (raw_value)));\n+\t    new MetaNameValueStr (ident, ident_locus, std::move (raw_value),\n+\t\t\t\t  locus));\n \t}\n       else\n \t{\n@@ -4183,7 +4188,7 @@ AttributeParser::parse_meta_item_inner ()\n   if (!meta_name_value_str_items.empty ())\n     {\n       return std::unique_ptr<MetaListNameValueStr> (\n-\tnew MetaListNameValueStr (std::move (ident),\n+\tnew MetaListNameValueStr (ident, ident_locus,\n \t\t\t\t  std::move (meta_name_value_str_items)));\n     }\n \n@@ -4222,7 +4227,7 @@ AttributeParser::parse_meta_item_inner ()\n   if (!path_items.empty ())\n     {\n       return std::unique_ptr<MetaListPaths> (\n-\tnew MetaListPaths (std::move (ident), std::move (path_items)));\n+\tnew MetaListPaths (ident, ident_locus, std::move (path_items)));\n     }\n \n   rust_error_at (Linemap::unknown_location (),\n@@ -4694,11 +4699,11 @@ Attribute\n MetaNameValueStr::to_attribute () const\n {\n   LiteralExpr lit_expr (str, Literal::LitType::STRING,\n-\t\t\tPrimitiveCoreType::CORETYPE_UNKNOWN, {}, Location ());\n+\t\t\tPrimitiveCoreType::CORETYPE_UNKNOWN, {}, str_locus);\n   // FIXME: What location do we put here? Is the literal above supposed to have\n   // an empty location as well?\n   // Should MetaNameValueStr keep a location?\n-  return Attribute (SimplePath::from_str (ident, Location ()),\n+  return Attribute (SimplePath::from_str (ident, ident_locus),\n \t\t    std::unique_ptr<AttrInputLiteral> (\n \t\t      new AttrInputLiteral (std::move (lit_expr))));\n }\n@@ -4725,8 +4730,7 @@ MetaItemSeq::to_attribute () const\n Attribute\n MetaWord::to_attribute () const\n {\n-  // FIXME: How do we get a location here?\n-  return Attribute (SimplePath::from_str (ident, Location ()), nullptr);\n+  return Attribute (SimplePath::from_str (ident, ident_locus), nullptr);\n }\n \n Attribute\n@@ -4744,8 +4748,7 @@ MetaListPaths::to_attribute () const\n \n   std::unique_ptr<AttrInputMetaItemContainer> new_seq_container (\n     new AttrInputMetaItemContainer (std::move (new_seq)));\n-  // FIXME: How do we get a location here?\n-  return Attribute (SimplePath::from_str (ident, Location ()),\n+  return Attribute (SimplePath::from_str (ident, ident_locus),\n \t\t    std::move (new_seq_container));\n }\n \n@@ -4760,8 +4763,7 @@ MetaListNameValueStr::to_attribute () const\n \n   std::unique_ptr<AttrInputMetaItemContainer> new_seq_container (\n     new AttrInputMetaItemContainer (std::move (new_seq)));\n-  // FIXME: How do we get a location here?\n-  return Attribute (SimplePath::from_str (ident, Location ()),\n+  return Attribute (SimplePath::from_str (ident, ident_locus),\n \t\t    std::move (new_seq_container));\n }\n "}, {"sha": "5d1e0d63565a31a9f7c76a355fce7b46e8515d74", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=1ada076b9324982fd6f49aea6456e99613e394a8", "patch": "@@ -666,23 +666,25 @@ struct Visibility\n     return Visibility (PUB, SimplePath::create_empty ());\n   }\n \n-  // Creates a public visibility with crate-relative paths or whatever.\n-  static Visibility create_crate ()\n+  // Creates a public visibility with crate-relative paths\n+  static Visibility create_crate (Location crate_tok_location)\n   {\n-    return Visibility (PUB_CRATE, SimplePath::create_empty ());\n+    return Visibility (PUB_CRATE,\n+\t\t       SimplePath::from_str (\"crate\", crate_tok_location));\n   }\n \n-  // Creates a public visibility with self-relative paths or whatever.\n-  static Visibility create_self ()\n+  // Creates a public visibility with self-relative paths\n+  static Visibility create_self (Location self_tok_location)\n   {\n-    return Visibility (PUB_SELF, SimplePath::create_empty ());\n+    return Visibility (PUB_SELF,\n+\t\t       SimplePath::from_str (\"self\", self_tok_location));\n   }\n \n-  // Creates a public visibility with parent module-relative paths or\n-  // whatever.\n-  static Visibility create_super ()\n+  // Creates a public visibility with parent module-relative paths\n+  static Visibility create_super (Location super_tok_location)\n   {\n-    return Visibility (PUB_SUPER, SimplePath::create_empty ());\n+    return Visibility (PUB_SUPER,\n+\t\t       SimplePath::from_str (\"super\", super_tok_location));\n   }\n \n   // Creates a private visibility"}, {"sha": "1bf8912083a05d4ca84bf5446b4b3fc1f7847421", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=1ada076b9324982fd6f49aea6456e99613e394a8", "patch": "@@ -759,9 +759,12 @@ class MetaItemSeq : public MetaItem\n class MetaWord : public MetaItem\n {\n   Identifier ident;\n+  Location ident_locus;\n \n public:\n-  MetaWord (Identifier ident) : ident (std::move (ident)) {}\n+  MetaWord (Identifier ident, Location ident_locus)\n+    : ident (std::move (ident)), ident_locus (ident_locus)\n+  {}\n \n   std::string as_string () const override { return ident; }\n \n@@ -783,12 +786,17 @@ class MetaWord : public MetaItem\n class MetaNameValueStr : public MetaItem\n {\n   Identifier ident;\n+  Location ident_locus;\n+\n   // NOTE: str stored without quotes\n   std::string str;\n+  Location str_locus;\n \n public:\n-  MetaNameValueStr (Identifier ident, std::string str)\n-    : ident (std::move (ident)), str (std::move (str))\n+  MetaNameValueStr (Identifier ident, Location ident_locus, std::string str,\n+\t\t    Location str_locus)\n+    : ident (std::move (ident)), ident_locus (ident_locus),\n+      str (std::move (str)), str_locus (str_locus)\n   {}\n \n   std::string as_string () const override\n@@ -821,11 +829,14 @@ class MetaNameValueStr : public MetaItem\n class MetaListPaths : public MetaItem\n {\n   Identifier ident;\n+  Location ident_locus;\n   std::vector<SimplePath> paths;\n \n public:\n-  MetaListPaths (Identifier ident, std::vector<SimplePath> paths)\n-    : ident (std::move (ident)), paths (std::move (paths))\n+  MetaListPaths (Identifier ident, Location ident_locus,\n+\t\t std::vector<SimplePath> paths)\n+    : ident (std::move (ident)), ident_locus (ident_locus),\n+      paths (std::move (paths))\n   {}\n \n   std::string as_string () const override;\n@@ -852,13 +863,14 @@ class MetaListPaths : public MetaItem\n class MetaListNameValueStr : public MetaItem\n {\n   Identifier ident;\n+  Location ident_locus;\n   std::vector<MetaNameValueStr> strs;\n \n-  // FIXME add location info\n-\n public:\n-  MetaListNameValueStr (Identifier ident, std::vector<MetaNameValueStr> strs)\n-    : ident (std::move (ident)), strs (std::move (strs))\n+  MetaListNameValueStr (Identifier ident, Location ident_locus,\n+\t\t\tstd::vector<MetaNameValueStr> strs)\n+    : ident (std::move (ident)), ident_locus (ident_locus),\n+      strs (std::move (strs))\n   {}\n \n   std::string as_string () const override;"}, {"sha": "bc613e12e49bf4c37d3770f1faf7d1d23b91e520", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=1ada076b9324982fd6f49aea6456e99613e394a8", "patch": "@@ -43,14 +43,8 @@ translate_visibility (const AST::Visibility &vis)\n     case AST::Visibility::PRIV:\n     case AST::Visibility::PUB_SELF:\n       return Visibility (Visibility::VisType::PRIVATE);\n-    // Desugar pub(crate) into pub(in crate) and so on\n-    // FIXME: How do we get a location for the SimplePath here?\n     case AST::Visibility::PUB_CRATE:\n-      return Visibility (Visibility::PUBLIC,\n-\t\t\t AST::SimplePath::from_str (\"crate\", Location ()));\n     case AST::Visibility::PUB_SUPER:\n-      return Visibility (Visibility::PUBLIC,\n-\t\t\t AST::SimplePath::from_str (\"super\", Location ()));\n     case AST::Visibility::PUB_IN_PATH:\n       return Visibility (Visibility::VisType::PUBLIC, vis.get_path ());\n       break;"}, {"sha": "23ab32c832eb889163d389907f4666bbaa6648ac", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ada076b9324982fd6f49aea6456e99613e394a8/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=1ada076b9324982fd6f49aea6456e99613e394a8", "patch": "@@ -2136,6 +2136,7 @@ Parser<ManagedTokenSource>::parse_visibility ()\n   lexer.skip_token ();\n \n   const_TokenPtr t = lexer.peek_token ();\n+  auto path_loc = t->get_locus ();\n \n   switch (t->get_id ())\n     {\n@@ -2144,19 +2145,19 @@ Parser<ManagedTokenSource>::parse_visibility ()\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_crate ();\n+      return AST::Visibility::create_crate (path_loc);\n     case SELF:\n       lexer.skip_token ();\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_self ();\n+      return AST::Visibility::create_self (path_loc);\n     case SUPER:\n       lexer.skip_token ();\n \n       skip_token (RIGHT_PAREN);\n \n-      return AST::Visibility::create_super ();\n+      return AST::Visibility::create_super (path_loc);\n       case IN: {\n \tlexer.skip_token ();\n "}]}