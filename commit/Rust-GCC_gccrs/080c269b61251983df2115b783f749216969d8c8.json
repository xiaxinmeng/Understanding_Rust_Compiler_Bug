{"sha": "080c269b61251983df2115b783f749216969d8c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgwYzI2OWI2MTI1MTk4M2RmMjExNWI3ODNmNzQ5MjE2OTY5ZDhjOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-06-21T06:45:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-06-21T06:45:59Z"}, "message": "tree-vect-data-refs.c (vect_find_stmt_data_reference): Handle \"omp simd array\" arrays with one byte elements.\n\n\t* tree-vect-data-refs.c (vect_find_stmt_data_reference): Handle\n\t\"omp simd array\" arrays with one byte elements.\n\n\t* gcc.dg/vect/vect-simd-11.c: New test.\n\t* gcc.target/i386/sse2-vect-simd-11.c: New test.\n\t* gcc.target/i386/avx2-vect-simd-11.c: New test.\n\t* gcc.target/i386/avx512bw-vect-simd-11.c: New test.\n\nFrom-SVN: r272542", "tree": {"sha": "67fc14c8139db2b16174cb7fd55e036ba6791293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67fc14c8139db2b16174cb7fd55e036ba6791293"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/080c269b61251983df2115b783f749216969d8c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080c269b61251983df2115b783f749216969d8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080c269b61251983df2115b783f749216969d8c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080c269b61251983df2115b783f749216969d8c8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da10d7c27a2f15ae5f5e06cff600fb3d5fcc5621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da10d7c27a2f15ae5f5e06cff600fb3d5fcc5621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da10d7c27a2f15ae5f5e06cff600fb3d5fcc5621"}], "stats": {"total": 255, "additions": 252, "deletions": 3}, "files": [{"sha": "b585b329b8330601b15cada4c9f4c39e53206761", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080c269b61251983df2115b783f749216969d8c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080c269b61251983df2115b783f749216969d8c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=080c269b61251983df2115b783f749216969d8c8", "patch": "@@ -1,3 +1,8 @@\n+2019-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vect-data-refs.c (vect_find_stmt_data_reference): Handle\n+\t\"omp simd array\" arrays with one byte elements.\n+\n 2019-06-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.md (@unaligned_store<mode>):"}, {"sha": "221fb691a12f3d7c05b59961af42de2043de1e74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=080c269b61251983df2115b783f749216969d8c8", "patch": "@@ -1,3 +1,10 @@\n+2019-06-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/vect/vect-simd-11.c: New test.\n+\t* gcc.target/i386/sse2-vect-simd-11.c: New test.\n+\t* gcc.target/i386/avx2-vect-simd-11.c: New test.\n+\t* gcc.target/i386/avx512bw-vect-simd-11.c: New test.\n+\n 2019-06-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79781"}, {"sha": "e7d8aa0eb03879fcf0a77a512afc3281fbeabe76", "filename": "gcc/testsuite/gcc.dg/vect/vect-simd-11.c", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-simd-11.c?ref=080c269b61251983df2115b783f749216969d8c8", "patch": "@@ -0,0 +1,186 @@\n+/* { dg-require-effective-target size32plus } */\n+/* { dg-additional-options \"-fopenmp-simd\" } */\n+/* { dg-additional-options \"-mavx\" { target avx_runtime } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized \\[1-3] loops\" 2 \"vect\" { target i?86-*-* x86_64-*-* } } } */\n+\n+#ifndef main\n+#include \"tree-vect.h\"\n+#endif\n+\n+int r, a[1024], b[1024];\n+unsigned short r2, b2[1024];\n+unsigned char r3, b3[1024];\n+\n+__attribute__((noipa)) void\n+foo (int *a, int *b, unsigned short *b2, unsigned char *b3)\n+{\n+  #pragma omp simd reduction (inscan, +:r, r2, r3)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { r += a[i]; r2 += a[i]; r3 += a[i]; }\n+      #pragma omp scan inclusive(r, r2, r3)\n+      {\n+\tb[i] = r;\n+\tb2[i] = r2;\n+\tb3[i] = r3;\n+      }\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+bar (unsigned short *s2p, unsigned char *s3p)\n+{\n+  int s = 0;\n+  unsigned short s2 = 0;\n+  unsigned char s3 = 0;\n+  #pragma omp simd reduction (inscan, +:s, s2, s3)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      {\n+\ts += 2 * a[i];\n+\ts2 += 2 * a[i];\n+\ts3 += 2 * a[i];\n+      }\n+      #pragma omp scan inclusive(s, s2, s3)\n+      { b[i] = s; b2[i] = s2; b3[i] = s3; }\n+    }\n+  *s2p = s2;\n+  *s3p = s3;\n+  return s;\n+}\n+\n+__attribute__((noipa)) void\n+baz (int *a, int *b, unsigned short *b2, unsigned char *b3)\n+{\n+  #pragma omp simd reduction (inscan, +:r, r2, r3) if (simd: 0)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      {\n+\tr += a[i];\n+\tr2 += a[i];\n+\tr3 += a[i];\n+      }\n+      #pragma omp scan inclusive(r, r2, r3)\n+      {\n+\tb[i] = r;\n+\tb2[i] = r2;\n+\tb3[i] = r3;\n+      }\n+    }\n+}\n+\n+__attribute__((noipa)) int\n+qux (unsigned short *s2p, unsigned char *s3p)\n+{\n+  int s = 0;\n+  unsigned short s2 = 0;\n+  unsigned char s3 = 0;\n+  #pragma omp simd reduction (inscan, +:s, s2, s3) simdlen (1)\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      { s += 2 * a[i]; s2 += 2 * a[i]; s3 += 2 * a[i]; }\n+      #pragma omp scan inclusive(s, s2, s3)\n+      { b[i] = s; b2[i] = s2; b3[i] = s3; }\n+    }\n+  *s2p = s2;\n+  *s3p = s3;\n+  return s;\n+}\n+\n+int\n+main ()\n+{\n+  int s = 0;\n+  unsigned short s2;\n+  unsigned char s3;\n+#ifndef main\n+  check_vect ();\n+#endif\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      a[i] = i;\n+      b[i] = -1;\n+      b2[i] = -1;\n+      b3[i] = -1;\n+      asm (\"\" : \"+g\" (i));\n+    }\n+  foo (a, b, b2, b3);\n+  if (r != 1024 * 1023 / 2\n+      || r2 != (unsigned short) r\n+      || r3 != (unsigned char) r)\n+    abort ();\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += i;\n+      if (b[i] != s\n+\t  || b2[i] != (unsigned short) s\n+\t  || b3[i] != (unsigned char) s)\n+\tabort ();\n+      else\n+\t{\n+\t  b[i] = 25;\n+\t  b2[i] = 24;\n+\t  b3[i] = 26;\n+\t}\n+    }\n+  if (bar (&s2, &s3) != 1024 * 1023)\n+    abort ();\n+  if (s2 != (unsigned short) (1024 * 1023)\n+      || s3 != (unsigned char) (1024 * 1023))\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += 2 * i;\n+      if (b[i] != s\n+\t  || b2[i] != (unsigned short) s\n+\t  || b3[i] != (unsigned char) s)\n+\tabort ();\n+      else\n+\t{\n+\t  b[i] = -1;\n+\t  b2[i] = -1;\n+\t  b3[i] = -1;\n+\t}\n+    }\n+  r = 0;\n+  r2 = 0;\n+  r3 = 0;\n+  baz (a, b, b2, b3);\n+  if (r != 1024 * 1023 / 2\n+      || r2 != (unsigned short) r\n+      || r3 != (unsigned char) r)\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += i;\n+      if (b[i] != s\n+\t  || b2[i] != (unsigned short) s\n+\t  || b3[i] != (unsigned char) s)\n+\tabort ();\n+      else\n+\t{\n+\t  b[i] = 25;\n+\t  b2[i] = 24;\n+\t  b3[i] = 26;\n+\t}\n+    }\n+  s2 = 0;\n+  s3 = 0;\n+  if (qux (&s2, &s3) != 1024 * 1023)\n+    abort ();\n+  if (s2 != (unsigned short) (1024 * 1023)\n+      || s3 != (unsigned char) (1024 * 1023))\n+    abort ();\n+  s = 0;\n+  for (int i = 0; i < 1024; ++i)\n+    {\n+      s += 2 * i;\n+      if (b[i] != s\n+\t  || b2[i] != (unsigned short) s\n+\t  || b3[i] != (unsigned char) s)\n+\tabort ();\n+    }\n+  return 0;\n+}"}, {"sha": "722217aedaf23bdf83a8528e73591cf20e575d90", "filename": "gcc/testsuite/gcc.target/i386/avx2-vect-simd-11.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-simd-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-simd-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vect-simd-11.c?ref=080c269b61251983df2115b783f749216969d8c8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp-simd -mavx2 -fdump-tree-vect-details\" } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-final { scan-tree-dump-times \"vectorized \\[1-3] loops\" 2 \"vect\" } } */\n+\n+#include \"avx2-check.h\"\n+\n+#define main() do_main ()\n+\n+#include \"../../gcc.dg/vect/vect-simd-11.c\"\n+\n+static void\n+avx2_test (void)\n+{\n+  do_main ();\n+}"}, {"sha": "92f861349c0c828bb7921f78aaec36b49d3a32bc", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vect-simd-11.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vect-simd-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vect-simd-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vect-simd-11.c?ref=080c269b61251983df2115b783f749216969d8c8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp-simd -mavx512bw -mprefer-vector-width=512 -fdump-tree-vect-details\" } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-final { scan-tree-dump-times \"vectorized \\[1-3] loops\" 2 \"vect\" } } */\n+\n+#include \"avx512bw-check.h\"\n+\n+#define main() do_main ()\n+\n+#include \"../../gcc.dg/vect/vect-simd-11.c\"\n+\n+static void\n+avx512bw_test (void)\n+{\n+  do_main ();\n+}"}, {"sha": "aed43d58f0869509d0cb9315e70518d8dbe25f74", "filename": "gcc/testsuite/gcc.target/i386/sse2-vect-simd-11.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vect-simd-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vect-simd-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-vect-simd-11.c?ref=080c269b61251983df2115b783f749216969d8c8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp-simd -msse2 -mno-sse3 -fdump-tree-vect-details\" } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-final { scan-tree-dump-times \"vectorized \\[1-3] loops\" 2 \"vect\" } } */\n+\n+#include \"sse2-check.h\"\n+\n+#define main() do_main ()\n+\n+#include \"../../gcc.dg/vect/vect-simd-11.c\"\n+\n+static void\n+sse2_test (void)\n+{\n+  do_main ();\n+}"}, {"sha": "35a48d101af5a625ab71c126119965d78b11d656", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080c269b61251983df2115b783f749216969d8c8/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=080c269b61251983df2115b783f749216969d8c8", "patch": "@@ -4075,14 +4075,17 @@ vect_find_stmt_data_reference (loop_p loop, gimple *stmt,\n \t  && integer_zerop (DR_STEP (newdr)))\n \t{\n \t  tree off = DR_OFFSET (newdr);\n+\t  tree step = ssize_int (1);\n \t  STRIP_NOPS (off);\n-\t  if (TREE_CODE (DR_INIT (newdr)) == INTEGER_CST\n-\t      && TREE_CODE (off) == MULT_EXPR\n+\t  if (TREE_CODE (off) == MULT_EXPR\n \t      && tree_fits_uhwi_p (TREE_OPERAND (off, 1)))\n \t    {\n-\t      tree step = TREE_OPERAND (off, 1);\n+\t      step = TREE_OPERAND (off, 1);\n \t      off = TREE_OPERAND (off, 0);\n \t      STRIP_NOPS (off);\n+\t    }\n+\t  if (TREE_CODE (DR_INIT (newdr)) == INTEGER_CST)\n+\t    {\n \t      if (CONVERT_EXPR_P (off)\n \t\t  && (TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (off, 0)))\n \t\t      < TYPE_PRECISION (TREE_TYPE (off))))"}]}