{"sha": "d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3ZDA2ZmVmODNjNWY4MzU1ZmEzMjdkNWZhMGZmMjVjZDMxYmI3Nw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2007-02-08T16:55:43Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2007-02-08T16:55:43Z"}, "message": "re PR tree-optimization/30562 (remove unused variable is removing a referenced variable (in STORED_SYMS or LOADED_SYMS))\n\n\n\tPR 30562\n\t* tree-flow.h (struct var_ann_d): Remove field 'is_used'.\n\tUpdate all users.\n\t* tree-ssa-alias.c (compute_is_aliased): Remove.  Update all\n\tusers.\n\t(init_alias_info):\n\t* tree-ssa-live.c (remove_unused_locals): Do not remove\n\tTREE_ADDRESSABLE variables.\n\t* tree-ssa-structalias.c (compute_points_to_sets): Tidy.\n\t* tree-ssa-operands.c (add_virtual_operand): Remove argument\n\tFOR_CLOBBER.  Update all users.\n\tIf VAR has an associated alias set, add a virtual operand for\n\tit if no alias is found to conflict with the memory reference.\n\nFrom-SVN: r121715", "tree": {"sha": "462b7ce003c31e7ef7c5f0d111647eb55bddfdfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/462b7ce003c31e7ef7c5f0d111647eb55bddfdfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/comments", "author": null, "committer": null, "parents": [{"sha": "e35a0e6476c15c34df002f698dbfbbcc44338238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35a0e6476c15c34df002f698dbfbbcc44338238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35a0e6476c15c34df002f698dbfbbcc44338238"}], "stats": {"total": 147, "additions": 44, "deletions": 103}, "files": [{"sha": "f4e45dfb25d138647cfd4dee169dd2f991c0ffd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "patch": "@@ -1,3 +1,19 @@\n+2007-02-08  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR 30562\n+\t* tree-flow.h (struct var_ann_d): Remove field 'is_used'.\n+\tUpdate all users.\n+\t* tree-ssa-alias.c (compute_is_aliased): Remove.  Update all\n+\tusers.\n+\t(init_alias_info):\n+\t* tree-ssa-live.c (remove_unused_locals): Do not remove\n+\tTREE_ADDRESSABLE variables.\n+\t* tree-ssa-structalias.c (compute_points_to_sets): Tidy.\n+\t* tree-ssa-operands.c (add_virtual_operand): Remove argument\n+\tFOR_CLOBBER.  Update all users.\n+\tIf VAR has an associated alias set, add a virtual operand for\n+\tit if no alias is found to conflict with the memory reference.\n+\n 2007-02-07  Jan Hubicka  <jh@suse.cz>\n \t    Robert Kidd <rkidd@crhc.uiuc.edu>\n "}, {"sha": "a1200eb4ebd1e996627108628f6d3f4de54b2136", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "patch": "@@ -337,9 +337,6 @@ dump_variable (FILE *file, tree var)\n       print_generic_expr (file, ann->symbol_mem_tag, dump_flags);\n     }\n \n-  if (ann && ann->is_aliased)\n-    fprintf (file, \", is aliased\");\n-\n   if (TREE_ADDRESSABLE (var))\n     fprintf (file, \", is addressable\");\n   "}, {"sha": "2d661f58af0190e133f5210df88a059f31b9eed5", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "patch": "@@ -228,9 +228,6 @@ struct var_ann_d GTY(())\n   /* Used when building base variable structures in a var_map.  */\n   unsigned base_var_processed : 1;\n \n-  /* Nonzero if this variable is in the alias set of another variable.  */\n-  unsigned is_aliased : 1;\n-\n   /* Nonzero if this variable was used after SSA optimizations were\n      applied.  We set this when translating out of SSA form.  */\n   unsigned used : 1;"}, {"sha": "5ed2d13adabe79e6c44f78b4cf96d2f150693fc9", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "patch": "@@ -776,43 +776,6 @@ compute_memory_partitions (void)\n   timevar_pop (TV_MEMORY_PARTITIONING);\n }\n \n-/* This function computes the value of the is_aliased bit for\n-   variables.  is_aliased is true for any variable that is in an\n-   alias bitmap.  */\n-\n-static void\n-compute_is_aliased (void)\n-{\n-  referenced_var_iterator rvi;\n-  tree tag;\n-  bitmap aliased_vars = BITMAP_ALLOC (NULL);\n-  bitmap_iterator bi;\n-  unsigned int i;\n-  \n-  /* Add is_aliased for all vars pointed to by the symbol tags.  */\n-  FOR_EACH_REFERENCED_VAR (tag, rvi)\n-    {\n-      bitmap aliases;\n-      if (TREE_CODE (tag) != SYMBOL_MEMORY_TAG\n-\t  && TREE_CODE (tag) != NAME_MEMORY_TAG)\n-\tcontinue;\n-      aliases = MTAG_ALIASES (tag);\n-      if (!aliases)\n-\tcontinue;\n-      \n-      bitmap_ior_into (aliased_vars, aliases);\t  \n-    }\n-  \n-  EXECUTE_IF_SET_IN_BITMAP (aliased_vars, 0, i, bi)\n-    {\n-      tree var = referenced_var (i);\n-      \n-      var_ann (var)->is_aliased = true;\n-    }\n-  \n-  BITMAP_FREE (aliased_vars);\n-}\n-\n \n /* Compute may-alias information for every variable referenced in function\n    FNDECL.\n@@ -980,9 +943,6 @@ compute_may_aliases (void)\n       dump_points_to_info (dump_file);\n       dump_alias_info (dump_file);\n     }\n-\n-  /* Set up is_aliased flags. */\n-  compute_is_aliased ();\n   \n   /* Deallocate memory used by aliasing data structures.  */\n   delete_alias_info (ai);\n@@ -1170,10 +1130,6 @@ init_alias_info (void)\n       /* Clear flow-insensitive alias information from each symbol.  */\n       FOR_EACH_REFERENCED_VAR (var, rvi)\n \t{\n-\t  var_ann_t ann = var_ann (var);\n-\t  \n-\t  ann->is_aliased = 0;\n-\n \t  if (MTAG_P (var))\n \t    MTAG_ALIASES (var) = NULL;\n "}, {"sha": "7e98e2cf8e8b45b760a0f033c16ef57404106e71", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "patch": "@@ -502,18 +502,20 @@ remove_unused_locals (void)\n       cell = &TREE_CHAIN (*cell);\n     }\n \n-  /* Remove unused variables from REFERENCED_VARs.  As an special exception\n-     keep the variables that are believed to be aliased.  Those can't be\n-     easily removed from the alias sets and and operand caches.\n-     They will be removed shortly after next may_alias pass is performed.  */\n+  /* Remove unused variables from REFERENCED_VARs.  As a special\n+     exception keep the variables that are believed to be aliased.\n+     Those can't be easily removed from the alias sets and operand\n+     caches.  They will be removed shortly after the next may_alias\n+     pass is performed.  */\n   FOR_EACH_REFERENCED_VAR (t, rvi)\n     if (!is_global_var (t)\n \t&& !MTAG_P (t)\n \t&& TREE_CODE (t) != PARM_DECL\n \t&& TREE_CODE (t) != RESULT_DECL\n \t&& !(ann = var_ann (t))->used\n-\t&& !ann->is_aliased && !is_call_clobbered (t) && !ann->symbol_mem_tag)\n-        remove_referenced_var (t);\n+\t&& !ann->symbol_mem_tag\n+\t&& !TREE_ADDRESSABLE (t))\n+      remove_referenced_var (t);\n }\n \n "}, {"sha": "c702ed454db88a231b1327cdb4017b4146e2365a", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "patch": "@@ -1433,13 +1433,12 @@ access_can_touch_variable (tree ref, tree alias, HOST_WIDE_INT offset,\n    get_expr_operands.  FULL_REF is a tree that contains the entire\n    pointer dereference expression, if available, or NULL otherwise.\n    OFFSET and SIZE come from the memory access expression that\n-   generated this virtual operand.  FOR_CLOBBER is true is this is\n-   adding a virtual operand for a call clobber.  */\n+   generated this virtual operand.  */\n \n static void \n add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t\t     tree full_ref, HOST_WIDE_INT offset,\n-\t\t     HOST_WIDE_INT size, bool for_clobber)\n+\t\t     HOST_WIDE_INT size)\n {\n   bitmap aliases = NULL;\n   tree sym;\n@@ -1514,24 +1513,13 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t      append_vdef (al);\n \t    }\n \n-\t  /* If the variable is also an alias tag, add a virtual\n-\t     operand for it, otherwise we will miss representing\n-\t     references to the members of the variable's alias set.\t     \n-\t     This fixes the bug in gcc.c-torture/execute/20020503-1.c.\n-\t     \n-\t     It is also necessary to add bare defs on clobbers for\n-\t     SMT's, so that bare SMT uses caused by pruning all the\n-\t     aliases will link up properly with calls.   In order to\n-\t     keep the number of these bare defs we add down to the\n-\t     minimum necessary, we keep track of which SMT's were used\n-\t     alone in statement vdefs or VUSEs.  */\n-\t  if (v_ann->is_aliased\n-\t      || none_added\n-\t      || (TREE_CODE (var) == SYMBOL_MEMORY_TAG\n-\t\t  && for_clobber))\n-\t    {\n-\t      append_vdef (var);\n-\t    }\n+\t  /* Even if no aliases have been added, we still need to\n+\t     establish def-use and use-def chains, lest\n+\t     transformations think that this is not a memory\n+\t     reference.  For an example of this scenario, see\n+\t     testsuite/g++.dg/opt/cleanup1.C.  */\n+\t  if (none_added)\n+\t    append_vdef (var);\n \t}\n       else\n \t{\n@@ -1545,9 +1533,12 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t      append_vuse (al);\n \t    }\n \t  \n-\t  /* Similarly, append a virtual uses for VAR itself, when\n-\t     it is an alias tag.  */\n-\t  if (v_ann->is_aliased || none_added)\n+\t  /* Even if no aliases have been added, we still need to\n+\t     establish def-use and use-def chains, lest\n+\t     transformations think that this is not a memory\n+\t     reference.  For an example of this scenario, see\n+\t     testsuite/g++.dg/opt/cleanup1.C.  */\n+\t  if (none_added)\n \t    append_vuse (var);\n \t}\n     }\n@@ -1584,7 +1575,7 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n \tappend_use (var_p);\n     }\n   else\n-    add_virtual_operand (var, s_ann, flags, NULL_TREE, 0, -1, false);\n+    add_virtual_operand (var, s_ann, flags, NULL_TREE, 0, -1);\n }\n \n \n@@ -1631,7 +1622,7 @@ get_indirect_ref_operands (tree stmt, tree expr, int flags,\n \t{\n \t  /* PTR has its own memory tag.  Use it.  */\n \t  add_virtual_operand (pi->name_mem_tag, s_ann, flags,\n-\t\t\t       full_ref, offset, size, false);\n+\t\t\t       full_ref, offset, size);\n \t}\n       else\n \t{\n@@ -1660,7 +1651,7 @@ get_indirect_ref_operands (tree stmt, tree expr, int flags,\n \n \t  if (v_ann->symbol_mem_tag)\n \t    add_virtual_operand (v_ann->symbol_mem_tag, s_ann, flags,\n-\t\t\t\t full_ref, offset, size, false);\n+\t\t\t\t full_ref, offset, size);\n           /* Aliasing information is missing; mark statement as volatile so we\n              won't optimize it out too actively.  */\n           else if (s_ann && !gimple_aliases_computed_p (cfun)\n@@ -1818,7 +1809,7 @@ add_call_clobber_ops (tree stmt, tree callee)\n \t    clobber_stats.static_read_clobbers_avoided++;\n \t}\n       else\n-\tadd_virtual_operand (var, s_ann, opf_def, NULL, 0, -1, true);\n+\tadd_virtual_operand (var, s_ann, opf_def, NULL, 0, -1);\n     }\n }\n "}, {"sha": "e884a658fe8e0273a23e98e4f07a890c2e43f6a2", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "patch": "@@ -4663,6 +4663,7 @@ compute_points_to_sets (struct alias_info *ai)\n \t  if (is_gimple_reg (PHI_RESULT (phi)))\n \t    {\n \t      find_func_aliases (phi);\n+\n \t      /* Update various related attributes like escaped\n \t\t addresses, pointer dereferences for loads and stores.\n \t\t This is used when creating name tags and alias"}, {"sha": "060f57d9a64d617629040e61ec039e7fd51f6105", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d37d06fef83c5f8355fa327d5fa0ff25cd31bb77/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=d37d06fef83c5f8355fa327d5fa0ff25cd31bb77", "patch": "@@ -375,7 +375,6 @@ static void\n verify_flow_insensitive_alias_info (void)\n {\n   tree var;\n-  bitmap visited = BITMAP_ALLOC (NULL);\n   referenced_var_iterator rvi;\n \n   FOR_EACH_REFERENCED_VAR (var, rvi)\n@@ -393,7 +392,6 @@ verify_flow_insensitive_alias_info (void)\n       EXECUTE_IF_SET_IN_BITMAP (aliases, 0, j, bi)\n \t{\n \t  alias = referenced_var (j);\n-\t  bitmap_set_bit (visited, j);\n \n \t  if (TREE_CODE (alias) != MEMORY_PARTITION_TAG\n \t      && !may_be_aliased (alias))\n@@ -405,23 +403,6 @@ verify_flow_insensitive_alias_info (void)\n \t}\n     }\n \n-  FOR_EACH_REFERENCED_VAR (var, rvi)\n-    {\n-      var_ann_t ann;\n-      ann = var_ann (var);\n-\n-      if (!MTAG_P (var)\n-\t  && ann->is_aliased\n-\t  && memory_partition (var) == NULL_TREE\n-\t  && !bitmap_bit_p (visited, DECL_UID (var)))\n-\t{\n-\t  error (\"addressable variable that is aliased but is not in any \"\n-\t         \"alias set\");\n-\t  goto err;\n-\t}\n-    }\n-\n-  BITMAP_FREE (visited);\n   return;\n \n err:"}]}