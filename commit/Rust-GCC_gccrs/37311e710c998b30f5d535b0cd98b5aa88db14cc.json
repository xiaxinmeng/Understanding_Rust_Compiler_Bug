{"sha": "37311e710c998b30f5d535b0cd98b5aa88db14cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczMTFlNzEwYzk5OGIzMGY1ZDUzNWIwY2Q5OGI1YWE4OGRiMTRjYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-03-17T00:02:53Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-17T00:02:53Z"}, "message": "gfortran.h (gfc_equiv_info): Add length field.\n\n\n\t* gfortran.h (gfc_equiv_info): Add length field.\n\t* trans-common.c (copy_equiv_list_to_ns): Set the length field.\n\t* dependency.c (gfc_are_equivalenced_arrays): Use both the offset\n\tand length fields to determine whether the two equivalenced symbols\n\toverlap in memory.\n\n\t* gfortran.dg/dependency_13.f90: New test case.\n\nFrom-SVN: r112162", "tree": {"sha": "8b3497c0385f850e087ede30b150e5e567d20343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b3497c0385f850e087ede30b150e5e567d20343"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37311e710c998b30f5d535b0cd98b5aa88db14cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37311e710c998b30f5d535b0cd98b5aa88db14cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37311e710c998b30f5d535b0cd98b5aa88db14cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37311e710c998b30f5d535b0cd98b5aa88db14cc/comments", "author": null, "committer": null, "parents": [{"sha": "620b87b3cede2575e47da115ab8d1a6047dc5c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620b87b3cede2575e47da115ab8d1a6047dc5c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620b87b3cede2575e47da115ab8d1a6047dc5c06"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "61bbcfdd41b4f2e464b29954e05561d54e3b8495", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=37311e710c998b30f5d535b0cd98b5aa88db14cc", "patch": "@@ -1,3 +1,11 @@\n+2006-03-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.h (gfc_equiv_info): Add length field.\n+\t* trans-common.c (copy_equiv_list_to_ns): Set the length field.\n+\t* dependency.c (gfc_are_equivalenced_arrays): Use both the offset\n+\tand length fields to determine whether the two equivalenced symbols\n+\toverlap in memory.\n+\n 2006-03-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/19101"}, {"sha": "03cabf05be925c8e530f7c94f16a64f9768589ca", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=37311e710c998b30f5d535b0cd98b5aa88db14cc", "patch": "@@ -414,10 +414,13 @@ gfc_check_fncall_dependency (gfc_expr * other, sym_intent intent,\n    directly or indirectly; ie. equivalence (a,b) for a and b\n    or equivalence (a,c),(b,c).  This function uses the equiv_\n    lists, generated in trans-common(add_equivalences), that are\n-   guaranteed to pick up indirect equivalences.  A rudimentary\n-   use is made of the offset to ensure that cases where the\n-   source elements are moved down to the destination are not\n-   identified as dependencies.  */\n+   guaranteed to pick up indirect equivalences.  We explicitly\n+   check for overlap using the offset and length of the equivalence.\n+   This function is symmetric.\n+   TODO: This function only checks whether the full top-level\n+   symbols overlap.  An improved implementation could inspect\n+   e1->ref and e2->ref to determine whether the actually accessed\n+   portions of these variables/arrays potentially overlap.  */\n \n int\n gfc_are_equivalenced_arrays (gfc_expr *e1, gfc_expr *e2)\n@@ -444,14 +447,33 @@ gfc_are_equivalenced_arrays (gfc_expr *e1, gfc_expr *e2)\n       for (s = l->equiv; s; s = s->next)\n \t{\n \t  if (s->sym == e1->symtree->n.sym)\n-\t    fl1 = s;\n+\t    {\n+\t      fl1 = s;\n+\t      if (fl2)\n+\t\tbreak;\n+\t    }\n \t  if (s->sym == e2->symtree->n.sym)\n-\t    fl2 = s;\n-\t  if (fl1 && fl2 && (fl1->offset > fl2->offset))\n+\t    {\n+\t      fl2 = s;\n+\t      if (fl1)\n+\t\tbreak;\n+\t    }\n+\t}\n+\n+      if (s)\n+\t{\n+\t  /* Can these lengths be zero?  */\n+\t  if (fl1->length <= 0 || fl2->length <= 0)\n+\t    return 1;\n+\t  /* These can't overlap if [f11,fl1+length] is before \n+\t     [fl2,fl2+length], or [fl2,fl2+length] is before\n+\t     [fl1,fl1+length], otherwise they do overlap.  */\n+\t  if (fl1->offset + fl1->length > fl2->offset\n+\t      && fl2->offset + fl2->length > fl1->offset)\n \t    return 1;\n \t}\n     }\n-return 0;\n+  return 0;\n }\n \n "}, {"sha": "24c92b3e0eb02eddb63d4f724d8a615fe75fa32a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=37311e710c998b30f5d535b0cd98b5aa88db14cc", "patch": "@@ -1352,6 +1352,7 @@ typedef struct gfc_equiv_info\n {\n   gfc_symbol *sym;\n   HOST_WIDE_INT offset;\n+  HOST_WIDE_INT length;\n   struct gfc_equiv_info *next;\n } gfc_equiv_info;\n "}, {"sha": "3b16e5e006554ccad5141eb60dec644ff781bba9", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=37311e710c998b30f5d535b0cd98b5aa88db14cc", "patch": "@@ -169,6 +169,7 @@ copy_equiv_list_to_ns (segment_info *c)\n       l->equiv = s;\n       s->sym = f->sym;\n       s->offset = f->offset;\n+      s->length = f->length;\n     }\n }\n "}, {"sha": "63fa39dbf52d9f55b0c7eb4755156e9820647c4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37311e710c998b30f5d535b0cd98b5aa88db14cc", "patch": "@@ -1,3 +1,7 @@\n+2006-03-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/dependency_13.f90: New test case.\n+\n 2006-03-16  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/21781"}, {"sha": "85fb9779510f2b493e910d2fcee8a364ea9a8da9", "filename": "gcc/testsuite/gfortran.dg/dependency_13.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37311e710c998b30f5d535b0cd98b5aa88db14cc/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_13.f90?ref=37311e710c998b30f5d535b0cd98b5aa88db14cc", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+   integer :: i(5)\n+   real(4) :: x(5)\n+   equivalence(x,i)\n+\n+   i = (/ 1, 0, 3, 5, 0 /)\n+   where (i(1:4) .ne. 0)\n+     x(2:5) = -42.\n+   end where\n+   end\n+! { dg-final { scan-tree-dump-times \"malloc\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}