{"sha": "1eac383063f6d91d9fa052c06d46816c6485c8da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhYzM4MzA2M2Y2ZDkxZDlmYTA1MmMwNmQ0NjgxNmM2NDg1YzhkYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-08T16:17:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-08T16:17:34Z"}, "message": "re PR target/85683 (GCC 8 stopped using RMW (Read Modify Write) instructions on x86[_64])\n\n\tPR target/85683\n\t* config/i386/i386.md: Add peepholes for mem {+,-,&,|,^}= x; mem != 0\n\tafter cmpelim optimization.\n\n\t* gcc.target/i386/pr49095.c: Add -masm=att to dg-options.  Add\n\tscan-assembler-times checking that except for [fh]*xor other functions\n\tdon't use any load instructions.\n\nFrom-SVN: r260045", "tree": {"sha": "8d75a53ddf3cfe2cabbcfb205cbeac8aa775733a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d75a53ddf3cfe2cabbcfb205cbeac8aa775733a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eac383063f6d91d9fa052c06d46816c6485c8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eac383063f6d91d9fa052c06d46816c6485c8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eac383063f6d91d9fa052c06d46816c6485c8da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eac383063f6d91d9fa052c06d46816c6485c8da/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41c3db9f28afae381b1f4cb18ac370fcd3da8706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c3db9f28afae381b1f4cb18ac370fcd3da8706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c3db9f28afae381b1f4cb18ac370fcd3da8706"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "17208954394c1de901c8af4fc1c913296fa29046", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eac383063f6d91d9fa052c06d46816c6485c8da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eac383063f6d91d9fa052c06d46816c6485c8da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1eac383063f6d91d9fa052c06d46816c6485c8da", "patch": "@@ -1,3 +1,9 @@\n+2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85683\n+\t* config/i386/i386.md: Add peepholes for mem {+,-,&,|,^}= x; mem != 0\n+\tafter cmpelim optimization.\n+\n 2018-05-08  Olga Makhotina  <olga.makhotina@intel.com>\n \n \t* config.gcc: Support \"goldmont\"."}, {"sha": "97b1ca318006dc1baf3caa7ea719a8728dd3c84d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eac383063f6d91d9fa052c06d46816c6485c8da/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eac383063f6d91d9fa052c06d46816c6485c8da/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1eac383063f6d91d9fa052c06d46816c6485c8da", "patch": "@@ -19286,6 +19286,37 @@\n \t\t       const0_rtx);\n })\n \n+;; Likewise for cmpelim optimized pattern.\n+(define_peephole2\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(match_operand:SWI 1 \"memory_operand\"))\n+   (parallel [(set (reg FLAGS_REG)\n+\t\t   (compare (match_operator:SWI 3 \"plusminuslogic_operator\"\n+\t\t\t      [(match_dup 0)\n+\t\t\t       (match_operand:SWI 2 \"<nonmemory_operand>\")])\n+\t\t\t    (const_int 0)))\n+\t      (set (match_dup 0) (match_dup 3))])\n+   (set (match_dup 1) (match_dup 0))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && peep2_reg_dead_p (3, operands[0])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\n+   && ix86_match_ccmode (peep2_next_insn (1),\n+\t\t\t (GET_CODE (operands[3]) == PLUS\n+\t\t\t  || GET_CODE (operands[3]) == MINUS)\n+\t\t\t ? CCGOCmode : CCNOmode)\"\n+  [(parallel [(set (match_dup 4) (match_dup 6))\n+\t      (set (match_dup 1) (match_dup 5))])]\n+{\n+  operands[4] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (1)), 0, 0));\n+  operands[5]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[3]), GET_MODE (operands[3]),\n+\t\t      copy_rtx (operands[1]), operands[2]);\n+  operands[6]\n+    = gen_rtx_COMPARE (GET_MODE (operands[4]), copy_rtx (operands[5]),\n+\t\t       const0_rtx);\n+})\n+\n ;; Likewise for instances where we have a lea pattern.\n (define_peephole2\n   [(set (match_operand:SWI 0 \"register_operand\")\n@@ -19349,6 +19380,34 @@\n \t\t       const0_rtx);\n })\n \n+;; Likewise for cmpelim optimized pattern.\n+(define_peephole2\n+  [(parallel [(set (reg FLAGS_REG)\n+\t\t   (compare (match_operator:SWI 2 \"plusminuslogic_operator\"\n+\t\t\t      [(match_operand:SWI 0 \"register_operand\")\n+\t\t\t       (match_operand:SWI 1 \"memory_operand\")])\n+\t\t\t    (const_int 0)))\n+\t      (set (match_dup 0) (match_dup 2))])\n+   (set (match_dup 1) (match_dup 0))]\n+  \"(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n+   && peep2_reg_dead_p (2, operands[0])\n+   && !reg_overlap_mentioned_p (operands[0], operands[1])\n+   && ix86_match_ccmode (peep2_next_insn (0),\n+\t\t\t (GET_CODE (operands[2]) == PLUS\n+\t\t\t  || GET_CODE (operands[2]) == MINUS)\n+\t\t\t ? CCGOCmode : CCNOmode)\"\n+  [(parallel [(set (match_dup 3) (match_dup 5))\n+\t      (set (match_dup 1) (match_dup 4))])]\n+{\n+  operands[3] = SET_DEST (XVECEXP (PATTERN (peep2_next_insn (0)), 0, 0));\n+  operands[4]\n+    = gen_rtx_fmt_ee (GET_CODE (operands[2]), GET_MODE (operands[2]),\n+\t\t      copy_rtx (operands[1]), operands[0]);\n+  operands[5]\n+    = gen_rtx_COMPARE (GET_MODE (operands[3]), copy_rtx (operands[4]),\n+\t\t       const0_rtx);\n+})\n+\n (define_peephole2\n   [(set (match_operand:SWI12 0 \"register_operand\")\n \t(match_operand:SWI12 1 \"memory_operand\"))"}, {"sha": "bd65daa518a08590fa990a3a333b4290d157b9bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eac383063f6d91d9fa052c06d46816c6485c8da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eac383063f6d91d9fa052c06d46816c6485c8da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1eac383063f6d91d9fa052c06d46816c6485c8da", "patch": "@@ -1,3 +1,10 @@\n+2018-05-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/85683\n+\t* gcc.target/i386/pr49095.c: Add -masm=att to dg-options.  Add\n+\tscan-assembler-times checking that except for [fh]*xor other functions\n+\tdon't use any load instructions.\n+\n 2018-05-08  Olga Makhotina  <olga.makhotina@intel.com>\n \n \t* gcc.target/i386/builtin_target.c: Test goldmont."}, {"sha": "078071910638b076a749b847552e260d8c45ab04", "filename": "gcc/testsuite/gcc.target/i386/pr49095.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eac383063f6d91d9fa052c06d46816c6485c8da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eac383063f6d91d9fa052c06d46816c6485c8da/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49095.c?ref=1eac383063f6d91d9fa052c06d46816c6485c8da", "patch": "@@ -1,6 +1,6 @@\n /* PR rtl-optimization/49095 */\n /* { dg-do compile } */\n-/* { dg-options \"-Os -fno-shrink-wrap\" } */\n+/* { dg-options \"-Os -fno-shrink-wrap -masm=att\" } */\n /* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n \n void foo (void *);\n@@ -71,3 +71,6 @@ G (int)\n G (long)\n \n /* { dg-final { scan-assembler-not \"test\\[lq\\]\" } } */\n+/* The {f,h}{char,short,int,long}xor functions aren't optimized into\n+   a RMW instruction, so need load, modify and store.  FIXME eventually.  */\n+/* { dg-final { scan-assembler-times \"\\\\), %\" 8 } } */"}]}