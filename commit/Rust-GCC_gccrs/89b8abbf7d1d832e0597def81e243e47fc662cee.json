{"sha": "89b8abbf7d1d832e0597def81e243e47fc662cee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliOGFiYmY3ZDFkODMyZTA1OTdkZWY4MWUyNDNlNDdmYzY2MmNlZQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-08-30T13:32:57Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-08-30T13:32:57Z"}, "message": "Makefile.in (machname.h): Remove.\n\n2004-08-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* fixinc/Makefile.in (machname.h): Remove.\n\t(fixincl.x): Do not pass $@ to genfixes.\n\t* fixinc/genfixes: Remove code to produce machname.h.\n\t* fixinc/fixincl.sh: Move it here instead.\n\t* fixinc/fixlib.c: Do not conditionalize on MN_NAME_PAT's presence,\n\tinstead check if pz_mn_name_pat is NULL.  Make mn_get_regexps\n\treturn a bool indicating whether pz_mn_name_pat is NULL.\n\t* fixinc/fixlib.h: Do not conditionalize on MN_NAME_PAT's presence.\n\tDeclare extern C variables for the ENV_TABLE.\n\t* fixinc/fixfixes.c: Do not conditionalize on MN_NAME_PAT's presence,\n\tinstead use the result of mn_get_regexps.\n\t* fixinc/fixtests.c: Likewise.\n\nFrom-SVN: r86771", "tree": {"sha": "46be915f501e15ade713cd78a6d183f24dbe2920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46be915f501e15ade713cd78a6d183f24dbe2920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89b8abbf7d1d832e0597def81e243e47fc662cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b8abbf7d1d832e0597def81e243e47fc662cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b8abbf7d1d832e0597def81e243e47fc662cee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b8abbf7d1d832e0597def81e243e47fc662cee/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc6633e0cf54d9d3a5f57ce6e33dfd1af8a5ac81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6633e0cf54d9d3a5f57ce6e33dfd1af8a5ac81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6633e0cf54d9d3a5f57ce6e33dfd1af8a5ac81"}], "stats": {"total": 168, "additions": 82, "deletions": 86}, "files": [{"sha": "3bf8503f499bdb3866454a22be7a1aa9b82166c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89b8abbf7d1d832e0597def81e243e47fc662cee", "patch": "@@ -3,6 +3,21 @@\n \t* tree.h (BINFO_PRIMARY_BASE_OF): Remove.\n \t(struct tree_binfo): Remove primary field.\n \n+2004-08-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* fixinc/Makefile.in (machname.h): Remove.\n+\t(fixincl.x): Do not pass $@ to genfixes.\n+\t* fixinc/genfixes: Remove code to produce machname.h.\n+\t* fixinc/fixincl.sh: Move it here instead.\n+\t* fixinc/fixlib.c: Do not conditionalize on MN_NAME_PAT's presence,\n+\tinstead check if pz_mn_name_pat is NULL.  Make mn_get_regexps\n+\treturn a bool indicating whether pz_mn_name_pat is NULL.\n+\t* fixinc/fixlib.h: Do not conditionalize on MN_NAME_PAT's presence.\n+\tDeclare extern C variables for the ENV_TABLE.\n+\t* fixinc/fixfixes.c: Do not conditionalize on MN_NAME_PAT's presence,\n+\tinstead use the result of mn_get_regexps.\n+\t* fixinc/fixtests.c: Likewise.\n+\n 2004-08-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure.ac: Do not run fixincludes after stage1 during"}, {"sha": "a148665c15ffdfa0a7ae8d0927ec66ecc078ca7b", "filename": "gcc/fixinc/Makefile.in", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FMakefile.in?ref=89b8abbf7d1d832e0597def81e243e47fc662cee", "patch": "@@ -73,7 +73,7 @@ ALLOBJ = fixincl.o fixtests.o fixfixes.o server.o procopen.o \\\n TESTOBJ = fixincl.o fixlib.o fixtests.o\n FIXOBJ  = fixfixes.o fixlib.o\n \n-HDR = server.h fixlib.h machname.h\n+HDR = server.h fixlib.h\n FI  = fixincl@build_exeext@\n AF  = applyfix@build_exeext@\n \n@@ -102,17 +102,11 @@ server.o    : server.c\n procopen.o  : procopen.c\n fixlib.o    : fixlib.c\n \n-#  'machname.h' is built in the build directory.\n-#  'fixincl.x' in the source dir.\n-#\n-machname.h: ../specs\n-\t$(SHELL) $(srcdir)/genfixes $@\n-\n $(srcdir)/fixincl.x: @MAINT@ fixincl.tpl inclhack.def\n-\tcd $(srcdir) ; $(SHELL) ./genfixes $@\n+\tcd $(srcdir) ; $(SHELL) ./genfixes\n \n clean:\n-\trm -f *.o *-stamp $(AF) $(FI) machname.h *~\n+\trm -f *.o *-stamp $(AF) $(FI) *~\n \n maintainer-clean : clean\n \trm -f $(srcdir)/fixincl.x\n@@ -129,8 +123,7 @@ install-bin : $(TARGETS)\n \n Makefile: Makefile.in ../config.status\n \tcd .. \\\n-\t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= \\\n-\t  $(SHELL) ./config.status\n+\t  && $(SHELL) ./config.status $(subdir)/Makefile\n \n check : $(TARGETS)\n \tautogen -T $(srcdir)/check.tpl $(srcdir)/inclhack.def"}, {"sha": "19fa27ed12109e8d8340d3e2576aef75b007c042", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=89b8abbf7d1d832e0597def81e243e47fc662cee", "patch": "@@ -488,9 +488,6 @@ FIX_PROC_HEAD( char_macro_def_fix )\n \n FIX_PROC_HEAD( machine_name_fix )\n {\n-#ifndef MN_NAME_PAT\n-  fputs( \"The target machine has no needed machine name fixes\\n\", stderr );\n-#else\n   regmatch_t match[2];\n   const char *line, *base, *limit, *p, *q;\n   regex_t *label_re, *name_re;\n@@ -499,7 +496,11 @@ FIX_PROC_HEAD( machine_name_fix )\n   IGNORE_ARG(filname);\n   IGNORE_ARG(p_fixd);\n \n-  mn_get_regexps (&label_re, &name_re, \"machine_name_fix\");\n+  if (!mn_get_regexps (&label_re, &name_re, \"machine_name_fix\"))\n+    {\n+      fputs( \"The target machine has no needed machine name fixes\\n\", stderr );\n+      goto done;\n+    }\n \n   scratch[0] = '_';\n   scratch[1] = '_';\n@@ -577,7 +578,6 @@ FIX_PROC_HEAD( machine_name_fix )\n         }\n     }\n  done:\n-#endif\n   fputs (text, stdout);\n }\n "}, {"sha": "85ec95abe564bf16210bd04f5304ae6a7d39c518", "filename": "gcc/fixinc/fixincl.sh", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixincl.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixincl.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.sh?ref=89b8abbf7d1d832e0597def81e243e47fc662cee", "patch": "@@ -131,6 +131,36 @@ else\n   LINKS=false\n fi\n \n+# # # # # # # # # # # # # # # # # # # # #\n+#\n+#  Extract from the gcc -dM and from the specs file all the predefined\n+#  macros that are not in the C89 reserved namespace (the reserved\n+#  namespace is all  identifiers beginnning with two underscores or one\n+#  underscore followed by a capital letter).  The specs file is in\n+#  ${ORIGDIR}, as is cc1.  A regular expression to find any of those\n+#  macros in a header file is written to MN_NAME_PAT.\n+#\n+#  Note dependency on ASCII. \\012 = newline.\n+#  tr ' ' '\\n' is, alas, not portable.\n+\n+echo | ${ORIGDIR}/cc1 -quiet -dM -E - |\n+  sed -n 's/^#define \\([a-zA-Z][a-zA-Z0-9_]*\\).*/\\1/p' > mn.T\n+tr -s '\\040\\011' '\\012\\012' < ${ORIGDIR}/specs |\n+  sed -n 's/^.*-D\\([a-zA-Z_][a-zA-Z0-9_]*\\).*/\\1/p' >> mn.T\n+\n+if sort -u mn.T | grep -v '^_[_A-Z]' > mn.U\n+then\n+  if test $VERBOSE -gt 0\n+  then echo \"Forbidden identifiers: `tr '\\012' ' ' <mn.U`\" ; fi\n+  sed 's/^/\\\\\\\\</; s/$/\\\\\\\\>/; $!s/$/|/' < mn.U | tr -d '\\012' > mn.V\n+  MN_NAME_PAT=\"`cat mn.V`\"\n+  export MN_NAME_PAT\n+else\n+  if test $VERBOSE -gt 0\n+  then echo \"No forbidden identifiers defined by this target\" ; fi\n+fi\n+rm -f mn.[TUV]\n+\n # # # # # # # # # # # # # # # # # # # # #\n #\n #  Search each input directory for broken header files."}, {"sha": "e0fa94a14badec5816168abba210bbfa96a28821", "filename": "gcc/fixinc/fixlib.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.c?ref=89b8abbf7d1d832e0597def81e243e47fc662cee", "patch": "@@ -204,32 +204,30 @@ compile_re( tCC* pat, regex_t* re, int match, tCC* e1, tCC* e2 )\n \n /* * * * * * * * * * * * *\n \n-   Helper routine and data for the machine_name test and fix.\n-   machname.h is created by black magic in the Makefile.  */\n-\n-#ifdef MN_NAME_PAT\n+   Helper routine and data for the machine_name test and fix.  */\n \n tSCC mn_label_pat[] = \"^[ \\t]*#[ \\t]*(if|ifdef|ifndef)[ \\t]+\";\n static regex_t mn_label_re;\n-\n-tSCC mn_name_pat[] = MN_NAME_PAT;\n static regex_t mn_name_re;\n \n static int mn_compiled = 0;\n \n-void\n+t_bool\n mn_get_regexps(regex_t** label_re, regex_t** name_re, tCC* who )\n {\n+  if (! pz_mn_name_pat)\n+    return BOOL_FALSE;\n+\n   if (! mn_compiled)\n     {\n       compile_re (mn_label_pat, &mn_label_re, 1, \"label pattern\", who);\n-      compile_re (mn_name_pat, &mn_name_re, 1, \"name pattern\", who);\n+      compile_re (pz_mn_name_pat, &mn_name_re, 1, \"name pattern\", who);\n       mn_compiled++;\n     }\n   *label_re = &mn_label_re;\n   *name_re = &mn_name_re;\n+  return BOOL_TRUE;\n }\n-#endif\n \n \n #ifdef SEPARATE_FIX_PROC"}, {"sha": "1cce4a5b516d5e820a33decc515a3287a2b04b32", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=89b8abbf7d1d832e0597def81e243e47fc662cee", "patch": "@@ -33,7 +33,6 @@ Boston, MA 02111-1307, USA.  */\n #include <signal.h>\n \n #include \"xregex.h\"\n-#include \"machname.h\"\n #include \"libiberty.h\"\n \n #ifndef STDIN_FILENO\n@@ -117,12 +116,19 @@ typedef int apply_fix_p_t;  /* Apply Fix Predicate Type */\n   _ENV_( pz_dest_dir,  BOOL_TRUE, \"DESTDIR\",         \\\n          \"output directory\" )                        \\\n                                                      \\\n+  _ENV_( pz_mn_name_pat, BOOL_FALSE, \"MN_NAME_PAT\",  \\\n+         \"regex matching forbidden identifiers\" )    \\\n+                                                     \\\n   _ENV_( pz_verbose,  BOOL_FALSE, \"VERBOSE\",         \\\n          \"amount of user entertainment\" )            \\\n                                                      \\\n   _ENV_( pz_find_base, BOOL_TRUE, \"FIND_BASE\",       \\\n          \"leader to trim from file names\" )\n \n+#define _ENV_(v,m,n,t)   extern tCC* v;\n+ENV_TABLE\n+#undef _ENV_\n+\n /*  Test Descriptor\n \n     Each fix may have associated tests that determine\n@@ -219,7 +225,5 @@ apply_fix_p_t\n char*  make_raw_shell_str ( char* pz_d, tCC* pz_s, size_t smax );\n #endif\n \n-#ifdef MN_NAME_PAT\n-void   mn_get_regexps ( regex_t** label_re, regex_t** name_re, tCC *who );\n-#endif\n+t_bool mn_get_regexps ( regex_t** label_re, regex_t** name_re, tCC *who );\n #endif /* ! GCC_FIXLIB_H */"}, {"sha": "44ef97253f524778634bf5bdb7ceb418c8435aad", "filename": "gcc/fixinc/fixtests.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixtests.c?ref=89b8abbf7d1d832e0597def81e243e47fc662cee", "patch": "@@ -68,15 +68,13 @@ static apply_fix_p_t test ( tCC* fname ATTRIBUTE_UNUSED, \\\n \n TEST_FOR_FIX_PROC_HEAD( machine_name_test )\n {\n-#ifndef MN_NAME_PAT\n-  return SKIP_FIX;\n-#else\n   regex_t *label_re, *name_re;\n   regmatch_t match[2];\n   tCC *base, *limit;\n   IGNORE_ARG(fname);\n \n-  mn_get_regexps(&label_re, &name_re, \"machine_name_test\");\n+  if (!mn_get_regexps (&label_re, &name_re, \"machine_name_test\"))\n+    return SKIP_FIX;\n \n   for (base = text;\n        xregexec (label_re, base, 2, match, 0) == 0;\n@@ -114,7 +112,6 @@ TEST_FOR_FIX_PROC_HEAD( machine_name_test )\n       /* Otherwise, keep looking... */\n     }\n   return SKIP_FIX;\n-#endif\n }\n \n "}, {"sha": "b151153dbf6b36c8cc4c6c101aba8877922c1ba2", "filename": "gcc/fixinc/genfixes", "status": "modified", "additions": 11, "deletions": 52, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Fgenfixes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b8abbf7d1d832e0597def81e243e47fc662cee/gcc%2Ffixinc%2Fgenfixes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgenfixes?ref=89b8abbf7d1d832e0597def81e243e47fc662cee", "patch": "@@ -45,11 +45,8 @@ do\n     ;;\n \n   '-?' )\n-    echo \"USAGE: gendefs [ -D<def-name> ... ] [ <output-name> ]\"\n+    echo \"USAGE: gendefs [ -D<def-name> ... ]\"\n     echo \"WHERE: '<def-name>' specifies a #define test name from inclhack.def\"\n-    echo \"  and  '<output-name>' is one of:\"\n-    echo \"       fixincl.x machine.h\"\n-    echo \"The default is to produce the first three outputs.\"\n     exit 0\n     ;;\n \n@@ -66,53 +63,15 @@ fi\n AG=\"autogen $AG\"\n set -e\n \n-case \"$1\" in\n-fixincl.x | */fixincl.x )\n-  if [ -z \"`${AG} -v | fgrep 'Ver. 5.'`\" ]\n-  then\n-    echo \"AutoGen appears to be out of date or not correctly installed.\"\n-    echo \"Please download and install:\"\n-    echo \"   ftp://gcc.gnu.org/pub/gcc/infrastructure/autogen.tar.gz\"\n-    touch fixincl.x\n-  else\n-    echo AutoGen-ing fixincl.x\n-    $AG inclhack.def\n-  fi\n-  ;;\n-\n-machname.h | */machname.h )\n-  # This script extracts from the specs file all the predefined macros\n-  # that are not in the C89 reserved namespace (the reserved namespace\n-  # is all identifiers beginnning with two underscores or one underscore\n-  # followed by a capital letter).  The specs file is on standard input.\n-  # A #define for a regular expression to find any of those macros in a\n-  # header file is written to standard output.\n-\n-  # Note dependency on ASCII. \\040 = space, \\011 = tab, \\012 = newline.\n-  # tr ' ' '\\n' is, alas, not portable.\n-\n-  tr -s '\\040\\011' '\\012\\012' < ../specs |\n-    sed -n 's/^.*-D\\([a-zA-Z_][a-zA-Z0-9_]*\\).*$/\\1/p' |\n-    sort -u > mn.T\n-\n-  if grep -v '^_[_A-Z]' mn.T > mn.U\n-  then\n-    echo \"Forbidden identifiers: `tr '\\012' ' ' <mn.U`\" >&2\n-    sed 's/^/\\\\\\\\</; s/$/\\\\\\\\>/' <mn.U | tr '\\012' '|' > mn.V\n-    echo '' >>mn.V\n-    sed 's/^/#define MN_NAME_PAT \"/; s/|$/\"/' < mn.V > machname.T\n-  else\n-    echo \"No forbidden identifiers defined by this target\" >&2\n-    echo '#undef MN_NAME_PAT' > machname.T\n-  fi\n-  rm -f mn.[TUV]\n-  mv -f machname.T machname.h\n-  ;;\n-\n-* )\n-  echo genfixes cannot create $1\n-  exit 1\n-  ;;\n-esac\n+if [ -z \"`${AG} -v | fgrep 'Ver. 5.'`\" ]\n+then\n+  echo \"AutoGen appears to be out of date or not correctly installed.\"\n+  echo \"Please download and install:\"\n+  echo \"   ftp://gcc.gnu.org/pub/gcc/infrastructure/autogen.tar.gz\"\n+  touch fixincl.x\n+else\n+  echo AutoGen-ing fixincl.x\n+  $AG inclhack.def\n+fi\n \n exit 0"}]}