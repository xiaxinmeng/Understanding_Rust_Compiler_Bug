{"sha": "cc870036bd76fccec8aeb19a3f8c4fda081e5c3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4NzAwMzZiZDc2ZmNjZWM4YWViMTlhM2Y4YzRmZGEwODFlNWMzZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-08-29T08:58:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-08-29T08:58:52Z"}, "message": "tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Check that loop is not cold.\n\n\n\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Check that loop\n\tis not cold.\n\t* predict.c (optimize_bb_for_size_p, optimize_bb_for_speed_p):\n\tConstify arguments.\n\t(optimize_loop_for_size_p, optimize_loop_for_speed_p): New functions.\n\t* basic-block.h (optimize_bb_for_size_p, optimize_bb_for_speed_p):\n\tConstify.\n\t(optimize_loop_for_size_p, optimize_loop_for_speed_p): Declare.\n\nFrom-SVN: r139756", "tree": {"sha": "92d8dcba01165e9199c912b448b73d517d093087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92d8dcba01165e9199c912b448b73d517d093087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/comments", "author": null, "committer": null, "parents": [{"sha": "7299cb994088a68a4fec5e479a03fc8a71e50646", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7299cb994088a68a4fec5e479a03fc8a71e50646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7299cb994088a68a4fec5e479a03fc8a71e50646"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "a859a36687411843ed119f25944157575f0cfbe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc870036bd76fccec8aeb19a3f8c4fda081e5c3d", "patch": "@@ -1,3 +1,14 @@\n+2008-08-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-loop-ch.c (should_duplicate_loop_header_p): Check that loop\n+\tis not cold.\n+\t* predict.c (optimize_bb_for_size_p, optimize_bb_for_speed_p):\n+\tConstify arguments.\n+\t(optimize_loop_for_size_p, optimize_loop_for_speed_p): New functions.\n+\t* basic-block.h (optimize_bb_for_size_p, optimize_bb_for_speed_p):\n+\tConstify.\n+\t(optimize_loop_for_size_p, optimize_loop_for_speed_p): Declare.\n+\n 2008-08-29  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-pass.h (pass_strip_predict_hints): Declare."}, {"sha": "50d3e628aeaac0b9352147ea4b2c0d75bbb5ea2c", "filename": "gcc/basic-block.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=cc870036bd76fccec8aeb19a3f8c4fda081e5c3d", "patch": "@@ -831,14 +831,16 @@ extern bool maybe_hot_bb_p (const_basic_block);\n extern bool maybe_hot_edge_p (edge);\n extern bool probably_cold_bb_p (const_basic_block);\n extern bool probably_never_executed_bb_p (const_basic_block);\n-extern bool optimize_bb_for_size_p (basic_block);\n-extern bool optimize_bb_for_speed_p (basic_block);\n+extern bool optimize_bb_for_size_p (const_basic_block);\n+extern bool optimize_bb_for_speed_p (const_basic_block);\n extern bool optimize_edge_for_size_p (edge);\n extern bool optimize_edge_for_speed_p (edge);\n extern bool optimize_insn_for_size_p (void);\n extern bool optimize_insn_for_speed_p (void);\n extern bool optimize_function_for_size_p (struct function *);\n extern bool optimize_function_for_speed_p (struct function *);\n+extern bool optimize_loop_for_size_p (struct loop *);\n+extern bool optimize_loop_for_speed_p (struct loop *);\n extern bool gimple_predicted_by_p (const_basic_block, enum br_predictor);\n extern bool rtl_predicted_by_p (const_basic_block, enum br_predictor);\n extern void gimple_predict_edge (edge, enum br_predictor, int);"}, {"sha": "4de95e2f66fae44406665f9ab5d6506bbb7c53f5", "filename": "gcc/predict.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=cc870036bd76fccec8aeb19a3f8c4fda081e5c3d", "patch": "@@ -200,15 +200,15 @@ optimize_function_for_speed_p (struct function *fun)\n /* Return TRUE when BB should be optimized for size.  */\n \n bool\n-optimize_bb_for_size_p (basic_block bb)\n+optimize_bb_for_size_p (const_basic_block bb)\n {\n   return optimize_function_for_size_p (cfun) || !maybe_hot_bb_p (bb);\n }\n \n /* Return TRUE when BB should be optimized for speed.  */\n \n bool\n-optimize_bb_for_speed_p (basic_block bb)\n+optimize_bb_for_speed_p (const_basic_block bb)\n {\n   return !optimize_bb_for_size_p (bb);\n }\n@@ -245,6 +245,22 @@ optimize_insn_for_speed_p (void)\n   return !optimize_insn_for_size_p ();\n }\n \n+/* Return TRUE when LOOP should be optimized for size.  */\n+\n+bool\n+optimize_loop_for_size_p (struct loop *loop)\n+{\n+  return optimize_bb_for_size_p (loop->header);\n+}\n+\n+/* Return TRUE when LOOP should be optimized for speed.  */\n+\n+bool\n+optimize_loop_for_speed_p (struct loop *loop)\n+{\n+  return optimize_bb_for_speed_p (loop->header);\n+}\n+\n /* Set RTL expansion for BB profile.  */\n \n void"}, {"sha": "33e85c839dcc5fa7ad0c548f024d207a701d44b9", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc870036bd76fccec8aeb19a3f8c4fda081e5c3d/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=cc870036bd76fccec8aeb19a3f8c4fda081e5c3d", "patch": "@@ -58,6 +58,13 @@ should_duplicate_loop_header_p (basic_block header, struct loop *loop,\n   if (header->aux)\n     return false;\n \n+  /* Loop header copying usually increases size of the code.  This used not to\n+     be true, since quite often it is possible to verify that the condition is\n+     satisfied in the first iteration and therefore to eliminate it.  Jump\n+     threading handles these cases now.  */\n+  if (optimize_loop_for_size_p (loop))\n+    return false;\n+\n   gcc_assert (EDGE_COUNT (header->succs) > 0);\n   if (single_succ_p (header))\n     return false;"}]}