{"sha": "3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IwZGQ0ZmVhMjNhNjk1ZGYxZmI5YTdlNWM3MDE3ZjlkMWYxZWE4NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-13T12:39:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-13T12:39:32Z"}, "message": "PR libstdc++/82522 overload map insert functions for rvalues (LWG 2354)\n\n\tPR libstdc++/82522\n\t* doc/xml/manual/intro.xml: Document LWG 2354 changes.\n\t* include/bits/stl_map.h (map::insert(value_type&&))\n\t(map::insert(const_iterator, value_type&&)): Add overload for rvalues.\n\t* include/bits/stl_multimap.h (multimap::insert(value_type&&))\n\t(multimap::insert(const_iterator, value_type&&)): Likewise.\n\t* include/bits/unordered_map.h (unordered_map::insert(value_type&&))\n\t(unordered_map::insert(const_iterator, value_type&&))\n\t(unordered_multimap::insert(value_type&&))\n\t(unordered_multimap::insert(const_iterator, value_type&&)): Likewise.\n\t* testsuite/23_containers/map/modifiers/insert/dr2354.cc: New test.\n\t* testsuite/23_containers/multimap/modifiers/insert/dr2354.cc: New\n\ttest.\n\t* testsuite/23_containers/unordered_map/insert/dr2354.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/insert/dr2354.cc: New\n\ttest.\n\nFrom-SVN: r253725", "tree": {"sha": "577f22b69c5c79b24129aaf4a95511b3e286e753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577f22b69c5c79b24129aaf4a95511b3e286e753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e85aa999ab87009fa02a5261754fbaa69206f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e85aa999ab87009fa02a5261754fbaa69206f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e85aa999ab87009fa02a5261754fbaa69206f2"}], "stats": {"total": 206, "additions": 205, "deletions": 1}, "files": [{"sha": "64196884160e66ca9b05a755513af5debf3f838b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -1,5 +1,22 @@\n 2017-10-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/82522\n+\t* doc/xml/manual/intro.xml: Document LWG 2354 changes.\n+\t* include/bits/stl_map.h (map::insert(value_type&&))\n+\t(map::insert(const_iterator, value_type&&)): Add overload for rvalues.\n+\t* include/bits/stl_multimap.h (multimap::insert(value_type&&))\n+\t(multimap::insert(const_iterator, value_type&&)): Likewise.\n+\t* include/bits/unordered_map.h (unordered_map::insert(value_type&&))\n+\t(unordered_map::insert(const_iterator, value_type&&))\n+\t(unordered_multimap::insert(value_type&&))\n+\t(unordered_multimap::insert(const_iterator, value_type&&)): Likewise.\n+\t* testsuite/23_containers/map/modifiers/insert/dr2354.cc: New test.\n+\t* testsuite/23_containers/multimap/modifiers/insert/dr2354.cc: New\n+\ttest.\n+\t* testsuite/23_containers/unordered_map/insert/dr2354.cc: New test.\n+\t* testsuite/23_containers/unordered_multimap/insert/dr2354.cc: New\n+\ttest.\n+\n \tPR libstdc++/82481\n \t* include/std/mutex (call_once): Suppress clang-tidy warnings about\n \tdangling references."}, {"sha": "3b243e57c8bb0e2e411a2bd0dfab25ba0c33209b", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -988,6 +988,12 @@ requirements of the license of GCC.\n     <listitem><para>Add deleted constructors.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr2354\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2354\">2332</link>:\n+       <emphasis>Unnecessary copying when inserting into maps with braced-init syntax</emphasis>\n+    </term>\n+    <listitem><para>Add overloads of <code>insert</code> taking <code>value_type&amp;&amp;</code> rvalues.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr2399\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2399\">2399</link>:\n \t<emphasis><code>shared_ptr</code>'s constructor from <code>unique_ptr</code> should be constrained</emphasis>\n     </term>"}, {"sha": "bad6020ef477f7ed361b5a3d385e68f0e49f7298", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -778,7 +778,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /**\n        *  @brief Attempts to insert a std::pair into the %map.\n-\n        *  @param __x Pair to be inserted (see std::make_pair for easy\n        *\t     creation of pairs).\n        *\n@@ -791,19 +790,27 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  first element (the key) is not already present in the %map.\n        *\n        *  Insertion requires logarithmic time.\n+       *  @{\n        */\n       std::pair<iterator, bool>\n       insert(const value_type& __x)\n       { return _M_t._M_insert_unique(__x); }\n \n #if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      std::pair<iterator, bool>\n+      insert(value_type&& __x)\n+      { return _M_t._M_insert_unique(std::move(__x)); }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n \tstd::pair<iterator, bool>\n \tinsert(_Pair&& __x)\n \t{ return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }\n #endif\n+      // @}\n \n #if __cplusplus >= 201103L\n       /**\n@@ -840,6 +847,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  for more on @a hinting.\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken).\n+       *  @{\n        */\n       iterator\n #if __cplusplus >= 201103L\n@@ -850,6 +858,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_t._M_insert_unique_(__position, __x); }\n \n #if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(const_iterator __position, value_type&& __x)\n+      { return _M_t._M_insert_unique_(__position, std::move(__x)); }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -858,6 +872,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t{ return _M_t._M_insert_unique_(__position,\n \t\t\t\t\tstd::forward<_Pair>(__x)); }\n #endif\n+      // @}\n \n       /**\n        *  @brief Template function that attempts to insert a range of elements."}, {"sha": "6f5cb7a47db7f6a58c9250f0bd48e965e6ff0293", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -526,19 +526,27 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  thus multiple pairs with the same key can be inserted.\n        *\n        *  Insertion requires logarithmic time.\n+       *  @{\n        */\n       iterator\n       insert(const value_type& __x)\n       { return _M_t._M_insert_equal(__x); }\n \n #if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(value_type&& __x)\n+      { return _M_t._M_insert_equal(std::move(__x)); }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n \titerator\n \tinsert(_Pair&& __x)\n \t{ return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }\n #endif\n+      // @}\n \n       /**\n        *  @brief Inserts a std::pair into the %multimap.\n@@ -559,6 +567,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.insert_hints\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken).\n+       * @{\n        */\n       iterator\n #if __cplusplus >= 201103L\n@@ -569,6 +578,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_t._M_insert_equal_(__position, __x); }\n \n #if __cplusplus >= 201103L\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(const_iterator __position, value_type&& __x)\n+      { return _M_t._M_insert_equal_(__position, std::move(__x)); }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -577,6 +592,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t{ return _M_t._M_insert_equal_(__position,\n \t\t\t\t       std::forward<_Pair>(__x)); }\n #endif\n+      // @}\n \n       /**\n        *  @brief A template function that attempts to insert a range"}, {"sha": "2fd4cd54962b3ce8387d47b7b121a6ff3afae61a", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -579,6 +579,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const value_type& __x)\n       { return _M_h.insert(__x); }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      std::pair<iterator, bool>\n+      insert(value_type&& __x)\n+      { return _M_h.insert(std::move(__x)); }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -613,6 +619,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const_iterator __hint, const value_type& __x)\n       { return _M_h.insert(__hint, __x); }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(const_iterator __hint, value_type&& __x)\n+      { return _M_h.insert(__hint, std::move(__x)); }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -1468,6 +1480,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const value_type& __x)\n       { return _M_h.insert(__x); }\n \n+      iterator\n+      insert(value_type&& __x)\n+      { return _M_h.insert(std::move(__x)); }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>\n@@ -1500,6 +1516,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert(const_iterator __hint, const value_type& __x)\n       { return _M_h.insert(__hint, __x); }\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 2354. Unnecessary copying when inserting into maps with braced-init\n+      iterator\n+      insert(const_iterator __hint, value_type&& __x)\n+      { return _M_h.insert(__hint, std::move(__x)); }\n+\n       template<typename _Pair, typename = typename\n \t       std::enable_if<std::is_constructible<value_type,\n \t\t\t\t\t\t    _Pair&&>::value>::type>"}, {"sha": "338d9fd3f1e784027fbf8a7e02a17add56c3a513", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/insert/dr2354.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2Fdr2354.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2Fdr2354.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2Fdr2354.cc?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <map>\n+\n+struct MoveOnly {\n+  MoveOnly(int) { }\n+  MoveOnly(MoveOnly&&) = default;\n+};\n+\n+void\n+test01()\n+{\n+  std::map<int, MoveOnly> m;\n+  m.insert({1, 2});  // PR libstdc++/82522  - LWG 2354\n+}"}, {"sha": "ca743ec4ce9990f9ed2f0ebfdee604e157d5484f", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/insert/dr2354.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2Fdr2354.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2Fdr2354.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2Fdr2354.cc?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <map>\n+\n+struct MoveOnly {\n+  MoveOnly(int) { }\n+  MoveOnly(MoveOnly&&) = default;\n+};\n+\n+void\n+test01()\n+{\n+  std::multimap<int, MoveOnly> m;\n+  m.insert({1, 2});  // PR libstdc++/82522  - LWG 2354\n+}"}, {"sha": "fe5356594c3ab9fadf2f127023aebae066d11e83", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/insert/dr2354.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2Fdr2354.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2Fdr2354.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Finsert%2Fdr2354.cc?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <unordered_map>\n+\n+struct MoveOnly {\n+  MoveOnly(int) { }\n+  MoveOnly(MoveOnly&&) = default;\n+};\n+\n+void\n+test01()\n+{\n+  std::unordered_map<int, MoveOnly> m;\n+  m.insert({1, 2});  // PR libstdc++/82522  - LWG 2354\n+}"}, {"sha": "5a27242c4e0d1318b1eb806615bfb82e6260491e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/insert/dr2354.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2Fdr2354.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2Fdr2354.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2Fdr2354.cc?ref=3b0dd4fea23a695df1fb9a7e5c7017f9d1f1ea84", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <unordered_map>\n+\n+struct MoveOnly {\n+  MoveOnly(int) { }\n+  MoveOnly(MoveOnly&&) = default;\n+};\n+\n+void\n+test01()\n+{\n+  std::unordered_multimap<int, MoveOnly> m;\n+  m.insert({1, 2});  // PR libstdc++/82522  - LWG 2354\n+}"}]}