{"sha": "94df301fa033641561145d44ed48cf4c85d43a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRkZjMwMWZhMDMzNjQxNTYxMTQ1ZDQ0ZWQ0OGNmNGM4NWQ0M2EyYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-20T18:01:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-20T18:01:22Z"}, "message": "re PR c++/24163 (dependent Base class scope examined during unqualified name lookup in template)\n\n\tPR c++/24163\n\tPR c++/29131\ngcc/cp/\n\t* pt.c (tsubst_copy_and_build) [CALL_EXPR]: Avoid repeating\n\tunqualified lookup.\n\t* semantics.c (perform_koenig_lookup): Add complain parm.\n\t* cp-tree.h: Adjust.\n\t* parser.c (cp_parser_postfix_expression): Adjust.\n\t(cp_parser_perform_range_for_lookup): Adjust.\nlibstdc++-v3/\n\t* include/ext/pb_ds/assoc_container.hpp: Explicitly qualify calls to\n\tfunctions from dependent bases.\n\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rb_tree_map_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/tree_policy/\n\torder_statistics_imp.hpp: Likewise.\n\t* include/ext/pb_ds/detail/trie_policy/\n\tprefix_search_node_update_imp.hpp: Likewise.\n\t* include/ext/rc_string_base.h: Likewise.\n\t* include/ext/rope: Likewise.\n\t* include/ext/ropeimpl.h: Likewise.\n\t* testsuite/util/exception/safety.h: Likewise.\n\t* testsuite/util/native_type/native_priority_queue.hpp: Likewise.\n\t* testsuite/util/testsuite_io.h: Likewise.\n\t* include/std/functional: Declare mem_fn earlier.\n\t* include/tr1/functional: Likewise.\n\t* include/tr1/exp_integral.tcc: Declare __expint_E1 earlier.\n\nFrom-SVN: r173965", "tree": {"sha": "a133483f2142f1c02de48fd4af4865636ad9ed75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a133483f2142f1c02de48fd4af4865636ad9ed75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94df301fa033641561145d44ed48cf4c85d43a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94df301fa033641561145d44ed48cf4c85d43a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94df301fa033641561145d44ed48cf4c85d43a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94df301fa033641561145d44ed48cf4c85d43a2c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e04dcd56f7d94288467234f065fca6006761cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e04dcd56f7d94288467234f065fca6006761cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e04dcd56f7d94288467234f065fca6006761cfe"}], "stats": {"total": 315, "additions": 238, "deletions": 77}, "files": [{"sha": "5d93472bba3bec330bce35b44d9e65b3c667a574", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -1,3 +1,14 @@\n+2011-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/24163\n+\tPR c++/29131\n+\t* pt.c (tsubst_copy_and_build) [CALL_EXPR]: Avoid repeating\n+\tunqualified lookup.\n+\t* semantics.c (perform_koenig_lookup): Add complain parm.\n+\t* cp-tree.h: Adjust.\n+\t* parser.c (cp_parser_postfix_expression): Adjust.\n+\t(cp_parser_perform_range_for_lookup): Adjust.\n+\n 2011-05-20  Jason Merrill  <jason@redhat.com>\n \n \t* semantics.c (finish_call_expr): SET_EXPR_LOCATION."}, {"sha": "ada01fbd129ceed3112095af809c79497e86e112", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -5365,7 +5365,8 @@ extern tree finish_stmt_expr_expr\t\t(tree, tree);\n extern tree finish_stmt_expr\t\t\t(tree, bool);\n extern tree stmt_expr_value_expr\t\t(tree);\n bool empty_expr_stmt_p\t\t\t\t(tree);\n-extern tree perform_koenig_lookup\t\t(tree, VEC(tree,gc) *, bool);\n+extern tree perform_koenig_lookup\t\t(tree, VEC(tree,gc) *, bool,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree finish_call_expr\t\t\t(tree, VEC(tree,gc) **, bool,\n \t\t\t\t\t\t bool, tsubst_flags_t);\n extern tree finish_increment_expr\t\t(tree, enum tree_code);"}, {"sha": "2b452601e5f216f9d58f59d088a6690a15000858", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -5019,7 +5019,8 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\tif (!any_type_dependent_arguments_p (args))\n \t\t\t  postfix_expression\n \t\t\t    = perform_koenig_lookup (postfix_expression, args,\n-\t\t\t\t\t\t     /*include_std=*/false);\n+\t\t\t\t\t\t     /*include_std=*/false,\n+\t\t\t\t\t\t     tf_warning_or_error);\n \t\t      }\n \t\t    else\n \t\t      postfix_expression\n@@ -5044,7 +5045,8 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t\tif (!any_type_dependent_arguments_p (args))\n \t\t\t  postfix_expression\n \t\t\t    = perform_koenig_lookup (postfix_expression, args,\n-\t\t\t\t\t\t     /*include_std=*/false);\n+\t\t\t\t\t\t     /*include_std=*/false,\n+\t\t\t\t\t\t     tf_warning_or_error);\n \t\t      }\n \t\t  }\n \t      }\n@@ -8741,11 +8743,13 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n \t  VEC_safe_push (tree, gc, vec, range);\n \n \t  member_begin = perform_koenig_lookup (id_begin, vec,\n-\t\t\t\t\t\t/*include_std=*/true);\n+\t\t\t\t\t\t/*include_std=*/true,\n+\t\t\t\t\t\ttf_warning_or_error);\n \t  *begin = finish_call_expr (member_begin, &vec, false, true,\n \t\t\t\t     tf_warning_or_error);\n \t  member_end = perform_koenig_lookup (id_end, vec,\n-\t\t\t\t\t      /*include_std=*/true);\n+\t\t\t\t\t      /*include_std=*/true,\n+\t\t\t\t\t      tf_warning_or_error);\n \t  *end = finish_call_expr (member_end, &vec, false, true,\n \t\t\t\t   tf_warning_or_error);\n "}, {"sha": "d72596f55255bb80a95a4c77f1b519448e9bd042", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -12894,6 +12894,20 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t\t    /*done=*/false,\n \t\t\t\t\t    /*address_p=*/false);\n \t  }\n+\telse if (koenig_p && TREE_CODE (function) == IDENTIFIER_NODE)\n+\t  {\n+\t    /* Do nothing; calling tsubst_copy_and_build on an identifier\n+\t       would incorrectly perform unqualified lookup again.\n+\n+\t       Note that we can also have an IDENTIFIER_NODE if the earlier\n+\t       unqualified lookup found a member function; in that case\n+\t       koenig_p will be false and we do want to do the lookup\n+\t       again to find the instantiated member function.\n+\n+\t       FIXME but doing that causes c++/15272, so we need to stop\n+\t       using IDENTIFIER_NODE in that situation.  */\n+\t    qualified_p = false;\n+\t  }\n \telse\n \t  {\n \t    if (TREE_CODE (function) == COMPONENT_REF)\n@@ -12965,14 +12979,59 @@ tsubst_copy_and_build (tree t,\n \t       into a non-dependent call.  */\n \t    && type_dependent_expression_p_push (t)\n \t    && !any_type_dependent_arguments_p (call_args))\n-\t  function = perform_koenig_lookup (function, call_args, false);\n+\t  function = perform_koenig_lookup (function, call_args, false,\n+\t\t\t\t\t    tf_none);\n \n \tif (TREE_CODE (function) == IDENTIFIER_NODE\n-\t    && !processing_template_decl)\n+\t    && !any_type_dependent_arguments_p (call_args))\n \t  {\n-\t    unqualified_name_lookup_error (function);\n-\t    release_tree_vector (call_args);\n-\t    return error_mark_node;\n+\t    if (koenig_p && (complain & tf_warning_or_error))\n+\t      {\n+\t\t/* For backwards compatibility and good diagnostics, try\n+\t\t   the unqualified lookup again if we aren't in SFINAE\n+\t\t   context.  */\n+\t\ttree unq = (tsubst_copy_and_build\n+\t\t\t    (function, args, complain, in_decl, true,\n+\t\t\t     integral_constant_expression_p));\n+\t\tif (unq != function)\n+\t\t  {\n+\t\t    tree fn = unq;\n+\t\t    if (TREE_CODE (fn) == COMPONENT_REF)\n+\t\t      fn = TREE_OPERAND (fn, 1);\n+\t\t    if (is_overloaded_fn (fn))\n+\t\t      fn = get_first_fn (fn);\n+\t\t    permerror (EXPR_LOC_OR_HERE (t),\n+\t\t\t       \"%qD was not declared in this scope, \"\n+\t\t\t       \"and no declarations were found by \"\n+\t\t\t       \"argument-dependent lookup at the point \"\n+\t\t\t       \"of instantiation\", function);\n+\t\t    if (DECL_CLASS_SCOPE_P (fn))\n+\t\t      {\n+\t\t\tinform (EXPR_LOC_OR_HERE (t),\n+\t\t\t\t\"declarations in dependent base %qT are \"\n+\t\t\t\t\"not found by unqualified lookup\",\n+\t\t\t\tDECL_CLASS_CONTEXT (fn));\n+\t\t\tif (current_class_ptr)\n+\t\t\t  inform (EXPR_LOC_OR_HERE (t),\n+\t\t\t\t  \"use %<this->%D%> instead\", function);\n+\t\t\telse\n+\t\t\t  inform (EXPR_LOC_OR_HERE (t),\n+\t\t\t\t  \"use %<%T::%D%> instead\",\n+\t\t\t\t  TYPE_IDENTIFIER (current_class_type),\n+\t\t\t\t  function);\n+\t\t      }\n+\t\t    else\n+\t\t      inform (0, \"%q+D declared here, later in the \"\n+\t\t\t\t\"translation unit\", fn);\n+\t\t    function = unq;\n+\t\t  }\n+\t      }\n+\t    if (TREE_CODE (function) == IDENTIFIER_NODE)\n+\t      {\n+\t\tunqualified_name_lookup_error (function);\n+\t\trelease_tree_vector (call_args);\n+\t\treturn error_mark_node;\n+\t      }\n \t  }\n \n \t/* Remember that there was a reference to this entity.  */"}, {"sha": "a7ca50d15e29e62e47ff963fbe6ed6fc2cca9180", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -1953,7 +1953,8 @@ empty_expr_stmt_p (tree expr_stmt)\n    Returns the functions to be considered by overload resolution.  */\n \n tree\n-perform_koenig_lookup (tree fn, VEC(tree,gc) *args, bool include_std)\n+perform_koenig_lookup (tree fn, VEC(tree,gc) *args, bool include_std,\n+\t\t       tsubst_flags_t complain)\n {\n   tree identifier = NULL_TREE;\n   tree functions = NULL_TREE;\n@@ -1991,8 +1992,13 @@ perform_koenig_lookup (tree fn, VEC(tree,gc) *args, bool include_std)\n     {\n       fn = lookup_arg_dependent (identifier, functions, args, include_std);\n       if (!fn)\n-\t/* The unqualified name could not be resolved.  */\n-\tfn = unqualified_fn_lookup_error (identifier);\n+\t{\n+\t  /* The unqualified name could not be resolved.  */\n+\t  if (complain)\n+\t    fn = unqualified_fn_lookup_error (identifier);\n+\t  else\n+\t    fn = identifier;\n+\t}\n     }\n \n   if (fn && template_id)"}, {"sha": "ba56b6d7745b538633430c0fe5a67d8ac5e2157e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -1,3 +1,14 @@\n+2011-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/template/koenig9.C: New.\n+\t* g++.dg/opt/pr47615.C: Fix.\n+\t* g++.dg/overload/defarg1.C: Fix.\n+\t* g++.dg/tc1/dr213.C: Remove xfail.\n+\t* g++.dg/torture/pr34850.C: Fix.\n+\t* g++.dg/torture/pr39362.C: Fix.\n+\t* g++.old-deja/g++.brendan/crash56.C: Fix.\n+\t* g++.old-deja/g++.pt/memtemp47.C: Fix.\n+\n 2011-05-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49079"}, {"sha": "f8dbcf7e824ad17d3e23bc53abcdf304b0f62de8", "filename": "gcc/testsuite/g++.dg/opt/pr47615.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47615.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47615.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr47615.C?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -360,7 +360,7 @@ template < typename Const_Node_Iterator, typename Node_Iterator, typename, typen\n {\n {\n {\n-\t    rotate_right (p_nd);\n+\t    this->rotate_right (p_nd);\n \t  }\n \t}\n       }"}, {"sha": "5d34a457dc28f11dabfa9bb23d23c0d614560d92", "filename": "gcc/testsuite/g++.dg/overload/defarg1.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg1.C?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -3,7 +3,9 @@\n template<typename T>\n int foo (T t, int = foo(T()));\n \n+struct A { };\n+\n int main()\n {\n-  foo(0);\t\t\t// { dg-error \"default argument\" }\n+  foo(A());\t\t\t// { dg-error \"default argument\" }\n }"}, {"sha": "b616ff9e11a99b62cbac2427fbb611250b483442", "filename": "gcc/testsuite/g++.dg/tc1/dr213.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr213.C?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -8,7 +8,7 @@\n template <class T> struct A : T {\n   void h(T t) {\n     f(t);\n-    g(t);     // { dg-error \"\" \"\" { xfail *-*-* } }\n+    g(t);     // { dg-message \"\" }\n   }\n };\n \n@@ -21,7 +21,7 @@ void f(B) {}\n \n int main()\n {\n-  A<B> ab;   // { dg-error \"\" \"\" { xfail *-*-* } }\n+  A<B> ab;\n   B b;\n-  ab.h(b);\n+  ab.h(b);   // { dg-message \"instantiated\" }\n }"}, {"sha": "ae74a47e50ab5ccb09ed1fbc105ad35c6c641729", "filename": "gcc/testsuite/g++.dg/template/koenig9.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fkoenig9.C?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/29131\n+// int has no associated namespaces, so arg-dep lookup doesn't find g(int).\n+\n+template <class T> int f() { return g(T()); } // { dg-error \"argument-dependent\" }\n+int g(int);\t\t\t\t      // { dg-message \"declared here\" }\n+int i = f<int>();\n+\n+// PR c++/24163\n+// Unqualified lookup doesn't find names from dependent bases.\n+\n+template <class T>\n+struct A\n+{\n+  static void h(T);\n+};\n+\n+template <class T> struct B: A<T>\n+{\n+  void f() { h(T()); }\t\t// { dg-error \"argument-dependent\" }\n+  static void g() { h(T()); }\t// { dg-error \"argument-dependent\" }\n+};\n+\n+int main()\n+{\n+  B<int> b;\n+  b.f();\n+  b.g();\n+}\n+\n+// { dg-message \"dependent base .A.int\" \"\" { target *-*-* } 19 }\n+// { dg-message \"this->h\" \"\" { target *-*-* } 19 }\n+// { dg-message \"dependent base .A.int\" \"\" { target *-*-* } 20 }\n+// { dg-message \"B::h\" \"\" { target *-*-* } 20 }"}, {"sha": "5e30f1dab6587fb97ca486a6a1709f9d6ed99b39", "filename": "gcc/testsuite/g++.dg/torture/pr34850.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -48,7 +48,7 @@ template<typename T> void MemoryRegion<T>::create(u32bit n)    {\n template<typename T> class SecureVector : public MemoryRegion<T>    {\n public:\n     SecureVector<T>& operator=(const MemoryRegion<T>& in)          {\n-\tif(this != &in) set(in);\n+\tif(this != &in) this->set(in);\n     }\n };\n class OctetString    {"}, {"sha": "e7b0774d96f17f4acb22e6dc237f617c530e6c1c", "filename": "gcc/testsuite/g++.dg/torture/pr39362.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39362.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39362.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39362.C?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -55,7 +55,7 @@ template <typename T, int cap> class I;\n template <typename T> struct I <T, 0> : H <T>\n {\n   I (int capacity) { allocateBuffer (capacity); }\n-  ~I () { deallocateBuffer (buffer ()); }\n+  ~I () { this->deallocateBuffer (buffer ()); }\n   using H <T>::allocateBuffer;\n   H <T>::buffer;\n };"}, {"sha": "a22615dce6291a8da35bf6f564a86cfaf971ab07", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash56.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash56.C?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -253,7 +253,7 @@ void\n SetLD<T>::add(const T& item)\n {\n     if ( ! contains(item) )\n-\tappend(item);\n+      this->append(item);\n }\n template<class T>\n void"}, {"sha": "242a299c164e43728cff290444216c9ef140dafe", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp47.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp47.C?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -18,7 +18,7 @@ struct T : public S<X>\n {\n   template <class U>\n   void f(U u)\n-  { printf (\"In T::f(U)\\n\"); g(u); }\n+  { printf (\"In T::f(U)\\n\"); this->g(u); }\n };\n \n int main()"}, {"sha": "68edbdba5c482c43987d6633b9bf9e7769bf6903", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -1,3 +1,29 @@\n+2011-05-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* include/ext/pb_ds/assoc_container.hpp: Explicitly qualify calls to\n+\tfunctions from dependent bases.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/tree_policy/\n+\torder_statistics_imp.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/trie_policy/\n+\tprefix_search_node_update_imp.hpp: Likewise.\n+\t* include/ext/rc_string_base.h: Likewise.\n+\t* include/ext/rope: Likewise.\n+\t* include/ext/ropeimpl.h: Likewise.\n+\t* testsuite/util/exception/safety.h: Likewise.\n+\t* testsuite/util/native_type/native_priority_queue.hpp: Likewise.\n+\t* testsuite/util/testsuite_io.h: Likewise.\n+\t* include/std/functional: Declare mem_fn earlier.\n+\t* include/tr1/functional: Likewise.\n+\t* include/tr1/exp_integral.tcc: Declare __expint_E1 earlier.\n+\n 2011-05-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple (tuple_element<__i, const _Tp>,"}, {"sha": "12a3fc501c91c774b76a1ee84c2fdfecd0ded22b", "filename": "libstdc++-v3/include/ext/pb_ds/assoc_container.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fassoc_container.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -234,7 +234,7 @@ namespace __gnu_pbds\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h)\n     : base_type(h)\n-    { copy_from_range(first, last); }\n+    { this->copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n     // some policy objects The value_types between first_it and\n@@ -245,7 +245,7 @@ namespace __gnu_pbds\n     template<typename It>\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e)\n     : base_type(h, e)\n-    { copy_from_range(first, last); }\n+    { this->copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n     // some policy objects The value_types between first_it and\n@@ -258,7 +258,7 @@ namespace __gnu_pbds\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e,\n \t\t  const comb_hash_fn& ch)\n     : base_type(h, e, ch)\n-    { copy_from_range(first, last); }\n+    { this->copy_from_range(first, last); }\n \n     // Constructor taking __iterators to a range of value_types and\n     // some policy objects The value_types between first_it and\n@@ -272,7 +272,7 @@ namespace __gnu_pbds\n     cc_hash_table(It first, It last, const hash_fn& h, const eq_fn& e, \n \t\t  const comb_hash_fn& ch, const resize_policy& rp)\n     : base_type(h, e, ch, rp)\n-    { copy_from_range(first, last); }\n+    { this->copy_from_range(first, last); }\n \n     cc_hash_table(const cc_hash_table& other)\n     : base_type((const base_type&)other)"}, {"sha": "0ef925f079e9c4f0b30847315b85502e35af1fc5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -43,7 +43,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n-  point_iterator it = find(r_key);\n+  point_iterator it = this->find(r_key);\n   if (it == base_type::end())\n     return false;\n   erase(it);\n@@ -121,7 +121,7 @@ void\n PB_DS_CLASS_C_DEC::\n remove_node(node_pointer p_z)\n {\n-  update_min_max_for_erased_node(p_z);\n+  this->update_min_max_for_erased_node(p_z);\n   node_pointer p_y = p_z;\n   node_pointer p_x = 0;\n   node_pointer p_new_x_parent = 0;\n@@ -185,7 +185,7 @@ remove_node(node_pointer p_z)\n       p_y = p_z;\n     }\n \n-  update_to_top(p_new_x_parent, (node_update* )this);\n+  this->update_to_top(p_new_x_parent, (node_update* )this);\n \n   if (p_y->m_red)\n     return;\n@@ -238,7 +238,7 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t      p_w->m_p_right->m_red = false;\n \n \t    base_type::rotate_left(p_new_x_parent);\n-\t    update_to_top(p_new_x_parent, (node_update* )this);\n+\t    this->update_to_top(p_new_x_parent, (node_update* )this);\n \t    break;\n \t  }\n       }\n@@ -279,7 +279,7 @@ remove_fixup(node_pointer p_x, node_pointer p_new_x_parent)\n \t      p_w->m_p_left->m_red = false;\n \n \t    base_type::rotate_right(p_new_x_parent);\n-\t    update_to_top(p_new_x_parent, (node_update* )this);\n+\t    this->update_to_top(p_new_x_parent, (node_update* )this);\n \t    break;\n \t  }\n       }"}, {"sha": "198caca88680d38ee6da5e7b593a1658fcebbb4e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -246,7 +246,7 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n \n   PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n   PB_DS_STRUCT_ONLY_ASSERT_VALID(other)\n-  node_pointer p_nd = upper_bound(r_key).m_p_nd;\n+  node_pointer p_nd = this->upper_bound(r_key).m_p_nd;\n   do\n     {\n       node_pointer p_next_nd = p_nd->m_p_parent;\n@@ -292,7 +292,7 @@ split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other)\n       if (p_l != 0)\n \tp_l->m_p_parent = p_parent;\n \n-      update_to_top(p_parent, (node_update* )this);\n+      this->update_to_top(p_parent, (node_update* )this);\n \n       if (!p_nd->m_red)\n \tremove_fixup(p_l, p_parent);"}, {"sha": "22f8e68c44028d7b7097eb207b1208a4e22355fd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -142,7 +142,7 @@ erase_node(node_pointer p_nd)\n   if (p_l != 0)\n     p_l->m_p_parent = p_target_r;\n   PB_DS_ASSERT_VALID((*this))\n-  apply_update(p_target_r, (node_update* )this);\n+  this->apply_update(p_target_r, (node_update* )this);\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "4e1179ead2ffb53b9756c4843c2f547e472d29d4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -90,5 +90,5 @@ insert_leaf_imp(const_reference r_value)\n   while (p_nd->m_p_right != 0)\n     p_nd = p_nd->m_p_right;\n \n-  return std::make_pair(insert_leaf_new(r_value, p_nd, false), true);\n+  return std::make_pair(this->insert_leaf_new(r_value, p_nd, false), true);\n }"}, {"sha": "b1523662c43a84340dbe91d89853b5889a7a77c5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -274,9 +274,9 @@ splay_zz_end(node_pointer p_nd, node_pointer p_parent,\n   if (p_nd->m_p_parent == base_type::m_p_head)\n     base_type::m_p_head->m_p_parent = p_nd;\n \n-  apply_update(p_grandparent, (node_update* )this);\n-  apply_update(p_parent, (node_update* )this);\n-  apply_update(p_nd, (node_update* )this);\n+  this->apply_update(p_grandparent, (node_update* )this);\n+  this->apply_update(p_parent, (node_update* )this);\n+  this->apply_update(p_nd, (node_update* )this);\n \n   PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_nd)\n }"}, {"sha": "fe4cfa57bf75cca5760fe04a8ed314af5b0ba88d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -66,7 +66,7 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   base_type::m_p_head->m_p_parent = p_target_r;\n   p_target_r->m_p_parent = base_type::m_p_head;\n-  apply_update(p_target_r, (node_update* )this);\n+  this->apply_update(p_target_r, (node_update* )this);\n \n   base_type::join_finish(other);\n \n@@ -89,7 +89,7 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n       return;\n     }\n \n-  node_pointer p_upper_bound = upper_bound(r_key).m_p_nd;\n+  node_pointer p_upper_bound = this->upper_bound(r_key).m_p_nd;\n   _GLIBCXX_DEBUG_ASSERT(p_upper_bound != 0);\n \n   splay(p_upper_bound);\n@@ -103,7 +103,7 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n   other.m_p_head->m_p_parent = p_upper_bound;\n   p_upper_bound->m_p_parent = other.m_p_head;\n   p_upper_bound->m_p_left = 0;\n-  apply_update(p_upper_bound, (node_update* )this);\n+  this->apply_update(p_upper_bound, (node_update* )this);\n   base_type::split_finish(other);\n \n   PB_DS_ASSERT_VALID((*this))"}, {"sha": "d3b27925f7eb5860da6d95b44a9bd13b3aeca7c7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/tree_policy/order_statistics_imp.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Forder_statistics_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Forder_statistics_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftree_policy%2Forder_statistics_imp.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -96,9 +96,9 @@ order_of_key(const_key_reference r_key) const\n     {\n       const_node_iterator l_it = it.get_l_child();\n \n-      if (r_cmp_fn(r_key, extract_key(*(*it))))\n+      if (r_cmp_fn(r_key, this->extract_key(*(*it))))\n \tit = l_it;\n-      else if (r_cmp_fn(extract_key(*(*it)), r_key))\n+      else if (r_cmp_fn(this->extract_key(*(*it)), r_key))\n         {\n \n \t  ord += (l_it == end_it)?"}, {"sha": "ff2799e3e95402f6c2f8395cc6745fd052fd76fc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/trie_policy/prefix_search_node_update_imp.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fprefix_search_node_update_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fprefix_search_node_update_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Ftrie_policy%2Fprefix_search_node_update_imp.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -104,9 +104,9 @@ prefix_range(typename e_access_traits::const_iterator b, typename e_access_trait\n \n       if (common_range_length >= given_range_length)\n         {\n-\t  iterator ret_b = leftmost_it(nd_it);\n+\t  iterator ret_b = this->leftmost_it(nd_it);\n \n-\t  iterator ret_e = rightmost_it(nd_it);\n+\t  iterator ret_e = this->rightmost_it(nd_it);\n \n \t  return (std::make_pair(ret_b, ++ret_e));\n         }"}, {"sha": "afd4d9e36888193c1cca1b6f240856870333301b", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -461,7 +461,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t  __alloc);\n \n       if (_M_info._M_length)\n-\t_S_copy(__r->_M_refdata(), _M_refdata(), _M_info._M_length);\n+\t__rc_string_base::_S_copy(__r->_M_refdata(), _M_refdata(), _M_info._M_length);\n \n       __r->_M_set_length(_M_info._M_length);\n       return __r->_M_refdata();\n@@ -569,7 +569,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// Check for out_of_range and length_error exceptions.\n \t_Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);\n \t__try\n-\t  { _S_copy_chars(__r->_M_refdata(), __beg, __end); }\n+\t  { __rc_string_base::_S_copy_chars(__r->_M_refdata(), __beg, __end); }\n \t__catch(...)\n \t  {\n \t    __r->_M_destroy(__a);\n@@ -590,7 +590,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Check for out_of_range and length_error exceptions.\n       _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);\n       if (__n)\n-\t_S_assign(__r->_M_refdata(), __n, __c);\n+\t__rc_string_base::_S_assign(__r->_M_refdata(), __n, __c);\n \n       __r->_M_set_length(__n);\n       return __r->_M_refdata();\n@@ -659,11 +659,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t  _M_capacity(), _M_get_allocator());\n \n       if (__pos)\n-\t_S_copy(__r->_M_refdata(), _M_data(), __pos);\n+\tthis->_S_copy(__r->_M_refdata(), _M_data(), __pos);\n       if (__s && __len2)\n-\t_S_copy(__r->_M_refdata() + __pos, __s, __len2);\n+\tthis->_S_copy(__r->_M_refdata() + __pos, __s, __len2);\n       if (__how_much)\n-\t_S_copy(__r->_M_refdata() + __pos + __len2,\n+\tthis->_S_copy(__r->_M_refdata() + __pos + __len2,\n \t\t_M_data() + __pos + __len1, __how_much);\n \n       _M_dispose();\n@@ -685,9 +685,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t      _M_get_allocator());\n \n \t  if (__pos)\n-\t    _S_copy(__r->_M_refdata(), _M_data(), __pos);\n+\t    this->_S_copy(__r->_M_refdata(), _M_data(), __pos);\n \t  if (__how_much)\n-\t    _S_copy(__r->_M_refdata() + __pos,\n+\t    this->_S_copy(__r->_M_refdata() + __pos,\n \t\t    _M_data() + __pos + __n, __how_much);\n \n \t  _M_dispose();\n@@ -696,7 +696,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else if (__how_much && __n)\n \t{\n \t  // Work in-place.\n-\t  _S_move(_M_data() + __pos,\n+\t  this->_S_move(_M_data() + __pos,\n \t\t  _M_data() + __pos + __n, __how_much);\n \t}\n "}, {"sha": "5e82811757c2245d6632ae6f727105e98014922a", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -729,7 +729,7 @@ protected:\n         if (_M_data != this->_M_c_string)\n \t  this->_M_free_c_string();\n \t\n-        __STL_FREE_STRING(_M_data, this->_M_size, this->_M_get_allocator());\n+\tthis->__STL_FREE_STRING(_M_data, this->_M_size, this->_M_get_allocator());\n       }\n #endif\n protected:\n@@ -1170,7 +1170,7 @@ protected:\n       operator*()\n       {\n         if (0 == this->_M_buf_ptr)\n-\t  _S_setcache(*this);\n+\t  this->_S_setcache(*this);\n         return *this->_M_buf_ptr;\n       }\n \n@@ -1299,7 +1299,7 @@ protected:\n         _M_root_rope(__r)\n       { _RopeRep::_S_ref(this->_M_root);\n         if (!(__r -> empty()))\n-\t  _S_setcache(*this);\n+\t  this->_S_setcache(*this);\n       }\n \n       void _M_check();"}, {"sha": "3ee06104c605452876531b3b4e2fa3386e42f85d", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -380,7 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _Rope_RopeLeaf<_CharT, _Alloc>* __l\n \t      = (_Rope_RopeLeaf<_CharT, _Alloc>*)this;\n \t    __l->_Rope_RopeLeaf<_CharT, _Alloc>::~_Rope_RopeLeaf();\n-\t    _L_deallocate(__l, 1);\n+\t    this->_L_deallocate(__l, 1);\n \t    break;\n \t  }\n \tcase __detail::_S_concat:\n@@ -389,15 +389,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      = (_Rope_RopeConcatenation<_CharT, _Alloc>*)this;\n \t    __c->_Rope_RopeConcatenation<_CharT, _Alloc>::\n \t      ~_Rope_RopeConcatenation();\n-\t    _C_deallocate(__c, 1);\n+\t    this->_C_deallocate(__c, 1);\n \t    break;\n \t  }\n \tcase __detail::_S_function:\n \t  {\n \t    _Rope_RopeFunction<_CharT, _Alloc>* __f\n \t      = (_Rope_RopeFunction<_CharT, _Alloc>*)this;\n \t    __f->_Rope_RopeFunction<_CharT, _Alloc>::~_Rope_RopeFunction();\n-\t    _F_deallocate(__f, 1);\n+\t    this->_F_deallocate(__f, 1);\n \t    break;\n \t  }\n \tcase __detail::_S_substringfn:\n@@ -406,7 +406,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      (_Rope_RopeSubstring<_CharT, _Alloc>*)this;\n \t    __ss->_Rope_RopeSubstring<_CharT, _Alloc>::\n \t      ~_Rope_RopeSubstring();\n-\t    _S_deallocate(__ss, 1);\n+\t    this->_S_deallocate(__ss, 1);\n \t    break;\n \t  }\n \t}\n@@ -430,7 +430,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       size_t __old_len = __r->_M_size;\n       _CharT* __new_data = (_CharT*)\n-\t_Data_allocate(_S_rounded_up_size(__old_len + __len));\n+\trope::_Data_allocate(_S_rounded_up_size(__old_len + __len));\n       _RopeLeaf* __result;\n \n       uninitialized_copy_n(__r->_M_data, __old_len, __new_data);\n@@ -511,7 +511,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t  __catch(...)\n \t    {\n-\t      _C_deallocate(__result,1);\n+\t      rope::_C_deallocate(__result,1);\n \t      __throw_exception_again;\n \t    }\n \t  // In case of exception, we need to deallocate\n@@ -814,7 +814,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    if (__result_len > __lazy_threshold)\n \t      goto lazy;\n \t    __section = (_CharT*)\n-\t      _Data_allocate(_S_rounded_up_size(__result_len));\n+\t      rope::_Data_allocate(_S_rounded_up_size(__result_len));\n \t    __try\n \t      {\t(*(__f->_M_fn))(__start, __result_len, __section); }\n \t    __catch(...)"}, {"sha": "40cf87030b5f0629484d8ef1572a898199a33d87", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -62,6 +62,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  template<typename _MemberPointer>\n+    class _Mem_fn;\n+  template<typename _Tp, typename _Class>\n+    _Mem_fn<_Tp _Class::*>\n+    mem_fn(_Tp _Class::*);\n+\n _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n   /// If we have found a result_type, extract it.\n@@ -496,9 +502,6 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n   // @} group functors\n \n-  template<typename _MemberPointer>\n-    class _Mem_fn;\n-\n   /**\n    * Derives from @c unary_function or @c binary_function, or perhaps\n    * nothing, depending on the number of arguments provided. The"}, {"sha": "6a49b354caec2c5e9c26a1249306820abdf44014", "filename": "libstdc++-v3/include/tr1/exp_integral.tcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fexp_integral.tcc?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -59,6 +59,8 @@ namespace tr1\n   {\n   _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+    template<typename _Tp> _Tp __expint_E1(const _Tp);\n+\n     /**\n      *   @brief Return the exponential integral @f$ E_1(x) @f$\n      *          by series summation.  This should be good"}, {"sha": "7651326955a4e998aa1b15acc63233ef786abafa", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -52,6 +52,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _MemberPointer>\n     class _Mem_fn;\n+  template<typename _Tp, typename _Class>\n+    _Mem_fn<_Tp _Class::*>\n+    mem_fn(_Tp _Class::*);\n \n   /**\n    *  Actual implementation of _Has_result_type, which uses SFINAE to"}, {"sha": "b85f7fe4e5fddd55d371a9d6b4d72edd584de91f", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -1196,20 +1196,20 @@ namespace __gnu_test\n \t  // constructor or assignment operator of value_type throws.\n \t  if (!traits<container_type>::has_throwing_erase::value)\n \t    {\n-\t      _M_erasep(_M_container);\n-\t      _M_eraser(_M_container);\n+\t      this->_M_erasep(_M_container);\n+\t      this->_M_eraser(_M_container);\n \t    }\n \n-\t  _M_popf(_M_container);\n-\t  _M_popb(_M_container);\n+\t  this->_M_popf(_M_container);\n+\t  this->_M_popb(_M_container);\n \n-\t  _M_iops(_M_container);\n-\t  _M_ciops(_M_container);\n+\t  this->_M_iops(_M_container);\n+\t  this->_M_ciops(_M_container);\n \n-\t  _M_swap(_M_container);\n+\t  this->_M_swap(_M_container);\n \n \t  // Last.\n-\t  _M_clear(_M_container);\n+\t  this->_M_clear(_M_container);\n \t}\n       }\n     };"}, {"sha": "dad913fa0ab1e4d2350d1a33d44439b2f7006b2d", "filename": "libstdc++-v3/testsuite/util/native_type/native_priority_queue.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fnative_priority_queue.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fnative_priority_queue.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fnative_priority_queue.hpp?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -188,7 +188,7 @@ namespace __gnu_pbds\n       modify(const_reference r_old, const_reference r_new)\n       {\n         erase(r_old);\n-        push(r_new);\n+        this->push(r_new);\n       }\n \n       void"}, {"sha": "4251b710715e97d2d6b64ae0a88284c2f57f6828", "filename": "libstdc++-v3/testsuite/util/testsuite_io.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94df301fa033641561145d44ed48cf4c85d43a2c/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_io.h?ref=94df301fa033641561145d44ed48cf4c85d43a2c", "patch": "@@ -144,7 +144,7 @@ namespace __gnu_test\n       {\n \tp[0] = char_type('s');\n \tp[1] = char_type();\n-\tsetg(p, p, p + 1); \n+\tthis->setg(p, p, p + 1);\n       }\n \n       virtual int_type underflow() "}]}