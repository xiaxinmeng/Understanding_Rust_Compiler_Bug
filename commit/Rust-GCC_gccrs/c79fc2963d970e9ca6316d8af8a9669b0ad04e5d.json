{"sha": "c79fc2963d970e9ca6316d8af8a9669b0ad04e5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5ZmMyOTYzZDk3MGU5Y2E2MzE2ZDhhZjhhOTY2OWIwYWQwNGU1ZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-01-07T00:47:13Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-01-07T00:47:13Z"}, "message": "simplify-rtx.c (simplify_subreg): Simplify truncations of shifts of sign or zero extended values.\n\n\n\t* simplify-rtx.c (simplify_subreg): Simplify truncations of shifts\n\tof sign or zero extended values.\n\nFrom-SVN: r93022", "tree": {"sha": "07e1e79883cfc32b1cc39767b3e85a50942e24b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07e1e79883cfc32b1cc39767b3e85a50942e24b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c79fc2963d970e9ca6316d8af8a9669b0ad04e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79fc2963d970e9ca6316d8af8a9669b0ad04e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79fc2963d970e9ca6316d8af8a9669b0ad04e5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79fc2963d970e9ca6316d8af8a9669b0ad04e5d/comments", "author": null, "committer": null, "parents": [{"sha": "59d7d7678602bb8dcbeff337a44efc76a3451f01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d7d7678602bb8dcbeff337a44efc76a3451f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d7d7678602bb8dcbeff337a44efc76a3451f01"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "965fe599e17785792455bd9aebdfb73ddd5e7051", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79fc2963d970e9ca6316d8af8a9669b0ad04e5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79fc2963d970e9ca6316d8af8a9669b0ad04e5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c79fc2963d970e9ca6316d8af8a9669b0ad04e5d", "patch": "@@ -1,3 +1,8 @@\n+2005-01-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* simplify-rtx.c (simplify_subreg): Simplify truncations of shifts\n+\tof sign or zero extended values.\n+\n 2005-01-06  Geoffrey Keating  <geoffk@apple.com>\n \n \t* c-cppbuiltin.c (builtin_define_float_constants): Set __*_EPSILON__"}, {"sha": "0aa1e9576aa09124c74ea37a8dee7d5fcccab404", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79fc2963d970e9ca6316d8af8a9669b0ad04e5d/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79fc2963d970e9ca6316d8af8a9669b0ad04e5d/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=c79fc2963d970e9ca6316d8af8a9669b0ad04e5d", "patch": "@@ -3829,6 +3829,55 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n \treturn CONST0_RTX (outermode);\n     }\n \n+  /* Simplify (subreg:QI (lshiftrt:SI (sign_extend:SI (x:QI)) C), 0) into\n+     to (ashiftrt:QI (x:QI) C), where C is a suitable small constant and\n+     the outer subreg is effectively a truncation to the original mode.  */\n+  if ((GET_CODE (op) == LSHIFTRT\n+       || GET_CODE (op) == ASHIFTRT)\n+      && SCALAR_INT_MODE_P (outermode)\n+      /* Ensure that OUTERMODE is at least twice as wide as the INNERMODE\n+\t to avoid the possibility that an outer LSHIFTRT shifts by more\n+\t than the sign extension's sign_bit_copies and introduces zeros\n+\t into the high bits of the result.  */\n+      && (2 * GET_MODE_BITSIZE (outermode)) <= GET_MODE_BITSIZE (innermode)\n+      && GET_CODE (XEXP (op, 1)) == CONST_INT\n+      && GET_CODE (XEXP (op, 0)) == SIGN_EXTEND\n+      && GET_MODE (XEXP (XEXP (op, 0), 0)) == outermode\n+      && INTVAL (XEXP (op, 1)) < GET_MODE_BITSIZE (outermode)\n+      && subreg_lsb_1 (outermode, innermode, byte) == 0)\n+    return simplify_gen_binary (ASHIFTRT, outermode,\n+\t\t\t\tXEXP (XEXP (op, 0), 0), XEXP (op, 1));\n+\n+  /* Likewise (subreg:QI (lshiftrt:SI (zero_extend:SI (x:QI)) C), 0) into\n+     to (lshiftrt:QI (x:QI) C), where C is a suitable small constant and\n+     the outer subreg is effectively a truncation to the original mode.  */\n+  if ((GET_CODE (op) == LSHIFTRT\n+       || GET_CODE (op) == ASHIFTRT)\n+      && SCALAR_INT_MODE_P (outermode)\n+      && GET_MODE_BITSIZE (outermode) < GET_MODE_BITSIZE (innermode)\n+      && GET_CODE (XEXP (op, 1)) == CONST_INT\n+      && GET_CODE (XEXP (op, 0)) == ZERO_EXTEND\n+      && GET_MODE (XEXP (XEXP (op, 0), 0)) == outermode\n+      && INTVAL (XEXP (op, 1)) < GET_MODE_BITSIZE (outermode)\n+      && subreg_lsb_1 (outermode, innermode, byte) == 0)\n+    return simplify_gen_binary (LSHIFTRT, outermode,\n+\t\t\t\tXEXP (XEXP (op, 0), 0), XEXP (op, 1));\n+\n+  /* Likewise (subreg:QI (ashift:SI (zero_extend:SI (x:QI)) C), 0) into\n+     to (ashift:QI (x:QI) C), where C is a suitable small constant and\n+     the outer subreg is effectively a truncation to the original mode.  */\n+  if (GET_CODE (op) == ASHIFT\n+      && SCALAR_INT_MODE_P (outermode)\n+      && GET_MODE_BITSIZE (outermode) < GET_MODE_BITSIZE (innermode)\n+      && GET_CODE (XEXP (op, 1)) == CONST_INT\n+      && (GET_CODE (XEXP (op, 0)) == ZERO_EXTEND\n+\t  || GET_CODE (XEXP (op, 0)) == SIGN_EXTEND)\n+      && GET_MODE (XEXP (XEXP (op, 0), 0)) == outermode\n+      && INTVAL (XEXP (op, 1)) < GET_MODE_BITSIZE (outermode)\n+      && subreg_lsb_1 (outermode, innermode, byte) == 0)\n+    return simplify_gen_binary (ASHIFT, outermode,\n+\t\t\t\tXEXP (XEXP (op, 0), 0), XEXP (op, 1));\n+\n   return NULL_RTX;\n }\n "}]}