{"sha": "6f672dc06a7467f7edeff0316e8d6778becf5b20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY2NzJkYzA2YTc0NjdmN2VkZWZmMDMxNmU4ZDY3NzhiZWNmNWIyMA==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-01-19T21:00:43Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-01-19T21:00:43Z"}, "message": "(define_function_unit for memory): Memory is pipelined.\n\n(sCC patterns): Use %char notation instead of nested if stmts.\n(branch matchers): Likewise.\n(incscc, negscc): Likewise.  Add ? constraint for 3-insn alternative.\n(incscc): Split into `incscc' and `decscc' to make this really\nmatch.\n(incscc/decscc special cases): New patterns using carry bit.\n\n(many patterns): Use canonical address format.  Use %r\nregister notation.  Use GEN_INT.\n\n(main move SF recognizer): Allow 0 for copying to general register.\n\n(zero_extendhisi2): Remove DEFINE_EXPAND.\n(zero_extendqihi2): Likewise.\n(zero_extendqisi2): Likewise.\n(comment before sign extension): Remove the lie.\n\nFrom-SVN: r3278", "tree": {"sha": "ec86b65402c924a546ba5cde6063dd9a8b1872b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec86b65402c924a546ba5cde6063dd9a8b1872b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f672dc06a7467f7edeff0316e8d6778becf5b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f672dc06a7467f7edeff0316e8d6778becf5b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f672dc06a7467f7edeff0316e8d6778becf5b20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f672dc06a7467f7edeff0316e8d6778becf5b20/comments", "author": null, "committer": null, "parents": [{"sha": "439f6027934708fe7ca592aba8db78dbdd698614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439f6027934708fe7ca592aba8db78dbdd698614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439f6027934708fe7ca592aba8db78dbdd698614"}], "stats": {"total": 379, "additions": 161, "deletions": 218}, "files": [{"sha": "98ba9a1a03390ac816419ae2b1f692175cbf3800", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 161, "deletions": 218, "changes": 379, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f672dc06a7467f7edeff0316e8d6778becf5b20/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f672dc06a7467f7edeff0316e8d6778becf5b20/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=6f672dc06a7467f7edeff0316e8d6778becf5b20", "patch": "@@ -100,9 +100,9 @@\n ;; store, fpstore: 3, no D-cache operations should be scheduled.\n ;; fpload: 3 (really 2 for flops, but I don't think we can specify that).\n \n-(define_function_unit \"memory\" 1 1 (eq_attr \"type\" \"load\") 2 0)\n-(define_function_unit \"memory\" 1 1 (eq_attr \"type\" \"store,fpstore\") 3 0)\n-(define_function_unit \"memory\" 1 1 (eq_attr \"type\" \"fpload\") 3 0)\n+(define_function_unit \"memory\" 1 0 (eq_attr \"type\" \"load\") 2 0)\n+(define_function_unit \"memory\" 1 0 (eq_attr \"type\" \"store,fpstore\") 3 3)\n+(define_function_unit \"memory\" 1 0 (eq_attr \"type\" \"fpload\") 2 0)\n \n ;; The Timex has two floating-point units: ALU, and MUL/DIV/SQRT unit.\n ;; Timings:\n@@ -367,83 +367,126 @@\n ;; is the reverse of what we want.\n \n (define_insn \"scc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 3 \"comparison_operator\"\n-\t\t\t   [(match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t\t    (match_operand:SI 2  \"arith11_operand\" \"r,I\")]))]\n+\t\t\t   [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:SI 2  \"arith11_operand\" \"rI\")]))]\n   \"\"\n-  \"*\n-{\n-  if (which_alternative == 0)\n-    return \\\"comclr,%N3 %1,%2,%0\\;ldi 1,%0\\\";\n-  else\n-    {\n-      if (!(GET_CODE (operands[3]) == EQ || GET_CODE (operands[3]) == NE))\n-\tPUT_CODE (operands[3], reverse_relop (GET_CODE (operands[3])));\n-      return \\\"comiclr,%N3 %2,%1,%0\\;ldi 1,%0\\\";\n-    }\n-}\"\n-  [(set_attr \"type\" \"binary,binary\")\n-   (set_attr \"length\" \"2,2\")])\n+  \"com%I2clr,%B3 %2,%1,%0\\;ldi 1,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"2\")])\n \n ;; Combiner patterns for common operations performed with the output\n ;; from an scc insn (negscc and incscc).  \n (define_insn \"negscc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg (match_operator:SI 3 \"comparison_operator\"\n-\t       [(match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t(match_operand:SI 2  \"arith11_operand\" \"r,I\")])))]\n+\t       [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t(match_operand:SI 2  \"arith11_operand\" \"rI\")])))]\n   \"\"\n-  \"*\n-{\n-  if (which_alternative == 0)\n-    return \\\"comclr,%N3 %1,%2,%0\\;ldi -1,%0\\\";\n-  else\n-    {\n-      if (!(GET_CODE (operands[3]) == EQ || GET_CODE (operands[3]) == NE))\n-\tPUT_CODE (operands[3], reverse_relop (GET_CODE (operands[3])));\n-      return \\\"comiclr,%N3 %2,%1,%0\\;ldi -1,%0\\\";\n-    }\n-}\"\n+  \"com%I2clr,%B3 %2,%1,%0\\;ldi -1,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"2\")])\n+\n+;; Patterns for adding/subtracting the result of a boolean expression from\n+;; a register.  First we have special patterns that make use of the carry\n+;; bit, and output only two instructions.  For the cases we can't in\n+;; general do in two instructions, the incscc pattern at the end outputs\n+;; two or three instructions.\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (leu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t (match_operand:SI 3 \"arith11_operand\" \"rI\"))\n+\t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"sub%I3 %3,%2,0\\;addc 0,%1,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"2\")])\n+\n+; This need only accept registers for op3, since canonicalization\n+; replaces geu with gtu when op3 is an integer.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (geu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t (match_operand:SI 3 \"register_operand\" \"r\"))\n+\t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"sub %2,%3,0\\;addc 0,%1,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"2\")])\n+\n+; Match only integers for op3 here.  This is used as canonical form of the\n+; geu pattern when op3 is an integer.  Don't match registers since we can't\n+; make better code than the general incscc pattern.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (gtu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t (match_operand:SI 3 \"int11_operand\" \"I\"))\n+\t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"addi %k3,%2,0\\;addc 0,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"2\")])\n \n-;; add/sub the output from an scc with another operand.  This simply\n-;; adds or subtracts 1 from the other operand.\n (define_insn \"incscc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n- \t(match_operator 5 \"incscc_operator\"\n- \t  [(match_operand:SI 1 \"register_operand\" \"0,r\")\n- \t   (match_operator:SI 4 \"comparison_operator\"\n- \t     [(match_operand:SI 2 \"register_operand\" \"r,r\")\n- \t      (match_operand:SI 3 \"arith11_operand\" \"rI,rI\")])]))]\n- \t     \n-   \"\"\n-   \"*\n- {\n-   if (GET_CODE (operands[3]) != CONST_INT)\n-     output_asm_insn (\\\"comclr,%N4 %2,%3,0\\\", operands);\n-   else\n-     {\n-       if (! (GET_CODE (operands[4]) == EQ || GET_CODE (operands[4]) == NE))\n- \tPUT_CODE (operands[4], reverse_relop (GET_CODE (operands[4])));\n-       output_asm_insn (\\\"comiclr,%N4 %3,%2,0\\\", operands);\n-     }\n-   if (which_alternative == 0)\n-     {\n-      if (GET_CODE (operands[5]) == MINUS)\n-\treturn \\\"addi -1,%0,%0\\\";\n-      else\n-\treturn \\\"addi 1,%0,%0\\\";\n-     }\n-   else\n-     {\n-      if (GET_CODE (operands[5]) == MINUS)\n-\treturn \\\"addi,tr -1,%1,%0\\;copy %1,%0\\\";\n-      else\n-\treturn \\\"addi,tr 1,%1,%0\\;copy %1,%0\\\";\n-     }\n- }\"\n+ \t(plus:SI (match_operator:SI 4 \"comparison_operator\"\n+\t\t    [(match_operand:SI 2 \"register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 3 \"arith11_operand\" \"rI,rI\")])\n+\t\t (match_operand:SI 1 \"register_operand\" \"0,?r\")))]\n+  \"\"\n+  \"@\n+   com%I3clr,%B4 %3,%2,0\\;addi 1,%0,%0\n+   com%I3clr,%B4 %3,%2,0\\;addi,tr 1,%1,%0\\;copy %1,%0\"\n+  [(set_attr \"type\" \"binary,binary\")\n+   (set_attr \"length\" \"2,3\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (gtu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 3 \"arith11_operand\" \"rI\"))))]\n+  \"\"\n+  \"sub%I3 %3,%2,0\\;subb %1,0,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"2\")])\n+\n+; This need only accept registers for op3, since canonicalization\n+; replaces ltu with leu when op3 is an integer.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (ltu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"sub %2,%3,0\\;subb %1,0,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"2\")])\n+\n+; Match only integers for op3 here.  This is used as canonical form of the\n+; ltu pattern when op3 is an integer.  Don't match registers since we can't\n+; make better code than the general incscc pattern.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (leu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t  (match_operand:SI 3 \"int11_operand\" \"I\"))))]\n+  \"\"\n+  \"addi %k3,%2,0\\;subb %1,0,%0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"decscc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(minus:SI (match_operand:SI 1 \"register_operand\" \"0,?r\")\n+\t\t  (match_operator:SI 4 \"comparison_operator\"\n+\t\t     [(match_operand:SI 2 \"register_operand\" \"r,r\")\n+\t\t      (match_operand:SI 3 \"arith11_operand\" \"rI,rI\")])))]\n+  \"\"\n+  \"@\n+   com%I3clr,%B4 %3,%2,0\\;addi -1,%0,%0\n+   com%I3clr,%B4 %3,%2,0\\;addi,tr -1,%1,%0\\;copy %1,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"length\" \"2,3\")])\n \n@@ -460,29 +503,21 @@\n   \"\"\n   \"*\n {\n-  if (GET_CODE (operands[4]) == CONST_INT)\n-    {\n-      if (! (GET_CODE (operands[5]) == EQ || GET_CODE (operands[5]) == NE))\n-\tPUT_CODE (operands[5], reverse_relop (GET_CODE (operands[5])));\n-      output_asm_insn (\\\"comiclr,%C5 %4,%3,0\\\", operands);\n-    }\n-  else\n-    output_asm_insn (\\\"comclr,%C5 %3,%4,0\\\", operands);\n+  output_asm_insn (\\\"com%I4clr,%S5 %4,%3,0\\\", operands);\n   if (which_alternative == 0)\n     {\n       if (GET_CODE (operands[2]) == CONST_INT)\n-\toutput_asm_insn (\\\"ldi %2,%0\\\", operands);\n+\treturn \\\"ldi %2,%0\\\";\n       else \n-\toutput_asm_insn (\\\"copy %2,%0\\\", operands);\n+\treturn \\\"copy %2,%0\\\";\n     }\n   else\n     {\n       if (GET_CODE (operands[1]) == CONST_INT)\n-\toutput_asm_insn (\\\"ldi %1,%0\\\", operands);\n+\treturn \\\"ldi %1,%0\\\";\n       else \n-\toutput_asm_insn (\\\"copy %1,%0\\\", operands);\n+\treturn \\\"copy %1,%0\\\";\n     }\n-  return \\\"\\\";\n }\"\n   [(set_attr \"type\" \"multi,multi\")\n    (set_attr \"length\" \"2,2\")])\n@@ -668,25 +703,15 @@\n   \"\"\n   \"*\n {\n-  if (which_alternative == 0)\n-    return (get_attr_length (insn) == 1\n-\t    ? \\\"comb,%C3 %1,%2,%0%#\\\" : \\\"comclr,%N3 %1,%2,0\\;bl %0,0%#\\\");\n-    {\n-      enum rtx_code comp_code = GET_CODE (operands[3]);\n-      if (!(comp_code == EQ || comp_code == NE))\n-\tPUT_CODE (operands[3], reverse_relop (comp_code));\n-      if (get_attr_length (insn) == 1)\n-\treturn \\\"comib,%C3 %2,%1,%0%#\\\";\n-      else\n-\treturn \\\"comiclr,%N3 %2,%1,0\\;bl %0,0%#\\\";\n-    }\n+  return (get_attr_length (insn) == 1\n+\t  ? \\\"com%I2b,%S3 %2,%1,%0%#\\\" : \\\"com%I2clr,%B3 %2,%1,0\\;bl %0,0%#\\\");\n }\"\n-[(set_attr \"type\" \"cbranch\")\n- (set (attr \"length\") (if_then_else (lt (abs (minus (match_dup 0)\n-\t\t\t\t\t\t    (plus (pc) (const_int 2))))\n-\t\t\t\t\t(const_int 1023))\n-\t\t\t\t    (const_int 1)\n-\t\t\t\t    (const_int 2)))])\n+  [(set_attr \"type\" \"cbranch\")\n+   (set (attr \"length\") (if_then_else (lt (abs (minus (match_dup 0)\n+\t\t\t\t\t\t      (plus (pc) (const_int 2))))\n+\t\t\t\t\t  (const_int 1023))\n+\t\t\t\t      (const_int 1)\n+\t\t\t\t      (const_int 2)))])\n \n ;; Match the negated branch.\n \n@@ -701,25 +726,15 @@\n   \"\"\n   \"*\n {\n-  if (which_alternative == 0)\n-    return (get_attr_length (insn) == 1\n-\t    ? \\\"comb,%N3 %1,%2,%0%#\\\" : \\\"comclr,%C3 %1,%2,0\\;bl %0,0%#\\\");\n-    {\n-      enum rtx_code comp_code = GET_CODE (operands[3]);\n-      if (!(comp_code == EQ || comp_code == NE))\n-\tPUT_CODE (operands[3], reverse_relop (comp_code));\n-      if (get_attr_length (insn) == 1)\n-\treturn \\\"comib,%N3 %2,%1,%0%#\\\";\n-      else\n-\treturn \\\"comiclr,%C3 %2,%1,0%#\\;bl %0,0%#\\\";\n-    }\n+  return (get_attr_length (insn) == 1\n+\t  ? \\\"com%I2b,%B3 %2,%1,%0%#\\\" : \\\"com%I2clr,%S3 %2,%1,0%#\\;bl %0,0%#\\\");\n }\"\n-[(set_attr \"type\" \"cbranch\")\n- (set (attr \"length\") (if_then_else (lt (abs (minus (match_dup 0)\n-\t\t\t\t\t\t    (plus (pc) (const_int 2))))\n-\t\t\t\t\t(const_int 1023))\n-\t\t\t\t    (const_int 1)\n-\t\t\t\t    (const_int 2)))])\n+  [(set_attr \"type\" \"cbranch\")\n+   (set (attr \"length\") (if_then_else (lt (abs (minus (match_dup 0)\n+\t\t\t\t\t\t      (plus (pc) (const_int 2))))\n+\t\t\t\t\t  (const_int 1023))\n+\t\t\t\t      (const_int 1)\n+\t\t\t\t      (const_int 2)))])\n \n ;; Floating point branches\n \n@@ -833,13 +848,13 @@\n   \"@\n    copy %r1,%0\n    ldi %1,%0\n-   ldil l'%1,%0\n+   ldil L'%1,%0\n    zdepi %Z1,%0\n    ldw%M1 %1,%0\n    stw%M0 %r1,%0\n    mtsar %r1\n-   fstws %1,-16(30)\\;ldw -16(30),%0\n-   stw %1,-16(30)\\;fldws -16(30),%0\n+   fstws %1,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n+   stw %1,-16(0,%%r30)\\;fldws -16(0,%%r30),%0\n    fcpy,sgl %1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,load,fpload,fpalu\")\n    (set_attr \"length\" \"1,1,1,1,1,1,1,2,2,1\")])\n@@ -968,7 +983,7 @@\n \t\t   (match_operand:SI 2 \"function_label_operand\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=r\"))]\n   \"TARGET_SHARED_LIBS\"\n-  \"ldo RP'%G2(%1),%0\\;extru,= %0,31,1,%3\\;ldw -4(%%r27),%3\\;add %0,%3,%0\"\n+  \"ldo RP'%G2(%1),%0\\;extru,= %0,31,1,%3\\;ldw -4(0,%%r27),%3\\;add %0,%3,%0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"4\")])\n \n@@ -998,13 +1013,13 @@\n   \"@\n    copy %r1,%0\n    ldi %1,%0\n-   ldil l'%1,%0\n+   ldil L'%1,%0\n    zdepi %Z1,%0\n    ldh%M1 %1,%0\n    sth%M0 %r1,%0\n    mtsar %r1\n-   fstws %1,-16(30)\\;ldw -16(30),%0\n-   stw %1,-16(30)\\;fldws -16(30),%0\n+   fstws %1,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n+   stw %1,-16(0,%%r30)\\;fldws -16(0,%%r30),%0\n    fcpy,sgl %1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,load,fpload,fpalu\")\n    (set_attr \"length\" \"1,1,1,1,1,1,1,2,2,1\")])\n@@ -1075,13 +1090,13 @@\n   \"@\n    copy %r1,%0\n    ldi %1,%0\n-   ldil l'%1,%0\n+   ldil L'%1,%0\n    zdepi %Z1,%0\n    ldb%M1 %1,%0\n    stb%M0 %r1,%0\n    mtsar %r1\n-   fstws %1,-16(30)\\;ldw -16(30),%0\n-   stw %1,-16(30)\\;fldws -16(30),%0\n+   fstws %1,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n+   stw %1,-16(0,%%r30)\\;fldws -16(0,%%r30),%0\n    fcpy,sgl %1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,load,fpload,fpalu\")\n    (set_attr \"length\" \"1,1,1,1,1,1,1,2,2,1\")])\n@@ -1384,8 +1399,8 @@\n   \"@\n    fcpy,sgl %1,%0\n    copy %1,%0\n-   fstws %1,-16(0,30)\\;ldw -16(0,30),%0\n-   stw %r1,-16(0,30)\\;fldws -16(0,30),%0\n+   fstws %1,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n+   stw %r1,-16(0,%%r30)\\;fldws -16(0,%%r30),%0\n    fldws%F1 %1,%0\n    ldw%M1 %1,%0\n    fstws%F0 %r1,%0\n@@ -1415,28 +1430,7 @@\n \f\n ;;- zero extension instructions\n \n-;; Note that the one starting from HImode comes before those for QImode\n-;; so that a constant operand will match HImode, not QImode.\n-\n-(define_expand \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(zero_extend:SI\n-\t (match_operand:HI 1 \"general_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (GET_CODE (operand1) == MEM\n-      && symbolic_operand (XEXP (operand1, 0), Pmode))\n-    {\n-      rtx temp = copy_to_mode_reg (Pmode, gen_rtx (HIGH, Pmode,\n-\t\t\t\t\t\t   XEXP (operand1, 0)));\n-      operands[1] = gen_rtx (MEM, HImode,\n-\t\t\t     gen_rtx (LO_SUM, Pmode,\n-\t\t\t\t      temp, XEXP (operand1, 0)));\n-    }\n-}\")\n-\n-(define_insn \"\"\n+(define_insn \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SI\n \t (match_operand:HI 1 \"reg_or_nonsymb_mem_operand\" \"r,Q\")))]\n@@ -1446,25 +1440,7 @@\n    ldh%M1 %1,%0\"\n   [(set_attr \"type\" \"unary,load\")])\n \n-(define_expand \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(zero_extend:HI\n-\t (match_operand:QI 1 \"general_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (GET_CODE (operand1) == MEM\n-      && symbolic_operand (XEXP (operand1, 0), Pmode))\n-    {\n-      rtx temp = copy_to_mode_reg (Pmode, gen_rtx (HIGH, Pmode,\n-\t\t\t\t\t\t   XEXP (operand1, 0)));\n-      operands[1] = gen_rtx (MEM, QImode,\n-\t\t\t     gen_rtx (LO_SUM, Pmode,\n-\t\t\t\t      temp, XEXP (operand1, 0)));\n-    }\n-}\")\n-\n-(define_insn \"\"\n+(define_insn \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:HI\n \t (match_operand:QI 1 \"reg_or_nonsymb_mem_operand\" \"r,Q\")))]\n@@ -1475,28 +1451,7 @@\n   [(set_attr \"type\" \"unary,load\")\n    (set_attr \"length\" \"1,1\")])\n \n-(define_expand \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(zero_extend:SI\n-\t (match_operand:QI 1 \"general_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (GET_CODE (operand1) == MEM\n-      && symbolic_operand (XEXP (operand1, 0), Pmode))\n-    {\n-      rtx temp = copy_to_mode_reg (Pmode, gen_rtx (HIGH, Pmode,\n-\t\t\t\t\t\t   XEXP (operand1, 0)));\n-      operand1 = gen_rtx (MEM, QImode,\n-\t\t\t  gen_rtx (LO_SUM, Pmode,\n-\t\t\t\t   temp, XEXP (operand1, 0)));\n-      emit_insn (gen_rtx (SET, VOIDmode, operand0,\n-\t\t\t  gen_rtx (ZERO_EXTEND, SImode, operand1)));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"\"\n+(define_insn \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SI\n \t (match_operand:QI 1 \"reg_or_nonsymb_mem_operand\" \"r,Q\")))]\n@@ -1506,10 +1461,8 @@\n    ldb%M1 %1,%0\"\n   [(set_attr \"type\" \"unary,load\")\n    (set_attr \"length\" \"1,1\")])\n-\f\n+\n ;;- sign extension instructions\n-;; Note that the one starting from HImode comes before those for QImode\n-;; so that a constant operand will match HImode, not QImode.\n \n (define_insn \"extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -1649,7 +1602,7 @@\n    (clobber (match_scratch:SI 2 \"=&fx,X\"))]\n   \"\"\n   \"@\n-   fcnvfxt,sgl,sgl %1,%2\\;fstws %2,-16(30)\\;ldw -16(30),%0\n+   fcnvfxt,sgl,sgl %1,%2\\;fstws %2,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n    fcnvfxt,sgl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu,fpalu\")\n    (set_attr \"length\" \"3,1\")])\n@@ -1660,7 +1613,7 @@\n    (clobber (match_scratch:SI 2 \"=&fx,X\"))]\n   \"\"\n   \"@\n-   fcnvfxt,dbl,sgl %1,%2\\;fstws %2,-16(30)\\;ldw -16(30),%0\n+   fcnvfxt,dbl,sgl %1,%2\\;fstws %2,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n    fcnvfxt,dbl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu,fpalu\")\n    (set_attr \"length\" \"3,1\")])\n@@ -2259,9 +2212,7 @@\n   if (GET_CODE (operands[2]) != CONST_INT)\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      emit_insn (gen_subsi3 (temp,\n-\t\t\t     gen_rtx (CONST_INT, VOIDmode, 31),\n-\t\t\t     operands[2]));\n+      emit_insn (gen_subsi3 (temp, GEN_INT (31), operands[2]));\n       emit_insn (gen_zvdep32 (operands[0], operands[1], temp));\n       DONE;\n     }\n@@ -2277,10 +2228,8 @@\n   rtx xoperands[4];\n   xoperands[0] = operands[0];\n   xoperands[1] = operands[1];\n-  xoperands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t  31 - (INTVAL (operands[2]) & 31));\n-  xoperands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t  32 - (INTVAL (operands[2]) & 31));\n+  xoperands[2] = GEN_INT (31 - (INTVAL (operands[2]) & 31));\n+  xoperands[3] = GEN_INT (32 - (INTVAL (operands[2]) & 31));\n   output_asm_insn (\\\"zdep %1,%2,%3,%0\\\", xoperands);\n   return \\\"\\\";\n }\")\n@@ -2303,9 +2252,7 @@\n   if (GET_CODE (operands[2]) != CONST_INT)\n     {\n       rtx temp = gen_reg_rtx (SImode);\n-      emit_insn (gen_subsi3 (temp,\n-\t\t\t     gen_rtx (CONST_INT, VOIDmode, 31),\n-\t\t\t     operands[2]));\n+      emit_insn (gen_subsi3 (temp, GEN_INT (31), operands[2]));\n       emit_insn (gen_vextrs32 (operands[0], operands[1], temp));\n       DONE;\n     }\n@@ -2321,10 +2268,8 @@\n   rtx xoperands[4];\n   xoperands[0] = operands[0];\n   xoperands[1] = operands[1];\n-  xoperands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t  31 - (INTVAL (operands[2]) & 31));\n-  xoperands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t  32 - (INTVAL (operands[2]) & 31));\n+  xoperands[2] = GEN_INT (31 - (INTVAL (operands[2]) & 31));\n+  xoperands[3] = GEN_INT (32 - (INTVAL (operands[2]) & 31));\n   output_asm_insn (\\\"extrs %1,%2,%3,%0\\\", xoperands);\n   return \\\"\\\";\n }\")\n@@ -2346,10 +2291,8 @@\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n-      operands[3] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     32 - (INTVAL (operands[2]) & 31));\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     31 - (INTVAL (operands[2]) & 31));\n+      operands[3] = GEN_INT (32 - (INTVAL (operands[2]) & 31));\n+      operands[2] = GEN_INT (31 - (INTVAL (operands[2]) & 31));\n       return \\\"extru %1,%2,%3,%0\\\";\n     }\n   else\n@@ -2376,7 +2319,7 @@\n   \"\"\n   \"*\n {\n-  operands[2] = gen_rtx (CONST_INT, VOIDmode, (32 - INTVAL (operands[2])) & 31);\n+  operands[2] = GEN_INT ((32 - INTVAL (operands[2])) & 31);\n   return \\\"shd %1,%1,%2,%0\\\";\n }\")\n \n@@ -2435,7 +2378,7 @@\n     {\n       rtx reg = gen_reg_rtx (SImode);\n \n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, -INTVAL (operands[1]));\n+      operands[1] = GEN_INT (-INTVAL (operands[1]));\n       if (!INT_14_BITS (operands[1]))\n \toperands[1] = force_reg (SImode, operands[1]);\n       emit_insn (gen_addsi3 (reg, operands[0], operands[1]));\n@@ -2464,7 +2407,7 @@\n {\n   if (GET_CODE (operands[1]) == CONST_INT)\n     {\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[1]));\n+      operands[1] = GEN_INT (~INTVAL (operands[1]));\n       return \\\"addi,uv %1,%0,0\\;blr,n %0,0\\;b,n %l3\\\";\n     }\n   else\n@@ -2619,7 +2562,7 @@\n    (~INTVAL (operands[3]) & (1L << INTVAL (operands[1])) - 1 & ~0xf) == 0\"\n   \"*\n {\n-  operands[3] = gen_rtx (CONST_INT, VOIDmode, (INTVAL (operands[3]) & 0xf) - 0x10);\n+  operands[3] = GEN_INT ((INTVAL (operands[3]) & 0xf) - 0x10);\n   return \\\"depi %3,%2+%1-1,%1,%0\\\";\n }\")\n "}]}