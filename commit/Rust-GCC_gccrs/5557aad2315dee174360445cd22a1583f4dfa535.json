{"sha": "5557aad2315dee174360445cd22a1583f4dfa535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1N2FhZDIzMTVkZWUxNzQzNjA0NDVjZDIyYTE1ODNmNGRmYTUzNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-12-21T10:00:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-12-21T10:00:36Z"}, "message": "mips.c (mips_emit_loadgp): Replace gen_* calls with separate gen_*_si and gen_*_di calls.\n\ngcc/\n\t* config/mips/mips.c (mips_emit_loadgp): Replace gen_* calls with\n\tseparate gen_*_si and gen_*_di calls.  Pass pic_offset_table_rtx\n\tas the first argument.\n\t* config/mips/mips.md (loadgp_newabi, loadgp_absolute)\n\t(loadgp_rtp): Rename to...\n\t(loadgp_newabi_<mode>, loadgp_absolute<mode>, loadgp_rtp<mode>):\n\t...these.  Add modes to all operands.  Add the target register\n\tas an operand.  Combine loadgp_rtp<mode> with its splitter.\n\nFrom-SVN: r131118", "tree": {"sha": "bb567a282f948beee1b42b897ff61f0f6e63e60a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb567a282f948beee1b42b897ff61f0f6e63e60a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5557aad2315dee174360445cd22a1583f4dfa535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5557aad2315dee174360445cd22a1583f4dfa535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5557aad2315dee174360445cd22a1583f4dfa535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5557aad2315dee174360445cd22a1583f4dfa535/comments", "author": null, "committer": null, "parents": [{"sha": "b27283df297ad58c12c50ab6e6060c0f89292451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27283df297ad58c12c50ab6e6060c0f89292451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27283df297ad58c12c50ab6e6060c0f89292451"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "6cec0bb9c68792adaa28d8e019b324dea713f55c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5557aad2315dee174360445cd22a1583f4dfa535/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5557aad2315dee174360445cd22a1583f4dfa535/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5557aad2315dee174360445cd22a1583f4dfa535", "patch": "@@ -1,3 +1,14 @@\n+2007-12-21  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/mips/mips.c (mips_emit_loadgp): Replace gen_* calls with\n+\tseparate gen_*_si and gen_*_di calls.  Pass pic_offset_table_rtx\n+\tas the first argument.\n+\t* config/mips/mips.md (loadgp_newabi, loadgp_absolute)\n+\t(loadgp_rtp): Rename to...\n+\t(loadgp_newabi_<mode>, loadgp_absolute<mode>, loadgp_rtp<mode>):\n+\t...these.  Add modes to all operands.  Add the target register\n+\tas an operand.  Combine loadgp_rtp<mode> with its splitter.\n+\n 2007-12-20  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.md (fix_return_addr): Remove."}, {"sha": "b81029e967a2505d543da6cfb102c30247f7f521", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5557aad2315dee174360445cd22a1583f4dfa535/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5557aad2315dee174360445cd22a1583f4dfa535/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5557aad2315dee174360445cd22a1583f4dfa535", "patch": "@@ -8281,8 +8281,9 @@ static GTY(()) rtx mips_gnu_local_gp;\n static void\n mips_emit_loadgp (void)\n {\n-  rtx addr, offset, incoming_address, base, index;\n+  rtx addr, offset, incoming_address, base, index, pic_reg;\n \n+  pic_reg = pic_offset_table_rtx;\n   switch (mips_current_loadgp_style ())\n     {\n     case LOADGP_ABSOLUTE:\n@@ -8291,22 +8292,28 @@ mips_emit_loadgp (void)\n \t  mips_gnu_local_gp = gen_rtx_SYMBOL_REF (Pmode, \"__gnu_local_gp\");\n \t  SYMBOL_REF_FLAGS (mips_gnu_local_gp) |= SYMBOL_FLAG_LOCAL;\n \t}\n-      emit_insn (gen_loadgp_absolute (mips_gnu_local_gp));\n+      emit_insn (Pmode == SImode\n+\t\t ? gen_loadgp_absolute_si (pic_reg, mips_gnu_local_gp)\n+\t\t : gen_loadgp_absolute_di (pic_reg, mips_gnu_local_gp));\n       break;\n \n     case LOADGP_NEWABI:\n       addr = XEXP (DECL_RTL (current_function_decl), 0);\n       offset = mips_unspec_address (addr, SYMBOL_GOTOFF_LOADGP);\n       incoming_address = gen_rtx_REG (Pmode, PIC_FUNCTION_ADDR_REGNUM);\n-      emit_insn (gen_loadgp_newabi (offset, incoming_address));\n+      emit_insn (Pmode == SImode\n+\t\t ? gen_loadgp_newabi_si (pic_reg, offset, incoming_address)\n+\t\t : gen_loadgp_newabi_di (pic_reg, offset, incoming_address));\n       if (!TARGET_EXPLICIT_RELOCS)\n \temit_insn (gen_loadgp_blockage ());\n       break;\n \n     case LOADGP_RTP:\n       base = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (VXWORKS_GOTT_BASE));\n       index = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (VXWORKS_GOTT_INDEX));\n-      emit_insn (gen_loadgp_rtp (base, index));\n+      emit_insn (Pmode == SImode\n+\t\t ? gen_loadgp_rtp_si (pic_reg, base, index)\n+\t\t : gen_loadgp_rtp_di (pic_reg, base, index));\n       if (!TARGET_EXPLICIT_RELOCS)\n \temit_insn (gen_loadgp_blockage ());\n       break;"}, {"sha": "b32ed33b93c9f54f9a81eb6e42e92fab6cd2cef4", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5557aad2315dee174360445cd22a1583f4dfa535/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5557aad2315dee174360445cd22a1583f4dfa535/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=5557aad2315dee174360445cd22a1583f4dfa535", "patch": "@@ -4269,32 +4269,34 @@\n ;; Insn to initialize $gp for n32/n64 abicalls.  Operand 0 is the offset\n ;; of _gp from the start of this function.  Operand 1 is the incoming\n ;; function address.\n-(define_insn_and_split \"loadgp_newabi\"\n-  [(unspec_volatile [(match_operand 0 \"\" \"\")\n-\t\t     (match_operand 1 \"register_operand\" \"\")] UNSPEC_LOADGP)]\n+(define_insn_and_split \"loadgp_newabi_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(unspec_volatile:P [(match_operand:P 1)\n+\t\t\t    (match_operand:P 2 \"register_operand\" \"d\")]\n+\t\t\t   UNSPEC_LOADGP))]\n   \"mips_current_loadgp_style () == LOADGP_NEWABI\"\n   \"#\"\n   \"\"\n-  [(set (match_dup 2) (match_dup 3))\n-   (set (match_dup 2) (match_dup 4))\n-   (set (match_dup 2) (match_dup 5))]\n+  [(set (match_dup 0) (match_dup 3))\n+   (set (match_dup 0) (match_dup 4))\n+   (set (match_dup 0) (match_dup 5))]\n {\n-  operands[2] = pic_offset_table_rtx;\n-  operands[3] = gen_rtx_HIGH (Pmode, operands[0]);\n-  operands[4] = gen_rtx_PLUS (Pmode, operands[2], operands[1]);\n-  operands[5] = gen_rtx_LO_SUM (Pmode, operands[2], operands[0]);\n+  operands[3] = gen_rtx_HIGH (Pmode, operands[1]);\n+  operands[4] = gen_rtx_PLUS (Pmode, operands[0], operands[2]);\n+  operands[5] = gen_rtx_LO_SUM (Pmode, operands[0], operands[1]);\n }\n   [(set_attr \"length\" \"12\")])\n \n ;; Likewise, for -mno-shared code.  Operand 0 is the __gnu_local_gp symbol.\n-(define_insn_and_split \"loadgp_absolute\"\n-  [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPEC_LOADGP)]\n+(define_insn_and_split \"loadgp_absolute_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(unspec_volatile:P [(match_operand:P 1)] UNSPEC_LOADGP))]\n   \"mips_current_loadgp_style () == LOADGP_ABSOLUTE\"\n   \"#\"\n   \"\"\n   [(const_int 0)]\n {\n-  mips_emit_move (pic_offset_table_rtx, operands[0]);\n+  mips_emit_move (operands[0], operands[1]);\n   DONE;\n }\n   [(set_attr \"length\" \"8\")])\n@@ -4313,27 +4315,24 @@\n \n ;; Initialize $gp for RTP PIC.  Operand 0 is the __GOTT_BASE__ symbol\n ;; and operand 1 is the __GOTT_INDEX__ symbol.\n-(define_insn \"loadgp_rtp\"\n-  [(unspec_volatile [(match_operand 0 \"symbol_ref_operand\")\n-\t\t     (match_operand 1 \"symbol_ref_operand\")] UNSPEC_LOADGP)]\n+(define_insn_and_split \"loadgp_rtp_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(unspec_volatile:P [(match_operand:P 1 \"symbol_ref_operand\")\n+\t\t\t    (match_operand:P 2 \"symbol_ref_operand\")]\n+\t\t\t   UNSPEC_LOADGP))]\n   \"mips_current_loadgp_style () == LOADGP_RTP\"\n   \"#\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_split\n-  [(unspec_volatile [(match_operand:P 0 \"symbol_ref_operand\")\n-\t\t     (match_operand:P 1 \"symbol_ref_operand\")] UNSPEC_LOADGP)]\n-  \"mips_current_loadgp_style () == LOADGP_RTP\"\n-  [(set (match_dup 2) (high:P (match_dup 3)))\n-   (set (match_dup 2) (unspec:P [(match_dup 2)\n+  \"\"\n+  [(set (match_dup 0) (high:P (match_dup 3)))\n+   (set (match_dup 0) (unspec:P [(match_dup 0)\n \t\t\t\t (match_dup 3)] UNSPEC_LOAD_GOT))\n-   (set (match_dup 2) (unspec:P [(match_dup 2)\n+   (set (match_dup 0) (unspec:P [(match_dup 0)\n \t\t\t\t (match_dup 4)] UNSPEC_LOAD_GOT))]\n {\n-  operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_unspec_address (operands[0], SYMBOL_ABSOLUTE);\n-  operands[4] = mips_unspec_address (operands[1], SYMBOL_HALF);\n-})\n+  operands[3] = mips_unspec_address (operands[1], SYMBOL_ABSOLUTE);\n+  operands[4] = mips_unspec_address (operands[2], SYMBOL_HALF);\n+}\n+  [(set_attr \"length\" \"12\")])\n \n ;; Emit a .cprestore directive, which normally expands to a single store\n ;; instruction.  Note that we continue to use .cprestore for explicit reloc"}]}