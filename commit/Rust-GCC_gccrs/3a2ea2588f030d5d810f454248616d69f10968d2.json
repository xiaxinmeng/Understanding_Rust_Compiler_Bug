{"sha": "3a2ea2588f030d5d810f454248616d69f10968d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyZWEyNTg4ZjAzMGQ1ZDgxMGY0NTQyNDg2MTZkNjlmMTA5NjhkMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1999-10-19T14:27:00Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-10-19T14:27:00Z"}, "message": "Fix APCS violation.\n\nFrom-SVN: r30087", "tree": {"sha": "5f7c9d604e6e7d2f76c4dc98f3c9f98b840adb98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f7c9d604e6e7d2f76c4dc98f3c9f98b840adb98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2ea2588f030d5d810f454248616d69f10968d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2ea2588f030d5d810f454248616d69f10968d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2ea2588f030d5d810f454248616d69f10968d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2ea2588f030d5d810f454248616d69f10968d2/comments", "author": null, "committer": null, "parents": [{"sha": "db025289c4d6d4d798c3cc80c118b84ba13b6c76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db025289c4d6d4d798c3cc80c118b84ba13b6c76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db025289c4d6d4d798c3cc80c118b84ba13b6c76"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "a183c593791ab1d357f7cb26b9f610725f17787b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2ea2588f030d5d810f454248616d69f10968d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2ea2588f030d5d810f454248616d69f10968d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a2ea2588f030d5d810f454248616d69f10968d2", "patch": "@@ -1,3 +1,8 @@\n+Tue Oct 19 15:26:11 1999  Richard Earnshaw  (rearnsha@arm.com)\n+\n+\t* arm.c (arm_return_in_memory): APCS rules state that the elements\n+\tof a structure returned in a register must be 'integer-like'.\n+\n 1999-10-19  Bruce Korb  <autogen@linuxbox.com>\n \n         * fixinc/Makefile.in: Change the generation rules to run `genfixes'"}, {"sha": "2e6e969828f25e9730f9e430c3e767d2d33175b5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2ea2588f030d5d810f454248616d69f10968d2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2ea2588f030d5d810f454248616d69f10968d2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3a2ea2588f030d5d810f454248616d69f10968d2", "patch": "@@ -1404,12 +1404,12 @@ arm_return_in_memory (type)\n     {\n       tree field;\n \n-      /* For a struct the APCS says that we must return in a register if\n-\t every addressable element has an offset of zero.  For practical\n-\t purposes this means that the structure can have at most one non\n-\t bit-field element and that this element must be the first one in\n-\t the structure.  */\n-\n+      /* For a struct the APCS says that we only return in a register\n+\t if the type is 'integer like' and every addressable element\n+\t has an offset of zero.  For practical purposes this means\n+\t that the structure can have at most one non bit-field element\n+\t and that this element must be the first one in the structure.  */\n+      \n       /* Find the first field, ignoring non FIELD_DECL things which will\n \t have been created by C++.  */\n       for (field = TYPE_FIELDS (type);\n@@ -1420,7 +1420,19 @@ arm_return_in_memory (type)\n       if (field == NULL)\n \treturn 0; /* An empty structure.  Allowed by an extension to ANSI C. */\n \n-      /* Now check the remaining fields, if any. */\n+      /* Check that the first field is valid for returning in a register...  */\n+\n+      /* ... Floats are not allowed */\n+      if (FLOAT_TYPE_P (TREE_TYPE (field)))\n+\treturn 1;\n+\n+      /* ... Aggregates that are not themselves valid for returning in\n+\t a register are not allowed.  */\n+      if (RETURN_IN_MEMORY (TREE_TYPE (field)))\n+\treturn 1;\n+\n+      /* Now check the remaining fields, if any.  Only bitfields are allowed,\n+\t since they are not addressable.  */\n       for (field = TREE_CHAIN (field);\n \t   field;\n \t   field = TREE_CHAIN (field))"}]}