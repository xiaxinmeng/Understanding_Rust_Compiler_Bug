{"sha": "7ee055f4ae2b78d946b74f6aa96518da00ee2319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VlMDU1ZjRhZTJiNzhkOTQ2Yjc0ZjZhYTk2NTE4ZGEwMGVlMjMxOQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-09-29T20:45:05Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-09-29T20:45:05Z"}, "message": "expr.c (do_jump): Handle cleanups in TRUTH_ANDIF_EXPR and TRUTH_ORIF_EXPR.\n\n        * expr.c (do_jump): Handle cleanups in TRUTH_ANDIF_EXPR and\n        TRUTH_ORIF_EXPR.\n\nFrom-SVN: r8164", "tree": {"sha": "7acc5f7e13bdf47856e60dcaa756ded346e3880e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7acc5f7e13bdf47856e60dcaa756ded346e3880e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ee055f4ae2b78d946b74f6aa96518da00ee2319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee055f4ae2b78d946b74f6aa96518da00ee2319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ee055f4ae2b78d946b74f6aa96518da00ee2319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ee055f4ae2b78d946b74f6aa96518da00ee2319/comments", "author": null, "committer": null, "parents": [{"sha": "b3738072bd402d81ef1c2f0fbd867be0398bc53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3738072bd402d81ef1c2f0fbd867be0398bc53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3738072bd402d81ef1c2f0fbd867be0398bc53b"}], "stats": {"total": 116, "additions": 108, "deletions": 8}, "files": [{"sha": "7c586c81cd663d4637ff76d45a2b3786ef9593d0", "filename": "gcc/expr.c", "status": "modified", "additions": 108, "deletions": 8, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ee055f4ae2b78d946b74f6aa96518da00ee2319/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ee055f4ae2b78d946b74f6aa96518da00ee2319/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7ee055f4ae2b78d946b74f6aa96518da00ee2319", "patch": "@@ -8584,17 +8584,117 @@ do_jump (exp, if_false_label, if_true_label)\n       break;\n \n     case TRUTH_ANDIF_EXPR:\n-      if (if_false_label == 0)\n-\tif_false_label = drop_through_label = gen_label_rtx ();\n-      do_jump (TREE_OPERAND (exp, 0), if_false_label, NULL_RTX);\n-      do_jump (TREE_OPERAND (exp, 1), if_false_label, if_true_label);\n+      {\n+\trtx seq1, seq2;\n+\ttree cleanups, old_cleanups;\n+\n+\tif (if_false_label == 0)\n+\t  if_false_label = drop_through_label = gen_label_rtx ();\n+\tstart_sequence ();\n+\tdo_jump (TREE_OPERAND (exp, 0), if_false_label, NULL_RTX);\n+\tseq1 = get_insns ();\n+\tend_sequence ();\n+\n+\told_cleanups = cleanups_this_call;\n+\tstart_sequence ();\n+\tdo_jump (TREE_OPERAND (exp, 1), if_false_label, if_true_label);\n+\tseq2 = get_insns ();\n+\tend_sequence ();\n+\n+\tcleanups = defer_cleanups_to (old_cleanups);\n+\tif (cleanups)\n+\t  {\n+\t    rtx flag = gen_reg_rtx (word_mode);\n+\t    tree new_cleanups;\n+\t    tree cond;\n+\n+\t    /* Flag cleanups as not needed. */\n+\t    emit_move_insn (flag, const0_rtx);\n+\t    emit_insns (seq1);\n+\n+\t    /* Flag cleanups as needed. */\n+\t    emit_move_insn (flag, const1_rtx);\n+\t    emit_insns (seq2);\n+\n+\t    /* convert flag, which is an rtx, into a tree. */\n+\t    cond = make_node (RTL_EXPR);\n+\t    TREE_TYPE (cond) = integer_type_node;\n+\t    RTL_EXPR_RTL (cond) = flag;\n+\t    RTL_EXPR_SEQUENCE (cond) = NULL_RTX;\n+\n+\t    new_cleanups = build (COND_EXPR, void_type_node,\n+\t\t\t\t  truthvalue_conversion (cond),\n+\t\t\t\t  cleanups, integer_zero_node);\n+\t    new_cleanups = fold (new_cleanups);\n+\n+\t    /* Now add in the conditionalized cleanups. */\n+\t    cleanups_this_call\n+\t      = tree_cons (NULL_TREE, new_cleanups, cleanups_this_call);\n+\t    (*interim_eh_hook) (NULL_TREE);\n+\t  }\n+\telse\n+\t  {\n+\t    emit_insns (seq1);\n+\t    emit_insns (seq2);\n+\t  }\n+      }\n       break;\n \n     case TRUTH_ORIF_EXPR:\n-      if (if_true_label == 0)\n-\tif_true_label = drop_through_label = gen_label_rtx ();\n-      do_jump (TREE_OPERAND (exp, 0), NULL_RTX, if_true_label);\n-      do_jump (TREE_OPERAND (exp, 1), if_false_label, if_true_label);\n+      {\n+\trtx seq1, seq2;\n+\ttree cleanups, old_cleanups;\n+\n+\tif (if_true_label == 0)\n+\t  if_true_label = drop_through_label = gen_label_rtx ();\n+\tstart_sequence ();\n+\tdo_jump (TREE_OPERAND (exp, 0), NULL_RTX, if_true_label);\n+\tseq1 = get_insns ();\n+\tend_sequence ();\n+\n+\told_cleanups = cleanups_this_call;\n+\tstart_sequence ();\n+\tdo_jump (TREE_OPERAND (exp, 1), if_false_label, if_true_label);\n+\tseq2 = get_insns ();\n+\tend_sequence ();\n+\n+\tcleanups = defer_cleanups_to (old_cleanups);\n+\tif (cleanups)\n+\t  {\n+\t    rtx flag = gen_reg_rtx (word_mode);\n+\t    tree new_cleanups;\n+\t    tree cond;\n+\n+\t    /* Flag cleanups as not needed. */\n+\t    emit_move_insn (flag, const0_rtx);\n+\t    emit_insns (seq1);\n+\n+\t    /* Flag cleanups as needed. */\n+\t    emit_move_insn (flag, const1_rtx);\n+\t    emit_insns (seq2);\n+\n+\t    /* convert flag, which is an rtx, into a tree. */\n+\t    cond = make_node (RTL_EXPR);\n+\t    TREE_TYPE (cond) = integer_type_node;\n+\t    RTL_EXPR_RTL (cond) = flag;\n+\t    RTL_EXPR_SEQUENCE (cond) = NULL_RTX;\n+\n+\t    new_cleanups = build (COND_EXPR, void_type_node,\n+\t\t\t\t  truthvalue_conversion (cond),\n+\t\t\t\t  cleanups, integer_zero_node);\n+\t    new_cleanups = fold (new_cleanups);\n+\n+\t    /* Now add in the conditionalized cleanups. */\n+\t    cleanups_this_call\n+\t      = tree_cons (NULL_TREE, new_cleanups, cleanups_this_call);\n+\t    (*interim_eh_hook) (NULL_TREE);\n+\t  }\n+\telse\n+\t  {\n+\t    emit_insns (seq1);\n+\t    emit_insns (seq2);\n+\t  }\n+      }\n       break;\n \n     case COMPOUND_EXPR:"}]}