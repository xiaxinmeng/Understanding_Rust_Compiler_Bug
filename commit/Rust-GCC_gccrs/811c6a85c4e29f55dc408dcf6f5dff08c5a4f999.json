{"sha": "811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExYzZhODVjNGUyOWY1NWRjNDA4ZGNmNmY1ZGZmMDhjNWE0Zjk5OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-10T13:18:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-10T13:18:49Z"}, "message": "[multiple changes]\n\n2009-07-10  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch7.adb: Update comments.\n\n2009-07-10  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch13.adb (Expand_N_Record_Representation_Clause): Ignore mod\n\tclause if -gnatI is set instead of crashing.\n\n2009-07-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch11.adb (Same_Expression): Null is always equal to itself.\n\tAdditional work to remove redundant successive raise statements, in\n\tthis case access checks.\n\n2009-07-10  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Compile): Always create a deep copy of the mapping file\n\targument (-gnatem=...) as it may be deallocate/reallocate by\n\tNormalize_Arguments.\n\n2009-07-10  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.adb (Directly_Designated_Type): Add assertion.\n\t\n\t* sem_res.adb (Check_Fully_Declared_Prefix): Add missing check on\n\taccess types before using attribute Directly_Designated_Type.\n\n2009-07-10  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj.ads: Minor typo fix\n\n2009-07-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Add_Extra_Formal): Protected operations do no need\n\tspecial treatment.\n\n\t* exp_ch6.adb (Expand_Protected_Subprogram_Call): If rewritten\n\tsubprogram is a function call, resolve properly, to ensure that extra\n\tactuals are added as needed.\n\nFrom-SVN: r149474", "tree": {"sha": "948a181b8cd975d79aee30a361d83c8d435069c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/948a181b8cd975d79aee30a361d83c8d435069c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/comments", "author": null, "committer": null, "parents": [{"sha": "2be0bff8f1836abfa08d9b52c8372f7b03468777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be0bff8f1836abfa08d9b52c8372f7b03468777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be0bff8f1836abfa08d9b52c8372f7b03468777"}], "stats": {"total": 87, "additions": 68, "deletions": 19}, "files": [{"sha": "37e512b08fdd30e555a638866c95f087cc0acecc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -1,3 +1,44 @@\n+2009-07-10  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch7.adb: Update comments.\n+\n+2009-07-10  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch13.adb (Expand_N_Record_Representation_Clause): Ignore mod\n+\tclause if -gnatI is set instead of crashing.\n+\n+2009-07-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch11.adb (Same_Expression): Null is always equal to itself.\n+\tAdditional work to remove redundant successive raise statements, in\n+\tthis case access checks.\n+\n+2009-07-10  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Compile): Always create a deep copy of the mapping file\n+\targument (-gnatem=...) as it may be deallocate/reallocate by\n+\tNormalize_Arguments.\n+\n+2009-07-10  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.adb (Directly_Designated_Type): Add assertion.\n+\t\n+\t* sem_res.adb (Check_Fully_Declared_Prefix): Add missing check on\n+\taccess types before using attribute Directly_Designated_Type.\n+\n+2009-07-10  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj.ads: Minor typo fix\n+\n+2009-07-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Add_Extra_Formal): Protected operations do no need\n+\tspecial treatment.\n+\n+\t* exp_ch6.adb (Expand_Protected_Subprogram_Call): If rewritten\n+\tsubprogram is a function call, resolve properly, to ensure that extra\n+\tactuals are added as needed.\n+\n 2009-07-10  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_aggr.adb: Minor comments editing"}, {"sha": "f038f233599892bc9e8b77992d939535b81db8e5", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -808,6 +808,7 @@ package body Einfo is\n \n    function Directly_Designated_Type (Id : E) return E is\n    begin\n+      pragma Assert (Is_Access_Type (Id));\n       return Node20 (Id);\n    end Directly_Designated_Type;\n "}, {"sha": "3b682cf04aef7b4486e40d0d7d99f2f01032b0ed", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -396,7 +396,7 @@ package body Exp_Ch13 is\n       AtM_Nod : Node_Id;\n \n    begin\n-      if Present (Mod_Clause (N)) then\n+      if Present (Mod_Clause (N)) and then not Ignore_Rep_Clauses then\n          Mod_Val := Expr_Value (Expression (Mod_Clause (N)));\n          Citems  := Pragmas_Before (Mod_Clause (N));\n "}, {"sha": "c3abeca02e8b50d10e21232cf86670626eadfdef", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -3236,6 +3236,7 @@ package body Exp_Ch6 is\n                        (Passoc, Next_Named_Actual (Parent (Temp)));\n                   end loop;\n                end;\n+\n             end if;\n          end;\n       end if;\n@@ -4652,14 +4653,23 @@ package body Exp_Ch6 is\n \n       end if;\n \n-      Analyze (N);\n-\n       --  If it is a function call it can appear in elaboration code and\n       --  the called entity must be frozen here.\n \n       if Ekind (Subp) = E_Function then\n          Freeze_Expression (Name (N));\n       end if;\n+\n+      --  Analyze and resolve the new call. The actuals have already been\n+      --  resolved, but expansion  of a function call will add extra actuals\n+      --  if needed. Analysis of a procedure call already includes resolution.\n+\n+      Analyze (N);\n+\n+      if Ekind (Subp) = E_Function then\n+         Resolve (N, Etype (Subp));\n+      end if;\n+\n    end Expand_Protected_Subprogram_Call;\n \n    --------------------------------"}, {"sha": "bd0d371c19d98e8c0db090875614a871a4d8cbe0", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -444,8 +444,9 @@ package body Exp_Ch7 is\n \n       --  If the type is declared in a package declaration and designates a\n       --  Taft amendment type that requires finalization, place declaration\n-      --  of finaliztion list in the body, because no client of the package\n-      --  can create objects of the type and thus make use of this list.\n+      --  of finalization list in the body, because no client of the package\n+      --  can create objects of the type and thus make use of this list. This\n+      --  ensures the tree for the spec is identical whenever it is compiled.\n \n       if Has_Completion_In_Body (Directly_Designated_Type (Typ))\n         and then In_Package_Body (Current_Scope)"}, {"sha": "f91d705142fffc4e534a5ebc0269f52f7a30a79d", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -3090,9 +3090,9 @@ package body Make is\n             end if;\n          end if;\n \n-         if Create_Mapping_File then\n+         if Create_Mapping_File and then Mapping_File_Arg /= null then\n             Comp_Last := Comp_Last + 1;\n-            Comp_Args (Comp_Last) := Mapping_File_Arg;\n+            Comp_Args (Comp_Last) := new String'(Mapping_File_Arg.all);\n          end if;\n \n          Get_Name_String (S);"}, {"sha": "797a4795ca93692036e1d1d4fe6f6b069c5ebf49", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -669,7 +669,7 @@ package Prj is\n \n       Unit                   : Unit_Index          := No_Unit_Index;\n       --  Name of the unit, if language is unit based. This is only set for\n-      --  those finles that are part of the compilation set (for instance a\n+      --  those files that are part of the compilation set (for instance a\n       --  file in an extended project that is overridden will not have this\n       --  field set).\n "}, {"sha": "d54c6f8a04f2a472649f896749569485e5a6cf6b", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -585,6 +585,9 @@ package body Sem_Ch11 is\n             return Same_Expression (Left_Opnd (C1), Left_Opnd (C2))\n               and then Same_Expression (Right_Opnd (C1), Right_Opnd (C2));\n \n+         elsif Nkind (C1) = N_Null then\n+            return True;\n+\n          else\n             return False;\n          end if;"}, {"sha": "9e2143ac8073e1464d64287929699082ca332c21", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -5496,16 +5496,8 @@ package body Sem_Ch6 is\n              (No (P_Formal)\n                or else Present (Extra_Accessibility (P_Formal)))\n          then\n-            --  Temporary kludge: for now we avoid creating the extra formal\n-            --  for access parameters of protected operations because of\n-            --  problem with the case of internal protected calls. ???\n-\n-            if Nkind (Parent (Parent (Parent (E)))) /= N_Protected_Definition\n-              and then Nkind (Parent (Parent (Parent (E)))) /= N_Protected_Body\n-            then\n-               Set_Extra_Accessibility\n-                 (Formal, Add_Extra_Formal (Formal, Standard_Natural, E, \"F\"));\n-            end if;\n+            Set_Extra_Accessibility\n+              (Formal, Add_Extra_Formal (Formal, Standard_Natural, E, \"F\"));\n          end if;\n \n          --  This label is required when skipping extra formal generation for"}, {"sha": "8a88cd3c5c9a899032070a38542e1967dfaf30c4", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811c6a85c4e29f55dc408dcf6f5dff08c5a4f999/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=811c6a85c4e29f55dc408dcf6f5dff08c5a4f999", "patch": "@@ -675,6 +675,7 @@ package body Sem_Res is\n \n       elsif Ada_Version >= Ada_05\n         and then Is_Entity_Name (Pref)\n+        and then Is_Access_Type (Etype (Pref))\n         and then Ekind (Directly_Designated_Type (Etype (Pref))) =\n                                                        E_Incomplete_Type\n         and then Is_Tagged_Type (Directly_Designated_Type (Etype (Pref)))"}]}