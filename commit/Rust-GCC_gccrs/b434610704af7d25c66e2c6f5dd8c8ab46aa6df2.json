{"sha": "b434610704af7d25c66e2c6f5dd8c8ab46aa6df2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQzNDYxMDcwNGFmN2QyNWM2NmUyYzZmNWRkOGM4YWI0NmFhNmRmMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-05-16T13:16:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-05-16T13:16:28Z"}, "message": "nvptx.c (nvptx_mangle_decl_assembler_name): Revert.\n\n\t* config/nvptx/nvptx.c (nvptx_mangle_decl_assembler_name): Revert.\n\t(nvptx_name_replacement): Restore.  Add comment.\n\t(write_fn_proto, write_fn_proto_from_insn,\n\tnvptx_output_call_insn): Restore\n\t(TARGET_MANGLE_DECL_ASSEMBLER_NAME): Delete.\n\nFrom-SVN: r236286", "tree": {"sha": "57bfa3c1f3776a5005afc0c4c1a4a22c04abce2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57bfa3c1f3776a5005afc0c4c1a4a22c04abce2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b434610704af7d25c66e2c6f5dd8c8ab46aa6df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b434610704af7d25c66e2c6f5dd8c8ab46aa6df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b434610704af7d25c66e2c6f5dd8c8ab46aa6df2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b434610704af7d25c66e2c6f5dd8c8ab46aa6df2/comments", "author": null, "committer": null, "parents": [{"sha": "954224d7318d36379c7c997d51cc72ce1e62a7e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954224d7318d36379c7c997d51cc72ce1e62a7e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954224d7318d36379c7c997d51cc72ce1e62a7e7"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "4ecd3e7919eaf250bf325fb2005d3f6b871c0b81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b434610704af7d25c66e2c6f5dd8c8ab46aa6df2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b434610704af7d25c66e2c6f5dd8c8ab46aa6df2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b434610704af7d25c66e2c6f5dd8c8ab46aa6df2", "patch": "@@ -1,3 +1,11 @@\n+2016-05-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.c (nvptx_mangle_decl_assembler_name): Revert.\n+\t(nvptx_name_replacement): Restore.  Add comment.\n+\t(write_fn_proto, write_fn_proto_from_insn,\n+\tnvptx_output_call_insn): Restore\n+\t(TARGET_MANGLE_DECL_ASSEMBLER_NAME): Delete.\n+\n 2016-05-16  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.md\n@@ -59,8 +67,8 @@\n 2016-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (report_inline_failed_reason): Look into thunks, too\n-\t(inline_small_functions): Do not look for function symbol when resetting\n-\tcaches.\n+\t(inline_small_functions): Do not look for function symbol when\n+\tresetting caches.\n \n 2016-05-16  Jan Hubicka  <hubicka@ucw.cz>\n "}, {"sha": "e81a450a20c7742fca455c2d7eb1ec6e033f27fd", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b434610704af7d25c66e2c6f5dd8c8ab46aa6df2/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b434610704af7d25c66e2c6f5dd8c8ab46aa6df2/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=b434610704af7d25c66e2c6f5dd8c8ab46aa6df2", "patch": "@@ -211,31 +211,6 @@ nvptx_ptx_type_from_mode (machine_mode mode, bool promote)\n     }\n }\n \n-/* Return an identifier node for DECL.  Usually thee default mangled\n-   name ID is useable.  Some names cannot be used directly, so prefix\n-   them with __nvptx_.  */\n-\n-static tree\n-nvptx_mangle_decl_assembler_name (tree ARG_UNUSED (decl), tree id)\n-{\n-  static const char *const bad_names[] =\n-    {\"call\", \"malloc\", \"free\", \"realloc\", 0};\n-  int ix;\n-  const char *name = IDENTIFIER_POINTER (id);\n-\n-  for (ix = 0; bad_names[ix]; ix++)\n-    if (!strcmp (bad_names[ix], name))\n-      {\n-\tchar *new_name = XALLOCAVEC (char,\n-\t\t\t\t     strlen (name) + sizeof (\"__nvptx_\"));\n-\tsprintf (new_name, \"__nvptx_%s\", name);\n-\tid = get_identifier (new_name);\n-\tbreak;\n-      }\n-\n-  return id;\n-}\n-\n /* Encode the PTX data area that DECL (which might not actually be a\n    _DECL) should reside in.  */\n \n@@ -281,6 +256,27 @@ section_for_decl (const_tree decl)\n   return section_for_sym (XEXP (DECL_RTL (CONST_CAST (tree, decl)), 0));\n }\n \n+/* Check NAME for special function names and redirect them by returning a\n+   replacement.  This applies to malloc, free and realloc, for which we\n+   want to use libgcc wrappers, and call, which triggers a bug in\n+   ptxas.  We can't use TARGET_MANGLE_DECL_ASSEMBLER_NAME, as that's\n+   not active in an offload compiler -- the names are all set by the\n+   host-side compiler.  */\n+\n+static const char *\n+nvptx_name_replacement (const char *name)\n+{\n+  if (strcmp (name, \"call\") == 0)\n+    return \"__nvptx_call\";\n+  if (strcmp (name, \"malloc\") == 0)\n+    return \"__nvptx_malloc\";\n+  if (strcmp (name, \"free\") == 0)\n+    return \"__nvptx_free\";\n+  if (strcmp (name, \"realloc\") == 0)\n+    return \"__nvptx_realloc\";\n+  return name;\n+}\n+\n /* If MODE should be treated as two registers of an inner mode, return\n    that inner mode.  Otherwise return VOIDmode.  */\n \n@@ -738,8 +734,13 @@ write_fn_proto (std::stringstream &s, bool is_defn,\n   if (is_defn)\n     /* Emit a declaration. The PTX assembler gets upset without it.   */\n     name = write_fn_proto (s, false, name, decl);\n-  else if (name[0] == '*')\n-    name++;\n+  else\n+    {\n+      /* Avoid repeating the name replacement.  */\n+      name = nvptx_name_replacement (name);\n+      if (name[0] == '*')\n+\tname++;\n+    }\n \n   write_fn_marker (s, is_defn, TREE_PUBLIC (decl), name);\n \n@@ -843,6 +844,7 @@ write_fn_proto_from_insn (std::stringstream &s, const char *name,\n     }\n   else\n     {\n+      name = nvptx_name_replacement (name);\n       write_fn_marker (s, false, true, name);\n       s << \"\\t.extern .func \";\n     }\n@@ -1860,6 +1862,7 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n   if (decl)\n     {\n       const char *name = get_fnname_from_decl (decl);\n+      name = nvptx_name_replacement (name);\n       assemble_name (asm_out_file, name);\n     }\n   else\n@@ -4887,9 +4890,6 @@ nvptx_goacc_reduction (gcall *call)\n #undef TARGET_NO_REGISTER_ALLOCATION\n #define TARGET_NO_REGISTER_ALLOCATION true\n \n-#undef TARGET_MANGLE_DECL_ASSEMBLER_NAME\n-#define TARGET_MANGLE_DECL_ASSEMBLER_NAME nvptx_mangle_decl_assembler_name\n-\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO nvptx_encode_section_info\n #undef TARGET_RECORD_OFFLOAD_SYMBOL"}]}