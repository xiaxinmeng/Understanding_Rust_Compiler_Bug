{"sha": "7790df190afbe938f40506f1c75cfe7bef68496a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5MGRmMTkwYWZiZTkzOGY0MDUwNmYxYzc1Y2ZlN2JlZjY4NDk2YQ==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1999-08-19T15:53:10Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "1999-08-19T15:53:10Z"}, "message": "alias.c: Include tree.h.\n\n\t* alias.c: Include tree.h.\n\t(nonlocal_reference_p, mark_constant_function): New functions.\n\t* flow.c (life_analysis): Call mark_constant_function.\n\t* rtl.h (mark_constant_function): Declare it.\n\nFrom-SVN: r28762", "tree": {"sha": "b5d7f5fb33fe1cfcee95d242ae0adb1d10bea2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d7f5fb33fe1cfcee95d242ae0adb1d10bea2f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7790df190afbe938f40506f1c75cfe7bef68496a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7790df190afbe938f40506f1c75cfe7bef68496a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7790df190afbe938f40506f1c75cfe7bef68496a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7790df190afbe938f40506f1c75cfe7bef68496a/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4406229e16dd8ae08e135fdf156cc42e1baa6bf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4406229e16dd8ae08e135fdf156cc42e1baa6bf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4406229e16dd8ae08e135fdf156cc42e1baa6bf0"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "046606b1f661a6cee2058252bf0eff27f8812998", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7790df190afbe938f40506f1c75cfe7bef68496a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7790df190afbe938f40506f1c75cfe7bef68496a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7790df190afbe938f40506f1c75cfe7bef68496a", "patch": "@@ -1,3 +1,10 @@\n+Thu Aug 19 11:51:22 EDT 1999  John Wehle  (john@feith.com)\n+\n+\t* alias.c: Include tree.h.\n+\t(nonlocal_reference_p, mark_constant_function): New functions.\n+\t* flow.c (life_analysis): Call mark_constant_function.\n+\t* rtl.h (mark_constant_function): Declare it.\n+\n Thu Aug 19 15:02:01 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/rs6000/rs6000.c (rs6000_override_options): Fix test for"}, {"sha": "5f4d4277e08fa78291f62709a020711fec2c9f09", "filename": "gcc/alias.c", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7790df190afbe938f40506f1c75cfe7bef68496a/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7790df190afbe938f40506f1c75cfe7bef68496a/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=7790df190afbe938f40506f1c75cfe7bef68496a", "patch": "@@ -22,6 +22,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"rtl.h\"\n+#include \"tree.h\"\n #include \"function.h\"\n #include \"expr.h\"\n #include \"regs.h\"\n@@ -1335,6 +1336,149 @@ output_dependence (mem, x)\n   return write_dependence_p (mem, x, /*writep=*/1);\n }\n \n+/* Returns non-zero if X might refer to something which is not\n+   local to the function and is not constant.  */\n+\n+static int\n+nonlocal_reference_p (x)\n+     rtx x;\n+{\n+  rtx base;\n+  register RTX_CODE code;\n+  int regno;\n+\n+  code = GET_CODE (x);\n+\n+  if (GET_RTX_CLASS (code) == 'i')\n+    {\n+      /* Constant functions are constant.  */\n+      if (code == CALL_INSN && CONST_CALL_P (x))\n+\treturn 0;\n+      x = PATTERN (x);\n+      code = GET_CODE (x);\n+    }\n+\n+  switch (code)\n+    {\n+    case SUBREG:\n+      if (GET_CODE (SUBREG_REG (x)) == REG)\n+\t{\n+\t  /* Global registers are not local.  */\n+\t  if (REGNO (SUBREG_REG (x)) < FIRST_PSEUDO_REGISTER\n+\t      && global_regs[REGNO (SUBREG_REG (x)) + SUBREG_WORD (x)])\n+\t    return 1;\n+\t  return 0;\n+\t}\n+      break;\n+\n+    case REG:\n+      regno = REGNO (x);\n+      /* Global registers are not local.  */\n+      if (regno < FIRST_PSEUDO_REGISTER && global_regs[regno])\n+\treturn 1;\n+      return 0;\n+\n+    case SCRATCH:\n+    case PC:\n+    case CC0:\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+    case CONST:\n+    case LABEL_REF:\n+      return 0;\n+\n+    case SYMBOL_REF:\n+      /* Constants in the function's constants pool are constant.  */\n+      if (CONSTANT_POOL_ADDRESS_P (x))\n+\treturn 0;\n+      return 1;\n+\n+    case CALL:\n+      /* Recursion introduces no additional considerations.  */\n+      if (GET_CODE (XEXP (x, 0)) == MEM\n+\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == SYMBOL_REF\n+\t  && strcmp(XSTR (XEXP (XEXP (x, 0), 0), 0),\n+\t\t    IDENTIFIER_POINTER (\n+\t\t\t  DECL_ASSEMBLER_NAME (current_function_decl))) == 0)\n+\treturn 0;\n+      return 1;\n+\n+    case MEM:\n+      /* Be overly conservative and consider any volatile memory\n+\t reference as not local.  */\n+      if (MEM_VOLATILE_P (x))\n+\treturn 1;\n+      base = find_base_term (XEXP (x, 0));\n+      if (base)\n+\t{\n+\t  /* Stack references are local.  */\n+\t  if (GET_CODE (base) == ADDRESS && GET_MODE (base) == Pmode)\n+\t    return 0;\n+\t  /* Constants in the function's constant pool are constant.  */\n+\t  if (GET_CODE (base) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (base))\n+\t    return 0;\n+\t}\n+      return 1;\n+\n+    case ASM_INPUT:\n+    case ASM_OPERANDS:\n+      return 1;\n+\n+    default:\n+      break;\n+    }\n+\n+  /* Recursively scan the operands of this expression.  */\n+\n+  {\n+    register char *fmt = GET_RTX_FORMAT (code);\n+    register int i;\n+    \n+    for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+      {\n+\tif (fmt[i] == 'e')\n+\t  {\n+\t    if (nonlocal_reference_p (XEXP (x, i)))\n+\t      return 1;\n+\t  }\n+\tif (fmt[i] == 'E')\n+\t  {\n+\t    register int j;\n+\t    for (j = 0; j < XVECLEN (x, i); j++)\n+\t      if (nonlocal_reference_p (XVECEXP (x, i, j)))\n+\t\treturn 1;\n+\t  }\n+      }\n+  }\n+\n+  return 0;\n+}\n+\n+/* Mark the function if it is constant.  */\n+\n+void\n+mark_constant_function ()\n+{\n+  rtx insn;\n+\n+  if (TREE_PUBLIC (current_function_decl)\n+      || TREE_READONLY (current_function_decl)\n+      || TREE_THIS_VOLATILE (current_function_decl)\n+      || TYPE_MODE (TREE_TYPE (current_function_decl)) == VOIDmode)\n+    return;\n+\n+  /* Determine if this is a constant function.  */\n+\n+  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+\t&& nonlocal_reference_p (insn))\n+      return;\n+\n+  /* Mark the function.  */\n+\n+  TREE_READONLY (current_function_decl) = 1;\n+}\n+\n \n static HARD_REG_SET argument_registers;\n "}, {"sha": "3d13baf2681a2691e01014264f17206534f7711b", "filename": "gcc/flow.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7790df190afbe938f40506f1c75cfe7bef68496a/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7790df190afbe938f40506f1c75cfe7bef68496a/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=7790df190afbe938f40506f1c75cfe7bef68496a", "patch": "@@ -2087,7 +2087,12 @@ life_analysis (f, nregs, file, remove_dead_code)\n \n   /* We want alias analysis information for local dead store elimination.  */\n   init_alias_analysis ();\n+\n   life_analysis_1 (f, nregs, remove_dead_code);\n+\n+  if (! reload_completed)\n+    mark_constant_function ();\n+\n   end_alias_analysis ();\n \n   if (file)"}, {"sha": "8f0ff59904a303c878e83010992d79c8fcedaa00", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7790df190afbe938f40506f1c75cfe7bef68496a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7790df190afbe938f40506f1c75cfe7bef68496a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=7790df190afbe938f40506f1c75cfe7bef68496a", "patch": "@@ -1546,6 +1546,7 @@ extern int true_dependence\t\tPROTO ((rtx, enum machine_mode, rtx,\n extern int read_dependence\t\tPROTO ((rtx, rtx));\n extern int anti_dependence\t\tPROTO ((rtx, rtx));\n extern int output_dependence\t\tPROTO ((rtx, rtx));\n+extern void mark_constant_function\tPROTO ((void));\n extern void init_alias_once\t\tPROTO ((void));\n extern void init_alias_analysis\t\tPROTO ((void));\n extern void end_alias_analysis\t\tPROTO ((void));"}]}