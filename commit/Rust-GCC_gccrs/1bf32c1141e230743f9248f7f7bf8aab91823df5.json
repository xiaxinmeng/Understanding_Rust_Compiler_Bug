{"sha": "1bf32c1141e230743f9248f7f7bf8aab91823df5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmMzJjMTE0MWUyMzA3NDNmOTI0OGY3ZjdiZjhhYWI5MTgyM2RmNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-06-19T21:27:45Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-06-19T21:27:45Z"}, "message": "PR c++/60364 - noreturn after first decl not diagnosed.\n\n\t* attribs.c (get_attribute_namespace): No longer static.\n\t(decl_attributes): Avoid shadowing.  Preserve the C++11 form for C++11\n\tattributes.\n\t(attr_noreturn_exclusions): Make it extern.\n\t* attribs.h (get_attribute_namespace): Declare.\n\t* tree-inline.c (function_attribute_inlinable_p): Use\n\tget_attribute_name.\n\n\t* c-attribs.c (handle_noreturn_attribute): No longer static.\n\t* c-common.h (handle_noreturn_attribute, attr_noreturn_exclusions):\n\tDeclare.\n\t* c-format.c (check_function_format): Use get_attribute_name.\n\n\t* decl.c (duplicate_decls): Give an error when a function is\n\tdeclared [[noreturn]] after its first declaration.\n\t* parser.c (cp_parser_std_attribute): Don't treat C++11 noreturn\n\tattribute as equivalent to GNU's.\n\t* tree.c (std_attribute_table): Add noreturn.\n\n\t* g++.dg/warn/noreturn-8.C: New test.\n\t* g++.dg/warn/noreturn-9.C: New test.\n\t* g++.dg/warn/noreturn-10.C: New test.\n\t* g++.dg/warn/noreturn-11.C: New test.\n\nFrom-SVN: r272486", "tree": {"sha": "cf0c040fd768f2b12fa1f83eb56a3b2f9c9153ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf0c040fd768f2b12fa1f83eb56a3b2f9c9153ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bf32c1141e230743f9248f7f7bf8aab91823df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf32c1141e230743f9248f7f7bf8aab91823df5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf32c1141e230743f9248f7f7bf8aab91823df5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf32c1141e230743f9248f7f7bf8aab91823df5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b4a26731e96522a76a6f9fc6a253d41a29238ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b4a26731e96522a76a6f9fc6a253d41a29238ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b4a26731e96522a76a6f9fc6a253d41a29238ef"}], "stats": {"total": 199, "additions": 169, "deletions": 30}, "files": [{"sha": "3f868bacad45f3a5abca5fe7ab28d3b2ef7de9f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -1,3 +1,14 @@\n+2019-06-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/60364 - noreturn after first decl not diagnosed.\n+\t* attribs.c (get_attribute_namespace): No longer static.\n+\t(decl_attributes): Avoid shadowing.  Preserve the C++11 form for C++11\n+\tattributes.\n+\t(attr_noreturn_exclusions): Make it extern.\n+\t* attribs.h (get_attribute_namespace): Declare.\n+\t* tree-inline.c (function_attribute_inlinable_p): Use\n+\tget_attribute_name.\n+\n 2019-06-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/90626"}, {"sha": "8e54016559723fbe79e7bd4edf3cd90720264d50", "filename": "gcc/attribs.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -340,7 +340,7 @@ lookup_attribute_spec (const_tree name)\n    Please read the comments of cxx11_attribute_p to understand the\n    format of attributes.  */\n \n-static tree\n+tree\n get_attribute_namespace (const_tree attr)\n {\n   if (cxx11_attribute_p (attr))\n@@ -469,7 +469,6 @@ tree\n decl_attributes (tree *node, tree attributes, int flags,\n \t\t tree last_decl /* = NULL_TREE */)\n {\n-  tree a;\n   tree returned_attrs = NULL_TREE;\n \n   if (TREE_TYPE (*node) == error_mark_node || attributes == error_mark_node)\n@@ -548,22 +547,23 @@ decl_attributes (tree *node, tree attributes, int flags,\n \n   /* Note that attributes on the same declaration are not necessarily\n      in the same order as in the source.  */\n-  for (a = attributes; a; a = TREE_CHAIN (a))\n+  for (tree attr = attributes; attr; attr = TREE_CHAIN (attr))\n     {\n-      tree ns = get_attribute_namespace (a);\n-      tree name = get_attribute_name (a);\n-      tree args = TREE_VALUE (a);\n+      tree ns = get_attribute_namespace (attr);\n+      tree name = get_attribute_name (attr);\n+      tree args = TREE_VALUE (attr);\n       tree *anode = node;\n       const struct attribute_spec *spec\n \t= lookup_scoped_attribute_spec (ns, name);\n       int fn_ptr_quals = 0;\n       tree fn_ptr_tmp = NULL_TREE;\n+      const bool cxx11_attr_p = cxx11_attribute_p (attr);\n \n       if (spec == NULL)\n \t{\n \t  if (!(flags & (int) ATTR_FLAG_BUILT_IN))\n \t    {\n-\t      if (ns == NULL_TREE || !cxx11_attribute_p (a))\n+\t      if (ns == NULL_TREE || !cxx11_attr_p)\n \t\twarning (OPT_Wattributes, \"%qE attribute directive ignored\",\n \t\t\t name);\n \t      else\n@@ -584,7 +584,7 @@ decl_attributes (tree *node, tree attributes, int flags,\n       gcc_assert (is_attribute_p (spec->name, name));\n \n       if (TYPE_P (*node)\n-\t  && cxx11_attribute_p (a)\n+\t  && cxx11_attr_p\n \t  && !(flags & ATTR_FLAG_TYPE_IN_PLACE))\n \t{\n \t  /* This is a c++11 attribute that appertains to a\n@@ -707,8 +707,7 @@ decl_attributes (tree *node, tree attributes, int flags,\n \n       if (spec->handler != NULL)\n \t{\n-\t  int cxx11_flag =\n-\t    cxx11_attribute_p (a) ? ATTR_FLAG_CXX11 : 0;\n+\t  int cxx11_flag = (cxx11_attr_p ? ATTR_FLAG_CXX11 : 0);\n \n \t  /* Pass in an array of the current declaration followed\n \t     by the last pushed/merged declaration if  one exists.\n@@ -756,17 +755,23 @@ decl_attributes (tree *node, tree attributes, int flags,\n \t  if (a == NULL_TREE)\n \t    {\n \t      /* This attribute isn't already in the list.  */\n+\t      tree r;\n+\t      /* Preserve the C++11 form.  */\n+\t      if (cxx11_attr_p)\n+\t\tr = tree_cons (build_tree_list (ns, name), args, old_attrs);\n+\t      else\n+\t\tr = tree_cons (name, args, old_attrs);\n+\n \t      if (DECL_P (*anode))\n-\t\tDECL_ATTRIBUTES (*anode) = tree_cons (name, args, old_attrs);\n+\t\tDECL_ATTRIBUTES (*anode) = r;\n \t      else if (flags & (int) ATTR_FLAG_TYPE_IN_PLACE)\n \t\t{\n-\t\t  TYPE_ATTRIBUTES (*anode) = tree_cons (name, args, old_attrs);\n+\t\t  TYPE_ATTRIBUTES (*anode) = r;\n \t\t  /* If this is the main variant, also push the attributes\n \t\t     out to the other variants.  */\n \t\t  if (*anode == TYPE_MAIN_VARIANT (*anode))\n \t\t    {\n-\t\t      tree variant;\n-\t\t      for (variant = *anode; variant;\n+\t\t      for (tree variant = *anode; variant;\n \t\t\t   variant = TYPE_NEXT_VARIANT (variant))\n \t\t\t{\n \t\t\t  if (TYPE_ATTRIBUTES (variant) == old_attrs)\n@@ -780,9 +785,7 @@ decl_attributes (tree *node, tree attributes, int flags,\n \t\t    }\n \t\t}\n \t      else\n-\t\t*anode = build_type_attribute_variant (*anode,\n-\t\t\t\t\t\t       tree_cons (name, args,\n-\t\t\t\t\t\t\t\t  old_attrs));\n+\t\t*anode = build_type_attribute_variant (*anode, r);\n \t    }\n \t}\n "}, {"sha": "23a7321e04ad78ffa2525d1fce6081d97a2faf20", "filename": "gcc/attribs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -35,6 +35,7 @@ extern tree decl_attributes (tree *, tree, int, tree = NULL_TREE);\n \n extern bool cxx11_attribute_p (const_tree);\n extern tree get_attribute_name (const_tree);\n+extern tree get_attribute_namespace (const_tree);\n extern void apply_tm_attr (tree, tree);\n extern tree make_attribute (const char *, const char *, tree);\n "}, {"sha": "e744561f67a9cd4e6b92157a2603d23fabfe63f9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -1,3 +1,11 @@\n+2019-06-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/60364 - noreturn after first decl not diagnosed.\n+\t* c-attribs.c (handle_noreturn_attribute): No longer static.\n+\t* c-common.h (handle_noreturn_attribute, attr_noreturn_exclusions):\n+\tDeclare.\n+\t* c-format.c (check_function_format): Use get_attribute_name.\n+\n 2019-06-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR translation/90156"}, {"sha": "48819e74e5b619639fd4293b605d12d7ee6a809c", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -49,7 +49,6 @@ along with GCC; see the file COPYING3.  If not see\n static tree handle_packed_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nocommon_attribute (tree *, tree, tree, int, bool *);\n static tree handle_common_attribute (tree *, tree, tree, int, bool *);\n-static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_hot_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cold_attribute (tree *, tree, tree, int, bool *);\n static tree handle_no_sanitize_attribute (tree *, tree, tree, int, bool *);\n@@ -190,7 +189,7 @@ static const struct attribute_spec::exclusions attr_noinline_exclusions[] =\n   ATTR_EXCL (NULL, false, false, false),\n };\n \n-static const struct attribute_spec::exclusions attr_noreturn_exclusions[] =\n+extern const struct attribute_spec::exclusions attr_noreturn_exclusions[] =\n {\n   ATTR_EXCL (\"alloc_align\", true, true, true),\n   ATTR_EXCL (\"alloc_size\", true, true, true),\n@@ -779,7 +778,7 @@ handle_common_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n /* Handle a \"noreturn\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n-static tree\n+tree\n handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n {"}, {"sha": "5ac6e5eacf94513f349b0bab64539e4d12786631", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -1344,6 +1344,8 @@ extern int tm_attr_to_mask (tree);\n extern tree tm_mask_to_attr (int);\n extern tree find_tm_attribute (tree);\n extern const struct attribute_spec::exclusions attr_cold_hot_exclusions[];\n+extern const struct attribute_spec::exclusions attr_noreturn_exclusions[];\n+extern tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n \n /* In c-format.c.  */\n extern bool valid_format_string_type_p (tree);"}, {"sha": "6363fa4f686c2d56886dc66ea6d7ce1321c20ecd", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -1168,7 +1168,7 @@ check_function_format (const_tree fntype, tree attrs, int nargs,\n   /* See if this function has any format attributes.  */\n   for (a = attrs; a; a = TREE_CHAIN (a))\n     {\n-      if (is_attribute_p (\"format\", TREE_PURPOSE (a)))\n+      if (is_attribute_p (\"format\", get_attribute_name (a)))\n \t{\n \t  /* Yup; check it.  */\n \t  function_format_info info;"}, {"sha": "5b659269b1f1b7bf253553b99fd3c11e1eedffda", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -1,3 +1,12 @@\n+2019-06-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/60364 - noreturn after first decl not diagnosed.\n+\t* decl.c (duplicate_decls): Give an error when a function is\n+\tdeclared [[noreturn]] after its first declaration.\n+\t* parser.c (cp_parser_std_attribute): Don't treat C++11 noreturn\n+\tattribute as equivalent to GNU's.\n+\t* tree.c (std_attribute_table): Add noreturn.\n+\n 2019-06-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-gimplify.c (cp_genericize_r): Handle OMP_CLAUSE_{IN,EX}CLUSIVE"}, {"sha": "85f96f7373966a0ee9dd45c02d33720928795692", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -1922,10 +1922,29 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {\n-      if (merge_attr && diagnose_mismatched_attributes (olddecl, newdecl))\n-\tinform (olddecl_loc, DECL_INITIAL (olddecl)\n-\t\t? G_(\"previous definition of %qD here\")\n-\t\t: G_(\"previous declaration of %qD here\"), olddecl);\n+      if (merge_attr)\n+\t{\n+\t  if (diagnose_mismatched_attributes (olddecl, newdecl))\n+\t    inform (olddecl_loc, DECL_INITIAL (olddecl)\n+\t\t    ? G_(\"previous definition of %qD here\")\n+\t\t    : G_(\"previous declaration of %qD here\"), olddecl);\n+\n+\t  /* [dcl.attr.noreturn]: The first declaration of a function shall\n+\t     specify the noreturn attribute if any declaration of that function\n+\t     specifies the noreturn attribute.  */\n+\t  tree a;\n+\t  if (TREE_THIS_VOLATILE (newdecl)\n+\t      && !TREE_THIS_VOLATILE (olddecl)\n+\t      /* This applies to [[noreturn]] only, not its GNU variants.  */\n+\t      && (a = lookup_attribute (\"noreturn\", DECL_ATTRIBUTES (newdecl)))\n+\t      && cxx11_attribute_p (a)\n+\t      && get_attribute_namespace (a) == NULL_TREE)\n+\t    {\n+\t      error_at (newdecl_loc, \"function %qD declared %<[[noreturn]]%> \"\n+\t\t\t\"but its first declaration was not\", newdecl);\n+\t      inform (olddecl_loc, \"previous declaration of %qD\", olddecl);\n+\t    }\n+\t}\n \n       /* Now that functions must hold information normally held\n \t by field decls, there is extra work to do so that"}, {"sha": "561d0e2d6ee8ece6eccd5f7ad6e89bf98fbcc5d2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -26121,11 +26121,11 @@ cp_parser_std_attribute (cp_parser *parser, tree attr_ns)\n       attr_id = canonicalize_attr_name (attr_id);\n       attribute = build_tree_list (build_tree_list (NULL_TREE, attr_id),\n \t\t\t\t   NULL_TREE);\n-      /* C++11 noreturn attribute is equivalent to GNU's.  */\n-      if (is_attribute_p (\"noreturn\", attr_id))\n-\tTREE_PURPOSE (TREE_PURPOSE (attribute)) = gnu_identifier;\n+      /* We used to treat C++11 noreturn attribute as equivalent to GNU's,\n+\t but no longer: we have to be able to tell [[noreturn]] and\n+\t __attribute__((noreturn)) apart.  */\n       /* C++14 deprecated attribute is equivalent to GNU's.  */\n-      else if (is_attribute_p (\"deprecated\", attr_id))\n+      if (is_attribute_p (\"deprecated\", attr_id))\n \tTREE_PURPOSE (TREE_PURPOSE (attribute)) = gnu_identifier;\n       /* C++17 fallthrough attribute is equivalent to GNU's.  */\n       else if (is_attribute_p (\"fallthrough\", attr_id))"}, {"sha": "978aea56193592fb3a92bc77068c7bb434aadc4a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -4453,6 +4453,8 @@ const struct attribute_spec std_attribute_table[] =\n     handle_likeliness_attribute, attr_cold_hot_exclusions },\n   { \"unlikely\", 0, 0, false, false, false, false,\n     handle_likeliness_attribute, attr_cold_hot_exclusions },\n+  { \"noreturn\", 0, 0, true, false, false, false,\n+    handle_noreturn_attribute, attr_noreturn_exclusions },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n };\n "}, {"sha": "521be1fba16c1acf0c92023f8d981dbbecca7da6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -1,3 +1,11 @@\n+2019-06-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/60364 - noreturn after first decl not diagnosed.\n+\t* g++.dg/warn/noreturn-8.C: New test.\n+\t* g++.dg/warn/noreturn-9.C: New test.\n+\t* g++.dg/warn/noreturn-10.C: New test.\n+\t* g++.dg/warn/noreturn-11.C: New test.\n+\n 2019-06-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/90626"}, {"sha": "6f7df48bf18ba3498fcf63babe51cc8469ed5e4b", "filename": "gcc/testsuite/g++.dg/warn/noreturn-10.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-10.C?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/60364\n+// { dg-do compile { target c++11 } }\n+\n+void* fn1 [[gnu::returns_twice, noreturn]] (); // { dg-warning \"ignoring attribute 'noreturn' because it conflicts with attribute 'returns_twice'\" }\n+void* fn2 [[gnu::alloc_align(1), noreturn]] (int); // { dg-warning \"ignoring attribute 'noreturn' because it conflicts with attribute 'alloc_align'\" }\n+void* fn3 [[gnu::alloc_size(1), noreturn]] (int); // { dg-warning \"ignoring attribute 'noreturn' because it conflicts with attribute 'alloc_size'\" }\n+void* fn4 [[gnu::const, noreturn]] (); // { dg-warning \"ignoring attribute 'noreturn' because it conflicts with attribute 'const'\" }\n+void* fn5 [[gnu::malloc, noreturn]] (int); // { dg-warning \"ignoring attribute 'noreturn' because it conflicts with attribute 'malloc'\" }\n+void* fn6 [[gnu::pure, noreturn]] (); // { dg-warning \"ignoring attribute 'noreturn' because it conflicts with attribute 'pure'\" }\n+void* fn7 [[gnu::warn_unused_result, noreturn]] (); // { dg-warning \"ignoring attribute 'noreturn' because it conflicts with attribute 'warn_unused_result'\" }"}, {"sha": "e0265eba701731ba6d5ba6e73d056ff3c8e2106c", "filename": "gcc/testsuite/g++.dg/warn/noreturn-11.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-11.C?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/60364\n+// { dg-do compile { target c++11 } }\n+\n+void f1 ();\n+void f1 [[gnu::noreturn]] ();\n+void f1 [[noreturn]] ();\n+\n+void f2 ();\n+__attribute__((noreturn)) void f2 ();\n+void f2 [[noreturn]] ();\n+\n+void f3 ();\n+void f3 [[gnu::noreturn]] ();\n+void f3 ();\n+void f3 [[noreturn]] ();\n+\n+void f4 ();\n+void f4 ();\n+void f4 ();\n+void f4 [[noreturn]] (); // { dg-error \"declared '\\\\\\[\\\\\\[noreturn\\\\\\]\\\\\\]' but its first declaration was not\" }\n+\n+void f5 [[noreturn]] ();\n+void f5 ();\n+void f5 ();\n+void f5 [[noreturn]] ();"}, {"sha": "d465468decb781395c94ebb486212827d7227264", "filename": "gcc/testsuite/g++.dg/warn/noreturn-8.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-8.C?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/60364\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpedantic\" }\n+\n+void f (); // { dg-message \"previous declaration\" }\n+void f [[noreturn]] (); // { dg-error \"declared '\\\\\\[\\\\\\[noreturn\\\\\\]\\\\\\]' but its first declaration was not\" }\n+\n+void f2 ();\n+void f2 [[gnu::noreturn]] ();\n+\n+void f3 ();\n+__attribute__((noreturn)) void f3 ();\n+\n+void f4 () { __builtin_abort (); } // { dg-message \"previous declaration\" }\n+void f4 [[noreturn]] (); // { dg-error \"declared '\\\\\\[\\\\\\[noreturn\\\\\\]\\\\\\]' but its first declaration was not\" }\n+\n+void f5 () { __builtin_abort (); }\n+void f5 [[gnu::noreturn]] ();\n+\n+void f6 () { __builtin_abort (); }\n+__attribute__((noreturn)) void f6 ();"}, {"sha": "f7ede57aab05ff69ef1248ee500fff9873425675", "filename": "gcc/testsuite/g++.dg/warn/noreturn-9.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnoreturn-9.C?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/60364\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpedantic\" }\n+\n+void f1 [[gnu::noreturn]] ();\n+void f1 [[noreturn]] ();\n+\n+void f2 [[noreturn]] ();\n+void f2 [[gnu::noreturn]] ();\n+\n+__attribute__((noreturn)) void f3 ();\n+void f3 [[noreturn]] ();\n+\n+void f4 [[noreturn]] ();\n+__attribute__((noreturn)) void f4 ();\n+\n+__attribute__((noreturn)) void f5 ();\n+void f5 [[gnu::noreturn]] ();\n+\n+void f6 [[gnu::noreturn]] ();\n+__attribute__((noreturn)) void f6 ();"}, {"sha": "2de5e22f10fd60bee904de1f77578424b82fb7bf", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf32c1141e230743f9248f7f7bf8aab91823df5/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1bf32c1141e230743f9248f7f7bf8aab91823df5", "patch": "@@ -3899,7 +3899,7 @@ function_attribute_inlinable_p (const_tree fndecl)\n \n       for (a = DECL_ATTRIBUTES (fndecl); a; a = TREE_CHAIN (a))\n \t{\n-\t  const_tree name = TREE_PURPOSE (a);\n+\t  const_tree name = get_attribute_name (a);\n \t  int i;\n \n \t  for (i = 0; targetm.attribute_table[i].name != NULL; i++)"}]}