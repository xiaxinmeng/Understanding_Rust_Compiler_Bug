{"sha": "8e3b453e0877288685695ca3e927a2da3b5f5b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUzYjQ1M2UwODc3Mjg4Njg1Njk1Y2EzZTkyN2EyZGEzYjVmNWI3OA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-13T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-13T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "a479d8d26f11707f6bdcb1db6e10d5d26920f6b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a479d8d26f11707f6bdcb1db6e10d5d26920f6b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e3b453e0877288685695ca3e927a2da3b5f5b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e3b453e0877288685695ca3e927a2da3b5f5b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e3b453e0877288685695ca3e927a2da3b5f5b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e3b453e0877288685695ca3e927a2da3b5f5b78/comments", "author": null, "committer": null, "parents": [{"sha": "75452d68672ff7da6e5a167924b6aeb07b5b2ed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75452d68672ff7da6e5a167924b6aeb07b5b2ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75452d68672ff7da6e5a167924b6aeb07b5b2ed1"}], "stats": {"total": 501, "additions": 500, "deletions": 1}, "files": [{"sha": "8c2547690175f404b73c31f3c5fb8a7fa8b05212", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3b453e0877288685695ca3e927a2da3b5f5b78/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3b453e0877288685695ca3e927a2da3b5f5b78/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=8e3b453e0877288685695ca3e927a2da3b5f5b78", "patch": "@@ -1,3 +1,7 @@\n+2020-06-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* .gitignore: Add .clang-tidy.\n+\n 2020-06-08  Jason Merrill  <jason@redhat.com>\n \n \t* configure.ac: Check AX_CXX_COMPILE_STDCXX if not bootstrapping."}, {"sha": "7a13b05e117d08c952938fbb551ab8e0d15ec65f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3b453e0877288685695ca3e927a2da3b5f5b78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3b453e0877288685695ca3e927a2da3b5f5b78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e3b453e0877288685695ca3e927a2da3b5f5b78", "patch": "@@ -1,3 +1,133 @@\n+2020-06-12  Marco Elver  <elver@google.com>\n+\n+\t* gimplify.c (gimplify_function_tree): Optimize and do not emit\n+\tIFN_TSAN_FUNC_EXIT in a finally block if we do not need it.\n+\t* params.opt: Add --param=tsan-instrument-func-entry-exit=.\n+\t* tsan.c (instrument_memory_accesses): Make\n+\tfentry_exit_instrument bool depend on new param.\n+\n+2020-06-12  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR tree-optimization/95570\n+\t* tree-vect-data-refs.c (vect_relevant_for_alignment_p): New function.\n+\t(vect_verify_datarefs_alignment): Call it to filter out data references\n+\tin the loop whose alignment is irrelevant.\n+\t(vect_get_peeling_costs_all_drs): Likewise.\n+\t(vect_peeling_supportable): Likewise.\n+\t(vect_enhance_data_refs_alignment): Likewise.\n+\n+2020-06-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95633\n+\t* tree-vect-stmts.c (vectorizable_condition): Properly\n+\tguard the vec_else_clause access with EXTRACT_LAST_REDUCTION.\n+\n+2020-06-12  Martin Li\u0161ka  <mliska@suse.cz>\n+\n+\t* cgraphunit.c (process_symver_attribute): Wrap weakref keyword.\n+\t* dbgcnt.c (dbg_cnt_set_limit_by_index): Do not print extra new\n+\tline.\n+\t* lto-wrapper.c (merge_and_complain): Wrap option names.\n+\n+2020-06-12  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* tree-vect-loop-manip.c (vect_set_loop_controls_directly): Rename\n+\tLOOP_VINFO_MASK_COMPARE_TYPE to LOOP_VINFO_RGROUP_COMPARE_TYPE.  Rename\n+\tLOOP_VINFO_MASK_IV_TYPE to LOOP_VINFO_RGROUP_IV_TYPE.\n+\t(vect_set_loop_condition_masked): Renamed to ...\n+\t(vect_set_loop_condition_partial_vectors): ... this.  Rename\n+\tLOOP_VINFO_MASK_COMPARE_TYPE to LOOP_VINFO_RGROUP_COMPARE_TYPE.  Rename\n+\tvect_iv_limit_for_full_masking to vect_iv_limit_for_partial_vectors.\n+\t(vect_set_loop_condition_unmasked): Renamed to ...\n+\t(vect_set_loop_condition_normal): ... this.\n+\t(vect_set_loop_condition): Rename vect_set_loop_condition_unmasked to\n+\tvect_set_loop_condition_normal.  Rename vect_set_loop_condition_masked\n+\tto vect_set_loop_condition_partial_vectors.\n+\t(vect_prepare_for_masked_peels): Rename LOOP_VINFO_MASK_COMPARE_TYPE\n+\tto LOOP_VINFO_RGROUP_COMPARE_TYPE.\n+\t* tree-vect-loop.c (vect_known_niters_smaller_than_vf): New, factored\n+\tout from ...\n+\t(vect_analyze_loop_costing): ... this.\n+\t(_loop_vec_info::_loop_vec_info): Rename mask_compare_type to\n+\tcompare_type.\n+\t(vect_min_prec_for_max_niters): New, factored out from ...\n+\t(vect_verify_full_masking): ... this.  Rename\n+\tvect_iv_limit_for_full_masking to vect_iv_limit_for_partial_vectors.\n+\tRename LOOP_VINFO_MASK_COMPARE_TYPE to LOOP_VINFO_RGROUP_COMPARE_TYPE.\n+\tRename LOOP_VINFO_MASK_IV_TYPE to LOOP_VINFO_RGROUP_IV_TYPE.\n+\t(vectorizable_reduction): Update some dumpings with partial\n+\tvectors instead of fully-masked.\n+\t(vectorizable_live_operation): Likewise.\n+\t(vect_iv_limit_for_full_masking): Renamed to ...\n+\t(vect_iv_limit_for_partial_vectors): ... this.\n+\t* tree-vect-stmts.c (check_load_store_masking): Renamed to ...\n+\t(check_load_store_for_partial_vectors): ... this.  Update some\n+\tdumpings with partial vectors instead of fully-masked.\n+\t(vectorizable_store): Rename check_load_store_masking to\n+\tcheck_load_store_for_partial_vectors.\n+\t(vectorizable_load): Likewise.\n+\t* tree-vectorizer.h (LOOP_VINFO_MASK_COMPARE_TYPE): Renamed to ...\n+\t(LOOP_VINFO_RGROUP_COMPARE_TYPE): ... this.\n+\t(LOOP_VINFO_MASK_IV_TYPE): Renamed to ...\n+\t(LOOP_VINFO_RGROUP_IV_TYPE): ... this.\n+\t(vect_iv_limit_for_full_masking): Renamed to ...\n+\t(vect_iv_limit_for_partial_vectors): this.\n+\t(_loop_vec_info): Rename mask_compare_type to rgroup_compare_type.\n+\tRename iv_type to rgroup_iv_type.\n+\n+2020-06-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* recog.h (insn_gen_fn::f0, insn_gen_fn::f1, insn_gen_fn::f2)\n+\t(insn_gen_fn::f3, insn_gen_fn::f4, insn_gen_fn::f5, insn_gen_fn::f6)\n+\t(insn_gen_fn::f7, insn_gen_fn::f8, insn_gen_fn::f9, insn_gen_fn::f10)\n+\t(insn_gen_fn::f11, insn_gen_fn::f12, insn_gen_fn::f13)\n+\t(insn_gen_fn::f14, insn_gen_fn::f15, insn_gen_fn::f16): Delete.\n+\t(insn_gen_fn::operator()): Replace overloaded definitions with\n+\ta parameter-pack version.\n+\n+2020-06-12  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/93492\n+\t* config/i386/i386-features.c (rest_of_insert_endbranch):\n+\tRenamed to ...\n+\t(rest_of_insert_endbr_and_patchable_area): Change return type\n+\tto void. Add need_endbr and patchable_area_size arguments.\n+\tDon't call timevar_push nor timevar_pop.  Replace\n+\tendbr_queued_at_entrance with insn_queued_at_entrance.  Insert\n+\tUNSPECV_PATCHABLE_AREA for patchable area.\n+\t(pass_data_insert_endbranch): Renamed to ...\n+\t(pass_data_insert_endbr_and_patchable_area): This.  Change\n+\tpass name to endbr_and_patchable_area.\n+\t(pass_insert_endbranch): Renamed to ...\n+\t(pass_insert_endbr_and_patchable_area): This.  Add need_endbr\n+\tand patchable_area_size;.\n+\t(pass_insert_endbr_and_patchable_area::gate): Set and check\n+\tneed_endbr and patchable_area_size.\n+\t(pass_insert_endbr_and_patchable_area::execute): Call\n+\ttimevar_push and timevar_pop.  Pass need_endbr and\n+\tpatchable_area_size to rest_of_insert_endbr_and_patchable_area.\n+\t(make_pass_insert_endbranch): Renamed to ...\n+\t(make_pass_insert_endbr_and_patchable_area): This.\n+\t* config/i386/i386-passes.def: Replace pass_insert_endbranch\n+\twith pass_insert_endbr_and_patchable_area.\n+\t* config/i386/i386-protos.h (ix86_output_patchable_area): New.\n+\t(make_pass_insert_endbranch): Renamed to ...\n+\t(make_pass_insert_endbr_and_patchable_area): This.\n+\t* config/i386/i386.c (ix86_asm_output_function_label): Set\n+\tfunction_label_emitted to true.\n+\t(ix86_print_patchable_function_entry): New function.\n+\t(ix86_output_patchable_area): Likewise.\n+\t(x86_function_profiler): Replace endbr_queued_at_entrance with\n+\tinsn_queued_at_entrance.  Generate ENDBR only for TYPE_ENDBR.\n+\tCall ix86_output_patchable_area to generate patchable area if\n+\tneeded.\n+\t(TARGET_ASM_PRINT_PATCHABLE_FUNCTION_ENTRY): New.\n+\t* config/i386/i386.h (queued_insn_type): New.\n+\t(machine_function): Add function_label_emitted.  Replace\n+\tendbr_queued_at_entrance with insn_queued_at_entrance.\n+\t* config/i386/i386.md (UNSPECV_PATCHABLE_AREA): New.\n+\t(patchable_area): New.\n+\n 2020-06-11  Martin Liska  <mliska@suse.cz>\n \n \t* config/rs6000/rs6000.c (rs6000_density_test): Fix GNU coding"}, {"sha": "d540cbfb2c474b6428f06a650d03316c0079642c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3b453e0877288685695ca3e927a2da3b5f5b78/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3b453e0877288685695ca3e927a2da3b5f5b78/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8e3b453e0877288685695ca3e927a2da3b5f5b78", "patch": "@@ -1 +1 @@\n-20200612\n+20200613"}, {"sha": "decf23f91558a2891a3db64581a0aa5e29e0014a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3b453e0877288685695ca3e927a2da3b5f5b78/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3b453e0877288685695ca3e927a2da3b5f5b78/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8e3b453e0877288685695ca3e927a2da3b5f5b78", "patch": "@@ -1,3 +1,319 @@\n+2020-06-12  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_res.adb (Valid_Conversion): The simpler cases of\n+\tviolations of the aforementioned 8.6 rule are already handled\n+\tcorrectly. These include cases where the operand of the type\n+\tconversion is an access parameter or a stand-alone object of an\n+\tanonymous access type. Add code to detect violations where the\n+\toperand of the type conversion is an access discriminant whose\n+\taccessibility level is tied to one of the other simpler cases.\n+\tThis is implemented in a new function,\n+\tValid_Conversion.Is_Discrim_Of_Bad_Access_Conversion_Argument,\n+\twhich is called in place of the previous test.\n+\n+2020-06-12  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_attr.adb (Put_Image): Remove assertion. This assertion is\n+\tFalse in mixed-Ada-version programs.\n+\t* exp_put_image.adb (Tagged_Put_Image_Enabled): New flag to make\n+\tit easy to experiment with Put_Image on tagged types. False in\n+\tthis version.\n+\t(Enable_Put_Image): Enable in pre-2020.  Workarounds: Disable\n+\tfor tagged types if Tagged_Put_Image_Enabled is False. Disable\n+\tfor access-to-subprogram types.  Disable if errors have been\n+\tdetected, or Sink is unavailable.\n+\t(Preload_Sink): Move all conditionals here, from Sem_Ch10, so\n+\tthey can be nearby related code in Enable_Put_Image.  Load Sink\n+\tonly if we have seen a tagged type.  This removes the dilemma\n+\tabout calling Preload_Sink when compiling the compiler, which\n+\tcaused unwanted dependences.\n+\t* exp_put_image.ads (Preload_Sink): New formal Compilation_Unit,\n+\tneeded to move all conditionals here, from Sem_Ch10.\n+\t* libgnat/a-stouut.adb (Put_UTF_8): Make this suitable for\n+\tinlining, so we don't get warnings about inlining in some tests.\n+\tAnd so it can be inlined!\n+\t* opt.ads (Tagged_Seen): New flag (see Preload_Sink).\n+\t* scng.adb (Scan): Set new Tagged_Seen flag.\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Move conditionals and\n+\tcomments regarding Preload_Sink into Preload_Sink.\n+\n+2020-06-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Check for AI12-0074.\n+\n+2020-06-12  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* libgnat/s-secsta.ads (Memory_Alignment): New constant, memory\n+\talignment for chunks and allocated blocks. Initialize to\n+\tStandard'Maximum_Alignment * 2.\n+\t(Chunk_Memory): Use it.\n+\t* libgnat/s-secsta.adb (Round_Up): Likewise.\n+\n+2020-06-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* par-prag.adb: Fix ordering.\n+\t* snames.ads-tmpl (Name_Test_Case, Pragma_Test_Case): Likewise.\n+\t* sem_prag.adb (Sig_Flags): Likewise.\n+\n+2020-06-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Entity_Name): Fix handling of expressions\n+\tcontaining array attributes wrt Ada 83 detection.\n+\n+2020-06-12  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb: Define 3 new Boolean-valued\n+\tfunctions - Statically_Denotes_Entity,\n+\tStatically_Denotes_Object, and Statically_Names_Object. The\n+\tfirst two were taken from sem_attr.adb. The term \"statically\n+\tnames\" is defined in the Ada RM and the new function\n+\tStatically_Names_Object is intended to reflect that definition,\n+\tor more precisely, as described in a comment in the code, to\n+\treflect the expected future definition of that term.\n+\t* sem_attr.adb: Delete functions Statically_Denotes_Object and\n+\tStatically_Denotes_Entity; these two functions have been moved\n+\tto package Sem_Util. Replace call to Statically_Denotes_Object\n+\twith a call to Statically_Names_Object as per AI12-0217 (a\n+\tbinding interpretation, so no Ada_Version check).\n+\t* exp_ch9.adb (Expand_Entry_Barrier.Is_Simple_Barrier): Change\n+\tname of function (it was previously Is_Simple_Barrier_Name)\n+\tbecause the function should return True in the case of a static\n+\texpression; implement this requirement.  Change function to\n+\tinclude a call to Statically_Names_Object so that, for Ada_2020\n+\tand later, it will return True for appropriate subcomponent\n+\tnames.\n+\t(Expand_Entry_Barrier.Is_Pure_Barrier): Handle\n+\tN_Indexed_Component and N_Selected_Component cases by calling\n+\tStatically_Names_Object.\n+\t(Expand_Entry_Barrier): Reorganize to treat Simple_Barriers and\n+\tPure_Barriers more uniformly.  Prevent cascaded errors.\n+\n+2020-06-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Find_Matching_Actual): Add guard on search loops\n+\tto detect a compilation error when using a compiler built\n+\twithout assertions.\n+\t(Instantiate_Formal_Subprogram): Create a new subprogram name\n+\tfor the actual only if formal has contract aspects and expansion\n+\tis enabled.\n+\n+2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb: Add with and use clauses for Sem_Mech.\n+\t(Get_Base_Object): New function to get the base object of a node.\n+\t(In_Place_Assign_OK): Add Target_Object parameter.  Deal with a\n+\tqualified expression on entry.  Remove short-circuit for array\n+\taggregates with a single \"others\" choice.  Do not look into the\n+\tcomponents of the aggregate if the parent is an allocator.\n+\t(Check_Component): Add T_OK parameter and rewrite.\n+\t(Safe_Component): Invoke Check_Component with T_OK set to False.\n+\t(Convert_To_Assignments): Try to use an in-place assignment for\n+\tany target; for that, call Get_Base_Object on the target and pass\n+\tthe result to In_Place_Assign_OK.\n+\t(Expand_Array_Aggregate): Use Parent_Kind and Parent_Node more\n+\tconsistently.  For an assignment, call Get_Base_Object on the\n+\ttarget and pass the result to In_Place_Assign_OK.\n+\n+2020-06-12  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* socket.c (__gnat_minus_500ms): Use GetVersionEx to detect\n+\tWindows Server version.\n+\t* libgnat/g-sothco.ads (Minus_500ms_Windows_Timeout): Remade to\n+\tBoolean constant.\n+\t* libgnat/g-socket.adb (Set_Socket_Option): Use\n+\tMinus_500ms_Windows_Timeout constant instead of function call.\n+\n+2020-06-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-coinho.ads, libgnat/a-coinho.adb,\n+\tlibgnat/a-coinho__shared.ads, libgnat/a-coinho__shared.adb\n+\t(Swap): New procedure.\n+\n+2020-06-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_N_Subprogram_Declaration): Do nothing for\n+\ta subprogram declared in a protected body.\n+\t* exp_ch9.ads, exp_ch9.adb\n+\t(Build_Private_Protected_Declaration): Moved to sem_ch6.adb.\n+\t(Expand_N_Protected_Body): Do nothing for a subprogram declared\n+\tin a protected body.\n+\t* sem_ch6.adb (Build_Internal_Protected_Declaration): Moved from\n+\texp_ch9.adb and renamed and fixed to ensure in particular that\n+\tsuch subprograms have convention Intrinsic and have no protected\n+\tversion.\n+\t(Analyze_Subprogram_Body_Helper): Call\n+\tBuild_Internal_Protected_Declaration.\n+\t(Move_Pragmas): Moved up and merged with the more general\n+\tversion from Build_Private_Protected_Declaration. We only want\n+\tto copy selected pragmas, most pragmas are not suitable for a\n+\tcopy on the spec.\n+\n+2020-06-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Overriding_Indicatior): Reject an\n+\toverriding indicator on a subprogram declared within a protected\n+\tbody.\n+\n+2020-06-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* contracts.adb, einfo.adb, sem_ch4.adb, sem_ch6.adb,\n+\tsem_res.adb, sem_util.adb: Replace Ekind_In with Is_Entry.\n+\n+2020-06-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Entry_Call): Add call to\n+\tWarn_On_Overlapping_Actuals.\n+\n+2020-06-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* aspects.ads (Is_Representation_Aspect): New array.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Check\n+\t13.1(9.2/5) for representation aspects.\n+\n+2020-06-12  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_put_image.ads, exp_put_image.adb (Preload_Sink): Procedure\n+\tfor preloading type Sink.  This has the side effect of loading\n+\tvarious dependents, including Ada.Strings.UTF_Encoding.\n+\t(Enable_Put_Image): Disable Put_Image in pre-2020 versions of\n+\tAda.  This limitation can probably be lifted later.  Enable for\n+\ttagged types except in predefined units.  Disable for CPP types;\n+\tPut_Image is legal, just prints the type name.\n+\t* sem_attr.adb (Check_Put_Image_Attribute): Don't complain about\n+\tPut_Image of CPP types; instead call the \"unknown\" version of\n+\tPut_Image.\n+\t* sem_ch10.adb (Analyze_Compilation_Unit): Call Preload_Sink.\n+\n+2020-06-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Simplify.\n+\n+2020-06-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Remove suppression\n+\tfor internal units.\n+\n+2020-06-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_strm.adb (Build_Elementary_Input_Call): Add support for 24\n+\tbits elementary types.\n+\t* rtsfind.ads: Add 24 bits integer streaming routines.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause\n+\t[Attribute_Stream_Size]): Add support for 24 bits elementary\n+\ttypes.\n+\t* libgnat/s-stratt.ads, libgnat/s-stratt.adb,\n+\tlibgnat/s-stratt__xdr.adb: Add support for signed and unsigned\n+\t24 bits integers.\n+\n+2020-06-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch3.adb (Get_Discr_Value): Cleanup.\n+\n+2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* rtsfind.ads (RTU_Id): Add System_Address_To_Access_Conversions.\n+\t* sem_elab.adb (Elaboration_Phase_Active): Alphabetize.\n+\t(Finalize_All_Data_Structures): Likewise.\n+\t(Error_Preelaborated_Call): New procedure.\n+\t(Build_Call_Marker): Set Is_Preelaborable_Call flag in marker.\n+\t(Build_Access_Marker): Likewise.\n+\t(Build_Subprogram_Invocation): Likewise.\n+\t(Build_Task_Activation): Likewise.\n+\t(Check_Preelaborated_Call): Return when the call is preelaborable.\n+\tCall Error_Preelaborated_Call to give the error otherwise.\n+\t(Check_Elab_Call): Likewise.\n+\t* sem_util.adb (Is_Preelaborable_Function): New predicate.\n+\t(Is_Non_Preelaborable_Construct.Visit): Recurse on the\n+\tExplicit_Actual_Parameter field of N_Parameter_Association.\n+\t(Is_Non_Preelaborable_Construct.Visit_Subexpression): In Ada 2020,\n+\tfor a call to a preelaborable function, visit the parameter list;\n+\totherwise, raise Non_Preelaborable exception.\n+\t(Is_Preelaborable_Construct): Likewise, but recursively check the\n+\tparameters instead and return false upon failure, otherwise true.\n+\t* sinfo.ads (Is_Preelaborable_Call): New flag in call marker nodes.\n+\t(Is_Preelaborable_Call): New inline function.\n+\t(Set_Is_Preelaborable_Call): New inline procedure.\n+\t* sinfo.adb (Is_Preelaborable_Call): New inline function.\n+\t(Set_Is_Preelaborable_Call): New inline procedure.\n+\n+2020-06-12  Bob Duff  <duff@adacore.com>\n+\n+\t* stringt.ads: Remove \"use System;\".\n+\n+2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Container_Indexing): Replace call to\n+\tFirst_Discriminant by Get_Reference_Discriminant to get the\n+\treference discriminant.\n+\t* sem_ch13.adb (Check_Indexing_Functions): Likewise.\n+\t* sem_ch5.adb (Preanalyze_Range): Call Get_Reference_Discriminant\n+\tto get the reference discriminant.\n+\t* sem_util.adb (Is_OK_Variable_For_Out_Formal): Treat all\n+\tAda 2012 implicit dereferences in only one place.\n+\t(Is_Variable): Minor tweak.\n+\n+2020-06-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Has_Contracts): New predicate to check whether a\n+\tformal subprogram carries an aspect specification for a pre- or\n+\tpostcondition.\n+\t(Build_Subprogram_Wrappers): If actual is overloaded, create a\n+\tnew name to be used in call inside wrapper body. This names\n+\tcarries the interpretations of the actual, and is resolved when\n+\tthe body is analyzed.\n+\t(Build_Subprogram_Body_Wrapper): Use this generated name in\n+\tcall.\n+\t(Build_Subprogram_Decl_Wrapper): Build profile of wrapper from\n+\tthe profile of formal, and reset type entities for subsequent\n+\tanalysis.\n+\n+2020-06-12  Bob Duff  <duff@adacore.com>\n+\n+\t* debug.adb: Remove usage of -gnatd_z.\n+\t* exp_attr.adb, exp_put_image.ads, exp_put_image.adb: Clean up\n+\tthe enable/disable code. If Put_Image is disabled for a type,\n+\tsystematically call the \"unknown\" version.  Improve comments.\n+\tConsolidate workarounds.  Remove usage of -gnatd_z.\n+\n+2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_elab.adb: Fix typos in comments.\n+\n+2020-06-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Object_Access_Level): Add processing of implicit\n+\tdereferences.\n+\n+2020-06-12  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-nbnbin.adb, libgnat/a-nbnbin.ads,\n+\tlibgnat/a-nbnbin__gmp.adb, libgnat/a-nbnbre.adb,\n+\tlibgnat/a-nbnbre.ads: Update Put_Image, and uncomment the aspect\n+\tspecification.  Add pragmas Ada_2020.\n+\t* libgnat/a-stouut.ads, libgnat/a-stteou.ads: Add Preelaborate,\n+\tbecause the Big_Numbers packages have Preelaborate, and now\n+\tdepend on these Text_Output packages.\n+\n+2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (No_Return): Document it for all subprograms.\n+\t* einfo.adb (Set_No_Return): Adjust assertion accordingly.\n+\t* sem_ch3.adb (Check_Abstract_Overriding): Implement the\n+\tcheck prescribed by RM 6.5.1(6/2) here instead of...\n+\t(Derive_Subprogram): Adjust comment accordingly.\n+\t* sem_disp.adb (Override_Dispatching_Operation): ...here.\n+\tRemove superfluous return statement.\n+\t* sem_ch6.adb (Check_No_Return_Expression): New procedure.\n+\t(Analyze_Function_Return): Call it to implement the check\n+\tprescribed by AI12-0269 for simple return statements of\n+\tNo_Return functions, and also checks extended statements.\n+\t(Analyze_Return_Statement): Only give an error on a return\n+\tstatement in No_Return procedures.  Use idiomatic form.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Adjust error\n+\tmessage for No_Return renaming subprogram.\n+\t* sem_prag.adb (Analyze_Pragma) <Pragma_No_Return>: Accept\n+\tit on functions and generic functions in Ada 2020.\n+\n 2020-06-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_res.adb (Resolve_Implicit_Dereference): In an instance,"}, {"sha": "96d246a6da569b6ff53fdfc62653b5ea8d50434e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3b453e0877288685695ca3e927a2da3b5f5b78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3b453e0877288685695ca3e927a2da3b5f5b78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8e3b453e0877288685695ca3e927a2da3b5f5b78", "patch": "@@ -1,3 +1,35 @@\n+2020-06-12  Marco Elver  <elver@google.com>\n+\n+\t* c-c++-common/tsan/func_entry_exit.c: New test.\n+\t* c-c++-common/tsan/func_entry_exit_disabled.c: New test.\n+\n+2020-06-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-44.c: New testcase.\n+\n+2020-06-12  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR tree-optimization/95570\n+\t* gcc.dg/vect/pr95570.c: New test.\n+\n+2020-06-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat.dg/rep_clause8.adb: Update error location.\n+\n+2020-06-12  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* lib/prune.exp (prune_gcc_output): Match any executable name\n+\tin collect messages.\n+\n+2020-06-12  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/93492\n+\t* gcc.target/i386/pr93492-1.c: New test.\n+\t* gcc.target/i386/pr93492-2.c: Likewise.\n+\t* gcc.target/i386/pr93492-3.c: Likewise.\n+\t* gcc.target/i386/pr93492-4.c: Likewise.\n+\t* gcc.target/i386/pr93492-5.c: Likewise.\n+\n 2020-06-11  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/93467"}, {"sha": "355747f414ca0a0c6a31355e3238b19c39de1c11", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e3b453e0877288685695ca3e927a2da3b5f5b78/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e3b453e0877288685695ca3e927a2da3b5f5b78/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8e3b453e0877288685695ca3e927a2da3b5f5b78", "patch": "@@ -1,3 +1,20 @@\n+2020-06-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/29_atomics/atomic_flag/clear/1.cc: Also test clear()\n+\twhen the value is currently set.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.cc:\n+\tActually check the return value.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.cc:\n+\tLikewise.\n+\n+2020-06-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_base.h (atomic_flag::test): Add missing\n+\tconst qualifiers.\n+\t* testsuite/29_atomics/atomic_flag/test/explicit.cc: Add\n+\tdg-options and verify results of test function.\n+\t* testsuite/29_atomics/atomic_flag/test/implicit.cc: Likewise.\n+\n 2020-06-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94749"}]}