{"sha": "9b53edc796d284b6adec7f2996772dbddf4c341e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI1M2VkYzc5NmQyODRiNmFkZWM3ZjI5OTY3NzJkYmRkZjRjMzQxZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-14T13:30:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-14T17:47:46Z"}, "message": "c++: non-static member, array bound, sizeof [PR93314]\n\nN2253 allowed referring to non-static data members without an object in\nunevaluated operands like that of sizeof, but in a constant-expression\ncontext like an array bound or template argument within such an unevaluated\noperand we do actually need a value, so that permission cannot apply.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93314\n\t* semantics.c (finish_id_expression_1): Clear cp_unevaluated_operand\n\tfor a non-static data member in a constant-expression.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93314\n\t* g++.dg/parse/uneval1.C: New test.", "tree": {"sha": "25e585b64c912f57d39957ed6368d4de3bf97b1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25e585b64c912f57d39957ed6368d4de3bf97b1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b53edc796d284b6adec7f2996772dbddf4c341e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b53edc796d284b6adec7f2996772dbddf4c341e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b53edc796d284b6adec7f2996772dbddf4c341e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b53edc796d284b6adec7f2996772dbddf4c341e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f99f64f69db49ce6343d79a39eab28dcc6b91865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99f64f69db49ce6343d79a39eab28dcc6b91865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99f64f69db49ce6343d79a39eab28dcc6b91865"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "4520181d4e594e566dbcb038b49102875991cc6d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b53edc796d284b6adec7f2996772dbddf4c341e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b53edc796d284b6adec7f2996772dbddf4c341e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9b53edc796d284b6adec7f2996772dbddf4c341e", "patch": "@@ -4093,6 +4093,12 @@ finish_id_expression_1 (tree id_expression,\n \n \t  cp_warn_deprecated_use_scopes (scope);\n \n+\t  /* In a constant-expression context, turn off cp_unevaluated_operand\n+\t     so finish_non_static_data_member will complain (93314).  */\n+\t  auto eval = make_temp_override (cp_unevaluated_operand);\n+\t  if (integral_constant_expression_p && TREE_CODE (decl) == FIELD_DECL)\n+\t    cp_unevaluated_operand = 0;\n+\n \t  if (TYPE_P (scope))\n \t    decl = finish_qualified_id_expr (scope,\n \t\t\t\t\t     decl,\n@@ -4106,6 +4112,10 @@ finish_id_expression_1 (tree id_expression,\n \t}\n       else if (TREE_CODE (decl) == FIELD_DECL)\n \t{\n+\t  auto eval = make_temp_override (cp_unevaluated_operand);\n+\t  if (integral_constant_expression_p)\n+\t    cp_unevaluated_operand = 0;\n+\n \t  /* Since SCOPE is NULL here, this is an unqualified name.\n \t     Access checking has been performed during name lookup\n \t     already.  Turn off checking to avoid duplicate errors.  */"}, {"sha": "dfc1bb4e0c3ef5bd56b16a53e8fa57c72e8fd6f2", "filename": "gcc/testsuite/g++.dg/parse/uneval1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b53edc796d284b6adec7f2996772dbddf4c341e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Funeval1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b53edc796d284b6adec7f2996772dbddf4c341e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Funeval1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Funeval1.C?ref=9b53edc796d284b6adec7f2996772dbddf4c341e", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/93314\n+\n+struct S {\n+  int m;\n+  static int f() {\n+    return sizeof(char[m]);\t// { dg-error \"S::m\" }\n+  }\n+};\n+\n+int main()\n+{\n+  return S().f()\n+    + sizeof(char[S::m]);\t// { dg-error \"S::m\" }\n+}"}]}