{"sha": "f0cae6c755ddd1f046fd6ce83121f94748b42114", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjYWU2Yzc1NWRkZDFmMDQ2ZmQ2Y2U4MzEyMWY5NDc0OGI0MjExNA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-09-04T05:13:53Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-09-04T05:13:53Z"}, "message": "c4x.md (rptb_init): Renamed from *rptb_init.\n\nSat Sep  4 16:56:28 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n\n\t* config/c4x/c4x.md (rptb_init): Renamed from *rptb_init.\n\t(doloop_begin):  Simplify pattern and use emit_jump_insn.\n\t(doloop_end): Simplify pattern, switch operand order,\n\tand use emit_jump_insn.\n\nFrom-SVN: r29098", "tree": {"sha": "2a5835cf3c24b11195e71ebaaebda42bb538f969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a5835cf3c24b11195e71ebaaebda42bb538f969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0cae6c755ddd1f046fd6ce83121f94748b42114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cae6c755ddd1f046fd6ce83121f94748b42114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0cae6c755ddd1f046fd6ce83121f94748b42114", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cae6c755ddd1f046fd6ce83121f94748b42114/comments", "author": null, "committer": null, "parents": [{"sha": "edf501302358716842d8f5fb99a2849da03d384d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf501302358716842d8f5fb99a2849da03d384d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf501302358716842d8f5fb99a2849da03d384d"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "16b5aedff98e3bc3d8cbd08c48522cdfb1a09486", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0cae6c755ddd1f046fd6ce83121f94748b42114/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0cae6c755ddd1f046fd6ce83121f94748b42114/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0cae6c755ddd1f046fd6ce83121f94748b42114", "patch": "@@ -1,3 +1,10 @@\n+Sat Sep  4 16:56:28 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (rptb_init): Renamed from *rptb_init.\n+\t(doloop_begin):  Simplify pattern and use emit_jump_insn.\n+\t(doloop_end): Simplify pattern, switch operand order,\n+\tand use emit_jump_insn.\n+\n Fri Sep  3 19:02:38 1999  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n \n  \t* function.h (struct function): Add new element LANGUAGE."}, {"sha": "e4227e7ba4275ed6db42ffca4c4f071153600090", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0cae6c755ddd1f046fd6ce83121f94748b42114/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0cae6c755ddd1f046fd6ce83121f94748b42114/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=f0cae6c755ddd1f046fd6ce83121f94748b42114", "patch": "@@ -4929,28 +4929,30 @@\n \n ; This pattern needs to be emitted at the start of the loop to\n ; say that RS and RE are loaded.\n-(define_insn \"*rptb_init\"\n+(define_insn \"rptb_init\"\n   [(unspec[(match_operand:QI 0 \"register_operand\" \"va\")] 22)\n-   (use (match_operand:QI 1 \"const_int_operand\" \"\"))\n-   (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n-   (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n    (clobber (reg:QI 25))\n    (clobber (reg:QI 26))]\n   \"\"\n   \"\"\n   [(set_attr \"type\" \"repeat\")])\n \n \n+; operand 0 is the loop count pseudo register\n+; operand 1 is the number of loop iterations or 0 if it is unknown\n+; operand 2 is the maximum number of loop iterations\n+; operand 3 is the number of levels of enclosed loops\n (define_expand \"doloop_begin\"\n-  [(parallel [(unspec[(match_operand:QI 0 \"register_operand\" \"va\")] 22)\n-              (use (match_operand:QI 1 \"const_int_operand\" \"\"))\n-              (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n-              (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n-              (clobber (reg:QI 25))\n-              (clobber (reg:QI 26))])]\n+  [(use (match_operand 0 \"register_operand\" \"\"))\n+   (use (match_operand:QI 1 \"const_int_operand\" \"\"))\n+   (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n+   (use (match_operand:QI 3 \"const_int_operand\" \"\"))]\n   \"\"\n   \"if (INTVAL (operands[3]) > 1 || ! TARGET_RPTB)\n-     FAIL;\")\n+     FAIL;\n+   emit_jump_insn (gen_rptb_init (operands[0]));\n+   DONE;\n+  \")\n \n \n ; The RS (25) and RE (26) registers must be unviolate from the top of the loop\n@@ -4964,9 +4966,6 @@\n    (set (match_dup 0)\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n-   (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n-   (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n-   (use (match_operand:QI 4 \"const_int_operand\" \"\"))\n    (use (reg:QI 25))\n    (use (reg:QI 26))\n    (clobber (reg:CC_NOOV 21))]\n@@ -4985,39 +4984,33 @@\n   \"\n   [(set_attr \"type\" \"repeat,db,jmpc,jmpc,jmpc\")])\n \n-; operand 0 is the loop count register\n-; operand 1 is the label to jump to at the top of the loop\n-; operand 2 is the number of loop iterations or 0 if it is unknown\n-; operand 3 is the maximum number of loop iterations\n-; operand 4 is the number of levels of enclosed loops\n+; operand 0 is the loop count pseudo register\n+; operand 1 is the number of loop iterations or 0 if it is unknown\n+; operand 2 is the maximum number of loop iterations\n+; operand 3 is the number of levels of enclosed loops\n+; operand 4 is the label to jump to at the top of the loop\n (define_expand \"doloop_end\"\n-  [(parallel [(set (pc)\n-                   (if_then_else (ge (match_operand:QI 0 \"register_operand\" \"\")\n-                                     (const_int 0))\n-                                 (label_ref (match_operand 1 \"\" \"\"))\n-                                 (pc)))\n-              (set (match_dup 0)\n-\t\t   (plus:QI (match_dup 0)\n-\t\t\t    (const_int -1)))\n-              (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n-              (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n-              (use (match_operand:QI 4 \"const_int_operand\" \"\"))\n-              (use (reg:QI 25))\n-              (use (reg:QI 26))\n-              (clobber (reg:CC_NOOV 21))])]\n+  [(use (match_operand 0 \"register_operand\" \"\"))\n+   (use (match_operand:QI 1 \"const_int_operand\" \"\"))\n+   (use (match_operand:QI 2 \"const_int_operand\" \"\"))\n+   (use (match_operand:QI 3 \"const_int_operand\" \"\"))\n+   (use (label_ref (match_operand 4 \"\" \"\")))]\n   \"\"\n   \"if (! TARGET_LOOP_UNSIGNED \n-       && (unsigned HOST_WIDE_INT) INTVAL (operands[3]) > (1U << 31))\n+       && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) > (1U << 31))\n      FAIL;\n-   if (INTVAL (operands[4]) > 1 || ! TARGET_RPTB)\n+   if (INTVAL (operands[3]) > 1 || ! TARGET_RPTB)\n      {\n         /* The C30 maximum iteration count for DB is 2^24.  */\n \tif (! TARGET_DB)\n           FAIL;\n-        emit_insn (gen_decrement_and_branch_until_zero (operands[0],\n-                                                        operands[1]));\n+        emit_jump_insn (gen_decrement_and_branch_until_zero (operands[0],\n+                                                             operands[4]));\n \tDONE;\n-     }\")\n+     }\n+    emit_jump_insn (gen_rptb_end (operands[0], operands[4]));\n+    DONE;\n+  \")\n \n ; The current low overhead looping code is naff and is not failsafe\n ; If you want RTPB instructions to be generated, apply the patches"}]}