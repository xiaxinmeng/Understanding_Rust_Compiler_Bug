{"sha": "5c6df0588cce2eefc726cecdec3687df1c8c96d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2ZGYwNTg4Y2NlMmVlZmM3MjZjZWNkZWMzNjg3ZGYxYzhjOTZkNQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@lsd.ic.unicamp.br", "date": "2000-05-24T03:11:27Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-05-24T03:11:27Z"}, "message": "emit-rtl.c (unshare_all_decls): New function.\n\n* emit-rtl.c (unshare_all_decls): New function.\n(unshare_all_rtl): Call it.\n\nFrom-SVN: r34118", "tree": {"sha": "a3b95198ac4d19b68c3e0be07ab4fe0467993def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3b95198ac4d19b68c3e0be07ab4fe0467993def"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c6df0588cce2eefc726cecdec3687df1c8c96d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6df0588cce2eefc726cecdec3687df1c8c96d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c6df0588cce2eefc726cecdec3687df1c8c96d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c6df0588cce2eefc726cecdec3687df1c8c96d5/comments", "author": null, "committer": null, "parents": [{"sha": "f8e2da56c10633d47b561d4ca99115837237dded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e2da56c10633d47b561d4ca99115837237dded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e2da56c10633d47b561d4ca99115837237dded"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "38007d85cc43218d7023d663ee5bf73959e13e19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6df0588cce2eefc726cecdec3687df1c8c96d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6df0588cce2eefc726cecdec3687df1c8c96d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c6df0588cce2eefc726cecdec3687df1c8c96d5", "patch": "@@ -1,3 +1,8 @@\n+2000-05-24  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n+\n+\t* emit-rtl.c (unshare_all_decls): New function.\n+\t(unshare_all_rtl): Call it.\n+\n 2000-05-23  Nick Clifton  <nickc@cygnus.com>\n \n \t* configure.in: Treat 'strongarm' as if it were 'arm' when"}, {"sha": "86d85342e1c5ccfc6d775b71804a85b0d96b2c90", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c6df0588cce2eefc726cecdec3687df1c8c96d5/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c6df0588cce2eefc726cecdec3687df1c8c96d5/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=5c6df0588cce2eefc726cecdec3687df1c8c96d5", "patch": "@@ -178,6 +178,7 @@ static rtx make_call_insn_raw\t\tPARAMS ((rtx));\n static rtx find_line_note\t\tPARAMS ((rtx));\n static void mark_sequence_stack         PARAMS ((struct sequence_stack *));\n static void unshare_all_rtl_1\t\tPARAMS ((rtx));\n+static void unshare_all_decls\t\tPARAMS ((tree));\n static hashval_t const_int_htab_hash    PARAMS ((const void *));\n static int const_int_htab_eq            PARAMS ((const void *,\n \t\t\t\t\t\t const void *));\n@@ -1697,6 +1698,9 @@ unshare_all_rtl (fndecl, insn)\n   for (decl = DECL_ARGUMENTS (fndecl); decl; decl = TREE_CHAIN (decl))\n     DECL_RTL (decl) = copy_rtx_if_shared (DECL_RTL (decl));\n \n+  /* Make sure that virtual stack slots are not shared.  */\n+  unshare_all_decls (DECL_INITIAL (fndecl));\n+\n   /* Unshare just about everything else.  */\n   unshare_all_rtl_1 (insn);\n   \n@@ -1754,6 +1758,23 @@ unshare_all_rtl_1 (insn)\n       }\n }\n \n+/* Go through all virtual stack slots of a function and copy any\n+   shared structure.  */\n+static void\n+unshare_all_decls (blk)\n+     tree blk;\n+{\n+  tree t;\n+\n+  /* Copy shared decls.  */\n+  for (t = BLOCK_VARS (blk); t; t = TREE_CHAIN (t))\n+    DECL_RTL (t)  = copy_rtx_if_shared (DECL_RTL (t));\n+\n+  /* Now process sub-blocks.  */\n+  for (t = BLOCK_SUBBLOCKS (blk); t; t = TREE_CHAIN (t))\n+    unshare_all_decls (t);\n+}\n+\n /* Mark ORIG as in use, and return a copy of it if it was already in use.\n    Recursively does the same for subexpressions.  */\n "}]}