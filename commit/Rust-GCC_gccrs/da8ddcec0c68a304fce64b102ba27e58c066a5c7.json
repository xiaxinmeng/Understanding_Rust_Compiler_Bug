{"sha": "da8ddcec0c68a304fce64b102ba27e58c066a5c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4ZGRjZWMwYzY4YTMwNGZjZTY0YjEwMmJhMjdlNThjMDY2YTVjNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-17T15:40:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-17T15:40:00Z"}, "message": "Define [range.cmp] comparisons for C++20\n\nDefine std::identity, std::ranges::equal_to, std::ranges::not_equal_to,\nstd::ranges::greater, std::ranges::less, std::ranges::greater_equal and\nstd::ranges::less_equal.\n\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/range_cmp.h: New header for C++20 function objects.\n\t* include/std/functional: Include new header.\n\t* testsuite/20_util/function_objects/identity/1.cc: New test.\n\t* testsuite/20_util/function_objects/range.cmp/equal_to.cc: New test.\n\t* testsuite/20_util/function_objects/range.cmp/greater.cc: New test.\n\t* testsuite/20_util/function_objects/range.cmp/greater_equal.cc: New\n\ttest.\n\t* testsuite/20_util/function_objects/range.cmp/less.cc: New test.\n\t* testsuite/20_util/function_objects/range.cmp/less_equal.cc: New test.\n\t* testsuite/20_util/function_objects/range.cmp/not_equal_to.cc: New\n\ttest.\n\nFrom-SVN: r277120", "tree": {"sha": "45921a1a0a1145385437e004bc7b067562f8e462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45921a1a0a1145385437e004bc7b067562f8e462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da8ddcec0c68a304fce64b102ba27e58c066a5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8ddcec0c68a304fce64b102ba27e58c066a5c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da8ddcec0c68a304fce64b102ba27e58c066a5c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da8ddcec0c68a304fce64b102ba27e58c066a5c7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c3784ae0fb0a3cc3a3a6c262e6dff0908a0d795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3784ae0fb0a3cc3a3a6c262e6dff0908a0d795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3784ae0fb0a3cc3a3a6c262e6dff0908a0d795"}], "stats": {"total": 720, "additions": 720, "deletions": 0}, "files": [{"sha": "324955c692a4d2881122f311dfd274fbc7365d33", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -1,5 +1,19 @@\n 2019-10-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/range_cmp.h: New header for C++20 function objects.\n+\t* include/std/functional: Include new header.\n+\t* testsuite/20_util/function_objects/identity/1.cc: New test.\n+\t* testsuite/20_util/function_objects/range.cmp/equal_to.cc: New test.\n+\t* testsuite/20_util/function_objects/range.cmp/greater.cc: New test.\n+\t* testsuite/20_util/function_objects/range.cmp/greater_equal.cc: New\n+\ttest.\n+\t* testsuite/20_util/function_objects/range.cmp/less.cc: New test.\n+\t* testsuite/20_util/function_objects/range.cmp/less_equal.cc: New test.\n+\t* testsuite/20_util/function_objects/range.cmp/not_equal_to.cc: New\n+\ttest.\n+\n \tPR libstdc++/92124\n \t* include/bits/forward_list.h\n \t(_M_move_assign(forward_list&&, false_type)): Do not use"}, {"sha": "9ff12f10fb1a08dff4b6d5ad8bff5837cfcb4a02", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -152,6 +152,7 @@ bits_headers = \\\n \t${bits_srcdir}/random.h \\\n \t${bits_srcdir}/random.tcc \\\n \t${bits_srcdir}/range_access.h \\\n+\t${bits_srcdir}/range_cmp.h \\\n \t${bits_srcdir}/refwrap.h \\\n \t${bits_srcdir}/regex.h \\\n \t${bits_srcdir}/regex.tcc \\"}, {"sha": "5dce01faeda4261a6a9f2b2498b429c98cd01fa6", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -496,6 +496,7 @@ bits_headers = \\\n \t${bits_srcdir}/random.h \\\n \t${bits_srcdir}/random.tcc \\\n \t${bits_srcdir}/range_access.h \\\n+\t${bits_srcdir}/range_cmp.h \\\n \t${bits_srcdir}/refwrap.h \\\n \t${bits_srcdir}/regex.h \\\n \t${bits_srcdir}/regex.tcc \\"}, {"sha": "3e5bb8847ab4b0c0853b7f0edd28d49d9323b37a", "filename": "libstdc++-v3/include/bits/range_cmp.h", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_cmp.h?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -0,0 +1,179 @@\n+// Concept-constrained comparison implementations -*- C++ -*-\n+\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/ranges_function.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{functional}\n+ */\n+\n+#ifndef _RANGE_CMP_H\n+#define _RANGE_CMP_H 1\n+\n+#if __cplusplus > 201703L\n+# include <bits/move.h>\n+# include <concepts>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  struct __is_transparent; // not defined\n+\n+  // Define std::identity here so that <iterator> and <ranges>\n+  // don't need to include <bits/stl_function.h> to get it.\n+\n+  /// [func.identity] The identity function.\n+  struct identity\n+  {\n+    template<typename _Tp>\n+      constexpr _Tp&&\n+      operator()(_Tp&& __t) const noexcept\n+      { return std::forward<_Tp>(__t); }\n+\n+    using is_transparent = __is_transparent;\n+  };\n+\n+namespace ranges\n+{\n+  namespace __detail\n+  {\n+    // BUILTIN-PTR-CMP(T, ==, U)\n+    template<typename _Tp, typename _Up>\n+      concept __eq_builtin_ptr_cmp\n+\t= convertible_to<_Tp, const volatile void*>\n+\t  && convertible_to<_Up, const volatile void*>\n+\t  && (! requires(_Tp&& __t, _Up&& __u)\n+\t      { operator==(std::forward<_Tp>(__t), std::forward<_Up>(__u)); }\n+\t      &&\n+\t      ! requires(_Tp&& __t, _Up&& __u)\n+\t      { std::forward<_Tp>(__t).operator==(std::forward<_Up>(__u)); });\n+\n+    // BUILTIN-PTR-CMP(T, <, U)\n+    template<typename _Tp, typename _Up>\n+      concept __less_builtin_ptr_cmp\n+\t= convertible_to<_Tp, const volatile void*>\n+\t  && convertible_to<_Up, const volatile void*>\n+\t  && (! requires(_Tp&& __t, _Up&& __u)\n+\t      { operator<(std::forward<_Tp>(__t), std::forward<_Up>(__u)); }\n+\t      && ! requires(_Tp&& __t, _Up&& __u)\n+\t      { std::forward<_Tp>(__t).operator<(std::forward<_Up>(__u)); });\n+  } // namespace __detail\n+\n+  // [range.cmp] Concept-constrained comparisons\n+\n+  /// ranges::equal_to function object type.\n+  struct equal_to\n+  {\n+    template<typename _Tp, typename _Up>\n+      requires equality_comparable_with<_Tp, _Up>\n+\t|| __detail::__eq_builtin_ptr_cmp<_Tp, _Up>\n+      constexpr bool\n+      operator()(_Tp&& __t, _Up&& __u) const\n+      noexcept(noexcept(std::declval<_Tp>() == std::declval<_Up>()))\n+      { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }\n+\n+    using is_transparent = __is_transparent;\n+  };\n+\n+  /// ranges::not_equal_to function object type.\n+  struct not_equal_to\n+  {\n+    template<typename _Tp, typename _Up>\n+      requires equality_comparable_with<_Tp, _Up>\n+\t|| __detail::__eq_builtin_ptr_cmp<_Tp, _Up>\n+      constexpr bool\n+      operator()(_Tp&& __t, _Up&& __u) const\n+      noexcept(noexcept(std::declval<_Up>() == std::declval<_Tp>()))\n+      { return !equal_to{}(std::forward<_Tp>(__t), std::forward<_Up>(__u)); }\n+\n+    using is_transparent = __is_transparent;\n+  };\n+\n+  /// ranges::less function object type.\n+  struct less\n+  {\n+    template<typename _Tp, typename _Up>\n+      requires totally_ordered_with<_Tp, _Up>\n+\t|| __detail::__less_builtin_ptr_cmp<_Tp, _Up>\n+      constexpr bool\n+      operator()(_Tp&& __t, _Up&& __u) const\n+      noexcept(noexcept(std::declval<_Tp>() < std::declval<_Up>()))\n+      {\n+\tif constexpr (__detail::__less_builtin_ptr_cmp<_Tp, _Up>)\n+\t  return std::less<const volatile void*>{}(\n+\t      static_cast<const volatile void*>(std::forward<_Tp>(__t)),\n+\t      static_cast<const volatile void*>(std::forward<_Up>(__u)));\n+\treturn std::forward<_Tp>(__t) < std::forward<_Up>(__u);\n+      }\n+\n+    using is_transparent = __is_transparent;\n+  };\n+\n+  /// ranges::greater function object type.\n+  struct greater\n+  {\n+    template<typename _Tp, typename _Up>\n+      requires totally_ordered_with<_Tp, _Up>\n+\t|| __detail::__less_builtin_ptr_cmp<_Up, _Tp>\n+      constexpr bool\n+      operator()(_Tp&& __t, _Up&& __u) const\n+      noexcept(noexcept(std::declval<_Up>() < std::declval<_Tp>()))\n+      { return less{}(std::forward<_Up>(__u), std::forward<_Tp>(__t)); }\n+\n+    using is_transparent = __is_transparent;\n+  };\n+\n+  /// ranges::greater_equal function object type.\n+  struct greater_equal\n+  {\n+    template<typename _Tp, typename _Up>\n+      requires totally_ordered_with<_Tp, _Up>\n+\t|| __detail::__less_builtin_ptr_cmp<_Tp, _Up>\n+      constexpr bool\n+      operator()(_Tp&& __t, _Up&& __u) const\n+      noexcept(noexcept(std::declval<_Tp>() < std::declval<_Up>()))\n+      { return !less{}(std::forward<_Tp>(__t), std::forward<_Up>(__u)); }\n+\n+    using is_transparent = __is_transparent;\n+  };\n+\n+  /// ranges::less_equal function object type.\n+  struct less_equal\n+  {\n+    template<typename _Tp, typename _Up>\n+      requires totally_ordered_with<_Tp, _Up>\n+\t|| __detail::__less_builtin_ptr_cmp<_Up, _Tp>\n+      constexpr bool\n+      operator()(_Tp&& __t, _Up&& __u) const\n+      noexcept(noexcept(std::declval<_Up>() < std::declval<_Tp>()))\n+      { return !less{}(std::forward<_Up>(__u), std::forward<_Tp>(__t)); }\n+\n+    using is_transparent = __is_transparent;\n+  };\n+\n+} // namespace ranges\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20\n+#endif // _RANGE_CMP_H"}, {"sha": "7ad29a1a335b64a086b4a28c4743af81ba735e51", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -64,6 +64,9 @@\n # include <utility>\n # include <bits/stl_algo.h>\n #endif\n+#if __cplusplus > 201703L\n+# include <bits/range_cmp.h>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "fd9b79f1fcdc98c62dc158c23175aa27e4842c8f", "filename": "libstdc++-v3/testsuite/20_util/function_objects/identity/1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fidentity%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fidentity%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fidentity%2F1.cc?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <functional>\n+\n+// C++20 [func.identity]\n+static_assert( std::is_default_constructible_v<std::identity> );\n+static_assert( std::is_copy_constructible_v<std::identity> );\n+static_assert( std::is_move_constructible_v<std::identity> );\n+static_assert( std::is_copy_assignable_v<std::identity> );\n+static_assert( std::is_move_assignable_v<std::identity> );\n+\n+static_assert( !std::is_invocable_v<std::identity> );\n+static_assert( !std::is_invocable_v<std::identity, int&, int&> );\n+static_assert( std::is_nothrow_invocable_r_v<int&, std::identity&, int&> );\n+static_assert( std::is_nothrow_invocable_r_v<const long&, std::identity, const long&> );\n+static_assert( std::is_nothrow_invocable_r_v<short&&, const std::identity&, short> );\n+static_assert( std::is_nothrow_invocable_r_v<const char&&, const std::identity, const char> );\n+\n+int i;\n+static_assert( std::addressof(std::identity{}(i)) == std::addressof(i) );\n+\n+using T = std::identity::is_transparent; // required typedef"}, {"sha": "c3ceb316a58bef75c270a0ae756aba4f1426896f", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/equal_to.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fequal_to.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fequal_to.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fequal_to.cc?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+// C++20 [range.cmp]\n+\n+using F = std::ranges::equal_to;\n+static_assert( std::is_default_constructible_v<F> );\n+static_assert( std::is_copy_constructible_v<F> );\n+static_assert( std::is_move_constructible_v<F> );\n+static_assert( std::is_copy_assignable_v<F> );\n+static_assert( std::is_move_assignable_v<F> );\n+\n+static_assert( ! std::is_invocable_v<F> );\n+static_assert( ! std::is_invocable_v<F, int&> );\n+static_assert( ! std::is_invocable_v<F, int, void> );\n+static_assert( ! std::is_invocable_v<F, int, void*> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, int&, int> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F, const long&, char> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F&, short, int&> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F, const char, char> );\n+\n+using T = F::is_transparent; // required typedef\n+\n+static_assert( std::ranges::equal_to{}(99, 99.0) );\n+static_assert( ! std::ranges::equal_to{}(99, 99.01) );\n+static_assert( ! std::ranges::equal_to{}(99, 140L) );\n+\n+void\n+test01()\n+{\n+  F f;\n+  int a[2]{};\n+  VERIFY( f(&a, (void*)&a[0]) );\n+  VERIFY( ! f(&a, (void*)&a[1]) );\n+  VERIFY( f(&a + 1, (void*)(a + 2)) );\n+}\n+\n+struct X { };\n+int operator==(X, X) noexcept { return 2; }\n+int operator!=(X, X) { return 0; }\n+\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, X, X> );\n+\n+void\n+test02()\n+{\n+  X x;\n+  F f;\n+  VERIFY( f(x, x) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "87fd518e146ee6021060b0a3949c2cc5f77557d8", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/greater.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fgreater.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fgreater.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fgreater.cc?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+// C++20 [range.cmp]\n+\n+using F = std::ranges::greater;\n+static_assert( std::is_default_constructible_v<F> );\n+static_assert( std::is_copy_constructible_v<F> );\n+static_assert( std::is_move_constructible_v<F> );\n+static_assert( std::is_copy_assignable_v<F> );\n+static_assert( std::is_move_assignable_v<F> );\n+\n+static_assert( ! std::is_invocable_v<F> );\n+static_assert( ! std::is_invocable_v<F, int&> );\n+static_assert( ! std::is_invocable_v<F, int, void> );\n+static_assert( ! std::is_invocable_v<F, int, void*> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, int&, int> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F, const long&, char> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F&, short, int&> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F, const char, char> );\n+\n+using T = F::is_transparent; // required typedef\n+\n+static_assert( ! std::ranges::greater{}(99, 99.0) );\n+static_assert( std::ranges::greater{}(99.01, 99) );\n+static_assert( std::ranges::greater{}(990, 140L) );\n+\n+void\n+test01()\n+{\n+  F f;\n+  int a[2]{};\n+  VERIFY( ! f(&a, (void*)&a[0]) );\n+  VERIFY( f((void*)&a[1], &a) );\n+  VERIFY( f(&a + 1, (void*)(a + 1)) );\n+  VERIFY( ! f(&a, (void*)(a + 1)) );\n+}\n+\n+struct X { };\n+int operator==(X, X) { return 2; }\n+int operator!=(X, X) { return 0; }\n+int operator<(X, X) noexcept { return 0; }\n+int operator>(X, X) { return 0; }\n+int operator<=(X, X) { return 3; }\n+int operator>=(X, X) { return 4; }\n+\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, X, X> );\n+\n+void\n+test02()\n+{\n+  X x;\n+  F f;\n+  VERIFY( ! f(x, x) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a1972ab1c09379fc98e3087e2c266f5070078d6f", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/greater_equal.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fgreater_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fgreater_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fgreater_equal.cc?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+// C++20 [range.cmp]\n+\n+using F = std::ranges::greater_equal;\n+static_assert( std::is_default_constructible_v<F> );\n+static_assert( std::is_copy_constructible_v<F> );\n+static_assert( std::is_move_constructible_v<F> );\n+static_assert( std::is_copy_assignable_v<F> );\n+static_assert( std::is_move_assignable_v<F> );\n+\n+static_assert( ! std::is_invocable_v<F> );\n+static_assert( ! std::is_invocable_v<F, int&> );\n+static_assert( ! std::is_invocable_v<F, int, void> );\n+static_assert( ! std::is_invocable_v<F, int, void*> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, int&, int> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F, const long&, char> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F&, short, int&> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F, const char, char> );\n+\n+using T = F::is_transparent; // required typedef\n+\n+static_assert( std::ranges::greater_equal{}(99, 99.0) );\n+static_assert( std::ranges::greater_equal{}(99.01, 99) );\n+static_assert( ! std::ranges::greater_equal{}(99, 140L) );\n+\n+void\n+test01()\n+{\n+  F f;\n+  int a[2]{};\n+  VERIFY( f(&a, (void*)&a[0]) );\n+  VERIFY( f((void*)&a[1], &a) );\n+  VERIFY( f(&a + 1, (void*)(a + 1)) );\n+  VERIFY( ! f(&a, (void*)(a + 1)) );\n+}\n+\n+struct X { };\n+int operator==(X, X) { return 2; }\n+int operator!=(X, X) { return 0; }\n+int operator<(X, X) noexcept { return 0; }\n+int operator>(X, X) { return 0; }\n+int operator<=(X, X) { return 3; }\n+int operator>=(X, X) { return 4; }\n+\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, X, X> );\n+\n+void\n+test02()\n+{\n+  X x;\n+  F f;\n+  VERIFY( f(x, x) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "e484628f76fccabfa9387886aa236fadd698ae2b", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/less.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless.cc?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+// C++20 [range.cmp]\n+\n+using F = std::ranges::less;\n+static_assert( std::is_default_constructible_v<F> );\n+static_assert( std::is_copy_constructible_v<F> );\n+static_assert( std::is_move_constructible_v<F> );\n+static_assert( std::is_copy_assignable_v<F> );\n+static_assert( std::is_move_assignable_v<F> );\n+\n+static_assert( ! std::is_invocable_v<F> );\n+static_assert( ! std::is_invocable_v<F, int&> );\n+static_assert( ! std::is_invocable_v<F, int, void> );\n+static_assert( ! std::is_invocable_v<F, int, void*> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, int&, int> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F, const long&, char> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F&, short, int&> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F, const char, char> );\n+\n+using T = F::is_transparent; // required typedef\n+\n+static_assert( ! std::ranges::less{}(99, 99.0) );\n+static_assert( std::ranges::less{}(99, 99.01) );\n+static_assert( std::ranges::less{}(99, 140L) );\n+\n+void\n+test01()\n+{\n+  F f;\n+  int a[2]{};\n+  VERIFY( ! f(&a, (void*)&a[0]) );\n+  VERIFY( f(&a, (void*)&a[1]) );\n+  VERIFY( ! f(&a + 1, (void*)(a + 2)) );\n+  VERIFY( f(&a, (void*)(a + 1)) );\n+}\n+\n+struct X { };\n+int operator==(X, X) { return 2; }\n+int operator!=(X, X) { return 0; }\n+int operator<(X, X) noexcept { return 0; }\n+int operator>(X, X) { return 0; }\n+int operator<=(X, X) { return 3; }\n+int operator>=(X, X) { return 4; }\n+\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, X, X> );\n+\n+void\n+test02()\n+{\n+  X x;\n+  F f;\n+  VERIFY( ! f(x, x) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "7f5bee68eb44847b8c98f90b6fe6d545397b9285", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/less_equal.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fless_equal.cc?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -0,0 +1,82 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+// C++20 [range.cmp]\n+\n+using F = std::ranges::less_equal;\n+static_assert( std::is_default_constructible_v<F> );\n+static_assert( std::is_copy_constructible_v<F> );\n+static_assert( std::is_move_constructible_v<F> );\n+static_assert( std::is_copy_assignable_v<F> );\n+static_assert( std::is_move_assignable_v<F> );\n+\n+static_assert( ! std::is_invocable_v<F> );\n+static_assert( ! std::is_invocable_v<F, int&> );\n+static_assert( ! std::is_invocable_v<F, int, void> );\n+static_assert( ! std::is_invocable_v<F, int, void*> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, int&, int> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F, const long&, char> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F&, short, int&> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F, const char, char> );\n+\n+using T = F::is_transparent; // required typedef\n+\n+static_assert( std::ranges::less_equal{}(99, 99.0) );\n+static_assert( ! std::ranges::less_equal{}(99.01, 99) );\n+static_assert( std::ranges::less_equal{}(99, 140L) );\n+\n+void\n+test01()\n+{\n+  F f;\n+  int a[2]{};\n+  VERIFY( f(&a, (void*)&a[0]) );\n+  VERIFY( ! f((void*)&a[1], &a) );\n+  VERIFY( ! f(&a + 1, (void*)(a + 1)) );\n+  VERIFY( f(&a, (void*)(a + 1)) );\n+}\n+\n+struct X { };\n+int operator==(X, X) { return 2; }\n+int operator!=(X, X) { return 0; }\n+int operator<(X, X) noexcept { return 0; }\n+int operator>(X, X) { return 0; }\n+int operator<=(X, X) { return 3; }\n+int operator>=(X, X) { return 4; }\n+\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, X, X> );\n+\n+void\n+test02()\n+{\n+  X x;\n+  F f;\n+  VERIFY( f(x, x) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "857e63426aae90323ae193b2ca588451a9282a69", "filename": "libstdc++-v3/testsuite/20_util/function_objects/range.cmp/not_equal_to.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fnot_equal_to.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da8ddcec0c68a304fce64b102ba27e58c066a5c7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fnot_equal_to.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Frange.cmp%2Fnot_equal_to.cc?ref=da8ddcec0c68a304fce64b102ba27e58c066a5c7", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+// C++20 [range.cmp]\n+\n+using F = std::ranges::not_equal_to;\n+static_assert( std::is_default_constructible_v<F> );\n+static_assert( std::is_copy_constructible_v<F> );\n+static_assert( std::is_move_constructible_v<F> );\n+static_assert( std::is_copy_assignable_v<F> );\n+static_assert( std::is_move_assignable_v<F> );\n+\n+static_assert( ! std::is_invocable_v<F> );\n+static_assert( ! std::is_invocable_v<F, int&> );\n+static_assert( ! std::is_invocable_v<F, int, void> );\n+static_assert( ! std::is_invocable_v<F, int, void*> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, int&, int> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, F, const long&, char> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F&, short, int&> );\n+static_assert( std::is_nothrow_invocable_r_v<bool, const F, const char, char> );\n+\n+using T = F::is_transparent; // required typedef\n+\n+static_assert( ! std::ranges::not_equal_to{}(99, 99.0) );\n+static_assert( std::ranges::not_equal_to{}(99, 99.01) );\n+static_assert( std::ranges::not_equal_to{}(99, 140L) );\n+\n+void\n+test01()\n+{\n+  F f;\n+  int a[2]{};\n+  VERIFY( ! f(&a, (void*)&a[0]) );\n+  VERIFY( f(&a, (void*)&a[1]) );\n+  VERIFY( ! f(&a + 1, (void*)(a + 2)) );\n+}\n+\n+struct X { };\n+int operator==(X, X) noexcept { return 2; }\n+int operator!=(X, X) { return 0; }\n+\n+static_assert( std::is_nothrow_invocable_r_v<bool, F&, X, X> );\n+\n+void\n+test02()\n+{\n+  X x;\n+  F f;\n+  VERIFY( ! f(x, x) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}