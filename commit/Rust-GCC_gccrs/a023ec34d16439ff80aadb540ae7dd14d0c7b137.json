{"sha": "a023ec34d16439ff80aadb540ae7dd14d0c7b137", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyM2VjMzRkMTY0MzlmZjgwYWFkYjU0MGFlN2RkMTRkMGM3YjEzNw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-01-06T15:00:11Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-01-06T15:00:11Z"}, "message": "Connection.java: Reformated copyright.\n\n2004-01-06  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol/file/Connection.java:\n\tReformated copyright.\n\t(hdrHash): Removed.\n\t(hdrVec): Removed.\n\t(gotHeaders): Removed.\n\t(getHeaderField): Removed.\n\t(getHeaderField): Removed.\n\t(getHeaderFieldKey): Removed.\n\t(getKey): Removed.\n\t(getField): Removed.\n\t(getHeaders): Removed.\n\nFrom-SVN: r75473", "tree": {"sha": "8bfc982fe3ba7e578cc28d35cfd4f940ad61018b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bfc982fe3ba7e578cc28d35cfd4f940ad61018b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a023ec34d16439ff80aadb540ae7dd14d0c7b137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a023ec34d16439ff80aadb540ae7dd14d0c7b137", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a023ec34d16439ff80aadb540ae7dd14d0c7b137", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a023ec34d16439ff80aadb540ae7dd14d0c7b137/comments", "author": null, "committer": null, "parents": [{"sha": "9ba6f952f0eac930bcdaa16b9f1f785dd3feb910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba6f952f0eac930bcdaa16b9f1f785dd3feb910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba6f952f0eac930bcdaa16b9f1f785dd3feb910"}], "stats": {"total": 196, "additions": 48, "deletions": 148}, "files": [{"sha": "34e592270f5286fb48a0fd9d4c7b69bbfd6ee204", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a023ec34d16439ff80aadb540ae7dd14d0c7b137/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a023ec34d16439ff80aadb540ae7dd14d0c7b137/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a023ec34d16439ff80aadb540ae7dd14d0c7b137", "patch": "@@ -1,3 +1,17 @@\n+2004-01-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol/file/Connection.java:\n+\tReformated copyright.\n+\t(hdrHash): Removed.\n+\t(hdrVec): Removed.\n+\t(gotHeaders): Removed.\n+\t(getHeaderField): Removed.\n+\t(getHeaderField): Removed.\n+\t(getHeaderFieldKey): Removed.\n+\t(getKey): Removed.\n+\t(getField): Removed.\n+\t(getHeaders): Removed.\n+\n 2004-01-06  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/print/attribute/standard/DateTimeAtCompleted.java,"}, {"sha": "650d9f21853e95bb6072c724a85a580917f65517", "filename": "libjava/gnu/java/net/protocol/file/Connection.java", "status": "modified", "additions": 34, "deletions": 148, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a023ec34d16439ff80aadb540ae7dd14d0c7b137/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a023ec34d16439ff80aadb540ae7dd14d0c7b137/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java?ref=a023ec34d16439ff80aadb540ae7dd14d0c7b137", "patch": "@@ -1,41 +1,40 @@\n-/*\n-  FileURLConnection.java -- URLConnection class for \"file\" protocol\n-  Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.\n+/* FileURLConnection.java -- URLConnection class for \"file\" protocol\n+   Copyright (C) 1998, 1999, 2003 Free Software Foundation, Inc.\n \n-  This file is part of GNU Classpath.\n+This file is part of GNU Classpath.\n \n-  GNU Classpath is free software; you can redistribute it and/or modify\n-  it under the terms of the GNU General Public License as published by\n-  the Free Software Foundation; either version 2, or (at your option)\n-  any later version.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n-  GNU Classpath is distributed in the hope that it will be useful, but\n-  WITHOUT ANY WARRANTY; without even the implied warranty of\n-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-  General Public License for more details.\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version.  */\n \n-  You should have received a copy of the GNU General Public License\n-  along with GNU Classpath; see the file COPYING.  If not, write to the\n-  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-  02111-1307 USA.\n-\n-  Linking this library statically or dynamically with other modules is\n-  making a combined work based on this library.  Thus, the terms and\n-  conditions of the GNU General Public License cover the whole\n-  combination.\n-\n-  As a special exception, the copyright holders of this library give you\n-  permission to link this library with independent modules to produce an\n-  executable, regardless of the license terms of these independent\n-  modules, and to copy and distribute the resulting executable under\n-  terms of your choice, provided that you also meet, for each linked\n-  independent module, the terms and conditions of the license of that\n-  module.  An independent module is a module which is not derived from\n-  or based on this library.  If you modify this library, you may extend\n-  this exception to your version of the library, but you are not\n-  obligated to do so.  If you do not wish to do so, delete this\n-  exception statement from your version.\n-*/\n package gnu.java.net.protocol.file;\n \n import java.io.BufferedInputStream;\n@@ -51,10 +50,6 @@\n import java.net.URL;\n import java.net.URLConnection;\n import java.security.Permission;\n-import java.util.Map;\n-import java.util.Vector;\n-import java.util.Hashtable;\n-import java.util.Enumeration;\n \n /**\n  * This subclass of java.net.URLConnection models a URLConnection via\n@@ -86,10 +81,6 @@ public class Connection extends URLConnection\n    */\n   private OutputStream outputStream;\n   \n-  private Hashtable hdrHash = new Hashtable();\n-  private Vector hdrVec = new Vector();\n-  private boolean gotHeaders = false;\n-\n   /**\n    * FilePermission to read the file\n    */\n@@ -216,109 +207,4 @@ public Permission getPermission() throws IOException\n   {\n     return permission;\n   }\n-\n-  public String getHeaderField(String name)\n-  {\n-    try\n-      {\n-\tgetHeaders();\n-      }\n-    catch (IOException e)\n-      {\n-\treturn null;\n-      }\n-    return (String) hdrHash.get(name.toLowerCase());\n-  }\n-\n-  public Map getHeaderFields()\n-  {\n-    try\n-      {\n-\tgetHeaders();\n-      }\n-    catch (IOException e)\n-      {\n-\treturn null;\n-      }\n-    return hdrHash;\n-  }\n-\n-  public String getHeaderField(int n)\n-  {\n-    try\n-      {\n-\tgetHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-\treturn null;\n-      }\n-    if (n < hdrVec.size())\n-      return getField ((String) hdrVec.elementAt(n));\n-\n-    return null;\n-  }\n-\n-  public String getHeaderFieldKey(int n)\n-  {\n-    try\n-      {\n-\tgetHeaders();\n-      }\n-    catch (IOException x)\n-      {\n-\treturn null;\n-      }\n-    if (n < hdrVec.size())\n-      return getKey ((String) hdrVec.elementAt(n));\n-\n-    return null;\n-  }\n-\n-  private String getKey(String str)\n-  {\n-    if (str == null)\n-      return null;\n-    int index = str.indexOf(':');\n-    if (index >= 0)\n-      return str.substring(0, index);\n-    else\n-      return null;\n-  }\n-\n-  private String getField(String str)\n-  {\n-    if (str == null)\n-      return null;\n-    int index = str.indexOf(':');\n-    if (index >= 0)\n-      return str.substring(index + 1).trim();\n-    else\n-      return str;\n-  }\n-\n-  private void getHeaders() throws IOException\n-  {\n-    if (gotHeaders)\n-      return;\n-    gotHeaders = true;\n-\n-    connect();\n-\n-    // Yes, it is overkill to use the hash table and vector here since\n-    // we're only putting one header in the file, but in case we need\n-    // to add others later and for consistency, we'll implement it this way.\n-\n-    // Add the only header we know about right now:  Content-length.\n-    long len = file.length();\n-    String line = \"Content-length: \" + len;\n-    hdrVec.addElement(line);\n-\n-    // The key will never be null in this scenario since we build up the\n-    // headers ourselves.  If we ever rely on getting a header from somewhere\n-    // else, then we may have to check if the result of getKey() is null.\n-    String key = getKey(line);\n-    hdrHash.put(key.toLowerCase(), Long.toString(len));\n-  }\n-\n-} // class FileURLConnection\n+}"}]}