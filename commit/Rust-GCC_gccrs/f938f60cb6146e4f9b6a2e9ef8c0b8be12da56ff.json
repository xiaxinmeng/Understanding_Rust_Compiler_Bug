{"sha": "f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkzOGY2MGNiNjE0NmU0ZjliNmEyZTllZjhjMGI4YmUxMmRhNTZmZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-10-12T11:25:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-10-12T11:25:16Z"}, "message": "flag-types.h: New.\n\n\t* flag-types.h: New.\n\t* Makefile.in (TH_H): Include $(OPTIONS_H) instead of $(FLAGS_H).\n\t(FLAGS_H): Include flag-types.h.  Include $(OPTIONS_H) instead of\n\toptions.h.\n\t(OPTIONS_H): Define.\n\t(c-family/c-opts.o, lto-opts.o, opts.o): Use $(OPTIONS_H) instead\n\tof options.h.\n\t* configure.ac (tm_include_list): Include options.h not flags.h.\n\t* configure: Regenerate.\n\t* flags.h: Include flag-types.h.  Include options.h at top of file\n\tagain.\n\t(enum debug_info_type, enum debug_info_level, enum\n\tdebug_info_usage, enum symbol_visibility, struct visibility_flags,\n\tenum ira_algorithm, enum ira_region, enum excess_precision, enum\n\tgraph_dump_types, enum stack_check_type, enum\n\twarn_strict_overflow_code): Move to flag-types.h\n\t* opth-gen.awk: Include flag-types.h in options.h.\n\nada:\n\t* gcc-interface/Make-lang.in (ada/misc.o): Use $(OPTIONS_H)\n\tinstead of options.h.\n\njava:\n\t* Make-lang.in (java/lang.o): Use $(OPTIONS_H) instead of\n\toptions.h.\n\nFrom-SVN: r165362", "tree": {"sha": "613335312107799d45a0405c8cd02ce350389985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/613335312107799d45a0405c8cd02ce350389985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beacce027435fb068f0edcb0a0e094ab6630ff01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beacce027435fb068f0edcb0a0e094ab6630ff01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beacce027435fb068f0edcb0a0e094ab6630ff01"}], "stats": {"total": 340, "additions": 199, "deletions": 141}, "files": [{"sha": "bd5743d62dd83c618071216cac7d8c8baee41bdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -1,3 +1,23 @@\n+2010-10-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* flag-types.h: New.\n+\t* Makefile.in (TH_H): Include $(OPTIONS_H) instead of $(FLAGS_H).\n+\t(FLAGS_H): Include flag-types.h.  Include $(OPTIONS_H) instead of\n+\toptions.h.\n+\t(OPTIONS_H): Define.\n+\t(c-family/c-opts.o, lto-opts.o, opts.o): Use $(OPTIONS_H) instead\n+\tof options.h.\n+\t* configure.ac (tm_include_list): Include options.h not flags.h.\n+\t* configure: Regenerate.\n+\t* flags.h: Include flag-types.h.  Include options.h at top of file\n+\tagain.\n+\t(enum debug_info_type, enum debug_info_level, enum\n+\tdebug_info_usage, enum symbol_visibility, struct visibility_flags,\n+\tenum ira_algorithm, enum ira_region, enum excess_precision, enum\n+\tgraph_dump_types, enum stack_check_type, enum\n+\twarn_strict_overflow_code): Move to flag-types.h\n+\t* opth-gen.awk: Include flag-types.h in options.h.\n+\n 2010-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* expr.c (store_expr): Share code for STRING_CST and"}, {"sha": "8118c0612b3dcafd59aa35edaa1300469b1d5f1c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -823,7 +823,7 @@ CONFIG_H  = config.h  $(host_xm_file_list)\n TCONFIG_H = tconfig.h $(xm_file_list)\n TM_P_H    = tm_p.h    $(tm_p_file_list)\n GTM_H     = tm.h      $(tm_file_list) insn-constants.h\n-TM_H      = $(GTM_H) insn-flags.h $(FLAGS_H)\n+TM_H      = $(GTM_H) insn-flags.h $(OPTIONS_H)\n \n # Variables for version information.\n BASEVER     := $(srcdir)/BASE-VER  # 4.x.y\n@@ -898,7 +898,8 @@ DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n ALIAS_H = alias.h coretypes.h\n EMIT_RTL_H = emit-rtl.h\n-FLAGS_H = flags.h coretypes.h options.h\n+FLAGS_H = flags.h coretypes.h flag-types.h $(OPTIONS_H)\n+OPTIONS_H = options.h flag-types.h\n FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H) vecprim.h $(TM_H)\n EXPR_H = expr.h insn-config.h $(FUNCTION_H) $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n@@ -2126,7 +2127,7 @@ c-family/c-omp.o : c-family/c-omp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n c-family/c-opts.o : c-family/c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n         $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) $(TOPLEV_H) langhooks.h \\\n         $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n-        opts.h options.h $(MKDEPS_H) incpath.h cppdefault.h\n+        opts.h $(OPTIONS_H) $(MKDEPS_H) incpath.h cppdefault.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n@@ -2327,7 +2328,7 @@ lto-symtab.o: lto-symtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    toplev.h $(TREE_H) $(GIMPLE_H) $(GGC_H) $(LAMBDA_H) $(HASHTAB_H) \\\n    $(LTO_STREAMER_H) $(LINKER_PLUGIN_API_H) gt-lto-symtab.h\n lto-opts.o: lto-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n-   $(HASHTAB_H) $(GGC_H) $(BITMAP_H) $(FLAGS_H) opts.h options.h \\\n+   $(HASHTAB_H) $(GGC_H) $(BITMAP_H) $(FLAGS_H) opts.h $(OPTIONS_H) \\\n    $(TARGET_H) $(TOPLEV_H) $(DIAGNOSTIC_H) $(LTO_STREAMER_H)\n lto-streamer.o: lto-streamer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TREE_H) $(GIMPLE_H) $(BITMAP_H) $(LTO_STREAMER_H) $(FLAGS_H) \\\n@@ -2819,7 +2820,7 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GIMPLE_H) realmpfr.h $(TREE_FLOW_H)\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n-opts.o : opts.c opts.h options.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n+opts.o : opts.c opts.h $(OPTIONS_H) $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TREE_H) $(TM_H) langhooks.h $(GGC_H) $(EXPR_H) $(RTL_H) \\\n    output.h $(DIAGNOSTIC_H) $(TM_P_H) $(INSN_ATTR_H) intl.h $(TARGET_H) \\\n    $(FLAGS_H) $(PARAMS_H) $(TREE_PASS_H) $(DBGCNT_H) debug.h \\"}, {"sha": "1cada039cc8ee76cc6675c170111afd6fc7cdf37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -1,3 +1,8 @@\n+2010-10-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/Make-lang.in (ada/misc.o): Use $(OPTIONS_H)\n+\tinstead of options.h.\n+\n 2010-10-12  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Clarify that 'Old can be used in preconditions and"}, {"sha": "6ae31c3da99d1fe29e718244c8ccdfdcf7691c8b", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -1234,7 +1234,7 @@ ada/decl.o : ada/gcc-interface/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n ada/misc.o : ada/gcc-interface/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TARGET_H) $(FUNCTION_H) \\\n    $(FLAGS_H) debug.h toplev.h langhooks.h \\\n-   $(LANGHOOKS_DEF_H) opts.h options.h $(TREE_INLINE_H) $(PLUGIN_H) \\\n+   $(LANGHOOKS_DEF_H) opts.h $(OPTIONS_H) $(TREE_INLINE_H) $(PLUGIN_H) \\\n    ada/gcc-interface/ada.h ada/adadecode.h ada/types.h ada/atree.h \\\n    ada/elists.h ada/namet.h ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h \\\n    ada/sinfo.h ada/einfo.h $(ADA_TREE_H) ada/gcc-interface/gigi.h \\"}, {"sha": "68cb29e2eefdbb7d643a163d055af9b0d269d643", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -10843,7 +10843,7 @@ tmake_file=\"${tmake_file_}\"\n out_object_file=`basename $out_file .c`.o\n \n tm_file_list=\"options.h\"\n-tm_include_list=\"flags.h insn-constants.h\"\n+tm_include_list=\"options.h insn-constants.h\"\n for f in $tm_file; do\n   case $f in\n     ./* )"}, {"sha": "9dd9c5d086ac7013f096f096e96957d8c46b7da3", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -1609,7 +1609,7 @@ tmake_file=\"${tmake_file_}\"\n out_object_file=`basename $out_file .c`.o\n \n tm_file_list=\"options.h\"\n-tm_include_list=\"flags.h insn-constants.h\"\n+tm_include_list=\"options.h insn-constants.h\"\n for f in $tm_file; do\n   case $f in\n     ./* )"}, {"sha": "1a8edec3a37cd9aab5f8dd52866c5eeffc36c693", "filename": "gcc/flag-types.h", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -0,0 +1,155 @@\n+/* Compilation switch flag type definitions for GCC.\n+   Copyright (C) 1987, 1988, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002,\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_FLAG_TYPES_H\n+#define GCC_FLAG_TYPES_H\n+\n+enum debug_info_type\n+{\n+  NO_DEBUG,\t    /* Write no debug info.  */\n+  DBX_DEBUG,\t    /* Write BSD .stabs for DBX (using dbxout.c).  */\n+  SDB_DEBUG,\t    /* Write COFF for (old) SDB (using sdbout.c).  */\n+  DWARF2_DEBUG,\t    /* Write Dwarf v2 debug info (using dwarf2out.c).  */\n+  XCOFF_DEBUG,\t    /* Write IBM/Xcoff debug info (using dbxout.c).  */\n+  VMS_DEBUG,        /* Write VMS debug info (using vmsdbgout.c).  */\n+  VMS_AND_DWARF2_DEBUG /* Write VMS debug info (using vmsdbgout.c).\n+                          and DWARF v2 debug info (using dwarf2out.c).  */\n+};\n+\n+enum debug_info_level\n+{\n+  DINFO_LEVEL_NONE,\t/* Write no debugging info.  */\n+  DINFO_LEVEL_TERSE,\t/* Write minimal info to support tracebacks only.  */\n+  DINFO_LEVEL_NORMAL,\t/* Write info for all declarations (and line table).  */\n+  DINFO_LEVEL_VERBOSE\t/* Write normal info plus #define/#undef info.  */\n+};\n+\n+/* A major contribution to object and executable size is debug\n+   information size.  A major contribution to debug information\n+   size is struct descriptions replicated in several object files.\n+   The following function determines whether or not debug information\n+   should be generated for a given struct.  The indirect parameter\n+   indicates that the struct is being handled indirectly, via\n+   a pointer.  See opts.c for the implementation. */\n+\n+enum debug_info_usage\n+{\n+  DINFO_USAGE_DFN,\t/* A struct definition. */\n+  DINFO_USAGE_DIR_USE,\t/* A direct use, such as the type of a variable. */\n+  DINFO_USAGE_IND_USE,\t/* An indirect use, such as through a pointer. */\n+  DINFO_USAGE_NUM_ENUMS\t/* The number of enumerators. */\n+};\n+\n+/* Enumerate visibility settings.  This is deliberately ordered from most\n+   to least visibility.  */\n+#ifndef SYMBOL_VISIBILITY_DEFINED\n+#define SYMBOL_VISIBILITY_DEFINED\n+enum symbol_visibility\n+{\n+  VISIBILITY_DEFAULT,\n+  VISIBILITY_PROTECTED,\n+  VISIBILITY_HIDDEN,\n+  VISIBILITY_INTERNAL\n+};\n+#endif\n+\n+struct visibility_flags\n+{\n+  unsigned inpragma : 1;\t/* True when in #pragma GCC visibility.  */\n+  unsigned inlines_hidden : 1;\t/* True when -finlineshidden in effect.  */\n+};\n+\n+/* The algorithm used for the integrated register allocator (IRA).  */\n+enum ira_algorithm\n+{\n+  IRA_ALGORITHM_CB,\n+  IRA_ALGORITHM_PRIORITY\n+};\n+\n+/* The regions used for the integrated register allocator (IRA).  */\n+enum ira_region\n+{\n+  IRA_REGION_ONE,\n+  IRA_REGION_ALL,\n+  IRA_REGION_MIXED\n+};\n+\n+/* The options for excess precision.  */\n+enum excess_precision\n+{\n+  EXCESS_PRECISION_DEFAULT,\n+  EXCESS_PRECISION_FAST,\n+  EXCESS_PRECISION_STANDARD\n+};\n+\n+/* Selection of the graph form.  */\n+enum graph_dump_types\n+{\n+  no_graph = 0,\n+  vcg\n+};\n+\n+/* Type of stack check.  */\n+enum stack_check_type\n+{\n+  /* Do not check the stack.  */\n+  NO_STACK_CHECK = 0,\n+\n+  /* Check the stack generically, i.e. assume no specific support\n+     from the target configuration files.  */\n+  GENERIC_STACK_CHECK,\n+\n+  /* Check the stack and rely on the target configuration files to\n+     check the static frame of functions, i.e. use the generic\n+     mechanism only for dynamic stack allocations.  */\n+  STATIC_BUILTIN_STACK_CHECK,\n+\n+  /* Check the stack and entirely rely on the target configuration\n+     files, i.e. do not use the generic mechanism at all.  */\n+  FULL_BUILTIN_STACK_CHECK\n+};\n+\n+/* Names for the different levels of -Wstrict-overflow=N.  The numeric\n+   values here correspond to N.  */\n+\n+enum warn_strict_overflow_code\n+{\n+  /* Overflow warning that should be issued with -Wall: a questionable\n+     construct that is easy to avoid even when using macros.  Example:\n+     folding (x + CONSTANT > x) to 1.  */\n+  WARN_STRICT_OVERFLOW_ALL = 1,\n+  /* Overflow warning about folding a comparison to a constant because\n+     of undefined signed overflow, other than cases covered by\n+     WARN_STRICT_OVERFLOW_ALL.  Example: folding (abs (x) >= 0) to 1\n+     (this is false when x == INT_MIN).  */\n+  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,\n+  /* Overflow warning about changes to comparisons other than folding\n+     them to a constant.  Example: folding (x + 1 > 1) to (x > 0).  */\n+  WARN_STRICT_OVERFLOW_COMPARISON = 3,\n+  /* Overflow warnings not covered by the above cases.  Example:\n+     folding ((x * 10) / 5) to (x * 2).  */\n+  WARN_STRICT_OVERFLOW_MISC = 4,\n+  /* Overflow warnings about reducing magnitude of constants in\n+     comparison.  Example: folding (x + 2 > y) to (x + 1 >= y).  */\n+  WARN_STRICT_OVERFLOW_MAGNITUDE = 5\n+};\n+\n+#endif /* ! GCC_FLAG_TYPES_H */"}, {"sha": "1125440ea3f26ec2573d7f9853f6faae4bf82b98", "filename": "gcc/flags.h", "status": "modified", "additions": 2, "deletions": 132, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -23,54 +23,20 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_FLAGS_H\n \n #include \"coretypes.h\"\n+#include \"flag-types.h\"\n+#include \"options.h\"\n \n #if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\n \n-enum debug_info_type\n-{\n-  NO_DEBUG,\t    /* Write no debug info.  */\n-  DBX_DEBUG,\t    /* Write BSD .stabs for DBX (using dbxout.c).  */\n-  SDB_DEBUG,\t    /* Write COFF for (old) SDB (using sdbout.c).  */\n-  DWARF2_DEBUG,\t    /* Write Dwarf v2 debug info (using dwarf2out.c).  */\n-  XCOFF_DEBUG,\t    /* Write IBM/Xcoff debug info (using dbxout.c).  */\n-  VMS_DEBUG,        /* Write VMS debug info (using vmsdbgout.c).  */\n-  VMS_AND_DWARF2_DEBUG /* Write VMS debug info (using vmsdbgout.c).\n-                          and DWARF v2 debug info (using dwarf2out.c).  */\n-};\n-\n /* Specify which kind of debugging info to generate.  */\n extern enum debug_info_type write_symbols;\n \n /* Names of debug_info_type, for error messages.  */\n extern const char *const debug_type_names[];\n \n-enum debug_info_level\n-{\n-  DINFO_LEVEL_NONE,\t/* Write no debugging info.  */\n-  DINFO_LEVEL_TERSE,\t/* Write minimal info to support tracebacks only.  */\n-  DINFO_LEVEL_NORMAL,\t/* Write info for all declarations (and line table).  */\n-  DINFO_LEVEL_VERBOSE\t/* Write normal info plus #define/#undef info.  */\n-};\n-\n /* Specify how much debugging info to generate.  */\n extern enum debug_info_level debug_info_level;\n \n-/* A major contribution to object and executable size is debug\n-   information size.  A major contribution to debug information\n-   size is struct descriptions replicated in several object files.\n-   The following function determines whether or not debug information\n-   should be generated for a given struct.  The indirect parameter\n-   indicates that the struct is being handled indirectly, via\n-   a pointer.  See opts.c for the implementation. */\n-\n-enum debug_info_usage\n-{\n-  DINFO_USAGE_DFN,\t/* A struct definition. */\n-  DINFO_USAGE_DIR_USE,\t/* A direct use, such as the type of a variable. */\n-  DINFO_USAGE_IND_USE,\t/* An indirect use, such as through a pointer. */\n-  DINFO_USAGE_NUM_ENUMS\t/* The number of enumerators. */\n-};\n-\n extern bool should_emit_struct_debug (tree type_decl, enum debug_info_usage);\n extern void set_struct_debug_option (const char *value);\n \n@@ -83,28 +49,9 @@ extern bool use_gnu_debug_info_extensions;\n    an actual variable not a macro.  */\n extern int flag_compare_debug;\n \n-/* Enumerate visibility settings.  This is deliberately ordered from most\n-   to least visibility.  */\n-#ifndef SYMBOL_VISIBILITY_DEFINED\n-#define SYMBOL_VISIBILITY_DEFINED\n-enum symbol_visibility\n-{\n-  VISIBILITY_DEFAULT,\n-  VISIBILITY_PROTECTED,\n-  VISIBILITY_HIDDEN,\n-  VISIBILITY_INTERNAL\n-};\n-#endif\n-\n /* The default visibility for all symbols (unless overridden).  */\n extern enum symbol_visibility default_visibility;\n \n-struct visibility_flags\n-{\n-  unsigned inpragma : 1;\t/* True when in #pragma GCC visibility.  */\n-  unsigned inlines_hidden : 1;\t/* True when -finlineshidden in effect.  */\n-};\n-\n /* Global visibility options.  */\n extern struct visibility_flags visibility_options;\n \n@@ -189,29 +136,6 @@ extern int flag_next_runtime;\n \n extern int flag_dump_rtl_in_asm;\n \n-/* The algorithm used for the integrated register allocator (IRA).  */\n-enum ira_algorithm\n-{\n-  IRA_ALGORITHM_CB,\n-  IRA_ALGORITHM_PRIORITY\n-};\n-\n-/* The regions used for the integrated register allocator (IRA).  */\n-enum ira_region\n-{\n-  IRA_REGION_ONE,\n-  IRA_REGION_ALL,\n-  IRA_REGION_MIXED\n-};\n-\n-/* The options for excess precision.  */\n-enum excess_precision\n-{\n-  EXCESS_PRECISION_DEFAULT,\n-  EXCESS_PRECISION_FAST,\n-  EXCESS_PRECISION_STANDARD\n-};\n-\n /* The excess precision specified on the command line, or defaulted by\n    the front end.  */\n extern enum excess_precision flag_excess_precision_cmdline;\n@@ -263,33 +187,8 @@ extern struct target_flag_state *this_target_flag_state;\n /* Nonzero if we dump in VCG format, not plain text.  */\n extern int dump_for_graph;\n \n-/* Selection of the graph form.  */\n-enum graph_dump_types\n-{\n-  no_graph = 0,\n-  vcg\n-};\n extern enum graph_dump_types graph_dump_format;\n \n-/* Type of stack check.  */\n-enum stack_check_type\n-{\n-  /* Do not check the stack.  */\n-  NO_STACK_CHECK = 0,\n-\n-  /* Check the stack generically, i.e. assume no specific support\n-     from the target configuration files.  */\n-  GENERIC_STACK_CHECK,\n-\n-  /* Check the stack and rely on the target configuration files to\n-     check the static frame of functions, i.e. use the generic\n-     mechanism only for dynamic stack allocations.  */\n-  STATIC_BUILTIN_STACK_CHECK,\n-\n-  /* Check the stack and entirely rely on the target configuration\n-     files, i.e. do not use the generic mechanism at all.  */\n-  FULL_BUILTIN_STACK_CHECK\n-};\n extern enum stack_check_type flag_stack_check;\n \n /* Returns TRUE if generated code should match ABI version N or\n@@ -326,38 +225,9 @@ extern bool flag_instrument_functions_exclude_p (tree fndecl);\n /* True if pointer types have undefined overflow.  */\n #define POINTER_TYPE_OVERFLOW_UNDEFINED (flag_strict_overflow)\n \n-/* Names for the different levels of -Wstrict-overflow=N.  The numeric\n-   values here correspond to N.  */\n-\n-enum warn_strict_overflow_code\n-{\n-  /* Overflow warning that should be issued with -Wall: a questionable\n-     construct that is easy to avoid even when using macros.  Example:\n-     folding (x + CONSTANT > x) to 1.  */\n-  WARN_STRICT_OVERFLOW_ALL = 1,\n-  /* Overflow warning about folding a comparison to a constant because\n-     of undefined signed overflow, other than cases covered by\n-     WARN_STRICT_OVERFLOW_ALL.  Example: folding (abs (x) >= 0) to 1\n-     (this is false when x == INT_MIN).  */\n-  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,\n-  /* Overflow warning about changes to comparisons other than folding\n-     them to a constant.  Example: folding (x + 1 > 1) to (x > 0).  */\n-  WARN_STRICT_OVERFLOW_COMPARISON = 3,\n-  /* Overflow warnings not covered by the above cases.  Example:\n-     folding ((x * 10) / 5) to (x * 2).  */\n-  WARN_STRICT_OVERFLOW_MISC = 4,\n-  /* Overflow warnings about reducing magnitude of constants in\n-     comparison.  Example: folding (x + 2 > y) to (x + 1 >= y).  */\n-  WARN_STRICT_OVERFLOW_MAGNITUDE = 5\n-};\n-\n /* Whether to emit an overflow warning whose code is C.  */\n #define issue_strict_overflow_warning(c) (warn_strict_overflow >= (int) (c))\n \n #endif\n \n-/* This is included last because options may use types declared\n-   above.  */\n-#include \"options.h\"\n-\n #endif /* ! GCC_FLAGS_H */"}, {"sha": "a7edd3b17150c81956afde636e7ed5b26f0b5d87", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -1,3 +1,8 @@\n+2010-10-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (java/lang.o): Use $(OPTIONS_H) instead of\n+\toptions.h.\n+\n 2010-10-11  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* decl.c (java_init_decl_processing): Use build_function_type_list"}, {"sha": "7b7ed93787ec9219b6c4a3c4b12a96e228d10ca4", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -302,7 +302,7 @@ java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) intl.h\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(DIAGNOSTIC_H) \\\n-  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h options.h \\\n+  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h $(OPTIONS_H) \\\n   $(TARGET_H)\n java/mangle.o: java/mangle.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-mangle.h $(LANGHOOKS_DEF_H)"}, {"sha": "677225e1c1bf0f3bed076711dd2d9a24fa8d7a35", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=f938f60cb6146e4f9b6a2e9ef8c0b8be12da56ff", "patch": "@@ -70,6 +70,8 @@ print \"\"\n print \"#ifndef OPTIONS_H\"\n print \"#define OPTIONS_H\"\n print \"\"\n+print \"#include \\\"flag-types.h\\\"\"\n+print \"\"\n \n have_save = 0;\n "}]}