{"sha": "30c0ee9ca68e62a066f2653da11c50f708666857", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjMGVlOWNhNjhlNjJhMDY2ZjI2NTNkYTExYzUwZjcwODY2Njg1Nw==", "commit": {"author": {"name": "Matthew Fortune", "email": "matthew.fortune@mips.com", "date": "2018-06-13T20:40:28Z"}, "committer": {"name": "Robert Suchanek", "email": "rts@gcc.gnu.org", "date": "2018-06-13T20:40:28Z"}, "message": "MIPS: Add support for P6600.\n\ngcc/ChangeLog:\n\n2018-06-13  Matthew Fortune  <matthew.fortune@mips.com>\n            Prachi Godbole  <prachi.godbole@imgtec.com>\n\n\t* config/mips/mips-cpus.def: Define P6600.\n\t* config/mips/mips-tables.opt: Regenerate.\n\t* config/mips/mips.c (mips_ucbranch_type): New enum.\n\t(mips_rtx_cost_data): Add support for P6600.\n\t(mips_issue_rate): Likewise.\n\t(mips_multipass_dfa_lookahead): Likewise.\n\t(mips_avoid_hazard): Likewise.\n\t(mips_reorg_process_insns): Likewise.\n\t(mips_classify_branch_p6600): New function.\n\t* config/mips/mips.h (TUNE_P6600): New define.\n\t(MIPS_ISA_LEVEL_SPEC): Infer mips64r6 from p6600.\n\t(ENABLE_LD_ST_PAIRS): Enable load/store bonding for p6600.\n\t* config/mips/mips.md: Include p6600.md.\n\t(processor): Add p6600.\n\t* config/mips/p6600.md: New file.\n\t* doc/invoke.texi: Add p6600 to supported architectures.\n\nCo-Authored-By: Prachi Godbole <prachi.godbole@imgtec.com>\n\nFrom-SVN: r261570", "tree": {"sha": "eb64925dcae8e0e75f32d31b1b8b35f896611627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb64925dcae8e0e75f32d31b1b8b35f896611627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c0ee9ca68e62a066f2653da11c50f708666857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c0ee9ca68e62a066f2653da11c50f708666857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c0ee9ca68e62a066f2653da11c50f708666857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c0ee9ca68e62a066f2653da11c50f708666857/comments", "author": null, "committer": null, "parents": [{"sha": "1df5fce42a295ae8cb34c6a4aae30814679b0b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df5fce42a295ae8cb34c6a4aae30814679b0b59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df5fce42a295ae8cb34c6a4aae30814679b0b59"}], "stats": {"total": 478, "additions": 470, "deletions": 8}, "files": [{"sha": "8c655bd75a96302608709cf8a1ce6e73958cee3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30c0ee9ca68e62a066f2653da11c50f708666857", "patch": "@@ -1,3 +1,23 @@\n+2018-06-13  Matthew Fortune  <matthew.fortune@mips.com>\n+\t    Prachi Godbole  <prachi.godbole@imgtec.com>\n+\n+\t* config/mips/mips-cpus.def: Define P6600.\n+\t* config/mips/mips-tables.opt: Regenerate.\n+\t* config/mips/mips.c (mips_ucbranch_type): New enum.\n+\t(mips_rtx_cost_data): Add support for P6600.\n+\t(mips_issue_rate): Likewise.\n+\t(mips_multipass_dfa_lookahead): Likewise.\n+\t(mips_avoid_hazard): Likewise.\n+\t(mips_reorg_process_insns): Likewise.\n+\t(mips_classify_branch_p6600): New function.\n+\t* config/mips/mips.h (TUNE_P6600): New define.\n+\t(MIPS_ISA_LEVEL_SPEC): Infer mips64r6 from p6600.\n+\t(ENABLE_LD_ST_PAIRS): Enable load/store bonding for p6600.\n+\t* config/mips/mips.md: Include p6600.md.\n+\t(processor): Add p6600.\n+\t* config/mips/p6600.md: New file.\n+\t* doc/invoke.texi: Add p6600 to supported architectures.\n+\n 2018-06-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86114"}, {"sha": "6a545634417c9e348dcb1cf58f3cd9839cbce8f9", "filename": "gcc/config/mips/mips-cpus.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-cpus.def?ref=30c0ee9ca68e62a066f2653da11c50f708666857", "patch": "@@ -172,3 +172,4 @@ MIPS_CPU (\"xlp\", PROCESSOR_XLP, 65, PTF_AVOID_BRANCHLIKELY_SPEED)\n /* MIPS64 Release 6 processors.  */\n MIPS_CPU (\"i6400\", PROCESSOR_I6400, 69, 0)\n MIPS_CPU (\"i6500\", PROCESSOR_I6400, 69, 0)\n+MIPS_CPU (\"p6600\", PROCESSOR_P6600, 69, 0)"}, {"sha": "11be4639fc39dc576efe45c3109f759aebe8174d", "filename": "gcc/config/mips/mips-tables.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-tables.opt?ref=30c0ee9ca68e62a066f2653da11c50f708666857", "patch": "@@ -699,3 +699,6 @@ Enum(mips_arch_opt_value) String(i6400) Value(102) Canonical\n EnumValue\n Enum(mips_arch_opt_value) String(i6500) Value(103) Canonical\n \n+EnumValue\n+Enum(mips_arch_opt_value) String(p6600) Value(104) Canonical\n+"}, {"sha": "ad2c1d991a0bbb29ce5e818faeefd57643c13589", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 97, "deletions": 5, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=30c0ee9ca68e62a066f2653da11c50f708666857", "patch": "@@ -198,6 +198,16 @@ enum mips_address_type {\n   ADDRESS_SYMBOLIC\n };\n \n+/* Classifies an unconditional branch of interest for the P6600.  */\n+\n+enum mips_ucbranch_type\n+{\n+  /* May not even be a branch.  */\n+  UC_UNDEFINED,\n+  UC_BALC,\n+  UC_OTHER\n+};\n+\n /* Macros to create an enumeration identifier for a function prototype.  */\n #define MIPS_FTYPE_NAME1(A, B) MIPS_##A##_FTYPE_##B\n #define MIPS_FTYPE_NAME2(A, B, C) MIPS_##A##_FTYPE_##B##_##C\n@@ -1127,6 +1137,19 @@ static const struct mips_rtx_cost_data\n     COSTS_N_INSNS (36),           /* int_div_di */\n \t\t    2,            /* branch_cost */\n \t\t    4             /* memory_latency */\n+  },\n+  { /* P6600 */\n+    COSTS_N_INSNS (4),            /* fp_add */\n+    COSTS_N_INSNS (5),            /* fp_mult_sf */\n+    COSTS_N_INSNS (5),            /* fp_mult_df */\n+    COSTS_N_INSNS (17),           /* fp_div_sf */\n+    COSTS_N_INSNS (17),           /* fp_div_df */\n+    COSTS_N_INSNS (5),            /* int_mult_si */\n+    COSTS_N_INSNS (5),            /* int_mult_di */\n+    COSTS_N_INSNS (8),            /* int_div_si */\n+    COSTS_N_INSNS (8),            /* int_div_di */\n+\t\t    2,            /* branch_cost */\n+\t\t    4             /* memory_latency */\n   }\n };\n \f\n@@ -14592,6 +14615,7 @@ mips_issue_rate (void)\n     case PROCESSOR_LOONGSON_2F:\n     case PROCESSOR_LOONGSON_3A:\n     case PROCESSOR_P5600:\n+    case PROCESSOR_P6600:\n       return 4;\n \n     case PROCESSOR_XLP:\n@@ -14727,7 +14751,7 @@ mips_multipass_dfa_lookahead (void)\n   if (TUNE_OCTEON)\n     return 2;\n \n-  if (TUNE_P5600 || TUNE_I6400)\n+  if (TUNE_P5600 || TUNE_P6600 || TUNE_I6400)\n     return 4;\n \n   return 0;\n@@ -18647,6 +18671,29 @@ mips_orphaned_high_part_p (mips_offset_table *htab, rtx_insn *insn)\n   return false;\n }\n \n+/* Subroutine of mips_avoid_hazard.  We classify unconditional branches\n+   of interest for the P6600 for performance reasons.  We're interested\n+   in differentiating BALC from JIC, JIALC and BC.  */\n+\n+static enum mips_ucbranch_type\n+mips_classify_branch_p6600 (rtx_insn *insn)\n+{\n+  /* We ignore sequences here as they represent a filled delay slot.  */\n+  if (!insn\n+      || !USEFUL_INSN_P (insn)\n+      || GET_CODE (PATTERN (insn)) == SEQUENCE)\n+    return UC_UNDEFINED;\n+\n+  if (get_attr_jal (insn) == JAL_INDIRECT /* JIC and JIALC.  */\n+      || get_attr_type (insn) == TYPE_JUMP) /* BC.  */\n+    return UC_OTHER;\n+\n+  if (CALL_P (insn) && get_attr_jal (insn) == JAL_DIRECT)\n+    return UC_BALC;\n+\n+  return UC_UNDEFINED;\n+}\n+\n /* Subroutine of mips_reorg_process_insns.  If there is a hazard between\n    INSN and a previous instruction, avoid it by inserting nops after\n    instruction AFTER.\n@@ -18699,14 +18746,40 @@ mips_avoid_hazard (rtx_insn *after, rtx_insn *insn, int *hilo_delay,\n \t   && GET_CODE (pattern) != ASM_INPUT\n \t   && asm_noperands (pattern) < 0)\n     nops = 1;\n+  /* The P6600's branch predictor can handle static sequences of back-to-back\n+     branches in the following cases:\n+\n+     (1) BALC followed by any conditional compact branch\n+     (2) BALC followed by BALC\n+\n+     Any other combinations of compact branches will incur performance\n+     penalty.  Inserting a no-op only costs space as the dispatch unit will\n+     disregard the nop.  */\n+  else if (TUNE_P6600 && TARGET_CB_MAYBE && !optimize_size\n+\t   && ((mips_classify_branch_p6600 (after) == UC_BALC\n+\t\t&& mips_classify_branch_p6600 (insn) == UC_OTHER)\n+\t       || (mips_classify_branch_p6600 (insn) == UC_BALC\n+\t\t   && mips_classify_branch_p6600 (after) == UC_OTHER)))\n+    nops = 1;\n   else\n     nops = 0;\n \n   /* Insert the nops between this instruction and the previous one.\n      Each new nop takes us further from the last hilo hazard.  */\n   *hilo_delay += nops;\n+\n+  /* Move to the next real instruction if we are inserting a NOP and this\n+     instruction is a call with debug information.  The reason being that\n+     we can't separate the call from the debug info.   */\n+  rtx_insn *real_after = after;\n+  if (real_after && nops && CALL_P (real_after))\n+    while (real_after\n+\t   && (NOTE_P (NEXT_INSN (real_after))\n+\t       || BARRIER_P (NEXT_INSN (real_after))))\n+      real_after = NEXT_INSN (real_after);\n+\n   while (nops-- > 0)\n-    emit_insn_after (gen_hazard_nop (), after);\n+    emit_insn_after (gen_hazard_nop (), real_after);\n \n   /* Set up the state for the next instruction.  */\n   *hilo_delay += ninsns;\n@@ -18716,6 +18789,15 @@ mips_avoid_hazard (rtx_insn *after, rtx_insn *insn, int *hilo_delay,\n     switch (get_attr_hazard (insn))\n       {\n       case HAZARD_NONE:\n+\t/* For the P6600, flag some unconditional branches as having a\n+\t   pseudo-forbidden slot.  This will cause additional nop insertion\n+\t   or SEQUENCE breaking as required.  This is for performance\n+\t   reasons not correctness.  */\n+\tif (TUNE_P6600\n+\t    && !optimize_size\n+\t    && TARGET_CB_MAYBE\n+\t    && mips_classify_branch_p6600 (insn) == UC_OTHER)\n+\t  *fs_delay = true;\n \tbreak;\n \n       case HAZARD_FORBIDDEN_SLOT:\n@@ -18955,9 +19037,19 @@ mips_reorg_process_insns (void)\n \t\t     and the next useful instruction is a SEQUENCE of a jump\n \t\t     and a non-nop instruction in the delay slot, remove the\n \t\t     sequence and replace it with the delay slot instruction\n-\t\t     then the jump to clear the forbidden slot hazard.  */\n-\n-\t\t  if (fs_delay)\n+\t\t     then the jump to clear the forbidden slot hazard.\n+\n+\t\t     For the P6600, this optimisation solves the performance\n+\t\t     penalty associated with BALC followed by a delay slot\n+\t\t     branch.  We do not set fs_delay as we do not want\n+\t\t     the full logic of a forbidden slot; the penalty exists\n+\t\t     only against branches not the full class of forbidden\n+\t\t     slot instructions.  */\n+\n+\t\t  if (fs_delay || (TUNE_P6600\n+\t\t\t\t   && TARGET_CB_MAYBE\n+\t\t\t\t   && mips_classify_branch_p6600 (insn)\n+\t\t\t\t      == UC_BALC))\n \t\t    {\n \t\t      /* Search onwards from the current position looking for\n \t\t\t a SEQUENCE.  We are looking for pipeline hazards here"}, {"sha": "61c5ae24617c05f7ee91e62985be5be5a4d176f0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=30c0ee9ca68e62a066f2653da11c50f708666857", "patch": "@@ -317,6 +317,7 @@ struct mips_cpu_info {\n \t\t\t\t     || mips_tune == PROCESSOR_SB1A)\n #define TUNE_P5600                  (mips_tune == PROCESSOR_P5600)\n #define TUNE_I6400                  (mips_tune == PROCESSOR_I6400)\n+#define TUNE_P6600                  (mips_tune == PROCESSOR_P6600)\n \n /* Whether vector modes and intrinsics for ST Microelectronics\n    Loongson-2E/2F processors should be enabled.  In o32 pairs of\n@@ -782,7 +783,7 @@ struct mips_cpu_info {\n      %{march=mips64r2|march=loongson3a|march=octeon|march=xlp: -mips64r2} \\\n      %{march=mips64r3: -mips64r3} \\\n      %{march=mips64r5: -mips64r5} \\\n-     %{march=mips64r6|march=i6400|march=i6500: -mips64r6}}\"\n+     %{march=mips64r6|march=i6400|march=i6500|march=p6600: -mips64r6}}\"\n \n /* A spec that injects the default multilib ISA if no architecture is\n    specified.  */\n@@ -3403,5 +3404,6 @@ struct GTY(())  machine_function {\n    performance can be degraded for those targets.  Hence, do not bond for\n    micromips or fix_24k.  */\n #define ENABLE_LD_ST_PAIRS \\\n-  (TARGET_LOAD_STORE_PAIRS && (TUNE_P5600 || TUNE_I6400) \\\n+  (TARGET_LOAD_STORE_PAIRS \\\n+   && (TUNE_P5600 || TUNE_I6400 || TUNE_P6600) \\\n    && !TARGET_MICROMIPS && !TARGET_FIX_24K)"}, {"sha": "ea5a23be1f77cf04f080df4e16357974c3838417", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=30c0ee9ca68e62a066f2653da11c50f708666857", "patch": "@@ -69,6 +69,7 @@\n   p5600\n   m5100\n   i6400\n+  p6600\n ])\n \n (define_c_enum \"unspec\" [\n@@ -1152,6 +1153,7 @@\n (include \"i6400.md\")\n (include \"p5600.md\")\n (include \"m5100.md\")\n+(include \"p6600.md\")\n (include \"4k.md\")\n (include \"5k.md\")\n (include \"20kc.md\")"}, {"sha": "211bdd771436b3f4737e2f4a5635013096c265e1", "filename": "gcc/config/mips/p6600.md", "status": "added", "additions": 342, "deletions": 0, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fp6600.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fconfig%2Fmips%2Fp6600.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fp6600.md?ref=30c0ee9ca68e62a066f2653da11c50f708666857", "patch": "@@ -0,0 +1,342 @@\n+;; DFA-based pipeline description for P6600.\n+;;\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"p6600_agen_alq_pipe, p6600_mdu_pipe, p6600_fpu_pipe\")\n+\n+;; The address generation queue (AGQ) has AL2, CTISTD and LDSTA pipes\n+(define_cpu_unit \"p6600_agq, p6600_al2, p6600_ctistd, p6600_lsu\"\n+\t\t \"p6600_agen_alq_pipe\")\n+\n+(define_cpu_unit \"p6600_gpmul, p6600_gpdiv\" \"p6600_mdu_pipe\")\n+\n+;; The arithmetic-logic-unit queue (ALQ) has ALU pipe\n+(define_cpu_unit \"p6600_alq, p6600_alu\" \"p6600_agen_alq_pipe\")\n+\n+;; The floating-point-unit queue (FPQ) has short and long pipes\n+(define_cpu_unit \"p6600_fpu_short, p6600_fpu_long\" \"p6600_fpu_pipe\")\n+\n+;; Short FPU pipeline.\n+(define_cpu_unit \"p6600_fpu_intadd, p6600_fpu_cmp, p6600_fpu_float,\n+\t\t  p6600_fpu_logic_a, p6600_fpu_logic_b, p6600_fpu_div,\n+\t\t  p6600_fpu_store\" \"p6600_fpu_pipe\")\n+\n+;; Long FPU pipeline.\n+(define_cpu_unit \"p6600_fpu_logic, p6600_fpu_float_a, p6600_fpu_float_b,\n+\t\t  p6600_fpu_float_c, p6600_fpu_float_d\" \"p6600_fpu_pipe\")\n+(define_cpu_unit \"p6600_fpu_mult, p6600_fpu_fdiv, p6600_fpu_apu\" \"p6600_fpu_pipe\")\n+\n+(define_reservation \"p6600_agq_al2\" \"p6600_agq, p6600_al2\")\n+(define_reservation \"p6600_agq_ctistd\" \"p6600_agq, p6600_ctistd\")\n+(define_reservation \"p6600_agq_lsu\" \"p6600_agq, p6600_lsu\")\n+(define_reservation \"p6600_alq_alu\" \"p6600_alq, p6600_alu\")\n+\n+;;\n+;; FPU-MSA pipe\n+;;\n+\n+;; Arithmetic\n+;; add, hadd, sub, hsub, average, min, max, compare\n+(define_insn_reservation \"p6600_msa_short_int_add\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_int_arith\"))\n+  \"p6600_fpu_short, p6600_fpu_intadd\")\n+\n+;; Bitwise Instructions\n+;; and, or, xor, bit-clear, leading-bits-count, shift, shuffle\n+(define_insn_reservation \"p6600_msa_short_logic\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_shift,simd_bit,simd_splat,simd_fill,simd_shf,\n+\t\t\tsimd_permute,simd_logic\"))\n+  \"p6600_fpu_short, p6600_fpu_logic_a\")\n+\n+;; move.v\n+(define_insn_reservation \"p6600_msa_short_logic_move_v\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_move\"))\n+  \"p6600_fpu_short, p6600_fpu_logic_a\")\n+\n+;; Float compare\n+(define_insn_reservation \"p6600_msa_short_cmp\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_fcmp\"))\n+  \"p6600_fpu_short, p6600_fpu_cmp\")\n+\n+;; Float exp2, min, max\n+(define_insn_reservation \"p6600_msa_short_float2\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_fexp2,simd_fminmax\"))\n+  \"p6600_fpu_short, p6600_fpu_float\")\n+\n+;; Vector sat\n+(define_insn_reservation \"p6600_msa_short_logic3\" 3\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_sat,simd_pcnt\"))\n+  \"p6600_fpu_short, p6600_fpu_logic_a, p6600_fpu_logic_b\")\n+\n+;; Vector copy, bz, bnz\n+(define_insn_reservation \"p6600_msa_short_store4\" 4\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_copy,simd_branch,simd_cmsa\"))\n+  \"p6600_fpu_short, p6600_fpu_store\")\n+\n+;; Vector load\n+(define_insn_reservation \"p6600_msa_load\" 8\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_load\"))\n+  \"p6600_agq_lsu\")\n+\n+;; Vector store\n+(define_insn_reservation \"p6600_msa_short_store\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_store\"))\n+  \"p6600_agq_lsu\")\n+\n+;; binsl, binsr, insert, vshf, sld\n+(define_insn_reservation \"p6600_msa_long_logic\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_bitins,simd_bitmov,simd_insert,simd_sld\"))\n+  \"p6600_fpu_long, p6600_fpu_logic\")\n+\n+;; Float fclass, flog2\n+(define_insn_reservation \"p6600_msa_long_float2\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_fclass,simd_flog2\"))\n+  \"p6600_fpu_long, p6600_fpu_float_a\")\n+\n+;; fadd, fsub\n+(define_insn_reservation \"p6600_msa_long_float4\" 4\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_fadd,simd_fcvt\"))\n+  \"p6600_fpu_long, p6600_fpu_float_a, p6600_fpu_float_b\")\n+\n+;; fmul\n+(define_insn_reservation \"p6600_msa_long_float5\" 5\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_fmul\"))\n+  \"p6600_fpu_long, p6600_fpu_float_a, p6600_fpu_float_b, p6600_fpu_float_c\")\n+\n+;; fmadd, fmsub\n+(define_insn_reservation \"p6600_msa_long_float8\" 8\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_fmadd\"))\n+  \"p6600_fpu_long, p6600_fpu_float_a,\n+   p6600_fpu_float_b, p6600_fpu_float_c, p6600_fpu_float_d\")\n+\n+;; Vector mul, dotp, madd, msub\n+(define_insn_reservation \"p6600_msa_long_mult\" 5\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_mul\"))\n+  \"p6600_fpu_long, p6600_fpu_mult\")\n+\n+;; fdiv, fmod (semi-pipelined)\n+(define_insn_reservation \"p6600_msa_long_fdiv\" 10\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_fdiv\"))\n+  \"p6600_fpu_long, nothing, nothing, p6600_fpu_fdiv*8\")\n+\n+;; div, mod (non-pipelined)\n+(define_insn_reservation \"p6600_msa_long_div\" 10\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"simd_div\"))\n+  \"p6600_fpu_long, p6600_fpu_div*9, p6600_fpu_div + p6600_fpu_logic_a\")\n+\n+;;\n+;; FPU pipe\n+;;\n+\n+;; fadd, fsub\n+(define_insn_reservation \"p6600_fpu_fadd\" 4\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"fadd\"))\n+  \"p6600_fpu_long, p6600_fpu_apu\")\n+\n+;; fabs, fneg, fcmp\n+(define_insn_reservation \"p6600_fpu_fabs\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (ior (eq_attr \"type\" \"fabs,fneg,fcmp,fmove\")\n+\t   (and (eq_attr \"type\" \"condmove\")\n+\t\t(eq_attr \"mode\" \"SF,DF\"))))\n+  \"p6600_fpu_short, p6600_fpu_apu\")\n+\n+;; fload\n+(define_insn_reservation \"p6600_fpu_fload\" 8\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"fpload,fpidxload\"))\n+  \"p6600_agq_lsu\")\n+\n+;; fstore\n+(define_insn_reservation \"p6600_fpu_fstore\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"fpstore,fpidxstore\"))\n+  \"p6600_agq_lsu\")\n+\n+;; fmadd\n+(define_insn_reservation \"p6600_fpu_fmadd\" 8\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"fmadd\"))\n+  \"p6600_fpu_long, p6600_fpu_apu\")\n+\n+;; fmul\n+(define_insn_reservation \"p6600_fpu_fmul\" 5\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"fmul\"))\n+  \"p6600_fpu_long, p6600_fpu_apu\")\n+\n+;; fdiv, fsqrt\n+(define_insn_reservation \"p6600_fpu_div\" 17\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"fdiv,frdiv,fsqrt,frsqrt\"))\n+  \"p6600_fpu_long, p6600_fpu_apu*17\")\n+\n+;; fcvt\n+(define_insn_reservation \"p6600_fpu_fcvt\" 4\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"fcvt\"))\n+  \"p6600_fpu_long, p6600_fpu_apu\")\n+\n+;; mtc\n+(define_insn_reservation \"p6600_fpu_fmtc\" 7\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"mtc\"))\n+  \"p6600_agq_lsu\")\n+\n+;; mfc\n+(define_insn_reservation \"p6600_fpu_fmfc\" 7\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"mfc\"))\n+  \"p6600_agq_lsu\")\n+\n+;;\n+;; Integer pipe\n+;;\n+\n+;; and\n+(define_insn_reservation \"p6600_int_and\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"move_type\" \"logical\"))\n+  \"p6600_alq_alu\")\n+\n+;; lui\n+(define_insn_reservation \"p6600_int_lui\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"move_type\" \"const\"))\n+  \"p6600_alq_alu\")\n+\n+;; Load lb, lbu, lh, lhu, lq, lw, lw_i2f, lwxs\n+(define_insn_reservation \"p6600_int_load\" 4\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"load\"))\n+  \"p6600_agq_lsu\")\n+\n+;; store\n+(define_insn_reservation \"p6600_int_store\" 3\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"store\"))\n+  \"p6600_agq_lsu\")\n+\n+;; andi, sll, srl, seb, seh\n+(define_insn_reservation \"p6600_int_arith_1\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"move_type\" \"andi,sll0,signext\"))\n+  \"p6600_alq_alu | p6600_agq_al2\")\n+\n+;; addi, addiu, ori, xori, add, addu\n+(define_insn_reservation \"p6600_int_arith_2\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"alu_type\" \"add,or,xor\"))\n+  \"p6600_alq_alu | p6600_agq_al2\")\n+\n+;; nor, sub\n+(define_insn_reservation \"p6600_int_arith_3\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"alu_type\" \"and,not,nor,sub\"))\n+  \"p6600_alq_alu\")\n+\n+;; srl, sra, rotr, slt, sllv, srlv\n+(define_insn_reservation \"p6600_int_arith_4\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"shift,slt,move\"))\n+  \"p6600_alq_alu | p6600_agq_al2\")\n+\n+;; nop\n+(define_insn_reservation \"p6600_int_nop\" 0\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"nop\"))\n+  \"p6600_alq_alu | p6600_agq_al2\")\n+\n+;; clo, clz\n+(define_insn_reservation \"p6600_int_countbits\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"clz\"))\n+  \"p6600_agq_al2\")\n+\n+;; Conditional moves\n+(define_insn_reservation \"p6600_int_condmove\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"condmove\"))\n+  \"p6600_agq_al2\")\n+\n+;; mfhi/lo\n+(define_insn_reservation \"p6600_dsp_mfhilo\" 5\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"mfhi,mflo\"))\n+  \"p6600_agq_lsu\")\n+\n+;; mthi/lo\n+(define_insn_reservation \"p6600_dsp_mthilo\" 5\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"mthi,mtlo\"))\n+  \"p6600_agq_lsu\")\n+\n+;; mul, mulu, muh, muhu\n+(define_insn_reservation \"p6600_dsp_mult\" 4\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"imul3,imul,imul3nc\"))\n+  \"p6600_gpmul\")\n+\n+;; branch and jump\n+(define_insn_reservation \"p6600_int_branch\" 1\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"branch,jump\"))\n+  \"p6600_agq_ctistd\")\n+\n+;; prefetch\n+(define_insn_reservation \"p6600_int_prefetch\" 0\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"prefetch,prefetchx\"))\n+  \"p6600_agq_lsu\")\n+\n+;; divide\n+(define_insn_reservation \"p6600_int_div\" 8\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"idiv,idiv3\"))\n+  \"p6600_gpdiv*5\")\n+\n+;; arith\n+(define_insn_reservation \"p6600_int_arith_5\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"type\" \"arith\"))\n+  \"p6600_agq_al2\")\n+\n+;; call\n+(define_insn_reservation \"p6600_int_call\" 2\n+  (and (eq_attr \"cpu\" \"p6600\")\n+       (eq_attr \"jal\" \"indirect,direct\"))\n+  \"p6600_agq_ctistd\")"}, {"sha": "940b84697fa14a371b9293d42aa7d0cb662676c7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c0ee9ca68e62a066f2653da11c50f708666857/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=30c0ee9ca68e62a066f2653da11c50f708666857", "patch": "@@ -20112,7 +20112,7 @@ The processor names are:\n @samp{m5100}, @samp{m5101},\n @samp{octeon}, @samp{octeon+}, @samp{octeon2}, @samp{octeon3},\n @samp{orion},\n-@samp{p5600},\n+@samp{p5600}, @samp{p6600},\n @samp{r2000}, @samp{r3000}, @samp{r3900}, @samp{r4000}, @samp{r4400},\n @samp{r4600}, @samp{r4650}, @samp{r4700}, @samp{r6000}, @samp{r8000},\n @samp{rm7000}, @samp{rm9000},"}]}