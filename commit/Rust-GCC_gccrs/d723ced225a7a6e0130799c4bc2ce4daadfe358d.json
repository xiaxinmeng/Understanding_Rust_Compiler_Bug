{"sha": "d723ced225a7a6e0130799c4bc2ce4daadfe358d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcyM2NlZDIyNWE3YTZlMDEzMDc5OWM0YmMyY2U0ZGFhZGZlMzU4ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-09T01:56:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-09T01:56:42Z"}, "message": "revert: PR libstdc++/41975, DR 579\n\n2010-03-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tRevert:\n\t2010-02-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41975, DR 579\n\t* include/bits/hashtable.h (_Hashtable<>::_M_erase_node): Remove.\n\t(erase(const_iterator), erase(const_iterator, const_iterator)):\n\tChange return type to void.\n\t* include/debug/unordered_map: Adjust.\n\t* include/debug/unordered_set: Likewise.\n\t* testsuite/util/exception/safety.h: Likewise.\n\t* testsuite/23_containers/unordered_map/erase/1.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/erase/24061-map.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/erase/1.cc:  Likewise.\n\t* testsuite/23_containers/unordered_set/erase/24061-map.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/erase/1.cc:  Likewise.\n\t* testsuite/23_containers/unordered_multimap/erase/24061-map.cc:\n\tLikewise.\n\t* testsuite/23_containers/unordered_multiset/erase/1.cc:  Likewise.\n\t* testsuite/23_containers/unordered_multiset/erase/24061-map.cc:\n\tLikewise.\n\nFrom-SVN: r157300", "tree": {"sha": "7b4ab3323cd7e2deb3c657e1214ad0e38e3149fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b4ab3323cd7e2deb3c657e1214ad0e38e3149fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d723ced225a7a6e0130799c4bc2ce4daadfe358d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d723ced225a7a6e0130799c4bc2ce4daadfe358d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d723ced225a7a6e0130799c4bc2ce4daadfe358d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d723ced225a7a6e0130799c4bc2ce4daadfe358d/comments", "author": null, "committer": null, "parents": [{"sha": "dc344e877ab5ab11883350111f5d5e8cdbd732a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc344e877ab5ab11883350111f5d5e8cdbd732a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc344e877ab5ab11883350111f5d5e8cdbd732a2"}], "stats": {"total": 281, "additions": 184, "deletions": 97}, "files": [{"sha": "2a4c464e121d47743622b0c78bb79f903f39e4f0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -1,3 +1,26 @@\n+2010-03-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tRevert:\n+\t2010-02-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41975, DR 579\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_erase_node): Remove.\n+\t(erase(const_iterator), erase(const_iterator, const_iterator)):\n+\tChange return type to void.\n+\t* include/debug/unordered_map: Adjust.\n+\t* include/debug/unordered_set: Likewise.\n+\t* testsuite/util/exception/safety.h: Likewise.\n+\t* testsuite/23_containers/unordered_map/erase/1.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/erase/24061-map.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/erase/1.cc:  Likewise.\n+\t* testsuite/23_containers/unordered_set/erase/24061-map.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/erase/1.cc:  Likewise.\n+\t* testsuite/23_containers/unordered_multimap/erase/24061-map.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/erase/1.cc:  Likewise.\n+\t* testsuite/23_containers/unordered_multiset/erase/24061-map.cc:\n+\tLikewise.\n+\n 2010-03-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/util/testsuite_container_traits.h (traits_base): Add"}, {"sha": "96bb8ac63e66031db77bb0318ec14b85e92b9999", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 47, "deletions": 29, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -385,6 +385,9 @@ namespace std\n       iterator\n       _M_insert(const value_type&, std::false_type);\n \n+      void\n+      _M_erase_node(_Node*, _Node**);\n+\n     public:\t\t\t\t\n       // Insert and erase\n       _Insert_Return_Type\n@@ -404,13 +407,13 @@ namespace std\n       insert(initializer_list<value_type> __l)\n       { this->insert(__l.begin(), __l.end()); }\n \n-      void\n+      iterator\n       erase(const_iterator);\n \n       size_type\n       erase(const key_type&);\n \n-      void\n+      iterator\n       erase(const_iterator, const_iterator);\n \n       void\n@@ -974,6 +977,34 @@ namespace std\n       return iterator(__new_node, _M_buckets + __n);\n     }\n \n+  // For erase(iterator) and erase(const_iterator).\n+  template<typename _Key, typename _Value, \n+\t   typename _Allocator, typename _ExtractKey, typename _Equal,\n+\t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n+\t   bool __chc, bool __cit, bool __uk>\n+    void\n+    _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n+\t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n+    _M_erase_node(_Node* __p, _Node** __b)\n+    {\n+      _Node* __cur = *__b;\n+      if (__cur == __p)\n+\t*__b = __cur->_M_next;\n+      else\n+\t{\n+\t  _Node* __next = __cur->_M_next;\n+\t  while (__next != __p)\n+\t    {\n+\t      __cur = __next;\n+\t      __next = __cur->_M_next;\n+\t    }\n+\t  __cur->_M_next = __next->_M_next;\n+\t}\n+\n+      _M_deallocate_node(__p);\n+      --_M_element_count;\n+    }\n+\n   template<typename _Key, typename _Value, \n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n@@ -999,30 +1030,17 @@ namespace std\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n-    void\n+    typename _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n+\t\t\t_H1, _H2, _Hash, _RehashPolicy,\n+\t\t\t__chc, __cit, __uk>::iterator\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     erase(const_iterator __it)\n     {\n-      _Node* __p = __it._M_cur_node;\n-      _Node** __b = __it._M_cur_bucket;\n-\n-      _Node* __cur = *__b;\n-      if (__cur == __p)\n-\t*__b = __cur->_M_next;\n-      else\n-\t{\n-\t  _Node* __next = __cur->_M_next;\n-\t  while (__next != __p)\n-\t    {\n-\t      __cur = __next;\n-\t      __next = __cur->_M_next;\n-\t    }\n-\t  __cur->_M_next = __next->_M_next;\n-\t}\n-\n-      _M_deallocate_node(__p);\n-      --_M_element_count;\n+      iterator __result(__it._M_cur_node, __it._M_cur_bucket);\n+      ++__result;\n+      _M_erase_node(__it._M_cur_node, __it._M_cur_bucket);\n+      return __result;\n     }\n \n   template<typename _Key, typename _Value, \n@@ -1084,17 +1102,17 @@ namespace std\n \t   typename _Allocator, typename _ExtractKey, typename _Equal,\n \t   typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,\n \t   bool __chc, bool __cit, bool __uk>\n-    void\n+    typename _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n+\t\t\t_H1, _H2, _Hash, _RehashPolicy,\n+\t\t\t__chc, __cit, __uk>::iterator\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n     erase(const_iterator __first, const_iterator __last)\n     {\n-      if (__first == begin() && __last == end())\n-\tclear();\n-      else\n-\twhile (__first != __last)\n-\t  erase(__first++);\n-     }\n+      while (__first != __last)\n+\t__first = this->erase(__first);\n+      return iterator(__last._M_cur_node, __last._M_cur_bucket);\n+    }\n \n   template<typename _Key, typename _Value, \n \t   typename _Allocator, typename _ExtractKey, typename _Equal,"}, {"sha": "a5e6174fe6ae010232acb504b382f31dc97a850b", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -243,24 +243,25 @@ namespace __debug\n \treturn __ret;\n       }\n \n-      void\n+      iterator\n       erase(const_iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n-\t_Base::erase(__it.base());\n+\treturn iterator(_Base::erase(__it.base()), this);\n       }\n \n-      void\n+      iterator\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n \tfor (const_iterator __tmp = __first; __tmp != __last;)\n-\t  {\n-\t    const_iterator __victim = __tmp++;\n-\t    __victim._M_invalidate();\n-\t  }\n-\t_Base::erase(__first.base(), __last.base());\n+\t{\n+\t  const_iterator __victim = __tmp++;\n+\t  __victim._M_invalidate();\n+\t}\n+\treturn iterator(_Base::erase(__first.base(),\n+\t\t\t\t     __last.base()), this);\n       }\n \n       _Base&\n@@ -479,24 +480,25 @@ namespace __debug\n \treturn __ret;\n       }\n \n-      void\n+      iterator\n       erase(const_iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n-\t_Base::erase(__it.base());\n+\treturn iterator(_Base::erase(__it.base()), this);\n       }\n \n-      void\n+      iterator\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n \tfor (const_iterator __tmp = __first; __tmp != __last;)\n-\t  {\n-\t    const_iterator __victim = __tmp++;\n-\t    __victim._M_invalidate();\n-\t  }\n-\t_Base::erase(__first.base(), __last.base());\n+\t{\n+\t  const_iterator __victim = __tmp++;\n+\t  __victim._M_invalidate();\n+\t}\n+\treturn iterator(_Base::erase(__first.base(),\n+\t\t\t\t     __last.base()), this);\n       }\n \n       _Base&"}, {"sha": "f8517184023873d26e0f5af0bfdc27ba77614744", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -243,24 +243,25 @@ namespace __debug\n \treturn __ret;\n       }\n \n-      void\n+      iterator\n       erase(const_iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n-\t_Base::erase(__it.base());\n+\treturn iterator(_Base::erase(__it.base()), this);\n       }\n \n-      void\n+      iterator\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n \tfor (const_iterator __tmp = __first; __tmp != __last;)\n-\t  {\n-\t    const_iterator __victim = __tmp++;\n-\t    __victim._M_invalidate();\n-\t  }\n-\t_Base::erase(__first.base(), __last.base());\n+\t{\n+\t  const_iterator __victim = __tmp++;\n+\t  __victim._M_invalidate();\n+\t}\n+\treturn iterator(_Base::erase(__first.base(),\n+\t\t\t\t     __last.base()), this);\n       }\n \n       _Base&\n@@ -477,24 +478,25 @@ namespace __debug\n \treturn __ret;\n       }\n \n-      void\n+      iterator\n       erase(const_iterator __it)\n       {\n \t__glibcxx_check_erase(__it);\n \t__it._M_invalidate();\n-\t_Base::erase(__it.base());\n+\treturn iterator(_Base::erase(__it.base()), this);\n       }\n \n-      void\n+      iterator\n       erase(const_iterator __first, const_iterator __last)\n       {\n \t__glibcxx_check_erase_range(__first, __last);\n \tfor (const_iterator __tmp = __first; __tmp != __last;)\n-\t  {\n-\t    const_iterator __victim = __tmp++;\n-\t    __victim._M_invalidate();\n-\t  }\n-\t_Base::erase(__first.base(), __last.base());\n+\t{\n+\t  const_iterator __victim = __tmp++;\n+\t  __victim._M_invalidate();\n+\t}\n+\treturn iterator(_Base::erase(__first.base(),\n+\t\t\t\t     __last.base()), this);\n       }\n \n       _Base&"}, {"sha": "f9b74e08c8d10cd19481b488428e994d8f6dfba4", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erase/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F1.cc?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -113,7 +113,7 @@ void test01()\n   VERIFY( m1.size() == 2 );\n   VERIFY( ++it10 == m1.end() );\n \n-  m1.erase(m1.begin());\n+  VERIFY( m1.erase(m1.begin()) != m1.end() );  \n   VERIFY( m1.size() == 1 );\n   VERIFY( m1.begin() == it11 );\n "}, {"sha": "87ab474a8263fa46a003a03689d9969a7e348e32", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/erase/24061-map.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F24061-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F24061-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Ferase%2F24061-map.cc?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -51,8 +51,10 @@ void test01()\n   ++it1;\n   iterator it2 = it1;\n   ++it2;\n-  m1.erase(it1);\n+  iterator it3 = m1.erase(it1);\n   VERIFY( m1.size() == 9 );\n+  VERIFY( it3 == it2 );\n+  VERIFY( *it3 == *it2 );\n \n   iterator it4 = m1.begin();\n   ++it4;\n@@ -61,17 +63,21 @@ void test01()\n   iterator it5 = it4;\n   ++it5;\n   ++it5;\n-  m1.erase(it4, it5);\n+  iterator it6 = m1.erase(it4, it5);\n   VERIFY( m1.size() == 7 );\n+  VERIFY( it6 == it5 );\n+  VERIFY( *it6 == *it5 );\n \n   const_iterator it7 = m1.begin();\n   ++it7;\n   ++it7;\n   ++it7;\n   const_iterator it8 = it7;\n   ++it8;\n-  m1.erase(it7);\n+  const_iterator it9 = m1.erase(it7);\n   VERIFY( m1.size() == 6 );\n+  VERIFY( it9 == it8 );\n+  VERIFY( *it9 == *it8 );\n \n   const_iterator it10 = m1.begin();\n   ++it10;\n@@ -80,11 +86,16 @@ void test01()\n   ++it11;\n   ++it11;\n   ++it11;\n-  m1.erase(it10, it11);\n+  const_iterator it12 = m1.erase(it10, it11);\n   VERIFY( m1.size() == 2 );\n+  VERIFY( it12 == it11 );\n+  VERIFY( *it12 == *it11 );\n+  VERIFY( ++it12 == m1.end() );\n \n-  m1.erase(m1.begin(), m1.end());\n+  iterator it13 = m1.erase(m1.begin(), m1.end());\n   VERIFY( m1.size() == 0 );\n+  VERIFY( it13 == it12 );\n+  VERIFY( it13 == m1.begin() );\n }\n   \n int main()"}, {"sha": "0aa1a071871ffa60864afa134ebe2c6ee9e34e5c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/erase/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F1.cc?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -113,7 +113,7 @@ void test01()\n   VERIFY( mm1.size() == 2 );\n   VERIFY( ++it10 == mm1.end() );\n \n-  mm1.erase(mm1.begin());\n+  VERIFY( mm1.erase(mm1.begin()) != mm1.end() );  \n   VERIFY( mm1.size() == 1 );\n   VERIFY( mm1.begin() == it11 );\n "}, {"sha": "545d08278d6f630a200f887078e863a444bfea35", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/erase/24061-multimap.cc", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F24061-multimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F24061-multimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Ferase%2F24061-multimap.cc?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -55,8 +55,10 @@ void test01()\n   ++it1;\n   iterator it2 = it1;\n   ++it2;\n-  mm1.erase(it1);\n+  iterator it3 = mm1.erase(it1);\n   VERIFY( mm1.size() == 12 );\n+  VERIFY( it3 == it2 );\n+  VERIFY( *it3 == *it2 );\n \n   iterator it4 = mm1.begin();\n   ++it4;\n@@ -65,17 +67,21 @@ void test01()\n   iterator it5 = it4;\n   ++it5;\n   ++it5;\n-  mm1.erase(it4, it5);\n+  iterator it6 = mm1.erase(it4, it5);\n   VERIFY( mm1.size() == 10 );\n+  VERIFY( it6 == it5 );\n+  VERIFY( *it6 == *it5 );\n \n   const_iterator it7 = mm1.begin();\n   ++it7;\n   ++it7;\n   ++it7;\n   const_iterator it8 = it7;\n   ++it8;\n-  mm1.erase(it7);\n+  const_iterator it9 = mm1.erase(it7);\n   VERIFY( mm1.size() == 9 );\n+  VERIFY( it9 == it8 );\n+  VERIFY( *it9 == *it8 );\n \n   const_iterator it10 = mm1.begin();\n   ++it10;\n@@ -84,11 +90,15 @@ void test01()\n   ++it11;\n   ++it11;\n   ++it11;\n-  mm1.erase(it10, it11);\n+  const_iterator it12 = mm1.erase(it10, it11);\n   VERIFY( mm1.size() == 5 );\n+  VERIFY( it12 == it11 );\n+  VERIFY( *it12 == *it11 );\n \n-  mm1.erase(mm1.begin(), mm1.end());\n+  iterator it13 = mm1.erase(mm1.begin(), mm1.end());\n   VERIFY( mm1.size() == 0 );\n+  VERIFY( it13 == mm1.end() );\n+  VERIFY( it13 == mm1.begin() );\n }\n   \n int main()"}, {"sha": "9951838e9de72f1be20e0c2547f9603858a53aad", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/erase/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F1.cc?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -112,7 +112,7 @@ void test01()\n   VERIFY( ms1.size() == 2 );\n   VERIFY( ++it10 == ms1.end() );\n \n-  ms1.erase(ms1.begin());\n+  VERIFY( ms1.erase(ms1.begin()) != ms1.end() );  \n   VERIFY( ms1.size() == 1 );\n   VERIFY( ms1.begin() == it11 );\n "}, {"sha": "c5eea6eeebcf39b7a3ea896a4296a38c1af8477f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/erase/24061-multiset.cc", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F24061-multiset.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F24061-multiset.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Ferase%2F24061-multiset.cc?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -54,8 +54,10 @@ void test01()\n   ++it1;\n   iterator it2 = it1;\n   ++it2;\n-  ms1.erase(it1);\n+  iterator it3 = ms1.erase(it1);\n   VERIFY( ms1.size() == 12 );\n+  VERIFY( it3 == it2 );\n+  VERIFY( *it3 == *it2 );\n \n   iterator it4 = ms1.begin();\n   ++it4;\n@@ -64,17 +66,21 @@ void test01()\n   iterator it5 = it4;\n   ++it5;\n   ++it5;\n-  ms1.erase(it4, it5);\n+  iterator it6 = ms1.erase(it4, it5);\n   VERIFY( ms1.size() == 10 );\n+  VERIFY( it6 == it5 );\n+  VERIFY( *it6 == *it5 );\n \n   const_iterator it7 = ms1.begin();\n   ++it7;\n   ++it7;\n   ++it7;\n   const_iterator it8 = it7;\n   ++it8;\n-  ms1.erase(it7);\n+  const_iterator it9 = ms1.erase(it7);\n   VERIFY( ms1.size() == 9 );\n+  VERIFY( it9 == it8 );\n+  VERIFY( *it9 == *it8 );\n \n   const_iterator it10 = ms1.begin();\n   ++it10;\n@@ -83,11 +89,15 @@ void test01()\n   ++it11;\n   ++it11;\n   ++it11;\n-  ms1.erase(it10, it11);\n+  const_iterator it12 = ms1.erase(it10, it11);\n   VERIFY( ms1.size() == 5 );\n+  VERIFY( it12 == it11 );\n+  VERIFY( *it12 == *it11 );\n \n-  ms1.erase(ms1.begin(), ms1.end());\n+  iterator it13 = ms1.erase(ms1.begin(), ms1.end());\n   VERIFY( ms1.size() == 0 );\n+  VERIFY( it13 == ms1.end() );\n+  VERIFY( it13 == ms1.begin() );\n }\n   \n int main()"}, {"sha": "8f59773d802310633546263eca3b231a975fa7db", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erase/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F1.cc?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -112,7 +112,7 @@ void test01()\n   VERIFY( s1.size() == 2 );\n   VERIFY( ++it10 == s1.end() );\n \n-  s1.erase(s1.begin());\n+  VERIFY( s1.erase(s1.begin()) != s1.end() );  \n   VERIFY( s1.size() == 1 );\n   VERIFY( s1.begin() == it11 );\n "}, {"sha": "b4cdde62d571a88974f7b15d03e1d2be2ec1223a", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/erase/24061-set.cc", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F24061-set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F24061-set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Ferase%2F24061-set.cc?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -50,8 +50,10 @@ void test01()\n   ++it1;\n   iterator it2 = it1;\n   ++it2;\n-  s1.erase(it1);\n+  iterator it3 = s1.erase(it1);\n   VERIFY( s1.size() == 9 );\n+  VERIFY( it3 == it2 );\n+  VERIFY( *it3 == *it2 );\n \n   iterator it4 = s1.begin();\n   ++it4;\n@@ -60,17 +62,21 @@ void test01()\n   iterator it5 = it4;\n   ++it5;\n   ++it5;\n-  s1.erase(it4, it5);\n+  iterator it6 = s1.erase(it4, it5);\n   VERIFY( s1.size() == 7 );\n+  VERIFY( it6 == it5 );\n+  VERIFY( *it6 == *it5 );\n \n   const_iterator it7 = s1.begin();\n   ++it7;\n   ++it7;\n   ++it7;\n   const_iterator it8 = it7;\n   ++it8;\n-  s1.erase(it7);\n+  const_iterator it9 = s1.erase(it7);\n   VERIFY( s1.size() == 6 );\n+  VERIFY( it9 == it8 );\n+  VERIFY( *it9 == *it8 );\n \n   const_iterator it10 = s1.begin();\n   ++it10;\n@@ -79,11 +85,16 @@ void test01()\n   ++it11;\n   ++it11;\n   ++it11;\n-  s1.erase(it10, it11);\n+  const_iterator it12 = s1.erase(it10, it11);\n   VERIFY( s1.size() == 2 );\n+  VERIFY( it12 == it11 );\n+  VERIFY( *it12 == *it11 );\n+  VERIFY( ++it12 == s1.end() );\n \n-  s1.erase(s1.begin(), s1.end());\n+  iterator it13 = s1.erase(s1.begin(), s1.end());\n   VERIFY( s1.size() == 0 );\n+  VERIFY( it13 == s1.end() );\n+  VERIFY( it13 == s1.begin() );\n }\n   \n int main()"}, {"sha": "aef58b621c79e5e8387849de5b7e7cf3651bb79b", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d723ced225a7a6e0130799c4bc2ce4daadfe358d/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=d723ced225a7a6e0130799c4bc2ce4daadfe358d", "patch": "@@ -285,9 +285,9 @@ namespace __gnu_test\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n-\tvoid (container_type::* _F_erase_point)(const_iterator);\n-\tvoid (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\tconst_iterator);\n+\titerator (container_type::* _F_erase_point)(const_iterator);\n+\titerator (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\t    const_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n@@ -304,9 +304,9 @@ namespace __gnu_test\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n-\tvoid (container_type::* _F_erase_point)(const_iterator);\n-\tvoid (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\tconst_iterator);\n+\titerator (container_type::* _F_erase_point)(const_iterator);\n+\titerator (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\t    const_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n@@ -321,9 +321,9 @@ namespace __gnu_test\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n-\tvoid (container_type::* _F_erase_point)(const_iterator);\n-\tvoid (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\tconst_iterator);\n+\titerator (container_type::* _F_erase_point)(const_iterator);\n+\titerator (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\t    const_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n@@ -338,9 +338,9 @@ namespace __gnu_test\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n-\tvoid (container_type::* _F_erase_point)(const_iterator);\n-\tvoid (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\tconst_iterator);\n+\titerator (container_type::* _F_erase_point)(const_iterator);\n+\titerator (container_type::* _F_erase_range)(const_iterator,\n+\t\t\t\t\t\t    const_iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),"}]}