{"sha": "9f04a53e1d467c4ba12f44b30da8e4d9aaee5506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwNGE1M2UxZDQ2N2M0YmExMmY0NGIzMGRhOGU0ZDlhYWVlNTUwNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-01-21T23:19:05Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-01-21T23:19:05Z"}, "message": "PR c/69405 - [6 Regression] ICE in c_tree_printer on an invalid\n\nPR c/69405 - [6 Regression] ICE in c_tree_printer on an invalid\n    __atomic_fetch_add\n\ngcc/testsuite/ChangeLog:\n2016-01-20  Martin Sebor  <msebor@redhat.com>\n\n        PR c/69405\n        * gcc.dg/sync-fetch.c: New test.\n\ngcc/c-family/ChangeLog:\n2016-01-20  Martin Sebor  <msebor@redhat.com>\n\n        PR c/69405\n        * c-common.c (sync_resolve_size): Avoid printing diagnostic about\n        an incompatible argument when the argument isn't a valid tree node.\n\nFrom-SVN: r232713", "tree": {"sha": "92afd7c0ab9ff54a2337894b9d0b738900a4372d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92afd7c0ab9ff54a2337894b9d0b738900a4372d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/comments", "author": null, "committer": null, "parents": [{"sha": "38a516638d2ea1fd4dade9bd68ec720ff6fe52f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a516638d2ea1fd4dade9bd68ec720ff6fe52f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a516638d2ea1fd4dade9bd68ec720ff6fe52f0"}], "stats": {"total": 135, "additions": 132, "deletions": 3}, "files": [{"sha": "7bd1d5d8fe7b0d6e15360c2aed96c9f18368e38e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9f04a53e1d467c4ba12f44b30da8e4d9aaee5506", "patch": "@@ -1,3 +1,9 @@\n+2016-01-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/69405\n+\t* c-common.c (sync_resolve_size): Avoid printing diagnostic about\n+\tan incompatible argument when the argument isn't a valid tree node.\n+\n 2016-01-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/68767"}, {"sha": "378afaec6b5b0b4ad4b32982afad2cf109caa3d7", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=9f04a53e1d467c4ba12f44b30da8e4d9aaee5506", "patch": "@@ -10704,8 +10704,11 @@ sync_resolve_size (tree function, vec<tree, va_gc> *params, bool fetch)\n     return size;\n \n  incompatible:\n-  error (\"operand type %qT is incompatible with argument %d of %qE\",\n-\t argtype, 1, function);\n+  /* Issue the diagnostic only if the argument is valid, otherwise\n+     it would be redundant at best and could be misleading.  */\n+  if (argtype != error_mark_node)\n+    error (\"operand type %qT is incompatible with argument %d of %qE\",\n+\t   argtype, 1, function);\n   return 0;\n }\n "}, {"sha": "c05604b56bdd112b22d690195b516a1ea23f4d79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f04a53e1d467c4ba12f44b30da8e4d9aaee5506", "patch": "@@ -1,3 +1,8 @@\n+2016-01-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/69405\n+\t* gcc.dg/sync-fetch.c: New test.\n+\n 2016-01-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR target/69252\n@@ -11,7 +16,7 @@\n 2016-01-21  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \tPR c++/68810\n-\t* g++.dg/cpp0x/constexpr-reinterpret1.C: Fix line number that is                                                                           \n+\t* g++.dg/cpp0x/constexpr-reinterpret1.C: Fix line number that is\n \texpected to generate an error.\n \n 2016-01-21  Bernd Schmidt  <bschmidt@redhat.com>"}, {"sha": "44b6cdc2a8b5a5e65521dc9da04149a7b1539bd9", "filename": "gcc/testsuite/gcc.dg/sync-fetch.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-fetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f04a53e1d467c4ba12f44b30da8e4d9aaee5506/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-fetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsync-fetch.c?ref=9f04a53e1d467c4ba12f44b30da8e4d9aaee5506", "patch": "@@ -0,0 +1,115 @@\n+/* PR c/69405 - [6 Regression] ICE in c_tree_printer on an invalid\n+   __atomic_fetch_add */\n+/* Test to verify that the diagnostic doesn't cause an ICE when any\n+   of the arguments to __atomic_fetch_OP is undeclared.  */\n+/* { dg-do compile } */\n+\n+void test_add_undeclared_first_arg (void)\n+{\n+  int a = 0;\n+  __atomic_fetch_add (&a, &b, 0);   /* { dg-error \".b. undeclared\" } */\n+}\n+\n+void test_sub_undeclared_first_arg (void)\n+{\n+  int a = 0;\n+  __atomic_fetch_sub (&a, &b, 0);      /* { dg-error \".b. undeclared\" } */\n+}\n+\n+void test_or_undeclared_first_arg (void)\n+{\n+  int a = 0;\n+  __atomic_fetch_or (&a, &b, 0);      /* { dg-error \".b. undeclared\" } */\n+}\n+\n+void test_and_undeclared_first_arg (void)\n+{\n+  int a = 0;\n+  __atomic_fetch_and (&a, &b, 0);      /* { dg-error \".b. undeclared\" } */\n+}\n+\n+void test_xor_undeclared_first_arg (void)\n+{\n+  int a = 0;\n+  __atomic_fetch_xor (&a, &b, 0);      /* { dg-error \".b. undeclared\" } */\n+}\n+\n+void test_nand_undeclared_first_arg (void)\n+{\n+  int a = 0;\n+  __atomic_fetch_nand (&a, &b, 0);      /* { dg-error \".b. undeclared\" } */\n+}\n+\n+\n+void test_add_undeclared_second_arg (void)\n+{\n+  int b = 0;\n+  __atomic_fetch_add (&a, &b, 0);   /* { dg-error \".a. undeclared\" } */\n+}\n+\n+void test_sub_undeclared_second_arg (void)\n+{\n+  int b = 0;\n+  __atomic_fetch_sub (&a, &b, 0);      /* { dg-error \".a. undeclared\" } */\n+}\n+\n+void test_or_undeclared_second_arg (void)\n+{\n+  int b = 0;\n+  __atomic_fetch_or (&a, &b, 0);      /* { dg-error \".a. undeclared\" } */\n+}\n+\n+void test_and_undeclared_second_arg (void)\n+{\n+  int b = 0;\n+  __atomic_fetch_and (&a, &b, 0);      /* { dg-error \".a. undeclared\" } */\n+}\n+\n+void test_xor_undeclared_second_arg (void)\n+{\n+  int b = 0;\n+  __atomic_fetch_xor (&a, &b, 0);      /* { dg-error \".a. undeclared\" } */\n+}\n+\n+void test_nand_undeclared_second_arg (void)\n+{\n+  int b = 0;\n+  __atomic_fetch_nand (&a, &b, 0);      /* { dg-error \".a. undeclared\" } */\n+}\n+\n+\n+void test_add_undeclared_third_arg (void)\n+{\n+  int a = 0, b = 0;\n+  __atomic_fetch_add (&a, &b, m);   /* { dg-error \".m. undeclared\" } */\n+}\n+\n+void test_sub_undeclared_third_arg (void)\n+{\n+  int a = 0, b = 0;\n+  __atomic_fetch_sub (&a, &b, m);      /* { dg-error \".m. undeclared\" } */\n+}\n+\n+void test_or_undeclared_third_arg (void)\n+{\n+  int a = 0, b = 0;\n+  __atomic_fetch_or (&a, &b, m);      /* { dg-error \".m. undeclared\" } */\n+}\n+\n+void test_and_undeclared_third_arg (void)\n+{\n+  int a = 0, b = 0;\n+  __atomic_fetch_and (&a, &b, m);      /* { dg-error \".m. undeclared\" } */\n+}\n+\n+void test_xor_undeclared_third_arg (void)\n+{\n+  int a = 0, b = 0;\n+  __atomic_fetch_xor (&a, &b, m);      /* { dg-error \".m. undeclared\" } */\n+}\n+\n+void test_nand_undeclared_third_arg (void)\n+{\n+  int a = 0, b = 0;\n+  __atomic_fetch_nand (&a, &b, m);      /* { dg-error \".m. undeclared\" } */\n+}"}]}