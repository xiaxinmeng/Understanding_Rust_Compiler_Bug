{"sha": "29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "node_id": "C_kwDOANBUbNoAKDI5ZmIxZTgzMWJmMWMyNWU0NTc0YmYyZjk4YTlmNTM0ZTVjNjc2NjU", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-08-08T20:57:20Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-12T01:26:15Z"}, "message": "rs6000: Support more SSE4 \"cmp\", \"mul\", \"pack\" intrinsics\n\nFunction signatures and decorations match gcc/config/i386/smmintrin.h.\n\nAlso, copy tests for:\n- _mm_cmpeq_epi64\n- _mm_mullo_epi32, _mm_mul_epi32\n- _mm_packus_epi32\n- _mm_cmpgt_epi64 (SSE4.2)\n\nfrom gcc/testsuite/gcc.target/i386.\n\n2021-10-11  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_cmpeq_epi64, _mm_cmpgt_epi64,\n\t_mm_mullo_epi32, _mm_mul_epi32, _mm_packus_epi32): New.\n\t* config/rs6000/nmmintrin.h: Copy from i386, tweak to suit.\n\ngcc/testsuite\n\t* gcc.target/powerpc/pr78102.c: Copy from gcc.target/i386,\n\tadjust dg directives to suit.\n\t* gcc.target/powerpc/sse4_1-packusdw.c: Same.\n\t* gcc.target/powerpc/sse4_1-pcmpeqq.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmuldq.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmulld.c: Same.\n\t* gcc.target/powerpc/sse4_2-pcmpgtq.c: Same.\n\t* gcc.target/powerpc/sse4_2-check.h: Copy from gcc.target/i386,\n\ttweak to suit.", "tree": {"sha": "e02078314dde5f21b024d379993cea076d674db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e02078314dde5f21b024d379993cea076d674db6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285d75a45469a438f07a93a92c700d7103c082de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285d75a45469a438f07a93a92c700d7103c082de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285d75a45469a438f07a93a92c700d7103c082de"}], "stats": {"total": 384, "additions": 384, "deletions": 0}, "files": [{"sha": "20a70bee3776caad234bea1226f32272d337c86a", "filename": "gcc/config/rs6000/nmmintrin.h", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Fconfig%2Frs6000%2Fnmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Fconfig%2Frs6000%2Fnmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnmmintrin.h?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -0,0 +1,40 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef NO_WARN_X86_INTRINSICS\n+/* This header is distributed to simplify porting x86_64 code that\n+   makes explicit use of Intel intrinsics to powerpc64le.\n+   It is the user's responsibility to determine if the results are\n+   acceptable and make additional changes as necessary.\n+   Note that much code that uses Intel intrinsics can be rewritten in\n+   standard C or GNU C extensions, which are more portable and better\n+   optimized across multiple targets.  */\n+#endif\n+\n+#ifndef _NMMINTRIN_H_INCLUDED\n+#define _NMMINTRIN_H_INCLUDED\n+\n+/* We just include SSE4.1 header file.  */\n+#include <smmintrin.h>\n+\n+#endif /* _NMMINTRIN_H_INCLUDED */"}, {"sha": "90ce03d22709a6564b2cb3e6eb6de15f3a08025d", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -274,6 +274,15 @@ _mm_floor_ss (__m128 __A, __m128 __B)\n   return __r;\n }\n \n+#ifdef _ARCH_PWR8\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpeq_epi64 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_cmpeq ((__v2di) __X, (__v2di) __Y);\n+}\n+#endif\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_min_epi8 (__m128i __X, __m128i __Y)\n@@ -332,6 +341,22 @@ _mm_max_epu32 (__m128i __X, __m128i __Y)\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mullo_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_mul ((__v4su) __X, (__v4su) __Y);\n+}\n+\n+#ifdef _ARCH_PWR8\n+__inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mul_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_mule ((__v4si) __X, (__v4si) __Y);\n+}\n+#endif\n+\n+__inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtepi8_epi16 (__m128i __A)\n {\n   return (__m128i) vec_unpackh ((__v16qi) __A);\n@@ -495,4 +520,20 @@ _mm_minpos_epu16 (__m128i __A)\n   return __r.__m;\n }\n \n+__inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_packus_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_packsu ((__v4si) __X, (__v4si) __Y);\n+}\n+\n+#ifdef _ARCH_PWR8\n+__inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmpgt_epi64 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_cmpgt ((__v2di) __X, (__v2di) __Y);\n+}\n+#endif\n+\n #endif"}, {"sha": "68898c7f942857179d69612ea75c6710aa4e4d34", "filename": "gcc/testsuite/gcc.target/powerpc/pr78102.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78102.c?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+foo (const __m128i x, const __m128i y)\n+{\n+  return _mm_cmpeq_epi64 (x, y);\n+}\n+\n+__v2di\n+bar (const __v2di x, const __v2di y)\n+{\n+  return x == y;\n+}\n+\n+__v2di\n+baz (const __v2di x, const __v2di y)\n+{\n+  return x != y;\n+}"}, {"sha": "8b757a267468350dd3c99f30293049402cf066a0", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-packusdw.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-packusdw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-packusdw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-packusdw.c?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static unsigned short\n+int_to_ushort (int iVal)\n+{\n+  unsigned short sVal;\n+\n+  if (iVal < 0)\n+    sVal = 0;\n+  else if (iVal > 0xffff)\n+    sVal = 0xffff;\n+  else sVal = iVal;\n+\n+  return sVal;\n+}\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+    } src1, src2;\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned short s[NUM * 2];\n+    } dst;\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_packus_epi32 (src1.x [i / 4], src2.x [i / 4]);\n+\n+  for (i = 0; i < NUM; i ++)\n+    {\n+      int dstIndex;\n+      unsigned short sVal;\n+\n+      sVal = int_to_ushort (src1.i[i]);\n+      dstIndex = (i % 4) + (i / 4) * 8;\n+      if (sVal != dst.s[dstIndex])\n+\tabort ();\n+\n+      sVal = int_to_ushort (src2.i[i]);\n+      dstIndex += 4;\n+      if (sVal != dst.s[dstIndex])\n+\tabort ();\n+    }\n+}"}, {"sha": "39b9f01d64a449506d39d27f93cc17b8eb3772be", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pcmpeqq.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pcmpeqq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pcmpeqq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pcmpeqq.c?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mpower8-vector\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+    } dst, src1, src2;\n+  int i, sign=1;\n+  long long is_eq;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.ll[i] = i * i * sign;\n+      src2.ll[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x [i / 2] = _mm_cmpeq_epi64(src1.x [i / 2], src2.x [i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      is_eq = src1.ll[i] == src2.ll[i] ? 0xffffffffffffffffLL : 0LL;\n+      if (is_eq != dst.ll[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "6a884f46235ffe2e463f9d9f9e80ee2118c4f5e0", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmuldq.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmuldq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmuldq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmuldq.c?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mpower8-vector\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+    } dst;\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      int i[NUM * 2];\n+    } src1, src2;\n+  int i, sign = 1;\n+  long long value;\n+\n+  for (i = 0; i < NUM * 2; i += 2)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x[i / 2] = _mm_mul_epi32 (src1.x[i / 2], src2.x[i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      value = (long long) src1.i[i * 2] * (long long) src2.i[i * 2];\n+      if (value != dst.ll[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "730334366426077e387a5342cf5e518571199f50", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmulld.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmulld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmulld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmulld.c?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  int value;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_mullo_epi32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      value = src1.i[i] * src2.i[i];\n+      if (value != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "f6264e5a108360347dfad4bb681aca6dab87b8af", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_2-check.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-check.h?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -0,0 +1,18 @@\n+#define NO_WARN_X86_INTRINSICS 1\n+\n+static void sse4_2_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  sse4_2_test ();\n+}\n+\n+int\n+main ()\n+{\n+  do_test ();\n+\n+  return 0;\n+}"}, {"sha": "a8a6a2010f45302c17f84fa0fb1abb53471161e5", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_2-pcmpgtq.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-pcmpgtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29fb1e831bf1c25e4574bf2f98a9f534e5c67665/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-pcmpgtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_2-pcmpgtq.c?ref=29fb1e831bf1c25e4574bf2f98a9f534e5c67665", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_2_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <nmmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 2];\n+      long long ll[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  long long is_eq;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.ll[i] = i * i * sign;\n+      src2.ll[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 2)\n+    dst.x[i / 2] = _mm_cmpgt_epi64 (src1.x[i / 2], src2.x[i / 2]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      is_eq = src1.ll[i] > src2.ll[i] ? 0xFFFFFFFFFFFFFFFFLL : 0LL;\n+      if (is_eq != dst.ll[i])\n+\tabort ();\n+    }\n+}"}]}