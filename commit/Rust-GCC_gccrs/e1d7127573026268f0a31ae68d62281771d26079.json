{"sha": "e1d7127573026268f0a31ae68d62281771d26079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkNzEyNzU3MzAyNjI2OGYwYTMxYWU2OGQ2MjI4MTc3MWQyNjA3OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-01-24T06:16:58Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-01-24T06:16:58Z"}, "message": "sh.md (symGOT_load, [...]): New expands.\n\n* config/sh/sh.md (symGOT_load, sym2GOT, sym2GOTOFF): New expands.\n(symGOT2reg): Use them, then set as GOT value as unchanging.\n(symGOTOFF2reg): Set REG_EQUAL note.  Use a different pseudo\nas a temporary, if possible.\n(symPLT_label2reg): Enclose (pc) in UNSPEC_PIC.  Emit\nsym@PLT-(.LPCS#+2-.) instead of sym@PLT+.-(.LPCS#+2).\n\nFrom-SVN: r49170", "tree": {"sha": "555cf31568d5be0623c80e16a54fa4f6186e775e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/555cf31568d5be0623c80e16a54fa4f6186e775e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d7127573026268f0a31ae68d62281771d26079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d7127573026268f0a31ae68d62281771d26079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d7127573026268f0a31ae68d62281771d26079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d7127573026268f0a31ae68d62281771d26079/comments", "author": null, "committer": null, "parents": [{"sha": "f7b54dea72b7f296abaf6830e256ed7b1f454271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b54dea72b7f296abaf6830e256ed7b1f454271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b54dea72b7f296abaf6830e256ed7b1f454271"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "c181bd70ed21932179ac00c6e7de19d4cc018b14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d7127573026268f0a31ae68d62281771d26079/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d7127573026268f0a31ae68d62281771d26079/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1d7127573026268f0a31ae68d62281771d26079", "patch": "@@ -1,3 +1,12 @@\n+2002-01-24  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/sh/sh.md (symGOT_load, sym2GOT, sym2GOTOFF): New expands.\n+\t(symGOT2reg): Use them, then set as GOT value as unchanging.\n+\t(symGOTOFF2reg): Set REG_EQUAL note.  Use a different pseudo\n+\tas a temporary, if possible.\n+\t(symPLT_label2reg): Enclose (pc) in UNSPEC_PIC.  Emit\n+\tsym@PLT-(.LPCS#+2-.) instead of sym@PLT+.-(.LPCS#+2).\n+\n 2002-01-23  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.md: Fix xorqi and xorqi so that they will"}, {"sha": "1a038d1f5048f0ddbe59de099998710f5fbd3e5b", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 71, "deletions": 16, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d7127573026268f0a31ae68d62281771d26079/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d7127573026268f0a31ae68d62281771d26079/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=e1d7127573026268f0a31ae68d62281771d26079", "patch": "@@ -3791,36 +3791,91 @@\n \t\t\t(const_int 2))))))]\n   \"\" \"\")\n \n+(define_expand \"symGOT_load\"\n+  [(set (match_dup 2) (match_operand 1 \"\" \"\"))\n+   (set (match_dup 3) (plus (match_dup 2) (reg PIC_REG)))\n+   (set (match_operand 0 \"\" \"\") (mem (match_dup 3)))]\n+  \"\"\n+  \"\n+{\n+  rtx insn;\n+\n+  operands[2] = no_new_pseudos ? operands[0] : gen_reg_rtx (Pmode);\n+  operands[3] = no_new_pseudos ? operands[0] : gen_reg_rtx (Pmode);\n+\n+  emit_move_insn (operands[2], operands[1]);\n+\n+  emit_move_insn (operands[3], gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t     operands[2],\n+\t\t\t\t\t     gen_rtx_REG (Pmode, PIC_REG)));\n+\n+  insn = emit_move_insn (operands[0], gen_rtx_MEM (Pmode, operands[3]));\n+\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, XVECEXP (XEXP (operands[1],\n+\t\t\t\t\t\t\t\t  0), 0, 0),\n+\t\t\t\t\tREG_NOTES (insn));\n+  \n+  DONE;\n+}\")\n+\n+(define_expand \"sym2GOT\"\n+  [(const (unspec [(match_operand 0 \"\" \"\")] UNSPEC_GOT))]\n+  \"\"\n+  \"\")\n+\n (define_expand \"symGOT2reg\"\n-  [(set (match_operand:SI 0 \"\" \"\")\n-        (const:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")] UNSPEC_GOT)))\n-  (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))\n-  (set (match_dup 0) (mem:SI (match_dup 0)))]\n+  [(match_operand 0 \"\" \"\") (match_operand 1 \"\" \"\")]\n   \"\"\n   \"\n {\n-  operands[2] = pic_offset_table_rtx;\n+  rtx gotsym, insn;\n+\n+  gotsym = gen_sym2GOT (operands[1]);\n+  PUT_MODE (gotsym, Pmode);\n+  insn = emit_insn (gen_symGOT_load (operands[0], gotsym));\n+\n+  RTX_UNCHANGING_P (SET_SRC (PATTERN (insn))) = 1;\n+\n+  DONE;\n }\")\n \n+(define_expand \"sym2GOTOFF\"\n+  [(const (unspec [(match_operand 0 \"\" \"\")] UNSPEC_GOTOFF))]\n+  \"\"\n+  \"\")\n+\n (define_expand \"symGOTOFF2reg\"\n-  [(set (match_operand:SI 0 \"\" \"\")\n-\t(const:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")] UNSPEC_GOTOFF)))\n-  (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 2)))]\n+  [(match_operand 0 \"\" \"\") (match_operand 1 \"\" \"\")]\n   \"\"\n   \"\n {\n-  operands[2] = pic_offset_table_rtx;\n+  rtx gotoffsym, insn;\n+  rtx t = no_new_pseudos ? operands[0] : gen_reg_rtx (GET_MODE (operands[0]));\n+\n+  gotoffsym = gen_sym2GOTOFF (operands[1]);\n+  PUT_MODE (gotoffsym, Pmode);\n+  emit_move_insn (t, gotoffsym);\n+  insn = emit_move_insn (operands[0],\n+\t\t\t gen_rtx_PLUS (Pmode, t,\n+\t\t\t\t       gen_rtx_REG (Pmode, PIC_REG)));\n+\n+  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_EQUAL, operands[1],\n+\t\t\t\t\tREG_NOTES (insn));\n+\n+  DONE;\n }\")\n \n (define_expand \"symPLT_label2reg\"\n   [(set (match_operand:SI 0 \"\" \"\")\n-\t(const (minus:SI\n-\t\t(const (plus:SI\n-\t\t\t(unspec [(match_operand:SI 1 \"\" \"\")] UNSPEC_PLT)\n-\t\t\t(pc)))\n-\t\t(const (plus:SI\n-\t\t\t(match_operand:SI 2 \"\" \"\")\n-\t\t\t(const_int 2))))))\n+\t(const:SI (minus:SI\n+\t\t   (const:SI\n+\t\t    (unspec:SI [(match_operand:SI 1 \"\" \"\")] UNSPEC_PLT))\n+\t\t   (const:SI\n+\t\t    (minus:SI\n+\t\t     (const:SI (plus:SI\n+\t\t\t\t(match_operand:SI 2 \"\" \"\")\n+\t\t\t\t(const_int 2)))\n+\t\t     (const:SI (unspec:SI [(pc)] UNSPEC_PIC)))))))\n    ;; Even though the PIC register is not really used by the call\n    ;; sequence in which this is expanded, the PLT code assumes the PIC\n    ;; register is set, so we must not skip its initialization.  Since"}]}