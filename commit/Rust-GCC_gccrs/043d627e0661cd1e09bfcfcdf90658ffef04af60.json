{"sha": "043d627e0661cd1e09bfcfcdf90658ffef04af60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQzZDYyN2UwNjYxY2QxZTA5YmZjZmNkZjkwNjU4ZmZlZjA0YWY2MA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-16T23:13:11Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-16T23:13:11Z"}, "message": "re PR target/54089 ([SH] Refactor shift patterns)\n\n\tPR target/54089\n\t* config/sh/sh.md (ashlsi3_d): Do not split if it would result\n\tin a T_REG clobber.  Correct comment.\n\t(ashlsi3_n): Correct comment.\n\nFrom-SVN: r190457", "tree": {"sha": "f17e8ff4cfc3a616f74cfd1d078d44e147ebd96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f17e8ff4cfc3a616f74cfd1d078d44e147ebd96c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/043d627e0661cd1e09bfcfcdf90658ffef04af60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/043d627e0661cd1e09bfcfcdf90658ffef04af60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/043d627e0661cd1e09bfcfcdf90658ffef04af60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/043d627e0661cd1e09bfcfcdf90658ffef04af60/comments", "author": null, "committer": null, "parents": [{"sha": "f5a53fc7af14e981a5a6f1d6d9753673f04401f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a53fc7af14e981a5a6f1d6d9753673f04401f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a53fc7af14e981a5a6f1d6d9753673f04401f2"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "af3bb6f8b7488c91f6126a2b353fd1e0afa8d990", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043d627e0661cd1e09bfcfcdf90658ffef04af60/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043d627e0661cd1e09bfcfcdf90658ffef04af60/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=043d627e0661cd1e09bfcfcdf90658ffef04af60", "patch": "@@ -1,4 +1,11 @@\n-2012-08-17  Hans-Peter Nilsson  <hp@axis.com>\n+2012-08-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* config/sh/sh.md (ashlsi3_d): Do not split if it would result\n+\tin a T_REG clobber.  Correct comment.\n+\t(ashlsi3_n): Correct comment.\n+\n+2012-08-16  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR middle-end/54261\n \t* optabs.c (expand_atomic_fetch_op): Save and restore code when"}, {"sha": "f3c0a8e023a443b387aefdc1a26408605d42dba2", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/043d627e0661cd1e09bfcfcdf90658ffef04af60/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/043d627e0661cd1e09bfcfcdf90658ffef04af60/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=043d627e0661cd1e09bfcfcdf90658ffef04af60", "patch": "@@ -3746,7 +3746,8 @@ label:\n \t\t   (match_operand:SI 2 \"shift_count_operand\" \"r\")))]\n   \"TARGET_DYNSHIFT\"\n   \"shld\t%2,%0\"\n-  \"&& (CONST_INT_P (operands[2]) && ! sh_dynamicalize_shift_p (operands[2]))\"\n+  \"&& CONST_INT_P (operands[2]) && ! sh_dynamicalize_shift_p (operands[2])\n+   && ! sh_ashlsi_clobbers_t_reg_p (operands[2])\"\n   [(const_int 0)]\n {\n   if (satisfies_constraint_P27 (operands[2]))\n@@ -3759,7 +3760,9 @@ label:\n       /* This must happen before reload, otherwise the constant will be moved\n \t into a register due to the \"r\" constraint, after which this split\n \t cannot be done anymore.\n-\t Unfortunately the move insn will not always be eliminated.  */\n+\t Unfortunately the move insn will not always be eliminated.\n+\t Also, here we must not create a shift sequence that clobbers the\n+\t T_REG.  */\n       emit_move_insn (operands[0], operands[1]);\n       gen_shifty_op (ASHIFT, operands);\n       DONE;\n@@ -3782,8 +3785,7 @@ label:\n   if (sh_dynamicalize_shift_p (operands[2]) && can_create_pseudo_p ())\n     {\n       /* If this pattern was picked and dynamic shifts are supported, switch\n-\t to dynamic shift pattern before reload.  However, we must not\n-\t create a shift sequence that clobbers the T_REG.  */\n+\t to dynamic shift pattern before reload.  */\n       operands[2] = force_reg (SImode, operands[2]);\n       emit_insn (gen_ashlsi3_d (operands[0], operands[1], operands[2]));\n     }"}]}