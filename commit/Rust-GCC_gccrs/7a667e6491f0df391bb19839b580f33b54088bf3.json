{"sha": "7a667e6491f0df391bb19839b580f33b54088bf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E2NjdlNjQ5MWYwZGYzOTFiYjE5ODM5YjU4MGYzM2I1NDA4OGJmMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-16T14:09:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-16T14:09:04Z"}, "message": "Minor vn_reference_lookup_3 tweak\n\nThe repeated checks for MEM_REF made this code hard to convert to\npoly_ints as-is.  Hopefully the new structure also makes it clearer\nat a glance what the two cases are.\n\n2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid repeated\n\tchecks for MEM_REF.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255742", "tree": {"sha": "d7e67dde4f1147cf77112c00ff38049af1372e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7e67dde4f1147cf77112c00ff38049af1372e8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a667e6491f0df391bb19839b580f33b54088bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a667e6491f0df391bb19839b580f33b54088bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a667e6491f0df391bb19839b580f33b54088bf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a667e6491f0df391bb19839b580f33b54088bf3/comments", "author": null, "committer": null, "parents": [{"sha": "9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adab579d59ea50eeb6877df2292d9d5c7b20e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adab579d59ea50eeb6877df2292d9d5c7b20e3e"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "843f4927828df5154851d1f35e3d29b8cdca130e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a667e6491f0df391bb19839b580f33b54088bf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a667e6491f0df391bb19839b580f33b54088bf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a667e6491f0df391bb19839b580f33b54088bf3", "patch": "@@ -1,3 +1,10 @@\n+2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid repeated\n+\tchecks for MEM_REF.\n+\n 2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "b6f23f8af8c46226271e05aafa204f263a1d235a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a667e6491f0df391bb19839b580f33b54088bf3/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a667e6491f0df391bb19839b580f33b54088bf3/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=7a667e6491f0df391bb19839b580f33b54088bf3", "patch": "@@ -2348,19 +2348,19 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n       copy_size = tree_to_uhwi (gimple_call_arg (def_stmt, 2));\n \n       /* The bases of the destination and the references have to agree.  */\n-      if ((TREE_CODE (base) != MEM_REF\n-\t   && !DECL_P (base))\n-\t  || (TREE_CODE (base) == MEM_REF\n-\t      && (TREE_OPERAND (base, 0) != lhs\n-\t\t  || !tree_fits_uhwi_p (TREE_OPERAND (base, 1))))\n-\t  || (DECL_P (base)\n-\t      && (TREE_CODE (lhs) != ADDR_EXPR\n-\t\t  || TREE_OPERAND (lhs, 0) != base)))\n-\treturn (void *)-1;\n-\n       at = offset / BITS_PER_UNIT;\n       if (TREE_CODE (base) == MEM_REF)\n-\tat += tree_to_uhwi (TREE_OPERAND (base, 1));\n+\t{\n+\t  if (TREE_OPERAND (base, 0) != lhs\n+\t      || !tree_fits_uhwi_p (TREE_OPERAND (base, 1)))\n+\t    return (void *) -1;\n+\t  at += tree_to_uhwi (TREE_OPERAND (base, 1));\n+\t}\n+      else if (!DECL_P (base)\n+\t       || TREE_CODE (lhs) != ADDR_EXPR\n+\t       || TREE_OPERAND (lhs, 0) != base)\n+\treturn (void *)-1;\n+\n       /* If the access is completely outside of the memcpy destination\n \t area there is no aliasing.  */\n       if (lhs_offset >= at + maxsize / BITS_PER_UNIT"}]}