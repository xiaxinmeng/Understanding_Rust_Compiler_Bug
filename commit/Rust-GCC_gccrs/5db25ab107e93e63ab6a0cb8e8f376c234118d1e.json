{"sha": "5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiMjVhYjEwN2U5M2U2M2FiNmEwY2I4ZThmMzc2YzIzNDExOGQxZQ==", "commit": {"author": {"name": "Daniel Krugler", "email": "daniel.kruegler@googlemail.com", "date": "2011-11-21T11:21:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-21T11:21:13Z"}, "message": "re PR libstdc++/51185 ([C++0x] false-positive results of std::is_constructible)\n\n2011-11-21  Daniel Krugler  <daniel.kruegler@googlemail.com>\n\n\tPR libstdc++/51185\n\t* include/std/type_traits (__is_base_to_derived_ref,\n\t__is_lvalue_to_rvalue_ref): Fix.\n\t* testsuite/20_util/is_constructible/51185.cc: New.\n\t* testsuite/20_util/is_constructible/value-2.cc: Extend.\n\nFrom-SVN: r181557", "tree": {"sha": "ed857d58c0f06791f05e9e2d3045bf6f7b271604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed857d58c0f06791f05e9e2d3045bf6f7b271604"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbee335668818cdf36d2cfd33a737ed83ddd9dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbee335668818cdf36d2cfd33a737ed83ddd9dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbee335668818cdf36d2cfd33a737ed83ddd9dc3"}], "stats": {"total": 81, "additions": 70, "deletions": 11}, "files": [{"sha": "81a4ac8c947191fd1f17e5e93b97a72645d842fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "patch": "@@ -1,3 +1,11 @@\n+2011-11-21  Daniel Krugler  <daniel.kruegler@googlemail.com>\n+\n+\tPR libstdc++/51185\n+\t* include/std/type_traits (__is_base_to_derived_ref,\n+\t__is_lvalue_to_rvalue_ref): Fix.\n+\t* testsuite/20_util/is_constructible/51185.cc: New.\n+\t* testsuite/20_util/is_constructible/value-2.cc: Extend.\n+\n 2011-11-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple (__conv_types, __one_by_one_convertible,"}, {"sha": "46e3f800cabac78c22550d8392b0574764f7a2f7", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "patch": "@@ -745,6 +745,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Implementation for non-reference types. To meet the proper\n   // variable definition semantics, we also need to test for\n   // is_destructible in this case.\n+  // This form should be simplified by a single expression:\n+  // ::delete ::new _Tp(declval<_Arg>()), see c++/51222.\n   struct __do_is_direct_constructible_impl\n   {\n     template<typename _Tp, typename _Arg, typename\n@@ -778,9 +780,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct remove_reference;\n \n   template<typename _From, typename _To, bool\n-           = is_reference<_From>::value>\n+           = __not_<__or_<is_void<_From>, \n+                          is_function<_From>>>::value>\n     struct __is_base_to_derived_ref;\n \n+  // Detect whether we have a downcast situation during\n+  // reference binding.\n   template<typename _From, typename _To>\n     struct __is_base_to_derived_ref<_From, _To, true>\n     {\n@@ -803,15 +808,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                     is_rvalue_reference<_To>>::value>\n     struct __is_lvalue_to_rvalue_ref;\n \n+  // Detect whether we have an lvalue of non-function type\n+  // bound to a reference-compatible rvalue-reference.\n   template<typename _From, typename _To>\n     struct __is_lvalue_to_rvalue_ref<_From, _To, true>\n     {\n       typedef typename remove_cv<typename remove_reference<\n         _From>::type>::type __src_t;\n       typedef typename remove_cv<typename remove_reference<\n         _To>::type>::type __dst_t;\n-      typedef __or_<is_same<__src_t, __dst_t>,\n-\t\t    is_base_of<__dst_t, __src_t>> type;\n+      typedef __and_<__not_<is_function<__src_t>>, \n+        __or_<is_same<__src_t, __dst_t>,\n+\t\t    is_base_of<__dst_t, __src_t>>> type;\n       static constexpr bool value = type::value;\n     };\n \n@@ -823,9 +831,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Here we handle direct-initialization to a reference type as \n   // equivalent to a static_cast modulo overshooting conversions.\n   // These are restricted to the following conversions:\n-  //    a) A glvalue of a base class to a derived class reference\n+  //    a) A base class value to a derived class reference\n   //    b) An lvalue to an rvalue-reference of reference-compatible \n-  //       types\n+  //       types that are not functions\n   template<typename _Tp, typename _Arg>\n     struct __is_direct_constructible_ref_cast\n     : public __and_<__is_static_castable<_Arg, _Tp>,\n@@ -850,7 +858,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Since default-construction and binary direct-initialization have\n   // been handled separately, the implementation of the remaining\n-  // n-ary construction cases is rather straightforward.\n+  // n-ary construction cases is rather straightforward. We can use\n+  // here a functional cast, because array types are excluded anyway\n+  // and this form is never interpreted as a C cast.\n   struct __do_is_nary_constructible_impl\n   {\n     template<typename _Tp, typename... _Args, typename"}, {"sha": "33ab45b4bbcbfd36516b9e12b7fa610dc942111b", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1759 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1769 }\n \n #include <utility>\n "}, {"sha": "faf3969fe83d95bbc1c161561c4a6a489f2f19eb", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/51185.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F51185.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F51185.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F51185.cc?ref=5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+struct A { };\n+struct B : A { };\n+\n+// libstdc++/51185\n+void f()\n+{\n+  static_assert(!std::is_constructible<B &&, A>(), \"\");\n+  static_assert(!std::is_constructible<B const &&, A>(), \"\");\n+  static_assert(!std::is_constructible<B const &&, A const>(), \"\");\n+  static_assert(!std::is_constructible<B volatile &&, A>(), \"\");\n+  static_assert(!std::is_constructible<B volatile &&, A volatile>(), \"\");\n+  static_assert(!std::is_constructible<B const volatile &&, A>(), \"\");\n+  static_assert(!std::is_constructible<B const volatile &&, A const>(), \"\");\n+  static_assert(!std::is_constructible<B const volatile &&, A volatile>(), \"\");\n+  static_assert(!std::is_constructible<B const volatile &&,\n+\t\tA const volatile>(), \"\");\n+}"}, {"sha": "06895e32bb0a84c327a53c6cafee1d4528665af3", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/value-2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2Fvalue-2.cc?ref=5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "patch": "@@ -817,3 +817,5 @@ static_assert(!std::is_constructible<const int&, ExplicitTo<double&&>>::value,\n \t      \"Error\");\n static_assert(!std::is_constructible<int&&, ExplicitTo<double&&>>::value,\n \t      \"Error\");\n+\n+static_assert(std::is_constructible<void(&&)(), void(&)()>::value, \"Error\");"}, {"sha": "b8bd23f841f4eaedf286e6d8c0390ca0faa3189a", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1545 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1509 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1555 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1519 }"}, {"sha": "96940119ed908862ae312ab4295005ef045474ee", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db25ab107e93e63ab6a0cb8e8f376c234118d1e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=5db25ab107e93e63ab6a0cb8e8f376c234118d1e", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1463 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1427 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1473 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1437 }"}]}