{"sha": "31632e2c4327146ea8d21cff33adaa505b17d2bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE2MzJlMmM0MzI3MTQ2ZWE4ZDIxY2ZmMzNhZGFhNTA1YjE3ZDJiZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-10-01T11:36:31Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-10-01T11:36:31Z"}, "message": "DWARF array bounds missing from C++ array definitions\n\nA variable redeclaration or definition that provides additional type\ninformation for it, e.g. outermost array bounds, is not reflected in\nthe debug information for the variable.  With this patch, the debug\ninfo of the variable specialization gets a type attribute with the\nadjusted type.\n\nThis patch affects mostly only array bounds.  However, when the\nsymbolic type used in a declaration and in a definition are different,\nalthough they refer to the same type, debug information will end up\n(correctly?) naming different symbolic types in the specification and\nthe definition.  Also, when a readonly declaration of an array loses\nthe readonly flag at the definition because of the initializer, the\ndefinition may end up referencing a type while the specification\nrefers to a const-qualified version of that type.  If the type of the\nvariable is already const-qualified, e.g. an array of a const type,\nthe difference is meaningless.\n\n\nfor  gcc/ChangeLog\n\n\tPR debug/91507\n\t* dwarf2out.c (override_type_for_decl_p): New.\n\t(gen_variable_die): Use it.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR debug/91507\n\t* gcc.dg/debug/dwarf2/array-0.c: New.\n\t* gcc.dg/debug/dwarf2/array-1.c: New.\n\t* gcc.dg/debug/dwarf2/array-2.c: New.\n\t* gcc.dg/debug/dwarf2/array-3.c: New.\n\t* g++.dg/debug/dwarf2/array-0.C: New.\n\t* g++.dg/debug/dwarf2/array-1.C: New.\n\t* g++.dg/debug/dwarf2/array-2.C: New.  Based on libstdc++-v3's\n\tsrc/c++98/pool_allocator.cc:__pool_alloc_base::_S_heap_size.\n\t* g++.dg/debug/dwarf2/array-3.C: New.  Based on\n\tgcc's config/i386/i386-features.c:xlogue_layout::s_instances.\n\t* g++.dg/debug/dwarf2/array-4.C: New.\n\nFrom-SVN: r276403", "tree": {"sha": "6a454c924b23547a07d090fa1686f7df8b8ad7fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a454c924b23547a07d090fa1686f7df8b8ad7fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31632e2c4327146ea8d21cff33adaa505b17d2bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31632e2c4327146ea8d21cff33adaa505b17d2bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31632e2c4327146ea8d21cff33adaa505b17d2bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31632e2c4327146ea8d21cff33adaa505b17d2bd/comments", "author": null, "committer": null, "parents": [{"sha": "c7ea76ea5629e9f0357de49847274cf80e35f2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ea76ea5629e9f0357de49847274cf80e35f2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ea76ea5629e9f0357de49847274cf80e35f2f8"}], "stats": {"total": 166, "additions": 165, "deletions": 1}, "files": [{"sha": "13f2355aac59739a707ad076758efc39509720bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -1,3 +1,9 @@\n+2019-10-01  Alexandre Oliva <oliva@adacore.com>\n+\n+\tPR debug/91507\n+\t* dwarf2out.c (override_type_for_decl_p): New.\n+\t(gen_variable_die): Use it.\n+\n 2019-10-01  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vectorizable_reduction): Move variables"}, {"sha": "bf69ce497f213f1c6220d9445982e29eebe47849", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -23705,6 +23705,34 @@ local_function_static (tree decl)\n     && TREE_CODE (DECL_CONTEXT (decl)) == FUNCTION_DECL;\n }\n \n+/* Return true iff DECL overrides (presumably completes) the type of\n+   OLD_DIE within CONTEXT_DIE.  */\n+\n+static bool\n+override_type_for_decl_p (tree decl, dw_die_ref old_die,\n+\t\t\t  dw_die_ref context_die)\n+{\n+  tree type = TREE_TYPE (decl);\n+  int cv_quals;\n+\n+  if (decl_by_reference_p (decl))\n+    {\n+      type = TREE_TYPE (type);\n+      cv_quals = TYPE_UNQUALIFIED;\n+    }\n+  else\n+    cv_quals = decl_quals (decl);\n+\n+  dw_die_ref type_die = modified_type_die (type,\n+\t\t\t\t\t   cv_quals | TYPE_QUALS (type),\n+\t\t\t\t\t   false,\n+\t\t\t\t\t   context_die);\n+\n+  dw_die_ref old_type_die = get_AT_ref (old_die, DW_AT_type);\n+\n+  return type_die != old_type_die;\n+}\n+\n /* Generate a DIE to represent a declared data object.\n    Either DECL or ORIGIN must be non-null.  */\n \n@@ -23957,7 +23985,9 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \t  && !DECL_ABSTRACT_P (decl_or_origin)\n \t  && variably_modified_type_p (TREE_TYPE (decl_or_origin),\n \t\t\t\t       decl_function_context\n-\t\t\t\t\t\t\t(decl_or_origin))))\n+\t\t\t\t       (decl_or_origin)))\n+      || (old_die && specialization_p\n+\t  && override_type_for_decl_p (decl_or_origin, old_die, context_die)))\n     {\n       tree type = TREE_TYPE (decl_or_origin);\n "}, {"sha": "99230295d7cc36f602657e4b044eabd053a175a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -1,3 +1,18 @@\n+2019-10-01  Alexandre Oliva <oliva@adacore.com>\n+\n+\tPR debug/91507\n+\t* gcc.dg/debug/dwarf2/array-0.c: New.\n+\t* gcc.dg/debug/dwarf2/array-1.c: New.\n+\t* gcc.dg/debug/dwarf2/array-2.c: New.\n+\t* gcc.dg/debug/dwarf2/array-3.c: New.\n+\t* g++.dg/debug/dwarf2/array-0.C: New.\n+\t* g++.dg/debug/dwarf2/array-1.C: New.\n+\t* g++.dg/debug/dwarf2/array-2.C: New.  Based on libstdc++-v3's\n+\tsrc/c++98/pool_allocator.cc:__pool_alloc_base::_S_heap_size.\n+\t* g++.dg/debug/dwarf2/array-3.C: New.  Based on\n+\tgcc's config/i386/i386-features.c:xlogue_layout::s_instances.\n+\t* g++.dg/debug/dwarf2/array-4.C: New.\n+\n 2019-10-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/diag-aka-1.c (T): Turn into a pointer typedef."}, {"sha": "a3458bd0d32a4b263229962f6819e5688783ac07", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/array-0.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-0.C?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+struct S\n+{\n+  static int array[42];\n+};\n+\n+int S::array[42];\n+\n+/* Verify that we get only one DW_TAG_subrange_type with a\n+   DW_AT_upper_bound.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 2 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 1 } } */"}, {"sha": "e8fd6f8ffea561b3ffc05cdc5185c61b48418624", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/array-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-1.C?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+struct S\n+{\n+  static int array[];\n+};\n+\n+int S::array[42];\n+\n+/* Verify that we get two DW_TAG_subrange_type, only one of which with\n+   a DW_AT_upper_bound.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 4 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 1 } } */"}, {"sha": "dd178120438987bc95fcc9598c5049b2b4e9600d", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/array-2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-2.C?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+struct S\n+{\n+  typedef int i_t;\n+  static i_t array[42];\n+};\n+\n+int S::array[42];\n+\n+/* Verify that we get two DW_TAG_subrange_type (plus abbrev), and two\n+   DW_AT_upper_bound, because a different symbolic name is used for\n+   the array element type.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 3 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 2 } } */"}, {"sha": "8db6133b765857d190ea56ca3cb2c878bb01878a", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/array-3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-3.C?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+struct S\n+{\n+  S() {}\n+  ~S() {}\n+  static const S array[2];\n+};\n+\n+const S S::array[2] = { S(), S() };\n+\n+/* Verify that we get only one DW_TAG_subrange_type (plus the abbrev),\n+   and one DW_AT_upper_bound (non-abbrev), because the array\n+   definition loses the readonly wrapper for the array type because of\n+   the dynamic initializers.  The const types are 4: S, S*, int, and\n+   S[4], plus the abbrev.  A const version of S[4] doesn't make sense,\n+   but we output it.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_const_type\" 5 } } */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 2 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 1 } } */"}, {"sha": "6b3f546c1b5830d159b45bd21ddfc7a1d35f18cb", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/array-4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Farray-4.C?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+struct S\n+{\n+  S() {}\n+  ~S() {}\n+};\n+\n+const S array[2] = { S(), S() };\n+\n+/* Like array-3, but with a non-member array without a separate\n+   declaration, to check that we don't issue the nonsensical\n+   DW_TAG_const_type used by the member array declaration there.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_const_type\" 4 } } */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 2 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 1 } } */"}, {"sha": "b06392e04a2db11e3db3bc46c2eaacf282706c2f", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/array-0.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-0.c?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+extern int array[42];\n+\n+int array[42];\n+\n+/* Verify that we get only one DW_TAG_subtrange_type (plus abbrev),\n+   with a DW_AT_upper_bound.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 2 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 1 } } */"}, {"sha": "ad8f466ef08ad2c56f9c0ab5dc5fcce6abca50e4", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/array-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-1.c?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+extern int array[];\n+\n+int array[42];\n+\n+/* Verify that we get two DW_TAG_subtrange_type (each with an abbrev),\n+   but only one DW_AT_upper_bound.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 4 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 1 } } */"}, {"sha": "5d1606f0889fc0d81bb07c2a167aef675f824d34", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/array-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-2.c?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+int array[42];\n+\n+/* Verify that we get only one DW_TAG_subtrange_type (plus abbrev)\n+   with DW_AT_upper_bound.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 2 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 1 } } */"}, {"sha": "077a62ef9a3bf24a08162977bf847f18a2ac0c17", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/array-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31632e2c4327146ea8d21cff33adaa505b17d2bd/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Farray-3.c?ref=31632e2c4327146ea8d21cff33adaa505b17d2bd", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-2 -dA\" } */\n+int array[] = { 0, 1, 2 };\n+\n+/* Verify that we get only one DW_TAG_subtrange_type (plus abbrev)\n+   with DW_AT_upper_bound.  */\n+/* { dg-final { scan-assembler-times \" DW_TAG_subrange_type\" 2 } } */\n+/* { dg-final { scan-assembler-times \" DW_AT_upper_bound\" 1 } } */"}]}