{"sha": "cc3ae9f5c4c0d449045b39250edab189d0e573d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MzYWU5ZjVjNGMwZDQ0OTA0NWIzOTI1MGVkYWIxODlkMGU1NzNkMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-06-30T17:43:08Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-06-30T17:50:05Z"}, "message": "c++: Tweak function cloning names\n\nOn the modules branch I need to expose an intermediate step of the\nfunction cloning, but before that it'd be nice to rationalize the\nnames somewhat, now that we also use that API for copying the equality\noperator.  Jason's recent patch caused me some pain by altering the\nsame code.  I can only blame myself for not pushing some bits sooner.\nAnyway, this patch makes the newly renamed copy_fndecl_with_name\nstatic, and adds a wrapper copy_operator_fn, that takes an operator\ncode.  The cdtor cloning functions are renamed to explicitly note they\nexpect cdtors.  A followup patch will move some of the logic from\ncopy_fndecl_with_name to build_cdtor_clones.\n\ngcc/cp/\n\t* cp-tree.h (copy_fndecl_with_name): Rename to ...\n\t(copy_operatorn_fn): ... this.  Change arg type.\n\t(clone_function_decl): Rename to ...\n\t(clone_cdtor): ... this.\n\t* class.c (copy_fndecl_with_name): Make static.\n\t(copy_operator_fn): New wrapper.\n\t(build_clones): Rename to ...\n\t(build_cdtor_clones): ... this.\n\t(clone_function_decl): Rename to ...\n\t(clone_cdtor): ... this.  Adjust build_clones calls.\n\t(clone_constructors_and_destructors): Adjust clone_function_decl\n\tcalls.\n\t* method.c (implicitly_declare_fn): Adjust copy_fndecl_with_name\n\tcall.\n\t(lazily_declare_fn): Adjust clone_function_decl call.\n\t* pt.c (tsubst_function_decl): Likewise.\n\t(instantiate_template_1): Likewise.\n\nlibcc1/\n\t* libcp1plugin.cc (plugin_build_decl): Adjust clone_function_decl\n\tcall.", "tree": {"sha": "b073381c1d94b3973e8ab53886b4f4e11ad26a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b073381c1d94b3973e8ab53886b4f4e11ad26a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc3ae9f5c4c0d449045b39250edab189d0e573d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3ae9f5c4c0d449045b39250edab189d0e573d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3ae9f5c4c0d449045b39250edab189d0e573d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3ae9f5c4c0d449045b39250edab189d0e573d1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe03543bfb8c88c3feb8076b5ff1690dc3903878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe03543bfb8c88c3feb8076b5ff1690dc3903878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe03543bfb8c88c3feb8076b5ff1690dc3903878"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "b0cc027e0dea39a28b39ed1fedddde651694c9c1", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3ae9f5c4c0d449045b39250edab189d0e573d1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3ae9f5c4c0d449045b39250edab189d0e573d1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=cc3ae9f5c4c0d449045b39250edab189d0e573d1", "patch": "@@ -4696,7 +4696,7 @@ check_methods (tree t)\n     }\n }\n \n-tree\n+static tree\n copy_fndecl_with_name (tree fn, tree name)\n {\n   /* Copy the function.  */\n@@ -4804,6 +4804,14 @@ copy_fndecl_with_name (tree fn, tree name)\n   return clone;\n }\n \n+/* FN is an operator function, create a variant for CODE.  */\n+\n+tree\n+copy_operator_fn (tree fn, tree_code code)\n+{\n+  return copy_fndecl_with_name (fn, ovl_op_identifier (code));\n+}\n+\n /* FN is a constructor or destructor.  Clone the declaration to create\n    a specialized in-charge or not-in-charge version, as indicated by\n    NAME.  */\n@@ -4847,8 +4855,8 @@ build_clone (tree fn, tree name)\n /* Build the clones of FN, return the number of clones built.  These\n    will be inserted onto DECL_CHAIN of FN.  */\n \n-unsigned\n-build_clones (tree fn)\n+static unsigned\n+build_cdtor_clones (tree fn)\n {\n   unsigned count = 0;\n \n@@ -4891,14 +4899,14 @@ build_clones (tree fn)\n    CLASSTYPE_MEMBER_VEC.  */\n \n void\n-clone_function_decl (tree fn, bool update_methods)\n+clone_cdtor (tree fn, bool update_methods)\n {\n   /* Avoid inappropriate cloning.  */\n   if (DECL_CHAIN (fn)\n       && DECL_CLONED_FUNCTION_P (DECL_CHAIN (fn)))\n     return;\n \n-  unsigned count = build_clones (fn);\n+  unsigned count = build_cdtor_clones (fn);\n \n   /* Note that this is an abstract function that is never emitted.  */\n   DECL_ABSTRACT_P (fn) = true;\n@@ -4998,10 +5006,10 @@ clone_constructors_and_destructors (tree t)\n   /* While constructors can be via a using declaration, at this point\n      we no longer need to know that.  */\n   for (ovl_iterator iter (CLASSTYPE_CONSTRUCTORS (t)); iter; ++iter)\n-    clone_function_decl (*iter, /*update_methods=*/true);\n+    clone_cdtor (*iter, /*update_methods=*/true);\n \n   if (tree dtor = CLASSTYPE_DESTRUCTOR (t))\n-    clone_function_decl (dtor, /*update_methods=*/true);\n+    clone_cdtor (dtor, /*update_methods=*/true);\n }\n \n /* Deduce noexcept for a destructor DTOR.  */"}, {"sha": "9b31eaf4a070d3751c4078fef9169f7a97f61c70", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3ae9f5c4c0d449045b39250edab189d0e573d1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3ae9f5c4c0d449045b39250edab189d0e573d1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cc3ae9f5c4c0d449045b39250edab189d0e573d1", "patch": "@@ -6450,8 +6450,8 @@ extern void check_abi_tags\t\t\t(tree);\n extern tree missing_abi_tags\t\t\t(tree);\n extern void fixup_type_variants\t\t\t(tree);\n extern void fixup_attribute_variants\t\t(tree);\n-extern tree copy_fndecl_with_name\t\t(tree, tree);\n-extern void clone_function_decl\t\t\t(tree, bool);\n+extern void clone_cdtor\t\t\t\t(tree, bool);\n+extern tree copy_operator_fn\t\t\t(tree, tree_code code);\n extern void adjust_clone_args\t\t\t(tree);\n extern void deduce_noexcept_on_destructor       (tree);\n extern bool uniquely_derived_from_p             (tree, tree);"}, {"sha": "8fd7052d205d0b346aa9113e12ddb7f7d2337be3", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3ae9f5c4c0d449045b39250edab189d0e573d1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3ae9f5c4c0d449045b39250edab189d0e573d1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=cc3ae9f5c4c0d449045b39250edab189d0e573d1", "patch": "@@ -2688,7 +2688,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n      comparison operator function. --end note]  */\n   if (kind == sfk_comparison)\n     {\n-      fn = copy_fndecl_with_name (pattern_fn, ovl_op_identifier (EQ_EXPR));\n+      fn = copy_operator_fn (pattern_fn, EQ_EXPR);\n       DECL_ARTIFICIAL (fn) = 1;\n       TREE_TYPE (fn) = change_return_type (boolean_type_node, TREE_TYPE (fn));\n       return fn;\n@@ -3152,7 +3152,7 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n   maybe_add_class_template_decl_list (type, fn, /*friend_p=*/0);\n   if (DECL_MAYBE_IN_CHARGE_CDTOR_P (fn))\n     /* Create appropriate clones.  */\n-    clone_function_decl (fn, /*update_methods=*/true);\n+    clone_cdtor (fn, /*update_methods=*/true);\n \n   return fn;\n }"}, {"sha": "b6423f7432b96b3eb747561f4c8d7964392648bc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3ae9f5c4c0d449045b39250edab189d0e573d1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3ae9f5c4c0d449045b39250edab189d0e573d1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cc3ae9f5c4c0d449045b39250edab189d0e573d1", "patch": "@@ -13923,7 +13923,7 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n \t If it isn't, that'll be handled by\n \t clone_constructors_and_destructors.  */\n       if (PRIMARY_TEMPLATE_P (gen_tmpl))\n-\tclone_function_decl (r, /*update_methods=*/false);\n+\tclone_cdtor (r, /*update_methods=*/false);\n     }\n   else if ((complain & tf_error) != 0\n \t   && IDENTIFIER_ANY_OP_P (DECL_NAME (r))\n@@ -20769,7 +20769,7 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n      instantiating the template clones.  */\n   if (tree chain = DECL_CHAIN (gen_tmpl))\n     if (DECL_P (chain) && DECL_CLONED_FUNCTION_P (chain))\n-      clone_function_decl (fndecl, /*update_methods=*/false);\n+      clone_cdtor (fndecl, /*update_methods=*/false);\n \n   if (!access_ok)\n     {"}, {"sha": "01aecf00735f84043fef100b25043837c6af3fc7", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc3ae9f5c4c0d449045b39250edab189d0e573d1/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc3ae9f5c4c0d449045b39250edab189d0e573d1/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=cc3ae9f5c4c0d449045b39250edab189d0e573d1", "patch": "@@ -1552,7 +1552,7 @@ plugin_build_decl (cc1_plugin::connection *self,\n \t reversal.  */\n       tree save = DECL_CHAIN (decl);\n       DECL_CHAIN (decl) = NULL_TREE;\n-      clone_function_decl (decl, /*update_methods=*/true);\n+      clone_cdtor (decl, /*update_methods=*/true);\n       gcc_assert (TYPE_FIELDS (current_class_type) == decl);\n       TYPE_FIELDS (current_class_type)\n \t= nreverse (TYPE_FIELDS (current_class_type));"}]}