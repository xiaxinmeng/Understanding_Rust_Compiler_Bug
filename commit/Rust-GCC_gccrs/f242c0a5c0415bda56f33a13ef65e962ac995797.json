{"sha": "f242c0a5c0415bda56f33a13ef65e962ac995797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0MmMwYTVjMDQxNWJkYTU2ZjMzYTEzZWY2NWU5NjJhYzk5NTc5Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-05-25T12:07:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-05-25T12:07:38Z"}, "message": "lto-streamer-out.c (output_record_start): Use lto_output_enum\n\n\n\t* lto-streamer-out.c (output_record_start): Use lto_output_enum\n\t(lto_output_tree): Use output_record_start.\n\t* lto-streamer-in.c (input_record_start): Use lto_input_enum\n\t(lto_get_pickled_tree): Use input_record_start.\n\t* lto-section-in.c (lto_section_overrun): Turn into fatal error.\n\t(lto_value_range_error): New function.\n\t* lto-streamer.h (lto_value_range_error): Declare.\n\t(lto_output_int_in_range, lto_input_int_in_range): New functions.\n\t(lto_output_enum, lto_input_enum): New macros.\n\nFrom-SVN: r174186", "tree": {"sha": "1b42ff9de53077e317f6573fb7a0e6580fe3254f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b42ff9de53077e317f6573fb7a0e6580fe3254f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f242c0a5c0415bda56f33a13ef65e962ac995797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f242c0a5c0415bda56f33a13ef65e962ac995797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f242c0a5c0415bda56f33a13ef65e962ac995797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f242c0a5c0415bda56f33a13ef65e962ac995797/comments", "author": null, "committer": null, "parents": [{"sha": "52d0a7acadc642b26e833dfcaffc22e4d59fb75f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d0a7acadc642b26e833dfcaffc22e4d59fb75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d0a7acadc642b26e833dfcaffc22e4d59fb75f"}], "stats": {"total": 107, "additions": 96, "deletions": 11}, "files": [{"sha": "1143fae8a9dd2ef38260d2b9397a035fdea24f88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f242c0a5c0415bda56f33a13ef65e962ac995797", "patch": "@@ -1,3 +1,15 @@\n+2011-05-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer-out.c (output_record_start): Use lto_output_enum\n+\t(lto_output_tree): Use output_record_start.\n+\t* lto-streamer-in.c (input_record_start): Use lto_input_enum\n+\t(lto_get_pickled_tree): Use input_record_start.\n+\t* lto-section-in.c (lto_section_overrun): Turn into fatal error.\n+\t(lto_value_range_error): New function.\n+\t* lto-streamer.h (lto_value_range_error): Declare.\n+\t(lto_output_int_in_range, lto_input_int_in_range): New functions.\n+\t(lto_output_enum, lto_input_enum): New macros.\n+\n 2011-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* common.opt (flag_stack_usage_info): New variable."}, {"sha": "b6277a35532d9d0d6b450869f17719e0aa135ca8", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=f242c0a5c0415bda56f33a13ef65e962ac995797", "patch": "@@ -483,6 +483,16 @@ lto_get_function_in_decl_state (struct lto_file_decl_data *file_data,\n void\n lto_section_overrun (struct lto_input_block *ib)\n {\n-  internal_error (\"bytecode stream: trying to read %d bytes \"\n-\t          \"after the end of the input buffer\", ib->p - ib->len);\n+  fatal_error (\"bytecode stream: trying to read %d bytes \"\n+\t       \"after the end of the input buffer\", ib->p - ib->len);\n+}\n+\n+/* Report out of range value.  */\n+\n+void\n+lto_value_range_error (const char *purpose, HOST_WIDE_INT val,\n+\t\t       HOST_WIDE_INT min, HOST_WIDE_INT max)\n+{\n+  fatal_error (\"%s out of range: Range is %i to %i, value is %i\",\n+\t       purpose, (int)min, (int)max, (int)val);\n }"}, {"sha": "dd14c0cedf94874d33e710660e777bb918c8c006", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=f242c0a5c0415bda56f33a13ef65e962ac995797", "patch": "@@ -231,11 +231,10 @@ lto_input_string (struct data_in *data_in, struct lto_input_block *ib)\n \n /* Return the next tag in the input block IB.  */\n \n-static enum LTO_tags\n+static inline enum LTO_tags\n input_record_start (struct lto_input_block *ib)\n {\n-  enum LTO_tags tag = (enum LTO_tags) lto_input_uleb128 (ib);\n-  return tag;\n+  return lto_input_enum (ib, LTO_tags, LTO_NUM_TAGS);\n }\n \n \n@@ -2558,7 +2557,7 @@ lto_get_pickled_tree (struct lto_input_block *ib, struct data_in *data_in)\n   enum LTO_tags expected_tag;\n \n   ix = lto_input_uleb128 (ib);\n-  expected_tag = (enum LTO_tags) lto_input_uleb128 (ib);\n+  expected_tag = lto_input_enum (ib, LTO_tags, LTO_NUM_TAGS);\n \n   result = lto_streamer_cache_get (data_in->reader_cache, ix);\n   gcc_assert (result"}, {"sha": "0cfe25a5d266bdf063b9bad393bf9f0017af4ba8", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=f242c0a5c0415bda56f33a13ef65e962ac995797", "patch": "@@ -270,12 +270,10 @@ output_sleb128 (struct output_block *ob, HOST_WIDE_INT work)\n \n /* Output the start of a record with TAG to output block OB.  */\n \n-static void\n+static inline void\n output_record_start (struct output_block *ob, enum LTO_tags tag)\n {\n-  /* Make sure TAG fits inside an unsigned int.  */\n-  gcc_assert (tag == (enum LTO_tags) (unsigned) tag);\n-  output_uleb128 (ob, tag);\n+  lto_output_enum (ob->main_stream, LTO_tags, LTO_NUM_TAGS, tag);\n }\n \n \n@@ -1401,7 +1399,8 @@ lto_output_tree (struct output_block *ob, tree expr, bool ref_p)\n \t will instantiate two different nodes for the same object.  */\n       output_record_start (ob, LTO_tree_pickle_reference);\n       output_uleb128 (ob, ix);\n-      output_uleb128 (ob, lto_tree_code_to_tag (TREE_CODE (expr)));\n+      lto_output_enum (ob->main_stream, LTO_tags, LTO_NUM_TAGS,\n+\t\t       lto_tree_code_to_tag (TREE_CODE (expr)));\n     }\n   else if (lto_stream_as_builtin_p (expr))\n     {"}, {"sha": "3389b5643741bbd7fc9427223f7da8d1f7c2cfe7", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f242c0a5c0415bda56f33a13ef65e962ac995797/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=f242c0a5c0415bda56f33a13ef65e962ac995797", "patch": "@@ -771,6 +771,9 @@ extern int lto_eq_in_decl_state (const void *, const void *);\n extern struct lto_in_decl_state *lto_get_function_in_decl_state (\n \t\t\t\t      struct lto_file_decl_data *, tree);\n extern void lto_section_overrun (struct lto_input_block *) ATTRIBUTE_NORETURN;\n+extern void lto_value_range_error (const char *,\n+\t\t\t\t   HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t   HOST_WIDE_INT) ATTRIBUTE_NORETURN;\n \n /* In lto-section-out.c  */\n extern hashval_t lto_hash_decl_slot_node (const void *);\n@@ -1199,4 +1202,66 @@ lto_input_1_unsigned (struct lto_input_block *ib)\n   return (ib->data[ib->p++]);\n }\n \n+/* Output VAL into OBS and verify it is in range MIN...MAX that is supposed\n+   to be compile time constant.\n+   Be host independent, limit range to 31bits.  */\n+\n+static inline void\n+lto_output_int_in_range (struct lto_output_stream *obs,\n+\t\t\t HOST_WIDE_INT min,\n+\t\t\t HOST_WIDE_INT max,\n+\t\t\t HOST_WIDE_INT val)\n+{\n+  HOST_WIDE_INT range = max - min;\n+\n+  gcc_checking_assert (val >= min && val <= max && range > 0\n+\t\t       && range < 0x7fffffff);\n+\n+  val -= min;\n+  lto_output_1_stream (obs, val & 255);\n+  if (range >= 0xff)\n+    lto_output_1_stream (obs, (val << 8) & 255);\n+  if (range >= 0xffff)\n+    lto_output_1_stream (obs, (val << 16) & 255);\n+  if (range >= 0xffffff)\n+    lto_output_1_stream (obs, (val << 24) & 255);\n+}\n+\n+/* Input VAL into OBS and verify it is in range MIN...MAX that is supposed\n+   to be compile time constant.  PURPOSE is used for error reporting.  */\n+\n+static inline HOST_WIDE_INT\n+lto_input_int_in_range (struct lto_input_block *ib,\n+\t\t\tconst char *purpose,\n+\t\t\tHOST_WIDE_INT min,\n+\t\t\tHOST_WIDE_INT max)\n+{\n+  HOST_WIDE_INT range = max - min;\n+  HOST_WIDE_INT val = lto_input_1_unsigned (ib);\n+\n+  gcc_checking_assert (range > 0 && range < 0x7fffffff);\n+\n+  if (range >= 0xff)\n+    val |= ((HOST_WIDE_INT)lto_input_1_unsigned (ib)) << 8;\n+  if (range >= 0xffff)\n+    val |= ((HOST_WIDE_INT)lto_input_1_unsigned (ib)) << 16;\n+  if (range >= 0xffffff)\n+    val |= ((HOST_WIDE_INT)lto_input_1_unsigned (ib)) << 24;\n+  val += min;\n+  if (val < min || val > max)\n+    lto_value_range_error (purpose, val, min, max);\n+  return val;\n+}\n+\n+/* Output VAL of type \"enum enum_name\" into OBS.\n+   Assume range 0...ENUM_LAST - 1.  */\n+#define lto_output_enum(obs,enum_name,enum_last,val) \\\n+  lto_output_int_in_range ((obs), 0, (int)(enum_last) - 1, (int)(val))\n+\n+/* Input enum of type \"enum enum_name\" from IB.\n+   Assume range 0...ENUM_LAST - 1.  */\n+#define lto_input_enum(ib,enum_name,enum_last) \\\n+  (enum enum_name)lto_input_int_in_range ((ib), #enum_name, 0, \\\n+\t\t\t\t\t  (int)(enum_last) - 1)\n+\n #endif /* GCC_LTO_STREAMER_H  */"}]}