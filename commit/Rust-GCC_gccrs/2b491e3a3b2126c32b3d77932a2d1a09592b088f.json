{"sha": "2b491e3a3b2126c32b3d77932a2d1a09592b088f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI0OTFlM2EzYjIxMjZjMzJiM2Q3NzkzMmEyZDFhMDk1OTJiMDg4Zg==", "commit": {"author": {"name": "Doug Gregor", "email": "dgregor@apple.com", "date": "2003-06-23T16:18:53Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2003-06-23T16:18:53Z"}, "message": "Types _D -> _Diff, _R -> _Ref\n\nFrom-SVN: r68375", "tree": {"sha": "3cb00d233eac150fc38886126c9295a909a704bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cb00d233eac150fc38886126c9295a909a704bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b491e3a3b2126c32b3d77932a2d1a09592b088f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b491e3a3b2126c32b3d77932a2d1a09592b088f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b491e3a3b2126c32b3d77932a2d1a09592b088f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b491e3a3b2126c32b3d77932a2d1a09592b088f/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20b352b6b81a51dd1c573f7d95616fef5fc0da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20b352b6b81a51dd1c573f7d95616fef5fc0da7"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "f2159855257637cdf34bc90a381752fb942fbdfd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b491e3a3b2126c32b3d77932a2d1a09592b088f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b491e3a3b2126c32b3d77932a2d1a09592b088f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2b491e3a3b2126c32b3d77932a2d1a09592b088f", "patch": "@@ -1,3 +1,8 @@\n+2003-06-20  Doug Gregor <dgregor@apple.com>\n+\n+        * include/bits/boost_concept_check.h: Don't use _D or _R for type \n+        names.\n+\n 2003-06-22  Paolo Carlini  <pcarlini@unitus.it>\n \t    Nathan C. Myers  <ncm-nospam@cantrip.org>\n "}, {"sha": "a6a94a214ed2ce9a11acad997601d60f4693d1d7", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b491e3a3b2126c32b3d77932a2d1a09592b088f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b491e3a3b2126c32b3d77932a2d1a09592b088f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=2b491e3a3b2126c32b3d77932a2d1a09592b088f", "patch": "@@ -412,9 +412,9 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     void __constraints() {\n       __function_requires< _TrivialIteratorConcept<_Tp> >();\n       // require iterator_traits typedef's\n-      typedef typename std::iterator_traits<_Tp>::difference_type _D;\n-//      __function_requires< _SignedIntegerConcept<_D> >();\n-      typedef typename std::iterator_traits<_Tp>::reference _R;\n+      typedef typename std::iterator_traits<_Tp>::difference_type _Diff;\n+//      __function_requires< _SignedIntegerConcept<_Diff> >();\n+      typedef typename std::iterator_traits<_Tp>::reference _Ref;\n       typedef typename std::iterator_traits<_Tp>::pointer _Pt;\n       typedef typename std::iterator_traits<_Tp>::iterator_category _Cat;\n       __function_requires< _ConvertibleConcept<\n@@ -447,8 +447,8 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n       __function_requires< _ConvertibleConcept<\n         typename std::iterator_traits<_Tp>::iterator_category,\n         std::forward_iterator_tag> >();\n-      typedef typename std::iterator_traits<_Tp>::reference _R;\n-      _R __r _IsUnused = *__i;\n+      typedef typename std::iterator_traits<_Tp>::reference _Ref;\n+      _Ref __r _IsUnused = *__i;\n     }\n     _Tp __i;\n   };\n@@ -498,8 +498,8 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n       __function_requires< _ConvertibleConcept<\n         typename std::iterator_traits<_Tp>::iterator_category,\n         std::random_access_iterator_tag> >();\n-      // ??? We don't use _R, are we just checking for \"referenceability\"?\n-      typedef typename std::iterator_traits<_Tp>::reference _R;\n+      // ??? We don't use _Ref, are we just checking for \"referenceability\"?\n+      typedef typename std::iterator_traits<_Tp>::reference _Ref;\n \n       __i += __n;                       // require assignment addition operator\n       __i = __i + __n; __i = __n + __i; // require addition with difference type\n@@ -828,7 +828,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n       typedef typename _SimpleAssociativeContainer::key_type _Key_type;\n       typedef typename _SimpleAssociativeContainer::value_type _Value_type;\n       typedef typename _Aux_require_same<_Key_type, _Value_type>::_Type\n-        _Requqired;\n+        _Required;\n     }\n   };\n "}]}