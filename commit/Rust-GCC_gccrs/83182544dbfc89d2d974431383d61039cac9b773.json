{"sha": "83182544dbfc89d2d974431383d61039cac9b773", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMxODI1NDRkYmZjODlkMmQ5NzQ0MzEzODNkNjEwMzljYWM5Yjc3Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-09-13T14:37:29Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-09-13T14:37:29Z"}, "message": "c-parse.in (yyerror): Const-ification and/or static-ization.\n\n\t* c-parse.in (yyerror): Const-ification and/or static-ization.\n\t* c-typeck.c (push_member_name): Likewise.\n\t* collect2.c (main): Likewise.\n\t* dbxout.c (dbxout_parms): Likewise.\n\t* diagnostic.c (format_with_decl): Likewise.\n\t* dwarf2out.c (output_ranges): Likewise.\n\t* dwarfout.c (fundamental_type_code): Likewise.\n\t* except.c (dw2_output_call_site_table): Likewise.\n\t* gcc.c (do_spec_1): Likewise.\n\t* genopinit.c (optabs): Likewise.\n\t* objc/objc-act.c (synth_id_with_class_suffix, start_class,\n\tgen_declaration_1, handle_impent): Likewise.\n\t* protoize.c (default_include, in_system_include_dir, abspath):\n\tLikewise.\n\t* sched-vis.c (visualize_stall_cycles): Likewise.\n\t* sdbout.c (plain_type_1, sdbout_end_function,\n\tsdbout_end_epilogue): Likewise.\n\t* varasm.c (decode_reg_name): Likewise.\n\n\t* 1750a.c (mod_regno_adjust): Likewise.\n\t* alpha.c (alpha_write_one_linkage,\n\tunicosmk_output_default_externs): Likewise.\n\t* arm.c (arm_condition_codes): Likewise.\n\t* arm.h (arm_condition_codes): Likewise.\n\t* avr.c (output_movsisf, encode_section_info): Likewise.\n\t* darwin.h (GEN_BINDER_NAME_FOR_STUB, GEN_SYMBOL_NAME_FOR_SYMBOL):\n\tLikewise.\n\t* i386.c (hi_reg_name, qi_reg_name, qi_high_reg_name): Likewise.\n\t* i386.h (hi_reg_name, qi_reg_name, qi_high_reg_name): Likewise.\n\t* m88k.c (output_function_profiler): Likewise.\n\t* mips.c (mips_output_conditional_branch): Likewise.\n\t* ns32k.c (ns32k_out_reg_names): Likewise.\n\t* ns32k.h (ns32k_out_reg_names): Likewise.\n\t* pj.c (pj_output_rval): Likewise.\n\t* rs6000.c (GEN_LOCAL_LABEL_FOR_SYMBOL): Likewise.\n\t* sparc.c (sparc_flat_function_prologue,\n\tsparc_flat_function_epilogue): Likewise.\n\ncp:\n\t* decl.c (warn_extern_redeclared_static, cp_make_fname_decl):\n\tConst-ification.\n\t* pt.c (tsubst_decl): Likewise.\n\nf:\n\t* bad.c (ffebad_finish): Const-ification and/or static-ization.\n\t* intrin.c (ffeintrin_cmp_name_): Likewise.\n\t* stc.c (ffestc_R904): Likewise.\n\njava:\n\t* expr.c (expand_invoke): Const-ification.\n\t* parse.y (patch_method_invocation): Likewise.\n\nFrom-SVN: r45581", "tree": {"sha": "c5d68aba90c30f41b5992271d9c2e33574c3a647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5d68aba90c30f41b5992271d9c2e33574c3a647"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83182544dbfc89d2d974431383d61039cac9b773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83182544dbfc89d2d974431383d61039cac9b773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83182544dbfc89d2d974431383d61039cac9b773", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83182544dbfc89d2d974431383d61039cac9b773/comments", "author": null, "committer": null, "parents": [{"sha": "f404402c4ebc0b51b63128c9ce40b381743c9cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f404402c4ebc0b51b63128c9ce40b381743c9cb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f404402c4ebc0b51b63128c9ce40b381743c9cb0"}], "stats": {"total": 237, "additions": 138, "deletions": 99}, "files": [{"sha": "f135bd0129caa35cde06abbe1de6122ecb1cf447", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -1,3 +1,43 @@\n+2001-09-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-parse.in (yyerror): Const-ification and/or static-ization.\n+\t* c-typeck.c (push_member_name): Likewise.\n+\t* collect2.c (main): Likewise.\n+\t* dbxout.c (dbxout_parms): Likewise.\n+\t* diagnostic.c (format_with_decl): Likewise.\n+\t* dwarf2out.c (output_ranges): Likewise.\n+\t* dwarfout.c (fundamental_type_code): Likewise.\n+\t* except.c (dw2_output_call_site_table): Likewise.\n+\t* gcc.c (do_spec_1): Likewise.\n+\t* genopinit.c (optabs): Likewise.\n+\t* objc/objc-act.c (synth_id_with_class_suffix, start_class,\n+\tgen_declaration_1, handle_impent): Likewise.\n+\t* protoize.c (default_include, in_system_include_dir, abspath):\n+\tLikewise.\n+\t* sched-vis.c (visualize_stall_cycles): Likewise.\n+\t* sdbout.c (plain_type_1, sdbout_end_function,\n+\tsdbout_end_epilogue): Likewise.\n+\t* varasm.c (decode_reg_name): Likewise.\n+\t\n+\t* 1750a.c (mod_regno_adjust): Likewise.\n+\t* alpha.c (alpha_write_one_linkage,\n+\tunicosmk_output_default_externs): Likewise.\n+\t* arm.c (arm_condition_codes): Likewise.\n+\t* arm.h (arm_condition_codes): Likewise.\n+\t* avr.c (output_movsisf, encode_section_info): Likewise.\n+\t* darwin.h (GEN_BINDER_NAME_FOR_STUB, GEN_SYMBOL_NAME_FOR_SYMBOL):\n+\tLikewise.\n+\t* i386.c (hi_reg_name, qi_reg_name, qi_high_reg_name): Likewise.\n+\t* i386.h (hi_reg_name, qi_reg_name, qi_high_reg_name): Likewise.\n+\t* m88k.c (output_function_profiler): Likewise.\n+\t* mips.c (mips_output_conditional_branch): Likewise.\n+\t* ns32k.c (ns32k_out_reg_names): Likewise.\n+\t* ns32k.h (ns32k_out_reg_names): Likewise.\n+\t* pj.c (pj_output_rval): Likewise.\n+\t* rs6000.c (GEN_LOCAL_LABEL_FOR_SYMBOL): Likewise.\n+\t* sparc.c (sparc_flat_function_prologue,\n+\tsparc_flat_function_epilogue): Likewise.\n+\n 2001-09-13  Markus Werle <numerical.simulation@web.de>\n             Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "b8871c5952e8784c4b3e698cb5590cc68e47a6ee", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -3615,7 +3615,7 @@ yyerror (msgid)\n   else if (last_token == CPP_CHAR || last_token == CPP_WCHAR)\n     {\n       unsigned int val = TREE_INT_CST_LOW (yylval.ttype);\n-      const char *ell = (last_token == CPP_CHAR) ? \"\" : \"L\";\n+      const char *const ell = (last_token == CPP_CHAR) ? \"\" : \"L\";\n       if (val <= UCHAR_MAX && ISGRAPH (val))\n \terror (\"%s before %s'%c'\", string, ell, val);\n       else"}, {"sha": "9d2c8f4d1f8cc9614504a76b7dbed7cac2921c1c", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -4507,7 +4507,7 @@ push_member_name (decl)\n      tree decl;\n      \n {\n-  const char *string\n+  const char *const string\n     = DECL_NAME (decl) ? IDENTIFIER_POINTER (DECL_NAME (decl)) : \"<anonymous>\";\n   PUSH_SPELLING (SPELLING_MEMBER, string, u.s);\n }"}, {"sha": "4877790eaf550c82002f59f12e48368291b4d316", "filename": "gcc/collect2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -796,21 +796,21 @@ main (argc, argv)\n      int argc;\n      char *argv[];\n {\n-  const char *const ld_suffix\t= \"ld\";\n+  static const char *const ld_suffix\t= \"ld\";\n   const char *full_ld_suffix\t= ld_suffix;\n-  const char *const real_ld_suffix = \"real-ld\";\n-  const char *const collect_ld_suffix = \"collect-ld\";\n-  const char *const nm_suffix\t= \"nm\";\n+  static const char *const real_ld_suffix = \"real-ld\";\n+  static const char *const collect_ld_suffix = \"collect-ld\";\n+  static const char *const nm_suffix\t= \"nm\";\n   const char *full_nm_suffix\t= nm_suffix;\n-  const char *const gnm_suffix\t= \"gnm\";\n+  static const char *const gnm_suffix\t= \"gnm\";\n   const char *full_gnm_suffix\t= gnm_suffix;\n #ifdef LDD_SUFFIX\n-  const char *const ldd_suffix\t= LDD_SUFFIX;\n+  static const char *const ldd_suffix\t= LDD_SUFFIX;\n   const char *full_ldd_suffix\t= ldd_suffix;\n #endif\n-  const char *const strip_suffix = \"strip\";\n+  static const char *const strip_suffix = \"strip\";\n   const char *full_strip_suffix = strip_suffix;\n-  const char *const gstrip_suffix = \"gstrip\";\n+  static const char *const gstrip_suffix = \"gstrip\";\n   const char *full_gstrip_suffix = gstrip_suffix;\n   const char *arg;\n   FILE *outf;"}, {"sha": "4856de2a37ac76f0903a23d7dc4cac11452780c7", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -304,7 +304,7 @@ mod_regno_adjust (instr, op)\n      rtx *op;\n {\n   static char outstr[40];\n-  const char *r = (!strncmp (instr, \"dvr\", 3) ? \"r\" : \"\");\n+  const char *const r = (!strncmp (instr, \"dvr\", 3) ? \"r\" : \"\");\n   int modregno_gcc = REGNO (op[3]), modregno_1750 = REGNO (op[0]) + 1;\n \n   if (modregno_gcc == modregno_1750"}, {"sha": "d2d90d97076e851d21ae74ff936b4a40094ebd3c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -7795,7 +7795,7 @@ alpha_write_one_linkage (node, data)\n      splay_tree_node node;\n      void *data;\n {\n-  const char *name = (const char *) node->key;\n+  const char *const name = (const char *) node->key;\n   struct alpha_links *links = (struct alpha_links *) node->value;\n   FILE *stream = (FILE *) data;\n \n@@ -8498,7 +8498,7 @@ static void\n unicosmk_output_default_externs (file)\n \tFILE *file;\n {\n-  static const char *externs[] =\n+  static const char *const externs[] =\n     { \"__T3E_MISMATCH\" };\n \n   int i;"}, {"sha": "1ad558e8b5bf1ed4b1f123d4de093de699471648", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -283,7 +283,7 @@ rtx arm_target_insn;\n int arm_target_label;\n \n /* The condition codes of the ARM, and the inverse function.  */\n-const char *const arm_condition_codes[] =\n+static const char *const arm_condition_codes[] =\n {\n   \"eq\", \"ne\", \"cs\", \"cc\", \"mi\", \"pl\", \"vs\", \"vc\",\n   \"hi\", \"ls\", \"ge\", \"lt\", \"gt\", \"le\", \"al\", \"nv\""}, {"sha": "aa1c177a3bbbab4e9f94db1007d8f72c6a04a9b7", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -61,7 +61,6 @@ typedef enum arm_cond_code\n arm_cc;\n \n extern arm_cc arm_current_cc;\n-extern const char *const arm_condition_codes[];\n \n #define ARM_INVERSE_CONDITION_CODE(X)  ((arm_cc) (((int)X) ^ 1))\n "}, {"sha": "5e9c172658ad5dc5c73202d82c260d56cfc29f95", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -2363,7 +2363,7 @@ output_movsisf(insn, operands, l)\n \t  \n \t  if (GET_CODE (src) == CONST_INT)\n \t    {\n-\t      const char *clr_op0 =\n+\t      const char *const clr_op0 =\n \t\tAVR_ENHANCED ? (AS1 (clr,%A0) CR_TAB\n \t\t\t\tAS1 (clr,%B0) CR_TAB\n \t\t\t\tAS2 (movw,%C0,%A0))\n@@ -4756,7 +4756,7 @@ encode_section_info (decl)\n \t   && TREE_CODE (decl) == VAR_DECL\n \t   && avr_progmem_p (decl))\n     {\n-      const char *const dsec = \".progmem.data\";\n+      static const char *const dsec = \".progmem.data\";\n       DECL_SECTION_NAME (decl) = build_string (strlen (dsec), dsec);\n       TREE_READONLY (decl) = 1;\n     }"}, {"sha": "54b669a12809da030fb8ccfa8b9cb4dec25252ba", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -719,7 +719,7 @@ enum machopic_addr_class {\n \n #define GEN_BINDER_NAME_FOR_STUB(BUF,STUB,STUB_LENGTH)\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n-    const char *stub_ = (STUB);\t\t\t\t\t\\\n+    const char *const stub_ = (STUB);\t\t\t\t\\\n     char *buffer_ = (BUF);\t\t\t\t\t\\\n     strcpy (buffer_, stub_);\t\t\t\t\t\\\n     if (stub_[0] == '\"')\t\t\t\t\t\\\n@@ -734,7 +734,7 @@ enum machopic_addr_class {\n \n #define GEN_SYMBOL_NAME_FOR_SYMBOL(BUF,SYMBOL,SYMBOL_LENGTH)\t\\\n   do {\t\t\t\t\t\t\t\t\\\n-    const char *symbol_ = (SYMBOL);\t\t\t\t\\\n+    const char *const symbol_ = (SYMBOL);\t\t\t\\\n     char *buffer_ = (BUF);\t\t\t\t\t\\\n     if (name_needs_quotes (symbol_) && symbol_[0] != '\"')\t\\\n       {\t\t\t\t\t\t\t\t\\"}, {"sha": "6caf8540b6bd40825020650d718ba8011e9e9192", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -361,9 +361,9 @@ static int use_fast_prologue_epilogue;\n \n #define AT_BP(mode) (gen_rtx_MEM ((mode), hard_frame_pointer_rtx))\n \n-const char * const hi_reg_name[] = HI_REGISTER_NAMES;\n-const char * const qi_reg_name[] = QI_REGISTER_NAMES;\n-const char * const qi_high_reg_name[] = QI_HIGH_REGISTER_NAMES;\n+static const char *const hi_reg_name[] = HI_REGISTER_NAMES; /* names for 16 bit regs */\n+static const char *const qi_reg_name[] = QI_REGISTER_NAMES; /* names for 8 bit regs (low) */\n+static const char *const qi_high_reg_name[] = QI_HIGH_REGISTER_NAMES; /* names for 8 bit regs (high) */\n \n /* Array of the smallest class containing reg number REGNO, indexed by\n    REGNO.  Used by REGNO_REG_CLASS in i386.h.  */"}, {"sha": "1a1715e8f8e411d5e74180c42d37db3208d53be7", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -3095,9 +3095,6 @@ extern const char *ix86_branch_cost_string;\t/* values 1-5: see jump.c */\n extern int ix86_regparm;\t\t\t/* ix86_regparm_string as a number */\n extern int ix86_preferred_stack_boundary;\t/* preferred stack boundary alignment in bits */\n extern int ix86_branch_cost;\t\t\t/* values 1-5: see jump.c */\n-extern const char * const hi_reg_name[];\t/* names for 16 bit regs */\n-extern const char * const qi_reg_name[];\t/* names for 8 bit regs (low) */\n-extern const char * const qi_high_reg_name[];\t/* names for 8 bit regs (high) */\n extern enum reg_class const regclass_map[];\t/* smalled class containing REGNO */\n extern struct rtx_def *ix86_compare_op0;\t/* operand 0 for comparisons */\n extern struct rtx_def *ix86_compare_op1;\t/* operand 1 for comparisons */"}, {"sha": "1de96f20c2b4a89e5027078c6e3d9970dd81d04d", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -2407,7 +2407,7 @@ output_function_profiler (file, labelno, name, savep)\n {\n   char label[256];\n   char dbi[256];\n-  const char *temp = (savep ? reg_names[2] : reg_names[10]);\n+  const char *const temp = (savep ? reg_names[2] : reg_names[10]);\n \n   /* Remember to update FUNCTION_PROFILER_LENGTH.  */\n "}, {"sha": "483cc23b8ae5ecd1acd904a599d079e7992cb2d0", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -9548,7 +9548,7 @@ mips_output_conditional_branch (insn,\n \t   would otherwise; that way we skip the annulled instruction\n \t   in the delay slot.  */\n \n-\tconst char *target\n+\tconst char *const target\n \t  = ((mips_branch_likely || length == 16) ? \".+16\" : \".+12\");\n \tchar *c;\n \n@@ -9625,7 +9625,7 @@ mips_output_conditional_branch (insn,\n \t   anything.  */\n \n \t/* The target of the reversed branch.  */\n-\tconst char *target\n+\tconst char *const target\n \t  = ((mips_branch_likely || length == 20) ? \".+20\" : \".+16\");\n \tconst char *at_register = mips_reg_names[ASSEMBLER_SCRATCH_REGNUM];\n \tconst char *gp_register = mips_reg_names[PIC_OFFSET_TABLE_REGNUM];"}, {"sha": "b6bd0daa4f852604905373d5c698e78de0e18f78", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -59,7 +59,7 @@ enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n   FRAME_POINTER_REG, STACK_POINTER_REG\n };\n \n-const char *const ns32k_out_reg_names[] = OUTPUT_REGISTER_NAMES;\n+static const char *const ns32k_out_reg_names[] = OUTPUT_REGISTER_NAMES;\n \n static rtx gen_indexed_expr PARAMS ((rtx, rtx, rtx));\n static const char *singlemove_string PARAMS ((rtx *));"}, {"sha": "00379204c034d7b9b0398fa9800c04aa3944a43a", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -1441,7 +1441,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address(FILE, ADDR)\n \n extern unsigned int ns32k_reg_class_contents[N_REG_CLASSES][1];\n-extern const char *const ns32k_out_reg_names[];\n extern enum reg_class regclass_map[];\t\t/* smallest class containing REGNO */\n \n /*"}, {"sha": "65366270f4b36b3468253ca4b6edd0bb3e3e5ea0", "filename": "gcc/config/pj/pj.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fpj%2Fpj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fpj%2Fpj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -400,7 +400,7 @@ pj_output_rval (op, mode, outer_op)\n     }\n   else if (tab && tab->handlers[mode].insn_code != CODE_FOR_nothing)\n     {\n-      const char *template =\n+      const char *const template =\n \t(const char *) insn_data[tab->handlers[mode].insn_code].output;\n       if (code == NEG)\n \tpj_printf (template, 0, XEXP (op, 0));"}, {"sha": "0fc044699d2db4a03d7170b93286ab6a7361f9b5", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -8616,7 +8616,7 @@ output_call (insn, call_dest, operand_number)\n \n #define GEN_LOCAL_LABEL_FOR_SYMBOL(BUF,SYMBOL,LENGTH,N)\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n-    const char *symbol_ = (SYMBOL);\t\t\t\t\\\n+    const char *const symbol_ = (SYMBOL);\t\t\t\\\n     char *buffer_ = (BUF);\t\t\t\t\t\\\n     if (symbol_[0] == '\"')\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\"}, {"sha": "27cd5b3af01211623786db1b6065dc1a18697329", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -6702,7 +6702,7 @@ sparc_flat_function_prologue (file, size)\n     {\n       unsigned int reg_offset = current_frame_info.reg_offset;\n       const char *const fp_str = reg_names[FRAME_POINTER_REGNUM];\n-      const char *const t1_str = \"%g1\";\n+      static const char *const t1_str = \"%g1\";\n \n       /* Things get a little tricky if local variables take up more than ~4096\n \t bytes and outgoing arguments take up more than ~4096 bytes.  When that\n@@ -6887,7 +6887,7 @@ sparc_flat_function_epilogue (file, size)\n       unsigned HOST_WIDE_INT size1;\n       const char *const sp_str = reg_names[STACK_POINTER_REGNUM];\n       const char *const fp_str = reg_names[FRAME_POINTER_REGNUM];\n-      const char *const t1_str = \"%g1\";\n+      static const char *const t1_str = \"%g1\";\n \n       /* In the reload sequence, we don't need to fill the load delay\n \t slots for most of the loads, also see if we can fill the final"}, {"sha": "ef48dc301cf2ab3b35662408784e0acc3d1bbff5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -1,3 +1,9 @@\n+2001-09-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c (warn_extern_redeclared_static, cp_make_fname_decl):\n+\tConst-ification.\n+\t* pt.c (tsubst_decl): Likewise.\n+\n 2001-09-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* decl2.c (lang_f_options): Const-ification."}, {"sha": "924427273d4e00756238312a0f43951e0057dd72", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -3028,9 +3028,9 @@ static void\n warn_extern_redeclared_static (newdecl, olddecl)\n      tree newdecl, olddecl;\n {\n-  static const char *explicit_extern_static_warning\n+  static const char *const explicit_extern_static_warning\n     = \"`%D' was declared `extern' and later `static'\";\n-  static const char *implicit_extern_static_warning\n+  static const char *const implicit_extern_static_warning\n     = \"`%D' was declared implicitly `extern' and later `static'\";\n \n   tree name;\n@@ -6574,7 +6574,7 @@ cp_make_fname_decl (id, type_dep)\n      tree id;\n      int type_dep;\n {\n-  const char *name = (type_dep && processing_template_decl\n+  const char *const name = (type_dep && processing_template_decl\n \t\t      ? NULL : fname_as_string (type_dep));\n   tree init = cp_fname_init (name);\n   tree decl = build_decl (VAR_DECL, id, TREE_TYPE (init));"}, {"sha": "05ce365aa20adef102c8fd053dfe04b06f6fb438", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -5992,7 +5992,7 @@ tsubst_decl (t, args, type)\n \t/* For __PRETTY_FUNCTION__ we have to adjust the initializer.  */\n \tif (DECL_PRETTY_FUNCTION_P (r))\n \t  {\n-\t    const char *name = (*decl_printable_name)\n+\t    const char *const name = (*decl_printable_name)\n \t      \t\t\t(current_function_decl, 2);\n \t    DECL_INITIAL (r) = cp_fname_init (name);\n \t    TREE_TYPE (r) = TREE_TYPE (DECL_INITIAL (r));"}, {"sha": "bfb6b0e8d5172ed937e9a02b5e3e7dd0d0a451f4", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -2566,7 +2566,7 @@ dbxout_parms (parms)\n \t       living on the stack.  DECL_RTL looks like\n \t       (MEM (MEM (PLUS (REG ...) (CONST_INT ...)))) or it\n \t       could look like (MEM (MEM (REG))).  */\n-\t    const char *decl_name = (DECL_NAME (parms)\n+\t    const char *const decl_name = (DECL_NAME (parms)\n \t\t\t\t     ? IDENTIFIER_POINTER (DECL_NAME (parms))\n \t\t\t\t     : \"(anon)\");\n            if (GET_CODE (XEXP (XEXP (DECL_RTL (parms), 0), 0)) == REG)"}, {"sha": "d0ad847ad84d2f870df4fc545528d1a4355ddeff", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -866,7 +866,7 @@ format_with_decl (buffer, decl)\n   \n   if (*p == '%')\t\t/* Print the name.  */\n     {\n-      const char *n = (DECL_NAME (decl)\n+      const char *const n = (DECL_NAME (decl)\n \t\t ? (*decl_printable_name) (decl, 2)\n \t\t : _(\"((anonymous))\"));\n       output_add_string (buffer, n);"}, {"sha": "ca8a736bc54af4961c7873f131b43a1fe433e209", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -6508,7 +6508,7 @@ static void\n output_ranges ()\n {\n   register unsigned i;\n-  const char *const start_fmt = \"Offset 0x%x\";\n+  static const char *const start_fmt = \"Offset 0x%x\";\n   const char *fmt = start_fmt;\n \n   for (i = 0; i < ranges_table_in_use; ++i)"}, {"sha": "d51d5757ff4244992e0a66c6dad3f9fd846809a7", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -1849,7 +1849,7 @@ fundamental_type_code (type)\n \t    && DECL_NAME (TYPE_NAME (type)) != 0\n \t    && TREE_CODE (DECL_NAME (TYPE_NAME (type))) == IDENTIFIER_NODE)\n \t  {\n-\t    const char *name =\n+\t    const char *const name =\n \t      IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \n \t    if (!strcmp (name, \"unsigned char\"))\n@@ -1908,7 +1908,7 @@ fundamental_type_code (type)\n \t    && DECL_NAME (TYPE_NAME (type)) != 0\n \t    && TREE_CODE (DECL_NAME (TYPE_NAME (type))) == IDENTIFIER_NODE)\n \t  {\n-\t    const char *name =\n+\t    const char *const name =\n \t      IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \n \t    /* Note that here we can run afowl of a serious bug in \"classic\""}, {"sha": "90423a7752f73f3fc6e7ba791a53ba291ef5ca4e", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -3409,7 +3409,7 @@ sjlj_size_of_call_site_table ()\n static void\n dw2_output_call_site_table ()\n {\n-  const char *function_start_lab\n+  const char *const function_start_lab\n     = IDENTIFIER_POINTER (current_function_func_begin_label);\n   int n = cfun->eh->call_site_data_used;\n   int i;"}, {"sha": "666001dff23be284c7ca96d033edc81e3d140f57", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -1,3 +1,9 @@\n+Thu Sep 13 10:33:27 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* bad.c (ffebad_finish): Const-ification and/or static-ization.\n+\t* intrin.c (ffeintrin_cmp_name_): Likewise.\n+\t* stc.c (ffestc_R904): Likewise.\n+\n Wed Sep 12 12:09:04 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* bld.c (ffebld_op_string_): Const-ification."}, {"sha": "0ecaf7484c56dc76e9a1baa842558a886b94007d", "filename": "gcc/f/bad.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Ff%2Fbad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Ff%2Fbad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fbad.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -349,7 +349,7 @@ void\n ffebad_finish ()\n {\n #define MAX_SPACES 132\n-  static const char *spaces\n+  static const char *const spaces\n   = \"...>\\\n \\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\\n \\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\040\\"}, {"sha": "31ebd96f9123368f385608aaf3503087f39c0e81", "filename": "gcc/f/intrin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Ff%2Fintrin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Ff%2Fintrin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fintrin.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -1165,9 +1165,9 @@ ffeintrin_check_any_ (ffebld arglist)\n static int\n ffeintrin_cmp_name_ (const void *name, const void *intrinsic)\n {\n-  const char *uc = ((const struct _ffeintrin_name_ *) intrinsic)->name_uc;\n-  const char *lc = ((const struct _ffeintrin_name_ *) intrinsic)->name_lc;\n-  const char *ic = ((const struct _ffeintrin_name_ *) intrinsic)->name_ic;\n+  const char *const uc = ((const struct _ffeintrin_name_ *) intrinsic)->name_uc;\n+  const char *const lc = ((const struct _ffeintrin_name_ *) intrinsic)->name_lc;\n+  const char *const ic = ((const struct _ffeintrin_name_ *) intrinsic)->name_ic;\n \n   return ffesrc_strcmp_2c (ffe_case_intrin (), name, uc, lc, ic);\n }"}, {"sha": "1f17766d9ac09c5ac155100e8686915d76cd65f0", "filename": "gcc/f/stc.c", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Ff%2Fstc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Ff%2Fstc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fstc.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -10203,38 +10203,33 @@ ffestc_R904 ()\n {\n   int i;\n   int expect_file;\n-  const char *const status_strs[]\n-  =\n+  static const char *const status_strs[] =\n   {\n     \"New\",\n     \"Old\",\n     \"Replace\",\n     \"Scratch\",\n     \"Unknown\"\n   };\n-  const char *const access_strs[]\n-  =\n+  static const char *const access_strs[] =\n   {\n     \"Append\",\n     \"Direct\",\n     \"Keyed\",\n     \"Sequential\"\n   };\n-  const char *const blank_strs[]\n-  =\n+  static const char *const blank_strs[] =\n   {\n     \"Null\",\n     \"Zero\"\n   };\n-  const char *const carriagecontrol_strs[]\n-  =\n+  static const char *const carriagecontrol_strs[] =\n   {\n     \"Fortran\",\n     \"List\",\n     \"None\"\n   };\n-  const char *const dispose_strs[]\n-  =\n+  static const char *const dispose_strs[] =\n   {\n     \"Delete\",\n     \"Keep\",\n@@ -10244,42 +10239,36 @@ ffestc_R904 ()\n     \"Submit\",\n     \"Submit/Delete\"\n   };\n-  const char *const form_strs[]\n-  =\n+  static const char *const form_strs[] =\n   {\n     \"Formatted\",\n     \"Unformatted\"\n   };\n-  const char *const organization_strs[]\n-  =\n+  static const char *const organization_strs[] =\n   {\n     \"Indexed\",\n     \"Relative\",\n     \"Sequential\"\n   };\n-  const char *const position_strs[]\n-  =\n+  static const char *const position_strs[] =\n   {\n     \"Append\",\n     \"AsIs\",\n     \"Rewind\"\n   };\n-  const char *const action_strs[]\n-  =\n+  static const char *const action_strs[] =\n   {\n     \"Read\",\n     \"ReadWrite\",\n     \"Write\"\n   };\n-  const char *const delim_strs[]\n-  =\n+  static const char *const delim_strs[] =\n   {\n     \"Apostrophe\",\n     \"None\",\n     \"Quote\"\n   };\n-  const char *const recordtype_strs[]\n-  =\n+  static const char *const recordtype_strs[] =\n   {\n     \"Fixed\",\n     \"Segmented\",\n@@ -10288,8 +10277,7 @@ ffestc_R904 ()\n     \"Stream_LF\",\n     \"Variable\"\n   };\n-  const char *const pad_strs[]\n-  =\n+  static const char *const pad_strs[] =\n   {\n     \"No\",\n     \"Yes\"\n@@ -10458,8 +10446,7 @@ ffestc_R904 ()\n void\n ffestc_R907 ()\n {\n-  const char *const status_strs[]\n-  =\n+  static const char *const status_strs[] =\n   {\n     \"Delete\",\n     \"Keep\","}, {"sha": "9b6c1e50ff448c7801d5564e9fd713d2dfec85a8", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -4580,7 +4580,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \n \t  case 'C':\n \t    {\n-\t      const char* spec \n+\t      const char *const spec\n \t\t= (input_file_compiler->cpp_spec \n \t\t   ? input_file_compiler->cpp_spec \n \t\t   : cpp_spec);"}, {"sha": "3907b20b05353c77046e755c710833a774fb4d98", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -56,7 +56,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    used for comparisons.  In that case, $c and $C are the lower-case and\n    upper-case forms of the comparison, respectively.  */\n \n-const char * const optabs[] =\n+static const char * const optabs[] =\n { \"extendtab[$B][$A][0] = CODE_FOR_$(extend$a$b2$)\",\n   \"extendtab[$B][$A][1] = CODE_FOR_$(zero_extend$a$b2$)\",\n   \"fixtab[$A][$B][0] = CODE_FOR_$(fix$F$a$I$b2$)\","}, {"sha": "95aafb3746d9556035e5fee5860c05da5db27090", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -1,3 +1,8 @@\n+2001-09-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* expr.c (expand_invoke): Const-ification.\n+\t* parse.y (patch_method_invocation): Likewise.\n+\n 2001-09-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gjavah.c (cxx_keywords): Const-ification."}, {"sha": "ff0a327075c51376b75d65832808bae9f63a1b98", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -1916,7 +1916,7 @@ expand_invoke (opcode, method_ref_index, nargs)\n   tree method_name = COMPONENT_REF_NAME (&current_jcf->cpool, method_ref_index);\n   tree self_type = get_class_constant\n     (current_jcf, COMPONENT_REF_CLASS_INDEX(&current_jcf->cpool, method_ref_index));\n-  const char *self_name\n+  const char *const self_name\n     = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (self_type)));\n   tree call, func, method, arg_list, method_type;\n   tree check = NULL_TREE;"}, {"sha": "ee528dc6586c085e1dd39f7ce12ca6fe7b863070", "filename": "gcc/java/parse.y", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -10308,15 +10308,15 @@ patch_method_invocation (patch, primary, where, from_super,\n       /* Calls to clone() on array types are permitted as a special-case. */\n       && !is_array_clone_call)\n     {\n-      const char *fct_name = IDENTIFIER_POINTER (DECL_NAME (list));\n-      const char *access =\n+      const char *const fct_name = IDENTIFIER_POINTER (DECL_NAME (list));\n+      const char *const access =\n \tjava_accstring_lookup (get_access_flags_from_decl (list));\n-      const char *klass =\n+      const char *const klass =\n \tIDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (DECL_CONTEXT (list))));\n-      const char *refklass =\n+      const char *const refklass =\n \tIDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (current_class)));\n-      const char *what = (DECL_CONSTRUCTOR_P (list)\n-\t\t\t  ? \"constructor\" : \"method\");\n+      const char *const what = (DECL_CONSTRUCTOR_P (list)\n+\t\t\t\t? \"constructor\" : \"method\");\n       /* FIXME: WFL yields the wrong message here but I don't know\n \t what else to use.  */\n       parse_error_context (wfl,\n@@ -14828,7 +14828,7 @@ array_constructor_check_entry (type, entry)\n   /* Check and report errors */\n   if (!new_value)\n     {\n-      const char *msg = (!valid_cast_to_p (type_value, type) ?\n+      const char *const msg = (!valid_cast_to_p (type_value, type) ?\n \t\t   \"Can't\" : \"Explicit cast needed to\");\n       if (!array_type_string)\n \tarray_type_string = xstrdup (lang_printable_name (type, 1));"}, {"sha": "1a2cd91dd274feee90da0e946256e208d86e3b54", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -4618,7 +4618,7 @@ synth_id_with_class_suffix (preamble, ctxt)\n   if (TREE_CODE (ctxt) == CLASS_IMPLEMENTATION_TYPE\n       || TREE_CODE (ctxt) == CLASS_INTERFACE_TYPE)\n     {\n-      const char *class_name\n+      const char *const class_name\n \t= IDENTIFIER_POINTER (CLASS_NAME (implementation_context));\n       string = (char *) alloca (strlen (preamble) + strlen (class_name) + 3);\n       sprintf (string, \"%s_%s\", preamble,\n@@ -4628,9 +4628,9 @@ synth_id_with_class_suffix (preamble, ctxt)\n \t   || TREE_CODE (ctxt) == CATEGORY_INTERFACE_TYPE)\n     {\n       /* We have a category.  */\n-      const char *class_name\n+      const char *const class_name\n \t= IDENTIFIER_POINTER (CLASS_NAME (implementation_context));\n-      const char *class_super_name\n+      const char *const class_super_name\n \t= IDENTIFIER_POINTER (CLASS_SUPER_NAME (implementation_context));\n       string = (char *) alloca (strlen (preamble)\n \t\t\t\t+ strlen (class_name)\n@@ -6252,7 +6252,7 @@ start_class (code, class_name, super_name, protocol_list)\n \t  && (super_name != CLASS_SUPER_NAME (implementation_template)))\n         {\n \t  tree previous_name = CLASS_SUPER_NAME (implementation_template);\n-          const char *name =\n+          const char *const name =\n \t    previous_name ? IDENTIFIER_POINTER (previous_name) : \"\";\n \t  error (\"conflicting super class name `%s'\",\n \t\t IDENTIFIER_POINTER (super_name));\n@@ -8046,7 +8046,7 @@ gen_declaration_1 (atype_or_adecl, buf)\n \t  || TREE_CODE (atype_or_adecl) == PARM_DECL\n \t  || TREE_CODE (atype_or_adecl) == FUNCTION_DECL)\n \t{\n-\t  const char *decl_name =\n+\t  const char *const decl_name =\n \t    (DECL_NAME (atype_or_adecl)\n \t     ? IDENTIFIER_POINTER (DECL_NAME (atype_or_adecl)) : \"\");\n \n@@ -8506,7 +8506,7 @@ handle_impent (impent)\n \n   if (TREE_CODE (impent->imp_context) == CLASS_IMPLEMENTATION_TYPE)\n     {\n-      const char *class_name =\n+      const char *const class_name =\n \tIDENTIFIER_POINTER (CLASS_NAME (impent->imp_context));\n \n       string = (char *) alloca (strlen (class_name) + 30);\n@@ -8516,9 +8516,9 @@ handle_impent (impent)\n     }\n   else if (TREE_CODE (impent->imp_context) == CATEGORY_IMPLEMENTATION_TYPE)\n     {\n-      const char *class_name =\n+      const char *const class_name =\n \tIDENTIFIER_POINTER (CLASS_NAME (impent->imp_context));\n-      const char *class_super_name =\n+      const char *const class_super_name =\n         IDENTIFIER_POINTER (CLASS_SUPER_NAME (impent->imp_context));\n \n       string = (char *) alloca (strlen (class_name)"}, {"sha": "a0c1d197fc66c5b15456be713c2c8baeb9c66695", "filename": "gcc/protoize.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -205,7 +205,7 @@ static const int hash_mask = (HASH_TABLE_SIZE - 1);\n #define LOCAL_INCLUDE_DIR \"/usr/local/include\"\n #endif\n \n-struct default_include { const char *const fname; \n+static const struct default_include { const char *const fname; \n \t\t\t const char *const component;\n \t\t\t int x1, x2; } include_defaults[]\n #ifdef INCLUDE_DEFAULTS\n@@ -743,7 +743,7 @@ static int\n in_system_include_dir (path)\n      const char *path;\n {\n-  struct default_include *p;\n+  const struct default_include *p;\n \n   if (! is_abspath (path))\n     abort ();\t\t/* Must be an absolutized filename.  */\n@@ -1195,7 +1195,7 @@ abspath (cwd, rel_filename)\n      const char *rel_filename;\n {\n   /* Setup the current working directory as needed.  */\n-  const char *cwd2 = (cwd) ? cwd : cwd_buffer;\n+  const char *const cwd2 = (cwd) ? cwd : cwd_buffer;\n   char *const abs_buffer\n     = (char *) alloca (strlen (cwd2) + strlen (rel_filename) + 2);\n   char *endp = abs_buffer;"}, {"sha": "75007ef4019809459c47dee58aacff400f94ea01", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -905,7 +905,7 @@ void\n visualize_stall_cycles (stalls)\n      int stalls;\n {\n-  const char *const prefix = \";;       \";\n+  static const char *const prefix = \";;       \";\n   const char *suffix = \"\\n\";\n   char *p;\n "}, {"sha": "2b7280e185c6c30f47e6806a6c049593a727ec46", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -516,7 +516,7 @@ plain_type_1 (type, level)\n \t    && DECL_NAME (TYPE_NAME (type)) != 0\n \t    && TREE_CODE (DECL_NAME (TYPE_NAME (type))) == IDENTIFIER_NODE)\n \t  {\n-\t    const char *name\n+\t    const char *const name\n \t      = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \n \t    if (!strcmp (name, \"char\"))\n@@ -1679,7 +1679,7 @@ sdbout_end_function (line)\n static void\n sdbout_end_epilogue ()\n {\n-  const char *name\n+  const char *const name\n     = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n \n #ifdef PUT_SDB_EPILOGUE_END"}, {"sha": "f00b596b270c7ab8a5b0c32f2e2716b9cdd1cf86", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83182544dbfc89d2d974431383d61039cac9b773/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=83182544dbfc89d2d974431383d61039cac9b773", "patch": "@@ -747,7 +747,7 @@ decode_reg_name (asmspec)\n \n #ifdef ADDITIONAL_REGISTER_NAMES\n       {\n-\tstatic struct { const char *const name; int number; } table[]\n+\tstatic const struct { const char *const name; const int number; } table[]\n \t  = ADDITIONAL_REGISTER_NAMES;\n \n \tfor (i = 0; i < (int) ARRAY_SIZE (table); i++)"}]}