{"sha": "9bf706aae20a891885780c9d419addd5d0bc510d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJmNzA2YWFlMjBhODkxODg1NzgwYzlkNDE5YWRkZDVkMGJjNTEwZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-06-16T07:49:54Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-06-16T07:49:54Z"}, "message": "d/dmd: Merge upstream dmd 974650488\n\nAdds static function VarDeclaration::create to the dmd C++ interface.\n\nReviewed-on: https://github.com/dlang/dmd/pull/10008\n\nFrom-SVN: r272349", "tree": {"sha": "91d75ed1137990fbe4764a7ef415759e4f18dccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d75ed1137990fbe4764a7ef415759e4f18dccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bf706aae20a891885780c9d419addd5d0bc510d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf706aae20a891885780c9d419addd5d0bc510d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bf706aae20a891885780c9d419addd5d0bc510d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bf706aae20a891885780c9d419addd5d0bc510d/comments", "author": null, "committer": null, "parents": [{"sha": "af1b88ee7b46234bd68593cfdf7ef3546024c635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af1b88ee7b46234bd68593cfdf7ef3546024c635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af1b88ee7b46234bd68593cfdf7ef3546024c635"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "03005e3b1ce9afe37b80e3015a70e968526771bc", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf706aae20a891885780c9d419addd5d0bc510d/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf706aae20a891885780c9d419addd5d0bc510d/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=9bf706aae20a891885780c9d419addd5d0bc510d", "patch": "@@ -1,4 +1,4 @@\n-c6887d9bbbe7b68e03ba3bccbf61432c1b369386\n+9746504883fc64f3dcec0cd4cacbb7a372d52158\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "2a054306347e60b3a16d367cc8170b643a90ff85", "filename": "gcc/d/dmd/declaration.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf706aae20a891885780c9d419addd5d0bc510d/gcc%2Fd%2Fdmd%2Fdeclaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf706aae20a891885780c9d419addd5d0bc510d/gcc%2Fd%2Fdmd%2Fdeclaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.c?ref=9bf706aae20a891885780c9d419addd5d0bc510d", "patch": "@@ -830,6 +830,11 @@ VarDeclaration::VarDeclaration(Loc loc, Type *type, Identifier *id, Initializer\n     this->sequenceNumber = ++nextSequenceNumber;\n }\n \n+VarDeclaration *VarDeclaration::create(Loc loc, Type *type, Identifier *id, Initializer *init)\n+{\n+    return new VarDeclaration(loc, type, id, init);\n+}\n+\n Dsymbol *VarDeclaration::syntaxCopy(Dsymbol *s)\n {\n     //printf(\"VarDeclaration::syntaxCopy(%s)\\n\", toChars());"}, {"sha": "e3444a70fd8484ff909ea79ea21bc28f090bf626", "filename": "gcc/d/dmd/declaration.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bf706aae20a891885780c9d419addd5d0bc510d/gcc%2Fd%2Fdmd%2Fdeclaration.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bf706aae20a891885780c9d419addd5d0bc510d/gcc%2Fd%2Fdmd%2Fdeclaration.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.h?ref=9bf706aae20a891885780c9d419addd5d0bc510d", "patch": "@@ -265,6 +265,7 @@ class VarDeclaration : public Declaration\n     IntRange *range;            // if !NULL, the variable is known to be within the range\n \n     VarDeclaration(Loc loc, Type *t, Identifier *id, Initializer *init);\n+    static VarDeclaration *create(Loc loc, Type *t, Identifier *id, Initializer *init);\n     Dsymbol *syntaxCopy(Dsymbol *);\n     void semantic(Scope *sc);\n     void setFieldOffset(AggregateDeclaration *ad, unsigned *poffset, bool isunion);"}]}