{"sha": "d3f5a1418b423ec8c12f05025997c4d5b6e417de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNmNWExNDE4YjQyM2VjOGMxMmYwNTAyNTk5N2M0ZDViNmU0MTdkZQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-21T13:19:46Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-21T17:50:45Z"}, "message": "rs6000: Write output to the builtins init file, part 2 of 3\n\n2021-07-21  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-gen-builtins.c (write_init_bif_table):\n\tImplement.", "tree": {"sha": "ef728f3ce38a28b7be134f41d60fc7016e2fa167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef728f3ce38a28b7be134f41d60fc7016e2fa167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3f5a1418b423ec8c12f05025997c4d5b6e417de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3f5a1418b423ec8c12f05025997c4d5b6e417de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3f5a1418b423ec8c12f05025997c4d5b6e417de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3f5a1418b423ec8c12f05025997c4d5b6e417de/comments", "author": null, "committer": null, "parents": [{"sha": "ef9af12d24108340f9eafa572a5c3aebfff6df88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9af12d24108340f9eafa572a5c3aebfff6df88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9af12d24108340f9eafa572a5c3aebfff6df88"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "da0d14ea3cafa4cd41b289c66e3a5d7f45c050dc", "filename": "gcc/config/rs6000/rs6000-gen-builtins.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3f5a1418b423ec8c12f05025997c4d5b6e417de/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3f5a1418b423ec8c12f05025997c4d5b6e417de/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.c?ref=d3f5a1418b423ec8c12f05025997c4d5b6e417de", "patch": "@@ -2250,6 +2250,87 @@ write_header_file (void)\n static void\n write_init_bif_table (void)\n {\n+  for (int i = 0; i <= curr_bif; i++)\n+    {\n+      fprintf (init_file,\n+\t       \"  rs6000_builtin_info_x[RS6000_BIF_%s].fntype\"\n+\t       \"\\n    = %s;\\n\",\n+\t       bifs[i].idname, bifs[i].fndecl);\n+\n+      /* Check whether we have a \"tf\" token in this string, representing\n+\t a float128_type_node.  It's possible that float128_type_node is\n+\t undefined (occurs for -maltivec -mno-vsx, for example), so we\n+\t must guard against that.  */\n+      int tf_found = strstr (bifs[i].fndecl, \"tf\") != NULL;\n+\n+      /* Similarly, look for decimal float tokens.  */\n+      int dfp_found = (strstr (bifs[i].fndecl, \"sd\") != NULL\n+\t\t       || strstr (bifs[i].fndecl, \"dd\") != NULL\n+\t\t       || strstr (bifs[i].fndecl, \"td\") != NULL);\n+\n+      fprintf (init_file,\n+\t       \"  if (new_builtins_are_live)\\n\");\n+      fprintf (init_file, \"    {\\n\");\n+\n+      if (tf_found)\n+\t{\n+\t  fprintf (init_file, \"      if (float128_type_node)\\n\");\n+\t  fprintf (init_file, \"        {\\n\");\n+\t}\n+      else if (dfp_found)\n+\t{\n+\t  fprintf (init_file, \"      if (dfloat64_type_node)\\n\");\n+\t  fprintf (init_file, \"        {\\n\");\n+\t}\n+\n+      fprintf (init_file,\n+\t       \"      rs6000_builtin_decls_x[(int)RS6000_BIF_%s] = t\\n\",\n+\t       bifs[i].idname);\n+      fprintf (init_file,\n+\t       \"        = add_builtin_function (\\\"%s\\\",\\n\",\n+\t       bifs[i].proto.bifname);\n+      fprintf (init_file,\n+\t       \"                                %s,\\n\",\n+\t       bifs[i].fndecl);\n+      fprintf (init_file,\n+\t       \"                                (int)RS6000_BIF_%s,\"\n+\t       \" BUILT_IN_MD,\\n\",\n+\t       bifs[i].idname);\n+      fprintf (init_file,\n+\t       \"                                NULL, NULL_TREE);\\n\");\n+      if (bifs[i].kind == FNK_CONST)\n+\t{\n+\t  fprintf (init_file, \"      TREE_READONLY (t) = 1;\\n\");\n+\t  fprintf (init_file, \"      TREE_NOTHROW (t) = 1;\\n\");\n+\t}\n+      else if (bifs[i].kind == FNK_PURE)\n+\t{\n+\t  fprintf (init_file, \"      DECL_PURE_P (t) = 1;\\n\");\n+\t  fprintf (init_file, \"      TREE_NOTHROW (t) = 1;\\n\");\n+\t}\n+      else if (bifs[i].kind == FNK_FPMATH)\n+\t{\n+\t  fprintf (init_file, \"      TREE_NOTHROW (t) = 1;\\n\");\n+\t  fprintf (init_file, \"      if (flag_rounding_math)\\n\");\n+\t  fprintf (init_file, \"        {\\n\");\n+\t  fprintf (init_file, \"          DECL_PURE_P (t) = 1;\\n\");\n+\t  fprintf (init_file, \"          DECL_IS_NOVOPS (t) = 1;\\n\");\n+\t  fprintf (init_file, \"        }\\n\");\n+\t  fprintf (init_file, \"      else\\n\");\n+\t  fprintf (init_file, \"        TREE_READONLY (t) = 1;\\n\");\n+\t}\n+\n+      if (tf_found || dfp_found)\n+\t{\n+\t  fprintf (init_file, \"        }\\n\");\n+\t  fprintf (init_file, \"      else\\n\");\n+\t  fprintf (init_file, \"        {\\n\");\n+\t  fprintf (init_file, \"          rs6000_builtin_decls_x\"\n+\t\t   \"[(int)RS6000_BIF_%s] = NULL_TREE;\\n\", bifs[i].idname);\n+\t  fprintf (init_file, \"        }\\n\");\n+\t}\n+      fprintf (init_file, \"    }\\n\\n\");\n+    }\n }\n \n /* Write code to initialize the overload table.  */"}]}