{"sha": "2ae577fdbd7e4f49e66feb0c225cee325bb1823e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFlNTc3ZmRiZDdlNGY0OWU2NmZlYjBjMjI1Y2VlMzI1YmIxODIzZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-02-14T16:18:29Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-02-14T16:18:29Z"}, "message": "re PR rtl-optimization/59535 (-Os code size regressions for Thumb1/Thumb2 with LRA)\n\n2014-02-14  Vladimir Makarov  <vmakarov@redhat.com>\n\t    Richard Earnshaw  <rearnsha@arm.com>\n\n\tPR rtl-optimization/59535\n\t* lra-constraints.c (process_alt_operands): Encourage alternative\n\twhen unassigned pseudo class is superset of the alternative class.\n\t(inherit_reload_reg): Don't inherit when optimizing for code size.\n\t* config/arm/arm.h (MODE_BASE_REG_CLASS): Add version for LRA\n\treturning CORE_REGS for anything but Thumb1 and BASE_REGS for\n\tmodes not less than 4 for Thumb1.\n\n\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\n\nFrom-SVN: r207787", "tree": {"sha": "4df19877f6be5d699d98f8fcd504677fd9ef0978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df19877f6be5d699d98f8fcd504677fd9ef0978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ae577fdbd7e4f49e66feb0c225cee325bb1823e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae577fdbd7e4f49e66feb0c225cee325bb1823e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ae577fdbd7e4f49e66feb0c225cee325bb1823e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ae577fdbd7e4f49e66feb0c225cee325bb1823e/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efdf3f4df5f08c2e90098452001bf4f65fb2c78e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdf3f4df5f08c2e90098452001bf4f65fb2c78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efdf3f4df5f08c2e90098452001bf4f65fb2c78e"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "eef35b4b19450857e4ea2df6c3a233baf35707a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae577fdbd7e4f49e66feb0c225cee325bb1823e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae577fdbd7e4f49e66feb0c225cee325bb1823e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ae577fdbd7e4f49e66feb0c225cee325bb1823e", "patch": "@@ -1,3 +1,14 @@\n+2014-02-14  Vladimir Makarov  <vmakarov@redhat.com>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR rtl-optimization/59535\n+\t* lra-constraints.c (process_alt_operands): Encourage alternative\n+\twhen unassigned pseudo class is superset of the alternative class.\n+\t(inherit_reload_reg): Don't inherit when optimizing for code size.\n+\t* config/arm/arm.h (MODE_BASE_REG_CLASS): Add version for LRA\n+\treturning CORE_REGS for anything but Thumb1 and BASE_REGS for\n+\tmodes not less than 4 for Thumb1.\n+\n 2014-02-14  Kyle McMartin  <kyle@redhat.com>\n \n \tPR pch/60010"}, {"sha": "d9d3547458e96e02663ab0acc6759f5a788e7b65", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae577fdbd7e4f49e66feb0c225cee325bb1823e/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae577fdbd7e4f49e66feb0c225cee325bb1823e/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=2ae577fdbd7e4f49e66feb0c225cee325bb1823e", "patch": "@@ -1272,8 +1272,13 @@ enum reg_class\n    when addressing quantities in QI or HI mode; if we don't know the\n    mode, then we must be conservative.  */\n #define MODE_BASE_REG_CLASS(MODE)\t\t\t\t\t\\\n-    (TARGET_ARM || (TARGET_THUMB2 && !optimize_size) ? CORE_REGS :      \\\n-     (((MODE) == SImode) ? BASE_REGS : LO_REGS))\n+  (arm_lra_flag\t\t\t\t\t\t\t\t\\\n+   ? (TARGET_32BIT ? CORE_REGS\t\t\t\t\t\t\\\n+      : GET_MODE_SIZE (MODE) >= 4 ? BASE_REGS\t\t\t\t\\\n+      : LO_REGS)\t\t\t\t\t\t\t\\\n+   : ((TARGET_ARM || (TARGET_THUMB2 && !optimize_size)) ? CORE_REGS\t\\\n+      : ((MODE) == SImode) ? BASE_REGS\t\t\t\t\t\\\n+      : LO_REGS))\n \n /* For Thumb we can not support SP+reg addressing, so we return LO_REGS\n    instead of BASE_REGS.  */"}, {"sha": "d3831380feed94c93c3dc7532208a8835b6a551e", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ae577fdbd7e4f49e66feb0c225cee325bb1823e/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ae577fdbd7e4f49e66feb0c225cee325bb1823e/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=2ae577fdbd7e4f49e66feb0c225cee325bb1823e", "patch": "@@ -2112,6 +2112,21 @@ process_alt_operands (int only_alternative)\n \t\t  goto fail;\n \t\t}\n \n+\t      /* If not assigned pseudo has a class which a subset of\n+\t\t required reg class, it is a less costly alternative\n+\t\t as the pseudo still can get a hard reg of necessary\n+\t\t class.  */\n+\t      if (! no_regs_p && REG_P (op) && hard_regno[nop] < 0\n+\t\t  && (cl = get_reg_class (REGNO (op))) != NO_REGS\n+\t\t  && ira_class_subset_p[this_alternative][cl])\n+\t\t{\n+\t\t  if (lra_dump_file != NULL)\n+\t\t    fprintf\n+\t\t      (lra_dump_file,\n+\t\t       \"            %d Super set class reg: reject-=3\\n\", nop);\n+\t\t  reject -= 3;\n+\t\t}\n+\n \t      this_alternative_offmemok = offmemok;\n \t      if (this_costly_alternative != NO_REGS)\n \t\t{\n@@ -4391,6 +4406,9 @@ static bool\n inherit_reload_reg (bool def_p, int original_regno,\n \t\t    enum reg_class cl, rtx insn, rtx next_usage_insns)\n {\n+  if (optimize_function_for_size_p (cfun))\n+    return false;\n+\n   enum reg_class rclass = lra_get_allocno_class (original_regno);\n   rtx original_reg = regno_reg_rtx[original_regno];\n   rtx new_reg, new_insns, usage_insn;"}]}