{"sha": "dc28490d05f5ef25c5ff24ef946f48f402a20be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMyODQ5MGQwNWY1ZWYyNWM1ZmYyNGVmOTQ2ZjQ4ZjQwMmEyMGJlOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-09-04T12:27:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-09-04T12:27:21Z"}, "message": "re PR c++/14032 (Specialization of inner template using outer template argument doesn't work)\n\n        PR c++/14032\n        * pt.c (most_specialized_class): Substitute outer template\n        arguments into the arguments of a member template partial\n        specialization.\n        (strip_innermost_template_args): New fn.\n\nFrom-SVN: r128076", "tree": {"sha": "4ac72e6f1563682b5e0b76abbdf4a562498a349b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ac72e6f1563682b5e0b76abbdf4a562498a349b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc28490d05f5ef25c5ff24ef946f48f402a20be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc28490d05f5ef25c5ff24ef946f48f402a20be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc28490d05f5ef25c5ff24ef946f48f402a20be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc28490d05f5ef25c5ff24ef946f48f402a20be8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1a826110720eda37c73f829daa4ee243ee953f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a826110720eda37c73f829daa4ee243ee953f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a826110720eda37c73f829daa4ee243ee953f5"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "169cac234c140c5557c1431a545f820a90193959", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc28490d05f5ef25c5ff24ef946f48f402a20be8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc28490d05f5ef25c5ff24ef946f48f402a20be8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dc28490d05f5ef25c5ff24ef946f48f402a20be8", "patch": "@@ -1,3 +1,11 @@\n+2007-09-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/14032\n+\t* pt.c (most_specialized_class): Substitute outer template\n+\targuments into the arguments of a member template partial\n+\tspecialization.\n+\t(strip_innermost_template_args): New fn.\n+\n 2007-09-03  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* Make-lang.in (g++spec.o): Remove SHLIB_MULTILIB."}, {"sha": "aafb964f3c34813ea4cbf512b2624421d80bc986", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc28490d05f5ef25c5ff24ef946f48f402a20be8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc28490d05f5ef25c5ff24ef946f48f402a20be8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dc28490d05f5ef25c5ff24ef946f48f402a20be8", "patch": "@@ -519,6 +519,37 @@ get_innermost_template_args (tree args, int n)\n   return new_args;\n }\n \n+/* The inverse of get_innermost_template_args: Return all but the innermost\n+   EXTRA_LEVELS levels of template arguments from the ARGS.  */\n+\n+static tree\n+strip_innermost_template_args (tree args, int extra_levels)\n+{\n+  tree new_args;\n+  int n = TMPL_ARGS_DEPTH (args) - extra_levels;\n+  int i;\n+\n+  gcc_assert (n >= 0);\n+\n+  /* If N is 1, just return the outermost set of template arguments.  */\n+  if (n == 1)\n+    return TMPL_ARGS_LEVEL (args, 1);\n+\n+  /* If we're not removing anything, just return the arguments we were\n+     given.  */\n+  gcc_assert (extra_levels >= 0);\n+  if (extra_levels == 0)\n+    return args;\n+\n+  /* Make a new set of arguments, not containing the inner arguments.  */\n+  new_args = make_tree_vec (n);\n+  for (i = 1; i <= n; ++i)\n+    SET_TMPL_ARGS_LEVEL (new_args, i,\n+\t\t\t TMPL_ARGS_LEVEL (args, i));\n+\n+  return new_args;\n+}\n+\n /* We've got a template header coming up; push to a new level for storing\n    the parms.  */\n \n@@ -13591,20 +13622,53 @@ most_specialized_class (tree type, tree tmpl)\n   int fate;\n   bool ambiguous_p;\n   tree args;\n+  tree outer_args = NULL_TREE;\n \n   tmpl = most_general_template (tmpl);\n   args = CLASSTYPE_TI_ARGS (type);\n+\n+  /* For determining which partial specialization to use, only the\n+     innermost args are interesting.  */\n+  if (TMPL_ARGS_HAVE_MULTIPLE_LEVELS (args))\n+    {\n+      outer_args = strip_innermost_template_args (args, 1);\n+      args = INNERMOST_TEMPLATE_ARGS (args);\n+    }\n+\n   for (t = DECL_TEMPLATE_SPECIALIZATIONS (tmpl); t; t = TREE_CHAIN (t))\n     {\n       tree partial_spec_args;\n       tree spec_args;\n+      tree parms = TREE_VALUE (t);\n \n       partial_spec_args = CLASSTYPE_TI_ARGS (TREE_TYPE (t));\n-      spec_args = get_class_bindings (TREE_VALUE (t),\n+      if (outer_args)\n+\t{\n+\t  int i;\n+\n+\t  /* Discard the outer levels of args, and then substitute in the\n+\t     template args from the enclosing class.  */\n+\t  partial_spec_args = INNERMOST_TEMPLATE_ARGS (partial_spec_args);\n+\t  partial_spec_args = tsubst_template_args\n+\t    (partial_spec_args, outer_args, tf_none, NULL_TREE);\n+\n+\t  /* PARMS already refers to just the innermost parms, but the\n+\t     template parms in partial_spec_args had their levels lowered\n+\t     by tsubst, so we need to do the same for the parm list.  We\n+\t     can't just tsubst the TREE_VEC itself, as tsubst wants to\n+\t     treat a TREE_VEC as an argument vector.  */\n+\t  parms = copy_node (parms);\n+\t  for (i = TREE_VEC_LENGTH (parms) - 1; i >= 0; --i)\n+\t    TREE_VEC_ELT (parms, i) =\n+\t      tsubst (TREE_VEC_ELT (parms, i), outer_args, tf_none, NULL_TREE);\n+\t}\n+      spec_args = get_class_bindings (parms,\n \t\t\t\t      partial_spec_args,\n \t\t\t\t      args);\n       if (spec_args)\n \t{\n+\t  if (outer_args)\n+\t    spec_args = add_to_template_args (outer_args, spec_args);\n \t  list = tree_cons (spec_args, TREE_VALUE (t), list);\n \t  TREE_TYPE (list) = TREE_TYPE (t);\n \t}"}]}