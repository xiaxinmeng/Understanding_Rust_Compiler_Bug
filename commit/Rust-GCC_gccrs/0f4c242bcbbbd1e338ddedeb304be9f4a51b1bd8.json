{"sha": "0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY0YzI0MmJjYmJiZDFlMzM4ZGRlZGViMzA0YmU5ZjRhNTFiMWJkOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-02T15:18:28Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-02T15:18:28Z"}, "message": "arm.md, [...]: Fix indentation.\n\n\t* config/arm/arm.md, config/c4x/c4x.md, config/cris/cris.md,\n\tconfig/h8300/h8300.c, config/ip2k/ip2k.md,\n\tconfig/iq2000/iq2000.c, config/mips/mips.c,\n\tconfig/rs6000/rs6000.c, config/rs6000/rs6000.md,\n\tconfig/sh/sh.c, config/sh/sh.md, config/stormy16/stormy16.c,\n\tconfig/v850/v850.md: Fix indentation.\n\nFrom-SVN: r77116", "tree": {"sha": "94bcf5a7164cccf3b8b52c39a9396f8486688f88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94bcf5a7164cccf3b8b52c39a9396f8486688f88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/comments", "author": null, "committer": null, "parents": [{"sha": "a4e8e73a3a91a9873b35cdc9469c723c3f9dfdf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e8e73a3a91a9873b35cdc9469c723c3f9dfdf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e8e73a3a91a9873b35cdc9469c723c3f9dfdf4"}], "stats": {"total": 140, "additions": 76, "deletions": 64}, "files": [{"sha": "9301e5ed8c0e69f52bc132515470e4bf7f623885", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -1,3 +1,12 @@\n+2004-02-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arm/arm.md, config/c4x/c4x.md, config/cris/cris.md,\n+\tconfig/h8300/h8300.c, config/ip2k/ip2k.md,\n+\tconfig/iq2000/iq2000.c, config/mips/mips.c,\n+\tconfig/rs6000/rs6000.c, config/rs6000/rs6000.md,\n+\tconfig/sh/sh.c, config/sh/sh.md, config/stormy16/stormy16.c,\n+\tconfig/v850/v850.md: Fix indentation.\n+\n 2004-02-02  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.c (function_arg_slotno): Align TImode"}, {"sha": "d05c69806593ae0596a1a0255fd8bfe4e1dea3dd", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -2491,8 +2491,8 @@\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_ARM\"\n   \"*\n-  operands[3] = gen_rtx_fmt_ee (minmax_code (operands[3]), SImode, operands[1],\n-\t\t\t operands[2]);\n+  operands[3] = gen_rtx_fmt_ee (minmax_code (operands[3]), SImode,\n+\t\t\t\toperands[1], operands[2]);\n   output_asm_insn (\\\"cmp\\\\t%1, %2\\\", operands);\n   output_asm_insn (\\\"str%d3\\\\t%1, %0\\\", operands);\n   output_asm_insn (\\\"str%D3\\\\t%2, %0\\\", operands);\n@@ -2521,8 +2521,8 @@\n   {\n     enum rtx_code code = GET_CODE (operands[4]);\n \n-    operands[5] = gen_rtx_fmt_ee (minmax_code (operands[5]), SImode, operands[2],\n-\t\t\t   operands[3]);\n+    operands[5] = gen_rtx_fmt_ee (minmax_code (operands[5]), SImode,\n+\t\t\t\t  operands[2], operands[3]);\n     output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n     output_asm_insn (\\\"%i4%d5\\\\t%0, %1, %2\\\", operands);\n     if (which_alternative != 0 || operands[3] != const0_rtx"}, {"sha": "0999adca4060fb02ed57f43992a938e8340f8747", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -4248,7 +4248,7 @@\n     emit_insn (gen_rtx_SET (QImode, operands[0],\n                             gen_rtx_IF_THEN_ELSE (QImode,\n                                  gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx),\n-                                          operands[2], operands[3])));\n+\t\t\t\t\t\t operands[2], operands[3])));\n     DONE;}\")\n                       \n (define_insn \"*ldf_conditional\"\n@@ -4292,7 +4292,7 @@\n     emit_insn (gen_rtx_SET (QFmode, operands[0],\n                             gen_rtx_IF_THEN_ELSE (QFmode,\n                                  gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx),\n-                                          operands[2], operands[3])));\n+\t\t\t\t\t\t operands[2], operands[3])));\n     DONE;}\")\n \n (define_insn \"*ldhf_conditional\"\n@@ -4335,7 +4335,7 @@\n     emit_insn (gen_rtx_SET (HFmode, operands[0],\n                             gen_rtx_IF_THEN_ELSE (HFmode,\n                                  gen_rtx_fmt_ee (code, VOIDmode, ccreg, const0_rtx),\n-                                          operands[2], operands[3])));\n+\t\t\t\t\t\t operands[2], operands[3])));\n     DONE;}\")\n \n (define_expand \"seq\""}, {"sha": "ea41aaf539efc40aa11ca36e69e4a9b10da3f962", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -4546,8 +4546,8 @@\n \t\t\t       (match_dup 4)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 1) (match_dup 8)]))]\n   \"operands[8] = gen_rtx_fmt_e (GET_CODE (operands[7]), GET_MODE (operands[7]),\n-\t\t\t  replace_equiv_address (XEXP (operands[7], 0),\n-\t\t\t\t\t\t operands[5]));\")\n+\t\t\t\treplace_equiv_address (XEXP (operands[7], 0),\n+\t\t\t\t\t\t       operands[5]));\")\n \n ;; op(s|u).S1 [rx=rx+i],ry\n \n@@ -4571,8 +4571,8 @@\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 5 [(match_dup 1) (match_dup 7)]))]\n   \"operands[7] = gen_rtx_fmt_e (GET_CODE (operands[6]), GET_MODE (operands[6]),\n-\t\t\t  replace_equiv_address (XEXP (operands[6], 0),\n-\t\t\t\t\t\t operands[4]));\")\n+\t\t\t\treplace_equiv_address (XEXP (operands[6], 0),\n+\t\t\t\t\t\t       operands[4]));\")\n \n ;; op(s|u).S1 [rx=rx+rz.S2],ry (swapped, plus or bound)\n \n@@ -4598,8 +4598,8 @@\n \t\t\t       (match_dup 4)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 8) (match_dup 1)]))]\n   \"operands[8] = gen_rtx_fmt_e (GET_CODE (operands[6]), GET_MODE (operands[6]),\n-\t\t\t  replace_equiv_address (XEXP (operands[6], 0),\n-\t\t\t\t\t\t operands[5]));\")\n+\t\t\t\treplace_equiv_address (XEXP (operands[6], 0),\n+\t\t\t\t\t\t       operands[5]));\")\n \n ;; op(s|u).S1 [rx=rx+i],ry (swapped, plus or bound)\n \n@@ -4622,8 +4622,8 @@\n   [(set (match_dup 4) (plus:SI (match_dup 2) (match_dup 3)))\n    (set (match_dup 0) (match_op_dup 6 [(match_dup 7) (match_dup 1)]))]\n   \"operands[7] = gen_rtx_fmt_e (GET_CODE (operands[5]), GET_MODE (operands[5]),\n-\t\t\t  replace_equiv_address (XEXP (operands[5], 0),\n-\t\t\t\t\t\t operands[4]));\")\n+\t\t\t\treplace_equiv_address (XEXP (operands[5], 0),\n+\t\t\t\t\t\t       operands[4]));\")\n \f\n ;; Splits for addressing prefixes that have no side-effects, so we can\n ;; fill a delay slot.  Never split if we lose something, though."}, {"sha": "1dc342681c744ee7bfc0a3104ac211612ae79aae", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -2733,8 +2733,8 @@ expand_a_shift (enum machine_mode mode, int code, rtx operands[])\n \t     (VOIDmode,\n \t      gen_rtvec (2,\n \t\t\t gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t\t      gen_rtx_fmt_ee (code, mode, operands[0],\n-\t\t\t\t\t       operands[2])),\n+\t\t\t\t      gen_rtx_fmt_ee (code, mode,\n+\t\t\t\t\t\t      operands[0], operands[2])),\n \t\t\t gen_rtx_CLOBBER (VOIDmode,\n \t\t\t\t\t  gen_rtx_SCRATCH (QImode)))));\n }\n@@ -4101,7 +4101,8 @@ fix_bit_operand (rtx *operands, int what, enum rtx_code type)\n   {\n     rtx res = gen_reg_rtx (QImode);\n     emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t    gen_rtx_fmt_ee (type, QImode, operands[1], operands[2])));\n+\t\t\t    gen_rtx_fmt_ee (type, QImode,\n+\t\t\t\t\t    operands[1], operands[2])));\n     emit_insn (gen_rtx_SET (VOIDmode, operands[0], res));\n   }\n   return 1;"}, {"sha": "4e592e0fe1cbd7a08bc6b1beab7ce07becd20611", "filename": "gcc/config/ip2k/ip2k.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fip2k%2Fip2k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fip2k%2Fip2k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.md?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -4848,8 +4848,8 @@\n \t\t      (pc)))]\n   \"{\n     operands[2] = gen_rtx_fmt_ee (reverse_condition (GET_CODE (operands[1])),\n-\t \t\t   GET_MODE (operands[1]),\n-\t\t\t   cc0_rtx, const0_rtx);\n+\t\t\t\t  GET_MODE (operands[1]),\n+\t\t\t\t  cc0_rtx, const0_rtx);\n    }\")\n \n ;; This is a bit test and jump sequence."}, {"sha": "4c014f352503fc8ee62608f22f77fdac398611f3", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -1243,7 +1243,7 @@ gen_conditional_branch (rtx operands[], enum rtx_code test_code)\n       /* For cmp0 != cmp1, build cmp0 == cmp1, and test for result == 0.  */\n       emit_insn (gen_rtx_SET (VOIDmode, reg,\n \t\t\t      gen_rtx_fmt_ee (test_code == NE ? EQ : test_code,\n-\t\t\t\t       CCmode, cmp0, cmp1)));\n+\t\t\t\t\t      CCmode, cmp0, cmp1)));\n \n       test_code = test_code == NE ? EQ : NE;\n       mode = CCmode;\n@@ -1253,7 +1253,8 @@ gen_conditional_branch (rtx operands[], enum rtx_code test_code)\n       break;\n \n     default:\n-      abort_with_insn (gen_rtx_fmt_ee (test_code, VOIDmode, cmp0, cmp1), \"bad test\");\n+      abort_with_insn (gen_rtx_fmt_ee (test_code, VOIDmode, cmp0, cmp1),\n+\t\t       \"bad test\");\n     }\n \n   /* Generate the branch.  */\n@@ -1268,8 +1269,9 @@ gen_conditional_branch (rtx operands[], enum rtx_code test_code)\n \n   emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n-\t\t\t\t\t\t     gen_rtx_fmt_ee (test_code, mode,\n-\t\t\t\t\t\t\t      cmp0, cmp1),\n+\t\t\t\t\t\t     gen_rtx_fmt_ee (test_code,\n+\t\t\t\t\t\t\t\t     mode,\n+\t\t\t\t\t\t\t\t     cmp0, cmp1),\n \t\t\t\t\t\t     label1, label2)));\n }\n \f"}, {"sha": "44ed4f898b482b1a9efbea6b738e8ea947dad237", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -3149,8 +3149,9 @@ gen_conditional_branch (rtx *operands, enum rtx_code test_code)\n \n   emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n-\t\t\t\t\t\t     gen_rtx_fmt_ee (test_code, mode,\n-\t\t\t\t\t\t\t      cmp0, cmp1),\n+\t\t\t\t\t\t     gen_rtx_fmt_ee (test_code,\n+\t\t\t\t\t\t\t\t     mode,\n+\t\t\t\t\t\t\t\t     cmp0, cmp1),\n \t\t\t\t\t\t     label1, label2)));\n }\n \n@@ -3235,8 +3236,8 @@ gen_conditional_move (rtx *operands)\n   emit_insn (gen_rtx_SET (op_mode, operands[0],\n \t\t\t  gen_rtx_IF_THEN_ELSE (op_mode,\n \t\t\t\t\t\tgen_rtx_fmt_ee (move_code, VOIDmode,\n-\t\t\t\t\t\t\t cmp_reg,\n-\t\t\t\t\t\t\t CONST0_RTX (SImode)),\n+\t\t\t\t\t\t\t\tcmp_reg,\n+\t\t\t\t\t\t\t\tCONST0_RTX (SImode)),\n \t\t\t\t\t\toperands[2], operands[3])));\n }\n \n@@ -3275,7 +3276,8 @@ mips_gen_conditional_trap (rtx *operands)\n     op1 = force_reg (mode, op1);\n \n   emit_insn (gen_rtx_TRAP_IF (VOIDmode,\n-\t\t\t      gen_rtx_fmt_ee (cmp_code, GET_MODE (operands[0]), op0, op1),\n+\t\t\t      gen_rtx_fmt_ee (cmp_code, GET_MODE (operands[0]),\n+\t\t\t\t\t      op0, op1),\n \t\t\t      operands[1]));\n }\n \f"}, {"sha": "a96ec6f98295c48b3bbae19884dfa00414e13906", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -9705,7 +9705,7 @@ rs6000_emit_sCOND (enum rtx_code code, rtx result)\n       cc_mode = GET_MODE (XEXP (condition_rtx, 0));\n \n       rev_cond_rtx = gen_rtx_fmt_ee (rs6000_reverse_condition (cc_mode, cond_code),\n-\t\t\t      SImode, XEXP (condition_rtx, 0), const0_rtx);\n+\t\t\t\t     SImode, XEXP (condition_rtx, 0), const0_rtx);\n       not_op = gen_rtx_COMPARE (CCEQmode, rev_cond_rtx, const0_rtx);\n       emit_insn (gen_rtx_SET (VOIDmode, not_result, not_op));\n       condition_rtx = gen_rtx_EQ (VOIDmode, not_result, const0_rtx);"}, {"sha": "17f942bd14062fc65e87426e9e001198fa894515", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -2584,10 +2584,10 @@\n   rtx i;\n   i = GEN_INT (INTVAL (operands[2]) & (~ (HOST_WIDE_INT) 0xffff));\n   operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SImode,\n-\t\t\t operands[1], i);\n+\t\t\t\toperands[1], i);\n   i = GEN_INT (INTVAL (operands[2]) & 0xffff);\n   operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SImode,\n-\t\t\t operands[0], i);\n+\t\t\t\toperands[0], i);\n }\")\n \n (define_insn \"*boolcsi3_internal1\"\n@@ -7364,9 +7364,9 @@\n       i4 = GEN_INT (INTVAL (operands[2]) & 0xffff);\n     }\n   operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[3]), DImode,\n-\t\t\t operands[1], i3);\n+\t\t\t\toperands[1], i3);\n   operands[5] = gen_rtx_fmt_ee (GET_CODE (operands[3]), DImode,\n-\t\t\t operands[0], i4);\n+\t\t\t\toperands[0], i4);\n }\")\n \n (define_insn \"*boolcdi3_internal1\"\n@@ -13686,23 +13686,21 @@\n \n   if (! positive_1)\n     operands[1] = gen_rtx_fmt_ee (rs6000_reverse_condition (GET_MODE (operands[2]),\n-\t\t\t\t\t\t     GET_CODE (operands[1])),\n-\t\t\t   SImode,\n-\t\t\t   operands[2], const0_rtx);\n+\t\t\t\t\t\t\t    GET_CODE (operands[1])),\n+\t\t\t\t  SImode,\n+\t\t\t\t  operands[2], const0_rtx);\n   else if (GET_MODE (operands[1]) != SImode)\n-    operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n-\t\t\t   SImode,\n-\t\t\t   operands[2], const0_rtx);\n+    operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]), SImode,\n+\t\t\t\t  operands[2], const0_rtx);\n \n   if (! positive_2)\n     operands[3] = gen_rtx_fmt_ee (rs6000_reverse_condition (GET_MODE (operands[4]),\n-\t\t\t\t\t\t     GET_CODE (operands[3])),\n-\t\t\t   SImode,\n-\t\t\t   operands[4], const0_rtx);\n+\t\t\t\t\t\t\t    GET_CODE (operands[3])),\n+\t\t\t\t  SImode,\n+\t\t\t\t  operands[4], const0_rtx);\n   else if (GET_MODE (operands[3]) != SImode)\n-    operands[3] = gen_rtx_fmt_ee (GET_CODE (operands[3]),\n-\t\t\t   SImode,\n-\t\t\t   operands[4], const0_rtx);\n+    operands[3] = gen_rtx_fmt_ee (GET_CODE (operands[3]), SImode,\n+\t\t\t\t  operands[4], const0_rtx);\n \n   if (positive_1 == positive_2)\n     {\n@@ -14207,8 +14205,8 @@\n \t\t\t   (match_dup 5)\n \t\t\t   (match_dup 6)))]\n   \"\n-{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n-\t\t\t const0_rtx); }\")\n+{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode,\n+\t\t\t\toperands[3], const0_rtx); }\")\n \n (define_split\n   [(set (pc)\n@@ -14236,8 +14234,8 @@\n \t\t\t   (match_dup 5)\n \t\t\t   (match_dup 6)))]\n   \"\n-{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n-\t\t\t const0_rtx); }\")\n+{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode,\n+\t\t\t\toperands[3], const0_rtx); }\")\n (define_split\n   [(set (pc)\n \t(if_then_else (match_operator 2 \"comparison_operator\"\n@@ -14262,8 +14260,8 @@\n \t\t\t   (match_dup 5)\n \t\t\t   (match_dup 6)))]\n   \"\n-{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n-\t\t\t const0_rtx); }\")\n+{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode,\n+\t\t\t\toperands[3], const0_rtx); }\")\n \n (define_split\n   [(set (pc)\n@@ -14291,8 +14289,8 @@\n \t\t\t   (match_dup 5)\n \t\t\t   (match_dup 6)))]\n   \"\n-{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode, operands[3],\n-\t\t\t const0_rtx); }\")\n+{ operands[7] = gen_rtx_fmt_ee (GET_CODE (operands[2]), VOIDmode,\n+\t\t\t\toperands[3], const0_rtx); }\")\n \f\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]"}, {"sha": "a323680260980cd5f33c5d187fb0aa26c2cc26fa", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -958,13 +958,13 @@ prepare_scc_operands (enum rtx_code code)\n     (mode == SFmode ? emit_sf_insn : emit_df_insn)\n      (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n \t\tgen_rtx_SET (VOIDmode, t_reg,\n-\t\t\t gen_rtx_fmt_ee (code, SImode,\n-\t\t\t\t  sh_compare_op0, sh_compare_op1)),\n+\t\t\t     gen_rtx_fmt_ee (code, SImode,\n+\t\t\t\t\t     sh_compare_op0, sh_compare_op1)),\n \t\tgen_rtx_USE (VOIDmode, get_fpscr_rtx ()))));\n   else\n     emit_insn (gen_rtx_SET (VOIDmode, t_reg,\n-\t\t\tgen_rtx_fmt_ee (code, SImode, sh_compare_op0,\n-\t\t\t\t sh_compare_op1)));\n+\t\t\t    gen_rtx_fmt_ee (code, SImode,\n+\t\t\t\t\t    sh_compare_op0, sh_compare_op1)));\n \n   return t_reg;\n }\n@@ -997,8 +997,8 @@ from_compare (rtx *operands, int code)\n   else\n     insn = gen_rtx_SET (VOIDmode,\n \t\t\tgen_rtx_REG (SImode, T_REG),\n-\t\t\tgen_rtx_fmt_ee (code, SImode, sh_compare_op0,\n-\t\t\t\t sh_compare_op1));\n+\t\t\tgen_rtx_fmt_ee (code, SImode,\n+\t\t\t\t\tsh_compare_op0, sh_compare_op1));\n   if (TARGET_SH4 && GET_MODE_CLASS (mode) == MODE_FLOAT)\n     {\n       insn = gen_rtx_PARALLEL (VOIDmode,"}, {"sha": "bbfc1a6cc710b38c7c38cbaa5f7f2bb2287918c2", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -899,7 +899,7 @@\n       && GET_MODE (sh_compare_op0) == DImode\n       && sh_compare_op1 == const0_rtx)\n     operands[1] = gen_rtx_fmt_ee (GET_CODE (operands[1]), VOIDmode,\n-\t\t\t   sh_compare_op0, sh_compare_op1);\n+\t\t\t\t  sh_compare_op0, sh_compare_op1);\n   else\n     {\n       rtx tmp;"}, {"sha": "b1a5b1129fbc49e98a1dcfd3c1e48e3cead6c8ce", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -1856,7 +1856,7 @@ xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n \t    continue;\n \t  \n \t  insn = gen_rtx_SET (VOIDmode, w_dest, gen_rtx_fmt_ee (code, mode,\n-\t\t\t\t\t\t\t w_src0, w_src1));\n+\t\t\t\t\t\t\t\tw_src0, w_src1));\n \t  break;\n \n \tcase NOT:"}, {"sha": "44ca8a962717b866eccb7c0d5794d42c828d49f9", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=0f4c242bcbbbd1e338ddedeb304be9f4a51b1bd8", "patch": "@@ -1034,8 +1034,8 @@\n     operands[7] = operands[1];\n   else\n     operands[7] = gen_rtx_fmt_ee (reverse_condition (GET_CODE (operands[1])),\n-\t\t\t   GET_MODE (operands[1]), XEXP (operands[1], 0),\n-\t\t\t   XEXP (operands[1], 1));\n+\t\t\t\t  GET_MODE (operands[1]),\n+\t\t\t\t  XEXP (operands[1], 0), XEXP (operands[1], 1));\n }\")\n ;; ---------------------------------------------------------------------\n ;; BYTE SWAP INSTRUCTIONS"}]}