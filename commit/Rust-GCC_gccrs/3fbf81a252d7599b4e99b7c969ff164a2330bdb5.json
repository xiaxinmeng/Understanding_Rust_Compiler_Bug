{"sha": "3fbf81a252d7599b4e99b7c969ff164a2330bdb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZiZjgxYTI1MmQ3NTk5YjRlOTliN2M5NjlmZjE2NGEyMzMwYmRiNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-02-12T07:54:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-02-12T13:53:41Z"}, "message": "[Ada] Remove unused subprograms (continued)\n\ngcc/ada/\n\n\t* repinfo.ads, repinfo.adb (*SO_Ref*): Restore.", "tree": {"sha": "e1411dfdb4c2fa19fcb1c54b336c9356490d0d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1411dfdb4c2fa19fcb1c54b336c9356490d0d3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fbf81a252d7599b4e99b7c969ff164a2330bdb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fbf81a252d7599b4e99b7c969ff164a2330bdb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fbf81a252d7599b4e99b7c969ff164a2330bdb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fbf81a252d7599b4e99b7c969ff164a2330bdb5/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f699e0b16578cdc1be8b90691ef8b0964af32d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f699e0b16578cdc1be8b90691ef8b0964af32d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f699e0b16578cdc1be8b90691ef8b0964af32d2f"}], "stats": {"total": 107, "additions": 103, "deletions": 4}, "files": [{"sha": "bfb8af3756c15ffb98f974766c56d1b4fe36d59a", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbf81a252d7599b4e99b7c969ff164a2330bdb5/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbf81a252d7599b4e99b7c969ff164a2330bdb5/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=3fbf81a252d7599b4e99b7c969ff164a2330bdb5", "patch": "@@ -92,6 +92,18 @@ package body Repinfo is\n       Table_Increment      => Alloc.Rep_Table_Increment,\n       Table_Name           => \"BE_Rep_Table\");\n \n+   --------------------------------------------------------------\n+   -- Representation of Front-End Dynamic Size/Offset Entities --\n+   --------------------------------------------------------------\n+\n+   package Dynamic_SO_Entity_Table is new Table.Table (\n+      Table_Component_Type => Entity_Id,\n+      Table_Index_Type     => Nat,\n+      Table_Low_Bound      => 1,\n+      Table_Initial        => Alloc.Rep_Table_Initial,\n+      Table_Increment      => Alloc.Rep_Table_Increment,\n+      Table_Name           => \"FE_Rep_Table\");\n+\n    Unit_Casing : Casing_Type;\n    --  Identifier casing for current unit. This is set by List_Rep_Info for\n    --  each unit, before calling subprograms which may read it.\n@@ -212,6 +224,16 @@ package body Repinfo is\n          Op1  => Discriminant_Number (Discr));\n    end Create_Discrim_Ref;\n \n+   ---------------------------\n+   -- Create_Dynamic_SO_Ref --\n+   ---------------------------\n+\n+   function Create_Dynamic_SO_Ref (E : Entity_Id) return Dynamic_SO_Ref is\n+   begin\n+      Dynamic_SO_Entity_Table.Append (E);\n+      return UI_From_Int (-Dynamic_SO_Entity_Table.Last);\n+   end Create_Dynamic_SO_Ref;\n+\n    -----------------\n    -- Create_Node --\n    -----------------\n@@ -240,6 +262,33 @@ package body Repinfo is\n       return Entity_Header_Num (Id mod Relevant_Entities_Size);\n    end Entity_Hash;\n \n+   ---------------------------\n+   -- Get_Dynamic_SO_Entity --\n+   ---------------------------\n+\n+   function Get_Dynamic_SO_Entity (U : Dynamic_SO_Ref) return Entity_Id is\n+   begin\n+      return Dynamic_SO_Entity_Table.Table (-UI_To_Int (U));\n+   end Get_Dynamic_SO_Entity;\n+\n+   -----------------------\n+   -- Is_Dynamic_SO_Ref --\n+   -----------------------\n+\n+   function Is_Dynamic_SO_Ref (U : SO_Ref) return Boolean is\n+   begin\n+      return U < Uint_0;\n+   end Is_Dynamic_SO_Ref;\n+\n+   ----------------------\n+   -- Is_Static_SO_Ref --\n+   ----------------------\n+\n+   function Is_Static_SO_Ref (U : SO_Ref) return Boolean is\n+   begin\n+      return U >= Uint_0;\n+   end Is_Static_SO_Ref;\n+\n    ---------\n    -- lgx --\n    ---------"}, {"sha": "a2ab8325ce393c9d14b8b8b8db547f287f2f6ebb", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fbf81a252d7599b4e99b7c969ff164a2330bdb5/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fbf81a252d7599b4e99b7c969ff164a2330bdb5/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=3fbf81a252d7599b4e99b7c969ff164a2330bdb5", "patch": "@@ -51,10 +51,10 @@ package Repinfo is\n    --       for example in the case where representation clauses or\n    --       pragmas specify the values.\n \n-   --    2. Otherwise the backend is responsible for layout of all types and\n-   --       objects not laid out by the front end. This includes all dynamic\n-   --       values, and also static values (e.g. record sizes) when not set by\n-   --       the front end.\n+   --    2. The backend is responsible for layout of all types and objects\n+   --       not laid out by the front end. This includes all dynamic values,\n+   --       and also static values (e.g. record sizes) when not set by the\n+   --       front end.\n \n    -----------------------------\n    -- Back Annotation by Gigi --\n@@ -291,6 +291,56 @@ package Repinfo is\n    function Create_Discrim_Ref (Discr : Entity_Id) return Node_Ref;\n    --  Creates a reference to the discriminant whose entity is Discr\n \n+   --------------------------------------------------------\n+   -- Front-End Interface for Dynamic Size/Offset Values --\n+   --------------------------------------------------------\n+\n+   --  This interface is used by GNAT LLVM to deal with all dynamic size and\n+   --  offset fields.\n+\n+   --  The interface here allows these created entities to be referenced\n+   --  using negative Unit values, so that they can be stored in the\n+   --  appropriate size and offset fields in the tree.\n+\n+   --  In the case of components, if the location of the component is static,\n+   --  then all four fields (Component_Bit_Offset, Normalized_Position, Esize,\n+   --  and Normalized_First_Bit) are set to appropriate values. In the case of\n+   --  a non-static component location, Component_Bit_Offset is not used and\n+   --  is left set to Unknown. Normalized_Position and Normalized_First_Bit\n+   --  are set appropriately.\n+\n+   subtype SO_Ref is Uint;\n+   --  Type used to represent a Uint value that represents a static or\n+   --  dynamic size/offset value (non-negative if static, negative if\n+   --  the size value is dynamic).\n+\n+   subtype Dynamic_SO_Ref is Uint;\n+   --  Type used to represent a negative Uint value used to store\n+   --  a dynamic size/offset value.\n+\n+   function Is_Dynamic_SO_Ref (U : SO_Ref) return Boolean;\n+   pragma Inline (Is_Dynamic_SO_Ref);\n+   --  Given a SO_Ref (Uint) value, returns True iff the SO_Ref value\n+   --  represents a dynamic Size/Offset value (i.e. it is negative).\n+\n+   function Is_Static_SO_Ref (U : SO_Ref) return Boolean;\n+   pragma Inline (Is_Static_SO_Ref);\n+   --  Given a SO_Ref (Uint) value, returns True iff the SO_Ref value\n+   --  represents a static Size/Offset value (i.e. it is non-negative).\n+\n+   function Create_Dynamic_SO_Ref (E : Entity_Id) return Dynamic_SO_Ref;\n+   --  Given the Entity_Id for a constant (case 1), the Node_Id for an\n+   --  expression (case 2), or the Entity_Id for a function (case 3),\n+   --  this function returns a (negative) Uint value that can be used\n+   --  to retrieve the entity or expression for later use.\n+\n+   function Get_Dynamic_SO_Entity (U : Dynamic_SO_Ref) return Entity_Id;\n+   --  Retrieve the Node_Id or Entity_Id stored by a previous call to\n+   --  Create_Dynamic_SO_Ref. The approach is that the front end makes\n+   --  the necessary Create_Dynamic_SO_Ref calls to associate the node\n+   --  and entity id values and the back end makes Get_Dynamic_SO_Ref\n+   --  calls to retrieve them.\n+\n    ------------------------------\n    -- External tools Interface --\n    ------------------------------"}]}