{"sha": "aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWExYjJmN2Q5NTQ2YjM2MzAxYzAzYzkxNThkMjJhM2I2ZWNhOGNkNQ==", "commit": {"author": {"name": "Brent Verner", "email": "brent@rcfile.org", "date": "2000-08-14T19:59:26Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-08-14T19:59:26Z"}, "message": "debug_assert.h: new file\n\n\n2000-08-14  Brent Verner <brent@rcfile.org>\n\n\t* testsuite/debug_assert.h: new file\n\t* testsuite/*/*.cc: s/test\\s*&=([^;]+);/VERIFY($1);/g\n\tchanged conditional #include <c?assert.?h?> to\n\tunconditional #include <debug_assert.h>\n\t* mkcheck.in: added $SRC_DIR/testsuite to include search path\n\tfor testsuite compile command.\n\nFrom-SVN: r35682", "tree": {"sha": "89c1a03a93a8b23be6764562273f344faabf7acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89c1a03a93a8b23be6764562273f344faabf7acc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/comments", "author": null, "committer": null, "parents": [{"sha": "5312a1d9d18f42f15d1f9cdecf689223f9e030c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5312a1d9d18f42f15d1f9cdecf689223f9e030c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5312a1d9d18f42f15d1f9cdecf689223f9e030c9"}], "stats": {"total": 3372, "additions": 1667, "deletions": 1705}, "files": [{"sha": "d1cdc058f9fb8bb2c0b2a977d31a5ddf624f8a69", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -1,3 +1,12 @@\n+2000-08-14  Brent Verner <brent@rcfile.org>\n+\n+\t* testsuite/debug_assert.h: new file\n+\t* testsuite/*/*.cc: s/test\\s*&=([^;]+);/VERIFY($1);/g\n+\tchanged conditional #include <c?assert.?h?> to\n+\tunconditional #include <debug_assert.h>\n+\t* mkcheck.in: added $SRC_DIR/testsuite to include search path\n+\tfor testsuite compile command.\n+\n 2000-08-14  Levente Farkas  <lfarkas@mindmaker.hu>\n \n \t* bits/std_fstream.h: Remove duplicate typdefs for ofstream and"}, {"sha": "ef0950b7c7c6ec3ef9d5d5ddf8e43703c9efa1d7", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -55,7 +55,7 @@ fi\n \n # INC_PATH == include path to new headers for use on gcc command-line\n if [ $WHICH != \"1\" ]; then\n-  INC_PATH=\"@CSHADOWFLAGS@ -I$BUILD_DIR -I$BUILD_DIR/libio -I$SRC_DIR/@ctype_include_dir@ -I$SRC_DIR/@cpu_include_dir@  -I$SRC_DIR/std -I$SRC_DIR -I$SRC_DIR/libio\"\n+  INC_PATH=\"@CSHADOWFLAGS@ -I$BUILD_DIR -I$BUILD_DIR/libio -I$SRC_DIR/@ctype_include_dir@ -I$SRC_DIR/@cpu_include_dir@  -I$SRC_DIR/std -I$SRC_DIR -I$SRC_DIR/libio -I$SRC_DIR/testsuite\"\n elif [ $WHICH -eq 1 ]; then\n   INC_PATH=\"\"\n fi"}, {"sha": "c82c076d76131893c85578531cb08cc590f9a0fb", "filename": "libstdc++-v3/testsuite/17_intro/header_ciso646.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ciso646.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ciso646.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ciso646.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, ciso646\n \n #include <ciso646>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n // 2.11 Keywords\n@@ -104,11 +102,11 @@ bool test02()\n   int  int1 = 45;\n   int  int2 = 0;\n   \n-  test &= arg1 && int1;\n-  test &= arg1 and int1;\n+  VERIFY( arg1 && int1 );\n+  VERIFY( arg1 and int1 );\n \n-  test &= (arg1 && arg2) == (arg1 and arg2);\n-  test &= (arg1 && int1) == (arg1 and int1);\n+  VERIFY( (arg1 && arg2) == (arg1 and arg2) );\n+  VERIFY( (arg1 && int1) == (arg1 and int1) );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "6673521f779f34a3b32cf162dca000f0b85276d3", "filename": "libstdc++-v3/testsuite/17_intro/header_fstream.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_fstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_fstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_fstream.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, fstream\n \n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "6ae692397e037eb40c420f313001f0ac63f0eac9", "filename": "libstdc++-v3/testsuite/17_intro/header_iomanip.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iomanip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iomanip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iomanip.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, iomanip\n \n #include <iomanip>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "f60587393fb6468dbe8c6e2859f5d17ec60ab728", "filename": "libstdc++-v3/testsuite/17_intro/header_ios.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ios.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, ios\n \n #include <ios>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "b9cb42d035d0e448a58bd5a791743b8797e9d0bc", "filename": "libstdc++-v3/testsuite/17_intro/header_iosfwd.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iosfwd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iosfwd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iosfwd.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, iosfwd\n \n #include <iosfwd>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "51434eff47ee291dbfa21214fa26122ff5a69906", "filename": "libstdc++-v3/testsuite/17_intro/header_iostream.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iostream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iostream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_iostream.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, iostream\n \n #include <iostream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "b193f2954b663664ad53f8ca80f62f11a19ca46f", "filename": "libstdc++-v3/testsuite/17_intro/header_istream.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_istream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_istream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_istream.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, istream\n \n #include <istream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "731a881fc4775422260425be70ef42b85354200b", "filename": "libstdc++-v3/testsuite/17_intro/header_ostream.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ostream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ostream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_ostream.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, ostream\n \n #include <ostream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "697b8c36db98a57b0d8a0735ce44f8f3c5519c09", "filename": "libstdc++-v3/testsuite/17_intro/header_sstream.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_sstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_sstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_sstream.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, sstream\n \n #include <sstream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "b8af9f4c6df67db5e56e2c2b24367d7c616c2a48", "filename": "libstdc++-v3/testsuite/17_intro/header_streambuf.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_streambuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_streambuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheader_streambuf.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 17.4.1.2 Headers, streambuf\n \n #include <streambuf>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n int main(void)"}, {"sha": "fce32abb2b021843b3d373661c7aa784ad46beb5", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits.cc", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 18.2.1.1 template class numeric_limits\n \n #include <limits>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n template<typename T>\n@@ -44,36 +42,36 @@ bool test01()\n   bool test = true;\n   std::numeric_limits< A<B> > obj;\n \n-  test &= !obj.is_specialized;\n-  test &= obj.min() == 0;\n-  test &= obj.max() == 0;\n-  test &= obj.digits ==  0;\n-  test &= obj.digits10 == 0;\n-  test &= !obj.is_signed;\n-  test &= !obj.is_integer;\n-  test &= !obj.is_exact;\n-  test &= obj.radix == 0;\n-  test &= obj.epsilon() == 0;\n-  test &= obj.round_error() == 0;\n-  test &= obj.min_exponent == 0;\n-  test &= obj.min_exponent10 == 0;\n-  test &= obj.max_exponent == 0;\n-  test &= obj.max_exponent10 == 0;\n-  test &= !obj.has_infinity;\n-  test &= !obj.has_quiet_NaN;\n-  test &= !obj.has_signaling_NaN;\n-  test &= !obj.has_denorm;\n-  test &= !obj.has_denorm_loss;\n-  test &= obj.infinity() == 0;\n-  test &= obj.quiet_NaN() == 0;\n-  test &= obj.signaling_NaN() == 0;\n-  test &= obj.denorm_min() == 0;\n-  test &= !obj.is_iec559;\n-  test &= !obj.is_bounded;\n-  test &= !obj.is_modulo;\n-  test &= !obj.traps;\n-  test &= !obj.tinyness_before;\n-  test &= obj.round_style == std::round_toward_zero;\n+  VERIFY( !obj.is_specialized );\n+  VERIFY( obj.min() == 0 );\n+  VERIFY( obj.max() == 0 );\n+  VERIFY( obj.digits ==  0 );\n+  VERIFY( obj.digits10 == 0 );\n+  VERIFY( !obj.is_signed );\n+  VERIFY( !obj.is_integer );\n+  VERIFY( !obj.is_exact );\n+  VERIFY( obj.radix == 0 );\n+  VERIFY( obj.epsilon() == 0 );\n+  VERIFY( obj.round_error() == 0 );\n+  VERIFY( obj.min_exponent == 0 );\n+  VERIFY( obj.min_exponent10 == 0 );\n+  VERIFY( obj.max_exponent == 0 );\n+  VERIFY( obj.max_exponent10 == 0 );\n+  VERIFY( !obj.has_infinity );\n+  VERIFY( !obj.has_quiet_NaN );\n+  VERIFY( !obj.has_signaling_NaN );\n+  VERIFY( !obj.has_denorm );\n+  VERIFY( !obj.has_denorm_loss );\n+  VERIFY( obj.infinity() == 0 );\n+  VERIFY( obj.quiet_NaN() == 0 );\n+  VERIFY( obj.signaling_NaN() == 0 );\n+  VERIFY( obj.denorm_min() == 0 );\n+  VERIFY( !obj.is_iec559 );\n+  VERIFY( !obj.is_bounded );\n+  VERIFY( !obj.is_modulo );\n+  VERIFY( !obj.traps );\n+  VERIFY( !obj.tinyness_before );\n+  VERIFY( obj.round_style == std::round_toward_zero );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "a6aa338df1e94a11ff199de6e5471a77346de1b1", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr.cc", "status": "modified", "additions": 87, "deletions": 84, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -19,10 +19,7 @@\n // 20.4.5 Template class auto_ptr [lib.auto.ptr]\n \n #include <memory>\n-#ifdef DEBUG_ASSERT\n-#  include <assert.h>\n-#endif\n-\n+#include <debug_assert.h>\n \n struct A\n {\n@@ -60,41 +57,43 @@ struct reset_count_struct\n // 20.4.5.1 auto_ptr constructors [lib.auto.ptr.cons]\n \n // Construction from pointer\n-bool test01()\n+int\n+test01()\n {\n   reset_count_struct reset;\n   bool test = true;\n \n   std::auto_ptr<A> A_default;\n-  test &= A_default.get() == 0;\n-  test &= A::ctor_count == 0;\n-  test &= A::dtor_count == 0;\n-  test &= B::ctor_count == 0;\n-  test &= B::dtor_count == 0;\n+  VERIFY( A_default.get() == 0 );\n+  VERIFY( A::ctor_count == 0 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n \n   std::auto_ptr<A> A_from_A(new A);\n-  test &= A_from_A.get() != 0;\n-  test &= A::ctor_count == 1;\n-  test &= A::dtor_count == 0;\n-  test &= B::ctor_count == 0;\n-  test &= B::dtor_count == 0;\n+  VERIFY( A_from_A.get() != 0 );\n+  VERIFY( A::ctor_count == 1 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 0 );\n+  VERIFY( B::dtor_count == 0 );\n \n   std::auto_ptr<A> A_from_B(new B);\n-  test &= A_from_B.get() != 0;\n-  test &= A::ctor_count == 2;\n-  test &= A::dtor_count == 0;\n-  test &= B::ctor_count == 1;\n-  test &= B::dtor_count == 0;\n+  VERIFY( A_from_B.get() != 0 );\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 0 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n-  return test;\n+  return 0;\n }\n \n // Construction from std::auto_ptr\n-bool test02()\n+int\n+test02()\n {\n   reset_count_struct reset;\n   bool test = true;\n@@ -104,24 +103,25 @@ bool test02()\n \n   std::auto_ptr<A> A_from_ptr_A(A_from_A);\n   std::auto_ptr<A> A_from_ptr_B(B_from_B);\n-  test &= A_from_A.get() == 0;\n-  test &= B_from_B.get() == 0;\n-  test &= A_from_ptr_A.get() != 0;\n-  test &= A_from_ptr_B.get() != 0;\n-  test &= A::ctor_count == 2;\n-  test &= A::dtor_count == 0;\n-  test &= B::ctor_count == 1;\n-  test &= B::dtor_count == 0;\n+  VERIFY( A_from_A.get() == 0 );\n+  VERIFY( B_from_B.get() == 0 );\n+  VERIFY( A_from_ptr_A.get() != 0 );\n+  VERIFY( A_from_ptr_B.get() != 0 );\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 0 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n-  return test;\n+  return 0;\n }\n \n // Assignment from std::auto_ptr\n-bool test03()\n+int\n+test03()\n {\n   reset_count_struct reset;\n   bool test = true;\n@@ -133,24 +133,25 @@ bool test03()\n \n   A_from_ptr_A = A_from_A;\n   A_from_ptr_B = B_from_B;\n-  test &= A_from_A.get() == 0;\n-  test &= B_from_B.get() == 0;\n-  test &= A_from_ptr_A.get() != 0;\n-  test &= A_from_ptr_B.get() != 0;\n-  test &= A::ctor_count == 2;\n-  test &= A::dtor_count == 0;\n-  test &= B::ctor_count == 1;\n-  test &= B::dtor_count == 0;\n+  VERIFY( A_from_A.get() == 0 );\n+  VERIFY( B_from_B.get() == 0 );\n+  VERIFY( A_from_ptr_A.get() != 0 );\n+  VERIFY( A_from_ptr_B.get() != 0 );\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 0 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 0 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n-  return test;\n+  return 0;\n }\n \n // Destruction\n-bool test04()\n+int\n+test04()\n {\n   reset_count_struct reset;\n   bool test = true;\n@@ -161,16 +162,16 @@ bool test04()\n     std::auto_ptr<B> B_from_B(new B);\n   }/*destructors called here*/\n \n-  test &= A::ctor_count == 3;\n-  test &= A::dtor_count == 3;\n-  test &= B::ctor_count == 2;\n-  test &= B::dtor_count == 2;\n+  VERIFY( A::ctor_count == 3 );\n+  VERIFY( A::dtor_count == 3 );\n+  VERIFY( B::ctor_count == 2 );\n+  VERIFY( B::dtor_count == 2 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n-  return test;\n+  return 0;\n }\n \n // Class member construction/destruction\n@@ -183,58 +184,60 @@ class pimpl\n   std::auto_ptr<T> p_impl;\n };\n \n-bool test05()\n+int \n+test05()\n {\n   bool test = true;\n   reset_count_struct reset;\n \n   pimpl<A>();\n   pimpl<B>();\n-  test &= A::ctor_count == 2;\n-  test &= A::dtor_count == 2;\n-  test &= B::ctor_count == 1;\n-  test &= B::dtor_count == 1;\n+  VERIFY( A::ctor_count == 2 );\n+  VERIFY( A::dtor_count == 2 );\n+  VERIFY( B::ctor_count == 1 );\n+  VERIFY( B::dtor_count == 1 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n-  return test;\n+  return 0;\n }\n \n \n // 20.4.5.2 auto_ptr members [lib.auto.ptr.members]\n \n // Member access\n-bool test06()\n+int\n+test06()\n {\n   reset_count_struct reset;\n   bool test = true;\n \n   std::auto_ptr<A> A_from_A(new A);\n   std::auto_ptr<A> A_from_A_ptr(A_from_A.release());\n-  test &= A_from_A.get() == 0;\n-  test &= A_from_A_ptr.get() != 0;\n-  test &= A_from_A->ctor_count == 1;\n-  test &= (*A_from_A).dtor_count == 0;\n+  VERIFY( A_from_A.get() == 0 );\n+  VERIFY( A_from_A_ptr.get() != 0 );\n+  VERIFY( A_from_A->ctor_count == 1 );\n+  VERIFY( (*A_from_A).dtor_count == 0 );\n \n   A* A_ptr = A_from_A_ptr.get();\n \n   A_from_A_ptr.reset(A_ptr);\n-  test &= A_from_A_ptr.get() == A_ptr;\n-  test &= A_from_A_ptr->ctor_count == 1;\n-  test &= (*A_from_A_ptr).dtor_count == 0;\n+  VERIFY( A_from_A_ptr.get() == A_ptr );\n+  VERIFY( A_from_A_ptr->ctor_count == 1 );\n+  VERIFY( (*A_from_A_ptr).dtor_count == 0 );\n \n   A_from_A_ptr.reset(new A);\n-  test &= A_from_A_ptr.get() != A_ptr;\n-  test &= A_from_A_ptr->ctor_count == 2;\n-  test &= (*A_from_A_ptr).dtor_count == 1;\n+  VERIFY( A_from_A_ptr.get() != A_ptr );\n+  VERIFY( A_from_A_ptr->ctor_count == 2 );\n+  VERIFY( (*A_from_A_ptr).dtor_count == 1 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n-  return test;\n+  return 0;\n }\n \n \n@@ -251,38 +254,38 @@ template <typename T>\n static void drain(std::auto_ptr<T>)\n {}\n \n-bool test07()\n+int\n+test07()\n {\n   bool test = true;\n   reset_count_struct reset;\n \n   drain(source<A>());\n   drain<A>(source<B>());\n   drain(source<B>());\n-  test &= A::ctor_count == 3;\n-  test &= A::dtor_count == 3;\n-  test &= B::ctor_count == 2;\n-  test &= B::dtor_count == 2;\n+  VERIFY( A::ctor_count == 3 );\n+  VERIFY( A::dtor_count == 3 );\n+  VERIFY( B::ctor_count == 2 );\n+  VERIFY( B::dtor_count == 2 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n-  return test;\n+  return 0;\n }\n \n-\n-int main()\n+int \n+main()\n {\n-  bool test = true;\n-\n-  test &= test01();\n-  test &= test02();\n-  test &= test03();\n-  test &= test04();\n-  test &= test05();\n-  test &= test06();\n-  test &= test07();\n-\n-  return test ? 0 : 1;\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+  test07();\n+\n+  return 0;\n }\n+"}, {"sha": "07b170674a4727e64070024801bfca0f2ff1ee12", "filename": "libstdc++-v3/testsuite/21_strings/append.cc", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fappend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fappend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fappend.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -45,14 +43,14 @@ bool test01(void)\n   // string& append(const string&)\n   str05 = str02;\n   str05.append(str05); \n-  test &= str05 == \"corpus, corpus, \";\n+  VERIFY( str05 == \"corpus, corpus, \" );\n   str05.append(str01);\n-  test &= str05 == \"corpus, corpus, point bolivar, texas\";\n+  VERIFY( str05 == \"corpus, corpus, point bolivar, texas\" );\n   str05.append(str03);\n-  test &= str05 == \"corpus, corpus, point bolivar, texas\";\n+  VERIFY( str05 == \"corpus, corpus, point bolivar, texas\" );\n   std::string str06;\n   str06.append(str05);\n-  test &= str06 == str05;\n+  VERIFY( str06 == str05 );\n \n \n   // string& append(const string&, size_type pos, size_type n)\n@@ -61,97 +59,97 @@ bool test01(void)\n   csz01 = str03.size();\n   try {\n     str06.append(str03, csz01 + 1, 0);\n-    test &= false; \n+    VERIFY( false ); \n   }\n   catch(std::out_of_range& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   csz01 = str01.size();\n   try {\n     str06.append(str01, csz01 + 1, 0);\n-    test &= false; \n+    VERIFY( false ); \n   }\n   catch(std::out_of_range& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   str05 = str02;\n   str05.append(str01, 0, std::string::npos);\n-  test &= str05 == \"corpus, point bolivar, texas\";\n-  test &= str05 != str02;\n+  VERIFY( str05 == \"corpus, point bolivar, texas\" );\n+  VERIFY( str05 != str02 );\n \n   str06 = str02;\n   str06.append(str01, 15, std::string::npos);\n-  test &= str06 == \"corpus, texas\";\n-  test &= str02 != str06;\n+  VERIFY( str06 == \"corpus, texas\" );\n+  VERIFY( str02 != str06 );\n \n \n   // string& append(const char* s)\n   str05.erase();\n   str06.erase();\n   str05.append(\"\");\n-  test &= str05 == str03;\n+  VERIFY( str05 == str03 );\n \n   str05.append(str_lit01);\n-  test &= str05 == str01;\n+  VERIFY( str05 == str01 );\n \n   str06 = str02;\n   str06.append(\"corpus, \");\n-  test &= str06 == \"corpus, corpus, \";\n+  VERIFY( str06 == \"corpus, corpus, \" );\n \n \n   // string& append(const char* s, size_type n)\n   str05.erase();\n   str06.erase();\n   str05.append(\"\", 0);\n-  test &= str05.size() == 0;\n-  test &= str05 == str03;\n+  VERIFY( str05.size() == 0 );\n+  VERIFY( str05 == str03 );\n   \n   str05.append(str_lit01, sizeof(str_lit01) - 1);\n-  test &= str05 == str01;\n+  VERIFY( str05 == str01 );\n \n   str06 = str02;\n   str06.append(\"corpus, \", 6);\n-  test &= str06 == \"corpus, corpus\";\n+  VERIFY( str06 == \"corpus, corpus\" );\n \n   str06 = str02;\n   str06.append(\"corpus, \", 12);\n-  test &= str06 != \"corpus, corpus, \";\n+  VERIFY( str06 != \"corpus, corpus, \" );\n \n \n   // string& append(size_type n, char c)\n   str05.erase();\n   str06.erase();\n   str05.append(0, 'a');\n-  test &= str05 == str03;\n+  VERIFY( str05 == str03 );\n   str06.append(8, '.');\n-  test &= str06 == \"........\";\n+  VERIFY( str06 == \"........\" );\n \n \n   // template<typename InputIter>\n   //  string& append(InputIter first, InputIter last)\n   str05.erase();\n   str06.erase();\n   str05.append(str03.begin(), str03.end());\n-  test &= str05 == str03;\n+  VERIFY( str05 == str03 );\n \n   str06 = str02;\n   str06.append(str01.begin(), str01.begin() + str01.find('r')); \n-  test &= str06 == \"corpus, point boliva\";\n-  test &= str06 != str01;\n-  test &= str06 != str02;\n+  VERIFY( str06 == \"corpus, point boliva\" );\n+  VERIFY( str06 != str01 );\n+  VERIFY( str06 != str02 );\n \n   str05 = str01;\n   str05.append(str05.begin(), str05.begin() + str05.find('r')); \n-  test &= str05 ==  \"point bolivar, texaspoint boliva\";\n-  test &= str05 != str01;\n+  VERIFY( str05 ==  \"point bolivar, texaspoint boliva\" );\n+  VERIFY( str05 != str01 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "b93e6fe64c890e1c24d21fc299046f42e0a728be", "filename": "libstdc++-v3/testsuite/21_strings/capacity.cc", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcapacity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcapacity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcapacity.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <cstdio>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n template<typename T>\n   struct A { };\n@@ -49,27 +47,27 @@ bool test01()\n   size_type_s sz01 = str01.capacity();\n   str01.reserve(100);\n   size_type_s sz02 = str01.capacity();\n-  test &= sz02 >= sz01;\n-  test &= sz02 >= 100;\n+  VERIFY( sz02 >= sz01 );\n+  VERIFY( sz02 >= 100 );\n   str01.reserve();\n   sz01 = str01.capacity();\n-  test &= sz01 >= 0;\n+  VERIFY( sz01 >= 0 );\n \n   sz01 = str01.size() + 5;\n   str01.resize(sz01);\n   sz02 = str01.size();\n-  test &= sz01 == sz02;\n+  VERIFY( sz01 == sz02 );\n \n   sz01 = str01.size() - 5;\n   str01.resize(sz01);\n   sz02 = str01.size();\n-  test &= sz01 == sz02;\n+  VERIFY( sz01 == sz02 );\n \n   std::string str05(30, 'q');\n   std::string str06 = str05;\n   str05 = str06 + str05;\n-  test &= str05.capacity() >= str05.size();\n-  test &= str06.capacity() >= str06.size();\n+  VERIFY( str05.capacity() >= str05.size() );\n+  VERIFY( str06.capacity() >= str06.size() );\n \n   // 2 non POD types : resize, capacity, reserve\n   std::basic_string< A<B> > str02;\n@@ -80,50 +78,50 @@ bool test01()\n   sz03 = str02.capacity();\n   str02.reserve(100);\n   sz04 = str02.capacity();\n-  test &= sz04 >= sz03;\n-  test &= sz04 >= 100;\n+  VERIFY( sz04 >= sz03 );\n+  VERIFY( sz04 >= 100 );\n   str02.reserve();\n   sz03 = str02.capacity();\n-  test &= sz03 >= 0;\n+  VERIFY( sz03 >= 0 );\n \n   sz03 = str02.size() + 5;\n   str02.resize(sz03);\n   sz04 = str02.size();\n-  test &= sz03 == sz04;\n+  VERIFY( sz03 == sz04 );\n \n   sz03 = str02.size() - 5;\n   str02.resize(sz03);\n   sz04 = str02.size();\n-  test &= sz03 == sz04;\n+  VERIFY( sz03 == sz04 );\n \n   A<B> inst_obj;\n   std::basic_string<A<B> > str07(30, inst_obj);\n   std::basic_string<A<B> > str08 = str07;\n   str07 = str08 + str07;\n-  test &= str07.capacity() >= str07.size();\n-  test &= str08.capacity() >= str08.size();\n+  VERIFY( str07.capacity() >= str07.size() );\n+  VERIFY( str08.capacity() >= str08.size() );\n \n   // 3 POD types: size, length, max_size, clear(), empty()\n   bool b01;\n   std::string str011;\n   b01 = str01.empty();  \n-  test &= b01 == true;\n+  VERIFY( b01 == true );\n   sz01 = str01.size();\n   sz02 = str01.length();\n-  test &= sz01 == sz02;\n+  VERIFY( sz01 == sz02 );\n   str01.c_str();\n   sz01 = str01.size();\n   sz02 = str01.length();\n-  test &= sz01 == sz02;\n+  VERIFY( sz01 == sz02 );\n \n   sz01 = str01.length();\n   str01.c_str();\n   str011 = str01 +  \"_addendum_\";\n   str01.c_str();\n   sz02 = str01.length();    \n-  test &= sz01 == sz02;\n+  VERIFY( sz01 == sz02 );\n   sz02 = str011.length();\n-  test &= sz02 > sz01;\n+  VERIFY( sz02 > sz01 );\n     \n   // trickster allocator (__USE_MALLOC, luke) issues involved with these:\n   std::string str3 = \"8-chars_8-chars_\";\n@@ -133,36 +131,36 @@ bool test01()\n   \n   sz01 = str01.size();\n   sz02 = str01.max_size();  \n-  test &= sz02 >= sz01;\n+  VERIFY( sz02 >= sz01 );\n \n   sz01 = str01.size();\n   str01.clear();  \n   b01 = str01.empty(); \n-  test &= b01 == true;\n+  VERIFY( b01 == true );\n   sz02 = str01.size();  \n-  test &= sz01 >= sz02;\n+  VERIFY( sz01 >= sz02 );\n \n \n   // 4 non-POD types: size, length, max_size, clear(), empty()\n   b01 = str02.empty();  \n-  test &= b01 == true;\n+  VERIFY( b01 == true );\n   sz03 = str02.size();\n   sz04 = str02.length();\n-  test &= sz03 == sz04;\n+  VERIFY( sz03 == sz04 );\n   str02.c_str();\n   sz03 = str02.size();\n   sz04 = str02.length();\n-  test &= sz03 == sz04;\n+  VERIFY( sz03 == sz04 );\n \n   sz03 = str02.max_size();  \n-  test &= sz03 >= sz04;\n+  VERIFY( sz03 >= sz04 );\n \n   sz03 = str02.size();\n   str02.clear();  \n   b01 = str02.empty(); \n-  test &= b01 == true;\n+  VERIFY( b01 == true );\n   sz04 = str02.size();  \n-  test &= sz03 >= sz04;\n+  VERIFY( sz03 >= sz04 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "1978bda41b3be90bc76853cfb5048dac8f5e7ab0", "filename": "libstdc++-v3/testsuite/21_strings/char_traits.cc", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fchar_traits.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 21.1 Characher traits\n \n #include <string>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n int test01(void)\n {\n@@ -47,9 +45,9 @@ int test01(void)\n   // assigns c = d;\n   char c1 = 'z';\n   char c2 = 'u';\n-  test &= c1 != c2;\n+  VERIFY( c1 != c2 );\n   std::char_traits<char>::assign(c1,c2);\n-  test &= c1 == 'u';\n+  VERIFY( c1 == 'u' );\n \n   // char* X::move(char* s, const char* p, size_t n)\n   // for each i in [0,n) performs X::assign(s[i], p[i]). Copies\n@@ -59,49 +57,49 @@ int test01(void)\n   int len = sizeof(str_lit1) + sizeof(array1) - 1; // two terminating chars\n   char array2[len];\n \n-  test &= str_lit1[0] == 'm';\n+  VERIFY( str_lit1[0] == 'm' );\n   c1 = array2[0];\n   c2 = str_lit1[0];\n   char c3 = array2[1];\n   char c4 = str_lit1[1];\n   std::char_traits<char>::move(array2, str_lit1, 0);\n-  test &= array2[0] == c1;\n-  test &= str_lit1[0] == c2;\n+  VERIFY( array2[0] == c1 );\n+  VERIFY( str_lit1[0] == c2 );\n   std::char_traits<char>::move(array2, str_lit1, 1);\n-  test &= array2[0] == c2;\n-  test &= str_lit1[0] == c2;\n-  test &= array2[1] == c3;\n-  test &= str_lit1[1] == c4;\n+  VERIFY( array2[0] == c2 );\n+  VERIFY( str_lit1[0] == c2 );\n+  VERIFY( array2[1] == c3 );\n+  VERIFY( str_lit1[1] == c4 );\n   std::char_traits<char>::move(array2, str_lit1, 2);\n-  test &= array2[0] == c2;\n-  test &= str_lit1[0] == c2;\n-  test &= array2[1] == c4;\n-  test &= str_lit1[1] == c4;\n+  VERIFY( array2[0] == c2 );\n+  VERIFY( str_lit1[0] == c2 );\n+  VERIFY( array2[1] == c4 );\n+  VERIFY( str_lit1[1] == c4 );\n \n   char* pc1 = array1 + 1;\n   c1 = pc1[0];\n   c2 = array1[0];\n-  test &= c1 != c2;\n+  VERIFY( c1 != c2 );\n   char* pc2 = std::char_traits<char>::move(array1, pc1, 0);\n   c3 = pc1[0];\n   c4 = array1[0];\n-  test &= c1 == c3;\n-  test &= c2 == c4;\n-  test &= pc2 == array1;\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == c4 );\n+  VERIFY( pc2 == array1 );\n \n   c1 = pc1[0];\n   c2 = array1[0];\n   char* pc3 = pc1;\n   pc2 = std::char_traits<char>::move(array1, pc1, 10);\n   c3 = pc1[0];\n   c4 = array1[0];\n-  test &= c1 != c3; // underlying char array changed.\n-  test &= c4 != c3;\n-  test &= pc2 == array1;\n-  test &= pc3 == pc1; // but pointers o-tay\n+  VERIFY( c1 != c3 ); // underlying char array changed.\n+  VERIFY( c4 != c3 );\n+  VERIFY( pc2 == array1 );\n+  VERIFY( pc3 == pc1 ); // but pointers o-tay\n   c1 = *(str_01.data());\n   c2 = array1[0];\n-  test &= c1 != c2;\n+  VERIFY( c1 != c2 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -132,9 +130,9 @@ int test02(void)\n   // assigns c = d;\n   wchar_t c1 = L'z';\n   wchar_t c2 = L'u';\n-  test &= c1 != c2;\n+  VERIFY( c1 != c2 );\n   std::char_traits<wchar_t>::assign(c1,c2);\n-  test &= c1 == L'u';\n+  VERIFY( c1 == L'u' );\n \n   // char* X::move(char* s, const char* p, size_t n)\n   // for each i in [0,n) performs X::assign(s[i], p[i]). Copies\n@@ -144,49 +142,49 @@ int test02(void)\n   int len = sizeof(str_lit1) + sizeof(array1) - 1; // two terminating chars\n   wchar_t array2[len];\n \n-  test &= str_lit1[0] == 'm';\n+  VERIFY( str_lit1[0] == 'm' );\n   c1 = array2[0];\n   c2 = str_lit1[0];\n   wchar_t c3 = array2[1];\n   wchar_t c4 = str_lit1[1];\n   std::char_traits<wchar_t>::move(array2, str_lit1, 0);\n-  test &= array2[0] == c1;\n-  test &= str_lit1[0] == c2;\n+  VERIFY( array2[0] == c1 );\n+  VERIFY( str_lit1[0] == c2 );\n   std::char_traits<wchar_t>::move(array2, str_lit1, 1);\n-  test &= array2[0] == c2;\n-  test &= str_lit1[0] == c2;\n-  test &= array2[1] == c3;\n-  test &= str_lit1[1] == c4;\n+  VERIFY( array2[0] == c2 );\n+  VERIFY( str_lit1[0] == c2 );\n+  VERIFY( array2[1] == c3 );\n+  VERIFY( str_lit1[1] == c4 );\n   std::char_traits<wchar_t>::move(array2, str_lit1, 2);\n-  test &= array2[0] == c2;\n-  test &= str_lit1[0] == c2;\n-  test &= array2[1] == c4;\n-  test &= str_lit1[1] == c4;\n+  VERIFY( array2[0] == c2 );\n+  VERIFY( str_lit1[0] == c2 );\n+  VERIFY( array2[1] == c4 );\n+  VERIFY( str_lit1[1] == c4 );\n  \n   wchar_t* pc1 = array1 + 1;\n   c1 = pc1[0];\n   c2 = array1[0];\n-  test &= c1 != c2;\n+  VERIFY( c1 != c2 );\n   wchar_t* pc2 = std::char_traits<wchar_t>::move(array1, pc1, 0);\n   c3 = pc1[0];\n   c4 = array1[0];\n-  test &= c1 == c3;\n-  test &= c2 == c4;\n-  test &= pc2 == array1;\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == c4 );\n+  VERIFY( pc2 == array1 );\n \n   c1 = pc1[0];\n   c2 = array1[0];\n   wchar_t* pc3 = pc1;\n   pc2 = std::char_traits<wchar_t>::move(array1, pc1, 10);\n   c3 = pc1[0];\n   c4 = array1[0];\n-  test &= c1 != c3; // underlying wchar_t array changed.\n-  test &= c4 != c3;\n-  test &= pc2 == array1;\n-  test &= pc3 == pc1; // but pointers o-tay\n+  VERIFY( c1 != c3 ); // underlying wchar_t array changed.\n+  VERIFY( c4 != c3 );\n+  VERIFY( pc2 == array1 );\n+  VERIFY( pc3 == pc1 ); // but pointers o-tay\n   c1 = *(str_01.data());\n   c2 = array1[0];\n-  test &= c1 != c2;\n+  VERIFY( c1 != c2 );\n  \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "822d3682b79f93b5cf5231be9c978a4f4812b979", "filename": "libstdc++-v3/testsuite/21_strings/compare.cc", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcompare.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcompare.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fcompare.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -31,14 +31,16 @@\n // things would be sorted in a dictionary.\n \n #include <string>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n enum want_value {lt=0, z=1, gt=2};\n \n-void test_value(int result, want_value expected);\n-void test_value(int result, want_value expected) {\n+int\n+test_value(int result, want_value expected);\n+\n+int\n+test_value(int result, want_value expected)\n+{\n   bool pass = false;\n \n   switch (expected) {\n@@ -61,11 +63,14 @@ void test_value(int result, want_value expected) {\n #ifdef DEBUG_ASSERT\n   assert(pass);\n #endif\n+  \n+  return 0;\n }\n  \n \n-int test01(void) {\n-\n+int \n+test01()\n+{\n   std::string \tstr_0(\"costa rica\");\n   std::string \tstr_1(\"costa marbella\");\n   std::string \tstr_2;\n@@ -121,8 +126,12 @@ int test01(void) {\n }\n \n \n-int main() {\n+int \n+main() \n+{\n   test01();\n+  \n+  return 0;\n }\n \n "}, {"sha": "095c88090aff50d01d5bec261cf099a37977b285", "filename": "libstdc++-v3/testsuite/21_strings/ctor_copy_dtor.cc", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -23,9 +23,7 @@\n #include <new>\n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n int test01(void)\n {\n@@ -43,22 +41,22 @@ int test01(void)\n   csz01 = str01.size();\n   try {\n     std::string str03(str01, csz01 + 1);\n-    test &= false;\n+    VERIFY( false );\n   }\t\t \n   catch(std::out_of_range& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   try {\n     std::string str03(str01, csz01);\n-    test &= str03.size() == 0;\n-    test &= str03.size() <= str03.capacity();\n+    VERIFY( str03.size() == 0 );\n+    VERIFY( str03.size() <= str03.capacity() );\n   }\t\t \n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n \n@@ -68,93 +66,93 @@ int test01(void)\n   // should not crash, but what gets constructed is a bit arbitrary.\n   try {\n     std::string str03(str_lit01, csz01 + 1);\n-    test &= true;\n+    VERIFY( true );\n   }\t\t \n   catch(std::length_error& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   // NB: As strlen(str_lit01) != csz01, this test is undefined. It\n   // should not crash, but what gets constructed is a bit arbitrary.\n   // The \"maverick's\" of all string objects.\n   try {\n     std::string str04(str_lit01, npos); \n-    test &= true;\n+    VERIFY( true );\n   }\t\t \n   catch(std::length_error& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   // Build a maxsize-1 lengthed string consisting of all A's\n   try {\n     std::string str03(csz01 - 1, 'A');\n-    test &= str03.size() == csz01 - 1;\n-    test &= str03.size() <= str03.capacity();\n+    VERIFY( str03.size() == csz01 - 1 );\n+    VERIFY( str03.size() <= str03.capacity() );\n   }\t\t \n   // NB: bad_alloc is regrettable but entirely kosher for\n   // out-of-memory situations.\n   catch(std::bad_alloc& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n \n   // basic_string(const char* s, const allocator& a = allocator())\n   std::string str04(str_lit01);\n-  test &= str01 == str04;\n+  VERIFY( str01 == str04 );\n \n \n   // basic_string(size_type n, char c, const allocator& a = allocator())\n   csz01 = str01.max_size();\n   try {\n     std::string str03(csz01 + 1, 'z');\n-    test &= false;\n+    VERIFY( false );\n   }\t\t \n   catch(std::length_error& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   try {\n     std::string str04(npos, 'b'); // the \"maverick's\" of all string objects.\n-    test &= false;\n+    VERIFY( false );\n   }\t\t \n   catch(std::length_error& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   try {\n     std::string str03(csz01 - 1, 'z');\n-    test &= str03.size() != 0;\n-    test &= str03.size() <= str03.capacity();\n+    VERIFY( str03.size() != 0 );\n+    VERIFY( str03.size() <= str03.capacity() );\n   }\t\t \n   // NB: bad_alloc is regrettable but entirely kosher for\n   // out-of-memory situations.\n   catch(std::bad_alloc& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n \n   // template<typename _InputIter>\n   //   basic_string(_InputIter begin, _InputIter end, const allocator& a)\n   std::string str06(str01.begin(), str01.end());\n-  test &= str06 == str01;\n+  VERIFY( str06 == str01 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -170,7 +168,7 @@ void test02()\n   //   basic_string(_InputIter begin, _InputIter end, const allocator& a)\n   // where _InputIter is integral [21.3.1 para 15]\n   std::string s(10,0);\n-  test &= s.size() == 10;\n+  VERIFY( s.size() == 10 );\n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif"}, {"sha": "34d63923a9420788cb93df3b17684e507215776d", "filename": "libstdc++-v3/testsuite/21_strings/element_access.cc", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Felement_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Felement_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Felement_access.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -42,45 +40,45 @@ bool test01(void)\n   // const_reference operator[] (size_type pos) const;\n   csz01 = str01.size();\n   cref cref1 = str01[csz01 - 1];\n-  test &= cref1 == 'a';\n+  VERIFY( cref1 == 'a' );\n   cref cref2 = str01[csz01];\n-  test &= cref2 == char();\n+  VERIFY( cref2 == char() );\n \n   // reference operator[] (size_type pos);\n   csz02 = str02.size();\n   ref ref1 = str02[csz02 - 1];\n-  test &= ref1 == 'a';\n+  VERIFY( ref1 == 'a' );\n   ref ref2 = str02[1];\n-  test &= ref2 == '4';\n+  VERIFY( ref2 == '4' );\n \n   // const_reference at(size_type pos) const;\n   csz01 = str01.size();\n   cref cref3 = str01.at(csz01 - 1);\n-  test &= cref3 == 'a';\n+  VERIFY( cref3 == 'a' );\n   try {\n     cref cref4 = str01.at(csz01);\n-    test &= false; // Should not get here, as exception thrown.\n+    VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   // reference at(size_type pos);\n   csz01 = str02.size();\n   ref ref3 = str02.at(csz02 - 1);\n-  test &= ref3 == 'a';\n+  VERIFY( ref3 == 'a' );\n   try {\n     ref ref4 = str02.at(csz02);\n-    test &= false; // Should not get here, as exception thrown.\n+    VERIFY( false ); // Should not get here, as exception thrown.\n   }\n   catch(std::out_of_range& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n #ifdef DEBUG_ASSERT"}, {"sha": "8bafeb4ab1010c11ba27f9e43168cc7bdd0cfb62", "filename": "libstdc++-v3/testsuite/21_strings/find.cc", "status": "modified", "additions": 52, "deletions": 54, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Ffind.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Ffind.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Ffind.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -43,98 +41,98 @@ bool test01(void)\n \n   // size_type find(const string&, size_type pos = 0) const;\n   csz01 = str01.find(str01);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find(str01, 4);\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n   csz01 = str01.find(str02, 0);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find(str02, 3);\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n   csz01 = str01.find(str03, 0);\n-  test &= csz01 == 8;\n+  VERIFY( csz01 == 8 );\n   csz01 = str01.find(str03, 3);\n-  test &= csz01 == 8;\n+  VERIFY( csz01 == 8 );\n   csz01 = str01.find(str03, 12);\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n \n   // An empty string consists of no characters\n   // therefore it should be found at every point in a string,\n   // except beyond the end\n   csz01 = str01.find(str04, 0);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find(str04, 5);\n-  test &= csz01 == 5;\n+  VERIFY( csz01 == 5 );\n   csz01 = str01.find(str04, str01.size());\n-  test &= csz01 == str01.size(); \n+  VERIFY( csz01 == str01.size() ); \n   csz01 = str01.find(str04, str01.size()+1);\n-  test &= csz01 == npos; \n+  VERIFY( csz01 == npos ); \n   \n   // size_type find(const char* s, size_type pos, size_type n) const;\n   csz01 = str01.find(str_lit01, 0, 3);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find(str_lit01, 3, 0);\n-  test &= csz01 == 3;\n+  VERIFY( csz01 == 3 );\n \n   // size_type find(const char* s, size_type pos = 0) const;\n   csz01 = str01.find(str_lit01);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find(str_lit01, 3);\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n \n   // size_type find(char c, size_type pos = 0) const;\n   csz01 = str01.find('z');\n   csz02 = str01.size() - 1;\n-  test &= csz01 == csz02;\n+  VERIFY( csz01 == csz02 );\n   csz01 = str01.find('/');\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n    \n   // size_type find_first_of(const string&, size_type pos = 0) const;\n   std::string str05(\"xena rulez\");\n   csz01 = str01.find_first_of(str01);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find_first_of(str01, 4);\n-  test &= csz01 == 4;\n+  VERIFY( csz01 == 4 );\n   csz01 = str01.find_first_of(str02, 0);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find_first_of(str02, 3);\n-  test &= csz01 == 3;\n+  VERIFY( csz01 == 3 );\n   csz01 = str01.find_first_of(str03, 0);\n-  test &= csz01 == 8;\n+  VERIFY( csz01 == 8 );\n   csz01 = str01.find_first_of(str03, 3);\n-  test &= csz01 == 8;\n+  VERIFY( csz01 == 8 );\n   csz01 = str01.find_first_of(str03, 12);\n-  test &= csz01 == 16;\n+  VERIFY( csz01 == 16 );\n   csz01 = str01.find_first_of(str05, 0);\n-  test &= csz01 == 1;\n+  VERIFY( csz01 == 1 );\n   csz01 = str01.find_first_of(str05, 4);\n-  test &= csz01 == 4;\n+  VERIFY( csz01 == 4 );\n \n   // An empty string consists of no characters\n   // therefore it should be found at every point in a string,\n   // except beyond the end\n   // However, str1.find_first_of(str2,pos) finds the first character in \n   // str1 (starting at pos) that exists in str2, which is none for empty str2\n   csz01 = str01.find_first_of(str04, 0);\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n   csz01 = str01.find_first_of(str04, 5);\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n   \n   // size_type find_first_of(const char* s, size_type pos, size_type n) const;\n   csz01 = str01.find_first_of(str_lit01, 0, 3);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find_first_of(str_lit01, 3, 0);\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n \n   // size_type find_first_of(const char* s, size_type pos = 0) const;\n   csz01 = str01.find_first_of(str_lit01);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.find_first_of(str_lit01, 3);\n-  test &= csz01 == 3;\n+  VERIFY( csz01 == 3 );\n \n   // size_type find_first_of(char c, size_type pos = 0) const;\n   csz01 = str01.find_first_of('z');\n   csz02 = str01.size() - 1;\n-  test &= csz01 == csz02;\n+  VERIFY( csz01 == csz02 );\n \n   // size_type find_last_of(const string& str, size_type pos = 0) const;\n   // size_type find_last_of(const char* s, size_type pos, size_type n) const;\n@@ -146,45 +144,45 @@ bool test01(void)\n   std::string x;\n   std::string::size_type pos;\n   pos = x.find_last_not_of('X');\n-  test &= pos == npos;\n+  VERIFY( pos == npos );\n   pos = x.find_last_not_of(\"XYZ\");\n-  test &= pos == npos;\n+  VERIFY( pos == npos );\n \n   std::string y(\"a\");\n   pos = y.find_last_not_of('X');\n-  test &= pos == 0;\n+  VERIFY( pos == 0 );\n   pos = y.find_last_not_of('a');\n-  test &= pos == npos;\n+  VERIFY( pos == npos );\n   pos = y.find_last_not_of(\"XYZ\");\n-  test &= pos == 0;\n+  VERIFY( pos == 0 );\n   pos = y.find_last_not_of(\"a\");\n-  test &= pos == npos;\n+  VERIFY( pos == npos );\n \n   std::string z(\"ab\");\n   pos = z.find_last_not_of('X');\n-  test &= pos == 1;\n+  VERIFY( pos == 1 );\n   pos = z.find_last_not_of(\"XYZ\");\n-  test &= pos == 1;\n+  VERIFY( pos == 1 );\n   pos = z.find_last_not_of('b');\n-  test &= pos == 0;\n+  VERIFY( pos == 0 );\n   pos = z.find_last_not_of(\"Xb\");\n-  test &= pos == 0;\n+  VERIFY( pos == 0 );\n   pos = z.find_last_not_of(\"Xa\");\n-  test &= pos == 1;\n+  VERIFY( pos == 1 );\n   pos = z.find_last_of(\"ab\");\n-  test &= pos == 1;\n+  VERIFY( pos == 1 );\n   pos = z.find_last_of(\"Xa\");\n-  test &= pos == 0;\n+  VERIFY( pos == 0 );\n   pos = z.find_last_of(\"Xb\");\n-  test &= pos == 1;\n+  VERIFY( pos == 1 );\n   pos = z.find_last_of(\"XYZ\");\n-  test &= pos == std::string::npos;\n+  VERIFY( pos == std::string::npos );\n   pos = z.find_last_of('a');\n-  test &= pos == 0;\n+  VERIFY( pos == 0 );\n   pos = z.find_last_of('b');\n-  test &= pos == 1;\n+  VERIFY( pos == 1 );\n   pos = z.find_last_of('X');\n-  test &= pos == std::string::npos;\n+  VERIFY( pos == std::string::npos );\n #endif\n \n #ifdef DEBUG_ASSERT"}, {"sha": "da51000bd0856d76bced68f3bcdfa621ff378abd", "filename": "libstdc++-v3/testsuite/21_strings/insert.cc", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finsert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finsert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finsert.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n int test01(void)\n {\n@@ -56,27 +54,27 @@ int test01(void)\n   csz02 = str02.size();\n   try {\n     str03.insert(csz01 + 1, str02, 0, 5);\n-    test &= false;\n+    VERIFY( false );\n   }\t\t \n   catch(std::out_of_range& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   str03 = str01; \n   csz01 = str03.size();\n   csz02 = str02.size();\n   try {\n     str03.insert(0, str02, csz02 + 1, 5);\n-    test &= false;\n+    VERIFY( false );\n   }\t\t \n   catch(std::out_of_range& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   csz01 = str01.max_size();\n@@ -86,87 +84,87 @@ int test01(void)\n     csz02 = str02.size();\n     try {\n       str03.insert(0, str02, 0, 5);\n-      test &= false;\n+      VERIFY( false );\n     }\t\t \n     catch(std::length_error& fail) {\n-      test &= true;\n+      VERIFY( true );\n     }\n     catch(...) {\n-      test &= false;\n+      VERIFY( false );\n     }\n   }\n   catch(std::bad_alloc& failure){\n-    test &= true; \n+    VERIFY( true ); \n   }\n   catch(std::exception& failure){\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   str03 = str01; \n   csz01 = str03.size();\n   csz02 = str02.size();\n   str03.insert(13, str02, 0, 12); \n-  test&= str03 == \"rodeo beach, baker beach,marin\";\n+  VERIFY( str03 == \"rodeo beach, baker beach,marin\" );\n \n   str03 = str01; \n   csz01 = str03.size();\n   csz02 = str02.size();\n   str03.insert(0, str02, 0, 12); \n-  test&= str03 == \"baker beach,rodeo beach, marin\";\n+  VERIFY( str03 == \"baker beach,rodeo beach, marin\" );\n \n   str03 = str01; \n   csz01 = str03.size();\n   csz02 = str02.size();\n   str03.insert(csz01, str02, 0, csz02); \n-  test&= str03 == \"rodeo beach, marinbaker beach, san francisco\";\n+  VERIFY( str03 == \"rodeo beach, marinbaker beach, san francisco\" );\n \n   // string& insert(size_type __p, const string& string);\n   // insert(p1, str, 0, npos)\n   str03 = str01; \n   csz01 = str03.size();\n   csz02 = str02.size();\n   str03.insert(csz01, str02); \n-  test&= str03 == \"rodeo beach, marinbaker beach, san francisco\";\n+  VERIFY( str03 == \"rodeo beach, marinbaker beach, san francisco\" );\n \n   str03 = str01; \n   csz01 = str03.size();\n   csz02 = str02.size();\n   str03.insert(0, str02); \n-  test&= str03 == \"baker beach, san franciscorodeo beach, marin\";\n+  VERIFY( str03 == \"baker beach, san franciscorodeo beach, marin\" );\n \n   // string& insert(size_type __p, const char* s, size_type n);\n   // insert(p1, string(s,n))\n   str03 = str02; \n   csz01 = str03.size();\n   str03.insert(0, \"-break at the bridge\", 20); \n-  test&= str03 == \"-break at the bridgebaker beach, san francisco\";\n+  VERIFY( str03 == \"-break at the bridgebaker beach, san francisco\" );\n \n   // string& insert(size_type __p, const char* s);\n   // insert(p1, string(s))\n   str03 = str02; \n   str03.insert(0, \"-break at the bridge\"); \n-  test&= str03 == \"-break at the bridgebaker beach, san francisco\";\n+  VERIFY( str03 == \"-break at the bridgebaker beach, san francisco\" );\n \n   // string& insert(size_type __p, size_type n, char c)\n   // insert(p1, string(n,c))\n   str03 = str02; \n   csz01 = str03.size();\n   str03.insert(csz01, 5, 'z'); \n-  test&= str03 == \"baker beach, san franciscozzzzz\";\n+  VERIFY( str03 == \"baker beach, san franciscozzzzz\" );\n \n   // iterator insert(iterator p, char c)\n   // inserts a copy of c before the character referred to by p\n   str03 = str02; \n   citerator cit01 = str03.begin();\n   str03.insert(cit01, 'u'); \n-  test&= str03 == \"ubaker beach, san francisco\";\n+  VERIFY( str03 == \"ubaker beach, san francisco\" );\n \n   // iterator insert(iterator p, size_type n,  char c)\n   // inserts n copies of c before the character referred to by p\n   str03 = str02; \n   cit01 = str03.begin();\n   str03.insert(cit01, 5, 'u'); \n-  test&= str03 == \"uuuuubaker beach, san francisco\";\n+  VERIFY( str03 == \"uuuuubaker beach, san francisco\" );\n \n   // template<inputit>\n   //   void \n@@ -176,12 +174,12 @@ int test01(void)\n   str03 = str02; \n   csz01 = str03.size();\n   str03.insert(str03.begin(), str01.begin(), str01.end()); \n-  test&= str03 == \"rodeo beach, marinbaker beach, san francisco\";\n+  VERIFY( str03 == \"rodeo beach, marinbaker beach, san francisco\" );\n \n   str03 = str02; \n   csz01 = str03.size();\n   str03.insert(str03.end(), str01.begin(), str01.end()); \n-  test&= str03 == \"baker beach, san franciscorodeo beach, marin\";\n+  VERIFY( str03 == \"baker beach, san franciscorodeo beach, marin\" );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "6b1c2d8dbfea9dd6e5d0b77d9b8fac7a76837168", "filename": "libstdc++-v3/testsuite/21_strings/inserters_extractors.cc", "status": "modified", "additions": 49, "deletions": 51, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finserters_extractors.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -29,9 +29,7 @@\n #include <sstream>\n #include <fstream>\n #include <iostream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -54,91 +52,91 @@ bool test01(void)\n   // istream& operator>>(istream&, string&)\n   std::istringstream istrs01(str01);\n   istrs01 >> str10;\n-  test &= str10 == str02;\n+  VERIFY( str10 == str02 );\n   try {\n     std::istringstream::int_type i01 = istrs01.peek(); //a-boo\n-    test &= std::istringstream::traits_type::to_char_type(i01) == ' ';\n+    VERIFY( std::istringstream::traits_type::to_char_type(i01) == ' ' );\n   }\n   catch(std::exception& fail) {\n-    test &= false; // shouldn't throw\n+    VERIFY( false ); // shouldn't throw\n   }\n \n   istrs01 >> str10; \n-  test &= str10 == str03; \n+  VERIFY( str10 == str03 ); \n   istrs01 >> str10; \n-  test &= str10 == str04; // sentry picks out the white spaces. . \n+  VERIFY( str10 == str04 ); // sentry picks out the white spaces. . \n \n   std::istringstream istrs02(str05); // empty\n   istrs02 >> str10;\n-  test &= str10 == str04;\n+  VERIFY( str10 == str04 );\n  \n   // istream& getline(istream&, string&, char)\n   // istream& getline(istream&, string&)\n   try {\n     getline(istrs01, str10);\n-    test &= !istrs01.fail();\n-    test &= !istrs01.eof();\n-    test &= istrs01.good();\n-    test &= str10 == \" bay\";\n+    VERIFY( !istrs01.fail() );\n+    VERIFY( !istrs01.eof() );\n+    VERIFY( istrs01.good() );\n+    VERIFY( str10 == \" bay\" );\n   }\n   catch(std::exception& fail) {\n-    test &= false; // shouldn't throw\n+    VERIFY( false ); // shouldn't throw\n   }\n \n   try {\n     istrs01.clear();\n     getline(istrs01, str10,'\\t');\n-    test &= !istrs01.fail();\n-    test &= !istrs01.eof();\n-    test &= istrs01.good();\n-    test &= str10 == str05;\n+    VERIFY( !istrs01.fail() );\n+    VERIFY( !istrs01.eof() );\n+    VERIFY( istrs01.good() );\n+    VERIFY( str10 == str05 );\n   }\n   catch(std::exception& fail) {\n-    test &= false; // shouldn't throw\n+    VERIFY( false ); // shouldn't throw\n   }\n \n   try {\n     istrs01.clear();\n     getline(istrs01, str10,'\\t');\n-    test &= !istrs01.fail();\n-    test &= !istrs01.eof();\n-    test &= istrs01.good();\n-    test &= str10 == str05;\n+    VERIFY( !istrs01.fail() );\n+    VERIFY( !istrs01.eof() );\n+    VERIFY( istrs01.good() );\n+    VERIFY( str10 == str05 );\n   }\n   catch(std::exception& fail) {\n-    test &= false; // shouldn't throw\n+    VERIFY( false ); // shouldn't throw\n   }\n \n   try {\n     istrs01.clear();\n     getline(istrs01, str10, '.');\n-    test &= !istrs01.fail();\n-    test &= istrs01.eof();\n-    test &= !istrs01.good();\n-    test &= str10 == \"\\t    from Elk Rapids to the point reminds me of miles\";\n+    VERIFY( !istrs01.fail() );\n+    VERIFY( istrs01.eof() );\n+    VERIFY( !istrs01.good() );\n+    VERIFY( str10 == \"\\t    from Elk Rapids to the point reminds me of miles\" );\n   }\n   catch(std::exception& fail) {\n-    test &= false; // shouldn't throw\n+    VERIFY( false ); // shouldn't throw\n   }\n \n   try {\n     getline(istrs02, str10);\n-    test &= istrs02.fail();\n-    test &= istrs02.eof();\n-    test &= str10 == \"\\t    from Elk Rapids to the point reminds me of miles\";\n+    VERIFY( istrs02.fail() );\n+    VERIFY( istrs02.eof() );\n+    VERIFY( str10 == \"\\t    from Elk Rapids to the point reminds me of miles\" );\n   }\n   catch(std::exception& fail) {\n-    test &= false; // shouldn't throw\n+    VERIFY( false ); // shouldn't throw\n   }\n \n   // ostream& operator<<(ostream&, const basic_string&)\n   std::ostringstream ostrs01;\n   try {\n     ostrs01 << str01;\n-    test &= ostrs01.str() == str01;\n+    VERIFY( ostrs01.str() == str01 );\n   }\n   catch(std::exception& fail) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   std::string hello_world;\n@@ -161,8 +159,8 @@ void test04(int size)\n   std::ostringstream oss(str);\n   \n   // sanity checks\n-  test &= str.size() == size;\n-  test &= oss.good();\n+  VERIFY( str.size() == size );\n+  VERIFY( oss.good() );\n \n   // stress test\n   oss << str << std::endl;\n@@ -173,10 +171,10 @@ void test04(int size)\n   if (!oss.good()) \n     test = false;\n \n-  test &= str.size() == size;\n-  test &= oss.good();\n+  VERIFY( str.size() == size );\n+  VERIFY( oss.good() );\n   std::string str_tmp = oss.str();\n-  test &= str_tmp.size() == expected_size;\n+  VERIFY( str_tmp.size() == expected_size );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -196,8 +194,8 @@ void test05(int size)\n   std::string str(size, fillc);\n \n   // sanity checks\n-  test &= str.size() == size;\n-  test &= ofs.good();\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n \n   // stress test\n   ofs << str << std::endl;\n@@ -208,8 +206,8 @@ void test05(int size)\n   if (!ofs.good()) \n     test = false;\n \n-  test &= str.size() == size;\n-  test &= ofs.good();\n+  VERIFY( str.size() == size );\n+  VERIFY( ofs.good() );\n \n   ofs.close();\n \n@@ -229,7 +227,7 @@ void test05(int size)\n \tbreak;\n     }\n \n-  test &= count == 2 * size;\n+  VERIFY( count == 2 * size );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -251,16 +249,16 @@ void test06(void)\n   str01.erase(0, 1);\n   size_type i03 = str01.size();\n   size_type i04 = str01.capacity();\n-  test &= i01 - 1 == i03;\n-  test &= i02 >= i04;\n+  VERIFY( i01 - 1 == i03 );\n+  VERIFY( i02 >= i04 );\n \n   std::istringstream is(str01);\n   std::string str02;\n   is >> str02 >> std::ws;\n   size_type i05 = str02.size();\n   size_type i06 = str02.capacity();\n-  test &= i05 == i03;\n-  test &= i06 <= i04;\n+  VERIFY( i05 == i03 );\n+  VERIFY( i06 <= i04 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -281,8 +279,8 @@ void test07(void)\n   while (iss >> s) \n     ++i;\n \n-  test &= i < 3;\n-  test &= static_cast<bool>(iss.rdstate() & std::ios_base::failbit);\n+  VERIFY( i < 3 );\n+  VERIFY( static_cast<bool>(iss.rdstate() & std::ios_base::failbit) );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "5a00281170f1011dfe496fb89bc28bb6f03e34e8", "filename": "libstdc++-v3/testsuite/21_strings/invariants.cc", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finvariants.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finvariants.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Finvariants.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n // Do a quick sanity check on known problems with element access and\n // ref-counted strings. These should all pass, regardless of the\n@@ -60,48 +58,48 @@ bool test01(void)\n   str03 = str01;\n   it1 = str01.begin();\n   *it1 = 'x';\n-  test &= str01[0] == 'x';\n-  test &= str03[0] == 'm';\n+  VERIFY( str01[0] == 'x' );\n+  VERIFY( str03[0] == 'm' );\n \n   str03 = str01; \n   csz01 = str01.size();\n   rit1 = str01.rbegin(); // NB: Pointing at one-past the end, so ...\n   *rit1 = 'z'; \t\t // ... but it's taken care of here \n-  test &= str01[csz01 - 1] == 'z';\n-  test &= str03[csz01 - 1] == 'y';\n+  VERIFY( str01[csz01 - 1] == 'z' );\n+  VERIFY( str03[csz01 - 1] == 'y' );\n \n   str03 = str01;\n   csz01 = str01.size();\n   std::string::reference r1 = str01.at(csz01 - 2);\n-  test &= str03 == str01;\n+  VERIFY( str03 == str01 );\n   r1 = 'd';\n-  test &= str01[csz01 - 2] == 'd';\n-  test &= str03[csz01 - 2] == 'a';\n+  VERIFY( str01[csz01 - 2] == 'd' );\n+  VERIFY( str03[csz01 - 2] == 'a' );\n \n   str03 = str01; \n   csz01 = str01.size();\n   std::string::reference r2 = str01[csz01 - 3];\n-  test &= str03 == str01;\n+  VERIFY( str03 == str01 );\n   r2 = 'w'; \n-  test &= str01[csz01 - 3] == 'w';\n-  test &= str03[csz01 - 3] == 'b';\n+  VERIFY( str01[csz01 - 3] == 'w' );\n+  VERIFY( str03[csz01 - 3] == 'b' );\n \n   str03 = str01;\n   csz02 = str01.size();\n   it1 = str01.end();\n-  test &= str03 == str01;\n+  VERIFY( str03 == str01 );\n   --it1;\n   *it1 = 'q'; \n-  test &= str01[csz02 - 1] == 'q';\n-  test &= str03[csz02 - 1] == 'z';\n+  VERIFY( str01[csz02 - 1] == 'q' );\n+  VERIFY( str03[csz02 - 1] == 'z' );\n \n   str03 = str01;\n   rit1 = str01.rend();\n-  test &= str03 == str01;\n+  VERIFY( str03 == str01 );\n   --rit1; \t\n   *rit1 = 'p'; \n-  test &= str01[0] == 'p';\n-  test &= str03[0] == 'x';\n+  VERIFY( str01[0] == 'p' );\n+  VERIFY( str03[0] == 'x' );\n \n   // need to also test for const begin/const end\n #ifdef DEBUG_ASSERT\n@@ -129,39 +127,39 @@ bool test02(void)\n   std::string str05 = str02; // optional, so that begin below causes a mutate\n   std::string::iterator p = str02.insert(str02.begin(), ' ');\n   std::string str03 = str02;\n-  test &= str03 == str02;\n+  VERIFY( str03 == str02 );\n   *p = '!';\n-  test &= *str03.c_str() == ' ';\n+  VERIFY( *str03.c_str() == ' ' );\n   str03[0] = '@';\n-  test &= str02[0] == '!';\n-  test &= *p == '!';\n-  test &= str02 != str05;\n-  test &= str02 != str03;\n+  VERIFY( str02[0] == '!' );\n+  VERIFY( *p == '!' );\n+  VERIFY( str02 != str05 );\n+  VERIFY( str02 != str03 );\n \n   std::string str10 = str01;\n   std::string::iterator p2 = str10.insert(str10.begin(), 'a');\n   std::string str11 = str10;\n   *p2 = 'e';\n-  test &= str11 != str10;\n+  VERIFY( str11 != str10 );\n \n   std::string str06 = str01;\n   std::string str07 = str06; // optional, so that begin below causes a mutate\n   p = str06.erase(str06.begin());\n   std::string str08 = str06;\n-  test &= str08 == str06;\n+  VERIFY( str08 == str06 );\n   *p = '!';\n-  test &=  *str08.c_str() == 't';\n+  VERIFY( *str08.c_str() == 't' );\n   str08[0] = '@';\n-  test &= str06[0] == '!';\n-  test &= *p == '!';\n-  test &= str06 != str07;\n-  test &= str06 != str08;\n+  VERIFY( str06[0] == '!' );\n+  VERIFY( *p == '!' );\n+  VERIFY( str06 != str07 );\n+  VERIFY( str06 != str08 );\n \n   std::string str12 = str01;\n   p2 = str12.erase(str12.begin(), str12.begin() + str12.size() - 1);\n   std::string str13 = str12;\n   *p2 = 'e';\n-  test &= str12 != str13;\n+  VERIFY( str12 != str13 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "61704fda6ccccb15d347e6c850cabe7591b16052", "filename": "libstdc++-v3/testsuite/21_strings/nonmember.cc", "status": "modified", "additions": 111, "deletions": 113, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fnonmember.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fnonmember.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fnonmember.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -111,9 +111,7 @@ template<class charT, class traits, class Allocator>\n */\n \n #include <string>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n int test01(void)\n {\n@@ -126,114 +124,114 @@ int test01(void)\n   \n   str_4 = str_0;\n   //comparisons between string objects\n-  test &= !(str_0 == str_1);\n-  test &= !(str_0 == str_2);\n-  test &= !(str_0 == str_3);\n-  test &= !(str_1 == str_0);\n-  test &= !(str_2 == str_0);\n-  test &= !(str_3 == str_0);\n-  test &= str_4 == str_0;\n-  test &= str_0 == str_4;\n-\n-  test &= str_0 != str_1;\n-  test &= str_0 != str_2;\n-  test &= str_0 != str_3;\n-  test &= str_1 != str_0;\n-  test &= str_2 != str_0;\n-  test &= str_3 != str_0;\n-  test &= !(str_0 != str_4);\n-  test &= !(str_4 != str_0);\n+  VERIFY( !(str_0 == str_1) );\n+  VERIFY( !(str_0 == str_2) );\n+  VERIFY( !(str_0 == str_3) );\n+  VERIFY( !(str_1 == str_0) );\n+  VERIFY( !(str_2 == str_0) );\n+  VERIFY( !(str_3 == str_0) );\n+  VERIFY( str_4 == str_0 );\n+  VERIFY( str_0 == str_4 );\n+\n+  VERIFY( str_0 != str_1 );\n+  VERIFY( str_0 != str_2 );\n+  VERIFY( str_0 != str_3 );\n+  VERIFY( str_1 != str_0 );\n+  VERIFY( str_2 != str_0 );\n+  VERIFY( str_3 != str_0 );\n+  VERIFY( !(str_0 != str_4) );\n+  VERIFY( !(str_4 != str_0) );\n    \n-  test &= str_0 > str_1; //true cuz r>m\n-  test &= str_0 > str_2;\n-  test &= !(str_0 > str_3);\n-  test &= !(str_1 > str_0); //false cuz m<r\n-  test &= !(str_2 > str_0);\n-  test &= str_3 > str_0;\n-  test &= !(str_0 > str_4);\n-  test &= !(str_4 > str_0);\n-\n-  test &= !(str_0 < str_1); //false cuz r>m\n-  test &= !(str_0 < str_2);\n-  test &= str_0 < str_3;\n-  test &= str_1 < str_0; //true cuz m<r\n-  test &= str_2 < str_0;\n-  test &= !(str_3 < str_0);\n-  test &= !(str_0 < str_4);\n-  test &= !(str_4 < str_0);\n-\n-  test &= str_0 >= str_1; //true cuz r>m\n-  test &= str_0 >= str_2;\n-  test &= !(str_0 >= str_3);\n-  test &= !(str_1 >= str_0);//false cuz m<r\n-  test &= !(str_2 >= str_0);\n-  test &= str_3 >= str_0;\n-  test &= str_0 >= str_4;\n-  test &= str_4 >= str_0;\n-\n-  test &= !(str_0 <= str_1);//false cuz r>m\n-  test &= !(str_0 <= str_2);\n-  test &= str_0 <= str_3;\n-  test &= str_1 <= str_0;//true cuz m<r\n-  test &= str_2 <= str_0;\n-  test &= !(str_3 <= str_0);\n-  test &= str_0 <= str_4;\n-  test &= str_4 <= str_0;\n+  VERIFY( str_0 > str_1 ); //true cuz r>m\n+  VERIFY( str_0 > str_2 );\n+  VERIFY( !(str_0 > str_3) );\n+  VERIFY( !(str_1 > str_0) ); //false cuz m<r\n+  VERIFY( !(str_2 > str_0) );\n+  VERIFY( str_3 > str_0 );\n+  VERIFY( !(str_0 > str_4) );\n+  VERIFY( !(str_4 > str_0) );\n+\n+  VERIFY( !(str_0 < str_1) ); //false cuz r>m\n+  VERIFY( !(str_0 < str_2) );\n+  VERIFY( str_0 < str_3 );\n+  VERIFY( str_1 < str_0 ); //true cuz m<r\n+  VERIFY( str_2 < str_0 );\n+  VERIFY( !(str_3 < str_0) );\n+  VERIFY( !(str_0 < str_4) );\n+  VERIFY( !(str_4 < str_0) );\n+\n+  VERIFY( str_0 >= str_1 ); //true cuz r>m\n+  VERIFY( str_0 >= str_2 );\n+  VERIFY( !(str_0 >= str_3) );\n+  VERIFY( !(str_1 >= str_0) );//false cuz m<r\n+  VERIFY( !(str_2 >= str_0) );\n+  VERIFY( str_3 >= str_0 );\n+  VERIFY( str_0 >= str_4 );\n+  VERIFY( str_4 >= str_0 );\n+\n+  VERIFY( !(str_0 <= str_1) );//false cuz r>m\n+  VERIFY( !(str_0 <= str_2) );\n+  VERIFY( str_0 <= str_3 );\n+  VERIFY( str_1 <= str_0 );//true cuz m<r\n+  VERIFY( str_2 <= str_0 );\n+  VERIFY( !(str_3 <= str_0) );\n+  VERIFY( str_0 <= str_4 );\n+  VERIFY( str_4 <= str_0 );\n \n   //comparisons between string object and string literal\n-  test &= !(str_0 == \"costa marbella\");\n-  test &= !(str_0 == \"cost\");\n-  test &= !(str_0 == \"costa ricans\");\n-  test &= !(\"costa marbella\" == str_0);\n-  test &= !(\"cost\" == str_0);\n-  test &= !(\"costa ricans\" == str_0);\n-  test &= \"costa rica\" == str_0;\n-  test &= str_0 == \"costa rica\";\n-\n-  test &= str_0 != \"costa marbella\";\n-  test &= str_0 != \"cost\";\n-  test &= str_0 != \"costa ricans\";\n-  test &= \"costa marbella\" != str_0;\n-  test &= \"cost\" != str_0;\n-  test &= \"costa ricans\" != str_0;\n-  test &= !(\"costa rica\" != str_0);\n-  test &= !(str_0 != \"costa rica\");\n-\n-  test &= str_0 > \"costa marbella\"; //true cuz r>m\n-  test &= str_0 > \"cost\";\n-  test &= !(str_0 > \"costa ricans\");\n-  test &= !(\"costa marbella\" > str_0);//false cuz m<r\n-  test &= !(\"cost\" > str_0);\n-  test &= \"costa ricans\" > str_0;\n-  test &= !(\"costa rica\" > str_0);\n-  test &= !(str_0 > \"costa rica\");\n-\n-  test &= !(str_0 < \"costa marbella\");//false cuz r>m\n-  test &= !(str_0 < \"cost\");\n-  test &= str_0 < \"costa ricans\";\n-  test &= \"costa marbella\" < str_0;//true cuz m<r\n-  test &= \"cost\" < str_0;\n-  test &= !(\"costa ricans\" < str_0);\n-  test &= !(\"costa rica\" < str_0);\n-  test &= !(str_0 < \"costa rica\");\n-\n-  test &= str_0 >= \"costa marbella\";//true cuz r>m\n-  test &= str_0 >= \"cost\";\n-  test &= !(str_0 >= \"costa ricans\");\n-  test &= !(\"costa marbella\" >= str_0);//false cuz m<r\n-  test &= !(\"cost\" >= str_0);\n-  test &= \"costa ricans\" >= str_0;\n-  test &= \"costa rica\" >= str_0;\n-  test &= str_0 >= \"costa rica\";\n-\n-  test &= !(str_0 <= \"costa marbella\");//false cuz r>m\n-  test &= !(str_0 <= \"cost\");\n-  test &= str_0 <= \"costa ricans\";\n-  test &= \"costa marbella\" <= str_0;//true cuz m<r\n-  test &= \"cost\" <= str_0;\n-  test &= !(\"costa ricans\" <= str_0);\n-  test &= \"costa rica\" <= str_0;\n-  test &= str_0 <= \"costa rica\";\n+  VERIFY( !(str_0 == \"costa marbella\") );\n+  VERIFY( !(str_0 == \"cost\") );\n+  VERIFY( !(str_0 == \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" == str_0) );\n+  VERIFY( !(\"cost\" == str_0) );\n+  VERIFY( !(\"costa ricans\" == str_0) );\n+  VERIFY( \"costa rica\" == str_0 );\n+  VERIFY( str_0 == \"costa rica\" );\n+\n+  VERIFY( str_0 != \"costa marbella\" );\n+  VERIFY( str_0 != \"cost\" );\n+  VERIFY( str_0 != \"costa ricans\" );\n+  VERIFY( \"costa marbella\" != str_0 );\n+  VERIFY( \"cost\" != str_0 );\n+  VERIFY( \"costa ricans\" != str_0 );\n+  VERIFY( !(\"costa rica\" != str_0) );\n+  VERIFY( !(str_0 != \"costa rica\") );\n+\n+  VERIFY( str_0 > \"costa marbella\" ); //true cuz r>m\n+  VERIFY( str_0 > \"cost\" );\n+  VERIFY( !(str_0 > \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" > str_0) );//false cuz m<r\n+  VERIFY( !(\"cost\" > str_0) );\n+  VERIFY( \"costa ricans\" > str_0 );\n+  VERIFY( !(\"costa rica\" > str_0) );\n+  VERIFY( !(str_0 > \"costa rica\") );\n+\n+  VERIFY( !(str_0 < \"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 < \"cost\") );\n+  VERIFY( str_0 < \"costa ricans\" );\n+  VERIFY( \"costa marbella\" < str_0 );//true cuz m<r\n+  VERIFY( \"cost\" < str_0 );\n+  VERIFY( !(\"costa ricans\" < str_0) );\n+  VERIFY( !(\"costa rica\" < str_0) );\n+  VERIFY( !(str_0 < \"costa rica\") );\n+\n+  VERIFY( str_0 >= \"costa marbella\" );//true cuz r>m\n+  VERIFY( str_0 >= \"cost\" );\n+  VERIFY( !(str_0 >= \"costa ricans\") );\n+  VERIFY( !(\"costa marbella\" >= str_0) );//false cuz m<r\n+  VERIFY( !(\"cost\" >= str_0) );\n+  VERIFY( \"costa ricans\" >= str_0 );\n+  VERIFY( \"costa rica\" >= str_0 );\n+  VERIFY( str_0 >= \"costa rica\" );\n+\n+  VERIFY( !(str_0 <= \"costa marbella\") );//false cuz r>m\n+  VERIFY( !(str_0 <= \"cost\") );\n+  VERIFY( str_0 <= \"costa ricans\" );\n+  VERIFY( \"costa marbella\" <= str_0 );//true cuz m<r\n+  VERIFY( \"cost\" <= str_0 );\n+  VERIFY( !(\"costa ricans\" <= str_0) );\n+  VERIFY( \"costa rica\" <= str_0 );\n+  VERIFY( str_0 <= \"costa rica\" );\n \n   // 21.3.7.1 operator+\n /*\n@@ -262,19 +260,19 @@ template<class charT, class traits, class Allocator>\n */\n \n   str_4 = str_0 + \"ns\";\n-  test &= str_4 == str_3;\n+  VERIFY( str_4 == str_3 );\n \n   const std::string str_5(\" marbella\");\n   str_4 = \"costa\" + str_5;\n-  test &= str_4 == str_1;\n+  VERIFY( str_4 == str_1 );\n \n   std::string str_6(\"ns\");\n   str_4 = str_0 + str_6;\n-  test &= str_4 == str_3;\n+  VERIFY( str_4 == str_3 );\n \n   str_4 = str_0 + 'n';\n   str_4 = str_4 + 's';\n-  test &= str_4 == str_3;\n+  VERIFY( str_4 == str_3 );\n \n   str_4 = 'a' + str_6;\n   str_4 = 'c' + str_4;\n@@ -286,7 +284,7 @@ template<class charT, class traits, class Allocator>\n   str_4 = 's' + str_4;\n   str_4 = 'o' + str_4;\n   str_4 = 'c' + str_4;\n-  test &= str_4 == str_3;\n+  VERIFY( str_4 == str_3 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "996d7d566ef5127f0f16d13b76970db02ee85890", "filename": "libstdc++-v3/testsuite/21_strings/operations.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Foperations.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Foperations.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Foperations.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <cstdio>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n int test01(void)\n {"}, {"sha": "2ad1ab61a6590d91872dd68d7e6b8d4c54361181", "filename": "libstdc++-v3/testsuite/21_strings/replace.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Freplace.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -60,23 +58,23 @@ bool test01(void)\n   std::string x = X;\n \n   char ch = x[0];\n-  test &= ch == 'H';\n+  VERIFY( ch == 'H' );\n \n   std::string z = x.substr(2, 3);\n-  test &= z == \"llo\";\n+  VERIFY( z == \"llo\" );\n \n   x.replace(2, 2, \"r\");\n-  test &= x == \"Hero\";\n+  VERIFY( x == \"Hero\" );\n \n   x = X;\n   x.replace(0, 1, \"j\");\n-  test &= x == \"jello\";\n+  VERIFY( x == \"jello\" );\n \n   int ar[] = { 'H', 'e', 'l', 'l', 'o' };\n   x.replace(std::find(x.begin(), x.end(), 'l'), \n \t    std::find(x.rbegin(), x.rend(), 'l').base(), ar, \n \t    ar + sizeof(ar) / sizeof(ar[0]));\n-  test &= x == \"jeHelloo\";\n+  VERIFY( x == \"jeHelloo\" );\n #endif\n \n #ifdef DEBUG_ASSERT"}, {"sha": "cf826dda52cac4df82ceb85607ab63786b834c95", "filename": "libstdc++-v3/testsuite/21_strings/rfind.cc", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Frfind.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Frfind.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Frfind.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -20,9 +20,7 @@\n \n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n // 21.3.6.2 basic_string rfind\n bool test01(void)\n@@ -42,50 +40,50 @@ bool test01(void)\n \n   // size_type rfind(const string&, size_type pos = 0) const;\n   csz01 = str01.rfind(str01);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.rfind(str01, 4);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.rfind(str02,3);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.rfind(str02);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.rfind(str03);\n-  test &= csz01 == 8;\n+  VERIFY( csz01 == 8 );\n   csz01 = str01.rfind(str03, 3);\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n   csz01 = str01.rfind(str03, 12);\n-  test &= csz01 == 8;\n+  VERIFY( csz01 == 8 );\n \n   // An empty string consists of no characters\n   // therefore it should be found at every point in a string,\n   // except beyond the end\n   csz01 = str01.rfind(str04, 0);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.rfind(str04, 5);\n-  test &= csz01 == 5;\n+  VERIFY( csz01 == 5 );\n   csz01 = str01.rfind(str04, str01.size());\n-  test &= csz01 == str01.size();\n+  VERIFY( csz01 == str01.size() );\n   csz01 = str01.rfind(str04, str01.size()+1);\n-  test &= csz01 == str01.size();\n+  VERIFY( csz01 == str01.size() );\n \n   // size_type rfind(const char* s, size_type pos, size_type n) const;\n   csz01 = str01.rfind(str_lit01, 0, 3);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.rfind(str_lit01, 3, 0);\n-  test &= csz01 == 3;\n+  VERIFY( csz01 == 3 );\n \n   // size_type rfind(const char* s, size_type pos = 0) const;\n   csz01 = str01.rfind(str_lit01);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n   csz01 = str01.rfind(str_lit01, 3);\n-  test &= csz01 == 0;\n+  VERIFY( csz01 == 0 );\n \n   // size_type rfind(char c, size_type pos = 0) const;\n   csz01 = str01.rfind('z');\n   csz02 = str01.size() - 1;\n-  test &= csz01 == csz02;\n+  VERIFY( csz01 == csz02 );\n   csz01 = str01.rfind('/');\n-  test &= csz01 == npos;\n+  VERIFY( csz01 == npos );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "5c643576276b4a0ca51f0254d3d6a8a758e16f25", "filename": "libstdc++-v3/testsuite/21_strings/substr.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fsubstr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fsubstr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fsubstr.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -43,30 +41,30 @@ bool test01(void)\n   //  substr(size_type pos = 0, size_type n = npos) const;\n   csz01 = str01.size();\n   str02 = str01.substr(0, 1);\n-  test &= str02 == \"r\";\n+  VERIFY( str02 == \"r\" );\n   str02 = str01.substr(10);\n-  test &= str02 == \"pacifica\";\n+  VERIFY( str02 == \"pacifica\" );\n \n   try {\n     str02 = str01.substr(csz01 + 1);\n-    test &= false; \n+    VERIFY( false ); \n   }\n   catch(std::out_of_range& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n  try {\n     str02 = str01.substr(csz01);\n-    test &= str02.size() == 0;\n+    VERIFY( str02.size() == 0 );\n   }\n   catch(std::out_of_range& fail) {\n-    test &= false;\n+    VERIFY( false );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n #ifdef DEBUG_ASSERT"}, {"sha": "2e91710c795075db4c53336129ae3f873e56538d", "filename": "libstdc++-v3/testsuite/22_locale/ctype_char_members.cc", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_char_members.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -31,9 +31,7 @@\n \n #include <locale>\n // NB: Don't include any other headers in this file.\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n class gnu_ctype: public std::ctype<char> {};\n \n@@ -59,37 +57,37 @@ void test01()\n   char c_array[len + 1];\n \n   // bool is(mask m, char c) const;\n-  test &= gctype.is(std::ctype_base::space, c30);\n-  test &= gctype.is(std::ctype_base::upper, c00);\n-  test &= gctype.is(std::ctype_base::lower, c10);\n-  test &= gctype.is(std::ctype_base::digit, c20);\n-  test &= gctype.is(std::ctype_base::punct, c40);\n-  test &= gctype.is(std::ctype_base::alpha, c50);\n-  test &= gctype.is(std::ctype_base::alpha, c60);\n-  test &= gctype.is(std::ctype_base::xdigit, c20);\n-  test &= !gctype.is(std::ctype_base::xdigit, c80);\n-  test &= gctype.is(std::ctype_base::alnum, c50);\n-  test &= gctype.is(std::ctype_base::alnum, c20);\n-  test &= gctype.is(std::ctype_base::graph, c40);\n-  test &= gctype.is(std::ctype_base::graph, c20);\n+  VERIFY( gctype.is(std::ctype_base::space, c30) );\n+  VERIFY( gctype.is(std::ctype_base::upper, c00) );\n+  VERIFY( gctype.is(std::ctype_base::lower, c10) );\n+  VERIFY( gctype.is(std::ctype_base::digit, c20) );\n+  VERIFY( gctype.is(std::ctype_base::punct, c40) );\n+  VERIFY( gctype.is(std::ctype_base::alpha, c50) );\n+  VERIFY( gctype.is(std::ctype_base::alpha, c60) );\n+  VERIFY( gctype.is(std::ctype_base::xdigit, c20) );\n+  VERIFY( !gctype.is(std::ctype_base::xdigit, c80) );\n+  VERIFY( gctype.is(std::ctype_base::alnum, c50) );\n+  VERIFY( gctype.is(std::ctype_base::alnum, c20) );\n+  VERIFY( gctype.is(std::ctype_base::graph, c40) );\n+  VERIFY( gctype.is(std::ctype_base::graph, c20) );\n \n   // char toupper(char c) const\n   c100 = gctype.toupper(c10);\n-  test &= c100 == c00;\n+  VERIFY( c100 == c00 );\n \n   // char tolower(char c) const\n   c100 = gctype.tolower(c00);\n-  test &= c100 == c10;\n+  VERIFY( c100 == c10 );\n \n   // char toupper(char* low, const char* hi) const\n   std::char_traits<char>::copy(c_array, strlit02, len + 1);\n   gctype.toupper(c_array, c_array + len);\n-  test &= !std::char_traits<char>::compare(c_array, strlit01, len - 1);\n+  VERIFY( !std::char_traits<char>::compare(c_array, strlit01, len - 1) );\n \n   // char tolower(char* low, const char* hi) const\n   std::char_traits<char>::copy(c_array, strlit01, len + 1);\n   gctype.tolower(c_array, c_array + len);\n-  test &= !std::char_traits<char>::compare(c_array, strlit02, len - 1);\n+  VERIFY( !std::char_traits<char>::compare(c_array, strlit02, len - 1) );\n \n \n #ifdef DEBUG_ASSERT"}, {"sha": "9741f24b4630602f9e5f00ffd40e1b5fec1d5a1c", "filename": "libstdc++-v3/testsuite/23_containers/bitset_ctor.cc", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_ctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_ctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_ctor.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <bitset>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -34,15 +32,15 @@ bool test01(void)\n   const size_t n1 = 5;\n   std::bitset<n1> bit01;\n   for (int i = 0; i < n1; ++i)\n-    test &= !bit01.test(i);\n+    VERIFY( !bit01.test(i) );\n \n   // bitset(unsigned long)\n   const size_t n2 = 32;\n   unsigned long ul1 = 2;\n   std::bitset<n2> bit02(ul1);\n-  test &= !bit02.test(0);\n-  test &= bit02.test(1);\n-  test &= !bit02.test(2);\n+  VERIFY( !bit02.test(0) );\n+  VERIFY( bit02.test(1) );\n+  VERIFY( !bit02.test(2) );\n \n   // template<_CharT, _Traits, _Alloc>\n   // explicit bitset(const basic_string<_C,_T,_A>&, size_type pos, size_type n)\n@@ -52,10 +50,10 @@ bool test01(void)\n     std::bitset<n3> bit03(str01, 5);\n   }\n   catch(std::invalid_argument& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test&= false;\n+    VERIFY( false );\n   }\n \n   std::string str02(\"010101000011\");\n@@ -66,13 +64,13 @@ bool test01(void)\n     for (int i = 0; i < sz; ++i)\n       str03 += (bit03.test(i) ? '1' : '0');\n     std::reverse(str03.begin(), str03.end());\n-    test &= str03 == str02;\n+    VERIFY( str03 == str02 );\n   }\n   catch(std::invalid_argument& fail) {\n-    test &= false;\n+    VERIFY( false );\n   }\n   catch(...) {\n-    test&= false;\n+    VERIFY( false );\n   }\n   \n "}, {"sha": "3ca2ee3db185dc4c8a13f93981c606065d4ef85c", "filename": "libstdc++-v3/testsuite/23_containers/bitset_shift.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_shift.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_shift.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_shift.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n #include <set>\n #include <bitset>\n \n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n static char original_bits[1024];\n static char left_shifted[1024];\n@@ -78,13 +76,13 @@ template <size_t size>\n       shifted <<= shift_step;\n       //correct = std::string(left_shifted);\n       correct = std::bitset<size> (std::string(left_shifted));\n-      test &= shifted == correct;\n+      VERIFY( shifted == correct );\n \n       shifted = original;\n       shifted >>= shift_step;\n       //correct = std::string(right_shifted);\n       correct = std::bitset<size> (std::string(right_shifted));\n-      test &= shifted == correct;\n+      VERIFY( shifted == correct );\n     }\n \n     return test;\n@@ -94,13 +92,13 @@ bool\n test01() {\n   bool test = true;\n \n-  test &= do_test<32>();\n-  test &= do_test<48>();\n-  test &= do_test<64>();\n+  VERIFY( do_test<32>() );\n+  VERIFY( do_test<48>() );\n+  VERIFY( do_test<64>() );\n \n-  test &= do_test<511>();\n-  test &= do_test<513>();\n-  test &= do_test<997>();\n+  VERIFY( do_test<511>() );\n+  VERIFY( do_test<513>() );\n+  VERIFY( do_test<997>() );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "b69e2abf1bb906195983682bec345115158e7004", "filename": "libstdc++-v3/testsuite/23_containers/vector_capacity.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_capacity.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_capacity.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_capacity.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n // 23.2.4.2 vector capacity\n \n #include <vector>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n template<typename T>\n   struct A { };\n@@ -42,17 +40,17 @@ bool test01()\n   size_type sz01 = vec01.capacity();\n   vec01.reserve(100);\n   size_type sz02 = vec01.capacity();\n-  test &= sz02 >= sz01;\n+  VERIFY( sz02 >= sz01 );\n   \n   sz01 = vec01.size() + 5;\n   vec01.resize(sz01);\n   sz02 = vec01.size();\n-  test &= sz01 == sz02;\n+  VERIFY( sz01 == sz02 );\n \n   sz01 = vec01.size() - 5;\n   vec01.resize(sz01);\n   sz02 = vec01.size();\n-  test &= sz01 == sz02;\n+  VERIFY( sz01 == sz02 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "aa9b94ef3e7cfd0a73e04e10cd3636ce9c90eff5", "filename": "libstdc++-v3/testsuite/23_containers/vector_ctor.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_ctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_ctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_ctor.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n // 23.2.4.1 vector constructors, copy, and assignment\n \n #include <vector>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n template<typename T>\n   struct A { };"}, {"sha": "f1ba0229d6185909174651ccb5cba258c878c3d1", "filename": "libstdc++-v3/testsuite/23_containers/vector_modifiers.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_modifiers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_modifiers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector_modifiers.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,9 +21,7 @@\n // 23.2.4.3 vector modifiers\n \n #include <vector>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n template<typename T>\n   struct A { };"}, {"sha": "78d36331604ea1accd22d1b93c2c753ff4e7111f", "filename": "libstdc++-v3/testsuite/24_iterators/istreambuf_iterator.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistreambuf_iterator.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <sstream>\n #include <iterator>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -41,55 +39,55 @@ bool test01(void)\n   cistreambuf_iter istrb_it01(istrs00);\n   cistreambuf_iter istrb_it02;\n   std::string tmp(istrb_it01, istrb_it02); \n-  test &= tmp == str01;\n+  VERIFY( tmp == str01 );\n \n   cistreambuf_iter istrb_it03(0);\n   cistreambuf_iter istrb_it04;\n-  test &= istrb_it03 == istrb_it04;\n+  VERIFY( istrb_it03 == istrb_it04 );\n \n   cistreambuf_iter istrb_it05(istrs01);\n   cistreambuf_iter istrb_it06(istrs01.rdbuf());\n-  test &= istrb_it05 == istrb_it06;\n+  VERIFY( istrb_it05 == istrb_it06 );\n   \n   // bool equal(istreambuf_iter& b)\n   cistreambuf_iter istrb_it07(0);\n   cistreambuf_iter istrb_it08;\n-  test &= istrb_it07.equal(istrb_it08);\n+  VERIFY( istrb_it07.equal(istrb_it08) );\n   cistreambuf_iter istrb_it09(0);\n   cistreambuf_iter istrb_it10;\n-  test &= istrb_it10.equal(istrb_it09);\n+  VERIFY( istrb_it10.equal(istrb_it09) );\n \n   cistreambuf_iter istrb_it11(istrs01);\n   cistreambuf_iter istrb_it12(istrs01.rdbuf());\n-  test &= istrb_it11.equal(istrb_it12);\n+  VERIFY( istrb_it11.equal(istrb_it12) );\n   cistreambuf_iter istrb_it13(istrs01);\n   cistreambuf_iter istrb_it14(istrs01.rdbuf());\n-  test &= istrb_it14.equal(istrb_it13);\n+  VERIFY( istrb_it14.equal(istrb_it13) );\n \n   cistreambuf_iter istrb_it15(istrs01);\n   cistreambuf_iter istrb_it16;\n-  test &= !(istrb_it15.equal(istrb_it16));\n+  VERIFY( !(istrb_it15.equal(istrb_it16)) );\n   cistreambuf_iter istrb_it17(istrs01);\n   cistreambuf_iter istrb_it18;\n-  test &= !(istrb_it18.equal(istrb_it17));\n+  VERIFY( !(istrb_it18.equal(istrb_it17)) );\n \n   // bool operator==(const istreambuf_iterator&a, const istreambuf_iterator& b)\n   // bool operator!=(const istreambuf_iterator&a, const istreambuf_iterator& b)\n   cistreambuf_iter istrb_it19(0);\n   cistreambuf_iter istrb_it20;\n-  test &= istrb_it19 == istrb_it20;\n+  VERIFY( istrb_it19 == istrb_it20 );\n \n   cistreambuf_iter istrb_it21(istrs01);\n   cistreambuf_iter istrb_it22(istrs01.rdbuf());\n-  test &= istrb_it22 == istrb_it21;\n+  VERIFY( istrb_it22 == istrb_it21 );\n \n   cistreambuf_iter istrb_it23(istrs01);\n   cistreambuf_iter istrb_it24;\n-  test &= istrb_it23 != istrb_it24;\n+  VERIFY( istrb_it23 != istrb_it24 );\n \n   cistreambuf_iter istrb_it25(0);\n   cistreambuf_iter istrb_it26(istrs01.rdbuf());\n-  test &= istrb_it25 != istrb_it26;\n+  VERIFY( istrb_it25 != istrb_it26 );\n \n   // charT operator*() const\n   // istreambuf_iterator& operator++();\n@@ -99,15 +97,15 @@ bool test01(void)\n   for (int i = 0; i < sizeof(slit01) - 2; ++i)\n     {\n       c = *istrb_it27++;\n-      test &= c == slit01[i];\n+      VERIFY( c == slit01[i] );\n     }\n \n   std::istringstream istrs02(str01);\n   cistreambuf_iter istrb_it28(istrs02);\n   for (int i = 0; i < sizeof(slit01) - 3;)\n     {\n       c = *++istrb_it28;\n-      test &= c == slit01[++i];\n+      VERIFY( c == slit01[++i] );\n     }\n \n #ifdef DEBUG_ASSERT"}, {"sha": "4930f149a0b8b8ddabc150d59b5ac8cd5b1b70e0", "filename": "libstdc++-v3/testsuite/24_iterators/iterator.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fiterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fiterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fiterator.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -21,11 +21,10 @@\n \n #include <string>\n #include <vector>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n-int string_stuff()\n+int \n+string_stuff()\n {\n    int failures(0);\n \n@@ -250,7 +249,8 @@ int string_stuff()\n    return failures;\n }\n \n-int vector_stuff()\n+int \n+vector_stuff()\n {\n    int failures(0);\n \n@@ -487,7 +487,8 @@ int vector_stuff()\n    return failures;\n }\n \n-int reverse_stuff()\n+int \n+reverse_stuff()\n {\n    int failures(0);\n \n@@ -512,7 +513,8 @@ int reverse_stuff()\n \n // the following should be compiler errors\n // flag runtime errors in case they slip through the compiler\n-int wrong_stuff()\n+int \n+wrong_stuff()\n {\n    int failures(0);\n \n@@ -575,7 +577,8 @@ int wrong_stuff()\n    return failures;\n }\n \n-int main(int argc, char **argv)\n+int\n+main(int argc, char **argv)\n {\n    int failures(0);\n \n@@ -594,6 +597,3 @@ int main(int argc, char **argv)\n    return failures ? 1 : 0;\n }\n \n-\n-\n-"}, {"sha": "c6e12dcc38a1fd34cff4a8585a016080ebea1125", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -17,9 +17,7 @@\n // USA.\n \n #include <algorithm>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n // http://sourceware.cygnus.com/ml/libstdc++/2000-06/msg00316.html\n struct foo { };"}, {"sha": "04cd6302a349b75ca81269108f0d3bcd3ca0e256", "filename": "libstdc++-v3/testsuite/25_algorithms/min_max.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_max.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_max.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_max.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -19,22 +19,20 @@\n // USA.\n \n #include <algorithm>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n void test01()\n {\n   bool test = true;\n   const int& x = std::max(1, 2);\n   const int& y = std::max(3, 4);\n-  test &= x == 2;\n-  test &= y == 4;\n+  VERIFY( x == 2 );\n+  VERIFY( y == 4 );\n \n   const int& z = std::min(1, 2);\n   const int& w = std::min(3, 4);\n-  test &= z == 1;\n-  test &= w == 3;\n+  VERIFY( z == 1 );\n+  VERIFY( w == 3 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "423adf122ba5eb2954d4136b0991a95fe33adac8", "filename": "libstdc++-v3/testsuite/26_numerics/c_math.cc", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -20,42 +20,53 @@\n // USA.\n \n #include <cmath>\n-#include <cassert>\n+#include <debug_assert.h>\n \n // test compilation.\n-void test01()\n+int\n+test01()\n {\n-    float a = 1.f;\n-    float b;\n-    std::modf(a, &b);\n+  float a = 1.f;\n+  float b;\n+  std::modf(a, &b);\n+  return 0;\n }\n \n // need more extravagant checks than this, of course, but this used to core...\n-void test02()\n+int\n+test02()\n {\n   sin(static_cast<float>(0));\n+  return 0;\n }\n \n // as did this.\n-void test03()\n+int\n+test03()\n {\n   double powtest = pow(2., 0);\n+  return 0;\n }\n \n // this used to abort.\n-void test04()\n+int\n+test04()\n {\n+  bool test = true;\n   float x[2] = {1, 2};\n   float y = 3.4;\n   std::modf(y, &x[0]);\n-  assert (x[1] == 2);\n+  VERIFY(x[1] == 2);\n+  return 0;\n }\n \n-int main()\n+int \n+main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n   return 0;\n }\n+"}, {"sha": "795759102597a44d9bc9c1c341cdcb2dbc83c50b", "filename": "libstdc++-v3/testsuite/26_numerics/complex_inserters_extractors.cc", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex_inserters_extractors.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -24,9 +24,7 @@\n #include <string>\n #include <sstream>\n #include <complex>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n #include <cmath>\n \n template<typename R>\n@@ -37,36 +35,41 @@ inline bool flteq(R x, R y)\n }\n \n template<typename R>\n-void test_good(std::string str, R x, R y)\n+int\n+test_good(std::string str, R x, R y)\n {\n   bool test = true;\n   std::complex<R> z;\n   char ch;\n   std::istringstream iss(str);\n   iss >> z >> ch;\n-  test &= iss.good();\n-  test &= flteq(z.real(), x);\n-  test &= flteq(z.imag(), y);\n-  test &= ch == '#';\n+  VERIFY( iss.good() );\n+  VERIFY( flteq(z.real(), x) );\n+  VERIFY( flteq(z.imag(), y) );\n+  VERIFY( ch == '#' );\n   \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n+  return 0;\n }\n \n template<typename R>\n-void test_fail(std::string str)\n+int\n+test_fail(std::string str)\n {\n   std::complex<R> z;\n   std::istringstream iss(str);\n   iss >> z;\n #ifdef DEBUG_ASSERT\n   assert(iss.fail() && !iss.bad());\n #endif\n+  return 0;\n }\n \n template<typename R>\n-void testall()\n+int\n+testall()\n {\n   test_good<R>(\"(-1.1,3.7)#\", -1.1, 3.7);\n   test_good<R>(\"(  .7e6  ,  \\n-3.1)#\", .7e6, -3.1);\n@@ -82,15 +85,15 @@ void testall()\n   test_fail<R>(\"|1,1)\");\n   test_fail<R>(\"(1|1)\");\n   test_fail<R>(\"(1,1|\");\n+  return 0;\n }\n \n-int main()\n+int\n+main()\n {\n   testall<float>();\n   testall<double>();\n   testall<long double>();\n   return 0;\n }\n \n-\n-"}, {"sha": "bba2fbd60344b49fe6d843f27673bf76e835f8fb", "filename": "libstdc++-v3/testsuite/27_io/filebuf.cc", "status": "modified", "additions": 110, "deletions": 112, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -23,9 +23,7 @@\n // simulated a bit more readily.\n \n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n const char carray_01[] = \"santa cruz or sandiego?\";\n const char carray_02[] = \"memphis, new orleans, and savanah\";\n@@ -72,9 +70,9 @@ bool test02() {\n   bool \t\t\ttest = true;\n \n   // bool is_open()\n-  test &= !fb_01.is_open();\n-  test &= !fb_02.is_open();\n-  test &= !fb_03.is_open();\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n \n   // filebuf_type* open(const char* __s, ios_base::openmode __mode)\n   fb_01.open(name_01, std::ios_base::in | std::ios_base::ate);\n@@ -83,17 +81,17 @@ bool test02() {\n   // Should keep the old file attached, and disregard attempt to overthrow.\n   fb_02.open(name_03, std::ios_base::in | std::ios_base::out);\n   fb_03.open(name_03, std::ios_base::out | std::ios_base::trunc);\n-  test &= fb_01.is_open();\n-  test &= fb_02.is_open();\n-  test &= fb_03.is_open();\n+  VERIFY( fb_01.is_open() );\n+  VERIFY( fb_02.is_open() );\n+  VERIFY( fb_03.is_open() );\n \n   // filebuf_type* close()\n   fb_01.close();\n   fb_02.close();\n   fb_03.close();\n-  test &= !fb_01.is_open();\n-  test &= !fb_02.is_open();\n-  test &= !fb_03.is_open();\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -131,65 +129,65 @@ bool test03() {\n   // else return showmanyc.\n   strmof_1 = fb_01.in_avail();\n   strmof_2 = fb_02.in_avail();\n-  test &= strmof_1 == -1;\n-  test &= strmof_1 == strmof_2; //fail because not open\n+  VERIFY( strmof_1 == -1 );\n+  VERIFY( strmof_1 == strmof_2 ); //fail because not open\n   strmof_1 = fb_03.in_avail();\n-  test &= strmof_1 == strmof_2;\n+  VERIFY( strmof_1 == strmof_2 );\n   fb_01.open(name_01, std::ios_base::in);\n   fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n   fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc); \n   strmof_1 = fb_01.in_avail();\n   strmof_2 = fb_02.in_avail();\n-  test &= strmof_1 != strmof_2;\n-  test &= strmof_1 >= 0;\n-  test &= strmof_2 == -1;  // empty file\n+  VERIFY( strmof_1 != strmof_2 );\n+  VERIFY( strmof_1 >= 0 );\n+  VERIFY( strmof_2 == -1 );  // empty file\n   strmof_1 = fb_03.in_avail(); \n-  test &= strmof_1  == -1; // empty file\n+  VERIFY( strmof_1  == -1 ); // empty file\n \n   // int_type sbumpc()\n   // if read_cur not avail returns uflow(), else return *read_cur & increment\n   int_type c1 = fb_01.sbumpc();\n   int_type c2 = fb_02.sbumpc();\n-  test &= c1 != c2;\n-  test &= c1 == '/';\n-  test &= c2 == -1;\n+  VERIFY( c1 != c2 );\n+  VERIFY( c1 == '/' );\n+  VERIFY( c2 == -1 );\n   int_type c3 = fb_01.sbumpc();\n   int_type c4 = fb_02.sbumpc();\n-  test &= c3 != c4;\n-  test &= c1 == c3; // fluke, both happen to be '/'\n-  test &= c2 == c4;\n+  VERIFY( c3 != c4 );\n+  VERIFY( c1 == c3 ); // fluke, both happen to be '/'\n+  VERIFY( c2 == c4 );\n   int_type c5 = fb_03.sbumpc();\n-  test &= c5 == traits_type::eof();\n+  VERIFY( c5 == traits_type::eof() );\n   // XXX should do some kind of test to make sure that internal\n   // buffers point ot the same thing, to check consistancy.\n \n   // int_type sgetc()\n   // if read_cur not avail, return uflow(), else return *read_cur  \n   int_type c6 = fb_01.sgetc();\n   int_type c7 = fb_02.sgetc();\n-  test &= c6 != c3;\n-  test &= c7 == c4; // both -1\n+  VERIFY( c6 != c3 );\n+  VERIFY( c7 == c4 ); // both -1\n   int_type c8 = fb_01.sgetc();\n   int_type c9 = fb_02.sgetc();\n-  test &= c6 == c8;\n-  test &= c7 == c9;\n+  VERIFY( c6 == c8 );\n+  VERIFY( c7 == c9 );\n   c5 = fb_03.sgetc();\n-  test &= c5 == traits_type::eof();\n+  VERIFY( c5 == traits_type::eof() );\n \n   // int_type snextc()\n   // calls sbumpc and if sbumpc != eof, return sgetc\n   c6 = fb_01.snextc();\n   c7 = fb_02.snextc();\n-  test &= c6 != c8;\n-  test &= c7 == c9; // -1\n-  test &= c6 == '9';\n+  VERIFY( c6 != c8 );\n+  VERIFY( c7 == c9 ); // -1\n+  VERIFY( c6 == '9' );\n   c6 = fb_01.snextc();\n   c7 = fb_02.snextc();\n-  test &= c6 != c8;\n-  test &= c7 == c9; // -1\n-  test &= c6 == '9';\n+  VERIFY( c6 != c8 );\n+  VERIFY( c7 == c9 ); // -1\n+  VERIFY( c6 == '9' );\n   c5 = fb_03.snextc();\n-  test &= c5 == traits_type::eof();\n+  VERIFY( c5 == traits_type::eof() );\n \n   // streamsize sgetn(char_type *s, streamsize n)\n   // streamsize xsgetn(char_type *s, streamsize n)\n@@ -202,30 +200,30 @@ bool test03() {\n   strmsz_1 = fb_01.sgetn(carray1, 10);\n   char carray2[buffer_size] = \"\";\n   strmsz_2 = fb_02.sgetn(carray2, 10);\n-  test &= strmsz_1 != strmsz_2;\n-  test &= strmsz_1 == 10;\n-  test &= strmsz_2 == 0;\n+  VERIFY( strmsz_1 != strmsz_2 );\n+  VERIFY( strmsz_1 == 10 );\n+  VERIFY( strmsz_2 == 0 );\n   c1 = fb_01.sgetc();\n   c2 = fb_02.sgetc();\n-  test &= c1 == '\\n';  \n-  test &= c7 == c2; // n != i\n+  VERIFY( c1 == '\\n' );  \n+  VERIFY( c7 == c2 ); // n != i\n   strmsz_1 = fb_03.sgetn(carray1, 10);\n-  test &= !strmsz_1; //zero\n+  VERIFY( !strmsz_1 ); //zero\n   strmsz_1 = fb_01.in_avail();\n   strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n-  test &= strmsz_1 == strmsz_2 - 5; \n+  VERIFY( strmsz_1 == strmsz_2 - 5 ); \n   c4 = fb_01.sgetc(); // buffer should have underflowed from above.\n-  test &= c4 == 'i';\n+  VERIFY( c4 == 'i' );\n   strmsz_1 = fb_01.in_avail();\n-  test &= strmsz_1 > 0;\n+  VERIFY( strmsz_1 > 0 );\n   strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n-  test &= strmsz_1 == strmsz_2; //at the end of the actual file \n+  VERIFY( strmsz_1 == strmsz_2 ); //at the end of the actual file \n   strmsz_1 = fb_02.in_avail();\n   strmsz_2 = fb_02.sgetn(carray2, strmsz_1 + 5);\n-  test &= strmsz_1 == -1;\n-  test &= strmsz_2 == 0;\n+  VERIFY( strmsz_1 == -1 );\n+  VERIFY( strmsz_2 == 0 );\n   c4 = fb_02.sgetc(); // should be EOF\n-  test &= c4 == traits_type::eof();\n+  VERIFY( c4 == traits_type::eof() );\n \n   // PUT\n   // int_type sputc(char_type c)\n@@ -235,12 +233,12 @@ bool test03() {\n   // strmsz_1 = fb_03.in_avail();  // XXX valid for in|out??\n   c1 = fb_02.sputc('a'); \n   c2 = fb_03.sputc('b'); \n-  test &= c1 != c2;\n+  VERIFY( c1 != c2 );\n   c1 = fb_02.sputc('c'); \n   c2 = fb_03.sputc('d'); \n-  test &= c1 != c2;\n+  VERIFY( c1 != c2 );\n   // strmsz_2 = fb_03.in_avail();\n-  // test &= strmsz_1 != strmsz_2;\n+  // VERIFY( strmsz_1 != strmsz_2 );\n   for (int i = 50; i <= 90; ++i) \n     c2 = fb_02.sputc(char(i));\n   // 27filebuf-2.txt == ac23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWX\n@@ -249,30 +247,30 @@ bool test03() {\n   for (int i = 50; i <= 90; ++i) \n     c2 = fb_03.sputc(char(i));\n   strmsz_2 = fb_03.in_avail();\n-  // test &= strmsz_1 != strmsz_2;\n-  // test &= strmsz_1 > 0;\n-  // test &= strmsz_2 > 0;\n+  // VERIFY( strmsz_1 != strmsz_2 );\n+  // VERIFY( strmsz_1 > 0 );\n+  // VERIFY( strmsz_2 > 0 );\n   // 27filebuf-2.txt == bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWX\n   // fb_02._M_out_cur = '2'\n   c3 = fb_01.sputc('a'); // should be EOF because this is read-only\n-  test &= c3 == traits_type::eof();\n+  VERIFY( c3 == traits_type::eof() );\n \n   // streamsize sputn(const char_typs* s, streamsize n)\n   // write up to n chars to out_cur from s, returning number assigned\n   // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n   strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n-  test &= strmsz_1 == 10;\n+  VERIFY( strmsz_1 == 10 );\n   strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n-  test &= strmsz_2 == 10;\n-  test &= strmsz_1 == strmsz_2; \n+  VERIFY( strmsz_2 == 10 );\n+  VERIFY( strmsz_1 == strmsz_2 ); \n   // fb_03._M_out_beg = \"YZracadabras, i wanna FGHIJKLMNOPQRSTUVW\"\n   // fb_03._M_out_cur = \"FGHIJKLMNOPQRSTUVW\"\n   strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n-  test &= strmsz_1 == 10;  \n+  VERIFY( strmsz_1 == 10 );  \n   // fb_02._M_out_beg = \"YZracadabras<=>?@ABCDEFGHIJKLMNOPQRSTUVW\"\n   // fb_02._M_out_cur = \"<=>?@ABCDEFGHIJKLMNOPQRSTUVW\"\n   strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n-  test &= strmsz_1 == 0;  \n+  VERIFY( strmsz_1 == 0 );  \n \n   // PUTBACK\n   // int_type pbfail(int_type c)\n@@ -293,9 +291,9 @@ bool test03() {\n   c2 = fb_03.sputbackc('z');\n   strmsz_2 = fb_03.in_avail();\n   c3 = fb_03.sgetc();\n-  test &= c3 == c2;\n-  test &= c1 != c3;\n-  test &= 1 == strmsz_2;\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( 1 == strmsz_2 );\n   //test for _in_cur == _in_beg\n   // fb_03._M_out_beg = \"bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZracada\" etc\n   fb_03.pubseekoff(10, std::ios_base::beg, \n@@ -307,11 +305,11 @@ bool test03() {\n   c2 = fb_03.sputbackc('z');  \n   strmsz_2 = fb_03.in_avail(); \n   c3 = fb_03.sgetc();  \n-  test &= c1 != c2;\n-  test &= c3 == c2;\n-  test &= c1 != c3;\n-  test &= c2 == 'z';\n-  test &= strmsz_1 == strmsz_2;\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( c2 == 'z' );\n+  VERIFY( strmsz_1 == strmsz_2 );\n   // test for replacing char with identical one\n   fb_03.snextc();\n   fb_03.sputc('u');\n@@ -321,13 +319,13 @@ bool test03() {\n   c2 = fb_03.sputbackc('a');\n   strmsz_2 = fb_03.in_avail();\n   c3 = fb_03.sgetc();\n-  test &= c3 == c2;\n-  test &= strmsz_1 + 1 == strmsz_2;\n+  VERIFY( c3 == c2 );\n+  VERIFY( strmsz_1 + 1 == strmsz_2 );\n   //test for ios_base::out\n   c1 = fb_02.sgetc(); // undefined\n   c2 = fb_02.sputbackc('a');\n-  test &= c1 == c2;\n-  test &= c1 == -1;\n+  VERIFY( c1 == c2 );\n+  VERIFY( c1 == -1 );\n \n   // int_type sungetc()\n   // if in_cur not avail, return pbackfail(), else decrement and\n@@ -337,8 +335,8 @@ bool test03() {\n   strmsz_1 = fb_03.in_avail();\n   c2 = fb_03.sungetc(); // delete the 'a'\n   strmsz_2 = fb_03.in_avail();\n-  test &= c2 == 'v'; //  test &= c2 != traits_type::eof();\n-  test &= strmsz_1 + 1 == strmsz_2;\n+  VERIFY( c2 == 'v' ); //  VERIFY( c2 != traits_type::eof() );\n+  VERIFY( strmsz_1 + 1 == strmsz_2 );\n   //test for _in_cur == _in_beg\n   for (int i = 50; i < 32 + 29; ++i)\n     fb_02.sputc(char(i));\n@@ -348,22 +346,22 @@ bool test03() {\n   c2 = fb_02.sungetc();\n   strmsz_2 = fb_02.in_avail();\n   c3 = fb_02.sgetc();\n-  test &= c1 == c2;\n-  test &= c3 == c2;\n-  test &= c1 == c3;\n-  test &= c2 == traits_type::eof();\n-  test &= strmsz_1 == strmsz_2;\n+  VERIFY( c1 == c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == traits_type::eof() );\n+  VERIFY( strmsz_1 == strmsz_2 );\n   //test for _in_cur == _in_end\n   fb_03.pubseekoff(0, std::ios_base::end);\n   strmsz_1 = fb_03.in_avail(); // -1 cuz at the end\n   c1 = fb_03.sgetc(); \n   c2 = fb_03.sungetc();\n   strmsz_2 = fb_03.in_avail(); // 1\n   c3 = fb_03.sgetc();\n-  test &= c1 != c2;\n-  // test &= c2 == c3 || c2 == traits_type::not_eof(int(c3));\n-  test &= strmsz_2 != strmsz_1;\n-  test &= strmsz_2 == 1;\n+  VERIFY( c1 != c2 );\n+  // VERIFY( c2 == c3 || c2 == traits_type::not_eof(int(c3)) );\n+  VERIFY( strmsz_2 != strmsz_1 );\n+  VERIFY( strmsz_2 == 1 );\n   //test for ios_base::out\n \n   // BUFFER MANAGEMENT & POSITIONING\n@@ -373,21 +371,21 @@ bool test03() {\n   strmsz_1 = fb_01.in_avail(); \n   fb_01.pubsync();\n   strmsz_2 = fb_01.in_avail();\n-  test &= strmsz_2 == strmsz_1;\n+  VERIFY( strmsz_2 == strmsz_1 );\n   strmsz_1 = fb_02.in_avail(); \n   fb_02.pubsync();\t\t\n   // 27filebuf-2.txt == 53 bytes after this.\n   strmsz_2 = fb_02.in_avail();\n-  test &= strmsz_2 == -1;\n-  test &= strmsz_2 == strmsz_1;\n+  VERIFY( strmsz_2 == -1 );\n+  VERIFY( strmsz_2 == strmsz_1 );\n   strmsz_1 = fb_03.in_avail(); \n   fb_03.pubsync();\n   // 27filebuf-3.txt \n   // bd23456789mzuva?@ABCDEFGHIJKLMNOPQRSTUVWXYZracadabras, i wannaz \n   // 63 bytes.\n   strmsz_2 = fb_03.in_avail();\n-  test &= strmsz_1 == 1;\n-  test &= strmsz_2 == 1;\n+  VERIFY( strmsz_1 == 1 );\n+  VERIFY( strmsz_2 == 1 );\n \n   // setbuf\n   // pubsetbuf(char_type* s, streamsize n)\n@@ -412,42 +410,42 @@ bool test03() {\n   pt_1 = fb_03.pubseekoff(2, std::ios_base::beg);\n   strmsz_2 = fb_03.in_avail(); \n   off_1 = pt_1;\n-  test &= off_1 > 0;\n+  VERIFY( off_1 > 0 );\n   c1 = fb_03.snextc(); //current in pointer +1\n-  test &= c1 == '3';\n+  VERIFY( c1 == '3' );\n   c2 = fb_03.sputc('\\n');  //current in pointer +1\n   c3 = fb_03.sgetc();\n-  test &= c2 != c3; \n-  test &= c3 == '4';\n+  VERIFY( c2 != c3 ); \n+  VERIFY( c3 == '4' );\n   fb_03.pubsync(); \n   c1 = fb_03.sgetc();\n-  test &= c1 == c3;\n+  VERIFY( c1 == c3 );\n   //cur\n   // 27filebuf-3.txt = bd2\\n456789:;<=>?...\n   pt_2 = fb_03.pubseekoff(2, std::ios_base::cur);\n   off_2 = pt_2;\n-  test &= (off_2 == (off_1 + 2 + 1 + 1));\n+  VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n   c1 = fb_03.snextc(); //current in pointer +1\n-  test &= c1 == '7';\n+  VERIFY( c1 == '7' );\n   c2 = fb_03.sputc('x');  //test current out pointer\n   c3 = fb_03.sputc('\\n');\n   c1 = fb_03.sgetc();\n   fb_03.pubsync(); \n   c3 = fb_03.sgetc();\n-  test &= c1 == c3;\n+  VERIFY( c1 == c3 );\n   //end\n   // 27filebuf-3.txt = \"bd2\\n456x\\n9\" \n   pt_2 = fb_03.pubseekoff(0, std::ios_base::end, \n \t\t\t  std::ios_base::in|std::ios_base::out);\n   off_1 = pt_2;\n-  test &= off_1 > off_2; //weak, but don't know exactly where it ends\n+  VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n   c3 = fb_03.sputc('\\n');\n   strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n-  test &= strmsz_1 == 28;\n+  VERIFY( strmsz_1 == 28 );\n   c1 = fb_03.sungetc();\n   fb_03.pubsync(); \n   c3 = fb_03.sgetc();\n-  test &= c1 == c3;\n+  VERIFY( c1 == c3 );\n   // IN\n   // OUT\n \n@@ -459,20 +457,20 @@ bool test03() {\n   //beg\n   pt_1 = fb_03.pubseekoff(78, std::ios_base::beg);\n   off_1 = pt_1;\n-  test &= off_1 > 0;\n+  VERIFY( off_1 > 0 );\n   c1 = fb_03.snextc(); \t\t//current in pointer +1\n-  test &= c1 == ' ';\n+  VERIFY( c1 == ' ' );\n   c2 = fb_03.sputc('\\n');  \t//test current out pointer\n   c3 = fb_03.sgetc();\n   fb_03.pubsync(); \t\t//resets pointers\n   pt_2 = fb_03.pubseekpos(pt_1);\n   off_2 = pt_2;\n-  test &= off_1 == off_2;\n+  VERIFY( off_1 == off_2 );\n   c3 = fb_03.snextc(); \t\t//current in pointer +1\n-  test &= c2 == c3;\n+  VERIFY( c2 == c3 );\n   pt_1 = fb_03.pubseekoff(0, std::ios_base::end);\n   off_1 = pt_1;\n-  test &= off_1 > off_2;\n+  VERIFY( off_1 > off_2 );\n   fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n   fb_03.pubsync();\n \n@@ -494,9 +492,9 @@ bool test03() {\n   fb_01.close();\n   fb_02.close();\n   fb_03.close();\n-  test &= !fb_01.is_open();\n-  test &= !fb_02.is_open();\n-  test &= !fb_03.is_open();\n+  VERIFY( !fb_01.is_open() );\n+  VERIFY( !fb_02.is_open() );\n+  VERIFY( !fb_03.is_open() );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -514,8 +512,8 @@ bool test04()\n   ifstream ifs(name_02);\n   char buffer[] = \"xxxxxxxxxx\";\n   int_type len1 = ifs.rdbuf()->sgetn(buffer, sizeof(buffer));\n-  test &= len1 == sizeof(buffer);\n-  test &= buffer[0] == 'a';\n+  VERIFY( len1 == sizeof(buffer) );\n+  VERIFY( buffer[0] == 'a' );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "beaf6da6600b5c3819a8a42788ce7827ae304305", "filename": "libstdc++-v3/testsuite/27_io/filebuf_members.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -25,7 +25,7 @@\n #include <cassert>\n #include <unistd.h>\n #include <fcntl.h>\n-\n+#include <debug_assert.h>\n \n // verify that std::filebuf doesn't close files that it didn't open\n // when using the following std::filebuf ctor:\n@@ -48,29 +48,29 @@ test_01()\n \n   // read (ext)\n   int fd = open(name_01, O_RDONLY);\n-  test &= fd >= 0;\n+  VERIFY( fd >= 0 );\n \n   {\n     std::filebuf fb(fd, \"double_read\", std::ios_base::in);\n   }\n   \n   close_num = close(fd);\n-  test &= close_num == 0;\n+  VERIFY( close_num == 0 );\n \n \n   // read (standard)\n   FILE* f = fopen(name_01, \"r\");\n-  test &= f != NULL;\n+  VERIFY( f != NULL );\n \n   {\n     std::ifstream ifstream1(name_01);\n-    test &= ifstream1.is_open();\n+    VERIFY( ifstream1.is_open() );\n     std::ios_base::iostate st01 = ifstream1.rdstate();\n-    test &= st01 == std::ios_base::goodbit;\n+    VERIFY( st01 == std::ios_base::goodbit );\n   }\n   \n   close_num = fclose(f);\n-  test &= close_num == 0;\n+  VERIFY( close_num == 0 );\n \n   \n #ifdef DEBUG_ASSERT"}, {"sha": "54c152476ea58c591d37228e6ac7818007386123", "filename": "libstdc++-v3/testsuite/27_io/fpos.cc", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -30,9 +30,7 @@\n // 27.4.3 template class fpos\n \n #include <ios>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n void test01()\n {\n@@ -61,7 +59,7 @@ void test01()\n // operators, increment and deincrement operators need to be in place.\n   pos01.state(state02);\n   state01 = pos01.state();\n-  test &= state01 == state02;\n+  VERIFY( state01 == state02 );\n #endif\n   \n #ifdef DEBUG_ASSERT\n@@ -87,43 +85,43 @@ void test02()\n   // p(i), p = i\n   std::streampos pos01(i02);\n   std::streampos pos02 = i02;\n-  test &= pos01 == pos02;\n+  VERIFY( pos01 == pos02 );\n   \n   // p(o), p = o \n   // NB: P(o) is only required.\n   std::streampos pos03(off02);\n   std::streampos pos04 = off02;\n-  test &= pos03 == pos04;\n+  VERIFY( pos03 == pos04 );\n   \n   // O(p)\n   std::streamoff off03(pos04);\n-  test &= off03 == off02;\n+  VERIFY( off03 == off02 );\n \n   // p == q, p!= q\n-  test &= pos01 == pos02;\n-  test &= pos02 != pos03;\n+  VERIFY( pos01 == pos02 );\n+  VERIFY( pos02 != pos03 );\n \n   // q = p + o\n   // p += o\n   pos03 = pos03 + off02;\n   pos04 += off02;\n-  test &= pos03 == pos04;\n+  VERIFY( pos03 == pos04 );\n \n   // q = p - o\n   // p -= o\n   pos03 = pos03 - off02;\n   pos04 -= off02;\n-  test &= pos03 == pos04;\n+  VERIFY( pos03 == pos04 );\n \n   // o = p - q\n-  test &= 0 == pos03 - pos04;\n+  VERIFY( 0 == pos03 - pos04 );\n \n   // streamsize -> streamoff\n   // streamoff -> streamsize \n   off01 = off02;\n   std::streamsize size01(off02);\n   std::streamoff off04(size01);\n-  test &= off01 == off04;\n+  VERIFY( off01 == off04 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -152,14 +150,14 @@ void test03()\n   // equality/inequality with const args\n   const std::streampos pos02(54);\n   std::streampos pos03(44);\n-  test &= !(pos03 == pos02);\n-  test &= pos03 != pos02;\n-  test &= !(pos02 == pos03);\n-  test &= pos02 != pos03;\n+  VERIFY( !(pos03 == pos02) );\n+  VERIFY( pos03 != pos02 );\n+  VERIFY( !(pos02 == pos03) );\n+  VERIFY( pos02 != pos03 );\n \n   // default values\n   std::streampos pos04;\n-  test &= (std::streamoff)pos04 == 0; \n+  VERIFY( (std::streamoff)pos04 == 0 ); \n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "b9d788c1ebdfa77c1a89bc73d3d2789ff8e461df", "filename": "libstdc++-v3/testsuite/27_io/ifstream_members.cc", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fifstream_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fifstream_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fifstream_members.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -20,9 +20,7 @@\n \n #include <istream>\n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n const char name_01[] = \"testsuite/ifstream_members-1.tst\";\n const char name_02[] = \"testsuite/ifstream_members-1.txt\";\n@@ -35,15 +33,15 @@ bool test00()\n   ifs1.close();\n   \n   // false as expected:\n-  test &= !ifs1.is_open();\n+  VERIFY( !ifs1.is_open() );\n    // this is now true:\n-  test &= !(ifs1);\n+  VERIFY( !(ifs1) );\n   \n   ifs1.open(name_01);\n-  test &= ifs1.is_open();\n+  VERIFY( ifs1.is_open() );\n   // fail bit still true\n-  test &= !(ifs1);\n-  test &= ifs1.rdstate() == std::ios_base::failbit;\n+  VERIFY( !(ifs1) );\n+  VERIFY( ifs1.rdstate() == std::ios_base::failbit );\n \n   ifs1.close();\n \n@@ -63,7 +61,7 @@ bool test01()\n   for(int i = 0; ++i < more_than_max_open_files;)\n     {\n       std::ifstream ifs(name_01);\n-      test &= static_cast<bool>(ifs);\n+      VERIFY( static_cast<bool>(ifs) );\n     }\n \n #ifdef DEBUG_ASSERT"}, {"sha": "298574982dbaa35caec3344d477160521cb66675", "filename": "libstdc++-v3/testsuite/27_io/ios_base_callbacks.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_callbacks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_callbacks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_callbacks.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <string>\n #include <sstream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n const std::string str01(\"the nubians of plutonia\");\n std::string str02;\n@@ -52,7 +50,7 @@ bool test01()\n   ios01.register_callback(callb02, 1);\n   ios01.register_callback(callb01, 1);\n   ios01.imbue(locco);\n-  test &= str01 == str02;\n+  VERIFY( str01 == str02 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "e3cb4bbbc7a91405ac3ae2f4d38c394beab5af54", "filename": "libstdc++-v3/testsuite/27_io/ios_base_members_static.cc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_members_static.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_members_static.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_members_static.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -24,9 +24,7 @@\n #include <sstream>\n #include <iostream>\n \n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01() \n {\n@@ -36,15 +34,15 @@ bool test01()\n   std::ios\t\tios01(&strbuf01);\n \n   // 1: basic invocation\n-  test &= ios01.sync_with_stdio();\n-  test &= ios01.sync_with_stdio(false); //returns previous state\n+  VERIFY( ios01.sync_with_stdio() );\n+  VERIFY( ios01.sync_with_stdio(false) ); //returns previous state\n \n   // 2: need to test interleaving of C and C++ io on a file object.\n-  test &= std::cout.good();\n-  test &= !std::cout.sync_with_stdio(0);\n-  test &= std::cout.good();\n-  test &= !std::cout.sync_with_stdio(0);\n-  test &= std::cout.good();\n+  VERIFY( std::cout.good() );\n+  VERIFY( !std::cout.sync_with_stdio(0) );\n+  VERIFY( std::cout.good() );\n+  VERIFY( !std::cout.sync_with_stdio(0) );\n+  VERIFY( std::cout.good() );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "acebb87fe9326d06188e8d15114c3918dd596637", "filename": "libstdc++-v3/testsuite/27_io/ios_ctor.cc", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_ctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_ctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_ctor.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -31,9 +31,7 @@\n \n #include <ios>\n #include <sstream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n void test01()\n {\n@@ -60,27 +58,27 @@ void test01()\n   // void init(sreambuf* sb)\n   // NB: This is protected so need to go through fstream/stringstream\n   // Can double-check the accuracy of the above initializations though.\n-  test &= ios_00.rdbuf() == 0;\n-  test &= ios_00.tie() == 0;\n-  test &= ios_00.rdstate() == std::ios_base::badbit;\n-  test &= ios_00.exceptions() == std::ios_base::goodbit;\n+  VERIFY( ios_00.rdbuf() == 0 );\n+  VERIFY( ios_00.tie() == 0 );\n+  VERIFY( ios_00.rdstate() == std::ios_base::badbit );\n+  VERIFY( ios_00.exceptions() == std::ios_base::goodbit );\n   flag02 = ios_00.flags();\n-  test &= flag02 == flag01;\n-  test &= ios_00.width() == 0;  \n-  test &= ios_00.precision() == 6;  \n-  test &= ios_00.fill() == ios_00.widen(' ');\n-  test &= ios_00.getloc() == glocale;    \n+  VERIFY( flag02 == flag01 );\n+  VERIFY( ios_00.width() == 0 );  \n+  VERIFY( ios_00.precision() == 6 );  \n+  VERIFY( ios_00.fill() == ios_00.widen(' ') );\n+  VERIFY( ios_00.getloc() == glocale );    \n \n-  test &= ios_01.rdbuf() == &strb_01;\n-  test &= ios_01.tie() == 0;\n-  test &= ios_01.rdstate() == std::ios_base::goodbit;\n-  test &= ios_01.exceptions() == std::ios_base::goodbit;\n+  VERIFY( ios_01.rdbuf() == &strb_01 );\n+  VERIFY( ios_01.tie() == 0 );\n+  VERIFY( ios_01.rdstate() == std::ios_base::goodbit );\n+  VERIFY( ios_01.exceptions() == std::ios_base::goodbit );\n   flag02 = ios_01.flags();\n-  test &= flag02 == flag01;\n-  test &= ios_01.width() == 0;  \n-  test &= ios_01.precision() == 6;  \n-  test &= ios_01.fill() == ios_01.widen(' ');\n-  test &= ios_01.getloc() == glocale;    \n+  VERIFY( flag02 == flag01 );\n+  VERIFY( ios_01.width() == 0 );  \n+  VERIFY( ios_01.precision() == 6 );  \n+  VERIFY( ios_01.fill() == ios_01.widen(' ') );\n+  VERIFY( ios_01.getloc() == glocale );    \n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "717bebb322cac27419b5fb2027ed9c8ca13dc05e", "filename": "libstdc++-v3/testsuite/27_io/ios_manip_basefield.cc", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_basefield.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_basefield.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_basefield.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -31,9 +31,7 @@\n #include <sstream>\n #include <locale>\n #include <iomanip>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \t\t\t\n struct MyNP : std::numpunct<char>\n {\n@@ -44,7 +42,8 @@ struct MyNP : std::numpunct<char>\n std::string MyNP::do_grouping() const { static std::string s(\"\\3\"); return s; }\n char   MyNP::do_thousands_sep() const { return ' '; }\n \n-void test01()\n+int\n+test01()\n {\n   std::cout.imbue(std::locale(std::locale(), new MyNP));\n   std::cout << std::oct << std::showbase;\n@@ -71,9 +70,11 @@ void test01()\n #ifdef DEBUG_ASSERT\n   assert (std::cout.good());\n #endif\n+  return 0;\n }\n \n-void test02()\n+int\n+test02()\n {\n   bool \t\ttest = true;\n   const std::string \tstr_blank;\n@@ -82,23 +83,25 @@ void test02()\n   std::ostream \to(&strbuf);\n \n   o <<  std::setw(6) <<  std::right << \"san\";\n-  test &= strbuf.str() == \"   san\"; \n+  VERIFY( strbuf.str() == \"   san\" ); \n   strbuf.str(str_blank);\n \n   o <<  std::setw(6) <<  std::internal << \"fran\";\n-  test &= strbuf.str() == \"  fran\"; \n+  VERIFY( strbuf.str() == \"  fran\" ); \n   strbuf.str(str_blank);\n \n   o << std::setw(6) <<  std::left << \"cisco\";\n-  test &= strbuf.str() == \"cisco \"; \n+  VERIFY( strbuf.str() == \"cisco \" ); \n   strbuf.str(str_blank);\n \n #ifdef DEBUG_ASSERT\n   assert (test);\n #endif\n+  return 0;\n }\n \n-int main() {\n+int \n+main() {\n   test01();\n   return 0;\n }"}, {"sha": "4dcf748f01918d5f6e3a455c4effe8f99da903b2", "filename": "libstdc++-v3/testsuite/27_io/ios_manip_fmtflags.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_fmtflags.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_fmtflags.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_manip_fmtflags.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -31,9 +31,7 @@\n #include <sstream>\n #include <locale>\n #include <iomanip>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n struct MyNP : std::numpunct<char>\n {\n@@ -44,7 +42,8 @@ struct MyNP : std::numpunct<char>\n std::string MyNP::do_truename()  const { static std::string s(\"yea\"); return s; }\n std::string MyNP::do_falsename() const { static std::string s(\"nay\"); return s; }\n \n-void test01()\n+int\n+test01()\n {\n   std::cout << true << \" \" << false << std::endl;\n   std::cout << std::boolalpha;\n@@ -71,9 +70,11 @@ void test01()\n #ifdef DEBUG_ASSERT\n   assert (std::cout.good());\n #endif\n+  return 0;\n }\n \n-void test02()\n+int\n+test02()\n {\n   bool test = true;\n   const std::string strue(\"true\");\n@@ -88,19 +89,21 @@ void test02()\n \n   ostr01 << true;\n   str02 = ostr01.str();\n-  test &= str02 == strue;\n+  VERIFY( str02 == strue );\n \n   ostr01.str(str01);\n   ostr01 << false;\n   str02 = ostr01.str();\n-  test &= str02 == sfalse;\n+  VERIFY( str02 == sfalse );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n+  return 0;\n }\n \n-int main() {\n+int \n+main() {\n   test01();\n   test02();\n   return 0;"}, {"sha": "b096d42cf4e72421784624f28f91b0e87fef4a3b", "filename": "libstdc++-v3/testsuite/27_io/ios_members.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_members.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -31,9 +31,7 @@\n \n #include <ios>\n // NB: Don't include any other headers in this file.\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n void test01()\n {\n@@ -54,11 +52,11 @@ void test01()\n \n   // char narrow(char_type c, char dfault) const;\n   char c1 = ios_01.narrow(ct02, 0);\n-  test &= c1 == 'x';\n+  VERIFY( c1 == 'x' );\n \n   // char_type widen(char c) const;\n   ct01 = ios_01.widen('c');\n-  test &= ct01 == 'c';\n+  VERIFY( ct01 == 'c' );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -85,57 +83,57 @@ void test02()\n   std::ios::char_type ct02('x');;\n \n   // bool fail() const\n-  test &= ios_01.fail();\n+  VERIFY( ios_01.fail() );\n \n   // bool operator!() const\n-  test &= !ios_01;\n+  VERIFY( !ios_01 );\n   \n   // iostate rdstate() const\n   iostate03 = ios_01.rdstate();\n-  test &= static_cast<bool>(iostate03 & std::ios_base::badbit);\n+  VERIFY( static_cast<bool>(iostate03 & std::ios_base::badbit) );\n \n   // void clear(iostate state = goodbit)\n   try {\n     ios_01.clear(std::ios_base::eofbit);\n     iostate02 = ios_01.rdstate();\n-    test &= static_cast<bool>(iostate02 & iostate01);\n+    VERIFY( static_cast<bool>(iostate02 & iostate01) );\n   }\t\t \n   catch(std::ios_base::failure& fail) {\n-    test &= false;\n+    VERIFY( false );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   // iostate exceptions() const\n-  test &= ios_01.exceptions() == std::ios_base::goodbit;\n+  VERIFY( ios_01.exceptions() == std::ios_base::goodbit );\n \n   // void exceptions(iostate except)\n   try {\n     ios_01.exceptions(std::ios_base::eofbit);\n-    test &= false;\n+    VERIFY( false );\n   }\t\t \n   catch(std::ios_base::failure& fail) {\n     iostate02 = ios_01.exceptions();\n-    test &= static_cast<bool>(iostate02 & std::ios_base::eofbit);\n+    VERIFY( static_cast<bool>(iostate02 & std::ios_base::eofbit) );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n   // basic_ios& copyfmt(const basic_ios& rhs)\n   std::ios ios_02(NULL);  \n   ios_02.exceptions(std::ios_base::eofbit);\n-  test &= static_cast<bool>(ios_02.exceptions() & std::ios_base::eofbit);\n+  VERIFY( static_cast<bool>(ios_02.exceptions() & std::ios_base::eofbit) );\n   try {\n     ios_01.copyfmt(ios_02);\n-    test &= false;\n+    VERIFY( false );\n   }\t\t \n   catch(std::ios_base::failure& fail) {\n-    test &= true;\n+    VERIFY( true );\n   }\n   catch(...) {\n-    test &= false;\n+    VERIFY( false );\n   }\n \n #ifdef DEBUG_ASSERT"}, {"sha": "d2e55a96a1b95de0db0ff3d3b737ab28682d4feb", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_arith.cc", "status": "modified", "additions": 108, "deletions": 110, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_arith.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -24,9 +24,7 @@\n #include <ostream>\n #include <sstream>\n #include <locale>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n std::string str_01;\n std::string str_02(\"true false 0 1 110001\");\n@@ -71,44 +69,44 @@ bool test01() {\n   fmt = is_02.flags();\n   testfmt = fmt & std::ios_base::boolalpha;\n   is_02 >> b1;\n-  test &= b1 == 1;\n+  VERIFY( b1 == 1 );\n   is_02 >> b1;\n-  test &= b1 == 0;\n+  VERIFY( b1 == 0 );\n \n   // process numeric versions of of bool values\n   is_02.unsetf(std::ios_base::boolalpha);\n   fmt = is_02.flags();\n   testfmt = fmt & std::ios_base::boolalpha;\n   is_02 >> b1;\n-  test &= b1 == 0;\n+  VERIFY( b1 == 0 );\n   is_02 >> b1;\n-  test &= b1 == 1;\n+  VERIFY( b1 == 1 );\n \n   // is_03 == \"-19999999 777777 -234234 233 -234 33 1 66300.25 .315 1.5\"\n   is_03 >> l1;\n-  test &= l1 == -19999999;\n+  VERIFY( l1 == -19999999 );\n   is_03 >> ul1;\n-  test &= ul1 == 777777;\n+  VERIFY( ul1 == 777777 );\n   is_03 >> i1;\n-  test &= i1 == -234234;\n+  VERIFY( i1 == -234234 );\n   is_03 >> ui1;\n-  test &= ui1 == 233;\n+  VERIFY( ui1 == 233 );\n   is_03 >> s1;\n-  test &= s1 == -234;\n+  VERIFY( s1 == -234 );\n   is_03 >> us1;\n-  test &= us1 == 33;\n+  VERIFY( us1 == 33 );\n   is_03 >> b1;\n-  test &= b1 == 1;\n+  VERIFY( b1 == 1 );\n   is_03 >> ld1;\n-  test &= ld1 == 66300.25;\n+  VERIFY( ld1 == 66300.25 );\n   is_03 >> d1;\n-  test &= d1 == .315;\n+  VERIFY( d1 == .315 );\n   is_03 >> f1;\n-  test &= f1 == 1.5;\n+  VERIFY( f1 == 1.5 );\n \n   is_04 >> std::hex >> i1;\n   printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n-  test &= i1 == 0x123;\n+  VERIFY( i1 == 0x123 );\n   printf (\"%d %d %d\\n\", i1, i1 == 0x123, test);\n \n   // test void pointers\n@@ -119,7 +117,7 @@ bool test01() {\n   ss_01 << po;\n   ss_01 >> pi;\n   printf (\"%x %x\\n\", pi, po);\n-  test &= po == pi;\n+  VERIFY( po == pi );\n   \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -138,9 +136,9 @@ bool test02() {\n \n   int n = 15;\n   is >> n;\n-  test &= n == 20000;\n+  VERIFY( n == 20000 );\n   char c = is.peek();\n-  test &= c == 65;\n+  VERIFY( c == 65 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -159,8 +157,8 @@ bool test03()\n   long l01;\n   ostr <<  \"12220101\";\n   istr >>  l01; // _M_in_end set completely incorrectly here.\n-  test &= l01 == 12220101;\n-  test &= istr.rdstate() == std::ios_base::eofbit;\n+  VERIFY( l01 == 12220101 );\n+  VERIFY( istr.rdstate() == std::ios_base::eofbit );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -181,21 +179,21 @@ void test06()\n   std::istringstream is(s);\n   \n   is >> h4; // 205\n-  test &= h4 == 205;\n+  VERIFY( h4 == 205 );\n   is >> c; // ','\n-  test &= c == ',';\n+  VERIFY( c == ',' );\n \n   is >> h4; // 199\n-  test &= h4 == 199;\n+  VERIFY( h4 == 199 );\n   is >> c; // ','\n-  test &= c == ',';\n+  VERIFY( c == ',' );\n \n   is >> h4; // 144\n-  test &= is.rdstate() == std::ios_base::eofbit;\n-  test &= h4 == 144;\n+  VERIFY( is.rdstate() == std::ios_base::eofbit );\n+  VERIFY( h4 == 144 );\n   is >> c; // EOF\n-  test &= c == ',';\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::failbit);\n+  VERIFY( c == ',' );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -224,24 +222,24 @@ void test07()\n \n   // Basic operation.\n   is >> h4; \n-  test &= h4 == 205199;\n-  test &= is.good();\n+  VERIFY( h4 == 205199 );\n+  VERIFY( is.good() );\n \n   is.clear();\n   is >> f1; \n-  test &= f1 == 23445.25;\n-  test &= is.good();\n+  VERIFY( f1 == 23445.25 );\n+  VERIFY( is.good() );\n \n   is.clear();\n   is >> h3; \n-  test &= h3 == 1024365;\n-  test &= is.good();\n+  VERIFY( h3 == 1024365 );\n+  VERIFY( is.good() );\n \n   is.clear();\n   is >> h2; \n-  test &= h2 == 0;\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::failbit);\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::eofbit);\n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n \n   // Stress tests for explicit errors in grouping corner cases.  The\n   // validity of these tests and results have been hammered out in\n@@ -256,64 +254,64 @@ void test07()\n   is.str(s2);\n \n   is >> h4; \n-  test &= h4 == 0;\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::failbit);\n+  VERIFY( h4 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n   is.clear();\n   is >> c;\n-  test &= c == ',';\n-  test &= is.good();\n+  VERIFY( c == ',' );\n+  VERIFY( is.good() );\n \n   is.ignore(3);\n   is >> f1; \n-  test &= f1 == 0.0;\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::failbit);\n+  VERIFY( f1 == 0.0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n   is.clear();\n   is >> c;\n-  test &= c == ',';\n+  VERIFY( c == ',' );\n   is >> c;\n-  test &= c == '4';\n-  test &= is.good();\n+  VERIFY( c == '4' );\n+  VERIFY( is.good() );\n \n   is >> f1; \n-  test &= f1 == 0.25;\n-  test &= is.good();\n+  VERIFY( f1 == 0.25 );\n+  VERIFY( is.good() );\n   is >> c;\n-  test &= c == ',';\n+  VERIFY( c == ',' );\n   is >> h2;\n-  test &= h2 == 345;\n-  test &= is.good();\n+  VERIFY( h2 == 345 );\n+  VERIFY( is.good() );\n   f1 = 0.0;\n   h2 = 0;\n \n   is >> f1; \n-  test &= f1 == 5.0;\n-  test &= is.good();\n+  VERIFY( f1 == 5.0 );\n+  VERIFY( is.good() );\n   is >> f1; \n-  test &= f1 == .25;\n-  test &= is.good();\n+  VERIFY( f1 == .25 );\n+  VERIFY( is.good() );\n \n   is >> h3; \n-  test &= h3 == 0;\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::failbit);\n+  VERIFY( h3 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n   is.clear();\n   is >> c;\n-  test &= c == ','; // second one\n-  test &= is.good();\n+  VERIFY( c == ',' ); // second one\n+  VERIFY( is.good() );\n \n   is >> h2; \n-  test &= h2 == 0;\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::failbit);\n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n   is.clear();\n \n   is >> h2; \n-  test &= h2 == 1000000;\n-  test &= is.good();\n+  VERIFY( h2 == 1000000 );\n+  VERIFY( is.good() );\n   h2 = 0;\n \n   is >> h2; \n-  test &= h2 == 0;\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::failbit);\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::eofbit);\n+  VERIFY( h2 == 0 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n   is.clear();\n \n #ifdef DEBUG_ASSERT\n@@ -345,18 +343,18 @@ void test08()\n \n   // Basic operation.\n   is >> h4; \n-  test &= h4 == 122;\n-  test &= is.good();\n+  VERIFY( h4 == 122 );\n+  VERIFY( is.good() );\n \n   is.clear();\n   is >> h3; \n-  test &= h3 == 20519;\n-  test &= is.good();\n+  VERIFY( h3 == 20519 );\n+  VERIFY( is.good() );\n \n   is.clear();\n   is >> h2; \n-  test &= h2 == 2212322;\n-  test &= static_cast<bool>(is.rdstate() & std::ios_base::eofbit);\n+  VERIFY( h2 == 2212322 );\n+  VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n \n \n #ifdef DEBUG_ASSERT\n@@ -378,8 +376,8 @@ bool test09()\n    (is>>std::ws) >> c;\n    (is>>std::ws) >> f2;\n    test = f1 == 2456;\n-   test &= f2 == 0.00567;\n-   test &= c == '-';\n+   VERIFY( f2 == 0.00567 );\n+   VERIFY( c == '-' );\n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n@@ -396,93 +394,93 @@ bool test10() {\n \n   int n = 365;\n   is_01 >> n;\n-  test &= n == 0;\n+  VERIFY( n == 0 );\n   n = 364;\n   is_01 >> n;\n-  test &= n == 0;\n+  VERIFY( n == 0 );\n   n = 363;\n   is_01 >> n;\n-  test &= n == 0;\n+  VERIFY( n == 0 );\n   n = 362;\n   is_01 >> n;\n-  test &= n == 0;\n+  VERIFY( n == 0 );\n   n = 361;\n   is_01 >> n;\n-  test &= n == 0;\n+  VERIFY( n == 0 );\n   n = 360;\n   is_01 >> n;\n-  test &= n == 0;\n-  test &= is_01.rdstate() == std::ios_base::eofbit;\n+  VERIFY( n == 0 );\n+  VERIFY( is_01.rdstate() == std::ios_base::eofbit );\n \n   std::string str_02(\"0x32 0X33 033 33\");\n   std::stringbuf isbuf_02(str_02);\n   std::istream is_02(&isbuf_02);\n   is_02.unsetf(std::ios_base::basefield);\n   is_02 >> n;\n-  test &= n == 50;\n+  VERIFY( n == 50 );\n   is_02 >> n;\n-  test &= n == 51;\n+  VERIFY( n == 51 );\n   is_02 >> n;\n-  test &= n == 27;\n+  VERIFY( n == 27 );\n   is_02 >> n;\n-  test &= n == 33;\n-  test &= is_02.rdstate() == std::ios_base::eofbit;\n+  VERIFY( n == 33 );\n+  VERIFY( is_02.rdstate() == std::ios_base::eofbit );\n \n   std::stringbuf isbuf_03(str_02);\n   std::istream is_03(&isbuf_03);\n   char c;\n   int m;\n \n   is_03 >> std::dec >> n >> c >> m;\n-  test &= n == 0;\n-  test &= c == 'x';\n-  test &= m == 32;\n+  VERIFY( n == 0 );\n+  VERIFY( c == 'x' );\n+  VERIFY( m == 32 );\n \n   is_03 >> std::oct >> m >> c >> n;\n-  test &= m == 0;\n-  test &= c == 'X';\n-  test &= n == 27;\n+  VERIFY( m == 0 );\n+  VERIFY( c == 'X' );\n+  VERIFY( n == 27 );\n \n   is_03 >> std::dec >> m >> n;\n-  test &= m == 33;\n-  test &= n == 33;\n-  test &= is_03.rdstate() == std::ios_base::eofbit;\n+  VERIFY( m == 33 );\n+  VERIFY( n == 33 );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n \n   std::string str_04(\"3. 4.5E+  2a5E-3 .6E1\");\n   std::stringbuf isbuf_04(str_04);\n   std::istream is_04(&isbuf_04);\n \n   double f;\n   is_04 >> f;\n-  test &= f == 3.0;\n+  VERIFY( f == 3.0 );\n   is_04 >> f;\n-  test &= f == 450.0;\n+  VERIFY( f == 450.0 );\n   is_04.ignore();\n   is_04 >> f;\n-  test &= f == 0.005;\n+  VERIFY( f == 0.005 );\n   is_04 >> f;\n-  test &= f == 6;\n-  test &= is_03.rdstate() == std::ios_base::eofbit;\n+  VERIFY( f == 6 );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n \n   std::string str_05(\"0E20 5Ea E16\");\n   std::stringbuf isbuf_05(str_05);\n   std::istream is_05(&isbuf_05);\n \n   is_05 >> f;\n-  test &= f == 0;\n+  VERIFY( f == 0 );\n   is_05 >> f;\n-  test &= f == 0;\n-  test &= is_05.rdstate() == std::ios_base::failbit;\n+  VERIFY( f == 0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n   is_05.clear();\n   is_05 >> c;\n-  test &= c == 'a';\n+  VERIFY( c == 'a' );\n   is_05 >> f;\n-  test &= f == 0;\n-  test &= is_05.rdstate() == std::ios_base::failbit;\n+  VERIFY( f == 0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n   is_05.clear();\n   is_05.ignore();\n   is_05 >> n;\n-  test &= n == 16;\n+  VERIFY( n == 16 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "f70d4fb94924950160baf0ca47ed8b53f57f4466", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_char.cc", "status": "modified", "additions": 48, "deletions": 50, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_char.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -22,9 +22,7 @@\n \n #include <istream>\n #include <sstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01() {\n \n@@ -53,28 +51,28 @@ bool test01() {\n   is_01 >> array1;   // should snake 0 characters, not alter stream state\n   i2 = ctraits_type::length(array1);\n   state2 = is_01.rdstate();\n-  test &= i1 == i2;\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n+  VERIFY( i1 == i2 );\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n \n   state1 = is_02.rdstate();\n   is_02 >> array1;   // should snake \"coltrane\"\n   state2 = is_02.rdstate();\n-  test &= state1 == state2;\n-  test &= !static_cast<bool>(state2 & statefail);\n-  test &= array1[str_03.size() - 1] == 'e';\n+  VERIFY( state1 == state2 );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+  VERIFY( array1[str_03.size() - 1] == 'e' );\n   array1[str_03.size()] = '\\0';\n-  test &= !str_03.compare(0, str_03.size(), array1);\n+  VERIFY( !str_03.compare(0, str_03.size(), array1) );\n   std::istream::int_type int1 = is_02.peek(); // should be ' '\n-  test &= int1 == ' ';\n+  VERIFY( int1 == ' ' );\n \n   state1 = is_02.rdstate();\n   is_02 >> array1;   // should snake \"playing\" as sentry \"eats\" ws\n   state2 = is_02.rdstate();\n   int1 = is_02.peek(); // should be ' '\n-  test &= int1 == ' ';\n-  test &= state1 == state2;\n-  test &= !static_cast<bool>(state2 & statefail);\n+  VERIFY( int1 == ' ' );\n+  VERIFY( state1 == state2 );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n \n \n   // template<_CharT, _Traits>\n@@ -83,13 +81,13 @@ bool test01() {\n   state1 = is_02.rdstate();\n   is_02 >> array2;   // should snake 'softly\n   state2 = is_02.rdstate();\n-  test &= state1 == state2;\n-  test &= !static_cast<bool>(state2 & statefail);\n-  test &= array2[0] == '\\'';\n-  test &= array2[1] == 's';\n-  test &= array2[6] == 'y';\n+  VERIFY( state1 == state2 );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+  VERIFY( array2[0] == '\\'' );\n+  VERIFY( array2[1] == 's' );\n+  VERIFY( array2[6] == 'y' );\n   int1 = is_02.peek(); // should be ' '\n-  test &= int1 == ' ';\n+  VERIFY( int1 == ' ' );\n \n \n    // template<_CharT, _Traits>\n@@ -98,38 +96,38 @@ bool test01() {\n   state1 = is_02.rdstate();\n   is_02 >> array3;   // should snake \"as\"\n   state2 = is_02.rdstate();\n-  test &= state1 == state2;\n-  test &= !static_cast<bool>(state2 & statefail);\n-  test &= array3[0] == 'a';\n-  test &= array3[1] == 's';\n+  VERIFY( state1 == state2 );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+  VERIFY( array3[0] == 'a' );\n+  VERIFY( array3[1] == 's' );\n   int1 = is_02.peek(); // should be ' '\n-  test &= int1 == ' ';\n+  VERIFY( int1 == ' ' );\n  \n \n   // testing with width() control enabled.\n   is_02.width(8);\n   state1 = is_02.rdstate();\n   is_02 >> array1;   // should snake a\n   state2 = is_02.rdstate();\n-  test &= state1 == state2;\n-  test &= !ctraits_type::compare(array1, \"a\", 2);\n+  VERIFY( state1 == state2 );\n+  VERIFY( !ctraits_type::compare(array1, \"a\", 2) );\n \n   is_02.width(1);\n   state1 = is_02.rdstate();\n   is_02 >> array1;   // should snake nothing, set failbit\n   state2 = is_02.rdstate();\n-  test &= state1 != state2;\n-  test &= state2 == statefail;\n-  test &= array1[0] == '\\0';\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == statefail );\n+  VERIFY( array1[0] == '\\0' );\n \n   is_02.width(8);\n   is_02.clear();\n   state1 = is_02.rdstate();\n-  test &= !state1;\n+  VERIFY( !state1 );\n   is_02 >> array1;   // should snake \"morning\"\n   state2 = is_02.rdstate();\n-  test &= state1 == state2;\n-  test &= !ctraits_type::compare(array1, \"morning\", 8);\n+  VERIFY( state1 == state2 );\n+  VERIFY( !ctraits_type::compare(array1, \"morning\", 8) );\n \n   // testing for correct exception setting\n   const std::string str_04(\"   impulse!!\");\n@@ -139,13 +137,13 @@ bool test01() {\n   std::istream is_04(&isbuf_04);\n \n   is_03 >> array1;\n-  test &=  !ctraits_type::compare(array1,\"impulse!!\", 10);\n-  test &= is_03.rdstate() == std::ios_base::eofbit;\n+  VERIFY( !ctraits_type::compare(array1,\"impulse!!\", 10) );\n+  VERIFY( is_03.rdstate() == std::ios_base::eofbit );\n \n   is_04.width(9);\n   is_04 >> array1;\n-  test &=  ! std::ios::traits_type::compare(array1,\"impulse!\", 9);\n-  test &= !is_04.rdstate(); \n+  VERIFY( ! std::ios::traits_type::compare(array1,\"impulse!\", 9) );\n+  VERIFY( !is_04.rdstate() ); \n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -176,43 +174,43 @@ bool test02() {\n   state1 = is_01.rdstate();\n   is_01 >> c1;   \n   state2 = is_01.rdstate();\n-  test &= state1 != state2;\n-  test &= c1 == c2;\n-  test &= static_cast<bool>(state2 & statefail);\n+  VERIFY( state1 != state2 );\n+  VERIFY( c1 == c2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n \n   state1 = is_02.rdstate();\n   is_02 >> c1;   \n   state2 = is_02.rdstate();\n-  test &= state1 == state2;\n-  test &= c1 == 'o';\n+  VERIFY( state1 == state2 );\n+  VERIFY( c1 == 'o' );\n   is_02 >> c1;   \n   is_02 >> c1;   \n-  test &= c1 == 'c';\n-  test &= !static_cast<bool>(state2 & statefail);\n+  VERIFY( c1 == 'c' );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n \n   // template<_CharT, _Traits>\n   //  basic_istream& operator>>(istream&, unsigned char&)\n   unsigned char uc1 = 'c';\n   state1 = is_02.rdstate();\n   is_02 >> uc1;   \n   state2 = is_02.rdstate();\n-  test &= state1 == state2;\n-  test &= uc1 == 'o';\n+  VERIFY( state1 == state2 );\n+  VERIFY( uc1 == 'o' );\n   is_02 >> uc1;   \n   is_02 >> uc1;   \n-  test &= uc1 == 't';\n+  VERIFY( uc1 == 't' );\n \n   // template<_CharT, _Traits>\n   //  basic_istream& operator>>(istream&, signed char&)\n   signed char sc1 = 'c';\n   state1 = is_02.rdstate();\n   is_02 >> sc1;   \n   state2 = is_02.rdstate();\n-  test &= state1 == state2;\n-  test &= sc1 == 'r';\n+  VERIFY( state1 == state2 );\n+  VERIFY( sc1 == 'r' );\n   is_02 >> sc1;   \n   is_02 >> sc1;   \n-  test &= sc1 == 'n';\n+  VERIFY( sc1 == 'n' );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "72633af6ddd4b0e4804b6a4f2a927a30f19bbbe6", "filename": "libstdc++-v3/testsuite/27_io/istream_extractor_other.cc", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_other.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_other.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_extractor_other.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -23,9 +23,7 @@\n #include <istream>\n #include <sstream>\n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n // stringbufs.\n@@ -71,78 +69,78 @@ bool test01() {\n   state1 = is_00.rdstate();\n   is_00 >> &isbuf_00;   \n   state2 = is_00.rdstate();\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n-  test &= isbuf_00.str() == str_01; \n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_00.str() == str_01 ); \n \n   // null istream to empty in_out_buf\n   is_00.clear(std::ios_base::goodbit);\n   state1 = is_00.rdstate();\n   is_00 >> &isbuf_01;   \n   state2 = is_00.rdstate();\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n-  test &= isbuf_01.str() == str_01; \n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_01.str() == str_01 ); \n \n   // null istream to full in_buf\n   is_00.clear(std::ios_base::goodbit);\n   state1 = is_00.rdstate();\n   is_00 >> &isbuf_04;   \n   state2 = is_00.rdstate();\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n-  test &= isbuf_04.str() == str_02; \n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_04.str() == str_02 ); \n \n   // null istream to full in_out_buf\n   is_00.clear(std::ios_base::goodbit);\n   state1 = is_00.rdstate();\n   is_00 >> &isbuf_05;   \n   state2 = is_00.rdstate();\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n-  test &= isbuf_05.str() == str_02; \n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_05.str() == str_02 ); \n \n   // empty but non-null istream to full in_buf\n   state1 = is_02.rdstate();\n   is_02 >> &isbuf_04;   \n   state2 = is_02.rdstate();\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n-  test &= isbuf_04.str() == str_02; // as only an \"in\" buffer\n-  test &= isbuf_04.sgetc() == 'a';\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_04.str() == str_02 ); // as only an \"in\" buffer\n+  VERIFY( isbuf_04.sgetc() == 'a' );\n \n   // empty but non-null istream to full in_out_buf\n   is_02.clear(std::ios_base::goodbit);\n   state1 = is_02.rdstate();\n   is_02 >> &isbuf_05;   \n   state2 = is_02.rdstate();\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n-  test &= isbuf_05.str() == str_02; // as only an \"in\" buffer\n-  test &= isbuf_05.sgetc() == 'a';\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_05.str() == str_02 ); // as only an \"in\" buffer\n+  VERIFY( isbuf_05.sgetc() == 'a' );\n \n   // full istream to empty in_buf (need out_buf, you know?)\n   state1 = is_04.rdstate();\n   is_04 >> &isbuf_02;   \n   state2 = is_04.rdstate();\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n-  test &= isbuf_02.str() == str_01; // as only an \"in\" buffer\n-  test &= isbuf_02.sgetc() == ctraits_type::eof();\n-  test &= is_04.peek() == ctraits_type::eof(); // as failed\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n+  VERIFY( isbuf_02.str() == str_01 ); // as only an \"in\" buffer\n+  VERIFY( isbuf_02.sgetc() == ctraits_type::eof() );\n+  VERIFY( is_04.peek() == ctraits_type::eof() ); // as failed\n \n   // full istream to empty in_out_buf\n   is_04.clear(std::ios_base::goodbit);\n   state1 = is_04.rdstate();\n   is_04 >> &isbuf_03;   \n   state2 = is_04.rdstate();\n-  test &= state1 != state2;\n-  test &= !static_cast<bool>(state2 & statefail);\n-  test &= state2 == stateeof;\n+  VERIFY( state1 != state2 );\n+  VERIFY( !static_cast<bool>(state2 & statefail) );\n+  VERIFY( state2 == stateeof );\n   strtmp = isbuf_03.str();\n-  test &= strtmp == str_02; // as only an \"in\" buffer\n-  test &= isbuf_03.sgetc() == 'a';\n-  test &= is_04.peek() == ctraits_type::eof();\n+  VERIFY( strtmp == str_02 ); // as only an \"in\" buffer\n+  VERIFY( isbuf_03.sgetc() == 'a' );\n+  VERIFY( is_04.peek() == ctraits_type::eof() );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -162,8 +160,8 @@ bool test02() {\n   std::filebuf fbin, fbout;\n   fbin.open(name_01, std::ios_base::in);\n   fbout.open(name_02, std::ios_base::out | std::ios_base::trunc);\n-  test &= fbin.is_open();\n-  test &= fbout.is_open();\n+  VERIFY( fbin.is_open() );\n+  VERIFY( fbout.is_open() );\n \n   if (test)\n     {\n@@ -174,8 +172,8 @@ bool test02() {\n \n   fbout.close();\n   fbin.close();\n-  test &= !fbin.is_open();\n-  test &= !fbout.is_open();\n+  VERIFY( !fbin.is_open() );\n+  VERIFY( !fbout.is_open() );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "57d376cf0be3cd2dc19de2c05d5b3b747d614d93", "filename": "libstdc++-v3/testsuite/27_io/istream_manip.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_manip.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -23,9 +23,7 @@\n #include <istream>\n #include <sstream>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -44,36 +42,36 @@ bool test01(void)\n   std::istringstream iss02(str01);\n   \n   iss01 >> str04;\n-  test &= str04.size() != str01.size();\n-  test &= str04 == \"santa\";\n+  VERIFY( str04.size() != str01.size() );\n+  VERIFY( str04 == \"santa\" );\n \n   iss02 >> std::ws;\n   iss02 >> str05;\n-  test &= str05.size() != str01.size();\n-  test &= str05 == \"santa\";\n-  test &= str05 == str04;\n+  VERIFY( str05.size() != str01.size() );\n+  VERIFY( str05 == \"santa\" );\n+  VERIFY( str05 == str04 );\n \n   iss01 >> str04;\n-  test &= str04.size() != str01.size();\n-  test &= str04 == \"barbara\";\n+  VERIFY( str04.size() != str01.size() );\n+  VERIFY( str04 == \"barbara\" );\n   \n   iss02 >> std::ws;\n   iss02 >> str05;\n-  test &= str05.size() != str01.size();\n-  test &= str05 == \"barbara\";\n-  test &= str05 == str04;\n+  VERIFY( str05.size() != str01.size() );\n+  VERIFY( str05 == \"barbara\" );\n+  VERIFY( str05 == str04 );\n \n   flag3 = std::ios_base::eofbit;\n   flag4 = std::ios_base::badbit;\n   flag5 = std::ios_base::failbit;\n-  test &= !iss01.fail();\n-  test &= !iss02.fail();\n-  test &= !iss01.eof();\n-  test &= !iss02.eof();\n+  VERIFY( !iss01.fail() );\n+  VERIFY( !iss02.fail() );\n+  VERIFY( !iss01.eof() );\n+  VERIFY( !iss02.eof() );\n \n   iss01 >> std::ws;\n-  test &= !iss01.fail();\n-  test &= iss01.eof();\n+  VERIFY( !iss01.fail() );\n+  VERIFY( iss01.eof() );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "52f6ecb56fbc5cc0a24468b6260a7c6e00fd26f2", "filename": "libstdc++-v3/testsuite/27_io/istream_seeks.cc", "status": "modified", "additions": 57, "deletions": 59, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_seeks.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -24,9 +24,7 @@\n #include <istream>\n #include <sstream>\n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n bool test01()\n@@ -45,7 +43,7 @@ bool test01()\n   ifstream ifs1;\n   pos_type p4 = ifs1.tellg();\n \n-  test &= p3 == p4;\n+  VERIFY( p3 == p4 );\n \n   // in\n   // test ctors leave things in the same positions...\n@@ -55,7 +53,7 @@ bool test01()\n   ifstream ifs2(str_lit01);\n   p4 = ifs2.tellg();\n \n-  test &= p3 == p4;\n+  VERIFY( p3 == p4 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -75,9 +73,9 @@ void test04(void)\n   std::ifstream if01(str_lit01, std::ios_base::in | std::ios_base::out);\n   std::ifstream if02(str_lit01, std::ios_base::in);\n   std::ifstream if03(str_lit02, std::ios_base::out | std::ios_base::trunc); \n-  test &= if01.good();\n-  test &= if02.good();\n-  test &= if03.good();\n+  VERIFY( if01.good() );\n+  VERIFY( if02.good() );\n+  VERIFY( if03.good() );\n \n   std::istream is01(if01.rdbuf());\n   std::istream is02(if02.rdbuf());\n@@ -87,20 +85,20 @@ void test04(void)\n   // in | out\n   pos01 = is01.tellg();\n   pos02 = is01.tellg();\n-  test &= pos01 == pos02;\n-  //  test &= istream::pos_type(0) != pos01; //depricated\n+  VERIFY( pos01 == pos02 );\n+  //  VERIFY( istream::pos_type(0) != pos01 ); //depricated\n \n   // in\n   pos03 = is02.tellg();\n   pos04 = is02.tellg();\n-  test &= pos03 == pos04;\n-  //  test &= istream::pos_type(0) != pos03; //depricated\n+  VERIFY( pos03 == pos04 );\n+  //  VERIFY( istream::pos_type(0) != pos03 ); //depricated\n \n   // out\n   pos05 = is03.tellg();\n   pos06 = is03.tellg();\n-  test &= pos05 == pos06;\n-  //  test &= istream::pos_type(0) != pos01; //depricated\n+  VERIFY( pos05 == pos06 );\n+  //  VERIFY( istream::pos_type(0) != pos01 ); //depricated\n \n   // istream& seekg(pos_type)\n   // istream& seekg(off_type, ios_base::seekdir)\n@@ -114,56 +112,56 @@ void test04(void)\n   is01.seekg(10, std::ios_base::cur);\n   state02 = is01.rdstate();\n   pos01 = is01.tellg(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos01 == pos02 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos02 = is01.tellg(); \n-  test &= pos02 == pos01; \n+  VERIFY( pos02 == pos01 ); \n \n   state01 = is02.rdstate();\n   is02.seekg(10, std::ios_base::cur);\n   state02 = is02.rdstate();\n   pos03 = is02.tellg(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos03 == pos04 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos04 = is02.tellg(); \n-  test &= pos03 == pos04; \n+  VERIFY( pos03 == pos04 ); \n \n   state01 = is03.rdstate();\n   is03.seekg(10, std::ios_base::cur);\n   state02 = is03.rdstate();\n   pos05 = is03.tellg(); \n-  test &= pos05 == pos06 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos05 == pos06 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos06 = is03.tellg(); \n-  test &= pos05 == pos06; \n+  VERIFY( pos05 == pos06 ); \n \n   // beg\n   state01 = is01.rdstate();\n   is01.seekg(20, std::ios_base::beg);\n   state02 = is01.rdstate();\n   pos01 = is01.tellg(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos01 == pos02 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos02 = is01.tellg(); \n-  test &= pos02 == pos01; \n+  VERIFY( pos02 == pos01 ); \n \n   state01 = is02.rdstate();\n   is02.seekg(20, std::ios_base::beg);\n   state02 = is02.rdstate();\n   pos03 = is02.tellg(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos03 == pos04 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos04 = is02.tellg(); \n-  test &= pos03 == pos04; \n+  VERIFY( pos03 == pos04 ); \n \n   state01 = is03.rdstate();\n   is03.seekg(20, std::ios_base::beg);\n   state02 = is03.rdstate();\n   pos05 = is03.tellg(); \n-  test &= pos05 == pos06 + 10;\n-  test &= state01 == state02;\n+  VERIFY( pos05 == pos06 + 10 );\n+  VERIFY( state01 == state02 );\n   pos06 = is03.tellg(); \n-  test &= pos05 == pos06; \n+  VERIFY( pos05 == pos06 ); \n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -180,9 +178,9 @@ void test05(void)\n   std::ifstream if01(str_lit01);\n   std::ifstream if02(str_lit01);\n   std::ifstream if03(str_lit01);\n-  test &= if01.good();\n-  test &= if02.good();\n-  test &= if03.good();\n+  VERIFY( if01.good() );\n+  VERIFY( if02.good() );\n+  VERIFY( if03.good() );\n \n   std::stringbuf strbuf01(std::ios_base::in | std::ios_base::out);\n   if01 >> &strbuf01; \n@@ -199,20 +197,20 @@ void test05(void)\n   // in | out\n   pos01 = is01.tellg();\n   pos02 = is01.tellg();\n-  test &= pos01 == pos02;\n-  // test &= istream::pos_type(0) != pos01; // deprecated\n+  VERIFY( pos01 == pos02 );\n+  // VERIFY( istream::pos_type(0) != pos01 ); // deprecated\n \n   // in\n   pos03 = is02.tellg();\n   pos04 = is02.tellg();\n-  test &= pos03 == pos04;\n-  //  test &= istream::pos_type(0) != pos03; // deprecated\n+  VERIFY( pos03 == pos04 );\n+  //  VERIFY( istream::pos_type(0) != pos03 ); // deprecated\n \n   // out\n   pos05 = is03.tellg();\n   pos06 = is03.tellg();\n-  test &= pos05 == pos06;\n-  //  test &= istream::pos_type(0) != pos01; //deprecated\n+  VERIFY( pos05 == pos06 );\n+  //  VERIFY( istream::pos_type(0) != pos01 ); //deprecated\n \n   // istream& seekg(pos_type)\n   // istream& seekg(off_type, ios_base::seekdir)\n@@ -226,56 +224,56 @@ void test05(void)\n   is01.seekg(10, std::ios_base::cur);\n   state02 = is01.rdstate();\n   pos01 = is01.tellg(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos01 == pos02 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos02 = is01.tellg(); \n-  test &= pos02 == pos01; \n+  VERIFY( pos02 == pos01 ); \n \n   state01 = is02.rdstate();\n   is02.seekg(10, std::ios_base::cur);\n   state02 = is02.rdstate();\n   pos03 = is02.tellg(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos03 == pos04 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos04 = is02.tellg(); \n-  test &= pos03 == pos04; \n+  VERIFY( pos03 == pos04 ); \n \n   state01 = is03.rdstate();\n   is03.seekg(10, std::ios_base::cur);\n   state02 = is03.rdstate();\n   pos05 = is03.tellg(); \n-  test &= pos05 == pos06; // as only out buffer \n-  test &= state01 == state02;\n+  VERIFY( pos05 == pos06 ); // as only out buffer \n+  VERIFY( state01 == state02 );\n   pos06 = is03.tellg(); \n-  test &= pos05 == pos06; \n+  VERIFY( pos05 == pos06 ); \n \n   // beg\n   state01 = is01.rdstate();\n   is01.seekg(20, std::ios_base::beg);\n   state02 = is01.rdstate();\n   pos01 = is01.tellg(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos01 == pos02 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos02 = is01.tellg(); \n-  test &= pos02 == pos01; \n+  VERIFY( pos02 == pos01 ); \n \n   state01 = is02.rdstate();\n   is02.seekg(20, std::ios_base::beg);\n   state02 = is02.rdstate();\n   pos03 = is02.tellg(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos03 == pos04 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos04 = is02.tellg(); \n-  test &= pos03 == pos04; \n+  VERIFY( pos03 == pos04 ); \n \n   state01 = is03.rdstate();\n   is03.seekg(20, std::ios_base::beg);\n   state02 = is03.rdstate();\n   pos05 = is03.tellg(); \n-  test &= pos05 == pos06; // as only out buffer \n-  test &= state01 == state02;\n+  VERIFY( pos05 == pos06 ); // as only out buffer \n+  VERIFY( state01 == state02 );\n   pos06 = is03.tellg(); \n-  test &= pos05 == pos06; \n+  VERIFY( pos05 == pos06 ); \n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "5baca934fd79a4fec07af1f507e21b5e2c01836a", "filename": "libstdc++-v3/testsuite/27_io/istream_sentry.cc", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_sentry.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_sentry.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_sentry.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -31,9 +31,7 @@\n \n #include <istream>\n #include <sstream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n void test01()\n {\n@@ -48,17 +46,17 @@ void test01()\n   \n   // test negatives\n   std::istream::sentry sentry01(istr01);\t\n-  test &= bool(sentry01) == false; \n+  VERIFY( bool(sentry01) == false ); \n \n   std::istream::sentry sentry02(istr01, true);\n-  test &= bool(sentry02) == false; \n+  VERIFY( bool(sentry02) == false ); \n \n   // positive tests\n   std::istream::sentry sentry03(istr02);\t\n-  test &= bool(sentry03) == true; \n+  VERIFY( bool(sentry03) == true ); \n \n   std::istream::sentry sentry04(istr02, true);\n-  test &= bool(sentry04) == true; \n+  VERIFY( bool(sentry04) == true ); \n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "6757a390d0782608861811cf3de3d1750548fde9", "filename": "libstdc++-v3/testsuite/27_io/istream_unformatted.cc", "status": "modified", "additions": 119, "deletions": 115, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistream_unformatted.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -23,15 +23,11 @@\n #include <istream>\n #include <sstream>\n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-#include <cassert>\n-#  define VERIFY(fn) assert(fn)\n-#else\n-#  define VERIFY(fn) \n-#endif\n-\n-bool test01() {\n+#include <debug_assert.h>\n \n+int\n+test01()\n+{\n   typedef std::ios::traits_type traits_type;\n \n   bool test = true;\n@@ -54,78 +50,78 @@ bool test01() {\n   state1 = is_04.rdstate();\n   is_04.read(carray, 0);\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n+  VERIFY( state1 == state2 );\n \n   state1 = is_04.rdstate();\n   is_04.read(carray, 9);\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n-  test &= !strncmp(carray, \"soul eyes\", 9);\n-  test &= is_04.peek() == ':';\n+  VERIFY( state1 == state2 );\n+  VERIFY( !strncmp(carray, \"soul eyes\", 9) );\n+  VERIFY( is_04.peek() == ':' );\n \n   state1 = is_03.rdstate();\n   is_03.read(carray, 60);\n   state2 = is_03.rdstate();\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & stateeof); \n-  test &= static_cast<bool>(state2 & statefail); \n-  test &= !strncmp(carray, \"soul eyes: john coltrane quartet\", 35);\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & stateeof) ); \n+  VERIFY( static_cast<bool>(state2 & statefail) ); \n+  VERIFY( !strncmp(carray, \"soul eyes: john coltrane quartet\", 35) );\n \n \n   // istream& ignore(streamsize n = 1, int_type delim = traits::eof())\n   state1 = is_04.rdstate();\n   is_04.ignore();\n-  test &= is_04.gcount() == 1;\n+  VERIFY( is_04.gcount() == 1 );\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n-  test &= is_04.peek() == ' ';\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == ' ' );\n \n   state1 = is_04.rdstate();\n   is_04.ignore(0);\n-  test &= is_04.gcount() == 0;\n+  VERIFY( is_04.gcount() == 0 );\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n-  test &= is_04.peek() == ' ';\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == ' ' );\n \n   state1 = is_04.rdstate();\n   is_04.ignore(5, traits_type::to_int_type(' '));\n-  test &= is_04.gcount() == 1;\n+  VERIFY( is_04.gcount() == 1 );\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n-  test &= is_04.peek() == 'j';\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == 'j' );\n \n   // int_type peek()\n   state1 = is_04.rdstate();\n-  test &= is_04.peek() == 'j';\n-  test &= is_04.gcount() == 0;\n+  VERIFY( is_04.peek() == 'j' );\n+  VERIFY( is_04.gcount() == 0 );\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n+  VERIFY( state1 == state2 );\n \n   is_04.ignore(30);\n   state1 = is_04.rdstate();\n-  test &= is_04.peek() == traits_type::eof();\n-  test &= is_04.gcount() == 0;\n+  VERIFY( is_04.peek() == traits_type::eof() );\n+  VERIFY( is_04.gcount() == 0 );\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n+  VERIFY( state1 == state2 );\n \n \n   // istream& putback(char c)\n   is_04.clear();\n   state1 = is_04.rdstate();\n   is_04.putback('|');\n-  test &= is_04.gcount() == 0;\n+  VERIFY( is_04.gcount() == 0 );\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n-  test &= is_04.peek() == '|';\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == '|' );\n \n   // istream& unget()\n   is_04.clear();\n   state1 = is_04.rdstate();\n   is_04.unget();\n-  test &= is_04.gcount() == 0;\n+  VERIFY( is_04.gcount() == 0 );\n   state2 = is_04.rdstate();\n-  test &= state1 == state2;\n-  test &= is_04.peek() == 'e';\n+  VERIFY( state1 == state2 );\n+  VERIFY( is_04.peek() == 'e' );\n   \n   // int sync()\n   int i = is_00.sync();\n@@ -134,10 +130,11 @@ bool test01() {\n   assert(test);\n #endif\n  \n-  return test;\n+  return 0;\n }\n \n-bool test02(void)\n+int\n+test02()\n {\n   typedef std::char_traits<char>\ttraits_type;\n \n@@ -166,67 +163,68 @@ bool test02(void)\n   state2 = is_00.rdstate();\n   // make sure failbit was set, since we couldn't extract\n   // from the NULL streambuf...\n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & statefail);\n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n   \n-  test &= is_04.gcount() == 0;\n+  VERIFY( is_04.gcount() == 0 );\n   state1 = is_04.rdstate();\n   is_04.getline(carray1, 1, '\\t'); // extracts, throws away\n   state2 = is_04.rdstate();  \n-  test &= is_04.gcount() == 1;\n-  test &= state1 == state2;\n-  test &= state1 == 0;\n-  test &= !traits_type::compare(\"\", carray1, 1);\n+  VERIFY( is_04.gcount() == 1 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(\"\", carray1, 1) );\n \n   state1 = is_04.rdstate();\n   is_04.getline(carray1, 20, '*');\n   state2 = is_04.rdstate();  \n-  test &= is_04.gcount() == 10;\n-  test &= state1 == state2;\n-  test &= state1 == 0;\n-  test &= !traits_type::compare(\"\\t\\t    sun\", carray1, 10);\n+  VERIFY( is_04.gcount() == 10 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(\"\\t\\t    sun\", carray1, 10) );\n \n   state1 = is_04.rdstate();\n   is_04.getline(carray1, 20);\n   state2 = is_04.rdstate();  \n-  test &= is_04.gcount() == 4;\n-  test &= state1 == state2;\n-  test &= state1 == 0;\n-  test &= !traits_type::compare(\"ra \", carray1, 4);\n+  VERIFY( is_04.gcount() == 4 );\n+  VERIFY( state1 == state2 );\n+  VERIFY( state1 == 0 );\n+  VERIFY( !traits_type::compare(\"ra \", carray1, 4) );\n \n   state1 = is_04.rdstate();\n   is_04.getline(carray1, 65);\n   state2 = is_04.rdstate();  \n-  test &= is_04.gcount() == 64;\n-  test &= state1 != state2;\n-  test &= state2 == statefail;\n-  test &= !traits_type::compare(\"                            and his myth science arkestra presen\", carray1, 65);\n+  VERIFY( is_04.gcount() == 64 );\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == statefail );\n+  VERIFY( !traits_type::compare(\"                            and his myth science arkestra presen\", carray1, 65) );\n \n   is_04.clear();\n   state1 = is_04.rdstate();\n   is_04.getline(carray1, 120, '|');\n   state2 = is_04.rdstate();  \n-  test &= is_04.gcount() == 106;\n-  test &= state1 != state2;\n-  test &= state2 == stateeof;\n+  VERIFY( is_04.gcount() == 106 );\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof );\n \n   is_04.clear();\n   state1 = is_04.rdstate();\n   is_04.getline(carray1, 100, '|');\n   state2 = is_04.rdstate();  \n-  test &= is_04.gcount() == 0; \n-  test &= state1 != state2;\n-  test &= static_cast<bool>(state2 & stateeof);\n-  test &= static_cast<bool>(state2 & statefail);\n+  VERIFY( is_04.gcount() == 0 ); \n+  VERIFY( state1 != state2 );\n+  VERIFY( static_cast<bool>(state2 & stateeof) );\n+  VERIFY( static_cast<bool>(state2 & statefail) );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n  \n-  return test;\n+  return 0;\n }\n \n-bool test03(void)\n+int\n+test03()\n {\n   typedef std::char_traits<char>\ttraits_type;\n \n@@ -256,73 +254,74 @@ bool test03(void)\n   // istream& get(streambuf&, char delim)\n   // istream& get(streambuf&)\n   is_00.get(carray1, 2);\n-  test &= static_cast<bool>(is_00.rdstate() & statefail); \n-  test &= is_00.gcount() == 0;\n+  VERIFY( static_cast<bool>(is_00.rdstate() & statefail) ); \n+  VERIFY( is_00.gcount() == 0 );\n \n   is_04.get(carray1, 4);\n-  test &= !(is_04.rdstate() & statefail);\n-  test &= !traits_type::compare(carray1, \"   \", 4);\n-  test &= is_04.gcount() == 3;\n+  VERIFY( !(is_04.rdstate() & statefail) );\n+  VERIFY( !traits_type::compare(carray1, \"   \", 4) );\n+  VERIFY( is_04.gcount() == 3 );\n \n   is_04.clear();\n   is_04.get(carray1 + 3, 200);\n-  test &= !(is_04.rdstate() & statefail);\n-  test &= !(is_04.rdstate() & stateeof);\n-  test &= !traits_type::compare(carray1, str_lit01, 10);\n-  test &= is_04.gcount() == 7;\n+  VERIFY( !(is_04.rdstate() & statefail) );\n+  VERIFY( !(is_04.rdstate() & stateeof) );\n+  VERIFY( !traits_type::compare(carray1, str_lit01, 10) );\n+  VERIFY( is_04.gcount() == 7 );\n \n   is_04.clear();\n   is_04.get(carray1, 200);\n-  test &= !(is_04.rdstate() & stateeof);\n-  test &= static_cast<bool>(is_04.rdstate() & statefail); // delimiter\n-  test &= is_04.gcount() == 0;\n+  VERIFY( !(is_04.rdstate() & stateeof) );\n+  VERIFY( static_cast<bool>(is_04.rdstate() & statefail) ); // delimiter\n+  VERIFY( is_04.gcount() == 0 );\n   is_04.clear();\n   is_04.get(carray1, 200, '[');\n-  test &= static_cast<bool>(is_04.rdstate() & stateeof);\n-  test &= !(is_04.rdstate() & statefail);\n-  test &= is_04.gcount() == 125;\n+  VERIFY( static_cast<bool>(is_04.rdstate() & stateeof) );\n+  VERIFY( !(is_04.rdstate() & statefail) );\n+  VERIFY( is_04.gcount() == 125 );\n   is_04.clear();  \n   is_04.get(carray1, 200);\n-  test &= static_cast<bool>(is_04.rdstate() & stateeof);\n-  test &= static_cast<bool>(is_04.rdstate() & statefail); \n-  test &= is_04.gcount() == 0;\n+  VERIFY( static_cast<bool>(is_04.rdstate() & stateeof) );\n+  VERIFY( static_cast<bool>(is_04.rdstate() & statefail) ); \n+  VERIFY( is_04.gcount() == 0 );\n \n   std::stringbuf sbuf_02(std::ios_base::in);\n   is_05.clear();\n   is_05.get(sbuf_02);\n-  test &= is_05.gcount() == 0;\n-  test &= static_cast<bool>(is_05.rdstate() & statefail); \n-  test &= !(is_05.rdstate() & stateeof); \n+  VERIFY( is_05.gcount() == 0 );\n+  VERIFY( static_cast<bool>(is_05.rdstate() & statefail) ); \n+  VERIFY( !(is_05.rdstate() & stateeof) ); \n \n   is_05.clear();\n   is_05.get(sbuf_03);\n-  test &= is_05.gcount() == 10;\n-  test &= sbuf_03.str() == \"   sun*ra \";\n-  test &= !(is_05.rdstate() & statefail); \n-  test &= !(is_05.rdstate() & stateeof); \n+  VERIFY( is_05.gcount() == 10 );\n+  VERIFY( sbuf_03.str() == \"   sun*ra \" );\n+  VERIFY( !(is_05.rdstate() & statefail) ); \n+  VERIFY( !(is_05.rdstate() & stateeof) ); \n \n   is_05.clear();\n   is_05.get(sbuf_03, '|');\n-  test &= is_05.gcount() == 125;\n-  test &= sbuf_03.str() == str_lit01;\n-  test &= !(is_05.rdstate() & statefail); \n-  test &= static_cast<bool>(is_05.rdstate() & stateeof); \n+  VERIFY( is_05.gcount() == 125 );\n+  VERIFY( sbuf_03.str() == str_lit01 );\n+  VERIFY( !(is_05.rdstate() & statefail) ); \n+  VERIFY( static_cast<bool>(is_05.rdstate() & stateeof) ); \n \n   is_05.clear();\n   is_05.get(sbuf_03, '|');\n-  test &= is_05.gcount() == 0;\n-  test &= static_cast<bool>(is_05.rdstate() & stateeof); \n-  test &= static_cast<bool>(is_05.rdstate() & statefail); \n+  VERIFY( is_05.gcount() == 0 );\n+  VERIFY( static_cast<bool>(is_05.rdstate() & stateeof) ); \n+  VERIFY( static_cast<bool>(is_05.rdstate() & statefail) ); \n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n  \n-  return test;\n+  return 0;\n }\n \n // http://sourceware.cygnus.com/ml/libstdc++/2000-q1/msg00177.html\n-void test04()\n+int\n+test04()\n {\n   bool test = true;\n \n@@ -337,21 +336,23 @@ void test04()\n   stateeof = std::ios_base::eofbit;\n \n   state1 = stateeof | statefail;\n-  test &= is_00.gcount() == 0;\n+  VERIFY( is_00.gcount() == 0 );\n   is_00.read(c_array, str_00.size() + 1);\n-  test &= is_00.gcount() == str_00.size();\n-  test &= is_00.rdstate() == state1;\n+  VERIFY( is_00.gcount() == str_00.size() );\n+  VERIFY( is_00.rdstate() == state1 );\n \n   is_00.read(c_array, str_00.size());\n-  test &= is_00.rdstate() == state1;\n+  VERIFY( is_00.rdstate() == state1 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n+  return 0;\n }\n \n // http://sourceware.cygnus.com/ml/libstdc++/2000-07/msg00003.html\n-bool test05()\n+int\n+test05()\n {\n   const char* charray = \"\n a\n@@ -420,7 +421,7 @@ aaaaaaaaaaaaaa\n \n \n // http://sources.redhat.com/ml/libstdc++/2000-07/msg00126.html\n-bool\n+int\n test06()\n {\n   using namespace std;\n@@ -434,31 +435,34 @@ test06()\n   istream istr(&strbuf);\n   \n   istr.getline(tmp,it); \n-  test &= istr.gcount() == it;  // extracted whole string\n-  test &= strlen(tmp) == 4;     // stored all but '\\n'\n-  test &= !istr.eof();          // extracted up to but not eof\n-  test &= !istr.fail();         // failbit not set\n+  VERIFY( istr.gcount() == it );  // extracted whole string\n+  VERIFY( strlen(tmp) == 4 );     // stored all but '\\n'\n+  VERIFY( !istr.eof() );          // extracted up to but not eof\n+  VERIFY( !istr.fail() );         // failbit not set\n   \n   char c = 'z';\n   istr.get(c);\n-  test &= c == 'z';\n-  test &= istr.eof();\n+  VERIFY( c == 'z' );\n+  VERIFY( istr.eof() );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n-  return test;\n+  \n+  return 0;\n }\n \n \n-int main()\n+int \n+main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n   test05();\n   test06();\n+  \n   return 0;\n }\n "}, {"sha": "e11b6ab5fff5d5ec1fafa85e36323ac1a9c5c35e", "filename": "libstdc++-v3/testsuite/27_io/istringstream_members.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistringstream_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistringstream_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fistringstream_members.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -24,9 +24,7 @@\n // stringbuf* rdbuf() const\n \n #include <sstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n void test01()\n@@ -47,30 +45,30 @@ void test01()\n   state1 = is01.rdstate();\n   is01 >> a;\n   state2 = is01.rdstate();\n-  test &=  a = i01;\n+  VERIFY( a = i01 );\n   // 22.2.2.1.2 num_get virtual functions\n   // p 13\n   // in any case, if stage 2 processing was terminated by the test for\n   // in == end then err != ios_base::eofbit is performed.\n-  test &= state1 != state2;\n-  test &= state2 == stateeof; \n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n \n   is01.str(str01);\n   is01 >> b;\n-  test &=  b != a; \n+  VERIFY( b != a ); \n   // as is01.good() is false, istream::sentry blocks extraction.\n \n   is01.clear();\n   state1 = is01.rdstate();\n   is01 >> b;\n   state2 = is01.rdstate();\n-  test &=  b == a; \n-  test &= state1 != state2;\n-  test &= state2 == stateeof; \n+  VERIFY( b == a ); \n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n \n   // string str() const\n   str02 = is01.str();\n-  test &= str01 == str02;\n+  VERIFY( str01 == str02 );\n \n  #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "3fbe3dda2437b46901306137de2ad3caa74735b9", "filename": "libstdc++-v3/testsuite/27_io/narrow_stream_objects.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -66,13 +66,15 @@\n #include <cstdlib>\n #include <cstring>\n #include <ctime>\n+#include <debug_assert.h>\n \n // Include iostream last, just to make is as difficult as possible to\n // properly initialize the standard iostream objects.\n #include <iostream>\n \n // Make sure all the standard streams are defined.\n-bool test01()\n+int\n+test01()\n {\n   bool test = true;\n \n@@ -83,17 +85,19 @@ bool test01()\n   array1[i] = '\\0';\n   std::cout << \"testing cout\" << std::endl;\n   std::cerr << \"testing cerr\" << std::endl;\n-  test &= std::cerr.flags() & std::ios_base::unitbuf;\n+  VERIFY( std::cerr.flags() & std::ios_base::unitbuf );\n   std::clog << \"testing clog\" << std::endl;\n   // std::cin >> array1; // requires somebody to type something in.\n-  test &= std::cin.tie() == &std::cout;\n+  VERIFY( std::cin.tie() == &std::cout );\n \n-  return test;\n+  return 0;\n }\n \n \n-int main(void)\n+int \n+main()\n {\n   test01();\n   return 0;\n }\n+"}, {"sha": "578ad1ff4eb71395de67a39d47057af0daa762e4", "filename": "libstdc++-v3/testsuite/27_io/ofstream_members.cc", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fofstream_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fofstream_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fofstream_members.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -20,9 +20,7 @@\n \n #include <ostream>\n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n const char name_01[] = \"testsuite/ofstream_members-1.tst\";\n const char name_02[] = \"testsuite/ofstream_members-1.txt\";\n@@ -35,15 +33,15 @@ bool test00()\n   ofs1.close();\n   \n   // false as expected:\n-  test &= !ofs1.is_open();\n+  VERIFY( !ofs1.is_open() );\n    // this is now true:\n-  test &= !(ofs1);\n+  VERIFY( !(ofs1) );\n   \n   ofs1.open(name_02);\n-  test &= ofs1.is_open();\n+  VERIFY( ofs1.is_open() );\n   // fail bit still true\n-  test &= !(ofs1);\n-  test &= ofs1.rdstate() == std::ios_base::failbit;\n+  VERIFY( !(ofs1) );\n+  VERIFY( ofs1.rdstate() == std::ios_base::failbit );\n \n   ofs1.close();\n \n@@ -64,7 +62,7 @@ bool test01()\n   for(int i = 0; ++i < more_than_max_open_files;)\n     {\n       std::ofstream ifs(name_02);\n-      test &= static_cast<bool>(ifs);\n+      VERIFY( static_cast<bool>(ifs) );\n     }\n \n #ifdef DEBUG_ASSERT"}, {"sha": "722ce1c4597e8594682bd3dd522917af2c4a5457", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -24,7 +24,7 @@\n #include <locale>\n #include <sstream>\n #include <limits>\n-#include <assert.h>\n+#include <debug_assert.h>\n \n using namespace std;\n \n@@ -187,8 +187,10 @@ void apply_formatting(const _TestCase & tc, basic_ostream<_CharT> & os)\n     os.setf(ios::right);\n }\n \n-void test01()\n+int\n+test01()\n {\n+  bool test = true;\n   for (int j=0; j<sizeof(testcases)/sizeof(testcases[0]); j++)\n     {\n       _TestCase & tc = testcases[j];\n@@ -206,7 +208,7 @@ void test01()\n #ifdef TEST_NUMPUT_VERBOSE\n         cout << \"result: \" << os.str() << endl;\n #endif\n-        assert(os && os.str() == tc.result);\n+        VERIFY( os && os.str() == tc.result );\n       }\n       // test long double with char type\n       {\n@@ -219,7 +221,7 @@ void test01()\n #ifdef TEST_NUMPUT_VERBOSE\n         cout << \"result: \" << os.str() << endl;\n #endif\n-        assert(os && os.str() == tc.result);\n+        VERIFY( os && os.str() == tc.result );\n       }\n #if _GLIBCPP_USE_WCHAR_T\n       // test double with wchar_t type\n@@ -230,7 +232,7 @@ void test01()\n         os.imbue(__loc);\n         apply_formatting(tc, os);\n         os << tc.val;\n-        assert(os && os.str() == tc.wresult);\n+        VERIFY( os && os.str() == tc.wresult );\n       }\n       // test long double with wchar_t type\n       {\n@@ -240,14 +242,18 @@ void test01()\n         os.imbue(__loc);\n         apply_formatting(tc, os);\n         os << (long double)tc.val;\n-        assert(os && os.str() == tc.wresult);\n+        VERIFY( os && os.str() == tc.wresult );\n       }\n #endif\n     }\n+    \n+  return 0;\n }\n \n-void test02()\n+int\n+test02()\n {\n+  bool test = true;\n   // make sure we can output a very long float\n   long double val = 1.2345678901234567890123456789e+1000L;\n   int prec = numeric_limits<long double>::digits10;\n@@ -263,10 +269,13 @@ void test02()\n   cout << \"expect: \" << largebuf << endl;\n   cout << \"result: \" << os.str() << endl;\n #endif\n-  assert(os && os.str() == largebuf);\n+  VERIFY(os && os.str() == largebuf);\n+\n+  return 0;\n }\n \n-void test03()\n+int \n+test03()\n {\n   short s = -1;\n   int i = -1;\n@@ -279,24 +288,27 @@ void test03()\n   ostream o(&strbuf);\n \n   o << oct << s << ' ' << hex << s; \n-  test &= strbuf.str() == \"177777 ffff\"; // Assuming 2byte-shorts\n+  VERIFY( strbuf.str() == \"177777 ffff\" ); // Assuming 2byte-shorts\n   strbuf.str(str_blank);\n \n   o << oct << i << ' ' << hex << i; \n-  test &= strbuf.str() == \"37777777777 ffffffff\";\n+  VERIFY( strbuf.str() == \"37777777777 ffffffff\" );\n   strbuf.str(str_blank);\n \n   o << oct << l << ' ' << hex << l; \n-  test &= strbuf.str() == \"37777777777 ffffffff\";\n+  VERIFY( strbuf.str() == \"37777777777 ffffffff\" );\n   strbuf.str(str_blank);\n \n   o << showpos << hex << showbase << 11;\n-  test &= strbuf.str() == \"0xb\";\n+  VERIFY( strbuf.str() == \"0xb\" );\n   \n-  assert(test);\n+  VERIFY(test);\n+  \n+  return 0;\n }\n \n-int main()\n+int \n+main()\n {\n   test01();\n   test02();"}, {"sha": "c22b53bf7886266e1e1e577978c0ce4400422658", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_char.cc", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_char.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -24,9 +24,7 @@\n #include <ostream>\n #include <sstream>\n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n // ofstream\n bool test01()\n@@ -75,7 +73,7 @@ bool test02(void)\n   oss01.flags(std::ios_base::left);\n   oss01 << str01;\n   tmp = oss01.str();\n-  test &= tmp == \"00000\";\n+  VERIFY( tmp == \"00000\" );\n \n   std::string str02 = \"1\";\n   std::ostringstream oss02;\n@@ -84,7 +82,7 @@ bool test02(void)\n   oss02.flags(std::ios_base::left);\n   oss02 << str02;\n   tmp = oss02.str();\n-  test &= tmp == \"10000\";\n+  VERIFY( tmp == \"10000\" );\n \n   std::string str03 = \"909909\";\n   std::ostringstream oss03;\n@@ -93,7 +91,7 @@ bool test02(void)\n   oss03.flags(std::ios_base::left);\n   oss03 << str03;\n   tmp = oss03.str();\n-  test &= tmp == \"909909\";\n+  VERIFY( tmp == \"909909\" );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -116,7 +114,7 @@ bool test03(void)\n   oss01.flags(std::ios_base::right);\n   oss01 << str01;\n   tmp = oss01.str();\n-  test &= tmp == \"00000\";\n+  VERIFY( tmp == \"00000\" );\n \n   std::string str02 = \"1\";\n   std::ostringstream oss02;\n@@ -125,7 +123,7 @@ bool test03(void)\n   oss02.flags(std::ios_base::right);\n   oss02 << str02;\n   tmp = oss02.str();\n-  test &= tmp == \"00001\";\n+  VERIFY( tmp == \"00001\" );\n \n   std::string str03 = \"909909\";\n   std::ostringstream oss03;\n@@ -134,7 +132,7 @@ bool test03(void)\n   oss03.flags(std::ios_base::right);\n   oss03 << str03;\n   tmp = oss03.str();\n-  test &= tmp == \"909909\";\n+  VERIFY( tmp == \"909909\" );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -164,10 +162,10 @@ bool test04() {\n   for (int i = 0; i < i_max; ++i) \n     oss_02 << \"Test: \" << i << std::endl;\n   str_tmp = oss_02.str();\n-  test &= !oss_02.bad();\n-  test &= oss_02.good();\n-  test &= str_tmp != str_01;\n-  test &= str_tmp.size() == 2390;\n+  VERIFY( !oss_02.bad() );\n+  VERIFY( oss_02.good() );\n+  VERIFY( str_tmp != str_01 );\n+  VERIFY( str_tmp.size() == 2390 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -207,17 +205,17 @@ bool test05()\n   sstr02 << str01;\n   str05 = sstr01.str();\n   str10 = sstr02.str();\n-  test &= str05 == str01;\n-  test &= str10 == str01;\n+  VERIFY( str05 == str01 );\n+  VERIFY( str10 == str01 );\n \n   // test 2: in | out \n   std::ostringstream sstr04(str01,  std::ios_base::out | std::ios_base::in);\n   std::ostringstream sstr05(std::ios_base::in | std::ios_base::out);\n   sstr05 << str01;\n   str05 = sstr04.str();\n   str10 = sstr05.str();\n-  test &= str05 == str01;\n-  test &= str10 == str01;\n+  VERIFY( str05 == str01 );\n+  VERIFY( str10 == str01 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -236,21 +234,21 @@ void test06()\n \n   // normal\n   std::ostringstream ostr1(\"mos def\");\n-  test &= ostr1.str() == \"mos def\"; \n+  VERIFY( ostr1.str() == \"mos def\" ); \n   ostr1 << \" & talib kweli\";  // should overwrite first part of buffer\n-  test &= ostr1.str() == \" & talib kweli\";\n+  VERIFY( ostr1.str() == \" & talib kweli\" );\n   ostr1 << \" are black star\";  // should append to string from above\n-  test &= ostr1.str() != carray01;\n-  test &= ostr1.str() == \" & talib kweli are black star\";\n+  VERIFY( ostr1.str() != carray01 );\n+  VERIFY( ostr1.str() == \" & talib kweli are black star\" );\n \n   // appending\n   std::ostringstream ostr2(\"blackalicious\", \n \t\t\t   std::ios_base::out | std::ios_base::ate);\n-  test &= ostr2.str() == \"blackalicious\"; \n+  VERIFY( ostr2.str() == \"blackalicious\" ); \n   ostr2 << \" NIA \";  // should not overwrite first part of buffer\n-  test &= ostr2.str() == \"blackalicious NIA \";\n+  VERIFY( ostr2.str() == \"blackalicious NIA \" );\n   ostr2 << \"4: deception (5:19)\";  // should append to full string from above\n-  test &= ostr2.str() == \"blackalicious NIA 4: deception (5:19)\";\n+  VERIFY( ostr2.str() == \"blackalicious NIA 4: deception (5:19)\" );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "a62a218ae82a20d10b59ad0dbff3bb2efc8f50d9", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_other.cc", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_other.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -24,9 +24,7 @@\n #include <ostream>\n #include <sstream>\n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n const int size = 1000;\n const char name_01[] = \"testsuite/ostream_inserter_other-1.tst\";\n@@ -36,16 +34,20 @@ const char name_04[] = \"testsuite/ostream_inserter_other-2.txt\";\n \n \n // stringstream\n-bool test01() {\n+int \n+test01() \n+{\n   bool test = true;\n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n-  return test;\n+  return 0;\n }\n \n // fstream\n-bool test02() {\n+int\n+test02() \n+{\n   typedef std::ios_base::iostate iostate;\n   bool test = true;\n \n@@ -57,13 +59,13 @@ bool test02() {\n   iostate state01 = f_in1.rdstate();\n   f_in1 >> strbuf01;\n   iostate state02 = f_in1.rdstate();\n-  test &= state01 != state02;\n-  test &= (state02 & std::ios_base::failbit) != 0;\n+  VERIFY( state01 != state02 );\n+  VERIFY( (state02 & std::ios_base::failbit) != 0 );\n   state01 = f_out1.rdstate();\n   f_out1 << strbuf01;\n   state02 = f_out1.rdstate();\n-  test &= state01 != state02;\n-  test &= (state02 & std::ios_base::failbit) != 0;\n+  VERIFY( state01 != state02 );\n+  VERIFY( (state02 & std::ios_base::failbit) != 0 );\n \n   // filebuf->filebuf\n   std::ifstream f_in(name_01);\n@@ -86,8 +88,8 @@ bool test02() {\n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n- \n-  return test;\n+  \n+  return 0;\n }\n \n // via Brent Verner <brent@rcfile.org>\n@@ -130,7 +132,8 @@ test03(void)\n   return 0;\n }\n \n-int main()\n+int \n+main()\n {\n   test01();\n   test02();"}, {"sha": "17d376a8c8e88f010fc5c1d830e29fbf84bb88ae", "filename": "libstdc++-v3/testsuite/27_io/ostream_manip.cc", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_manip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_manip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_manip.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -23,9 +23,7 @@\n #include <ostream>\n #include <sstream>\n #include <stdexcept>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n bool test01(void)\n {\n@@ -47,33 +45,33 @@ bool test01(void)\n \n   oss01 << std::endl;\n   str04 = oss01.str();\n-  test &= str04.size() == str01.size();\n+  VERIFY( str04.size() == str01.size() );\n \n   oss02 << std::endl;\n   str05 = oss02.str();\n-  test &= str05.size() == 1;\n+  VERIFY( str05.size() == 1 );\n \n   // template<_CharT, _Traits>\n   //  basic_ostream<_CharT, _Traits>& ends(basic_ostream<_Char, _Traits>& os)\n   oss01 << std::ends;\n   str04 = oss01.str();\n-  test &= str04.size() == str01.size();\n-  test &= str04[1] == char();\n+  VERIFY( str04.size() == str01.size() );\n+  VERIFY( str04[1] == char() );\n \n   oss02 << std::ends;\n   str05 = oss02.str();\n-  test &= str05.size() == 2;\n-  test &= str05[1] == char();\n+  VERIFY( str05.size() == 2 );\n+  VERIFY( str05[1] == char() );\n \n   // template<_CharT, _Traits>\n   //  basic_ostream<_CharT, _Traits>& flush(basic_ostream<_Char, _Traits>& os)\n   oss01.flush();\n   str04 = oss01.str();\n-  test &= str04.size() == str01.size();\n+  VERIFY( str04.size() == str01.size() );\n \n   oss02.flush();\n   str05 = oss02.str();\n-  test &= str05.size() == 2;\n+  VERIFY( str05.size() == 2 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -94,25 +92,25 @@ bool test02()\n   const string str_00(\"herbie_hancock\");\n   int_type len1 = str_00.size();\n   osst_01 << str_00;\n-  test &= osst_01.str().size() == len1;\n+  VERIFY( osst_01.str().size() == len1 );\n \n   osst_01 << ends;\n \n   const string str_01(\"speak like a child\");\n   int_type len2 = str_01.size();\n   osst_01 << str_01;\n   int_type len3 = osst_01.str().size();\n-  test &= len1 < len3;\n-  test &= len3 == len1 + len2 + 1;\n+  VERIFY( len1 < len3 );\n+  VERIFY( len3 == len1 + len2 + 1 );\n \n   osst_01 << ends;\n \n   const string str_02(\"+ inventions and dimensions\");\n   int_type len4 = str_02.size();\n   osst_01 << str_02;\n   int_type len5 = osst_01.str().size();\n-  test &= len3 < len5;\n-  test &= len5 == len3 + len4 + 1;\n+  VERIFY( len3 < len5 );\n+  VERIFY( len5 == len3 + len4 + 1 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "2f5404fa5ac3602ed557b097a2cebbd07963afaa", "filename": "libstdc++-v3/testsuite/27_io/ostream_seeks.cc", "status": "modified", "additions": 57, "deletions": 59, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_seeks.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -23,9 +23,7 @@\n #include <ostream>\n #include <sstream>\n #include <fstream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n bool test01()\n@@ -44,7 +42,7 @@ bool test01()\n   ofstream ofs1;\n   pos_type p2 = ofs1.tellp();\n \n-  test &= p1 == p2;\n+  VERIFY( p1 == p2 );\n \n   // out\n   // test ctors leave things in the same positions...\n@@ -54,7 +52,7 @@ bool test01()\n   ofstream ofs2(str_lit01);\n   p2 = ofs2.tellp();\n  \n-  test &= p1 == p2;\n+  VERIFY( p1 == p2 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -79,9 +77,9 @@ void test04(void)\n   std::ifstream if01(str_lit01, std::ios_base::in | std::ios_base::out);\n   std::ifstream if02(str_lit01, std::ios_base::in);\n   std::ifstream if03(str_lit02, std::ios_base::out | std::ios_base::trunc); \n-  test &= if01.good();\n-  test &= if02.good();\n-  test &= if03.good();\n+  VERIFY( if01.good() );\n+  VERIFY( if02.good() );\n+  VERIFY( if03.good() );\n \n   std::istream is01(if01.rdbuf());\n   std::istream is02(if02.rdbuf());\n@@ -91,20 +89,20 @@ void test04(void)\n   // in | out\n   pos01 = is01.tellp();\n   pos02 = is01.tellp();\n-  test &= pos01 == pos02;\n-  //  test &= istream::pos_type(0) != pos01; //depricated\n+  VERIFY( pos01 == pos02 );\n+  //  VERIFY( istream::pos_type(0) != pos01 ); //depricated\n \n   // in\n   pos03 = is02.tellp();\n   pos04 = is02.tellp();\n-  test &= pos03 == pos04;\n-  //  test &= istream::pos_type(0) != pos03; //depricated\n+  VERIFY( pos03 == pos04 );\n+  //  VERIFY( istream::pos_type(0) != pos03 ); //depricated\n \n   // out\n   pos05 = is03.tellp();\n   pos06 = is03.tellp();\n-  test &= pos05 == pos06;\n-  //  test &= istream::pos_type(0) != pos01; //depricated\n+  VERIFY( pos05 == pos06 );\n+  //  VERIFY( istream::pos_type(0) != pos01 ); //depricated\n \n   // istream& seekg(pos_type)\n   // istream& seekg(off_type, ios_base::seekdir)\n@@ -118,56 +116,56 @@ void test04(void)\n   is01.seekg(10, std::ios_base::cur);\n   state02 = is01.rdstate();\n   pos01 = is01.tellp(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos01 == pos02 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos02 = is01.tellp(); \n-  test &= pos02 == pos01; \n+  VERIFY( pos02 == pos01 ); \n \n   state01 = is02.rdstate();\n   is02.seekg(10, std::ios_base::cur);\n   state02 = is02.rdstate();\n   pos03 = is02.tellp(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos03 == pos04 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos04 = is02.tellp(); \n-  test &= pos03 == pos04; \n+  VERIFY( pos03 == pos04 ); \n \n   state01 = is03.rdstate();\n   is03.seekg(10, std::ios_base::cur);\n   state02 = is03.rdstate();\n   pos05 = is03.tellp(); \n-  test &= pos05 == pos06 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos05 == pos06 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos06 = is03.tellp(); \n-  test &= pos05 == pos06; \n+  VERIFY( pos05 == pos06 ); \n \n   // beg\n   state01 = is01.rdstate();\n   is01.seekg(20, std::ios_base::beg);\n   state02 = is01.rdstate();\n   pos01 = is01.tellp(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos01 == pos02 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos02 = is01.tellp(); \n-  test &= pos02 == pos01; \n+  VERIFY( pos02 == pos01 ); \n \n   state01 = is02.rdstate();\n   is02.seekg(20, std::ios_base::beg);\n   state02 = is02.rdstate();\n   pos03 = is02.tellp(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos03 == pos04 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos04 = is02.tellp(); \n-  test &= pos03 == pos04; \n+  VERIFY( pos03 == pos04 ); \n \n   state01 = is03.rdstate();\n   is03.seekg(20, std::ios_base::beg);\n   state02 = is03.rdstate();\n   pos05 = is03.tellp(); \n-  test &= pos05 == pos06 + 10;\n-  test &= state01 == state02;\n+  VERIFY( pos05 == pos06 + 10 );\n+  VERIFY( state01 == state02 );\n   pos06 = is03.tellp(); \n-  test &= pos05 == pos06; \n+  VERIFY( pos05 == pos06 ); \n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -184,9 +182,9 @@ void test05(void)\n   std::ifstream if01(str_lit01);\n   std::ifstream if02(str_lit01);\n   std::ifstream if03(str_lit01);\n-  test &= if01.good();\n-  test &= if02.good();\n-  test &= if03.good();\n+  VERIFY( if01.good() );\n+  VERIFY( if02.good() );\n+  VERIFY( if03.good() );\n \n   std::stringbuf strbuf01(std::ios_base::in | std::ios_base::out);\n   if01 >> &strbuf01; \n@@ -203,20 +201,20 @@ void test05(void)\n   // in | out\n   pos01 = is01.tellp();\n   pos02 = is01.tellp();\n-  test &= pos01 == pos02;\n-  // test &= istream::pos_type(0) != pos01; // deprecated\n+  VERIFY( pos01 == pos02 );\n+  // VERIFY( istream::pos_type(0) != pos01 ); // deprecated\n \n   // in\n   pos03 = is02.tellp();\n   pos04 = is02.tellp();\n-  test &= pos03 == pos04;\n-  //  test &= istream::pos_type(0) != pos03; // deprecated\n+  VERIFY( pos03 == pos04 );\n+  //  VERIFY( istream::pos_type(0) != pos03 ); // deprecated\n \n   // out\n   pos05 = is03.tellp();\n   pos06 = is03.tellp();\n-  test &= pos05 == pos06;\n-  //  test &= istream::pos_type(0) != pos01; //deprecated\n+  VERIFY( pos05 == pos06 );\n+  //  VERIFY( istream::pos_type(0) != pos01 ); //deprecated\n \n   // istream& seekg(pos_type)\n   // istream& seekg(off_type, ios_base::seekdir)\n@@ -230,56 +228,56 @@ void test05(void)\n   is01.seekg(10, std::ios_base::cur);\n   state02 = is01.rdstate();\n   pos01 = is01.tellp(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos01 == pos02 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos02 = is01.tellp(); \n-  test &= pos02 == pos01; \n+  VERIFY( pos02 == pos01 ); \n \n   state01 = is02.rdstate();\n   is02.seekg(10, std::ios_base::cur);\n   state02 = is02.rdstate();\n   pos03 = is02.tellp(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos03 == pos04 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos04 = is02.tellp(); \n-  test &= pos03 == pos04; \n+  VERIFY( pos03 == pos04 ); \n \n   state01 = is03.rdstate();\n   is03.seekg(10, std::ios_base::cur);\n   state02 = is03.rdstate();\n   pos05 = is03.tellp(); \n-  test &= pos05 == pos06; // as only out buffer \n-  test &= state01 == state02;\n+  VERIFY( pos05 == pos06 ); // as only out buffer \n+  VERIFY( state01 == state02 );\n   pos06 = is03.tellp(); \n-  test &= pos05 == pos06; \n+  VERIFY( pos05 == pos06 ); \n \n   // beg\n   state01 = is01.rdstate();\n   is01.seekg(20, std::ios_base::beg);\n   state02 = is01.rdstate();\n   pos01 = is01.tellp(); \n-  test &= pos01 == pos02 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos01 == pos02 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos02 = is01.tellp(); \n-  test &= pos02 == pos01; \n+  VERIFY( pos02 == pos01 ); \n \n   state01 = is02.rdstate();\n   is02.seekg(20, std::ios_base::beg);\n   state02 = is02.rdstate();\n   pos03 = is02.tellp(); \n-  test &= pos03 == pos04 + 10; \n-  test &= state01 == state02;\n+  VERIFY( pos03 == pos04 + 10 ); \n+  VERIFY( state01 == state02 );\n   pos04 = is02.tellp(); \n-  test &= pos03 == pos04; \n+  VERIFY( pos03 == pos04 ); \n \n   state01 = is03.rdstate();\n   is03.seekg(20, std::ios_base::beg);\n   state02 = is03.rdstate();\n   pos05 = is03.tellp(); \n-  test &= pos05 == pos06; // as only out buffer \n-  test &= state01 == state02;\n+  VERIFY( pos05 == pos06 ); // as only out buffer \n+  VERIFY( state01 == state02 );\n   pos06 = is03.tellp(); \n-  test &= pos05 == pos06; \n+  VERIFY( pos05 == pos06 ); \n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "657aa79f372f809ef3af440f9143bee99b9db38f", "filename": "libstdc++-v3/testsuite/27_io/ostream_unformatted.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_unformatted.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_unformatted.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_unformatted.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -20,9 +20,7 @@\n \n #include <sstream>\n #include <ostream>\n-#ifdef DEBUG_ASSERT\n-  #include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n \n void test01()\n@@ -36,13 +34,13 @@ void test01()\n   ostringstream ost;\n   pos_type pos1;\n   pos1 = ost.tellp();\n-  test &= pos1 == pos_type(-1);\n+  VERIFY( pos1 == pos_type(-1) );\n   ost << \"RZA \";\n   pos1 = ost.tellp();\n-  test &= pos1 == pos_type(4);\n+  VERIFY( pos1 == pos_type(4) );\n   ost << \"ghost dog: way of the samurai\";\n   pos1 = ost.tellp();\n-  test &= pos1 == pos_type(33);\n+  VERIFY( pos1 == pos_type(33) );\n \n #ifdef DEBUG_ASSERT\n   assert(test);"}, {"sha": "8b7989f683130e2117ac0a0b68db28d186a3eac4", "filename": "libstdc++-v3/testsuite/27_io/streambuf.cc", "status": "modified", "additions": 36, "deletions": 38, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstreambuf.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -31,9 +31,7 @@\n \n #include <streambuf>\n #include <ostream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n class testbuf : public std::streambuf\n {\n@@ -50,12 +48,12 @@ class testbuf : public std::streambuf\n   check_pointers()\n   { \n     bool test = true;\n-    test &= this->eback() == NULL;\n-    test &= this->gptr() == NULL;\n-    test &= this->egptr() == NULL;\n-    test &= this->pbase() == NULL;\n-    test &= this->pptr() == NULL;\n-    test &= this->epptr() == NULL;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n     return test;\n   }\n \n@@ -103,33 +101,33 @@ void test01()\n   // default ctor initializes \n   // - all pointer members to null pointers\n   // - locale to current global locale\n-  test &= buf01.check_pointers();\n-  test &= buf01.getloc() == std::locale();\n+  VERIFY( buf01.check_pointers() );\n+  VERIFY( buf01.getloc() == std::locale() );\n \n   // 27.5.2.3.1 get area\n   // 27.5.2.2.3 get area\n   // 27.5.2.4.3 get area\n   int i01 = 3;\n   buf01.pub_setg(lit01, lit01, (lit01 + i01));\n-  test &= i01 == buf01.in_avail();\n+  VERIFY( i01 == buf01.in_avail() );\n \n-  test &= buf01.pub_uflow() == lit01[0];\n-  test &= buf01.sgetc() == traits_type::to_int_type(lit01[1]);\n-  test &= buf01.pub_uflow() == lit01[1];\n-  test &= buf01.sgetc() == traits_type::to_int_type(lit01[2]);\n-  test &= buf01.pub_uflow() == lit01[2];\n-  test &= buf01.sgetc() == traits_type::eof();\n+  VERIFY( buf01.pub_uflow() == lit01[0] );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[1]) );\n+  VERIFY( buf01.pub_uflow() == lit01[1] );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[2]) );\n+  VERIFY( buf01.pub_uflow() == lit01[2] );\n+  VERIFY( buf01.sgetc() == traits_type::eof() );\n \n   // pbackfail\n   buf01.pub_setg(lit01, lit01, (lit01 + i01));\n-  test &= i01 == buf01.in_avail();\n+  VERIFY( i01 == buf01.in_avail() );\n   int_type intt01 = traits_type::to_int_type('b');\n-  test &= traits_type::eof() == buf01.pub_pbackfail(intt01);\n+  VERIFY( traits_type::eof() == buf01.pub_pbackfail(intt01) );\n \n   // overflow\n-  test &= traits_type::eof() == buf01.pub_overflow(intt01);\n-  test &= traits_type::eof() == buf01.pub_overflow();\n-  test &= buf01.sgetc() == traits_type::to_int_type(lit01[0]);\n+  VERIFY( traits_type::eof() == buf01.pub_overflow(intt01) );\n+  VERIFY( traits_type::eof() == buf01.pub_overflow() );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[0]) );\n \n   // sputn/xsputn\n   char* lit02 = \"isotope 217: the unstable molecule on thrill jockey\";\n@@ -139,16 +137,16 @@ void test01()\n \n   buf01.pub_setp(carray, (carray + i02));\n   buf01.sputn(lit02, 0);\n-  test &= carray[0] == 0;\n-  test &= lit02[0] == 'i';\n+  VERIFY( carray[0] == 0 );\n+  VERIFY( lit02[0] == 'i' );\n   buf01.sputn(lit02, 1);\n-  test &= lit02[0] == carray[0];\n-  test &= lit02[1] == 's';\n-  test &= carray[1] == 0;\n+  VERIFY( lit02[0] == carray[0] );\n+  VERIFY( lit02[1] == 's' );\n+  VERIFY( carray[1] == 0 );\n   buf01.sputn(lit02 + 1, 10);\n-  test &= memcmp(lit02, carray, 10) == 0;\n+  VERIFY( memcmp(lit02, carray, 10) == 0 );\n   buf01.sputn(lit02 + 11, 20);\n-  test &= memcmp(lit02, carray, 30) == 0;\n+  VERIFY( memcmp(lit02, carray, 30) == 0 );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -168,8 +166,8 @@ void test02()\n   // default ctor initializes \n   // - all pointer members to null pointers\n   // - locale to current global locale\n-  test &= buf01.check_pointers();\n-  test &= buf01.getloc() == std::locale();\n+  VERIFY( buf01.check_pointers() );\n+  VERIFY( buf01.getloc() == std::locale() );\n \n   // 27.5.2.2.5 Put area\n   size_t i01 = traits_type::length(lit01);\n@@ -178,13 +176,13 @@ void test02()\n   \n   buf01.pub_setg(lit01, lit01, lit01 + i01);\n   buf01.sgetn(carray01, 0);\n-  test &= carray01[0] == 0;\n+  VERIFY( carray01[0] == 0 );\n   buf01.sgetn(carray01, 1);\n-  test &= carray01[0] == 'c';\n+  VERIFY( carray01[0] == 'c' );\n   buf01.sgetn(carray01 + 1, i01 - 1);\n-  test &= carray01[0] == 'c';\n-  test &= carray01[1] == 'h';\n-  test &= carray01[i01 - 1] == 'k';\n+  VERIFY( carray01[0] == 'c' );\n+  VERIFY( carray01[1] == 'h' );\n+  VERIFY( carray01[i01 - 1] == 'k' );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -227,7 +225,7 @@ void test03()\n   test01 += print('x');\n   test01 += print(\"pipo\");\n \n-  test &= test01 == control01;\n+  VERIFY( test01 == control01 );\n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif"}, {"sha": "556b0c09303d72b3646515967898e81f8fcc7b5c", "filename": "libstdc++-v3/testsuite/27_io/stringbuf.cc", "status": "modified", "additions": 110, "deletions": 112, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -19,9 +19,7 @@\n // USA.\n \n #include <sstream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n std::string str_01(\"mykonos. . . or what?\");\n std::string str_02(\"paris, or sainte-maxime?\");\n@@ -59,20 +57,20 @@ bool test03() {\n   std::string str_tmp;\n \n   //stringbuf::str()\n-  test &= strb_01.str() == str_01;\n-  test &= strb_02.str() == str_02;\n-  test &= strb_03.str() == str_03;\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( strb_02.str() == str_02 );\n+  VERIFY( strb_03.str() == str_03 );\n  \n   //stringbuf::str(string&)\n   strb_03.str(\"none of the above, go to the oberoi in cairo, egypt.\");\n   strb_03.str(str_01);\n   std::streamsize d1 = strb_01.in_avail();\n   std::streamsize d2 = strb_03.in_avail();\n-  test &= d1; // non-zero\n-  test &= !d2; // zero, cuz ios_base::out\n-  test &= d1 != d2; //these should be the same\n-  test &= str_01.length() == d1;  \n-  test &= strb_01.str() == strb_03.str(); //ditto\n+  VERIFY( d1 ); // non-zero\n+  VERIFY( !d2 ); // zero, cuz ios_base::out\n+  VERIFY( d1 != d2 ); //these should be the same\n+  VERIFY( str_01.length() == d1 );  \n+  VERIFY( strb_01.str() == strb_03.str() ); //ditto\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n@@ -98,50 +96,50 @@ bool test04() {\n   // int in_avail()\n   strmof_1 = strb_01.in_avail();\n   strmof_2 = strb_02.in_avail();\n-  test &= strmof_1 != strmof_2;\n-  test &= strmof_1 == str_01.length();\n-  test &= strmof_2 == str_02.length();\n+  VERIFY( strmof_1 != strmof_2 );\n+  VERIFY( strmof_1 == str_01.length() );\n+  VERIFY( strmof_2 == str_02.length() );\n   strmof_1 = strb_03.in_avail(); \n-  test &= strmof_1 == 0; // zero cuz write-only, or eof()? zero, from showmany\n+  VERIFY( strmof_1 == 0 ); // zero cuz write-only, or eof()? zero, from showmany\n \n   // int_type sbumpc()\n   // if read_cur not avail, return uflow(), else return *read_cur & increment\n   int_type c1 = strb_01.sbumpc();\n   int_type c2 = strb_02.sbumpc();\n-  test &= c1 != c2;\n-  test &= c1 == str_01[0];\n-  test &= c2 == str_02[0]; //should equal first letter at this point\n+  VERIFY( c1 != c2 );\n+  VERIFY( c1 == str_01[0] );\n+  VERIFY( c2 == str_02[0] ); //should equal first letter at this point\n   int_type c3 = strb_01.sbumpc();\n   int_type c4 = strb_02.sbumpc();\n-  test &= c1 != c2;\n-  test &= c1 != c3;\n-  test &= c2 != c4;\n+  VERIFY( c1 != c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( c2 != c4 );\n   int_type c5 = strb_03.sbumpc();\n-  test &= c5 == traits_type::eof();\n+  VERIFY( c5 == traits_type::eof() );\n \n   // int_type sgetc()\n   // if read_cur not avail, return uflow(), else return *read_cur  \n   int_type c6 = strb_01.sgetc();\n   int_type c7 = strb_02.sgetc();\n-  test &= c6 != c3;\n-  test &= c7 != c4;\n+  VERIFY( c6 != c3 );\n+  VERIFY( c7 != c4 );\n   int_type c8 = strb_01.sgetc();\n   int_type c9 = strb_02.sgetc();\n-  test &= c6 == c8;\n-  test &= c7 == c9;\n+  VERIFY( c6 == c8 );\n+  VERIFY( c7 == c9 );\n   c5 = strb_03.sgetc();\n-  test &= c5 == traits_type::eof();\n+  VERIFY( c5 == traits_type::eof() );\n \n   // int_type snextc()\n   // calls sbumpc and if sbumpc != eof, return sgetc\n   c6 = strb_01.snextc();\n   c7 = strb_02.snextc();\n-  test &= c6 != c8;\n-  test &= c7 != c9;\n-  test &= c6 == str_01[3];\n-  test &= c7 == str_02[3]; //should equal fourth letter at this point\n+  VERIFY( c6 != c8 );\n+  VERIFY( c7 != c9 );\n+  VERIFY( c6 == str_01[3] );\n+  VERIFY( c7 == str_02[3] ); //should equal fourth letter at this point\n   c5 = strb_03.snextc();\n-  test &= c5 == traits_type::eof();\n+  VERIFY( c5 == traits_type::eof() );\n \n   // int showmanyc\n   // streamsize sgetn(char_type *s, streamsize n)\n@@ -151,27 +149,27 @@ bool test04() {\n   strmsz_1 = strb_01.in_avail();\n   strmsz_2 = strb_02.in_avail();\n   test = strmsz_1 != strmsz_2;\n-  test &= strmsz_1 != str_01.length();\n-  test &= strmsz_2 != str_02.length(); //because now we've moved into string\n+  VERIFY( strmsz_1 != str_01.length() );\n+  VERIFY( strmsz_2 != str_02.length() ); //because now we've moved into string\n   char carray1[11] = \"\";\n   strmsz_1 = strb_01.sgetn(carray1, 10);\n   char carray2[20] = \"\";\n   strmsz_2 = strb_02.sgetn(carray2, 10);\n-  test &= strmsz_1 == strmsz_2;\n-  test &= strmsz_1 == 10;\n+  VERIFY( strmsz_1 == strmsz_2 );\n+  VERIFY( strmsz_1 == 10 );\n   c1 = strb_01.sgetc();\n   c2 = strb_02.sgetc();\n-  test &= c6 == c1; //just by co-incidence both o's\n-  test &= c7 != c2; // n != i\n-  test &= c1 == str_01[13];\n-  test &= c2 == str_02[13]; //should equal fourteenth letter at this point\n+  VERIFY( c6 == c1 ); //just by co-incidence both o's\n+  VERIFY( c7 != c2 ); // n != i\n+  VERIFY( c1 == str_01[13] );\n+  VERIFY( c2 == str_02[13] ); //should equal fourteenth letter at this point\n   strmsz_1 = strb_03.sgetn(carray1, 10);\n-  test &= !strmsz_1; //zero\n+  VERIFY( !strmsz_1 ); //zero\n   strmsz_1 = strb_02.in_avail();\n   strmsz_2 = strb_02.sgetn(carray2, strmsz_1 + 5);\n-  test &= strmsz_1 == strmsz_2; //write off the end\n+  VERIFY( strmsz_1 == strmsz_2 ); //write off the end\n   c4 = strb_02.sgetc(); // should be EOF\n-  test &= c4 == traits_type::eof();\n+  VERIFY( c4 == traits_type::eof() );\n \n   // PUT\n   // int_type sputc(char_type c)\n@@ -181,12 +179,12 @@ bool test04() {\n   std::string::size_type sz1 = strb_03.str().length();\n   c1 = strb_03.sputc('a'); \n   std::string::size_type sz2 = strb_03.str().length();\n-  test &= sz1 == sz2; //cuz inserting at out_cur, which is at beg to start\n+  VERIFY( sz1 == sz2 ); //cuz inserting at out_cur, which is at beg to start\n   c2 = strb_03.sputc('b'); \n-  test &= c1 != c2;\n-  test &= strb_03.str() != str_01;\n+  VERIFY( c1 != c2 );\n+  VERIFY( strb_03.str() != str_01 );\n   c3 = strb_02.sputc('a'); // should be EOF because this is read-only\n-  test &= c3 == traits_type::eof();\n+  VERIFY( c3 == traits_type::eof() );\n   \n   // streamsize sputn(const char_typs* s, streamsize n)\n   // write up to n chars to out_cur from s, returning number assigned\n@@ -195,20 +193,20 @@ bool test04() {\n   sz1 = str_tmp.length();\n   strmsz_1 = strb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n   sz2 = strb_03.str().length();\n-  test &= sz1 == sz2; //shouldn't have changed length\n-  test &= strmsz_1 == 10;\n-  test &= str_tmp != strb_03.str();\n+  VERIFY( sz1 == sz2 ); //shouldn't have changed length\n+  VERIFY( strmsz_1 == 10 );\n+  VERIFY( str_tmp != strb_03.str() );\n   strmsz_2 = strb_03.sputn(\", i wanna reach out and\", 10);\n-  test &= strmsz_1 == strmsz_2; // should re-allocate, copy 10 chars.\n-  test &= strmsz_1 == 10;\n-  test &= strmsz_2 == 10;\n+  VERIFY( strmsz_1 == strmsz_2 ); // should re-allocate, copy 10 chars.\n+  VERIFY( strmsz_1 == 10 );\n+  VERIFY( strmsz_2 == 10 );\n   sz2 = strb_03.str().length();\n-  test &= sz1 != sz2; // need to change length\n-  test &= str_tmp != strb_03.str();\n+  VERIFY( sz1 != sz2 ); // need to change length\n+  VERIFY( str_tmp != strb_03.str() );\n   str_tmp = strb_02.str();\n   strmsz_1 = strb_02.sputn(\"racadabra\", 10);\n-  test &= strmsz_1 == 0;  \n-  test &= str_tmp == strb_02.str();\n+  VERIFY( strmsz_1 == 0 );  \n+  VERIFY( str_tmp == strb_02.str() );\n \n   // PUTBACK\n   // int_type pbfail(int_type c)\n@@ -230,22 +228,22 @@ bool test04() {\n   c1 = strb_01.sgetc(); //\"mykonos. . . 'o'r what?\"\n   c2 = strb_01.sputbackc('z');//\"mykonos. . .zor what?\"\n   c3 = strb_01.sgetc();\n-  test &= c1 != c2;\n-  test &= c3 == c2;\n-  test &= strb_01.str() == std::string(\"mykonos. . .zor what?\");\n-  test &= str_tmp.size() == strb_01.str().size();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( strb_01.str() == std::string(\"mykonos. . .zor what?\") );\n+  VERIFY( str_tmp.size() == strb_01.str().size() );\n   //test for _in_cur == _in_beg\n   strb_01.str(str_tmp);\n   strmsz_1 = strb_01.in_avail();\n   c1 = strb_01.sgetc(); //\"'m'ykonos. . . or what?\"\n   c2 = strb_01.sputbackc('z');//\"mykonos. . . or what?\"\n   c3 = strb_01.sgetc();\n-  test &= c1 != c2;\n-  test &= c3 != c2;\n-  test &= c1 == c3;\n-  test &= c2 == traits_type::eof();\n-  test &= strb_01.str() == str_tmp;\n-  test &= str_tmp.size() == strb_01.str().size();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 != c2 );\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == traits_type::eof() );\n+  VERIFY( strb_01.str() == str_tmp );\n+  VERIFY( str_tmp.size() == strb_01.str().size() );\n   // test for replacing char with identical one\n   strb_01.str(str_01); //reset\n   strmsz_1 = strb_01.in_avail();\n@@ -254,15 +252,15 @@ bool test04() {\n   c1 = strb_01.sgetc(); //\"my'k'onos. . . or what?\"\n   c2 = strb_01.sputbackc('y');//\"mykonos. . . or what?\"\n   c3 = strb_01.sgetc();\n-  test &= c1 != c2;\n-  test &= c3 == c2;\n-  test &= c1 != c3;\n-  test &= strb_01.str() == str_01;\n-  test &= str_01.size() == strb_01.str().size();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n   //test for ios_base::out\n   strmsz_2 = strb_03.in_avail();\n   c4 = strb_03.sputbackc('x');\n-  test &= c4 == traits_type::eof();\n+  VERIFY( c4 == traits_type::eof() );\n \n   // int_type sungetc()\n   // if in_cur not avail, return pbackfail(), else decrement and\n@@ -274,24 +272,24 @@ bool test04() {\n   c1 = strb_01.sgetc(); //\"mykonos. . . 'o'r what?\"\n   c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n   c3 = strb_01.sgetc();\n-  test &= c1 != c2;\n-  test &= c3 == c2;\n-  test &= c1 != c3;\n-  test &= c2 == ' ';\n-  test &= strb_01.str() == str_01;\n-  test &= str_01.size() == strb_01.str().size();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( c2 == ' ' );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n   //test for _in_cur == _in_beg\n   strb_01.str(str_tmp);\n   strmsz_1 = strb_01.in_avail();\n   c1 = strb_01.sgetc(); //\"'m'ykonos. . . or what?\"\n   c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n   c3 = strb_01.sgetc();\n-  test &= c1 != c2;\n-  test &= c3 != c2;\n-  test &= c1 == c3;\n-  test &= c2 == traits_type::eof();\n-  test &= strb_01.str() == str_01;\n-  test &= str_01.size() == strb_01.str().size();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 != c2 );\n+  VERIFY( c1 == c3 );\n+  VERIFY( c2 == traits_type::eof() );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n   // test for replacing char with identical one\n   strb_01.str(str_01); //reset\n   strmsz_1 = strb_01.in_avail();\n@@ -300,15 +298,15 @@ bool test04() {\n   c1 = strb_01.sgetc(); //\"my'k'onos. . . or what?\"\n   c2 = strb_01.sungetc();//\"mykonos. . . or what?\"\n   c3 = strb_01.sgetc();\n-  test &= c1 != c2;\n-  test &= c3 == c2;\n-  test &= c1 != c3;\n-  test &= strb_01.str() == str_01;\n-  test &= str_01.size() == strb_01.str().size();\n+  VERIFY( c1 != c2 );\n+  VERIFY( c3 == c2 );\n+  VERIFY( c1 != c3 );\n+  VERIFY( strb_01.str() == str_01 );\n+  VERIFY( str_01.size() == strb_01.str().size() );\n   //test for ios_base::out\n   strmsz_2 = strb_03.in_avail();\n   c4 = strb_03.sungetc();\n-  test &= c4 == traits_type::eof();\n+  VERIFY( c4 == traits_type::eof() );\n \n   // BUFFER MANAGEMENT & POSITIONING\n   // sync\n@@ -321,9 +319,9 @@ bool test04() {\n   // pubsetbuf(char_type* s, streamsize n)\n   str_tmp = std::string(\"naaaah, go to cebu\");\n   strb_01.pubsetbuf(const_cast<char*> (str_tmp.c_str()), str_tmp.size());\n-  test &= strb_01.str() == str_tmp;\n+  VERIFY( strb_01.str() == str_tmp );\n   strb_01.pubsetbuf(0,0);\n-  test &= strb_01.str() == str_tmp;\n+  VERIFY( strb_01.str() == str_tmp );\n \n   // seekoff\n   // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n@@ -339,48 +337,48 @@ bool test04() {\n   //beg\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n   off_1 = pt_1;\n-  test &= off_1 >= 0;\n+  VERIFY( off_1 >= 0 );\n   c1 = strb_01.snextc(); //current in pointer +1\n-  test &= c1 == 'o';\n+  VERIFY( c1 == 'o' );\n   c2 = strb_01.sputc('x');  //test current out pointer\n   str_tmp = std::string(\"myxonos. . . or what?\");\n-  test &= strb_01.str() == str_tmp;\n+  VERIFY( strb_01.str() == str_tmp );\n   //cur\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::cur);\n   off_1 = pt_1;\n-  test &= off_1 == -1; // can't seekoff for in and out + cur in sstreams\n+  VERIFY( off_1 == -1 ); // can't seekoff for in and out + cur in sstreams\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n   off_1 = pt_1;\n   pt_2 = strb_01.pubseekoff(2, std::ios_base::cur, std::ios_base::in);\n   off_2 = pt_2;\n-  test &= off_2 == off_1 + 2;\n+  VERIFY( off_2 == off_1 + 2 );\n   c1 = strb_01.snextc(); //current in pointer + 1\n-  test &= c1 == ' ';\n+  VERIFY( c1 == ' ' );\n   c2 = strb_01.sputc('x');  //test current out pointer\n   str_tmp = std::string(\"myxxnos. . . or what?\");\n-  test &= strb_01.str() == str_tmp;\n+  VERIFY( strb_01.str() == str_tmp );\n   //end\n   pt_2 = strb_01.pubseekoff(2, std::ios_base::end);\n   off_1 = pt_2;\n-  test &= off_1 == -1; // not a valid position\n-  test &= strb_01.str() == str_tmp;\n+  VERIFY( off_1 == -1 ); // not a valid position\n+  VERIFY( strb_01.str() == str_tmp );\n   // end part two (from the filebuf tests)\n   strb_01.pubseekoff(0, std::ios_base::end);\n   strmsz_1 = strb_01.in_avail(); // 0 cuz at the end\n   c1 = strb_01.sgetc(); \n   c2 = strb_01.sungetc();\n   strmsz_2 = strb_01.in_avail(); // 1\n   c3 = strb_01.sgetc();\n-  test &= c1 != c2;\n-  test &= strmsz_2 != strmsz_1;\n-  test &= strmsz_2 == 1;\n+  VERIFY( c1 != c2 );\n+  VERIFY( strmsz_2 != strmsz_1 );\n+  VERIFY( strmsz_2 == 1 );\n   // end part three\n   strmsz_1 = strb_01.str().size();\n   strmsz_2 = strb_01.sputn(\" ravi shankar meets carlos santana in LoHa\", 90);\n   strb_01.pubseekoff(0, std::ios_base::end);\n   strb_01.sputc('<');\n   str_tmp = strb_01.str();\n-  test &= str_tmp.size() == strmsz_1 + strmsz_2 + 1;\n+  VERIFY( str_tmp.size() == strmsz_1 + strmsz_2 + 1 );\n   // IN\n   // OUT\n \n@@ -394,23 +392,23 @@ bool test04() {\n   //beg\n   pt_1 = strb_01.pubseekoff(2, std::ios_base::beg);\n   off_1 = pt_1;\n-  test &= off_1 >= 0;\n+  VERIFY( off_1 >= 0 );\n   pt_1 = strb_01.pubseekoff(0, std::ios_base::cur, std::ios_base::out);\n   off_1 = pt_1;\n   c1 = strb_01.snextc(); //current in pointer +1\n-  test &= c1 == 'o';\n+  VERIFY( c1 == 'o' );\n   c2 = strb_01.sputc('x');  //test current out pointer\n   str_tmp = std::string(\"myxonos. . . or what?\");\n-  test &= strb_01.str() == str_tmp;\n+  VERIFY( strb_01.str() == str_tmp );\n   strb_01.pubsync(); //resets pointers\n   pt_2 = strb_01.pubseekpos(pt_1, std::ios_base::in|std::ios_base::out);\n   off_2 = pt_2;\n-  test &= off_1 == off_2;\n+  VERIFY( off_1 == off_2 );\n   c3 = strb_01.snextc(); //current in pointer +1\n-  test &= c1 == c3;\n+  VERIFY( c1 == c3 );\n   c2 = strb_01.sputc('x');  //test current out pointer\n   str_tmp = std::string(\"myxonos. . . or what?\");\n-  test &= strb_01.str() == str_tmp;\n+  VERIFY( strb_01.str() == str_tmp );\n \n   // VIRTUALS (indirectly tested)\n   // underflow"}, {"sha": "361e087edd935a5013d764bed7cf6609a92393fe", "filename": "libstdc++-v3/testsuite/27_io/stringstream.cc", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringstream.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -32,12 +32,11 @@\n #include <vector>\n #include <string>\n #include <sstream>\n-#ifdef DEBUG_ASSERT\n-#include <assert.h>\n-#endif\n+#include <debug_assert.h>\n \n // 01: sanity checks for strings, stringbufs\n-std::string test01()\n+std::string \n+test01()\n {\n   bool test = false;\n \n@@ -47,33 +46,34 @@ std::string test01()\n   std::string::iterator __i_end = str01.end();\n   std::string::size_type len = str01.size();\n   test = __i_start == __i_end;\n-  test &= len == 0;\n+  VERIFY( len == 0 );\n \n   // Full string sanity check.\n   std::string str02(\"these golden days, i spend waiting for you:\\n \n               Betty Carter on Verve with I'm Yours and You're Mine.\");\n   __i_start = str02.begin();\n   __i_end = str02.end();\n   len = str02.size();\n-  test &= __i_start != __i_end;\n-  test &= len != 0;\n+  VERIFY( __i_start != __i_end );\n+  VERIFY( len != 0 );\n  \n   // Test an empty ostring stream for sanity.\n   std::ostringstream ostrstream0;\n   std::string str03 = ostrstream0.str();\n   __i_start = str03.begin();\n   __i_end = str03.end();\n   len = str03.size();\n-  test &= __i_start == __i_end;\n-  test &= len == 0;\n-  test &= str01 == str03;\n+  VERIFY( __i_start == __i_end );\n+  VERIFY( len == 0 );\n+  VERIFY( str01 == str03 );\n \n   return str02;\n }\n \n \n-bool test02(void) {\n-\n+int\n+test02()\n+{\n   bool test = true;\n \n   //\n@@ -96,8 +96,8 @@ bool test02(void) {\n \n   std::string msg01 = ostrst01.str();\n   std::string msg02 = ostrst02.str();\n-  test &= msg01 != msg02;\n-  test &= msg02 != blank;\n+  VERIFY( msg01 != msg02 );\n+  VERIFY( msg02 != blank );\n \n   //\n   // 2: istringstream\n@@ -113,10 +113,10 @@ bool test02(void) {\n   istrst01 >> i2 >> pi2 >> d2 >> pd2;\n   //istrst01 >> i2;\n   //istrst01 >> pi2;\n-  test &= i2 == i;\n-  test &= d2 == d;\n-  test &= pd2 == pd;\n-  test &= pi2 == pi;\n+  VERIFY( i2 == i );\n+  VERIFY( d2 == d );\n+  VERIFY( pd2 == pd );\n+  VERIFY( pi2 == pi );\n #endif\n \n   // stringstream\n@@ -125,7 +125,7 @@ bool test02(void) {\n   std::stringstream ss1(str1, std::ios_base::in|std::ios_base::out);\n   std::stringstream ss2(str3, std::ios_base::in|std::ios_base::out);\n \n-  return test;\n+  return 0;\n }\n \n // user-reported error\n@@ -135,25 +135,29 @@ class derived_oss: public std::ostringstream\n   derived_oss() : std::ostringstream() {}\n };\n \n-bool test03()\n+int\n+test03()\n {\n   bool test = true;\n   derived_oss yy;\n   yy << \"buena vista social club\\n\";\n-  test &= yy.str() == std::string(\"buena vista social club\\n\");\n+  VERIFY( yy.str() == std::string(\"buena vista social club\\n\") );\n \n #ifdef DEBUG_ASSERT\n   assert(test);\n #endif\n \n-  return test;\n+  return 0;\n }\n \n-int main() \n+int \n+main() \n {\n   test01();\n   test02();\n   test03();\n+  \n+  return 0;\n }\n \n "}, {"sha": "91cb21be7652c05bc68a511bc6925dbfcdd5d477", "filename": "libstdc++-v3/testsuite/27_io/wide_stream_objects.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fwide_stream_objects.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fwide_stream_objects.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fwide_stream_objects.cc?ref=aa1b2f7d9546b36301c03c9158d22a3b6eca8cd5", "patch": "@@ -71,13 +71,15 @@\n   #include <cwchar>\n   #include <cwctype>\n #endif\n+#include <debug_assert.h>\n \n // Include iostream last, just to make is as difficult as possible to\n // properly initialize the standard iostream objects.\n #include <iostream>\n \n // Make sure all the standard streams are defined.\n-bool test01()\n+int\n+test01()\n {\n   bool test = true;\n \n@@ -88,18 +90,20 @@ bool test01()\n   wtraits_type::copy(array2, L\"testing istream\", wi);\n   std::wcout << L\"testing wcout\" << std::endl;\n   std::wcerr << L\"testing wcerr\" << std::endl;\n-  test &= std::wcerr.flags() & std::ios_base::unitbuf;\n+  VERIFY( std::wcerr.flags() & std::ios_base::unitbuf );\n   std::wclog << L\"testing wclog\" << std::endl;\n   // std::wcin >> array2; // requires somebody to type something in.\n-  test &= std::wcin.tie() == &std::wcout;\n+  VERIFY( std::wcin.tie() == &std::wcout );\n #endif\n \n-  return test;\n+  return 0;\n }\n \n \n-int main(void)\n+int \n+main()\n {\n   test01();\n+  \n   return 0;\n }"}]}