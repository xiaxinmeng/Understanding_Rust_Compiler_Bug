{"sha": "ef1e3836710e20fb399a72bda0bde0ba7a616078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxZTM4MzY3MTBlMjBmYjM5OWE3MmJkYTBiZGUwYmE3YTYxNjA3OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-10-22T19:04:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-10-22T19:04:36Z"}, "message": "re PR target/52451 (gcc w/i387 float generates fucom rather than fcom for floating point comparsons)\n\n\tPR target/52451\n\t* config/i386/i386.c (ix86_fp_compare_mode): Return CCFPmode\n\tfor ordered inequality comparisons even with TARGET_IEEE_FP.\n\ntestsuite/ChangeLog:\n\n\tPR target/52451\n\t* gcc.dg/torture/pr52451.c: New test.\n\nFrom-SVN: r253986", "tree": {"sha": "ff83c9821390142425f94e78aafccdfa4adb10a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff83c9821390142425f94e78aafccdfa4adb10a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef1e3836710e20fb399a72bda0bde0ba7a616078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1e3836710e20fb399a72bda0bde0ba7a616078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1e3836710e20fb399a72bda0bde0ba7a616078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1e3836710e20fb399a72bda0bde0ba7a616078/comments", "author": null, "committer": null, "parents": [{"sha": "8cc857f9490dd71c311b529c4284f54a597e97bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc857f9490dd71c311b529c4284f54a597e97bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc857f9490dd71c311b529c4284f54a597e97bd"}], "stats": {"total": 113, "additions": 103, "deletions": 10}, "files": [{"sha": "78cd3cea3617815be52a15e79959300532afe495", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e3836710e20fb399a72bda0bde0ba7a616078/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e3836710e20fb399a72bda0bde0ba7a616078/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef1e3836710e20fb399a72bda0bde0ba7a616078", "patch": "@@ -1,3 +1,16 @@\n+2017-10-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/52451\n+\t* config/i386/i386.c (ix86_fp_compare_mode): Return CCFPmode\n+\tfor ordered inequality comparisons even with TARGET_IEEE_FP.\n+\n+2017-10-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/82628\n+\t* config/i386/i386.md (cmp<dwi>_doubleword): New pattern.\n+\t* config/i386/i386.c (ix86_expand_branch) <case E_TImode>:\n+\tExpand with cmp<dwi>_doubleword.\n+\n 2017-10-21  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \t* extend.texi: Add x86 specific to 'nocf_check' attribute."}, {"sha": "ff0f6f89f9134640fd98dc50299101cbcff5b1aa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e3836710e20fb399a72bda0bde0ba7a616078/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e3836710e20fb399a72bda0bde0ba7a616078/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ef1e3836710e20fb399a72bda0bde0ba7a616078", "patch": "@@ -21682,14 +21682,35 @@ ix86_expand_int_compare (enum rtx_code code, rtx op0, rtx op1)\n    Return the appropriate mode to use.  */\n \n machine_mode\n-ix86_fp_compare_mode (enum rtx_code)\n-{\n-  /* ??? In order to make all comparisons reversible, we do all comparisons\n-     non-trapping when compiling for IEEE.  Once gcc is able to distinguish\n-     all forms trapping and nontrapping comparisons, we can make inequality\n-     comparisons trapping again, since it results in better code when using\n-     FCOM based compares.  */\n-  return TARGET_IEEE_FP ? CCFPUmode : CCFPmode;\n+ix86_fp_compare_mode (enum rtx_code code)\n+{\n+  if (!TARGET_IEEE_FP)\n+    return CCFPmode;\n+\n+  switch (code)\n+    {\n+    case GT:\n+    case GE:\n+    case LT:\n+    case LE:\n+      return CCFPmode;\n+\n+    case EQ:\n+    case NE:\n+\n+    case LTGT:\n+    case UNORDERED:\n+    case ORDERED:\n+    case UNLT:\n+    case UNLE:\n+    case UNGT:\n+    case UNGE:\n+    case UNEQ:\n+      return CCFPUmode;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n \n machine_mode"}, {"sha": "f14930b6e110511bd72228edf497cc7c87e27bdc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e3836710e20fb399a72bda0bde0ba7a616078/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e3836710e20fb399a72bda0bde0ba7a616078/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef1e3836710e20fb399a72bda0bde0ba7a616078", "patch": "@@ -1,3 +1,8 @@\n+2017-10-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/52451\n+\t* gcc.dg/torture/pr52451.c: New test.\n+\n 2017-10-22  Uros Bizjak  <ubizjak@gmail.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n \n@@ -53,8 +58,7 @@\n \t* gcc.target/i386/cet-sjlj-3.c: Likewise.\n \t* gcc.target/i386/cet-switch-1.c: Likewise.\n \t* gcc.target/i386/cet-switch-2.c: Likewise.\n-\t* lib/target-supports.exp (check_effective_target_cet): New\n-\tproc.\n+\t* lib/target-supports.exp (check_effective_target_cet): New proc.\n \n 2017-10-20  Jan Hubicka  <hubicka@ucw.cz>\n "}, {"sha": "81a3d4d158dcf2362b90d4af060dfb48b86165f2", "filename": "gcc/testsuite/gcc.dg/torture/pr52451.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1e3836710e20fb399a72bda0bde0ba7a616078/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52451.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1e3836710e20fb399a72bda0bde0ba7a616078/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52451.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52451.c?ref=ef1e3836710e20fb399a72bda0bde0ba7a616078", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-add-options ieee } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <fenv.h>\n+\n+#define TEST_C_NOEX(CMP, S)\t\t\t\\\n+  r = nan##S CMP arg##S;\t\t\t\\\n+  if (fetestexcept (FE_INVALID))\t\t\\\n+    __builtin_abort ()\n+\n+#define TEST_B_NOEX(FN, S)\t\t\t\\\n+  r = __builtin_##FN (nan##S, arg##S);\t\t\\\n+  if (fetestexcept (FE_INVALID))\t\t\\\n+    __builtin_abort ()\n+\n+#define TEST_C_EX(CMP, S)\t\t\t\\\n+  r = nan##S CMP arg##S;\t\t\t\\\n+  if (!fetestexcept (FE_INVALID))\t\t\\\n+    __builtin_abort ();\t\t\t\t\\\n+  feclearexcept (FE_INVALID)\n+\n+#define TEST(TYPE, S)\t\t\t\t\\\n+  volatile TYPE nan##S = __builtin_nan##S (\"\");\t\\\n+  volatile TYPE arg##S = 1.0##S;\t\t\\\n+\t\t\t\t\t\t\\\n+  TEST_C_NOEX (==, S);\t\t\t\t\\\n+  TEST_C_NOEX (!=, S);\t\t\t\t\\\n+\t\t\t\t\t\t\\\n+  TEST_B_NOEX (isgreater, S);\t\t\t\\\n+  TEST_B_NOEX (isless, S);\t\t\t\\\n+  TEST_B_NOEX (isgreaterequal, S);\t\t\\\n+  TEST_B_NOEX (islessequal, S);\t\t\t\\\n+\t\t\t\t\t\t\\\n+  TEST_B_NOEX (islessgreater, S);\t\t\\\n+  TEST_B_NOEX (isunordered, S);\t\t\t\\\n+\t\t\t\t\t\t\\\n+  TEST_C_EX (>, S);\t\t\t\t\\\n+  TEST_C_EX (<, S);\t\t\t\t\\\n+  TEST_C_EX (>=, S);\t\t\t\t\\\n+  TEST_C_EX (<=, S)\n+\n+int\n+main (void)\n+{\n+  volatile int r;\n+\n+  feclearexcept (FE_INVALID);\n+\n+  TEST (float, f);\n+  TEST (double, );\n+  TEST (long double, l);\n+  \n+  return 0;\n+}"}]}