{"sha": "7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EyYzhlMjhiZGI4NGQzNTI3NWZmZGQ5ZTk1ZjU2MGM5OTNjMDZiMA==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2017-01-06T17:28:47Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2017-01-06T17:28:47Z"}, "message": "[ARM] Move CRC builtins to refactored framework\n\ngcc/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm-builtins.c (arm_unsigned_binop_qualifiers): New.\n\t(UBINOP_QUALIFIERS): New.\n\t(si_UP): Define.\n\t(acle_builtin_data): New. Change comment.\n\t(arm_builtins): Remove ARM_BUILTIN_CRC32B, ARM_BUILTIN_CRC32H,\n\tARM_BUILTIN_CRC32W, ARM_BUILTIN_CRC32CB, ARM_BUILTIN_CRC32CH,\n\tARM_BUILTIN_CRC32CW. Add ARM_BUILTIN_ACLE_BASE and include\n\tarm_acle_builtins.def.\n\t(ARM_BUILTIN_ACLE_PATTERN_START): Define.\n\t(arm_init_acle_builtins): New.\n\t(CRC32_BUILTIN): Remove.\n\t(bdesc_2arg): Remove entries for crc32b, crc32h, crc32w,\n\tcrc32cb, crc32ch and crc32cw.\n\t(arm_init_crc32_builtins): Remove.\n\t(arm_init_builtins): Use arm_init_acle_builtins rather\n\tthan arm_init_crc32_builtins.\n\t(arm_expand_acle_builtin): New.\n\t(arm_expand_builtin): Use 'arm_expand_acle_builtin'.\n\t* config/arm/arm_acle_builtins.def: New.\n\nFrom-SVN: r244171", "tree": {"sha": "284e53d4cd73a6e999d63ea3734c354edd6a54dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/284e53d4cd73a6e999d63ea3734c354edd6a54dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "131e1faa2228126845c1e76fcf3fd850f1b05ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131e1faa2228126845c1e76fcf3fd850f1b05ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131e1faa2228126845c1e76fcf3fd850f1b05ffa"}], "stats": {"total": 201, "additions": 132, "deletions": 69}, "files": [{"sha": "d560d4b77662dc2a12c76ac5d71bf51b3cf3fa84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "patch": "@@ -1,3 +1,25 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm-builtins.c (arm_unsigned_binop_qualifiers): New.\n+\t(UBINOP_QUALIFIERS): New.\n+\t(si_UP): Define.\n+\t(acle_builtin_data): New. Change comment.\n+\t(arm_builtins): Remove ARM_BUILTIN_CRC32B, ARM_BUILTIN_CRC32H,\n+\tARM_BUILTIN_CRC32W, ARM_BUILTIN_CRC32CB, ARM_BUILTIN_CRC32CH,\n+\tARM_BUILTIN_CRC32CW. Add ARM_BUILTIN_ACLE_BASE and include\n+\tarm_acle_builtins.def.\n+\t(ARM_BUILTIN_ACLE_PATTERN_START): Define.\n+\t(arm_init_acle_builtins): New.\n+\t(CRC32_BUILTIN): Remove.\n+\t(bdesc_2arg): Remove entries for crc32b, crc32h, crc32w,\n+\tcrc32cb, crc32ch and crc32cw.\n+\t(arm_init_crc32_builtins): Remove.\n+\t(arm_init_builtins): Use arm_init_acle_builtins rather\n+\tthan arm_init_crc32_builtins.\n+\t(arm_expand_acle_builtin): New.\n+\t(arm_expand_builtin): Use 'arm_expand_acle_builtin'.\n+\t* config/arm/arm_acle_builtins.def: New.\n+\n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm-builtins.c (neon_builtin_datum): Rename to .."}, {"sha": "febbec9fca079ac03b93edec970ebc537e25309b", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 84, "deletions": 69, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "patch": "@@ -158,6 +158,13 @@ arm_load1_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n       qualifier_none, qualifier_struct_load_store_lane_index };\n #define LOAD1LANE_QUALIFIERS (arm_load1_lane_qualifiers)\n \n+/* unsigned T (unsigned T, unsigned T, unsigned T).  */\n+static enum arm_type_qualifiers\n+arm_unsigned_binop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_unsigned,\n+      qualifier_unsigned };\n+#define UBINOP_QUALIFIERS (arm_unsigned_binop_qualifiers)\n+\n /* The first argument (return type) of a store should be void type,\n    which we represent with qualifier_void.  Their first operand will be\n    a DImode pointer to the location to store to, so we must use\n@@ -243,17 +250,16 @@ typedef struct {\n   VAR11 (T, N, A, B, C, D, E, F, G, H, I, J, K) \\\n   VAR1 (T, N, L)\n \n-/* The builtin data can be found in arm_neon_builtins.def,\n-   arm_vfp_builtins.def.  The entries in arm_neon_builtins.def require\n-   TARGET_NEON to be true.  The feature tests are checked when the\n-   builtins are expanded.\n+/* The builtin data can be found in arm_neon_builtins.def, arm_vfp_builtins.def\n+   and arm_acle_builtins.def.  The entries in arm_neon_builtins.def require\n+   TARGET_NEON to be true.  The feature tests are checked when the builtins are\n+   expanded.\n \n-   The mode entries in the following table correspond to the \"key\"\n-   type of the instruction variant, i.e. equivalent to that which\n-   would be specified after the assembler mnemonic, which usually\n-   refers to the last vector operand.  The modes listed per\n-   instruction should be the same as those defined for that\n-   instruction's pattern, for instance in neon.md.  */\n+   The mode entries in the following table correspond to the \"key\" type of the\n+   instruction variant, i.e. equivalent to that which would be specified after\n+   the assembler mnemonic for neon instructions, which usually refers to the\n+   last vector operand.  The modes listed per instruction should be the same as\n+   those defined for that instruction's pattern, for instance in neon.md.  */\n \n static arm_builtin_datum vfp_builtin_data[] =\n {\n@@ -266,6 +272,15 @@ static arm_builtin_datum neon_builtin_data[] =\n };\n \n #undef CF\n+#undef VAR1\n+#define VAR1(T, N, A) \\\n+  {#N, UP (A), CODE_FOR_##N, 0, T##_QUALIFIERS},\n+\n+static arm_builtin_datum acle_builtin_data[] =\n+{\n+#include \"arm_acle_builtins.def\"\n+};\n+\n #undef VAR1\n \n #define VAR1(T, N, X) \\\n@@ -519,13 +534,6 @@ enum arm_builtins\n \n   ARM_BUILTIN_WMERGE,\n \n-  ARM_BUILTIN_CRC32B,\n-  ARM_BUILTIN_CRC32H,\n-  ARM_BUILTIN_CRC32W,\n-  ARM_BUILTIN_CRC32CB,\n-  ARM_BUILTIN_CRC32CH,\n-  ARM_BUILTIN_CRC32CW,\n-\n   ARM_BUILTIN_GET_FPSCR,\n   ARM_BUILTIN_SET_FPSCR,\n \n@@ -559,6 +567,14 @@ enum arm_builtins\n \n #include \"arm_neon_builtins.def\"\n \n+#undef VAR1\n+#define VAR1(T, N, X) \\\n+  ARM_BUILTIN_##N,\n+\n+  ARM_BUILTIN_ACLE_BASE,\n+\n+#include \"arm_acle_builtins.def\"\n+\n   ARM_BUILTIN_MAX\n };\n \n@@ -568,6 +584,9 @@ enum arm_builtins\n #define ARM_BUILTIN_NEON_PATTERN_START \\\n   (ARM_BUILTIN_NEON_BASE + 1)\n \n+#define ARM_BUILTIN_ACLE_PATTERN_START \\\n+  (ARM_BUILTIN_ACLE_BASE + 1)\n+\n #undef CF\n #undef VAR1\n #undef VAR2\n@@ -1016,7 +1035,7 @@ arm_init_builtin (unsigned int fcode, arm_builtin_datum *d,\n   gcc_assert (ftype != NULL);\n \n   if (print_type_signature_p\n-      && IN_RANGE (fcode, ARM_BUILTIN_VFP_BASE, ARM_BUILTIN_MAX - 1))\n+      && IN_RANGE (fcode, ARM_BUILTIN_VFP_BASE, ARM_BUILTIN_ACLE_BASE - 1))\n     snprintf (namebuf, sizeof (namebuf), \"%s_%s_%s\",\n \t      prefix, d->name, type_signature);\n   else\n@@ -1028,6 +1047,23 @@ arm_init_builtin (unsigned int fcode, arm_builtin_datum *d,\n   arm_builtin_decls[fcode] = fndecl;\n }\n \n+/* Set up ACLE builtins, even builtins for instructions that are not\n+   in the current target ISA to allow the user to compile particular modules\n+   with different target specific options that differ from the command line\n+   options.  Such builtins will be rejected in arm_expand_builtin.  */\n+\n+static void\n+arm_init_acle_builtins (void)\n+{\n+  unsigned int i, fcode = ARM_BUILTIN_ACLE_PATTERN_START;\n+\n+  for (i = 0; i < ARRAY_SIZE (acle_builtin_data); i++, fcode++)\n+    {\n+      arm_builtin_datum *d = &acle_builtin_data[i];\n+      arm_init_builtin (fcode, d, \"__builtin_arm\");\n+    }\n+}\n+\n /* Set up all the NEON builtins, even builtins for instructions that are not\n    in the current target ISA to allow the user to compile particular modules\n    with different target specific options that differ from the command line\n@@ -1303,18 +1339,6 @@ static const struct builtin_description bdesc_2arg[] =\n   FP_BUILTIN (set_fpscr, SET_FPSCR)\n #undef FP_BUILTIN\n \n-#define CRC32_BUILTIN(L, U) \\\n-  {isa_nobit, CODE_FOR_##L, \"__builtin_arm_\"#L, \\\n-   ARM_BUILTIN_##U, UNKNOWN, 0},\n-   CRC32_BUILTIN (crc32b, CRC32B)\n-   CRC32_BUILTIN (crc32h, CRC32H)\n-   CRC32_BUILTIN (crc32w, CRC32W)\n-   CRC32_BUILTIN (crc32cb, CRC32CB)\n-   CRC32_BUILTIN (crc32ch, CRC32CH)\n-   CRC32_BUILTIN (crc32cw, CRC32CW)\n-#undef CRC32_BUILTIN\n-\n-\n #define CRYPTO_BUILTIN(L, U)\t\t\t\t\t   \\\n   {isa_nobit, CODE_FOR_crypto_##L,\t\"__builtin_arm_crypto_\"#L, \\\n    ARM_BUILTIN_CRYPTO_##U, UNKNOWN, 0},\n@@ -1771,42 +1795,6 @@ arm_init_fp16_builtins (void)\n \t\t\t\t\t       \"__fp16\");\n }\n \n-static void\n-arm_init_crc32_builtins ()\n-{\n-  tree si_ftype_si_qi\n-    = build_function_type_list (unsigned_intSI_type_node,\n-                                unsigned_intSI_type_node,\n-                                unsigned_intQI_type_node, NULL_TREE);\n-  tree si_ftype_si_hi\n-    = build_function_type_list (unsigned_intSI_type_node,\n-                                unsigned_intSI_type_node,\n-                                unsigned_intHI_type_node, NULL_TREE);\n-  tree si_ftype_si_si\n-    = build_function_type_list (unsigned_intSI_type_node,\n-                                unsigned_intSI_type_node,\n-                                unsigned_intSI_type_node, NULL_TREE);\n-\n-  arm_builtin_decls[ARM_BUILTIN_CRC32B]\n-    = add_builtin_function (\"__builtin_arm_crc32b\", si_ftype_si_qi,\n-                            ARM_BUILTIN_CRC32B, BUILT_IN_MD, NULL, NULL_TREE);\n-  arm_builtin_decls[ARM_BUILTIN_CRC32H]\n-    = add_builtin_function (\"__builtin_arm_crc32h\", si_ftype_si_hi,\n-                            ARM_BUILTIN_CRC32H, BUILT_IN_MD, NULL, NULL_TREE);\n-  arm_builtin_decls[ARM_BUILTIN_CRC32W]\n-    = add_builtin_function (\"__builtin_arm_crc32w\", si_ftype_si_si,\n-                            ARM_BUILTIN_CRC32W, BUILT_IN_MD, NULL, NULL_TREE);\n-  arm_builtin_decls[ARM_BUILTIN_CRC32CB]\n-    = add_builtin_function (\"__builtin_arm_crc32cb\", si_ftype_si_qi,\n-                            ARM_BUILTIN_CRC32CB, BUILT_IN_MD, NULL, NULL_TREE);\n-  arm_builtin_decls[ARM_BUILTIN_CRC32CH]\n-    = add_builtin_function (\"__builtin_arm_crc32ch\", si_ftype_si_hi,\n-                            ARM_BUILTIN_CRC32CH, BUILT_IN_MD, NULL, NULL_TREE);\n-  arm_builtin_decls[ARM_BUILTIN_CRC32CW]\n-    = add_builtin_function (\"__builtin_arm_crc32cw\", si_ftype_si_si,\n-                            ARM_BUILTIN_CRC32CW, BUILT_IN_MD, NULL, NULL_TREE);\n-}\n-\n void\n arm_init_builtins (void)\n {\n@@ -1824,8 +1812,7 @@ arm_init_builtins (void)\n       arm_init_crypto_builtins ();\n     }\n \n-  if (TARGET_CRC32)\n-    arm_init_crc32_builtins ();\n+  arm_init_acle_builtins ();\n \n   if (TARGET_HARD_FLOAT)\n     {\n@@ -2107,6 +2094,7 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n   machine_mode mode[SIMD_MAX_BUILTIN_ARGS];\n   tree formals;\n   int argc = 0;\n+  rtx_insn * insn;\n \n   if (have_retval\n       && (!target\n@@ -2271,7 +2259,17 @@ arm_expand_builtin_args (rtx target, machine_mode map_mode, int fcode,\n   if (!pat)\n     return 0;\n \n+  /* Check whether our current target implements the pattern chosen for this\n+     builtin and error out if not.  */\n+  start_sequence ();\n   emit_insn (pat);\n+  insn = get_insns ();\n+  end_sequence ();\n+\n+  if (recog_memoized (insn) < 0)\n+    error (\"this builtin is not supported for this target\");\n+  else\n+    emit_insn (insn);\n \n   return target;\n }\n@@ -2292,7 +2290,7 @@ arm_expand_builtin_1 (int fcode, tree exp, rtx target,\n   int k;\n   bool neon = false;\n \n-  if (IN_RANGE (fcode, ARM_BUILTIN_VFP_BASE, ARM_BUILTIN_MAX - 1))\n+  if (IN_RANGE (fcode, ARM_BUILTIN_VFP_BASE, ARM_BUILTIN_ACLE_BASE - 1))\n     neon = true;\n \n   is_void = !!(d->qualifiers[0] & qualifier_void);\n@@ -2349,6 +2347,20 @@ arm_expand_builtin_1 (int fcode, tree exp, rtx target,\n      &args[1]);\n }\n \n+/* Expand an ACLE builtin, i.e. those registered only if their respective\n+   target constraints are met.  This check happens within\n+   arm_expand_builtin_args.  */\n+\n+static rtx\n+arm_expand_acle_builtin (int fcode, tree exp, rtx target)\n+{\n+\n+  arm_builtin_datum *d\n+    = &acle_builtin_data[fcode - ARM_BUILTIN_ACLE_PATTERN_START];\n+\n+  return arm_expand_builtin_1 (fcode, exp, target, d);\n+}\n+\n /* Expand a Neon builtin, i.e. those registered only if TARGET_NEON holds.\n    Most of these are \"special\" because they don't have symbolic\n    constants defined per-instruction or per instruction-variant.  Instead, the\n@@ -2443,6 +2455,9 @@ arm_expand_builtin (tree exp,\n   int mask;\n   int imm;\n \n+  if (fcode >= ARM_BUILTIN_ACLE_BASE)\n+    return arm_expand_acle_builtin (fcode, exp, target);\n+\n   if (fcode >= ARM_BUILTIN_NEON_BASE)\n     return arm_expand_neon_builtin (fcode, exp, target);\n "}, {"sha": "81ab7720971ba042a5d64c22b6bd19710147e602", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a2c8e28bdb84d35275ffdd9e95f560c993c06b0/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=7a2c8e28bdb84d35275ffdd9e95f560c993c06b0", "patch": "@@ -0,0 +1,26 @@\n+/* ACLE builtin definitions for ARM.\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+VAR1 (UBINOP, crc32b, si)\n+VAR1 (UBINOP, crc32h, si)\n+VAR1 (UBINOP, crc32w, si)\n+VAR1 (UBINOP, crc32cb, si)\n+VAR1 (UBINOP, crc32ch, si)\n+VAR1 (UBINOP, crc32cw, si)"}]}