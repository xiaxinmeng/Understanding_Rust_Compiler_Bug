{"sha": "2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzNWRmOGMxNDIzZjI1OGE3YTYxZmIxZTBlYmEyNDJiNTAzM2I1YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-01-26T11:26:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-01-26T11:26:36Z"}, "message": "re PR c++/34235 (short variable cast to unsigned int fails to right shift as unsigned)\n\n2008-01-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR c++/34235\n\t* typeck.c (build_binary_op): Remove code to shorten compares.\n\n\t* g++.dg/torture/pr34235.C: New testcase.\n\nFrom-SVN: r131862", "tree": {"sha": "70eb2fac0208561ccdb917532610d92e2511fca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70eb2fac0208561ccdb917532610d92e2511fca9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d35280757892ae984f3cda61d6237a0bb57355cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35280757892ae984f3cda61d6237a0bb57355cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d35280757892ae984f3cda61d6237a0bb57355cd"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "1e3f462baec97b17ba6d340e6641cf980a1f7bf0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "patch": "@@ -1,3 +1,8 @@\n+2008-01-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c++/34235\n+\t* typeck.c (build_binary_op): Remove code to shorten compares.\n+\n 2008-01-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/33887"}, {"sha": "d86adcd0335ea79c7197ac52826b1a0f55e63672", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "patch": "@@ -3065,10 +3065,6 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n      Also implies COMMON.  */\n   int short_compare = 0;\n \n-  /* Nonzero if this is a right-shift operation, which can be computed on the\n-     original short and then promoted if the operand is a promoted short.  */\n-  int short_shift = 0;\n-\n   /* Nonzero means set RESULT_TYPE to the common type of the args.  */\n   int common = 0;\n \n@@ -3270,8 +3266,6 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t\twarning (0, \"right shift count is negative\");\n \t      else\n \t\t{\n-\t\t  if (! integer_zerop (op1))\n-\t\t    short_shift = 1;\n \t\t  if (compare_tree_int (op1, TYPE_PRECISION (type0)) >= 0)\n \t\t    warning (0, \"right shift count >= width of type\");\n \t\t}\n@@ -3686,45 +3680,6 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t    result_type = type;\n \t}\n \n-      /* Shifts can be shortened if shifting right.  */\n-\n-      if (short_shift)\n-\t{\n-\t  int unsigned_arg;\n-\t  tree arg0 = get_narrower (op0, &unsigned_arg);\n-\n-\t  final_type = result_type;\n-\n-\t  if (arg0 == op0 && final_type == TREE_TYPE (op0))\n-\t    unsigned_arg = TYPE_UNSIGNED (TREE_TYPE (op0));\n-\n-\t  if (TYPE_PRECISION (TREE_TYPE (arg0)) < TYPE_PRECISION (result_type)\n-\t      /* We can shorten only if the shift count is less than the\n-\t\t number of bits in the smaller type size.  */\n-\t      && compare_tree_int (op1, TYPE_PRECISION (TREE_TYPE (arg0))) < 0\n-\t      /* If arg is sign-extended and then unsigned-shifted,\n-\t\t we can simulate this with a signed shift in arg's type\n-\t\t only if the extended result is at least twice as wide\n-\t\t as the arg.  Otherwise, the shift could use up all the\n-\t\t ones made by sign-extension and bring in zeros.\n-\t\t We can't optimize that case at all, but in most machines\n-\t\t it never happens because available widths are 2**N.  */\n-\t      && (!TYPE_UNSIGNED (final_type)\n-\t\t  || unsigned_arg\n-\t\t  || (((unsigned) 2 * TYPE_PRECISION (TREE_TYPE (arg0)))\n-\t\t      <= TYPE_PRECISION (result_type))))\n-\t    {\n-\t      /* Do an unsigned shift if the operand was zero-extended.  */\n-\t      result_type\n-\t\t= c_common_signed_or_unsigned_type (unsigned_arg,\n-\t\t\t\t\t\t    TREE_TYPE (arg0));\n-\t      /* Convert value-to-be-shifted to that type.  */\n-\t      if (TREE_TYPE (op0) != result_type)\n-\t\top0 = cp_convert (result_type, op0);\n-\t      converted = 1;\n-\t    }\n-\t}\n-\n       /* Comparison operations are shortened too but differently.\n \t They identify themselves by setting short_compare = 1.  */\n "}, {"sha": "6535805cc96666c14b2d1067aaf7f714af1363b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "patch": "@@ -1,3 +1,8 @@\n+2008-01-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c++/34235\n+\t* g++.dg/torture/pr34235.C: New testcase.\n+\n 2008-01-26  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* g++.dg/tree-ssa/ivopts-1.C: XFAIL for MIPS too."}, {"sha": "5f05841c5cd3c899d88ad362c995ff9197c8ffb3", "filename": "gcc/testsuite/g++.dg/torture/pr34235.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34235.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f35df8c1423f258a7a61fb1e0eba242b5033b5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34235.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34235.C?ref=2f35df8c1423f258a7a61fb1e0eba242b5033b5a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+\n+extern \"C\" void abort (void);\n+int main()\n+{\n+        short x = -1;\n+        unsigned int c = ((unsigned int)x) >> 1;\n+        if (c != 0x7fffffff)\n+          abort();\n+        return 0;\n+}"}]}