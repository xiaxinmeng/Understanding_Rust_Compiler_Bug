{"sha": "e4779ba467b9e46298e8d7e9720d36928df10994", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ3NzliYTQ2N2I5ZTQ2Mjk4ZThkN2U5NzIwZDM2OTI4ZGYxMDk5NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-13T13:17:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-13T13:17:28Z"}, "message": "Updaate documentation.\n\nFrom-SVN: r230317", "tree": {"sha": "55d415c8d8937dae385d5b105a58498ab3a86f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55d415c8d8937dae385d5b105a58498ab3a86f90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4779ba467b9e46298e8d7e9720d36928df10994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4779ba467b9e46298e8d7e9720d36928df10994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4779ba467b9e46298e8d7e9720d36928df10994", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4779ba467b9e46298e8d7e9720d36928df10994/comments", "author": null, "committer": null, "parents": [{"sha": "90b510e4aa33eec927376c42e608a5f569d264c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b510e4aa33eec927376c42e608a5f569d264c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b510e4aa33eec927376c42e608a5f569d264c7"}], "stats": {"total": 1585, "additions": 846, "deletions": 739}, "files": [{"sha": "5d699f585f2fac5c2139be0983710c251bade996", "filename": "gcc/ada/doc/gnat_rm/compatibility_and_porting_guide.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fcompatibility_and_porting_guide.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fcompatibility_and_porting_guide.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fcompatibility_and_porting_guide.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -471,8 +471,8 @@ Elaboration order\n The implementation can choose any elaboration order consistent with the unit\n dependency relationship.  This freedom means that some orders can result in\n Program_Error being raised due to an 'Access Before Elaboration': an attempt\n-to invoke a subprogram its body has been elaborated, or to instantiate a\n-generic before the generic body has been elaborated.  By default GNAT\n+to invoke a subprogram before its body has been elaborated, or to instantiate\n+a generic before the generic body has been elaborated.  By default GNAT\n attempts to choose a safe order (one that will not encounter access before\n elaboration problems) by implicitly inserting `Elaborate` or\n `Elaborate_All` pragmas where"}, {"sha": "aa569deda5ccb734e9c7a64d30bc833ec37f8f20", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -283,18 +283,7 @@ The string argument, if given, is the message that will be associated\n with the exception occurrence if the exception is raised.  If no second\n argument is given, the default message is `file`:`nnn`,\n where `file` is the name of the source file containing the assert,\n-and `nnn` is the line number of the assert.  A pragma is not a\n-statement, so if a statement sequence contains nothing but a pragma\n-assert, then a null statement is required in addition, as in:\n-\n-.. code-block:: ada\n-\n-  ...\n-  if J > 3 then\n-     pragma Assert (K > 3, \"Bad value for K\");\n-     null;\n-  end if;\n-\n+and `nnn` is the line number of the assert.\n \n Note that, as with the `if` statement to which it is equivalent, the\n type of the expression is either `Standard.Boolean`, or any type derived\n@@ -4600,14 +4589,14 @@ Syntax:\n \n .. code-block:: ada\n \n-  pragma Profile (Ravenscar | Restricted | Rational);\n+  pragma Profile (Ravenscar | Restricted | Rational | GNAT_Extended_Ravenscar);\n \n \n This pragma is standard in Ada 2005, but is available in all earlier\n versions of Ada as an implementation-defined pragma. This is a\n configuration pragma that establishes a set of configuration pragmas\n that depend on the argument. `Ravenscar` is standard in Ada 2005.\n-The other two possibilities (`Restricted` or `Rational`)\n+The other possibilities (`Restricted`, `Rational`, `GNAT_Extended_Ravenscar`)\n are implementation-defined. The set of configuration pragmas\n is defined in the following sections.\n \n@@ -4720,6 +4709,20 @@ is defined in the following sections.\n   automatically causes the use of a simplified,\n   more efficient version of the tasking run-time library.\n \n+* Pragma Profile (GNAT_Extended_Ravenscar)\n+\n+  This profile corresponds to a GNAT specific extension of the\n+  Ravenscar profile. The profile may change in the future although\n+  only in a compatible way: some restrictions may be removed or\n+  relaxed. It is defined as a variation of the Ravenscar profile.\n+\n+  The ``No_Implicit_Heap_Allocations`` restriction has been replaced\n+  by ``No_Implicit_Task_Allocations`` and\n+  ``No_Implicit_Protected_Object_Allocations``.\n+\n+  The ``Simple_Barriers`` restriction has been replaced by\n+  ``Pure_Barriers``.\n+\n * Pragma Profile (Restricted)\n \n   This profile corresponds to the GNAT restricted run time. It\n@@ -6047,8 +6050,8 @@ Syntax:\n This pragma specifies that the specified entity, which must be\n a variable declared in a library level package, is to be marked as\n \"Thread Local Storage\" (`TLS`). On systems supporting this (which\n-include Solaris, GNU/Linux and VxWorks 6), this causes each thread\n-(and hence each Ada task) to see a distinct copy of the variable.\n+include Windows, Solaris, GNU/Linux and VxWorks 6), this causes each\n+thread (and hence each Ada task) to see a distinct copy of the variable.\n \n The variable may not have default initialization, and if there is\n an explicit initialization, it must be either `null` for an"}, {"sha": "b9eee2f6c13925ca17eeaf91421520ee7b94fb7f", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -1662,11 +1662,10 @@ or alternatively, using the form recommended by the RM:\n     for B'Address use Addr;\n \n \n-In both of these cases, `A`\n-and `B` become aliased to one another via the\n-address clause. This use of address clauses to overlay\n-variables, achieving an effect similar to unchecked\n-conversion was erroneous in Ada 83, but in Ada 95 and Ada 2005\n+In both of these cases, `A` and `B` become aliased to one another\n+via the address clause. This use of address clauses to overlay\n+variables, achieving an effect similar to unchecked conversion\n+was erroneous in Ada 83, but in Ada 95 and Ada 2005\n the effect is implementation defined. Furthermore, the\n Ada RM specifically recommends that in a situation\n like this, `B` should be subject to the following\n@@ -1677,10 +1676,14 @@ implementation advice (RM 13.3(19)):\n    optimizations based on assumptions of no aliases.\"\n \n GNAT follows this recommendation, and goes further by also applying\n-this recommendation to the overlaid variable (`A`\n-in the above example) in this case. This means that the overlay\n-works \"as expected\", in that a modification to one of the variables\n-will affect the value of the other.\n+this recommendation to the overlaid variable (`A` in the above example)\n+in this case. This means that the overlay works \"as expected\", in that\n+a modification to one of the variables will affect the value of the other.\n+\n+More generally, GNAT interprets this recommendation conservatively for\n+address clauses: in the cases other than overlays, it considers that the\n+object is effectively subject to pragma `Volatile` and implements the\n+associated semantics.\n \n Note that when address clause overlays are used in this way, there is an\n issue of unintentional initialization, as shown by this example:\n@@ -1803,12 +1806,9 @@ operations, for example:\n       Temp.A := 32;\n       Mem := Temp;\n \n-For a full access (reference or modification) of the variable (Mem) in\n-this case, as in the above examples, GNAT guarantees that the entire atomic\n-word will be accessed. It is not clear whether the RM requires this. For\n-example in the above, can the compiler reference only the Mem.A field as\n-an optimization? Whatever the answer to this question is, GNAT makes the\n-guarantee that for such a reference, the entire word is read or written.\n+For a full access (reference or modification) of the variable (Mem) in this\n+case, as in the above examples, GNAT guarantees that the entire atomic word\n+will be accessed, in accordance with the RM C.6(15) clause.\n \n A problem arises with a component access such as:\n \n@@ -1834,6 +1834,9 @@ a warning in such a case:\n It is best to be explicit in this situation, by either declaring the\n components to be atomic if you want the byte store, or explicitly writing\n the full word access sequence if that is what the hardware requires.\n+Alternatively, if the full word access sequence is required, GNAT also\n+provides the pragma `Volatile_Full_Access` which can be used in lieu of\n+pragma `Atomic` and will give the additional guarantee.\n \n \n .. _Effect_of_Convention_on_Representation:"}, {"sha": "04e3390af2aaa8bab76e3b3a6cb295a73640281a", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -461,14 +461,14 @@ scalar components.\n \n No_Implicit_Protected_Object_Allocations\n ----------------------------------------\n-.. index: No_Implicit_Protected_Object_Allocations\n+.. index:: No_Implicit_Protected_Object_Allocations\n \n [GNAT] No constructs are allowed to cause implicit heap allocation of a\n protected object.\n \n No_Implicit_Task_Allocations\n ----------------------------\n-.. index: No_Implicit_Task_Allocations\n+.. index:: No_Implicit_Task_Allocations\n \n [GNAT] No constructs are allowed to cause implicit heap allocation of a task.\n \n@@ -765,6 +765,29 @@ where ``Name`` is the fully qualified entity, for example ::\n \n    No_Use_Of_Entity => Ada.Text_IO.Put_Line\n \n+Pure_Barriers\n+-------------\n+.. index:: Pure_Barriers\n+\n+[GNAT] This restriction ensures at compile time that protected entry\n+barriers are restricted to:\n+\n+* simple boolean variables defined in the private part of the\n+  protected type/object,\n+* constant declarations,\n+* named numbers,\n+* enumeration literals,\n+* integer literals,\n+* real literals,\n+* character literals,\n+* implicitly defined comparison operators,\n+* uses of the Standard.\"not\" operator,\n+* short-circuit operator\n+\n+This restriction is a relaxation of the Simple_Barriers restriction,\n+but still ensures absence of side effects, exceptions, and recursion\n+during the evaluation of the barriers.\n+\n Simple_Barriers\n ---------------\n .. index:: Simple_Barriers\n@@ -858,7 +881,7 @@ code generation. If it is used in conjunction with \"semantics only\"\n checking, then some cases of violations may be missed.\n \n No_Dynamic_Sized_Objects\n---------------\n+------------------------\n .. index:: No_Dynamic_Sized_Objects\n \n [GNAT] This restriction disallows certain constructs that might lead to the"}, {"sha": "6bcc8191618bd6f85b3faa40d30ef7efaf2c6916", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -1928,23 +1928,25 @@ Alphabetical List of All Switches\n   *3*   Eliminate intermediate overflows (`ELIMINATED`)\n   ===== ===============================================================\n \n-  If only one digit appears then it applies to all\n+  If only one digit appears, then it applies to all\n   cases; if two digits are given, then the first applies outside\n-  assertions, and the second within assertions.\n+  assertions, pre/postconditions, and type invariants, and the second\n+  applies within assertions, pre/postconditions, and type invariants.\n \n   If no digits follow the *-gnato*, then it is equivalent to\n   *-gnato11*,\n-  causing all intermediate overflows to be handled in strict mode.\n+  causing all intermediate overflows to be handled in strict\n+  mode.\n \n   This switch also causes arithmetic overflow checking to be performed\n-  (as though `pragma Unsuppress (Overflow_Mode)` had been specified.\n+  (as though `pragma Unsuppress (Overflow_Mode)` had been specified).\n \n   The default if no option *-gnato* is given is that overflow handling\n   is in `STRICT` mode (computations done using the base type), and that\n   overflow checking is enabled.\n \n   Note that division by zero is a separate check that is not\n-  controlled by this switch (division by zero checking is on by default).\n+  controlled by this switch (divide-by-zero checking is on by default).\n \n   See also :ref:`Specifying_the_Desired_Mode`.\n \n@@ -4038,31 +4040,64 @@ Debugging and Assertion Control\n   .. index:: Assert\n   .. index:: Debug\n   .. index:: Assertions\n+  .. index:: Precondition\n+  .. index:: Postcondition\n+  .. index:: Type invariants\n+  .. index:: Subtype predicates\n+\n+  The `-gnata` option is equivalent to the following Assertion_Policy pragma::\n+\n+       pragma Assertion_Policy (Check);\n+\n+  Which is a shorthand for::\n+\n+       pragma Assertion_Policy\n+         (Assert               => Check,\n+          Static_Predicate     => Check,\n+          Dynamic_Predicate    => Check,\n+          Pre                  => Check,\n+          Pre'Class            => Check,\n+          Post                 => Check,\n+          Post'Class           => Check,\n+          Type_Invariant       => Check,\n+          Type_Invariant'Class => Check);\n \n   The pragmas `Assert` and `Debug` normally have no effect and\n   are ignored. This switch, where :samp:`a` stands for assert, causes\n-  `Assert` and `Debug` pragmas to be activated.\n+  pragmas `Assert` and `Debug` to be activated. This switch also\n+  causes preconditions, postconditions, subtype predicates, and\n+  type invariants to be activated.\n \n   The pragmas have the form::\n \n        pragma Assert (<Boolean-expression> [, <static-string-expression>])\n        pragma Debug (<procedure call>)\n+       pragma Type_Invariant (<type-local-name>, <Boolean-expression>)\n+       pragma Predicate (<type-local-name>, <Boolean-expression>)\n+       pragma Precondition (<Boolean-expression>, <string-expression>)\n+       pragma Postcondition (<Boolean-expression>, <string-expression>)\n+\n+  The aspects have the form::\n \n+       with [Pre|Post|Type_Invariant|Dynamic_Predicate|Static_Predicate]\n+         => <Boolean-expression>;\n \n   The `Assert` pragma causes `Boolean-expression` to be tested.\n   If the result is `True`, the pragma has no effect (other than\n   possible side effects from evaluating the expression). If the result is\n   `False`, the exception `Assert_Failure` declared in the package\n-  `System.Assertions` is\n-  raised (passing `static-string-expression`, if present, as the\n-  message associated with the exception). If no string expression is\n-  given the default is a string giving the file name and line number\n-  of the pragma.\n+  `System.Assertions` is raised (passing `static-string-expression`, if\n+  present, as the message associated with the exception). If no string\n+  expression is given, the default is a string containing the file name and\n+  line number of the pragma.\n \n   The `Debug` pragma causes `procedure` to be called. Note that\n   `pragma Debug` may appear within a declaration sequence, allowing\n   debugging procedures to be called between declarations.\n \n+  For the aspect specification, the `<Boolean-expression>` is evaluated.\n+  If the result is `True`, the aspect has no effect. If the result\n+  is `False`, the exception `Assert_Failure` is raised.\n \n .. _Validity_Checking:\n \n@@ -4871,11 +4906,11 @@ Run-Time Checks\n \n .. index:: Checks, stack overflow checking\n \n-By default, the following checks are suppressed: integer overflow\n-checks, stack overflow checks, and checks for access before\n-elaboration on subprogram calls. All other checks, including range\n-checks and array bounds checks, are turned on by default. The\n-following *gcc* switches refine this default behavior.\n+By default, the following checks are suppressed: stack overflow\n+checks, and checks for access before elaboration on subprogram\n+calls. All other checks, including overflow checks, range checks and\n+array bounds checks, are turned on by default. The following *gcc*\n+switches refine this default behavior.\n \n .. index:: -gnatp  (gcc)\n \n@@ -5003,13 +5038,8 @@ following *gcc* switches refine this default behavior.\n   checking is also quite expensive in time and space, since in general it\n   requires the use of double length arithmetic.\n \n-  Note again that the default is *-gnato00*,\n-  so overflow checking is not performed in default mode. This means that out of\n-  the box, with the default settings, GNAT does not do all the checks\n-  expected from the language description in the Ada Reference Manual.\n-  If you want all constraint checks to be performed, as described in this Manual,\n-  then you must explicitly use the *-gnato??*\n-  switch either on the *gnatmake* or *gcc* command.\n+  Note again that the default is *-gnato11* (equivalent to *-gnato1*),\n+  so overflow checking is performed in STRICT mode by default.\n \n \n .. index:: -gnatE  (gcc)\n@@ -6897,7 +6927,7 @@ Here are some examples of `gnatbind` invovations:\n Linking with *gnatlink*\n =======================\n \n-.. index: ! gnatlink\n+.. index:: ! gnatlink\n \n This chapter discusses *gnatlink*, a tool that links\n an Ada program and builds an executable file. This utility"}, {"sha": "6161073367be5534b21e86acbec57eaa5eff338e", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -1447,26 +1447,20 @@ some guidelines on debugging optimized code.\n Controlling Run-Time Checks\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-By default, GNAT generates all run-time checks, except integer overflow\n-checks, stack overflow checks, and checks for access before elaboration on\n-subprogram calls. The latter are not required in default mode, because all\n+By default, GNAT generates all run-time checks, except stack overflow\n+checks, and checks for access before elaboration on subprogram\n+calls. The latter are not required in default mode, because all\n necessary checking is done at compile time.\n \n .. index:: -gnatp (gcc)\n .. index:: -gnato (gcc)\n \n-Two gnat switches, *-gnatp* and *-gnato* allow this default to\n-be modified. See :ref:`Run-Time_Checks`.\n+The gnat switch, *-gnatp* allows this default to be modified. See\n+:ref:`Run-Time_Checks`.\n \n Our experience is that the default is suitable for most development\n purposes.\n \n-We treat integer overflow specially because these\n-are quite expensive and in our experience are not as important as other\n-run-time checks in the development process. Note that division by zero\n-is not considered an overflow check, and divide by zero checks are\n-generated where required by default.\n-\n Elaboration checks are off by default, and also not needed by default, since\n GNAT uses a static elaboration analysis approach that avoids the need for\n run-time checking. This manual contains a full chapter discussing the issue\n@@ -1942,11 +1936,9 @@ contain a single nested loop, if it can be vectorized when considered alone:\n \n The vectorizable operations depend on the targeted SIMD instruction set, but\n the adding and some of the multiplying operators are generally supported, as\n-well as the logical operators for modular types.  Note that, in the former\n-case, enabling overflow checks, for example with *-gnato*, totally\n-disables vectorization.  The other checks are not supposed to have the same\n-definitive effect, although compiling with *-gnatp* might well reveal\n-cases where some checks do thwart vectorization.\n+well as the logical operators for modular types. Note that compiling\n+with *-gnatp* might well reveal cases where some checks do thwart\n+vectorization.\n \n Type conversions may also prevent vectorization if they involve semantics that\n are not directly supported by the code generator or the SIMD instruction set.\n@@ -3197,10 +3189,6 @@ If no digits follow the *-gnato*, then it is equivalent to\n causing all intermediate operations to be computed using the base\n type (`STRICT` mode).\n \n-In addition to setting the mode used for computation of intermediate\n-results, the `-gnato` switch also enables overflow checking (which\n-is suppressed by default). It thus combines the effect of using\n-a pragma `Overflow_Mode` and pragma `Unsuppress`.\n \n .. _Default_Settings:\n "}, {"sha": "21b4b6111e82f90d40074993b27b8c40fd7c34b6", "filename": "gcc/ada/doc/gnat_ugn/gnat_project_manager.rst", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -259,7 +259,7 @@ There are several ways of defining source directories:\n   file names for the roots of these undesirable directory subtrees.\n \n \n-  .. code-block: ada-project\n+  .. code-block:: gpr\n \n         for Source_Dirs use (\"./**\");\n         for Ignore_Source_Sub_Dirs use (\".svn\");\n@@ -270,7 +270,7 @@ the project file at the toplevel directory rather than mixed with the sources,\n we will create the following file\n \n \n-.. code-block: ada-project\n+.. code-block:: gpr\n \n      build.gpr\n      project Build is\n@@ -420,7 +420,7 @@ the project directory, that is the directory containing the project file.\n \n For our example, we can specify the object dir in this way:\n \n-.. code-block: ada-project\n+.. code-block:: gpr\n \n        project Build is\n           for Source_Dirs use (\"common\");\n@@ -452,7 +452,7 @@ In the case of the example, let's place the executable in the root\n of the hierarchy, ie the same directory as :file:`build.gpr`. Hence\n the project file is now\n \n-.. code-block: ada-project\n+.. code-block:: gpr\n \n        project Build is\n           for Source_Dirs use (\"common\");\n@@ -489,7 +489,7 @@ command line when invoking a builder, and editors like\n *GPS* will be able to create extra menus to spawn or debug the\n corresponding executables.\n \n-.. code-block: ada-project\n+.. code-block:: gpr\n \n        project Build is\n           for Source_Dirs use (\"common\");\n@@ -557,7 +557,7 @@ Our example project file can be extended with the following empty packages. At\n this stage, they could all be omitted since they are empty, but they show which\n packages would be involved in the build process.\n \n-.. code-block: ada-project\n+.. code-block:: gpr\n \n        project Build is\n           for Source_Dirs use (\"common\");\n@@ -603,7 +603,7 @@ Several attributes can be used to specify the switches:\n   *-O2*, and the resulting project file is as follows\n   (only the `Compiler` package is shown):\n \n-  .. code-block: ada-project\n+  .. code-block:: gpr\n \n        package Compiler is\n          for Default_Switches (\"Ada\") use (\"-O2\");\n@@ -621,7 +621,7 @@ Several attributes can be used to specify the switches:\n   switches defined by *Default_Switches*. Our project file would\n   become:\n \n-  .. code-block: ada-project\n+  .. code-block:: gpr\n \n \n       package Compiler is\n@@ -634,7 +634,7 @@ Several attributes can be used to specify the switches:\n \n   `Switches` may take a pattern as an index, such as in:\n \n-  .. code-block: ada-project\n+  .. code-block:: gpr\n \n       package Compiler is\n         for Default_Switches (\"Ada\")\n@@ -1793,7 +1793,7 @@ but, for some reason, cannot be rebuilt. For instance, it is the case when some\n of the library sources are not available. Such library projects need to use the\n `Externally_Built` attribute as in the example below:\n \n-.. code-block: ada-project\n+.. code-block:: gpr\n \n      library project Extern_Lib is\n         for Languages    use (\"Ada\", \"C\");\n@@ -3180,7 +3180,7 @@ The following packages are currently supported in project files\n   or given a file name to find out its language for proper processing.\n   See :ref:`Naming_Schemes`.\n \n- .. only: PRO or GPL\n+ .. only:: PRO or GPL\n \n   *Pretty_Printer*\n     This package specifies the options used when calling the formatting tool"}, {"sha": "2a92500021b2ffc5bad126cf5e0323b00527500d", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 95, "deletions": 115, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -196,7 +196,7 @@ The GNAT Library Browser `gnatls`\n =================================\n \n .. index:: Library browser\n-.. index: ! gnatls\n+.. index:: ! gnatls\n \n `gnatls` is a tool that outputs information about compiled\n units. It gives the relationship between objects, unit names and source\n@@ -1373,7 +1373,7 @@ Alternatively, you may run the script using the following command line:\n   The Ada-to-XML converter *gnat2xml*\n   ===================================\n \n-  .. index: ! gnat2xml\n+  .. index:: ! gnat2xml\n   .. index:: XML generation\n \n   The *gnat2xml* tool is an ASIS-based utility that converts\n@@ -4178,10 +4178,10 @@ Alternatively, you may run the script using the following command line:\n   Generated skeletons and harnesses are based on the AUnit testing framework.\n   AUnit is an Ada adaptation of the xxxUnit testing frameworks, similar to JUnit\n   for Java or CppUnit for C++. While it is advised that gnattest users read\n-  the AUnit manual, deep knowledge of AUnit is not necessary for using gnattest.\n+  the AUnit manual, deep knowledge of AUnit is not necessary for using *gnattest*.\n   For correct operation of *gnattest*, AUnit should be installed and\n-  aunit.gpr must be on the project path. This happens automatically when Aunit\n-  is installed at its default location.\n+  aunit.gpr must be on the project path. Except for some special circumstances\n+  (e.g. a custom run-time is used), this should normally be the case out of the box.\n \n \n   .. _Running_gnattest:\n@@ -4200,7 +4200,7 @@ Alternatively, you may run the script using the following command line:\n \n     ::\n \n-        $ gnattest `-Pprojname` [`--harness-dir=dirname`] [`switches`] [`filename`] [-cargs `gcc_switches`]\n+        $ gnattest `-Pprojname` [`switches`] [`filename`] [-cargs `gcc_switches`]\n \n   where\n \n@@ -4214,37 +4214,35 @@ Alternatively, you may run the script using the following command line:\n       for which a test package will be created. The file name may be given with a\n       path.\n \n-  * :samp:`{gcc_switches}`\n-      is a list of switches for\n-      *gcc*. These switches will be passed on to all compiler invocations\n-      made by *gnattest* to generate a set of ASIS trees. Here you can provide\n-      ``-I`` switches to form the source search path,\n-      use the ``-gnatec`` switch to set the configuration file,\n-      use the ``-gnat05`` switch if sources should be compiled in\n-      Ada 2005 mode, etc.\n-\n-\n   * :samp:`{switches}`\n       is an optional sequence of switches as described below.\n \n+  * :samp:`{gcc_switches}`\n+      is a list of additional switches for\n+      *gcc* that will be passed to all compiler invocations\n+      made by *gnattest* to generate a set of ASIS trees.\n+\n \n   *gnattest* results can be found in two different places.\n \n   * *automatic harness*:\n-      This is the harness code, which is located by default in \"gnattest/harness\" directory\n-      that is created in the object directory of corresponding project file. All of\n-      this code is generated completely automatically and can be destroyed and\n-      regenerated at will. It is not recommended to modify this code manually, since\n-      it could easily be overridden by mistake. The entry point in the harness code is\n+      This is the harness code, which is located by default in\n+      \"gnattest/harness\" directory created in the object directory of\n+      the main project file. All of this code is generated completely\n+      automatically and can be destroyed and regenerated at will, with the\n+      exception of the file *gnattest_common.gpr*, which is created if absent,\n+      but never overwritten. It is not recommended to modify other files\n+      manually, since these modifications will be lost if *gnattest* is re-run.\n+      The entry point in the harness code is\n       the project file named *test_driver.gpr*. Tests can be compiled and run\n       using a command such as:\n \n       ::\n \n-         $ gnatmake -P<harness-dir>/test_driver test_runner\n+         $ gprbuild -P<harness-dir>/test_driver\n \n-      Note that you might need to specify the necessary values of scenario variables\n-      when you are not using the AUnit defaults.\n+      Note that if you need to adjust any options used to compile the harness,\n+      you can do so by editing the file *gnattest_common.gpr*.\n \n   * *actual unit test skeletons*:\n       A test skeleton for each visible subprogram is created in a separate file, if it\n@@ -4297,9 +4295,8 @@ Alternatively, you may run the script using the following command line:\n     .. index:: -v (gnattest)\n \n   :samp:`-v`\n-    Verbose mode: generates version information if specified by itself on the\n-    command line.  If specified via GNATtest_Switches, produces output\n-    about the execution of the tool.\n+    Verbose mode: produces additional output about the execution of the tool.\n+    When specified alone on the command line, prints tool version and exits.\n \n \n     .. index:: -r (gnattest)\n@@ -4318,7 +4315,9 @@ Alternatively, you may run the script using the following command line:\n \n   :samp:`--RTS={rts-path}`\n     Specifies the default location of the runtime library. Same meaning as the\n-    equivalent *gnatmake* flag (:ref:`Switches_for_gnatmake`).\n+    equivalent *gnatmake* flag (:ref:`Switches_for_gnatmake`). For restricted\n+    profiles, *gnattest* takes into account the run-time limitations when\n+    generating the harness.\n \n \n     .. index:: --additional-tests (gnattest)\n@@ -4406,7 +4405,7 @@ Alternatively, you may run the script using the following command line:\n \n   :samp:`--validate-type-extensions`\n     Enables substitution check: run all tests from all parents in order\n-    to check substitutability in accordance with LSP.\n+    to check substitutability in accordance with the Liskov substitution principle (LSP).\n \n \n     .. index:: --skeleton-default (gnattest)\n@@ -4504,12 +4503,12 @@ Alternatively, you may run the script using the following command line:\n \n   Most of the command-line options can also be passed to the tool by adding\n   special attributes to the project file. Those attributes should be put in\n-  package gnattest. Here is the list of attributes:\n+  package **Gnattest**. Here is the list of attributes:\n \n \n   * ``Tests_Root``\n        is used to select the same output mode as with the ``--tests-root`` option.\n-       This attribute cannot be used together with Subdir or Tests_Dir.\n+       This attribute cannot be used together with ``Subdir`` or ``Tests_Dir``.\n \n   * ``Subdir``\n        is used to select the same output mode as with the ``--subdir`` option.\n@@ -4534,7 +4533,7 @@ Alternatively, you may run the script using the following command line:\n \n   Each of those attributes can be overridden from the command line if needed.\n   Other *gnattest* switches can also be passed via the project\n-  file as an attribute list called GNATtest_Switches.\n+  file as an attribute list called *Gnattest_Switches*.\n \n \n   .. _Simple_gnattest_Example:\n@@ -4549,7 +4548,7 @@ Alternatively, you may run the script using the following command line:\n \n         <install_prefix>/share/examples/gnattest/simple\n \n-  This project contains a simple package containing one subprogram. By running gnattest:\n+  This project contains a simple package containing one subprogram. By running *gnattest*:\n \n     ::\n \n@@ -4563,7 +4562,7 @@ Alternatively, you may run the script using the following command line:\n        $ gnatmake -Ptest_driver\n        $ test_runner\n \n-  One failed test with diagnosis ``test not implemented`` is reported.\n+  One failed test with the diagnosis \"test not implemented\" is reported.\n   Since no special output option was specified, the test package ``Simple.Tests``\n   is located in:\n \n@@ -4579,13 +4578,13 @@ Alternatively, you may run the script using the following command line:\n   bodies and are surrounded by special comment sections. Those comment sections\n   should not be removed or modified in order for gnattest to be able to regenerate\n   test packages and keep already written tests in place.\n-  The test routine Test_Inc_5eaee3 located at simple-test_data-tests.adb contains\n-  a single statement: a call to procedure Assert. It has two arguments:\n+  The test routine `Test_Inc_5eaee3` located at ``simple-test_data-tests.adb`` contains\n+  a single statement: a call to procedure `Assert`. It has two arguments:\n   the Boolean expression we want to check and the diagnosis message to display if\n   the condition is false.\n \n   That is where actual testing code should be written after a proper setup.\n-  An actual check can be performed by replacing the Assert call with:\n+  An actual check can be performed by replacing the `Assert` call with:\n \n     ::\n \n@@ -4601,39 +4600,39 @@ Alternatively, you may run the script using the following command line:\n   ---------------------------------------------------\n \n   Besides test routines themselves, each test package has a parent package\n-  Test_Data that has two procedures: Set_Up and Tear_Down. This package is never\n-  overwritten by the tool. Set_Up is called before each test routine of the\n-  package and Tear_Down is called after each test routine. Those two procedures\n+  `Test_Data` that has two procedures: `Set_Up` and `Tear_Down`. This package is never\n+  overwritten by the tool. `Set_Up` is called before each test routine of the\n+  package, and `Tear_Down` is called after each test routine. Those two procedures\n   can be used to perform necessary initialization and finalization,\n-  memory allocation, etc. Test type declared in Test_Data package is parent type\n+  memory allocation, etc. Test type declared in `Test_Data` package is parent type\n   for the test type of test package and can have user-defined components whose\n-  values can be set by Set_Up routine and used in test routines afterwards.\n+  values can be set by `Set_Up` routine and used in test routines afterwards.\n \n \n   .. _Regenerating_Tests:\n \n   Regenerating Tests\n   ------------------\n \n-  Bodies of test routines and test_data packages are never overridden after they\n+  Bodies of test routines and `Test_Data` packages are never overridden after they\n   have been created once. As long as the name of the subprogram, full expanded Ada\n-  names, and the order of its parameters is the same, and comment sections are\n-  intact the old test routine will fit in its place and no test skeleton will be\n+  names and order of its parameters are the same, and comment sections are\n+  intact, the old test routine will fit in its place and no test skeleton will be\n   generated for the subprogram.\n \n   This can be demonstrated with the previous example. By uncommenting declaration\n-  and body of function Dec in simple.ads and simple.adb, running\n+  and body of function Dec in ``simple.ads`` and ``simple.adb``, running\n   *gnattest* on the project, and then running the test driver:\n \n     ::\n \n         $ gnattest --harness-dir=driver -Psimple.gpr\n         $ cd obj/driver\n-        $ gnatmake -Ptest_driver\n+        $ gprbuild -Ptest_driver\n         $ test_runner\n \n   The old test is not replaced with a stub, nor is it lost, but a new test\n-  skeleton is created for function Dec.\n+  skeleton is created for function `Dec`.\n \n   The only way of regenerating tests skeletons is to remove the previously created\n   tests together with corresponding comment sections.\n@@ -4654,7 +4653,7 @@ Alternatively, you may run the script using the following command line:\n   *gnattest*).\n \n   The default behavior of the test driver is set with the same switch\n-  as passed to gnattest when generating the test driver.\n+  as passed to *gnattest* when generating the test driver.\n \n   Passing it to the driver generated on the first example:\n \n@@ -4673,10 +4672,10 @@ Alternatively, you may run the script using the following command line:\n   Creation of test skeletons for primitive operations of tagged types entails\n   a number of features. Test routines for all primitives of a given tagged type\n   are placed in a separate child package named according to the tagged type. For\n-  example, if you have tagged type T in package P, all tests for primitives\n-  of T will be in P.T_Test_Data.T_Tests.\n+  example, if you have tagged type *T* in package *P*, all tests for primitives\n+  of *T* will be in *P.T_Test_Data.T_Tests*.\n \n-  Consider running gnattest on the second example (note: actual tests for this\n+  Consider running *gnattest* on the second example (note: actual tests for this\n   example already exist, so there's no need to worry if the tool reports that\n   no new stubs were generated):\n \n@@ -4686,28 +4685,28 @@ Alternatively, you may run the script using the following command line:\n         $ gnattest --harness-dir=driver -Ptagged_rec.gpr\n \n   Taking a closer look at the test type declared in the test package\n-  Speed1.Controller_Test_Data is necessary. It is declared in:\n+  *Speed1.Controller_Test_Data* is necessary. It is declared in:\n \n     ::\n \n         <install_prefix>/share/examples/gnattest/tagged_rec/obj/gnattest/tests\n \n   Test types are direct or indirect descendants of\n-  AUnit.Test_Fixtures.Test_Fixture type. In the case of nonprimitive tested\n+  *AUnit.Test_Fixtures.Test_Fixture* type. In the case of non-primitive tested\n   subprograms, the user doesn't need to be concerned with them. However,\n   when generating test packages for primitive operations, there are some things\n   the user needs to know.\n \n-  Type Test_Controller has components that allow assignment of various\n-  derivations of type Controller. And if you look at the specification of\n-  package Speed2.Auto_Controller, you will see that Test_Auto_Controller\n-  actually derives from Test_Controller rather than AUnit type Test_Fixture.\n+  Type *Test_Controller* has components that allow assignment of various\n+  derivations of type *Controller*. And if you look at the specification of\n+  package *Speed2.Auto_Controller*, you will see that *Test_Auto_Controller*\n+  actually derives from *Test_Controller* rather than AUnit type *Test_Fixture*.\n   Thus, test types mirror the hierarchy of tested types.\n \n-  The Set_Up procedure of Test_Data package corresponding to a test package\n-  of primitive operations of type T assigns to Fixture a reference to an\n-  object of that exact type T. Notice, however, that if the tagged type has\n-  discriminants, the Set_Up only has a commented template for setting\n+  The *Set_Up* procedure of *Test_Data* package corresponding to a test package\n+  of primitive operations of type *T* assigns to *Fixture* a reference to an\n+  object of that exact type *T*. Note, however, that if the tagged type has\n+  discriminants, the *Set_Up* only has a commented template for setting\n   up the fixture, since filling the discriminant with actual value is up\n   to the user.\n \n@@ -4728,7 +4727,7 @@ Alternatively, you may run the script using the following command line:\n     ::\n \n         $ cd obj/driver\n-        $ gnatmake -Ptest_driver\n+        $ gprbuild -Ptest_driver\n         $ test_runner\n \n   There are 6 passed tests while there are only 5 testable subprograms. The test\n@@ -4739,13 +4738,13 @@ Alternatively, you may run the script using the following command line:\n   .. _Tagged_Type_Substitutability_Testing:\n \n   Tagged Type Substitutability Testing\n-  -------------------------------------\n+  ------------------------------------\n \n   *Tagged Type Substitutability Testing* is a way of verifying the global type\n   consistency by testing. Global type consistency is a principle stating that if\n-  S is a subtype of T (in Ada, S is a derived type of tagged type T),\n-  then objects of type T may be replaced with objects of type S (that is,\n-  objects of type S may be substituted for objects of type T), without\n+  *S* is a subtype of *T* (in Ada, *S* is a derived type of tagged type *T*),\n+  then objects of type *T* may be replaced with objects of type *S* (that is,\n+  objects of type *S* may be substituted for objects of type *T*), without\n   altering any of the desirable properties of the program. When the properties\n   of the program are expressed in the form of subprogram preconditions and\n   postconditions (let's call them pre and post), the principle is formulated as\n@@ -4761,39 +4760,39 @@ Alternatively, you may run the script using the following command line:\n   derived types.\n \n   In the example used in the previous section, there was clearly a violation of\n-  type consistency. The overriding primitive Adjust_Speed in package Speed2\n+  type consistency. The overriding primitive *Adjust_Speed* in package *Speed2*\n   removes the functionality of the overridden primitive and thus doesn't respect\n   the consistency principle.\n-  Gnattest has a special option to run overridden parent tests against objects\n+  *Gnattest* has a special option to run overridden parent tests against objects\n   of the type which have overriding primitives:\n \n     ::\n \n         $ gnattest --harness-dir=driver --validate-type-extensions -Ptagged_rec.gpr\n         $ cd obj/driver\n-        $ gnatmake -Ptest_driver\n+        $ gprbuild -Ptest_driver\n         $ test_runner\n \n-  While all the tests pass by themselves, the parent test for Adjust_Speed fails\n+  While all the tests pass by themselves, the parent test for *Adjust_Speed* fails\n   against objects of the derived type.\n \n   Non-overridden tests are already inherited for derived test types, so the\n-  ``--validate-type-extensions`` enables the application of overriden tests to objects\n-  of derived types.\n+  ``--validate-type-extensions`` enables the application of overridden tests\n+  to objects of derived types.\n \n \n   .. _Testing_with_Contracts:\n \n   Testing with Contracts\n   ----------------------\n \n-  *gnattest* supports pragmas Precondition, Postcondition, and Test_Case,\n+  *gnattest* supports pragmas *Precondition*, *Postcondition*, and *Test_Case*,\n   as well as the corresponding Ada 2012 aspects.\n-  Test routines are generated, one per each Test_Case associated with a tested\n+  Test routines are generated, one per each *Test_Case* associated with a tested\n   subprogram. Those test routines have special wrappers for tested functions\n   that have composition of pre- and postcondition of the subprogram with\n-  \"requires\" and \"ensures\" of the Test_Case (depending on the mode, pre and post\n-  either count for Nominal mode or do not count for Robustness mode).\n+  \"requires\" and \"ensures\" of the *Test_Case* (depending on the mode, pre and post\n+  either count for *Nominal* mode or do **not** count for *Robustness* mode).\n \n   The third example demonstrates how this works:\n \n@@ -4821,7 +4820,7 @@ Alternatively, you may run the script using the following command line:\n     ::\n \n         $ cd obj/driver\n-        $ gnatmake -Ptest_driver\n+        $ gprbuild -Ptest_driver\n         $ test_runner\n \n   However, by changing 9.0 to 25.0 and 3.0 to 5.0, for example, you can get\n@@ -4839,12 +4838,12 @@ Alternatively, you may run the script using the following command line:\n   *gnattest* can add user-written tests to the main suite of the test\n   driver. *gnattest* traverses the given packages and searches for test\n   routines. All procedures with a single in out parameter of a type which is\n-  derived from AUnit.Test_Fixtures.Test_Fixture and that are declared in package\n+  derived from *AUnit.Test_Fixtures.Test_Fixture* and that are declared in package\n   specifications are added to the suites and are then executed by the test driver.\n-  (Set_Up and Tear_Down are filtered out.)\n+  (*Set_Up* and *Tear_Down* are filtered out.)\n \n   An example illustrates two ways of creating test harnesses for user-written\n-  tests. Directory additional_tests contains an AUnit-based test driver written\n+  tests. Directory `additional_tests` contains an AUnit-based test driver written\n   by hand.\n \n     ::\n@@ -4858,7 +4857,7 @@ Alternatively, you may run the script using the following command line:\n \n         gnattest -Padditional/harness/harness.gpr --harness-dir=harness_only \\\\\n           --harness-only\n-        gnatmake -Pharness_only/test_driver.gpr\n+        gprbuild -Pharness_only/test_driver.gpr\n         harness_only/test_runner\n \n   Additional tests can also be executed together with generated tests:\n@@ -4867,7 +4866,7 @@ Alternatively, you may run the script using the following command line:\n \n         gnattest -Psimple.gpr --additional-tests=additional/harness/harness.gpr \\\\\n           --harness-dir=mixing\n-        gnatmake -Pmixing/test_driver.gpr\n+        gprbuild -Pmixing/test_driver.gpr\n         mixing/test_runner\n \n \n@@ -4914,7 +4913,7 @@ Alternatively, you may run the script using the following command line:\n   remain intact, while their bodies are replaced, and hide the original bodies by\n   means of extending projects. Also, for each stubbed\n   package, a child package with setter routines for each subprogram declaration\n-  is created. These setters are meant to be used to set the behaviour of\n+  is created. These setters are meant to be used to set the behavior of\n   stubbed subprograms from within test cases.\n \n   Note that subprograms belonging to the same package as the subprogram under\n@@ -4930,8 +4929,9 @@ Alternatively, you may run the script using the following command line:\n \n      Developing a stubs-based testing campaign requires\n      good understanding of the infrastructure created by *gnattest* for\n-     this purpose. We recommend following the stubbing tutorials provided\n-     under :file:`<install_prefix>/share/examples/gnattest/stubbing*` before\n+     this purpose. We recommend following the two stubbing tutorials\n+     `simple_stubbing` and `advanced_stubbing` provided\n+     under :file:`<install_prefix>/share/examples/gnattest` before\n      attempting to use this powerful feature.\n \n \n@@ -4951,38 +4951,18 @@ Alternatively, you may run the script using the following command line:\n   Option ``--omit-sloc`` may be useful when putting test packages under version control.\n \n \n-  .. _Support_for_other_platforms/run-times:\n-\n-  Support for other platforms/run-times\n-  -------------------------------------\n-\n-  *gnattest* can be used to generate the test harness for platforms\n-  and run-time libraries others than the default native target with the\n-  default full run-time. For example, when using a limited run-time library\n-  such as Zero FootPrint (ZFP), a simplified harness is generated.\n-\n-  Two variables are used to tell the underlying AUnit framework how to generate\n-  the test harness: `PLATFORM`, which identifies the target, and\n-  `RUNTIME`, used to determine the run-time library for which the harness\n-  is generated. Corresponding prefix should also be used when calling\n-  *gnattest* for non-native targets. For example, the following options\n-  are used to generate the AUnit test harness for a PowerPC ELF target using\n-  the ZFP run-time library:\n-\n-    ::\n-\n-        $ powerpc-elf-gnattest -Psimple.gpr -XPLATFORM=powerpc-elf -XRUNTIME=zfp\n-\n-\n   .. _Current_Limitations:\n \n   Current Limitations\n   -------------------\n \n-  The tool currently does not support following features:\n+  The tool currently has the following limitations:\n \n-  * generic tests for nested generic packages and their instantiations\n-  * tests for protected subprograms and entries\n-  * pragma No_Run_Time\n-  * if pragmas for C and C++ interaction are used, manual adjustments might be\n-    necessary to make the test driver compilable\n+  * generic tests for nested generic packages and their instantiations are\n+    not supported;\n+  * tests for protected subprograms and entries are not supported;\n+  * pragma *No_Run_Time* is not supported;\n+  * if pragmas for interfacing with foreign languages are used, manual\n+    adjustments might be necessary to make the test harness compilable;\n+  * use of elaboration control pragmas may result in elaboration circularities\n+    in the generated harness."}, {"sha": "694e37baeedb416f801e526f764c4dc767c7d1e1", "filename": "gcc/ada/doc/gnat_ugn/platform_specific_information.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -2186,7 +2186,7 @@ binding you need to use a project file, and adding a single with_clause\n will give you full access to the Win32Ada binding sources and ensure\n that the proper libraries are passed to the linker.\n \n-  .. code-block:: ada-project\n+  .. code-block:: gpr\n \n       with \"win32ada\";\n       project P is\n@@ -2213,7 +2213,7 @@ To use the wPOSIX binding you need to use a project file, and adding\n a single with_clause will give you full access to the wPOSIX binding\n sources and ensure that the proper libraries are passed to the linker.\n \n-  .. code-block:: ada-project\n+  .. code-block:: gpr\n \n       with \"wposix\";\n       project P is"}, {"sha": "673478a4aad226540f094268cda3bf835dbd877d", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -3629,7 +3629,7 @@ Convention identifiers are recognized by GNAT:\n     to perform dimensional checks:\n \n \n-  .. code-block: ada\n+  .. code-block:: ada\n \n       type Distance is new Long_Float;\n       type Time     is new Long_Float;"}, {"sha": "88bef9f0e3ae18551e6552f5e522087ce6281203", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 439, "deletions": 380, "changes": 819, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e4779ba467b9e46298e8d7e9720d36928df10994"}, {"sha": "2505fb72592f0cc7ff8c171934f7ad7c0aca9150", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 171, "deletions": 150, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4779ba467b9e46298e8d7e9720d36928df10994/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e4779ba467b9e46298e8d7e9720d36928df10994", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , November 12, 2015\n+GNAT User's Guide for Native Platforms , November 13, 2015\n \n AdaCore\n \n@@ -5720,19 +5720,19 @@ types). This simplifies the definition of operations that use type checking\n to perform dimensional checks:\n @end itemize\n \n-@c code-block: ada\n-@c \n-@c   type Distance is new Long_Float;\n-@c   type Time     is new Long_Float;\n-@c   type Velocity is new Long_Float;\n-@c   function \"/\" (D : Distance; T : Time)\n-@c     return Velocity;\n-@c   pragma Import (Intrinsic, \"/\");\n-@c \n-@c This common idiom is often programmed with a generic definition and an\n-@c explicit body. The pragma makes it simpler to introduce such declarations.\n-@c It incurs no overhead in compilation time or code size, because it is\n-@c implemented as a single machine instruction.\n+@example\n+  type Distance is new Long_Float;\n+  type Time     is new Long_Float;\n+  type Velocity is new Long_Float;\n+  function \"/\" (D : Distance; T : Time)\n+    return Velocity;\n+  pragma Import (Intrinsic, \"/\");\n+\n+This common idiom is often programmed with a generic definition and an\n+explicit body. The pragma makes it simpler to introduce such declarations.\n+It incurs no overhead in compilation time or code size, because it is\n+implemented as a single machine instruction.\n+@end example\n \n \n @itemize *\n@@ -9617,23 +9617,25 @@ Eliminate intermediate overflows (@cite{ELIMINATED})\n @end multitable\n \n \n-If only one digit appears then it applies to all\n+If only one digit appears, then it applies to all\n cases; if two digits are given, then the first applies outside\n-assertions, and the second within assertions.\n+assertions, pre/postconditions, and type invariants, and the second\n+applies within assertions, pre/postconditions, and type invariants.\n \n If no digits follow the @emph{-gnato}, then it is equivalent to\n @emph{-gnato11},\n-causing all intermediate overflows to be handled in strict mode.\n+causing all intermediate overflows to be handled in strict\n+mode.\n \n This switch also causes arithmetic overflow checking to be performed\n-(as though @cite{pragma Unsuppress (Overflow_Mode)} had been specified.\n+(as though @cite{pragma Unsuppress (Overflow_Mode)} had been specified).\n \n The default if no option @emph{-gnato} is given is that overflow handling\n is in @cite{STRICT} mode (computations done using the base type), and that\n overflow checking is enabled.\n \n Note that division by zero is a separate check that is not\n-controlled by this switch (division by zero checking is on by default).\n+controlled by this switch (divide-by-zero checking is on by default).\n \n See also @ref{fd,,Specifying the Desired Mode}.\n @end table\n@@ -12534,30 +12536,75 @@ When no switch @emph{-gnatw} is used, this is equivalent to:\n \n @geindex Assertions\n \n+@geindex Precondition\n+\n+@geindex Postcondition\n+\n+@geindex Type invariants\n+\n+@geindex Subtype predicates\n+\n+The @cite{-gnata} option is equivalent to the following Assertion_Policy pragma:\n+\n+@example\n+pragma Assertion_Policy (Check);\n+@end example\n+\n+Which is a shorthand for:\n+\n+@example\n+pragma Assertion_Policy\n+  (Assert               => Check,\n+   Static_Predicate     => Check,\n+   Dynamic_Predicate    => Check,\n+   Pre                  => Check,\n+   Pre'Class            => Check,\n+   Post                 => Check,\n+   Post'Class           => Check,\n+   Type_Invariant       => Check,\n+   Type_Invariant'Class => Check);\n+@end example\n+\n The pragmas @cite{Assert} and @cite{Debug} normally have no effect and\n are ignored. This switch, where @code{a} stands for assert, causes\n-@cite{Assert} and @cite{Debug} pragmas to be activated.\n+pragmas @cite{Assert} and @cite{Debug} to be activated. This switch also\n+causes preconditions, postconditions, subtype predicates, and\n+type invariants to be activated.\n \n The pragmas have the form:\n \n @example\n pragma Assert (<Boolean-expression> [, <static-string-expression>])\n pragma Debug (<procedure call>)\n+pragma Type_Invariant (<type-local-name>, <Boolean-expression>)\n+pragma Predicate (<type-local-name>, <Boolean-expression>)\n+pragma Precondition (<Boolean-expression>, <string-expression>)\n+pragma Postcondition (<Boolean-expression>, <string-expression>)\n+@end example\n+\n+The aspects have the form:\n+\n+@example\n+with [Pre|Post|Type_Invariant|Dynamic_Predicate|Static_Predicate]\n+  => <Boolean-expression>;\n @end example\n \n The @cite{Assert} pragma causes @cite{Boolean-expression} to be tested.\n If the result is @cite{True}, the pragma has no effect (other than\n possible side effects from evaluating the expression). If the result is\n @cite{False}, the exception @cite{Assert_Failure} declared in the package\n-@cite{System.Assertions} is\n-raised (passing @cite{static-string-expression}, if present, as the\n-message associated with the exception). If no string expression is\n-given the default is a string giving the file name and line number\n-of the pragma.\n+@cite{System.Assertions} is raised (passing @cite{static-string-expression}, if\n+present, as the message associated with the exception). If no string\n+expression is given, the default is a string containing the file name and\n+line number of the pragma.\n \n The @cite{Debug} pragma causes @cite{procedure} to be called. Note that\n @cite{pragma Debug} may appear within a declaration sequence, allowing\n debugging procedures to be called between declarations.\n+\n+For the aspect specification, the @cite{<Boolean-expression>} is evaluated.\n+If the result is @cite{True}, the aspect has no effect. If the result\n+is @cite{False}, the exception @cite{Assert_Failure} is raised.\n @end table\n \n @node Validity Checking,Style Checking,Debugging and Assertion Control,Compiler Switches\n@@ -13575,11 +13622,11 @@ The switch @code{-gnatyN} clears any previously set style checks.\n @geindex Checks\n @geindex stack overflow checking\n \n-By default, the following checks are suppressed: integer overflow\n-checks, stack overflow checks, and checks for access before\n-elaboration on subprogram calls. All other checks, including range\n-checks and array bounds checks, are turned on by default. The\n-following @emph{gcc} switches refine this default behavior.\n+By default, the following checks are suppressed: stack overflow\n+checks, and checks for access before elaboration on subprogram\n+calls. All other checks, including overflow checks, range checks and\n+array bounds checks, are turned on by default. The following @emph{gcc}\n+switches refine this default behavior.\n \n @geindex -gnatp (gcc)\n \n@@ -13731,13 +13778,8 @@ subscript), or a wild jump (from an out of range case value). Overflow\n checking is also quite expensive in time and space, since in general it\n requires the use of double length arithmetic.\n \n-Note again that the default is @emph{-gnato00},\n-so overflow checking is not performed in default mode. This means that out of\n-the box, with the default settings, GNAT does not do all the checks\n-expected from the language description in the Ada Reference Manual.\n-If you want all constraint checks to be performed, as described in this Manual,\n-then you must explicitly use the @emph{-gnato??}\n-switch either on the @emph{gnatmake} or @emph{gcc} command.\n+Note again that the default is @emph{-gnato11} (equivalent to @emph{-gnato1}),\n+so overflow checking is performed in STRICT mode by default.\n @end table\n \n @geindex -gnatE (gcc)\n@@ -16133,7 +16175,7 @@ since gnatlink will not be able to find the generated file.\n @section Linking with @emph{gnatlink}\n \n \n-@c index: ! gnatlink\n+@geindex gnatlink\n \n This chapter discusses @emph{gnatlink}, a tool that links\n an Ada program and builds an executable file. This utility\n@@ -17030,22 +17072,22 @@ subtrees rooted at subdirectories \".svn\". To do that, attribute\n @strong{Ignore_Source_Sub_Dirs} can be used. It specifies the list of simple\n file names for the roots of these undesirable directory subtrees.\n \n-@c code-block: ada-project\n-@c \n-@c for Source_Dirs use (\"./**\");\n-@c for Ignore_Source_Sub_Dirs use (\".svn\");\n+@example\n+for Source_Dirs use (\"./**\");\n+for Ignore_Source_Sub_Dirs use (\".svn\");\n+@end example\n @end itemize\n \n When applied to the simple example, and because we generally prefer to have\n the project file at the toplevel directory rather than mixed with the sources,\n we will create the following file\n \n-@c code-block: ada-project\n-@c \n-@c build.gpr\n-@c project Build is\n-@c    for Source_Dirs use (\"common\");  --  <<<<\n-@c end Build;\n+@example\n+build.gpr\n+project Build is\n+   for Source_Dirs use (\"common\");  --  <<<<\n+end Build;\n+@end example\n \n Once source directories have been specified, one may need to indicate\n source files of interest. By default, all source files present in the source\n@@ -17199,12 +17241,12 @@ the project directory, that is the directory containing the project file.\n \n For our example, we can specify the object dir in this way:\n \n-@c code-block: ada-project\n-@c \n-@c project Build is\n-@c    for Source_Dirs use (\"common\");\n-@c    for Object_Dir use \"obj\";   --  <<<<\n-@c end Build;\n+@example\n+project Build is\n+   for Source_Dirs use (\"common\");\n+   for Object_Dir use \"obj\";   --  <<<<\n+end Build;\n+@end example\n \n As mentioned earlier, there is a single object directory per project. As a\n result, if you have an existing system where the object files are spread across\n@@ -17231,13 +17273,13 @@ In the case of the example, let's place the executable in the root\n of the hierarchy, ie the same directory as @code{build.gpr}. Hence\n the project file is now\n \n-@c code-block: ada-project\n-@c \n-@c project Build is\n-@c    for Source_Dirs use (\"common\");\n-@c    for Object_Dir use \"obj\";\n-@c    for Exec_Dir use \".\";  --   <<<<\n-@c end Build;\n+@example\n+project Build is\n+   for Source_Dirs use (\"common\");\n+   for Object_Dir use \"obj\";\n+   for Exec_Dir use \".\";  --   <<<<\n+end Build;\n+@end example\n \n @node Main Subprograms,Tools Options in Project Files,Object and Exec Directory,Building With Projects\n @anchor{gnat_ugn/gnat_project_manager id6}@anchor{15c}@anchor{gnat_ugn/gnat_project_manager main-subprograms}@anchor{15d}\n@@ -17267,14 +17309,14 @@ command line when invoking a builder, and editors like\n @emph{GPS} will be able to create extra menus to spawn or debug the\n corresponding executables.\n \n-@c code-block: ada-project\n-@c \n-@c project Build is\n-@c    for Source_Dirs use (\"common\");\n-@c    for Object_Dir use \"obj\";\n-@c    for Exec_Dir use \".\";\n-@c    for Main use (\"proc.adb\");  --   <<<<\n-@c end Build;\n+@example\n+project Build is\n+   for Source_Dirs use (\"common\");\n+   for Object_Dir use \"obj\";\n+   for Exec_Dir use \".\";\n+   for Main use (\"proc.adb\");  --   <<<<\n+end Build;\n+@end example\n \n If this attribute is defined in the project, then spawning the builder\n with a command such as\n@@ -17333,26 +17375,26 @@ Our example project file can be extended with the following empty packages. At\n this stage, they could all be omitted since they are empty, but they show which\n packages would be involved in the build process.\n \n-@c code-block: ada-project\n-@c \n-@c project Build is\n-@c    for Source_Dirs use (\"common\");\n-@c    for Object_Dir use \"obj\";\n-@c    for Exec_Dir use \".\";\n-@c    for Main use (\"proc.adb\");\n-@c \n-@c    package Builder is  --<<<  for gprbuild\n-@c    end Builder;\n-@c \n-@c    package Compiler is --<<<  for the compiler\n-@c    end Compiler;\n-@c \n-@c    package Binder is   --<<<  for the binder\n-@c    end Binder;\n-@c \n-@c    package Linker is   --<<<  for the linker\n-@c    end Linker;\n-@c end Build;\n+@example\n+project Build is\n+   for Source_Dirs use (\"common\");\n+   for Object_Dir use \"obj\";\n+   for Exec_Dir use \".\";\n+   for Main use (\"proc.adb\");\n+\n+   package Builder is  --<<<  for gprbuild\n+   end Builder;\n+\n+   package Compiler is --<<<  for the compiler\n+   end Compiler;\n+\n+   package Binder is   --<<<  for the binder\n+   end Binder;\n+\n+   package Linker is   --<<<  for the linker\n+   end Linker;\n+end Build;\n+@end example\n \n Let's first examine the compiler switches. As stated in the initial description\n of the example, we want to compile all files with @emph{-O2}. This is a\n@@ -17381,11 +17423,11 @@ In this example, we want to compile all Ada source files with the switch\n @emph{-O2}, and the resulting project file is as follows\n (only the @cite{Compiler} package is shown):\n \n-@c code-block: ada-project\n-@c \n-@c package Compiler is\n-@c   for Default_Switches (\"Ada\") use (\"-O2\");\n-@c end Compiler;\n+@example\n+package Compiler is\n+  for Default_Switches (\"Ada\") use (\"-O2\");\n+end Compiler;\n+@end example\n @end quotation\n \n @geindex Switches (GNAT Project Manager)\n@@ -17402,26 +17444,25 @@ attribute (indexed on the file name) can be used and will override the\n switches defined by @emph{Default_Switches}. Our project file would\n become:\n \n-@c code-block: ada-project\n-@c \n-@c \n-@c package Compiler is\n-@c    for Default_Switches (\"Ada\")\n-@c        use (\"-O2\");\n-@c    for Switches (\"proc.adb\")\n-@c        use (\"-O0\");\n-@c end Compiler;\n+@example\n+package Compiler is\n+   for Default_Switches (\"Ada\")\n+       use (\"-O2\");\n+   for Switches (\"proc.adb\")\n+       use (\"-O0\");\n+end Compiler;\n+@end example\n \n @cite{Switches} may take a pattern as an index, such as in:\n \n-@c code-block: ada-project\n-@c \n-@c package Compiler is\n-@c   for Default_Switches (\"Ada\")\n-@c       use (\"-O2\");\n-@c   for Switches (\"pkg*\")\n-@c       use (\"-O0\");\n-@c end Compiler;\n+@example\n+package Compiler is\n+  for Default_Switches (\"Ada\")\n+      use (\"-O2\");\n+  for Switches (\"pkg*\")\n+      use (\"-O0\");\n+end Compiler;\n+@end example\n \n Sources @code{pkg.adb} and @code{pkg-child.adb} would be compiled with -O0,\n not -O2.\n@@ -18708,16 +18749,16 @@ but, for some reason, cannot be rebuilt. For instance, it is the case when some\n of the library sources are not available. Such library projects need to use the\n @cite{Externally_Built} attribute as in the example below:\n \n-@c code-block: ada-project\n-@c \n-@c library project Extern_Lib is\n-@c    for Languages    use (\"Ada\", \"C\");\n-@c    for Source_Dirs  use (\"lib_src\");\n-@c    for Library_Dir  use \"lib2\";\n-@c    for Library_Kind use \"dynamic\";\n-@c    for Library_Name use \"l2\";\n-@c    for Externally_Built use \"true\";  --  <<<<\n-@c end Extern_Lib;\n+@example\n+library project Extern_Lib is\n+   for Languages    use (\"Ada\", \"C\");\n+   for Source_Dirs  use (\"lib_src\");\n+   for Library_Dir  use \"lib2\";\n+   for Library_Kind use \"dynamic\";\n+   for Library_Name use \"l2\";\n+   for Externally_Built use \"true\";  --  <<<<\n+end Extern_Lib;\n+@end example\n \n In the case of externally built libraries, the @cite{Object_Dir}\n attribute does not need to be specified because it will never be\n@@ -20255,13 +20296,6 @@ or given a file name to find out its language for proper processing.\n See @ref{14b,,Naming Schemes}.\n @end quotation\n \n-@c only: PRO or GPL\n-@c \n-@c *Pretty_Printer*\n-@c   This package specifies the options used when calling the formatting tool\n-@c   *gnatpp* via the *gnat* driver. Its attributes\n-@c   **Default_Switches** and **Switches** have the same semantics as for the\n-@c   package `Builder`.\n \n @item @emph{Remote}\n \n@@ -23402,7 +23436,7 @@ where @cite{gnatclean} was invoked.\n \n @geindex Library browser\n \n-@c index: ! gnatls\n+@geindex gnatls\n \n @cite{gnatls} is a tool that outputs information about compiled\n units. It gives the relationship between objects, unit names and source\n@@ -26838,27 +26872,21 @@ some guidelines on debugging optimized code.\n @subsubsection Controlling Run-Time Checks\n \n \n-By default, GNAT generates all run-time checks, except integer overflow\n-checks, stack overflow checks, and checks for access before elaboration on\n-subprogram calls. The latter are not required in default mode, because all\n+By default, GNAT generates all run-time checks, except stack overflow\n+checks, and checks for access before elaboration on subprogram\n+calls. The latter are not required in default mode, because all\n necessary checking is done at compile time.\n \n @geindex -gnatp (gcc)\n \n @geindex -gnato (gcc)\n \n-Two gnat switches, @emph{-gnatp} and @emph{-gnato} allow this default to\n-be modified. See @ref{fe,,Run-Time Checks}.\n+The gnat switch, @emph{-gnatp} allows this default to be modified. See\n+@ref{fe,,Run-Time Checks}.\n \n Our experience is that the default is suitable for most development\n purposes.\n \n-We treat integer overflow specially because these\n-are quite expensive and in our experience are not as important as other\n-run-time checks in the development process. Note that division by zero\n-is not considered an overflow check, and divide by zero checks are\n-generated where required by default.\n-\n Elaboration checks are off by default, and also not needed by default, since\n GNAT uses a static elaboration analysis approach that avoids the need for\n run-time checking. This manual contains a full chapter discussing the issue\n@@ -27415,11 +27443,9 @@ end Sum;\n \n The vectorizable operations depend on the targeted SIMD instruction set, but\n the adding and some of the multiplying operators are generally supported, as\n-well as the logical operators for modular types.  Note that, in the former\n-case, enabling overflow checks, for example with @emph{-gnato}, totally\n-disables vectorization.  The other checks are not supposed to have the same\n-definitive effect, although compiling with @emph{-gnatp} might well reveal\n-cases where some checks do thwart vectorization.\n+well as the logical operators for modular types. Note that compiling\n+with @emph{-gnatp} might well reveal cases where some checks do thwart\n+vectorization.\n \n Type conversions may also prevent vectorization if they involve semantics that\n are not directly supported by the code generator or the SIMD instruction set.\n@@ -28511,11 +28537,6 @@ If no digits follow the @emph{-gnato}, then it is equivalent to\n causing all intermediate operations to be computed using the base\n type (@cite{STRICT} mode).\n \n-In addition to setting the mode used for computation of intermediate\n-results, the @cite{-gnato} switch also enables overflow checking (which\n-is suppressed by default). It thus combines the effect of using\n-a pragma @cite{Overflow_Mode} and pragma @cite{Unsuppress}.\n-\n @node Default Settings,Implementation Notes,Specifying the Desired Mode,Overflow Check Handling in GNAT\n @anchor{gnat_ugn/gnat_and_program_execution id58}@anchor{24d}@anchor{gnat_ugn/gnat_and_program_execution default-settings}@anchor{24e}\n @subsection Default Settings"}]}