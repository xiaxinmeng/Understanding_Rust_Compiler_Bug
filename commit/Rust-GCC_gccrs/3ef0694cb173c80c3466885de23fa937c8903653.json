{"sha": "3ef0694cb173c80c3466885de23fa937c8903653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmMDY5NGNiMTczYzgwYzM0NjY4ODVkZTIzZmE5MzdjODkwMzY1Mw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2010-05-27T11:46:06Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2010-05-27T11:46:06Z"}, "message": "c-common.h (c_register_addr_space): Add prototype.\n\n\t* c-common.h (c_register_addr_space): Add prototype.\n\t(ADDR_SPACE_KEYWORD): Remove.\n\t* c-common.c (c_register_addr_space): New function.\n\t(c_addr_space_name): Reimplement.\n\t(c_common_reswords): Do not include TARGET_ADDR_SPACE_KEYWORDS.\n\n\t* config/spu/spu.h (TARGET_ADDR_SPACE_KEYWORDS): Remove.\n\t(REGISTER_TARGET_PRAGMAS): Call c_register_addr_space.\n\n\t* doc/tm.texi (Named Address Spaces): Mention c_register_addr_space.\n\tRemove TARGET_ADDR_SPACE_KEYWORDS.\n\nFrom-SVN: r159916", "tree": {"sha": "7d09050af3ae6ae27846c43f8d5696a77c6f6d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d09050af3ae6ae27846c43f8d5696a77c6f6d51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ef0694cb173c80c3466885de23fa937c8903653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef0694cb173c80c3466885de23fa937c8903653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef0694cb173c80c3466885de23fa937c8903653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef0694cb173c80c3466885de23fa937c8903653/comments", "author": null, "committer": null, "parents": [{"sha": "ade526578e2ee8bbf16574da2c99353aac71f1ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ade526578e2ee8bbf16574da2c99353aac71f1ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ade526578e2ee8bbf16574da2c99353aac71f1ec"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "b752ec0de67318d1889dbab387251666fad1e1f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ef0694cb173c80c3466885de23fa937c8903653", "patch": "@@ -1,3 +1,17 @@\n+2010-05-27  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* c-common.h (c_register_addr_space): Add prototype.\n+\t(ADDR_SPACE_KEYWORD): Remove.\n+\t* c-common.c (c_register_addr_space): New function.\n+\t(c_addr_space_name): Reimplement.\n+\t(c_common_reswords): Do not include TARGET_ADDR_SPACE_KEYWORDS.\n+\n+\t* config/spu/spu.h (TARGET_ADDR_SPACE_KEYWORDS): Remove.\n+\t(REGISTER_TARGET_PRAGMAS): Call c_register_addr_space.\n+\n+\t* doc/tm.texi (Named Address Spaces): Mention c_register_addr_space.\n+\tRemove TARGET_ADDR_SPACE_KEYWORDS.\n+\n 2010-05-27  Joseph Myers  <joseph@codesourcery.com>\n \n \t* input.c: New file."}, {"sha": "b8390304a83831032536cc90e13647c60751d826", "filename": "gcc/c-common.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3ef0694cb173c80c3466885de23fa937c8903653", "patch": "@@ -718,11 +718,6 @@ const struct c_common_resword c_common_reswords[] =\n   { \"inout\",\t\tRID_INOUT,\t\tD_OBJC },\n   { \"oneway\",\t\tRID_ONEWAY,\t\tD_OBJC },\n   { \"out\",\t\tRID_OUT,\t\tD_OBJC },\n-\n-#ifdef TARGET_ADDR_SPACE_KEYWORDS\n-  /* Any address space keywords recognized by the target.  */\n-  TARGET_ADDR_SPACE_KEYWORDS,\n-#endif\n };\n \n const unsigned int num_c_common_reswords =\n@@ -857,17 +852,34 @@ const struct attribute_spec c_common_format_attribute_table[] =\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n+\n+/* Register reserved keyword WORD as qualifier for address space AS.  */\n+\n+void\n+c_register_addr_space (const char *word, addr_space_t as)\n+{\n+  int rid = RID_FIRST_ADDR_SPACE + as;\n+  tree id;\n+\n+  /* Address space qualifiers are only supported\n+     in C with GNU extensions enabled.  */\n+  if (c_dialect_cxx () || c_dialect_objc () || flag_no_asm)\n+    return;\n+\n+  id = get_identifier (word);\n+  C_SET_RID_CODE (id, rid);\n+  C_IS_RESERVED_WORD (id) = 1;\n+  ridpointers [rid] = id;\n+}\n+\n /* Return identifier for address space AS.  */\n+\n const char *\n c_addr_space_name (addr_space_t as)\n {\n-  unsigned int i;\n-\n-  for (i = 0; i < num_c_common_reswords; i++)\n-    if (c_common_reswords[i].rid == RID_FIRST_ADDR_SPACE + as)\n-      return c_common_reswords[i].word;\n-\n-  gcc_unreachable ();\n+  int rid = RID_FIRST_ADDR_SPACE + as;\n+  gcc_assert (ridpointers [rid]);\n+  return IDENTIFIER_POINTER (ridpointers [rid]);\n }\n \n /* Push current bindings for the function name VAR_DECLS.  */"}, {"sha": "039edbee97441ff899a06af09aef85f820382ab3", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3ef0694cb173c80c3466885de23fa937c8903653", "patch": "@@ -288,10 +288,6 @@ struct c_common_resword\n #define D_CXX_OBJC\t0x100\t/* In Objective C, and C++, but not C.  */\n #define D_CXXWARN\t0x200\t/* In C warn with -Wcxx-compat.  */\n \n-/* Macro for backends to define named address keywords.  */\n-#define ADDR_SPACE_KEYWORD(STRING, VALUE) \\\n-  { STRING, RID_FIRST_ADDR_SPACE + (VALUE), D_CONLY | D_EXT }\n-\n /* The reserved keyword table.  */\n extern const struct c_common_resword c_common_reswords[];\n \n@@ -803,6 +799,7 @@ extern const struct attribute_spec c_common_format_attribute_table[];\n \n extern tree (*make_fname_decl) (location_t, tree, int);\n \n+extern void c_register_addr_space (const char *str, addr_space_t as);\n extern const char *c_addr_space_name (addr_space_t as);\n extern tree identifier_global_value (tree);\n extern void record_builtin_type (enum rid, const char *, tree);"}, {"sha": "c8b0e121038ed86bb042d95764bfe67e91d4a76a", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=3ef0694cb173c80c3466885de23fa937c8903653", "patch": "@@ -245,6 +245,7 @@ enum reg_class {\n \t && GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \n #define REGISTER_TARGET_PRAGMAS() do {\t\t\t\t\t\\\n+c_register_addr_space (\"__ea\", ADDR_SPACE_EA);\t\t\t\t\\\n targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n }while (0);\n \n@@ -608,9 +609,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n /* Address spaces.  */\n #define ADDR_SPACE_EA\t1\n \n-/* Named address space keywords.  */\n-#define TARGET_ADDR_SPACE_KEYWORDS ADDR_SPACE_KEYWORD (\"__ea\", ADDR_SPACE_EA)\n-\n \n /* Builtins.  */\n "}, {"sha": "de56de69b6c7d7d64b43e15200bdca7b0404c5b5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef0694cb173c80c3466885de23fa937c8903653/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3ef0694cb173c80c3466885de23fa937c8903653", "patch": "@@ -9966,17 +9966,14 @@ Internally, address spaces are represented as a small integer in the\n range 0 to 15 with address space 0 being reserved for the generic\n address space.\n \n-@defmac TARGET_ADDR_SPACE_KEYWORDS\n-A list of @code{ADDR_SPACE_KEYWORD} macros to define each named\n-address keyword.  The @code{ADDR_SPACE_KEYWORD} macro takes two\n-arguments, the keyword string and the number of the named address\n-space.  For example, the SPU port uses the following to declare\n-@code{__ea} as the keyword for named address space #1:\n+To register a named address space qualifier keyword with the C front end,\n+the target may call the @code{c_register_addr_space} routine.  For example,\n+the SPU port uses the following to declare @code{__ea} as the keyword for\n+named address space #1:\n @smallexample\n #define ADDR_SPACE_EA 1\n-#define TARGET_ADDR_SPACE_KEYWORDS ADDR_SPACE_KEYWORD (\"__ea\", ADDR_SPACE_EA)\n+c_register_addr_space (\"__ea\", ADDR_SPACE_EA);\n @end smallexample\n-@end defmac\n \n @deftypefn {Target Hook} {enum machine_mode} TARGET_ADDR_SPACE_POINTER_MODE (addr_space_t @var{address_space})\n Define this to return the machine mode to use for pointers to"}]}