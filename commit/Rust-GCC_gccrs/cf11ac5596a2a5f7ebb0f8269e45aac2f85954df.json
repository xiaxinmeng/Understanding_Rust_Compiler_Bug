{"sha": "cf11ac5596a2a5f7ebb0f8269e45aac2f85954df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YxMWFjNTU5NmEyYTVmN2ViYjBmODI2OWU0NWFhYzJmODU5NTRkZg==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "2002-01-12T01:43:51Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2002-01-12T01:43:51Z"}, "message": "global.c (find_reg): Check for HARD_REGNO_CALL_PART_CLOBBERED every where we allocate a register.\n\n\t* global.c (find_reg): Check for HARD_REGNO_CALL_PART_CLOBBERED\n\tevery where we allocate a register.\n\nFrom-SVN: r48791", "tree": {"sha": "17b74d6c0d2b8115708bd51066642a01bb9cafd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17b74d6c0d2b8115708bd51066642a01bb9cafd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf11ac5596a2a5f7ebb0f8269e45aac2f85954df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf11ac5596a2a5f7ebb0f8269e45aac2f85954df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf11ac5596a2a5f7ebb0f8269e45aac2f85954df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf11ac5596a2a5f7ebb0f8269e45aac2f85954df/comments", "author": null, "committer": null, "parents": [{"sha": "41fcea287cbf2b275470524cbf8fdd82bb071c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fcea287cbf2b275470524cbf8fdd82bb071c48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fcea287cbf2b275470524cbf8fdd82bb071c48"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "0046e6ecfd4ab56b724713254f40bf0d95783dff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf11ac5596a2a5f7ebb0f8269e45aac2f85954df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf11ac5596a2a5f7ebb0f8269e45aac2f85954df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf11ac5596a2a5f7ebb0f8269e45aac2f85954df", "patch": "@@ -1,3 +1,8 @@\n+2002-01-12  Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+\t* global.c (find_reg): Check for HARD_REGNO_CALL_PART_CLOBBERED\n+\tevery where we allocate a register.\n+\n 2002-01-12  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* gcse.c (compute_pre_data, pre_gcse): Use sbitmap_free."}, {"sha": "0d9618c27b72c73337ce91ace05b7ea407012896", "filename": "gcc/global.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf11ac5596a2a5f7ebb0f8269e45aac2f85954df/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf11ac5596a2a5f7ebb0f8269e45aac2f85954df/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=cf11ac5596a2a5f7ebb0f8269e45aac2f85954df", "patch": "@@ -1086,6 +1086,9 @@ find_reg (num, losers, alt_regs_p, accept_call_clobbered, retrying)\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \tif (TEST_HARD_REG_BIT (allocno[num].hard_reg_copy_preferences, i)\n \t    && HARD_REGNO_MODE_OK (i, mode)\n+\t    && (allocno[num].calls_crossed == 0\n+\t\t|| accept_call_clobbered\n+\t\t|| ! HARD_REGNO_CALL_PART_CLOBBERED (i, mode))\n \t    && (REGNO_REG_CLASS (i) == REGNO_REG_CLASS (best_reg)\n \t\t|| reg_class_subset_p (REGNO_REG_CLASS (i),\n \t\t\t\t       REGNO_REG_CLASS (best_reg))\n@@ -1122,6 +1125,9 @@ find_reg (num, losers, alt_regs_p, accept_call_clobbered, retrying)\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \tif (TEST_HARD_REG_BIT (allocno[num].hard_reg_preferences, i)\n \t    && HARD_REGNO_MODE_OK (i, mode)\n+\t    && (allocno[num].calls_crossed == 0\n+\t\t|| accept_call_clobbered\n+\t\t|| ! HARD_REGNO_CALL_PART_CLOBBERED (i, mode))\n \t    && (REGNO_REG_CLASS (i) == REGNO_REG_CLASS (best_reg)\n \t\t|| reg_class_subset_p (REGNO_REG_CLASS (i),\n \t\t\t\t       REGNO_REG_CLASS (best_reg))\n@@ -1202,6 +1208,9 @@ find_reg (num, losers, alt_regs_p, accept_call_clobbered, retrying)\n \t      /* Don't use a reg no good for this pseudo.  */\n \t      && ! TEST_HARD_REG_BIT (used2, regno)\n \t      && HARD_REGNO_MODE_OK (regno, mode)\n+\t      && (allocno[num].calls_crossed == 0\n+\t\t  || accept_call_clobbered\n+\t\t  || ! HARD_REGNO_CALL_PART_CLOBBERED (regno, mode))\n #ifdef CLASS_CANNOT_CHANGE_MODE\n \t      && ! (REG_CHANGES_MODE (allocno[num].reg)\n \t\t    && (TEST_HARD_REG_BIT"}]}