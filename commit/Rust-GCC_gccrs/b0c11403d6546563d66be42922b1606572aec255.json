{"sha": "b0c11403d6546563d66be42922b1606572aec255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjMTE0MDNkNjU0NjU2M2Q2NmJlNDI5MjJiMTYwNjU3MmFlYzI1NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-06-23T21:30:20Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-06-23T21:30:20Z"}, "message": "re PR middle-end/48770 (wrong code with -O -fprofile-arcs -fPIC -fno-dce -fno-forward-propagate -fno-tree-forwprop)\n\n\n\tPR middle-end/48770\n\t* reload.h (reload): Change to return a bool.\n\t* ira.c (ira): If requested by reload, run a fast DCE pass after\n\treload has completed.  Fix comment typo.\n\t* reload1.c (need_dce): New file scoped static.\n\t(reload): Set reload_completed here.  Return whether or not a DCE\n\tpass after reload is needed.\n\t(delete_dead_insn): Set need_dce as needed.\n\n\tPR middle-end/48770\n\t* gcc.dg/pr48770.c: New test.\n\nFrom-SVN: r175353", "tree": {"sha": "ec001f94b4dc1405030f08d6e85ac05f217a3e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec001f94b4dc1405030f08d6e85ac05f217a3e9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c11403d6546563d66be42922b1606572aec255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c11403d6546563d66be42922b1606572aec255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c11403d6546563d66be42922b1606572aec255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c11403d6546563d66be42922b1606572aec255/comments", "author": null, "committer": null, "parents": [{"sha": "49e9c661145c32c17dff2c364de890c0ca46225e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e9c661145c32c17dff2c364de890c0ca46225e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e9c661145c32c17dff2c364de890c0ca46225e"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "6c6617b3c8f1ed8d621e483a290774adec5dc95d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c11403d6546563d66be42922b1606572aec255/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c11403d6546563d66be42922b1606572aec255/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0c11403d6546563d66be42922b1606572aec255", "patch": "@@ -1,5 +1,14 @@\n 2011-06-23  Jeff Law  <law@redhat.com>\n \n+\tPR middle-end/48770\n+\t* reload.h (reload): Change to return a bool.\n+\t* ira.c (ira): If requested by reload, run a fast DCE pass after\n+\treload has completed.  Fix comment typo.\n+\t* reload1.c (need_dce): New file scoped static.\n+\t(reload): Set reload_completed here.  Return whether or not a DCE\n+\tpass after reload is needed.\n+\t(delete_dead_insn): Set need_dce as needed.\n+\n \tPR middle-end/49465\n \t* tree-ssa-threadupate.c (fix_duplicate_block_edges): Fix condition\n \tto detect threading through joiner block.  If there was already"}, {"sha": "6cca90807dfbe32a6cba3c9d480118f2a36e76ea", "filename": "gcc/ira.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c11403d6546563d66be42922b1606572aec255/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c11403d6546563d66be42922b1606572aec255/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=b0c11403d6546563d66be42922b1606572aec255", "patch": "@@ -383,6 +383,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"integrate.h\"\n #include \"ggc.h\"\n #include \"ira-int.h\"\n+#include \"dce.h\"\n \n \n struct target_ira default_target_ira;\n@@ -3526,6 +3527,7 @@ ira (FILE *f)\n   int rebuild_p;\n   int saved_flag_ira_share_spill_slots;\n   basic_block bb;\n+  bool need_dce;\n \n   timevar_push (TV_IRA);\n \n@@ -3717,7 +3719,7 @@ ira (FILE *f)\n   df_set_flags (DF_NO_INSN_RESCAN);\n   build_insn_chain ();\n \n-  reload_completed = !reload (get_insns (), ira_conflicts_p);\n+  need_dce = reload (get_insns (), ira_conflicts_p);\n \n   timevar_pop (TV_RELOAD);\n \n@@ -3760,7 +3762,7 @@ ira (FILE *f)\n #endif\n \n   /* The code after the reload has changed so much that at this point\n-     we might as well just rescan everything.  Not that\n+     we might as well just rescan everything.  Note that\n      df_rescan_all_insns is not going to help here because it does not\n      touch the artificial uses and defs.  */\n   df_finish_pass (true);\n@@ -3772,6 +3774,9 @@ ira (FILE *f)\n   if (optimize)\n     df_analyze ();\n \n+  if (need_dce && optimize)\n+    run_fast_dce ();\n+\n   timevar_pop (TV_IRA);\n }\n "}, {"sha": "ad0cfcd82d8de59393a5014238cc03b2ce07ee23", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c11403d6546563d66be42922b1606572aec255/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c11403d6546563d66be42922b1606572aec255/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=b0c11403d6546563d66be42922b1606572aec255", "patch": "@@ -420,7 +420,7 @@ extern void reload_cse_regs (rtx);\n extern void init_reload (void);\n \n /* The reload pass itself.  */\n-extern int reload (rtx, int);\n+extern bool reload (rtx, int);\n \n /* Mark the slots in regs_ever_live for the hard regs\n    used by pseudo-reg number REGNO.  */"}, {"sha": "a9aa01723eee60447efb5fca6de678c290b88dd5", "filename": "gcc/reload1.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c11403d6546563d66be42922b1606572aec255/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c11403d6546563d66be42922b1606572aec255/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b0c11403d6546563d66be42922b1606572aec255", "patch": "@@ -250,6 +250,10 @@ static char *reload_insn_firstobj;\n    examine.  */\n struct insn_chain *reload_insn_chain;\n \n+/* TRUE if we potentially left dead insns in the insn stream and want to\n+   run DCE immediately after reload, FALSE otherwise.  */\n+static bool need_dce;\n+\n /* List of all insns needing reloads.  */\n static struct insn_chain *insns_need_reload;\n \f\n@@ -695,10 +699,11 @@ static int *temp_pseudo_reg_arr;\n    If GLOBAL is zero, we do not have enough information to do that,\n    so any pseudo reg that is spilled must go to the stack.\n \n-   Return value is nonzero if reload failed\n-   and we must not do any more for this function.  */\n+   Return value is TRUE if reload likely left dead insns in the\n+   stream and a DCE pass should be run to elimiante them.  Else the\n+   return value is FALSE.  */\n \n-int\n+bool\n reload (rtx first, int global)\n {\n   int i, n;\n@@ -1329,7 +1334,9 @@ reload (rtx first, int global)\n \n   gcc_assert (bitmap_empty_p (&spilled_pseudos));\n \n-  return failure;\n+  reload_completed = !failure;\n+\n+  return need_dce;\n }\n \n /* Yet another special case.  Unfortunately, reg-stack forces people to\n@@ -2123,14 +2130,19 @@ delete_dead_insn (rtx insn)\n   rtx prev = prev_active_insn (insn);\n   rtx prev_dest;\n \n-  /* If the previous insn sets a register that dies in our insn, delete it\n-     too.  */\n+  /* If the previous insn sets a register that dies in our insn make\n+     a note that we want to run DCE immediately after reload.\n+\n+     We used to delete the previous insn & recurse, but that's wrong for\n+     block local equivalences.  Instead of trying to figure out the exact\n+     circumstances where we can delete the potentially dead insns, just\n+     let DCE do the job.  */\n   if (prev && GET_CODE (PATTERN (prev)) == SET\n       && (prev_dest = SET_DEST (PATTERN (prev)), REG_P (prev_dest))\n       && reg_mentioned_p (prev_dest, PATTERN (insn))\n       && find_regno_note (insn, REG_DEAD, REGNO (prev_dest))\n       && ! side_effects_p (SET_SRC (PATTERN (prev))))\n-    delete_dead_insn (prev);\n+    need_dce = 1;\n \n   SET_INSN_DELETED (insn);\n }"}, {"sha": "c3e0f0e3ba858d6f154915699f9b0c64b389e313", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c11403d6546563d66be42922b1606572aec255/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c11403d6546563d66be42922b1606572aec255/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0c11403d6546563d66be42922b1606572aec255", "patch": "@@ -1,3 +1,8 @@\n+2011-06-23  Jeff Law <law@redhat.com>\n+\n+\tPR middle-end/48770\n+\t* gcc.dg/pr48770.c: New test.\n+\n 2011-06-23  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/49373"}, {"sha": "d0b855422d8ed71db5116874ebd5b3644b5c91b1", "filename": "gcc/testsuite/gcc.dg/pr48770.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c11403d6546563d66be42922b1606572aec255/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48770.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c11403d6546563d66be42922b1606572aec255/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48770.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48770.c?ref=b0c11403d6546563d66be42922b1606572aec255", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -fprofile-arcs -fPIC -fno-dce -fno-forward-propagate\" } */\n+\n+int test_goto2 (int f)\n+{\n+  int i;\n+  for (i = 0; ({_Bool a = i < 10;a;}); i++)\n+  {\n+    if (i == f)\n+      goto lab2;\n+  }\n+  return 4;\n+lab2:\n+  return 8;\n+}\n+\n+int main ()\n+{\n+  test_goto2 (30);\n+  return 0;\n+}"}]}