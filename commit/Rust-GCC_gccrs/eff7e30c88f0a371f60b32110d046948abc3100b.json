{"sha": "eff7e30c88f0a371f60b32110d046948abc3100b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmN2UzMGM4OGYwYTM3MWY2MGIzMjExMGQwNDY5NDhhYmMzMTAwYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2010-06-15T12:22:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-15T12:22:09Z"}, "message": "c-ada-spec.c (dump_sloc): Remove column info.\n\n\t* c-ada-spec.c (dump_sloc): Remove column info.\n\t(is_simple_enum): New function.\n\t(dump_generic_ada_node, print_ada_declaration): Map C enum types to Ada\n\tenum types when relevant.\n\nFrom-SVN: r160782", "tree": {"sha": "186a4571fe8d0449e1616fe71b67b8e1be37fbf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/186a4571fe8d0449e1616fe71b67b8e1be37fbf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff7e30c88f0a371f60b32110d046948abc3100b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff7e30c88f0a371f60b32110d046948abc3100b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff7e30c88f0a371f60b32110d046948abc3100b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff7e30c88f0a371f60b32110d046948abc3100b/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15bbc165ea9c053622433bde67180f3648651640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15bbc165ea9c053622433bde67180f3648651640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15bbc165ea9c053622433bde67180f3648651640"}], "stats": {"total": 111, "additions": 90, "deletions": 21}, "files": [{"sha": "41b73b8956a22ad603e314d59176157536d72a48", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff7e30c88f0a371f60b32110d046948abc3100b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff7e30c88f0a371f60b32110d046948abc3100b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=eff7e30c88f0a371f60b32110d046948abc3100b", "patch": "@@ -1,3 +1,10 @@\n+2010-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* c-ada-spec.c (dump_sloc): Remove column info.\n+\t(is_simple_enum): New function.\n+\t(dump_generic_ada_node, print_ada_declaration): Map C enum types to Ada\n+\tenum types when relevant.\n+\n 2010-06-11  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n         * c-common.c (conversion_warning): Warn at expression"}, {"sha": "8e914866696e79ae1978d589fd518baf626248aa", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 83, "deletions": 21, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff7e30c88f0a371f60b32110d046948abc3100b/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff7e30c88f0a371f60b32110d046948abc3100b/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=eff7e30c88f0a371f60b32110d046948abc3100b", "patch": "@@ -1549,7 +1549,7 @@ dump_ada_array_domains (pretty_printer *buffer, tree node, int spc)\n   pp_character (buffer, ')');\n }\n \n-/* Dump in BUFFER file:line:col information related to NODE.  */\n+/* Dump in BUFFER file:line information related to NODE.  */\n \n static void\n dump_sloc (pretty_printer *buffer, tree node)\n@@ -1568,8 +1568,6 @@ dump_sloc (pretty_printer *buffer, tree node)\n       pp_string (buffer, xloc.file);\n       pp_string (buffer, \":\");\n       pp_decimal_int (buffer, xloc.line);\n-      pp_string (buffer, \":\");\n-      pp_decimal_int (buffer, xloc.column);\n     }\n }\n \n@@ -1721,6 +1719,33 @@ dump_ada_template (pretty_printer *buffer, tree t,\n   return num_inst > 0;\n }\n \n+/* Return true if NODE is a simple enum types, that can be mapped to an\n+   Ada enum type directly.  */\n+\n+static bool\n+is_simple_enum (tree node)\n+{\n+  unsigned HOST_WIDE_INT count = 0;\n+  tree value;\n+\n+  for (value = TYPE_VALUES (node); value; value = TREE_CHAIN (value))\n+    {\n+      tree int_val = TREE_VALUE (value);\n+\n+      if (TREE_CODE (int_val) != INTEGER_CST)\n+\tint_val = DECL_INITIAL (int_val);\n+\n+      if (!host_integerp (int_val, 0))\n+\treturn false;\n+      else if (TREE_INT_CST_LOW (int_val) != count)\n+\treturn false;\n+\n+      count++;\n+    }\n+\n+  return true;\n+}\n+\n static bool in_function = true;\n static bool bitfield_used = false;\n \n@@ -1785,30 +1810,59 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type,\n \t  (buffer, TYPE_NAME (node), node, cpp_check, spc, 0, true);\n       else\n \t{\n-\t  tree value;\n-\n-\t  pp_string (buffer, \"unsigned\");\n+\t  tree value = TYPE_VALUES (node);\n \n-\t  for (value = TYPE_VALUES (node); value; value = TREE_CHAIN (value))\n+\t  if (is_simple_enum (node))\n \t    {\n-\t      pp_semicolon (buffer);\n-\t      newline_and_indent (buffer, spc);\n-\n-\t      pp_ada_tree_identifier\n-\t\t(buffer, TREE_PURPOSE (value), node, false);\n-\t      pp_string (buffer, \" : constant \");\n+\t      bool first = true;\n+\t      spc += INDENT_INCR;\n+\t      newline_and_indent (buffer, spc - 1);\n+\t      pp_string (buffer, \"(\");\n+\t      for (; value; value = TREE_CHAIN (value))\n+\t\t{\n+\t\t  if (first)\n+\t\t    first = false;\n+\t\t  else\n+\t\t    {\n+\t\t      pp_string (buffer, \",\");\n+\t\t      newline_and_indent (buffer, spc);\n+\t\t    }\n \n+\t\t  pp_ada_tree_identifier\n+\t\t    (buffer, TREE_PURPOSE (value), node, false);\n+\t\t}\n+\t      pp_string (buffer, \");\");\n+\t      spc -= INDENT_INCR;\n+\t      newline_and_indent (buffer, spc);\n+\t      pp_string (buffer, \"pragma Convention (C, \");\n \t      dump_generic_ada_node\n \t\t(buffer, DECL_NAME (type) ? type : TYPE_NAME (node), type,\n \t\t cpp_check, spc, 0, true);\n+\t      pp_string (buffer, \")\");\n+\t    }\n+\t  else\n+\t    {\n+\t      pp_string (buffer, \"unsigned\");\n+\t      for (; value; value = TREE_CHAIN (value))\n+\t\t{\n+\t\t  pp_semicolon (buffer);\n+\t\t  newline_and_indent (buffer, spc);\n \n-\t      pp_string (buffer, \" := \");\n-\t      dump_generic_ada_node\n-\t\t(buffer,\n-\t\t TREE_CODE (TREE_VALUE (value)) == INTEGER_CST ?\n-\t\t   TREE_VALUE (value) : DECL_INITIAL (TREE_VALUE (value)),\n-\t\t node,\n-\t\t cpp_check, spc, false, true);\n+\t\t  pp_ada_tree_identifier\n+\t\t    (buffer, TREE_PURPOSE (value), node, false);\n+\t\t  pp_string (buffer, \" : constant \");\n+\n+\t\t  dump_generic_ada_node\n+\t\t    (buffer, DECL_NAME (type) ? type : TYPE_NAME (node), type,\n+\t\t     cpp_check, spc, 0, true);\n+\n+\t\t  pp_string (buffer, \" := \");\n+\t\t  dump_generic_ada_node\n+\t\t    (buffer,\n+\t\t     TREE_CODE (TREE_VALUE (value)) == INTEGER_CST ?\n+\t\t       TREE_VALUE (value) : DECL_INITIAL (TREE_VALUE (value)),\n+\t\t     node, cpp_check, spc, false, true);\n+\t\t}\n \t    }\n \t}\n       break;\n@@ -2078,7 +2132,7 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type,\n \t  pp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n \t  pp_string (buffer, \"B\"); /* pseudo-unit */\n \t}\n-      else if (! host_integerp (node, 0))\n+      else if (!host_integerp (node, 0))\n \t{\n \t  tree val = node;\n \t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (val);\n@@ -2575,6 +2629,14 @@ print_ada_declaration (pretty_printer *buffer, tree t, tree type,\n \t    return 1;\n \t    break;\n \n+\t  case ENUMERAL_TYPE:\n+\t    if ((orig && TYPE_NAME (orig) && orig != TREE_TYPE (t))\n+\t\t|| !is_simple_enum (TREE_TYPE (t)))\n+\t      pp_string (buffer, \"subtype \");\n+\t    else\n+\t      pp_string (buffer, \"type \");\n+\t    break;\n+\n \t  default:\n \t    pp_string (buffer, \"subtype \");\n \t}"}]}