{"sha": "3bbfa29694126e0745fbe241ed4be97fa324a98f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiZmEyOTY5NDEyNmUwNzQ1ZmJlMjQxZWQ0YmU5N2ZhMzI0YTk4Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-20T02:19:04Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-20T02:19:04Z"}, "message": "(set_float_handler): Set up signal catcher on first call in case a\nfront end has disabled it.\n\nFrom-SVN: r13534", "tree": {"sha": "3df9dc9f9fefbad7fb5874149c15703477ad2dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3df9dc9f9fefbad7fb5874149c15703477ad2dce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bbfa29694126e0745fbe241ed4be97fa324a98f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbfa29694126e0745fbe241ed4be97fa324a98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bbfa29694126e0745fbe241ed4be97fa324a98f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbfa29694126e0745fbe241ed4be97fa324a98f/comments", "author": null, "committer": null, "parents": [{"sha": "299b54ba04836b48d2e8c599a84b8be74f70510f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299b54ba04836b48d2e8c599a84b8be74f70510f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299b54ba04836b48d2e8c599a84b8be74f70510f"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "1828ecb3ad178e00c3feeabd59c476ae6a7758e8", "filename": "gcc/toplev.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbfa29694126e0745fbe241ed4be97fa324a98f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbfa29694126e0745fbe241ed4be97fa324a98f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=3bbfa29694126e0745fbe241ed4be97fa324a98f", "patch": "@@ -1870,9 +1870,27 @@ floor_log2_wide (x)\n   return log;\n }\n \n+static int float_handler_set;\n int float_handled;\n jmp_buf float_handler;\n \n+/* Signals actually come here.  */\n+\n+static void\n+float_signal (signo)\n+     /* If this is missing, some compilers complain.  */\n+     int signo;\n+{\n+  if (float_handled == 0)\n+    abort ();\n+#if defined (USG) || defined (hpux)\n+  signal (SIGFPE, float_signal);  /* re-enable the signal catcher */\n+#endif\n+  float_handled = 0;\n+  signal (SIGFPE, float_signal);\n+  longjmp (float_handler, 1);\n+}\n+\n /* Specify where to longjmp to when a floating arithmetic error happens.\n    If HANDLER is 0, it means don't handle the errors any more.  */\n \n@@ -1883,6 +1901,12 @@ set_float_handler (handler)\n   float_handled = (handler != 0);\n   if (handler)\n     bcopy ((char *) handler, (char *) float_handler, sizeof (float_handler));\n+\n+  if (float_handled && ! float_handler_set)\n+    {\n+      signal (SIGFPE, float_signal);\n+      float_handler_set = 1;\n+    }\n }\n \n /* Specify, in HANDLER, where to longjmp to when a floating arithmetic\n@@ -1917,23 +1941,6 @@ pop_float_handler (handled, handler)\n     bcopy ((char *) handler, (char *) float_handler, sizeof (float_handler));\n }\n \n-/* Signals actually come here.  */\n-\n-static void\n-float_signal (signo)\n-     /* If this is missing, some compilers complain.  */\n-     int signo;\n-{\n-  if (float_handled == 0)\n-    abort ();\n-#if defined (USG) || defined (hpux)\n-  signal (SIGFPE, float_signal);  /* re-enable the signal catcher */\n-#endif\n-  float_handled = 0;\n-  signal (SIGFPE, float_signal);\n-  longjmp (float_handler, 1);\n-}\n-\n /* Handler for SIGPIPE.  */\n \n static void"}]}