{"sha": "3b834a2e0161ace8a7b494dfc6794d61ba200706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4MzRhMmUwMTYxYWNlOGE3YjQ5NGRmYzY3OTRkNjFiYTIwMDcwNg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2016-10-19T10:48:46Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2016-10-19T10:48:46Z"}, "message": "[PR lto/77458] Avoid ICE in offloading with differing _FloatN, _FloatNx types\n\n\tgcc/\n\tPR lto/77458\n\t* tree-core.h (enum tree_index): Put the complex types after their\n\tcomponent types.\n\t* tree-streamer.c (verify_common_node_recorded): New function.\n\t(preload_common_nodes) <TREE_CODE (node) == COMPLEX_TYPE>: Use it.\n\nFrom-SVN: r241338", "tree": {"sha": "cac09dcff81f9e30d164873c8d71e870e48397c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cac09dcff81f9e30d164873c8d71e870e48397c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b834a2e0161ace8a7b494dfc6794d61ba200706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b834a2e0161ace8a7b494dfc6794d61ba200706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b834a2e0161ace8a7b494dfc6794d61ba200706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b834a2e0161ace8a7b494dfc6794d61ba200706/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aff98801acf8f627d317c1f30cd6f59af55dbf79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff98801acf8f627d317c1f30cd6f59af55dbf79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff98801acf8f627d317c1f30cd6f59af55dbf79"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "b50e2e4004e7e01a904df1b960cbba5cc8513458", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b834a2e0161ace8a7b494dfc6794d61ba200706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b834a2e0161ace8a7b494dfc6794d61ba200706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b834a2e0161ace8a7b494dfc6794d61ba200706", "patch": "@@ -1,3 +1,11 @@\n+2016-10-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR lto/77458\n+\t* tree-core.h (enum tree_index): Put the complex types after their\n+\tcomponent types.\n+\t* tree-streamer.c (verify_common_node_recorded): New function.\n+\t(preload_common_nodes) <TREE_CODE (node) == COMPLEX_TYPE>: Use it.\n+\n 2016-10-19  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.h (cgraph_edge::binds_to_current_def_p):"}, {"sha": "3e3f31e272649a34f70d3d121b553062e859f458", "filename": "gcc/tree-core.h", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b834a2e0161ace8a7b494dfc6794d61ba200706/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b834a2e0161ace8a7b494dfc6794d61ba200706/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=3b834a2e0161ace8a7b494dfc6794d61ba200706", "patch": "@@ -556,20 +556,6 @@ enum tree_index {\n   TI_BOOLEAN_FALSE,\n   TI_BOOLEAN_TRUE,\n \n-  TI_COMPLEX_INTEGER_TYPE,\n-  TI_COMPLEX_FLOAT_TYPE,\n-  TI_COMPLEX_DOUBLE_TYPE,\n-  TI_COMPLEX_LONG_DOUBLE_TYPE,\n-\n-  TI_COMPLEX_FLOAT16_TYPE,\n-  TI_COMPLEX_FLOATN_NX_TYPE_FIRST = TI_COMPLEX_FLOAT16_TYPE,\n-  TI_COMPLEX_FLOAT32_TYPE,\n-  TI_COMPLEX_FLOAT64_TYPE,\n-  TI_COMPLEX_FLOAT128_TYPE,\n-  TI_COMPLEX_FLOAT32X_TYPE,\n-  TI_COMPLEX_FLOAT64X_TYPE,\n-  TI_COMPLEX_FLOAT128X_TYPE,\n-\n   TI_FLOAT_TYPE,\n   TI_DOUBLE_TYPE,\n   TI_LONG_DOUBLE_TYPE,\n@@ -599,6 +585,23 @@ enum tree_index {\n \t\t\t     - TI_FLOATN_NX_TYPE_FIRST\t\t\\\n \t\t\t     + 1)\n \n+  /* Put the complex types after their component types, so that in (sequential)\n+     tree streaming we can assert that their component types have already been\n+     handled (see tree-streamer.c:record_common_node).  */\n+  TI_COMPLEX_INTEGER_TYPE,\n+  TI_COMPLEX_FLOAT_TYPE,\n+  TI_COMPLEX_DOUBLE_TYPE,\n+  TI_COMPLEX_LONG_DOUBLE_TYPE,\n+\n+  TI_COMPLEX_FLOAT16_TYPE,\n+  TI_COMPLEX_FLOATN_NX_TYPE_FIRST = TI_COMPLEX_FLOAT16_TYPE,\n+  TI_COMPLEX_FLOAT32_TYPE,\n+  TI_COMPLEX_FLOAT64_TYPE,\n+  TI_COMPLEX_FLOAT128_TYPE,\n+  TI_COMPLEX_FLOAT32X_TYPE,\n+  TI_COMPLEX_FLOAT64X_TYPE,\n+  TI_COMPLEX_FLOAT128X_TYPE,\n+\n   TI_FLOAT_PTR_TYPE,\n   TI_DOUBLE_PTR_TYPE,\n   TI_LONG_DOUBLE_PTR_TYPE,"}, {"sha": "70054b1f2c171893a30f7ebae14134b9a777e744", "filename": "gcc/tree-streamer.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b834a2e0161ace8a7b494dfc6794d61ba200706/gcc%2Ftree-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b834a2e0161ace8a7b494dfc6794d61ba200706/gcc%2Ftree-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.c?ref=3b834a2e0161ace8a7b494dfc6794d61ba200706", "patch": "@@ -248,6 +248,32 @@ streamer_tree_cache_lookup (struct streamer_tree_cache_d *cache, tree t,\n }\n \n \n+/* Verify that NODE is in CACHE.  */\n+\n+static void\n+verify_common_node_recorded (struct streamer_tree_cache_d *cache, tree node)\n+{\n+  /* Restrict this to flag_checking only because in general violating it is\n+     harmless plus we never know what happens on all targets/frontend/flag(!)\n+     combinations.  */\n+  if (!flag_checking)\n+    return;\n+\n+  if (cache->node_map)\n+    gcc_assert (streamer_tree_cache_lookup (cache, node, NULL));\n+  else\n+    {\n+      bool found = false;\n+      gcc_assert (cache->nodes.exists ());\n+      /* Linear search...  */\n+      for (unsigned i = 0; !found && i < cache->nodes.length (); ++i)\n+\tif (cache->nodes[i] == node)\n+\t  found = true;\n+      gcc_assert (found);\n+    }\n+}\n+\n+\n /* Record NODE in CACHE.  */\n \n static void\n@@ -293,11 +319,15 @@ record_common_node (struct streamer_tree_cache_d *cache, tree node)\n       /* No recursive trees.  */\n       break;\n     case ARRAY_TYPE:\n-    case COMPLEX_TYPE:\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n       record_common_node (cache, TREE_TYPE (node));\n       break;\n+    case COMPLEX_TYPE:\n+      /* Verify that a complex type's component type (node_type) has been\n+\t handled already (and we thus don't need to recurse here).  */\n+      verify_common_node_recorded (cache, TREE_TYPE (node));\n+      break;\n     case RECORD_TYPE:\n       /* The FIELD_DECLs of structures should be shared, so that every\n \t COMPONENT_REF uses the same tree node when referencing a field."}]}