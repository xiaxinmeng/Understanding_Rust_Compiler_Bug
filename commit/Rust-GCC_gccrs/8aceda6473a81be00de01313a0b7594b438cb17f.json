{"sha": "8aceda6473a81be00de01313a0b7594b438cb17f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjZWRhNjQ3M2E4MWJlMDBkZTAxMzEzYTBiNzU5NGI0MzhjYjE3Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:54:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:54:15Z"}, "message": "exp_ch4.adb (Expand_Composite_Equality): If a component is an unchecked union with no inferable discriminants...\n\n\t* exp_ch4.adb (Expand_Composite_Equality): If a component is an\n\tunchecked union with no inferable discriminants, return a\n\tRaise_Program_Error node, rather than inserting it at the point the\n\ttype is frozen.\n\t(Expand_Record_Equality, Component_Equality): Handle properly the case\n\twhere some subcomponent is an unchecked union whose generated equality\n\tcode raises program error.\n\nFrom-SVN: r94814", "tree": {"sha": "96296fb7c3c197b7499a99d51ec3dcd9936c69d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96296fb7c3c197b7499a99d51ec3dcd9936c69d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aceda6473a81be00de01313a0b7594b438cb17f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aceda6473a81be00de01313a0b7594b438cb17f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aceda6473a81be00de01313a0b7594b438cb17f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aceda6473a81be00de01313a0b7594b438cb17f/comments", "author": null, "committer": null, "parents": [{"sha": "3cf3e5c6a2dcd0233ee237f291fdf9ac25052dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf3e5c6a2dcd0233ee237f291fdf9ac25052dd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf3e5c6a2dcd0233ee237f291fdf9ac25052dd5"}], "stats": {"total": 77, "additions": 45, "deletions": 32}, "files": [{"sha": "fd03a08b41129434cc3cd8de0511d6460c02a1e4", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 45, "deletions": 32, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aceda6473a81be00de01313a0b7594b438cb17f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aceda6473a81be00de01313a0b7594b438cb17f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8aceda6473a81be00de01313a0b7594b438cb17f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1063,12 +1063,20 @@ package body Exp_Ch4 is\n          Test := Expand_Composite_Equality\n                    (Nod, Component_Type (Typ), L, R, Decls);\n \n-         return\n-           Make_Implicit_If_Statement (Nod,\n-             Condition => Make_Op_Not (Loc, Right_Opnd => Test),\n-             Then_Statements => New_List (\n-               Make_Return_Statement (Loc,\n-                 Expression => New_Occurrence_Of (Standard_False, Loc))));\n+         --  If some (sub)component is an unchecked_union, the whole\n+         --  operation will raise program error.\n+\n+         if Nkind (Test) = N_Raise_Program_Error then\n+            return Test;\n+\n+         else\n+            return\n+              Make_Implicit_If_Statement (Nod,\n+                Condition => Make_Op_Not (Loc, Right_Opnd => Test),\n+                Then_Statements => New_List (\n+                  Make_Return_Statement (Loc,\n+                    Expression => New_Occurrence_Of (Standard_False, Loc))));\n+         end if;\n       end Component_Equality;\n \n       ------------------\n@@ -1650,14 +1658,9 @@ package body Exp_Ch4 is\n                         --  It is not possible to infer the discriminant since\n                         --  the subtype is not constrained.\n \n-                        Insert_Action (Nod,\n+                        return\n                           Make_Raise_Program_Error (Loc,\n-                            Reason => PE_Unchecked_Union_Restriction));\n-\n-                        --  Prevent Gigi from generating illegal code, change\n-                        --  the equality to a standard False.\n-\n-                        return New_Occurrence_Of (Standard_False, Loc);\n+                            Reason => PE_Unchecked_Union_Restriction);\n                      end if;\n \n                      --  Rhs of the composite equality\n@@ -1686,11 +1689,9 @@ package body Exp_Ch4 is\n \n                         end if;\n                      else\n-                        Insert_Action (Nod,\n+                        return\n                           Make_Raise_Program_Error (Loc,\n-                            Reason => PE_Unchecked_Union_Restriction));\n-\n-                        return Empty;\n+                            Reason => PE_Unchecked_Union_Restriction);\n                      end if;\n \n                      --  Call the TSS equality function with the inferred\n@@ -7108,6 +7109,7 @@ package body Exp_Ch4 is\n          declare\n             New_Lhs : Node_Id;\n             New_Rhs : Node_Id;\n+            Check   : Node_Id;\n \n          begin\n             if First_Time then\n@@ -7119,20 +7121,31 @@ package body Exp_Ch4 is\n                New_Rhs := New_Copy_Tree (Rhs);\n             end if;\n \n-            Result :=\n-              Make_And_Then (Loc,\n-                Left_Opnd  => Result,\n-                Right_Opnd =>\n-                  Expand_Composite_Equality (Nod, Etype (C),\n-                    Lhs =>\n-                      Make_Selected_Component (Loc,\n-                        Prefix => New_Lhs,\n-                        Selector_Name => New_Reference_To (C, Loc)),\n-                    Rhs =>\n-                      Make_Selected_Component (Loc,\n-                        Prefix => New_Rhs,\n-                        Selector_Name => New_Reference_To (C, Loc)),\n-                    Bodies => Bodies));\n+            Check :=\n+              Expand_Composite_Equality (Nod, Etype (C),\n+               Lhs =>\n+                 Make_Selected_Component (Loc,\n+                   Prefix => New_Lhs,\n+                   Selector_Name => New_Reference_To (C, Loc)),\n+               Rhs =>\n+                 Make_Selected_Component (Loc,\n+                   Prefix => New_Rhs,\n+                   Selector_Name => New_Reference_To (C, Loc)),\n+               Bodies => Bodies);\n+\n+            --  If some (sub)component is an unchecked_union, the whole\n+            --  operation will raise program error.\n+\n+            if Nkind (Check) = N_Raise_Program_Error then\n+               Result := Check;\n+               Set_Etype (Result, Standard_Boolean);\n+               exit;\n+            else\n+               Result :=\n+                 Make_And_Then (Loc,\n+                   Left_Opnd  => Result,\n+                   Right_Opnd => Check);\n+            end if;\n          end;\n \n          C := Suitable_Element (Next_Entity (C));"}]}