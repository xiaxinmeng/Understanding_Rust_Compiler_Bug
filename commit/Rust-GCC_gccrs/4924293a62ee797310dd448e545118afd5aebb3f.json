{"sha": "4924293a62ee797310dd448e545118afd5aebb3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkyNDI5M2E2MmVlNzk3MzEwZGQ0NDhlNTQ1MTE4YWZkNWFlYmIzZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-13T20:27:45Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-13T20:40:23Z"}, "message": "c++: SFINAE for invalid delete-expression [PR79706]\n\nThis fixes SFINAE when substitution yields an invalid delete-expression\ndue to the pertinent deallocation function being marked deleted or\notherwise inaccessible.\n\nWe need to check for an erroneous result from build_op_delete_call and\nexit early in that case, so that we don't build a COND_EXPR around the\nerroneous result which finish_decltype_type would then quietly accept.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/79706\n\t* init.c (build_vec_delete_1): Just return error_mark_node if\n\tdeallocate_expr is error_mark_node.\n\t(build_delete): Just return error_mark_node if do_delete is\n\terror_mark_node.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/79706\n\t* g++.dg/template/sfinae30.C: New test.", "tree": {"sha": "978ab0a2c7a24bb434902c69a12988d2b0187167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978ab0a2c7a24bb434902c69a12988d2b0187167"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4924293a62ee797310dd448e545118afd5aebb3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4924293a62ee797310dd448e545118afd5aebb3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4924293a62ee797310dd448e545118afd5aebb3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4924293a62ee797310dd448e545118afd5aebb3f/comments", "author": null, "committer": null, "parents": [{"sha": "7e52f8b1e03776575b92574252d9b6bbed9f1af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e52f8b1e03776575b92574252d9b6bbed9f1af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e52f8b1e03776575b92574252d9b6bbed9f1af4"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "a45657d09ade092ddd791a63a1881a32572ee539", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4924293a62ee797310dd448e545118afd5aebb3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4924293a62ee797310dd448e545118afd5aebb3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4924293a62ee797310dd448e545118afd5aebb3f", "patch": "@@ -1,3 +1,11 @@\n+2020-05-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/79706\n+\t* init.c (build_vec_delete_1): Just return error_mark_node if\n+\tdeallocate_expr is error_mark_node.\n+\t(build_delete): Just return error_mark_node if do_delete is\n+\terror_mark_node.\n+\n 2020-05-13  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/95020"}, {"sha": "d4c883be3136846eef4b5d6b1f2a5f8f36fcdf28", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4924293a62ee797310dd448e545118afd5aebb3f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4924293a62ee797310dd448e545118afd5aebb3f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=4924293a62ee797310dd448e545118afd5aebb3f", "patch": "@@ -4076,7 +4076,9 @@ build_vec_delete_1 (location_t loc, tree base, tree maxindex, tree type,\n     }\n \n   body = loop;\n-  if (!deallocate_expr)\n+  if (deallocate_expr == error_mark_node)\n+    return error_mark_node;\n+  else if (!deallocate_expr)\n     ;\n   else if (!body)\n     body = deallocate_expr;\n@@ -4993,7 +4995,9 @@ build_delete (location_t loc, tree otype, tree addr,\n       return expr;\n     }\n \n-  if (do_delete)\n+  if (do_delete == error_mark_node)\n+    return error_mark_node;\n+  else if (do_delete)\n     {\n       tree do_delete_call_expr = extract_call_expr (do_delete);\n       if (TREE_CODE (do_delete_call_expr) == CALL_EXPR)"}, {"sha": "858fd64d2210f712c0eb8ceb8246444faf868124", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4924293a62ee797310dd448e545118afd5aebb3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4924293a62ee797310dd448e545118afd5aebb3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4924293a62ee797310dd448e545118afd5aebb3f", "patch": "@@ -1,3 +1,8 @@\n+2020-05-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/79706\n+\t* g++.dg/template/sfinae30.C: New test.\n+\n 2020-05-13  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/95020"}, {"sha": "82f31aaa625b881445a227026a45ab9af6515f32", "filename": "gcc/testsuite/g++.dg/template/sfinae30.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4924293a62ee797310dd448e545118afd5aebb3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4924293a62ee797310dd448e545118afd5aebb3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae30.C?ref=4924293a62ee797310dd448e545118afd5aebb3f", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/79706\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  void operator delete(void*) = delete;\n+private:\n+  void operator delete[](void*);\n+};\n+\n+extern A *p;\n+\n+template<typename T>\n+auto foo(T *t) -> decltype(delete t); // { dg-error \"use of deleted function\" }\n+\n+template<typename T>\n+auto bar(T *t) -> decltype(delete[] t); // { dg-error \"private within this context\" }\n+\n+void baz() {\n+  foo<A>(p); // { dg-error \"no match\" }\n+  bar<A>(p); // { dg-error \"no match\" }\n+}"}]}