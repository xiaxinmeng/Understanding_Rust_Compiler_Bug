{"sha": "4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM1MWZmODhmMjc0OGU3ZjU5ZDY5ZDJiOTljNjc0OWY0ZWMzMDhjNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:18:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T15:18:38Z"}, "message": "[multiple changes]\n\n2014-02-25  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, einfo.adb (Has_Shift_Operator): New flag.\n\t* gnat_rm.texi: Document pragma Provide_Shift_Operators.\n\t* interfac.ads: Minor code reorganization (add pragma\n\tCompiler_Unit_Warning).\n\t* par-prag.adb: Add dummy entry for Provide_Shift_Operators.\n\t* sem_ch3.adb (Build_Derived_Numeric_Type): Copy\n\tHas_Shift_Operator flag.\n\t* sem_intr.adb (Check_Intrinsic_Subprogram): Make sure\n\tCheck_Shift is always called (Check_Shift): Set Has_Shift_Operator.\n\t* sem_prag.adb: Implement pragma Provide_Shift_Operators.\n\t* snames.ads-tmpl: Add entries for pragma Provide_Shift_Operators\n\tAdd entry for Name_Amount.\n\t* checks.adb (Selected_Range_Checks): When checking for a null\n\trange, make sure we use the base type, and not the subtype for\n\tdeciding a range is null.\n\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Check\n\tfor suspicious loop bound which is outside the range of the\n\tloop subtype.\n\t* gnat_ugn.texi: Add documentation section \"Determining the\n\tChosen Elaboration Order\"\n\t* sem_ch13.adb (UC_Entry): Add field Act_Unit\n\t(Validate_Unchecked_Conversion): Store Act_Unit\n\t(Validate_Unchecked_Conversions): Test Warnings_Off in Act_Unit\n\t* treepr.adb: Minor reformatting.\n\n2014-02-25  Arnaud Charlet  <charlet@adacore.com>\n\n\t* usage.adb: Minor: fix typo.\n\nFrom-SVN: r208138", "tree": {"sha": "a81062ae0baf3aa2bb0c6da8826d7061c88ae465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a81062ae0baf3aa2bb0c6da8826d7061c88ae465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/comments", "author": null, "committer": null, "parents": [{"sha": "0355e3ebbe09450408118b4651a9545da577eeee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0355e3ebbe09450408118b4651a9545da577eeee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0355e3ebbe09450408118b4651a9545da577eeee"}], "stats": {"total": 544, "additions": 493, "deletions": 51}, "files": [{"sha": "91cf5aeefee11117c965be7abaaf5cf005ccc1ff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -1,3 +1,34 @@\n+2014-02-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Has_Shift_Operator): New flag.\n+\t* gnat_rm.texi: Document pragma Provide_Shift_Operators.\n+\t* interfac.ads: Minor code reorganization (add pragma\n+\tCompiler_Unit_Warning).\n+\t* par-prag.adb: Add dummy entry for Provide_Shift_Operators.\n+\t* sem_ch3.adb (Build_Derived_Numeric_Type): Copy\n+\tHas_Shift_Operator flag.\n+\t* sem_intr.adb (Check_Intrinsic_Subprogram): Make sure\n+\tCheck_Shift is always called (Check_Shift): Set Has_Shift_Operator.\n+\t* sem_prag.adb: Implement pragma Provide_Shift_Operators.\n+\t* snames.ads-tmpl: Add entries for pragma Provide_Shift_Operators\n+\tAdd entry for Name_Amount.\n+\t* checks.adb (Selected_Range_Checks): When checking for a null\n+\trange, make sure we use the base type, and not the subtype for\n+\tdeciding a range is null.\n+\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Check\n+\tfor suspicious loop bound which is outside the range of the\n+\tloop subtype.\n+\t* gnat_ugn.texi: Add documentation section \"Determining the\n+\tChosen Elaboration Order\"\n+\t* sem_ch13.adb (UC_Entry): Add field Act_Unit\n+\t(Validate_Unchecked_Conversion): Store Act_Unit\n+\t(Validate_Unchecked_Conversions): Test Warnings_Off in Act_Unit\n+\t* treepr.adb: Minor reformatting.\n+\n+2014-02-25  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* usage.adb: Minor: fix typo.\n+\n 2014-02-25  Robert Dewar  <dewar@adacore.com>\n \n \t* lib.ads, s-bitops.adb, s-bitops.ads, s-conca5.adb, gnat_rm.texi,"}, {"sha": "75be5b270679989937ab59180f22c5d2d75ee1ec", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -9157,8 +9157,12 @@ package body Checks is\n                     Make_And_Then (Loc,\n                       Left_Opnd =>\n                         Make_Op_Ge (Loc,\n-                          Left_Opnd  => Duplicate_Subexpr_No_Checks (HB),\n-                          Right_Opnd => Duplicate_Subexpr_No_Checks (LB)),\n+                          Left_Opnd  =>\n+                            Convert_To (Base_Type (Etype (HB)),\n+                              Duplicate_Subexpr_No_Checks (HB)),\n+                          Right_Opnd =>\n+                            Convert_To (Base_Type (Etype (LB)),\n+                              Duplicate_Subexpr_No_Checks (LB))),\n                       Right_Opnd => Cond);\n                end;\n             end if;"}, {"sha": "076cf7bf057ed4e850e491223a6bbaccc243275c", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -557,12 +557,12 @@ package body Einfo is\n    --    Is_Discriminant_Check_Function  Flag264\n    --    SPARK_Pragma_Inherited          Flag265\n    --    SPARK_Aux_Pragma_Inherited      Flag266\n+   --    Has_Shift_Operator              Flag267\n \n    --    (unused)                        Flag1\n    --    (unused)                        Flag2\n    --    (unused)                        Flag3\n \n-   --    (unused)                        Flag267\n    --    (unused)                        Flag268\n    --    (unused)                        Flag269\n    --    (unused)                        Flag270\n@@ -1667,6 +1667,12 @@ package body Einfo is\n       return Flag143 (Id);\n    end Has_Recursive_Call;\n \n+   function Has_Shift_Operator (Id : E) return B is\n+   begin\n+      pragma Assert (Is_Integer_Type (Id));\n+      return Flag267 (Base_Type (Id));\n+   end Has_Shift_Operator;\n+\n    function Has_Size_Clause (Id : E) return B is\n    begin\n       return Flag29 (Id);\n@@ -4372,6 +4378,12 @@ package body Einfo is\n       Set_Flag143 (Id, V);\n    end Set_Has_Recursive_Call;\n \n+   procedure Set_Has_Shift_Operator (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Integer_Type (Id) and then Is_Base_Type (Id));\n+      Set_Flag267 (Id, V);\n+   end Set_Has_Shift_Operator;\n+\n    procedure Set_Has_Size_Clause (Id : E; V : B := True) is\n    begin\n       Set_Flag29 (Id, V);\n@@ -8203,6 +8215,7 @@ package body Einfo is\n       W (\"Has_RACW\",                        Flag214 (Id));\n       W (\"Has_Record_Rep_Clause\",           Flag65  (Id));\n       W (\"Has_Recursive_Call\",              Flag143 (Id));\n+      W (\"Has_Shift_Operator\",              Flag267 (Id));\n       W (\"Has_Size_Clause\",                 Flag29  (Id));\n       W (\"Has_Small_Clause\",                Flag67  (Id));\n       W (\"Has_Specified_Layout\",            Flag100 (Id));"}, {"sha": "91f59b42309a98ff72ff50e390e12f5e421aaddb", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -1826,6 +1826,10 @@ package Einfo is\n --       is detected while analyzing the body. Used to activate some error\n --       checks for infinite recursion.\n \n+--    Has_Shift_Operator (Flag267) [base type only]\n+--       Defined in integer types. Set in the base type of an integer type for\n+--       which at least one of the shift operators is defined.\n+\n --    Has_Size_Clause (Flag29)\n --       Defined in entities for types and objects. Set if a size clause is\n --       defined for the entity. Used to prevent multiple Size clauses for a\n@@ -5644,6 +5648,7 @@ package Einfo is\n    --    Static_Predicate                    (List25)\n    --    Non_Binary_Modulus                  (Flag58)   (base type only)\n    --    Has_Biased_Representation           (Flag139)\n+   --    Has_Shift_Operator                  (Flag267)  (base type only)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n    --    (plus type attributes)\n@@ -5940,6 +5945,7 @@ package Einfo is\n    --    Scalar_Range                        (Node20)\n    --    Static_Predicate                    (List25)\n    --    Has_Biased_Representation           (Flag139)\n+   --    Has_Shift_Operator                  (Flag267)  (base type only)\n    --    Type_Low_Bound                      (synth)\n    --    Type_High_Bound                     (synth)\n    --    (plus type attributes)\n@@ -6465,6 +6471,7 @@ package Einfo is\n    function Has_RACW                            (Id : E) return B;\n    function Has_Record_Rep_Clause               (Id : E) return B;\n    function Has_Recursive_Call                  (Id : E) return B;\n+   function Has_Shift_Operator                  (Id : E) return B;\n    function Has_Size_Clause                     (Id : E) return B;\n    function Has_Small_Clause                    (Id : E) return B;\n    function Has_Specified_Layout                (Id : E) return B;\n@@ -7088,6 +7095,7 @@ package Einfo is\n    procedure Set_Has_RACW                        (Id : E; V : B := True);\n    procedure Set_Has_Record_Rep_Clause           (Id : E; V : B := True);\n    procedure Set_Has_Recursive_Call              (Id : E; V : B := True);\n+   procedure Set_Has_Shift_Operator              (Id : E; V : B := True);\n    procedure Set_Has_Size_Clause                 (Id : E; V : B := True);\n    procedure Set_Has_Small_Clause                (Id : E; V : B := True);\n    procedure Set_Has_Specified_Layout            (Id : E; V : B := True);\n@@ -7825,6 +7833,7 @@ package Einfo is\n    pragma Inline (Has_RACW);\n    pragma Inline (Has_Record_Rep_Clause);\n    pragma Inline (Has_Recursive_Call);\n+   pragma Inline (Has_Shift_Operator);\n    pragma Inline (Has_Size_Clause);\n    pragma Inline (Has_Small_Clause);\n    pragma Inline (Has_Specified_Layout);\n@@ -8296,6 +8305,7 @@ package Einfo is\n    pragma Inline (Set_Has_RACW);\n    pragma Inline (Set_Has_Record_Rep_Clause);\n    pragma Inline (Set_Has_Recursive_Call);\n+   pragma Inline (Set_Has_Shift_Operator);\n    pragma Inline (Set_Has_Size_Clause);\n    pragma Inline (Set_Has_Small_Clause);\n    pragma Inline (Set_Has_Specified_Layout);"}, {"sha": "2090c62a02c37e1e59a0ef468efb68c92b70e740", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -224,6 +224,7 @@ Implementation Defined Pragmas\n * Pragma Profile::\n * Pragma Profile_Warnings::\n * Pragma Propagate_Exceptions::\n+* Pragma Provide_Shift_Operators::\n * Pragma Psect_Object::\n * Pragma Pure_05::\n * Pragma Pure_12::\n@@ -1056,6 +1057,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Profile::\n * Pragma Profile_Warnings::\n * Pragma Propagate_Exceptions::\n+* Pragma Provide_Shift_Operators::\n * Pragma Psect_Object::\n * Pragma Pure_05::\n * Pragma Pure_12::\n@@ -5852,6 +5854,25 @@ It is retained for compatibility\n purposes. It used to be used in connection with optimization of\n a now-obsolete mechanism for implementation of exceptions.\n \n+@node Pragma Provide_Shift_Operators\n+@unnumberedsec Pragma Provide_Shift_Operators\n+@cindex Shift operators\n+@findex Provide_Shift_Operators\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Provide_Shift_Operators (integer_first_subtype_LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+This pragma can be applied to a first subtype local name that specifies\n+either an unsigned or signed type. It has the effect of providing the\n+five shift operators (Shift_Left, Shift_Right, Shift_Right_Arithmetic,\n+Rotate_Left and Rotate_Right) for the given type. It is equivalent to\n+including the function declarations for these five operators, together\n+with the pragma Import (Intrinsic, ...) statements.\n+\n @node Pragma Psect_Object\n @unnumberedsec Pragma Psect_Object\n @findex Psect_Object\n@@ -13685,8 +13706,7 @@ type (signed or modular), as in this example:\n @smallexample @c ada\n    function Shift_Left\n      (Value  : T;\n-      Amount : Natural)\n-      return   T;\n+      Amount : Natural) return T;\n @end smallexample\n \n @noindent\n@@ -13699,6 +13719,10 @@ The result type must be the same as the type of @code{Value}.\n The shift amount must be Natural.\n The formal parameter names can be anything.\n \n+A more convenient way of providing these shift operators is to use\n+the Provide_Shift_Operators pragma, which provides the function declarations\n+and corresponding pragma Import's for all five shift functions.\n+\n @node Source_Location\n @section Source_Location\n @cindex Source_Location"}, {"sha": "54a0a5c01e38c0fd6c7d7a557f2f4b0faa3b44c2", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -25049,6 +25049,7 @@ elaboration code in your own application).\n * Elaboration for Dispatching Calls::\n * Summary of Procedures for Elaboration Control::\n * Other Elaboration Order Considerations::\n+* Determining the Chosen Elaboration Order::\n @end menu\n \n @noindent\n@@ -26891,6 +26892,145 @@ difference, by looking at the two elaboration orders that are chosen,\n and figuring out which is correct, and then adding the necessary\n @code{Elaborate} or @code{Elaborate_All} pragmas to ensure the desired order.\n \n+@node Determining the Chosen Elaboration Order\n+@section Determining the Chosen Elaboration Order\n+@noindent\n+\n+To see the elaboration order that the binder chooses, you can look at\n+the last part of the b~xxx.adb binder output file. Here is an example:\n+\n+@smallexample @c ada\n+System.Soft_Links'Elab_Body;\n+E14 := True;\n+System.Secondary_Stack'Elab_Body;\n+E18 := True;\n+System.Exception_Table'Elab_Body;\n+E24 := True;\n+Ada.Io_Exceptions'Elab_Spec;\n+E67 := True;\n+Ada.Tags'Elab_Spec;\n+Ada.Streams'Elab_Spec;\n+E43 := True;\n+Interfaces.C'Elab_Spec;\n+E69 := True;\n+System.Finalization_Root'Elab_Spec;\n+E60 := True;\n+System.Os_Lib'Elab_Body;\n+E71 := True;\n+System.Finalization_Implementation'Elab_Spec;\n+System.Finalization_Implementation'Elab_Body;\n+E62 := True;\n+Ada.Finalization'Elab_Spec;\n+E58 := True;\n+Ada.Finalization.List_Controller'Elab_Spec;\n+E76 := True;\n+System.File_Control_Block'Elab_Spec;\n+E74 := True;\n+System.File_Io'Elab_Body;\n+E56 := True;\n+Ada.Tags'Elab_Body;\n+E45 := True;\n+Ada.Text_Io'Elab_Spec;\n+Ada.Text_Io'Elab_Body;\n+E07 := True;\n+@end smallexample\n+\n+@noindent\n+Here Elab_Spec elaborates the spec\n+and Elab_Body elaborates the body. The assignments to the Exx flags\n+flag that the corresponding body is now elaborated.\n+\n+You can also ask the binder to generate a more\n+readable list of the elaboration order using the\n+@code{-l} switch when invoking the binder. Here is\n+an example of the output generated by this switch:\n+\n+@smallexample\n+ada (spec)\n+interfaces (spec)\n+system (spec)\n+system.case_util (spec)\n+system.case_util (body)\n+system.concat_2 (spec)\n+system.concat_2 (body)\n+system.concat_3 (spec)\n+system.concat_3 (body)\n+system.htable (spec)\n+system.parameters (spec)\n+system.parameters (body)\n+system.crtl (spec)\n+interfaces.c_streams (spec)\n+interfaces.c_streams (body)\n+system.restrictions (spec)\n+system.restrictions (body)\n+system.standard_library (spec)\n+system.exceptions (spec)\n+system.exceptions (body)\n+system.storage_elements (spec)\n+system.storage_elements (body)\n+system.secondary_stack (spec)\n+system.stack_checking (spec)\n+system.stack_checking (body)\n+system.string_hash (spec)\n+system.string_hash (body)\n+system.htable (body)\n+system.strings (spec)\n+system.strings (body)\n+system.traceback (spec)\n+system.traceback (body)\n+system.traceback_entries (spec)\n+system.traceback_entries (body)\n+ada.exceptions (spec)\n+ada.exceptions.last_chance_handler (spec)\n+system.soft_links (spec)\n+system.soft_links (body)\n+ada.exceptions.last_chance_handler (body)\n+system.secondary_stack (body)\n+system.exception_table (spec)\n+system.exception_table (body)\n+ada.io_exceptions (spec)\n+ada.tags (spec)\n+ada.streams (spec)\n+interfaces.c (spec)\n+interfaces.c (body)\n+system.finalization_root (spec)\n+system.finalization_root (body)\n+system.memory (spec)\n+system.memory (body)\n+system.standard_library (body)\n+system.os_lib (spec)\n+system.os_lib (body)\n+system.unsigned_types (spec)\n+system.stream_attributes (spec)\n+system.stream_attributes (body)\n+system.finalization_implementation (spec)\n+system.finalization_implementation (body)\n+ada.finalization (spec)\n+ada.finalization (body)\n+ada.finalization.list_controller (spec)\n+ada.finalization.list_controller (body)\n+system.file_control_block (spec)\n+system.file_io (spec)\n+system.file_io (body)\n+system.val_uns (spec)\n+system.val_util (spec)\n+system.val_util (body)\n+system.val_uns (body)\n+system.wch_con (spec)\n+system.wch_con (body)\n+system.wch_cnv (spec)\n+system.wch_jis (spec)\n+system.wch_jis (body)\n+system.wch_cnv (body)\n+system.wch_stw (spec)\n+system.wch_stw (body)\n+ada.tags (body)\n+ada.exceptions (body)\n+ada.text_io (spec)\n+ada.text_io (body)\n+text_io (spec)\n+gdbstr (body)\n+@end smallexample\n \n @c **********************************\n @node Overflow Check Handling in GNAT"}, {"sha": "fe6bb0f6deaa66b04cf89be1ae386bd30e13a712", "filename": "gcc/ada/interfac.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Finterfac.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Finterfac.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finterfac.ads?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -33,6 +33,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+pragma Compiler_Unit_Warning;\n+\n package Interfaces is\n    pragma Pure;\n "}, {"sha": "14560ea5978856057d4dd3dfac186f5dc4fb8211", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -1278,6 +1278,7 @@ begin\n            Pragma_Profile                        |\n            Pragma_Profile_Warnings               |\n            Pragma_Propagate_Exceptions           |\n+           Pragma_Provide_Shift_Operators        |\n            Pragma_Psect_Object                   |\n            Pragma_Pure                           |\n            Pragma_Pure_05                        |"}, {"sha": "1f8d73f251968454572eede7eb3e75c66f18df4b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -199,9 +199,10 @@ package body Sem_Ch13 is\n    --  already have modified all Sloc values if the -gnatD option is set.\n \n    type UC_Entry is record\n-      Eloc   : Source_Ptr; -- node used for posting warnings\n-      Source : Entity_Id;  -- source type for unchecked conversion\n-      Target : Entity_Id;  -- target type for unchecked conversion\n+      Eloc     : Source_Ptr; -- node used for posting warnings\n+      Source   : Entity_Id;  -- source type for unchecked conversion\n+      Target   : Entity_Id;  -- target type for unchecked conversion\n+      Act_Unit : Entity_Id;  -- actual function instantiated\n    end record;\n \n    package Unchecked_Conversions is new Table.Table (\n@@ -11700,9 +11701,10 @@ package body Sem_Ch13 is\n \n       if Warn_On_Unchecked_Conversion then\n          Unchecked_Conversions.Append\n-           (New_Val => UC_Entry'(Eloc   => Sloc (N),\n-                                 Source => Source,\n-                                 Target => Target));\n+           (New_Val => UC_Entry'(Eloc     => Sloc (N),\n+                                 Source   => Source,\n+                                 Target   => Target,\n+                                 Act_Unit => Act_Unit));\n \n          --  If both sizes are known statically now, then back end annotation\n          --  is not required to do a proper check but if either size is not\n@@ -11757,14 +11759,21 @@ package body Sem_Ch13 is\n          declare\n             T : UC_Entry renames Unchecked_Conversions.Table (N);\n \n-            Eloc   : constant Source_Ptr := T.Eloc;\n-            Source : constant Entity_Id  := T.Source;\n-            Target : constant Entity_Id  := T.Target;\n+            Eloc     : constant Source_Ptr := T.Eloc;\n+            Source   : constant Entity_Id  := T.Source;\n+            Target   : constant Entity_Id  := T.Target;\n+            Act_Unit : constant Entity_Id  := T.Act_Unit;\n \n             Source_Siz : Uint;\n             Target_Siz : Uint;\n \n          begin\n+            --  Skip if function marked as warnings off\n+\n+            if Warnings_Off (Act_Unit) then\n+               goto Continue;\n+            end if;\n+\n             --  This validation check, which warns if we have unequal sizes for\n             --  unchecked conversion, and thus potentially implementation\n             --  dependent semantics, is one of the few occasions on which we\n@@ -11904,6 +11913,9 @@ package body Sem_Ch13 is\n                end;\n             end if;\n          end;\n+\n+      <<Continue>>\n+         null;\n       end loop;\n    end Validate_Unchecked_Conversions;\n "}, {"sha": "ad7d88033d70274d80d02abad8d08379a72301f6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -6401,6 +6401,11 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n+      if Is_Integer_Type (Parent_Type) then\n+         Set_Has_Shift_Operator\n+           (Implicit_Base, Has_Shift_Operator (Parent_Type));\n+      end if;\n+\n       --  The type of the bounds is that of the parent type, and they\n       --  must be converted to the derived type.\n \n@@ -14807,7 +14812,7 @@ package body Sem_Ch3 is\n       if Parent_Type = Any_Type\n         or else Etype (Parent_Type) = Any_Type\n         or else (Is_Class_Wide_Type (Parent_Type)\n-                   and then Etype (Parent_Type) = T)\n+                  and then Etype (Parent_Type) = T)\n       then\n          --  If Parent_Type is undefined or illegal, make new type into a\n          --  subtype of Any_Type, and set a few attributes to prevent cascaded"}, {"sha": "1e7c4c2566ea4230a30a42d83974c1a48d42af30", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 85, "deletions": 12, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -2488,9 +2488,9 @@ package body Sem_Ch5 is\n         or else Etype (Id) = Any_Type\n         or else\n           (Present (Etype (Id))\n-             and then Is_Itype (Etype (Id))\n-             and then Nkind (Parent (Loop_Nod)) = N_Expression_With_Actions\n-             and then Nkind (Original_Node (Parent (Loop_Nod))) =\n+            and then Is_Itype (Etype (Id))\n+            and then Nkind (Parent (Loop_Nod)) = N_Expression_With_Actions\n+            and then Nkind (Original_Node (Parent (Loop_Nod))) =\n                                                    N_Quantified_Expression)\n       then\n          Set_Etype (Id, Etype (DS));\n@@ -2517,19 +2517,33 @@ package body Sem_Ch5 is\n          end;\n       end if;\n \n-      --  Check for null or possibly null range and issue warning. We suppress\n-      --  such messages in generic templates and instances, because in practice\n-      --  they tend to be dubious in these cases. The check applies as well to\n-      --  rewritten array element loops where a null range may be detected\n-      --  statically.\n+      --  Case where we have a range or a subtype, get type bounds\n \n-      if Nkind (DS) = N_Range then\n+      if Nkind_In (DS, N_Range, N_Subtype_Indication)\n+        and then not Error_Posted (DS)\n+        and then Etype (DS) /= Any_Type\n+        and then Is_Discrete_Type (Etype (DS))\n+      then\n          declare\n-            L : constant Node_Id := Low_Bound  (DS);\n-            H : constant Node_Id := High_Bound (DS);\n+            L : Node_Id;\n+            H : Node_Id;\n \n          begin\n-            --  If range of loop is null, issue warning\n+            if Nkind (DS) = N_Range then\n+               L := Low_Bound  (DS);\n+               H := High_Bound (DS);\n+            else\n+               L :=\n+                 Type_Low_Bound  (Underlying_Type (Etype (Subtype_Mark (DS))));\n+               H :=\n+                 Type_High_Bound (Underlying_Type (Etype (Subtype_Mark (DS))));\n+            end if;\n+\n+            --  Check for null or possibly null range and issue warning. We\n+            --  suppress such messages in generic templates and instances,\n+            --  because in practice they tend to be dubious in these cases. The\n+            --  check applies as well to rewritten array element loops where a\n+            --  null range may be detected statically.\n \n             if Compile_Time_Compare (L, H, Assume_Valid => True) = GT then\n \n@@ -2610,6 +2624,65 @@ package body Sem_Ch5 is\n                   Error_Msg_N (\"\\??bounds may be wrong way round\", DS);\n                end if;\n             end if;\n+\n+            --  Check if either bound is known to be outside the range of the\n+            --  loop parameter type, this is e.g. the case of a loop from\n+            --  20..X where the type is 1..19.\n+\n+            --  Such a loop is dubious since either it raises CE or it executes\n+            --  zero times, and that cannot be useful!\n+\n+            if Etype (DS) /= Any_Type\n+              and then not Error_Posted (DS)\n+              and then Nkind (DS) = N_Subtype_Indication\n+              and then Nkind (Constraint (DS)) = N_Range_Constraint\n+            then\n+               declare\n+                  LLo : constant Node_Id :=\n+                          Low_Bound  (Range_Expression (Constraint (DS)));\n+                  LHi : constant Node_Id :=\n+                          High_Bound (Range_Expression (Constraint (DS)));\n+\n+                  Bad_Bound : Node_Id := Empty;\n+                  --  Suspicious loop bound\n+\n+               begin\n+                  --  At this stage L, H are the bounds of the type, and LLo\n+                  --  Lhi are the low bound and high bound of the loop.\n+\n+                  if Compile_Time_Compare (LLo, L, Assume_Valid => True) = LT\n+                       or else\n+                     Compile_Time_Compare (LLo, H, Assume_Valid => True) = GT\n+                  then\n+                     Bad_Bound := LLo;\n+                  end if;\n+\n+                  if Compile_Time_Compare (LHi, L, Assume_Valid => True) = LT\n+                       or else\n+                     Compile_Time_Compare (LHi, H, Assume_Valid => True) = GT\n+                  then\n+                     Bad_Bound := LHi;\n+                  end if;\n+\n+                  if Present (Bad_Bound) then\n+                     Error_Msg_N\n+                       (\"suspicious loop bound out of range of \"\n+                        & \"loop subtype??\", Bad_Bound);\n+                     Error_Msg_N\n+                       (\"\\loop executes zero times or raises \"\n+                        & \"Constraint_Error??\", Bad_Bound);\n+                  end if;\n+               end;\n+            end if;\n+\n+         --  This declare block is about warnings, if we get an exception while\n+         --  testing for warnings, we simply abandon the attempt silently. This\n+         --  most likely occurs as the result of a previous error, but might\n+         --  just be an obscure case we have missed. In either case, not giving\n+         --  the warning is perfectly acceptable.\n+\n+         exception\n+            when others => null;\n          end;\n       end if;\n "}, {"sha": "5fb7442a82c88dba369be12cd333f437733c26e7", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -328,6 +328,14 @@ package body Sem_Intr is\n       then\n          Errint (\"unrecognized intrinsic subprogram\", E, N);\n \n+      --  Shift cases. We allow user specification of intrinsic shift operators\n+      --  for any numeric types.\n+\n+      elsif Nam_In (Nam, Name_Rotate_Left, Name_Rotate_Right, Name_Shift_Left,\n+                         Name_Shift_Right, Name_Shift_Right_Arithmetic)\n+      then\n+         Check_Shift (E, N);\n+\n       --  We always allow intrinsic specifications in language defined units\n       --  and in expanded code. We assume that the GNAT implementors know what\n       --  they are doing, and do not write or generate junk use of intrinsic.\n@@ -339,23 +347,21 @@ package body Sem_Intr is\n       then\n          null;\n \n-      --  Shift cases. We allow user specification of intrinsic shift\n-      --  operators for any numeric types.\n-\n-      elsif Nam_In (Nam, Name_Rotate_Left, Name_Rotate_Right, Name_Shift_Left,\n-                         Name_Shift_Right, Name_Shift_Right_Arithmetic)\n-      then\n-         Check_Shift (E, N);\n+      --  Exception  functions\n \n       elsif Nam_In (Nam, Name_Exception_Information,\n                          Name_Exception_Message,\n                          Name_Exception_Name)\n       then\n          Check_Exception_Function (E, N);\n \n+      --  Intrinsic operators\n+\n       elsif Nkind (E) = N_Defining_Operator_Symbol then\n          Check_Intrinsic_Operator (E, N);\n \n+      --  Source_Location and navigation functions\n+\n       elsif Nam_In (Nam, Name_File, Name_Line, Name_Source_Location,\n                          Name_Enclosing_Entity)\n       then\n@@ -439,6 +445,8 @@ package body Sem_Intr is\n            (\"first argument of shift must match return type\", Ptyp1, N);\n          return;\n       end if;\n+\n+      Set_Has_Shift_Operator (Base_Type (Typ1));\n    end Check_Shift;\n \n    ------------"}, {"sha": "d61c02bf90c229c4f9feed459e02b902077730c7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -14948,7 +14948,7 @@ package body Sem_Prag is\n \n             elsif K = N_Object_Declaration\n               or else (K = N_Component_Declaration\n-                       and then Original_Record_Component (E) = E)\n+                        and then Original_Record_Component (E) = E)\n             then\n                if Rep_Item_Too_Late (E, N) then\n                   return;\n@@ -15514,7 +15514,6 @@ package body Sem_Prag is\n          --  Ada.Interrupts.Interrupt_ID.\n \n          when Pragma_Interrupt_State => Interrupt_State : declare\n-\n             Int_Id : constant Entity_Id := RTE (RE_Interrupt_ID);\n             --  This is the entity Ada.Interrupts.Interrupt_ID;\n \n@@ -18472,6 +18471,123 @@ package body Sem_Prag is\n                   \"and has no effect?j?\", N);\n             end if;\n \n+         -----------------------------\n+         -- Provide_Shift_Operators --\n+         -----------------------------\n+\n+         --  pragma Provide_Shift_Operators (integer_subtype_LOCAL_NAME);\n+\n+         when Pragma_Provide_Shift_Operators =>\n+         Provide_Shift_Operators : declare\n+            Ent : Entity_Id;\n+\n+            procedure Declare_Shift_Operator (Nam : Name_Id);\n+            --  Insert declaration and pragma Instrinsic for named shift op\n+\n+            ----------------------------\n+            -- Declare_Shift_Operator --\n+            ----------------------------\n+\n+            procedure Declare_Shift_Operator (Nam : Name_Id) is\n+               Func   : Node_Id;\n+               Import : Node_Id;\n+\n+            begin\n+               Func :=\n+                 Make_Subprogram_Declaration (Loc,\n+                   Make_Function_Specification (Loc,\n+                     Defining_Unit_Name       =>\n+                       Make_Defining_Identifier (Loc, Chars => Nam),\n+\n+                     Result_Definition        =>\n+                       Make_Identifier (Loc, Chars => Chars (Ent)),\n+\n+                     Parameter_Specifications => New_List (\n+                       Make_Parameter_Specification (Loc,\n+                         Defining_Identifier  =>\n+                           Make_Defining_Identifier (Loc, Name_Value),\n+                         Parameter_Type       =>\n+                           Make_Identifier (Loc, Chars => Chars (Ent))),\n+\n+                       Make_Parameter_Specification (Loc,\n+                         Defining_Identifier  =>\n+                           Make_Defining_Identifier (Loc, Name_Amount),\n+                         Parameter_Type       =>\n+                           New_Occurrence_Of (Standard_Natural, Loc)))));\n+\n+               Import :=\n+                 Make_Pragma (Loc,\n+                   Pragma_Identifier => Make_Identifier (Loc, Name_Import),\n+                   Pragma_Argument_Associations => New_List (\n+                     Make_Pragma_Argument_Association (Loc,\n+                       Expression => Make_Identifier (Loc, Name_Intrinsic)),\n+                     Make_Pragma_Argument_Association (Loc,\n+                       Expression => Make_Identifier (Loc, Nam))));\n+\n+               Insert_After (N, Import);\n+               Insert_After (N, Func);\n+            end Declare_Shift_Operator;\n+\n+         --  Start of processing for Provide_Shift_Operators\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_Arg_Count (1);\n+            Check_Arg_Is_Local_Name (Arg1);\n+\n+            Arg1 := Get_Pragma_Arg (Arg1);\n+\n+            --  We must have an entity name\n+\n+            if not Is_Entity_Name (Arg1) then\n+               Error_Pragma_Arg\n+                 (\"pragma % must apply to integer first subtype\", Arg1);\n+            end if;\n+\n+            --  If no Entity, means there was a prior error so ignore\n+\n+            if Present (Entity (Arg1)) then\n+               Ent := Entity (Arg1);\n+\n+               --  Apply error checks\n+\n+               if not Is_First_Subtype (Ent) then\n+                  Error_Pragma_Arg\n+                    (\"cannot apply pragma %\",\n+                     \"\\& is not a first subtype\",\n+                     Arg1);\n+\n+               elsif not Is_Integer_Type (Ent) then\n+                  Error_Pragma_Arg\n+                    (\"cannot apply pragma %\",\n+                     \"\\& is not an integer type\",\n+                     Arg1);\n+\n+               elsif Has_Shift_Operator (Ent) then\n+                  Error_Pragma_Arg\n+                    (\"cannot apply pragma %\",\n+                     \"\\& already has declared shift operators\",\n+                     Arg1);\n+\n+               elsif Is_Frozen (Ent) then\n+                  Error_Pragma_Arg\n+                    (\"pragma % appears too late\",\n+                     \"\\& is already frozen\",\n+                     Arg1);\n+               end if;\n+\n+               --  Now declare the operators. We do this during analysis rather\n+               --  than expansion, since we want the operators available if we\n+               --  are operating in -gnatc or ASIS mode.\n+\n+               Declare_Shift_Operator (Name_Rotate_Left);\n+               Declare_Shift_Operator (Name_Rotate_Right);\n+               Declare_Shift_Operator (Name_Shift_Left);\n+               Declare_Shift_Operator (Name_Shift_Right);\n+               Declare_Shift_Operator (Name_Shift_Right_Arithmetic);\n+            end if;\n+         end Provide_Shift_Operators;\n+\n          ------------------\n          -- Psect_Object --\n          ------------------\n@@ -25675,6 +25791,7 @@ package body Sem_Prag is\n       Pragma_Profile                        =>  0,\n       Pragma_Profile_Warnings               =>  0,\n       Pragma_Propagate_Exceptions           => -1,\n+      Pragma_Provide_Shift_Operators        => -1,\n       Pragma_Psect_Object                   => -1,\n       Pragma_Pure                           => -1,\n       Pragma_Pure_05                        => -1,"}, {"sha": "876ac04a4387e1ec2809abeb959cfe3956e7f9c3", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -585,6 +585,7 @@ package Snames is\n    --  correctly recognize and process Priority. Priority is a standard Ada 95\n    --  pragma.\n \n+   Name_Provide_Shift_Operators        : constant Name_Id := N + $; -- GNAT\n    Name_Psect_Object                   : constant Name_Id := N + $; -- VMS\n    Name_Pure                           : constant Name_Id := N + $;\n    Name_Pure_05                        : constant Name_Id := N + $; -- GNAT\n@@ -686,6 +687,7 @@ package Snames is\n \n    --  Other special names used in processing pragmas\n \n+   Name_Amount                         : constant Name_Id := N + $;\n    Name_As_Is                          : constant Name_Id := N + $;\n    Name_Assertion                      : constant Name_Id := N + $;\n    Name_Assertions                     : constant Name_Id := N + $;\n@@ -1889,6 +1891,7 @@ package Snames is\n       Pragma_Preelaborate,\n       Pragma_Preelaborate_05,\n       Pragma_Pre_Class,\n+      Pragma_Provide_Shift_Operators,\n       Pragma_Psect_Object,\n       Pragma_Pure,\n       Pragma_Pure_05,"}, {"sha": "0cce75f9aa2b5737ca4020d0b972e10853a28047", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -1701,7 +1701,6 @@ package body Treepr is\n          Print_Node_Subtree (Cunit (Main_Unit));\n          Write_Eol;\n       end if;\n-\n    end Tree_Dump;\n \n    -----------------\n@@ -1956,13 +1955,13 @@ package body Treepr is\n             then\n                return;\n \n-            --  Otherwise we can visit the list. Note that we don't bother\n-            --  to do the parent test that we did for the node case, because\n-            --  it just does not happen that lists are referenced more than\n-            --  one place in the tree. We aren't counting on this being the\n-            --  case to generate valid output, it is just that we don't need\n-            --  in practice to worry about listing the list at a place that\n-            --  is inconvenient.\n+            --  Otherwise we can visit the list. Note that we don't bother to\n+            --  do the parent test that we did for the node case, because it\n+            --  just does not happen that lists are referenced more than one\n+            --  place in the tree. We aren't counting on this being the case\n+            --  to generate valid output, it is just that we don't need in\n+            --  practice to worry about listing the list at a place that is\n+            --  inconvenient.\n \n             else\n                Visit_List (List_Id (D), New_Prefix);\n@@ -2024,9 +2023,9 @@ package body Treepr is\n       else\n          if Serial_Number (Int (N)) < Next_Serial_Number then\n \n-            --  Here we have already visited the node, but if it is in\n-            --  a list, we still want to print the reference, so that\n-            --  it is clear that it belongs to the list.\n+            --  Here we have already visited the node, but if it is in a list,\n+            --  we still want to print the reference, so that it is clear that\n+            --  it belongs to the list.\n \n             if Is_List_Member (N) then\n                Print_Str (Prefix_Str);\n@@ -2109,9 +2108,9 @@ package body Treepr is\n          --  indentations coming from this effect.\n \n          --  To prevent this, what we do is to control references via\n-         --  Next_Entity only from the first entity on a given scope\n-         --  chain, and we keep them all at the same level. Of course\n-         --  if an entity has already been referenced it is not printed.\n+         --  Next_Entity only from the first entity on a given scope chain,\n+         --  and we keep them all at the same level. Of course if an entity\n+         --  has already been referenced it is not printed.\n \n          if Present (Next_Entity (N))\n            and then Present (Scope (N))"}, {"sha": "0b50555c2466e50d800b8f8dd183d55b53c8410b", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c51ff88f2748e7f59d69d2b99c6749f4ec308c7/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=4c51ff88f2748e7f59d69d2b99c6749f4ec308c7", "patch": "@@ -211,7 +211,7 @@ begin\n    --  Line for -gnatei switch\n \n    Write_Switch_Char (\"einn\");\n-   Write_Line (\"Set maximumum number of instantiations to nn\");\n+   Write_Line (\"Set maximum number of instantiations to nn\");\n \n    --  Line for -gnateI switch\n "}]}