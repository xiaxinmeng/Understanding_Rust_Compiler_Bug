{"sha": "3703b60c903e1cb7629c1a51cda68e53ebd8fbe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcwM2I2MGM5MDNlMWNiNzYyOWMxYTUxY2RhNjhlNTNlYmQ4ZmJlOA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-10-22T08:21:03Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2018-10-22T08:21:03Z"}, "message": "S/390: Make \"b\" constraint match literal pool references\n\nImproves the code generation by getting rid of redundant LAs, as seen\nin the following example:\n\n\t-\tla\t%r1,0(%r13)\n\t-\tlg\t%r4,0(%r1)\n\t+\tlg\t%r4,0(%r13)\n\nAlso allows to proceed with the merge of movdi_64 and movdi_larl.\nCurrently LRA decides to spill literal pool references back to the\nliteral pool, because it preliminarily chooses alternatives with\nCT_MEMORY constraints without calling\nsatisfies_memory_constraint_p (). Later on it notices that the\nconstraint is wrong and fixes it by spilling.  The constraint in this\ncase is \"b\", and the operand is a literal pool reference.  There is\nno reason to reject them.  The current behavior was introduced,\napparently unintentionally, by\nhttps://gcc.gnu.org/ml/gcc-patches/2010-09/msg00812.html\n\nThe patch affects a little bit more than mentioned in the subject,\nbecause it changes s390_loadrelative_operand_p (), which is called not\nonly for checking the \"b\" constraint.  However, the only caller for\nwhich it should really not accept literal pool references is\ns390_check_qrst_address (), so it was changed to explicitly do so.\n\ngcc/ChangeLog:\n\n2018-10-22  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/s390.c (s390_loadrelative_operand_p): Accept\n\tliteral pool references.\n\t(s390_check_qrst_address): Adapt to the new behavior of\n\ts390_loadrelative_operand_p ().\n\ngcc/testsuite/ChangeLog:\n\n2018-10-22  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/litpool-int.c: New test.\n\nFrom-SVN: r265371", "tree": {"sha": "d4a9054a3d48ec4254d08691d58fd33499335cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a9054a3d48ec4254d08691d58fd33499335cc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a48be73babd27c9deabf099b7202643dd447c9dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48be73babd27c9deabf099b7202643dd447c9dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48be73babd27c9deabf099b7202643dd447c9dc"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "fe4898c1cb6ed97484db1b2c3fd891f686a2c8c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3703b60c903e1cb7629c1a51cda68e53ebd8fbe8", "patch": "@@ -1,3 +1,10 @@\n+2018-10-22  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.c (s390_loadrelative_operand_p): Accept\n+\tliteral pool references.\n+\t(s390_check_qrst_address): Adapt to the new behavior of\n+\ts390_loadrelative_operand_p ().\n+\n 2018-10-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}, {"sha": "1de1a716aa3ed2b77b7e2ea11230c133d93445f0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3703b60c903e1cb7629c1a51cda68e53ebd8fbe8", "patch": "@@ -3110,8 +3110,7 @@ s390_legitimate_address_without_index_p (rtx op)\n    Valid addresses are single references or a sum of a reference and a\n    constant integer. Return these parts in SYMREF and ADDEND.  You can\n    pass NULL in REF and/or ADDEND if you are not interested in these\n-   values.  Literal pool references are *not* considered symbol\n-   references.  */\n+   values.  */\n \n static bool\n s390_loadrelative_operand_p (rtx addr, rtx *symref, HOST_WIDE_INT *addend)\n@@ -3130,7 +3129,7 @@ s390_loadrelative_operand_p (rtx addr, rtx *symref, HOST_WIDE_INT *addend)\n       addr = XEXP (addr, 0);\n     }\n \n-  if ((GET_CODE (addr) == SYMBOL_REF && !CONSTANT_POOL_ADDRESS_P (addr))\n+  if (GET_CODE (addr) == SYMBOL_REF\n       || (GET_CODE (addr) == UNSPEC\n \t  && (XINT (addr, 1) == UNSPEC_GOTENT\n \t      || XINT (addr, 1) == UNSPEC_PLT)))\n@@ -3153,6 +3152,7 @@ s390_loadrelative_operand_p (rtx addr, rtx *symref, HOST_WIDE_INT *addend)\n static int\n s390_check_qrst_address (char c, rtx op, bool lit_pool_ok)\n {\n+  rtx symref;\n   struct s390_address addr;\n   bool decomposed = false;\n \n@@ -3161,7 +3161,8 @@ s390_check_qrst_address (char c, rtx op, bool lit_pool_ok)\n \n   /* This check makes sure that no symbolic address (except literal\n      pool references) are accepted by the R or T constraints.  */\n-  if (s390_loadrelative_operand_p (op, NULL, NULL))\n+  if (s390_loadrelative_operand_p (op, &symref, NULL)\n+      && (!lit_pool_ok || !CONSTANT_POOL_ADDRESS_P (symref)))\n     return 0;\n \n   /* Ensure literal pool references are only accepted if LIT_POOL_OK.  */"}, {"sha": "bb22d82864dab3eae2c165862aaec86dcd980fba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3703b60c903e1cb7629c1a51cda68e53ebd8fbe8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3703b60c903e1cb7629c1a51cda68e53ebd8fbe8", "patch": "@@ -1,3 +1,7 @@\n+2018-10-22  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/litpool-int.c: New test.\n+\n 2018-10-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72782"}]}