{"sha": "d3c64ee3f322bedd7e692b6a767be7ef424f337c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNjNjRlZTNmMzIyYmVkZDdlNjkyYjZhNzY3YmU3ZWY0MjRmMzM3Yw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-27T19:04:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-27T19:04:24Z"}, "message": "(convert_move): Truncate via word_mode\tonly if to_mode fits in one word.\n\nTruncate by referring in TO_MODE for any FROM, but force_reg if nec.\n\nFrom-SVN: r3553", "tree": {"sha": "31946851dffac03661828384928f66c757e5f1f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31946851dffac03661828384928f66c757e5f1f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3c64ee3f322bedd7e692b6a767be7ef424f337c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c64ee3f322bedd7e692b6a767be7ef424f337c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3c64ee3f322bedd7e692b6a767be7ef424f337c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c64ee3f322bedd7e692b6a767be7ef424f337c/comments", "author": null, "committer": null, "parents": [{"sha": "0df69870f149a0576e6d2b9699583d22fb2583fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df69870f149a0576e6d2b9699583d22fb2583fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df69870f149a0576e6d2b9699583d22fb2583fe"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "0f63276e85d0cdc33fd6f87b01ed741b51ae3976", "filename": "gcc/expr.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c64ee3f322bedd7e692b6a767be7ef424f337c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c64ee3f322bedd7e692b6a767be7ef424f337c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d3c64ee3f322bedd7e692b6a767be7ef424f337c", "patch": "@@ -833,7 +833,9 @@ convert_move (to, from, unsignedp)\n       return;\n     }\n \n-  if (GET_MODE_BITSIZE (from_mode) > BITS_PER_WORD)\n+  /* Truncating multi-word to a word or less.  */\n+  if (GET_MODE_BITSIZE (from_mode) > BITS_PER_WORD\n+      && GET_MODE_BITSIZE (to_mode) <= BITS_PER_WORD)\n     {\n       convert_move (to, gen_lowpart (word_mode, from), 0);\n       return;\n@@ -881,19 +883,20 @@ convert_move (to, from, unsignedp)\n   /* For truncation, usually we can just refer to FROM in a narrower mode.  */\n   if (GET_MODE_BITSIZE (to_mode) < GET_MODE_BITSIZE (from_mode)\n       && TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (to_mode),\n-\t\t\t\tGET_MODE_BITSIZE (from_mode))\n-      && ((GET_CODE (from) == MEM\n-\t   && ! MEM_VOLATILE_P (from)\n-\t   && direct_load[(int) to_mode]\n-\t   && ! mode_dependent_address_p (XEXP (from, 0)))\n-\t  || GET_CODE (from) == REG\n-\t  || GET_CODE (from) == SUBREG))\n+\t\t\t\tGET_MODE_BITSIZE (from_mode)))\n     {\n+      if (!((GET_CODE (from) == MEM\n+\t     && ! MEM_VOLATILE_P (from)\n+\t     && direct_load[(int) to_mode]\n+\t     && ! mode_dependent_address_p (XEXP (from, 0)))\n+\t    || GET_CODE (from) == REG\n+\t    || GET_CODE (from) == SUBREG))\n+\tfrom = force_reg (from_mode, from);\n       emit_move_insn (to, gen_lowpart (to_mode, from));\n       return;\n     }\n \n-  /* For truncation, usually we can just refer to FROM in a narrower mode.  */\n+  /* Handle extension.  */\n   if (GET_MODE_BITSIZE (to_mode) > GET_MODE_BITSIZE (from_mode))\n     {\n       /* Convert directly if that works.  */"}]}