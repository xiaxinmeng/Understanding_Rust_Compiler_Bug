{"sha": "7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b", "node_id": "C_kwDOANBUbNoAKDdmOWE3NDY1Yzg2M2U0ODI3MDhkMmEwMGY1ZjdmZjkxYWUzYTdlMGI", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-10-13T09:34:27Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-10-13T09:34:27Z"}, "message": "vect: Don't pattern match BITFIELD_REF's of non-integrals [PR107226]\n\nThe original patch supported matching the vect_recog_bitfield_ref_pattern for\nBITFIELD_REF's where the first operand didn't have a INTEGRAL_TYPE_P type.\nThat means it would also match vectors, leading to regressions in targets that\nsupported vectorization of those.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/107226\n\t* tree-vect-patterns.cc (vect_recog_bitfield_ref_pattern): Reject\n\tBITFIELD_REF's with non integral typed first operands.", "tree": {"sha": "9920213cbd3ac1cff2cdafe44277d4754203f358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9920213cbd3ac1cff2cdafe44277d4754203f358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c059880fca175589efc8e06ef458020a005658d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c059880fca175589efc8e06ef458020a005658d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c059880fca175589efc8e06ef458020a005658d"}], "stats": {"total": 21, "additions": 2, "deletions": 19}, "files": [{"sha": "6afd57a50c4bcb5aec7ccca6e5dc069caa4a5a30", "filename": "gcc/tree-vect-patterns.cc", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b/gcc%2Ftree-vect-patterns.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b/gcc%2Ftree-vect-patterns.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.cc?ref=7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b", "patch": "@@ -1913,6 +1913,7 @@ vect_recog_bitfield_ref_pattern (vec_info *vinfo, stmt_vec_info stmt_info,\n     return NULL;\n \n   if (!INTEGRAL_TYPE_P (TREE_TYPE (bf_ref))\n+      || !INTEGRAL_TYPE_P (TREE_TYPE (container))\n       || TYPE_MODE (TREE_TYPE (container)) == E_BLKmode)\n     return NULL;\n \n@@ -1921,25 +1922,7 @@ vect_recog_bitfield_ref_pattern (vec_info *vinfo, stmt_vec_info stmt_info,\n   tree ret = gimple_assign_lhs (first_stmt);\n   tree ret_type = TREE_TYPE (ret);\n   bool shift_first = true;\n-  tree vectype;\n-\n-  /* If the first operand of the BIT_FIELD_REF is not an INTEGER type, convert\n-     it to one of the same width so we can perform the necessary masking and\n-     shifting.  */\n-  if (!INTEGRAL_TYPE_P (TREE_TYPE (container)))\n-    {\n-      unsigned HOST_WIDE_INT container_size =\n-\ttree_to_uhwi (TYPE_SIZE (TREE_TYPE (container)));\n-      tree int_type = build_nonstandard_integer_type (container_size, true);\n-      pattern_stmt\n-\t= gimple_build_assign (vect_recog_temp_ssa_var (int_type),\n-\t\t\t       VIEW_CONVERT_EXPR, container);\n-      vectype = get_vectype_for_scalar_type (vinfo, int_type);\n-      container = gimple_assign_lhs (pattern_stmt);\n-      append_pattern_def_seq (vinfo, stmt_info, pattern_stmt, vectype);\n-    }\n-  else\n-    vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (container));\n+  tree vectype = get_vectype_for_scalar_type (vinfo, TREE_TYPE (container));\n \n   /* We move the conversion earlier if the loaded type is smaller than the\n      return type to enable the use of widening loads.  */"}]}