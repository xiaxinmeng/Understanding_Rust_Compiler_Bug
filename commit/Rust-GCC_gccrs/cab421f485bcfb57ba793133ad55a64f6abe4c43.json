{"sha": "cab421f485bcfb57ba793133ad55a64f6abe4c43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiNDIxZjQ4NWJjZmI1N2JhNzkzMTMzYWQ1NWE2NGY2YWJlNGM0Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-05-31T08:51:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-05-31T08:51:20Z"}, "message": "DR 1227 PR c++/57543\n\n/cp\n2014-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 1227\n\tPR c++/57543\n\t* cp-tree.h (TYPE_HAS_LATE_RETURN_TYPE): Add.\n\t* pt.c (tsubst_function_type): Inject the this parameter; do the\n\tsubstitutions in the order mandated by the DR.\n\t(copy_default_args_to_explicit_spec): Copy TYPE_HAS_LATE_RETURN_TYPE.\n\t* decl.c (grokdeclarator): Maybe set TYPE_HAS_LATE_RETURN_TYPE.\n\t(static_fn_type): Copy it.\n\t* decl2.c (build_memfn_type, change_return_type,\n\tcp_reconstruct_complex_type): Likewise.\n\t* parser.c (cp_parser_lambda_declarator_opt): Likewise.\n\t* tree.c (strip_typedefs): Likewise.\n\t* typeck.c (merge_types): Likewise.\n\n/testsuite\n2014-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 1227\n\tPR c++/57543\n\t* g++.dg/cpp0x/pr57543-1.C: New.\n\t* g++.dg/cpp0x/pr57543-2.C: Likewise.\n\t* g++.dg/cpp0x/pr57543-3.C: Likewise.\n\t* g++.dg/cpp0x/decltype59.C: Likewise.\n\nFrom-SVN: r211102", "tree": {"sha": "1f3efe38c71709e695cad44c3bb889094a2382e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f3efe38c71709e695cad44c3bb889094a2382e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cab421f485bcfb57ba793133ad55a64f6abe4c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab421f485bcfb57ba793133ad55a64f6abe4c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab421f485bcfb57ba793133ad55a64f6abe4c43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab421f485bcfb57ba793133ad55a64f6abe4c43/comments", "author": null, "committer": null, "parents": [{"sha": "f5fb306951b24ee701ffc06871b7ef118925bbbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5fb306951b24ee701ffc06871b7ef118925bbbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5fb306951b24ee701ffc06871b7ef118925bbbd"}], "stats": {"total": 224, "additions": 215, "deletions": 9}, "files": [{"sha": "e8a25f3b9b912763fef4f17e3daaac827117731a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -1,3 +1,19 @@\n+2014-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 1227\n+\tPR c++/57543\n+\t* cp-tree.h (TYPE_HAS_LATE_RETURN_TYPE): Add.\n+\t* pt.c (tsubst_function_type): Inject the this parameter; do the\n+\tsubstitutions in the order mandated by the DR.\n+\t(copy_default_args_to_explicit_spec): Copy TYPE_HAS_LATE_RETURN_TYPE.\n+\t* decl.c (grokdeclarator): Maybe set TYPE_HAS_LATE_RETURN_TYPE.\n+\t(static_fn_type): Copy it.\n+\t* decl2.c (build_memfn_type, change_return_type,\n+\tcp_reconstruct_complex_type): Likewise.\n+\t* parser.c (cp_parser_lambda_declarator_opt): Likewise.\n+\t* tree.c (strip_typedefs): Likewise.\n+\t* typeck.c (merge_types): Likewise.\n+\n 2014-05-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56947"}, {"sha": "3e4ec3d72d9d25f5f98ae5fff351cbb50f79a21d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -125,7 +125,7 @@ c-common.h, not after.\n    Usage of TYPE_LANG_FLAG_?:\n    0: TYPE_DEPENDENT_P\n    1: TYPE_HAS_USER_CONSTRUCTOR.\n-   2: unused\n+   2: TYPE_HAS_LATE_RETURN_TYPE (in FUNCTION_TYPE, METHOD_TYPE)\n    3: TYPE_FOR_JAVA.\n    4: TYPE_HAS_NONTRIVIAL_DESTRUCTOR\n    5: CLASS_TYPE_P (in RECORD_TYPE and UNION_TYPE)\n@@ -3404,6 +3404,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    user-declared constructor.  */\n #define TYPE_HAS_USER_CONSTRUCTOR(NODE) (TYPE_LANG_FLAG_1 (NODE))\n \n+/* Nonzero means that the FUNCTION_TYPE or METHOD_TYPE has a\n+   late-specified return type.  */\n+#define TYPE_HAS_LATE_RETURN_TYPE(NODE) \\\n+  (TYPE_LANG_FLAG_2 (FUNC_OR_METHOD_CHECK (NODE)))\n+\n /* When appearing in an INDIRECT_REF, it means that the tree structure\n    underneath is actually a call to a constructor.  This is needed\n    when the constructor must initialize local storage (which can"}, {"sha": "e5eecb273789904c03f2d632b7d186600d5d2eb2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -8817,6 +8817,7 @@ grokdeclarator (const cp_declarator *declarator,\n   bool template_parm_flag = false;\n   bool typedef_p = decl_spec_seq_has_spec_p (declspecs, ds_typedef);\n   bool constexpr_p = decl_spec_seq_has_spec_p (declspecs, ds_constexpr);\n+  bool late_return_type_p = false;\n   source_location saved_loc = input_location;\n   const char *errmsg;\n \n@@ -9660,6 +9661,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t    if (type == error_mark_node)\n \t      return error_mark_node;\n \n+\t    if (declarator->u.function.late_return_type)\n+\t      late_return_type_p = true;\n+\n \t    if (ctype == NULL_TREE\n \t\t&& decl_context == FIELD\n \t\t&& funcdecl_p\n@@ -10590,6 +10594,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t      decl_function_context (TYPE_MAIN_DECL (ctype)) : NULL_TREE;\n \t    publicp = (! friendp || ! staticp)\n \t      && function_context == NULL_TREE;\n+\n+\t    if (late_return_type_p)\n+\t      TYPE_HAS_LATE_RETURN_TYPE (type) = 1;\n+\n \t    decl = grokfndecl (ctype, type,\n \t\t\t       TREE_CODE (unqualified_id) != TEMPLATE_ID_EXPR\n \t\t\t       ? unqualified_id : dname,\n@@ -10814,6 +10822,9 @@ grokdeclarator (const cp_declarator *declarator,\n \tpublicp = (ctype != NULL_TREE\n \t\t   || storage_class != sc_static);\n \n+\tif (late_return_type_p)\n+\t  TYPE_HAS_LATE_RETURN_TYPE (type) = 1;\n+\n \tdecl = grokfndecl (ctype, type, original_name, parms, unqualified_id,\n \t\t\t   virtualp, flags, memfn_quals, rqual, raises,\n \t\t\t   1, friendp,\n@@ -14421,6 +14432,8 @@ static_fn_type (tree memfntype)\n \t    (fntype, TYPE_ATTRIBUTES (memfntype)));\n   fntype = (build_exception_variant\n \t    (fntype, TYPE_RAISES_EXCEPTIONS (memfntype)));\n+  if (TYPE_HAS_LATE_RETURN_TYPE (memfntype))\n+    TYPE_HAS_LATE_RETURN_TYPE (fntype) = 1;\n   return fntype;\n }\n "}, {"sha": "602a0c557597562c3304f4988e6b13f1c331c822", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -119,6 +119,7 @@ build_memfn_type (tree fntype, tree ctype, cp_cv_quals quals,\n   tree raises;\n   tree attrs;\n   int type_quals;\n+  bool late_return_type_p;\n \n   if (fntype == error_mark_node || ctype == error_mark_node)\n     return error_mark_node;\n@@ -130,6 +131,7 @@ build_memfn_type (tree fntype, tree ctype, cp_cv_quals quals,\n   ctype = cp_build_qualified_type (ctype, type_quals);\n   raises = TYPE_RAISES_EXCEPTIONS (fntype);\n   attrs = TYPE_ATTRIBUTES (fntype);\n+  late_return_type_p = TYPE_HAS_LATE_RETURN_TYPE (fntype);\n   fntype = build_method_type_directly (ctype, TREE_TYPE (fntype),\n \t\t\t\t       (TREE_CODE (fntype) == METHOD_TYPE\n \t\t\t\t\t? TREE_CHAIN (TYPE_ARG_TYPES (fntype))\n@@ -140,6 +142,8 @@ build_memfn_type (tree fntype, tree ctype, cp_cv_quals quals,\n     fntype = build_ref_qualified_type (fntype, rqual);\n   if (raises)\n     fntype = build_exception_variant (fntype, raises);\n+  if (late_return_type_p)\n+    TYPE_HAS_LATE_RETURN_TYPE (fntype) = 1;\n \n   return fntype;\n }\n@@ -154,6 +158,7 @@ change_return_type (tree new_ret, tree fntype)\n   tree args = TYPE_ARG_TYPES (fntype);\n   tree raises = TYPE_RAISES_EXCEPTIONS (fntype);\n   tree attrs = TYPE_ATTRIBUTES (fntype);\n+  bool late_return_type_p = TYPE_HAS_LATE_RETURN_TYPE (fntype);\n \n   if (new_ret == error_mark_node)\n     return fntype;\n@@ -175,6 +180,8 @@ change_return_type (tree new_ret, tree fntype)\n     newtype = build_exception_variant (newtype, raises);\n   if (attrs)\n     newtype = cp_build_type_attribute_variant (newtype, attrs);\n+  if (late_return_type_p)\n+    TYPE_HAS_LATE_RETURN_TYPE (newtype) = 1;\n \n   return newtype;\n }\n@@ -1276,6 +1283,7 @@ tree\n cp_reconstruct_complex_type (tree type, tree bottom)\n {\n   tree inner, outer;\n+  bool late_return_type_p = false;\n \n   if (TYPE_PTR_P (type))\n     {\n@@ -1301,6 +1309,7 @@ cp_reconstruct_complex_type (tree type, tree bottom)\n     }\n   else if (TREE_CODE (type) == FUNCTION_TYPE)\n     {\n+      late_return_type_p = TYPE_HAS_LATE_RETURN_TYPE (type);\n       inner = cp_reconstruct_complex_type (TREE_TYPE (type), bottom);\n       outer = build_function_type (inner, TYPE_ARG_TYPES (type));\n       outer = apply_memfn_quals (outer,\n@@ -1309,6 +1318,7 @@ cp_reconstruct_complex_type (tree type, tree bottom)\n     }\n   else if (TREE_CODE (type) == METHOD_TYPE)\n     {\n+      late_return_type_p = TYPE_HAS_LATE_RETURN_TYPE (type);\n       inner = cp_reconstruct_complex_type (TREE_TYPE (type), bottom);\n       /* The build_method_type_directly() routine prepends 'this' to argument list,\n \t so we must compensate by getting rid of it.  */\n@@ -1327,7 +1337,12 @@ cp_reconstruct_complex_type (tree type, tree bottom)\n \n   if (TYPE_ATTRIBUTES (type))\n     outer = cp_build_type_attribute_variant (outer, TYPE_ATTRIBUTES (type));\n-  return cp_build_qualified_type (outer, cp_type_quals (type));\n+  outer = cp_build_qualified_type (outer, cp_type_quals (type));\n+\n+  if (late_return_type_p)\n+    TYPE_HAS_LATE_RETURN_TYPE (outer) = 1;\n+\n+  return outer;\n }\n \n /* Replaces any constexpr expression that may be into the attributes"}, {"sha": "2591ae545a86e62b1684b0468665347097eca5f0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -9152,6 +9152,8 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \tDECL_ARTIFICIAL (fco) = 1;\n \t/* Give the object parameter a different name.  */\n \tDECL_NAME (DECL_ARGUMENTS (fco)) = get_identifier (\"__closure\");\n+\tif (LAMBDA_EXPR_RETURN_TYPE (lambda_expr))\n+\t  TYPE_HAS_LATE_RETURN_TYPE (TREE_TYPE (fco)) = 1;\n       }\n     if (template_param_list)\n       {"}, {"sha": "c0e0646704ddb0cbf199ed96b77e891e842d08ab", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -2256,6 +2256,10 @@ copy_default_args_to_explicit_spec (tree decl)\n \t\t\t\t\t      TYPE_ATTRIBUTES (old_type));\n   new_type = build_exception_variant (new_type,\n \t\t\t\t      TYPE_RAISES_EXCEPTIONS (old_type));\n+\n+  if (TYPE_HAS_LATE_RETURN_TYPE (old_type))\n+    TYPE_HAS_LATE_RETURN_TYPE (new_type) = 1;\n+\n   TREE_TYPE (decl) = new_type;\n }\n \n@@ -11322,8 +11326,42 @@ tsubst_function_type (tree t,\n   /* The TYPE_CONTEXT is not used for function/method types.  */\n   gcc_assert (TYPE_CONTEXT (t) == NULL_TREE);\n \n-  /* Substitute the return type.  */\n-  return_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+  /* DR 1227: Mixing immediate and non-immediate contexts in deduction\n+     failure.  */\n+  bool late_return_type_p = TYPE_HAS_LATE_RETURN_TYPE (t);\n+\n+  if (late_return_type_p)\n+    {\n+      /* Substitute the argument types.  */\n+      arg_types = tsubst_arg_types (TYPE_ARG_TYPES (t), args, NULL_TREE,\n+\t\t\t\t    complain, in_decl);\n+      if (arg_types == error_mark_node)\n+\treturn error_mark_node;\n+\n+      tree save_ccp = current_class_ptr;\n+      tree save_ccr = current_class_ref;\n+      tree this_type = (TREE_CODE (t) == METHOD_TYPE\n+\t\t\t? TREE_TYPE (TREE_VALUE (arg_types)) : NULL_TREE);\n+      bool do_inject = this_type && CLASS_TYPE_P (this_type);\n+      if (do_inject)\n+\t{\n+\t  /* DR 1207: 'this' is in scope in the trailing return type.  */\n+\t  inject_this_parameter (this_type, cp_type_quals (this_type));\n+\t}\n+\n+      /* Substitute the return type.  */\n+      return_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\n+      if (do_inject)\n+\t{\n+\t  current_class_ptr = save_ccp;\n+\t  current_class_ref = save_ccr;\n+\t}\n+    }\n+  else\n+    /* Substitute the return type.  */\n+    return_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n+\n   if (return_type == error_mark_node)\n     return error_mark_node;\n   /* DR 486 clarifies that creation of a function type with an\n@@ -11344,11 +11382,14 @@ tsubst_function_type (tree t,\n   if (abstract_virtuals_error_sfinae (ACU_RETURN, return_type, complain))\n     return error_mark_node;\n \n-  /* Substitute the argument types.  */\n-  arg_types = tsubst_arg_types (TYPE_ARG_TYPES (t), args, NULL_TREE,\n-\t\t\t\tcomplain, in_decl);\n-  if (arg_types == error_mark_node)\n-    return error_mark_node;\n+  if (!late_return_type_p)\n+    {\n+      /* Substitute the argument types.  */\n+      arg_types = tsubst_arg_types (TYPE_ARG_TYPES (t), args, NULL_TREE,\n+\t\t\t\t    complain, in_decl);\n+      if (arg_types == error_mark_node)\n+\treturn error_mark_node;\n+    }\n \n   /* Construct a new type node and return it.  */\n   if (TREE_CODE (t) == FUNCTION_TYPE)\n@@ -11384,6 +11425,9 @@ tsubst_function_type (tree t,\n     }\n   fntype = cp_build_type_attribute_variant (fntype, TYPE_ATTRIBUTES (t));\n \n+  if (late_return_type_p)\n+    TYPE_HAS_LATE_RETURN_TYPE (fntype) = 1;\n+\n   return fntype;\n }\n "}, {"sha": "587ae80bcc1f23b8b8f3dcad27bc6e06bddee9c8", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -1257,6 +1257,8 @@ strip_typedefs (tree t)\n \tif (TYPE_RAISES_EXCEPTIONS (t))\n \t  result = build_exception_variant (result,\n \t\t\t\t\t    TYPE_RAISES_EXCEPTIONS (t));\n+\tif (TYPE_HAS_LATE_RETURN_TYPE (t))\n+\t  TYPE_HAS_LATE_RETURN_TYPE (result) = 1;\n       }\n       break;\n     case TYPENAME_TYPE:"}, {"sha": "aa96fb493180c1646098bc7833fc6f4662704521", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -818,6 +818,7 @@ merge_types (tree t1, tree t2)\n \ttree p2 = TYPE_ARG_TYPES (t2);\n \ttree parms;\n \ttree rval, raises;\n+\tbool late_return_type_p = TYPE_HAS_LATE_RETURN_TYPE (t1);\n \n \t/* Save space: see if the result is identical to one of the args.  */\n \tif (valtype == TREE_TYPE (t1) && ! p2)\n@@ -842,6 +843,8 @@ merge_types (tree t1, tree t2)\n \traises = merge_exception_specifiers (TYPE_RAISES_EXCEPTIONS (t1),\n \t\t\t\t\t     TYPE_RAISES_EXCEPTIONS (t2));\n \tt1 = build_exception_variant (rval, raises);\n+\tif (late_return_type_p)\n+\t  TYPE_HAS_LATE_RETURN_TYPE (t1) = 1;\n \tbreak;\n       }\n \n@@ -854,6 +857,8 @@ merge_types (tree t1, tree t2)\n \t\t\t\t\t\t  TYPE_RAISES_EXCEPTIONS (t2));\n \tcp_ref_qualifier rqual = type_memfn_rqual (t1);\n \ttree t3;\n+\tbool late_return_type_1_p = TYPE_HAS_LATE_RETURN_TYPE (t1);\n+\tbool late_return_type_2_p = TYPE_HAS_LATE_RETURN_TYPE (t2);\n \n \t/* If this was a member function type, get back to the\n \t   original type of type member function (i.e., without\n@@ -867,6 +872,10 @@ merge_types (tree t1, tree t2)\n \t\t\t\t\t TYPE_ARG_TYPES (t3));\n \tt1 = build_exception_variant (t3, raises);\n \tt1 = build_ref_qualified_type (t1, rqual);\n+\tif (late_return_type_1_p)\n+\t  TYPE_HAS_LATE_RETURN_TYPE (t1) = 1;\n+\tif (late_return_type_2_p)\n+\t  TYPE_HAS_LATE_RETURN_TYPE (t2) = 1;\n \tbreak;\n       }\n "}, {"sha": "425ebf8bbe9e12ba186e6730068b024b8180966f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -1,3 +1,12 @@\n+2014-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 1227\n+\tPR c++/57543\n+\t* g++.dg/cpp0x/pr57543-1.C: New.\n+\t* g++.dg/cpp0x/pr57543-2.C: Likewise.\n+\t* g++.dg/cpp0x/pr57543-3.C: Likewise.\n+\t* g++.dg/cpp0x/decltype59.C: Likewise.\n+\n 2014-05-31  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.target/i386/sibcall-4.c: Add missing closing brace."}, {"sha": "93208df95cbb577b650458a9856aaf4f3307e31d", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype59.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype59.C?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/57543\n+// { dg-do compile { target c++11 } }\n+\n+template< typename > struct X\n+{\n+  void foo();\n+  auto bar() -> decltype( X::foo() );\n+};\n+\n+template< typename > struct Y\n+{\n+  void foo();\n+  template< typename >\n+  auto bar() -> decltype( Y::foo() );\n+};\n+\n+template< typename > struct Z\n+{\n+  void foo();\n+  template< typename T >\n+  auto bar() -> decltype( T::foo() );\n+};\n+\n+template< typename > struct K\n+{\n+  void foo();\n+  template< typename T >\n+  auto bar() -> decltype( T::foo() );\n+};\n+\n+template<>\n+template<>\n+auto K<int>::bar<K<int>>() -> decltype( K<int>::foo() );\n+\n+int main()\n+{\n+  X<int>().bar();\n+  Y<int>().bar<double>();\n+  Z<int>().bar<Z<int>>();\n+  K<int>().bar<K<int>>();\n+}"}, {"sha": "d77d71e8bdb1d706810da79dcba3ff836ddcbb5f", "filename": "gcc/testsuite/g++.dg/cpp0x/pr57543-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-1.C?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -0,0 +1,13 @@\n+// DR 1227, PR c++/57543\n+// { dg-do compile { target c++11 } } \n+\n+template <class T> struct A { using X = typename T::X; };  // { dg-error \"not a class\" }\n+template <class T> typename T::X f(typename A<T>::X);\n+template <class T> void f(...) { }\n+template <class T> auto g(typename A<T>::X) -> typename T::X;  // { dg-message \"required\" }\n+template <class T> void g(...) { }\n+\n+void h() {\n+  f<int>(0);  // OK\n+  g<int>(0);  // { dg-message \"required\" }\n+}"}, {"sha": "7afa7fe491b987da3663d2ec8b56fd839f235270", "filename": "gcc/testsuite/g++.dg/cpp0x/pr57543-2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-2.C?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -0,0 +1,17 @@\n+// DR 1227, PR c++/57543\n+// { dg-do compile { target c++11 } } \n+\n+struct S\n+{\n+  template <class T> struct A { using X = typename T::X; };  // { dg-error \"not a class\" }\n+  template <class T> typename T::X f(typename A<T>::X);\n+  template <class T> void f(...) { }\n+  template <class T> auto g(typename A<T>::X) -> typename T::X;  // { dg-message \"required\" }\n+  template <class T> void g(...) { }\n+\n+  void h()\n+  {\n+    f<int>(0);  // OK\n+    g<int>(0);  // { dg-message \"required\" }\n+  }\n+};"}, {"sha": "b77fefc8c113aeb75c3642ef29696f22dc5196df", "filename": "gcc/testsuite/g++.dg/cpp0x/pr57543-3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab421f485bcfb57ba793133ad55a64f6abe4c43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57543-3.C?ref=cab421f485bcfb57ba793133ad55a64f6abe4c43", "patch": "@@ -0,0 +1,20 @@\n+// DR 1227, PR c++/57543\n+// { dg-do compile { target c++11 } } \n+\n+template <class>\n+class C\n+{\n+  template <class T> struct A { using X = typename T::X; };  // { dg-error \"not a class\" }\n+  template <class T> typename T::X f(typename A<T>::X);\n+  template <class T> void f(...) { }\n+  template <class T> auto g(typename A<T>::X) -> typename T::X;  // { dg-message \"required\" }\n+  template <class T> void g(...) { }\n+\n+  void h()\n+  {\n+    f<int>(0);  // OK\n+    g<int>(0);  // { dg-message \"required\" }\n+  }\n+};\n+\n+template class C<int>;  // { dg-message \"required\" }"}]}