{"sha": "84c20253961be6a343a8fbe3ec14cd46752b4427", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRjMjAyNTM5NjFiZTZhMzQzYThmYmUzZWMxNGNkNDY3NTJiNDQyNw==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-10-25T09:18:46Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-10-25T09:18:46Z"}, "message": "constraints.md (Q constraint): Document its use for Thumb-1.\n\n2016-10-25  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/constraints.md (Q constraint): Document its use for\n    Thumb-1.\n    (Pf constraint): New constraint for relaxed, consume or relaxed memory\n    models.\n    * config/arm/sync.md (atomic_load<mode>): Add new ARMv8-M Baseline only\n    alternatives to allow any register when memory model matches Pf and\n    thus lda is used, but only low registers otherwise.  Use unpredicated\n    output template for Thumb-1 targets.\n    (atomic_store<mode>): Likewise for stl.\n    (arm_load_exclusive<mode>): Add new ARMv8-M Baseline only alternative\n    whose output template does not have predication.\n    (arm_load_acquire_exclusive<mode>): Likewise.\n    (arm_load_exclusivesi): Likewise.\n    (arm_load_acquire_exclusivesi): Likewise.\n    (arm_store_release_exclusive<mode>): Likewise.\n    (arm_store_exclusive<mode>): Use unpredicated output template for\n    Thumb-1 targets.\n\nFrom-SVN: r241507", "tree": {"sha": "8b357e8650e75cf46251f83ea53a6092e6540595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b357e8650e75cf46251f83ea53a6092e6540595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84c20253961be6a343a8fbe3ec14cd46752b4427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c20253961be6a343a8fbe3ec14cd46752b4427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c20253961be6a343a8fbe3ec14cd46752b4427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c20253961be6a343a8fbe3ec14cd46752b4427/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e16f1cc79dc131b0762cec4c18cfcd795fb6fe75"}], "stats": {"total": 141, "additions": 105, "deletions": 36}, "files": [{"sha": "c1d8f946d0d8001ab843aba080485d9585854ce2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c20253961be6a343a8fbe3ec14cd46752b4427/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c20253961be6a343a8fbe3ec14cd46752b4427/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84c20253961be6a343a8fbe3ec14cd46752b4427", "patch": "@@ -1,3 +1,23 @@\n+2016-10-25  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/constraints.md (Q constraint): Document its use for\n+\tThumb-1.\n+\t(Pf constraint): New constraint for relaxed, consume or relaxed memory\n+\tmodels.\n+\t* config/arm/sync.md (atomic_load<mode>): Add new ARMv8-M Baseline only\n+\talternatives to allow any register when memory model matches Pf and\n+\tthus lda is used, but only low registers otherwise.  Use unpredicated\n+\toutput template for Thumb-1 targets.\n+\t(atomic_store<mode>): Likewise for stl.\n+\t(arm_load_exclusive<mode>): Add new ARMv8-M Baseline only alternative\n+\twhose output template does not have predication.\n+\t(arm_load_acquire_exclusive<mode>): Likewise.\n+\t(arm_load_exclusivesi): Likewise.\n+\t(arm_load_acquire_exclusivesi): Likewise.\n+\t(arm_store_release_exclusive<mode>): Likewise.\n+\t(arm_store_exclusive<mode>): Use unpredicated output template for\n+\tThumb-1 targets.\n+\n 2016-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* internal-fn.def (LAUNDER): New internal function."}, {"sha": "5099e691ff5bd2efd1d89e64f23c06216fc57030", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c20253961be6a343a8fbe3ec14cd46752b4427/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c20253961be6a343a8fbe3ec14cd46752b4427/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=84c20253961be6a343a8fbe3ec14cd46752b4427", "patch": "@@ -34,11 +34,13 @@\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Do, Dv, Dy, Di, Dt, Dp, Dz\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n ;; in Thumb-2 state: Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py\n+;; in all states: Pf\n \n ;; The following memory constraints have been used:\n-;; in ARM/Thumb-2 state: Q, Uh, Ut, Uv, Uy, Un, Um, Us\n+;; in ARM/Thumb-2 state: Uh, Ut, Uv, Uy, Un, Um, Us\n ;; in ARM state: Uq\n ;; in Thumb state: Uu, Uw\n+;; in all states: Q\n \n \n (define_register_constraint \"t\" \"TARGET_32BIT ? VFP_LO_REGS : NO_REGS\"\n@@ -180,6 +182,13 @@\n   (and (match_code \"const_int\")\n        (match_test \"TARGET_THUMB1 && ival >= 256 && ival <= 510\")))\n \n+(define_constraint \"Pf\"\n+  \"Memory models except relaxed, consume or release ones.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"!is_mm_relaxed (memmodel_from_int (ival))\n+\t\t    && !is_mm_consume (memmodel_from_int (ival))\n+\t\t    && !is_mm_release (memmodel_from_int (ival))\")))\n+\n (define_constraint \"Ps\"\n   \"@internal In Thumb-2 state a constant in the range -255 to +255\"\n   (and (match_code \"const_int\")\n@@ -407,7 +416,7 @@\n \n (define_memory_constraint \"Q\"\n  \"@internal\n-  In ARM/Thumb-2 state an address that is a single base register.\"\n+  An address that is a single base register.\"\n  (and (match_code \"mem\")\n       (match_test \"REG_P (XEXP (op, 0))\")))\n "}, {"sha": "d36c24f76f670d7602f766d7172286504faa7af5", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 74, "deletions": 34, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c20253961be6a343a8fbe3ec14cd46752b4427/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c20253961be6a343a8fbe3ec14cd46752b4427/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=84c20253961be6a343a8fbe3ec14cd46752b4427", "patch": "@@ -63,37 +63,59 @@\n    (set_attr \"predicable\" \"no\")])\n \n (define_insn \"atomic_load<mode>\"\n-  [(set (match_operand:QHSI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:QHSI 0 \"register_operand\" \"=r,r,l\")\n     (unspec_volatile:QHSI\n-      [(match_operand:QHSI 1 \"arm_sync_memory_operand\" \"Q\")\n-       (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n+      [(match_operand:QHSI 1 \"arm_sync_memory_operand\" \"Q,Q,Q\")\n+       (match_operand:SI 2 \"const_int_operand\" \"n,Pf,n\")]\t;; model\n       VUNSPEC_LDA))]\n   \"TARGET_HAVE_LDACQ\"\n   {\n     enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n     if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_release (model))\n-      return \\\"ldr<sync_sfx>%?\\\\t%0, %1\\\";\n+      {\n+\tif (TARGET_THUMB1)\n+\t  return \\\"ldr<sync_sfx>\\\\t%0, %1\\\";\n+\telse\n+\t  return \\\"ldr<sync_sfx>%?\\\\t%0, %1\\\";\n+      }\n     else\n-      return \\\"lda<sync_sfx>%?\\\\t%0, %1\\\";\n+      {\n+\tif (TARGET_THUMB1)\n+\t  return \\\"lda<sync_sfx>\\\\t%0, %1\\\";\n+\telse\n+\t  return \\\"lda<sync_sfx>%?\\\\t%0, %1\\\";\n+      }\n   }\n-  [(set_attr \"predicable\" \"yes\")\n+  [(set_attr \"arch\" \"32,v8mb,any\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n \n (define_insn \"atomic_store<mode>\"\n-  [(set (match_operand:QHSI 0 \"memory_operand\" \"=Q\")\n+  [(set (match_operand:QHSI 0 \"memory_operand\" \"=Q,Q,Q\")\n     (unspec_volatile:QHSI\n-      [(match_operand:QHSI 1 \"general_operand\" \"r\")\n-       (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n+      [(match_operand:QHSI 1 \"general_operand\" \"r,r,l\")\n+       (match_operand:SI 2 \"const_int_operand\" \"n,Pf,n\")]\t;; model\n       VUNSPEC_STL))]\n   \"TARGET_HAVE_LDACQ\"\n   {\n     enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n     if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_acquire (model))\n-      return \\\"str<sync_sfx>%?\\t%1, %0\\\";\n+      {\n+\tif (TARGET_THUMB1)\n+\t  return \\\"str<sync_sfx>\\t%1, %0\\\";\n+\telse\n+\t  return \\\"str<sync_sfx>%?\\t%1, %0\\\";\n+      }\n     else\n-      return \\\"stl<sync_sfx>%?\\t%1, %0\\\";\n+      {\n+\tif (TARGET_THUMB1)\n+\t  return \\\"stl<sync_sfx>\\t%1, %0\\\";\n+\telse\n+\t  return \\\"stl<sync_sfx>%?\\t%1, %0\\\";\n+      }\n   }\n-  [(set_attr \"predicable\" \"yes\")\n+  [(set_attr \"arch\" \"32,v8mb,any\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n \n ;; An LDRD instruction usable by the atomic_loaddi expander on LPAE targets\n@@ -380,45 +402,57 @@\n   })\n \n (define_insn \"arm_load_exclusive<mode>\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (zero_extend:SI\n \t  (unspec_volatile:NARROW\n-\t    [(match_operand:NARROW 1 \"mem_noofs_operand\" \"Ua\")]\n+\t    [(match_operand:NARROW 1 \"mem_noofs_operand\" \"Ua,Ua\")]\n \t    VUNSPEC_LL)))]\n   \"TARGET_HAVE_LDREXBH\"\n-  \"ldrex<sync_sfx>%?\\t%0, %C1\"\n-  [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   ldrex<sync_sfx>%?\\t%0, %C1\n+   ldrex<sync_sfx>\\t%0, %C1\"\n+  [(set_attr \"arch\" \"32,v8mb\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n \n (define_insn \"arm_load_acquire_exclusive<mode>\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (zero_extend:SI\n \t  (unspec_volatile:NARROW\n-\t    [(match_operand:NARROW 1 \"mem_noofs_operand\" \"Ua\")]\n+\t    [(match_operand:NARROW 1 \"mem_noofs_operand\" \"Ua,Ua\")]\n \t    VUNSPEC_LAX)))]\n   \"TARGET_HAVE_LDACQ\"\n-  \"ldaex<sync_sfx>%?\\\\t%0, %C1\"\n-  [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   ldaex<sync_sfx>%?\\\\t%0, %C1\n+   ldaex<sync_sfx>\\\\t%0, %C1\"\n+  [(set_attr \"arch\" \"32,v8mb\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n \n (define_insn \"arm_load_exclusivesi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(unspec_volatile:SI\n-\t  [(match_operand:SI 1 \"mem_noofs_operand\" \"Ua\")]\n+\t  [(match_operand:SI 1 \"mem_noofs_operand\" \"Ua,Ua\")]\n \t  VUNSPEC_LL))]\n   \"TARGET_HAVE_LDREX\"\n-  \"ldrex%?\\t%0, %C1\"\n-  [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   ldrex%?\\t%0, %C1\n+   ldrex\\t%0, %C1\"\n+  [(set_attr \"arch\" \"32,v8mb\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n \n (define_insn \"arm_load_acquire_exclusivesi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(unspec_volatile:SI\n-\t  [(match_operand:SI 1 \"mem_noofs_operand\" \"Ua\")]\n+\t  [(match_operand:SI 1 \"mem_noofs_operand\" \"Ua,Ua\")]\n \t  VUNSPEC_LAX))]\n   \"TARGET_HAVE_LDACQ\"\n-  \"ldaex%?\\t%0, %C1\"\n-  [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   ldaex%?\\t%0, %C1\n+   ldaex\\t%0, %C1\"\n+  [(set_attr \"arch\" \"32,v8mb\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n \n (define_insn \"arm_load_exclusivedi\"\n@@ -460,7 +494,10 @@\n \tgcc_assert ((REGNO (operands[2]) & 1) == 0 || TARGET_THUMB2);\n \treturn \"strexd%?\\t%0, %2, %H2, %C1\";\n       }\n-    return \"strex<sync_sfx>%?\\t%0, %2, %C1\";\n+    if (TARGET_THUMB1)\n+      return \"strex<sync_sfx>\\t%0, %2, %C1\";\n+    else\n+      return \"strex<sync_sfx>%?\\t%0, %2, %C1\";\n   }\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n@@ -482,13 +519,16 @@\n    (set_attr \"predicable_short_it\" \"no\")])\n \n (define_insn \"arm_store_release_exclusive<mode>\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=&r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r\")\n \t(unspec_volatile:SI [(const_int 0)] VUNSPEC_SLX))\n-   (set (match_operand:QHSI 1 \"mem_noofs_operand\" \"=Ua\")\n+   (set (match_operand:QHSI 1 \"mem_noofs_operand\" \"=Ua,Ua\")\n \t(unspec_volatile:QHSI\n-\t  [(match_operand:QHSI 2 \"s_register_operand\" \"r\")]\n+\t  [(match_operand:QHSI 2 \"s_register_operand\" \"r,r\")]\n \t  VUNSPEC_SLX))]\n   \"TARGET_HAVE_LDACQ\"\n-  \"stlex<sync_sfx>%?\\t%0, %2, %C1\"\n-  [(set_attr \"predicable\" \"yes\")\n+  \"@\n+   stlex<sync_sfx>%?\\t%0, %2, %C1\n+   stlex<sync_sfx>\\t%0, %2, %C1\"\n+  [(set_attr \"arch\" \"32,v8mb\")\n+   (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])"}]}