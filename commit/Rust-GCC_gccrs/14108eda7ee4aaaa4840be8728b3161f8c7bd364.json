{"sha": "14108eda7ee4aaaa4840be8728b3161f8c7bd364", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQxMDhlZGE3ZWU0YWFhYTQ4NDBiZTg3MjhiMzE2MWY4YzdiZDM2NA==", "commit": {"author": {"name": "Pekka J\u00e4\u00e4skel\u00e4inen", "email": "visit0r@gcc.gnu.org", "date": "2017-10-09T13:06:01Z"}, "committer": {"name": "Pekka J\u00e4\u00e4skel\u00e4inen", "email": "visit0r@gcc.gnu.org", "date": "2017-10-09T13:06:01Z"}, "message": "[BRIGFE] Support BRIG_KIND_NONE directives.\n\nThese directives are legal everywhere.  They can be used to\npatch away BRIG entries at the binary level.\n\nAlso add extra error detection for zeroed regions: make sure\nthe byteCount field is never zero.\n\nThe call code still failed a few PRM test cases. Now all PRM\nbranch cases pass again.\n\nFrom-SVN: r253545", "tree": {"sha": "90e07f8e99ffe3f619d831f8feef8101f7b489e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90e07f8e99ffe3f619d831f8feef8101f7b489e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14108eda7ee4aaaa4840be8728b3161f8c7bd364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14108eda7ee4aaaa4840be8728b3161f8c7bd364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14108eda7ee4aaaa4840be8728b3161f8c7bd364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14108eda7ee4aaaa4840be8728b3161f8c7bd364/comments", "author": null, "committer": null, "parents": [{"sha": "63eea5dcb5735565779abda3475fb178f7a605fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63eea5dcb5735565779abda3475fb178f7a605fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63eea5dcb5735565779abda3475fb178f7a605fd"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "fa7668486b203a8395f5526ab31d20e6fc13e94e", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14108eda7ee4aaaa4840be8728b3161f8c7bd364/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14108eda7ee4aaaa4840be8728b3161f8c7bd364/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=14108eda7ee4aaaa4840be8728b3161f8c7bd364", "patch": "@@ -1,3 +1,18 @@\n+2017-10-09  Pekka J\u00e4\u00e4skel\u00e4inen  <pekka.jaaskelainen@parmance.com>\n+\n+\t* brigfrontend/brig-to-generic.cc: Support BRIG_KIND_NONE\n+\tdirectives.  These directives are legal everywhere.  They\n+\tcan be used to patch away BRIG entries at the binary level.\n+\tAlso add extra error detection for zeroed regions: make sure\n+\tthe byteCount field is never zero.\n+\t* brig/brigfrontend/phsa.h: Added a new error prefix for\n+\terrors which are due to corrupted BRIG modules.\n+\n+2017-10-09  Henry Linjam\u00e4ki  <henry.linjamaki@parmance.com>\n+\n+\t* brigfrontend/brig-branch-inst-handler.cc: The call code\n+\tstill failed a few test cases. Now all PRM cases pass again.\n+\n 2017-10-03  Henry Linjam\u00e4ki  <henry.linjamaki@parmance.com>\n \n \t* brigfrontend/brig-branch-inst-handler.cc: Fix (more) crash with"}, {"sha": "039f1853d4a30739374455860fc21da0e3213dc4", "filename": "gcc/brig/brigfrontend/brig-branch-inst-handler.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14108eda7ee4aaaa4840be8728b3161f8c7bd364/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-branch-inst-handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14108eda7ee4aaaa4840be8728b3161f8c7bd364/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-branch-inst-handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-branch-inst-handler.cc?ref=14108eda7ee4aaaa4840be8728b3161f8c7bd364", "patch": "@@ -70,7 +70,7 @@ brig_branch_inst_handler::operator () (const BrigBase *base)\n \t  const BrigOperandOffset32_t *operand_ptr\n \t    = (const BrigOperandOffset32_t *) data->bytes;\n \n-\t  vec<tree, va_gc> *&args = i == 0 ? out_args : in_args;\n+\t  bool out_args_p = i == 0;\n \n \t  while (bytes > 0)\n \t    {\n@@ -85,7 +85,7 @@ brig_branch_inst_handler::operator () (const BrigBase *base)\n \t      if (brig_var->type & BRIG_TYPE_ARRAY)\n \t\t{\n \t\t  /* Array return values are passed as the first argument.  */\n-\t\t  args = in_args;\n+\t\t  out_args_p = false;\n \t\t  /* Pass pointer to the element zero and use its element zero\n \t\t     as the base address.  */\n \t\t  tree etype = TREE_TYPE (TREE_TYPE (var));\n@@ -97,8 +97,7 @@ brig_branch_inst_handler::operator () (const BrigBase *base)\n \t\t}\n \n \t      gcc_assert (var != NULL_TREE);\n-\t      vec_safe_reserve (args, 1);\n-\t      vec_safe_push (args, var);\n+\t      vec_safe_push (out_args_p ? out_args : in_args, var);\n \t      ++operand_ptr;\n \t      bytes -= 4;\n \t    }"}, {"sha": "41246ba2bfcde0e8ee672e2c973e0a7f9b453e6a", "filename": "gcc/brig/brigfrontend/brig-to-generic.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14108eda7ee4aaaa4840be8728b3161f8c7bd364/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14108eda7ee4aaaa4840be8728b3161f8c7bd364/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fbrig-to-generic.cc?ref=14108eda7ee4aaaa4840be8728b3161f8c7bd364", "patch": "@@ -248,7 +248,12 @@ brig_to_generic::analyze (const char *brig_blob)\n \t  if (handlers[i].kind == entry->kind)\n \t    handler = handlers[i].handler;\n \t}\n-      b += (*handler) (entry);\n+\n+      int bytes_processed = (*handler) (entry);\n+      if (bytes_processed == 0)\n+\tfatal_error (UNKNOWN_LOCATION, PHSA_ERROR_PREFIX_CORRUPTED_MODULE\n+\t\t     \"Element with 0 bytes.\");\n+      b += bytes_processed;\n     }\n \n   if (m_cf != NULL)\n@@ -335,7 +340,10 @@ brig_to_generic::parse (const char *brig_blob)\n        /* There are no supported pragmas at this moment.  */\n        {BRIG_KIND_DIRECTIVE_PRAGMA, &skipped_handler},\n        {BRIG_KIND_DIRECTIVE_CONTROL, &control_handler},\n-       {BRIG_KIND_DIRECTIVE_EXTENSION, &skipped_handler}};\n+       {BRIG_KIND_DIRECTIVE_EXTENSION, &skipped_handler},\n+       /* BRIG_KIND_NONE entries are valid anywhere.  They can be used\n+\t  for patching BRIGs before finalization.  */\n+       {BRIG_KIND_NONE, &skipped_handler}};\n \n   const BrigSectionHeader *csection_header = (const BrigSectionHeader *) m_code;\n "}, {"sha": "88e87eb6a9d8e9cf023bd62a9e0e4a72c27948e0", "filename": "gcc/brig/brigfrontend/phsa.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14108eda7ee4aaaa4840be8728b3161f8c7bd364/gcc%2Fbrig%2Fbrigfrontend%2Fphsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14108eda7ee4aaaa4840be8728b3161f8c7bd364/gcc%2Fbrig%2Fbrigfrontend%2Fphsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrigfrontend%2Fphsa.h?ref=14108eda7ee4aaaa4840be8728b3161f8c7bd364", "patch": "@@ -61,9 +61,10 @@ typedef struct __attribute__((__packed__))\n #define PHSA_DESC_SECTION_PREFIX \"phsa.desc.\"\n #define PHSA_HOST_DEF_PTR_PREFIX \"__phsa.host_def.\"\n \n-/* The frontend error messages are parsed by the host runtime, known\n+/* The frontend error messages are parsed by the host runtime.  Known\n    prefix strings are used to separate the different runtime error\n    codes.  */\n-#define PHSA_ERROR_PREFIX_INCOMPATIBLE_MODULE \"Incompatible module:\"\n+#define PHSA_ERROR_PREFIX_INCOMPATIBLE_MODULE \"Incompatible module: \"\n+#define PHSA_ERROR_PREFIX_CORRUPTED_MODULE \"Corrupted module: \"\n \n #endif"}]}