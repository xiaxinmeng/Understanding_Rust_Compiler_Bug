{"sha": "c8c99a68775bacea4b8986024cca0d2b0e62b451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjOTlhNjg3NzViYWNlYTRiODk4NjAyNGNjYTBkMmIwZTYyYjQ1MQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2003-01-29T17:37:25Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2003-01-29T17:37:25Z"}, "message": "rs6000.c (function_arg_pass_by_reference): Return true for variable sized types.\n\n        * config/rs6000/rs6000.c (function_arg_pass_by_reference):\n        Return true for variable sized types.\n        (rs6000_va_arg): Handle variable sized types passed by reference\n        on non-SVR4 ABI.\n\nFrom-SVN: r62095", "tree": {"sha": "61f6e6fb66454a09fc43b654799025f56490d708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61f6e6fb66454a09fc43b654799025f56490d708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8c99a68775bacea4b8986024cca0d2b0e62b451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c99a68775bacea4b8986024cca0d2b0e62b451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c99a68775bacea4b8986024cca0d2b0e62b451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c99a68775bacea4b8986024cca0d2b0e62b451/comments", "author": null, "committer": null, "parents": [{"sha": "ccf4d5128446c504efe2133f907f8b13181b0f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf4d5128446c504efe2133f907f8b13181b0f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf4d5128446c504efe2133f907f8b13181b0f3c"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "8d908ff23a6a0eed02eea29c2958c4b40b8dd7c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c99a68775bacea4b8986024cca0d2b0e62b451/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c99a68775bacea4b8986024cca0d2b0e62b451/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8c99a68775bacea4b8986024cca0d2b0e62b451", "patch": "@@ -1,3 +1,10 @@\n+2003-01-29  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (function_arg_pass_by_reference):\n+\tReturn true for variable sized types.\n+\t(rs6000_va_arg): Handle variable sized types passed by reference\n+\ton non-SVR4 ABI.\n+\n 2003-01-29  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (arm_legtimize_address): New function."}, {"sha": "41284e87cc87120f79e3803d73ee6389c06661f1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8c99a68775bacea4b8986024cca0d2b0e62b451/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8c99a68775bacea4b8986024cca0d2b0e62b451/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c8c99a68775bacea4b8986024cca0d2b0e62b451", "patch": "@@ -3314,7 +3314,10 @@ function_arg_partial_nregs (cum, mode, type, named)\n    the argument itself.  The pointer is passed in whatever way is\n    appropriate for passing a pointer to that type.\n \n-   Under V.4, structures and unions are passed by reference.  */\n+   Under V.4, structures and unions are passed by reference.\n+\n+   As an extension to all ABIs, variable sized types are passed by\n+   reference.  */\n \n int\n function_arg_pass_by_reference (cum, mode, type, named)\n@@ -3332,8 +3335,7 @@ function_arg_pass_by_reference (cum, mode, type, named)\n \n       return 1;\n     }\n-\n-  return 0;\n+  return type && int_size_in_bytes (type) <= 0;\n }\n \f\n /* Perform any needed actions needed for a function that is receiving a\n@@ -3569,7 +3571,28 @@ rs6000_va_arg (valist, type)\n   rtx lab_false, lab_over, addr_rtx, r;\n \n   if (DEFAULT_ABI != ABI_V4)\n-    return std_expand_builtin_va_arg (valist, type);\n+    {\n+      /* Variable sized types are passed by reference.  */\n+      if (int_size_in_bytes (type) <= 0)\n+\t{\n+\t  u = build_pointer_type (type);\n+\n+\t  /* Args grow upward.  */\n+\t  t = build (POSTINCREMENT_EXPR, TREE_TYPE (valist), valist,\n+\t\t     build_int_2 (POINTER_SIZE / BITS_PER_UNIT, 0));\n+\t  TREE_SIDE_EFFECTS (t) = 1;\n+\n+\t  t = build1 (NOP_EXPR, build_pointer_type (u), t);\n+\t  TREE_SIDE_EFFECTS (t) = 1;\n+\n+\t  t = build1 (INDIRECT_REF, u, t);\n+\t  TREE_SIDE_EFFECTS (t) = 1;\n+\n+\t  return expand_expr (t, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+\t}\n+      else\n+\treturn std_expand_builtin_va_arg (valist, type);\n+    }\n \n   f_gpr = TYPE_FIELDS (TREE_TYPE (va_list_type_node));\n   f_fpr = TREE_CHAIN (f_gpr);"}]}