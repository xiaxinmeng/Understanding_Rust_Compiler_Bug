{"sha": "2650d9e15a08365a1d76f5065e4f46e92754c235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY1MGQ5ZTE1YTA4MzY1YTFkNzZmNTA2NWU0ZjQ2ZTkyNzU0YzIzNQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-05-05T20:29:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-05T20:29:40Z"}, "message": "cp-tree.h: (opname_tab...\n\n2009-05-05  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* cp-tree.h:\n       \t(opname_tab, assignop_tab, update_member_visibility, yyerror, yyhook,\n       \tmangle_compound_literal): Remove unused declarations.\n       \t(build_vfield_ref, cxx_print_statistics, clone_function_decl,\n       \tadjust_clone_args, maybe_push_cleanup_level, pushtag, make_anon_name,\n       \tpushdecl_top_level_maybe_friend, pushdecl_top_level_and_finish,\n       \tcheck_for_out_of_scope_variable, print_other_binding_stack,\n       \tmaybe_push_decl, cxx_mark_addressable, force_target_expr,\n       \tbuild_target_expr_with_type, finish_case_label,\n       \tcxx_maybe_build_cleanup, begin_eh_spec_block, finish_eh_spec_block,\n       \tcheck_template_keyword, cxx_omp_predetermined_sharing,\n       \tcxx_omp_clause_default_ctor, cxx_omp_clause_copy_ctor,\n       \tcxx_omp_clause_assign_op, cxx_omp_clause_dtor, cxx_omp_finish_clause,\n       \tcxx_omp_privatize_by_reference): Rearrange the declarations line to\n       \tmatch the comment that indicates the .c file which the functions are\n       \tdefined.\n       \t(cxx_print_xnode, cxx_print_decl, cxx_print_type,\n       \tcxx_print_identifier, cxx_print_error_function, pushdecl): Add comment.\n\nFrom-SVN: r147132", "tree": {"sha": "484015a28161cb976787c2b7f55a85cc3eda0262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/484015a28161cb976787c2b7f55a85cc3eda0262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2650d9e15a08365a1d76f5065e4f46e92754c235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2650d9e15a08365a1d76f5065e4f46e92754c235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2650d9e15a08365a1d76f5065e4f46e92754c235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2650d9e15a08365a1d76f5065e4f46e92754c235/comments", "author": null, "committer": null, "parents": [{"sha": "617ab7432ff6bb754d17a7f2c5394fe5ec31c76e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/617ab7432ff6bb754d17a7f2c5394fe5ec31c76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/617ab7432ff6bb754d17a7f2c5394fe5ec31c76e"}], "stats": {"total": 107, "additions": 62, "deletions": 45}, "files": [{"sha": "a4e1725c0d94a1168c1235a8c9d8885787a9f1ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650d9e15a08365a1d76f5065e4f46e92754c235/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650d9e15a08365a1d76f5065e4f46e92754c235/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2650d9e15a08365a1d76f5065e4f46e92754c235", "patch": "@@ -1,3 +1,24 @@\n+2009-05-05  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* cp-tree.h:\n+       \t(opname_tab, assignop_tab, update_member_visibility, yyerror, yyhook,\n+       \tmangle_compound_literal): Remove unused declarations.\n+       \t(build_vfield_ref, cxx_print_statistics, clone_function_decl,\n+       \tadjust_clone_args, maybe_push_cleanup_level, pushtag, make_anon_name,\n+       \tpushdecl_top_level_maybe_friend, pushdecl_top_level_and_finish,\n+       \tcheck_for_out_of_scope_variable, print_other_binding_stack,\n+       \tmaybe_push_decl, cxx_mark_addressable, force_target_expr,\n+       \tbuild_target_expr_with_type, finish_case_label,\n+       \tcxx_maybe_build_cleanup, begin_eh_spec_block, finish_eh_spec_block,\n+       \tcheck_template_keyword, cxx_omp_predetermined_sharing,\n+       \tcxx_omp_clause_default_ctor, cxx_omp_clause_copy_ctor,\n+       \tcxx_omp_clause_assign_op, cxx_omp_clause_dtor, cxx_omp_finish_clause,\n+       \tcxx_omp_privatize_by_reference): Rearrange the declarations line to\n+       \tmatch the comment that indicates the .c file which the functions are\n+       \tdefined.\n+       \t(cxx_print_xnode, cxx_print_decl, cxx_print_type,\n+       \tcxx_print_identifier, cxx_print_error_function, pushdecl): Add comment.\n+\n 2009-05-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* typeck.c (cp_build_compound_expr): Require RHS to have a known"}, {"sha": "ae93e66366a5adedad0a9a8397f05e684a3e88f9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 41, "deletions": 45, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2650d9e15a08365a1d76f5065e4f46e92754c235/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2650d9e15a08365a1d76f5065e4f46e92754c235/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2650d9e15a08365a1d76f5065e4f46e92754c235", "patch": "@@ -3948,11 +3948,6 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, OP_FLAG, TYPENAME_FLAG };\n \n extern void init_reswords (void);\n \n-/* Indexed by TREE_CODE, these tables give C-looking names to\n-   operators represented by TREE_CODES.  For example,\n-   opname_tab[(int) MINUS_EXPR] == \"-\".  */\n-extern const char **opname_tab, **assignop_tab;\n-\n typedef struct GTY(()) operator_name_info_t {\n   /* The IDENTIFIER_NODE for the operator.  */\n   tree identifier;\n@@ -4168,7 +4163,6 @@ extern bool pragma_java_exceptions;\n /* in call.c */\n extern bool check_dtor_name\t\t\t(tree, tree);\n \n-extern tree build_vfield_ref\t\t\t(tree, tree);\n extern tree build_conditional_expr\t\t(tree, tree, tree, \n                                                  tsubst_flags_t);\n extern tree build_addr_func\t\t\t(tree);\n@@ -4217,6 +4211,7 @@ extern void validate_conversion_obstack\t\t(void);\n #endif /* ENABLE_CHECKING */\n \n /* in class.c */\n+extern tree build_vfield_ref\t\t\t(tree, tree);\n extern tree build_base_path\t\t\t(enum tree_code, tree,\n \t\t\t\t\t\t tree, int);\n extern tree convert_to_base\t\t\t(tree, tree, bool, bool);\n@@ -4244,14 +4239,6 @@ extern void push_lang_context\t\t\t(tree);\n extern void pop_lang_context\t\t\t(void);\n extern tree instantiate_type\t\t\t(tree, tree, tsubst_flags_t);\n extern void print_class_statistics\t\t(void);\n-extern void cxx_print_statistics\t\t(void);\n-extern void cxx_print_xnode\t\t\t(FILE *, tree, int);\n-extern void cxx_print_decl\t\t\t(FILE *, tree, int);\n-extern void cxx_print_type\t\t\t(FILE *, tree, int);\n-extern void cxx_print_identifier\t\t(FILE *, tree, int);\n-extern void cxx_print_error_function\t(struct diagnostic_context *,\n-\t\t\t\t\t\t const char *,\n-\t\t\t\t\t\t struct diagnostic_info *);\n extern void build_self_reference\t\t(void);\n extern int same_signature_p\t\t\t(const_tree, const_tree);\n extern void maybe_add_class_template_decl_list\t(tree, tree, int);\n@@ -4273,6 +4260,8 @@ extern bool type_has_user_provided_constructor  (tree);\n extern bool type_has_user_provided_default_constructor (tree);\n extern bool defaultable_fn_p\t\t\t(tree);\n extern void fixup_type_variants\t\t\t(tree);\n+extern void clone_function_decl\t\t\t(tree, int);\n+extern void adjust_clone_args\t\t\t(tree);\n \n /* in cvt.c */\n extern tree convert_to_reference\t\t(tree, tree, int, int, tree);\n@@ -4287,34 +4276,35 @@ extern tree convert_force\t\t\t(tree, tree, int);\n extern tree build_expr_type_conversion\t\t(int, tree, bool);\n extern tree type_promotes_to\t\t\t(tree);\n extern tree perform_qualification_conversions\t(tree, tree);\n-extern void clone_function_decl\t\t\t(tree, int);\n-extern void adjust_clone_args\t\t\t(tree);\n \n-/* decl.c */\n-extern tree poplevel\t\t\t\t(int, int, int);\n+/* in name-lookup.c */\n extern tree pushdecl\t\t\t\t(tree);\n extern tree pushdecl_maybe_friend\t\t(tree, bool);\n+extern void maybe_push_cleanup_level\t\t(tree);\n+extern tree pushtag\t\t\t\t(tree, tree, tag_scope);\n+extern tree make_anon_name\t\t\t(void);\n+extern tree pushdecl_top_level_maybe_friend\t(tree, bool);\n+extern tree pushdecl_top_level_and_finish\t(tree, tree);\n+extern tree check_for_out_of_scope_variable\t(tree);\n+extern void print_other_binding_stack\t\t(struct cp_binding_level *);\n+extern tree maybe_push_decl\t\t\t(tree);\n+\n+/* decl.c */\n+extern tree poplevel\t\t\t\t(int, int, int);\n extern void cxx_init_decl_processing\t\t(void);\n enum cp_tree_node_structure_enum cp_tree_node_structure\n \t\t\t\t\t\t(union lang_tree_node *);\n-extern bool cxx_mark_addressable\t\t(tree);\n-extern void maybe_push_cleanup_level\t\t(tree);\n extern void finish_scope\t\t\t(void);\n extern void push_switch\t\t\t\t(tree);\n extern void pop_switch\t\t\t\t(void);\n-extern tree pushtag\t\t\t\t(tree, tree, tag_scope);\n-extern tree make_anon_name\t\t\t(void);\n extern int decls_match\t\t\t\t(tree, tree);\n extern tree duplicate_decls\t\t\t(tree, tree, bool);\n-extern tree pushdecl_top_level_maybe_friend\t(tree, bool);\n-extern tree pushdecl_top_level_and_finish\t(tree, tree);\n extern tree declare_local_label\t\t\t(tree);\n extern tree define_label\t\t\t(location_t, tree);\n extern void check_goto\t\t\t\t(tree);\n extern bool check_omp_return\t\t\t(void);\n extern tree make_typename_type\t\t\t(tree, tree, enum tag_types, tsubst_flags_t);\n extern tree make_unbound_class_template\t\t(tree, tree, tree, tsubst_flags_t);\n-extern tree check_for_out_of_scope_variable\t(tree);\n extern tree build_library_fn_ptr\t\t(const char *, tree);\n extern tree build_cp_library_fn_ptr\t\t(const char *, tree);\n extern tree push_library_fn\t\t\t(tree, tree, tree);\n@@ -4358,7 +4348,6 @@ extern void maybe_register_incomplete_var\t(tree);\n extern void maybe_commonize_var\t\t\t(tree);\n extern void complete_vars\t\t\t(tree);\n extern void finish_stmt\t\t\t\t(void);\n-extern void print_other_binding_stack\t\t(struct cp_binding_level *);\n extern void revert_static_member_fn\t\t(tree);\n extern void fixup_anonymous_aggr\t\t(tree);\n extern int check_static_variable_definition\t(tree, tree);\n@@ -4369,9 +4358,6 @@ extern int walk_namespaces\t\t\t(walk_namespaces_fn,\n \t\t\t\t\t\t void *);\n extern int wrapup_globals_for_namespace\t\t(tree, void *);\n extern tree create_implicit_typedef\t\t(tree, tree);\n-extern tree maybe_push_decl\t\t\t(tree);\n-extern tree force_target_expr\t\t\t(tree, tree);\n-extern tree build_target_expr_with_type\t\t(tree, tree);\n extern int local_variable_p\t\t\t(const_tree);\n extern tree register_dtor_fn\t\t\t(tree);\n extern tmpl_spec_kind current_tmpl_spec_kind\t(int);\n@@ -4388,6 +4374,8 @@ extern tree reshape_init (tree, tree);\n \n extern bool defer_mark_used_calls;\n extern GTY(()) VEC(tree, gc) *deferred_mark_used_calls;\n+extern tree finish_case_label\t\t\t(tree, tree);\n+extern tree cxx_maybe_build_cleanup\t\t(tree);\n \n /* in decl2.c */\n extern bool check_java_method\t\t\t(tree);\n@@ -4413,7 +4401,6 @@ extern tree coerce_delete_type\t\t\t(tree);\n extern void comdat_linkage\t\t\t(tree);\n extern void determine_visibility\t\t(tree);\n extern void constrain_class_visibility\t\t(tree);\n-extern void update_member_visibility\t\t(tree);\n extern void import_export_decl\t\t\t(tree);\n extern tree build_cleanup\t\t\t(tree);\n extern tree build_offset_ref_call_from_tree\t(tree, tree);\n@@ -4455,6 +4442,8 @@ extern int nothrow_libfn_p\t\t\t(const_tree);\n extern void check_handlers\t\t\t(tree);\n extern void choose_personality_routine\t\t(enum languages);\n extern tree eh_type_info\t\t\t(tree);\n+extern tree begin_eh_spec_block\t\t\t(void);\n+extern void finish_eh_spec_block\t\t(tree, tree);\n \n /* in expr.c */\n extern tree cplus_expand_constant\t\t(tree);\n@@ -4503,8 +4492,6 @@ extern tree copy_decl\t\t\t\t(tree);\n extern tree copy_type\t\t\t\t(tree);\n extern tree cxx_make_type\t\t\t(enum tree_code);\n extern tree make_class_type\t\t\t(enum tree_code);\n-extern void yyerror\t\t\t\t(const char *);\n-extern void yyhook\t\t\t\t(int);\n extern bool cxx_init\t\t\t\t(void);\n extern void cxx_finish\t\t\t\t(void);\n extern bool in_main_input_context\t\t(void);\n@@ -4724,12 +4711,9 @@ extern tree finish_continue_stmt\t\t(void);\n extern tree begin_switch_stmt\t\t\t(void);\n extern void finish_switch_cond\t\t\t(tree, tree);\n extern void finish_switch_stmt\t\t\t(tree);\n-extern tree finish_case_label\t\t\t(tree, tree);\n extern tree finish_goto_stmt\t\t\t(tree);\n extern tree begin_try_block\t\t\t(void);\n extern void finish_try_block\t\t\t(tree);\n-extern tree begin_eh_spec_block\t\t\t(void);\n-extern void finish_eh_spec_block\t\t(tree, tree);\n extern void finish_handler_sequence\t\t(tree);\n extern tree begin_function_try_block\t\t(tree *);\n extern void finish_function_try_block\t\t(tree);\n@@ -4776,7 +4760,6 @@ extern tree finish_base_specifier\t\t(tree, tree, bool);\n extern void finish_member_declaration\t\t(tree);\n extern void qualified_name_lookup_error\t\t(tree, tree, tree,\n \t\t\t\t\t\t location_t);\n-extern void check_template_keyword\t\t(tree);\n extern tree finish_id_expression\t\t(tree, tree, tree,\n \t\t\t\t\t\t cp_id_kind *,\n \t\t\t\t\t\t bool, bool, bool *,\n@@ -4811,13 +4794,6 @@ extern void finish_omp_atomic\t\t\t(enum tree_code, tree, tree);\n extern void finish_omp_barrier\t\t\t(void);\n extern void finish_omp_flush\t\t\t(void);\n extern void finish_omp_taskwait\t\t\t(void);\n-extern enum omp_clause_default_kind cxx_omp_predetermined_sharing (tree);\n-extern tree cxx_omp_clause_default_ctor\t\t(tree, tree, tree);\n-extern tree cxx_omp_clause_copy_ctor\t\t(tree, tree, tree);\n-extern tree cxx_omp_clause_assign_op\t\t(tree, tree, tree);\n-extern tree cxx_omp_clause_dtor\t\t\t(tree, tree);\n-extern void cxx_omp_finish_clause\t\t(tree);\n-extern bool cxx_omp_privatize_by_reference\t(const_tree);\n extern bool cxx_omp_create_clause_info\t\t(tree, tree, bool, bool, bool);\n extern tree baselink_for_fns                    (tree);\n extern void finish_static_assert                (tree, tree, location_t,\n@@ -4827,14 +4803,15 @@ extern tree finish_decltype_type                (tree, bool);\n extern tree finish_trait_expr\t\t\t(enum cp_trait_kind, tree, tree);\n \n /* in tree.c */\n+extern tree force_target_expr\t\t\t(tree, tree);\n+extern tree build_target_expr_with_type\t\t(tree, tree);\n extern void lang_check_failed\t\t\t(const char *, int,\n \t\t\t\t\t\t const char *) ATTRIBUTE_NORETURN;\n extern tree stabilize_expr\t\t\t(tree, tree *);\n extern void stabilize_call\t\t\t(tree, tree *);\n extern void stabilize_aggr_init\t\t\t(tree, tree *);\n extern bool stabilize_init\t\t\t(tree, tree *);\n extern tree add_stmt_to_compound\t\t(tree, tree);\n-extern tree cxx_maybe_build_cleanup\t\t(tree);\n extern void init_tree\t\t\t\t(void);\n extern int pod_type_p\t\t\t\t(const_tree);\n extern bool class_tmpl_impl_spec_p\t\t(const_tree);\n@@ -4905,7 +4882,19 @@ extern tree cp_save_expr\t\t\t(tree);\n extern bool cast_valid_in_integral_constant_expression_p (tree);\n extern bool cxx_type_hash_eq\t\t\t(const_tree, const_tree);\n \n+extern void cxx_print_statistics\t\t(void);\n+\n+/* in ptree.c */\n+extern void cxx_print_xnode\t\t\t(FILE *, tree, int);\n+extern void cxx_print_decl\t\t\t(FILE *, tree, int);\n+extern void cxx_print_type\t\t\t(FILE *, tree, int);\n+extern void cxx_print_identifier\t\t(FILE *, tree, int);\n+extern void cxx_print_error_function\t(struct diagnostic_context *,\n+\t\t\t\t\t\t const char *,\n+\t\t\t\t\t\t struct diagnostic_info *);\n+\n /* in typeck.c */\n+extern bool cxx_mark_addressable\t\t(tree);\n extern int string_conv_p\t\t\t(const_tree, const_tree, int);\n extern tree cp_truthvalue_conversion\t\t(tree);\n extern tree condition_conversion\t\t(tree);\n@@ -4994,6 +4983,7 @@ extern tree convert_member_func_to_ptr\t\t(tree, tree);\n extern tree convert_ptrmem\t\t\t(tree, tree, bool, bool);\n extern int lvalue_or_else\t\t\t(tree, enum lvalue_use,\n                                                  tsubst_flags_t);\n+extern void check_template_keyword\t\t(tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);\n@@ -5031,7 +5021,6 @@ extern tree mangle_thunk\t\t\t(tree, int, tree, tree);\n extern tree mangle_conv_op_name_for_type\t(tree);\n extern tree mangle_guard_variable\t\t(tree);\n extern tree mangle_ref_init_variable\t\t(tree);\n-extern tree mangle_compound_literal\t\t(void);\n \n /* in dump.c */\n extern bool cp_dump_tree\t\t\t(void *, tree);\n@@ -5051,6 +5040,13 @@ extern void init_shadowed_var_for_decl\t\t(void);\n extern int cp_gimplify_expr\t\t\t(tree *, gimple_seq *,\n \t\t\t\t\t\t gimple_seq *);\n extern void cp_genericize\t\t\t(tree);\n+extern enum omp_clause_default_kind cxx_omp_predetermined_sharing (tree);\n+extern tree cxx_omp_clause_default_ctor\t\t(tree, tree, tree);\n+extern tree cxx_omp_clause_copy_ctor\t\t(tree, tree, tree);\n+extern tree cxx_omp_clause_assign_op\t\t(tree, tree, tree);\n+extern tree cxx_omp_clause_dtor\t\t\t(tree, tree);\n+extern void cxx_omp_finish_clause\t\t(tree);\n+extern bool cxx_omp_privatize_by_reference\t(const_tree);\n \n /* -- end of C++ */\n "}]}