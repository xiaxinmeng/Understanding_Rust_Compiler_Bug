{"sha": "6eb6875d7ec398935d3ae76f805e33db0c3773dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmViNjg3NWQ3ZWMzOTg5MzVkM2FlNzZmODA1ZTMzZGIwYzM3NzNkZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-10-16T16:06:07Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-10-16T16:06:07Z"}, "message": "re PR tree-optimization/20165 (Pointer does not really escape with write)\n\n2010-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/20165\n\tPR fortran/31593\n\tPR fortran/43665\n\t* gfortran.map:  Add _gfortran_transfer_array_write,\n\t_gfortran_transfer_array_write, _gfortran_transfer_character_write,\n\t_gfortran_transfer_character_wide_write,\n\t_gfortran_transfer_complex_write,\n\t_gfortran_transfer_integer_write,\n\t_gfortran_transfer_logical_write and\n\t_gfortran_transfer_real_write.\n\t* io/transfer.c (transfer_integer_write):  Add prototype and\n\tfunction body as call to the original function, without the\n\t_write.\n\t(transfer_real_write):  Likewise.\n\t(transfer_logical_write):  Likewise.\n\t(transfer_character_write):  Likewise.\n\t(transfer_character_wide_write):  Likewise.\n\t(transfer_complex_write):  Likewise.\n\t(transfer_array_write):  Likewise.\n\n2010-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/20165\n\tPR fortran/31593\n\tPR fortran/43665\n\t* trans-io.c (enum iocall): Add IOCALL_X_INTEGER_WRITE,\n\tIOCALL_X_LOGICAL_WRITE, IOCALL_X_CHARACTER_WRITE,\n\tIOCALL_X_CHARACTER_WIDE_WRIE, IOCALL_X_REAL_WRITE,\n\tIOCALL_X_COMPLEX_WRITE and IOCALL_X_ARRAY_WRITE.\n\t(gfc_build_io_library_fndecls):  Add corresponding function\n\tdecls.\n\t(transfer_expr):  If the current transfer is a READ, use\n\tthe iocall with the original version, otherwise the version\n\twith _WRITE.\n\t(transfer_array_desc):  Likewise.\n\nFrom-SVN: r165559", "tree": {"sha": "ef2e1984f68327623f3236a0f91f67926babb5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef2e1984f68327623f3236a0f91f67926babb5ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eb6875d7ec398935d3ae76f805e33db0c3773dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb6875d7ec398935d3ae76f805e33db0c3773dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb6875d7ec398935d3ae76f805e33db0c3773dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb6875d7ec398935d3ae76f805e33db0c3773dd/comments", "author": null, "committer": null, "parents": [{"sha": "08d78391b727da035b0f51e1c52fc2376d340e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d78391b727da035b0f51e1c52fc2376d340e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08d78391b727da035b0f51e1c52fc2376d340e2e"}], "stats": {"total": 191, "additions": 180, "deletions": 11}, "files": [{"sha": "da01a0f7564a9859cc2b81aba67a904db219ec0f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb6875d7ec398935d3ae76f805e33db0c3773dd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb6875d7ec398935d3ae76f805e33db0c3773dd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6eb6875d7ec398935d3ae76f805e33db0c3773dd", "patch": "@@ -1,3 +1,18 @@\n+2010-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/20165\n+\tPR fortran/31593\n+\tPR fortran/43665\n+\t* trans-io.c (enum iocall): Add IOCALL_X_INTEGER_WRITE,\n+\tIOCALL_X_LOGICAL_WRITE, IOCALL_X_CHARACTER_WRITE,\n+\tIOCALL_X_CHARACTER_WIDE_WRIE, IOCALL_X_REAL_WRITE,\n+\tIOCALL_X_COMPLEX_WRITE and IOCALL_X_ARRAY_WRITE.\n+\t(gfc_build_io_library_fndecls):  Add corresponding function\n+\tdecls.\n+\t(transfer_expr):  If the current transfer is a READ, use\n+\tthe iocall with the original version, otherwise the version\n+\twith _WRITE.\n+\t(transfer_array_desc):  Likewise.\n 2010-10-15  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45186"}, {"sha": "1c9ac2de33acdde48e143efabcb81963fbf1534a", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 76, "deletions": 11, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb6875d7ec398935d3ae76f805e33db0c3773dd/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb6875d7ec398935d3ae76f805e33db0c3773dd/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=6eb6875d7ec398935d3ae76f805e33db0c3773dd", "patch": "@@ -115,12 +115,19 @@ enum iocall\n   IOCALL_WRITE,\n   IOCALL_WRITE_DONE,\n   IOCALL_X_INTEGER,\n+  IOCALL_X_INTEGER_WRITE,\n   IOCALL_X_LOGICAL,\n+  IOCALL_X_LOGICAL_WRITE,\n   IOCALL_X_CHARACTER,\n+  IOCALL_X_CHARACTER_WRITE,\n   IOCALL_X_CHARACTER_WIDE,\n+  IOCALL_X_CHARACTER_WIDE_WRITE,\n   IOCALL_X_REAL,\n+  IOCALL_X_REAL_WRITE,\n   IOCALL_X_COMPLEX,\n+  IOCALL_X_COMPLEX_WRITE,\n   IOCALL_X_ARRAY,\n+  IOCALL_X_ARRAY_WRITE,\n   IOCALL_OPEN,\n   IOCALL_CLOSE,\n   IOCALL_INQUIRE,\n@@ -303,42 +310,71 @@ gfc_build_io_library_fndecls (void)\n   for (ptype = IOPARM_ptype_common; ptype < IOPARM_ptype_num; ptype++)\n     gfc_build_st_parameter ((enum ioparam_type) ptype, types);\n \n-  /* Define the transfer functions.\n-     TODO: Split them between READ and WRITE to allow further\n-     optimizations, e.g. by using aliases?  */\n+  /* Define the transfer functions.  */\n \n   dt_parm_type = build_pointer_type (st_parameter[IOPARM_ptype_dt].type);\n \n   iocall[IOCALL_X_INTEGER] = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"transfer_integer\")), \".wW\",\n \tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n \n+  iocall[IOCALL_X_INTEGER_WRITE] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_integer_write\")), \".wR\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n   iocall[IOCALL_X_LOGICAL] = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"transfer_logical\")), \".wW\",\n \tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n \n+  iocall[IOCALL_X_LOGICAL_WRITE] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_logical_write\")), \".wR\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n   iocall[IOCALL_X_CHARACTER] = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"transfer_character\")), \".wW\",\n \tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n \n+  iocall[IOCALL_X_CHARACTER_WRITE] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_character_write\")), \".wR\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n   iocall[IOCALL_X_CHARACTER_WIDE] = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"transfer_character_wide\")), \".wW\",\n \tvoid_type_node, 4, dt_parm_type, pvoid_type_node,\n \tgfc_charlen_type_node, gfc_int4_type_node);\n \n+  iocall[IOCALL_X_CHARACTER_WIDE_WRITE] =\n+    gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_character_wide_write\")), \".wR\",\n+\tvoid_type_node, 4, dt_parm_type, pvoid_type_node,\n+\tgfc_charlen_type_node, gfc_int4_type_node);\n+\n   iocall[IOCALL_X_REAL] = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"transfer_real\")), \".wW\",\n \tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n \n+  iocall[IOCALL_X_REAL_WRITE] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_real_write\")), \".wR\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n   iocall[IOCALL_X_COMPLEX] = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"transfer_complex\")), \".wW\",\n \tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n \n+  iocall[IOCALL_X_COMPLEX_WRITE] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_complex_write\")), \".wR\",\n+\tvoid_type_node, 3, dt_parm_type, pvoid_type_node, gfc_int4_type_node);\n+\n   iocall[IOCALL_X_ARRAY] = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"transfer_array\")), \".wW\",\n \tvoid_type_node, 4, dt_parm_type, pvoid_type_node,\n \tinteger_type_node, gfc_charlen_type_node);\n \n+  iocall[IOCALL_X_ARRAY_WRITE] = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"transfer_array_write\")), \".wr\",\n+\tvoid_type_node, 4, dt_parm_type, pvoid_type_node,\n+\tinteger_type_node, gfc_charlen_type_node);\n+\n   /* Library entry points */\n \n   iocall[IOCALL_READ] = gfc_build_library_function_decl_with_spec (\n@@ -2037,22 +2073,38 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n     {\n     case BT_INTEGER:\n       arg2 = build_int_cst (NULL_TREE, kind);\n-      function = iocall[IOCALL_X_INTEGER];\n+      if (last_dt == READ)\n+\tfunction = iocall[IOCALL_X_INTEGER];\n+      else\n+\tfunction = iocall[IOCALL_X_INTEGER_WRITE];\n+\n       break;\n \n     case BT_REAL:\n       arg2 = build_int_cst (NULL_TREE, kind);\n-      function = iocall[IOCALL_X_REAL];\n+      if (last_dt == READ)\n+\tfunction = iocall[IOCALL_X_REAL];\n+      else\n+\tfunction = iocall[IOCALL_X_REAL_WRITE];\n+\n       break;\n \n     case BT_COMPLEX:\n       arg2 = build_int_cst (NULL_TREE, kind);\n-      function = iocall[IOCALL_X_COMPLEX];\n+      if (last_dt == READ)\n+\tfunction = iocall[IOCALL_X_COMPLEX];\n+      else\n+\tfunction = iocall[IOCALL_X_COMPLEX_WRITE];\n+\n       break;\n \n     case BT_LOGICAL:\n       arg2 = build_int_cst (NULL_TREE, kind);\n-      function = iocall[IOCALL_X_LOGICAL];\n+      if (last_dt == READ)\n+\tfunction = iocall[IOCALL_X_LOGICAL];\n+      else\n+\tfunction = iocall[IOCALL_X_LOGICAL_WRITE];\n+\n       break;\n \n     case BT_CHARACTER:\n@@ -2069,7 +2121,11 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n \t      arg2 = fold_convert (gfc_charlen_type_node, arg2);\n \t    }\n \t  arg3 = build_int_cst (NULL_TREE, kind);\n-\t  function = iocall[IOCALL_X_CHARACTER_WIDE];\n+\t  if (last_dt == READ)\n+\t    function = iocall[IOCALL_X_CHARACTER_WIDE];\n+\t  else\n+\t    function = iocall[IOCALL_X_CHARACTER_WIDE_WRITE];\n+\t    \n \t  tmp = gfc_build_addr_expr (NULL_TREE, dt_parm);\n \t  tmp = build_call_expr_loc (input_location,\n \t\t\t\t function, 4, tmp, addr_expr, arg2, arg3);\n@@ -2088,7 +2144,11 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n \t  gcc_assert (TREE_CODE (TREE_TYPE (tmp)) == ARRAY_TYPE);\n \t  arg2 = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (tmp)));\n \t}\n-      function = iocall[IOCALL_X_CHARACTER];\n+      if (last_dt == READ)\n+\tfunction = iocall[IOCALL_X_CHARACTER];\n+      else\n+\tfunction = iocall[IOCALL_X_CHARACTER_WRITE];\n+\n       break;\n \n     case BT_DERIVED:\n@@ -2139,7 +2199,7 @@ transfer_expr (gfc_se * se, gfc_typespec * ts, tree addr_expr, gfc_code * code)\n static void\n transfer_array_desc (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n {\n-  tree tmp, charlen_arg, kind_arg;\n+  tree tmp, charlen_arg, kind_arg, io_call;\n \n   if (ts->type == BT_CHARACTER)\n     charlen_arg = se->string_length;\n@@ -2149,8 +2209,13 @@ transfer_array_desc (gfc_se * se, gfc_typespec * ts, tree addr_expr)\n   kind_arg = build_int_cst (NULL_TREE, ts->kind);\n \n   tmp = gfc_build_addr_expr (NULL_TREE, dt_parm);\n+  if (last_dt == READ)\n+    io_call = iocall[IOCALL_X_ARRAY];\n+  else\n+    io_call = iocall[IOCALL_X_ARRAY_WRITE];\n+\n   tmp = build_call_expr_loc (UNKNOWN_LOCATION,\n-\t\t\t iocall[IOCALL_X_ARRAY], 4,\n+\t\t\t io_call, 4,\n \t\t\t tmp, addr_expr, kind_arg, charlen_arg);\n   gfc_add_expr_to_block (&se->pre, tmp);\n   gfc_add_block_to_block (&se->pre, &se->post);"}, {"sha": "adcb386bb6cc454de1cf086225283a8e1bbe2a66", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb6875d7ec398935d3ae76f805e33db0c3773dd/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb6875d7ec398935d3ae76f805e33db0c3773dd/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6eb6875d7ec398935d3ae76f805e33db0c3773dd", "patch": "@@ -1,3 +1,25 @@\n+2010-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/20165\n+\tPR fortran/31593\n+\tPR fortran/43665\n+\t* gfortran.map:  Add _gfortran_transfer_array_write,\n+\t_gfortran_transfer_array_write, _gfortran_transfer_character_write,\n+\t_gfortran_transfer_character_wide_write,\n+\t_gfortran_transfer_complex_write,\n+\t_gfortran_transfer_integer_write,\n+\t_gfortran_transfer_logical_write and\n+\t_gfortran_transfer_real_write.\n+\t* io/transfer.c (transfer_integer_write):  Add prototype and\n+\tfunction body as call to the original function, without the\n+\t_write.\n+\t(transfer_real_write):  Likewise.\n+\t(transfer_logical_write):  Likewise.\n+\t(transfer_character_write):  Likewise.\n+\t(transfer_character_wide_write):  Likewise.\n+\t(transfer_complex_write):  Likewise.\n+\t(transfer_array_write):  Likewise.\n+\n 2010-09-22  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/45710"}, {"sha": "c85ebf7ec9021e43308fd2c8fd21aac589609754", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb6875d7ec398935d3ae76f805e33db0c3773dd/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb6875d7ec398935d3ae76f805e33db0c3773dd/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=6eb6875d7ec398935d3ae76f805e33db0c3773dd", "patch": "@@ -1141,6 +1141,13 @@ GFORTRAN_1.4 {\n     _gfortran_parity_l8;\n     _gfortran_parity_l16;\n     _gfortran_selected_real_kind2008;\n+    _gfortran_transfer_array_write;\n+    _gfortran_transfer_character_write;\n+    _gfortran_transfer_character_wide_write;\n+    _gfortran_transfer_complex_write;\n+    _gfortran_transfer_integer_write;\n+    _gfortran_transfer_logical_write;\n+    _gfortran_transfer_real_write;\n } GFORTRAN_1.3; \n \n F2C_1.0 {"}, {"sha": "41d5a42f04cfc9203cd2a9ce943ab8307cf65902", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb6875d7ec398935d3ae76f805e33db0c3773dd/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb6875d7ec398935d3ae76f805e33db0c3773dd/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=6eb6875d7ec398935d3ae76f805e33db0c3773dd", "patch": "@@ -67,25 +67,48 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n extern void transfer_integer (st_parameter_dt *, void *, int);\n export_proto(transfer_integer);\n \n+extern void transfer_integer_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_integer_write);\n+\n extern void transfer_real (st_parameter_dt *, void *, int);\n export_proto(transfer_real);\n \n+extern void transfer_real_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_real_write);\n+\n extern void transfer_logical (st_parameter_dt *, void *, int);\n export_proto(transfer_logical);\n \n+extern void transfer_logical_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_logical_write);\n+\n extern void transfer_character (st_parameter_dt *, void *, int);\n export_proto(transfer_character);\n \n+extern void transfer_character_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_character_write);\n+\n extern void transfer_character_wide (st_parameter_dt *, void *, int, int);\n export_proto(transfer_character_wide);\n \n+extern void transfer_character_wide_write (st_parameter_dt *,\n+\t\t\t\t\t   void *, int, int);\n+export_proto(transfer_character_wide_write);\n+\n extern void transfer_complex (st_parameter_dt *, void *, int);\n export_proto(transfer_complex);\n \n+extern void transfer_complex_write (st_parameter_dt *, void *, int);\n+export_proto(transfer_complex_write);\n+\n extern void transfer_array (st_parameter_dt *, gfc_array_char *, int,\n \t\t\t    gfc_charlen_type);\n export_proto(transfer_array);\n \n+extern void transfer_array_write (st_parameter_dt *, gfc_array_char *, int,\n+\t\t\t    gfc_charlen_type);\n+export_proto(transfer_array_write);\n+\n static void us_read (st_parameter_dt *, int);\n static void us_write (st_parameter_dt *, int);\n static void next_record_r_unf (st_parameter_dt *, int);\n@@ -1847,6 +1870,11 @@ transfer_integer (st_parameter_dt *dtp, void *p, int kind)\n   dtp->u.p.transfer (dtp, BT_INTEGER, p, kind, kind, 1);\n }\n \n+void\n+transfer_integer_write (st_parameter_dt *dtp, void *p, int kind)\n+{\n+  transfer_integer (dtp, p, kind);\n+}\n \n void\n transfer_real (st_parameter_dt *dtp, void *p, int kind)\n@@ -1858,6 +1886,11 @@ transfer_real (st_parameter_dt *dtp, void *p, int kind)\n   dtp->u.p.transfer (dtp, BT_REAL, p, kind, size, 1);\n }\n \n+void\n+transfer_real_write (st_parameter_dt *dtp, void *p, int kind)\n+{\n+  transfer_real (dtp, p, kind);\n+}\n \n void\n transfer_logical (st_parameter_dt *dtp, void *p, int kind)\n@@ -1867,6 +1900,11 @@ transfer_logical (st_parameter_dt *dtp, void *p, int kind)\n   dtp->u.p.transfer (dtp, BT_LOGICAL, p, kind, kind, 1);\n }\n \n+void\n+transfer_logical_write (st_parameter_dt *dtp, void *p, int kind)\n+{\n+  transfer_logical (dtp, p, kind);\n+}\n \n void\n transfer_character (st_parameter_dt *dtp, void *p, int len)\n@@ -1886,6 +1924,12 @@ transfer_character (st_parameter_dt *dtp, void *p, int len)\n   dtp->u.p.transfer (dtp, BT_CHARACTER, p, 1, len, 1);\n }\n \n+void\n+transfer_character_write (st_parameter_dt *dtp, void *p, int len)\n+{\n+  transfer_character (dtp, p, len);\n+}\n+\n void\n transfer_character_wide (st_parameter_dt *dtp, void *p, int len, int kind)\n {\n@@ -1904,6 +1948,11 @@ transfer_character_wide (st_parameter_dt *dtp, void *p, int len, int kind)\n   dtp->u.p.transfer (dtp, BT_CHARACTER, p, kind, len, 1);\n }\n \n+void\n+transfer_character_wide_write (st_parameter_dt *dtp, void *p, int len, int kind)\n+{\n+  transfer_character_wide (dtp, p, len, kind);\n+}\n \n void\n transfer_complex (st_parameter_dt *dtp, void *p, int kind)\n@@ -1915,6 +1964,11 @@ transfer_complex (st_parameter_dt *dtp, void *p, int kind)\n   dtp->u.p.transfer (dtp, BT_COMPLEX, p, kind, size, 1);\n }\n \n+void\n+transfer_complex_write (st_parameter_dt *dtp, void *p, int kind)\n+{\n+  transfer_complex (dtp, p, kind);\n+}\n \n void\n transfer_array (st_parameter_dt *dtp, gfc_array_char *desc, int kind,\n@@ -2020,6 +2074,12 @@ transfer_array (st_parameter_dt *dtp, gfc_array_char *desc, int kind,\n     }\n }\n \n+void\n+transfer_array_write (st_parameter_dt *dtp, gfc_array_char *desc, int kind,\n+\t\t      gfc_charlen_type charlen)\n+{\n+  transfer_array (dtp, desc, kind, charlen);\n+}\n \n /* Preposition a sequential unformatted file while reading.  */\n "}]}