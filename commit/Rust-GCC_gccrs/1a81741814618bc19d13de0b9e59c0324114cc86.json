{"sha": "1a81741814618bc19d13de0b9e59c0324114cc86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE4MTc0MTgxNDYxOGJjMTlkMTNkZTBiOWU1OWMwMzI0MTE0Y2M4Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-05-17T09:01:36Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-05-17T09:01:36Z"}, "message": "Introduce dump_flags_t type and use it instead of int type.\n\n2017-05-17  Martin Liska  <mliska@suse.cz>\n\n\t* class.c (dump_class_hierarchy): Introduce dump_flags_t type and\n\tuse it instead of int type.\n\t(dump_vtable): Likewise.\n\t(dump_vtt): Likewise.\n\t* decl2.c (dump_tu): Likewise.\n2017-05-17  Martin Liska  <mliska@suse.cz>\n\n\t* c-common.h: Introduce dump_flags_t type and\n\tuse it instead of int type.\n\t* c-gimplify.c (c_genericize): Likewise.\n\t* c-opts.c: Likewise.\n2017-05-17  Martin Liska  <mliska@suse.cz>\n\n\t* c-decl.c (c_parse_final_cleanups): Introduce dump_flags_t type and\n\tuse it instead of int type.\n2017-05-17  Martin Liska  <mliska@suse.cz>\n\n\t* cfg.c: Introduce dump_flags_t type and\n\tuse it instead of int type.\n\t* cfg.h: Likewise.\n\t* cfghooks.c: Likewise.\n\t* cfghooks.h (struct cfg_hooks): Likewise.\n\t* cfgrtl.c: Likewise.\n\t* cfgrtl.h: Likewise.\n\t* cgraph.c (cgraph_node::get_body): Likewise.\n\t* coretypes.h: Likewise.\n\t* domwalk.c: Likewise.\n\t* domwalk.h: Likewise.\n\t* dumpfile.c (struct dump_option_value_info): Likewise.\n\t(dump_enable_all): Likewise.\n\t(dump_switch_p_1): Likewise.\n\t(opt_info_switch_p): Likewise.\n\t* dumpfile.h (enum tree_dump_index): Likewise.\n\t(struct dump_file_info): Likewise.\n\t* genemit.c: Likewise.\n\t* generic-match-head.c: Likewise.\n\t* gengtype.c (open_base_files): Likewise.\n\t* gimple-pretty-print.c: Likewise.\n\t* gimple-pretty-print.h: Likewise.\n\t* graph.c (print_graph_cfg): Likewise.\n\t* graphite-scop-detection.c (dot_all_sese): Likewise.\n\t* ipa-devirt.c (build_type_inheritance_graph): Likewise.\n\t* loop-unroll.c (report_unroll): Likewise.\n\t* passes.c (pass_manager::register_one_dump_file): Likewise.\n\t* print-tree.c: Likewise.\n\t* statistics.c: Likewise.\n\t* tree-cfg.c: Likewise.\n\t* tree-cfg.h: Likewise.\n\t* tree-dfa.c: Likewise.\n\t* tree-dfa.h: Likewise.\n\t* tree-dump.c (dump_function): Likewise.\n\t* tree-dump.h (struct dump_info): Likewise.\n\t* tree-pretty-print.c: Likewise.\n\t* tree-pretty-print.h: Likewise.\n\t* tree-ssa-live.c: Likewise.\n\t* tree-ssa-live.h: Likewise.\n\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Likewise.\n\t* tree-vect-loop.c: Likewise.\n\t* tree-vect-slp.c: Likewise.\n\nFrom-SVN: r248140", "tree": {"sha": "10c3b673319b0cdfae3db0314371cb6732181161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10c3b673319b0cdfae3db0314371cb6732181161"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a81741814618bc19d13de0b9e59c0324114cc86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a81741814618bc19d13de0b9e59c0324114cc86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a81741814618bc19d13de0b9e59c0324114cc86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a81741814618bc19d13de0b9e59c0324114cc86/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2fa0a8bdfe15c427f5750f008509ed518683e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2fa0a8bdfe15c427f5750f008509ed518683e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2fa0a8bdfe15c427f5750f008509ed518683e2b"}], "stats": {"total": 494, "additions": 300, "deletions": 194}, "files": [{"sha": "072eff70abccbdcbe6b90241d81acf5e28337bff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -1,3 +1,48 @@\n+2017-05-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* cfg.c: Introduce dump_flags_t type and\n+\tuse it instead of int type.\n+\t* cfg.h: Likewise.\n+\t* cfghooks.c: Likewise.\n+\t* cfghooks.h (struct cfg_hooks): Likewise.\n+\t* cfgrtl.c: Likewise.\n+\t* cfgrtl.h: Likewise.\n+\t* cgraph.c (cgraph_node::get_body): Likewise.\n+\t* coretypes.h: Likewise.\n+\t* domwalk.c: Likewise.\n+\t* domwalk.h: Likewise.\n+\t* dumpfile.c (struct dump_option_value_info): Likewise.\n+\t(dump_enable_all): Likewise.\n+\t(dump_switch_p_1): Likewise.\n+\t(opt_info_switch_p): Likewise.\n+\t* dumpfile.h (enum tree_dump_index): Likewise.\n+\t(struct dump_file_info): Likewise.\n+\t* genemit.c: Likewise.\n+\t* generic-match-head.c: Likewise.\n+\t* gengtype.c (open_base_files): Likewise.\n+\t* gimple-pretty-print.c: Likewise.\n+\t* gimple-pretty-print.h: Likewise.\n+\t* graph.c (print_graph_cfg): Likewise.\n+\t* graphite-scop-detection.c (dot_all_sese): Likewise.\n+\t* ipa-devirt.c (build_type_inheritance_graph): Likewise.\n+\t* loop-unroll.c (report_unroll): Likewise.\n+\t* passes.c (pass_manager::register_one_dump_file): Likewise.\n+\t* print-tree.c: Likewise.\n+\t* statistics.c: Likewise.\n+\t* tree-cfg.c: Likewise.\n+\t* tree-cfg.h: Likewise.\n+\t* tree-dfa.c: Likewise.\n+\t* tree-dfa.h: Likewise.\n+\t* tree-dump.c (dump_function): Likewise.\n+\t* tree-dump.h (struct dump_info): Likewise.\n+\t* tree-pretty-print.c: Likewise.\n+\t* tree-pretty-print.h: Likewise.\n+\t* tree-ssa-live.c: Likewise.\n+\t* tree-ssa-live.h: Likewise.\n+\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Likewise.\n+\t* tree-vect-loop.c: Likewise.\n+\t* tree-vect-slp.c: Likewise.\n+\n 2017-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n "}, {"sha": "4b1c226da8131f170a6100d4db568239d54987b0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -1,3 +1,10 @@\n+2017-05-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-common.h: Introduce dump_flags_t type and\n+\tuse it instead of int type.\n+\t* c-gimplify.c (c_genericize): Likewise.\n+\t* c-opts.c: Likewise.\n+\n 2017-05-17  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c (c_save_expr): Remove."}, {"sha": "5ce3b458af3da49802707f28ea2c2848dc4acd11", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -903,7 +903,7 @@ extern bool c_common_post_options (const char **);\n extern bool c_common_init (void);\n extern void c_common_finish (void);\n extern void c_common_parse_file (void);\n-extern FILE *get_dump_info (int, int *);\n+extern FILE *get_dump_info (int, dump_flags_t *);\n extern alias_set_type c_common_get_alias_set (tree);\n extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (const_tree);"}, {"sha": "6a4b7c77a34a4fba1b5208cadaa3d4f10b750897", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -115,7 +115,7 @@ void\n c_genericize (tree fndecl)\n {\n   FILE *dump_orig;\n-  int local_dump_flags;\n+  dump_flags_t local_dump_flags;\n   struct cgraph_node *cgn;\n \n   if (flag_sanitize & SANITIZE_BOUNDS)"}, {"sha": "d294c37bdbad6e2cfc7b8253a295f3e7ea0cf48b", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -101,9 +101,9 @@ static size_t include_cursor;\n \n /* Dump files/flags to use during parsing.  */\n static FILE *original_dump_file = NULL;\n-static int original_dump_flags;\n+static dump_flags_t original_dump_flags;\n static FILE *class_dump_file = NULL;\n-static int class_dump_flags;\n+static dump_flags_t class_dump_flags;\n \n /* Whether any standard preincluded header has been preincluded.  */\n static bool done_preinclude;\n@@ -1136,7 +1136,7 @@ c_common_parse_file (void)\n \n /* Returns the appropriate dump file for PHASE to dump with FLAGS.  */\n FILE *\n-get_dump_info (int phase, int *flags)\n+get_dump_info (int phase, dump_flags_t *flags)\n {\n   gcc_assert (phase == TDI_original || phase == TDI_class);\n   if (phase == TDI_original)"}, {"sha": "e0c1e9933c4f9fc71910b9be89ab6475bbe43ca7", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -1,3 +1,8 @@\n+2017-05-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-decl.c (c_parse_final_cleanups): Introduce dump_flags_t type and\n+\tuse it instead of int type.\n+\n 2017-05-17  Marek Polacek  <polacek@redhat.com>\n \n \t* c-convert.c (convert): Replace c_save_expr with save_expr.  Don't"}, {"sha": "5b4bb4946c64a9afb72a7a0ef57798cf68e52909", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -11243,7 +11243,7 @@ c_parse_final_cleanups (void)\n   if (ext_block)\n     {\n       tree tmp = BLOCK_VARS (ext_block);\n-      int flags;\n+      dump_flags_t flags;\n       FILE * stream = dump_begin (TDI_tu, &flags);\n       if (stream && tmp)\n \t{"}, {"sha": "ffac69f266d1effeb774c328432646836f9c0821", "filename": "gcc/cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -396,7 +396,7 @@ clear_bb_flags (void)\n    It is still practical to have them reported for debugging of simple\n    testcases.  */\n static void\n-check_bb_profile (basic_block bb, FILE * file, int indent, int flags)\n+check_bb_profile (basic_block bb, FILE * file, int indent, dump_flags_t flags)\n {\n   edge e;\n   int sum = 0;\n@@ -474,7 +474,7 @@ check_bb_profile (basic_block bb, FILE * file, int indent, int flags)\n }\n \f\n void\n-dump_edge_info (FILE *file, edge e, int flags, int do_succ)\n+dump_edge_info (FILE *file, edge e, dump_flags_t flags, int do_succ)\n {\n   basic_block side = (do_succ ? e->dest : e->src);\n   bool do_details = false;\n@@ -713,7 +713,7 @@ debug_bb_n (int n)\n    that maybe_hot_bb_p and probably_never_executed_bb_p don't ICE.  */\n \n void\n-dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n+dump_bb_info (FILE *outf, basic_block bb, int indent, dump_flags_t flags,\n \t      bool do_header, bool do_footer)\n {\n   edge_iterator ei;\n@@ -833,7 +833,7 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n /* Dumps a brief description of cfg to FILE.  */\n \n void\n-brief_dump_cfg (FILE *file, int flags)\n+brief_dump_cfg (FILE *file, dump_flags_t flags)\n {\n   basic_block bb;\n "}, {"sha": "f71c00e6df839712c349ec862e177f8ccd3fdab2", "filename": "gcc/cfg.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -89,7 +89,7 @@ extern void remove_edge_raw (edge);\n extern void redirect_edge_succ (edge, basic_block);\n extern void redirect_edge_pred (edge, basic_block);\n extern void clear_bb_flags (void);\n-extern void dump_edge_info (FILE *, edge, int, int);\n+extern void dump_edge_info (FILE *, edge, dump_flags_t, int);\n extern void debug (edge_def &ref);\n extern void debug (edge_def *ptr);\n extern void alloc_aux_for_blocks (int);\n@@ -101,8 +101,8 @@ extern void clear_aux_for_edges (void);\n extern void free_aux_for_edges (void);\n extern void debug_bb (basic_block);\n extern basic_block debug_bb_n (int);\n-extern void dump_bb_info (FILE *, basic_block, int, int, bool, bool);\n-extern void brief_dump_cfg (FILE *, int);\n+extern void dump_bb_info (FILE *, basic_block, int, dump_flags_t, bool, bool);\n+extern void brief_dump_cfg (FILE *, dump_flags_t);\n extern void update_bb_profile_for_threading (basic_block, int, gcov_type, edge);\n extern void scale_bbs_frequencies_int (basic_block *, int, int, int);\n extern void scale_bbs_frequencies_gcov_type (basic_block *, int, gcov_type,"}, {"sha": "1644c9ff31c415d15db89310d784ee28f3d3b5c5", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -269,7 +269,7 @@ verify_flow_info (void)\n    representation-specific information.  */\n \n void\n-dump_bb (FILE *outf, basic_block bb, int indent, int flags)\n+dump_bb (FILE *outf, basic_block bb, int indent, dump_flags_t flags)\n {\n   if (flags & TDF_BLOCKS)\n     dump_bb_info (outf, bb, indent, flags, true, false);\n@@ -319,7 +319,7 @@ dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n \n /* Dump the complete CFG to FILE.  FLAGS are the TDF_* flags in dumpfile.h.  */\n void\n-dump_flow_info (FILE *file, int flags)\n+dump_flow_info (FILE *file, dump_flags_t flags)\n {\n   basic_block bb;\n "}, {"sha": "5800a331e41ed4c95d35c0adeeba6f546b3b9ad1", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -62,7 +62,7 @@ struct cfg_hooks\n \n   /* Debugging.  */\n   int (*verify_flow_info) (void);\n-  void (*dump_bb) (FILE *, basic_block, int, int);\n+  void (*dump_bb) (FILE *, basic_block, int, dump_flags_t);\n   void (*dump_bb_for_graph) (pretty_printer *, basic_block);\n \n   /* Basic CFG manipulation.  */\n@@ -198,9 +198,9 @@ checking_verify_flow_info (void)\n     verify_flow_info ();\n }\n \n-extern void dump_bb (FILE *, basic_block, int, int);\n+extern void dump_bb (FILE *, basic_block, int, dump_flags_t);\n extern void dump_bb_for_graph (pretty_printer *, basic_block);\n-extern void dump_flow_info (FILE *, int);\n+extern void dump_flow_info (FILE *, dump_flags_t);\n \n extern edge redirect_edge_and_branch (edge, basic_block);\n extern basic_block redirect_edge_and_branch_force (edge, basic_block);"}, {"sha": "ead82d23166592ceb9d34cc8db537da2206ed173", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -86,7 +86,7 @@ static void rtl_delete_block (basic_block);\n static basic_block rtl_redirect_edge_and_branch_force (edge, basic_block);\n static edge rtl_redirect_edge_and_branch (edge, basic_block);\n static basic_block rtl_split_block (basic_block, void *);\n-static void rtl_dump_bb (FILE *, basic_block, int, int);\n+static void rtl_dump_bb (FILE *, basic_block, int, dump_flags_t);\n static int rtl_verify_flow_info_1 (void);\n static void rtl_make_forwarder_block (edge);\n \f\n@@ -2112,7 +2112,7 @@ commit_edge_insertions (void)\n    documented in dumpfile.h.  */\n \n static void\n-rtl_dump_bb (FILE *outf, basic_block bb, int indent, int flags)\n+rtl_dump_bb (FILE *outf, basic_block bb, int indent, dump_flags_t flags)\n {\n   rtx_insn *insn;\n   rtx_insn *last;\n@@ -2155,7 +2155,7 @@ rtl_dump_bb (FILE *outf, basic_block bb, int indent, int flags)\n    in dumpfile.h.  */\n \n void\n-print_rtl_with_bb (FILE *outf, const rtx_insn *rtx_first, int flags)\n+print_rtl_with_bb (FILE *outf, const rtx_insn *rtx_first, dump_flags_t flags)\n {\n   const rtx_insn *tmp_rtx;\n   if (rtx_first == 0)\n@@ -4242,7 +4242,7 @@ cfg_layout_duplicate_bb (basic_block bb)\n    FLAGS is a set of additional flags to pass to cleanup_cfg().  */\n \n void\n-cfg_layout_initialize (unsigned int flags)\n+cfg_layout_initialize (int flags)\n {\n   rtx_insn_list *x;\n   basic_block bb;"}, {"sha": "9235b50ed665fcbe6f4d4944a8b1cbcc4050c903", "filename": "gcc/cfgrtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfgrtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcfgrtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -40,7 +40,7 @@ extern basic_block force_nonfallthru_and_redirect (edge, basic_block, rtx);\n extern void insert_insn_on_edge (rtx, edge);\n extern void commit_one_edge_insertion (edge e);\n extern void commit_edge_insertions (void);\n-extern void print_rtl_with_bb (FILE *, const rtx_insn *, int);\n+extern void print_rtl_with_bb (FILE *, const rtx_insn *, dump_flags_t);\n extern void update_br_prob_note (basic_block);\n extern rtx_insn *get_last_bb_insn (basic_block);\n extern void fixup_partitions (void);\n@@ -50,7 +50,7 @@ extern bool fixup_abnormal_edges (void);\n extern rtx_insn *unlink_insn_chain (rtx_insn *, rtx_insn *);\n extern void relink_block_chain (bool);\n extern rtx_insn *duplicate_insn_chain (rtx_insn *, rtx_insn *);\n-extern void cfg_layout_initialize (unsigned int);\n+extern void cfg_layout_initialize (int);\n extern void cfg_layout_finalize (void);\n extern void break_superblocks (void);\n extern void init_rtl_bb_info (basic_block);"}, {"sha": "10ba987701c09ffa20f70a45c3a4f59ebc4d759e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -3652,7 +3652,7 @@ cgraph_node::get_body (void)\n       opt_pass *saved_current_pass = current_pass;\n       FILE *saved_dump_file = dump_file;\n       const char *saved_dump_file_name = dump_file_name;\n-      int saved_dump_flags = dump_flags;\n+      dump_flags_t saved_dump_flags = dump_flags;\n       dump_file_name = NULL;\n       dump_file = NULL;\n "}, {"sha": "b7c3704eff8574bac25ac66ebdc17f47c5ddb0f1", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -371,6 +371,7 @@ typedef unsigned char uchar;\n #include \"input.h\"\n #include \"is-a.h\"\n #include \"memory-block.h\"\n+#include \"dumpfile.h\"\n #endif /* GENERATOR_FILE && !USED_FOR_TARGET */\n \n #endif /* coretypes.h */"}, {"sha": "78c2d335d1995e71f7d988fb1876bcafb951e281", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -1,3 +1,11 @@\n+2017-05-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* class.c (dump_class_hierarchy): Introduce dump_flags_t type and\n+\tuse it instead of int type.\n+\t(dump_vtable): Likewise.\n+\t(dump_vtt): Likewise.\n+\t* decl2.c (dump_tu): Likewise.\n+\n 2017-05-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* call.c (enforce_access): Add access_failure_info * param and use"}, {"sha": "ee2bb082636602266e04ec5698b11f70b5b2d652", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -172,9 +172,9 @@ static tree find_final_overrider (tree, tree, tree);\n static int make_new_vtable (tree, tree);\n static tree get_primary_binfo (tree);\n static int maybe_indent_hierarchy (FILE *, int, int);\n-static tree dump_class_hierarchy_r (FILE *, int, tree, tree, int);\n+static tree dump_class_hierarchy_r (FILE *, dump_flags_t, tree, tree, int);\n static void dump_class_hierarchy (tree);\n-static void dump_class_hierarchy_1 (FILE *, int, tree);\n+static void dump_class_hierarchy_1 (FILE *, dump_flags_t, tree);\n static void dump_array (FILE *, tree);\n static void dump_vtable (tree, tree, tree);\n static void dump_vtt (tree, tree);\n@@ -8823,7 +8823,7 @@ maybe_indent_hierarchy (FILE * stream, int indent, int indented_p)\n \n static tree\n dump_class_hierarchy_r (FILE *stream,\n-\t\t\tint flags,\n+\t\t\tdump_flags_t flags,\n \t\t\ttree binfo,\n \t\t\ttree igo,\n \t\t\tint indent)\n@@ -8916,7 +8916,7 @@ dump_class_hierarchy_r (FILE *stream,\n /* Dump the BINFO hierarchy for T.  */\n \n static void\n-dump_class_hierarchy_1 (FILE *stream, int flags, tree t)\n+dump_class_hierarchy_1 (FILE *stream, dump_flags_t flags, tree t)\n {\n   fprintf (stream, \"Class %s\\n\", type_as_string (t, TFF_PLAIN_IDENTIFIER));\n   fprintf (stream, \"   size=%lu align=%lu\\n\",\n@@ -8942,7 +8942,7 @@ debug_class (tree t)\n static void\n dump_class_hierarchy (tree t)\n {\n-  int flags;\n+  dump_flags_t flags;\n   FILE *stream = get_dump_info (TDI_class, &flags);\n \n   if (stream)\n@@ -8976,7 +8976,7 @@ dump_array (FILE * stream, tree decl)\n static void\n dump_vtable (tree t, tree binfo, tree vtable)\n {\n-  int flags;\n+  dump_flags_t flags;\n   FILE *stream = get_dump_info (TDI_class, &flags);\n \n   if (!stream)\n@@ -9005,7 +9005,7 @@ dump_vtable (tree t, tree binfo, tree vtable)\n static void\n dump_vtt (tree t, tree vtt)\n {\n-  int flags;\n+  dump_flags_t flags;\n   FILE *stream = get_dump_info (TDI_class, &flags);\n \n   if (!stream)"}, {"sha": "a950d5e970eeec1bbbb9f3fcf78b7f5c7a30a517", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -4361,7 +4361,7 @@ generate_mangling_aliases ()\n static void\n dump_tu (void)\n {\n-  int flags;\n+  dump_flags_t flags;\n   FILE *stream = dump_begin (TDI_tu, &flags);\n \n   if (stream)"}, {"sha": "a0daae6b2d89b28a0b12fcbb7997c507036b77db", "filename": "gcc/domwalk.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fdomwalk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fdomwalk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -201,7 +201,7 @@ dom_walker::bb_reachable (struct function *fun, basic_block bb)\n void\n dom_walker::propagate_unreachable_to_edges (basic_block bb,\n \t\t\t\t\t    FILE *dump_file,\n-\t\t\t\t\t    int dump_flags)\n+\t\t\t\t\t    dump_flags_t dump_flags)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Marking all outgoing edges of unreachable \""}, {"sha": "4b9f70ac703bd9f137165083d9c308274e6f3f13", "filename": "gcc/domwalk.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fdomwalk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fdomwalk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -70,7 +70,7 @@ class dom_walker\n      and possibly incoming edges for the block.  Typically called after\n      determining a block is unreachable in the before_dom_children\n      callback.  */\n-  void propagate_unreachable_to_edges (basic_block, FILE *, int);\n+  void propagate_unreachable_to_edges (basic_block, FILE *, dump_flags_t);\n \n };\n "}, {"sha": "ee967d825f4ba0a9532e3b068c745563f69696ff", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -33,10 +33,10 @@ along with GCC; see the file COPYING3.  If not see\n #define skip_leading_substring(whole,  part) \\\n    (strncmp (whole, part, strlen (part)) ? NULL : whole + strlen (part))\n \n-static int pflags;                   /* current dump_flags */\n-static int alt_flags;                /* current opt_info flags */\n+static dump_flags_t pflags;\t\t      /* current dump_flags */\n+static dump_flags_t alt_flags;\t\t      /* current opt_info flags */\n \n-static void dump_loc (int, FILE *, source_location);\n+static void dump_loc (dump_flags_t, FILE *, source_location);\n static FILE *dump_open_alternate_stream (struct dump_file_info *);\n \n /* These are currently used for communicating between passes.\n@@ -45,7 +45,7 @@ static FILE *dump_open_alternate_stream (struct dump_file_info *);\n FILE *dump_file = NULL;\n FILE *alt_dump_file = NULL;\n const char *dump_file_name;\n-int dump_flags;\n+dump_flags_t dump_flags;\n \n /* Table of tree dump switches. This must be consistent with the\n    TREE_DUMP_INDEX enumeration in dumpfile.h.  */\n@@ -84,7 +84,7 @@ static struct dump_file_info dump_files[TDI_end] =\n struct dump_option_value_info\n {\n   const char *const name;\t/* the name of the value */\n-  const int value;\t\t/* the value of the name */\n+  const dump_flags_t value;\t/* the value of the name */\n };\n \n /* Table of dump options. This must be consistent with the TDF_* flags\n@@ -181,7 +181,7 @@ gcc::dump_manager::~dump_manager ()\n unsigned int\n gcc::dump_manager::\n dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t       int flags, int optgroup_flags,\n+\t       dump_flags_t flags, int optgroup_flags,\n \t       bool take_ownership)\n {\n   int num = m_next_dump++;\n@@ -327,7 +327,7 @@ dump_open_alternate_stream (struct dump_file_info *dfi)\n /* Print source location on DFILE if enabled.  */\n \n void\n-dump_loc (int dump_kind, FILE *dfile, source_location loc)\n+dump_loc (dump_flags_t dump_kind, FILE *dfile, source_location loc)\n {\n   if (dump_kind)\n     {\n@@ -346,7 +346,8 @@ dump_loc (int dump_kind, FILE *dfile, source_location loc)\n    EXTRA_DUMP_FLAGS on the dump streams if DUMP_KIND is enabled.  */\n \n void\n-dump_gimple_stmt (int dump_kind, int extra_dump_flags, gimple *gs, int spc)\n+dump_gimple_stmt (dump_flags_t dump_kind, dump_flags_t extra_dump_flags,\n+\t\t  gimple *gs, int spc)\n {\n   if (dump_file && (dump_kind & pflags))\n     print_gimple_stmt (dump_file, gs, spc, dump_flags | extra_dump_flags);\n@@ -358,8 +359,8 @@ dump_gimple_stmt (int dump_kind, int extra_dump_flags, gimple *gs, int spc)\n /* Similar to dump_gimple_stmt, except additionally print source location.  */\n \n void\n-dump_gimple_stmt_loc (int dump_kind, source_location loc, int extra_dump_flags,\n-\t\t      gimple *gs, int spc)\n+dump_gimple_stmt_loc (dump_flags_t dump_kind, source_location loc,\n+\t\t      dump_flags_t extra_dump_flags, gimple *gs, int spc)\n {\n   if (dump_file && (dump_kind & pflags))\n     {\n@@ -378,7 +379,8 @@ dump_gimple_stmt_loc (int dump_kind, source_location loc, int extra_dump_flags,\n    DUMP_KIND is enabled.  */\n \n void\n-dump_generic_expr (int dump_kind, int extra_dump_flags, tree t)\n+dump_generic_expr (dump_flags_t dump_kind, dump_flags_t extra_dump_flags,\n+\t\t   tree t)\n {\n   if (dump_file && (dump_kind & pflags))\n       print_generic_expr (dump_file, t, dump_flags | extra_dump_flags);\n@@ -393,7 +395,7 @@ dump_generic_expr (int dump_kind, int extra_dump_flags, tree t)\n \n void\n dump_generic_expr_loc (int dump_kind, source_location loc,\n-                       int extra_dump_flags, tree t)\n+\t\t       dump_flags_t extra_dump_flags, tree t)\n {\n   if (dump_file && (dump_kind & pflags))\n     {\n@@ -411,7 +413,7 @@ dump_generic_expr_loc (int dump_kind, source_location loc,\n /* Output a formatted message using FORMAT on appropriate dump streams.  */\n \n void\n-dump_printf (int dump_kind, const char *format, ...)\n+dump_printf (dump_flags_t dump_kind, const char *format, ...)\n {\n   if (dump_file && (dump_kind & pflags))\n     {\n@@ -433,7 +435,8 @@ dump_printf (int dump_kind, const char *format, ...)\n /* Similar to dump_printf, except source location is also printed.  */\n \n void\n-dump_printf_loc (int dump_kind, source_location loc, const char *format, ...)\n+dump_printf_loc (dump_flags_t dump_kind, source_location loc,\n+\t\t const char *format, ...)\n {\n   if (dump_file && (dump_kind & pflags))\n     {\n@@ -462,7 +465,7 @@ dump_printf_loc (int dump_kind, source_location loc, const char *format, ...)\n \n int\n gcc::dump_manager::\n-dump_start (int phase, int *flag_ptr)\n+dump_start (int phase, dump_flags_t *flag_ptr)\n {\n   int count = 0;\n   char *name;\n@@ -546,14 +549,14 @@ dump_finish (int phase)\n    Multiple calls will reopen and append to the dump file.  */\n \n FILE *\n-dump_begin (int phase, int *flag_ptr)\n+dump_begin (int phase, dump_flags_t *flag_ptr)\n {\n   return g->get_dumps ()->dump_begin (phase, flag_ptr);\n }\n \n FILE *\n gcc::dump_manager::\n-dump_begin (int phase, int *flag_ptr)\n+dump_begin (int phase, dump_flags_t *flag_ptr)\n {\n   char *name;\n   struct dump_file_info *dfi;\n@@ -654,9 +657,9 @@ dump_end (int phase ATTRIBUTE_UNUSED, FILE *stream)\n \n int\n gcc::dump_manager::\n-dump_enable_all (int flags, const char *filename)\n+dump_enable_all (dump_flags_t flags, const char *filename)\n {\n-  int ir_dump_type = TDF_KIND (flags);\n+  dump_flags_t ir_dump_type = TDF_KIND (flags);\n   int n = 0;\n   size_t i;\n \n@@ -711,7 +714,8 @@ dump_enable_all (int flags, const char *filename)\n \n int\n gcc::dump_manager::\n-opt_info_enable_passes (int optgroup_flags, int flags, const char *filename)\n+opt_info_enable_passes (int optgroup_flags, dump_flags_t flags,\n+\t\t\tconst char *filename)\n {\n   int n = 0;\n   size_t i;\n@@ -764,7 +768,7 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n {\n   const char *option_value;\n   const char *ptr;\n-  int flags;\n+  dump_flags_t flags;\n \n   if (doglob && !dfi->glob)\n     return 0;\n@@ -863,7 +867,7 @@ dump_switch_p (const char *arg)\n    and filename.  Return non-zero if it is a recognized switch.  */\n \n static int\n-opt_info_switch_p_1 (const char *arg, int *flags, int *optgroup_flags,\n+opt_info_switch_p_1 (const char *arg, dump_flags_t *flags, int *optgroup_flags,\n                      char **filename)\n {\n   const char *option_value;\n@@ -941,7 +945,7 @@ opt_info_switch_p_1 (const char *arg, int *flags, int *optgroup_flags,\n int\n opt_info_switch_p (const char *arg)\n {\n-  int flags;\n+  dump_flags_t flags;\n   int optgroup_flags;\n   char *filename;\n   static char *file_seen = NULL;\n@@ -987,7 +991,7 @@ void\n dump_function (int phase, tree fn)\n {\n   FILE *stream;\n-  int flags;\n+  dump_flags_t flags;\n \n   stream = dump_begin (phase, &flags);\n   if (stream)"}, {"sha": "92920968db1702a00862ab16c8820659df7baf0b", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -99,6 +99,10 @@ enum tree_dump_index\n \t\t\t | MSG_NOTE)\n \n \n+/* Value of TDF_NONE is used just for bits filtered by TDF_KIND_MASK.  */\n+\n+#define TDF_NONE 0\n+\n /* Flags to control high-level -fopt-info dumps.  Usually these flags\n    define a group of passes.  An optimization pass can be part of\n    multiple groups.  */\n@@ -113,6 +117,10 @@ enum tree_dump_index\n #define OPTGROUP_ALL\t     (OPTGROUP_IPA | OPTGROUP_LOOP | OPTGROUP_INLINE \\\n \t\t\t      | OPTGROUP_OMP | OPTGROUP_VEC | OPTGROUP_OTHER)\n \n+/* Dump flags type.  */\n+\n+typedef uint64_t dump_flags_t;\n+\n /* Define a tree dump switch.  */\n struct dump_file_info\n {\n@@ -123,7 +131,7 @@ struct dump_file_info\n   const char *alt_filename;\t/* filename for the -fopt-info stream  */\n   FILE *pstream;\t\t/* pass-specific dump stream  */\n   FILE *alt_stream;\t\t/* -fopt-info stream */\n-  int pflags;\t\t\t/* dump flags */\n+  dump_flags_t pflags;\t\t/* dump flags */\n   int optgroup_flags;\t\t/* optgroup flags for -fopt-info */\n   int alt_flags;\t\t/* flags for opt-info */\n   int pstate;\t\t\t/* state of pass-specific stream */\n@@ -140,34 +148,35 @@ struct dump_file_info\n };\n \n /* In dumpfile.c */\n-extern FILE *dump_begin (int, int *);\n+extern FILE *dump_begin (int, dump_flags_t *);\n extern void dump_end (int, FILE *);\n extern int opt_info_switch_p (const char *);\n extern const char *dump_flag_name (int);\n-extern void dump_printf (int, const char *, ...) ATTRIBUTE_PRINTF_2;\n-extern void dump_printf_loc (int, source_location,\n-\t\t\t     const char *, ...) ATTRIBUTE_PRINTF_3;\n+extern void dump_printf (dump_flags_t, const char *, ...) ATTRIBUTE_PRINTF_2;\n+extern void dump_printf_loc (dump_flags_t, source_location,\n+                             const char *, ...) ATTRIBUTE_PRINTF_3;\n extern void dump_function (int phase, tree fn);\n extern void dump_basic_block (int, basic_block, int);\n extern void dump_generic_expr_loc (int, source_location, int, tree);\n-extern void dump_generic_expr (int, int, tree);\n-extern void dump_gimple_stmt_loc (int, source_location, int, gimple *, int);\n-extern void dump_gimple_stmt (int, int, gimple *, int);\n+extern void dump_generic_expr (dump_flags_t, dump_flags_t, tree);\n+extern void dump_gimple_stmt_loc (dump_flags_t, source_location, dump_flags_t,\n+\t\t\t\t  gimple *, int);\n+extern void dump_gimple_stmt (dump_flags_t, dump_flags_t, gimple *, int);\n extern void print_combine_total_stats (void);\n extern bool enable_rtl_dump_file (void);\n \n /* In tree-dump.c  */\n-extern void dump_node (const_tree, int, FILE *);\n+extern void dump_node (const_tree, dump_flags_t, FILE *);\n \n /* In combine.c  */\n extern void dump_combine_total_stats (FILE *);\n /* In cfghooks.c  */\n-extern void dump_bb (FILE *, basic_block, int, int);\n+extern void dump_bb (FILE *, basic_block, int, dump_flags_t);\n \n /* Global variables used to communicate with passes.  */\n extern FILE *dump_file;\n extern FILE *alt_dump_file;\n-extern int dump_flags;\n+extern dump_flags_t dump_flags;\n extern const char *dump_file_name;\n \n /* Return true if any of the dumps is enabled, false otherwise. */\n@@ -192,7 +201,7 @@ class dump_manager\n      SUFFIX, SWTCH, and GLOB. */\n   unsigned int\n   dump_register (const char *suffix, const char *swtch, const char *glob,\n-\t\t int flags, int optgroup_flags,\n+\t\t dump_flags_t flags, int optgroup_flags,\n \t\t bool take_ownership);\n \n   /* Return the dump_file_info for the given phase.  */\n@@ -219,15 +228,15 @@ class dump_manager\n      set dump_flags appropriately for both pass dump stream and\n      -fopt-info stream. */\n   int\n-  dump_start (int phase, int *flag_ptr);\n+  dump_start (int phase, dump_flags_t *flag_ptr);\n \n   /* Finish a tree dump for PHASE and close associated dump streams.  Also\n      reset the globals DUMP_FILE, ALT_DUMP_FILE, and DUMP_FLAGS.  */\n   void\n   dump_finish (int phase);\n \n   FILE *\n-  dump_begin (int phase, int *flag_ptr);\n+  dump_begin (int phase, dump_flags_t *flag_ptr);\n \n   /* Returns nonzero if tree dump PHASE has been initialized.  */\n   int\n@@ -246,10 +255,11 @@ class dump_manager\n   dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob);\n \n   int\n-  dump_enable_all (int flags, const char *filename);\n+  dump_enable_all (dump_flags_t flags, const char *filename);\n \n   int\n-  opt_info_enable_passes (int optgroup_flags, int flags, const char *filename);\n+  opt_info_enable_passes (int optgroup_flags, dump_flags_t flags,\n+\t\t\t  const char *filename);\n \n private:\n "}, {"sha": "6e60c0a76ca3c769a51d74c4c0318984e25fd013", "filename": "gcc/genemit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -797,7 +797,6 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"regs.h\\\"\\n\");\n   printf (\"#include \\\"tm-constrs.h\\\"\\n\");\n   printf (\"#include \\\"ggc.h\\\"\\n\");\n-  printf (\"#include \\\"dumpfile.h\\\"\\n\");\n   printf (\"#include \\\"target.h\\\"\\n\\n\");\n \n   /* Read the machine description.  */"}, {"sha": "0c0d18249339057631c85f55b240e1ecfa04c4a2", "filename": "gcc/generic-match-head.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgeneric-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgeneric-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgeneric-match-head.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -31,7 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"tree-dfa.h\"\n #include \"builtins.h\"\n-#include \"dumpfile.h\"\n #include \"case-cfn-macros.h\"\n #include \"gimplify.h\"\n "}, {"sha": "b02e9fffb23fd211b06c54b06d47dffe0c466bc1", "filename": "gcc/gengtype.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -1706,7 +1706,8 @@ open_base_files (void)\n   {\n     /* The order of files here matters very much.  */\n     static const char *const ifiles[] = {\n-      \"config.h\", \"system.h\", \"coretypes.h\", \"backend.h\", \"predict.h\", \"tree.h\",\n+      \"config.h\", \"system.h\", \"coretypes.h\",\n+      \"backend.h\", \"predict.h\", \"tree.h\",\n       \"rtl.h\", \"gimple.h\", \"fold-const.h\", \"insn-codes.h\", \"splay-tree.h\",\n       \"alias.h\", \"insn-config.h\", \"flags.h\", \"expmed.h\", \"dojump.h\",\n       \"explow.h\", \"calls.h\", \"cilk.h\", \"memmodel.h\", \"emit-rtl.h\", \"varasm.h\","}, {"sha": "c99dfe1192cd645ef9b0baf3b7323e3b60a8fa3e", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 76, "deletions": 51, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"dumpfile.h\"\n #include \"backend.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n@@ -108,7 +109,7 @@ dump_edge_probability (pretty_printer *buffer, edge e)\n    FLAGS as in pp_gimple_stmt_1.  */\n \n void\n-print_gimple_stmt (FILE *file, gimple *g, int spc, int flags)\n+print_gimple_stmt (FILE *file, gimple *g, int spc, dump_flags_t flags)\n {\n   pretty_printer buffer;\n   pp_needs_newline (&buffer) = true;\n@@ -138,7 +139,7 @@ debug (gimple *ptr)\n    of the statement.  */\n \n void\n-print_gimple_expr (FILE *file, gimple *g, int spc, int flags)\n+print_gimple_expr (FILE *file, gimple *g, int spc, dump_flags_t flags)\n {\n   flags |= TDF_RHS_ONLY;\n   pretty_printer buffer;\n@@ -155,7 +156,8 @@ print_gimple_expr (FILE *file, gimple *g, int spc, int flags)\n    the pretty printer.  */\n \n static void\n-dump_gimple_seq (pretty_printer *buffer, gimple_seq seq, int spc, int flags)\n+dump_gimple_seq (pretty_printer *buffer, gimple_seq seq, int spc,\n+\t\t dump_flags_t flags)\n {\n   gimple_stmt_iterator i;\n \n@@ -174,7 +176,7 @@ dump_gimple_seq (pretty_printer *buffer, gimple_seq seq, int spc, int flags)\n    FLAGS as in pp_gimple_stmt_1.  */\n \n void\n-print_gimple_seq (FILE *file, gimple_seq seq, int spc, int flags)\n+print_gimple_seq (FILE *file, gimple_seq seq, int spc, dump_flags_t flags)\n {\n   pretty_printer buffer;\n   pp_needs_newline (&buffer) = true;\n@@ -206,7 +208,7 @@ debug_gimple_seq (gimple_seq seq)\n      '-' - decreases indent by 2 then outputs a newline.   */\n \n static void\n-dump_gimple_fmt (pretty_printer *buffer, int spc, int flags,\n+dump_gimple_fmt (pretty_printer *buffer, int spc, dump_flags_t flags,\n                  const char *fmt, ...)\n {\n   va_list args;\n@@ -285,7 +287,8 @@ dump_gimple_fmt (pretty_printer *buffer, int spc, int flags,\n    assignment GS.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.  */\n \n static void\n-dump_unary_rhs (pretty_printer *buffer, gassign *gs, int spc, int flags)\n+dump_unary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n+\t\tdump_flags_t flags)\n {\n   enum tree_code rhs_code = gimple_assign_rhs_code (gs);\n   tree lhs = gimple_assign_lhs (gs);\n@@ -377,7 +380,8 @@ dump_unary_rhs (pretty_printer *buffer, gassign *gs, int spc, int flags)\n    assignment GS.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.  */\n \n static void\n-dump_binary_rhs (pretty_printer *buffer, gassign *gs, int spc, int flags)\n+dump_binary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n+\t\t dump_flags_t flags)\n {\n   const char *p;\n   enum tree_code code = gimple_assign_rhs_code (gs);\n@@ -433,7 +437,8 @@ dump_binary_rhs (pretty_printer *buffer, gassign *gs, int spc, int flags)\n    assignment GS.  BUFFER, SPC and FLAGS are as in pp_gimple_stmt_1.  */\n \n static void\n-dump_ternary_rhs (pretty_printer *buffer, gassign *gs, int spc, int flags)\n+dump_ternary_rhs (pretty_printer *buffer, gassign *gs, int spc,\n+\t\t  dump_flags_t flags)\n {\n   const char *p;\n   enum tree_code code = gimple_assign_rhs_code (gs);\n@@ -559,7 +564,8 @@ dump_ternary_rhs (pretty_printer *buffer, gassign *gs, int spc, int flags)\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_assign (pretty_printer *buffer, gassign *gs, int spc, int flags)\n+dump_gimple_assign (pretty_printer *buffer, gassign *gs, int spc,\n+\t\t    dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -620,7 +626,8 @@ dump_gimple_assign (pretty_printer *buffer, gassign *gs, int spc, int flags)\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_return (pretty_printer *buffer, greturn *gs, int spc, int flags)\n+dump_gimple_return (pretty_printer *buffer, greturn *gs, int spc,\n+\t\t    dump_flags_t flags)\n {\n   tree t, t2;\n \n@@ -650,7 +657,7 @@ dump_gimple_return (pretty_printer *buffer, greturn *gs, int spc, int flags)\n    dump_gimple_call.  */\n \n static void\n-dump_gimple_call_args (pretty_printer *buffer, gcall *gs, int flags)\n+dump_gimple_call_args (pretty_printer *buffer, gcall *gs, dump_flags_t flags)\n {\n   size_t i = 0;\n \n@@ -806,7 +813,8 @@ pp_points_to_solution (pretty_printer *buffer, struct pt_solution *pt)\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_call (pretty_printer *buffer, gcall *gs, int spc, int flags)\n+dump_gimple_call (pretty_printer *buffer, gcall *gs, int spc,\n+\t\t  dump_flags_t flags)\n {\n   tree lhs = gimple_call_lhs (gs);\n   tree fn = gimple_call_fn (gs);\n@@ -942,7 +950,7 @@ dump_gimple_call (pretty_printer *buffer, gcall *gs, int spc, int flags)\n \n static void\n dump_gimple_switch (pretty_printer *buffer, gswitch *gs, int spc,\n-\t\t    int flags)\n+\t\t    dump_flags_t flags)\n {\n   unsigned int i;\n \n@@ -999,7 +1007,8 @@ dump_gimple_switch (pretty_printer *buffer, gswitch *gs, int spc,\n    pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_cond (pretty_printer *buffer, gcond *gs, int spc, int flags)\n+dump_gimple_cond (pretty_printer *buffer, gcond *gs, int spc,\n+\t\t  dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%s, %T, %T, %T, %T>\", gs,\n@@ -1065,7 +1074,8 @@ dump_gimple_cond (pretty_printer *buffer, gcond *gs, int spc, int flags)\n    TDF_* in dumpfils.h).  */\n \n static void\n-dump_gimple_label (pretty_printer *buffer, glabel *gs, int spc, int flags)\n+dump_gimple_label (pretty_printer *buffer, glabel *gs, int spc,\n+\t\t   dump_flags_t flags)\n {\n   tree label = gimple_label_label (gs);\n   if (flags & TDF_RAW)\n@@ -1091,7 +1101,8 @@ dump_gimple_label (pretty_printer *buffer, glabel *gs, int spc, int flags)\n    TDF_* in dumpfile.h).  */\n \n static void\n-dump_gimple_goto (pretty_printer *buffer, ggoto *gs, int spc, int flags)\n+dump_gimple_goto (pretty_printer *buffer, ggoto *gs, int spc,\n+\t\t  dump_flags_t flags)\n {\n   tree label = gimple_goto_dest (gs);\n   if (flags & TDF_RAW)\n@@ -1106,7 +1117,8 @@ dump_gimple_goto (pretty_printer *buffer, ggoto *gs, int spc, int flags)\n    TDF_* in dumpfile.h).  */\n \n static void\n-dump_gimple_bind (pretty_printer *buffer, gbind *gs, int spc, int flags)\n+dump_gimple_bind (pretty_printer *buffer, gbind *gs, int spc,\n+\t\t  dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <\", gs);\n@@ -1139,7 +1151,8 @@ dump_gimple_bind (pretty_printer *buffer, gbind *gs, int spc, int flags)\n    dumpfile.h).  */\n \n static void\n-dump_gimple_try (pretty_printer *buffer, gtry *gs, int spc, int flags)\n+dump_gimple_try (pretty_printer *buffer, gtry *gs, int spc,\n+\t\t dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -1195,7 +1208,8 @@ dump_gimple_try (pretty_printer *buffer, gtry *gs, int spc, int flags)\n    dumpfile.h).  */\n \n static void\n-dump_gimple_catch (pretty_printer *buffer, gcatch *gs, int spc, int flags)\n+dump_gimple_catch (pretty_printer *buffer, gcatch *gs, int spc,\n+\t\t   dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n       dump_gimple_fmt (buffer, spc, flags, \"%G <%T, %+CATCH <%S>%->\", gs,\n@@ -1212,7 +1226,7 @@ dump_gimple_catch (pretty_printer *buffer, gcatch *gs, int spc, int flags)\n \n static void\n dump_gimple_eh_filter (pretty_printer *buffer, geh_filter *gs, int spc,\n-\t\t       int flags)\n+\t\t       dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%T, %+FAILURE <%S>%->\", gs,\n@@ -1229,7 +1243,7 @@ dump_gimple_eh_filter (pretty_printer *buffer, geh_filter *gs, int spc,\n \n static void\n dump_gimple_eh_must_not_throw (pretty_printer *buffer,\n-\t\t\t       geh_mnt *gs, int spc, int flags)\n+\t\t\t       geh_mnt *gs, int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%T>\", gs,\n@@ -1246,7 +1260,7 @@ dump_gimple_eh_must_not_throw (pretty_printer *buffer,\n \n static void\n dump_gimple_eh_else (pretty_printer *buffer, geh_else *gs, int spc,\n-\t\t     int flags)\n+\t\t     dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags,\n@@ -1264,7 +1278,8 @@ dump_gimple_eh_else (pretty_printer *buffer, geh_else *gs, int spc,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_resx (pretty_printer *buffer, gresx *gs, int spc, int flags)\n+dump_gimple_resx (pretty_printer *buffer, gresx *gs, int spc,\n+\t\t  dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%d>\", gs,\n@@ -1276,7 +1291,8 @@ dump_gimple_resx (pretty_printer *buffer, gresx *gs, int spc, int flags)\n /* Dump a GIMPLE_EH_DISPATCH tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_eh_dispatch (pretty_printer *buffer, geh_dispatch *gs, int spc, int flags)\n+dump_gimple_eh_dispatch (pretty_printer *buffer, geh_dispatch *gs, int spc,\n+\t\t\t dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%d>\", gs,\n@@ -1291,7 +1307,8 @@ dump_gimple_eh_dispatch (pretty_printer *buffer, geh_dispatch *gs, int spc, int\n    in dumpfile.h).  */\n \n static void\n-dump_gimple_debug (pretty_printer *buffer, gdebug *gs, int spc, int flags)\n+dump_gimple_debug (pretty_printer *buffer, gdebug *gs, int spc,\n+\t\t   dump_flags_t flags)\n {\n   switch (gs->subcode)\n     {\n@@ -1324,7 +1341,8 @@ dump_gimple_debug (pretty_printer *buffer, gdebug *gs, int spc, int flags)\n \n /* Dump a GIMPLE_OMP_FOR tuple on the pretty_printer BUFFER.  */\n static void\n-dump_gimple_omp_for (pretty_printer *buffer, gomp_for *gs, int spc, int flags)\n+dump_gimple_omp_for (pretty_printer *buffer, gomp_for *gs, int spc,\n+\t\t     dump_flags_t flags)\n {\n   size_t i;\n \n@@ -1476,7 +1494,7 @@ dump_gimple_omp_for (pretty_printer *buffer, gomp_for *gs, int spc, int flags)\n \n static void\n dump_gimple_omp_continue (pretty_printer *buffer, gomp_continue *gs,\n-\t\t\t  int spc, int flags)\n+\t\t\t  int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -1501,7 +1519,7 @@ dump_gimple_omp_continue (pretty_printer *buffer, gomp_continue *gs,\n \n static void\n dump_gimple_omp_single (pretty_printer *buffer, gomp_single *gs,\n-\t\t\tint spc, int flags)\n+\t\t\tint spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -1530,7 +1548,7 @@ dump_gimple_omp_single (pretty_printer *buffer, gomp_single *gs,\n \n static void\n dump_gimple_omp_target (pretty_printer *buffer, gomp_target *gs,\n-\t\t\tint spc, int flags)\n+\t\t\tint spc, dump_flags_t flags)\n {\n   const char *kind;\n   switch (gimple_omp_target_kind (gs))\n@@ -1623,7 +1641,7 @@ dump_gimple_omp_target (pretty_printer *buffer, gomp_target *gs,\n \n static void\n dump_gimple_omp_teams (pretty_printer *buffer, gomp_teams *gs, int spc,\n-\t\t       int flags)\n+\t\t       dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -1652,7 +1670,7 @@ dump_gimple_omp_teams (pretty_printer *buffer, gomp_teams *gs, int spc,\n \n static void\n dump_gimple_omp_sections (pretty_printer *buffer, gomp_sections *gs,\n-\t\t\t  int spc, int flags)\n+\t\t\t  int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -1688,7 +1706,8 @@ dump_gimple_omp_sections (pretty_printer *buffer, gomp_sections *gs,\n    pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_block (pretty_printer *buffer, gimple *gs, int spc, int flags)\n+dump_gimple_omp_block (pretty_printer *buffer, gimple *gs, int spc,\n+\t\t       dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%+BODY <%S> >\", gs,\n@@ -1728,7 +1747,7 @@ dump_gimple_omp_block (pretty_printer *buffer, gimple *gs, int spc, int flags)\n \n static void\n dump_gimple_omp_critical (pretty_printer *buffer, gomp_critical *gs,\n-\t\t\t  int spc, int flags)\n+\t\t\t  int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%+BODY <%S> >\", gs,\n@@ -1760,7 +1779,7 @@ dump_gimple_omp_critical (pretty_printer *buffer, gomp_critical *gs,\n \n static void\n dump_gimple_omp_ordered (pretty_printer *buffer, gomp_ordered *gs,\n-\t\t\t int spc, int flags)\n+\t\t\t int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     dump_gimple_fmt (buffer, spc, flags, \"%G <%+BODY <%S> >\", gs,\n@@ -1784,7 +1803,8 @@ dump_gimple_omp_ordered (pretty_printer *buffer, gomp_ordered *gs,\n /* Dump a GIMPLE_OMP_RETURN tuple on the pretty_printer BUFFER.  */\n \n static void\n-dump_gimple_omp_return (pretty_printer *buffer, gimple *gs, int spc, int flags)\n+dump_gimple_omp_return (pretty_printer *buffer, gimple *gs, int spc,\n+\t\t\tdump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -1815,7 +1835,7 @@ dump_gimple_omp_return (pretty_printer *buffer, gimple *gs, int spc, int flags)\n \n static void\n dump_gimple_transaction (pretty_printer *buffer, gtransaction *gs,\n-\t\t\t int spc, int flags)\n+\t\t\t int spc, dump_flags_t flags)\n {\n   unsigned subcode = gimple_transaction_subcode (gs);\n \n@@ -1916,7 +1936,7 @@ dump_gimple_transaction (pretty_printer *buffer, gtransaction *gs,\n    dumpfile.h).  */\n \n static void\n-dump_gimple_asm (pretty_printer *buffer, gasm *gs, int spc, int flags)\n+dump_gimple_asm (pretty_printer *buffer, gasm *gs, int spc, dump_flags_t flags)\n {\n   unsigned int i, n, f, fields;\n \n@@ -2134,7 +2154,7 @@ dump_ssaname_info_to_file (FILE *file, tree node, int spc)\n \n static void\n dump_gimple_phi (pretty_printer *buffer, gphi *phi, int spc, bool comment,\n-\t\t int flags)\n+\t\t dump_flags_t flags)\n {\n   size_t i;\n   tree lhs = gimple_phi_result (phi);\n@@ -2198,7 +2218,7 @@ dump_gimple_phi (pretty_printer *buffer, gphi *phi, int spc, bool comment,\n \n static void\n dump_gimple_omp_parallel (pretty_printer *buffer, gomp_parallel *gs,\n-\t\t\t  int spc, int flags)\n+\t\t\t  int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -2252,7 +2272,7 @@ dump_gimple_omp_parallel (pretty_printer *buffer, gomp_parallel *gs,\n \n static void\n dump_gimple_omp_task (pretty_printer *buffer, gomp_task *gs, int spc,\n-\t\t      int flags)\n+\t\t      dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -2312,7 +2332,7 @@ dump_gimple_omp_task (pretty_printer *buffer, gomp_task *gs, int spc,\n \n static void\n dump_gimple_omp_atomic_load (pretty_printer *buffer, gomp_atomic_load *gs,\n-\t\t\t     int spc, int flags)\n+\t\t\t     int spc, dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -2345,7 +2365,8 @@ dump_gimple_omp_atomic_load (pretty_printer *buffer, gomp_atomic_load *gs,\n \n static void\n dump_gimple_omp_atomic_store (pretty_printer *buffer,\n-\t\t\t      gomp_atomic_store *gs, int spc, int flags)\n+\t\t\t      gomp_atomic_store *gs, int spc,\n+\t\t\t      dump_flags_t flags)\n {\n   if (flags & TDF_RAW)\n     {\n@@ -2371,7 +2392,8 @@ dump_gimple_omp_atomic_store (pretty_printer *buffer,\n    FLAGS are as in pp_gimple_stmt_1.  */\n \n static void\n-dump_gimple_mem_ops (pretty_printer *buffer, gimple *gs, int spc, int flags)\n+dump_gimple_mem_ops (pretty_printer *buffer, gimple *gs, int spc,\n+\t\t     dump_flags_t flags)\n {\n   tree vdef = gimple_vdef (gs);\n   tree vuse = gimple_vuse (gs);\n@@ -2401,7 +2423,8 @@ dump_gimple_mem_ops (pretty_printer *buffer, gimple *gs, int spc, int flags)\n    pp_flush on BUFFER to finalize the pretty printer.  */\n \n void\n-pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc, int flags)\n+pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc,\n+\t\t  dump_flags_t flags)\n {\n   if (!gs)\n     return;\n@@ -2609,7 +2632,8 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple *gs, int spc, int flags)\n    spaces and details described by flags.  */\n \n static void\n-dump_gimple_bb_header (FILE *outf, basic_block bb, int indent, int flags)\n+dump_gimple_bb_header (FILE *outf, basic_block bb, int indent,\n+\t\t       dump_flags_t flags)\n {\n   if (flags & TDF_BLOCKS)\n     {\n@@ -2655,7 +2679,7 @@ static void\n dump_gimple_bb_footer (FILE *outf ATTRIBUTE_UNUSED,\n \t\t       basic_block bb ATTRIBUTE_UNUSED,\n \t\t       int indent ATTRIBUTE_UNUSED,\n-\t\t       int flags ATTRIBUTE_UNUSED)\n+\t\t       dump_flags_t flags ATTRIBUTE_UNUSED)\n {\n   /* There is currently no GIMPLE-specific basic block info to dump.  */\n   return;\n@@ -2666,7 +2690,8 @@ dump_gimple_bb_footer (FILE *outf ATTRIBUTE_UNUSED,\n    by FLAGS and indented by INDENT spaces.  */\n \n static void\n-dump_phi_nodes (pretty_printer *buffer, basic_block bb, int indent, int flags)\n+dump_phi_nodes (pretty_printer *buffer, basic_block bb, int indent,\n+\t\tdump_flags_t flags)\n {\n   gphi_iterator i;\n \n@@ -2688,7 +2713,7 @@ dump_phi_nodes (pretty_printer *buffer, basic_block bb, int indent, int flags)\n    to BUFFER.  */\n \n static void\n-pp_cfg_jump (pretty_printer *buffer, edge e, int flags)\n+pp_cfg_jump (pretty_printer *buffer, edge e, dump_flags_t flags)\n {\n   if (flags & TDF_GIMPLE)\n     {\n@@ -2725,7 +2750,7 @@ pp_cfg_jump (pretty_printer *buffer, edge e, int flags)\n \n static void\n dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent,\n-\t\t     int flags)\n+\t\t     dump_flags_t flags)\n {\n   edge e;\n   gimple *stmt;\n@@ -2776,7 +2801,7 @@ dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent,\n \n static void\n gimple_dump_bb_buff (pretty_printer *buffer, basic_block bb, int indent,\n-\t\t     int flags)\n+\t\t     dump_flags_t flags)\n {\n   gimple_stmt_iterator gsi;\n   gimple *stmt;\n@@ -2812,7 +2837,7 @@ gimple_dump_bb_buff (pretty_printer *buffer, basic_block bb, int indent,\n    indented by INDENT spaces.  */\n \n void\n-gimple_dump_bb (FILE *file, basic_block bb, int indent, int flags)\n+gimple_dump_bb (FILE *file, basic_block bb, int indent, dump_flags_t flags)\n {\n   dump_gimple_bb_header (file, bb, indent, flags);\n   if (bb->index >= NUM_FIXED_BLOCKS)"}, {"sha": "0b74d1b0494f87b530f6c3e1aca750c203268481", "filename": "gcc/gimple-pretty-print.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgimple-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgimple-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -26,13 +26,13 @@ along with GCC; see the file COPYING3.  If not see\n /* In gimple-pretty-print.c  */\n extern void debug_gimple_stmt (gimple *);\n extern void debug_gimple_seq (gimple_seq);\n-extern void print_gimple_seq (FILE *, gimple_seq, int, int);\n-extern void print_gimple_stmt (FILE *, gimple *, int, int = 0);\n+extern void print_gimple_seq (FILE *, gimple_seq, int, dump_flags_t);\n+extern void print_gimple_stmt (FILE *, gimple *, int, dump_flags_t = TDF_NONE);\n extern void debug (gimple &ref);\n extern void debug (gimple *ptr);\n-extern void print_gimple_expr (FILE *, gimple *, int, int = 0);\n-extern void pp_gimple_stmt_1 (pretty_printer *, gimple *, int, int);\n-extern void gimple_dump_bb (FILE *, basic_block, int, int);\n+extern void print_gimple_expr (FILE *, gimple *, int, dump_flags_t = TDF_NONE);\n+extern void pp_gimple_stmt_1 (pretty_printer *, gimple *, int, dump_flags_t);\n+extern void gimple_dump_bb (FILE *, basic_block, int, dump_flags_t);\n extern void gimple_dump_bb_for_graph (pretty_printer *, basic_block);\n extern void dump_ssaname_info_to_file (FILE *, tree, int);\n "}, {"sha": "9261732d23edc0f274c8fd5dcd4e316eb210715f", "filename": "gcc/graph.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -291,9 +291,9 @@ print_graph_cfg (FILE *fp, struct function *fun)\n /* Overload with additional flag argument.  */\n \n void DEBUG_FUNCTION\n-print_graph_cfg (FILE *fp, struct function *fun, int flags)\n+print_graph_cfg (FILE *fp, struct function *fun, dump_flags_t flags)\n {\n-  int saved_dump_flags = dump_flags;\n+  dump_flags_t saved_dump_flags = dump_flags;\n   dump_flags = flags;\n   print_graph_cfg (fp, fun);\n   dump_flags = saved_dump_flags;"}, {"sha": "2b7604e2e7316a6d156da239cf69c1573dbf7901", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -96,8 +96,8 @@ DEBUG_FUNCTION void\n dot_all_sese (FILE *file, vec<sese_l>& scops)\n {\n   /* Disable debugging while printing graph.  */\n-  int tmp_dump_flags = dump_flags;\n-  dump_flags = 0;\n+  dump_flags_t tmp_dump_flags = dump_flags;\n+  dump_flags = TDF_NONE;\n \n   fprintf (file, \"digraph all {\\n\");\n "}, {"sha": "aa3a236dd914f688014ad1f78e4c6384a4066541", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -2260,7 +2260,7 @@ build_type_inheritance_graph (void)\n {\n   struct symtab_node *n;\n   FILE *inheritance_dump_file;\n-  int flags;\n+  dump_flags_t flags;\n \n   if (odr_hash)\n     return;"}, {"sha": "e2b6add6d41d6f9198c2bef13e630fd95246b55d", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -191,7 +191,7 @@ static rtx get_expansion (struct var_to_expand *);\n static void\n report_unroll (struct loop *loop, location_t locus)\n {\n-  int report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_RTL | TDF_DETAILS;\n+  dump_flags_t report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_RTL | TDF_DETAILS;\n \n   if (loop->lpt_decision.decision == LPT_NONE)\n     return;"}, {"sha": "a2fa9f742eeff2e361e40047cc0b9e6d13549dc8", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -776,7 +776,8 @@ pass_manager::register_one_dump_file (opt_pass *pass)\n \n   /* Buffer big enough to format a 32-bit UINT_MAX into.  */\n   char num[11];\n-  int flags, id;\n+  dump_flags_t flags;\n+  int id;\n   int optgroup_flags = OPTGROUP_NONE;\n   gcc::dump_manager *dumps = m_ctxt->get_dumps ();\n "}, {"sha": "fb58be6c073a2c6dd071e0e37e3df57874ea4631", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -1007,7 +1007,7 @@ debug_raw (const tree_node *ptr)\n }\n \n static void\n-dump_tree_via_hooks (const tree_node *ptr, int options)\n+dump_tree_via_hooks (const tree_node *ptr, dump_flags_t options)\n {\n   if (DECL_P (ptr))\n     lang_hooks.print_decl (stderr, const_cast <tree_node*> (ptr), 0);"}, {"sha": "ca7551c217028f42a06ef0db8ae8374d1ecc248e", "filename": "gcc/statistics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fstatistics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Fstatistics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstatistics.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -27,7 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pass_manager.h\"\n \n static int statistics_dump_nr;\n-static int statistics_dump_flags;\n+static dump_flags_t statistics_dump_flags;\n static FILE *statistics_dump_file;\n \n /* Statistics entry.  A integer counter associated to a string ID"}, {"sha": "e046a13a5fe91abeafe0fd285b2fb122c683b353", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -2376,7 +2376,7 @@ gimple_debug_bb_n (int n)\n    (see TDF_* in dumpfile.h).  */\n \n void\n-gimple_debug_cfg (int flags)\n+gimple_debug_cfg (dump_flags_t flags)\n {\n   gimple_dump_cfg (stderr, flags);\n }\n@@ -2388,7 +2388,7 @@ gimple_debug_cfg (int flags)\n    tree.h).  */\n \n void\n-gimple_dump_cfg (FILE *file, int flags)\n+gimple_dump_cfg (FILE *file, dump_flags_t flags)\n {\n   if (flags & TDF_DETAILS)\n     {\n@@ -7518,7 +7518,7 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n    SPC.  */\n \n static void\n-dump_default_def (FILE *file, tree def, int spc, int flags)\n+dump_default_def (FILE *file, tree def, int spc, dump_flags_t flags)\n {\n   for (int i = 0; i < spc; ++i)\n     fprintf (file, \" \");\n@@ -7536,7 +7536,7 @@ dump_default_def (FILE *file, tree def, int spc, int flags)\n    */\n \n void\n-dump_function_to_file (tree fndecl, FILE *file, int flags)\n+dump_function_to_file (tree fndecl, FILE *file, dump_flags_t flags)\n {\n   tree arg, var, old_current_fndecl = current_function_decl;\n   struct function *dsf;\n@@ -7759,7 +7759,7 @@ dump_function_to_file (tree fndecl, FILE *file, int flags)\n /* Dump FUNCTION_DECL FN to stderr using FLAGS (see TDF_* in tree.h)  */\n \n DEBUG_FUNCTION void\n-debug_function (tree fn, int flags)\n+debug_function (tree fn, dump_flags_t flags)\n {\n   dump_function_to_file (fn, stderr, flags);\n }"}, {"sha": "a0ef479ef20f06930a1511eb9d938aef3714d94d", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -46,7 +46,7 @@ extern edge find_taken_edge (basic_block, tree);\n extern void gimple_debug_bb (basic_block);\n extern basic_block gimple_debug_bb_n (int);\n extern void gimple_debug_cfg (int);\n-extern void gimple_dump_cfg (FILE *, int);\n+extern void gimple_dump_cfg (FILE *, dump_flags_t);\n extern void dump_cfg_stats (FILE *);\n extern void debug_cfg_stats (void);\n extern bool computed_goto_p (gimple *);\n@@ -79,7 +79,7 @@ extern void verify_sese (basic_block, basic_block, vec<basic_block> *);\n extern bool gather_ssa_name_hash_map_from (tree const &, tree const &, void *);\n extern basic_block move_sese_region_to_fn (struct function *, basic_block,\n \t\t\t\t           basic_block, tree);\n-extern void dump_function_to_file (tree, FILE *, int);\n+extern void dump_function_to_file (tree, FILE *, dump_flags_t);\n extern void debug_function (tree, int) ;\n extern void print_loops_bb (FILE *, basic_block, int, int);\n extern void print_loops (FILE *, int);"}, {"sha": "2e65a4443fc2c85ecbf156fab8bd331788e5b682", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -898,7 +898,7 @@ dump_enumerated_decls_push (tree *tp, int *walk_subtrees, void *data)\n    FILE is the dump file where to output the list and FLAGS is as in\n    print_generic_expr.  */\n void\n-dump_enumerated_decls (FILE *file, int flags)\n+dump_enumerated_decls (FILE *file, dump_flags_t flags)\n {\n   basic_block bb;\n   struct walk_stmt_info wi;"}, {"sha": "adaed62048796e982faf02400e97acc19d9addab", "filename": "gcc/tree-dfa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-dfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-dfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -36,7 +36,7 @@ extern tree get_addr_base_and_unit_offset_1 (tree, HOST_WIDE_INT *,\n extern tree get_addr_base_and_unit_offset (tree, HOST_WIDE_INT *);\n extern bool stmt_references_abnormal_ssa_name (gimple *);\n extern void replace_abnormal_ssa_names (gimple *);\n-extern void dump_enumerated_decls (FILE *, int);\n+extern void dump_enumerated_decls (FILE *, dump_flags_t);\n \n \n #endif /* GCC_TREE_DFA_H */"}, {"sha": "347b33ab50585dc3b2b412523c070af95861db43", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -713,15 +713,15 @@ dequeue_and_dump (dump_info_p di)\n /* Return nonzero if FLAG has been specified for the dump, and NODE\n    is not the root node of the dump.  */\n \n-int dump_flag (dump_info_p di, int flag, const_tree node)\n+int dump_flag (dump_info_p di, dump_flags_t flag, const_tree node)\n {\n   return (di->flags & flag) && (node != di->node);\n }\n \n /* Dump T, and all its children, on STREAM.  */\n \n void\n-dump_node (const_tree t, int flags, FILE *stream)\n+dump_node (const_tree t, dump_flags_t flags, FILE *stream)\n {\n   struct dump_info di;\n   dump_queue_p dq;"}, {"sha": "448ac83f72be892a34b695b624570016415b9839", "filename": "gcc/tree-dump.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -60,7 +60,7 @@ struct dump_info\n   /* The original node.  */\n   const_tree node;\n   /* User flags.  */\n-  int flags;\n+  dump_flags_t flags;\n   /* The next unused node index.  */\n   unsigned int index;\n   /* The next column.  */\n@@ -87,6 +87,6 @@ extern void dump_string (dump_info_p, const char *);\n extern void dump_string_field (dump_info_p, const char *, const char *);\n extern void queue_and_dump_index (dump_info_p, const char *, const_tree, int);\n extern void queue_and_dump_type (dump_info_p, const_tree);\n-extern int dump_flag (dump_info_p, int, const_tree);\n+extern int dump_flag (dump_info_p, dump_flags_t, const_tree);\n \n #endif /* ! GCC_TREE_DUMP_H */"}, {"sha": "ec28b1e3c952559aa7c7698f98580c24d54978cb", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -39,8 +39,8 @@ static const char *op_symbol (const_tree);\n static void pretty_print_string (pretty_printer *, const char*);\n static void newline_and_indent (pretty_printer *, int);\n static void maybe_init_pretty_print (FILE *);\n-static void print_struct_decl (pretty_printer *, const_tree, int, int);\n-static void do_niy (pretty_printer *, const_tree, int);\n+static void print_struct_decl (pretty_printer *, const_tree, int, dump_flags_t);\n+static void do_niy (pretty_printer *, const_tree, dump_flags_t);\n \n #define INDENT(SPACE) do { \\\n   int i; for (i = 0; i<SPACE; i++) pp_space (pp); } while (0)\n@@ -52,7 +52,7 @@ static pretty_printer *tree_pp;\n /* Try to print something for an unknown tree code.  */\n \n static void\n-do_niy (pretty_printer *pp, const_tree node, int flags)\n+do_niy (pretty_printer *pp, const_tree node, dump_flags_t flags)\n {\n   int i, len;\n \n@@ -115,7 +115,7 @@ debug_tree_chain (tree t)\n \n /* Prints declaration DECL to the FILE with details specified by FLAGS.  */\n void\n-print_generic_decl (FILE *file, tree decl, int flags)\n+print_generic_decl (FILE *file, tree decl, dump_flags_t flags)\n {\n   maybe_init_pretty_print (file);\n   print_declaration (tree_pp, decl, 2, flags);\n@@ -126,7 +126,7 @@ print_generic_decl (FILE *file, tree decl, int flags)\n    to show in the dump.  See TDF_* in dumpfile.h.  */\n \n void\n-print_generic_stmt (FILE *file, tree t, int flags)\n+print_generic_stmt (FILE *file, tree t, dump_flags_t flags)\n {\n   maybe_init_pretty_print (file);\n   dump_generic_node (tree_pp, t, 0, flags, true);\n@@ -138,7 +138,7 @@ print_generic_stmt (FILE *file, tree t, int flags)\n    INDENT spaces.  */\n \n void\n-print_generic_stmt_indented (FILE *file, tree t, int flags, int indent)\n+print_generic_stmt_indented (FILE *file, tree t, dump_flags_t flags, int indent)\n {\n   int i;\n \n@@ -154,7 +154,7 @@ print_generic_stmt_indented (FILE *file, tree t, int flags, int indent)\n    in the dump.  See TDF_* in dumpfile.h.  */\n \n void\n-print_generic_expr (FILE *file, tree t, int flags)\n+print_generic_expr (FILE *file, tree t, dump_flags_t flags)\n {\n   maybe_init_pretty_print (file);\n   dump_generic_node (tree_pp, t, 0, flags, false);\n@@ -244,7 +244,7 @@ dump_fancy_name (pretty_printer *pp, tree name)\n    in FLAGS.  */\n \n static void\n-dump_decl_name (pretty_printer *pp, tree node, int flags)\n+dump_decl_name (pretty_printer *pp, tree node, dump_flags_t flags)\n {\n   if (DECL_NAME (node))\n     {\n@@ -290,7 +290,7 @@ dump_decl_name (pretty_printer *pp, tree node, int flags)\n /* Like the above, but used for pretty printing function calls.  */\n \n static void\n-dump_function_name (pretty_printer *pp, tree node, int flags)\n+dump_function_name (pretty_printer *pp, tree node, dump_flags_t flags)\n {\n   if (CONVERT_EXPR_P (node))\n     node = TREE_OPERAND (node, 0);\n@@ -305,7 +305,7 @@ dump_function_name (pretty_printer *pp, tree node, int flags)\n \n static void\n dump_function_declaration (pretty_printer *pp, tree node,\n-\t\t\t   int spc, int flags)\n+\t\t\t   int spc, dump_flags_t flags)\n {\n   bool wrote_arg = false;\n   tree arg;\n@@ -341,7 +341,7 @@ dump_function_declaration (pretty_printer *pp, tree node,\n /* Dump the domain associated with an array.  */\n \n static void\n-dump_array_domain (pretty_printer *pp, tree domain, int spc, int flags)\n+dump_array_domain (pretty_printer *pp, tree domain, int spc, dump_flags_t flags)\n {\n   pp_left_bracket (pp);\n   if (domain)\n@@ -372,7 +372,7 @@ dump_array_domain (pretty_printer *pp, tree domain, int spc, int flags)\n    dump_generic_node.  */\n \n static void\n-dump_omp_clause (pretty_printer *pp, tree clause, int spc, int flags)\n+dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n {\n   const char *name;\n \n@@ -1051,7 +1051,7 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, int flags)\n    dump_generic_node.  */\n \n void\n-dump_omp_clauses (pretty_printer *pp, tree clause, int spc, int flags)\n+dump_omp_clauses (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n {\n   if (clause == NULL)\n     return;\n@@ -1092,7 +1092,7 @@ dump_location (pretty_printer *pp, location_t loc)\n    dump_generic_node.  */\n \n static void\n-dump_block_node (pretty_printer *pp, tree block, int spc, int flags)\n+dump_block_node (pretty_printer *pp, tree block, int spc, dump_flags_t flags)\n {\n   tree t;\n \n@@ -1205,7 +1205,7 @@ dump_block_node (pretty_printer *pp, tree block, int spc, int flags)\n    to be a statement and it is terminated by ';' if appropriate.  */\n \n int\n-dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n+dump_generic_node (pretty_printer *pp, tree node, int spc, dump_flags_t flags,\n \t\t   bool is_stmt)\n {\n   tree type;\n@@ -3313,7 +3313,7 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n /* Print the declaration of a variable.  */\n \n void\n-print_declaration (pretty_printer *pp, tree t, int spc, int flags)\n+print_declaration (pretty_printer *pp, tree t, int spc, dump_flags_t flags)\n {\n   INDENT (spc);\n \n@@ -3414,7 +3414,8 @@ print_declaration (pretty_printer *pp, tree t, int spc, int flags)\n    FIXME: Still incomplete.  */\n \n static void\n-print_struct_decl (pretty_printer *pp, const_tree node, int spc, int flags)\n+print_struct_decl (pretty_printer *pp, const_tree node, int spc,\n+\t\t   dump_flags_t flags)\n {\n   /* Print the name of the structure.  */\n   if (TYPE_NAME (node))\n@@ -3810,7 +3811,7 @@ op_symbol (const_tree op)\n    the gimple_call_fn of a GIMPLE_CALL.  */\n \n void\n-print_call_name (pretty_printer *pp, tree node, int flags)\n+print_call_name (pretty_printer *pp, tree node, dump_flags_t flags)\n {\n   tree op0 = node;\n \n@@ -4050,7 +4051,7 @@ pp_tree_identifier (pretty_printer *pp, tree id)\n    function dump.  */\n \n void\n-dump_function_header (FILE *dump_file, tree fdecl, int flags)\n+dump_function_header (FILE *dump_file, tree fdecl, dump_flags_t flags)\n {\n   const char *dname, *aname;\n   struct cgraph_node *node = cgraph_node::get (fdecl);"}, {"sha": "07270b735a742986d9ac10356f297932cdb05f8e", "filename": "gcc/tree-pretty-print.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -34,20 +34,20 @@ along with GCC; see the file COPYING3.  If not see\n extern void debug_generic_expr (tree);\n extern void debug_generic_stmt (tree);\n extern void debug_tree_chain (tree);\n-extern void print_generic_decl (FILE *, tree, int);\n-extern void print_generic_stmt (FILE *, tree, int = 0);\n-extern void print_generic_stmt_indented (FILE *, tree, int, int);\n-extern void print_generic_expr (FILE *, tree, int = 0);\n-extern void dump_omp_clauses (pretty_printer *, tree, int, int);\n-extern int dump_generic_node (pretty_printer *, tree, int, int, bool);\n-extern void print_declaration (pretty_printer *, tree, int, int);\n+extern void print_generic_decl (FILE *, tree, dump_flags_t);\n+extern void print_generic_stmt (FILE *, tree, dump_flags_t = TDF_NONE);\n+extern void print_generic_stmt_indented (FILE *, tree, dump_flags_t, int);\n+extern void print_generic_expr (FILE *, tree, dump_flags_t = TDF_NONE);\n+extern void dump_omp_clauses (pretty_printer *, tree, int, dump_flags_t);\n+extern int dump_generic_node (pretty_printer *, tree, int, dump_flags_t, bool);\n+extern void print_declaration (pretty_printer *, tree, int, dump_flags_t);\n extern int op_code_prio (enum tree_code);\n extern int op_prio (const_tree);\n extern const char *op_symbol_code (enum tree_code);\n-extern void print_call_name (pretty_printer *, tree, int);\n+extern void print_call_name (pretty_printer *, tree, dump_flags_t);\n extern void percent_K_format (text_info *);\n extern void pp_tree_identifier (pretty_printer *, tree);\n-extern void dump_function_header (FILE *, tree, int);\n+extern void dump_function_header (FILE *, tree, dump_flags_t);\n extern void pp_double_int (pretty_printer *pp, double_int d, bool uns);\n extern void dump_location (pretty_printer *buffer, location_t loc);\n "}, {"sha": "c77075e4ac6b11efdaaa84dfc3eecc53b8216749", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -613,7 +613,7 @@ clear_unused_block_pointer (void)\n    indentation level and FLAGS is as in print_generic_expr.  */\n \n static void\n-dump_scope_block (FILE *file, int indent, tree scope, int flags)\n+dump_scope_block (FILE *file, int indent, tree scope, dump_flags_t flags)\n {\n   tree var, t;\n   unsigned int i;\n@@ -661,7 +661,7 @@ dump_scope_block (FILE *file, int indent, tree scope, int flags)\n    is as in print_generic_expr.  */\n \n DEBUG_FUNCTION void\n-debug_scope_block (tree scope, int flags)\n+debug_scope_block (tree scope, dump_flags_t flags)\n {\n   dump_scope_block (stderr, 0, scope, flags);\n }\n@@ -671,7 +671,7 @@ debug_scope_block (tree scope, int flags)\n    FLAGS is as in print_generic_expr.  */\n \n void\n-dump_scope_blocks (FILE *file, int flags)\n+dump_scope_blocks (FILE *file, dump_flags_t flags)\n {\n   dump_scope_block (file, 0, DECL_INITIAL (current_function_decl), flags);\n }\n@@ -681,7 +681,7 @@ dump_scope_blocks (FILE *file, int flags)\n    FLAGS is as in print_generic_expr.  */\n \n DEBUG_FUNCTION void\n-debug_scope_blocks (int flags)\n+debug_scope_blocks (dump_flags_t flags)\n {\n   dump_scope_blocks (stderr, flags);\n }"}, {"sha": "dd9ca799597611bd3746c60fc8ab127e20514d64", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -73,9 +73,9 @@ extern void delete_var_map (var_map);\n extern int var_union (var_map, tree, tree);\n extern void partition_view_normal (var_map);\n extern void partition_view_bitmap (var_map, bitmap);\n-extern void dump_scope_blocks (FILE *, int);\n-extern void debug_scope_block (tree, int);\n-extern void debug_scope_blocks (int);\n+extern void dump_scope_blocks (FILE *, dump_flags_t);\n+extern void debug_scope_block (tree, dump_flags_t);\n+extern void debug_scope_blocks (dump_flags_t);\n extern void remove_unused_locals (void);\n extern void dump_var_map (FILE *, var_map);\n extern void debug (_var_map &ref);"}, {"sha": "0a38c0a36d6df0904aef300ba5ed434825e413fd", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -686,7 +686,7 @@ try_unroll_loop_completely (struct loop *loop,\n   struct loop_size size;\n   bool n_unroll_found = false;\n   edge edge_to_cancel = NULL;\n-  int report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_RTL | TDF_DETAILS;\n+  dump_flags_t report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_RTL | TDF_DETAILS;\n \n   /* See if we proved number of iterations to be low constant.\n "}, {"sha": "b41abf3335c075b3b2013859de385e9bd1c80280", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -2432,7 +2432,7 @@ reduction_code_for_scalar_code (enum tree_code code,\n    STMT is printed with a message MSG. */\n \n static void\n-report_vect_op (int msg_type, gimple *stmt, const char *msg)\n+report_vect_op (dump_flags_t msg_type, gimple *stmt, const char *msg)\n {\n   dump_printf_loc (msg_type, vect_location, \"%s\", msg);\n   dump_gimple_stmt (msg_type, TDF_SLIM, stmt, 0);"}, {"sha": "d221fc63873c10edbf65d35009a1522e8cad44bf", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a81741814618bc19d13de0b9e59c0324114cc86/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=1a81741814618bc19d13de0b9e59c0324114cc86", "patch": "@@ -1220,7 +1220,7 @@ vect_build_slp_tree (vec_info *vinfo,\n /* Dump a slp tree NODE using flags specified in DUMP_KIND.  */\n \n static void\n-vect_print_slp_tree (int dump_kind, location_t loc, slp_tree node)\n+vect_print_slp_tree (dump_flags_t dump_kind, location_t loc, slp_tree node)\n {\n   int i;\n   gimple *stmt;"}]}