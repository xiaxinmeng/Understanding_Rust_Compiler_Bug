{"sha": "c3297044f0055880dd23ffbf641aa3a5860197e1", "node_id": "C_kwDOANBUbNoAKGMzMjk3MDQ0ZjAwNTU4ODBkZDIzZmZiZjY0MWFhM2E1ODYwMTk3ZTE", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-07-04T19:50:23Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-07-04T19:50:23Z"}, "message": "OpenMP/Fortran: Add support for OpenMP 5.2 linear clause syntax\n\nFortran part to C/C++\ncommit r13-1002-g03b71406323ddc065b1d7837d8b43b17e4b048b5\n\ngcc/fortran/ChangeLog:\n\n\t* gfortran.h (gfc_omp_namelist): Update by creating 'linear' struct,\n\tmove 'linear_op' as 'op' to id and add 'old_modifier' to it.\n\t* dump-parse-tree.cc (show_omp_namelist): Update accordingly.\n\t* module.cc (mio_omp_declare_simd): Likewise.\n\t* trans-openmp.cc (gfc_trans_omp_clauses): Likewise.\n\t* openmp.cc (resolve_omp_clauses): Likewise; accept new-style\n\t'val' modifier with do/simd.\n\t(gfc_match_omp_clauses): Handle OpenMP 5.2 linear clause syntax.\n\nlibgomp/ChangeLog:\n\n\t* libgomp.texi (OpenMP 5.2): Mark linear-clause change as 'Y'.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/gomp/linear-4.c: New test.\n\t* gfortran.dg/gomp/linear-2.f90: New test.\n\t* gfortran.dg/gomp/linear-3.f90: New test.\n\t* gfortran.dg/gomp/linear-4.f90: New test.\n\t* gfortran.dg/gomp/linear-5.f90: New test.\n\t* gfortran.dg/gomp/linear-6.f90: New test.\n\t* gfortran.dg/gomp/linear-7.f90: New test.\n\t* gfortran.dg/gomp/linear-8.f90: New test.\n\nCo-authored-by: Jakub Jelinek <jakub@redhat.com>", "tree": {"sha": "528d5fb4cc80e005f3eb7ac7c9f06f394fc94bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/528d5fb4cc80e005f3eb7ac7c9f06f394fc94bb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3297044f0055880dd23ffbf641aa3a5860197e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3297044f0055880dd23ffbf641aa3a5860197e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3297044f0055880dd23ffbf641aa3a5860197e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3297044f0055880dd23ffbf641aa3a5860197e1/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8dbe7d834b9264d7a5cd74d3ce6c750d28b3af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce8dbe7d834b9264d7a5cd74d3ce6c750d28b3af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce8dbe7d834b9264d7a5cd74d3ce6c750d28b3af"}], "stats": {"total": 643, "additions": 613, "deletions": 30}, "files": [{"sha": "5352008a63dd0a95ae3e9fd4b052cce89257f01f", "filename": "gcc/fortran/dump-parse-tree.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Fdump-parse-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Fdump-parse-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.cc?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -1421,16 +1421,16 @@ show_omp_namelist (int list_type, gfc_omp_namelist *n)\n \t  case OMP_MAP_RELEASE: fputs (\"release:\", dumpfile); break;\n \t  default: break;\n \t  }\n-      else if (list_type == OMP_LIST_LINEAR)\n-\tswitch (n->u.linear_op)\n+      else if (list_type == OMP_LIST_LINEAR && n->u.linear.old_modifier)\n+\tswitch (n->u.linear.op)\n \t  {\n \t  case OMP_LINEAR_REF: fputs (\"ref(\", dumpfile); break;\n \t  case OMP_LINEAR_VAL: fputs (\"val(\", dumpfile); break;\n \t  case OMP_LINEAR_UVAL: fputs (\"uval(\", dumpfile); break;\n \t  default: break;\n \t  }\n       fprintf (dumpfile, \"%s\", n->sym ? n->sym->name : \"omp_all_memory\");\n-      if (list_type == OMP_LIST_LINEAR && n->u.linear_op != OMP_LINEAR_DEFAULT)\n+      if (list_type == OMP_LIST_LINEAR && n->u.linear.op != OMP_LINEAR_DEFAULT)\n \tfputc (')', dumpfile);\n       if (n->expr)\n \t{"}, {"sha": "696aadd7db660667a9b735b25fb1ec98a801224d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -1345,7 +1345,11 @@ typedef struct gfc_omp_namelist\n       gfc_omp_reduction_op reduction_op;\n       gfc_omp_depend_op depend_op;\n       gfc_omp_map_op map_op;\n-      gfc_omp_linear_op linear_op;\n+      struct\n+\t{\n+\t  ENUM_BITFIELD (gfc_omp_linear_op) op:4;\n+\t  bool old_modifier;\n+\t} linear;\n       struct gfc_common_head *common;\n       bool lastprivate_conditional;\n     } u;"}, {"sha": "5ddabdcff4d7969bd01cd5b0dc96ea40858c2e58", "filename": "gcc/fortran/module.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.cc?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -4383,10 +4383,10 @@ mio_omp_declare_simd (gfc_namespace *ns, gfc_omp_declare_simd **odsp)\n \t    }\n \t  for (n = ods->clauses->lists[OMP_LIST_LINEAR]; n; n = n->next)\n \t    {\n-\t      if (n->u.linear_op == OMP_LINEAR_DEFAULT)\n+\t      if (n->u.linear.op == OMP_LINEAR_DEFAULT)\n \t\tmio_name (4, omp_declare_simd_clauses);\n \t      else\n-\t\tmio_name (32 + n->u.linear_op, omp_declare_simd_clauses);\n+\t\tmio_name (32 + n->u.linear.op, omp_declare_simd_clauses);\n \t      mio_symbol_ref (&n->sym);\n \t      mio_expr (&n->expr);\n \t    }\n@@ -4438,7 +4438,7 @@ mio_omp_declare_simd (gfc_namespace *ns, gfc_omp_declare_simd **odsp)\n \t    case 34:\n \t    case 35:\n \t      *ptrs[1] = n = gfc_get_omp_namelist ();\n-\t      n->u.linear_op = (enum gfc_omp_linear_op) (t - 32);\n+\t      n->u.linear.op = (enum gfc_omp_linear_op) (t - 32);\n \t      t = 4;\n \t      goto finish_namelist;\n \t    }"}, {"sha": "bd4ff259fe0392e4d203ae88ac538d030f800cdf", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 143, "deletions": 20, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -2324,24 +2324,34 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t  if ((mask & OMP_CLAUSE_LINEAR)\n \t      && gfc_match (\"linear (\") == MATCH_YES)\n \t    {\n+\t      bool old_linear_modifier = false;\n \t      gfc_omp_linear_op linear_op = OMP_LINEAR_DEFAULT;\n \t      gfc_expr *step = NULL;\n \n \t      if (gfc_match_omp_variable_list (\" ref (\",\n \t\t\t\t\t       &c->lists[OMP_LIST_LINEAR],\n \t\t\t\t\t       false, NULL, &head)\n \t\t  == MATCH_YES)\n-\t\tlinear_op = OMP_LINEAR_REF;\n+\t\t{\n+\t\t  linear_op = OMP_LINEAR_REF;\n+\t\t  old_linear_modifier = true;\n+\t\t}\n \t      else if (gfc_match_omp_variable_list (\" val (\",\n \t\t\t\t\t\t    &c->lists[OMP_LIST_LINEAR],\n \t\t\t\t\t\t    false, NULL, &head)\n \t\t       == MATCH_YES)\n-\t\tlinear_op = OMP_LINEAR_VAL;\n+\t\t{\n+\t\t  linear_op = OMP_LINEAR_VAL;\n+\t\t  old_linear_modifier = true;\n+\t\t}\n \t      else if (gfc_match_omp_variable_list (\" uval (\",\n \t\t\t\t\t\t    &c->lists[OMP_LIST_LINEAR],\n \t\t\t\t\t\t    false, NULL, &head)\n \t\t       == MATCH_YES)\n-\t\tlinear_op = OMP_LINEAR_UVAL;\n+\t\t{\n+\t\t  linear_op = OMP_LINEAR_UVAL;\n+\t\t  old_linear_modifier = true;\n+\t\t}\n \t      else if (gfc_match_omp_variable_list (\"\",\n \t\t\t\t\t\t    &c->lists[OMP_LIST_LINEAR],\n \t\t\t\t\t\t    false, &end_colon, &head)\n@@ -2364,24 +2374,127 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t      break;\n \t\t    }\n \t\t}\n-\t      if (end_colon && gfc_match (\" %e )\", &step) != MATCH_YES)\n+\t      gfc_gobble_whitespace ();\n+\t      if (old_linear_modifier && end_colon)\n \t\t{\n-\t\t  gfc_free_omp_namelist (*head, false);\n-\t\t  gfc_current_locus = old_loc;\n-\t\t  *head = NULL;\n-\t\t  break;\n+\t\t  if (gfc_match (\" %e )\", &step) != MATCH_YES)\n+\t\t    {\n+\t\t      gfc_free_omp_namelist (*head, false);\n+\t\t      gfc_current_locus = old_loc;\n+\t\t      *head = NULL;\n+\t\t      goto error;\n+\t\t    }\n \t\t}\n-\t      else if (!end_colon)\n+\t      else if (end_colon)\n+\t\t{\n+\t\t  bool has_error = false;\n+\t\t  bool has_modifiers = false;\n+\t\t  bool has_step = false;\n+\t\t  bool duplicate_step = false;\n+\t\t  bool duplicate_mod = false;\n+\t\t  while (true)\n+\t\t    {\n+\t\t      old_loc = gfc_current_locus;\n+\t\t      bool close_paren = gfc_match (\"val )\") == MATCH_YES;\n+\t\t      if (close_paren || gfc_match (\"val , \") == MATCH_YES)\n+\t\t\t{\n+\t\t\t  if (linear_op != OMP_LINEAR_DEFAULT)\n+\t\t\t    {\n+\t\t\t      duplicate_mod = true;\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t  linear_op = OMP_LINEAR_VAL;\n+\t\t\t  has_modifiers = true;\n+\t\t\t  if (close_paren)\n+\t\t\t    break;\n+\t\t\t  continue;\n+\t\t\t}\n+\t\t      close_paren = gfc_match (\"uval )\") == MATCH_YES;\n+\t\t      if (close_paren || gfc_match (\"uval , \") == MATCH_YES)\n+\t\t\t{\n+\t\t\t  if (linear_op != OMP_LINEAR_DEFAULT)\n+\t\t\t    {\n+\t\t\t      duplicate_mod = true;\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t  linear_op = OMP_LINEAR_UVAL;\n+\t\t\t  has_modifiers = true;\n+\t\t\t  if (close_paren)\n+\t\t\t    break;\n+\t\t\t  continue;\n+\t\t\t}\n+\t\t      close_paren = gfc_match (\"ref )\") == MATCH_YES;\n+\t\t      if (close_paren || gfc_match (\"ref , \") == MATCH_YES)\n+\t\t\t{\n+\t\t\t  if (linear_op != OMP_LINEAR_DEFAULT)\n+\t\t\t    {\n+\t\t\t      duplicate_mod = true;\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t  linear_op = OMP_LINEAR_REF;\n+\t\t\t  has_modifiers = true;\n+\t\t\t  if (close_paren)\n+\t\t\t    break;\n+\t\t\t  continue;\n+\t\t\t}\n+\t\t      close_paren = (gfc_match (\"step ( %e ) )\", &step)\n+\t\t\t\t     == MATCH_YES);\n+\t\t      if (close_paren\n+\t\t\t  || gfc_match (\"step ( %e ) , \", &step) == MATCH_YES)\n+\t\t\t{\n+\t\t\t  if (has_step)\n+\t\t\t    {\n+\t\t\t      duplicate_step = true;\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t  has_modifiers = has_step = true;\n+\t\t\t  if (close_paren)\n+\t\t\t    break;\n+\t\t\t  continue;\n+\t\t\t}\n+\t\t      if (!has_modifiers\n+\t\t\t  && gfc_match (\"%e )\", &step) == MATCH_YES)\n+\t\t\t{\n+\t\t\t  if ((step->expr_type == EXPR_FUNCTION\n+\t\t\t\t|| step->expr_type == EXPR_VARIABLE)\n+\t\t\t      && strcmp (step->symtree->name, \"step\") == 0)\n+\t\t\t    {\n+\t\t\t      gfc_current_locus = old_loc;\n+\t\t\t      gfc_match (\"step (\");\n+\t\t\t      has_error = true;\n+\t\t\t    }\n+\t\t\t  break;\n+\t\t\t}\n+\t\t      has_error = true;\n+\t\t      break;\n+\t\t    }\n+\t\t  if (duplicate_mod || duplicate_step)\n+\t\t    {\n+\t\t      gfc_error (\"Multiple %qs modifiers specified at %C\",\n+\t\t\t\t duplicate_mod ? \"linear\" : \"step\");\n+\t\t      has_error = true;\n+\t\t    }\n+\t\t  if (has_error)\n+\t\t    {\n+\t\t      gfc_free_omp_namelist (*head, false);\n+\t\t      *head = NULL;\n+\t\t      goto error;\n+\t\t    }\n+\t\t}\n+\t      else\n \t\t{\n \t\t  step = gfc_get_constant_expr (BT_INTEGER,\n \t\t\t\t\t\tgfc_default_integer_kind,\n \t\t\t\t\t\t&old_loc);\n \t\t  mpz_set_si (step->value.integer, 1);\n \t\t}\n \t      (*head)->expr = step;\n-\t      if (linear_op != OMP_LINEAR_DEFAULT)\n+\t      if (linear_op != OMP_LINEAR_DEFAULT || old_linear_modifier)\n \t\tfor (gfc_omp_namelist *n = *head; n; n = n->next)\n-\t\t  n->u.linear_op = linear_op;\n+\t\t  {\n+\t\t    n->u.linear.op = linear_op;\n+\t\t    n->u.linear.old_modifier = old_linear_modifier;\n+\t\t  }\n \t      continue;\n \t    }\n \t  if ((mask & OMP_CLAUSE_LINK)\n@@ -7439,28 +7552,38 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t\t    break;\n \t\t  case OMP_LIST_LINEAR:\n \t\t    if (code\n-\t\t\t&& n->u.linear_op != OMP_LINEAR_DEFAULT\n-\t\t\t&& n->u.linear_op != linear_op)\n+\t\t\t&& n->u.linear.op != OMP_LINEAR_DEFAULT\n+\t\t\t&& n->u.linear.op != linear_op)\n \t\t      {\n-\t\t\tgfc_error (\"LINEAR clause modifier used on DO or SIMD\"\n-\t\t\t\t   \" construct at %L\", &n->where);\n-\t\t\tlinear_op = n->u.linear_op;\n+\t\t\tif (n->u.linear.old_modifier)\n+\t\t\t  {\n+\t\t\t    gfc_error (\"LINEAR clause modifier used on DO or \"\n+\t\t\t\t       \"SIMD construct at %L\", &n->where);\n+\t\t\t    linear_op = n->u.linear.op;\n+\t\t\t  }\n+\t\t\telse if (n->u.linear.op != OMP_LINEAR_VAL)\n+\t\t\t  {\n+\t\t\t    gfc_error (\"LINEAR clause modifier other than VAL \"\n+\t\t\t\t       \"used on DO or SIMD construct at %L\",\n+\t\t\t\t       &n->where);\n+\t\t\t    linear_op = n->u.linear.op;\n+\t\t\t  }\n \t\t      }\n \t\t    else if (omp_clauses->orderedc)\n \t\t      gfc_error (\"LINEAR clause specified together with \"\n \t\t\t\t \"ORDERED clause with argument at %L\",\n \t\t\t\t &n->where);\n-\t\t    else if (n->u.linear_op != OMP_LINEAR_REF\n+\t\t    else if (n->u.linear.op != OMP_LINEAR_REF\n \t\t\t     && n->sym->ts.type != BT_INTEGER)\n \t\t      gfc_error (\"LINEAR variable %qs must be INTEGER \"\n \t\t\t\t \"at %L\", n->sym->name, &n->where);\n-\t\t    else if ((n->u.linear_op == OMP_LINEAR_REF\n-\t\t\t      || n->u.linear_op == OMP_LINEAR_UVAL)\n+\t\t    else if ((n->u.linear.op == OMP_LINEAR_REF\n+\t\t\t      || n->u.linear.op == OMP_LINEAR_UVAL)\n \t\t\t     && n->sym->attr.value)\n \t\t      gfc_error (\"LINEAR dummy argument %qs with VALUE \"\n \t\t\t\t \"attribute with %s modifier at %L\",\n \t\t\t\t n->sym->name,\n-\t\t\t\t n->u.linear_op == OMP_LINEAR_REF\n+\t\t\t\t n->u.linear.op == OMP_LINEAR_REF\n \t\t\t\t ? \"REF\" : \"UVAL\", &n->where);\n \t\t    else if (n->expr)\n \t\t      {"}, {"sha": "de27ed52c0274015c957918062ee2d381298801e", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -2751,7 +2751,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\t\t\t\t      OMP_CLAUSE_LINEAR);\n \t\t\tOMP_CLAUSE_DECL (node) = t;\n \t\t\tomp_clause_linear_kind kind;\n-\t\t\tswitch (n->u.linear_op)\n+\t\t\tswitch (n->u.linear.op)\n \t\t\t  {\n \t\t\t  case OMP_LINEAR_DEFAULT:\n \t\t\t    kind = OMP_CLAUSE_LINEAR_DEFAULT;\n@@ -2769,7 +2769,8 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\t    gcc_unreachable ();\n \t\t\t  }\n \t\t\tOMP_CLAUSE_LINEAR_KIND (node) = kind;\n-\t\t\tOMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER (node) = 1;\n+\t\t\tOMP_CLAUSE_LINEAR_OLD_LINEAR_MODIFIER (node)\n+\t\t\t  = n->u.linear.old_modifier;\n \t\t\tif (last_step_expr && last_step == NULL_TREE)\n \t\t\t  {\n \t\t\t    if (!declare_simd)"}, {"sha": "59c22b8f86b84b279260066cd169483e1ad94b72", "filename": "gcc/testsuite/c-c++-common/gomp/linear-4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Flinear-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Flinear-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Flinear-4.c?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+int step (int x, int y, int z) { return x + y + z; }\n+\n+int\n+foo (int x)\n+{\n+  int i;\n+  #pragma omp parallel for linear (x : step (step (1, 2, 3)))\n+  for (i = 0; i < 64; i++)\n+    x += 6;\n+  return x;\n+}\n+\n+int\n+bar (int x)\n+{\n+  int i;\n+  #pragma omp parallel for linear (x : step (1, 2, 3))\t/* { dg-error \"expected\" } */\n+  for (i = 0; i < 64; i++)\n+    x += 6;\n+  return x;\n+}\n+\n+int\n+bar2 (int x)\n+{\n+  int i;\n+  #pragma omp parallel for linear (x : step (1, 2, 3) * 1)\n+  for (i = 0; i < 64; i++)\n+    x += 6;\n+  return x;\n+}"}, {"sha": "05f007fd5c213394c161d503e3b5bf105cf84d94", "filename": "gcc/testsuite/gfortran.dg/gomp/linear-2.f90", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-2.f90?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -0,0 +1,112 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -fdump-tree-original\" }\n+\n+module m\n+  implicit none (type, external)\n+\n+  integer i\n+\n+  interface\n+    integer function bar (x, y, z)\n+      integer, value :: x, y, z\n+      !$omp declare simd linear (x : val, step (1)) linear (y : step (2))\n+    end\n+\n+    integer function baz (x, y, z)\n+      integer, value :: x, y, z\n+      !$omp declare simd linear (x : step (1), val)\n+    end\n+\n+    integer function qux (x, val)\n+      integer, value :: x, val\n+      !$omp declare simd linear (val (x) : val) uniform (val)\n+    end\n+\n+    integer function corge (x, val)\n+      integer, value :: x, val\n+      !$omp declare simd linear (x : val, step (val)) uniform (val)\n+    end\n+\n+    integer function grault (x)\n+      integer, value :: x\n+      !$omp declare simd linear (x : val)\n+    end\n+\n+    integer function step (x)\n+      integer, value :: x\n+    end\n+  end interface\n+\n+contains\n+\n+subroutine foo (x,y)\n+  integer :: x, y\n+  integer :: val\n+\n+  val = 1\n+\n+  !$omp simd linear (i: step (3))\n+  do i = 0, 32, 3\n+  end do\n+\n+  !$omp simd linear (i: val, step (3))\n+  do i = 0, 32, 3\n+  end do\n+\n+  !$omp simd linear (x: step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp simd linear (x: step (y + 1), val)\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do linear (x: step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do linear (x: val, step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do simd linear (i: step (3))\n+  do i = 0, 32, 3\n+  end do\n+\n+  !$omp parallel do simd linear (i: step (3), val)\n+  do i = 0, 32, 3\n+  end do\n+\n+  !$omp parallel do simd linear (x: step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do simd linear (x: val, step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do simd linear (i: val + 0)\n+  do i = 0, 9\n+  end do\n+\n+  !$omp parallel do simd linear (i: step (1) * 1)\n+  do i = 0, 9\n+  end do\n+end\n+end module\n+\n+! { dg-final { scan-tree-dump-times \"#pragma omp parallel\" 8 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp for nowait\" 6 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp for linear\\\\(x:D\\\\.\\[0-9\\]+\\\\) nowait\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp for linear\\\\(x:val,step\\\\(D\\\\.\\[0-9\\]+\\\\)\\\\) nowait\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(count\\\\.\\[0-9\\]:1\\\\) linear\\\\(i:3\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(count\\\\.\\[0-9\\]:1\\\\) linear\\\\(i:val,step\\\\(3\\\\)\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) linear\\\\(x:D\\\\.\\[0-9\\]+\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:1\\\\) linear\\\\(x:val,step\\\\(D\\\\.\\[0-9\\]+\\\\)\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"#pragma omp simd linear\\\\(i:D\\\\.\\[0-9\\]+\\\\)\" 2 \"original\" } }"}, {"sha": "dee87b1a899a48ac5141350ef2283f3146818603", "filename": "gcc/testsuite/gfortran.dg/gomp/linear-3.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-3.f90?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+\n+module m2\n+  implicit none (type, external)\n+\n+  integer :: val\n+\n+contains\n+integer function step (x)\n+  integer, value :: x\n+end\n+subroutine foo(x)\n+  integer, value :: x\n+  !$omp declare simd linear (val (x) : step (1))\t! { dg-error \"requires a constant integer linear-step expression or dummy argument\" }\n+end\n+end module m2\n+\n+\n+module m\n+  implicit none (type, external)\n+\n+  integer :: val\n+\n+contains\n+integer function step (x)\n+  integer, value :: x\n+  !$omp declare simd linear (val (x) : step (1))\t! { dg-error \"Failed to match clause\" }\n+end\n+\n+integer function bar (x, y, z)\n+  integer, value :: x, y, z\n+  !$omp declare simd linear (val (x) : val)\t\t! { dg-error \"requires a constant integer linear-step expression or dummy argument\" }\n+end\n+\n+integer function baz (x, y, z)\n+  integer, value :: x, y, z\n+end\n+end module m"}, {"sha": "ac532f81000b3cd234ee9a134cee1ecebd4e781a", "filename": "gcc/testsuite/gfortran.dg/gomp/linear-4.f90", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-4.f90?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -0,0 +1,102 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+\n+module m\n+implicit none\n+\n+integer :: i\n+\n+interface\n+  integer function bar (x,  y, z)\n+    integer :: x, y\n+    integer, value :: z\n+    !$omp declare simd linear (x : ref, step (1)) linear (y : step (2), uval)\n+  end\n+\n+  integer function baz (x, y, z)\n+    integer :: x\n+    integer, value :: y, z\n+    !$omp declare simd linear (x : step (1), uval)\n+  end\n+\n+  integer function qux (x, ref)\n+    integer :: x\n+    integer, value :: ref\n+    !$omp declare simd linear (ref (x) : ref) uniform (ref)\n+  end\n+\n+  integer function corge (x, ref)\n+    integer :: x\n+    integer, value :: ref\n+    !$omp declare simd linear (x : ref, step (ref)) uniform (ref)\n+  end\n+\n+  integer function grault (x)\n+    integer :: x\n+    !$omp declare simd linear (x : ref)\n+  end\n+\n+  integer function waldo (x)\n+    integer :: x\n+    !$omp declare simd linear (x : uval)\n+  end\n+end interface\n+\n+contains\n+\n+integer function step (x)\n+  integer, value :: x\n+  step = x\n+end\n+\n+subroutine foo (x, y)\n+  integer :: x, y\n+  !$omp simd linear (x: step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp simd linear (x: val, step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do linear (x: step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do linear (x: step (y + 1), val)\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do simd linear (x: step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do simd linear (x: val, step (y + 1))\n+  do i = 0, 9\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do simd linear (x: step (1) + 0)\n+  do i = 0, 9\n+    x = x + step (1) + 0\n+  end do\n+\n+  block\n+    integer, parameter :: ref = 1, uval = 2\n+    !$omp parallel do simd linear (x: ref + 0)\n+    do i = 0, 9\n+      x = x + ref + 0\n+    end do\n+\n+    !$omp parallel do simd linear (x: uval * 1)\n+    do i = 0, 9\n+      x = x + uval\n+    end do\n+  end block\n+end\n+end"}, {"sha": "b00492d4b58fb27e1c5afaaacb0e552bda79675f", "filename": "gcc/testsuite/gfortran.dg/gomp/linear-5.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-5.f90?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+\n+module m\n+implicit none\n+integer :: i\n+\n+contains\n+\n+subroutine foo (x, y)\n+  integer :: x, y\n+\n+  !$omp simd linear (x: step (y + 1), ref)\t\t! { dg-error \"LINEAR clause modifier other than VAL used on DO or SIMD construct\" }\n+  do i = 0, 10\n+    x = x + y + 1\n+  end do\n+\n+  !$omp simd linear (x: uval, step (y + 1))\t\t! { dg-error \"LINEAR clause modifier other than VAL used on DO or SIMD construct\" }\n+  do i = 0, 10\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do linear (x: ref, step (y + 1))\t! { dg-error \"LINEAR clause modifier other than VAL used on DO or SIMD construct\" }\n+  do i = 0, 10\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do linear (x: step (y + 1), uval)\t! { dg-error \"LINEAR clause modifier other than VAL used on DO or SIMD construct\" }\n+  do i = 0, 10\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do simd linear (x: step (y + 1), ref)\t! { dg-error \"LINEAR clause modifier other than VAL used on DO or SIMD construct\" }\n+  do i = 0, 10\n+    x = x + y + 1\n+  end do\n+\n+  !$omp parallel do simd linear (x: uval, step (y + 1))\t! { dg-error \"LINEAR clause modifier other than VAL used on DO or SIMD construct\" }\n+  do i = 0, 10\n+    x = x + y + 1\n+  end do\n+end\n+end"}, {"sha": "57693ba6de1b77aba26bdcc378fb176ca22950e5", "filename": "gcc/testsuite/gfortran.dg/gomp/linear-6.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-6.f90?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -0,0 +1,54 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+\n+module m\n+implicit none\n+integer, parameter :: val = 1\n+integer, parameter :: ref = 2\n+integer, parameter :: uval = 3\n+\n+interface\n+  integer function foo (x, y, z)\n+    import\n+    implicit none\n+    integer, value :: x\n+    integer :: y, z\n+    !$omp declare simd linear (val (x) : step (1)) linear (ref (y) : step (2)) linear (uval (z) : step (3))\n+\n+! STEP is a function - thus:\n+! { dg-error \"'x' in LINEAR clause at .1. requires a constant integer linear-step expression or dummy argument specified in UNIFORM clause\" \"\" { target *-*-* } .-3 }\n+! { dg-error \"'y' in LINEAR clause at .1. requires a constant integer linear-step expression or dummy argument specified in UNIFORM clause\" \"\" { target *-*-* } .-4 }\n+! { dg-error \"'z' in LINEAR clause at .1. requires a constant integer linear-step expression or dummy argument specified in UNIFORM clause\" \"\" { target *-*-* } .-5 }\n+\n+  end\n+\n+  integer function bar (x, y, z)\n+    import\n+    implicit none\n+    integer, value :: x\n+    integer :: y, z\n+    !$omp declare simd linear (val (x) : val) linear (ref (y) : ref) linear (uval (z) : uval)\n+  end\n+\n+  integer function baz (x, y, z)\n+    import\n+    implicit none\n+    integer, value :: x\n+    integer :: y, z\n+    !$omp declare simd linear (val (x) : ref) linear (ref (y) : uval) linear (uval (z) : val)\n+  end\n+\n+  integer function qux (x, y, z)\n+    import\n+    implicit none\n+    integer, value :: x\n+    integer :: y, z\n+    !$omp declare simd linear (val (x) : uval) linear (ref (y) : val) linear (uval (z) : ref)\n+  end\n+end interface\n+contains\n+  integer function step (x)\n+    integer, value :: x\n+     step = x\n+  end\n+end module"}, {"sha": "5e763a92ca61ea0b6cec3d020a70822ff580670f", "filename": "gcc/testsuite/gfortran.dg/gomp/linear-7.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-7.f90?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+\n+module m\n+  implicit none (type, external)\n+\n+  integer i\n+\n+  interface\n+    integer function s1 (x, y, z)\n+      integer, value :: x, y, z\n+      !$omp declare simd linear (x : val, step (1), val)  ! { dg-error \"Multiple 'linear' modifiers specified\" }\n+    end\n+\n+    integer function s2 (x, y, z)\n+      integer, value :: x, y, z\n+      !$omp declare simd linear (x : val, step (1), step(2))  ! { dg-error \"Multiple 'step' modifiers specified\" }\n+    end\n+\n+    integer function s3 (x, y, z)\n+      integer, value :: x, y, z\n+      !$omp declare simd linear (x : val, ref, step(2))  ! { dg-error \"Multiple 'linear' modifiers specified\" }\n+    end\n+\n+  end interface\n+\n+end module"}, {"sha": "d23dd84b3ede578bdf77b272791a1d61eec9f77c", "filename": "gcc/testsuite/gfortran.dg/gomp/linear-8.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Flinear-8.f90?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+\n+module m\n+  implicit none (type, external)\n+\n+  interface\n+    integer function step (x, y, z)\n+      integer :: x, y, z\n+    end function step\n+  end interface\n+\n+contains\n+\n+integer function foo (x)\n+  integer, value :: x\n+  integer :: i\n+  !$omp parallel do linear (x : step (step (1, 2, 3)))\n+  do i = 0, 63\n+    x = x + 6\n+  end do\n+  foo = x\n+end\n+\n+integer function bar (x)\n+  integer, value :: x\n+  integer :: i\n+  !$omp parallel do linear (x : step (1, 2, 3))\t! { dg-error \"40: Invalid character in name\" }\n+  do i = 0, 63\n+    x = x + 6\n+  end do\n+  bar = x\n+end\n+\n+integer function bar2 (x)\n+  integer, value :: x\n+  integer :: i\n+  !$omp parallel do linear (x : step (1, 2, 3) * 1)\n+  do i = 0, 63\n+    x = x + 6\n+  end do\n+  bar2 = x\n+end\n+end module"}, {"sha": "e88fe89a5b184546661229dc6578bd590046541f", "filename": "libgomp/libgomp.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3297044f0055880dd23ffbf641aa3a5860197e1/libgomp%2Flibgomp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3297044f0055880dd23ffbf641aa3a5860197e1/libgomp%2Flibgomp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.texi?ref=c3297044f0055880dd23ffbf641aa3a5860197e1", "patch": "@@ -363,7 +363,7 @@ to address of matching mapped list item per 5.1, Sect. 2.21.7.2 @tab N @tab\n @item Clauses on @code{end} directive can be on directive @tab N @tab\n @item Deprecation of no-argument @code{destroy} clause on @code{depobj}\n       @tab N @tab\n-@item @code{linear} clause syntax changes and @code{step} modifier @tab P @tab only C/C++\n+@item @code{linear} clause syntax changes and @code{step} modifier @tab Y @tab\n @item Deprecation of minus operator for reductions @tab N @tab\n @item Deprecation of separating @code{map} modifiers without comma @tab N @tab\n @item @code{declare mapper} with iterator and @code{present} modifiers"}]}