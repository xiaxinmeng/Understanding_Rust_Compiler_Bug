{"sha": "053cc3801ba748081d63afd85a582ebd63b89f0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzY2MzODAxYmE3NDgwODFkNjNhZmQ4NWE1ODJlYmQ2M2I4OWYwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-10-16T15:20:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-10-16T15:20:09Z"}, "message": "vstring.h (__versa_string<>:: __versa_string(__versa_string&&), [...]): Add.\n\n2007-10-16  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/vstring.h (__versa_string<>::\n\t__versa_string(__versa_string&&),\n\t__versa_string<>::operator=(__versa_string&&,\n\tswap(__versa_string<>&&, __versa_string<>&),\n\tswap(__versa_string<>(&, __versa_string<>&&)): Add.\n\t(__versa_string<>::swap(__versa_string&&)): Adjust for C++0x.\n\t* include/ext/sso_string_base.h\n\t(__sso_string_base(__sso_string_base&&)): Add.\n\t(__sso_string_base()): Use _Alloc_hider(_CharT*).\n\t* include/ext/rc_string_base.h (__rc_string_base(__rc_string_base&&)):\n\tAdd.\n\t(__rc_string_base()): Use _Alloc_hider(_CharT*).\n\t* include/ext/vstring_util.h (_Alloc_hider::_Alloc_hider(_CharT*)):\n\tAdd.\n\t* testsuite/ext/vstring/moveable.cc: Add.\n\n\t* include/bits/stl_tree.h (_Rb_tree(_Rb_tree&&)): Add.\n\t* include/bits/stl_map.h (map<>::map(map&&)): Forward to the latter.\n\t* include/bits/stl_set.h (set<>::set(set&&)): Likewise.\n\t* include/bits/stl_multimap.h (multimap<>::multimap(multimap&&)):\n\tLikewise.\n\t* include/bits/stl_multiset.h (multiset<>::multiset(multiset&&)):\n\tLikewise.\n\t* include/bits/stl_deque.h (_Deque_base<>::_Deque_base(_Deque_base&&)):\n\tAdd.\n\t(deque<>::deque(deque&&)): Forward to the latter.\n\t* include/bits/stl_list.h (_List_base<>::_List_base(_List_base&&)):\n\tAdd.\n\t(list<>::list(list&&)): Forward to the latter.\n\t* include/bits/stl_vector.h\n\t(_Vector_base<>::_Vector_base(_Vector_base&&)): Add.\n\t(vector<>::vector(vector&&)): Forward to the latter.\n\t* include/bits/stl_bvector.h\n\t(_Bvector_base<>::_Bvector_base(_Bvector_base&&)): Add.\n\t(vector<bool>::vector(vector&&)): Forward to the latter.\n\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error lines.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/deque/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r129381", "tree": {"sha": "19d71ff75f7fa20a2104542c30cc458cc069e0c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19d71ff75f7fa20a2104542c30cc458cc069e0c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053cc3801ba748081d63afd85a582ebd63b89f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053cc3801ba748081d63afd85a582ebd63b89f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053cc3801ba748081d63afd85a582ebd63b89f0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053cc3801ba748081d63afd85a582ebd63b89f0a/comments", "author": null, "committer": null, "parents": [{"sha": "215b063c9d8700616d5c189cd12eef4e748de5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215b063c9d8700616d5c189cd12eef4e748de5fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215b063c9d8700616d5c189cd12eef4e748de5fe"}], "stats": {"total": 355, "additions": 321, "deletions": 34}, "files": [{"sha": "d3dced6918ce269e756d64cbe8352df17ceeb9dd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -1,3 +1,66 @@\n+2007-10-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/vstring.h (__versa_string<>::\n+\t__versa_string(__versa_string&&),\n+\t__versa_string<>::operator=(__versa_string&&,\n+\tswap(__versa_string<>&&, __versa_string<>&),\n+\tswap(__versa_string<>(&, __versa_string<>&&)): Add.\n+\t(__versa_string<>::swap(__versa_string&&)): Adjust for C++0x.\n+\t* include/ext/sso_string_base.h\n+\t(__sso_string_base(__sso_string_base&&)): Add.\n+\t(__sso_string_base()): Use _Alloc_hider(_CharT*).\n+\t* include/ext/rc_string_base.h (__rc_string_base(__rc_string_base&&)):\n+\tAdd.\n+\t(__rc_string_base()): Use _Alloc_hider(_CharT*).\n+\t* include/ext/vstring_util.h (_Alloc_hider::_Alloc_hider(_CharT*)):\n+\tAdd.\n+\t* testsuite/ext/vstring/moveable.cc: Add.\n+\n+\t* include/bits/stl_tree.h (_Rb_tree(_Rb_tree&&)): Add.\n+\t* include/bits/stl_map.h (map<>::map(map&&)): Forward to the latter.\n+\t* include/bits/stl_set.h (set<>::set(set&&)): Likewise.\n+\t* include/bits/stl_multimap.h (multimap<>::multimap(multimap&&)):\n+\tLikewise.\n+\t* include/bits/stl_multiset.h (multiset<>::multiset(multiset&&)):\n+\tLikewise.\n+\t* include/bits/stl_deque.h (_Deque_base<>::_Deque_base(_Deque_base&&)):\n+\tAdd.\n+\t(deque<>::deque(deque&&)): Forward to the latter.\n+\t* include/bits/stl_list.h (_List_base<>::_List_base(_List_base&&)):\n+\tAdd.\n+\t(list<>::list(list&&)): Forward to the latter.\n+\t* include/bits/stl_vector.h\n+\t(_Vector_base<>::_Vector_base(_Vector_base&&)): Add.\n+\t(vector<>::vector(vector&&)): Forward to the latter.\n+\t* include/bits/stl_bvector.h\n+\t(_Bvector_base<>::_Bvector_base(_Bvector_base&&)): Add.\n+\t(vector<bool>::vector(vector&&)): Forward to the latter.\n+\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error lines.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/deque/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2007-10-15  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/debug/set.h (set<>::cbegin, cend, crbegin, crend): Add."}, {"sha": "cb99b2202b556ff903470e646bf00549798a6d32", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -416,6 +416,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       _Bvector_base(const allocator_type& __a)\n       : _M_impl(__a) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      _Bvector_base(_Bvector_base&& __x)\n+      : _M_impl(__x._M_get_Bit_allocator())\n+      {\n+\tthis->_M_impl._M_start = __x._M_impl._M_start;\n+\tthis->_M_impl._M_finish = __x._M_impl._M_finish;\n+\tthis->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;\n+\t__x._M_impl._M_start = _Bit_iterator();\n+\t__x._M_impl._M_finish = _Bit_iterator();\n+\t__x._M_impl._M_end_of_storage = 0;\n+      }\n+#endif\n+\n       ~_Bvector_base()\n       { this->_M_deallocate(); }\n \n@@ -515,8 +528,7 @@ template<typename _Alloc>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n     vector(vector&& __x)\n-    : _Base(__x._M_get_Bit_allocator())\n-    { this->swap(__x); }\n+    : _Base(std::forward<_Base>(__x)) { }\n #endif\n \n     template<typename _InputIterator>"}, {"sha": "356cff23ee354f15ff9695c3423cb2cfae6688b6", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -393,6 +393,21 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _M_impl(__a)\n       { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      _Deque_base(_Deque_base&& __x)\n+      : _M_impl(__x._M_get_Tp_allocator())\n+      {\n+\t_M_initialize_map(0);\n+\tif (__x._M_impl._M_map)\n+\t  {\n+\t    std::swap(this->_M_impl._M_start, __x._M_impl._M_start);\n+\t    std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);\n+\t    std::swap(this->_M_impl._M_map, __x._M_impl._M_map);\n+\t    std::swap(this->_M_impl._M_map_size, __x._M_impl._M_map_size);\n+\t  }\n+      }\n+#endif\n+\n       ~_Deque_base();\n \n     protected:\n@@ -736,8 +751,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %deque.\n        */\n       deque(deque&&  __x)\n-      : _Base(__x._M_get_Tp_allocator(), 0)\n-      { this->swap(__x); }\n+      : _Base(std::forward<_Base>(__x)) { }\n #endif\n \n       /**"}, {"sha": "bb8f930e7101b623f1bc7969e7bf3d4aa77c4b15", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -351,6 +351,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _M_impl(__a)\n       { _M_init(); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      _List_base(_List_base&& __x)\n+      : _M_impl(__x._M_get_Node_allocator())\n+      {\n+\t_M_init();\n+\t_List_node_base::swap(this->_M_impl._M_node, __x._M_impl._M_node);\t\n+      }\n+#endif\n+\n       // This is what actually destroys the list.\n       ~_List_base()\n       { _M_clear(); }\n@@ -521,8 +530,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %list.\n        */\n       list(list&& __x)\n-      : _Base(__x._M_get_Node_allocator())\n-      { this->swap(__x); }\n+      : _Base(std::forward<_Base>(__x)) { }\n #endif\n \n       /**"}, {"sha": "bc9d13beb198862a69ffa60b11b85c091f167650", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -186,9 +186,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %map.\n        */\n       map(map&& __x)\n-      : _M_t(__x._M_t.key_comp(),\n-\t     __x._M_t._M_get_Node_allocator())\n-      { this->swap(__x); }\n+      : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n #endif\n \n       /**"}, {"sha": "a2806925c5f45eb50fccbe0679c261fc65a239ce", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -184,9 +184,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %multimap.\n        */\n       multimap(multimap&& __x)\n-      : _M_t(__x._M_t.key_comp(),\n-\t     __x._M_t._M_get_Node_allocator())\n-      { this->swap(__x); }\n+      : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n #endif\n \n       /**"}, {"sha": "60d4d9cded63edffaf24c8c7542b96d9d8394fdd", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -197,9 +197,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %multiset.\n        */\n       multiset(multiset&& __x)\n-      : _M_t(__x._M_t.key_comp(),\n-\t     __x._M_t._M_get_Node_allocator())\n-      { this->swap(__x); }\n+      : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n #endif\n \n       /**"}, {"sha": "d26015677d3390de7a870ce3880475a59c1b469a", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -204,9 +204,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %set.\n        */\n       set(set&& __x)\n-      : _M_t(__x._M_t.key_comp(),\n-\t     __x._M_t._M_get_Node_allocator())\n-      { this->swap(__x); }\n+      : _M_t(std::forward<_Rep_type>(__x._M_t)) { }\n #endif\n \n       /**"}, {"sha": "2503c030f2c1fc4713ce4ff74adfa84d58e42e28", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -607,6 +607,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  }\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      _Rb_tree(_Rb_tree&& __x);\n+#endif\n+\n       ~_Rb_tree()\n       { _M_erase(_M_begin()); }\n \n@@ -819,6 +823,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _Key, typename _Val, typename _KeyOfValue,\n+           typename _Compare, typename _Alloc>\n+    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n+    _Rb_tree(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&& __x)\n+    : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())\n+    {\n+      if (__x._M_root() != 0)\n+\t{\n+\t  _M_root() = __x._M_root();\n+\t  _M_leftmost() = __x._M_leftmost();\n+\t  _M_rightmost() = __x._M_rightmost();\n+\t  _M_root()->_M_parent = _M_end();\n+\n+\t  __x._M_root() = 0;\n+\t  __x._M_leftmost() = __x._M_end();\n+\t  __x._M_rightmost() = __x._M_end();\n+\n+\t  this->_M_impl._M_node_count = __x._M_impl._M_node_count;\n+\t  __x._M_impl._M_node_count = 0;\n+\t}\n+    }\n+#endif\n+\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&"}, {"sha": "f48fbdbbc6bc0df88317ea567a7c8bdb5f8e26f4", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -123,6 +123,19 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \tthis->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      _Vector_base(_Vector_base&& __x)\n+      : _M_impl(__x._M_get_Tp_allocator())\n+      {\n+\tthis->_M_impl._M_start = __x._M_impl._M_start;\n+\tthis->_M_impl._M_finish = __x._M_impl._M_finish;\n+\tthis->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;\n+\t__x._M_impl._M_start = 0;\n+\t__x._M_impl._M_finish = 0;\n+\t__x._M_impl._M_end_of_storage = 0;\n+      }\n+#endif\n+\n       ~_Vector_base()\n       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage\n \t\t      - this->_M_impl._M_start); }\n@@ -252,8 +265,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  The contents of @a x are a valid, but unspecified %vector.\n        */\n       vector(vector&& __x)\n-      : _Base(__x._M_get_Tp_allocator())\n-      { this->swap(__x); }\n+      : _Base(std::forward<_Base>(__x)) { }\n #endif\n \n       /**"}, {"sha": "81dc7eac03017f466c9173af49285141de7d0a65", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -301,12 +301,18 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { _M_rep()->_M_set_length(__n); }\n \n       __rc_string_base()\n-      : _M_dataplus(_Alloc(), _S_empty_rep._M_refcopy()) { }\n+      : _M_dataplus(_S_empty_rep._M_refcopy()) { }\n \n       __rc_string_base(const _Alloc& __a);\n \n       __rc_string_base(const __rc_string_base& __rcs);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      __rc_string_base(__rc_string_base&& __rcs)\n+      : _M_dataplus(__rcs._M_get_allocator(), __rcs._M_data())\n+      { __rcs._M_data(_S_empty_rep._M_refcopy()); }      \n+#endif\n+\n       __rc_string_base(size_type __n, _CharT __c, const _Alloc& __a);\n \n       template<typename _InputIterator>"}, {"sha": "9c8c1bc79d6e8e84b7b83bd7063682af373c52f2", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -175,13 +175,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       }\n \n       __sso_string_base()\n-      : _M_dataplus(_Alloc(), _M_local_data)\n+      : _M_dataplus(_M_local_data)\n       { _M_set_length(0); }\n \n       __sso_string_base(const _Alloc& __a);\n \n       __sso_string_base(const __sso_string_base& __rcs);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      __sso_string_base(__sso_string_base&& __rcs);\n+#endif\n+\n       __sso_string_base(size_type __n, _CharT __c, const _Alloc& __a);\n \n       template<typename _InputIterator>\n@@ -336,6 +340,30 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     : _M_dataplus(__rcs._M_get_allocator(), _M_local_data)\n     { _M_construct(__rcs._M_data(), __rcs._M_data() + __rcs._M_length()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    __sso_string_base<_CharT, _Traits, _Alloc>::\n+    __sso_string_base(__sso_string_base&& __rcs)\n+    : _M_dataplus(__rcs._M_get_allocator(), _M_local_data)\n+    {\n+      if (__rcs._M_is_local())\n+\t{\n+\t  if (__rcs._M_length())\n+\t    traits_type::copy(_M_local_data, __rcs._M_local_data,\n+\t\t\t      _S_local_capacity + 1);\n+\t}\n+      else\n+\t{\n+\t  _M_data(__rcs._M_data());\n+\t  _M_capacity(__rcs._M_allocated_capacity);\n+\t}\n+\n+      _M_length(__rcs._M_length());\n+      __rcs._M_length(0);\n+      __rcs._M_data(__rcs._M_local_data);\n+    }\n+#endif\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     __sso_string_base<_CharT, _Traits, _Alloc>::\n     __sso_string_base(size_type __n, _CharT __c, const _Alloc& __a)"}, {"sha": "ae441bfd00d7e70eee700231f1732e447de53d32", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -146,6 +146,18 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       __versa_string(const __versa_string& __str)\n       : __vstring_base(__str) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  String move constructor.\n+       *  @param  str  Source string.\n+       *\n+       *  The newly-constructed %string contains the exact contents of @a str.\n+       *  The contents of @a str are a valid, but unspecified string.\n+       */\n+      __versa_string(__versa_string&& __str)\n+      : __vstring_base(std::forward<__vstring_base>(__str)) { }\n+#endif\n+\n       /**\n        *  @brief  Construct string as copy of a substring.\n        *  @param  str  Source string.\n@@ -230,6 +242,23 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       operator=(const __versa_string& __str) \n       { return this->assign(__str); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  @brief  String move assignment operator.\n+       *  @param  str  Source string.\n+       *\n+       *  The contents of @a str are moved into this string (without copying).\n+       *  @a str is a valid, but unspecified string.\n+       */\n+      __versa_string&\n+      operator=(__versa_string&& __str)\n+      {\n+\tif (this != &__str)\n+\t  this->swap(__str);\n+\treturn *this;\n+      }\n+#endif\n+\n       /**\n        *  @brief  Copy contents of @a s into this string.\n        *  @param  s  Source null-terminated string.\n@@ -1279,7 +1308,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n        *  time.\n       */\n       void\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      swap(__versa_string&& __s)\n+#else\n       swap(__versa_string& __s)\n+#endif\n       { this->_M_swap(__s); }\n \n       // String operations:\n@@ -2154,6 +2187,22 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n     { __lhs.swap(__rhs); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline void\n+    swap(__versa_string<_CharT, _Traits, _Alloc, _Base>&& __lhs,\n+\t __versa_string<_CharT, _Traits, _Alloc, _Base>& __rhs)\n+    { __lhs.swap(__rhs); }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   template <typename, typename, typename> class _Base>\n+    inline void\n+    swap(__versa_string<_CharT, _Traits, _Alloc, _Base>& __lhs,\n+\t __versa_string<_CharT, _Traits, _Alloc, _Base>&& __rhs)\n+    { __lhs.swap(__rhs); }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n _GLIBCXX_BEGIN_NAMESPACE(std)"}, {"sha": "5725e0a31851af840143a762db15405ac007b226", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -46,6 +46,7 @@\n #include <bits/ostream_insert.h>\n #include <bits/stl_iterator.h>\n #include <ext/numeric_traits.h>\n+#include <bits/stl_move.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -91,6 +92,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n         struct _Alloc_hider\n \t: public _Alloc1\n \t{\n+\t  _Alloc_hider(_CharT* __ptr)\n+\t  : _Alloc1(), _M_p(__ptr) { }\n+\n \t  _Alloc_hider(const _Alloc1& __a, _CharT* __ptr)\n \t  : _Alloc1(__a), _M_p(__ptr) { }\n "}, {"sha": "12c510a7e32c2e12dd849439ee31edb536f26a8f", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1386 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1400 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "49c1cfde929c9bc9327db7e255a6e7bb27106d67", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1321 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1335 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "58042e12d350f9b4b6e6faaf671d0c710b8e5383", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1321 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1335 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "2d003333e337dc91c1ed486c9b0fd35f4fc56e18", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1466 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1480 }\n // { dg-excess-errors \"\" }\n \n #include <deque>"}, {"sha": "187b7510b4feb2b24c0d61a71d6463398c1cf6bc", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1226 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1234 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "843cb46377232a2d48344d2b11cccfe593e699ef", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1195 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1203 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "56a80566c906f550152ba0051729c81884d58625", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1195 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1203 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "8c2014dc6df068aa7d6afcbc3763a8d9e4f6c67e", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1195 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1203 }\n // { dg-excess-errors \"\" }\n \n #include <list>"}, {"sha": "c5b20cbbb1dc87f15faeb72fe4aeadfbeb84cddc", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 933 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 945 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "28e0c4dd8533a80c1527fe1675c090ecd692ca90", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 873 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 885 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "717bbc6c8c463e7683c4bb069b72b918ebb6c5ce", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 873 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 885 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "62b331a49b4dd3e0330ac5d2c97f65d44e970584", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 974 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 986 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "7a33145fa22a8dd399d9451bdfa0dda6b48b92f1", "filename": "libstdc++-v3/testsuite/ext/vstring/moveable.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053cc3801ba748081d63afd85a582ebd63b89f0a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmoveable.cc?ref=053cc3801ba748081d63afd85a582ebd63b89f0a", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on deque (via swap). If the implementation changed\n+// this test may begin to fail.\n+\n+#include <ext/vstring.h>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::__sso_string a,b;\n+  a.push_back('1');\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+\n+  __gnu_cxx::__sso_string c(std::move(b));\n+  VERIFY( c.size() == 1 && c[0] == '1' );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::__rc_string a,b;\n+  a.push_back('1');\n+  b = std::move(a);\n+  VERIFY( b.size() == 1 && b[0] == '1' && a.size() == 0 );\n+\n+  __gnu_cxx::__rc_string c(std::move(b));\n+  VERIFY( c.size() == 1 && c[0] == '1' );\n+  VERIFY( b.size() == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}