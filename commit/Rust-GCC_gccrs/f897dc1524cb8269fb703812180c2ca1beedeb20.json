{"sha": "f897dc1524cb8269fb703812180c2ca1beedeb20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg5N2RjMTUyNGNiODI2OWZiNzAzODEyMTgwYzJjYTFiZWVkZWIyMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:49:36Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:49:36Z"}, "message": "vrshr_n.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vrshr_n.c: New file.\n\nFrom-SVN: r224656", "tree": {"sha": "91ef428a08df80ad1470604985c62976c1ba5202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ef428a08df80ad1470604985c62976c1ba5202"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f897dc1524cb8269fb703812180c2ca1beedeb20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f897dc1524cb8269fb703812180c2ca1beedeb20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f897dc1524cb8269fb703812180c2ca1beedeb20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f897dc1524cb8269fb703812180c2ca1beedeb20/comments", "author": null, "committer": null, "parents": [{"sha": "442e81270a61ba5eb1ecea77c28de1197a80fa8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442e81270a61ba5eb1ecea77c28de1197a80fa8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442e81270a61ba5eb1ecea77c28de1197a80fa8b"}], "stats": {"total": 508, "additions": 508, "deletions": 0}, "files": [{"sha": "e5a002427ff2904ade2355791b3bd2485f7edbc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f897dc1524cb8269fb703812180c2ca1beedeb20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f897dc1524cb8269fb703812180c2ca1beedeb20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f897dc1524cb8269fb703812180c2ca1beedeb20", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrshr_n.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vshr_n.c: New file."}, {"sha": "6f9ef5a9d84db3eb52e819e1a0f871f7edde49bc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrshr_n.c", "status": "added", "additions": 504, "deletions": 0, "changes": 504, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f897dc1524cb8269fb703812180c2ca1beedeb20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshr_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f897dc1524cb8269fb703812180c2ca1beedeb20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshr_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshr_n.c?ref=f897dc1524cb8269fb703812180c2ca1beedeb20", "patch": "@@ -0,0 +1,504 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf8, 0xf9, 0xf9, 0xfa,\n+\t\t\t\t       0xfa, 0xfb, 0xfb, 0xfc };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x3c, 0x3c, 0x3d, 0x3d,\n+\t\t\t\t\t0x3d, 0x3d, 0x3e, 0x3e };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x1ffe, 0x1ffe, 0x1ffe, 0x1ffe };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x8000000, 0x8000000 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x80000000 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf8, 0xf9, 0xf9, 0xfa,\n+\t\t\t\t\t0xfa, 0xfb, 0xfb, 0xfc,\n+\t\t\t\t\t0xfc, 0xfd, 0xfd, 0xfe,\n+\t\t\t\t\t0xfe, 0xff, 0xff, 0x0 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffffc, 0xfffffffc,\n+\t\t\t\t\t0xfffffffd, 0xfffffffd };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x3c, 0x3c, 0x3d, 0x3d,\n+\t\t\t\t\t 0x3d, 0x3d, 0x3e, 0x3e,\n+\t\t\t\t\t 0x3e, 0x3e, 0x3f, 0x3f,\n+\t\t\t\t\t 0x3f, 0x3f, 0x40, 0x40 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x1ffe, 0x1ffe, 0x1ffe, 0x1ffe,\n+\t\t\t\t\t 0x1fff, 0x1fff, 0x1fff, 0x1fff };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x8000000, 0x8000000,\n+\t\t\t\t\t 0x8000000, 0x8000000 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x80000000, 0x80000000 };\n+\n+/* Expected results with maximum input and max shift amount.  */\n+VECT_VAR_DECL(expected_max_sh_max,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_max,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_max,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_max,int,64,1) [] = { 0x0 };\n+VECT_VAR_DECL(expected_max_sh_max,uint,8,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t   0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_max,uint,16,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_max,uint,32,2) [] = { 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_max,uint,64,1) [] = { 0x1 };\n+VECT_VAR_DECL(expected_max_sh_max,int,8,16) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_max,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t   0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_max,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_max,int,64,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_max_sh_max,uint,8,16) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t    0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t    0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t    0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_max,uint,16,8) [] = { 0x1, 0x1, 0x1, 0x1,\n+\t\t\t\t\t\t    0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_max,uint,32,4) [] = { 0x1, 0x1, 0x1, 0x1 };\n+VECT_VAR_DECL(expected_max_sh_max,uint,64,2) [] = { 0x1, 0x1 };\n+\n+/* Expected results with maximum input and shift by 1.  */\n+VECT_VAR_DECL(expected_max_sh_1,int,8,8) [] = { 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t0x40, 0x40, 0x40, 0x40 };\n+VECT_VAR_DECL(expected_max_sh_1,int,16,4) [] = { 0x4000, 0x4000,\n+\t\t\t\t\t\t 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_max_sh_1,int,32,2) [] = { 0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_max_sh_1,int,64,1) [] = { 0x4000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_1,uint,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t 0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_sh_1,uint,16,4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_sh_1,uint,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_max_sh_1,uint,64,1) [] = { 0x8000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_1,int,8,16) [] = { 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t 0x40, 0x40, 0x40, 0x40,\n+\t\t\t\t\t\t 0x40, 0x40, 0x40, 0x40 };\n+VECT_VAR_DECL(expected_max_sh_1,int,16,8) [] = { 0x4000, 0x4000,\n+\t\t\t\t\t\t 0x4000, 0x4000,\n+\t\t\t\t\t\t 0x4000, 0x4000,\n+\t\t\t\t\t\t 0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_max_sh_1,int,32,4) [] = { 0x40000000, 0x40000000,\n+\t\t\t\t\t\t 0x40000000, 0x40000000 };\n+VECT_VAR_DECL(expected_max_sh_1,int,64,2) [] = { 0x4000000000000000,\n+\t\t\t\t\t\t 0x4000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_1,uint,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t  0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t  0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t  0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_sh_1,uint,16,8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_sh_1,uint,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t  0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_max_sh_1,uint,64,2) [] = { 0x8000000000000000,\n+\t\t\t\t\t\t  0x8000000000000000 };\n+\n+/* Expected results with maximum input and shift by 3.  */\n+VECT_VAR_DECL(expected_max_sh_3,int,8,8) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_max_sh_3,int,16,4) [] = { 0x1000, 0x1000,\n+\t\t\t\t\t\t 0x1000, 0x1000 };\n+VECT_VAR_DECL(expected_max_sh_3,int,32,2) [] = { 0x10000000, 0x10000000 };\n+VECT_VAR_DECL(expected_max_sh_3,int,64,1) [] = { 0x1000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_3,uint,8,8) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t 0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_max_sh_3,uint,16,4) [] = { 0x2000, 0x2000,\n+\t\t\t\t\t\t  0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_max_sh_3,uint,32,2) [] = { 0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_max_sh_3,uint,64,1) [] = { 0x2000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_3,int,8,16) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t 0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_max_sh_3,int,16,8) [] = { 0x1000, 0x1000,\n+\t\t\t\t\t\t 0x1000, 0x1000,\n+\t\t\t\t\t\t 0x1000, 0x1000,\n+\t\t\t\t\t\t 0x1000, 0x1000 };\n+VECT_VAR_DECL(expected_max_sh_3,int,32,4) [] = { 0x10000000, 0x10000000,\n+\t\t\t\t\t\t 0x10000000, 0x10000000 };\n+VECT_VAR_DECL(expected_max_sh_3,int,64,2) [] = { 0x1000000000000000,\n+\t\t\t\t\t\t 0x1000000000000000 };\n+VECT_VAR_DECL(expected_max_sh_3,uint,8,16) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t  0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t  0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t  0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_max_sh_3,uint,16,8) [] = { 0x2000, 0x2000,\n+\t\t\t\t\t\t  0x2000, 0x2000,\n+\t\t\t\t\t\t  0x2000, 0x2000,\n+\t\t\t\t\t\t  0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_max_sh_3,uint,32,4) [] = { 0x20000000, 0x20000000,\n+\t\t\t\t\t\t  0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_max_sh_3,uint,64,2) [] = { 0x2000000000000000,\n+\t\t\t\t\t\t  0x2000000000000000 };\n+\n+/* Expected results with max negative input (for signed types, shift\n+   by 1.  */\n+VECT_VAR_DECL(expected_max_neg_sh_1,int,8,8) [] = { 0xc0, 0xc0, 0xc0, 0xc0,\n+\t\t\t\t\t\t    0xc0, 0xc0, 0xc0, 0xc0 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,int,16,4) [] = { 0xc000, 0xc000,\n+\t\t\t\t\t\t     0xc000, 0xc000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,int,32,2) [] = { 0xc0000000, 0xc0000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,int,64,1) [] = { 0xc000000000000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,uint,8,8) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t     0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,uint,16,4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t      0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,uint,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,uint,64,1) [] = { 0x8000000000000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,int,8,16) [] = { 0xc0, 0xc0, 0xc0, 0xc0,\n+\t\t\t\t\t\t     0xc0, 0xc0, 0xc0, 0xc0,\n+\t\t\t\t\t\t     0xc0, 0xc0, 0xc0, 0xc0,\n+\t\t\t\t\t\t     0xc0, 0xc0, 0xc0, 0xc0 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,int,16,8) [] = { 0xc000, 0xc000,\n+\t\t\t\t\t\t     0xc000, 0xc000,\n+\t\t\t\t\t\t     0xc000, 0xc000,\n+\t\t\t\t\t\t     0xc000, 0xc000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,int,32,4) [] = { 0xc0000000, 0xc0000000,\n+\t\t\t\t\t\t     0xc0000000, 0xc0000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,int,64,2) [] = { 0xc000000000000000,\n+\t\t\t\t\t\t     0xc000000000000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,uint,8,16) [] = { 0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t      0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t      0x80, 0x80, 0x80, 0x80,\n+\t\t\t\t\t\t      0x80, 0x80, 0x80, 0x80 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,uint,16,8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t      0x8000, 0x8000,\n+\t\t\t\t\t\t      0x8000, 0x8000,\n+\t\t\t\t\t\t      0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,uint,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t\t      0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_1,uint,64,2) [] = { 0x8000000000000000,\n+\t\t\t\t\t\t      0x8000000000000000 };\n+\n+/* Expected results with max negative input (for signed types, shift\n+   by 3.  */\n+VECT_VAR_DECL(expected_max_neg_sh_3,int,8,8) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t\t\t    0xf0, 0xf0, 0xf0, 0xf0 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,int,16,4) [] = { 0xf000, 0xf000,\n+\t\t\t\t\t\t     0xf000, 0xf000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,int,32,2) [] = { 0xf0000000, 0xf0000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,int,64,1) [] = { 0xf000000000000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,uint,8,8) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t     0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,uint,16,4) [] = { 0x2000, 0x2000,\n+\t\t\t\t\t\t      0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,uint,32,2) [] = { 0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,uint,64,1) [] = { 0x2000000000000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,int,8,16) [] = { 0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t\t\t     0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t\t\t     0xf0, 0xf0, 0xf0, 0xf0,\n+\t\t\t\t\t\t     0xf0, 0xf0, 0xf0, 0xf0 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,int,16,8) [] = { 0xf000, 0xf000,\n+\t\t\t\t\t\t     0xf000, 0xf000,\n+\t\t\t\t\t\t     0xf000, 0xf000,\n+\t\t\t\t\t\t     0xf000, 0xf000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,int,32,4) [] = { 0xf0000000, 0xf0000000,\n+\t\t\t\t\t\t     0xf0000000, 0xf0000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,int,64,2) [] = { 0xf000000000000000,\n+\t\t\t\t\t\t     0xf000000000000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,uint,8,16) [] = { 0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t      0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t      0x20, 0x20, 0x20, 0x20,\n+\t\t\t\t\t\t      0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,uint,16,8) [] = { 0x2000, 0x2000,\n+\t\t\t\t\t\t      0x2000, 0x2000,\n+\t\t\t\t\t\t      0x2000, 0x2000,\n+\t\t\t\t\t\t      0x2000, 0x2000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,uint,32,4) [] = { 0x20000000, 0x20000000,\n+\t\t\t\t\t\t      0x20000000, 0x20000000 };\n+VECT_VAR_DECL(expected_max_neg_sh_3,uint,64,2) [] = { 0x2000000000000000,\n+\t\t\t\t\t\t      0x2000000000000000 };\n+\n+#define TEST_MSG \"VRSHR_N\"\n+void exec_vrshr_n (void)\n+{\n+  /* Basic test: y=vrshr_n(x,v), then store the result.  */\n+#define TEST_VRSHR_N(Q, T1, T2, W, N, V)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vrshr##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\t V);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VRSHR_N(, int, s, 8, 8, 1);\n+  TEST_VRSHR_N(, int, s, 16, 4, 12);\n+  TEST_VRSHR_N(, int, s, 32, 2, 2);\n+  TEST_VRSHR_N(, int, s, 64, 1, 32);\n+  TEST_VRSHR_N(, uint, u, 8, 8, 2);\n+  TEST_VRSHR_N(, uint, u, 16, 4, 3);\n+  TEST_VRSHR_N(, uint, u, 32, 2, 5);\n+  TEST_VRSHR_N(, uint, u, 64, 1, 33);\n+\n+  TEST_VRSHR_N(q, int, s, 8, 16, 1);\n+  TEST_VRSHR_N(q, int, s, 16, 8, 12);\n+  TEST_VRSHR_N(q, int, s, 32, 4, 2);\n+  TEST_VRSHR_N(q, int, s, 64, 2, 32);\n+  TEST_VRSHR_N(q, uint, u, 8, 16, 2);\n+  TEST_VRSHR_N(q, uint, u, 16, 8, 3);\n+  TEST_VRSHR_N(q, uint, u, 32, 4, 5);\n+  TEST_VRSHR_N(q, uint, u, 64, 2, 33);\n+\n+#define CMT \"\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, CMT);\n+\n+\n+  /* Use maximum positive input value.  */\n+  VDUP(vector, , int, s, 8, 8, 0x7F);\n+  VDUP(vector, , int, s, 16, 4, 0x7FFF);\n+  VDUP(vector, , int, s, 32, 2, 0x7FFFFFFF);\n+  VDUP(vector, , int, s, 64, 1, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector, , uint, u, 64, 1, 0xFFFFFFFFFFFFFFFFULL);\n+  VDUP(vector, q, int, s, 8, 16, 0x7F);\n+  VDUP(vector, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, q, uint, u, 8, 16, 0xFF);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+  /* Use max shift amount, to exercise saturation.  */\n+  TEST_VRSHR_N(, int, s, 8, 8, 8);\n+  TEST_VRSHR_N(, int, s, 16, 4, 16);\n+  TEST_VRSHR_N(, int, s, 32, 2, 32);\n+  TEST_VRSHR_N(, int, s, 64, 1, 64);\n+  TEST_VRSHR_N(, uint, u, 8, 8, 8);\n+  TEST_VRSHR_N(, uint, u, 16, 4, 16);\n+  TEST_VRSHR_N(, uint, u, 32, 2, 32);\n+  TEST_VRSHR_N(, uint, u, 64, 1, 64);\n+  TEST_VRSHR_N(q, int, s, 8, 16, 8);\n+  TEST_VRSHR_N(q, int, s, 16, 8, 16);\n+  TEST_VRSHR_N(q, int, s, 32, 4, 32);\n+  TEST_VRSHR_N(q, int, s, 64, 2, 64);\n+  TEST_VRSHR_N(q, uint, u, 8, 16, 8);\n+  TEST_VRSHR_N(q, uint, u, 16, 8, 16);\n+  TEST_VRSHR_N(q, uint, u, 32, 4, 32);\n+  TEST_VRSHR_N(q, uint, u, 64, 2, 64);\n+\n+#undef CMT\n+#define CMT \" (overflow test: max shift amount, max positive input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh_max, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh_max, CMT);\n+\n+\n+  /* Use 1 as shift amount, to exercise saturation.  */\n+  TEST_VRSHR_N(, int, s, 8, 8, 1);\n+  TEST_VRSHR_N(, int, s, 16, 4, 1);\n+  TEST_VRSHR_N(, int, s, 32, 2, 1);\n+  TEST_VRSHR_N(, int, s, 64, 1, 1);\n+  TEST_VRSHR_N(, uint, u, 8, 8, 1);\n+  TEST_VRSHR_N(, uint, u, 16, 4, 1);\n+  TEST_VRSHR_N(, uint, u, 32, 2, 1);\n+  TEST_VRSHR_N(, uint, u, 64, 1, 1);\n+  TEST_VRSHR_N(q, int, s, 8, 16, 1);\n+  TEST_VRSHR_N(q, int, s, 16, 8, 1);\n+  TEST_VRSHR_N(q, int, s, 32, 4, 1);\n+  TEST_VRSHR_N(q, int, s, 64, 2, 1);\n+  TEST_VRSHR_N(q, uint, u, 8, 16, 1);\n+  TEST_VRSHR_N(q, uint, u, 16, 8, 1);\n+  TEST_VRSHR_N(q, uint, u, 32, 4, 1);\n+  TEST_VRSHR_N(q, uint, u, 64, 2, 1);\n+\n+#undef CMT\n+#define CMT \" (overflow test: shift by 1, with max input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh_1, CMT);\n+\n+\n+  /* Use 3 as shift amount, to exercise saturation.  */\n+  TEST_VRSHR_N(, int, s, 8, 8, 3);\n+  TEST_VRSHR_N(, int, s, 16, 4, 3);\n+  TEST_VRSHR_N(, int, s, 32, 2, 3);\n+  TEST_VRSHR_N(, int, s, 64, 1, 3);\n+  TEST_VRSHR_N(, uint, u, 8, 8, 3);\n+  TEST_VRSHR_N(, uint, u, 16, 4, 3);\n+  TEST_VRSHR_N(, uint, u, 32, 2, 3);\n+  TEST_VRSHR_N(, uint, u, 64, 1, 3);\n+  TEST_VRSHR_N(q, int, s, 8, 16, 3);\n+  TEST_VRSHR_N(q, int, s, 16, 8, 3);\n+  TEST_VRSHR_N(q, int, s, 32, 4, 3);\n+  TEST_VRSHR_N(q, int, s, 64, 2, 3);\n+  TEST_VRSHR_N(q, uint, u, 8, 16, 3);\n+  TEST_VRSHR_N(q, uint, u, 16, 8, 3);\n+  TEST_VRSHR_N(q, uint, u, 32, 4, 3);\n+  TEST_VRSHR_N(q, uint, u, 64, 2, 3);\n+\n+#undef CMT\n+#define CMT \" (overflow test: shift by 3, with max input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_sh_3, CMT);\n+\n+\n+  /* Use minimum negative input for signed types.  */\n+  VDUP(vector, , int, s, 8, 8, 0x80);\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, , int, s, 64, 1, 0x8000000000000000LL);\n+  VDUP(vector, , uint, u, 8, 8, 0xFF);\n+  VDUP(vector, , uint, u, 16, 4, 0xFFFF);\n+  VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector, , uint, u, 64, 1, 0xFFFFFFFFFFFFFFFFULL);\n+  VDUP(vector, q, int, s, 8, 16, 0x80);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+  VDUP(vector, q, int, s, 64, 2, 0x8000000000000000LL);\n+  VDUP(vector, q, uint, u, 8, 16, 0xFF);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+\n+  /* Use 1 as shift amount, to exercise saturation code.  */\n+  TEST_VRSHR_N(, int, s, 8, 8, 1);\n+  TEST_VRSHR_N(, int, s, 16, 4, 1);\n+  TEST_VRSHR_N(, int, s, 32, 2, 1);\n+  TEST_VRSHR_N(, int, s, 64, 1, 1);\n+  TEST_VRSHR_N(, uint, u, 8, 8, 1);\n+  TEST_VRSHR_N(, uint, u, 16, 4, 1);\n+  TEST_VRSHR_N(, uint, u, 32, 2, 1);\n+  TEST_VRSHR_N(, uint, u, 64, 1, 1);\n+  TEST_VRSHR_N(q, int, s, 8, 16, 1);\n+  TEST_VRSHR_N(q, int, s, 16, 8, 1);\n+  TEST_VRSHR_N(q, int, s, 32, 4, 1);\n+  TEST_VRSHR_N(q, int, s, 64, 2, 1);\n+  TEST_VRSHR_N(q, uint, u, 8, 16, 1);\n+  TEST_VRSHR_N(q, uint, u, 16, 8, 1);\n+  TEST_VRSHR_N(q, uint, u, 32, 4, 1);\n+  TEST_VRSHR_N(q, uint, u, 64, 2, 1);\n+\n+#undef CMT\n+#define CMT \" (overflow test: shift by 1, with negative input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_neg_sh_1, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_neg_sh_1, CMT);\n+\n+\n+  /* Use 3 as shift amount, to exercise saturation code.  */\n+  TEST_VRSHR_N(, int, s, 8, 8, 3);\n+  TEST_VRSHR_N(, int, s, 16, 4, 3);\n+  TEST_VRSHR_N(, int, s, 32, 2, 3);\n+  TEST_VRSHR_N(, int, s, 64, 1, 3);\n+  TEST_VRSHR_N(, uint, u, 8, 8, 3);\n+  TEST_VRSHR_N(, uint, u, 16, 4, 3);\n+  TEST_VRSHR_N(, uint, u, 32, 2, 3);\n+  TEST_VRSHR_N(, uint, u, 64, 1, 3);\n+  TEST_VRSHR_N(q, int, s, 8, 16, 3);\n+  TEST_VRSHR_N(q, int, s, 16, 8, 3);\n+  TEST_VRSHR_N(q, int, s, 32, 4, 3);\n+  TEST_VRSHR_N(q, int, s, 64, 2, 3);\n+  TEST_VRSHR_N(q, uint, u, 8, 16, 3);\n+  TEST_VRSHR_N(q, uint, u, 16, 8, 3);\n+  TEST_VRSHR_N(q, uint, u, 32, 4, 3);\n+  TEST_VRSHR_N(q, uint, u, 64, 2, 3);\n+\n+#undef CMT\n+#define CMT \" (overflow test: shift by 3, with negative input)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_max_neg_sh_3, CMT);\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected_max_neg_sh_3, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vrshr_n ();\n+  return 0;\n+}"}]}