{"sha": "34d9bc34c507503dd71996b2d0a8a7824ba6ef68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRkOWJjMzRjNTA3NTAzZGQ3MTk5NmIyZDBhOGE3ODI0YmE2ZWY2OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-23T00:18:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-23T00:18:50Z"}, "message": "Avoid infinite recursion checking whether field is exported.\n\nFrom-SVN: r168191", "tree": {"sha": "fe5e3820b0bce6e2745e7122666f377f6bd771f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe5e3820b0bce6e2745e7122666f377f6bd771f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34d9bc34c507503dd71996b2d0a8a7824ba6ef68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d9bc34c507503dd71996b2d0a8a7824ba6ef68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d9bc34c507503dd71996b2d0a8a7824ba6ef68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d9bc34c507503dd71996b2d0a8a7824ba6ef68/comments", "author": null, "committer": null, "parents": [{"sha": "62d1a8f9040b90d1503a5495cf43b80027add792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d1a8f9040b90d1503a5495cf43b80027add792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d1a8f9040b90d1503a5495cf43b80027add792"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "17399659e4cf04166891e3dad3a8abb06ce2b5af", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d9bc34c507503dd71996b2d0a8a7824ba6ef68/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d9bc34c507503dd71996b2d0a8a7824ba6ef68/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=34d9bc34c507503dd71996b2d0a8a7824ba6ef68", "patch": "@@ -7686,8 +7686,10 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n \t  else\n \t    {\n \t      std::string unpacked = Gogo::unpack_hidden_name(name);\n+\t      seen.clear();\n \t      is_unexported = Type::is_unexported_field_or_method(gogo, type,\n-\t\t\t\t\t\t\t\t  unpacked);\n+\t\t\t\t\t\t\t\t  unpacked,\n+\t\t\t\t\t\t\t\t  &seen);\n \t    }\n \t  if (is_unexported)\n \t    error_at(location, \"reference to unexported field or method %qs\",\n@@ -7905,13 +7907,28 @@ Type::find_field_or_method(const Type* type,\n \n bool\n Type::is_unexported_field_or_method(Gogo* gogo, const Type* type,\n-\t\t\t\t    const std::string& name)\n+\t\t\t\t    const std::string& name,\n+\t\t\t\t    std::vector<const Named_type*>* seen)\n {\n   type = type->deref();\n \n   const Named_type* nt = type->named_type();\n-  if (nt != NULL && nt->is_unexported_local_method(gogo, name))\n-    return true;\n+  if (nt != NULL)\n+    {\n+      if (nt->is_unexported_local_method(gogo, name))\n+\treturn true;\n+\n+      for (std::vector<const Named_type*>::const_iterator p = seen->begin();\n+\t   p != seen->end();\n+\t   ++p)\n+\t{\n+\t  if (*p == nt)\n+\t    {\n+\t      // We've already seen this type.\n+\t      return false;\n+\t    }\n+\t}\n+    }\n \n   const Interface_type* it = type->interface_type();\n   if (it != NULL && it->is_unexported_method(gogo, name))\n@@ -7928,6 +7945,9 @@ Type::is_unexported_field_or_method(Gogo* gogo, const Type* type,\n   if (fields == NULL)\n     return false;\n \n+  if (nt != NULL)\n+    seen->push_back(nt);\n+\n   for (Struct_field_list::const_iterator pf = fields->begin();\n        pf != fields->end();\n        ++pf)\n@@ -7938,11 +7958,18 @@ Type::is_unexported_field_or_method(Gogo* gogo, const Type* type,\n \t{\n \t  Named_type* subtype = pf->type()->deref()->named_type();\n \t  gcc_assert(subtype != NULL);\n-\t  if (Type::is_unexported_field_or_method(gogo, subtype, name))\n-\t    return true;\n+\t  if (Type::is_unexported_field_or_method(gogo, subtype, name, seen))\n+\t    {\n+\t      if (nt != NULL)\n+\t\tseen->pop_back();\n+\t      return true;\n+\t    }\n \t}\n     }\n \n+  if (nt != NULL)\n+    seen->pop_back();\n+\n   return false;\n }\n "}, {"sha": "fea864a2e3b4c5f318575ed7f32fccc73ca1fdf6", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34d9bc34c507503dd71996b2d0a8a7824ba6ef68/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34d9bc34c507503dd71996b2d0a8a7824ba6ef68/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=34d9bc34c507503dd71996b2d0a8a7824ba6ef68", "patch": "@@ -791,7 +791,8 @@ class Type\n \n   // Return true if NAME is an unexported field or method of TYPE.\n   static bool\n-  is_unexported_field_or_method(Gogo*, const Type*, const std::string&);\n+  is_unexported_field_or_method(Gogo*, const Type*, const std::string&,\n+\t\t\t\tstd::vector<const Named_type*>*);\n \n   // This type was passed to the builtin function make.  ARGS are the\n   // arguments passed to make after the type; this may be NULL if"}]}