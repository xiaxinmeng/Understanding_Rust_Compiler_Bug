{"sha": "e1112e60cb9d8f22517caf306fa1a7e1584855e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTExMTJlNjBjYjlkOGYyMjUxN2NhZjMwNmZhMWE3ZTE1ODQ4NTVlMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-05-11T08:20:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-05-11T08:20:34Z"}, "message": "builtins: New directory.\n\n\t* gcc.c-torture/execute/builtins: New directory.\n\t* gcc.c-torture/execute/string-opt-{3,4,16,17,18,19}.c: Move into\n\tgcc.c-torture/execute/builtins.\n\t* gcc.c-torture/execute/string-opt-asm-{1,2}.c: Likewise.\n\t* gcc.c-torture/execute/builtin-noret-{1,2}.c: Move to...\n\t* gcc.dg/torture: ...this new directory.  Turn into link-only tests.\n\t* gcc.dg/no-builtin-1.c: Move into gcc.c-torture/execute/builtins.\n\nFrom-SVN: r66680", "tree": {"sha": "d28d4f04c480b6f0af7fc0911421a000e4fe8640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d28d4f04c480b6f0af7fc0911421a000e4fe8640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1112e60cb9d8f22517caf306fa1a7e1584855e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1112e60cb9d8f22517caf306fa1a7e1584855e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1112e60cb9d8f22517caf306fa1a7e1584855e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1112e60cb9d8f22517caf306fa1a7e1584855e0/comments", "author": null, "committer": null, "parents": [{"sha": "51ff814940515c59592755b2381c40abcbdb8481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ff814940515c59592755b2381c40abcbdb8481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ff814940515c59592755b2381c40abcbdb8481"}], "stats": {"total": 742, "additions": 505, "deletions": 237}, "files": [{"sha": "7493ddf8218efc6ca1db972d2f2428a8da93c775", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -1,3 +1,13 @@\n+2003-05-11  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/execute/builtins: New directory.\n+\t* gcc.c-torture/execute/string-opt-{3,4,16,17,18,19}.c: Move into\n+\tgcc.c-torture/execute/builtins.\n+\t* gcc.c-torture/execute/string-opt-asm-{1,2}.c: Likewise.\n+\t* gcc.c-torture/execute/builtin-noret-{1,2}.c: Move to...\n+\t* gcc.dg/torture: ...this new directory.  Turn into link-only tests.\n+\t* gcc.dg/no-builtin-1.c: Move into gcc.c-torture/execute/builtins.\n+\n 2003-05-10  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/9252"}, {"sha": "9891e10c03967073d79b97361f68e6794f987177", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-1-lib.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,21 @@\n+extern int abs_called;\n+extern int inside_main;\n+\n+/* The labs call should have been optimized, but the abs call\n+   shouldn't have been.  */\n+\n+int\n+abs (int x)\n+{\n+  if (inside_main)\n+    abs_called = 1;\n+  return (x < 0 ? -x : x);\n+}\n+\n+long\n+labs (long x)\n+{\n+  if (inside_main)\n+    abort ();\n+  return (x < 0 ? -x : x);\n+}"}, {"sha": "1584515af78e18638ddf47ea66584b9e06e9b7a5", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-1.c", "status": "renamed", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -1,8 +1,5 @@\n /* Test for -fno-builtin-FUNCTION.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk>.  */\n-/* { dg-do run } */\n-/* { dg-options \"-fno-builtin-abs\" } */\n-\n /* GCC normally handles abs and labs as built-in functions even without\n    optimization.  So test that with -fno-builtin-abs, labs is so handled\n    but abs isn't.  */\n@@ -14,30 +11,13 @@ extern long labs (long);\n extern void abort (void);\n extern void exit (int);\n \n-int\n-main (void)\n+void\n+main_test (void)\n {\n   if (labs (0) != 0)\n     abort ();\n   if (abs (0) != 0)\n     abort ();\n   if (!abs_called)\n     abort ();\n-  exit (0);\n-}\n-\n-/* The labs call above should have been optimized, but the abs call\n-   shouldn't have been.  */\n-\n-static int\n-abs (int x)\n-{ /* { dg-warning \"static\" \"static decl warning\" } */\n-  abs_called = 1;\n-  return (x < 0 ? -1 : x);\n-}\n-\n-static long\n-labs (long x)\n-{\n-  abort ();\n }", "previous_filename": "gcc/testsuite/gcc.dg/no-builtin-1.c"}, {"sha": "80d76c52893b738fd995407ce46a98eff717f9cc", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/abs-1.x", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fabs-1.x?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,2 @@\n+set additional_flags -fno-builtin-abs\n+return 0"}, {"sha": "89455bc546191f9390ff7ca01a939537044b91a4", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/builtins.exp", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fbuiltins.exp?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,24 @@\n+# This harness is for testing builtin support.  Each test has two files:\n+#\n+#    - foo.c defines the main testing function, main_test().\n+#    - foo-lib.c implements the library functions that foo.c is testing.\n+#\n+# The functions in foo-lib.c will often want to abort on certain inputs.\n+# They can use the global variable inside_main to see whether they are\n+# being called from the test program or part of the common runtime.\n+#\n+# In many cases, the library functions will behave as normal at -O0\n+# and abort when optimisation is enabled.  Such implementations should\n+# go into the lib/ directory so that they can be included by any test\n+# that needs them.  They shouldn't call any external functions in case\n+# those functions were overridden too.\n+\n+load_lib c-torture.exp\n+\n+foreach src [lsort [find $srcdir/$subdir *.c]] {\n+    if {![string match *-lib.c $src] && [runtest_file_p $runtests $src]} {\n+\tc-torture-execute [list $src \\\n+\t\t\t        [file root $src]-lib.c \\\n+\t\t\t        $srcdir/$subdir/lib/main.c]\n+    }\n+}"}, {"sha": "cfd79baef474d5f09169493b9dc50e5f6b570f76", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/main.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmain.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,11 @@\n+extern void main_test (void);\n+int inside_main;\n+\n+int\n+main ()\n+{\n+  inside_main = 1;\n+  main_test ();\n+  inside_main = 0;\n+  return 0;\n+}"}, {"sha": "c8c70f9c3d8dbe59801fc7f814252633b24ec5b1", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/memcmp.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemcmp.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,21 @@\n+extern int inside_main;\n+\n+int\n+memcmp (const void *s1, const void *s2, __SIZE_TYPE__ len)\n+{\n+  const unsigned char *sp1, *sp2;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  sp1 = s1;\n+  sp2 = s2;\n+  while (len != 0 && *sp1 == *sp2)\n+    sp1++, sp2++, len--;\n+\n+  if (len == 0)\n+    return 0;\n+  return *sp1 - *sp2;\n+}"}, {"sha": "8cfa0701d45e035110a1fbe1b808f4417f25f68c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/memmove.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmemmove.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,30 @@\n+extern int inside_main;\n+\n+void *\n+memmove (void *dst, const void *src, __SIZE_TYPE__ n)\n+{\n+  char *dstp;\n+  const char *srcp;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  srcp = src;\n+  dstp = dst;\n+  if (srcp < dstp)\n+    while (n-- != 0)\n+      dstp[n] = srcp[n];\n+  else\n+    while (n-- != 0)\n+      *dstp++ = *srcp++;\n+\n+  return dst;\n+}\n+\n+void\n+bcopy (const void *src, void *dst, __SIZE_TYPE__ n)\n+{\n+  memmove (dst, src, n);\n+}"}, {"sha": "e202594073f810a2c19dece8dc37c2502e813192", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/mempcpy.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmempcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmempcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fmempcpy.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,20 @@\n+extern int inside_main;\n+\n+void *\n+mempcpy (void *dst, const void *src, __SIZE_TYPE__ n)\n+{\n+  const char *srcp;\n+  char *dstp;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  srcp = src;\n+  dstp = dst;\n+  while (n-- != 0)\n+    *dstp++ = *srcp++;\n+\n+  return dstp;\n+}"}, {"sha": "b0961b6cc16d4c5a7756d2f8a63515d570e094fa", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/stpcpy.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstpcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstpcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstpcpy.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,16 @@\n+extern int inside_main;\n+\n+char *\n+stpcpy (char *dst, const char *src)\n+{\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  while (*src != 0)\n+    *dst++ = *src++;\n+\n+  *dst = 0;\n+  return dst;\n+}"}, {"sha": "f0c7f0fc4c5907489769fbf9c42bb07b680351df", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strchr.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrchr.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,25 @@\n+extern int inside_main;\n+\n+char *\n+strchr (const char *s, int c)\n+{\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  for (;;)\n+    {\n+      if (*s == c)\n+\treturn (char *) s;\n+      if (*s == 0)\n+\treturn 0;\n+      s++;\n+    }\n+}\n+\n+char *\n+index (const char *s, int c)\n+{\n+  return strchr (s, c);\n+}"}, {"sha": "61eb250166afc3659e51ed40367f22fee7cb33f5", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strcmp.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrcmp.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,17 @@\n+extern int inside_main;\n+\n+int\n+strcmp (const char *s1, const char *s2)\n+{\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  while (*s1 != 0 && *s1 == *s2)\n+    s1++, s2++;\n+\n+  if (*s1 == 0 || *s2 == 0)\n+    return (unsigned char) *s1 - (unsigned char) *s2;\n+  return *s1 - *s2;\n+}"}, {"sha": "7b89945837f161769193f03711e5f0730bfe1d55", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strlen.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrlen.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,18 @@\n+extern int inside_main;\n+\n+__SIZE_TYPE__\n+strlen (const char *s)\n+{\n+  __SIZE_TYPE__ i;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  i = 0;\n+  while (s[i] != 0)\n+    i++;\n+\n+  return i;\n+}"}, {"sha": "30a567a99933903a77e570e804ed8a623a0b90e9", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/lib/strrchr.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Flib%2Fstrrchr.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,29 @@\n+extern int inside_main;\n+\n+char *\n+strrchr (const char *s, int c)\n+{\n+  __SIZE_TYPE__ i;\n+\n+#ifdef __OPTIMIZE__\n+  if (inside_main)\n+    abort ();\n+#endif\n+\n+  i = 0;\n+  while (s[i] != 0)\n+    i++;\n+\n+  do\n+    if (s[i] == c)\n+      return (char *) s + i;\n+  while (i-- != 0);\n+\n+  return 0;\n+}\n+\n+char *\n+rindex (const char *s, int c)\n+{\n+  return strrchr (s, c);\n+}"}, {"sha": "c9d8b8da7b9b940edfb0eb122ecbaa2c93419606", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-1-lib.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,3 @@\n+#include \"lib/strrchr.c\"\n+#include \"lib/strlen.c\"\n+#include \"lib/strcmp.c\""}, {"sha": "8a60e7e80ae7ebed8a6854a9198b85af7b253dd3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-1.c", "status": "renamed", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-1.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation.\n+/* Copyright (C) 2000, 2003  Free Software Foundation.\n \n    Ensure all expected transformations of builtin strlen, strcmp,\n    strrchr and rindex occur and perform correctly.\n@@ -14,7 +14,8 @@ extern char *rindex (const char *, int);\n int x = 6;\n char *bar = \"hi world\";\n \n-int main()\n+void\n+main_test (void)\n {\n   const char *const foo = \"hello world\";\n \n@@ -83,45 +84,4 @@ int main()\n     abort ();\n   if (__builtin_strcmp (foo, \"hello\") <= 0)\n     abort ();\n-\n-  return 0;\n-}\n-\n-static char *\n-rindex (const char *s, int c)\n-{\n-  /* For systems which don't have rindex, we ensure no link failures\n-     occur by always providing a backup definition.  During\n-     optimization this function aborts to catch errors.  */\n-#ifdef __OPTIMIZE__\n-  abort ();\n-#else\n-  return strrchr(s, c);\n-#endif\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static __SIZE_TYPE__\n-strlen (const char *s)\n-{\n-  abort ();\n-}\n-\n-__attribute__ ((noinline))\n-static int\n-strcmp (const char *s1, const char *s2)\n-{\n-  abort ();\n-}\n-\n-__attribute__ ((noinline))\n-static char *\n-strrchr (const char *s, int c)\n-{\n-  abort ();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-3.c"}, {"sha": "9049fb9e1ffeec91f4a7478535d577862641e277", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-2-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-2-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1 @@\n+#include \"lib/strchr.c\""}, {"sha": "08e87c63d301d8c43f81ad6d3156afe39843e382", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-2.c", "status": "renamed", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-2.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation.\n+/* Copyright (C) 2000, 2003  Free Software Foundation.\n \n    Ensure all expected transformations of builtin strchr and index\n    occur and perform correctly.\n@@ -9,7 +9,8 @@ extern void abort (void);\n extern char *strchr (const char *, int);\n extern char *index (const char *, int);\n \n-int main()\n+void\n+main_test (void)\n {\n   const char *const foo = \"hello world\";\n \n@@ -32,31 +33,4 @@ int main()\n     abort ();\n   if (__builtin_index (foo, 'o')  != foo + 4)\n     abort ();\n-\n-  return 0;\n-}\n-\n-static char *\n-index (const char *s, int c)\n-{\n-  /* For systems which don't have index, we ensure no link failures\n-     occur by always providing a backup definition.  During\n-     optimization this function aborts to catch errors.  */\n-#ifdef __OPTIMIZE__\n-  abort ();\n-#else\n-  return strchr(s, c);\n-#endif\n-}\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static char *\n-strchr (const char *s, int c)\n-{\n-  abort ();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-4.c"}, {"sha": "d5326ffeb2bd2b135718b1631040e9147523ca5c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-3-lib.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-3-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-3-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-3-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,17 @@\n+extern int inside_main;\n+\n+void *\n+memset (void *dst, int c, __SIZE_TYPE__ n)\n+{\n+  /* Single-byte memsets should be done inline when optimisation\n+     is enabled.  */\n+#ifdef __OPTIMIZE__\n+  if (inside_main && n < 2)\n+    abort ();\n+#endif\n+\n+  while (n-- != 0)\n+    n[(char *) dst] = c;\n+\n+  return dst;\n+}"}, {"sha": "cf7c1e303e8a657dd45901c4ef2e33b8d72ffca0", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-3.c", "status": "renamed", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-3.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002  Free Software Foundation.\n+/* Copyright (C) 2002, 2003  Free Software Foundation.\n \n    Ensure that builtin memset operations for constant length and\n    non-constant assigned value don't cause compiler problems.\n@@ -10,9 +10,10 @@ typedef __SIZE_TYPE__ size_t;\n extern void *memset (void *, int, size_t);\n \n char buffer[32];\n+int argc = 1;\n \n-int\n-main (int argc)\n+void\n+main_test (void)\n {\n   memset (buffer, argc, 0);\n   memset (buffer, argc, 1);\n@@ -32,20 +33,4 @@ main (int argc)\n   memset (buffer, argc, 15);\n   memset (buffer, argc, 16);\n   memset (buffer, argc, 17);\n-\n-  return 0;\n }\n-\n-#ifdef __OPTIMIZE__\n-/* When optimizing, most of the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   for short lengths should abort.  */\n-__attribute__ ((noinline))\n-static void *\n-memset (void *dst, int c, size_t len)\n-{\n-  if (len < 2)\n-    abort ();\n-}\n-#endif\n-", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-17.c"}, {"sha": "3b69c3baea84216030a07485f8a6adff807a5862", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-4-lib.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-4-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-4-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-4-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,2 @@\n+#include \"lib/stpcpy.c\"\n+#include \"lib/mempcpy.c\""}, {"sha": "9c0ee5473fd963fe6caec99ea3ad58420657cc90", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-4.c", "status": "renamed", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-4.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -19,7 +19,8 @@ char *s2 = \"defg\";\n char *s3 = \"FGH\";\n size_t l1 = 1;\n \n-int main()\n+void\n+main_test (void)\n {\n   int i;\n   const char *s;\n@@ -29,15 +30,15 @@ int main()\n   if (stpcpy (p + 16, \"vwxyz\" + 1) != p + 16 + 4 || memcmp (p + 16, \"wxyz\", 5))\n     abort ();\n   if (stpcpy (p + 1, \"\") != p + 1 + 0 || memcmp (p, \"a\\0cde\", 6))\n-    abort ();  \n+    abort ();\n   if (stpcpy (p + 3, \"fghij\") != p + 3 + 5 || memcmp (p, \"a\\0cfghij\", 9))\n     abort ();\n   if (mempcpy (p, \"ABCDE\", 6) != p + 6 || memcmp (p, \"ABCDE\", 6))\n     abort ();\n   if (mempcpy (p + 16, \"VWX\" + 1, 2) != p + 16 + 2 || memcmp (p + 16, \"WXyz\", 5))\n     abort ();\n   if (mempcpy (p + 1, \"\", 1) != p + 1 + 1 || memcmp (p, \"A\\0CDE\", 6))\n-    abort ();  \n+    abort ();\n   if (mempcpy (p + 3, \"FGHI\", 4) != p + 3 + 4 || memcmp (p, \"A\\0CFGHIj\", 9))\n     abort ();\n \n@@ -55,7 +56,7 @@ int main()\n     abort();\n   if (mempcpy (mempcpy (p, \"abcdEFG\", 4), \"efg\", 4) != p + 8 || memcmp (p, \"abcdefg\", 8))\n     abort();\n-  \n+\n   /* Test at least one instance of the __builtin_ style.  We do this\n      to ensure that it works and that the prototype is correct.  */\n   if (__builtin_stpcpy (p, \"abcde\") != p + 5 || memcmp (p, \"abcde\", 6))\n@@ -74,31 +75,4 @@ int main()\n   mempcpy (p + 6, s3 + 1, l1);\n   if (memcmp (p, \"ABCdeFG\", 8))\n     abort ();\n-  return 0;\n-}\n-\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  When not optimizing, we provide fallback funcs for\n-   platforms that don't have mempcpy or stpcpy in libc.*/\n-__attribute__ ((noinline))\n-static char *\n-stpcpy (char *d, const char *s)\n-{\n-#ifdef __OPTIMIZE__\n-  abort ();\n-#else\n-  return strcpy (d, s) + strlen (s);\n-#endif\n-}\n-\n-__attribute__ ((noinline))\n-static void *\n-mempcpy (void *dst, const void *src, size_t sz)\n-{\n-#ifdef __OPTIMIZE__\n-  abort ();\n-#else\n-  return (char *) memcpy (dst, src, sz) + sz;\n-#endif\n }", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-18.c"}, {"sha": "5be3df52fe5507b228da06de3f8437974d85b59c", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-5-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-5-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-5-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-5-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1 @@\n+#include \"lib/memmove.c\""}, {"sha": "4a18fc6400fa55443c615af367d9ed72db4bd3a1", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-5.c", "status": "renamed", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-5.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -54,7 +54,8 @@ static const struct bar\n \n static const int baz[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };\n \n-int main()\n+void\n+main_test (void)\n {\n   const char *s;\n   struct foo f1[sizeof foo/sizeof*foo];\n@@ -86,40 +87,4 @@ int main()\n   __builtin_bcopy (\"ABCDE\", p + 4, 1);\n   if (memcmp (p, \"abfgAi\", 7))\n     abort ();\n-\n-  return 0;\n-}\n-\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  When not optimizing, provide memmove/bcopy implementation\n-   just in case target lacks these in its libc.  */\n-__attribute__ ((noinline))\n-static void *\n-memmove (void *d, const void *s, size_t n)\n-{\n-#ifdef __OPTIMIZE__\n-  abort ();\n-#else\n-  char *dst = (char *) d;\n-  const char *src = (const char *) s;\n-  if (src < dst)\n-    {\n-      dst += n;\n-      src += n;\n-      while (n--)\n-        *--dst = *--src;\n-    }\n-  else\n-    while (n--)\n-      *dst++ = *src++;\n-  return (char *) d;\n-#endif\n-}\n-\n-__attribute__ ((noinline))\n-static void\n-bcopy (const void *s, void *d, size_t n)\n-{\n-  memmove (d, s, n);\n }", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-19.c"}, {"sha": "029a92e77d512b90602e843dd0947405044a2db3", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-6-lib.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1 @@\n+#include \"lib/memcmp.c\""}, {"sha": "869dba17baa0b46ed4d95fc4602648ca1d7dd0ec", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-6.c", "status": "renamed", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-6.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -12,36 +12,23 @@ extern void link_error (void);\n typedef __SIZE_TYPE__ size_t;\n extern int memcmp (const void *, const void *, size_t);\n \n-int\n-main (int argc)\n+void\n+main_test (void)\n {\n   if (memcmp (\"abcd\", \"efgh\", 4) >= 0)\n-     link_error ();\n+    link_error ();\n   if (memcmp (\"abcd\", \"abcd\", 4) != 0)\n-     link_error ();\n+    link_error ();\n   if (memcmp (\"efgh\", \"abcd\", 4) <= 0)\n-     link_error ();\n-  return 0;\n+    link_error ();\n }\n \n-#ifdef __OPTIMIZE__\n-/* When optimizing, all the above cases should be transformed into\n-   something else.  So any remaining calls to the original function\n-   should abort.  */\n-__attribute__ ((noinline))\n-static int\n-memcmp (const void *s1, const void *s2, size_t len)\n-{\n-  abort ();\n-}\n-#else\n+#ifndef __OPTIMIZE__\n /* When not optimizing, the above tests may generate references to\n    the function link_error, but should never actually call it.  */\n-__attribute__ ((noinline))\n-static void\n+void\n link_error ()\n {\n   abort ();\n }\n #endif\n-", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-16.c"}, {"sha": "a0318212e6714d072466b58c2e34a191034b3776", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-asm-1-lib.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-1-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-1-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-1-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,31 @@\n+extern int inside_main;\n+extern const char *p;\n+\n+char *\n+my_strstr (const char *s1, const char *s2)\n+{\n+  __SIZE_TYPE__ len = strlen (s2);\n+\n+#ifdef __OPTIMIZE__\n+  /* If optimizing, we should be called only in the strstr (foo + 2, p)\n+     case.  All other cases should be optimized.  */\n+  if (inside_main)\n+    if (s2 != p || strcmp (s1, \"hello world\" + 2) != 0)\n+      abort ();\n+#endif\n+  if (len == 0)\n+    return (char *) s1;\n+  for (s1 = strchr (s1, *s2); s1; s1 = strchr (s1 + 1, *s2))\n+    if (strncmp (s1, s2, len) == 0)\n+      return (char *) s1;\n+  return (char *) 0;\n+}\n+\n+char *\n+strstr (const char *s1, const char *s2)\n+{\n+  if (inside_main)\n+    abort ();\n+\n+  return my_strstr (s1, s2);\n+}"}, {"sha": "f3c444286a057cd120f849abbae161adba6e5242", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-asm-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-1.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,41 @@\n+/* Copyright (C) 2000, 2003  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strstr occur and\n+   perform correctly in presence of redirect.  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void abort (void);\n+extern char *strstr (const char *, const char *)\n+  __asm (\"my_strstr\");\n+\n+const char *p = \"rld\", *q = \"hello world\";\n+\n+void\n+main_test (void)\n+{\n+  const char *const foo = \"hello world\";\n+\n+  if (strstr (foo, \"\") != foo)\n+    abort ();\n+  if (strstr (foo + 4, \"\") != foo + 4)\n+    abort ();\n+  if (strstr (foo, \"h\") != foo)\n+    abort ();\n+  if (strstr (foo, \"w\") != foo + 6)\n+    abort ();\n+  if (strstr (foo + 6, \"o\") != foo + 7)\n+    abort ();\n+  if (strstr (foo + 1, \"world\") != foo + 6)\n+    abort ();\n+  if (strstr (foo + 2, p) != foo + 8)\n+    abort ();\n+  if (strstr (q, \"\") != q)\n+    abort ();\n+  if (strstr (q + 1, \"o\") != q + 4)\n+    abort ();\n+\n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_strstr (foo + 1, \"world\") != foo + 6)\n+    abort ();\n+}"}, {"sha": "16369a21794bb4c7bdd467b4710a1397dcb10061", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-asm-2-lib.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-2-lib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-2-lib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-2-lib.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,76 @@\n+extern int inside_main;\n+typedef __SIZE_TYPE__ size_t;\n+\n+#define TEST_ABORT if (inside_main) abort()\n+\n+void *\n+my_memcpy (void *d, const void *s, size_t n)\n+{\n+  char *dst = (char *) d;\n+  const char *src = (const char *) s;\n+  while (n--)\n+    *dst++ = *src++;\n+  return (char *) d;\n+}\n+\n+void\n+my_bcopy (const void *s, void *d, size_t n)\n+{\n+  char *dst = (char *) d;\n+  const char *src = (const char *) s;\n+  if (src >= dst)\n+    while (n--)\n+      *dst++ = *src++;\n+  else\n+    {\n+      dst += n;\n+      src += n;\n+      while (n--)\n+        *--dst = *--src;\n+    }\n+}\n+\n+void *\n+my_memset (void *d, int c, size_t n)\n+{\n+  char *dst = (char *) d;\n+  while (n--)\n+    *dst++ = c;\n+  return (char *) d;\n+}\n+\n+void\n+my_bzero (void *d, size_t n)\n+{\n+  char *dst = (char *) d;\n+  while (n--)\n+    *dst++ = '\\0';\n+}\n+\n+void *\n+memcpy (void *d, const void *s, size_t n)\n+{\n+  TEST_ABORT;\n+  return my_memcpy (d, s, n);\n+}\n+\n+void\n+bcopy (const void *s, void *d, size_t n)\n+{\n+  TEST_ABORT;\n+  my_bcopy (s, d, n);\n+}\n+\n+void *\n+memset (void *d, int c, size_t n)\n+{\n+  TEST_ABORT;\n+  return my_memset (d, c, n);\n+}\n+\n+void\n+bzero (void *d, size_t n)\n+{\n+  TEST_ABORT;\n+  my_bzero (d, n);\n+}"}, {"sha": "42f9b96d610d2b7d6cd4eca85e294fa9005434de", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/string-asm-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Fstring-asm-2.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,43 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Test memcpy and memset in presence of redirect.  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void abort (void);\n+extern void *memcpy (void *, const void *, size_t)\n+  __asm (\"my_memcpy\");\n+extern void bcopy (const void *, void *, size_t)\n+  __asm (\"my_bcopy\");\n+extern void *memset (void *, int, size_t)\n+  __asm (\"my_memset\");\n+extern void bzero (void *, size_t)\n+  __asm (\"my_bzero\");\n+extern int memcmp (const void *, const void *, size_t);\n+\n+struct A { char c[32]; } a = { \"foobar\" };\n+char x[64] = \"foobar\", y[64];\n+int i = 39, j = 6, k = 4;\n+\n+void\n+main_test (void)\n+{\n+  struct A b = a;\n+  struct A c = { { 'x' } };\n+\n+  if (memcmp (b.c, x, 32) || c.c[0] != 'x' || memcmp (c.c + 1, x + 32, 31))\n+    abort ();\n+  if (__builtin_memcpy (y, x, i) != y || memcmp (x, y, 64))\n+    abort ();\n+  if (memcpy (y + 6, x, j) != y + 6\n+      || memcmp (x, y, 6) || memcmp (x, y + 6, 58))\n+    abort ();\n+  if (__builtin_memset (y + 2, 'X', k) != y + 2\n+      || memcmp (y, \"foXXXXfoobar\", 13))\n+    abort ();\n+  bcopy (y + 1, y + 2, 6);\n+  if (memcmp (y, \"fooXXXXfobar\", 13))\n+    abort ();\n+  __builtin_bzero (y + 4, 2);\n+  if (memcmp (y, \"fooX\\0\\0Xfobar\", 13))\n+    abort ();\n+}"}, {"sha": "c5930394938dd2c7247723b53c87ccafe9b1a1b6", "filename": "gcc/testsuite/gcc.dg/torture/builtin-noret-1.c", "status": "renamed", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-noret-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-noret-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-noret-1.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -1,5 +1,6 @@\n /* Test for builtin noreturn attributes.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do link } */\n \n extern void abort (void);\n extern void exit (int);\n@@ -17,7 +18,6 @@ int\n main (void)\n {\n   volatile int i = 0;\n-  /* The real test here is that the program links.  */\n   if (i)\n     tabort ();\n   if (i)\n@@ -50,9 +50,8 @@ t_exit (void)\n   link_failure ();\n }\n \n-/* Some non-Unix libcs might not have _exit.  This version should never\n-   get called.  */\n-static void\n+/* Some non-Unix libcs might not have _exit.  */\n+void\n _exit (int i)\n {\n   abort ();\n@@ -65,20 +64,9 @@ t_Exit (void)\n   link_failure ();\n }\n \n-/* Some libcs might not have _Exit.  This version should never get called.  */\n-static void\n-_Exit (int i)\n-{\n-  abort ();\n-}\n-\n-/* When optimizing, no calls to link_failure should remain.  In any case,\n-   link_failure should not be called.  */\n-\n-#ifndef __OPTIMIZE__\n+/* Some libcs might not have _Exit.  */\n void\n-link_failure (void)\n+_Exit (int i)\n {\n   abort ();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtin-noret-1.c"}, {"sha": "14cf94e5ba2ef9457c60525b7f315c490c909522", "filename": "gcc/testsuite/gcc.dg/torture/builtin-noret-2.c", "status": "renamed", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-noret-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-noret-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-noret-2.c?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -1,6 +1,7 @@\n /* Test for builtin noreturn attributes when the visible declarations\n-   are function-local.  Doesn't presently work.  Modified from\n-   builtin-noret-1.c by Zack Weinberg <zack@codesourcery.com>.  */\n+   are function-local.  Modified from builtin-noret-1.c by Zack Weinberg\n+   <zack@codesourcery.com>.  */\n+/* { dg-do link } */\n \n extern void tabort (void);\n extern void texit (void);\n@@ -13,7 +14,6 @@ int\n main (void)\n {\n   volatile int i = 0;\n-  /* The real test here is that the program links.  */\n   if (i)\n     tabort ();\n   if (i)\n@@ -49,9 +49,8 @@ t_exit (void)\n   link_failure ();\n }\n \n-/* Some non-Unix libcs might not have _exit.  This version should never\n-   get called.  */\n-static void\n+/* Some non-Unix libcs might not have _exit.  */\n+void\n _exit (int i)\n {\n   abort ();\n@@ -65,20 +64,9 @@ t_Exit (void)\n   link_failure ();\n }\n \n-/* Some libcs might not have _Exit.  This version should never get called.  */\n-static void\n-_Exit (int i)\n-{\n-  abort ();\n-}\n-\n-/* When optimizing, no calls to link_failure should remain.  In any case,\n-   link_failure should not be called.  */\n-\n-#ifndef __OPTIMIZE__\n+/* Some libcs might not have _Exit.  */\n void\n-link_failure (void)\n+_Exit (int i)\n {\n   abort ();\n }\n-#endif", "previous_filename": "gcc/testsuite/gcc.c-torture/execute/builtin-noret-2.c"}, {"sha": "b151c2e07728eaa28119ef278d8d699293785e63", "filename": "gcc/testsuite/gcc.dg/torture/dg-torture.exp", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdg-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1112e60cb9d8f22517caf306fa1a7e1584855e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdg-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fdg-torture.exp?ref=e1112e60cb9d8f22517caf306fa1a7e1584855e0", "patch": "@@ -0,0 +1,7 @@\n+# This harness is for tests that should be run at all optimisation levels.\n+\n+load_lib gcc-dg.exp\n+\n+dg-init\n+gcc-dg-runtest [lsort [glob $srcdir/$subdir/*.c]] \"\"\n+dg-finish"}]}