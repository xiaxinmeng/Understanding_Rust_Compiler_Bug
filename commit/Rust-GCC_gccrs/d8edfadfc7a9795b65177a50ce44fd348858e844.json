{"sha": "d8edfadfc7a9795b65177a50ce44fd348858e844", "node_id": "C_kwDOANBUbNoAKGQ4ZWRmYWRmYzdhOTc5NWI2NTE3N2E1MGNlNDRmZDM0ODg1OGU4NDQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-04T07:47:02Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-20T05:07:35Z"}, "message": "Disallow loop rotation and loop header crossing in jump threaders.\n\nThere is a lot of fall-out from this patch, as there were many threading\ntests that assumed the restrictions introduced by this patch were valid.\nSome tests have merely shifted the threading to after loop\noptimizations, but others ended up with no threading opportunities at\nall.  Surprisingly some tests ended up with more total threads.  It was\na crapshoot all around.\n\nOn a postive note, there are 6 tests that no longer XFAIL, and one\nguality test which now passes.\n\nI felt a bit queasy about such a fundamental change wrt threading, so I\nran it through my callgrind test harness (.ii files from a bootstrap).\nThere was no change in overall compilation, DOM, or the VRP threaders.\n\nHowever, there was a slight increase of 1.63% in the backward threader.\nI'm pretty sure we could reduce this if we incorporated the restrictions\ninto their profitability code.  This way we could stop the search when\nwe ran into one of these restrictions.  Not sure it's worth it at this\npoint.\n\nTested on x86-64 Linux.\n\nCo-authored-by: Richard Biener <rguenther@suse.de>\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadupdate.c (cancel_thread): Dump threading reason\n\ton the same line as the threading cancellation.\n\t(jt_path_registry::cancel_invalid_paths): Avoid rotating loops.\n\tAvoid threading through loop headers where the path remains in the\n\tloop.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.graphite/force-parallel-5.c: Remove xfail.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Warray-bounds-87.c: Remove xfail.\n\t* gcc.dg/analyzer/pr94851-2.c: Remove xfail.\n\t* gcc.dg/graphite/pr69728.c: Remove xfail.\n\t* gcc.dg/graphite/scop-dsyr2k.c: Remove xfail.\n\t* gcc.dg/graphite/scop-dsyrk.c: Remove xfail.\n\t* gcc.dg/shrink-wrap-loop.c: Remove xfail.\n\t* gcc.dg/loop-8.c: Adjust for new threading restrictions.\n\t* gcc.dg/tree-ssa/ifc-20040816-1.c: Same.\n\t* gcc.dg/tree-ssa/pr21559.c: Same.\n\t* gcc.dg/tree-ssa/pr59597.c: Same.\n\t* gcc.dg/tree-ssa/pr71437.c: Same.\n\t* gcc.dg/tree-ssa/pr77445-2.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n\t* gcc.dg/vect/bb-slp-16.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Remove.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-18.c: Remove.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2a.c: Remove.\n\t* gcc.dg/tree-ssa/ssa-thread-invalid.c: New test.", "tree": {"sha": "ee7768875b95baef113668261d2b54b00ecee722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee7768875b95baef113668261d2b54b00ecee722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8edfadfc7a9795b65177a50ce44fd348858e844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8edfadfc7a9795b65177a50ce44fd348858e844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8edfadfc7a9795b65177a50ce44fd348858e844", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8edfadfc7a9795b65177a50ce44fd348858e844/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f36240f8c835d792f788b6724e272fc0a4a4f26f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f36240f8c835d792f788b6724e272fc0a4a4f26f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f36240f8c835d792f788b6724e272fc0a4a4f26f"}], "stats": {"total": 426, "additions": 207, "deletions": 219}, "files": [{"sha": "a5457807c3ad80c8fadf57641f266150857bad1a", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-87.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-87.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -33,7 +33,7 @@ static unsigned int h (int i, int j)\n     case 9:\n       return j;\n     case 10:\n-      return a[i];  // { dg-bogus \"-Warray-bounds\" \"pr101671\" { xfail *-*-* } }\n+      return a[i];  // { dg-bogus \"-Warray-bounds\" \"pr101671\" }\n     }\n   return 0;\n }"}, {"sha": "62176bdaee89b4b49053b56ec2b59f5c5da46973", "filename": "gcc/testsuite/gcc.dg/analyzer/pr94851-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr94851-2.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -45,7 +45,7 @@ int pamark(void) {\n     if (curbp->b_amark == (AMARK *)NULL)\n       curbp->b_amark = p;\n     else\n-      last->m_next = p; /* { dg-warning \"dereference of NULL 'last'\" \"deref\" { xfail *-*-* } } */\n+      last->m_next = p; /* { dg-warning \"dereference of NULL 'last'\" \"deref\" } */\n   }\n \n   p->m_name = (char)c; /* { dg-bogus \"leak of 'p'\" \"bogus leak\" } */"}, {"sha": "a6f385749c21638f2ea61ca60440416f9bb4208b", "filename": "gcc/testsuite/gcc.dg/graphite/pr69728.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr69728.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr69728.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr69728.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -24,6 +24,4 @@ fn1 ()\n    run into scheduling issues before here, not being able to handle\n    empty domains.  */\n \n-/* XFAILed by fix for PR86865.  */\n-\n-/* { dg-final { scan-tree-dump \"loop nest optimized\" \"graphite\" { xfail *-*-* } } }  */\n+/* { dg-final { scan-tree-dump \"loop nest optimized\" \"graphite\" } } */"}, {"sha": "41c91b97b578da5153566ed2dbc9c47cbbd2fc0d", "filename": "gcc/testsuite/gcc.dg/graphite/scop-dsyr2k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyr2k.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -17,4 +17,4 @@ void dsyr2k(int N) {\n #pragma endscop\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\" { xfail *-*-* } } } */ \n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\" } } */"}, {"sha": "e01a517be115ffc189614f2dbfdfacc28591c51d", "filename": "gcc/testsuite/gcc.dg/graphite/scop-dsyrk.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fscop-dsyrk.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -19,4 +19,4 @@ void dsyrk(int N)\n #pragma endscop\n }\n \n-/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"number of SCoPs: 1\" 1 \"graphite\" } } */"}, {"sha": "a685fc25056ad9af170c7f8a26dfb6d787731a9c", "filename": "gcc/testsuite/gcc.dg/loop-8.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -11,18 +11,23 @@ f (int *a, int *b)\n {\n   int i;\n \n-  for (i = 0; i < 100; i++)\n+  i = 100;\n+  if (i > 0)\n     {\n-      int d = 42;\n+      do\n+\t{\n+\t  int d = 42;\n \n-      a[i] = d;\n-      if (i % 2)\n-\td = i;\n-      b[i] = d;\n+\t  a[i] = d;\n+\t  if (i % 2)\n+\t    d = i;\n+\t  b[i] = d;\n+\t  ++i;\n+\t}\n+      while (i < 100);\n     }\n }\n \n /* Load of 42 is moved out of the loop, introducing a new pseudo register.  */\n-/* { dg-final { scan-rtl-dump-times \"Decided\" 1 \"loop2_invariant\" } } */\n /* { dg-final { scan-rtl-dump-not \"without introducing a new temporary register\" \"loop2_invariant\" } } */\n "}, {"sha": "ddc99e6b75a0b2608c44f3df82dd10def47209a3", "filename": "gcc/testsuite/gcc.dg/shrink-wrap-loop.c", "status": "modified", "additions": 1, "deletions": 53, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fshrink-wrap-loop.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -1,58 +1,6 @@\n /* { dg-do compile { target { { { i?86-*-* x86_64-*-* } && lp64 } || { arm_thumb2 } } } } */\n /* { dg-options \"-O2 -fdump-rtl-pro_and_epilogue\"  } */\n \n-/*\n-Our new threader is threading things a bit too early, and causing the\n-testcase in gcc.dg/shrink-wrap-loop.c to fail.\n-\n-  The gist is this BB inside a loop:\n-\n-  <bb 6> :\n-  # p_2 = PHI <p2_6(D)(2), p_12(5)>\n-  if (p_2 != 0B)\n-    goto <bb 3>; [INV]\n-  else\n-    goto <bb 7>; [INV]\n-\n-Our threader can move this check outside of the loop (good).  This is\n-done before branch probabilities are calculated and causes the probs\n-to be calculated as:\n-\n-<bb 2> [local count: 216361238]:\n-  if (p2_6(D) != 0B)\n-    goto <bb 7>; [54.59%]\n-  else\n-    goto <bb 6>; [45.41%]\n-\n-Logically this seems correct to me.  A simple check outside of a loop\n-should slightly but not overwhelmingly favor a non-zero value.\n-\n-Interestingly however, the old threader couldn't get this, but the IL\n-ended up identical, albeit with different probabilities.  What happens\n-is that, because the old code could not thread this, the p2 != 0 check\n-would remain inside the loop and probs would be calculated thusly:\n-\n-  <bb 6> [local count: 1073741824]:\n-  # p_2 = PHI <p2_6(D)(2), p_12(5)>\n-  if (p_2 != 0B)\n-    goto <bb 3>; [94.50%]\n-  else\n-    goto <bb 7>; [5.50%]\n-\n-Then when the loop header copying pass (\"ch\") shuffled things around,\n-the IL would end up identical to my early threader code, but with the\n-probabilities would remain as 94.5/5.5.\n-\n-The above discrepancy causes the RTL ifcvt pass to generate different\n-code, and by the time we get to the shrink wrapping pass, things look\n-sufficiently different such that the legacy code can actually shrink\n-wrap, whereas our new code does not.\n-\n-IMO, if the loop-ch pass moves conditionals outside of a loop, the\n-probabilities should be adjusted, but that does mean the shrink wrap\n-won't happen for this contrived testcase.\n- */\n-\n int foo (int *p1, int *p2);\n \n int\n@@ -68,4 +16,4 @@ test (int *p1, int *p2)\n \n   return 1;\n }\n-/* { dg-final { scan-rtl-dump \"Performing shrink-wrapping\" \"pro_and_epilogue\" { xfail *-*-* } } } */\n+/* { dg-final { scan-rtl-dump \"Performing shrink-wrapping\" \"pro_and_epilogue\" } } */"}, {"sha": "f8a6495cbaa7b1cb5bb4b2ecf26a5d629e58e741", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ifc-20040816-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fifc-20040816-1.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -39,4 +39,4 @@ int main1 ()\n    which is folded by vectorizer.  Both outgoing edges must have probability\n    100% so the resulting profile match after folding.  */\n /* { dg-final { scan-tree-dump-times \"Invalid sum of outgoing probabilities 200.0\" 1 \"ifcvt\" } } */\n-/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming counts\" 1 \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-times \"Invalid sum of incoming counts\" 2 \"ifcvt\" } } */"}, {"sha": "43f046edabe6c1f4536f5f7677841dd4d4b6b872", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21559.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -35,10 +35,7 @@ void foo (void)\n /* First, we should simplify the bits < 0 test within the loop.  */\n /* { dg-final { scan-tree-dump-times \"Simplified relational\" 1 \"evrp\" } } */\n \n-/* Second, we should thread the edge out of the loop via the break\n-   statement.  We also realize that the final bytes == 0 test is useless,\n-   and thread over it.  We also know that toread != 0 is useless when\n-   entering while loop and thread over it.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 3 \"vrp-thread1\" } } */\n+/* We used to check for 3 threaded jumps here, but they all would\n+   rotate the loop.  */\n \n "}, {"sha": "764b3fe2e80cd72eaed237f1ccfa4dcb3576d360", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr59597.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr59597.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -56,11 +56,7 @@ main (int argc, char argv[])\n   return crc;\n }\n \n-/* Previously we had 3 jump threads, but one of them crossed loops.\n-   The reason the old threader was allowing it, was because there was\n-   an ASSERT_EXPR getting in the way.  Without the ASSERT_EXPR, we\n-   have an empty pre-header block as the final block in the thread,\n-   which the threader will simply join with the next block which *is*\n-   in a different loop.  */\n-/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 2 \"vrp-thread1\" } } */\n+/* None of the threads we can get in vrp-thread1 are valid.  They all\n+   cross or rotate loops.  */\n+/* { dg-final { scan-tree-dump-not \"Registering jump thread\" \"vrp-thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"joiner\" \"vrp-thread1\" } } */"}, {"sha": "eab3a25928e097b12c987d834c319401683f5144", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr71437.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr71437.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-ffast-math -O3 -fdump-tree-vrp-thread1-details\" } */\n+/* { dg-options \"-ffast-math -O3 -fdump-tree-dom3-details\" } */\n \n int I = 50, J = 50;\n int S, L;\n@@ -39,4 +39,8 @@ void foo (int K)\n \tbar (LD, SD);\n     }\n }\n-/* { dg-final { scan-tree-dump-times \"Threaded jump \" 2 \"vrp-thread1\" } } */\n+\n+/* We used to get 1 vrp-thread1 candidates here, but they now get\n+   deferred until after loop opts are done, because they were rotating\n+   loops.  */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump \" 2 \"dom3\" } } */"}, {"sha": "f2a5e78e6bee38f2d4f5e4ba46cec4bc65d5e81c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr77445-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr77445-2.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -123,8 +123,7 @@ enum STATES FMS( u8 **in , u32 *transitions) {\n    aarch64 has the highest CASE_VALUES_THRESHOLD in GCC.  It's high enough\n    to change decisions in switch expansion which in turn can expose new\n    jump threading opportunities.  Skip the later tests on aarch64.  */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: \\[7-9\\]\" \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Invalid sum\" 1 \"thread1\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: \\[7-9\\]\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread1\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread2\" } } */\n /* { dg-final { scan-tree-dump-not \"optimizing for size\" \"thread3\" { target { ! aarch64*-*-* } } } } */"}, {"sha": "0246ebf3c6398f715749e97856ef735bae3c385e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-18.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36240f8c835d792f788b6724e272fc0a4a4f26f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36240f8c835d792f788b6724e272fc0a4a4f26f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-18.c?ref=f36240f8c835d792f788b6724e272fc0a4a4f26f", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp-thread1-details -std=gnu89 --param logical-op-non-short-circuit=0\" } */\n-\n-#include \"ssa-dom-thread-4.c\"\n-\n-/* On targets that define LOGICAL_OP_NON_SHORT_CIRCUIT to 0, we split both\n-   \"a_elt || b_elt\" and \"b_elt && kill_elt\" into two conditions each,\n-   rather than using \"(var1 != 0) op (var2 != 0)\".  Also, as on other targets,\n-   we duplicate the header of the inner \"while\" loop.  There are then\n-   4 threading opportunities:\n-\n-   1x \"!a_elt && b_elt\" in the outer \"while\" loop\n-      -> the start of the inner \"while\" loop,\n-\t skipping the known-true \"b_elt\" in the first condition.\n-   1x \"!b_elt\" in the first condition\n-      -> the outer \"while\" loop's continuation point,\n-\t skipping the known-false \"b_elt\" in the second condition.\n-   2x \"kill_elt->indx >= b_elt->indx\" in the first \"while\" loop\n-      -> \"kill_elt->indx == b_elt->indx\" in the second condition,\n-\t skipping the known-true \"b_elt && kill_elt\" in the second\n-\t condition.\n-\n-   All the cases are picked up by VRP1 as jump threads.  */\n-\n-/* There used to be 6 jump threads found by thread1, but they all\n-   depended on threading through distinct loops in ethread.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"vrp-thread1\" } } */"}, {"sha": "8f0a12c12ee52789f8d89d6117bb32d172e64231", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2a.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36240f8c835d792f788b6724e272fc0a4a4f26f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36240f8c835d792f788b6724e272fc0a4a4f26f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c?ref=f36240f8c835d792f788b6724e272fc0a4a4f26f", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp-thread1-stats -fdump-tree-dom2-stats\" } */\n-\n-void bla();\n-\n-/* In the following case, we should be able to thread edge through\n-   the loop header.  */\n-\n-void thread_entry_through_header (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < 170; i++)\n-    bla ();\n-}\n-\n-/* There's a single jump thread that should be handled by the VRP\n-   jump threading pass.  */\n-/* { dg-final { scan-tree-dump-times \"Jumps threaded: 1\" 1 \"vrp-thread1\"} } */\n-/* { dg-final { scan-tree-dump-times \"Jumps threaded: 2\" 0 \"vrp-thread1\"} } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */"}, {"sha": "9cd463571c46a61d3c10eb37a4af4c6498568ccc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp-thread1-details -fdump-tree-dom2-details -std=gnu89 --param logical-op-non-short-circuit=1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp-thread2-details -fdump-tree-dom2-details -std=gnu89 --param logical-op-non-short-circuit=1\" } */\n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;\n@@ -53,10 +53,8 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n \n   return changed;\n }\n-/* The block starting the second conditional has  3 incoming edges,\n-   we should thread all three, but due to a bug in the threading\n-   code we missed the edge when the first conditional is false\n-   (b_elt is zero, which means the second conditional is always\n-   zero.  VRP1 catches all three.  */\n-/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 2 \"vrp-thread1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Path crosses loops\" 1 \"vrp-thread1\" } } */\n+/* We used to catch 3 jump threads in vrp-thread1, but they all\n+   rotated the loop, so they were disallowed.  This in turn created\n+   other opportunities for the other threaders which result in the the\n+   post-loop threader (vrp-thread2) catching more.  */\n+/* { dg-final { scan-tree-dump-times \"Registering jump thread\" 5 \"vrp-thread2\" } } */"}, {"sha": "b0a7d42347571cc8cf00cb968d50a8e73f3291c6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-6.c", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f36240f8c835d792f788b6724e272fc0a4a4f26f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f36240f8c835d792f788b6724e272fc0a4a4f26f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c?ref=f36240f8c835d792f788b6724e272fc0a4a4f26f", "patch": "@@ -1,44 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-thread1-details -fdump-tree-thread3-details\" } */\n-\n-/* { dg-final { scan-tree-dump-times \"Registering jump\" 6 \"thread1\" } } */\n-/* { dg-final { scan-tree-dump-times \"Registering jump\" 1 \"thread3\" } } */\n-\n-int sum0, sum1, sum2, sum3;\n-int foo (char *s, char **ret)\n-{\n-  int state=0;\n-  char c;\n-\n-  for (; *s && state != 4; s++)\n-    {\n-      c = *s;\n-      if (c == '*')\n-\t{\n-\t  s++;\n-\t  break;\n-\t}\n-      switch (state)\n-\t{\n-\tcase 0:\n-\t  if (c == '+')\n-\t    state = 1;\n-\t  else if (c != '-')\n-\t    sum0+=c;\n-\t  break;\n-\tcase 1:\n-\t  if (c == '+')\n-\t    state = 2;\n-\t  else if (c == '-')\n-\t    state = 0;\n-\t  else\n-\t    sum1+=c;\n-\t  break;\n-\tdefault:\n-\t  break;\n-\t}\n-\n-    }\n-  *ret = s;\n-  return state;\n-}"}, {"sha": "1da00a691c8e33a5419b54308c7657b77006a250", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -1,15 +1,14 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-thread1-stats -fdump-tree-thread2-stats -fdump-tree-dom2-stats -fdump-tree-thread3-stats -fdump-tree-dom3-stats -fdump-tree-vrp2-stats -fno-guess-branch-probability\" } */\n \n-/* { dg-final { scan-tree-dump \"Jumps threaded: 12\"  \"thread1\" } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 5\" \"thread3\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 12\"  \"thread3\" } } */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom2\" } } */\n \n /* aarch64 has the highest CASE_VALUES_THRESHOLD in GCC.  It's high enough\n    to change decisions in switch expansion which in turn can expose new\n    jump threading opportunities.  Skip the later tests on aarch64.  */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"dom3\" { target { ! aarch64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"vrp2\" { target { ! aarch64*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\"  \"vrp-thread2\" { target { ! aarch64*-*-* } } } } */\n \n enum STATE {\n   S0=0,"}, {"sha": "bd56a62a4b468df71105d6dd3e63d90cae4d0acc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-invalid.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-invalid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-invalid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-invalid.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -0,0 +1,102 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -fgimple -fdump-statistics\" }\n+//\n+// This is a collection of seemingly threadble paths that should not be allowed.\n+\n+void foobar (int);\n+\n+// Possible thread from 2->4->3, but it would rotate the loop.\n+void __GIMPLE (ssa)\n+f1 ()\n+{\n+  int i;\n+\n+  // Pre-header.\n+  __BB(2):\n+  goto __BB4;\n+\n+  // Latch.\n+  __BB(3):\n+  foobar (i_1);\n+  i_5 = i_1 + 1;\n+  goto __BB4;\n+\n+  __BB(4,loop_header(1)):\n+  i_1 = __PHI (__BB2: 0, __BB3: i_5);\n+  if (i_1 != 101)\n+    goto __BB3;\n+  else\n+    goto __BB5;\n+\n+  __BB(5):\n+  return;\n+\n+}\n+\n+// Possible thread from 2->3->5 but threading through the empty latch\n+// would create a non-empty latch.\n+void __GIMPLE (ssa)\n+f2 ()\n+{\n+  int i;\n+\n+  // Pre-header.\n+  __BB(2):\n+  goto __BB3;\n+\n+  __BB(3,loop_header(1)):\n+  i_8 = __PHI (__BB5: i_5, __BB2: 0);\n+  foobar (i_8);\n+  i_5 = i_8 + 1;\n+  if (i_5 != 256)\n+    goto __BB5;\n+  else\n+    goto __BB4;\n+\n+  // Latch.\n+  __BB(5):\n+  goto __BB3;\n+\n+  __BB(4):\n+  return;\n+\n+}\n+\n+// Possible thread from 3->5->6->3 but this would thread through the\n+// header but not exit the loop.\n+int __GIMPLE (ssa)\n+f3 (int a)\n+{\n+  int i;\n+\n+  __BB(2):\n+  goto __BB6;\n+\n+  __BB(3):\n+  if (i_1 != 0)\n+    goto __BB4;\n+  else\n+    goto __BB5;\n+\n+  __BB(4):\n+  foobar (5);\n+  goto __BB5;\n+\n+  // Latch.\n+  __BB(5):\n+  i_7 = i_1 + 1;\n+  goto __BB6;\n+\n+  __BB(6,loop_header(1)):\n+  i_1 = __PHI (__BB2: 1, __BB5: i_7);\n+  if (i_1 <= 99)\n+    goto __BB3;\n+  else\n+    goto __BB7;\n+\n+  __BB(7):\n+  return;\n+\n+}\n+\n+// { dg-final { scan-tree-dump-not \"Jumps threaded\" \"statistics\" } }"}, {"sha": "4fc176dde8428f9b5cdce19c0069243d60e949ea", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-16.c", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-16.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -16,41 +16,52 @@ main1 (int dummy)\n   unsigned int *pin = &in[0];\n   unsigned int *pout = &out[0];\n   unsigned int a = 0;\n-  \n-  for (i = 0; i < N; i++)\n+\n+  i = N;\n+  if (i > 0)\n     {\n-      *pout++ = *pin++ + a;\n-      *pout++ = *pin++ + a;\n-      *pout++ = *pin++ + a;\n-      *pout++ = *pin++ + a;\n-      *pout++ = *pin++ + a;\n-      *pout++ = *pin++ + a;\n-      *pout++ = *pin++ + a;\n-      *pout++ = *pin++ + a;\n-      if (arr[i] = i)\n-        a = i;\n-      else\n-        a = 2;\n+      do\n+\t{\n+\t  *pout++ = *pin++ + a;\n+\t  *pout++ = *pin++ + a;\n+\t  *pout++ = *pin++ + a;\n+\t  *pout++ = *pin++ + a;\n+\t  *pout++ = *pin++ + a;\n+\t  *pout++ = *pin++ + a;\n+\t  *pout++ = *pin++ + a;\n+\t  *pout++ = *pin++ + a;\n+\t  if (arr[i] = i)\n+\t    a = i;\n+\t  else\n+\t    a = 2;\n+\t}\n+      while (i < N);\n     }\n \n   a = 0;\n-  /* check results: */ \n-  for (i = 0; i < N; i++)\n+  /* check results: */\n+  i = N;\n+  if (i > 0)\n     {\n-      if (out[i*8] !=  in[i*8] + a\n-         || out[i*8 + 1] != in[i*8 + 1] + a\n-         || out[i*8 + 2] != in[i*8 + 2] + a\n-         || out[i*8 + 3] != in[i*8 + 3] + a\n-         || out[i*8 + 4] != in[i*8 + 4] + a\n-         || out[i*8 + 5] != in[i*8 + 5] + a\n-         || out[i*8 + 6] != in[i*8 + 6] + a\n-         || out[i*8 + 7] != in[i*8 + 7] + a)\n-\tabort ();\n+      do\n+\t{\n+\t  if (out[i*8] !=  in[i*8] + a\n+\t      || out[i*8 + 1] != in[i*8 + 1] + a\n+\t      || out[i*8 + 2] != in[i*8 + 2] + a\n+\t      || out[i*8 + 3] != in[i*8 + 3] + a\n+\t      || out[i*8 + 4] != in[i*8 + 4] + a\n+\t      || out[i*8 + 5] != in[i*8 + 5] + a\n+\t      || out[i*8 + 6] != in[i*8 + 6] + a\n+\t      || out[i*8 + 7] != in[i*8 + 7] + a)\n+\t    abort ();\n \n-      if (arr[i] = i)\n-        a = i;\n-      else\n-        a = 2;\n+\t  if (arr[i] = i)\n+\t    a = i;\n+\t  else\n+\t    a = 2;\n+\t  i++;\n+\t}\n+      while (i < N);\n     }\n \n   return 0;\n@@ -66,4 +77,3 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"optimized: basic block\" 1 \"slp1\" } } */\n-  "}, {"sha": "293836cdc533667aec654e9ab8076410ff976be1", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -278,7 +278,7 @@ cancel_thread (vec<jump_thread_edge *> *path, const char *reason = NULL)\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       if (reason)\n-\tfprintf (dump_file, \"%s:\\n\", reason);\n+\tfprintf (dump_file, \"%s: \", reason);\n \n       dump_jump_thread_path (dump_file, *path, false);\n       fprintf (dump_file, \"\\n\");\n@@ -2771,6 +2771,7 @@ jt_path_registry::cancel_invalid_paths (vec<jump_thread_edge *> &path)\n   bool seen_latch = false;\n   int loops_crossed = 0;\n   bool crossed_latch = false;\n+  bool crossed_loop_header = false;\n   // Use ->dest here instead of ->src to ignore the first block.  The\n   // first block is allowed to be in a different loop, since it'll be\n   // redirected.  See similar comment in profitable_path_p: \"we don't\n@@ -2804,6 +2805,14 @@ jt_path_registry::cancel_invalid_paths (vec<jump_thread_edge *> &path)\n \t  ++loops_crossed;\n \t}\n \n+      // ?? Avoid threading through loop headers that remain in the\n+      // loop, as such threadings tend to create sub-loops which\n+      // _might_ be OK ??.\n+      if (e->dest->loop_father->header == e->dest\n+\t  && !flow_loop_nested_p (exit->dest->loop_father,\n+\t\t\t\t  e->dest->loop_father))\n+\tcrossed_loop_header = true;\n+\n       if (flag_checking && !m_backedge_threads)\n \tgcc_assert ((path[i]->e->flags & EDGE_DFS_BACK) == 0);\n     }\n@@ -2829,6 +2838,21 @@ jt_path_registry::cancel_invalid_paths (vec<jump_thread_edge *> &path)\n       cancel_thread (&path, \"Path crosses loops\");\n       return true;\n     }\n+  // The path should either start and end in the same loop or exit the\n+  // loop it starts in but never enter a loop.  This also catches\n+  // creating irreducible loops, not only rotation.\n+  if (entry->src->loop_father != exit->dest->loop_father\n+      && !flow_loop_nested_p (exit->src->loop_father,\n+\t\t\t      entry->dest->loop_father))\n+    {\n+      cancel_thread (&path, \"Path rotates loop\");\n+      return true;\n+    }\n+  if (crossed_loop_header)\n+    {\n+      cancel_thread (&path, \"Path crosses loop header but does not exit it\");\n+      return true;\n+    }\n   return false;\n }\n "}, {"sha": "de31d6436f5d2959e61413fdb42c2f78eee92713", "filename": "libgomp/testsuite/libgomp.graphite/force-parallel-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edfadfc7a9795b65177a50ce44fd348858e844/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edfadfc7a9795b65177a50ce44fd348858e844/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.graphite%2Fforce-parallel-5.c?ref=d8edfadfc7a9795b65177a50ce44fd348858e844", "patch": "@@ -31,6 +31,6 @@ int main(void)\n }\n \n /* Check that parallel code generation part make the right answer.  */\n-/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"2 loops carried no dependency\" 1 \"graphite\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.0\" 4 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"loopfn.1\" 4 \"optimized\" } } */"}]}