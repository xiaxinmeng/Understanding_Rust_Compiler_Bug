{"sha": "a56561ac2d88ea0bc0bb6551483c118358762842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2NTYxYWMyZDg4ZWEwYmMwYmI2NTUxNDgzYzExODM1ODc2Mjg0Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-10-29T18:38:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-10-29T18:38:31Z"}, "message": "Use perfect forwarding in std::function invokers.\n\n\t* include/std/functional: (_Function_base::_Function_base()): Use\n\tnullptr instead of literal zero.\n\t(function::operator=(nullptr_t)): Likewise.\n\t(_Function_handler::_M_invoke): Use perfect forwarding for _ArgTypes.\n\t(function::_Invoker_type): Likewise.\n\t* testsuite/20_util/function/invoke/forwarding.cc: New.\n\nFrom-SVN: r216849", "tree": {"sha": "70692bd39fb1147ca91c39c52dea645106e83937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70692bd39fb1147ca91c39c52dea645106e83937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a56561ac2d88ea0bc0bb6551483c118358762842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56561ac2d88ea0bc0bb6551483c118358762842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56561ac2d88ea0bc0bb6551483c118358762842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56561ac2d88ea0bc0bb6551483c118358762842/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2513a1f6d7817d96cb125125ed0cf96d37f4669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2513a1f6d7817d96cb125125ed0cf96d37f4669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2513a1f6d7817d96cb125125ed0cf96d37f4669"}], "stats": {"total": 85, "additions": 75, "deletions": 10}, "files": [{"sha": "08c44c3e552eb0796c94d0be71af55e48746ee15", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56561ac2d88ea0bc0bb6551483c118358762842/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56561ac2d88ea0bc0bb6551483c118358762842/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a56561ac2d88ea0bc0bb6551483c118358762842", "patch": "@@ -1,3 +1,12 @@\n+2014-10-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/functional: (_Function_base::_Function_base()): Use\n+\tnullptr instead of literal zero.\n+\t(function::operator=(nullptr_t)): Likewise.\n+\t(_Function_handler::_M_invoke): Use perfect forwarding for _ArgTypes.\n+\t(function::_Invoker_type): Likewise.\n+\t* testsuite/20_util/function/invoke/forwarding.cc: New.\n+\n 2014-10-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2014.xml: Update TS status."}, {"sha": "5bc2730c2f5f685f8a0c02c4f17f31bac5724d7a", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56561ac2d88ea0bc0bb6551483c118358762842/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56561ac2d88ea0bc0bb6551483c118358762842/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=a56561ac2d88ea0bc0bb6551483c118358762842", "patch": "@@ -1990,7 +1990,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \t}\n       };\n \n-    _Function_base() : _M_manager(0) { }\n+    _Function_base() : _M_manager(nullptr) { }\n \n     ~_Function_base()\n     {\n@@ -2019,7 +2019,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n     public:\n       static _Res\n-      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)\n+      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n \treturn (*_Base::_M_get_pointer(__functor))(\n \t    std::forward<_ArgTypes>(__args)...);\n@@ -2034,7 +2034,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n      public:\n       static void\n-      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)\n+      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n \t(*_Base::_M_get_pointer(__functor))(\n \t    std::forward<_ArgTypes>(__args)...);\n@@ -2049,7 +2049,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n      public:\n       static _Res\n-      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)\n+      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n \treturn __callable_functor(**_Base::_M_get_pointer(__functor))(\n \t      std::forward<_ArgTypes>(__args)...);\n@@ -2064,7 +2064,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n      public:\n       static void\n-      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)\n+      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n \t__callable_functor(**_Base::_M_get_pointer(__functor))(\n \t    std::forward<_ArgTypes>(__args)...);\n@@ -2081,7 +2081,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n      public:\n       static _Res\n-      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)\n+      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n \treturn std::mem_fn(_Base::_M_get_pointer(__functor)->__value)(\n \t    std::forward<_ArgTypes>(__args)...);\n@@ -2121,7 +2121,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n       }\n \n       static void\n-      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)\n+      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)\n       {\n \tstd::mem_fn(_Base::_M_get_pointer(__functor)->__value)(\n \t    std::forward<_ArgTypes>(__args)...);\n@@ -2275,8 +2275,8 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \tif (_M_manager)\n \t  {\n \t    _M_manager(_M_functor, _M_functor, __destroy_functor);\n-\t    _M_manager = 0;\n-\t    _M_invoker = 0;\n+\t    _M_manager = nullptr;\n+\t    _M_invoker = nullptr;\n \t  }\n \treturn *this;\n       }\n@@ -2395,7 +2395,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n #endif\n \n     private:\n-      typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);\n+      using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);\n       _Invoker_type _M_invoker;\n   };\n "}, {"sha": "b6e1b47fb4a983f907f620ff5b670d7aca4c2261", "filename": "libstdc++-v3/testsuite/20_util/function/invoke/forwarding.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56561ac2d88ea0bc0bb6551483c118358762842/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Finvoke%2Fforwarding.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56561ac2d88ea0bc0bb6551483c118358762842/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Finvoke%2Fforwarding.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2Finvoke%2Fforwarding.cc?ref=a56561ac2d88ea0bc0bb6551483c118358762842", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+struct Counted\n+{\n+  Counted() : count(0) { }\n+  Counted(const Counted& c) : count(c.count + 1) { }\n+  int count;\n+};\n+\n+int func(Counted c) { return c.count; }\n+\n+std::function<int(Counted)> f = func;\n+\n+void\n+test01()\n+{\n+  Counted c;\n+  int n = f(c);\n+  // 1 copy invoking function::operator() and 1 copy invoking func\n+  VERIFY( n == 2 );\n+}\n+\n+void\n+test02()\n+{\n+  int n = f(Counted{});\n+  // copy elided when invoking function::operator(), 1 copy invoking func\n+  VERIFY( n == 1 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}