{"sha": "8144d290d8ce582bbd50601b74dcfa811bae5c1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0NGQyOTBkOGNlNTgyYmJkNTA2MDFiNzRkY2ZhODExYmFlNWMxYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-04-07T16:38:11Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-04-07T16:38:11Z"}, "message": "re PR fortran/52893 (Moving functions out of implied DO loops)\n\n2012-04-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/52893\n\t* frontend-passes.c:  Keep track of wether we are in an implicit\n\tDO loop; do not do function elimination if we are.\n\n2012-04-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/52893\n\t* gfortran.dg/function_optimize_11.f90:  New test.\n\nFrom-SVN: r186213", "tree": {"sha": "b08aa45c1b30ee9777563511b083ff3029bd0c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b08aa45c1b30ee9777563511b083ff3029bd0c04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8144d290d8ce582bbd50601b74dcfa811bae5c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8144d290d8ce582bbd50601b74dcfa811bae5c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8144d290d8ce582bbd50601b74dcfa811bae5c1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8144d290d8ce582bbd50601b74dcfa811bae5c1c/comments", "author": null, "committer": null, "parents": [{"sha": "fae61228ca65572ed01a23819be585b742bcfa62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae61228ca65572ed01a23819be585b742bcfa62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae61228ca65572ed01a23819be585b742bcfa62"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "2b9b03caae895f1f37e8e1282b421c0371e04651", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8144d290d8ce582bbd50601b74dcfa811bae5c1c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8144d290d8ce582bbd50601b74dcfa811bae5c1c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8144d290d8ce582bbd50601b74dcfa811bae5c1c", "patch": "@@ -1,3 +1,9 @@\n+2012-04-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/52893\n+\t* frontend-passes.c:  Keep track of wether we are in an implicit\n+\tDO loop; do not do function elimination if we are.\n+\n 2012-04-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/52668"}, {"sha": "b20dabbd33b24d432806b9574b7f992c1c52eef7", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8144d290d8ce582bbd50601b74dcfa811bae5c1c/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8144d290d8ce582bbd50601b74dcfa811bae5c1c/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=8144d290d8ce582bbd50601b74dcfa811bae5c1c", "patch": "@@ -70,6 +70,10 @@ static int forall_level;\n \n static bool in_omp_workshare;\n \n+/* Keep track of iterators for array constructors.  */\n+\n+static int iterator_level;\n+\n /* Entry point - run all passes for a namespace.  So far, only an\n    optimization pass is run.  */\n \n@@ -179,6 +183,13 @@ cfe_register_funcs (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n   if (forall_level > 0)\n     return 0;\n \n+  /* Function elimination inside an iterator could lead to functions which\n+     depend on iterator variables being moved outside.  FIXME: We should check\n+     if the functions do indeed depend on the iterator variable.  */\n+\n+  if (iterator_level > 0)\n+    return 0;\n+\n   /* If we don't know the shape at compile time, we create an allocatable\n      temporary variable to hold the intermediate result, but only if\n      allocation on assignment is active.  */\n@@ -581,6 +592,7 @@ optimize_namespace (gfc_namespace *ns)\n \n   current_ns = ns;\n   forall_level = 0;\n+  iterator_level = 0;\n   in_omp_workshare = false;\n \n   gfc_code_walker (&ns->code, convert_do_while, dummy_expr_callback, NULL);\n@@ -1140,9 +1152,13 @@ gfc_expr_walker (gfc_expr **e, walk_expr_fn_t exprfn, void *data)\n \t    for (c = gfc_constructor_first ((*e)->value.constructor); c;\n \t\t c = gfc_constructor_next (c))\n \t      {\n-\t\tWALK_SUBEXPR (c->expr);\n-\t\tif (c->iterator != NULL)\n+\t\tif (c->iterator == NULL)\n+\t\t  WALK_SUBEXPR (c->expr);\n+\t\telse\n \t\t  {\n+\t\t    iterator_level ++;\n+\t\t    WALK_SUBEXPR (c->expr);\n+\t\t    iterator_level --;\n \t\t    WALK_SUBEXPR (c->iterator->var);\n \t\t    WALK_SUBEXPR (c->iterator->start);\n \t\t    WALK_SUBEXPR (c->iterator->end);"}, {"sha": "77436679ee0b6e9c63f88a1cf5a8f80630091087", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8144d290d8ce582bbd50601b74dcfa811bae5c1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8144d290d8ce582bbd50601b74dcfa811bae5c1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8144d290d8ce582bbd50601b74dcfa811bae5c1c", "patch": "@@ -1,3 +1,8 @@\n+2012-04-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/52893\n+\t* gfortran.dg/function_optimize_11.f90:  New test.\n+\n 2012-04-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/52668"}, {"sha": "2e4831b4ee07369ac4ffa60506f995e35063dc58", "filename": "gcc/testsuite/gfortran.dg/function_optimize_11.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8144d290d8ce582bbd50601b74dcfa811bae5c1c/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8144d290d8ce582bbd50601b74dcfa811bae5c1c/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_11.f90?ref=8144d290d8ce582bbd50601b74dcfa811bae5c1c", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do run }\n+! { dg-options \"-ffrontend-optimize\" }\n+! Do not move common functions out of implicit DO loop constructors.\n+program test\n+  integer, parameter :: N = 4\n+  integer, parameter :: dp=kind(1.d0)\n+  real(kind=dp), parameter :: pi=4*atan(1._dp)\n+  real(kind=dp), parameter :: eps = 1.e-14_dp\n+  real(kind=dp) :: h1(0:N-1), h2(0:N-1)\n+  integer i\n+\n+  i = 1\n+  h1 = [(cos(2*pi*mod(i*k,N)/N),k=0,N/2), &\n+       & (sin(2*pi*mod(i*k,N)/N),k=1,N/2-1)]\n+  h2 = (/ 1._dp, 0._dp, -1._dp, 1._dp /)\n+  if (any(abs(h1 - h2) > eps)) call abort\n+end program test"}]}