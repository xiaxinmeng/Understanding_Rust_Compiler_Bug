{"sha": "1138cf593bb768234faf88f77ca26db0184b5d29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzOGNmNTkzYmI3NjgyMzRmYWY4OGY3N2NhMjZkYjAxODRiNWQyOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:56:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:56:42Z"}, "message": "[multiple changes]\n\n2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): new procedure\n\tCheck_Class_Wide_Actual, to implement AI05-0071, on defaulted\n\tprimitive operations of class-wide actuals.\n\n2011-08-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_atag.ads, exp_atag.adb\n\t(Build_Common_Dispatching_Select_Statements): Remove argument Loc\n\tsince its value is implicitly passed in argument Typ.\n\t* exp_disp.adb (Make_Disp_Conditional_Select_Body,\n\tMake_Disp_Timed_Select_Body): Remove Loc in calls to routine\n\tBuild_Common_Dispatching_Select_Statements.\n\nFrom-SVN: r177171", "tree": {"sha": "29e18c8b85c9bb3d5938a1782e532251b0715bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29e18c8b85c9bb3d5938a1782e532251b0715bcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1138cf593bb768234faf88f77ca26db0184b5d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1138cf593bb768234faf88f77ca26db0184b5d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1138cf593bb768234faf88f77ca26db0184b5d29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1138cf593bb768234faf88f77ca26db0184b5d29/comments", "author": null, "committer": null, "parents": [{"sha": "9b80d091af4760e4c8869917790bd01465b7a59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b80d091af4760e4c8869917790bd01465b7a59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b80d091af4760e4c8869917790bd01465b7a59e"}], "stats": {"total": 237, "additions": 225, "deletions": 12}, "files": [{"sha": "ac403b06621a3a4ba2ba52c54ca07fa4e58879ac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1138cf593bb768234faf88f77ca26db0184b5d29", "patch": "@@ -1,3 +1,18 @@\n+2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): new procedure\n+\tCheck_Class_Wide_Actual, to implement AI05-0071, on defaulted\n+\tprimitive operations of class-wide actuals.\n+\n+2011-08-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_atag.ads, exp_atag.adb\n+\t(Build_Common_Dispatching_Select_Statements): Remove argument Loc\n+\tsince its value is implicitly passed in argument Typ.\n+\t* exp_disp.adb (Make_Disp_Conditional_Select_Body,\n+\tMake_Disp_Timed_Select_Body): Remove Loc in calls to routine\n+\tBuild_Common_Dispatching_Select_Statements.\n+\n 2011-08-02  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, exp_atag.ads, get_scos.adb, get_scos.ads,"}, {"sha": "6e86dbcf4369c7814c995f18e083a9cdc8bc4aa8", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=1138cf593bb768234faf88f77ca26db0184b5d29", "patch": "@@ -71,10 +71,10 @@ package body Exp_Atag is\n    ------------------------------------------------\n \n    procedure Build_Common_Dispatching_Select_Statements\n-     (Loc    : Source_Ptr;\n-      Typ    : Entity_Id;\n+     (Typ    : Entity_Id;\n       Stmts  : List_Id)\n    is\n+      Loc      : constant Source_Ptr := Sloc (Typ);\n       Tag_Node : Node_Id;\n \n    begin"}, {"sha": "36382ead214ec50005429b3520c29cf2f41f952c", "filename": "gcc/ada/exp_atag.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2Fexp_atag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2Fexp_atag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.ads?ref=1138cf593bb768234faf88f77ca26db0184b5d29", "patch": "@@ -35,12 +35,11 @@ package Exp_Atag is\n    --  location used in constructing the corresponding nodes.\n \n    procedure Build_Common_Dispatching_Select_Statements\n-     (Loc   : Source_Ptr;\n-      Typ   : Entity_Id;\n+     (Typ   : Entity_Id;\n       Stmts : List_Id);\n-   --  Ada 2005 (AI-345): Generate statements that are common between timed,\n-   --  asynchronous, and conditional select expansion.\n-   --  Comments required saying what parameters mean ???\n+   --  Ada 2005 (AI-345): Build statements that are common to the expansion of\n+   --  timed, asynchronous, and conditional select and append them to Stmts.\n+   --  Typ is the tagged type used for dispatching calls.\n \n    procedure Build_CW_Membership\n      (Loc          : Source_Ptr;"}, {"sha": "553bb4dbdc3f664d626b990426ad51f674f91e0d", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=1138cf593bb768234faf88f77ca26db0184b5d29", "patch": "@@ -2623,7 +2623,7 @@ package body Exp_Disp is\n          --       return;\n          --    end if;\n \n-         Build_Common_Dispatching_Select_Statements (Loc, Typ, Stmts);\n+         Build_Common_Dispatching_Select_Statements (Typ, Stmts);\n \n          --  Generate:\n          --    Bnn : Communication_Block;\n@@ -3470,7 +3470,7 @@ package body Exp_Disp is\n          --       return;\n          --    end if;\n \n-         Build_Common_Dispatching_Select_Statements (Loc, Typ, Stmts);\n+         Build_Common_Dispatching_Select_Statements (Typ, Stmts);\n \n          --  Generate:\n          --    I := Get_Entry_Index (tag! (<type>VP), S);"}, {"sha": "a274109b87637ae5464f33860cb5bf5f4fc93b61", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 202, "deletions": 3, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1138cf593bb768234faf88f77ca26db0184b5d29/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=1138cf593bb768234faf88f77ca26db0184b5d29", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1614,6 +1614,179 @@ package body Sem_Ch8 is\n       --  before the subprogram it completes is frozen, and renaming indirectly\n       --  renames the subprogram itself.(Defect Report 8652/0027).\n \n+      function Check_Class_Wide_Actual return Entity_Id;\n+      --  AI05-0071: In an instance, if the actual for a formal type FT with\n+      --  unknown discriminants is a class-wide type CT, and the generic has\n+      --  a formal subprogram with a box for a primitive operation of FT,\n+      --  then the corresponding actual subprogram denoted by the default is a\n+      --  class-wide operation whose body is a dispatching call. We replace the\n+      --  generated renaming declaration:\n+      --\n+      --  procedure P (X : CT) renames P;\n+      --\n+      --  by a different renaming and a class-wide operation:\n+      --\n+      --  procedure Pr (X : T) renames P;   --  renames primitive operation\n+      --  procedure P (X : CT);             --  class-wide operation\n+      --  ...\n+      --  procedure P (X : CT) is begin Pr (X); end;  -- dispatching call\n+\n+      --  This rule only applies if there is no explicit visible class-wide\n+      --  operation at the point of the instantiation.\n+\n+      -----------------------------\n+      -- Check_Class_Wide_Actual --\n+      -----------------------------\n+\n+      function Check_Class_Wide_Actual return Entity_Id is\n+         Loc : constant Source_Ptr := Sloc (N);\n+\n+         F           : Entity_Id;\n+         Formal_Type : Entity_Id;\n+         Actual_Type : Entity_Id;\n+         New_Body    : Node_Id;\n+         New_Decl    : Node_Id;\n+         Result      : Entity_Id;\n+\n+         function Make_Call (Prim_Op : Entity_Id) return Node_Id;\n+         --  Build dispatching call for body of class-wide operation\n+\n+         function Make_Spec return Node_Id;\n+         --  Create subprogram specification for declaration and body of\n+         --  class-wide operation, using signature of renaming declaration.\n+\n+         ---------------\n+         -- Make_Call --\n+         ---------------\n+\n+         function Make_Call (Prim_Op : Entity_Id) return Node_Id is\n+            Actuals : List_Id;\n+            F       : Node_Id;\n+\n+         begin\n+            Actuals := New_List;\n+            F := First (Parameter_Specifications (Specification (New_Decl)));\n+            while Present (F) loop\n+               Append_To (Actuals,\n+                 Make_Identifier (Loc, Chars (Defining_Identifier (F))));\n+               Next (F);\n+            end loop;\n+\n+            if Ekind (Prim_Op) = E_Function then\n+               return Make_Simple_Return_Statement (Loc,\n+                  Expression =>\n+                    Make_Function_Call (Loc,\n+                      Name => New_Occurrence_Of (Prim_Op, Loc),\n+                      Parameter_Associations => Actuals));\n+            else\n+               return\n+                 Make_Procedure_Call_Statement (Loc,\n+                      Name => New_Occurrence_Of (Prim_Op, Loc),\n+                      Parameter_Associations => Actuals);\n+            end if;\n+         end Make_Call;\n+\n+         ---------------\n+         -- Make_Spec --\n+         ---------------\n+\n+         function Make_Spec return Node_Id is\n+            Param_Specs : constant List_Id := Copy_Parameter_List (New_S);\n+\n+         begin\n+            if Ekind (New_S) = E_Procedure then\n+               return\n+                 Make_Procedure_Specification (Loc,\n+                   Defining_Unit_Name =>\n+                     Make_Defining_Identifier (Loc,\n+                       Chars (Defining_Unit_Name (Spec))),\n+                   Parameter_Specifications => Param_Specs);\n+            else\n+               return\n+                  Make_Function_Specification (Loc,\n+                    Defining_Unit_Name =>\n+                      Make_Defining_Identifier (Loc,\n+                        Chars (Defining_Unit_Name (Spec))),\n+                    Parameter_Specifications => Param_Specs,\n+                    Result_Definition =>\n+                      New_Copy_Tree (Result_Definition (Spec)));\n+            end if;\n+         end Make_Spec;\n+\n+      --  Start of processing for Check_Class_Wide_Actual\n+\n+      begin\n+         Result := Any_Id;\n+         Formal_Type := Empty;\n+         Actual_Type := Empty;\n+\n+         F := First_Formal (Formal_Spec);\n+         while Present (F) loop\n+            if Has_Unknown_Discriminants (Etype (F))\n+              and then Is_Class_Wide_Type (Get_Instance_Of (Etype (F)))\n+            then\n+               Formal_Type := Etype (F);\n+               Actual_Type := Etype (Get_Instance_Of (Formal_Type));\n+               exit;\n+            end if;\n+\n+            Next_Formal (F);\n+         end loop;\n+\n+         if Present (Formal_Type) then\n+\n+            --  Create declaration and body for class-wide operation\n+\n+            New_Decl :=\n+              Make_Subprogram_Declaration (Loc, Specification => Make_Spec);\n+\n+            New_Body :=\n+              Make_Subprogram_Body (Loc,\n+                Specification => Make_Spec,\n+                Declarations => No_List,\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc, New_List));\n+\n+            --  Modify Spec and create internal name for renaming of primitive\n+            --  operation.\n+\n+            Set_Defining_Unit_Name (Spec, Make_Temporary (Loc, 'R'));\n+            F := First (Parameter_Specifications (Spec));\n+            while Present (F) loop\n+               if Nkind (Parameter_Type (F)) = N_Identifier\n+                 and then Is_Class_Wide_Type (Entity (Parameter_Type (F)))\n+               then\n+                  Set_Parameter_Type (F, New_Occurrence_Of (Actual_Type, Loc));\n+               end if;\n+               Next (F);\n+            end loop;\n+\n+            New_S := Analyze_Subprogram_Specification (Spec);\n+            Result :=  Find_Renamed_Entity (N, Name (N), New_S, Is_Actual);\n+         end if;\n+\n+         if Result /= Any_Id then\n+            Insert_Before (N, New_Decl);\n+            Analyze (New_Decl);\n+\n+            --  Add dispatching call to body of class-wide operation\n+\n+            Append (Make_Call (Result),\n+              Statements (Handled_Statement_Sequence (New_Body)));\n+\n+            --  The generated body does not freeze. It is analyzed when the\n+            --  generated operation is frozen.\n+\n+            Append_Freeze_Action (Defining_Entity (New_Decl), New_Body);\n+\n+            Result := Defining_Entity (New_Decl);\n+         end if;\n+\n+         --  Return the class-wide operation if one was created.\n+\n+         return Result;\n+      end Check_Class_Wide_Actual;\n+\n       --------------------------\n       -- Check_Null_Exclusion --\n       --------------------------\n@@ -2190,6 +2363,16 @@ package body Sem_Ch8 is\n          end if;\n       end if;\n \n+      --  If no renamed entity was found, check whether the renaming is for\n+      --  a defaulted actual subprogram with a class-wide actual.\n+\n+      if Old_S = Any_Id\n+        and then Is_Actual\n+        and then From_Default (N)\n+      then\n+         Old_S := Check_Class_Wide_Actual;\n+      end if;\n+\n       if Old_S /= Any_Id then\n          if Is_Actual\n            and then From_Default (N)\n@@ -2246,7 +2429,20 @@ package body Sem_Ch8 is\n             end if;\n \n          elsif Ekind (Old_S) /= E_Operator then\n-            Check_Mode_Conformant (New_S, Old_S);\n+\n+            --  If this is a default subprogram, it may be for a class-wide\n+            --  actual, in which case there is no check for mode conformance,\n+            --  given that the signatures do not match (the source mentions T,\n+            --  but the actual mentions T'Class).\n+\n+            if  Is_Actual\n+              and then From_Default (N)\n+            then\n+               null;\n+\n+            else\n+               Check_Mode_Conformant (New_S, Old_S);\n+            end if;\n \n             if Is_Actual\n               and then Error_Posted (New_S)\n@@ -5319,7 +5515,10 @@ package body Sem_Ch8 is\n          end loop;\n \n          Set_Entity (Nam, Old_S);\n-         Set_Is_Overloaded (Nam, False);\n+\n+         if Old_S /= Any_Id then\n+            Set_Is_Overloaded (Nam, False);\n+         end if;\n       end if;\n \n       return Old_S;"}]}