{"sha": "ef16a2989a6f7dabcfb5001f7115b044407e0917", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxNmEyOTg5YTZmN2RhYmNmYjUwMDFmNzExNWIwNDQ0MDdlMDkxNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-06-14T05:38:04Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-06-14T05:38:04Z"}, "message": "i686-pc-linux-gnu: To..\n\n\n2003-06-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/abi/i686-pc-linux-gnu: To..\n\t* config/abi/i486-linux-gnu: ...this.\n\t* config/abi/alphaev67-unknown-linux-gnu: To..\n\t* config/abi/alpha-linux-gnu: ...this.\n\t* config/abi/ia64-unknown-linux-gnu: To...\n\t* config/abi/ia64-linux-gnu: ...this.\n\t* config/abi/x86_64-unknown-linux-gnu: To...\n\t* config/abi/x86_64-linux-gnu: ...this.\n\t* config/abi/i386-unknown-freebsd4: To...\n\t* config/abi/i386-freebsd4: ...this.\n\t* configure.host: abi_baseline_triplet to abi_baseline_pair.\n\tSimplify cpu bits so that abi_baseline_pair can use the same\n\tcpu configuration.\n\t* acinclude.m4: Same.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: Can't get enable_abi_check to yes unless native.\n\t* configure: Regenerate.\n\nFrom-SVN: r67931", "tree": {"sha": "c3863a4012229106c9ef826b00b9b301e3c2abc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3863a4012229106c9ef826b00b9b301e3c2abc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef16a2989a6f7dabcfb5001f7115b044407e0917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef16a2989a6f7dabcfb5001f7115b044407e0917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef16a2989a6f7dabcfb5001f7115b044407e0917", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef16a2989a6f7dabcfb5001f7115b044407e0917/comments", "author": null, "committer": null, "parents": [{"sha": "333991cfa262324ec3551ffc0262086bea1477a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/333991cfa262324ec3551ffc0262086bea1477a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/333991cfa262324ec3551ffc0262086bea1477a0"}], "stats": {"total": 117, "additions": 70, "deletions": 47}, "files": [{"sha": "115828554c2df5839a65c64969d17aa87cac8c68", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "patch": "@@ -1,3 +1,23 @@\n+2003-06-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/abi/i686-pc-linux-gnu: To..\n+\t* config/abi/i486-linux-gnu: ...this.\n+\t* config/abi/alphaev67-unknown-linux-gnu: To..\n+\t* config/abi/alpha-linux-gnu: ...this.\n+\t* config/abi/ia64-unknown-linux-gnu: To...\n+\t* config/abi/ia64-linux-gnu: ...this.\n+\t* config/abi/x86_64-unknown-linux-gnu: To...\n+\t* config/abi/x86_64-linux-gnu: ...this.\n+\t* config/abi/i386-unknown-freebsd4: To...\n+\t* config/abi/i386-freebsd4: ...this.\n+\t* configure.host: abi_baseline_triplet to abi_baseline_pair.\n+\tSimplify cpu bits so that abi_baseline_pair can use the same\n+\tcpu configuration.\n+\t* acinclude.m4: Same.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: Can't get enable_abi_check to yes unless native.\n+\t* configure: Regenerate.\n+\n 2003-06-13  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/27_io/basic_filebuf/seekoff/char/1.cc: Split and\n@@ -42,7 +62,7 @@\n         This is necessary here because _M_mutate is sometimes called with\n         all-zero arguments; in all other uses of _M_is_shared, the test comes\n         out right anyhow.\n-\n+\t\n 2003-06-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/allocator-inst.cc: Explicitly instantiate."}, {"sha": "f7844912aa635eb049945b9b2026f50f68304603", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "patch": "@@ -2055,7 +2055,7 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n \n   # Export file names for ABI checking.\n-  baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_triplet}/baseline_symbols.txt\"\n+  baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_pair}/baseline_symbols.txt\"\n   AC_SUBST(baseline_file)\n \n   dnl XXX move to configure.host?"}, {"sha": "4e255d0abba88ae7f921344504ee4a47bf4d13a9", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "patch": "@@ -2067,7 +2067,7 @@ AC_DEFUN(GLIBCPP_CONFIGURE_TESTSUITE, [\n   GLIBCPP_CHECK_STDLIB_DECL_AND_LINKAGE_3(setenv)\n \n   # Export file names for ABI checking.\n-  baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_triplet}/baseline_symbols.txt\"\n+  baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_pair}/baseline_symbols.txt\"\n   AC_SUBST(baseline_file)\n \n   dnl XXX move to configure.host?"}, {"sha": "b2df36d3bf7cf22cf11cfa6388e90cde89aac103", "filename": "libstdc++-v3/config/abi/alpha-linux-gnu/baseline_symbols.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Falpha-linux-gnu%2Fbaseline_symbols.txt?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "previous_filename": "libstdc++-v3/config/abi/alphaev67-unknown-linux-gnu/baseline_symbols.txt"}, {"sha": "c5b8fa0a739c383ba32dbb5faaebfeffea005535", "filename": "libstdc++-v3/config/abi/i386-freebsd4/baseline_symbols.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd4%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd4%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi386-freebsd4%2Fbaseline_symbols.txt?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "previous_filename": "libstdc++-v3/config/abi/i386-unknown-freebsd4/baseline_symbols.txt"}, {"sha": "be8fc9b94d113864ba1b4f9dcff1a34800e2f785", "filename": "libstdc++-v3/config/abi/i486-linux-gnu/baseline_symbols.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi486-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi486-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fi486-linux-gnu%2Fbaseline_symbols.txt?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "previous_filename": "libstdc++-v3/config/abi/i686-pc-linux-gnu/baseline_symbols.txt"}, {"sha": "eb729d3a2a06588e6002a5d3a1a8beae1c5cb112", "filename": "libstdc++-v3/config/abi/ia64-linux-gnu/baseline_symbols.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fia64-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fia64-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fia64-linux-gnu%2Fbaseline_symbols.txt?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "previous_filename": "libstdc++-v3/config/abi/ia64-unknown-linux-gnu/baseline_symbols.txt"}, {"sha": "15af15630dbb7a3d99904d51c7b9eb055f46a2b3", "filename": "libstdc++-v3/config/abi/x86_64-linux-gnu/baseline_symbols.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "previous_filename": "libstdc++-v3/config/abi/x86_64-unknown-linux-gnu/baseline_symbols.txt"}, {"sha": "3c97728eb76e3b1ef380df472428fe586c806471", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "patch": "@@ -23472,7 +23472,7 @@ done\n \n \n   # Export file names for ABI checking.\n-  baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_triplet}/baseline_symbols.txt\"\n+  baseline_file=\"${glibcpp_srcdir}/config/abi/${abi_baseline_pair}/baseline_symbols.txt\"\n   \n \n     case \"$target\" in\n@@ -23649,10 +23649,9 @@ else\n   GLIBCPP_TEST_WCHAR_T_TRUE='#'\n   GLIBCPP_TEST_WCHAR_T_FALSE=\n fi\t\n-# Don't do ABI checking unless native.\n \n \n-if ${GLIBCPP_IS_CROSS_COMPILING} && test \"$enable_abi_check\" = yes ; then\n+if test \"$enable_abi_check\" = yes; then\n   GLIBCPP_BUILD_ABI_CHECK_TRUE=\n   GLIBCPP_BUILD_ABI_CHECK_FALSE='#'\n else\n@@ -23724,7 +23723,7 @@ glibcpp_prefixdir=${prefix}\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:23728: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:23727: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -23748,7 +23747,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:23752: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:23751: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -23799,7 +23798,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:23803: checking for install location\" >&5\n+echo \"configure:23802: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n "}, {"sha": "98c0b606f61819bbc13f8a539726ac4beff7946c", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "patch": "@@ -17,27 +17,27 @@\n # It sets the following shell variables:\n #\n #   cpu_include_dir        CPU-specific directory, defaults to cpu/generic\n-#                              if cpu/host_cpu doesn't exist.  This is\n-#                              used to set ATOMICITYH.\n+#                          if cpu/host_cpu doesn't exist.  This is\n+#                          used to set ATOMICITYH.\n #\n #   os_include_dir         OS-specific directory, defaults to os/generic.\n #\n-#   c_model                the model to use for \"C\" headers, defaults to c_std.\n+#   c_model                the \"C\" header model, defaults to c_std.\n #\n #   c_compatibility        if \"C\" compatibility headers are necessary,\n-#                              defaults to no.\n+#                          defaults to no.\n #\n-#   abi_baseline_triplet   directory name for ABI compat testing,\n-#                              defaults to host (as per config.guess)\n+#   abi_baseline_pair      directory name for ABI compat testing,\n+#                          defaults to host_cpu-host_os (as per config.guess)\n #\n #   ATOMICITYH             location of atomicity.h,\n-#                              defaults to cpu_include_dir\n+#                          defaults to cpu_include_dir\n #\n # It possibly modifies the following variables:\n #\n #   OPT_LDFLAGS            extra flags to pass when linking the library, of\n-#                              the form '-Wl,blah'\n-#                              (defaults to empty in acinclude.m4)\n+#                          the form '-Wl,blah'\n+#                          (defaults to empty in acinclude.m4)\n #\n #\n # If the defaults will not work for your platform, you need only change the\n@@ -50,62 +50,70 @@\n # Try to guess a default cpu_include_dir based on the name of the CPU.  We\n # cannot do this for os_include_dir; there are too many portable operating\n # systems out there.  :-)\n-abi_baseline_triplet=${host}\n c_model=c_std\n c_compatibility=no\n-if test -d ${glibcpp_srcdir}/config/cpu/${host_cpu}; then\n-    cpu_include_dir=\"cpu/${host_cpu}\"\n-else\n-    cpu_include_dir=\"cpu/generic\"\n-fi\n \n \n # HOST-SPECIFIC OVERRIDES\n # Set any CPU-dependent bits.\n # Here we override defaults and catch more general cases due to naming\n # conventions (e.g., chip_name* to catch all variants).\n+if test -d ${glibcpp_srcdir}/config/cpu/${host_cpu}; then\n+  try_cpu=${host_cpu}\n+fi\n+\n # THIS TABLE IS SORTED.  KEEP IT THAT WAY.\n case \"${host_cpu}\" in\n   alpha*)\n-    cpu_include_dir=\"cpu/alpha\"\n+    try_cpu=alpha\n     ;;\n   athlon* | i586 | i686 | i786 | x86_64)\n-    cpu_include_dir=\"cpu/i486\"\n+    try_cpu=i486\n     ;;\n   hppa*)\n-    cpu_include_dir=\"cpu/hppa\"\n+    try_cpu=hppa\n     ;;\n   mips*)\n-    # cpu/mips/atomicity.h needs MIPS II or above.  Only use it\n-    # where it is known to be safe.\n-    ATOMICITYH=\"cpu/generic\"\n+    # NB: cpu/mips/atomicity.h needs MIPS II or above.  \n+    # Of course, there is no sane way to test for this, no ABI macro,\n+    # and no consistent host_cpu name differentiation. Therefore, only\n+    # use it where it is known to be safe, ie it runs linux (see below).\n+    try_cpu=generic\n     ;;\n   m680[246]0)\n-    cpu_include_dir=\"cpu/m68k\"\n+    try_cpu=m68k\n     ;;\n   powerpc* | rs6000)\n-    cpu_include_dir=\"cpu/powerpc\"\n+    try_cpu=powerpc\n     ;;\n   s390x)\n-    cpu_include_dir=\"cpu/s390\"\n+    try_cpu=s390\n     ;;\n   sparc* | ultrasparc)\n-    cpu_include_dir=\"cpu/sparc\"\n+    try_cpu=sparc\n+    ;;\n+  *)\n+    try_cpu=generic\n     ;;\n esac\n \n \n # Now look for the file(s) usually tied to a CPU model, and make default\n # choices for those if they haven't been explicitly set already.\n-_cpu_incdir_fullpath=${glibcpp_srcdir}/config/${cpu_include_dir}\n-if test x${ATOMICITYH+set} != xset; then\n-  if test -f ${_cpu_incdir_fullpath}/atomicity.h; then\n-    ATOMICITYH=$cpu_include_dir\n-  else\n-    ATOMICITYH=\"cpu/generic\"\n-  fi\n+cpu_include_dir=\"cpu/${try_cpu}\"  \n+ATOMICITYH=$cpu_include_dir\n+\n+\n+# Check whether ABI baseline file exists, if not try to guess name.\n+abi_baseline_pair=${try_cpu}-${host_os}\n+try_baseline_file=config/abi/${abi_baseline_pair}/baseline_symbols.txt\n+if test ! -e ${glibcpp_srcdir}/${try_baseline_file} ; then\n+  case \"${host}\" in\n+    i*86-*-freebsd4*)\n+      abi_baseline_pair=\"i386-freebsd4\"\n+      ;;\n+  esac  \n fi\n-unset _cpu_incdir_fullpath\n \n \n # Set any OS-dependent bits.\n@@ -141,8 +149,6 @@ case \"${host_os}\" in\n     ;;\n   freebsd*)\n     os_include_dir=\"os/bsd/freebsd\"\n-    # The FreeBSD ABI is expressed in the major version number only.\n-    abi_baseline_triplet=`echo ${host} | sed 's,\\(\\.[0-9]*\\)*$,,'`\n     ;;\n   gnu* | linux*)\n     os_include_dir=\"os/gnu-linux\""}, {"sha": "c5fa8fcac3fb0b85e8a59b7bfad3d02e25cec08d", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef16a2989a6f7dabcfb5001f7115b044407e0917/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=ef16a2989a6f7dabcfb5001f7115b044407e0917", "patch": "@@ -455,9 +455,7 @@ AM_CONDITIONAL(GLIBCPP_BUILD_LIBMATH,  test \"$need_libmath\" = yes)\n dnl from GLIBCPP_CHECK_WCHAR_T_SUPPORT:\n AM_CONDITIONAL(GLIBCPP_TEST_WCHAR_T, test \"$enable_wchar_t\" = yes)\t\n dnl from GLIBCPP_CONFIGURE_TESTSUITE:\n-# Don't do ABI checking unless native.\n-AM_CONDITIONAL(GLIBCPP_BUILD_ABI_CHECK,\n-               ${GLIBCPP_IS_CROSS_COMPILING} && test \"$enable_abi_check\" = yes )\n+AM_CONDITIONAL(GLIBCPP_BUILD_ABI_CHECK, test \"$enable_abi_check\" = yes)\n  \n AC_CACHE_SAVE\n "}]}