{"sha": "75d3e6e37211c3614d576e7d748f50e55cb169fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkM2U2ZTM3MjExYzM2MTRkNTc2ZTdkNzQ4ZjUwZTU1Y2IxNjlmZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-08-05T20:52:03Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-08-05T20:52:03Z"}, "message": "re PR middle-end/49500 (gcc.dg/tls/alias-1.c)\n\n\n\tPR middle-end/49500\n\t* tree-emultls.c (new_emutls_decl):Add alias_of parameter;\n\thandle aliases.\n\t(create_emultls_var):New function.\n\t(ipa_lower_emutls): Handle aliases correctly.\n\nFrom-SVN: r177483", "tree": {"sha": "02153d0b45e4c8f7e24b2a64ad2e65578c699730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02153d0b45e4c8f7e24b2a64ad2e65578c699730"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75d3e6e37211c3614d576e7d748f50e55cb169fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d3e6e37211c3614d576e7d748f50e55cb169fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75d3e6e37211c3614d576e7d748f50e55cb169fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75d3e6e37211c3614d576e7d748f50e55cb169fd/comments", "author": null, "committer": null, "parents": [{"sha": "f791d3338777d809968269219240a037fba0a57c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f791d3338777d809968269219240a037fba0a57c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f791d3338777d809968269219240a037fba0a57c"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "c28baac1f4a1fb9219a8bae65a61c0f0283a3384", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d3e6e37211c3614d576e7d748f50e55cb169fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d3e6e37211c3614d576e7d748f50e55cb169fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75d3e6e37211c3614d576e7d748f50e55cb169fd", "patch": "@@ -1,3 +1,11 @@\n+2011-08-05  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR middle-end/49500\n+\t* tree-emultls.c (new_emutls_decl):Add alias_of parameter;\n+\thandle aliases.\n+\t(create_emultls_var):New function.\n+\t(ipa_lower_emutls): Handle aliases correctly.\n+\n 2011-08-05  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/49735"}, {"sha": "c8203f0575210ae57eb1847d04ddd001961f1cf0", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75d3e6e37211c3614d576e7d748f50e55cb169fd/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75d3e6e37211c3614d576e7d748f50e55cb169fd/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=75d3e6e37211c3614d576e7d748f50e55cb169fd", "patch": "@@ -269,7 +269,7 @@ get_emutls_init_templ_addr (tree decl)\n /* Create and return the control variable for the TLS variable DECL.  */\n \n static tree\n-new_emutls_decl (tree decl)\n+new_emutls_decl (tree decl, tree alias_of)\n {\n   tree name, to;\n \n@@ -333,8 +333,12 @@ new_emutls_decl (tree decl)\n      not external one.  */\n   if (DECL_EXTERNAL (to))\n     varpool_node (to);\n-  else\n+  else if (!alias_of)\n     varpool_finalize_decl (to);\n+  else \n+    varpool_create_variable_alias (to,\n+\t\t\t\t   varpool_node_for_asm\n+\t\t\t\t    (DECL_ASSEMBLER_NAME (alias_of))->decl);\n   return to;\n }\n \n@@ -688,6 +692,40 @@ lower_emutls_function_body (struct cgraph_node *node)\n   current_function_decl = NULL;\n }\n \n+/* Create emutls variable for VAR, DATA is pointer to static\n+   ctor body we can add constructors to.\n+   Callback for varpool_for_variable_and_aliases.  */\n+\n+static bool\n+create_emultls_var (struct varpool_node *var, void *data)\n+{\n+  tree cdecl;\n+  struct varpool_node *cvar;\n+\n+  cdecl = new_emutls_decl (var->decl, var->alias_of);\n+\n+  cvar = varpool_get_node (cdecl);\n+  VEC_quick_push (varpool_node_ptr, control_vars, cvar);\n+\n+  if (!var->alias)\n+    {\n+      /* Make sure the COMMON block control variable gets initialized.\n+\t Note that there's no point in doing this for aliases; we only\n+\t need to do this once for the main variable.  */\n+      emutls_common_1 (var->decl, cdecl, (tree *)data);\n+    }\n+  if (var->alias && !var->alias_of)\n+    cvar->alias = true;\n+\n+  /* Indicate that the value of the TLS variable may be found elsewhere,\n+     preventing the variable from re-appearing in the GIMPLE.  We cheat\n+     and use the control variable here (rather than a full call_expr),\n+     which is special-cased inside the DWARF2 output routines.  */\n+  SET_DECL_VALUE_EXPR (var->decl, cdecl);\n+  DECL_HAS_VALUE_EXPR_P (var->decl) = 1;\n+  return false;\n+}\n+\n /* Main entry point to the tls lowering pass.  */\n \n static unsigned int\n@@ -708,6 +746,8 @@ ipa_lower_emutls (void)\n \tgcc_checking_assert (TREE_STATIC (var->decl)\n \t\t\t     || DECL_EXTERNAL (var->decl));\n \tvarpool_node_set_add (tls_vars, var);\n+\tif (var->alias && var->analyzed)\n+\t  varpool_node_set_add (tls_vars, varpool_variable_node (var, NULL));\n       }\n \n   /* If we found no TLS variables, then there is no further work to do.  */\n@@ -728,34 +768,12 @@ ipa_lower_emutls (void)\n   /* Create the control variables for each TLS variable.  */\n   FOR_EACH_VEC_ELT (varpool_node_ptr, tls_vars->nodes, i, var)\n     {\n-      tree cdecl;\n-      struct varpool_node *cvar;\n-\n       var = VEC_index (varpool_node_ptr, tls_vars->nodes, i);\n-      cdecl = new_emutls_decl (var->decl);\n-\n-      cvar = varpool_get_node (cdecl);\n-      VEC_quick_push (varpool_node_ptr, control_vars, cvar);\n-\n-      if (var->alias)\n-\t{\n-\t  any_aliases = true;\n-\t  cvar->alias = true;\n-\t}\n-      else\n-\t{\n-\t  /* Make sure the COMMON block control variable gets initialized.\n-\t     Note that there's no point in doing this for aliases; we only\n-\t     need to do this once for the main variable.  */\n-          emutls_common_1 (var->decl, cdecl, &ctor_body);\n-\t}\n \n-      /* Indicate that the value of the TLS variable may be found elsewhere,\n-\t preventing the variable from re-appearing in the GIMPLE.  We cheat\n-\t and use the control variable here (rather than a full call_expr),\n-\t which is special-cased inside the DWARF2 output routines.  */\n-      SET_DECL_VALUE_EXPR (var->decl, cdecl);\n-      DECL_HAS_VALUE_EXPR_P (var->decl) = 1;\n+      if (var->alias && !var->alias_of)\n+\tany_aliases = true;\n+      else if (!var->alias)\n+\tvarpool_for_node_and_aliases (var, create_emultls_var, &ctor_body, true);\n     }\n \n   /* If there were any aliases, then frob the alias_pairs vector.  */"}]}