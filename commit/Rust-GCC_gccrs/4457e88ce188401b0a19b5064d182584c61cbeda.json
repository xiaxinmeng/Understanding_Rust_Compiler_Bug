{"sha": "4457e88ce188401b0a19b5064d182584c61cbeda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1N2U4OGNlMTg4NDAxYjBhMTliNTA2NGQxODI1ODRjNjFjYmVkYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-11-05T22:57:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-11-05T22:57:36Z"}, "message": "N3655 C++1y TransformationTraits Redux\n\n\tN3655 C++1y TransformationTraits Redux\n\t* include/std/type_traits (remove_const_t, remove_volatile_t,\n\tremove_cv_t, add_const_t, add_volatile_t, add_cv_t, remove_reference_t,\n\tadd_lvalue_reference_t, add_rvalue_reference_t, make_signed_t,\n\tmake_unsigned_t, remove_extent_t, remove_all_extents_t,\n\tremove_pointer_t, add_pointer_t, aligned_storage_t, decay_t,\n\tenable_if_t, conditional_t, common_type_t, underlying_type_t,\n\tresult_of_t): Define.\n\t* doc/xml/manual/status_cxx2014.xml: Update.\n\t* testsuite/20_util/add_lvalue_reference/requirements/typedefs-3.cc:\n\tNew.\n\t* testsuite/20_util/add_rvalue_reference/requirements/typedefs-3.cc:\n\tNew.\n\t* testsuite/20_util/common_type/requirements/typedefs-3.cc: New.\n\t* testsuite/20_util/conditional/requirements/typedefs-2.cc: New.\n\t* testsuite/20_util/decay/requirements/typedefs-2.cc: New.\n\t* testsuite/20_util/enable_if/requirements/typedefs-2.cc: New.\n\t* testsuite/20_util/make_signed/requirements/typedefs-3.cc: New.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs-3.cc: New.\n\t* testsuite/20_util/remove_reference/requirements/typedefs.cc: New.\n\t* testsuite/20_util/result_of/requirements/typedefs.cc: New.\n\t* testsuite/20_util/underlying_type/requirements/typedefs-3.cc: New.\n\t* testsuite/20_util/common_type/requirements/typedefs-2.cc: Change to\n\tcompile-only test.\n\t* testsuite/20_util/decay/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Likewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tline number.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r204426", "tree": {"sha": "b0d6535dd1ada66926860de44362b9305aace72b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d6535dd1ada66926860de44362b9305aace72b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4457e88ce188401b0a19b5064d182584c61cbeda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4457e88ce188401b0a19b5064d182584c61cbeda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4457e88ce188401b0a19b5064d182584c61cbeda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4457e88ce188401b0a19b5064d182584c61cbeda/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592a16fca09f8a595037e8b693f698a95390c899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592a16fca09f8a595037e8b693f698a95390c899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592a16fca09f8a595037e8b693f698a95390c899"}], "stats": {"total": 653, "additions": 563, "deletions": 90}, "files": [{"sha": "4253a8025333e7710744141ad890f26f2a0a711e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -1,3 +1,38 @@\n+2013-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tN3655 C++1y TransformationTraits Redux\n+\t* include/std/type_traits (remove_const_t, remove_volatile_t,\n+\tremove_cv_t, add_const_t, add_volatile_t, add_cv_t, remove_reference_t,\n+\tadd_lvalue_reference_t, add_rvalue_reference_t, make_signed_t,\n+\tmake_unsigned_t, remove_extent_t, remove_all_extents_t,\n+\tremove_pointer_t, add_pointer_t, aligned_storage_t, decay_t,\n+\tenable_if_t, conditional_t, common_type_t, underlying_type_t,\n+\tresult_of_t): Define.\n+\t* doc/xml/manual/status_cxx2014.xml: Update.\n+\t* testsuite/20_util/add_lvalue_reference/requirements/typedefs-3.cc:\n+\tNew.\n+\t* testsuite/20_util/add_rvalue_reference/requirements/typedefs-3.cc:\n+\tNew.\n+\t* testsuite/20_util/common_type/requirements/typedefs-3.cc: New.\n+\t* testsuite/20_util/conditional/requirements/typedefs-2.cc: New.\n+\t* testsuite/20_util/decay/requirements/typedefs-2.cc: New.\n+\t* testsuite/20_util/enable_if/requirements/typedefs-2.cc: New.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-3.cc: New.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs-3.cc: New.\n+\t* testsuite/20_util/remove_reference/requirements/typedefs.cc: New.\n+\t* testsuite/20_util/result_of/requirements/typedefs.cc: New.\n+\t* testsuite/20_util/underlying_type/requirements/typedefs-3.cc: New.\n+\t* testsuite/20_util/common_type/requirements/typedefs-2.cc: Change to\n+\tcompile-only test.\n+\t* testsuite/20_util/decay/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs-1.cc: Likewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tline number.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2013-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/status_cxx2011.xml: Document aligned_union as"}, {"sha": "0e0ac37a9e857d363fa2ab7e577565a0f3ede4cf", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2014.xml", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -178,7 +178,6 @@ particular release.\n \n \n     <row>\n-      <?dbhtml bgcolor=\"#C8C8B0\" ?>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2013/n3658.html\">\n \t  N3658\n@@ -202,7 +201,6 @@ particular release.\n \n \n     <row>\n-      <?dbhtml bgcolor=\"#C8C8B0\" ?>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2012/n3421.htm\">\n \t  N3421\n@@ -227,26 +225,24 @@ particular release.\n \n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry>\n-\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2013/n3672.html\">\n+\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2013/n3793.html\">\n \t  N3672\n \t</link>\n       </entry>\n       <entry>A proposal to add a utility class to represent optional objects</entry>\n-      <entry>N</entry>\n-      <entry/>\n+      <entry>Y</entry>\n+      <entry>Moved from C++14 to Library Fundamentals TS</entry>\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2013/n3655.pdf\">\n \t  N3655\n \t</link>\n       </entry>\n       <entry>TransformationTraits Redux</entry>\n-      <entry>N</entry>\n+      <entry>Y</entry>\n       <entry/>\n     </row>\n \n@@ -259,7 +255,7 @@ particular release.\n       </entry>\n       <entry>C++ Dynamic Arrays</entry>\n       <entry>N</entry>\n-      <entry/>\n+      <entry>Moved from C++14 to Library Fundamentals TS</entry>\n     </row>\n \n     <row>"}, {"sha": "3239564c64ed2643a4b2364f6ff891c35a915032", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -1438,6 +1438,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       add_const<typename add_volatile<_Tp>::type>::type     type;\n     };\n \n+#if __cplusplus > 201103L\n+  /// Alias template for remove_const\n+  template<typename _Tp>\n+    using remove_const_t = typename remove_const<_Tp>::type;\n+\n+  /// Alias template for remove_volatile\n+  template<typename _Tp>\n+    using remove_volatile_t = typename remove_volatile<_Tp>::type;\n+\n+  /// Alias template for remove_cv\n+  template<typename _Tp>\n+    using remove_cv_t = typename remove_cv<_Tp>::type;\n+\n+  /// Alias template for add_const\n+  template<typename _Tp>\n+    using add_const_t = typename add_const<_Tp>::type;\n+\n+  /// Alias template for add_volatile\n+  template<typename _Tp>\n+    using add_volatile_t = typename add_volatile<_Tp>::type;\n+\n+  /// Alias template for add_cv\n+  template<typename _Tp>\n+    using add_cv_t = typename add_cv<_Tp>::type;\n+#endif\n \n   // Reference transformations.\n \n@@ -1482,6 +1507,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __add_rvalue_reference_helper<_Tp>\n     { };\n \n+#if __cplusplus > 201103L\n+  /// Alias template for remove_reference\n+  template<typename _Tp>\n+    using remove_reference_t = typename remove_reference<_Tp>::type;\n+\n+  /// Alias template for add_lvalue_reference\n+  template<typename _Tp>\n+    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;\n+\n+  /// Alias template for add_rvalue_reference\n+  template<typename _Tp>\n+    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;\n+#endif\n \n   // Sign modifications.\n \n@@ -1679,6 +1717,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<>\n     struct make_signed<bool>;\n \n+#if __cplusplus > 201103L\n+  /// Alias template for make_signed\n+  template<typename _Tp>\n+    using make_signed_t = typename make_signed<_Tp>::type;\n+\n+  /// Alias template for make_unsigned\n+  template<typename _Tp>\n+    using make_unsigned_t = typename make_unsigned<_Tp>::type;\n+#endif\n \n   // Array modifications.\n \n@@ -1708,6 +1755,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct remove_all_extents<_Tp[]>\n     { typedef typename remove_all_extents<_Tp>::type     type; };\n \n+#if __cplusplus > 201103L\n+  /// Alias template for remove_extent\n+  template<typename _Tp>\n+    using remove_extent_t = typename remove_extent<_Tp>::type;\n+\n+  /// Alias template for remove_all_extents\n+  template<typename _Tp>\n+    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;\n+#endif\n \n   // Pointer modifications.\n \n@@ -1740,6 +1796,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __add_pointer_helper<_Tp>\n     { };\n \n+#if __cplusplus > 201103L\n+  /// Alias template for remove_pointer\n+  template<typename _Tp>\n+    using remove_pointer_t = typename remove_pointer<_Tp>::type;\n+\n+  /// Alias template for add_pointer\n+  template<typename _Tp>\n+    using add_pointer_t = typename add_pointer<_Tp>::type;\n+#endif\n \n   template<std::size_t _Len>\n     struct __aligned_storage_msa\n@@ -2102,6 +2167,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       >::type\n     { };\n \n+#if __cplusplus > 201103L\n+  /// Alias template for aligned_storage\n+  template<size_t _Len, size_t _Align =\n+\t    __alignof__(typename __aligned_storage_msa<_Len>::__type)>\n+    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;\n+\n+  /// Alias template for decay\n+  template<typename _Tp>\n+    using decay_t = typename decay<_Tp>::type;\n+\n+  /// Alias template for enable_if\n+  template<bool _Cond, typename _Tp = void>\n+    using enable_if_t = typename enable_if<_Cond, _Tp>::type;\n+\n+  /// Alias template for conditional\n+  template<bool _Cond, typename _Iftrue, typename _Iffalse>\n+    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;\n+\n+  /// Alias template for common_type\n+  template<typename... _Tp>\n+    using common_type_t = typename common_type<_Tp...>::type;\n+\n+  /// Alias template for underlying_type\n+  template<typename _Tp>\n+    using underlying_type_t = typename underlying_type<_Tp>::type;\n+\n+  /// Alias template for result_of\n+  template<typename _Tp>\n+    using result_of_t = typename result_of<_Tp>::type;\n+#endif\n+\n   /// @} group metaprogramming\n \t\n   /**"}, {"sha": "24e73cc23f3271290b361d45b3d7d246432e4f37", "filename": "libstdc++-v3/testsuite/20_util/add_lvalue_reference/requirements/typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_lvalue_reference%2Frequirements%2Ftypedefs.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+static_assert( is_same<typename add_lvalue_reference<long>::type,\n+                       add_lvalue_reference_t<long>>(),\n+               \"add_lvalue_reference_t\" );"}, {"sha": "18a6964c8e3f5d3ded5a15a156528d9aba17968e", "filename": "libstdc++-v3/testsuite/20_util/add_rvalue_reference/requirements/typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fadd_rvalue_reference%2Frequirements%2Ftypedefs.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+static_assert( is_same<typename add_rvalue_reference<long>::type,\n+                       add_rvalue_reference_t<long>>(),\n+               \"add_rvalue_reference_t\" );"}, {"sha": "f662d32d5db505f00b02a06fef9bb41581c0dafd", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/typedefs-2.cc", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-2.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n // 2009-11-12  Paolo Carlini  <paolo.carlini@oracle.com>\n //\n // Copyright (C) 2009-2013 Free Software Foundation, Inc.\n@@ -19,53 +20,53 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n \n // DR 1255.\n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::common_type;\n   using std::is_same;\n \n-  VERIFY( (is_same<common_type<void>::type, void>::value) );\n-  VERIFY( (is_same<common_type<const void>::type, void>::value) );\n-  VERIFY( (is_same<common_type<volatile void>::type, void>::value) );\n-  VERIFY( (is_same<common_type<const volatile void>::type, void>::value) );\n+  static_assert( is_same<common_type<void>::type, void>(),\n+                 \"common_type<void>\" );\n+  static_assert( is_same<common_type<const void>::type, void>(),\n+                 \"common_type<const void>\" );\n+  static_assert( is_same<common_type<volatile void>::type, void>(),\n+                 \"common_type<volatile void>\" );\n+  static_assert( is_same<common_type<const volatile void>::type, void>(),\n+                 \"common_type<const volatile void>\" );\n \n-  VERIFY( (is_same<common_type<void, void>::type, void>::value) );\n-  VERIFY( (is_same<common_type<void, const void>::type, void>::value) );\n-  VERIFY( (is_same<common_type<void, volatile void>::type, void>::value) );\n-  VERIFY( (is_same<common_type<void, const volatile void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<const void, void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<const void, const void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<const void, volatile void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<const void, const volatile void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<volatile void, void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<volatile void, volatile void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<volatile void, const void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<volatile void, const volatile void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<const volatile void, void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<const volatile void, const void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<const volatile void, volatile void>::type,\n-\t           void>::value) );\n-  VERIFY( (is_same<common_type<const volatile void, const volatile void>::type,\n-\t           void>::value) );\n- }\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert( is_same<common_type<void, void>::type, void>(),\n+                 \"common_type<void, void>\" );\n+  static_assert( is_same<common_type<void, const void>::type, void>(),\n+                 \"common_type<void, const void>\" );\n+  static_assert( is_same<common_type<void, volatile void>::type, void>(),\n+                 \"common_type<void, volatile void>\" );\n+  static_assert( is_same<common_type<void, const volatile void>::type, void>(),\n+                 \"common_type<void, const volatile void>\" );\n+  static_assert( is_same<common_type<const void, void>::type, void>(),\n+                 \"common_type<const void, void>\" );\n+  static_assert( is_same<common_type<const void, const void>::type, void>(),\n+                 \"common_type<const void, const void>\" );\n+  static_assert( is_same<common_type<const void, volatile void>::type, void>(),\n+                 \"common_type<const void, volatile void>\" );\n+  static_assert( is_same<common_type<const void, const volatile void>::type,\n+\t           void>(), \"common_type<const void, const volatile void>\" );\n+  static_assert( is_same<common_type<volatile void, void>::type, void>(),\n+                 \"common_type<volatile void, void>\" );\n+  static_assert( is_same<common_type<volatile void, volatile void>::type,\n+\t           void>(), \"common_type<volatile void, volatile void>\" );\n+  static_assert( is_same<common_type<volatile void, const void>::type,\n+\t           void>(), \"common_type<volatile void, const void>\" );\n+  static_assert( is_same<common_type<volatile void, const volatile void>::type,\n+\t           void>(), \"common_type<volatile void, const volatile void>\" );\n+  static_assert( is_same<common_type<const volatile void, void>::type, void>(),\n+\t         \"common_type<const volatile void, const volatile void>\" );\n+  static_assert( is_same<common_type<const volatile void, const void>::type,\n+\t           void>(), \"common_type<const volatile void, const void>\" );\n+  static_assert( is_same<common_type<const volatile void, volatile void>::type,\n+\t           void>(), \"common_type<const volatile void, volatile void>\" );\n+  static_assert( is_same<common_type<const volatile void, const volatile void>::type,\n+\t           void>(),\n+\t         \"common_type<const volatile void, const volatile void>\" );\n }"}, {"sha": "52852fcca76aef2297d090937df500392baad308", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/typedefs-3.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-3.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+static_assert( is_same<common_type<int, long, char, unsigned>::type,\n+                       common_type_t<int, long, char, unsigned>>(),\n+               \"common_type_t\" );"}, {"sha": "94edeea7fb3e708ad0f483b5d3880ac515092a35", "filename": "libstdc++-v3/testsuite/20_util/conditional/requirements/typedefs-2.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fconditional%2Frequirements%2Ftypedefs-2.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+static_assert( is_same<typename conditional<true, long, void>::type,\n+                       conditional_t<true, long, void>>(),\n+               \"conditional_t<true, ...>\" );\n+static_assert( is_same<typename conditional<false, long, void>::type,\n+                       conditional_t<false, long, void>>(),\n+               \"conditional_t<false, ...>\" );"}, {"sha": "774e22e2ff12a5e44175f6fb85864c49f3884a1c", "filename": "libstdc++-v3/testsuite/20_util/decay/requirements/typedefs-2.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs-2.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+template<typename Trait, typename Result>\n+  using test = is_same<typename Trait::type, Result>;\n+\n+static_assert( test<decay<bool>, decay_t<bool>>(), \"decay<bool>\" );\n+static_assert( test<decay<const int>, decay_t<const int>>(),\n+               \"decay<const int>\" );\n+static_assert( test<decay<int[4]>, decay_t<int[4]>>(), \"decay<int[4]>\" );\n+typedef void (fn_type) ();\n+static_assert( test<decay<fn_type>, decay_t<fn_type>>(), \"decay<fn_type>\" );\n+typedef void (cfn_type) () const;\n+static_assert( test<decay<cfn_type>, decay_t<cfn_type>>(), \"decay<cfn_type>\" );"}, {"sha": "11589e473f0145a59057c5681134fdedda753c98", "filename": "libstdc++-v3/testsuite/20_util/decay/requirements/typedefs.cc", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdecay%2Frequirements%2Ftypedefs.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n@@ -19,38 +20,31 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstdlib>\n #include <type_traits>\n-#include <testsuite_hooks.h>\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::decay;\n   using std::is_same;\n \n   // Positive tests.\n   typedef decay<bool>::type     \ttest1_type;\n-  VERIFY( (is_same<test1_type, bool>::value) );\n+  static_assert( is_same<test1_type, bool>(), \"decay<bool>\" );\n \n   // NB: DR 705.\n   typedef decay<const int>::type  \ttest2_type;\n-  VERIFY( (is_same<test2_type, int>::value) );\n+  static_assert( is_same<test2_type, int>(), \"decay<const int>\" );\n \n   typedef decay<int[4]>::type     \ttest3_type;\n-  VERIFY( (is_same<test3_type, std::remove_extent<int[4]>::type*>::value) );\n+  static_assert( is_same<test3_type, std::remove_extent<int[4]>::type*>(),\n+                 \"decay<int[4]>\" );\n \n   typedef void (fn_type) ();\n   typedef decay<fn_type>::type  \ttest4_type;\n-  VERIFY( (is_same<test4_type, std::add_pointer<fn_type>::type>::value) );\n+  static_assert( is_same<test4_type, std::add_pointer<fn_type>::type>(),\n+                 \"decay<fn_type>\" );\n \n   typedef void (cfn_type) () const;\n   typedef decay<cfn_type>::type  \ttest5_type;\n-  VERIFY( (is_same<test5_type, cfn_type>::value) );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n+  static_assert( is_same<test5_type, cfn_type>(), \"decay<cfn_type>\" );\n }"}, {"sha": "d01bdf31fa25bdd2ea2bc0070f737587e64edf81", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1938 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2003 }\n \n #include <utility>\n "}, {"sha": "42b7f4fe0190bbd4596dd56d5315ae329feaa74d", "filename": "libstdc++-v3/testsuite/20_util/enable_if/requirements/typedefs-2.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_if%2Frequirements%2Ftypedefs-2.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+static_assert( is_same<enable_if<true>::type, enable_if_t<true>>(),\n+               \"enable_if_t<true>\" );\n+struct X;\n+static_assert( is_same<enable_if<true, X>::type, enable_if_t<true, X>>(),\n+               \"enable_if_t<true, X>\" );"}, {"sha": "18791c6a9c9df8b13c2b04cac0e9b6f75a47a0d7", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-1.cc", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-1.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -1,4 +1,5 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // 2007-05-03  Benjamin Kosnik  <bkoz@redhat.com>\n //\n@@ -20,55 +21,57 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <type_traits>\n-#include <testsuite_hooks.h>\n \n enum test_enum { first_selection };\n \n void test01()\n {\n-  bool test __attribute__((unused)) = true;\n   using std::make_signed;\n   using std::is_same;\n   using std::is_signed;\n \n   // Positive tests.\n   typedef make_signed<const int>::type  \ttest2_type;\n-  VERIFY( (is_same<test2_type, const int>::value) );\n+  static_assert( is_same<test2_type, const int>::value,\n+                 \"make_signed<const int>\" );\n \n   typedef make_signed<const unsigned int>::type  \ttest21c_type;\n-  VERIFY( (is_same<test21c_type, const signed int>::value) );\n+  static_assert( is_same<test21c_type, const signed int>::value,\n+                 \"make_signed<const unsigned int>\" );\n \n   typedef make_signed<volatile unsigned int>::type  \ttest21v_type;\n-  VERIFY( (is_same<test21v_type, volatile signed int>::value) );\n+  static_assert( is_same<test21v_type, volatile signed int>::value,\n+                 \"make_signed<volatile unsigned int>\" );\n \n   typedef make_signed<const volatile unsigned int>::type  \ttest21cv_type;\n-  VERIFY( (is_same<test21cv_type, const volatile signed int>::value) );\n+  static_assert( is_same<test21cv_type, const volatile signed int>::value,\n+                 \"make_signed<const volatile unsigned int>\" );\n \n   typedef make_signed<const char>::type  \ttest22_type;\n-  VERIFY( (is_same<test22_type, const signed char>::value) );\n+  static_assert( is_same<test22_type, const signed char>::value,\n+                 \"make_signed<const char>\" );\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   typedef make_signed<volatile wchar_t>::type  \ttest23_type;\n-  VERIFY( (is_same<test23_type, volatile signed wchar_t>::value) );\n+  static_assert( is_same<test23_type, volatile signed wchar_t>::value,\n+                 \"make_signed<volatile wchar_t>\" );\n #endif\n \n   // Chapter 48, chapter 20. Smallest rank such that new signed type same size.\n   typedef make_signed<test_enum>::type  \ttest24_type;\n-  VERIFY( is_signed<test24_type>::value );\n-  VERIFY( sizeof(test24_type) == sizeof(test_enum) );\n+  static_assert( is_signed<test24_type>::value,\n+                 \"make_signed<test_enum> makes signed type\" );\n+  static_assert( sizeof(test24_type) == sizeof(test_enum),\n+                 \"make_signed<test_enum> makes type of same size\" );\n \n   // GNU Extensions.\n #ifdef _GLIBCXX_USE_INT128\n   typedef make_signed<unsigned __int128>::type  test25_type;\n-  VERIFY( (is_same<test25_type, __int128>::value) );\n+  static_assert( is_same<test25_type, __int128>::value,\n+                 \"make_signed<unsigned __int128>\" );\n \n   typedef make_signed<__int128>::type  \t        test26_type;\n-  VERIFY( (is_same<test26_type, __int128>::value) );\n+  static_assert( is_same<test26_type, __int128>::value,\n+                 \"make_signed<__int128>\" );\n #endif\n }\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "f76900403885f65bd97b4d7560112cf9902eae31", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs-3.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs-3.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+template<typename Trait, typename Result>\n+  using test = is_same<typename Trait::type, Result>;\n+\n+static_assert( test<make_signed<const int>, make_signed_t<const int>>(),\n+               \"make_signed_t<const int>\" );\n+\n+static_assert( test<make_signed<unsigned>, make_signed_t<unsigned>>(),\n+               \"make_signed_t<unsigned>\" );\n+\n+static_assert( test<make_signed<char>, make_signed_t<char>>(),\n+               \"make_signed_t<char>\" );"}, {"sha": "30a19cf0c862b51c071c27b312dcdaf823ae80c4", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1676 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1640 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1714 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1678 }"}, {"sha": "4bcabe5548d339624c0ede66a55174070e56d152", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs-3.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs-3.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+template<typename Trait, typename Result>\n+  using test = is_same<typename Trait::type, Result>;\n+\n+static_assert( test<make_unsigned<const int>, make_unsigned_t<const int>>(),\n+               \"make_unsigned_t<const int>\" );\n+\n+static_assert( test<make_unsigned<unsigned>, make_unsigned_t<unsigned>>(),\n+               \"make_unsigned_t<unsigned>\" );\n+\n+static_assert( test<make_unsigned<char>, make_unsigned_t<char>>(),\n+               \"make_unsigned_t<char>\" );"}, {"sha": "567908e43d65e193068356aef41dcfc609377bb1", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1594 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1558 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1632 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1596 }"}, {"sha": "209cca42c21bd4015f93d17f9ae1c626eee4245a", "filename": "libstdc++-v3/testsuite/20_util/remove_reference/requirements/typedefs.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fremove_reference%2Frequirements%2Ftypedefs.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+static_assert( is_same<remove_reference<int>::type, remove_reference_t<int>>(),\n+               \"remove_reference_t<int>\" );\n+static_assert( is_same<remove_reference<int&>::type, remove_reference_t<int&>>(),\n+               \"remove_reference_t<int&>\" );\n+static_assert( is_same<remove_reference<int&&>::type, remove_reference_t<int&&>>(),\n+               \"remove_reference_t<int&&>\" );"}, {"sha": "7c0070411607e81b613504c938776004897df32c", "filename": "libstdc++-v3/testsuite/20_util/result_of/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2Frequirements%2Ftypedefs.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+using F1 = char(*)(char);\n+static_assert( is_same<result_of<F1(int)>::type, result_of_t<F1(int)>>(),\n+               \"result_of_t<F1(int)>\" );\n+\n+struct X { };\n+using F2 = int X::*;\n+static_assert( is_same<result_of<F2(X)>::type, result_of_t<F2(X)>>(),\n+               \"result_of_t<F2(X)>\" );"}, {"sha": "a4c5257499da1fed4c64a60b0ced00b5a59b3d6f", "filename": "libstdc++-v3/testsuite/20_util/underlying_type/requirements/typedefs-3.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4457e88ce188401b0a19b5064d182584c61cbeda/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funderlying_type%2Frequirements%2Ftypedefs-3.cc?ref=4457e88ce188401b0a19b5064d182584c61cbeda", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+using namespace std;\n+\n+enum E : long { };\n+\n+static_assert( is_same<typename underlying_type<E>::type,\n+                       underlying_type_t<E>>(),\n+               \"underlying_type_t\" );"}]}