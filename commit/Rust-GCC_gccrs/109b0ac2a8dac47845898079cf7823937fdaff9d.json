{"sha": "109b0ac2a8dac47845898079cf7823937fdaff9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA5YjBhYzJhOGRhYzQ3ODQ1ODk4MDc5Y2Y3ODIzOTM3ZmRhZmY5ZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2005-09-14T20:19:37Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-09-14T20:19:37Z"}, "message": "PR fortran/21875 Internal Unit Array I/O, NIST\n\n2005-09-14  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/21875 Internal Unit Array I/O, NIST\n\t* fortran/trans-io.c (gfc_build_io_library_fndecls): Add field for\n\tarray descriptor to IOPARM structure.\n\t* fortran/trans-io.c (set_internal_unit): New function to generate code\n\tto store the character (array) and the character length for an internal\n\tunit.\n\t* fortran/trans-io (build_dt): Use the new function set_internal_unit.\n\nFrom-SVN: r104277", "tree": {"sha": "74736154a68aa69516b3f6251595f24b9f45dc04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74736154a68aa69516b3f6251595f24b9f45dc04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/109b0ac2a8dac47845898079cf7823937fdaff9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109b0ac2a8dac47845898079cf7823937fdaff9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109b0ac2a8dac47845898079cf7823937fdaff9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109b0ac2a8dac47845898079cf7823937fdaff9d/comments", "author": null, "committer": null, "parents": [{"sha": "59154ed24c10f5861d2a01ac2822e9a28d08c463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59154ed24c10f5861d2a01ac2822e9a28d08c463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59154ed24c10f5861d2a01ac2822e9a28d08c463"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "db3d0637ff2906790b8ef1ab18a2bf7295825606", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109b0ac2a8dac47845898079cf7823937fdaff9d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109b0ac2a8dac47845898079cf7823937fdaff9d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=109b0ac2a8dac47845898079cf7823937fdaff9d", "patch": "@@ -1,3 +1,13 @@\n+2005-09-14  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/21875 Internal Unit Array I/O, NIST\n+\t* fortran/trans-io.c (gfc_build_io_library_fndecls): Add field for\n+\tarray descriptor to IOPARM structure.\n+\t* fortran/trans-io.c (set_internal_unit): New function to generate code\n+\tto store the character (array) and the character length for an internal\n+\tunit.\n+\t* fortran/trans-io (build_dt): Use the new function set_internal_unit.\n+\t\n 2005-09-14  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/19358"}, {"sha": "41f4ae8dcf5fabf2844dca6a1524216f7b833763", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 62, "deletions": 2, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109b0ac2a8dac47845898079cf7823937fdaff9d/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109b0ac2a8dac47845898079cf7823937fdaff9d/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=109b0ac2a8dac47845898079cf7823937fdaff9d", "patch": "@@ -81,6 +81,7 @@ static GTY(()) tree ioparm_name;\n static GTY(()) tree ioparm_name_len;\n static GTY(()) tree ioparm_internal_unit;\n static GTY(()) tree ioparm_internal_unit_len;\n+static GTY(()) tree ioparm_internal_unit_desc;\n static GTY(()) tree ioparm_sequential;\n static GTY(()) tree ioparm_sequential_len;\n static GTY(()) tree ioparm_direct;\n@@ -204,6 +205,7 @@ gfc_build_io_library_fndecls (void)\n   ADD_STRING (advance);\n   ADD_STRING (name);\n   ADD_STRING (internal_unit);\n+  ADD_FIELD (internal_unit_desc, pchar_type_node);\n   ADD_STRING (sequential);\n \n   ADD_STRING (direct);\n@@ -436,6 +438,7 @@ gfc_convert_array_to_string (gfc_se * se, gfc_expr * e)\n   se->string_length = fold_convert (gfc_charlen_type_node, size);\n }\n \n+\n /* Generate code to store a string and its length into the\n    ioparm structure.  */\n \n@@ -490,6 +493,60 @@ set_string (stmtblock_t * block, stmtblock_t * postblock, tree var,\n }\n \n \n+/* Generate code to store the character (array) and the character length\n+   for an internal unit.  */\n+\n+static void\n+set_internal_unit (stmtblock_t * block, tree iunit, tree iunit_len,\n+\t\t   tree iunit_desc, gfc_expr * e)\n+{\n+  gfc_se se;\n+  tree io;\n+  tree len;\n+  tree desc;\n+  tree tmp;\n+\n+  gfc_init_se (&se, NULL);\n+\n+  io = build3 (COMPONENT_REF, TREE_TYPE (iunit), ioparm_var, iunit, NULL_TREE);\n+  len = build3 (COMPONENT_REF, TREE_TYPE (iunit_len), ioparm_var, iunit_len,\n+\t\tNULL_TREE);\n+  desc = build3 (COMPONENT_REF, TREE_TYPE (iunit_desc), ioparm_var, iunit_desc,\n+\t\t NULL_TREE);\n+\n+  gcc_assert (e->ts.type == BT_CHARACTER);\n+\n+  /* Character scalars.  */\n+  if (e->rank == 0)\n+    {\n+      gfc_conv_expr (&se, e);\n+      gfc_conv_string_parameter (&se);\n+      tmp = se.expr;\n+      se.expr = fold_convert (pchar_type_node, integer_zero_node);\n+    }\n+\n+  /* Character array.  */\n+  else if (e->symtree && (e->symtree->n.sym->as->rank > 0))\n+    {\n+      se.ss = gfc_walk_expr (e);\n+\n+      /* Return the data pointer and rank from the descriptor.  */\n+      gfc_conv_expr_descriptor (&se, e, se.ss);\n+      tmp = gfc_conv_descriptor_data_get (se.expr);\n+      se.expr = gfc_build_addr_expr (pchar_type_node, se.expr);\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  /* The cast is needed for character substrings and the descriptor\n+     data.  */\n+  gfc_add_modify_expr (&se.pre, io, fold_convert (TREE_TYPE (io), tmp));\n+  gfc_add_modify_expr (&se.pre, len, se.string_length);\n+  gfc_add_modify_expr (&se.pre, desc, se.expr);\n+\n+  gfc_add_block_to_block (block, &se.pre);\n+}\n+\n /* Set a member of the ioparm structure to one.  */\n static void\n set_flag (stmtblock_t *block, tree var)\n@@ -1174,8 +1231,11 @@ build_dt (tree * function, gfc_code * code)\n     {\n       if (dt->io_unit->ts.type == BT_CHARACTER)\n \t{\n-\t  set_string (&block, &post_block, ioparm_internal_unit,\n-\t\t      ioparm_internal_unit_len, dt->io_unit);\n+\t  set_internal_unit (&block,\n+\t\t\t     ioparm_internal_unit,\n+\t\t\t     ioparm_internal_unit_len,\n+\t\t\t     ioparm_internal_unit_desc,\n+\t\t\t     dt->io_unit);\n \t}\n       else\n \tset_parameter_value (&block, ioparm_unit, dt->io_unit);"}]}