{"sha": "07626e49a0ad431f8e69fcc472400780f3d98044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc2MjZlNDlhMGFkNDMxZjhlNjlmY2M0NzI0MDA3ODBmM2Q5ODA0NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:17:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:17:27Z"}, "message": "poly_int: expand_vector_ubsan_overflow\n\nThis patch makes expand_vector_ubsan_overflow cope with a polynomial\nnumber of elements.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* internal-fn.c (expand_vector_ubsan_overflow): Handle polynomial\n\tnumbers of elements.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256148", "tree": {"sha": "999bb4d07debe54c97282bddec0e0a18c73d1794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/999bb4d07debe54c97282bddec0e0a18c73d1794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07626e49a0ad431f8e69fcc472400780f3d98044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07626e49a0ad431f8e69fcc472400780f3d98044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07626e49a0ad431f8e69fcc472400780f3d98044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07626e49a0ad431f8e69fcc472400780f3d98044/comments", "author": null, "committer": null, "parents": [{"sha": "d34457c138d06e989c871e7b295c06a8b9873703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34457c138d06e989c871e7b295c06a8b9873703", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34457c138d06e989c871e7b295c06a8b9873703"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "b215b4f727802dd863d0a71231e0704681cea42a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07626e49a0ad431f8e69fcc472400780f3d98044/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07626e49a0ad431f8e69fcc472400780f3d98044/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07626e49a0ad431f8e69fcc472400780f3d98044", "patch": "@@ -1,3 +1,10 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* internal-fn.c (expand_vector_ubsan_overflow): Handle polynomial\n+\tnumbers of elements.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "ceafbee74cc6c7a9cd184e2183e25e21f38ff6a4", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07626e49a0ad431f8e69fcc472400780f3d98044/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07626e49a0ad431f8e69fcc472400780f3d98044/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=07626e49a0ad431f8e69fcc472400780f3d98044", "patch": "@@ -2003,7 +2003,7 @@ static void\n expand_vector_ubsan_overflow (location_t loc, enum tree_code code, tree lhs,\n \t\t\t      tree arg0, tree arg1)\n {\n-  int cnt = TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0));\n+  poly_uint64 cnt = TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0));\n   rtx_code_label *loop_lab = NULL;\n   rtx cntvar = NULL_RTX;\n   tree cntv = NULL_TREE;\n@@ -2013,6 +2013,8 @@ expand_vector_ubsan_overflow (location_t loc, enum tree_code code, tree lhs,\n   tree resv = NULL_TREE;\n   rtx lhsr = NULL_RTX;\n   rtx resvr = NULL_RTX;\n+  unsigned HOST_WIDE_INT const_cnt = 0;\n+  bool use_loop_p = (!cnt.is_constant (&const_cnt) || const_cnt > 4);\n \n   if (lhs)\n     {\n@@ -2033,7 +2035,7 @@ expand_vector_ubsan_overflow (location_t loc, enum tree_code code, tree lhs,\n \t    }\n \t}\n     }\n-  if (cnt > 4)\n+  if (use_loop_p)\n     {\n       do_pending_stack_adjust ();\n       loop_lab = gen_label_rtx ();\n@@ -2052,10 +2054,10 @@ expand_vector_ubsan_overflow (location_t loc, enum tree_code code, tree lhs,\n       rtx arg1r = expand_normal (arg1);\n       arg1 = make_tree (TREE_TYPE (arg1), arg1r);\n     }\n-  for (int i = 0; i < (cnt > 4 ? 1 : cnt); i++)\n+  for (unsigned int i = 0; i < (use_loop_p ? 1 : const_cnt); i++)\n     {\n       tree op0, op1, res = NULL_TREE;\n-      if (cnt > 4)\n+      if (use_loop_p)\n \t{\n \t  tree atype = build_array_type_nelts (eltype, cnt);\n \t  op0 = uniform_vector_p (arg0);\n@@ -2095,7 +2097,7 @@ expand_vector_ubsan_overflow (location_t loc, enum tree_code code, tree lhs,\n \t\t\t\t  false, false, false, true, &data);\n \t  break;\n \tcase MINUS_EXPR:\n-\t  if (cnt > 4 ? integer_zerop (arg0) : integer_zerop (op0))\n+\t  if (use_loop_p ? integer_zerop (arg0) : integer_zerop (op0))\n \t    expand_neg_overflow (loc, res, op1, true, &data);\n \t  else\n \t    expand_addsub_overflow (loc, MINUS_EXPR, res, op0, op1,\n@@ -2109,7 +2111,7 @@ expand_vector_ubsan_overflow (location_t loc, enum tree_code code, tree lhs,\n \t  gcc_unreachable ();\n \t}\n     }\n-  if (cnt > 4)\n+  if (use_loop_p)\n     {\n       struct separate_ops ops;\n       ops.code = PLUS_EXPR;\n@@ -2122,7 +2124,8 @@ expand_vector_ubsan_overflow (location_t loc, enum tree_code code, tree lhs,\n \t\t\t\t    EXPAND_NORMAL);\n       if (ret != cntvar)\n \temit_move_insn (cntvar, ret);\n-      do_compare_rtx_and_jump (cntvar, GEN_INT (cnt), NE, false,\n+      rtx cntrtx = gen_int_mode (cnt, TYPE_MODE (sizetype));\n+      do_compare_rtx_and_jump (cntvar, cntrtx, NE, false,\n \t\t\t       TYPE_MODE (sizetype), NULL_RTX, NULL, loop_lab,\n \t\t\t       profile_probability::very_likely ());\n     }"}]}