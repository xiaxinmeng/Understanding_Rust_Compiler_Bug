{"sha": "5916cfd01b73646934abf404de8528c11b842070", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxNmNmZDAxYjczNjQ2OTM0YWJmNDA0ZGU4NTI4YzExYjg0MjA3MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-08-17T21:40:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-08-17T21:40:07Z"}, "message": "re PR c++/67216 (false is still a null pointer constant)\n\n/cp\n2015-08-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/67216\n\t* call.c (null_ptr_cst_p): In C++11 return 'false' for 'false'.\n\n/testsuite\n2015-08-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/67216\n\t* g++.dg/cpp0x/nullptr34.C: New.\n\t* g++.dg/warn/Wconversion2.C: Adjust.\n\t* g++.dg/warn/Wnull-conversion-1.C: Likewise.\n\t* g++.old-deja/g++.other/null3.C: Likewise.\n\n\t* g++.dg/cpp0x/pr51313.C: Adjust.\n\nFrom-SVN: r226956", "tree": {"sha": "ac9bf378b710ec8c5ec4243d11b1ff0baf82d0de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac9bf378b710ec8c5ec4243d11b1ff0baf82d0de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5916cfd01b73646934abf404de8528c11b842070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5916cfd01b73646934abf404de8528c11b842070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5916cfd01b73646934abf404de8528c11b842070", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5916cfd01b73646934abf404de8528c11b842070/comments", "author": null, "committer": null, "parents": [{"sha": "b361a15ff60daf83fc2ddccbc6166e4bd19e2b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b361a15ff60daf83fc2ddccbc6166e4bd19e2b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b361a15ff60daf83fc2ddccbc6166e4bd19e2b35"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "0bf33c8eb6a3937e2ec16d80a60f8be25091b97a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5916cfd01b73646934abf404de8528c11b842070/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5916cfd01b73646934abf404de8528c11b842070/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5916cfd01b73646934abf404de8528c11b842070", "patch": "@@ -1,3 +1,8 @@\n+2015-08-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/67216\n+\t* call.c (null_ptr_cst_p): In C++11 return 'false' for 'false'.\n+\n 2015-08-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67244"}, {"sha": "909ac990189fa69a2e63fa3660ecc78472f8760c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5916cfd01b73646934abf404de8528c11b842070/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5916cfd01b73646934abf404de8528c11b842070/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5916cfd01b73646934abf404de8528c11b842070", "patch": "@@ -524,22 +524,33 @@ struct z_candidate {\n bool\n null_ptr_cst_p (tree t)\n {\n+  tree type = TREE_TYPE (t);\n+\n   /* [conv.ptr]\n \n      A null pointer constant is an integral constant expression\n      (_expr.const_) rvalue of integer type that evaluates to zero or\n      an rvalue of type std::nullptr_t. */\n-  if (NULLPTR_TYPE_P (TREE_TYPE (t)))\n+  if (NULLPTR_TYPE_P (type))\n     return true;\n-  if (CP_INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+\n+  if (cxx_dialect >= cxx11)\n     {\n       /* Core issue 903 says only literal 0 is a null pointer constant.  */\n-      if (cxx_dialect < cxx11)\n-\tt = fold_non_dependent_expr (t);\n+      if (TREE_CODE (type) == INTEGER_TYPE\n+\t  && TREE_CODE (t) == INTEGER_CST\n+\t  && integer_zerop (t)\n+\t  && !TREE_OVERFLOW (t))\n+\treturn true;\n+    }\n+  else if (CP_INTEGRAL_TYPE_P (type))\n+    {\n+      t = fold_non_dependent_expr (t);\n       STRIP_NOPS (t);\n       if (integer_zerop (t) && !TREE_OVERFLOW (t))\n \treturn true;\n     }\n+\n   return false;\n }\n "}, {"sha": "2f1ba2532a1058980725a726ef017fb0b3eaf6f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5916cfd01b73646934abf404de8528c11b842070", "patch": "@@ -1,3 +1,13 @@\n+2015-08-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/67216\n+\t* g++.dg/cpp0x/nullptr34.C: New.\n+\t* g++.dg/warn/Wconversion2.C: Adjust.\n+\t* g++.dg/warn/Wnull-conversion-1.C: Likewise.\n+\t* g++.old-deja/g++.other/null3.C: Likewise.\n+\n+\t* g++.dg/cpp0x/pr51313.C: Adjust.\n+\n 2015-08-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67221"}, {"sha": "2fc70a1dd969ecb5e75416818ade386d06bacfe8", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr34.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr34.C?ref=5916cfd01b73646934abf404de8528c11b842070", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/67216\n+// { dg-do compile { target c++11 } }\n+\n+struct s {\n+    s( long ) {}\n+};\n+\n+struct t {\n+    t( void * ) {}\n+};\n+\n+void foo(s) {}\n+void foo(t) {}\n+\n+int main() {\n+    foo(false);\n+}"}, {"sha": "afd281359c5b46e35935dd83b51c1bc6ad073e3e", "filename": "gcc/testsuite/g++.dg/cpp0x/pr51313.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51313.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51313.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr51313.C?ref=5916cfd01b73646934abf404de8528c11b842070", "patch": "@@ -14,5 +14,5 @@ extern ostream cout;\n \n int main()\n {\n-  cout << isdigit(0);\n+  cout << isdigit(0);  // { dg-error \"invalid conversion\" }\n }"}, {"sha": "d105d922059cb92b04a613b4d55eb25eb38c36bb", "filename": "gcc/testsuite/g++.dg/warn/Wconversion2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion2.C?ref=5916cfd01b73646934abf404de8528c11b842070", "patch": "@@ -1,3 +1,4 @@\n // { dg-options \"-Wconversion-null\" }\n void foo(const char *); \n-void bar() { foo(false); } // { dg-warning \"pointer type for argument\" }\n+void bar() { foo(false); } // { dg-warning \"pointer type for argument\" \"\" { target { ! c++11 } } }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } 3 }"}, {"sha": "d35074417e7e0de545c56a1d35e7d7bae37d8aa0", "filename": "gcc/testsuite/g++.dg/warn/Wnull-conversion-1.C", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C?ref=5916cfd01b73646934abf404de8528c11b842070", "patch": "@@ -6,10 +6,13 @@\n void func1(int* ptr);\n \n void func2() {\n-  int* t = false;             // { dg-warning \"converting 'false' to pointer\" }\n+  int* t = false;             // { dg-warning \"converting 'false' to pointer\" \"\" { target { ! c++11 } } }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } 9 }\n   int* p;\n-  p = false;                  // { dg-warning \"converting 'false' to pointer\" }\n+  p = false;                  // { dg-warning \"converting 'false' to pointer\" \"\" { target { ! c++11 } } }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } 12 }\n   int* r = sizeof(char) / 2;  // { dg-error \"invalid conversion from\" \"\" { target c++11 } }\n-  func1(false);               // { dg-warning \"converting 'false' to pointer\" }\n+  func1(false);               // { dg-warning \"converting 'false' to pointer\" \"\" { target { ! c++11 } } }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } 15 }\n   int i = NULL;               // { dg-warning \"converting to non-pointer\" }\n }"}, {"sha": "ff1d0669b698d0137cdfaaceb1acf91fc4c0e157", "filename": "gcc/testsuite/g++.old-deja/g++.other/null3.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5916cfd01b73646934abf404de8528c11b842070/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C?ref=5916cfd01b73646934abf404de8528c11b842070", "patch": "@@ -2,5 +2,6 @@\n \n void x()\n {\n- int* p = 1==0;\t// { dg-warning \"converting 'false' to pointer\" }\n+ int* p = 1==0;\t// { dg-warning \"converting 'false' to pointer\" \"\" { target { ! c++11 } } }\n+// { dg-error \"cannot convert\" \"\" { target c++11 } 5 } \n }"}]}