{"sha": "71882046281f1414174fb8ff14b072e159c5a2d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4ODIwNDYyODFmMTQxNDE3NGZiOGZmMTRiMDcyZTE1OWM1YTJkNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-28T13:31:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-28T13:31:53Z"}, "message": "lambda-code.c (nestify_update_pending_stmts): Remove.\n\n\t* lambda-code.c (nestify_update_pending_stmts): Remove.\n\t(perfect_nestify): Use flush_pending_stmts instead of\n\tnestify_update_pending_stmts.\n\t* tree-cfg.c (tree_make_forwarder_block): Use\n\tflush_pending_stmts.\n\t* tree-flow.h: Add a prototype for flush_pending_stmts.\n\t* tree-ssa-loop-manip.c (tree_duplicate_loop_to_header_edge):\n\tUse flush_pending_stmts.\n\t(lv_update_pending_stmts): Remove.\n\t(tree_ssa_loop_version): Use flush_pending_stmts instead of\n\tlv_update_pending_stmts.\n\t* tree-ssa.c (flush_pending_stmts): New.\n\nFrom-SVN: r89757", "tree": {"sha": "0f497db2d97527ca7579bbfe5ed4c65acb24d5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f497db2d97527ca7579bbfe5ed4c65acb24d5e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71882046281f1414174fb8ff14b072e159c5a2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71882046281f1414174fb8ff14b072e159c5a2d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71882046281f1414174fb8ff14b072e159c5a2d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71882046281f1414174fb8ff14b072e159c5a2d4/comments", "author": null, "committer": null, "parents": [{"sha": "63058091fa0045a82d1777bd5046a80f920797ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63058091fa0045a82d1777bd5046a80f920797ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63058091fa0045a82d1777bd5046a80f920797ab"}], "stats": {"total": 121, "additions": 44, "deletions": 77}, "files": [{"sha": "20b284240c1a866124ba418a8cd6383d9d7c1f20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71882046281f1414174fb8ff14b072e159c5a2d4", "patch": "@@ -1,3 +1,18 @@\n+2004-10-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* lambda-code.c (nestify_update_pending_stmts): Remove.\n+\t(perfect_nestify): Use flush_pending_stmts instead of\n+\tnestify_update_pending_stmts.\n+\t* tree-cfg.c (tree_make_forwarder_block): Use\n+\tflush_pending_stmts.\n+\t* tree-flow.h: Add a prototype for flush_pending_stmts.\n+\t* tree-ssa-loop-manip.c (tree_duplicate_loop_to_header_edge):\n+\tUse flush_pending_stmts.\n+\t(lv_update_pending_stmts): Remove.\n+\t(tree_ssa_loop_version): Use flush_pending_stmts instead of\n+\tlv_update_pending_stmts.\n+\t* tree-ssa.c (flush_pending_stmts): New.\n+\n 2004-10-28  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR target/15286"}, {"sha": "38c1fd1f4e05b06e60c8423033d5b87d51399517", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=71882046281f1414174fb8ff14b072e159c5a2d4", "patch": "@@ -2109,31 +2109,6 @@ perfect_nest_p (struct loop *loop)\n   return true;\n }\n \n-\n-/* Add phi args using PENDINT_STMT list.  */\n-\n-static void\n-nestify_update_pending_stmts (edge e)\n-{\n-  basic_block dest;\n-  tree phi, arg, def;\n-\n-  if (!PENDING_STMT (e))\n-    return;\n-\n-  dest = e->dest;\n-\n-  for (phi = phi_nodes (dest), arg = PENDING_STMT (e);\n-       phi;\n-       phi = TREE_CHAIN (phi), arg = TREE_CHAIN (arg))\n-    {\n-      def = TREE_VALUE (arg);\n-      add_phi_arg (&phi, def, e);\n-    }\n-\n-  PENDING_STMT (e) = NULL;\n-}\n-\n /* Replace the USES of tree X in STMT with tree Y */\n \n static void\n@@ -2317,7 +2292,7 @@ perfect_nestify (struct loops *loops,\n       add_phi_arg (&phi, def, EDGE_PRED (preheaderbb, 0));\n     } \n       \n-  nestify_update_pending_stmts (e);\n+  flush_pending_stmts (e);\n   bodybb = create_empty_bb (EXIT_BLOCK_PTR->prev_bb);\n   latchbb = create_empty_bb (EXIT_BLOCK_PTR->prev_bb);\n   make_edge (headerbb, bodybb, EDGE_FALLTHRU); "}, {"sha": "e9f456d6e571ba836ef60c001588e2b5cc0bad04", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=71882046281f1414174fb8ff14b072e159c5a2d4", "patch": "@@ -3692,12 +3692,7 @@ tree_make_forwarder_block (edge fallthru)\n       if (e == fallthru)\n \tcontinue;\n \n-      for (phi = phi_nodes (bb), var = PENDING_STMT (e);\n-\t   phi;\n-\t   phi = PHI_CHAIN (phi), var = TREE_CHAIN (var))\n-\tadd_phi_arg (&phi, TREE_VALUE (var), e);\n-\n-      PENDING_STMT (e) = NULL;\n+      flush_pending_stmts (e);\n     }\n }\n \n@@ -4598,7 +4593,7 @@ tree_duplicate_sese_region (edge entry, edge exit,\n   struct loop *loop = entry->dest->loop_father;\n   edge exit_copy;\n   bitmap definitions;\n-  tree phi, var;\n+  tree phi;\n   basic_block *doms;\n   htab_t ssa_name_map = NULL;\n   edge redirected;\n@@ -4667,11 +4662,7 @@ tree_duplicate_sese_region (edge entry, edge exit,\n   /* Redirect the entry and add the phi node arguments.  */\n   redirected = redirect_edge_and_branch (entry, entry->dest->rbi->copy);\n   gcc_assert (redirected != NULL);\n-  for (phi = phi_nodes (entry->dest), var = PENDING_STMT (entry);\n-       phi;\n-       phi = TREE_CHAIN (phi), var = TREE_CHAIN (var))\n-    add_phi_arg (&phi, TREE_VALUE (var), entry);\n-  PENDING_STMT (entry) = NULL;\n+  flush_pending_stmts (entry);\n \n   /* Concerning updating of dominators:  We must recount dominators\n      for entry block and its copy.  Anything that is outside of the region, but"}, {"sha": "715f843999faa3ca9ac0ac2d16b634bd0948cf5c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=71882046281f1414174fb8ff14b072e159c5a2d4", "patch": "@@ -572,6 +572,7 @@ extern void dump_tree_ssa_stats (FILE *);\n extern void debug_tree_ssa_stats (void);\n extern void ssa_remove_edge (edge);\n extern edge ssa_redirect_edge (edge, basic_block);\n+extern void flush_pending_stmts (edge e);\n extern bool tree_ssa_useless_type_conversion (tree);\n extern bool tree_ssa_useless_type_conversion_1 (tree, tree);\n extern void verify_ssa (void);"}, {"sha": "6f787575d729f1607856d60778d8d005837d936e", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 3, "deletions": 39, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=71882046281f1414174fb8ff14b072e159c5a2d4", "patch": "@@ -589,7 +589,6 @@ tree_duplicate_loop_to_header_edge (struct loop *loop, edge e,\n   unsigned first_new_block;\n   basic_block bb;\n   unsigned i;\n-  tree phi, arg, map, def;\n   bitmap definitions;\n \n   if (!(loops->state & LOOPS_HAVE_SIMPLE_LATCHES))\n@@ -609,17 +608,7 @@ tree_duplicate_loop_to_header_edge (struct loop *loop, edge e,\n     return false;\n \n   /* Readd the removed phi args for e.  */\n-  map = PENDING_STMT (e);\n-  PENDING_STMT (e) = NULL;\n-\n-  for (phi = phi_nodes (e->dest), arg = map;\n-       phi;\n-       phi = TREE_CHAIN (phi), arg = TREE_CHAIN (arg))\n-    {\n-      def = TREE_VALUE (arg);\n-      add_phi_arg (&phi, def, e);\n-    }\n-  gcc_assert (arg == NULL);\n+  flush_pending_stmts (e);\n \n   /* Copy the phi node arguments.  */\n   copy_phi_node_args (first_new_block);\n@@ -747,31 +736,6 @@ lv_adjust_loop_entry_edge (basic_block first_head,\n   return new_head;\n }\n \n-/* Add phi args using PENDINT_STMT list.  */\n-\n-static void\n-lv_update_pending_stmts (edge e)\n-{\n-  basic_block dest;\n-  tree phi, arg, def;\n-\n-  if (!PENDING_STMT (e))\n-    return;\n-\n-  dest = e->dest;\n-\n-  for (phi = phi_nodes (dest), arg = PENDING_STMT (e);\n-       phi;\n-       phi = TREE_CHAIN (phi), arg = TREE_CHAIN (arg))\n-    {\n-      def = TREE_VALUE (arg);\n-      add_phi_arg (&phi, def, e);\n-    }\n-\n-  PENDING_STMT (e) = NULL;\n-}\n-\n-\n /* Main entry point for Loop Versioning transformation.\n    \n This transformation given a condition and a loop, creates\n@@ -832,11 +796,11 @@ tree_ssa_loop_version (struct loops *loops, struct loop * loop,\n     nloop->single_exit = find_edge (exit->src->rbi->copy, exit->dest);\n \n   /* loopify redirected latch_edge. Update its PENDING_STMTS.  */ \n-  lv_update_pending_stmts (latch_edge);\n+  flush_pending_stmts (latch_edge);\n \n   /* loopify redirected condition_bb's succ edge. Update its PENDING_STMTS.  */ \n   extract_true_false_edges_from_block (*condition_bb, &true_edge, &false_edge);\n-  lv_update_pending_stmts (false_edge);\n+  flush_pending_stmts (false_edge);\n \n   /* Adjust irreducible flag.  */\n   if (irred_flag)"}, {"sha": "6fb711acad51c63145a52495e29baf207f7b0697", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71882046281f1414174fb8ff14b072e159c5a2d4/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=71882046281f1414174fb8ff14b072e159c5a2d4", "patch": "@@ -100,6 +100,27 @@ ssa_redirect_edge (edge e, basic_block dest)\n   return e;\n }\n \n+/* Add PHI arguments queued in PENDINT_STMT list on edge E to edge\n+   E->dest.  */\n+\n+void\n+flush_pending_stmts (edge e)\n+{\n+  tree phi, arg;\n+\n+  if (!PENDING_STMT (e))\n+    return;\n+\n+  for (phi = phi_nodes (e->dest), arg = PENDING_STMT (e);\n+       phi;\n+       phi = TREE_CHAIN (phi), arg = TREE_CHAIN (arg))\n+    {\n+      tree def = TREE_VALUE (arg);\n+      add_phi_arg (&phi, def, e);\n+    }\n+\n+  PENDING_STMT (e) = NULL;\n+}\n \n /* Return true if SSA_NAME is malformed and mark it visited.\n "}]}