{"sha": "fe65151b14f5f43213ffac7f20303bfbd6a2d1c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2NTE1MWIxNGY1ZjQzMjEzZmZhYzdmMjAzMDNiZmJkNmEyZDFjOA==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2018-10-12T21:12:38Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2018-10-12T21:12:38Z"}, "message": "pdp11.md (doloop_end): New expander.\n\n\t    * config/pdp11/pdp11.md (doloop_end): New expander.\n\t    (doloop_end_insn): renamed from \"doloop_end\".\n\t    (addqi3): New pattern.\n\t    (subqi3): New pattern.\n\t    * config/pdp11/predicates.md (incdec_operand): New predicate.\n\nFrom-SVN: r265132", "tree": {"sha": "feb364af1ee93a10984f1ea9825e7c227a927dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/feb364af1ee93a10984f1ea9825e7c227a927dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8/comments", "author": null, "committer": null, "parents": [{"sha": "e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41ec71bd97a1a8eaef40695c7ae9b7f4b1fc819"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "75ab456362bda69f0d010851d8cfffa6e9e6f7e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe65151b14f5f43213ffac7f20303bfbd6a2d1c8", "patch": "@@ -1,3 +1,11 @@\n+2018-10-12  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11.md (doloop_end): New expander.\n+\t(doloop_end_insn): renamed from \"doloop_end\".\n+\t(addqi3): New pattern.\n+\t(subqi3): New pattern.\n+\t* config/pdp11/predicates.md (incdec_operand): New predicate.\n+\n 2018-10-12  Yury Gribov  <tetra2005@gmail.com>\n \n \tPR middle-end/81376"}, {"sha": "773715d7030e9357ef2b4821450d3ea43495ccdc", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=fe65151b14f5f43213ffac7f20303bfbd6a2d1c8", "patch": "@@ -251,9 +251,28 @@\n \n ;; sob instruction\n ;;\n-;; Do a define_expand because some alternatives clobber CC.\n+;; This expander has to check for mode match because the doloop pass\n+;; in gcc that invokes it does not do so, i.e., it may attempt to apply\n+;; this pattern even if the count operand is QI or SI mode.\n+(define_expand \"doloop_end\"\n+  [(parallel [(set (pc)\n+\t\t   (if_then_else\n+\t\t    (ne (match_operand:HI 0 \"nonimmediate_operand\" \"+r,!m\")\n+\t\t\t(const_int 1))\n+\t\t    (label_ref (match_operand 1 \"\" \"\"))\n+\t\t    (pc)))\n+\t      (set (match_dup 0)\n+\t\t   (plus:HI (match_dup 0)\n+\t\t\t (const_int -1)))])]\n+  \"TARGET_40_PLUS\"\n+  \"{\n+    if (GET_MODE (operands[0]) != HImode)\n+      FAIL;\n+  }\")\n+\n+;; Do a define_split because some alternatives clobber CC.\n ;; Some don't, but it isn't all that interesting to cover that case.\n-(define_insn_and_split \"doloop_end\"\n+(define_insn_and_split \"doloop_end_insn\"\n   [(set (pc)\n \t(if_then_else\n \t (ne (match_operand:HI 0 \"nonimmediate_operand\" \"+r,!m\")\n@@ -1067,6 +1086,35 @@\n }\"\n   [(set_attr \"length\" \"2,4,4,6\")])\n \n+(define_insn_and_split \"addqi3\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,Q\")\n+\t(plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n+\t\t (match_operand:QI 2 \"incdec_operand\" \"LM,LM\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])]\n+  \"\"\n+  [(set_attr \"length\" \"2,4\")])\n+\n+;; Inc/dec sets V if overflow from the operation\n+(define_insn \"*addqi3<cc_ccnz>\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,Q\")\n+\t(plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n+\t         (match_operand:QI 2 \"incdec_operand\" \"LM,LM\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"reload_completed\"\n+  \"*\n+{\n+  if (INTVAL(operands[2]) == 1)\n+    return \\\"incb\\t%0\\\";\n+  else\n+    return \\\"decb\\t%0\\\";\n+}\"\n+  [(set_attr \"length\" \"2,4\")])\n+\n \f\n ;;- subtract instructions\n ;; we don't have to care for constant second \n@@ -1226,6 +1274,35 @@\n }\"\n   [(set_attr \"length\" \"2,4,4,6\")])\n \n+(define_insn_and_split \"subqi3\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,Q\")\n+\t(plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n+\t\t (match_operand:QI 2 \"incdec_operand\" \"LM,LM\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (reg:CC CC_REGNUM))])]\n+  \"\"\n+  [(set_attr \"length\" \"2,4\")])\n+\n+;; Inc/dec sets V if overflow from the operation\n+(define_insn \"*subqi3<cc_ccnz>\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=rR,Q\")\n+\t(plus:QI (match_operand:QI 1 \"general_operand\" \"%0,0\")\n+\t         (match_operand:QI 2 \"incdec_operand\" \"LM,LM\")))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"reload_completed\"\n+  \"*\n+{\n+  if (INTVAL(operands[2]) == -1)\n+    return \\\"incb\\t%0\\\";\n+  else\n+    return \\\"decb\\t%0\\\";\n+}\"\n+  [(set_attr \"length\" \"2,4\")])\n+\n ;;;;- and instructions\n ;; Bit-and on the pdp (like on the VAX) is done with a clear-bits insn.\n "}, {"sha": "d17e1299c330df4b3c8db4f7b0ad0f9ecad3828e", "filename": "gcc/config/pdp11/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8/gcc%2Fconfig%2Fpdp11%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe65151b14f5f43213ffac7f20303bfbd6a2d1c8/gcc%2Fconfig%2Fpdp11%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpredicates.md?ref=fe65151b14f5f43213ffac7f20303bfbd6a2d1c8", "patch": "@@ -30,6 +30,14 @@\n   (and (match_code \"const_int\")\n        (match_test \"(unsigned) INTVAL (op) < 4\")))\n \n+;; Accept integer arguments +1 and -1, for which add and sub can be\n+;; done as inc or dec instructions.  This matches the rule for the\n+;; L and M constraints.\n+(define_predicate \"incdec_operand\"\n+  (and (match_code \"const_int\")\n+       (ior (match_test \"INTVAL (op) == -1\")\n+\t    (match_test \"INTVAL (op) == 1\"))))\n+\n ;; Accept anything general_operand accepts, except that registers must\n ;; be FPU registers.\n (define_predicate \"float_operand\""}]}