{"sha": "0fef3fd0eada944c2677ba0680393a12979f970f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlZjNmZDBlYWRhOTQ0YzI2NzdiYTA2ODAzOTNhMTI5NzlmOTcwZg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-02-02T18:56:37Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-02-02T18:56:37Z"}, "message": "cpphash.h (struct spec_nodes): Remove n__CHAR_UNSIGNED__.\n\n\t* cpphash.h (struct spec_nodes): Remove n__CHAR_UNSIGNED__.\n\t* cpphash.c (_cpp_init_hashtable): Similarly.\n\t* cppinit.c (cpp_create_reader): Default the signed_char flag.\n\t(init_builtins): Define __CHAR_UNSIGNED__ appropriately.\n\t(COMMAND_LINE_OPTIONS): Recognise -f{un,}signed-char.\n\t(cpp_handle_option): Handle the new options.\n\t* cpplex.c (cpp_interpret_charconst): Use new flag.\n\t* cpplib.h (struct cpp_options): New member signed_char.\n\t* gcc.c (cpp_unique_options): Remove %c spec and documentation.\n\t(cpp_options): Handle -fsigned-char and -funsigned-char.\n\t(static_specs): Remove signed_char_spec.\n\t(do_spec1): Don't handle %c.\n\t* system.h: Poison SIGNED_CHAR_SPEC.\n\t* tradcif.y (yylex): Use flag_signed_char.\n\t* tradcpp.h (flag_signed_char): New.\n\t* tradcpp.c (flag_signed_char): New.\n\t(main): Handle new command-line options.\n\t(initialize_builtins): Define __CHAR_UNSIGNED__ if appropriate.\nconfig:\n\t* alpha/alpha.h (SIGNED_CHAR_SPEC): Remove.\n\t* avr/avr.h: Remove old comments.\n\t* i960/i960.h (CPP_SPEC): Pass -fsigned-char if -mic*.\n\t(CC1_SPEC): Pass -fsigned-char if -mic*.\n\t(SIGNED_CHAR_SPEC): Remove.\ndoc:\n\t* tm.texi (SIGNED_CHAR_SPEC): Remove documentation.\ntestsuite:\n\t* gcc.dg/cpp/uchar-1.c, uchar-2.c, uchar-3.c: New tests.\n\nFrom-SVN: r49444", "tree": {"sha": "955327bc9f9ac1f86814b649a8e7be4427abe84a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/955327bc9f9ac1f86814b649a8e7be4427abe84a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fef3fd0eada944c2677ba0680393a12979f970f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fef3fd0eada944c2677ba0680393a12979f970f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fef3fd0eada944c2677ba0680393a12979f970f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fef3fd0eada944c2677ba0680393a12979f970f/comments", "author": null, "committer": null, "parents": [{"sha": "1acce4c771ff585069a1551fe1a6d0bf70fdda52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acce4c771ff585069a1551fe1a6d0bf70fdda52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1acce4c771ff585069a1551fe1a6d0bf70fdda52"}], "stats": {"total": 186, "additions": 116, "deletions": 70}, "files": [{"sha": "5ad4904725148551092caa7b8fc5ec2bf5727aab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -1,3 +1,32 @@\n+2002-02-02  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpphash.h (struct spec_nodes): Remove n__CHAR_UNSIGNED__.\n+\t* cpphash.c (_cpp_init_hashtable): Similarly.\n+\t* cppinit.c (cpp_create_reader): Default the signed_char flag.\n+\t(init_builtins): Define __CHAR_UNSIGNED__ appropriately.\n+\t(COMMAND_LINE_OPTIONS): Recognise -f{un,}signed-char.\n+\t(cpp_handle_option): Handle the new options.\n+\t* cpplex.c (cpp_interpret_charconst): Use new flag.\n+\t* cpplib.h (struct cpp_options): New member signed_char.\n+\t* gcc.c (cpp_unique_options): Remove %c spec and documentation.\n+\t(cpp_options): Handle -fsigned-char and -funsigned-char.\n+\t(static_specs): Remove signed_char_spec.\n+\t(do_spec1): Don't handle %c.\n+\t* system.h: Poison SIGNED_CHAR_SPEC.\n+\t* tradcif.y (yylex): Use flag_signed_char.\n+\t* tradcpp.h (flag_signed_char): New.\n+\t* tradcpp.c (flag_signed_char): New.\n+\t(main): Handle new command-line options.\n+\t(initialize_builtins): Define __CHAR_UNSIGNED__ if appropriate.\n+config:\n+\t* alpha/alpha.h (SIGNED_CHAR_SPEC): Remove.\n+\t* avr/avr.h: Remove old comments.\n+\t* i960/i960.h (CPP_SPEC): Pass -fsigned-char if -mic*.\n+\t(CC1_SPEC): Pass -fsigned-char if -mic*.\n+\t(SIGNED_CHAR_SPEC): Remove.\n+doc:\n+\t* tm.texi (SIGNED_CHAR_SPEC): Remove documentation.\n+\n 2002-02-01  Eric Christopher  <echristo@redhat.com>\n \n \tFrom Daniel Jacobowitz <dmj+@andrew.cmu.edu>"}, {"sha": "4e676f2da593e2d8c6136bd658fad11befbfcfa3", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -43,12 +43,6 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_SUBTARGET_SPEC \"\"\n #endif\n \n-/* Set the spec to use for signed char.  The default tests the above macro\n-   but DEC's compiler can't handle the conditional in a \"constant\"\n-   operand.  */\n-\n-#define SIGNED_CHAR_SPEC \"%{funsigned-char:-D__CHAR_UNSIGNED__}\"\n-\n #define WORD_SWITCH_TAKES_ARG(STR)\t\t\\\n  (!strcmp (STR, \"rpath\") || DEFAULT_WORD_SWITCH_TAKES_ARG(STR))\n "}, {"sha": "742c811285dda2f39e3ef5d779ce08507e979cff", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -2688,16 +2688,7 @@ extern int avr_case_values_threshold;\n \n    This should be defined if `PTRDIFF_TYPE' depends on target\n    dependent flags which are not accessible to the preprocessor.\n-   Otherwise, it should not be defined.\n-\n-   `SIGNED_CHAR_SPEC'\n-   A C string constant that tells the GNU CC driver program options to\n-   pass to CPP.  By default, this macro is defined to pass the option\n-   `-D__CHAR_UNSIGNED__' to CPP if `char' will be treated as\n-   `unsigned char' by `cc1'.\n-\n-   Do not define this macro unless you need to override the default\n-   definition.  */\n+   Otherwise, it should not be defined.  */\n \n #define CC1_SPEC \"%{profile:-p}\"\n /* A C string constant that tells the GNU CC driver program options to"}, {"sha": "4df5a6fb14f78d47b3e83fd72a32eb063d28278a", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -30,8 +30,9 @@ Boston, MA 02111-1307, USA.  */\n /* Names to predefine in the preprocessor for this target machine.  */\n #define CPP_PREDEFINES \"-Di960 -Di80960 -DI960 -DI80960 -Acpu=i960 -Amachine=i960\"\n \n-/* Name to predefine in the preprocessor for processor variations.  */\n-#define\tCPP_SPEC \"%{mic*:-D__i960\\\n+/* Name to predefine in the preprocessor for processor variations.\n+   -mic* options make characters signed by default.  */\n+#define\tCPP_SPEC \"%{mic*:-D__i960 -fsigned-char\\\n \t\t\t%{mka:-D__i960KA}%{mkb:-D__i960KB}\\\n \t\t\t%{mja:-D__i960JA}%{mjd:-D__i960JD}%{mjf:-D__i960JF}\\\n \t\t\t%{mrp:-D__i960RP}\\\n@@ -52,20 +53,13 @@ Boston, MA 02111-1307, USA.  */\n \t\t%{!mcc:%{!mcf:-D__i960_KB -D__i960KB__ %{mic*:-D__i960KB}}}}}}}}}\\\n \t%{mlong-double-64:-D__LONG_DOUBLE_64__}\"\n \n-/* -mic* options make characters signed by default.  */\n-/* Use #if rather than ?: because MIPS C compiler rejects ?: in\n-   initializers.  */\n-#if DEFAULT_SIGNED_CHAR\n-#define SIGNED_CHAR_SPEC \"%{funsigned-char:-D__CHAR_UNSIGNED__}\"\n-#else\n-#define SIGNED_CHAR_SPEC \"%{!fsigned-char:%{!mic*:-D__CHAR_UNSIGNED__}}\"\n-#endif\n-\n /* Specs for the compiler, to handle processor variations. \n    If the user gives an explicit -gstabs or -gcoff option, then do not\n-   try to add an implicit one, as this will fail.  */\n+   try to add an implicit one, as this will fail. \n+   -mic* options make characters signed by default.  */\n #define CC1_SPEC \\\n-\t\"%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:%{!mja:%{!mjd:%{!mjf:%{!mrp:-mka}}}}}}}}}}}}\\\n+\t\"%{mic*:-fsigned-char}\\\n+%{!mka:%{!mkb:%{!msa:%{!msb:%{!mmc:%{!mca:%{!mcc:%{!mcf:%{!mja:%{!mjd:%{!mjf:%{!mrp:-mka}}}}}}}}}}}}\\\n \t %{!gs*:%{!gc*:%{mbout:%{g*:-gstabs}}\\\n \t\t       %{mcoff:%{g*:-gcoff}}\\\n \t\t       %{!mbout:%{!mcoff:%{g*:-gstabs}}}}}\""}, {"sha": "69e1a237aa498d3e3c8e752bf6b0c9d4d964c486", "filename": "gcc/cpphash.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -73,7 +73,6 @@ _cpp_init_hashtable (pfile, table)\n   s->n_true\t\t= cpp_lookup (pfile, DSC(\"true\"));\n   s->n_false\t\t= cpp_lookup (pfile, DSC(\"false\"));\n   s->n__STRICT_ANSI__   = cpp_lookup (pfile, DSC(\"__STRICT_ANSI__\"));\n-  s->n__CHAR_UNSIGNED__ = cpp_lookup (pfile, DSC(\"__CHAR_UNSIGNED__\"));\n   s->n__VA_ARGS__       = cpp_lookup (pfile, DSC(\"__VA_ARGS__\"));\n   s->n__VA_ARGS__->flags |= NODE_DIAGNOSTIC;\n }"}, {"sha": "e06914aeecd0f2b37ac3bb32021c4f0491642a88", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -164,7 +164,6 @@ struct spec_nodes\n   cpp_hashnode *n_true;\t\t\t/* C++ keyword true */\n   cpp_hashnode *n_false;\t\t/* C++ keyword false */\n   cpp_hashnode *n__STRICT_ANSI__;\t/* STDC_0_IN_SYSTEM_HEADERS */\n-  cpp_hashnode *n__CHAR_UNSIGNED__;\t/* plain char is unsigned */\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */\n };\n "}, {"sha": "717fb3ff72c9575929222f4d24efbf79c38cb843", "filename": "gcc/cppinit.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -490,6 +490,11 @@ cpp_create_reader (lang)\n   CPP_OPTION (pfile, show_column) = 1;\n   CPP_OPTION (pfile, tabstop) = 8;\n   CPP_OPTION (pfile, operator_names) = 1;\n+#if DEFAULT_SIGNED_CHAR\n+  CPP_OPTION (pfile, signed_char) = 1;\n+#else\n+  CPP_OPTION (pfile, signed_char) = 0;\n+#endif\n \n   CPP_OPTION (pfile, pending) =\n     (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n@@ -761,6 +766,9 @@ init_builtins (pfile)\n   else if (CPP_OPTION (pfile, c99))\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n \n+  if (CPP_OPTION (pfile, signed_char) == 0)\n+    _cpp_define_builtin (pfile, \"__CHAR_UNSIGNED__ 1\");\n+\n   if (CPP_OPTION (pfile, lang) == CLK_STDC89\n       || CPP_OPTION (pfile, lang) == CLK_STDC94\n       || CPP_OPTION (pfile, lang) == CLK_STDC99)\n@@ -1186,7 +1194,9 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"fno-show-column\",          0,      OPT_fno_show_column)            \\\n   DEF_OPT(\"fpreprocessed\",            0,      OPT_fpreprocessed)              \\\n   DEF_OPT(\"fshow-column\",             0,      OPT_fshow_column)               \\\n+  DEF_OPT(\"fsigned-char\",             0,      OPT_fsigned_char)               \\\n   DEF_OPT(\"ftabstop=\",                no_num, OPT_ftabstop)                   \\\n+  DEF_OPT(\"funsigned-char\",           0,      OPT_funsigned_char)             \\\n   DEF_OPT(\"h\",                        0,      OPT_h)                          \\\n   DEF_OPT(\"idirafter\",                no_dir, OPT_idirafter)                  \\\n   DEF_OPT(\"imacros\",                  no_fil, OPT_imacros)                    \\\n@@ -1395,6 +1405,12 @@ cpp_handle_option (pfile, argc, argv, ignore)\n \tcase OPT_fno_show_column:\n \t  CPP_OPTION (pfile, show_column) = 0;\n \t  break;\n+\tcase OPT_fsigned_char:\n+\t  CPP_OPTION (pfile, signed_char) = 1;\n+\t  break;\n+\tcase OPT_funsigned_char:\n+\t  CPP_OPTION (pfile, signed_char) = 0;\n+\t  break;\n \tcase OPT_ftabstop:\n \t  /* Silently ignore empty string, non-longs and silly values.  */\n \t  if (arg[0] != '\\0')"}, {"sha": "70e62806c248858844d0dba328a85fe46a49db94", "filename": "gcc/cpplex.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -1903,14 +1903,13 @@ cpp_interpret_charconst (pfile, token, warn_multi, traditional, pchars_seen)\n   else if (chars_seen > 1 && !traditional && warn_multi)\n     cpp_warning (pfile, \"multi-character character constant\");\n \n-  /* If char type is signed, sign-extend the constant.  The\n-     __CHAR_UNSIGNED__ macro is set by the driver if appropriate.  */\n+  /* If char type is signed, sign-extend the constant.  */\n   if (token->type == CPP_CHAR && chars_seen)\n     {\n       unsigned int nbits = chars_seen * width;\n \n       mask = (unsigned HOST_WIDE_INT) ~0 >> (HOST_BITS_PER_WIDE_INT - nbits);\n-      if (pfile->spec_nodes.n__CHAR_UNSIGNED__->type == NT_MACRO\n+      if (CPP_OPTION (pfile, signed_char) == 0\n \t  || ((result >> (nbits - 1)) & 1) == 0)\n \tresult &= mask;\n       else"}, {"sha": "47169dcf27d843e8a77e171ead702bc9dab44342", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -240,6 +240,9 @@ struct cpp_options\n   /* Non-0 means -v, so print the full set of include dirs.  */\n   unsigned char verbose;\n \n+  /* Nonzero means chars are signed.  */\n+  unsigned char signed_char;\n+\n   /* Nonzero means use extra default include directories for C++.  */\n   unsigned char cplusplus;\n "}, {"sha": "c81cd269897f67d489b799a774c1687e95494295", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -216,16 +216,6 @@ This should be defined if @code{WINT_TYPE} depends on target dependent flags\n which are not accessible to the preprocessor.  Otherwise, it should not\n be defined.\n \n-@findex SIGNED_CHAR_SPEC\n-@item SIGNED_CHAR_SPEC\n-A C string constant that tells the GCC driver program options to\n-pass to CPP@.  By default, this macro is defined to pass the option\n-@option{-D__CHAR_UNSIGNED__} to CPP if @code{char} will be treated as\n-@code{unsigned char} by @code{cc1}.\n-\n-Do not define this macro unless you need to override the default\n-definition.\n-\n @findex CC1_SPEC\n @item CC1_SPEC\n A C string constant that tells the GCC driver program options to"}, {"sha": "41c62a9e4fe4d6e87c771d2629be10d3cde4291a", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -445,7 +445,6 @@ or with constant text in a single argument.\n \tif multilib_dir is not set or is \".\", output \"\".\n  %S     process STARTFILE_SPEC as a spec.  A capital S is actually used here.\n  %E     process ENDFILE_SPEC as a spec.  A capital E is actually used here.\n- %c\tprocess SIGNED_CHAR_SPEC as a spec.\n  %C     process CPP_SPEC as a spec.\n  %1\tprocess CC1_SPEC as a spec.\n  %2\tprocess CC1PLUS_SPEC as a spec.\n@@ -511,7 +510,7 @@ CC also knows implicitly that arguments starting in `-l' are to be\n treated as compiler output files, and passed to the linker in their\n proper position among the other output files.  */\n \f\n-/* Define the macros used for specs %a, %l, %L, %S, %c, %C, %1.  */\n+/* Define the macros used for specs %a, %l, %L, %S, %C, %1.  */\n \n /* config.h can define ASM_SPEC to provide extra args to the assembler\n    or extra switch-translations.  */\n@@ -582,17 +581,6 @@ proper position among the other output files.  */\n #define ENDFILE_SPEC \"\"\n #endif\n \n-/* This spec is used for telling cpp whether char is signed or not.  */\n-#ifndef SIGNED_CHAR_SPEC\n-/* Use #if rather than ?:\n-   because MIPS C compiler rejects like ?: in initializers.  */\n-#if DEFAULT_SIGNED_CHAR\n-#define SIGNED_CHAR_SPEC \"%{funsigned-char:-D__CHAR_UNSIGNED__}\"\n-#else\n-#define SIGNED_CHAR_SPEC \"%{!fsigned-char:-D__CHAR_UNSIGNED__}\"\n-#endif\n-#endif\n-\n #ifndef LINKER_NAME\n #define LINKER_NAME \"collect2\"\n #endif\n@@ -651,7 +639,6 @@ static const char *cpp_spec = CPP_SPEC;\n static const char *cpp_predefines = CPP_PREDEFINES;\n static const char *cc1_spec = CC1_SPEC;\n static const char *cc1plus_spec = CC1PLUS_SPEC;\n-static const char *signed_char_spec = SIGNED_CHAR_SPEC;\n static const char *asm_spec = ASM_SPEC;\n static const char *asm_final_spec = ASM_FINAL_SPEC;\n static const char *link_spec = LINK_SPEC;\n@@ -681,7 +668,7 @@ static const char *cpp_unique_options =\n  %{M} %{MM} %W{MF*} %{MG} %{MP} %{MQ*} %{MT*} %{M|MD|MM|MMD:%{o*:-MQ %*}}\\\n  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n- %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n+ %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n  %{fno-inline|O0|!O*:-D__NO_INLINE__} %{ffast-math:-D__FAST_MATH__}\\\n  %{fshort-wchar:-U__WCHAR_TYPE__ -D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n  %{ffreestanding:-D__STDC_HOSTED__=0} %{fno-hosted:-D__STDC_HOSTED__=0}\\\n@@ -694,6 +681,7 @@ static const char *cpp_unique_options =\n static const char *cpp_options =\n \"%(cpp_unique_options) %{std*} %{d*} %{W*} %{w} %{pedantic*}\\\n  %{fshow-column} %{fno-show-column}\\\n+ %{fsigned-char&funsigned-char}\\\n  %{fleading-underscore} %{fno-leading-underscore}\\\n  %{fno-operator-names} %{ftabstop=*}\";\n \n@@ -1382,7 +1370,6 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"libgcc\",\t\t\t&libgcc_spec),\n   INIT_STATIC_SPEC (\"startfile\",\t\t&startfile_spec),\n   INIT_STATIC_SPEC (\"switches_need_spaces\",\t&switches_need_spaces),\n-  INIT_STATIC_SPEC (\"signed_char\",\t\t&signed_char_spec),\n   INIT_STATIC_SPEC (\"predefines\",\t\t&cpp_predefines),\n   INIT_STATIC_SPEC (\"cross_compile\",\t\t&cross_compile),\n   INIT_STATIC_SPEC (\"version\",\t\t\t&compiler_version),\n@@ -1785,7 +1772,7 @@ load_specs (filename)\n \n    A suffix which starts with `*' is a definition for\n    one of the machine-specific sub-specs.  The \"suffix\" should be\n-   *asm, *cc1, *cpp, *link, *startfile, *signed_char, etc.\n+   *asm, *cc1, *cpp, *link, *startfile, etc.\n    The corresponding spec is stored in asm_spec, etc.,\n    rather than in the `compilers' vector.\n \n@@ -4783,12 +4770,6 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      return value;\n \t    break;\n \n-\t  case 'c':\n-\t    value = do_spec_1 (signed_char_spec, 0, NULL);\n-\t    if (value != 0)\n-\t      return value;\n-\t    break;\n-\n \t  case 'C':\n \t    {\n \t      const char *const spec"}, {"sha": "25e9549a006cb100d72bd597ea00847595ffe464", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -594,7 +594,7 @@ typedef char _Bool;\n \tSET_DEFAULT_TYPE_ATTRIBUTES SET_DEFAULT_DECL_ATTRIBUTES\t\t\\\n \tMERGE_MACHINE_TYPE_ATTRIBUTES MERGE_MACHINE_DECL_ATTRIBUTES\t\\\n \tMD_INIT_BUILTINS MD_EXPAND_BUILTIN ASM_OUTPUT_CONSTRUCTOR\t\\\n-\tASM_OUTPUT_DESTRUCTOR\n+\tASM_OUTPUT_DESTRUCTOR SIGNED_CHAR_SPEC\n \n /* And other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "199f6ca3d1dd9ceba34f83d715c11b5ce45bca92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -1,3 +1,7 @@\n+2002-02-02  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gcc.dg/cpp/uchar-1.c, uchar-2.c, uchar-3.c: New tests.\n+\n 2002-02-02  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c-torture/execute/991118-1.c: Revert 2002-01-29 change."}, {"sha": "3483e328101bc30a1fbeefae8ec62474ebab15c3", "filename": "gcc/testsuite/gcc.dg/cpp/uchar-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-1.c?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -0,0 +1,8 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-funsigned-char -fsigned-char\" } */\n+\n+#if defined (__CHAR_UNSIGNED__)\n+# error __CHAR_UNSIGNED__ defined\n+#endif"}, {"sha": "739573c1098cfcabf08dfef7f44e61a16eb8e2fd", "filename": "gcc/testsuite/gcc.dg/cpp/uchar-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-2.c?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -0,0 +1,8 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-funsigned-char -fsigned-char -traditional\" } */\n+\n+#if defined (__CHAR_UNSIGNED__)\n+# error __CHAR_UNSIGNED__ defined\n+#endif"}, {"sha": "41b987f5cab09371474e80c1e30ec5b3c956aab8", "filename": "gcc/testsuite/gcc.dg/cpp/uchar-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fuchar-3.c?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -0,0 +1,17 @@\n+/* Copyright (C) 2002 Free Software Foundation, Inc.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-funsigned-char -fpreprocessed\" } */\n+\n+/* Source: Ziemowit Laski.  -fpreprocessed doesn't define macros, but\n+   CPP would interpret charconsts based upon whether __CHAR_UNSIGNED__\n+   was defined.  */\n+\n+int foo()\n+{\n+  char f = 0x83;\n+  if (f == '\\x83')\t\t/* { dg-bogus \"always false\" } */\n+    f = 0;\n+\n+  return 0;\n+}"}, {"sha": "953e2d6706ff5fcbe1a0e861eab657b6b2c8b093", "filename": "gcc/tradcif.y", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftradcif.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftradcif.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcif.y?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -344,8 +344,7 @@ yylex ()\n \n     /* Sign-extend the constant if chars are signed on target machine.  */\n     {\n-      if (lookup ((const unsigned char *)\"__CHAR_UNSIGNED__\",\n-\t\t   sizeof (\"__CHAR_UNSIGNED__\")-1, -1)\n+      if (flag_signed_char == 0\n \t  || ((c >> (CHAR_TYPE_SIZE - 1)) & 1) == 0)\n \tyylval.integer.value = c & ((1 << CHAR_TYPE_SIZE) - 1);\n       else"}, {"sha": "3cff998e40639f3b4b88c1360af14e1d6fda7c34", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -86,6 +86,13 @@ int inhibit_warnings = 0;\n /* Non-0 means don't output the preprocessed program.  */\n int inhibit_output = 0;\n \n+/* Nonzero means chars are signed.  */\n+#if DEFAULT_SIGNED_CHAR\n+int flag_signed_char = 1;\n+#else\n+int flag_signed_char = 0;\n+#endif\n+\n /* Nonzero means warn if slash-star appears in a comment.  */\n \n int warn_comments;\n@@ -627,6 +634,10 @@ main (argc, argv)\n \t  user_label_prefix = \"_\";\n \telse if (!strcmp (argv[i], \"-fno-leading-underscore\"))\n \t  user_label_prefix = \"\";\n+\telse if (!strcmp (argv[i], \"-fsigned-char\"))\n+\t  flag_signed_char = 1;\n+\telse if (!strcmp (argv[i], \"-funsigned-char\"))\n+\t  flag_signed_char = 0;\n \tbreak;\n \n       case 'M':\n@@ -5105,6 +5116,9 @@ initialize_builtins ()\n #endif\n   install_value (\"__REGISTER_PREFIX__\",   REGISTER_PREFIX);\n   install_value (\"__USER_LABEL_PREFIX__\", user_label_prefix);\n+\n+  if (flag_signed_char == 0)\n+    install_value (\"__CHAR_UNSIGNED__\", \"1\");\n }\n #undef DSC\n #undef install_spec"}, {"sha": "89940d0c3f04211899751e740ec6926bb1a92e44", "filename": "gcc/tradcpp.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftradcpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fef3fd0eada944c2677ba0680393a12979f970f/gcc%2Ftradcpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.h?ref=0fef3fd0eada944c2677ba0680393a12979f970f", "patch": "@@ -35,6 +35,7 @@ extern void fancy_abort PARAMS ((int, const char *)) ATTRIBUTE_NORETURN;\n extern struct hashnode *lookup PARAMS ((const unsigned char *, int, int));\n extern int parse_c_expression PARAMS ((const char *));  /* in tradcif.y */\n extern int test_assertion PARAMS ((unsigned char **));\n+extern int flag_signed_char;\n \n #define is_idchar(x)\tISIDNUM(x)\n #define is_idstart(x)\tISIDST(x)"}]}