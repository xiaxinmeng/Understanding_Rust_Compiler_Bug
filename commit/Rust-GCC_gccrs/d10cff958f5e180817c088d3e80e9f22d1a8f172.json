{"sha": "d10cff958f5e180817c088d3e80e9f22d1a8f172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEwY2ZmOTU4ZjVlMTgwODE3YzA4OGQzZTgwZTlmMjJkMWE4ZjE3Mg==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-01-22T17:27:12Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-01-22T17:27:12Z"}, "message": "rs6000-builtin.def (ST_ELEMREV_V1TI, [...]): Add macro expansion.\n\ngcc/ChangeLog:\n\n2018-01-22 Carl Love <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-builtin.def (ST_ELEMREV_V1TI, LD_ELEMREV_V1TI,\n\tLVX_V1TI): Add macro expansion.\n\t* config/rs6000/rs6000-c.c (altivec_builtin_types): Add argument\n\tdefinitions for VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_VEC_ST,\n\tVSX_BUILTIN_VEC_XL, LD_ELEMREV_V1TI builtins.\n\t* config/rs6000/rs6000-p8swap.c (insn_is_swappable_p);\n\tChange check to determine if the instruction is a byte reversing\n\tentry.  Fix typo in comment.\n\t* config/rs6000/rs6000.c (altivec_expand_builtin): Add case entry\n\tfor VSX_BUILTIN_ST_ELEMREV_V1TI and VSX_BUILTIN_LD_ELEMREV_V1TI.\n\tAdd def_builtin calls for new builtins.\n\t* config/rs6000/vsx.md (vsx_st_elemrev_v1ti, vsx_ld_elemrev_v1ti):\n\tAdd define_insn expansion.\n\ngcc/testsuite/ChangeLog:\n\n2018-01-22  Carl Love  <cel@us.ibm.com>\n\t* gcc.target/powerpc/powerpc.exp: Add torture tests for\n\tbuiltins-4-runnable.c, builtins-6-runnable.c,\n\tbuiltins-5-p9-runnable.c, builtins-6-p9-runnable.c.\n\t* gcc.target/powerpc/builtins-6-runnable.c: New test file.\n\t* gcc.target/powerpc/builtins-4-runnable.c: Add additional tests\n\tfor signed/unsigned 128-bit and long long int loads.\n\nFrom-SVN: r256952", "tree": {"sha": "4a8456d6b3aedb748fa02286b212b6b15c0b4c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a8456d6b3aedb748fa02286b212b6b15c0b4c19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d10cff958f5e180817c088d3e80e9f22d1a8f172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10cff958f5e180817c088d3e80e9f22d1a8f172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d10cff958f5e180817c088d3e80e9f22d1a8f172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d10cff958f5e180817c088d3e80e9f22d1a8f172/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f25d7e06e2327990e34b317761d4bfc92f523bcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25d7e06e2327990e34b317761d4bfc92f523bcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25d7e06e2327990e34b317761d4bfc92f523bcf"}], "stats": {"total": 1640, "additions": 1605, "deletions": 35}, "files": [{"sha": "fcb68f479fc0b309d7cade20097848f6c8ad504e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -1,3 +1,19 @@\n+2018-01-22 Carl Love <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-builtin.def (ST_ELEMREV_V1TI, LD_ELEMREV_V1TI,\n+\tLVX_V1TI): Add macro expansion.\n+\t* config/rs6000/rs6000-c.c (altivec_builtin_types): Add argument\n+\tdefinitions for VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_VEC_ST,\n+\tVSX_BUILTIN_VEC_XL, LD_ELEMREV_V1TI builtins.\n+\t* config/rs6000/rs6000-p8swap.c (insn_is_swappable_p);\n+\tChange check to determine if the instruction is a byte reversing\n+\tentry.  Fix typo in comment.\n+\t* config/rs6000/rs6000.c (altivec_expand_builtin): Add case entry\n+\tfor VSX_BUILTIN_ST_ELEMREV_V1TI and VSX_BUILTIN_LD_ELEMREV_V1TI.\n+\tAdd def_builtin calls for new builtins.\n+\t* config/rs6000/vsx.md (vsx_st_elemrev_v1ti, vsx_ld_elemrev_v1ti):\n+\tAdd define_insn expansion.\n+\n 2018-01-22  Sebastian Perta  <sebastian.perta@renesas.com>\n \n \t* config/rl78/rl78.md: New define_expand \"umaxdi3\"."}, {"sha": "86604da46faf8607060e3bb66ec871bfda21264a", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -1242,6 +1242,7 @@ BU_ALTIVEC_X (LVXL_V8HI,\t\"lvxl_v8hi\",\t    MEM)\n BU_ALTIVEC_X (LVXL_V16QI,\t\"lvxl_v16qi\",\t    MEM)\n BU_ALTIVEC_X (LVX,\t\t\"lvx\",\t\t    MEM)\n BU_ALTIVEC_X (LVX_V2DF,\t\t\"lvx_v2df\",\t    MEM)\n+BU_ALTIVEC_X (LVX_V1TI,\t\t\"lvx_v1ti\",\t    MEM)\n BU_ALTIVEC_X (LVX_V2DI,\t\t\"lvx_v2di\",\t    MEM)\n BU_ALTIVEC_X (LVX_V4SF,\t\t\"lvx_v4sf\",\t    MEM)\n BU_ALTIVEC_X (LVX_V4SI,\t\t\"lvx_v4si\",\t    MEM)\n@@ -1792,12 +1793,14 @@ BU_VSX_X (STXVW4X_V4SF,\t      \"stxvw4x_v4sf\",\tMEM)\n BU_VSX_X (STXVW4X_V4SI,\t      \"stxvw4x_v4si\",\tMEM)\n BU_VSX_X (STXVW4X_V8HI,\t      \"stxvw4x_v8hi\",\tMEM)\n BU_VSX_X (STXVW4X_V16QI,      \"stxvw4x_v16qi\",\tMEM)\n+BU_VSX_X (LD_ELEMREV_V1TI,    \"ld_elemrev_v1ti\",  MEM)\n BU_VSX_X (LD_ELEMREV_V2DF,    \"ld_elemrev_v2df\",  MEM)\n BU_VSX_X (LD_ELEMREV_V2DI,    \"ld_elemrev_v2di\",  MEM)\n BU_VSX_X (LD_ELEMREV_V4SF,    \"ld_elemrev_v4sf\",  MEM)\n BU_VSX_X (LD_ELEMREV_V4SI,    \"ld_elemrev_v4si\",  MEM)\n BU_VSX_X (LD_ELEMREV_V8HI,    \"ld_elemrev_v8hi\",  MEM)\n BU_VSX_X (LD_ELEMREV_V16QI,   \"ld_elemrev_v16qi\", MEM)\n+BU_VSX_X (ST_ELEMREV_V1TI,    \"st_elemrev_v1ti\",  MEM)\n BU_VSX_X (ST_ELEMREV_V2DF,    \"st_elemrev_v2df\",  MEM)\n BU_VSX_X (ST_ELEMREV_V2DI,    \"st_elemrev_v2di\",  MEM)\n BU_VSX_X (ST_ELEMREV_V4SF,    \"st_elemrev_v4sf\",  MEM)"}, {"sha": "a68be511c4037effd90b8da0f81865bb4d1c8b0e", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -3162,16 +3162,27 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n   { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V1TI,\n+    RS6000_BTI_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_INTTI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V1TI,\n+    RS6000_BTI_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_V1TI, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTTI, 0 },\n   { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n   { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_INTDI, 0 },\n   { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI, 0 },\n   { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_long_long, 0 },\n+  { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVD2X_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTDI, 0 },\n+\n   { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V4SF,\n     RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_V4SF, 0 },\n   { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LXVW4X_V4SF,\n@@ -3206,6 +3217,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },\n   { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V1TI,\n+    RS6000_BTI_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_INTTI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V1TI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTTI, 0 },\n   { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n   { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_LD_ELEMREV_V2DI,\n@@ -4089,6 +4104,10 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n   { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double },\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V1TI,\n+    RS6000_BTI_void, RS6000_BTI_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_INTTI },\n+  { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V1TI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTTI },\n   { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DI,\n     RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI },\n   { VSX_BUILTIN_VEC_XST_BE, VSX_BUILTIN_ST_ELEMREV_V2DI,\n@@ -4189,9 +4208,19 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n   { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DI,\n+    RS6000_BTI_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_INTTI, 0 },\n+  { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n+  { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n+  { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DI,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTTI, 0 },\n   { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_unsigned_V2DI, 0 },\n+  { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_long_long, 0 },\n   { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DI,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_bool_V2DI, 0 },\n   { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVW4X_V4SF,\n@@ -4243,6 +4272,16 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n   { VSX_BUILTIN_VEC_ST, VSX_BUILTIN_STXVD2X_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double },\n+  { VSX_BUILTIN_VEC_ST, VSX_BUILTIN_STXVD2X_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTDI,\n+    ~RS6000_BTI_long_long },\n+  { VSX_BUILTIN_VEC_ST, VSX_BUILTIN_STXVD2X_V2DI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTDI,\n+    ~RS6000_BTI_unsigned_long_long },\n+  { VSX_BUILTIN_VEC_ST, VSX_BUILTIN_STXVD2X_V1TI,\n+    RS6000_BTI_void, RS6000_BTI_V1TI, RS6000_BTI_INTDI, ~RS6000_BTI_INTTI },\n+  { VSX_BUILTIN_VEC_ST, VSX_BUILTIN_STXVD2X_V1TI,\n+    RS6000_BTI_void, RS6000_BTI_unsigned_V1TI, RS6000_BTI_INTDI, ~RS6000_BTI_UINTTI },\n   { VSX_BUILTIN_VEC_ST, VSX_BUILTIN_STXVD2X_V2DI,\n     RS6000_BTI_void, RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_V2DI },\n   { VSX_BUILTIN_VEC_ST, VSX_BUILTIN_STXVD2X_V2DI,"}, {"sha": "1f95290d7b4205389e27989972787d7df5dd9234", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -873,10 +873,11 @@ insn_is_swappable_p (swap_web_entry *insn_entry, rtx insn,\n   if (insn_entry[i].is_store)\n     {\n       if (GET_CODE (body) == SET\n-\t  && GET_CODE (SET_SRC (body)) != UNSPEC)\n+\t  && GET_CODE (SET_SRC (body)) != UNSPEC\n+\t  && GET_CODE (SET_SRC (body)) != VEC_SELECT)\n \t{\n \t  rtx lhs = SET_DEST (body);\n-\t  /* Even without a swap, the LHS might be a vec_select for, say,\n+\t  /* Even without a swap, the RHS might be a vec_select for, say,\n \t     a byte-reversing store.  */\n \t  if (GET_CODE (lhs) != MEM)\n \t    return 0;"}, {"sha": "47e07cf6a4215c6c409ca0de02810a81f458ff11", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -15582,6 +15582,12 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n        unaligned-supporting store, so use a generic expander.  For\n        little-endian, the exact element-reversing instruction must\n        be used.  */\n+   case VSX_BUILTIN_ST_ELEMREV_V1TI:\n+     {\n+        enum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_store_v1ti\n+\t\t\t       : CODE_FOR_vsx_st_elemrev_v1ti);\n+        return altivec_expand_stv_builtin (code, exp);\n+      }\n     case VSX_BUILTIN_ST_ELEMREV_V2DF:\n       {\n \tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_store_v2df\n@@ -15856,6 +15862,12 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n \t\t\t       : CODE_FOR_vsx_ld_elemrev_v2df);\n \treturn altivec_expand_lv_builtin (code, exp, target, false);\n       }\n+    case VSX_BUILTIN_LD_ELEMREV_V1TI:\n+      {\n+\tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_load_v1ti\n+\t\t\t       : CODE_FOR_vsx_ld_elemrev_v1ti);\n+\treturn altivec_expand_lv_builtin (code, exp, target, false);\n+      }\n     case VSX_BUILTIN_LD_ELEMREV_V2DI:\n       {\n \tenum insn_code code = (BYTES_BIG_ENDIAN ? CODE_FOR_vsx_load_v2di\n@@ -17457,6 +17469,10 @@ altivec_init_builtins (void)\n     = build_function_type_list (void_type_node,\n \t\t\t\tV2DF_type_node, long_integer_type_node,\n \t\t\t\tpvoid_type_node, NULL_TREE);\n+  tree void_ftype_v1ti_long_pvoid\n+    = build_function_type_list (void_type_node,\n+\t\t\t\tV1TI_type_node, long_integer_type_node,\n+\t\t\t\tpvoid_type_node, NULL_TREE);\n   tree void_ftype_v2di_long_pvoid\n     = build_function_type_list (void_type_node,\n \t\t\t\tV2DI_type_node, long_integer_type_node,\n@@ -17612,6 +17628,8 @@ altivec_init_builtins (void)\n \t       VSX_BUILTIN_LD_ELEMREV_V16QI);\n   def_builtin (\"__builtin_vsx_st_elemrev_v2df\", void_ftype_v2df_long_pvoid,\n \t       VSX_BUILTIN_ST_ELEMREV_V2DF);\n+  def_builtin (\"__builtin_vsx_st_elemrev_v1ti\", void_ftype_v1ti_long_pvoid,\n+\t       VSX_BUILTIN_ST_ELEMREV_V1TI);\n   def_builtin (\"__builtin_vsx_st_elemrev_v2di\", void_ftype_v2di_long_pvoid,\n \t       VSX_BUILTIN_ST_ELEMREV_V2DI);\n   def_builtin (\"__builtin_vsx_st_elemrev_v4sf\", void_ftype_v4sf_long_pvoid,\n@@ -17935,6 +17953,8 @@ altivec_init_builtins (void)\n \t= build_function_type_list (void_type_node,\n \t\t\t\t    V1TI_type_node, long_integer_type_node,\n \t\t\t\t    pvoid_type_node, NULL_TREE);\n+      def_builtin (\"__builtin_vsx_ld_elemrev_v1ti\", v1ti_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_LD_ELEMREV_V1TI);\n       def_builtin (\"__builtin_vsx_lxvd2x_v1ti\", v1ti_ftype_long_pcvoid,\n \t\t   VSX_BUILTIN_LXVD2X_V1TI);\n       def_builtin (\"__builtin_vsx_stxvd2x_v1ti\", void_ftype_v1ti_long_pvoid,"}, {"sha": "c2016f1bf71f8289f33943817380d6534287e3df", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -1302,6 +1302,17 @@\n   \"lxvd2x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n+(define_insn \"vsx_ld_elemrev_v1ti\"\n+  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=wa\")\n+        (vec_select:V1TI\n+\t  (match_operand:V1TI 1 \"memory_operand\" \"Z\")\n+\t  (parallel [(const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V1TImode) && !BYTES_BIG_ENDIAN\"\n+{\n+   return \"lxvd2x %x0,%y1\\;xxpermdi %x0,%x0,%x0,2\";\n+}\n+  [(set_attr \"type\" \"vecload\")])\n+\n (define_insn \"vsx_ld_elemrev_v2df\"\n   [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n         (vec_select:V2DF\n@@ -1431,6 +1442,18 @@\n   \"lxvb16x %x0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n+(define_insn \"vsx_st_elemrev_v1ti\"\n+  [(set (match_operand:V1TI 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V1TI\n+          (match_operand:V1TI 1 \"vsx_register_operand\" \"+wa\")\n+          (parallel [(const_int 0)])))\n+   (clobber (match_dup 1))]\n+  \"VECTOR_MEM_VSX_P (V2DImode) && !BYTES_BIG_ENDIAN\"\n+{\n+  return \"xxpermdi %x1,%x1,%x1,2\\;stxvd2x %x1,%y0\";\n+}\n+  [(set_attr \"type\" \"vecstore\")])\n+\n (define_insn \"vsx_st_elemrev_v2df\"\n   [(set (match_operand:V2DF 0 \"memory_operand\" \"=Z\")\n         (vec_select:V2DF\n@@ -1481,7 +1504,7 @@\n {\n   if (!TARGET_P9_VECTOR)\n     {\n-      rtx subreg, perm[16], pcv;\n+      rtx mem_subreg, subreg, perm[16], pcv;\n       rtx tmp = gen_reg_rtx (V8HImode);\n       /* 2 is leftmost element in register */\n       unsigned int reorder[16] = {13,12,15,14,9,8,11,10,5,4,7,6,1,0,3,2};\n@@ -1496,11 +1519,21 @@\n       emit_insn (gen_altivec_vperm_v8hi_direct (tmp, operands[1],\n                                                 operands[1], pcv));\n       subreg = simplify_gen_subreg (V4SImode, tmp, V8HImode, 0);\n-      emit_insn (gen_vsx_st_elemrev_v4si (subreg, operands[0]));\n+      mem_subreg = simplify_gen_subreg (V4SImode, operands[0], V8HImode, 0);\n+      emit_insn (gen_vsx_st_elemrev_v4si (mem_subreg, subreg));\n       DONE;\n     }\n })\n \n+(define_insn \"*vsx_st_elemrev_v2di_internal\"\n+  [(set (match_operand:V2DI 0 \"memory_operand\" \"=Z\")\n+        (vec_select:V2DI\n+          (match_operand:V2DI 1 \"vsx_register_operand\" \"wa\")\n+          (parallel [(const_int 1) (const_int 0)])))]\n+  \"VECTOR_MEM_VSX_P (V2DImode) && !BYTES_BIG_ENDIAN && TARGET_P9_VECTOR\"\n+  \"stxvd2x %x1,%y0\"\n+  [(set_attr \"type\" \"vecstore\")])\n+\n (define_insn \"*vsx_st_elemrev_v8hi_internal\"\n   [(set (match_operand:V8HI 0 \"memory_operand\" \"=Z\")\n         (vec_select:V8HI\n@@ -1529,7 +1562,7 @@\n {\n   if (!TARGET_P9_VECTOR)\n     {\n-      rtx subreg, perm[16], pcv;\n+      rtx mem_subreg, subreg, perm[16], pcv;\n       rtx tmp = gen_reg_rtx (V16QImode);\n       /* 3 is leftmost element in register */\n       unsigned int reorder[16] = {12,13,14,15,8,9,10,11,4,5,6,7,0,1,2,3};\n@@ -1544,7 +1577,8 @@\n       emit_insn (gen_altivec_vperm_v16qi_direct (tmp, operands[1],\n                                                  operands[1], pcv));\n       subreg = simplify_gen_subreg (V4SImode, tmp, V16QImode, 0);\n-      emit_insn (gen_vsx_st_elemrev_v4si (subreg, operands[0]));\n+      mem_subreg = simplify_gen_subreg (V4SImode, operands[0], V16QImode, 0);\n+      emit_insn (gen_vsx_st_elemrev_v4si (mem_subreg, subreg));\n       DONE;\n     }\n })"}, {"sha": "03b9c1a958637aa150b92d90a7f2ae38000091de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -1,3 +1,11 @@\n+2018-01-22  Carl Love  <cel@us.ibm.com>\n+\t* gcc.target/powerpc/powerpc.exp: Add torture tests for\n+\tbuiltins-4-runnable.c, builtins-6-runnable.c,\n+\tbuiltins-5-p9-runnable.c, builtins-6-p9-runnable.c.\n+\t* gcc.target/powerpc/builtins-6-runnable.c: New test file.\n+\t* gcc.target/powerpc/builtins-4-runnable.c: Add additional tests\n+\tfor signed/unsigned 128-bit and long long int loads.\n+\n 2018-01-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/81933"}, {"sha": "de9b916de1703b584e00f331be1549c5d299d0bc", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-4-runnable.c", "status": "modified", "additions": 465, "deletions": 29, "changes": 494, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-4-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-4-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-4-runnable.c?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -1,10 +1,13 @@\n /* { dg-do run } */\n /* { dg-require-effective-target vsx_hw } */\n-/* { dg-options \"-maltivec -mvsx\" } */  \n+/* { dg-options \"-maltivec -mvsx\" } */\n \n #include <inttypes.h>\n #include <altivec.h> // vector\n+\n+#ifdef DEBUG\n #include <stdio.h>\n+#endif\n \n void abort (void);\n \n@@ -24,9 +27,11 @@ int main() {\n \n   float data_f[100];\n   double data_d[100];\n-   \n+  __uint128_t data_u128[100];\n+  __int128_t data_128[100];\n+\n   signed long long disp;\n-   \n+\n   vector signed char vec_c_expected1, vec_c_expected2, vec_c_result1, vec_c_result2;\n   vector unsigned char vec_uc_expected1, vec_uc_expected2,\n     vec_uc_result1, vec_uc_result2;\n@@ -42,11 +47,13 @@ int main() {\n     vec_sll_result1, vec_sll_result2;\n   vector unsigned long long vec_ull_expected1, vec_ull_expected2,\n     vec_ull_result1, vec_ull_result2;\n+  vector __int128_t vec_128_expected1, vec_128_result1;\n+  vector __uint128_t vec_u128_expected1, vec_u128_result1;\n   vector float vec_f_expected1, vec_f_expected2, vec_f_result1, vec_f_result2;\n   vector double vec_d_expected1, vec_d_expected2, vec_d_result1, vec_d_result2;\n   char buf[20];\n   signed long long zero = (signed long long) 0;\n-  \n+\n   for (i = 0; i < 100; i++)\n     {\n       data_c[i] = i;\n@@ -59,21 +66,304 @@ int main() {\n       data_ull[i] = i+1001;\n       data_f[i] = i+100000.0;\n       data_d[i] = i+1000000.0;\n+      data_128[i] = i + 12800000;\n+      data_u128[i] = i + 12800001;\n     }\n-  \n-  disp = 0;\n+\n+  // vec_xl() tests\n+  disp = 1;\n+\n+  vec_c_expected1 = (vector signed char){0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t 8, 9, 10, 11, 12, 13, 14, 15};\n+  vec_c_result1 = vec_xl (0, data_c);\n+\n+  vec_c_expected2 = (vector signed char){1, 2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t 10, 11, 12, 13, 14, 15, 16};\n+  vec_c_result2 = vec_xl (disp, data_c);\n+\n+  vec_uc_expected1 = (vector unsigned char){1, 2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t    10, 11, 12, 13, 14, 15, 16};\n+  vec_uc_result1 = vec_xl (0, data_uc);\n+\n+  vec_uc_expected2 = (vector unsigned char){2, 3, 4, 5, 6, 7, 8, 9, 10,\n+\t\t\t\t\t    11, 12, 13, 14, 15, 16, 17};\n+  vec_uc_result2 = vec_xl (disp, data_uc);\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_c_result1[i] != vec_c_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_c_result1[%d] = %d; vec_c_expected1[%d] = %d\\n\",\n+\t       i,  vec_c_result1[i], i, vec_c_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+      if (vec_c_result2[i] != vec_c_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_c_result2[%d] = %d; vec_c_expected2[%d] = %d\\n\",\n+\t       i,  vec_c_result2[i], i, vec_c_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_uc_result1[i] != vec_uc_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_uc_result1[%d] = %d; vec_uc_expected1[%d] = %d\\n\",\n+\t       i,  vec_uc_result1[i], i, vec_uc_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_uc_result2[i] != vec_uc_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_uc_result2[%d] = %d; vec_uc_expected2[%d] = %d\\n\",\n+\t       i,  vec_uc_result2[i], i, vec_uc_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  disp = 2;\n+  vec_ssi_expected1 = (vector signed short){10, 11, 12, 13, 14, 15, 16, 17};\n+\n+  vec_ssi_result1 = vec_xl (0, data_ssi);\n+\n+  vec_ssi_expected2 = (vector signed short){11, 12, 13, 14, 15, 16, 17, 18};\n+  vec_ssi_result2 = vec_xl (disp, data_ssi);\n+\n+  vec_usi_expected1 = (vector unsigned short){11, 12, 13, 14, 15, 16, 17, 18};\n+  vec_usi_result1 = vec_xl (0, data_usi);\n+\n+  vec_usi_expected2 = (vector unsigned short){12, 13, 14, 15, 16, 17, 18, 19};\n+  vec_usi_result2 = vec_xl (disp, data_usi);\n+\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (vec_ssi_result1[i] != vec_ssi_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_ssi_result1[%d] = %d; vec_ssi_expected1[%d] = %d\\n\",\n+\t       i,  vec_ssi_result1[i], i, vec_ssi_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+      if (vec_ssi_result2[i] != vec_ssi_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_ssi_result2[%d] = %d; vec_ssi_expected2[%d] = %d\\n\",\n+\t       i,  vec_ssi_result2[i], i, vec_ssi_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_usi_result1[i] != vec_usi_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_usi_result1[%d] = %d; vec_usi_expected1[%d] = %d\\n\",\n+\t       i,  vec_usi_result1[i], i, vec_usi_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_usi_result2[i] != vec_usi_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_usi_result2[%d] = %d; vec_usi_expected2[%d] = %d\\n\",\n+\t       i,  vec_usi_result2[i], i, vec_usi_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  disp = 4;\n+  vec_si_result1 = vec_xl (zero, data_si);\n+  vec_si_expected1 = (vector int){100, 101, 102, 103};\n+\n+  vec_si_result2 = vec_xl (disp, data_si);\n+  vec_si_expected2 = (vector int){101, 102, 103, 104};\n+\n+  vec_ui_result1 = vec_xl (zero, data_ui);\n+  vec_ui_expected1 = (vector unsigned int){101, 102, 103, 104};\n+\n+  vec_ui_result2 = vec_xl (disp, data_ui);\n+  vec_ui_expected2 = (vector unsigned int){102, 103, 104, 105};\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_si_result1[i] != vec_si_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_si_result1[%d] = %d; vec_si_expected1[%d] = %d\\n\",\n+\t       i,  vec_si_result1[i], i, vec_si_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+      if (vec_si_result2[i] != vec_si_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_si_result2[%d] = %d; vec_si_expected2[%d] = %d\\n\",\n+\t       i,  vec_si_result2[i], i, vec_si_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_ui_result1[i] != vec_ui_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_ui_result1[%d] = %d; vec_ui_expected1[%d] = %d\\n\",\n+\t       i,  vec_ui_result1[i], i, vec_ui_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_ui_result2[i] != vec_ui_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_ui_result2[%d] = %d; vec_ui_expected1[%d] = %d\\n\",\n+\t       i,  vec_si_result2[i], i, vec_ui_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  disp = 8;\n+  vec_sll_result1 = vec_xl (zero, data_sll);\n+  vec_sll_expected1 = (vector signed long long){1000, 1001};\n+\n+  vec_sll_result2 = vec_xl (disp, data_sll);\n+  vec_sll_expected2 = (vector signed long long){1001, 1002};\n+\n+  vec_ull_result1 = vec_xl (zero, data_ull);\n+  vec_ull_expected1 = (vector unsigned long long){1001, 1002};\n+\n+  vec_ull_result2 = vec_xl (disp, data_ull);\n+  vec_ull_expected2 = (vector unsigned long long){1002, 1003};\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_sll_result1[i] != vec_sll_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_sll_result1[%d] = %lld; vec_sll_expected1[%d] = %lld\\n\",\n+\t       i,  vec_sll_result1[i], i, vec_sll_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_sll_result2[i] != vec_sll_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_sll_result2[%d] = %lld; vec_sll_expected2[%d] = %lld\\n\",\n+\t       i,  vec_sll_result2[i], i, vec_sll_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_ull_result1[i] != vec_ull_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_ull_result1[%d] = %lld; vec_ull_expected1[%d] = %lld\\n\",\n+\t       i,  vec_ull_result1[i], i, vec_ull_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_ull_result2[i] != vec_ull_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_ull_result2[%d] = %lld; vec_ull_expected2[%d] = %lld\\n\",\n+\t       i,  vec_ull_result2[i], i, vec_ull_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  disp = 4;\n+  vec_f_result1 = vec_xl (zero, data_f);\n+  vec_f_expected1 = (vector float){100000.0, 100001.0, 100002.0, 100003.0};\n+\n+  vec_f_result2 = vec_xl (disp, data_f);\n+  vec_f_expected2 = (vector float){100001.0, 100002.0, 100003.0, 100004.0};\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_f_result1[i] != vec_f_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_f_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       i,  vec_f_result1[i], i, vec_f_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_f_result2[i] != vec_f_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_f_result2[%d] = %f; vec_f_expected2[%d] = %f\\n\",\n+\t       i,  vec_f_result2[i], i, vec_f_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  disp = 8;\n+  vec_d_result1 = vec_xl (zero, data_d);\n+  vec_d_expected1 = (vector double){1000000.0, 1000001.0};\n+\n+  vec_d_result2 = vec_xl (disp, data_d);\n+  vec_d_expected2 = (vector double){1000001.0, 1000002.0};\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_d_result1[i] != vec_d_expected1[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_d_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       i,  vec_d_result1[i], i, vec_d_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+\n+      if (vec_d_result2[i] != vec_d_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_d_result2[%d] = %f; vec_f_expected2[%d] = %f\\n\",\n+\t       i,  vec_d_result2[i], i, vec_d_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  vec_128_expected1 = (vector __int128_t){12800000};\n+  vec_128_result1 = vec_xl (zero, data_128);\n+\n+  if (vec_128_expected1[0] != vec_128_result1[0])\n+    {\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_128_result1[0] = %lld %llu; \",\n+\t       vec_128_result1[0] >> 64,\n+\t       vec_128_result1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+\tprintf(\"vec_128_expected1[0] = %lld %llu\\n\",\n+\t       vec_128_expected1[0] >> 64,\n+\t       vec_128_expected1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  vec_u128_result1 = vec_xl (zero, data_u128);\n+  vec_u128_expected1 = (vector __uint128_t){12800001};\n+  if (vec_u128_expected1[0] != vec_u128_result1[0])\n+    {\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl(), vec_u128_result1[0] = %lld; \",\n+\t       vec_u128_result1[0] >> 64,\n+\t       vec_u128_result1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+\tprintf(\"vec_u128_expected1[0] = %lld\\n\",\n+\t       vec_u128_expected1[0] >> 64,\n+\t       vec_u128_expected1[0] & (__int128_t)0xFFFFFFFFFFFFFFFF);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  // vec_xl_be() tests\n+  disp = 1;\n #ifdef __BIG_ENDIAN__\n-  printf(\"BIG ENDIAN\\n\");\n   vec_c_expected1 = (vector signed char){0, 1, 2, 3, 4, 5, 6, 7,\n \t\t\t\t\t 8, 9, 10, 11, 12, 13, 14, 15};\n #else\n-  printf(\"LITTLE ENDIAN\\n\");\n   vec_c_expected1 = (vector signed char){15, 14, 13, 12, 11, 10, 9, 8,\n \t\t\t\t\t 7, 6, 5, 4, 3, 2, 1, 0};\n #endif\n   vec_c_result1 = vec_xl_be (0, data_c);\n \n-  disp = 1;\n+\n \n #ifdef __BIG_ENDIAN__\n   vec_c_expected2 = (vector signed char){1, 2, 3, 4, 5, 6, 7, 8,\n@@ -108,16 +398,36 @@ int main() {\n   for (i = 0; i < 16; i++)\n     {\n       if (vec_c_result1[i] != vec_c_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_c_result1[%d] = %d; vec_c_expected1[%d] = %d\\n\",\n+\t       i,  vec_c_result1[i], i, vec_c_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_c_result2[i] != vec_c_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_c_result2[%d] = %d; vec_c_expected2[%d] = %d\\n\",\n+\t       i,  vec_c_result2[i], i, vec_c_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_uc_result1[i] != vec_uc_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_uc_result1[%d] = %d; vec_uc_expected1[%d] = %d\\n\",\n+\t       i,  vec_uc_result1[i], i, vec_uc_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_uc_result2[i] != vec_uc_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_uc_result2[%d] = %d; vec_uc_expected2[%d] = %d\\n\",\n+\t       i,  vec_uc_result1[i], i, vec_uc_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n     }\n \n   vec_ssi_result1 = vec_xl_be (zero, data_ssi);\n@@ -144,7 +454,7 @@ int main() {\n #else\n   vec_usi_expected1 = (vector unsigned short){18, 17, 16, 15, 14, 13, 12, 11};\n #endif\n-   \n+\n   disp = 2;\n   vec_usi_result2 = vec_xl_be (disp, data_usi);\n \n@@ -157,16 +467,36 @@ int main() {\n   for (i = 0; i < 8; i++)\n     {\n       if (vec_ssi_result1[i] != vec_ssi_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_ssi_result1[%d] = %d; vec_ssi_expected1[%d] = %d\\n\",\n+\t       i,  vec_ssi_result1[i], i, vec_ssi_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_ssi_result2[i] != vec_ssi_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_ssi_result2[%d] = %d; vec_ssi_expected2[%d] = %d\\n\",\n+\t       i,  vec_ssi_result2[i], i, vec_ssi_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_usi_result1[i] != vec_usi_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_usi_result1[%d] = %d; vec_usi_expected1[%d] = %d\\n\",\n+\t       i,  vec_usi_result1[i], i, vec_usi_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_usi_result2[i] != vec_usi_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_usi_result2[%d] = %d; vec_usi_expected2[%d] = %d\\n\",\n+\t       i,  vec_usi_result2[i], i, vec_usi_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n     }\n \n   vec_si_result1 = vec_xl_be (zero, data_si);\n@@ -207,16 +537,36 @@ int main() {\n   for (i = 0; i < 4; i++)\n     {\n       if (vec_si_result1[i] != vec_si_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_si_result1[%d] = %d; vec_si_expected1[%d] = %d\\n\",\n+\t       i,  vec_si_result1[i], i, vec_si_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_si_result2[i] != vec_si_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_si_result2[%d] = %d; vec_si_expected2[%d] = %d\\n\",\n+\t       i,  vec_si_result2[i], i, vec_si_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_ui_result1[i] != vec_ui_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_ui_result1[%d] = %d; vec_ui_expected1[%d] = %d\\n\",\n+\t       i,  vec_ui_result1[i], i, vec_ui_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_ui_result2[i] != vec_ui_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_ui_result2[%d] = %d; vec_ui_expected2[%d] = %d\\n\",\n+\t       i,  vec_ui_result2[i], i, vec_ui_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n     }\n \n   vec_sll_result1 = vec_xl_be (zero, data_sll);\n@@ -257,16 +607,36 @@ int main() {\n   for (i = 0; i < 2; i++)\n     {\n       if (vec_sll_result1[i] != vec_sll_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_sll_result1[%d] = %lld; vec_sll_expected1[%d] = %d\\n\",\n+\t       i,  vec_sll_result1[i], i, vec_sll_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_sll_result2[i] != vec_sll_expected2[i])\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_sll_result2[%d] = %lld; vec_sll_expected2[%d] = %d\\n\",\n+\t       i,  vec_sll_result2[i], i, vec_sll_expected2[i]);\n+#else\n \tabort ();\n+#endif\n \n       if (vec_ull_result1[i] != vec_ull_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_ull_result1[%d] = %lld; vec_ull_expected1[%d] = %d\\n\",\n+\t       i,  vec_ull_result1[i], i, vec_ull_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n \n       if (vec_ull_result2[i] != vec_ull_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_ull_result2[%d] = %lld; vec_ull_expected2[%d] = %d\\n\",\n+\t       i,  vec_ull_result2[i], i, vec_sll_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n     }\n \n   vec_f_result1 = vec_xl_be (zero, data_f);\n@@ -289,9 +659,20 @@ int main() {\n   for (i = 0; i < 4; i++)\n     {\n       if (vec_f_result1[i] != vec_f_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_f_result1[%d] = %f; vec_f_expected1[%d] = %f\\n\",\n+\t       i,  vec_f_result1[i], i, vec_f_expected1[i]);\n+#else\n+\tabort ();\n+#endif\n+\n       if (vec_f_result2[i] != vec_f_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_f_result2[%d] = %f; vec_f_expected2[%d] = %f\\n\",\n+\t       i,  vec_f_result2[i], i, vec_f_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n     }\n \n   vec_d_result1 = vec_xl_be (zero, data_d);\n@@ -314,8 +695,63 @@ int main() {\n   for (i = 0; i < 2; i++)\n     {\n       if (vec_d_result1[i] != vec_d_expected1[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_d_result2[%d] = %f; vec_d_expected2[%d] = %f\\n\",\n+\t       i,  vec_d_result2[i], i, vec_d_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+\n       if (vec_d_result2[i] != vec_d_expected2[i])\n-        abort ();\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_d_result2[%d] = %f; vec_d_expected2[%d] = %f\\n\",\n+\t       i,  vec_d_result2[i], i, vec_d_expected2[i]);\n+#else\n+\tabort ();\n+#endif\n+    }\n+\n+  disp = 0;\n+  vec_128_result1 = vec_xl_be (zero, data_128);\n+#ifdef __BIG_ENDIAN__\n+  vec_128_expected1 = (vector __int128_t){ (__int128_t)12800000 };\n+#else\n+  vec_128_expected1 = (vector __int128_t){ (__int128_t)12800000 };\n+#endif\n+\n+  if (vec_128_expected1[0] != vec_128_result1[0])\n+    {\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_128_result1[0] = %llu %llu;\",\n+\t       vec_128_result1[0] >> 64,\n+\t       vec_128_result1[0] & 0xFFFFFFFFFFFFFFFF);\n+\tprintf(\" vec_128_expected1[0] = %llu %llu\\n\",\n+\t       vec_128_expected1[0] >> 64,\n+\t       vec_128_expected1[0] & 0xFFFFFFFFFFFFFFFF);\n+#else\n+      abort ();\n+#endif\n+    }\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_u128_expected1 = (vector __uint128_t){ (__uint128_t)12800001 };\n+#else\n+  vec_u128_expected1 = (vector __uint128_t){ (__uint128_t)12800001 };\n+#endif\n+\n+  vec_u128_result1 = vec_xl_be (zero, data_u128);\n+\n+  if (vec_u128_expected1[0] != vec_u128_result1[0])\n+    {\n+#ifdef DEBUG\n+\tprintf(\"Error: vec_xl_be(), vec_u128_result1[0] = %llu %llu;\",\n+\t       vec_u128_result1[0] >> 64,\n+\t       vec_u128_result1[0] & 0xFFFFFFFFFFFFFFFF);\n+\tprintf(\" vec_u128_expected1[0] = %llu %llu\\n\",\n+\t       vec_u128_expected1[0] >> 64,\n+\t       vec_u128_expected1[0] & 0xFFFFFFFFFFFFFFFF);\n+#else\n+      abort ();\n+#endif\n     }\n }"}, {"sha": "5d313124b865d05b23bfa05e8851b2f662674cd6", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-6-runnable.c", "status": "added", "additions": 1001, "deletions": 0, "changes": 1001, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-6-runnable.c?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -0,0 +1,1001 @@\n+/* { dg-do run { target { powerpc*-*-* && { lp64 && p8vector_hw } } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n+\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <inttypes.h>\n+#include <altivec.h>\n+\n+#define TRUE 1\n+#define FALSE 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+int result_wrong_sc (vector signed char vec_expected,\n+\t\t     vector signed char vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_sc (vector signed char vec_expected,\n+\t       vector signed char vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected signed char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_expected[i]);\n+\n+  printf(\"\\nactual signed char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_uc (vector unsigned char vec_expected,\n+\t\t     vector unsigned char vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_uc (vector unsigned char vec_expected,\n+\t       vector unsigned char vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected signed char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_expected[i]);\n+\n+  printf(\"\\nactual signed char data\\n\");\n+  for (i = 0; i < 16; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_us (vector unsigned short vec_expected,\n+\t\t     vector unsigned short vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_us (vector unsigned short vec_expected,\n+\t       vector unsigned short vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected unsigned short data\\n\");\n+  for (i = 0; i < 8; i++)\n+    printf(\" %d,\", vec_expected[i]);\n+\n+  printf(\"\\nactual unsigned short data\\n\");\n+  for (i = 0; i < 8; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_ss (vector signed short vec_expected,\n+\t\t     vector signed short vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_ss (vector signed short vec_expected,\n+\t       vector signed short vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected signed short data\\n\");\n+  for (i = 0; i < 8; i++)\n+    printf(\" %d,\", vec_expected[i]);\n+\n+  printf(\"\\nactual signed short data\\n\");\n+  for (i = 0; i < 8; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_ui (vector unsigned int vec_expected,\n+\t\t     vector unsigned int vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_ui (vector unsigned int vec_expected,\n+\t       vector unsigned int vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected unsigned int data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %d,\", vec_expected[i]);\n+\n+  printf(\"\\nactual unsigned int data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_si (vector signed int vec_expected,\n+\t\t     vector signed int vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_si (vector signed int vec_expected,\n+\t       vector signed int vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected signed int data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %d,\", vec_expected[i]);\n+\n+  printf(\"\\nactual signed int data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %d,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_ull (vector unsigned long long vec_expected,\n+\t\t      vector unsigned long long vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_ull (vector unsigned long long vec_expected,\n+\t\tvector unsigned long long vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected unsigned long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+\t  //    printf(\" %llu,\", vec_expected[i]);\n+    printf(\" 0x%llx,\", vec_expected[i]);\n+\n+  printf(\"\\nactual unsigned long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+\t  //    printf(\" %llu,\", vec_actual[i]);\n+    printf(\"0x %llx,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_sll (vector signed long long vec_expected,\n+\t\t      vector signed long long vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_sll (vector signed long long vec_expected,\n+\t\tvector signed long long vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected signed long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %lld,\", vec_expected[i]);\n+\n+  printf(\"\\nactual signed long long data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %lld,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_u128 (vector __uint128_t vec_expected,\n+\t\t       vector __uint128_t vec_actual)\n+{\n+  int i;\n+\n+    if (vec_expected[0] != vec_actual[0])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_u128 (vector __uint128_t vec_expected,\n+\t\t vector __uint128_t vec_actual)\n+{\n+  printf(\"expected uint128 data\\n\");\n+  printf(\" %llu%llu\\n\", (unsigned long long)(vec_expected[0] >> 64),\n+\t (unsigned long long)(vec_expected[0] & 0xFFFFFFFFFFFFFFFF));\n+\n+  printf(\"\\nactual uint128 data\\n\");\n+  printf(\" %llu%llu\\n\", (unsigned long long)(vec_actual[0] >> 64),\n+\t (unsigned long long)(vec_actual[0] & 0xFFFFFFFFFFFFFFFF));\n+}\n+\n+\n+int result_wrong_s128 (vector __int128_t vec_expected,\n+\t\t       vector __int128_t vec_actual)\n+{\n+  int i;\n+\n+    if (vec_expected[0] != vec_actual[0])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_s128 (vector __int128 vec_expected,\n+\t\t vector __int128 vec_actual)\n+{\n+  printf(\"expected int128 data\\n\");\n+  printf(\" %lld%llu\\n\", (signed long long)(vec_expected[0] >> 64),\n+\t (unsigned long long)(vec_expected[0] & 0xFFFFFFFFFFFFFFFF));\n+\n+  printf(\"\\nactual int128 data\\n\");\n+  printf(\" %lld%llu\\n\", (signed long long)(vec_actual[0] >> 64),\n+\t (unsigned long long)(vec_actual[0] & 0xFFFFFFFFFFFFFFFF));\n+}\n+\n+int result_wrong_d (vector double vec_expected,\n+\t\t    vector double vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_d (vector double vec_expected,\n+\t      vector double vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected double data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %f,\", vec_expected[i]);\n+\n+  printf(\"\\nactual double data\\n\");\n+  for (i = 0; i < 2; i++)\n+    printf(\" %f,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int result_wrong_f (vector float vec_expected,\n+\t\t    vector float vec_actual)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (vec_expected[i] != vec_actual[i])\n+      return TRUE;\n+\n+  return FALSE;\n+}\n+\n+void print_f (vector float vec_expected,\n+\t      vector float vec_actual)\n+{\n+  int i;\n+\n+  printf(\"expected float data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %f,\", vec_expected[i]);\n+\n+  printf(\"\\nactual float data\\n\");\n+  for (i = 0; i < 4; i++)\n+    printf(\" %f,\", vec_actual[i]);\n+  printf(\"\\n\");\n+}\n+\n+int main() {\n+   int i, j;\n+   size_t len;\n+   vector signed char store_data_sc;\n+   vector unsigned char store_data_uc;\n+   vector signed int store_data_si;\n+   vector unsigned int store_data_ui;\n+   vector __int128_t store_data_s128;\n+   vector __uint128_t store_data_u128;\n+   vector signed long long int store_data_sll;\n+   vector unsigned long long int store_data_ull;\n+   vector signed short store_data_ss;\n+   vector unsigned short store_data_us;\n+   vector double store_data_d;\n+   vector float store_data_f;\n+\n+   signed char *address_sc;\n+   unsigned char *address_uc;\n+   signed int *address_si;\n+   unsigned int *address_ui;\n+   __int128_t *address_s128;\n+   __uint128_t *address_u128;\n+   signed long long int *address_sll;\n+   unsigned long long int *address_ull;\n+   signed short int *address_ss;\n+   unsigned short int *address_us;\n+   double *address_d;\n+   float *address_f;\n+\n+   vector unsigned char *datap;\n+\n+   vector unsigned char vec_uc_expected1, vec_uc_result1;\n+   vector signed char vec_sc_expected1, vec_sc_result1;\n+   vector signed int vec_si_expected1, vec_si_result1;\n+   vector unsigned int vec_ui_expected1, vec_ui_result1;\n+   vector __int128_t vec_s128_expected1, vec_s128_result1;\n+   vector __uint128_t vec_u128_expected1, vec_u128_result1;\n+   vector signed long long int vec_sll_expected1, vec_sll_result1;\n+   vector unsigned long long int vec_ull_expected1, vec_ull_result1;\n+   vector signed short int vec_ss_expected1, vec_ss_result1;\n+   vector unsigned short int vec_us_expected1, vec_us_result1;\n+   vector double vec_d_expected1, vec_d_result1;\n+   vector float vec_f_expected1, vec_f_result1;\n+\n+   signed long long disp;\n+\n+   /* VEC_XST */\n+   disp = 0;\n+   vec_sc_expected1 = (vector signed char){ -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t    1, 2, 3, 4, 5, 6, 7, 8 };\n+   store_data_sc = (vector signed char){  -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t  1, 2, 3, 4, 5, 6, 7, 8 };\n+\n+   for (i=0; i<16; i++)\n+     vec_sc_result1[i] = 0;\n+\n+   address_sc = &vec_sc_result1[0];\n+\n+   vec_xst (store_data_sc, disp, address_sc);\n+\n+   if (result_wrong_sc (vec_sc_expected1, vec_sc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, sc disp = 0, result does not match expected result\\n\");\n+       print_sc (vec_sc_expected1, vec_sc_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 2;\n+   vec_sc_expected1 = (vector signed char){  0, 0, -7, -6, -5, -4, -3, -2,\n+\t\t\t\t\t     -1, 0, 1, 2, 3, 4, 5, 6 };\n+   store_data_sc = (vector signed char){ -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t 1, 2, 3, 4, 5, 6, 7, 8 };\n+\n+   for (i=0; i<16; i++)\n+     vec_sc_result1[i] = 0;\n+\n+   address_sc = &vec_sc_result1[0];\n+\n+   vec_xst (store_data_sc, disp, address_sc);\n+\n+   if (result_wrong_sc (vec_sc_expected1, vec_sc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, sc disp = 2, result does not match expected result\\n\");\n+       print_sc (vec_sc_expected1, vec_sc_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_uc_expected1 = (vector unsigned char){ 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t      8, 9, 10, 11, 12, 13, 14, 15 };\n+   store_data_uc = (vector unsigned char){ 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t   8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+   for (i=0; i<16; i++)\n+     vec_uc_result1[i] = 0;\n+\n+   address_uc = &vec_uc_result1[0];\n+\n+   vec_xst (store_data_uc, disp, address_uc);\n+\n+   if (result_wrong_uc (vec_uc_expected1, vec_uc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, uc disp = 0, result does not match expected result\\n\");\n+       print_uc (vec_uc_expected1, vec_uc_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_ss_expected1 = (vector signed short int){ -4, -3, -2, -1, 0, 1, 2, 3 };\n+   store_data_ss = (vector signed short int){ -4, -3, -2, -1, 0, 1, 2, 3 };\n+\n+   for (i=0; i<8; i++)\n+     vec_ss_result1[i] = 0;\n+\n+   address_ss = &vec_ss_result1[0];\n+\n+   vec_xst (store_data_ss, disp, address_ss);\n+\n+   if (result_wrong_ss (vec_ss_expected1, vec_ss_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, ss disp = 0, result does not match expected result\\n\");\n+       print_ss (vec_ss_expected1, vec_ss_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_us_expected1 = (vector unsigned short int){ 0, 1, 2, 3, 4, 5, 6, 7 };\n+   store_data_us = (vector unsigned short int){ 0, 1, 2, 3, 4, 5, 6, 7 };\n+\n+   for (i=0; i<8; i++)\n+     vec_us_result1[i] = 0;\n+\n+   address_us = &vec_us_result1[0];\n+\n+   vec_xst (store_data_us, disp, address_us);\n+\n+   if (result_wrong_us (vec_us_expected1, vec_us_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, us disp = 0, result does not match expected result\\n\");\n+       print_us (vec_us_expected1, vec_us_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_si_expected1 = (vector signed int){ -2, -1, 0, 1 };\n+   store_data_si = (vector signed int){ -2, -1, 0, 1 };\n+\n+   for (i=0; i<4; i++)\n+     vec_si_result1[i] = 0;\n+\n+   address_si = &vec_si_result1[0];\n+\n+   vec_xst (store_data_si, disp, address_si);\n+\n+   if (result_wrong_si (vec_si_expected1, vec_si_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, si disp = 0, result does not match expected result\\n\");\n+       print_si (vec_si_expected1, vec_si_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_ui_expected1 = (vector unsigned int){ -2, -1, 0, 1 };\n+   store_data_ui = (vector unsigned int){ -2, -1, 0, 1 };\n+\n+   for (i=0; i<4; i++)\n+     vec_ui_result1[i] = 0;\n+\n+   address_ui = &vec_ui_result1[0];\n+\n+   vec_xst (store_data_ui, disp, address_ui);\n+\n+   if (result_wrong_ui (vec_ui_expected1, vec_ui_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, ui disp = 0, result does not match expected result\\n\");\n+       print_ui (vec_ui_expected1, vec_ui_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_sll_expected1 = (vector signed long long){ -1, 0 };\n+   store_data_sll = (vector signed long long ){ -1, 0 };\n+\n+   for (i=0; i<2; i++)\n+     vec_sll_result1[i] = 0;\n+\n+   address_sll = (signed long long *)(&vec_sll_result1[0]);\n+\n+   vec_xst (store_data_sll, disp, address_sll);\n+\n+   if (result_wrong_sll (vec_sll_expected1, vec_sll_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, sll disp = 0, result does not match expected result\\n\");\n+       print_sll (vec_sll_expected1, vec_sll_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_ull_expected1 = (vector unsigned long long){ 0, 1 };\n+   store_data_ull = (vector unsigned long long){  0, 1 };\n+\n+   for (i=0; i<2; i++)\n+     vec_ull_result1[i] = 0;\n+\n+   address_ull = (unsigned long long int *)(&vec_ull_result1[0]);\n+\n+   vec_xst (store_data_ull, disp, address_ull);\n+\n+   if (result_wrong_ull (vec_ull_expected1, vec_ull_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, ull disp = 0, result does not match expected result\\n\");\n+       print_ull (vec_ull_expected1, vec_ull_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_s128_expected1 = (vector __int128_t){ 12345 };\n+   store_data_s128 = (vector __int128_t){  12345 };\n+\n+   vec_s128_result1[0] = 0;\n+\n+   address_s128 = (__int128_t *)(&vec_s128_result1[0]);\n+\n+   vec_xst (store_data_s128, disp, address_s128);\n+\n+   if (result_wrong_s128 (vec_s128_expected1, vec_s128_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, s128 disp = 0, result does not match expected result\\n\");\n+       print_s128 (vec_s128_expected1, vec_s128_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_u128_expected1 = (vector __uint128_t){ 12345 };\n+   store_data_u128 = (vector __uint128_t){  12345 };\n+\n+   vec_u128_result1[0] = 0;\n+\n+   address_u128 = (__int128_t *)(&vec_u128_result1[0]);\n+\n+   vec_xst (store_data_u128, disp, address_u128);\n+\n+   if (result_wrong_u128 (vec_u128_expected1, vec_u128_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, u128 disp = 0, result does not match expected result\\n\");\n+       print_u128 (vec_u128_expected1, vec_u128_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_d_expected1 = (vector double){ 0, 1 };\n+   store_data_d = (vector double){  0, 1 };\n+\n+   for (i=0; i<2; i++)\n+     vec_d_result1[i] = 0;\n+\n+   address_d = (double *)(&vec_d_result1[0]);\n+\n+   vec_xst (store_data_d, disp, address_d);\n+\n+   if (result_wrong_d (vec_d_expected1, vec_d_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, double disp = 0, result does not match expected result\\n\");\n+       print_d (vec_d_expected1, vec_d_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+   vec_f_expected1 = (vector float){ 0, 1 };\n+   store_data_f = (vector float){  0, 1 };\n+\n+   for (i=0; i<4; i++)\n+     vec_f_result1[i] = 0;\n+\n+   address_f = (float *)(&vec_f_result1[0]);\n+\n+   vec_xst (store_data_f, disp, address_f);\n+\n+   if (result_wrong_f (vec_f_expected1, vec_f_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst, float disp = 0, result does not match expected result\\n\");\n+       print_f (vec_f_expected1, vec_f_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   /* VEC_XST_BE, these always load in BE order regardless of\n+      machine endianess.  */\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_sc_expected1 = (vector signed char){ -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t    1, 2, 3, 4, 5, 6, 7, 8 };\n+#else\n+   vec_sc_expected1 = (vector signed char){ 8, 7, 6, 5, 4, 3, 2, 1,\n+\t\t\t\t\t    0, -1, -2, -3, -4, -5, -6, -7 };\n+#endif\n+   store_data_sc = (vector signed char){  -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t  1, 2, 3, 4, 5, 6, 7, 8 };\n+\n+   for (i=0; i<16; i++)\n+     vec_sc_result1[i] = 0;\n+\n+   address_sc = &vec_sc_result1[0];\n+\n+   vec_xst_be (store_data_sc, disp, address_sc);\n+\n+   if (result_wrong_sc (vec_sc_expected1, vec_sc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, sc disp = 0, result does not match expected result\\n\");\n+       print_sc (vec_sc_expected1, vec_sc_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 2;\n+#ifdef __BIG_ENDIAN__\n+   vec_sc_expected1 = (vector signed char){  0, 0, -7, -6, -5, -4, -3, -2,\n+\t\t\t\t\t     -1, 0, 1, 2, 3, 4, 5, 6 };\n+#else\n+   vec_sc_expected1 = (vector signed char){  0, 0, 8, 7, 6, 5, 4, 3,\n+\t\t\t\t\t     2, 1, 0, -1, -2, -3, -4, -5 };\n+#endif\n+   store_data_sc = (vector signed char){ -7, -6, -5, -4, -3, -2, -1, 0,\n+\t\t\t\t\t 1, 2, 3, 4, 5, 6, 7, 8 };\n+\n+   for (i=0; i<16; i++)\n+     vec_sc_result1[i] = 0;\n+\n+   address_sc = &vec_sc_result1[0];\n+\n+   vec_xst_be (store_data_sc, disp, address_sc);\n+\n+   if (result_wrong_sc (vec_sc_expected1, vec_sc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, sc disp = 2, result does not match expected result\\n\");\n+       print_sc (vec_sc_expected1, vec_sc_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_uc_expected1 = (vector unsigned char){ 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t      8, 9, 10, 11, 12, 13, 14, 15 };\n+#else\n+   vec_uc_expected1 = (vector unsigned char){ 15, 14, 13, 12, 11, 10, 9, 8,\n+\t\t\t\t\t      7, 6, 5, 4, 3, 2, 1 };\n+#endif\n+   store_data_uc = (vector unsigned char){ 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t   8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+   for (i=0; i<16; i++)\n+     vec_uc_result1[i] = 0;\n+\n+   address_uc = &vec_uc_result1[0];\n+\n+   vec_xst_be (store_data_uc, disp, address_uc);\n+\n+   if (result_wrong_uc (vec_uc_expected1, vec_uc_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, uc disp = 0, result does not match expected result\\n\");\n+       print_uc (vec_uc_expected1, vec_uc_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_ss_expected1 = (vector signed short int){ -4, -3, -2, -1, 0, 1, 2, 3 };\n+#else\n+   vec_ss_expected1 = (vector signed short int){ 3, 2, 1, 0, -1, -2, -3, -4 };\n+#endif\n+   store_data_ss = (vector signed short int){ -4, -3, -2, -1, 0, 1, 2, 3 };\n+\n+   for (i=0; i<8; i++)\n+     vec_ss_result1[i] = 0;\n+\n+   address_ss = &vec_ss_result1[0];\n+\n+   vec_xst_be (store_data_ss, disp, address_ss);\n+\n+   if (result_wrong_ss (vec_ss_expected1, vec_ss_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, ss disp = 0, result does not match expected result\\n\");\n+       print_ss (vec_ss_expected1, vec_ss_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_us_expected1 = (vector unsigned short int){ 0, 1, 2, 3, 4, 5, 6, 7 };\n+#else\n+   vec_us_expected1 = (vector unsigned short int){ 7, 6, 5, 4, 3, 2, 1, 0 };\n+#endif\n+   store_data_us = (vector unsigned short int){ 0, 1, 2, 3, 4, 5, 6, 7 };\n+\n+   for (i=0; i<8; i++)\n+     vec_us_result1[i] = 0;\n+\n+   address_us = &vec_us_result1[0];\n+\n+   vec_xst_be (store_data_us, disp, address_us);\n+\n+   if (result_wrong_us (vec_us_expected1, vec_us_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, us disp = 0, result does not match expected result\\n\");\n+       print_us (vec_us_expected1, vec_us_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+#if 0\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_si_expected1 = (vector signed int){ -2, -1, 0, 1 };\n+#else\n+   vec_si_expected1 = (vector signed int){ 1, 0, -1, -2 };\n+#endif\n+   store_data_si = (vector signed int){ -2, -1, 0, 1 };\n+\n+   for (i=0; i<4; i++)\n+     vec_si_result1[i] = 0;\n+\n+   address_si = &vec_si_result1[0];\n+\n+   vec_xst_be (store_data_si, disp, address_si);\n+   if (result_wrong_si (vec_si_expected1, vec_si_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, si disp = 0, result does not match expected result\\n\");\n+       print_si (vec_si_expected1, vec_si_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+#endif\n+\n+#if 0\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_ui_expected1 = (vector unsigned int){ -2, -1, 0, 1 };\n+#else\n+   vec_ui_expected1 = (vector unsigned int){ 1, 0, -1, -2 };\n+#endif\n+   store_data_ui = (vector unsigned int){ -2, -1, 0, 1 };\n+\n+   for (i=0; i<4; i++)\n+     vec_ui_result1[i] = 0;\n+\n+   address_ui = &vec_ui_result1[0];\n+\n+   vec_xst_be (store_data_ui, disp, address_ui);\n+\n+   if (result_wrong_ui (vec_ui_expected1, vec_ui_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, ui disp = 0, result does not match expected result\\n\");\n+       print_ui (vec_ui_expected1, vec_ui_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+#endif\n+   \n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_sll_expected1 = (vector signed long long){ -1, 0 };\n+#else\n+   vec_sll_expected1 = (vector signed long long){ 0, -1 };\n+#endif\n+   store_data_sll = (vector signed long long ){ -1, 0 };\n+\n+   for (i=0; i<2; i++)\n+     vec_sll_result1[i] = 0;\n+\n+   address_sll = (signed long long *)(&vec_sll_result1[0]);\n+\n+   vec_xst_be (store_data_sll, disp, address_sll);\n+\n+   if (result_wrong_sll (vec_sll_expected1, vec_sll_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, sll disp = 0, result does not match expected result\\n\");\n+       print_sll (vec_sll_expected1, vec_sll_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_ull_expected1 = (vector unsigned long long){ 0, 1234567890123456 };\n+#else\n+   vec_ull_expected1 = (vector unsigned long long){1234567890123456, 0 };\n+#endif   \n+   store_data_ull = (vector unsigned long long){  0, 1234567890123456 };\n+\n+   for (i=0; i<2; i++)\n+     vec_ull_result1[i] = 0;\n+\n+   address_ull = (unsigned long long int *)(&vec_ull_result1[0]);\n+\n+   vec_xst_be (store_data_ull, disp, address_ull);\n+\n+   if (result_wrong_ull (vec_ull_expected1, vec_ull_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, ull disp = 0, result does not match expected result\\n\");\n+       print_ull (vec_ull_expected1, vec_ull_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+\n+#ifdef __BIG_ENDIAN__\n+   vec_s128_expected1 = (vector __int128_t){ (__uint128_t)12345678911121314 };\n+#else\n+   vec_s128_expected1 = (vector __int128_t){ (__uint128_t)12345678911121314 };\n+#endif\n+   store_data_s128 = (vector __int128_t)(__uint128_t){  12345678911121314 };\n+\n+   vec_s128_result1[0] = 0;\n+\n+   address_s128 = (__int128_t *)(&vec_s128_result1[0]);\n+\n+   vec_xst_be (store_data_s128, disp, address_s128);\n+\n+   if (result_wrong_s128 (vec_s128_expected1, vec_s128_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, s128 disp = 0, result does not match expected result\\n\");\n+       print_s128 (vec_s128_expected1, vec_s128_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_u128_expected1 = (vector __uint128_t){ (__uint128_t)1234567891112131415 };\n+#else\n+   vec_u128_expected1 = (vector __uint128_t){ (__uint128_t)1234567891112131415 };\n+#endif\n+   store_data_u128 = (vector __uint128_t){ (__uint128_t)1234567891112131415 };\n+\n+   vec_u128_result1[0] = 0;\n+\n+   address_u128 = (__int128_t *)(&vec_u128_result1[0]);\n+\n+   vec_xst_be (store_data_u128, disp, address_u128);\n+\n+   if (result_wrong_u128 (vec_u128_expected1, vec_u128_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, u128 disp = 0, result does not match expected result\\n\");\n+       print_u128 (vec_u128_expected1, vec_u128_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_d_expected1 = (vector double){ 0.0, 1.1 };\n+#else\n+   vec_d_expected1 = (vector double){ 1.1, 0.0 };\n+#endif\n+   store_data_d = (vector double){  0.0, 1.1 };\n+\n+   for (i=0; i<2; i++)\n+     vec_d_result1[i] = 0;\n+\n+   address_d = (double *)(&vec_d_result1[0]);\n+\n+   vec_xst_be (store_data_d, disp, address_d);\n+\n+   if (result_wrong_d (vec_d_expected1, vec_d_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, double disp = 0, result does not match expected result\\n\");\n+       print_d (vec_d_expected1, vec_d_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+\n+#if 0\n+   disp = 0;\n+#ifdef __BIG_ENDIAN__\n+   vec_f_expected1 = (vector float){ 0.0, 1.2, 2.3, 3.4 };\n+#else\n+   vec_f_expected1 = (vector float){ 3.4, 2.3, 1.2, 0.0 };\n+#endif\n+   store_data_f = (vector float){ 0.0, 1.2, 2.3, 3.4 };\n+\n+   for (i=0; i<4; i++)\n+     vec_f_result1[i] = 0;\n+\n+   address_f = (float *)(&vec_f_result1[0]);\n+\n+   vec_xst_be (store_data_f, disp, address_f);\n+\n+   if (result_wrong_f (vec_f_expected1, vec_f_result1))\n+     {\n+#ifdef DEBUG\n+       printf(\"Error: vec_xst_be, float disp = 0, result does not match expected result\\n\");\n+       print_f (vec_f_expected1, vec_f_result1);\n+#else\n+       abort();\n+#endif\n+     }\n+#endif\n+}"}, {"sha": "148acb1a1888263e0fffb0574eec8886a32db346", "filename": "gcc/testsuite/gcc.target/powerpc/powerpc.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpowerpc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d10cff958f5e180817c088d3e80e9f22d1a8f172/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpowerpc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpowerpc.exp?ref=d10cff958f5e180817c088d3e80e9f22d1a8f172", "patch": "@@ -49,4 +49,16 @@ gcc-dg-runtest [list $srcdir/$subdir/savres.c] \"\" $alti\n \n # All done.\n torture-finish\n+\n+torture-init \n+# Test load/store builtins at multiple optimizations\n+set-torture-options [list -O0 -Os -O1 -O2 -O3]\n+gcc-dg-runtest [list $srcdir/$subdir/builtins-4-runnable.c \\\n+\t\t$srcdir/$subdir/builtins-6-runnable.c \\\n+\t\t$srcdir/$subdir/builtins-5-p9-runnable.c \\\n+\t       \t$srcdir/$subdir/builtins-6-p9-runnable.c] \"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+torture-finish\n+\n dg-finish"}]}