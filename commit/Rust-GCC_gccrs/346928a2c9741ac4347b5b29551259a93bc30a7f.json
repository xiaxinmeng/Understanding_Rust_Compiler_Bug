{"sha": "346928a2c9741ac4347b5b29551259a93bc30a7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2OTI4YTJjOTc0MWFjNDM0N2I1YjI5NTUxMjU5YTkzYmMzMGE3Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:36:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:36:26Z"}, "message": "DR 657\n\n\tDR 657\n\t* pt.c (tsubst_function_type): Call abstract_virtuals_error_sfinae.\n\t(tsubst_arg_types): Likewise.\n\nFrom-SVN: r196733", "tree": {"sha": "df6b567bd64a3f40acea6f902b5d401a6d9e733c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df6b567bd64a3f40acea6f902b5d401a6d9e733c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/346928a2c9741ac4347b5b29551259a93bc30a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346928a2c9741ac4347b5b29551259a93bc30a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346928a2c9741ac4347b5b29551259a93bc30a7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346928a2c9741ac4347b5b29551259a93bc30a7f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0cc5ae8d62ce64803914496b45b817f27813cff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc5ae8d62ce64803914496b45b817f27813cff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cc5ae8d62ce64803914496b45b817f27813cff2"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "2f5f87313a873882930c2d83d0d817266656e261", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346928a2c9741ac4347b5b29551259a93bc30a7f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346928a2c9741ac4347b5b29551259a93bc30a7f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=346928a2c9741ac4347b5b29551259a93bc30a7f", "patch": "@@ -1,5 +1,9 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tDR 657\n+\t* pt.c (tsubst_function_type): Call abstract_virtuals_error_sfinae.\n+\t(tsubst_arg_types): Likewise.\n+\n \tDR 1518\n \tPR c++/54835\n \t* call.c (convert_like_real): Check for explicit constructors"}, {"sha": "cad1c60a118fb52b43a5cab1b2b9a70e6eb1f76a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346928a2c9741ac4347b5b29551259a93bc30a7f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346928a2c9741ac4347b5b29551259a93bc30a7f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=346928a2c9741ac4347b5b29551259a93bc30a7f", "patch": "@@ -10850,6 +10850,9 @@ tsubst_arg_types (tree arg_types,\n           }\n         return error_mark_node;\n     }\n+    /* DR 657. */\n+    if (abstract_virtuals_error_sfinae (NULL_TREE, type, complain))\n+      return error_mark_node;\n     \n     /* Do array-to-pointer, function-to-pointer conversion, and ignore\n        top-level qualifiers as required.  */\n@@ -10912,10 +10915,8 @@ tsubst_function_type (tree t,\n   return_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n   if (return_type == error_mark_node)\n     return error_mark_node;\n-  /* The standard does not presently indicate that creation of a\n-     function type with an invalid return type is a deduction failure.\n-     However, that is clearly analogous to creating an array of \"void\"\n-     or a reference to a reference.  This is core issue #486.  */\n+  /* DR 486 clarifies that creation of a function type with an\n+     invalid return type is a deduction failure.  */\n   if (TREE_CODE (return_type) == ARRAY_TYPE\n       || TREE_CODE (return_type) == FUNCTION_TYPE)\n     {\n@@ -10928,6 +10929,9 @@ tsubst_function_type (tree t,\n \t}\n       return error_mark_node;\n     }\n+  /* And DR 657. */\n+  if (abstract_virtuals_error_sfinae (NULL_TREE, return_type, complain))\n+    return error_mark_node;\n \n   /* Substitute the argument types.  */\n   arg_types = tsubst_arg_types (TYPE_ARG_TYPES (t), args, NULL_TREE,"}, {"sha": "b78b5a919c174e8df264ab59e1b55c2935ca737d", "filename": "gcc/testsuite/g++.dg/template/sfinae-dr657.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346928a2c9741ac4347b5b29551259a93bc30a7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae-dr657.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346928a2c9741ac4347b5b29551259a93bc30a7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae-dr657.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae-dr657.C?ref=346928a2c9741ac4347b5b29551259a93bc30a7f", "patch": "@@ -0,0 +1,22 @@\n+// DR 657\n+// Test that a return or parameter type with abstract class type causes a\n+// deduction failure.\n+\n+struct A\n+{\n+  A();\n+  A(int);\n+  virtual void f() = 0;\n+};\n+\n+template<class T> T declval();\n+template<class T> int declval(...);\n+\n+template<class T> void arg(T);\n+template<class T> int arg(...);\n+\n+int main()\n+{\n+  int i = declval<A>();\n+  i = arg<A>(1);\n+}"}]}