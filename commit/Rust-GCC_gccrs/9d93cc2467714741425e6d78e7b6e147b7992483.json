{"sha": "9d93cc2467714741425e6d78e7b6e147b7992483", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5M2NjMjQ2NzcxNDc0MTQyNWU2ZDc4ZTdiNmUxNDdiNzk5MjQ4Mw==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2014-09-03T09:16:51Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2014-09-03T09:16:51Z"}, "message": "[NDS32] Define and rename some GPR-specific stuff.\n\n\t* config/nds32/nds32.c (nds32_function_arg): Define and rename some\n\tGPR-specific stuff.\n\t(nds32_function_arg_advance): Likewise.\n\t(nds32_init_cumulative_args): Likewise.\n\t* config/nds32/nds32.h (NDS32_MAX_GPR_REGS_FOR_ARGS): Define.\n\t(NDS32_FIRST_GPR_REGNUM): Define.\n\t(NDS32_LAST_GPR_REGNUM): Define.\n\t(NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG): Define.\n\t(NDS32_ARG_PASS_IN_REG_P): Use NDS32_MAX_GPR_REGS_FOR_ARGS.\n\t(FUNCTION_ARG_REGNO_P): Use NDS32_MAX_GPR_REGS_FOR_ARGS.\n\t(machine_function): Use GRP-specific stuff.\n\nFrom-SVN: r214859", "tree": {"sha": "ef5fd3862d9a7baf3ca0c117f578cf5df8c3f919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef5fd3862d9a7baf3ca0c117f578cf5df8c3f919"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d93cc2467714741425e6d78e7b6e147b7992483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d93cc2467714741425e6d78e7b6e147b7992483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d93cc2467714741425e6d78e7b6e147b7992483", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d93cc2467714741425e6d78e7b6e147b7992483/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38a0632eb7259f06297ef623ae5066aadc50453f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a0632eb7259f06297ef623ae5066aadc50453f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a0632eb7259f06297ef623ae5066aadc50453f"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "db52c61654623b65f3651a4811109fb1e24b0bb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d93cc2467714741425e6d78e7b6e147b7992483/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d93cc2467714741425e6d78e7b6e147b7992483/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d93cc2467714741425e6d78e7b6e147b7992483", "patch": "@@ -1,3 +1,17 @@\n+2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.c (nds32_function_arg): Define and rename some\n+\tGPR-specific stuff.\n+\t(nds32_function_arg_advance): Likewise.\n+\t(nds32_init_cumulative_args): Likewise.\n+\t* config/nds32/nds32.h (NDS32_MAX_GPR_REGS_FOR_ARGS): Define.\n+\t(NDS32_FIRST_GPR_REGNUM): Define.\n+\t(NDS32_LAST_GPR_REGNUM): Define.\n+\t(NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG): Define.\n+\t(NDS32_ARG_PASS_IN_REG_P): Use NDS32_MAX_GPR_REGS_FOR_ARGS.\n+\t(FUNCTION_ARG_REGNO_P): Use NDS32_MAX_GPR_REGS_FOR_ARGS.\n+\t(machine_function): Use GRP-specific stuff.\n+\n 2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.c (nds32_expand_prologue): Remove unused variables."}, {"sha": "54abc969bd3444d2a5d7f633597958134a191894", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d93cc2467714741425e6d78e7b6e147b7992483/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d93cc2467714741425e6d78e7b6e147b7992483/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=9d93cc2467714741425e6d78e7b6e147b7992483", "patch": "@@ -1294,12 +1294,12 @@ nds32_function_arg (cumulative_args_t ca, enum machine_mode mode,\n     return NULL_RTX;\n \n   /* If there are still registers available, return it.  */\n-  if (NDS32_ARG_PASS_IN_REG_P (cum->reg_offset, mode, type))\n+  if (NDS32_ARG_PASS_IN_REG_P (cum->gpr_offset, mode, type))\n     {\n       /* Pick up the next available register number.  */\n       unsigned int regno;\n \n-      regno = NDS32_AVAILABLE_REGNUM_FOR_ARG (cum->reg_offset, mode, type);\n+      regno = NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG (cum->gpr_offset, mode, type);\n       return gen_rtx_REG (mode, regno);\n     }\n   else\n@@ -1320,8 +1320,8 @@ nds32_function_arg_advance (cumulative_args_t ca, enum machine_mode mode,\n      Only named argument could be advanced.  */\n   if (named)\n     {\n-      cum->reg_offset\n-\t= NDS32_AVAILABLE_REGNUM_FOR_ARG (cum->reg_offset, mode, type)\n+      cum->gpr_offset\n+\t= NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG (cum->gpr_offset, mode, type)\n \t  - NDS32_GPR_ARG_FIRST_REGNUM\n \t  + NDS32_NEED_N_REGS_FOR_ARG (mode, type);\n     }\n@@ -2656,7 +2656,7 @@ nds32_init_cumulative_args (CUMULATIVE_ARGS *cum,\n   /* Initial available registers\n      (in offset, corresponding to NDS32_GPR_ARG_FIRST_REGNUM)\n      for passing arguments.  */\n-  cum->reg_offset = 0;\n+  cum->gpr_offset = 0;\n }\n \n /* -- Function Entry and Exit.  */"}, {"sha": "c446041793b21a227cec9eeabe9294c02182cd30", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d93cc2467714741425e6d78e7b6e147b7992483/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d93cc2467714741425e6d78e7b6e147b7992483/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=9d93cc2467714741425e6d78e7b6e147b7992483", "patch": "@@ -109,14 +109,18 @@ enum nds32_16bit_address_type\n /* ------------------------------------------------------------------------ */\n \n /* Define maximum numbers of registers for passing arguments.  */\n-#define NDS32_MAX_REGS_FOR_ARGS 6\n+#define NDS32_MAX_GPR_REGS_FOR_ARGS 6\n \n /* Define the register number for first argument.  */\n #define NDS32_GPR_ARG_FIRST_REGNUM 0\n \n /* Define the register number for return value.  */\n #define NDS32_GPR_RET_FIRST_REGNUM 0\n \n+/* Define the first integer register number.  */\n+#define NDS32_FIRST_GPR_REGNUM 0\n+/* Define the last integer register number.  */\n+#define NDS32_LAST_GPR_REGNUM 31\n \n /* Define double word alignment bits.  */\n #define NDS32_DOUBLE_WORD_ALIGNMENT 64\n@@ -154,19 +158,19 @@ enum nds32_16bit_address_type\n           b) Otherwise, the register number can be odd or even value.\n      2. If it is required ONLY one register,\n         the register number can be odd or even value.  */\n-#define NDS32_AVAILABLE_REGNUM_FOR_ARG(reg_offset, mode, type)  \\\n-  ((NDS32_NEED_N_REGS_FOR_ARG (mode, type) > 1)                 \\\n-   ? ((NDS32_MODE_TYPE_ALIGN (mode, type) > PARM_BOUNDARY)      \\\n-      ? (((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM + 1) & ~1)  \\\n-      : ((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM))            \\\n+#define NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG(reg_offset, mode, type)  \\\n+  ((NDS32_NEED_N_REGS_FOR_ARG (mode, type) > 1)                     \\\n+   ? ((NDS32_MODE_TYPE_ALIGN (mode, type) > PARM_BOUNDARY)          \\\n+      ? (((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM + 1) & ~1)      \\\n+      : ((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM))                \\\n    : ((reg_offset) + NDS32_GPR_ARG_FIRST_REGNUM))\n \n /* This macro is to check if there are still available registers\n    for passing argument.  */\n #define NDS32_ARG_PASS_IN_REG_P(reg_offset, mode, type)      \\\n-  (((reg_offset) < NDS32_MAX_REGS_FOR_ARGS)                  \\\n+  (((reg_offset) < NDS32_MAX_GPR_REGS_FOR_ARGS)              \\\n    && ((reg_offset) + NDS32_NEED_N_REGS_FOR_ARG (mode, type) \\\n-       <= NDS32_MAX_REGS_FOR_ARGS))\n+       <= NDS32_MAX_GPR_REGS_FOR_ARGS))\n \n /* This macro is to check if the register is required to be saved on stack.\n    If call_used_regs[regno] == 0, regno is the callee-saved register.\n@@ -227,7 +231,7 @@ struct GTY(()) machine_function\n /* A C structure that contains the arguments information.  */\n typedef struct\n {\n-  unsigned int reg_offset;\n+  unsigned int gpr_offset;\n } nds32_cumulative_args;\n \n /* ------------------------------------------------------------------------ */\n@@ -710,7 +714,7 @@ enum reg_class\n    'comparison of unsigned expression >= 0 is always true' warning.  */\n #define FUNCTION_ARG_REGNO_P(regno)                                        \\\n   (((int) regno - NDS32_GPR_ARG_FIRST_REGNUM >= 0)                         \\\n-   && ((int) regno - NDS32_GPR_ARG_FIRST_REGNUM < NDS32_MAX_REGS_FOR_ARGS))\n+   && ((int) regno - NDS32_GPR_ARG_FIRST_REGNUM < NDS32_MAX_GPR_REGS_FOR_ARGS))\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}]}