{"sha": "ff350acdf9d740f93559072fc1022d2956e2ba07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzNTBhY2RmOWQ3NDBmOTM1NTkwNzJmYzEwMjJkMjk1NmUyYmEwNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-11-19T02:35:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-11-19T02:35:15Z"}, "message": "semantics.c (begin_class_definition): Call maybe_process_partial_specialization before push_template_decl.\n\n\t* semantics.c (begin_class_definition): Call\n\tmaybe_process_partial_specialization before push_template_decl.\n\tDon't call push_template_decl for a specialization.\n\t* search.c (lookup_field): Do return a member template class.\n\t* decl2.c (handle_class_head): Handle member template classes.\n\t* decl.c (grokdeclarator): A parm type need not be complete.\n\t* pt.c (convert_nontype_argument): Fix thinko.\n\nFrom-SVN: r23705", "tree": {"sha": "17babc04c34868423191c76101ebe734f1698f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17babc04c34868423191c76101ebe734f1698f7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff350acdf9d740f93559072fc1022d2956e2ba07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff350acdf9d740f93559072fc1022d2956e2ba07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff350acdf9d740f93559072fc1022d2956e2ba07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff350acdf9d740f93559072fc1022d2956e2ba07/comments", "author": null, "committer": null, "parents": [{"sha": "c877974e79791c251316548175df8749ed657df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c877974e79791c251316548175df8749ed657df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c877974e79791c251316548175df8749ed657df9"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "367be02420e32dd62a960f974d7adb97ae61597f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ff350acdf9d740f93559072fc1022d2956e2ba07", "patch": "@@ -1,3 +1,15 @@\n+1998-11-19  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* semantics.c (begin_class_definition): Call\n+\tmaybe_process_partial_specialization before push_template_decl.\n+\tDon't call push_template_decl for a specialization.\n+\t* search.c (lookup_field): Do return a member template class.\n+\t* decl2.c (handle_class_head): Handle member template classes.\n+\n+\t* decl.c (grokdeclarator): A parm type need not be complete.\n+\n+\t* pt.c (convert_nontype_argument): Fix thinko.\n+\n 1998-11-18  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (PTRMEM_CST_CLASS): Fix typo."}, {"sha": "a373f1f6ad4f348bc93d6ade82dabb7a51cd258e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ff350acdf9d740f93559072fc1022d2956e2ba07", "patch": "@@ -10530,7 +10530,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n     if (decl_context == PARM)\n       {\n-\tdecl = build_decl (PARM_DECL, declarator, complete_type (type));\n+\tdecl = build_decl (PARM_DECL, declarator, type);\n \n \tbad_specifiers (decl, \"parameter\", virtualp, quals != NULL_TREE,\n \t\t\tinlinep, friendp, raises != NULL_TREE);"}, {"sha": "c8ad1feb0482810379137ae88d9ac3bdcebba7cf", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ff350acdf9d740f93559072fc1022d2956e2ba07", "patch": "@@ -4946,6 +4946,8 @@ handle_class_head (aggr, scope, id)\n {\n   if (TREE_CODE (id) == TYPE_DECL)\n     return id;\n+  if (DECL_CLASS_TEMPLATE_P (id))\n+    return DECL_TEMPLATE_RESULT (id);\n \n   if (scope)\n     cp_error (\"`%T' does not have a nested type named `%D'\", scope, id);"}, {"sha": "27e63d7c6722e7697f82db0cc501b40facbb316f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ff350acdf9d740f93559072fc1022d2956e2ba07", "patch": "@@ -2687,8 +2687,8 @@ convert_nontype_argument (type, expr)\n \t       identical) type of the template-argument.  The\n \t       template-parameter is bound directly to the\n \t       template-argument, which must be an lvalue.  */\n-\t    if (!same_type_p (TYPE_MAIN_VARIANT (expr_type),\n-\t\t\t      TYPE_MAIN_VARIANT (type))\n+\t    if ((TYPE_MAIN_VARIANT (expr_type)\n+\t\t != TYPE_MAIN_VARIANT (type_referred_to))\n \t\t|| !at_least_as_qualified_p (type_referred_to,\n \t\t\t\t\t     expr_type)\n \t\t|| !real_lvalue_p (expr))"}, {"sha": "8d507dc6f20db9adcafb3d132bcbafe435b34176", "filename": "gcc/cp/search.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=ff350acdf9d740f93559072fc1022d2956e2ba07", "patch": "@@ -1190,6 +1190,11 @@ lookup_field (xbasetype, name, protect, want_type)\n       && ! currently_open_class (BINFO_TYPE (rval_binfo))\n       && uses_template_parms (type))\n     {\n+      /* We need to return a member template class so we can define partial\n+\t specializations.  Is there a better way?  */\n+      if (DECL_CLASS_TEMPLATE_P (rval))\n+\treturn rval;\n+\n       /* Don't return a non-type.  Actually, we ought to return something\n \t so lookup_name_real can give a warning.  */\n       if (TREE_CODE (rval) != TYPE_DECL)"}, {"sha": "b1278dcbb1d47e1e9e2724236c27c997b858ab6d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff350acdf9d740f93559072fc1022d2956e2ba07/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ff350acdf9d740f93559072fc1022d2956e2ba07", "patch": "@@ -1230,11 +1230,12 @@ begin_class_definition (t)\n       t = make_lang_type (TREE_CODE (t));\n       pushtag (TYPE_IDENTIFIER (t), t, 0);\n     }\n-  if (processing_template_decl && TYPE_CONTEXT (t)\n-      && TREE_CODE (TYPE_CONTEXT (t)) != NAMESPACE_DECL\n+  maybe_process_partial_specialization (t);\n+  if (processing_template_decl\n+      && ! CLASSTYPE_TEMPLATE_SPECIALIZATION (t)\n+      && TYPE_CONTEXT (t) && TYPE_P (TYPE_CONTEXT (t))\n       && ! current_class_type)\n     push_template_decl (TYPE_STUB_DECL (t));\n-  maybe_process_partial_specialization (t);\n   pushclass (t, 0);\n   TYPE_BEING_DEFINED (t) = 1;\n   /* Reset the interface data, at the earliest possible"}]}