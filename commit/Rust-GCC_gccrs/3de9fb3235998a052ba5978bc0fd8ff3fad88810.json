{"sha": "3de9fb3235998a052ba5978bc0fd8ff3fad88810", "node_id": "C_kwDOANBUbNoAKDNkZTlmYjMyMzU5OThhMDUyYmE1OTc4YmMwZmQ4ZmYzZmFkODg4MTA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-31T00:16:45Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-31T00:16:45Z"}, "message": "Daily bump.", "tree": {"sha": "a17d42d9fe8bae9f45de5541e03e31518cb00b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a17d42d9fe8bae9f45de5541e03e31518cb00b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3de9fb3235998a052ba5978bc0fd8ff3fad88810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de9fb3235998a052ba5978bc0fd8ff3fad88810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de9fb3235998a052ba5978bc0fd8ff3fad88810", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de9fb3235998a052ba5978bc0fd8ff3fad88810/comments", "author": null, "committer": null, "parents": [{"sha": "90e533505f20bc3fd9f576dffff5101066afe6c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e533505f20bc3fd9f576dffff5101066afe6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e533505f20bc3fd9f576dffff5101066afe6c9"}], "stats": {"total": 385, "additions": 384, "deletions": 1}, "files": [{"sha": "d1b2f2837bb356dec63c72577bb6c5df76eeb429", "filename": "contrib/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,12 @@\n+2022-08-30  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* gcc_update (files_and_dependencies): Add rule for\n+\tgcc/cp/std-name-hint.h.\n+\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* config-list.mk: Remove the port.\n+\n 2022-08-27  Xi Ruoyao  <xry111@xry111.site>\n \n \t* gen_autofdo_event.py: Port to Python 3, and use grep -E"}, {"sha": "b44afcd59ead552c10a71d4f40e938f2b55d7641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,253 @@\n+2022-08-30  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* vec.h (array_slice): Add constructors for non-const reference to\n+\theap vector and pointers to heap vectors.\n+\n+2022-08-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (early_nan_resolve): Change comment.\n+\t(frange::union_): Handle union when one side is a NAN.\n+\t(range_tests_nan): Add tests for NAN union.\n+\n+2022-08-30  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.cc (gcn_simd_clone_compute_vecsize_and_simdlen): New.\n+\t(gcn_simd_clone_adjust): New.\n+\t(gcn_simd_clone_usable): New.\n+\t(TARGET_SIMD_CLONE_ADJUST): New.\n+\t(TARGET_SIMD_CLONE_COMPUTE_VECSIZE_AND_SIMDLEN): New.\n+\t(TARGET_SIMD_CLONE_USABLE): New.\n+\n+2022-08-30  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* doc/tm.texi: Regenerate.\n+\t* omp-simd-clone.cc (simd_clone_adjust_return_type): Allow zero\n+\tvecsize.\n+\t(simd_clone_adjust_argument_types): Likewise.\n+\t* target.def (compute_vecsize_and_simdlen): Document the new\n+\tvecsize_int and vecsize_float semantics.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* expmed.cc (store_bit_field_1): Fix byte offset calculation\n+\tfor undefined structures.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* params.opt (-param=vect-max-layout-candidates=): New parameter.\n+\t* doc/invoke.texi (vect-max-layout-candidates): Document it.\n+\t* tree-vectorizer.h (auto_lane_permutation_t): New typedef.\n+\t(auto_load_permutation_t): Likewise.\n+\t* tree-vect-slp.cc (vect_slp_node_weight): New function.\n+\t(slpg_layout_cost): New class.\n+\t(slpg_vertex): Replace perm_in and perm_out with partition,\n+\tout_degree, weight and out_weight.\n+\t(slpg_partition_info, slpg_partition_layout_costs): New classes.\n+\t(vect_optimize_slp_pass): Likewise, cannibalizing some part of\n+\tthe previous vect_optimize_slp.\n+\t(vect_optimize_slp): Use it.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-traits.h (vec_hash_base): New class.\n+\t(vec_free_hash_base): Likewise.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* hash-traits.h (int_hash_base): New struct, split out from...\n+\t(int_hash): ...this class, which now inherits from int_hash_base.\n+\t* hash-map-traits.h (unbounded_hashmap_traits): Take a template\n+\tparameter for the key that provides hash and equality functions.\n+\t(unbounded_int_hashmap_traits): Turn into a type alias of\n+\tunbounded_hashmap_traits.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* graphds.cc (graphds_scc): Add a pass-back parameter for the\n+\tfinal node order.\n+\t* graphds.h (graphds_scc): Update prototype accordingly.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-slp.cc (vect_transform_slp_perm_load_1): Split out from...\n+\t(vect_transform_slp_perm_load): ...here.  Use SLP_TREE_VECTYPE instead\n+\tof STMT_VINFO_VECTYPE.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-slp.cc (vectorizable_slp_permutation_1): Split out from...\n+\t(vectorizable_slp_permutation): ...here.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-stmts.cc (get_related_vectype_for_scalar_type): Check\n+\tthat the requested number of units is interoperable with the requested\n+\tprevailing mode.\n+\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* config.gcc: Remove the port.\n+\t* config/m32c/rtems.h: Removed.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/73550\n+\t* gimple-predicate-analysis.cc (predicate::init_from_control_deps):\n+\tDo not apply MAX_NUM_CHAINS again.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (format_edge_vec): Dump\n+\tboth source and destination.\n+\t(dump_dep_chains): Remove.\n+\t(uninit_analysis::init_use_preds): Remove redundant\n+\tdumping of chains.\n+\n+2022-08-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range-storage.cc (frange_storage_slot::get_frange): Use\n+\tfrange_nan.\n+\t* value-range.cc (frange::set_nan): New.\n+\t(frange_nan): Move to header file.\n+\t(range_tests_nan): Adjust frange_nan callers to pass type.\n+\tNew test.\n+\t* value-range.h (FRANGE_PROP_ACCESSOR): Remove.\n+\t(frange_nan): New.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67196\n+\t* gimple-predicate-analysis.cc (uninit_analysis::is_use_guarded):\n+\tSimplify and normalize use prediates before first use.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (dump_pred_chain): Fix\n+\tparentizing and AND prepending.\n+\t(predicate::dump): Do not dump the GENERIC expanded\n+\tpredicate, properly parentize and prepend ORs to the\n+\tpiecewise predicate dump.\n+\t(build_pred_expr): Remove.\n+\n+2022-08-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (finite_operand_p): New.\n+\t(build_le): New.\n+\t(build_lt): New.\n+\t(build_ge): New.\n+\t(build_gt): New.\n+\t(foperator_equal::fold_range): New implementation with endpoints.\n+\t(foperator_equal::op1_range): Same.\n+\t(foperator_not_equal::fold_range): Same.\n+\t(foperator_not_equal::op1_range): Same.\n+\t(foperator_lt::fold_range): Same.\n+\t(foperator_lt::op1_range): Same.\n+\t(foperator_lt::op2_range): Same.\n+\t(foperator_le::fold_range): Same.\n+\t(foperator_le::op1_range): Same.\n+\t(foperator_le::op2_range): Same.\n+\t(foperator_gt::fold_range): Same.\n+\t(foperator_gt::op1_range): Same.\n+\t(foperator_gt::op2_range): Same.\n+\t(foperator_ge::fold_range): Same.\n+\t(foperator_ge::op1_range): Same.\n+\t(foperator_ge::op2_range): Same.\n+\n+2022-08-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (frange_set_nan): New.\n+\t(frange_drop_inf): New.\n+\t(frange_drop_ninf): New.\n+\t(foperator_equal::op1_range): Adjust for endpoints.\n+\t(foperator_lt::op1_range): Same.\n+\t(foperator_lt::op2_range): Same.\n+\t(foperator_gt::op1_range): Same.\n+\t(foperator_gt::op2_range): Same.\n+\t(foperator_unordered::op1_range): Same.\n+\t* value-query.cc (range_query::get_tree_range): Same.\n+\t* value-range-pretty-print.cc (vrange_printer::visit): Same.\n+\t* value-range-storage.cc (frange_storage_slot::get_frange): Same.\n+\t* value-range.cc (frange::set): Same.\n+\t(frange::normalize_kind): Same.\n+\t(frange::union_): Same.\n+\t(frange::intersect): Same.\n+\t(frange::operator=): Same.\n+\t(early_nan_resolve): New.\n+\t(frange::contains_p): New.\n+\t(frange::singleton_p): New.\n+\t(frange::set_nonzero): New.\n+\t(frange::nonzero_p): New.\n+\t(frange::set_zero): New.\n+\t(frange::zero_p): New.\n+\t(frange::set_nonnegative): New.\n+\t(frange_float): New.\n+\t(frange_nan): New.\n+\t(range_tests_nan): New.\n+\t(range_tests_signed_zeros): New.\n+\t(range_tests_floats): New.\n+\t(range_tests): New.\n+\t* value-range.h (frange::lower_bound): New.\n+\t(frange::upper_bound): New.\n+\t(vrp_val_min): Use real_inf with a sign instead of negating inf.\n+\t(frange::frange): New.\n+\t(frange::set_varying): Adjust for endpoints.\n+\t(real_max_representable): New.\n+\t(real_min_representable): New.\n+\n+2022-08-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* match.pd ((cmp @0 zerop) real_zerop (negate@1 @0)): Add variant\n+\tfor real zero.\n+\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/s390/s390.cc (s390_rtx_costs): Use proper type as\n+\t  argument.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-uninit.cc (warn_uninitialized_vars): Pre-compute\n+\tthe set of fallthru reachable blocks from function entry\n+\tand use that to determine wlims.always_executed.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56654\n+\t* tree-ssa-uninit.cc (cand_cmp): New.\n+\t(find_uninit_use): First process all PHIs and collect candidate\n+\tstmts, then sort those after RPO.\n+\t(warn_uninitialized_phi): Pass on bb_to_rpo.\n+\t(execute_late_warn_uninitialized): Compute and pass on\n+\treverse lookup of RPO number from basic block index.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.h (uninit_analysis::operator()):\n+\tRemove.\n+\t* gimple-predicate-analysis.cc\n+\t(uninit_analysis::collect_phi_def_edges): Use phi_arg_set,\n+\tsimplify a bit.\n+\t* tree-ssa-uninit.cc (defined_args): New global.\n+\t(compute_uninit_opnds_pos): Mask with the recorded set\n+\tof guarded maybe-uninitialized uses.\n+\t(uninit_undef_val_t::operator()): Remove.\n+\t(find_uninit_use): Process all PHI uses, recording the\n+\tguarded ones and marking the PHI result as uninitialized\n+\tconsistently.\n+\t(warn_uninitialized_phi): Adjust.\n+\t(execute_late_warn_uninitialized): Get rid of the PHI worklist\n+\tand instead walk the function in RPO order.\n+\t* spellcheck.h (best_match::m_best_candidate_len): Initialize.\n+\n+2022-08-30  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/106744\n+\t* tree-ssa-phiopt.cc (minmax_replacement): Correct arguments.\n+\n+2022-08-30  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* expmed.cc (store_bit_field_1): Initialize regnum to 0.\n+\n 2022-08-29  David Faust  <david.faust@oracle.com>\n \n \tPR target/106745"}, {"sha": "d8a65227e83e4e76fc616013258eae1ca2011e72", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1 +1 @@\n-20220830\n+20220831"}, {"sha": "79285de9f8a4c24fdb77efb22548b6287333179b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,19 @@\n+2022-08-30  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* Make-lang.in: Add rule to rebuild std-name-hint.h from\n+\tstd-name-hint.gperf.\n+\t* name-lookup.cc (get_std_name_hint): Remove hints array.\n+\tUse gperf-generated class std_name_hint_lookup.\n+\tInclude \"std-name-hint.h\".\n+\t* std-name-hint.gperf: New file.\n+\t* std-name-hint.h: New file.  Generated from the .gperf file.\n+\n+2022-08-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106759\n+\t* cp-objcp-common.cc (names_builtin_p): Handle RID_IS_NOTHROW_ASSIGNABLE\n+\tand RID_IS_NOTHROW_CONSTRUCTIBLE.\n+\n 2022-08-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106712"}, {"sha": "eeb2b8eb1ce780945badef151b8227c270fd72de", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,7 @@\n+2022-08-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* sv.po: Update.\n+\n 2022-08-23  Joseph Myers  <joseph@codesourcery.com>\n \n \t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,"}, {"sha": "2160039711dd824fe03fce58b7ab7a521d43edad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,82 @@\n+2022-08-30  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.dg/vect/vect-simd-clone-1.c: Add dg-warning.\n+\t* gcc.dg/vect/vect-simd-clone-2.c: Add dg-warning.\n+\t* gcc.dg/vect/vect-simd-clone-3.c: Add dg-warning.\n+\t* gcc.dg/vect/vect-simd-clone-4.c: Add dg-warning.\n+\t* gcc.dg/vect/vect-simd-clone-5.c: Add dg-warning.\n+\t* gcc.dg/vect/vect-simd-clone-8.c: Add dg-warning.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_var_shift):\n+\tReturn true for aarch64.\n+\t* gcc.dg/vect/bb-slp-layout-1.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-2.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-3.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-4.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-5.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-6.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-7.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-8.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-9.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-10.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-11.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-13.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-14.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-15.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-16.c: New test.\n+\t* gcc.dg/vect/bb-slp-layout-17.c: New test.\n+\t* gcc.dg/vect/slp-11b.c: XFAIL SLP test for load-lanes targets.\n+\t* gcc.dg/vect/bb-slp-layout-12.c: New file.\n+\n+2022-08-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/slp_15.c: New test.\n+\t* g++.target/aarch64/sve/pr96974.C: Remove scan test.\n+\n+2022-08-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106759\n+\t* g++.dg/ext/has-builtin-1.C: New test.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67196\n+\t* gcc.dg/uninit-pred-7_a.c: Un-XFAIL.\n+\n+2022-08-30  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/recip-3.c: Avoid premature optimization so test\n+\thas a chance to succeed.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/63660\n+\t* gcc.dg/uninit-pr63660.c: New testcase.\n+\n+2022-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/uninit-pred-5.C: New testcase.\n+\n+2022-08-30  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/106744\n+\t* gcc.dg/tree-ssa/minmax-10.c: Make runtime test.\n+\t* gcc.dg/tree-ssa/minmax-11.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-12.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-13.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-14.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-15.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-16.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-6.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/minmax-9.c: Likewise.\n+\n 2022-08-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106712"}, {"sha": "623dec58f95e208fe7dee0b916247ba968dd5eb3", "filename": "gotools/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gotools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/gotools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,11 @@\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Regenerate.\n+\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Regenerate.\n+\n 2022-02-13  Ian Lance Taylor  <iant@golang.org>\n \n \t* configure.ac: Revert 2022-02-09 change:"}, {"sha": "c8e2c5dd1a97ccb1d90cd83856a20c8f3aa091b3", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,7 @@\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* testsuite/Makefile.in: Regenerate.\n+\n 2022-08-08  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR target/102218"}, {"sha": "3358060f287fd19d52c1f16c81d2b3e48951dbbf", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,7 @@\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* config.host: Remove the port.\n+\n 2022-08-26  Martin Liska  <mliska@suse.cz>\n \n \t* config.host: Remove cr16 related stuff."}, {"sha": "5d94589d6df67e9e3e2e2e4143c0319a3054197c", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de9fb3235998a052ba5978bc0fd8ff3fad88810/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de9fb3235998a052ba5978bc0fd8ff3fad88810/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=3de9fb3235998a052ba5978bc0fd8ff3fad88810", "patch": "@@ -1,3 +1,12 @@\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* LOCAL_PATCHES: Update.\n+\n+2022-08-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* sanitizer_common/Makefile.am: Remove sanitizer_openbsd.\n+\t* sanitizer_common/Makefile.in: Regenerate.\n+\n 2022-07-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR sanitizer/105531"}]}