{"sha": "8c7b90945f6b13adea05b75d01f17225fb135bac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM3YjkwOTQ1ZjZiMTNhZGVhMDViNzVkMDFmMTcyMjVmYjEzNWJhYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-12-12T13:26:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-12-12T13:26:15Z"}, "message": "re PR tree-optimization/64280 (ICE in replace_uses_by, at tree-cfg.c:1789)\n\n2014-12-12  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/64280\n\t* tree-cfg.c (replace_uses_by): Guard assert properly.\n\n\t* g++.dg/torture/pr64280.C: New testcase.\n\nFrom-SVN: r218668", "tree": {"sha": "9e1237f09956ec5e3882ea9d64d66cd5e445292c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e1237f09956ec5e3882ea9d64d66cd5e445292c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c7b90945f6b13adea05b75d01f17225fb135bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7b90945f6b13adea05b75d01f17225fb135bac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7b90945f6b13adea05b75d01f17225fb135bac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7b90945f6b13adea05b75d01f17225fb135bac/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e03f0c47a69f449893dfa352563dda884d1d1060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03f0c47a69f449893dfa352563dda884d1d1060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03f0c47a69f449893dfa352563dda884d1d1060"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "95f885bc435c2dbeaa64d36416ee0340f20d513f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7b90945f6b13adea05b75d01f17225fb135bac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7b90945f6b13adea05b75d01f17225fb135bac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c7b90945f6b13adea05b75d01f17225fb135bac", "patch": "@@ -1,3 +1,8 @@\n+2014-12-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64280\n+\t* tree-cfg.c (replace_uses_by): Guard assert properly.\n+\n 2014-12-12  Anthony Green  <green@moxielogic.com>\n \n \t* config/moxie/moxie.md: Add use of zex instruction."}, {"sha": "5b485a97708b6c7c19e78303f668e5f0770cd635", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7b90945f6b13adea05b75d01f17225fb135bac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7b90945f6b13adea05b75d01f17225fb135bac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c7b90945f6b13adea05b75d01f17225fb135bac", "patch": "@@ -1,3 +1,8 @@\n+2014-12-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/64280\n+\t* g++.dg/torture/pr64280.C: New testcase.\n+\n 2014-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/64255"}, {"sha": "6ea31481bd57a1add5f11054c20da6b2b8af5ed7", "filename": "gcc/testsuite/g++.dg/torture/pr64280.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7b90945f6b13adea05b75d01f17225fb135bac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64280.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7b90945f6b13adea05b75d01f17225fb135bac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64280.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64280.C?ref=8c7b90945f6b13adea05b75d01f17225fb135bac", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+\n+class A\n+{\n+public:\n+  A ();\n+};\n+class B\n+{\n+public:\n+  B (int);\n+  operator void *() { return m_fn1 () ? 0 : this; }\n+  int m_fn1 ();\n+};\n+typedef int jmp_buf[];\n+struct C\n+{\n+  jmp_buf cond_;\n+};\n+class F\n+{\n+  C what_;\n+  bool m_fn2 ();\n+};\n+int _setjmp (int[]);\n+void longjmp ();\n+class D\n+{\n+public:\n+  D () { longjmp (); }\n+};\n+bool\n+F::m_fn2 ()\n+{\n+  B a (0);\n+  if (a)\n+    if (_setjmp (what_.cond_))\n+      return 0;\n+    else\n+      D ();\n+  A b;\n+}"}, {"sha": "0ae4bd76f408910196e213cff324634c95de61f8", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c7b90945f6b13adea05b75d01f17225fb135bac/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c7b90945f6b13adea05b75d01f17225fb135bac/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8c7b90945f6b13adea05b75d01f17225fb135bac", "patch": "@@ -1781,7 +1781,8 @@ replace_uses_by (tree name, tree val)\n \t    {\n \t      e = gimple_phi_arg_edge (as_a <gphi *> (stmt),\n \t\t\t\t       PHI_ARG_INDEX_FROM_USE (use));\n-\t      if (e->flags & EDGE_ABNORMAL)\n+\t      if (e->flags & EDGE_ABNORMAL\n+\t\t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val))\n \t\t{\n \t\t  /* This can only occur for virtual operands, since\n \t\t     for the real ones SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name))"}]}