{"sha": "7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MwOTI5NjBmMGQxMTZhYmRiYTdlMTNhYWYzOGZiYWRmZGVmYmViMA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-06-03T16:10:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-08T13:34:23Z"}, "message": "[Ada] Transient scope cleanup\n\ngcc/ada/\n\n\t* comperr.adb (Compiler_Abort): Call Sinput.Unlock, because if\n\tthis is called late, then Source_Dump would crash otherwise.\n\t* debug.adb: Correct documentation of the -gnatd.9 switch.\n\t* exp_ch4.adb (Expand_Allocator_Expression): Add a comment.\n\t* exp_ch6.adb: Minor comment fixes.  Add assertion.\n\t* exp_ch6.ads (Is_Build_In_Place_Result_Type): Correct comment.\n\t* exp_ch7.adb, checks.ads: Minor comment fixes.", "tree": {"sha": "5212d98fc41671e89ba1ecb386fb4267bf0159af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5212d98fc41671e89ba1ecb386fb4267bf0159af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e8b502cb6c3e30ac59fc446b2e765e5b5a9d5a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e8b502cb6c3e30ac59fc446b2e765e5b5a9d5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e8b502cb6c3e30ac59fc446b2e765e5b5a9d5a6"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "3b97bd0802c5e9e6e2736c8789a5b0f27961493a", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "patch": "@@ -851,7 +851,7 @@ package Checks is\n    --    are not following the flow graph (more properly the flow of actual\n    --    processing only corresponds to the flow graph for local assignments).\n    --    For non-local variables, we preserve the current setting, i.e. a\n-   --    validity check is performed when assigning to a knonwn valid global.\n+   --    validity check is performed when assigning to a known valid global.\n \n    --  Note: no validity checking is required if range checks are suppressed\n    --  regardless of the setting of the validity checking mode."}, {"sha": "300b523213aae9ab6b15bbd4007ef87e0690866c", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "patch": "@@ -404,6 +404,7 @@ package body Comperr is\n          Set_Standard_Output;\n \n          Tree_Dump;\n+         Sinput.Unlock; -- so Source_Dump can modify it\n          Source_Dump;\n          raise Unrecoverable_Error;\n       end if;"}, {"sha": "5245feb3b27bdcc35d0aeb71cd1708a5dc9478e3", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "patch": "@@ -1101,7 +1101,7 @@ package body Debug is\n    --       issues (e.g., assuming that a low bound of an array parameter\n    --       of an unconstrained subtype belongs to the index subtype).\n \n-   --  d.9  Enable build-in-place for function calls returning some nonlimited\n+   --  d.9  Disable build-in-place for function calls returning nonlimited\n    --       types.\n \n    ------------------------------------------"}, {"sha": "16f513e32265f77dc400704ea9fc3c01e1af8588", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "patch": "@@ -1166,6 +1166,9 @@ package body Exp_Ch4 is\n          --  secondary stack). In that case, the object will be moved, so we do\n          --  want to Adjust. However, if it's a nonlimited build-in-place\n          --  function call, Adjust is not wanted.\n+         --\n+         --  Needs_Finalization (DesigT) can differ from Needs_Finalization (T)\n+         --  if one of the two types is class-wide, and the other is not.\n \n          if Needs_Finalization (DesigT)\n            and then Needs_Finalization (T)"}, {"sha": "1c56cb8b1d5917573450d1bd0fad0c9212838a5c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "patch": "@@ -4913,7 +4913,7 @@ package body Exp_Ch6 is\n       --  Optimization, if the returned value (which is on the sec-stack) is\n       --  returned again, no need to copy/readjust/finalize, we can just pass\n       --  the value thru (see Expand_N_Simple_Return_Statement), and thus no\n-      --  attachment is needed\n+      --  attachment is needed.\n \n       if Nkind (Parent (N)) = N_Simple_Return_Statement then\n          return;\n@@ -7310,15 +7310,16 @@ package body Exp_Ch6 is\n \n          Set_Enclosing_Sec_Stack_Return (N);\n \n-         --  Optimize the case where the result is a function call. In this\n-         --  case the result is already on the secondary stack and no further\n-         --  processing is required except to set the By_Ref flag to ensure\n-         --  that gigi does not attempt an extra unnecessary copy. (Actually\n-         --  not just unnecessary but wrong in the case of a controlled type,\n-         --  where gigi does not know how to do a copy.)\n+         --  Optimize the case where the result is a function call that also\n+         --  returns on the secondary stack. In this case the result is already\n+         --  on the secondary stack and no further processing is required\n+         --  except to set the By_Ref flag to ensure that gigi does not attempt\n+         --  an extra unnecessary copy. (Actually not just unnecessary but\n+         --  wrong in the case of a controlled type, where gigi does not know\n+         --  how to do a copy.)\n \n-         if Requires_Transient_Scope (Exp_Typ)\n-           and then Exp_Is_Function_Call\n+         pragma Assert (Requires_Transient_Scope (R_Type));\n+         if Exp_Is_Function_Call and then Requires_Transient_Scope (Exp_Typ)\n          then\n             Set_By_Ref (N);\n \n@@ -7849,7 +7850,7 @@ package body Exp_Ch6 is\n \n       Compute_Returns_By_Ref (Subp);\n \n-      --  Wnen freezing a null procedure, analyze its delayed aspects now\n+      --  When freezing a null procedure, analyze its delayed aspects now\n       --  because we may not have reached the end of the declarative list when\n       --  delayed aspects are normally analyzed. This ensures that dispatching\n       --  calls are properly rewritten when the generated _Postcondition\n@@ -8219,10 +8220,6 @@ package body Exp_Ch6 is\n          return False;\n       end if;\n \n-      --  For now we test whether E denotes a function or access-to-function\n-      --  type whose result subtype is inherently limited. Later this test\n-      --  may be revised to allow composite nonlimited types.\n-\n       if Ekind (E) in E_Function | E_Generic_Function\n         or else (Ekind (E) = E_Subprogram_Type\n                   and then Etype (E) /= Standard_Void_Type)"}, {"sha": "76cec4d4e47b59fa59a19cc3b5f688566d7c162e", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "patch": "@@ -134,8 +134,11 @@ package Exp_Ch6 is\n    --\n    --  For inherently limited types in Ada 2005, True means that calls will\n    --  actually be build-in-place in all cases. For other types, build-in-place\n-   --  will be used when possible, but we need to make a copy at the call site\n-   --  in some cases, notably assignment statements.\n+   --  will be used when possible, but we need to make a copy in some\n+   --  cases. For example, for \"X := F(...);\" if F can see X, or if F can\n+   --  propagate exceptions, we need to store its result in a temp in general,\n+   --  and copy the temp into X. Also, for \"return Global_Var;\" Global_Var\n+   --  needs to be copied into the function result object.\n \n    function Is_Build_In_Place_Function (E : Entity_Id) return Boolean;\n    --  Ada 2005 (AI-318-02): Returns True if E denotes a function, generic"}, {"sha": "f7807acd298610f34fdb7d8c30af86acb2e20972", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c092960f0d116abdba7e13aaf38fbadfdefbeb0/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=7c092960f0d116abdba7e13aaf38fbadfdefbeb0", "patch": "@@ -480,7 +480,7 @@ package body Exp_Ch7 is\n       Skip_Self : Boolean := False) return Node_Id;\n    --  Subsidiary to Make_Adjust_Call and Make_Final_Call. Given the entity of\n    --  routine [Deep_]Adjust or [Deep_]Finalize and an object parameter, create\n-   --  an adjust or finalization call. Wnen flag Skip_Self is set, the related\n+   --  an adjust or finalization call. When flag Skip_Self is set, the related\n    --  action has an effect on the components only (if any).\n \n    function Make_Deep_Proc\n@@ -8126,7 +8126,7 @@ package body Exp_Ch7 is\n          --       end if;\n          --       ...\n \n-         --  When Deep_Adjust is invokes for field _parent, a value of False is\n+         --  When Deep_Adjust is invoked for field _parent, a value of False is\n          --  provided for the flag:\n \n          --    Deep_Adjust (Obj._parent, False);"}]}