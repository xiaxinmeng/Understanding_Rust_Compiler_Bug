{"sha": "0b3189e79f87c6d8927a96918b2ee53456df4928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzMTg5ZTc5Zjg3YzZkODkyN2E5NjkxOGIyZWU1MzQ1NmRmNDkyOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-30T23:05:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-30T23:05:04Z"}, "message": "libgo: Use waitpid on systems which do not have wait4.\n\nFrom-SVN: r171758", "tree": {"sha": "96a73acd062cce5897fb331039d0cb1cb6442134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a73acd062cce5897fb331039d0cb1cb6442134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b3189e79f87c6d8927a96918b2ee53456df4928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3189e79f87c6d8927a96918b2ee53456df4928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3189e79f87c6d8927a96918b2ee53456df4928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3189e79f87c6d8927a96918b2ee53456df4928/comments", "author": null, "committer": null, "parents": [{"sha": "8955c80a1cc754999cfa93d03c04307281e6136f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8955c80a1cc754999cfa93d03c04307281e6136f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8955c80a1cc754999cfa93d03c04307281e6136f"}], "stats": {"total": 100, "additions": 80, "deletions": 20}, "files": [{"sha": "a2f2d547edf081a4e1eaf8fc0177cd3aa05533eb", "filename": "libgo/Makefile.am", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=0b3189e79f87c6d8927a96918b2ee53456df4928", "patch": "@@ -1246,13 +1246,20 @@ endif # !LIBGO_IS_SOLARIS\n endif # !LIBGO_IS_LINUX\n \n \n-# Define ForkExec, PtraceForkExec, Exec, and Wait4.\n+# Define ForkExec, PtraceForkExec, and Exec.\n if LIBGO_IS_RTEMS\n syscall_exec_os_file = syscalls/exec_stubs.go\n else\n syscall_exec_os_file = syscalls/exec.go\n endif\n \n+# Define Wait4.\n+if HAVE_WAIT4\n+syscall_wait_file = syscalls/wait4.go\n+else\n+syscall_wait_file = syscalls/waitpid.go\n+endif\n+\n # Define Sleep.\n if LIBGO_IS_RTEMS\n syscall_sleep_file = syscalls/sleep_rtems.go\n@@ -1329,6 +1336,7 @@ go_syscall_files = \\\n \t$(syscall_errstr_decl_file) \\\n \tsyscalls/exec_helpers.go \\\n \t$(syscall_exec_os_file) \\\n+\t$(syscall_wait_file) \\\n \t$(syscall_filesize_file) \\\n \t$(syscall_stat_file) \\\n \t$(syscall_sleep_file) \\"}, {"sha": "16eb62bfb9df1727e00027629b9a545326a06ff9", "filename": "libgo/Makefile.in", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=0b3189e79f87c6d8927a96918b2ee53456df4928", "patch": "@@ -1632,8 +1632,12 @@ go_testing_script_files = \\\n @LIBGO_IS_LINUX_TRUE@syscall_stat_file = syscalls/sysfile_stat_largefile.go\n @LIBGO_IS_RTEMS_FALSE@syscall_exec_os_file = syscalls/exec.go\n \n-# Define ForkExec, PtraceForkExec, Exec, and Wait4.\n+# Define ForkExec, PtraceForkExec, and Exec.\n @LIBGO_IS_RTEMS_TRUE@syscall_exec_os_file = syscalls/exec_stubs.go\n+@HAVE_WAIT4_FALSE@syscall_wait_file = syscalls/waitpid.go\n+\n+# Define Wait4.\n+@HAVE_WAIT4_TRUE@syscall_wait_file = syscalls/wait4.go\n @LIBGO_IS_RTEMS_FALSE@syscall_sleep_file = syscalls/sleep_select.go\n \n # Define Sleep.\n@@ -1671,6 +1675,7 @@ go_syscall_files = \\\n \t$(syscall_errstr_decl_file) \\\n \tsyscalls/exec_helpers.go \\\n \t$(syscall_exec_os_file) \\\n+\t$(syscall_wait_file) \\\n \t$(syscall_filesize_file) \\\n \t$(syscall_stat_file) \\\n \t$(syscall_sleep_file) \\"}, {"sha": "fbf6297b67b857a50f32954941b3bf99470a949d", "filename": "libgo/configure", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=0b3189e79f87c6d8927a96918b2ee53456df4928", "patch": "@@ -603,6 +603,8 @@ am__EXEEXT_TRUE\n LTLIBOBJS\n LIBOBJS\n STRINGOPS_FLAG\n+HAVE_WAIT4_FALSE\n+HAVE_WAIT4_TRUE\n HAVE_STRERROR_R_FALSE\n HAVE_STRERROR_R_TRUE\n HAVE_SYS_MMAN_H_FALSE\n@@ -10900,7 +10902,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10903 \"configure\"\n+#line 10905 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11006,7 +11008,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11009 \"configure\"\n+#line 11011 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14154,7 +14156,7 @@ else\n fi\n \n \n-for ac_func in srandom random strerror_r strsignal\n+for ac_func in srandom random strerror_r strsignal wait4\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n@@ -14175,6 +14177,14 @@ else\n   HAVE_STRERROR_R_FALSE=\n fi\n \n+ if test \"$ac_cv_func_wait4\" = yes; then\n+  HAVE_WAIT4_TRUE=\n+  HAVE_WAIT4_FALSE='#'\n+else\n+  HAVE_WAIT4_TRUE='#'\n+  HAVE_WAIT4_FALSE=\n+fi\n+\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __sync_bool_compare_and_swap_4\" >&5\n $as_echo_n \"checking for __sync_bool_compare_and_swap_4... \" >&6; }\n@@ -14552,6 +14562,10 @@ if test -z \"${HAVE_STRERROR_R_TRUE}\" && test -z \"${HAVE_STRERROR_R_FALSE}\"; then\n   as_fn_error \"conditional \\\"HAVE_STRERROR_R\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${HAVE_WAIT4_TRUE}\" && test -z \"${HAVE_WAIT4_FALSE}\"; then\n+  as_fn_error \"conditional \\\"HAVE_WAIT4\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n \n : ${CONFIG_STATUS=./config.status}\n ac_write_fail=0"}, {"sha": "069635199d8a7bcd5ca19719392e9e72de0830c5", "filename": "libgo/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=0b3189e79f87c6d8927a96918b2ee53456df4928", "patch": "@@ -381,8 +381,9 @@ esac\n AC_CHECK_HEADERS(sys/mman.h syscall.h sys/epoll.h sys/ptrace.h sys/syscall.h sys/user.h sys/utsname.h)\n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n \n-AC_CHECK_FUNCS(srandom random strerror_r strsignal)\n+AC_CHECK_FUNCS(srandom random strerror_r strsignal wait4)\n AM_CONDITIONAL(HAVE_STRERROR_R, test \"$ac_cv_func_strerror_r\" = yes)\n+AM_CONDITIONAL(HAVE_WAIT4, test \"$ac_cv_func_wait4\" = yes)\n \n AC_CACHE_CHECK([for __sync_bool_compare_and_swap_4],\n [libgo_cv_func___sync_bool_compare_and_swap_4],"}, {"sha": "331c04b9c370c4b31e2fbf900d24e611bd7e0330", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=0b3189e79f87c6d8927a96918b2ee53456df4928", "patch": "@@ -377,6 +377,8 @@ if test \"$rusage\" != \"\"; then\n     nrusage=\"$nrusage $field;\"\n   done\n   echo \"type Rusage struct {$nrusage }\" >> ${OUT}\n+else\n+  echo \"type Rusage struct {}\" >> ${OUT}\n fi\n \n # The utsname struct."}, {"sha": "450c7e5938ddf122fe362094a9b52493021ce52a", "filename": "libgo/syscalls/exec.go", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fsyscalls%2Fexec.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fsyscalls%2Fexec.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fexec.go?ref=0b3189e79f87c6d8927a96918b2ee53456df4928", "patch": "@@ -17,7 +17,6 @@ func libc_chdir(name *byte) int __asm__ (\"chdir\")\n func libc_dup2(int, int) int __asm__ (\"dup2\")\n func libc_execve(*byte, **byte, **byte) int __asm__ (\"execve\")\n func libc_sysexit(int) __asm__ (\"_exit\")\n-func libc_wait4(Pid_t, *int, int, *Rusage) Pid_t __asm__ (\"wait4\")\n \n // Fork, dup fd onto 0..len(fd), and exec(argv0, argvv, envv) in child.\n // If a dup or exec fails, write the errno int to pipe.\n@@ -263,16 +262,3 @@ func Exec(argv0 string, argv []string, envv []string) (err int) {\n \tlibc_execve(StringBytePtr(argv0), &argv_arg[0], &envv_arg[0])\n \treturn GetErrno()\n }\n-\n-func Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, errno int) {\n-\tvar status int\n-\tr := libc_wait4(Pid_t(pid), &status, options, rusage)\n-\twpid = int(r)\n-\tif r < 0 {\n-\t\terrno = GetErrno()\n-\t}\n-\tif wstatus != nil {\n-\t\t*wstatus = WaitStatus(status)\n-\t}\n-\treturn\n-}"}, {"sha": "bb00c792bc001c6f7e18bb49a519d5857d588e31", "filename": "libgo/syscalls/wait4.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fsyscalls%2Fwait4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fsyscalls%2Fwait4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fwait4.go?ref=0b3189e79f87c6d8927a96918b2ee53456df4928", "patch": "@@ -0,0 +1,22 @@\n+// wait4.go -- Wait4 for systems with wait4.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+func libc_wait4(Pid_t, *int, int, *Rusage) Pid_t __asm__ (\"wait4\")\n+\n+func Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, errno int) {\n+\tvar status int\n+\tr := libc_wait4(Pid_t(pid), &status, options, rusage)\n+\twpid = int(r)\n+\tif r < 0 {\n+\t\terrno = GetErrno()\n+\t}\n+\tif wstatus != nil {\n+\t\t*wstatus = WaitStatus(status)\n+\t}\n+\treturn\n+}"}, {"sha": "1cb4d5dda9561f591fc40dd5e5518a1e86e222ed", "filename": "libgo/syscalls/waitpid.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fsyscalls%2Fwaitpid.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3189e79f87c6d8927a96918b2ee53456df4928/libgo%2Fsyscalls%2Fwaitpid.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsyscalls%2Fwaitpid.go?ref=0b3189e79f87c6d8927a96918b2ee53456df4928", "patch": "@@ -0,0 +1,22 @@\n+// waitpid.go -- Wait4 for systems without wait4, but with waitpid.\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+func libc_waitpid(Pid_t, *int, int) Pid_t __asm__ (\"waitpid\")\n+\n+func Wait4(pid int, wstatus *WaitStatus, options int, rusage *Rusage) (wpid int, errno int) {\n+\tvar status int\n+\tr := libc_waitpid(Pid_t(pid), &status, options)\n+\twpid = int(r)\n+\tif r < 0 {\n+\t\terrno = GetErrno()\n+\t}\n+\tif wstatus != nil {\n+\t\t*wstatus = WaitStatus(status)\n+\t}\n+\treturn\n+}"}]}