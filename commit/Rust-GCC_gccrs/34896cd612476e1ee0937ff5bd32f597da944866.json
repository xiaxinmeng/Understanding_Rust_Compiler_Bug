{"sha": "34896cd612476e1ee0937ff5bd32f597da944866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ4OTZjZDYxMjQ3NmUxZWUwOTM3ZmY1YmQzMmY1OTdkYTk0NDg2Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-11-06T11:22:59Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-11-06T11:22:59Z"}, "message": "sanopt.c (sanopt_optimize_walker): Limit removal of the checks.\n\n\t* sanopt.c (sanopt_optimize_walker): Limit removal of the checks.\n\tRemove vector limit.\ntestsuite/\n\t* c-c++-common/ubsan/align-2.c: Add dg-output.\n\t* c-c++-common/ubsan/align-4.c: Likewise.\n\t* c-c++-common/ubsan/align-6.c: New test.\n\t* c-c++-common/ubsan/align-7.c: New test.\n\t* c-c++-common/ubsan/align-8.c: New test.\n\t* g++.dg/ubsan/null-1.C: Add dg-output.\n\t* g++.dg/ubsan/null-2.C: Likewise.\n\t* g++.dg/ubsan/null-3.C: New test.\n\t* g++.dg/ubsan/null-4.C: New test.\n\t* g++.dg/ubsan/null-5.C: New test.\n\nFrom-SVN: r217189", "tree": {"sha": "f8c8f0b025057b216716c4e19ffdbaa702d361f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8c8f0b025057b216716c4e19ffdbaa702d361f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34896cd612476e1ee0937ff5bd32f597da944866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34896cd612476e1ee0937ff5bd32f597da944866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34896cd612476e1ee0937ff5bd32f597da944866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34896cd612476e1ee0937ff5bd32f597da944866/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32dee765689108575338858a16ac5f04b85f88d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32dee765689108575338858a16ac5f04b85f88d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32dee765689108575338858a16ac5f04b85f88d5"}], "stats": {"total": 206, "additions": 204, "deletions": 2}, "files": [{"sha": "f362e2ebaf2b29420cce064d5aec7a4e730304e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -1,3 +1,8 @@\n+2014-11-06  Marek Polacek  <polacek@redhat.com>\n+\n+\t* sanopt.c (sanopt_optimize_walker): Limit removal of the checks.\n+\tRemove vector limit.\n+\n 2014-11-06  Richard Biener  <rguenther@suse.de>\n \n \t* match.pd: Implement bitwise binary and unary simplifications"}, {"sha": "0fc032a7a3057d7003f192f1ff38a35cf5e3e43d", "filename": "gcc/sanopt.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -130,7 +130,30 @@ sanopt_optimize_walker (basic_block bb, struct sanopt_ctx *ctx)\n \t\t\t  /* At this point we shouldn't have any statements\n \t\t\t     that aren't dominating the current BB.  */\n \t\t\t  tree align = gimple_call_arg (g, 2);\n-\t\t\t  remove = tree_int_cst_le (cur_align, align);\n+\t\t\t  int kind = tree_to_shwi (gimple_call_arg (g, 1));\n+\t\t\t  /* If this is a NULL pointer check where we had segv\n+\t\t\t     anyway, we can remove it.  */\n+\t\t\t  if (integer_zerop (align)\n+\t\t\t      && (kind == UBSAN_LOAD_OF\n+\t\t\t\t  || kind == UBSAN_STORE_OF\n+\t\t\t\t  || kind == UBSAN_MEMBER_ACCESS))\n+\t\t\t    remove = true;\n+\t\t\t  /* Otherwise remove the check in non-recovering\n+\t\t\t     mode, or if the stmts have same location.  */\n+\t\t\t  else if (integer_zerop (align))\n+\t\t\t    remove = !(flag_sanitize_recover & SANITIZE_NULL)\n+\t\t\t\t     || flag_sanitize_undefined_trap_on_error\n+\t\t\t\t     || gimple_location (g)\n+\t\t\t\t\t== gimple_location (stmt);\n+\t\t\t  else if (tree_int_cst_le (cur_align, align))\n+\t\t\t    remove = !(flag_sanitize_recover\n+\t\t\t\t       & SANITIZE_ALIGNMENT)\n+\t\t\t\t     || flag_sanitize_undefined_trap_on_error\n+\t\t\t\t     || gimple_location (g)\n+\t\t\t\t\t== gimple_location (stmt);\n+\t\t\t  if (!remove && gimple_bb (g) == gimple_bb (stmt)\n+\t\t\t      && tree_int_cst_compare (cur_align, align) == 0)\n+\t\t\t    v.pop ();\n \t\t\t  break;\n \t\t\t}\n \t\t    }\n@@ -147,7 +170,7 @@ sanopt_optimize_walker (basic_block bb, struct sanopt_ctx *ctx)\n \t\t\t}\n \t\t      gsi_remove (&gsi, true);\n \t\t    }\n-\t\t  else if (v.length () < 30)\n+\t\t  else\n \t\t    v.safe_push (stmt);\n \t\t  }\n \t    }"}, {"sha": "003a044eec64948b5733cf27bc6a3f9f34f99bf0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -1,3 +1,16 @@\n+2014-11-06  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/ubsan/align-2.c: Add dg-output.\n+\t* c-c++-common/ubsan/align-4.c: Likewise.\n+\t* c-c++-common/ubsan/align-6.c: New test.\n+\t* c-c++-common/ubsan/align-7.c: New test.\n+\t* c-c++-common/ubsan/align-8.c: New test.\n+\t* g++.dg/ubsan/null-1.C: Add dg-output.\n+\t* g++.dg/ubsan/null-2.C: Likewise.\n+\t* g++.dg/ubsan/null-3.C: New test.\n+\t* g++.dg/ubsan/null-4.C: New test.\n+\t* g++.dg/ubsan/null-5.C: New test.\n+\n 2014-11-06  Ilya Tocar  <ilya.tocar@intel.com>\n \n \t* gcc.target/i386/avx512vl-vandnpd-2.c: Fix"}, {"sha": "071de8c202a782b7bf363edd196b9ce15ce3f9f3", "filename": "gcc/testsuite/c-c++-common/ubsan/align-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -51,4 +51,6 @@ main ()\n /* { dg-output \"\\.c:(13|16):\\[0-9]*: \\[^\\n\\r]*store to misaligned address 0x\\[0-9a-fA-F]* for type 'int', which requires 4 byte alignment.*\" } */\n /* { dg-output \"\\.c:23:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n /* { dg-output \"\\.c:(29|30):\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\.c:30:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\.c:31:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n /* { dg-output \"\\.c:37:\\[0-9]*: \\[^\\n\\r]*load of misaligned address 0x\\[0-9a-fA-F]* for type 'long long int', which requires \\[48] byte alignment\" } */"}, {"sha": "3252595d33014311345cd66362897bd584425d7f", "filename": "gcc/testsuite/c-c++-common/ubsan/align-4.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -9,4 +9,6 @@\n /* { dg-output \"\\[^\\n\\r]*\\.c:(13|16):\\[0-9]*: \\[^\\n\\r]*store to misaligned address 0x\\[0-9a-fA-F]* for type 'int', which requires 4 byte alignment.*\" } */\n /* { dg-output \"\\[^\\n\\r]*\\.c:23:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n /* { dg-output \"\\[^\\n\\r]*\\.c:(29|30):\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\.c:30:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\.c:31:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n /* { dg-output \"\\[^\\n\\r]*\\.c:37:\\[0-9]*: \\[^\\n\\r]*load of misaligned address 0x\\[0-9a-fA-F]* for type 'long long int', which requires \\[48] byte alignment\" } */"}, {"sha": "552129258660cca61a768b74d26703e3f0440cf5", "filename": "gcc/testsuite/c-c++-common/ubsan/align-6.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-6.c?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -0,0 +1,33 @@\n+/* Limit this to known non-strict alignment targets.  */\n+/* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-options \"-O -fsanitize=alignment -fsanitize-recover=alignment\" } */\n+\n+struct S { int a; char b; long long c; short d[10]; };\n+struct T { char a; long long b; };\n+struct U { char a; int b; int c; long long d; struct S e; struct T f; } __attribute__((packed));\n+struct V { long long a; struct S b; struct T c; struct U u; } v;\n+\n+__attribute__((noinline, noclone)) int\n+foo (struct S *p)\n+{\n+  volatile int i;\n+  i = p->a;\n+  i = p->a;\n+  i = p->a;\n+  i = p->a;\n+  return p->a;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (&v.u.e))\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-output \"\\.c:14:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\.c:15:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\.c:16:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\.c:17:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-output \"\\.c:18:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */"}, {"sha": "4a18d8d5f05ab2963ab25e56c31af9098cee9507", "filename": "gcc/testsuite/c-c++-common/ubsan/align-7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-7.c?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -0,0 +1,32 @@\n+/* Limit this to known non-strict alignment targets.  */\n+/* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-options \"-O -fsanitize=alignment -fno-sanitize-recover=alignment -fdump-tree-sanopt-details\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+struct S { int a; char b; long long c; short d[10]; };\n+struct T { char a; long long b; };\n+struct U { char a; int b; int c; long long d; struct S e; struct T f; } __attribute__((packed));\n+struct V { long long a; struct S b; struct T c; struct U u; } v;\n+\n+__attribute__((noinline, noclone)) int\n+foo (struct S *p)\n+{\n+  volatile int i;\n+  i = p->a;\n+  i = p->a;\n+  i = p->a;\n+  i = p->a;\n+  return p->a;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (&v.u.e))\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-output \"\\.c:15:\\[0-9]*: \\[^\\n\\r]*member access within misaligned address 0x\\[0-9a-fA-F]* for type 'struct S', which requires \\[48] byte alignment.*\" } */\n+/* { dg-final { scan-tree-dump-times \"Optimizing\" 4 \"sanopt\"} } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}, {"sha": "b930162d92e13be5da56ac9d4ded99b3b8a33770", "filename": "gcc/testsuite/c-c++-common/ubsan/align-8.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-8.c?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -0,0 +1,31 @@\n+/* Limit this to known non-strict alignment targets.  */\n+/* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-options \"-O -fsanitize=alignment -fsanitize-undefined-trap-on-error -fdump-tree-sanopt-details\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+struct S { int a; char b; long long c; short d[10]; };\n+struct T { char a; long long b; };\n+struct U { char a; int b; int c; long long d; struct S e; struct T f; } __attribute__((packed));\n+struct V { long long a; struct S b; struct T c; struct U u; } v;\n+\n+__attribute__((noinline, noclone)) int\n+foo (struct S *p)\n+{\n+  volatile int i;\n+  i = p->a;\n+  i = p->a;\n+  i = p->a;\n+  i = p->a;\n+  return p->a;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (&v.u.e))\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Optimizing\" 4 \"sanopt\"} } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}, {"sha": "e1524b1f922e277cf3065ed48738976fb5012513", "filename": "gcc/testsuite/g++.dg/ubsan/null-1.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-1.C?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -25,4 +25,6 @@ main (void)\n }\n \n // { dg-output \"reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n // { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'const L'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }"}, {"sha": "88f387e17c917d274e6bc0dabef63b2e3e53a382", "filename": "gcc/testsuite/g++.dg/ubsan/null-2.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-2.C?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -35,3 +35,5 @@ main (void)\n \n // { dg-output \"\\.C:26:\\[0-9]*:\\[\\^\\n\\r]*member call on null pointer of type 'struct U'.*\" }\n // { dg-output \"\\.C:29:\\[0-9]*:\\[\\^\\n\\r]*member call on null pointer of type 'struct V'.*\" }\n+// { dg-output \"\\.C:31:\\[0-9]*:\\[\\^\\n\\r]*member call on null pointer of type 'struct V'.*\" }\n+// { dg-output \"\\.C:33:\\[0-9]*:\\[\\^\\n\\r]*member call on null pointer of type 'struct V'\" }"}, {"sha": "cd3716b3eb3d1478c800d6f0653219801f668849", "filename": "gcc/testsuite/g++.dg/ubsan/null-3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-3.C?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run }\n+// { dg-options \"-fsanitize=null\" }\n+\n+int\n+main (void)\n+{\n+  int *p = 0;\n+\n+  int &r1 = *p;\n+  int &r2 = *p;\n+  int &r3 = *p;\n+  int &r4 = *p;\n+  int &r5 = *p;\n+}\n+\n+// { dg-output \"reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"\\[^\\n\\r]*reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }"}, {"sha": "9cb04ef2fccb70f88820a0dda85bf56fa757e0da", "filename": "gcc/testsuite/g++.dg/ubsan/null-4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-4.C?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do run }\n+// { dg-options \"-O -fsanitize=null -fno-sanitize-recover=null -fdump-tree-sanopt-details\" }\n+// { dg-shouldfail \"ubsan\" }\n+\n+int\n+main (void)\n+{\n+  int *p = 0;\n+\n+  int &r1 = *p;\n+  int &r2 = *p;\n+  int &r3 = *p;\n+  int &r4 = *p;\n+  int &r5 = *p;\n+}\n+\n+// { dg-output \"reference binding to null pointer of type 'int'(\\n|\\r\\n|\\r)\" }\n+// { dg-final { scan-tree-dump-times \"Optimizing\" 4 \"sanopt\"} }\n+// { dg-final { cleanup-tree-dump \"sanopt\" } }"}, {"sha": "d8e4a686e53ea8e52ce838eb5b6240aeb5cce612", "filename": "gcc/testsuite/g++.dg/ubsan/null-5.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34896cd612476e1ee0937ff5bd32f597da944866/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fnull-5.C?ref=34896cd612476e1ee0937ff5bd32f597da944866", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do run }\n+// { dg-options \"-O -fsanitize=null -fsanitize-undefined-trap-on-error -fdump-tree-sanopt-details\" }\n+// { dg-shouldfail \"ubsan\" }\n+\n+int\n+main (void)\n+{\n+  int *p = 0;\n+\n+  int &r1 = *p;\n+  int &r2 = *p;\n+  int &r3 = *p;\n+  int &r4 = *p;\n+  int &r5 = *p;\n+}\n+\n+// { dg-final { scan-tree-dump-times \"Optimizing\" 4 \"sanopt\"} }\n+// { dg-final { cleanup-tree-dump \"sanopt\" } }"}]}