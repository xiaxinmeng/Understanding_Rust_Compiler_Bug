{"sha": "2ea80cfdcfc376c8b17e6caf9225934b9926504a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVhODBjZmRjZmMzNzZjOGIxN2U2Y2FmOTIyNTkzNGI5OTI2NTA0YQ==", "commit": {"author": {"name": "David Billinghurst", "email": "David.Billinghurst@riotinto.com", "date": "2001-07-11T19:00:48Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-07-11T19:00:48Z"}, "message": "intrinsic77.f: New test.\n\n2001-07-11  David Billinghurst <David.Billinghurst@riotinto.com>\n\n\t* g77.f-torture/execute/intrinsic77.f: New test.\n\nFrom-SVN: r43946", "tree": {"sha": "0be26bcbbb2dbe1c7a3a10017439c8a995c7a982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0be26bcbbb2dbe1c7a3a10017439c8a995c7a982"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ea80cfdcfc376c8b17e6caf9225934b9926504a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea80cfdcfc376c8b17e6caf9225934b9926504a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea80cfdcfc376c8b17e6caf9225934b9926504a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea80cfdcfc376c8b17e6caf9225934b9926504a/comments", "author": null, "committer": null, "parents": [{"sha": "9312aecc037c2f04b44be4c6e2239a7708e14c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9312aecc037c2f04b44be4c6e2239a7708e14c19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9312aecc037c2f04b44be4c6e2239a7708e14c19"}], "stats": {"total": 590, "additions": 590, "deletions": 0}, "files": [{"sha": "d9e01b8edd728ca42269d2852684519348343673", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea80cfdcfc376c8b17e6caf9225934b9926504a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea80cfdcfc376c8b17e6caf9225934b9926504a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ea80cfdcfc376c8b17e6caf9225934b9926504a", "patch": "@@ -1,3 +1,7 @@\n+2001-07-11  David Billinghurst <David.Billinghurst@riotinto.com>\n+\n+\t* g77.f-torture/execute/intrinsic77.f: New test.\n+\n 2001-07-11  Janis Johnson <janis@us.ibm.com>\n \n \t* gcc.misc-tests/gcov-3.c: New test."}, {"sha": "19073196885d4c1ec48add52daadb08fb822dfd1", "filename": "gcc/testsuite/g77.f-torture/execute/intrinsic77.f", "status": "added", "additions": 586, "deletions": 0, "changes": 586, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea80cfdcfc376c8b17e6caf9225934b9926504a/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fintrinsic77.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea80cfdcfc376c8b17e6caf9225934b9926504a/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fintrinsic77.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fexecute%2Fintrinsic77.f?ref=2ea80cfdcfc376c8b17e6caf9225934b9926504a", "patch": "@@ -0,0 +1,586 @@\n+      program intrinsic77\n+c\n+c  Test Fortran 77 intrinsic functions (ANSI X3.9-1978 Section 15.10)\n+c \n+c  Test:\n+c  *  specific functions\n+c  *  generic functions with each argument type\n+c  *  specific functions by passing as subroutine argument\n+c     where permiited by Section 13.12 of Fortran 90 standard\n+c\n+      logical fail\n+      common /flags/ fail\n+\n+      fail = .false.\n+      call type_conversion\n+      call truncation\n+      call nearest_whole_number\n+      call nearest_integer\n+      call absolute_value\n+      call remaindering\n+      call transfer_of_sign\n+      call positive_difference\n+      call double_precision_product\n+      call choosing_largest_value\n+      call choosing_smallest_value\n+      call length_of_character_array\n+      call index_of_substring\n+      call imaginary_part\n+      call complex_conjugate\n+      call square_root\n+      call exponential\n+      call natural_logarithm\n+      call common_logarithm\n+      call sine\n+      call cosine\n+      call tangent\n+      call arcsine\n+      call arccosine\n+      call arctangent\n+      call hyperbolic_sine\n+      call hyperbolic_cosine\n+      call hyperbolic_tangent\n+      call lexically_greater_than_or_equal\n+      call lexically_greater_than\n+      call lexically_less_than_or_equal\n+      call lexically_less_than\n+\n+      if ( fail ) call abort()\n+      end\n+\n+      subroutine failure(label)\n+c     Report failure and set flag\n+      character*(*) label\n+      logical fail\n+      common /flags/ fail\n+      write(6,'(a,a,a)') 'Test ',label,' FAILED'\n+      fail = .true.\n+      end\n+\n+      subroutine c_i(i,j,label)\n+c     Check if INTEGER i equals j, and fail otherwise\n+      integer i,j\n+      character*(*) label\n+      if ( i .ne. j ) then\n+         call failure(label)\n+         write(6,*) 'Got ',i,' expected ', j\n+      end if\n+      end\n+\n+      subroutine c_r(a,b,label)\n+c     Check if REAL a equals b, and fail otherwise\n+      real a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0e-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_d(a,b,label)\n+c     Check if DOUBLE PRECISION a equals b, and fail otherwise\n+      double precision a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0d-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_c(a,b,label)\n+c     Check if COMPLEX a equals b, and fail otherwise\n+      complex a, b\n+      character*(*) label\n+      if ( abs(a-b) .gt. 1.0e-5 ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_l(a,b,label)\n+c     Check if LOGICAL a equals b, and fail otherwise\n+      logical a, b\n+      character*(*) label\n+      if ( a .neqv. b ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine c_ch(a,b,label)\n+c     Check if CHARACTER a equals b, and fail otherwise\n+      character*(*) a, b\n+      character*(*) label\n+      if ( a .ne. b ) then\n+         call failure(label)\n+         write(6,*) 'Got ',a,' expected ', b\n+      end if\n+      end\n+\n+      subroutine p_i_i(f,x,i,label)\n+c     Check if INTEGER f(x) equals i for INTEGER x\n+      integer f,x,i\n+      character*(*) label\n+      call c_i(f(x),i,label)\n+      end\n+\n+      subroutine p_i_ii(f,x1,x2,i,label)\n+c     Check if INTEGER f(x1,x2) equals i for INTEGER x\n+      integer f,x1,x2,i\n+      character*(*) label\n+      call c_i(f(x1,x2),i,label)\n+      end\n+\n+      subroutine p_i_r(f,x,i,label)\n+c     Check if INTEGER f(x) equals i for REAL x\n+      real x\n+      integer f,i\n+      character*(*) label\n+      call c_i(f(x),i,label)\n+      end\n+\n+      subroutine p_i_d(f,x,i,label)\n+c     Check if INTEGER f(x) equals i for DOUBLE PRECISION x\n+      double precision x\n+      integer f,i\n+      character*(*) label\n+      call c_i(f(x),i,label)\n+      end\n+\n+      subroutine p_i_ch(f,x,a,label)\n+c     Check if INTEGER f(x) equals a for CHARACTER x\n+      character*(*) x\n+      integer f, a\n+      character*(*) label\n+      call c_i(f(x),a,label)\n+      end\n+\n+      subroutine p_i_chch(f,x1,x2,a,label)\n+c     Check if INTEGER f(x1,x2) equals a for CHARACTER x1 and x2\n+      character*(*) x1,x2\n+      integer f, a\n+      character*(*) label\n+      call c_i(f(x1,x2),a,label)\n+      end\n+\n+      subroutine p_r_r(f,x,a,label)\n+c     Check if REAL f(x) equals a for REAL x\n+      real f,x,a\n+      character*(*) label\n+      call c_r(f(x),a,label)\n+      end\n+\n+      subroutine p_r_rr(f,x1,x2,a,label)\n+c     Check if REAL f(x1,x2) equals a for REAL x1, x2\n+      real f,x1,x2,a\n+      character*(*) label\n+      call c_r(f(x1,x2),a,label)\n+      end\n+\n+      subroutine p_d_d(f,x,a,label)\n+c     Check if DOUBLE PRECISION f(x) equals a for DOUBLE PRECISION x\n+      double precision f,x,a\n+      character*(*) label\n+      call c_d(f(x),a,label)\n+      end\n+\n+      subroutine p_d_rr(f,x1,x2,a,label)\n+c     Check if DOUBLE PRECISION f(x1,x2) equals a for real x1,x2\n+      double precision f,a\n+      real x1,x2\n+      character*(*) label\n+      call c_d(f(x1,x2),a,label)\n+      end\n+\n+      subroutine p_d_dd(f,x1,x2,a,label)\n+c     Check if DOUBLE PRECISION f(x1,x2) equals a for DOUBLE PRECISION x1,x2\n+      double precision f,x1,x2,a\n+      character*(*) label\n+      call c_d(f(x1,x2),a,label)\n+      end\n+\n+      subroutine p_c_c(f,x,a,label)\n+c     Check if COMPLEX f(x) equals a for COMPLEX x\n+      complex f,x,a\n+      character*(*) label\n+      call c_c(f(x),a,label)\n+      end\n+\n+      subroutine p_r_c(f,x,a,label)\n+c     Check if REAL f(x) equals a for COMPLEX x\n+      complex x\n+      real f, a\n+      character*(*) label\n+      call c_r(f(x),a,label)\n+      end\n+\n+      subroutine type_conversion\n+      integer i\n+      character*1 c\n+c     conversion to integer\n+      call c_i(INT(5),5,'INT(integer)')\n+      call c_i(INT(5.01),5,'INT(real)')\n+      call c_i(INT(5.01d0),5,'INT(double)')\n+      call c_i(INT((5.01,-3.0)),5,'INT(complex)')\n+      call c_i(IFIX(5.01),5,'IFIX(real)')\n+      call c_i(IDINT(5.01d0),5,'IDINT(double)')\n+c     conversion to real\n+      call c_r(REAL(-2),-2.0,'REAL(integer)')\n+      call c_r(REAL(-2.0),-2.0,'REAL(real)')\n+      call c_r(REAL(-2.0d0),-2.0,'REAL(double)')\n+      call c_r(REAL((-2.,9.)),-2.0,'REAL(complex)')\n+      call c_r(FLOAT(-2),-2.0,'FLOAT(int)')\n+      call c_r(SNGL(-2.0d0),-2.0,'SNGL(double)')\n+c     conversion to double\n+      call c_d(DBLE(5),5.0d0,'DBLE(integer)')\n+      call c_d(DBLE(5.),5.0d0,'DBLE(real)')\n+      call c_d(DBLE(5.0d0),5.0d0,'DBLE(double)')\n+      call c_d(DBLE((5.0,0.5)),5.0d0,'DBLE(complex)')\n+c     conversion to complex\n+      call c_c(CMPLX(1),(1.,0.),'CMPLX(integer)')\n+      call c_c(CMPLX(1,2),(1.,2.),'CMPLX(integer, integer)')\n+      call c_c(CMPLX(1.),(1.,0.),'CMPLX(real)')\n+      call c_c(CMPLX(1.,2.),(1.,2.),'CMPLX(real,real)')\n+      call c_c(CMPLX(1.d0),(1.,0.),'CMPLX(double)')\n+      call c_c(CMPLX(1.d0,2.d0),(1.,2.),'CMPLX(double,double)')\n+      call c_c(CMPLX(1.,2.),(1.,2.),'CMPLX(complex)')\n+c     character conversion\n+      c = 'C'\n+      i = ichar(c)\n+      call c_i(ICHAR(c),i,'ICHAR')\n+      call c_ch(CHAR(i),c,'CHAR')\n+      end\n+\n+      subroutine truncation\n+      intrinsic aint, dint\n+      call c_r(AINT(9.2),9.0,'AINT(real)')\n+      call c_d(AINT(9.2d0),9.0d0,'AINT(double)')\n+      call c_d(DINT(9.2d0),9.0d0,'DINT(double)')\n+      call p_r_r(AINT,9.2,9.0,'AINT')\n+      call p_d_d(DINT,9.2d0,9.0d0,'DINT')\n+      end\n+\n+      subroutine nearest_whole_number\n+      intrinsic anint, dnint\n+      call c_r(ANINT(9.2),9.0,'ANINT(real)')\n+      call c_d(ANINT(9.2d0),9.0d0,'ANINT(double)')\n+      call c_d(DNINT(9.2d0),9.0d0,'DNINT(double)')\n+      call p_r_r(ANINT,9.2,9.0,'ANINT')\n+      call p_d_d(DNINT,9.2d0,9.0d0,'DNINT')\n+      end\n+\n+      subroutine nearest_integer\n+      intrinsic nint, idnint\n+      call c_i(NINT(9.2),9,'NINT(real)')\n+      call c_i(NINT(9.2d0),9,'NINT(double)')\n+      call c_i(IDNINT(9.2d0),9,'IDNINT(double)')\n+      call p_i_r(NINT,9.2,9,'NINT')\n+      call p_i_d(IDNINT,9.2d0,9,'IDNINT')\n+      end\n+\n+      subroutine absolute_value\n+      intrinsic iabs, abs, dabs, cabs\n+      call c_i(ABS(-7),7,'ABS(integer)')\n+      call c_r(ABS(-7.),7.,'ABS(real)')\n+      call c_d(ABS(-7.d0),7.d0,'ABS(double)')\n+      call c_r(ABS((3.,-4.)),5.0,'ABS(complex)')\n+      call c_i(IABS(-7),7,'IABS(integer)')\n+      call c_d( DABS(-7.d0),7.d0,'DABS(double)')\n+      call c_r( CABS((3.,-4.)),5.0,'CABS(complex)')\n+      call p_i_i(IABS,-7,7,'IABS')\n+      call p_r_r(ABS,-7.,7.,'ABS')\n+      call p_d_d(DABS,-7.0d0,7.0d0,'DABS')\n+      call p_r_c(CABS,(3.,-4.), 5.0,'CABS')\n+      end\n+\n+      subroutine remaindering\n+      intrinsic mod, amod, dmod\n+      call c_i( MOD(8,3),2,'MOD(integer,integer)')\n+      call c_r( MOD(8.,3.),2.,'MOD(real,real)')\n+      call c_d( MOD(8.d0,3.d0),2.d0,'MOD(double,double)')\n+      call c_r( AMOD(8.,3.),2.,'AMOD(real,real)')\n+      call c_d( DMOD(8.d0,3.d0),2.d0,'DMOD(double,double)')\n+      call p_i_ii(MOD,8,3,2,'MOD')\n+      call p_r_rr(AMOD,8.,3.,2.,'AMOD')\n+      call p_d_dd(DMOD,8.d0,3.d0,2.d0,'DMOD')\n+      end\n+\n+      subroutine transfer_of_sign\n+      intrinsic isign,sign,dsign\n+      call c_i(SIGN(8,-3),-8,'SIGN(integer)')\n+      call c_r(SIGN(8.,-3.),-8.,'SIGN(real,real)')\n+      call c_d(SIGN(8.d0,-3.d0),-8.d0,'SIGN(double,double)')\n+      call c_i(ISIGN(8,-3),-8,'ISIGN(integer)')\n+      call c_d(DSIGN(8.d0,-3.d0),-8.d0,'DSIGN(double,double)')\n+      call p_i_ii(ISIGN,8,-3,-8,'ISIGN')\n+      call p_r_rr(SIGN,8.,-3.,-8.,'SIGN')\n+      call p_d_dd(DSIGN,8.d0,-3.d0,-8.d0,'DSIGN')\n+      end\n+\n+      subroutine positive_difference\n+      intrinsic idim, dim, ddim\n+      call c_i(DIM(-8,-3),0,'DIM(integer)')\n+      call c_r(DIM(-8.,-3.),0.,'DIM(real,real)')\n+      call c_d(DIM(-8.d0,-3.d0),0.d0,'DIM(double,double)')\n+      call c_i(IDIM(-8,-3),0,'IDIM(integer)')\n+      call c_d(DDIM(-8.d0,-3.d0),0.d0,'DDIM(double,double)')\n+      call p_i_ii(IDIM,-8,-3,0,'IDIM')\n+      call p_r_rr(DIM,-8.,-3.,0.,'DIM')\n+      call p_d_dd(DDIM,-8.d0,-3.d0,0.d0,'DDIM')\n+      end\n+\n+      subroutine double_precision_product\n+      intrinsic dprod\n+      call c_d(DPROD(-8.,-3.),24.d0,'DPROD(real,real)')\n+      call p_d_rr(DPROD,-8.,-3.,24.d0,'DPROD')\n+      end\n+\n+      subroutine choosing_largest_value\n+      call c_i(MAX(1,2,3),3,'MAX(integer,integer,integer)')\n+      call c_r(MAX(1.,2.,3.),3.,'MAX(real,real,real)')\n+      call c_d(MAX(1.d0,2.d0,3.d0),3.d0,'MAX(double,double,double)')\n+      call c_i(MAX0(1,2,3),3,'MAX0(integer,integer,integer)')\n+      call c_r(AMAX1(1.,2.,3.),3.,'MAX(real,real,real)')\n+      call c_d(DMAX1(1.d0,2.d0,3.d0),3.d0,'DMAX1(double,double,double)')\n+      call c_r(AMAX0(1,2,3),3.,'AMAX0(integer,integer,integer)')\n+      call c_i(MAX1(1.,2.,3.),3,'MAX1(real,real,real)')\n+      end\n+\n+      subroutine choosing_smallest_value\n+      call c_i(MIN(1,2,3),1,'MIN(integer,integer,integer)')\n+      call c_r(MIN(1.,2.,3.),1.,'MIN(real,real,real)')\n+      call c_d(MIN(1.d0,2.d0,3.d0),1.d0,'MIN(double,double,double)')\n+      call c_i(MIN0(1,2,3),1,'MIN0(integer,integer,integer)')\n+      call c_r(AMIN1(1.,2.,3.),1.,'MIN(real,real,real)')\n+      call c_d(DMIN1(1.d0,2.d0,3.d0),1.d0,'DMIN1(double,double,double)')\n+      call c_r(AMIN0(1,2,3),1.,'AMIN0(integer,integer,integer)')\n+      call c_i(MIN1(1.,2.,3.),1,'MIN1(real,real,real)')\n+      end\n+\n+      subroutine length_of_character_array\n+      intrinsic len\n+      call c_i(LEN('ABCDEF'),6,'LEN 1')\n+      call p_i_ch(LEN,'ABCDEF',6,'LEN 2')\n+      end\n+\n+      subroutine index_of_substring\n+      intrinsic index\n+      call c_i(INDEX('ABCDEF','C'),3,'INDEX 1')\n+      call p_i_chch(INDEX,'ABCDEF','C',3,'INDEX 2')\n+      end\n+\n+      subroutine imaginary_part\n+      intrinsic aimag\n+      call c_r(AIMAG((2.,-7.)),-7.,'AIMAG(complex)')\n+      call p_r_c(AIMAG,(2.,-7.),-7.,'AIMAG(complex)')\n+      end\n+\n+      subroutine complex_conjugate\n+      intrinsic conjg\n+      call c_c(CONJG((2.,-7.)),(2.,7.),'CONJG(complex)')\n+      call p_c_c(CONJG,(2.,-7.),(2.,7.),'CONJG')\n+      end\n+\n+      subroutine square_root\n+      intrinsic sqrt, dsqrt, csqrt\n+      real x, a\n+      x = 4.0\n+      a = 2.0\n+      call c_r(SQRT(x),a,'SQRT(real)')\n+      call c_d(SQRT(1.d0*x),1.d0*a,'SQRT(double)')\n+      call c_c(SQRT((1.,0.)*x),(1.,0.)*a,'SQRT(complex)')\n+      call c_d(DSQRT(1.d0*x),1.d0*a,'DSQRT(double)')\n+      call c_c(CSQRT((1.,0.)*x),(1.,0.)*a,'CSQRT(complex)')\n+      call p_r_r(SQRT,x,a,'SQRT')\n+      call p_d_d(DSQRT,1.d0*x,1.d0*a,'DSQRT')\n+      call p_c_c(CSQRT,(1.,0.)*x,(1.,0.)*a ,'CSQRT')\n+      end\n+\n+      subroutine exponential\n+      intrinsic exp, dexp, cexp\n+      real x, a\n+      x = 0.0\n+      a = 1.0\n+      call c_r(EXP(x),a,'EXP(real)')\n+      call c_d(EXP(1.d0*x),1.d0*a,'EXP(double)')\n+      call c_c(EXP((1.,0.)*x),(1.,0.)*a,'EXP(complex)')\n+      call c_d(DEXP(1.d0*x),1.d0*a,'DEXP(double)')\n+      call c_c(CEXP((1.,0.)*x),(1.,0.)*a,'CEXP(complex)')\n+      call p_r_r(EXP,x,a,'EXP')\n+      call p_d_d(DEXP,1.d0*x,1.d0*a,'DEXP')\n+      call p_c_c(CEXP,(1.,0.)*x,(1.,0.)*a ,'CEXP')\n+      end\n+\n+      subroutine natural_logarithm\n+      intrinsic alog, dlog, clog\n+      real x, a\n+      a = 1.234\n+      x = exp(a)\n+      call c_r(LOG(x),a,'LOG(real)')\n+      call c_d(LOG(1.d0*x),1.d0*a,'LOG(double)')\n+      call c_c(LOG((1.,0.)*x),(1.,0.)*a,'LOG(complex)')\n+      call c_r(ALOG(x),a,'ALOG(real)')\n+      call c_d(DLOG(1.d0*x),1.d0*a,'DLOG(double)')\n+      call c_c(CLOG((1.,0.)*x),(1.,0.)*a,'CLOG(complex)')\n+      call p_r_r(ALOG,x,a,'LOG')\n+      call p_d_d(DLOG,1.d0*x,1.d0*a,'DLOG')\n+      call p_c_c(CLOG,(1.,0.)*x,(1.,0.)*a,'CLOG')\n+      end\n+\n+      subroutine common_logarithm\n+      intrinsic alog10, dlog10\n+      real x, a\n+      x = 100.0\n+      a = 2.0\n+      call c_r(LOG10(x),a,'LOG10(real)')\n+      call c_d(LOG10(1.d0*x),1.d0*a,'LOG10(double)')\n+      call c_r(ALOG10(x),a,'ALOG10(real)')\n+      call c_d(DLOG10(1.d0*x),1.d0*a,'DLOG10(double)')\n+      call p_r_r(ALOG10,x,a,'ALOG10')\n+      call p_d_d(DLOG10,1.d0*x,1.d0*a ,'DLOG10')\n+      end\n+\n+      subroutine sine\n+      intrinsic sin, dsin, csin\n+      real x, a\n+      a = 1.0\n+      x = asin(a)\n+      call c_r(SIN(x),a,'SIN(real)')\n+      call c_d(SIN(1.d0*x),1.d0*a,'SIN(double)')\n+      call c_c(SIN((1.,0.)*x),(1.,0.)*a,'SIN(complex)')\n+      call c_d(DSIN(1.d0*x),1.d0*a,'DSIN(double)')\n+      call c_c(CSIN((1.,0.)*x),(1.,0.)*a,'CSIN(complex)')\n+      call p_r_r(SIN,x,a,'SIN')\n+      call p_d_d(DSIN,1.d0*x,1.d0*a,'DSIN')\n+      call p_c_c(CSIN,(1.,0.)*x,(1.,0.)*a ,'CSIN')\n+      end\n+\n+      subroutine cosine\n+      intrinsic cos, dcos, ccos\n+      real x, a\n+      a = 0.123456\n+      x = acos(a)\n+      call c_r(COS(x),a,'COS(real)')\n+      call c_d(COS(1.d0*x),1.d0*a,'COS(double)')\n+      call c_c(COS((1.,0.)*x),(1.,0.)*a,'COS(complex)')\n+      call c_r(COS(x),a,'COS(real)')\n+      call c_d(DCOS(1.d0*x),1.d0*a,'DCOS(double)')\n+      call c_c(CCOS((1.,0.)*x),(1.,0.)*a,'CCOS(complex)')\n+      call p_r_r(COS,x,a,'COS')\n+      call p_d_d(DCOS,1.d0*x,1.d0*a ,'DCOS')\n+      call p_c_c(CCOS,(1.,0.)*x, (1.,0.)*a ,'CCOS')\n+      end\n+\n+      subroutine tangent\n+      intrinsic tan, dtan\n+      real x, a\n+      a = 0.5\n+      x = atan(a)\n+      call c_r(TAN(x),a,'TAN(real)')\n+      call c_d(TAN(1.d0*x),1.d0*a,'TAN(double)')\n+      call c_d(DTAN(1.d0*x),1.d0*a,'DTAN(double)')\n+      call p_r_r(TAN,x,a,'TAN')\n+      call p_d_d(DTAN,1.d0*x,1.d0*a ,'DTAN')\n+      end\n+\n+      subroutine arcsine\n+      intrinsic asin, dasin\n+      real x, a\n+      a = 0.5\n+      x = sin(a)\n+      call c_r(ASIN(x),a,'ASIN(real)')\n+      call c_d(ASIN(1.d0*x),1.d0*a,'ASIN(double)')\n+      call c_d(DASIN(1.d0*x),1.d0*a,'DASIN(double)')\n+      call p_r_r(ASIN,x,a,'ASIN')\n+      call p_d_d(DASIN,1.d0*x,1.d0*a ,'DASIN')\n+      end\n+\n+      subroutine arccosine\n+      intrinsic acos, dacos\n+      real x, a\n+      x = 0.70710678\n+      a = 0.785398\n+      call c_r(ACOS(x),a,'ACOS(real)')\n+      call c_d(ACOS(1.d0*x),1.d0*a,'ACOS(double)')\n+      call c_d(DACOS(1.d0*x),1.d0*a,'DACOS(double)')\n+      call p_r_r(ACOS,x,a,'ACOS')\n+      call p_d_d(DACOS,1.d0*x,1.d0*a ,'DACOS')\n+      end\n+\n+      subroutine arctangent\n+      intrinsic atan, atan2, datan, datan2\n+      real x1, x2, a\n+      a = 0.75\n+      x1 = tan(a)\n+      x2 = 1.0\n+      call c_r(ATAN(x1),a,'ATAN(real)')\n+      call c_d(ATAN(1.d0*x1),1.d0*a,'ATAN(double)')\n+      call c_d(DATAN(1.d0*x1),1.d0*a,'DATAN(double)')\n+      call c_r(ATAN2(x1,x2),a,'ATAN2(real)')\n+      call c_d(ATAN2(1.d0*x1,1.d0*x2),1.d0*a,'ATAN2(double)')\n+      call c_d(DATAN2(1.d0*x1,1.d0*x2),1.0d0*a,'DATAN2(double)')\n+      call p_r_r(ATAN,x1,a,'ATAN')\n+      call p_d_d(DATAN,1.d0*x1,1.d0*a,'DATAN')\n+      call p_r_rr(ATAN2,x1,x2,a,'ATAN2')\n+      call p_d_dd(DATAN2,1.d0*x1,1.d0*x2,1.d0*a,'DATAN2')\n+      end\n+\n+      subroutine hyperbolic_sine\n+      intrinsic sinh, dsinh\n+      real x, a\n+      x = 1.0\n+      a = 1.1752012\n+      call c_r(SINH(x),a,'SINH(real)')\n+      call c_d(SINH(1.d0*x),1.d0*a,'SINH(double)')\n+      call c_d(DSINH(1.d0*x),1.d0*a,'DSINH(double)')\n+      call p_r_r(SINH,x,a,'SINH')\n+      call p_d_d(DSINH,1.d0*x,1.d0*a ,'DSINH')\n+      end\n+\n+      subroutine hyperbolic_cosine\n+      intrinsic cosh, dcosh\n+      real x, a\n+      x = 1.0\n+      a = 1.5430806\n+      call c_r(COSH(x),a,'COSH(real)')\n+      call c_d(COSH(1.d0*x),1.d0*a,'COSH(double)')\n+      call c_d(DCOSH(1.d0*x),1.d0*a,'DCOSH(double)')\n+      call p_r_r(COSH,x,a,'COSH')\n+      call p_d_d(DCOSH,1.d0*x,1.d0*a ,'DCOSH')\n+      end\n+\n+      subroutine hyperbolic_tangent\n+      intrinsic tanh, dtanh\n+      real x, a\n+      x = 1.0\n+      a = 0.76159416\n+      call c_r(TANH(x),a,'TANH(real)')\n+      call c_d(TANH(1.d0*x),1.d0*a,'TANH(double)')\n+      call c_d(DTANH(1.d0*x),1.d0*a,'DTANH(double)')\n+      call p_r_r(TANH,x,a,'TANH')\n+      call p_d_d(DTANH,1.d0*x,1.d0*a ,'DTANH')\n+      end\n+\n+      subroutine lexically_greater_than_or_equal\n+      call c_l(LGE('A','B'),.FALSE.,'LGE(character,character) 1')\n+      call c_l(LGE('B','A'),.TRUE.,'LGE(character,character) 2')\n+      call c_l(LGE('A','A'),.TRUE.,'LGE(character,character) 3')\n+      end\n+\n+      subroutine lexically_greater_than\n+      call c_l(LGT('A','B'),.FALSE.,'LGT(character,character) 1')\n+      call c_l(LGT('B','A'),.TRUE.,'LGT(character,character) 2')\n+      call c_l(LGT('A','A'),.FALSE.,'LGT(character,character) 3')\n+      end\n+\n+      subroutine lexically_less_than_or_equal\n+      call c_l(LLE('A','B'),.TRUE.,'LLE(character,character) 1')\n+      call c_l(LLE('B','A'),.FALSE.,'LLE(character,character) 2')\n+      call c_l(LLE('A','A'),.TRUE.,'LLE(character,character) 3')\n+      end\n+\n+      subroutine lexically_less_than\n+      call c_l(LLT('A','B'),.TRUE.,'LLT(character,character) 1')\n+      call c_l(LLT('B','A'),.FALSE.,'LLT(character,character) 2')\n+      call c_l(LLT('A','A'),.FALSE.,'LLT(character,character) 3')\n+      end"}]}