{"sha": "c2b23aaaf4457278403c01cd145cd3936683384e", "node_id": "C_kwDOANBUbNoAKGMyYjIzYWFhZjQ0NTcyNzg0MDNjMDFjZDE0NWNkMzkzNjY4MzM4NGU", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-18T11:31:02Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-22T13:51:59Z"}, "message": "[nvptx] Add -mptx-comment\n\nAdd functionality that indicates which insns are added by -minit-regs, such\nthat for instance we have for pr53465.s:\n...\n        // #APP\n// 9 \"gcc/testsuite/gcc.c-torture/execute/pr53465.c\" 1\n        // Start: Added by -minit-regs=3:\n        // #NO_APP\n                mov.u32 %r26, 0;\n        // #APP\n// 9 \"gcc/testsuite/gcc.c-torture/execute/pr53465.c\" 1\n        // End: Added by -minit-regs=3:\n        // #NO_APP\n...\n\nCan be switched off using -mno-ptx-comment.\n\nTested on nvptx.\n\ngcc/ChangeLog:\n\n2022-02-21  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.cc (gen_comment): New function.\n\t(workaround_uninit_method_1, workaround_uninit_method_2)\n\t(workaround_uninit_method_3): : Use gen_comment.\n\t* config/nvptx/nvptx.opt (mptx-comment): New option.", "tree": {"sha": "12f97c92c87ef889bcc443f3e16b683e96a21399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12f97c92c87ef889bcc443f3e16b683e96a21399"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2b23aaaf4457278403c01cd145cd3936683384e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b23aaaf4457278403c01cd145cd3936683384e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2b23aaaf4457278403c01cd145cd3936683384e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b23aaaf4457278403c01cd145cd3936683384e/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d669237f7d56d83b3c7bc12a957db22b3c410b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d669237f7d56d83b3c7bc12a957db22b3c410b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d669237f7d56d83b3c7bc12a957db22b3c410b43"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "981b91f70955990fb1c7a426d6c19e651eb63fa0", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b23aaaf4457278403c01cd145cd3936683384e/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b23aaaf4457278403c01cd145cd3936683384e/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=c2b23aaaf4457278403c01cd145cd3936683384e", "patch": "@@ -5372,6 +5372,17 @@ workaround_barsyncs (void)\n }\n #endif\n \n+static rtx\n+gen_comment (const char *s)\n+{\n+  const char *sep = \" \";\n+  size_t len = strlen (ASM_COMMENT_START) + strlen (sep) + strlen (s) + 1;\n+  char *comment = (char *) alloca (len);\n+  snprintf (comment, len, \"%s%s%s\", ASM_COMMENT_START, sep, s);\n+  return gen_rtx_ASM_INPUT_loc (VOIDmode, ggc_strdup (comment),\n+\t\t\t\tcfun->function_start_locus);\n+}\n+\n /* Initialize all declared regs at function entry.\n    Advantage   : Fool-proof.\n    Disadvantage: Potentially creates a lot of long live ranges and adds a lot\n@@ -5394,6 +5405,8 @@ workaround_uninit_method_1 (void)\n       gcc_assert (CONST0_RTX (GET_MODE (reg)));\n \n       start_sequence ();\n+      if (nvptx_comment && first != NULL)\n+\temit_insn (gen_comment (\"Start: Added by -minit-regs=1\"));\n       emit_move_insn (reg, CONST0_RTX (GET_MODE (reg)));\n       rtx_insn *inits = get_insns ();\n       end_sequence ();\n@@ -5411,6 +5424,9 @@ workaround_uninit_method_1 (void)\n       else\n \tinsert_here = emit_insn_after (inits, insert_here);\n     }\n+\n+  if (nvptx_comment && insert_here != NULL)\n+    emit_insn_after (gen_comment (\"End: Added by -minit-regs=1\"), insert_here);\n }\n \n /* Find uses of regs that are not defined on all incoming paths, and insert a\n@@ -5446,6 +5462,8 @@ workaround_uninit_method_2 (void)\n       gcc_assert (CONST0_RTX (GET_MODE (reg)));\n \n       start_sequence ();\n+      if (nvptx_comment && first != NULL)\n+\temit_insn (gen_comment (\"Start: Added by -minit-regs=2:\"));\n       emit_move_insn (reg, CONST0_RTX (GET_MODE (reg)));\n       rtx_insn *inits = get_insns ();\n       end_sequence ();\n@@ -5463,6 +5481,9 @@ workaround_uninit_method_2 (void)\n       else\n \tinsert_here = emit_insn_after (inits, insert_here);\n     }\n+\n+  if (nvptx_comment && insert_here != NULL)\n+    emit_insn_after (gen_comment (\"End: Added by -minit-regs=2\"), insert_here);\n }\n \n /* Find uses of regs that are not defined on all incoming paths, and insert a\n@@ -5531,6 +5552,27 @@ workaround_uninit_method_3 (void)\n \t}\n     }\n \n+  if (nvptx_comment)\n+    FOR_EACH_BB_FN (bb, cfun)\n+      {\n+\tif (single_pred_p (bb))\n+\t  continue;\n+\n+\tedge e;\n+\tedge_iterator ei;\n+\tFOR_EACH_EDGE (e, ei, bb->preds)\n+\t  {\n+\t    if (e->insns.r == NULL_RTX)\n+\t      continue;\n+\t    start_sequence ();\n+\t    emit_insn (gen_comment (\"Start: Added by -minit-regs=3:\"));\n+\t    emit_insn (e->insns.r);\n+\t    emit_insn (gen_comment (\"End: Added by -minit-regs=3:\"));\n+\t    e->insns.r = get_insns ();\n+\t    end_sequence ();\n+\t  }\n+      }\n+\n   commit_edge_insertions ();\n }\n "}, {"sha": "e56ec9288da631b36ab100b3c0f4d6a5bd8cb640", "filename": "gcc/config/nvptx/nvptx.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2b23aaaf4457278403c01cd145cd3936683384e/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2b23aaaf4457278403c01cd145cd3936683384e/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt?ref=c2b23aaaf4457278403c01cd145cd3936683384e", "patch": "@@ -95,3 +95,6 @@ Specify the version of the ptx version to use.\n minit-regs=\n Target Var(nvptx_init_regs) IntegerRange(0, 3) Joined UInteger Init(3)\n Initialize ptx registers.\n+\n+mptx-comment\n+Target Var(nvptx_comment) Init(1) Undocumented"}]}