{"sha": "f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlYjlhOGVjNmNmZjAyZjUyZDdhMjlkOTZlYzY2NDFkMmEwNmRlMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-11-07T01:24:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-11-07T01:24:57Z"}, "message": "re PR go/66138 (json decoder Decode function fails for some structure return values)\n\n\tPR go/66138\n    reflect, encoding/json, encoding/xml: fix unexported embedded structs\n    \n    Bring in three changes from the master Go repository.  These changes\n    will be in Go 1.6, but they are appropriate for gccgo now because they\n    resolve a long-standing discrepancy between how gc and gccgo handle the\n    PkgPath field for embedded unexported struct fields.  The core issue is\n    described at https://golang.org/cl/7247.  This has been reported against\n    gccgo as https://gcc.gnu.org/PR66138.\n    \n    The three changes being brought over are:\n    \n    https://golang.org/cl/14010\n    \n    reflect: adjust access to unexported embedded structs\n    \n    This CL changes reflect to allow access to exported fields and\n    methods in unexported embedded structs for gccgo and after gc\n    has been adjusted to disallow access to embedded unexported structs.\n    \n    Adresses #12367, #7363, #11007, and #7247.\n    \n    https://golang.org/cl/14011\n    \n    encoding/json: check for exported fields in embedded structs\n    \n    Addresses issue #12367.\n    \n    https://golang.org/cl/14012\n    \n    encoding/xml: check for exported fields in embedded structs\n    \n    Addresses issue #12367.\n    \n    Reviewed-on: https://go-review.googlesource.com/16723\n\nFrom-SVN: r229907", "tree": {"sha": "fb4d9c89c2c9990d67757f795779aa52ee64305c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb4d9c89c2c9990d67757f795779aa52ee64305c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/comments", "author": null, "committer": null, "parents": [{"sha": "39f02a1f52f661a49aa82e878bba152a468f1021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f02a1f52f661a49aa82e878bba152a468f1021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f02a1f52f661a49aa82e878bba152a468f1021"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "f325bb33ecbfb73330f187a674cff8858ffbf0f2", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "patch": "@@ -1,4 +1,4 @@\n-10c1d6756ed1dcc814c49921c2a5e27f4677e0e6\n+012ab5cb2ef1c26e8023ce90d3a2bba174da7b30\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "51b15ef997cb4f593185971652ffa74723519b5a", "filename": "libgo/go/encoding/json/decode_test.go", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fdecode_test.go?ref=f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "patch": "@@ -118,6 +118,7 @@ type Top struct {\n \tLoop\n \tEmbed0p // has Point with X, Y, used\n \tEmbed0q // has Point with Z, used\n+\tembed   // contains exported field\n }\n \n type Embed0 struct {\n@@ -148,6 +149,10 @@ type Embed0q struct {\n \tPoint\n }\n \n+type embed struct {\n+\tQ int\n+}\n+\n type Loop struct {\n \tLoop1 int `json:\",omitempty\"`\n \tLoop2 int `json:\",omitempty\"`\n@@ -331,7 +336,8 @@ var unmarshalTests = []unmarshalTest{\n \t\t\t\"Loop2\": 14,\n \t\t\t\"X\": 15,\n \t\t\t\"Y\": 16,\n-\t\t\t\"Z\": 17\n+\t\t\t\"Z\": 17,\n+\t\t\t\"Q\": 18\n \t\t}`,\n \t\tptr: new(Top),\n \t\tout: Top{\n@@ -361,6 +367,9 @@ var unmarshalTests = []unmarshalTest{\n \t\t\tEmbed0q: Embed0q{\n \t\t\t\tPoint: Point{Z: 17},\n \t\t\t},\n+\t\t\tembed: embed{\n+\t\t\t\tQ: 18,\n+\t\t\t},\n \t\t},\n \t},\n \t{\n@@ -507,12 +516,15 @@ func TestMarshalEmbeds(t *testing.T) {\n \t\tEmbed0q: Embed0q{\n \t\t\tPoint: Point{Z: 17},\n \t\t},\n+\t\tembed: embed{\n+\t\t\tQ: 18,\n+\t\t},\n \t}\n \tb, err := Marshal(top)\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n-\twant := \"{\\\"Level0\\\":1,\\\"Level1b\\\":2,\\\"Level1c\\\":3,\\\"Level1a\\\":5,\\\"LEVEL1B\\\":6,\\\"e\\\":{\\\"Level1a\\\":8,\\\"Level1b\\\":9,\\\"Level1c\\\":10,\\\"Level1d\\\":11,\\\"x\\\":12},\\\"Loop1\\\":13,\\\"Loop2\\\":14,\\\"X\\\":15,\\\"Y\\\":16,\\\"Z\\\":17}\"\n+\twant := \"{\\\"Level0\\\":1,\\\"Level1b\\\":2,\\\"Level1c\\\":3,\\\"Level1a\\\":5,\\\"LEVEL1B\\\":6,\\\"e\\\":{\\\"Level1a\\\":8,\\\"Level1b\\\":9,\\\"Level1c\\\":10,\\\"Level1d\\\":11,\\\"x\\\":12},\\\"Loop1\\\":13,\\\"Loop2\\\":14,\\\"X\\\":15,\\\"Y\\\":16,\\\"Z\\\":17,\\\"Q\\\":18}\"\n \tif string(b) != want {\n \t\tt.Errorf(\"Wrong marshal result.\\n got: %q\\nwant: %q\", b, want)\n \t}"}, {"sha": "e829a930768ba1e00793fdda131fed156834cdfc", "filename": "libgo/go/encoding/json/encode.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fjson%2Fencode.go?ref=f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "patch": "@@ -1022,7 +1022,7 @@ func typeFields(t reflect.Type) []field {\n \t\t\t// Scan f.typ for fields to include.\n \t\t\tfor i := 0; i < f.typ.NumField(); i++ {\n \t\t\t\tsf := f.typ.Field(i)\n-\t\t\t\tif sf.PkgPath != \"\" { // unexported\n+\t\t\t\tif sf.PkgPath != \"\" && !sf.Anonymous { // unexported\n \t\t\t\t\tcontinue\n \t\t\t\t}\n \t\t\t\ttag := sf.Tag.Get(\"json\")"}, {"sha": "ef6c20e949b3139f4973c323c52cdf393610cdc7", "filename": "libgo/go/encoding/xml/marshal_test.go", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go?ref=f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "patch": "@@ -139,6 +139,7 @@ type EmbedA struct {\n \tEmbedC\n \tEmbedB EmbedB\n \tFieldA string\n+\tembedD\n }\n \n type EmbedB struct {\n@@ -153,6 +154,11 @@ type EmbedC struct {\n \tFieldC  string\n }\n \n+type embedD struct {\n+\tfieldD string\n+\tFieldE string // Promoted and visible when embedD is embedded.\n+}\n+\n type NameCasing struct {\n \tXMLName struct{} `xml:\"casing\"`\n \tXy      string\n@@ -711,6 +717,9 @@ var marshalTests = []struct {\n \t\t\t\t},\n \t\t\t},\n \t\t\tFieldA: \"A.A\",\n+\t\t\tembedD: embedD{\n+\t\t\t\tFieldE: \"A.D.E\",\n+\t\t\t},\n \t\t},\n \t\tExpectXML: `<EmbedA>` +\n \t\t\t`<FieldB>A.C.B</FieldB>` +\n@@ -724,6 +733,7 @@ var marshalTests = []struct {\n \t\t\t`<FieldC>A.B.C.C</FieldC>` +\n \t\t\t`</EmbedB>` +\n \t\t\t`<FieldA>A.A</FieldA>` +\n+\t\t\t`<FieldE>A.D.E</FieldE>` +\n \t\t\t`</EmbedA>`,\n \t},\n "}, {"sha": "6766b88f09a194546589ca2f320dcc063d62ea0f", "filename": "libgo/go/encoding/xml/typeinfo.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Ftypeinfo.go?ref=f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "patch": "@@ -60,7 +60,7 @@ func getTypeInfo(typ reflect.Type) (*typeInfo, error) {\n \t\tn := typ.NumField()\n \t\tfor i := 0; i < n; i++ {\n \t\t\tf := typ.Field(i)\n-\t\t\tif f.PkgPath != \"\" || f.Tag.Get(\"xml\") == \"-\" {\n+\t\t\tif (f.PkgPath != \"\" && !f.Anonymous) || f.Tag.Get(\"xml\") == \"-\" {\n \t\t\t\tcontinue // Private field\n \t\t\t}\n "}, {"sha": "bdbd60074acbff39bf4775979923937374cbf334", "filename": "libgo/go/reflect/export_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Freflect%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Freflect%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fexport_test.go?ref=f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "patch": "@@ -6,13 +6,13 @@ package reflect\n \n // MakeRO returns a copy of v with the read-only flag set.\n func MakeRO(v Value) Value {\n-\tv.flag |= flagRO\n+\tv.flag |= flagStickyRO\n \treturn v\n }\n \n // IsRO reports whether v's read-only flag is set.\n func IsRO(v Value) bool {\n-\treturn v.flag&flagRO != 0\n+\treturn v.flag&flagStickyRO != 0\n }\n \n var CallGC = &callGC"}, {"sha": "180a364de35e48b25d884d92d75d975777109d12", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "patch": "@@ -516,7 +516,7 @@ func (t *uncommonType) Method(i int) (m Method) {\n \tfl := flag(Func)\n \tif p.pkgPath != nil {\n \t\tm.PkgPath = *p.pkgPath\n-\t\tfl |= flagRO\n+\t\tfl |= flagStickyRO\n \t}\n \tmt := p.typ\n \tm.Type = toType(mt)"}, {"sha": "8374370cfa66db4e9bc6afb23db21b9d6a7268c0", "filename": "libgo/go/reflect/value.go", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Freflect%2Fvalue.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1/libgo%2Fgo%2Freflect%2Fvalue.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fvalue.go?ref=f5eb9a8ec6cff02f52d7a29d96ec6641d2a06de1", "patch": "@@ -44,7 +44,8 @@ type Value struct {\n \n \t// flag holds metadata about the value.\n \t// The lowest bits are flag bits:\n-\t//\t- flagRO: obtained via unexported field, so read-only\n+\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n+\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n \t//\t- flagIndir: val holds a pointer to the data\n \t//\t- flagAddr: v.CanAddr is true (implies flagIndir)\n \t//\t- flagMethod: v is a method value.\n@@ -67,12 +68,14 @@ type flag uintptr\n const (\n \tflagKindWidth        = 5 // there are 27 kinds\n \tflagKindMask    flag = 1<<flagKindWidth - 1\n-\tflagRO          flag = 1 << 5\n-\tflagIndir       flag = 1 << 6\n-\tflagAddr        flag = 1 << 7\n-\tflagMethod      flag = 1 << 8\n-\tflagMethodFn    flag = 1 << 9 // gccgo: first fn parameter is always pointer\n-\tflagMethodShift      = 10\n+\tflagStickyRO    flag = 1 << 5\n+\tflagEmbedRO     flag = 1 << 6\n+\tflagIndir       flag = 1 << 7\n+\tflagAddr        flag = 1 << 8\n+\tflagMethod      flag = 1 << 9\n+\tflagMethodFn    flag = 1 << 10 // gccgo: first fn parameter is always pointer\n+\tflagMethodShift      = 11\n+\tflagRO          flag = flagStickyRO | flagEmbedRO\n )\n \n func (f flag) kind() Kind {\n@@ -617,11 +620,15 @@ func (v Value) Field(i int) Value {\n \tfield := &tt.fields[i]\n \ttyp := field.typ\n \n-\t// Inherit permission bits from v.\n-\tfl := v.flag&(flagRO|flagIndir|flagAddr) | flag(typ.Kind())\n+\t// Inherit permission bits from v, but clear flagEmbedRO.\n+\tfl := v.flag&(flagStickyRO|flagIndir|flagAddr) | flag(typ.Kind())\n \t// Using an unexported field forces flagRO.\n \tif field.pkgPath != nil {\n-\t\tfl |= flagRO\n+\t\tif field.name == nil {\n+\t\t\tfl |= flagEmbedRO\n+\t\t} else {\n+\t\t\tfl |= flagStickyRO\n+\t\t}\n \t}\n \t// Either flagIndir is set and v.ptr points at struct,\n \t// or flagIndir is not set and v.ptr is the actual struct data.\n@@ -986,7 +993,7 @@ func (v Value) Method(i int) Value {\n \tif v.typ.Kind() == Interface && v.IsNil() {\n \t\tpanic(\"reflect: Method on nil interface value\")\n \t}\n-\tfl := v.flag & (flagRO | flagIndir)\n+\tfl := v.flag & (flagStickyRO | flagIndir) // Clear flagEmbedRO\n \tfl |= flag(Func)\n \tfl |= flag(i)<<flagMethodShift | flagMethod\n \treturn Value{v.typ, v.ptr, fl}"}]}