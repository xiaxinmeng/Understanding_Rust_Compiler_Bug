{"sha": "9434c32ec698e22420295be3bccf9d2c91967859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzNGMzMmVjNjk4ZTIyNDIwMjk1YmUzYmNjZjlkMmM5MTk2Nzg1OQ==", "commit": {"author": {"name": "Emmanuel Briot", "email": "briot@adacore.com", "date": "2011-08-04T07:40:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T07:40:11Z"}, "message": "2011-08-04  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj.adb, prj.ads, makeutl.adb, makeutl.ads, prj-env.adb\n\t(Project_Tree_Appdata): New type.\n\tIt is now possible to associate application-specific data to a project\n\ttree. In particular, this is used in the gprbuild builder to avoid a\n\tnumber of global tables and htables, especially now that there can be\n\tseveral project trees loaded at once because of aggregate projects.\n\t(Debug_Name): new procedure.\n\t* projects.texi: Clarify syntax of \"**\" for Source_Dirs\n\nFrom-SVN: r177315", "tree": {"sha": "56a55f4942d4f4a85a6b029b84a890a9d39fd8de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56a55f4942d4f4a85a6b029b84a890a9d39fd8de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9434c32ec698e22420295be3bccf9d2c91967859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9434c32ec698e22420295be3bccf9d2c91967859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9434c32ec698e22420295be3bccf9d2c91967859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9434c32ec698e22420295be3bccf9d2c91967859/comments", "author": {"login": "briot", "id": 42402, "node_id": "MDQ6VXNlcjQyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/42402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briot", "html_url": "https://github.com/briot", "followers_url": "https://api.github.com/users/briot/followers", "following_url": "https://api.github.com/users/briot/following{/other_user}", "gists_url": "https://api.github.com/users/briot/gists{/gist_id}", "starred_url": "https://api.github.com/users/briot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briot/subscriptions", "organizations_url": "https://api.github.com/users/briot/orgs", "repos_url": "https://api.github.com/users/briot/repos", "events_url": "https://api.github.com/users/briot/events{/privacy}", "received_events_url": "https://api.github.com/users/briot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6eb9142a253d5b28caa2e6230b5de5d07d4d52f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb9142a253d5b28caa2e6230b5de5d07d4d52f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb9142a253d5b28caa2e6230b5de5d07d4d52f1"}], "stats": {"total": 104, "additions": 93, "deletions": 11}, "files": [{"sha": "51d25ff70619923d15794169f043e76eef9c3230", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9434c32ec698e22420295be3bccf9d2c91967859", "patch": "@@ -1,3 +1,14 @@\n+2011-08-04  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj.adb, prj.ads, makeutl.adb, makeutl.ads, prj-env.adb\n+\t(Project_Tree_Appdata): New type.\n+\tIt is now possible to associate application-specific data to a project\n+\ttree. In particular, this is used in the gprbuild builder to avoid a\n+\tnumber of global tables and htables, especially now that there can be\n+\tseveral project trees loaded at once because of aggregate projects.\n+\t(Debug_Name): new procedure.\n+\t* projects.texi: Clarify syntax of \"**\" for Source_Dirs\n+\n 2011-08-03  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj.ads, makeutl.adb, makeutl.ads (Queue.Insert): now also inserts"}, {"sha": "44575ba29e72ee48c61624d996e9b51e5019afe8", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=9434c32ec698e22420295be3bccf9d2c91967859", "patch": "@@ -33,13 +33,13 @@ with Osint;    use Osint;\n with Output;   use Output;\n with Opt;      use Opt;\n with Prj.Ext;\n-with Prj.Util;\n+with Prj.Util; use Prj.Util;\n with Sinput.P;\n with Snames;   use Snames;\n with Table;\n with Tempdir;\n \n-with Ada.Command_Line; use Ada.Command_Line;\n+with Ada.Command_Line;  use Ada.Command_Line;\n \n with GNAT.Case_Util;            use GNAT.Case_Util;\n with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n@@ -2478,7 +2478,6 @@ package body Makeutl is\n             end loop;\n          end loop;\n       end Insert_Withed_Sources_For;\n-\n    end Queue;\n \n end Makeutl;"}, {"sha": "428d34fa29114a1f224bebb52a3bad54dc3e6056", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=9434c32ec698e22420295be3bccf9d2c91967859", "patch": "@@ -41,6 +41,9 @@ package Makeutl is\n \n    type Fail_Proc is access procedure (S : String);\n \n+   On_Windows : constant Boolean := Directory_Separator = '\\';\n+   --  True when on Windows\n+\n    Source_Info_Option : constant String := \"--source-info=\";\n    --  Switch to indicate the source info file\n \n@@ -337,6 +340,9 @@ package Makeutl is\n       --  depends on the builder, and in particular whether it only supports\n       --  project-based files (in which case we have a full Source_Id record).\n \n+      No_Source_Info : constant Source_Info :=\n+        (Format_Gprbuild, null, null);\n+\n       procedure Initialize\n         (Queue_Per_Obj_Dir : Boolean;\n          Force : Boolean := False);"}, {"sha": "e91bf61e2818c87aef7f51ff8f1c29b67570b987", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=9434c32ec698e22420295be3bccf9d2c91967859", "patch": "@@ -829,6 +829,7 @@ package body Prj.Env is\n          Iter   : Source_Iterator;\n \n       begin\n+         Debug_Output (\"Add mapping for project\", Project.Name);\n          Iter := For_Each_Source (In_Tree, Project, Language => Language);\n \n          loop\n@@ -901,13 +902,18 @@ package body Prj.Env is\n    --  Start of processing for Create_Mapping_File\n \n    begin\n+      if Current_Verbosity = High then\n+         Debug_Output (\"Create mapping file for\", Debug_Name (In_Tree));\n+      end if;\n+\n       Create_Temp_File (In_Tree.Shared, File, Name, \"mapping\");\n \n       if Current_Verbosity = High then\n          Debug_Increase_Indent (\"Create mapping file \", Name_Id (Name));\n       end if;\n \n-      For_Every_Imported_Project (Project, In_Tree, Dummy);\n+      For_Every_Imported_Project\n+        (Project, In_Tree, Dummy, Include_Aggregated => False);\n \n       declare\n          Last   : Natural;"}, {"sha": "05163c3faaa67510f667449b57f942def12b305f", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=9434c32ec698e22420295be3bccf9d2c91967859", "patch": "@@ -943,6 +943,8 @@ package body Prj is\n    procedure Free (Tree : in out Project_Tree_Ref) is\n       procedure Unchecked_Free is new\n         Ada.Unchecked_Deallocation (Project_Tree_Data, Project_Tree_Ref);\n+      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n+          (Project_Tree_Appdata'Class, Project_Tree_Appdata_Access);\n \n    begin\n       if Tree /= null then\n@@ -957,6 +959,11 @@ package body Prj is\n             Temp_Files_Table.Free       (Tree.Shared.Private_Part.Temp_Files);\n          end if;\n \n+         if Tree.Appdata /= null then\n+            Free (Tree.Appdata.all);\n+            Unchecked_Free (Tree.Appdata);\n+         end if;\n+\n          Source_Paths_Htable.Reset (Tree.Source_Paths_HT);\n          Source_Files_Htable.Reset (Tree.Source_Files_HT);\n \n@@ -1466,6 +1473,41 @@ package body Prj is\n       end if;\n    end Debug_Decrease_Indent;\n \n+   ----------------\n+   -- Debug_Name --\n+   ----------------\n+\n+   function Debug_Name (Tree : Project_Tree_Ref) return Name_Id is\n+      P : Project_List := Tree.Projects;\n+   begin\n+      Name_Len := 0;\n+      Add_Str_To_Name_Buffer (\"Tree [\");\n+\n+      while P /= null loop\n+         if P /= Tree.Projects then\n+            Add_Char_To_Name_Buffer (',');\n+         end if;\n+\n+         Add_Str_To_Name_Buffer (Get_Name_String (P.Project.Name));\n+\n+         P := P.Next;\n+      end loop;\n+\n+      Add_Char_To_Name_Buffer (']');\n+\n+      return Name_Find;\n+   end Debug_Name;\n+\n+   ----------\n+   -- Free --\n+   ----------\n+\n+   procedure Free (Tree : in out Project_Tree_Appdata) is\n+      pragma Unreferenced (Tree);\n+   begin\n+      null;\n+   end Free;\n+\n begin\n    --  Make sure that the standard config and user project file extensions are\n    --  compatible with canonical case file naming."}, {"sha": "4d8e47030b3643274a88311d391dd3c80d5f0567", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=9434c32ec698e22420295be3bccf9d2c91967859", "patch": "@@ -1437,6 +1437,17 @@ package Prj is\n    --  own tree) and make the comparison of projects easier, all trees store\n    --  the lists in the same tables.\n \n+   type Project_Tree_Appdata is tagged null record;\n+   type Project_Tree_Appdata_Access is access all Project_Tree_Appdata'Class;\n+   --  Application-specific data that can be associated with a project tree.\n+   --  We do not make the Project_Tree_Data itself tagged for several reasons:\n+   --    - it couldn't have a default value for its discriminant\n+   --    - it would require a \"factory\" to allocate such data, because trees\n+   --      are created automatically when parsing aggregate projects.\n+\n+   procedure Free (Tree : in out Project_Tree_Appdata);\n+   --  Should be overridden if your derive your own data\n+\n    type Project_Tree_Data (Is_Root_Tree : Boolean := True) is record\n       --  The root tree is the one loaded by the user from the command line.\n       --  Is_Root_Tree is only false for projects aggregated within a root\n@@ -1472,6 +1483,9 @@ package Prj is\n       Shared : Shared_Project_Tree_Data_Access;\n       --  The shared data for this tree and all aggregated trees.\n \n+      Appdata : Project_Tree_Appdata_Access;\n+      --  Application-specific data for this tree\n+\n       case Is_Root_Tree is\n          when True =>\n             Shared_Data : aliased Shared_Project_Tree_Data;\n@@ -1483,6 +1497,10 @@ package Prj is\n    end record;\n    --  Data for a project tree\n \n+   function Debug_Name (Tree : Project_Tree_Ref) return Name_Id;\n+   --  If debug traces are activated, return an identitier for the\n+   --  project tree. This modifies Name_Buffer\n+\n    procedure Expect (The_Token : Token_Type; Token_Image : String);\n    --  Check that the current token is The_Token. If it is not, then output\n    --  an error message."}, {"sha": "3d7e59706c26e7b1ef330faa3783a2edb9cd125d", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9434c32ec698e22420295be3bccf9d2c91967859/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=9434c32ec698e22420295be3bccf9d2c91967859", "patch": "@@ -266,17 +266,17 @@ There are several ways of defining source directories:\n \n @item The attribute @b{Source_Dirs} can automatically include subdirectories\n   using a special syntax inspired by some UNIX shells. If any of the path in\n-  the list ends with @emph{\"/**\"}, then that path and all its subdirectories\n+  the list ends with @emph{\"**\"}, then that path and all its subdirectories\n   (recursively) are included in the list of source directories. For instance,\n-  @file{./**} represent the complete directory tree rooted at \".\".\n+  @file{**} and @file{./**} represent the complete directory tree rooted at \".\".\n @cindex Source directories, recursive\n \n @cindex @code{Excluded_Source_Dirs}\n   When using that construct, it can sometimes be convenient to also use the\n   attribute @b{Excluded_Source_Dirs}, which is also a list of paths. Each entry\n   specifies a directory whose immediate content, not including subdirs, is to\n   be excluded. It is also possible to exclude a complete directory subtree\n-  using the \"/**\" notation.\n+  using the \"**\" notation.\n \n @cindex @code{Ignore_Source_Sub_Dirs}\n   It is often desirable to remove, from the source directories, directory\n@@ -396,13 +396,13 @@ Note that it is considered an error for a project file to have no sources\n attached to it unless explicitly declared as mentioned above.\n \n If the order of the source directories is known statically, that is if\n-@code{\"/**\"} is not used in the string list @code{Source_Dirs}, then there may\n+@code{\"**\"} is not used in the string list @code{Source_Dirs}, then there may\n be several files with the same source file name sitting in different\n directories of the project. In this case, only the file in the first directory\n is considered as a source of the project and the others are hidden. If\n-@code{\"/**\"} is not used in the string list @code{Source_Dirs}, it is an error\n+@code{\"**\"} is not used in the string list @code{Source_Dirs}, it is an error\n to have several files with the same source file name in the same directory\n-@code{\"/**\"} subtree, since there would be an ambiguity as to which one should\n+@code{\"**\"} subtree, since there would be an ambiguity as to which one should\n be used. However, two files with the same source file name may in two single\n directories or directory subtrees. In this case, the one in the first directory\n or directory subtree is a source of the project.\n@@ -3727,7 +3727,7 @@ is specified for the source file.\n @group\n project Proj is\n \n-   for Source_Dirs use (\"./**\");\n+   for Source_Dirs use (\"**\");\n \n    package gnatls is\n       for Switches use"}]}