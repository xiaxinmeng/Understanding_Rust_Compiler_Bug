{"sha": "741d8ca3766e04e9035077b611a42b917c349267", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQxZDhjYTM3NjZlMDRlOTAzNTA3N2I2MTFhNDJiOTE3YzM0OTI2Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-12T18:03:15Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-12T18:03:15Z"}, "message": "Fix typo\n\nFrom-SVN: r85887", "tree": {"sha": "9204cbedc6be5c77e0afd0ddd3458fe7bd5d47e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9204cbedc6be5c77e0afd0ddd3458fe7bd5d47e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/741d8ca3766e04e9035077b611a42b917c349267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741d8ca3766e04e9035077b611a42b917c349267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/741d8ca3766e04e9035077b611a42b917c349267", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741d8ca3766e04e9035077b611a42b917c349267/comments", "author": null, "committer": null, "parents": [{"sha": "f7a8132ae8f97e55dfd62d527f3d528a2a560ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a8132ae8f97e55dfd62d527f3d528a2a560ca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a8132ae8f97e55dfd62d527f3d528a2a560ca5"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "4b7765bf8831f717c93413bc2bd82a3b9f7d8324", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741d8ca3766e04e9035077b611a42b917c349267/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741d8ca3766e04e9035077b611a42b917c349267/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=741d8ca3766e04e9035077b611a42b917c349267", "patch": "@@ -1896,6 +1896,8 @@ dfs_find_final_overrider_1 (tree binfo,\n \t\t\t    tree *vpath, \n \t\t\t    find_final_overrider_data *ffod)\n {\n+  tree method;\n+\n   /* If BINFO is not the most derived type, try a more derived class.\n      A definition there will overrider a definition here.  */\n   if (!same_type_p (BINFO_TYPE (binfo), ffod->most_derived_type))\n@@ -1910,8 +1912,7 @@ dfs_find_final_overrider_1 (tree binfo,\n \treturn true;\n     }\n \n-  tree method = look_for_overrides_here (BINFO_TYPE (binfo), ffod->fn);\n-\t  \n+  method = look_for_overrides_here (BINFO_TYPE (binfo), ffod->fn);\n   if (method)\n     {\n       tree *candidate = &ffod->candidates;"}]}