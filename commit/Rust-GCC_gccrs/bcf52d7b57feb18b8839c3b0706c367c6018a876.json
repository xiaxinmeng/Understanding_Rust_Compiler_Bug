{"sha": "bcf52d7b57feb18b8839c3b0706c367c6018a876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmNTJkN2I1N2ZlYjE4Yjg4MzljM2IwNzA2YzM2N2M2MDE4YTg3Ng==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-01-30T04:39:59Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-01-30T04:39:59Z"}, "message": "fold-const.c (round_up): Make HIGH an unsigned HOST_WIDE_INT to avoid undefined behaviour on overflow.\n\n\n\t* fold-const.c (round_up): Make HIGH an unsigned HOST_WIDE_INT to\n\tavoid undefined behaviour on overflow.  Use force_fit_type_double\n\tto construct the constant with the specified TREE_OVERFLOW.\n\nFrom-SVN: r121332", "tree": {"sha": "3dcbb29663a562dd3b54c1da772ca6214bb6d2c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dcbb29663a562dd3b54c1da772ca6214bb6d2c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcf52d7b57feb18b8839c3b0706c367c6018a876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf52d7b57feb18b8839c3b0706c367c6018a876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf52d7b57feb18b8839c3b0706c367c6018a876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf52d7b57feb18b8839c3b0706c367c6018a876/comments", "author": null, "committer": null, "parents": [{"sha": "2828987879a62a861500d4b1d5649575a07e0b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2828987879a62a861500d4b1d5649575a07e0b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2828987879a62a861500d4b1d5649575a07e0b78"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "ddd35cd3be7745857938c2e0efc1f65c66f5109a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf52d7b57feb18b8839c3b0706c367c6018a876/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf52d7b57feb18b8839c3b0706c367c6018a876/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcf52d7b57feb18b8839c3b0706c367c6018a876", "patch": "@@ -1,9 +1,16 @@\n+2007-01-29  Roger Sayle  <roger@eyesopen.com>\n+\t    Richard Guenther  <rguenther@suse.de>\n+\n+\t* fold-const.c (round_up): Make HIGH an unsigned HOST_WIDE_INT to\n+\tavoid undefined behaviour on overflow.  Use force_fit_type_double\n+\tto construct the constant with the specified TREE_OVERFLOW.\n+\n 2007-01-29  Janis Johnson  <janis187@us.ibm.com>\n \n \t* config/dfp-bit.c: Add parameterized support for fp exceptions.\n \t* config/dfp-bit.h: Ditto.\n \n-007-01-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+2007-01-29  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* c-decl.c (pop_scope): Replace warnings with call to\n \twarn_for_unused_label."}, {"sha": "e0cab9cb889580655c0d5dd00f0446549e3fd61b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf52d7b57feb18b8839c3b0706c367c6018a876/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf52d7b57feb18b8839c3b0706c367c6018a876/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=bcf52d7b57feb18b8839c3b0706c367c6018a876", "patch": "@@ -13514,33 +13514,33 @@ round_up (tree value, int divisor)\n   /* If divisor is a power of two, simplify this to bit manipulation.  */\n   if (divisor == (divisor & -divisor))\n     {\n-      tree t;\n-\n       if (TREE_CODE (value) == INTEGER_CST)\n \t{\n \t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (value);\n-\t  HOST_WIDE_INT high;\n+\t  unsigned HOST_WIDE_INT high;\n+\t  bool overflow_p;\n \n \t  if ((low & (divisor - 1)) == 0)\n \t    return value;\n \n+\t  overflow_p = TREE_OVERFLOW (value);\n \t  high = TREE_INT_CST_HIGH (value);\n \t  low &= ~(divisor - 1);\n \t  low += divisor;\n \t  if (low == 0)\n-\t    high++;\n-\n-\t  t = build_int_cst_wide_type (TREE_TYPE (value), low, high);\n-\t  if ((TREE_OVERFLOW (value) || integer_zerop (t))\n-\t      && !TREE_OVERFLOW (t))\n \t    {\n-\t      t = copy_node (t);\n-\t      TREE_OVERFLOW (t) = 1;\n+\t      high++;\n+\t      if (high == 0)\n+\t\toverflow_p = true;\n \t    }\n-\t  return t;\n+\n+\t  return force_fit_type_double (TREE_TYPE (value), low, high,\n+\t\t\t\t\t-1, overflow_p);\n \t}\n       else\n \t{\n+\t  tree t;\n+\n \t  t = build_int_cst (TREE_TYPE (value), divisor - 1);\n \t  value = size_binop (PLUS_EXPR, value, t);\n \t  t = build_int_cst (TREE_TYPE (value), -divisor);"}]}