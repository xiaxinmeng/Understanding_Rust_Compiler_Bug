{"sha": "ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUxODhhODcwZTQwYmRmNzExYjBkYzBiY2FmOWZhMjhkMWQ1YjZmMA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-05-24T13:43:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-24T13:43:22Z"}, "message": "loop.c (strength_reduce): Do not clear NOT_EVERY_ITERATION at the last CODE_LABEL in a loop if...\n\n\t* loop.c (strength_reduce): Do not clear NOT_EVERY_ITERATION at the\n\tlast CODE_LABEL in a loop if we have previously passed a jump\n\tto the top of the loop.\n\nFrom-SVN: r27125", "tree": {"sha": "1de1c0198ba0883933c81ac96154d948b0cbea9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de1c0198ba0883933c81ac96154d948b0cbea9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0/comments", "author": null, "committer": null, "parents": [{"sha": "79d6c916407fab932d8ec86cb2cddc2a0cb781fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d6c916407fab932d8ec86cb2cddc2a0cb781fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d6c916407fab932d8ec86cb2cddc2a0cb781fe"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "7ff15a42d7e55bcdc8491a51197c62d1eed6f065", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0", "patch": "@@ -1,3 +1,9 @@\n+Mon May 24 14:35:24 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* loop.c (strength_reduce): Do not clear NOT_EVERY_ITERATION at the\n+\tlast CODE_LABEL in a loop if we have previously passed a jump\n+\tto the top of the loop.\n+\n Mon May 24 07:56:29 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.h (OUTPUT_INT_ADDR_CONST): Fix blunder made when"}, {"sha": "7ee653218ca2b5b5de9c3194eaf0d982a2b0bbec", "filename": "gcc/loop.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=ae188a870e40bdf711b0dc0bcaf9fa28d1d5b6f0", "patch": "@@ -3669,6 +3669,9 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n   /* This is 1 if current insn may be executed more than once for every\n      loop iteration.  */\n   int maybe_multiple = 0;\n+  /* This is 1 if we have past a branch back to the top of the loop\n+     (aka a loop latch).  */\n+  int past_loop_latch = 0;\n   /* Temporary list pointers for traversing loop_iv_list.  */\n   struct iv_class *bl, **backbl;\n   /* Ratio of extra register life span we can justify\n@@ -3836,16 +3839,30 @@ strength_reduce (scan_start, end, loop_top, insn_count,\n \t    loop_depth--;\n \t}\n \n+      /* Note if we pass a loop latch.  If we do, then we can not clear\n+\t NOT_EVERY_ITERATION below when we pass the last CODE_LABEL in\n+\t a loop since a jump before the last CODE_LABEL may have started\n+\t a new loop iteration.\n+\n+\t Note that LOOP_TOP is only set for rotated loops and we need\n+\t this check for all loops, so compare against the CODE_LABEL\n+\t which immediately follows LOOP_START.  */\n+      if (GET_CODE (p) == JUMP_INSN && JUMP_LABEL (p) == NEXT_INSN (loop_start))\n+\tpast_loop_latch = 1;\n+\n       /* Unlike in the code motion pass where MAYBE_NEVER indicates that\n \t an insn may never be executed, NOT_EVERY_ITERATION indicates whether\n \t or not an insn is known to be executed each iteration of the\n \t loop, whether or not any iterations are known to occur.\n \n \t Therefore, if we have just passed a label and have no more labels\n-\t between here and the test insn of the loop, we know these insns\n-\t will be executed each iteration.  */\n+\t between here and the test insn of the loop, and we have not passed\n+\t a jump to the top of the loop, then we know these insns will be\n+\t executed each iteration.  */\n \n-      if (not_every_iteration && GET_CODE (p) == CODE_LABEL\n+      if (not_every_iteration \n+\t  && ! past_loop_latch\n+\t  && GET_CODE (p) == CODE_LABEL\n \t  && no_labels_between_p (p, loop_end)\n \t  && loop_insn_first_p (p, loop_cont))\n \tnot_every_iteration = 0;"}]}