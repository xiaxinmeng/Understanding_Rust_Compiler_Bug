{"sha": "12bb62fbb47bd2848746da53c72ed068a4274daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJiYjYyZmJiNDdiZDI4NDg3NDZkYTUzYzcyZWQwNjhhNDI3NGRhZg==", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@tachyum.com", "date": "2021-05-29T15:37:30Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@tachyum.com", "date": "2021-05-29T15:37:30Z"}, "message": "[committed][PR bootstrap/100730] Fix warnings in H8 target files\n\ngcc/\n\n\t* config/h8300/h8300.c (h8300_emit_stack_adjustment): Drop unused\n\tparameter.  Call callers fixed.\n\t(push): Likewise.\n\t(output_plussi): Add FALLTHRU markers.\n\t(h8300_shift_needs_scratch_p): Add gcc_unreachable marker.", "tree": {"sha": "568b6175cff27682d474b35b79dd9628182dad4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/568b6175cff27682d474b35b79dd9628182dad4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12bb62fbb47bd2848746da53c72ed068a4274daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bb62fbb47bd2848746da53c72ed068a4274daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bb62fbb47bd2848746da53c72ed068a4274daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bb62fbb47bd2848746da53c72ed068a4274daf/comments", "author": null, "committer": null, "parents": [{"sha": "f14c9bd4dc7f7dc8ee2978007124311b85df7453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14c9bd4dc7f7dc8ee2978007124311b85df7453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f14c9bd4dc7f7dc8ee2978007124311b85df7453"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "ba2b9daf4871098d1feba0501919961c4c551db1", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12bb62fbb47bd2848746da53c72ed068a4274daf/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12bb62fbb47bd2848746da53c72ed068a4274daf/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=12bb62fbb47bd2848746da53c72ed068a4274daf", "patch": "@@ -91,7 +91,7 @@ static int h8300_interrupt_function_p (tree);\n static int h8300_saveall_function_p (tree);\n static int h8300_monitor_function_p (tree);\n static int h8300_os_task_function_p (tree);\n-static void h8300_emit_stack_adjustment (int, HOST_WIDE_INT, bool);\n+static void h8300_emit_stack_adjustment (int, HOST_WIDE_INT);\n static HOST_WIDE_INT round_frame_size (HOST_WIDE_INT);\n static unsigned int compute_saved_regs (void);\n static const char *cond_string (enum rtx_code);\n@@ -452,7 +452,7 @@ Fpa (rtx par)\n    SIZE to adjust the stack pointer.  */\n \n static void\n-h8300_emit_stack_adjustment (int sign, HOST_WIDE_INT size, bool in_prologue)\n+h8300_emit_stack_adjustment (int sign, HOST_WIDE_INT size)\n {\n   /* If the frame size is 0, we don't have anything to do.  */\n   if (size == 0)\n@@ -511,7 +511,7 @@ compute_saved_regs (void)\n /* Emit an insn to push register RN.  */\n \n static rtx\n-push (int rn, bool in_prologue)\n+push (int rn)\n {\n   rtx reg = gen_rtx_REG (word_mode, rn);\n   rtx x;\n@@ -571,7 +571,7 @@ h8300_push_pop (int regno, int nregs, bool pop_p, bool return_p)\n       if (pop_p)\n \tpop (regno);\n       else\n-\tpush (regno, false);\n+\tpush (regno);\n       return;\n     }\n \n@@ -755,7 +755,7 @@ h8300_expand_prologue (void)\n   if (frame_pointer_needed)\n     {\n       /* Push fp.  */\n-      push (HARD_FRAME_POINTER_REGNUM, true);\n+      push (HARD_FRAME_POINTER_REGNUM);\n       F (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx), 0);\n     }\n \n@@ -787,7 +787,7 @@ h8300_expand_prologue (void)\n     }\n \n   /* Leave room for locals.  */\n-  h8300_emit_stack_adjustment (-1, round_frame_size (get_frame_size ()), true);\n+  h8300_emit_stack_adjustment (-1, round_frame_size (get_frame_size ()));\n \n   if (flag_stack_usage_info)\n     current_function_static_stack_size\n@@ -828,7 +828,7 @@ h8300_expand_epilogue (void)\n   returned_p = false;\n \n   /* Deallocate locals.  */\n-  h8300_emit_stack_adjustment (1, frame_size, false);\n+  h8300_emit_stack_adjustment (1, frame_size);\n \n   /* Pop the saved registers in descending order.  */\n   saved_regs = compute_saved_regs ();\n@@ -2707,10 +2707,14 @@ output_plussi (rtx *operands, bool need_flags)\n \t  if (!need_flags)\n \t    return \"adds\\t%2,%S0\";\n \n+\t  /* FALLTHRU */\n+\n \tcase 0xfffffffc:\n \t  if (!need_flags)\n \t    return \"subs\\t%G2,%S0\";\n \n+\t  /* FALLTHRU */\n+\n \tcase 0x00010000:\n \tcase 0x00020000:\n \t  if (!need_flags)\n@@ -2719,13 +2723,18 @@ output_plussi (rtx *operands, bool need_flags)\n \t      return \"inc.w\\t%2,%e0\";\n \t    }\n \n+\t  /* FALLTHRU */\n+\n \tcase 0xffff0000:\n \tcase 0xfffe0000:\n \t  if (!need_flags)\n \t    {\n \t      operands[2] = GEN_INT (intval >> 16);\n \t      return \"dec.w\\t%G2,%e0\";\n \t    }\n+\n+\t  /* FALLTHRU */\n+\n \t}\n \n       /* See if we can finish with 4 bytes.  */\n@@ -2792,10 +2801,15 @@ compute_plussi_length (rtx *operands, bool need_flags)\n \t  if (!need_flags)\n \t    return 2;\n \n+\t  /* FALLTHRU */\n+\n \tcase 0xffff0000:\n \tcase 0xfffe0000:\n \t  if (!need_flags)\n \t    return 2;\n+\n+\t  /* FALLTHRU */\n+\n \t}\n \n       /* See if we can finish with 4 bytes.  */\n@@ -3999,6 +4013,7 @@ h8300_shift_needs_scratch_p (int count, machine_mode mode, enum rtx_code type)\n   else if (type == ASHIFTRT)\n     return (ar == SHIFT_LOOP\n \t    || (TARGET_H8300H && mode == SImode && count == 8));\n+  gcc_unreachable ();\n }\n \n /* Output the assembler code for doing shifts.  */"}]}