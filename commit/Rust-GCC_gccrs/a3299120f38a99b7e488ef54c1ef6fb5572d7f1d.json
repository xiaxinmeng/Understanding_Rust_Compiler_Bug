{"sha": "a3299120f38a99b7e488ef54c1ef6fb5572d7f1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMyOTkxMjBmMzhhOTliN2U0ODhlZjU0YzFlZjZmYjU1NzJkN2YxZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-03-08T17:44:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-03-08T17:44:45Z"}, "message": "typeck.c (build_array_ref, [...]): Consistently forward the tsubst_flags_t parameter.\n\n2012-03-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (build_array_ref, cp_build_addr_expr_1, convert_ptrmem,\n\tbuild_ptrmemfunc): Consistently forward the tsubst_flags_t\n\tparameter.\n\t* call.c (resolve_args): Likewise.\n\nFrom-SVN: r185106", "tree": {"sha": "aff02d743513b43f081930722b5f04108d811d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aff02d743513b43f081930722b5f04108d811d10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d/comments", "author": null, "committer": null, "parents": [{"sha": "e04d063b1d5a66a2e58cbc996c636a050f6a2548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04d063b1d5a66a2e58cbc996c636a050f6a2548", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e04d063b1d5a66a2e58cbc996c636a050f6a2548"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "24e629fe8cd86873285394bfb9a5bd6cb90ed46a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a3299120f38a99b7e488ef54c1ef6fb5572d7f1d", "patch": "@@ -1,3 +1,10 @@\n+2012-03-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (build_array_ref, cp_build_addr_expr_1, convert_ptrmem,\n+\tbuild_ptrmemfunc): Consistently forward the tsubst_flags_t\n+\tparameter.\n+\t* call.c (resolve_args): Likewise.\n+\n 2012-03-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52521"}, {"sha": "0bf3bb187c04e2e8d836393c1f8de33529366846", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a3299120f38a99b7e488ef54c1ef6fb5572d7f1d", "patch": "@@ -3740,7 +3740,7 @@ resolve_args (VEC(tree,gc) *args, tsubst_flags_t complain)\n \t    error (\"invalid use of void expression\");\n \t  return NULL;\n \t}\n-      else if (invalid_nonstatic_memfn_p (arg, tf_warning_or_error))\n+      else if (invalid_nonstatic_memfn_p (arg, complain))\n \treturn NULL;\n     }\n   return args;"}, {"sha": "643454cf22709986bca57d7f64ca124e1ad691f9", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3299120f38a99b7e488ef54c1ef6fb5572d7f1d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a3299120f38a99b7e488ef54c1ef6fb5572d7f1d", "patch": "@@ -2884,7 +2884,7 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n \t\t\t\t   complain),\n \t       cp_build_array_ref (loc, TREE_OPERAND (array, 2), idx,\n \t\t\t\t   complain),\n-\t       tf_warning_or_error);\n+\t       complain);\n       protected_set_expr_location (ret, loc);\n       return ret;\n \n@@ -5033,7 +5033,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       build_ptrmemfunc_type (argtype);\n       val = build_ptrmemfunc (argtype, val, 0,\n \t\t\t      /*c_cast_p=*/false,\n-\t\t\t      tf_warning_or_error);\n+\t\t\t      complain);\n     }\n \n   return val;\n@@ -5781,11 +5781,11 @@ convert_ptrmem (tree type, tree expr, bool allow_inverse_p,\n \t\t\t\t     EQ_EXPR,\n \t\t\t\t     expr,\n \t\t\t\t     build_int_cst (TREE_TYPE (expr), -1),\n-\t\t\t\t     tf_warning_or_error);\n+\t\t\t\t     complain);\n \t  op1 = build_nop (ptrdiff_type_node, expr);\n \t  op2 = cp_build_binary_op (input_location,\n \t\t\t\t    PLUS_EXPR, op1, delta,\n-\t\t\t\t    tf_warning_or_error);\n+\t\t\t\t    complain);\n \n \t  expr = fold_build3_loc (input_location,\n \t\t\t      COND_EXPR, ptrdiff_type_node, cond, op1, op2);\n@@ -7208,7 +7208,7 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n \t    return pfn;\n \t  else if (integer_zerop (n))\n \t    return build_reinterpret_cast (to_type, pfn, \n-                                           tf_warning_or_error);\n+                                           complain);\n \t}\n \n       if (TREE_SIDE_EFFECTS (pfn))\n@@ -7229,9 +7229,9 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n       if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_delta)\n \tn = cp_build_binary_op (input_location,\n \t\t\t\tLSHIFT_EXPR, n, integer_one_node,\n-\t\t\t\ttf_warning_or_error);\n+\t\t\t\tcomplain);\n       delta = cp_build_binary_op (input_location,\n-\t\t\t\t  PLUS_EXPR, delta, n, tf_warning_or_error);\n+\t\t\t\t  PLUS_EXPR, delta, n, complain);\n       return build_ptrmemfunc1 (to_type, delta, npfn);\n     }\n \n@@ -7245,7 +7245,7 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n     }\n \n   if (type_unknown_p (pfn))\n-    return instantiate_type (type, pfn, tf_warning_or_error);\n+    return instantiate_type (type, pfn, complain);\n \n   fn = TREE_OPERAND (pfn, 0);\n   gcc_assert (TREE_CODE (fn) == FUNCTION_DECL"}]}