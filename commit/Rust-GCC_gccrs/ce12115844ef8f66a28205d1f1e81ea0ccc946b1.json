{"sha": "ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UxMjExNTg0NGVmOGY2NmEyODIwNWQxZjFlODFlYTBjY2M5NDZiMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-11-01T15:46:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-11-01T15:46:42Z"}, "message": "[C++ PATCH] overloaded operator fns [6/N]\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-11/msg00019.html\n\tgcc/cp/\n\t* cp-tree.h (assign_op_identifier, call_op_identifier): Use\n\tcompressed code.\n\t(struct lang_decl_fn): Use compressed operator code.\n\t(DECL_OVERLOADED_OPERATOR_CODE): Replace with ...\n\t(DECL_OVERLOADED_OPERATOR_CODE_RAW): ... this.\n\t(DECL_OVERLOADED_OPERATOR_CODE_IS): Use it.\n\t* decl.c (duplicate_decls): Use DECL_OVERLOADED_OPERATOR_CODE_RAW.\n\t(build_library_fn): Likewise.\n\t(grok_op_properties): Likewise.\n\t* mangle.c (write_unqualified_name): Likewise.\n\t* method.c (implicitly_declare_fn): Likewise.\n\t* typeck.c (check_return_expr): Use DECL_OVERLOADED_OPERATOR_IS.\n\n\tlibcc1/\n\t* libcp1plugin.cc (plugin_build_decl): Use\n\tDECL_OVERLOADED_OPERATOR_CODE_RAW.\n\nFrom-SVN: r254314", "tree": {"sha": "1dba75c64dce051b6ee0933505d31b39046940fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dba75c64dce051b6ee0933505d31b39046940fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a110e3478460101b4c0d6591d7cdb0b1d3a276b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a110e3478460101b4c0d6591d7cdb0b1d3a276b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a110e3478460101b4c0d6591d7cdb0b1d3a276b"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "b97bb933357edb4a4abd1b227678dec53deb61dd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "patch": "@@ -1,5 +1,18 @@\n 2017-11-01  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (assign_op_identifier, call_op_identifier): Use\n+\tcompressed code.\n+\t(struct lang_decl_fn): Use compressed operator code.\n+\t(DECL_OVERLOADED_OPERATOR_CODE): Replace with ...\n+\t(DECL_OVERLOADED_OPERATOR_CODE_RAW): ... this.\n+\t(DECL_OVERLOADED_OPERATOR_CODE_IS): Use it.\n+\t* decl.c (duplicate_decls): Use DECL_OVERLOADED_OPERATOR_CODE_RAW.\n+\t(build_library_fn): Likewise.\n+\t(grok_op_properties): Likewise.\n+\t* mangle.c (write_unqualified_name): Likewise.\n+\t* method.c (implicitly_declare_fn): Likewise.\n+\t* typeck.c (check_return_expr): Use DECL_OVERLOADED_OPERATOR_IS.\n+\n \t* cp-tree.h (IDENTIFIER_CP_INDEX): Define.\n \t(enum ovl_op_flags): Add OVL_OP_FLAG_AMBIARY.\n \t(enum ovl_op_code): New."}, {"sha": "d1d772fda7f724b0a064714f39f1165c3e83773d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "patch": "@@ -246,8 +246,8 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define deleting_dtor_identifier\tcp_global_trees[CPTI_DELETING_DTOR_IDENTIFIER]\n \n #define ovl_op_identifier(ISASS, CODE)  (OVL_OP_INFO(ISASS, CODE)->identifier)\n-#define assign_op_identifier (ovl_op_identifier (true, NOP_EXPR))\n-#define call_op_identifier (ovl_op_identifier (false, CALL_EXPR))\n+#define assign_op_identifier (ovl_op_info[true][OVL_OP_NOP_EXPR].identifier)\n+#define call_op_identifier (ovl_op_info[false][OVL_OP_CALL_EXPR].identifier)\n /* The name used for conversion operators -- but note that actual\n    conversion functions use special identifiers outside the identifier\n    table.  */\n@@ -2479,26 +2479,24 @@ struct GTY(()) lang_decl_min {\n struct GTY(()) lang_decl_fn {\n   struct lang_decl_min min;\n \n-  /* In an overloaded operator, this is the value of\n-     DECL_OVERLOADED_OPERATOR_P.\n-     FIXME: We should really do better in compressing this.  */\n-  ENUM_BITFIELD (tree_code) operator_code : 16;\n-\n+  /* In a overloaded operator, this is the compressed operator code.  */\n+  unsigned ovl_op_code : 6;\n   unsigned global_ctor_p : 1;\n   unsigned global_dtor_p : 1;\n+\n   unsigned static_function : 1;\n   unsigned pure_virtual : 1;\n   unsigned defaulted_p : 1;\n   unsigned has_in_charge_parm_p : 1;\n   unsigned has_vtt_parm_p : 1;\n   unsigned pending_inline_p : 1;\n-\n   unsigned nonconverting : 1;\n   unsigned thunk_p : 1;\n+\n   unsigned this_thunk_p : 1;\n   unsigned hidden_friend_p : 1;\n   unsigned omp_declare_reduction_p : 1;\n-  /* 3 spare bits.  */\n+  unsigned spare : 13;\n \n   /* 32-bits padding on 64-bit host.  */\n \n@@ -2814,14 +2812,14 @@ struct GTY(()) lang_decl {\n   IDENTIFIER_ASSIGN_OP_P (DECL_NAME (NODE))\n \n /* NODE is a function_decl for an overloaded operator.  Return its\n-   operator code.   */\n-#define DECL_OVERLOADED_OPERATOR_CODE(NODE)\t\t\t\\\n-  (LANG_DECL_FN_CHECK (NODE)->operator_code)\n+   compressed (raw) operator code.  Note that this is not a TREE_CODE.  */\n+#define DECL_OVERLOADED_OPERATOR_CODE_RAW(NODE)\t\t\\\n+  (LANG_DECL_FN_CHECK (NODE)->ovl_op_code)\n \n /* DECL is an overloaded operator.  Test whether it is for TREE_CODE\n    (a literal constant).  */\n #define DECL_OVERLOADED_OPERATOR_IS(DECL, CODE)\t\t\t\\\n-  (DECL_OVERLOADED_OPERATOR_CODE (DECL) == CODE)\n+  (DECL_OVERLOADED_OPERATOR_CODE_RAW (DECL) == OVL_OP_##CODE)\n \n /* For FUNCTION_DECLs: nonzero means that this function is a\n    constructor or a destructor with an extra in-charge parameter to\n@@ -5526,7 +5524,8 @@ extern GTY(()) unsigned char ovl_op_mapping[MAX_TREE_CODES];\n extern GTY(()) unsigned char ovl_op_alternate[OVL_OP_MAX];\n \n /* Given an ass_op_p boolean and a tree code, return a pointer to its\n-   overloaded operator info.  */\n+   overloaded operator info.  Tree codes for non-overloaded operators\n+   map to the error-operator.  */\n #define OVL_OP_INFO(IS_ASS_P, TREE_CODE)\t\t\t\\\n   (&ovl_op_info[(IS_ASS_P) != 0][ovl_op_mapping[(TREE_CODE)]])\n /* Overloaded operator info for an identifier for which"}, {"sha": "d544d068cd2b2cfe89ad63d6f53445c7c22a4b80", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "patch": "@@ -1920,8 +1920,8 @@ next_arg:;\n       DECL_OVERRIDE_P (newdecl) |= DECL_OVERRIDE_P (olddecl);\n       DECL_THIS_STATIC (newdecl) |= DECL_THIS_STATIC (olddecl);\n       if (DECL_OVERLOADED_OPERATOR_P (olddecl))\n-\tDECL_OVERLOADED_OPERATOR_CODE (newdecl)\n-\t  = DECL_OVERLOADED_OPERATOR_CODE (olddecl);\n+\tDECL_OVERLOADED_OPERATOR_CODE_RAW (newdecl)\n+\t  = DECL_OVERLOADED_OPERATOR_CODE_RAW (olddecl);\n       new_defines_function = DECL_INITIAL (newdecl) != NULL_TREE;\n \n       /* Optionally warn about more than one declaration for the same\n@@ -4444,7 +4444,8 @@ build_library_fn (tree name, enum tree_code operator_code, tree type,\n   DECL_EXTERNAL (fn) = 1;\n   TREE_PUBLIC (fn) = 1;\n   DECL_ARTIFICIAL (fn) = 1;\n-  DECL_OVERLOADED_OPERATOR_CODE (fn) = operator_code;\n+  DECL_OVERLOADED_OPERATOR_CODE_RAW (fn)\n+    = OVL_OP_INFO (false, operator_code)->ovl_op_code;\n   SET_DECL_LANGUAGE (fn, lang_c);\n   /* Runtime library routines are, by definition, available in an\n      external shared object.  */\n@@ -12902,7 +12903,7 @@ grok_op_properties (tree decl, bool complain)\n       operator_code = ovl_op->tree_code;\n       op_flags = ovl_op->flags;\n       gcc_checking_assert (operator_code != ERROR_MARK);\n-      DECL_OVERLOADED_OPERATOR_CODE (decl) = operator_code;\n+      DECL_OVERLOADED_OPERATOR_CODE_RAW (decl) = ovl_op->ovl_op_code;\n     }\n \n   if (op_flags & OVL_OP_FLAG_ALLOC)\n@@ -13046,7 +13047,7 @@ grok_op_properties (tree decl, bool complain)\n \t  const ovl_op_info_t *ovl_op = &ovl_op_info[false][alt];\n \t  gcc_checking_assert (ovl_op->flags == OVL_OP_FLAG_UNARY);\n \t  operator_code = ovl_op->tree_code;\n-\t  DECL_OVERLOADED_OPERATOR_CODE (decl) = operator_code;\n+\t  DECL_OVERLOADED_OPERATOR_CODE_RAW (decl) = ovl_op->ovl_op_code;\n \t}\n       else if (arity != 2)\n \t{"}, {"sha": "e40082f8a58695f37211718350a47da5512daa8b", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "patch": "@@ -1321,8 +1321,8 @@ write_unqualified_name (tree decl)\n       else if (DECL_OVERLOADED_OPERATOR_P (decl))\n \t{\n \t  const char *mangled_name\n-\t    = (OVL_OP_INFO (DECL_ASSIGNMENT_OPERATOR_P (decl),\n-\t       DECL_OVERLOADED_OPERATOR_CODE (decl))->mangled_name);\n+\t    = (ovl_op_info[DECL_ASSIGNMENT_OPERATOR_P (decl)]\n+\t       [DECL_OVERLOADED_OPERATOR_CODE_RAW (decl)].mangled_name);\n \t  write_string (mangled_name);\n \t}\n       else if (UDLIT_OPER_P (DECL_NAME (decl)))"}, {"sha": "714b50879910f516538997af607b0e10af0fe04d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "patch": "@@ -2078,7 +2078,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n \n   if (!IDENTIFIER_CDTOR_P (name))\n     /* Assignment operator.  */\n-    DECL_OVERLOADED_OPERATOR_CODE (fn) = NOP_EXPR;\n+    DECL_OVERLOADED_OPERATOR_CODE_RAW (fn) = OVL_OP_NOP_EXPR;\n   else if (IDENTIFIER_CTOR_P (name))\n     DECL_CXX_CONSTRUCTOR_P (fn) = true;\n   else"}, {"sha": "0e3ea1a1edf4b8a6de1e7649da4cfee3c9b9f3bc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "patch": "@@ -9074,9 +9074,8 @@ check_return_expr (tree retval, bool *no_warning)\n \n   /* Only operator new(...) throw(), can return NULL [expr.new/13].  */\n   if (DECL_OVERLOADED_OPERATOR_P (current_function_decl)\n-      && (DECL_OVERLOADED_OPERATOR_CODE (current_function_decl) == NEW_EXPR\n-\t  || (DECL_OVERLOADED_OPERATOR_CODE (current_function_decl)\n-\t      == VEC_NEW_EXPR))\n+      && (DECL_OVERLOADED_OPERATOR_IS (current_function_decl,  NEW_EXPR)\n+\t  || DECL_OVERLOADED_OPERATOR_IS (current_function_decl, VEC_NEW_EXPR))\n       && !TYPE_NOTHROW_P (TREE_TYPE (current_function_decl))\n       && ! flag_check_new\n       && retval && null_ptr_cst_p (retval))"}, {"sha": "2194aa8a5a4d112a7968d2e40df05b4709dc0a1e", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "patch": "@@ -1,3 +1,8 @@\n+2017-11-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_build_decl): Use\n+\tDECL_OVERLOADED_OPERATOR_CODE_RAW.\n+\n 2017-10-31  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_build_decl): Use ovl_op_identifier."}, {"sha": "030721340c1066cbd1a08822bbfd75beca77fc00", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce12115844ef8f66a28205d1f1e81ea0ccc946b1/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=ce12115844ef8f66a28205d1f1e81ea0ccc946b1", "patch": "@@ -1412,7 +1412,7 @@ plugin_build_decl (cc1_plugin::connection *self,\n \tDECL_CXX_DESTRUCTOR_P (decl) = 1;\n       else if ((sym_flags & GCC_CP_FLAG_SPECIAL_FUNCTION)\n \t       && opcode != ERROR_MARK)\n-\tDECL_OVERLOADED_OPERATOR_CODE (decl) = opcode;\n+\tDECL_OVERLOADED_OPERATOR_CODE_RAW (decl) = ovl_op_mapping[opcode];\n     }\n   else if (RECORD_OR_UNION_CODE_P (code))\n     {"}]}