{"sha": "85d2e16cf73d8c815b73fe2d4680512a5669a768", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkMmUxNmNmNzNkOGM4MTViNzNmZTJkNDY4MDUxMmE1NjY5YTc2OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-28T11:07:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-12-28T11:07:05Z"}, "message": "(fold, case BIT_IOR_EXPR): Convert the IOR of a pair of shifts into a\nrotate when it is equivalent.\n\nFrom-SVN: r2970", "tree": {"sha": "c7e960f29f5b9c5572d29f4ef46058dce0140065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e960f29f5b9c5572d29f4ef46058dce0140065"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d2e16cf73d8c815b73fe2d4680512a5669a768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d2e16cf73d8c815b73fe2d4680512a5669a768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d2e16cf73d8c815b73fe2d4680512a5669a768", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d2e16cf73d8c815b73fe2d4680512a5669a768/comments", "author": null, "committer": null, "parents": [{"sha": "4a0094c3e9d349376b2282995fd85f53c17b2962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a0094c3e9d349376b2282995fd85f53c17b2962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a0094c3e9d349376b2282995fd85f53c17b2962"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "2ff043f98cc67c8dbcb3c79bfce6174b774d0ea8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d2e16cf73d8c815b73fe2d4680512a5669a768/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d2e16cf73d8c815b73fe2d4680512a5669a768/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=85d2e16cf73d8c815b73fe2d4680512a5669a768", "patch": "@@ -3496,6 +3496,28 @@ fold (expr)\n       t1 = distribute_bit_expr (code, type, arg0, arg1);\n       if (t1 != NULL_TREE)\n \treturn t1;\n+\n+      /* (a << C1) | (a >> C2) if A is unsigned and C1+C2 is the size of A\n+\t is a rotate of A by C1 bits.  */\n+\n+      if ((TREE_CODE (arg0) == RSHIFT_EXPR\n+\t   || TREE_CODE (arg0) == LSHIFT_EXPR)\n+\t  && (TREE_CODE (arg1) == RSHIFT_EXPR\n+\t      || TREE_CODE (arg1) == LSHIFT_EXPR)\n+\t  && TREE_CODE (arg0) != TREE_CODE (arg1)\n+\t  && operand_equal_p (TREE_OPERAND (arg0, 0), TREE_OPERAND (arg1,0), 0)\n+\t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (arg0, 0)))\n+\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n+\t  && TREE_CODE (TREE_OPERAND (arg1, 1)) == INTEGER_CST\n+\t  && TREE_INT_CST_HIGH (TREE_OPERAND (arg0, 1)) == 0\n+\t  && TREE_INT_CST_HIGH (TREE_OPERAND (arg1, 1)) == 0\n+\t  && ((TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n+\t       + TREE_INT_CST_LOW (TREE_OPERAND (arg1, 1)))\n+\t      == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg0, 0)))))\n+\treturn build (LROTATE_EXPR, type, TREE_OPERAND (arg0, 0),\n+\t\t      TREE_CODE (arg0) == LSHIFT_EXPR\n+\t\t      ? TREE_OPERAND (arg0, 1) : TREE_OPERAND (arg1, 1));\n+\n       goto associate;\n \n     case BIT_XOR_EXPR:"}]}