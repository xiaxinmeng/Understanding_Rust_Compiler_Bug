{"sha": "a4404ff533a012bcec898aa14ac7ab14257edb97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0MDRmZjUzM2EwMTJiY2VjODk4YWExNGFjN2FiMTQyNTdlZGI5Nw==", "commit": {"author": {"name": "Mike Stump", "email": "mikestump@comcast.net", "date": "2011-02-13T10:28:45Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2011-02-13T10:28:45Z"}, "message": "parser.h: Add arguments to all plugins.\n\nobjcp:\n\t* plugin/parser.h: Add arguments to all plugins.\ncp:\n\t* parser.c (cp_parser_primary_expression): Add arguments to all the plugins.\n\nFrom-SVN: r170105", "tree": {"sha": "63023467e4490fa79e58db3174acea581a773a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63023467e4490fa79e58db3174acea581a773a30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4404ff533a012bcec898aa14ac7ab14257edb97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4404ff533a012bcec898aa14ac7ab14257edb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4404ff533a012bcec898aa14ac7ab14257edb97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4404ff533a012bcec898aa14ac7ab14257edb97/comments", "author": null, "committer": null, "parents": [{"sha": "88a3b649093d440125ae2547835eea6943bfab50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a3b649093d440125ae2547835eea6943bfab50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a3b649093d440125ae2547835eea6943bfab50"}], "stats": {"total": 45, "additions": 24, "deletions": 21}, "files": [{"sha": "74f460eedcb13bf372528795c37653f0e8b87e8c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4404ff533a012bcec898aa14ac7ab14257edb97/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4404ff533a012bcec898aa14ac7ab14257edb97/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a4404ff533a012bcec898aa14ac7ab14257edb97", "patch": "@@ -1,5 +1,6 @@\n 2011-02-13  Mike Stump  <mikestump@comcast.net>\n \n+\t* parser.c (cp_parser_primary_expression): Add arguments to all the plugins.\n \t* lex.c: Plugify.\n \t* Make-lang.in (objcp/plugin/lex.h): Likewise.\n \t* Make-lang.in (cp/parser.o): Move c-family/c-objc.h dependancy"}, {"sha": "b6541cb4c931539f9e2916507825b2344143b058", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4404ff533a012bcec898aa14ac7ab14257edb97/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4404ff533a012bcec898aa14ac7ab14257edb97/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a4404ff533a012bcec898aa14ac7ab14257edb97", "patch": "@@ -3671,11 +3671,11 @@ cp_parser_primary_expression (cp_parser *parser,\n       }\n \n     case CPP_OPEN_SQUARE:\n-      PLUGIN_PRIMARY_EXPRESSION_3(parser);\n+      PLUGIN_PRIMARY_EXPRESSION_3 (parser);\n       maybe_warn_cpp0x (CPP0X_LAMBDA_EXPR);\n       return cp_parser_lambda_expression (parser);\n \n-    PLUGIN_PRIMARY_EXPRESSION_2(parser, cp_parser_error)\n+    PLUGIN_PRIMARY_EXPRESSION_2 (parser, cp_parser_error)\n \n     case CPP_KEYWORD:\n       switch (token->keyword)\n@@ -3806,7 +3806,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \tcase RID_IS_LITERAL_TYPE:\n \t  return cp_parser_trait_expr (parser, token->keyword);\n \n-\tPLUGIN_PRIMARY_EXPRESSION_1(parser)\n+\tPLUGIN_PRIMARY_EXPRESSION_1 (parser)\n \n \tcase RID_TEMPLATE:\n \t  if (parser->in_function_body\n@@ -9401,7 +9401,7 @@ cp_parser_declaration (cp_parser* parser)\n   else if (token1.keyword == RID_INLINE\n \t   && token2.keyword == RID_NAMESPACE)\n     cp_parser_namespace_definition (parser);\n-  PLUGIN_DECLARATION\n+  PLUGIN_DECLARATION (token1, attributes)\n   /* We must have either a block declaration or a function\n      definition.  */\n   else\n@@ -12800,7 +12800,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \n   if (type && type != error_mark_node)\n     {\n-      PLUGIN_SIMPLE_TYPE_SPECIFIER;\n+      PLUGIN_SIMPLE_TYPE_SPECIFIER (parser, type, decl_specs);\n \n       /* There is no valid C++ program where a non-template type is\n \t followed by a \"<\".  That usually indicates that the user\n@@ -12876,11 +12876,11 @@ cp_parser_nonclass_name (cp_parser* parser)\n   /* Look up the type-name.  */\n   type_decl = cp_parser_lookup_name_simple (parser, identifier, token->location);\n \n-  PLUGIN_NONCLASS_NAME1;\n+  PLUGIN_NONCLASS_NAME1 (parser, type_decl, identifier);\n \n   /* Issue an error if we did not find a type-name.  */\n   if (TREE_CODE (type_decl) != TYPE_DECL\n-      PLUGIN_NONCLASS_NAME)\n+      PLUGIN_NONCLASS_NAME (parser, type_decl, cp_lexer_peek_token))\n     {\n       if (!cp_parser_simulate_error (parser))\n \tcp_parser_name_lookup_error (parser, identifier, type_decl,\n@@ -16724,7 +16724,7 @@ cp_parser_class_name (cp_parser *parser,\n   else if (TREE_CODE (decl) != TYPE_DECL\n \t   || TREE_TYPE (decl) == error_mark_node\n \t   || !MAYBE_CLASS_TYPE_P (TREE_TYPE (decl))\n-\t   PLUGIN_CLASS_NAME)\n+\t   PLUGIN_CLASS_NAME (parser, cp_lexer_peek_token, CPP_DOT))\n     decl = error_mark_node;\n \n   if (decl == error_mark_node)\n@@ -17585,7 +17585,8 @@ cp_parser_member_declaration (cp_parser* parser)\n       return;\n     }\n \n-  PLUGIN_MEMBER_DECLARATION;\n+  PLUGIN_MEMBER_DECLARATION (parser, cp_lexer_next_token_is_keyword,\n+\t\t\t     finish_member_declaration);\n \n   /* If the next token is `static_assert' we have a static assertion.  */\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_STATIC_ASSERT))"}, {"sha": "1100daabaf2fba3b678cf47be2884f71d6e96693", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4404ff533a012bcec898aa14ac7ab14257edb97/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4404ff533a012bcec898aa14ac7ab14257edb97/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=a4404ff533a012bcec898aa14ac7ab14257edb97", "patch": "@@ -1,5 +1,6 @@\n 2011-02-13  Mike Stump  <mikestump@comcast.net>\n \n+\t* plugin/parser.h: Add arguments to all plugins.\n \t* plugin/lex.h: Plugify.\n \n 2011-02-12  Mike Stump  <mikestump@comcast.net>"}, {"sha": "a8344543389e2b64d1463fdd65f97de171456137", "filename": "gcc/objcp/plugin/parser.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4404ff533a012bcec898aa14ac7ab14257edb97/gcc%2Fobjcp%2Fplugin%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4404ff533a012bcec898aa14ac7ab14257edb97/gcc%2Fobjcp%2Fplugin%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fplugin%2Fparser.h?ref=a4404ff533a012bcec898aa14ac7ab14257edb97", "patch": "@@ -127,7 +127,7 @@ static tree cp_parser_objc_struct_declaration\n    break;@)\n \n \n-#define PLUGIN_DECLARATION @(\n+#define PLUGIN_DECLARATION(token1, attributes) @(\n   /* Objective-C++ declaration/definition.  */\n   else if (c_dialect_objc () && OBJC_IS_AT_KEYWORD (token1.keyword))\n     cp_parser_objc_declaration (parser, NULL_TREE);\n@@ -136,7 +136,7 @@ static tree cp_parser_objc_struct_declaration\n \t   && cp_parser_objc_valid_prefix_attributes (parser, &attributes))\n     cp_parser_objc_declaration (parser, attributes);@)\n \n-#define PLUGIN_SIMPLE_TYPE_SPECIFIER @(\n+#define PLUGIN_SIMPLE_TYPE_SPECIFIER(parser, type, decl_specs)  @(\n   do {\n     /* See if TYPE is an Objective-C type, and if so, parse and\n        accept any protocol references following it.  Do this before\n@@ -160,7 +160,7 @@ static tree cp_parser_objc_struct_declaration\n   } while (0)@)\n \n \n-#define PLUGIN_NONCLASS_NAME1 @(\n+#define PLUGIN_NONCLASS_NAME1(parser, type_decl, identifier) @(\n   do {\n     if (TREE_CODE (type_decl) != TYPE_DECL\n \t&& (objc_is_id (identifier) || objc_is_class_name (identifier)))\n@@ -173,7 +173,7 @@ static tree cp_parser_objc_struct_declaration\n       }\n   } while (0)@)\n \n-#define PLUGIN_NONCLASS_NAME @(\n+#define PLUGIN_NONCLASS_NAME(parser, type_decl, cp_lexer_peek_token) @(\n   /* In Objective-C, we have the complication that class names are\n      normally type names and start declarations (eg, the\n      \"NSObject\" in \"NSObject *object;\"), but can be used in an\n@@ -183,14 +183,14 @@ static tree cp_parser_objc_struct_declaration\n   || (objc_is_class_name (TREE_TYPE (type_decl))\n       && cp_lexer_peek_token (parser->lexer)->type == CPP_DOT)@)\n \n-#define PLUGIN_CLASS_NAME @(\n+#define PLUGIN_CLASS_NAME(parser, cp_lexer_peek_token, CPP_DOT) @(\n   /* In Objective-C 2.0, a classname followed by '.' starts a\n      dot-syntax expression, and it's not a type-name.  */\n   || (c_dialect_objc ()\n       && cp_lexer_peek_token (parser->lexer)->type == CPP_DOT \n       && objc_is_class_name (decl))@)\n \n-#define PLUGIN_MEMBER_DECLARATION @(\n+#define PLUGIN_MEMBER_DECLARATION(parser, cp_lexer_next_token_is_keyword, finish_member_declaration) @(\n   do {\n     /* Check for @defs.  */\n     if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AT_DEFS))\n@@ -217,11 +217,11 @@ static tree cp_parser_objc_struct_declaration\n #define PLUGIN_PRIMARY_EXPRESSION(parser, decl, cp_lexer_consume_token, cp_lexer_peek_token)\n #define PLUGIN_TOKEN_STARTS_CAST_EXPR\n #define PLUGIN_STATEMENT\n-#define PLUGIN_DECLARATION\n-#define PLUGIN_SIMPLE_TYPE_SPECIFIER\n-#define PLUGIN_NONCLASS_NAME1\n-#define PLUGIN_NONCLASS_NAME\n-#define PLUGIN_CLASS_NAME\n-#define PLUGIN_MEMBER_DECLARATION\n+#define PLUGIN_DECLARATION(token1, attributes)\n+#define PLUGIN_SIMPLE_TYPE_SPECIFIER(parser, type, decl_specs)\n+#define PLUGIN_NONCLASS_NAME1(parser, type_decl, identifier)\n+#define PLUGIN_NONCLASS_NAME(parser, type_decl, cp_lexer_peek_token) \n+#define PLUGIN_CLASS_NAME(parser, cp_lexer_peek_token, CPP_DOT)\n+#define PLUGIN_MEMBER_DECLARATION(parser, cp_lexer_next_token_is_keyword, finish_member_declaration)\n \n #endif"}]}