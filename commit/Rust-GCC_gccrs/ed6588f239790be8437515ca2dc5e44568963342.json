{"sha": "ed6588f239790be8437515ca2dc5e44568963342", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ2NTg4ZjIzOTc5MGJlODQzNzUxNWNhMmRjNWU0NDU2ODk2MzM0Mg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:04:06Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:04:06Z"}, "message": "[arm] Handle immediate values in uaddvsi4\n\nThe uaddv patterns in the arm back-end do not currenty handle immediates\nduring expansion.  This patch adds this support for uaddvsi4.  It's really\na stepping-stone towards early expansion of uaddvdi4, but it complete and\na useful change in its own right.\n\nWhilst making this change I also observed that we really had two patterns\nthat did exactly the same thing, but with slightly different properties;\nconsequently I've cleaned up all of the add-and-compare patterns to bring\nsome consistency.\n\n\t* config/arm/arm.md (adddi3): Call gen_addsi3_compare_op1.\n\t* (uaddv<mode>4): Delete expansion pattern.\n\t(uaddvsi4): New pattern.\n\t(uaddvdi4): Likewise.\n\t(addsi3_compareC): Delete pattern, change callers to use\n\taddsi3_compare_op1.\n\t(addsi3_compare_op1): No-longer anonymous.  Clean up constraints to\n\treduce the number of alternatives and re-work type attribute handling.\n\t(addsi3_compare_op2): Clean up constraints to reduce the number of\n\talternatives and re-work type attribute handling.\n\t(compare_addsi2_op0): Likewise.\n\t(compare_addsi2_op1): Likewise.\n\nFrom-SVN: r277182", "tree": {"sha": "e02ef04cedeb6f4c9d2bdef71f0186bcfd86ff10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e02ef04cedeb6f4c9d2bdef71f0186bcfd86ff10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed6588f239790be8437515ca2dc5e44568963342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6588f239790be8437515ca2dc5e44568963342", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6588f239790be8437515ca2dc5e44568963342", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6588f239790be8437515ca2dc5e44568963342/comments", "author": null, "committer": null, "parents": [{"sha": "f9f6247d14dde9cd7202743ec60d253050a60d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9f6247d14dde9cd7202743ec60d253050a60d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9f6247d14dde9cd7202743ec60d253050a60d58"}], "stats": {"total": 133, "additions": 77, "deletions": 56}, "files": [{"sha": "3b8f9f3f33da72ffef068e71a963cfb3129933d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6588f239790be8437515ca2dc5e44568963342/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6588f239790be8437515ca2dc5e44568963342/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed6588f239790be8437515ca2dc5e44568963342", "patch": "@@ -1,3 +1,18 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (adddi3): Call gen_addsi3_compare_op1.\n+\t* (uaddv<mode>4): Delete expansion pattern.\n+\t(uaddvsi4): New pattern.\n+\t(uaddvdi4): Likewise.\n+\t(addsi3_compareC): Delete pattern, change callers to use\n+\taddsi3_compare_op1.\n+\t(addsi3_compare_op1): No-longer anonymous.  Clean up constraints to\n+\treduce the number of alternatives and re-work type attribute handling.\n+\t(addsi3_compare_op2): Clean up constraints to reduce the number of\n+\talternatives and re-work type attribute handling.\n+\t(compare_addsi2_op0): Likewise.\n+\t(compare_addsi2_op1): Likewise.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-modes.def (CC_NCV, CC_CZ): Delete CC modes."}, {"sha": "4ea6f4b226c397e483c34006e56621a7ec7745c3", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 62, "deletions": 56, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6588f239790be8437515ca2dc5e44568963342/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6588f239790be8437515ca2dc5e44568963342/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ed6588f239790be8437515ca2dc5e44568963342", "patch": "@@ -470,7 +470,7 @@\n \t  if (!arm_not_operand (hi_op2, SImode))\n \t    hi_op2 = force_reg (SImode, hi_op2);\n \n-\t  emit_insn (gen_addsi3_compareC (lo_dest, lo_op1, lo_op2));\n+\t  emit_insn (gen_addsi3_compare_op1 (lo_dest, lo_op1, lo_op2));\n \t  rtx carry = gen_rtx_LTU (SImode, gen_rtx_REG (CC_Cmode, CC_REGNUM),\n \t\t\t\t   const0_rtx);\n \t  if (hi_op2 == const0_rtx)\n@@ -501,14 +501,27 @@\n   DONE;\n })\n \n-(define_expand \"uaddv<mode>4\"\n-  [(match_operand:SIDI 0 \"register_operand\")\n-   (match_operand:SIDI 1 \"register_operand\")\n-   (match_operand:SIDI 2 \"register_operand\")\n+(define_expand \"uaddvsi4\"\n+  [(match_operand:SI 0 \"s_register_operand\")\n+   (match_operand:SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"arm_add_operand\")\n    (match_operand 3 \"\")]\n   \"TARGET_32BIT\"\n {\n-  emit_insn (gen_add<mode>3_compareC (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_addsi3_compare_op1 (operands[0], operands[1], operands[2]));\n+  arm_gen_unlikely_cbranch (LTU, CC_Cmode, operands[3]);\n+\n+  DONE;\n+})\n+\n+(define_expand \"uaddvdi4\"\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")\n+   (match_operand:DI 2 \"s_register_operand\")\n+   (match_operand 3 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  emit_insn (gen_adddi3_compareC (operands[0], operands[1], operands[2]));\n   arm_gen_unlikely_cbranch (LTU, CC_Cmode, operands[3]);\n \n   DONE;\n@@ -639,19 +652,6 @@\n    (set_attr \"type\" \"multiple\")]\n )\n \n-(define_insn \"addsi3_compareC\"\n-   [(set (reg:CC_C CC_REGNUM)\n-\t (compare:CC_C (plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t\t(match_operand:SI 2 \"register_operand\" \"r\"))\n-\t\t       (match_dup 1)))\n-    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t (plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_32BIT\"\n-  \"adds%?\\\\t%0, %1, %2\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"alus_sreg\")]\n-)\n-\n (define_insn \"addsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n@@ -770,13 +770,13 @@\n ;; the operands, and we know that the use of the condition code is\n ;; either GEU or LTU, so we can use the carry flag from the addition\n ;; instead of doing the compare a second time.\n-(define_insn \"*addsi3_compare_op1\"\n+(define_insn \"addsi3_compare_op1\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n-\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"l,0,l,0,r,r,r\")\n-\t\t  (match_operand:SI 2 \"arm_add_operand\" \"lPd,Py,lPx,Pw,I,L,r\"))\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"l,0,l,0,rk,rk\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"lPd,Py,lPx,Pw,rkI,L\"))\n \t (match_dup 1)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=l,l,l,l,r,r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=l,l,l,l,rk,rk\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n@@ -785,22 +785,23 @@\n    subs%?\\\\t%0, %1, #%n2\n    subs%?\\\\t%0, %0, #%n2\n    adds%?\\\\t%0, %1, %2\n-   subs%?\\\\t%0, %1, #%n2\n-   adds%?\\\\t%0, %1, %2\"\n+   subs%?\\\\t%0, %1, #%n2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*\")\n-   (set_attr \"length\" \"2,2,2,2,4,4,4\")\n-   (set_attr \"type\"\n-    \"alus_sreg,alus_imm,alus_sreg,alus_imm,alus_imm,alus_imm,alus_sreg\")]\n+   (set_attr \"arch\" \"t2,t2,t2,t2,*,*\")\n+   (set_attr \"length\" \"2,2,2,2,4,4\")\n+   (set (attr \"type\")\n+\t(if_then_else (match_operand 2 \"const_int_operand\")\n+\t\t      (const_string \"alu_imm\")\n+\t\t      (const_string \"alu_sreg\")))]\n )\n \n (define_insn \"*addsi3_compare_op2\"\n   [(set (reg:CC_C CC_REGNUM)\n \t(compare:CC_C\n-\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"l,0,l,0,r,r,r\")\n-\t\t  (match_operand:SI 2 \"arm_add_operand\" \"lPd,Py,lPx,Pw,I,L,r\"))\n+\t (plus:SI (match_operand:SI 1 \"s_register_operand\" \"l,0,l,0,r,r\")\n+\t\t  (match_operand:SI 2 \"arm_add_operand\" \"lPd,Py,lPx,Pw,rI,L\"))\n \t (match_dup 2)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=l,l,l,l,r,r,r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=l,l,l,l,r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n@@ -809,55 +810,60 @@\n    subs%?\\\\t%0, %1, #%n2\n    subs%?\\\\t%0, %0, #%n2\n    adds%?\\\\t%0, %1, %2\n-   subs%?\\\\t%0, %1, #%n2\n-   adds%?\\\\t%0, %1, %2\"\n+   subs%?\\\\t%0, %1, #%n2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"arch\" \"t2,t2,t2,t2,*,*,*\")\n-   (set_attr \"length\" \"2,2,2,2,4,4,4\")\n-   (set_attr \"type\"\n-    \"alus_sreg,alus_imm,alus_sreg,alus_imm,alus_imm,alus_imm,alus_sreg\")]\n+   (set_attr \"arch\" \"t2,t2,t2,t2,*,*\")\n+   (set_attr \"length\" \"2,2,2,2,4,4\")\n+   (set (attr \"type\")\n+\t(if_then_else (match_operand 2 \"const_int_operand\")\n+\t\t      (const_string \"alu_imm\")\n+\t\t      (const_string \"alu_sreg\")))]\n )\n \n (define_insn \"*compare_addsi2_op0\"\n   [(set (reg:CC_C CC_REGNUM)\n         (compare:CC_C\n-          (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,l,r,r,r\")\n-                   (match_operand:SI 1 \"arm_add_operand\" \"Pv,l,I,L,r\"))\n+          (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,l,r,r\")\n+                   (match_operand:SI 1 \"arm_add_operand\"    \"l,Pw,rI,L\"))\n           (match_dup 0)))]\n   \"TARGET_32BIT\"\n   \"@\n-   cmp%?\\\\t%0, #%n1\n-   cmn%?\\\\t%0, %1\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\n-   cmn%?\\\\t%0, %1\"\n+   cmn%?\\\\t%0, %1\n+   cmp%?\\\\t%0, #%n1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"t2,t2,*,*,*\")\n-   (set_attr \"predicable_short_it\" \"yes,yes,no,no,no\")\n-   (set_attr \"length\" \"2,2,4,4,4\")\n-   (set_attr \"type\" \"alus_imm,alus_sreg,alus_imm,alus_imm,alus_sreg\")]\n+   (set_attr \"arch\" \"t2,t2,*,*\")\n+   (set_attr \"predicable_short_it\" \"yes,yes,no,no\")\n+   (set_attr \"length\" \"2,2,4,4\")\n+   (set (attr \"type\")\n+\t(if_then_else (match_operand 1 \"const_int_operand\")\n+\t\t      (const_string \"alu_imm\")\n+\t\t      (const_string \"alu_sreg\")))]\n )\n \n (define_insn \"*compare_addsi2_op1\"\n   [(set (reg:CC_C CC_REGNUM)\n         (compare:CC_C\n-          (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,l,r,r,r\")\n-                   (match_operand:SI 1 \"arm_add_operand\" \"Pv,l,I,L,r\"))\n+          (plus:SI (match_operand:SI 0 \"s_register_operand\" \"l,l,r,r\")\n+                   (match_operand:SI 1 \"arm_add_operand\" \"l,Pw,rI,L\"))\n           (match_dup 1)))]\n   \"TARGET_32BIT\"\n   \"@\n-   cmp%?\\\\t%0, #%n1\n-   cmn%?\\\\t%0, %1\n    cmn%?\\\\t%0, %1\n    cmp%?\\\\t%0, #%n1\n-   cmn%?\\\\t%0, %1\"\n+   cmn%?\\\\t%0, %1\n+   cmp%?\\\\t%0, #%n1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"t2,t2,*,*,*\")\n-   (set_attr \"predicable_short_it\" \"yes,yes,no,no,no\")\n-   (set_attr \"length\" \"2,2,4,4,4\")\n-   (set_attr \"type\" \"alus_imm,alus_sreg,alus_imm,alus_imm,alus_sreg\")]\n+   (set_attr \"arch\" \"t2,t2,*,*\")\n+   (set_attr \"predicable_short_it\" \"yes,yes,no,no\")\n+   (set_attr \"length\" \"2,2,4,4\")\n+   (set (attr \"type\")\n+\t(if_then_else (match_operand 1 \"const_int_operand\")\n+\t\t      (const_string \"alu_imm\")\n+\t\t      (const_string \"alu_sreg\")))]\n  )\n \n (define_insn \"addsi3_carryin\""}]}