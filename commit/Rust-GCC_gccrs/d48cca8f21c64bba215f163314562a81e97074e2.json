{"sha": "d48cca8f21c64bba215f163314562a81e97074e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4Y2NhOGYyMWM2NGJiYTIxNWYxNjMzMTQ1NjJhODFlOTcwNzRlMg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-31T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-31T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "d6a0ae1cfd8c9d12289faf51e86cc54834110572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6a0ae1cfd8c9d12289faf51e86cc54834110572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d48cca8f21c64bba215f163314562a81e97074e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48cca8f21c64bba215f163314562a81e97074e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48cca8f21c64bba215f163314562a81e97074e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48cca8f21c64bba215f163314562a81e97074e2/comments", "author": null, "committer": null, "parents": [{"sha": "7508a7e958ea06eb311a4a106312634eaf6d40c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7508a7e958ea06eb311a4a106312634eaf6d40c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7508a7e958ea06eb311a4a106312634eaf6d40c3"}], "stats": {"total": 336, "additions": 335, "deletions": 1}, "files": [{"sha": "073a759a3c145d59bd8751ee3232fe66935281d2", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,7 @@\n+2020-07-30  Joe Ramsay  <joe.ramsay@arm.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2020-07-22  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "83543a18d6dcd5618797b1e1080eecbccd375735", "filename": "config/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,9 @@\n+2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96202\n+\t* cet.m4 (GCC_CET_HOST_FLAGS): Don't enable CET without CET\n+\tsupport in stage1 nor for build support.\n+\n 2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/95413"}, {"sha": "588bb2c5f44f14e31dff604dea0b1b06c9a675f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,69 @@\n+2020-07-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_test_lsbb_all_ones): New define.\n+\t(vec_test_lsbb_all_zeros): New define.\n+\t* config/rs6000/rs6000-builtin.def (BU_P10_VSX_1): New built-in\n+\thandling macro.\n+\t(XVTLSBB_ZEROS, XVTLSBB_ONES): New builtin defines.\n+\t(xvtlsbb_all_zeros, xvtlsbb_all_ones): New builtin overloads.\n+\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_XVTLSBB_ZEROS,\n+\tP10_BUILTIN_VEC_XVTLSBB_ONES): New altivec_builtin_types entries.\n+\t* config/rs6000/rs6000.md (UNSPEC_XVTLSBB):  New unspec.\n+\t* config/rs6000/vsx.md (*xvtlsbb_internal): New instruction define.\n+\t(xvtlsbbo, xvtlsbbz): New instruction expands.\n+\n+2020-07-30  Cooper Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* config/riscv/riscv-opts.h (stack_protector_guard): New enum.\n+\t* config/riscv/riscv.c (riscv_option_override): Handle\n+\tthe new options.\n+\t* config/riscv/riscv.md (stack_protect_set): New pattern to handle\n+\tflexible stack protector guard settings.\n+\t(stack_protect_set_<mode>): Ditto.\n+\t(stack_protect_test): Ditto.\n+\t(stack_protect_test_<mode>): Ditto.\n+\t* config/riscv/riscv.opt (mstack-protector-guard=,\n+\tmstack-protector-guard-reg=, mstack-protector-guard-offset=): New\n+\toptions.\n+\t* doc/invoke.texi (Option Summary) [RISC-V Options]:\n+\tAdd -mstack-protector-guard=, -mstack-protector-guard-reg=, and\n+\t-mstack-protector-guard-offset=.\n+\t(RISC-V Options): Ditto.\n+\n+2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96202\n+\t* configure: Regenerated.\n+\n+2020-07-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96370\n+\t* tree-ssa-reassoc.c (rewrite_expr_tree): Add operation\n+\tcode parameter and use it instead of picking it up from\n+\tthe stmt that is being rewritten.\n+\t(reassociate_bb): Pass down the operation code.\n+\n+2020-07-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.md (nvptx_vector_index_operand): New predicate.\n+\t(VECELEM): New mode attribute for a vector's uppercase element mode.\n+\t(Vecelem): New mode attribute for a vector's lowercase element mode.\n+\t(*vec_set<mode>_0, *vec_set<mode>_1, *vec_set<mode>_2)\n+\t(*vec_set<mode>_3): New instructions.\n+\t(vec_set<mode>): New expander to generate one of the above insns.\n+\t(vec_extract<mode><Vecelem>): New instruction.\n+\n+2020-07-30  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/95435\n+\t* config/i386/x86-tune-costs.h: Use libcall for large sizes for\n+\t-m32. Start using libcall from 128+ bytes.\n+\n+2020-07-30  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/x86-tune-costs.h: Change code formatting.\n+\n 2020-07-29  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* config/nvptx/nvptx.md (recip<mode>2): New instruction."}, {"sha": "675c0b9e6b0875ae17672d2c6f6f6b7a21ca9c0e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1 +1 @@\n-20200730\n+20200731"}, {"sha": "3b70a9f2945e821b9479f4e1718417a4ec5027df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,31 @@\n+2020-07-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/64194\n+\t* pt.c (resolve_overloaded_unification): If the function\n+\ttemplate specialization has a placeholder return type,\n+\tthen instantiate it before attempting unification.\n+\n+2020-07-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95486\n+\t* pt.c (alias_ctad_tweaks): Call remove_constraints before\n+\tcalling set_constraints.\n+\n+2020-07-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96106\n+\t* pt.c (reduce_template_parm_level): Propagate DECL_VIRTUAL_P\n+\tfrom the original TEMPLATE_PARM_DECL to the new lowered one.\n+\n+2020-07-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96164\n+\t* constraint.cc (constraints_satisfied_p): Return true if\n+\t!flags_concepts.\n+\t* pt.c (do_type_instantiation): Update a paragraph taken from\n+\t[temp.explicit] to reflect the latest specification.  Don't\n+\tinstantiate a member with unsatisfied constraints.\n+\n 2020-07-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/91427"}, {"sha": "e2b3529bb0a1224fd43eda016830f7749ef9fb78", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,89 @@\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96152\n+\t* d-codegen.cc (build_array_from_exprs): New function.\n+\t* d-tree.h (build_array_from_exprs): Declare.\n+\t* expr.cc (ExprVisitor::visit (AssocArrayLiteralExp *)): Use\n+\tbuild_array_from_exprs to generate key and value arrays.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96154\n+\t* gdc.texi (Warnings): Document -Wvarargs.\n+\t* lang.opt: Add -Wvarargs\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96140\n+\t* intrinsics.cc (expand_intrinsic_vaarg): Handle ref parameters as\n+\targuments to va_arg().\n+\t(expand_intrinsic_vastart): Handle ref parameters as arguments to\n+\tva_start().\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* expr.cc (ExprVisitor::visit (AssignExp *)): Inline bounds checking\n+\tfor simple array assignments.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (build_memcmp_call): New function.\n+\t(build_memcpy_call): New function.\n+\t(build_memset_call): New function.\n+\t(build_float_identity): Call build_memcmp_call.\n+\t(lower_struct_comparison): Likewise.\n+\t(build_struct_comparison): Likewise.\n+\t* d-tree.h (build_memcmp_call): Declare.\n+\t(build_memcpy_call): Declare.\n+\t(build_memset_call): Declare.\n+\t* expr.cc (ExprVisitor::visit (EqualExp *)): Call build_memcmp_call.\n+\t(ExprVisitor::visit (AssignExp *)): Call build_memset_call.\n+\t(ExprVisitor::visit (ArrayLiteralExp *)): Call build_memcpy_call.\n+\t(ExprVisitor::visit (StructLiteralExp *)): Call build_memset_call.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* expr.cc (needs_postblit): Move out of ExprVisitor as a static\n+\tfunction.  Update all callers.\n+\t(needs_dtor): Likewise.\n+\t(lvalue_p): Likewise.\n+\t(binary_op): Likewise.\n+\t(binop_assignment): Likewise.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* intrinsics.cc (expand_intrinsic_rotate): Add function.\n+\t(maybe_expand_intrinsic): Handle rol and ror intrinsics.\n+\t* intrinsics.def (ROL): Add intrinsic.\n+\t(ROL_TIARG): Add intrinsic.\n+\t(ROR): Add intrinsic.\n+\t(ROR_TIARG): Add intrinsic.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-tree.h (DEF_D_INTRINSIC): Rename second argument from A to B.\n+\t* intrinsics.cc (intrinsic_decl): Add built_in field.\n+\t(DEF_D_INTRINSIC): Rename second argument from ALIAS to BUILTIN.\n+\t(maybe_set_intrinsic): Handle new intrinsic codes.\n+\t(expand_intrinsic_bt): Likewise.\n+\t(expand_intrinsic_checkedint): Likewise.\n+\t(expand_intrinsic_bswap): Remove.\n+\t(expand_intrinsic_sqrt): Remove.\n+\t(maybe_expand_intrinsic): Group together intrinsic cases that map\n+\tdirectly to gcc built-ins.\n+\t* intrinsics.def (DEF_D_BUILTIN): Rename second argument from A to B.\n+\tUpdate all callers to pass equivalent DECL_FUNCTION_CODE.\n+\t(DEF_CTFE_BUILTIN): Likewise.\n+\t(STD_COS): Remove intrinsic.\n+\t(STD_FABS): Remove intrinsic.\n+\t(STD_LDEXP): Remove intrinsic.\n+\t(STD_RINT): Remove intrinsic.\n+\t(STD_RNDTOL): Remove intrinsic.\n+\t(STD_SIN): Remove intrinsic.\n+\t(STD_SQRTF): Remove intrinsic.\n+\t(STD_SQRT): Remove intrinsic.\n+\t(STD_SQRTL): Remove intrinsic.\n+\n 2020-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 8508c4e68."}, {"sha": "5183c5ae4339888ecf29075d1bb0f1cd352bb547", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,66 @@\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96152\n+\t* gdc.dg/pr96152.d: New test.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96154\n+\t* gdc.dg/pr96154a.d: New test.\n+\t* gdc.dg/pr96154b.d: New test.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96140\n+\t* gdc.dg/pr96140.d: New test.\n+\n+2020-07-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/lsbb-runnable.c: New test.\n+\t* gcc.target/powerpc/lsbb.c: New test.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/array1.d: New test.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/intrinsics.d: Add ror and rol tests.\n+\n+2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/intrinsics.d: New test.\n+\n+2020-07-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96370\n+\t* gcc.dg/pr96370.c: New testcase.\n+\n+2020-07-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/v2si-vec-set-extract.c: New test.\n+\n+2020-07-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/64194\n+\t* g++.dg/cpp1y/auto-fn60.C: New test.\n+\n+2020-07-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/95486\n+\t* g++.dg/cpp2a/class-deduction-alias3.C: New test.\n+\n+2020-07-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96106\n+\t* g++.dg/concepts/abbrev7.C: New test.\n+\n+2020-07-30  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96164\n+\t* g++.dg/cpp2a/concepts-explicit-inst5.C: New test.\n+\n 2020-07-29  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* gcc.target/nvptx/recip-1.c: New test."}, {"sha": "326461e074ed8892f6ac4197109f5841fce8ae35", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,8 @@\n+2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96202\n+\t* configure: Regenerated.\n+\n 2020-07-08  Ian Lance Taylor  <iant@golang.org>\n \n \t* configure.ac: Test linker support for DWARF5"}, {"sha": "942b7961f8e9975312c38c1b9f3aeb4dbd50cd15", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,8 @@\n+2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96202\n+\t* configure: Regenerated.\n+\n 2020-06-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_build_decl): Adjust clone_function_decl"}, {"sha": "190f5b34fad2cb99ad51c8d3f9305d889a9dc0bb", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,8 @@\n+2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96202\n+\t* configure: Regenerated.\n+\n 2020-07-29  Tiziano M\u00fcller  <tiziano.mueller@chem.uzh.ch>\n \n \t* init.c (builtin_array): Add xref comment."}, {"sha": "488720cd5cebecdfe83d25faac420b577e744477", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,8 @@\n+2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96202\n+\t* configure: Regenerated.\n+\n 2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/95413"}, {"sha": "6a08597c4c72c942741cded0969dfcc266c5cc50", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,8 @@\n+2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96202\n+\t* configure: Regenerated.\n+\n 2020-07-14  Ian Lance Taylor  <iant@golang.org>\n \n \tPR demangler/96143"}, {"sha": "8d5e982d3804148dd7541de49100fac3f8cc6d45", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,54 @@\n+2020-07-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (size_type, difference_type):\n+\tUse allocator_traits to obtain the allocator's size_type and\n+\tdifference_type.\n+\n+2020-07-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/floating_from_chars.cc (from_chars_impl): Use\n+\tisinf unqualified.\n+\t[!_GLIBCXX_USE_C99_STDLIB]: Use strtod for float and long\n+\tdouble.\n+\n+2020-07-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/unordered_multiset/cons/noexcept_default_construct.cc:\n+\tUse allocator with the correct value type.\n+\t* testsuite/23_containers/unordered_set/cons/noexcept_default_construct.cc:\n+\tLikewise.\n+\n+2020-07-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/from_chars/4.cc: Pass non-const iterator\n+\tto string::insert.\n+\n+2020-07-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (__detail::__cv_bool): New\n+\thelper concept.\n+\t(__detail::__integral_nonbool): Likewise.\n+\t(__detail::__is_integer_like): Use __integral_nonbool.\n+\t* testsuite/std/ranges/access/lwg3467.cc: New test.\n+\n+2020-07-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/from_chars/4.cc: Use dg-add-options ieee.\n+\t* testsuite/29_atomics/atomic_float/1.cc: Likewise.\n+\n+2020-07-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/vector/bool/72847.cc: Use the\n+\texceptions_enabled effective-target keyword instead of\n+\tchecking for an explicit -fno-exceptions option.\n+\t* testsuite/util/testsuite_abi.cc (examine_symbol): Remove\n+\tredundant try-catch.\n+\t* testsuite/util/testsuite_allocator.h [!__cpp_exceptions]:\n+\tDo not define check_allocate_max_size and memory_resource.\n+\t* testsuite/util/testsuite_containers.h: Replace comment with\n+\t#error if wrong standard dialect used.\n+\t* testsuite/util/testsuite_shared.cc: Likewise.\n+\n 2020-07-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable_policy.h (_Node_iterator_base()): New."}, {"sha": "73abebde502dab7133f2f6714e48f07446eb4672", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d48cca8f21c64bba215f163314562a81e97074e2/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d48cca8f21c64bba215f163314562a81e97074e2/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=d48cca8f21c64bba215f163314562a81e97074e2", "patch": "@@ -1,3 +1,8 @@\n+2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96202\n+\t* configure: Regenerated.\n+\n 2020-05-29  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/95413"}]}