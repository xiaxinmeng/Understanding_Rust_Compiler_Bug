{"sha": "28e5ca15b76773b91191541d79d67ef15510fdb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlNWNhMTViNzY3NzNiOTExOTE1NDFkNzlkNjdlZjE1NTEwZmRiMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-28T14:40:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-28T14:40:59Z"}, "message": "re PR middle-end/42883 (internal compiler error: in redirect_eh_edge_1, at tree-eh.c:2112)\n\n2010-01-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/42883\n\t* tree-cfgcleanup.c (remove_forwarder_block): Do not remove\n\tthe forwarder if the destination is an EH landing pad.\n\n\t* g++.dg/torture/pr42883.C: New testcase.\n\nFrom-SVN: r156322", "tree": {"sha": "d1451ac1af960f4369787457d8e40b7d11076fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1451ac1af960f4369787457d8e40b7d11076fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28e5ca15b76773b91191541d79d67ef15510fdb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e5ca15b76773b91191541d79d67ef15510fdb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e5ca15b76773b91191541d79d67ef15510fdb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e5ca15b76773b91191541d79d67ef15510fdb1/comments", "author": null, "committer": null, "parents": [{"sha": "8adfe01d22b81637ff7fe786212993db8b236e30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8adfe01d22b81637ff7fe786212993db8b236e30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8adfe01d22b81637ff7fe786212993db8b236e30"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "a96de7e2b7655e6063ffbd614da033f50f923f54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e5ca15b76773b91191541d79d67ef15510fdb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e5ca15b76773b91191541d79d67ef15510fdb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28e5ca15b76773b91191541d79d67ef15510fdb1", "patch": "@@ -1,4 +1,10 @@\n-28-01-2010  Razya Ladelsky  <razya@il.ibm.com>\n+2010-01-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42883\n+\t* tree-cfgcleanup.c (remove_forwarder_block): Do not remove\n+\tthe forwarder if the destination is an EH landing pad.\n+\n+2010-01-28  Razya Ladelsky  <razya@il.ibm.com>\n \n \t* tree-parloops.c (transform_to_exit_first_loop): Update the basic \n \tblock list passed to gimple_duplicate_sese_tail.\n@@ -7,7 +13,7 @@\n \tAvoid parallelization when the preheader is IRREDUCIBLE.\n \tTry to optimize when estimated_loop_iterations_int is unresolved.\n \tAdd the loop's location to the dump file.\n-\t* tree-cfg.c(add_phi_args_after_redirect): Remove.\n+\t* tree-cfg.c (add_phi_args_after_redirect): Remove.\n \t(gimple_duplicate_sese_tail): Remove the check for the latch.\n \tRedirect nexits to the exit block.\n \tRemove handling of the incoming edges to the latch."}, {"sha": "7706f8702a252f6be12140300b23ef59e38613bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e5ca15b76773b91191541d79d67ef15510fdb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e5ca15b76773b91191541d79d67ef15510fdb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28e5ca15b76773b91191541d79d67ef15510fdb1", "patch": "@@ -1,3 +1,8 @@\n+2010-01-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/42883\n+\t* g++.dg/torture/pr42883.C: New testcase.\n+\n 2010-01-28  Michael Matz  <matz@suse.de>\n \n \t* gcc.target/i386/pr42881.c: New test."}, {"sha": "f164c3781f5982c03514766d4803a94b65824f7f", "filename": "gcc/testsuite/g++.dg/torture/pr42883.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e5ca15b76773b91191541d79d67ef15510fdb1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42883.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e5ca15b76773b91191541d79d67ef15510fdb1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42883.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr42883.C?ref=28e5ca15b76773b91191541d79d67ef15510fdb1", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do compile }\n+\n+typedef __SIZE_TYPE__ size_t;\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class new_allocator     {\n+    public:\n+\ttypedef size_t size_type;\n+\ttypedef _Tp* pointer;\n+\ttypedef _Tp& reference;\n+\tvoid       deallocate(pointer __p, size_type)       {\n+\t    ::operator delete(__p);\n+\t}\n+    };\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class allocator: public __gnu_cxx::new_allocator<_Tp>     {\n+    public:\n+\ttemplate<typename _Tp1>         struct rebind         {\n+\t    typedef allocator<_Tp1> other;\n+\t};\n+    };\n+    template<typename _Tp, typename _Alloc>     struct _Vector_base     {\n+\ttypedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;\n+\tstruct _Vector_impl       : public _Tp_alloc_type       {\n+\t    typename _Tp_alloc_type::pointer _M_start;\n+\t    typename _Tp_alloc_type::pointer _M_end_of_storage;\n+\t};\n+\t~_Vector_base()       {\n+\t    _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage         - this->_M_impl._M_start);\n+\t}\n+\t_Vector_impl _M_impl;\n+\tvoid       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)       {\n+\t    if (__p)    _M_impl.deallocate(__p, __n);\n+\t}\n+    };\n+    template<typename _Tp, typename _Alloc = std::allocator<_Tp> >     class vector : protected _Vector_base<_Tp, _Alloc>     {\n+\ttypedef _Vector_base<_Tp, _Alloc> _Base;\n+\ttypedef typename _Base::_Tp_alloc_type _Tp_alloc_type;\n+    public:\n+\ttypedef typename _Tp_alloc_type::reference reference;\n+\ttypedef size_t size_type;\n+\tsize_type       size() const       {\n+\t}\n+\treference       operator[](size_type __n)       {\n+\t}\n+    };\n+};\n+class vtkConvexPointSet  {\n+public:\n+    static vtkConvexPointSet *New();\n+};\n+void MakeInternalMesh() {\n+    std::vector< int > tempFaces[2];\n+    std::vector< int > firstFace;\n+    int i, j, k;\n+    for(i = 0; i < 1000; i++)     {\n+\tfor(int pointCount = 0; pointCount < 1000; pointCount++) \t{\n+\t    for(j = 0; j < (int)tempFaces[0].size(); k++)\n+\t      if(tempFaces[0][j] == tempFaces[1][k]) \t\tbreak;\n+\t}\n+\tvtkConvexPointSet::New();\n+    }\n+}"}, {"sha": "6810f4b0894574740506b43e499da5f2ca367750", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e5ca15b76773b91191541d79d67ef15510fdb1/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e5ca15b76773b91191541d79d67ef15510fdb1/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=28e5ca15b76773b91191541d79d67ef15510fdb1", "patch": "@@ -345,12 +345,13 @@ remove_forwarder_block (basic_block bb)\n   if (dest == bb)\n     return false;\n \n-  /* If the destination block consists of a nonlocal label, do not merge\n-     it.  */\n+  /* If the destination block consists of a nonlocal label or is a\n+     EH landing pad, do not merge it.  */\n   label = first_stmt (dest);\n   if (label\n       && gimple_code (label) == GIMPLE_LABEL\n-      && DECL_NONLOCAL (gimple_label_label (label)))\n+      && (DECL_NONLOCAL (gimple_label_label (label))\n+\t  || EH_LANDING_PAD_NR (gimple_label_label (label)) != 0))\n     return false;\n \n   /* If there is an abnormal edge to basic block BB, but not into"}]}