{"sha": "9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYxZGE4MjFlNmRlMWQ1MDY4ZDhjMDNjZDQ2ZDFiMDVhYWI3OTlmMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-10-29T22:01:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-10-29T22:01:24Z"}, "message": "re PR tree-optimization/33614 (ICE on semi-constant vector CONSTRUCTORs)\n\ngcc/\n\tPR tree-optimization/33614\n\t* gimplify.c (gimplify_init_constructor): Gimplify vector constructors\n\tif they can't be reduced to VECTOR_CSTs and aren't legitimate\n\tinitializer constants.\n\ngcc/testsuite/\n\tPR tree-optimization/33614\n\t* gcc.c-torture/compile/pr33614.c: New test.\n\nFrom-SVN: r129739", "tree": {"sha": "2bff89cfef313ee63b25b7fe75cef5232a452361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bff89cfef313ee63b25b7fe75cef5232a452361"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/comments", "author": null, "committer": null, "parents": [{"sha": "5a347f2b406d98c43fc1215af013911d65896c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a347f2b406d98c43fc1215af013911d65896c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a347f2b406d98c43fc1215af013911d65896c18"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "a8d26816d8cc3850597f2f9100a51ebb74286236", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "patch": "@@ -1,3 +1,10 @@\n+2007-10-29  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR tree-optimization/33614\n+\t* gimplify.c (gimplify_init_constructor): Gimplify vector constructors\n+\tif they can't be reduced to VECTOR_CSTs and aren't legitimate\n+\tinitializer constants.\n+\n 2007-10-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33870"}, {"sha": "5c11bad3a08510d25740ed1c0fa3bbb685b8a3f4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "patch": "@@ -3290,8 +3290,9 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \t    tree value;\n \n \t    /* Even when ctor is constant, it might contain non-*_CST\n-\t      elements (e.g. { 1.0/0.0 - 1.0/0.0, 0.0 }) and those don't\n-\t      belong into VECTOR_CST nodes.  */\n+\t       elements, such as addresses or trapping values like\n+\t       1.0/0.0 - 1.0/0.0.  Such expressions don't belong\n+\t       in VECTOR_CST nodes.  */\n \t    FOR_EACH_CONSTRUCTOR_VALUE (elts, ix, value)\n \t      if (!CONSTANT_CLASS_P (value))\n \t\t{\n@@ -3305,10 +3306,14 @@ gimplify_init_constructor (tree *expr_p, tree *pre_p,\n \t\tbreak;\n \t      }\n \n-\t    /* Don't reduce a TREE_CONSTANT vector ctor even if we can't\n+\t    /* Don't reduce an initializer constant even if we can't\n \t       make a VECTOR_CST.  It won't do anything for us, and it'll\n \t       prevent us from representing it as a single constant.  */\n-\t    break;\n+\t    if (initializer_constant_valid_p (ctor, type))\n+\t      break;\n+\n+\t    TREE_CONSTANT (ctor) = 0;\n+\t    TREE_INVARIANT (ctor) = 0;\n \t  }\n \n \t/* Vector types use CONSTRUCTOR all the way through gimple"}, {"sha": "db874d34f06516de6920901939fbbc5cc8a08478", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "patch": "@@ -1,3 +1,8 @@\n+2007-10-29  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR tree-optimization/33614\n+\t* gcc.c-torture/compile/pr33614.c: New test.\n+\n 2007-10-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/33870"}, {"sha": "2b835b9ddd19019cc290388f80842919252af336", "filename": "gcc/testsuite/gcc.c-torture/compile/pr33614.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33614.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1da821e6de1d5068d8c03cd46d1b05aab799f1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33614.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr33614.c?ref=9f1da821e6de1d5068d8c03cd46d1b05aab799f1", "patch": "@@ -0,0 +1,9 @@\n+typedef float V2SF __attribute__ ((vector_size (8)));\n+\n+V2SF\n+foo (int x, V2SF a)\n+{\n+  while (x--)\n+    a += (V2SF) {1.0f/0.0f - 1.0f/0.0f, 1.0f/0.0f - 1.0f/0.0f};\n+  return a;\n+}"}]}