{"sha": "1e07edd31518c5fc5226d874f9d0d144dfbaa429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwN2VkZDMxNTE4YzVmYzUyMjZkODc0ZjlkMGQxNDRkZmJhYTQyOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-12T14:44:52Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-12T14:44:52Z"}, "message": "i386.md (all XFmode patterns except swapxf): Disable for 64bit.\n\n\t* i386.md (all XFmode patterns except swapxf): Disable for 64bit.\n\n\t* i386.md (x86_sahf_1): Disable for 64bit.\n\t(popsi*, pophi*): Likewise.\n\t(pushqi, pushhi): Likewise.\n\t(movdi, pushdi): Likewise.\n\t(zero extend DImode splitter): Likewise.\n\t(adddi, minusdi splitter): Likewise.\n\t(umulsidi): Likewise.\n\t(umulsi): New.\n\t(mulsidi): Disable for 64bit\n\t(lshift:DI/ashift:DI): Disable for 64bit.\n\t(loop patterns): Likewise.\n\t(call_pop, call_value_pop expanders and patterns): Likewise.\n\t(prologue_get_pc): Likewise.\n\t(leave): Likewise.\n\t(fcmovDI pattern and splitter): Likewise.\n\t(movdfcc_1_rex64): New.\n\nFrom-SVN: r40412", "tree": {"sha": "13c906e1663668c2970534789f51e2c20b3d083d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13c906e1663668c2970534789f51e2c20b3d083d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e07edd31518c5fc5226d874f9d0d144dfbaa429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e07edd31518c5fc5226d874f9d0d144dfbaa429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e07edd31518c5fc5226d874f9d0d144dfbaa429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e07edd31518c5fc5226d874f9d0d144dfbaa429/comments", "author": null, "committer": null, "parents": [{"sha": "d28362735b53e8015c8c92cde8f49d3c7e5cbe82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d28362735b53e8015c8c92cde8f49d3c7e5cbe82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d28362735b53e8015c8c92cde8f49d3c7e5cbe82"}], "stats": {"total": 234, "additions": 147, "deletions": 87}, "files": [{"sha": "7513089fac38585e68b0e043fbc2ad7f0f2cad82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e07edd31518c5fc5226d874f9d0d144dfbaa429/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e07edd31518c5fc5226d874f9d0d144dfbaa429/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e07edd31518c5fc5226d874f9d0d144dfbaa429", "patch": "@@ -1,3 +1,24 @@\n+Mon Mar 12 15:41:08 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (all XFmode patterns except swapxf): Disable for 64bit.\n+\n+\t* i386.md (x86_sahf_1): Disable for 64bit.\n+\t(popsi*, pophi*): Likewise.\n+\t(pushqi, pushhi): Likewise.\n+\t(movdi, pushdi): Likewise.\n+\t(zero extend DImode splitter): Likewise.\n+\t(adddi, minusdi splitter): Likewise.\n+\t(umulsidi): Likewise.\n+\t(umulsi): New.\n+\t(mulsidi): Disable for 64bit\n+\t(lshift:DI/ashift:DI): Disable for 64bit.\n+\t(loop patterns): Likewise.\n+\t(call_pop, call_value_pop expanders and patterns): Likewise.\n+\t(prologue_get_pc): Likewise.\n+\t(leave): Likewise.\n+\t(fcmovDI pattern and splitter): Likewise.\n+\t(movdfcc_1_rex64): New.\n+\n Mon Mar 12 15:16:36 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.h (VALID_FP_MODE_P): XFmode is invalid on x86_64."}, {"sha": "735f472fee2629c16789eeda735c06c7ff27392a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 126, "deletions": 87, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e07edd31518c5fc5226d874f9d0d144dfbaa429/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e07edd31518c5fc5226d874f9d0d144dfbaa429/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1e07edd31518c5fc5226d874f9d0d144dfbaa429", "patch": "@@ -1273,7 +1273,7 @@\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:XF 0 \"cmp_fp_expander_operand\" \"\")\n \t\t    (match_operand:XF 1 \"cmp_fp_expander_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"\n {\n   ix86_compare_op0 = operands[0];\n@@ -1403,7 +1403,7 @@\n \t(compare:CCFP\n \t  (match_operand:XF 0 \"register_operand\" \"f\")\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"* return output_fp_compare (insn, operands, 0, 0);\"\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"XF\")])\n@@ -1424,7 +1424,7 @@\n \t  [(compare:CCFP\n \t     (match_operand:XF 1 \"register_operand\" \"f\")\n \t     (match_operand:XF 2 \"register_operand\" \"f\"))] 9))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"* return output_fp_compare (insn, operands, 2, 0);\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"mode\" \"XF\")])\n@@ -1519,7 +1519,7 @@\n (define_insn \"x86_sahf_1\"\n   [(set (reg:CC 17)\n \t(unspec:CC [(match_operand:HI 0 \"register_operand\" \"a\")] 10))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"sahf\"\n   [(set_attr \"length\" \"1\")\n    (set_attr \"athlon_decode\" \"vector\")\n@@ -1642,7 +1642,7 @@\n    (set (reg:SI 7)\n \t(plus:SI (reg:SI 7) (const_int 4)))\n    (set (reg:SI 6) (reg:SI 6))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"pop{l}\\\\t%0\"\n   [(set_attr \"type\" \"pop\")\n    (set_attr \"mode\" \"SI\")])\n@@ -1652,7 +1652,7 @@\n \t(mem:SI (reg:SI 7)))\n    (set (reg:SI 7)\n \t(plus:SI (reg:SI 7) (const_int 4)))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"pop{l}\\\\t%0\"\n   [(set_attr \"type\" \"pop\")\n    (set_attr \"mode\" \"SI\")])\n@@ -1738,7 +1738,7 @@\n (define_insn \"*pushhi2\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<,<\")\n \t(match_operand:HI 1 \"general_no_elim_operand\" \"n,r*m\"))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"@\n    push{w}\\\\t{|WORD PTR }%1\n    push{w}\\\\t%1\"\n@@ -1750,7 +1750,7 @@\n \t(mem:HI (reg:SI 7)))\n    (set (reg:SI 7)\n \t(plus:SI (reg:SI 7) (const_int 2)))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"pop{w}\\\\t%0\"\n   [(set_attr \"type\" \"pop\")\n    (set_attr \"mode\" \"HI\")])\n@@ -1875,7 +1875,7 @@\n (define_insn \"*pushqi2\"\n   [(set (match_operand:QI 0 \"push_operand\" \"=<,<\")\n \t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"n,r\"))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"@\n    push{w}\\\\t{|word ptr }%1\n    push{w}\\\\t%w1\"\n@@ -1887,7 +1887,7 @@\n \t(mem:QI (reg:SI 7)))\n    (set (reg:SI 7)\n \t(plus:SI (reg:SI 7) (const_int 2)))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"pop{w}\\\\t%0\"\n   [(set_attr \"type\" \"pop\")\n    (set_attr \"mode\" \"HI\")])\n@@ -2177,13 +2177,14 @@\n (define_insn \"*pushdi\"\n   [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n \t(match_operand:DI 1 \"general_no_elim_operand\" \"riF*m\"))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"#\")\n \n (define_insn \"*movdi_2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o,!m*y,!*y\")\n \t(match_operand:DI 1 \"general_operand\" \"riFo,riF,*y,m\"))]\n-  \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n+  \"!TARGET_64BIT\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n    #\n    #\n@@ -2194,7 +2195,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"push_operand\" \"\")\n         (match_operand:DI 1 \"general_operand\" \"\"))]\n-  \"reload_completed && ! MMX_REG_P (operands[1])\"\n+  \"reload_completed && ! MMX_REG_P (operands[1]) && !TARGET_64BIT\"\n   [(const_int 0)]\n   \"if (!ix86_split_long_move (operands)) abort (); DONE;\")\n \n@@ -2577,7 +2578,7 @@\n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:XF 1 \"general_operand\" \"\"))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"ix86_expand_move (XFmode, operands); DONE;\")\n \n (define_expand \"movtf\"\n@@ -2594,9 +2595,9 @@\n ;;  handled elsewhere).\n \n (define_insn \"*pushxf_nointeger\"\n-  [(set (match_operand:XF 0 \"push_operand\" \"=<,<,<\")\n+  [(set (match_operand:XF 0 \"push_operand\" \"=X,X,X\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n-  \"optimize_size\"\n+  \"optimize_size && !TARGET_64BIT\"\n   \"*\n {\n   switch (which_alternative)\n@@ -2653,8 +2654,8 @@\n \n (define_insn \"*pushxf_integer\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:XF 1 \"general_no_elim_operand\" \"f#r,rFo#f\"))]\n-  \"!optimize_size\"\n+\t(match_operand:XF 1 \"general_no_elim_operand\" \"f#r,ro#f\"))]\n+  \"!optimize_size && !TARGET_64BIT\"\n   \"*\n {\n   switch (which_alternative)\n@@ -2737,6 +2738,7 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,*r,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm,f,G,*roF,F*r\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+   && !TARGET_64BIT\n    && optimize_size\n    && (reload_in_progress || reload_completed\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n@@ -2831,6 +2833,7 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,m,f#r,r#f,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm#r,f#r,G,roF#f,Fr#f\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+   && !TARGET_64BIT\n    && !optimize_size\n    && (reload_in_progress || reload_completed\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n@@ -3187,7 +3190,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed && true_regnum (operands[0]) == true_regnum (operands[1])\"\n+  \"reload_completed && true_regnum (operands[0]) == true_regnum (operands[1])\n+   && !TARGET_64BIT\"\n   [(set (match_dup 4) (const_int 0))]\n   \"split_di (&operands[0], 1, &operands[3], &operands[4]);\")\n \n@@ -3475,7 +3479,7 @@\n (define_expand \"extendsfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n@@ -3485,7 +3489,7 @@\n (define_insn \"*extendsfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\n+  \"TARGET_80387 && !TARGET_64BIT\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n@@ -3561,7 +3565,7 @@\n (define_expand \"extenddfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"\n {\n   if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n@@ -3571,7 +3575,7 @@\n (define_insn \"*extenddfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"TARGET_80387\n+  \"TARGET_80387 && !TARGET_64BIT\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n@@ -3795,15 +3799,15 @@\n \t\t   (float_truncate:SF\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"operands[2] = assign_386_stack_local (SFmode, 0);\")\n \n (define_insn \"*truncxfsf2_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,f\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f,0\")))\n    (clobber (match_operand:SF 2 \"memory_operand\" \"=m,m\"))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"*\n {\n   switch (which_alternative)\n@@ -3825,7 +3829,7 @@\n   [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"*\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n@@ -3886,7 +3890,7 @@\n   [(set_attr \"type\" \"fmov,multi\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*truncxfsf2_2\"\n+(define_insn \"*trunctfsf2_2\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m\")\n \t(float_truncate:SF\n \t (match_operand:TF 1 \"register_operand\" \"f\")))]\n@@ -3926,15 +3930,15 @@\n \t\t   (float_truncate:DF\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"operands[2] = assign_386_stack_local (DFmode, 0);\")\n \n (define_insn \"*truncxfdf2_1\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,f\")\n \t(float_truncate:DF\n \t (match_operand:XF 1 \"register_operand\" \"f,0\")))\n    (clobber (match_operand:DF 2 \"memory_operand\" \"=m,m\"))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"*\n {\n   switch (which_alternative)\n@@ -3956,7 +3960,7 @@\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:DF\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"*\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n@@ -4063,7 +4067,7 @@\n \t      (clobber (match_dup 3))\n \t      (clobber (match_scratch:SI 4 \"\"))\n \t      (clobber (match_scratch:XF 5 \"\"))])]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"operands[2] = assign_386_stack_local (SImode, 0);\n    operands[3] = assign_386_stack_local (DImode, 1);\")\n \n@@ -4135,7 +4139,7 @@\n \t      (clobber (match_dup 2))\n \t      (clobber (match_dup 3))\n \t      (clobber (match_scratch:SI 4 \"\"))])]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"operands[2] = assign_386_stack_local (SImode, 0);\n    operands[3] = assign_386_stack_local (SImode, 1);\")\n \n@@ -4449,7 +4453,7 @@\n (define_insn \"floathixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:HI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"@\n    fild%z1\\\\t%1\n    #\"\n@@ -4471,7 +4475,7 @@\n (define_insn \"floatsixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"@\n    fild%z1\\\\t%1\n    #\"\n@@ -4493,7 +4497,7 @@\n (define_insn \"floatdixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"@\n    fild%z1\\\\t%1\n    #\"\n@@ -4549,7 +4553,7 @@\n \t(plus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n \t\t (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\"\n+  \"reload_completed && !TARGET_64BIT\"\n   [(parallel [(set (reg:CC 17) (unspec:CC [(match_dup 1) (match_dup 2)] 12))\n \t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n@@ -5598,7 +5602,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(plus:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"\")\n \n (define_expand \"addtf3\"\n@@ -5640,7 +5644,7 @@\n \t(minus:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n \t\t  (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\"\n+  \"reload_completed && !TARGET_64BIT\"\n   [(parallel [(set (reg:CC 17) (compare:CC (match_dup 1) (match_dup 2)))\n \t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n@@ -5803,7 +5807,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(minus:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t  (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"\")\n \n (define_expand \"subtf3\"\n@@ -5920,12 +5924,26 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"mode\" \"QI\")])\n \n+(define_insn \"umulsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n+\t\t (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))\n+   (clobber (reg:CC 17))]\n+  \"\"\n+  \"mul{l}\\\\t%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"ppro_uops\" \"few\")\n+   (set_attr \"length_immediate\" \"0\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+;; We can't use this pattern in 64bit mode, since it results in two separate 32bit registers\n (define_insn \"umulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"mul{l}\\\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n@@ -5937,7 +5955,7 @@\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"imul{l}\\\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n@@ -5954,7 +5972,7 @@\n \t    (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=a\"))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"mul{l}\\\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"ppro_uops\" \"few\")\n@@ -5984,7 +6002,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"\")\n \n (define_expand \"multf3\"\n@@ -6038,7 +6056,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(div:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t(match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"\")\n \n (define_expand \"divtf3\"\n@@ -7389,7 +7407,7 @@\n   [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"ix86_expand_unary_operator (NEG, XFmode, operands); DONE;\")\n \n (define_expand \"negtf2\"\n@@ -7406,7 +7424,8 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && ix86_unary_operator_ok (NEG, XFmode, operands)\"\n+  \"TARGET_80387 && !TARGET_64BIT\n+   && ix86_unary_operator_ok (NEG, XFmode, operands)\"\n   \"#\")\n \n (define_split\n@@ -7491,7 +7510,7 @@\n (define_insn \"*negxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n+  \"TARGET_80387 && !TARGET_64BIT && reload_completed\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -7501,7 +7520,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -7511,7 +7530,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -7643,7 +7662,7 @@\n   [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"ix86_expand_unary_operator (ABS, XFmode, operands); DONE;\")\n \n (define_expand \"abstf2\"\n@@ -7660,7 +7679,8 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(abs:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"TARGET_80387 && ix86_unary_operator_ok (ABS, XFmode, operands)\"\n+  \"TARGET_80387 && !TARGET_64BIT\n+   && ix86_unary_operator_ok (ABS, XFmode, operands)\"\n   \"#\")\n \n (define_split\n@@ -7736,7 +7756,7 @@\n (define_insn \"*absxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n+  \"TARGET_80387 && !TARGET_64BIT && reload_completed\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])\n@@ -7745,7 +7765,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (float_extend:XF\n \t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n@@ -7754,7 +7774,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (float_extend:XF\n \t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n@@ -8825,7 +8845,7 @@\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n    (clobber (match_scratch:SI 3 \"=&r\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_CMOVE\"\n+  \"!TARGET_64BIT && TARGET_CMOVE\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -8834,7 +8854,7 @@\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")))\n    (clobber (reg:CC 17))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -8844,7 +8864,7 @@\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_CMOVE && reload_completed\"\n+  \"!TARGET_64BIT && TARGET_CMOVE && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_lshrdi (operands, operands[3]); DONE;\")\n \n@@ -8853,7 +8873,7 @@\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonmemory_operand\" \"\")))\n    (clobber (reg:CC 17))]\n-  \"reload_completed\"\n+  \"!TARGET_64BIT && reload_completed\"\n   [(const_int 0)]\n   \"ix86_split_lshrdi (operands, NULL_RTX); DONE;\")\n \n@@ -9987,7 +10007,7 @@\n    (use (match_operand 2 \"\" \"\"))        ; max iterations\n    (use (match_operand 3 \"\" \"\"))        ; loop level \n    (use (match_operand 4 \"\" \"\"))]       ; label\n-  \"TARGET_USE_LOOP\"\n+  \"TARGET_USE_LOOP && !TARGET_64BIT\"\n   \"                                 \n {\n   /* Only use cloop on innermost loops.  */\n@@ -10011,7 +10031,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:SI 3 \"=X,X,r\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_USE_LOOP\"\n+  \"TARGET_USE_LOOP && !TARGET_64BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -10042,7 +10062,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:SI 2 \"\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_USE_LOOP\n+  \"TARGET_USE_LOOP && !TARGET_64BIT\n    && reload_completed\n    && REGNO (operands[1]) != 2\"\n   [(parallel [(set (reg:CCZ 17)\n@@ -10065,7 +10085,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (reg:CC 17))]\n-  \"TARGET_USE_LOOP\n+  \"TARGET_USE_LOOP && !TARGET_64BIT\n    && reload_completed\n    && (! REG_P (operands[2])\n        || ! rtx_equal_p (operands[1], operands[2]))\"\n@@ -10094,7 +10114,7 @@\n \t      (set (reg:SI 7)\n \t\t   (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 3 \"\" \"\")))])]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"\n {\n   if (operands[3] == const0_rtx)\n@@ -10110,14 +10130,16 @@\n     current_function_uses_pic_offset_table = 1;\n   if (! call_insn_operand (XEXP (operands[0], 0), Pmode))\n     XEXP (operands[0], 0) = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n+  if (TARGET_64BIT)\n+    abort();\n }\")\n \n (define_insn \"*call_pop_0\"\n   [(call (mem:QI (match_operand:SI 0 \"constant_call_address_operand\" \"\"))\n \t (match_operand:SI 1 \"\" \"\"))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 2 \"immediate_operand\" \"\")))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"*\n {\n   if (SIBLING_CALL_P (insn))\n@@ -10132,7 +10154,7 @@\n \t (match_operand:SI 1 \"\" \"\"))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"*\n {\n   if (constant_call_address_operand (operands[0], Pmode))\n@@ -10209,7 +10231,7 @@\n \t      (set (reg:SI 7)\n \t\t   (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 4 \"\" \"\")))])]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"\n {\n   if (operands[4] == const0_rtx)\n@@ -10375,7 +10397,7 @@\n (define_insn \"prologue_get_pc\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n     (unspec_volatile:SI [(plus:SI (pc) (match_operand 1 \"\" \"\"))] 2))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"*\n {\n   if (GET_CODE (operands[1]) == LABEL_REF)\n@@ -10403,7 +10425,7 @@\n (define_insn \"leave\"\n   [(set (reg:SI 7) (reg:SI 6))\n    (set (reg:SI 6) (mem:SI (pre_dec:SI (reg:SI 7))))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"leave\"\n   [(set_attr \"length_immediate\" \"0\")\n    (set_attr \"length\" \"1\")\n@@ -10581,7 +10603,8 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"%0\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"f\")]))]\n-  \"TARGET_80387 && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n+  \"TARGET_80387 && !TARGET_64BIT\n+   && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (if_then_else (match_operand:XF 3 \"mult_operator\" \"\") \n@@ -10776,7 +10799,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"f,0\")]))]\n-  \"TARGET_80387\n+  \"TARGET_80387 && !TARGET_64BIT\n    && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -10810,7 +10833,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,0\")]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n+  \"TARGET_80387 && !TARGET_64BIT && TARGET_USE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -10846,7 +10869,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,0\")\n \t   (float:XF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n+  \"TARGET_80387 && !TARGET_64BIT && TARGET_USE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -10882,7 +10905,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -10915,7 +10938,7 @@\n \t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:XF\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -10948,7 +10971,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -10981,7 +11004,7 @@\n \t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:XF\n \t    (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_64BIT\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -11148,7 +11171,7 @@\n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && !TARGET_64BIT\n    && (TARGET_IEEE_FP || flag_unsafe_math_optimizations) \"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -11169,7 +11192,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && !TARGET_64BIT\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -11189,7 +11212,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\"\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && !TARGET_64BIT\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -11236,7 +11259,7 @@\n (define_insn \"sinxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] 1))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 && !TARGET_64BIT\n    && flag_unsafe_math_optimizations\"\n   \"fsin\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -11282,7 +11305,7 @@\n (define_insn \"cosxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] 2))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n   \"fcos\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -12247,7 +12270,7 @@\n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n-  \"TARGET_CMOVE\n+  \"TARGET_CMOVE && !TARGET_64BIT\n    && (GET_CODE (operands[2]) != MEM || GET_CODE (operands[3]) != MEM)\"\n   \"@\n    fcmov%F1\\\\t{%2, %0|%0, %2}\n@@ -12257,13 +12280,29 @@\n   [(set_attr \"type\" \"fcmov,fcmov,multi,multi\")\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"*movdfcc_1_rex64\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f,&r,&r\")\n+\t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\" \n+\t\t\t\t[(reg 17) (const_int 0)])\n+\t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"f,0,rm,0\")\n+\t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"0,f,0,rm\")))]\n+  \"TARGET_CMOVE && TARGET_64BIT\n+   && (GET_CODE (operands[2]) != MEM || GET_CODE (operands[3]) != MEM)\"\n+  \"@\n+   fcmov%F1\\\\t{%2, %0|%0, %2}\n+   fcmov%f1\\\\t{%3, %0|%0, %3}\n+   cmov%C1\\\\t{%2, %0|%0, %2}\n+   cmov%c1\\\\t{%3, %0|%0, %3}\"\n+  [(set_attr \"type\" \"fcmov,fcmov,icmov,icmov\")\n+   (set_attr \"mode\" \"DF\")])\n+\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(if_then_else:DF (match_operator 1 \"fcmov_comparison_operator\" \n \t\t\t\t[(match_operand 4 \"\" \"\") (const_int 0)])\n \t\t      (match_operand:DF 2 \"nonimmediate_operand\" \"\")\n \t\t      (match_operand:DF 3 \"nonimmediate_operand\" \"\")))]\n-  \"!ANY_FP_REG_P (operands[0]) && reload_completed\"\n+  \"!ANY_FP_REG_P (operands[0]) && reload_completed && !TARGET_64BIT\"\n   [(set (match_dup 2)\n \t(if_then_else:SI (match_op_dup 1 [(match_dup 4) (const_int 0)])\n \t\t      (match_dup 5)\n@@ -12281,7 +12320,7 @@\n \t(if_then_else:XF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"\")\n \t\t\t (match_operand:XF 3 \"register_operand\" \"\")))]\n-  \"TARGET_CMOVE\"\n+  \"TARGET_CMOVE && !TARGET_64BIT\"\n   \"if (! ix86_expand_fp_movcc (operands)) FAIL; DONE;\")\n \n (define_expand \"movtfcc\"\n@@ -12298,7 +12337,7 @@\n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n \t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n-  \"TARGET_CMOVE\"\n+  \"TARGET_CMOVE && !TARGET_64BIT\"\n   \"@\n    fcmov%F1\\\\t{%2, %0|%0, %2}\n    fcmov%f1\\\\t{%3, %0|%0, %3}\"\n@@ -13613,7 +13652,7 @@\n \t      (match_operand:SI 2 \"\" \"\")))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 3 \"immediate_operand\" \"\")))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"*\n {\n   if (SIBLING_CALL_P (insn))\n@@ -13629,7 +13668,7 @@\n \t      (match_operand:SI 2 \"\" \"\")))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n-  \"\"\n+  \"!TARGET_64BIT\"\n   \"*\n {\n   if (constant_call_address_operand (operands[1], QImode))"}]}