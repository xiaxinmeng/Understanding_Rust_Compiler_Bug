{"sha": "c71070ab83526725e7679dc850f86ba8cb5ca45f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxMDcwYWI4MzUyNjcyNWU3Njc5ZGM4NTBmODZiYThjYjVjYTQ1Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-12-28T01:13:19Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-12-28T01:13:19Z"}, "message": "global.c, [...]: Move DEF_VEC_P(basic_block) and DEF_VEC_ALLOC_P(basic_block,{gc,heap}) to ...\n\n\t* global.c, tree-ssa-pre.c: Move DEF_VEC_P(basic_block) and\n\tDEF_VEC_ALLOC_P(basic_block,{gc,heap}) to ...\n\t* basic-block.h: ... here.\n\nFrom-SVN: r109097", "tree": {"sha": "62cd9fec1be4b0091939fd7abd2335b1cbf99b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62cd9fec1be4b0091939fd7abd2335b1cbf99b21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c71070ab83526725e7679dc850f86ba8cb5ca45f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71070ab83526725e7679dc850f86ba8cb5ca45f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71070ab83526725e7679dc850f86ba8cb5ca45f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71070ab83526725e7679dc850f86ba8cb5ca45f/comments", "author": null, "committer": null, "parents": [{"sha": "420ab68e181bbd40bbf1315dd5d8fd15aa7e5119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420ab68e181bbd40bbf1315dd5d8fd15aa7e5119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/420ab68e181bbd40bbf1315dd5d8fd15aa7e5119"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "9a3f53ff404abafd5d3788cd137090daeac00ddb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71070ab83526725e7679dc850f86ba8cb5ca45f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71070ab83526725e7679dc850f86ba8cb5ca45f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c71070ab83526725e7679dc850f86ba8cb5ca45f", "patch": "@@ -1,3 +1,9 @@\n+2005-12-27  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* global.c, tree-ssa-pre.c: Move DEF_VEC_P(basic_block) and\n+\tDEF_VEC_ALLOC_P(basic_block,{gc,heap}) to ...\n+\t* basic-block.h: ... here.\n+\n 2005-12-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (int_const_binop): Return NULL_TREE when an expression"}, {"sha": "101f48610b20e3556fc030bc9a947c1a11caf73b", "filename": "gcc/basic-block.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71070ab83526725e7679dc850f86ba8cb5ca45f/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71070ab83526725e7679dc850f86ba8cb5ca45f/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=c71070ab83526725e7679dc850f86ba8cb5ca45f", "patch": "@@ -282,6 +282,10 @@ struct rtl_bb_info GTY(())\n \n typedef struct basic_block_def *basic_block;\n \n+DEF_VEC_P(basic_block);\n+DEF_VEC_ALLOC_P(basic_block,gc);\n+DEF_VEC_ALLOC_P(basic_block,heap);\n+\n #define BB_FREQ_MAX 10000\n \n /* Masks for basic_block.flags."}, {"sha": "e88e1012a5e8332b36d3d8f7ea1197f0154aeaae", "filename": "gcc/global.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71070ab83526725e7679dc850f86ba8cb5ca45f/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71070ab83526725e7679dc850f86ba8cb5ca45f/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=c71070ab83526725e7679dc850f86ba8cb5ca45f", "patch": "@@ -2301,9 +2301,6 @@ rpost_cmp (const void *bb1, const void *bb2)\n /* Temporary bitmap used for live_pavin, live_pavout calculation.  */\n static bitmap temp_bitmap;\n \n-DEF_VEC_P(basic_block);\n-DEF_VEC_ALLOC_P(basic_block,heap);\n-\n /* The function calculates partial register availability according to\n    the following equations:\n "}, {"sha": "e8ef1220b19538ab7e981a7f8c7e95bd807295ad", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71070ab83526725e7679dc850f86ba8cb5ca45f/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71070ab83526725e7679dc850f86ba8cb5ca45f/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=c71070ab83526725e7679dc850f86ba8cb5ca45f", "patch": "@@ -1334,8 +1334,6 @@ clean (value_set_t set)\n     }\n }\n \n-DEF_VEC_P (basic_block);\n-DEF_VEC_ALLOC_P (basic_block, heap);\n static sbitmap has_abnormal_preds;\n \n /* Compute the ANTIC set for BLOCK."}]}