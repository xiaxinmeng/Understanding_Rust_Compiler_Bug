{"sha": "fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "node_id": "C_kwDOANBUbNoAKGZkY2RkYmE4ZjI5ZWEzODc4ODUxYjhiNGNkMzdkMGZkMzQ3NmQzYmY", "commit": {"author": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2021-12-14T14:03:38Z"}, "committer": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2021-12-14T14:52:27Z"}, "message": "aarch64: Add LS64 extension and intrinsics\n\nThis patch is adding support for LS64 (Armv8.7-A Load/Store 64 Byte extension)\nwhich is part of Armv8.7-A architecture. Changes include missing plumbing for\nTARGET_LS64, LS64 data structure and intrinsics defined in ACLE. Machine\ndescription of intrinsics is using new V8DI mode added in a separate patch.\n__ARM_FEATURE_LS64 is defined if the Armv8.7-A LS64 instructions for atomic\n64-byte access to device memory are supported.\n\nNew compiler internal type is added wrapping ACLE struct data512_t:\n\ntypedef struct {\n  uint64_t val[8];\n} __arm_data512_t;\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c (enum aarch64_builtins):\n\tDefine AARCH64_LS64_BUILTIN_LD64B, AARCH64_LS64_BUILTIN_ST64B,\n\tAARCH64_LS64_BUILTIN_ST64BV, AARCH64_LS64_BUILTIN_ST64BV0.\n\t(aarch64_init_ls64_builtin_decl): Helper function.\n\t(aarch64_init_ls64_builtins): Helper function.\n\t(aarch64_init_ls64_builtins_types): Helper function.\n\t(aarch64_general_init_builtins): Init LS64 intrisics for\n\tTARGET_LS64.\n\t(aarch64_expand_builtin_ls64): LS64 intrinsics expander.\n\t(aarch64_general_expand_builtin): Handle aarch64_expand_builtin_ls64.\n\t(ls64_builtins_data): New helper struct.\n\t(v8di_UP): New define.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n\t__ARM_FEATURE_LS64.\n\t* config/aarch64/aarch64.c (aarch64_classify_address): Enforce the\n\tV8DI range (7-bit signed scaled) for both ends of the range.\n\t* config/aarch64/aarch64-simd.md (movv8di): New pattern.\n\t(aarch64_movv8di): New pattern.\n\t* config/aarch64/aarch64.h (AARCH64_ISA_LS64): New define.\n\t(TARGET_LS64): New define.\n\t* config/aarch64/aarch64.md: Add UNSPEC_LD64B, UNSPEC_ST64B,\n\tUNSPEC_ST64BV and UNSPEC_ST64BV0.\n\t(ld64b): New define_insn.\n\t(st64b): New define_insn.\n\t(st64bv): New define_insn.\n\t(st64bv0): New define_insn.\n\t* config/aarch64/arm_acle.h (data512_t): New type derived from\n\t__arm_data512_t.\n\t(__arm_data512_t): New internal type.\n\t(__arm_ld64b): New intrinsic.\n\t(__arm_st64b): New intrinsic.\n\t(__arm_st64bv): New intrinsic.\n\t(__arm_st64bv0): New intrinsic.\n\t* config/arm/types.md: Add new type ls64.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/acle/ls64_asm.c: New test.\n\t* gcc.target/aarch64/acle/ls64_ld64b.c: New test.\n\t* gcc.target/aarch64/acle/ls64_ld64b-2.c: New test.\n\t* gcc.target/aarch64/acle/ls64_ld64b-3.c: New test.\n\t* gcc.target/aarch64/acle/ls64_st64b.c: New test.\n\t* gcc.target/aarch64/acle/ls64_ld_st_o0.c: New test.\n\t* gcc.target/aarch64/acle/ls64_st64b-2.c: New test.\n\t* gcc.target/aarch64/acle/ls64_st64bv.c: New test.\n\t* gcc.target/aarch64/acle/ls64_st64bv-2.c: New test.\n\t* gcc.target/aarch64/acle/ls64_st64bv-3.c: New test.\n\t* gcc.target/aarch64/acle/ls64_st64bv0.c: New test.\n\t* gcc.target/aarch64/acle/ls64_st64bv0-2.c: New test.\n\t* gcc.target/aarch64/acle/ls64_st64bv0-3.c: New test.\n\t* gcc.target/aarch64/pragma_cpp_predefs_2.c: Add checks\n\tfor __ARM_FEATURE_LS64.", "tree": {"sha": "0af40dd3c44226d1a4e63b8dd60bff82cebfa3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0af40dd3c44226d1a4e63b8dd60bff82cebfa3cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/comments", "author": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dfb1bd94454ccae6d3c77799e209fab7711ed93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dfb1bd94454ccae6d3c77799e209fab7711ed93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dfb1bd94454ccae6d3c77799e209fab7711ed93"}], "stats": {"total": 545, "additions": 545, "deletions": 0}, "files": [{"sha": "0d09fe9dd6dd65c655f5bd0b9a622e7550b61a4b", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -49,6 +49,7 @@\n #include \"gimple-fold.h\"\n \n #define v8qi_UP  E_V8QImode\n+#define v8di_UP  E_V8DImode\n #define v4hi_UP  E_V4HImode\n #define v4hf_UP  E_V4HFmode\n #define v2si_UP  E_V2SImode\n@@ -607,6 +608,11 @@ enum aarch64_builtins\n   AARCH64_MEMTAG_BUILTIN_SET_TAG,\n   AARCH64_MEMTAG_BUILTIN_GET_TAG,\n   AARCH64_MEMTAG_BUILTIN_END,\n+  /* LS64 builtins.  */\n+  AARCH64_LS64_BUILTIN_LD64B,\n+  AARCH64_LS64_BUILTIN_ST64B,\n+  AARCH64_LS64_BUILTIN_ST64BV,\n+  AARCH64_LS64_BUILTIN_ST64BV0,\n   AARCH64_BUILTIN_MAX\n };\n \n@@ -1571,6 +1577,70 @@ aarch64_init_memtag_builtins (void)\n #undef AARCH64_INIT_MEMTAG_BUILTINS_DECL\n }\n \n+/* Add builtins for Load/store 64 Byte instructions.  */\n+\n+typedef struct\n+{\n+  const char *name;\n+  unsigned int code;\n+  tree type;\n+} ls64_builtins_data;\n+\n+static GTY(()) tree ls64_arm_data_t = NULL_TREE;\n+\n+static void\n+aarch64_init_ls64_builtins_types (void)\n+{\n+  /* Synthesize:\n+\n+     typedef struct {\n+       uint64_t val[8];\n+     } __arm_data512_t;  */\n+  const char *tuple_type_name = \"__arm_data512_t\";\n+  tree node_type = get_typenode_from_name (UINT64_TYPE);\n+  tree array_type = build_array_type_nelts (node_type, 8);\n+  SET_TYPE_MODE (array_type, V8DImode);\n+\n+  gcc_assert (TYPE_MODE_RAW (array_type) == TYPE_MODE (array_type));\n+  gcc_assert (TYPE_ALIGN (array_type) == 64);\n+\n+  tree field = build_decl (input_location, FIELD_DECL,\n+                           get_identifier (\"val\"), array_type);\n+\n+  ls64_arm_data_t = lang_hooks.types.simulate_record_decl (input_location,\n+                         tuple_type_name,\n+                         make_array_slice (&field, 1));\n+\n+  gcc_assert (TYPE_MODE (ls64_arm_data_t) == V8DImode);\n+  gcc_assert (TYPE_MODE_RAW (ls64_arm_data_t) == TYPE_MODE (ls64_arm_data_t));\n+  gcc_assert (TYPE_ALIGN (ls64_arm_data_t) == 64);\n+}\n+\n+static void\n+aarch64_init_ls64_builtins (void)\n+{\n+  aarch64_init_ls64_builtins_types ();\n+\n+  ls64_builtins_data data[4] = {\n+    {\"__builtin_aarch64_ld64b\", AARCH64_LS64_BUILTIN_LD64B,\n+     build_function_type_list (ls64_arm_data_t,\n+                               const_ptr_type_node, NULL_TREE)},\n+    {\"__builtin_aarch64_st64b\", AARCH64_LS64_BUILTIN_ST64B,\n+     build_function_type_list (void_type_node, ptr_type_node,\n+                               ls64_arm_data_t, NULL_TREE)},\n+    {\"__builtin_aarch64_st64bv\", AARCH64_LS64_BUILTIN_ST64BV,\n+     build_function_type_list (uint64_type_node, ptr_type_node,\n+                               ls64_arm_data_t, NULL_TREE)},\n+    {\"__builtin_aarch64_st64bv0\", AARCH64_LS64_BUILTIN_ST64BV0,\n+     build_function_type_list (uint64_type_node, ptr_type_node,\n+                               ls64_arm_data_t, NULL_TREE)},\n+  };\n+\n+  for (size_t i = 0; i < ARRAY_SIZE (data); ++i)\n+    aarch64_builtin_decls[data[i].code]\n+      = aarch64_general_add_builtin (data[i].name, data[i].type, data[i].code);\n+}\n+\n /* Initialize fpsr fpcr getters and setters.  */\n \n static void\n@@ -1660,6 +1730,9 @@ aarch64_general_init_builtins (void)\n \n   if (TARGET_MEMTAG)\n     aarch64_init_memtag_builtins ();\n+\n+  if (TARGET_LS64)\n+    aarch64_init_ls64_builtins ();\n }\n \n /* Implement TARGET_BUILTIN_DECL for the AARCH64_BUILTIN_GENERAL group.  */\n@@ -2130,6 +2203,57 @@ aarch64_expand_builtin_tme (int fcode, tree exp, rtx target)\n     return target;\n }\n \n+/* Function to expand an expression EXP which calls one of the Load/Store\n+   64 Byte extension (LS64) builtins FCODE with the result going to TARGET.  */\n+static rtx\n+aarch64_expand_builtin_ls64 (int fcode, tree exp, rtx target)\n+{\n+  expand_operand ops[3];\n+\n+  switch (fcode)\n+    {\n+    case AARCH64_LS64_BUILTIN_LD64B:\n+      {\n+        rtx op0 = expand_normal (CALL_EXPR_ARG (exp, 0));\n+        create_output_operand (&ops[0], target, V8DImode);\n+        create_input_operand (&ops[1], op0, DImode);\n+        expand_insn (CODE_FOR_ld64b, 2, ops);\n+        return ops[0].value;\n+      }\n+    case AARCH64_LS64_BUILTIN_ST64B:\n+      {\n+        rtx op0 = expand_normal (CALL_EXPR_ARG (exp, 0));\n+        rtx op1 = expand_normal (CALL_EXPR_ARG (exp, 1));\n+        create_output_operand (&ops[0], op0, DImode);\n+        create_input_operand (&ops[1], op1, V8DImode);\n+        expand_insn (CODE_FOR_st64b, 2, ops);\n+        return const0_rtx;\n+      }\n+    case AARCH64_LS64_BUILTIN_ST64BV:\n+      {\n+        rtx op0 = expand_normal (CALL_EXPR_ARG (exp, 0));\n+        rtx op1 = expand_normal (CALL_EXPR_ARG (exp, 1));\n+        create_output_operand (&ops[0], target, DImode);\n+        create_input_operand (&ops[1], op0, DImode);\n+        create_input_operand (&ops[2], op1, V8DImode);\n+        expand_insn (CODE_FOR_st64bv, 3, ops);\n+        return ops[0].value;\n+      }\n+    case AARCH64_LS64_BUILTIN_ST64BV0:\n+      {\n+        rtx op0 = expand_normal (CALL_EXPR_ARG (exp, 0));\n+        rtx op1 = expand_normal (CALL_EXPR_ARG (exp, 1));\n+        create_output_operand (&ops[0], target, DImode);\n+        create_input_operand (&ops[1], op0, DImode);\n+        create_input_operand (&ops[2], op1, V8DImode);\n+        expand_insn (CODE_FOR_st64bv0, 3, ops);\n+        return ops[0].value;\n+      }\n+    }\n+\n+  gcc_unreachable ();\n+}\n+\n /* Expand a random number builtin EXP with code FCODE, putting the result\n    int TARGET.  If IGNORE is true the return value is ignored.  */\n \n@@ -2388,6 +2512,12 @@ aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target,\n       || fcode == AARCH64_TME_BUILTIN_TCANCEL)\n     return aarch64_expand_builtin_tme (fcode, exp, target);\n \n+  if (fcode == AARCH64_LS64_BUILTIN_LD64B\n+      || fcode == AARCH64_LS64_BUILTIN_ST64B\n+      || fcode == AARCH64_LS64_BUILTIN_ST64BV\n+      || fcode == AARCH64_LS64_BUILTIN_ST64BV0)\n+    return aarch64_expand_builtin_ls64 (fcode, exp, target);\n+\n   if (fcode >= AARCH64_MEMTAG_BUILTIN_START\n       && fcode <= AARCH64_MEMTAG_BUILTIN_END)\n     return aarch64_expand_builtin_memtag (fcode, exp, target);"}, {"sha": "3af3e5c96daf674648dbc008b15ade0e303b66f8", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -200,6 +200,8 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n \t\t\t\"__ARM_FEATURE_BF16_VECTOR_ARITHMETIC\", pfile);\n   aarch64_def_or_undef (TARGET_BF16_FP,\n \t\t\t\"__ARM_FEATURE_BF16_SCALAR_ARITHMETIC\", pfile);\n+  aarch64_def_or_undef (TARGET_LS64,\n+\t\t\t\"__ARM_FEATURE_LS64\", pfile);\n \n   /* Not for ACLE, but required to keep \"float.h\" correct if we switch\n      target between implementations that do or do not support ARMv8.2-A"}, {"sha": "9ebf795a624f0183e0333349d0db7a71ba2d17dd", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -7123,6 +7123,15 @@\n     }\n })\n \n+(define_expand \"movv8di\"\n+  [(set (match_operand:V8DI 0 \"nonimmediate_operand\")\n+\t(match_operand:V8DI 1 \"general_operand\"))]\n+  \"TARGET_SIMD\"\n+{\n+  if (can_create_pseudo_p () && MEM_P (operands[0]))\n+    operands[1] = force_reg (V8DImode, operands[1]);\n+})\n+\n (define_expand \"aarch64_ld1x3<vstruct_elt>\"\n   [(match_operand:VSTRUCT_3QD 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")]\n@@ -7253,6 +7262,17 @@\n    (set_attr \"length\" \"<insn_count>,4,4\")]\n )\n \n+(define_insn \"*aarch64_movv8di\"\n+  [(set (match_operand:V8DI 0 \"nonimmediate_operand\" \"=r,m,r\")\n+\t(match_operand:V8DI 1 \"general_operand\" \" r,r,m\"))]\n+  \"!BYTES_BIG_ENDIAN\n+   && (register_operand (operands[0], V8DImode)\n+       || register_operand (operands[1], V8DImode))\"\n+  \"#\"\n+  [(set_attr \"type\" \"multiple,multiple,multiple\")\n+   (set_attr \"length\" \"32,16,16\")]\n+)\n+\n (define_insn \"aarch64_be_ld1<mode>\"\n   [(set (match_operand:VALLDI_F16 0\t\"register_operand\" \"=w\")\n \t(unspec:VALLDI_F16 [(match_operand:VALLDI_F16 1\n@@ -7496,6 +7516,34 @@\n     FAIL;\n })\n \n+(define_split\n+  [(set (match_operand:V8DI 0 \"nonimmediate_operand\")\n+        (match_operand:V8DI 1 \"general_operand\"))]\n+  \"TARGET_SIMD && reload_completed\"\n+  [(const_int 0)]\n+{\n+  if (register_operand (operands[0], V8DImode)\n+      && register_operand (operands[1], V8DImode))\n+    {\n+      aarch64_simd_emit_reg_reg_move (operands, DImode, 8);\n+      DONE;\n+    }\n+  else if ((register_operand (operands[0], V8DImode)\n+            && memory_operand (operands[1], V8DImode))\n+           || (memory_operand (operands[0], V8DImode)\n+            && register_operand (operands[1], V8DImode)))\n+    {\n+      for (int offset = 0; offset < 64; offset += 16)\n+        emit_move_insn (simplify_gen_subreg (TImode, operands[0],\n+                                             V8DImode, offset),\n+                        simplify_gen_subreg (TImode, operands[1],\n+                                             V8DImode, offset));\n+      DONE;\n+    }\n+  else\n+    FAIL;\n+})\n+\n (define_expand \"aarch64_ld<nregs>r<vstruct_elt>\"\n   [(match_operand:VSTRUCT_QD 0 \"register_operand\")\n    (match_operand:DI 1 \"register_operand\")]"}, {"sha": "f07330cff4f4671fb9fbce0928fe3d4074e32f17", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -10016,6 +10016,10 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t\t    && (aarch64_offset_9bit_signed_unscaled_p (mode, offset)\n \t\t\t|| offset_12bit_unsigned_scaled_p (mode, offset)));\n \n+\t  if (mode == V8DImode)\n+\t    return (aarch64_offset_7bit_signed_scaled_p (DImode, offset)\n+\t            && aarch64_offset_7bit_signed_scaled_p (DImode, offset + 48));\n+\n \t  /* A 7bit offset check because OImode will emit a ldp/stp\n \t     instruction (only big endian will get here).\n \t     For ldp/stp instructions, the offset is scaled for the size of a"}, {"sha": "fb2d2eda880ac25219256a833703818e2806bf07", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -319,6 +319,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_PAUTH\t   (aarch64_isa_flags & AARCH64_FL_PAUTH)\n #define AARCH64_ISA_V9\t\t   (aarch64_isa_flags & AARCH64_FL_V9)\n #define AARCH64_ISA_MOPS\t   (aarch64_isa_flags & AARCH64_FL_MOPS)\n+#define AARCH64_ISA_LS64\t   (aarch64_isa_flags & AARCH64_FL_LS64)\n \n /* Crypto is an optional extension to AdvSIMD.  */\n #define TARGET_CRYPTO (TARGET_SIMD && AARCH64_ISA_CRYPTO)\n@@ -413,6 +414,9 @@ extern unsigned aarch64_architecture_version;\n /* MOPS instructions are enabled through +mops.  */\n #define TARGET_MOPS (AARCH64_ISA_MOPS)\n \n+/* LS64 instructions are enabled through +ls64.  */\n+#define TARGET_LS64 (AARCH64_ISA_LS64)\n+\n /* Make sure this is always defined so we don't have to check for ifdefs\n    but rather use normal ifs.  */\n #ifndef TARGET_FIX_ERR_A53_835769_DEFAULT"}, {"sha": "dcdffc89e5076e0dc713f97e902fc2d5d37e6ad6", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -188,6 +188,12 @@\n     UNSPEC_LD2_LANE\n     UNSPEC_LD3_LANE\n     UNSPEC_LD4_LANE\n+    UNSPEC_LD64B\n+    UNSPEC_ST64B\n+    UNSPEC_ST64BV\n+    UNSPEC_ST64BV_RET\n+    UNSPEC_ST64BV0\n+    UNSPEC_ST64BV0_RET\n     UNSPEC_MB\n     UNSPEC_MOVMEM\n     UNSPEC_NOP\n@@ -7571,6 +7577,52 @@\n   [(set_attr \"type\" \"memtag\")]\n )\n \n+;; Load/Store 64-bit (LS64) instructions.\n+(define_insn \"ld64b\"\n+  [(set (match_operand:V8DI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:V8DI\n+          [(mem:V8DI (match_operand:DI 1 \"register_operand\" \"r\"))]\n+            UNSPEC_LD64B)\n+  )]\n+  \"TARGET_LS64\"\n+  \"ld64b\\\\t%0, [%1]\"\n+  [(set_attr \"type\" \"ls64\")]\n+)\n+\n+(define_insn \"st64b\"\n+  [(set (mem:V8DI (match_operand:DI 0 \"register_operand\" \"=r\"))\n+        (unspec_volatile:V8DI [(match_operand:V8DI 1 \"register_operand\" \"r\")]\n+            UNSPEC_ST64B)\n+  )]\n+  \"TARGET_LS64\"\n+  \"st64b\\\\t%1, [%0]\"\n+  [(set_attr \"type\" \"ls64\")]\n+)\n+\n+(define_insn \"st64bv\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:DI [(const_int 0)] UNSPEC_ST64BV_RET))\n+   (set (mem:V8DI (match_operand:DI 1 \"register_operand\" \"r\"))\n+        (unspec_volatile:V8DI [(match_operand:V8DI 2 \"register_operand\" \"r\")]\n+            UNSPEC_ST64BV)\n+  )]\n+  \"TARGET_LS64\"\n+  \"st64bv\\\\t%0, %2, [%1]\"\n+  [(set_attr \"type\" \"ls64\")]\n+)\n+\n+(define_insn \"st64bv0\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec_volatile:DI [(const_int 0)] UNSPEC_ST64BV0_RET))\n+   (set (mem:V8DI (match_operand:DI 1 \"register_operand\" \"r\"))\n+        (unspec_volatile:V8DI [(match_operand:V8DI 2 \"register_operand\" \"r\")]\n+            UNSPEC_ST64BV0)\n+  )]\n+  \"TARGET_LS64\"\n+  \"st64bv0\\\\t%0, %2, [%1]\"\n+  [(set_attr \"type\" \"ls64\")]\n+)\n+\n ;; AdvSIMD Stuff\n (include \"aarch64-simd.md\")\n "}, {"sha": "030e343490f14e3e7e394e63bb4ab6df13cda177", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -214,6 +214,43 @@ __ttest (void)\n #pragma GCC pop_options\n #endif\n \n+#ifdef __ARM_FEATURE_LS64\n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+ls64\")\n+\n+typedef __arm_data512_t data512_t;\n+\n+__extension__ extern __inline data512_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_ld64b (const void *__addr)\n+{\n+  return __builtin_aarch64_ld64b (__addr);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_st64b (void *__addr, data512_t __value)\n+{\n+  __builtin_aarch64_st64b (__addr, __value);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_st64bv (void *__addr, data512_t __value)\n+{\n+  return __builtin_aarch64_st64bv (__addr, __value);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_st64bv0 (void *__addr, data512_t __value)\n+{\n+  return __builtin_aarch64_st64bv0 (__addr, __value);\n+}\n+\n+#pragma GCC pop_options\n+#endif\n+\n #pragma GCC push_options\n #pragma GCC target (\"+nothing+rng\")\n __extension__ extern __inline int"}, {"sha": "6dce71fd27e5dfbd08746509bc6fdeeade69a4a4", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -1122,6 +1122,7 @@\n   coproc,\\\n   tme,\\\n   memtag,\\\n+  ls64,\\\n   mve_move,\\\n   mve_store,\\\n   mve_load\""}, {"sha": "ba9960c9a3c40bb980342b58c11e44455696a75a", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_asm.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_asm.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+/* Inline assembly for LS64 instructions.  */\n+\n+#include <arm_acle.h>\n+\n+void\n+ls64_load (data512_t *output, const void *addr)\n+{\n+    __asm__ volatile (\"ld64b %0, [%1]\"\n+                      : \"=r\" (*output)\n+                      : \"r\" (addr)\n+                      : \"memory\");\n+}\n+\n+/* { dg-final { scan-assembler-times {ld64b } 1 } } */\n+\n+void\n+ls64_store (const data512_t *input, void *addr)\n+{\n+    __asm__ volatile (\"st64b %1, [%0]\"\n+                      : /* No outputs.  */\n+                      : \"r\" (addr), \"r\" (*input)\n+                      : \"memory\");\n+}\n+\n+/* { dg-final { scan-assembler-times {st64b } 1 } } */\n+\n+uint64_t\n+ls64_store_v (const data512_t *input, void *addr)\n+{\n+    uint64_t status;\n+    __asm__ volatile (\"st64bv %0, %2, [%1]\"\n+                      : \"=r\" (status)\n+                      : \"r\" (addr), \"r\" (*input)\n+                      : \"memory\");\n+    return status;\n+}\n+\n+/* { dg-final { scan-assembler-times {st64bv } 1 } } */\n+\n+uint64_t\n+ls64_store_v0 (const data512_t *input, void *addr)\n+{\n+    uint64_t status;\n+    __asm__ volatile (\"st64bv0 %0, %2, [%1]\"\n+                      : \"=r\" (status)\n+                      : \"r\" (addr), \"r\" (*input)\n+                      : \"memory\");\n+    return status;\n+}\n+\n+/* { dg-final { scan-assembler-times {st64bv0 } 1 } } */"}, {"sha": "2a94657a31afada0eb60252bbd3c9f3d43b8c879", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_ld64b-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b-2.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+void\n+func (const void * addr) {\n+    data512_t ret = __arm_ld64b (addr);\n+}\n+\n+/* { dg-final { scan-assembler-times {ld64b\\t} 1 } } */"}, {"sha": "155ea401f23870e023866e3a92f75da66f4fa9fc", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_ld64b-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b-3.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+void\n+func(const void * addr, data512_t *data) {\n+  *data = __arm_ld64b (addr);\n+}\n+\n+/* { dg-final { scan-assembler-times {ld64b\\t} 1 } } */"}, {"sha": "e3fc1411221e9a58051fa2147f8a744733e6c233", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_ld64b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld64b.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+data512_t\n+func(const void * addr) {\n+  return __arm_ld64b (addr);\n+}\n+\n+/* { dg-final { scan-assembler-times {ld64b\\t} 1 } } */"}, {"sha": "550d75c8e0b4f4168b609c6c16554470ea7fc8c5", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_ld_st_o0.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld_st_o0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld_st_o0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_ld_st_o0.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O0\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+/* Make sure no issues when compile with -O0.  */\n+\n+data512_t\n+func1 (const void * addr) {\n+  return __arm_ld64b (addr);\n+}\n+\n+void\n+func2 (void *addr, data512_t value) {\n+    __arm_st64b (addr, value);\n+}\n+\n+uint64_t\n+func3 (void *addr, data512_t value) {\n+    return  __arm_st64bv (addr, value);\n+}\n+\n+uint64_t\n+func4 (void *addr, data512_t value) {\n+    return __arm_st64bv0 (addr, value);\n+}"}, {"sha": "bfd737b86c6fcaa1ef57f86afcfec1bdbf4f7422", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_st64b-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64b-2.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+void\n+func(void *addr, data512_t *value) {\n+    __arm_st64b (addr, *value);\n+}\n+\n+/* { dg-final { scan-assembler-times {st64b\\t} 1 } } */"}, {"sha": "75b91803eefb5024ca1bb0f5c62dd1381aeb5fdc", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_st64b.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64b.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+void\n+func(void *addr, data512_t value) {\n+    __arm_st64b (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler-times {st64b\\t} 1 } } */"}, {"sha": "c3ef83e57eb8d710425da48c48b9328d52ecc9bd", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_st64bv-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv-2.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+void\n+func(void *addr, data512_t value) {\n+    __arm_st64bv (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler-times {st64bv\\t} 1 } } */"}, {"sha": "370db7960ec907a722c9e676494a0ee46e0b7d25", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_st64bv-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv-3.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+void\n+func(void *addr, data512_t *value) {\n+    __arm_st64bv (addr, *value);\n+}\n+\n+/* { dg-final { scan-assembler-times {st64bv\\t} 1 } } */"}, {"sha": "52ef9c4593109c2547ff5f0d86379b04b2f4cd40", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_st64bv.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+uint64_t\n+func(void *addr, data512_t value) {\n+    return  __arm_st64bv (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler-times {st64bv\\t} 1 } } */"}, {"sha": "c49fa56d94075aa252a3299c80eeb8adac41f699", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_st64bv0-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0-2.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+void\n+func(void *addr, data512_t value) {\n+    __arm_st64bv0 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler-times {st64bv0\\t} 1 } } */"}, {"sha": "af6917c795f8b96b1090eca7f06bdf5caaf16ed4", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_st64bv0-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0-3.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+void\n+func(void *addr, data512_t *value) {\n+    __arm_st64bv0 (addr, *value);\n+}\n+\n+/* { dg-final { scan-assembler-times {st64bv0\\t} 1 } } */"}, {"sha": "bce10ae3653b7f6cd366c94a2b8dfa71fdfaca70", "filename": "gcc/testsuite/gcc.target/aarch64/acle/ls64_st64bv0.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fls64_st64bv0.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+ls64 -O2\" } */\n+\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+\n+#include <arm_acle.h>\n+\n+uint64_t\n+func(void *addr, data512_t value) {\n+    return __arm_st64bv0 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler-times {st64bv0\\t} 1 } } */"}, {"sha": "2d76bfc23dfdcd78a74ec0e4845a3bd8d110b010", "filename": "gcc/testsuite/gcc.target/aarch64/pragma_cpp_predefs_2.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpragma_cpp_predefs_2.c?ref=fdcddba8f29ea3878851b8b4cd37d0fd3476d3bf", "patch": "@@ -240,6 +240,20 @@\n #endif\n #pragma GCC pop_options\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.7-a\")\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+#pragma GCC pop_options\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.7-a+ls64\")\n+#ifndef __ARM_FEATURE_LS64\n+#error \"__ARM_FEATURE_LS64 is not defined but should be!\"\n+#endif\n+#pragma GCC pop_options\n+\n #pragma GCC pop_options\n \n int"}]}