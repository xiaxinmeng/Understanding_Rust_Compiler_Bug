{"sha": "d9ebff44bb8217b3982c987072ab5a76c6de74e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDllYmZmNDRiYjgyMTdiMzk4MmM5ODcwNzJhYjVhNzZjNmRlNzRlOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-08T20:32:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-01-08T20:32:42Z"}, "message": "cmd/go: Use builtin constant to set default gccgo compiler.\n\nDon't look it up on PATH.  This lets a go tool built as part\nof a GCC build use the gccgo from the same build.\n\nAlso pass -c when assembling a .s file with gccgo.\n\nFrom-SVN: r219358", "tree": {"sha": "ce3a189724c5fe8847bd8ce6759a74d69e9a4ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce3a189724c5fe8847bd8ce6759a74d69e9a4ec2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9ebff44bb8217b3982c987072ab5a76c6de74e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ebff44bb8217b3982c987072ab5a76c6de74e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ebff44bb8217b3982c987072ab5a76c6de74e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ebff44bb8217b3982c987072ab5a76c6de74e9/comments", "author": null, "committer": null, "parents": [{"sha": "eb4c16eb849c4c06009186a4df409186d46f5e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb4c16eb849c4c06009186a4df409186d46f5e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb4c16eb849c4c06009186a4df409186d46f5e8d"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "8de7627611844f4620bbb08bc6c726d1bfa6f8bf", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ebff44bb8217b3982c987072ab5a76c6de74e9/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ebff44bb8217b3982c987072ab5a76c6de74e9/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=d9ebff44bb8217b3982c987072ab5a76c6de74e9", "patch": "@@ -131,7 +131,7 @@ var buildLdflags []string    // -ldflags flag\n var buildGccgoflags []string // -gccgoflags flag\n var buildRace bool           // -race flag\n \n-var reqPkgSrc bool           // req src for Imports\n+var reqPkgSrc bool // req src for Imports\n var buildContext = build.Default\n var buildToolchain toolchain = noToolchain{}\n \n@@ -1783,17 +1783,18 @@ func (gcToolchain) cc(b *builder, p *Package, objdir, ofile, cfile string) error\n // The Gccgo toolchain.\n type gccgoToolchain struct{}\n \n-var gccgoBin, _ = exec.LookPath(\"gccgo\")\n-\n func (gccgoToolchain) compiler() string {\n-\treturn gccgoBin\n+\tif v := os.Getenv(\"GOC\"); v != \"\" {\n+\t\treturn v\n+\t}\n+\treturn defaultGOC\n }\n \n-func (gccgoToolchain) linker() string {\n-\treturn gccgoBin\n+func (tools gccgoToolchain) linker() string {\n+\treturn tools.compiler()\n }\n \n-func (gccgoToolchain) gc(b *builder, p *Package, archive, obj string, importArgs []string, gofiles []string) (ofile string, output []byte, err error) {\n+func (tools gccgoToolchain) gc(b *builder, p *Package, archive, obj string, importArgs []string, gofiles []string) (ofile string, output []byte, err error) {\n \tout := p.Name + \".o\"\n \tofile = obj + out\n \tgcargs := []string{\"-g\"}\n@@ -1804,7 +1805,7 @@ func (gccgoToolchain) gc(b *builder, p *Package, archive, obj string, importArgs\n \tif p.localPrefix != \"\" {\n \t\tgcargs = append(gcargs, \"-fgo-relative-import-path=\"+p.localPrefix)\n \t}\n-\targs := stringList(\"gccgo\", importArgs, \"-c\", gcargs, \"-o\", ofile, buildGccgoflags)\n+\targs := stringList(tools.compiler(), importArgs, \"-c\", gcargs, \"-o\", ofile, buildGccgoflags)\n \tfor _, f := range gofiles {\n \t\targs = append(args, mkAbs(p.Dir, f))\n \t}\n@@ -1813,14 +1814,14 @@ func (gccgoToolchain) gc(b *builder, p *Package, archive, obj string, importArgs\n \treturn ofile, output, err\n }\n \n-func (gccgoToolchain) asm(b *builder, p *Package, obj, ofile, sfile string) error {\n+func (tools gccgoToolchain) asm(b *builder, p *Package, obj, ofile, sfile string) error {\n \tsfile = mkAbs(p.Dir, sfile)\n \tdefs := []string{\"-D\", \"GOOS_\" + goos, \"-D\", \"GOARCH_\" + goarch}\n \tif pkgpath := gccgoCleanPkgpath(p); pkgpath != \"\" {\n \t\tdefs = append(defs, `-D`, `GOPKGPATH=\"`+pkgpath+`\"`)\n \t}\n \tdefs = append(defs, b.gccArchArgs()...)\n-\treturn b.run(p.Dir, p.ImportPath, nil, \"gccgo\", \"-I\", obj, \"-o\", ofile, defs, sfile)\n+\treturn b.run(p.Dir, p.ImportPath, nil, tools.compiler(), \"-c\", \"-I\", obj, \"-o\", ofile, defs, sfile)\n }\n \n func (gccgoToolchain) pkgpath(basedir string, p *Package) string {\n@@ -1897,7 +1898,7 @@ func (tools gccgoToolchain) ld(b *builder, p *Package, out string, allactions []\n \tif objc {\n \t\tldflags = append(ldflags, \"-lobjc\")\n \t}\n-\treturn b.run(\".\", p.ImportPath, nil, \"gccgo\", \"-o\", out, ofiles, \"-Wl,-(\", ldflags, \"-Wl,-)\", buildGccgoflags)\n+\treturn b.run(\".\", p.ImportPath, nil, tools.linker(), \"-o\", out, ofiles, \"-Wl,-(\", ldflags, \"-Wl,-)\", buildGccgoflags)\n }\n \n func (gccgoToolchain) cc(b *builder, p *Package, objdir, ofile, cfile string) error {"}]}