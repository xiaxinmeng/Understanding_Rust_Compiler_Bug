{"sha": "427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI3YTczODRiOWRhMmNjOTk3N2ZhMWIxYmRhZGEwNmE4ZjRhMjI0MA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-05-10T10:06:00Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-05-10T10:06:00Z"}, "message": "rs6000: Remove -maltivec={be,le}\n\nThis removes the -maltivec=be and -maltivec=le options.  Those were\ndeprecated in GCC 8.\n\nAltivec will keep working on both BE and LE; it is just the BE-vectors-\non-LE that is removed (the other way around was never supported).\n\nThe main change is replacing VECTOR_ELT_ORDER_BIG by BYTES_BIG_ENDIAN\n(and then simplifying).\n\n\n\t* config/rs6000/altivec.md (altivec_vmrghb, altivec_vmrghh,\n\taltivec_vmrghw, altivec_vmrglb, altivec_vmrglh, altivec_vmrglw): Remove\n\t-maltivec=be support.\n\t(vec_widen_umult_even_v16qi, vec_widen_smult_even_v16qi,\n\tvec_widen_umult_even_v8hi, vec_widen_smult_even_v8hi,\n\tvec_widen_umult_even_v4si, vec_widen_smult_even_v4si,\n\tvec_widen_umult_odd_v16qi, vec_widen_smult_odd_v16qi,\n\tvec_widen_umult_odd_v8hi, vec_widen_smult_odd_v8hi,\n\tvec_widen_umult_odd_v4si, vec_widen_smult_odd_v4si, altivec_vpkpx,\n\taltivec_vpks<VI_char>ss, altivec_vpks<VI_char>us,\n\taltivec_vpku<VI_char>us, altivec_vpku<VI_char>um, altivec_vsum2sws,\n\taltivec_vsumsws): Adjust.\n\t(altivec_vspltb *altivec_vspltb_internal, altivec_vsplth,\n\t*altivec_vsplth_internal, altivec_vspltw, *altivec_vspltw_internal,\n\taltivec_vspltsf, *altivec_vspltsf_internal): Remove -maltivec=be\n\tsupport.\n\t(altivec_vperm_<mode>, altivec_vperm_<mode>_uns,\n\taltivec_vupkhs<VU_char>, altivec_vupkls<VU_char>, altivec_vupkhpx,\n\taltivec_vupklpx, altivec_lvsl, altivec_lvsr): Adjust.\n\t(altivec_lve<VI_char>x): Delete expand.\n\t(*altivec_lve<VI_char>x_internal): Rename to...\n\t(altivec_lve<VI_char>x): ... this.\n\t(altivec_lvxl_<mode>): Delete expand.\n\t(*altivec_lvxl_<mode>_internal): Rename to ...\n\t(altivec_lvxl_<mode>): ... this.\n\t(altivec_stvxl_<mode>): Delete expand.\n\t(*altivec_stvxl_<mode>_internal): Rename to ...\n\t(altivec_stvxl_<mode>): ... this.\n\t(altivec_stve<VI_char>x): Delete expand.\n\t(*altivec_stve<VI_char>x_internal): Rename to ...\n\t(altivec_stve<VI_char>x): ... this.\n\t(doublee<mode>2, unsdoubleev4si2, doubleo<mode>2, unsdoubleov4si2,\n\tdoubleh<mode>2, unsdoublehv4si2, doublel<mode>2, unsdoublelv4si2,\n\treduc_plus_scal_<mode>): Adjust.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Adjust\n\tcomment.\n\t(rs6000_cpu_cpp_builtins): Adjust.\n\t(altivec_resolve_overloaded_builtin): Remove -maltivec=be support.\n\t* config/rs6000/rs6000-protos.h (altivec_expand_lvx_be,\n\taltivec_expand_stvx_be, altivec_expand_stvex_be): Delete.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Remove\n\t-maltivec=be support.\n\t(rs6000_split_vec_extract_var): Adjust.\n\t(rs6000_split_v4si_init): Adjust.\n\t(swap_selector_for_mode): Delete.\n\t(altivec_expand_lvx_be, altivec_expand_stvx_be,\n\taltivec_expand_stvex_be): Delete.\n\t(altivec_expand_lv_builtin, altivec_expand_stv_builtin): Remove\n\t-maltivec=be support.\n\t(rs6000_gimple_fold_builtin): Ditto.\n\t(rs6000_generate_float2_double_code, rs6000_generate_float2_code):\n\tAdjust.\n\t* config/rs6000/rs6000.h (VECTOR_ELT_ORDER_BIG): Delete.\n\t(TARGET_DIRECT_MOVE_64BIT): Adjust.\n\t* config/rs6000/rs6000.md (split for extendsidi2 for vectors): Adjust.\n\t* config/rs6000/rs6000.opt (maltivec=le, maltivec=be): Delete.\n\t* config/rs6000/vsx.md (floate<mode>, unsfloatev2di, floato<mode>,\n\tunsfloatov2di, vsignedo_v2df, vsignede_v2df, vunsignedo_v2df,\n\tvunsignede_v2df, vsx_extract_<mode>_p9, *vsx_extract_si,\n\t*vsx_extract_<mode>_p8, *vsx_extract_si_<uns>float_df,\n\t*vsx_extract_si_<uns>float_<mode>, vsx_set_<mode>_p9, vsx_set_v4sf_p9,\n\t*vsx_insert_extract_v4sf_p9, *vsx_insert_extract_v4sf_p9_2, and an\n\tanonymous split): Adjust.\n\t(vsx_mergel_<mode>, vsx_mergeh_<mode>): Remove -maltivec=be support.\n\t(vsx_xxspltd_<mode>, extract4b, insert4b): Adjust.\n\ngcc/testsuite/\n\t* gcc.dg/vmx/extract-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/extract-vsx-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/insert-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/insert-vsx-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/ld-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/ld-vsx-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/lde-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/ldl-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/ldl-vsx-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/merge-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/merge-vsx-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/mult-even-odd-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/pack-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/perm-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/splat-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/splat-vsx-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/st-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/st-vsx-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/ste-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/stl-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/stl-vsx-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/sum2s-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/unpack-be-order.c: Delete testcase.\n\t* gcc.dg/vmx/vsums-be-order.c: Delete testcase.\n\t* gcc.target/powerpc/vec-setup-be-double.c: Delete testcase.\n\t* gcc.target/powerpc/vec-setup-be-long.c: Delete testcase.\n\t* gcc.target/powerpc/vec-setup.h: Remove -maltivec=be support.\n\nFrom-SVN: r260109", "tree": {"sha": "5633403d9fe098812ebb72af0f9887b83e0d360b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5633403d9fe098812ebb72af0f9887b83e0d360b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209"}], "stats": {"total": 2282, "additions": 210, "deletions": 2072}, "files": [{"sha": "0bb6bd2d49a09f80255b0c8292c7fe0cd8038b32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -1,3 +1,71 @@\n+2018-05-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/altivec.md (altivec_vmrghb, altivec_vmrghh,\n+\taltivec_vmrghw, altivec_vmrglb, altivec_vmrglh, altivec_vmrglw): Remove\n+\t-maltivec=be support.\n+\t(vec_widen_umult_even_v16qi, vec_widen_smult_even_v16qi,\n+\tvec_widen_umult_even_v8hi, vec_widen_smult_even_v8hi,\n+\tvec_widen_umult_even_v4si, vec_widen_smult_even_v4si,\n+\tvec_widen_umult_odd_v16qi, vec_widen_smult_odd_v16qi,\n+\tvec_widen_umult_odd_v8hi, vec_widen_smult_odd_v8hi,\n+\tvec_widen_umult_odd_v4si, vec_widen_smult_odd_v4si, altivec_vpkpx,\n+\taltivec_vpks<VI_char>ss, altivec_vpks<VI_char>us,\n+\taltivec_vpku<VI_char>us, altivec_vpku<VI_char>um, altivec_vsum2sws,\n+\taltivec_vsumsws): Adjust.\n+\t(altivec_vspltb *altivec_vspltb_internal, altivec_vsplth,\n+\t*altivec_vsplth_internal, altivec_vspltw, *altivec_vspltw_internal,\n+\taltivec_vspltsf, *altivec_vspltsf_internal): Remove -maltivec=be\n+\tsupport.\n+\t(altivec_vperm_<mode>, altivec_vperm_<mode>_uns,\n+\taltivec_vupkhs<VU_char>, altivec_vupkls<VU_char>, altivec_vupkhpx,\n+\taltivec_vupklpx, altivec_lvsl, altivec_lvsr): Adjust.\n+\t(altivec_lve<VI_char>x): Delete expand.\n+\t(*altivec_lve<VI_char>x_internal): Rename to...\n+\t(altivec_lve<VI_char>x): ... this.\n+\t(altivec_lvxl_<mode>): Delete expand.\n+\t(*altivec_lvxl_<mode>_internal): Rename to ...\n+\t(altivec_lvxl_<mode>): ... this.\n+\t(altivec_stvxl_<mode>): Delete expand.\n+\t(*altivec_stvxl_<mode>_internal): Rename to ...\n+\t(altivec_stvxl_<mode>): ... this.\n+\t(altivec_stve<VI_char>x): Delete expand.\n+\t(*altivec_stve<VI_char>x_internal): Rename to ...\n+\t(altivec_stve<VI_char>x): ... this.\n+\t(doublee<mode>2, unsdoubleev4si2, doubleo<mode>2, unsdoubleov4si2,\n+\tdoubleh<mode>2, unsdoublehv4si2, doublel<mode>2, unsdoublelv4si2,\n+\treduc_plus_scal_<mode>): Adjust.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Adjust\n+\tcomment.\n+\t(rs6000_cpu_cpp_builtins): Adjust.\n+\t(altivec_resolve_overloaded_builtin): Remove -maltivec=be support.\n+\t* config/rs6000/rs6000-protos.h (altivec_expand_lvx_be,\n+\taltivec_expand_stvx_be, altivec_expand_stvex_be): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Remove\n+\t-maltivec=be support.\n+\t(rs6000_split_vec_extract_var): Adjust.\n+\t(rs6000_split_v4si_init): Adjust.\n+\t(swap_selector_for_mode): Delete.\n+\t(altivec_expand_lvx_be, altivec_expand_stvx_be,\n+\taltivec_expand_stvex_be): Delete.\n+\t(altivec_expand_lv_builtin, altivec_expand_stv_builtin): Remove\n+\t-maltivec=be support.\n+\t(rs6000_gimple_fold_builtin): Ditto.\n+\t(rs6000_generate_float2_double_code, rs6000_generate_float2_code):\n+\tAdjust.\n+\t* config/rs6000/rs6000.h (VECTOR_ELT_ORDER_BIG): Delete.\n+\t(TARGET_DIRECT_MOVE_64BIT): Adjust.\n+\t* config/rs6000/rs6000.md (split for extendsidi2 for vectors): Adjust.\n+\t* config/rs6000/rs6000.opt (maltivec=le, maltivec=be): Delete.\n+\t* config/rs6000/vsx.md (floate<mode>, unsfloatev2di, floato<mode>,\n+\tunsfloatov2di, vsignedo_v2df, vsignede_v2df, vunsignedo_v2df,\n+\tvunsignede_v2df, vsx_extract_<mode>_p9, *vsx_extract_si,\n+\t*vsx_extract_<mode>_p8, *vsx_extract_si_<uns>float_df,\n+\t*vsx_extract_si_<uns>float_<mode>, vsx_set_<mode>_p9, vsx_set_v4sf_p9,\n+\t*vsx_insert_extract_v4sf_p9, *vsx_insert_extract_v4sf_p9_2, and an\n+\tanonymous split): Adjust.\n+\t(vsx_mergel_<mode>, vsx_mergeh_<mode>): Remove -maltivec=be support.\n+\t(vsx_xxspltd_<mode>, extract4b, insert4b): Adjust.\n+\n 2018-05-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* configure.ac (gcc_gxx_include_dir_add_sysroot): Set it to 1 only"}, {"sha": "8ee42ae6517c47d7f47291da81b4848c4a0249b7", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 64, "deletions": 243, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -945,27 +945,11 @@\n    (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v;\n-  rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      v = gen_rtvec (16, GEN_INT (8), GEN_INT (24), GEN_INT (9), GEN_INT (25),\n-                     GEN_INT (10), GEN_INT (26), GEN_INT (11), GEN_INT (27),\n-\t\t     GEN_INT (12), GEN_INT (28), GEN_INT (13), GEN_INT (29),\n-\t\t     GEN_INT (14), GEN_INT (30), GEN_INT (15), GEN_INT (31));\n-      x = gen_rtx_VEC_CONCAT (V32QImode, operands[2], operands[1]);\n-    }\n-  else\n-    {\n-      v = gen_rtvec (16, GEN_INT (0), GEN_INT (16), GEN_INT (1), GEN_INT (17),\n-                     GEN_INT (2), GEN_INT (18), GEN_INT (3), GEN_INT (19),\n-\t\t     GEN_INT (4), GEN_INT (20), GEN_INT (5), GEN_INT (21),\n-\t\t     GEN_INT (6), GEN_INT (22), GEN_INT (7), GEN_INT (23));\n-      x = gen_rtx_VEC_CONCAT (V32QImode, operands[1], operands[2]);\n-    }\n-\n+  rtvec v = gen_rtvec (16, GEN_INT (0), GEN_INT (16), GEN_INT (1), GEN_INT (17),\n+\t\t       GEN_INT (2), GEN_INT (18), GEN_INT (3), GEN_INT (19),\n+\t\t       GEN_INT (4), GEN_INT (20), GEN_INT (5), GEN_INT (21),\n+\t\t       GEN_INT (6), GEN_INT (22), GEN_INT (7), GEN_INT (23));\n+  rtx x = gen_rtx_VEC_CONCAT (V32QImode, operands[1], operands[2]);\n   x = gen_rtx_VEC_SELECT (V16QImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n   emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n@@ -1009,22 +993,9 @@\n    (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v;\n-  rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      v = gen_rtvec (8, GEN_INT (4), GEN_INT (12), GEN_INT (5), GEN_INT (13),\n-                     GEN_INT (6), GEN_INT (14), GEN_INT (7), GEN_INT (15));\n-      x = gen_rtx_VEC_CONCAT (V16HImode, operands[2], operands[1]);\n-    }\n-  else\n-    {\n-      v = gen_rtvec (8, GEN_INT (0), GEN_INT (8), GEN_INT (1), GEN_INT (9),\n-                     GEN_INT (2), GEN_INT (10), GEN_INT (3), GEN_INT (11));\n-      x = gen_rtx_VEC_CONCAT (V16HImode, operands[1], operands[2]);\n-    }\n+  rtvec v = gen_rtvec (8, GEN_INT (0), GEN_INT (8), GEN_INT (1), GEN_INT (9),\n+\t\t       GEN_INT (2), GEN_INT (10), GEN_INT (3), GEN_INT (11));\n+  rtx x = gen_rtx_VEC_CONCAT (V16HImode, operands[1], operands[2]);\n \n   x = gen_rtx_VEC_SELECT (V8HImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n   emit_insn (gen_rtx_SET (operands[0], x));\n@@ -1065,21 +1036,8 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n {\n-  rtvec v;\n-  rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      v = gen_rtvec (4, GEN_INT (2), GEN_INT (6), GEN_INT (3), GEN_INT (7));\n-      x = gen_rtx_VEC_CONCAT (V8SImode, operands[2], operands[1]);\n-    }\n-  else\n-    {\n-      v = gen_rtvec (4, GEN_INT (0), GEN_INT (4), GEN_INT (1), GEN_INT (5));\n-      x = gen_rtx_VEC_CONCAT (V8SImode, operands[1], operands[2]);\n-    }\n-\n+  rtvec v = gen_rtvec (4, GEN_INT (0), GEN_INT (4), GEN_INT (1), GEN_INT (5));\n+  rtx x = gen_rtx_VEC_CONCAT (V8SImode, operands[1], operands[2]);\n   x = gen_rtx_VEC_SELECT (V4SImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n   emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n@@ -1136,27 +1094,11 @@\n    (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v;\n-  rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      v = gen_rtvec (16, GEN_INT (0), GEN_INT (16), GEN_INT (1), GEN_INT (17),\n-                     GEN_INT (2), GEN_INT (18), GEN_INT (3), GEN_INT (19),\n-\t\t     GEN_INT (4), GEN_INT (20), GEN_INT (5), GEN_INT (21),\n-\t\t     GEN_INT (6), GEN_INT (22), GEN_INT (7), GEN_INT (23));\n-      x = gen_rtx_VEC_CONCAT (V32QImode, operands[2], operands[1]);\n-    }\n-  else\n-    {\n-      v = gen_rtvec (16, GEN_INT (8), GEN_INT (24), GEN_INT (9), GEN_INT (25),\n-                     GEN_INT (10), GEN_INT (26), GEN_INT (11), GEN_INT (27),\n-\t\t     GEN_INT (12), GEN_INT (28), GEN_INT (13), GEN_INT (29),\n-\t\t     GEN_INT (14), GEN_INT (30), GEN_INT (15), GEN_INT (31));\n-      x = gen_rtx_VEC_CONCAT (V32QImode, operands[1], operands[2]);\n-    }\n-\n+  rtvec v = gen_rtvec (16, GEN_INT (8), GEN_INT (24), GEN_INT (9), GEN_INT (25),\n+\t\t       GEN_INT (10), GEN_INT (26), GEN_INT (11), GEN_INT (27),\n+\t\t       GEN_INT (12), GEN_INT (28), GEN_INT (13), GEN_INT (29),\n+\t\t       GEN_INT (14), GEN_INT (30), GEN_INT (15), GEN_INT (31));\n+  rtx x = gen_rtx_VEC_CONCAT (V32QImode, operands[1], operands[2]);\n   x = gen_rtx_VEC_SELECT (V16QImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n   emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n@@ -1200,23 +1142,9 @@\n    (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v;\n-  rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      v = gen_rtvec (8, GEN_INT (0), GEN_INT (8), GEN_INT (1), GEN_INT (9),\n-                     GEN_INT (2), GEN_INT (10), GEN_INT (3), GEN_INT (11));\n-      x = gen_rtx_VEC_CONCAT (V16HImode, operands[2], operands[1]);\n-    }\n-  else\n-    {\n-      v = gen_rtvec (8, GEN_INT (4), GEN_INT (12), GEN_INT (5), GEN_INT (13),\n-                     GEN_INT (6), GEN_INT (14), GEN_INT (7), GEN_INT (15));\n-      x = gen_rtx_VEC_CONCAT (V16HImode, operands[1], operands[2]);\n-    }\n-\n+  rtvec v = gen_rtvec (8, GEN_INT (4), GEN_INT (12), GEN_INT (5), GEN_INT (13),\n+\t\t       GEN_INT (6), GEN_INT (14), GEN_INT (7), GEN_INT (15));\n+  rtx x = gen_rtx_VEC_CONCAT (V16HImode, operands[1], operands[2]);\n   x = gen_rtx_VEC_SELECT (V8HImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n   emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n@@ -1256,21 +1184,8 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n {\n-  rtvec v;\n-  rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      v = gen_rtvec (4, GEN_INT (0), GEN_INT (4), GEN_INT (1), GEN_INT (5));\n-      x = gen_rtx_VEC_CONCAT (V8SImode, operands[2], operands[1]);\n-    }\n-  else\n-    {\n-      v = gen_rtvec (4, GEN_INT (2), GEN_INT (6), GEN_INT (3), GEN_INT (7));\n-      x = gen_rtx_VEC_CONCAT (V8SImode, operands[1], operands[2]);\n-    }\n-\n+  rtvec v = gen_rtvec (4, GEN_INT (2), GEN_INT (6), GEN_INT (3), GEN_INT (7));\n+  rtx x = gen_rtx_VEC_CONCAT (V8SImode, operands[1], operands[2]);\n   x = gen_rtx_VEC_SELECT (V4SImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n   emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n@@ -1415,7 +1330,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmuleub (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmuloub (operands[0], operands[1], operands[2]));\n@@ -1428,7 +1343,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmulesb (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulosb (operands[0], operands[1], operands[2]));\n@@ -1441,7 +1356,7 @@\n    (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmuleuh (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulouh (operands[0], operands[1], operands[2]));\n@@ -1454,7 +1369,7 @@\n    (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmulesh (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulosh (operands[0], operands[1], operands[2]));\n@@ -1467,7 +1382,7 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"TARGET_P8_VECTOR\"\n {\n- if (VECTOR_ELT_ORDER_BIG)\n+ if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmuleuw (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulouw (operands[0], operands[1], operands[2]));\n@@ -1480,7 +1395,7 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"TARGET_P8_VECTOR\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmulesw (operands[0], operands[1], operands[2]));\n  else\n     emit_insn (gen_altivec_vmulosw (operands[0], operands[1], operands[2]));\n@@ -1493,7 +1408,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmuloub (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmuleub (operands[0], operands[1], operands[2]));\n@@ -1506,7 +1421,7 @@\n    (use (match_operand:V16QI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmulosb (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulesb (operands[0], operands[1], operands[2]));\n@@ -1519,7 +1434,7 @@\n    (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmulouh (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmuleuh (operands[0], operands[1], operands[2]));\n@@ -1532,7 +1447,7 @@\n    (use (match_operand:V8HI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmulosh (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulesh (operands[0], operands[1], operands[2]));\n@@ -1545,7 +1460,7 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"TARGET_P8_VECTOR\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmulouw (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmuleuw (operands[0], operands[1], operands[2]));\n@@ -1558,7 +1473,7 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"TARGET_P8_VECTOR\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vmulosw (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_altivec_vmulesw (operands[0], operands[1], operands[2]));\n@@ -1681,7 +1596,7 @@\n \t\t     UNSPEC_VPKPX))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vpkpx %0,%1,%2\";\n   else\n     return \"vpkpx %0,%2,%1\";\n@@ -1695,7 +1610,7 @@\n \t\t\t   UNSPEC_VPACK_SIGN_SIGN_SAT))]\n   \"<VI_unit>\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vpks<VI_char>ss %0,%1,%2\";\n   else\n     return \"vpks<VI_char>ss %0,%2,%1\";\n@@ -1709,7 +1624,7 @@\n \t\t\t   UNSPEC_VPACK_SIGN_UNS_SAT))]\n   \"<VI_unit>\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vpks<VI_char>us %0,%1,%2\";\n   else\n     return \"vpks<VI_char>us %0,%2,%1\";\n@@ -1723,7 +1638,7 @@\n \t\t\t   UNSPEC_VPACK_UNS_UNS_SAT))]\n   \"<VI_unit>\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vpku<VI_char>us %0,%1,%2\";\n   else\n     return \"vpku<VI_char>us %0,%2,%1\";\n@@ -1737,7 +1652,7 @@\n \t\t\t   UNSPEC_VPACK_UNS_UNS_MOD))]\n   \"<VI_unit>\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vpku<VI_char>um %0,%1,%2\";\n   else\n     return \"vpku<VI_char>um %0,%2,%1\";\n@@ -1889,7 +1804,7 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vsum2sws_direct (operands[0], operands[1],\n                                             operands[2]));\n   else\n@@ -1922,7 +1837,7 @@\n    (use (match_operand:V4SI 2 \"register_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_vsumsws_direct (operands[0], operands[1],\n                                            operands[2]));\n   else\n@@ -1954,15 +1869,8 @@\n    (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v;\n+  rtvec v = gen_rtvec (1, operands[2]);\n   rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  We have to reflect\n-     the actual selected index for the splat in the RTL.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    operands[2] = GEN_INT (15 - INTVAL (operands[2]));\n-\n-  v = gen_rtvec (1, operands[2]);\n   x = gen_rtx_VEC_SELECT (QImode, operands[1], gen_rtx_PARALLEL (VOIDmode, v));\n   x = gen_rtx_VEC_DUPLICATE (V16QImode, x);\n   emit_insn (gen_rtx_SET (operands[0], x));\n@@ -1977,9 +1885,6 @@\n \t\t\t [(match_operand:QI 2 \"u5bit_cint_operand\" \"\")]))))]\n   \"TARGET_ALTIVEC\"\n {\n-  /* For true LE, this adjusts the selected index.  For LE with \n-     -maltivec=be, this reverses what was done in the define_expand\n-     because the instruction already has big-endian bias.  */\n   if (!BYTES_BIG_ENDIAN)\n     operands[2] = GEN_INT (15 - INTVAL (operands[2]));\n \n@@ -2002,15 +1907,8 @@\n    (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v;\n+  rtvec v = gen_rtvec (1, operands[2]);\n   rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  We have to reflect\n-     the actual selected index for the splat in the RTL.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    operands[2] = GEN_INT (7 - INTVAL (operands[2]));\n-\n-  v = gen_rtvec (1, operands[2]);\n   x = gen_rtx_VEC_SELECT (HImode, operands[1], gen_rtx_PARALLEL (VOIDmode, v));\n   x = gen_rtx_VEC_DUPLICATE (V8HImode, x);\n   emit_insn (gen_rtx_SET (operands[0], x));\n@@ -2025,9 +1923,6 @@\n \t\t\t [(match_operand:QI 2 \"u5bit_cint_operand\" \"\")]))))]\n   \"TARGET_ALTIVEC\"\n {\n-  /* For true LE, this adjusts the selected index.  For LE with \n-     -maltivec=be, this reverses what was done in the define_expand\n-     because the instruction already has big-endian bias.  */\n   if (!BYTES_BIG_ENDIAN)\n     operands[2] = GEN_INT (7 - INTVAL (operands[2]));\n \n@@ -2050,15 +1945,8 @@\n    (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v;\n+  rtvec v = gen_rtvec (1, operands[2]);\n   rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  We have to reflect\n-     the actual selected index for the splat in the RTL.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    operands[2] = GEN_INT (3 - INTVAL (operands[2]));\n-\n-  v = gen_rtvec (1, operands[2]);\n   x = gen_rtx_VEC_SELECT (SImode, operands[1], gen_rtx_PARALLEL (VOIDmode, v));\n   x = gen_rtx_VEC_DUPLICATE (V4SImode, x);\n   emit_insn (gen_rtx_SET (operands[0], x));\n@@ -2073,9 +1961,6 @@\n \t\t\t [(match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]))))]\n   \"TARGET_ALTIVEC\"\n {\n-  /* For true LE, this adjusts the selected index.  For LE with \n-     -maltivec=be, this reverses what was done in the define_expand\n-     because the instruction already has big-endian bias.  */\n   if (!BYTES_BIG_ENDIAN)\n     operands[2] = GEN_INT (3 - INTVAL (operands[2]));\n \n@@ -2098,15 +1983,8 @@\n    (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtvec v;\n+  rtvec v = gen_rtvec (1, operands[2]);\n   rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  We have to reflect\n-     the actual selected index for the splat in the RTL.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    operands[2] = GEN_INT (3 - INTVAL (operands[2]));\n-\n-  v = gen_rtvec (1, operands[2]);\n   x = gen_rtx_VEC_SELECT (SFmode, operands[1], gen_rtx_PARALLEL (VOIDmode, v));\n   x = gen_rtx_VEC_DUPLICATE (V4SFmode, x);\n   emit_insn (gen_rtx_SET (operands[0], x));\n@@ -2121,9 +1999,6 @@\n \t\t\t [(match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]))))]\n   \"VECTOR_UNIT_ALTIVEC_P (V4SFmode)\"\n {\n-  /* For true LE, this adjusts the selected index.  For LE with \n-     -maltivec=be, this reverses what was done in the define_expand\n-     because the instruction already has big-endian bias.  */\n   if (!BYTES_BIG_ENDIAN)\n     operands[2] = GEN_INT (3 - INTVAL (operands[2]));\n \n@@ -2154,7 +2029,7 @@\n \t\t   UNSPEC_VPERM))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     {\n       altivec_expand_vec_perm_le (operands);\n       DONE;\n@@ -2196,7 +2071,7 @@\n \t\t   UNSPEC_VPERM_UNS))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     {\n       altivec_expand_vec_perm_le (operands);\n       DONE;\n@@ -2374,7 +2249,7 @@\n \t\t     UNSPEC_VUNPACK_HI_SIGN))]\n   \"<VI_unit>\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vupkhs<VU_char> %0,%1\";\n   else\n     return \"vupkls<VU_char> %0,%1\";\n@@ -2395,7 +2270,7 @@\n \t\t     UNSPEC_VUNPACK_LO_SIGN))]\n   \"<VI_unit>\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vupkls<VU_char> %0,%1\";\n   else\n     return \"vupkhs<VU_char> %0,%1\";\n@@ -2416,7 +2291,7 @@\n \t\t     UNSPEC_VUPKHPX))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vupkhpx %0,%1\";\n   else\n     return \"vupklpx %0,%1\";\n@@ -2429,7 +2304,7 @@\n \t\t     UNSPEC_VUPKLPX))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     return \"vupklpx %0,%1\";\n   else\n     return \"vupkhpx %0,%1\";\n@@ -2588,7 +2463,7 @@\n    (use (match_operand:V16QI 1 \"memory_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_lvsl_direct (operands[0], operands[1]));\n   else\n     {\n@@ -2626,7 +2501,7 @@\n    (use (match_operand:V16QI 1 \"memory_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_altivec_lvsr_direct (operands[0], operands[1]));\n   else\n     {\n@@ -2680,21 +2555,7 @@\n ;; Parallel some of the LVE* and STV*'s with unspecs because some have\n ;; identical rtl but different instructions-- and gcc gets confused.\n \n-(define_expand \"altivec_lve<VI_char>x\"\n-  [(parallel\n-    [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-\t  (match_operand:VI 1 \"memory_operand\" \"Z\"))\n-     (unspec [(const_int 0)] UNSPEC_LVE)])]\n-  \"TARGET_ALTIVEC\"\n-{\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      altivec_expand_lvx_be (operands[0], operands[1], <MODE>mode, UNSPEC_LVE);\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*altivec_lve<VI_char>x_internal\"\n+(define_insn \"altivec_lve<VI_char>x\"\n   [(parallel\n     [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n \t  (match_operand:VI 1 \"memory_operand\" \"Z\"))\n@@ -2712,21 +2573,7 @@\n   \"lvewx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n-(define_expand \"altivec_lvxl_<mode>\"\n-  [(parallel\n-    [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n-\t  (match_operand:VM2 1 \"memory_operand\" \"Z\"))\n-     (unspec [(const_int 0)] UNSPEC_SET_VSCR)])]\n-  \"TARGET_ALTIVEC\"\n-{\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      altivec_expand_lvx_be (operands[0], operands[1], <MODE>mode, UNSPEC_SET_VSCR);\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*altivec_lvxl_<mode>_internal\"\n+(define_insn \"altivec_lvxl_<mode>\"\n   [(parallel\n     [(set (match_operand:VM2 0 \"register_operand\" \"=v\")\n \t  (match_operand:VM2 1 \"memory_operand\" \"Z\"))\n@@ -2847,21 +2694,7 @@\n   \"stvx %0,0,%1\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-(define_expand \"altivec_stvxl_<mode>\"\n-  [(parallel\n-    [(set (match_operand:VM2 0 \"memory_operand\" \"=Z\")\n-\t  (match_operand:VM2 1 \"register_operand\" \"v\"))\n-     (unspec [(const_int 0)] UNSPEC_STVXL)])]\n-  \"TARGET_ALTIVEC\"\n-{\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      altivec_expand_stvx_be (operands[0], operands[1], <MODE>mode, UNSPEC_STVXL);\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*altivec_stvxl_<mode>_internal\"\n+(define_insn \"altivec_stvxl_<mode>\"\n   [(parallel\n     [(set (match_operand:VM2 0 \"memory_operand\" \"=Z\")\n \t  (match_operand:VM2 1 \"register_operand\" \"v\"))\n@@ -2870,19 +2703,7 @@\n   \"stvxl %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n-(define_expand \"altivec_stve<VI_char>x\"\n-  [(set (match_operand:<VI_scalar> 0 \"memory_operand\" \"=Z\")\n-\t(unspec:<VI_scalar> [(match_operand:VI 1 \"register_operand\" \"v\")] UNSPEC_STVE))]\n-  \"TARGET_ALTIVEC\"\n-{\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      altivec_expand_stvex_be (operands[0], operands[1], <MODE>mode, UNSPEC_STVE);\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*altivec_stve<VI_char>x_internal\"\n+(define_insn \"altivec_stve<VI_char>x\"\n   [(set (match_operand:<VI_scalar> 0 \"memory_operand\" \"=Z\")\n \t(unspec:<VI_scalar> [(match_operand:VI 1 \"register_operand\" \"v\")] UNSPEC_STVE))]\n   \"TARGET_ALTIVEC\"\n@@ -2905,7 +2726,7 @@\n {\n   machine_mode op_mode = GET_MODE (operands[1]);\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Big endian word numbering for words in operand is 0 1 2 3.\n \t Input words 0 and 2 are where they need to be.  */\n@@ -2937,7 +2758,7 @@\n \t(match_operand:V4SI 1 \"register_operand\" \"v\"))]\n   \"TARGET_VSX\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Big endian word numbering for words in operand is 0 1 2 3.\n \t Input words 0 and 2 are where they need to be.  */\n@@ -2971,7 +2792,7 @@\n {\n   machine_mode op_mode = GET_MODE (operands[1]);\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Big endian word numbering for words in operand is 0 1 2 3.\n \t take (operand[1] operand[1]) and shift left one word\n@@ -3003,7 +2824,7 @@\n \t(match_operand:V4SI 1 \"register_operand\" \"v\"))]\n   \"TARGET_VSX\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Big endian word numbering for words in operand is 0 1 2 3.\n \t take (operand[1] operand[1]) and shift left one word\n@@ -3042,7 +2863,7 @@\n   machine_mode op_mode = GET_MODE (operands[1]);\n   rtx_tmp = gen_reg_rtx (op_mode);\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Big endian word numbering for words in operand is 0 1 2 3.\n \t Shift operand left one word, rtx_tmp word order is now 1 2 3 0.\n@@ -3090,7 +2911,7 @@\n   rtx rtx_tmp = gen_reg_rtx (V4SImode);\n   rtx rtx_val = GEN_INT (12);\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Big endian word numbering for words in operand is 0 1 2 3.\n \t Shift operand left one word, rtx_tmp word order is now 1 2 3 0.\n@@ -3143,7 +2964,7 @@\n   machine_mode op_mode = GET_MODE (operands[1]);\n   rtx_tmp = gen_reg_rtx (op_mode);\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Big endian word numbering for operand is 0 1 2 3.\n \t Shift operand left three words, rtx_tmp word order is now 3 0 1 2.\n@@ -3191,7 +3012,7 @@\n   rtx rtx_tmp = gen_reg_rtx (V4SImode);\n   rtx rtx_val = GEN_INT (12);\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Big endian word numbering for operand is 0 1 2 3.\n \t Shift operand left three words, rtx_tmp word order is now 3 0 1 2.\n@@ -3330,7 +3151,7 @@\n   rtx vtmp1 = gen_reg_rtx (V4SImode);\n   rtx vtmp2 = gen_reg_rtx (<MODE>mode);\n   rtx dest = gen_lowpart (V4SImode, vtmp2);\n-  int elt = VECTOR_ELT_ORDER_BIG ? GET_MODE_NUNITS (<MODE>mode) - 1 : 0;\n+  int elt = BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (<MODE>mode) - 1 : 0;\n \n   emit_insn (gen_altivec_vspltisw (vzero, const0_rtx));\n   emit_insn (gen_altivec_vsum4s<VI_char>s (vtmp1, operands[1], vzero));"}, {"sha": "98a812efbf0ec320ee7c869710d6311b9e961655", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -452,10 +452,9 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"__RECIP_PRECISION__\");\n   /* Note that the OPTION_MASK_ALTIVEC flag is automatically turned on\n      in any of the following conditions:\n-     1. The command line specifies either -maltivec=le or -maltivec=be.\n-     2. The operating system is Darwin and it is configured for 64\n+     1. The operating system is Darwin and it is configured for 64\n \tbit.  (See darwin_rs6000_override_options.)\n-     3. The operating system is Darwin and the operating system\n+     2. The operating system is Darwin and the operating system\n \tversion is 10.5 or higher and the user has not explicitly\n \tdisabled ALTIVEC by specifying -mcpu=G3 or -mno-altivec and\n \tthe compiler is not producing code for integration within the\n@@ -750,7 +749,7 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n     }\n \n   /* Vector element order.  */\n-  if (BYTES_BIG_ENDIAN || (rs6000_altivec_element_order == 2))\n+  if (BYTES_BIG_ENDIAN)\n     builtin_define (\"__VEC_ELEMENT_REG_ORDER__=__ORDER_BIG_ENDIAN__\");\n   else\n     builtin_define (\"__VEC_ELEMENT_REG_ORDER__=__ORDER_LITTLE_ENDIAN__\");\n@@ -6121,11 +6120,11 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t     (int)fcode, IDENTIFIER_POINTER (DECL_NAME (fndecl)));\n  \n   /* vec_lvsl and vec_lvsr are deprecated for use with LE element order.  */\n-  if (fcode == ALTIVEC_BUILTIN_VEC_LVSL && !VECTOR_ELT_ORDER_BIG)\n+  if (fcode == ALTIVEC_BUILTIN_VEC_LVSL && !BYTES_BIG_ENDIAN)\n     warning (OPT_Wdeprecated,\n \t     \"vec_lvsl is deprecated for little endian; use \"\n \t     \"assignment for unaligned loads and stores\");\n-  else if (fcode == ALTIVEC_BUILTIN_VEC_LVSR && !VECTOR_ELT_ORDER_BIG)\n+  else if (fcode == ALTIVEC_BUILTIN_VEC_LVSR && !BYTES_BIG_ENDIAN)\n     warning (OPT_Wdeprecated,\n \t     \"vec_lvsr is deprecated for little endian; use \"\n \t     \"assignment for unaligned loads and stores\");\n@@ -6537,17 +6536,6 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (arg2)))\n \tgoto bad;\n \n-      /* If we are targeting little-endian, but -maltivec=be has been\n-\t specified to override the element order, adjust the element\n-\t number accordingly.  */\n-      if (!BYTES_BIG_ENDIAN && rs6000_altivec_element_order == 2)\n-\t{\n-\t  unsigned int last_elem = TYPE_VECTOR_SUBPARTS (arg1_type) - 1;\n-\t  arg2 = fold_build2_loc (loc, MINUS_EXPR, TREE_TYPE (arg2),\n-\t\t\t\t  build_int_cstu (TREE_TYPE (arg2), last_elem),\n-\t\t\t\t  arg2);\n-\t}\n-\n       /* See if we can optimize vec_extracts with the current VSX instruction\n \t set.  */\n       mode = TYPE_MODE (arg1_type);\n@@ -6719,17 +6707,6 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       if (!INTEGRAL_TYPE_P (TREE_TYPE (arg2)))\n \tgoto bad;\n \n-      /* If we are targeting little-endian, but -maltivec=be has been\n-\t specified to override the element order, adjust the element\n-\t number accordingly.  */\n-      if (!BYTES_BIG_ENDIAN && rs6000_altivec_element_order == 2)\n-\t{\n-\t  unsigned int last_elem = TYPE_VECTOR_SUBPARTS (arg1_type) - 1;\n-\t  arg2 = fold_build2_loc (loc, MINUS_EXPR, TREE_TYPE (arg2),\n-\t\t\t\t  build_int_cstu (TREE_TYPE (arg2), last_elem),\n-\t\t\t\t  arg2);\n-\t}\n-\n       /* If we can use the VSX xxpermdi instruction, use that for insert.  */\n       mode = TYPE_MODE (arg1_type);\n       if ((mode == V2DFmode || mode == V2DImode) && VECTOR_UNIT_VSX_P (mode)"}, {"sha": "d548d801fa4980757674dfb2786cd81d796d9f9a", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -63,9 +63,6 @@ extern void rs6000_split_vec_extract_var (rtx, rtx, rtx, rtx, rtx);\n extern rtx rs6000_adjust_vec_address (rtx, rtx, rtx, rtx, machine_mode);\n extern void rs6000_split_v4si_init (rtx []);\n extern void altivec_expand_vec_perm_le (rtx op[4]);\n-extern void altivec_expand_lvx_be (rtx, rtx, machine_mode, unsigned);\n-extern void altivec_expand_stvx_be (rtx, rtx, machine_mode, unsigned);\n-extern void altivec_expand_stvex_be (rtx, rtx, machine_mode, unsigned);\n extern void rs6000_expand_extract_even (rtx, rtx, rtx);\n extern void rs6000_expand_interleave (rtx, rtx, rtx, bool);\n extern void rs6000_scale_v2df (rtx, rtx, int);"}, {"sha": "35427fdb0463819a089c612d48f2eee32bd50637", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 162, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -4000,13 +4000,6 @@ rs6000_option_override_internal (bool global_init_p)\n   if (global_init_p)\n     rs6000_isa_flags_explicit = global_options_set.x_rs6000_isa_flags;\n \n-  /* We plan to deprecate the -maltivec=be option.  For now, just\n-     issue a warning message.  */\n-  if (global_init_p\n-      && rs6000_altivec_element_order == 2)\n-    warning (0, \"%qs command-line option is deprecated\",\n-\t     \"-maltivec=be\");\n-\n   /* On 64-bit Darwin, power alignment is ABI-incompatible with some C\n      library functions, so warn about it. The flag may be useful for\n      performance studies from time to time though, so don't disable it\n@@ -4217,18 +4210,6 @@ rs6000_option_override_internal (bool global_init_p)\n       && !(processor_target_table[tune_index].target_enable & OPTION_MASK_HTM))\n     rs6000_isa_flags |= ~rs6000_isa_flags_explicit & OPTION_MASK_STRICT_ALIGN;\n \n-  /* -maltivec={le,be} implies -maltivec.  */\n-  if (rs6000_altivec_element_order != 0)\n-    rs6000_isa_flags |= OPTION_MASK_ALTIVEC;\n-\n-  /* Disallow -maltivec=le in big endian mode for now.  This is not\n-     known to be useful for anyone.  */\n-  if (BYTES_BIG_ENDIAN && rs6000_altivec_element_order == 1)\n-    {\n-      warning (0, N_(\"-maltivec=le not allowed for big-endian targets\"));\n-      rs6000_altivec_element_order = 0;\n-    }\n-\n   if (!rs6000_fold_gimple)\n      fprintf (stderr,\n \t      \"gimple folding of rs6000 builtins has been disabled.\\n\");\n@@ -7442,15 +7423,15 @@ rs6000_split_vec_extract_var (rtx dest, rtx src, rtx element, rtx tmp_gpr,\n \t  rtx element_si = gen_rtx_REG (SImode, element_regno);\n \n \t  if (mode == V16QImode)\n-\t    emit_insn (VECTOR_ELT_ORDER_BIG\n+\t    emit_insn (BYTES_BIG_ENDIAN\n \t\t       ? gen_vextublx (dest_si, element_si, src)\n \t\t       : gen_vextubrx (dest_si, element_si, src));\n \n \t  else if (mode == V8HImode)\n \t    {\n \t      rtx tmp_gpr_si = gen_rtx_REG (SImode, REGNO (tmp_gpr));\n \t      emit_insn (gen_ashlsi3 (tmp_gpr_si, element_si, const1_rtx));\n-\t      emit_insn (VECTOR_ELT_ORDER_BIG\n+\t      emit_insn (BYTES_BIG_ENDIAN\n \t\t\t ? gen_vextuhlx (dest_si, tmp_gpr_si, src)\n \t\t\t : gen_vextuhrx (dest_si, tmp_gpr_si, src));\n \t    }\n@@ -7460,7 +7441,7 @@ rs6000_split_vec_extract_var (rtx dest, rtx src, rtx element, rtx tmp_gpr,\n \t    {\n \t      rtx tmp_gpr_si = gen_rtx_REG (SImode, REGNO (tmp_gpr));\n \t      emit_insn (gen_ashlsi3 (tmp_gpr_si, element_si, const2_rtx));\n-\t      emit_insn (VECTOR_ELT_ORDER_BIG\n+\t      emit_insn (BYTES_BIG_ENDIAN\n \t\t\t ? gen_vextuwlx (dest_si, tmp_gpr_si, src)\n \t\t\t : gen_vextuwrx (dest_si, tmp_gpr_si, src));\n \t    }\n@@ -7477,7 +7458,7 @@ rs6000_split_vec_extract_var (rtx dest, rtx src, rtx element, rtx tmp_gpr,\n \t byte shift into a bit shift).  */\n       if (scalar_size == 8)\n \t{\n-\t  if (!VECTOR_ELT_ORDER_BIG)\n+\t  if (!BYTES_BIG_ENDIAN)\n \t    {\n \t      emit_insn (gen_xordi3 (tmp_gpr, element, const1_rtx));\n \t      element2 = tmp_gpr;\n@@ -7496,7 +7477,7 @@ rs6000_split_vec_extract_var (rtx dest, rtx src, rtx element, rtx tmp_gpr,\n \t}\n       else\n \t{\n-\t  if (!VECTOR_ELT_ORDER_BIG)\n+\t  if (!BYTES_BIG_ENDIAN)\n \t    {\n \t      rtx num_ele_m1 = GEN_INT (GET_MODE_NUNITS (mode) - 1);\n \n@@ -7647,7 +7628,6 @@ rs6000_split_v4si_init (rtx operands[])\n \t{\n \t  rtx di_lo = gen_rtx_REG (DImode, d_regno + 1);\n \t  rtx di_hi = gen_rtx_REG (DImode, d_regno);\n-\t  gcc_assert (!VECTOR_ELT_ORDER_BIG);\n \t  rs6000_split_v4si_init_di_reg (di_lo, scalar4, scalar3, tmp1);\n \t  rs6000_split_v4si_init_di_reg (di_hi, scalar2, scalar1, tmp2);\n \t}\n@@ -13940,46 +13920,6 @@ altivec_expand_predicate_builtin (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n-/* Return a constant vector for use as a little-endian permute control vector\n-   to reverse the order of elements of the given vector mode.  */\n-static rtx\n-swap_selector_for_mode (machine_mode mode)\n-{\n-  /* These are little endian vectors, so their elements are reversed\n-     from what you would normally expect for a permute control vector.  */\n-  unsigned int swap2[16] = {7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8};\n-  unsigned int swap4[16] = {3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12};\n-  unsigned int swap8[16] = {1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14};\n-  unsigned int swap16[16] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  unsigned int *swaparray, i;\n-  rtx perm[16];\n-\n-  switch (mode)\n-    {\n-    case E_V2DFmode:\n-    case E_V2DImode:\n-      swaparray = swap2;\n-      break;\n-    case E_V4SFmode:\n-    case E_V4SImode:\n-      swaparray = swap4;\n-      break;\n-    case E_V8HImode:\n-      swaparray = swap8;\n-      break;\n-    case E_V16QImode:\n-      swaparray = swap16;\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  for (i = 0; i < 16; ++i)\n-    perm[i] = GEN_INT (swaparray[i]);\n-\n-  return force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode, gen_rtvec_v (16, perm)));\n-}\n-\n rtx\n swap_endian_selector_for_mode (machine_mode mode)\n {\n@@ -14018,60 +13958,6 @@ swap_endian_selector_for_mode (machine_mode mode)\n \t\t\t\t\t\t     gen_rtvec_v (16, perm)));\n }\n \n-/* Generate code for an \"lvxl\", or \"lve*x\" built-in for a little endian target\n-   with -maltivec=be specified.  Issue the load followed by an element-\n-   reversing permute.  */\n-void\n-altivec_expand_lvx_be (rtx op0, rtx op1, machine_mode mode, unsigned unspec)\n-{\n-  rtx tmp = gen_reg_rtx (mode);\n-  rtx load = gen_rtx_SET (tmp, op1);\n-  rtx lvx = gen_rtx_UNSPEC (mode, gen_rtvec (1, const0_rtx), unspec);\n-  rtx par = gen_rtx_PARALLEL (mode, gen_rtvec (2, load, lvx));\n-  rtx sel = swap_selector_for_mode (mode);\n-  rtx vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, tmp, tmp, sel), UNSPEC_VPERM);\n-\n-  gcc_assert (REG_P (op0));\n-  emit_insn (par);\n-  emit_insn (gen_rtx_SET (op0, vperm));\n-}\n-\n-/* Generate code for a \"stvxl\" built-in for a little endian target with\n-   -maltivec=be specified.  Issue the store preceded by an element-reversing\n-   permute.  */\n-void\n-altivec_expand_stvx_be (rtx op0, rtx op1, machine_mode mode, unsigned unspec)\n-{\n-  rtx tmp = gen_reg_rtx (mode);\n-  rtx store = gen_rtx_SET (op0, tmp);\n-  rtx stvx = gen_rtx_UNSPEC (mode, gen_rtvec (1, const0_rtx), unspec);\n-  rtx par = gen_rtx_PARALLEL (mode, gen_rtvec (2, store, stvx));\n-  rtx sel = swap_selector_for_mode (mode);\n-  rtx vperm;\n-\n-  gcc_assert (REG_P (op1));\n-  vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op1, sel), UNSPEC_VPERM);\n-  emit_insn (gen_rtx_SET (tmp, vperm));\n-  emit_insn (par);\n-}\n-\n-/* Generate code for a \"stve*x\" built-in for a little endian target with -maltivec=be\n-   specified.  Issue the store preceded by an element-reversing permute.  */\n-void\n-altivec_expand_stvex_be (rtx op0, rtx op1, machine_mode mode, unsigned unspec)\n-{\n-  machine_mode inner_mode = GET_MODE_INNER (mode);\n-  rtx tmp = gen_reg_rtx (mode);\n-  rtx stvx = gen_rtx_UNSPEC (inner_mode, gen_rtvec (1, tmp), unspec);\n-  rtx sel = swap_selector_for_mode (mode);\n-  rtx vperm;\n-\n-  gcc_assert (REG_P (op1));\n-  vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op1, sel), UNSPEC_VPERM);\n-  emit_insn (gen_rtx_SET (tmp, vperm));\n-  emit_insn (gen_rtx_SET (op0, stvx));\n-}\n-\n static rtx\n altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n {\n@@ -14121,20 +14007,7 @@ altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n       addr = gen_rtx_AND (Pmode, rawaddr, gen_rtx_CONST_INT (Pmode, -16));\n       addr = gen_rtx_MEM (blk ? BLKmode : tmode, addr);\n \n-      /* For -maltivec=be, emit the load and follow it up with a\n-\t permute to swap the elements.  */\n-      if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-\t{\n-\t  rtx temp = gen_reg_rtx (tmode);\n-\t  emit_insn (gen_rtx_SET (temp, addr));\n-\n-\t  rtx sel = swap_selector_for_mode (tmode);\n-\t  rtx vperm = gen_rtx_UNSPEC (tmode, gen_rtvec (3, temp, temp, sel),\n-\t\t\t\t      UNSPEC_VPERM);\n-\t  emit_insn (gen_rtx_SET (target, vperm));\n-\t}\n-      else\n-\temit_insn (gen_rtx_SET (target, addr));\n+      emit_insn (gen_rtx_SET (target, addr));\n     }\n   else\n     {\n@@ -14240,19 +14113,7 @@ altivec_expand_stv_builtin (enum insn_code icode, tree exp)\n \n       op0 = copy_to_mode_reg (tmode, op0);\n \n-      /* For -maltivec=be, emit a permute to swap the elements, followed\n-\tby the store.  */\n-     if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-\t{\n-\t  rtx temp = gen_reg_rtx (tmode);\n-\t  rtx sel = swap_selector_for_mode (tmode);\n-\t  rtx vperm = gen_rtx_UNSPEC (tmode, gen_rtvec (3, op0, op0, sel),\n-\t\t\t\t      UNSPEC_VPERM);\n-\t  emit_insn (gen_rtx_SET (temp, vperm));\n-\t  emit_insn (gen_rtx_SET (addr, temp));\n-\t}\n-      else\n-\temit_insn (gen_rtx_SET (addr, op0));\n+      emit_insn (gen_rtx_SET (addr, op0));\n     }\n   else\n     {\n@@ -15937,9 +15798,6 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n       {\n \targ0 = gimple_call_arg (stmt, 0);  // offset\n \targ1 = gimple_call_arg (stmt, 1);  // address\n-\t/* Do not fold for -maltivec=be on LE targets.  */\n-\tif (VECTOR_ELT_ORDER_BIG && !BYTES_BIG_ENDIAN)\n-\t  return false;\n \tlhs = gimple_call_lhs (stmt);\n \tlocation_t loc = gimple_location (stmt);\n \t/* Since arg1 may be cast to a different type, just use ptr_type_node\n@@ -15976,9 +15834,6 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case ALTIVEC_BUILTIN_STVX_V2DI:\n     case ALTIVEC_BUILTIN_STVX_V2DF:\n       {\n-\t/* Do not fold for -maltivec=be on LE targets.  */\n-\tif (VECTOR_ELT_ORDER_BIG && !BYTES_BIG_ENDIAN)\n-\t  return false;\n \targ0 = gimple_call_arg (stmt, 0); /* Value to be stored.  */\n \targ1 = gimple_call_arg (stmt, 1); /* Offset.  */\n \ttree arg2 = gimple_call_arg (stmt, 2); /* Store-to address.  */\n@@ -16119,9 +15974,6 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case VSX_BUILTIN_XXMRGLW_4SI:\n     case ALTIVEC_BUILTIN_VMRGLB:\n     case VSX_BUILTIN_VEC_MERGEL_V2DI:\n-\t/* Do not fold for -maltivec=be on LE targets.  */\n-\tif (VECTOR_ELT_ORDER_BIG && !BYTES_BIG_ENDIAN)\n-\t  return false;\n \tfold_mergehl_helper (gsi, stmt, 1);\n \treturn true;\n     /* vec_mergeh (integrals).  */\n@@ -16130,9 +15982,6 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case VSX_BUILTIN_XXMRGHW_4SI:\n     case ALTIVEC_BUILTIN_VMRGHB:\n     case VSX_BUILTIN_VEC_MERGEH_V2DI:\n-\t/* Do not fold for -maltivec=be on LE targets.  */\n-\tif (VECTOR_ELT_ORDER_BIG && !BYTES_BIG_ENDIAN)\n-\t  return false;\n \tfold_mergehl_helper (gsi, stmt, 0);\n \treturn true;\n     default:\n@@ -38768,7 +38617,7 @@ rs6000_generate_float2_double_code (rtx dst, rtx src1, rtx src2)\n      rtx_tmp2[0] rtx_tmp3[0] rtx_tmp2[1] rtx_tmp3[0].\n      Setup rtx_tmp0 and rtx_tmp1 to ensure the order of the elements after the\n      vmrgew instruction will be correct.  */\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n        emit_insn (gen_vsx_xxpermdi_v2df_be (rtx_tmp0, src1, src2,\n \t\t\t\t\t    GEN_INT (0)));\n@@ -38787,7 +38636,7 @@ rs6000_generate_float2_double_code (rtx dst, rtx src1, rtx src2)\n   emit_insn (gen_vsx_xvcdpsp (rtx_tmp2, rtx_tmp0));\n   emit_insn (gen_vsx_xvcdpsp (rtx_tmp3, rtx_tmp1));\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp2, rtx_tmp3));\n   else\n     emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp3, rtx_tmp2));\n@@ -38805,7 +38654,7 @@ rs6000_generate_float2_code (bool signed_convert, rtx dst, rtx src1, rtx src2)\n      rtx_tmp2[0] rtx_tmp3[0] rtx_tmp2[1] rtx_tmp3[0].\n      Setup rtx_tmp0 and rtx_tmp1 to ensure the order of the elements after the\n      vmrgew instruction will be correct.  */\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       emit_insn (gen_vsx_xxpermdi_v2di_be (rtx_tmp0, src1, src2, GEN_INT (0)));\n       emit_insn (gen_vsx_xxpermdi_v2di_be (rtx_tmp1, src1, src2, GEN_INT (3)));\n@@ -38830,7 +38679,7 @@ rs6000_generate_float2_code (bool signed_convert, rtx dst, rtx src1, rtx src2)\n        emit_insn (gen_vsx_xvcvuxdsp (rtx_tmp3, rtx_tmp1));\n     }\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp2, rtx_tmp3));\n   else\n     emit_insn (gen_p8_vmrgew_v4sf (dst, rtx_tmp3, rtx_tmp2));"}, {"sha": "99be460e04d160b9c9db9bc5feb62a92b76aaa03", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -512,15 +512,6 @@ extern int rs6000_vector_align[];\n    ? rs6000_vector_align[(MODE)]\t\t\t\t\t\\\n    : (int)GET_MODE_BITSIZE ((MODE)))\n \n-/* Determine the element order to use for vector instructions.  By\n-   default we use big-endian element order when targeting big-endian,\n-   and little-endian element order when targeting little-endian.  For\n-   programs being ported from BE Power to LE Power, it can sometimes\n-   be useful to use big-endian element order when targeting little-endian.\n-   This is set via -maltivec=be, for example.  */\n-#define VECTOR_ELT_ORDER_BIG                                  \\\n-  (BYTES_BIG_ENDIAN || (rs6000_altivec_element_order == 2))\n-\n /* Element number of the 64-bit value in a 128-bit vector that can be accessed\n    with scalar instructions.  */\n #define VECTOR_ELEMENT_SCALAR_64BIT\t((BYTES_BIG_ENDIAN) ? 0 : 1)\n@@ -720,12 +711,10 @@ extern int rs6000_vector_align[];\n \n /* Macro to say whether we can do optimizations where we need to do parts of\n    the calculation in 64-bit GPRs and then is transfered to the vector\n-   registers.  Do not allow -maltivec=be for these optimizations, because it\n-   adds to the complexity of the code.  */\n+   registers.  */\n #define TARGET_DIRECT_MOVE_64BIT\t(TARGET_DIRECT_MOVE\t\t\\\n \t\t\t\t\t && TARGET_P8_VECTOR\t\t\\\n-\t\t\t\t\t && TARGET_POWERPC64\t\t\\\n-\t\t\t\t\t && (rs6000_altivec_element_order != 2))\n+\t\t\t\t\t && TARGET_POWERPC64)\n \n /* Whether the various reciprocal divide/square root estimate instructions\n    exist, and whether we should automatically generate code for the instruction"}, {"sha": "26c90b36c806f52b025f6a7a5ddd2a4b7bd5edb1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -1033,7 +1033,7 @@\n   rtx dest_v2di = gen_rtx_REG (V2DImode, dest_regno);\n   rtx src_v4si = gen_rtx_REG (V4SImode, src_regno);\n \n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       emit_insn (gen_altivec_vupkhsw (dest_v2di, src_v4si));\n       emit_insn (gen_vsx_xxspltd_v2di (dest_v2di, dest_v2di, const1_rtx));"}, {"sha": "25a4883b16102e7d7d228145dbadf1906dac2015", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -152,14 +152,6 @@ maltivec\n Target Report Mask(ALTIVEC) Var(rs6000_isa_flags)\n Use AltiVec instructions.\n \n-maltivec=le\n-Target Report RejectNegative Var(rs6000_altivec_element_order, 1) Save\n-Generate AltiVec instructions using little-endian element order.\n-\n-maltivec=be\n-Target Report RejectNegative Var(rs6000_altivec_element_order, 2)\n-Generate AltiVec instructions using big-endian element order.\n-\n mfold-gimple\n Target Report Var(rs6000_fold_gimple) Init(1)\n Enable early gimple folding of builtins."}, {"sha": "58796ff66f81f11235d8a97d7beed3f709a2d7da", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 27, "deletions": 53, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -2557,7 +2557,7 @@\n    (use (match_operand:VSX_D 1 \"register_operand\" \"wa\"))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Shift left one word to put even word correct location */\n       rtx rtx_tmp;\n@@ -2582,7 +2582,7 @@\n    (use (match_operand:V2DI 1 \"register_operand\" \"wa\"))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       /* Shift left one word to put even word correct location */\n       rtx rtx_tmp;\n@@ -2607,7 +2607,7 @@\n    (use (match_operand:VSX_D 1 \"register_operand\" \"wa\"))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_vsx_xvcv<VF_sxddp>sp (operands[0], operands[1]));\n   else\n     {\n@@ -2631,7 +2631,7 @@\n   (use (match_operand:V2DI 1 \"register_operand\" \"wa\"))]\n  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_vsx_xvcvuxdsp (operands[0], operands[1]));\n   else\n     {\n@@ -2674,7 +2674,7 @@\n \t(match_operand:V2DF 1 \"register_operand\" \"wa\"))]\n   \"TARGET_VSX\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       rtx rtx_tmp;\n       rtx rtx_val = GEN_INT (12);\n@@ -2706,7 +2706,7 @@\n \t(match_operand:V2DF 1 \"register_operand\" \"v\"))]\n   \"TARGET_VSX\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     /* Big endian word numbering for words in operand is 0 1\n        Result words 0 is where they need to be.  */\n     emit_insn (gen_vsx_xvcvdpsxws (operands[0], operands[1]));\n@@ -2758,7 +2758,7 @@\n \t(match_operand:V2DF 1 \"register_operand\" \"v\"))]\n   \"TARGET_VSX\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     {\n       rtx rtx_tmp;\n       rtx rtx_val = GEN_INT (12);\n@@ -2790,7 +2790,7 @@\n \t(match_operand:V2DF 1 \"register_operand\" \"v\"))]\n   \"TARGET_VSX\"\n {\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     /* Big endian word numbering for words in operand is 0 1\n        Result words 0 is where they need to be.  */\n     emit_insn (gen_vsx_xvcvdpuxws (operands[0], operands[1]));\n@@ -3498,7 +3498,7 @@\n   else\n     {\n       HOST_WIDE_INT elt = INTVAL (operands[2]);\n-      HOST_WIDE_INT elt_adj = (!VECTOR_ELT_ORDER_BIG\n+      HOST_WIDE_INT elt_adj = (!BYTES_BIG_ENDIAN\n \t\t\t       ? GET_MODE_NUNITS (<MODE>mode) - 1 - elt\n \t\t\t       : elt);\n \n@@ -3530,7 +3530,7 @@\n   HOST_WIDE_INT offset = INTVAL (op2) * GET_MODE_UNIT_SIZE (<MODE>mode);\n \n   emit_move_insn (op3, GEN_INT (offset));\n-  if (VECTOR_ELT_ORDER_BIG)\n+  if (BYTES_BIG_ENDIAN)\n     emit_insn (gen_vextu<wd>lx (op0_si, op3, op1));\n   else\n     emit_insn (gen_vextu<wd>rx (op0_si, op3, op1));\n@@ -3593,7 +3593,7 @@\n   rtx vec_tmp = operands[3];\n   int value;\n \n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     element = GEN_INT (GET_MODE_NUNITS (V4SImode) - 1 - INTVAL (element));\n \n   /* If the value is in the correct position, we can avoid doing the VSPLT<x>\n@@ -3644,7 +3644,7 @@\n   rtx vec_tmp = operands[3];\n   int value;\n \n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     element = GEN_INT (GET_MODE_NUNITS (<MODE>mode) - 1 - INTVAL (element));\n \n   /* If the value is in the correct position, we can avoid doing the VSPLT<x>\n@@ -3752,7 +3752,7 @@\n   rtx v4si_tmp = operands[3];\n   int value;\n \n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     element = GEN_INT (GET_MODE_NUNITS (V4SImode) - 1 - INTVAL (element));\n \n   /* If the value is in the correct position, we can avoid doing the VSPLT<x>\n@@ -3795,7 +3795,7 @@\n   rtx df_tmp = operands[4];\n   int value;\n \n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     element = GEN_INT (GET_MODE_NUNITS (V4SImode) - 1 - INTVAL (element));\n \n   /* If the value is in the correct position, we can avoid doing the VSPLT<x>\n@@ -3895,7 +3895,7 @@\n   int ele = INTVAL (operands[3]);\n   int nunits = GET_MODE_NUNITS (<MODE>mode);\n \n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     ele = nunits - 1 - ele;\n \n   operands[3] = GEN_INT (GET_MODE_SIZE (<VS_scalar>mode) * ele);\n@@ -3934,7 +3934,7 @@\n \n   operands[5] = gen_rtx_REG (V4SFmode, tmp_regno);\n   operands[6] = gen_rtx_REG (V4SImode, tmp_regno);\n-  operands[7] = GEN_INT (VECTOR_ELT_ORDER_BIG ? 1 : 2);\n+  operands[7] = GEN_INT (BYTES_BIG_ENDIAN ? 1 : 2);\n   operands[8] = gen_rtx_REG (V4SImode, reg_or_subregno (operands[0]));\n }\n   [(set_attr \"type\" \"vecperm\")\n@@ -3980,11 +3980,11 @@\n \t  (match_operand:QI 4 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && TARGET_P9_VECTOR && TARGET_POWERPC64\n-   && (INTVAL (operands[3]) == (VECTOR_ELT_ORDER_BIG ? 1 : 2))\"\n+   && (INTVAL (operands[3]) == (BYTES_BIG_ENDIAN ? 1 : 2))\"\n {\n   int ele = INTVAL (operands[4]);\n \n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     ele = GET_MODE_NUNITS (V4SFmode) - 1 - ele;\n \n   operands[4] = GEN_INT (GET_MODE_SIZE (SFmode) * ele);\n@@ -4008,7 +4008,7 @@\n    (clobber (match_scratch:SI 5 \"=&wJwK\"))]\n   \"VECTOR_MEM_VSX_P (V4SFmode) && VECTOR_MEM_VSX_P (V4SImode)\n    && TARGET_P9_VECTOR && TARGET_POWERPC64\n-   && (INTVAL (operands[3]) != (VECTOR_ELT_ORDER_BIG ? 1 : 2))\"\n+   && (INTVAL (operands[3]) != (BYTES_BIG_ENDIAN ? 1 : 2))\"\n   \"#\"\n   \"&& 1\"\n   [(parallel [(set (match_dup 5)\n@@ -4037,21 +4037,8 @@\n    (use (match_operand:VSX_D 2 \"vsx_register_operand\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n-  rtvec v;\n-  rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      v = gen_rtvec (2, GEN_INT (0), GEN_INT (2));\n-      x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[2], operands[1]);\n-    }\n-  else\n-    {\n-      v = gen_rtvec (2, GEN_INT (1), GEN_INT (3));\n-      x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[1], operands[2]);\n-    }\n-\n+  rtvec v = gen_rtvec (2, GEN_INT (1), GEN_INT (3));\n+  rtx x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[1], operands[2]);\n   x = gen_rtx_VEC_SELECT (<MODE>mode, x, gen_rtx_PARALLEL (VOIDmode, v));\n   emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n@@ -4063,21 +4050,8 @@\n    (use (match_operand:VSX_D 2 \"vsx_register_operand\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n-  rtvec v;\n-  rtx x;\n-\n-  /* Special handling for LE with -maltivec=be.  */\n-  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n-    {\n-      v = gen_rtvec (2, GEN_INT (1), GEN_INT (3));\n-      x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[2], operands[1]);\n-    }\n-  else\n-    {\n-      v = gen_rtvec (2, GEN_INT (0), GEN_INT (2));\n-      x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[1], operands[2]);\n-    }\n-\n+  rtvec v = gen_rtvec (2, GEN_INT (0), GEN_INT (2));\n+  rtx x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[1], operands[2]);\n   x = gen_rtx_VEC_SELECT (<MODE>mode, x, gen_rtx_PARALLEL (VOIDmode, v));\n   emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n@@ -4209,8 +4183,8 @@\n                       UNSPEC_VSX_XXSPLTD))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n {\n-  if ((VECTOR_ELT_ORDER_BIG && INTVAL (operands[2]) == 0)\n-      || (!VECTOR_ELT_ORDER_BIG && INTVAL (operands[2]) == 1))\n+  if ((BYTES_BIG_ENDIAN && INTVAL (operands[2]) == 0)\n+      || (!BYTES_BIG_ENDIAN && INTVAL (operands[2]) == 1))\n     return \"xxpermdi %x0,%x1,%x1,0\";\n   else\n     return \"xxpermdi %x0,%x1,%x1,3\";\n@@ -5161,7 +5135,7 @@\n                     UNSPEC_XXEXTRACTUW))]\n   \"TARGET_P9_VECTOR\"\n {\n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     operands[2] = GEN_INT (12 - INTVAL (operands[2]));\n \n   return \"xxextractuw %x0,%x1,%2\";\n@@ -5175,7 +5149,7 @@\n \t\t   UNSPEC_XXINSERTW))]\n   \"TARGET_P9_VECTOR\"\n {\n-  if (!VECTOR_ELT_ORDER_BIG)\n+  if (!BYTES_BIG_ENDIAN)\n     {\n       rtx op1 = operands[1];\n       rtx v4si_tmp = gen_reg_rtx (V4SImode);"}, {"sha": "f222771b43c57e18846689d8578edb1d87971a20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -1,3 +1,33 @@\n+2018-05-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.dg/vmx/extract-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/extract-vsx-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/insert-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/insert-vsx-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/ld-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/ld-vsx-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/lde-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/ldl-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/ldl-vsx-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/merge-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/merge-vsx-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/mult-even-odd-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/pack-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/perm-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/splat-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/splat-vsx-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/st-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/st-vsx-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/ste-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/stl-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/stl-vsx-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/sum2s-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/unpack-be-order.c: Delete testcase.\n+\t* gcc.dg/vmx/vsums-be-order.c: Delete testcase.\n+\t* gcc.target/powerpc/vec-setup-be-double.c: Delete testcase.\n+\t* gcc.target/powerpc/vec-setup-be-long.c: Delete testcase.\n+\t* gcc.target/powerpc/vec-setup.h: Remove -maltivec=be support.\n+\n 2018-05-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/85699"}, {"sha": "f03c356781ad6d5dfa4451b045a3b9ac4d763ec6", "filename": "gcc/testsuite/gcc.dg/vmx/extract-be-order.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,34 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx -w\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  vector unsigned char va = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char vb = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector unsigned short vc = {0,1,2,3,4,5,6,7};\n-  vector signed short vd = {-4,-3,-2,-1,0,1,2,3};\n-  vector unsigned int ve = {0,1,2,3};\n-  vector signed int vf = {-2,-1,0,1};\n-  vector float vg = {-2.0f,-1.0f,0.0f,1.0f};\n-\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  check (vec_extract (va, 5) == 10, \"vec_extract (va, 5)\");\n-  check (vec_extract (vb, 0) == 7, \"vec_extract (vb, 0)\");\n-  check (vec_extract (vc, 7) == 0, \"vec_extract (vc, 7)\");\n-  check (vec_extract (vd, 3) == 0, \"vec_extract (vd, 3)\");\n-  check (vec_extract (ve, 2) == 1, \"vec_extract (ve, 2)\");\n-  check (vec_extract (vf, 1) == 0, \"vec_extract (vf, 1)\");\n-  check (vec_extract (vg, 0) == 1.0f, \"vec_extract (vg, 0)\");\n-#else\n-  check (vec_extract (va, 5) == 5, \"vec_extract (va, 5)\");\n-  check (vec_extract (vb, 0) == -8, \"vec_extract (vb, 0)\");\n-  check (vec_extract (vc, 7) == 7, \"vec_extract (vc, 7)\");\n-  check (vec_extract (vd, 3) == -1, \"vec_extract (vd, 3)\");\n-  check (vec_extract (ve, 2) == 2, \"vec_extract (ve, 2)\");\n-  check (vec_extract (vf, 1) == -1, \"vec_extract (vf, 1)\");\n-  check (vec_extract (vg, 0) == -2.0f, \"vec_extract (vg, 0)\");\n-#endif\n-}\n-"}, {"sha": "509a7b62181b7ecc14d0219a4c80fe4ecbe0f696", "filename": "gcc/testsuite/gcc.dg/vmx/extract-vsx-be-order.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fextract-vsx-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mvsx -w\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  vector long long vl = {0, 1};\n-  vector double vd = {0.0, 1.0};\n-\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  check (vec_extract (vl, 0) == 1, \"vl, 0\");\n-  check (vec_extract (vd, 1) == 0.0, \"vd, 1\");\n-#else\n-  check (vec_extract (vl, 0) == 0, \"vl, 0\");\n-  check (vec_extract (vd, 1) == 1.0, \"vd, 1\");\n-#endif\n-}"}, {"sha": "7aa28f85b77a895aa4b5242bf9947f4bcc67a902", "filename": "gcc/testsuite/gcc.dg/vmx/insert-be-order.c", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,66 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  vector unsigned char va = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char vb = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector unsigned short vc = {0,1,2,3,4,5,6,7};\n-  vector signed short vd = {-4,-3,-2,-1,0,1,2,3};\n-  vector unsigned int ve = {0,1,2,3};\n-  vector signed int vf = {-2,-1,0,1};\n-  vector float vg = {-2.0f,-1.0f,0.0f,1.0f};\n-\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  check (vec_all_eq (vec_insert (16, va, 5),\n-\t\t     ((vector unsigned char)\n-\t\t       {0,1,2,3,4,5,6,7,8,9,16,11,12,13,14,15})),\n-\t \"vec_insert (va LE)\");\n-  check (vec_all_eq (vec_insert (-16, vb, 0),\n-\t\t     ((vector signed char)\n-\t\t       {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,-16})),\n-\t \"vec_insert (vb LE)\");\n-  check (vec_all_eq (vec_insert (16, vc, 7),\n-\t\t     ((vector unsigned short){16,1,2,3,4,5,6,7})),\n-\t \"vec_insert (vc LE)\");\n-  check (vec_all_eq (vec_insert (-16, vd, 3),\n-\t\t     ((vector signed short){-4,-3,-2,-1,-16,1,2,3})),\n-\t \"vec_insert (vd LE)\");\n-  check (vec_all_eq (vec_insert (16, ve, 2),\n-\t\t     ((vector unsigned int){0,16,2,3})),\n-\t \"vec_insert (ve LE)\");\n-  check (vec_all_eq (vec_insert (-16, vf, 1),\n-\t\t     ((vector signed int){-2,-1,-16,1})),\n-\t \"vec_insert (vf LE)\");\n-  check (vec_all_eq (vec_insert (-16.0f, vg, 0),\n-\t\t     ((vector float){-2.0f,-1.0f,0.0f,-16.0f})),\n-\t \"vec_insert (vg LE)\");\n-#else\n-  check (vec_all_eq (vec_insert (16, va, 5),\n-\t\t     ((vector unsigned char)\n-\t\t       {0,1,2,3,4,16,6,7,8,9,10,11,12,13,14,15})),\n-\t \"vec_insert (va BE)\");\n-  check (vec_all_eq (vec_insert (-16, vb, 0),\n-\t\t     ((vector signed char)\n-\t\t       {-16,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7})),\n-\t \"vec_insert (vb BE)\");\n-  check (vec_all_eq (vec_insert (16, vc, 7),\n-\t\t     ((vector unsigned short){0,1,2,3,4,5,6,16})),\n-\t \"vec_insert (vc BE)\");\n-  check (vec_all_eq (vec_insert (-16, vd, 3),\n-\t\t     ((vector signed short){-4,-3,-2,-16,0,1,2,3})),\n-\t \"vec_insert (vd BE)\");\n-  check (vec_all_eq (vec_insert (16, ve, 2),\n-\t\t     ((vector unsigned int){0,1,16,3})),\n-\t \"vec_insert (ve BE)\");\n-  check (vec_all_eq (vec_insert (-16, vf, 1),\n-\t\t     ((vector signed int){-2,-16,0,1})),\n-\t \"vec_insert (vf BE)\");\n-  check (vec_all_eq (vec_insert (-16.0f, vg, 0),\n-\t\t     ((vector float){-16.0f,-1.0f,0.0f,1.0f})),\n-\t \"vec_insert (vg BE)\");\n-#endif\n-}\n-"}, {"sha": "569a86606c79b86249e0fe9e7ef1025e4ce6cd1b", "filename": "gcc/testsuite/gcc.dg/vmx/insert-vsx-be-order.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Finsert-vsx-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,35 +0,0 @@\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n-\n-#include \"harness.h\"\n-\n-static int vec_long_long_eq (vector long long x, vector long long y)\n-{\n-  return (x[0] == y[0] && x[1] == y[1]);\n-}\n-\n-static int vec_dbl_eq (vector double x, vector double y)\n-{\n-  return (x[0] == y[0] && x[1] == y[1]);\n-}\n-\n-static void test()\n-{\n-  vector long long vl = {0, 1};\n-  vector double vd = {0.0, 1.0};\n-  vector long long vlr = vec_insert (2, vl, 0);\n-  vector double vdr = vec_insert (2.0, vd, 1);\n-\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector long long vler = {0, 2};\n-  vector double vder = {2.0, 1.0};\n-#else\n-  vector long long vler = {2, 1};\n-  vector double vder = {0.0, 2.0};\n-#endif\n-\n-  check (vec_long_long_eq (vlr, vler), \"vl\");\n-  check (vec_dbl_eq (vdr, vder), \"vd\");\n-}"}, {"sha": "f7361cfd372ddd07d6436896fa21175f127c007f", "filename": "gcc/testsuite/gcc.dg/vmx/ld-be-order.c", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,108 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned char svuc[16] __attribute__ ((aligned (16)));\n-static signed char svsc[16] __attribute__ ((aligned (16)));\n-static unsigned char svbc[16] __attribute__ ((aligned (16)));\n-static unsigned short svus[8] __attribute__ ((aligned (16)));\n-static signed short svss[8] __attribute__ ((aligned (16)));\n-static unsigned short svbs[8] __attribute__ ((aligned (16)));\n-static unsigned short svp[8] __attribute__ ((aligned (16)));\n-static unsigned int svui[4] __attribute__ ((aligned (16)));\n-static signed int svsi[4] __attribute__ ((aligned (16)));\n-static unsigned int svbi[4] __attribute__ ((aligned (16)));\n-static float svf[4] __attribute__ ((aligned (16)));\n-\n-static void init ()\n-{\n-  unsigned int i;\n-  for (i = 0; i < 16; ++i)\n-    {\n-      svuc[i] = i;\n-      svsc[i] = i - 8;\n-      svbc[i] = (i % 2) ? 0xff : 0;\n-    }\n-  for (i = 0; i < 8; ++i)\n-    {\n-      svus[i] = i;\n-      svss[i] = i - 4;\n-      svbs[i] = (i % 2) ? 0xffff : 0;\n-      svp[i] = i;\n-    }\n-  for (i = 0; i < 4; ++i)\n-    {\n-      svui[i] = i;\n-      svsi[i] = i - 2;\n-      svbi[i] = (i % 2) ? 0xffffffff : 0;\n-      svf[i] = i * 1.0f;\n-    }\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char evuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n-  vector signed char evsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n-  vector bool char evbc = {255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};\n-  vector unsigned short evus = {7,6,5,4,3,2,1,0};\n-  vector signed short evss = {3,2,1,0,-1,-2,-3,-4};\n-  vector bool short evbs = {65535,0,65535,0,65535,0,65535,0};\n-  vector pixel evp = {7,6,5,4,3,2,1,0};\n-  vector unsigned int evui = {3,2,1,0};\n-  vector signed int evsi = {1,0,-1,-2};\n-  vector bool int evbi = {0xffffffff,0,0xffffffff,0};\n-  vector float evf = {3.0,2.0,1.0,0.0};\n-#else\n-  vector unsigned char evuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char evsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector bool char evbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n-  vector unsigned short evus = {0,1,2,3,4,5,6,7};\n-  vector signed short evss = {-4,-3,-2,-1,0,1,2,3};\n-  vector bool short evbs = {0,65535,0,65535,0,65535,0,65535};\n-  vector pixel evp = {0,1,2,3,4,5,6,7};\n-  vector unsigned int evui = {0,1,2,3};\n-  vector signed int evsi = {-2,-1,0,1};\n-  vector bool int evbi = {0,0xffffffff,0,0xffffffff};\n-  vector float evf = {0.0,1.0,2.0,3.0};\n-#endif\n-\n-  vector unsigned char vuc;\n-  vector signed char vsc;\n-  vector bool char vbc;\n-  vector unsigned short vus;\n-  vector signed short vss;\n-  vector bool short vbs;\n-  vector pixel vp;\n-  vector unsigned int vui;\n-  vector signed int vsi;\n-  vector bool int vbi;\n-  vector float vf;\n-\n-  init ();\n-\n-  vuc = vec_ld (0, (vector unsigned char *)svuc);\n-  vsc = vec_ld (0, (vector signed char *)svsc);\n-  vbc = vec_ld (0, (vector bool char *)svbc);\n-  vus = vec_ld (0, (vector unsigned short *)svus);\n-  vss = vec_ld (0, (vector signed short *)svss);\n-  vbs = vec_ld (0, (vector bool short *)svbs);\n-  vp  = vec_ld (0, (vector pixel *)svp);\n-  vui = vec_ld (0, (vector unsigned int *)svui);\n-  vsi = vec_ld (0, (vector signed int *)svsi);\n-  vbi = vec_ld (0, (vector bool int *)svbi);\n-  vf  = vec_ld (0, (vector float *)svf);\n-\n-  check (vec_all_eq (vuc, evuc), \"vuc\");\n-  check (vec_all_eq (vsc, evsc), \"vsc\");\n-  check (vec_all_eq (vbc, evbc), \"vbc\");\n-  check (vec_all_eq (vus, evus), \"vus\");\n-  check (vec_all_eq (vss, evss), \"vss\");\n-  check (vec_all_eq (vbs, evbs), \"vbs\");\n-  check (vec_all_eq (vp,  evp ), \"vp\" );\n-  check (vec_all_eq (vui, evui), \"vui\");\n-  check (vec_all_eq (vsi, evsi), \"vsi\");\n-  check (vec_all_eq (vbi, evbi), \"vbi\");\n-  check (vec_all_eq (vf,  evf ), \"vf\" );\n-}"}, {"sha": "f02366756b9ee9d8417c0f07aff1e9ab080b5cbc", "filename": "gcc/testsuite/gcc.dg/vmx/ld-vsx-be-order.c", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fld-vsx-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,45 +0,0 @@\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned long long svul[2] __attribute__ ((aligned (16)));\n-static double svd[2] __attribute__ ((aligned (16)));\n-\n-static void init ()\n-{\n-  unsigned int i;\n-  for (i = 0; i < 2; ++i)\n-    {\n-      svul[i] = i;\n-      svd[i] = i * 1.0;\n-    }\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned long long evul = {1,0};\n-  vector double evd = {1.0,0.0};\n-#else\n-  vector unsigned long long evul = {0,1};\n-  vector double evd = {0.0,1.0};\n-#endif\n-\n-  vector unsigned long long vul;\n-  vector double vd;\n-  unsigned i;\n-\n-  init ();\n-\n-  vul = vec_ld (0, (vector unsigned long long *)svul);\n-  vd  = vec_ld (0, (vector double *)svd);\n-\n-  for (i = 0; i < 2; ++i)\n-    {\n-      check (vul[i] == evul[i], \"vul\");\n-      check (vd[i]  == evd[i],  \"vd\" );\n-    }\n-}"}, {"sha": "53c3b78a71d769a7e084b4709569705020c672a9", "filename": "gcc/testsuite/gcc.dg/vmx/lde-be-order.c", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Flde-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,74 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned char svuc[16] __attribute__ ((aligned (16)));\n-static signed char svsc[16] __attribute__ ((aligned (16)));\n-static unsigned short svus[8] __attribute__ ((aligned (16)));\n-static signed short svss[8] __attribute__ ((aligned (16)));\n-static unsigned int svui[4] __attribute__ ((aligned (16)));\n-static signed int svsi[4] __attribute__ ((aligned (16)));\n-static float svf[4] __attribute__ ((aligned (16)));\n-\n-static void init ()\n-{\n-  int i;\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  for (i = 15; i >= 0; --i)\n-#else\n-  for (i = 0; i < 16; ++i)\n-#endif\n-    {\n-      svuc[i] = i;\n-      svsc[i] = i - 8;\n-    }\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  for (i = 7; i >= 0; --i)\n-#else\n-  for (i = 0; i < 8; ++i)\n-#endif\n-    {\n-      svus[i] = i;\n-      svss[i] = i - 4;\n-    }\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  for (i = 3; i >= 0; --i)\n-#else\n-  for (i = 0; i < 4; ++i)\n-#endif\n-    {\n-      svui[i] = i;\n-      svsi[i] = i - 2;\n-      svf[i] = i * 1.0f;\n-    }\n-}\n-\n-static void test ()\n-{\n-  vector unsigned char vuc;\n-  vector signed char vsc;\n-  vector unsigned short vus;\n-  vector signed short vss;\n-  vector unsigned int vui;\n-  vector signed int vsi;\n-  vector float vf;\n-\n-  init ();\n-\n-  vuc = vec_lde (9*1, (unsigned char *)svuc);\n-  vsc = vec_lde (14*1, (signed char *)svsc);\n-  vus = vec_lde (7*2, (unsigned short *)svus);\n-  vss = vec_lde (1*2, (signed short *)svss);\n-  vui = vec_lde (3*4, (unsigned int *)svui);\n-  vsi = vec_lde (2*4, (signed int *)svsi);\n-  vf  = vec_lde (0*4, (float *)svf);\n-\n-  check (vec_extract (vuc, 9) == 9, \"vuc\");\n-  check (vec_extract (vsc, 14) == 6, \"vsc\");\n-  check (vec_extract (vus, 7) == 7, \"vus\");\n-  check (vec_extract (vss, 1) == -3, \"vss\");\n-  check (vec_extract (vui, 3) == 3, \"vui\");\n-  check (vec_extract (vsi, 2) == 0, \"vsi\");\n-  check (vec_extract (vf,  0) == 0.0, \"vf\");\n-}"}, {"sha": "49ba48b0462763ee89e8df45974b30641e2950bd", "filename": "gcc/testsuite/gcc.dg/vmx/ldl-be-order.c", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,108 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned char svuc[16] __attribute__ ((aligned (16)));\n-static signed char svsc[16] __attribute__ ((aligned (16)));\n-static unsigned char svbc[16] __attribute__ ((aligned (16)));\n-static unsigned short svus[8] __attribute__ ((aligned (16)));\n-static signed short svss[8] __attribute__ ((aligned (16)));\n-static unsigned short svbs[8] __attribute__ ((aligned (16)));\n-static unsigned short svp[8] __attribute__ ((aligned (16)));\n-static unsigned int svui[4] __attribute__ ((aligned (16)));\n-static signed int svsi[4] __attribute__ ((aligned (16)));\n-static unsigned int svbi[4] __attribute__ ((aligned (16)));\n-static float svf[4] __attribute__ ((aligned (16)));\n-\n-static void init ()\n-{\n-  unsigned int i;\n-  for (i = 0; i < 16; ++i)\n-    {\n-      svuc[i] = i;\n-      svsc[i] = i - 8;\n-      svbc[i] = (i % 2) ? 0xff : 0;\n-    }\n-  for (i = 0; i < 8; ++i)\n-    {\n-      svus[i] = i;\n-      svss[i] = i - 4;\n-      svbs[i] = (i % 2) ? 0xffff : 0;\n-      svp[i] = i;\n-    }\n-  for (i = 0; i < 4; ++i)\n-    {\n-      svui[i] = i;\n-      svsi[i] = i - 2;\n-      svbi[i] = (i % 2) ? 0xffffffff : 0;\n-      svf[i] = i * 1.0f;\n-    }\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char evuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n-  vector signed char evsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n-  vector bool char evbc = {255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};\n-  vector unsigned short evus = {7,6,5,4,3,2,1,0};\n-  vector signed short evss = {3,2,1,0,-1,-2,-3,-4};\n-  vector bool short evbs = {65535,0,65535,0,65535,0,65535,0};\n-  vector pixel evp = {7,6,5,4,3,2,1,0};\n-  vector unsigned int evui = {3,2,1,0};\n-  vector signed int evsi = {1,0,-1,-2};\n-  vector bool int evbi = {0xffffffff,0,0xffffffff,0};\n-  vector float evf = {3.0,2.0,1.0,0.0};\n-#else\n-  vector unsigned char evuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char evsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector bool char evbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n-  vector unsigned short evus = {0,1,2,3,4,5,6,7};\n-  vector signed short evss = {-4,-3,-2,-1,0,1,2,3};\n-  vector bool short evbs = {0,65535,0,65535,0,65535,0,65535};\n-  vector pixel evp = {0,1,2,3,4,5,6,7};\n-  vector unsigned int evui = {0,1,2,3};\n-  vector signed int evsi = {-2,-1,0,1};\n-  vector bool int evbi = {0,0xffffffff,0,0xffffffff};\n-  vector float evf = {0.0,1.0,2.0,3.0};\n-#endif\n-\n-  vector unsigned char vuc;\n-  vector signed char vsc;\n-  vector bool char vbc;\n-  vector unsigned short vus;\n-  vector signed short vss;\n-  vector bool short vbs;\n-  vector pixel vp;\n-  vector unsigned int vui;\n-  vector signed int vsi;\n-  vector bool int vbi;\n-  vector float vf;\n-\n-  init ();\n-\n-  vuc = vec_ldl (0, (vector unsigned char *)svuc);\n-  vsc = vec_ldl (0, (vector signed char *)svsc);\n-  vbc = vec_ldl (0, (vector bool char *)svbc);\n-  vus = vec_ldl (0, (vector unsigned short *)svus);\n-  vss = vec_ldl (0, (vector signed short *)svss);\n-  vbs = vec_ldl (0, (vector bool short *)svbs);\n-  vp  = vec_ldl (0, (vector pixel *)svp);\n-  vui = vec_ldl (0, (vector unsigned int *)svui);\n-  vsi = vec_ldl (0, (vector signed int *)svsi);\n-  vbi = vec_ldl (0, (vector bool int *)svbi);\n-  vf  = vec_ldl (0, (vector float *)svf);\n-\n-  check (vec_all_eq (vuc, evuc), \"vuc\");\n-  check (vec_all_eq (vsc, evsc), \"vsc\");\n-  check (vec_all_eq (vbc, evbc), \"vbc\");\n-  check (vec_all_eq (vus, evus), \"vus\");\n-  check (vec_all_eq (vss, evss), \"vss\");\n-  check (vec_all_eq (vbs, evbs), \"vbs\");\n-  check (vec_all_eq (vp,  evp ), \"vp\" );\n-  check (vec_all_eq (vui, evui), \"vui\");\n-  check (vec_all_eq (vsi, evsi), \"vsi\");\n-  check (vec_all_eq (vbi, evbi), \"vbi\");\n-  check (vec_all_eq (vf,  evf ), \"vf\" );\n-}"}, {"sha": "edac6764fc27c08e709b2d51596f90618ec407e4", "filename": "gcc/testsuite/gcc.dg/vmx/ldl-vsx-be-order.c", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fldl-vsx-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,45 +0,0 @@\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned long long svul[2] __attribute__ ((aligned (16)));\n-static double svd[2] __attribute__ ((aligned (16)));\n-\n-static void init ()\n-{\n-  unsigned int i;\n-  for (i = 0; i < 2; ++i)\n-    {\n-      svul[i] = i;\n-      svd[i] = i * 1.0;\n-    }\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned long long evul = {1,0};\n-  vector double evd = {1.0,0.0};\n-#else\n-  vector unsigned long long evul = {0,1};\n-  vector double evd = {0.0,1.0};\n-#endif\n-\n-  vector unsigned long long vul;\n-  vector double vd;\n-  unsigned i;\n-\n-  init ();\n-\n-  vul = vec_ldl (0, (vector unsigned long long *)svul);\n-  vd  = vec_ldl (0, (vector double *)svd);\n-\n-  for (i = 0; i < 2; ++i)\n-    {\n-      check (vul[i] == evul[i], \"vul\");\n-      check (vd[i]  == evd[i],  \"vd\" );\n-    }\n-}"}, {"sha": "4cc0d4490e58e87b272440634868c31175e9a58a", "filename": "gcc/testsuite/gcc.dg/vmx/merge-be-order.c", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,97 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  /* Input vectors.  */\n-  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector unsigned char vucb\n-    = {16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n-  vector signed char vsca\n-    = {-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1};\n-  vector signed char vscb = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n-  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n-  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n-  vector signed short vssb = {0,1,2,3,4,5,6,7};\n-  vector unsigned int vuia = {0,1,2,3};\n-  vector unsigned int vuib = {4,5,6,7};\n-  vector signed int vsia = {-4,-3,-2,-1};\n-  vector signed int vsib = {0,1,2,3};\n-  vector float vfa = {-4.0,-3.0,-2.0,-1.0};\n-  vector float vfb = {0.0,1.0,2.0,3.0};\n-\n-  /* Result vectors.  */\n-  vector unsigned char vuch, vucl;\n-  vector signed char vsch, vscl;\n-  vector unsigned short vush, vusl;\n-  vector signed short vssh, vssl;\n-  vector unsigned int vuih, vuil;\n-  vector signed int vsih, vsil;\n-  vector float vfh, vfl;\n-\n-  /* Expected result vectors.  */\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char vucrh = {24,8,25,9,26,10,27,11,28,12,29,13,30,14,31,15};\n-  vector unsigned char vucrl = {16,0,17,1,18,2,19,3,20,4,21,5,22,6,23,7};\n-  vector signed char vscrh = {8,-8,9,-7,10,-6,11,-5,12,-4,13,-3,14,-2,15,-1};\n-  vector signed char vscrl = {0,-16,1,-15,2,-14,3,-13,4,-12,5,-11,6,-10,7,-9};\n-  vector unsigned short vusrh = {12,4,13,5,14,6,15,7};\n-  vector unsigned short vusrl = {8,0,9,1,10,2,11,3};\n-  vector signed short vssrh = {4,-4,5,-3,6,-2,7,-1};\n-  vector signed short vssrl = {0,-8,1,-7,2,-6,3,-5};\n-  vector unsigned int vuirh = {6,2,7,3};\n-  vector unsigned int vuirl = {4,0,5,1};\n-  vector signed int vsirh = {2,-2,3,-1};\n-  vector signed int vsirl = {0,-4,1,-3};\n-  vector float vfrh = {2.0,-2.0,3.0,-1.0};\n-  vector float vfrl = {0.0,-4.0,1.0,-3.0};\n-#else\n-  vector unsigned char vucrh = {0,16,1,17,2,18,3,19,4,20,5,21,6,22,7,23};\n-  vector unsigned char vucrl = {8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31};\n-  vector signed char vscrh = {-16,0,-15,1,-14,2,-13,3,-12,4,-11,5,-10,6,-9,7};\n-  vector signed char vscrl = {-8,8,-7,9,-6,10,-5,11,-4,12,-3,13,-2,14,-1,15};\n-  vector unsigned short vusrh = {0,8,1,9,2,10,3,11};\n-  vector unsigned short vusrl = {4,12,5,13,6,14,7,15};\n-  vector signed short vssrh = {-8,0,-7,1,-6,2,-5,3};\n-  vector signed short vssrl = {-4,4,-3,5,-2,6,-1,7};\n-  vector unsigned int vuirh = {0,4,1,5};\n-  vector unsigned int vuirl = {2,6,3,7};\n-  vector signed int vsirh = {-4,0,-3,1};\n-  vector signed int vsirl = {-2,2,-1,3};\n-  vector float vfrh = {-4.0,0.0,-3.0,1.0};\n-  vector float vfrl = {-2.0,2.0,-1.0,3.0};\n-#endif\n-\n-  vuch = vec_mergeh (vuca, vucb);\n-  vucl = vec_mergel (vuca, vucb);\n-  vsch = vec_mergeh (vsca, vscb);\n-  vscl = vec_mergel (vsca, vscb);\n-  vush = vec_mergeh (vusa, vusb);\n-  vusl = vec_mergel (vusa, vusb);\n-  vssh = vec_mergeh (vssa, vssb);\n-  vssl = vec_mergel (vssa, vssb);\n-  vuih = vec_mergeh (vuia, vuib);\n-  vuil = vec_mergel (vuia, vuib);\n-  vsih = vec_mergeh (vsia, vsib);\n-  vsil = vec_mergel (vsia, vsib);\n-  vfh  = vec_mergeh (vfa,  vfb );\n-  vfl  = vec_mergel (vfa,  vfb );\n-\n-  check (vec_all_eq (vuch, vucrh), \"vuch\");\n-  check (vec_all_eq (vucl, vucrl), \"vucl\");\n-  check (vec_all_eq (vsch, vscrh), \"vsch\");\n-  check (vec_all_eq (vscl, vscrl), \"vscl\");\n-  check (vec_all_eq (vush, vusrh), \"vush\");\n-  check (vec_all_eq (vusl, vusrl), \"vusl\");\n-  check (vec_all_eq (vssh, vssrh), \"vssh\");\n-  check (vec_all_eq (vssl, vssrl), \"vssl\");\n-  check (vec_all_eq (vuih, vuirh), \"vuih\");\n-  check (vec_all_eq (vuil, vuirl), \"vuil\");\n-  check (vec_all_eq (vsih, vsirh), \"vsih\");\n-  check (vec_all_eq (vsil, vsirl), \"vsil\");\n-  check (vec_all_eq (vfh,  vfrh),  \"vfh\");\n-  check (vec_all_eq (vfl,  vfrl),  \"vfl\");\n-}"}, {"sha": "67193278ae63aa14a8f5bb7736f33738d41d6555", "filename": "gcc/testsuite/gcc.dg/vmx/merge-vsx-be-order.c", "status": "removed", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,85 +0,0 @@\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n-\n-#include \"harness.h\"\n-\n-static int vec_long_long_eq (vector long long x, vector long long y)\n-{\n-  return (x[0] == y[0] && x[1] == y[1]);\n-}\n-\n-static int vec_double_eq (vector double x, vector double y)\n-{\n-  return (x[0] == y[0] && x[1] == y[1]);\n-}\n-\n-static void test()\n-{\n-  /* Input vectors.  */\n-  vector long long vla = {-2,-1};\n-  vector long long vlb = {0,1};\n-  vector double vda = {-2.0,-1.0};\n-  vector double vdb = {0.0,1.0};\n-  vector unsigned int vuia = {0,1,2,3};\n-  vector unsigned int vuib = {4,5,6,7};\n-  vector signed int vsia = {-4,-3,-2,-1};\n-  vector signed int vsib = {0,1,2,3};\n-  vector float vfa = {-4.0,-3.0,-2.0,-1.0};\n-  vector float vfb = {0.0,1.0,2.0,3.0};\n-\n-  /* Result vectors.  */\n-  vector long long vlh, vll;\n-  vector double vdh, vdl;\n-  vector unsigned int vuih, vuil;\n-  vector signed int vsih, vsil;\n-  vector float vfh, vfl;\n-\n-  /* Expected result vectors.  */\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector long long vlrh = {1,-1};\n-  vector long long vlrl = {0,-2};\n-  vector double vdrh = {1.0,-1.0};\n-  vector double vdrl = {0.0,-2.0};\n-  vector unsigned int vuirh = {6,2,7,3};\n-  vector unsigned int vuirl = {4,0,5,1};\n-  vector signed int vsirh = {2,-2,3,-1};\n-  vector signed int vsirl = {0,-4,1,-3};\n-  vector float vfrh = {2.0,-2.0,3.0,-1.0};\n-  vector float vfrl = {0.0,-4.0,1.0,-3.0};\n-#else\n-  vector long long vlrh = {-2,0};\n-  vector long long vlrl = {-1,1};\n-  vector double vdrh = {-2.0,0.0};\n-  vector double vdrl = {-1.0,1.0};\n-  vector unsigned int vuirh = {0,4,1,5};\n-  vector unsigned int vuirl = {2,6,3,7};\n-  vector signed int vsirh = {-4,0,-3,1};\n-  vector signed int vsirl = {-2,2,-1,3};\n-  vector float vfrh = {-4.0,0.0,-3.0,1.0};\n-  vector float vfrl = {-2.0,2.0,-1.0,3.0};\n-#endif\n-\n-  vlh = vec_mergeh (vla, vlb);\n-  vll = vec_mergel (vla, vlb);\n-  vdh = vec_mergeh (vda, vdb);\n-  vdl = vec_mergel (vda, vdb);\n-  vuih = vec_mergeh (vuia, vuib);\n-  vuil = vec_mergel (vuia, vuib);\n-  vsih = vec_mergeh (vsia, vsib);\n-  vsil = vec_mergel (vsia, vsib);\n-  vfh  = vec_mergeh (vfa,  vfb );\n-  vfl  = vec_mergel (vfa,  vfb );\n-\n-  check (vec_long_long_eq (vlh, vlrh), \"vlh\");\n-  check (vec_long_long_eq (vll, vlrl), \"vll\");\n-  check (vec_double_eq (vdh, vdrh), \"vdh\" );\n-  check (vec_double_eq (vdl, vdrl), \"vdl\" );\n-  check (vec_all_eq (vuih, vuirh), \"vuih\");\n-  check (vec_all_eq (vuil, vuirl), \"vuil\");\n-  check (vec_all_eq (vsih, vsirh), \"vsih\");\n-  check (vec_all_eq (vsil, vsirl), \"vsil\");\n-  check (vec_all_eq (vfh,  vfrh),  \"vfh\");\n-  check (vec_all_eq (vfl,  vfrl),  \"vfl\");\n-}"}, {"sha": "84a89515b0df556e4f6e72980eccec2a3aa3fb42", "filename": "gcc/testsuite/gcc.dg/vmx/mult-even-odd-be-order.c", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmult-even-odd-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,65 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  volatile vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  volatile vector unsigned char vucb = {2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3};\n-  volatile vector signed char vsca = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  volatile vector signed char vscb = {2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3,2,-3};\n-  volatile vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n-  volatile vector unsigned short vusb = {2,3,2,3,2,3,2,3};\n-  volatile vector signed short vssa = {-4,-3,-2,-1,0,1,2,3};\n-  volatile vector signed short vssb = {2,-3,2,-3,2,-3,2,-3};\n-  volatile vector unsigned short vuse, vuso;\n-  volatile vector signed short vsse, vsso;\n-  volatile vector unsigned int vuie, vuio;\n-  volatile vector signed int vsie, vsio;\n-\n-  vuse = vec_mule (vuca, vucb);\n-  vuso = vec_mulo (vuca, vucb);\n-  vsse = vec_mule (vsca, vscb);\n-  vsso = vec_mulo (vsca, vscb);\n-  vuie = vec_mule (vusa, vusb);\n-  vuio = vec_mulo (vusa, vusb);\n-  vsie = vec_mule (vssa, vssb);\n-  vsio = vec_mulo (vssa, vssb);\n-\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  check (vec_all_eq (vuse,\n-\t\t     ((vector unsigned short){3,9,15,21,27,33,39,45})),\n-\t \"vuse\");\n-  check (vec_all_eq (vuso,\n-\t\t     ((vector unsigned short){0,4,8,12,16,20,24,28})),\n-\t \"vuso\");\n-  check (vec_all_eq (vsse,\n-\t\t     ((vector signed short){21,15,9,3,-3,-9,-15,-21})),\n-\t \"vsse\");\n-  check (vec_all_eq (vsso,\n-\t\t     ((vector signed short){-16,-12,-8,-4,0,4,8,12})),\n-\t \"vsso\");\n-  check (vec_all_eq (vuie, ((vector unsigned int){3,9,15,21})), \"vuie\");\n-  check (vec_all_eq (vuio, ((vector unsigned int){0,4,8,12})), \"vuio\");\n-  check (vec_all_eq (vsie, ((vector signed int){9,3,-3,-9})), \"vsie\");\n-  check (vec_all_eq (vsio, ((vector signed int){-8,-4,0,4})), \"vsio\");\n-#else\n-  check (vec_all_eq (vuse,\n-\t\t     ((vector unsigned short){0,4,8,12,16,20,24,28})),\n-\t \"vuse\");\n-  check (vec_all_eq (vuso,\n-\t\t     ((vector unsigned short){3,9,15,21,27,33,39,45})),\n-\t \"vuso\");\n-  check (vec_all_eq (vsse,\n-\t\t     ((vector signed short){-16,-12,-8,-4,0,4,8,12})),\n-\t \"vsse\");\n-  check (vec_all_eq (vsso,\n-\t\t     ((vector signed short){21,15,9,3,-3,-9,-15,-21})),\n-\t \"vsso\");\n-  check (vec_all_eq (vuie, ((vector unsigned int){0,4,8,12})), \"vuie\");\n-  check (vec_all_eq (vuio, ((vector unsigned int){3,9,15,21})), \"vuio\");\n-  check (vec_all_eq (vsie, ((vector signed int){-8,-4,0,4})), \"vsie\");\n-  check (vec_all_eq (vsio, ((vector signed int){9,3,-3,-9})), \"vsio\");\n-#endif\n-}"}, {"sha": "3e71b3130a1f93c6feff41c2f04c10f5e099df6b", "filename": "gcc/testsuite/gcc.dg/vmx/pack-be-order.c", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fpack-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,137 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-#define BIG 4294967295\n-\n-static void test()\n-{\n-  /* Input vectors.  */\n-  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n-  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n-  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n-  vector signed short vssb = {0,1,2,3,4,5,6,7};\n-  vector bool short vbsa = {0,65535,65535,0,0,0,65535,0};\n-  vector bool short vbsb = {65535,0,0,65535,65535,65535,0,65535};\n-  vector unsigned int vuia = {0,1,2,3};\n-  vector unsigned int vuib = {4,5,6,7};\n-  vector signed int vsia = {-4,-3,-2,-1};\n-  vector signed int vsib = {0,1,2,3};\n-  vector bool int vbia = {0,BIG,BIG,BIG};\n-  vector bool int vbib = {BIG,0,0,0};\n-  vector unsigned int vipa = {(0<<24) + (2<<19) + (3<<11) + (4<<3),\n-\t\t\t      (1<<24) + (5<<19) + (6<<11) + (7<<3),\n-\t\t\t      (0<<24) + (8<<19) + (9<<11) + (10<<3),\n-\t\t\t      (1<<24) + (11<<19) + (12<<11) + (13<<3)};\n-  vector unsigned int vipb = {(1<<24) + (14<<19) + (15<<11) + (16<<3),\n-\t\t\t      (0<<24) + (17<<19) + (18<<11) + (19<<3),\n-\t\t\t      (1<<24) + (20<<19) + (21<<11) + (22<<3),\n-\t\t\t      (0<<24) + (23<<19) + (24<<11) + (25<<3)};\n-  vector unsigned short vusc = {0,256,1,257,2,258,3,259};\n-  vector unsigned short vusd = {4,260,5,261,6,262,7,263};\n-  vector signed short vssc = {-1,-128,0,127,-2,-129,1,128};\n-  vector signed short vssd = {-3,-130,2,129,-4,-131,3,130};\n-  vector unsigned int vuic = {0,65536,1,65537};\n-  vector unsigned int vuid = {2,65538,3,65539};\n-  vector signed int vsic = {-1,-32768,0,32767};\n-  vector signed int vsid = {-2,-32769,1,32768};\n-\n-  /* Result vectors.  */\n-  vector unsigned char vucr;\n-  vector signed char vscr;\n-  vector bool char vbcr;\n-  vector unsigned short vusr;\n-  vector signed short vssr;\n-  vector bool short vbsr;\n-  vector pixel vpr;\n-  vector unsigned char vucsr;\n-  vector signed char vscsr;\n-  vector unsigned short vussr;\n-  vector signed short vsssr;\n-  vector unsigned char vucsur1, vucsur2;\n-  vector unsigned short vussur1, vussur2;\n-\n-  /* Expected result vectors.  */\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char vucer = {8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7};\n-  vector signed char vscer = {0,1,2,3,4,5,6,7,-8,-7,-6,-5,-4,-3,-2,-1};\n-  vector bool char vbcer = {255,0,0,255,255,255,0,255,0,255,255,0,0,0,255,0};\n-  vector unsigned short vuser = {4,5,6,7,0,1,2,3};\n-  vector signed short vsser = {0,1,2,3,-4,-3,-2,-1};\n-  vector bool short vbser = {65535,0,0,0,0,65535,65535,65535};\n-  vector pixel vper = {(1<<15) + (14<<10) + (15<<5) + 16,\n-\t\t       (0<<15) + (17<<10) + (18<<5) + 19,\n-\t\t       (1<<15) + (20<<10) + (21<<5) + 22,\n-\t\t       (0<<15) + (23<<10) + (24<<5) + 25,\n-\t\t       (0<<15) + (2<<10) + (3<<5) + 4,\n-\t\t       (1<<15) + (5<<10) + (6<<5) + 7,\n-\t\t       (0<<15) + (8<<10) + (9<<5) + 10,\n-\t\t       (1<<15) + (11<<10) + (12<<5) + 13};\n-  vector unsigned char vucser = {4,255,5,255,6,255,7,255,0,255,1,255,2,255,3,255};\n-  vector signed char vscser = {-3,-128,2,127,-4,-128,3,127,\n-\t\t\t       -1,-128,0,127,-2,-128,1,127};\n-  vector unsigned short vusser = {2,65535,3,65535,0,65535,1,65535};\n-  vector signed short vssser = {-2,-32768,1,32767,-1,-32768,0,32767};\n-  vector unsigned char vucsuer1 = {4,255,5,255,6,255,7,255,0,255,1,255,2,255,3,255};\n-  vector unsigned char vucsuer2 = {0,0,2,129,0,0,3,130,0,0,0,127,0,0,1,128};\n-  vector unsigned short vussuer1 = {2,65535,3,65535,0,65535,1,65535};\n-  vector unsigned short vussuer2 = {0,0,1,32768,0,0,0,32767};\n-#else\n-  vector unsigned char vucer = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char vscer = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector bool char vbcer = {0,255,255,0,0,0,255,0,255,0,0,255,255,255,0,255};\n-  vector unsigned short vuser = {0,1,2,3,4,5,6,7};\n-  vector signed short vsser = {-4,-3,-2,-1,0,1,2,3};\n-  vector bool short vbser = {0,65535,65535,65535,65535,0,0,0};\n-  vector pixel vper = {(0<<15) + (2<<10) + (3<<5) + 4,\n-\t\t       (1<<15) + (5<<10) + (6<<5) + 7,\n-\t\t       (0<<15) + (8<<10) + (9<<5) + 10,\n-\t\t       (1<<15) + (11<<10) + (12<<5) + 13,\n-\t\t       (1<<15) + (14<<10) + (15<<5) + 16,\n-\t\t       (0<<15) + (17<<10) + (18<<5) + 19,\n-\t\t       (1<<15) + (20<<10) + (21<<5) + 22,\n-\t\t       (0<<15) + (23<<10) + (24<<5) + 25};\n-  vector unsigned char vucser = {0,255,1,255,2,255,3,255,4,255,5,255,6,255,7,255};\n-  vector signed char vscser = {-1,-128,0,127,-2,-128,1,127,\n-\t\t\t       -3,-128,2,127,-4,-128,3,127};\n-  vector unsigned short vusser = {0,65535,1,65535,2,65535,3,65535};\n-  vector signed short vssser = {-1,-32768,0,32767,-2,-32768,1,32767};\n-  vector unsigned char vucsuer1 = {0,255,1,255,2,255,3,255,4,255,5,255,6,255,7,255};\n-  vector unsigned char vucsuer2 = {0,0,0,127,0,0,1,128,0,0,2,129,0,0,3,130};\n-  vector unsigned short vussuer1 = {0,65535,1,65535,2,65535,3,65535};\n-  vector unsigned short vussuer2 = {0,0,0,32767,0,0,1,32768};\n-#endif\n-\n-  vucr = vec_pack (vusa, vusb);\n-  vscr = vec_pack (vssa, vssb);\n-  vbcr = vec_pack (vbsa, vbsb);\n-  vusr = vec_pack (vuia, vuib);\n-  vssr = vec_pack (vsia, vsib);\n-  vbsr = vec_pack (vbia, vbib);\n-  vpr  = vec_packpx (vipa, vipb);\n-  vucsr = vec_packs (vusc, vusd);\n-  vscsr = vec_packs (vssc, vssd);\n-  vussr = vec_packs (vuic, vuid);\n-  vsssr = vec_packs (vsic, vsid);\n-  vucsur1 = vec_packsu (vusc, vusd);\n-  vucsur2 = vec_packsu (vssc, vssd);\n-  vussur1 = vec_packsu (vuic, vuid);\n-  vussur2 = vec_packsu (vsic, vsid);\n-\n-  check (vec_all_eq (vucr, vucer), \"vucr\");\n-  check (vec_all_eq (vscr, vscer), \"vscr\");\n-  check (vec_all_eq (vbcr, vbcer), \"vbcr\");\n-  check (vec_all_eq (vusr, vuser), \"vusr\");\n-  check (vec_all_eq (vssr, vsser), \"vssr\");\n-  check (vec_all_eq (vbsr, vbser), \"vbsr\");\n-  check (vec_all_eq (vpr,  vper ), \"vpr\" );\n-  check (vec_all_eq (vucsr, vucser), \"vucsr\");\n-  check (vec_all_eq (vscsr, vscser), \"vscsr\");\n-  check (vec_all_eq (vussr, vusser), \"vussr\");\n-  check (vec_all_eq (vsssr, vssser), \"vsssr\");\n-  check (vec_all_eq (vucsur1, vucsuer1), \"vucsur1\");\n-  check (vec_all_eq (vucsur2, vucsuer2), \"vucsur2\");\n-  check (vec_all_eq (vussur1, vussuer1), \"vussur1\");\n-  check (vec_all_eq (vussur2, vussuer2), \"vussur2\");\n-}"}, {"sha": "3a7942840f52d4ac1ab73537d969f729ade47a7d", "filename": "gcc/testsuite/gcc.dg/vmx/perm-be-order.c", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fperm-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,75 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  /* Input vectors.  */\n-  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector unsigned char vucb = {16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n-  vector signed char vsca = {-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1};\n-  vector signed char vscb = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n-  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n-  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n-  vector signed short vssb = {0,1,2,3,4,5,6,7};\n-  vector unsigned int vuia = {0,1,2,3};\n-  vector unsigned int vuib = {4,5,6,7};\n-  vector signed int vsia = {-4,-3,-2,-1};\n-  vector signed int vsib = {0,1,2,3};\n-  vector float vfa = {-4.0,-3.0,-2.0,-1.0};\n-  vector float vfb = {0.0,1.0,2.0,3.0};\n-\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char vucp = {15,16,14,17,13,18,12,19,11,20,10,21,9,22,8,23};\n-  vector unsigned char vscp = {15,16,14,17,13,18,12,19,11,20,10,21,9,22,8,23};\n-  vector unsigned char vusp = {15,14,17,16,13,12,19,18,11,10,21,20,9,8,23,22};\n-  vector unsigned char vssp = {15,14,17,16,13,12,19,18,11,10,21,20,9,8,23,22};\n-  vector unsigned char vuip = {15,14,13,12,19,18,17,16,11,10,9,8,23,22,21,20};\n-  vector unsigned char vsip = {15,14,13,12,19,18,17,16,11,10,9,8,23,22,21,20};\n-  vector unsigned char vfp  = {15,14,13,12,19,18,17,16,11,10,9,8,23,22,21,20};\n-#else\n-  vector unsigned char vucp = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n-  vector unsigned char vscp = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n-  vector unsigned char vusp = {0,1,30,31,2,3,28,29,4,5,26,27,6,7,24,25};\n-  vector unsigned char vssp = {0,1,30,31,2,3,28,29,4,5,26,27,6,7,24,25};\n-  vector unsigned char vuip = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n-  vector unsigned char vsip = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n-  vector unsigned char vfp  = {0,1,2,3,28,29,30,31,4,5,6,7,24,25,26,27};\n-#endif\n-\n-  /* Result vectors.  */\n-  vector unsigned char vuc;\n-  vector signed char vsc;\n-  vector unsigned short vus;\n-  vector signed short vss;\n-  vector unsigned int vui;\n-  vector signed int vsi;\n-  vector float vf;\n-\n-  /* Expected result vectors.  */\n-  vector unsigned char vucr = {0,31,1,30,2,29,3,28,4,27,5,26,6,25,7,24};\n-  vector signed char vscr = {-16,15,-15,14,-14,13,-13,12,-12,11,-11,10,-10,9,-9,8};\n-  vector unsigned short vusr = {0,15,1,14,2,13,3,12};\n-  vector signed short vssr = {-8,7,-7,6,-6,5,-5,4};\n-  vector unsigned int vuir = {0,7,1,6};\n-  vector signed int vsir = {-4,3,-3,2};\n-  vector float vfr = {-4.0,3.0,-3.0,2.0};\n-\n-  vuc = vec_perm (vuca, vucb, vucp);\n-  vsc = vec_perm (vsca, vscb, vscp);\n-  vus = vec_perm (vusa, vusb, vusp);\n-  vss = vec_perm (vssa, vssb, vssp);\n-  vui = vec_perm (vuia, vuib, vuip);\n-  vsi = vec_perm (vsia, vsib, vsip);\n-  vf  = vec_perm (vfa,  vfb,  vfp );\n-\n-  check (vec_all_eq (vuc, vucr), \"vuc\");\n-  check (vec_all_eq (vsc, vscr), \"vsc\");\n-  check (vec_all_eq (vus, vusr), \"vus\");\n-  check (vec_all_eq (vss, vssr), \"vss\");\n-  check (vec_all_eq (vui, vuir), \"vui\");\n-  check (vec_all_eq (vsi, vsir), \"vsi\");\n-  check (vec_all_eq (vf,  vfr),  \"vf\" );\n-}"}, {"sha": "96d086939ef31551dd097fa2f50851f3d59617b1", "filename": "gcc/testsuite/gcc.dg/vmx/splat-be-order.c", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsplat-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsplat-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsplat-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,60 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  /* Input vectors.  */\n-  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n-  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n-  vector unsigned int vui = {0,1,2,3};\n-  vector signed int vsi = {-2,-1,0,1};\n-  vector float vf = {-2.0,-1.0,0.0,1.0};\n-\n-  /* Result vectors.  */\n-  vector unsigned char vucr;\n-  vector signed char vscr;\n-  vector unsigned short vusr;\n-  vector signed short vssr;\n-  vector unsigned int vuir;\n-  vector signed int vsir;\n-  vector float vfr;\n-\n-  /* Expected result vectors.  */\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char vucer = {14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14};\n-  vector signed char vscer = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};\n-  vector unsigned short vuser = {0,0,0,0,0,0,0,0};\n-  vector signed short vsser = {3,3,3,3,3,3,3,3};\n-  vector unsigned int vuier = {1,1,1,1};\n-  vector signed int vsier = {-2,-2,-2,-2};\n-  vector float vfer = {0.0,0.0,0.0,0.0};\n-#else\n-  vector unsigned char vucer = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n-  vector signed char vscer = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n-  vector unsigned short vuser = {7,7,7,7,7,7,7,7};\n-  vector signed short vsser = {-4,-4,-4,-4,-4,-4,-4,-4};\n-  vector unsigned int vuier = {2,2,2,2};\n-  vector signed int vsier = {1,1,1,1};\n-  vector float vfer = {-1.0,-1.0,-1.0,-1.0};\n-#endif\n-\n-  vucr = vec_splat (vuc, 1);\n-  vscr = vec_splat (vsc, 8);\n-  vusr = vec_splat (vus, 7);\n-  vssr = vec_splat (vss, 0);\n-  vuir = vec_splat (vui, 2);\n-  vsir = vec_splat (vsi, 3);\n-  vfr  = vec_splat (vf,  1);\n-\n-  check (vec_all_eq (vucr, vucer), \"vuc\");\n-  check (vec_all_eq (vscr, vscer), \"vsc\");\n-  check (vec_all_eq (vusr, vuser), \"vus\");\n-  check (vec_all_eq (vssr, vsser), \"vss\");\n-  check (vec_all_eq (vuir, vuier), \"vui\");\n-  check (vec_all_eq (vsir, vsier), \"vsi\");\n-  check (vec_all_eq (vfr,  vfer ), \"vf\");\n-}"}, {"sha": "e0dca6b5dfb0027ce810aad490ec48f9dd63e9bd", "filename": "gcc/testsuite/gcc.dg/vmx/splat-vsx-be-order.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsplat-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsplat-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsplat-vsx-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,38 +0,0 @@\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  /* Input vectors.  */\n-  vector unsigned int vui = {0,1,2,3};\n-  vector signed int vsi = {-2,-1,0,1};\n-  vector float vf = {-2.0,-1.0,0.0,1.0};\n-\n-  /* Result vectors.  */\n-  vector unsigned int vuir;\n-  vector signed int vsir;\n-  vector float vfr;\n-\n-  /* Expected result vectors.  */\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned int vuier = {1,1,1,1};\n-  vector signed int vsier = {-2,-2,-2,-2};\n-  vector float vfer = {0.0,0.0,0.0,0.0};\n-#else\n-  vector unsigned int vuier = {2,2,2,2};\n-  vector signed int vsier = {1,1,1,1};\n-  vector float vfer = {-1.0,-1.0,-1.0,-1.0};\n-#endif\n-\n-  vuir = vec_splat (vui, 2);\n-  vsir = vec_splat (vsi, 3);\n-  vfr  = vec_splat (vf,  1);\n-\n-  check (vec_all_eq (vuir, vuier), \"vui\");\n-  check (vec_all_eq (vsir, vsier), \"vsi\");\n-  check (vec_all_eq (vfr,  vfer ), \"vf\");\n-}"}, {"sha": "e1cd826665a4752e787c1af39ecdc6f18edb4205", "filename": "gcc/testsuite/gcc.dg/vmx/st-be-order.c", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,84 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned char svuc[16] __attribute__ ((aligned (16)));\n-static signed char svsc[16] __attribute__ ((aligned (16)));\n-static unsigned char svbc[16] __attribute__ ((aligned (16)));\n-static unsigned short svus[8] __attribute__ ((aligned (16)));\n-static signed short svss[8] __attribute__ ((aligned (16)));\n-static unsigned short svbs[8] __attribute__ ((aligned (16)));\n-static unsigned short svp[8] __attribute__ ((aligned (16)));\n-static unsigned int svui[4] __attribute__ ((aligned (16)));\n-static signed int svsi[4] __attribute__ ((aligned (16)));\n-static unsigned int svbi[4] __attribute__ ((aligned (16)));\n-static float svf[4] __attribute__ ((aligned (16)));\n-\n-static void check_arrays ()\n-{\n-  unsigned int i;\n-  for (i = 0; i < 16; ++i)\n-    {\n-      check (svuc[i] == i, \"svuc\");\n-      check (svsc[i] == i - 8, \"svsc\");\n-      check (svbc[i] == ((i % 2) ? 0xff : 0), \"svbc\");\n-    }\n-  for (i = 0; i < 8; ++i)\n-    {\n-      check (svus[i] == i, \"svus\");\n-      check (svss[i] == i - 4, \"svss\");\n-      check (svbs[i] == ((i % 2) ? 0xffff : 0), \"svbs\");\n-      check (svp[i] == i, \"svp\");\n-    }\n-  for (i = 0; i < 4; ++i)\n-    {\n-      check (svui[i] == i, \"svui\");\n-      check (svsi[i] == i - 2, \"svsi\");\n-      check (svbi[i] == ((i % 2) ? 0xffffffff : 0), \"svbi\");\n-      check (svf[i] == i * 1.0f, \"svf\");\n-    }\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char vuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n-  vector signed char vsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n-  vector bool char vbc = {255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};\n-  vector unsigned short vus = {7,6,5,4,3,2,1,0};\n-  vector signed short vss = {3,2,1,0,-1,-2,-3,-4};\n-  vector bool short vbs = {65535,0,65535,0,65535,0,65535,0};\n-  vector pixel vp = {7,6,5,4,3,2,1,0};\n-  vector unsigned int vui = {3,2,1,0};\n-  vector signed int vsi = {1,0,-1,-2};\n-  vector bool int vbi = {0xffffffff,0,0xffffffff,0};\n-  vector float vf = {3.0,2.0,1.0,0.0};\n-#else\n-  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector bool char vbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n-  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n-  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n-  vector bool short vbs = {0,65535,0,65535,0,65535,0,65535};\n-  vector pixel vp = {0,1,2,3,4,5,6,7};\n-  vector unsigned int vui = {0,1,2,3};\n-  vector signed int vsi = {-2,-1,0,1};\n-  vector bool int vbi = {0,0xffffffff,0,0xffffffff};\n-  vector float vf = {0.0,1.0,2.0,3.0};\n-#endif\n-\n-  vec_st (vuc, 0, (vector unsigned char *)svuc);\n-  vec_st (vsc, 0, (vector signed char *)svsc);\n-  vec_st (vbc, 0, (vector bool char *)svbc);\n-  vec_st (vus, 0, (vector unsigned short *)svus);\n-  vec_st (vss, 0, (vector signed short *)svss);\n-  vec_st (vbs, 0, (vector bool short *)svbs);\n-  vec_st (vp,  0, (vector pixel *)svp);\n-  vec_st (vui, 0, (vector unsigned int *)svui);\n-  vec_st (vsi, 0, (vector signed int *)svsi);\n-  vec_st (vbi, 0, (vector bool int *)svbi);\n-  vec_st (vf,  0, (vector float *)svf);\n-\n-  check_arrays ();\n-}"}, {"sha": "1ce8f41552e73d3902bd2355cfc5ddf8a40ad3f4", "filename": "gcc/testsuite/gcc.dg/vmx/st-vsx-be-order.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fst-vsx-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,35 +0,0 @@\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned long long svul[2] __attribute__ ((aligned (16)));\n-static double svd[2] __attribute__ ((aligned (16)));\n-\n-static void check_arrays ()\n-{\n-  unsigned int i;\n-  for (i = 0; i < 2; ++i)\n-    {\n-      check (svul[i] == i, \"svul\");\n-      check (svd[i] == i * 1.0, \"svd\");\n-    }\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned long long vul = {1,0};\n-  vector double vd = {1.0,0.0};\n-#else\n-  vector unsigned long long vul = {0,1};\n-  vector double vd = {0.0,1.0};\n-#endif\n-\n-  vec_st (vul, 0, (vector unsigned long long *)svul);\n-  vec_st (vd,  0, (vector double *)svd);\n-\n-  check_arrays ();\n-}"}, {"sha": "cfc6877af3cc7855c510e2c76a8fb8fd5bb719b6", "filename": "gcc/testsuite/gcc.dg/vmx/ste-be-order.c", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fste-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,54 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned char svuc[16] __attribute__ ((aligned (16)));\n-static signed char svsc[16] __attribute__ ((aligned (16)));\n-static unsigned short svus[8] __attribute__ ((aligned (16)));\n-static signed short svss[8] __attribute__ ((aligned (16)));\n-static unsigned int svui[4] __attribute__ ((aligned (16)));\n-static signed int svsi[4] __attribute__ ((aligned (16)));\n-static float svf[4] __attribute__ ((aligned (16)));\n-\n-static void check_arrays ()\n-{\n-  check (svuc[9] == 9, \"svuc\");\n-  check (svsc[14] == 6, \"svsc\");\n-  check (svus[7] == 7, \"svus\");\n-  check (svss[1] == -3, \"svss\");\n-  check (svui[3] == 3, \"svui\");\n-  check (svsi[2] == 0, \"svsi\");\n-  check (svf[0] == 0.0, \"svf\");\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char vuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n-  vector signed char vsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n-  vector unsigned short vus = {7,6,5,4,3,2,1,0};\n-  vector signed short vss = {3,2,1,0,-1,-2,-3,-4};\n-  vector unsigned int vui = {3,2,1,0};\n-  vector signed int vsi = {1,0,-1,-2};\n-  vector float vf = {3.0,2.0,1.0,0.0};\n-#else\n-  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n-  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n-  vector unsigned int vui = {0,1,2,3};\n-  vector signed int vsi = {-2,-1,0,1};\n-  vector float vf = {0.0,1.0,2.0,3.0};\n-#endif\n-\n-  vec_ste (vuc, 9*1, (unsigned char *)svuc);\n-  vec_ste (vsc, 14*1, (signed char *)svsc);\n-  vec_ste (vus, 7*2, (unsigned short *)svus);\n-  vec_ste (vss, 1*2, (signed short *)svss);\n-  vec_ste (vui, 3*4, (unsigned int *)svui);\n-  vec_ste (vsi, 2*4, (signed int *)svsi);\n-  vec_ste (vf,  0*4, (float *)svf);\n-\n-  check_arrays ();\n-}"}, {"sha": "28fd9e77454b00d48ba3fe1cb46a9e9d54e1c4e9", "filename": "gcc/testsuite/gcc.dg/vmx/stl-be-order.c", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,84 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned char svuc[16] __attribute__ ((aligned (16)));\n-static signed char svsc[16] __attribute__ ((aligned (16)));\n-static unsigned char svbc[16] __attribute__ ((aligned (16)));\n-static unsigned short svus[8] __attribute__ ((aligned (16)));\n-static signed short svss[8] __attribute__ ((aligned (16)));\n-static unsigned short svbs[8] __attribute__ ((aligned (16)));\n-static unsigned short svp[8] __attribute__ ((aligned (16)));\n-static unsigned int svui[4] __attribute__ ((aligned (16)));\n-static signed int svsi[4] __attribute__ ((aligned (16)));\n-static unsigned int svbi[4] __attribute__ ((aligned (16)));\n-static float svf[4] __attribute__ ((aligned (16)));\n-\n-static void check_arrays ()\n-{\n-  unsigned int i;\n-  for (i = 0; i < 16; ++i)\n-    {\n-      check (svuc[i] == i, \"svuc\");\n-      check (svsc[i] == i - 8, \"svsc\");\n-      check (svbc[i] == ((i % 2) ? 0xff : 0), \"svbc\");\n-    }\n-  for (i = 0; i < 8; ++i)\n-    {\n-      check (svus[i] == i, \"svus\");\n-      check (svss[i] == i - 4, \"svss\");\n-      check (svbs[i] == ((i % 2) ? 0xffff : 0), \"svbs\");\n-      check (svp[i] == i, \"svp\");\n-    }\n-  for (i = 0; i < 4; ++i)\n-    {\n-      check (svui[i] == i, \"svui\");\n-      check (svsi[i] == i - 2, \"svsi\");\n-      check (svbi[i] == ((i % 2) ? 0xffffffff : 0), \"svbi\");\n-      check (svf[i] == i * 1.0f, \"svf\");\n-    }\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned char vuc = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n-  vector signed char vsc = {7,6,5,4,3,2,1,0,-1,-2,-3,-4,-5,-6,-7,-8};\n-  vector bool char vbc = {255,0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};\n-  vector unsigned short vus = {7,6,5,4,3,2,1,0};\n-  vector signed short vss = {3,2,1,0,-1,-2,-3,-4};\n-  vector bool short vbs = {65535,0,65535,0,65535,0,65535,0};\n-  vector pixel vp = {7,6,5,4,3,2,1,0};\n-  vector unsigned int vui = {3,2,1,0};\n-  vector signed int vsi = {1,0,-1,-2};\n-  vector bool int vbi = {0xffffffff,0,0xffffffff,0};\n-  vector float vf = {3.0,2.0,1.0,0.0};\n-#else\n-  vector unsigned char vuc = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n-  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector bool char vbc = {0,255,0,255,0,255,0,255,0,255,0,255,0,255,0,255};\n-  vector unsigned short vus = {0,1,2,3,4,5,6,7};\n-  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n-  vector bool short vbs = {0,65535,0,65535,0,65535,0,65535};\n-  vector pixel vp = {0,1,2,3,4,5,6,7};\n-  vector unsigned int vui = {0,1,2,3};\n-  vector signed int vsi = {-2,-1,0,1};\n-  vector bool int vbi = {0,0xffffffff,0,0xffffffff};\n-  vector float vf = {0.0,1.0,2.0,3.0};\n-#endif\n-\n-  vec_stl (vuc, 0, (vector unsigned char *)svuc);\n-  vec_stl (vsc, 0, (vector signed char *)svsc);\n-  vec_stl (vbc, 0, (vector bool char *)svbc);\n-  vec_stl (vus, 0, (vector unsigned short *)svus);\n-  vec_stl (vss, 0, (vector signed short *)svss);\n-  vec_stl (vbs, 0, (vector bool short *)svbs);\n-  vec_stl (vp,  0, (vector pixel *)svp);\n-  vec_stl (vui, 0, (vector unsigned int *)svui);\n-  vec_stl (vsi, 0, (vector signed int *)svsi);\n-  vec_stl (vbi, 0, (vector bool int *)svbi);\n-  vec_stl (vf,  0, (vector float *)svf);\n-\n-  check_arrays ();\n-}"}, {"sha": "1abd3edefe94766f39f6ef785407bad131db8fda", "filename": "gcc/testsuite/gcc.dg/vmx/stl-vsx-be-order.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fstl-vsx-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,35 +0,0 @@\n-/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n-\n-#include \"harness.h\"\n-\n-static unsigned long long svul[2] __attribute__ ((aligned (16)));\n-static double svd[2] __attribute__ ((aligned (16)));\n-\n-static void check_arrays ()\n-{\n-  unsigned int i;\n-  for (i = 0; i < 2; ++i)\n-    {\n-      check (svul[i] == i, \"svul\");\n-      check (svd[i] == i * 1.0, \"svd\");\n-    }\n-}\n-\n-static void test ()\n-{\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector unsigned long long vul = {1,0};\n-  vector double vd = {1.0,0.0};\n-#else\n-  vector unsigned long long vul = {0,1};\n-  vector double vd = {0.0,1.0};\n-#endif\n-\n-  vec_stl (vul, 0, (vector unsigned long long *)svul);\n-  vec_stl (vd,  0, (vector double *)svd);\n-\n-  check_arrays ();\n-}"}, {"sha": "03c6faa0ca6d538fc65c8d29b65cffa8acc1b836", "filename": "gcc/testsuite/gcc.dg/vmx/sum2s-be-order.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsum2s-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsum2s-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsum2s-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,20 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  vector signed int vsia = {-10,1,2,3};\n-  vector signed int vsib = {100,101,102,-103};\n-  vector signed int vsir;\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector signed int vsier = {91,0,107,0};\n-#else\n-  vector signed int vsier = {0,92,0,-98};\n-#endif\n-\n-  vsir = vec_sum2s (vsia, vsib);\n-\n-  check (vec_all_eq (vsir, vsier), \"vsir\");\n-}"}, {"sha": "0d65a4fafbb728e22f48c1aa8c8c109cfcd0ce78", "filename": "gcc/testsuite/gcc.dg/vmx/unpack-be-order.c", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Funpack-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,89 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx -Wno-shift-overflow\" } */\n-\n-#include \"harness.h\"\n-\n-#define BIG 4294967295\n-\n-static void test()\n-{\n-  /* Input vectors.  */\n-  vector signed char vsc = {-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7};\n-  vector bool char vbc = {0,255,255,0,0,0,255,0,255,0,0,255,255,255,0,255};\n-  vector pixel vp = {(0<<15) + (1<<10)  + (2<<5)  + 3,\n-\t\t     (1<<15) + (4<<10)  + (5<<5)  + 6,\n-\t\t     (0<<15) + (7<<10)  + (8<<5)  + 9,\n-\t\t     (1<<15) + (10<<10) + (11<<5) + 12,\n-\t\t     (1<<15) + (13<<10) + (14<<5) + 15,\n-\t\t     (0<<15) + (16<<10) + (17<<5) + 18,\n-\t\t     (1<<15) + (19<<10) + (20<<5) + 21,\n-\t\t     (0<<15) + (22<<10) + (23<<5) + 24};\n-  vector signed short vss = {-4,-3,-2,-1,0,1,2,3};\n-  vector bool short vbs = {0,65535,65535,0,0,0,65535,0};\n-\n-  /* Result vectors.  */\n-  vector signed short vsch, vscl;\n-  vector bool short vbsh, vbsl;\n-  vector unsigned int vuih, vuil;\n-  vector signed int vsih, vsil;\n-  vector bool int vbih, vbil;\n-\n-  /* Expected result vectors.  */\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector signed short vschr = {0,1,2,3,4,5,6,7};\n-  vector signed short vsclr = {-8,-7,-6,-5,-4,-3,-2,-1};\n-  vector bool short vbshr = {65535,0,0,65535,65535,65535,0,65535};\n-  vector bool short vbslr = {0,65535,65535,0,0,0,65535,0};\n-  vector unsigned int vuihr = {(65535<<24) + (13<<16) + (14<<8) + 15,\n-\t\t\t       (0<<24)     + (16<<16) + (17<<8) + 18,\n-\t\t\t       (65535<<24) + (19<<16) + (20<<8) + 21,\n-\t\t\t       (0<<24)     + (22<<16) + (23<<8) + 24};\n-  vector unsigned int vuilr = {(0<<24)     + (1<<16)  + (2<<8)  + 3,\n-\t\t\t       (65535<<24) + (4<<16)  + (5<<8)  + 6,\n-\t\t\t       (0<<24)     + (7<<16)  + (8<<8)  + 9,\n-\t\t\t       (65535<<24) + (10<<16) + (11<<8) + 12};\n-  vector signed int vsihr = {0,1,2,3};\n-  vector signed int vsilr = {-4,-3,-2,-1};\n-  vector bool int vbihr = {0,0,BIG,0};\n-  vector bool int vbilr = {0,BIG,BIG,0};\n-#else\n-  vector signed short vschr = {-8,-7,-6,-5,-4,-3,-2,-1};\n-  vector signed short vsclr = {0,1,2,3,4,5,6,7};\n-  vector bool short vbshr = {0,65535,65535,0,0,0,65535,0};\n-  vector bool short vbslr = {65535,0,0,65535,65535,65535,0,65535};\n-  vector unsigned int vuihr = {(0<<24)     + (1<<16)  + (2<<8)  + 3,\n-\t\t\t       (65535<<24) + (4<<16)  + (5<<8)  + 6,\n-\t\t\t       (0<<24)     + (7<<16)  + (8<<8)  + 9,\n-\t\t\t       (65535<<24) + (10<<16) + (11<<8) + 12};\n-  vector unsigned int vuilr = {(65535<<24) + (13<<16) + (14<<8) + 15,\n-\t\t\t       (0<<24)     + (16<<16) + (17<<8) + 18,\n-\t\t\t       (65535<<24) + (19<<16) + (20<<8) + 21,\n-\t\t\t       (0<<24)     + (22<<16) + (23<<8) + 24};\n-  vector signed int vsihr = {-4,-3,-2,-1};\n-  vector signed int vsilr = {0,1,2,3};\n-  vector bool int vbihr = {0,BIG,BIG,0};\n-  vector bool int vbilr = {0,0,BIG,0};\n-#endif\n-\n-  vsch = vec_unpackh (vsc);\n-  vscl = vec_unpackl (vsc);\n-  vbsh = vec_unpackh (vbc);\n-  vbsl = vec_unpackl (vbc);\n-  vuih = vec_unpackh (vp);\n-  vuil = vec_unpackl (vp);\n-  vsih = vec_unpackh (vss);\n-  vsil = vec_unpackl (vss);\n-  vbih = vec_unpackh (vbs);\n-  vbil = vec_unpackl (vbs);\n-\n-  check (vec_all_eq (vsch, vschr), \"vsch\");\n-  check (vec_all_eq (vscl, vsclr), \"vscl\");\n-  check (vec_all_eq (vbsh, vbshr), \"vbsh\");\n-  check (vec_all_eq (vbsl, vbslr), \"vbsl\");\n-  check (vec_all_eq (vuih, vuihr), \"vuih\");\n-  check (vec_all_eq (vuil, vuilr), \"vuil\");\n-  check (vec_all_eq (vsih, vsihr), \"vsih\");\n-  check (vec_all_eq (vsil, vsilr), \"vsil\");\n-  check (vec_all_eq (vbih, vbihr), \"vbih\");\n-  check (vec_all_eq (vbil, vbilr), \"vbil\");\n-}"}, {"sha": "1f640e76112cda311ac72dd262e0d6fb15dc9aee", "filename": "gcc/testsuite/gcc.dg/vmx/vsums-be-order.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvsums-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvsums-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvsums-be-order.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,21 +0,0 @@\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n-\n-#include \"harness.h\"\n-\n-static void test()\n-{\n-  vector signed int va = {-7,11,-13,17};\n-\n-#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n-  vector signed int vb = {128,0,0,0};\n-  vector signed int evd = {136,0,0,0};\n-#else\n-  vector signed int vb = {0,0,0,128};\n-  vector signed int evd = {0,0,0,136};\n-#endif\n-\n-  vector signed int vd = vec_sums (va, vb);\n-\n-  check (vec_all_eq (vd, evd), \"sums\");\n-}"}, {"sha": "acf429acaa90940c0bf7d1b4959e88ad25a090a7", "filename": "gcc/testsuite/gcc.target/powerpc/vec-setup-be-double.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup-be-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup-be-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup-be-double.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do run { target { powerpc*-*-linux* } } } */\n-/* { dg-require-effective-target vsx_hw } */\n-/* { dg-options \"-O2 -mvsx\" } */\n-\n-/* Test various ways of creating vectors with 2 double words and accessing the\n-   elements.  This test uses the double datatype.\n-\n-   This test explicitly tests -maltivec=be to make sure things are correct.  */\n-\n-#define DO_DOUBLE\n-\n-#include \"vec-setup.h\""}, {"sha": "75d864eee518818c5ddd96266c9e496624d6b7e8", "filename": "gcc/testsuite/gcc.target/powerpc/vec-setup-be-long.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup-be-long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d3485e4fc1d029e620a59deb54b3f4f3f6b209/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup-be-long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup-be-long.c?ref=b4d3485e4fc1d029e620a59deb54b3f4f3f6b209", "patch": "@@ -1,15 +0,0 @@\n-/* Per PR78303, we are deprecating usage of -maltivec=be on little endian,\n-   so XFAIL this test until support is actually removed.  */\n-/* { dg-do run { target { powerpc64le*-*-linux* } } } */\n-/* { dg-xfail-run-if \"PR78303 and PR84534\" { powerpc64le*-*-linux* } } */\n-/* { dg-require-effective-target vsx_hw } */\n-/* Disable warnings to squelch deprecation message about -maltivec=be.  */\n-/* { dg-options \"-w -O2 -mvsx -maltivec=be\" } */\n-\n-/* Test various ways of creating vectors with 2 double words and accessing the\n-   elements.  This test uses the long (on 64-bit systems) or long long datatype\n-   (on 32-bit systems).\n-\n-   This test explicitly tests -maltivec=be to make sure things are correct.  */\n-\n-#include \"vec-setup.h\""}, {"sha": "79077982552cb40a2eac0482780e65564c7d3fcb", "filename": "gcc/testsuite/gcc.target/powerpc/vec-setup.h", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/427a7384b9da2cc9977fa1b1bdada06a8f4a2240/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-setup.h?ref=427a7384b9da2cc9977fa1b1bdada06a8f4a2240", "patch": "@@ -10,8 +10,7 @@\n    The endian support is:\n \n \tbig endian\n-\tlittle endian with little endian element ordering\n-\tlittle endian with big endian element ordering.  */\n+\tlittle endian.  */\n \n #ifdef DEBUG\n #include <stdio.h>\n@@ -63,21 +62,12 @@ static int errors = 0;\n #define FMT\t\"lld\"\n #endif\n \n-/* Macros to order the left/right values correctly.  Note, -maltivec=be does\n-   not change the order for static initializations, so we have to handle it\n-   specially.  */\n+/* Macros to order the left/right values correctly.  */\n \n #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n #define INIT_ORDER(A, B)\t(TYPE) A, (TYPE) B\n #define ELEMENT_ORDER(A, B)\t(TYPE) A, (TYPE) B\n #define ENDIAN\t\t\t\"-mbig\"\n-\n-#elif __VEC_ELEMENT_REG_ORDER__ == __ORDER_BIG_ENDIAN__\n-#define NO_ARRAY\n-#define INIT_ORDER(A, B)\t(TYPE) B, (TYPE) A\n-#define ELEMENT_ORDER(A, B)\t(TYPE) A, (TYPE) B\n-#define ENDIAN\t\t\t\"-mlittle -maltivec=be\"\n-\n #else\n #define INIT_ORDER(A, B)\t(TYPE) B, (TYPE) A\n #define ELEMENT_ORDER(A, B)\t(TYPE) B, (TYPE) A\n@@ -201,7 +191,6 @@ concat_extract_nn (vector TYPE a, vector TYPE b, size_t i, size_t j)\n   return (vector TYPE) { vec_extract (a, i), vec_extract (b, j) };\n }\n \n-#ifndef NO_ARRAY\n __attribute__((__noinline__))\n static vector TYPE\n array_0 (vector TYPE v, TYPE a)\n@@ -236,7 +225,6 @@ array_01b (TYPE a, TYPE b)\n   v[1] = b;\n   return v;\n }\n-#endif\n \n int\n main (void)\n@@ -245,9 +233,7 @@ main (void)\n   vector TYPE b = (vector TYPE) { THREE, FOUR };\n   size_t i, j;\n \n-#ifndef NO_ARRAY\n   vector TYPE z = (vector TYPE) { ZERO,  ZERO };\n-#endif\n \n   DEBUG2 (\"Endian: %s, type: %s\\n\", ENDIAN, STYPE);\n   DEBUG0 (\"\\nStatic/global initialization\\n\");\n@@ -268,7 +254,6 @@ main (void)\n   vector_check (a, ELEMENT_ORDER (1, 2));\n   vector_check (b, ELEMENT_ORDER (3, 4));\n \n-#ifndef NO_ARRAY\n   DEBUG0 (\"\\nTesting array syntax\\n\");\n   vector_check (array_0   (a, FIVE),      ELEMENT_ORDER (5, 2));\n   vector_check (array_1   (b, SIX),       ELEMENT_ORDER (3, 6));\n@@ -279,9 +264,6 @@ main (void)\n   vector_check (array_1   (b, six),       ELEMENT_ORDER (3, 6));\n   vector_check (array_01  (z, five, six), ELEMENT_ORDER (5, 6));\n   vector_check (array_01b (five, six),    ELEMENT_ORDER (5, 6));\n-#else\n-  DEBUG0 (\"\\nSkipping array syntax on -maltivec=be\\n\");\n-#endif\n \n   DEBUG0 (\"\\nTesting concat and extract\\n\");\n   vector_check (concat_extract_00 (a, b), INIT_ORDER (1, 3));"}]}