{"sha": "bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI2YTZlZTlkYjkyNWJlYTgyYmJhNDdiMWIzY2RkMzU1NWZiNTM5Yg==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2017-01-27T07:59:06Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2017-01-27T07:59:06Z"}, "message": "re PR c++/64382 (ICE due to use of `this` inside a lambda that captures everything by ref inside a member function of a class template)\n\nFix PR c++/64382\n\n\tPR c++/64382\n\t* cp/parser.c (parsing_default_capturing_generic_lambda_in_template):\n\tNew function.\n\t* cp/cp-tree.h: Declare it.\n\t* cp/semantics.c (finish_id_expression): Resolve names within a default\n\tcapturing generic lambda defined within a template prior to\n\tinstantiation to allow for captures to be added to the closure type.\n\n\tPR c++/64382\n\t* g++.dg/cpp1y/pr64382.C: New test.\n\nFrom-SVN: r244962", "tree": {"sha": "6d74a0c4c4c060c5f3cb24e32b23ffef3968df5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d74a0c4c4c060c5f3cb24e32b23ffef3968df5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fb9ec83c38887a5b1da7376873506ae59b2c60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb9ec83c38887a5b1da7376873506ae59b2c60e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb9ec83c38887a5b1da7376873506ae59b2c60e"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "406d382135f38570fe770c7143e81f236c1d4d4e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "patch": "@@ -1,3 +1,13 @@\n+2017-01-27  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\tPR c++/64382\n+\t* cp/parser.c (parsing_default_capturing_generic_lambda_in_template):\n+\tNew function.\n+\t* cp/cp-tree.h: Declare it.\n+\t* cp/semantics.c (finish_id_expression): Resolve names within a default\n+\tcapturing generic lambda defined within a template prior to\n+\tinstantiation to allow for captures to be added to the closure type.\n+\n 2017-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/68727"}, {"sha": "f412ddd6e4aa2e80b703cf8ef421ee8e686a18fb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "patch": "@@ -6118,6 +6118,7 @@ extern bool maybe_clone_body\t\t\t(tree);\n /* In parser.c */\n extern tree cp_convert_range_for (tree, tree, tree, tree, unsigned int, bool);\n extern bool parsing_nsdmi (void);\n+extern bool parsing_default_capturing_generic_lambda_in_template (void);\n extern void inject_this_parameter (tree, cp_cv_quals);\n \n /* in pt.c */"}, {"sha": "7f685506bc176e2a528470459d2440e2b8d15e4a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "patch": "@@ -20454,6 +20454,33 @@ parsing_nsdmi (void)\n   return false;\n }\n \n+/* Return true iff our current scope is a default capturing generic lambda\n+   defined within a template.  FIXME: This is part of a workaround (see\n+   semantics.c) to handle building lambda closure types correctly in templates\n+   which we ultimately want to defer to instantiation time. */\n+\n+bool\n+parsing_default_capturing_generic_lambda_in_template (void)\n+{\n+  if (!processing_template_decl || !current_class_type)\n+    return false;\n+\n+  tree lam = CLASSTYPE_LAMBDA_EXPR (current_class_type);\n+  if (!lam || LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lam) == CPLD_NONE)\n+    return false;\n+\n+  tree callop = lambda_function (lam);\n+  if (!callop)\n+    return false;\n+\n+  return (DECL_TEMPLATE_INFO (callop)\n+\t  && (DECL_TEMPLATE_RESULT (DECL_TI_TEMPLATE (callop)) == callop)\n+\t  && ((current_nonlambda_class_type ()\n+\t       && CLASSTYPE_TEMPLATE_INFO (current_nonlambda_class_type ()))\n+\t      || ((current_nonlambda_function ()\n+\t\t   && DECL_TEMPLATE_INFO (current_nonlambda_function ())))));\n+}\n+\n /* Parse a late-specified return type, if any.  This is not a separate\n    non-terminal, but part of a function declarator, which looks like\n "}, {"sha": "42b555c5883304f0942830328683ddcb158f4eec", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "patch": "@@ -3563,9 +3563,13 @@ finish_id_expression (tree id_expression,\n \t\t    ? CP_ID_KIND_UNQUALIFIED_DEPENDENT\n \t\t    : CP_ID_KIND_UNQUALIFIED)));\n \n-      /* If the name was dependent on a template parameter, we will\n-\t resolve the name at instantiation time.  */\n-      if (dependent_p)\n+      /* If the name was dependent on a template parameter and we're not in a\n+\t default capturing generic lambda within a template, we will resolve the\n+\t name at instantiation time.  FIXME: For lambdas, we should defer\n+\t building the closure type until instantiation time then we won't need\n+\t the extra test here.  */\n+      if (dependent_p\n+\t  && !parsing_default_capturing_generic_lambda_in_template ())\n \t{\n \t  if (DECL_P (decl)\n \t      && any_dependent_type_attributes_p (DECL_ATTRIBUTES (decl)))"}, {"sha": "71ef013f098915d6d8f1184c6b54010bdb8cea32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "patch": "@@ -1,3 +1,8 @@\n+2017-01-27  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\tPR c++/64382\n+\t* g++.dg/cpp1y/pr64382.C: New test.\n+\n 2017-01-26  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/78703"}, {"sha": "8f2e931e0486b613023782c3bb2e87aa7df48441", "filename": "gcc/testsuite/g++.dg/cpp1y/pr64382.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr64382.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb6a6ee9db925bea82bba47b1b3cdd3555fb539b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr64382.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr64382.C?ref=bb6a6ee9db925bea82bba47b1b3cdd3555fb539b", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/64382\n+// { dg-do compile { target c++14 } }\n+\n+template<typename T>\n+struct my_queue\n+{\n+  void push(T)\n+  {\n+  }\n+  void ice()\n+  {\n+    auto L = [=](auto &&v) {\n+      push(v);\n+    };\n+    trav(L);\n+  }\n+  template<typename F>\n+  void trav(F &&f)\n+  {\n+    f(T());\n+  }\n+};\n+template struct my_queue<int>;"}]}