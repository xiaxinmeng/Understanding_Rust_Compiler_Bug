{"sha": "a4f2895465da4c8856b119a5787b95db345567a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRmMjg5NTQ2NWRhNGM4ODU2YjExOWE1Nzg3Yjk1ZGIzNDU1NjdhOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-12-02T08:36:01Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-12-02T08:36:01Z"}, "message": "Fix runtime error: left shift of negative value (PR\n\n\tPR ipa/78555\n\t* sreal.c (sreal::to_int): Make absolute value before shifting.\n\t(sreal::operator/): Likewise.\n\t(sreal_verify_negative_division): New test.\n\t(void sreal_c_tests): Call the new test.\n\t* sreal.h (sreal::normalize_up): Use new SREAL_ABS and\n\tSREAL_SIGN macros.\n\t(sreal::normalize_down): Likewise.\n\nFrom-SVN: r243163", "tree": {"sha": "d78ade7d79b89f366b780063e24f411faa024243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d78ade7d79b89f366b780063e24f411faa024243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4f2895465da4c8856b119a5787b95db345567a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f2895465da4c8856b119a5787b95db345567a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f2895465da4c8856b119a5787b95db345567a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f2895465da4c8856b119a5787b95db345567a9/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32ff7e39c15206dada1406bdc06e18db9e02d248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ff7e39c15206dada1406bdc06e18db9e02d248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ff7e39c15206dada1406bdc06e18db9e02d248"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "445384226cc4fe5286403a39431e1cb17fd1b99d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f2895465da4c8856b119a5787b95db345567a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f2895465da4c8856b119a5787b95db345567a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4f2895465da4c8856b119a5787b95db345567a9", "patch": "@@ -1,3 +1,14 @@\n+2016-12-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/78555\n+\t* sreal.c (sreal::to_int): Make absolute value before shifting.\n+\t(sreal::operator/): Likewise.\n+\t(sreal_verify_negative_division): New test.\n+\t(void sreal_c_tests): Call the new test.\n+\t* sreal.h (sreal::normalize_up): Use new SREAL_ABS and\n+\tSREAL_SIGN macros.\n+\t(sreal::normalize_down): Likewise.\n+\n 2016-12-02  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* combine.c (combine_simplify_rtx):  Suppress replacement of"}, {"sha": "52e530d623f1462d97a4ae642d024866f3e0cd78", "filename": "gcc/sreal.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f2895465da4c8856b119a5787b95db345567a9/gcc%2Fsreal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f2895465da4c8856b119a5787b95db345567a9/gcc%2Fsreal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.c?ref=a4f2895465da4c8856b119a5787b95db345567a9", "patch": "@@ -102,14 +102,14 @@ sreal::shift_right (int s)\n int64_t\n sreal::to_int () const\n {\n-  int64_t sign = m_sig < 0 ? -1 : 1;\n+  int64_t sign = SREAL_SIGN (m_sig);\n \n   if (m_exp <= -SREAL_BITS)\n     return 0;\n   if (m_exp >= SREAL_PART_BITS)\n     return sign * INTTYPE_MAXIMUM (int64_t);\n   if (m_exp > 0)\n-    return m_sig << m_exp;\n+    return sign * (SREAL_ABS (m_sig) << m_exp);\n   if (m_exp < 0)\n     return m_sig >> -m_exp;\n   return m_sig;\n@@ -229,7 +229,8 @@ sreal::operator/ (const sreal &other) const\n {\n   gcc_checking_assert (other.m_sig != 0);\n   sreal r;\n-  r.m_sig = (m_sig << SREAL_PART_BITS) / other.m_sig;\n+  r.m_sig\n+    = SREAL_SIGN (m_sig) * (SREAL_ABS (m_sig) << SREAL_PART_BITS) / other.m_sig;\n   r.m_exp = m_exp - other.m_exp - SREAL_PART_BITS;\n   r.normalize ();\n   return r;\n@@ -334,13 +335,26 @@ sreal_verify_shifting (void)\n     verify_shifting (values[i]);\n }\n \n+/* Verify division by (of) a negative value.  */\n+\n+static void\n+sreal_verify_negative_division (void)\n+{\n+  ASSERT_EQ (sreal (1) / sreal (1), sreal (1));\n+  ASSERT_EQ (sreal (-1) / sreal (-1), sreal (1));\n+  ASSERT_EQ (sreal (-1234567) / sreal (-1234567), sreal (1));\n+  ASSERT_EQ (sreal (-1234567) / sreal (1234567), sreal (-1));\n+  ASSERT_EQ (sreal (1234567) / sreal (-1234567), sreal (-1));\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void sreal_c_tests ()\n {\n   sreal_verify_basics ();\n   sreal_verify_arithmetics ();\n   sreal_verify_shifting ();\n+  sreal_verify_negative_division ();\n }\n \n } // namespace selftest"}, {"sha": "21f14b0182120081ed5a84c8495da486774fdd00", "filename": "gcc/sreal.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4f2895465da4c8856b119a5787b95db345567a9/gcc%2Fsreal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4f2895465da4c8856b119a5787b95db345567a9/gcc%2Fsreal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.h?ref=a4f2895465da4c8856b119a5787b95db345567a9", "patch": "@@ -31,6 +31,9 @@ along with GCC; see the file COPYING3.  If not see\n \n #define SREAL_BITS SREAL_PART_BITS\n \n+#define SREAL_SIGN(v) (v < 0 ? -1: 1)\n+#define SREAL_ABS(v) (v < 0 ? -v: v)\n+\n /* Structure for holding a simple real number.  */\n class sreal\n {\n@@ -193,7 +196,6 @@ inline sreal operator>> (const sreal &a, int exp)\n inline void\n sreal::normalize_up ()\n {\n-  int64_t s = m_sig < 0 ? -1 : 1;\n   unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n   int shift = SREAL_PART_BITS - 2 - floor_log2 (sig);\n \n@@ -208,7 +210,7 @@ sreal::normalize_up ()\n       m_exp = -SREAL_MAX_EXP;\n       sig = 0;\n     }\n-  if (s == -1)\n+  if (SREAL_SIGN (m_sig) == -1)\n     m_sig = -sig;\n   else\n     m_sig = sig;\n@@ -221,7 +223,6 @@ sreal::normalize_up ()\n inline void\n sreal::normalize_down ()\n {\n-  int64_t s = m_sig < 0 ? -1 : 1;\n   int last_bit;\n   unsigned HOST_WIDE_INT sig = absu_hwi (m_sig);\n   int shift = floor_log2 (sig) - SREAL_PART_BITS + 2;\n@@ -246,7 +247,7 @@ sreal::normalize_down ()\n       m_exp = SREAL_MAX_EXP;\n       sig = SREAL_MAX_SIG;\n     }\n-  if (s == -1)\n+  if (SREAL_SIGN (m_sig) == -1)\n     m_sig = -sig;\n   else\n     m_sig = sig;"}]}