{"sha": "56812278e832fe969c443ca1835863f974e4b9d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4MTIyNzhlODMyZmU5NjljNDQzY2ExODM1ODYzZjk3NGU0YjlkMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T08:43:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T08:43:42Z"}, "message": "[multiple changes]\n\n2011-08-31  Jose Ruiz  <ruiz@adacore.com>\n\n\t* s-taprop-linux.adb (Set_Task_Affinity): Avoid the use of anonymous\n\taccess types.\n\t* affinity.c (__gnat_set_affinity_mask): Declare index variable.\n\n2011-08-31  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Refine expander test in\n\tfull-expander test.\n\tMinor reformatting, renaming ALFA in Alfa (we dropped acronym)\n\t* einfo.adb (Primitive_Operations): Correctly return list of primitive\n\toperations in a case where it returned previously No_Elist.\n\nFrom-SVN: r178358", "tree": {"sha": "61b9423513f189f83c625631b581033c832eb05c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61b9423513f189f83c625631b581033c832eb05c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56812278e832fe969c443ca1835863f974e4b9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56812278e832fe969c443ca1835863f974e4b9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56812278e832fe969c443ca1835863f974e4b9d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56812278e832fe969c443ca1835863f974e4b9d2/comments", "author": null, "committer": null, "parents": [{"sha": "7cda9727babdc93f846191782dcc4c0cdba25d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cda9727babdc93f846191782dcc4c0cdba25d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cda9727babdc93f846191782dcc4c0cdba25d26"}], "stats": {"total": 630, "additions": 327, "deletions": 303}, "files": [{"sha": "02e583efe41bd19b8cb919596b7ff8c04d2b1826", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -1,3 +1,17 @@\n+2011-08-31  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-taprop-linux.adb (Set_Task_Affinity): Avoid the use of anonymous\n+\taccess types.\n+\t* affinity.c (__gnat_set_affinity_mask): Declare index variable.\n+\n+2011-08-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Refine expander test in\n+\tfull-expander test.\n+\tMinor reformatting, renaming ALFA in Alfa (we dropped acronym)\n+\t* einfo.adb (Primitive_Operations): Correctly return list of primitive\n+\toperations in a case where it returned previously No_Elist.\n+\n 2011-08-31  Robert Dewar  <dewar@adacore.com>\n \n \t* s-taprop-vxworks.adb, sem_ch5.adb, s-taprop-tru64.adb, exp_alfa.adb,"}, {"sha": "215a6144f03f0455cd34964412c313017f9ef5af", "filename": "gcc/ada/affinity.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Faffinity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Faffinity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faffinity.c?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -50,6 +50,7 @@ int\n int\n __gnat_set_affinity_mask (int tid, unsigned mask)\n {\n+  int index;\n   cpuset_t cpuset;\n \n   CPUSET_ZERO(cpuset);"}, {"sha": "6aceb1ba02571b37b04d87aa2e739147664d4d8e", "filename": "gcc/ada/alfa.adb", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Falfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Falfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -24,24 +24,24 @@\n ------------------------------------------------------------------------------\n \n with Output;   use Output;\n-with Put_ALFA;\n+with Put_Alfa;\n \n-package body ALFA is\n+package body Alfa is\n \n    -----------\n    -- dalfa --\n    -----------\n \n    procedure dalfa is\n    begin\n-      --  Dump ALFA file table\n+      --  Dump Alfa file table\n \n-      Write_Line (\"ALFA File Table\");\n+      Write_Line (\"Alfa File Table\");\n       Write_Line (\"---------------\");\n \n-      for Index in 1 .. ALFA_File_Table.Last loop\n+      for Index in 1 .. Alfa_File_Table.Last loop\n          declare\n-            AFR : ALFA_File_Record renames ALFA_File_Table.Table (Index);\n+            AFR : Alfa_File_Record renames Alfa_File_Table.Table (Index);\n \n          begin\n             Write_Str (\"  \");\n@@ -63,15 +63,15 @@ package body ALFA is\n          end;\n       end loop;\n \n-      --  Dump ALFA scope table\n+      --  Dump Alfa scope table\n \n       Write_Eol;\n-      Write_Line (\"ALFA Scope Table\");\n+      Write_Line (\"Alfa Scope Table\");\n       Write_Line (\"----------------\");\n \n-      for Index in 1 .. ALFA_Scope_Table.Last loop\n+      for Index in 1 .. Alfa_Scope_Table.Last loop\n          declare\n-            ASR : ALFA_Scope_Record renames ALFA_Scope_Table.Table (Index);\n+            ASR : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Index);\n \n          begin\n             Write_Str (\"  \");\n@@ -103,15 +103,15 @@ package body ALFA is\n          end;\n       end loop;\n \n-      --  Dump ALFA cross-reference table\n+      --  Dump Alfa cross-reference table\n \n       Write_Eol;\n-      Write_Line (\"ALFA Xref Table\");\n+      Write_Line (\"Alfa Xref Table\");\n       Write_Line (\"---------------\");\n \n-      for Index in 1 .. ALFA_Xref_Table.Last loop\n+      for Index in 1 .. Alfa_Xref_Table.Last loop\n          declare\n-            AXR : ALFA_Xref_Record renames ALFA_Xref_Table.Table (Index);\n+            AXR : Alfa_Xref_Record renames Alfa_Xref_Table.Table (Index);\n \n          begin\n             Write_Str  (\"  \");\n@@ -146,12 +146,12 @@ package body ALFA is\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize_ALFA_Tables is\n+   procedure Initialize_Alfa_Tables is\n    begin\n-      ALFA_File_Table.Init;\n-      ALFA_Scope_Table.Init;\n-      ALFA_Xref_Table.Init;\n-   end Initialize_ALFA_Tables;\n+      Alfa_File_Table.Init;\n+      Alfa_Scope_Table.Init;\n+      Alfa_Xref_Table.Init;\n+   end Initialize_Alfa_Tables;\n \n    -----------\n    -- palfa --\n@@ -192,12 +192,12 @@ package body ALFA is\n          Write_Int (N);\n       end Write_Info_Nat;\n \n-      procedure Debug_Put_ALFA is new Put_ALFA;\n+      procedure Debug_Put_Alfa is new Put_Alfa;\n \n    --  Start of processing for palfa\n \n    begin\n-      Debug_Put_ALFA;\n+      Debug_Put_Alfa;\n    end palfa;\n \n-end ALFA;\n+end Alfa;"}, {"sha": "95c4be3d902914ee85d74e8b5e9072835c276f85", "filename": "gcc/ada/alfa.ads", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Falfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Falfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa.ads?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -23,41 +23,41 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package defines tables used to store information needed for the ALFA\n---  mode. It is used by procedures in Lib.Xref.ALFA to build the ALFA\n---  information before writing it out to the ALI file, and by Get_ALFA/Put_ALFA\n+--  This package defines tables used to store information needed for the Alfa\n+--  mode. It is used by procedures in Lib.Xref.Alfa to build the Alfa\n+--  information before writing it out to the ALI file, and by Get_Alfa/Put_Alfa\n --  to read and write the text form that is used in the ALI file.\n \n with Types;      use Types;\n with GNAT.Table;\n \n-package ALFA is\n+package Alfa is\n \n-   --  ALFA information can exist in one of two forms. In the ALI file, it is\n+   --  Alfa information can exist in one of two forms. In the ALI file, it is\n    --  represented using a text format that is described in this specification.\n-   --  Internally it is stored using three tables ALFA_Xref_Table,\n-   --  ALFA_Scope_Table and ALFA_File_Table, which are also defined in this\n+   --  Internally it is stored using three tables Alfa_Xref_Table,\n+   --  Alfa_Scope_Table and Alfa_File_Table, which are also defined in this\n    --  unit.\n \n-   --  Lib.Xref.ALFA is part of the compiler. It extracts ALFA information from\n+   --  Lib.Xref.Alfa is part of the compiler. It extracts Alfa information from\n    --  the complete set of cross-references generated during compilation.\n \n-   --  Get_ALFA reads the text lines in ALI format and populates the internal\n+   --  Get_Alfa reads the text lines in ALI format and populates the internal\n    --  tables with corresponding information.\n \n-   --  Put_ALFA reads the internal tables and generates text lines in the ALI\n+   --  Put_Alfa reads the internal tables and generates text lines in the ALI\n    --  format.\n \n    ---------------------\n-   -- ALFA ALI Format --\n+   -- Alfa ALI Format --\n    ---------------------\n \n-   --  ALFA information is generated on a unit-by-unit basis in the ALI file,\n+   --  Alfa information is generated on a unit-by-unit basis in the ALI file,\n    --  using lines that start with the identifying character F (\"Formal\").\n    --  These lines are generated if one of the -gnatd.E (SPARK generation mode)\n    --  or gnatd.F (Why generation mode) switches is set.\n \n-   --  The ALFA information follows the cross-reference information, so it\n+   --  The Alfa information follows the cross-reference information, so it\n    --  needs not be read by tools like gnatbind, gnatmake etc.\n \n    --  -------------------\n@@ -86,7 +86,7 @@ package ALFA is\n \n    --      Note: the filename is redundant in that it could be deduced from the\n    --      corresponding D line, but it is convenient at least for human\n-   --      reading of the ALFA information, and means that the ALFA information\n+   --      reading of the Alfa information, and means that the Alfa information\n    --      can stand on its own without needing other parts of the ALI file.\n \n    --    FS . scope line type col entity (-> spec-file . spec-scope)?\n@@ -186,13 +186,13 @@ package ALFA is\n    -- Xref Table --\n    ----------------\n \n-   --  The following table records ALFA cross-references\n+   --  The following table records Alfa cross-references\n \n    type Xref_Index is new Int;\n    --  Used to index values in this table. Values start at 1 and are assigned\n    --  sequentially as entries are constructed.\n \n-   type ALFA_Xref_Record is record\n+   type Alfa_Xref_Record is record\n       Entity_Name : String_Ptr;\n       --  Pointer to entity name in ALI file\n \n@@ -232,8 +232,8 @@ package ALFA is\n       --  Column number for the reference\n    end record;\n \n-   package ALFA_Xref_Table is new GNAT.Table (\n-     Table_Component_Type => ALFA_Xref_Record,\n+   package Alfa_Xref_Table is new GNAT.Table (\n+     Table_Component_Type => Alfa_Xref_Record,\n      Table_Index_Type     => Xref_Index,\n      Table_Low_Bound      => 1,\n      Table_Initial        => 2000,\n@@ -250,7 +250,7 @@ package ALFA is\n    --  Used to index values in this table. Values start at 1 and are assigned\n    --  sequentially as entries are constructed.\n \n-   type ALFA_Scope_Record is record\n+   type Alfa_Scope_Record is record\n       Scope_Name : String_Ptr;\n       --  Pointer to scope name in ALI file\n \n@@ -293,8 +293,8 @@ package ALFA is\n       --  Entity (subprogram or package) for the scope\n    end record;\n \n-   package ALFA_Scope_Table is new GNAT.Table (\n-     Table_Component_Type => ALFA_Scope_Record,\n+   package Alfa_Scope_Table is new GNAT.Table (\n+     Table_Component_Type => Alfa_Scope_Record,\n      Table_Index_Type     => Scope_Index,\n      Table_Low_Bound      => 1,\n      Table_Initial        => 200,\n@@ -311,7 +311,7 @@ package ALFA is\n    --  Used to index values in this table. Values start at 1 and are assigned\n    --  sequentially as entries are constructed.\n \n-   type ALFA_File_Record is record\n+   type Alfa_File_Record is record\n       File_Name : String_Ptr;\n       --  Pointer to file name in ALI file\n \n@@ -325,8 +325,8 @@ package ALFA is\n       --  Ending index in Scope table for this unit\n    end record;\n \n-   package ALFA_File_Table is new GNAT.Table (\n-     Table_Component_Type => ALFA_File_Record,\n+   package Alfa_File_Table is new GNAT.Table (\n+     Table_Component_Type => Alfa_File_Record,\n      Table_Index_Type     => File_Index,\n      Table_Low_Bound      => 1,\n      Table_Initial        => 20,\n@@ -344,15 +344,15 @@ package ALFA is\n    -- Subprograms --\n    -----------------\n \n-   procedure Initialize_ALFA_Tables;\n+   procedure Initialize_Alfa_Tables;\n    --  Reset tables for a new compilation\n \n    procedure dalfa;\n-   --  Debug routine to dump internal ALFA tables. This is a raw format dump\n+   --  Debug routine to dump internal Alfa tables. This is a raw format dump\n    --  showing exactly what the tables contain.\n \n    procedure palfa;\n-   --  Debugging procedure to output contents of ALFA binary tables in the\n+   --  Debugging procedure to output contents of Alfa binary tables in the\n    --  format in which they appear in an ALI file.\n \n-end ALFA;\n+end Alfa;"}, {"sha": "c0cf37e8dc3f221b922f68506ce5d041f2564d02", "filename": "gcc/ada/alfa_test.adb", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Falfa_test.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Falfa_test.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa_test.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -23,31 +23,31 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This utility program is used to test proper operation of the Get_ALFA and\n---  Put_ALFA units. To run it, compile any source file with switch -gnatd.E or\n---  -gnatd.F to get an ALI file file.ALI containing ALFA information. Then run\n+--  This utility program is used to test proper operation of the Get_Alfa and\n+--  Put_Alfa units. To run it, compile any source file with switch -gnatd.E or\n+--  -gnatd.F to get an ALI file file.ALI containing Alfa information. Then run\n --  this utility using:\n \n---     ALFA_Test file.ali\n+--     Alfa_Test file.ali\n \n---  This test will read the ALFA information from the ALI file, and use\n---  Get_ALFA to store this in binary form in the internal tables in ALFA. Then\n---  Put_ALFA is used to write the information from these tables back into text\n---  form. This output is compared with the original ALFA information in the ALI\n+--  This test will read the Alfa information from the ALI file, and use\n+--  Get_Alfa to store this in binary form in the internal tables in Alfa. Then\n+--  Put_Alfa is used to write the information from these tables back into text\n+--  form. This output is compared with the original Alfa information in the ALI\n --  file and the two should be identical. If not an error message is output.\n \n-with Get_ALFA;\n-with Put_ALFA;\n+with Get_Alfa;\n+with Put_Alfa;\n \n-with ALFA;  use ALFA;\n+with Alfa;  use Alfa;\n with Types; use Types;\n \n with Ada.Command_Line;      use Ada.Command_Line;\n with Ada.Streams;           use Ada.Streams;\n with Ada.Streams.Stream_IO; use Ada.Streams.Stream_IO;\n with Ada.Text_IO;\n \n-procedure ALFA_Test is\n+procedure Alfa_Test is\n    Infile    : File_Type;\n    Outfile_1 : File_Type;\n    Outfile_2 : File_Type;\n@@ -133,8 +133,8 @@ begin\n          end if;\n       end Put_Char;\n \n-      --  Subprograms used by Get_ALFA (these also copy the output to Outfile_1\n-      --  for later comparison with the output generated by Put_ALFA).\n+      --  Subprograms used by Get_Alfa (these also copy the output to Outfile_1\n+      --  for later comparison with the output generated by Put_Alfa).\n \n       function  Getc  return Character;\n       function  Nextc return Character;\n@@ -180,7 +180,7 @@ begin\n          C := Getc;\n       end Skipc;\n \n-      --  Subprograms used by Put_ALFA, which write information to Outfile_2\n+      --  Subprograms used by Put_Alfa, which write information to Outfile_2\n \n       function Write_Info_Col return Positive;\n       procedure Write_Info_Char (C : Character);\n@@ -237,10 +237,10 @@ begin\n          Write_Info_Char (LF);\n       end Write_Info_Terminate;\n \n-      --  Local instantiations of Put_ALFA and Get_ALFA\n+      --  Local instantiations of Put_Alfa and Get_Alfa\n \n-      procedure Get_ALFA_Info is new Get_ALFA;\n-      procedure Put_ALFA_Info is new Put_ALFA;\n+      procedure Get_Alfa_Info is new Get_Alfa;\n+      procedure Put_Alfa_Info is new Put_Alfa;\n \n    --  Start of processing for Process\n \n@@ -267,15 +267,15 @@ begin\n \n       Set_Index (Infile, Index (Infile) - 1);\n \n-      --  Read ALFA information to internal ALFA tables, also copying ALFA info\n+      --  Read Alfa information to internal Alfa tables, also copying Alfa info\n       --  to Outfile_1.\n \n-      Initialize_ALFA_Tables;\n-      Get_ALFA_Info;\n+      Initialize_Alfa_Tables;\n+      Get_Alfa_Info;\n \n-      --  Write ALFA information from internal ALFA tables to Outfile_2\n+      --  Write Alfa information from internal Alfa tables to Outfile_2\n \n-      Put_ALFA_Info;\n+      Put_Alfa_Info;\n \n       --  Junk blank line (see comment at end of Lib.Writ)\n \n@@ -329,4 +329,4 @@ begin\n exception\n    when Stop =>\n       null;\n-end ALFA_Test;\n+end Alfa_Test;"}, {"sha": "2b90ed7e6c19c5d3f5a9cbbab455299fe70cea34", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -56,7 +56,7 @@ package body ALI is\n       'S'    => True,   -- specific dispatching\n       'Y'    => True,   -- limited_with\n       'C'    => True,   -- SCO information\n-      'F'    => True,   -- ALFA information\n+      'F'    => True,   -- Alfa information\n       others => False);\n \n    --------------------\n@@ -2442,7 +2442,7 @@ package body ALI is\n       --  Here after dealing with xref sections\n \n       --  Ignore remaining lines, which belong to an additional section of the\n-      --  ALI file not considered here (like SCO or ALFA).\n+      --  ALI file not considered here (like SCO or Alfa).\n \n       Check_Unknown_Line;\n "}, {"sha": "93fc755961e5aa394d5ecf8965e4b888d645fc58", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -123,7 +123,7 @@ package body Debug is\n    --  d.C  Generate concatenation call, do not generate inline code\n    --  d.D\n    --  d.E\n-   --  d.F  ALFA mode\n+   --  d.F  Alfa mode\n    --  d.G  Precondition only mode for gnat2why\n    --  d.H  Standard package only mode for gnat2why\n    --  d.I  SCIL generation mode\n@@ -580,7 +580,7 @@ package body Debug is\n    --  d.C  Generate call to System.Concat_n.Str_Concat_n routines in cases\n    --       where we would normally generate inline concatenation code.\n \n-   --  d.F  ALFA mode. Generate AST in a form suitable for formal verification,\n+   --  d.F  Alfa mode. Generate AST in a form suitable for formal verification,\n    --       as well as additional cross reference information in ALI files to\n    --       compute effects of subprograms.\n "}, {"sha": "03a97b66101170226c299a817330b3d9edf6d6b6", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -6921,7 +6921,14 @@ package body Einfo is\n       if Is_Concurrent_Type (Id) then\n          if Present (Corresponding_Record_Type (Id)) then\n             return Direct_Primitive_Operations\n-                     (Corresponding_Record_Type (Id));\n+              (Corresponding_Record_Type (Id));\n+\n+         --  If expansion is disabled the corresponding record type is absent,\n+         --  but if the type has ancestors it may have primitive operations.\n+\n+         elsif Is_Tagged_Type (Id) then\n+            return Direct_Primitive_Operations (Id);\n+\n          else\n             return No_Elist;\n          end if;"}, {"sha": "88482898a92bddf5ad0cfee0b99399d55c1c8a6f", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -2849,10 +2849,10 @@ package body Errout is\n \n       elsif Msg = \"size for& too small, minimum allowed is ^\" then\n \n-         --  Suppress \"size too small\" errors in CodePeer mode and ALFA mode,\n+         --  Suppress \"size too small\" errors in CodePeer mode and Alfa mode,\n          --  since pragma Pack is also ignored in these configurations.\n \n-         if CodePeer_Mode or ALFA_Mode then\n+         if CodePeer_Mode or Alfa_Mode then\n             return True;\n \n          --  When a size is wrong for a frozen type there is no explicit size"}, {"sha": "ddf34f79f03a3b58d9345b1b421e6cc4f423f755", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -495,8 +495,8 @@ package Errout is\n    --  Note: a special exception is that RM is never treated as a keyword\n    --  but instead is copied literally into the message, this avoids the\n    --  need for writing 'R'M for all reference manual quotes. A similar\n-   --  exception is applied to the occurrence of the string ALFA used in\n-   --  error messages about the ALFA subset of Ada.\n+   --  exception is applied to the occurrence of the string Alfa used in\n+   --  error messages about the Alfa subset of Ada.\n \n    --  In the case of names, the default mode for the error text processor\n    --  is to surround the name by quotation marks automatically. The case"}, {"sha": "649238018a1dab8714b1378abce98c3f2878a0cc", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -955,12 +955,12 @@ package body Erroutc is\n       if Name_Len = 2 and then Name_Buffer (1 .. 2) = \"RM\" then\n          Set_Msg_Name_Buffer;\n \n-      --  We make a similar exception for ALFA\n+      --  We make a similar exception for Alfa\n \n-      elsif Name_Len = 4 and then Name_Buffer (1 .. 4) = \"ALFA\" then\n+      elsif Name_Len = 4 and then Name_Buffer (1 .. 4) = \"Alfa\" then\n          Set_Msg_Name_Buffer;\n \n-      --  Neither RM nor ALFA: case appropriately and add surrounding quotes\n+      --  Neither RM nor Alfa: case appropriately and add surrounding quotes\n \n       else\n          Set_Casing (Keyword_Casing (Flag_Source), All_Lower_Case);"}, {"sha": "f561733f284784b345833b5acb8dd8e558db5388", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -6292,7 +6292,7 @@ package body Exp_Ch4 is\n \n       --  CodePeer and GNATprove want to see the unexpanded N_Op_Expon node\n \n-      if CodePeer_Mode or ALFA_Mode then\n+      if CodePeer_Mode or Alfa_Mode then\n          return;\n       end if;\n "}, {"sha": "6318c42508e5663039a906ecf372b234199b63a0", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -3504,7 +3504,7 @@ package body Exp_Ch7 is\n       --  this node and enclosed expression are not expanded, so do not apply\n       --  any transformations here.\n \n-      elsif ALFA_Mode\n+      elsif Alfa_Mode\n         and then Nkind (Wrap_Node) = N_Pragma\n         and then Get_Pragma_Id (Wrap_Node) = Pragma_Check\n       then"}, {"sha": "8dcc19da36b83b37da50135f5971cc4aca3a4d30", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -128,13 +128,13 @@ package body Expander is\n          Debug_A_Entry (\"expanding  \", N);\n \n          begin\n-            --  In ALFA mode we only need a very limited subset of the usual\n+            --  In Alfa mode we only need a very limited subset of the usual\n             --  expansions. This limited subset is implemented in Expand_Alfa.\n \n-            if ALFA_Mode then\n+            if Alfa_Mode then\n                Expand_Alfa (N);\n \n-            --  Here for normal non-ALFA mode\n+            --  Here for normal non-Alfa mode\n \n             else\n                --  Processing depends on node kind. For full details on the"}, {"sha": "05f9713f9daa3de54c049ee0debbf7c577a86cfa", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -2246,13 +2246,13 @@ package body Freeze is\n \n            and then RM_Size (Rec) >= Scalar_Component_Total_RM_Size\n \n-           --  Never do implicit packing in CodePeer or ALFA modes since\n+           --  Never do implicit packing in CodePeer or Alfa modes since\n            --  we don't do any packing in these modes, since this generates\n            --  over-complex code that confuses static analysis, and in\n            --  general, neither CodePeer not GNATprove care about the\n            --  internal representation of objects.\n \n-           and then not (CodePeer_Mode or ALFA_Mode)\n+           and then not (CodePeer_Mode or Alfa_Mode)\n          then\n             --  If implicit packing enabled, do it\n \n@@ -3066,7 +3066,7 @@ package body Freeze is\n                     and then not Is_Limited_Composite (E)\n                     and then not Is_Packed (Root_Type (E))\n                     and then not Has_Component_Size_Clause (Root_Type (E))\n-                    and then not (CodePeer_Mode or ALFA_Mode)\n+                    and then not (CodePeer_Mode or Alfa_Mode)\n                   then\n                      Get_Index_Bounds (First_Index (E), Lo, Hi);\n "}, {"sha": "8c90f754d9a4d64af0f2934a353ae2d6f2d176f4", "filename": "gcc/ada/get_alfa.adb", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fget_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fget_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_alfa.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -23,12 +23,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with ALFA;  use ALFA;\n+with Alfa;  use Alfa;\n with Types; use Types;\n \n with Ada.IO_Exceptions; use Ada.IO_Exceptions;\n \n-procedure Get_ALFA is\n+procedure Get_Alfa is\n    C : Character;\n \n    use ASCII;\n@@ -41,10 +41,10 @@ procedure Get_ALFA is\n    --  Scope number for the current scope entity\n \n    Cur_File_Idx : File_Index;\n-   --  Index in ALFA_File_Table of the current file\n+   --  Index in Alfa_File_Table of the current file\n \n    Cur_Scope_Idx : Scope_Index;\n-   --  Index in ALFA_Scope_Table of the current scope\n+   --  Index in Alfa_Scope_Table of the current scope\n \n    Name_Str : String (1 .. 32768);\n    Name_Len : Natural := 0;\n@@ -193,17 +193,17 @@ procedure Get_ALFA is\n       end loop;\n    end Skip_Spaces;\n \n---  Start of processing for Get_ALFA\n+--  Start of processing for Get_Alfa\n \n begin\n-   Initialize_ALFA_Tables;\n+   Initialize_Alfa_Tables;\n \n    Cur_File      := 0;\n    Cur_Scope     := 0;\n    Cur_File_Idx  := 1;\n    Cur_Scope_Idx := 0;\n \n-   --  Loop through lines of ALFA information\n+   --  Loop through lines of Alfa information\n \n    while Nextc = 'F' loop\n       Skipc;\n@@ -212,7 +212,7 @@ begin\n \n       --  Make sure first line is a File line\n \n-      if ALFA_File_Table.Last = 0 and then C /= 'D' then\n+      if Alfa_File_Table.Last = 0 and then C /= 'D' then\n          raise Data_Error;\n       end if;\n \n@@ -226,9 +226,9 @@ begin\n \n             --  Complete previous entry if any\n \n-            if ALFA_File_Table.Last /= 0 then\n-               ALFA_File_Table.Table (ALFA_File_Table.Last).To_Scope :=\n-                 ALFA_Scope_Table.Last;\n+            if Alfa_File_Table.Last /= 0 then\n+               Alfa_File_Table.Table (Alfa_File_Table.Last).To_Scope :=\n+                 Alfa_Scope_Table.Last;\n             end if;\n \n             --  Scan out dependency number and file name\n@@ -240,10 +240,10 @@ begin\n \n             --  Make new File table entry (will fill in To_Scope later)\n \n-            ALFA_File_Table.Append (\n+            Alfa_File_Table.Append (\n               (File_Name  => new String'(Name_Str (1 .. Name_Len)),\n                File_Num   => Cur_File,\n-               From_Scope => ALFA_Scope_Table.Last + 1,\n+               From_Scope => Alfa_Scope_Table.Last + 1,\n                To_Scope   => 0));\n \n             --  Initialize counter for scopes\n@@ -300,7 +300,7 @@ begin\n                --  To_Xref later). Initial range (From_Xref .. To_Xref) is\n                --  empty for scopes without entities.\n \n-               ALFA_Scope_Table.Append (\n+               Alfa_Scope_Table.Append (\n                  (Scope_Entity   => Empty,\n                   Scope_Name     => new String'(Name_Str (1 .. Name_Len)),\n                   File_Num       => Cur_File,\n@@ -332,7 +332,7 @@ begin\n             --  Update component From_Xref of current file if first reference\n             --  in this file.\n \n-            while ALFA_File_Table.Table (Cur_File_Idx).File_Num /= Cur_File\n+            while Alfa_File_Table.Table (Cur_File_Idx).File_Num /= Cur_File\n             loop\n                Cur_File_Idx := Cur_File_Idx + 1;\n             end loop;\n@@ -348,21 +348,21 @@ begin\n             --  Update component To_Xref of previous scope\n \n             if Cur_Scope_Idx /= 0 then\n-               ALFA_Scope_Table.Table (Cur_Scope_Idx).To_Xref :=\n-                 ALFA_Xref_Table.Last;\n+               Alfa_Scope_Table.Table (Cur_Scope_Idx).To_Xref :=\n+                 Alfa_Xref_Table.Last;\n             end if;\n \n             --  Update component From_Xref of current scope\n \n-            Cur_Scope_Idx := ALFA_File_Table.Table (Cur_File_Idx).From_Scope;\n+            Cur_Scope_Idx := Alfa_File_Table.Table (Cur_File_Idx).From_Scope;\n \n-            while ALFA_Scope_Table.Table (Cur_Scope_Idx).Scope_Num /= Cur_Scope\n+            while Alfa_Scope_Table.Table (Cur_Scope_Idx).Scope_Num /= Cur_Scope\n             loop\n                Cur_Scope_Idx := Cur_Scope_Idx + 1;\n             end loop;\n \n-            ALFA_Scope_Table.Table (Cur_Scope_Idx).From_Xref :=\n-              ALFA_Xref_Table.Last + 1;\n+            Alfa_Scope_Table.Table (Cur_Scope_Idx).From_Xref :=\n+              Alfa_Xref_Table.Last + 1;\n \n          --  Cross reference entry\n \n@@ -437,7 +437,7 @@ begin\n                               Rtype = 'm' or else\n                               Rtype = 's');\n \n-                           ALFA_Xref_Table.Append (\n+                           Alfa_Xref_Table.Append (\n                              (Entity_Name => XR_Entity,\n                               Entity_Line => XR_Entity_Line,\n                               Etype       => XR_Entity_Typ,\n@@ -453,7 +453,7 @@ begin\n                end loop;\n             end;\n \n-         --  No other ALFA lines are possible\n+         --  No other Alfa lines are possible\n \n          when others =>\n             raise Data_Error;\n@@ -468,12 +468,12 @@ begin\n \n    --  Here with all Xrefs stored, complete last entries in File/Scope tables\n \n-   if ALFA_File_Table.Last /= 0 then\n-      ALFA_File_Table.Table (ALFA_File_Table.Last).To_Scope :=\n-        ALFA_Scope_Table.Last;\n+   if Alfa_File_Table.Last /= 0 then\n+      Alfa_File_Table.Table (Alfa_File_Table.Last).To_Scope :=\n+        Alfa_Scope_Table.Last;\n    end if;\n \n    if Cur_Scope_Idx /= 0 then\n-      ALFA_Scope_Table.Table (Cur_Scope_Idx).To_Xref := ALFA_Xref_Table.Last;\n+      Alfa_Scope_Table.Table (Cur_Scope_Idx).To_Xref := Alfa_Xref_Table.Last;\n    end if;\n-end Get_ALFA;\n+end Get_Alfa;"}, {"sha": "e8c6a17aa13b02733cbdf5d9f97b329ba887a641", "filename": "gcc/ada/get_alfa.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fget_alfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fget_alfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_alfa.ads?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -23,8 +23,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains the function used to read ALFA information from an\n---  ALI file and populate the tables defined in package ALFA with the result.\n+--  This package contains the function used to read Alfa information from an\n+--  ALI file and populate the tables defined in package Alfa with the result.\n \n generic\n    --  These subprograms provide access to the ALI file. Locating, opening and\n@@ -46,12 +46,12 @@ generic\n    --  and position to the next character, which will be returned by the next\n    --  call to Getc or Nextc.\n \n-procedure Get_ALFA;\n---  Load ALFA information from ALI file text format into internal ALFA tables\n---  (ALFA.ALFA_Xref_Table, ALFA.ALFA_Scope_Table and ALFA.ALFA_File_Table). On\n---  entry the input file is positioned to the initial 'F' of the first ALFA\n+procedure Get_Alfa;\n+--  Load Alfa information from ALI file text format into internal Alfa tables\n+--  (Alfa.Alfa_Xref_Table, Alfa.Alfa_Scope_Table and Alfa.Alfa_File_Table). On\n+--  entry the input file is positioned to the initial 'F' of the first Alfa\n --  line in the ALI file. On return, the file is positioned either to the end\n---  of file, or to the first character of the line following the ALFA\n+--  of file, or to the first character of the line following the Alfa\n --  information (which will never start with an 'F').\n --\n --  If a format error is detected in the input, then an exception is raised"}, {"sha": "3c2b5f4df987e6ebd1f418b1063e35332a7f508f", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -390,7 +390,7 @@ procedure Gnat1drv is\n \n       if Debug_Flag_Dot_FF then\n \n-         ALFA_Mode := True;\n+         Alfa_Mode := True;\n \n          --  Turn off inlining, which would confuse formal verification output\n          --  and gain nothing.\n@@ -406,7 +406,7 @@ procedure Gnat1drv is\n \n          --  Enable some restrictions systematically to simplify the generated\n          --  code (and ease analysis). Note that restriction checks are also\n-         --  disabled in ALFA mode, see Restrict.Check_Restriction, and user\n+         --  disabled in Alfa mode, see Restrict.Check_Restriction, and user\n          --  specified Restrictions pragmas are ignored, see\n          --  Sem_Prag.Process_Restrictions_Or_Restriction_Warnings.\n \n@@ -436,7 +436,7 @@ procedure Gnat1drv is\n          Polling_Required := False;\n \n          --  Set operating mode to Generate_Code, but full front-end expansion\n-         --  is not desirable in ALFA mode, so a light expansion is performed\n+         --  is not desirable in Alfa mode, so a light expansion is performed\n          --  instead.\n \n          Operating_Mode := Generate_Code;\n@@ -464,7 +464,7 @@ procedure Gnat1drv is\n          Debug_Pragmas_Enabled := True;\n \n          --  Turn off style check options since we are not interested in any\n-         --  front-end warnings when we are getting ALFA output.\n+         --  front-end warnings when we are getting Alfa output.\n \n          Reset_Style_Check_Options;\n "}, {"sha": "bd236ea4250cc95fddff8afbd94ef8e369300936", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -32,7 +32,7 @@ with Fname;    use Fname;\n with Fname.UF; use Fname.UF;\n with Lib.Util; use Lib.Util;\n with Lib.Xref; use Lib.Xref;\n-               use Lib.Xref.ALFA;\n+               use Lib.Xref.Alfa;\n with Nlists;   use Nlists;\n with Gnatvsn;  use Gnatvsn;\n with Opt;      use Opt;\n@@ -1317,11 +1317,11 @@ package body Lib.Writ is\n          SCO_Output;\n       end if;\n \n-      --  Output ALFA information if needed\n+      --  Output Alfa information if needed\n \n-      if Opt.Xref_Active and then ALFA_Mode then\n-         Collect_ALFA (Sdep_Table => Sdep_Table, Num_Sdep => Num_Sdep);\n-         Output_ALFA;\n+      if Opt.Xref_Active and then Alfa_Mode then\n+         Collect_Alfa (Sdep_Table => Sdep_Table, Num_Sdep => Num_Sdep);\n+         Output_Alfa;\n       end if;\n \n       --  Output final blank line and we are done. This final blank line is"}, {"sha": "f6cf75f6eb5af77c346cb699df1b4e707e47e986", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -712,10 +712,10 @@ package Lib.Writ is\n    --  reference data. See the spec of Par_SCO for full details of the format.\n \n    ----------------------\n-   -- ALFA Information --\n+   -- Alfa Information --\n    ----------------------\n \n-   --  The ALFA information follows the SCO information. See the spec of Alfa\n+   --  The Alfa information follows the SCO information. See the spec of Alfa\n    --  for full details of the format.\n \n    ----------------------"}, {"sha": "9cb28fde9c7814ffcb89eb8a9affbbd2de05523c", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 93, "deletions": 93, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -23,23 +23,23 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with ALFA;     use ALFA;\n+with Alfa;     use Alfa;\n with Einfo;    use Einfo;\n with Nmake;    use Nmake;\n-with Put_ALFA;\n+with Put_Alfa;\n \n with GNAT.HTable;\n \n separate (Lib.Xref)\n-package body ALFA is\n+package body Alfa is\n \n    ---------------------\n    -- Local Constants --\n    ---------------------\n \n-   --  Table of ALFA_Entities, True for each entity kind used in ALFA\n+   --  Table of Alfa_Entities, True for each entity kind used in Alfa\n \n-   ALFA_Entities : constant array (Entity_Kind) of Boolean :=\n+   Alfa_Entities : constant array (Entity_Kind) of Boolean :=\n      (E_Void                                       => False,\n       E_Variable                                   => True,\n       E_Component                                  => False,\n@@ -135,8 +135,8 @@ package body ALFA is\n       E_Task_Body                                  => False,\n       E_Subprogram_Body                            => False);\n \n-   --  True for each reference type used in ALFA\n-   ALFA_References : constant array (Character) of Boolean :=\n+   --  True for each reference type used in Alfa\n+   Alfa_References : constant array (Character) of Boolean :=\n      ('m' => True,\n       'r' => True,\n       's' => True,\n@@ -159,25 +159,25 @@ package body ALFA is\n    --  Table of cross-references for reads and writes through explicit\n    --  dereferences, that are output as reads/writes to the special variable\n    --  \"Heap\". These references are added to the regular references when\n-   --  computing ALFA cross-references.\n+   --  computing Alfa cross-references.\n \n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Add_ALFA_File (U : Unit_Number_Type; D : Nat);\n-   --  Add file U and all scopes in U to the tables ALFA_File_Table and\n-   --  ALFA_Scope_Table.\n+   procedure Add_Alfa_File (U : Unit_Number_Type; D : Nat);\n+   --  Add file U and all scopes in U to the tables Alfa_File_Table and\n+   --  Alfa_Scope_Table.\n \n-   procedure Add_ALFA_Scope (N : Node_Id);\n-   --  Add scope N to the table ALFA_Scope_Table\n+   procedure Add_Alfa_Scope (N : Node_Id);\n+   --  Add scope N to the table Alfa_Scope_Table\n \n-   procedure Add_ALFA_Xrefs;\n-   --  Filter table Xrefs to add all references used in ALFA to the table\n-   --  ALFA_Xref_Table.\n+   procedure Add_Alfa_Xrefs;\n+   --  Filter table Xrefs to add all references used in Alfa to the table\n+   --  Alfa_Xref_Table.\n \n-   procedure Detect_And_Add_ALFA_Scope (N : Node_Id);\n-   --  Call Add_ALFA_Scope on scopes\n+   procedure Detect_And_Add_Alfa_Scope (N : Node_Id);\n+   --  Call Add_Alfa_Scope on scopes\n \n    function Entity_Hash (E : Entity_Id) return Entity_Hashed_Range;\n    --  Hash function for hash table\n@@ -206,10 +206,10 @@ package body ALFA is\n    --  declarations.\n \n    -------------------\n-   -- Add_ALFA_File --\n+   -- Add_Alfa_File --\n    -------------------\n \n-   procedure Add_ALFA_File (U : Unit_Number_Type; D : Nat) is\n+   procedure Add_Alfa_File (U : Unit_Number_Type; D : Nat) is\n       From : Scope_Index;\n \n       S : constant Source_File_Index := Source_Index (U);\n@@ -222,9 +222,9 @@ package body ALFA is\n          return;\n       end if;\n \n-      From := ALFA_Scope_Table.Last + 1;\n+      From := Alfa_Scope_Table.Last + 1;\n \n-      Traverse_Compilation_Unit (Cunit (U), Detect_And_Add_ALFA_Scope'Access,\n+      Traverse_Compilation_Unit (Cunit (U), Detect_And_Add_Alfa_Scope'Access,\n                                  Inside_Stubs => False);\n \n       --  Update scope numbers\n@@ -234,22 +234,22 @@ package body ALFA is\n \n       begin\n          Count := 1;\n-         for S in From .. ALFA_Scope_Table.Last loop\n+         for S in From .. Alfa_Scope_Table.Last loop\n             declare\n-               E : Entity_Id renames ALFA_Scope_Table.Table (S).Scope_Entity;\n+               E : Entity_Id renames Alfa_Scope_Table.Table (S).Scope_Entity;\n \n             begin\n                if Lib.Get_Source_Unit (E) = U then\n-                  ALFA_Scope_Table.Table (S).Scope_Num := Count;\n-                  ALFA_Scope_Table.Table (S).File_Num  := D;\n+                  Alfa_Scope_Table.Table (S).Scope_Num := Count;\n+                  Alfa_Scope_Table.Table (S).File_Num  := D;\n                   Count                                := Count + 1;\n \n                else\n                   --  Mark for removal a scope S which is not located in unit\n                   --  U, for example for scope inside generics that get\n                   --  instantiated.\n \n-                  ALFA_Scope_Table.Table (S).Scope_Num := 0;\n+                  Alfa_Scope_Table.Table (S).Scope_Num := 0;\n                end if;\n             end;\n          end loop;\n@@ -260,34 +260,34 @@ package body ALFA is\n \n       begin\n          Snew := From;\n-         for S in From .. ALFA_Scope_Table.Last loop\n+         for S in From .. Alfa_Scope_Table.Last loop\n             --  Remove those scopes previously marked for removal\n \n-            if ALFA_Scope_Table.Table (S).Scope_Num /= 0 then\n-               ALFA_Scope_Table.Table (Snew) := ALFA_Scope_Table.Table (S);\n+            if Alfa_Scope_Table.Table (S).Scope_Num /= 0 then\n+               Alfa_Scope_Table.Table (Snew) := Alfa_Scope_Table.Table (S);\n                Snew := Snew + 1;\n             end if;\n          end loop;\n \n-         ALFA_Scope_Table.Set_Last (Snew - 1);\n+         Alfa_Scope_Table.Set_Last (Snew - 1);\n       end;\n \n       --  Make entry for new file in file table\n \n       Get_Name_String (Reference_Name (S));\n \n-      ALFA_File_Table.Append (\n+      Alfa_File_Table.Append (\n         (File_Name  => new String'(Name_Buffer (1 .. Name_Len)),\n          File_Num   => D,\n          From_Scope => From,\n-         To_Scope   => ALFA_Scope_Table.Last));\n-   end Add_ALFA_File;\n+         To_Scope   => Alfa_Scope_Table.Last));\n+   end Add_Alfa_File;\n \n    --------------------\n-   -- Add_ALFA_Scope --\n+   -- Add_Alfa_Scope --\n    --------------------\n \n-   procedure Add_ALFA_Scope (N : Node_Id) is\n+   procedure Add_Alfa_Scope (N : Node_Id) is\n       E   : constant Entity_Id  := Defining_Entity (N);\n       Loc : constant Source_Ptr := Sloc (E);\n       Typ : Character;\n@@ -344,7 +344,7 @@ package body ALFA is\n       --  File_Num and Scope_Num are filled later. From_Xref and To_Xref are\n       --  filled even later, but are initialized to represent an empty range.\n \n-      ALFA_Scope_Table.Append (\n+      Alfa_Scope_Table.Append (\n         (Scope_Name     => new String'(Unique_Name (E)),\n          File_Num       => 0,\n          Scope_Num      => 0,\n@@ -356,13 +356,13 @@ package body ALFA is\n          From_Xref      => 1,\n          To_Xref        => 0,\n          Scope_Entity   => E));\n-   end Add_ALFA_Scope;\n+   end Add_Alfa_Scope;\n \n    --------------------\n-   -- Add_ALFA_Xrefs --\n+   -- Add_Alfa_Xrefs --\n    --------------------\n \n-   procedure Add_ALFA_Xrefs is\n+   procedure Add_Alfa_Xrefs is\n       Cur_Scope_Idx   : Scope_Index;\n       From_Xref_Idx   : Xref_Index;\n       Cur_Entity      : Entity_Id;\n@@ -528,12 +528,12 @@ package body ALFA is\n \n       Heap : Entity_Id;\n \n-   --  Start of processing for Add_ALFA_Xrefs\n+   --  Start of processing for Add_Alfa_Xrefs\n \n    begin\n-      for J in ALFA_Scope_Table.First .. ALFA_Scope_Table.Last loop\n-         Set_Scope_Num (N   => ALFA_Scope_Table.Table (J).Scope_Entity,\n-                        Num => ALFA_Scope_Table.Table (J).Scope_Num);\n+      for J in Alfa_Scope_Table.First .. Alfa_Scope_Table.Last loop\n+         Set_Scope_Num (N   => Alfa_Scope_Table.Table (J).Scope_Entity,\n+                        Num => Alfa_Scope_Table.Table (J).Scope_Num);\n       end loop;\n \n       --  Set up the pointer vector for the sort\n@@ -569,31 +569,31 @@ package body ALFA is\n          Rnums (Nrefs) := Xrefs.Last;\n       end loop;\n \n-      --  Eliminate entries not appropriate for ALFA. Done prior to sorting\n+      --  Eliminate entries not appropriate for Alfa. Done prior to sorting\n       --  cross-references, as it discards useless references which do not have\n       --  a proper format for the comparison function (like no location).\n \n       Eliminate_Before_Sort : declare\n          NR : Nat;\n \n-         function Is_ALFA_Scope (E : Entity_Id) return Boolean;\n+         function Is_Alfa_Scope (E : Entity_Id) return Boolean;\n          --  Return whether the entity or reference scope is adequate\n \n          function Is_Global_Constant (E : Entity_Id) return Boolean;\n          --  Return True if E is a global constant for which we should ignore\n-         --  reads in ALFA.\n+         --  reads in Alfa.\n \n          -------------------\n-         -- Is_ALFA_Scope --\n+         -- Is_Alfa_Scope --\n          -------------------\n \n-         function Is_ALFA_Scope (E : Entity_Id) return Boolean is\n+         function Is_Alfa_Scope (E : Entity_Id) return Boolean is\n          begin\n             return Present (E)\n               and then not Is_Generic_Unit (E)\n               and then Renamed_Entity (E) = Empty\n               and then Get_Scope_Num (E) /= No_Scope;\n-         end Is_ALFA_Scope;\n+         end Is_Alfa_Scope;\n \n          ------------------------\n          -- Is_Global_Constant --\n@@ -612,10 +612,10 @@ package body ALFA is\n          Nrefs := 0;\n \n          for J in 1 .. NR loop\n-            if ALFA_Entities (Ekind (Xrefs.Table (Rnums (J)).Ent))\n-              and then ALFA_References (Xrefs.Table (Rnums (J)).Typ)\n-              and then Is_ALFA_Scope (Xrefs.Table (Rnums (J)).Ent_Scope)\n-              and then Is_ALFA_Scope (Xrefs.Table (Rnums (J)).Ref_Scope)\n+            if Alfa_Entities (Ekind (Xrefs.Table (Rnums (J)).Ent))\n+              and then Alfa_References (Xrefs.Table (Rnums (J)).Typ)\n+              and then Is_Alfa_Scope (Xrefs.Table (Rnums (J)).Ent_Scope)\n+              and then Is_Alfa_Scope (Xrefs.Table (Rnums (J)).Ref_Scope)\n               and then not Is_Global_Constant (Xrefs.Table (Rnums (J)).Ent)\n             then\n                Nrefs         := Nrefs + 1;\n@@ -686,7 +686,7 @@ package body ALFA is\n       From_Xref_Idx  := 1;\n       Cur_Entity     := Empty;\n \n-      if ALFA_Scope_Table.Last = 0 then\n+      if Alfa_Scope_Table.Last = 0 then\n          return;\n       end if;\n \n@@ -701,17 +701,17 @@ package body ALFA is\n \n             function Cur_Scope return Node_Id;\n             --  Return scope entity which corresponds to index Cur_Scope_Idx in\n-            --  table ALFA_Scope_Table.\n+            --  table Alfa_Scope_Table.\n \n             function Get_Entity_Type (E : Entity_Id) return Character;\n             --  Return a character representing the type of entity\n \n             function Is_Future_Scope_Entity (E : Entity_Id) return Boolean;\n-            --  Check whether entity E is in ALFA_Scope_Table at index\n+            --  Check whether entity E is in Alfa_Scope_Table at index\n             --  Cur_Scope_Idx or higher.\n \n             function Is_Past_Scope_Entity (E : Entity_Id) return Boolean;\n-            --  Check whether entity E is in ALFA_Scope_Table at index strictly\n+            --  Check whether entity E is in Alfa_Scope_Table at index strictly\n             --  lower than Cur_Scope_Idx.\n \n             ---------------\n@@ -720,7 +720,7 @@ package body ALFA is\n \n             function Cur_Scope return Node_Id is\n             begin\n-               return ALFA_Scope_Table.Table (Cur_Scope_Idx).Scope_Entity;\n+               return Alfa_Scope_Table.Table (Cur_Scope_Idx).Scope_Entity;\n             end Cur_Scope;\n \n             ---------------------\n@@ -745,8 +745,8 @@ package body ALFA is\n \n             function Is_Future_Scope_Entity (E : Entity_Id) return Boolean is\n             begin\n-               for J in Cur_Scope_Idx .. ALFA_Scope_Table.Last loop\n-                  if E = ALFA_Scope_Table.Table (J).Scope_Entity then\n+               for J in Cur_Scope_Idx .. Alfa_Scope_Table.Last loop\n+                  if E = Alfa_Scope_Table.Table (J).Scope_Entity then\n                      return True;\n                   end if;\n                end loop;\n@@ -766,8 +766,8 @@ package body ALFA is\n \n             function Is_Past_Scope_Entity (E : Entity_Id) return Boolean is\n             begin\n-               for J in ALFA_Scope_Table.First .. Cur_Scope_Idx - 1 loop\n-                  if E = ALFA_Scope_Table.Table (J).Scope_Entity then\n+               for J in Alfa_Scope_Table.First .. Cur_Scope_Idx - 1 loop\n+                  if E = Alfa_Scope_Table.Table (J).Scope_Entity then\n                      return True;\n                   end if;\n                end loop;\n@@ -783,7 +783,7 @@ package body ALFA is\n \n          begin\n             --  If this assertion fails, the scope which we are looking for is\n-            --  not in ALFA scope table, which reveals either a problem in the\n+            --  not in Alfa scope table, which reveals either a problem in the\n             --  construction of the scope table, or an erroneous scope for the\n             --  current cross-reference.\n \n@@ -794,16 +794,16 @@ package body ALFA is\n             --  considered.\n \n             if XE.Ent_Scope /= Cur_Scope then\n-               ALFA_Scope_Table.Table (Cur_Scope_Idx).From_Xref :=\n+               Alfa_Scope_Table.Table (Cur_Scope_Idx).From_Xref :=\n                  From_Xref_Idx;\n-               ALFA_Scope_Table.Table (Cur_Scope_Idx).To_Xref :=\n-                 ALFA_Xref_Table.Last;\n-               From_Xref_Idx := ALFA_Xref_Table.Last + 1;\n+               Alfa_Scope_Table.Table (Cur_Scope_Idx).To_Xref :=\n+                 Alfa_Xref_Table.Last;\n+               From_Xref_Idx := Alfa_Xref_Table.Last + 1;\n             end if;\n \n             while XE.Ent_Scope /= Cur_Scope loop\n                Cur_Scope_Idx := Cur_Scope_Idx + 1;\n-               pragma Assert (Cur_Scope_Idx <= ALFA_Scope_Table.Last);\n+               pragma Assert (Cur_Scope_Idx <= Alfa_Scope_Table.Last);\n             end loop;\n \n             if XE.Ent /= Cur_Entity then\n@@ -812,7 +812,7 @@ package body ALFA is\n             end if;\n \n             if XE.Ent = Heap then\n-               ALFA_Xref_Table.Append (\n+               Alfa_Xref_Table.Append (\n                  (Entity_Name => Cur_Entity_Name,\n                   Entity_Line => 0,\n                   Etype       => Get_Entity_Type (XE.Ent),\n@@ -824,7 +824,7 @@ package body ALFA is\n                   Col         => Int (Get_Column_Number (XE.Loc))));\n \n             else\n-               ALFA_Xref_Table.Append (\n+               Alfa_Xref_Table.Append (\n                  (Entity_Name => Cur_Entity_Name,\n                   Entity_Line => Int (Get_Logical_Line_Number (XE.Def)),\n                   Etype       => Get_Entity_Type (XE.Ent),\n@@ -840,23 +840,23 @@ package body ALFA is\n \n       --  Update the range of cross references to which the scope refers to\n \n-      ALFA_Scope_Table.Table (Cur_Scope_Idx).From_Xref := From_Xref_Idx;\n-      ALFA_Scope_Table.Table (Cur_Scope_Idx).To_Xref   := ALFA_Xref_Table.Last;\n-   end Add_ALFA_Xrefs;\n+      Alfa_Scope_Table.Table (Cur_Scope_Idx).From_Xref := From_Xref_Idx;\n+      Alfa_Scope_Table.Table (Cur_Scope_Idx).To_Xref   := Alfa_Xref_Table.Last;\n+   end Add_Alfa_Xrefs;\n \n    ------------------\n-   -- Collect_ALFA --\n+   -- Collect_Alfa --\n    ------------------\n \n-   procedure Collect_ALFA (Sdep_Table : Unit_Ref_Table; Num_Sdep : Nat) is\n+   procedure Collect_Alfa (Sdep_Table : Unit_Ref_Table; Num_Sdep : Nat) is\n    begin\n       --  Cross-references should have been computed first\n \n       pragma Assert (Xrefs.Last /= 0);\n \n-      Initialize_ALFA_Tables;\n+      Initialize_Alfa_Tables;\n \n-      --  Generate file and scope ALFA information\n+      --  Generate file and scope Alfa information\n \n       for D in 1 .. Num_Sdep loop\n \n@@ -865,7 +865,7 @@ package body ALFA is\n          if Units.Table (Sdep_Table (D)).Source_Index /=\n            System_Source_File_Index\n          then\n-            Add_ALFA_File (U => Sdep_Table (D), D => D);\n+            Add_Alfa_File (U => Sdep_Table (D), D => D);\n          end if;\n       end loop;\n \n@@ -884,19 +884,19 @@ package body ALFA is\n       begin\n          --  Fill in the hash-table\n \n-         for S in ALFA_Scope_Table.First .. ALFA_Scope_Table.Last loop\n+         for S in Alfa_Scope_Table.First .. Alfa_Scope_Table.Last loop\n             declare\n-               Srec : ALFA_Scope_Record renames ALFA_Scope_Table.Table (S);\n+               Srec : Alfa_Scope_Record renames Alfa_Scope_Table.Table (S);\n             begin\n                Entity_Hash_Table.Set (Srec.Scope_Entity, S);\n             end;\n          end loop;\n \n          --  Use the hash-table to locate spec entities\n \n-         for S in ALFA_Scope_Table.First .. ALFA_Scope_Table.Last loop\n+         for S in Alfa_Scope_Table.First .. Alfa_Scope_Table.Last loop\n             declare\n-               Srec : ALFA_Scope_Record renames ALFA_Scope_Table.Table (S);\n+               Srec : Alfa_Scope_Record renames Alfa_Scope_Table.Table (S);\n \n                Spec_Entity : constant Entity_Id :=\n                                Unique_Entity (Srec.Scope_Entity);\n@@ -911,34 +911,34 @@ package body ALFA is\n                  and then Spec_Scope /= 0\n                then\n                   Srec.Spec_File_Num :=\n-                    ALFA_Scope_Table.Table (Spec_Scope).File_Num;\n+                    Alfa_Scope_Table.Table (Spec_Scope).File_Num;\n                   Srec.Spec_Scope_Num :=\n-                    ALFA_Scope_Table.Table (Spec_Scope).Scope_Num;\n+                    Alfa_Scope_Table.Table (Spec_Scope).Scope_Num;\n                end if;\n             end;\n          end loop;\n       end;\n \n-      --  Generate cross reference ALFA information\n+      --  Generate cross reference Alfa information\n \n-      Add_ALFA_Xrefs;\n-   end Collect_ALFA;\n+      Add_Alfa_Xrefs;\n+   end Collect_Alfa;\n \n    -------------------------------\n-   -- Detect_And_Add_ALFA_Scope --\n+   -- Detect_And_Add_Alfa_Scope --\n    -------------------------------\n \n-   procedure Detect_And_Add_ALFA_Scope (N : Node_Id) is\n+   procedure Detect_And_Add_Alfa_Scope (N : Node_Id) is\n    begin\n       if Nkind_In (N, N_Subprogram_Declaration,\n                       N_Subprogram_Body,\n                       N_Subprogram_Body_Stub,\n                       N_Package_Declaration,\n                       N_Package_Body)\n       then\n-         Add_ALFA_Scope (N);\n+         Add_Alfa_Scope (N);\n       end if;\n-   end Detect_And_Add_ALFA_Scope;\n+   end Detect_And_Add_Alfa_Scope;\n \n    -------------------------------------\n    -- Enclosing_Subprogram_Or_Package --\n@@ -1376,4 +1376,4 @@ package body ALFA is\n         (Handled_Statement_Sequence (N), Process, Inside_Stubs);\n    end Traverse_Subprogram_Body;\n \n-end ALFA;\n+end Alfa;"}, {"sha": "4bc7ed437a67bd5ea42739e5ff7432bc20a9051d", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -81,7 +81,7 @@ package body Lib.Xref is\n       --  Unit number corresponding to Loc. Value is undefined and not\n       --  referenced if Loc is set to No_Location.\n \n-      --  The following components are only used for ALFA cross-references\n+      --  The following components are only used for Alfa cross-references\n \n       Ref_Scope : Entity_Id;\n       --  Entity of the closest subprogram or package enclosing the reference\n@@ -103,10 +103,10 @@ package body Lib.Xref is\n      Table_Name           => \"Xrefs\");\n \n    ----------------------\n-   -- ALFA Information --\n+   -- Alfa Information --\n    ----------------------\n \n-   package body ALFA is separate;\n+   package body Alfa is separate;\n \n    ------------------------\n    --  Local Subprograms --\n@@ -865,8 +865,8 @@ package body Lib.Xref is\n          Ref := Original_Location (Sloc (Nod));\n          Def := Original_Location (Sloc (Ent));\n \n-         Ref_Scope := ALFA.Enclosing_Subprogram_Or_Package (N);\n-         Ent_Scope := ALFA.Enclosing_Subprogram_Or_Package (Ent);\n+         Ref_Scope := Alfa.Enclosing_Subprogram_Or_Package (N);\n+         Ent_Scope := Alfa.Enclosing_Subprogram_Or_Package (Ent);\n \n          Xrefs.Increment_Last;\n          Indx := Xrefs.Last;"}, {"sha": "ecac26fabb3b8d2269deaa8f92d02100d7ee7c3f", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -28,7 +28,7 @@\n \n with Einfo;    use Einfo;\n with Lib.Util; use Lib.Util;\n-with Put_ALFA;\n+with Put_Alfa;\n \n package Lib.Xref is\n \n@@ -582,13 +582,13 @@ package Lib.Xref is\n    --  in the pragma is \"there\".\n \n    ----------------------\n-   -- ALFA Information --\n+   -- Alfa Information --\n    ----------------------\n \n-   --  This package defines procedures for collecting ALFA information and\n+   --  This package defines procedures for collecting Alfa information and\n    --  printing in ALI files.\n \n-   package ALFA is\n+   package Alfa is\n \n       function Enclosing_Subprogram_Or_Package (N : Node_Id) return Entity_Id;\n       --  Return the closest enclosing subprogram of package\n@@ -610,17 +610,17 @@ package Lib.Xref is\n       procedure Traverse_All_Compilation_Units (Process : Node_Processing);\n       --  Call Process on all declarations through all compilation units\n \n-      procedure Collect_ALFA (Sdep_Table : Unit_Ref_Table; Num_Sdep : Nat);\n-      --  Collect ALFA information from library units (for files and scopes)\n+      procedure Collect_Alfa (Sdep_Table : Unit_Ref_Table; Num_Sdep : Nat);\n+      --  Collect Alfa information from library units (for files and scopes)\n       --  and from cross-references. Fill in the tables in library package\n-      --  called ALFA.\n+      --  called Alfa.\n \n-      procedure Output_ALFA is new Put_ALFA;\n-      --  Output ALFA information to the ALI files, based on the information\n-      --  collected in the tables in library package called ALFA, and using\n+      procedure Output_Alfa is new Put_Alfa;\n+      --  Output Alfa information to the ALI files, based on the information\n+      --  collected in the tables in library package called Alfa, and using\n       --  routines in Lib.Util.\n \n-   end ALFA;\n+   end Alfa;\n \n    -----------------\n    -- Subprograms --"}, {"sha": "809816d244c1531b794493dc7fdc91eaa1943858", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -44,7 +44,7 @@ package body Opt is\n \n    function Full_Expander_Active return Boolean is\n    begin\n-      return Expander_Active and not ALFA_Mode;\n+      return Expander_Active and not Alfa_Mode;\n    end Full_Expander_Active;\n \n    ----------------------------------"}, {"sha": "d2874d4ad4925b7b1623a3285c2a73777c3644e5", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -1872,14 +1872,14 @@ package Opt is\n    -- Modes for Formal Verification --\n    -----------------------------------\n \n-   ALFA_Mode : Boolean := False;\n+   Alfa_Mode : Boolean := False;\n    --  Specific compiling mode targeting formal verification through the\n    --  generation of Why code for those parts of the input code that belong to\n-   --  the ALFA subset of Ada. Set by debug flag -gnatd.F.\n+   --  the Alfa subset of Ada. Set by debug flag -gnatd.F.\n \n    function Full_Expander_Active return Boolean;\n    pragma Inline (Full_Expander_Active);\n-   --  Returns the value of (Expander_Active and not ALFA_Mode). This \"flag\"\n+   --  Returns the value of (Expander_Active and not Alfa_Mode). This \"flag\"\n    --  indicates that expansion is fully active, that is, not in the reduced\n    --  mode for Alfa (True) or that expansion is either deactivated, or active\n    --  in the reduced mode for Alfa (False). For more information on full"}, {"sha": "76ed47ca6a3a02321d59ca76d6d7e8becee91e8d", "filename": "gcc/ada/put_alfa.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fput_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fput_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_alfa.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -23,15 +23,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with ALFA; use ALFA;\n+with Alfa; use Alfa;\n \n-procedure Put_ALFA is\n+procedure Put_Alfa is\n begin\n-   --  Loop through entries in ALFA_File_Table\n+   --  Loop through entries in Alfa_File_Table\n \n-   for J in 1 .. ALFA_File_Table.Last loop\n+   for J in 1 .. Alfa_File_Table.Last loop\n       declare\n-         F     : ALFA_File_Record renames ALFA_File_Table.Table (J);\n+         F     : Alfa_File_Record renames Alfa_File_Table.Table (J);\n          Start : Scope_Index;\n          Stop  : Scope_Index;\n \n@@ -60,7 +60,7 @@ begin\n             pragma Assert (Start <= Stop);\n \n             declare\n-               S : ALFA_Scope_Record renames ALFA_Scope_Table.Table (Start);\n+               S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Start);\n \n             begin\n                Write_Info_Initiate ('F');\n@@ -98,11 +98,11 @@ begin\n       end;\n    end loop;\n \n-   --  Loop through entries in ALFA_File_Table\n+   --  Loop through entries in Alfa_File_Table\n \n-   for J in 1 .. ALFA_File_Table.Last loop\n+   for J in 1 .. Alfa_File_Table.Last loop\n       declare\n-         F           : ALFA_File_Record renames ALFA_File_Table.Table (J);\n+         F           : Alfa_File_Record renames Alfa_File_Table.Table (J);\n          Start       : Scope_Index;\n          Stop        : Scope_Index;\n          File        : Nat;\n@@ -121,7 +121,7 @@ begin\n             pragma Assert (Start <= Stop);\n \n             Output_One_Scope : declare\n-               S : ALFA_Scope_Record renames ALFA_Scope_Table.Table (Start);\n+               S : Alfa_Scope_Record renames Alfa_Scope_Table.Table (Start);\n \n                XStart : Xref_Index;\n                XStop  : Xref_Index;\n@@ -166,8 +166,8 @@ begin\n                   pragma Assert (XStart <= XStop);\n \n                   Output_One_Xref : declare\n-                     R : ALFA_Xref_Record renames\n-                           ALFA_Xref_Table.Table (XStart);\n+                     R : Alfa_Xref_Record renames\n+                           Alfa_Xref_Table.Table (XStart);\n \n                   begin\n                      if R.Entity_Line /= Entity_Line\n@@ -229,4 +229,4 @@ begin\n          end loop;\n       end;\n    end loop;\n-end Put_ALFA;\n+end Put_Alfa;"}, {"sha": "aee4ec384dde16256d28d6be3b454566855cc2bc", "filename": "gcc/ada/put_alfa.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fput_alfa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fput_alfa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_alfa.ads?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -23,8 +23,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains the function used to read ALFA information from the\n---  internal tables defined in package ALFA, and output text information for\n+--  This package contains the function used to read Alfa information from the\n+--  internal tables defined in package Alfa, and output text information for\n --  the ALI file. The interface allows control over the destination of the\n --  output, so that this routine can also be used for debugging purposes.\n \n@@ -52,7 +52,7 @@ generic\n    with procedure Write_Info_Terminate is <>;\n    --  Terminate current info line and output lines built in Info_Buffer\n \n-procedure Put_ALFA;\n---  Read information from ALFA tables (ALFA.ALFA_Xref_Table,\n---  ALFA.ALFA_Scope_Table and ALFA.ALFA_File_Table) and output corresponding\n+procedure Put_Alfa;\n+--  Read information from Alfa tables (Alfa.Alfa_Xref_Table,\n+--  Alfa.Alfa_Scope_Table and Alfa.Alfa_File_Table) and output corresponding\n --  information in ALI format using the Write_Info procedures."}, {"sha": "18606165dd105ce8a39e539ea8bb71f648c1c409", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -375,12 +375,12 @@ package body Restrict is\n    begin\n       Msg_Issued := False;\n \n-      --  In CodePeer and ALFA mode, we do not want to check for any\n+      --  In CodePeer and Alfa mode, we do not want to check for any\n       --  restriction, or set additional restrictions other than those already\n       --  set in gnat1drv.adb so that we have consistency between each\n       --  compilation.\n \n-      if CodePeer_Mode or ALFA_Mode then\n+      if CodePeer_Mode or Alfa_Mode then\n          return;\n       end if;\n "}, {"sha": "b33b50cf5241e09ebfea33e62da38fac8cb30886", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -1365,7 +1365,9 @@ package body System.Task_Primitives.Operations is\n    begin\n       if pthread_setaffinity_np'Address /= System.Null_Address then\n          declare\n-            CPU_Set : access cpu_set_t := null;\n+            type cpu_set_t_ptr is access all cpu_set_t;\n+\n+            CPU_Set : cpu_set_t_ptr := null;\n             Result  : Interfaces.C.int;\n \n          begin"}, {"sha": "a88dfaf8fc0d4d945b2dc42ac225ff153b43ecbb", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -3436,7 +3436,7 @@ package body Sem_Ch12 is\n                            or else Might_Inline_Subp)\n                 and then not Is_Actual_Pack\n                 and then not Inline_Now\n-                and then not ALFA_Mode\n+                and then not Alfa_Mode\n                 and then (Operating_Mode = Generate_Code\n                            or else (Operating_Mode = Check_Semantics\n                                      and then ASIS_Mode));"}, {"sha": "787d564ed6eca95794ef4289d2ad471f9c217f8f", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -2009,10 +2009,10 @@ package body Sem_Ch13 is\n       end if;\n \n       --  Process Ignore_Rep_Clauses option (we also ignore rep clauses in\n-      --  CodePeer mode or ALFA mode, since they are not relevant in these\n+      --  CodePeer mode or Alfa mode, since they are not relevant in these\n       --  contexts).\n \n-      if Ignore_Rep_Clauses or CodePeer_Mode or ALFA_Mode then\n+      if Ignore_Rep_Clauses or CodePeer_Mode or Alfa_Mode then\n          case Id is\n \n             --  The following should be ignored. They do not affect legality\n@@ -2032,7 +2032,7 @@ package body Sem_Ch13 is\n                Rewrite (N, Make_Null_Statement (Sloc (N)));\n                return;\n \n-            --  We do not want too ignore 'Small in CodePeer_Mode or ALFA_Mode,\n+            --  We do not want too ignore 'Small in CodePeer_Mode or Alfa_Mode,\n             --  since it has an impact on the exact computations performed.\n \n             --  Perhaps 'Small should also not be ignored by"}, {"sha": "e7ec37e7c7d892f4a358a3f9d1974035906b887b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -19722,7 +19722,7 @@ package body Sem_Ch3 is\n       --  and First_Rep_Item info, which should not be relied upon in formal\n       --  verification.\n \n-      if ALFA_Mode then\n+      if Alfa_Mode then\n \n          --  If the range of the type is already symmetric with a possible\n          --  extra negative value, leave it this way."}, {"sha": "12c2b7a756202a837adfc580ccfa20f6d8d9fb17", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -1763,8 +1763,8 @@ package body Sem_Ch4 is\n       --  In formal verification mode, keep track of all reads and writes\n       --  through explicit dereferences.\n \n-      if ALFA_Mode then\n-         ALFA.Generate_Dereference (N);\n+      if Alfa_Mode then\n+         Alfa.Generate_Dereference (N);\n       end if;\n \n       Analyze (P);"}, {"sha": "c9c246311ea20d43245ca4890c1aa35e4e4a8824", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -2023,7 +2023,7 @@ package body Sem_Ch5 is\n \n                   if Nkind (D_Copy) = N_Function_Call\n                     or else\n-                      (ALFA_Mode\n+                      (Alfa_Mode\n                         and then (Nkind (D_Copy) = N_Attribute_Reference\n                         and then\n                           (Attribute_Name (D_Copy) = Name_Result"}, {"sha": "85cdc2a2ab39785eeb111dc49b663dc3dae691f0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -978,7 +978,7 @@ package body Sem_Ch6 is\n          --  than inserted in the code, in order to facilitate a distinct\n          --  treatment for them.\n \n-         if not ALFA_Mode then\n+         if not Alfa_Mode then\n             Process_PPCs (N, Gen_Id, Body_Id);\n          end if;\n \n@@ -2699,7 +2699,7 @@ package body Sem_Ch6 is\n       --  than inserted in the code, in order to facilitate a distinct\n       --  treatment for them.\n \n-      if not ALFA_Mode then\n+      if not Alfa_Mode then\n          Process_PPCs (N, Spec_Id, Body_Id);\n       end if;\n "}, {"sha": "4f5de3f20d0c62fb7fa9447189287fde7a9cfe90", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -2022,7 +2022,7 @@ package body Sem_Ch8 is\n          --  expanded in subsequent instantiations.\n \n          if Is_Actual and then Is_Abstract_Subprogram (Formal_Spec)\n-           and then Expander_Active\n+           and then Full_Expander_Active\n          then\n             declare\n                Stream_Prim : Entity_Id;"}, {"sha": "1fa9376a71486acf70ed356e1437279694de2d64", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -1877,7 +1877,7 @@ package body Sem_Prag is\n             --  In formal verification mode, analyze pragma expression for\n             --  correctness, as it is not expanded later.\n \n-            if ALFA_Mode then\n+            if Alfa_Mode then\n                Analyze_PPC_In_Decl_Part\n                  (N, Defining_Entity (Unit (Parent (Parent (N)))));\n             end if;\n@@ -5090,9 +5090,9 @@ package body Sem_Prag is\n       --  Start of processing for Process_Restrictions_Or_Restriction_Warnings\n \n       begin\n-         --  Ignore all Restrictions pragma in CodePeer and ALFA modes\n+         --  Ignore all Restrictions pragma in CodePeer and Alfa modes\n \n-         if CodePeer_Mode or ALFA_Mode then\n+         if CodePeer_Mode or Alfa_Mode then\n             return;\n          end if;\n \n@@ -5314,11 +5314,11 @@ package body Sem_Prag is\n       --  Start of processing for Process_Suppress_Unsuppress\n \n       begin\n-         --  Ignore pragma Suppress/Unsuppress in CodePeer and ALFA modes on\n+         --  Ignore pragma Suppress/Unsuppress in CodePeer and Alfa modes on\n          --  user code: we want to generate checks for analysis purposes, as\n          --  set respectively by -gnatC and -gnatd.F\n \n-         if (CodePeer_Mode or ALFA_Mode)\n+         if (CodePeer_Mode or Alfa_Mode)\n            and then Comes_From_Source (N)\n          then\n             return;\n@@ -9501,11 +9501,11 @@ package body Sem_Prag is\n             Check_Restriction (No_Initialize_Scalars, N);\n \n             --  Initialize_Scalars creates false positives in CodePeer, and\n-            --  incorrect negative results in ALFA mode, so ignore this pragma\n+            --  incorrect negative results in Alfa mode, so ignore this pragma\n             --  in these modes.\n \n             if not Restriction_Active (No_Initialize_Scalars)\n-              and then not (CodePeer_Mode or ALFA_Mode)\n+              and then not (CodePeer_Mode or Alfa_Mode)\n             then\n                Init_Or_Norm_Scalars := True;\n                Initialize_Scalars := True;\n@@ -9532,10 +9532,10 @@ package body Sem_Prag is\n          when Pragma_Inline_Always =>\n             GNAT_Pragma;\n \n-            --  Pragma always active unless in CodePeer or ALFA mode, since\n+            --  Pragma always active unless in CodePeer or Alfa mode, since\n             --  this causes walk order issues.\n \n-            if not (CodePeer_Mode or ALFA_Mode) then\n+            if not (CodePeer_Mode or Alfa_Mode) then\n                Process_Inline (True);\n             end if;\n \n@@ -10975,10 +10975,10 @@ package body Sem_Prag is\n             Check_Valid_Configuration_Pragma;\n \n             --  Normalize_Scalars creates false positives in CodePeer, and\n-            --  incorrect negative results in ALFA mode, so ignore this pragma\n+            --  incorrect negative results in Alfa mode, so ignore this pragma\n             --  in these modes.\n \n-            if not (CodePeer_Mode or ALFA_Mode) then\n+            if not (CodePeer_Mode or Alfa_Mode) then\n                Normalize_Scalars := True;\n                Init_Or_Norm_Scalars := True;\n             end if;\n@@ -11347,7 +11347,7 @@ package body Sem_Prag is\n                   --  complex front-end expansions related to pragma Pack,\n                   --  so disable handling of pragma Pack in these cases.\n \n-                  if CodePeer_Mode or ALFA_Mode then\n+                  if CodePeer_Mode or Alfa_Mode then\n                      null;\n \n                   --  Don't attempt any packing for VM targets. We possibly"}, {"sha": "15feb5bc61e1762dd28446804efe7a580102a818", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -4006,12 +4006,12 @@ package body Sem_Res is\n \n             --  If it is a named association, treat the selector_name as a\n             --  proper identifier, and mark the corresponding entity. Ignore\n-            --  this reference in ALFA mode, as it refers to an entity not in\n+            --  this reference in Alfa mode, as it refers to an entity not in\n             --  scope at the point of reference, so the reference should be\n             --  ignored for computing effects of subprograms.\n \n             if Nkind (Parent (A)) = N_Parameter_Association\n-              and then not ALFA_Mode\n+              and then not Alfa_Mode\n             then\n                Set_Entity (Selector_Name (Parent (A)), F);\n                Generate_Reference (F, Selector_Name (Parent (A)));\n@@ -8083,7 +8083,7 @@ package body Sem_Res is\n \n    procedure Resolve_Quantified_Expression (N : Node_Id; Typ : Entity_Id) is\n    begin\n-      if not ALFA_Mode then\n+      if not Alfa_Mode then\n \n          --  If expansion is enabled, analysis is delayed until the expresssion\n          --  is rewritten as a loop.\n@@ -8101,7 +8101,7 @@ package body Sem_Res is\n          Resolve (Condition (N), Typ);\n          Expander_Mode_Restore;\n \n-      --  In ALFA mode, we need normal expansion in order to properly introduce\n+      --  In Alfa mode, we need normal expansion in order to properly introduce\n       --  the necessary transient scopes.\n \n       else"}, {"sha": "06a89a2b8aef89136a7761379b78034b592d5759", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56812278e832fe969c443ca1835863f974e4b9d2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=56812278e832fe969c443ca1835863f974e4b9d2", "patch": "@@ -10632,8 +10632,8 @@ package body Sem_Util is\n                --  In formal verification mode, keep track of all reads and\n                --  writes through explicit dereferences.\n \n-               if ALFA_Mode then\n-                  ALFA.Generate_Dereference (N, 'm');\n+               if Alfa_Mode then\n+                  Alfa.Generate_Dereference (N, 'm');\n                end if;\n \n                if Nkind (P) = N_Selected_Component"}]}