{"sha": "74e5aa4b46ce430a362382c628fc017268ba2378", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlNWFhNGI0NmNlNDMwYTM2MjM4MmM2MjhmYzAxNzI2OGJhMjM3OA==", "commit": {"author": {"name": "David O'Brien", "email": "obrien@FreeBSD.org", "date": "2000-11-30T00:19:47Z"}, "committer": {"name": "David O'Brien", "email": "obrien@gcc.gnu.org", "date": "2000-11-30T00:19:47Z"}, "message": "elf.h (IDENT_ASM_OP): Protect the #define.\n\n2000-11-29  David O'Brien  <obrien@FreeBSD.org>\n\t* config/alpha/elf.h (IDENT_ASM_OP): Protect the #define.\n\t(ASM_DECLARE_OBJECT_NAME): Same.\n\t(ASM_FILE_END): Same.\n\t(ASM_FINISH_DECLARE_OBJECT): Same.\n\t(ASM_IDENTIFY_GCC): Same.\n\t(ASM_IDENTIFY_LANGUAGE): Same.\n\t(ASM_OUTPUT_CONSTRUCTOR): Same.\n\t(ASM_OUTPUT_DEF): Same.\n\t(ASM_OUTPUT_DESTRUCTOR): Same.\n\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Same.\n\t(ASM_OUTPUT_SECTION_NAME): Same.\n\t(ASM_WEAKEN_LABEL): Same.\n\t(BSS_SECTION_ASM_OP): Same.\n\t(COMMON_ASM_OP): Same.\n\t(CONST_SECTION_ASM_OP): Same.\n\t(CONST_SECTION_FUNCTION): Same.\n\t(CTORS_SECTION_ASM_OP): Same.\n\t(DTORS_SECTION_ASM_OP): Same.\n\t(ESCAPES): Same.\n\t(FINI_SECTION_ASM_OP): Same.\n\t(IDENT_ASM_OP): Same.\n\t(IDENT_ASM_OP): Same.\n\t(INIT_SECTION_ASM_OP): Same.\n\t(INT_ASM_OP): Same.\n\t(MAX_OFILE_ALIGNMENT): Same.\n\t(SBSS_SECTION_ASM_OP): Same.\n\t(SDATA_SECTION_ASM_OP): Same.\n\t(SECTION_FUNCTION_TEMPLATE): Same.\n\t(SELECT_SECTION): Same.\n\t(SE_CONST_SECTION): Same.\n\t(SIZE_ASM_OP): Same.\n\t(SKIP_ASM_OP): Same.\n\t(STRING_ASM_OP): Same.\n\t(STRING_LIMIT): Same.\n\t(TYPE_ASM_OP): Same.\n\t(TYPE_OPERAND_FMT): Same.\n\nApproved by:  Richard Henderson <rth@redhat.com>\n              Message-ID: <20001128205112.C9793@redhat.com>\n\nFrom-SVN: r37860", "tree": {"sha": "c6dad41543cf1811284a81a3e0cab306f989c85c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6dad41543cf1811284a81a3e0cab306f989c85c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e5aa4b46ce430a362382c628fc017268ba2378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e5aa4b46ce430a362382c628fc017268ba2378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e5aa4b46ce430a362382c628fc017268ba2378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e5aa4b46ce430a362382c628fc017268ba2378/comments", "author": null, "committer": null, "parents": [{"sha": "0eaed3c665d929d927cc9a94eba7819b352b970f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eaed3c665d929d927cc9a94eba7819b352b970f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eaed3c665d929d927cc9a94eba7819b352b970f"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "4ec5d88de5d928ea272b930e34b9ad41118d713a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e5aa4b46ce430a362382c628fc017268ba2378/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e5aa4b46ce430a362382c628fc017268ba2378/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74e5aa4b46ce430a362382c628fc017268ba2378", "patch": "@@ -1,3 +1,42 @@\n+2000-11-29  David O'Brien  <obrien@FreeBSD.org>\n+\n+\t* config/alpha/elf.h (IDENT_ASM_OP): Protect the #define.\n+\t(ASM_DECLARE_OBJECT_NAME): Same.\n+\t(ASM_FILE_END): Same.\n+\t(ASM_FINISH_DECLARE_OBJECT): Same.\n+\t(ASM_IDENTIFY_GCC): Same.\n+\t(ASM_IDENTIFY_LANGUAGE): Same.\n+\t(ASM_OUTPUT_CONSTRUCTOR): Same.\n+\t(ASM_OUTPUT_DEF): Same.\n+\t(ASM_OUTPUT_DESTRUCTOR): Same.\n+\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Same.\n+\t(ASM_OUTPUT_SECTION_NAME): Same.\n+\t(ASM_WEAKEN_LABEL): Same.\n+\t(BSS_SECTION_ASM_OP): Same.\n+\t(COMMON_ASM_OP): Same.\n+\t(CONST_SECTION_ASM_OP): Same.\n+\t(CONST_SECTION_FUNCTION): Same.\n+\t(CTORS_SECTION_ASM_OP): Same.\n+\t(DTORS_SECTION_ASM_OP): Same.\n+\t(ESCAPES): Same.\n+\t(FINI_SECTION_ASM_OP): Same.\n+\t(IDENT_ASM_OP): Same.\n+\t(IDENT_ASM_OP): Same.\n+\t(INIT_SECTION_ASM_OP): Same.\n+\t(INT_ASM_OP): Same.\n+\t(MAX_OFILE_ALIGNMENT): Same.\n+\t(SBSS_SECTION_ASM_OP): Same.\n+\t(SDATA_SECTION_ASM_OP): Same.\n+\t(SECTION_FUNCTION_TEMPLATE): Same.\n+\t(SELECT_SECTION): Same.\n+\t(SE_CONST_SECTION): Same.\n+\t(SIZE_ASM_OP): Same.\n+\t(SKIP_ASM_OP): Same.\n+\t(STRING_ASM_OP): Same.\n+\t(STRING_LIMIT): Same.\n+\t(TYPE_ASM_OP): Same.\n+\t(TYPE_OPERAND_FMT): Same.\n+\n 2000-11-29  Neil Booth  <neilb@earthling.net>\n \n         * c-decl.c (c_decode_option): Don't handle -lang-objc."}, {"sha": "5026d3ca991ea7f06497dca8bccbc358dba5876a", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e5aa4b46ce430a362382c628fc017268ba2378/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e5aa4b46ce430a362382c628fc017268ba2378/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=74e5aa4b46ce430a362382c628fc017268ba2378", "patch": "@@ -71,14 +71,18 @@ do {\t\t\t\t\t\t\t\t\\\n    .ident string is patterned after the ones produced by native svr4\n    C compilers.  */\n \n+#undef  IDENT_ASM_OP\n #define IDENT_ASM_OP \"\\t.ident\\t\"\n \n #ifdef IDENTIFY_WITH_IDENT\n+#undef  ASM_IDENTIFY_GCC\n #define ASM_IDENTIFY_GCC(FILE) /* nothing */\n+#undef  ASM_IDENTIFY_LANGUAGE\n #define ASM_IDENTIFY_LANGUAGE(FILE)\t\t\t\\\n  fprintf(FILE, \"%s\\\"GCC (%s) %s\\\"\\n\", IDENT_ASM_OP,\t\\\n \t lang_identify(), version_string)\n #else\n+#undef  ASM_FILE_END\n #define ASM_FILE_END(FILE)\t\t\t\t\t\\\n do {\t\t\t\t \t\t\t\t\\\n      if (!flag_no_ident)\t\t\t\t\t\\\n@@ -98,6 +102,7 @@ do {\t\t\t\t \t\t\t\t\\\n /* This is how to allocate empty space in some section.  The .zero\n    pseudo-op is used for this on most svr4 assemblers.  */\n \n+#undef  SKIP_ASM_OP\n #define SKIP_ASM_OP\t\"\\t.zero\\t\"\n \n #undef  ASM_OUTPUT_SKIP\n@@ -112,6 +117,7 @@ do {\t\t\t\t \t\t\t\t\\\n    make sure that the location counter for the .rodata section gets pro-\n    perly re-aligned prior to the actual beginning of the jump table.  */\n \n+#undef  ALIGN_ASM_OP\n #define ALIGN_ASM_OP \"\\t.align\\t\"\n \n #ifndef ASM_OUTPUT_BEFORE_CASE_LABEL\n@@ -130,6 +136,7 @@ do {\t\t\t\t \t\t\t\t\\\n    library routines (e.g. .udiv) be explicitly declared as .globl\n    in each assembly file where they are referenced.  */\n \n+#undef  ASM_OUTPUT_EXTERNAL_LIBCALL\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\t\t\t\\\n   ASM_GLOBALIZE_LABEL (FILE, XSTR (FUN, 0))\n \n@@ -138,6 +145,7 @@ do {\t\t\t\t \t\t\t\t\\\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n+#undef  COMMON_ASM_OP\n #define COMMON_ASM_OP\t\"\\t.comm\\t\"\n \n #undef  ASM_OUTPUT_ALIGNED_COMMON\n@@ -179,6 +187,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* This is the pseudo-op used to generate a 64-bit word of data with a\n    specific value in some section.  */\n \n+#undef  INT_ASM_OP\n #define INT_ASM_OP\t\t\"\\t.quad\\t\"\n \n /* Biggest alignment supported by the object file format of this\n@@ -190,6 +199,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    we could only potentially get to 2^60 on suitible hosts.  Due to other\n    considerations in varasm, we must restrict this to what fits in an int.  */\n \n+#undef  MAX_OFILE_ALIGNMENT\n #define MAX_OFILE_ALIGNMENT \\\n   (1 << (HOST_BITS_PER_INT < 64 ? HOST_BITS_PER_INT - 2 : 62))\n \n@@ -208,8 +218,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n    EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n    SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n \n+#undef USE_CONST_SECTION\n #define USE_CONST_SECTION\t1\n \n+#undef  CONST_SECTION_ASM_OP\n #define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n /* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n@@ -227,12 +239,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n    errors unless the .ctors and .dtors sections are marked as writable\n    via the SHF_WRITE attribute.)  */\n \n+#undef  CTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n+#undef  DTORS_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n \n /* Handle the small data sections.  */\n+#undef  BSS_SECTION_ASM_OP\n #define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n+#undef  SBSS_SECTION_ASM_OP\n #define SBSS_SECTION_ASM_OP\t\"\\t.section\\t.sbss,\\\"aw\\\"\"\n+#undef  SDATA_SECTION_ASM_OP\n #define SDATA_SECTION_ASM_OP\t\"\\t.section\\t.sdata,\\\"aw\\\"\"\n \n /* On svr4, we *do* have support for the .init and .fini sections, and we\n@@ -241,7 +258,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n    The definitions say how to change sections to the .init and .fini\n    sections.  This is the same for all known svr4 assemblers.  */\n \n+#undef  INIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n+#undef  FINI_SECTION_ASM_OP\n #define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n \n /* A default list of other sections which we might be \"in\" at any given\n@@ -272,6 +291,7 @@ extern void sdata_section\t\tPARAMS ((void));\n #undef  READONLY_DATA_SECTION\n #define READONLY_DATA_SECTION() const_section ()\n \n+#undef  CONST_SECTION_FUNCTION\n #define CONST_SECTION_FUNCTION\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\\\n const_section ()\t\t\t\t\t\t\\\n@@ -285,6 +305,7 @@ const_section ()\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n }\n \n+#undef  SECTION_FUNCTION_TEMPLATE\n #define SECTION_FUNCTION_TEMPLATE(FN, ENUM, OP)\t\\\n void FN ()\t\t\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -301,6 +322,7 @@ void FN ()\t\t\t\t\t\\\n \n    We make the section read-only and executable for a function decl,\n    read-only for a const data decl, and writable for a non-const data decl.  */\n+#undef  ASM_OUTPUT_SECTION_NAME\n #define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC) \\\n   fprintf (FILE, \".section\\t%s,\\\"%s\\\",@progbits\\n\", NAME, \\\n \t   (DECL) && TREE_CODE (DECL) == FUNCTION_DECL ? \"ax\" : \\\n@@ -309,6 +331,7 @@ void FN ()\t\t\t\t\t\\\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n+#undef  ASM_OUTPUT_CONSTRUCTOR\n #define ASM_OUTPUT_CONSTRUCTOR(FILE, NAME)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n@@ -319,6 +342,7 @@ void FN ()\t\t\t\t\t\\\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global destructors.  */\n+#undef  ASM_OUTPUT_DESTRUCTOR\n #define ASM_OUTPUT_DESTRUCTOR(FILE, NAME)      \t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n@@ -332,6 +356,7 @@ void FN ()\t\t\t\t\t\\\n    or a constant of some sort.  RELOC indicates whether forming\n    the initial value of DECL requires link-time relocations.  */\n \n+#undef  SELECT_SECTION\n #define SELECT_SECTION(DECL, RELOC)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == STRING_CST)\t\t\t\t\t\\\n@@ -393,17 +418,21 @@ void FN ()\t\t\t\t\t\\\n    different pseudo-op names for these, they may be overridden in the\n    file which includes this one.  */\n \n+#undef  TYPE_ASM_OP\n #define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#undef  SIZE_ASM_OP\n #define SIZE_ASM_OP\t\"\\t.size\\t\"\n \n /* This is how we tell the assembler that a symbol is weak.  */\n \n+#undef  ASM_WEAKEN_LABEL\n #define ASM_WEAKEN_LABEL(FILE, NAME) \\\n   do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n        fputc ('\\n', FILE); } while (0)\n \n /* This is how we tell the assembler that two symbols have the same value.  */\n \n+#undef  ASM_OUTPUT_DEF\n #define ASM_OUTPUT_DEF(FILE, NAME1, NAME2) \\\n   do { assemble_name(FILE, NAME1); \t \\\n        fputs(\" = \", FILE);\t\t \\\n@@ -416,6 +445,7 @@ void FN ()\t\t\t\t\t\\\n    is just a default.  You may need to override it in your machine-\n    specific tm.h file (depending upon the particulars of your assembler).  */\n \n+#undef  TYPE_OPERAND_FMT\n #define TYPE_OPERAND_FMT\t\"@%s\"\n \n /* Write the extra assembler code needed to declare a function's result.\n@@ -433,6 +463,7 @@ void FN ()\t\t\t\t\t\\\n \n /* Write the extra assembler code needed to declare an object properly.  */\n \n+#undef  ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     HOST_WIDE_INT size;\t\t\t\t\t\t\\\n@@ -462,6 +493,7 @@ void FN ()\t\t\t\t\t\\\n    size_directive_output was set\n    by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n \n+#undef  ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\\\n@@ -496,6 +528,7 @@ void FN ()\t\t\t\t\t\\\n    the i386) don't know about that.  Also, we don't use \\v\n    since some versions of gas, such as 2.2 did not accept it.  */\n \n+#undef  ESCAPES\n #define ESCAPES \\\n \"\\1\\1\\1\\1\\1\\1\\1\\1btn\\1fr\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n \\0\\0\\\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\\n@@ -517,7 +550,9 @@ void FN ()\t\t\t\t\t\\\n    If your target assembler doesn't support the .string directive, you\n    should define this to zero.  */\n \n+#undef  STRING_LIMIT\n #define STRING_LIMIT\t((unsigned) 256)\n+#undef  STRING_ASM_OP\n #define STRING_ASM_OP\t\"\\t.string\\t\"\n \n /* GAS is the only Alpha/ELF assembler.  */"}]}