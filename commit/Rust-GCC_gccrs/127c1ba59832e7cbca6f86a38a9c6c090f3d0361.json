{"sha": "127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI3YzFiYTU5ODMyZTdjYmNhNmY4NmEzOGE5YzZjMDkwZjNkMDM2MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2002-03-08T12:29:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2002-03-08T12:29:13Z"}, "message": "rtl.c (copy_most_rtx): Move from here ...\n\n\t* rtl.c (copy_most_rtx): Move from here ...\n\t* emit-rtl.c (copy_most_rtx): ... to here.\n\nFrom-SVN: r50435", "tree": {"sha": "69e03447f4533182251aad1f02e8ca6e223f91e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e03447f4533182251aad1f02e8ca6e223f91e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127c1ba59832e7cbca6f86a38a9c6c090f3d0361/comments", "author": null, "committer": null, "parents": [{"sha": "e9fb78a4715ccc3e1f4f2c59dd04a2b835ef6644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fb78a4715ccc3e1f4f2c59dd04a2b835ef6644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9fb78a4715ccc3e1f4f2c59dd04a2b835ef6644"}], "stats": {"total": 205, "additions": 105, "deletions": 100}, "files": [{"sha": "b951136272edeb8e8fa4bae9eef8d498d85b5f05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127c1ba59832e7cbca6f86a38a9c6c090f3d0361/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127c1ba59832e7cbca6f86a38a9c6c090f3d0361/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "patch": "@@ -1,3 +1,8 @@\n+Fri Mar  8 06:48:45 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* rtl.c (copy_most_rtx): Move from here ...\n+\t* emit-rtl.c (copy_most_rtx): ... to here.\n+\n 2002-03-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/mips/mips.h (LONG_MAX_SPEC): Rewrite, along with"}, {"sha": "e3d557fe809881f79bd1b4a2166fb31c5bce5418", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127c1ba59832e7cbca6f86a38a9c6c090f3d0361/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127c1ba59832e7cbca6f86a38a9c6c090f3d0361/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "patch": "@@ -2238,6 +2238,106 @@ reset_used_decls (blk)\n     reset_used_decls (t);\n }\n \n+/* Similar to `copy_rtx' except that if MAY_SHARE is present, it is\n+   placed in the result directly, rather than being copied.  */\n+\n+rtx\n+copy_most_rtx (orig, may_share)\n+     rtx orig;\n+     rtx may_share;\n+{\n+  rtx copy;\n+  int i, j;\n+  RTX_CODE code;\n+  const char *format_ptr;\n+\n+  if (orig == may_share)\n+    return orig;\n+\n+  code = GET_CODE (orig);\n+\n+  switch (code)\n+    {\n+    case REG:\n+    case QUEUED:\n+    case CONST_INT:\n+    case CONST_DOUBLE:\n+    case CONST_VECTOR:\n+    case SYMBOL_REF:\n+    case CODE_LABEL:\n+    case PC:\n+    case CC0:\n+      return orig;\n+    default:\n+      break;\n+    }\n+\n+  copy = rtx_alloc (code);\n+  PUT_MODE (copy, GET_MODE (orig));\n+  copy->in_struct = orig->in_struct;\n+  copy->volatil = orig->volatil;\n+  copy->unchanging = orig->unchanging;\n+  copy->integrated = orig->integrated;\n+  copy->frame_related = orig->frame_related;\n+\n+  format_ptr = GET_RTX_FORMAT (GET_CODE (copy));\n+\n+  for (i = 0; i < GET_RTX_LENGTH (GET_CODE (copy)); i++)\n+    {\n+      switch (*format_ptr++)\n+\t{\n+\tcase 'e':\n+\t  XEXP (copy, i) = XEXP (orig, i);\n+\t  if (XEXP (orig, i) != NULL && XEXP (orig, i) != may_share)\n+\t    XEXP (copy, i) = copy_most_rtx (XEXP (orig, i), may_share);\n+\t  break;\n+\n+\tcase 'u':\n+\t  XEXP (copy, i) = XEXP (orig, i);\n+\t  break;\n+\n+\tcase 'E':\n+\tcase 'V':\n+\t  XVEC (copy, i) = XVEC (orig, i);\n+\t  if (XVEC (orig, i) != NULL)\n+\t    {\n+\t      XVEC (copy, i) = rtvec_alloc (XVECLEN (orig, i));\n+\t      for (j = 0; j < XVECLEN (copy, i); j++)\n+\t\tXVECEXP (copy, i, j)\n+\t\t  = copy_most_rtx (XVECEXP (orig, i, j), may_share);\n+\t    }\n+\t  break;\n+\n+\tcase 'w':\n+\t  XWINT (copy, i) = XWINT (orig, i);\n+\t  break;\n+\n+\tcase 'n':\n+\tcase 'i':\n+\t  XINT (copy, i) = XINT (orig, i);\n+\t  break;\n+\n+\tcase 't':\n+\t  XTREE (copy, i) = XTREE (orig, i);\n+\t  break;\n+\n+\tcase 's':\n+\tcase 'S':\n+\t  XSTR (copy, i) = XSTR (orig, i);\n+\t  break;\n+\n+\tcase '0':\n+\t  /* Copy this through the wide int field; that's safest.  */\n+\t  X0WINT (copy, i) = X0WINT (orig, i);\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+  return copy;\n+}\n+\n /* Mark ORIG as in use, and return a copy of it if it was already in use.\n    Recursively does the same for subexpressions.  */\n "}, {"sha": "7d70059cbba1b2de40ea979f6b5d7fb128c99c76", "filename": "gcc/rtl.c", "status": "modified", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127c1ba59832e7cbca6f86a38a9c6c090f3d0361/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127c1ba59832e7cbca6f86a38a9c6c090f3d0361/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "patch": "@@ -441,106 +441,6 @@ copy_rtx (orig)\n   return copy;\n }\n \n-/* Similar to `copy_rtx' except that if MAY_SHARE is present, it is\n-   placed in the result directly, rather than being copied.  */\n-\n-rtx\n-copy_most_rtx (orig, may_share)\n-     rtx orig;\n-     rtx may_share;\n-{\n-  rtx copy;\n-  int i, j;\n-  RTX_CODE code;\n-  const char *format_ptr;\n-\n-  if (orig == may_share)\n-    return orig;\n-\n-  code = GET_CODE (orig);\n-\n-  switch (code)\n-    {\n-    case REG:\n-    case QUEUED:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n-    case SYMBOL_REF:\n-    case CODE_LABEL:\n-    case PC:\n-    case CC0:\n-      return orig;\n-    default:\n-      break;\n-    }\n-\n-  copy = rtx_alloc (code);\n-  PUT_MODE (copy, GET_MODE (orig));\n-  copy->in_struct = orig->in_struct;\n-  copy->volatil = orig->volatil;\n-  copy->unchanging = orig->unchanging;\n-  copy->integrated = orig->integrated;\n-  copy->frame_related = orig->frame_related;\n-\n-  format_ptr = GET_RTX_FORMAT (GET_CODE (copy));\n-\n-  for (i = 0; i < GET_RTX_LENGTH (GET_CODE (copy)); i++)\n-    {\n-      switch (*format_ptr++)\n-\t{\n-\tcase 'e':\n-\t  XEXP (copy, i) = XEXP (orig, i);\n-\t  if (XEXP (orig, i) != NULL && XEXP (orig, i) != may_share)\n-\t    XEXP (copy, i) = copy_most_rtx (XEXP (orig, i), may_share);\n-\t  break;\n-\n-\tcase 'u':\n-\t  XEXP (copy, i) = XEXP (orig, i);\n-\t  break;\n-\n-\tcase 'E':\n-\tcase 'V':\n-\t  XVEC (copy, i) = XVEC (orig, i);\n-\t  if (XVEC (orig, i) != NULL)\n-\t    {\n-\t      XVEC (copy, i) = rtvec_alloc (XVECLEN (orig, i));\n-\t      for (j = 0; j < XVECLEN (copy, i); j++)\n-\t\tXVECEXP (copy, i, j)\n-\t\t  = copy_most_rtx (XVECEXP (orig, i, j), may_share);\n-\t    }\n-\t  break;\n-\n-\tcase 'w':\n-\t  XWINT (copy, i) = XWINT (orig, i);\n-\t  break;\n-\n-\tcase 'n':\n-\tcase 'i':\n-\t  XINT (copy, i) = XINT (orig, i);\n-\t  break;\n-\n-\tcase 't':\n-\t  XTREE (copy, i) = XTREE (orig, i);\n-\t  break;\n-\n-\tcase 's':\n-\tcase 'S':\n-\t  XSTR (copy, i) = XSTR (orig, i);\n-\t  break;\n-\n-\tcase '0':\n-\t  /* Copy this through the wide int field; that's safest.  */\n-\t  X0WINT (copy, i) = X0WINT (orig, i);\n-\t  break;\n-\n-\tdefault:\n-\t  abort ();\n-\t}\n-    }\n-  return copy;\n-}\n-\n /* Create a new copy of an rtx.  Only copy just one level.  */\n \n rtx"}]}