{"sha": "3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "node_id": "C_kwDOANBUbNoAKDNiMmUzZmEzOWRkMmI2MDY1NjZmNDcwMDZkMDE1ZjljNDQ3ZGNjN2Q", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-23T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-23T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "3a80fea7b1e5cc6a11cf26764976f06800300dda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a80fea7b1e5cc6a11cf26764976f06800300dda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/comments", "author": null, "committer": null, "parents": [{"sha": "cc4fa7a210b638d6a46f14dab17f2361389d18e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4fa7a210b638d6a46f14dab17f2361389d18e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4fa7a210b638d6a46f14dab17f2361389d18e1"}], "stats": {"total": 167, "additions": 166, "deletions": 1}, "files": [{"sha": "79fdfd3dd4110c4bad9263186f6578c5100c9ad3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "patch": "@@ -1,3 +1,96 @@\n+2022-08-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* config/pru/pru.md (pru_<code>di3): New alternative for\n+\ttwo operands but without earlyclobber.\n+\n+2022-08-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* config/pru/pru.md (prumov<mode>, mov<mode>): Add\n+\tvariants for loading -1 consts.\n+\n+2022-08-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\tPR target/106564\n+\t* config/pru/constraints.md (Um): New constraint for -1.\n+\t(Uf): New constraint for IOR fill-bytes constants.\n+\t(Uz): New constraint for AND zero-bytes constants.\n+\t* config/pru/predicates.md (const_fillbytes_operand): New\n+\tpredicate for IOR fill-bytes constants.\n+\t(const_zerobytes_operand): New predicate for AND zero-bytes\n+\tconstants.\n+\t* config/pru/pru-protos.h (pru_output_sign_extend): Remove.\n+\t(struct pru_byterange): New struct to describe a byte range.\n+\t(pru_calc_byterange): New declaration.\n+\t* config/pru/pru.cc (pru_rtx_costs): Add penalty for\n+\t64-bit zero-extend.\n+\t(pru_output_sign_extend): Remove.\n+\t(pru_calc_byterange): New helper function to extract byte\n+\trange info from a constant.\n+\t(pru_print_operand): Remove 'y' and 'z' print modifiers.\n+\t* config/pru/pru.md (zero_extendqidi2): New pattern.\n+\t(zero_extendhidi2): New pattern.\n+\t(zero_extendsidi2): New pattern.\n+\t(extend<EQS0:mode><EQD:mode>2): Rewrite as an expand.\n+\t(@pru_ior_fillbytes<mode>): New pattern.\n+\t(@pru_and_zerobytes<mode>): New pattern.\n+\t(<code>di3): Rewrite as an expand and handle ZERO and FILL\n+\tspecial cases.\n+\t(pru_<code>di3): New name for <code>di3.\n+\t(@cbranch_qbbx_const_<BIT_TEST:code><HIDI:mode>): New pattern to\n+\thandle bit-test for 64-bit registers.\n+\n+2022-08-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.h (predicate::m_use_expr): Remove.\n+\t(predicate::def_expr): Likewise.\n+\t(predicate::use_expr): Likewise.\n+\t(predicate::expr): Likewise.\n+\t* gimple-predicate-analysis.cc (predicate::def_expr): Remove.\n+\t(predicate::use_expr): Likewise.\n+\t(predicate::expr): Likewise.\n+\t(predicate::is_use_guarded): Do not build m_use_expr.\n+\n+2022-08-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/106700\n+\t* configure.ac: Detect O_NONBLOCK flag for open.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* opts-common.cc (jobserver_info::connect): Set is_connected\n+\t  properly based on O_NONBLOCK.\n+\t* opts-jobserver.h (struct jobserver_info): Add is_connected\n+\t  member variable.\n+\n+2022-08-22  zhongjuzhe  <juzhe.zhong@rivai.ai>\n+\n+\t* simplify-rtx.cc (test_vector_subregs_fore_back): Make first value\n+\tand repeat value different.\n+\n+2022-08-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR lto/106686\n+\t* lto-wrapper.cc (free_array_of_ptrs): Move before tool_cleanup.\n+\t(tool_cleanup): Unlink offload_names.\n+\t(compile_offload_image): Take filename argument to set it early.\n+\t(compile_images_for_offload_targets): Update call; set\n+\toffload_names to NULL after freeing the array.\n+\n+2022-08-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105937\n+\t* tree-ssa-uninit.cc (find_uninit_use): Do not queue PHIs\n+\ton backedges.\n+\t(execute_late_warn_uninitialized): Mark backedges.\n+\n+2022-08-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (predicate::use_cannot_happen):\n+\tIf the use is guarded with multiple predicate paths compute\n+\tthe predicates intersection before going forward.  When\n+\tcompute_control_dep_chain wasn't able to come up with at\n+\tleast one path from function entry to the PHI edge compute\n+\ta conservative sparse path instead.\n+\n 2022-08-20  Lulu Cheng  <chenglulu@loongson.cn>\n \n \t* config/loongarch/loongarch-opts.cc: Allow cmodel to be extreme."}, {"sha": "5d5b4de7ffdbfa4d2010932cad77e32d112d3c67", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "patch": "@@ -1 +1 @@\n-20220822\n+20220823"}, {"sha": "01cf9d875d7a50b0c7b92c894447e255702d7bdd", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "patch": "@@ -1,3 +1,7 @@\n+2022-08-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* region-model.cc: Add missing final keyword.\n+\n 2022-08-18  Tim Lange  <mail@tim-lange.me>\n \n \tPR analyzer/106181"}, {"sha": "1352a54dbb55213e71e2aba2deb2d91d222394ac", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "patch": "@@ -1,3 +1,11 @@\n+2022-08-22  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/106557\n+\t* simplify.cc (gfc_simplify_ibclr): Ensure consistent results of\n+\tthe simplification by dropping a redundant memory representation\n+\tof argument x.\n+\t(gfc_simplify_ibset): Likewise.\n+\n 2022-08-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/46539"}, {"sha": "09a86eff9d43b6ab297822cd207e6569667cae90", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "patch": "@@ -1,3 +1,9 @@\n+2022-08-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/106700\n+\t* lto.cc (wait_for_child): Ask if we are connected to jobserver.\n+\t(stream_out_partitions): Likewise.\n+\n 2022-08-10  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/106328"}, {"sha": "df36b5c4c3977937bac00d3c17d2c7051c0714cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "patch": "@@ -1,3 +1,29 @@\n+2022-08-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.target/pru/bitop-di.c: New test.\n+\n+2022-08-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.target/pru/mov-m1.c: New test.\n+\n+2022-08-22  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\tPR target/106564\n+\t* gcc.target/pru/pr106564-1.c: New test.\n+\t* gcc.target/pru/pr106564-2.c: New test.\n+\t* gcc.target/pru/pr106564-3.c: New test.\n+\t* gcc.target/pru/pr106564-4.c: New test.\n+\n+2022-08-22  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/106557\n+\t* gfortran.dg/pr106557.f90: New test.\n+\n+2022-08-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105937\n+\t* g++.dg/uninit-pr105937.C: New testcase.\n+\n 2022-08-20  Lulu Cheng  <chenglulu@loongson.cn>\n \n \t* gcc.target/loongarch/func-call-1.c: Add option '-mcmodel=normal'."}, {"sha": "b82772e39b5ffd1696b4a18cba7143158428e7b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b2e3fa39dd2b606566f47006d015f9c447dcc7d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3b2e3fa39dd2b606566f47006d015f9c447dcc7d", "patch": "@@ -1,3 +1,31 @@\n+2022-08-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105678\n+\t* doc/xml/manual/using.xml: Document -lstdc++_libbacktrace\n+\trequirement for using std::stacktrace. Also adjust -frtti and\n+\t-fexceptions to document non-default (i.e. negative) forms.\n+\t* doc/html/*: Regenerate.\n+\n+2022-08-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/106695\n+\t* include/bits/std_thread.h (thread::_State_impl): Forward\n+\tindividual arguments to _Invoker constructor.\n+\t(thread::_Invoker): Add constructor. Delete copies.\n+\t* include/std/future (__future_base::_Deferred_state): Forward\n+\tindividual arguments to _Invoker constructor.\n+\t(__future_base::_Async_state_impl): Likewise.\n+\t* testsuite/30_threads/async/106695.cc: New test.\n+\t* testsuite/30_threads/thread/106695.cc: New test.\n+\n+2022-08-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/106607\n+\t* include/bits/regex_compiler.tcc (_Compiler::_M_cur_int_value):\n+\tUse built-ins to check for integer overflow in back-reference\n+\tnumber.\n+\t* testsuite/28_regex/basic_regex/106607.cc: New test.\n+\n 2022-08-17  Keef Aragon  <keef.aragon@konscious.net>\n \n \t* libsupc++/eh_alloc.cc (pool::free): Inverse comparison."}]}