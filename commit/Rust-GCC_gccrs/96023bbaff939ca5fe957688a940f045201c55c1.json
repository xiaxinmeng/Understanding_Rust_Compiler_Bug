{"sha": "96023bbaff939ca5fe957688a940f045201c55c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYwMjNiYmFmZjkzOWNhNWZlOTU3Njg4YTk0MGYwNDUyMDFjNTVjMQ==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2014-11-05T11:22:28Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2014-11-05T11:22:28Z"}, "message": "simplify-rtx.c (simplify_binary_operation_1): Div check added.\n\n2014-11-05  Alex Velenko  <Alex.Velenko@arm.com>\n\n    gcc/\n    * simplify-rtx.c (simplify_binary_operation_1): Div check added.\n    * rtl.h (SUBREG_P): New macro added.\n\n    gcc/testsuite/\n    * gcc.dg/asr-div1.c: New testcase.\n\nFrom-SVN: r217118", "tree": {"sha": "22ea68efbe565c6d94846fa9b5ecbb5f410b0749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22ea68efbe565c6d94846fa9b5ecbb5f410b0749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96023bbaff939ca5fe957688a940f045201c55c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96023bbaff939ca5fe957688a940f045201c55c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96023bbaff939ca5fe957688a940f045201c55c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96023bbaff939ca5fe957688a940f045201c55c1/comments", "author": null, "committer": null, "parents": [{"sha": "8c7686294ebecda8d3801e0a38ba174c9b527f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7686294ebecda8d3801e0a38ba174c9b527f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7686294ebecda8d3801e0a38ba174c9b527f8f"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "a9b456501c5a2960dd4ca9cdc1e8aa4757a11639", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96023bbaff939ca5fe957688a940f045201c55c1", "patch": "@@ -1,3 +1,8 @@\n+2014-11-05  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation_1): Div check added.\n+\t* rtl.h (SUBREG_P): New macro added.\n+\n 2014-11-05  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "09d20e2b5449825d262411bf975a870dd3186a4f", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=96023bbaff939ca5fe957688a940f045201c55c1", "patch": "@@ -789,6 +789,9 @@ struct GTY(()) rtvec_def {\n /* Predicate yielding nonzero iff X is a data for a jump table.  */\n #define JUMP_TABLE_DATA_P(INSN) (GET_CODE (INSN) == JUMP_TABLE_DATA)\n \n+/* Predicate yielding nonzero iff RTX is a subreg.  */\n+#define SUBREG_P(RTX) (GET_CODE (RTX) == SUBREG)\n+\n template <>\n template <>\n inline bool"}, {"sha": "8094c7584ac12aa718dfee2117fd2077d4811bd9", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=96023bbaff939ca5fe957688a940f045201c55c1", "patch": "@@ -3104,6 +3104,44 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  && UINTVAL (trueop0) == GET_MODE_MASK (mode)\n \t  && ! side_effects_p (op1))\n \treturn op0;\n+      /* Given:\n+         scalar modes M1, M2\n+         scalar constants c1, c2\n+         size (M2) > size (M1)\n+         c1 == size (M2) - size (M1)\n+         optimize:\n+         (ashiftrt:M1 (subreg:M1 (lshiftrt:M2 (reg:M2)\n+                                              (const_int <c1>))\n+                                  <low_part>)\n+                      (const_int <c2>))\n+         to:\n+         (subreg:M1 (ashiftrt:M2 (reg:M2)\n+                                 (const_int <c1 + c2>))\n+          <low_part>).  */\n+      if (!VECTOR_MODE_P (mode)\n+          && SUBREG_P (op0)\n+          && CONST_INT_P (op1)\n+          && (GET_CODE (SUBREG_REG (op0)) == LSHIFTRT)\n+          && !VECTOR_MODE_P (GET_MODE (SUBREG_REG (op0)))\n+          && CONST_INT_P (XEXP (SUBREG_REG (op0), 1))\n+          && (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n+              > GET_MODE_BITSIZE (mode))\n+          && (INTVAL (XEXP (SUBREG_REG (op0), 1))\n+              == (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n+                  - GET_MODE_BITSIZE (mode)))\n+          && subreg_lowpart_p (op0))\n+        {\n+          rtx tmp = GEN_INT (INTVAL (XEXP (SUBREG_REG (op0), 1))\n+                             + INTVAL (op1));\n+          machine_mode inner_mode = GET_MODE (SUBREG_REG (op0));\n+          tmp = simplify_gen_binary (ASHIFTRT,\n+                                     GET_MODE (SUBREG_REG (op0)),\n+                                     XEXP (SUBREG_REG (op0), 0),\n+                                     tmp);\n+          return simplify_gen_subreg (mode, tmp, inner_mode,\n+                                      subreg_lowpart_offset (mode,\n+                                                             inner_mode));\n+        }\n     canonicalize_shift:\n       if (SHIFT_COUNT_TRUNCATED && CONST_INT_P (op1))\n \t{"}, {"sha": "6e956b403a30cc3a5130b96dd749c23f11987cc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96023bbaff939ca5fe957688a940f045201c55c1", "patch": "@@ -1,3 +1,7 @@\n+2014-11-05  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.dg/asr-div1.c: New testcase.\n+\n 2014-11-04  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* go.test/go-test.exp (go-set-goarch): Enable tests on s390[x]."}, {"sha": "61430ca6a980e57d4e49e8473068636792373a35", "filename": "gcc/testsuite/gcc.dg/asr_div1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2Ftestsuite%2Fgcc.dg%2Fasr_div1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96023bbaff939ca5fe957688a940f045201c55c1/gcc%2Ftestsuite%2Fgcc.dg%2Fasr_div1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasr_div1.c?ref=96023bbaff939ca5fe957688a940f045201c55c1", "patch": "@@ -0,0 +1,56 @@\n+/* Test division by const int generates only one shift.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-rtl-combine-all\" } */\n+\n+extern void abort (void);\n+\n+#define NOINLINE __attribute__((noinline))\n+\n+static NOINLINE int\n+f1 (int n)\n+{\n+  return n / 33;\n+}\n+\n+static NOINLINE int\n+f2 (int n)\n+{\n+  return n / 77;\n+}\n+\n+int\n+main ()\n+{\n+  int a = 0xaaaaaaaa;\n+  int b = 0x55555555;\n+  int c;\n+  c = f1 (a);\n+  if (c != 0xfd6a052c)\n+    abort ();\n+  c = f1 (b);\n+  if (c != 0x295FAD4)\n+    abort ();\n+  c = f2 (a);\n+  if (c != 0xfee44b5c)\n+    abort ();\n+  c = f2 (b);\n+  if (c != 0x11bb4a4)\n+    abort ();\n+  return 0;\n+}\n+\n+/* Following replacement pattern of intger division by constant, GCC is expected\n+   to generate MULT and (x)SHIFTRT.  This test checks that considering division\n+   by const 33, gcc generates a single ASHIFTRT by 35, instead of two - LSHIFTRT\n+   by 32 and ASHIFTRT by 3.  */\n+\n+/* { dg-final { scan-rtl-dump \"\\\\(set \\\\(subreg:DI \\\\(reg:SI\" \"combine\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-rtl-dump \"\\\\(ashiftrt:DI \\\\(reg:DI\" \"combine\" { target aarch64*-*-* } } } */\n+/* { dg-final { scan-rtl-dump \"\\\\(const_int 35 \" \"combine\" { target aarch64*-*-* } } } */\n+\n+/* Similarly, considering division by const 77, gcc generates a single ASHIFTRT\n+   by 36, instead of two - LSHIFTRT by 32 and ASHIFTRT by 4.  */\n+\n+/* { dg-final { scan-rtl-dump \"\\\\(const_int 36 \" \"combine\" { target aarch64*-*-* } } } */\n+\n+/* { dg-final { cleanup-rtl-dump \"combine\" } } */"}]}