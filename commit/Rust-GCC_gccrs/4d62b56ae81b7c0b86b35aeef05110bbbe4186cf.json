{"sha": "4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ2MmI1NmFlODFiN2MwYjg2YjM1YWVlZjA1MTEwYmJiZTQxODZjZg==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2009-10-28T20:44:47Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2009-10-28T20:44:47Z"}, "message": "trans-common.c (create_common): Set TREE_PUBLIC to false on fake variables.\n\n2009-10-28  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* trans-common.c (create_common): Set TREE_PUBLIC to false on\n\tfake variables.\n\n2009-10-28  Rafael Avila de Espindola  <espindola@google.com>\n\n\t* dbxout.c (dbxout_common_check): Accept non public trees.\n\t* dwarf2out.c (fortran_common): Accept non public trees.\n\nFrom-SVN: r153685", "tree": {"sha": "b9befde460bd5590ca8a9f5998d9ff8a8ad555b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9befde460bd5590ca8a9f5998d9ff8a8ad555b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/comments", "author": null, "committer": null, "parents": [{"sha": "da18ea94d9c98c5a7d429e3615309fe80f8edbaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da18ea94d9c98c5a7d429e3615309fe80f8edbaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da18ea94d9c98c5a7d429e3615309fe80f8edbaf"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "83efb79fb4d3b667222809aa7ccec36586e24a1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "patch": "@@ -1,3 +1,8 @@\n+2009-10-28  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* dbxout.c (dbxout_common_check): Accept non public trees.\n+\t* dwarf2out.c (fortran_common): Accept non public trees.\n+\n 2009-10-28  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* common.opt (fuse-linker-plugin): New option."}, {"sha": "0bf5e3cec2e02b971e88efdcb77a1d45510d525a", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "patch": "@@ -3189,7 +3189,7 @@ dbxout_common_check (tree decl, int *value)\n   rtx sym_addr;\n   const char *name = NULL;\n   \n-  /* If the decl isn't a VAR_DECL, or if it isn't public or static, or if\n+  /* If the decl isn't a VAR_DECL, or if it isn't static, or if\n      it does not have a value (the offset into the common area), or if it\n      is thread local (as opposed to global) then it isn't common, and shouldn't\n      be handled as such.\n@@ -3198,7 +3198,6 @@ dbxout_common_check (tree decl, int *value)\n      for thread-local symbols.  Can be handled via same mechanism as used\n      in dwarf2out.c.  */\n   if (TREE_CODE (decl) != VAR_DECL\n-      || !TREE_PUBLIC(decl)\n       || !TREE_STATIC(decl)\n       || !DECL_HAS_VALUE_EXPR_P(decl)\n       || DECL_THREAD_LOCAL_P (decl)"}, {"sha": "732b6a6694be48bdb352ffa4dcfa0cfb3f4e5559", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "patch": "@@ -15621,12 +15621,11 @@ fortran_common (tree decl, HOST_WIDE_INT *value)\n   tree offset;\n   int volatilep = 0, unsignedp = 0;\n \n-  /* If the decl isn't a VAR_DECL, or if it isn't public or static, or if\n+  /* If the decl isn't a VAR_DECL, or if it isn't static, or if\n      it does not have a value (the offset into the common area), or if it\n      is thread local (as opposed to global) then it isn't common, and shouldn't\n      be handled as such.  */\n   if (TREE_CODE (decl) != VAR_DECL\n-      || !TREE_PUBLIC (decl)\n       || !TREE_STATIC (decl)\n       || !DECL_HAS_VALUE_EXPR_P (decl)\n       || !is_fortran ())"}, {"sha": "712c5a08cfc84ddc704c78eec7854f0250435499", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "patch": "@@ -1,3 +1,8 @@\n+2009-10-28  Rafael Avila de Espindola  <espindola@google.com>\n+\n+\t* trans-common.c (create_common): Set TREE_PUBLIC to false on\n+\tfake variables.\n+\n 2009-10-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/41714"}, {"sha": "1fb3c40f113aacc55f137241a1bb56754c3a1f7b", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d62b56ae81b7c0b86b35aeef05110bbbe4186cf/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=4d62b56ae81b7c0b86b35aeef05110bbbe4186cf", "patch": "@@ -680,7 +680,6 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n       var_decl = build_decl (s->sym->declared_at.lb->location,\n \t\t\t     VAR_DECL, DECL_NAME (s->field),\n \t\t\t     TREE_TYPE (s->field));\n-      TREE_PUBLIC (var_decl) = TREE_PUBLIC (decl);\n       TREE_STATIC (var_decl) = TREE_STATIC (decl);\n       TREE_USED (var_decl) = TREE_USED (decl);\n       if (s->sym->attr.use_assoc)\n@@ -689,7 +688,9 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n \tTREE_ADDRESSABLE (var_decl) = 1;\n       /* This is a fake variable just for debugging purposes.  */\n       TREE_ASM_WRITTEN (var_decl) = 1;\n-      \n+      /* Fake variables are not visible from other translation units. */\n+      TREE_PUBLIC (var_decl) = 0;\n+\n       /* To preserve identifier names in COMMON, chain to procedure\n          scope unless at top level in a module definition.  */\n       if (com"}]}