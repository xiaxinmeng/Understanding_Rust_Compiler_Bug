{"sha": "7aecd4e895ec5d21a38a875d00b64c14030b830e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FlY2Q0ZTg5NWVjNWQyMWEzOGE4NzVkMDBiNjRjMTQwMzBiODMwZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-27T16:16:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-07-27T16:16:42Z"}, "message": "predicates.md (x86_64_movabs_operand): Reject pic32_bit_operand operands.\n\n\t* config/i386/predicates.md (x86_64_movabs_operand): Reject\n\tpic32_bit_operand operands.\n\t* config/i386/i386.c (ix86_expand_move): Check x86_64_movabs_operand\n\tin DImode.\n\nFrom-SVN: r176833", "tree": {"sha": "9940d58da30a5464e3c947c1e01acd1992ec7455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9940d58da30a5464e3c947c1e01acd1992ec7455"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aecd4e895ec5d21a38a875d00b64c14030b830e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aecd4e895ec5d21a38a875d00b64c14030b830e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aecd4e895ec5d21a38a875d00b64c14030b830e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aecd4e895ec5d21a38a875d00b64c14030b830e/comments", "author": null, "committer": null, "parents": [{"sha": "5019a14eee123f629c24747178e6ab3c22a5dbc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5019a14eee123f629c24747178e6ab3c22a5dbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5019a14eee123f629c24747178e6ab3c22a5dbc9"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "0c1508a613c714f1b477a4bc9df6d68dee990077", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aecd4e895ec5d21a38a875d00b64c14030b830e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aecd4e895ec5d21a38a875d00b64c14030b830e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7aecd4e895ec5d21a38a875d00b64c14030b830e", "patch": "@@ -1,3 +1,10 @@\n+2011-07-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (x86_64_movabs_operand): Reject\n+\tpic32_bit_operand operands.\n+\t* config/i386/i386.c (ix86_expand_move): Check x86_64_movabs_operand\n+\tin DImode.\n+\n 2011-07-27  Kai Tietz  <ktietz@redhat.com>\n \n \t* config/i386/i386.c (ix86_option_override_internal): Allow -mabi\n@@ -26,11 +33,9 @@\n \t(optimize_bitfield_assignment_op): Add argument.\n \tAdd argument to get_best_mode.\n \t(get_bit_range): New.\n-\t(expand_assignment): Calculate maxbits and pass it down\n-\taccordingly.\n+\t(expand_assignment): Calculate maxbits and pass it down accordingly.\n \t(store_field): New argument.\n-\t(expand_expr_real_2): New argument to store_field.\n-\tInclude params.h.\n+\t(expand_expr_real_2): New argument to store_field.  Include params.h.\n \t* expr.h (store_bit_field): New argument.\n \t* stor-layout.c (get_best_mode): Restrict mode expansion by taking\n \tinto account maxbits.\n@@ -47,8 +52,7 @@\n \n 2011-07-27  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* dwarf2out.c (gen_producer_string): Ignore also -fverbose-asm\n-\toption.\n+\t* dwarf2out.c (gen_producer_string): Ignore also -fverbose-asm option.\n \n 2011-07-27  Kai Tietz  <ktietz@redhat.com>\n "}, {"sha": "1728219a2fca6b9785660f42a1a2ac53789b164e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aecd4e895ec5d21a38a875d00b64c14030b830e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aecd4e895ec5d21a38a875d00b64c14030b830e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7aecd4e895ec5d21a38a875d00b64c14030b830e", "patch": "@@ -15075,7 +15075,7 @@ ix86_expand_move (enum machine_mode mode, rtx operands[])\n \t{\n \t  if (MEM_P (op0))\n \t    op1 = force_reg (mode, op1);\n-\t  else if (!TARGET_64BIT || !x86_64_movabs_operand (op1, mode))\n+\t  else if (!(TARGET_64BIT && x86_64_movabs_operand (op1, DImode)))\n \t    {\n \t      rtx reg = can_create_pseudo_p () ? NULL_RTX : op0;\n \t      op1 = legitimize_pic_address (op1, reg);"}, {"sha": "53988c2fb34b2cd6d3cf8f1508b16d97fbc9a145", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aecd4e895ec5d21a38a875d00b64c14030b830e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aecd4e895ec5d21a38a875d00b64c14030b830e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=7aecd4e895ec5d21a38a875d00b64c14030b830e", "patch": "@@ -389,15 +389,10 @@\n   return symbolic_operand (op, mode);\n })\n \n-\n ;; Return true if OP is nonmemory operand acceptable by movabs patterns.\n (define_predicate \"x86_64_movabs_operand\"\n-  (if_then_else (not (and (match_test \"TARGET_64BIT\")\n-\t\t\t  (match_test \"flag_pic\")))\n-    (match_operand 0 \"nonmemory_operand\")\n-    (ior (match_operand 0 \"register_operand\")\n-\t (and (match_operand 0 \"const_double_operand\")\n-\t      (match_test \"GET_MODE_SIZE (mode) <= 8\")))))\n+  (and (match_operand 0 \"nonmemory_operand\")\n+       (not (match_operand 0 \"pic_32bit_operand\"))))\n \n ;; Return true if OP is either a symbol reference or a sum of a symbol\n ;; reference and a constant."}]}