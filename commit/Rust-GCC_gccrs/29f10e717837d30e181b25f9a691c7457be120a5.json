{"sha": "29f10e717837d30e181b25f9a691c7457be120a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmMTBlNzE3ODM3ZDMwZTE4MWIyNWY5YTY5MWM3NDU3YmUxMjBhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-03-16T10:24:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-03-16T10:24:44Z"}, "message": "re PR middle-end/48136 (verify_gimple failed at -O0)\n\n\tPR middle-end/48136\n\t* fold-const.c (fold_binary_loc) <case EQ_EXPR, NE_EXPR>: Make sure\n\targ0/arg1 or their arguments are always fold converted to matching\n\ttypes.\n\n\t* gcc.c-torture/compile/pr48136.c: New test.\n\nFrom-SVN: r171041", "tree": {"sha": "fffb4526abb49579e804643d8ce8741388ff7ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fffb4526abb49579e804643d8ce8741388ff7ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f10e717837d30e181b25f9a691c7457be120a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f10e717837d30e181b25f9a691c7457be120a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f10e717837d30e181b25f9a691c7457be120a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f10e717837d30e181b25f9a691c7457be120a5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e42348b8cdb1eeaaa0f588c1b2551dbe10ff773b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e42348b8cdb1eeaaa0f588c1b2551dbe10ff773b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e42348b8cdb1eeaaa0f588c1b2551dbe10ff773b"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "e5f4c4ed4975e1f9702c1b1603e968bf1874c4df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f10e717837d30e181b25f9a691c7457be120a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f10e717837d30e181b25f9a691c7457be120a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29f10e717837d30e181b25f9a691c7457be120a5", "patch": "@@ -1,5 +1,10 @@\n 2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/48136\n+\t* fold-const.c (fold_binary_loc) <case EQ_EXPR, NE_EXPR>: Make sure\n+\targ0/arg1 or their arguments are always fold converted to matching\n+\ttypes.\n+\n \t* var-tracking.c (prepare_call_arguments): Add ATTRIBUTE_UNUSED\n \tto nargs.\n "}, {"sha": "f8630a2baa3d421ef7f999096c97164bd5082194", "filename": "gcc/fold-const.c", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f10e717837d30e181b25f9a691c7457be120a5/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f10e717837d30e181b25f9a691c7457be120a5/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=29f10e717837d30e181b25f9a691c7457be120a5", "patch": "@@ -12342,7 +12342,8 @@ fold_binary_loc (location_t loc,\n \t\t{\n \t\t  tem = fold_build2_loc (loc, LSHIFT_EXPR, itype, arg01, arg001);\n \t\t  tem = fold_build2_loc (loc, BIT_AND_EXPR, itype, arg000, tem);\n-\t\t  return fold_build2_loc (loc, code, type, tem, arg1);\n+\t\t  return fold_build2_loc (loc, code, type, tem,\n+\t\t\t\t\t  fold_convert_loc (loc, itype, arg1));\n \t\t}\n \t      /* Otherwise, for signed (arithmetic) shifts,\n \t\t ((X >> C1) & C2) != 0 is rewritten as X < 0, and\n@@ -12393,8 +12394,10 @@ fold_binary_loc (location_t loc,\n \t  tree notc = fold_build1_loc (loc, BIT_NOT_EXPR,\n \t\t\t\t   TREE_TYPE (TREE_OPERAND (arg0, 1)),\n \t\t\t\t   TREE_OPERAND (arg0, 1));\n-\t  tree dandnotc = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (arg0),\n-\t\t\t\t       arg1, notc);\n+\t  tree dandnotc\n+\t    = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (arg0),\n+\t\t\t       fold_convert_loc (loc, TREE_TYPE (arg0), arg1),\n+\t\t\t       notc);\n \t  tree rslt = code == EQ_EXPR ? integer_zero_node : integer_one_node;\n \t  if (integer_nonzerop (dandnotc))\n \t    return omit_one_operand_loc (loc, type, rslt, arg0);\n@@ -12407,8 +12410,10 @@ fold_binary_loc (location_t loc,\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t{\n \t  tree notd = fold_build1_loc (loc, BIT_NOT_EXPR, TREE_TYPE (arg1), arg1);\n-\t  tree candnotd = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (arg0),\n-\t\t\t\t       TREE_OPERAND (arg0, 1), notd);\n+\t  tree candnotd\n+\t    = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (arg0),\n+\t\t\t       TREE_OPERAND (arg0, 1),\n+\t\t\t       fold_convert_loc (loc, TREE_TYPE (arg0), notd));\n \t  tree rslt = code == EQ_EXPR ? integer_zero_node : integer_one_node;\n \t  if (integer_nonzerop (candnotd))\n \t    return omit_one_operand_loc (loc, type, rslt, arg0);\n@@ -12483,13 +12488,13 @@ fold_binary_loc (location_t loc,\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 1), arg1, 0))\n \treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 0),\n-\t\t\t    build_int_cst (TREE_TYPE (arg1), 0));\n+\t\t\t\tbuild_int_cst (TREE_TYPE (arg0), 0));\n       /* Likewise (X ^ Y) == X becomes Y == 0.  X has no side-effects.  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0)\n \t  && reorder_operands_p (TREE_OPERAND (arg0, 1), arg1))\n \treturn fold_build2_loc (loc, code, type, TREE_OPERAND (arg0, 1),\n-\t\t\t    build_int_cst (TREE_TYPE (arg1), 0));\n+\t\t\t\tbuild_int_cst (TREE_TYPE (arg0), 0));\n \n       /* (X ^ C1) op C2 can be rewritten as X op (C1 ^ C2).  */\n       if (TREE_CODE (arg0) == BIT_XOR_EXPR\n@@ -12507,10 +12512,12 @@ fold_binary_loc (location_t loc,\n \t  && integer_pow2p (TREE_OPERAND (arg0, 1)))\n \t{\n \t  tem = fold_build2_loc (loc, BIT_AND_EXPR, TREE_TYPE (arg0),\n-\t\t\t     TREE_OPERAND (TREE_OPERAND (arg0, 0), 0),\n-\t\t\t     TREE_OPERAND (arg0, 1));\n+\t\t\t\t TREE_OPERAND (TREE_OPERAND (arg0, 0), 0),\n+\t\t\t\t TREE_OPERAND (arg0, 1));\n \t  return fold_build2_loc (loc, code == EQ_EXPR ? NE_EXPR : EQ_EXPR,\n-\t\t\t      type, tem, arg1);\n+\t\t\t\t  type, tem,\n+\t\t\t\t  fold_convert_loc (loc, TREE_TYPE (arg0),\n+\t\t\t\t\t\t    arg1));\n \t}\n \n       /* Fold ((X & C) ^ C) eq/ne 0 into (X & C) ne/eq 0, when the\n@@ -12554,8 +12561,9 @@ fold_binary_loc (location_t loc,\n       if (TREE_CODE (arg0) == NEGATE_EXPR\n           && TREE_CODE (arg1) == NEGATE_EXPR)\n \treturn fold_build2_loc (loc, code, type,\n-\t\t\t    TREE_OPERAND (arg0, 0),\n-\t\t\t    TREE_OPERAND (arg1, 0));\n+\t\t\t\tTREE_OPERAND (arg0, 0),\n+\t\t\t\tfold_convert_loc (loc, TREE_TYPE (arg0),\n+\t\t\t\t\t\t  TREE_OPERAND (arg1, 0)));\n \n       /* Fold (X & C) op (Y & C) as (X ^ Y) & C op 0\", and symmetries.  */\n       if (TREE_CODE (arg0) == BIT_AND_EXPR\n@@ -12628,12 +12636,13 @@ fold_binary_loc (location_t loc,\n \t  /* Optimize (X ^ C1) op (Y ^ C2) as (X ^ (C1 ^ C2)) op Y.  */\n \t  if (TREE_CODE (arg01) == INTEGER_CST\n \t      && TREE_CODE (arg11) == INTEGER_CST)\n-\t    return fold_build2_loc (loc, code, type,\n-\t\t\t\tfold_build2_loc (loc, BIT_XOR_EXPR, itype, arg00,\n-\t\t\t\t\t     fold_build2_loc (loc,\n-\t\t\t\t\t\t\t  BIT_XOR_EXPR, itype,\n-\t\t\t\t\t\t\t  arg01, arg11)),\n-\t\t\t\targ10);\n+\t    {\n+\t      tem = fold_build2_loc (loc, BIT_XOR_EXPR, itype, arg01,\n+\t\t\t\t     fold_convert_loc (loc, itype, arg11));\n+\t      tem = fold_build2_loc (loc, BIT_XOR_EXPR, itype, arg00, tem);\n+\t      return fold_build2_loc (loc, code, type, tem,\n+\t\t\t\t      fold_convert_loc (loc, itype, arg10));\n+\t    }\n \t}\n \n       /* Attempt to simplify equality/inequality comparisons of complex"}, {"sha": "7e952dca4e53f1d0c5ad969be580588cc5c0c7b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f10e717837d30e181b25f9a691c7457be120a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f10e717837d30e181b25f9a691c7457be120a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29f10e717837d30e181b25f9a691c7457be120a5", "patch": "@@ -1,5 +1,8 @@\n 2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/48136\n+\t* gcc.c-torture/compile/pr48136.c: New test.\n+\n \t* g++.dg/debug/dwarf2/icf.C: Adjust for -fenable-icf-debug removal.\n \n \tPR debug/45882"}, {"sha": "77581ac7285462ba59ed4ef5392c8ecbde8fcb79", "filename": "gcc/testsuite/gcc.c-torture/compile/pr48136.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f10e717837d30e181b25f9a691c7457be120a5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48136.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f10e717837d30e181b25f9a691c7457be120a5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48136.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr48136.c?ref=29f10e717837d30e181b25f9a691c7457be120a5", "patch": "@@ -0,0 +1,7 @@\n+/* PR middle-end/48136 */\n+\n+int\n+foo (int x, int y)\n+{\n+  return (x ^ 5U) == (y ^ 1);\n+}"}]}