{"sha": "036aa59282d3084076e78216c6ba8e5291dc29f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM2YWE1OTI4MmQzMDg0MDc2ZTc4MjE2YzZiYThlNTI5MWRjMjlmNw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-09-28T16:26:43Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2019-09-28T16:26:43Z"}, "message": "re PR fortran/91864 (ICE in gfc_check_do_variable, at fortran/parse.c:4405)\n\n2019-09-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91864\n\t* gcc/fortran/io.c (match_io_element): An inquiry parameter cannot be\n\tread into.\n\t* gcc/fortran/match.c (gfc_match_allocate): An inquiry parameter \n\tcan be neither an allocate-object nor stat variable.\n\t(gfc_match_deallocate): An inquiry parameter cannot be deallocated.\n\n2019-09-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/91864\n\t* gcc/testsuite/gfortran.dg/pr91864.f90\n\nFrom-SVN: r276253", "tree": {"sha": "d0fa59374b514aa7638d05dd4f5dbb30cde863fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0fa59374b514aa7638d05dd4f5dbb30cde863fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/036aa59282d3084076e78216c6ba8e5291dc29f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036aa59282d3084076e78216c6ba8e5291dc29f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036aa59282d3084076e78216c6ba8e5291dc29f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036aa59282d3084076e78216c6ba8e5291dc29f7/comments", "author": null, "committer": null, "parents": [{"sha": "406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406c9a1173f79dc0fb3231edb51690c1dd73f6a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406c9a1173f79dc0fb3231edb51690c1dd73f6a0"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "d5a17dadf474265f0d8008761ac1b550367ac88d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=036aa59282d3084076e78216c6ba8e5291dc29f7", "patch": "@@ -1,3 +1,12 @@\n+2019-09-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91864\n+\t* gcc/fortran/io.c (match_io_element): An inquiry parameter cannot be\n+\tread into.\n+\t* gcc/fortran/match.c (gfc_match_allocate): An inquiry parameter \n+\tcan be neither an allocate-object nor stat variable.\n+\t(gfc_match_deallocate): An inquiry parameter cannot be deallocated.\n+\n 2019-09-26  Alessandro Fanfarillo  <afanfa@gcc.gnu.org>\n \n \t* trans-array.c (structure_alloc_comps):"}, {"sha": "9ae06b1f5c424d8e0f90b3e1895175795d385f51", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=036aa59282d3084076e78216c6ba8e5291dc29f7", "patch": "@@ -3657,7 +3657,17 @@ match_io_element (io_kind k, gfc_code **cpp)\n     {\n       m = gfc_match_variable (&expr, 0);\n       if (m == MATCH_NO)\n-\tgfc_error (\"Expected variable in READ statement at %C\");\n+\t{\n+\t  gfc_error (\"Expecting variable in READ statement at %C\");\n+\t  m = MATCH_ERROR;\n+\t}\n+\n+      if (m == MATCH_YES && expr->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  gfc_error (\"Expecting variable or io-implied-do in READ statement \"\n+\t\t   \"at %L\", &expr->where);\n+\t  m = MATCH_ERROR;\n+\t}\n \n       if (m == MATCH_YES\n \t  && expr->expr_type == EXPR_VARIABLE\n@@ -3667,7 +3677,6 @@ match_io_element (io_kind k, gfc_code **cpp)\n \t\t     &expr->where);\n \t  m = MATCH_ERROR;\n \t}\n-\n     }\n   else\n     {"}, {"sha": "83b1189124179aa1d96ae278f784a6dcb29c3043", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=036aa59282d3084076e78216c6ba8e5291dc29f7", "patch": "@@ -4242,6 +4242,12 @@ gfc_match_allocate (void)\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n \n+      if (tail->expr->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  gfc_error (\"Unexpected constant at %C\");\n+\t  goto cleanup;\n+\t}\n+\n       if (gfc_check_do_variable (tail->expr->symtree))\n \tgoto cleanup;\n \n@@ -4374,6 +4380,12 @@ gfc_match_allocate (void)\n \t  tmp = NULL;\n \t  saw_stat = true;\n \n+\t  if (stat->expr_type == EXPR_CONSTANT)\n+\t    {\n+\t      gfc_error (\"STAT tag at %L cannot be a constant\", &stat->where);\n+\t      goto cleanup;\n+\t    }\n+\n \t  if (gfc_check_do_variable (stat->symtree))\n \t    goto cleanup;\n \n@@ -4650,6 +4662,12 @@ gfc_match_deallocate (void)\n       if (m == MATCH_NO)\n \tgoto syntax;\n \n+      if (tail->expr->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  gfc_error (\"Unexpected constant at %C\");\n+\t  goto cleanup;\n+\t}\n+\n       if (gfc_check_do_variable (tail->expr->symtree))\n \tgoto cleanup;\n "}, {"sha": "8d8ba5d4d05de640251714685bb728fc1d0b6376", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=036aa59282d3084076e78216c6ba8e5291dc29f7", "patch": "@@ -1,3 +1,8 @@\n+2019-09-28  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/91864\n+\t* gcc/testsuite/gfortran.dg/pr91864.f90\n+\n 2019-09-28  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91889 - follow-up fix for DR 2352."}, {"sha": "a17187dcdc0f6c4c23a3d919612539efec1be12c", "filename": "gcc/testsuite/gfortran.dg/pr91864.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91864.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/036aa59282d3084076e78216c6ba8e5291dc29f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91864.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91864.f90?ref=036aa59282d3084076e78216c6ba8e5291dc29f7", "patch": "@@ -0,0 +1,22 @@\n+program p\n+   integer :: i\n+   read (*,*) i%kind   ! { dg-error \"Expecting variable or io-implied-do\" }\n+end\n+\n+subroutine t\n+   integer, allocatable :: x(:)\n+   integer :: stat\n+   allocate (x(3), stat=stat%kind)   ! { dg-error \"cannot be a constant\" }\n+end\n+\n+subroutine u\n+   integer, allocatable :: x(:)\n+   integer :: stat\n+   allocate (x(3), stat%kind=stat)   ! { dg-error \"Unexpected constant\" }\n+end\n+\n+subroutine v\n+   integer, allocatable :: x(:)\n+   integer :: stat\n+   deallocate (x, stat%kind=stat)   ! { dg-error \"Unexpected constant\" }\n+end"}]}