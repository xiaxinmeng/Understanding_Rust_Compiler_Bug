{"sha": "1f33554abb31ee66b0b61be508d91d1cafdc4b0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzMzU1NGFiYjMxZWU2NmIwYjYxYmU1MDhkOTFkMWNhZmRjNGIwYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-11-19T11:38:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-11-19T11:38:40Z"}, "message": "codecvt_members.cc (do_out): If we can upper bound the total number of external chars to something smaller...\n\n2003-11-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/locale/gnu/codecvt_members.cc (do_out): If\n\twe can upper bound the total number of external chars\n\tto something smaller than __to_end - __to, avoid the\n\ttemporary buffer, the memcopy and simplify the loop.\n\t* config/locale/generic/codecvt_members.cc (do_out):\n\tLikewise.\n\nFrom-SVN: r73733", "tree": {"sha": "48b77e87f53dc351f35e235fae841c52872e9b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b77e87f53dc351f35e235fae841c52872e9b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f33554abb31ee66b0b61be508d91d1cafdc4b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f33554abb31ee66b0b61be508d91d1cafdc4b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f33554abb31ee66b0b61be508d91d1cafdc4b0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f33554abb31ee66b0b61be508d91d1cafdc4b0b/comments", "author": null, "committer": null, "parents": [{"sha": "edfe1ac771642d4061ee0767271f4a89861e7b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfe1ac771642d4061ee0767271f4a89861e7b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfe1ac771642d4061ee0767271f4a89861e7b92"}], "stats": {"total": 125, "additions": 86, "deletions": 39}, "files": [{"sha": "330c0c49341afe88d71681d85177c439d2f92814", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33554abb31ee66b0b61be508d91d1cafdc4b0b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33554abb31ee66b0b61be508d91d1cafdc4b0b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f33554abb31ee66b0b61be508d91d1cafdc4b0b", "patch": "@@ -1,3 +1,12 @@\n+2003-11-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/locale/gnu/codecvt_members.cc (do_out): If\n+\twe can upper bound the total number of external chars\n+\tto something smaller than __to_end - __to, avoid the\n+\ttemporary buffer, the memcopy and simplify the loop.\n+\t* config/locale/generic/codecvt_members.cc (do_out):\n+\tLikewise.\n+\n 2003-11-19  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/lib/libstdc++.exp: Add DYLD_LIBRARY_PATH for darwin."}, {"sha": "8bdc22779ad7785ec25364fd5f0a63b23349a8c0", "filename": "libstdc++-v3/config/locale/generic/codecvt_members.cc", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33554abb31ee66b0b61be508d91d1cafdc4b0b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33554abb31ee66b0b61be508d91d1cafdc4b0b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fcodecvt_members.cc?ref=1f33554abb31ee66b0b61be508d91d1cafdc4b0b", "patch": "@@ -49,32 +49,51 @@ namespace std\n     result __ret = ok;\n     // The conversion must be done using a temporary destination buffer\n     // since it is not possible to pass the size of the buffer to wcrtomb\n-    extern_type __buf[MB_LEN_MAX];\n-    // A temporary state must be used since the result of the last\n-    // conversion may be thrown away.\n     state_type __tmp_state(__state);\n-    \n+\n     // The conversion must be done by calling wcrtomb in a loop rather\n     // than using wcsrtombs because wcsrtombs assumes that the input is\n     // zero-terminated.\n-    while (__from < __from_end && __to < __to_end)\n+\n+    // Either we can upper bound the total number of external characters to\n+    // something smaller than __to_end - __to or the conversion must be done\n+    // using a temporary destination buffer since it is not possible to\n+    // pass the size of the buffer to wcrtomb\n+    if (MB_CUR_MAX * (__from_end - __from) - (__to_end - __to) <= 0)\n+      while (__from < __from_end)\n+\t{\n+\t  const size_t __conv = wcrtomb(__to, *__from, &__tmp_state);\n+\t  if (__conv == static_cast<size_t>(-1))\n+\t    {\n+\t      __ret = error;\n+\t      break;\n+\t    }\n+\t  __state = __tmp_state;\n+\t  __to += __conv;\n+\t  __from++;\n+\t}\n+    else\n       {\n-\tsize_t __conv = wcrtomb(__buf, *__from, &__tmp_state);\n-\tif (__conv == static_cast<size_t>(-1))\n-\t  {\n-\t    __ret = error;\n-\t    break;\n-\t  }\n-\telse if (__conv > static_cast<size_t>(__to_end - __to))\n+\textern_type __buf[MB_LEN_MAX];\n+\twhile (__from < __from_end && __to < __to_end)\n \t  {\n-\t    __ret = partial;\n-\t    break;\n+\t    const size_t __conv = wcrtomb(__buf, *__from, &__tmp_state);\n+\t    if (__conv == static_cast<size_t>(-1))\n+\t      {\n+\t\t__ret = error;\n+\t\tbreak;\n+\t      }\n+\t    else if (__conv > static_cast<size_t>(__to_end - __to))\n+\t      {\n+\t\t__ret = partial;\n+\t\tbreak;\n+\t      }\n+\t    \n+\t    memcpy(__to, __buf, __conv);\n+\t    __state = __tmp_state;\n+\t    __to += __conv;\n+\t    __from++;\n \t  }\n-\n-\tmemcpy(__to, __buf, __conv);\n-\t__state = __tmp_state;\n-\t__to += __conv;\n-\t__from++;\n       }\n \n     if (__ret == ok && __from < __from_end)"}, {"sha": "54930fc0c4a14e0753d940bb71b88ca28dce5af0", "filename": "libstdc++-v3/config/locale/gnu/codecvt_members.cc", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f33554abb31ee66b0b61be508d91d1cafdc4b0b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f33554abb31ee66b0b61be508d91d1cafdc4b0b/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fcodecvt_members.cc?ref=1f33554abb31ee66b0b61be508d91d1cafdc4b0b", "patch": "@@ -48,38 +48,57 @@ namespace std\n \t extern_type*& __to_next) const\n   {\n     result __ret = ok;\n-    // The conversion must be done using a temporary destination buffer\n-    // since it is not possible to pass the size of the buffer to wcrtomb\n-    extern_type __buf[MB_LEN_MAX];\n     // A temporary state must be used since the result of the last\n     // conversion may be thrown away.\n-    state_type __tmp_state(__state);\n-    \n+    state_type __tmp_state(__state);   \n+\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __c_locale __old = __uselocale(_M_c_locale_codecvt);\n #endif\n \n     // The conversion must be done by calling wcrtomb in a loop rather\n     // than using wcsrtombs because wcsrtombs assumes that the input is\n     // zero-terminated.\n-    while (__from < __from_end && __to < __to_end)\n+\n+    // Either we can upper bound the total number of external characters to\n+    // something smaller than __to_end - __to or the conversion must be done\n+    // using a temporary destination buffer since it is not possible to\n+    // pass the size of the buffer to wcrtomb\n+    if (MB_CUR_MAX * (__from_end - __from) - (__to_end - __to) <= 0)\n+      while (__from < __from_end)\n+\t{\n+\t  const size_t __conv = wcrtomb(__to, *__from, &__tmp_state);\n+\t  if (__conv == static_cast<size_t>(-1))\n+\t    {\n+\t      __ret = error;\n+\t      break;\n+\t    }\n+\t  __state = __tmp_state;\n+\t  __to += __conv;\n+\t  __from++;\n+\t}\n+    else\n       {\n-\tsize_t __conv = wcrtomb(__buf, *__from, &__tmp_state);\n-\tif (__conv == static_cast<size_t>(-1))\n+\textern_type __buf[MB_LEN_MAX];\n+\twhile (__from < __from_end && __to < __to_end)\n \t  {\n-\t    __ret = error;\n-\t    break;\n+\t    const size_t __conv = wcrtomb(__buf, *__from, &__tmp_state);\n+\t    if (__conv == static_cast<size_t>(-1))\n+\t      {\n+\t\t__ret = error;\n+\t\tbreak;\n+\t      }\n+\t    else if (__conv > static_cast<size_t>(__to_end - __to))\n+\t      {\n+\t\t__ret = partial;\n+\t\tbreak;\n+\t      }\n+\t    \n+\t    memcpy(__to, __buf, __conv);\n+\t    __state = __tmp_state;\n+\t    __to += __conv;\n+\t    __from++;\n \t  }\n-\telse if (__conv > static_cast<size_t>(__to_end - __to))\n-\t  {\n-\t    __ret = partial;\n-\t    break;\n-\t  }\n-\n-\tmemcpy(__to, __buf, __conv);\n-\t__state = __tmp_state;\n-\t__to += __conv;\n-\t__from++;\n       }\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)"}]}