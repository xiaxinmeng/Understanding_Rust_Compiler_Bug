{"sha": "5859a68d5f48605bda91d259c189d9d263f5589a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1OWE2OGQ1ZjQ4NjA1YmRhOTFkMjU5YzE4OWQ5ZDI2M2Y1NTg5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-05-22T22:00:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-05-22T22:00:14Z"}, "message": "gimplify.c (gimplify_cond_expr): Don't check TREE_ADDRESSABLE.\n\n\t* gimplify.c (gimplify_cond_expr): Don't check TREE_ADDRESSABLE.\n\nThe front end shouldn't produce a GENERIC COND_EXPR of TREE_ADDRESSABLE\ntype.\n\nFrom-SVN: r271524", "tree": {"sha": "6a6716120006af5889a74f91fdc826d4d32f3632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a6716120006af5889a74f91fdc826d4d32f3632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5859a68d5f48605bda91d259c189d9d263f5589a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5859a68d5f48605bda91d259c189d9d263f5589a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5859a68d5f48605bda91d259c189d9d263f5589a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5859a68d5f48605bda91d259c189d9d263f5589a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c652ff83124334837dc16626f9e1040e4fe41fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c652ff83124334837dc16626f9e1040e4fe41fc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c652ff83124334837dc16626f9e1040e4fe41fc9"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "dee55155ca5cd774a9d7de9792a32b17a855ace0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5859a68d5f48605bda91d259c189d9d263f5589a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5859a68d5f48605bda91d259c189d9d263f5589a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5859a68d5f48605bda91d259c189d9d263f5589a", "patch": "@@ -1,3 +1,7 @@\n+2019-05-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* gimplify.c (gimplify_cond_expr): Don't check TREE_ADDRESSABLE.\n+\n 2019-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/88483"}, {"sha": "6905165ad330302f051de192c99975222d8549ad", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5859a68d5f48605bda91d259c189d9d263f5589a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5859a68d5f48605bda91d259c189d9d263f5589a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5859a68d5f48605bda91d259c189d9d263f5589a", "patch": "@@ -3990,10 +3990,12 @@ gimplify_cond_expr (tree *expr_p, gimple_seq *pre_p, fallback_t fallback)\n       tree result;\n \n       /* If either an rvalue is ok or we do not require an lvalue, create the\n-\t temporary.  But we cannot do that if the type is addressable.  */\n+\t temporary.  We cannot do that if the type is addressable, but\n+\t that should have been avoided before we got here.  */\n       if (((fallback & fb_rvalue) || !(fallback & fb_lvalue))\n-\t  && !TREE_ADDRESSABLE (type))\n+\t  && (flag_checking || !TREE_ADDRESSABLE (type)))\n \t{\n+\t  gcc_assert (!TREE_ADDRESSABLE (type));\n \t  if (gimplify_ctxp->allow_rhs_cond_expr\n \t      /* If either branch has side effects or could trap, it can't be\n \t\t evaluated unconditionally.  */"}]}