{"sha": "92902b1bafff14a118ef08dc323dfdc12b2a63ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5MDJiMWJhZmZmMTRhMTE4ZWYwOGRjMzIzZGZkYzEyYjJhNjNhZQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-09-30T16:51:00Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-09-30T16:51:00Z"}, "message": "add @optional/@required to prto lists\n\n\nadd @optional/@required to prto lists\ngcc:\n\n\t* c-parser.c (c_parser_objc_methodprotolist): Amend preceding comment,\n\tparse @optional/@required and set the flags as appropriate.\n\ngcc/c-family:\n\n      * c-common.c: Add two new entries for @optional\n       and @required keywords.\n\n\tmerge from FSF 'apple/trunk' branch.\n\t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n\n       Radar 4386773\n       * c-common.h (RID_AT_OPTIONAL, RID_AT_REQUIRED): Two new\n       objective-c keywords.\n       (objc_set_method_opt): New declaration.\n       * stub-objc.c (objc_set_method_opt): New stub.\n\ngcc/cp:\n\n\tmerge from FSF 'apple/trunk' branch.\n\t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n\n\tRadar 4386773\n\t* cp/parser.c (cp_parser_objc_interstitial_code): For\n       @optional/@required set the optional/required flag.\n\ngcc/objc:\n\n\tmerge from FSF 'apple/trunk' branch.\n\t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n\n       Radar 4386773\n       * objc/objc-act.c (objc_set_method_opt): New function.\n       (objc_start_protocol, objc_finish_interface): Reset\n       objc_method_optional_flag flag.\n       (objc_add_method_declaration): Pass on the new\n       flag to objc_add_method.\n       (objc_add_method): Add optional methods to new chain in\n       the protocol class.\n       * objc/objc-act.h (CLASS_OPTIONAL_CLS_METHODS,\n       CLASS_OPTIONAL_NST_METHODS): New macros accessing a protocol\n       class's optional method chains.\n\ntestsuite:\n\n\tmerge from FSF 'apple/trunk' branch.\n\t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n\n       Radar 4386773\n       * objc.dg/enhanced-proto-1.m: New.\n       * objc.dg/enhanced-proto-2.m: New.\n       * obj-c++.dg/enhanced-proto-1.mm: New\n       * obj-c++.dg/enhanced-proto-2.mm: New.\n\nFrom-SVN: r164754", "tree": {"sha": "42ebcaff8a7ee59b29d662bbc60c7b6727371ef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ebcaff8a7ee59b29d662bbc60c7b6727371ef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92902b1bafff14a118ef08dc323dfdc12b2a63ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92902b1bafff14a118ef08dc323dfdc12b2a63ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92902b1bafff14a118ef08dc323dfdc12b2a63ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92902b1bafff14a118ef08dc323dfdc12b2a63ae/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eeccfa3ff890e75c4db2375262c2484de62f475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eeccfa3ff890e75c4db2375262c2484de62f475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eeccfa3ff890e75c4db2375262c2484de62f475"}], "stats": {"total": 235, "additions": 226, "deletions": 9}, "files": [{"sha": "caa3d906349aa112417a57724489ccefb05e4daa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -1,3 +1,8 @@\n+2010-09-30  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* c-parser.c (c_parser_objc_methodprotolist): Amend preceding comment,\n+\tparse @optional/@required and set the flags as appropriate.\n+\n 2010-09-30  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/iq2000/t-iq2000 (TARGET_LIBGCC2_CFLAGS): Delete."}, {"sha": "94b71c98eb6158dfda1ad910ccf9dc54640a1bef", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -1,3 +1,17 @@\n+2010-09-30  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* c-common.c: Add two new entries for @optional\n+\tand @required keywords.\n+\n+\tmerge from FSF 'apple/trunk' branch.\n+\t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4386773\n+\t* c-common.h (RID_AT_OPTIONAL, RID_AT_REQUIRED): Two new\n+\tobjective-c keywords.\n+\t(objc_set_method_opt): New declaration.\n+\t* stub-objc.c (objc_set_method_opt): New stub.\n+\t\n 2010-09-30  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (handle_optimize_attribute): Pass &global_options to"}, {"sha": "ddac821e8c564714a2e6b6c712de94d7ab8bf362", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -541,6 +541,8 @@ const struct c_common_resword c_common_reswords[] =\n   { \"selector\",\t\tRID_AT_SELECTOR,\tD_OBJC },\n   { \"finally\",\t\tRID_AT_FINALLY,\t\tD_OBJC },\n   { \"synchronized\",\tRID_AT_SYNCHRONIZED,\tD_OBJC },\n+  { \"optional\",\t\tRID_AT_OPTIONAL,\tD_OBJC },\n+  { \"required\",\t\tRID_AT_REQUIRED,\tD_OBJC },\n   /* These are recognized only in protocol-qualifier context\n      (see above) */\n   { \"bycopy\",\t\tRID_BYCOPY,\t\tD_OBJC },"}, {"sha": "08ef3b750faf39c48bf8232dca234e4554a383f4", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -142,7 +142,8 @@ enum rid\n   RID_AT_PRIVATE,  RID_AT_PROTECTED, RID_AT_PUBLIC,\n   RID_AT_PROTOCOL, RID_AT_SELECTOR,\n   RID_AT_THROW,\t   RID_AT_TRY,       RID_AT_CATCH,\n-  RID_AT_FINALLY,  RID_AT_SYNCHRONIZED,\n+  RID_AT_FINALLY,  RID_AT_SYNCHRONIZED, \n+  RID_AT_OPTIONAL, RID_AT_REQUIRED,\n   RID_AT_INTERFACE,\n   RID_AT_IMPLEMENTATION,\n \n@@ -1007,6 +1008,7 @@ extern tree objc_build_synchronized (location_t, tree, tree);\n extern int objc_static_init_needed_p (void);\n extern tree objc_generate_static_init_call (tree);\n extern tree objc_generate_write_barrier (tree, enum tree_code, tree);\n+extern void objc_set_method_opt (bool);\n \n /* The following are provided by the C and C++ front-ends, and called by\n    ObjC/ObjC++.  */"}, {"sha": "3f88874619074925fe8486ec65ff970179fe88cd", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -126,6 +126,11 @@ objc_start_protocol (tree ARG_UNUSED (proto),\n {\n }\n \n+void \n+objc_set_method_opt (bool ARG_UNUSED (optional))\n+{\n+}\n+\n void\n objc_start_class_interface (tree ARG_UNUSED (name),\n \t\t\t    tree ARG_UNUSED (super),"}, {"sha": "dc5ea8d52ec9d076b150a8550672ddf3afa6b7a7", "filename": "gcc/c-parser.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -6743,6 +6743,8 @@ c_parser_objc_method_definition (c_parser *parser)\n      objc-methodprotolist objc-methodproto\n      objc-methodprotolist declaration\n      objc-methodprotolist ;\n+     @optional\n+     @required\n \n    The declaration is a data definition, which may be missing\n    declaration specifiers under the same rules and diagnostics as\n@@ -6775,7 +6777,18 @@ c_parser_objc_methodprotolist (c_parser *parser)\n \tdefault:\n \t  if (c_parser_next_token_is_keyword (parser, RID_AT_END))\n \t    return;\n-\t  c_parser_declaration_or_fndef (parser, false, false, true,\n+\t  else if (c_parser_next_token_is_keyword (parser, RID_AT_OPTIONAL))\n+\t    {\n+\t      objc_set_method_opt (true);\n+\t      c_parser_consume_token (parser);\n+\t    }\n+\t  else if (c_parser_next_token_is_keyword (parser, RID_AT_REQUIRED))\n+\t    {\n+\t      objc_set_method_opt (false);\n+\t      c_parser_consume_token (parser);\n+\t    }\n+\t  else\n+\t    c_parser_declaration_or_fndef (parser, false, false, true,\n \t\t\t\t\t false, true);\n \t  break;\n \t}"}, {"sha": "8c201d743ed05715213eb6448bff44bc2500cba8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -1,3 +1,12 @@\n+2010-09-30  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tmerge from FSF 'apple/trunk' branch.\n+\t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4386773\n+\t* cp/parser.c (cp_parser_objc_interstitial_code): For\n+\t@optional/@required set the optional/required flag.\n+\t\n 2010-09-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* parser.c (cp_lexer_get_preprocessor_token): Tidied up comments"}, {"sha": "82026b16d4762c113e85add9a4ce8b4c2fbafff5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -21597,6 +21597,17 @@ cp_parser_objc_interstitial_code (cp_parser* parser)\n   /* Allow stray semicolons.  */\n   else if (token->type == CPP_SEMICOLON)\n     cp_lexer_consume_token (parser->lexer);\n+  /* Mark methods as optional or required, when building protocols.  */\n+  else if (token->keyword == RID_AT_OPTIONAL)\n+    {\n+      cp_lexer_consume_token (parser->lexer);\n+      objc_set_method_opt (true);\n+    }\n+  else if (token->keyword == RID_AT_REQUIRED)\n+    {\n+      cp_lexer_consume_token (parser->lexer);\n+      objc_set_method_opt (false);\n+    }\n   /* Finally, try to parse a block-declaration, or a function-definition.  */\n   else\n     cp_parser_block_declaration (parser, /*statement_p=*/false);"}, {"sha": "2f1982cf12d3074d02ab180212ee5279ebe8dba9", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -1,3 +1,20 @@\n+2010-09-30  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tmerge from FSF 'apple/trunk' branch.\n+\t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n+\n+       Radar 4386773\n+       * objc/objc-act.c (objc_set_method_opt): New function.\n+       (objc_start_protocol, objc_finish_interface): Reset\n+       objc_method_optional_flag flag.\n+       (objc_add_method_declaration): Pass on the new\n+       flag to objc_add_method.\n+       (objc_add_method): Add optional methods to new chain in\n+       the protocol class.\n+       * objc/objc-act.h (CLASS_OPTIONAL_CLS_METHODS,\n+       CLASS_OPTIONAL_NST_METHODS): New macros accessing a protocol\n+       class's optional method chains.\n+\t\n 2010-09-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tMerge from 'apple/trunk' branch on FSF servers."}, {"sha": "dffdb71b65cfeb573ccc29343c5a795b29cc1815", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -146,7 +146,7 @@ static void objc_start_function (tree, tree, tree, struct c_arg_info *);\n #endif\n static tree start_protocol (enum tree_code, tree, tree);\n static tree build_method_decl (enum tree_code, tree, tree, tree, bool);\n-static tree objc_add_method (tree, tree, int);\n+static tree objc_add_method (tree, tree, int, bool);\n static tree add_instance_variable (tree, int, tree);\n static tree build_ivar_reference (tree);\n static tree is_ivar (tree, tree);\n@@ -352,6 +352,10 @@ int objc_public_flag;\n /* Use to generate method labels.  */\n static int method_slot = 0;\n \n+/* Flag to say whether methods in a protocol are optional or\n+   required.  */\n+static bool objc_method_optional_flag = false;\n+\n static int objc_collecting_ivars = 0;\n \n #define BUFSIZE\t\t1024\n@@ -687,6 +691,7 @@ objc_start_protocol (tree name, tree protos, tree attributes)\n \t\t\" of the compiler, (ignored)\");\n   objc_interface_context\n     = start_protocol (PROTOCOL_INTERFACE_TYPE, name, protos);\n+  objc_method_optional_flag = false;\n }\n \n void\n@@ -701,6 +706,7 @@ objc_finish_interface (void)\n {\n   finish_class (objc_interface_context);\n   objc_interface_context = NULL_TREE;\n+  objc_method_optional_flag = false;\n }\n \n void\n@@ -752,6 +758,18 @@ objc_set_visibility (int visibility)\n   objc_public_flag = visibility;\n }\n \n+void\n+objc_set_method_opt (bool optional)\n+{\n+  objc_method_optional_flag = optional;\n+  if (!objc_interface_context \n+      || TREE_CODE (objc_interface_context) != PROTOCOL_INTERFACE_TYPE)\n+    {\n+      error (\"@optional/@required is allowed in @protocol context only.\");\n+      objc_method_optional_flag = false;\n+    }\n+}\n+\n void\n objc_set_method_type (enum tree_code type)\n {\n@@ -787,7 +805,8 @@ objc_add_method_declaration (tree decl, tree attributes)\n \n   objc_add_method (objc_interface_context,\n \t\t   decl,\n-\t\t   objc_inherit_code == CLASS_METHOD_DECL);\n+\t\t   objc_inherit_code == CLASS_METHOD_DECL,\n+\t\t   objc_method_optional_flag);\n }\n \n /* Return 'true' if the method definition could be started, and\n@@ -816,7 +835,8 @@ objc_start_method_definition (tree decl, tree attributes)\n \n   objc_add_method (objc_implementation_context,\n \t\t   decl,\n-\t\t   objc_inherit_code == CLASS_METHOD_DECL);\n+\t\t   objc_inherit_code == CLASS_METHOD_DECL, \n+\t\t   /* is optional */ false);\n   start_method_def (decl);\n   return true;\n }\n@@ -7073,11 +7093,32 @@ add_method_to_hash_list (hash *hash_list, tree method)\n }\n \n static tree\n-objc_add_method (tree klass, tree method, int is_class)\n+objc_add_method (tree klass, tree method, int is_class, bool is_optional)\n {\n   tree mth;\n \n-  if (!(mth = lookup_method (is_class\n+  /* @optional methods are added to protocol's OPTIONAL list */\n+  if (is_optional)\n+    {\n+      gcc_assert (TREE_CODE (klass) == PROTOCOL_INTERFACE_TYPE);\n+      if (!(mth = lookup_method (is_class\n+\t\t\t\t? PROTOCOL_OPTIONAL_CLS_METHODS (klass)\n+\t\t\t\t: PROTOCOL_OPTIONAL_NST_METHODS (klass), \n+\t\t\t\t\t\t\t\tmethod)))\n+\t{\n+\t  if (is_class)\n+\t    {\n+\t      TREE_CHAIN (method) = PROTOCOL_OPTIONAL_CLS_METHODS (klass);\n+\t      PROTOCOL_OPTIONAL_CLS_METHODS (klass) = method;\n+\t    }\n+\t  else\n+\t    {\n+\t      TREE_CHAIN (method) = PROTOCOL_OPTIONAL_NST_METHODS (klass);\n+\t      PROTOCOL_OPTIONAL_NST_METHODS (klass) = method;\n+\t    }\n+\t}\n+    }\n+  else if (!(mth = lookup_method (is_class\n \t\t\t     ? CLASS_CLS_METHODS (klass)\n \t\t\t     : CLASS_NST_METHODS (klass), method)))\n     {\n@@ -9064,7 +9105,8 @@ really_start_method (tree method,\n \n \t  if (interface)\n \t    objc_add_method (interface, copy_node (method),\n-\t\t\t     TREE_CODE (method) == CLASS_METHOD_DECL);\n+\t\t\t     TREE_CODE (method) == CLASS_METHOD_DECL, \n+\t\t\t     /* is_optional= */ false);\n \t}\n     }\n }"}, {"sha": "61312e950948e1c58daf79c72e25464a54c83d27", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -38,7 +38,7 @@ tree objc_eh_personality (void);\n /* Objective-C structures */\n \n #define CLASS_LANG_SLOT_ELTS\t\t5\n-#define PROTOCOL_LANG_SLOT_ELTS\t\t2\n+#define PROTOCOL_LANG_SLOT_ELTS\t\t4\n #define OBJC_INFO_SLOT_ELTS\t\t2\n \n /* KEYWORD_DECL */\n@@ -71,6 +71,8 @@ tree objc_eh_personality (void);\n #define PROTOCOL_CLS_METHODS(CLASS) ((CLASS)->type.maxval)\n #define PROTOCOL_FORWARD_DECL(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 1)\n #define PROTOCOL_DEFINED(CLASS) TREE_USED (CLASS)\n+#define PROTOCOL_OPTIONAL_CLS_METHODS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 2)\n+#define PROTOCOL_OPTIONAL_NST_METHODS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 3)\n \n /* ObjC-specific information pertaining to RECORD_TYPEs are stored in\n    the LANG_SPECIFIC structures, which may itself need allocating first.  */"}, {"sha": "7afca7ef52f0116191801545ff02c09ae0b49078", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -1,3 +1,14 @@\n+2010-09-30  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tmerge from FSF 'apple/trunk' branch.\n+\t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 4386773\n+\t* objc.dg/enhanced-proto-1.m: New.\n+\t* objc.dg/enhanced-proto-2.m: New.\n+\t* obj-c++.dg/enhanced-proto-1.mm: New\n+\t* obj-c++.dg/enhanced-proto-2.mm: New.\n+\n 2010-09-30  Richard Guenther  <rguenther@suse.de>\n \n \tPR testsuite/45702"}, {"sha": "97e14206b16f9934909b3c27f3c24c040e95d02b", "filename": "gcc/testsuite/obj-c++.dg/enhanced-proto-1.mm", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fenhanced-proto-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fenhanced-proto-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fenhanced-proto-1.mm?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -0,0 +1,18 @@\n+/* Test use of @optional/@required keywords in @protocol class. */\n+/* { dg-do compile } */\n+\n+@protocol MyProto1 \n+@optional\n+- (void) FOO;\n+@optional\n+- (void) FOO;\n+@required \n+- (void) REQ;\n+@optional\n+@end\n+\n+@protocol  MyProto2 <MyProto1>\n+- (void) FOO2;\n+@optional\n+- (void) FOO3;\n+@end"}, {"sha": "4aacbda8127123011a049f766ec9a867df631ac6", "filename": "gcc/testsuite/obj-c++.dg/enhanced-proto-2.mm", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fenhanced-proto-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fenhanced-proto-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fenhanced-proto-2.mm?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+\n+@protocol MyProto1 \n+@optional\n+- (void) FOO;\n+@optional\n+- (void) FOO;\n+@optional \n+- (void) REQ;\n+@optional\n+@end\n+\n+@interface  MyProto2 <MyProto1>\n+@required \t\t/* { dg-error \"@optional/@required is allowed in @protocol context only\" }  */\n+- (void) FOO2;\n+@optional\t\t/* { dg-error \"@optional/@required is allowed in @protocol context only\" }  */\n+- (void) FOO3;\n+@end\n+\n+@implementation MyProto2\n+- (void) FOO2{}\n+- (void) FOO3{}\n+@end"}, {"sha": "fef4c97b5c87465c4873f6a65ca5440c1a03514d", "filename": "gcc/testsuite/objc.dg/enhanced-proto-1.m", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2Fobjc.dg%2Fenhanced-proto-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2Fobjc.dg%2Fenhanced-proto-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fenhanced-proto-1.m?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -0,0 +1,19 @@\n+/* APPLE LOCAL file C* language */\n+/* Test use of @optional/@required keywords in @protocol class. */\n+/* { dg-do compile } */\n+\n+@protocol MyProto1 \n+@optional\n+- (void) FOO;\n+@optional\n+- (void) FOO;\n+@required \n+- (void) REQ;\n+@optional\n+@end\n+\n+@protocol  MyProto2 <MyProto1>\n+- (void) FOO2;\n+@optional\n+- (void) FOO3;\n+@end"}, {"sha": "6944ec86627389d12dddefe8836aba50fb0fe2c5", "filename": "gcc/testsuite/objc.dg/enhanced-proto-2.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2Fobjc.dg%2Fenhanced-proto-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92902b1bafff14a118ef08dc323dfdc12b2a63ae/gcc%2Ftestsuite%2Fobjc.dg%2Fenhanced-proto-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fenhanced-proto-2.m?ref=92902b1bafff14a118ef08dc323dfdc12b2a63ae", "patch": "@@ -0,0 +1,24 @@\n+/* Test use of @optional/@required keywords in @protocol class. */\n+/* { dg-do compile } */\n+\n+@protocol MyProto1 \n+@optional\n+- (void) FOO;\n+@optional\n+- (void) FOO;\n+@optional \n+- (void) REQ;\n+@optional\n+@end\n+\n+@interface  MyProto2 <MyProto1>\n+@required \t\t/* { dg-error \"@optional/@required is allowed in @protocol context only\" }  */\n+- (void) FOO2;\n+@optional\t\t/* { dg-error \"@optional/@required is allowed in @protocol context only\" }  */\n+- (void) FOO3;\n+@end\n+\n+@implementation MyProto2\n+- (void) FOO2{}\n+- (void) FOO3{}\n+@end"}]}