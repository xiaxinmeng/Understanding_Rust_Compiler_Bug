{"sha": "74b002ba34f1d63cc0130ad44076b462477c631f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiMDAyYmEzNGYxZDYzY2MwMTMwYWQ0NDA3NmI0NjI0NzdjNjMxZg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-08-11T11:49:26Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-08-11T11:49:26Z"}, "message": "[multiple changes]\n\n2005-08-10  Andrew Haley  <aph@redhat.com>\n\n        * java-gimplify.c (java_gimplify_modify_expr): Fix any pointer\n        type mismatches to make legal GIMPLE.\n\n2005-08-10  Robin Green <greenrd@greenrd.org>\n\n        PR java/23230:\n        * parse.y (maybe_use_access_method): Generalize check from\n        java.lang.Object to any superclass of current_class\n\nFrom-SVN: r102988", "tree": {"sha": "e46af18516f27005e93dd98e1559b369c63fe67e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46af18516f27005e93dd98e1559b369c63fe67e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74b002ba34f1d63cc0130ad44076b462477c631f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b002ba34f1d63cc0130ad44076b462477c631f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b002ba34f1d63cc0130ad44076b462477c631f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b002ba34f1d63cc0130ad44076b462477c631f/comments", "author": null, "committer": null, "parents": [{"sha": "eb2b0cc0edabaf4b09d32a4ff011cd99c201c9db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb2b0cc0edabaf4b09d32a4ff011cd99c201c9db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb2b0cc0edabaf4b09d32a4ff011cd99c201c9db"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "17999a0d520e0ed36f1b8b668b91d25cbf94fd92", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b002ba34f1d63cc0130ad44076b462477c631f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b002ba34f1d63cc0130ad44076b462477c631f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=74b002ba34f1d63cc0130ad44076b462477c631f", "patch": "@@ -1,3 +1,14 @@\n+2005-08-10  Andrew Haley  <aph@redhat.com>\n+\n+\t* java-gimplify.c (java_gimplify_modify_expr): Fix any pointer\n+\ttype mismatches to make legal GIMPLE.\n+\n+2005-08-10  Robin Green <greenrd@greenrd.org>\n+\n+\tPR java/23230:\n+\t* parse.y (maybe_use_access_method): Generalize check from\n+\tjava.lang.Object to any superclass of current_class\n+\n 2005-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (build_class_ref): Wrap the primary class type in a"}, {"sha": "a07e1bbdc96054f09c92bd59db088746693150fe", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b002ba34f1d63cc0130ad44076b462477c631f/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b002ba34f1d63cc0130ad44076b462477c631f/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=74b002ba34f1d63cc0130ad44076b462477c631f", "patch": "@@ -208,17 +208,16 @@ java_gimplify_exit_block_expr (tree expr)\n   return build1 (GOTO_EXPR, void_type_node, label);\n }\n \n-/* This is specific to the bytecode compiler.  If a variable has\n-   LOCAL_SLOT_P set, replace an assignment to it with an assignment to\n-   the corresponding variable that holds all its aliases.  */\n-\n static tree\n java_gimplify_modify_expr (tree modify_expr)\n {\n   tree lhs = TREE_OPERAND (modify_expr, 0);\n   tree rhs = TREE_OPERAND (modify_expr, 1);\n   tree lhs_type = TREE_TYPE (lhs);\n-  \n+\n+  /* This is specific to the bytecode compiler.  If a variable has\n+     LOCAL_SLOT_P set, replace an assignment to it with an assignment\n+     to the corresponding variable that holds all its aliases.  */\n   if (TREE_CODE (lhs) == VAR_DECL\n       && DECL_LANG_SPECIFIC (lhs)\n       && LOCAL_SLOT_P (lhs)\n@@ -230,7 +229,12 @@ java_gimplify_modify_expr (tree modify_expr)\n \t\t\t    new_lhs, new_rhs);\n       modify_expr = build1 (NOP_EXPR, lhs_type, modify_expr);\n     }\n-  \n+  else if (lhs_type != TREE_TYPE (rhs))\n+    /* Fix up type mismatches to make legal GIMPLE.  These are\n+       generated in several places, in particular null pointer\n+       assignment and subclass assignment.  */\n+    TREE_OPERAND (modify_expr, 1) = convert (lhs_type, rhs);\n+\n   return modify_expr;\n }\n "}, {"sha": "363d07452189121294d7b6d6d955309111dc737e", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b002ba34f1d63cc0130ad44076b462477c631f/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b002ba34f1d63cc0130ad44076b462477c631f/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=74b002ba34f1d63cc0130ad44076b462477c631f", "patch": "@@ -10945,7 +10945,8 @@ maybe_use_access_method (int is_super_init, tree *mdecl, tree *this_arg)\n      invoking a static method. Note that if MD's type is unrelated to\n      CURRENT_CLASS, then the current this can be used. */\n \n-  if (non_static_context && DECL_CONTEXT (md) != object_type_node)\n+  if (non_static_context \n+      && !inherits_from_p (current_class, DECL_CONTEXT (md)))\n     {\n       ctx = TREE_TYPE (DECL_CONTEXT (TYPE_NAME (current_class)));\n       if (inherits_from_p (ctx, DECL_CONTEXT (md)))"}]}