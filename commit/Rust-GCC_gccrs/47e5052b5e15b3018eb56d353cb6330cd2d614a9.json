{"sha": "47e5052b5e15b3018eb56d353cb6330cd2d614a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlNTA1MmI1ZTE1YjMwMThlYjU2ZDM1M2NiNjMzMGNkMmQ2MTRhOQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-09-17T15:47:27Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-09-17T15:53:57Z"}, "message": "rs6000: Support for vectorizing built-in functions\n\nThis patch just duplicates a couple of functions and adjusts them to use the\nnew builtin names.  There's no logical change otherwise.\n\n2021-09-17  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000.c (rs6000-builtins.h): New include.\n\t(rs6000_new_builtin_vectorized_function): New function.\n\t(rs6000_new_builtin_md_vectorized_function): Likewise.\n\t(rs6000_builtin_vectorized_function): Call\n\trs6000_new_builtin_vectorized_function.\n\t(rs6000_builtin_md_vectorized_function): Call\n\trs6000_new_builtin_md_vectorized_function.", "tree": {"sha": "27d8f787b2a548e08afc49b83df7fa31c9677d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d8f787b2a548e08afc49b83df7fa31c9677d7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47e5052b5e15b3018eb56d353cb6330cd2d614a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e5052b5e15b3018eb56d353cb6330cd2d614a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e5052b5e15b3018eb56d353cb6330cd2d614a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e5052b5e15b3018eb56d353cb6330cd2d614a9/comments", "author": null, "committer": null, "parents": [{"sha": "6cba7d1dc437a25c702ab7b1db8b37c9e8b0c600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cba7d1dc437a25c702ab7b1db8b37c9e8b0c600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cba7d1dc437a25c702ab7b1db8b37c9e8b0c600"}], "stats": {"total": 257, "additions": 257, "deletions": 0}, "files": [{"sha": "060f51abd89faa5eb74a9a134a412bc74b8c6007", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 257, "deletions": 0, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e5052b5e15b3018eb56d353cb6330cd2d614a9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e5052b5e15b3018eb56d353cb6330cd2d614a9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=47e5052b5e15b3018eb56d353cb6330cd2d614a9", "patch": "@@ -78,6 +78,7 @@\n #include \"case-cfn-macros.h\"\n #include \"ppc-auxv.h\"\n #include \"rs6000-internal.h\"\n+#include \"rs6000-builtins.h\"\n #include \"opts.h\"\n \n /* This file should be included last.  */\n@@ -5608,6 +5609,255 @@ rs6000_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n   return nunroll;\n }\n \n+/* Returns a function decl for a vectorized version of the builtin function\n+   with builtin function code FN and the result vector type TYPE, or NULL_TREE\n+   if it is not available.\n+\n+   Implement targetm.vectorize.builtin_vectorized_function.  */\n+\n+static tree\n+rs6000_new_builtin_vectorized_function (unsigned int fn, tree type_out,\n+\t\t\t\t\ttree type_in)\n+{\n+  machine_mode in_mode, out_mode;\n+  int in_n, out_n;\n+\n+  if (TARGET_DEBUG_BUILTIN)\n+    fprintf (stderr, \"rs6000_new_builtin_vectorized_function (%s, %s, %s)\\n\",\n+\t     combined_fn_name (combined_fn (fn)),\n+\t     GET_MODE_NAME (TYPE_MODE (type_out)),\n+\t     GET_MODE_NAME (TYPE_MODE (type_in)));\n+\n+  /* TODO: Should this be gcc_assert?  */\n+  if (TREE_CODE (type_out) != VECTOR_TYPE\n+      || TREE_CODE (type_in) != VECTOR_TYPE)\n+    return NULL_TREE;\n+\n+  out_mode = TYPE_MODE (TREE_TYPE (type_out));\n+  out_n = TYPE_VECTOR_SUBPARTS (type_out);\n+  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n+  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n+\n+  switch (fn)\n+    {\n+    CASE_CFN_COPYSIGN:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_CPSGNDP];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_CPSGNSP];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_COPYSIGN_V4SF];\n+      break;\n+    CASE_CFN_CEIL:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRDPIP];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRSPIP];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_VRFIP];\n+      break;\n+    CASE_CFN_FLOOR:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRDPIM];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRSPIM];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_VRFIM];\n+      break;\n+    CASE_CFN_FMA:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVMADDDP];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVMADDSP];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_VMADDFP];\n+      break;\n+    CASE_CFN_TRUNC:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRDPIZ];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRSPIZ];\n+      if (VECTOR_UNIT_ALTIVEC_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_VRFIZ];\n+      break;\n+    CASE_CFN_NEARBYINT:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && flag_unsafe_math_optimizations\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRDPI];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && flag_unsafe_math_optimizations\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRSPI];\n+      break;\n+    CASE_CFN_RINT:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && !flag_trapping_math\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRDPIC];\n+      if (VECTOR_UNIT_VSX_P (V4SFmode)\n+\t  && !flag_trapping_math\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_XVRSPIC];\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  /* Generate calls to libmass if appropriate.  */\n+  if (rs6000_veclib_handler)\n+    return rs6000_veclib_handler (combined_fn (fn), type_out, type_in);\n+\n+  return NULL_TREE;\n+}\n+\n+/* Implement targetm.vectorize.builtin_md_vectorized_function.  */\n+\n+static tree\n+rs6000_new_builtin_md_vectorized_function (tree fndecl, tree type_out,\n+\t\t\t\t\t   tree type_in)\n+{\n+  machine_mode in_mode, out_mode;\n+  int in_n, out_n;\n+\n+  if (TARGET_DEBUG_BUILTIN)\n+    fprintf (stderr,\n+\t     \"rs6000_new_builtin_md_vectorized_function (%s, %s, %s)\\n\",\n+\t     IDENTIFIER_POINTER (DECL_NAME (fndecl)),\n+\t     GET_MODE_NAME (TYPE_MODE (type_out)),\n+\t     GET_MODE_NAME (TYPE_MODE (type_in)));\n+\n+  /* TODO: Should this be gcc_assert?  */\n+  if (TREE_CODE (type_out) != VECTOR_TYPE\n+      || TREE_CODE (type_in) != VECTOR_TYPE)\n+    return NULL_TREE;\n+\n+  out_mode = TYPE_MODE (TREE_TYPE (type_out));\n+  out_n = TYPE_VECTOR_SUBPARTS (type_out);\n+  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n+  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n+\n+  enum rs6000_gen_builtins fn\n+    = (enum rs6000_gen_builtins) DECL_MD_FUNCTION_CODE (fndecl);\n+  switch (fn)\n+    {\n+    case RS6000_BIF_RSQRTF:\n+      if (VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_VRSQRTFP];\n+      break;\n+    case RS6000_BIF_RSQRT:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_RSQRT_2DF];\n+      break;\n+    case RS6000_BIF_RECIPF:\n+      if (VECTOR_UNIT_ALTIVEC_OR_VSX_P (V4SFmode)\n+\t  && out_mode == SFmode && out_n == 4\n+\t  && in_mode == SFmode && in_n == 4)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_VRECIPFP];\n+      break;\n+    case RS6000_BIF_RECIP:\n+      if (VECTOR_UNIT_VSX_P (V2DFmode)\n+\t  && out_mode == DFmode && out_n == 2\n+\t  && in_mode == DFmode && in_n == 2)\n+\treturn rs6000_builtin_decls_x[RS6000_BIF_RECIP_V2DF];\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  machine_mode in_vmode = TYPE_MODE (type_in);\n+  machine_mode out_vmode = TYPE_MODE (type_out);\n+\n+  /* Power10 supported vectorized built-in functions.  */\n+  if (TARGET_POWER10\n+      && in_vmode == out_vmode\n+      && VECTOR_UNIT_ALTIVEC_OR_VSX_P (in_vmode))\n+    {\n+      machine_mode exp_mode = DImode;\n+      machine_mode exp_vmode = V2DImode;\n+      enum rs6000_gen_builtins bif;\n+      switch (fn)\n+\t{\n+\tcase RS6000_BIF_DIVWE:\n+\tcase RS6000_BIF_DIVWEU:\n+\t  exp_mode = SImode;\n+\t  exp_vmode = V4SImode;\n+\t  if (fn == RS6000_BIF_DIVWE)\n+\t    bif = RS6000_BIF_VDIVESW;\n+\t  else\n+\t    bif = RS6000_BIF_VDIVEUW;\n+\t  break;\n+\tcase RS6000_BIF_DIVDE:\n+\tcase RS6000_BIF_DIVDEU:\n+\t  if (fn == RS6000_BIF_DIVDE)\n+\t    bif = RS6000_BIF_VDIVESD;\n+\t  else\n+\t    bif = RS6000_BIF_VDIVEUD;\n+\t  break;\n+\tcase RS6000_BIF_CFUGED:\n+\t  bif = RS6000_BIF_VCFUGED;\n+\t  break;\n+\tcase RS6000_BIF_CNTLZDM:\n+\t  bif = RS6000_BIF_VCLZDM;\n+\t  break;\n+\tcase RS6000_BIF_CNTTZDM:\n+\t  bif = RS6000_BIF_VCTZDM;\n+\t  break;\n+\tcase RS6000_BIF_PDEPD:\n+\t  bif = RS6000_BIF_VPDEPD;\n+\t  break;\n+\tcase RS6000_BIF_PEXTD:\n+\t  bif = RS6000_BIF_VPEXTD;\n+\t  break;\n+\tdefault:\n+\t  return NULL_TREE;\n+\t}\n+\n+      if (in_mode == exp_mode && in_vmode == exp_vmode)\n+\treturn rs6000_builtin_decls_x[bif];\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handler for the Mathematical Acceleration Subsystem (mass) interface to a\n    library with vectorized intrinsics.  */\n \n@@ -5727,6 +5977,9 @@ rs6000_builtin_vectorized_function (unsigned int fn, tree type_out,\n   machine_mode in_mode, out_mode;\n   int in_n, out_n;\n \n+  if (new_builtins_are_live)\n+    return rs6000_new_builtin_vectorized_function (fn, type_out, type_in);\n+\n   if (TARGET_DEBUG_BUILTIN)\n     fprintf (stderr, \"rs6000_builtin_vectorized_function (%s, %s, %s)\\n\",\n \t     combined_fn_name (combined_fn (fn)),\n@@ -5858,6 +6111,10 @@ rs6000_builtin_md_vectorized_function (tree fndecl, tree type_out,\n   machine_mode in_mode, out_mode;\n   int in_n, out_n;\n \n+  if (new_builtins_are_live)\n+    return rs6000_new_builtin_md_vectorized_function (fndecl, type_out,\n+\t\t\t\t\t\t      type_in);\n+\n   if (TARGET_DEBUG_BUILTIN)\n     fprintf (stderr, \"rs6000_builtin_md_vectorized_function (%s, %s, %s)\\n\",\n \t     IDENTIFIER_POINTER (DECL_NAME (fndecl)),"}]}