{"sha": "4f1aac426685bb179bd45b525ae95e1f80bd5149", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYxYWFjNDI2Njg1YmIxNzliZDQ1YjUyNWFlOTVlMWY4MGJkNTE0OQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-03-05T02:16:39Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-03-05T02:16:39Z"}, "message": "mmix.h (ENCODE_SECTION_INFO): Pass on new second parameter to mmix_encode_section_info.\n\n\t* config/mmix/mmix.h (ENCODE_SECTION_INFO): Pass on new second\n\tparameter to mmix_encode_section_info.\n\t(LINK_SPEC): Don't defsym __.MMIX.start..text if linking\n\trelocatably.  Always produce ELF, not mmo if linking relocatably.\n\t* config/mmix/mmix.c (mmix_encode_section_info): If new parameter\n\tfirst is non-zero, don't add symbol prefix.\n\t* config/mmix/mmix-protos.h (mmix_encode_section_info): Tweak\n\tprototype accordingly.\n\nFrom-SVN: r50298", "tree": {"sha": "d9b39989e6dcd5ea25389f49278d893159b0a712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b39989e6dcd5ea25389f49278d893159b0a712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f1aac426685bb179bd45b525ae95e1f80bd5149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1aac426685bb179bd45b525ae95e1f80bd5149", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f1aac426685bb179bd45b525ae95e1f80bd5149", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1aac426685bb179bd45b525ae95e1f80bd5149/comments", "author": null, "committer": null, "parents": [{"sha": "123455433fbaf97026cd1dc165ee97476fe7e515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123455433fbaf97026cd1dc165ee97476fe7e515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/123455433fbaf97026cd1dc165ee97476fe7e515"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "7db049bfa532c5b6631e9ced9a65c5b3ab18296e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1aac426685bb179bd45b525ae95e1f80bd5149/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1aac426685bb179bd45b525ae95e1f80bd5149/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f1aac426685bb179bd45b525ae95e1f80bd5149", "patch": "@@ -1,3 +1,14 @@\n+2002-03-05  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.h (ENCODE_SECTION_INFO): Pass on new second\n+\tparameter to mmix_encode_section_info.\n+\t(LINK_SPEC): Don't defsym __.MMIX.start..text if linking\n+\trelocatably.  Always produce ELF, not mmo if linking relocatably.\n+\t* config/mmix/mmix.c (mmix_encode_section_info): If new parameter\n+\tfirst is non-zero, don't add symbol prefix.\n+\t* config/mmix/mmix-protos.h (mmix_encode_section_info): Tweak\n+\tprototype accordingly.\n+\n 2002-03-04  Krister Walfridsson  <cato@df.lth.se>\n \n \t* config.gcc (*-*-netbsd*): Add t-slibgcc-elf-ver to tmake_file."}, {"sha": "b054f668d149e3a7e4c962f917a709327a645b23", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1aac426685bb179bd45b525ae95e1f80bd5149/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1aac426685bb179bd45b525ae95e1f80bd5149/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=4f1aac426685bb179bd45b525ae95e1f80bd5149", "patch": "@@ -75,7 +75,7 @@ extern int mmix_local_alignment PARAMS ((tree, int));\n extern void mmix_setup_incoming_varargs\n   PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int));\n extern void mmix_select_section PARAMS ((tree, int, int));\n-extern void mmix_encode_section_info PARAMS ((tree));\n+extern void mmix_encode_section_info PARAMS ((tree, int));\n extern void mmix_unique_section PARAMS ((tree, int));\n extern void mmix_asm_output_pool_prologue\n   PARAMS ((FILE *, const char *, tree, int));"}, {"sha": "ac370508ac04821acdb62a4e945694b21198ad50", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1aac426685bb179bd45b525ae95e1f80bd5149/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1aac426685bb179bd45b525ae95e1f80bd5149/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=4f1aac426685bb179bd45b525ae95e1f80bd5149", "patch": "@@ -1695,15 +1695,16 @@ mmix_select_section (decl, reloc, align)\n /* ENCODE_SECTION_INFO.  */\n \n void\n-mmix_encode_section_info (decl)\n+mmix_encode_section_info (decl, first)\n      tree decl;\n+     int first;\n {\n   /* Test for an external declaration, and do nothing if it is one.  */\n   if ((TREE_CODE (decl) == VAR_DECL\n        && (DECL_EXTERNAL (decl) || TREE_PUBLIC (decl)))\n       || (TREE_CODE (decl) == FUNCTION_DECL && TREE_PUBLIC (decl)))\n     ;\n-  else if (DECL_P (decl))\n+  else if (first && DECL_P (decl))\n     {\n       /* For non-visible declarations, add a \"@\" prefix, which we skip\n \t when the label is output.  If the label does not have this"}, {"sha": "7f41722af8ed79ed394009d241db026365001583", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f1aac426685bb179bd45b525ae95e1f80bd5149/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f1aac426685bb179bd45b525ae95e1f80bd5149/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=4f1aac426685bb179bd45b525ae95e1f80bd5149", "patch": "@@ -119,13 +119,15 @@ struct machine_function\n \n /* Pass on -mset-program-start=N and -mset-data-start=M to the linker.\n    Provide default program start 0x100 unless -mno-set-program-start.\n-   Link to ELF if requested.  */\n+   Don't do this if linking relocatably, with -r.  For a final link,\n+   produce mmo, unless ELF is requested or when linking relocatably.  */\n #define LINK_SPEC \\\n  \"%{mset-program-start=*:--defsym __.MMIX.start..text=%*}\\\n   %{mset-data-start=*:--defsym __.MMIX.start..data=%*}\\\n   %{!mset-program-start=*:\\\n-    %{!mno-set-program-start:--defsym __.MMIX.start..text=0x100}}\\\n-  %{!melf:-m mmo}%{melf:-m elf64mmix}\"\n+    %{!mno-set-program-start:\\\n+     %{!r:--defsym __.MMIX.start..text=0x100}}}\\\n+  %{!melf:%{!r:-m mmo}}%{melf|r:-m elf64mmix}\"\n \n /* Put unused option values here.  */\n extern const char *mmix_cc1_ignored_option;\n@@ -937,8 +939,8 @@ const_section ()\t\t\t\t\t\t\\\n #define SELECT_SECTION(DECL, RELOC, ALIGN) \\\n  mmix_select_section (DECL, RELOC, ALIGN)\n \n-#define ENCODE_SECTION_INFO(DECL) \\\n- mmix_encode_section_info (DECL)\n+#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n+ mmix_encode_section_info (DECL, FIRST)\n \n #define STRIP_NAME_ENCODING(VAR, SYM_NAME) \\\n  (VAR) = mmix_strip_name_encoding (SYM_NAME)"}]}