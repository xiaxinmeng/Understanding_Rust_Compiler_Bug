{"sha": "87e2376db3d7cf905f163dff8424ef877368eed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlMjM3NmRiM2Q3Y2Y5MDVmMTYzZGZmODQyNGVmODc3MzY4ZWVkNg==", "commit": {"author": {"name": "Don Lindsay", "email": "dlindsay@gcc.gnu.org", "date": "2000-04-03T21:05:03Z"}, "committer": {"name": "Don Lindsay", "email": "dlindsay@gcc.gnu.org", "date": "2000-04-03T21:05:03Z"}, "message": "More va-arg variations. OKed by Jeff Law.\n\nFrom-SVN: r32887", "tree": {"sha": "faf5bc681f45ecce4b2011eaef3eee8563948d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faf5bc681f45ecce4b2011eaef3eee8563948d17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87e2376db3d7cf905f163dff8424ef877368eed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e2376db3d7cf905f163dff8424ef877368eed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e2376db3d7cf905f163dff8424ef877368eed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e2376db3d7cf905f163dff8424ef877368eed6/comments", "author": null, "committer": null, "parents": [{"sha": "c7b95850fbcae16cd38d0540753d0d28192c5446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b95850fbcae16cd38d0540753d0d28192c5446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b95850fbcae16cd38d0540753d0d28192c5446"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "ed1b2e2481862c2eb2376496f290f1f965117aee", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-15.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-15.c?ref=87e2376db3d7cf905f163dff8424ef877368eed6", "patch": "@@ -0,0 +1,46 @@\n+#include <varargs.h>\n+\n+void vafunction (dummy, va_alist)\n+  char *dummy;\n+  va_dcl\n+{\n+  double darg;\n+  int iarg;\n+  int flag = 0;\n+  int i;\n+  va_list ap;\n+\n+  va_start(ap);\n+  for (i = 1; i <= 18; i++, flag++) \n+    {\n+      if (flag & 1)\n+\t{\n+\t  darg = va_arg (ap, double);\t\n+\t  if (darg != (double)i)\n+\t    abort();\n+\t}\n+      else\n+\t{\n+\t  iarg = va_arg (ap, int);\n+\t  if (iarg != i)\n+\t    abort();\n+\t}\n+    }\n+    va_end(ap);\n+}\n+\n+int main (void)\n+{\n+  vafunction( \"\", \n+\t1, 2., \n+\t3, 4., \n+\t5, 6., \n+\t7, 8., \n+\t9, 10.,\n+\t11, 12.,\n+\t13, 14.,\n+\t15, 16.,\n+\t17, 18. );\n+  exit(0);\n+  return 0;\n+}"}, {"sha": "f07972113f3596762cb34b50b9f48d8c281166d3", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-16.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-16.c?ref=87e2376db3d7cf905f163dff8424ef877368eed6", "patch": "@@ -0,0 +1,43 @@\n+#include <varargs.h>\n+\n+typedef double TYPE;\n+\n+void vafunction (dummy1, dummy2, va_alist)\n+  TYPE dummy1, dummy2;\n+  va_dcl\n+{\n+  va_list ap;\n+\n+  va_start(ap);\n+  if (dummy1 != 888.)\n+    abort();\n+  if (dummy2 != 999.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 1.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 2.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 3.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 4.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 5.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 6.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 7.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 8.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 9.)\n+    abort();\n+  va_end(ap);\n+}\n+\n+\n+int main (void)\n+{\n+  vafunction( 888., 999., 1., 2., 3., 4., 5., 6., 7., 8., 9. );\n+  exit(0);\n+  return 0;\n+}"}, {"sha": "ff72d59e3b5294ec535944a944b1b15179f7a709", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-17.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-17.c?ref=87e2376db3d7cf905f163dff8424ef877368eed6", "patch": "@@ -0,0 +1,39 @@\n+#include <varargs.h>\n+\n+typedef double TYPE;\n+\n+void vafunction (dummy, va_alist)\n+  char *dummy;\n+  va_dcl\n+{\n+  va_list ap;\n+\n+  va_start(ap);\n+  if (va_arg (ap, TYPE) != 1.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 2.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 3.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 4.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 5.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 6.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 7.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 8.)\n+    abort();\n+  if (va_arg (ap, TYPE) != 9.)\n+    abort();\n+  va_end(ap);\n+}\n+\n+\n+int main (void)\n+{\n+  vafunction( \"\", 1., 2., 3., 4., 5., 6., 7., 8., 9. );\n+  exit(0);\n+  return 0;\n+}"}, {"sha": "00dd54f4fd00afd521578dd729c1d5bea8df86ba", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-18.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-18.c?ref=87e2376db3d7cf905f163dff8424ef877368eed6", "patch": "@@ -0,0 +1,24 @@\n+#include <stdarg.h>\n+\n+typedef double L;\n+void f (L p0, L p1, L p2, L p3, L p4, L p5, L p6, L p7, L p8, ...)\n+{\n+  va_list select;\n+\n+  va_start (select, p8);\n+\n+  if (va_arg (select, int) != 10)\n+    abort ();\n+  if (va_arg (select, int) != 11)\n+    abort ();\n+  if (va_arg (select, int) != 12)\n+    abort ();\n+\n+  va_end (select);\n+}\n+\n+int main ()\n+{\n+  f (1., 2., 3., 4., 5., 6., 7., 8., 9., 10, 11, 12);\n+  exit (0);\n+}"}, {"sha": "d0581742720a01804e6f086348bbd09b30ad90fd", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-19.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e2376db3d7cf905f163dff8424ef877368eed6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-19.c?ref=87e2376db3d7cf905f163dff8424ef877368eed6", "patch": "@@ -0,0 +1,39 @@\n+#include <varargs.h>\n+\n+typedef int TYPE;\n+\n+void vafunction (dummy, va_alist)\n+  char *dummy;\n+  va_dcl\n+{\n+  va_list ap;\n+\n+  va_start(ap);\n+  if (va_arg (ap, TYPE) != 1)\n+    abort();\n+  if (va_arg (ap, TYPE) != 2)\n+    abort();\n+  if (va_arg (ap, TYPE) != 3)\n+    abort();\n+  if (va_arg (ap, TYPE) != 4)\n+    abort();\n+  if (va_arg (ap, TYPE) != 5)\n+    abort();\n+  if (va_arg (ap, TYPE) != 6)\n+    abort();\n+  if (va_arg (ap, TYPE) != 7)\n+    abort();\n+  if (va_arg (ap, TYPE) != 8)\n+    abort();\n+  if (va_arg (ap, TYPE) != 9)\n+    abort();\n+  va_end(ap);\n+}\n+\n+\n+int main (void)\n+{\n+  vafunction( \"\", 1, 2, 3, 4, 5, 6, 7, 8, 9 );\n+  exit(0);\n+  return 0;\n+}"}]}