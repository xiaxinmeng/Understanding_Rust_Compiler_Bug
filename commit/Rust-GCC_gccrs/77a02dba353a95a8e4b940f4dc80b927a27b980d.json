{"sha": "77a02dba353a95a8e4b940f4dc80b927a27b980d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhMDJkYmEzNTNhOTVhOGU0Yjk0MGY0ZGM4MGI5MjdhMjdiOTgwZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-15T16:59:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-15T16:59:10Z"}, "message": "toplev.c: Make *_time variable long to reduce chance of overflow.\n\n\t* toplev.c: Make *_time variable long to reduce chance of overflow.\n\t(TIMEVAR): Likewise for `otime'.\n\t(print_time): Arg is now long; compute percentage in FP and round.\n\t* toplev.h (print_time): Arg is long.\n\n\t* tree.c: Minor whitespace changes.\n\nFrom-SVN: r33168", "tree": {"sha": "6baa6c3bda5e6416f07a4e6a2de6c2361e0bd82a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6baa6c3bda5e6416f07a4e6a2de6c2361e0bd82a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77a02dba353a95a8e4b940f4dc80b927a27b980d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a02dba353a95a8e4b940f4dc80b927a27b980d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a02dba353a95a8e4b940f4dc80b927a27b980d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a02dba353a95a8e4b940f4dc80b927a27b980d/comments", "author": null, "committer": null, "parents": [{"sha": "b1a88540d4d7426abb0f32aad5bf0e73a9d02e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a88540d4d7426abb0f32aad5bf0e73a9d02e6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a88540d4d7426abb0f32aad5bf0e73a9d02e6c"}], "stats": {"total": 95, "additions": 55, "deletions": 40}, "files": [{"sha": "5f2b8111609ae02242e377322b85dba63d787c46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a02dba353a95a8e4b940f4dc80b927a27b980d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a02dba353a95a8e4b940f4dc80b927a27b980d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77a02dba353a95a8e4b940f4dc80b927a27b980d", "patch": "@@ -1,6 +1,13 @@\n Sat Apr 15 10:59:19 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n-\t* configure.in (alpha*-*-*): Aad config/alpha/t-alpha.\n+\t* toplev.c: Make *_time variable long to reduce chance of overflow.\n+\t(TIMEVAR): Likewise for `otime'.\n+\t(print_time): Arg is now long; compute percentage in FP and round.\n+\t* toplev.h (print_time): Arg is long.\n+\n+\t* tree.c: Minor whitespace changes.\n+\n+\t* configure.in (alpha*-*-*): Add config/alpha/t-alpha.\n \t* configure: Rebuilt.\n \t* libgcc2.c (__fixunstfDI): Renamed from __fixunstfdi.\n \t(__fixunsxfDI): Renamed from __fixunsxfdi."}, {"sha": "1a2b4f912d98c5505c0b2a6e0cd9b8844b051e6e", "filename": "gcc/toplev.c", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a02dba353a95a8e4b940f4dc80b927a27b980d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a02dba353a95a8e4b940f4dc80b927a27b980d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=77a02dba353a95a8e4b940f4dc80b927a27b980d", "patch": "@@ -1403,36 +1403,36 @@ read_integral_parameter (p, pname, defval)\n \n /* Time accumulators, to count the total time spent in various passes.  */\n \n-int parse_time;\n-int varconst_time;\n-int integration_time;\n-int jump_time;\n-int cse_time;\n-int gcse_time;\n-int loop_time;\n-int cse2_time;\n-int branch_prob_time;\n-int flow_time;\n-int combine_time;\n-int regmove_time;\n-int sched_time;\n-int local_alloc_time;\n-int global_alloc_time;\n-int flow2_time;\n-int peephole2_time;\n-int sched2_time;\n-int dbr_sched_time;\n-int reorder_blocks_time;\n-int rename_registers_time;\n-int shorten_branch_time;\n-int stack_reg_time;\n-int to_ssa_time;\n-int from_ssa_time;\n-int final_time;\n-int symout_time;\n-int dump_time;\n-int gc_time;\n-int all_time;\n+long parse_time;\n+long varconst_time;\n+long integration_time;\n+long jump_time;\n+long cse_time;\n+long gcse_time;\n+long loop_time;\n+long cse2_time;\n+long branch_prob_time;\n+long flow_time;\n+long combine_time;\n+long regmove_time;\n+long sched_time;\n+long local_alloc_time;\n+long global_alloc_time;\n+long flow2_time;\n+long peephole2_time;\n+long sched2_time;\n+long dbr_sched_time;\n+long reorder_blocks_time;\n+long rename_registers_time;\n+long shorten_branch_time;\n+long stack_reg_time;\n+long to_ssa_time;\n+long from_ssa_time;\n+long final_time;\n+long symout_time;\n+long dump_time;\n+long gc_time;\n+long all_time;\n \f\n /* Return time used so far, in microseconds.  */\n \n@@ -1503,18 +1503,23 @@ get_run_time ()\n #endif\t/* __BEOS__ */\n }\n \n-#define TIMEVAR(VAR, BODY)    \\\n-do { int otime = get_run_time (); BODY; VAR += get_run_time () - otime; } while (0)\n+#define TIMEVAR(VAR, BODY)\t\t\\\n+do {\t\t\t\t\t\\\n+  long otime = get_run_time ();\t\t\\\n+  BODY;\t\t\t\t\t\\\n+  VAR += get_run_time () - otime;\t\\\n+} while (0)\n \n void\n print_time (str, total)\n      const char *str;\n-     int total;\n+     long total;\n {\n   fprintf (stderr,\n-\t   \"time in %s: %d.%06d (%d%%)\\n\",\n+\t   \"time in %s: %ld.%06ld (%ld%%)\\n\",\n \t   str, total / 1000000, total % 1000000,\n-\t   all_time == 0 ? 0 : (100 * total) / all_time);\n+\t   all_time == 0 ? 0\n+\t   : (long) (((100.0 * (double) total) / (double) all_time) + .5));\n }\n \n /* This is the default decl_printable_name function.  */\n@@ -1528,6 +1533,7 @@ decl_name (decl, verbosity)\n }\n \f\n /* Mark P for GC.  Also mark main_input_filename and input_filename.  */\n+\n static void\n mark_file_stack (p)\n      void *p;"}, {"sha": "e5a06fff093ba12cbaa75c03dc5d4c26039fd4c5", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a02dba353a95a8e4b940f4dc80b927a27b980d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a02dba353a95a8e4b940f4dc80b927a27b980d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=77a02dba353a95a8e4b940f4dc80b927a27b980d", "patch": "@@ -30,7 +30,7 @@ extern int read_integral_parameter\tPARAMS ((const char *, const char *,\n \t\t\t\t\t\tconst int));\n extern int count_error\t\t\tPARAMS ((int));\n extern void strip_off_ending\t\tPARAMS ((char *, int));\n-extern void print_time\t\t\tPARAMS ((const char *, int));\n+extern void print_time\t\t\tPARAMS ((const char *, long));\n extern void debug_start_source_file\tPARAMS ((char *));\n extern void debug_end_source_file\tPARAMS ((unsigned));\n extern void debug_define\t\tPARAMS ((unsigned, char *));"}, {"sha": "72d670cf3ac1a6d57659e20d0b0a32a392c2b2b8", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a02dba353a95a8e4b940f4dc80b927a27b980d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a02dba353a95a8e4b940f4dc80b927a27b980d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=77a02dba353a95a8e4b940f4dc80b927a27b980d", "patch": "@@ -5170,7 +5170,7 @@ int_fits_type_p (c, type)\n }\n \n /* Given a DECL or TYPE, return the scope in which it was declared, or\n-   NUL_TREE if there is no containing scope.  */\n+   NULL_TREE if there is no containing scope.  */\n \n tree\n get_containing_scope (t)\n@@ -5193,15 +5193,17 @@ decl_function_context (decl)\n \n   if (TREE_CODE (decl) == SAVE_EXPR)\n     context = SAVE_EXPR_CONTEXT (decl);\n+\n   /* C++ virtual functions use DECL_CONTEXT for the class of the vtable\n      where we look up the function at runtime.  Such functions always take\n      a first argument of type 'pointer to real context'.\n \n      C++ should really be fixed to use DECL_CONTEXT for the real context,\n      and use something else for the \"virtual context\".  */\n   else if (TREE_CODE (decl) == FUNCTION_DECL && DECL_VINDEX (decl))\n-    context = TYPE_MAIN_VARIANT\n-      (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (decl)))));\n+    context\n+      = TYPE_MAIN_VARIANT\n+\t(TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (decl)))));\n   else\n     context = DECL_CONTEXT (decl);\n "}]}