{"sha": "376d69f3f75d2750fa91c0f02f1121c3a8468ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2ZDY5ZjNmNzVkMjc1MGZhOTFjMGYwMmYxMTIxYzNhODQ2OGZmYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2019-04-05T21:57:41Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-18T07:00:12Z"}, "message": "AVX512FP16: Enable FP16 mask load/store.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (avx512fmaskmodelower): Extend to support\n\tHF modes.\n\t(maskload<mode><avx512fmaskmodelower>): Ditto.\n\t(maskstore<mode><avx512fmaskmodelower>): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-xorsign-1.c: New test.", "tree": {"sha": "8eaa56dc8e3e56eae99eb95599da9258fd3b1bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eaa56dc8e3e56eae99eb95599da9258fd3b1bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/376d69f3f75d2750fa91c0f02f1121c3a8468ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376d69f3f75d2750fa91c0f02f1121c3a8468ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376d69f3f75d2750fa91c0f02f1121c3a8468ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376d69f3f75d2750fa91c0f02f1121c3a8468ffc/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6ab4abc41268b7065be61a0c4686ae68370883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6ab4abc41268b7065be61a0c4686ae68370883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6ab4abc41268b7065be61a0c4686ae68370883"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "bcded09d6f9f1383599cc70be1de80adaec6d9a4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d69f3f75d2750fa91c0f02f1121c3a8468ffc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d69f3f75d2750fa91c0f02f1121c3a8468ffc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=376d69f3f75d2750fa91c0f02f1121c3a8468ffc", "patch": "@@ -24410,9 +24410,9 @@\n   \"TARGET_AVX\")\n \n (define_expand \"maskload<mode><avx512fmaskmodelower>\"\n-  [(set (match_operand:V48_AVX512VL 0 \"register_operand\")\n-\t(vec_merge:V48_AVX512VL\n-\t  (match_operand:V48_AVX512VL 1 \"memory_operand\")\n+  [(set (match_operand:V48H_AVX512VL 0 \"register_operand\")\n+\t(vec_merge:V48H_AVX512VL\n+\t  (match_operand:V48H_AVX512VL 1 \"memory_operand\")\n \t  (match_dup 0)\n \t  (match_operand:<avx512fmaskmode> 2 \"register_operand\")))]\n   \"TARGET_AVX512F\")\n@@ -24435,9 +24435,9 @@\n   \"TARGET_AVX\")\n \n (define_expand \"maskstore<mode><avx512fmaskmodelower>\"\n-  [(set (match_operand:V48_AVX512VL 0 \"memory_operand\")\n-\t(vec_merge:V48_AVX512VL\n-\t  (match_operand:V48_AVX512VL 1 \"register_operand\")\n+  [(set (match_operand:V48H_AVX512VL 0 \"memory_operand\")\n+\t(vec_merge:V48H_AVX512VL\n+\t  (match_operand:V48H_AVX512VL 1 \"register_operand\")\n \t  (match_dup 0)\n \t  (match_operand:<avx512fmaskmode> 2 \"register_operand\")))]\n   \"TARGET_AVX512F\")"}, {"sha": "a22a6ceabffaea1901595d6adc34355a7364ad18", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-xorsign-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376d69f3f75d2750fa91c0f02f1121c3a8468ffc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-xorsign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376d69f3f75d2750fa91c0f02f1121c3a8468ffc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-xorsign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-xorsign-1.c?ref=376d69f3f75d2750fa91c0f02f1121c3a8468ffc", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-vectorize -fdump-tree-vect-details -save-temps\" } */\n+\n+extern void abort ();\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+\n+#define N 16\n+_Float16 a[N] = {-0.1f, -3.2f, -6.3f, -9.4f,\n+\t\t -12.5f, -15.6f, -18.7f, -21.8f,\n+\t\t 24.9f, 27.1f, 30.2f, 33.3f,\n+\t\t 36.4f, 39.5f, 42.6f, 45.7f};\n+_Float16 b[N] = {-1.2f, 3.4f, -5.6f, 7.8f,\n+\t\t -9.0f, 1.0f, -2.0f, 3.0f,\n+\t\t -4.0f, -5.0f, 6.0f, 7.0f,\n+\t\t -8.0f, -9.0f, 10.0f, 11.0f};\n+_Float16 r[N];\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+do_test (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    r[i] = a[i] * __builtin_copysignf16 (1.0f, b[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    if (r[i] != a[i] * __builtin_copysignf16 (1.0f, b[i]))\n+      abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]xor\" } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]and\" } } */\n+/* { dg-final { scan-assembler-not \"copysign\" } } */"}]}