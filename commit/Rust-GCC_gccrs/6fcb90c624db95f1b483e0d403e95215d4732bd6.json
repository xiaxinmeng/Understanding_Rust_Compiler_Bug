{"sha": "6fcb90c624db95f1b483e0d403e95215d4732bd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZjYjkwYzYyNGRiOTVmMWI0ODNlMGQ0MDNlOTUyMTVkNDczMmJkNg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-10-06T09:18:37Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-10-06T09:18:37Z"}, "message": "PR82317: S/390: Fix vec_min/vec_max builtins for IBM z13.\n\nWith IBM z14 a hardware instruction for floating point min and max has\nbeen added while for IBM z13 we emulated min/max for vector double with\ncompare and select.  This testcase makes sure that we fall back to the\nemulated variant when compiling for z13.\n\ngcc/ChangeLog:\n\n2017-10-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/82317\n\t* config/s390/s390-builtin-types.def: Regenerate.\n\t* config/s390/s390-builtins.def (s390_vfmaxdb_4, s390_vfmindb_4):\n\tChange flag from B_VXE to B_VX.\n\t(s390_vec_min_dbl): Remove B_VXE flag.\n\ngcc/testsuite/ChangeLog:\n\n2017-10-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/82317\n\t* gcc.target/s390/zvector/pr82317.c: New test.\n\nFrom-SVN: r253480", "tree": {"sha": "220413c5fde8142ea2819958451e6004c3df1d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/220413c5fde8142ea2819958451e6004c3df1d12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fcb90c624db95f1b483e0d403e95215d4732bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fcb90c624db95f1b483e0d403e95215d4732bd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fcb90c624db95f1b483e0d403e95215d4732bd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fcb90c624db95f1b483e0d403e95215d4732bd6/comments", "author": null, "committer": null, "parents": [{"sha": "3d28cdc2cdab4fca880e737602c29e08ba01ef76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d28cdc2cdab4fca880e737602c29e08ba01ef76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d28cdc2cdab4fca880e737602c29e08ba01ef76"}], "stats": {"total": 112, "additions": 72, "deletions": 40}, "files": [{"sha": "a69364a896f2716b08163203ea681f445b8390d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fcb90c624db95f1b483e0d403e95215d4732bd6", "patch": "@@ -1,3 +1,11 @@\n+2017-10-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tPR target/82317\n+\t* config/s390/s390-builtin-types.def: Regenerate.\n+\t* config/s390/s390-builtins.def (s390_vfmaxdb_4, s390_vfmindb_4):\n+\tChange flag from B_VXE to B_VX.\n+\t(s390_vec_min_dbl): Remove B_VXE flag.\n+\n 2017-10-06  Richard Biener  <rguenther@suse.de>\n \n \t* graphite-isl-ast-to-gimple.c: Include ssa.h and tree-ssa.h."}, {"sha": "b466aa13e638fd358655ebc9a8f895a26528db57", "filename": "gcc/config/s390/s390-builtin-types.def", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def?ref=6fcb90c624db95f1b483e0d403e95215d4732bd6", "patch": "@@ -54,74 +54,74 @@\n \t       s390_builtin_types[T6])\n DEF_TYPE (BT_INT, integer_type_node, 0)\n DEF_TYPE (BT_VOID, void_type_node, 0)\n-DEF_TYPE (BT_ULONG, long_unsigned_type_node, 0)\n DEF_TYPE (BT_UINT64, c_uint64_type_node, 0)\n-DEF_TYPE (BT_INT128, intTI_type_node, 0)\n DEF_TYPE (BT_UINT, unsigned_type_node, 0)\n DEF_TYPE (BT_VOIDCONST, void_type_node, 1)\n-DEF_TYPE (BT_USHORTCONST, short_unsigned_type_node, 1)\n-DEF_TYPE (BT_SHORTCONST, short_integer_type_node, 1)\n-DEF_TYPE (BT_UCHARCONST, unsigned_char_type_node, 1)\n DEF_TYPE (BT_INTCONST, integer_type_node, 1)\n-DEF_TYPE (BT_SCHARCONST, signed_char_type_node, 1)\n DEF_TYPE (BT_UCHAR, unsigned_char_type_node, 0)\n-DEF_TYPE (BT_SHORT, short_integer_type_node, 0)\n-DEF_TYPE (BT_LONG, long_integer_type_node, 0)\n-DEF_TYPE (BT_SCHAR, signed_char_type_node, 0)\n-DEF_TYPE (BT_USHORT, short_unsigned_type_node, 0)\n-DEF_TYPE (BT_ULONGLONG, long_long_unsigned_type_node, 0)\n-DEF_TYPE (BT_DBLCONST, double_type_node, 1)\n+DEF_TYPE (BT_UINTCONST, unsigned_type_node, 1)\n DEF_TYPE (BT_FLT, float_type_node, 0)\n-DEF_TYPE (BT_DBL, double_type_node, 0)\n DEF_TYPE (BT_FLTCONST, float_type_node, 1)\n-DEF_TYPE (BT_ULONGLONGCONST, long_long_unsigned_type_node, 1)\n DEF_TYPE (BT_LONGLONG, long_long_integer_type_node, 0)\n+DEF_TYPE (BT_ULONGLONG, long_long_unsigned_type_node, 0)\n DEF_TYPE (BT_LONGLONGCONST, long_long_integer_type_node, 1)\n-DEF_TYPE (BT_UINTCONST, unsigned_type_node, 1)\n-DEF_VECTOR_TYPE (BT_UV2DI, BT_ULONGLONG, 2)\n-DEF_VECTOR_TYPE (BT_V2DI, BT_LONGLONG, 2)\n-DEF_VECTOR_TYPE (BT_V8HI, BT_SHORT, 8)\n+DEF_TYPE (BT_ULONGLONGCONST, long_long_unsigned_type_node, 1)\n+DEF_TYPE (BT_DBL, double_type_node, 0)\n+DEF_TYPE (BT_DBLCONST, double_type_node, 1)\n+DEF_TYPE (BT_USHORT, short_unsigned_type_node, 0)\n+DEF_TYPE (BT_SCHAR, signed_char_type_node, 0)\n+DEF_TYPE (BT_LONG, long_integer_type_node, 0)\n+DEF_TYPE (BT_SHORT, short_integer_type_node, 0)\n+DEF_TYPE (BT_SCHARCONST, signed_char_type_node, 1)\n+DEF_TYPE (BT_UCHARCONST, unsigned_char_type_node, 1)\n+DEF_TYPE (BT_SHORTCONST, short_integer_type_node, 1)\n+DEF_TYPE (BT_USHORTCONST, short_unsigned_type_node, 1)\n+DEF_TYPE (BT_INT128, intTI_type_node, 0)\n+DEF_TYPE (BT_ULONG, long_unsigned_type_node, 0)\n DEF_VECTOR_TYPE (BT_V4SI, BT_INT, 4)\n DEF_VECTOR_TYPE (BT_UV4SI, BT_UINT, 4)\n-DEF_VECTOR_TYPE (BT_V16QI, BT_SCHAR, 16)\n-DEF_VECTOR_TYPE (BT_UV8HI, BT_USHORT, 8)\n DEF_VECTOR_TYPE (BT_V4SF, BT_FLT, 4)\n+DEF_VECTOR_TYPE (BT_V2DI, BT_LONGLONG, 2)\n+DEF_VECTOR_TYPE (BT_UV2DI, BT_ULONGLONG, 2)\n DEF_VECTOR_TYPE (BT_V2DF, BT_DBL, 2)\n DEF_VECTOR_TYPE (BT_UV16QI, BT_UCHAR, 16)\n-DEF_POINTER_TYPE (BT_USHORTPTR, BT_USHORT)\n-DEF_POINTER_TYPE (BT_UINTCONSTPTR, BT_UINTCONST)\n+DEF_VECTOR_TYPE (BT_UV8HI, BT_USHORT, 8)\n+DEF_VECTOR_TYPE (BT_V16QI, BT_SCHAR, 16)\n+DEF_VECTOR_TYPE (BT_V8HI, BT_SHORT, 8)\n DEF_POINTER_TYPE (BT_VOIDPTR, BT_VOID)\n-DEF_POINTER_TYPE (BT_ULONGLONGCONSTPTR, BT_ULONGLONGCONST)\n DEF_POINTER_TYPE (BT_UINT64PTR, BT_UINT64)\n+DEF_POINTER_TYPE (BT_VOIDCONSTPTR, BT_VOIDCONST)\n+DEF_POINTER_TYPE (BT_INTCONSTPTR, BT_INTCONST)\n+DEF_POINTER_TYPE (BT_UINTCONSTPTR, BT_UINTCONST)\n DEF_POINTER_TYPE (BT_FLTCONSTPTR, BT_FLTCONST)\n-DEF_POINTER_TYPE (BT_USHORTCONSTPTR, BT_USHORTCONST)\n+DEF_POINTER_TYPE (BT_LONGLONGCONSTPTR, BT_LONGLONGCONST)\n+DEF_POINTER_TYPE (BT_ULONGLONGCONSTPTR, BT_ULONGLONGCONST)\n+DEF_POINTER_TYPE (BT_DBLCONSTPTR, BT_DBLCONST)\n DEF_POINTER_TYPE (BT_SCHARPTR, BT_SCHAR)\n DEF_POINTER_TYPE (BT_UCHARPTR, BT_UCHAR)\n-DEF_POINTER_TYPE (BT_VOIDCONSTPTR, BT_VOIDCONST)\n-DEF_POINTER_TYPE (BT_LONGLONGCONSTPTR, BT_LONGLONGCONST)\n DEF_POINTER_TYPE (BT_SHORTPTR, BT_SHORT)\n-DEF_POINTER_TYPE (BT_DBLCONSTPTR, BT_DBLCONST)\n+DEF_POINTER_TYPE (BT_USHORTPTR, BT_USHORT)\n DEF_POINTER_TYPE (BT_INTPTR, BT_INT)\n DEF_POINTER_TYPE (BT_UINTPTR, BT_UINT)\n DEF_POINTER_TYPE (BT_LONGLONGPTR, BT_LONGLONG)\n DEF_POINTER_TYPE (BT_ULONGLONGPTR, BT_ULONGLONG)\n-DEF_POINTER_TYPE (BT_INTCONSTPTR, BT_INTCONST)\n+DEF_POINTER_TYPE (BT_FLTPTR, BT_FLT)\n DEF_POINTER_TYPE (BT_DBLPTR, BT_DBL)\n-DEF_POINTER_TYPE (BT_SHORTCONSTPTR, BT_SHORTCONST)\n-DEF_POINTER_TYPE (BT_UCHARCONSTPTR, BT_UCHARCONST)\n DEF_POINTER_TYPE (BT_SCHARCONSTPTR, BT_SCHARCONST)\n-DEF_POINTER_TYPE (BT_FLTPTR, BT_FLT)\n-DEF_DISTINCT_TYPE (BT_BCHAR, BT_UCHAR)\n-DEF_DISTINCT_TYPE (BT_BSHORT, BT_USHORT)\n+DEF_POINTER_TYPE (BT_UCHARCONSTPTR, BT_UCHARCONST)\n+DEF_POINTER_TYPE (BT_SHORTCONSTPTR, BT_SHORTCONST)\n+DEF_POINTER_TYPE (BT_USHORTCONSTPTR, BT_USHORTCONST)\n DEF_DISTINCT_TYPE (BT_BINT, BT_UINT)\n DEF_DISTINCT_TYPE (BT_BLONGLONG, BT_ULONGLONG)\n-DEF_OPAQUE_VECTOR_TYPE (BT_BV8HI, BT_BSHORT, 8)\n+DEF_DISTINCT_TYPE (BT_BCHAR, BT_UCHAR)\n+DEF_DISTINCT_TYPE (BT_BSHORT, BT_USHORT)\n DEF_OPAQUE_VECTOR_TYPE (BT_OV4SI, BT_INT, 4)\n-DEF_OPAQUE_VECTOR_TYPE (BT_BV16QI, BT_BCHAR, 16)\n-DEF_OPAQUE_VECTOR_TYPE (BT_BV2DI, BT_BLONGLONG, 2)\n-DEF_OPAQUE_VECTOR_TYPE (BT_OV2DI, BT_LONGLONG, 2)\n DEF_OPAQUE_VECTOR_TYPE (BT_OUV4SI, BT_UINT, 4)\n DEF_OPAQUE_VECTOR_TYPE (BT_BV4SI, BT_BINT, 4)\n+DEF_OPAQUE_VECTOR_TYPE (BT_BV2DI, BT_BLONGLONG, 2)\n+DEF_OPAQUE_VECTOR_TYPE (BT_BV16QI, BT_BCHAR, 16)\n+DEF_OPAQUE_VECTOR_TYPE (BT_BV8HI, BT_BSHORT, 8)\n+DEF_OPAQUE_VECTOR_TYPE (BT_OV2DI, BT_LONGLONG, 2)\n DEF_FN_TYPE_0 (BT_FN_INT, BT_INT)\n DEF_FN_TYPE_0 (BT_FN_UINT, BT_UINT)\n DEF_FN_TYPE_1 (BT_FN_INT_INT, BT_INT, BT_INT)"}, {"sha": "7007e388dda5b37327123cb59dd3fcea4636a38e", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=6fcb90c624db95f1b483e0d403e95215d4732bd6", "patch": "@@ -1701,7 +1701,7 @@ B_DEF      (s390_vmxlg,                 umaxv2di3,          0,\n B_DEF      (s390_vfmaxsb,               vfmaxv4sf,          0,                  B_VXE,              O3_U4,              BT_FN_V4SF_V4SF_V4SF_INT)\n B_DEF      (s390_vfmaxdb,               vfmaxv2df,          0,                  B_VXE,              O3_U4,              BT_FN_V2DF_V2DF_V2DF_INT)\n B_DEF      (s390_vfmaxsb_4,             smaxv4sf3,          0,                  B_INT | B_VXE,      0,                  BT_FN_V4SF_V4SF_V4SF)\n-B_DEF      (s390_vfmaxdb_4,             smaxv2df3,          0,                  B_INT | B_VXE,      0,                  BT_FN_V2DF_V2DF_V2DF)\n+B_DEF      (s390_vfmaxdb_4,             smaxv2df3,          0,                  B_INT | B_VX,       0,                  BT_FN_V2DF_V2DF_V2DF)\n \n OB_DEF     (s390_vec_min,               s390_vec_min_s8_a,  s390_vec_min_dbl,   B_VX,               BT_FN_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_min_s8_a,          s390_vmnb,          B_DEP,              0,                  BT_OV_V16QI_BV16QI_V16QI)\n@@ -1729,7 +1729,7 @@ OB_DEF_VAR (s390_vec_min_u64_a,         s390_vmnlg,         B_DEP,\n OB_DEF_VAR (s390_vec_min_u64_b,         s390_vmnlg,         0,                  0,                  BT_OV_UV2DI_UV2DI_UV2DI)\n OB_DEF_VAR (s390_vec_min_u64_c,         s390_vmnlg,         B_DEP,              0,                  BT_OV_UV2DI_UV2DI_BV2DI)\n OB_DEF_VAR (s390_vec_min_flt,           s390_vfminsb_4,     B_VXE,              0,                  BT_OV_V4SF_V4SF_V4SF)\n-OB_DEF_VAR (s390_vec_min_dbl,           s390_vfmindb_4,     B_VXE,              0,                  BT_OV_V2DF_V2DF_V2DF)\n+OB_DEF_VAR (s390_vec_min_dbl,           s390_vfmindb_4,     0,                  0,                  BT_OV_V2DF_V2DF_V2DF)\n \n B_DEF      (s390_vmnb,                  sminv16qi3,         0,                  B_VX,               0,                  BT_FN_V16QI_BV16QI_V16QI)\n B_DEF      (s390_vmnlb,                 uminv16qi3,         0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI)\n@@ -1742,7 +1742,7 @@ B_DEF      (s390_vmnlg,                 uminv2di3,          0,\n B_DEF      (s390_vfminsb,               vfminv4sf,          0,                  B_VXE,              O3_U4,              BT_FN_V4SF_V4SF_V4SF_INT)\n B_DEF      (s390_vfmindb,               vfminv2df,          0,                  B_VXE,              O3_U4,              BT_FN_V2DF_V2DF_V2DF_INT)\n B_DEF      (s390_vfminsb_4,             sminv4sf3,          0,                  B_INT | B_VXE,      0,                  BT_FN_V4SF_V4SF_V4SF) /* vfminsb */\n-B_DEF      (s390_vfmindb_4,             sminv2df3,          0,                  B_INT | B_VXE,      0,                  BT_FN_V2DF_V2DF_V2DF) /* vfmindb */\n+B_DEF      (s390_vfmindb_4,             sminv2df3,          0,                  B_INT | B_VX,       0,                  BT_FN_V2DF_V2DF_V2DF) /* vfmindb */\n \n OB_DEF     (s390_vec_mladd,             s390_vec_mladd_u8,  s390_vec_mladd_s32_c,B_VX,              BT_FN_OV4SI_OV4SI_OV4SI_OV4SI)\n OB_DEF_VAR (s390_vec_mladd_u8,          s390_vmalb,         0,                  0,                  BT_OV_UV16QI_UV16QI_UV16QI_UV16QI)"}, {"sha": "181935b4003afc2dd1777ff298a82bc0a0cd133e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fcb90c624db95f1b483e0d403e95215d4732bd6", "patch": "@@ -1,3 +1,8 @@\n+2017-10-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tPR target/82317\n+\t* gcc.target/s390/zvector/pr82317.c: New test.\n+\n 2017-10-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82422"}, {"sha": "4b7cc834043a002c41f50ff695a2242481d2a3c3", "filename": "gcc/testsuite/gcc.target/s390/zvector/pr82317.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fpr82317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fcb90c624db95f1b483e0d403e95215d4732bd6/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fpr82317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fpr82317.c?ref=6fcb90c624db95f1b483e0d403e95215d4732bd6", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-march=z13 -mzarch -mzvector\" } */\n+\n+/* With IBM z14 a hardware instruction for floating point min and max\n+   has been added while for IBM z13 we emulated min/max for vector\n+   double with compare and select.  This testcase makes sure that we\n+   fall back to the emulated variant when compiling for z13.  */\n+\n+#include <vecintrin.h>\n+\n+vector double\n+foo (vector double a, vector double b) {\n+  return vec_min (a, b);\n+}\n+\n+vector double\n+bar (vector double a, vector double b) {\n+  return vec_max (a, b);\n+}"}]}