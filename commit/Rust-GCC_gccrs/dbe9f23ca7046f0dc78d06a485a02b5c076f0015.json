{"sha": "dbe9f23ca7046f0dc78d06a485a02b5c076f0015", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlOWYyM2NhNzA0NmYwZGM3OGQwNmE0ODVhMDJiNWMwNzZmMDAxNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-11-24T14:00:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-24T14:00:43Z"}, "message": "re PR lto/46606 (ICE in input_gimple_stmt in lto1)\n\n2010-11-24  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/46606\n\t* lto-streamer-in.c (input_gimple_stmt): When we cannot find\n\ta FIELD_DECL that is type correct issue a warning and fixup\n\twith a VIEW_CONVERT_EXPR.\n\nFrom-SVN: r167115", "tree": {"sha": "f53ce93547fbf3759ca2ed7a8b9faa7bd83d993f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f53ce93547fbf3759ca2ed7a8b9faa7bd83d993f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe9f23ca7046f0dc78d06a485a02b5c076f0015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe9f23ca7046f0dc78d06a485a02b5c076f0015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe9f23ca7046f0dc78d06a485a02b5c076f0015", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe9f23ca7046f0dc78d06a485a02b5c076f0015/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae758cb2fdb948ea76ea8896d3f9115fbb60b315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae758cb2fdb948ea76ea8896d3f9115fbb60b315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae758cb2fdb948ea76ea8896d3f9115fbb60b315"}], "stats": {"total": 65, "additions": 54, "deletions": 11}, "files": [{"sha": "bacb39c6d439698989d6f1bde8fb30750f4f4504", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe9f23ca7046f0dc78d06a485a02b5c076f0015/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe9f23ca7046f0dc78d06a485a02b5c076f0015/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbe9f23ca7046f0dc78d06a485a02b5c076f0015", "patch": "@@ -1,3 +1,10 @@\n+2010-11-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/46606\n+\t* lto-streamer-in.c (input_gimple_stmt): When we cannot find\n+\ta FIELD_DECL that is type correct issue a warning and fixup\n+\twith a VIEW_CONVERT_EXPR.\n+\n 2010-11-24  Basile Starynkevitch  <basile@starynkevitch.net>\n \n \t* doc/invoke.texi (Options for Debugging Your Program or GCC):"}, {"sha": "4d36f0675920043e93ff11d8b37c6097609eee49", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe9f23ca7046f0dc78d06a485a02b5c076f0015/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe9f23ca7046f0dc78d06a485a02b5c076f0015/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=dbe9f23ca7046f0dc78d06a485a02b5c076f0015", "patch": "@@ -956,25 +956,61 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n \t      if (TREE_CODE (op) == COMPONENT_REF)\n \t\t{\n \t\t  tree field, type, tem;\n+\t\t  tree closest_match = NULL_TREE;\n \t\t  field = TREE_OPERAND (op, 1);\n \t\t  type = DECL_CONTEXT (field);\n \t\t  for (tem = TYPE_FIELDS (type); tem; tem = TREE_CHAIN (tem))\n \t\t    {\n-\t\t      if (tem == field\n-\t\t\t  || (gimple_types_compatible_p (TREE_TYPE (tem),\n-\t\t\t\t\t\t\t TREE_TYPE (field),\n-\t\t\t\t\t\t\t GTC_DIAG)\n-\t\t\t      && DECL_NONADDRESSABLE_P (tem)\n-\t\t\t\t == DECL_NONADDRESSABLE_P (field)\n-\t\t\t      && gimple_compare_field_offset (tem, field)))\n+\t\t      if (tem == field)\n \t\t\tbreak;\n+\t\t      if (DECL_NONADDRESSABLE_P (tem)\n+\t\t\t  == DECL_NONADDRESSABLE_P (field)\n+\t\t\t  && gimple_compare_field_offset (tem, field))\n+\t\t\t{\n+\t\t\t  if (gimple_types_compatible_p (TREE_TYPE (tem),\n+\t\t\t\t\t\t\t TREE_TYPE (field),\n+\t\t\t\t\t\t\t GTC_DIAG))\n+\t\t\t    break;\n+\t\t\t  else\n+\t\t\t    closest_match = tem;\n+\t\t\t}\n \t\t    }\n \t\t  /* In case of type mismatches across units we can fail\n \t\t     to unify some types and thus not find a proper\n-\t\t     field-decl here.  So only assert here if checking\n-\t\t     is enabled.  */\n-\t\t  gcc_checking_assert (tem != NULL_TREE);\n-\t\t  if (tem != NULL_TREE)\n+\t\t     field-decl here.  */\n+\t\t  if (tem == NULL_TREE)\n+\t\t    {\n+\t\t      /* Thus, emit a ODR violation warning.  */\n+\t\t      if (warning_at (gimple_location (stmt), 0,\n+\t\t\t\t      \"use of type %<%E%> with two mismatching \"\n+\t\t\t\t      \"declarations at field %<%E%>\",\n+\t\t\t\t      type, TREE_OPERAND (op, 1)))\n+\t\t\t{\n+\t\t\t  if (TYPE_FIELDS (type))\n+\t\t\t    inform (DECL_SOURCE_LOCATION (TYPE_FIELDS (type)),\n+\t\t\t\t    \"original type declared here\");\n+\t\t\t  inform (DECL_SOURCE_LOCATION (TREE_OPERAND (op, 1)),\n+\t\t\t\t  \"field in mismatching type declared here\");\n+\t\t\t  if (TYPE_NAME (TREE_TYPE (field))\n+\t\t\t      && (TREE_CODE (TYPE_NAME (TREE_TYPE (field)))\n+\t\t\t\t  == TYPE_DECL))\n+\t\t\t    inform (DECL_SOURCE_LOCATION\n+\t\t\t\t      (TYPE_NAME (TREE_TYPE (field))),\n+\t\t\t\t    \"type of field declared here\");\n+\t\t\t  if (closest_match\n+\t\t\t      && TYPE_NAME (TREE_TYPE (closest_match))\n+\t\t\t      && (TREE_CODE (TYPE_NAME\n+\t\t\t\t   (TREE_TYPE (closest_match))) == TYPE_DECL))\n+\t\t\t    inform (DECL_SOURCE_LOCATION\n+\t\t\t\t      (TYPE_NAME (TREE_TYPE (closest_match))),\n+\t\t\t\t    \"type of mismatching field declared here\");\n+\t\t\t}\n+\t\t      /* And finally fixup the types.  */\n+\t\t      TREE_OPERAND (op, 0)\n+\t\t\t= build1 (VIEW_CONVERT_EXPR, type,\n+\t\t\t\t  TREE_OPERAND (op, 0));\n+\t\t    }\n+\t\t  else\n \t\t    TREE_OPERAND (op, 1) = tem;\n \t\t}\n "}]}