{"sha": "02221bed3c4912d59a865fa69bf12f54c980f957", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIyMjFiZWQzYzQ5MTJkNTlhODY1ZmE2OWJmMTJmNTRjOTgwZjk1Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-07T09:30:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-07T09:30:05Z"}, "message": "Fix corner case issue with discriminated record type\n\nThe compiler generates code that writes too much data into a component\nof a record subject to a representation clause, when the source of the\nassignment is a call to a function that returns a discriminated record\ntype with default discriminants, variable size and a statically known\nupper bound for this size, and the size of the component given by the\nrepresentation clause is lower than the value of this bound rounded up\nto the alignment.\n\ngcc/ada/ChangeLog:\n\t* gcc-interface/trans.c (Call_to_gnu): Also create a temporary for\n\tthe return value if the LHS is a bit-field and the return type is\n\ta type padding a self-referential type.\n\t(gnat_to_gnu): Do not remove the padding on the result if it is too\n\tsmall with regard to the natural padding size.", "tree": {"sha": "67907c13a70d472e0899f65b4528d0a27de2b127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67907c13a70d472e0899f65b4528d0a27de2b127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02221bed3c4912d59a865fa69bf12f54c980f957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02221bed3c4912d59a865fa69bf12f54c980f957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02221bed3c4912d59a865fa69bf12f54c980f957", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02221bed3c4912d59a865fa69bf12f54c980f957/comments", "author": null, "committer": null, "parents": [{"sha": "090abb0f51b5cf8ce46fb686bc4b968f6e2055be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090abb0f51b5cf8ce46fb686bc4b968f6e2055be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/090abb0f51b5cf8ce46fb686bc4b968f6e2055be"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "07e5a285b2b0ead1cbcc4bba354707cdfcc1b691", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02221bed3c4912d59a865fa69bf12f54c980f957/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02221bed3c4912d59a865fa69bf12f54c980f957/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=02221bed3c4912d59a865fa69bf12f54c980f957", "patch": "@@ -4513,7 +4513,11 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  and the return type has variable size, because the gimplifier\n \t  doesn't handle these cases.\n \n-       4. There is no target and we have misaligned In Out or Out parameters\n+       4. There is a target which is a bit-field and the function returns an\n+\t  unconstrained record type with default discriminant, because the\n+\t  return may copy more data than the bit-field can contain.\n+\n+       5. There is no target and we have misaligned In Out or Out parameters\n \t  passed by reference, because we need to preserve the return value\n \t  before copying back the parameters.  However, in this case, we'll\n \t  defer creating the temporary, see below.\n@@ -4536,7 +4540,11 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t\t  || (TREE_CODE (TREE_TYPE (gnu_target)) == ARRAY_TYPE\n \t\t      && TREE_CODE (TYPE_SIZE (TREE_TYPE (gnu_target)))\n \t\t\t == INTEGER_CST))\n-\t      && TREE_CODE (TYPE_SIZE (gnu_result_type)) != INTEGER_CST)))\n+\t      && TREE_CODE (TYPE_SIZE (gnu_result_type)) != INTEGER_CST)\n+\t  || (gnu_target\n+\t      && TREE_CODE (gnu_target) == COMPONENT_REF\n+\t      && DECL_BIT_FIELD (TREE_OPERAND (gnu_target, 1))\n+\t      && type_is_padding_self_referential (gnu_result_type))))\n     {\n       gnu_retval = create_temporary (\"R\", gnu_result_type);\n       DECL_RETURN_VALUE_P (gnu_retval) = 1;\n@@ -8249,8 +8257,10 @@ gnat_to_gnu (Node_Id gnat_node)\n       /* Remove padding only if the inner object is of self-referential\n \t size: in that case it must be an object of unconstrained type\n \t with a default discriminant and we want to avoid copying too\n-\t much data.  */\n-      if (type_is_padding_self_referential (TREE_TYPE (gnu_result)))\n+\t much data.  But do not remove it if it is already too small.  */\n+      if (type_is_padding_self_referential (TREE_TYPE (gnu_result))\n+\t  && !(TREE_CODE (gnu_result) == COMPONENT_REF\n+\t       && DECL_BIT_FIELD (TREE_OPERAND (gnu_result, 1))))\n \tgnu_result = convert (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (gnu_result))),\n \t\t\t      gnu_result);\n     }"}]}