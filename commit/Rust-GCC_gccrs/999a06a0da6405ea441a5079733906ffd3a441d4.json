{"sha": "999a06a0da6405ea441a5079733906ffd3a441d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5YTA2YTBkYTY0MDVlYTQ0MWE1MDc5NzMzOTA2ZmZkM2E0NDFkNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-07-09T09:33:31Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-07-09T09:33:31Z"}, "message": "[multiple changes]\n\n2005-07-07  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n\t    Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR libfortran/22217\n\t* io/write.c (extract_unit):  New function; extract\n\tints as unsigned signed int of the correct size.\n\t* io/write.c (write_int):  Use it.\n\t* runtime/error.c:  Adjust copyright years.\n\tAdjust size of buffer to maximum that can occur.\n\n2005-07-07  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR libfortran/22217\n\t* gfortran.dg/negative-z-descriptor.f90:  New test.\n\nFrom-SVN: r101829", "tree": {"sha": "4b8d9c37e024396926922d352c6ef52a2dc2bd68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b8d9c37e024396926922d352c6ef52a2dc2bd68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/999a06a0da6405ea441a5079733906ffd3a441d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999a06a0da6405ea441a5079733906ffd3a441d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999a06a0da6405ea441a5079733906ffd3a441d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999a06a0da6405ea441a5079733906ffd3a441d4/comments", "author": null, "committer": null, "parents": [{"sha": "4a8ce6ce048eee4d123115c63423c7a0aefafeea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8ce6ce048eee4d123115c63423c7a0aefafeea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8ce6ce048eee4d123115c63423c7a0aefafeea"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "7717a13dd19c003b51b30a70c1ef9c93d9da191b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999a06a0da6405ea441a5079733906ffd3a441d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999a06a0da6405ea441a5079733906ffd3a441d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=999a06a0da6405ea441a5079733906ffd3a441d4", "patch": "@@ -1,3 +1,8 @@\n+2005-07-09  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/22217\n+\t* gfortran.dg/negative-z-descriptor.f90:  New test.\n+\n 2005-07-08  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/22329"}, {"sha": "1ad3a32b3a3a424f271cb03c5bae6b73c3f545dd", "filename": "gcc/testsuite/gfortran.dg/negative-z-descriptor.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999a06a0da6405ea441a5079733906ffd3a441d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative-z-descriptor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999a06a0da6405ea441a5079733906ffd3a441d4/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative-z-descriptor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative-z-descriptor.f90?ref=999a06a0da6405ea441a5079733906ffd3a441d4", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+! PR 22217:  Z edit descriptor with negative numbers used to give lots of *\n+\n+program main\n+  character(len=70) line\n+  character(len=20) fmt\n+  write(unit=line,fmt='(Z4)') -1_1\n+  if (line(1:4) .ne. '  FF') call abort\n+  write(unit=line,fmt='(Z5)') -1_2\n+  if (line(1:5) .ne. ' FFFF') call abort\n+  write(unit=line,fmt='(Z9)') -1_4\n+  if (line(1:9) .ne. ' FFFFFFFF') call abort\n+  write(unit=line,fmt='(Z17)') -2_8\n+  if (line(1:17) .ne. ' FFFFFFFFFFFFFFFE') call abort\n+  write(unit=line,fmt='(Z2)') 10_8\n+  if (line(1:2) .ne. ' A') call abort\n+\n+  write(unit=line,fmt='(Z8)') -43_8\n+  if (line(1:1) .ne. '*') call abort\n+\n+  write(unit=line,fmt='(B65)') -1_8\n+  if (line(1:2) .ne. ' 1') call abort\n+  if (line(64:66) .ne. '11 ') call abort\n+\n+  write(unit=line,fmt='(O4)') -2_1\n+  if (line(1:4) .ne. ' 376') call abort\n+end"}, {"sha": "a73202de3a25b77bd5aa9bf4d5e80884b61e9c5e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999a06a0da6405ea441a5079733906ffd3a441d4/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999a06a0da6405ea441a5079733906ffd3a441d4/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=999a06a0da6405ea441a5079733906ffd3a441d4", "patch": "@@ -1,3 +1,13 @@\n+2005-07-09  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\t    Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/22217\n+\t* io/write.c (extract_unit):  New function; extract\n+\tints as unsigned signed int of the correct size.\n+\t* io/write.c (write_int):  Use it.\n+\t* runtime/error.c:  Adjust copyright years.\n+\tAdjust size of buffer to maximum that can occur.\n+\n 2005-07-07  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* libgfortran.h (GFC_ARRAY_DESCRIPTOR): Replace 'type *base' by"}, {"sha": "5603d6d91fb0082d63a37bbc650edbbb14ad7492", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999a06a0da6405ea441a5079733906ffd3a441d4/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999a06a0da6405ea441a5079733906ffd3a441d4/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=999a06a0da6405ea441a5079733906ffd3a441d4", "patch": "@@ -102,6 +102,40 @@ extract_int (const void *p, int len)\n   return i;\n }\n \n+static GFC_UINTEGER_LARGEST\n+extract_uint (const void *p, int len)\n+{\n+  GFC_UINTEGER_LARGEST i = 0;\n+\n+  if (p == NULL)\n+    return i;\n+\n+  switch (len)\n+    {\n+    case 1:\n+      i = (GFC_UINTEGER_1) *((const GFC_INTEGER_1 *) p);\n+      break;\n+    case 2:\n+      i = (GFC_UINTEGER_2) *((const GFC_INTEGER_2 *) p);\n+      break;\n+    case 4:\n+      i = (GFC_UINTEGER_4) *((const GFC_INTEGER_4 *) p);\n+      break;\n+    case 8:\n+      i = (GFC_UINTEGER_8) *((const GFC_INTEGER_8 *) p);\n+      break;\n+#ifdef HAVE_GFC_INTEGER_16\n+    case 16:\n+      i = (GFC_UINTEGER_16) *((const GFC_INTEGER_16 *) p);\n+      break;\n+#endif\n+    default:\n+      internal_error (\"bad integer kind\");\n+    }\n+\n+  return i;\n+}\n+\n static GFC_REAL_LARGEST\n extract_real (const void *p, int len)\n {\n@@ -802,7 +836,7 @@ write_int (fnode *f, const char *source, int len,\n   w = f->u.integer.w;\n   m = f->u.integer.m;\n \n-  n = extract_int (source, len);\n+  n = extract_uint (source, len);\n \n   /* Special case:  */\n "}, {"sha": "ff91b96bd3f064bf9a43195b680d142bb32e2f79", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999a06a0da6405ea441a5079733906ffd3a441d4/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999a06a0da6405ea441a5079733906ffd3a441d4/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=999a06a0da6405ea441a5079733906ffd3a441d4", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002-2003 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -63,7 +63,8 @@ iexport_data(filename);\n unsigned line = 0;\n iexport_data(line);\n \n-static char buffer[32];\t\t/* buffer for integer/ascii conversions */\n+/* buffer for integer/ascii conversions.  */\n+static char buffer[sizeof (GFC_UINTEGER_LARGEST) * 8 + 1];\n \n \n /* Returns a pointer to a static buffer. */"}]}