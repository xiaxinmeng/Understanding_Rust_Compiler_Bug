{"sha": "27eef9cececccd37254c9106b02fd965369650eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdlZWY5Y2VjZWNjY2QzNzI1NGM5MTA2YjAyZmQ5NjUzNjk2NTBlYg==", "commit": {"author": {"name": "John Carr", "email": "jfc@mit.edu", "date": "1998-04-22T12:57:04Z"}, "committer": {"name": "John Carr", "email": "jfc@gcc.gnu.org", "date": "1998-04-22T12:57:04Z"}, "message": "emit-rtl.c (gen_highpart): The high part of a CONST_INT is not zero if...\n\n\t* emit-rtl.c (gen_highpart): The high part of a CONST_INT is not zero\n\tif HOST_BITS_PER_WIDE_INT is larger than BITS_PER_WORD.\n\t* final.c (split_double): Sign extend both halves of a split CONST_INT.\n\nFrom-SVN: r19375", "tree": {"sha": "37289efcae710e9b3892cb4a63490d76a9c2b2c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37289efcae710e9b3892cb4a63490d76a9c2b2c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27eef9cececccd37254c9106b02fd965369650eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eef9cececccd37254c9106b02fd965369650eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27eef9cececccd37254c9106b02fd965369650eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eef9cececccd37254c9106b02fd965369650eb/comments", "author": {"login": "VoxSciurorum", "id": 60116679, "node_id": "MDQ6VXNlcjYwMTE2Njc5", "avatar_url": "https://avatars.githubusercontent.com/u/60116679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VoxSciurorum", "html_url": "https://github.com/VoxSciurorum", "followers_url": "https://api.github.com/users/VoxSciurorum/followers", "following_url": "https://api.github.com/users/VoxSciurorum/following{/other_user}", "gists_url": "https://api.github.com/users/VoxSciurorum/gists{/gist_id}", "starred_url": "https://api.github.com/users/VoxSciurorum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VoxSciurorum/subscriptions", "organizations_url": "https://api.github.com/users/VoxSciurorum/orgs", "repos_url": "https://api.github.com/users/VoxSciurorum/repos", "events_url": "https://api.github.com/users/VoxSciurorum/events{/privacy}", "received_events_url": "https://api.github.com/users/VoxSciurorum/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f4ea1dee8bf07bf77f7b7417fe77652be421afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f4ea1dee8bf07bf77f7b7417fe77652be421afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f4ea1dee8bf07bf77f7b7417fe77652be421afc"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "7f8466b948e44e69f4f25c0717999098559f6e39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27eef9cececccd37254c9106b02fd965369650eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27eef9cececccd37254c9106b02fd965369650eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27eef9cececccd37254c9106b02fd965369650eb", "patch": "@@ -1,3 +1,10 @@\n+Wed Apr 22 15:52:22 1998  John Carr  <jfc@mit.edu>\n+\n+\t* emit-rtl.c (gen_highpart): The high part of a CONST_INT is not zero\n+\tif HOST_BITS_PER_WIDE_INT is larger than BITS_PER_WORD.\n+\n+\t* final.c (split_double): Sign extend both halves of a split CONST_INT.\n+\n Wed Apr 22 10:42:45 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* mips.c (compute_frame_size): Change only argument to a HOST_WIDE_INT."}, {"sha": "0516927b161d48a09832169ab6bc08eb27cd4e10", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27eef9cececccd37254c9106b02fd965369650eb/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27eef9cececccd37254c9106b02fd965369650eb/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=27eef9cececccd37254c9106b02fd965369650eb", "patch": "@@ -720,14 +720,13 @@ gen_lowpart_common (mode, x)\n \t\t: GEN_INT (CONST_DOUBLE_LOW (x)));\n       else\n \t{\n-\t  /* MODE must be narrower than HOST_BITS_PER_INT.  */\n+\t  /* MODE must be narrower than HOST_BITS_PER_WIDE_INT.  */\n \t  int width = GET_MODE_BITSIZE (mode);\n \t  HOST_WIDE_INT val = (GET_CODE (x) == CONST_INT ? INTVAL (x)\n \t\t\t       : CONST_DOUBLE_LOW (x));\n \n-\t  if (((val & ((HOST_WIDE_INT) (-1) << (width - 1)))\n-\t       != ((HOST_WIDE_INT) (-1) << (width - 1))))\n-\t    val &= ((HOST_WIDE_INT) 1 << width) - 1;\n+\t  /* Sign extend to HOST_WIDE_INT.  */\n+\t  val = val << (HOST_BITS_PER_WIDE_INT - width) >> (HOST_BITS_PER_WIDE_INT - width);\n \n \t  return (GET_CODE (x) == CONST_INT && INTVAL (x) == val ? x\n \t\t  : GEN_INT (val));\n@@ -984,7 +983,11 @@ gen_highpart (mode, x)\n       )\n     return GEN_INT (CONST_DOUBLE_HIGH (x) & GET_MODE_MASK (mode));\n   else if (GET_CODE (x) == CONST_INT)\n-    return const0_rtx;\n+    {\n+      if (HOST_BITS_PER_WIDE_INT <= BITS_PER_WORD)\n+\treturn const0_rtx;\n+      return GEN_INT (INTVAL (x) >> (HOST_BITS_PER_WIDE_INT - BITS_PER_WORD));\n+    }\n   else if (GET_CODE (x) == MEM)\n     {\n       register int offset = 0;"}, {"sha": "393da70adebf83aaff338f80ca53c8349387d06b", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27eef9cececccd37254c9106b02fd965369650eb/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27eef9cececccd37254c9106b02fd965369650eb/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=27eef9cececccd37254c9106b02fd965369650eb", "patch": "@@ -3677,16 +3677,12 @@ split_double (value, first, second)\n       if (HOST_BITS_PER_WIDE_INT >= (2 * BITS_PER_WORD))\n \t{\n \t  /* In this case the CONST_INT holds both target words.\n-\t     Extract the bits from it into two word-sized pieces.  */\n+\t     Extract the bits from it into two word-sized pieces.\n+\t     Sign extend each half to HOST_WIDE_INT.  */\n \t  rtx low, high;\n-\t  HOST_WIDE_INT word_mask;\n-\t  /* Avoid warnings for shift count >= BITS_PER_WORD.  */\n-\t  int shift_count = BITS_PER_WORD - 1;\n-\n-\t  word_mask = (HOST_WIDE_INT) 1 << shift_count;\n-\t  word_mask |= word_mask - 1;\n-\t  low = GEN_INT (INTVAL (value) & word_mask);\n-\t  high = GEN_INT ((INTVAL (value) >> (shift_count + 1)) & word_mask);\n+\n+\t  low = GEN_INT (INTVAL (value) << (HOST_BITS_PER_WIDE_INT - BITS_PER_WORD) >> (HOST_BITS_PER_WIDE_INT - BITS_PER_WORD));\n+\t  high = GEN_INT (INTVAL (value) << (HOST_BITS_PER_WIDE_INT - 2 * BITS_PER_WORD) >> (HOST_BITS_PER_WIDE_INT - BITS_PER_WORD));\n \t  if (WORDS_BIG_ENDIAN)\n \t    {\n \t      *first = high;"}]}