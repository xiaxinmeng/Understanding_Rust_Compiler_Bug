{"sha": "e60b1e23626701939e8a2f0cf6fc1e48abdf867b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwYjFlMjM2MjY3MDE5MzllOGEyZjBjZjZmYzFlNDhhYmRmODY3Yg==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-01-31T14:39:38Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-01-31T14:40:52Z"}, "message": "middle-end: Fix logical shift truncation (PR rtl-optimization/91838)\n\nThis fixes a fall-out from a patch I had submitted two years ago which started\nallowing simplify-rtx to fold logical right shifts by offsets a followed by b\ninto >> (a + b).\n\nHowever this can generate inefficient code when the resulting shift count ends\nup being the same as the size of the shift mode.  This will create some\nundefined behavior on most platforms.\n\nThis patch changes to code to truncate to 0 if the shift amount goes out of\nrange.  Before my older patch this used to happen in combine when it saw the\ntwo shifts.  However since we combine them here combine never gets a chance to\ntruncate them.\n\nThe issue mostly affects GCC 8 and 9 since on 10 the back-end knows how to deal\nwith this shift constant but it's better to do the right thing in simplify-rtx.\n\nNote that this doesn't take care of the Arithmetic shift where you could replace\nthe constant with MODE_BITS (mode) - 1, but that's not a regression so punting it.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/91838\n\t* simplify-rtx.c (simplify_binary_operation_1): Update LSHIFTRT case\n\tto truncate if allowed or reject combination.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/91838\n\t* g++.dg/pr91838.C: New test.", "tree": {"sha": "1d340c50cc2e18ed0a5cc603e1ecc0ff27d29758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d340c50cc2e18ed0a5cc603e1ecc0ff27d29758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e60b1e23626701939e8a2f0cf6fc1e48abdf867b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60b1e23626701939e8a2f0cf6fc1e48abdf867b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e60b1e23626701939e8a2f0cf6fc1e48abdf867b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c63ae7f0b8bb86b25255d26425887b75489ab162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63ae7f0b8bb86b25255d26425887b75489ab162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63ae7f0b8bb86b25255d26425887b75489ab162"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "f44a09d782231d920faac91e9d290060849c98ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e60b1e23626701939e8a2f0cf6fc1e48abdf867b", "patch": "@@ -1,3 +1,9 @@\n+2020-01-31  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR rtl-optimization/91838\n+\t* simplify-rtx.c (simplify_binary_operation_1): Update LSHIFTRT case\n+\tto truncate if allowed or reject combination.\n+\n 2020-01-31  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* tree-ssa-loop-ivopts.c (get_iv): Use sizetype for zero-step."}, {"sha": "dd3d85156c3ed2bcde1b2926b317b29759944ddd", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e60b1e23626701939e8a2f0cf6fc1e48abdf867b", "patch": "@@ -3647,9 +3647,21 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t{\n \t  rtx tmp = gen_int_shift_amount\n \t    (inner_mode, INTVAL (XEXP (SUBREG_REG (op0), 1)) + INTVAL (op1));\n-\t  tmp = simplify_gen_binary (code, inner_mode,\n-\t\t\t\t     XEXP (SUBREG_REG (op0), 0),\n-\t\t\t\t     tmp);\n+\n+\t /* Combine would usually zero out the value when combining two\n+\t    local shifts and the range becomes larger or equal to the mode.\n+\t    However since we fold away one of the shifts here combine won't\n+\t    see it so we should immediately zero the result if it's out of\n+\t    range.  */\n+\t if (code == LSHIFTRT\n+\t     && INTVAL (tmp) >= GET_MODE_BITSIZE (inner_mode))\n+\t  tmp = const0_rtx;\n+\t else\n+\t   tmp = simplify_gen_binary (code,\n+\t\t\t\t      inner_mode,\n+\t\t\t\t      XEXP (SUBREG_REG (op0), 0),\n+\t\t\t\t      tmp);\n+\n \t  return lowpart_subreg (int_mode, tmp, inner_mode);\n \t}\n "}, {"sha": "8b1dcf238552e8a63d2ed70f1e69ee41796f2e3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e60b1e23626701939e8a2f0cf6fc1e48abdf867b", "patch": "@@ -1,3 +1,8 @@\n+2020-01-31  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR rtl-optimization/91838\n+\t* g++.dg/pr91838.C: New test.\n+\n 2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/malloc-1.c: Remove include of <string.h>."}, {"sha": "4dbaef05ce84770e1c8726dd501b40309a352aaf", "filename": "gcc/testsuite/g++.dg/pr91838.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr91838.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60b1e23626701939e8a2f0cf6fc1e48abdf867b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr91838.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr91838.C?ref=e60b1e23626701939e8a2f0cf6fc1e48abdf867b", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-skip-if \"\" { *-*-* } {-std=c++98} } */\n+\n+using T = unsigned char; // or ushort, or uint\n+using V [[gnu::vector_size(8)]] = T;\n+V f(V x) {\n+  return x >> 8 * sizeof(T);\n+}\n+\n+/* { dg-final { scan-assembler {pxor\\s+%xmm0,\\s+%xmm0} { target x86_64-*-* } } } */"}]}