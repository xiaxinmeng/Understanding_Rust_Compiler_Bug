{"sha": "9d2c0fad59745bf67aa6471e8c9e96c351f0de59", "node_id": "C_kwDOANBUbNoAKDlkMmMwZmFkNTk3NDViZjY3YWE2NDcxZThjOWU5NmMzNTFmMGRlNTk", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-03T21:21:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-02-07T23:31:54Z"}, "message": "analyzer: fixes to memcpy [PR103872]\n\nPR analyzer/103872 reports a failure of gcc.dg/analyzer/pr103526.c on\nriscv64-unknown-elf-gcc.  The issue is that I wrote the test on x86_64\nwhere a memcpy in the test is optimized to a write to a read/write pair,\nwhereas due to alignment differences the analyzer can see it as a\nmemcpy call, revealing problems with the analyzer's implementation\nof memcpy.\n\nThis patch reimplements region_model::impl_call_memcpy in terms of a\nget_store_value followed by a set_value, fixing the issue.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/103872\n\t* region-model-impl-calls.cc (region_model::impl_call_memcpy):\n\tReimplement in terms of a get_store_value followed by a set_value.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/103872\n\t* gcc.dg/analyzer/memcpy-1.c: Add alternate versions of test cases\n\tin which the calls to memcpy are hidden from the optimizer.  Add\n\tfurther test cases.\n\t* gcc.dg/analyzer/taint-size-1.c: Add test coverage for memcpy\n\twith tainted size.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "993b5fb8ad10b5445bcdbe248127fe75cf0aec4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/993b5fb8ad10b5445bcdbe248127fe75cf0aec4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d2c0fad59745bf67aa6471e8c9e96c351f0de59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2c0fad59745bf67aa6471e8c9e96c351f0de59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2c0fad59745bf67aa6471e8c9e96c351f0de59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2c0fad59745bf67aa6471e8c9e96c351f0de59/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30e65e94d14a249fb810aea5bddb6afe3e706df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30e65e94d14a249fb810aea5bddb6afe3e706df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f30e65e94d14a249fb810aea5bddb6afe3e706df"}], "stats": {"total": 162, "additions": 148, "deletions": 14}, "files": [{"sha": "95d9921c61d4efe386c5605437102eadc84d244c", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2c0fad59745bf67aa6471e8c9e96c351f0de59/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2c0fad59745bf67aa6471e8c9e96c351f0de59/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=9d2c0fad59745bf67aa6471e8c9e96c351f0de59", "patch": "@@ -491,29 +491,29 @@ region_model::impl_call_malloc (const call_details &cd)\n }\n \n /* Handle the on_call_pre part of \"memcpy\" and \"__builtin_memcpy\".  */\n+// TODO: complain about overlapping src and dest.\n \n void\n region_model::impl_call_memcpy (const call_details &cd)\n {\n-  const svalue *dest_sval = cd.get_arg_svalue (0);\n+  const svalue *dest_ptr_sval = cd.get_arg_svalue (0);\n+  const svalue *src_ptr_sval = cd.get_arg_svalue (1);\n   const svalue *num_bytes_sval = cd.get_arg_svalue (2);\n \n-  const region *dest_reg = deref_rvalue (dest_sval, cd.get_arg_tree (0),\n+  const region *dest_reg = deref_rvalue (dest_ptr_sval, cd.get_arg_tree (0),\n \t\t\t\t\t cd.get_ctxt ());\n+  const region *src_reg = deref_rvalue (src_ptr_sval, cd.get_arg_tree (1),\n+\t\t\t\t\tcd.get_ctxt ());\n \n-  cd.maybe_set_lhs (dest_sval);\n-\n-  if (tree num_bytes = num_bytes_sval->maybe_get_constant ())\n-    {\n-      /* \"memcpy\" of zero size is a no-op.  */\n-      if (zerop (num_bytes))\n-\treturn;\n-    }\n-\n-  check_region_for_write (dest_reg, cd.get_ctxt ());\n+  cd.maybe_set_lhs (dest_ptr_sval);\n \n-  /* Otherwise, mark region's contents as unknown.  */\n-  mark_region_as_unknown (dest_reg, cd.get_uncertainty ());\n+  const region *sized_src_reg\n+    = m_mgr->get_sized_region (src_reg, NULL_TREE, num_bytes_sval);\n+  const region *sized_dest_reg\n+    = m_mgr->get_sized_region (dest_reg, NULL_TREE, num_bytes_sval);\n+  const svalue *src_contents_sval\n+    = get_store_value (sized_src_reg, cd.get_ctxt ());\n+  set_value (sized_dest_reg, src_contents_sval, cd.get_ctxt ());\n }\n \n /* Handle the on_call_pre part of \"memset\" and \"__builtin_memset\".  */"}, {"sha": "a9368d3307d2430289b4eba93a288a7331b406f9", "filename": "gcc/testsuite/gcc.dg/analyzer/memcpy-1.c", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2c0fad59745bf67aa6471e8c9e96c351f0de59/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2c0fad59745bf67aa6471e8c9e96c351f0de59/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmemcpy-1.c?ref=9d2c0fad59745bf67aa6471e8c9e96c351f0de59", "patch": "@@ -1,6 +1,16 @@\n #include <string.h>\n #include \"analyzer-decls.h\"\n \n+/* Function for thwarting expansion of memcpy by optimizer.  */\n+\n+typedef void * (*memcpy_t) (void *dst, const void *src, size_t n);\n+  \n+static memcpy_t __attribute__((noinline))\n+get_memcpy (void)\n+{\n+  return memcpy;\n+}\n+\n void *test_1 (void *dst, void *src, size_t n)\n {\n   void *result = memcpy (dst, src, n);\n@@ -15,6 +25,14 @@ void *test_1a (void *dst, void *src, size_t n)\n   return result;\n }\n \n+void *test_1b (void *dst, void *src, size_t n)\n+{\n+  memcpy_t fn = get_memcpy ();\n+  void *result = fn (dst, src, n);\n+  __analyzer_eval (result == dst); /* { dg-warning \"TRUE\" } */\n+  return result;\n+}\n+\n void test_2 (int i)\n {\n   int j;\n@@ -29,6 +47,14 @@ void test_2a (int i)\n   __analyzer_eval (i == j);  /* { dg-warning \"TRUE\" } */\n }\n \n+void test_2b (int i)\n+{\n+  int j;\n+  memcpy_t fn = get_memcpy ();\n+  fn (&j, &i, sizeof (int));\n+  __analyzer_eval (i == j); /* { dg-warning \"TRUE\" } */\n+}\n+\n void test_3 (void *src, size_t n)\n {\n   char buf[40], other[40];\n@@ -41,3 +67,102 @@ void test_3 (void *src, size_t n)\n   __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"UNKNOWN\" } */\n   __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n }\n+\n+void test_3b (void *src, size_t n)\n+{\n+  char buf[40], other[40];\n+  memcpy_t fn = get_memcpy ();\n+  buf[0] = 'a';\n+  other[0] = 'b';\n+  __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n+\n+  fn (buf, src, n);\n+  __analyzer_eval (buf[0] == 'a');    /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (other[0] == 'b');  /* { dg-warning \"TRUE\" } */\n+}\n+\n+/* Overwriting a zeroed buffer, then memcpy of the result.  */\n+\n+void test_4 (int a, int b)\n+{\n+  int src[1024];\n+  int dst[1024];\n+  memset (src, 0, sizeof (src));\n+  src[42] = a;\n+  src[100] = b;\n+  __analyzer_eval (src[0] == 0);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[42] == a);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[100] == b);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[1023] == 0);    /* { dg-warning \"TRUE\" } */\n+\n+  memcpy (dst, src, sizeof (src));\n+  __analyzer_eval (dst[0] == 0);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[42] == a);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[100] == b);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[1023] == 0);    /* { dg-warning \"TRUE\" } */  \n+}\n+\n+void test_4b (int a, int b)\n+{\n+  int src[1024];\n+  int dst[1024];\n+  memcpy_t fn = get_memcpy ();\n+  memset (src, 0, sizeof (src));\n+  src[42] = a;\n+  src[100] = b;\n+  __analyzer_eval (src[0] == 0);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[42] == a);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[100] == b);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (src[1023] == 0);    /* { dg-warning \"TRUE\" } */\n+\n+  fn (dst, src, sizeof (src));\n+  __analyzer_eval (dst[0] == 0);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[42] == a);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[100] == b);    /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (dst[1023] == 0);    /* { dg-warning \"TRUE\" } */  \n+}\n+\n+/* Populating a buffer from an unknown buffer.  */\n+\n+void test_5 (void *src, size_t sz)\n+{\n+  char dst[1024];\n+  memcpy (dst, src, sizeof (dst));\n+  __analyzer_eval (dst[0] == 0); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (dst[1023] == 0); /* { dg-warning \"UNKNOWN\" } */\n+}\n+\n+void test_5b (void *src, size_t sz)\n+{\n+  char dst[1024];\n+  memcpy_t fn = get_memcpy ();\n+  fn (dst, src, sizeof (dst));\n+  __analyzer_eval (dst[0] == 0); /* { dg-warning \"UNKNOWN\" } */\n+  __analyzer_eval (dst[1023] == 0); /* { dg-warning \"UNKNOWN\" } */\n+}\n+\n+/* Zero-sized memcpy.  */\n+\n+void test_6 (void *dst, void *src)\n+{\n+  memcpy (dst, src, 0);\n+}\n+\n+void test_6b (void *dst, void *src)\n+{\n+  memcpy_t fn = get_memcpy ();\n+  fn (dst, src, 0);\n+}\n+\n+/* memcpy to string literal.  */\n+\n+void test_7 (void *src, size_t sz)\n+{\n+  memcpy ((void *)\"hello world\", src, sz); /* { dg-warning \"write to string literal\" } */\n+}\n+\n+void test_7b (void *src, size_t sz)\n+{\n+  memcpy ((void *)\"hello world\", src, sz); /* { dg-warning \"write to string literal\" } */\n+}"}, {"sha": "0b166f7a86ac9339fa8111b3b300174c67a83653", "filename": "gcc/testsuite/gcc.dg/analyzer/taint-size-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2c0fad59745bf67aa6471e8c9e96c351f0de59/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-size-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2c0fad59745bf67aa6471e8c9e96c351f0de59/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-size-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftaint-size-1.c?ref=9d2c0fad59745bf67aa6471e8c9e96c351f0de59", "patch": "@@ -12,6 +12,7 @@ struct foo\n };\n \n char buf[100];\n+char buf2[100];\n \n /* memset with tainted size.  */\n \n@@ -30,3 +31,11 @@ void test_1 (FILE *f)\n     // TOOD: better messages for state changes\n   }\n }\n+\n+/* memcpy with tainted size.  */\n+\n+void __attribute__((tainted_args))\n+test_2 (size_t sz)\n+{\n+  memcpy (buf, buf2, sz); /* { dg-warning \"use of attacker-controlled value 'sz' as size without upper-bounds checking\" } */\n+}"}]}