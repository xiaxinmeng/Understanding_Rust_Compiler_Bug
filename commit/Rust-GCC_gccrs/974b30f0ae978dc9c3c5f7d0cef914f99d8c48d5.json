{"sha": "974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0YjMwZjBhZTk3OGRjOWMzYzVmN2QwY2VmOTE0Zjk5ZDhjNDhkNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-03-09T12:57:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-03-09T12:57:13Z"}, "message": "re PR c++/20186 (ICE with static_cast and type dependent variable (templates))\n\ncp:\n\tPR c++/20186\n\t* pt.c (contains_dependent_cast_p): New.\n\t(fold_non_dependent_expr): Call it.\ntestsuite:\n\tPR c++/20186\n\t* g++.dg/template/non-dependent12.C: New.\n\nFrom-SVN: r96190", "tree": {"sha": "17f4d1e354cce34373329a5aa3eb5ccf2b29f82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17f4d1e354cce34373329a5aa3eb5ccf2b29f82d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/comments", "author": null, "committer": null, "parents": [{"sha": "e2b8bd6cd8790cf7ef04a2437e9b58b311bfd64a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b8bd6cd8790cf7ef04a2437e9b58b311bfd64a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2b8bd6cd8790cf7ef04a2437e9b58b311bfd64a"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "8eec1963d46329699f73ffeb1754d5f5566a6e5a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "patch": "@@ -1,3 +1,9 @@\n+2005-03-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/20186\n+\t* pt.c (contains_dependent_cast_p): New.\n+\t(fold_non_dependent_expr): Call it.\n+\n 2005-03-08  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/20142"}, {"sha": "320cd84522b584a61c4dc823663f3b0880160783", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "patch": "@@ -3258,6 +3258,52 @@ redeclare_class_template (tree type, tree parms)\n     }\n }\n \n+/* Return true if non-dependent expressions EXPR contains within it a\n+   cast expression with a dependent argument.  */\n+\n+static bool\n+contains_dependent_cast_p (tree expr)\n+{\n+  switch (TREE_CODE (expr))\n+    {\n+    case CAST_EXPR:\n+    case REINTERPRET_CAST_EXPR:\n+    case STATIC_CAST_EXPR:\n+    case DYNAMIC_CAST_EXPR:\n+    case CONST_CAST_EXPR:\n+      {\n+\ttree op = TREE_OPERAND (expr, 0);\n+\n+\tif (op && (type_dependent_expression_p (op)\n+\t\t   || value_dependent_expression_p (op)))\n+\t  return true;\n+      }\n+      break;\n+\n+    case TREE_LIST:\n+      /* The operands of a CALL_EXPR are held as a list.  */\n+      for (; expr; expr = TREE_CHAIN (expr))\n+\tif (contains_dependent_cast_p (TREE_VALUE (expr)))\n+\t  return true;\n+      return false;\n+\n+    default:\n+      break;\n+    }\n+\n+  if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (expr))))\n+    {\n+      int ix;\n+  \n+      for (ix = TREE_CODE_LENGTH (TREE_CODE (expr)); ix--;)\n+\tif (TREE_OPERAND (expr, ix)\n+\t    && contains_dependent_cast_p (TREE_OPERAND (expr, ix)))\n+\t  return true;\n+    }\n+  \n+  return false;\n+}\n+\n /* Simplify EXPR if it is a non-dependent expression.  Returns the\n    (possibly simplified) expression.  */\n \n@@ -3273,7 +3319,8 @@ fold_non_dependent_expr (tree expr)\n      as two declarations of the same function, for example.  */\n   if (processing_template_decl\n       && !type_dependent_expression_p (expr)\n-      && !value_dependent_expression_p (expr))\n+      && !value_dependent_expression_p (expr)\n+      && !contains_dependent_cast_p (expr))\n     {\n       HOST_WIDE_INT saved_processing_template_decl;\n "}, {"sha": "46a7e7c7674c3656b0c286cbdc8cb493227863d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "patch": "@@ -1,3 +1,8 @@\n+2005-03-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/20186\n+\t* g++.dg/template/non-dependent12.C: New.\n+\n 2005-03-08  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/20142"}, {"sha": "73d7e9497668b46d09175aec4145f327ef77c4fc", "filename": "gcc/testsuite/g++.dg/template/non-dependent12.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent12.C?ref=974b30f0ae978dc9c3c5f7d0cef914f99d8c48d5", "patch": "@@ -0,0 +1,10 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 8 Mar 2005 <nathan@codesourcery.com>\n+\n+// PR 20186: ICE\n+// Origin: Jan Dvorak <jan.dvorak@kraxnet.cz>\n+\n+template<typename T> void foo(T &t)\n+{\n+  int i = static_cast<int>(t);\n+}"}]}