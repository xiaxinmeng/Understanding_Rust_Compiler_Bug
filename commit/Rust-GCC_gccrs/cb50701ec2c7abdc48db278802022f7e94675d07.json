{"sha": "cb50701ec2c7abdc48db278802022f7e94675d07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I1MDcwMWVjMmM3YWJkYzQ4ZGIyNzg4MDIwMjJmN2U5NDY3NWQwNw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-07-25T09:36:19Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-07-25T09:36:19Z"}, "message": "Come up with function_decl_type and use it in tree_function_decl.\n\n2019-07-25  Martin Liska  <mliska@suse.cz>\n\n\t* calls.c (maybe_warn_alloc_args_overflow): Use new macros\n\t(e.g. DECL_SET_LAMBDA_FUNCTION and DECL_LAMBDA_FUNCTION_P).\n\t* coverage.c (coverage_begin_function): Likewise.\n\t* fold-const.c (tree_expr_nonzero_warnv_p): Likewise.\n\t* gimple.c (gimple_call_nonnull_result_p): Likewise.\n\t* ipa-icf.c (sem_item::compare_referenced_symbol_properties): Likewise.\n\t(sem_item::hash_referenced_symbol_properties): Likewise.\n\t* lto-streamer-out.c (hash_tree): Likewise.\n\t* predict.c (expr_expected_value_1): Likewise.\n\t* tree-inline.c (expand_call_inline): Likewise.\n\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields): Likewise.\n\t* tree-streamer-out.c (pack_ts_function_decl_value_fields): Likewise.\n\t* tree-core.h (enum function_decl_type): New enum.\n\t(struct tree_function_decl): Remove operator_new_flag and lambda_function.\n\t* tree.h (FUNCTION_DECL_DECL_TYPE): New.\n\t(set_function_decl_type): Likewise.\n\t(DECL_IS_OPERATOR_NEW_P): New.\n\t(DECL_SET_IS_OPERATOR_NEW): Likewise.\n\t(DECL_LAMBDA_FUNCTION): Likewise.\n\t(DECL_LAMBDA_FUNCTION_P): Likewise.\n\t(DECL_IS_OPERATOR_NEW): Remove.\n\t(DECL_SET_LAMBDA_FUNCTION): Likewise.\n2019-07-25  Martin Liska  <mliska@suse.cz>\n\n\t* c-decl.c (merge_decls): Use new macros\n\t(e.g. DECL_SET_LAMBDA_FUNCTION and DECL_LAMBDA_FUNCTION_P).\n2019-07-25  Martin Liska  <mliska@suse.cz>\n\n\t* decl.c (duplicate_decls): Use new macros\n\t(e.g. DECL_SET_LAMBDA_FUNCTION and DECL_LAMBDA_FUNCTION_P).\n\t(cxx_init_decl_processing): Likewise.\n\t(grok_op_properties): Likewise.\n\t* parser.c (cp_parser_lambda_declarator_opt): Likewise.\n2019-07-25  Martin Liska  <mliska@suse.cz>\n\n\t* lto-common.c (compare_tree_sccs_1): Use new macros\n\t(e.g. DECL_SET_LAMBDA_FUNCTION and DECL_LAMBDA_FUNCTION_P).\n\nFrom-SVN: r273790", "tree": {"sha": "73041813c838f6762515bdf6c86421963bb193b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73041813c838f6762515bdf6c86421963bb193b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb50701ec2c7abdc48db278802022f7e94675d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb50701ec2c7abdc48db278802022f7e94675d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb50701ec2c7abdc48db278802022f7e94675d07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb50701ec2c7abdc48db278802022f7e94675d07/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "982b149787057bb288caed389f231c4979e969dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/982b149787057bb288caed389f231c4979e969dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/982b149787057bb288caed389f231c4979e969dc"}], "stats": {"total": 141, "additions": 113, "deletions": 28}, "files": [{"sha": "89ba868f6b735908af588ec2969460f66b666397", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1,3 +1,28 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* calls.c (maybe_warn_alloc_args_overflow): Use new macros\n+\t(e.g. DECL_SET_LAMBDA_FUNCTION and DECL_LAMBDA_FUNCTION_P).\n+\t* coverage.c (coverage_begin_function): Likewise.\n+\t* fold-const.c (tree_expr_nonzero_warnv_p): Likewise.\n+\t* gimple.c (gimple_call_nonnull_result_p): Likewise.\n+\t* ipa-icf.c (sem_item::compare_referenced_symbol_properties): Likewise.\n+\t(sem_item::hash_referenced_symbol_properties): Likewise.\n+\t* lto-streamer-out.c (hash_tree): Likewise.\n+\t* predict.c (expr_expected_value_1): Likewise.\n+\t* tree-inline.c (expand_call_inline): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_function_decl_value_fields): Likewise.\n+\t* tree-streamer-out.c (pack_ts_function_decl_value_fields): Likewise.\n+\t* tree-core.h (enum function_decl_type): New enum.\n+\t(struct tree_function_decl): Remove operator_new_flag and lambda_function.\n+\t* tree.h (FUNCTION_DECL_DECL_TYPE): New.\n+\t(set_function_decl_type): Likewise.\n+\t(DECL_IS_OPERATOR_NEW_P): New.\n+\t(DECL_SET_IS_OPERATOR_NEW): Likewise.\n+\t(DECL_LAMBDA_FUNCTION): Likewise.\n+\t(DECL_LAMBDA_FUNCTION_P): Likewise.\n+\t(DECL_IS_OPERATOR_NEW): Remove.\n+\t(DECL_SET_LAMBDA_FUNCTION): Likewise.\n+\n 2019-07-25  Xiong Hu Luo  <luoxhu@linux.ibm.com>\n \n \t* ipa-profile.c (get_most_common_single_value): Use"}, {"sha": "77ffbfb5930442676170bae06d1e3a83a0d90e2a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1,3 +1,8 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-decl.c (merge_decls): Use new macros\n+\t(e.g. DECL_SET_LAMBDA_FUNCTION and DECL_LAMBDA_FUNCTION_P).\n+\n 2019-07-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83518"}, {"sha": "92cc06ed65273aa32c1ada1f33b29b5c2be80b02", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -2639,7 +2639,8 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t    |= DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (olddecl);\n \t  TREE_THIS_VOLATILE (newdecl) |= TREE_THIS_VOLATILE (olddecl);\n \t  DECL_IS_MALLOC (newdecl) |= DECL_IS_MALLOC (olddecl);\n-\t  DECL_IS_OPERATOR_NEW (newdecl) |= DECL_IS_OPERATOR_NEW (olddecl);\n+\t  if (DECL_IS_OPERATOR_NEW_P (olddecl))\n+\t    DECL_SET_IS_OPERATOR_NEW (newdecl, true);\n \t  TREE_READONLY (newdecl) |= TREE_READONLY (olddecl);\n \t  DECL_PURE_P (newdecl) |= DECL_PURE_P (olddecl);\n \t  DECL_IS_NOVOPS (newdecl) |= DECL_IS_NOVOPS (olddecl);"}, {"sha": "7507b698e27496e226088678832a67d468e00400", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1395,7 +1395,7 @@ maybe_warn_alloc_args_overflow (tree fn, tree exp, tree args[2], int idx[2])\n \t\t  && fn\n \t\t  && !args[1]\n \t\t  && lang_GNU_CXX ()\n-\t\t  && DECL_IS_OPERATOR_NEW (fn)\n+\t\t  && DECL_IS_OPERATOR_NEW_P (fn)\n \t\t  && integer_all_onesp (args[i]))\n \t\tcontinue;\n "}, {"sha": "0d5138feb2b4f65c4951daf1cbbbd19b5df6986e", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -643,7 +643,7 @@ coverage_begin_function (unsigned lineno_checksum, unsigned cfg_checksum)\n \t\t     (DECL_ASSEMBLER_NAME (current_function_decl)));\n   gcov_write_unsigned (DECL_ARTIFICIAL (current_function_decl)\n \t\t       && !DECL_FUNCTION_VERSIONED (current_function_decl)\n-\t\t       && !DECL_LAMBDA_FUNCTION (current_function_decl));\n+\t\t       && !DECL_LAMBDA_FUNCTION_P (current_function_decl));\n   gcov_write_filename (xloc.file);\n   gcov_write_unsigned (xloc.line);\n   gcov_write_unsigned (xloc.column);"}, {"sha": "6c081214abe978d7f7e2b40d501228a3c18c2bea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1,3 +1,11 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl.c (duplicate_decls): Use new macros\n+\t(e.g. DECL_SET_LAMBDA_FUNCTION and DECL_LAMBDA_FUNCTION_P).\n+\t(cxx_init_decl_processing): Likewise.\n+\t(grok_op_properties): Likewise.\n+\t* parser.c (cp_parser_lambda_declarator_opt): Likewise.\n+\n 2019-07-24  Martin Sebor  <msebor@redhat.com>\n \n \tPR driver/80545"}, {"sha": "836bb14894e0c98decdcaf63ab8f0c129a78b3ac", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -2293,7 +2293,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (newdecl)\n \t    |= DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (olddecl);\n \t  DECL_NO_LIMIT_STACK (newdecl) |= DECL_NO_LIMIT_STACK (olddecl);\n-\t  DECL_IS_OPERATOR_NEW (newdecl) |= DECL_IS_OPERATOR_NEW (olddecl);\n+\t  if (DECL_IS_OPERATOR_NEW_P (olddecl))\n+\t    DECL_SET_IS_OPERATOR_NEW (newdecl, true);\n \t  DECL_LOOPING_CONST_OR_PURE_P (newdecl)\n \t    |= DECL_LOOPING_CONST_OR_PURE_P (olddecl);\n \n@@ -4358,10 +4359,10 @@ cxx_init_decl_processing (void)\n     deltype = build_exception_variant (deltype, empty_except_spec);\n     tree opnew = push_cp_library_fn (NEW_EXPR, newtype, 0);\n     DECL_IS_MALLOC (opnew) = 1;\n-    DECL_IS_OPERATOR_NEW (opnew) = 1;\n+    DECL_SET_IS_OPERATOR_NEW (opnew, true);\n     opnew = push_cp_library_fn (VEC_NEW_EXPR, newtype, 0);\n     DECL_IS_MALLOC (opnew) = 1;\n-    DECL_IS_OPERATOR_NEW (opnew) = 1;\n+    DECL_SET_IS_OPERATOR_NEW (opnew, true);\n     push_cp_library_fn (DELETE_EXPR, deltype, ECF_NOTHROW);\n     push_cp_library_fn (VEC_DELETE_EXPR, deltype, ECF_NOTHROW);\n     if (flag_sized_deallocation)\n@@ -4394,10 +4395,10 @@ cxx_init_decl_processing (void)\n \tnewtype = build_exception_variant (newtype, new_eh_spec);\n \topnew = push_cp_library_fn (NEW_EXPR, newtype, 0);\n \tDECL_IS_MALLOC (opnew) = 1;\n-\tDECL_IS_OPERATOR_NEW (opnew) = 1;\n+\tDECL_SET_IS_OPERATOR_NEW (opnew, true);\n \topnew = push_cp_library_fn (VEC_NEW_EXPR, newtype, 0);\n \tDECL_IS_MALLOC (opnew) = 1;\n-\tDECL_IS_OPERATOR_NEW (opnew) = 1;\n+\tDECL_SET_IS_OPERATOR_NEW (opnew, true);\n \n \t/* operator delete (void *, align_val_t); */\n \tdeltype = build_function_type_list (void_type_node, ptr_type_node,\n@@ -13664,7 +13665,7 @@ grok_op_properties (tree decl, bool complain)\n \tcoerce_delete_type (decl, loc);\n       else\n \t{\n-\t  DECL_IS_OPERATOR_NEW (decl) = 1;\n+\t  DECL_SET_IS_OPERATOR_NEW (decl, true);\n \t  TREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl), loc);\n \t}\n "}, {"sha": "ebeffdb775fe78719603508f86bb5d8c640a820e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -10976,7 +10976,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \tDECL_ARTIFICIAL (fco) = 1;\n \t/* Give the object parameter a different name.  */\n \tDECL_NAME (DECL_ARGUMENTS (fco)) = closure_identifier;\n-\tDECL_LAMBDA_FUNCTION (fco) = 1;\n+\tDECL_SET_LAMBDA_FUNCTION (fco, true);\n       }\n     if (template_param_list)\n       {"}, {"sha": "0a2410125be1548d12441fd64ab5ded21b9f28a8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -9250,7 +9250,7 @@ tree_expr_nonzero_warnv_p (tree t, bool *strict_overflow_p)\n \ttree fndecl = get_callee_fndecl (t);\n \tif (!fndecl) return false;\n \tif (flag_delete_null_pointer_checks && !flag_check_new\n-\t    && DECL_IS_OPERATOR_NEW (fndecl)\n+\t    && DECL_IS_OPERATOR_NEW_P (fndecl)\n \t    && !TREE_NOTHROW (fndecl))\n \t  return true;\n \tif (flag_delete_null_pointer_checks"}, {"sha": "513bde209e2ffeb593b7e10f0ef4fdd9125fe5a1", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1583,7 +1583,7 @@ gimple_call_nonnull_result_p (gcall *call)\n   if (!fndecl)\n     return false;\n   if (flag_delete_null_pointer_checks && !flag_check_new\n-      && DECL_IS_OPERATOR_NEW (fndecl)\n+      && DECL_IS_OPERATOR_NEW_P (fndecl)\n       && !TREE_NOTHROW (fndecl))\n     return true;\n "}, {"sha": "13e63b77af197280c9cbd65a407309d692d3f4eb", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -344,8 +344,8 @@ sem_item::compare_referenced_symbol_properties (symtab_node *used_by,\n \t    return return_false_with_msg (\"inline attributes are different\");\n \t}\n \n-      if (DECL_IS_OPERATOR_NEW (n1->decl)\n-\t  != DECL_IS_OPERATOR_NEW (n2->decl))\n+      if (DECL_IS_OPERATOR_NEW_P (n1->decl)\n+\t  != DECL_IS_OPERATOR_NEW_P (n2->decl))\n \treturn return_false_with_msg (\"operator new flags are different\");\n     }\n \n@@ -409,7 +409,7 @@ sem_item::hash_referenced_symbol_properties (symtab_node *ref,\n \t  hstate.add_flag (DECL_DISREGARD_INLINE_LIMITS (ref->decl));\n \t  hstate.add_flag (DECL_DECLARED_INLINE_P (ref->decl));\n \t}\n-      hstate.add_flag (DECL_IS_OPERATOR_NEW (ref->decl));\n+      hstate.add_flag (DECL_IS_OPERATOR_NEW_P (ref->decl));\n     }\n   else if (is_a <varpool_node *> (ref))\n     {"}, {"sha": "47a9143ae2691852d73d0bf5a40e84cf3f113f0f", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1121,12 +1121,12 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n       hstate.add_int (DECL_BUILT_IN_CLASS (t));\n       hstate.add_flag (DECL_STATIC_CONSTRUCTOR (t));\n       hstate.add_flag (DECL_STATIC_DESTRUCTOR (t));\n+      hstate.add_flag (FUNCTION_DECL_DECL_TYPE (t));\n       hstate.add_flag (DECL_UNINLINABLE (t));\n       hstate.add_flag (DECL_POSSIBLY_INLINED (t));\n       hstate.add_flag (DECL_IS_NOVOPS (t));\n       hstate.add_flag (DECL_IS_RETURNS_TWICE (t));\n       hstate.add_flag (DECL_IS_MALLOC (t));\n-      hstate.add_flag (DECL_IS_OPERATOR_NEW (t));\n       hstate.add_flag (DECL_DECLARED_INLINE_P (t));\n       hstate.add_flag (DECL_STATIC_CHAIN (t));\n       hstate.add_flag (DECL_NO_INLINE_WARNING_P (t));"}, {"sha": "277926924aa714502aff082b960f0bad2827298f", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1,3 +1,8 @@\n+2019-07-25  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-common.c (compare_tree_sccs_1): Use new macros\n+\t(e.g. DECL_SET_LAMBDA_FUNCTION and DECL_LAMBDA_FUNCTION_P).\n+\n 2019-07-22  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n \n \t* lang.opt (flag_dump_callgraph): New flag."}, {"sha": "ffa05f92f3c968280955b555015d8c24765f6ff4", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1228,7 +1228,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_values (DECL_IS_NOVOPS);\n       compare_values (DECL_IS_RETURNS_TWICE);\n       compare_values (DECL_IS_MALLOC);\n-      compare_values (DECL_IS_OPERATOR_NEW);\n+      compare_values (DECL_IS_OPERATOR_NEW_P);\n       compare_values (DECL_DECLARED_INLINE_P);\n       compare_values (DECL_STATIC_CHAIN);\n       compare_values (DECL_NO_INLINE_WARNING_P);"}, {"sha": "06138c0f3519721157e7723feec19c1813e6a905", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -2450,7 +2450,7 @@ expr_expected_value_1 (tree type, tree op0, enum tree_code code,\n \t      return NULL;\n \t    }\n \n-\t  if (DECL_IS_MALLOC (decl) || DECL_IS_OPERATOR_NEW (decl))\n+\t  if (DECL_IS_MALLOC (decl) || DECL_IS_OPERATOR_NEW_P (decl))\n \t    {\n \t      if (predictor)\n \t\t*predictor = PRED_MALLOC_NONNULL;"}, {"sha": "372738e5499a309d1f5a35e26a2f67b29adfb1a1", "filename": "gcc/tree-core.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -1820,6 +1820,17 @@ struct GTY(()) tree_decl_non_common {\n   tree result;\n };\n \n+/* Classify a special function declaration type.  */\n+\n+enum function_decl_type\n+{\n+  NONE,\n+  OPERATOR_NEW,\n+  LAMBDA_FUNCTION\n+\n+  /* 0 values left */\n+};\n+\n /* FUNCTION_DECL inherits from DECL_NON_COMMON because of the use of the\n    arguments/result/saved_tree fields by front ends.   It was either inherit\n    FUNCTION_DECL from non_common, or inherit non_common from FUNCTION_DECL,\n@@ -1859,19 +1870,22 @@ struct GTY(()) tree_function_decl {\n   unsigned novops_flag : 1;\n   unsigned returns_twice_flag : 1;\n   unsigned malloc_flag : 1;\n-  unsigned operator_new_flag : 1;\n   unsigned declared_inline_flag : 1;\n   unsigned no_inline_warning_flag : 1;\n \n   unsigned no_instrument_function_entry_exit : 1;\n+\n+  /* Align the bitfield to boundary of a byte.  */\n+  ENUM_BITFIELD(function_decl_type) decl_type: 2;\n+\n   unsigned no_limit_stack : 1;\n   unsigned disregard_inline_limits : 1;\n   unsigned pure_flag : 1;\n   unsigned looping_const_or_pure_flag : 1;\n   unsigned has_debug_args_flag : 1;\n   unsigned versioned_function : 1;\n-  unsigned lambda_function: 1;\n-  /* No bits left.  */\n+\n+  /* 0 bits left.  */\n };\n \n struct GTY(()) tree_translation_unit_decl {"}, {"sha": "46bbec1acef60407fe9af66a302ac738e15df6e2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -4895,7 +4895,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n      we may get confused if the compiler sees that the inlined new\n      function returns a pointer which was just deleted.  See bug\n      33407.  */\n-  if (DECL_IS_OPERATOR_NEW (fn))\n+  if (DECL_IS_OPERATOR_NEW_P (fn))\n     {\n       return_slot = NULL;\n       modify_dest = NULL;"}, {"sha": "f2880f1021f32ba12df467cd29ec44be06691309", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -333,7 +333,7 @@ unpack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_IS_NOVOPS (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_IS_RETURNS_TWICE (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_IS_MALLOC (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  DECL_IS_OPERATOR_NEW (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  DECL_SET_IS_OPERATOR_NEW (expr, (unsigned) bp_unpack_value (bp, 1));\n   DECL_DECLARED_INLINE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_STATIC_CHAIN (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_NO_INLINE_WARNING_P (expr) = (unsigned) bp_unpack_value (bp, 1);"}, {"sha": "7e93e6c23bb2dd1b7b4497faf07dcee7bab69f3c", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -295,7 +295,7 @@ pack_ts_function_decl_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_IS_NOVOPS (expr), 1);\n   bp_pack_value (bp, DECL_IS_RETURNS_TWICE (expr), 1);\n   bp_pack_value (bp, DECL_IS_MALLOC (expr), 1);\n-  bp_pack_value (bp, DECL_IS_OPERATOR_NEW (expr), 1);\n+  bp_pack_value (bp, DECL_IS_OPERATOR_NEW_P (expr), 1);\n   bp_pack_value (bp, DECL_DECLARED_INLINE_P (expr), 1);\n   bp_pack_value (bp, DECL_STATIC_CHAIN (expr), 1);\n   bp_pack_value (bp, DECL_NO_INLINE_WARNING_P (expr), 1);"}, {"sha": "81c11a470f99c09b33aef9d15c22f3beec1f23e7", "filename": "gcc/tree.h", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb50701ec2c7abdc48db278802022f7e94675d07/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=cb50701ec2c7abdc48db278802022f7e94675d07", "patch": "@@ -2994,11 +2994,34 @@ extern void decl_fini_priority_insert (tree, priority_type);\n #define DECL_IS_MALLOC(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.malloc_flag)\n \n+/* Macro for direct set and get of function_decl.decl_type.  */\n+#define FUNCTION_DECL_DECL_TYPE(NODE) \\\n+  (NODE->function_decl.decl_type)\n+\n+/* Set decl_type of a DECL.  Set it to T when SET is true, or reset\n+   it to NONE.  */\n+\n+static inline void\n+set_function_decl_type (tree decl, function_decl_type t, bool set)\n+{\n+  if (set)\n+    {\n+      gcc_assert (FUNCTION_DECL_DECL_TYPE (decl) == NONE\n+\t\t  || FUNCTION_DECL_DECL_TYPE (decl) == t);\n+      decl->function_decl.decl_type = t;\n+    }\n+  else if (FUNCTION_DECL_DECL_TYPE (decl) == t)\n+    FUNCTION_DECL_DECL_TYPE (decl) = NONE;\n+}\n+\n /* Nonzero in a FUNCTION_DECL means this function should be treated as\n    C++ operator new, meaning that it returns a pointer for which we\n    should not use type based aliasing.  */\n-#define DECL_IS_OPERATOR_NEW(NODE) \\\n-  (FUNCTION_DECL_CHECK (NODE)->function_decl.operator_new_flag)\n+#define DECL_IS_OPERATOR_NEW_P(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == OPERATOR_NEW)\n+\n+#define DECL_SET_IS_OPERATOR_NEW(NODE, VAL) \\\n+  set_function_decl_type (FUNCTION_DECL_CHECK (NODE), OPERATOR_NEW, VAL)\n \n /* Nonzero in a FUNCTION_DECL means this function may return more\n    than once.  */\n@@ -3143,8 +3166,11 @@ extern vec<tree, va_gc> **decl_debug_args_insert (tree);\n    (FUNCTION_DECL_CHECK (NODE)->decl_with_vis.cxx_destructor)\n \n /* In FUNCTION_DECL, this is set if this function is a lambda function.  */\n-#define DECL_LAMBDA_FUNCTION(NODE) \\\n-  (FUNCTION_DECL_CHECK (NODE)->function_decl.lambda_function)\n+#define DECL_LAMBDA_FUNCTION_P(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->function_decl.decl_type == LAMBDA_FUNCTION)\n+\n+#define DECL_SET_LAMBDA_FUNCTION(NODE, VAL) \\\n+  set_function_decl_type (FUNCTION_DECL_CHECK (NODE), LAMBDA_FUNCTION, VAL)\n \n /* In FUNCTION_DECL that represent an virtual method this is set when\n    the method is final.  */"}]}