{"sha": "934cb78a5826cfb0549000d76cd7a05fa5369c03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0Y2I3OGE1ODI2Y2ZiMDU0OTAwMGQ3NmNkN2EwNWZhNTM2OWMwMw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2008-09-13T14:35:10Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-13T14:35:10Z"}, "message": "cgraph.c (free_edges): New variable.\n\n\t* cgraph.c (free_edges): New variable.\n\t(NEXT_FREE_EDGE): New macro.\n\t(cgraph_free_edge): New function.\n\t(cgraph_remove_edge): Call cgraph_remove_edge_1.\n\t(cgraph_node_remove_callees): Likewise.\n\t(cgraph_node_remove_callers): Likewise.\n\t(cgraph_create_edge): Reuse edges from the free list.  Do not\n\tupdate uid if doing so.\n\t(cgraph_remove_*_hook): Add free call.\n\nCo-Authored-By: Jan Hubicka <jh@suse.cz>\n\nFrom-SVN: r140341", "tree": {"sha": "3fc2f320e79fec412a2671fffbe0c677f5c15b35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc2f320e79fec412a2671fffbe0c677f5c15b35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934cb78a5826cfb0549000d76cd7a05fa5369c03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934cb78a5826cfb0549000d76cd7a05fa5369c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934cb78a5826cfb0549000d76cd7a05fa5369c03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934cb78a5826cfb0549000d76cd7a05fa5369c03/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "025fa62ffccb6a71578e01d07592e4c6fae1be4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/025fa62ffccb6a71578e01d07592e4c6fae1be4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/025fa62ffccb6a71578e01d07592e4c6fae1be4c"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "7929d7e6634cd4955cf5513057dee5bb83d2f6b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934cb78a5826cfb0549000d76cd7a05fa5369c03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934cb78a5826cfb0549000d76cd7a05fa5369c03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=934cb78a5826cfb0549000d76cd7a05fa5369c03", "patch": "@@ -1,3 +1,16 @@\n+2008-09-13  Martin Jambor  <mjambor@suse.cz>\n+\t    Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (free_edges): New variable.\n+\t(NEXT_FREE_EDGE): New macro.\n+\t(cgraph_free_edge): New function.\n+\t(cgraph_remove_edge): Call cgraph_remove_edge_1.\n+\t(cgraph_node_remove_callees): Likewise.\n+\t(cgraph_node_remove_callers): Likewise.\n+\t(cgraph_create_edge): Reuse edges from the free list.  Do not\n+\tupdate uid if doing so.\n+\t(cgraph_remove_*_hook): Add free call.\n+\n 2008-09-13  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* ira-color.c (conflict_allocno_vec): Delete."}, {"sha": "89a083a8a17903ebe9cdb167c25c6c719a6dccd3", "filename": "gcc/cgraph.c", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934cb78a5826cfb0549000d76cd7a05fa5369c03/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934cb78a5826cfb0549000d76cd7a05fa5369c03/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=934cb78a5826cfb0549000d76cd7a05fa5369c03", "patch": "@@ -176,6 +176,12 @@ struct cgraph_2node_hook_list *first_cgraph_node_duplicated_hook;\n /* List of hooks triggered when an function is inserted.  */\n struct cgraph_node_hook_list *first_cgraph_function_insertion_hook;\n \n+/* Head of a linked list of unused (freed) call graph edges.\n+   Do not GTY((delete)) this list so UIDs gets reliably recycled.  */\n+static GTY(()) struct cgraph_edge *free_edges;\n+\n+/* Macro to access the next item in the list of free cgraph edges. */\n+#define NEXT_FREE_EDGE(EDGE) (EDGE)->prev_caller\n \n /* Register HOOK to be called with DATA on each removed edge.  */\n struct cgraph_edge_hook_list *\n@@ -203,6 +209,7 @@ cgraph_remove_edge_removal_hook (struct cgraph_edge_hook_list *entry)\n   while (*ptr != entry)\n     ptr = &(*ptr)->next;\n   *ptr = entry->next;\n+  free (entry);\n }\n \n /* Call all edge removal hooks.  */\n@@ -243,6 +250,7 @@ cgraph_remove_node_removal_hook (struct cgraph_node_hook_list *entry)\n   while (*ptr != entry)\n     ptr = &(*ptr)->next;\n   *ptr = entry->next;\n+  free (entry);\n }\n \n /* Call all node removal hooks.  */\n@@ -283,6 +291,7 @@ cgraph_remove_function_insertion_hook (struct cgraph_node_hook_list *entry)\n   while (*ptr != entry)\n     ptr = &(*ptr)->next;\n   *ptr = entry->next;\n+  free (entry);\n }\n \n /* Call all node removal hooks.  */\n@@ -323,6 +332,7 @@ cgraph_remove_edge_duplication_hook (struct cgraph_2edge_hook_list *entry)\n   while (*ptr != entry)\n     ptr = &(*ptr)->next;\n   *ptr = entry->next;\n+  free (entry);\n }\n \n /* Call all edge duplication hooks.  */\n@@ -364,6 +374,7 @@ cgraph_remove_node_duplication_hook (struct cgraph_2node_hook_list *entry)\n   while (*ptr != entry)\n     ptr = &(*ptr)->next;\n   *ptr = entry->next;\n+  free (entry);\n }\n \n /* Call all node duplication hooks.  */\n@@ -635,7 +646,7 @@ struct cgraph_edge *\n cgraph_create_edge (struct cgraph_node *caller, struct cgraph_node *callee,\n \t\t    gimple call_stmt, gcov_type count, int freq, int nest)\n {\n-  struct cgraph_edge *edge = GGC_NEW (struct cgraph_edge);\n+  struct cgraph_edge *edge;\n \n #ifdef ENABLE_CHECKING\n   /* This is rather pricely check possibly trigerring construction of call stmt\n@@ -645,6 +656,17 @@ cgraph_create_edge (struct cgraph_node *caller, struct cgraph_node *callee,\n \n   gcc_assert (is_gimple_call (call_stmt));\n \n+  if (free_edges)\n+    {\n+      edge = free_edges;\n+      free_edges = NEXT_FREE_EDGE (edge);\n+    }\n+  else\n+    {\n+      edge = GGC_NEW (struct cgraph_edge);\n+      edge->uid = cgraph_edge_max_uid++;\n+    }\n+\n   if (!callee->analyzed)\n     edge->inline_failed = N_(\"function body not available\");\n   else if (callee->local.redefined_extern_inline)\n@@ -677,7 +699,6 @@ cgraph_create_edge (struct cgraph_node *caller, struct cgraph_node *callee,\n   gcc_assert (freq <= CGRAPH_FREQ_MAX);\n   edge->loop_nest = nest;\n   edge->indirect_call = 0;\n-  edge->uid = cgraph_edge_max_uid++;\n   if (caller->call_site_hash)\n     {\n       void **slot;\n@@ -722,17 +743,36 @@ cgraph_edge_remove_caller (struct cgraph_edge *e)\n \t  \t\t       htab_hash_pointer (e->call_stmt));\n }\n \n+/* Put the edge onto the free list.  */\n+\n+static void\n+cgraph_free_edge (struct cgraph_edge *e)\n+{\n+  int uid = e->uid;\n+\n+  /* Clear out the edge so we do not dangle pointers.  */\n+  memset (e, 0, sizeof (e));\n+  e->uid = uid;\n+  NEXT_FREE_EDGE (e) = free_edges;\n+  free_edges = e;\n+}\n+\n /* Remove the edge E in the cgraph.  */\n \n void\n cgraph_remove_edge (struct cgraph_edge *e)\n {\n+  /* Call all edge removal hooks.  */\n   cgraph_call_edge_removal_hooks (e);\n+\n   /* Remove from callers list of the callee.  */\n   cgraph_edge_remove_callee (e);\n \n   /* Remove from callees list of the callers.  */\n   cgraph_edge_remove_caller (e);\n+\n+  /* Put the edge onto the free list.  */\n+  cgraph_free_edge (e);\n }\n \n /* Redirect callee of E to N.  The function does not update underlying\n@@ -814,6 +854,7 @@ cgraph_node_remove_callees (struct cgraph_node *node)\n     {\n       cgraph_call_edge_removal_hooks (e);\n       cgraph_edge_remove_callee (e);\n+      cgraph_free_edge (e);\n     }\n   node->callees = NULL;\n   if (node->call_site_hash)\n@@ -837,6 +878,7 @@ cgraph_node_remove_callers (struct cgraph_node *node)\n     {\n       cgraph_call_edge_removal_hooks (e);\n       cgraph_edge_remove_caller (e);\n+      cgraph_free_edge (e);\n     }\n   node->callers = NULL;\n }"}]}