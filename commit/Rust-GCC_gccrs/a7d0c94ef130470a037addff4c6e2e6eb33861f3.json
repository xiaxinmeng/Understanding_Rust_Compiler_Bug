{"sha": "a7d0c94ef130470a037addff4c6e2e6eb33861f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkMGM5NGVmMTMwNDcwYTAzN2FkZGZmNGM2ZTJlNmViMzM4NjFmMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2011-09-07T00:17:09Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2011-09-07T00:17:09Z"}, "message": "tuple (_Tuple_impl::_M_head, _M_tail): Mark constexpr.\n\n2011-09-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/tuple (_Tuple_impl::_M_head, _M_tail): Mark constexpr.\n\t(tuple(tuple&&)): Same.\n\t(tuple(const tuple<_UElements...>& __in)): Same.\n\t(tuple(tuple<_UElements...>&& __in)): Same.\n\t(tuple_cat(const tuple<_TElements...>&, const tuple<_UElements...>&)):\n\tSame.\n\t(get): Same.\n\t* include/std/array: Consolidate array::data usage.\n\t* testsuite/23_containers/array/requirements/constexpr_functions.cc:\n\tRemove extra include.\n\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: New.\n\t* testsuite/20_util/tuple/cons/constexpr-2.cc: Add tests.\n\t* testsuite/20_util/tuple/cons/constexpr-3.cc: Same.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust line numbers.\n\nFrom-SVN: r178620", "tree": {"sha": "3314cafd20ffc16d0f32b5a0d9fa97282e73e9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3314cafd20ffc16d0f32b5a0d9fa97282e73e9ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d0c94ef130470a037addff4c6e2e6eb33861f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d0c94ef130470a037addff4c6e2e6eb33861f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d0c94ef130470a037addff4c6e2e6eb33861f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d0c94ef130470a037addff4c6e2e6eb33861f3/comments", "author": null, "committer": null, "parents": [{"sha": "7b50d234f6da17e41e9d89843cd597707748c061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b50d234f6da17e41e9d89843cd597707748c061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b50d234f6da17e41e9d89843cd597707748c061"}], "stats": {"total": 190, "additions": 148, "deletions": 42}, "files": [{"sha": "7c57a5108638fba837a3f563c8a7ad748c885def", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a7d0c94ef130470a037addff4c6e2e6eb33861f3", "patch": "@@ -1,3 +1,20 @@\n+2011-09-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/tuple (_Tuple_impl::_M_head, _M_tail): Mark constexpr.\n+\t(tuple(tuple&&)): Same.\n+\t(tuple(const tuple<_UElements...>& __in)): Same.\n+\t(tuple(tuple<_UElements...>&& __in)): Same.\n+\t(tuple_cat(const tuple<_TElements...>&, const tuple<_UElements...>&)):\n+\tSame.\n+\t(get): Same.\n+\t* include/std/array: Consolidate array::data usage.\n+\t* testsuite/23_containers/array/requirements/constexpr_functions.cc:\n+\tRemove extra include.\n+\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: New.\n+\t* testsuite/20_util/tuple/cons/constexpr-2.cc: Add tests.\n+\t* testsuite/20_util/tuple/cons/constexpr-3.cc: Same.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust line numbers.\n+\n 2011-09-06  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "4d6b688843ebfad240adc1a7f633e1febfca9e7a", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=a7d0c94ef130470a037addff4c6e2e6eb33861f3", "patch": "@@ -61,8 +61,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct array\n     {\n       typedef _Tp \t    \t\t\t      value_type;\n-      typedef _Tp*                                    pointer;\n-      typedef const _Tp*                              const_pointer;\n+      typedef value_type*\t\t\t      pointer;\n+      typedef const value_type*                       const_pointer;\n       typedef value_type&                   \t      reference;\n       typedef const value_type&             \t      const_reference;\n       typedef value_type*          \t\t      iterator;\n@@ -90,19 +90,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Iterators.\n       iterator\n       begin() noexcept\n-      { return iterator(std::__addressof(_M_instance[0])); }\n+      { return iterator(data()); }\n \n       const_iterator\n       begin() const noexcept\n-      { return const_iterator(std::__addressof(_M_instance[0])); }\n+      { return const_iterator(data()); }\n \n       iterator\n       end() noexcept\n-      { return iterator(std::__addressof(_M_instance[_Nm])); }\n+      { return iterator(data() + _Nm); }\n \n       const_iterator\n       end() const noexcept\n-      { return const_iterator(std::__addressof(_M_instance[_Nm])); }\n+      { return const_iterator(data() + _Nm); }\n \n       reverse_iterator \n       rbegin() noexcept\n@@ -195,11 +195,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       back() const\n       { return _Nm ? *(end() - 1) : *end(); }\n \n-      _Tp*\n+      pointer\n       data() noexcept\n       { return std::__addressof(_M_instance[0]); }\n \n-      const _Tp*\n+      const_pointer\n       data() const noexcept\n       { return std::__addressof(_M_instance[0]); }\n     };"}, {"sha": "f68766f57477391b4c9bc9b3d1c099852c47825f", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=a7d0c94ef130470a037addff4c6e2e6eb33861f3", "patch": "@@ -143,7 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Head&       \n       _M_head() noexcept { return *this; }\n \n-      const _Head& \n+      constexpr const _Head& \n       _M_head() const noexcept { return *this; }\n     };\n \n@@ -189,7 +189,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Head&       \n       _M_head() noexcept { return _M_head_impl; }\n \n-      const _Head& \n+      constexpr const _Head& \n       _M_head() const noexcept { return _M_head_impl; }        \n \n       _Head _M_head_impl; \n@@ -248,13 +248,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Head&            \n       _M_head() noexcept { return _Base::_M_head(); }\n \n-      const _Head&      \n+      constexpr const _Head&      \n       _M_head() const noexcept { return _Base::_M_head(); }\n \n       _Inherited&       \n       _M_tail() noexcept { return *this; }\n \n-      const _Inherited& \n+      constexpr const _Inherited& \n       _M_tail() const noexcept { return *this; }\n \n       constexpr _Tuple_impl()\n@@ -280,7 +280,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Base(std::forward<_Head>(__in._M_head())) { }\n \n       template<typename... _UElements>\n-        _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\n+        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)\n \t: _Inherited(__in._M_tail()), _Base(__in._M_head()) { }\n \n       template<typename _UHead, typename... _UTails>\n@@ -409,15 +409,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr tuple(const tuple&) = default;\n \n-      tuple(tuple&&) = default;\n+      constexpr tuple(tuple&&) = default; \n \n       template<typename... _UElements, typename = typename\n \tenable_if<__and_<integral_constant<bool, sizeof...(_UElements)\n \t\t\t\t\t   == sizeof...(_Elements)>,\n \t\t\t __all_convertible<__conv_types<const _UElements&...>,\n \t\t\t\t\t   __conv_types<_Elements...>>\n                          >::value>::type>\n-        tuple(const tuple<_UElements...>& __in)\n+        constexpr tuple(const tuple<_UElements...>& __in)\n         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))\n         { }\n \n@@ -427,7 +427,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t __all_convertible<__conv_types<_UElements...>,\n \t\t\t\t\t   __conv_types<_Elements...>>\n \t\t\t >::value>::type>\n-        tuple(tuple<_UElements...>&& __in)\n+        constexpr tuple(tuple<_UElements...>&& __in)\n         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }\n \n       // Allocator-extended constructors.\n@@ -548,18 +548,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr tuple(const tuple&) = default;\n \n-      tuple(tuple&&) = default;\n+      constexpr tuple(tuple&&) = default;\n \n       template<typename _U1, typename _U2, typename = typename\n \tenable_if<__and_<is_convertible<const _U1&, _T1>,\n \t\t\t is_convertible<const _U2&, _T2>>::value>::type>\n-        tuple(const tuple<_U1, _U2>& __in)\n+        constexpr tuple(const tuple<_U1, _U2>& __in)\n \t: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }\n \n       template<typename _U1, typename _U2, typename = typename\n \t       enable_if<__and_<is_convertible<_U1, _T1>,\n \t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n-        tuple(tuple<_U1, _U2>&& __in)\n+        constexpr tuple(tuple<_U1, _U2>&& __in)\n \t: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }\n \n       template<typename _U1, typename _U2, typename = typename\n@@ -571,7 +571,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _U1, typename _U2, typename = typename\n \t       enable_if<__and_<is_convertible<_U1, _T1>,\n \t\t\t\tis_convertible<_U2, _T2>>::value>::type>\n-         tuple(pair<_U1, _U2>&& __in)\n+         constexpr tuple(pair<_U1, _U2>&& __in)\n \t: _Inherited(std::forward<_U1>(__in.first),\n \t\t     std::forward<_U2>(__in.second)) { }\n \n@@ -752,7 +752,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __t._M_head(); }\n \n   template<std::size_t __i, typename _Head, typename... _Tail>\n-    inline typename __add_c_ref<_Head>::type\n+    inline constexpr typename __add_c_ref<_Head>::type\n     __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept\n     { return __t._M_head(); }\n \n@@ -767,7 +767,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __get_helper<__i>(__t); }\n \n   template<std::size_t __i, typename... _Elements>\n-    inline typename __add_c_ref<\n+    inline constexpr typename __add_c_ref<\n                       typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n     get(const tuple<_Elements...>& __t) noexcept\n@@ -789,13 +789,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>\n     struct __tuple_compare<0, __i, __j, _Tp, _Up>\n     {\n-      static bool __eq(const _Tp& __t, const _Up& __u)\n+      static bool \n+      __eq(const _Tp& __t, const _Up& __u)\n       {\n \treturn (get<__i>(__t) == get<__i>(__u) &&\n \t\t__tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u));\n       }\n      \n-      static bool __less(const _Tp& __t, const _Up& __u)\n+      static bool \n+      __less(const _Tp& __t, const _Up& __u)\n       {\n \treturn ((get<__i>(__t) < get<__i>(__u))\n \t\t|| !(get<__i>(__u) < get<__i>(__t)) &&\n@@ -806,11 +808,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<std::size_t __i, typename _Tp, typename _Up>\n     struct __tuple_compare<0, __i, __i, _Tp, _Up>\n     {\n-      static bool __eq(const _Tp&, const _Up&)\n-      { return true; }\n+      static bool \n+      __eq(const _Tp&, const _Up&) { return true; }\n      \n-      static bool __less(const _Tp&, const _Up&)\n-      { return false; }\n+      static bool \n+      __less(const _Tp&, const _Up&) { return false; }\n     };\n \n   template<typename... _TElements, typename... _UElements>\n@@ -899,7 +901,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     \n   template<typename... _TElements, std::size_t... _TIdx,\n \t   typename... _UElements, std::size_t... _UIdx> \n-    inline tuple<_TElements..., _UElements...> \n+    inline constexpr tuple<_TElements..., _UElements...> \n     __tuple_cat_helper(const tuple<_TElements...>& __t,\n \t\t       const __index_holder<_TIdx...>&,\n                        const tuple<_UElements...>& __u,\n@@ -939,7 +941,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t std::forward<_UElements>(get<_UIdx>(__u))...); }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline tuple<_TElements..., _UElements...> \n+    inline constexpr tuple<_TElements..., _UElements...> \n     tuple_cat(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)\n     {\n       return __tuple_cat_helper(__t, typename\n@@ -1032,8 +1034,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<class _T1, class _T2>\n     template<typename _Tp, typename... _Args>\n       inline _Tp\n-      pair<_T1, _T2>::\n-      __cons(tuple<_Args...>&& __tuple)\n+      pair<_T1, _T2>::__cons(tuple<_Args...>&& __tuple)\n       {\n \ttypedef typename _Build_index_tuple<sizeof...(_Args)>::__type\n \t  _Indexes;\n@@ -1043,9 +1044,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<class _T1, class _T2>\n     template<typename _Tp, typename... _Args, int... _Indexes>\n       inline _Tp\n-      pair<_T1, _T2>::\n-      __do_cons(tuple<_Args...>&& __tuple,\n-\t\tconst _Index_tuple<_Indexes...>&)\n+      pair<_T1, _T2>::__do_cons(tuple<_Args...>&& __tuple,\n+\t\t\t\tconst _Index_tuple<_Indexes...>&)\n       { return _Tp(std::forward<_Args>(get<_Indexes>(__tuple))...); }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "749c0b478976223efe35a8e33ef7a4ba02f2a4d4", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/constexpr-2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-2.cc?ref=a7d0c94ef130470a037addff4c6e2e6eb33861f3", "patch": "@@ -56,8 +56,8 @@ int main()\n   test2.operator()<tuple_type, std::pair<short, short>>();\n \n   // 07: different-tuple-type conversion constructor\n-  // test2.operator()<tuple_type, std::tuple<short, short>>();\n-  // test2.operator()<std::tuple<short, short>, tuple_type>();\n+  test2.operator()<tuple_type, std::tuple<short, short>>();\n+  test2.operator()<std::tuple<short, short>, tuple_type>();\n \n   return 0;\n }"}, {"sha": "7efc9f4a9089d342af05dee52cf2a10af13c8179", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/constexpr-3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fconstexpr-3.cc?ref=a7d0c94ef130470a037addff4c6e2e6eb33861f3", "patch": "@@ -53,8 +53,8 @@ int main()\n   constexpr tuple_type t8(i5, i6, i7);\n \n   // 06: different-tuple-type conversion constructor\n-  // test2.operator()<tuple_type, std::tuple<short, short, short>>();\n-  // test2.operator()<std::tuple<short, short, short>, tuple_type>();\n+  test2.operator()<tuple_type, std::tuple<short, short, short>>();\n+  test2.operator()<std::tuple<short, short, short>, tuple_type>();\n \n   return 0;\n }"}, {"sha": "a5b5441d4a794a80715b29ec8ffa327d0b03512e", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/constexpr.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc?ref=a7d0c94ef130470a037addff4c6e2e6eb33861f3", "patch": "@@ -0,0 +1,90 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+// NOTE: This makes use of the fact that we know how moveable\n+// is implemented on pair, and also vector. If the implementation\n+// changes this test may begin to fail.\n+\n+#include <tuple>\n+\n+bool test __attribute__((unused)) = true;\n+\n+\n+// make_tuple\n+#if 0\n+void\n+test_make_tuple()\n+{\n+  {\n+    typedef std::tuple<int, float> tuple_type;\n+    constexpr tuple_type p1 = std::make_tuple(22, 22.222);\n+  }\n+\n+  {\n+    typedef std::tuple<int, float, int> tuple_type;\n+    constexpr tuple_type p1 = std::make_tuple(22, 22.222, 77799);\n+  }\n+}\n+#endif\n+\n+// get\n+void\n+test_get()\n+{\n+  {\n+    typedef std::tuple<int, float> tuple_type;\n+    constexpr tuple_type t1 { 55, 77.77 };\n+    constexpr auto var = std::get<1>(t1);\n+  }\n+\n+  {\n+    typedef std::tuple<int, float, int> tuple_type;\n+    constexpr tuple_type t1 { 55, 77.77, 99 };\n+    constexpr auto var = std::get<2>(t1);\n+  }\n+}\n+\n+// tuple_cat\n+void\n+test_tuple_cat()\n+{\n+  typedef std::tuple<int, float> \ttuple_type1;\n+  typedef std::tuple<int, int, float> tuple_type2;\n+\n+  constexpr tuple_type1 t1 { 55, 77.77 };\n+  constexpr tuple_type2 t2 { 55, 99, 77.77 };\n+  constexpr auto cat1 = std::tuple_cat(t1, t2);\n+}\n+\n+\n+int\n+main()\n+{\n+#if 0\n+  test_make_tuple();\n+#endif\n+\n+  test_get();\n+\n+  test_tuple_cat();\n+\n+  return 0;\n+}"}, {"sha": "001c57acde8660e1803b983160ee6bda4935d562", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=a7d0c94ef130470a037addff4c6e2e6eb33861f3", "patch": "@@ -51,7 +51,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 468 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 829 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 831 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }"}, {"sha": "3dcb2968718c56bea0afae4f8d32366f5c9fe2bf", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/constexpr_functions.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fconstexpr_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0c94ef130470a037addff4c6e2e6eb33861f3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fconstexpr_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fconstexpr_functions.cc?ref=a7d0c94ef130470a037addff4c6e2e6eb33861f3", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,7 +19,6 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <array>\n-#include <testsuite_common_types.h>\n \n namespace __gnu_test\n {"}]}