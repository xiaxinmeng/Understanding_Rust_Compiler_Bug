{"sha": "71d16049ff0e6a545263fc4e1295661ad0891e0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFkMTYwNDlmZjBlNmE1NDUyNjNmYzRlMTI5NTY2MWFkMDg5MWUwYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-09-30T17:54:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-09-30T17:54:37Z"}, "message": "semantics.c (lambda_expr_this_capture): Fix default capture of explicit capture of 'this'.\n\n\t* semantics.c (lambda_expr_this_capture): Fix default capture\n\tof explicit capture of 'this'.\n\nFrom-SVN: r152339", "tree": {"sha": "80731115f2e9bf48973f1a566959902120924eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80731115f2e9bf48973f1a566959902120924eed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71d16049ff0e6a545263fc4e1295661ad0891e0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d16049ff0e6a545263fc4e1295661ad0891e0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d16049ff0e6a545263fc4e1295661ad0891e0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d16049ff0e6a545263fc4e1295661ad0891e0c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f063d1016c58854d377bea0db152694698f3694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f063d1016c58854d377bea0db152694698f3694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f063d1016c58854d377bea0db152694698f3694"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "f617fb1c887a2615fd6cf90fa6b42b4780595968", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d16049ff0e6a545263fc4e1295661ad0891e0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d16049ff0e6a545263fc4e1295661ad0891e0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=71d16049ff0e6a545263fc4e1295661ad0891e0c", "patch": "@@ -1,3 +1,8 @@\n+2009-09-30  Jason Merrill  <jason@redhat.com>\n+\n+\t* semantics.c (lambda_expr_this_capture): Fix default capture\n+\tof explicit capture of 'this'.\n+\n 2009-09-30  Jason Merrill  <jason@redhat.com>\n \n \t* parser.c (cp_parser_lambda_expression): Don't add __ to __this."}, {"sha": "725bcc2966a1f615001a94eb8bf403ca90475366", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d16049ff0e6a545263fc4e1295661ad0891e0c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d16049ff0e6a545263fc4e1295661ad0891e0c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=71d16049ff0e6a545263fc4e1295661ad0891e0c", "patch": "@@ -5540,7 +5540,6 @@ add_default_capture (tree lambda_stack, tree id, tree initializer)\n   current_class_type = saved_class_type;\n \n   return member;\n-\n }\n \n /* Return the capture pertaining to a use of 'this' in LAMBDA, in the form of an\n@@ -5559,6 +5558,7 @@ lambda_expr_this_capture (tree lambda)\n     {\n       tree containing_function = TYPE_CONTEXT (TREE_TYPE (lambda));\n       tree lambda_stack = tree_cons (NULL_TREE, lambda, NULL_TREE);\n+      tree init = NULL_TREE;\n \n       /* If we are in a lambda function, we can move out until we hit:\n            1. a non-lambda function,\n@@ -5569,9 +5569,20 @@ lambda_expr_this_capture (tree lambda)\n           tree lambda\n             = CLASSTYPE_LAMBDA_EXPR (DECL_CONTEXT (containing_function));\n \n-          if (LAMBDA_EXPR_THIS_CAPTURE (lambda)\n-              || LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) == CPLD_NONE)\n-            break;\n+          if (LAMBDA_EXPR_THIS_CAPTURE (lambda))\n+\t    {\n+\t      /* An outer lambda has already captured 'this'.  */\n+\t      tree cap = LAMBDA_EXPR_THIS_CAPTURE (lambda);\n+\t      tree lthis\n+\t\t= cp_build_indirect_ref (DECL_ARGUMENTS (containing_function),\n+\t\t\t\t\t \"\", tf_warning_or_error);\n+\t      init = finish_non_static_data_member (cap, lthis, NULL_TREE);\n+\t      break;\n+\t    }\n+\n+\t  if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) == CPLD_NONE)\n+\t    /* An outer lambda won't let us capture 'this'.  */\n+\t    break;\n \n           lambda_stack = tree_cons (NULL_TREE,\n                                     lambda,\n@@ -5580,15 +5591,15 @@ lambda_expr_this_capture (tree lambda)\n           containing_function = decl_function_context (containing_function);\n         }\n \n-      if (DECL_NONSTATIC_MEMBER_FUNCTION_P (containing_function))\n-        {\n-          this_capture = add_default_capture (lambda_stack,\n-                                              /*id=*/get_identifier (\"__this\"),\n-                                              /* First parameter is 'this'.  */\n-                                              /*initializer=*/DECL_ARGUMENTS\n-                                                (containing_function));\n-        }\n+      if (!init && DECL_NONSTATIC_MEMBER_FUNCTION_P (containing_function)\n+\t  && !LAMBDA_FUNCTION_P (containing_function))\n+\t/* First parameter is 'this'.  */\n+\tinit = DECL_ARGUMENTS (containing_function);\n \n+      if (init)\n+\tthis_capture = add_default_capture (lambda_stack,\n+\t\t\t\t\t    /*id=*/get_identifier (\"__this\"),\n+\t\t\t\t\t    init);\n     }\n \n   if (!this_capture)"}, {"sha": "538775a08885174454c0916c05de121df528fddf", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-nested.C", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d16049ff0e6a545263fc4e1295661ad0891e0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d16049ff0e6a545263fc4e1295661ad0891e0c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nested.C?ref=71d16049ff0e6a545263fc4e1295661ad0891e0c", "patch": "@@ -3,6 +3,16 @@\n \n #include <cassert>\n \n+struct A {\n+  int i;\n+  A(): i(42) { }\n+  int f() {\n+    return [this]{\n+      return [=]{ return i; }();\n+    }();\n+  }\n+};\n+\n int main() {\n   int i = 1;\n \n@@ -47,6 +57,7 @@ int main() {\n \n   assert(i == 4);\n \n+  assert (A().f() == 42);\n+\n   return 0;\n }\n-"}]}