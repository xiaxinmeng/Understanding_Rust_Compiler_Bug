{"sha": "cf1e03717aecec7390802df60679b2921a4d3f91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YxZTAzNzE3YWVjZWM3MzkwODAyZGY2MDY3OWIyOTIxYTRkM2Y5MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-08T17:34:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-08T17:34:32Z"}, "message": "PR libstdc++/22102 (insert as close to hint as possible)\n\n2006-01-08  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/22102 (insert as close to hint as possible)\n\t* include/bits/stl_tree.h (_Rb_tree<>::_M_insert_lower,\n\t_M_insert_equal_lower): New.\n\t(_M_insert_equal(iterator, const _Val&),\n\t_M_insert_equal(const_iterator, const _Val&)): Use the above.\n\t* docs/html/ext/howto.html: Add an entry for DR 233.\n\t* testsuite/23_containers/multiset/modifiers/insert/22102.cc: New.\n\t* testsuite/23_containers/multimap/modifiers/insert/22102.cc: New.\n\n\t* testsuite/23_containers/set/insert/: Move...\n\t* testsuite/23_containers/set/modifiers/insert/: ...here.\n\t* testsuite/23_containers/map/insert/: Move...\n\t* testsuite/23_containers/map/modifiers/insert/: ...here.\n\t* testsuite/23_containers/multiset/insert/: Move...\n\t* testsuite/23_containers/multiset/modifiers/insert/: ...here.\n\nFrom-SVN: r109473", "tree": {"sha": "497e08462c45165b8eb2f8abe2bdc6bcd1929496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/497e08462c45165b8eb2f8abe2bdc6bcd1929496"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf1e03717aecec7390802df60679b2921a4d3f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1e03717aecec7390802df60679b2921a4d3f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf1e03717aecec7390802df60679b2921a4d3f91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1e03717aecec7390802df60679b2921a4d3f91/comments", "author": null, "committer": null, "parents": [{"sha": "1d85354c982ba2e2c093de622b28a10fd2518dca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d85354c982ba2e2c093de622b28a10fd2518dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d85354c982ba2e2c093de622b28a10fd2518dca"}], "stats": {"total": 356, "additions": 354, "deletions": 2}, "files": [{"sha": "5e5e1b86ffd6d1a44cfd2efacf7ec26bda2e7c8f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "patch": "@@ -1,3 +1,21 @@\n+2006-01-08  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/22102 (insert as close to hint as possible)\n+\t* include/bits/stl_tree.h (_Rb_tree<>::_M_insert_lower,\n+\t_M_insert_equal_lower): New.\n+\t(_M_insert_equal(iterator, const _Val&),\n+\t_M_insert_equal(const_iterator, const _Val&)): Use the above.\n+\t* docs/html/ext/howto.html: Add an entry for DR 233.\n+\t* testsuite/23_containers/multiset/modifiers/insert/22102.cc: New.\n+\t* testsuite/23_containers/multimap/modifiers/insert/22102.cc: New.\n+\n+\t* testsuite/23_containers/set/insert/: Move...\n+\t* testsuite/23_containers/set/modifiers/insert/: ...here.\n+\t* testsuite/23_containers/map/insert/: Move...\n+\t* testsuite/23_containers/map/modifiers/insert/: ...here.\n+\t* testsuite/23_containers/multiset/insert/: Move...\n+\t* testsuite/23_containers/multiset/modifiers/insert/: ...here.\n+\n 2006-01-06  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_tree.h (_Rb_tree<>::insert_unique): Rename"}, {"sha": "bc0b358b9f3f755565de864d84588422f8418ab3", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "patch": "@@ -399,6 +399,13 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n         is specified in the conversion specification.\n     </dd>\n \n+    <dt><a href=\"lwg-active.html#233\">233</a>:\n+        <em>Insertion hints in associative containers</em>\n+    </dt>\n+    <dd>Implement N1780, first check before then check after, insert as close\n+        to hint as possible.\n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#235\">235</a>:\n         <em>No specification of default ctor for reverse_iterator</em>\n     </dt>"}, {"sha": "ecea171c457c060b678c56b2de2b5eeb3fe3131a", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "patch": "@@ -548,6 +548,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       iterator\n       _M_insert(_Base_ptr __x, _Base_ptr __y, const value_type& __v);\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 233. Insertion hints in associative containers.\n+      iterator\n+      _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type& __v);\n+\n       const_iterator\n       _M_insert(_Const_Base_ptr __x, _Const_Base_ptr __y,\n \t\tconst value_type& __v);\n@@ -657,6 +662,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       iterator\n       _M_insert_equal(const value_type& __x);\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 233. Insertion hints in associative containers.\n+      iterator\n+      _M_insert_equal_lower(const value_type& __x);\n+\n       iterator\n       _M_insert_unique(iterator __position, const value_type& __x);\n \n@@ -833,6 +843,24 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return iterator(__z);\n     }\n \n+  template<typename _Key, typename _Val, typename _KeyOfValue,\n+           typename _Compare, typename _Alloc>\n+    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n+    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n+    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val& __v)\n+    {\n+      bool __insert_left = (__x != 0 || __p == _M_end()\n+\t\t\t    || !_M_impl._M_key_compare(_S_key(__p),\n+\t\t\t\t\t\t       _KeyOfValue()(__v)));\n+\n+      _Link_type __z = _M_create_node(__v);\n+\n+      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,  \n+\t\t\t\t    this->_M_impl._M_header);\n+      ++_M_impl._M_node_count;\n+      return iterator(__z);\n+    }\n+\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator\n@@ -869,6 +897,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return _M_insert(__x, __y, __v);\n     }\n \n+  template<typename _Key, typename _Val, typename _KeyOfValue,\n+           typename _Compare, typename _Alloc>\n+    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n+    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n+    _M_insert_equal_lower(const _Val& __v)\n+    {\n+      _Link_type __x = _M_begin();\n+      _Link_type __y = _M_end();\n+      while (__x != 0)\n+\t{\n+\t  __y = __x;\n+\t  __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?\n+\t        _S_left(__x) : _S_right(__x);\n+\t}\n+      return _M_insert_lower(__x, __y, __v);\n+    }\n+\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n     void\n@@ -1110,7 +1155,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\treturn _M_insert(__after._M_node, __after._M_node, __v);\n \t    }\n \t  else\n-\t    return _M_insert_equal(__v);\n+\t    return _M_insert_equal_lower(__v);\n \t}\n     }\n \n@@ -1164,7 +1209,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\treturn _M_insert(__after._M_node, __after._M_node, __v);\n \t    }\n \t  else\n-\t    return const_iterator(_M_insert_equal(__v));\n+\t    return const_iterator(_M_insert_equal_lower(__v));\n \t}\n     }\n "}, {"sha": "7bf7a6cb96a34116fdec335c4e43674eb1cebf53", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/insert/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F1.cc?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "previous_filename": "libstdc++-v3/testsuite/23_containers/map/insert/1.cc"}, {"sha": "1132aad7748828ab669cffcf9c619ceca2260c7b", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/insert/16813.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F16813.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F16813.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F16813.cc?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "previous_filename": "libstdc++-v3/testsuite/23_containers/map/insert/16813.cc"}, {"sha": "dfaf4c252d7218150c4482342031b2714fd01b58", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/insert/22102.cc", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2F22102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2F22102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Finsert%2F22102.cc?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "patch": "@@ -0,0 +1,141 @@\n+// 2006-01-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.3.2  Class template multimap\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/22102\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::multimap<int, int>   Mmap;\n+  typedef Mmap::value_type          value_type;\n+  typedef Mmap::iterator            iterator;\n+  \n+  Mmap mm1;\n+  \n+  const iterator it1 = mm1.insert(value_type(0, 0));\n+  const iterator it2 = mm1.insert(value_type(1, 1));  \n+  const iterator it3 = mm1.insert(value_type(2, 2));\n+\n+  const value_type vt1(2, 1);\n+  const iterator it4 = mm1.insert(it1, vt1);\n+  iterator it5 = it4;\n+  iterator it6 = it4;\n+  VERIFY( mm1.size() == 4 );\n+  VERIFY( *it4 == vt1 );\n+  VERIFY( ++it5 == it3 );\n+  VERIFY( --it6 == it2 );\n+  VERIFY( *it5 == *it3 );\n+  VERIFY( *it6 == *it2 );\n+\n+  const value_type vt2(2, 0);\n+  const iterator it7 = mm1.insert(mm1.begin(), vt2);\n+  iterator it8 = it7;\n+  iterator it9 = it7;\n+  VERIFY( mm1.size() == 5 );\n+  VERIFY( *it7 == vt2 );\n+  VERIFY( ++it8 == it4 );\n+  VERIFY( --it9 == it2 );\n+  VERIFY( *it8 == *it4 );\n+  VERIFY( *it9 == *it2 );\n+\n+  const value_type vt3(2, -1);\n+  const iterator it10 = mm1.insert(it1, vt3);\n+  iterator it11 = it10;\n+  iterator it12 = it10;\n+  VERIFY( mm1.size() == 6 );\n+  VERIFY( *it10 == vt3 );\n+  VERIFY( ++it11 == it7 );\n+  VERIFY( --it12 == it2 );\n+  VERIFY( *it11 == *it7 );\n+  VERIFY( *it12 == *it2 );\n+\n+  const value_type vt4(0, 1);\n+  const iterator it13 = mm1.insert(it10, vt4);\n+  iterator it14 = it13;\n+  iterator it15 = it13;\n+  VERIFY( mm1.size() == 7 );\n+  VERIFY( *it13 == vt4 );\n+  VERIFY( ++it14 == it2 );\n+  VERIFY( --it15 == it1 );\n+  VERIFY( *it14 == *it2 );\n+  VERIFY( *it15 == *it1 );\n+\n+  const value_type vt5(1, 0);\n+  const iterator it16 = mm1.insert(it13, vt5);\n+  iterator it17 = it16;\n+  iterator it18 = it16;\n+  VERIFY( mm1.size() == 8 );\n+  VERIFY( *it16 == vt5 );\n+  VERIFY( ++it17 == it2 );\n+  VERIFY( --it18 == it13 );\n+  VERIFY( *it17 == *it2 );\n+  VERIFY( *it18 == *it13 );\n+\n+  const value_type vt6(0, -1);\n+  const iterator it19 = mm1.insert(it1, vt6);\n+  iterator it20 = it19;\n+  VERIFY( mm1.size() == 9 );\n+  VERIFY( *it19 == vt6 );\n+  VERIFY( it19 == mm1.begin() );\n+  VERIFY( ++it20 == it1 );\n+  VERIFY( *it20 == *it1 );\n+\n+  const value_type vt7(3, 3);\n+  const iterator it21 = mm1.insert(it19, vt7);\n+  iterator it22 = it21;\n+  iterator it23 = it21;\n+  VERIFY( mm1.size() == 10 );\n+  VERIFY( *it21 == vt7 );\n+  VERIFY( ++it22 == mm1.end() );\n+  VERIFY( --it23 == it3 );\n+  VERIFY( *it23 == *it3 );\n+\n+  const value_type vt8(2, 3);\n+  const iterator it24 = mm1.insert(mm1.end(), vt8);\n+  iterator it25 = it24;\n+  iterator it26 = it24;\n+  VERIFY( mm1.size() == 11 );\n+  VERIFY( *it24 == vt8 );\n+  VERIFY( ++it25 == it21 );\n+  VERIFY( --it26 == it3 );\n+  VERIFY( *it25 == *it21 );\n+  VERIFY( *it26 == *it3 );   \n+    \n+  const value_type vt9(3, 2);\n+  const iterator it27 = mm1.insert(it3, vt9);\n+  iterator it28 = it27;\n+  iterator it29 = it27;\n+  VERIFY( mm1.size() == 12 );\n+  VERIFY( *it27 == vt9 );\n+  VERIFY( ++it28 == it21 );\n+  VERIFY( --it29 == it24 );\n+  VERIFY( *it28 == *it21 );\n+  VERIFY( *it29 == *it24 ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1a5de3dc7447856e8fad6b9557db5f5b5819518", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/insert/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F1.cc?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "previous_filename": "libstdc++-v3/testsuite/23_containers/multiset/insert/1.cc"}, {"sha": "0f654cb0500d1459b88b2500ec4fc4ffe63c885e", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/insert/2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F2.cc?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "previous_filename": "libstdc++-v3/testsuite/23_containers/multiset/insert/2.cc"}, {"sha": "99b808f1b33e6687ba4d549ceae7390ffb4446e2", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/insert/22102.cc", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F22102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F22102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Finsert%2F22102.cc?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "patch": "@@ -0,0 +1,141 @@\n+// 2006-01-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 23.3.4  Class template multiset\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/22102\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::multiset<int>        Mset;\n+  typedef Mset::value_type          value_type;\n+  typedef Mset::iterator            iterator;\n+  \n+  Mset ms1;\n+  \n+  const iterator it1 = ms1.insert(value_type(0));\n+  const iterator it2 = ms1.insert(value_type(1));  \n+  const iterator it3 = ms1.insert(value_type(2));\n+\n+  const value_type vt1(2);\n+  const iterator it4 = ms1.insert(it1, vt1);\n+  iterator it5 = it4;\n+  iterator it6 = it4;\n+  VERIFY( ms1.size() == 4 );\n+  VERIFY( *it4 == vt1 );\n+  VERIFY( ++it5 == it3 );\n+  VERIFY( --it6 == it2 );\n+  VERIFY( *it5 == *it3 );\n+  VERIFY( *it6 == *it2 );\n+\n+  const value_type vt2(2);\n+  const iterator it7 = ms1.insert(ms1.begin(), vt2);\n+  iterator it8 = it7;\n+  iterator it9 = it7;\n+  VERIFY( ms1.size() == 5 );\n+  VERIFY( *it7 == vt2 );\n+  VERIFY( ++it8 == it4 );\n+  VERIFY( --it9 == it2 );\n+  VERIFY( *it8 == *it4 );\n+  VERIFY( *it9 == *it2 );\n+\n+  const value_type vt3(2);\n+  const iterator it10 = ms1.insert(it1, vt3);\n+  iterator it11 = it10;\n+  iterator it12 = it10;\n+  VERIFY( ms1.size() == 6 );\n+  VERIFY( *it10 == vt3 );\n+  VERIFY( ++it11 == it7 );\n+  VERIFY( --it12 == it2 );\n+  VERIFY( *it11 == *it7 );\n+  VERIFY( *it12 == *it2 );\n+\n+  const value_type vt4(0);\n+  const iterator it13 = ms1.insert(it10, vt4);\n+  iterator it14 = it13;\n+  iterator it15 = it13;\n+  VERIFY( ms1.size() == 7 );\n+  VERIFY( *it13 == vt4 );\n+  VERIFY( ++it14 == it2 );\n+  VERIFY( --it15 == it1 );\n+  VERIFY( *it14 == *it2 );\n+  VERIFY( *it15 == *it1 );\n+\n+  const value_type vt5(1);\n+  const iterator it16 = ms1.insert(it13, vt5);\n+  iterator it17 = it16;\n+  iterator it18 = it16;\n+  VERIFY( ms1.size() == 8 );\n+  VERIFY( *it16 == vt5 );\n+  VERIFY( ++it17 == it2 );\n+  VERIFY( --it18 == it13 );\n+  VERIFY( *it17 == *it2 );\n+  VERIFY( *it18 == *it13 );\n+\n+  const value_type vt6(0);\n+  const iterator it19 = ms1.insert(it1, vt6);\n+  iterator it20 = it19;\n+  VERIFY( ms1.size() == 9 );\n+  VERIFY( *it19 == vt6 );\n+  VERIFY( it19 == ms1.begin() );\n+  VERIFY( ++it20 == it1 );\n+  VERIFY( *it20 == *it1 );\n+\n+  const value_type vt7(3);\n+  const iterator it21 = ms1.insert(it19, vt7);\n+  iterator it22 = it21;\n+  iterator it23 = it21;\n+  VERIFY( ms1.size() == 10 );\n+  VERIFY( *it21 == vt7 );\n+  VERIFY( ++it22 == ms1.end() );\n+  VERIFY( --it23 == it3 );\n+  VERIFY( *it23 == *it3 );\n+\n+  const value_type vt8(2);\n+  const iterator it24 = ms1.insert(ms1.end(), vt8);\n+  iterator it25 = it24;\n+  iterator it26 = it24;\n+  VERIFY( ms1.size() == 11 );\n+  VERIFY( *it24 == vt8 );\n+  VERIFY( ++it25 == it21 );\n+  VERIFY( --it26 == it3 );\n+  VERIFY( *it25 == *it21 );\n+  VERIFY( *it26 == *it3 );   \n+    \n+  const value_type vt9(3);\n+  const iterator it27 = ms1.insert(it3, vt9);\n+  iterator it28 = it27;\n+  iterator it29 = it27;\n+  VERIFY( ms1.size() == 12 );\n+  VERIFY( *it27 == vt9 );\n+  VERIFY( ++it28 == it21 );\n+  VERIFY( --it29 == it24 );\n+  VERIFY( *it28 == *it21 );\n+  VERIFY( *it29 == *it24 ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "22fdf0debbb327688642b54ed69cef37a8bc7751", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/insert/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Finsert%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf1e03717aecec7390802df60679b2921a4d3f91/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Finsert%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Finsert%2F1.cc?ref=cf1e03717aecec7390802df60679b2921a4d3f91", "previous_filename": "libstdc++-v3/testsuite/23_containers/set/insert/1.cc"}]}