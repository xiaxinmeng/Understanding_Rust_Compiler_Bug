{"sha": "8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkMTE5ZDg1N2I3MjdjZTBlZTdiM2M3YWVhZDM4ZDhmZGNjMWE3ZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-10T12:24:24Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-11-10T12:24:24Z"}, "message": "re PR fortran/82934 (Segfault on assumed character length in allocate)\n\n2017-11-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82934\n\t* trans-stmt.c (gfc_trans_allocate): Remove the gcc_assert on\n\tnull string length for assumed length typespec and set\n\texpr3_esize to NULL_TREE;\n\n2017-11-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/82934\n\t* gfortran.dg/allocate_assumed_charlen_1.f90: New test.\n\nFrom-SVN: r254624", "tree": {"sha": "14b398d7e1063d2eaaec7b3e0c7797797beeb428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14b398d7e1063d2eaaec7b3e0c7797797beeb428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/comments", "author": null, "committer": null, "parents": [{"sha": "9e875fd864e1ddf636c015a35985bccf732b645a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e875fd864e1ddf636c015a35985bccf732b645a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e875fd864e1ddf636c015a35985bccf732b645a"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "fb067aa3d6f27b777fb38696c5a327c5423885f9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e", "patch": "@@ -1,3 +1,10 @@\n+2017-11-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82934\n+\t* trans-stmt.c (gfc_trans_allocate): Remove the gcc_assert on\n+\tnull string length for assumed length typespec and set\n+\texpr3_esize to NULL_TREE;\n+\n 2017-11-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/78619"}, {"sha": "ea0f9529f1c7717809fc756685e2b365dccd0e19", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e", "patch": "@@ -5913,10 +5913,9 @@ gfc_trans_allocate (gfc_code * code)\n       if (code->ext.alloc.ts.type != BT_CHARACTER)\n \texpr3_esize = TYPE_SIZE_UNIT (\n \t      gfc_typenode_for_spec (&code->ext.alloc.ts));\n-      else\n+      else if (code->ext.alloc.ts.u.cl->length != NULL)\n \t{\n \t  gfc_expr *sz;\n-\t  gcc_assert (code->ext.alloc.ts.u.cl->length != NULL);\n \t  sz = gfc_copy_expr (code->ext.alloc.ts.u.cl->length);\n \t  gfc_init_se (&se_sz, NULL);\n \t  gfc_conv_expr (&se_sz, sz);\n@@ -5930,6 +5929,8 @@ gfc_trans_allocate (gfc_code * code)\n \t\t\t\t\t tmp, se_sz.expr);\n \t  expr3_esize = gfc_evaluate_now (expr3_esize, &block);\n \t}\n+      else\n+\texpr3_esize = NULL_TREE;\n     }\n \n   /* The routine gfc_trans_assignment () already implements all"}, {"sha": "620044a92a17b7bb72d3d99f094abebfba14b140", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e", "patch": "@@ -1,3 +1,8 @@\n+2017-11-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/82934\n+\t* gfortran.dg/allocate_assumed_charlen_1.f90: New test.\n+\n 2017-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/82916"}, {"sha": "382df36375d55ada3e07898111763d1b999716bd", "filename": "gcc/testsuite/gfortran.dg/allocate_assumed_charlen_1.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_1.f90?ref=8cd119d857b727ce0ee7b3c7aead38d8fdcc1a7e", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+!\n+! PR82934: Segfault on compilation in trans-stmt.c:5919(8.0.0).\n+! The original report only had one item in the allocate list. This\n+! has been doubled up to verify that the correct string length is\n+! is used in the allocation.\n+!\n+! Contributed by FortranFan on clf.\n+!\n+   character(len=42), allocatable :: foo\n+   character(len=22), allocatable :: foofoo\n+\n+   call alloc( foo , foofoo)\n+\n+   if (len(foo) .ne. 42) call abort\n+   if (len(foofoo) .ne. 22) call abort\n+\n+contains\n+\n+   subroutine alloc( bar, barbar )\n+\n+      character(len=*), allocatable :: bar, barbar\n+\n+      allocate( character(len=*) :: bar , barbar) ! <= Here!\n+\n+   end subroutine\n+\n+end"}]}