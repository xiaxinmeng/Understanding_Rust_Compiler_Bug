{"sha": "2d4e2a688ea50fdde672bf7502c202c049924039", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ0ZTJhNjg4ZWE1MGZkZGU2NzJiZjc1MDJjMjAyYzA0OTkyNDAzOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-02T18:04:48Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-02T18:04:48Z"}, "message": "re PR c++/50956 (-Wcast-qual does not work)\n\n2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50956\n\t* builtins.c (fold_builtin_memchr): Fix cast.\n\n/cp\n2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50956\n\t* typeck.c (build_const_cast_1): Fix -Wcast-qual for false\n\tcomp_ptr_ttypes_const.\n\n/testsuite\n2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/50956\n\t* g++.dg/warn/Wcast-qual2.C: New.\n\nFrom-SVN: r180786", "tree": {"sha": "90c45f83ea3800ead15ab39e98c2fc820e041ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90c45f83ea3800ead15ab39e98c2fc820e041ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d4e2a688ea50fdde672bf7502c202c049924039", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4e2a688ea50fdde672bf7502c202c049924039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4e2a688ea50fdde672bf7502c202c049924039", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4e2a688ea50fdde672bf7502c202c049924039/comments", "author": null, "committer": null, "parents": [{"sha": "742e5233b8cd28b4ca3dc677b47566c2cc8000b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742e5233b8cd28b4ca3dc677b47566c2cc8000b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742e5233b8cd28b4ca3dc677b47566c2cc8000b7"}], "stats": {"total": 79, "additions": 53, "deletions": 26}, "files": [{"sha": "fe07de1b70fe8c3b9ffec3300d29b5c4008481c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d4e2a688ea50fdde672bf7502c202c049924039", "patch": "@@ -1,3 +1,8 @@\n+2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50956\n+\t* builtins.c (fold_builtin_memchr): Fix cast.\n+\n 2011-11-02  Teresa Johnson  <tejohnson@google.com>\n \n \t* config/i386/predicates.md (promotable_binary_operator): Add minus"}, {"sha": "bad31659a83ae71a4d5d4ec99a82e1ea16e7abea", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2d4e2a688ea50fdde672bf7502c202c049924039", "patch": "@@ -8427,7 +8427,7 @@ fold_builtin_memchr (location_t loc, tree arg1, tree arg2, tree len, tree type)\n \t  if (target_char_cast (arg2, &c))\n \t    return NULL_TREE;\n \n-\t  r = (char *) memchr (p1, c, tree_low_cst (len, 1));\n+\t  r = (const char *) memchr (p1, c, tree_low_cst (len, 1));\n \n \t  if (r == NULL)\n \t    return build_int_cst (TREE_TYPE (arg1), 0);"}, {"sha": "90651e6e54061b4db32c890c29ea5b1996455982", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d4e2a688ea50fdde672bf7502c202c049924039", "patch": "@@ -1,3 +1,9 @@\n+2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50956\n+\t* typeck.c (build_const_cast_1): Fix -Wcast-qual for false\n+\tcomp_ptr_ttypes_const.\n+\n 2011-11-02  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Make-lang.in (g++spec.o): Pass SHLIB instead of SHLIB_LINK."}, {"sha": "0b1f217a9085a68d391b126c070a417ef83e9dfe", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2d4e2a688ea50fdde672bf7502c202c049924039", "patch": "@@ -6345,34 +6345,41 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n \treturn error_mark_node;\n     }\n \n-  if ((TYPE_PTR_P (src_type) || TYPE_PTRMEM_P (src_type))\n-      && comp_ptr_ttypes_const (dst_type, src_type))\n+  if (TYPE_PTR_P (src_type) || TYPE_PTRMEM_P (src_type))\n     {\n-      if (valid_p)\n-\t{\n-\t  *valid_p = true;\n-\t  /* This cast is actually a C-style cast.  Issue a warning if\n-\t     the user is making a potentially unsafe cast.  */\n-\t  check_for_casting_away_constness (src_type, dst_type, CAST_EXPR,\n-\t\t\t\t\t    complain);\n-\t}\n-      if (reference_type)\n+      if (comp_ptr_ttypes_const (dst_type, src_type))\n \t{\n-\t  expr = cp_build_addr_expr (expr, complain);\n-\t  expr = build_nop (reference_type, expr);\n-\t  return convert_from_reference (expr);\n-\t}\n-      else\n-\t{\n-\t  expr = decay_conversion (expr);\n-\t  /* build_c_cast puts on a NOP_EXPR to make the result not an\n-\t     lvalue.  Strip such NOP_EXPRs if VALUE is being used in\n-\t     non-lvalue context.  */\n-\t  if (TREE_CODE (expr) == NOP_EXPR\n-\t      && TREE_TYPE (expr) == TREE_TYPE (TREE_OPERAND (expr, 0)))\n-\t    expr = TREE_OPERAND (expr, 0);\n-\t  return build_nop (dst_type, expr);\n+\t  if (valid_p)\n+\t    {\n+\t      *valid_p = true;\n+\t      /* This cast is actually a C-style cast.  Issue a warning if\n+\t\t the user is making a potentially unsafe cast.  */\n+\t      check_for_casting_away_constness (src_type, dst_type,\n+\t\t\t\t\t\tCAST_EXPR, complain);\n+\t    }\n+\t  if (reference_type)\n+\t    {\n+\t      expr = cp_build_addr_expr (expr, complain);\n+\t      expr = build_nop (reference_type, expr);\n+\t      return convert_from_reference (expr);\n+\t    }\n+\t  else\n+\t    {\n+\t      expr = decay_conversion (expr);\n+\t      /* build_c_cast puts on a NOP_EXPR to make the result not an\n+\t\t lvalue.  Strip such NOP_EXPRs if VALUE is being used in\n+\t\t non-lvalue context.  */\n+\t      if (TREE_CODE (expr) == NOP_EXPR\n+\t\t  && TREE_TYPE (expr) == TREE_TYPE (TREE_OPERAND (expr, 0)))\n+\t\texpr = TREE_OPERAND (expr, 0);\n+\t      return build_nop (dst_type, expr);\n+\t    }\n \t}\n+      else if (valid_p\n+\t       && !at_least_as_qualified_p (TREE_TYPE (dst_type),\n+\t\t\t\t\t    TREE_TYPE (src_type)))\n+\tcheck_for_casting_away_constness (src_type, dst_type, CAST_EXPR,\n+\t\t\t\t\t  complain);\n     }\n \n   if (complain & tf_error)"}, {"sha": "aae9e36114492f4ab103a3bcaef4edc0e12163d0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d4e2a688ea50fdde672bf7502c202c049924039", "patch": "@@ -1,3 +1,8 @@\n+2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50956\n+\t* g++.dg/warn/Wcast-qual2.C: New.\n+\n 2011-11-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/50763"}, {"sha": "23dbb4d39b0f4ed2ac88b5771dd51f68d3fdddc3", "filename": "gcc/testsuite/g++.dg/warn/Wcast-qual2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d4e2a688ea50fdde672bf7502c202c049924039/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C?ref=2d4e2a688ea50fdde672bf7502c202c049924039", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/50956\n+// { dg-options \"-Wcast-qual\" }\n+\n+void* p = (void*)\"txt\"; // { dg-warning \"cast\" }"}]}