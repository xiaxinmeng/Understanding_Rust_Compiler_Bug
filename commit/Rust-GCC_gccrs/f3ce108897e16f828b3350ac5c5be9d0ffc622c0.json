{"sha": "f3ce108897e16f828b3350ac5c5be9d0ffc622c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNjZTEwODg5N2UxNmY4MjhiMzM1MGFjNWM1YmU5ZDBmZmM2MjJjMA==", "commit": {"author": {"name": "Adam Nemet", "email": "anemet@caviumnetworks.com", "date": "2009-07-18T21:52:48Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-07-18T21:52:48Z"}, "message": "combine.c (try_widen_shift_mode): Add COUNT, OUTER_CODE and OUTER_CONST arguments.\n\n\t* combine.c (try_widen_shift_mode): Add COUNT, OUTER_CODE and\n\tOUTER_CONST arguments.\n\t<LSHIFTRT>: Use them to allow widening if the bits shifted in from\n\tthe new wider mode will be masked off.\n\t(simplify_shift_const_1): Adjust calls to try_widen_shift_mode.\n\nFrom-SVN: r149780", "tree": {"sha": "b92b316e33c2e78b466282b4c970d1aa20aef946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b92b316e33c2e78b466282b4c970d1aa20aef946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ce108897e16f828b3350ac5c5be9d0ffc622c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ce108897e16f828b3350ac5c5be9d0ffc622c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ce108897e16f828b3350ac5c5be9d0ffc622c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ce108897e16f828b3350ac5c5be9d0ffc622c0/comments", "author": null, "committer": null, "parents": [{"sha": "3e63dd3a366d314071d1568917c5a9887d113d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e63dd3a366d314071d1568917c5a9887d113d68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e63dd3a366d314071d1568917c5a9887d113d68"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "c087253a80a7f7e89c1665d6496ac99fdcbcf766", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ce108897e16f828b3350ac5c5be9d0ffc622c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ce108897e16f828b3350ac5c5be9d0ffc622c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3ce108897e16f828b3350ac5c5be9d0ffc622c0", "patch": "@@ -1,3 +1,11 @@\n+2009-07-18  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* combine.c (try_widen_shift_mode): Add COUNT, OUTER_CODE and\n+\tOUTER_CONST arguments.\n+\t<LSHIFTRT>: Use them to allow widening if the bits shifted in from\n+\tthe new wider mode will be masked off.\n+\t(simplify_shift_const_1): Adjust calls to try_widen_shift_mode.\n+\n 2009-07-18  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* combine.c (try_widen_shift_mode) <LSHIFTRT>: Allow widening if the"}, {"sha": "39daf2881d4f45402e049e1eff477f89ba354395", "filename": "gcc/combine.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ce108897e16f828b3350ac5c5be9d0ffc622c0/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ce108897e16f828b3350ac5c5be9d0ffc622c0/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f3ce108897e16f828b3350ac5c5be9d0ffc622c0", "patch": "@@ -8985,11 +8985,14 @@ merge_outer_ops (enum rtx_code *pop0, HOST_WIDE_INT *pconst0, enum rtx_code op1,\n /* A helper to simplify_shift_const_1 to determine the mode we can perform\n    the shift in.  The original shift operation CODE is performed on OP in\n    ORIG_MODE.  Return the wider mode MODE if we can perform the operation\n-   in that mode.  Return ORIG_MODE otherwise.  */\n+   in that mode.  Return ORIG_MODE otherwise.  We can also assume that the\n+   result of the shift is subject to operation OUTER_CODE with operand\n+   OUTER_CONST.  */\n \n static enum machine_mode\n-try_widen_shift_mode (enum rtx_code code, rtx op,\n-\t\t      enum machine_mode orig_mode, enum machine_mode mode)\n+try_widen_shift_mode (enum rtx_code code, rtx op, int count,\n+\t\t      enum machine_mode orig_mode, enum machine_mode mode,\n+\t\t      enum rtx_code outer_code, HOST_WIDE_INT outer_const)\n {\n   if (orig_mode == mode)\n     return mode;\n@@ -9012,6 +9015,21 @@ try_widen_shift_mode (enum rtx_code code, rtx op,\n       if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n \t  && (nonzero_bits (op, mode) & ~GET_MODE_MASK (orig_mode)) == 0)\n \treturn mode;\n+\n+      /* We can also widen if the bits brought in will be masked off.  This\n+\t operation is performed in ORIG_MODE.  */\n+      if (outer_code == AND\n+\t  && GET_MODE_BITSIZE (orig_mode) <= HOST_BITS_PER_WIDE_INT)\n+\t{\n+\t  int care_bits;\n+\n+\t  outer_const &= GET_MODE_MASK (orig_mode);\n+\t  care_bits = exact_log2 (outer_const + 1);\n+\n+\t  if (care_bits >= 0\n+\t      && GET_MODE_BITSIZE (orig_mode) - care_bits >= count)\n+\t    return mode;\n+\t}\n       /* fall through */\n \n     case ROTATE:\n@@ -9084,7 +9102,8 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n \t    count = bitsize - count;\n \t}\n \n-      shift_mode = try_widen_shift_mode (code, varop, result_mode, mode);\n+      shift_mode = try_widen_shift_mode (code, varop, count, result_mode,\n+\t\t\t\t\t mode, outer_op, outer_const);\n \n       /* Handle cases where the count is greater than the size of the mode\n \t minus 1.  For ASHIFT, use the size minus one as the count (this can\n@@ -9682,7 +9701,8 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n       break;\n     }\n \n-  shift_mode = try_widen_shift_mode (code, varop, result_mode, mode);\n+  shift_mode = try_widen_shift_mode (code, varop, count, result_mode, mode,\n+\t\t\t\t     outer_op, outer_const);\n \n   /* We have now finished analyzing the shift.  The result should be\n      a shift of type CODE with SHIFT_MODE shifting VAROP COUNT places.  If"}]}