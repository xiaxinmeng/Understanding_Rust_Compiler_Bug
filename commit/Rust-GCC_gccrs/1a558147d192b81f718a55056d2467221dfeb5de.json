{"sha": "1a558147d192b81f718a55056d2467221dfeb5de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1NTgxNDdkMTkyYjgxZjcxOGE1NTA1NmQyNDY3MjIxZGZlYjVkZQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2000-08-21T06:05:20Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2000-08-21T06:05:20Z"}, "message": "natSystem.cc (init_properties): Change sourceware reference to sources.redhat.com.\n\nSun Aug 20 21:02:48 2000  Anthony Green  <green@redhat.com>\n\n\t* java/lang/natSystem.cc (init_properties): Change sourceware\n\treference to sources.redhat.com.\n\n\t* include/java-props.h: Add _Jv_Jar_Class_Path.\n\t* prims.cc: Ditto.  Set it from\t`gij -jar file' option.\n\n\t* java/lang/natSystem.cc (init_properties): Set java.class.path\n\tfrom\n\t{gij -jar file}:{CLASSPATH variable}:{-Djava.class.path= or .}\n\n\t* java/util/PropertyPermission.java: Import from GNU Classpath.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am: Add java/util/PropertyPermission.java.\n\t* java/lang/System.java: Add setProperty method.\n\n\t* gij.cc (main): Add -jar option to execute jar files.\n\t(help): Describe -jar option.\n\t* prims.cc (_Jv_RunMain): Add support for jar execution mode.\n\t* gnu/gcj/tools/Gij.java: New file.\n\t* include/jvm.h: Add is_jar argument to _Jv_RunMain.\n\t* gnu/gcj/runtime/FirstThread.java (main): New method.\n\n\t* java/util/jar/Attributes.java: Correct comment spelling.\n\nFrom-SVN: r35829", "tree": {"sha": "f43cbb5fc8ea1cd44134f23db03b2228cc3604df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f43cbb5fc8ea1cd44134f23db03b2228cc3604df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a558147d192b81f718a55056d2467221dfeb5de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a558147d192b81f718a55056d2467221dfeb5de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a558147d192b81f718a55056d2467221dfeb5de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a558147d192b81f718a55056d2467221dfeb5de/comments", "author": null, "committer": null, "parents": [{"sha": "b485e15bf861b6eb5680c3a268036b2cdeacd656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b485e15bf861b6eb5680c3a268036b2cdeacd656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b485e15bf861b6eb5680c3a268036b2cdeacd656"}], "stats": {"total": 409, "additions": 385, "deletions": 24}, "files": [{"sha": "c019eaeb8031d596865c0866a9de09293be77b6b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -1,13 +1,42 @@\n+Sun Aug 20 21:02:48 2000  Anthony Green  <green@redhat.com>\n+\n+\t* java/lang/natSystem.cc (init_properties): Change sourceware\n+\treference to sources.redhat.com.\n+\n+\t* include/java-props.h: Add _Jv_Jar_Class_Path.\n+\t* prims.cc: Ditto.  Set it from\t`gij -jar file' option.\n+\n+\t* java/lang/natSystem.cc (init_properties): Set java.class.path\n+\tfrom\n+\t{gij -jar file}:{CLASSPATH variable}:{-Djava.class.path= or .}\n+\n+\t* java/util/PropertyPermission.java: Import from GNU Classpath.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am: Add java/util/PropertyPermission.java.\n+\t* java/lang/System.java: Add setProperty method.\n+\n+\t* gij.cc (main): Add -jar option to execute jar files.\n+\t(help): Describe -jar option.\n+\t* prims.cc (_Jv_RunMain): Add support for jar execution mode.\n+\t* gnu/gcj/tools/Gij.java: New file.\n+\t* include/jvm.h: Add is_jar argument to _Jv_RunMain.\n+\t* gnu/gcj/runtime/FirstThread.java (main): New method.\n+\n+\t* java/util/jar/Attributes.java: Correct comment spelling.\n+\n 2000-08-20  Mark Wielaard  <mark@klomp.org>\n \n \t* java/util/zip/Adler32.java: Make private variables really private\n \t* java/util/zip/CRC32.java: Make private variables really private\n-\t* java/util/zip/CheckedInputStream.java: skip() could skip to much bytes\n-\t* java/util/zip/InflaterInputStream.java: skip() could skip to much bytes\n+\t* java/util/zip/CheckedInputStream.java: skip() could skip to much\n+\tbytes\n+\t* java/util/zip/InflaterInputStream.java: skip() could skip to\n+\tmuch bytes\n \t* java/util/zip/ZipEntry.java: setCompressedSize() didn't check input\n \t* java/util/zip/ZipFile.java: size() new 1.2 method\n-\t* java/util/zip/ZipInputStream.java: Use createZipEntry not new ZipEntry.\n-    since 1.2 available() always returns just 1 or 0 when closed\n+\t* java/util/zip/ZipInputStream.java: Use createZipEntry not new\n+\tZipEntry.  since 1.2 available() always returns just 1 or 0 when\n+\tclosed\n \n Sun Aug 20 12:33:43 2000  Anthony Green  <green@redhat.com>\n "}, {"sha": "900987854b983f26ee057d2a9a739e3efdfc7887", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -1057,6 +1057,7 @@ java/util/NoSuchElementException.java \\\n java/util/Observable.java \\\n java/util/Observer.java\t\\\n java/util/Properties.java \\\n+java/util/PropertyPermission.java \\\n java/util/PropertyResourceBundle.java \\\n java/util/Random.java \\\n java/util/ResourceBundle.java \\"}, {"sha": "33aca70afbd08643dc2b0f74d7551a0e10805627", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -827,6 +827,7 @@ java/util/NoSuchElementException.java \\\n java/util/Observable.java \\\n java/util/Observer.java\t\\\n java/util/Properties.java \\\n+java/util/PropertyPermission.java \\\n java/util/PropertyResourceBundle.java \\\n java/util/Random.java \\\n java/util/ResourceBundle.java \\\n@@ -1443,6 +1444,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/MissingResourceException.P \\\n .deps/java/util/NoSuchElementException.P .deps/java/util/Observable.P \\\n .deps/java/util/Observer.P .deps/java/util/Properties.P \\\n+.deps/java/util/PropertyPermission.P \\\n .deps/java/util/PropertyResourceBundle.P .deps/java/util/Random.P \\\n .deps/java/util/ResourceBundle.P .deps/java/util/Set.P \\\n .deps/java/util/SimpleTimeZone.P .deps/java/util/Stack.P \\"}, {"sha": "7d53beb2abbd34655f9b221d75920590e0c07b42", "filename": "libjava/gij.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fgij.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fgij.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgij.cc?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -24,8 +24,10 @@ details.  */\n static void\n help ()\n {\n-  printf (\"Usage: gij [OPTION] ... CLASS [ARGS] ...\\n\\n\");\n-  printf (\"Interpret Java bytecodes\\n\\n\");\n+  printf (\"Usage: gij [OPTION] ... CLASS [ARGS] ...\\n\");\n+  printf (\"          to interpret Java bytecodes, or\\n\");\n+  printf (\"       gij -jar [OPTION] ... JARFILE [ARGS] ...\\n\");\n+  printf (\"          to execute a jar file\\n\\n\");\n   printf (\"  -DVAR=VAL         define property VAR with value VAL\\n\");\n   printf (\"  --help            print this help, then exit\\n\");\n   printf (\"  --ms=NUMBER       set initial heap size\\n\");\n@@ -51,6 +53,7 @@ main (int argc, const char **argv)\n   /* We rearrange ARGV so that all the -D options appear near the\n      beginning.  */\n   int last_D_option = 0;\n+  bool jar_mode = false;\n \n   int i;\n   for (i = 1; i < argc; ++i)\n@@ -73,6 +76,12 @@ main (int argc, const char **argv)\n \t  continue;\n \t}\n \n+      if (! strcmp (arg, \"-jar\"))\n+\t{\n+\t  jar_mode = true;\n+\t  continue;\n+\t}\n+\n       /* Allow both single or double hyphen for all remaining\n \t options.  */\n       if (arg[1] == '-')\n@@ -120,9 +129,12 @@ main (int argc, const char **argv)\n   if (argc - i < 1)\n     {\n       fprintf (stderr, \"Usage: gij [OPTION] ... CLASS [ARGS] ...\\n\");\n+      fprintf (stderr, \"          to interpret Java bytecodes, or\\n\");\n+      fprintf (stderr, \"       gij -jar [OPTION] ... JARFILE [ARGS] ...\\n\");\n+      fprintf (stderr, \"          to execute a jar file\\n\");\n       fprintf (stderr, \"Try `gij --help' for more information.\\n\");\n       exit (1);\n     }\n \n-  _Jv_RunMain (argv[i], argc - i, argv + i);\n+  _Jv_RunMain (argv[i], argc - i, argv + i, jar_mode);\n }"}, {"sha": "210222507133f7382d148e96e0381db9b1032bc8", "filename": "libjava/gnu/gcj/runtime/FirstThread.java", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fgnu%2Fgcj%2Fruntime%2FFirstThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fgnu%2Fgcj%2Fruntime%2FFirstThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FFirstThread.java?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -10,6 +10,8 @@\n \n package gnu.gcj.runtime;\n \n+import java.util.jar.*;\n+\n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n  * @date August 24, 1998 \n@@ -43,6 +45,27 @@ private static void die (String s)\n     System.exit(1);\n   }\n \n+  public static void main (String[] args)\n+  {\n+    try {\n+\n+      JarFile j = new JarFile (args[0]);\n+\n+      Attributes a = j.getManifest().getMainAttributes();\n+\n+      jarMainClassName = a.getValue(Attributes.Name.MAIN_CLASS);\n+\n+    } catch (Exception e) {\n+\n+      System.err.println (\"Failed to load Main-Class manifest attribute from\\n\" + args[0]);\n+\n+    }\n+  }\n+\n+  // If interpreter is invoked with -jar, the main class name is recorded\n+  // here.\n+  public static String jarMainClassName;\n+\n   // Private data.\n   private Class klass;\n   private String klass_name;"}, {"sha": "9be30996ebc1cd8d3da6aab15bcaed53c1c47b24", "filename": "libjava/include/java-props.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Finclude%2Fjava-props.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Finclude%2Fjava-props.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-props.h?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -22,6 +22,9 @@ typedef struct\n // Set to NULL-terminated list of properties set at compile time.\n extern const char **_Jv_Compiler_Properties;\n \n+// The JAR file to add to the beginning of java.class.path.\n+extern const char *_Jv_Jar_Class_Path;\n+\n // Properties taken from the user's environment.\n extern property_pair *_Jv_Environment_Properties;\n "}, {"sha": "65178851085cc4a6595c07b9b2e44af61e6c399b", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -157,7 +157,7 @@ void _Jv_SetMaximumHeapSize (const char *arg);\n void *_Jv_AllocBytesChecked (jsize size) __attribute__((__malloc__));\n \n extern \"C\" void JvRunMain (jclass klass, int argc, const char **argv);\n-void _Jv_RunMain (const char* name, int argc, const char **argv);\n+void _Jv_RunMain (const char* name, int argc, const char **argv, bool is_jar);\n \n // This function is used to determine the hash code of an object.\n inline jint"}, {"sha": "52dbe75988e5f1c44917e4487682b481d3c6a4dc", "filename": "libjava/java/lang/System.java", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fjava%2Flang%2FSystem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fjava%2Flang%2FSystem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FSystem.java?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -19,6 +19,7 @@\n import java.io.BufferedInputStream;\n import java.io.BufferedOutputStream;\n import java.util.Properties;\n+import java.util.PropertyPermission;\n \n /**\n  * @author Tom Tromey <tromey@cygnus.com>\n@@ -132,8 +133,12 @@ public static void setProperties (Properties props)\n     properties = props;\n   }\n \n-  // TODO 1.2.\n-  // public static String setProperty (String key, String value);\n+  public static String setProperty (String key, String value)\n+  {\n+    if (secman != null)\n+      secman.checkPermission (new PropertyPermission (key, \"write\"));\n+    return (String) properties.setProperty (key, value);\n+  }\n \n   // TODO 1.2.\n   // public static String mapLibraryName (String libname);"}, {"sha": "81f7860dad0e315f67a251eddb36040284a5d770", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -32,6 +32,7 @@ details.  */\n #include <java/lang/ArrayStoreException.h>\n #include <java/lang/ArrayIndexOutOfBoundsException.h>\n #include <java/lang/NullPointerException.h>\n+#include <java/lang/StringBuffer.h>\n #include <java/util/Properties.h>\n #include <java/io/PrintStream.h>\n #include <java/io/InputStream.h>\n@@ -216,7 +217,7 @@ java::lang::System::init_properties (void)\n   // (introduced in 1.2), and earlier versioning properties.\n   SET (\"java.version\", VERSION);\n   SET (\"java.vendor\", \"Free Software Foundation\");\n-  SET (\"java.vendor.url\", \"http://sourceware.cygnus.com/java/\");\n+  SET (\"java.vendor.url\", \"http://sources.redhat.com/java/\");\n   SET (\"java.class.version\", GCJVERSION);\n   SET (\"java.vm.specification.version\", \"1.1\");\n   SET (\"java.vm.specification.name\", \"Java(tm) Virtual Machine Specification\");\n@@ -263,13 +264,6 @@ java::lang::System::init_properties (void)\n     }\n #endif /* HAVE_UNAME */\n \n-  char *classpath = ::getenv(\"CLASSPATH\");\n-  // FIXME: find libgcj.zip and append its path?\n-  if (classpath != NULL)\n-    SET (\"java.class.path\", classpath);\n-  else\n-    SET (\"java.class.path\", \".\");\n-\n #ifndef NO_GETUID\n #ifdef HAVE_PWD_H\n   uid_t user_id = getuid ();\n@@ -353,4 +347,35 @@ java::lang::System::init_properties (void)\n \t  i++;\n \t}\n     }\n+\n+  // FIXME: find libgcj.zip and append its path?\n+  char *classpath = ::getenv(\"CLASSPATH\");\n+  jstring cp = properties->getProperty (JvNewStringLatin1(\"java.class.path\"));\n+  java::lang::StringBuffer *sb = new java::lang::StringBuffer ();\n+\n+  if (_Jv_Jar_Class_Path)\n+    {\n+      sb->append (JvNewStringLatin1 (_Jv_Jar_Class_Path));\n+#ifdef WIN32\n+      sb->append ((jchar) ';');\n+#else\n+      sb->append ((jchar) ':');\n+#endif;\n+    }\n+  if (classpath)\n+    {\n+      sb->append (JvNewStringLatin1 (classpath));\n+#ifdef WIN32\n+      sb->append ((jchar) ';');\n+#else\n+      sb->append ((jchar) ':');\n+#endif;\n+    }\n+  if (cp != NULL)\n+    sb->append (cp);\n+  else\n+    sb->append ((jchar) '.');\n+\n+  properties->put(JvNewStringLatin1 (\"java.class.path\"),\n+\t\t  sb->toString ());\n }"}, {"sha": "8d004c0b352b7a9a0959c2e03319eb3b9a357dea", "filename": "libjava/java/util/PropertyPermission.java", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fjava%2Futil%2FPropertyPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fjava%2Futil%2FPropertyPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FPropertyPermission.java?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -0,0 +1,238 @@\n+/* java.util.PropertyPermission\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.util;\n+import java.security.Permission;\n+import java.security.BasicPermission;\n+import java.security.PermissionCollection;\n+import java.io.ObjectStreamField;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.IOException;\n+\n+/**\n+ * This class represents the permission to access and modify a property.<br>\n+ *\n+ * The name is the name of the property, e.g. xxx.  You can also\n+ * use an asterisk \"*\" as described in BasicPermission <br>\n+ *\n+ * The action string is a comma-separated list if keywords.  There are\n+ * two possible actions:\n+ * <dl>\n+ * <dt>read</dt> \n+ * <dd>Allows to read the property via <code>System.getProperty</code>.</dd>\n+ * <dt>write</dt> \n+ * <dd>Allows to write the property via <code>System.setProperty</code>.</dd>\n+ * </dl>\n+ * \n+ * The action string is case insensitive (it is converted to lower case).\n+ *\n+ * @see Permission\n+ * @see BasicPermission\n+ * @author Jochen Hoenicke \n+ */\n+public final class PropertyPermission extends BasicPermission\n+{\n+  /**\n+   * @serialField action String\n+   *   The action string.\n+   */\n+  private static final ObjectStreamField[] serialPersistentFields =\n+  {\n+    new ObjectStreamField(\"action\", String.class)\n+  };\n+\n+  private static final long serialVersionUID = 885438825399942851L;\n+\n+  private static final int READ  = 1;\n+  private static final int WRITE = 2;\n+  private transient int actions;\n+\n+  private static String actionStrings[] = \n+  { \n+    \"\", \"read\", \"write\", \"read,write\" \n+  };\n+\n+  /**\n+   * Constructs a PropertyPermission witha he specified property.  Possible\n+   * actions are read and write.\n+   * @param name the name of the property.\n+   * @param actions the action string.\n+   * @exception IllegalArgumentException if name string contains an\n+   * illegal wildcard or actions string contains an illegal action\n+   */\n+  public PropertyPermission(String name, String actions)\n+  {\n+    super(name);\n+    setActions(actions.toLowerCase());\n+  }\n+\n+  /**\n+   * Parse the action string and convert actions from external to internal\n+   * form.  This will set the internal actions field.\n+   * @param actions the action string.\n+   * @exception IllegalArgumentException if actions string contains an\n+   * illegal action */\n+  private void setActions(String actions)\n+  {\n+    this.actions = 0;\n+    StringTokenizer actionTokenizer = new StringTokenizer(actions, \",\");\n+    while (actionTokenizer.hasMoreElements())\n+      {\n+\tString anAction = actionTokenizer.nextToken();\n+\tif (\"read\".equals(anAction))\n+\t  this.actions |= READ;\n+\telse if (\"write\".equals(anAction))\n+\t  this.actions |= WRITE;\n+\telse\n+\t  throw new IllegalArgumentException(\"illegal action \"+anAction);\n+      }\n+  }\n+\n+  /**\n+   * Check if this permission implies p.  This returns true iff all of\n+   * the following conditions are true:\n+   * <ul>\n+   * <li> p is a PropertyPermission </li>\n+   * <li> this.getName() implies p.getName(),  \n+   *  e.g. <code>java.*</code> implies <code>java.home</code> </li>\n+   * <li> this.getActions is a subset of p.getActions </li>\n+   * </ul>\n+   */\n+  public boolean implies(Permission p)\n+  {\n+    if (!(p instanceof PropertyPermission))\n+      return false;\n+    \n+    // We have to check the actions.\n+    PropertyPermission pp = (PropertyPermission) p;\n+    if ((pp.actions & ~actions) != 0)\n+      return false;\n+\n+    // BasicPermission checks for name.\n+    if (!super.implies(p))\n+      return false;\n+\n+    return true;\n+  }\n+\n+  /**\n+   * Returns the action string.  Note that this may differ from the string\n+   * given at the constructor:  The actions are converted to lowercase and\n+   * may be reordered.\n+   */\n+  public String getActions()\n+  {\n+    return actionStrings[actions];\n+  }\n+\n+  /**\n+   * Reads an object from the stream. This converts the external to the\n+   * internal representation.\n+   */\n+  private void readObject(ObjectInputStream s) \n+    throws IOException, ClassNotFoundException\n+  {\n+    ObjectInputStream.GetField fields = s.readFields();\n+    setActions((String) fields.get(\"actions\", null));\n+  }\n+\n+  /**\n+   * Writes an object to the stream. This converts the internal to the\n+   * external representation.\n+   */\n+  private void writeObject(ObjectOutputStream s) \n+    throws IOException\n+  {\n+    ObjectOutputStream.PutField fields = s.putFields();\n+    fields.put(\"actions\", getActions());\n+    s.writeFields();\n+  }\n+\n+  /**\n+   * Returns a permission collection suitable to take\n+   * PropertyPermission objects.\n+   * @return a new empty PermissionCollection.  \n+   */\n+  public PermissionCollection newPermissionCollection() \n+  {\n+    return new PermissionCollection() \n+      {\n+\tHashtable permissions = new Hashtable();\n+\tint allActions = 0;\n+\t\n+\tpublic void add(Permission permission) \n+\t  {\n+\t    if (isReadOnly())\n+\t      throw new IllegalStateException(\"readonly\");\n+\n+\t    // also check that permission is of correct type.\n+\t    PropertyPermission pp = (PropertyPermission) permission;\n+\t    String name = pp.getName();\n+\t    if (name.equals(\"*\"))\n+\t      allActions |= pp.actions;\n+\t    permissions.put(name, pp);\n+\t  }\n+\t\n+\tpublic boolean implies(Permission permission)\n+\t  {\n+\t    if (!(permission instanceof PropertyPermission))\n+\t      return false;\n+\n+\t    PropertyPermission toImply = (PropertyPermission) permission;\n+\t    if ((toImply.actions & ~allActions) == 0)\n+\t      return true;\n+\n+\t    String name = toImply.getName();\n+\t    if (name.equals(\"*\"))\n+\t      return false;\n+\n+\t    int prefixLength = name.length();\n+\t    if (name.endsWith(\"*\"))\n+\t      prefixLength -= 2;\n+\n+\t    while (true) {\n+\t      PropertyPermission forName = \n+\t\t(PropertyPermission) permissions.get(name);\n+\t      if (forName != null\n+\t\t  && (toImply.actions & ~forName.actions) == 0)\n+\t\treturn true;\n+\n+\t      prefixLength = name.lastIndexOf('.', prefixLength);\n+\t      if (prefixLength < 0)\n+\t\treturn false;\n+\t      name = name.substring(0, prefixLength + 1) + '*';\n+\t    }\n+\t  }\n+\t\n+\tpublic Enumeration elements()\n+\t  {\n+\t    return permissions.elements();\n+\t  }\n+      };\n+  }\n+}"}, {"sha": "6a01be57a19bd53f8ba42ae154be5ff4db93e9a3", "filename": "libjava/java/util/jar/Attributes.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fjava%2Futil%2Fjar%2FAttributes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fjava%2Futil%2Fjar%2FAttributes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fjar%2FAttributes.java?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -460,7 +460,7 @@ public boolean containsValue(Object attrValue) {\n     }\n \n     /**\n-     * Gives a Set of atrribute name and values pairs as MapEntries.\n+     * Gives a Set of attribute name and values pairs as MapEntries.\n      * @see java.util.Map.Entry\n      * @see java.util.Map#entrySet()\n      *"}, {"sha": "38714b300d92bff4456a3a4760743912c72b8490", "filename": "libjava/prims.cc", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a558147d192b81f718a55056d2467221dfeb5de/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=1a558147d192b81f718a55056d2467221dfeb5de", "patch": "@@ -79,6 +79,9 @@ static java::lang::OutOfMemoryError *no_memory;\n // Properties set at compile time.\n const char **_Jv_Compiler_Properties;\n \n+// The JAR file to add to the beginning of java.class.path.\n+const char *_Jv_Jar_Class_Path;\n+\n #ifndef DISABLE_GETENV_PROPERTIES\n // Property key/value pairs.\n property_pair *_Jv_Environment_Properties;\n@@ -888,8 +891,9 @@ JvRunMain (jclass klass, int argc, const char **argv)\n }\n \n void\n-_Jv_RunMain (const char *class_name, int argc, const char **argv)\n+_Jv_RunMain (const char *name, int argc, const char **argv, bool is_jar)\n {\n+  jstring class_name;\n   PROCESS_GCJ_PROPERTIES;\n \n   main_init ();\n@@ -900,12 +904,31 @@ _Jv_RunMain (const char *class_name, int argc, const char **argv)\n   _Jv_ThisExecutable (exec_name);\n #endif\n \n+  if (is_jar)\n+    {\n+      _Jv_Jar_Class_Path = strdup (name);\n+      arg_vec = JvConvertArgv (1, &_Jv_Jar_Class_Path);\n+\n+      main_thread = \n+\tnew gnu::gcj::runtime::FirstThread (&_CL_Q43gnu3gcj7runtime11FirstThread,\n+\t\t\t\t\t    arg_vec);\n+      main_thread->start();\n+      _Jv_ThreadWait ();\n+      \n+      class_name = gnu::gcj::runtime::FirstThread::jarMainClassName;\n+    }\n+  else\n+    class_name = JvNewStringLatin1 (name);\n+\n   arg_vec = JvConvertArgv (argc - 1, argv + 1);\n-  main_thread = new gnu::gcj::runtime::FirstThread (JvNewStringLatin1 (class_name),\n-\t\t\t\t\t\t    arg_vec);\n-  main_thread->start();\n-  _Jv_ThreadWait ();\n \n+  if (class_name)\n+    {\n+      main_thread = new gnu::gcj::runtime::FirstThread (class_name, arg_vec);\n+      main_thread->start();\n+      _Jv_ThreadWait ();\n+    }\n+  \n   java::lang::Runtime::getRuntime ()->exit (0);\n }\n "}]}