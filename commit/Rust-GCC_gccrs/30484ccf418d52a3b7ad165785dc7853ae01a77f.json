{"sha": "30484ccf418d52a3b7ad165785dc7853ae01a77f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0ODRjY2Y0MThkNTJhM2I3YWQxNjU3ODVkYzc4NTNhZTAxYTc3Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-07-18T17:48:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-07-18T17:48:04Z"}, "message": "ifcvt.c (noce_get_condition): Make certain that the condition is valid at JUMP.\n\n        * ifcvt.c (noce_get_condition): Make certain that the condition\n        is valid at JUMP.\n\nFrom-SVN: r55560", "tree": {"sha": "be72f09712cf01a23ee3111573e710a3877998c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be72f09712cf01a23ee3111573e710a3877998c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30484ccf418d52a3b7ad165785dc7853ae01a77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30484ccf418d52a3b7ad165785dc7853ae01a77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30484ccf418d52a3b7ad165785dc7853ae01a77f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30484ccf418d52a3b7ad165785dc7853ae01a77f/comments", "author": null, "committer": null, "parents": [{"sha": "c1740ae3c12105406dffbf001d67f5905b70b069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1740ae3c12105406dffbf001d67f5905b70b069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1740ae3c12105406dffbf001d67f5905b70b069"}], "stats": {"total": 112, "additions": 91, "deletions": 21}, "files": [{"sha": "27839a3c5bf8c3d236a6231975cedcae5261f993", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30484ccf418d52a3b7ad165785dc7853ae01a77f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30484ccf418d52a3b7ad165785dc7853ae01a77f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30484ccf418d52a3b7ad165785dc7853ae01a77f", "patch": "@@ -1,3 +1,9 @@\n+2002-07-18  Richard Henderson  <rth@redhat.com>\n+\n+\tPR optimization/7147\n+\t* ifcvt.c (noce_get_condition): Make certain that the condition\n+\tis valid at JUMP.\n+\n Thu Jul 18 13:44:51 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.c (barrier_align, push): Shut up compiler warnings.\n@@ -63,7 +69,7 @@ Wed Jul 17 19:23:32 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \tsuppress addition when either ct or cf are zero.\n \n 2002-06-17  Eric Botcazou <ebotcazou@multimania.com>\n-            Glen Nakamura <glen@imodulo.com>\n+\t    Glen Nakamura <glen@imodulo.com>\n \n \tPR optimization/6713\n \t* loop.c (loop_givs_rescan): Explicitly delete the insn that"}, {"sha": "cf7b660590bff52f0cb2978f32972ac4a17b8586", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30484ccf418d52a3b7ad165785dc7853ae01a77f/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30484ccf418d52a3b7ad165785dc7853ae01a77f/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=30484ccf418d52a3b7ad165785dc7853ae01a77f", "patch": "@@ -1496,45 +1496,73 @@ noce_try_abs (if_info)\n   return TRUE;\n }\n \n-/* Look for the condition for the jump first.  We'd prefer to avoid\n-   get_condition if we can -- it tries to look back for the contents\n-   of an original compare.  On targets that use normal integers for\n-   comparisons, e.g. alpha, this is wasteful.  */\n+/* Similar to get_condition, only the resulting condition must be\n+   valid at JUMP, instead of at EARLIEST.  */\n \n static rtx\n noce_get_condition (jump, earliest)\n      rtx jump;\n      rtx *earliest;\n {\n-  rtx cond;\n-  rtx set;\n-\n-  /* If the condition variable is a register and is MODE_INT, accept it.\n-     Otherwise, fall back on get_condition.  */\n+  rtx cond, set, tmp, insn;\n+  bool reverse;\n \n   if (! any_condjump_p (jump))\n     return NULL_RTX;\n \n   set = pc_set (jump);\n \n+  /* If this branches to JUMP_LABEL when the condition is false,\n+     reverse the condition.  */\n+  reverse = (GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n+\t     && XEXP (XEXP (SET_SRC (set), 2), 0) == JUMP_LABEL (jump));\n+\n+  /* If the condition variable is a register and is MODE_INT, accept it.  */\n+\n   cond = XEXP (SET_SRC (set), 0);\n-  if (GET_CODE (XEXP (cond, 0)) == REG\n-      && GET_MODE_CLASS (GET_MODE (XEXP (cond, 0))) == MODE_INT)\n+  tmp = XEXP (cond, 0);\n+  if (REG_P (tmp) && GET_MODE_CLASS (GET_MODE (tmp)) == MODE_INT)\n     {\n       *earliest = jump;\n \n-      /* If this branches to JUMP_LABEL when the condition is false,\n-\t reverse the condition.  */\n-      if (GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-\t  && XEXP (XEXP (SET_SRC (set), 2), 0) == JUMP_LABEL (jump))\n+      if (reverse)\n \tcond = gen_rtx_fmt_ee (reverse_condition (GET_CODE (cond)),\n-\t\t\t       GET_MODE (cond), XEXP (cond, 0),\n-\t\t\t       XEXP (cond, 1));\n+\t\t\t       GET_MODE (cond), tmp, XEXP (cond, 1));\n+      return cond;\n     }\n-  else\n-    cond = get_condition (jump, earliest);\n \n-  return cond;\n+  /* Otherwise, fall back on canonicalize_condition to do the dirty\n+     work of manipulating MODE_CC values and COMPARE rtx codes.  */\n+\n+  tmp = canonicalize_condition (jump, cond, reverse, earliest, NULL_RTX);\n+  if (!tmp)\n+    return NULL_RTX;\n+\n+  /* We are going to insert code before JUMP, not before EARLIEST.\n+     We must therefore be certain that the given condition is valid\n+     at JUMP by virtue of not having been modified since.  */\n+  for (insn = *earliest; insn != jump; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn) && modified_in_p (tmp, insn))\n+      break;\n+  if (insn == jump)\n+    return tmp;\n+\n+  /* The condition was modified.  See if we can get a partial result\n+     that doesn't follow all the reversals.  Perhaps combine can fold\n+     them together later.  */\n+  tmp = XEXP (tmp, 0);\n+  if (!REG_P (tmp) || GET_MODE_CLASS (GET_MODE (tmp)) != MODE_INT)\n+    return NULL_RTX;\n+  tmp = canonicalize_condition (jump, cond, reverse, earliest, tmp);\n+  if (!tmp)\n+    return NULL_RTX;\n+\n+  /* For sanity's sake, re-validate the new result.  */\n+  for (insn = *earliest; insn != jump; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn) && modified_in_p (tmp, insn))\n+      return NULL_RTX;\n+\n+  return tmp;\n }\n \n /* Return true if OP is ok for if-then-else processing.  */"}, {"sha": "7f559590e9a6d568587f9d70a0fa99fe8d776120", "filename": "gcc/testsuite/gcc.c-torture/execute/20020716-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30484ccf418d52a3b7ad165785dc7853ae01a77f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020716-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30484ccf418d52a3b7ad165785dc7853ae01a77f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020716-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020716-1.c?ref=30484ccf418d52a3b7ad165785dc7853ae01a77f", "patch": "@@ -0,0 +1,36 @@\n+extern void abort (void);\n+extern void exit (int);\n+\n+int sub1 (int val)\n+{\n+  return val;\n+}\n+\n+int testcond (int val)\n+{\n+  int flag1;\n+\n+    {\n+      int t1 = val;\n+        {\n+          int t2 = t1;\n+            {\n+              flag1 = sub1 (t2) ==0;\n+              goto lab1;\n+            };\n+        }\n+      lab1: ;\n+    }\n+\n+  if (flag1 != 0)\n+    return 0x4d0000;\n+  else\n+    return 0;\n+}\n+\n+int main (void)\n+{\n+  if (testcond (1))\n+    abort ();\n+  exit (0);\n+}"}]}