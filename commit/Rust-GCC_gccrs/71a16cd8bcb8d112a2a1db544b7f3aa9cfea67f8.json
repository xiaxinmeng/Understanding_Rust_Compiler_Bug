{"sha": "71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhMTZjZDhiY2I4ZDExMmEyYTFkYjU0NGI3ZjNhYTljZmVhNjdmOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-01-20T11:50:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-01-20T11:50:51Z"}, "message": "Add C++11 std::string constructors for locales and facets.\n\n\t* config/abi/pre/gnu.ver: Export new constructors.\n\t* include/bits/codecvt.h (codecvt_byname): Add string constructor.\n\t(codecvt_byname<char16_t>, codecvt_byname<char32_t>): Define explicit\n\tspecializations and declare explicit instantiations.\n\t* include/bits/locale_classes.h (locale, collate_byname): Add string\n\tconstructors.\n\t* include/bits/locale_facets.h (ctype_byname, numpunct_byname):\n\tLikewise.\n\t* include/bits/locale_facets_nonio.h (time_get_byname,\n\ttime_put_byname, moneypunct_byname, messages_byname): Likewise.\n\t* src/c++11/codecvt.cc (codecvt_byname<char16_t>,\n\tcodecvt_byname<char32_t>): Define explicit instantiations.\n\t* src/c++11/locale-inst.cc (time_put_byname, codecvt_byname):\n\tInstantiate string constructors.\n\t(ctype_byname): Define string constructor.\n\t* testsuite/22_locale/codecvt_byname/1.cc: New.\n\t* testsuite/22_locale/collate_byname/1.cc: New.\n\t* testsuite/22_locale/ctype_byname/2.cc: New.\n\t* testsuite/22_locale/messages_byname/1.cc: New.\n\t* testsuite/22_locale/moneypunct_byname/1.cc: New.\n\t* testsuite/22_locale/numpunct_byname/1.cc: New.\n\nFrom-SVN: r219887", "tree": {"sha": "b330b6dfc0fcea1b9f3d8f6ed8beee71add29a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b330b6dfc0fcea1b9f3d8f6ed8beee71add29a2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e4974d62ecd488122ae99b0b2ed5afeb1d121eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4974d62ecd488122ae99b0b2ed5afeb1d121eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4974d62ecd488122ae99b0b2ed5afeb1d121eb"}], "stats": {"total": 480, "additions": 477, "deletions": 3}, "files": [{"sha": "7410bbccfe0e26d1bceb05de5fbf0fd86a8d8598", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -1,3 +1,27 @@\n+2015-01-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/abi/pre/gnu.ver: Export new constructors.\n+\t* include/bits/codecvt.h (codecvt_byname): Add string constructor.\n+\t(codecvt_byname<char16_t>, codecvt_byname<char32_t>): Define explicit\n+\tspecializations and declare explicit instantiations.\n+\t* include/bits/locale_classes.h (locale, collate_byname): Add string\n+\tconstructors.\n+\t* include/bits/locale_facets.h (ctype_byname, numpunct_byname):\n+\tLikewise.\n+\t* include/bits/locale_facets_nonio.h (time_get_byname,\n+\ttime_put_byname, moneypunct_byname, messages_byname): Likewise.\n+\t* src/c++11/codecvt.cc (codecvt_byname<char16_t>,\n+\tcodecvt_byname<char32_t>): Define explicit instantiations.\n+\t* src/c++11/locale-inst.cc (time_put_byname, codecvt_byname):\n+\tInstantiate string constructors.\n+\t(ctype_byname): Define string constructor.\n+\t* testsuite/22_locale/codecvt_byname/1.cc: New.\n+\t* testsuite/22_locale/collate_byname/1.cc: New.\n+\t* testsuite/22_locale/ctype_byname/2.cc: New.\n+\t* testsuite/22_locale/messages_byname/1.cc: New.\n+\t* testsuite/22_locale/moneypunct_byname/1.cc: New.\n+\t* testsuite/22_locale/numpunct_byname/1.cc: New.\n+\n 2015-01-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/64658"}, {"sha": "61024bd7c0429568f3fa9a6e1f9e16444237ea6c", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -64,8 +64,10 @@ GLIBCXX_3.4 {\n #     std::char_traits;\n #     std::c[i-z]*;\n       std::c[i-n]*;\n+#     std::collate;\n+#     std::collate_byname;\n #     std::condition_variable;\n-      std::co[^n]*;\n+      std::co[^ln]*;\n       std::c[p-s]*;\n       std::cu[^r]*;\n #     std::current_exception\n@@ -527,6 +529,14 @@ GLIBCXX_3.4 {\n     # std::use_facet\n     _ZSt9use_facetIS*;\n \n+    # std::collate\n+    _ZNSt7collateI[cw]*;\n+    _ZNKSt7collateI[cw]*;\n+\n+    # std::collate_byname\n+    _ZNSt14collate_bynameI[cw]EC[12]EPKc?*;\n+    _ZNSt14collate_bynameI[cw]ED*;\n+\n     # std::ctype\n     _ZNKSt5ctypeIcE8*;\n     _ZNKSt5ctypeIcE9*;\n@@ -538,7 +548,8 @@ GLIBCXX_3.4 {\n     _ZNSt10ctype_base[56][ac-z]*;\n \n     # std::ctype_byname\n-    _ZNSt12ctype_bynameI[cw]*;\n+    _ZNSt12ctype_bynameI[cw]EC[12]EPKc?*;\n+    _ZNSt12ctype_bynameI[cw]ED*;\n \n     # std::num_get\n     _ZNKSt7num_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE[2-9]*;\n@@ -573,7 +584,8 @@ GLIBCXX_3.4 {\n     _ZNKSt8time_put*;\n \n     # std::time_put_byname\n-    _ZNSt15time_put_byname*;\n+    _ZNSt15time_put_bynameI[cw]*EC[12]EPKc?*;\n+    _ZNSt15time_put_bynameI[cw]*ED[012]Ev;\n \n     # std::numeric_limits\n     _ZNSt21__numeric_limits_base[5-9]*;\n@@ -1780,6 +1792,25 @@ GLIBCXX_3.4.21 {\n     _ZNSt25__codecvt_utf8_utf16_base*;\n     _ZT[ISV]St25__codecvt_utf8_utf16_base*;\n \n+    # new string ctors for _byname facets\n+    _ZNSt12ctype_bynameI[cw]EC[1-5]ERKSsm;\n+    _ZNSt14codecvt_bynameI[cw]c11__mbstate_tEC[1-5]ERKSsm;\n+    _ZNSt15messages_bynameI[cw]EC[1-5]ERKSsm;\n+    _ZNSt15numpunct_bynameI[cw]EC[1-5]ERKSsm;\n+    _ZNSt15time_get_bynameI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEEC[1-5]ERKSsm;\n+    _ZNSt15time_put_bynameI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEEC[1-5]ERKSsm;\n+    _ZNSt17moneypunct_bynameI[cw]Lb0EEC[1-5]ERKSsm;\n+    _ZNSt17moneypunct_bynameI[cw]Lb1EEC[1-5]ERKSsm;\n+\n+    _ZNSt12ctype_bynameI[cw]EC[1-5]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm;\n+    _ZNSt14codecvt_bynameI[cw]c11__mbstate_tEC[1-5]ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm;\n+    _ZNSt15time_put_bynameI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEEC[1-5]ERKNSt7__cxx1112basic_stringIcS2_SaIcEEEm;\n+    _ZNSt7__cxx1115messages_bynameI[cw]EC[1-5]ERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEm;\n+    _ZNSt7__cxx1115numpunct_bynameI[cw]EC[1-5]ERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEm;\n+    _ZNSt7__cxx1115time_get_bynameI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEEC[1-5]ERKNS_12basic_stringIcS3_SaIcEEEm;\n+    _ZNSt7__cxx1117moneypunct_bynameI[cw]Lb0EEC[1-5]ERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEm;\n+    _ZNSt7__cxx1117moneypunct_bynameI[cw]Lb1EEC[1-5]ERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEm;\n+\n } GLIBCXX_3.4.20;\n \n "}, {"sha": "c76215f87f54a0d8834d43401cffddd0d008ec66", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -594,11 +594,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      codecvt_byname(const string& __s, size_t __refs = 0)\n+      : codecvt_byname(__s.c_str(), __refs) { }\n+#endif\n+\n+    protected:\n+      virtual\n+      ~codecvt_byname() { }\n+    };\n+\n+#if __cplusplus >= 201103L && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+  template<>\n+    class codecvt_byname<char16_t, char, mbstate_t>\n+    : public codecvt<char16_t, char, mbstate_t>\n+    {\n+    public:\n+      explicit\n+      codecvt_byname(const char* __s, size_t __refs = 0)\n+      : codecvt<char16_t, char, mbstate_t>(__refs) { }\n+\n+      explicit\n+      codecvt_byname(const string& __s, size_t __refs = 0)\n+      : codecvt_byname(__s.c_str(), __refs) { }\n+\n     protected:\n       virtual\n       ~codecvt_byname() { }\n     };\n \n+  template<>\n+    class codecvt_byname<char32_t, char, mbstate_t>\n+    : public codecvt<char32_t, char, mbstate_t>\n+    {\n+    public:\n+      explicit\n+      codecvt_byname(const char* __s, size_t __refs = 0)\n+      : codecvt<char32_t, char, mbstate_t>(__refs) { }\n+\n+      explicit\n+      codecvt_byname(const string& __s, size_t __refs = 0)\n+      : codecvt_byname(__s.c_str(), __refs) { }\n+\n+    protected:\n+      virtual\n+      ~codecvt_byname() { }\n+    };\n+#endif\n+\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n #if _GLIBCXX_EXTERN_TEMPLATE\n@@ -623,6 +667,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool\n     has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);\n #endif\n+\n+#if __cplusplus >= 201103L && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+  extern template class codecvt_byname<char16_t, char, mbstate_t>;\n+  extern template class codecvt_byname<char32_t, char, mbstate_t>;\n+#endif\n+\n #endif\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "f3898ebf7b2ef40c4da245a3e46dca11eb18eec1", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -150,6 +150,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     */\n     locale(const locale& __base, const char* __s, category __cat);\n \n+#if __cplusplus >= 201103L\n+    /**\n+     *  @brief  Named locale constructor.\n+     *\n+     *  Constructs a copy of the named C library locale.\n+     *\n+     *  @param  __s  Name of the locale to construct.\n+     *  @throw  std::runtime_error if __s is an undefined locale.\n+    */\n+    explicit\n+    locale(const std::string& __s) : locale(__s.c_str()) { }\n+\n+    /**\n+     *  @brief  Construct locale with facets from another locale.\n+     *\n+     *  Constructs a copy of the locale @a base.  The facets specified by @a\n+     *  cat are replaced with those from the locale named by @a s.  If base is\n+     *  named, this locale instance will also be named.\n+     *\n+     *  @param  __base  The locale to copy.\n+     *  @param  __s  Name of the locale to use facets from.\n+     *  @param  __cat  Set of categories defining the facets to use from __s.\n+     *  @throw  std::runtime_error if __s is an undefined locale.\n+    */\n+    locale(const locale& __base, const std::string& __s, category __cat)\n+    : locale(__base, __s.c_str(), __cat) { }\n+#endif\n+\n     /**\n      *  @brief  Construct locale with facets from another locale.\n      *\n@@ -797,6 +825,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      collate_byname(const string& __s, size_t __refs = 0)\n+      : collate_byname(__s.c_str(), __refs) { }\n+#endif\n+\n     protected:\n       virtual\n       ~collate_byname() { }"}, {"sha": "0226b497c30df48cd4c46d62eb04f62d34b80aaf", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -1479,6 +1479,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       explicit\n       ctype_byname(const char* __s, size_t __refs = 0);\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      ctype_byname(const string& __s, size_t __refs = 0)\n+      : ctype_byname(__s.c_str(), __refs) { }\n+#endif\n+\n     protected:\n       virtual\n       ~ctype_byname() { };\n@@ -1492,6 +1498,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       explicit\n       ctype_byname(const char* __s, size_t __refs = 0);\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      ctype_byname(const string& __s, size_t __refs = 0);\n+#endif\n+\n     protected:\n       virtual\n       ~ctype_byname();\n@@ -1505,6 +1516,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       explicit\n       ctype_byname(const char* __s, size_t __refs = 0);\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      ctype_byname(const string& __s, size_t __refs = 0);\n+#endif\n+\n     protected:\n       virtual\n       ~ctype_byname();\n@@ -1900,6 +1916,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  }\n       }\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      numpunct_byname(const string& __s, size_t __refs = 0)\n+      : numpunct_byname(__s.c_str(), __refs) { }\n+#endif\n+\n     protected:\n       virtual\n       ~numpunct_byname() { }"}, {"sha": "7eae6c80653fd6c57d3e7f7ee0b592cb7aee4e6f", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.h?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -766,6 +766,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       time_get_byname(const char*, size_t __refs = 0)\n       : time_get<_CharT, _InIter>(__refs) { }\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      time_get_byname(const string& __s, size_t __refs = 0)\n+      : time_get_byname(__s.c_str(), __refs) { }\n+#endif\n+\n     protected:\n       virtual\n       ~time_get_byname() { }\n@@ -894,6 +900,12 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       : time_put<_CharT, _OutIter>(__refs)\n       { };\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      time_put_byname(const string& __s, size_t __refs = 0)\n+      : time_put_byname(__s.c_str(), __refs) { }\n+#endif\n+\n     protected:\n       virtual\n       ~time_put_byname() { }\n@@ -1419,6 +1431,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  }\n       }\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      moneypunct_byname(const string& __s, size_t __refs = 0)\n+      : moneypunct_byname(__s.c_str(), __refs) { }\n+#endif\n+\n     protected:\n       virtual\n       ~moneypunct_byname() { }\n@@ -1969,6 +1987,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       explicit\n       messages_byname(const char* __s, size_t __refs = 0);\n \n+#if __cplusplus >= 201103L\n+      explicit\n+      messages_byname(const string& __s, size_t __refs = 0)\n+      : messages_byname(__s.c_str(), __refs) { }\n+#endif\n+\n     protected:\n       virtual\n       ~messages_byname()"}, {"sha": "594dae6810c9aff15b85086f903adefa827587fe", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -1402,6 +1402,8 @@ __codecvt_utf8_utf16_base<wchar_t>::do_max_length() const throw()\n \n inline template class __codecvt_abstract_base<char16_t, char, mbstate_t>;\n inline template class __codecvt_abstract_base<char32_t, char, mbstate_t>;\n+template class codecvt_byname<char16_t, char, mbstate_t>;\n+template class codecvt_byname<char32_t, char, mbstate_t>;\n \n _GLIBCXX_END_NAMESPACE_VERSION\n }"}, {"sha": "9240b407f158e8f6dae546c21b217cf674e0bb7e", "filename": "libstdc++-v3/src/c++11/locale-inst.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Flocale-inst.cc?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -192,6 +192,9 @@ _GLIBCXX_END_NAMESPACE_LDBL\n   template struct __timepunct_cache<C>;\n   template class time_put<C, ostreambuf_iterator<C> >;\n   template class time_put_byname<C, ostreambuf_iterator<C> >;\n+#else\n+  // Instantiate constructor taking __cxx11::string\n+  template time_put_byname<C>::time_put_byname(const string&, size_t);\n #endif\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template class time_get<C, istreambuf_iterator<C> >;\n@@ -205,6 +208,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_CXX11\n   \n   // ctype\n+  ctype_byname<C>::ctype_byname(const string& __s, size_t __refs)\n+  : ctype_byname(__s.c_str(), __refs) { }\n+\n #if ! _GLIBCXX_USE_CXX11_ABI\n   inline template class __ctype_abstract_base<C>;\n   template class ctype_byname<C>;\n@@ -214,6 +220,9 @@ _GLIBCXX_END_NAMESPACE_CXX11\n #if ! _GLIBCXX_USE_CXX11_ABI\n   inline template class __codecvt_abstract_base<C, char, mbstate_t>;\n   template class codecvt_byname<C, char, mbstate_t>;\n+#else\n+  // Instantiate constructor taking __cxx11::string\n+  template codecvt_byname<C, char, mbstate_t>::codecvt_byname(const string&, size_t);\n #endif\n \n   // collate"}, {"sha": "8609b8034eae4bd8d9f4e5adcf1634e5d6f6f69b", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_byname/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F1.cc?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do link }\n+\n+#include <locale>\n+#include <string>\n+\n+std::string s = \"C\";\n+\n+template<typename C>\n+struct facet : std::codecvt_byname<C, char, std::mbstate_t>\n+{\n+  facet() : std::codecvt_byname<C, char, std::mbstate_t>(s) { }\n+};\n+\n+void\n+test01()\n+{\n+  facet<char> c;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  facet<wchar_t> w;\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "73b24dbdcbf903b2f33954820d1b5df9055d6148", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do link }\n+\n+#include <locale>\n+#include <string>\n+\n+std::string s = \"C\";\n+\n+template<typename C>\n+struct facet : std::collate_byname<C>\n+{\n+  facet() : std::collate_byname<C>(s) { }\n+};\n+\n+void\n+test01()\n+{\n+  facet<char> c;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  facet<wchar_t> w;\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "f005384caa1b4c7c3100b51414791650d2bbd14e", "filename": "libstdc++-v3/testsuite/22_locale/ctype_byname/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_byname%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_byname%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype_byname%2F2.cc?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do link }\n+\n+#include <locale>\n+#include <string>\n+\n+std::string s = \"C\";\n+\n+template<typename C>\n+struct facet : std::ctype_byname<C>\n+{\n+  facet() : std::ctype_byname<C>(s) { }\n+};\n+\n+void\n+test01()\n+{\n+  facet<char> c;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  facet<wchar_t> w;\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "5902a92cb36eed8e1582694929d05797f853d317", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do link }\n+\n+#include <locale>\n+#include <string>\n+\n+std::string s = \"C\";\n+\n+template<typename C>\n+struct facet : std::messages_byname<C>\n+{\n+  facet() : std::messages_byname<C>(s) { }\n+};\n+\n+void\n+test01()\n+{\n+  facet<char> c;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  facet<wchar_t> w;\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "a9bf44c3435e33b97e17d9d99e316c3a943a591b", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do link }\n+\n+#include <locale>\n+#include <string>\n+\n+std::string s = \"C\";\n+\n+template<typename C, bool I>\n+struct facet : std::moneypunct_byname<C, I>\n+{\n+  facet() : std::moneypunct_byname<C, I>(s) { }\n+};\n+\n+void\n+test01()\n+{\n+  facet<char, false> c0;\n+  facet<char, true> c1;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  facet<wchar_t, false> w0;\n+  facet<wchar_t, true> w1;\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "2fca03faf3308004ca314ed492c6ea04ece43c59", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc?ref=71a16cd8bcb8d112a2a1db544b7f3aa9cfea67f8", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do link }\n+\n+#include <locale>\n+#include <string>\n+\n+std::string s = \"C\";\n+\n+template<typename C>\n+struct facet : std::numpunct_byname<C>\n+{\n+  facet() : std::numpunct_byname<C>(s) { }\n+};\n+\n+void\n+test01()\n+{\n+  facet<char> c;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  facet<wchar_t> w;\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}