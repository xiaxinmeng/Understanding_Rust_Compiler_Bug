{"sha": "0180ac0cb2e895ed66fe3b1b05485187d561131b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4MGFjMGNiMmU4OTVlZDY2ZmUzYjFiMDU0ODUxODdkNTYxMTMxYg==", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2014-10-01T13:08:37Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2014-10-01T13:08:37Z"}, "message": "testsuite: error out with tested condition instead of FOO\n\nUse the (abbreviated) proprocessor condition for #error instead of FOO\nso one can see the test issued.\n\n2012-12-01  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n\n    * lib/target-supports.exp: error out with preprocessor condition\n    instead of FOO everywhere.\n\nFrom-SVN: r215759", "tree": {"sha": "5d2928281dcd8c290ac5e21584a9a7606330503a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2928281dcd8c290ac5e21584a9a7606330503a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0180ac0cb2e895ed66fe3b1b05485187d561131b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0180ac0cb2e895ed66fe3b1b05485187d561131b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0180ac0cb2e895ed66fe3b1b05485187d561131b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0180ac0cb2e895ed66fe3b1b05485187d561131b/comments", "author": null, "committer": null, "parents": [{"sha": "4db7fcb9a806820af731c8f22fafe38701885a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db7fcb9a806820af731c8f22fafe38701885a19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db7fcb9a806820af731c8f22fafe38701885a19"}], "stats": {"total": 73, "additions": 39, "deletions": 34}, "files": [{"sha": "628f9765eb09a001ce747b0b7469af4db2bb2a2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0180ac0cb2e895ed66fe3b1b05485187d561131b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0180ac0cb2e895ed66fe3b1b05485187d561131b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0180ac0cb2e895ed66fe3b1b05485187d561131b", "patch": "@@ -1,3 +1,8 @@\n+2014-10-01  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* lib/target-supports.exp: error out with preprocessor condition\n+\tinstead of FOO everywhere.\n+\n 2014-10-01  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement SD-6: SG10 Feature Test Recommendations"}, {"sha": "7d2451a8a5053ab6e173a16e8dda225e9b4b7481", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0180ac0cb2e895ed66fe3b1b05485187d561131b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0180ac0cb2e895ed66fe3b1b05485187d561131b/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0180ac0cb2e895ed66fe3b1b05485187d561131b", "patch": "@@ -865,7 +865,7 @@ proc check_effective_target_hard_float { } {\n     if { [istarget mips*-*-*] } {\n \treturn [check_no_compiler_messages hard_float assembly {\n \t\t#if (defined __mips_soft_float || defined __mips16)\n-\t\t#error FOO\n+\t\t#error __mips_soft_float || __mips16\n \t\t#endif\n \t}]\n     }\n@@ -877,7 +877,7 @@ proc check_effective_target_hard_float { } {\n \treturn 0\n \t# return [check_no_compiler_messages hard_float assembly {\n \t\t#if defined __RX_64_BIT_DOUBLES__\n-\t\t#error FOO\n+\t\t#error __RX_64_BIT_DOUBLES__\n \t\t#endif\n \t# }]\n     }\n@@ -893,7 +893,7 @@ proc check_effective_target_hard_float { } {\n proc check_effective_target_mips64 { } {\n     return [check_no_compiler_messages mips64 assembly {\n \t#ifndef __mips64\n-\t#error FOO\n+\t#error !__mips64\n \t#endif\n     }]\n }\n@@ -904,7 +904,7 @@ proc check_effective_target_mips64 { } {\n proc check_effective_target_nomips16 { } {\n     return [check_no_compiler_messages nomips16 object {\n \t#ifndef __mips\n-\t#error FOO\n+\t#error !__mips\n \t#else\n \t/* A cheap way of testing for -mflip-mips16.  */\n \tvoid foo (void) { asm (\"addiu $20,$20,1\"); }\n@@ -927,12 +927,12 @@ proc add_options_for_mips16_attribute { flags } {\n proc check_effective_target_mips16_attribute { } {\n     return [check_no_compiler_messages mips16_attribute assembly {\n \t#ifdef PIC\n-\t#error FOO\n+\t#error PIC\n \t#endif\n \t#if defined __mips_hard_float \\\n \t    && (!defined _ABIO32 || _MIPS_SIM != _ABIO32) \\\n \t    && (!defined _ABIO64 || _MIPS_SIM != _ABIO64)\n-\t#error FOO\n+\t#error __mips_hard_float && (!_ABIO32 || !_ABIO64)\n \t#endif\n     } [add_options_for_mips16_attribute \"\"]]\n }\n@@ -961,7 +961,7 @@ proc check_effective_target_mips_llsc { } {\n     # Otherwise assume LL/SC support for everything but MIPS I.\n     return [check_no_compiler_messages mips_llsc assembly {\n \t#if __mips == 1\n-\t#error FOO\n+\t#error __mips == 1\n \t#endif\n     }]\n }\n@@ -975,7 +975,7 @@ proc check_effective_target_mips_rel { } {\n     return [check_no_compiler_messages mips_rel object {\n \t#if (defined _ABIN32 && _MIPS_SIM == _ABIN32) \\\n \t    || (defined _ABI64 && _MIPS_SIM == _ABI64)\n-\t#error FOO\n+\t#error _ABIN32 && (_ABIN32 || _ABI64)\n \t#endif\n     }]\n }\n@@ -988,7 +988,7 @@ proc check_effective_target_mips_eabi { } {\n     }\n     return [check_no_compiler_messages mips_eabi object {\n \t#ifndef __mips_eabi\n-\t#error FOO\n+\t#error !__mips_eabi\n \t#endif\n     }]\n }\n@@ -998,7 +998,7 @@ proc check_effective_target_mips_eabi { } {\n proc check_effective_target_nonpic { } {\n     return [check_no_compiler_messages nonpic assembly {\n \t#if __PIC__\n-\t#error FOO\n+\t#error __PIC__\n \t#endif\n     }]\n }\n@@ -1617,7 +1617,7 @@ proc check_effective_target_broken_cplxf_arg { } {\n proc check_effective_target_ti_c67x { } {\n     return [check_no_compiler_messages ti_c67x assembly {\n \t#if !defined(_TMS320C6700)\n-\t#error FOO\n+\t#error !_TMS320C6700\n \t#endif\n     }]\n }\n@@ -1626,7 +1626,7 @@ proc check_effective_target_ti_c67x { } {\n proc check_effective_target_ti_c64xp { } {\n     return [check_no_compiler_messages ti_c64xp assembly {\n \t#if !defined(_TMS320C6400_PLUS)\n-\t#error FOO\n+\t#error !_TMS320C6400_PLUS\n \t#endif\n     }]\n }\n@@ -1721,8 +1721,8 @@ proc check_effective_target_objc2 { } {\n \t#ifdef __OBJC2__\n \tint dummy[1];\n \t#else\n-\t#error\n-\t#endif \n+\t#error !__OBJC2__\n+\t#endif\n     }]\n }\n \n@@ -1731,8 +1731,8 @@ proc check_effective_target_next_runtime { } {\n \t#ifdef __NEXT_RUNTIME__\n \tint dummy[1];\n \t#else\n-\t#error\n-\t#endif \n+\t#error !__NEXT_RUNTIME__\n+\t#endif\n     }]\n }\n \n@@ -2244,7 +2244,7 @@ proc check_effective_target_vect_simd_clones { } {\n proc check_effective_target_aarch64_big_endian { } {\n     return [check_no_compiler_messages aarch64_big_endian assembly {\n \t#if !defined(__aarch64__) || !defined(__AARCH64EB__)\n-\t#error FOO\n+\t#error !__aarch64__ || !__AARCH64EB__\n \t#endif\n     }]\n }\n@@ -2262,7 +2262,7 @@ proc check_effective_target_aarch64_little_endian { } {\n proc check_effective_target_arm32 { } {\n     return [check_no_compiler_messages arm32 assembly {\n \t#if !defined(__arm__) || (defined(__thumb__) && !defined(__thumb2__))\n-\t#error FOO\n+\t#error !__arm || __thumb__ && !__thumb2__\n \t#endif\n     }]\n }\n@@ -2271,7 +2271,7 @@ proc check_effective_target_arm32 { } {\n proc check_effective_target_arm_nothumb { } {\n     return [check_no_compiler_messages arm_nothumb assembly {\n \t#if !defined(__arm__) || (defined(__thumb__) || defined(__thumb2__))\n-\t#error FOO\n+\t#error !__arm__ || __thumb || __thumb2__\n \t#endif\n     }]\n }\n@@ -2280,7 +2280,7 @@ proc check_effective_target_arm_nothumb { } {\n proc check_effective_target_arm_little_endian { } {\n     return [check_no_compiler_messages arm_little_endian assembly {\n \t#if !defined(__arm__) || !defined(__ARMEL__)\n-\t#error FOO\n+\t#error !__arm__ || !__ARMEL__\n \t#endif\n     }]\n }\n@@ -2291,7 +2291,7 @@ proc check_effective_target_arm_vect_no_misalign { } {\n \t#if !defined(__arm__) \\\n \t    || (defined(__ARM_FEATURE_UNALIGNED) \\\n \t        && defined(__ARMEL__))\n-\t#error FOO\n+\t#error !__arm__ || (__ARMEL__ && __ARM_FEATURE_UNALIGNED)\n \t#endif\n     }]\n }\n@@ -2719,7 +2719,7 @@ foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n \t    }\n \t    return [check_no_compiler_messages arm_arch_FUNC_ok assembly {\n \t\t#if !defined (DEF)\n-\t\t#error FOO\n+\t\t#error !DEF\n \t\t#endif\n \t    } \"FLAG\" ]\n \t}\n@@ -2746,7 +2746,7 @@ foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n proc check_effective_target_arm_arm_ok { } {\n     return [check_no_compiler_messages arm_arm_ok assembly {\n \t#if !defined (__arm__) || defined (__thumb__) || defined (__thumb2__)\n-\t#error FOO\n+\t#error !__arm__ || __thumb__ || __thumb2__\n \t#endif\n     } \"-marm\"]\n }\n@@ -2758,7 +2758,7 @@ proc check_effective_target_arm_arm_ok { } {\n proc check_effective_target_arm_thumb1_ok { } {\n     return [check_no_compiler_messages arm_thumb1_ok assembly {\n \t#if !defined(__arm__) || !defined(__thumb__) || defined(__thumb2__)\n-\t#error FOO\n+\t#error !__arm__ || !__thumb__ || __thumb2__\n \t#endif\n \tint foo (int i) { return i; }\n     } \"-mthumb\"]\n@@ -2770,7 +2770,7 @@ proc check_effective_target_arm_thumb1_ok { } {\n proc check_effective_target_arm_thumb2_ok { } {\n     return [check_no_compiler_messages arm_thumb2_ok assembly {\n \t#if !defined(__thumb2__)\n-\t#error FOO\n+\t#error !__thumb2__\n \t#endif\n \tint foo (int i) { return i; }\n     } \"-mthumb\"]\n@@ -2782,7 +2782,7 @@ proc check_effective_target_arm_thumb2_ok { } {\n proc check_effective_target_arm_thumb1 { } {\n     return [check_no_compiler_messages arm_thumb1 assembly {\n \t#if !defined(__arm__) || !defined(__thumb__) || defined(__thumb2__)\n-\t#error not thumb1\n+\t#error !__arm__ || !__thumb__ || __thumb2__\n \t#endif\n \tint i;\n     } \"\"]\n@@ -2794,7 +2794,7 @@ proc check_effective_target_arm_thumb1 { } {\n proc check_effective_target_arm_thumb2 { } {\n     return [check_no_compiler_messages arm_thumb2 assembly {\n \t#if !defined(__thumb2__)\n-\t#error FOO\n+\t#error !__thumb2__\n \t#endif\n \tint i;\n     } \"\"]\n@@ -2821,7 +2821,7 @@ proc check_effective_target_arm_cortex_m { } {\n \t#if !defined(__ARM_ARCH_7M__) \\\n             && !defined (__ARM_ARCH_7EM__) \\\n             && !defined (__ARM_ARCH_6M__)\n-\t#error FOO\n+\t#error !__ARM_ARCH_7M__ && !__ARM_ARCH_7EM__ && !__ARM_ARCH_6M__\n \t#endif\n \tint i;\n     } \"-mthumb\"]\n@@ -2917,7 +2917,7 @@ proc check_effective_target_arm_neonv2 { } {\n proc check_effective_target_mips_loongson { } {\n     return [check_no_compiler_messages loongson assembly {\n \t#if !defined(__mips_loongson_vector_rev)\n-\t#error FOO\n+\t#error !__mips_loongson_vector_rev\n \t#endif\n     }]\n }\n@@ -5022,7 +5022,7 @@ proc check_effective_target_sync_char_short { } {\n proc check_effective_target_coldfire_fpu { } {\n     return [check_no_compiler_messages coldfire_fpu assembly {\n \t#ifndef __mcffpu__\n-\t#error FOO\n+\t#error !__mcffpu__\n \t#endif\n     }]\n }\n@@ -5033,7 +5033,7 @@ proc check_effective_target_uclibc {} {\n     return [check_no_compiler_messages uclibc object {\n \t#include <features.h>\n \t#if !defined (__UCLIBC__)\n-\t#error FOO\n+\t#error !__UCLIBC__\n \t#endif\n     }]\n }\n@@ -5361,15 +5361,15 @@ proc add_options_for_bind_pic_locally { flags } {\n \n     if {[check_no_compiler_messages using_pic2 assembly {\n         #if __PIC__ != 2\n-        #error FOO\n+        #error __PIC__ != 2\n         #endif\n     }]} {\n         set flags_to_postpone \"-fPIE\"\n         return $flags\n     }\n     if {[check_no_compiler_messages using_pic1 assembly {\n         #if __PIC__ != 1\n-        #error FOO\n+        #error __PIC__ != 1\n         #endif\n     }]} {\n         set flags_to_postpone \"-fpie\"\n@@ -5399,7 +5399,7 @@ proc check_effective_target_c99_runtime { } {\n \tclose $file\n \tappend contents {\n \t    #ifndef HAVE_C99_RUNTIME\n-\t    #error FOO\n+\t    #error !HAVE_C99_RUNTIME\n \t    #endif\n \t}\n \tcheck_no_compiler_messages_nocache c99_runtime assembly \\"}]}