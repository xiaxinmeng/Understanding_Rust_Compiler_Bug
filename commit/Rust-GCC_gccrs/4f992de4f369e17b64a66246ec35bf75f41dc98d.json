{"sha": "4f992de4f369e17b64a66246ec35bf75f41dc98d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY5OTJkZTRmMzY5ZTE3YjY0YTY2MjQ2ZWMzNWJmNzVmNDFkYzk4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-24T10:22:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-24T10:22:35Z"}, "message": "arm: Fix some more vec-common.md patterns for iwmmxt [PR99724]\n\nThe following patch fixes similar issues as in PR98849;\nin older gcc versions, the expanders were present in neon.md guarded\nwith TARGET_NEON, but they got moved to vec-common.md and guarded with\nARM_HAVE_<MODE>_ARITH so that they handle both MVE and Neon.\nThe macros are enabled for some modes even for iwmmxt which has some\nvector support for those modes, but only limited.  In particular,\nneither the one_cmpl, nor neg, nor movmisalign patterns are present.\nFor some reason I've failed to construct something that ICEs with\nmovmisalign, so that is not covered by the testsuite, but both\none_cmpl and neg ICE.\n\n2021-03-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99724\n\t* config/arm/vec-common.md (one_cmpl<mode>2, neg<mode>2,\n\tmovmisalign<mode>): Disable expanders for TARGET_REALLY_IWMMXT.\n\n\t* gcc.target/arm/pr99724.c: New test.", "tree": {"sha": "e8bd9e777bc7fc294013dc6ea2d13cb1f0b3132e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8bd9e777bc7fc294013dc6ea2d13cb1f0b3132e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f992de4f369e17b64a66246ec35bf75f41dc98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f992de4f369e17b64a66246ec35bf75f41dc98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f992de4f369e17b64a66246ec35bf75f41dc98d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f992de4f369e17b64a66246ec35bf75f41dc98d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65cfa2fed39c76498e7c3dfe138bddb049d60dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65cfa2fed39c76498e7c3dfe138bddb049d60dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65cfa2fed39c76498e7c3dfe138bddb049d60dd7"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "48ee6593ccac50b017d8a8ee0a377eacf91dca36", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f992de4f369e17b64a66246ec35bf75f41dc98d/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f992de4f369e17b64a66246ec35bf75f41dc98d/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=4f992de4f369e17b64a66246ec35bf75f41dc98d", "patch": "@@ -202,13 +202,13 @@\n (define_expand \"one_cmpl<mode>2\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\")\n \t(not:VDQ (match_operand:VDQ 1 \"s_register_operand\")))]\n-  \"ARM_HAVE_<MODE>_ARITH\"\n+  \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n )\n \n (define_expand \"neg<mode>2\"\n   [(set (match_operand:VDQWH 0 \"s_register_operand\" \"\")\n \t(neg:VDQWH (match_operand:VDQWH 1 \"s_register_operand\" \"\")))]\n-  \"ARM_HAVE_<MODE>_ARITH\"\n+  \"ARM_HAVE_<MODE>_ARITH && !TARGET_REALLY_IWMMXT\"\n )\n \n (define_expand \"cadd<rot><mode>3\"\n@@ -281,7 +281,8 @@\n  [(set (match_operand:VDQX 0 \"neon_perm_struct_or_reg_operand\")\n \t(unspec:VDQX [(match_operand:VDQX 1 \"neon_perm_struct_or_reg_operand\")]\n \t UNSPEC_MISALIGNED_ACCESS))]\n- \"ARM_HAVE_<MODE>_LDST && !BYTES_BIG_ENDIAN && unaligned_access\"\n+ \"ARM_HAVE_<MODE>_LDST && !BYTES_BIG_ENDIAN\n+  && unaligned_access && !TARGET_REALLY_IWMMXT\"\n {\n  rtx adjust_mem;\n  /* This pattern is not permitted to fail during expansion: if both arguments"}, {"sha": "5411078b1c44e044342aa6f4fb2e49754cc9a702", "filename": "gcc/testsuite/gcc.target/arm/pr99724.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f992de4f369e17b64a66246ec35bf75f41dc98d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr99724.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f992de4f369e17b64a66246ec35bf75f41dc98d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr99724.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr99724.c?ref=4f992de4f369e17b64a66246ec35bf75f41dc98d", "patch": "@@ -0,0 +1,31 @@\n+/* PR target/99724 */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"Test is specific to the iWMMXt\" { arm*-*-* } { \"-mcpu=*\" } { \"-mcpu=iwmmxt\" } } */\n+/* { dg-skip-if \"Test is specific to the iWMMXt\" { arm*-*-* } { \"-mabi=*\" } { \"-mabi=iwmmxt\" } } */\n+/* { dg-skip-if \"Test is specific to the iWMMXt\" { arm*-*-* } { \"-march=*\" } { \"-march=iwmmxt\" } } */\n+/* { dg-skip-if \"Test is specific to ARM mode\" { arm*-*-* } { \"-mthumb\" } { \"\" } } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-require-effective-target arm_iwmmxt_ok } */\n+/* { dg-options \"-O1 -mcpu=iwmmxt\" } */\n+\n+typedef int V __attribute__((vector_size (8)));\n+struct __attribute__((packed)) S { char a; V b; char c[7]; };\n+\n+void\n+foo (V *x)\n+{\n+  *x = ~*x;\n+}\n+\n+void\n+bar (V *x)\n+{\n+  *x = -*x;\n+}\n+\n+void\n+baz (V *x, struct S *p)\n+{\n+  V y = p->b;\n+  *x = y;\n+}"}]}