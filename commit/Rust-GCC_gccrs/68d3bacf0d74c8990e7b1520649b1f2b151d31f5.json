{"sha": "68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkM2JhY2YwZDc0Yzg5OTBlN2IxNTIwNjQ5YjFmMmIxNTFkMzFmNQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-01-29T16:12:28Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-01-29T16:12:28Z"}, "message": "rs6000.c (altivec_expand_vec_perm_const): Use CODE_FOR_altivec_vmrg*_direct rather than CODE_FOR_altivec_vmrg*.\n\ngcc:\n\n2014-01-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const):  Use\n\tCODE_FOR_altivec_vmrg*_direct rather than CODE_FOR_altivec_vmrg*.\n\t* config/rs6000/vsx.md (vsx_mergel_<mode>): Adjust for\n\t-maltivec=be with LE targets.\n\t(vsx_mergeh_<mode>): Likewise.\n\t* config/rs6000/altivec.md (UNSPEC_VMRG[HL]_DIRECT): New\n\tunspecs.\n\t(mulv8hi3): Use gen_altivec_vmrg[hl]w_direct.\n\t(altivec_vmrghb): Replace with define_expand and new\n\t*altivec_vmrghb_internal insn; adjust for -maltivec=be with LE\n\ttargets.\n\t(altivec_vmrghb_direct): New define_insn.\n\t(altivec_vmrghh): Replace with define_expand and new\n\t*altivec_vmrghh_internal insn; adjust for -maltivec=be with LE\n\ttargets.\n\t(altivec_vmrghh_direct): New define_insn.\n\t(altivec_vmrghw): Replace with define_expand and new\n\t*altivec_vmrghw_internal insn; adjust for -maltivec=be with LE\n\ttargets.\n\t(altivec_vmrghw_direct): New define_insn.\n\t(*altivec_vmrghsf): Adjust for endianness.\n\t(altivec_vmrglb): Replace with define_expand and new\n\t*altivec_vmrglb_internal insn; adjust for -maltivec=be with LE\n\ttargets.\n\t(altivec_vmrglb_direct): New define_insn.\n\t(altivec_vmrglh): Replace with define_expand and new\n\t*altivec_vmrglh_internal insn; adjust for -maltivec=be with LE\n\ttargets.\n\t(altivec_vmrglh_direct): New define_insn.\n\t(altivec_vmrglw): Replace with define_expand and new\n\t*altivec_vmrglw_internal insn; adjust for -maltivec=be with LE\n\ttargets.\n\t(altivec_vmrglw_direct): New define_insn.\n\t(*altivec_vmrglsf): Adjust for endianness.\n\t(vec_widen_umult_hi_v16qi): Use gen_altivec_vmrghh_direct.\n\t(vec_widen_umult_lo_v16qi): Use gen_altivec_vmrglh_direct.\n\t(vec_widen_smult_hi_v16qi): Use gen_altivec_vmrghh_direct.\n\t(vec_widen_smult_lo_v16qi): Use gen_altivec_vmrglh_direct.\n\t(vec_widen_umult_hi_v8hi): Use gen_altivec_vmrghw_direct.\n\t(vec_widen_umult_lo_v8hi): Use gen_altivec_vmrglw_direct.\n\t(vec_widen_smult_hi_v8hi): Use gen_altivec_vmrghw_direct.\n\t(vec_widen_smult_lo_v8hi): Use gen_altivec_vmrglw_direct.\n\ngcc/testsuite:\n\n2014-01-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.dg/vmx/merge-be-order.c: New.\n\t* gcc.dg/vmx/merge.c: New.\n\t* gcc.dg/vmx/merge-vsx-be-order.c: New.\n\t* gcc.dg/vmx/merge-vsx.c: New.\n\nFrom-SVN: r207262", "tree": {"sha": "82ca371f4b7d04061d03f671dd412f1611123fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82ca371f4b7d04061d03f671dd412f1611123fdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98b5d2980d95d110ad4ba26e83fbcad4648b658d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b5d2980d95d110ad4ba26e83fbcad4648b658d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b5d2980d95d110ad4ba26e83fbcad4648b658d"}], "stats": {"total": 709, "additions": 659, "deletions": 50}, "files": [{"sha": "d5f662b30d6b5710c2f1c5c47a302c1151d84900", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -1,3 +1,48 @@\n+2014-01-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const):  Use\n+\tCODE_FOR_altivec_vmrg*_direct rather than CODE_FOR_altivec_vmrg*.\n+\t* config/rs6000/vsx.md (vsx_mergel_<mode>): Adjust for\n+\t-maltivec=be with LE targets.\n+\t(vsx_mergeh_<mode>): Likewise.\n+\t* config/rs6000/altivec.md (UNSPEC_VMRG[HL]_DIRECT): New\n+\tunspecs.\n+\t(mulv8hi3): Use gen_altivec_vmrg[hl]w_direct.\n+\t(altivec_vmrghb): Replace with define_expand and new\n+\t*altivec_vmrghb_internal insn; adjust for -maltivec=be with LE\n+\ttargets.\n+\t(altivec_vmrghb_direct): New define_insn.\n+\t(altivec_vmrghh): Replace with define_expand and new\n+\t*altivec_vmrghh_internal insn; adjust for -maltivec=be with LE\n+\ttargets.\n+\t(altivec_vmrghh_direct): New define_insn.\n+\t(altivec_vmrghw): Replace with define_expand and new\n+\t*altivec_vmrghw_internal insn; adjust for -maltivec=be with LE\n+\ttargets.\n+\t(altivec_vmrghw_direct): New define_insn.\n+\t(*altivec_vmrghsf): Adjust for endianness.\n+\t(altivec_vmrglb): Replace with define_expand and new\n+\t*altivec_vmrglb_internal insn; adjust for -maltivec=be with LE\n+\ttargets.\n+\t(altivec_vmrglb_direct): New define_insn.\n+\t(altivec_vmrglh): Replace with define_expand and new\n+\t*altivec_vmrglh_internal insn; adjust for -maltivec=be with LE\n+\ttargets.\n+\t(altivec_vmrglh_direct): New define_insn.\n+\t(altivec_vmrglw): Replace with define_expand and new\n+\t*altivec_vmrglw_internal insn; adjust for -maltivec=be with LE\n+\ttargets.\n+\t(altivec_vmrglw_direct): New define_insn.\n+\t(*altivec_vmrglsf): Adjust for endianness.\n+\t(vec_widen_umult_hi_v16qi): Use gen_altivec_vmrghh_direct.\n+\t(vec_widen_umult_lo_v16qi): Use gen_altivec_vmrglh_direct.\n+\t(vec_widen_smult_hi_v16qi): Use gen_altivec_vmrghh_direct.\n+\t(vec_widen_smult_lo_v16qi): Use gen_altivec_vmrglh_direct.\n+\t(vec_widen_umult_hi_v8hi): Use gen_altivec_vmrghw_direct.\n+\t(vec_widen_umult_lo_v8hi): Use gen_altivec_vmrglw_direct.\n+\t(vec_widen_smult_hi_v8hi): Use gen_altivec_vmrghw_direct.\n+\t(vec_widen_smult_lo_v8hi): Use gen_altivec_vmrglw_direct.\n+\n 2014-01-29  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_expand_mov_immediate)"}, {"sha": "57e8adae950b6aeaab67710b59505587ee8aeb15", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 293, "deletions": 30, "changes": 323, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -129,6 +129,9 @@\n    UNSPEC_VUPKHU_V4SF\n    UNSPEC_VUPKLU_V4SF\n    UNSPEC_VGBBD\n+   UNSPEC_VMRGH_DIRECT\n+   UNSPEC_VMRGL_DIRECT\n+   UNSPEC_VSPLT_DIRECT\n ])\n \n (define_c_enum \"unspecv\"\n@@ -677,16 +680,16 @@\n      {\n        emit_insn (gen_altivec_vmulesh (even, operands[1], operands[2]));\n        emit_insn (gen_altivec_vmulosh (odd, operands[1], operands[2]));\n-       emit_insn (gen_altivec_vmrghw (high, even, odd));\n-       emit_insn (gen_altivec_vmrglw (low, even, odd));\n+       emit_insn (gen_altivec_vmrghw_direct (high, even, odd));\n+       emit_insn (gen_altivec_vmrglw_direct (low, even, odd));\n        emit_insn (gen_altivec_vpkuwum (operands[0], high, low));\n      }\n    else\n      {\n        emit_insn (gen_altivec_vmulosh (even, operands[1], operands[2]));\n        emit_insn (gen_altivec_vmulesh (odd, operands[1], operands[2]));\n-       emit_insn (gen_altivec_vmrghw (high, odd, even));\n-       emit_insn (gen_altivec_vmrglw (low, odd, even));\n+       emit_insn (gen_altivec_vmrghw_direct (high, odd, even));\n+       emit_insn (gen_altivec_vmrglw_direct (low, odd, even));\n        emit_insn (gen_altivec_vpkuwum (operands[0], low, high));\n      } \n \n@@ -839,9 +842,40 @@\n   \"vmladduhm %0,%1,%2,%3\"\n   [(set_attr \"type\" \"veccomplex\")])\n \n-(define_insn \"altivec_vmrghb\"\n+(define_expand \"altivec_vmrghb\"\n+  [(use (match_operand:V16QI 0 \"register_operand\" \"\"))\n+   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n+   (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  /* Special handling for LE with -maltivec=be.  */\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      v = gen_rtvec (16, GEN_INT (8), GEN_INT (24), GEN_INT (9), GEN_INT (25),\n+                     GEN_INT (10), GEN_INT (26), GEN_INT (11), GEN_INT (27),\n+\t\t     GEN_INT (12), GEN_INT (28), GEN_INT (13), GEN_INT (29),\n+\t\t     GEN_INT (14), GEN_INT (30), GEN_INT (15), GEN_INT (31));\n+      x = gen_rtx_VEC_CONCAT (V32QImode, operands[2], operands[1]);\n+    }\n+  else\n+    {\n+      v = gen_rtvec (16, GEN_INT (0), GEN_INT (16), GEN_INT (1), GEN_INT (17),\n+                     GEN_INT (2), GEN_INT (18), GEN_INT (3), GEN_INT (19),\n+\t\t     GEN_INT (4), GEN_INT (20), GEN_INT (5), GEN_INT (21),\n+\t\t     GEN_INT (6), GEN_INT (22), GEN_INT (7), GEN_INT (23));\n+      x = gen_rtx_VEC_CONCAT (V32QImode, operands[1], operands[2]);\n+    }\n+\n+  x = gen_rtx_VEC_SELECT (V16QImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+})\n+\n+(define_insn \"*altivec_vmrghb_internal\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(vec_select:V16QI\n+        (vec_select:V16QI\n \t  (vec_concat:V32QI\n \t    (match_operand:V16QI 1 \"register_operand\" \"v\")\n \t    (match_operand:V16QI 2 \"register_operand\" \"v\"))\n@@ -854,12 +888,53 @@\n \t\t     (const_int 6) (const_int 22)\n \t\t     (const_int 7) (const_int 23)])))]\n   \"TARGET_ALTIVEC\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vmrghb %0,%1,%2\";\n+  else\n+    return \"vmrglb %0,%2,%1\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vmrghb_direct\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+                       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n+\t\t      UNSPEC_VMRGH_DIRECT))]\n+  \"TARGET_ALTIVEC\"\n   \"vmrghb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vmrghh\"\n+(define_expand \"altivec_vmrghh\"\n+  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n+   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n+   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  /* Special handling for LE with -maltivec=be.  */\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      v = gen_rtvec (8, GEN_INT (4), GEN_INT (12), GEN_INT (5), GEN_INT (13),\n+                     GEN_INT (6), GEN_INT (14), GEN_INT (7), GEN_INT (15));\n+      x = gen_rtx_VEC_CONCAT (V16HImode, operands[2], operands[1]);\n+    }\n+  else\n+    {\n+      v = gen_rtvec (8, GEN_INT (0), GEN_INT (8), GEN_INT (1), GEN_INT (9),\n+                     GEN_INT (2), GEN_INT (10), GEN_INT (3), GEN_INT (11));\n+      x = gen_rtx_VEC_CONCAT (V16HImode, operands[1], operands[2]);\n+    }\n+\n+  x = gen_rtx_VEC_SELECT (V8HImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+})\n+\n+(define_insn \"*altivec_vmrghh_internal\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-\t(vec_select:V8HI\n+        (vec_select:V8HI\n \t  (vec_concat:V16HI\n \t    (match_operand:V8HI 1 \"register_operand\" \"v\")\n \t    (match_operand:V8HI 2 \"register_operand\" \"v\"))\n@@ -868,10 +943,49 @@\n \t\t     (const_int 2) (const_int 10)\n \t\t     (const_int 3) (const_int 11)])))]\n   \"TARGET_ALTIVEC\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vmrghh %0,%1,%2\";\n+  else\n+    return \"vmrglh %0,%2,%1\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vmrghh_direct\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+                      (match_operand:V8HI 2 \"register_operand\" \"v\")]\n+                     UNSPEC_VMRGH_DIRECT))]\n+  \"TARGET_ALTIVEC\"\n   \"vmrghh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vmrghw\"\n+(define_expand \"altivec_vmrghw\"\n+  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n+   (use (match_operand:V4SI 1 \"register_operand\" \"\"))\n+   (use (match_operand:V4SI 2 \"register_operand\" \"\"))]\n+  \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  /* Special handling for LE with -maltivec=be.  */\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      v = gen_rtvec (4, GEN_INT (2), GEN_INT (6), GEN_INT (3), GEN_INT (7));\n+      x = gen_rtx_VEC_CONCAT (V8SImode, operands[2], operands[1]);\n+    }\n+  else\n+    {\n+      v = gen_rtvec (4, GEN_INT (0), GEN_INT (4), GEN_INT (1), GEN_INT (5));\n+      x = gen_rtx_VEC_CONCAT (V8SImode, operands[1], operands[2]);\n+    }\n+\n+  x = gen_rtx_VEC_SELECT (V4SImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+})\n+\n+(define_insn \"*altivec_vmrghw_internal\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n         (vec_select:V4SI\n \t  (vec_concat:V8SI\n@@ -880,6 +994,20 @@\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vmrghw %0,%1,%2\";\n+  else\n+    return \"vmrglw %0,%2,%1\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vmrghw_direct\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+                      (match_operand:V4SI 2 \"register_operand\" \"v\")]\n+                     UNSPEC_VMRGH_DIRECT))]\n+  \"TARGET_ALTIVEC\"\n   \"vmrghw %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -892,10 +1020,46 @@\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SFmode)\"\n-  \"vmrghw %0,%1,%2\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vmrghw %0,%1,%2\";\n+  else\n+    return \"vmrglw %0,%2,%1\";\n+}\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vmrglb\"\n+(define_expand \"altivec_vmrglb\"\n+  [(use (match_operand:V16QI 0 \"register_operand\" \"\"))\n+   (use (match_operand:V16QI 1 \"register_operand\" \"\"))\n+   (use (match_operand:V16QI 2 \"register_operand\" \"\"))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  /* Special handling for LE with -maltivec=be.  */\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      v = gen_rtvec (16, GEN_INT (0), GEN_INT (16), GEN_INT (1), GEN_INT (17),\n+                     GEN_INT (2), GEN_INT (18), GEN_INT (3), GEN_INT (19),\n+\t\t     GEN_INT (4), GEN_INT (20), GEN_INT (5), GEN_INT (21),\n+\t\t     GEN_INT (6), GEN_INT (22), GEN_INT (7), GEN_INT (23));\n+      x = gen_rtx_VEC_CONCAT (V32QImode, operands[2], operands[1]);\n+    }\n+  else\n+    {\n+      v = gen_rtvec (16, GEN_INT (8), GEN_INT (24), GEN_INT (9), GEN_INT (25),\n+                     GEN_INT (10), GEN_INT (26), GEN_INT (11), GEN_INT (27),\n+\t\t     GEN_INT (12), GEN_INT (28), GEN_INT (13), GEN_INT (29),\n+\t\t     GEN_INT (14), GEN_INT (30), GEN_INT (15), GEN_INT (31));\n+      x = gen_rtx_VEC_CONCAT (V32QImode, operands[1], operands[2]);\n+    }\n+\n+  x = gen_rtx_VEC_SELECT (V16QImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+})\n+\n+(define_insn \"*altivec_vmrglb_internal\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n         (vec_select:V16QI\n \t  (vec_concat:V32QI\n@@ -910,10 +1074,51 @@\n \t\t     (const_int 14) (const_int 30)\n \t\t     (const_int 15) (const_int 31)])))]\n   \"TARGET_ALTIVEC\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vmrglb %0,%1,%2\";\n+  else\n+    return \"vmrghb %0,%2,%1\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vmrglb_direct\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+        (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+    \t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n+                      UNSPEC_VMRGL_DIRECT))]\n+  \"TARGET_ALTIVEC\"\n   \"vmrglb %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vmrglh\"\n+(define_expand \"altivec_vmrglh\"\n+  [(use (match_operand:V8HI 0 \"register_operand\" \"\"))\n+   (use (match_operand:V8HI 1 \"register_operand\" \"\"))\n+   (use (match_operand:V8HI 2 \"register_operand\" \"\"))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  /* Special handling for LE with -maltivec=be.  */\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      v = gen_rtvec (8, GEN_INT (0), GEN_INT (8), GEN_INT (1), GEN_INT (9),\n+                     GEN_INT (2), GEN_INT (10), GEN_INT (3), GEN_INT (11));\n+      x = gen_rtx_VEC_CONCAT (V16HImode, operands[2], operands[1]);\n+    }\n+  else\n+    {\n+      v = gen_rtvec (8, GEN_INT (4), GEN_INT (12), GEN_INT (5), GEN_INT (13),\n+                     GEN_INT (6), GEN_INT (14), GEN_INT (7), GEN_INT (15));\n+      x = gen_rtx_VEC_CONCAT (V16HImode, operands[1], operands[2]);\n+    }\n+\n+  x = gen_rtx_VEC_SELECT (V8HImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+})\n+\n+(define_insn \"*altivec_vmrglh_internal\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n         (vec_select:V8HI\n \t  (vec_concat:V16HI\n@@ -924,10 +1129,49 @@\n \t\t     (const_int 6) (const_int 14)\n \t\t     (const_int 7) (const_int 15)])))]\n   \"TARGET_ALTIVEC\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vmrglh %0,%1,%2\";\n+  else\n+    return \"vmrghh %0,%2,%1\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vmrglh_direct\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+        (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V8HI 2 \"register_operand\" \"v\")]\n+                     UNSPEC_VMRGL_DIRECT))]\n+  \"TARGET_ALTIVEC\"\n   \"vmrglh %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n-(define_insn \"altivec_vmrglw\"\n+(define_expand \"altivec_vmrglw\"\n+  [(use (match_operand:V4SI 0 \"register_operand\" \"\"))\n+   (use (match_operand:V4SI 1 \"register_operand\" \"\"))\n+   (use (match_operand:V4SI 2 \"register_operand\" \"\"))]\n+  \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  /* Special handling for LE with -maltivec=be.  */\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      v = gen_rtvec (4, GEN_INT (0), GEN_INT (4), GEN_INT (1), GEN_INT (5));\n+      x = gen_rtx_VEC_CONCAT (V8SImode, operands[2], operands[1]);\n+    }\n+  else\n+    {\n+      v = gen_rtvec (4, GEN_INT (2), GEN_INT (6), GEN_INT (3), GEN_INT (7));\n+      x = gen_rtx_VEC_CONCAT (V8SImode, operands[1], operands[2]);\n+    }\n+\n+  x = gen_rtx_VEC_SELECT (V4SImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+})\n+\n+(define_insn \"*altivec_vmrglw_internal\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n         (vec_select:V4SI\n \t  (vec_concat:V8SI\n@@ -936,6 +1180,20 @@\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SImode)\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vmrglw %0,%1,%2\";\n+  else\n+    return \"vmrghw %0,%2,%1\";\n+}\n+  [(set_attr \"type\" \"vecperm\")])\n+\n+(define_insn \"altivec_vmrglw_direct\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t              (match_operand:V4SI 2 \"register_operand\" \"v\")]\n+                     UNSPEC_VMRGL_DIRECT))]\n+  \"TARGET_ALTIVEC\"\n   \"vmrglw %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n@@ -948,7 +1206,12 @@\n \t (parallel [(const_int 2) (const_int 6)\n \t\t    (const_int 3) (const_int 7)])))]\n   \"VECTOR_MEM_ALTIVEC_P (V4SFmode)\"\n-  \"vmrglw %0,%1,%2\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    return \"vmrglw %0,%1,%2\";\n+  else\n+    return \"vmrghw %0,%2,%1\";\n+}\n   [(set_attr \"type\" \"vecperm\")])\n \n ;; Power8 vector merge even/odd\n@@ -2225,13 +2488,13 @@\n     {\n       emit_insn (gen_altivec_vmuleub (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmuloub (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghh (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrghh_direct (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmuloub (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmuleub (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghh (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrghh_direct (operands[0], vo, ve));\n     }\n   DONE;\n }\")\n@@ -2251,13 +2514,13 @@\n     {\n       emit_insn (gen_altivec_vmuleub (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmuloub (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglh (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrglh_direct (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmuloub (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmuleub (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglh (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrglh_direct (operands[0], vo, ve));\n     }\n   DONE;\n }\")\n@@ -2277,13 +2540,13 @@\n     {\n       emit_insn (gen_altivec_vmulesb (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulosb (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghh (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrghh_direct (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulosb (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulesb (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghh (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrghh_direct (operands[0], vo, ve));\n     }\n   DONE;\n }\")\n@@ -2303,13 +2566,13 @@\n     {\n       emit_insn (gen_altivec_vmulesb (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulosb (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglh (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrglh_direct (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulosb (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulesb (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglh (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrglh_direct (operands[0], vo, ve));\n     }\n   DONE;\n }\")\n@@ -2329,13 +2592,13 @@\n     {\n       emit_insn (gen_altivec_vmuleuh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulouh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghw (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrghw_direct (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulouh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmuleuh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghw (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrghw_direct (operands[0], vo, ve));\n     }\n   DONE;\n }\")\n@@ -2355,13 +2618,13 @@\n     {\n       emit_insn (gen_altivec_vmuleuh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulouh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglw (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrglw_direct (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulouh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmuleuh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglw (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrglw_direct (operands[0], vo, ve));\n     }\n   DONE;\n }\")\n@@ -2381,13 +2644,13 @@\n     {\n       emit_insn (gen_altivec_vmulesh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulosh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghw (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrghw_direct (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulosh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulesh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrghw (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrghw_direct (operands[0], vo, ve));\n     }\n   DONE;\n }\")\n@@ -2407,13 +2670,13 @@\n     {\n       emit_insn (gen_altivec_vmulesh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulosh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglw (operands[0], ve, vo));\n+      emit_insn (gen_altivec_vmrglw_direct (operands[0], ve, vo));\n     }\n   else\n     {\n       emit_insn (gen_altivec_vmulosh (ve, operands[1], operands[2]));\n       emit_insn (gen_altivec_vmulesh (vo, operands[1], operands[2]));\n-      emit_insn (gen_altivec_vmrglw (operands[0], vo, ve));\n+      emit_insn (gen_altivec_vmrglw_direct (operands[0], vo, ve));\n     }\n   DONE;\n }\")"}, {"sha": "8753e16030b0b4df1aaff1510e08683ca1994964", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -29895,22 +29895,28 @@ altivec_expand_vec_perm_const (rtx operands[4])\n     { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vpkuwum,\n       {  2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31 } },\n     { OPTION_MASK_ALTIVEC, \n-      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghb : CODE_FOR_altivec_vmrglb,\n+      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghb_direct\n+       : CODE_FOR_altivec_vmrglb_direct),\n       {  0, 16,  1, 17,  2, 18,  3, 19,  4, 20,  5, 21,  6, 22,  7, 23 } },\n     { OPTION_MASK_ALTIVEC,\n-      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghh : CODE_FOR_altivec_vmrglh,\n+      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghh_direct\n+       : CODE_FOR_altivec_vmrglh_direct),\n       {  0,  1, 16, 17,  2,  3, 18, 19,  4,  5, 20, 21,  6,  7, 22, 23 } },\n     { OPTION_MASK_ALTIVEC,\n-      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghw : CODE_FOR_altivec_vmrglw,\n+      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghw_direct\n+       : CODE_FOR_altivec_vmrglw_direct),\n       {  0,  1,  2,  3, 16, 17, 18, 19,  4,  5,  6,  7, 20, 21, 22, 23 } },\n     { OPTION_MASK_ALTIVEC,\n-      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglb : CODE_FOR_altivec_vmrghb,\n+      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglb_direct\n+       : CODE_FOR_altivec_vmrghb_direct),\n       {  8, 24,  9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 } },\n     { OPTION_MASK_ALTIVEC,\n-      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglh : CODE_FOR_altivec_vmrghh,\n+      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglh_direct\n+       : CODE_FOR_altivec_vmrghh_direct),\n       {  8,  9, 24, 25, 10, 11, 26, 27, 12, 13, 28, 29, 14, 15, 30, 31 } },\n     { OPTION_MASK_ALTIVEC,\n-      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglw : CODE_FOR_altivec_vmrghw,\n+      (BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglw_direct\n+       : CODE_FOR_altivec_vmrghw_direct),\n       {  8,  9, 10, 11, 24, 25, 26, 27, 12, 13, 14, 15, 28, 29, 30, 31 } },\n     { OPTION_MASK_P8_VECTOR, CODE_FOR_p8_vmrgew,\n       {  0,  1,  2,  3, 16, 17, 18, 19,  8,  9, 10, 11, 24, 25, 26, 27 } },"}, {"sha": "5a80fe4ccd1310d1b38d2681f4cfe2745a354690", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -1678,24 +1678,54 @@\n \n ;; Expanders for builtins\n (define_expand \"vsx_mergel_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"\")\n-\t(vec_select:VSX_D\n-\t  (vec_concat:<VS_double>\n-\t    (match_operand:VSX_D 1 \"vsx_register_operand\" \"\")\n-\t    (match_operand:VSX_D 2 \"vsx_register_operand\" \"\"))\n-\t  (parallel [(const_int 1) (const_int 3)])))]\n+  [(use (match_operand:VSX_D 0 \"vsx_register_operand\" \"\"))\n+   (use (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))\n+   (use (match_operand:VSX_D 2 \"vsx_register_operand\" \"\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n-  \"\")\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  /* Special handling for LE with -maltivec=be.  */\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      v = gen_rtvec (2, GEN_INT (0), GEN_INT (2));\n+      x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[2], operands[1]);\n+    }\n+  else\n+    {\n+      v = gen_rtvec (2, GEN_INT (1), GEN_INT (3));\n+      x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[1], operands[2]);\n+    }\n+\n+  x = gen_rtx_VEC_SELECT (<MODE>mode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+})\n \n (define_expand \"vsx_mergeh_<mode>\"\n-  [(set (match_operand:VSX_D 0 \"vsx_register_operand\" \"\")\n-\t(vec_select:VSX_D\n-\t  (vec_concat:<VS_double>\n-\t    (match_operand:VSX_D 1 \"vsx_register_operand\" \"\")\n-\t    (match_operand:VSX_D 2 \"vsx_register_operand\" \"\"))\n-\t  (parallel [(const_int 0) (const_int 2)])))]\n+  [(use (match_operand:VSX_D 0 \"vsx_register_operand\" \"\"))\n+   (use (match_operand:VSX_D 1 \"vsx_register_operand\" \"\"))\n+   (use (match_operand:VSX_D 2 \"vsx_register_operand\" \"\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\"\n-  \"\")\n+{\n+  rtvec v;\n+  rtx x;\n+\n+  /* Special handling for LE with -maltivec=be.  */\n+  if (!BYTES_BIG_ENDIAN && VECTOR_ELT_ORDER_BIG)\n+    {\n+      v = gen_rtvec (2, GEN_INT (1), GEN_INT (3));\n+      x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[2], operands[1]);\n+    }\n+  else\n+    {\n+      v = gen_rtvec (2, GEN_INT (0), GEN_INT (2));\n+      x = gen_rtx_VEC_CONCAT (<VS_double>mode, operands[1], operands[2]);\n+    }\n+\n+  x = gen_rtx_VEC_SELECT (<MODE>mode, x, gen_rtx_PARALLEL (VOIDmode, v));\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+})\n \n ;; V2DF/V2DI splat\n (define_insn \"vsx_splat_<mode>\""}, {"sha": "ac0ee8476703566ab0c02919eac7796c4c578991", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -1,3 +1,10 @@\n+2014-01-29  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.dg/vmx/merge-be-order.c: New.\n+\t* gcc.dg/vmx/merge.c: New.\n+\t* gcc.dg/vmx/merge-vsx-be-order.c: New.\n+\t* gcc.dg/vmx/merge-vsx.c: New.\n+\n 2014-01-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58742"}, {"sha": "2de888fa444f08786927375d7b74bf3735c32ed3", "filename": "gcc/testsuite/gcc.dg/vmx/merge-be-order.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-be-order.c?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mno-vsx\" } */\n+\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned char vucb\n+    = {16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n+  vector signed char vsca\n+    = {-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed char vscb = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n+  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed short vssb = {0,1,2,3,4,5,6,7};\n+  vector unsigned int vuia = {0,1,2,3};\n+  vector unsigned int vuib = {4,5,6,7};\n+  vector signed int vsia = {-4,-3,-2,-1};\n+  vector signed int vsib = {0,1,2,3};\n+  vector float vfa = {-4.0,-3.0,-2.0,-1.0};\n+  vector float vfb = {0.0,1.0,2.0,3.0};\n+\n+  /* Result vectors.  */\n+  vector unsigned char vuch, vucl;\n+  vector signed char vsch, vscl;\n+  vector unsigned short vush, vusl;\n+  vector signed short vssh, vssl;\n+  vector unsigned int vuih, vuil;\n+  vector signed int vsih, vsil;\n+  vector float vfh, vfl;\n+\n+  /* Expected result vectors.  */\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector unsigned char vucrh = {24,8,25,9,26,10,27,11,28,12,29,13,30,14,31,15};\n+  vector unsigned char vucrl = {16,0,17,1,18,2,19,3,20,4,21,5,22,6,23,7};\n+  vector signed char vscrh = {8,-8,9,-7,10,-6,11,-5,12,-4,13,-3,14,-2,15,-1};\n+  vector signed char vscrl = {0,-16,1,-15,2,-14,3,-13,4,-12,5,-11,6,-10,7,-9};\n+  vector unsigned short vusrh = {12,4,13,5,14,6,15,7};\n+  vector unsigned short vusrl = {8,0,9,1,10,2,11,3};\n+  vector signed short vssrh = {4,-4,5,-3,6,-2,7,-1};\n+  vector signed short vssrl = {0,-8,1,-7,2,-6,3,-5};\n+  vector unsigned int vuirh = {6,2,7,3};\n+  vector unsigned int vuirl = {4,0,5,1};\n+  vector signed int vsirh = {2,-2,3,-1};\n+  vector signed int vsirl = {0,-4,1,-3};\n+  vector float vfrh = {2.0,-2.0,3.0,-1.0};\n+  vector float vfrl = {0.0,-4.0,1.0,-3.0};\n+#else\n+  vector unsigned char vucrh = {0,16,1,17,2,18,3,19,4,20,5,21,6,22,7,23};\n+  vector unsigned char vucrl = {8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31};\n+  vector signed char vscrh = {-16,0,-15,1,-14,2,-13,3,-12,4,-11,5,-10,6,-9,7};\n+  vector signed char vscrl = {-8,8,-7,9,-6,10,-5,11,-4,12,-3,13,-2,14,-1,15};\n+  vector unsigned short vusrh = {0,8,1,9,2,10,3,11};\n+  vector unsigned short vusrl = {4,12,5,13,6,14,7,15};\n+  vector signed short vssrh = {-8,0,-7,1,-6,2,-5,3};\n+  vector signed short vssrl = {-4,4,-3,5,-2,6,-1,7};\n+  vector unsigned int vuirh = {0,4,1,5};\n+  vector unsigned int vuirl = {2,6,3,7};\n+  vector signed int vsirh = {-4,0,-3,1};\n+  vector signed int vsirl = {-2,2,-1,3};\n+  vector float vfrh = {-4.0,0.0,-3.0,1.0};\n+  vector float vfrl = {-2.0,2.0,-1.0,3.0};\n+#endif\n+\n+  vuch = vec_mergeh (vuca, vucb);\n+  vucl = vec_mergel (vuca, vucb);\n+  vsch = vec_mergeh (vsca, vscb);\n+  vscl = vec_mergel (vsca, vscb);\n+  vush = vec_mergeh (vusa, vusb);\n+  vusl = vec_mergel (vusa, vusb);\n+  vssh = vec_mergeh (vssa, vssb);\n+  vssl = vec_mergel (vssa, vssb);\n+  vuih = vec_mergeh (vuia, vuib);\n+  vuil = vec_mergel (vuia, vuib);\n+  vsih = vec_mergeh (vsia, vsib);\n+  vsil = vec_mergel (vsia, vsib);\n+  vfh  = vec_mergeh (vfa,  vfb );\n+  vfl  = vec_mergel (vfa,  vfb );\n+\n+  check (vec_all_eq (vuch, vucrh), \"vuch\");\n+  check (vec_all_eq (vucl, vucrl), \"vucl\");\n+  check (vec_all_eq (vsch, vscrh), \"vsch\");\n+  check (vec_all_eq (vscl, vscrl), \"vscl\");\n+  check (vec_all_eq (vush, vusrh), \"vush\");\n+  check (vec_all_eq (vusl, vusrl), \"vusl\");\n+  check (vec_all_eq (vssh, vssrh), \"vssh\");\n+  check (vec_all_eq (vssl, vssrl), \"vssl\");\n+  check (vec_all_eq (vuih, vuirh), \"vuih\");\n+  check (vec_all_eq (vuil, vuirl), \"vuil\");\n+  check (vec_all_eq (vsih, vsirh), \"vsih\");\n+  check (vec_all_eq (vsil, vsirl), \"vsil\");\n+  check (vec_all_eq (vfh,  vfrh),  \"vfh\");\n+  check (vec_all_eq (vfl,  vfrl),  \"vfl\");\n+}"}, {"sha": "92cdabff0cf95b7e6e8741a6e9b9d4277af1fa98", "filename": "gcc/testsuite/gcc.dg/vmx/merge-vsx-be-order.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx-be-order.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx-be-order.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx-be-order.c?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec=be -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static int vec_long_eq (vector long x, vector long y)\n+{\n+  return (x[0] == y[0] && x[1] == y[1]);\n+}\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector long vla = {-2,-1};\n+  vector long vlb = {0,1};\n+  vector double vda = {-2.0,-1.0};\n+  vector double vdb = {0.0,1.0};\n+\n+  /* Result vectors.  */\n+  vector long vlh, vll;\n+  vector double vdh, vdl;\n+\n+  /* Expected result vectors.  */\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  vector long vlrh = {1,-1};\n+  vector long vlrl = {0,-2};\n+  vector double vdrh = {1.0,-1.0};\n+  vector double vdrl = {0.0,-2.0};\n+#else\n+  vector long vlrh = {-2,0};\n+  vector long vlrl = {-1,1};\n+  vector double vdrh = {-2.0,0.0};\n+  vector double vdrl = {-1.0,1.0};\n+#endif\n+\n+  vlh = vec_mergeh (vla, vlb);\n+  vll = vec_mergel (vla, vlb);\n+  vdh = vec_mergeh (vda, vdb);\n+  vdl = vec_mergel (vda, vdb);\n+\n+  check (vec_long_eq (vlh, vlrh), \"vlh\");\n+  check (vec_long_eq (vll, vlrl), \"vll\");\n+  check (vec_all_eq (vdh, vdrh), \"vdh\" );\n+  check (vec_all_eq (vdl, vdrl), \"vdl\" );\n+}"}, {"sha": "51e457468434b9da0e5e5d0493c18c3cdfabb499", "filename": "gcc/testsuite/gcc.dg/vmx/merge-vsx.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge-vsx.c?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-maltivec -mabi=altivec -std=gnu99 -mvsx\" } */\n+\n+#include \"harness.h\"\n+\n+static int vec_long_eq (vector long x, vector long y)\n+{\n+  return (x[0] == y[0] && x[1] == y[1]);\n+}\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector long vla = {-2,-1};\n+  vector long vlb = {0,1};\n+  vector double vda = {-2.0,-1.0};\n+  vector double vdb = {0.0,1.0};\n+\n+  /* Result vectors.  */\n+  vector long vlh, vll;\n+  vector double vdh, vdl;\n+\n+  /* Expected result vectors.  */\n+  vector long vlrh = {-2,0};\n+  vector long vlrl = {-1,1};\n+  vector double vdrh = {-2.0,0.0};\n+  vector double vdrl = {-1.0,1.0};\n+\n+  vlh = vec_mergeh (vla, vlb);\n+  vll = vec_mergel (vla, vlb);\n+  vdh = vec_mergeh (vda, vdb);\n+  vdl = vec_mergel (vda, vdb);\n+\n+  check (vec_long_eq (vlh, vlrh), \"vlh\");\n+  check (vec_long_eq (vll, vlrl), \"vll\");\n+  check (vec_all_eq (vdh, vdrh), \"vdh\" );\n+  check (vec_all_eq (vdl, vdrl), \"vdl\" );\n+}"}, {"sha": "84b14fea744ad82b3c5577d344dfa059be3d9c7f", "filename": "gcc/testsuite/gcc.dg/vmx/merge.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d3bacf0d74c8990e7b1520649b1f2b151d31f5/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmerge.c?ref=68d3bacf0d74c8990e7b1520649b1f2b151d31f5", "patch": "@@ -0,0 +1,77 @@\n+#include \"harness.h\"\n+\n+static void test()\n+{\n+  /* Input vectors.  */\n+  vector unsigned char vuca = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned char vucb\n+    = {16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n+  vector signed char vsca\n+    = {-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed char vscb = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  vector unsigned short vusa = {0,1,2,3,4,5,6,7};\n+  vector unsigned short vusb = {8,9,10,11,12,13,14,15};\n+  vector signed short vssa = {-8,-7,-6,-5,-4,-3,-2,-1};\n+  vector signed short vssb = {0,1,2,3,4,5,6,7};\n+  vector unsigned int vuia = {0,1,2,3};\n+  vector unsigned int vuib = {4,5,6,7};\n+  vector signed int vsia = {-4,-3,-2,-1};\n+  vector signed int vsib = {0,1,2,3};\n+  vector float vfa = {-4.0,-3.0,-2.0,-1.0};\n+  vector float vfb = {0.0,1.0,2.0,3.0};\n+\n+  /* Result vectors.  */\n+  vector unsigned char vuch, vucl;\n+  vector signed char vsch, vscl;\n+  vector unsigned short vush, vusl;\n+  vector signed short vssh, vssl;\n+  vector unsigned int vuih, vuil;\n+  vector signed int vsih, vsil;\n+  vector float vfh, vfl;\n+\n+  /* Expected result vectors.  */\n+  vector unsigned char vucrh = {0,16,1,17,2,18,3,19,4,20,5,21,6,22,7,23};\n+  vector unsigned char vucrl = {8,24,9,25,10,26,11,27,12,28,13,29,14,30,15,31};\n+  vector signed char vscrh = {-16,0,-15,1,-14,2,-13,3,-12,4,-11,5,-10,6,-9,7};\n+  vector signed char vscrl = {-8,8,-7,9,-6,10,-5,11,-4,12,-3,13,-2,14,-1,15};\n+  vector unsigned short vusrh = {0,8,1,9,2,10,3,11};\n+  vector unsigned short vusrl = {4,12,5,13,6,14,7,15};\n+  vector signed short vssrh = {-8,0,-7,1,-6,2,-5,3};\n+  vector signed short vssrl = {-4,4,-3,5,-2,6,-1,7};\n+  vector unsigned int vuirh = {0,4,1,5};\n+  vector unsigned int vuirl = {2,6,3,7};\n+  vector signed int vsirh = {-4,0,-3,1};\n+  vector signed int vsirl = {-2,2,-1,3};\n+  vector float vfrh = {-4.0,0.0,-3.0,1.0};\n+  vector float vfrl = {-2.0,2.0,-1.0,3.0};\n+\n+  vuch = vec_mergeh (vuca, vucb);\n+  vucl = vec_mergel (vuca, vucb);\n+  vsch = vec_mergeh (vsca, vscb);\n+  vscl = vec_mergel (vsca, vscb);\n+  vush = vec_mergeh (vusa, vusb);\n+  vusl = vec_mergel (vusa, vusb);\n+  vssh = vec_mergeh (vssa, vssb);\n+  vssl = vec_mergel (vssa, vssb);\n+  vuih = vec_mergeh (vuia, vuib);\n+  vuil = vec_mergel (vuia, vuib);\n+  vsih = vec_mergeh (vsia, vsib);\n+  vsil = vec_mergel (vsia, vsib);\n+  vfh  = vec_mergeh (vfa,  vfb );\n+  vfl  = vec_mergel (vfa,  vfb );\n+\n+  check (vec_all_eq (vuch, vucrh), \"vuch\");\n+  check (vec_all_eq (vucl, vucrl), \"vucl\");\n+  check (vec_all_eq (vsch, vscrh), \"vsch\");\n+  check (vec_all_eq (vscl, vscrl), \"vscl\");\n+  check (vec_all_eq (vush, vusrh), \"vush\");\n+  check (vec_all_eq (vusl, vusrl), \"vusl\");\n+  check (vec_all_eq (vssh, vssrh), \"vssh\");\n+  check (vec_all_eq (vssl, vssrl), \"vssl\");\n+  check (vec_all_eq (vuih, vuirh), \"vuih\");\n+  check (vec_all_eq (vuil, vuirl), \"vuil\");\n+  check (vec_all_eq (vsih, vsirh), \"vsih\");\n+  check (vec_all_eq (vsil, vsirl), \"vsil\");\n+  check (vec_all_eq (vfh,  vfrh),  \"vfh\");\n+  check (vec_all_eq (vfl,  vfrl),  \"vfl\");\n+}"}]}