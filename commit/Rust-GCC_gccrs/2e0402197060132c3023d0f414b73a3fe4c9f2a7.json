{"sha": "2e0402197060132c3023d0f414b73a3fe4c9f2a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUwNDAyMTk3MDYwMTMyYzMwMjNkMGY0MTRiNzNhM2ZlNGM5ZjJhNw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-06-27T09:49:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-06-27T09:49:44Z"}, "message": "rtl.h (emit_note): Remove FILE parameter.\n\n\t* rtl.h (emit_note): Remove FILE parameter.\n\t* emit-rtl.c (emit_line_note): Adjust emit_note call.\n\t(emit_note): Remove FILE parameter. Adjust.\n\t* builtins.c (expand_builtin_expect): Adjust emit_note call.\n\t* c-semantics.c (genrtl_scope_stmt): Likewise.\n\t(expand_stmt): Likewise.\n\t* cfglayout.c (reemit_insn_block_notes): Likewise.\n\t(duplicate_insn_chain): Likewise.\n\t* except.c (expand_eh_region_start, expand_eh_region_end,\n\tsjlj_emit_function_enter): Likewise.\n\t* explow.c (probe_stack_range): Likewise.\n\t* expr.c (emit_block_move_via_loop): Likewise.\n\t* function.c (init_function_start, expand_function_start,\n\texpand_function_end, thread_prologue_and_epilogue_insns): Likewise.\n\t* integrate.c (expand_inline_function, copy_insn_list): Likewise.\n\t* reg-stack.c (compensate_edge): Likewise.\n\t* reload1.c (reload): Likewise.\n\t* rtlanal.c (hoist_insn_to_edge): Likewise.\n\t* stmt.c (expand_fixup, expand_start_loop, expand_start_null_loop,\n\texpand_loop_continue_here, expand_end_loop, expand_continue_loop,\n\texpand_exit_loop_top_cond, expand_value_return,\n\texpand_start_bindings_and_block, expand_end_bindings,\n\texpand_decl_cleanup, expand_start_case): Likewise.\n\t* unroll.c (copy_loop_body\n\t* config/alpha/alpha.c (alpha_output_mi_thunk_osf): Likewise.\n\t* config/ia64/ia64.c (ia64_output_mi_thunk): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_emit_eh_toc_restore,\n\trs6000_emit_allocate_stack, rs6000_output_function_prologue,\n\trs6000_output_function_epilogue, rs6000_output_mi_thunk): Likewise.\n\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n\t* config/sparc/sparc.c (sparc_output_mi_thunk): Likewise.\n\n\t* ada/misc.c (record_code_position): Likewise.\n\nFrom-SVN: r68561", "tree": {"sha": "76c304e23f54cc8ab0fd72acd18ea077e9e50f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76c304e23f54cc8ab0fd72acd18ea077e9e50f60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e0402197060132c3023d0f414b73a3fe4c9f2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0402197060132c3023d0f414b73a3fe4c9f2a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0402197060132c3023d0f414b73a3fe4c9f2a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0402197060132c3023d0f414b73a3fe4c9f2a7/comments", "author": null, "committer": null, "parents": [{"sha": "bc4721b87e7805c69e5c21b163292a41e3f3e7db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc4721b87e7805c69e5c21b163292a41e3f3e7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc4721b87e7805c69e5c21b163292a41e3f3e7db"}], "stats": {"total": 187, "additions": 113, "deletions": 74}, "files": [{"sha": "e1eeb8c6d8064a25bc51aa62a4d96a107d322c96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -1,3 +1,37 @@\n+2003-06-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* rtl.h (emit_note): Remove FILE parameter.\n+\t* emit-rtl.c (emit_line_note): Adjust emit_note call.\n+\t(emit_note): Remove FILE parameter. Adjust.\n+\t* builtins.c (expand_builtin_expect): Adjust emit_note call.\n+\t* c-semantics.c (genrtl_scope_stmt): Likewise.\n+\t(expand_stmt): Likewise.\n+\t* cfglayout.c (reemit_insn_block_notes): Likewise.\n+\t(duplicate_insn_chain): Likewise.\n+\t* except.c (expand_eh_region_start, expand_eh_region_end,\n+\tsjlj_emit_function_enter): Likewise.\n+\t* explow.c (probe_stack_range): Likewise.\n+\t* expr.c (emit_block_move_via_loop): Likewise.\n+\t* function.c (init_function_start, expand_function_start,\n+\texpand_function_end, thread_prologue_and_epilogue_insns): Likewise.\n+\t* integrate.c (expand_inline_function, copy_insn_list): Likewise.\n+\t* reg-stack.c (compensate_edge): Likewise.\n+\t* reload1.c (reload): Likewise.\n+\t* rtlanal.c (hoist_insn_to_edge): Likewise.\n+\t* stmt.c (expand_fixup, expand_start_loop, expand_start_null_loop,\n+\texpand_loop_continue_here, expand_end_loop, expand_continue_loop,\n+\texpand_exit_loop_top_cond, expand_value_return,\n+\texpand_start_bindings_and_block, expand_end_bindings,\n+\texpand_decl_cleanup, expand_start_case): Likewise.\n+\t* unroll.c (copy_loop_body\n+\t* config/alpha/alpha.c (alpha_output_mi_thunk_osf): Likewise.\n+\t* config/ia64/ia64.c (ia64_output_mi_thunk): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_emit_eh_toc_restore,\n+\trs6000_emit_allocate_stack, rs6000_output_function_prologue,\n+\trs6000_output_function_epilogue, rs6000_output_mi_thunk): Likewise.\n+\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n+\t* config/sparc/sparc.c (sparc_output_mi_thunk): Likewise.\n+\n 2003-06-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-tree.h (grokfield): Remove unused filename and line parameters."}, {"sha": "8160333c66f3d258a9ae17653352803c967ac210", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -1,3 +1,7 @@\n+2003-06-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* misc.c (record_code_position): Adjust emit_note call.\n+\n 2003-06-26  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* misc.c (gnat_handle_option): Don't check for missing arguments."}, {"sha": "e0ee975215d3762031583a6970a83d69feb42377", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -719,7 +719,7 @@ record_code_position (gnat_node)\n        addressable needs some fixups and also for above reason.  */\n     save_gnu_tree (gnat_node,\n \t\t   build (RTL_EXPR, void_type_node, NULL_TREE,\n-\t\t\t  (tree) emit_note (0, NOTE_INSN_DELETED)),\n+\t\t\t  (tree) emit_note (NOTE_INSN_DELETED)),\n \t\t   1);\n }\n "}, {"sha": "20ccda3dfe6c8f4484bdb2790353ab0dc2c3fcb6", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -4301,7 +4301,7 @@ expand_builtin_expect (tree arglist, rtx target)\n \n       rtx_c = expand_expr (c, NULL_RTX, GET_MODE (target), EXPAND_NORMAL);\n \n-      note = emit_note (NULL, NOTE_INSN_EXPECTED_VALUE);\n+      note = emit_note (NOTE_INSN_EXPECTED_VALUE);\n       NOTE_EXPECTED_VALUE (note) = gen_rtx_EQ (VOIDmode, target, rtx_c);\n     }\n "}, {"sha": "e75caa70101b3f7be0d533d6778d1921203e730a", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -629,10 +629,8 @@ genrtl_scope_stmt (tree t)\n     }\n   else if (!SCOPE_NULLIFIED_P (t))\n     {\n-      rtx note = emit_note (NULL,\n-\t\t\t    (SCOPE_BEGIN_P (t)\n-\t\t\t     ? NOTE_INSN_BLOCK_BEG\n-\t\t\t     : NOTE_INSN_BLOCK_END));\n+      rtx note = emit_note (SCOPE_BEGIN_P (t)\n+\t\t\t    ? NOTE_INSN_BLOCK_BEG : NOTE_INSN_BLOCK_END);\n       NOTE_BLOCK (note) = block;\n     }\n \n@@ -858,7 +856,7 @@ expand_stmt (tree t)\n \t      && TREE_CODE (GOTO_DESTINATION (t)) == LABEL_DECL\n \t      && flag_guess_branch_prob)\n \t    {\n-\t      rtx note = emit_note (NULL, NOTE_INSN_PREDICTION);\n+\t      rtx note = emit_note (NOTE_INSN_PREDICTION);\n \n \t      NOTE_PREDICTION (note) = NOTE_PREDICT (PRED_GOTO, NOT_TAKEN);\n \t    }"}, {"sha": "736d8887ec5a4a0cc694f7b3baa4d00487734d47", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -513,7 +513,7 @@ reemit_insn_block_notes (void)\n     }\n \n   /* change_scope emits before the insn, not after.  */\n-  note = emit_note (NULL, NOTE_INSN_DELETED);\n+  note = emit_note (NOTE_INSN_DELETED);\n   change_scope (note, cur_block, DECL_INITIAL (cfun->decl));\n   delete_insn (note);\n \n@@ -943,7 +943,7 @@ duplicate_insn_chain (rtx from, rtx to)\n \n   /* Avoid updating of boundaries of previous basic block.  The\n      note will get removed from insn stream in fixup.  */\n-  last = emit_note (NULL, NOTE_INSN_DELETED);\n+  last = emit_note (NOTE_INSN_DELETED);\n \n   /* Create copy at the end of INSN chain.  The chain will\n      be reordered later.  */"}, {"sha": "1d1be31db95cd832183c6a2332d90e5235838e72", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -7658,7 +7658,7 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* We always require a valid GP.  */\n   emit_insn (gen_prologue_ldgp ());\n-  emit_note (NULL, NOTE_INSN_PROLOGUE_END);\n+  emit_note (NOTE_INSN_PROLOGUE_END);\n \n   /* Find the \"this\" pointer.  If the function returns a structure,\n      the structure return pointer is in $16.  */"}, {"sha": "e610f62bb8f59f00c0cee14ad293941116eb8103", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -8491,7 +8491,7 @@ ia64_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n     reg_names[IN_REG (0)] = ia64_reg_numbers[0];\n \n   /* Mark the end of the (empty) prologue.  */\n-  emit_note (NULL, NOTE_INSN_PROLOGUE_END);\n+  emit_note (NOTE_INSN_PROLOGUE_END);\n \n   this = gen_rtx_REG (Pmode, IN_REG (0));\n "}, {"sha": "a3eb255a2319093f8b903b9a5f2a9dae7ee95fd9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -10706,7 +10706,7 @@ rs6000_emit_eh_toc_restore (stacksize)\n     abort ();\n   emit_move_insn (opcode, insn_after_throw);\n   \n-  emit_note (NULL, NOTE_INSN_LOOP_BEG);\n+  emit_note (NOTE_INSN_LOOP_BEG);\n   emit_label (loop_start);\n   \n   do_compare_rtx_and_jump (opcode, tocompare, NE, 1,\n@@ -10733,9 +10733,9 @@ rs6000_emit_eh_toc_restore (stacksize)\n   emit_move_insn (opcode_addr, mem);\n   emit_move_insn (opcode, gen_rtx_MEM (SImode, opcode_addr));\n \n-  emit_note (NULL, NOTE_INSN_LOOP_CONT);\n+  emit_note (NOTE_INSN_LOOP_CONT);\n   emit_jump (loop_start);\n-  emit_note (NULL, NOTE_INSN_LOOP_END);\n+  emit_note (NOTE_INSN_LOOP_END);\n   emit_label (loop_exit);\n }\n \f\n@@ -10809,7 +10809,7 @@ rs6000_emit_allocate_stack (size, copy_r12)\n \t{\n \t  /* Need a note here so that try_split doesn't get confused.  */\n \t  if (get_last_insn() == NULL_RTX)\n-\t    emit_note (0, NOTE_INSN_DELETED);\n+\t    emit_note (NOTE_INSN_DELETED);\n \t  insn = emit_move_insn (tmp_reg, todec);\n \t  try_split (PATTERN (insn), insn, 0);\n \t  todec = tmp_reg;\n@@ -11536,9 +11536,9 @@ rs6000_output_function_prologue (file, size)\n \n       /* A NOTE_INSN_DELETED is supposed to be at the start and end of\n \t the \"toplevel\" insn chain.  */\n-      emit_note (0, NOTE_INSN_DELETED);\n+      emit_note (NOTE_INSN_DELETED);\n       rs6000_emit_prologue ();\n-      emit_note (0, NOTE_INSN_DELETED);\n+      emit_note (NOTE_INSN_DELETED);\n \n       /* Expand INSN_ADDRESSES so final() doesn't crash. */\n       {\n@@ -11957,9 +11957,9 @@ rs6000_output_function_epilogue (file, size)\n \n \t  /* A NOTE_INSN_DELETED is supposed to be at the start\n \t     and end of the \"toplevel\" insn chain.  */\n-\t  emit_note (0, NOTE_INSN_DELETED);\n+\t  emit_note (NOTE_INSN_DELETED);\n \t  rs6000_emit_epilogue (FALSE);\n-\t  emit_note (0, NOTE_INSN_DELETED);\n+\t  emit_note (NOTE_INSN_DELETED);\n \n \t  /* Expand INSN_ADDRESSES so final() doesn't crash. */\n \t  {\n@@ -12254,7 +12254,7 @@ rs6000_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n   no_new_pseudos = 1;\n \n   /* Mark the end of the (empty) prologue.  */\n-  emit_note (NULL, NOTE_INSN_PROLOGUE_END);\n+  emit_note (NOTE_INSN_PROLOGUE_END);\n \n   /* Find the \"this\" pointer.  If the function returns a structure,\n      the structure return pointer is in r3.  */"}, {"sha": "05c6c0ac8896b966feaa85e66442c073d546f19b", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -8547,7 +8547,7 @@ sh_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n   no_new_pseudos = 1;\n   current_function_uses_only_leaf_regs = 1;\n \n-  emit_note (NULL, NOTE_INSN_PROLOGUE_END);\n+  emit_note (NOTE_INSN_PROLOGUE_END);\n \n   /* Find the \"this\" pointer.  We have such a wide range of ABIs for the\n      SH that it's best to do this completely machine independently."}, {"sha": "148bcee53f42571b8ec8af417c5cb3cf82b61eb6", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -8593,7 +8593,7 @@ sparc_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n   no_new_pseudos = 1;\n   current_function_uses_only_leaf_regs = 1;\n \n-  emit_note (NULL, NOTE_INSN_PROLOGUE_END);\n+  emit_note (NOTE_INSN_PROLOGUE_END);\n \n   /* Find the \"this\" pointer.  Normally in %o0, but in ARCH64 if the function\n      returns a structure, the structure return pointer is there instead.  */"}, {"sha": "d54d18852582e25cf13207c91da8a038aa6bbc33", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -4899,6 +4899,8 @@ emit_line_note (file, line)\n      const char *file;\n      int line;\n {\n+  rtx note;\n+  \n   if (line < 0)\n     abort ();\n   \n@@ -4916,25 +4918,25 @@ emit_line_note (file, line)\n       return NULL_RTX;\n     }\n \n-  return emit_note (file, line);\n+  note = emit_note (line);\n+  NOTE_SOURCE_FILE (note) = file;\n+  \n+  return note;\n }\n \n-/* Make an insn of code NOTE\n-   with data-fields specified by FILE and LINE\n-   and add it to the end of the doubly-linked list.\n-   If it is a line-number NOTE, omit it if it matches the previous one.  */\n+/* Make an insn of code NOTE or type NOTE_NO\n+   and add it to the end of the doubly-linked list.  */\n \n rtx\n-emit_note (file, line)\n-     const char *file;\n-     int line;\n+emit_note (note_no)\n+     int note_no;\n {\n   rtx note;\n \n   note = rtx_alloc (NOTE);\n   INSN_UID (note) = cur_insn_uid++;\n-  NOTE_SOURCE_FILE (note) = file;\n-  NOTE_LINE_NUMBER (note) = line;\n+  NOTE_LINE_NUMBER (note) = note_no;\n+  NOTE_DATA (note) = 0;\n   BLOCK_FOR_INSN (note) = NULL;\n   add_insn (note);\n   return note;"}, {"sha": "39e72dfa70df5699ea4b6fa88973424ef0c4ce49", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -510,7 +510,7 @@ expand_eh_region_start ()\n \n   /* Create a note marking the start of this region.  */\n   new_region->region_number = ++cfun->eh->last_region_number;\n-  note = emit_note (NULL, NOTE_INSN_EH_REGION_BEG);\n+  note = emit_note (NOTE_INSN_EH_REGION_BEG);\n   NOTE_EH_HANDLER (note) = new_region->region_number;\n }\n \n@@ -523,7 +523,7 @@ expand_eh_region_end ()\n   rtx note;\n \n   /* Create a note marking the end of this region.  */\n-  note = emit_note (NULL, NOTE_INSN_EH_REGION_END);\n+  note = emit_note (NOTE_INSN_EH_REGION_END);\n   NOTE_EH_HANDLER (note) = cur_region->region_number;\n \n   /* Pop.  */\n@@ -2119,7 +2119,7 @@ sjlj_emit_function_enter (dispatch_label)\n \t\t\t\t plus_constant (XEXP (fc, 0),\n \t\t\t\t\t\tsjlj_fc_jbuf_ofs), Pmode);\n \n-    note = emit_note (NULL, NOTE_INSN_EXPECTED_VALUE);\n+    note = emit_note (NOTE_INSN_EXPECTED_VALUE);\n     NOTE_EXPECTED_VALUE (note) = gen_rtx_EQ (VOIDmode, x, const0_rtx);\n \n     emit_cmp_and_jump_insns (x, const0_rtx, NE, 0,"}, {"sha": "883edf8e9f4511d8a090d202fc12d30a5d804127", "filename": "gcc/explow.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -1588,13 +1588,13 @@ probe_stack_range (first, size)\n \t  || REGNO (test_addr) < FIRST_PSEUDO_REGISTER)\n \ttest_addr = force_reg (Pmode, test_addr);\n \n-      emit_note (NULL, NOTE_INSN_LOOP_BEG);\n+      emit_note (NOTE_INSN_LOOP_BEG);\n       emit_jump (test_lab);\n \n       emit_label (loop_lab);\n       emit_stack_probe (test_addr);\n \n-      emit_note (NULL, NOTE_INSN_LOOP_CONT);\n+      emit_note (NOTE_INSN_LOOP_CONT);\n \n #ifdef STACK_GROWS_DOWNWARD\n #define CMP_OPCODE GTU\n@@ -1613,7 +1613,7 @@ probe_stack_range (first, size)\n       emit_cmp_and_jump_insns (test_addr, last_addr, CMP_OPCODE,\n \t\t\t       NULL_RTX, Pmode, 1, loop_lab);\n       emit_jump (end_lab);\n-      emit_note (NULL, NOTE_INSN_LOOP_END);\n+      emit_note (NOTE_INSN_LOOP_END);\n       emit_label (end_lab);\n \n       emit_stack_probe (last_addr);"}, {"sha": "849e778b0cb70d72f5309bbf9fe24066bb846997", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -2146,7 +2146,7 @@ emit_block_move_via_loop (x, y, size, align)\n   y_addr = force_operand (XEXP (y, 0), NULL_RTX);\n   do_pending_stack_adjust ();\n \n-  emit_note (NULL, NOTE_INSN_LOOP_BEG);\n+  emit_note (NOTE_INSN_LOOP_BEG);\n \n   emit_jump (cmp_label);\n   emit_label (top_label);\n@@ -2164,13 +2164,13 @@ emit_block_move_via_loop (x, y, size, align)\n   if (tmp != iter)\n     emit_move_insn (iter, tmp);\n \n-  emit_note (NULL, NOTE_INSN_LOOP_CONT);\n+  emit_note (NOTE_INSN_LOOP_CONT);\n   emit_label (cmp_label);\n \n   emit_cmp_and_jump_insns (iter, size, LT, NULL_RTX, iter_mode,\n \t\t\t   true, top_label);\n \n-  emit_note (NULL, NOTE_INSN_LOOP_END);\n+  emit_note (NOTE_INSN_LOOP_END);\n }\n \f\n /* Copy all or part of a value X into registers starting at REGNO."}, {"sha": "b2caea9959c7cafad36beb03ed767769e02a1bcc", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -6549,7 +6549,7 @@ init_function_start (subr)\n   /* Make sure first insn is a note even if we don't want linenums.\n      This makes sure the first insn will never be deleted.\n      Also, final expects a note to appear there.  */\n-  emit_note (NULL, NOTE_INSN_DELETED);\n+  emit_note (NOTE_INSN_DELETED);\n \n   /* Set flags used by final.c.  */\n   if (aggregate_value_p (DECL_RESULT (subr)))\n@@ -6791,10 +6791,10 @@ expand_function_start (subr, parms_have_cleanups)\n      The move is supposed to make sdb output more accurate.  */\n   /* Indicate the beginning of the function body,\n      as opposed to parm setup.  */\n-  emit_note (NULL, NOTE_INSN_FUNCTION_BEG);\n+  emit_note (NOTE_INSN_FUNCTION_BEG);\n \n   if (GET_CODE (get_last_insn ()) != NOTE)\n-    emit_note (NULL, NOTE_INSN_DELETED);\n+    emit_note (NOTE_INSN_DELETED);\n   parm_birth_insn = get_last_insn ();\n \n   context_display = 0;\n@@ -6868,7 +6868,7 @@ expand_function_start (subr, parms_have_cleanups)\n   /* After the display initializations is where the tail-recursion label\n      should go, if we end up needing one.   Ensure we have a NOTE here\n      since some things (like trampolines) get placed before this.  */\n-  tail_recursion_reentry = emit_note (NULL, NOTE_INSN_DELETED);\n+  tail_recursion_reentry = emit_note (NOTE_INSN_DELETED);\n \n   /* Evaluate now the sizes of any types declared among the arguments.  */\n   expand_pending_sizes (nreverse (get_pending_sizes ()));\n@@ -7080,18 +7080,19 @@ expand_function_end ()\n   /* Mark the end of the function body.\n      If control reaches this insn, the function can drop through\n      without returning a value.  */\n-  emit_note (NULL, NOTE_INSN_FUNCTION_END);\n+  emit_note (NOTE_INSN_FUNCTION_END);\n \n   /* Must mark the last line number note in the function, so that the test\n      coverage code can avoid counting the last line twice.  This just tells\n      the code to ignore the immediately following line note, since there\n      already exists a copy of this note somewhere above.  This line number\n      note is still needed for debugging though, so we can't delete it.  */\n   if (flag_test_coverage)\n-    emit_note (NULL, NOTE_INSN_REPEATED_LINE_NUMBER);\n+    emit_note (NOTE_INSN_REPEATED_LINE_NUMBER);\n \n   /* Output a linenumber for the end of the function.\n      SDB depends on this.  */\n+  \n   emit_line_note_force (input_filename, input_line);\n \n   /* Before the return label (if any), clobber the return\n@@ -7753,7 +7754,7 @@ thread_prologue_and_epilogue_insns (f)\n \n       /* Retain a map of the prologue insns.  */\n       record_insns (seq, &prologue);\n-      prologue_end = emit_note (NULL, NOTE_INSN_PROLOGUE_END);\n+      prologue_end = emit_note (NOTE_INSN_PROLOGUE_END);\n \n       seq = get_insns ();\n       end_sequence ();\n@@ -7889,7 +7890,7 @@ thread_prologue_and_epilogue_insns (f)\n \tgoto epilogue_done;\n \n       start_sequence ();\n-      epilogue_end = emit_note (NULL, NOTE_INSN_EPILOGUE_BEG);\n+      epilogue_end = emit_note (NOTE_INSN_EPILOGUE_BEG);\n \n       seq = gen_epilogue ();\n "}, {"sha": "ab4af1823f17f682d165319490eeede033ee5103", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -897,7 +897,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n      insn that can be used as an insertion point.  */\n   map->insns_at_start = get_last_insn ();\n   if (map->insns_at_start == 0)\n-    map->insns_at_start = emit_note (NULL, NOTE_INSN_DELETED);\n+    map->insns_at_start = emit_note (NOTE_INSN_DELETED);\n \n   map->regno_pointer_align = inl_f->emit->regno_pointer_align;\n   map->x_regno_reg_rtx = inl_f->emit->x_regno_reg_rtx;\n@@ -1304,7 +1304,7 @@ expand_inline_function (fndecl, parms, target, ignore, type,\n      This line number note is still needed for debugging though, so we can't\n      delete it.  */\n   if (flag_test_coverage)\n-    emit_note (NULL, NOTE_INSN_REPEATED_LINE_NUMBER);\n+    emit_note (NOTE_INSN_REPEATED_LINE_NUMBER);\n \n   emit_line_note (input_filename, input_line);\n \n@@ -1689,7 +1689,7 @@ copy_insn_list (insns, map, static_chain_value)\n \t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_BEG\n \t      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED)\n \t    {\n-\t      copy = emit_note (NULL, NOTE_LINE_NUMBER (insn));\n+\t      copy = emit_note (NOTE_LINE_NUMBER (insn));\n \t      NOTE_DATA (copy) = NOTE_DATA (insn);\n \t      if ((NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_BEG\n \t\t   || NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_END)"}, {"sha": "ac7b6c3ea24dbb23846dced655f312e039197500", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -2671,7 +2671,7 @@ compensate_edge (e, file)\n       start_sequence ();\n \n       /* ??? change_stack needs some point to emit insns after.  */\n-      after = emit_note (NULL, NOTE_INSN_DELETED);\n+      after = emit_note (NOTE_INSN_DELETED);\n \n       tmpstack = regstack;\n       change_stack (after, &tmpstack, target_stack, EMIT_BEFORE);"}, {"sha": "2e641673585ffd0da07a1033d0794b277c65189d", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -669,7 +669,7 @@ reload (first, global)\n \n   /* Make sure that the last insn in the chain\n      is not something that needs reloading.  */\n-  emit_note (NULL, NOTE_INSN_DELETED);\n+  emit_note (NOTE_INSN_DELETED);\n \n   /* Enable find_equiv_reg to distinguish insns made by reload.  */\n   reload_first_uid = get_max_uid ();"}, {"sha": "52baa2438755195163c44b9a83add0aebb348d93", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -1541,7 +1541,7 @@ extern rtx emit_call_insn\t\tPARAMS ((rtx));\n extern rtx emit_label\t\t\tPARAMS ((rtx));\n extern rtx emit_barrier\t\t\tPARAMS ((void));\n extern rtx emit_line_note\t\tPARAMS ((const char *, int));\n-extern rtx emit_note\t\t\tPARAMS ((const char *, int));\n+extern rtx emit_note\t\t\tPARAMS ((int));\n extern rtx emit_line_note_force\t\tPARAMS ((const char *, int));\n extern rtx make_insn_raw\t\tPARAMS ((rtx));\n extern void add_function_usage_to       PARAMS ((rtx, rtx));"}, {"sha": "bfbcefda65003de0c85e6e9c85fa406e35a63a2c", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -3838,7 +3838,7 @@ hoist_insn_to_edge (insn, e, val, new)\n   if (e->insns == NULL_RTX)\n     {\n       start_sequence ();\n-      emit_note (NULL, NOTE_INSN_DELETED);\n+      emit_note (NOTE_INSN_DELETED);\n     }\n   else\n     push_to_sequence (e->insns);"}, {"sha": "39e41ff6dc5dd219cf7e3e3033f27522ea186158", "filename": "gcc/stmt.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -918,11 +918,11 @@ expand_fixup (tree_label, rtl_label, last_insn)\n \t  }\n \n \tstart_sequence ();\n-\tstart = emit_note (NULL, NOTE_INSN_BLOCK_BEG);\n+\tstart = emit_note (NOTE_INSN_BLOCK_BEG);\n \tif (cfun->x_whole_function_mode_p)\n \t  NOTE_BLOCK (start) = block;\n-\tfixup->before_jump = emit_note (NULL, NOTE_INSN_DELETED);\n-\tend = emit_note (NULL, NOTE_INSN_BLOCK_END);\n+\tfixup->before_jump = emit_note (NOTE_INSN_DELETED);\n+\tend = emit_note (NOTE_INSN_BLOCK_END);\n \tif (cfun->x_whole_function_mode_p)\n \t  NOTE_BLOCK (end) = block;\n \tfixup->context = block;\n@@ -2562,7 +2562,7 @@ expand_start_loop (exit_flag)\n \n   do_pending_stack_adjust ();\n   emit_queue ();\n-  emit_note (NULL, NOTE_INSN_LOOP_BEG);\n+  emit_note (NOTE_INSN_LOOP_BEG);\n   emit_label (thisloop->data.loop.start_label);\n \n   return thisloop;\n@@ -2594,7 +2594,7 @@ expand_start_null_loop ()\n   thisloop->next = loop_stack;\n   thisloop->all = nesting_stack;\n   thisloop->depth = ++nesting_depth;\n-  thisloop->data.loop.start_label = emit_note (NULL, NOTE_INSN_DELETED);\n+  thisloop->data.loop.start_label = emit_note (NOTE_INSN_DELETED);\n   thisloop->data.loop.end_label = gen_label_rtx ();\n   thisloop->data.loop.continue_label = thisloop->data.loop.end_label;\n   thisloop->exit_label = thisloop->data.loop.end_label;\n@@ -2613,7 +2613,7 @@ void\n expand_loop_continue_here ()\n {\n   do_pending_stack_adjust ();\n-  emit_note (NULL, NOTE_INSN_LOOP_CONT);\n+  emit_note (NOTE_INSN_LOOP_CONT);\n   emit_label (loop_stack->data.loop.continue_label);\n }\n \n@@ -2765,7 +2765,7 @@ expand_end_loop ()\n     }\n \n   emit_jump (start_label);\n-  emit_note (NULL, NOTE_INSN_LOOP_END);\n+  emit_note (NOTE_INSN_LOOP_END);\n   emit_label (loop_stack->data.loop.end_label);\n \n   POPSTACK (loop_stack);\n@@ -2800,7 +2800,7 @@ expand_continue_loop (whichloop)\n \n   if (flag_guess_branch_prob)\n     {\n-      note = emit_note (NULL, NOTE_INSN_PREDICTION);\n+      note = emit_note (NOTE_INSN_PREDICTION);\n       NOTE_PREDICTION (note) = NOTE_PREDICT (PRED_CONTINUE, IS_TAKEN);\n     }\n   clear_last_expr ();\n@@ -2883,7 +2883,7 @@ expand_exit_loop_top_cond (whichloop, cond)\n   if (! expand_exit_loop_if_false (whichloop, cond))\n     return 0;\n \n-  emit_note (NULL, NOTE_INSN_LOOP_END_TOP_COND);\n+  emit_note (NOTE_INSN_LOOP_END_TOP_COND);\n   return 1;\n }\n \n@@ -3000,7 +3000,7 @@ expand_value_return (val)\n       /* Emit information for branch prediction.  */\n       rtx note;\n \n-      note = emit_note (NULL, NOTE_INSN_PREDICTION);\n+      note = emit_note (NOTE_INSN_PREDICTION);\n \n       NOTE_PREDICTION (note) = NOTE_PREDICT (pred, NOT_TAKEN);\n \n@@ -3420,11 +3420,11 @@ expand_start_bindings_and_block (flags, block)\n   /* Create a note to mark the beginning of the block.  */\n   if (block_flag)\n     {\n-      note = emit_note (NULL, NOTE_INSN_BLOCK_BEG);\n+      note = emit_note (NOTE_INSN_BLOCK_BEG);\n       NOTE_BLOCK (note) = block;\n     }\n   else\n-    note = emit_note (NULL, NOTE_INSN_DELETED);\n+    note = emit_note (NOTE_INSN_DELETED);\n \n   /* Make an entry on block_stack for the block we are entering.  */\n \n@@ -3445,7 +3445,7 @@ expand_start_bindings_and_block (flags, block)\n      fix this is to just insert another instruction here, so that the\n      instructions inserted after the last unconditional cleanup are\n      never the last instruction.  */\n-  emit_note (NULL, NOTE_INSN_DELETED);\n+  emit_note (NOTE_INSN_DELETED);\n \n   if (block_stack\n       && !(block_stack->data.block.cleanups == NULL_TREE\n@@ -3847,7 +3847,7 @@ expand_end_bindings (vars, mark_ends, dont_jump_in)\n \n   if (mark_ends)\n     {\n-      rtx note = emit_note (NULL, NOTE_INSN_BLOCK_END);\n+      rtx note = emit_note (NOTE_INSN_BLOCK_END);\n       NOTE_BLOCK (note) = NOTE_BLOCK (thisblock->data.block.first_insn);\n     }\n   else\n@@ -4189,7 +4189,7 @@ expand_decl_cleanup (decl, cleanup)\n \t     fix this is to just insert another instruction here, so that the\n \t     instructions inserted after the last unconditional cleanup are\n \t     never the last instruction.  */\n-\t  emit_note (NULL, NOTE_INSN_DELETED);\n+\t  emit_note (NOTE_INSN_DELETED);\n \t}\n     }\n   return 1;\n@@ -4446,7 +4446,7 @@ expand_start_case (exit_flag, expr, type, printname)\n   /* Make sure case_stmt.start points to something that won't\n      need any transformation before expand_end_case.  */\n   if (GET_CODE (get_last_insn ()) != NOTE)\n-    emit_note (NULL, NOTE_INSN_DELETED);\n+    emit_note (NOTE_INSN_DELETED);\n \n   thiscase->data.case_stmt.start = get_last_insn ();\n "}, {"sha": "03decb773dfc10c34edf57026e777353c651b916", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0402197060132c3023d0f414b73a3fe4c9f2a7/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=2e0402197060132c3023d0f414b73a3fe4c9f2a7", "patch": "@@ -2274,7 +2274,7 @@ copy_loop_body (loop, copy_start, copy_end, map, exit_label, last_iteration,\n \t\t       || (last_iteration\n \t\t\t   && unroll_type != UNROLL_COMPLETELY)))\n \t    {\n-\t      copy = emit_note (NULL, NOTE_LINE_NUMBER (insn));\n+\t      copy = emit_note (NOTE_LINE_NUMBER (insn));\n \t      NOTE_DATA (copy) = NOTE_DATA (insn);\n \t    }\n \t  else\n@@ -2330,7 +2330,7 @@ copy_loop_body (loop, copy_start, copy_end, map, exit_label, last_iteration,\n \t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_VTOP\n \t\t   && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_CONT)\n \t    {\n-\t      rtx copy = emit_note (NULL, NOTE_LINE_NUMBER (insn));\n+\t      rtx copy = emit_note (NOTE_LINE_NUMBER (insn));\n \t      NOTE_DATA (copy) = NOTE_DATA (insn);\n \t    }\n \t}"}]}