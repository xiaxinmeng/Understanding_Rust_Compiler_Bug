{"sha": "2a83cc52548482af48cd2cebcf9e5248c81d2499", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4M2NjNTI1NDg0ODJhZjQ4Y2QyY2ViY2Y5ZTUyNDhjODFkMjQ5OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2006-05-01T17:46:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2006-05-01T17:46:32Z"}, "message": "re PR c/27358 (ICE with invalid variable after #pragma omp parallel)\n\n        PR c/27358\n        * c-parser.c (c_parser_skip_to_end_of_block_or_statement): Move after\n        c_parser_skip_to_pragma_eol.  Convert to switch statement.  Handle\n        CPP_PRAGMA.\n\nFrom-SVN: r113421", "tree": {"sha": "dde9ac8721da159e12701f6a8d15d402eb2c4a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dde9ac8721da159e12701f6a8d15d402eb2c4a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a83cc52548482af48cd2cebcf9e5248c81d2499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a83cc52548482af48cd2cebcf9e5248c81d2499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a83cc52548482af48cd2cebcf9e5248c81d2499", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a83cc52548482af48cd2cebcf9e5248c81d2499/comments", "author": null, "committer": null, "parents": [{"sha": "0f57299d37b292bdfdc4e2a0d0fe00935b8c1931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f57299d37b292bdfdc4e2a0d0fe00935b8c1931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f57299d37b292bdfdc4e2a0d0fe00935b8c1931"}], "stats": {"total": 132, "additions": 88, "deletions": 44}, "files": [{"sha": "78bc5a5ab91ebfbd84d18687b893c84ef87fce63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a83cc52548482af48cd2cebcf9e5248c81d2499/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a83cc52548482af48cd2cebcf9e5248c81d2499/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a83cc52548482af48cd2cebcf9e5248c81d2499", "patch": "@@ -1,3 +1,10 @@\n+2006-05-01  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/27358\n+\t* c-parser.c (c_parser_skip_to_end_of_block_or_statement): Move after\n+\tc_parser_skip_to_pragma_eol.  Convert to switch statement.  Handle\n+\tCPP_PRAGMA.\n+\n 2006-05-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* c-typeck.c (parser_build_binary_op): Don't call the function"}, {"sha": "48edab70749b5933f7fa864e19ddfcfb47de0bd5", "filename": "gcc/c-parser.c", "status": "modified", "additions": 73, "deletions": 44, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a83cc52548482af48cd2cebcf9e5248c81d2499/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a83cc52548482af48cd2cebcf9e5248c81d2499/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=2a83cc52548482af48cd2cebcf9e5248c81d2499", "patch": "@@ -829,50 +829,6 @@ c_parser_skip_to_end_of_parameter (c_parser *parser)\n   parser->error = false;\n }\n \n-/* Skip tokens until we have consumed an entire block, or until we\n-   have consumed a non-nested ';'.  */\n-\n-static void\n-c_parser_skip_to_end_of_block_or_statement (c_parser *parser)\n-{\n-  unsigned nesting_depth = 0;\n-\n-  while (true)\n-    {\n-      c_token *token;\n-\n-      /* Peek at the next token.  */\n-      token = c_parser_peek_token (parser);\n-      /* If we've run out of tokens, stop.  */\n-      if (token->type == CPP_EOF)\n-\treturn;\n-      if (token->type == CPP_PRAGMA_EOL && parser->in_pragma)\n-\treturn;\n-      /* If the next token is a ';', we have reached the end of the\n-\t statement.  */\n-      if (token->type == CPP_SEMICOLON && !nesting_depth)\n-\t{\n-\t  /* Consume the ';'.  */\n-\t  c_parser_consume_token (parser);\n-\t  break;\n-\t}\n-      /* If the next token is a non-nested '}', then we have reached\n-\t the end of the current block.  */\n-      if (token->type == CPP_CLOSE_BRACE\n-\t  && (nesting_depth == 0 || --nesting_depth == 0))\n-\t{\n-\t  c_parser_consume_token (parser);\n-\t  break;\n-\t}\n-      /* If it the next token is a '{', then we are entering a new\n-\t block.  Consume the entire block.  */\n-      if (token->type == CPP_OPEN_BRACE)\n-\t++nesting_depth;\n-      c_parser_consume_token (parser);\n-    }\n-  parser->error = false;\n-}\n-\n /* Expect to be at the end of the pragma directive and consume an\n    end of line marker.  */\n \n@@ -899,6 +855,79 @@ c_parser_skip_to_pragma_eol (c_parser *parser)\n   parser->error = false;\n }\n \n+/* Skip tokens until we have consumed an entire block, or until we\n+   have consumed a non-nested ';'.  */\n+\n+static void\n+c_parser_skip_to_end_of_block_or_statement (c_parser *parser)\n+{\n+  unsigned nesting_depth = 0;\n+  bool save_error = parser->error;\n+\n+  while (true)\n+    {\n+      c_token *token;\n+\n+      /* Peek at the next token.  */\n+      token = c_parser_peek_token (parser);\n+\n+      switch (token->type)\n+\t{\n+\tcase CPP_EOF:\n+\t  return;\n+\n+\tcase CPP_PRAGMA_EOL:\n+\t  if (parser->in_pragma)\n+\t    return;\n+\t  break;\n+\n+\tcase CPP_SEMICOLON:\n+\t  /* If the next token is a ';', we have reached the\n+\t     end of the statement.  */\n+\t  if (!nesting_depth)\n+\t    {\n+\t      /* Consume the ';'.  */\n+\t      c_parser_consume_token (parser);\n+\t      goto finished;\n+\t    }\n+\t  break;\n+\n+\tcase CPP_CLOSE_BRACE:\n+\t  /* If the next token is a non-nested '}', then we have\n+\t     reached the end of the current block.  */\n+\t  if (nesting_depth == 0 || --nesting_depth == 0)\n+\t    {\n+\t      c_parser_consume_token (parser);\n+\t      goto finished;\n+\t    }\n+\t  break;\n+\n+\tcase CPP_OPEN_BRACE:\n+\t  /* If it the next token is a '{', then we are entering a new\n+\t     block.  Consume the entire block.  */\n+\t  ++nesting_depth;\n+\t  break;\n+\n+\tcase CPP_PRAGMA:\n+\t  /* If we see a pragma, consume the whole thing at once.  We\n+\t     have some safeguards against consuming pragmas willy-nilly.\n+\t     Normally, we'd expect to be here with parser->error set,\n+\t     which disables these safeguards.  But it's possible to get\n+\t     here for secondary error recovery, after parser->error has\n+\t     been cleared.  */\n+\t  c_parser_consume_pragma (parser);\n+\t  c_parser_skip_to_pragma_eol (parser);\n+\t  parser->error = save_error;\n+\t  continue;\n+\t}\n+\n+      c_parser_consume_token (parser);\n+    }\n+\n+ finished:\n+  parser->error = false;\n+}\n+\n /* Save the warning flags which are controlled by __extension__.  */\n \n static inline int"}, {"sha": "3451284e138377be7573bfeca5c4c9341ad527d0", "filename": "gcc/testsuite/gcc.dg/gomp/pr27358.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a83cc52548482af48cd2cebcf9e5248c81d2499/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr27358.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a83cc52548482af48cd2cebcf9e5248c81d2499/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr27358.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr27358.c?ref=2a83cc52548482af48cd2cebcf9e5248c81d2499", "patch": "@@ -0,0 +1,8 @@\n+/* PR c/27358 */\n+/* { dg-do compile } */\n+\n+void foo(error i)\t\t/* { dg-error \"\" } */\n+{\n+#pragma omp parallel\n+  i = 0;\n+}"}]}