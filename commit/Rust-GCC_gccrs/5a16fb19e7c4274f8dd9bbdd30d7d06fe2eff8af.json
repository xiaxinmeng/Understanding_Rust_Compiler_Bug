{"sha": "5a16fb19e7c4274f8dd9bbdd30d7d06fe2eff8af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExNmZiMTllN2M0Mjc0ZjhkZDliYmRkMzBkN2QwNmZlMmVmZjhhZg==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2018-08-13T20:41:50Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-19T11:58:38Z"}, "message": "Add 'libgomp.oacc-c-c++-common/loop-gwv-2.c'\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-2.c: New.", "tree": {"sha": "4e9b84b402e2d9f5d0680b01455eb584ccb3818e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e9b84b402e2d9f5d0680b01455eb584ccb3818e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a16fb19e7c4274f8dd9bbdd30d7d06fe2eff8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a16fb19e7c4274f8dd9bbdd30d7d06fe2eff8af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a16fb19e7c4274f8dd9bbdd30d7d06fe2eff8af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a16fb19e7c4274f8dd9bbdd30d7d06fe2eff8af/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6683450f4a26dae7774be735a3429f48aee9565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6683450f4a26dae7774be735a3429f48aee9565", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6683450f4a26dae7774be735a3429f48aee9565"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "a4f81a39e242f1d777cfbbfb17e7a5b7a1d80699", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-gwv-2.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a16fb19e7c4274f8dd9bbdd30d7d06fe2eff8af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a16fb19e7c4274f8dd9bbdd30d7d06fe2eff8af/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-gwv-2.c?ref=5a16fb19e7c4274f8dd9bbdd30d7d06fe2eff8af", "patch": "@@ -0,0 +1,95 @@\n+#include <stdio.h>\n+#include <openacc.h>\n+#include <alloca.h>\n+#include <string.h>\n+#include <gomp-constants.h>\n+#include <stdlib.h>\n+\n+#if 0\n+#define DEBUG(DIM, IDX, VAL) \\\n+  fprintf (stderr, \"%sdist[%d] = %d\\n\", (DIM), (IDX), (VAL))\n+#else\n+#define DEBUG(DIM, IDX, VAL)\n+#endif\n+\n+#define N (32*32*32)\n+\n+int\n+check (const char *dim, int *dist, int dimsize)\n+{\n+  int ix;\n+  int exit = 0;\n+\n+  for (ix = 0; ix < dimsize; ix++)\n+    {\n+      DEBUG(dim, ix, dist[ix]);\n+      if (dist[ix] < (N) / (dimsize + 0.5)\n+\t  || dist[ix] > (N) / (dimsize - 0.5))\n+\t{\n+\t  fprintf (stderr, \"did not distribute to %ss (%d not between %d \"\n+\t\t   \"and %d)\\n\", dim, dist[ix], (int) ((N) / (dimsize + 0.5)),\n+\t\t   (int) ((N) / (dimsize - 0.5)));\n+\t  exit |= 1;\n+\t}\n+    }\n+\n+  return exit;\n+}\n+\n+int main ()\n+{\n+  int ary[N];\n+  int ix;\n+  int exit = 0;\n+  int gangsize = 0, workersize = 0, vectorsize = 0;\n+  int *gangdist, *workerdist, *vectordist;\n+\n+  for (ix = 0; ix < N;ix++)\n+    ary[ix] = -1;\n+\n+#pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t    copy(ary) copyout(gangsize, workersize, vectorsize)\n+  {\n+#pragma acc loop gang worker vector\n+    for (unsigned ix = 0; ix < N; ix++)\n+      {\n+\tint g, w, v;\n+\n+\tg = __builtin_goacc_parlevel_id (GOMP_DIM_GANG);\n+\tw = __builtin_goacc_parlevel_id (GOMP_DIM_WORKER);\n+\tv = __builtin_goacc_parlevel_id (GOMP_DIM_VECTOR);\n+\n+\tary[ix] = (g << 16) | (w << 8) | v;\n+      }\n+\n+    gangsize = __builtin_goacc_parlevel_size (GOMP_DIM_GANG);\n+    workersize = __builtin_goacc_parlevel_size (GOMP_DIM_WORKER);\n+    vectorsize = __builtin_goacc_parlevel_size (GOMP_DIM_VECTOR);\n+  }\n+\n+  gangdist = (int *) alloca (gangsize * sizeof (int));\n+  workerdist = (int *) alloca (workersize * sizeof (int));\n+  vectordist = (int *) alloca (vectorsize * sizeof (int));\n+  memset (gangdist, 0, gangsize * sizeof (int));\n+  memset (workerdist, 0, workersize * sizeof (int));\n+  memset (vectordist, 0, vectorsize * sizeof (int));\n+\n+  /* Test that work is shared approximately equally amongst each active\n+     gang/worker/vector.  */\n+  for (ix = 0; ix < N; ix++)\n+    {\n+      int g = (ary[ix] >> 16) & 255;\n+      int w = (ary[ix] >> 8) & 255;\n+      int v = ary[ix] & 255;\n+\n+      gangdist[g]++;\n+      workerdist[w]++;\n+      vectordist[v]++;\n+    }\n+\n+  exit = check (\"gang\", gangdist, gangsize);\n+  exit |= check (\"worker\", workerdist, workersize);\n+  exit |= check (\"vector\", vectordist, vectorsize);\n+\n+  return exit;\n+}"}]}