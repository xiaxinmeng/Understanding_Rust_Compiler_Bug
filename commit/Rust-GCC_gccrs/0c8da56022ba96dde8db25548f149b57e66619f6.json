{"sha": "0c8da56022ba96dde8db25548f149b57e66619f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4ZGE1NjAyMmJhOTZkZGU4ZGIyNTU0OGYxNDliNTdlNjY2MTlmNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-25T17:23:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-25T17:23:01Z"}, "message": "mips-protos.h: Remove the prototypes for mips_setup_incoming_varargs and mips_return_in_memory.\n\n\t* config/mips/mips-protos.h: Remove the prototypes for\n\tmips_setup_incoming_varargs and mips_return_in_memory.\n\t* config/mips/mips.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n\t(mips_setup_incoming_varargs): Match the prototype for\n\tTARGET_SETUP_INCOMING_VARARGS.\n\t(mips_return_in_memory): Make it static.  Add argument fntype.\n\t(mips_strict_argument_naming): New.\n\t* config/mips/mips.h (PROMOTE_PROTOTYPES): Remove.\n\t(PROMOTE_FUNCTION_ARGS): Likewise.\n\t(PROMOTE_FUNCTION_RETURN): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(SETUP_INCOMING_VARARGS): Likewise.\n\t(STRICT_ARGUMENT_NAMING): Likewise.\n\nFrom-SVN: r76568", "tree": {"sha": "fdc8943d9b2f02a1904b9661f814a574dff6727f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdc8943d9b2f02a1904b9661f814a574dff6727f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c8da56022ba96dde8db25548f149b57e66619f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8da56022ba96dde8db25548f149b57e66619f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8da56022ba96dde8db25548f149b57e66619f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8da56022ba96dde8db25548f149b57e66619f6/comments", "author": null, "committer": null, "parents": [{"sha": "49ca372c8979cf67eef0408309c09d0a2fa52419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ca372c8979cf67eef0408309c09d0a2fa52419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ca372c8979cf67eef0408309c09d0a2fa52419"}], "stats": {"total": 104, "additions": 65, "deletions": 39}, "files": [{"sha": "816043bbaf0311b15a992644ce66fe047090a5ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8da56022ba96dde8db25548f149b57e66619f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8da56022ba96dde8db25548f149b57e66619f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c8da56022ba96dde8db25548f149b57e66619f6", "patch": "@@ -1,3 +1,26 @@\n+2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/mips/mips-protos.h: Remove the prototypes for\n+\tmips_setup_incoming_varargs and mips_return_in_memory.\n+\t* config/mips/mips.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n+\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n+\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n+\t(mips_setup_incoming_varargs): Match the prototype for\n+\tTARGET_SETUP_INCOMING_VARARGS.\n+\t(mips_return_in_memory): Make it static.  Add argument fntype.\n+\t(mips_strict_argument_naming): New.\n+\t* config/mips/mips.h (PROMOTE_PROTOTYPES): Remove.\n+\t(PROMOTE_FUNCTION_ARGS): Likewise.\n+\t(PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(STRUCT_VALUE): Likewise.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\t(SETUP_INCOMING_VARARGS): Likewise.\n+\t(STRICT_ARGUMENT_NAMING): Likewise.\n+\n 2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/ip2k/ip2k.c (TARGET_STRUCT_VALUE_RTX): New."}, {"sha": "5c0081f0fbab9d1d61842b181e9ee3b5adb88280", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8da56022ba96dde8db25548f149b57e66619f6/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8da56022ba96dde8db25548f149b57e66619f6/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=0c8da56022ba96dde8db25548f149b57e66619f6", "patch": "@@ -83,8 +83,6 @@ extern int function_arg_partial_nregs (const CUMULATIVE_ARGS *,\n \t\t\t\t       enum machine_mode, tree, int);\n extern bool mips_pad_arg_upward (enum machine_mode, tree);\n extern bool mips_pad_reg_upward (enum machine_mode, tree);\n-extern int mips_setup_incoming_varargs (const CUMULATIVE_ARGS *,\n-\t\t\t\t\tenum machine_mode, tree, int);\n extern void mips_va_start (tree, rtx);\n extern struct rtx_def *mips_va_arg (tree, tree);\n \n@@ -141,7 +139,6 @@ extern const char *mips_output_conditional_branch (rtx, rtx *, int, int,\n \t\t\t\t\t\t   int, int);\n extern const char *mips_output_division (const char *, rtx *);\n extern unsigned int mips_hard_regno_nregs (int, enum machine_mode);\n-extern int mips_return_in_memory (tree);\n extern const char *mips_emit_prefetch (rtx *);\n \n extern void irix_asm_output_align (FILE *, unsigned);"}, {"sha": "1c87e1115735193819845835ef47d5d6629da043", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8da56022ba96dde8db25548f149b57e66619f6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8da56022ba96dde8db25548f149b57e66619f6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=0c8da56022ba96dde8db25548f149b57e66619f6", "patch": "@@ -279,9 +279,13 @@ static bool mips_matching_cpu_name_p (const char *, const char *);\n static const struct mips_cpu_info *mips_parse_cpu (const char *, const char *);\n static const struct mips_cpu_info *mips_cpu_info_from_isa (int);\n static int mips_adjust_cost (rtx, rtx, rtx, int);\n+static bool mips_return_in_memory (tree, tree);\n+static bool mips_strict_argument_naming (CUMULATIVE_ARGS *);\n static int mips_issue_rate (void);\n static int mips_use_dfa_pipeline_interface (void);\n static void mips_init_libfuncs (void);\n+static void mips_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\t tree, int *, int);\n static tree mips_build_builtin_va_list (void);\n \n #if TARGET_IRIX\n@@ -795,6 +799,18 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n \n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST mips_build_builtin_va_list\n+\n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY mips_return_in_memory\n #undef TARGET_RETURN_IN_MSB\n #define TARGET_RETURN_IN_MSB mips_return_in_msb\n \n@@ -803,6 +819,11 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n \n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS mips_setup_incoming_varargs\n+#undef TARGET_STRICT_ARGUMENT_NAMING\n+#define TARGET_STRICT_ARGUMENT_NAMING mips_strict_argument_naming\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Classify symbol X, which must be a SYMBOL_REF or a LABEL_REF.  */\n@@ -3885,9 +3906,9 @@ mips_pad_reg_upward (enum machine_mode mode, tree type)\n   return mips_pad_arg_upward (mode, type);\n }\n \f\n-int\n-mips_setup_incoming_varargs (const CUMULATIVE_ARGS *cum,\n-\t\t\t     enum machine_mode mode, tree type, int no_rtl)\n+static void\n+mips_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t     tree type, int *pretend_size, int no_rtl)\n {\n   CUMULATIVE_ARGS local_cum;\n   int gp_saved, fp_saved;\n@@ -3958,10 +3979,13 @@ mips_setup_incoming_varargs (const CUMULATIVE_ARGS *cum,\n \t}\n     }\n   if (mips_abi == ABI_32 || mips_abi == ABI_O64)\n-    /* No need for pretend arguments: the register parameter area was\n-       allocated by the caller.  */\n-    return 0;\n-  return (gp_saved * UNITS_PER_WORD) + (fp_saved * UNITS_PER_FPREG);\n+    {\n+      /* No need for pretend arguments: the register parameter area was\n+\t allocated by the caller.  */\n+      *pretend_size = 0;\n+      return;\n+    }\n+  *pretend_size = (gp_saved * UNITS_PER_WORD) + (fp_saved * UNITS_PER_FPREG);\n }\n \n /* Create the va_list data type.\n@@ -7466,8 +7490,8 @@ mips_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n       mode = TYPE_MODE (valtype);\n       unsignedp = TREE_UNSIGNED (valtype);\n \n-      /* Since we define PROMOTE_FUNCTION_RETURN, we must promote\n-\t the mode just as PROMOTE_MODE does.  */\n+      /* Since we define TARGET_PROMOTE_FUNCTION_RETURN that returns\n+\t true, we must promote the mode just as PROMOTE_MODE does.  */\n       mode = promote_mode (valtype, mode, &unsignedp, 1);\n \n       /* Handle structures whose fields are returned in $f0/$f2.  */\n@@ -9517,14 +9541,14 @@ mips_hard_regno_nregs (int regno, enum machine_mode mode)\n     return ((GET_MODE_SIZE (mode) + UNITS_PER_FPREG - 1) / UNITS_PER_FPREG);\n }\n \n-/* Implement RETURN_IN_MEMORY.  Under the old (i.e., 32 and O64 ABIs)\n+/* Implement TARGET_RETURN_IN_MEMORY.  Under the old (i.e., 32 and O64 ABIs)\n    all BLKmode objects are returned in memory.  Under the new (N32 and\n    64-bit MIPS ABIs) small structures are returned in a register.\n    Objects with varying size must still be returned in memory, of\n    course.  */\n \n-int\n-mips_return_in_memory (tree type)\n+static bool\n+mips_return_in_memory (tree type, tree fndecl ATTRIBUTE_UNUSED)\n {\n   if (mips_abi == ABI_32 || mips_abi == ABI_O64)\n     return (TYPE_MODE (type) == BLKmode);\n@@ -9533,6 +9557,12 @@ mips_return_in_memory (tree type)\n \t    || (int_size_in_bytes (type) == -1));\n }\n \n+static bool\n+mips_strict_argument_naming (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n+{\n+  return (mips_abi != ABI_32 && mips_abi != ABI_O64);\n+}\n+\n static int\n mips_issue_rate (void)\n {"}, {"sha": "ae1f55f132c452b27946048d0f66b9faf81b4d2c", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c8da56022ba96dde8db25548f149b57e66619f6/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c8da56022ba96dde8db25548f149b57e66619f6/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=0c8da56022ba96dde8db25548f149b57e66619f6", "patch": "@@ -1424,10 +1424,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define PAD_VARARGS_DOWN \\\n   (FUNCTION_ARG_PADDING (TYPE_MODE (type), type) == downward)\n \n-/* Arguments declared as 'char' or 'short' in a prototype should be\n-   passed as 'int's.  */\n-#define PROMOTE_PROTOTYPES 1\n-\n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */\n #define WORD_REGISTER_OPERATIONS\n@@ -1455,15 +1451,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n \n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND\n-\n-\n-/* Define this if function arguments should also be promoted using the above\n-   procedure.  */\n-#define PROMOTE_FUNCTION_ARGS\n-\n-/* Likewise, if the function return value is promoted.  */\n-#define PROMOTE_FUNCTION_RETURN\n-\n \f\n /* Standard register usage.  */\n \n@@ -1683,9 +1670,6 @@ extern char mips_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n /* Register in which static-chain is passed to a function.  */\n #define STATIC_CHAIN_REGNUM (GP_REG_FIRST + 2)\n \n-/* Pass structure addresses as an \"invisible\" first argument.  */\n-#define STRUCT_VALUE 0\n-\n /* Registers used as temporaries in prologue/epilogue code.  If we're\n    generating mips16 code, these registers must come from the core set\n    of 8.  The prologue register mustn't conflict with any incoming\n@@ -2225,15 +2209,7 @@ extern enum reg_class mips_char_to_class[256];\n     || (IN_RANGE((N), FP_ARG_FIRST, FP_ARG_LAST)\t\t\\\n \t&& ((N) % FP_INC == 0) && mips_abi != ABI_O64))\t\t\\\n    && !fixed_regs[N])\n-\n-#define RETURN_IN_MEMORY(TYPE) mips_return_in_memory (TYPE)\n-\n-#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n-\t(PRETEND_SIZE) = mips_setup_incoming_varargs (&(CUM), (MODE),\t\\\n-\t\t\t\t\t\t      (TYPE), (NO_RTL))\n \f\n-#define STRICT_ARGUMENT_NAMING (mips_abi != ABI_32 && mips_abi != ABI_O64)\n-\n /* This structure has to cope with two different argument allocation\n    schemes.  Most MIPS ABIs view the arguments as a struct, of which the\n    first N words go in registers and the rest go on the stack.  If I < N,"}]}