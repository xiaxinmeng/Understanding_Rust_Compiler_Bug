{"sha": "857953b3c70a170955afb181018b0231a16a63df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3OTUzYjNjNzBhMTcwOTU1YWZiMTgxMDE4YjAyMzFhMTZhNjNkZg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-20T19:06:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-20T19:06:14Z"}, "message": "HIR and GENERIC lowering for unsafe blocks\n\nThis does not implement the rules for unsafe this wires up the code so we\ncan compile unsafe blocks. No checks are being performed on the code yet.\n\nFixes #382", "tree": {"sha": "63ca1463f6aecb90ec27a1a32adf22ecddde799a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63ca1463f6aecb90ec27a1a32adf22ecddde799a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/857953b3c70a170955afb181018b0231a16a63df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857953b3c70a170955afb181018b0231a16a63df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/857953b3c70a170955afb181018b0231a16a63df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857953b3c70a170955afb181018b0231a16a63df/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02713d245aaffd45d8daaf8c914b1dda5baa6eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02713d245aaffd45d8daaf8c914b1dda5baa6eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02713d245aaffd45d8daaf8c914b1dda5baa6eb4"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "dff4712e18e6f634af655ac279c072b53d11fa36", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=857953b3c70a170955afb181018b0231a16a63df", "patch": "@@ -527,6 +527,11 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n+  void visit (HIR::UnsafeBlockExpr &expr) override\n+  {\n+    expr.get_block_expr ()->accept_vis (*this);\n+  }\n+\n   void visit (HIR::StructExprStruct &struct_expr) override\n   {\n     TyTy::BaseType *tyty = nullptr;"}, {"sha": "36b3e680d1a8940ea9efbbb3a75fbf3565438272", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=857953b3c70a170955afb181018b0231a16a63df", "patch": "@@ -46,7 +46,31 @@ class ASTLoweringBlock : public ASTLoweringBase\n     return resolver.translated;\n   }\n \n-  ~ASTLoweringBlock () {}\n+  static HIR::UnsafeBlockExpr *translate (AST::UnsafeBlockExpr *expr,\n+\t\t\t\t\t  bool *terminated)\n+  {\n+    ASTLoweringBlock resolver;\n+\n+    HIR::BlockExpr *block\n+      = ASTLoweringBlock::translate (expr->get_block_expr ().get (),\n+\t\t\t\t     terminated);\n+    auto crate_num = resolver.mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr->get_node_id (),\n+\t\t\t\t   resolver.mappings->get_next_hir_id (\n+\t\t\t\t     crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    HIR::UnsafeBlockExpr *translated\n+      = new HIR::UnsafeBlockExpr (mapping,\n+\t\t\t\t  std::unique_ptr<HIR::BlockExpr> (block),\n+\t\t\t\t  expr->get_outer_attrs (), expr->get_locus ());\n+\n+    resolver.mappings->insert_hir_expr (\n+      translated->get_mappings ().get_crate_num (),\n+      translated->get_mappings ().get_hirid (), translated);\n+\n+    return translated;\n+  }\n \n   void visit (AST::BlockExpr &expr) override;\n \n@@ -140,6 +164,11 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n     translated = ASTLoweringBlock::translate (&expr, &terminated);\n   }\n \n+  void visit (AST::UnsafeBlockExpr &expr) override\n+  {\n+    translated = ASTLoweringBlock::translate (&expr, &terminated);\n+  }\n+\n   void visit (AST::LoopExpr &expr) override\n   {\n     HIR::BlockExpr *loop_block"}, {"sha": "7bc3ab4aa0b316b83b9f3c027b9fa307786d8d26", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=857953b3c70a170955afb181018b0231a16a63df", "patch": "@@ -135,6 +135,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated = ASTLoweringBlock::translate (&expr, &terminated);\n   }\n \n+  void visit (AST::UnsafeBlockExpr &expr) override\n+  {\n+    translated = ASTLoweringBlock::translate (&expr, &terminated);\n+  }\n+\n   void visit (AST::PathInExpression &expr) override\n   {\n     translated = ASTLowerPathInExpression::translate (&expr);"}, {"sha": "1d5b6e63b42500981af85a19cc45a9987a4a0996", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=857953b3c70a170955afb181018b0231a16a63df", "patch": "@@ -3138,6 +3138,8 @@ class UnsafeBlockExpr : public ExprWithBlock\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<BlockExpr> &get_block_expr () { return expr; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "7abf10a401328b17a9e55abec9424eac31612aa2", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=857953b3c70a170955afb181018b0231a16a63df", "patch": "@@ -196,6 +196,11 @@ class ResolveExpr : public ResolverBase\n \n   void visit (AST::BlockExpr &expr) override;\n \n+  void visit (AST::UnsafeBlockExpr &expr) override\n+  {\n+    expr.get_block_expr ()->accept_vis (*this);\n+  }\n+\n   void visit (AST::ArrayElemsValues &elems) override\n   {\n     elems.iterate ([&] (AST::Expr *elem) mutable -> bool {"}, {"sha": "8197119b22efecd6f2f56b382663d3562cafb682", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857953b3c70a170955afb181018b0231a16a63df/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=857953b3c70a170955afb181018b0231a16a63df", "patch": "@@ -711,6 +711,12 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::BlockExpr &expr) override;\n \n+  void visit (HIR::UnsafeBlockExpr &expr) override\n+  {\n+    infered\n+      = TypeCheckExpr::Resolve (expr.get_block_expr ().get (), inside_loop);\n+  }\n+\n   void visit (HIR::ArrayIndexExpr &expr) override\n   {\n     TyTy::BaseType *size_ty;"}, {"sha": "f57ef52b9c09f58df7ee24861bb6814f8c1674e2", "filename": "gcc/testsuite/rust/compile/torture/unsafe1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857953b3c70a170955afb181018b0231a16a63df/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funsafe1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857953b3c70a170955afb181018b0231a16a63df/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funsafe1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funsafe1.rs?ref=857953b3c70a170955afb181018b0231a16a63df", "patch": "@@ -0,0 +1,12 @@\n+fn test() -> i32 {\n+    unsafe {\n+        let a;\n+        a = 123;\n+        a\n+    }\n+}\n+\n+fn main() {\n+    let a;\n+    a = test();\n+}"}, {"sha": "0b3aad53a441013835946cf1f13a101fefb941ee", "filename": "gcc/testsuite/rust/compile/torture/unsafe2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857953b3c70a170955afb181018b0231a16a63df/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funsafe2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857953b3c70a170955afb181018b0231a16a63df/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funsafe2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funsafe2.rs?ref=857953b3c70a170955afb181018b0231a16a63df", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    unsafe {}\n+    ()\n+}"}, {"sha": "d0cb87d84ed658f8178924ffa2bda5d4684d3841", "filename": "gcc/testsuite/rust/compile/unsafe.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02713d245aaffd45d8daaf8c914b1dda5baa6eb4/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02713d245aaffd45d8daaf8c914b1dda5baa6eb4/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe.rs?ref=02713d245aaffd45d8daaf8c914b1dda5baa6eb4", "patch": "@@ -1,5 +0,0 @@\n-fn main() { // { dg-ice \"#382\" }\n-    unsafe {\n-    }\n-    ()\n-}"}]}