{"sha": "bf548ce3e67276aa429b462cf41e68891fdf40c2", "node_id": "C_kwDOANBUbNoAKGJmNTQ4Y2UzZTY3Mjc2YWE0MjliNDYyY2Y0MWU2ODg5MWZkZjQwYzI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-03T11:16:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-03T22:52:27Z"}, "message": "libstdc++: Simplify emplace member functions in _Rb_tree\n\nThis introduces a new RAII type to simplify the emplace members which\ncurrently use try-catch blocks to deallocate a node if an exception is\nthrown by the comparisons done during insertion. The new type is created\non the stack and manages the allocation of a new node and deallocates it\nin the destructor if it wasn't inserted into the tree. It also provides\nhelper functions for doing the insertion, releasing ownership of the\nnode to the tree.\n\nAlso, we don't need to use long qualified names if we put the return\ntype after the nested-name-specifier.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_tree.h (_Rb_tree::_Auto_node): Define new\n\tRAII helper for creating and inserting new nodes.\n\t(_Rb_tree::_M_insert_node): Use trailing-return-type to simplify\n\tout-of-line definition.\n\t(_Rb_tree::_M_insert_lower_node): Likewise.\n\t(_Rb_tree::_M_insert_equal_lower_node): Likewise.\n\t(_Rb_tree::_M_emplace_unique): Likewise. Use _Auto_node.\n\t(_Rb_tree::_M_emplace_equal): Likewise.\n\t(_Rb_tree::_M_emplace_hint_unique): Likewise.\n\t(_Rb_tree::_M_emplace_hint_equal): Likewise.", "tree": {"sha": "313a70b2cb1aaf41a37fbeedfc9f7d01c1815208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/313a70b2cb1aaf41a37fbeedfc9f7d01c1815208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf548ce3e67276aa429b462cf41e68891fdf40c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf548ce3e67276aa429b462cf41e68891fdf40c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf548ce3e67276aa429b462cf41e68891fdf40c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf548ce3e67276aa429b462cf41e68891fdf40c2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78eaffd1538efb46953a8bf90e9b95661fcfb33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78eaffd1538efb46953a8bf90e9b95661fcfb33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78eaffd1538efb46953a8bf90e9b95661fcfb33"}], "stats": {"total": 148, "additions": 78, "deletions": 70}, "files": [{"sha": "336f4ed97b776c620147992a1728be5e63af3fbb", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 78, "deletions": 70, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf548ce3e67276aa429b462cf41e68891fdf40c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf548ce3e67276aa429b462cf41e68891fdf40c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=bf548ce3e67276aa429b462cf41e68891fdf40c2", "patch": "@@ -1624,6 +1624,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t    __y.begin(), __y.end());\n       }\n #endif\n+\n+    private:\n+#if __cplusplus >= 201103L\n+      // An RAII _Node handle\n+      struct _Auto_node\n+      {\n+\ttemplate<typename... _Args>\n+\t  _Auto_node(_Rb_tree& __t, _Args&&... __args)\n+\t  : _M_t(__t),\n+\t    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))\n+\t  { }\n+\n+\t~_Auto_node()\n+\t{\n+\t  if (_M_node)\n+\t    _M_t._M_drop_node(_M_node);\n+\t}\n+\n+\t_Auto_node(_Auto_node&& __n)\n+\t: _M_t(__n._M_t), _M_node(__n._M_node)\n+\t{ __n._M_node = nullptr; }\n+\n+\tconst _Key&\n+\t_M_key() const\n+\t{ return _S_key(_M_node); }\n+\n+\titerator\n+\t_M_insert(pair<_Base_ptr, _Base_ptr> __p)\n+\t{\n+\t  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);\n+\t  _M_node = nullptr;\n+\t  return __it;\n+\t}\n+\n+\titerator\n+\t_M_insert_equal_lower()\n+\t{\n+\t  auto __it = _M_t._M_insert_equal_lower_node(_M_node);\n+\t  _M_node = nullptr;\n+\t  return __it;\n+\t}\n+\n+\t_Rb_tree& _M_t;\n+\t_Link_type _M_node;\n+      };\n+#endif // C++11\n     };\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n@@ -2326,9 +2372,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>\n-    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n+    auto\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)\n+    -> iterator\n     {\n       bool __insert_left = (__x != 0 || __p == _M_end()\n \t\t\t    || _M_impl._M_key_compare(_S_key(__z),\n@@ -2342,9 +2389,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>\n-    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n+    auto\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_insert_lower_node(_Base_ptr __p, _Link_type __z)\n+    -> iterator\n     {\n       bool __insert_left = (__p == _M_end()\n \t\t\t    || !_M_impl._M_key_compare(_S_key(__p),\n@@ -2358,9 +2406,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>\n-    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n+    auto\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_insert_equal_lower_node(_Link_type __z)\n+    -> iterator\n     {\n       _Link_type __x = _M_begin();\n       _Base_ptr __y = _M_end();\n@@ -2376,100 +2425,59 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>\n     template<typename... _Args>\n-      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n-\t\t\t     _Compare, _Alloc>::iterator, bool>\n+      auto\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n       _M_emplace_unique(_Args&&... __args)\n+      -> pair<iterator, bool>\n       {\n-\t_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);\n-\n-\t__try\n-\t  {\n-\t    typedef pair<iterator, bool> _Res;\n-\t    auto __res = _M_get_insert_unique_pos(_S_key(__z));\n-\t    if (__res.second)\n-\t      return _Res(_M_insert_node(__res.first, __res.second, __z), true);\n-\t\n-\t    _M_drop_node(__z);\n-\t    return _Res(iterator(__res.first), false);\n-\t  }\n-\t__catch(...)\n-\t  {\n-\t    _M_drop_node(__z);\n-\t    __throw_exception_again;\n-\t  }\n+\t_Auto_node __z(*this, std::forward<_Args>(__args)...);\n+\tauto __res = _M_get_insert_unique_pos(__z._M_key());\n+\tif (__res.second)\n+\t  return {__z._M_insert(__res), true};\n+\treturn {iterator(__res.first), false};\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>\n     template<typename... _Args>\n-      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n+      auto\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n       _M_emplace_equal(_Args&&... __args)\n+      -> iterator\n       {\n-\t_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);\n-\n-\t__try\n-\t  {\n-\t    auto __res = _M_get_insert_equal_pos(_S_key(__z));\n-\t    return _M_insert_node(__res.first, __res.second, __z);\n-\t  }\n-\t__catch(...)\n-\t  {\n-\t    _M_drop_node(__z);\n-\t    __throw_exception_again;\n-\t  }\n+\t_Auto_node __z(*this, std::forward<_Args>(__args)...);\n+\tauto __res = _M_get_insert_equal_pos(__z._M_key());\n+\treturn __z._M_insert(__res);\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>\n     template<typename... _Args>\n-      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n+      auto\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)\n+      -> iterator\n       {\n-\t_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);\n-\n-\t__try\n-\t  {\n-\t    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));\n-\n-\t    if (__res.second)\n-\t      return _M_insert_node(__res.first, __res.second, __z);\n-\n-\t    _M_drop_node(__z);\n-\t    return iterator(__res.first);\n-\t  }\n-\t__catch(...)\n-\t  {\n-\t    _M_drop_node(__z);\n-\t    __throw_exception_again;\n-\t  }\n+\t_Auto_node __z(*this, std::forward<_Args>(__args)...);\n+\tauto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());\n+\tif (__res.second)\n+\t  return __z._M_insert(__res);\n+\treturn iterator(__res.first);\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n \t   typename _Compare, typename _Alloc>\n     template<typename... _Args>\n-      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n+      auto\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n       _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)\n+      -> iterator\n       {\n-\t_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);\n-\n-\t__try\n-\t  {\n-\t    auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));\n-\n-\t    if (__res.second)\n-\t      return _M_insert_node(__res.first, __res.second, __z);\n-\n-\t    return _M_insert_equal_lower_node(__z);\n-\t  }\n-\t__catch(...)\n-\t  {\n-\t    _M_drop_node(__z);\n-\t    __throw_exception_again;\n-\t  }\n+\t_Auto_node __z(*this, std::forward<_Args>(__args)...);\n+\tauto __res = _M_get_insert_hint_equal_pos(__pos, __z._M_key());\n+\tif (__res.second)\n+\t  return __z._M_insert(__res);\n+\treturn __z._M_insert_equal_lower();\n       }\n #endif\n "}]}