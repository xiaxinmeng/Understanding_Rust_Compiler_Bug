{"sha": "14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRkZTg2ZmEwYTczMDU2MDNlMDhmNDJlNmZhNWJhNGRiZDJjMmM3ZA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2004-10-07T14:21:15Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-10-07T14:21:15Z"}, "message": "re PR tree-optimization/17749 (ICE with recursive function)\n\n\tPR tree-optimization/17749\n\t* tree-tailcall.c (find_tail_calls): Check that parameter is\n\ta gimple_reg.\n\nFrom-SVN: r88689", "tree": {"sha": "6bb027787886f6e267f7de6f793add2b2a8ba963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bb027787886f6e267f7de6f793add2b2a8ba963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d/comments", "author": null, "committer": null, "parents": [{"sha": "ca05904340457c4c7dbdb15bc589ab980434fa53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca05904340457c4c7dbdb15bc589ab980434fa53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca05904340457c4c7dbdb15bc589ab980434fa53"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "1b6cb7cf11606dfe018e076c69fc48c6b523de07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d", "patch": "@@ -1,3 +1,9 @@\n+2004-10-07  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/17749\n+\t* tree-tailcall.c (find_tail_calls): Check that parameter is\n+\ta gimple_reg.\n+\n 2004-10-07  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/ia64/ia64.c: Fix a comment typo."}, {"sha": "158a2d1d6fb2f2e71086020f344c4b24a9755316", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=14de86fa0a7305603e08f42e6fa5ba4dbd2c2c7d", "patch": "@@ -431,15 +431,27 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n \t   param = TREE_CHAIN (param), args = TREE_CHAIN (args))\n \t{\n \t  tree arg = TREE_VALUE (args);\n-\t  if (param != arg\n-\t      /* Make sure there are no problems with copying.  Note we must\n+\t  if (param != arg)\n+\t    {\n+\t      /* Make sure there are no problems with copying.  The parameter\n \t         have a copyable type and the two arguments must have reasonably\n \t         equivalent types.  The latter requirement could be relaxed if\n \t         we emitted a suitable type conversion statement.  */\n-\t      && (!is_gimple_reg_type (TREE_TYPE (param))\n+\t      if (!is_gimple_reg_type (TREE_TYPE (param))\n \t\t  || !lang_hooks.types_compatible_p (TREE_TYPE (param),\n-\t\t\t\t\t\t     TREE_TYPE (arg))))\n-\t    break;\n+\t\t\t\t\t\t     TREE_TYPE (arg)))\n+\t\tbreak;\n+\n+\t      /* The parameter should be a real operand, so that phi node\n+\t\t created for it at the start of the function has the meaning\n+\t\t of copying the value.  This test implies is_gimple_reg_type\n+\t\t from the previous condition, however this one could be\n+\t\t relaxed by being more careful with copying the new value\n+\t\t of the parameter (emitting appropriate MODIFY_EXPR and\n+\t\t updating the virtual operands).  */\n+\t      if (!is_gimple_reg (param))\n+\t\tbreak;\n+\t    }\n \t}\n       if (!args && !param)\n \ttail_recursion = true;"}]}