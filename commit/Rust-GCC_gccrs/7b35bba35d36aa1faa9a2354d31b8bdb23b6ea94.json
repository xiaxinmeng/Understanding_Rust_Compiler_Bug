{"sha": "7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzNWJiYTM1ZDM2YWExZmFhOWEyMzU0ZDMxYjhiZGIyM2I2ZWE5NA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-10-18T03:29:17Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-10-18T03:29:17Z"}, "message": "* doc/c-tree.texi: Update description of COND_EXPR tree nodes.\n\nFrom-SVN: r58268", "tree": {"sha": "420b0c2abedc67d6776f1361fd25518eaead0a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/420b0c2abedc67d6776f1361fd25518eaead0a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94/comments", "author": null, "committer": null, "parents": [{"sha": "b991a865a12e7e2f1fb0d39b731b92a3d496574d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b991a865a12e7e2f1fb0d39b731b92a3d496574d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b991a865a12e7e2f1fb0d39b731b92a3d496574d"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "9d0de30254e593ee439d99db426bace9ee82e24b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94", "patch": "@@ -1,3 +1,7 @@\n+2002-10-17  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* doc/c-tree.texi: Update description of COND_EXPR tree nodes.\n+\n 2002-10-17  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/rs6000.h (HARD_REGNO_MODE_OK): Allow arbitrary modes"}, {"sha": "0b9f4d69d75e345ac385df7cc08e8d96197322ef", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=7b35bba35d36aa1faa9a2354d31b8bdb23b6ea94", "patch": "@@ -2127,25 +2127,21 @@ These nodes represent @code{?:} expressions.  The first operand\n is of boolean or integral type.  If it evaluates to a nonzero value,\n the second operand should be evaluated, and returned as the value of the\n expression.  Otherwise, the third operand is evaluated, and returned as\n-the value of the expression.  As a GNU extension, the middle operand of\n-the @code{?:} operator may be omitted in the source, like this:\n-\n-@example\n-x ? : 3\n-@end example\n-@noindent\n-which is equivalent to\n-\n-@example\n-x ? x : 3\n-@end example\n-\n-@noindent\n-assuming that @code{x} is an expression without side-effects.  However,\n-in the case that the first operation causes side effects, the\n-side-effects occur only once.  Consumers of the internal representation\n-do not need to worry about this oddity; the second operand will be\n-always be present in the internal representation.\n+the value of the expression.\n+\n+The second operand must have the same type as the entire expression,\n+unless it unconditionally throws an exception or calls a noreturn\n+function, in which case it should have void type.  The same constraints\n+apply to the third operand.  This allows array bounds checks to be\n+represented conveniently as @code{(i >= 0 && i < 10) ? i : abort()}.\n+\n+As a GNU extension, the C language front-ends allow the second\n+operand of the @code{?:} operator may be omitted in the source.\n+For example, @code{x ? : 3} is equivalent to @code{x ? x : 3},\n+assuming that @code{x} is an expression without side-effects.\n+In the tree representation, however, the second operand is always\n+present, possibly protected by @code{SAVE_EXPR} if the first\n+argument does cause side-effects.\n \n @item CALL_EXPR\n These nodes are used to represent calls to functions, including"}]}