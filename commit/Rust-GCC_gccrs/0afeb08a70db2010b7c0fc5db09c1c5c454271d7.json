{"sha": "0afeb08a70db2010b7c0fc5db09c1c5c454271d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFmZWIwOGE3MGRiMjAxMGI3YzBmYzVkYjA5YzFjNWM0NTQyNzFkNw==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-02-16T16:59:27Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-02-16T16:59:27Z"}, "message": "(ix86_expand_binary_operator): Allow for operand1 of MINUS to be CONST_INT\n\nFrom-SVN: r11289", "tree": {"sha": "a9f1fb5c2fc04556f3890f115db0cce71246102f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f1fb5c2fc04556f3890f115db0cce71246102f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0afeb08a70db2010b7c0fc5db09c1c5c454271d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afeb08a70db2010b7c0fc5db09c1c5c454271d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0afeb08a70db2010b7c0fc5db09c1c5c454271d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afeb08a70db2010b7c0fc5db09c1c5c454271d7/comments", "author": null, "committer": null, "parents": [{"sha": "b7237e6d0665c26eb8a85bcaba32e1a2b5992588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7237e6d0665c26eb8a85bcaba32e1a2b5992588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7237e6d0665c26eb8a85bcaba32e1a2b5992588"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "212c67b3aa032f256fb750fdd84be3269803f8e3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afeb08a70db2010b7c0fc5db09c1c5c454271d7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afeb08a70db2010b7c0fc5db09c1c5c454271d7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0afeb08a70db2010b7c0fc5db09c1c5c454271d7", "patch": "@@ -1560,6 +1560,14 @@ ix86_expand_binary_operator (code, mode, operands)\n \n       if (GET_CODE (operands[2]) == MEM)\n \toperands[2] = force_reg (GET_MODE (operands[2]), operands[2]);\n+\n+      if (GET_CODE (operands[1]) == CONST_INT && code == MINUS)\n+\t{\n+\t  rtx temp = gen_reg_rtx (GET_MODE (operands[0]));\n+\t  emit_move_insn (temp, operands[1]);\n+\t  operands[1] = temp;\n+\t  return TRUE;\n+\t}\t  \n     }\n \n   if (!ix86_binary_operator_ok (code, mode, operands))\n@@ -1584,6 +1592,14 @@ ix86_expand_binary_operator (code, mode, operands)\n \t      modified = TRUE;\n \t    }\n \n+\t  if (GET_CODE (operands[1]) == CONST_INT && code == MINUS)\n+\t    {\n+\t      rtx temp = gen_reg_rtx (GET_MODE (operands[0]));\n+\t      emit_move_insn (temp, operands[1]);\n+\t      operands[1] = temp;\n+\t      return TRUE;\n+\t    }\t  \n+\n \t  if (modified && !ix86_binary_operator_ok (code, mode, operands))\n \t    return FALSE;\n \t}\n@@ -1603,7 +1619,9 @@ ix86_binary_operator_ok (code, mode, operands)\n      enum machine_mode mode;\n      rtx operands[3];\n {\n-  return TRUE;\n+  return (GET_CODE (operands[1]) != MEM && GET_CODE (operands[2]) != MEM\n+\t  && GET_CODE (operands[1]) != CONST_INT)\n+    || GET_RTX_CLASS (code) == 'c';\n }\n \f\n /* Attempt to expand a unary operator.  Make the expansion closer to the"}]}