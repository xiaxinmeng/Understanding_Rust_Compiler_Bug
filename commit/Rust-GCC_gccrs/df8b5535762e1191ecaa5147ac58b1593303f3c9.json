{"sha": "df8b5535762e1191ecaa5147ac58b1593303f3c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY4YjU1MzU3NjJlMTE5MWVjYWE1MTQ3YWM1OGIxNTkzMzAzZjNjOQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2012-01-28T18:48:11Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2012-01-28T18:48:11Z"}, "message": "re PR target/51871 (FAIL: gcc.c-torture/execute/20010122-1.c execution)\n\n\tPR target/51871\n\t* config/pa/pa.c (pa_return_addr_rtx): Add support for PA2.0 export\n\tstubs.\n\nFrom-SVN: r183669", "tree": {"sha": "1c3072dfac6526fcddc905b0f90a27f2c68c4462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c3072dfac6526fcddc905b0f90a27f2c68c4462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df8b5535762e1191ecaa5147ac58b1593303f3c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8b5535762e1191ecaa5147ac58b1593303f3c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8b5535762e1191ecaa5147ac58b1593303f3c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8b5535762e1191ecaa5147ac58b1593303f3c9/comments", "author": null, "committer": null, "parents": [{"sha": "3bfe6da98d7a070dcc5531b35dc74b12b5e602aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bfe6da98d7a070dcc5531b35dc74b12b5e602aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bfe6da98d7a070dcc5531b35dc74b12b5e602aa"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "4b1578c762dee20a20ff489823e78e33b82c42e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8b5535762e1191ecaa5147ac58b1593303f3c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8b5535762e1191ecaa5147ac58b1593303f3c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df8b5535762e1191ecaa5147ac58b1593303f3c9", "patch": "@@ -1,3 +1,9 @@\n+2012-01-28  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/51871\n+\t* config/pa/pa.c (pa_return_addr_rtx): Add support for PA2.0 export\n+\tstubs.\n+\n 2012-01-28  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi: Correct hyphenation of \"floating point\","}, {"sha": "bcf64ce82a5b82e1466f982f48a71c82f4c2d522", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df8b5535762e1191ecaa5147ac58b1593303f3c9/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df8b5535762e1191ecaa5147ac58b1593303f3c9/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=df8b5535762e1191ecaa5147ac58b1593303f3c9", "patch": "@@ -4501,18 +4501,24 @@ pa_return_addr_rtx (int count, rtx frameaddr)\n   rtx saved_rp;\n   rtx ins;\n \n-  /* Instruction stream at the normal return address for the export stub:\n+  /* The instruction stream at the return address of a PA1.X export stub is:\n \n \t0x4bc23fd1 | stub+8:   ldw -18(sr0,sp),rp\n \t0x004010a1 | stub+12:  ldsid (sr0,rp),r1\n \t0x00011820 | stub+16:  mtsp r1,sr0\n \t0xe0400002 | stub+20:  be,n 0(sr0,rp)\n \n      0xe0400002 must be specified as -532676606 so that it won't be\n-     rejected as an invalid immediate operand on 64-bit hosts.  */\n+     rejected as an invalid immediate operand on 64-bit hosts.\n \n-  HOST_WIDE_INT insns[4] = {0x4bc23fd1, 0x004010a1, 0x00011820, -532676606};\n-  int i;\n+     The instruction stream at the return address of a PA2.0 export stub is:\n+\n+\t0x4bc23fd1 | stub+8:   ldw -18(sr0,sp),rp\n+\t0xe840d002 | stub+12:  bve,n (rp)\n+  */\n+\n+  HOST_WIDE_INT insns[4];\n+  int i, len;\n \n   if (count != 0)\n     return NULL_RTX;\n@@ -4535,11 +4541,26 @@ pa_return_addr_rtx (int count, rtx frameaddr)\n   ins = copy_to_reg (gen_rtx_AND (Pmode, rp, MASK_RETURN_ADDR));\n   label = gen_label_rtx ();\n \n+  if (TARGET_PA_20)\n+    {\n+      insns[0] = 0x4bc23fd1;\n+      insns[1] = -398405630;\n+      len = 2;\n+    }\n+  else\n+    {\n+      insns[0] = 0x4bc23fd1;\n+      insns[1] = 0x004010a1;\n+      insns[2] = 0x00011820;\n+      insns[3] = -532676606;\n+      len = 4;\n+    }\n+\n   /* Check the instruction stream at the normal return address for the\n      export stub.  If it is an export stub, than our return address is\n      really in -24[frameaddr].  */\n \n-  for (i = 0; i < 3; i++)\n+  for (i = 0; i < len; i++)\n     {\n       rtx op0 = gen_rtx_MEM (SImode, plus_constant (ins, i * 4)); \n       rtx op1 = GEN_INT (insns[i]);"}]}