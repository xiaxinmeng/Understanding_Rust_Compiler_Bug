{"sha": "096f034a8f5df41f610e62c1592fb90a3f551cd5", "node_id": "C_kwDOANBUbNoAKDA5NmYwMzRhOGY1ZGY0MWY2MTBlNjJjMTU5MmZiOTBhM2Y1NTFjZDU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-01T19:09:37Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-01T19:09:37Z"}, "message": "c++: unevaluated array new-expr size constantness [PR108219]\n\nHere we're mishandling the unevaluated array new-expressions due to a\nsupposed non-constant array size ever since r12-5253-g4df7f8c79835d569\nmade us no longer perform constant evaluation of non-manifestly-constant\nexpressions within unevaluated contexts.  This shouldn't make a difference\nhere since the array sizes are constant literals, except they're expressed\nas NON_LVALUE_EXPR location wrappers around INTEGER_CST, wrappers which\nused to get stripped as part of constant evaluation and now no longer do.\nMoreover it means build_vec_init can't constant fold the MINUS_EXPR\n'maxindex' passed from build_new_1 when in an unevaluated context (since\nit tries reducing it via maybe_constant_value called with mce_unknown).\n\nThis patch fixes these issues by making maybe_constant_value (and\nfold_non_dependent_expr) try folding an unevaluated non-manifestly-constant\noperand via fold(), as long as it simplifies to a simple constant, rather\nthan doing no simplification at all.  This covers e.g. simple arithmetic\nand casts including stripping of location wrappers around INTEGER_CST.\n\nIn passing, this patch also fixes maybe_constant_value to avoid constant\nevaluating an unevaluated operand when called with mce_false, by adjusting\nthe early exit test appropriately.\n\nCo-authored-by: Jason Merrill <jason@redhat.com>\n\n\tPR c++/108219\n\tPR c++/108218\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (fold_to_constant): Define.\n\t(maybe_constant_value): Move up early exit test for unevaluated\n\toperands.  Try reducing an unevaluated operand to a constant via\n\tfold_to_constant.\n\t(fold_non_dependent_expr_template): Add early exit test for\n\tCONSTANT_CLASS_P nodes.  Try reducing an unevaluated operand\n\tto a constant via fold_to_constant.\n\t* cp-tree.h (fold_to_constant): Declare.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/new6.C: New test.\n\t* g++.dg/cpp2a/concepts-new1.C: New test.", "tree": {"sha": "0c012f0af6e6fe714d9c1b9189fa3cf852e65eb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c012f0af6e6fe714d9c1b9189fa3cf852e65eb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096f034a8f5df41f610e62c1592fb90a3f551cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f034a8f5df41f610e62c1592fb90a3f551cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096f034a8f5df41f610e62c1592fb90a3f551cd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f034a8f5df41f610e62c1592fb90a3f551cd5/comments", "author": null, "committer": null, "parents": [{"sha": "3843dc1460259fbca1f336b0259f0b6b527d77ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3843dc1460259fbca1f336b0259f0b6b527d77ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3843dc1460259fbca1f336b0259f0b6b527d77ae"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "bcae1cbd973a146e39ee83ee32a455c932e00e68", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f034a8f5df41f610e62c1592fb90a3f551cd5/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f034a8f5df41f610e62c1592fb90a3f551cd5/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=096f034a8f5df41f610e62c1592fb90a3f551cd5", "patch": "@@ -8498,6 +8498,19 @@ fold_simple (tree t)\n   return t;\n }\n \n+/* Try folding the expression T to a simple constant.\n+   Returns that constant, otherwise returns T.  */\n+\n+tree\n+fold_to_constant (tree t)\n+{\n+  tree r = fold (t);\n+  if (CONSTANT_CLASS_P (r) && !TREE_OVERFLOW (r))\n+    return r;\n+  else\n+    return t;\n+}\n+\n /* If T is a constant expression, returns its reduced value.\n    Otherwise, if T does not have TREE_CONSTANT set, returns T.\n    Otherwise, returns a version of T without TREE_CONSTANT.\n@@ -8523,6 +8536,11 @@ maybe_constant_value (tree t, tree decl /* = NULL_TREE */,\n     /* No caching or evaluation needed.  */\n     return t;\n \n+  /* Don't constant evaluate an unevaluated non-manifestly-constant operand,\n+     but at least try folding it to a simple constant.  */\n+  if (cp_unevaluated_operand && manifestly_const_eval != mce_true)\n+    return fold_to_constant (t);\n+\n   if (manifestly_const_eval != mce_unknown)\n     return cxx_eval_outermost_constant_expr (t, true, true,\n \t\t\t\t\t     manifestly_const_eval, false, decl);\n@@ -8544,10 +8562,6 @@ maybe_constant_value (tree t, tree decl /* = NULL_TREE */,\n       return r;\n     }\n \n-  /* Don't evaluate an unevaluated operand.  */\n-  if (cp_unevaluated_operand)\n-    return t;\n-\n   uid_sensitive_constexpr_evaluation_checker c;\n   r = cxx_eval_outermost_constant_expr (t, true, true,\n \t\t\t\t\tmanifestly_const_eval, false, decl);\n@@ -8611,9 +8625,14 @@ fold_non_dependent_expr_template (tree t, tsubst_flags_t complain,\n \t    }\n \t  return t;\n \t}\n+      else if (CONSTANT_CLASS_P (t))\n+\t/* No evaluation needed.  */\n+\treturn t;\n \n+      /* Don't constant evaluate an unevaluated non-manifestly-constant operand,\n+\t but at least try folding it to a simple constant.  */\n       if (cp_unevaluated_operand && !manifestly_const_eval)\n-\treturn t;\n+\treturn fold_to_constant (t);\n \n       tree r = cxx_eval_outermost_constant_expr (t, true, true,\n \t\t\t\t\t\t mce_value (manifestly_const_eval),"}, {"sha": "83633ddc7f221a91799232bc0e91a2dd580e13be", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f034a8f5df41f610e62c1592fb90a3f551cd5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f034a8f5df41f610e62c1592fb90a3f551cd5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=096f034a8f5df41f610e62c1592fb90a3f551cd5", "patch": "@@ -8516,6 +8516,7 @@ extern tree fold_non_dependent_init\t\t(tree,\n \t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error,\n \t\t\t\t\t\t bool = false, tree = NULL_TREE);\n extern tree fold_simple\t\t\t\t(tree);\n+extern tree fold_to_constant\t\t\t(tree);\n extern bool reduced_constant_expression_p       (tree);\n extern bool is_instantiation_of_constexpr       (tree);\n extern bool var_in_constexpr_fn                 (tree);"}, {"sha": "d8f11441423eb0afa09a2a52997d598c23bcd4e3", "filename": "gcc/testsuite/g++.dg/cpp0x/new6.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f034a8f5df41f610e62c1592fb90a3f551cd5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f034a8f5df41f610e62c1592fb90a3f551cd5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnew6.C?ref=096f034a8f5df41f610e62c1592fb90a3f551cd5", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/108218\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+void f() {\n+  decltype(new int[-1]) p; // { dg-error \"negative\" }\n+  decltype(new int[0-1]) q; // { dg-error \"negative\" }\n+  decltype(new int[1*-1]) r; // { dg-error \"negative\" }\n+}\n+\n+decltype(new int[-1]) p; // { dg-error \"negative\" }\n+decltype(new int[0-1]) q; // { dg-error \"negative\" }\n+decltype(new int[1*-1]) r; // { dg-error \"negative\" }"}, {"sha": "62007205108870e3ea825e772bd7d79eb1d0bc6e", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-new1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f034a8f5df41f610e62c1592fb90a3f551cd5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-new1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f034a8f5df41f610e62c1592fb90a3f551cd5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-new1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-new1.C?ref=096f034a8f5df41f610e62c1592fb90a3f551cd5", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/108219\n+// { dg-do compile { target c++20 } }\n+\n+template<class T>\n+concept C = requires { new T[1]{{ 42 }}; };\n+\n+template<class T>\n+concept D = requires { new T[2][1]{{{ 42 }}, {{ 42 }}}; };\n+\n+struct A { A(int); };\n+\n+static_assert(C<A>);\n+static_assert(D<A>);"}]}