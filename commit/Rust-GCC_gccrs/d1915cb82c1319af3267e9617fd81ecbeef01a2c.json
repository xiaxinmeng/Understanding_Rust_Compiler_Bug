{"sha": "d1915cb82c1319af3267e9617fd81ecbeef01a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5MTVjYjgyYzEzMTlhZjMyNjdlOTYxN2ZkODFlY2JlZWYwMWEyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:59:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:59:18Z"}, "message": "[multiple changes]\n\n2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* back_end.adb, opt.ads (Debugger_Level): Update comment.\n\t(Scan_Back_End_Switches): Set Debugger_Level.\n\n2015-11-12  Bob Duff  <duff@adacore.com>\n\n\t* fmap.adb, debug.ads, checks.adb, exp_ch11.adb: Minor edits.\n\n2015-11-12  Doug Rupp  <rupp@adacore.com>\n\n\t* s-stchop-vxworks.adb (Stack_Limit): Export vice Import.\n\n2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_dim.adb: Minor reformatting.\n\nFrom-SVN: r230246", "tree": {"sha": "9da238a2ba95be16be518d23ddbf415a745db8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9da238a2ba95be16be518d23ddbf415a745db8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1915cb82c1319af3267e9617fd81ecbeef01a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1915cb82c1319af3267e9617fd81ecbeef01a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1915cb82c1319af3267e9617fd81ecbeef01a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1915cb82c1319af3267e9617fd81ecbeef01a2c/comments", "author": null, "committer": null, "parents": [{"sha": "c892ccd49211ec57b732463342b5806bdf68e254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c892ccd49211ec57b732463342b5806bdf68e254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c892ccd49211ec57b732463342b5806bdf68e254"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "582a6460b6ff3f9ff622f25b1ca7ee284c9461fb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -1,3 +1,20 @@\n+2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* back_end.adb, opt.ads (Debugger_Level): Update comment.\n+\t(Scan_Back_End_Switches): Set Debugger_Level.\n+\n+2015-11-12  Bob Duff  <duff@adacore.com>\n+\n+\t* fmap.adb, debug.ads, checks.adb, exp_ch11.adb: Minor edits.\n+\n+2015-11-12  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-stchop-vxworks.adb (Stack_Limit): Export vice Import.\n+\n+2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_dim.adb: Minor reformatting.\n+\n 2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n \n \t* gnat1drv.adb, opt.ads: Minor reformatting."}, {"sha": "b5d566971ce92ac3f18f3a86f9560b9604fc80a0", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -272,6 +272,24 @@ package body Back_End is\n             elsif Switch_Chars (First .. Last) = \"fdump-scos\" then\n                Opt.Generate_SCO := True;\n                Opt.Generate_SCO_Instance_Table := True;\n+\n+            elsif Switch_Chars (First) = 'g' then\n+               Debugger_Level := 2;\n+\n+               if First < Last then\n+                  case Switch_Chars (First + 1) is\n+                     when '0' =>\n+                        Debugger_Level := 0;\n+                     when '1' =>\n+                        Debugger_Level := 1;\n+                     when '2' =>\n+                        Debugger_Level := 2;\n+                     when '3' =>\n+                        Debugger_Level := 3;\n+                     when others =>\n+                        null;\n+                  end case;\n+               end if;\n             end if;\n          end if;\n       end Scan_Back_End_Switches;"}, {"sha": "05ec983dee710e1f359f992c03daf3eb5d62ce03", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -169,7 +169,7 @@ package body Checks is\n    end record;\n \n    --  The following table keeps track of saved checks. Rather than use an\n-   --  extensible table. We just use a table of fixed size, and we discard\n+   --  extensible table, we just use a table of fixed size, and we discard\n    --  any saved checks that do not fit. That's very unlikely to happen and\n    --  this is only an optimization in any case.\n "}, {"sha": "3ed932681883b676e2bab23b9ebaf77326da98ca", "filename": "gcc/ada/debug.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fdebug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fdebug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.ads?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,7 +40,7 @@ package Debug is\n    -- Dynamic Debug Flags --\n    -------------------------\n \n-   --  Flags that can be used to active various specialized debugging output\n+   --  Flags that can be used to activate various specialized debugging output\n    --  information. The flags are preset to False, which corresponds to the\n    --  given output being suppressed. The individual flags can be turned on\n    --  using the undocumented switch dxxx where xxx is a string of letters for"}, {"sha": "c41a95f4973ca3560ca112decce7e73f66b35723", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -1995,7 +1995,7 @@ package body Exp_Ch11 is\n    -- Get_Local_Raise_Call_Entity --\n    ---------------------------------\n \n-   --  Note: this is primary provided for use by the back end in generating\n+   --  Note: this is primarily provided for use by the back end in generating\n    --  calls to Local_Raise. But it would be too late in the back end to call\n    --  RTE if this actually caused a load/analyze of the unit. So what we do\n    --  is to ensure there is a dummy call to this function during front end"}, {"sha": "e618d3c7fcea37aac19e595166fefdb2ce0d9a9f", "filename": "gcc/ada/fmap.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Ffmap.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Ffmap.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffmap.adb?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -50,7 +50,7 @@ package body Fmap is\n \n    Max_Buffer : constant := 1_500;\n    Buffer : String (1 .. Max_Buffer);\n-   --  Used to bufferize output when writing to a new mapping file\n+   --  Used to buffer output when writing to a new mapping file\n \n    Buffer_Last : Natural := 0;\n    --  Index of last valid character in Buffer"}, {"sha": "cacc6a04a55e9743b7fe9d58325615562b219b03", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -421,6 +421,7 @@ package Opt is\n \n    subtype Debug_Level_Value is Nat range 0 .. 3;\n    Debugger_Level : Debug_Level_Value := 0;\n+   --  GNAT, GNATBIND\n    --  The value given to the -g parameter. The default value for -g with\n    --  no value is 2. If no -g is specified, defaults to 0.\n    --  Note that the generated code should never depend on this variable,"}, {"sha": "106d4e6ed574d8240081bf68931e3f797a484234", "filename": "gcc/ada/s-stchop-vxworks.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fs-stchop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fs-stchop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop-vxworks.adb?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -60,9 +60,10 @@ package body System.Stack_Checking.Operations is\n    --  VxWorks MILS includes the necessary routine in taskLib, so nothing\n    --  special needs to be done there.\n \n-   Stack_Limit : Address;\n-\n-   pragma Import (C, Stack_Limit, \"__gnat_stack_limit\");\n+   Stack_Limit : Address :=\n+                   Boolean'Pos (Stack_Grows_Down) * Address'First\n+                   + Boolean'Pos (not Stack_Grows_Down) * Address'Last;\n+   pragma Export (C, Stack_Limit, \"__gnat_stack_limit\");\n \n    --  Stack_Limit contains the limit of the stack. This variable is later made\n    --  a task variable (by calling taskVarAdd) and then correctly set to the"}, {"sha": "b859b14af74e8aaf45b6330bdd11e472f7b56cc4", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1915cb82c1319af3267e9617fd81ecbeef01a2c/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=d1915cb82c1319af3267e9617fd81ecbeef01a2c", "patch": "@@ -255,7 +255,7 @@ package body Sem_Dim is\n \n    procedure Analyze_Dimension_Number_Declaration (N : Node_Id);\n    --  Procedure to analyze dimension of expression in a number declaration.\n-   --  This allows a named number to have non-trivial dimensions, while by\n+   --  This allows a named number to have nontrivial dimensions, while by\n    --  default a named number is dimensionless.\n \n    procedure Analyze_Dimension_Object_Declaration (N : Node_Id);\n@@ -1510,7 +1510,7 @@ package body Sem_Dim is\n                end if;\n             end if;\n \n-            --  If  expander is active, remove dimension information from each\n+            --  If expander is active, remove dimension information from each\n             --  operand, as only dimensions of result are relevant.\n \n             if Expander_Active then"}]}