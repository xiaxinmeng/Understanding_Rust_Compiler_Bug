{"sha": "ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJlYWRkOTE0MWVkN2Q5MzM1ZTE2MTIwMjliYTNiNjExNWUxYmIyNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-25T08:30:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-25T08:30:46Z"}, "message": "re PR tree-optimization/49715 (Could do more efficient unsigned-to-float to conversions based on range information)\n\n2011-07-25  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/49715\n\t* tree-vrp.c: Include expr.h and optabs.h.\n\t(range_fits_type_): New function.\n\t(simplify_float_conversion_using_ranges): Likewise.\n\t(simplify_stmt_using_ranges): Call it.\n\t* Makefile.in (tree-vrp.o): Add $(EXPR_H) and $(OPTABS_H) dependencies.\n\t* optabs.c (can_float_p): Export.\n\t* optabs.h (can_float_p): Declare.\n\n\t* gcc.target/i386/pr49715-1.c: New testcase.\n\t* gcc.target/i386/pr49715-2.c: Likewise.\n\nFrom-SVN: r176735", "tree": {"sha": "bb094ce476757d492245a62154085f6ad83c0612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb094ce476757d492245a62154085f6ad83c0612"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d92562770a09498c0e39214b59ecfd3725198a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92562770a09498c0e39214b59ecfd3725198a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d92562770a09498c0e39214b59ecfd3725198a8d"}], "stats": {"total": 146, "additions": 144, "deletions": 2}, "files": [{"sha": "cf4463d194959b13ad7c6ccb3656ed2d0012b8fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "patch": "@@ -1,3 +1,14 @@\n+2011-07-25  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49715\n+\t* tree-vrp.c: Include expr.h and optabs.h.\n+\t(range_fits_type_): New function.\n+\t(simplify_float_conversion_using_ranges): Likewise.\n+\t(simplify_stmt_using_ranges): Call it.\n+\t* Makefile.in (tree-vrp.o): Add $(EXPR_H) and $(OPTABS_H) dependencies.\n+\t* optabs.c (can_float_p): Export.\n+\t* optabs.h (can_float_p): Declare.\n+\n 2011-07-25  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vrp.c (num_vr_values, values_propagated): New global vars."}, {"sha": "88d851351727e49bf904f4fb45335f19a4589f94", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "patch": "@@ -2504,7 +2504,7 @@ tree-vrp.o : tree-vrp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(TREE_DUMP_H) $(DIAGNOSTIC_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) tree-ssa-propagate.h $(FLAGS_H) $(TREE_DUMP_H) \\\n    $(CFGLOOP_H) $(SCEV_H) $(TIMEVAR_H) intl.h tree-pretty-print.h \\\n-   gimple-pretty-print.h gimple-fold.h\n+   gimple-pretty-print.h gimple-fold.h $(OPTABS_H) $(EXPR_H)\n tree-cfg.o : tree-cfg.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(FLAGS_H) output.h \\\n    $(DIAGNOSTIC_H) $(FUNCTION_H) $(TIMEVAR_H) $(TM_H) coretypes.h \\"}, {"sha": "12717b67ab7b6d6fed3e1a3e91d901ccd9fe8914", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "patch": "@@ -4626,7 +4626,7 @@ can_fix_p (enum machine_mode fixmode, enum machine_mode fltmode,\n   return CODE_FOR_nothing;\n }\n \n-static enum insn_code\n+enum insn_code\n can_float_p (enum machine_mode fltmode, enum machine_mode fixmode,\n \t     int unsignedp)\n {"}, {"sha": "c7cb123e442a3ce00b12e2af975b9089a620d528", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "patch": "@@ -849,6 +849,9 @@ extern void expand_fixed_convert (rtx, rtx, int, int);\n /* Generate code for a FLOAT_EXPR.  */\n extern void expand_float (rtx, rtx, int);\n \n+/* Return the insn_code for a FLOAT_EXPR.  */\n+enum insn_code can_float_p (enum machine_mode, enum machine_mode, int);\n+\n /* Generate code for a FIX_EXPR.  */\n extern void expand_fix (rtx, rtx, int);\n "}, {"sha": "4869657af974ba1bce436edcef5dbb1c7b16d4c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "patch": "@@ -1,3 +1,9 @@\n+2011-07-25  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/49715\n+\t* gcc.target/i386/pr49715-1.c: New testcase.\n+\t* gcc.target/i386/pr49715-2.c: Likewise.\n+\n 2011-07-23  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/decltype21.C: Add 49823 examples."}, {"sha": "d959f9e379c5500100183a1524fe241ca93b6899", "filename": "gcc/testsuite/gcc.target/i386/pr49715-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49715-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49715-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49715-1.c?ref=ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -mfpmath=sse\" } */\n+\n+float func(unsigned x)\n+{\n+  return (x & 0xfffff) * 0.01f;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cvtsi2ss\" 1 } } */"}, {"sha": "3fc8e4e8df359780a2b1e10506d372396b60ddf1", "filename": "gcc/testsuite/gcc.target/i386/pr49715-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49715-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49715-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr49715-2.c?ref=ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+\n+double func(unsigned long long x)\n+{\n+  if (x <= 0x7ffffffffffffffeULL)\n+    return (x + 1) * 0.01;\n+  return 0.0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cvtsi2sdq\" 1 } } */"}, {"sha": "c6a4c4476ff496bb03528077b7aec781c885bff8", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebeadd9141ed7d9335e1612029ba3b6115e1bb26/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ebeadd9141ed7d9335e1612029ba3b6115e1bb26", "patch": "@@ -40,6 +40,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"tree-chrec.h\"\n #include \"gimple-fold.h\"\n+#include \"expr.h\"\n+#include \"optabs.h\"\n \n \n /* Type of value ranges.  See value_range_d for a description of these\n@@ -7415,6 +7417,99 @@ simplify_conversion_using_ranges (gimple stmt)\n   return true;\n }\n \n+/* Return whether the value range *VR fits in an integer type specified\n+   by PRECISION and UNSIGNED_P.  */\n+\n+static bool\n+range_fits_type_p (value_range_t *vr, unsigned precision, bool unsigned_p)\n+{\n+  double_int tem;\n+\n+  /* We can only handle constant ranges.  */\n+  if (vr->type != VR_RANGE\n+      || TREE_CODE (vr->min) != INTEGER_CST\n+      || TREE_CODE (vr->max) != INTEGER_CST)\n+    return false;\n+\n+  tem = double_int_ext (tree_to_double_int (vr->min), precision, unsigned_p);\n+  if (!double_int_equal_p (tree_to_double_int (vr->min), tem))\n+    return false;\n+\n+  tem = double_int_ext (tree_to_double_int (vr->max), precision, unsigned_p);\n+  if (!double_int_equal_p (tree_to_double_int (vr->max), tem))\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Simplify a conversion from integral SSA name to float in STMT.  */\n+\n+static bool\n+simplify_float_conversion_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n+{\n+  tree rhs1 = gimple_assign_rhs1 (stmt);\n+  value_range_t *vr = get_value_range (rhs1);\n+  enum machine_mode fltmode = TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt)));\n+  enum machine_mode mode;\n+  tree tem;\n+  gimple conv;\n+\n+  /* We can only handle constant ranges.  */\n+  if (vr->type != VR_RANGE\n+      || TREE_CODE (vr->min) != INTEGER_CST\n+      || TREE_CODE (vr->max) != INTEGER_CST)\n+    return false;\n+\n+  /* First check if we can use a signed type in place of an unsigned.  */\n+  if (TYPE_UNSIGNED (TREE_TYPE (rhs1))\n+      && (can_float_p (fltmode, TYPE_MODE (TREE_TYPE (rhs1)), 0)\n+\t  != CODE_FOR_nothing)\n+      && range_fits_type_p (vr, GET_MODE_PRECISION\n+\t\t\t          (TYPE_MODE (TREE_TYPE (rhs1))), 0))\n+    mode = TYPE_MODE (TREE_TYPE (rhs1));\n+  /* If we can do the conversion in the current input mode do nothing.  */\n+  else if (can_float_p (fltmode, TYPE_MODE (TREE_TYPE (rhs1)),\n+\t\t\tTYPE_UNSIGNED (TREE_TYPE (rhs1))))\n+    return false;\n+  /* Otherwise search for a mode we can use, starting from the narrowest\n+     integer mode available.  */\n+  else\n+    {\n+      mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n+      do\n+\t{\n+\t  /* If we cannot do a signed conversion to float from mode\n+\t     or if the value-range does not fit in the signed type\n+\t     try with a wider mode.  */\n+\t  if (can_float_p (fltmode, mode, 0) != CODE_FOR_nothing\n+\t      && range_fits_type_p (vr, GET_MODE_PRECISION (mode), 0))\n+\t    break;\n+\n+\t  mode = GET_MODE_WIDER_MODE (mode);\n+\t  /* But do not widen the input.  Instead leave that to the\n+\t     optabs expansion code.  */\n+\t  if (GET_MODE_PRECISION (mode) > TYPE_PRECISION (TREE_TYPE (rhs1)))\n+\t    return false;\n+\t}\n+      while (mode != VOIDmode);\n+      if (mode == VOIDmode)\n+\treturn false;\n+    }\n+\n+  /* It works, insert a truncation or sign-change before the\n+     float conversion.  */\n+  tem = create_tmp_var (build_nonstandard_integer_type\n+\t\t\t  (GET_MODE_PRECISION (mode), 0), NULL);\n+  conv = gimple_build_assign_with_ops (NOP_EXPR, tem, rhs1, NULL_TREE);\n+  tem = make_ssa_name (tem, conv);\n+  gimple_assign_set_lhs (conv, tem);\n+  gsi_insert_before (gsi, conv, GSI_SAME_STMT);\n+  gimple_assign_set_rhs1 (stmt, tem);\n+  update_stmt (stmt);\n+\n+  return true;\n+}\n+\n /* Simplify STMT using ranges if possible.  */\n \n static bool\n@@ -7474,6 +7569,12 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t    return simplify_conversion_using_ranges (stmt);\n \t  break;\n \n+\tcase FLOAT_EXPR:\n+\t  if (TREE_CODE (rhs1) == SSA_NAME\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n+\t    return simplify_float_conversion_using_ranges (gsi, stmt);\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}"}]}