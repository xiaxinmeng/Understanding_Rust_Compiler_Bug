{"sha": "38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "node_id": "C_kwDOANBUbNoAKDM4ZTdlOWFjMTU5MWNhM2U3YjNhZGMxODFhMDc4NmZkNzE3MzliNDA", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2021-11-16T21:56:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-01T10:24:43Z"}, "message": "[Ada] Allow formal functions to have a default in the form of an expression function\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Add\n\tdocumentation of the new form of formal subprogram default in\n\tthe section on language extensions (pragma Extensions_Allowed).\n\t* gnat_rm.texi: Regenerate.\n\t* gen_il-gen-gen_nodes.adb: Add Expression as a syntactic field\n\tof N_Formal_(Abstract|Concrete)_Subprogram_Declaration nodes.\n\t* par-ch12.adb (P_Formal_Subprogram_Declaration): Add parsing\n\tsupport for the new default of a parenthesized expression for\n\tformal functions. Issue an error when extensions are not\n\tallowed, suggesting use of -gnatX. Update comment with extended\n\tsyntax for SUBPROGRAM_DEFAULT.\n\t* sem_ch12.adb (Analyze_Formal_Subprogram_Declaration): Issue an\n\terror when an expression default is given for an abstract formal\n\tfunction. When a default expression is present for a formal\n\tfunction, install the function's formals and preanalyze the\n\texpression.\n\t(Instantiate_Formal_Subprogram): Fix typo in RM paragraph in a\n\tcomment.  When a formal function has a default expression,\n\tcreate a body for the function that will evaluate the expression\n\tand will be called when the default applies in an instantiation.\n\tThe implicit function is marked as inlined and as having\n\tconvention Intrinsic.", "tree": {"sha": "c4533bba0912690a6e88865edb94e81a9e8c4d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4533bba0912690a6e88865edb94e81a9e8c4d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbafa6251ed34c3753d3efd821338b493cc957e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbafa6251ed34c3753d3efd821338b493cc957e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbafa6251ed34c3753d3efd821338b493cc957e0"}], "stats": {"total": 136, "additions": 134, "deletions": 2}, "files": [{"sha": "b0b99170709acd1a316d1b1f6acd2f508a544a63", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "patch": "@@ -2401,6 +2401,30 @@ of GNAT specific extensions are recognized as follows:\n   name, preference is given to the component in a selected_component\n   (as is currently the case for tagged types with such component names).\n \n+* Expression defaults for generic formal functions\n+\n+  The declaration of a generic formal function is allowed to specify\n+  an expression as a default, using the syntax of an expression function.\n+\n+  Here is an example of this feature:\n+\n+  .. code-block:: ada\n+\n+      generic\n+         type T is private;\n+         with function Copy (Item : T) return T is (Item); -- Defaults to Item\n+      package Stacks is\n+\n+         type Stack is limited private;\n+\n+         procedure Push (S : in out Stack; X : T); -- Calls Copy on X\n+\n+         function Pop (S : in out Stack) return T; -- Calls Copy to return item\n+\n+      private\n+         -- ...\n+      end Stacks;\n+\n .. _Pragma-Extensions_Visible:\n \n Pragma Extensions_Visible"}, {"sha": "9937919f8acd986d3871a8bb2c93ec13b1d7d6db", "filename": "gcc/ada/gen_il-gen-gen_nodes.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb?ref=38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "patch": "@@ -1136,11 +1136,13 @@ begin -- Gen_IL.Gen.Gen_Nodes\n    Cc (N_Formal_Abstract_Subprogram_Declaration, N_Formal_Subprogram_Declaration,\n        (Sy (Specification, Node_Id),\n         Sy (Default_Name, Node_Id, Default_Empty),\n+        Sy (Expression, Node_Id, Default_Empty),\n         Sy (Box_Present, Flag)));\n \n    Cc (N_Formal_Concrete_Subprogram_Declaration, N_Formal_Subprogram_Declaration,\n        (Sy (Specification, Node_Id),\n         Sy (Default_Name, Node_Id, Default_Empty),\n+        Sy (Expression, Node_Id, Default_Empty),\n         Sy (Box_Present, Flag)));\n \n    Ab (N_Push_Pop_xxx_Label, Node_Kind);"}, {"sha": "9f92812a6f363cd5fd01507312d6599975e94189", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "patch": "@@ -3853,6 +3853,31 @@ simple name as one of the type\u2019s primitive subprograms, where the\n component is visible at the point of a selected_component using that\n name, preference is given to the component in a selected_component\n (as is currently the case for tagged types with such component names).\n+\n+@item \n+Expression defaults for generic formal functions\n+\n+The declaration of a generic formal function is allowed to specify\n+an expression as a default, using the syntax of an expression function.\n+\n+Here is an example of this feature:\n+\n+@example\n+generic\n+   type T is private;\n+   with function Copy (Item : T) return T is (Item); -- Defaults to Item\n+package Stacks is\n+\n+   type Stack is limited private;\n+\n+   procedure Push (S : in out Stack; X : T); -- Calls Copy on X\n+\n+   function Pop (S : in out Stack) return T; -- Calls Copy to return item\n+\n+private\n+   -- ...\n+end Stacks;\n+@end example\n @end itemize\n \n @node Pragma Extensions_Visible,Pragma External,Pragma Extensions_Allowed,Implementation Defined Pragmas"}, {"sha": "2604a17d129f9e0f8d93f510c450fbb560d890f3", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "patch": "@@ -1165,6 +1165,7 @@ package body Ch12 is\n    --      [ASPECT_SPECIFICATIONS];\n \n    --  SUBPROGRAM_DEFAULT ::= DEFAULT_NAME | <>\n+   --                       | ( EXPRESSION )  -- Allowed as extension (-gnatX)\n \n    --  DEFAULT_NAME ::= NAME | null\n \n@@ -1219,6 +1220,29 @@ package body Ch12 is\n \n             Scan;  --  past NULL\n \n+         --  When extensions are enabled, a formal function can have a default\n+         --  given by a parenthesized expression (expression function syntax).\n+\n+         elsif Token = Tok_Left_Paren then\n+            Error_Msg_GNAT_Extension\n+              (\"expression default for formal subprograms\");\n+\n+            if Nkind (Spec_Node) = N_Function_Specification then\n+               Scan;  --  past \"(\"\n+\n+               Set_Expression (Def_Node, P_Expression);\n+\n+               if Token /= Tok_Right_Paren then\n+                  Error_Msg_SC (\"missing \"\")\"\" at end of expression default\");\n+               else\n+                  Scan;  --  past \")\"\n+               end if;\n+\n+            else\n+               Error_Msg_SP\n+                 (\"only functions can specify a default expression\");\n+            end if;\n+\n          else\n             Set_Default_Name (Def_Node, P_Name);\n          end if;"}, {"sha": "e0f72494faa3fa37a2e1b7c135c6bb73cc35e0b3", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e7e9ac1591ca3e7b3adc181a0786fd71739b40/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=38e7e9ac1591ca3e7b3adc181a0786fd71739b40", "patch": "@@ -3278,6 +3278,7 @@ package body Sem_Ch12 is\n    procedure Analyze_Formal_Subprogram_Declaration (N : Node_Id) is\n       Spec : constant Node_Id   := Specification (N);\n       Def  : constant Node_Id   := Default_Name (N);\n+      Expr : constant Node_Id   := Expression (N);\n       Nam  : constant Entity_Id := Defining_Unit_Name (Spec);\n       Subp : Entity_Id;\n \n@@ -3310,6 +3311,18 @@ package body Sem_Ch12 is\n               (\"a formal abstract subprogram cannot default to null\", Spec);\n          end if;\n \n+         --  A formal abstract function cannot have an expression default\n+         --  (expression defaults are allowed for nonabstract formal functions\n+         --  when extensions are enabled).\n+\n+         if Nkind (Spec) = N_Function_Specification\n+           and then Present (Expr)\n+         then\n+            Error_Msg_N\n+              (\"a formal abstract subprogram cannot default to an expression\",\n+               Spec);\n+         end if;\n+\n          declare\n             Ctrl_Type : constant Entity_Id := Find_Dispatching_Type (Nam);\n          begin\n@@ -3336,7 +3349,7 @@ package body Sem_Ch12 is\n       if Box_Present (N) then\n          null;\n \n-      --  Else default is bound at the point of generic declaration\n+      --  Default name is bound at the point of generic declaration\n \n       elsif Present (Def) then\n          if Nkind (Def) = N_Operator_Symbol then\n@@ -3461,6 +3474,16 @@ package body Sem_Ch12 is\n                Error_Msg_N (\"no visible subprogram matches specification\", N);\n             end if;\n          end if;\n+\n+      --  When extensions are enabled, an expression can be given as default\n+      --  for a formal function. The expression must be of the function result\n+      --  type and can reference formal parameters of the function.\n+\n+      elsif Present (Expr) then\n+         Push_Scope (Nam);\n+         Install_Formals (Nam);\n+         Preanalyze_Spec_Expression (Expr, Etype (Nam));\n+         End_Scope;\n       end if;\n \n    <<Leave>>\n@@ -11101,7 +11124,7 @@ package body Sem_Ch12 is\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => New_List (Make_Null_Statement (Loc))));\n \n-         --  RM 12.6 (16 2/2): The procedure has convention Intrinsic\n+         --  RM 12.6 (16.2/2): The procedure has convention Intrinsic\n \n          Set_Convention (Defining_Unit_Name (New_Spec), Convention_Intrinsic);\n \n@@ -11110,6 +11133,40 @@ package body Sem_Ch12 is\n          Set_Is_Inlined (Defining_Unit_Name (New_Spec));\n          return Decl_Node;\n \n+      --  Handle case of a formal function with an expression default (allowed\n+      --  when extensions are enabled).\n+\n+      elsif Nkind (Specification (Formal)) = N_Function_Specification\n+        and then Present (Expression (Formal))\n+      then\n+         --  Generate body for function, for use in the instance\n+\n+         declare\n+            Expr : constant Node_Id := New_Copy (Expression (Formal));\n+            Stmt : constant Node_Id := Make_Simple_Return_Statement (Loc);\n+         begin\n+            Set_Sloc (Expr, Loc);\n+            Set_Expression (Stmt, Expr);\n+\n+            Decl_Node :=\n+              Make_Subprogram_Body (Loc,\n+                Specification              => New_Spec,\n+                Declarations               => New_List,\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements => New_List (Stmt)));\n+         end;\n+\n+         --  RM 12.6 (16.2/2): Like a null procedure default, the function\n+         --  has convention Intrinsic.\n+\n+         Set_Convention (Defining_Unit_Name (New_Spec), Convention_Intrinsic);\n+\n+         --  Inline calls to it when optimization is enabled\n+\n+         Set_Is_Inlined (Defining_Unit_Name (New_Spec));\n+         return Decl_Node;\n+\n       else\n          Error_Msg_Sloc := Sloc (Scope (Analyzed_S));\n          Error_Msg_NE"}]}