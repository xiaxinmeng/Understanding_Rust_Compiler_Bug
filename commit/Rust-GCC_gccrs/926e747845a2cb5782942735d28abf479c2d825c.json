{"sha": "926e747845a2cb5782942735d28abf479c2d825c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2ZTc0Nzg0NWEyY2I1NzgyOTQyNzM1ZDI4YWJmNDc5YzJkODI1Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-04-06T19:22:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-04-06T19:22:02Z"}, "message": "re PR target/80286 (AVX2 _mm_cvtsi128_si32 doesn't return a proper 32bits int)\n\n\tPR target/80286\n\t* config/i386/sse.md (*vec_extractv4si_0_zext_sse4): New pattern.\n\t* config/i386/i386.md (*zero_extendsidi2):\n\tAdd (?*x,*x) and (?*v,*v) alternatives.\n\nFrom-SVN: r246741", "tree": {"sha": "06473d29b827f4c26b0199d0aa1ebdd2f0cd61bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06473d29b827f4c26b0199d0aa1ebdd2f0cd61bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/926e747845a2cb5782942735d28abf479c2d825c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926e747845a2cb5782942735d28abf479c2d825c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926e747845a2cb5782942735d28abf479c2d825c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926e747845a2cb5782942735d28abf479c2d825c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5f5658166c1c2edd1a7f38af5478d133533c580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f5658166c1c2edd1a7f38af5478d133533c580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f5658166c1c2edd1a7f38af5478d133533c580"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "b4bfd2e853a2fc6efa71e8c8d9fb9378afac5ba4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926e747845a2cb5782942735d28abf479c2d825c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926e747845a2cb5782942735d28abf479c2d825c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=926e747845a2cb5782942735d28abf479c2d825c", "patch": "@@ -1,3 +1,10 @@\n+2017-04-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/80286\n+\t* config/i386/sse.md (*vec_extractv4si_0_zext_sse4): New pattern.\n+\t* config/i386/i386.md (*zero_extendsidi2):\n+\tAdd (?*x,*x) and (?*v,*v) alternatives.\n+\n 2017-04-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/79733"}, {"sha": "d1c3c163fd02211efc428621d21b7d98893bdb41", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926e747845a2cb5782942735d28abf479c2d825c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926e747845a2cb5782942735d28abf479c2d825c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=926e747845a2cb5782942735d28abf479c2d825c", "patch": "@@ -3767,10 +3767,10 @@\n \n (define_insn \"*zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,?r ,?r,?*Yi,?*x,*r\")\n+\t\t\"=r,?r,?o,r   ,o,?*Ym,?!*y,?r ,?r,?*Yi,?*x,?*x,?*v,*r\")\n \t(zero_extend:DI\n \t (match_operand:SI 1 \"x86_64_zext_operand\"\n-\t        \t\"0 ,rm,r ,rmWz,0,r   ,m   ,*Yj,*x,r   ,m  ,*k\")))]\n+\t        \"0 ,rm,r ,rmWz,0,r   ,m   ,*Yj,*x,r   ,m  , *x, *v,*k\")))]\n   \"\"\n {\n   switch (get_attr_type (insn))\n@@ -3791,6 +3791,15 @@\n       return \"%vpextrd\\t{$0, %1, %k0|%k0, %1, 0}\";\n \n     case TYPE_SSEMOV:\n+      if (SSE_REG_P (operands[0]) && SSE_REG_P (operands[1]))\n+\t{\n+\t  if (EXT_REX_SSE_REG_P (operands[0])\n+\t      || EXT_REX_SSE_REG_P (operands[1]))\n+\t    return \"vpmovzxdq\\t{%t1, %g0|%g0, %t1}\";\n+\t  else\n+\t    return \"%vpmovzxdq\\t{%1, %0|%0, %1}\";\n+\t}\n+\n       if (GENERAL_REG_P (operands[0]))\n \treturn \"%vmovd\\t{%1, %k0|%k0, %1}\";\n \n@@ -3813,6 +3822,10 @@\n \t    (eq_attr \"alternative\" \"10\")\n \t      (const_string \"sse2\")\n \t    (eq_attr \"alternative\" \"11\")\n+\t      (const_string \"sse4\")\n+\t    (eq_attr \"alternative\" \"12\")\n+\t      (const_string \"avx512f\")\n+\t    (eq_attr \"alternative\" \"13\")\n \t      (const_string \"x64_avx512bw\")\n \t   ]\n \t   (const_string \"*\")))\n@@ -3821,16 +3834,16 @@\n \t      (const_string \"multi\")\n \t    (eq_attr \"alternative\" \"5,6\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"7,9,10\")\n+\t    (eq_attr \"alternative\" \"7,9,10,11,12\")\n \t      (const_string \"ssemov\")\n \t    (eq_attr \"alternative\" \"8\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"11\")\n+\t    (eq_attr \"alternative\" \"13\")\n \t      (const_string \"mskmov\")\n \t   ]\n \t   (const_string \"imovx\")))\n    (set (attr \"prefix_extra\")\n-     (if_then_else (eq_attr \"alternative\" \"8\")\n+     (if_then_else (eq_attr \"alternative\" \"8,11,12\")\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"length_immediate\")\n@@ -3848,7 +3861,7 @@\n    (set (attr \"mode\")\n      (cond [(eq_attr \"alternative\" \"5,6\")\n \t      (const_string \"DI\")\n-\t    (eq_attr \"alternative\" \"7,8,9\")\n+\t    (eq_attr \"alternative\" \"7,8,9,11,12\")\n \t      (const_string \"TI\")\n \t   ]\n \t   (const_string \"SI\")))])"}, {"sha": "094404bc91378f77fda12840097cc55af9c45821", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926e747845a2cb5782942735d28abf479c2d825c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926e747845a2cb5782942735d28abf479c2d825c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=926e747845a2cb5782942735d28abf479c2d825c", "patch": "@@ -13516,18 +13516,6 @@\n   \"#\"\n   [(set_attr \"isa\" \"*,sse4,*,*\")])\n \n-(define_insn_and_split \"*vec_extractv4si_0_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t  (vec_select:SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"v\")\n-\t    (parallel [(const_int 0)]))))]\n-  \"TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0) (zero_extend:DI (match_dup 1)))]\n-  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n-\n (define_insn \"*vec_extractv2di_0_sse\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"     \"=v,m\")\n \t(vec_select:DI\n@@ -13546,6 +13534,35 @@\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = gen_lowpart (<MODE>mode, operands[1]);\")\n \n+(define_insn \"*vec_extractv4si_0_zext_sse4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,x,v\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V4SI 1 \"register_operand\" \"Yj,x,v\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_SSE4_1\"\n+  \"#\"\n+  [(set_attr \"isa\" \"x64,*,avx512f\")])\n+\n+(define_insn \"*vec_extractv4si_0_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V4SI 1 \"register_operand\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(set (match_dup 0) (zero_extend:DI (match_dup 1)))]\n+  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n+\n (define_insn \"*vec_extractv4si\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm,Yr,*x,x,Yv\")\n \t(vec_select:SI"}]}