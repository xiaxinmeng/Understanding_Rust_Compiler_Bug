{"sha": "2f62165dce49a99b72d729aae9f2d992a85c7765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY2MjE2NWRjZTQ5YTk5YjcyZDcyOWFhZTlmMmQ5OTJhODVjNzc2NQ==", "commit": {"author": {"name": "Ganesh Gopalasubramanian", "email": "Ganesh.Gopalasubramanian@amd.com", "date": "2013-12-19T11:04:43Z"}, "committer": {"name": "Ganesh Gopalasubramanian", "email": "gganesh@gcc.gnu.org", "date": "2013-12-19T11:04:43Z"}, "message": "Enable TARGET_LOOP_UNROLL_ADJUST for bdver3/bdver4\n\nFrom-SVN: r206110", "tree": {"sha": "bf1aa32dc01d1e35668395d5ec1e419139aa9fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf1aa32dc01d1e35668395d5ec1e419139aa9fe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f62165dce49a99b72d729aae9f2d992a85c7765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f62165dce49a99b72d729aae9f2d992a85c7765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f62165dce49a99b72d729aae9f2d992a85c7765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f62165dce49a99b72d729aae9f2d992a85c7765/comments", "author": {"login": "ganeshgit", "id": 5275884, "node_id": "MDQ6VXNlcjUyNzU4ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5275884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ganeshgit", "html_url": "https://github.com/ganeshgit", "followers_url": "https://api.github.com/users/ganeshgit/followers", "following_url": "https://api.github.com/users/ganeshgit/following{/other_user}", "gists_url": "https://api.github.com/users/ganeshgit/gists{/gist_id}", "starred_url": "https://api.github.com/users/ganeshgit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ganeshgit/subscriptions", "organizations_url": "https://api.github.com/users/ganeshgit/orgs", "repos_url": "https://api.github.com/users/ganeshgit/repos", "events_url": "https://api.github.com/users/ganeshgit/events{/privacy}", "received_events_url": "https://api.github.com/users/ganeshgit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f317df4f6d6006ed22cff09d17bc5028fda69965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f317df4f6d6006ed22cff09d17bc5028fda69965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f317df4f6d6006ed22cff09d17bc5028fda69965"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "6f69334aa8a40118191c6982795b0686f952cc89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f62165dce49a99b72d729aae9f2d992a85c7765/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f62165dce49a99b72d729aae9f2d992a85c7765/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f62165dce49a99b72d729aae9f2d992a85c7765", "patch": "@@ -1,3 +1,14 @@\n+2013-12-19  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n+\n+\t* config/i386/i386.c: Include cfgloop.h. \n+\t(ix86_loop_memcount): New function.\n+\t(ix86_loop_unroll_adjust): New function.\n+\t(TARGET_LOOP_UNROLL_ADJUST): Define.\n+\t* config/i386/i386.h\n+\t(TARGET_ADJUST_UNROLL): Define.\n+\t* config/i386/x86-tune.def\n+\t(X86_TUNE_ADJUST_UNROLL): Define.\n+\n 2013-12-19  Marek Polacek  <polacek@redhat.com>\n \n \t* config/i386/i386.c (ix86_parse_stringop_strategy_string): Remove"}, {"sha": "f82d1a40470812217258c0ef91e54100695fdc5e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f62165dce49a99b72d729aae9f2d992a85c7765/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f62165dce49a99b72d729aae9f2d992a85c7765/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2f62165dce49a99b72d729aae9f2d992a85c7765", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"is-a.h\"\n #include \"gimple.h\"\n #include \"gimplify.h\"\n+#include \"cfgloop.h\"\n #include \"dwarf2.h\"\n #include \"df.h\"\n #include \"tm-constrs.h\"\n@@ -44014,6 +44015,64 @@ ix86_simd_clone_usable (struct cgraph_node *node)\n     }\n }\n \n+/* This function gives out the number of memory references.\n+   This value determines the unrolling factor for\n+   bdver3 and bdver4 architectures. */\n+\n+static int\n+ix86_loop_memcount (rtx *x, unsigned *mem_count)\n+{\n+  if (*x != NULL_RTX && MEM_P (*x))\n+   {\n+     enum machine_mode mode;\n+     unsigned int n_words;\n+\n+     mode = GET_MODE (*x);\n+     n_words = GET_MODE_SIZE (mode) / UNITS_PER_WORD;\n+\n+    if (n_words > 4)\n+       (*mem_count)+=2;\n+    else\n+       (*mem_count)+=1;\n+   }\n+  return 0;\n+}\n+\n+/* This function adjusts the unroll factor based on\n+   the hardware capabilities. For ex, bdver3 has\n+   a loop buffer which makes unrolling of smaller\n+   loops less important. This function decides the\n+   unroll factor using number of memory references\n+   (value 32 is used) as a heuristic. */\n+\n+static unsigned\n+ix86_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n+{\n+  basic_block *bbs;\n+  rtx insn;\n+  unsigned i;\n+  unsigned mem_count = 0;\n+\n+  if (!TARGET_ADJUST_UNROLL)\n+     return nunroll;\n+\n+  /* Count the number of memory references within the loop body.  */\n+  bbs = get_loop_body (loop);\n+  for (i = 0; i < loop->num_nodes; i++)\n+    {\n+      for (insn = BB_HEAD (bbs[i]); insn != BB_END (bbs[i]); insn = NEXT_INSN (insn))\n+        if (NONDEBUG_INSN_P (insn))\n+            for_each_rtx (&insn, (rtx_function) ix86_loop_memcount, &mem_count);\n+    }\n+  free (bbs);\n+\n+  if (mem_count && mem_count <=32)\n+    return 32/mem_count;\n+\n+  return nunroll;\n+}\n+\n+\n /* Implement TARGET_FLOAT_EXCEPTIONS_ROUNDING_SUPPORTED_P.  */\n \n static bool\n@@ -44499,6 +44558,9 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n #define TARGET_INIT_LIBFUNCS darwin_rename_builtins\n #endif\n \n+#undef TARGET_LOOP_UNROLL_ADJUST\n+#define TARGET_LOOP_UNROLL_ADJUST ix86_loop_unroll_adjust\n+\n #undef TARGET_SPILL_CLASS\n #define TARGET_SPILL_CLASS ix86_spill_class\n "}, {"sha": "b6e7d4611e6dc4ba9ccaaff804bb4e5c8916ba5f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f62165dce49a99b72d729aae9f2d992a85c7765/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f62165dce49a99b72d729aae9f2d992a85c7765/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2f62165dce49a99b72d729aae9f2d992a85c7765", "patch": "@@ -443,6 +443,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]\n #define TARGET_SPLIT_MEM_OPND_FOR_FP_CONVERTS \\\n \tix86_tune_features[X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS]\n+#define TARGET_ADJUST_UNROLL \\\n+    ix86_tune_features[X86_TUNE_ADJUST_UNROLL]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {"}, {"sha": "9539685017217ca4dfd9ca015d5ba7d1ddce70c7", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f62165dce49a99b72d729aae9f2d992a85c7765/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f62165dce49a99b72d729aae9f2d992a85c7765/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=2f62165dce49a99b72d729aae9f2d992a85c7765", "patch": "@@ -503,3 +503,9 @@ DEF_TUNE (X86_TUNE_QIMODE_MATH, \"qimode_math\", ~0)\n    arithmetic to 32bit via PROMOTE_MODE macro.  This code generation scheme\n    is usually used for RISC targets.  */\n DEF_TUNE (X86_TUNE_PROMOTE_QI_REGS, \"promote_qi_regs\", 0)\n+\n+/* X86_TUNE_ADJUST_UNROLL: This enables adjusting the unroll factor based\n+   on hardware capabilities. Bdver3 hardware has a loop buffer which makes\n+   unrolling small loop less important. For, such architectures we adjust\n+   the unroll factor so that the unrolled loop fits the loop buffer.  */\n+DEF_TUNE (X86_TUNE_ADJUST_UNROLL, \"adjust_unroll_factor\", m_BDVER3 | m_BDVER4)"}]}