{"sha": "b642fca1c31b2e2175e0860daf32b4ee0d918085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0MmZjYTFjMzFiMmUyMTc1ZTA4NjBkYWYzMmI0ZWUwZDkxODA4NQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-04T23:52:12Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-08T09:38:38Z"}, "message": "Objective-C/C++ : Handle parsing @property 'class' attribute.\n\nThis attribute states that a property is one manipulated by class\nmethods (it requires a static variable and the setter and getter\nmust be provided explicitly, they cannot be @synthesized).\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.h (OBJC_IS_PATTR_KEYWORD): Add class to the list\n\tof keywords accepted in @property attribute contexts.\n\t* c-objc.h (enum objc_property_attribute_group): Add\n\tOBJC_PROPATTR_GROUP_CLASS.\n\t(enum objc_property_attribute_kind): Add\n\tOBJC_PROPERTY_ATTR_CLASS.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_objc_at_property_declaration): Handle\n\tclass keywords in @property attribute context.\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (objc_prop_attr_kind_for_rid): Handle class\n\tattribute.\n\t(objc_add_property_declaration): Likewise.\n\t* objc-act.h (PROPERTY_CLASS): Record class attribute state.\n\ngcc/testsuite/ChangeLog:\n\n\t* obj-c++.dg/property/at-property-4.mm: Test handling class\n\tattributes.\n\t* objc.dg/property/at-property-4.m: Likewise.", "tree": {"sha": "9fe0006f6338261f7e93d465a09686a2010e0119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fe0006f6338261f7e93d465a09686a2010e0119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b642fca1c31b2e2175e0860daf32b4ee0d918085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b642fca1c31b2e2175e0860daf32b4ee0d918085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b642fca1c31b2e2175e0860daf32b4ee0d918085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b642fca1c31b2e2175e0860daf32b4ee0d918085/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49393e266a2570cb6227777acd4674f922c8a26b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49393e266a2570cb6227777acd4674f922c8a26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49393e266a2570cb6227777acd4674f922c8a26b"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "bfcc279609c969a4334dc49e480b89829f2101ca", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=b642fca1c31b2e2175e0860daf32b4ee0d918085", "patch": "@@ -275,9 +275,11 @@ enum rid\n   ((unsigned int) (rid) >= (unsigned int) RID_FIRST_PQ && \\\n    (unsigned int) (rid) <= (unsigned int) RID_LAST_PQ)\n \n+/* Keywords permitted in an @property attribute context.  */\n #define OBJC_IS_PATTR_KEYWORD(rid) \\\n-  ((unsigned int) (rid) >= (unsigned int) RID_FIRST_PATTR && \\\n-   (unsigned int) (rid) <= (unsigned int) RID_LAST_PATTR)\n+  ((((unsigned int) (rid) >= (unsigned int) RID_FIRST_PATTR && \\\n+     (unsigned int) (rid) <= (unsigned int) RID_LAST_PATTR)) \\\n+   || rid == RID_CLASS)\n \n /* OBJC_IS_CXX_KEYWORD recognizes the 'CXX_OBJC' keywords (such as\n    'class') which are shared in a subtle way between Objective-C and"}, {"sha": "6e96731882b02163673460b68228c724ddcf1046", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=b642fca1c31b2e2175e0860daf32b4ee0d918085", "patch": "@@ -44,6 +44,7 @@ enum objc_property_attribute_group\n   OBJC_PROPATTR_GROUP_READWRITE,\n   OBJC_PROPATTR_GROUP_ASSIGN,\n   OBJC_PROPATTR_GROUP_ATOMIC,\n+  OBJC_PROPATTR_GROUP_CLASS,\n   OBJC_PROPATTR_GROUP_MAX\n };\n \n@@ -59,6 +60,7 @@ enum objc_property_attribute_kind\n   OBJC_PROPERTY_ATTR_COPY =\t\t( 7 << 8)|OBJC_PROPATTR_GROUP_ASSIGN,\n   OBJC_PROPERTY_ATTR_ATOMIC =\t\t( 8 << 8)|OBJC_PROPATTR_GROUP_ATOMIC,\n   OBJC_PROPERTY_ATTR_NONATOMIC =\t( 9 << 8)|OBJC_PROPATTR_GROUP_ATOMIC,\n+  OBJC_PROPERTY_ATTR_CLASS =\t\t(16 << 8)|OBJC_PROPATTR_GROUP_CLASS,\n   OBJC_PROPERTY_ATTR_MAX =\t\t(255 << 8|OBJC_PROPATTR_GROUP_MAX)\n };\n "}, {"sha": "323d7424a8317446b9c73fb66952a4e940d6699d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b642fca1c31b2e2175e0860daf32b4ee0d918085", "patch": "@@ -34052,6 +34052,10 @@ cp_parser_objc_at_property_declaration (cp_parser *parser)\n \t    enum rid keyword;\n \t    if (token->type == CPP_NAME)\n \t      keyword = C_RID_CODE (token->u.value);\n+\t    else if (token->type == CPP_KEYWORD\n+\t\t     && token->keyword == RID_CLASS)\n+\t      /* Account for accepting the 'class' keyword in this context.  */\n+\t      keyword = RID_CLASS;\n \t    else\n \t      keyword = RID_MAX; /* By definition, an unknown property.  */\n \t    cp_lexer_consume_token (parser->lexer);"}, {"sha": "b9ed32d51d07ea1d421d49f66dc1b0b9cc10cc1f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=b642fca1c31b2e2175e0860daf32b4ee0d918085", "patch": "@@ -825,6 +825,7 @@ objc_prop_attr_kind_for_rid (enum rid prop_rid)\n       case RID_PROPATOMIC:\treturn OBJC_PROPERTY_ATTR_ATOMIC;\n       case RID_NONATOMIC:\treturn OBJC_PROPERTY_ATTR_NONATOMIC;\n \n+      case RID_CLASS:\t\treturn OBJC_PROPERTY_ATTR_CLASS;\n     }\n }\n \n@@ -986,6 +987,14 @@ objc_add_property_declaration (location_t location, tree decl,\n \tgcc_unreachable ();\n     }\n \n+  /* An attribute that indicates this property manipulates a class variable.\n+     In this case, both the variable and the getter/setter must be provided\n+     by the user.  */\n+  bool property_class = false;\n+  if (attrs[OBJC_PROPATTR_GROUP_CLASS])\n+    property_nonatomic = attrs[OBJC_PROPATTR_GROUP_CLASS]->prop_kind\n+\t\t\t == OBJC_PROPERTY_ATTR_CLASS;\n+\n   /* TODO: Check that the property type is an Objective-C object or a\n      \"POD\".  */\n \n@@ -1273,6 +1282,7 @@ objc_add_property_declaration (location_t location, tree decl,\n   PROPERTY_SETTER_NAME (property_decl) = property_setter_ident;\n   PROPERTY_READONLY (property_decl) = property_readonly;\n   PROPERTY_NONATOMIC (property_decl) = property_nonatomic;\n+  PROPERTY_CLASS (property_decl) = property_class;\n   PROPERTY_ASSIGN_SEMANTICS (property_decl) = property_assign_semantics;\n   PROPERTY_IVAR_NAME (property_decl) = NULL_TREE;\n   PROPERTY_DYNAMIC (property_decl) = 0;"}, {"sha": "5b0433ff0ee7572792bce11dab6518a478514703", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=b642fca1c31b2e2175e0860daf32b4ee0d918085", "patch": "@@ -137,6 +137,10 @@ enum objc_property_assign_semantics {\n #define PROPERTY_OPTIONAL(DECL) \\\n   DECL_LANG_FLAG_5 (PROPERTY_DECL_CHECK (DECL))\n \n+/* PROPERTY_CLASS can be 0 or 1.  */\n+#define PROPERTY_CLASS(DECL) \\\n+   DECL_LANG_FLAG_6 (PROPERTY_DECL_CHECK (DECL))\n+\n /* PROPERTY_REF.  A PROPERTY_REF represents an 'object.property'\n    expression.  It is normally used for property access, but when\n    the Objective-C 2.0 \"dot-syntax\" (object.component) is used"}, {"sha": "f73d70639b6a4a738d268c1e92cbcc2f14ba66ae", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-4.mm", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-4.mm?ref=b642fca1c31b2e2175e0860daf32b4ee0d918085", "patch": "@@ -14,17 +14,22 @@ - (void) mySetterB: (int)property;\n - (void) mySetter2: (int)property;\n \n /* Test that all the new property attributes can be parsed.  */\n-@property (assign)    id property_a;\n-@property (copy)      id property_b;\n-@property (atomic)    int property_ca;\n-@property (nonatomic) int property_c;\n-@property (readonly)  int property_d;\n-@property (readwrite) int property_e;\n-@property (retain)    id property_f;\n-@property (release)   int property_g;      /* { dg-error \"unknown property attribute\" } */\n-\n-@property (getter=myGetter)  int property_h;\n-@property (setter=mySetter:) int property_i;\n+@property (assign)    id property_as_1;\n+@property (copy)      id property_as_2;\n+@property (retain)    id property_as_3;\n+\n+@property (atomic)    int property_at_1;\n+@property (nonatomic) int property_at_2;\n+\n+@property (readonly)  int property_rw_1;\n+@property (readwrite) int property_rw_2;\n+\n+@property (class) int property_cl_1;\n+\n+@property (release)   int property_err_1;      /* { dg-error \"unknown property attribute\" } */\n+\n+@property (getter=myGetter)  int property_g0;\n+@property (setter=mySetter:) int property_s0;\n \n /* Now test various problems.  */\n "}, {"sha": "0e905db0eb46bb9546cc5eaa643ef2cb2f74a068", "filename": "gcc/testsuite/objc.dg/property/at-property-4.m", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b642fca1c31b2e2175e0860daf32b4ee0d918085/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-4.m?ref=b642fca1c31b2e2175e0860daf32b4ee0d918085", "patch": "@@ -14,14 +14,19 @@ - (void) mySetterB: (int)property;\n - (void) mySetter2: (int)property;\n \n /* Test that all the new property attributes can be parsed.  */\n-@property (assign)    id property_a;\n-@property (copy)      id property_b;\n-@property (atomic)    int property_ca;\n-@property (nonatomic) int property_c;\n-@property (readonly)  int property_d;\n-@property (readwrite) int property_e;\n-@property (retain)    id property_f;\n-@property (release)   int property_g;      /* { dg-error \"unknown property attribute\" } */\n+@property (assign)    id property_as_1;\n+@property (copy)      id property_as_2;\n+@property (retain)    id property_as_3;\n+\n+@property (atomic)    int property_at_1;\n+@property (nonatomic) int property_at_2;\n+\n+@property (readonly)  int property_rw_1;\n+@property (readwrite) int property_rw_2;\n+\n+@property (class) int property_cl_1;\n+\n+@property (release)   int property_err_1;      /* { dg-error \"unknown property attribute\" } */\n \n @property (getter=myGetter)  int property_h;\n @property (setter=mySetter:) int property_i;"}]}