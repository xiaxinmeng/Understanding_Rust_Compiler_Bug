{"sha": "3a4228babc083065faaf41568fbc92e0e562a401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0MjI4YmFiYzA4MzA2NWZhYWY0MTU2OGZiYzkyZTBlNTYyYTQwMQ==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-09-27T03:41:14Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-09-27T03:41:14Z"}, "message": "Fix ipa-vrp convert value_range\n\ngcc/ChangeLog:\n\n2016-09-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR ipa/77677\n\t* ipa-prop.c (ipa_compute_jump_functions_for_edge): Use\n\textract_range_from_unary_expr to convert value_range.\n\t* tree-vrp.c (extract_range_from_unary_expr_1): Rename to.\n\t(extract_range_from_unary_expr): This.\n\t* tree-vrp.h (extract_range_from_unary_expr): Declare.\n\ngcc/testsuite/ChangeLog:\n\n2016-09-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR ipa/77677\n\t* gcc.dg/torture/pr77677-2.c: New test.\n\nFrom-SVN: r240517", "tree": {"sha": "f998314ef3804e0b57a614c034f940830e779812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f998314ef3804e0b57a614c034f940830e779812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a4228babc083065faaf41568fbc92e0e562a401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4228babc083065faaf41568fbc92e0e562a401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a4228babc083065faaf41568fbc92e0e562a401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a4228babc083065faaf41568fbc92e0e562a401/comments", "author": null, "committer": null, "parents": [{"sha": "963da599303d6abae1507c2b4fea29c941b10289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963da599303d6abae1507c2b4fea29c941b10289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963da599303d6abae1507c2b4fea29c941b10289"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "3e5b0994eae05eb01682fa8c50b911981da4fa6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a4228babc083065faaf41568fbc92e0e562a401", "patch": "@@ -1,3 +1,12 @@\n+2016-09-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR ipa/77677\n+\t* ipa-prop.c (ipa_compute_jump_functions_for_edge): Use\n+\textract_range_from_unary_expr to convert value_range.\n+\t* tree-vrp.c (extract_range_from_unary_expr_1): Rename to.\n+\t(extract_range_from_unary_expr): This.\n+\t* tree-vrp.h (extract_range_from_unary_expr): Declare.\n+\n 2016-09-27  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (movcc_internal1): Disparage using CTR or LR."}, {"sha": "302a47935a101e09779f28dfe382c00d1adcf6d5", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=3a4228babc083065faaf41568fbc92e0e562a401", "patch": "@@ -1703,13 +1703,23 @@ ipa_compute_jump_functions_for_edge (struct ipa_func_body_info *fbi,\n \t  if (TREE_CODE (arg) == SSA_NAME\n \t      && param_type\n \t      && (type = get_range_info (arg, &min, &max))\n-\t      && (type == VR_RANGE || type == VR_ANTI_RANGE)\n-\t      && (min.get_precision () <= TYPE_PRECISION (param_type)))\n+\t      && (type == VR_RANGE || type == VR_ANTI_RANGE))\n \t    {\n-\t      jfunc->vr_known = true;\n-\t      jfunc->m_vr.type = type;\n-\t      jfunc->m_vr.min = wide_int_to_tree (param_type, min);\n-\t      jfunc->m_vr.max = wide_int_to_tree (param_type, max);\n+\t      value_range vr;\n+\n+\t      vr.type = type;\n+\t      vr.min = wide_int_to_tree (TREE_TYPE (arg), min);\n+\t      vr.max = wide_int_to_tree (TREE_TYPE (arg), max);\n+\t      vr.equiv = NULL;\n+\t      extract_range_from_unary_expr (&jfunc->m_vr,\n+\t\t\t\t\t     NOP_EXPR,\n+\t\t\t\t\t     param_type,\n+\t\t\t\t\t     &vr, TREE_TYPE (arg));\n+\t      if (jfunc->m_vr.type == VR_RANGE\n+\t\t  || jfunc->m_vr.type == VR_ANTI_RANGE)\n+\t\tjfunc->vr_known = true;\n+\t      else\n+\t\tjfunc->vr_known = false;\n \t    }\n \t  else\n \t    gcc_assert (!jfunc->vr_known);"}, {"sha": "4b24d64eac4c43a952c16272f32d3dbac4680627", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a4228babc083065faaf41568fbc92e0e562a401", "patch": "@@ -1,3 +1,8 @@\n+2016-09-27  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR ipa/77677\n+\t* gcc.dg/torture/pr77677-2.c: New test.\n+\n 2016-09-26  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77420"}, {"sha": "b586d7a038e724112ce4cf0d1c156c4a23fd5556", "filename": "gcc/testsuite/gcc.dg/torture/pr77677-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77677-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77677-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77677-2.c?ref=3a4228babc083065faaf41568fbc92e0e562a401", "patch": "@@ -0,0 +1,17 @@\n+/* PR ipa/77677 */\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+\n+enum machine_mode { MAX_MACHINE_MODE };\n+\n+struct {\n+  int mode : 8;\n+} a;\n+int b;\n+\n+static int fn1();\n+\n+void fn2() { fn1(a, a.mode); }\n+\n+int fn1(a, mode) enum machine_mode mode;\n+{ int c = b = c; }"}, {"sha": "35c06b8ac4de3adbb6956064086df44e7fda76f9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=3a4228babc083065faaf41568fbc92e0e562a401", "patch": "@@ -3281,10 +3281,10 @@ extract_range_from_binary_expr (value_range *vr,\n    the range of its operand *VR0 with type OP0_TYPE with resulting type TYPE.\n    The resulting range is stored in *VR.  */\n \n-static void\n-extract_range_from_unary_expr_1 (value_range *vr,\n-\t\t\t\t enum tree_code code, tree type,\n-\t\t\t\t value_range *vr0_, tree op0_type)\n+void\n+extract_range_from_unary_expr (value_range *vr,\n+\t\t\t       enum tree_code code, tree type,\n+\t\t\t       value_range *vr0_, tree op0_type)\n {\n   value_range vr0 = *vr0_, vrtem0 = VR_INITIALIZER, vrtem1 = VR_INITIALIZER;\n \n@@ -3337,12 +3337,12 @@ extract_range_from_unary_expr_1 (value_range *vr,\n   if (vr0.type == VR_ANTI_RANGE\n       && ranges_from_anti_range (&vr0, &vrtem0, &vrtem1))\n     {\n-      extract_range_from_unary_expr_1 (vr, code, type, &vrtem0, op0_type);\n+      extract_range_from_unary_expr (vr, code, type, &vrtem0, op0_type);\n       if (vrtem1.type != VR_UNDEFINED)\n \t{\n \t  value_range vrres = VR_INITIALIZER;\n-\t  extract_range_from_unary_expr_1 (&vrres, code, type,\n-\t\t\t\t\t   &vrtem1, op0_type);\n+\t  extract_range_from_unary_expr (&vrres, code, type,\n+\t\t\t\t\t &vrtem1, op0_type);\n \t  vrp_meet (vr, &vrres);\n \t}\n       return;\n@@ -3597,7 +3597,7 @@ extract_range_from_unary_expr (value_range *vr, enum tree_code code,\n   else\n     set_value_range_to_varying (&vr0);\n \n-  extract_range_from_unary_expr_1 (vr, code, type, &vr0, TREE_TYPE (op0));\n+  extract_range_from_unary_expr (vr, code, type, &vr0, TREE_TYPE (op0));\n }\n \n "}, {"sha": "5cea7094909683eecb7c177b2c68fd9f9009659c", "filename": "gcc/tree-vrp.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a4228babc083065faaf41568fbc92e0e562a401/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=3a4228babc083065faaf41568fbc92e0e562a401", "patch": "@@ -51,4 +51,9 @@ struct GTY(()) value_range\n extern void vrp_intersect_ranges (value_range *vr0, value_range *vr1);\n extern void vrp_meet (value_range *vr0, const value_range *vr1);\n extern void dump_value_range (FILE *, const value_range *);\n+extern void extract_range_from_unary_expr (value_range *vr,\n+\t\t\t\t\t   enum tree_code code,\n+\t\t\t\t\t   tree type,\n+\t\t\t\t\t   value_range *vr0_,\n+\t\t\t\t\t   tree op0_type);\n "}]}