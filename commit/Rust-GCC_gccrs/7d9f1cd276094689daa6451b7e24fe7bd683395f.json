{"sha": "7d9f1cd276094689daa6451b7e24fe7bd683395f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5ZjFjZDI3NjA5NDY4OWRhYTY0NTFiN2UyNGZlN2JkNjgzMzk1Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-10-22T06:58:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-10-22T06:58:57Z"}, "message": "re PR target/63594 (ICE: in ix86_vector_duplicate_value, at config/i386/i386.c:39831 with -mavx512f)\n\n\tPR target/63594\n\t* config/i386/i386.c (ix86_expand_vector_init_duplicate): For\n\tV{8HI,16QI,16HI,32QI}mode call ix86_vector_duplicate_value\n\teven for just TARGET_AVX2, not only for\n\tTARGET_AVX512VL && TARGET_AVX512BW.  For V{32HI,64QI}mode,\n\tcall ix86_vector_duplicate_value only if TARGET_AVX512BW,\n\totherwise build it using concatenation of 256-bit\n\tbroadcast.\n\t* config/i386/sse.md (AVX_VEC_DUP_MODE): Moved after\n\tavx512 broadcast patterns.\n\t(vec_dup<mode>): Likewise.  For avx2 use\n\tv<sseintprefix>broadcast<bcstscalarsuff> instead of\n\tvbroadcast<ssescalarmodesuffix>.\n\t(AVX2_VEC_DUP_MODE): New mode iterator.\n\t(*vec_dup<mode>): New TARGET_AVX2 define_insn with\n\tAVX2_VEC_DUP_MODE iterator, add a splitter for that.\n\n\t* gcc.dg/pr63594-1.c: New test.\n\t* gcc.dg/pr63594-2.c: New test.\n\t* gcc.target/i386/sse2-pr63594-1.c: New test.\n\t* gcc.target/i386/sse2-pr63594-2.c: New test.\n\t* gcc.target/i386/avx-pr63594-1.c: New test.\n\t* gcc.target/i386/avx-pr63594-2.c: New test.\n\t* gcc.target/i386/avx2-pr63594-1.c: New test.\n\t* gcc.target/i386/avx2-pr63594-2.c: New test.\n\t* gcc.target/i386/avx512f-pr63594-1.c: New test.\n\t* gcc.target/i386/avx512f-pr63594-2.c: New test.\n\t* gcc.target/i386/avx512f-vec-init.c: Adjust expected\n\tinsn counts.\n\nFrom-SVN: r216541", "tree": {"sha": "1493e35cc3b270e4b934b928b0311cda8b335208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1493e35cc3b270e4b934b928b0311cda8b335208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9f1cd276094689daa6451b7e24fe7bd683395f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9f1cd276094689daa6451b7e24fe7bd683395f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9f1cd276094689daa6451b7e24fe7bd683395f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9f1cd276094689daa6451b7e24fe7bd683395f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "793dbadc8d9a2d95debc7fb49d544c177a316aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793dbadc8d9a2d95debc7fb49d544c177a316aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793dbadc8d9a2d95debc7fb49d544c177a316aa5"}], "stats": {"total": 397, "additions": 363, "deletions": 34}, "files": [{"sha": "5ff077fbb2249e71c28337dca9db6be5dd953900", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -1,5 +1,22 @@\n 2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/63594\n+\t* config/i386/i386.c (ix86_expand_vector_init_duplicate): For\n+\tV{8HI,16QI,16HI,32QI}mode call ix86_vector_duplicate_value\n+\teven for just TARGET_AVX2, not only for\n+\tTARGET_AVX512VL && TARGET_AVX512BW.  For V{32HI,64QI}mode,\n+\tcall ix86_vector_duplicate_value only if TARGET_AVX512BW,\n+\totherwise build it using concatenation of 256-bit\n+\tbroadcast.\n+\t* config/i386/sse.md (AVX_VEC_DUP_MODE): Moved after\n+\tavx512 broadcast patterns.\n+\t(vec_dup<mode>): Likewise.  For avx2 use\n+\tv<sseintprefix>broadcast<bcstscalarsuff> instead of\n+\tvbroadcast<ssescalarmodesuffix>.\n+\t(AVX2_VEC_DUP_MODE): New mode iterator.\n+\t(*vec_dup<mode>): New TARGET_AVX2 define_insn with\n+\tAVX2_VEC_DUP_MODE iterator, add a splitter for that.\n+\n \tPR target/63542\n \t* config/i386/i386.c (ix86_pic_register_p): Also return\n \ttrue if x is a hard register with ORIGINAL_REGNO equal to"}, {"sha": "94b7f798b9e5a2f3ca0349da34a775751695705f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -39870,8 +39870,6 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n     case V8SFmode:\n     case V8SImode:\n     case V2DFmode:\n-    case V64QImode:\n-    case V32HImode:\n     case V2DImode:\n     case V4SFmode:\n     case V4SImode:\n@@ -39902,8 +39900,8 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n       goto widen;\n \n     case V8HImode:\n-      if (TARGET_AVX512VL && TARGET_AVX512BW)\n-        return ix86_vector_duplicate_value (mode, target, val);\n+      if (TARGET_AVX2)\n+\treturn ix86_vector_duplicate_value (mode, target, val);\n \n       if (TARGET_SSE2)\n \t{\n@@ -39935,8 +39933,8 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n       goto widen;\n \n     case V16QImode:\n-      if (TARGET_AVX512VL && TARGET_AVX512BW)\n-        return ix86_vector_duplicate_value (mode, target, val);\n+      if (TARGET_AVX2)\n+\treturn ix86_vector_duplicate_value (mode, target, val);\n \n       if (TARGET_SSE2)\n \tgoto permute;\n@@ -39967,8 +39965,8 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n \n     case V16HImode:\n     case V32QImode:\n-      if (TARGET_AVX512VL && TARGET_AVX512BW)\n-        return ix86_vector_duplicate_value (mode, target, val);\n+      if (TARGET_AVX2)\n+\treturn ix86_vector_duplicate_value (mode, target, val);\n       else\n \t{\n \t  enum machine_mode hvmode = (mode == V16HImode ? V8HImode : V16QImode);\n@@ -39982,6 +39980,23 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, enum machine_mode mode,\n \t}\n       return true;\n \n+    case V64QImode:\n+    case V32HImode:\n+      if (TARGET_AVX512BW)\n+\treturn ix86_vector_duplicate_value (mode, target, val);\n+      else\n+\t{\n+\t  enum machine_mode hvmode = (mode == V32HImode ? V16HImode : V32QImode);\n+\t  rtx x = gen_reg_rtx (hvmode);\n+\n+\t  ok = ix86_expand_vector_init_duplicate (false, hvmode, x, val);\n+\t  gcc_assert (ok);\n+\n+\t  x = gen_rtx_VEC_CONCAT (mode, x, x);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+\t}\n+      return true;\n+\n     default:\n       return false;\n     }"}, {"sha": "b7c2c4f59be320f8968d32bfed279a6288ac9b1f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 53, "deletions": 19, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -16523,25 +16523,6 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n-;; Modes handled by AVX vec_dup patterns.\n-(define_mode_iterator AVX_VEC_DUP_MODE\n-  [V8SI V8SF V4DI V4DF])\n-\n-(define_insn \"vec_dup<mode>\"\n-  [(set (match_operand:AVX_VEC_DUP_MODE 0 \"register_operand\" \"=x,v,x\")\n-\t(vec_duplicate:AVX_VEC_DUP_MODE\n-\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"m,v,?x\")))]\n-  \"TARGET_AVX\"\n-  \"@\n-   vbroadcast<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\n-   vbroadcast<ssescalarmodesuffix>\\t{%x1, %0|%0, %x1}\n-   #\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_evex\")\n-   (set_attr \"isa\" \"*,avx2,noavx2\")\n-   (set_attr \"mode\" \"V8SF\")])\n-\n (define_insn \"<avx512>_vec_dup<mode><mask_name>\"\n   [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_duplicate:V48_AVX512VL\n@@ -16644,6 +16625,59 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+;; Modes handled by AVX vec_dup patterns.\n+(define_mode_iterator AVX_VEC_DUP_MODE\n+  [V8SI V8SF V4DI V4DF])\n+;; Modes handled by AVX2 vec_dup patterns.\n+(define_mode_iterator AVX2_VEC_DUP_MODE\n+  [V32QI V16QI V16HI V8HI V8SI V4SI])\n+\n+(define_insn \"*vec_dup<mode>\"\n+  [(set (match_operand:AVX2_VEC_DUP_MODE 0 \"register_operand\" \"=x,x,x\")\n+\t(vec_duplicate:AVX2_VEC_DUP_MODE\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"m,x,!r\")))]\n+  \"TARGET_AVX2\"\n+  \"@\n+   v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0|%0, %1}\n+   v<sseintprefix>broadcast<bcstscalarsuff>\\t{%x1, %0|%0, %x1}\n+   #\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vec_dup<mode>\"\n+  [(set (match_operand:AVX_VEC_DUP_MODE 0 \"register_operand\" \"=x,x,v,x\")\n+\t(vec_duplicate:AVX_VEC_DUP_MODE\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"m,m,v,?x\")))]\n+  \"TARGET_AVX\"\n+  \"@\n+   v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0|%0, %1}\n+   vbroadcast<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\n+   v<sseintprefix>broadcast<bcstscalarsuff>\\t{%x1, %0|%0, %x1}\n+   #\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n+   (set_attr \"isa\" \"avx2,noavx2,avx2,noavx2\")\n+   (set_attr \"mode\" \"<sseinsnmode>,V8SF,<sseinsnmode>,V8SF\")])\n+\n+(define_split\n+  [(set (match_operand:AVX2_VEC_DUP_MODE 0 \"register_operand\")\n+\t(vec_duplicate:AVX2_VEC_DUP_MODE\n+\t  (match_operand:<ssescalarmode> 1 \"register_operand\")))]\n+  \"TARGET_AVX2 && reload_completed && GENERAL_REG_P (operands[1])\"\n+  [(const_int 0)]\n+{\n+  emit_insn (gen_vec_setv4si_0 (gen_lowpart (V4SImode, operands[0]),\n+\t\t\t\tCONST0_RTX (V4SImode),\n+\t\t\t\tgen_lowpart (SImode, operands[1])));\n+  emit_insn (gen_avx2_pbroadcast<mode> (operands[0],\n+\t\t\t\t\tgen_lowpart (<ssexmmmode>mode,\n+\t\t\t\t\t\t     operands[0])));\n+  DONE;\n+})\n+\n (define_split\n   [(set (match_operand:AVX_VEC_DUP_MODE 0 \"register_operand\")\n \t(vec_duplicate:AVX_VEC_DUP_MODE"}, {"sha": "fa09a9c10c3460a37245dbe46d7aa96c2d6b23cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -1,5 +1,19 @@\n 2014-10-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/63594\n+\t* gcc.dg/pr63594-1.c: New test.\n+\t* gcc.dg/pr63594-2.c: New test.\n+\t* gcc.target/i386/sse2-pr63594-1.c: New test.\n+\t* gcc.target/i386/sse2-pr63594-2.c: New test.\n+\t* gcc.target/i386/avx-pr63594-1.c: New test.\n+\t* gcc.target/i386/avx-pr63594-2.c: New test.\n+\t* gcc.target/i386/avx2-pr63594-1.c: New test.\n+\t* gcc.target/i386/avx2-pr63594-2.c: New test.\n+\t* gcc.target/i386/avx512f-pr63594-1.c: New test.\n+\t* gcc.target/i386/avx512f-pr63594-2.c: New test.\n+\t* gcc.target/i386/avx512f-vec-init.c: Adjust expected\n+\tinsn counts.\n+\n \tPR target/63542\n \t* gcc.target/i386/pr63542-1.c: New test.\n \t* gcc.target/i386/pr63542-2.c: New test."}, {"sha": "2c577964003350198921fb18de08a790d7a937d5", "filename": "gcc/testsuite/gcc.dg/pr63594-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63594-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63594-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63594-1.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,65 @@\n+/* PR target/63594 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-psabi\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target i?86-*-linux* x86_64-*-linux* } } */\n+\n+#define C1 c\n+#define C2 C1, C1\n+#define C4 C2, C2\n+#define C8 C4, C4\n+#define C16 C8, C8\n+#define C32 C16, C16\n+#define C64 C32, C32\n+#define C_(n) n\n+#define C(n) C_(C##n)\n+\n+#define T(t,s) \\\n+typedef t v##t##s __attribute__ ((__vector_size__ (s * sizeof (t))));\t\\\n+v##t##s\t\t\t\t\t\t\t\t\t\\\n+test1##t##s (t c)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  v##t##s v = { C(s) };\t\t\t\t\t\t\t\\\n+  return v;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+v##t##s\t\t\t\t\t\t\t\t\t\\\n+test2##t##s (t *p)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  t c = *p;\t\t\t\t\t\t\t\t\\\n+  v##t##s v = { C(s) };\t\t\t\t\t\t\t\\\n+  return v;\t\t\t\t\t\t\t\t\\\n+}\n+\n+typedef long long llong;\n+\n+T(char, 64)\n+T(char, 32)\n+T(char, 16)\n+T(char, 8)\n+T(char, 4)\n+T(char, 2)\n+T(char, 1)\n+T(short, 32)\n+T(short, 16)\n+T(short, 8)\n+T(short, 4)\n+T(short, 2)\n+T(short, 1)\n+T(int, 16)\n+T(int, 8)\n+T(int, 4)\n+T(int, 2)\n+T(int, 1)\n+T(float, 16)\n+T(float, 8)\n+T(float, 4)\n+T(float, 2)\n+T(float, 1)\n+T(llong, 8)\n+T(llong, 4)\n+T(llong, 2)\n+T(llong, 1)\n+T(double, 8)\n+T(double, 4)\n+T(double, 2)\n+T(double, 1)"}, {"sha": "39a64fa88da2a808ecc50f3ae8730e509c09fae8", "filename": "gcc/testsuite/gcc.dg/pr63594-2.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63594-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63594-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr63594-2.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,92 @@\n+/* PR target/63594 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-psabi\" } */\n+/* { dg-additional-options \"-mno-mmx\" { target i?86-*-linux* x86_64-*-linux* } } */\n+\n+#define C1 c\n+#define C2 C1, C1\n+#define C4 C2, C2\n+#define C8 C4, C4\n+#define C16 C8, C8\n+#define C32 C16, C16\n+#define C64 C32, C32\n+#define C_(n) n\n+#define C(n) C_(C##n)\n+\n+#define T(t,s) \\\n+typedef t v##t##s __attribute__ ((__vector_size__ (s * sizeof (t))));\t\\\n+__attribute__((noinline, noclone)) v##t##s\t\t\t\t\\\n+test1##t##s (t c)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  v##t##s v = { C(s) };\t\t\t\t\t\t\t\\\n+  return v;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+__attribute__((noinline, noclone)) v##t##s\t\t\t\t\\\n+test2##t##s (t *p)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  t c = *p;\t\t\t\t\t\t\t\t\\\n+  v##t##s v = { C(s) };\t\t\t\t\t\t\t\\\n+  return v;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+test3##t##s (void)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  t c = 17;\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+  v##t##s a = test1##t##s (c);\t\t\t\t\t\t\\\n+  for (i = 0; i < s; i++)\t\t\t\t\t\t\\\n+    if (a[i] != 17)\t\t\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+  v##t##s b = test2##t##s (&c);\t\t\t\t\t\t\\\n+  for (i = 0; i < s; i++)\t\t\t\t\t\t\\\n+    if (a[i] != 17)\t\t\t\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\t\\\n+}\n+\n+typedef long long llong;\n+\n+#define TESTS \\\n+T(char, 64) \\\n+T(char, 32) \\\n+T(char, 16) \\\n+T(char, 8) \\\n+T(char, 4) \\\n+T(char, 2) \\\n+T(char, 1) \\\n+T(short, 32) \\\n+T(short, 16) \\\n+T(short, 8) \\\n+T(short, 4) \\\n+T(short, 2) \\\n+T(short, 1) \\\n+T(int, 16) \\\n+T(int, 8) \\\n+T(int, 4) \\\n+T(int, 2) \\\n+T(int, 1) \\\n+T(float, 16) \\\n+T(float, 8) \\\n+T(float, 4) \\\n+T(float, 2) \\\n+T(float, 1) \\\n+T(llong, 8) \\\n+T(llong, 4) \\\n+T(llong, 2) \\\n+T(llong, 1) \\\n+T(double, 8) \\\n+T(double, 4) \\\n+T(double, 2) \\\n+T(double, 1)\n+\n+TESTS\n+\n+int\n+main ()\n+{\n+#undef T\n+#define T(t,s) test3##t##s ();\n+  TESTS\n+  return 0;\n+}"}, {"sha": "596a44b8073d2a921c6d4fa9c0982736bb335c57", "filename": "gcc/testsuite/gcc.target/i386/avx-pr63594-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr63594-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr63594-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr63594-1.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/63594 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -mno-mmx -Wno-psabi\" } */\n+\n+#include \"../../gcc.dg/pr63594-1.c\""}, {"sha": "566a6c4402bae27e6e99da522d46335fce2fabc9", "filename": "gcc/testsuite/gcc.target/i386/avx-pr63594-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr63594-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr63594-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr63594-2.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/63594 */\n+/* { dg-do run { target avx } } */\n+/* { dg-options \"-O2 -mavx -mno-mmx -Wno-psabi\" } */\n+\n+#include \"avx-check.h\"\n+\n+int do_main (void);\n+\n+static void\n+avx_test (void)\n+{\n+  do_main ();\n+}\n+\n+#undef main\n+#define main() do_main ()\n+\n+#include \"../../gcc.dg/pr63594-2.c\""}, {"sha": "72bb7613fcfcbca74217e19ae3bd83c442d13d43", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr63594-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr63594-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr63594-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr63594-1.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/63594 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -mno-mmx -Wno-psabi\" } */\n+\n+#include \"../../gcc.dg/pr63594-1.c\""}, {"sha": "86d2fb52d5b3ce1ae78cce8abeb86ae0f80d9e4b", "filename": "gcc/testsuite/gcc.target/i386/avx2-pr63594-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr63594-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr63594-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-pr63594-2.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/63594 */\n+/* { dg-do run { target avx2 } } */\n+/* { dg-options \"-O2 -mavx2 -mno-mmx -Wno-psabi\" } */\n+\n+#include \"avx2-check.h\"\n+\n+int do_main (void);\n+\n+static void\n+avx2_test (void)\n+{\n+  do_main ();\n+}\n+\n+#undef main\n+#define main() do_main ()\n+\n+#include \"../../gcc.dg/pr63594-2.c\""}, {"sha": "ab28987868d6d2bc73c6b25ac6e6686fbf49f62b", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr63594-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr63594-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr63594-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr63594-1.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/63594 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mno-mmx -Wno-psabi\" } */\n+\n+#include \"../../gcc.dg/pr63594-1.c\""}, {"sha": "cd3288fa873f5bfbd44828f044dfcedb87599c49", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr63594-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr63594-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr63594-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr63594-2.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/63594 */\n+/* { dg-do run { target avx512f } } */\n+/* { dg-options \"-O2 -mavx512f -mno-mmx -Wno-psabi\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+int do_main (void);\n+\n+static void\n+avx512f_test (void)\n+{\n+  do_main ();\n+}\n+\n+#undef main\n+#define main() do_main ()\n+\n+#include \"../../gcc.dg/pr63594-2.c\""}, {"sha": "a8d5b0ccb153895d26a01fef98e9561d5eadc2ce", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vec-init.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-init.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -1,12 +1,12 @@\n /* { dg-do compile } */\n /* { dg-options \"-O3 -mavx512f\" } */\n-/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+%zmm\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpbroadcastd\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpbroadcastq\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpbroadcastb\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpbroadcastw\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vbroadcastss\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vbroadcastsd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa64\\[ \\\\t\\]+%zmm\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastss\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vbroadcastsd\" 0 } } */\n \n #include <x86intrin.h>\n "}, {"sha": "89aa7057dbb2feb9dc4a702c63fcdd9af4956974", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr63594-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr63594-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr63594-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr63594-1.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/63594 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx -Wno-psabi\" } */\n+\n+#include \"../../gcc.dg/pr63594-1.c\""}, {"sha": "552f611bbae9498339cabbb3147c2083ff730fe2", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr63594-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr63594-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9f1cd276094689daa6451b7e24fe7bd683395f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr63594-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr63594-2.c?ref=7d9f1cd276094689daa6451b7e24fe7bd683395f", "patch": "@@ -0,0 +1,18 @@\n+/* PR target/63594 */\n+/* { dg-do run { target sse2 } } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx -Wno-psabi\" } */\n+\n+#include \"sse2-check.h\"\n+\n+int do_main (void);\n+\n+static void\n+sse2_test (void)\n+{\n+  do_main ();\n+}\n+\n+#undef main\n+#define main() do_main ()\n+\n+#include \"../../gcc.dg/pr63594-2.c\""}]}