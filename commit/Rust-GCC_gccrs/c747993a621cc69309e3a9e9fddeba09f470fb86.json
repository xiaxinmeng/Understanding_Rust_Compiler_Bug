{"sha": "c747993a621cc69309e3a9e9fddeba09f470fb86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0Nzk5M2E2MjFjYzY5MzA5ZTNhOWU5ZmRkZWJhMDlmNDcwZmI4Ng==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2014-08-07T13:42:22Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-08-07T13:42:22Z"}, "message": "[AArch64] Use MOVN to generate 64-bit negative immediates where sensible\n\n\t* config/aarch64/aarch64.c (aarch64_expand_mov_immediate):\n\tUse MOVN when one of the half-words is 0xffff.\n\nCo-Authored-By: Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n\nFrom-SVN: r213711", "tree": {"sha": "33cb0a390bf1a450247bc8a61461e48e49b446b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33cb0a390bf1a450247bc8a61461e48e49b446b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c747993a621cc69309e3a9e9fddeba09f470fb86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c747993a621cc69309e3a9e9fddeba09f470fb86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c747993a621cc69309e3a9e9fddeba09f470fb86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c747993a621cc69309e3a9e9fddeba09f470fb86/comments", "author": null, "committer": null, "parents": [{"sha": "4da2eb985b6a7c3cf4893d9ab6ab93e158ceb0cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4da2eb985b6a7c3cf4893d9ab6ab93e158ceb0cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4da2eb985b6a7c3cf4893d9ab6ab93e158ceb0cf"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "e121b9ead2be029a1e3aa12e2bd1705588c8cb7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c747993a621cc69309e3a9e9fddeba09f470fb86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c747993a621cc69309e3a9e9fddeba09f470fb86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c747993a621cc69309e3a9e9fddeba09f470fb86", "patch": "@@ -1,3 +1,9 @@\n+2014-08-07  Ian Bolton  <ian.bolton@arm.com>\n+            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_mov_immediate):\n+\tUse MOVN when one of the half-words is 0xffff.\n+\n 2014-08-07  Marat Zakirov  <m.zakirov@samsung.com>\n \n \t* config/arm/thumb1.md (*thumb1_movqi_insn): Copy of thumb1_movhi_insn."}, {"sha": "832bcf36c635f7e124ccd40480b8ca5aa02480eb", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c747993a621cc69309e3a9e9fddeba09f470fb86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c747993a621cc69309e3a9e9fddeba09f470fb86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c747993a621cc69309e3a9e9fddeba09f470fb86", "patch": "@@ -1006,7 +1006,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n   unsigned HOST_WIDE_INT val;\n   bool subtargets;\n   rtx subtarget;\n-  int one_match, zero_match;\n+  int one_match, zero_match, first_not_ffff_match;\n \n   gcc_assert (mode == SImode || mode == DImode);\n \n@@ -1107,29 +1107,48 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n   one_match = 0;\n   zero_match = 0;\n   mask = 0xffff;\n+  first_not_ffff_match = -1;\n \n   for (i = 0; i < 64; i += 16, mask <<= 16)\n     {\n-      if ((val & mask) == 0)\n-\tzero_match++;\n-      else if ((val & mask) == mask)\n+      if ((val & mask) == mask)\n \tone_match++;\n+      else\n+\t{\n+\t  if (first_not_ffff_match < 0)\n+\t    first_not_ffff_match = i;\n+\t  if ((val & mask) == 0)\n+\t    zero_match++;\n+\t}\n     }\n \n   if (one_match == 2)\n     {\n-      mask = 0xffff;\n-      for (i = 0; i < 64; i += 16, mask <<= 16)\n+      /* Set one of the quarters and then insert back into result.  */\n+      mask = 0xffffll << first_not_ffff_match;\n+      emit_insn (gen_rtx_SET (VOIDmode, dest, GEN_INT (val | mask)));\n+      emit_insn (gen_insv_immdi (dest, GEN_INT (first_not_ffff_match),\n+\t\t\t\t GEN_INT ((val >> first_not_ffff_match)\n+\t\t\t\t\t  & 0xffff)));\n+      return;\n+    }\n+\n+  if (one_match > zero_match)\n+    {\n+      /* Set either first three quarters or all but the third.\t */\n+      mask = 0xffffll << (16 - first_not_ffff_match);\n+      emit_insn (gen_rtx_SET (VOIDmode, dest,\n+\t\t\t      GEN_INT (val | mask | 0xffffffff00000000ull)));\n+\n+      /* Now insert other two quarters.\t */\n+      for (i = first_not_ffff_match + 16, mask <<= (first_not_ffff_match << 1);\n+\t   i < 64; i += 16, mask <<= 16)\n \t{\n \t  if ((val & mask) != mask)\n-\t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, dest, GEN_INT (val | mask)));\n-\t      emit_insn (gen_insv_immdi (dest, GEN_INT (i),\n-\t\t\t\t\t GEN_INT ((val >> i) & 0xffff)));\n-\t      return;\n-\t    }\n+\t    emit_insn (gen_insv_immdi (dest, GEN_INT (i),\n+\t\t\t\t       GEN_INT ((val >> i) & 0xffff)));\n \t}\n-      gcc_unreachable ();\n+      return;\n     }\n \n   if (zero_match == 2)"}]}