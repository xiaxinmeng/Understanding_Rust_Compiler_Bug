{"sha": "29afecdf1b14136640f1d88da0e10751dbc6283c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlhZmVjZGYxYjE0MTM2NjQwZjFkODhkYTBlMTA3NTFkYmM2MjgzYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-07T08:06:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-07T08:06:08Z"}, "message": "re PR middle-end/37150 (basic-block vectorization misses some unrolled loops)\n\n2016-11-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/37150\n\t* tree-vectorizer.h (vect_transform_slp_perm_load): Add n_perms\n\tparameter.\n\t* tree-vect-slp.c (vect_supported_load_permutation_p): Adjust.\n\t(vect_analyze_slp_cost_1): Account for the real number of\n\tpermutations emitted and for dead loads.\n\t(vect_transform_slp_perm_load): Add n_perms parameter counting\n\tthe number of emitted permutations.\n\t* tree-vect-stmts.c (vectorizable_load): Adjust.\n\nFrom-SVN: r241893", "tree": {"sha": "e8cf074ca42c483bdddbc561af7283cbc762e5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8cf074ca42c483bdddbc561af7283cbc762e5fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29afecdf1b14136640f1d88da0e10751dbc6283c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29afecdf1b14136640f1d88da0e10751dbc6283c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29afecdf1b14136640f1d88da0e10751dbc6283c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29afecdf1b14136640f1d88da0e10751dbc6283c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0d3edf8a54e30d48f61eb59a0be33c7ed2b971f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d3edf8a54e30d48f61eb59a0be33c7ed2b971f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d3edf8a54e30d48f61eb59a0be33c7ed2b971f"}], "stats": {"total": 73, "additions": 61, "deletions": 12}, "files": [{"sha": "7e5c970380fa53f2b24b6445bae299574d01f216", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29afecdf1b14136640f1d88da0e10751dbc6283c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29afecdf1b14136640f1d88da0e10751dbc6283c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29afecdf1b14136640f1d88da0e10751dbc6283c", "patch": "@@ -1,3 +1,15 @@\n+2016-11-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37150\n+\t* tree-vectorizer.h (vect_transform_slp_perm_load): Add n_perms\n+\tparameter.\n+\t* tree-vect-slp.c (vect_supported_load_permutation_p): Adjust.\n+\t(vect_analyze_slp_cost_1): Account for the real number of\n+\tpermutations emitted and for dead loads.\n+\t(vect_transform_slp_perm_load): Add n_perms parameter counting\n+\tthe number of emitted permutations.\n+\t* tree-vect-stmts.c (vectorizable_load): Adjust.\n+\n 2016-11-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78189"}, {"sha": "6694164effb4383ed9dd8a68e960808886b65740", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29afecdf1b14136640f1d88da0e10751dbc6283c/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29afecdf1b14136640f1d88da0e10751dbc6283c/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=29afecdf1b14136640f1d88da0e10751dbc6283c", "patch": "@@ -1461,8 +1461,9 @@ vect_supported_load_permutation_p (slp_instance slp_instn)\n \t    {\n \t      /* Verify the permutation can be generated.  */\n \t      vec<tree> tem;\n+\t      unsigned n_perms;\n \t      if (!vect_transform_slp_perm_load (node, tem, NULL,\n-\t\t\t\t\t\t 1, slp_instn, true))\n+\t\t\t\t\t\t 1, slp_instn, true, &n_perms))\n \t\t{\n \t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n \t\t\t\t   vect_location,\n@@ -1475,11 +1476,13 @@ vect_supported_load_permutation_p (slp_instance slp_instn)\n     }\n \n   /* For loop vectorization verify we can generate the permutation.  */\n+  unsigned n_perms;\n   FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (slp_instn), i, node)\n     if (node->load_permutation.exists ()\n \t&& !vect_transform_slp_perm_load\n \t      (node, vNULL, NULL,\n-\t       SLP_INSTANCE_UNROLLING_FACTOR (slp_instn), slp_instn, true))\n+\t       SLP_INSTANCE_UNROLLING_FACTOR (slp_instn), slp_instn, true,\n+\t       &n_perms))\n       return false;\n \n   return true;\n@@ -1548,14 +1551,38 @@ vect_analyze_slp_cost_1 (slp_instance instance, slp_tree node,\n \t      stmt = GROUP_FIRST_ELEMENT (stmt_info);\n \t      stmt_info = vinfo_for_stmt (stmt);\n \t      /* Record the cost for the permutation.  */\n-\t      record_stmt_cost (body_cost_vec, ncopies_for_cost, vec_perm,\n+\t      unsigned n_perms;\n+\t      vect_transform_slp_perm_load (node, vNULL, NULL,\n+\t\t\t\t\t    ncopies_for_cost, instance, true,\n+\t\t\t\t\t    &n_perms);\n+\t      record_stmt_cost (body_cost_vec, n_perms, vec_perm,\n \t\t\t\tstmt_info, 0, vect_body);\n-\t      /* And adjust the number of loads performed.  */\n \t      unsigned nunits\n \t\t= TYPE_VECTOR_SUBPARTS (STMT_VINFO_VECTYPE (stmt_info));\n-\t      ncopies_for_cost\n-\t        = (GROUP_SIZE (stmt_info) - GROUP_GAP (stmt_info)\n-\t\t   + nunits - 1) / nunits;\n+\t      /* And adjust the number of loads performed.  This handles\n+\t         redundancies as well as loads that are later dead.  */\n+\t      auto_sbitmap perm (GROUP_SIZE (stmt_info));\n+\t      bitmap_clear (perm);\n+\t      for (i = 0; i < SLP_TREE_LOAD_PERMUTATION (node).length (); ++i)\n+\t\tbitmap_set_bit (perm, SLP_TREE_LOAD_PERMUTATION (node)[i]);\n+\t      ncopies_for_cost = 0;\n+\t      bool load_seen = false;\n+\t      for (i = 0; i < GROUP_SIZE (stmt_info); ++i)\n+\t\t{\n+\t\t  if (i % nunits == 0)\n+\t\t    {\n+\t\t      if (load_seen)\n+\t\t\tncopies_for_cost++;\n+\t\t      load_seen = false;\n+\t\t    }\n+\t\t  if (bitmap_bit_p (perm, i))\n+\t\t    load_seen = true;\n+\t\t}\n+\t      if (load_seen)\n+\t\tncopies_for_cost++;\n+\t      gcc_assert (ncopies_for_cost\n+\t\t\t  <= (GROUP_SIZE (stmt_info) - GROUP_GAP (stmt_info)\n+\t\t\t      + nunits - 1) / nunits);\n \t      ncopies_for_cost *= SLP_INSTANCE_UNROLLING_FACTOR (instance);\n \t    }\n \t  /* Record the cost for the vector loads.  */\n@@ -3402,7 +3429,8 @@ vect_create_mask_and_perm (gimple *stmt,\n bool\n vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n                               gimple_stmt_iterator *gsi, int vf,\n-                              slp_instance slp_node_instance, bool analyze_only)\n+                              slp_instance slp_node_instance, bool analyze_only,\n+\t\t\t      unsigned *n_perms)\n {\n   gimple *stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n@@ -3457,6 +3485,7 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n   int first_vec_index = -1;\n   int second_vec_index = -1;\n   bool noop_p = true;\n+  *n_perms = 0;\n \n   for (int j = 0; j < unroll_factor; j++)\n     {\n@@ -3513,6 +3542,9 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n \t\t  return false;\n \t\t}\n \n+\t      if (! noop_p)\n+\t\t++*n_perms;\n+\n \t      if (!analyze_only)\n \t\t{\n \t\t  tree mask_vec = NULL_TREE;"}, {"sha": "ab01defbe55102a9d9cfc71b0afccbe0bf85084f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29afecdf1b14136640f1d88da0e10751dbc6283c/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29afecdf1b14136640f1d88da0e10751dbc6283c/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=29afecdf1b14136640f1d88da0e10751dbc6283c", "patch": "@@ -6978,8 +6978,11 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t    }\n \t}\n       if (slp_perm)\n-\tvect_transform_slp_perm_load (slp_node, dr_chain, gsi, vf,\n-\t\t\t\t      slp_node_instance, false);\n+\t{\n+\t  unsigned n_perms;\n+\t  vect_transform_slp_perm_load (slp_node, dr_chain, gsi, vf,\n+\t\t\t\t\tslp_node_instance, false, &n_perms);\n+\t}\n       return true;\n     }\n \n@@ -7497,8 +7500,10 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \n       if (slp_perm)\n         {\n+\t  unsigned n_perms;\n           if (!vect_transform_slp_perm_load (slp_node, dr_chain, gsi, vf,\n-                                             slp_node_instance, false))\n+                                             slp_node_instance, false,\n+\t\t\t\t\t     &n_perms))\n             {\n               dr_chain.release ();\n               return false;"}, {"sha": "2a7cdfe27a5d60007b654e93ce73d74849ae54c8", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29afecdf1b14136640f1d88da0e10751dbc6283c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29afecdf1b14136640f1d88da0e10751dbc6283c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=29afecdf1b14136640f1d88da0e10751dbc6283c", "patch": "@@ -1166,7 +1166,7 @@ extern int vect_get_known_peeling_cost (loop_vec_info, int, int *,\n extern void vect_free_slp_instance (slp_instance);\n extern bool vect_transform_slp_perm_load (slp_tree, vec<tree> ,\n                                           gimple_stmt_iterator *, int,\n-                                          slp_instance, bool);\n+                                          slp_instance, bool, unsigned *);\n extern bool vect_slp_analyze_operations (vec<slp_instance> slp_instances,\n \t\t\t\t\t void *);\n extern bool vect_schedule_slp (vec_info *);"}]}