{"sha": "5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkODE2ZTY1MDliZGQ1ZmNmOWYzNDdhOGUyZTk4MzBjNGUzZGVmZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-16T17:14:00Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-06-16T17:14:00Z"}, "message": "re PR target/56766 (Fails to combine (vec_select (vec_concat ...)) to (vec_merge ...))\n\n\tPR target/56776\n\t* config/i386/sse.md (*avx_addsubv4df3_1): New insn pattern.\n\t(*avx_addsubv4df3_1s): Ditto.\n\t(*sse3_addsubv2df3_1): Ditto.\n\t(*sse3_addsubv2df3_1s): Ditto.\n\t(*avx_addsubv8sf3_1): Ditto.\n\t(*avx_addsubv8sf3_1s): Ditto.\n\t(*sse3_addsubv4sf3_1): Ditto.\n\t(*sse3_addsubv4sf3_1s): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/56776\n\t* gcc.target/i386/pr56776-1.c: New test.\n\t* gcc.target/i386/pr56776-2.c: Ditto.\n\nFrom-SVN: r224527", "tree": {"sha": "ef1d3ef8ba885765f9a5ef18659215ef258098b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef1d3ef8ba885765f9a5ef18659215ef258098b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe/comments", "author": null, "committer": null, "parents": [{"sha": "39e99359d370e8118e1de6e37f83e88cac92668a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39e99359d370e8118e1de6e37f83e88cac92668a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39e99359d370e8118e1de6e37f83e88cac92668a"}], "stats": {"total": 228, "additions": 228, "deletions": 0}, "files": [{"sha": "d1277ca8a9d1aba439cb9a1fe0f37dde8ece97a8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe", "patch": "@@ -2032,6 +2032,38 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V4DF\")])\n \n+(define_insn \"*avx_addsubv4df3_1\"\n+  [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n+  \t(vec_select:V4DF\n+\t  (vec_concat:V8DF\n+\t    (minus:V4DF\n+\t      (match_operand:V4DF 1 \"register_operand\" \"x\")\n+\t      (match_operand:V4DF 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (plus:V4DF (match_dup 1) (match_dup 2)))\n+\t  (parallel [(const_int 0) (const_int 5)\n+\t\t     (const_int 2) (const_int 7)])))]\n+  \"TARGET_AVX\"\n+  \"vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V4DF\")])\n+\n+(define_insn \"*avx_addsubv4df3_1s\"\n+  [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n+  \t(vec_select:V4DF\n+\t  (vec_concat:V8DF\n+\t    (minus:V4DF\n+\t      (match_operand:V4DF 1 \"register_operand\" \"x\")\n+\t      (match_operand:V4DF 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (plus:V4DF (match_dup 2) (match_dup 1)))\n+\t  (parallel [(const_int 0) (const_int 5)\n+\t\t     (const_int 2) (const_int 7)])))]\n+  \"TARGET_AVX\"\n+  \"vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V4DF\")])\n+\n (define_insn \"sse3_addsubv2df3\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V2DF\n@@ -2050,6 +2082,44 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"V2DF\")])\n \n+(define_insn \"*sse3_addsubv2df3_1\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n+\t(vec_select:V2DF\n+\t  (vec_concat:V4DF\n+\t    (minus:V2DF\n+\t      (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n+\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (plus:V2DF (match_dup 1) (match_dup 2)))\n+\t  (parallel [(const_int 0) (const_int 3)])))]\n+  \"TARGET_SSE3\"\n+  \"@\n+   addsubpd\\t{%2, %0|%0, %2}\n+   vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+(define_insn \"*sse3_addsubv2df3_1s\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n+\t(vec_select:V2DF\n+\t  (vec_concat:V4DF\n+\t    (minus:V2DF\n+\t      (match_operand:V2DF 1 \"register_operand\" \"0,x\")\n+\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (plus:V2DF (match_dup 2) (match_dup 1)))\n+\t  (parallel [(const_int 0) (const_int 3)])))]\n+  \"TARGET_SSE3\"\n+  \"@\n+   addsubpd\\t{%2, %0|%0, %2}\n+   vaddsubpd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"atom_unit\" \"complex\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n (define_insn \"avx_addsubv8sf3\"\n   [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V8SF\n@@ -2064,6 +2134,42 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n+(define_insn \"*avx_addsubv8sf3_1\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+\t(vec_select:V8SF\n+\t  (vec_concat:V16SF\n+\t    (minus:V8SF\n+\t      (match_operand:V8SF 1 \"register_operand\" \"x\")\n+\t      (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (plus:V8SF (match_dup 1) (match_dup 2)))\n+\t  (parallel [(const_int 0) (const_int 9)\n+\t\t     (const_int 2) (const_int 11)\n+\t\t     (const_int 4) (const_int 13)\n+\t\t     (const_int 6) (const_int 15)])))]\n+  \"TARGET_AVX\"\n+  \"vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V8SF\")])\n+\n+(define_insn \"*avx_addsubv8sf3_1s\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+\t(vec_select:V8SF\n+\t  (vec_concat:V16SF\n+\t    (minus:V8SF\n+\t      (match_operand:V8SF 1 \"register_operand\" \"x\")\n+\t      (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (plus:V8SF (match_dup 2) (match_dup 1)))\n+\t  (parallel [(const_int 0) (const_int 9)\n+\t\t     (const_int 2) (const_int 11)\n+\t\t     (const_int 4) (const_int 13)\n+\t\t     (const_int 6) (const_int 15)])))]\n+  \"TARGET_AVX\"\n+  \"vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"V8SF\")])\n+\n (define_insn \"sse3_addsubv4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V4SF\n@@ -2082,6 +2188,46 @@\n    (set_attr \"prefix_rep\" \"1,*\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_insn \"*sse3_addsubv4sf3_1\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+\t(vec_select:V4SF\n+\t  (vec_concat:V8SF\n+\t    (minus:V4SF\n+\t      (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n+\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (plus:V4SF (match_dup 1) (match_dup 2)))\n+\t  (parallel [(const_int 0) (const_int 5)\n+\t\t     (const_int 2) (const_int 7)])))]\n+  \"TARGET_SSE3\"\n+  \"@\n+   addsubps\\t{%2, %0|%0, %2}\n+   vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix_rep\" \"1,*\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*sse3_addsubv4sf3_1s\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+\t(vec_select:V4SF\n+\t  (vec_concat:V8SF\n+\t    (minus:V4SF\n+\t      (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n+\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (plus:V4SF (match_dup 2) (match_dup 1)))\n+\t  (parallel [(const_int 0) (const_int 5)\n+\t\t     (const_int 2) (const_int 7)])))]\n+  \"TARGET_SSE3\"\n+  \"@\n+   addsubps\\t{%2, %0|%0, %2}\n+   vaddsubps\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix_rep\" \"1,*\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n (define_insn \"avx_h<plusminus_insn>v4df3\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"=x\")\n \t(vec_concat:V4DF"}, {"sha": "dff489f4f4d899d16c5698dd696b1ffe3f759faf", "filename": "gcc/testsuite/gcc.target/i386/pr56766-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56766-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56766-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56766-1.c?ref=5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/56766 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+typedef float v4sf __attribute__((vector_size(16)));\n+typedef int v4si __attribute__((vector_size(16)));\n+v4sf foo_v4sf (v4sf x, v4sf y)\n+{\n+  v4sf tem0 = x - y;\n+  v4sf tem1 = x + y;\n+  return __builtin_shuffle (tem0, tem1, (v4si) { 0, 5, 2, 7 });\n+}\n+\n+typedef float v8sf __attribute__((vector_size(32)));\n+typedef int v8si __attribute__((vector_size(32)));\n+v8sf foo_v8sf (v8sf x, v8sf y)\n+{\n+  v8sf tem0 = x - y;\n+  v8sf tem1 = x + y;\n+  return __builtin_shuffle (tem0, tem1, (v8si) { 0, 9, 2, 11, 4, 13, 6, 15 });\n+}\n+\n+typedef double v2df __attribute__((vector_size(16)));\n+typedef long long v2di __attribute__((vector_size(16)));\n+v2df foo_v2df (v2df x, v2df y)\n+{\n+  v2df tem0 = x - y;\n+  v2df tem1 = x + y;\n+  return __builtin_shuffle (tem0, tem1, (v2di) { 0, 3 });\n+}\n+\n+typedef double v4df __attribute__((vector_size(32)));\n+typedef long long v4di __attribute__((vector_size(32)));\n+v4df foo_v4df (v4df x, v4df y)\n+{\n+  v4df tem0 = x - y;\n+  v4df tem1 = x + y;\n+  return __builtin_shuffle (tem0, tem1, (v4di) { 0, 5, 2, 7 });\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddsubps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddsubpd\" 2 } } */"}, {"sha": "fa3a706caebad984da5b946e421b2c2317e6836f", "filename": "gcc/testsuite/gcc.target/i386/pr56766-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56766-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56766-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56766-2.c?ref=5fd816e6509bdd5fcf9f347a8e2e9830c4e3defe", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/56766 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model -mavx\" } */\n+\n+void test_v4sf (float * __restrict__ p, float * __restrict q)\n+{\n+  p[0] = p[0] - q[0];\n+  p[1] = p[1] + q[1];\n+  p[2] = p[2] - q[2];\n+  p[3] = p[3] + q[3];\n+}\n+\n+void test_v8sf (float * __restrict__ p, float * __restrict q)\n+{\n+  p[0] = p[0] - q[0];\n+  p[1] = p[1] + q[1];\n+  p[2] = p[2] - q[2];\n+  p[3] = p[3] + q[3];\n+  p[4] = p[4] - q[4];\n+  p[5] = p[5] + q[5];\n+  p[6] = p[6] - q[6];\n+  p[7] = p[7] + q[7];\n+}\n+\n+void test_v2df (double * __restrict__ p, double * __restrict q)\n+{\n+  p[0] = p[0] - q[0];\n+  p[1] = p[1] + q[1];\n+}\n+\n+void test_v4df (double * __restrict__ p, double * __restrict q)\n+{\n+  p[0] = p[0] - q[0];\n+  p[1] = p[1] + q[1];\n+  p[2] = p[2] - q[2];\n+  p[3] = p[3] + q[3];\n+}\n+\n+/* { dg-final { scan-assembler-times \"vaddsubps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vaddsubpd\" 2 } } */"}]}