{"sha": "0b59f49d59928689e9816c89d3b02765f9ac49ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI1OWY0OWQ1OTkyODY4OWU5ODE2Yzg5ZDNiMDI3NjVmOWFjNDliYQ==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-02-05T22:59:35Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-02-05T22:59:35Z"}, "message": "dfp.c (decimal_real_arithmetic): Change second argument type from int to enum tree_code.\n\n\t* dfp.c (decimal_real_arithmetic): Change second argument type\n\tfrom int to enum tree_code. Do not always return true, but now\n\treturn result of any call to decimal_do helper functions.\n\t* dfp.h (decimal_real_arithmetic): Update prototype.\n\nFrom-SVN: r110626", "tree": {"sha": "c3b9af79340ab1e3ba155a442af7121b99af6cb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3b9af79340ab1e3ba155a442af7121b99af6cb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b59f49d59928689e9816c89d3b02765f9ac49ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b59f49d59928689e9816c89d3b02765f9ac49ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b59f49d59928689e9816c89d3b02765f9ac49ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b59f49d59928689e9816c89d3b02765f9ac49ba/comments", "author": null, "committer": null, "parents": [{"sha": "3ded621059e0edd541e3b5b921d8e499d7e668f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ded621059e0edd541e3b5b921d8e499d7e668f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ded621059e0edd541e3b5b921d8e499d7e668f5"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "4dce3b3b483dea02744e6cc2fbe292f6c854395a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b59f49d59928689e9816c89d3b02765f9ac49ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b59f49d59928689e9816c89d3b02765f9ac49ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b59f49d59928689e9816c89d3b02765f9ac49ba", "patch": "@@ -1,3 +1,10 @@\n+2006-02-04  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* dfp.c (decimal_real_arithmetic): Change second argument type\n+\tfrom int to enum tree_code. Do not always return true, but now\n+\treturn result of any call to decimal_do helper functions.\n+\t* dfp.h (decimal_real_arithmetic): Update prototype.\n+\n 2006-02-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sol2-bi.h (SPARC_DEFAULT_CMODEL): Set to CM_MEDMID.\n@@ -934,11 +941,11 @@\n \n \tPR ada/25900\n \t* tree-vrp.c (extract_range_from_assert): When merging a VR_RANGE\n-\twith a VR_ANTI_RANGE and the VR_ANTI_RANGEis completely contained\n+\twith a VR_ANTI_RANGE and the VR_ANTI_RANGE is completely contained\n \twithin the VR_RANGE, use the VR_RANGE as the result, not the\n \tVR_ANTI_RANGE.\n-\t(adjust_range_with_scev): Reject ranges from SCEV which are out\n-\tof bounds for the type.\n+\t(adjust_range_with_scev): Reject ranges from SCEV which are out of\n+\tbounds for the type.\n \n 2006-01-26  Daniel Berlin  <dberlin@dberlin.org>\n "}, {"sha": "5072264cb509053578b25ce74383eb0180f9ed9a", "filename": "gcc/dfp.c", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b59f49d59928689e9816c89d3b02765f9ac49ba/gcc%2Fdfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b59f49d59928689e9816c89d3b02765f9ac49ba/gcc%2Fdfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdfp.c?ref=0b59f49d59928689e9816c89d3b02765f9ac49ba", "patch": "@@ -1,5 +1,5 @@\n /* Decimal floating point support.\n-   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -597,49 +597,42 @@ decimal_real_to_integer2 (HOST_WIDE_INT *plow, HOST_WIDE_INT *phigh,\n   real_to_integer2 (plow, phigh, &to);\n }\n \n-/* Perform the decimal floating point operation described by COODE.\n-   For a unary operation, leave OP1 NULL.  This function returns true\n-   if the result may be inexact due to loss of precision.  */\n+/* Perform the decimal floating point operation described by CODE.\n+   For a unary operation, OP1 will be NULL.  This function returns\n+   true if the result may be inexact due to loss of precision.  */\n \n bool\n-decimal_real_arithmetic (REAL_VALUE_TYPE *r, int icode,\n+decimal_real_arithmetic (REAL_VALUE_TYPE *r, enum tree_code code,\n \t\t\t const REAL_VALUE_TYPE *op0,\n \t\t\t const REAL_VALUE_TYPE *op1)\n {\n-  enum tree_code code = icode;\n-  REAL_VALUE_TYPE a1;\n-  REAL_VALUE_TYPE b1;\n+  REAL_VALUE_TYPE a, b;\n \n-  /* If either op is not a decimal, create a temporary decimal\n-     versions.  */\n+  /* If either operand is non-decimal, create temporaries.  */\n   if (!op0->decimal)\n     {\n-      decimal_from_binary (&a1, op0);\n-      op0 = &a1;\n+      decimal_from_binary (&a, op0);\n+      op0 = &a;\n     }\n   if (op1 && !op1->decimal)\n     {\n-      decimal_from_binary (&b1, op1);\n-      op1 = &b1;\n+      decimal_from_binary (&b, op1);\n+      op1 = &b;\n     }\n \n   switch (code)\n     {\n     case PLUS_EXPR:\n-      (void) decimal_do_add (r, op0, op1, 0);\n-      break;\n+      return decimal_do_add (r, op0, op1, 0);\n \n     case MINUS_EXPR:\n-      (void) decimal_do_add (r, op0, op1, 1);\n-      break;\n+      return decimal_do_add (r, op0, op1, 1);\n \n     case MULT_EXPR:\n-      (void) decimal_do_multiply (r, op0, op1);\n-      break;\n+      return decimal_do_multiply (r, op0, op1);\n \n     case RDIV_EXPR:\n-      (void) decimal_do_divide (r, op0, op1);\n-      break;\n+      return decimal_do_divide (r, op0, op1);\n \n     case MIN_EXPR:\n       if (op1->cl == rvc_nan)\n@@ -648,7 +641,7 @@ decimal_real_arithmetic (REAL_VALUE_TYPE *r, int icode,\n         *r = *op0;\n       else\n         *r = *op1;\n-      break;\n+      return false;\n \n     case MAX_EXPR:\n       if (op1->cl == rvc_nan)\n@@ -657,7 +650,7 @@ decimal_real_arithmetic (REAL_VALUE_TYPE *r, int icode,\n         *r = *op1;\n       else\n         *r = *op0;\n-      break;\n+      return false;\n \n     case NEGATE_EXPR:\n       {\n@@ -669,7 +662,7 @@ decimal_real_arithmetic (REAL_VALUE_TYPE *r, int icode,\n \t/* Keep sign field in sync.  */\n \tr->sign ^= 1;\n       }\n-      break;\n+      return false;\n \n     case ABS_EXPR:\n       {\n@@ -681,19 +674,15 @@ decimal_real_arithmetic (REAL_VALUE_TYPE *r, int icode,\n \t/* Keep sign field in sync.  */\n \tr->sign = 0;\n       }\n-      break;\n+      return false;\n \n     case FIX_TRUNC_EXPR:\n       decimal_do_fix_trunc (r, op0);\n-      break;\n+      return false;\n \n     default:\n       gcc_unreachable ();\n     }\n-\n-  /* FIXME: Indicate all operations as inexact for now due to unknown\n-     working precision.  */\n-  return true;\n }\n \n /* Fills R with the largest finite value representable in mode MODE."}, {"sha": "fd28d40816d932fc8e0be78af9a486b1098e9102", "filename": "gcc/dfp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b59f49d59928689e9816c89d3b02765f9ac49ba/gcc%2Fdfp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b59f49d59928689e9816c89d3b02765f9ac49ba/gcc%2Fdfp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdfp.h?ref=0b59f49d59928689e9816c89d3b02765f9ac49ba", "patch": "@@ -1,5 +1,5 @@\n /* Decimal floating point support functions for GNU compiler.\n-   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -38,7 +38,7 @@ void decimal_round_for_format (const struct real_format *, REAL_VALUE_TYPE *);\n void decimal_real_convert (REAL_VALUE_TYPE *, enum machine_mode, const REAL_VALUE_TYPE *);\n void decimal_real_to_decimal (char *, const REAL_VALUE_TYPE *, size_t, size_t, int);\n void decimal_do_fix_trunc (REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n-bool decimal_real_arithmetic (REAL_VALUE_TYPE *, int, const REAL_VALUE_TYPE *,\n+bool decimal_real_arithmetic (REAL_VALUE_TYPE *, enum tree_code, const REAL_VALUE_TYPE *,\n \t\t\t      const REAL_VALUE_TYPE *);\n void decimal_real_maxval (REAL_VALUE_TYPE *, int, enum machine_mode);\n void decimal_real_to_integer2 (HOST_WIDE_INT *, HOST_WIDE_INT *, const REAL_VALUE_TYPE *);"}]}