{"sha": "cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NjYjc2MWJjMjlkNGMzMmEyNGM3OWQ2OGVmOWFjNzYzMDhkNTRmYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:49:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:49:24Z"}, "message": "[multiple changes]\n\n2017-04-25  Pascal Obry  <obry@adacore.com>\n\n\t* g-sercom.ads: Add simple usage of GNAT.Serial_Communication.\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Resolve_Type_Conversion):\n\tWhen resolving against any fixed type, set the type of the\n\toperand as universal real when the operand is a multiplication\n\tor a division where both operands are of any fixed type.\n\t(Unique_Fixed_Point_Type): Add local variable ErrN. Improve the\n\tplacement of an error message by pointing to the operand of a\n\ttype conversion rather than the conversion itself.\n\n2017-04-25  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch13.adb (Build_Predicate_Function_Declaration): Set\n\tNeeds_Debug_Info when producing SCOs.\n\n2017-04-25  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch6.adb (Add_Finalization_Master_Actual_To_Build_In_Place_Call):\n\tAlways pass a null finalization master for a library level named access\n\ttype to which a pragme No_Heap_Finalization applies.\n\nFrom-SVN: r247216", "tree": {"sha": "073ce133334332707c1a88c967b562f9cbf9bbd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/073ce133334332707c1a88c967b562f9cbf9bbd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/comments", "author": null, "committer": null, "parents": [{"sha": "6a3936d48b36c09a5f7654ae2bc3a62d688bd414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3936d48b36c09a5f7654ae2bc3a62d688bd414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a3936d48b36c09a5f7654ae2bc3a62d688bd414"}], "stats": {"total": 133, "additions": 118, "deletions": 15}, "files": [{"sha": "7f7a28a40575457392c04e617789a4579645b3b5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "patch": "@@ -1,3 +1,28 @@\n+2017-04-25  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-sercom.ads: Add simple usage of GNAT.Serial_Communication.\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Type_Conversion):\n+\tWhen resolving against any fixed type, set the type of the\n+\toperand as universal real when the operand is a multiplication\n+\tor a division where both operands are of any fixed type.\n+\t(Unique_Fixed_Point_Type): Add local variable ErrN. Improve the\n+\tplacement of an error message by pointing to the operand of a\n+\ttype conversion rather than the conversion itself.\n+\n+2017-04-25  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Predicate_Function_Declaration): Set\n+\tNeeds_Debug_Info when producing SCOs.\n+\n+2017-04-25  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch6.adb (Add_Finalization_Master_Actual_To_Build_In_Place_Call):\n+\tAlways pass a null finalization master for a library level named access\n+\ttype to which a pragme No_Heap_Finalization applies.\n+\n 2017-04-25  Arnaud Charlet  <charlet@adacore.com trojanek>\n \n \tPR ada/78845"}, {"sha": "24de185bf9b83fa719f964d3d99e3dc1cd939d20", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "patch": "@@ -414,7 +414,8 @@ package body Exp_Ch6 is\n             --  master.\n \n             if Is_Library_Level_Entity (Ptr_Typ)\n-              and then Finalize_Storage_Only (Desig_Typ)\n+              and then (Finalize_Storage_Only (Desig_Typ)\n+                          or else No_Heap_Finalization (Ptr_Typ))\n             then\n                Actual := Make_Null (Loc);\n "}, {"sha": "f185a7737df123f6026e03887d015dddb14abd5d", "filename": "gcc/ada/g-sercom.ads", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2Fg-sercom.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2Fg-sercom.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sercom.ads?ref=cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                    Copyright (C) 2007-2015, AdaCore                      --\n+--                    Copyright (C) 2007-2016, AdaCore                      --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,6 +36,56 @@ with Interfaces.C;\n \n package GNAT.Serial_Communications is\n \n+   --  Following is a simple example of using GNAT.Serial_Communications.\n+   --\n+   --  with Ada.Streams;\n+   --  with GNAT.Serial_Communications;\n+   --\n+   --  procedure Serial is\n+   --     use Ada.Streams;\n+   --     use GNAT;\n+   --\n+   --     subtype Message is Stream_Element_Array (1 .. 20);\n+   --\n+   --     Data   : constant String (1 .. 20)  := \"ABCDEFGHIJLKMNOPQRST\";\n+   --     Buffer : Message;\n+   --\n+   --     S_Port : constant Natural := 5;\n+   --     --  Serial port number\n+   --\n+   --  begin\n+   --     --  Convert message (String -> Stream_Element_Array)\n+   --\n+   --     for K in Data'Range loop\n+   --        Buffer (Stream_Element_Offset (K)) := Character'Pos (Data (K));\n+   --     end loop;\n+   --\n+   --     declare\n+   --        Port_Name : constant Serial_Communications.Port_Name :=\n+   --                      Serial_Communications.Name (Number => S_Port);\n+   --        Port      : Serial_Communications.Serial_Port;\n+   --\n+   --     begin\n+   --        Serial_Communications.Open\n+   --          (Port => Port,\n+   --           Name => Port_Name);\n+   --\n+   --        Serial_Communications.Set\n+   --          (Port      => Port,\n+   --           Rate      => Serial_Communications.B9600,\n+   --           Bits      => Serial_Communications.CS8,\n+   --           Stop_Bits => Serial_Communications.One,\n+   --           Parity    => Serial_Communications.Even);\n+   --\n+   --        Serial_Communications.Write\n+   --          (Port   => Port,\n+   --           Buffer => Buffer);\n+   --\n+   --        Serial_Communications.Close\n+   --          (Port => Port);\n+   --     end;\n+   --  end Serial;\n+\n    Serial_Error : exception;\n    --  Raised when a communication problem occurs\n "}, {"sha": "38e8279aad5ede544eb7e1c1d53ec0918a6eacc0", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "patch": "@@ -8908,6 +8908,13 @@ package body Sem_Ch13 is\n         Make_Defining_Identifier (Loc,\n           Chars => New_External_Name (Chars (Typ), \"Predicate\"));\n \n+      --  The predicate function requires debug info when the predicates are\n+      --  subject to Source Coverage Obligations.\n+\n+      if Opt.Generate_SCO then\n+         Set_Debug_Info_Needed (Func_Id);\n+      end if;\n+\n       Spec :=\n         Make_Function_Specification (Loc,\n           Defining_Unit_Name       => Func_Id,"}, {"sha": "2a8010dad408d0e3f3a2d9fc6015dc8621953f7a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cccb761bc29d4c32a24c79d68ef9ac76308d54fc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=cccb761bc29d4c32a24c79d68ef9ac76308d54fc", "patch": "@@ -10711,7 +10711,15 @@ package body Sem_Res is\n          --  Mixed-mode operation involving a literal. Context must be a fixed\n          --  type which is applied to the literal subsequently.\n \n-         if Is_Fixed_Point_Type (Typ) then\n+         --  Multiplication and division involving two fixed type operands must\n+         --  yield a universal real because the result is computed in arbitrary\n+         --  precision.\n+\n+         if Is_Fixed_Point_Type (Typ)\n+           and then Nkind_In (Operand, N_Op_Divide, N_Op_Multiply)\n+           and then Etype (Left_Opnd  (Operand)) = Any_Fixed\n+           and then Etype (Right_Opnd (Operand)) = Any_Fixed\n+         then\n             Set_Etype (Operand, Universal_Real);\n \n          elsif Is_Numeric_Type (Typ)\n@@ -11722,26 +11730,29 @@ package body Sem_Res is\n    -----------------------------\n \n    function Unique_Fixed_Point_Type (N : Node_Id) return Entity_Id is\n-      T1   : Entity_Id := Empty;\n-      T2   : Entity_Id;\n-      Item : Node_Id;\n-      Scop : Entity_Id;\n-\n-      procedure Fixed_Point_Error;\n+      procedure Fixed_Point_Error (T1 : Entity_Id; T2 : Entity_Id);\n       --  Give error messages for true ambiguity. Messages are posted on node\n       --  N, and entities T1, T2 are the possible interpretations.\n \n       -----------------------\n       -- Fixed_Point_Error --\n       -----------------------\n \n-      procedure Fixed_Point_Error is\n+      procedure Fixed_Point_Error (T1 : Entity_Id; T2 : Entity_Id) is\n       begin\n          Error_Msg_N (\"ambiguous universal_fixed_expression\", N);\n          Error_Msg_NE (\"\\\\possible interpretation as}\", N, T1);\n          Error_Msg_NE (\"\\\\possible interpretation as}\", N, T2);\n       end Fixed_Point_Error;\n \n+      --  Local variables\n+\n+      ErrN : Node_Id;\n+      Item : Node_Id;\n+      Scop : Entity_Id;\n+      T1   : Entity_Id;\n+      T2   : Entity_Id;\n+\n    --  Start of processing for Unique_Fixed_Point_Type\n \n    begin\n@@ -11761,7 +11772,7 @@ package body Sem_Res is\n               and then Scope (Base_Type (T2)) = Scop\n             then\n                if Present (T1) then\n-                  Fixed_Point_Error;\n+                  Fixed_Point_Error (T1, T2);\n                   return Any_Type;\n                else\n                   T1 := T2;\n@@ -11787,7 +11798,7 @@ package body Sem_Res is\n                  and then (Is_Potentially_Use_Visible (T2) or else In_Use (T2))\n                then\n                   if Present (T1) then\n-                     Fixed_Point_Error;\n+                     Fixed_Point_Error (T1, T2);\n                      return Any_Type;\n                   else\n                      T1 := T2;\n@@ -11802,11 +11813,20 @@ package body Sem_Res is\n       end loop;\n \n       if Nkind (N) = N_Real_Literal then\n-         Error_Msg_NE\n-           (\"??real literal interpreted as }!\", N, T1);\n+         Error_Msg_NE (\"??real literal interpreted as }!\", N, T1);\n+\n       else\n+         --  When the context is a type conversion, issue the warning on the\n+         --  expression of the conversion because it is the actual operation.\n+\n+         if Nkind_In (N, N_Type_Conversion, N_Unchecked_Type_Conversion) then\n+            ErrN := Expression (N);\n+         else\n+            ErrN := N;\n+         end if;\n+\n          Error_Msg_NE\n-           (\"??universal_fixed expression interpreted as }!\", N, T1);\n+           (\"??universal_fixed expression interpreted as }!\", ErrN, T1);\n       end if;\n \n       return T1;"}]}