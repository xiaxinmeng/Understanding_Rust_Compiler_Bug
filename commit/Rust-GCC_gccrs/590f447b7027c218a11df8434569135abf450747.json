{"sha": "590f447b7027c218a11df8434569135abf450747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwZjQ0N2I3MDI3YzIxOGExMWRmODQzNDU2OTEzNWFiZjQ1MDc0Nw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-12-15T07:13:19Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-12-15T07:13:19Z"}, "message": "[RS6000] Use gen_hard_reg_clobber in rs6000.c\n\nI noticed when looking at PR88311 that rs6000_call_sysv should be\nusing gen_hard_reg_clobber (as the sysv call insns did prior to\nintroducing rs6000_call_sysv).  This patch fixes that minor\nregression, and other like places in rs6000.c.\n\n\t* config/rs6000/rs6000.c (generate_set_vrsave, rs6000_emit_savres_rtx),\n\t(rs6000_emit_prologue, rs6000_call_aix, rs6000_call_sysv),\n\t(rs6000_call_darwin_1): Use gen_hard_reg_clobber.\n\nFrom-SVN: r267164", "tree": {"sha": "3c22de8d076eb674eadc0b19ac0367c00fc5ca1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c22de8d076eb674eadc0b19ac0367c00fc5ca1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/590f447b7027c218a11df8434569135abf450747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590f447b7027c218a11df8434569135abf450747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/590f447b7027c218a11df8434569135abf450747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590f447b7027c218a11df8434569135abf450747/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e29ebb81f2d4a9d083af40125f985557201d8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e29ebb81f2d4a9d083af40125f985557201d8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e29ebb81f2d4a9d083af40125f985557201d8da"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "8e3fb57dbd4b98e134f1ab14d8c89b4bf6b1ecf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590f447b7027c218a11df8434569135abf450747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590f447b7027c218a11df8434569135abf450747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=590f447b7027c218a11df8434569135abf450747", "patch": "@@ -1,3 +1,9 @@\n+2018-12-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (generate_set_vrsave, rs6000_emit_savres_rtx),\n+\t(rs6000_emit_prologue, rs6000_call_aix, rs6000_call_sysv),\n+\t(rs6000_call_darwin_1): Use gen_hard_reg_clobber.\n+\n 2018-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/88489"}, {"sha": "f327c27307776ca2f6332945d4efefbfc197fb3f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590f447b7027c218a11df8434569135abf450747/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590f447b7027c218a11df8434569135abf450747/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=590f447b7027c218a11df8434569135abf450747", "patch": "@@ -25952,8 +25952,7 @@ generate_set_vrsave (rtx reg, rs6000_stack_t *info, int epiloguep)\n     if (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n       {\n \tif (!epiloguep || call_used_regs [i])\n-\t  clobs[nclobs++] = gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\t     gen_rtx_REG (V4SImode, i));\n+\t  clobs[nclobs++] = gen_hard_reg_clobber (V4SImode, i);\n \telse\n \t  {\n \t    rtx reg = gen_rtx_REG (V4SImode, i);\n@@ -26277,8 +26276,7 @@ rs6000_emit_savres_rtx (rs6000_stack_t *info,\n   if (!(sel & SAVRES_SAVE) && (sel & SAVRES_LR))\n     RTVEC_ELT (p, offset++) = ret_rtx;\n \n-  RTVEC_ELT (p, offset++)\n-    = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNO));\n+  RTVEC_ELT (p, offset++) = gen_hard_reg_clobber (Pmode, LR_REGNO);\n \n   sym = rs6000_savres_routine_sym (info, sel);\n   RTVEC_ELT (p, offset++) = gen_rtx_USE (VOIDmode, sym);\n@@ -26287,8 +26285,7 @@ rs6000_emit_savres_rtx (rs6000_stack_t *info,\n   if ((sel & SAVRES_REG) == SAVRES_VR)\n     {\n       /* Vector regs are saved/restored using [reg+reg] addressing.  */\n-      RTVEC_ELT (p, offset++)\n-\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, use_reg));\n+      RTVEC_ELT (p, offset++) = gen_hard_reg_clobber (Pmode, use_reg);\n       RTVEC_ELT (p, offset++)\n \t= gen_rtx_USE (VOIDmode, gen_rtx_REG (Pmode, 0));\n     }\n@@ -26966,9 +26963,7 @@ rs6000_emit_prologue (void)\n       sz += LAST_ALTIVEC_REGNO - info->first_altivec_reg_save + 1;\n       p = rtvec_alloc (sz);\n       j = 0;\n-      RTVEC_ELT (p, j++) = gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\t    gen_rtx_REG (SImode,\n-\t\t\t\t\t\t\t LR_REGNO));\n+      RTVEC_ELT (p, j++) = gen_hard_reg_clobber (SImode, LR_REGNO);\n       RTVEC_ELT (p, j++) = gen_rtx_USE (VOIDmode,\n \t\t\t\t\tgen_rtx_SYMBOL_REF (Pmode,\n \t\t\t\t\t\t\t    \"*save_world\"));\n@@ -28131,8 +28126,7 @@ rs6000_emit_epilogue (int sibcall)\n \t= gen_rtx_USE (VOIDmode, gen_rtx_SYMBOL_REF (Pmode, alloc_rname));\n       /* The instruction pattern requires a clobber here;\n \t it is shared with the restVEC helper. */\n-      RTVEC_ELT (p, j++)\n-\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 11));\n+      RTVEC_ELT (p, j++) = gen_hard_reg_clobber (Pmode, 11);\n \n       {\n \t/* CR register traditionally saved as CR2.  */\n@@ -28178,14 +28172,10 @@ rs6000_emit_epilogue (int sibcall)\n \t      && save_reg_p (info->first_fp_reg_save + i))\n \t    cfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg, cfa_restores);\n \t}\n-      RTVEC_ELT (p, j++)\n-\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 0));\n-      RTVEC_ELT (p, j++)\n-\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, 12));\n-      RTVEC_ELT (p, j++)\n-\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, 7));\n-      RTVEC_ELT (p, j++)\n-\t= gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, 8));\n+      RTVEC_ELT (p, j++) = gen_hard_reg_clobber (Pmode, 0);\n+      RTVEC_ELT (p, j++) = gen_hard_reg_clobber (SImode, 12);\n+      RTVEC_ELT (p, j++) = gen_hard_reg_clobber (SImode, 7);\n+      RTVEC_ELT (p, j++) = gen_hard_reg_clobber (SImode, 8);\n       RTVEC_ELT (p, j++)\n \t= gen_rtx_USE (VOIDmode, gen_rtx_REG (SImode, 10));\n       insn = emit_jump_insn (gen_rtx_PARALLEL (VOIDmode, p));\n@@ -28833,8 +28823,7 @@ rs6000_emit_epilogue (int sibcall)\n       int elt = 0;\n       RTVEC_ELT (p, elt++) = ret_rtx;\n       if (lr)\n-\tRTVEC_ELT (p, elt++)\n-\t  = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNO));\n+\tRTVEC_ELT (p, elt++) = gen_hard_reg_clobber (Pmode, LR_REGNO);\n \n       /* We have to restore more than two FP registers, so branch to the\n \t restore function.  It will return to our caller.  */\n@@ -37884,7 +37873,7 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n   if (toc_restore)\n     call[n_call++] = toc_restore;\n \n-  call[n_call++] = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNO));\n+  call[n_call++] = gen_hard_reg_clobber (Pmode, LR_REGNO);\n \n   insn = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (n_call, call));\n   insn = emit_call_insn (insn);\n@@ -37979,7 +37968,7 @@ rs6000_call_sysv (rtx value, rtx func_desc, rtx tlsarg, rtx cookie)\n     call[0] = gen_rtx_SET (value, call[0]);\n \n   call[1] = gen_rtx_USE (VOIDmode, cookie);\n-  call[2] = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNO));\n+  call[2] = gen_hard_reg_clobber (Pmode, LR_REGNO);\n \n   insn = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (3, call));\n   insn = emit_call_insn (insn);\n@@ -38117,7 +38106,7 @@ rs6000_call_darwin_1 (rtx value, rtx func_desc, rtx tlsarg,\n   if (sibcall)\n     call[2] = simple_return_rtx;\n   else\n-    call[2] = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, LR_REGNO));\n+    call[2] = gen_hard_reg_clobber (Pmode, LR_REGNO);\n \n   insn = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (3, call));\n   insn = emit_call_insn (insn);"}]}