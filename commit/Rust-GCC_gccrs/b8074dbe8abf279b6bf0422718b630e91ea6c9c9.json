{"sha": "b8074dbe8abf279b6bf0422718b630e91ea6c9c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgwNzRkYmU4YWJmMjc5YjZiZjA0MjI3MThiNjMwZTkxZWE2YzljOQ==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2002-08-30T18:31:44Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2002-08-30T18:31:44Z"}, "message": "ip2k.c (ip2k_set_compare): Remove all const_double stuff.\n\n\t* config/ip2k/ip2k.c (ip2k_set_compare): Remove all const_double\n\tstuff.\n\t(ip2k_gen_unsigned_comp_branch): Handle CONST_INT and\n\tCONST_DOUBLE constants.\n\nFrom-SVN: r56686", "tree": {"sha": "4e5b1112bef7169f43ebbbded60df85e95df9d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e5b1112bef7169f43ebbbded60df85e95df9d30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8074dbe8abf279b6bf0422718b630e91ea6c9c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8074dbe8abf279b6bf0422718b630e91ea6c9c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8074dbe8abf279b6bf0422718b630e91ea6c9c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8074dbe8abf279b6bf0422718b630e91ea6c9c9/comments", "author": null, "committer": null, "parents": [{"sha": "4c322bff290ba4cf86aefa934a8c26acd3350aae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c322bff290ba4cf86aefa934a8c26acd3350aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c322bff290ba4cf86aefa934a8c26acd3350aae"}], "stats": {"total": 184, "additions": 101, "deletions": 83}, "files": [{"sha": "127e9be04456e34a0fac5dd2438ee4bd18d16bed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8074dbe8abf279b6bf0422718b630e91ea6c9c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8074dbe8abf279b6bf0422718b630e91ea6c9c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8074dbe8abf279b6bf0422718b630e91ea6c9c9", "patch": "@@ -1,3 +1,10 @@\n+2002-08-30  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/ip2k/ip2k.c (ip2k_set_compare): Remove all const_double\n+\tstuff.\n+\t(ip2k_gen_unsigned_comp_branch): Handle CONST_INT and\n+\tCONST_DOUBLE constants.\n+\t\n 2002-08-30  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config/alpha/alpha.h (TARGET_CPU_CPP_BUILTINS): Move language-"}, {"sha": "bcbed3f08d86d2ae2d4adcba7ad344cc7bd6cef9", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 94, "deletions": 83, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8074dbe8abf279b6bf0422718b630e91ea6c9c9/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8074dbe8abf279b6bf0422718b630e91ea6c9c9/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=b8074dbe8abf279b6bf0422718b630e91ea6c9c9", "patch": "@@ -1075,25 +1075,6 @@ ip2k_set_compare (x, y)\n      rtx x;\n      rtx y;\n {\n-  /* If we're doing a DImode compare then force any CONST_INT second\n-     operand to be CONST_DOUBLE.  */\n-  if (GET_MODE (x) == DImode && GET_CODE (y) == CONST_INT)\n-    {\n-      rtx value;\n-      size_t i;\n-\n-      value = rtx_alloc (CONST_DOUBLE);\n-      PUT_MODE (value, VOIDmode);\n-\n-      CONST_DOUBLE_LOW (value) = INTVAL (y);\n-      CONST_DOUBLE_HIGH (value) = INTVAL (y) > 0 ? 0 : -1;\n-\n-      for (i = 2; i < (sizeof CONST_DOUBLE_FORMAT - 1); i++)\n-\tXWINT (value, i) = 0;\n-      \n-      y = value;\n-    }\n-  \n   ip2k_compare_operands[0] = x;\n   ip2k_compare_operands[1] = y;\n   return \"\";\n@@ -1675,6 +1656,8 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n   int imm_cmp = 0;\n   int can_use_skip = 0;\n   rtx ninsn;\n+  HOST_WIDE_INT const_low;\n+  HOST_WIDE_INT const_high;\n \n   operands[2] = label;\n \n@@ -2332,10 +2315,10 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \t    {\n \t      if (INTVAL (operands[0]) == 0)\n \t\t{\n-                  OUT_AS2 (mov, w, %A0);\n-                  OUT_AS2 (or, w, %B0);\n-                  OUT_AS2 (or, w, %C0);\n-                  OUT_AS2 (or, w, %D0);\n+                  OUT_AS2 (mov, w, %A1);\n+                  OUT_AS2 (or, w, %B1);\n+                  OUT_AS2 (or, w, %C1);\n+                  OUT_AS2 (or, w, %D1);\n \t\t  OUT_AS1 (snz,);\n \t          OUT_AS1 (page, %2);\n \t          OUT_AS1 (jmp, %2);\n@@ -2377,10 +2360,10 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \t    {\n \t      if (INTVAL (operands[0]) == 0)\n \t        {\n-                  OUT_AS2 (mov, w, %A0);\n-                  OUT_AS2 (or, w, %B0);\n-                  OUT_AS2 (or, w, %C0);\n-                  OUT_AS2 (or, w, %D0);\n+                  OUT_AS2 (mov, w, %A1);\n+                  OUT_AS2 (or, w, %B1);\n+                  OUT_AS2 (or, w, %C1);\n+                  OUT_AS2 (or, w, %D1);\n \t\t  OUT_AS1 (sz,);\n \t          OUT_AS1 (page, %2);\n \t          OUT_AS1 (jmp, %2);\n@@ -2465,6 +2448,16 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n       break;\n \n     case DImode:\n+      if (GET_CODE (operands[1]) == CONST_INT)\n+\t{\n+\t  const_low = INTVAL (operands[1]);\n+\t  const_high = (const_low >= 0) - 1;\n+\t}\n+      else if (GET_CODE (operands[1]) == CONST_DOUBLE)\n+\t{\n+\t  const_low = CONST_DOUBLE_LOW (operands[1]);\n+\t  const_high = CONST_DOUBLE_HIGH (operands[1]);\n+\t}\n       switch (code)\n         {\n \tcase EQ:\n@@ -2519,14 +2512,14 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \t      {\n \t\tif (imm_cmp)\n \t\t  {\n-\t\t    s = (CONST_DOUBLE_HIGH (operands[1]) >> 24) & 0xff;\n-\t\t    t = (CONST_DOUBLE_HIGH (operands[1]) >> 16) & 0xff;\n-\t\t    u = (CONST_DOUBLE_HIGH (operands[1]) >> 8) & 0xff;\n-\t\t    v = CONST_DOUBLE_HIGH (operands[1]) & 0xff;\n-\t\t    w = (CONST_DOUBLE_LOW (operands[1]) >> 24) & 0xff;\n-\t\t    x = (CONST_DOUBLE_LOW (operands[1]) >> 16) & 0xff;\n-\t\t    y = (CONST_DOUBLE_LOW (operands[1]) >> 8) & 0xff;\n-\t\t    z = CONST_DOUBLE_LOW (operands[1]) & 0xff;\n+\t\t    s = (const_high >> 24) & 0xff;\n+\t\t    t = (const_high >> 16) & 0xff;\n+\t\t    u = (const_high >> 8) & 0xff;\n+\t\t    v = const_high & 0xff;\n+\t\t    w = (const_low >> 24) & 0xff;\n+\t\t    x = (const_low >> 16) & 0xff;\n+\t\t    y = (const_low >> 8) & 0xff;\n+\t\t    z = const_low & 0xff;\n \t\t  }\n \n \t\tOUT_AS2 (mov, w, %S1);\n@@ -2648,14 +2641,14 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \t      {\n \t\tif (imm_cmp)\n \t\t  {\n-\t\t    s = (CONST_DOUBLE_HIGH (operands[1]) >> 24) & 0xff;\n-\t\t    t = (CONST_DOUBLE_HIGH (operands[1]) >> 16) & 0xff;\n-\t\t    u = (CONST_DOUBLE_HIGH (operands[1]) >> 8) & 0xff;\n-\t\t    v = CONST_DOUBLE_HIGH (operands[1]) & 0xff;\n-\t\t    w = (CONST_DOUBLE_LOW (operands[1]) >> 24) & 0xff;\n-\t\t    x = (CONST_DOUBLE_LOW (operands[1]) >> 16) & 0xff;\n-\t\t    y = (CONST_DOUBLE_LOW (operands[1]) >> 8) & 0xff;\n-\t\t    z = CONST_DOUBLE_LOW (operands[1]) & 0xff;\n+\t\t    s = (const_high >> 24) & 0xff;\n+\t\t    t = (const_high >> 16) & 0xff;\n+\t\t    u = (const_high >> 8) & 0xff;\n+\t\t    v = const_high & 0xff;\n+\t\t    w = (const_low >> 24) & 0xff;\n+\t\t    x = (const_low >> 16) & 0xff;\n+\t\t    y = (const_low >> 8) & 0xff;\n+\t\t    z = const_low & 0xff;\n \t\t  }\n \n \t\tOUT_AS2 (mov, w, %S1);\n@@ -2734,13 +2727,11 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \t  if (imm_sub)\n \t    {\n \t      /* > 0xffffffffffffffff never suceeds!  */\n-\t      if (((CONST_DOUBLE_HIGH (operands[1]) & 0xffffffff)\n-\t\t   != 0xffffffff)\n-\t\t  || ((CONST_DOUBLE_LOW (operands[1]) & 0xffffffff)\n-\t\t      != 0xffffffff))\n+\t      if (((const_high & 0xffffffff) != 0xffffffff)\n+\t\t  || ((const_low & 0xffffffff) != 0xffffffff))\n \t\t{\n-\t          operands[3] = GEN_INT (CONST_DOUBLE_LOW (operands[1]) + 1);\n-\t\t  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[1])\n+\t          operands[3] = GEN_INT (const_low + 1);\n+\t\t  operands[4] = GEN_INT (const_high\n \t\t\t\t\t + (INTVAL (operands[3]) ? 0 : 1));\n \t          OUT_AS2 (mov, w, %D3);\n \t          OUT_AS2 (sub, w, %Z0);\n@@ -2790,27 +2781,38 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \tcase GEU:\n \t  if (imm_sub)\n \t    {\n-\t      if ((CONST_DOUBLE_HIGH (operands[0]) == 0)\n-\t\t  && (CONST_DOUBLE_LOW (operands[0]) == 0))\n+\t      HOST_WIDE_INT const_low0;\n+\t      HOST_WIDE_INT const_high0;\n+\t      \n+\t      if (GET_CODE (operands[0]) == CONST_INT)\n \t\t{\n-                  OUT_AS2 (mov, w, %S0);\n-                  OUT_AS2 (or, w, %T0);\n-                  OUT_AS2 (or, w, %U0);\n-                  OUT_AS2 (or, w, %V0);\n-                  OUT_AS2 (or, w, %W0);\n-                  OUT_AS2 (or, w, %X0);\n-                  OUT_AS2 (or, w, %Y0);\n-                  OUT_AS2 (or, w, %Z0);\n+\t\t  const_low0 = INTVAL (operands[0]);\n+\t\t  const_high0 = (const_low >= 0) - 1;\n+\t\t}\n+\t      else if (GET_CODE (operands[0]) == CONST_DOUBLE)\n+\t\t{\n+\t\t  const_low0 = CONST_DOUBLE_LOW (operands[0]);\n+\t\t  const_high0 = CONST_DOUBLE_HIGH (operands[0]);\n+\t\t}\n+\t      \n+\t      if (const_high0 == 0 && const_low0 == 0)\n+\t\t{\n+                  OUT_AS2 (mov, w, %S1);\n+                  OUT_AS2 (or, w, %T1);\n+                  OUT_AS2 (or, w, %U1);\n+                  OUT_AS2 (or, w, %V1);\n+                  OUT_AS2 (or, w, %W1);\n+                  OUT_AS2 (or, w, %X1);\n+                  OUT_AS2 (or, w, %Y1);\n+                  OUT_AS2 (or, w, %Z1);\n \t\t  OUT_AS1 (snz,);\n \t          OUT_AS1 (page, %2);\n \t          OUT_AS1 (jmp, %2);\n \t\t}\n \t      else\n \t        {\n-\t          operands[3] = GEN_INT (CONST_DOUBLE_LOW (operands[0]) - 1);\n-\t\t  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[0])\n-\t\t\t\t\t - (CONST_DOUBLE_LOW (operands[0])\n-\t\t\t\t\t    ? 1 : 0));\n+\t          operands[3] = GEN_INT (const_low0 - 1);\n+\t\t  operands[4] = GEN_INT (const_high0 - (const_low0 ? 1 : 0));\n \t          OUT_AS2 (mov, w, %D3);\n \t          OUT_AS2 (sub, w, %Z1);\n \t          OUT_AS2 (mov, w, %C3);\n@@ -2859,27 +2861,38 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \tcase LTU:\n \t  if (imm_sub)\n \t    {\n-\t      if ((CONST_DOUBLE_HIGH (operands[0]) == 0)\n-\t\t  && (CONST_DOUBLE_LOW (operands[0]) == 0))\n+\t      HOST_WIDE_INT const_low0;\n+\t      HOST_WIDE_INT const_high0;\n+\t      \n+\t      if (GET_CODE (operands[0]) == CONST_INT)\n+\t\t{\n+\t\t  const_low0 = INTVAL (operands[0]);\n+\t\t  const_high0 = (const_low >= 0) - 1;\n+\t\t}\n+\t      else if (GET_CODE (operands[0]) == CONST_DOUBLE)\n+\t\t{\n+\t\t  const_low0 = CONST_DOUBLE_LOW (operands[0]);\n+\t\t  const_high0 = CONST_DOUBLE_HIGH (operands[0]);\n+\t\t}\n+\t      \n+\t      if (const_high0 == 0 && const_low0 == 0)\n \t\t{\n-                  OUT_AS2 (mov, w, %S0);\n-                  OUT_AS2 (or, w, %T0);\n-                  OUT_AS2 (or, w, %U0);\n-                  OUT_AS2 (or, w, %V0);\n-                  OUT_AS2 (or, w, %W0);\n-                  OUT_AS2 (or, w, %X0);\n-                  OUT_AS2 (or, w, %Y0);\n-                  OUT_AS2 (or, w, %Z0);\n+                  OUT_AS2 (mov, w, %S1);\n+                  OUT_AS2 (or, w, %T1);\n+                  OUT_AS2 (or, w, %U1);\n+                  OUT_AS2 (or, w, %V1);\n+                  OUT_AS2 (or, w, %W1);\n+                  OUT_AS2 (or, w, %X1);\n+                  OUT_AS2 (or, w, %Y1);\n+                  OUT_AS2 (or, w, %Z1);\n \t\t  OUT_AS1 (sz,);\n \t          OUT_AS1 (page, %2);\n \t          OUT_AS1 (jmp, %2);\n \t\t}\n \t      else\n \t        {\n-\t          operands[3] = GEN_INT (CONST_DOUBLE_LOW (operands[0]) - 1);\n-\t\t  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[0])\n-\t\t\t\t\t - (CONST_DOUBLE_LOW (operands[0])\n-\t\t\t\t\t    ? 1 : 0));\n+\t          operands[3] = GEN_INT (const_low0 - 1);\n+\t\t  operands[4] = GEN_INT (const_high0 - (const_low0 ? 1 : 0));\n \t          OUT_AS2 (mov, w, %D3);\n \t          OUT_AS2 (sub, w, %Z1);\n \t          OUT_AS2 (mov, w, %C3);\n@@ -2928,19 +2941,17 @@ ip2k_gen_unsigned_comp_branch (insn, code, label)\n \tcase LEU:\n \t  if (imm_sub)\n \t    {\n-\t      if (((CONST_DOUBLE_HIGH (operands[1]) & 0xffffffff)\n-\t\t   == 0xffffffff)\n-\t\t  && ((CONST_DOUBLE_LOW (operands[1]) & 0xffffffff)\n-\t\t      == 0xffffffff))\n+\t      if (((const_high & 0xffffffff) == 0xffffffff)\n+\t\t  && ((const_low & 0xffffffff) == 0xffffffff))\n \t        {\n \t\t  /* <= 0xffffffffffffffff always suceeds.  */\n \t\t  OUT_AS1 (page, %2);\n \t          OUT_AS1 (jmp, %2);\n \t\t}\n \t      else\n \t\t{\n-\t          operands[3] = GEN_INT (CONST_DOUBLE_LOW (operands[1]) + 1);\n-\t\t  operands[4] = GEN_INT (CONST_DOUBLE_HIGH (operands[1])\n+\t          operands[3] = GEN_INT (const_low + 1);\n+\t\t  operands[4] = GEN_INT (const_high\n \t\t\t\t\t + (INTVAL (operands[3]) ? 0 : 1));\n \t          OUT_AS2 (mov, w, %D3);\n \t          OUT_AS2 (sub, w, %Z0);"}]}