{"sha": "5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjYzY0ZDlhNDMxOGVkZGZjMmYwZmQ3YTYxZTAyYzNjODE5ODYwNg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:53:33Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:53:33Z"}, "message": "graphite-sese-to-poly.c (scev_analyzable_p): New.\n\n2009-10-05  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-sese-to-poly.c (scev_analyzable_p): New.\n\t(rewrite_cross_bb_scalar_dependence): New.\n\t(rewrite_cross_bb_scalar_deps): New.\n\t(rewrite_reductions_out_of_ssa): Use bb_in_sese_p.\n\tCall rewrite_cross_bb_scalar_deps.\n\nFrom-SVN: r154559", "tree": {"sha": "ccd4cc313888410f43436a292444af894c852431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccd4cc313888410f43436a292444af894c852431"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "947121b8e60842d7501f280e6223bce5808ad85f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947121b8e60842d7501f280e6223bce5808ad85f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947121b8e60842d7501f280e6223bce5808ad85f"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "3832c669a07007d0289995f48f5ffcafa945f7a9", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606", "patch": "@@ -1,3 +1,11 @@\n+2009-10-05  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (scev_analyzable_p): New.\n+\t(rewrite_cross_bb_scalar_dependence): New.\n+\t(rewrite_cross_bb_scalar_deps): New.\n+\t(rewrite_reductions_out_of_ssa): Use bb_in_sese_p.\n+\tCall rewrite_cross_bb_scalar_deps.\n+\n 2009-10-05  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-sese-to-poly.c (gsi_for_ssa_name_def): Removed."}, {"sha": "19c8864ed7abdae8c24c02ffc751a1eae1b0e372", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 112, "deletions": 2, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=5dcc64d9a4318eddfc2f0fd7a61e02c3c8198606", "patch": "@@ -57,7 +57,6 @@ along with GCC; see the file COPYING3.  If not see\n static bool\n var_used_in_not_loop_header_phi_node (tree var)\n {\n-\n   imm_use_iterator imm_iter;\n   gimple stmt;\n   bool result = false;\n@@ -2047,6 +2046,106 @@ rewrite_phi_out_of_ssa (gimple_stmt_iterator *psi)\n   gsi_insert_seq_before (&gsi, stmts, GSI_NEW_STMT);\n }\n \n+/* Return true when DEF can be analyzed in REGION by the scalar\n+   evolution analyzer.  */\n+\n+static bool\n+scev_analyzable_p (tree def, sese region)\n+{\n+  gimple stmt = SSA_NAME_DEF_STMT (def);\n+  loop_p loop = loop_containing_stmt (stmt);\n+  tree scev = scalar_evolution_in_region (region, loop, def);\n+\n+  return !chrec_contains_undetermined (scev);\n+}\n+\n+/* Rewrite the scalar dependence of DEF used in USE_STMT with a memory\n+   read from ZERO_DIM_ARRAY.  */\n+\n+static void\n+rewrite_cross_bb_scalar_dependence (tree zero_dim_array, tree def, gimple use_stmt)\n+{\n+  tree var = SSA_NAME_VAR (def);\n+  gimple name_stmt = gimple_build_assign (var, zero_dim_array);\n+  tree name = make_ssa_name (var, name_stmt);\n+  ssa_op_iter iter;\n+  use_operand_p use_p;\n+  gimple_stmt_iterator gsi;\n+\n+  gimple_assign_set_lhs (name_stmt, name);\n+\n+  if (gimple_code (use_stmt) == GIMPLE_PHI)\n+    {\n+      gimple phi = use_stmt;\n+      edge entry;\n+      unsigned i;\n+\n+      for (i = 0; i < gimple_phi_num_args (phi); i++)\n+\tif (operand_equal_p (def, gimple_phi_arg_def (phi, i), 0))\n+\t  {\n+\t    entry = gimple_phi_arg_edge (phi, i);\n+\t    break;\n+\t  }\n+\n+      FOR_EACH_PHI_ARG (use_p, phi, iter, SSA_OP_USE)\n+\tif (operand_equal_p (def, USE_FROM_PTR (use_p), 0))\n+\t  {\n+\t    gsi = gsi_last_bb (entry->src);\n+\t    gsi_insert_after (&gsi, name_stmt, GSI_NEW_STMT);\n+\t    SET_USE (use_p, name);\n+\t    break;\n+\t  }\n+    }\n+  else\n+    {\n+      gsi = gsi_for_stmt (use_stmt);\n+      gsi_insert_before (&gsi, name_stmt, GSI_NEW_STMT);\n+\n+      FOR_EACH_SSA_USE_OPERAND (use_p, use_stmt, iter, SSA_OP_ALL_USES)\n+\tif (operand_equal_p (def, USE_FROM_PTR (use_p), 0))\n+\t  replace_exp (use_p, name);\n+    }\n+\n+  update_stmt (use_stmt);\n+}\n+\n+/* Rewrite the scalar dependences crossing the boundary of the BB\n+   containing STMT with an array.  */\n+\n+static void\n+rewrite_cross_bb_scalar_deps (sese region, gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi);\n+  imm_use_iterator imm_iter;\n+  tree def;\n+  basic_block def_bb;\n+  tree zero_dim_array = NULL_TREE;\n+  gimple use_stmt;\n+\n+  if (gimple_code (stmt) != GIMPLE_ASSIGN)\n+    return;\n+\n+  def = gimple_assign_lhs (stmt);\n+  if (!is_gimple_reg (def)\n+      || scev_analyzable_p (def, region))\n+    return;\n+\n+  def_bb = gimple_bb (stmt);\n+\n+  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, def)\n+    if (def_bb != gimple_bb (use_stmt))\n+      {\n+\tif (!zero_dim_array)\n+\t  {\n+\t    zero_dim_array = create_zero_dim_array (SSA_NAME_VAR (def));\n+\t    insert_out_of_ssa_copy (zero_dim_array, def);\n+\t    gsi_next (gsi);\n+\t  }\n+\n+\trewrite_cross_bb_scalar_dependence (zero_dim_array, def, use_stmt);\n+      }\n+}\n+\n /* Rewrite out of SSA all the reduction phi nodes of SCOP.  */\n \n static void\n@@ -2057,7 +2156,7 @@ rewrite_reductions_out_of_ssa (scop_p scop)\n   sese region = SCOP_REGION (scop);\n \n   FOR_EACH_BB (bb)\n-    if (bb_in_region (bb, SESE_ENTRY_BB (region), SESE_EXIT_BB (region)))\n+    if (bb_in_sese_p (bb, region))\n       for (psi = gsi_start_phis (bb); !gsi_end_p (psi);)\n \t{\n \t  if (scalar_close_phi_node_p (gsi_stmt (psi)))\n@@ -2071,6 +2170,17 @@ rewrite_reductions_out_of_ssa (scop_p scop)\n   verify_ssa (false);\n   verify_loop_closed_ssa ();\n #endif\n+\n+  FOR_EACH_BB (bb)\n+    if (bb_in_sese_p (bb, region))\n+      for (psi = gsi_start_bb (bb); !gsi_end_p (psi); gsi_next (&psi))\n+\trewrite_cross_bb_scalar_deps (region, &psi);\n+\n+  update_ssa (TODO_update_ssa);\n+#ifdef ENABLE_CHECKING\n+  verify_ssa (false);\n+  verify_loop_closed_ssa ();\n+#endif\n }\n \n /* Returns the number of pbbs that are in loops contained in SCOP.  */"}]}