{"sha": "c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkMmJmYmI0NDFlZDQ2NGVkNjFlMGVlNzA0NWM3N2NmNGE5NGIwNg==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2013-10-04T18:07:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-04T18:07:20Z"}, "message": "compiler: Use backend interface for temporary reference expressions.\n\n\t* go-gcc.cc (Backend::convert_expression): New function.\n\nFrom-SVN: r203209", "tree": {"sha": "eea8468b131614593562965119db0820aa44ace6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eea8468b131614593562965119db0820aa44ace6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/comments", "author": null, "committer": null, "parents": [{"sha": "7c327f7b1021e3702a1565510563fdf277e1877b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c327f7b1021e3702a1565510563fdf277e1877b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c327f7b1021e3702a1565510563fdf277e1877b"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "eddf39326c3eaddacf31fc179199dea7799f7c70", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06", "patch": "@@ -1,3 +1,7 @@\n+2013-10-04  Chris Manghane  <cmang@google.com>\n+\n+\t* go-gcc.cc (Backend::convert_expression): New function.\n+\n 2013-10-02  Chris Manghane  <cmang@google.com>\n \n \t* go-gcc.cc: Include \"real.h\" and \"realmpfr.h\"."}, {"sha": "fcfd41b34ab3cfdf00e3ade32734ea88686ceb48", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06", "patch": "@@ -229,6 +229,9 @@ class Gcc_backend : public Backend\n   Bexpression*\n   complex_constant_expression(Btype* btype, mpfr_t real, mpfr_t imag);\n \n+  Bexpression*\n+  convert_expression(Btype* type, Bexpression* expr, Location);\n+\n   // Statements.\n \n   Bstatement*\n@@ -949,6 +952,20 @@ Gcc_backend::complex_constant_expression(Btype* btype, mpfr_t real, mpfr_t imag)\n   return tree_to_expr(ret);\n }\n \n+// An expression that converts an expression to a different type.\n+\n+Bexpression*\n+Gcc_backend::convert_expression(Btype* type, Bexpression* expr, Location)\n+{\n+  tree type_tree = type->get_tree();\n+  tree expr_tree = expr->get_tree();\n+  if (type_tree == error_mark_node || expr_tree == error_mark_node)\n+    return this->error_expression();\n+\n+  tree ret = fold_convert(type_tree, expr_tree);\n+  return tree_to_expr(ret);\n+}\n+\n // An expression as a statement.\n \n Bstatement*"}, {"sha": "fa3e3cc689336e0b6983bc755bccfb77471793b5", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06", "patch": "@@ -262,6 +262,10 @@ class Backend\n   virtual Bexpression*\n   complex_constant_expression(Btype* btype, mpfr_t real, mpfr_t imag) = 0;\n \n+  // Return an expression that converts EXPR to TYPE.\n+  virtual Bexpression*\n+  convert_expression(Btype* type, Bexpression* expr, Location) = 0;\n+\n   // Statements.\n \n   // Create an error statement.  This is used for cases which should"}, {"sha": "13d4c1c789a6fac44813c595f5a01b3629c196e2", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=c6d2bfbb441ed464ed61e0ee7045c77cf4a94b06", "patch": "@@ -995,23 +995,24 @@ Temporary_reference_expression::do_address_taken(bool)\n tree\n Temporary_reference_expression::do_get_tree(Translate_context* context)\n {\n+  Gogo* gogo = context->gogo();\n   Bvariable* bvar = this->statement_->get_backend_variable(context);\n+  Bexpression* ret = gogo->backend()->var_expression(bvar, this->location());\n \n-  // The gcc backend can't represent the same set of recursive types\n+  // The backend can't always represent the same set of recursive types\n   // that the Go frontend can.  In some cases this means that a\n   // temporary variable won't have the right backend type.  Correct\n   // that here by adding a type cast.  We need to use base() to push\n   // the circularity down one level.\n-  tree ret = var_to_tree(bvar);\n+  Type* stype = this->statement_->type();\n   if (!this->is_lvalue_\n-      && POINTER_TYPE_P(TREE_TYPE(ret))\n-      && VOID_TYPE_P(TREE_TYPE(TREE_TYPE(ret))))\n+      && stype->has_pointer()\n+      && stype->deref()->is_void_type())\n     {\n-      Btype* type_btype = this->type()->base()->get_backend(context->gogo());\n-      tree type_tree = type_to_tree(type_btype);\n-      ret = fold_convert_loc(this->location().gcc_location(), type_tree, ret);\n+      Btype* btype = this->type()->base()->get_backend(gogo);\n+      ret = gogo->backend()->convert_expression(btype, ret, this->location());\n     }\n-  return ret;\n+  return expr_to_tree(ret);\n }\n \n // Ast dump for temporary reference."}]}