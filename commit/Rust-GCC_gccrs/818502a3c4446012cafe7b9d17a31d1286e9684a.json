{"sha": "818502a3c4446012cafe7b9d17a31d1286e9684a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE4NTAyYTNjNDQ0NjAxMmNhZmU3YjlkMTdhMzFkMTI4NmU5Njg0YQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-21T22:04:41Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-21T22:04:41Z"}, "message": "rs6000: wj -> wi+p8v\n\nAlso deletes VS_64dm, it's unused.\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wj\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wj.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wj\" constraint by \"wi\" with \"p8v\".\n\t(VS_64dm): Delete.\n\t* config/rs6000/vsx.md: Ditto.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271484", "tree": {"sha": "8385b9df6d378c17632c30ae65677da662edbfd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8385b9df6d378c17632c30ae65677da662edbfd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/818502a3c4446012cafe7b9d17a31d1286e9684a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818502a3c4446012cafe7b9d17a31d1286e9684a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/818502a3c4446012cafe7b9d17a31d1286e9684a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/818502a3c4446012cafe7b9d17a31d1286e9684a/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fae803b2db46b8baf1610948fea344475974b7da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fae803b2db46b8baf1610948fea344475974b7da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fae803b2db46b8baf1610948fea344475974b7da"}], "stats": {"total": 59, "additions": 28, "deletions": 31}, "files": [{"sha": "2568eae098282878d96985d622fe5bbee0ef6fa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=818502a3c4446012cafe7b9d17a31d1286e9684a", "patch": "@@ -1,3 +1,16 @@\n+2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wj\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wj.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wj\" constraint by \"wi\" with \"p8v\".\n+\t(VS_64dm): Delete.\n+\t* config/rs6000/vsx.md: Ditto.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wh\"):"}, {"sha": "9f315e462c31a4092791994e3ecaa25244cdb1e0", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=818502a3c4446012cafe7b9d17a31d1286e9684a", "patch": "@@ -74,9 +74,6 @@\n (define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wi]\"\n   \"FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\")\n \n-(define_register_constraint \"wj\" \"rs6000_constraints[RS6000_CONSTRAINT_wj]\"\n-  \"FP or VSX register to hold 64-bit integers for direct moves or NO_REGS.\")\n-\n (define_register_constraint \"wk\" \"rs6000_constraints[RS6000_CONSTRAINT_wk]\"\n   \"FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS.\")\n "}, {"sha": "e88a829860a7ee5224fe8a6fa8a44bf37e220c6d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=818502a3c4446012cafe7b9d17a31d1286e9684a", "patch": "@@ -2513,7 +2513,6 @@ rs6000_debug_reg_global (void)\n \t   \"wf reg_class = %s\\n\"\n \t   \"wg reg_class = %s\\n\"\n \t   \"wi reg_class = %s\\n\"\n-\t   \"wj reg_class = %s\\n\"\n \t   \"wk reg_class = %s\\n\"\n \t   \"wl reg_class = %s\\n\"\n \t   \"wm reg_class = %s\\n\"\n@@ -2537,7 +2536,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wf]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wg]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wi]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wj]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wk]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wl]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wm]],\n@@ -3162,7 +3160,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twf - Preferred register class for V4SFmode.\n \twg - Float register for power6x move insns.\n \twi - FP or VSX register to hold 64-bit integers for VSX insns.\n-\twj - FP or VSX register to hold 64-bit integers for direct moves.\n \twk - FP or VSX register to hold 64-bit doubles for direct moves.\n \twl - Float register if we can do 32-bit signed int loads.\n \twm - VSX register for ISA 2.07 direct move operations.\n@@ -3205,8 +3202,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \n   if (TARGET_DIRECT_MOVE)\n     {\n-      rs6000_constraints[RS6000_CONSTRAINT_wj]\t\t\t/* DImode  */\n-\t= rs6000_constraints[RS6000_CONSTRAINT_wi];\n       rs6000_constraints[RS6000_CONSTRAINT_wk]\t\t\t/* DFmode  */\n \t= rs6000_constraints[RS6000_CONSTRAINT_ws];\n       rs6000_constraints[RS6000_CONSTRAINT_wm] = VSX_REGS;"}, {"sha": "218ed10dea3a52e3631c87bd32983f310fd130c3", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=818502a3c4446012cafe7b9d17a31d1286e9684a", "patch": "@@ -1254,7 +1254,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wf,\t\t/* VSX register for V4SF */\n   RS6000_CONSTRAINT_wg,\t\t/* FPR register for -mmfpgpr */\n   RS6000_CONSTRAINT_wi,\t\t/* FPR/VSX register to hold DImode */\n-  RS6000_CONSTRAINT_wj,\t\t/* FPR/VSX register for DImode direct moves. */\n   RS6000_CONSTRAINT_wk,\t\t/* FPR/VSX register for DFmode direct moves. */\n   RS6000_CONSTRAINT_wl,\t\t/* FPR register for LFIWAX */\n   RS6000_CONSTRAINT_wm,\t\t/* VSX register for direct move */"}, {"sha": "9a986a147f403f2a41a5900c34f4595e4c61e92f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=818502a3c4446012cafe7b9d17a31d1286e9684a", "patch": "@@ -834,7 +834,7 @@\n \n \n (define_insn \"zero_extendsi<mode>2\"\n-  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,wz,wa,wj,r,wa\")\n+  [(set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r,wz,wa,wi,r,wa\")\n \t(zero_extend:EXTSI (match_operand:SI 1 \"reg_or_mem_operand\" \"m,r,Z,Z,r,wa,wa\")))]\n   \"\"\n   \"@\n@@ -846,7 +846,7 @@\n    mfvsrwz %0,%x1\n    xxextractuw %x0,%x1,4\"\n   [(set_attr \"type\" \"load,shift,fpload,fpload,mffgpr,mftgpr,vecexts\")\n-   (set_attr \"isa\" \"*,*,*,p8v,*,p8v,p9v\")])\n+   (set_attr \"isa\" \"*,*,*,p8v,p8v,p8v,p9v\")])\n \n (define_insn_and_split \"*zero_extendsi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n@@ -1019,7 +1019,7 @@\n \n (define_insn \"extendsi<mode>2\"\n   [(set (match_operand:EXTSI 0 \"gpc_reg_operand\"\n-\t\t     \"=r, r,   wl,    wa,    wj,    v,      v,     wr\")\n+\t\t     \"=r, r,   wl,    wa,    wi,    v,      v,     wr\")\n \t(sign_extend:EXTSI (match_operand:SI 1 \"lwa_operand\"\n \t\t     \"YZ, r,   Z,     Z,     r,     v,      v,     ?wa\")))]\n   \"\"\n@@ -1035,7 +1035,7 @@\n   [(set_attr \"type\" \"load,exts,fpload,fpload,mffgpr,vecexts,vecperm,mftgpr\")\n    (set_attr \"sign_extend\" \"yes\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,8\")\n-   (set_attr \"isa\" \"*,*,*,p8v,*,p9v,p8v,p8v\")])\n+   (set_attr \"isa\" \"*,*,*,p8v,p8v,p9v,p8v,p8v\")])\n \n (define_split\n   [(set (match_operand:EXTSI 0 \"int_reg_operand\")\n@@ -5233,7 +5233,7 @@\n ; We don't define lfiwax/lfiwzx with the normal definition, because we\n ; don't want to support putting SImode in FPR registers.\n (define_insn \"lfiwax\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,v\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi,wi,v\")\n \t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,v\")]\n \t\t   UNSPEC_LFIWAX))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWAX\"\n@@ -5243,7 +5243,7 @@\n    mtvsrwa %x0,%1\n    vextsw2d %0,%1\"\n   [(set_attr \"type\" \"fpload,fpload,mffgpr,vecexts\")\n-   (set_attr \"isa\" \"*,*,*,p9v\")])\n+   (set_attr \"isa\" \"*,p8v,p8v,p9v\")])\n \n ; This split must be run before register allocation because it allocates the\n ; memory slot that is needed to move values to/from the FPR.  We don't allocate\n@@ -5315,7 +5315,7 @@\n    (set_attr \"type\" \"fpload\")])\n \n (define_insn \"lfiwzx\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wj,wj,wa\")\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d,wi,wi,wa\")\n \t(unspec:DI [(match_operand:SI 1 \"reg_or_indexed_operand\" \"Z,Z,r,wa\")]\n \t\t   UNSPEC_LFIWZX))]\n   \"TARGET_HARD_FLOAT && TARGET_LFIWZX\"\n@@ -5325,7 +5325,7 @@\n    mtvsrwz %x0,%1\n    xxextractuw %x0,%x1,4\"\n   [(set_attr \"type\" \"fpload,fpload,mftgpr,vecexts\")\n-   (set_attr \"isa\" \"*,*,*,p9v\")])\n+   (set_attr \"isa\" \"*,p8v,p8v,p9v\")])\n \n (define_insn_and_split \"floatunssi<mode>2_lfiwzx\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Fv>\")\n@@ -8831,13 +8831,13 @@\n                 m,         ^d,        ^d,        wY,        Z,          $v,\n                 $wv,       ^wi,       wa,        wa,        wv,         wi,\n                 wi,        wv,        wv,        r,         *h,         *h,\n-                ?r,        ?wg,       ?r,        ?wj\")\n+                ?r,        ?wg,       ?r,        ?wi\")\n \t(match_operand:DI 1 \"input_operand\"\n                \"r,         YZ,        r,         I,         L,          nF,\n                 ^d,        m,         ^d,        ^v,        $wv,        wY,\n                 Z,         ^wi,       Oj,        wM,        OjwM,       Oj,\n                 wM,        wS,        wB,        *h,        r,          0,\n-                wg,        r,         wj,        r\"))]\n+                wg,        r,         wi,        r\"))]\n   \"TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], DImode)\n        || gpc_reg_operand (operands[1], DImode))\"\n@@ -8888,7 +8888,7 @@\n                 *,         *,         *,         p9v,       *,          p9v,\n                 *,         *,         p9v,       p9v,       *,          *,\n                 *,         *,         *,         *,         *,          *,\n-                *,         *,         *,         *\")])\n+                *,         *,         p8v,       p8v\")])\n \n ; Some DImode loads are best done as a load of -1 followed by a mask\n ; instruction."}, {"sha": "ff4ceb6268fe86556393eb66f6bf8343933acf62", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=818502a3c4446012cafe7b9d17a31d1286e9684a", "patch": "@@ -275,11 +275,6 @@\n \t\t\t     (V2DF\t\"V4DF\")\n \t\t\t     (V1TI\t\"V2TI\")])\n \n-;; Map register class for 64-bit element in 128-bit vector for direct moves\n-;; to/from gprs\n-(define_mode_attr VS_64dm [(V2DF\t\"wk\")\n-\t\t\t   (V2DI\t\"wj\")])\n-\n ;; Map register class for 64-bit element in 128-bit vector for normal register\n ;; to register moves\n (define_mode_attr VS_64reg [(V2DF\t\"ws\")\n@@ -4158,12 +4153,13 @@\n   [(set (match_operand:V4SI 0 \"vsx_register_operand\" \"=wa,we\")\n \t(vec_duplicate:V4SI\n \t (truncate:SI\n-\t  (match_operand:DI 1 \"gpc_reg_operand\" \"wj,r\"))))]\n+\t  (match_operand:DI 1 \"gpc_reg_operand\" \"wi,r\"))))]\n   \"VECTOR_MEM_VSX_P (V4SImode) && TARGET_DIRECT_MOVE_64BIT\"\n   \"@\n    xxspltw %x0,%x1,1\n    mtvsrws %x0,%1\"\n-  [(set_attr \"type\" \"vecperm\")])\n+  [(set_attr \"type\" \"vecperm\")\n+   (set_attr \"isa\" \"p8v,*\")])\n \n ;; V4SF splat (ISA 3.0)\n (define_insn_and_split \"vsx_splat_v4sf\""}, {"sha": "55de2f1b37ce73ea996ca50a4ee63dcd2b0ccd93", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/818502a3c4446012cafe7b9d17a31d1286e9684a/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=818502a3c4446012cafe7b9d17a31d1286e9684a", "patch": "@@ -3197,7 +3197,7 @@ Altivec vector register\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n-@code{wf}, @code{wg}, @code{wi}, @code{wj}, @code{wk},\n+@code{wf}, @code{wg}, @code{wi}, @code{wk},\n @code{wl}, @code{wm}, @code{wp}, @code{wq}, @code{ws},\n @code{wt}, @code{wv}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n@@ -3262,9 +3262,6 @@ If @option{-mmfpgpr} was used, a floating point register or NO_REGS.\n @item wi\n FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n \n-@item wj\n-FP or VSX register to hold 64-bit integers for direct moves or NO_REGS.\n-\n @item wk\n FP or VSX register to hold 64-bit doubles for direct moves or NO_REGS.\n "}]}