{"sha": "64c06b13d369866d1174e5675ec20d01ea928264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjMDZiMTNkMzY5ODY2ZDExNzRlNTY3NWVjMjBkMDFlYTkyODI2NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-06T18:24:40Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-06T18:24:40Z"}, "message": "i386.md (int cmove peephole2s): Use general_reg_operand instead of register_and_not_any_fp_reg_operand as...\n\n\t* config/i386/i386.md (int cmove peephole2s): Use general_reg_operand\n\tinstead of register_and_not_any_fp_reg_operand as operand 0 predicate.\n\t* config/i386/predicates.md (register_and_not_any_fp_reg_operand):\n\tRemove unused predicate.\n\t(register_and_not_fp_reg_operand): Ditto.\n\nFrom-SVN: r235983", "tree": {"sha": "3769ca88d8b8106f1c78f63ab8867c89c7fc956a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3769ca88d8b8106f1c78f63ab8867c89c7fc956a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c06b13d369866d1174e5675ec20d01ea928264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c06b13d369866d1174e5675ec20d01ea928264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c06b13d369866d1174e5675ec20d01ea928264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c06b13d369866d1174e5675ec20d01ea928264/comments", "author": null, "committer": null, "parents": [{"sha": "2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a30f87f75644bb5ff3e8f42d4922bef99511b4a"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "b3cf2a3cb04fd03b2fdb439e3b5c357fe6aa067b", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c06b13d369866d1174e5675ec20d01ea928264/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c06b13d369866d1174e5675ec20d01ea928264/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=64c06b13d369866d1174e5675ec20d01ea928264", "patch": "@@ -27,11 +27,6 @@\n   (and (match_code \"reg\")\n        (match_test \"STACK_REGNO_P (REGNO (op))\")))\n \n-;; Return true if OP is a non-fp register_operand.\n-(define_predicate \"register_and_not_any_fp_reg_operand\"\n-  (and (match_code \"reg\")\n-       (not (match_test \"ANY_FP_REGNO_P (REGNO (op))\"))))\n-\n ;; True if the operand is a GENERAL class register.\n (define_predicate \"general_reg_operand\"\n   (and (match_code \"reg\")\n@@ -43,11 +38,6 @@\n     (match_test \"GENERAL_REGNO_P (REGNO (op))\")\n     (match_operand 0 \"nonimmediate_operand\")))\n \n-;; Return true if OP is a register operand other than an i387 fp register.\n-(define_predicate \"register_and_not_fp_reg_operand\"\n-  (and (match_code \"reg\")\n-       (not (match_test \"STACK_REGNO_P (REGNO (op))\"))))\n-\n ;; True if the operand is an MMX register.\n (define_predicate \"mmx_reg_operand\"\n   (and (match_code \"reg\")"}]}