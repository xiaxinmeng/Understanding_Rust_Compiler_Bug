{"sha": "7551a6e467c64b3155d5b8f005cd7ea7143b21f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU1MWE2ZTQ2N2M2NGIzMTU1ZDViOGYwMDVjZDdlYTcxNDNiMjFmMw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2019-08-06T03:16:40Z"}, "committer": {"name": "Kito Cheng", "email": "kito@gcc.gnu.org", "date": "2019-08-06T03:16:40Z"}, "message": "RISC-V: Handle extensions combination correctly in multilib-generator.\n\nInput string consist of four parts:\n  <primary arch>-<abi>-<additional arches>-<extensions>\n\nand generator doing combination with <extensions> part, but it just\nappend the extension at the end of arch string, it might generate\ninvalid arch.\n\nFor example, without this patch `./multilib-generator rv32imafc-ilp32--d`\nwill generate:\n\nMULTILIB_OPTIONS = march=rv32imafc/march=rv32imafcd mabi=ilp32\n                                         ^^^^^^^^^^\n\nand rv32imafcd is not in canonical order.\n\nTested with python 2.7 and python 3.6/3.7.\n\ngcc/ChangeLog\n\n\t* gcc/config/riscv/multilib-generator: (canonical_order): New.\n\t(arch_canonicalize): Dito.\n\tApply arch_canonicalize for alts.\n\nFrom-SVN: r274137", "tree": {"sha": "ec027587fbbaeeab5c1cdfa487be2f7580080228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec027587fbbaeeab5c1cdfa487be2f7580080228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7551a6e467c64b3155d5b8f005cd7ea7143b21f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7551a6e467c64b3155d5b8f005cd7ea7143b21f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7551a6e467c64b3155d5b8f005cd7ea7143b21f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7551a6e467c64b3155d5b8f005cd7ea7143b21f3/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c026e33449102076609e084ca2cd4a729b3c504b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c026e33449102076609e084ca2cd4a729b3c504b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c026e33449102076609e084ca2cd4a729b3c504b"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "f19091cf26e3bf6e795d67fe2478681955230270", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7551a6e467c64b3155d5b8f005cd7ea7143b21f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7551a6e467c64b3155d5b8f005cd7ea7143b21f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7551a6e467c64b3155d5b8f005cd7ea7143b21f3", "patch": "@@ -1,3 +1,9 @@\n+2019-08-06  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc/config/riscv/multilib-generator: (canonical_order): New.\n+\t(arch_canonicalize): Dito.\n+\tApply arch_canonicalize for alts.\n+\n 2019-08-05  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (Common Variable Attributes): Document alias"}, {"sha": "e58231c2756294b9ff6c216608aca327beb6747e", "filename": "gcc/config/riscv/multilib-generator", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7551a6e467c64b3155d5b8f005cd7ea7143b21f3/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7551a6e467c64b3155d5b8f005cd7ea7143b21f3/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fmultilib-generator?ref=7551a6e467c64b3155d5b8f005cd7ea7143b21f3", "patch": "@@ -36,14 +36,51 @@ abis = collections.OrderedDict()\n required = []\n reuse = []\n \n+canonical_order = \"mafdqlcbjtpvn\"\n+\n+def arch_canonicalize(arch):\n+  # TODO: Support Z, S, H, or X extensions.\n+  # TODO: Support implied extensions, e.g. D implied F in latest spec.\n+  # TODO: Support extension version.\n+  new_arch = \"\"\n+  if arch[:5] in ['rv32e', 'rv32i', 'rv64i']:\n+    new_arch = arch[:5]\n+  else:\n+    raise Exception(\"Unexpected arch: `%d`\" % arch[:5])\n+\n+  # Find any Z, S, H or X\n+  long_ext_prefixes = ['z', 's', 'h', 'x']\n+  long_ext_prefixes_idx = map(lambda x: arch.find(x), long_ext_prefixes)\n+\n+  # Filter out any non-existent index.\n+  long_ext_prefixes_idx = list(filter(lambda x: x != -1, long_ext_prefixes_idx))\n+  if long_ext_prefixes_idx:\n+    first_long_ext_idx = min(long_ext_prefixes_idx)\n+    long_exts = arch[first_long_ext_idx:]\n+    std_exts = arch[5:first_long_ext_idx]\n+  else:\n+    long_exts = \"\"\n+    std_exts = arch[5:]\n+\n+  # Put extensions in canonical order.\n+  for ext in canonical_order:\n+    if ext in std_exts:\n+      new_arch += ext\n+\n+  # Concat rest of the multi-char extensions.\n+  new_arch += long_exts\n+  return new_arch\n+\n for cfg in sys.argv[1:]:\n   (arch, abi, extra, ext) = cfg.split('-')\n   arches[arch] = 1\n   abis[abi] = 1\n   extra = list(filter(None, extra.split(',')))\n   ext = list(filter(None, ext.split(',')))\n   alts = sum([[x] + [x + y for y in ext] for x in [arch] + extra], [])\n+  # TODO: We should expand g to imadzifencei once we support newer spec.\n   alts = alts + [x.replace('imafd', 'g') for x in alts if 'imafd' in x]\n+  alts = list(map(arch_canonicalize, alts))\n   for alt in alts[1:]:\n     arches[alt] = 1\n     reuse.append('march.%s/mabi.%s=march.%s/mabi.%s' % (arch, abi, alt, abi))"}]}