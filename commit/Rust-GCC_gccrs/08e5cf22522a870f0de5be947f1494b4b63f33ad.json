{"sha": "08e5cf22522a870f0de5be947f1494b4b63f33ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlNWNmMjI1MjJhODcwZjBkZTViZTk0N2YxNDk0YjRiNjNmMzNhZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-05-02T10:08:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-05-02T10:08:59Z"}, "message": "re PR rtl-optimization/70886 (-frename-registers causes boostrap comparison failures on ia64)\n\n\tPR rtl-optimization/70886\n\t* sched-deps.c (estimate_dep_weak): Canonicalize cselib values.\n\n\t* cselib.h (rtx_equal_for_cselib_1): Declare.\n\t(rtx_equal_for_cselib_p: New inline function.\n\t* cselib.c (rtx_equal_for_cselib_p): Delete.\n\t(rtx_equal_for_cselib_1): Make public.\n\nFrom-SVN: r235735", "tree": {"sha": "7c5d880da603b7acab4627747941d8a33e7441b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c5d880da603b7acab4627747941d8a33e7441b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08e5cf22522a870f0de5be947f1494b4b63f33ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e5cf22522a870f0de5be947f1494b4b63f33ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e5cf22522a870f0de5be947f1494b4b63f33ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e5cf22522a870f0de5be947f1494b4b63f33ad/comments", "author": null, "committer": null, "parents": [{"sha": "86d2f05621aed0d34dc97a4d619958aa7e170d1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d2f05621aed0d34dc97a4d619958aa7e170d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d2f05621aed0d34dc97a4d619958aa7e170d1c"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "49a314aebc72965051b9f17122c5b158ba0fb741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e5cf22522a870f0de5be947f1494b4b63f33ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e5cf22522a870f0de5be947f1494b4b63f33ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08e5cf22522a870f0de5be947f1494b4b63f33ad", "patch": "@@ -1,3 +1,13 @@\n+2016-05-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/70886\n+\t* sched-deps.c (estimate_dep_weak): Canonicalize cselib values.\n+\n+\t* cselib.h (rtx_equal_for_cselib_1): Declare.\n+\t(rtx_equal_for_cselib_p: New inline function.\n+\t* cselib.c (rtx_equal_for_cselib_p): Delete.\n+\t(rtx_equal_for_cselib_1): Make public.\n+\n 2016-05-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/predicates.md (nonimm_ssenomem_operand): New predicate."}, {"sha": "14c7b320b0353449e59cd6850ce16f366ebb1f5a", "filename": "gcc/cselib.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e5cf22522a870f0de5be947f1494b4b63f33ad/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e5cf22522a870f0de5be947f1494b4b63f33ad/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=08e5cf22522a870f0de5be947f1494b4b63f33ad", "patch": "@@ -49,7 +49,6 @@ static void unchain_one_value (cselib_val *);\n static void unchain_one_elt_list (struct elt_list **);\n static void unchain_one_elt_loc_list (struct elt_loc_list **);\n static void remove_useless_values (void);\n-static int rtx_equal_for_cselib_1 (rtx, rtx, machine_mode);\n static unsigned int cselib_hash_rtx (rtx, int, machine_mode);\n static cselib_val *new_cselib_val (unsigned int, machine_mode, rtx);\n static void add_mem_for_addr (cselib_val *, cselib_val *, rtx);\n@@ -788,15 +787,6 @@ cselib_reg_set_mode (const_rtx x)\n   return GET_MODE (REG_VALUES (REGNO (x))->elt->val_rtx);\n }\n \n-/* Return nonzero if we can prove that X and Y contain the same value, taking\n-   our gathered information into account.  */\n-\n-int\n-rtx_equal_for_cselib_p (rtx x, rtx y)\n-{\n-  return rtx_equal_for_cselib_1 (x, y, VOIDmode);\n-}\n-\n /* If x is a PLUS or an autoinc operation, expand the operation,\n    storing the offset, if any, in *OFF.  */\n \n@@ -843,7 +833,7 @@ autoinc_split (rtx x, rtx *off, machine_mode memmode)\n    addressing modes.  If X and Y are not (known to be) part of\n    addresses, MEMMODE should be VOIDmode.  */\n \n-static int\n+int\n rtx_equal_for_cselib_1 (rtx x, rtx y, machine_mode memmode)\n {\n   enum rtx_code code;"}, {"sha": "940fe99f64862379efc3bb5d0f2b30a8f4066c14", "filename": "gcc/cselib.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e5cf22522a870f0de5be947f1494b4b63f33ad/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e5cf22522a870f0de5be947f1494b4b63f33ad/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=08e5cf22522a870f0de5be947f1494b4b63f33ad", "patch": "@@ -82,7 +82,7 @@ extern void cselib_finish (void);\n extern void cselib_process_insn (rtx_insn *);\n extern bool fp_setter_insn (rtx_insn *);\n extern machine_mode cselib_reg_set_mode (const_rtx);\n-extern int rtx_equal_for_cselib_p (rtx, rtx);\n+extern int rtx_equal_for_cselib_1 (rtx, rtx, machine_mode);\n extern int references_value_p (const_rtx, int);\n extern rtx cselib_expand_value_rtx (rtx, bitmap, int);\n typedef rtx (*cselib_expand_callback)(rtx, bitmap, int, void *);\n@@ -125,4 +125,16 @@ canonical_cselib_val (cselib_val *val)\n   return canon;\n }\n \n+/* Return nonzero if we can prove that X and Y contain the same value, taking\n+   our gathered information into account.  */\n+\n+static inline int\n+rtx_equal_for_cselib_p (rtx x, rtx y)\n+{\n+  if (x == y)\n+    return 1;\n+\n+  return rtx_equal_for_cselib_1 (x, y, VOIDmode);\n+}\n+\n #endif /* GCC_CSELIB_H */"}, {"sha": "5c8e020bb5b82d0710a48064f396da1dac33e9db", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e5cf22522a870f0de5be947f1494b4b63f33ad/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e5cf22522a870f0de5be947f1494b4b63f33ad/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=08e5cf22522a870f0de5be947f1494b4b63f33ad", "patch": "@@ -4182,22 +4182,29 @@ finish_deps_global (void)\n dw_t\n estimate_dep_weak (rtx mem1, rtx mem2)\n {\n-  rtx r1, r2;\n-\n   if (mem1 == mem2)\n     /* MEMs are the same - don't speculate.  */\n     return MIN_DEP_WEAK;\n \n-  r1 = XEXP (mem1, 0);\n-  r2 = XEXP (mem2, 0);\n+  rtx r1 = XEXP (mem1, 0);\n+  rtx r2 = XEXP (mem2, 0);\n+\n+  if (sched_deps_info->use_cselib)\n+    {\n+      /* We cannot call rtx_equal_for_cselib_p because the VALUEs might be\n+\t dangling at this point, since we never preserve them.  Instead we\n+\t canonicalize manually to get stable VALUEs out of hashing.  */\n+      if (GET_CODE (r1) == VALUE && CSELIB_VAL_PTR (r1))\n+\tr1 = canonical_cselib_val (CSELIB_VAL_PTR (r1))->val_rtx;\n+      if (GET_CODE (r2) == VALUE && CSELIB_VAL_PTR (r2))\n+\tr2 = canonical_cselib_val (CSELIB_VAL_PTR (r2))->val_rtx;\n+    }\n \n   if (r1 == r2\n-      || (REG_P (r1) && REG_P (r2)\n-\t  && REGNO (r1) == REGNO (r2)))\n+      || (REG_P (r1) && REG_P (r2) && REGNO (r1) == REGNO (r2)))\n     /* Again, MEMs are the same.  */\n     return MIN_DEP_WEAK;\n-  else if ((REG_P (r1) && !REG_P (r2))\n-\t   || (!REG_P (r1) && REG_P (r2)))\n+  else if ((REG_P (r1) && !REG_P (r2)) || (!REG_P (r1) && REG_P (r2)))\n     /* Different addressing modes - reason to be more speculative,\n        than usual.  */\n     return NO_DEP_WEAK - (NO_DEP_WEAK - UNCERTAIN_DEP_WEAK) / 2;"}]}