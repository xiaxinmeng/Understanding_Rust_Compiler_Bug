{"sha": "d3e16619ae38fba5a464064046114a6638d1816f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNlMTY2MTlhZTM4ZmJhNWE0NjQwNjQwNDYxMTRhNjYzOGQxODE2Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T13:53:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T13:53:11Z"}, "message": "[multiple changes]\n\n2014-07-30  Vincent Celier  <celier@adacore.com>\n\n\t* debug.adb: Minor comment update.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* s-tasuti.adb, s-tassta.adb: Minor reformatting.\n\t* sprint.adb (Sprint_Node): Handle N_Contract case.\n\t* exp_prag.adb: Minor reformatting.\n\t* freeze.adb (Freeze_Entity): Check useless postcondition for\n\tNo_Return subprogram.\n\t* sem_prag.adb: Minor reformatting.\n\n2014-07-30  Javier Miranda  <miranda@adacore.com>\n\n\t* a-tags.ads: Complete comments about performance.\n\n2014-07-30  Fedor Rybin  <frybin@adacore.com>\n\n\t* gnat_ugn.texi: Adding description for --exit-status option to\n\tgnattest section.  Fixing index entry of --passed-tests option\n\tin gnattest section.\n\n2014-07-30  Javier Miranda  <miranda@adacore.com>\n\n\t* Makefile.rtl, gnat_rm.texi, i-cpp.adb, i-cpp.ads, impunit.adb,\n\trtsfind.ads: Remove references to package Interfaces.CPP since this\n\tpackage is no longer needed.\n\nFrom-SVN: r213270", "tree": {"sha": "f34b8a064f087cdef85b843e241141f43015292c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f34b8a064f087cdef85b843e241141f43015292c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3e16619ae38fba5a464064046114a6638d1816f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e16619ae38fba5a464064046114a6638d1816f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3e16619ae38fba5a464064046114a6638d1816f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3e16619ae38fba5a464064046114a6638d1816f/comments", "author": null, "committer": null, "parents": [{"sha": "fccaf220f3c01660f800b6ea055463823051904c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fccaf220f3c01660f800b6ea055463823051904c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fccaf220f3c01660f800b6ea055463823051904c"}], "stats": {"total": 340, "additions": 190, "deletions": 150}, "files": [{"sha": "81d1faa3ffc1d03884a1688a9ae195da484f10ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -1,3 +1,32 @@\n+2014-07-30  Vincent Celier  <celier@adacore.com>\n+\n+\t* debug.adb: Minor comment update.\n+\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-tasuti.adb, s-tassta.adb: Minor reformatting.\n+\t* sprint.adb (Sprint_Node): Handle N_Contract case.\n+\t* exp_prag.adb: Minor reformatting.\n+\t* freeze.adb (Freeze_Entity): Check useless postcondition for\n+\tNo_Return subprogram.\n+\t* sem_prag.adb: Minor reformatting.\n+\n+2014-07-30  Javier Miranda  <miranda@adacore.com>\n+\n+\t* a-tags.ads: Complete comments about performance.\n+\n+2014-07-30  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Adding description for --exit-status option to\n+\tgnattest section.  Fixing index entry of --passed-tests option\n+\tin gnattest section.\n+\n+2014-07-30  Javier Miranda  <miranda@adacore.com>\n+\n+\t* Makefile.rtl, gnat_rm.texi, i-cpp.adb, i-cpp.ads, impunit.adb,\n+\trtsfind.ads: Remove references to package Interfaces.CPP since this\n+\tpackage is no longer needed.\n+\n 2014-07-30  Bob Duff  <duff@adacore.com>\n \n \t* s-taasde.adb (Timer_Queue): Don't use a"}, {"sha": "a959d3c8e576de08d45f5232618c8bc558d4ac93", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -470,7 +470,6 @@ GNATRTL_NONTASKING_OBJS= \\\n   i-cexten$(objext) \\\n   i-cobol$(objext) \\\n   i-cpoint$(objext) \\\n-  i-cpp$(objext) \\\n   i-cstrea$(objext) \\\n   i-cstrin$(objext) \\\n   i-fortra$(objext) \\"}, {"sha": "a9141d2d9702baa16410d5f2168ef0e5e48c2840", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -44,7 +44,7 @@\n --  time (in terms of source lines executed):\n \n --    Expanded_Name, Wide_Expanded_Name, Wide_Wide_Expanded_Name, External_Tag,\n---    Is_Descendant_At_Same_Level, Parent_Tag\n+--    Is_Descendant_At_Same_Level, Parent_Tag, Type_Is_Abstract\n --    Descendant_Tag (when used with a library-level tagged type),\n --    Internal_Tag (when used with a library-level tagged type).\n \n@@ -53,7 +53,7 @@\n \n --    Descendant_Tag (when used with a locally defined tagged type)\n --    Internal_Tag (when used with a locally defined tagged type)\n---    Interface_Ancestor_Tagswith System\n+--    Interface_Ancestor_Tags\n \n with System.Storage_Elements;\n "}, {"sha": "a93af0f6a30cf0b8fd55013b5cce75f3fafe8540", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -814,7 +814,9 @@ package body Debug is\n    -- Documentation for gprbuild Debug Flags  --\n    ---------------------------------------------\n \n-   --  dn  Do not delete temporary files createed by gprbuild at the end\n+   --  dm  Display the maximum number of simultaneous compilations.\n+\n+   --  dn  Do not delete temporary files created by gprbuild at the end\n    --      of execution, such as temporary config pragma files, mapping\n    --      files or project path files.\n "}, {"sha": "696d063506512c01c0b8b4683b685fcfde4c3f97", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -990,8 +990,8 @@ package body Exp_Prag is\n \n       --  Case where we generate a direct raise\n \n-      if ((Debug_Flag_Dot_G or else\n-                              Restriction_Active (No_Exception_Propagation))\n+      if ((Debug_Flag_Dot_G\n+             or else Restriction_Active (No_Exception_Propagation))\n            and then Present (Find_Local_Handler (RTE (RE_Assert_Failure), N)))\n         or else (Opt.Exception_Locations_Suppressed and then No (Arg3 (N)))\n       then\n@@ -1073,12 +1073,10 @@ package body Exp_Prag is\n \n          Rewrite (N,\n            Make_If_Statement (Loc,\n-             Condition =>\n-               Make_Op_Not (Loc,\n-                 Right_Opnd => Cond),\n+             Condition       => Make_Op_Not (Loc, Right_Opnd => Cond),\n              Then_Statements => New_List (\n                Make_Procedure_Call_Statement (Loc,\n-                 Name =>\n+                 Name                   =>\n                    New_Occurrence_Of (RTE (RE_Raise_Assert_Failure), Loc),\n                  Parameter_Associations => New_List (Relocate_Node (Msg))))));\n       end if;\n@@ -1146,15 +1144,13 @@ package body Exp_Prag is\n          Set_All_Upper_Case;\n \n          Psect :=\n-           Make_String_Literal (Eloc,\n-             Strval => String_From_Name_Buffer);\n+           Make_String_Literal (Eloc, Strval => String_From_Name_Buffer);\n \n       else\n          Get_Name_String (Chars (Internal));\n          Set_All_Upper_Case;\n          Psect :=\n-           Make_String_Literal (Iloc,\n-             Strval => String_From_Name_Buffer);\n+           Make_String_Literal (Iloc, Strval => String_From_Name_Buffer);\n       end if;\n \n       Ploc := Sloc (Psect);\n@@ -1173,7 +1169,6 @@ package body Exp_Prag is\n                    Strval => \"common_object\")),\n              Make_Pragma_Argument_Association (Ploc,\n                Expression => New_Copy_Tree (Psect)))));\n-\n    end Expand_Pragma_Common_Object;\n \n    ---------------------------------------\n@@ -1298,17 +1293,17 @@ package body Exp_Prag is\n    -- Expand_Pragma_Import_Export_Exception --\n    -------------------------------------------\n \n-   --  For a VMS exception fix up the language field with \"VMS\"\n-   --  instead of \"Ada\" (gigi needs this), create a constant that will be the\n-   --  value of the VMS condition code and stuff the Interface_Name field\n-   --  with the unexpanded name of the exception (if not already set).\n-   --  For a Ada exception, just stuff the Interface_Name field\n-   --  with the unexpanded name of the exception (if not already set).\n+   --  For a VMS exception fix up the language field with \"VMS\" instead of\n+   --  \"Ada\" (gigi needs this), create a constant that will be the value of\n+   --  the VMS condition code and stuff the Interface_Name field with the\n+   --  unexpanded name of the exception (if not already set). For a Ada\n+   --  exception, just stuff the Interface_Name field with the unexpanded\n+   --  name of the exception (if not already set).\n \n    procedure Expand_Pragma_Import_Export_Exception (N : Node_Id) is\n    begin\n-      --  This pragma is only effective on OpenVMS systems, it was ignored\n-      --  on non-VMS systems, and we need to ignore it here as well.\n+      --  This pragma is only effective on OpenVMS systems, it was ignored on\n+      --  non-VMS systems, and we need to ignore it here as well.\n \n       if not OpenVMS_On_Target then\n          return;"}, {"sha": "f44cfb16aae30549873cf7f3967093ddd007fb10", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -3145,10 +3145,8 @@ package body Freeze is\n \n          if Present (ADC) and then Base_Type (Rec) = Rec then\n             if not (Placed_Component\n-                      or else\n-                    Present (SSO_ADC)\n-                      or else\n-                    Is_Packed (Rec))\n+                     or else Present (SSO_ADC)\n+                     or else Is_Packed (Rec))\n             then\n                --  Warn if clause has no effect when no component clause is\n                --  present, but suppress warning if the Bit_Order is required\n@@ -3296,8 +3294,7 @@ package body Freeze is\n             while Present (Comp) loop\n                if Present (Component_Clause (Comp))\n                  and then (Is_Fixed_Point_Type (Etype (Comp))\n-                             or else\n-                           Is_Bit_Packed_Array (Etype (Comp)))\n+                            or else Is_Bit_Packed_Array (Etype (Comp)))\n                then\n                   Check_Size\n                     (Component_Name (Component_Clause (Comp)),\n@@ -4185,6 +4182,41 @@ package body Freeze is\n                Freeze_Subprogram (E);\n             end if;\n \n+            --  If warning on suspicious contracts then check for the case of\n+            --  a postcondition other than False for a No_Return subprogram.\n+\n+            if No_Return (E)\n+              and then Warn_On_Suspicious_Contract\n+              and then Present (Contract (E))\n+            then\n+               declare\n+                  Prag : Node_Id := Pre_Post_Conditions (Contract (E));\n+                  Exp  : Node_Id;\n+\n+               begin\n+                  while Present (Prag) loop\n+                     if Nam_In (Pragma_Name (Prag), Name_Post,\n+                                                    Name_Postcondition,\n+                                                    Name_Refined_Post)\n+                     then\n+                        Exp :=\n+                          Expression\n+                            (First (Pragma_Argument_Associations (Prag)));\n+\n+                        if Nkind (Exp) /= N_Identifier\n+                          or else Chars (Exp) /= Name_False\n+                        then\n+                           Error_Msg_NE\n+                             (\"useless postcondition, & is marked \"\n+                              & \"No_Return?T?\", Exp, E);\n+                        end if;\n+                     end if;\n+\n+                     Prag := Next_Pragma (Prag);\n+                  end loop;\n+               end;\n+            end if;\n+\n          --  Here for other than a subprogram or type\n \n          else"}, {"sha": "18673029661ccd931a9350960554325b12fbd7d3", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -650,7 +650,6 @@ The GNAT Library\n * GNAT.Wide_Wide_String_Split (g-zistsp.ads)::\n * Interfaces.C.Extensions (i-cexten.ads)::\n * Interfaces.C.Streams (i-cstrea.ads)::\n-* Interfaces.CPP (i-cpp.ads)::\n * Interfaces.Packed_Decimal (i-pacdec.ads)::\n * Interfaces.VxWorks (i-vxwork.ads)::\n * Interfaces.VxWorks.IO (i-vxwoio.ads)::\n@@ -12138,9 +12137,7 @@ convention.  Any declarations useful for interfacing to any language on\n the given hardware architecture should be provided directly in\n @code{Interfaces}.\n @end cartouche\n-Followed. An additional package not defined\n-in the Ada Reference Manual is @code{Interfaces.CPP}, used\n-for interfacing to C++.\n+Followed.\n \n @sp 1\n @cartouche\n@@ -19015,7 +19012,6 @@ of GNAT, and will generate a warning message.\n * GNAT.Wide_Wide_String_Split (g-zistsp.ads)::\n * Interfaces.C.Extensions (i-cexten.ads)::\n * Interfaces.C.Streams (i-cstrea.ads)::\n-* Interfaces.CPP (i-cpp.ads)::\n * Interfaces.Packed_Decimal (i-pacdec.ads)::\n * Interfaces.VxWorks (i-vxwork.ads)::\n * Interfaces.VxWorks.IO (i-vxwoio.ads)::\n@@ -20463,17 +20459,6 @@ to C libraries.\n This package is a binding for the most commonly used operations\n on C streams.\n \n-@node Interfaces.CPP (i-cpp.ads)\n-@section @code{Interfaces.CPP} (@file{i-cpp.ads})\n-@cindex @code{Interfaces.CPP} (@file{i-cpp.ads})\n-@cindex  C++ interfacing\n-@cindex  Interfacing, to C++\n-\n-@noindent\n-This package provides facilities for use in interfacing to C++.  It\n-is primarily intended to be used in connection with automated tools\n-for the generation of C++ interfaces.\n-\n @node Interfaces.Packed_Decimal (i-pacdec.ads)\n @section @code{Interfaces.Packed_Decimal} (@file{i-pacdec.ads})\n @cindex @code{Interfaces.Packed_Decimal} (@file{i-pacdec.ads})"}, {"sha": "0c08f0e936efbf93cdec020ae793fd8d6843613a", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -19872,10 +19872,16 @@ Specifies the default behavior of generated skeletons. @var{val} can be either\n \"fail\" or \"pass\", \"fail\" being the default.\n \n @item --passed-tests=@var{val}\n-@cindex @option{--skeleton-default} (@command{gnattest})\n+@cindex @option{--passed-tests} (@command{gnattest})\n Specifies whether or not passed tests should be shown. @var{val} can be either\n \"show\" or \"hide\", \"show\" being the default.\n \n+@item --exit-status=@var{val}\n+@cindex @option{--exit-status} (@command{gnattest})\n+Specifies whether or not generated test driver should return failure exit\n+status if at least one test fails or crashes. @var{val} can be either\n+\"on\" or \"off\", \"off\" being the default.\n+\n \n @item --tests-root=@var{dirname}\n @cindex @option{--tests-root} (@command{gnattest})"}, {"sha": "f7a48608877e3868487187ebf976465e29d521fb", "filename": "gcc/ada/i-cpp.adb", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fi-cpp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fi-cpp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cpp.adb?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -1,35 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                       I N T E R F A C E S . C P P                        --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Dummy body to deal with bootstrap issues (there used to be a real body)\n-\n-package body Interfaces.CPP is\n-end Interfaces.CPP;"}, {"sha": "27db1c2b1fd732f1240b5ee376f224decd44b785", "filename": "gcc/ada/i-cpp.ads", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fi-cpp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fccaf220f3c01660f800b6ea055463823051904c/gcc%2Fada%2Fi-cpp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cpp.ads?ref=fccaf220f3c01660f800b6ea055463823051904c", "patch": "@@ -1,50 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                       I N T E R F A C E S . C P P                        --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  Missing package comment ???\n-\n-with Ada.Tags;\n-\n-package Interfaces.CPP is\n-   pragma Elaborate_Body;\n-   --  We have a dummy body to deal with bootstrap path issues\n-\n-   subtype Vtable_Ptr is Ada.Tags.Tag;\n-\n-   --  These need commenting (this is not an RM package) ???\n-\n-   function Expanded_Name (T : Vtable_Ptr) return String\n-     renames Ada.Tags.Expanded_Name;\n-\n-   function External_Tag (T : Vtable_Ptr) return String\n-     renames Ada.Tags.External_Tag;\n-\n-end Interfaces.CPP;"}, {"sha": "69356cbfb34f1b52974fe5a09c73706adee06be8", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -345,7 +345,6 @@ package body Impunit is\n     (\"i-cexten\", F),  -- Interfaces.C.Extensions\n     (\"i-cil   \", F),  -- Interfaces.CIL\n     (\"i-cilobj\", F),  -- Interfaces.CIL.Object\n-    (\"i-cpp   \", F),  -- Interfaces.CPP\n     (\"i-cstrea\", F),  -- Interfaces.C.Streams\n     (\"i-java  \", F),  -- Interfaces.Java\n     (\"i-javjni\", F),  -- Interfaces.Java.JNI"}, {"sha": "bb57b1c0f8b680513cb7239f09a3fec285b34ad6", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -71,7 +71,8 @@ package Rtsfind is\n    --    of Ada.Wide_Wide_Text_IO.\n \n    --    Names of the form Interfaces_xxx are first level children of\n-   --    Interfaces_CPP refers to package Interfaces.CPP\n+   --    Interfaces. For example, the name Interfaces_Packed_Decimal refers to\n+   --    package Interfaces.Packed_Decimal.\n \n    --    Names of the form System_xxx are first level children of System, whose\n    --    name is System.xxx. For example, the name System_Str_Concat refers to\n@@ -202,7 +203,6 @@ package Rtsfind is\n \n       --  Children of Interfaces\n \n-      Interfaces_CPP,\n       Interfaces_Packed_Decimal,\n \n       --  Package System\n@@ -466,7 +466,7 @@ package Rtsfind is\n            Ada_Wide_Wide_Text_IO_Modular_IO;\n \n    subtype Interfaces_Child is RTU_Id\n-     range Interfaces_CPP .. Interfaces_Packed_Decimal;\n+     range Interfaces_Packed_Decimal .. Interfaces_Packed_Decimal;\n    --  Range of values for children of Interfaces\n \n    subtype System_Child is RTU_Id"}, {"sha": "77fb65b250f9534c0577f233049ee5548ead0db7", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -545,8 +545,8 @@ package body System.Tasking.Stages is\n \n       else\n          --  When the application code says nothing about the task affinity\n-         --  (task without CPU aspect) then the compiler inserts the\n-         --  Unspecified_CPU value which indicates to the run-time library that\n+         --  (task without CPU aspect) then the compiler inserts the value\n+         --  Unspecified_CPU which indicates to the run-time library that\n          --  the task will activate and execute on the same processor as its\n          --  activating task if the activating task is assigned a processor\n          --  (RM D.16(14/3)).\n@@ -557,8 +557,8 @@ package body System.Tasking.Stages is\n             else System.Multiprocessors.CPU_Range (CPU));\n       end if;\n \n-      --  Find parent P of new Task, via master level number. Independent tasks\n-      --  should have Parent = Environment_Task, and all tasks created\n+      --  Find parent P of new Task, via master level number. Independent\n+      --  tasks should have Parent = Environment_Task, and all tasks created\n       --  by independent tasks are also independent. See, for example,\n       --  s-interr.adb, where Interrupt_Manager does \"new Server_Task\". The\n       --  access type is at library level, so the parent of the Server_Task"}, {"sha": "1a6444838a73d8449b448250c9172e7367470053", "filename": "gcc/ada/s-tasuti.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.adb?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -477,8 +477,7 @@ package body System.Tasking.Utilities is\n             (Self_ID, \"Make_Passive: Phase 1, parent waiting\", 'M'));\n \n          --  If parent is in Master_Completion_Sleep, it cannot be on a\n-         --  terminate alternative, hence it cannot have Wait_Count of\n-         --  zero.\n+         --  terminate alternative, hence it cannot have Wait_Count of zero.\n \n          pragma Assert (P.Common.Wait_Count > 0);\n          P.Common.Wait_Count := P.Common.Wait_Count - 1;\n@@ -489,8 +488,7 @@ package body System.Tasking.Utilities is\n \n       else\n          pragma Debug\n-           (Debug.Trace\n-             (Self_ID, \"Make_Passive: Phase 1, parent awake\", 'M'));\n+           (Debug.Trace (Self_ID, \"Make_Passive: Phase 1, parent awake\", 'M'));\n          null;\n       end if;\n "}, {"sha": "122d47ce31250af1ef33c93f2b29141e24de7839", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -5258,9 +5258,7 @@ package body Sem_Prag is\n             --  The copy is needed because the pragma is expanded into other\n             --  constructs which are not acceptable in the N_Contract node.\n \n-            if Acts_As_Spec (PO)\n-              and then GNATprove_Mode\n-            then\n+            if Acts_As_Spec (PO) and then GNATprove_Mode then\n                declare\n                   Prag : constant Node_Id := New_Copy_Tree (N);\n \n@@ -5269,7 +5267,7 @@ package body Sem_Prag is\n \n                   Preanalyze_Assert_Expression\n                     (Get_Pragma_Arg\n-                      (First (Pragma_Argument_Associations (Prag))),\n+                       (First (Pragma_Argument_Associations (Prag))),\n                      Standard_Boolean);\n \n                   --  Preanalyze the corresponding aspect (if any)"}, {"sha": "3eb4869f8f8783196610a67e6d0d18aa3b03cb72", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 85, "deletions": 3, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3e16619ae38fba5a464064046114a6638d1816f/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=d3e16619ae38fba5a464064046114a6638d1816f", "patch": "@@ -58,6 +58,10 @@ package body Sprint is\n    --  requiring Sloc fixup, until Set_Debug_Sloc is called to set the proper\n    --  value. The call clears it back to Empty.\n \n+   First_Debug_Sloc : Source_Ptr;\n+   --  Sloc of first byte of the current output file if we are generating a\n+   --  source debug file.\n+\n    Debug_Sloc : Source_Ptr;\n    --  Sloc of first byte of line currently being written if we are\n    --  generating a source debug file.\n@@ -512,7 +516,38 @@ package body Sprint is\n    procedure Set_Debug_Sloc is\n    begin\n       if Debug_Generated_Code and then Present (Dump_Node) then\n-         Set_Sloc (Dump_Node, Debug_Sloc + Source_Ptr (Column - 1));\n+         declare\n+            Loc : constant Source_Ptr := Sloc (Dump_Node);\n+\n+         begin\n+            --  Do not change the location of nodes defined in package Standard\n+            --  and nodes of pragmas scanned by Targparm.\n+\n+            if Loc <= Standard_Location then\n+               null;\n+\n+            --  Update the location of a node which is part of the current .dg\n+            --  output. This situation occurs in comma separated parameter\n+            --  declarations since each parameter references the same parameter\n+            --  type node (ie. obj1, obj2 : <param-type>).\n+\n+            --  Note: This case is needed here since we cannot use the routine\n+            --  In_Extended_Main_Code_Unit with nodes whose location is a .dg\n+            --  file.\n+\n+            elsif Loc >= First_Debug_Sloc then\n+               Set_Sloc (Dump_Node, Debug_Sloc + Source_Ptr (Column - 1));\n+\n+            --  Do not change the location of nodes which are not part of the\n+            --  generated code\n+\n+            elsif not In_Extended_Main_Code_Unit (Loc) then\n+               null;\n+\n+            else\n+               Set_Sloc (Dump_Node, Debug_Sloc + Source_Ptr (Column - 1));\n+            end if;\n+         end;\n \n          --  We do not know the actual end location in the generated code and\n          --  it could be much closer than in the source code, so play safe.\n@@ -581,6 +616,7 @@ package body Sprint is\n          Debug_Flag_G := False;\n          Debug_Flag_O := False;\n          Debug_Flag_S := False;\n+         First_Debug_Sloc := No_Location;\n \n          --  Dump requested units\n \n@@ -598,6 +634,7 @@ package body Sprint is\n                if Debug_Generated_Code then\n                   Set_Special_Output (Print_Debug_Line'Access);\n                   Create_Debug_Source (Source_Index (U), Debug_Sloc);\n+                  First_Debug_Sloc := Debug_Sloc;\n                   Write_Source_Line (1);\n                   Last_Line_Printed := 1;\n                   Sprint_Node (Cunit (U));\n@@ -1358,10 +1395,55 @@ package body Sprint is\n             Sprint_Node (Component_Definition (Node));\n \n          --  A contract node should not appear in the tree. It is a semantic\n-         --  node attached to entry and [generic] subprogram entities.\n+         --  node attached to entry and [generic] subprogram entities. But we\n+         --  still provide meaningful output, in case called from the debugger.\n \n          when N_Contract =>\n-            raise Program_Error;\n+            declare\n+               P : Node_Id;\n+\n+            begin\n+               Indent_Begin;\n+               Write_Str (\"N_Contract node\");\n+               Write_Eol;\n+\n+               Write_Indent_Str (\"Pre_Post_Conditions\");\n+               Indent_Begin;\n+\n+               P := Pre_Post_Conditions (Node);\n+               while Present (P) loop\n+                  Sprint_Node (P);\n+                  P := Next_Pragma (P);\n+               end loop;\n+\n+               Write_Eol;\n+               Indent_End;\n+\n+               Write_Indent_Str (\"Contract_Test_Cases\");\n+               Indent_Begin;\n+\n+               P := Contract_Test_Cases (Node);\n+               while Present (P) loop\n+                  Sprint_Node (P);\n+                  P := Next_Pragma (P);\n+               end loop;\n+\n+               Write_Eol;\n+               Indent_End;\n+\n+               Write_Indent_Str (\"Classifications\");\n+               Indent_Begin;\n+\n+               P := Classifications (Node);\n+               while Present (P) loop\n+                  Sprint_Node (P);\n+                  P := Next_Pragma (P);\n+               end loop;\n+\n+               Write_Eol;\n+               Indent_End;\n+               Indent_End;\n+            end;\n \n          when N_Decimal_Fixed_Point_Definition =>\n             Write_Str_With_Col_Check_Sloc (\" delta \");"}]}