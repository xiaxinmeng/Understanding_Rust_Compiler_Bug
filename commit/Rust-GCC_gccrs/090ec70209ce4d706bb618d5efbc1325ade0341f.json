{"sha": "090ec70209ce4d706bb618d5efbc1325ade0341f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkwZWM3MDIwOWNlNGQ3MDZiYjYxOGQ1ZWZiYzEzMjVhZGUwMzQxZg==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2014-04-04T21:36:11Z"}, "committer": {"name": "Fabien Ch\u00eane", "email": "fabien@gcc.gnu.org", "date": "2014-04-04T21:36:11Z"}, "message": "decl.c (duplicate_decls): Check for the return of warning_at before emitting a note.\n\n2014-04-04  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n\n\t* decl.c (duplicate_decls): Check for the return of warning_at\n\tbefore emitting a note.\n\t(warn_misplaced_attr_for_class_type): Likewise.\n\t(check_tag_decl): Likewise.\n\nFrom-SVN: r209131", "tree": {"sha": "128c134b9aecdcb6fce17ed46b7487ce07a89482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/128c134b9aecdcb6fce17ed46b7487ce07a89482"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/090ec70209ce4d706bb618d5efbc1325ade0341f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090ec70209ce4d706bb618d5efbc1325ade0341f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/090ec70209ce4d706bb618d5efbc1325ade0341f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090ec70209ce4d706bb618d5efbc1325ade0341f/comments", "author": null, "committer": null, "parents": [{"sha": "eabcc725333106d65a31e74ad93affcf91047ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eabcc725333106d65a31e74ad93affcf91047ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eabcc725333106d65a31e74ad93affcf91047ede"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "4a491cc022821c30e571e65a8442307e89b20cf8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090ec70209ce4d706bb618d5efbc1325ade0341f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090ec70209ce4d706bb618d5efbc1325ade0341f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=090ec70209ce4d706bb618d5efbc1325ade0341f", "patch": "@@ -1,3 +1,10 @@\n+2014-04-04  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+\n+\t* decl.c (duplicate_decls): Check for the return of warning_at\n+\tbefore emitting a note.\n+\t(warn_misplaced_attr_for_class_type): Likewise.\n+\t(check_tag_decl): Likewise.\n+\n 2014-04-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58207"}, {"sha": "34005944246fb8d441df2259d7448949c1c172b8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090ec70209ce4d706bb618d5efbc1325ade0341f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090ec70209ce4d706bb618d5efbc1325ade0341f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=090ec70209ce4d706bb618d5efbc1325ade0341f", "patch": "@@ -1648,10 +1648,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t       && prototype_p (TREE_TYPE (newdecl)))\n \t{\n \t  /* Prototype decl follows defn w/o prototype.  */\n-\t  warning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n-\t\t      \"prototype specified for %q#D\", newdecl);\n-\t  inform (DECL_SOURCE_LOCATION (olddecl),\n-\t\t  \"previous non-prototype definition here\");\n+\t  if (warning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n+\t\t\t  \"prototype specified for %q#D\", newdecl))\n+\t    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t    \"previous non-prototype definition here\");\n \t}\n       else if (VAR_OR_FUNCTION_DECL_P (olddecl)\n \t       && DECL_LANGUAGE (newdecl) != DECL_LANGUAGE (olddecl))\n@@ -4241,12 +4241,12 @@ warn_misplaced_attr_for_class_type (source_location location,\n {\n   gcc_assert (OVERLOAD_TYPE_P (class_type));\n \n-  warning_at (location, OPT_Wattributes,\n-\t      \"attribute ignored in declaration \"\n-\t      \"of %q#T\", class_type);\n-  inform (location,\n-\t  \"attribute for %q#T must follow the %qs keyword\",\n-\t  class_type, class_key_or_enum_as_string (class_type));\n+  if (warning_at (location, OPT_Wattributes,\n+\t\t  \"attribute ignored in declaration \"\n+\t\t  \"of %q#T\", class_type))\n+    inform (location,\n+\t    \"attribute for %q#T must follow the %qs keyword\",\n+\t    class_type, class_key_or_enum_as_string (class_type));\n }\n \n /* Make sure that a declaration with no declarator is well-formed, i.e.\n@@ -4373,12 +4373,12 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n \t       No attribute-specifier-seq shall appertain to an explicit\n \t       instantiation.  */\n \t{\n-\t  warning_at (loc, OPT_Wattributes,\n-\t\t      \"attribute ignored in explicit instantiation %q#T\",\n-\t\t      declared_type);\n-\t  inform (loc,\n-\t\t  \"no attribute can be applied to \"\n-\t\t  \"an explicit instantiation\");\n+\t  if (warning_at (loc, OPT_Wattributes,\n+\t\t\t  \"attribute ignored in explicit instantiation %q#T\",\n+\t\t\t  declared_type))\n+\t    inform (loc,\n+\t\t    \"no attribute can be applied to \"\n+\t\t    \"an explicit instantiation\");\n \t}\n       else\n \twarn_misplaced_attr_for_class_type (loc, declared_type);"}]}