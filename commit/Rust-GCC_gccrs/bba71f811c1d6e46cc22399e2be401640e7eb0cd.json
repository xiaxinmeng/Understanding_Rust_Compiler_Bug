{"sha": "bba71f811c1d6e46cc22399e2be401640e7eb0cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJhNzFmODExYzFkNmU0NmNjMjIzOTllMmJlNDAxNjQwZTdlYjBjZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-10-12T16:26:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-10-12T16:26:09Z"}, "message": "[PATCH] Improve FSM threader to handle compiler temporaries too\n\n\t* tree-ssa-threadbackward.c (fsm_find_thread_path): Remove\n\trestriction that traced SSA_NAME is a user variable.\n\n\t* gcc.dg/tree-ssa/ssa-dom-thread-11.c: New test.\n\nFrom-SVN: r228727", "tree": {"sha": "f4680d8079492521c929b8fd10c724766b61c8e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4680d8079492521c929b8fd10c724766b61c8e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bba71f811c1d6e46cc22399e2be401640e7eb0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba71f811c1d6e46cc22399e2be401640e7eb0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba71f811c1d6e46cc22399e2be401640e7eb0cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba71f811c1d6e46cc22399e2be401640e7eb0cd/comments", "author": null, "committer": null, "parents": [{"sha": "56102c7f975bf2442c7e456ba58869aa8cbd40c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56102c7f975bf2442c7e456ba58869aa8cbd40c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56102c7f975bf2442c7e456ba58869aa8cbd40c7"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "32ec554fb9120f7b1df458e9723b3cb214c5b1f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba71f811c1d6e46cc22399e2be401640e7eb0cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba71f811c1d6e46cc22399e2be401640e7eb0cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bba71f811c1d6e46cc22399e2be401640e7eb0cd", "patch": "@@ -1,3 +1,8 @@\n+2015-10-12  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (fsm_find_thread_path): Remove\n+\trestriction that traced SSA_NAME is a user variable.\n+\n 2015-10-12  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67476"}, {"sha": "89f33632865815b41f9d212ec61e8c0196a848e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba71f811c1d6e46cc22399e2be401640e7eb0cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba71f811c1d6e46cc22399e2be401640e7eb0cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bba71f811c1d6e46cc22399e2be401640e7eb0cd", "patch": "@@ -1,3 +1,7 @@\n+2015-10-12  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-11.c: New test.\n+\n 2015-10-12  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/58566"}, {"sha": "03d033456a1026ab7db8b90494f85110e181f464", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-11.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba71f811c1d6e46cc22399e2be401640e7eb0cd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba71f811c1d6e46cc22399e2be401640e7eb0cd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-11.c?ref=bba71f811c1d6e46cc22399e2be401640e7eb0cd", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp2-details\" } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"vrp2\" } } */\n+\n+void abort (void);\n+typedef struct bitmap_head_def *bitmap;\n+typedef const struct bitmap_head_def *const_bitmap;\n+typedef struct bitmap_obstack\n+{\n+  struct bitmap_obstack *next;\n+  unsigned int indx;\n+}\n+bitmap_element;\n+typedef struct bitmap_head_def\n+{\n+  bitmap_element *first;\n+}\n+bitmap_head;\n+static __inline__ unsigned char\n+bitmap_elt_ior (bitmap dst, bitmap_element * dst_elt,\n+\t\tbitmap_element * dst_prev, const bitmap_element * a_elt,\n+\t\tconst bitmap_element * b_elt)\n+{\n+  ((void) (!(a_elt || b_elt) ? abort (), 0 : 0));\n+}\n+\n+unsigned char\n+bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n+\t\t      const_bitmap kill)\n+{\n+  bitmap_element *dst_elt = dst->first;\n+  const bitmap_element *a_elt = a->first;\n+  const bitmap_element *b_elt = b->first;\n+  const bitmap_element *kill_elt = kill->first;\n+  bitmap_element *dst_prev = ((void *) 0);\n+  while (a_elt || b_elt)\n+    {\n+      if (b_elt && kill_elt && kill_elt->indx == b_elt->indx\n+\t  && (!a_elt || a_elt->indx >= b_elt->indx));\n+      else\n+\t{\n+\t  bitmap_elt_ior (dst, dst_elt, dst_prev, a_elt, b_elt);\n+\t  if (a_elt && b_elt && a_elt->indx == b_elt->indx)\n+\t    ;\n+\t  else if (a_elt && (!b_elt || a_elt->indx <= b_elt->indx))\n+\t    a_elt = a_elt->next;\n+\t}\n+    }\n+}"}, {"sha": "ff6481c95475d48df86e1fd5b15ed9a42a60334a", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba71f811c1d6e46cc22399e2be401640e7eb0cd/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba71f811c1d6e46cc22399e2be401640e7eb0cd/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=bba71f811c1d6e46cc22399e2be401640e7eb0cd", "patch": "@@ -70,7 +70,7 @@ fsm_find_thread_path (basic_block start_bb, basic_block end_bb,\n   return false;\n }\n \n-/* We trace the value of the variable EXPR back through any phi nodes looking\n+/* We trace the value of the SSA_NAME EXPR back through any phi nodes looking\n    for places where it gets a constant value and save the path.  Stop after\n    having recorded MAX_PATHS jump threading paths.  */\n \n@@ -80,11 +80,10 @@ fsm_find_control_statement_thread_paths (tree expr,\n \t\t\t\t\t vec<basic_block, va_gc> *&path,\n \t\t\t\t\t bool seen_loop_phi)\n {\n-  tree var = SSA_NAME_VAR (expr);\n   gimple *def_stmt = SSA_NAME_DEF_STMT (expr);\n   basic_block var_bb = gimple_bb (def_stmt);\n \n-  if (var == NULL || var_bb == NULL)\n+  if (var_bb == NULL)\n     return;\n \n   /* For the moment we assume that an SSA chain only contains phi nodes, and"}]}