{"sha": "be6aaf7f3d34989e7b5edfac198b3244cb1c9acc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2YWFmN2YzZDM0OTg5ZTdiNWVkZmFjMTk4YjMyNDRjYjFjOWFjYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:56:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:56:20Z"}, "message": "(Generic_Separately_Compiled): Rename to Generic_May_Lack_ALI...\n\n\t(Generic_Separately_Compiled): Rename to Generic_May_Lack_ALI, more\n\tdescriptive of the current use of the predicate, and update\n\tdocumentation.\n\nFrom-SVN: r127469", "tree": {"sha": "87772bc1dd07878e1a94d00b3a79d3867f3394a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87772bc1dd07878e1a94d00b3a79d3867f3394a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be6aaf7f3d34989e7b5edfac198b3244cb1c9acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6aaf7f3d34989e7b5edfac198b3244cb1c9acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6aaf7f3d34989e7b5edfac198b3244cb1c9acc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6aaf7f3d34989e7b5edfac198b3244cb1c9acc/comments", "author": null, "committer": null, "parents": [{"sha": "f9622ab1437942c5173dfbb694556b51ffc04d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9622ab1437942c5173dfbb694556b51ffc04d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9622ab1437942c5173dfbb694556b51ffc04d89"}], "stats": {"total": 55, "additions": 18, "deletions": 37}, "files": [{"sha": "33d8727ae8800e30a45fc0997547bd6f42db553e", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6aaf7f3d34989e7b5edfac198b3244cb1c9acc/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6aaf7f3d34989e7b5edfac198b3244cb1c9acc/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=be6aaf7f3d34989e7b5edfac198b3244cb1c9acc", "patch": "@@ -593,42 +593,23 @@ package Lib is\n    --  time stamp are also output. File_Names_Only also restricts the list to\n    --  exclude any predefined files.\n \n-   function Generic_Separately_Compiled (E : Entity_Id) return Boolean;\n-   --  This is the old version of tbe documentation of this function:\n-   --\n-   --  Most generic units must be separately compiled. Since we always use\n+   function Generic_May_Lack_ALI (Sfile : File_Name_Type) return Boolean;\n+   --  Generic units must be separately compiled. Since we always use\n    --  macro substitution for generics, the resulting object file is a dummy\n-   --  one with no code, but the ali file has the normal form, and we need\n-   --  this ali file so that the binder can work out a correct order of\n-   --  elaboration. However, we do not need to separate compile generics\n-   --  if the generic files are language defined, since in this case there\n-   --  are no order of elaborration problems, and we can simply incorporate\n-   --  the context clause of the generic unit into the client. There are two\n-   --  reasons for making this exception for predefined units. First, clearly\n-   --  it is more efficient not to introduce extra unnecessary files. Second,\n-   --  the old version of GNAT did not compile any generic units. That was\n-   --  clearly incorrect in some cases of complex order of elaboration and\n-   --  was fixed in version 3.10 of GNAT. However, the transition would have\n-   --  caused bootstrap path problems in the case of generics used in the\n-   --  compiler itself. The only such generics are predefined ones. This\n-   --  function returns True if the given generic unit entity E is for a\n-   --  generic unit that should be separately compiled, and false otherwise.\n-   --\n-   --  Now GNAT can compile any generic unit including predefined ones, but\n-   --  because of the backward compatibility (to keep the ability to use old\n-   --  compiler versions to build GNAT) compiling library generics is an\n-   --  option. That is, now GNAT compiles a library generic as an ordinary\n-   --  unit, but it also can build an exeutable in case if its library contains\n-   --  some (or all) predefined generics non compiled. See 9628-002 for the\n-   --  description of changes to be done to get rid of a special processing of\n-   --  library generic.\n-   --\n-   --  So now this function returns TRUE if a generic MUST be separately\n-   --  compiled with the current approach.\n-\n-   function Generic_Separately_Compiled\n-     (Sfile : File_Name_Type) return  Boolean;\n-   --  Same as the previous function, but works directly on a unit file name\n+   --  one with no code, but the ALI file has the normal form, and we need\n+   --  this ALI file so that the binder can work out a correct order of\n+   --  elaboration.\n+\n+   --  However, ancient versions of GNAT used to not generate code or ALI\n+   --  files for generic units, and this would yield complex order of\n+   --  elaboration issues. These were fixed in GNAT 3.10. The support for not\n+   --  compiling language-defined library generics was retained nonetheless\n+   --  to facilitate bootstrap. Specifically, it is convenient to have\n+   --  the same list of files to be compiled for all stages. So, if the\n+   --  bootstrap compiler does not generate code for a given file, then\n+   --  the stage1 compiler (and binder) also must deal with the case of\n+   --  that file not being compiled. The predicate Generic_May_Lack_ALI is\n+   --  True for those generic units for which missing ALI files are allowed.\n \n private\n    pragma Inline (Cunit);\n@@ -756,8 +737,8 @@ private\n    --  Type to hold list of indirect references to unit number table\n \n    type Load_Stack_Entry is record\n-      Unit_Number       : Unit_Number_Type;\n-      From_Limited_With : Boolean;\n+      Unit_Number : Unit_Number_Type;\n+      With_Node   : Node_Id;\n    end record;\n \n    --  The Load_Stack table contains a list of unit numbers (indices into the"}]}