{"sha": "574badbc83dc195ec759868ddf1caf45806f957d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0YmFkYmM4M2RjMTk1ZWM3NTk4NjhkZGYxY2FmNDU4MDZmOTU3ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-04-08T18:22:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-04-08T18:22:54Z"}, "message": "crtbegin.asm, [...]: New files.\n\n* alpha/crtbegin.asm, alpha/crtend.asm, alpha/t-crtb: New files.\n* configure.in (alpha-*-linux*): Use them.\n\nFrom-SVN: r19051", "tree": {"sha": "1f70913172d8a281c6209edc95ccdaaa2286797b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f70913172d8a281c6209edc95ccdaaa2286797b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/574badbc83dc195ec759868ddf1caf45806f957d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574badbc83dc195ec759868ddf1caf45806f957d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574badbc83dc195ec759868ddf1caf45806f957d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574badbc83dc195ec759868ddf1caf45806f957d/comments", "author": null, "committer": null, "parents": [{"sha": "df89b5e780040cd1335a0783a625527e0249458b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df89b5e780040cd1335a0783a625527e0249458b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df89b5e780040cd1335a0783a625527e0249458b"}], "stats": {"total": 235, "additions": 231, "deletions": 4}, "files": [{"sha": "54d72b583e6766b8d3f51c5d2e86516732283563", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=574badbc83dc195ec759868ddf1caf45806f957d", "patch": "@@ -1,3 +1,8 @@\n+Wed Apr  8 18:21:30 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha/crtbegin.asm, alpha/crtend.asm, alpha/t-crtb: New files.\n+\t* configure.in (alpha-*-linux*): Use them.\n+\n Fri Apr  3 17:02:13 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n  \n  \t* tree.def (EXPR_WITH_FILE_LOCATION): New tree node definition."}, {"sha": "dfb11e51eab86c91e708cf95c27914487b88c54e", "filename": "gcc/config/alpha/crtbegin.asm", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm?ref=574badbc83dc195ec759868ddf1caf45806f957d", "patch": "@@ -0,0 +1,104 @@\n+ # Copyright (C) 1996, 1998 Free Software Foundation, Inc.\n+ #  Contributed by Richard Henderson (rth@tamu.edu)\n+ #\n+ # This file is free software; you can redistribute it and/or modify it\n+ # under the terms of the GNU General Public License as published by the\n+ # Free Software Foundation; either version 2, or (at your option) any\n+ # later version.\n+ # \n+ # In addition to the permissions in the GNU General Public License, the\n+ # Free Software Foundation gives you unlimited permission to link the\n+ # compiled version of this file with other programs, and to distribute\n+ # those programs without any restriction coming from the use of this\n+ # file.  (The General Public License restrictions do apply in other\n+ # respects; for example, they cover modification of the file, and\n+ # distribution when not linked into another program.)\n+ # \n+ # This file is distributed in the hope that it will be useful, but\n+ # WITHOUT ANY WARRANTY; without even the implied warranty of\n+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ # General Public License for more details.\n+ # \n+ # You should have received a copy of the GNU General Public License\n+ # along with this program; see the file COPYING.  If not, write to\n+ # the Free Software Foundation, 59 Temple Place - Suite 330,\n+ # Boston, MA 02111-1307, USA.\n+ # \n+ #    As a special exception, if you link this library with files\n+ #    compiled with GCC to produce an executable, this does not cause\n+ #    the resulting executable to be covered by the GNU General Public License.\n+ #    This exception does not however invalidate any other reasons why\n+ #    the executable file might be covered by the GNU General Public License.\n+\n+ #\n+ # Heads of the constructor/destructor lists.\n+ #\n+\n+ # The __*TOR_LIST__ symbols are not global because when this file is used\n+ # in a shared library, we do not want the symbol to fall over to the\n+ # application's lists.\n+\n+.section .ctors,\"aw\"\n+\n+\t.align 3\n+__CTOR_LIST__:\n+\t.quad -1\n+\n+.section .dtors,\"aw\"\n+\n+\t.align 3\n+__DTOR_LIST__:\n+\t.quad -1\n+\n+\n+ #\n+ # Fragment of the ELF _fini routine that invokes our dtor cleanup.\n+ #\n+\n+.section .fini,\"ax\"\n+\n+\t# Since the bits of the _fini function are spread across many\n+\t# object files, each potentially with its own GP, we must\n+\t# assume we need to load ours.  Further, our .fini section\n+\t# can easily be more than 4MB away from our .text bits so we\n+\t# can't use bsr.\n+\n+\tbr      $29,1f\n+1:\tldgp    $29,0($29)\n+\tjsr     $26,__do_global_dtors_aux\n+\n+\t# Must match the alignment we got from crti.o else we get\n+\t# zero-filled holes in our _fini function and then SIGILL.\n+\t.align 3\n+\n+ #\n+ # Invoke our destructors in order.\n+ #\n+\n+.text\n+\n+\t.align 3\n+\t.ent __do_global_dtors_aux\n+\n+__do_global_dtors_aux:\n+\tldgp\t$29,0($27)\n+\tlda     $30,-16($30)\n+\t.frame  $30,16,$26,0\n+\tstq     $26,0($30)\n+\t.mask   0x4000000,-16\n+\t.prologue 1\n+\n+\tlda     $1,__DTOR_LIST__\n+\tbr      1f\n+0:\tstq\t$1,8($30)\n+\tjsr     $26,($27)\n+\tldq\t$1,8($30)\n+1:\tldq     $27,8($1)\n+\taddq    $1,8,$1\n+\tbne     $27,0b\n+\n+\tldq     $26,0($30)\n+\tlda     $30,16($30)\n+\tret\n+\n+\t.end __do_global_dtors_aux"}, {"sha": "36f11b9723aa98a1bdef00c84deb2683d1b022ef", "filename": "gcc/config/alpha/crtend.asm", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfig%2Falpha%2Fcrtend.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfig%2Falpha%2Fcrtend.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fcrtend.asm?ref=574badbc83dc195ec759868ddf1caf45806f957d", "patch": "@@ -0,0 +1,105 @@\n+ # Copyright (C) 1996 Free Software Foundation, Inc.\n+ #  Contributed by Richard Henderson (rth@tamu.edu)\n+ #\n+ # This file is free software; you can redistribute it and/or modify it\n+ # under the terms of the GNU General Public License as published by the\n+ # Free Software Foundation; either version 2, or (at your option) any\n+ # later version.\n+ # \n+ # In addition to the permissions in the GNU General Public License, the\n+ # Free Software Foundation gives you unlimited permission to link the\n+ # compiled version of this file with other programs, and to distribute\n+ # those programs without any restriction coming from the use of this\n+ # file.  (The General Public License restrictions do apply in other\n+ # respects; for example, they cover modification of the file, and\n+ # distribution when not linked into another program.)\n+ # \n+ # This file is distributed in the hope that it will be useful, but\n+ # WITHOUT ANY WARRANTY; without even the implied warranty of\n+ # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ # General Public License for more details.\n+ # \n+ # You should have received a copy of the GNU General Public License\n+ # along with this program; see the file COPYING.  If not, write to\n+ # the Free Software Foundation, 59 Temple Place - Suite 330,\n+ # Boston, MA 02111-1307, USA.\n+ # \n+ #    As a special exception, if you link this library with files\n+ #    compiled with GCC to produce an executable, this does not cause\n+ #    the resulting executable to be covered by the GNU General Public License.\n+ #    This exception does not however invalidate any other reasons why\n+ #    the executable file might be covered by the GNU General Public License.\n+\n+ #\n+ # Tails of the constructor/destructor lists.\n+ #\n+\n+ # The __*TOR_END__ symbols are not global because when this file is used\n+ # in a shared library, we do not want the symbol to fall over to the\n+ # application's lists.\n+\n+.section .ctors,\"aw\"\n+\n+\t.align 3\n+__CTOR_END__:\n+\t.quad   0\n+\n+.section .dtors,\"aw\"\n+\n+\t.align 3\n+__DTOR_END__:\n+\t.quad   0\n+\n+\n+ #\n+ # Fragment of the ELF _init routine that invokes our ctor startup\n+ #\n+\n+.section .init,\"ax\"\n+\n+\t# Since the bits of the _init function are spread across many\n+\t# object files, each potentially with its own GP, we must\n+\t# assume we need to load ours.  Further, our .init section\n+\t# can easily be more than 4MB away from our .text bits so we\n+\t# can't use bsr.\n+\n+\tbr      $29,1f\n+1:\tldgp    $29,0($29)\n+\tjsr     $26,__do_global_ctors_aux\n+\n+\t# Must match the alignment we got from crti.o else we get\n+\t# zero-filled holes in our _init function and thense SIGILL.\n+\t.align 3\n+\n+ #\n+ # Invoke our destructors in order.\n+ #\n+\n+.text\n+\n+\t.align 3\n+\t.ent __do_global_ctors_aux\n+\n+__do_global_ctors_aux:\n+\tldgp\t$29,0($27)\n+\tlda     $30,-16($30)\n+\t.frame  $30,16,$26,0\n+\tstq     $9,8($30)\n+\tstq     $26,0($30)\n+\t.mask   0x4000200,-16\n+\t.prologue 1\n+\n+\tlda     $9,__CTOR_END__\n+\tbr      1f\n+0:\tjsr     $26,($27)\n+1:\tldq     $27,-8($9)\n+\tsubq    $9,8,$9\n+\tnot     $27,$0\n+\tbne     $0,0b\n+\n+\tldq     $26,0($30)\n+\tldq     $9,8($30)\n+\tlda     $30,16($30)\n+\tret\n+\n+\t.end __do_global_ctors_aux"}, {"sha": "5e82b923c72085dfdf9d7b4344ebf23df902b684", "filename": "gcc/config/alpha/t-crtbe", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfig%2Falpha%2Ft-crtbe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfig%2Falpha%2Ft-crtbe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-crtbe?ref=574badbc83dc195ec759868ddf1caf45806f957d", "patch": "@@ -0,0 +1,9 @@\n+# Effectively disable the crtbegin/end rules using crtstuff.c\n+T = disable\n+\n+# Assemble startup files.\n+crtbegin.o: $(srcdir)/config/alpha/crtbegin.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -o crtbegin.o -x assembler $(srcdir)/config/alpha/crtbegin.asm\n+\n+crtend.o: $(srcdir)/config/alpha/crtend.asm $(GCC_PASSES)\n+\t$(GCC_FOR_TARGET) -c -o crtend.o -x assembler $(srcdir)/config/alpha/crtend.asm"}, {"sha": "05ecc76ee363995c26c6424187aa60dddfd5cc42", "filename": "gcc/configure", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=574badbc83dc195ec759868ddf1caf45806f957d", "patch": "@@ -2016,7 +2016,8 @@ for machine in $build $host $target; do\n \t\ttm_file=\"${tm_file} alpha/elf.h alpha/linux-elf.h alpha/linux.h\"\n \t\txm_defines=USE_BFD\n \t\ttarget_cpu_default=\"MASK_GAS\"\n-\t\ttmake_file=\"t-linux t-linux-gnulibc1 alpha/t-linux\"\n+\t\ttmake_file=\"t-linux t-linux-gnulibc1 alpha/t-linux alpha/t-crtbe\"\n+\t\textra_parts=\"crtbegin.o crtend.o\"\n \t\txmake_file=none\n \t\tgas=yes gnu_ld=yes\n  \t\tif [ x$enable_threads = xyes ]; then\n@@ -2027,7 +2028,8 @@ for machine in $build $host $target; do\n \t\ttm_file=\"${tm_file} alpha/elf.h alpha/linux-elf.h alpha/linux.h\"\n \t\txm_defines=USE_BFD\n \t\ttarget_cpu_default=\"MASK_GAS\"\n-\t\ttmake_file=\"t-linux alpha/t-linux\"\n+\t\ttmake_file=\"t-linux alpha/t-linux alpha/t-crtbe\"\n+\t\textra_parts=\"crtbegin.o crtend.o\"\n \t\txmake_file=none\n \t\tfixincludes=Makefile.in\n \t\tgas=yes gnu_ld=yes"}, {"sha": "0bd227947a3bbed18848e3438c72e996ae7830c4", "filename": "gcc/configure.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574badbc83dc195ec759868ddf1caf45806f957d/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=574badbc83dc195ec759868ddf1caf45806f957d", "patch": "@@ -333,7 +333,8 @@ for machine in $build $host $target; do\n \t\ttm_file=\"${tm_file} alpha/elf.h alpha/linux-elf.h alpha/linux.h\"\n \t\txm_defines=USE_BFD\n \t\ttarget_cpu_default=\"MASK_GAS\"\n-\t\ttmake_file=\"t-linux t-linux-gnulibc1 alpha/t-linux\"\n+\t\ttmake_file=\"t-linux t-linux-gnulibc1 alpha/t-linux alpha/t-crtbe\"\n+\t\textra_parts=\"crtbegin.o crtend.o\"\n \t\txmake_file=none\n \t\tgas=yes gnu_ld=yes\n  \t\tif [[ x$enable_threads = xyes ]]; then\n@@ -344,7 +345,8 @@ for machine in $build $host $target; do\n \t\ttm_file=\"${tm_file} alpha/elf.h alpha/linux-elf.h alpha/linux.h\"\n \t\txm_defines=USE_BFD\n \t\ttarget_cpu_default=\"MASK_GAS\"\n-\t\ttmake_file=\"t-linux alpha/t-linux\"\n+\t\ttmake_file=\"t-linux alpha/t-linux alpha/t-crtbe\"\n+\t\textra_parts=\"crtbegin.o crtend.o\"\n \t\txmake_file=none\n \t\tfixincludes=Makefile.in\n \t\tgas=yes gnu_ld=yes"}]}