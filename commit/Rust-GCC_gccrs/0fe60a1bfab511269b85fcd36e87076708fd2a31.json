{"sha": "0fe60a1bfab511269b85fcd36e87076708fd2a31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlNjBhMWJmYWI1MTEyNjliODVmY2QzNmU4NzA3NjcwOGZkMmEzMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-06-10T20:24:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-06-10T20:24:45Z"}, "message": "md.texi: Document the \"unspec\" and \"unspecv\" enum names.\n\ngcc/\n\t* doc/md.texi: Document the \"unspec\" and \"unspecv\" enum names.\n\t* Makefile.in (OBJS-common): Include insn-enums.o.\n\t(insn-enums.o): New rule.\n\t(simple_generated_c): Add insn-enums.c.\n\t(build/genenums.o): New rule.\n\t(genprogmd): Add \"enums\".\n\t* genconstants.c (print_enum_type): Declare a C string array\n\tfor each enum.\n\t* genenums.c: New file.\n\t* print-rtl.c (print_rtx): If defined, use the \"unspecv\" enum\n\tfor UNSPEC_VOLATILE.  If defined, use the \"unspec\" enum for both\n\tUNSPEC and (as a fallback) for UNSPEC_VOLATILE.\n\nFrom-SVN: r160582", "tree": {"sha": "9ddd3e71e5eb92c8ed67ae5ff399982b7ba29d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ddd3e71e5eb92c8ed67ae5ff399982b7ba29d71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fe60a1bfab511269b85fcd36e87076708fd2a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe60a1bfab511269b85fcd36e87076708fd2a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe60a1bfab511269b85fcd36e87076708fd2a31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe60a1bfab511269b85fcd36e87076708fd2a31/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f4fe86cd10bfe5e02237768c40b258b0e668abf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4fe86cd10bfe5e02237768c40b258b0e668abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4fe86cd10bfe5e02237768c40b258b0e668abf"}], "stats": {"total": 138, "additions": 136, "deletions": 2}, "files": [{"sha": "b59e312865196171139f356ca48bb8f8981ab291", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fe60a1bfab511269b85fcd36e87076708fd2a31", "patch": "@@ -1,3 +1,18 @@\n+2010-06-10  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/md.texi: Document the \"unspec\" and \"unspecv\" enum names.\n+\t* Makefile.in (OBJS-common): Include insn-enums.o.\n+\t(insn-enums.o): New rule.\n+\t(simple_generated_c): Add insn-enums.c.\n+\t(build/genenums.o): New rule.\n+\t(genprogmd): Add \"enums\".\n+\t* genconstants.c (print_enum_type): Declare a C string array\n+\tfor each enum.\n+\t* genenums.c: New file.\n+\t* print-rtl.c (print_rtx): If defined, use the \"unspecv\" enum\n+\tfor UNSPEC_VOLATILE.  If defined, use the \"unspec\" enum for both\n+\tUNSPEC and (as a fallback) for UNSPEC_VOLATILE.\n+\n 2010-06-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* doc/md.texi (define_enum_attr): Document."}, {"sha": "c47ee954d2b799a828c0e41ecb448c4c2858a3f1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0fe60a1bfab511269b85fcd36e87076708fd2a31", "patch": "@@ -1164,6 +1164,7 @@ OBJS-common = \\\n \tinsn-peep.o \\\n \tinsn-preds.o \\\n \tinsn-recog.o \\\n+\tinsn-enums.o \\\n \t$(GGC) \\\n \talias.o \\\n \talloc-pool.o \\\n@@ -3534,6 +3535,7 @@ insn-emit.o : insn-emit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\\\n   dfp.h $(FLAGS_H) output.h insn-config.h hard-reg-set.h $(RECOG_H)\t\\\n   $(RESOURCE_H) reload.h $(TOPLEV_H) $(REGS_H) tm-constrs.h $(GGC_H)\t\\\n   $(BASIC_BLOCK_H) $(INTEGRATE_H)\n+insn-enums.o : insn-enums.c $(CONFIG_H) $(SYSTEM_H)\n insn-extract.o : insn-extract.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) $(TOPLEV_H) insn-config.h $(RECOG_H)\n insn-modes.o : insn-modes.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t$(TM_H) \\\n@@ -3573,7 +3575,7 @@ simple_rtl_generated_c\t= insn-attrtab.c insn-automata.c insn-emit.c \\\n \n simple_generated_h\t= $(simple_rtl_generated_h) insn-constants.h\n \n-simple_generated_c\t= $(simple_rtl_generated_c)\n+simple_generated_c\t= $(simple_rtl_generated_c) insn-enums.c\n \n $(simple_generated_h:insn-%.h=s-%) \\\n $(simple_generated_c:insn-%.c=s-%): s-%: $(MD_DEPS)\n@@ -3817,6 +3819,8 @@ build/genconstants.o : genconstants.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n   coretypes.h errors.h $(READ_MD_H)\n build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n+build/genenums.o : genenums.c $(BCONFIG_H) $(SYSTEM_H)\t\t\t\\\n+  coretypes.h errors.h $(READ_MD_H)\n build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H)\t\t\\\n   $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\t\\\n   vecprim.h\n@@ -3859,7 +3863,7 @@ genprogrtl = attr attrtab automata codes conditions config emit \\\n $(genprogrtl:%=build/gen%$(build_exeext)): $(BUILD_RTL)\n \n # All these programs use the MD reader ($(BUILD_MD)).\n-genprogmd = $(genprogrtl) mddeps constants\n+genprogmd = $(genprogrtl) mddeps constants enums\n $(genprogmd:%=build/gen%$(build_exeext)): $(BUILD_MD)\n \n # All generator programs need to report errors"}, {"sha": "c37bb0394948484b23b65d61694f3d6dd092939e", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=0fe60a1bfab511269b85fcd36e87076708fd2a31", "patch": "@@ -7997,6 +7997,37 @@ synchronization instructions in a separate @file{sync.md} file,\n it is convenient to define all synchronization-specific enumeration\n values in @file{sync.md} rather than in the main @file{.md} file.\n \n+Some enumeration names have special significance to GCC:\n+\n+@table @code\n+@item unspecv\n+@findex unspec_volatile\n+If an enumeration called @code{unspecv} is defined, GCC will use it\n+when printing out @code{unspec_volatile} expressions.  For example:\n+\n+@smallexample\n+(define_c_enum \"unspecv\" [\n+  UNSPECV_BLOCKAGE\n+])\n+@end smallexample\n+\n+causes GCC to print @samp{(unspec_volatile @dots{} 0)} as:\n+\n+@smallexample\n+(unspec_volatile ... UNSPECV_BLOCKAGE)\n+@end smallexample\n+\n+@item unspec\n+@findex unspec\n+If an enumeration called @code{unspec} is defined, GCC will use\n+it when printing out @code{unspec} expressions.  GCC will also use\n+it when printing out @code{unspec_volatile} expressions unless an\n+@code{unspecv} enumeration is also defined.  You can therefore\n+decide whether to keep separate enumerations for volatile and\n+non-volatile expressions or whether to use the same enumeration\n+for both.\n+@end table\n+\n @findex define_enum\n @anchor{define_enum}\n Another way of defining an enumeration is to use @code{define_enum}:"}, {"sha": "20b19bfd879a7f3cddcdd9739cac06d85b3eecc8", "filename": "gcc/genconstants.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2Fgenconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2Fgenconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconstants.c?ref=0fe60a1bfab511269b85fcd36e87076708fd2a31", "patch": "@@ -69,6 +69,9 @@ print_enum_type (void **slot, void *info ATTRIBUTE_UNUSED)\n   upcase_string (value_name);\n   printf (\"#define %s %d\\n\", value_name, def->num_values);\n \n+  /* Declare the array that is generated by genenum.  */\n+  printf (\"extern const char *const %s_strings[];\\n\", def->name);\n+\n   return 1;\n }\n "}, {"sha": "8cb48360f62ee4437168e42b2833a2b9db348817", "filename": "gcc/genenums.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2Fgenenums.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2Fgenenums.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenenums.c?ref=0fe60a1bfab511269b85fcd36e87076708fd2a31", "patch": "@@ -0,0 +1,66 @@\n+/* Generate from machine description the strings for each enum.\n+   Copyright (C) 2010  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"bconfig.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"errors.h\"\n+#include \"read-md.h\"\n+\n+/* Called via traverse_enum_types.  Emit an enum definition for\n+   enum_type *SLOT.  */\n+\n+static int\n+print_enum_type (void **slot, void *info ATTRIBUTE_UNUSED)\n+{\n+  struct enum_type *def;\n+  struct enum_value *value;\n+\n+  def = (struct enum_type *) *slot;\n+  printf (\"\\nconst char *const %s_strings[] = {\", def->name);\n+  for (value = def->values; value; value = value->next)\n+    {\n+      printf (\"\\n  \\\"%s\\\"\", value->def->name);\n+      if (value->next)\n+\tputc (',', stdout);\n+    }\n+  printf (\"\\n};\\n\");\n+  return 1;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  progname = \"genenums\";\n+\n+  if (!read_md_files (argc, argv, NULL, NULL))\n+    return (FATAL_EXIT_CODE);\n+\n+  puts (\"/* Generated automatically by the program `genenums'\");\n+  puts (\"   from the machine description file.  */\\n\");\n+  puts (\"#include \\\"config.h\\\"\\n\");\n+  puts (\"#include \\\"system.h\\\"\\n\");\n+\n+  traverse_enum_types (print_enum_type, 0);\n+\n+  if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n+    return FATAL_EXIT_CODE;\n+\n+  return SUCCESS_EXIT_CODE;\n+}"}, {"sha": "96e1485b6ae46814f660aadbf53bd41242218918", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe60a1bfab511269b85fcd36e87076708fd2a31/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=0fe60a1bfab511269b85fcd36e87076708fd2a31", "patch": "@@ -411,6 +411,21 @@ print_rtx (const_rtx in_rtx)\n \t    if (NOTE_KIND (in_rtx) == NOTE_INSN_DELETED_LABEL)\n \t      fprintf (outfile, \" %d\",  XINT (in_rtx, i));\n \t  }\n+#if !defined(GENERATOR_FILE) && NUM_UNSPECV_VALUES > 0\n+\telse if (i == 1\n+\t\t && GET_CODE (in_rtx) == UNSPEC_VOLATILE\n+\t\t && XINT (in_rtx, 1) >= 0\n+\t\t && XINT (in_rtx, 1) < NUM_UNSPECV_VALUES)\n+\t  fprintf (outfile, \" %s\", unspecv_strings[XINT (in_rtx, 1)]);\n+#endif\n+#if !defined(GENERATOR_FILE) && NUM_UNSPEC_VALUES > 0\n+\telse if (i == 1\n+\t\t && (GET_CODE (in_rtx) == UNSPEC\n+\t\t     || GET_CODE (in_rtx) == UNSPEC_VOLATILE)\n+\t\t && XINT (in_rtx, 1) >= 0\n+\t\t && XINT (in_rtx, 1) < NUM_UNSPEC_VALUES)\n+\t  fprintf (outfile, \" %s\", unspec_strings[XINT (in_rtx, 1)]);\n+#endif\n \telse\n \t  {\n \t    int value = XINT (in_rtx, i);"}]}