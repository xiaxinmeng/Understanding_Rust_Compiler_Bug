{"sha": "04103ecbaa59ccacc977256ae02e2f63dfd90258", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQxMDNlY2JhYTU5Y2NhY2M5NzcyNTZhZTAyZTJmNjNkZmQ5MDI1OA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-07T18:41:45Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-11T16:13:35Z"}, "message": "testsuite, Objective-c++ : Update diagnostic plugin test.\n\nThe @selector() and @protocol() operators produce var decls\nthese do not work with the example plugin.  Unfortunatetely,\nunlike the ObjC front end, it is not so easy to construct a\nsubstitute expression that works reliably.  Where it does not\nwork we xfail for now.\n\ngcc/testsuite/ChangeLog:\n\n\t* obj-c++.dg/plugin/diagnostic-test-expressions-1.mm:\n\tAdjust testcase to include expressions for @selector and\n\t@protocol. XFAIL where this is still not sufficient to obtain\n\ta disgnostic range.", "tree": {"sha": "52031c83616d4d50805f6d4e9f4b60c20ea4d0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52031c83616d4d50805f6d4e9f4b60c20ea4d0be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04103ecbaa59ccacc977256ae02e2f63dfd90258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04103ecbaa59ccacc977256ae02e2f63dfd90258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04103ecbaa59ccacc977256ae02e2f63dfd90258", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04103ecbaa59ccacc977256ae02e2f63dfd90258/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc3014d80e1072c376687f6fcfa421953a58fdd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3014d80e1072c376687f6fcfa421953a58fdd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3014d80e1072c376687f6fcfa421953a58fdd1"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "988b290ce690ed6f69f7c484861c1a4b3bfafe5e", "filename": "gcc/testsuite/obj-c++.dg/plugin/diagnostic-test-expressions-1.mm", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04103ecbaa59ccacc977256ae02e2f63dfd90258/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04103ecbaa59ccacc977256ae02e2f63dfd90258/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.mm?ref=04103ecbaa59ccacc977256ae02e2f63dfd90258", "patch": "@@ -1,10 +1,13 @@\n /* { dg-do compile } */\n /* { dg-options \"-O -fdiagnostics-show-caret\" } */\n+/* { dg-excess-errors \"tree range 0:0-0:0\" { target { *-*-darwin* } } }  */\n \n /* This file is similar to diagnostic-test-expressions-1.c\n    (see the notes in that file); this file adds test\n    coverage for various Objective C constructs. */\n \n+#include <objc/runtime.h> /* for SEL, Protocol */\n+\n extern void __emit_expression_range (int dummy, ...);\n \n @protocol prot\n@@ -17,7 +20,7 @@ + (int) func2;\n - (void) test_sending_messages;\n + (void) test_class_dot_name;\n - (void) test_at_selector;\n-- (void) test_at_protocol;\n+- (void) test_at_protocol:(int)i;\n - (void) test_at_encode:(int)i;\n @end\n \n@@ -49,27 +52,37 @@ - (void) test_sending_messages\n }\n + (void) test_class_dot_name\n {\n-  __emit_expression_range ( 0, tests.func2 ); /* { dg-warning \"range\" } */\n+  __emit_expression_range ( 0, tests.func2 ); /* { dg-warning \"range\"  } */\n /* { dg-begin-multiline-output \"\" }\n    __emit_expression_range ( 0, tests.func2 );\n                                 ~~~~~~^~~~~\n-   { dg-end-multiline-output \"\" } */\n+   { dg-end-multiline-output \"\"  } */\n }\n - (void) test_at_selector\n {\n-  __emit_expression_range ( 0, @selector(func0) ); /* { dg-warning \"range\" } */\n+  /* For the NeXT runtime, @selector() generates a a var decl which (a) isn't\n+     handled by the plugin, and (b) if it was would not necessarily have the\n+     right location (there is only one var decl uniqued to each selector \n+     spelling, so the location would be that of the first occurrence).  Use an\n+     assignment expression to test the operation.  This isn't reliable here,\n+     unfortunately.  */\n+  SEL aSel;\n+  __emit_expression_range ( 0, aSel = @selector(foo) ); /* { dg-warning \"range\" } */\n /* { dg-begin-multiline-output \"\" }\n-   __emit_expression_range ( 0, @selector(func0) );\n-                                ^~~~~~~~~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n+   __emit_expression_range ( 0, aSel = @selector(foo) );\n+                                ~~~~~^~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" { xfail { *-*-darwin* } } } */\n }\n-- (void) test_at_protocol\n+- (void) test_at_protocol:(int)i\n {\n-  __emit_expression_range ( 0, @protocol(prot) ); /* { dg-warning \"range\" } */\n+  /* As for @selector(), the NeXT runtime generates a a var decl for\n+     @protocol();  Unfortunately, we can't so easily fabricate a mechanism to\n+     handle this (C++ FE turns the assignment op into a NOP).  */\n+  __emit_expression_range ( 0, @protocol(prot) ); /* { dg-warning \"range\" \"\" { xfail { *-*-darwin* && lp64 } } } */\n /* { dg-begin-multiline-output \"\" }\n    __emit_expression_range ( 0, @protocol(prot) );\n                                 ^~~~~~~~~~~~~~~\n-   { dg-end-multiline-output \"\" } */\n+   { dg-end-multiline-output \"\" { xfail { *-*-darwin* && lp64 } } } */\n }\n - (void) test_at_encode:(int)i\n {"}]}