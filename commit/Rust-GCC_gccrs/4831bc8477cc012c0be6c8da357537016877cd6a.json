{"sha": "4831bc8477cc012c0be6c8da357537016877cd6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzMWJjODQ3N2NjMDEyYzBiZTZjOGRhMzU3NTM3MDE2ODc3Y2Q2YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-12T07:29:01Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-12T07:29:01Z"}, "message": "c-common.c (scanf_flag_specs): Add flags ' and I.\n\n\t* c-common.c (scanf_flag_specs): Add flags ' and I.\n\t(strftime_flag_pairs): Disallow any pair of the _, - and 0 flags,\n\tor the ^ and # flags together.\n\t(scan_char_table): Handle the ' and I flags.\n\t(format_types): Add ' and I flags for scanf.\n\ntestsuite:\n\t* gcc.dg/c99-scanf-2.c, gcc.dg/format-ext-2.c: Test ' and I\n\tscanf flags.\n\t* gcc.dg/format-ext-3.c: Test mutually exclusive pairs of strftime\n\tflags.\n\nFrom-SVN: r36842", "tree": {"sha": "3f02f20a32fcd6807d309ecbde7b43d4b9122daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f02f20a32fcd6807d309ecbde7b43d4b9122daa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4831bc8477cc012c0be6c8da357537016877cd6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4831bc8477cc012c0be6c8da357537016877cd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4831bc8477cc012c0be6c8da357537016877cd6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4831bc8477cc012c0be6c8da357537016877cd6a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f7026a014b970b927a12661ee9debe5ddb9458f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7026a014b970b927a12661ee9debe5ddb9458f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7026a014b970b927a12661ee9debe5ddb9458f"}], "stats": {"total": 105, "additions": 84, "deletions": 21}, "files": [{"sha": "80a0937eca35681de6d0f57bb4d607517f02759f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4831bc8477cc012c0be6c8da357537016877cd6a", "patch": "@@ -1,3 +1,11 @@\n+2000-10-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (scanf_flag_specs): Add flags ' and I.\n+\t(strftime_flag_pairs): Disallow any pair of the _, - and 0 flags,\n+\tor the ^ and # flags together.\n+\t(scan_char_table): Handle the ' and I flags.\n+\t(format_types): Add ' and I flags for scanf.\n+\n 2000-10-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (print_char_table): Use the unpromoted type for"}, {"sha": "07384f84cabc486a8b7fd15099024b915b845539", "filename": "gcc/c-common.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4831bc8477cc012c0be6c8da357537016877cd6a", "patch": "@@ -1507,10 +1507,12 @@ static const format_flag_pair printf_flag_pairs[] =\n \n static const format_flag_spec scanf_flag_specs[] =\n {\n-  { '*', 0, N_(\"assignment suppression\"), N_(\"assignment suppression\"),          STD_C89 },\n-  { 'a', 0, N_(\"`a' flag\"),               N_(\"the `a' scanf flag\"),              STD_EXT },\n-  { 'w', 0, N_(\"field width\"),            N_(\"field width in scanf format\"),     STD_C89 },\n-  { 'L', 0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"), STD_C89 },\n+  { '*',  0, N_(\"assignment suppression\"), N_(\"assignment suppression\"),          STD_C89 },\n+  { 'a',  0, N_(\"`a' flag\"),               N_(\"the `a' scanf flag\"),              STD_EXT },\n+  { 'w',  0, N_(\"field width\"),            N_(\"field width in scanf format\"),     STD_C89 },\n+  { 'L',  0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"), STD_C89 },\n+  { '\\'', 0, N_(\"`'' flag\"),               N_(\"the `'' scanf flag\"),              STD_EXT },\n+  { 'I',  0, N_(\"`I' flag\"),               N_(\"the `I' scanf flag\"),              STD_EXT },\n   { 0, 0, NULL, NULL, 0 }\n };\n \n@@ -1540,6 +1542,10 @@ static const format_flag_spec strftime_flag_specs[] =\n static const format_flag_pair strftime_flag_pairs[] =\n {\n   { 'E', 'O', 0, 0 },\n+  { '_', '-', 0, 0 },\n+  { '_', '0', 0, 0 },\n+  { '-', '0', 0, 0 },\n+  { '^', '#', 0, 0 },\n   { 0, 0, 0, 0 }\n };\n \n@@ -1626,19 +1632,20 @@ static const format_char_info print_char_table[] =\n static const format_char_info scan_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"*w\",  \"W\"   },\n-  { \"ouxX\",  1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w\",  \"W\"   },\n-  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"W\"   },\n-  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"cW\"  },\n-  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\", \"cW\"  },\n-  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\", \"cW[\" },\n-  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"W\"   },\n-  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",    \"W\"   },\n+  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"*w'I\", \"W\"   },\n+  { \"u\",     1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w'I\", \"W\"   },\n+  { \"oxX\",   1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w\",   \"W\"   },\n+  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w'\",  \"W\"   },\n+  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",   \"cW\"  },\n+  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\",  \"cW\"  },\n+  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\",  \"cW[\" },\n+  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",   \"W\"   },\n+  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\",     \"W\"   },\n   /* C99 conversion specifiers.  */\n-  { \"FaA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"W\"   },\n+  { \"FaA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w'\",  \"W\"   },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",  \"W\"   },\n-  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\", \"W\"   },\n+  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\",   \"W\"   },\n+  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\",  \"W\"   },\n   { NULL, 0, 0, NOLENGTHS, NULL, NULL }\n };\n \n@@ -1678,7 +1685,7 @@ static const format_kind_info format_types[] =\n     FMT_FLAG_ARG_CONVERT, 'w', 'p', 0, 'L',\n     &integer_type_node, &integer_type_node\n   },\n-  { \"scanf\",    scanf_length_specs,  scan_char_table,  \"*\", NULL, \n+  { \"scanf\",    scanf_length_specs,  scan_char_table,  \"*'I\", NULL, \n     scanf_flag_specs, scanf_flag_pairs,\n     FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE, 'w', 0, '*', 'L',\n     NULL, NULL"}, {"sha": "5081eed62b46c7563a5e2faa2509724b7e87b558", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4831bc8477cc012c0be6c8da357537016877cd6a", "patch": "@@ -1,3 +1,10 @@\n+2000-10-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-scanf-2.c, gcc.dg/format-ext-2.c: Test ' and I\n+\tscanf flags.\n+\t* gcc.dg/format-ext-3.c: Test mutually exclusive pairs of strftime\n+\tflags.\n+\n 2000-10-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/sequence-pt-1.c: New test."}, {"sha": "a740a601c0e1904232a0b5c35060bf5fadc4b8fe", "filename": "gcc/testsuite/gcc.dg/c99-scanf-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-2.c?ref=4831bc8477cc012c0be6c8da357537016877cd6a", "patch": "@@ -22,6 +22,7 @@ foo (int *ip, long long int *llp, wchar_t *ls)\n   scanf (\"%S\", ls); /* { dg-warning \"C\" \"scanf %S\" } */\n   /* The use of operand number $ formats is an X/Open extension.  */\n   scanf (\"%1$d\", ip); /* { dg-warning \"C\" \"scanf $ format\" } */\n-  /* glibc also supports flags ' and I on scanf formats, but GCC\n-     doesn't yet.  */\n+  /* glibc also supports flags ' and I on scanf formats as an extension.  */\n+  scanf (\"%'d\", ip); /* { dg-warning \"C\" \"scanf ' flag\" } */\n+  scanf (\"%Id\", ip); /* { dg-warning \"C\" \"scanf I flag\" } */\n }"}, {"sha": "68c1b03447044b41cb178cdb9fb0f63835c8e0f3", "filename": "gcc/testsuite/gcc.dg/format-ext-2.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-2.c?ref=4831bc8477cc012c0be6c8da357537016877cd6a", "patch": "@@ -15,7 +15,8 @@ extern int scanf (const char *, ...);\n \n void\n foo (quad_t *qp, u_quad_t *uqp, quad_t *qn, long long int *llp,\n-     unsigned long long int *ullp, float *fp, char *s, void **pp, wchar_t *ls)\n+     unsigned long long int *ullp, float *fp, char *s, void **pp, wchar_t *ls,\n+     int *ip, unsigned int *up)\n {\n   /* As an extension, GCC allows the BSD length \"q\" for integer formats.\n      This is largely obsoleted in C99 by %j, %ll and SCNd64.\n@@ -40,6 +41,39 @@ foo (quad_t *qp, u_quad_t *uqp, quad_t *qn, long long int *llp,\n      This should be considered deprecated.\n   */\n   scanf (\"%Ld%Li%Lo%Lu%Lx%LX\", llp, llp, ullp, ullp, ullp, ullp);\n-  /* glibc also supports flags ' and I on scanf formats, but GCC\n-     doesn't yet.  */\n+  /* glibc also supports flags ' and I on scanf formats.  The ' flag applies\n+     to all formats scanning decimal values; the I flag only to decimal integer\n+     formats.\n+  */\n+  scanf (\"%'d%'i%'u%'a%'A%'e%'E%'f%'F%'g%'G\", ip, ip, up, fp, fp, fp, fp,\n+\t fp, fp, fp, fp);\n+  scanf (\"%'o\", up); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'x\", up); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'X\", up); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'n\", ip); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'s\", s); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'[abc]\", s); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'c\", s); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'p\", pp); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'C\", ls); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%'S\", ls); /* { dg-warning \"flag\" \"bad use of ' flag\" } */\n+  scanf (\"%Id%Ii%Iu\", ip, ip, up);\n+  scanf (\"%Ia\", fp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%IA\", fp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%Ie\", fp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%IE\", fp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%If\", fp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%IF\", fp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%Ig\", fp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%IG\", fp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%Io\", up); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%Ix\", up); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%IX\", up); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%In\", ip); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%Is\", s); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%I[abc]\", s); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%Ic\", s); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%Ip\", pp); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%IC\", ls); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n+  scanf (\"%IS\", ls); /* { dg-warning \"flag\" \"bad use of I flag\" } */\n }"}, {"sha": "ea9f2e02910d2a10e1e0740f8150c98a082e2dd1", "filename": "gcc/testsuite/gcc.dg/format-ext-3.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4831bc8477cc012c0be6c8da357537016877cd6a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-3.c?ref=4831bc8477cc012c0be6c8da357537016877cd6a", "patch": "@@ -211,4 +211,10 @@ foo (char *s, size_t m, const struct tm *tp)\n   */\n   strftime (s, m, \"%OC%Og%OG%Oj%OY%Oz%Ok%Ol%Os\", tp); /* { dg-warning \"only last 2\" \"2-digit year\" } */\n   strftime (s, m, \"%OP\", tp); /* { dg-warning \"flag|modifier\" \"bad %OP\" } */\n+  /* The \"-\", \"_\" and \"0\" flags are mutually exclusive.  */\n+  strftime (s, m, \"%-_5C\", tp); /* { dg-warning \"flag\" \"bad %-_\" } */\n+  strftime (s, m, \"%-05C\", tp); /* { dg-warning \"flag\" \"bad %-0\" } */\n+  strftime (s, m, \"%_05C\", tp); /* { dg-warning \"flag\" \"bad %_0\" } */\n+  /* The \"#\" and \"^\" flags are mutually exclusive.  */\n+  strftime (s, m, \"%^#a\", tp); /* { dg-warning \"flag\" \"bad %^#\" } */\n }"}]}