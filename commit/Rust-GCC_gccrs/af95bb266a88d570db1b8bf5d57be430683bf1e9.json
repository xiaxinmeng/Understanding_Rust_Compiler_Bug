{"sha": "af95bb266a88d570db1b8bf5d57be430683bf1e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5NWJiMjY2YTg4ZDU3MGRiMWI4YmY1ZDU3YmU0MzA2ODNiZjFlOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-01-10T23:36:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-01-10T23:36:02Z"}, "message": "decl.c (gnat_to_gnu_component_type): Apply the check for atomic access once the component size is taken into account...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Apply the check\n\tfor atomic access once the component size is taken into account and\n\talso do it if the component type is Atomic or Volatile_Full_Access.\n\nFrom-SVN: r256465", "tree": {"sha": "e261143854165df2a889239587392c9a2348b4c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e261143854165df2a889239587392c9a2348b4c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af95bb266a88d570db1b8bf5d57be430683bf1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af95bb266a88d570db1b8bf5d57be430683bf1e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af95bb266a88d570db1b8bf5d57be430683bf1e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af95bb266a88d570db1b8bf5d57be430683bf1e9/comments", "author": null, "committer": null, "parents": [{"sha": "bdd82c9b9975a8bca850b99cd5cee75e6ed3c127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd82c9b9975a8bca850b99cd5cee75e6ed3c127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd82c9b9975a8bca850b99cd5cee75e6ed3c127"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "e1334f815880beac469cce9ade1c669a242d8293", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95bb266a88d570db1b8bf5d57be430683bf1e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95bb266a88d570db1b8bf5d57be430683bf1e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=af95bb266a88d570db1b8bf5d57be430683bf1e9", "patch": "@@ -1,3 +1,9 @@\n+2018-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_component_type): Apply the check\n+\tfor atomic access once the component size is taken into account and\n+\talso do it if the component type is Atomic or Volatile_Full_Access.\n+\n 2018-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnatvsn.ads: Bump copyright year."}, {"sha": "e8c48c7157a1eaa00382c763e738b2ca12442ce9", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95bb266a88d570db1b8bf5d57be430683bf1e9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95bb266a88d570db1b8bf5d57be430683bf1e9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=af95bb266a88d570db1b8bf5d57be430683bf1e9", "patch": "@@ -5022,9 +5022,6 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n       && tree_fits_uhwi_p (TYPE_SIZE (gnu_type)))\n     gnu_type = make_packable_type (gnu_type, false, max_align);\n \n-  if (Has_Atomic_Components (gnat_array))\n-    check_ok_for_atomic_type (gnu_type, gnat_array, true);\n-\n   /* Get and validate any specified Component_Size.  */\n   gnu_comp_size\n     = validate_size (Component_Size (gnat_array), gnu_type, gnat_array,\n@@ -5071,6 +5068,9 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n \t\t\t  gnat_array);\n     }\n \n+  if (Has_Atomic_Components (gnat_array) || Is_Atomic_Or_VFA (gnat_type))\n+    check_ok_for_atomic_type (gnu_type, gnat_array, true);\n+\n   /* If the component type is a padded type made for a non-bit-packed array\n      of scalars with reverse storage order, we need to propagate the reverse\n      storage order to the padding type since it is the innermost enclosing"}, {"sha": "016f6774cee51e0ade89b96320953ea4d61a62fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95bb266a88d570db1b8bf5d57be430683bf1e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95bb266a88d570db1b8bf5d57be430683bf1e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af95bb266a88d570db1b8bf5d57be430683bf1e9", "patch": "@@ -1,3 +1,7 @@\n+2018-01-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/atomic10.adb: New test.\n+\n 2018-01-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/82367"}, {"sha": "5f99ca66266caae2aeef4678a0395f570d55ba11", "filename": "gcc/testsuite/gnat.dg/atomic10.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af95bb266a88d570db1b8bf5d57be430683bf1e9/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af95bb266a88d570db1b8bf5d57be430683bf1e9/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fatomic10.adb?ref=af95bb266a88d570db1b8bf5d57be430683bf1e9", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws\" }\n+\n+with System.Multiprocessors;\n+\n+procedure Atomic10 is\n+\n+  type Atomic_Unsigned is mod 2 ** 32;\n+  pragma Atomic (Atomic_Unsigned);\n+\n+  Max : Positive := Positive (System.Multiprocessors.Number_Of_CPUs);\n+\n+  Comp_Size : constant := 64 * 8;\n+\n+  subtype Index_Type is Positive range 1 .. Max;\n+\n+  type Array_Type is array (Index_Type) of aliased Atomic_Unsigned; -- { dg-error \"cannot be guaranteed\" }\n+  for Array_Type'Component_Size use Comp_Size;\n+\n+  Slots : Array_Type;\n+begin\n+  for Index in Index_Type loop\n+     Slots (Index) := 0;\n+   end loop;\n+end;"}]}