{"sha": "84e0f57e35738500e44fd21753e31295d4700bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRlMGY1N2UzNTczODUwMGU0NGZkMjE3NTNlMzEyOTVkNDcwMGJmYg==", "commit": {"author": {"name": "Yufeng Zhang", "email": "yufeng.zhang@arm.com", "date": "2014-06-24T16:33:45Z"}, "committer": {"name": "Yufeng Zhang", "email": "yufeng@gcc.gnu.org", "date": "2014-06-24T16:33:45Z"}, "message": "Make the AAPCS64 function return tests more robust.\n\ngcc/testsuite\n\n\t* gcc.target/aarch64/aapcs64/abitest-2.h (saved_return_address): New\n\tglobal variable.\n\t(FUNC_VAL_CHECK): Update to call myfunc via the 'ret' instruction,\n\tinstead of calling sequentially in the C code.\n\t* gcc.target/aarch64/aapcs64/abitest.S (LABEL_TEST_FUNC_RETURN): Store\n\tsaved_return_address to the stack frame where LR register was stored.\n\t(saved_return_address): Declare weak.\n\nFrom-SVN: r211954", "tree": {"sha": "c5373ab1c3e2da02d9311e1b630a245d97e29186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5373ab1c3e2da02d9311e1b630a245d97e29186"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84e0f57e35738500e44fd21753e31295d4700bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e0f57e35738500e44fd21753e31295d4700bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e0f57e35738500e44fd21753e31295d4700bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e0f57e35738500e44fd21753e31295d4700bfb/comments", "author": null, "committer": null, "parents": [{"sha": "3fa591d4b43316e7b7f8d46781793d96893d3374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa591d4b43316e7b7f8d46781793d96893d3374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa591d4b43316e7b7f8d46781793d96893d3374"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "913a9a6ae004780c9e0601cc390ce37a86ec3524", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0f57e35738500e44fd21753e31295d4700bfb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0f57e35738500e44fd21753e31295d4700bfb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84e0f57e35738500e44fd21753e31295d4700bfb", "patch": "@@ -1,3 +1,13 @@\n+2014-06-24  Yufeng Zhang  <yufeng.zhang@arm.com>\n+\n+\t* gcc.target/aarch64/aapcs64/abitest-2.h (saved_return_address): New\n+\tglobal variable.\n+\t(FUNC_VAL_CHECK): Update to call myfunc via the 'ret' instruction,\n+\tinstead of calling sequentially in the C code.\n+\t* gcc.target/aarch64/aapcs64/abitest.S (LABEL_TEST_FUNC_RETURN): Store\n+\tsaved_return_address to the stack frame where LR register was stored.\n+\t(saved_return_address): Declare weak.\n+\n 2014-06-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/33972"}, {"sha": "57492197e5fca961ae2c3ace80dff1c31bf93acf", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest-2.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0f57e35738500e44fd21753e31295d4700bfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0f57e35738500e44fd21753e31295d4700bfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h?ref=84e0f57e35738500e44fd21753e31295d4700bfb", "patch": "@@ -5,6 +5,7 @@\n #include \"validate_memory.h\"\n \n void (*testfunc_ptr)(char* stack);\n+unsigned long long saved_return_address;\n \n /* Helper macros to generate function name.  Example of the function name:\n    func_return_val_1.  */\n@@ -71,6 +72,17 @@ __attribute__ ((noinline)) type FUNC_NAME (id) (int i, double d, type t)  \\\n \t\t\t\t  optimized away.  Using i and d prevents \\\n \t\t\t\t  warnings about unused parameters.\t  \\\n \t\t\t       */\t\t\t\t\t  \\\n+    /* We save and set up the LR register in a way that essentially\t  \\\n+       inserts myfunc () between the return of this function and the\t  \\\n+       continuing execution of its caller.  By doing this, myfunc ()\t  \\\n+       can save and check the exact content of the registers that are\t  \\\n+       used for the function return value.\t\t\t\t  \\\n+       The previous approach of sequentially calling myfunc right after\t  \\\n+       this function does not guarantee myfunc see the exact register\t  \\\n+       content, as compiler may emit code in between the two calls,\t  \\\n+       especially during the -O0 codegen.  */\t\t\t\t  \\\n+    asm volatile (\"mov %0, x30\" : \"=r\" (saved_return_address));\t\t  \\\n+    asm volatile (\"mov x30, %0\" : : \"r\" ((unsigned long long) myfunc));   \\\n     return t;\t\t\t\t\t\t\t\t  \\\n   }\n #include TESTFILE\n@@ -84,7 +96,8 @@ __attribute__ ((noinline)) type FUNC_NAME (id) (int i, double d, type t)  \\\n   {\t\t\t\t\t\t\t\t\t\\\n     testfunc_ptr = TEST_FUNC_NAME(id);\t\t\t\t\t\\\n     FUNC_NAME(id) (0, 0.0, var);\t\t\t\t\t\\\n-    myfunc ();\t\t\t\t\t\t\t\t\\\n+    /* The above function implicitly calls myfunc () on its return,\t\\\n+       and the execution resumes from here after myfunc () finishes.  */\\\n   }\n \n int main()"}, {"sha": "68845fbcdb5e6984d6154b3a8bcd2b04b7ce1f8f", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest.S", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0f57e35738500e44fd21753e31295d4700bfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0f57e35738500e44fd21753e31295d4700bfb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.S?ref=84e0f57e35738500e44fd21753e31295d4700bfb", "patch": "@@ -50,10 +50,15 @@ LABEL_TEST_FUNC_RETURN:\n       add\tx9, x9, :lo12:testfunc_ptr\n       ldr\tx9, [x9, #0]\n       blr\tx9\t\t\t\t// function return value test\n+      adrp\tx9, saved_return_address\n+      add\tx9, x9, :lo12:saved_return_address\n+      ldr\tx9, [x9, #0]\n+      str\tx9, [sp, #8]\t\t\t// Update the copy of LR reg saved on stack\n LABEL_RET:\n       ldp\tx0, x30, [sp]\n       mov\tsp, x0\n       ret\n \n .weak\ttestfunc\n .weak\ttestfunc_ptr\n+.weak\tsaved_return_address"}]}