{"sha": "0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcxMmVhNjMxM2JjNDRmOWFlOGZlYjIzNWMxYjAyYzkyY2RkMDUyNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-04T20:54:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-04T22:22:15Z"}, "message": "c++: Fix constexpr vs. omitted aggregate init.\n\nValue-initialization is importantly different from {}-initialization for\nthis testcase, where the former calls the deleted S constructor and the\nlatter initializes S happily.\n\n\tPR c++/90951\n\t* constexpr.c (cxx_eval_array_reference): {}-initialize missing\n\telements instead of value-initializing them.", "tree": {"sha": "3aa6e9002bb84eff5d079942d90f2d4820928362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa6e9002bb84eff5d079942d90f2d4820928362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0712ea6313bc44f9ae8feb235c1b02c92cdd0527/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c9c9ff06ab15e697d5bac6ea6e5da2df840cf5"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "956e94b23376742e6917337558c41f0a1ee7f573", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712ea6313bc44f9ae8feb235c1b02c92cdd0527/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712ea6313bc44f9ae8feb235c1b02c92cdd0527/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "patch": "@@ -1,5 +1,9 @@\n 2020-02-04  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/90951\n+\t* constexpr.c (cxx_eval_array_reference): {}-initialize missing\n+\telements instead of value-initializing them.\n+\n \tPR c++/86917\n \t* init.c (perform_member_init): Simplify.\n \t* constexpr.c (cx_check_missing_mem_inits): Allow uninitialized"}, {"sha": "8a02c6e07137e293cf45a71b1f1f67d48e57a7be", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712ea6313bc44f9ae8feb235c1b02c92cdd0527/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712ea6313bc44f9ae8feb235c1b02c92cdd0527/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "patch": "@@ -3324,8 +3324,16 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n     }\n \n   /* If it's within the array bounds but doesn't have an explicit\n-     initializer, it's value-initialized.  */\n-  tree val = build_value_init (elem_type, tf_warning_or_error);\n+     initializer, it's initialized from {}.  But use build_value_init\n+     directly for non-aggregates to avoid creating a garbage CONSTRUCTOR.  */\n+  tree val;\n+  if (CP_AGGREGATE_TYPE_P (elem_type))\n+    {\n+      tree empty_ctor = build_constructor (init_list_type_node, NULL);\n+      val = digest_init (elem_type, empty_ctor, tf_warning_or_error);\n+    }\n+  else\n+    val = build_value_init (elem_type, tf_warning_or_error);\n   return cxx_eval_constant_expression (ctx, val, lval, non_constant_p,\n \t\t\t\t       overflow_p);\n }"}, {"sha": "538969830bac19aa7632a2bb97efa6bfce4ee9ad", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array24.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0712ea6313bc44f9ae8feb235c1b02c92cdd0527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0712ea6313bc44f9ae8feb235c1b02c92cdd0527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array24.C?ref=0712ea6313bc44f9ae8feb235c1b02c92cdd0527", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/90951\n+// { dg-do compile { target c++11 } }\n+\n+#define assert(expr) static_assert (expr, #expr)\n+\n+struct S { const char a[2]; };\n+\n+constexpr struct S a[1][1][1] = { };\n+\n+assert ('\\0' == *a[0][0][0].a);"}]}