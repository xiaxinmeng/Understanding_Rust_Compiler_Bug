{"sha": "98e07d5c540a3e094c4e2e0377d530042d2df72f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlMDdkNWM1NDBhM2UwOTRjNGUyZTAzNzdkNTMwMDQyZDJkZjcyZg==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2018-12-06T22:11:01Z"}, "committer": {"name": "Paul Clarke", "email": "pc@gcc.gnu.org", "date": "2018-12-06T22:11:01Z"}, "message": "[rs6000] Fix x86-compat vector intrinsics testcases for BE, 32bit\n\nFix general endian issues found in the test cases for thecompatibility\nimplementations of the x86 vector intrinsics.  (The tests had been\ninadvertently made to PASS without actually running the test code.\nA later patch fixes this issue.)\n\nAdditionally, a new <smmintrin.h> is added, as some of the APIs therein are\nnow used by the test cases.  It is _not_ a complete implementation of the\nSSE4 interfaces, only the few \"extract\" interfaces uses by the tests.\n\n2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n\n[gcc]\n\n\tPR target/88316\n\t* config/rs6000/smmintrin.h: New file.\n\t* config.gcc: Add smmintrin.h to extra_headers for powerpc*-*-*.\n\n[gcc/testsuite]\n\n\tPR target/88316\n\t* gcc.target/powerpc/mmx-packssdw-1.c: Fixes for big-endian.\n\t* gcc.target/powerpc/mmx-packsswb-1.c: Likewise.\n\t* gcc.target/powerpc/mmx-packuswb-1.c: Likewise.\n\t* gcc.target/powerpc/mmx-pmulhw-1.c: Likewise.\n\t* gcc.target/powerpc/sse-cvtpi32x2ps-1.c: Likewise.\n\t* gcc.target/powerpc/sse-cvtpu16ps-1.c: Likewise.\n\t* gcc.target/powerpc/sse-cvtss2si-1.c: Likewise.\n\t* gcc.target/powerpc/sse-cvtss2si-2.c: Likewise.\n\t* gcc.target/powerpc/sse2-pshufhw-1.c: Likewise.\n\t* gcc.target/powerpc/sse2-pshuflw-1.c: Likewise.\n\nFrom-SVN: r266869", "tree": {"sha": "03aac2f34d22c0b8eb9813cce93e414f6c44ef39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03aac2f34d22c0b8eb9813cce93e414f6c44ef39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98e07d5c540a3e094c4e2e0377d530042d2df72f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e07d5c540a3e094c4e2e0377d530042d2df72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e07d5c540a3e094c4e2e0377d530042d2df72f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e07d5c540a3e094c4e2e0377d530042d2df72f/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60c703ed1ea6245c2e5297fb132ecf810677d4eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c703ed1ea6245c2e5297fb132ecf810677d4eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c703ed1ea6245c2e5297fb132ecf810677d4eb"}], "stats": {"total": 315, "additions": 235, "deletions": 80}, "files": [{"sha": "dc596889e34d327702a97aeebb0482b5bc8b9518", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -1,3 +1,9 @@\n+2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/88316\n+\t* config/rs6000/smmintrin.h: New file.\n+\t* config.gcc: Add smmintrin.h to extra_headers for powerpc*-*-*.\n+\n 2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n \n \tPR target/88316"}, {"sha": "71f083555a44e7c9d803734525c7fb551235f842", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -505,7 +505,7 @@ powerpc*-*-*)\n \textra_headers=\"${extra_headers} bmi2intrin.h bmiintrin.h\"\n \textra_headers=\"${extra_headers} xmmintrin.h mm_malloc.h emmintrin.h\"\n \textra_headers=\"${extra_headers} mmintrin.h x86intrin.h\"\n-\textra_headers=\"${extra_headers} pmmintrin.h tmmintrin.h\"\n+\textra_headers=\"${extra_headers} pmmintrin.h tmmintrin.h smmintrin.h\"\n \textra_headers=\"${extra_headers} ppu_intrinsics.h spu2vmx.h vec_types.h si2vmx.h\"\n \textra_headers=\"${extra_headers} amo.h\"\n \tcase x$with_cpu in"}, {"sha": "151bb8d532ec4dbae342ad6444efe4fcd7c06a46", "filename": "gcc/config/rs6000/smmintrin.h", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -0,0 +1,69 @@\n+/* Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Implemented from the specification included in the Intel C++ Compiler\n+   User Guide and Reference, version 9.0.\n+\n+   NOTE: This is NOT a complete implementation of the SSE4 intrinsics!  */\n+\n+#ifndef NO_WARN_X86_INTRINSICS\n+/* This header is distributed to simplify porting x86_64 code that\n+   makes explicit use of Intel intrinsics to powerpc64le.\n+   It is the user's responsibility to determine if the results are\n+   acceptable and make additional changes as necessary.\n+   Note that much code that uses Intel intrinsics can be rewritten in\n+   standard C or GNU C extensions, which are more portable and better\n+   optimized across multiple targets.  */\n+#endif\n+\n+#ifndef SMMINTRIN_H_\n+#define SMMINTRIN_H_\n+\n+#include <altivec.h>\n+#include <tmmintrin.h>\n+\n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_extract_epi8 (__m128i __X, const int __N)\n+{\n+  return (unsigned char) ((__v16qi)__X)[__N & 15];\n+}\n+\n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_extract_epi32 (__m128i __X, const int __N)\n+{\n+  return ((__v4si)__X)[__N & 3];\n+}\n+\n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_extract_epi64 (__m128i __X, const int __N)\n+{\n+  return ((__v2di)__X)[__N & 1];\n+}\n+\n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_extract_ps (__m128 __X, const int __N)\n+{\n+  return ((__v4si)__X)[__N & 3];\n+}\n+\n+#endif"}, {"sha": "de36ed45ebf610d2cf65ac6a64bffb157867c8b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -1,3 +1,17 @@\n+2018-12-06  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\tPR target/88316\n+\t* gcc.target/powerpc/mmx-packssdw-1.c: Fixes for big-endian.\n+\t* gcc.target/powerpc/mmx-packsswb-1.c: Likewise.\n+\t* gcc.target/powerpc/mmx-packuswb-1.c: Likewise.\n+\t* gcc.target/powerpc/mmx-pmulhw-1.c: Likewise.\n+\t* gcc.target/powerpc/sse-cvtpi32x2ps-1.c: Likewise.\n+\t* gcc.target/powerpc/sse-cvtpu16ps-1.c: Likewise.\n+\t* gcc.target/powerpc/sse-cvtss2si-1.c: Likewise.\n+\t* gcc.target/powerpc/sse-cvtss2si-2.c: Likewise.\n+\t* gcc.target/powerpc/sse2-pshufhw-1.c: Likewise.\n+\t* gcc.target/powerpc/sse2-pshuflw-1.c: Likewise.\n+\n 2018-12-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88373 - wrong parse error with ~."}, {"sha": "ecfe2d694cd7eed90e5b1f045be9cc049111c9aa", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-packssdw-1.c", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packssdw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packssdw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packssdw-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -22,37 +22,50 @@ test (__m64 s1, __m64 s2)\n   return _mm_packs_pi32 (s1, s2);\n }\n \n+static short\n+saturate (int val)\n+{\n+  if (val > 32767)\n+    return 32767;\n+  else if (val < -32768)\n+    return -32768;\n+  else\n+    return val;\n+}\n+\n+static inline int\n+l_mm_extract_pi32 (__m64 b, int imm8)\n+{\n+  unsigned int shift = imm8 & 0x1;\n+#ifdef __BIG_ENDIAN__\n+  shift = 1 - shift;\n+#endif\n+  return ((long long)b >> (shift * 32)) & 0xffffffff;\n+}\n+\n static void\n TEST (void)\n {\n   __m64_union s1, s2;\n   __m64_union u;\n   __m64_union e;\n-  int i;\n+  int start, end, inc;\n \n   s1.as_m64 = _mm_set_pi32 (2134, -128);\n   s2.as_m64 = _mm_set_pi32 (41124, 234);\n   u.as_m64 = test (s1.as_m64, s2.as_m64);\n \n-  for (i = 0; i < 2; i++)\n-    {\n-      if (s1.as_int[i] > 32767)\n-        e.as_short[i] = 32767;\n-      else if (s1.as_int[i] < -32768)\n-        e.as_short[i] = -32768;\n-      else\n-        e.as_short[i] = s1.as_int[i];\n-    }\n-  \n-  for (i = 0; i < 2; i++)\n-   {\n-      if (s2.as_int[i] > 32767)\n-        e.as_short[i+2] = 32767;\n-      else if (s2.as_int[i] < -32768)\n-        e.as_short[i+2] = -32768;\n-      else\n-        e.as_short[i+2] = s2.as_int[i];\n-    }\n+#ifdef __LITTLE_ENDIAN__\n+  e.as_m64 = _mm_set_pi16 (saturate (l_mm_extract_pi32 (s2.as_m64, 1)),\n+                           saturate (l_mm_extract_pi32 (s2.as_m64, 0)),\n+                           saturate (l_mm_extract_pi32 (s1.as_m64, 1)),\n+                           saturate (l_mm_extract_pi32 (s1.as_m64, 0)));\n+#else\n+  e.as_m64 = _mm_set_pi16 (saturate (l_mm_extract_pi32 (s1.as_m64, 1)),\n+                           saturate (l_mm_extract_pi32 (s1.as_m64, 0)),\n+                           saturate (l_mm_extract_pi32 (s2.as_m64, 1)),\n+                           saturate (l_mm_extract_pi32 (s2.as_m64, 0)));\n+#endif\n \n   if (u.as_m64 != e.as_m64)\n     abort ();"}, {"sha": "4ca69b126a97aec8e51dccf4dae430f11f63a207", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-packsswb-1.c", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packsswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packsswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packsswb-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -14,6 +14,7 @@\n #include CHECK_H\n \n #include <mmintrin.h>\n+#include <xmmintrin.h>\n \n static __m64\n __attribute__((noinline, unused))\n@@ -22,6 +23,17 @@ test (__m64 s1, __m64 s2)\n   return _mm_packs_pi16 (s1, s2);\n }\n \n+static signed char\n+saturate (signed short val)\n+{\n+  if (val > 127)\n+    return 127;\n+  else if (val < -128)\n+    return -128;\n+  else\n+    return val;\n+}\n+\n static void\n TEST (void)\n {\n@@ -34,25 +46,25 @@ TEST (void)\n   s2.as_m64 = _mm_set_pi16 (41124, 234, 2344, 2354);\n   u.as_m64 = test (s1.as_m64, s2.as_m64);\n \n-  for (i = 0; i < 4; i++)\n-    {\n-      if (s1.as_short[i] > 127)\n-        e.as_char[i] = 127;\n-      else if (s1.as_short[i] < -128)\n-        e.as_char[i] = -128;\n-      else\n-        e.as_char[i] = s1.as_short[i];\n-    }\n-  \n-  for (i = 0; i < 4; i++)\n-   {\n-      if (s2.as_short[i] > 127)\n-        e.as_char[i+4] = 127;\n-      else if (s2.as_short[i] < -128)\n-        e.as_char[i+4] = -128;\n-      else\n-        e.as_char[i+4] = s2.as_short[i];\n-    }\n+#ifdef __LITTLE_ENDIAN__\n+  e.as_m64 = _mm_set_pi8 (saturate (_mm_extract_pi16 (s2.as_m64, 3)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 2)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 1)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 0)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 3)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 2)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 1)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 0)));\n+#else\n+  e.as_m64 = _mm_set_pi8 (saturate (_mm_extract_pi16 (s1.as_m64, 3)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 2)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 1)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 0)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 3)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 2)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 1)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 0)));\n+#endif\n \n   if (u.as_m64 != e.as_m64)\n     abort ();"}, {"sha": "2f74e130823711d6539dd2841a4e6fca6e4f99e8", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-packuswb-1.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packuswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packuswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-packuswb-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -15,6 +15,7 @@\n #include CHECK_H\n \n #include <mmintrin.h>\n+#include <xmmintrin.h>\n \n static __m64\n __attribute__((noinline, unused))\n@@ -23,6 +24,17 @@ test (__m64 s1, __m64 s2)\n   return _mm_packs_pu16 (s1, s2);\n }\n \n+static unsigned char\n+saturate (signed short val)\n+{\n+  if (val > 255)\n+    return 255;\n+  else if (val < 0)\n+    return 0;\n+  else\n+    return val;\n+}\n+\n static void\n TEST (void)\n {\n@@ -35,16 +47,25 @@ TEST (void)\n   s2.as_m64 = _mm_set_pi16 (-9, -10, -11, -12);\n   u.as_m64 = test (s1.as_m64, s2.as_m64);\n \n-  for (i=0; i<4; i++)\n-    {\n-      tmp = s1.as_short[i]<0 ? 0 : s1.as_short[i];\n-      tmp = tmp>255 ? 255 : tmp;\n-      e.as_char[i] = tmp;\n-\n-      tmp = s2.as_short[i]<0 ? 0 : s2.as_short[i];\n-      tmp = tmp>255 ? 255 : tmp;\n-      e.as_char[i+4] = tmp;\n-    }\n+#ifdef __LITTLE_ENDIAN__\n+  e.as_m64 = _mm_set_pi8 (saturate (_mm_extract_pi16 (s2.as_m64, 3)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 2)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 1)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 0)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 3)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 2)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 1)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 0)));\n+#else\n+  e.as_m64 = _mm_set_pi8 (saturate (_mm_extract_pi16 (s1.as_m64, 3)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 2)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 1)),\n+                          saturate (_mm_extract_pi16 (s1.as_m64, 0)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 3)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 2)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 1)),\n+                          saturate (_mm_extract_pi16 (s2.as_m64, 0)));\n+#endif\n \n   if (u.as_m64 != e.as_m64)\n     abort ();"}, {"sha": "631324c4cd96af00b5ac300cf6aacb54e4902f97", "filename": "gcc/testsuite/gcc.target/powerpc/mmx-pmulhw-1.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmulhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmulhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmmx-pmulhw-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -33,12 +33,11 @@ TEST (void)\n   s2.as_m64 = _mm_set_pi16 (11, 9834, 7444, -10222);\n   u.as_m64 = test (s1.as_m64, s2.as_m64);\n \n-  for (i = 0; i < 4; i++)\n-    {\n-      tmp = s1.as_short[i] * s2.as_short[i];\n-\n-      e.as_short[i] = (tmp & 0xffff0000)>>16;\n-    }\n+  e.as_m64 = _mm_set_pi16 (\n+    ((s1.as_short[3] * s2.as_short[3]) & 0xffff0000) >> 16,\n+    ((s1.as_short[2] * s2.as_short[2]) & 0xffff0000) >> 16,\n+    ((s1.as_short[1] * s2.as_short[1]) & 0xffff0000) >> 16,\n+    ((s1.as_short[0] * s2.as_short[0]) & 0xffff0000) >> 16);\n \n   if (u.as_m64 != e.as_m64)\n     abort ();"}, {"sha": "a2539af1c77b9893dc69a8b82d5ffe509011944e", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpi32x2ps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32x2ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32x2ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpi32x2ps-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -27,8 +27,8 @@ static void\n TEST (void)\n {\n   __m64_union s1, s2;\n-  union128 u;\n-  float e[4] = {1000.0, -20000.0, 43.0, 546.0};\n+  union128 u, e;\n+  e.x = _mm_set_ps (546.0, 43.0, -20000.0, 1000.0);\n \n   /* input signed in {1000, -20000, 43, 546}.  */\n   s1.as_m64 = _mm_setr_pi32 (1000, -20000);\n@@ -37,6 +37,6 @@ TEST (void)\n   u.x = test (s1.as_m64, s2.as_m64);\n \n \n-  if (check_union128 (u, e))\n+  if (check_union128 (u, e.a))\n     abort ();\n }"}, {"sha": "0cf187be1901ae9e5ed12d7103f639ef25efcb20", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtpu16ps-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu16ps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu16ps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtpu16ps-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -27,14 +27,14 @@ static void\n TEST (void)\n {\n   __m64_union s1;\n-  union128 u;\n-  float e[4] = {1000.0, 45536.0, 45.0, 65535.0};\n+  union128 u, e;\n+  e.x = _mm_set_ps (65535.0, 45.0, 45536.0, 1000.0);\n \n   /* input unsigned short {1000, 45536, 45, 65535}.  */\n   s1.as_m64 = _mm_setr_pi16 (1000, -20000, 45, -1);\n    \n   u.x = test (s1.as_m64);\n \n-  if (check_union128 (u, e))\n+  if (check_union128 (u, e.a))\n     abort ();\n }"}, {"sha": "c12a98102e6ee79cd525996cfd76dbe52ae3248b", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtss2si-1.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -15,6 +15,7 @@\n #endif\n \n #include <xmmintrin.h>\n+#include <smmintrin.h>\n \n static int\n __attribute__((noinline, unused))\n@@ -29,12 +30,17 @@ TEST (void)\n {\n   union128 s1;\n   int d;\n-  int e;\n+  union {\n+\tfloat f;\n+\tint i;\n+  } e;\n    \n   s1.x = _mm_set_ps (24.43, 68.346, 43.35, 546.46);\n   d = test (s1.x); \n-  e = (int)s1.a[0];  \n \n-  if (e != d)\n+  e.i = _mm_extract_ps (s1.x, 0);\n+  e.i = e.f;\n+\n+  if (e.i != d)\n     abort ();\n }"}, {"sha": "023446eb7fb25edff183fda3f9cd8ba18d01aed6", "filename": "gcc/testsuite/gcc.target/powerpc/sse-cvtss2si-2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse-cvtss2si-2.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -15,6 +15,7 @@\n #endif\n \n #include <xmmintrin.h>\n+#include <smmintrin.h>\n \n static long long\n __attribute__((noinline, unused))\n@@ -29,10 +30,16 @@ TEST (void)\n   union128 s1;\n   long long d;\n   long long e;\n+  union {\n+\tfloat f;\n+\tint i;\n+  } u;\n    \n   s1.x = _mm_set_ps (344.4, 68.346, 43.35, 429496729501.4);\n   d = test (s1.x); \n-  e = (long long)s1.a[0];  \n+\n+  u.i = _mm_extract_ps (s1.x, 0);\n+  e = u.f;\n \n   if (e != d)\n     abort ();"}, {"sha": "7830fd432886e92696633ac4ad5364b9d26bc5a5", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pshufhw-1.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufhw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufhw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshufhw-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -26,24 +26,28 @@ test (__m128i s1)\n static void\n TEST (void)\n {\n-  union128i_q s1;\n-  union128i_w u;\n+  union128i_w s1, u;\n   short  e[8] = { 0 };\n   int i;\n   int m1[4] = { 0x3, 0x3<<2, 0x3<<4, 0x3<<6 };\n   int m2[4];\n   \n-  s1.x = _mm_set_epi64x (0xabcde,0xef58a234);\n+  s1.x = _mm_set_epi16 (0, 0, 0xa, 0xbcde, 0, 0, 0xef58, 0xa234);\n   u.x = test (s1.x);\n \n   for (i = 0; i < 4; i++)\n-    e[i] = (s1.a[0]>>(16 * i)) & 0xffff;\n+    e[i] = s1.a[i];\n \n-  for (i = 0; i < 4; i++)\n-    m2[i] = (N & m1[i])>>(2*i);\n+  for (i = 0; i < 4; i++) {\n+    int i2 = i;\n+#ifdef __LITTLE_ENDIAN__\n+    i2 = 3 - i;\n+#endif\n+    m2[i2] = (N & m1[i2]) >> (2 * i2);\n+  }\n \n   for (i = 0; i < 4; i++)\n-    e[i+4] = (s1.a[1] >> (16 * m2[i])) & 0xffff;\n+    e[i + 4] = s1.a[m2[i] + 4];\n \n   if (check_union128i_w(u, e))\n     {"}, {"sha": "5a014751afc98ec4d4f9ecf979abd00c3e37af4e", "filename": "gcc/testsuite/gcc.target/powerpc/sse2-pshuflw-1.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshuflw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e07d5c540a3e094c4e2e0377d530042d2df72f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshuflw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse2-pshuflw-1.c?ref=98e07d5c540a3e094c4e2e0377d530042d2df72f", "patch": "@@ -26,24 +26,28 @@ test (__m128i s1)\n static void\n TEST (void)\n {\n-  union128i_q s1;\n-  union128i_w u;\n+  union128i_w s1, u;\n   short  e[8] = { 0 };\n   int i;\n   int m1[4] = { 0x3, 0x3<<2, 0x3<<4, 0x3<<6 };\n   int m2[4];\n   \n-  s1.x = _mm_set_epi64x (0xabcde,0xef58a234);\n+  s1.x = _mm_set_epi16 (0, 0, 0xa, 0xbcde, 0, 0, 0xef58, 0xa234);\n   u.x = test (s1.x);\n \n   for (i = 0; i < 4; i++)\n-    e[i+4] = (s1.a[1]>>(16 * i)) & 0xffff;\n+    e[i + 4] = s1.a[i + 4];\n \n-  for (i = 0; i < 4; i++)\n-    m2[i] = (N & m1[i])>>(2*i);\n+  for (i = 0; i < 4; i++) {\n+    int i2 = i;\n+#ifdef __LITTLE_ENDIAN__\n+    i2 = 3 - i;\n+#endif\n+    m2[i2] = (N & m1[i2]) >> (2 * i2);\n+  }\n \n   for (i = 0; i < 4; i++)\n-    e[i] = (s1.a[0] >> (16 * m2[i])) & 0xffff;\n+    e[i] = s1.a[m2[i]];\n \n   if (check_union128i_w(u, e))\n     {"}]}