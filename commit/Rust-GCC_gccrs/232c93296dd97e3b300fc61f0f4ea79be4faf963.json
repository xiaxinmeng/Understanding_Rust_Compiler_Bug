{"sha": "232c93296dd97e3b300fc61f0f4ea79be4faf963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMyYzkzMjk2ZGQ5N2UzYjMwMGZjNjFmMGY0ZWE3OWJlNGZhZjk2Mw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-07-20T12:49:36Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-07-20T12:49:36Z"}, "message": "[PATCH][combine][1/2] Try to simplify before substituting\n\n\t* combine.c (combine_simplify_rtx): Move simplification step\n\tbefore various transformations/substitutions.\n\nFrom-SVN: r225996", "tree": {"sha": "ad81b270714706479c06ef050430d4096ae204c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad81b270714706479c06ef050430d4096ae204c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/232c93296dd97e3b300fc61f0f4ea79be4faf963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232c93296dd97e3b300fc61f0f4ea79be4faf963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232c93296dd97e3b300fc61f0f4ea79be4faf963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232c93296dd97e3b300fc61f0f4ea79be4faf963/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df2a7a38f6f49656f08e0c34d7856b2709a9e5b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2a7a38f6f49656f08e0c34d7856b2709a9e5b6"}], "stats": {"total": 95, "additions": 50, "deletions": 45}, "files": [{"sha": "5972a00357120d4c9090ad3be1e94550680c2bcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232c93296dd97e3b300fc61f0f4ea79be4faf963/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232c93296dd97e3b300fc61f0f4ea79be4faf963/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=232c93296dd97e3b300fc61f0f4ea79be4faf963", "patch": "@@ -1,3 +1,8 @@\n+2015-07-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* combine.c (combine_simplify_rtx): Move simplification step\n+\tbefore various transformations/substitutions.\n+\n 2015-07-20  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* wide-int.h (struct binary_traits): Fix partial specialization syntax."}, {"sha": "2f806abc8cf29de80d6f9a764ac8f62307fc8557", "filename": "gcc/combine.c", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/232c93296dd97e3b300fc61f0f4ea79be4faf963/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/232c93296dd97e3b300fc61f0f4ea79be4faf963/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=232c93296dd97e3b300fc61f0f4ea79be4faf963", "patch": "@@ -5489,6 +5489,51 @@ combine_simplify_rtx (rtx x, machine_mode op0_mode, int in_dest,\n       SUBST (XEXP (x, 1), temp);\n     }\n \n+  /* Try to fold this expression in case we have constants that weren't\n+     present before.  */\n+  temp = 0;\n+  switch (GET_RTX_CLASS (code))\n+    {\n+    case RTX_UNARY:\n+      if (op0_mode == VOIDmode)\n+\top0_mode = GET_MODE (XEXP (x, 0));\n+      temp = simplify_unary_operation (code, mode, XEXP (x, 0), op0_mode);\n+      break;\n+    case RTX_COMPARE:\n+    case RTX_COMM_COMPARE:\n+      {\n+\tmachine_mode cmp_mode = GET_MODE (XEXP (x, 0));\n+\tif (cmp_mode == VOIDmode)\n+\t  {\n+\t    cmp_mode = GET_MODE (XEXP (x, 1));\n+\t    if (cmp_mode == VOIDmode)\n+\t      cmp_mode = op0_mode;\n+\t  }\n+\ttemp = simplify_relational_operation (code, mode, cmp_mode,\n+\t\t\t\t\t      XEXP (x, 0), XEXP (x, 1));\n+      }\n+      break;\n+    case RTX_COMM_ARITH:\n+    case RTX_BIN_ARITH:\n+      temp = simplify_binary_operation (code, mode, XEXP (x, 0), XEXP (x, 1));\n+      break;\n+    case RTX_BITFIELD_OPS:\n+    case RTX_TERNARY:\n+      temp = simplify_ternary_operation (code, mode, op0_mode, XEXP (x, 0),\n+\t\t\t\t\t XEXP (x, 1), XEXP (x, 2));\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  if (temp)\n+    {\n+      x = temp;\n+      code = GET_CODE (temp);\n+      op0_mode = VOIDmode;\n+      mode = GET_MODE (temp);\n+    }\n+\n   /* If this is a simple operation applied to an IF_THEN_ELSE, try\n      applying it to the arms of the IF_THEN_ELSE.  This often simplifies\n      things.  Check for cases where both arms are testing the same\n@@ -5588,51 +5633,6 @@ combine_simplify_rtx (rtx x, machine_mode op0_mode, int in_dest,\n \t}\n     }\n \n-  /* Try to fold this expression in case we have constants that weren't\n-     present before.  */\n-  temp = 0;\n-  switch (GET_RTX_CLASS (code))\n-    {\n-    case RTX_UNARY:\n-      if (op0_mode == VOIDmode)\n-\top0_mode = GET_MODE (XEXP (x, 0));\n-      temp = simplify_unary_operation (code, mode, XEXP (x, 0), op0_mode);\n-      break;\n-    case RTX_COMPARE:\n-    case RTX_COMM_COMPARE:\n-      {\n-\tmachine_mode cmp_mode = GET_MODE (XEXP (x, 0));\n-\tif (cmp_mode == VOIDmode)\n-\t  {\n-\t    cmp_mode = GET_MODE (XEXP (x, 1));\n-\t    if (cmp_mode == VOIDmode)\n-\t      cmp_mode = op0_mode;\n-\t  }\n-\ttemp = simplify_relational_operation (code, mode, cmp_mode,\n-\t\t\t\t\t      XEXP (x, 0), XEXP (x, 1));\n-      }\n-      break;\n-    case RTX_COMM_ARITH:\n-    case RTX_BIN_ARITH:\n-      temp = simplify_binary_operation (code, mode, XEXP (x, 0), XEXP (x, 1));\n-      break;\n-    case RTX_BITFIELD_OPS:\n-    case RTX_TERNARY:\n-      temp = simplify_ternary_operation (code, mode, op0_mode, XEXP (x, 0),\n-\t\t\t\t\t XEXP (x, 1), XEXP (x, 2));\n-      break;\n-    default:\n-      break;\n-    }\n-\n-  if (temp)\n-    {\n-      x = temp;\n-      code = GET_CODE (temp);\n-      op0_mode = VOIDmode;\n-      mode = GET_MODE (temp);\n-    }\n-\n   /* First see if we can apply the inverse distributive law.  */\n   if (code == PLUS || code == MINUS\n       || code == AND || code == IOR || code == XOR)"}]}