{"sha": "f571596f8cd8fbad34305b4bec1a813620e0cbf0", "node_id": "C_kwDOANBUbNoAKGY1NzE1OTZmOGNkOGZiYWQzNDMwNWI0YmVjMWE4MTM2MjBlMGNiZjA", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-05-27T11:05:40Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2022-05-27T11:06:02Z"}, "message": "ipa: Check cst type when propagating controled uses info\n\nPR 105639 shows that code with type-mismatches can trigger an assert\nafter runnning into a branch that was inteded only for references to\nvariables - as opposed to references to functions.  Fixed by moving\nthe condition from the assert to the guarding if statement.\n\ngcc/ChangeLog:\n\n2022-05-25  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/105639\n\t* ipa-prop.cc (propagate_controlled_uses): Check type of the\n\tconstant before adding a LOAD reference.\n\ngcc/testsuite/ChangeLog:\n\n2022-05-25  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/105639\n\t* gcc.dg/ipa/pr105639.c: New test.", "tree": {"sha": "deb79205a9429002d75dae5653f7d230cf6d53cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/deb79205a9429002d75dae5653f7d230cf6d53cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f571596f8cd8fbad34305b4bec1a813620e0cbf0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5elVTFt/d09Vsoczv2PBvD+kNUAFAmKQsJsACgkQv2PBvD+k\nNUBFkg/7BjB3XpjW/fvE9XNn+mqBPC3FScY5XYMZTywIV9N5PTUUCZzRj6omPneM\ncOTFjV5LaK3L/ZEn3YDCIcHz6KsW0ThOmNLwPVPCFo8oxSsGDkbXnMaBspmnQwuM\nr5oTOsuKr/zKK9uSuARf8zlMHRTps4Y7IdJhwCrA5WrpYysVF0ZbSzeC3NUG9dO3\nWavVv8G0JTqHNEt6Tt08v3NpPm1hhZDM7mZ8mob0RKuFe6uqIIGXseikfDwcUsIR\noiksFMdeY7Ba6VqLonFQvKTW/7XenTlXpI/OIx5peW2GMiNreBFC/93OH1g41T1O\nAY2MipHit0nX3TR7lqmuLYyXN8dzDhqeHbg+5K3wlJCOdEOzm4VHf2P98Aoo7uBh\ne6WCS3J7lOmO01r4A6zQ/f/vZRU73PPD/ga9PBoD4aWVI9XunaTg+CX1QCZKStKY\nrXUWE6P8OyPKpCTaFuhtEGFNSCLFm2Ypj/bbHlBhoIJzrvBH0DCqtpcJmvfBNLLx\nMFZIeNP4JnhuHQHdX8LQnp8buR0YrAWIQSHlQcel85QQY5dXyceW67DxoC97D7g9\n0DTB2jPrr/Exjr0hKjZx5rcv/pqVfy6MGP1seHMFmw5Y1b6aDEJVUlzcsQ/0fOj/\n5i6UzuS2g8kueYNw6AUKam44A3ExUp12tFDHQICvltbyl8GoST8=\n=xrV2\n-----END PGP SIGNATURE-----", "payload": "tree deb79205a9429002d75dae5653f7d230cf6d53cb\nparent 0ccba4ed8571c18c7015413441e971d4863c3644\nauthor Martin Jambor <mjambor@suse.cz> 1653649540 +0200\ncommitter Martin Jambor <mjambor@suse.cz> 1653649562 +0200\n\nipa: Check cst type when propagating controled uses info\n\nPR 105639 shows that code with type-mismatches can trigger an assert\nafter runnning into a branch that was inteded only for references to\nvariables - as opposed to references to functions.  Fixed by moving\nthe condition from the assert to the guarding if statement.\n\ngcc/ChangeLog:\n\n2022-05-25  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/105639\n\t* ipa-prop.cc (propagate_controlled_uses): Check type of the\n\tconstant before adding a LOAD reference.\n\ngcc/testsuite/ChangeLog:\n\n2022-05-25  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/105639\n\t* gcc.dg/ipa/pr105639.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f571596f8cd8fbad34305b4bec1a813620e0cbf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f571596f8cd8fbad34305b4bec1a813620e0cbf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f571596f8cd8fbad34305b4bec1a813620e0cbf0/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ccba4ed8571c18c7015413441e971d4863c3644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ccba4ed8571c18c7015413441e971d4863c3644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ccba4ed8571c18c7015413441e971d4863c3644"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "afd9222b5a278b9cc19df9a75ec0caa94a393763", "filename": "gcc/ipa-prop.cc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f571596f8cd8fbad34305b4bec1a813620e0cbf0/gcc%2Fipa-prop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f571596f8cd8fbad34305b4bec1a813620e0cbf0/gcc%2Fipa-prop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.cc?ref=f571596f8cd8fbad34305b4bec1a813620e0cbf0", "patch": "@@ -4187,14 +4187,13 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n \t{\n \t  int d = ipa_get_controlled_uses (old_root_info, i);\n \t  int c = rdesc->refcount;\n+\t  tree cst = ipa_get_jf_constant (jf);\n \t  rdesc->refcount = combine_controlled_uses_counters (c, d);\n \t  if (rdesc->refcount != IPA_UNDESCRIBED_USE\n-\t      && ipa_get_param_load_dereferenced (old_root_info, i))\n+\t      && ipa_get_param_load_dereferenced (old_root_info, i)\n+\t      && TREE_CODE (cst) == ADDR_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (cst, 0)) == VAR_DECL)\n \t    {\n-\t      tree cst = ipa_get_jf_constant (jf);\n-\t      gcc_checking_assert (TREE_CODE (cst) == ADDR_EXPR\n-\t\t\t\t   && (TREE_CODE (TREE_OPERAND (cst, 0))\n-\t\t\t\t       == VAR_DECL));\n \t      symtab_node *n = symtab_node::get (TREE_OPERAND (cst, 0));\n \t      new_root->create_reference (n, IPA_REF_LOAD, NULL);\n \t      if (dump_file)\n@@ -4204,7 +4203,6 @@ propagate_controlled_uses (struct cgraph_edge *cs)\n \t    }\n \t  if (rdesc->refcount == 0)\n \t    {\n-\t      tree cst = ipa_get_jf_constant (jf);\n \t      gcc_checking_assert (TREE_CODE (cst) == ADDR_EXPR\n \t\t\t\t   && ((TREE_CODE (TREE_OPERAND (cst, 0))\n \t\t\t\t\t== FUNCTION_DECL)"}, {"sha": "5534fe93fbf49d5b08dfcc895cfe9cef7c5f5fae", "filename": "gcc/testsuite/gcc.dg/ipa/pr105639.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f571596f8cd8fbad34305b4bec1a813620e0cbf0/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr105639.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f571596f8cd8fbad34305b4bec1a813620e0cbf0/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr105639.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr105639.c?ref=f571596f8cd8fbad34305b4bec1a813620e0cbf0", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -w\" } */\n+\n+void typedef (*cb) (void);\n+\n+static void\n+bar (cb *fp)\n+{\n+  (*fp) ();\n+}\n+\n+void\n+foo (void)\n+{\n+  bar (foo);\n+}"}]}