{"sha": "1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEzNWU2MmRiMzhlMjEyYTZlYzcxM2IxMGQzN2I0ZDY3ZTBlMDRkOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-24T14:35:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-24T14:35:31Z"}, "message": "crtstuff.c (IN_LIBGCC2): Define it.\n\n2004-11-24  Mark Mitchell  <mark@codesourcery.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* crtstuff.c (IN_LIBGCC2): Define it.\n\t(EH_FRAME_SECTION_CONST): Check EH_TABLES_CAN_BE_READ_ONLY\n\tinstead of HAVE_LD_RO_RW_SECTION_MIXING.\n\t* defaults.h (EH_TABLES_CAN_BE_READ_ONLY): New macro.\n\t* dwarf2out.c (named_section_eh_frame_section): Check\n\tEH_TABLES_CAN_BE_READ_ONLY.\n\t* except.c (default_exception_section): Likewise.\n\t* config/i386/sol2.h (EH_TABLES_CAN_BE_READ_ONLY): Define.\n\t* doc/tm.texi (EH_TABLES_CAN_BE_READ_ONLY): Document.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r91160", "tree": {"sha": "fd5df5cbebf2f9c06f98b70a94d7cce4d7792239", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd5df5cbebf2f9c06f98b70a94d7cce4d7792239"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78ce0c2f31182305ffe14ed95c4b4a18cb0d906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78ce0c2f31182305ffe14ed95c4b4a18cb0d906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78ce0c2f31182305ffe14ed95c4b4a18cb0d906"}], "stats": {"total": 108, "additions": 83, "deletions": 25}, "files": [{"sha": "4a392a5344be781f4953a2bbc9da4197049d9f94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "patch": "@@ -1,3 +1,16 @@\n+2004-11-24  Mark Mitchell  <mark@codesourcery.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* crtstuff.c (IN_LIBGCC2): Define it.\n+\t(EH_FRAME_SECTION_CONST): Check EH_TABLES_CAN_BE_READ_ONLY\n+\tinstead of HAVE_LD_RO_RW_SECTION_MIXING.\n+\t* defaults.h (EH_TABLES_CAN_BE_READ_ONLY): New macro.\n+\t* dwarf2out.c (named_section_eh_frame_section): Check\n+\tEH_TABLES_CAN_BE_READ_ONLY.\n+\t* except.c (default_exception_section): Likewise.\n+\t* config/i386/sol2.h (EH_TABLES_CAN_BE_READ_ONLY): Define.\n+\t* doc/tm.texi (EH_TABLES_CAN_BE_READ_ONLY): Document.\n+\n 2004-11-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-pre.c (phi_translate): Use find_edge to find the"}, {"sha": "c4a8f82fedad337f447d117c963c0712eedd92cf", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "patch": "@@ -40,6 +40,15 @@ Boston, MA 02111-1307, USA.  */\n \t\t  : DW_EH_PE_datarel))\t\t\t\t\t\\\n    : DW_EH_PE_absptr)\n \n+/* The Solaris linker will not merge a read-only .eh_frame section\n+   with a read-write .eh_frame section.  None of the encodings used\n+   with non-PIC code require runtime relocations.  In 64-bit mode,\n+   since there is no backwards compatibility issue, we use a read-only\n+   section for .eh_frame.  In 32-bit mode, we use a writable .eh_frame\n+   section in order to be compatible with G++ for Solaris x86.  */\n+#undef EH_TABLES_CAN_BE_READ_ONLY\n+#define EH_TABLES_CAN_BE_READ_ONLY (TARGET_64BIT)\n+\n /* Solaris 2/Intel as chokes on #line directives.  */\n #undef CPP_SPEC\n #define CPP_SPEC \"%{.S:-P} %(cpp_subtarget)\""}, {"sha": "0e362f3a91f59f03d567316283f763c4caa12f6a", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "patch": "@@ -55,6 +55,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    compiled for the target, and hence definitions concerning only the host\n    do not apply.  */\n \n+#define IN_LIBGCC2\n+\n /* We include auto-host.h here to get HAVE_GAS_HIDDEN.  This is\n    supposedly valid even though this is a \"target\" file.  */\n #include \"auto-host.h\"\n@@ -92,7 +94,7 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n #if defined(EH_FRAME_SECTION_NAME) && !defined(USE_PT_GNU_EH_FRAME)\n # define USE_EH_FRAME_REGISTRY\n #endif\n-#if defined(EH_FRAME_SECTION_NAME) && defined(HAVE_LD_RO_RW_SECTION_MIXING)\n+#if defined(EH_FRAME_SECTION_NAME) && EH_TABLES_CAN_BE_READ_ONLY\n # define EH_FRAME_SECTION_CONST const\n #else\n # define EH_FRAME_SECTION_CONST"}, {"sha": "daa584a25ce775ac3fec6701d8a0ddaf8e98944d", "filename": "gcc/defaults.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "patch": "@@ -310,6 +310,26 @@ do { fputs (integer_asm_op (POINTER_SIZE / BITS_PER_UNIT, TRUE), FILE); \\\n #endif\n #endif\n \n+/* On many systems, different EH table encodings are used under\n+   difference circumstances.  Some will require runtime relocations;\n+   some will not.  For those that do not require runtime relocations,\n+   we would like to make the table read-only.  However, since the\n+   read-only tables may need to be combined with read-write tables\n+   that do require runtime relocation, it is not safe to make the\n+   tables read-only unless the linker will merge read-only and\n+   read-write sections into a single read-write section.  If your\n+   linker does not have this ability, but your system is such that no\n+   encoding used with non-PIC code will ever require a runtime\n+   relocation, then you can define EH_TABLES_CAN_BE_READ_ONLY to 1 in\n+   your target configuration file.  */\n+#ifndef EH_TABLES_CAN_BE_READ_ONLY\n+#ifdef HAVE_LD_RO_RW_SECTION_MIXING\n+#define EH_TABLES_CAN_BE_READ_ONLY 1\n+#else\n+#define EH_TABLES_CAN_BE_READ_ONLY 0\n+#endif\n+#endif\n+\n /* If we have named section and we support weak symbols, then use the\n    .jcr section for recording java classes which need to be registered\n    at program start-up time.  */"}, {"sha": "5efac06022b914473280a5041cd3c1023b577d76", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "patch": "@@ -7588,6 +7588,13 @@ Do not define this macro unless @code{TARGET_ASM_NAMED_SECTION} is\n also defined.\n @end defmac\n \n+@defmac EH_TABLES_CAN_BE_READ_ONLY\n+Define this macro to 1 if your target is such that no frame unwind\n+information encoding used with non-PIC code will ever require a\n+runtime relocation, but the linker may not support merging read-only\n+and read-write sections into a single read-write section.\n+@end defmac\n+\n @defmac MASK_RETURN_ADDR\n An rtx used to mask the return address found via @code{RETURN_ADDR_RTX}, so\n that it does not contain any extraneous set bits in it."}, {"sha": "044a65c4892d0a2fff6a1fa5a340ae87044c0e97", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "patch": "@@ -121,24 +121,29 @@ void\n named_section_eh_frame_section (void)\n {\n #ifdef EH_FRAME_SECTION_NAME\n-#ifdef HAVE_LD_RO_RW_SECTION_MIXING\n-  int fde_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/1, /*global=*/0);\n-  int per_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/2, /*global=*/1);\n-  int lsda_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/0);\n   int flags;\n \n-  flags = (! flag_pic\n-\t   || ((fde_encoding & 0x70) != DW_EH_PE_absptr\n-\t       && (fde_encoding & 0x70) != DW_EH_PE_aligned\n-\t       && (per_encoding & 0x70) != DW_EH_PE_absptr\n-\t       && (per_encoding & 0x70) != DW_EH_PE_aligned\n-\t       && (lsda_encoding & 0x70) != DW_EH_PE_absptr\n-\t       && (lsda_encoding & 0x70) != DW_EH_PE_aligned))\n-\t  ? 0 : SECTION_WRITE;\n+  if (EH_TABLES_CAN_BE_READ_ONLY)\n+    {\n+      int fde_encoding;\n+      int per_encoding;\n+      int lsda_encoding;\n+\n+      fde_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/1, /*global=*/0);\n+      per_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/2, /*global=*/1);\n+      lsda_encoding = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/0);\n+      flags = (! flag_pic\n+\t       || ((fde_encoding & 0x70) != DW_EH_PE_absptr\n+\t\t   && (fde_encoding & 0x70) != DW_EH_PE_aligned\n+\t\t   && (per_encoding & 0x70) != DW_EH_PE_absptr\n+\t\t   && (per_encoding & 0x70) != DW_EH_PE_aligned\n+\t\t   && (lsda_encoding & 0x70) != DW_EH_PE_absptr\n+\t\t   && (lsda_encoding & 0x70) != DW_EH_PE_aligned))\n+\t      ? 0 : SECTION_WRITE;\n+    }\n+  else\n+    flags = SECTION_WRITE;\n   named_section_flags (EH_FRAME_SECTION_NAME, flags);\n-#else\n-  named_section_flags (EH_FRAME_SECTION_NAME, SECTION_WRITE);\n-#endif\n #endif\n }\n "}, {"sha": "56bc2d7919903cfcf9e6fc2ee457d89f6455b831", "filename": "gcc/except.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a35e62db38e212a6ec713b10d37b4d67e0e04d8/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=1a35e62db38e212a6ec713b10d37b4d67e0e04d8", "patch": "@@ -3208,16 +3208,18 @@ default_exception_section (void)\n   if (targetm.have_named_sections)\n     {\n       int flags;\n-#ifdef HAVE_LD_RO_RW_SECTION_MIXING\n-      int tt_format = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n \n-      flags = (! flag_pic\n-\t       || ((tt_format & 0x70) != DW_EH_PE_absptr\n-\t\t   && (tt_format & 0x70) != DW_EH_PE_aligned))\n-\t      ? 0 : SECTION_WRITE;\n-#else\n-      flags = SECTION_WRITE;\n-#endif\n+      if (EH_TABLES_CAN_BE_READ_ONLY)\n+\t{\n+\t  int tt_format = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n+\t  \n+\t  flags = (! flag_pic\n+\t\t   || ((tt_format & 0x70) != DW_EH_PE_absptr\n+\t\t       && (tt_format & 0x70) != DW_EH_PE_aligned))\n+\t    ? 0 : SECTION_WRITE;\n+\t}\n+      else\n+\tflags = SECTION_WRITE;\n       named_section_flags (\".gcc_except_table\", flags);\n     }\n   else if (flag_pic)"}]}