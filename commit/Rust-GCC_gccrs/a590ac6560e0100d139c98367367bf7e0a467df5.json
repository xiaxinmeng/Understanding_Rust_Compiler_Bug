{"sha": "a590ac6560e0100d139c98367367bf7e0a467df5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU5MGFjNjU2MGUwMTAwZDEzOWM5ODM2NzM2N2JmN2UwYTQ2N2RmNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-01-03T08:04:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-01-03T08:04:01Z"}, "message": "alias.c (init_alias_analysis): Use VEC_safe_grow_cleared.\n\n\t* alias.c (init_alias_analysis): Use VEC_safe_grow_cleared.\n\t* cfgbuild.c (find_basic_blocks): Likewise.\n\t* cfgrtl.c (rtl_create_basic_block): Likewise.\n\t* function.c (temp_slots_at_level): Likewise.\n\t* reg-stack.c (stack_regs_mentioned): Likewise.\n\t* regclass.c (allocate_reg_info): Likewise.\n\t* tree-cfg.c (init_empty_tree_cfg, build_tree_cfg, create_bb,\n\tset_bb_for_stmt, move_block_to_fn): Likewise.\n\t* tree-complex.c (tree_lower_complex): Likewise.\n\t* vec.h (VEC_safe_grow_cleared): New.\n\nFrom-SVN: r120386", "tree": {"sha": "aadfa1db2616271ff973c978a56b4690b7aefe12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aadfa1db2616271ff973c978a56b4690b7aefe12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a590ac6560e0100d139c98367367bf7e0a467df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a590ac6560e0100d139c98367367bf7e0a467df5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a590ac6560e0100d139c98367367bf7e0a467df5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a590ac6560e0100d139c98367367bf7e0a467df5/comments", "author": null, "committer": null, "parents": [{"sha": "7bda5cc2e632d9f1ab1379bb94fbb226d13afc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bda5cc2e632d9f1ab1379bb94fbb226d13afc55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bda5cc2e632d9f1ab1379bb94fbb226d13afc55"}], "stats": {"total": 151, "additions": 74, "deletions": 77}, "files": [{"sha": "98c1c1e3d3892f02a1cfe17851be58c9a5e25891", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -6,7 +6,18 @@\n \t* config/i386/i386.md (*sse_prologue_save_insn): Use return\n \tinstead of RET.\n \n-2006-01-03  Zdenek Dvorak <dvorakz@suse.cz>\n+\t* alias.c (init_alias_analysis): Use VEC_safe_grow_cleared.\n+\t* cfgbuild.c (find_basic_blocks): Likewise.\n+\t* cfgrtl.c (rtl_create_basic_block): Likewise.\n+\t* function.c (temp_slots_at_level): Likewise.\n+\t* reg-stack.c (stack_regs_mentioned): Likewise.\n+\t* regclass.c (allocate_reg_info): Likewise.\n+\t* tree-cfg.c (init_empty_tree_cfg, build_tree_cfg, create_bb,\n+\tset_bb_for_stmt, move_block_to_fn): Likewise.\n+\t* tree-complex.c (tree_lower_complex): Likewise.\n+\t* vec.h (VEC_safe_grow_cleared): New.\n+\n+2007-01-03  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* loop-unswitch.c (unswitch_loop): Pass probabilities to loopify.\n \t* tree-ssa-loop-unswitch.c (tree_unswitch_loop): Pass probabilities"}, {"sha": "01429715f5d8f091be221cbc11d7eef3a0e10204", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -2453,9 +2453,7 @@ init_alias_analysis (void)\n   if (reg_base_value)\n     VEC_truncate (rtx, reg_base_value, 0);\n \n-  VEC_safe_grow (rtx, gc, reg_base_value, maxreg);\n-  memset (VEC_address (rtx, reg_base_value), 0,\n-\t  sizeof (rtx) * VEC_length (rtx, reg_base_value));\n+  VEC_safe_grow_cleared (rtx, gc, reg_base_value, maxreg);\n \n   new_reg_base_value = XNEWVEC (rtx, maxreg);\n   reg_seen = XNEWVEC (char, maxreg);"}, {"sha": "3d05ebca0b71b1246937a9b7a130bdec61eb047a", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -543,9 +543,7 @@ find_basic_blocks (rtx f)\n      actually lay them out.  */\n \n   basic_block_info = VEC_alloc (basic_block, gc, n_basic_blocks);\n-  VEC_safe_grow (basic_block, gc, basic_block_info, n_basic_blocks);\n-  memset (VEC_address (basic_block, basic_block_info), 0,\n-\t  sizeof (basic_block) * n_basic_blocks);\n+  VEC_safe_grow_cleared (basic_block, gc, basic_block_info, n_basic_blocks);\n   SET_BASIC_BLOCK (ENTRY_BLOCK, ENTRY_BLOCK_PTR);\n   SET_BASIC_BLOCK (EXIT_BLOCK, EXIT_BLOCK_PTR);\n "}, {"sha": "c6cc08f90188574b231db315f69890c9699e3dbd", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -327,12 +327,8 @@ rtl_create_basic_block (void *headp, void *endp, basic_block after)\n   /* Grow the basic block array if needed.  */\n   if ((size_t) last_basic_block >= VEC_length (basic_block, basic_block_info))\n     {\n-      size_t old_size = VEC_length (basic_block, basic_block_info);\n       size_t new_size = last_basic_block + (last_basic_block + 3) / 4;\n-      basic_block *p;\n-      VEC_safe_grow (basic_block, gc, basic_block_info, new_size);\n-      p = VEC_address (basic_block, basic_block_info);\n-      memset (&p[old_size], 0, sizeof (basic_block) * (new_size - old_size));\n+      VEC_safe_grow_cleared (basic_block, gc, basic_block_info, new_size);\n     }\n \n   n_basic_blocks++;"}, {"sha": "b657e2490eb72a4214146416e5bff73584264104", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -544,15 +544,7 @@ static struct temp_slot **\n temp_slots_at_level (int level)\n {\n   if (level >= (int) VEC_length (temp_slot_p, used_temp_slots))\n-    {\n-      size_t old_length = VEC_length (temp_slot_p, used_temp_slots);\n-      temp_slot_p *p;\n-\n-      VEC_safe_grow (temp_slot_p, gc, used_temp_slots, level + 1);\n-      p = VEC_address (temp_slot_p, used_temp_slots);\n-      memset (&p[old_length], 0,\n-\t      sizeof (temp_slot_p) * (level + 1 - old_length));\n-    }\n+    VEC_safe_grow_cleared (temp_slot_p, gc, used_temp_slots, level + 1);\n \n   return &(VEC_address (temp_slot_p, used_temp_slots)[level]);\n }"}, {"sha": "793c6b58ec4bb34042106a91789f1f2a45ccff53", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -315,16 +315,10 @@ stack_regs_mentioned (rtx insn)\n   max = VEC_length (char, stack_regs_mentioned_data);\n   if (uid >= max)\n     {\n-      char *p;\n-      unsigned int old_max = max;\n-\n       /* Allocate some extra size to avoid too many reallocs, but\n \t do not grow too quickly.  */\n       max = uid + uid / 20 + 1;\n-      VEC_safe_grow (char, heap, stack_regs_mentioned_data, max);\n-      p = VEC_address (char, stack_regs_mentioned_data);\n-      memset (&p[old_max], 0,\n-\t      sizeof (char) * (max - old_max));\n+      VEC_safe_grow_cleared (char, heap, stack_regs_mentioned_data, max);\n     }\n \n   test = VEC_index (char, stack_regs_mentioned_data, uid);"}, {"sha": "7726ea1ec727a15c4a41cc933af363704c41b9bf", "filename": "gcc/regclass.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -2177,9 +2177,8 @@ allocate_reg_info (size_t num_regs, int new_p, int renumber_p)\n       if (!reg_n_info)\n \t{\n \t  reg_n_info = VEC_alloc (reg_info_p, heap, regno_allocated);\n-\t  VEC_safe_grow (reg_info_p, heap, reg_n_info, regno_allocated);\n-\t  memset (VEC_address (reg_info_p, reg_n_info), 0,\n-\t\t  sizeof (reg_info_p) * regno_allocated);\n+\t  VEC_safe_grow_cleared (reg_info_p, heap, reg_n_info,\n+\t\t\t\t regno_allocated);\n \t  renumber = xmalloc (size_renumber);\n \t  reg_pref_buffer = XNEWVEC (struct reg_pref, regno_allocated);\n \t}\n@@ -2188,11 +2187,8 @@ allocate_reg_info (size_t num_regs, int new_p, int renumber_p)\n \t  size_t old_length = VEC_length (reg_info_p, reg_n_info);\n \t  if (old_length < regno_allocated)\n \t    {\n-\t      reg_info_p *addr;\n-\t      VEC_safe_grow (reg_info_p, heap, reg_n_info, regno_allocated);\n-\t      addr = VEC_address (reg_info_p, reg_n_info);\n-\t      memset (&addr[old_length], 0,\n-\t\t      sizeof (reg_info_p) * (regno_allocated - old_length));\n+\t      VEC_safe_grow_cleared (reg_info_p, heap, reg_n_info,\n+\t\t\t\t     regno_allocated);\n \t    }\n \t  else if (regno_allocated < old_length)\n \t    {"}, {"sha": "d956d2becfcab34c577c251d46a99869dab656f3", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 12, "deletions": 34, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -133,15 +133,13 @@ init_empty_tree_cfg (void)\n   n_basic_blocks = NUM_FIXED_BLOCKS;\n   last_basic_block = NUM_FIXED_BLOCKS;\n   basic_block_info = VEC_alloc (basic_block, gc, initial_cfg_capacity);\n-  VEC_safe_grow (basic_block, gc, basic_block_info, initial_cfg_capacity);\n-  memset (VEC_address (basic_block, basic_block_info), 0,\n-\t  sizeof (basic_block) * initial_cfg_capacity);\n+  VEC_safe_grow_cleared (basic_block, gc, basic_block_info,\n+\t\t\t initial_cfg_capacity);\n \n   /* Build a mapping of labels to their associated blocks.  */\n   label_to_block_map = VEC_alloc (basic_block, gc, initial_cfg_capacity);\n-  VEC_safe_grow (basic_block, gc, label_to_block_map, initial_cfg_capacity);\n-  memset (VEC_address (basic_block, label_to_block_map),\n-\t  0, sizeof (basic_block) * initial_cfg_capacity);\n+  VEC_safe_grow_cleared (basic_block, gc, label_to_block_map,\n+\t\t\t initial_cfg_capacity);\n \n   SET_BASIC_BLOCK (ENTRY_BLOCK, ENTRY_BLOCK_PTR);\n   SET_BASIC_BLOCK (EXIT_BLOCK, EXIT_BLOCK_PTR);\n@@ -183,14 +181,7 @@ build_tree_cfg (tree *tp)\n \n   /* Adjust the size of the array.  */\n   if (VEC_length (basic_block, basic_block_info) < (size_t) n_basic_blocks)\n-    {\n-      size_t old_size = VEC_length (basic_block, basic_block_info);\n-      basic_block *p;\n-      VEC_safe_grow (basic_block, gc, basic_block_info, n_basic_blocks);\n-      p = VEC_address (basic_block, basic_block_info);\n-      memset (&p[old_size], 0,\n-\t      sizeof (basic_block) * (n_basic_blocks - old_size));\n-    }\n+    VEC_safe_grow_cleared (basic_block, gc, basic_block_info, n_basic_blocks);\n \n   /* To speed up statement iterator walks, we first purge dead labels.  */\n   cleanup_dead_labels ();\n@@ -397,12 +388,8 @@ create_bb (void *h, void *e, basic_block after)\n   /* Grow the basic block array if needed.  */\n   if ((size_t) last_basic_block == VEC_length (basic_block, basic_block_info))\n     {\n-      size_t old_size = VEC_length (basic_block, basic_block_info);\n       size_t new_size = last_basic_block + (last_basic_block + 3) / 4;\n-      basic_block *p;\n-      VEC_safe_grow (basic_block, gc, basic_block_info, new_size);\n-      p = VEC_address (basic_block, basic_block_info);\n-      memset (&p[old_size], 0, sizeof (basic_block) * (new_size - old_size));\n+      VEC_safe_grow_cleared (basic_block, gc, basic_block_info, new_size);\n     }\n \n   /* Add the newly created block to the array.  */\n@@ -2751,14 +2738,10 @@ set_bb_for_stmt (tree t, basic_block bb)\n \t      LABEL_DECL_UID (t) = uid = cfun->last_label_uid++;\n \t      if (old_len <= (unsigned) uid)\n \t\t{\n-\t\t  basic_block *addr;\n \t\t  unsigned new_len = 3 * uid / 2;\n \n-\t\t  VEC_safe_grow (basic_block, gc, label_to_block_map,\n-\t\t\t\t new_len);\n-\t\t  addr = VEC_address (basic_block, label_to_block_map);\n-\t\t  memset (&addr[old_len],\n-\t\t\t  0, sizeof (basic_block) * (new_len - old_len));\n+\t\t  VEC_safe_grow_cleared (basic_block, gc, label_to_block_map,\n+\t\t\t\t\t new_len);\n \t\t}\n \t    }\n \t  else\n@@ -4694,7 +4677,6 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n   block_stmt_iterator si;\n   struct move_stmt_d d;\n   unsigned old_len, new_len;\n-  basic_block *addr;\n \n   /* Link BB to the new linked list.  */\n   move_block_after (bb, after);\n@@ -4721,9 +4703,8 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n   if ((unsigned) cfg->x_last_basic_block >= old_len)\n     {\n       new_len = cfg->x_last_basic_block + (cfg->x_last_basic_block + 3) / 4;\n-      VEC_safe_grow (basic_block, gc, cfg->x_basic_block_info, new_len);\n-      addr = VEC_address (basic_block, cfg->x_basic_block_info);\n-      memset (&addr[old_len], 0, sizeof (basic_block) * (new_len - old_len));\n+      VEC_safe_grow_cleared (basic_block, gc, cfg->x_basic_block_info,\n+\t\t\t     new_len);\n     }\n \n   VEC_replace (basic_block, cfg->x_basic_block_info,\n@@ -4759,11 +4740,8 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n \t  if (old_len <= (unsigned) uid)\n \t    {\n \t      new_len = 3 * uid / 2;\n-\t      VEC_safe_grow (basic_block, gc, cfg->x_label_to_block_map,\n-\t\t\t     new_len);\n-\t      addr = VEC_address (basic_block, cfg->x_label_to_block_map);\n-\t      memset (&addr[old_len], 0,\n-\t\t      sizeof (basic_block) * (new_len - old_len));\n+\t      VEC_safe_grow_cleared (basic_block, gc,\n+\t\t\t\t     cfg->x_label_to_block_map, new_len);\n \t    }\n \n \t  VEC_replace (basic_block, cfg->x_label_to_block_map, uid, bb);"}, {"sha": "f985503a835899f9a53344ae8803cf53eb224346", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -1492,10 +1492,8 @@ tree_lower_complex (void)\n     return 0;\n \n   complex_lattice_values = VEC_alloc (complex_lattice_t, heap, num_ssa_names);\n-  VEC_safe_grow (complex_lattice_t, heap,\n-\t\t complex_lattice_values, num_ssa_names);\n-  memset (VEC_address (complex_lattice_t, complex_lattice_values), 0,\n-\t  num_ssa_names * sizeof(complex_lattice_t));\n+  VEC_safe_grow_cleared (complex_lattice_t, heap,\n+\t\t\t complex_lattice_values, num_ssa_names);\n \n   init_parameter_lattice_values ();\n   ssa_propagate (complex_visit_stmt, complex_visit_phi);\n@@ -1504,9 +1502,8 @@ tree_lower_complex (void)\n \t\t\t\t\t     int_tree_map_eq, free);\n \n   complex_ssa_name_components = VEC_alloc (tree, heap, 2*num_ssa_names);\n-  VEC_safe_grow (tree, heap, complex_ssa_name_components, 2*num_ssa_names);\n-  memset (VEC_address (tree, complex_ssa_name_components), 0,\n-\t  2 * num_ssa_names * sizeof(tree));\n+  VEC_safe_grow_cleared (tree, heap, complex_ssa_name_components,\n+\t\t\t 2 * num_ssa_names);\n \n   update_parameter_components ();\n "}, {"sha": "44ec8a48032ffc856d5a24cd6998942720030dcf", "filename": "gcc/vec.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a590ac6560e0100d139c98367367bf7e0a467df5/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=a590ac6560e0100d139c98367367bf7e0a467df5", "patch": "@@ -302,6 +302,16 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define VEC_safe_grow(T,A,V,I)\t\t\\\n \t(VEC_OP(T,A,safe_grow)(&(V),I VEC_CHECK_INFO MEM_STAT_INFO))\n \n+/* Grow to a specific length.\n+   void VEC_T_A_safe_grow_cleared (VEC(T,A) *&v, int len);\n+\n+   Grow the vector to a specific length.  The LEN must be as\n+   long or longer than the current length.  The new elements are\n+   initialized to zero.  */\n+\n+#define VEC_safe_grow_cleared(T,A,V,I)\t\t\\\n+\t(VEC_OP(T,A,safe_grow_cleared)(&(V),I VEC_CHECK_INFO MEM_STAT_INFO))\n+\n /* Replace element\n    T VEC_T_replace (VEC(T) *v, unsigned ix, T val); // Integer\n    T VEC_T_replace (VEC(T) *v, unsigned ix, T val); // Pointer\n@@ -745,6 +755,15 @@ static inline void VEC_OP (T,A,safe_grow)\t\t\t\t  \\\n   VEC_BASE (*vec_)->num = size_;\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n+static inline void VEC_OP (T,A,safe_grow_cleared)\t\t\t  \\\n+     (VEC(T,A) **vec_, int size_ VEC_CHECK_DECL MEM_STAT_DECL)\t\t  \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  int oldsize = VEC_OP(T,base,length) VEC_BASE(*vec_);\t\t\t  \\\n+  VEC_OP (T,A,safe_grow) (vec_, size_ VEC_CHECK_PASS PASS_MEM_STAT);\t  \\\n+  memset (&(VEC_OP (T,base,address) VEC_BASE(*vec_))[oldsize], 0,\t  \\\n+\t  sizeof (T) * (size_ - oldsize));\t\t\t\t  \\\n+}\t\t\t\t\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n static inline T *VEC_OP (T,A,safe_push)\t\t\t\t\t  \\\n      (VEC(T,A) **vec_, T obj_ VEC_CHECK_DECL MEM_STAT_DECL)       \t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n@@ -1014,6 +1033,15 @@ static inline void VEC_OP (T,A,safe_grow)\t\t\t\t  \\\n   VEC_BASE (*vec_)->num = size_;\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n+static inline void VEC_OP (T,A,safe_grow_cleared)\t\t\t  \\\n+     (VEC(T,A) **vec_, int size_ VEC_CHECK_DECL MEM_STAT_DECL)\t\t  \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  int oldsize = VEC_OP(T,base,length) VEC_BASE(*vec_);\t\t\t  \\\n+  VEC_OP (T,A,safe_grow) (vec_, size_ VEC_CHECK_PASS PASS_MEM_STAT);\t  \\\n+  memset (&(VEC_OP (T,base,address) VEC_BASE(*vec_))[oldsize], 0,\t  \\\n+\t  sizeof (T) * (size_ - oldsize));\t\t\t\t  \\\n+}\t\t\t\t\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n static inline T *VEC_OP (T,A,safe_push)\t\t\t\t\t  \\\n      (VEC(T,A) **vec_, const T *obj_ VEC_CHECK_DECL MEM_STAT_DECL)\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n@@ -1097,6 +1125,15 @@ static inline void VEC_OP (T,A,safe_grow)\t\t\t\t  \\\n   VEC_BASE (*vec_)->num = size_;\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n+static inline void VEC_OP (T,A,safe_grow_cleared)\t\t\t  \\\n+     (VEC(T,A) **vec_, int size_ VEC_CHECK_DECL MEM_STAT_DECL)\t\t  \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  int oldsize = VEC_OP(T,base,length) VEC_BASE(*vec_);\t\t\t  \\\n+  VEC_OP (T,A,safe_grow) (vec_, size_ VEC_CHECK_PASS PASS_MEM_STAT);\t  \\\n+  memset (&(VEC_OP (T,base,address) VEC_BASE(*vec_))[oldsize], 0,\t  \\\n+\t  sizeof (T) * (size_ - oldsize));\t\t\t\t  \\\n+}\t\t\t\t\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n static inline T *VEC_OP (T,A,safe_push)\t\t\t\t\t  \\\n      (VEC(T,A) **vec_, const T obj_ VEC_CHECK_DECL MEM_STAT_DECL)\t  \\\n {\t\t\t\t\t\t\t\t\t  \\"}]}