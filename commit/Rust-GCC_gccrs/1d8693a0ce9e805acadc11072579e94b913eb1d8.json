{"sha": "1d8693a0ce9e805acadc11072579e94b913eb1d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ4NjkzYTBjZTllODA1YWNhZGMxMTA3MjU3OWU5NGI5MTNlYjFkOA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-07-31T16:51:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-07-31T16:51:17Z"}, "message": "Simplify dump_context by adding a dump_loc member function\n\nThis patch removes some duplicated code in dumpfile.c by\nreimplementing the various dump_foo_loc calls in terms of dump_foo.\n\ngcc/ChangeLog:\n\t* dump-context.h (dump_context::dump_loc): New decl.\n\t* dumpfile.c (dump_context::dump_loc): New member function.\n\t(dump_context::dump_gimple_stmt_loc): Reimplement using dump_loc\n\tand dump_gimple_stmt.\n\t(dump_context::dump_gimple_expr_loc): Likewise, using\n\tdump_gimple_expr.\n\t(dump_context::dump_generic_expr_loc): Likewise, using\n\tdump_generic_expr.\n\t(dump_context::dump_printf_loc_va): Likewise, using\n\tdump_printf_va.\n\t(dump_context::begin_scope): Explicitly using the global function\n\t\"dump_loc\", rather than the member function.\n\nFrom-SVN: r263167", "tree": {"sha": "a6a8d08caf29dbc5de626f399e74cde39c0d703f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a8d08caf29dbc5de626f399e74cde39c0d703f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d8693a0ce9e805acadc11072579e94b913eb1d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8693a0ce9e805acadc11072579e94b913eb1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8693a0ce9e805acadc11072579e94b913eb1d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8693a0ce9e805acadc11072579e94b913eb1d8/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e73e6140d876c6ae8e1d67bb4dcd2e47c7914ec"}], "stats": {"total": 136, "additions": 48, "deletions": 88}, "files": [{"sha": "f92db3a478bb72f6095a549d544dddb7ffe00928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8693a0ce9e805acadc11072579e94b913eb1d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8693a0ce9e805acadc11072579e94b913eb1d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d8693a0ce9e805acadc11072579e94b913eb1d8", "patch": "@@ -1,3 +1,18 @@\n+2018-07-31  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* dump-context.h (dump_context::dump_loc): New decl.\n+\t* dumpfile.c (dump_context::dump_loc): New member function.\n+\t(dump_context::dump_gimple_stmt_loc): Reimplement using dump_loc\n+\tand dump_gimple_stmt.\n+\t(dump_context::dump_gimple_expr_loc): Likewise, using\n+\tdump_gimple_expr.\n+\t(dump_context::dump_generic_expr_loc): Likewise, using\n+\tdump_generic_expr.\n+\t(dump_context::dump_printf_loc_va): Likewise, using\n+\tdump_printf_va.\n+\t(dump_context::begin_scope): Explicitly using the global function\n+\t\"dump_loc\", rather than the member function.\n+\n 2018-07-31  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86741"}, {"sha": "f6df0b422e068b26deb2d8e5e288557051ce89a8", "filename": "gcc/dump-context.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8693a0ce9e805acadc11072579e94b913eb1d8/gcc%2Fdump-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8693a0ce9e805acadc11072579e94b913eb1d8/gcc%2Fdump-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdump-context.h?ref=1d8693a0ce9e805acadc11072579e94b913eb1d8", "patch": "@@ -39,6 +39,8 @@ class dump_context\n \n   ~dump_context ();\n \n+  void dump_loc (dump_flags_t dump_kind, const dump_location_t &loc);\n+\n   void dump_gimple_stmt (dump_flags_t dump_kind, dump_flags_t extra_dump_flags,\n \t\t\t gimple *gs, int spc);\n "}, {"sha": "3c8bc386623a59106f4fd77bd6ea3db6401cf074", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 31, "deletions": 88, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8693a0ce9e805acadc11072579e94b913eb1d8/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8693a0ce9e805acadc11072579e94b913eb1d8/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=1d8693a0ce9e805acadc11072579e94b913eb1d8", "patch": "@@ -474,6 +474,27 @@ dump_context::~dump_context ()\n   delete m_pending;\n }\n \n+/* Print LOC to the appropriate dump destinations, given DUMP_KIND.\n+   If optinfos are enabled, begin a new optinfo.  */\n+\n+void\n+dump_context::dump_loc (dump_flags_t dump_kind, const dump_location_t &loc)\n+{\n+  location_t srcloc = loc.get_location_t ();\n+\n+  if (dump_file && (dump_kind & pflags))\n+    ::dump_loc (dump_kind, dump_file, srcloc);\n+\n+  if (alt_dump_file && (dump_kind & alt_flags))\n+    ::dump_loc (dump_kind, alt_dump_file, srcloc);\n+\n+  if (optinfo_enabled_p ())\n+    {\n+      optinfo &info = begin_next_optinfo (loc);\n+      info.handle_dump_file_kind (dump_kind);\n+    }\n+}\n+\n /* Dump gimple statement GS with SPC indentation spaces and\n    EXTRA_DUMP_FLAGS on the dump streams if DUMP_KIND is enabled.  */\n \n@@ -504,25 +525,8 @@ dump_context::dump_gimple_stmt_loc (dump_flags_t dump_kind,\n \t\t\t\t    dump_flags_t extra_dump_flags,\n \t\t\t\t    gimple *gs, int spc)\n {\n-  location_t srcloc = loc.get_location_t ();\n-  if (dump_file && (dump_kind & pflags))\n-    {\n-      dump_loc (dump_kind, dump_file, srcloc);\n-      print_gimple_stmt (dump_file, gs, spc, dump_flags | extra_dump_flags);\n-    }\n-\n-  if (alt_dump_file && (dump_kind & alt_flags))\n-    {\n-      dump_loc (dump_kind, alt_dump_file, srcloc);\n-      print_gimple_stmt (alt_dump_file, gs, spc, dump_flags | extra_dump_flags);\n-    }\n-\n-  if (optinfo_enabled_p ())\n-    {\n-      optinfo &info = begin_next_optinfo (loc);\n-      info.handle_dump_file_kind (dump_kind);\n-      info.add_gimple_stmt (gs, spc, dump_flags | extra_dump_flags);\n-    }\n+  dump_loc (dump_kind, loc);\n+  dump_gimple_stmt (dump_kind, extra_dump_flags, gs, spc);\n }\n \n /* Dump gimple statement GS with SPC indentation spaces and\n@@ -557,25 +561,8 @@ dump_context::dump_gimple_expr_loc (dump_flags_t dump_kind,\n \t\t\t\t    gimple *gs,\n \t\t\t\t    int spc)\n {\n-  location_t srcloc = loc.get_location_t ();\n-  if (dump_file && (dump_kind & pflags))\n-    {\n-      dump_loc (dump_kind, dump_file, srcloc);\n-      print_gimple_expr (dump_file, gs, spc, dump_flags | extra_dump_flags);\n-    }\n-\n-  if (alt_dump_file && (dump_kind & alt_flags))\n-    {\n-      dump_loc (dump_kind, alt_dump_file, srcloc);\n-      print_gimple_expr (alt_dump_file, gs, spc, dump_flags | extra_dump_flags);\n-    }\n-\n-  if (optinfo_enabled_p ())\n-    {\n-      optinfo &info = begin_next_optinfo (loc);\n-      info.handle_dump_file_kind (dump_kind);\n-      info.add_gimple_expr (gs, spc, dump_flags | extra_dump_flags);\n-    }\n+  dump_loc (dump_kind, loc);\n+  dump_gimple_expr (dump_kind, extra_dump_flags, gs, spc);\n }\n \n \n@@ -611,25 +598,8 @@ dump_context::dump_generic_expr_loc (dump_flags_t dump_kind,\n \t\t\t\t     dump_flags_t extra_dump_flags,\n \t\t\t\t     tree t)\n {\n-  location_t srcloc = loc.get_location_t ();\n-  if (dump_file && (dump_kind & pflags))\n-    {\n-      dump_loc (dump_kind, dump_file, srcloc);\n-      print_generic_expr (dump_file, t, dump_flags | extra_dump_flags);\n-    }\n-\n-  if (alt_dump_file && (dump_kind & alt_flags))\n-    {\n-      dump_loc (dump_kind, alt_dump_file, srcloc);\n-      print_generic_expr (alt_dump_file, t, dump_flags | extra_dump_flags);\n-    }\n-\n-  if (optinfo_enabled_p ())\n-    {\n-      optinfo &info = begin_next_optinfo (loc);\n-      info.handle_dump_file_kind (dump_kind);\n-      info.add_tree (t, dump_flags | extra_dump_flags);\n-    }\n+  dump_loc (dump_kind, loc);\n+  dump_generic_expr (dump_kind, extra_dump_flags, t);\n }\n \n /* Output a formatted message using FORMAT on appropriate dump streams.  */\n@@ -672,35 +642,8 @@ dump_context::dump_printf_loc_va (dump_flags_t dump_kind,\n \t\t\t\t  const dump_location_t &loc,\n \t\t\t\t  const char *format, va_list ap)\n {\n-  location_t srcloc = loc.get_location_t ();\n-\n-  if (dump_file && (dump_kind & pflags))\n-    {\n-      dump_loc (dump_kind, dump_file, srcloc);\n-      va_list aq;\n-      va_copy (aq, ap);\n-      vfprintf (dump_file, format, aq);\n-      va_end (aq);\n-    }\n-\n-  if (alt_dump_file && (dump_kind & alt_flags))\n-    {\n-      dump_loc (dump_kind, alt_dump_file, srcloc);\n-      va_list aq;\n-      va_copy (aq, ap);\n-      vfprintf (alt_dump_file, format, aq);\n-      va_end (aq);\n-    }\n-\n-  if (optinfo_enabled_p ())\n-    {\n-      optinfo &info = begin_next_optinfo (loc);\n-      info.handle_dump_file_kind (dump_kind);\n-      va_list aq;\n-      va_copy (aq, ap);\n-      info.add_printf_va (format, aq);\n-      va_end (aq);\n-    }\n+  dump_loc (dump_kind, loc);\n+  dump_printf_va (dump_kind, format, ap);\n }\n \n /* Output VALUE in decimal to appropriate dump streams.  */\n@@ -767,13 +710,13 @@ dump_context::begin_scope (const char *name, const dump_location_t &loc)\n \n   if (dump_file)\n     {\n-      dump_loc (MSG_NOTE, dump_file, loc.get_location_t ());\n+      ::dump_loc (MSG_NOTE, dump_file, loc.get_location_t ());\n       fprintf (dump_file, \"=== %s ===\\n\", name);\n     }\n \n   if (alt_dump_file)\n     {\n-      dump_loc (MSG_NOTE, alt_dump_file, loc.get_location_t ());\n+      ::dump_loc (MSG_NOTE, alt_dump_file, loc.get_location_t ());\n       fprintf (alt_dump_file, \"=== %s ===\\n\", name);\n     }\n "}]}