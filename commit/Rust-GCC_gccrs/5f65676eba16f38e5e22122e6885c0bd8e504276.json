{"sha": "5f65676eba16f38e5e22122e6885c0bd8e504276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY2NTY3NmViYTE2ZjM4ZTVlMjIxMjJlNjg4NWMwYmQ4ZTUwNDI3Ng==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-08T11:32:45Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-23T11:14:18Z"}, "message": "aarch64: Use memcpy to copy vector tables in vqtbx[234] intrinsics\n\nUse __builtin_memcpy to copy vector structures instead of building\na new opaque structure one vector at a time in each of the vqtbx[234]\nNeon intrinsics in arm_neon.h. This simplifies the header file and\nalso improves code generation - superfluous move instructions were\nemitted for every register extraction/set in this additional\nstructure.\n\nAdd new code generation tests to verify that superfluous move\ninstructions are no longer generated for the vqtbx[234] intrinsics.\n\ngcc/ChangeLog:\n\n2021-07-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/arm_neon.h (vqtbx2_s8): Use __builtin_memcpy\n\tinstead of constructing __builtin_aarch64_simd_oi one vector\n\tat a time.\n\t(vqtbx2_u8): Likewise.\n\t(vqtbx2_p8): Likewise.\n\t(vqtbx2q_s8): Likewise.\n\t(vqtbx2q_u8): Likewise.\n\t(vqtbx2q_p8): Likewise.\n\t(vqtbx3_s8): Use __builtin_memcpy instead of constructing\n\t__builtin_aarch64_simd_ci one vector at a time.\n\t(vqtbx3_u8): Likewise.\n\t(vqtbx3_p8): Likewise.\n\t(vqtbx3q_s8): Likewise.\n\t(vqtbx3q_u8): Likewise.\n\t(vqtbx3q_p8): Likewise.\n\t(vqtbx4_s8): Use __builtin_memcpy instead of constructing\n\t__builtin_aarch64_simd_xi one vector at a time.\n\t(vqtbx4_u8): Likewise.\n\t(vqtbx4_p8): Likewise.\n\t(vqtbx4q_s8): Likewise.\n\t(vqtbx4q_u8): Likewise.\n\t(vqtbx4q_p8): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vector_structure_intrinsics.c: New tests.", "tree": {"sha": "0b6a540db66f01c6d8c1b221c9673fa677b41a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b6a540db66f01c6d8c1b221c9673fa677b41a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f65676eba16f38e5e22122e6885c0bd8e504276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f65676eba16f38e5e22122e6885c0bd8e504276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f65676eba16f38e5e22122e6885c0bd8e504276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f65676eba16f38e5e22122e6885c0bd8e504276/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "484acfa4cfe9385d7b78919ca9eb2047ded8f078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484acfa4cfe9385d7b78919ca9eb2047ded8f078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484acfa4cfe9385d7b78919ca9eb2047ded8f078"}], "stats": {"total": 121, "additions": 65, "deletions": 56}, "files": [{"sha": "a7b8449610c987f5a09ba6740f4e1321f1d257f8", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 21, "deletions": 56, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f65676eba16f38e5e22122e6885c0bd8e504276/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f65676eba16f38e5e22122e6885c0bd8e504276/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=5f65676eba16f38e5e22122e6885c0bd8e504276", "patch": "@@ -23482,15 +23482,14 @@ vqtbl4q_p8 (poly8x16x4_t __tab, uint8x16_t __idx)\n   return (poly8x16_t)__builtin_aarch64_qtbl4v16qi (__o, (int8x16_t)__idx);\n }\n \n-\n /* vqtbx2 */\n+\n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx2_s8 (int8x8_t __r, int8x16x2_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbx2v8qi (__r, __o, (int8x8_t)__idx);\n }\n \n@@ -23499,8 +23498,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx2_u8 (uint8x8_t __r, uint8x16x2_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x8_t)__builtin_aarch64_qtbx2v8qi ((int8x8_t)__r, __o,\n \t\t\t\t\t\t (int8x8_t)__idx);\n }\n@@ -23510,8 +23508,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx2_p8 (poly8x8_t __r, poly8x16x2_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x8_t)__builtin_aarch64_qtbx2v8qi ((int8x8_t)__r, __o,\n \t\t\t\t\t\t (int8x8_t)__idx);\n }\n@@ -23521,8 +23518,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx2q_s8 (int8x16_t __r, int8x16x2_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbx2v16qi (__r, __o, (int8x16_t)__idx);\n }\n \n@@ -23531,32 +23527,29 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx2q_u8 (uint8x16_t __r, uint8x16x2_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x16_t)__builtin_aarch64_qtbx2v16qi ((int8x16_t)__r, __o,\n-\t\t\t\t\t\t  (int8x16_t)__idx);\n+\t\t\t\t\t\t   (int8x16_t)__idx);\n }\n \n __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx2q_p8 (poly8x16_t __r, poly8x16x2_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_oi __o;\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x16_t)__builtin_aarch64_qtbx2v16qi ((int8x16_t)__r, __o,\n \t\t\t\t\t\t   (int8x16_t)__idx);\n }\n \n /* vqtbx3 */\n+\n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx3_s8 (int8x8_t __r, int8x16x3_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, __tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, __tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, __tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbx3v8qi (__r, __o, (int8x8_t)__idx);\n }\n \n@@ -23565,9 +23558,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx3_u8 (uint8x8_t __r, uint8x16x3_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x8_t)__builtin_aarch64_qtbx3v8qi ((int8x8_t)__r, __o,\n \t\t\t\t\t\t (int8x8_t)__idx);\n }\n@@ -23577,9 +23568,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx3_p8 (poly8x8_t __r, poly8x16x3_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x8_t)__builtin_aarch64_qtbx3v8qi ((int8x8_t)__r, __o,\n \t\t\t\t\t\t (int8x8_t)__idx);\n }\n@@ -23589,9 +23578,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx3q_s8 (int8x16_t __r, int8x16x3_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, __tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, __tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, __tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbx3v16qi (__r, __o, (int8x16_t)__idx);\n }\n \n@@ -23600,9 +23587,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx3q_u8 (uint8x16_t __r, uint8x16x3_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x16_t)__builtin_aarch64_qtbx3v16qi ((int8x16_t)__r, __o,\n \t\t\t\t\t\t   (int8x16_t)__idx);\n }\n@@ -23612,9 +23597,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx3q_p8 (poly8x16_t __r, poly8x16x3_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_ci __o;\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregciv16qi (__o, (int8x16_t)__tab.val[2], 2);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x16_t)__builtin_aarch64_qtbx3v16qi ((int8x16_t)__r, __o,\n \t\t\t\t\t\t   (int8x16_t)__idx);\n }\n@@ -23626,10 +23609,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx4_s8 (int8x8_t __r, int8x16x4_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, __tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, __tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, __tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, __tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbx4v8qi (__r, __o, (int8x8_t)__idx);\n }\n \n@@ -23638,10 +23618,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx4_u8 (uint8x8_t __r, uint8x16x4_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x8_t)__builtin_aarch64_qtbx4v8qi ((int8x8_t)__r, __o,\n \t\t\t\t\t\t (int8x8_t)__idx);\n }\n@@ -23651,10 +23628,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx4_p8 (poly8x8_t __r, poly8x16x4_t __tab, uint8x8_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x8_t)__builtin_aarch64_qtbx4v8qi ((int8x8_t)__r, __o,\n \t\t\t\t\t\t (int8x8_t)__idx);\n }\n@@ -23664,10 +23638,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx4q_s8 (int8x16_t __r, int8x16x4_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, __tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, __tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, __tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, __tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return __builtin_aarch64_qtbx4v16qi (__r, __o, (int8x16_t)__idx);\n }\n \n@@ -23676,10 +23647,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx4q_u8 (uint8x16_t __r, uint8x16x4_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (uint8x16_t)__builtin_aarch64_qtbx4v16qi ((int8x16_t)__r, __o,\n \t\t\t\t\t\t   (int8x16_t)__idx);\n }\n@@ -23689,10 +23657,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx4q_p8 (poly8x16_t __r, poly8x16x4_t __tab, uint8x16_t __idx)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t)__tab.val[3], 3);\n+  __builtin_memcpy (&__o, &__tab, sizeof (__tab));\n   return (poly8x16_t)__builtin_aarch64_qtbx4v16qi ((int8x16_t)__r, __o,\n \t\t\t\t\t\t   (int8x16_t)__idx);\n }"}, {"sha": "b60e80ea0d96a9d1877a3f4f9bd04069822e1b56", "filename": "gcc/testsuite/gcc.target/aarch64/vector_structure_intrinsics.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f65676eba16f38e5e22122e6885c0bd8e504276/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f65676eba16f38e5e22122e6885c0bd8e504276/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c?ref=5f65676eba16f38e5e22122e6885c0bd8e504276", "patch": "@@ -39,6 +39,50 @@ TEST_TBL3 (vqtbl3q, int8x16_t, int8x16x3_t, uint8x16_t, s8)\n TEST_TBL3 (vqtbl3q, uint8x16_t, uint8x16x3_t, uint8x16_t, u8)\n TEST_TBL3 (vqtbl3q, poly8x16_t, poly8x16x3_t, uint8x16_t, p8)\n \n+#define TEST_TBX2(name, rettype, tbltype, idxtype, ts) \\\n+  rettype test_ ## name ## _ ## ts (rettype a, idxtype b, tbltype c) \\\n+\t{ \\\n+\t\treturn name ## _ ## ts (a, c, b); \\\n+\t}\n+\n+TEST_TBX2 (vqtbx2, int8x8_t, int8x16x2_t, uint8x8_t, s8)\n+TEST_TBX2 (vqtbx2, uint8x8_t, uint8x16x2_t, uint8x8_t, u8)\n+TEST_TBX2 (vqtbx2, poly8x8_t, poly8x16x2_t, uint8x8_t, p8)\n+\n+TEST_TBX2 (vqtbx2q, int8x16_t, int8x16x2_t, uint8x16_t, s8)\n+TEST_TBX2 (vqtbx2q, uint8x16_t, uint8x16x2_t, uint8x16_t, u8)\n+TEST_TBX2 (vqtbx2q, poly8x16_t, poly8x16x2_t, uint8x16_t, p8)\n+\n+#define TEST_TBX3(name, rettype, tbltype, idxtype, ts) \\\n+  rettype test_ ## name ## _ ## ts (rettype a, tbltype b, idxtype c) \\\n+\t{ \\\n+\t\treturn name ## _ ## ts (a, b, c); \\\n+\t}\n+\n+TEST_TBX3 (vqtbx3, int8x8_t, int8x16x3_t, uint8x8_t, s8)\n+TEST_TBX3 (vqtbx3, uint8x8_t, uint8x16x3_t, uint8x8_t, u8)\n+TEST_TBX3 (vqtbx3, poly8x8_t, poly8x16x3_t, uint8x8_t, p8)\n+\n+TEST_TBX3 (vqtbx3q, int8x16_t, int8x16x3_t, uint8x16_t, s8)\n+TEST_TBX3 (vqtbx3q, uint8x16_t, uint8x16x3_t, uint8x16_t, u8)\n+TEST_TBX3 (vqtbx3q, poly8x16_t, poly8x16x3_t, uint8x16_t, p8)\n+\n+#define TEST_TBX4(name, rettype, tbltype, idxtype, ts) \\\n+  rettype test_ ## name ## _ ## ts (rettype a, idxtype b, idxtype dummy1, \\\n+\t\t\t\t    idxtype dummy2, tbltype c) \\\n+\t{ \\\n+\t\treturn name ## _ ## ts (a, c, b); \\\n+\t}\n+\n+TEST_TBX4 (vqtbx4, int8x8_t, int8x16x4_t, uint8x8_t, s8)\n+TEST_TBX4 (vqtbx4, uint8x8_t, uint8x16x4_t, uint8x8_t, u8)\n+TEST_TBX4 (vqtbx4, poly8x8_t, poly8x16x4_t, uint8x8_t, p8)\n+\n+TEST_TBX4 (vqtbx4q, int8x16_t, int8x16x4_t, uint8x16_t, s8)\n+TEST_TBX4 (vqtbx4q, uint8x16_t, uint8x16x4_t, uint8x16_t, u8)\n+TEST_TBX4 (vqtbx4q, poly8x16_t, poly8x16x4_t, uint8x16_t, p8)\n+\n /* { dg-final { scan-assembler-not \"mov\\\\t\" } } */\n \n /* { dg-final { scan-assembler-times \"tbl\\\\t\" 18} }  */\n+/* { dg-final { scan-assembler-times \"tbx\\\\t\" 18} }  */"}]}