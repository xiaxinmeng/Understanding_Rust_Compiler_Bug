{"sha": "f1c89270e5d53efe52a6ee176a86224d60043047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjODkyNzBlNWQ1M2VmZTUyYTZlZTE3NmE4NjIyNGQ2MDA0MzA0Nw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-03-08T10:51:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-08T10:51:30Z"}, "message": "locale_facets.tcc (money_get<>::_M_extract): The value _space_ indicates that at least one space is required at that position.\n\n2004-03-08  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n\tThe value _space_ indicates that at least one space is required\n\tat that position.\n\t* testsuite/22_locale/money_get/get/char/17.cc: New.\n\t* testsuite/22_locale/money_get/get/wchar_t/17.cc: New.\n\n\t* testsuite/22_locale/money_get/get/char/7.cc: Minor tweaks.\n\t* testsuite/22_locale/money_get/get/wchar_t/7.cc: Likewise.\n\n\t* include/bits/locale_facets.tcc (money_get<>::do_get(long_double&)):\n\tRemove redundant conditional on __str.size().\n\nFrom-SVN: r79111", "tree": {"sha": "191b993bd45f2d350674a5b95c66bef1b4efed0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/191b993bd45f2d350674a5b95c66bef1b4efed0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c89270e5d53efe52a6ee176a86224d60043047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c89270e5d53efe52a6ee176a86224d60043047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c89270e5d53efe52a6ee176a86224d60043047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c89270e5d53efe52a6ee176a86224d60043047/comments", "author": null, "committer": null, "parents": [{"sha": "d50a16c4335e68f36982ab6e2de8744d6bcd101d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50a16c4335e68f36982ab6e2de8744d6bcd101d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50a16c4335e68f36982ab6e2de8744d6bcd101d"}], "stats": {"total": 192, "additions": 178, "deletions": 14}, "files": [{"sha": "b105ada1a2a5167357ffef59da6c60bd4683be43", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f1c89270e5d53efe52a6ee176a86224d60043047", "patch": "@@ -1,3 +1,17 @@\n+2004-03-08  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n+\tThe value _space_ indicates that at least one space is required\n+\tat that position.\n+\t* testsuite/22_locale/money_get/get/char/17.cc: New.\n+\t* testsuite/22_locale/money_get/get/wchar_t/17.cc: New.\n+\n+\t* testsuite/22_locale/money_get/get/char/7.cc: Minor tweaks.\n+\t* testsuite/22_locale/money_get/get/wchar_t/7.cc: Likewise.\n+\n+\t* include/bits/locale_facets.tcc (money_get<>::do_get(long_double&)):\n+\tRemove redundant conditional on __str.size().\n+\t\n 2004-03-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/allocator.h: Switch defaults to mt_alloc."}, {"sha": "45913178d429dfe2160dd23dd7a8712a02f7a908", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=f1c89270e5d53efe52a6ee176a86224d60043047", "patch": "@@ -1293,6 +1293,11 @@ namespace std\n \t\t  __testvalid = false;\n \t\tbreak;\n \t      case money_base::space:\n+\t\t// At least one space is required.\n+\t\tif (__beg != __end && __ctype.is(ctype_base::space, *__beg))\n+\t\t  ++__beg;\n+\t\telse\n+\t\t  __testvalid = false;\n \t      case money_base::none:\n \t\t// Only if not at the end of the pattern.\n \t\tif (__i != 3)\n@@ -1372,10 +1377,7 @@ namespace std\n \t__beg = _M_extract<true>(__beg, __end, __io, __err, __str);\n       else\n \t__beg = _M_extract<false>(__beg, __end, __io, __err, __str);\n-\n-      if (__str.size())\n-\tstd::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());\n-\n+      std::__convert_to_v(__str.c_str(), __units, __err, _S_get_c_locale());\n       return __beg;\n     }\n "}, {"sha": "5216b414aaea249bc7bc9281200687235561604b", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/17.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F17.cc?ref=f1c89270e5d53efe52a6ee176a86224d60043047", "patch": "@@ -0,0 +1,71 @@\n+// 2004-03-08  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// 22.2.6.3, p2: \"The value _space_ indicates that at least one space\n+//                is required at that position.\"\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+\n+  iterator_type end, end02;\n+  istringstream iss;\n+  iss.imbue(loc_de);\n+  // cache the money_get facet\n+  const money_get<char>& mon_get =\n+    use_facet<money_get<char> >(iss.getloc()); \n+\n+  iss.str(\"7.200.000.000,00\");\n+  iterator_type is_it01(iss);\n+  string result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( err01 == (ios_base::failbit | ios_base::eofbit) );\n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(\"7.200.000.000,00EUR \");\n+  iterator_type is_it02(iss);\n+  string result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  end02 = mon_get.get(is_it02, end, true, iss, err02, result2);\n+  VERIFY( err02 == ios_base::failbit );\n+  VERIFY( *end02 == 'E' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d3d5bfe25daddfa4758a8e2e8b600c040a2fa3c3", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/7.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc?ref=f1c89270e5d53efe52a6ee176a86224d60043047", "patch": "@@ -1,6 +1,6 @@\n // 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,22 +44,25 @@ void test07()\n \n   ios_base::iostate err;\n \n-  const money_get<char,InIt>& mg = use_facet<money_get<char, InIt> >(loc_c);\n+  const money_get<char, InIt>& mg = use_facet<money_get<char, InIt> >(loc_c);\n \n   istringstream fmt1(buffer1);\n+  fmt1.imbue(loc_c);\n   InIt ibeg1(fmt1);\n-  mg.get(ibeg1,iend1,false,fmt1,err,val);\n+  mg.get(ibeg1, iend1, false, fmt1, err, val);\n   VERIFY( val == buffer1 );\n \n   istringstream fmt2(buffer2);\n+  fmt2.imbue(loc_c);\n   InIt ibeg2(fmt2);\n-  mg.get(ibeg2,iend2,false,fmt2,err,val);\n+  mg.get(ibeg2, iend2, false, fmt2, err, val);\n   VERIFY( val == buffer2 );\n \n   val = buffer3;\n   istringstream fmt3(buffer3);\n+  fmt3.imbue(loc_c);\n   InIt ibeg3(fmt3);\n-  mg.get(ibeg3,iend3,false,fmt3,err,val);\n+  mg.get(ibeg3, iend3, false, fmt3, err, val);\n   VERIFY( val == buffer3 );\n }\n "}, {"sha": "e8affd81bb8e63e5c3d697e47f27eaed241bfd7d", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/17.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F17.cc?ref=f1c89270e5d53efe52a6ee176a86224d60043047", "patch": "@@ -0,0 +1,71 @@\n+// 2004-03-08  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// 22.2.6.3, p2: \"The value _space_ indicates that at least one space\n+//                is required at that position.\"\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+\n+  iterator_type end, end02;\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get =\n+    use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+  iss.str(L\"7.200.000.000,00\");\n+  iterator_type is_it01(iss);\n+  wstring result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( err01 == (ios_base::failbit | ios_base::eofbit) );\n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(L\"7.200.000.000,00EUR \");\n+  iterator_type is_it02(iss);\n+  wstring result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  end02 = mon_get.get(is_it02, end, true, iss, err02, result2);\n+  VERIFY( err02 == ios_base::failbit );\n+  VERIFY( *end02 == L'E' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f7f3ae1d9929c72bc2f2beeffad3b1e611f6b9f3", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/7.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c89270e5d53efe52a6ee176a86224d60043047/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc?ref=f1c89270e5d53efe52a6ee176a86224d60043047", "patch": "@@ -1,6 +1,6 @@\n // 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,22 +44,25 @@ void test07()\n \n   ios_base::iostate err;\n \n-  const money_get<wchar_t,InIt>& mg = use_facet<money_get<wchar_t, InIt> >(loc_c);\n+  const money_get<wchar_t, InIt>& mg = use_facet<money_get<wchar_t, InIt> >(loc_c);\n \n   wistringstream fmt1(buffer1);\n+  fmt1.imbue(loc_c);\n   InIt ibeg1(fmt1);\n-  mg.get(ibeg1,iend1,false,fmt1,err,val);\n+  mg.get(ibeg1, iend1, false, fmt1, err, val);\n   VERIFY( val == buffer1 );\n \n   wistringstream fmt2(buffer2);\n+  fmt2.imbue(loc_c);\n   InIt ibeg2(fmt2);\n-  mg.get(ibeg2,iend2,false,fmt2,err,val);\n+  mg.get(ibeg2, iend2, false, fmt2, err, val);\n   VERIFY( val == buffer2 );\n \n   val = buffer3;\n   wistringstream fmt3(buffer3);\n+  fmt3.imbue(loc_c);\n   InIt ibeg3(fmt3);\n-  mg.get(ibeg3,iend3,false,fmt3,err,val);\n+  mg.get(ibeg3, iend3, false, fmt3, err, val);\n   VERIFY( val == buffer3 );\n }\n "}]}