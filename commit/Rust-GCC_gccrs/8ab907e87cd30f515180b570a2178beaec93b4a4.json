{"sha": "8ab907e87cd30f515180b570a2178beaec93b4a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiOTA3ZTg3Y2QzMGY1MTUxODBiNTcwYTIxNzhiZWFlYzkzYjRhNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-10-01T10:20:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-10-01T10:20:33Z"}, "message": "mips.md (bunge, [...]): New define_expands.\n\n[gcc/]\n\t* config/mips/mips.md (bunge, bltgt, bungt): New define_expands.\n\t(sordered_df, sordered_sf): Remove.\n\t* config/mips/mips.c (get_float_compare_codes): New fn.\n\t(gen_int_relational, gen_conditional_move): Use it.\n\n[gcc/testsuite]\n\t* gcc.c-torture/compile/20020923-1.c: New test.\n\nFrom-SVN: r57684", "tree": {"sha": "090007329395fe33b403d0df83ce7c40d4885395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/090007329395fe33b403d0df83ce7c40d4885395"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab907e87cd30f515180b570a2178beaec93b4a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab907e87cd30f515180b570a2178beaec93b4a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab907e87cd30f515180b570a2178beaec93b4a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab907e87cd30f515180b570a2178beaec93b4a4/comments", "author": null, "committer": null, "parents": [{"sha": "d12b8c85a9c84502436fdea354e99bcd9c03338a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12b8c85a9c84502436fdea354e99bcd9c03338a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12b8c85a9c84502436fdea354e99bcd9c03338a"}], "stats": {"total": 122, "additions": 89, "deletions": 33}, "files": [{"sha": "32143e5dd5cd4630d269340e21b324e552cc363a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ab907e87cd30f515180b570a2178beaec93b4a4", "patch": "@@ -1,3 +1,10 @@\n+2002-10-01  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (bunge, bltgt, bungt): New define_expands.\n+\t(sordered_df, sordered_sf): Remove.\n+\t* config/mips/mips.c (get_float_compare_codes): New fn.\n+\t(gen_int_relational, gen_conditional_move): Use it.\n+\n 2002-10-01  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (mips_emit_fcc_reload): Declare."}, {"sha": "450de435a46d6480c9ae948451a9b343c65104ff", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=8ab907e87cd30f515180b570a2178beaec93b4a4", "patch": "@@ -84,6 +84,8 @@ enum internal_test {\n struct constant;\n struct mips_arg_info;\n static enum internal_test map_test_to_internal_test\tPARAMS ((enum rtx_code));\n+static void get_float_compare_codes PARAMS ((enum rtx_code, enum rtx_code *,\n+\t\t\t\t\t     enum rtx_code *));\n static int mips16_simple_memory_operand\t\tPARAMS ((rtx, rtx,\n \t\t\t\t\t\t\tenum machine_mode));\n static int m16_check_op\t\t\t\tPARAMS ((rtx, int, int, int));\n@@ -3313,6 +3315,34 @@ gen_int_relational (test_code, result, cmp0, cmp1, p_invert)\n   return result;\n }\n \f\n+/* Work out how to check a floating-point condition.  We need a\n+   separate comparison instruction (C.cond.fmt), followed by a\n+   branch or conditional move.  Given that IN_CODE is the\n+   required condition, set *CMP_CODE to the C.cond.fmt code\n+   and *action_code to the branch or move code.  */\n+\n+static void\n+get_float_compare_codes (in_code, cmp_code, action_code)\n+     enum rtx_code in_code, *cmp_code, *action_code;\n+{\n+  switch (in_code)\n+    {\n+    case NE:\n+    case UNGE:\n+    case UNGT:\n+    case LTGT:\n+    case ORDERED:\n+      *cmp_code = reverse_condition_maybe_unordered (in_code);\n+      *action_code = EQ;\n+      break;\n+\n+    default:\n+      *cmp_code = in_code;\n+      *action_code = NE;\n+      break;\n+    }\n+}\n+\n /* Emit the common code for doing conditional branches.\n    operand[0] is the label to jump to.\n    The comparison operands are saved away by cmp{si,di,sf,df}.  */\n@@ -3326,6 +3356,7 @@ gen_conditional_branch (operands, test_code)\n   rtx cmp0 = branch_cmp[0];\n   rtx cmp1 = branch_cmp[1];\n   enum machine_mode mode;\n+  enum rtx_code cmp_code;\n   rtx reg;\n   int invert;\n   rtx label1, label2;\n@@ -3358,15 +3389,10 @@ gen_conditional_branch (operands, test_code)\n       else\n \treg = gen_reg_rtx (CCmode);\n \n-      /* For cmp0 != cmp1, build cmp0 == cmp1, and test for result ==\n-         0 in the instruction built below.  The MIPS FPU handles\n-         inequality testing by testing for equality and looking for a\n-         false result.  */\n+      get_float_compare_codes (test_code, &cmp_code, &test_code);\n       emit_insn (gen_rtx_SET (VOIDmode, reg,\n-\t\t\t      gen_rtx (test_code == NE ? EQ : test_code,\n-\t\t\t\t       CCmode, cmp0, cmp1)));\n+\t\t\t      gen_rtx (cmp_code, CCmode, cmp0, cmp1)));\n \n-      test_code = test_code == NE ? EQ : NE;\n       mode = CCmode;\n       cmp0 = reg;\n       cmp1 = const0_rtx;\n@@ -3460,8 +3486,8 @@ gen_conditional_move (operands)\n \t  abort ();\n \t}\n     }\n-  else if (cmp_code == NE)\n-    cmp_code = EQ, move_code = EQ;\n+  else\n+    get_float_compare_codes (cmp_code, &cmp_code, &move_code);\n \n   if (mode == SImode || mode == DImode)\n     cmp_mode = mode;"}, {"sha": "f47be55a369eeb3fc5e568f9232848152d616470", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=8ab907e87cd30f515180b570a2178beaec93b4a4", "patch": "@@ -8240,6 +8240,19 @@ move\\\\t%0,%z4\\\\n\\\\\n      }\n }\")\n \n+(define_expand \"bunge\"\n+  [(set (pc)\n+\t(if_then_else (unge:CC (cc0)\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  gen_conditional_branch (operands, UNGE);\n+  DONE;\n+}\")\n+\n (define_expand \"buneq\"\n   [(set (pc)\n \t(if_then_else (uneq:CC (cc0)\n@@ -8256,6 +8269,19 @@ move\\\\t%0,%z4\\\\n\\\\\n      }\n }\")\n \n+(define_expand \"bltgt\"\n+  [(set (pc)\n+\t(if_then_else (ltgt:CC (cc0)\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  gen_conditional_branch (operands, LTGT);\n+  DONE;\n+}\")\n+\n (define_expand \"bunle\"\n   [(set (pc)\n \t(if_then_else (unle:CC (cc0)\n@@ -8272,6 +8298,19 @@ move\\\\t%0,%z4\\\\n\\\\\n      }\n }\")\n \n+(define_expand \"bungt\"\n+  [(set (pc)\n+\t(if_then_else (ungt:CC (cc0)\n+\t\t\t       (const_int 0))\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\n+{\n+  gen_conditional_branch (operands, UNGT);\n+  DONE;\n+}\")\n+\n (define_expand \"beq\"\n   [(set (pc)\n \t(if_then_else (eq:CC (cc0)\n@@ -9340,18 +9379,6 @@ move\\\\t%0,%z4\\\\n\\\\\n  [(set_attr \"type\"      \"fcmp\")\n   (set_attr \"mode\"      \"FPSW\")])\n \n-(define_insn \"sordered_df\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n-\t(ordered:CC (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t    (match_operand:DF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n-  \"*\n-{\n- return mips_fill_delay_slot (\\\"c.or.d\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n-}\"\n- [(set_attr \"type\"      \"fcmp\")\n-  (set_attr \"mode\"      \"FPSW\")])\n-\n (define_insn \"sunlt_df\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n \t(unlt:CC (match_operand:DF 1 \"register_operand\" \"f\")\n@@ -9460,18 +9487,6 @@ move\\\\t%0,%z4\\\\n\\\\\n  [(set_attr \"type\"\t\"fcmp\")\n   (set_attr \"mode\"\t\"FPSW\")])\n \n-(define_insn \"sordered_sf\"\n-  [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n-\t(ordered:CC (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t    (match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_HARD_FLOAT\"\n-  \"*\n-{\n- return mips_fill_delay_slot (\\\"c.or.s\\\\t%Z0%1,%2\\\", DELAY_FCMP, operands, insn);\n-}\"\n- [(set_attr \"type\"\t\"fcmp\")\n-  (set_attr \"mode\"\t\"FPSW\")])\n-\n (define_insn \"sunlt_sf\"\n   [(set (match_operand:CC 0 \"register_operand\" \"=z\")\n \t(unlt:CC (match_operand:SF 1 \"register_operand\" \"f\")"}, {"sha": "49e7ea2769f433c39d91dfebb4746ed5d2fc9c23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ab907e87cd30f515180b570a2178beaec93b4a4", "patch": "@@ -1,3 +1,7 @@\n+2002-10-01  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/compile/20020923-1.c: New test.\n+\n 2002-09-30  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* gcc.c-torture/execute/ffs-1.c: New test."}, {"sha": "9f0f9c0978fbae7a2f2b90f40959bea7234bb021", "filename": "gcc/testsuite/gcc.c-torture/compile/20021001-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021001-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab907e87cd30f515180b570a2178beaec93b4a4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021001-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20021001-1.c?ref=8ab907e87cd30f515180b570a2178beaec93b4a4", "patch": "@@ -0,0 +1,4 @@\n+int foo (double x, double y)\n+{\n+  return !__builtin_isunordered (x, y);\n+}"}]}