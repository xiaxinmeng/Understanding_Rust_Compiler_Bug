{"sha": "72eaa7a090fbe5306413e59993ad82b893ceaf09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlYWE3YTA5MGZiZTUzMDY0MTNlNTk5OTNhZDgyYjg5M2NlYWYwOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-19T22:20:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-19T22:20:47Z"}, "message": "(add_1_to_mem): Deleted.\n\n(output_operand_address): Added output modifier 'A'.\n\nFrom-SVN: r13527", "tree": {"sha": "4e5117508bf1d4cf0e9a04eecde97610ecc5284d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e5117508bf1d4cf0e9a04eecde97610ecc5284d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72eaa7a090fbe5306413e59993ad82b893ceaf09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72eaa7a090fbe5306413e59993ad82b893ceaf09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72eaa7a090fbe5306413e59993ad82b893ceaf09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72eaa7a090fbe5306413e59993ad82b893ceaf09/comments", "author": null, "committer": null, "parents": [{"sha": "a9cd25ec35b1c74adc001885a138218fc2fbf267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9cd25ec35b1c74adc001885a138218fc2fbf267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9cd25ec35b1c74adc001885a138218fc2fbf267"}], "stats": {"total": 86, "additions": 18, "deletions": 68}, "files": [{"sha": "0c10b6ddc736c164449c37a71fd41b00b1b984e5", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 18, "deletions": 68, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72eaa7a090fbe5306413e59993ad82b893ceaf09/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72eaa7a090fbe5306413e59993ad82b893ceaf09/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=72eaa7a090fbe5306413e59993ad82b893ceaf09", "patch": "@@ -369,68 +369,6 @@ simple_memory_operand (op, mode)\n }\n \n \n-/* destructively add one to memory address */\n-add_1_to_mem (opnd)\t/* returns 0 for success, -1 for failure */\n-     rtx opnd;\t\t/* OPND must be a MEM rtx */\n-{\n-  rtx inner = XEXP (opnd, 0);\n-\n-  if (GET_CODE (opnd) != MEM)\n-    {\n-      fprintf (stderr, \"add_1_to_mem: input is not MEM\\n\");\n-      return -1;  /* failure */\n-    }\n-  switch (GET_CODE (inner))\n-    {\n-    case CONST:\n-      inner = XEXP (inner, 0);\n-      if (GET_CODE (inner) != PLUS\n-       || GET_CODE (XEXP (inner, 1)) != CONST_INT)\n-\t{\n-\t  fprintf (stderr, \"add_1_to_mem: CONST failure\\n\");\n-\t  return -1;\n-\t}\n-      INTVAL (XEXP (XEXP (XEXP (opnd, 0), 0), 1)) += 1;\n-      break;\n-    case REG:\n-      XEXP (opnd, 0) = gen_rtx (PLUS, Pmode, inner, const1_rtx);\n-      break;\n-    case SYMBOL_REF:\n-    case LABEL_REF:\n-      XEXP (opnd, 0) = gen_rtx (CONST, VOIDmode,\n-\t\t\t gen_rtx (PLUS, Pmode, inner, const1_rtx));\n-      break;\n-    case PLUS:\n-      inner = XEXP (inner, 1);\n-      switch (GET_CODE (inner))\n-\t{\n-\tcase CONST:\n-\t  inner = XEXP (inner, 0);\n-\t  if (GET_CODE (inner) != PLUS\n-\t   || GET_CODE (XEXP (inner, 1)) != CONST_INT)\n-\t    {\n-\t      fprintf (stderr, \"add_1_to_mem: PLUS CONST failure\\n\");\n-\t      return -1;\n-\t    }\n-\t  INTVAL (XEXP (XEXP (XEXP (XEXP (opnd, 0), 1), 0), 1)) += 1;\n-\t  break;\n-\tcase CONST_INT:\n-\t  INTVAL (XEXP (XEXP (opnd, 0), 1)) += 1;\n-\t  break;\n-\tcase SYMBOL_REF:\n-\tcase LABEL_REF:\n-\t  XEXP (XEXP (opnd, 0), 1) = gen_rtx (CONST, VOIDmode,\n-\t\t\t\t     gen_rtx (PLUS, Pmode, inner, const1_rtx));\n-\t  break;\n-\tdefault:\n-\t  fprintf (stderr, \"add_1_to_mem: PLUS failure\\n\");\n-\t  return -1;\n-\t}\n-    }\n-  return 0;\n-}\n-\n-\n /* Decide whether to output a conditional jump as a \"Jump Conditional\"\n    or as a \"Branch Conditional\": */\n \n@@ -504,6 +442,7 @@ next_cc_user_is_unsigned (insn)\n }\n \n \n+static int addr_inc;\n \n /* The PRINT_OPERAND and PRINT_OPERAND_ADDRESS macros have been\n    made functions: */\n@@ -520,6 +459,8 @@ print_operand (file, x, kode)\n       break;\n     case SYMBOL_REF:\n       fprintf (file, \"%s\", XSTR (x, 0));\n+      if (kode == 'A')\n+\tfprintf (file, \"+1\");\n       break;\n     case LABEL_REF:\n     case CONST:\n@@ -541,7 +482,10 @@ print_operand (file, x, kode)\n \t    }\n \t}\n       else\n-        output_address (XEXP (x, 0));\n+\t{\n+\t  addr_inc = (kode == 'A' ? 1 : 0);\n+\t  output_address (XEXP (x, 0));\n+\t}\n       break;\n     case CONST_DOUBLE:\n /*    {\n@@ -647,6 +591,7 @@ print_operand (file, x, kode)\n     default:\n       fprintf (file, \"p_o_UFO code=%d\", GET_CODE (x));\n     }\n+  addr_inc = 0;\n }\n \n print_operand_address (file, addr)\n@@ -656,7 +601,7 @@ print_operand_address (file, addr)\n   switch (GET_CODE (addr))\n     {\n     case REG:\n-      fprintf (file, \"0,r%d ; P_O_A\", REGNO (addr));\n+      fprintf (file, \"%d,r%d ; P_O_A\", addr_inc, REGNO (addr));\n       break;\n     case PLUS:\n       {\n@@ -671,11 +616,13 @@ print_operand_address (file, addr)\n \t\tfprintf (file, \",r%d ;P_O_A reg + const expr\", REGNO (x));\n \t\tbreak;\n \t      case CONST_INT:\n-\t\tfprintf (file, \"%d,r%d\", INTVAL (y), REGNO (x));\n+\t\tfprintf (file, \"%d,r%d\", INTVAL (y) + addr_inc, REGNO (x));\n \t\tbreak;\n \t      case SYMBOL_REF:\n-\t\tfprintf (file, \"%s,r%d  ; P_O_A reg + sym\",\n-\t\t\t XSTR (y, 0), REGNO (x));\n+\t\tfprintf (file, \"%s\", XSTR (y, 0));\n+\t\tif (addr_inc)\n+\t\t  fprintf (file, \"+%d\", addr_inc);\n+\t\tfprintf (file, \",r%d  ; P_O_A reg + sym\", REGNO (x));\n \t\tbreak;\n \t      case LABEL_REF:\n \t\toutput_address (XEXP (y, 0));\n@@ -693,7 +640,7 @@ print_operand_address (file, addr)\n \t    switch (GET_CODE (y))\n \t      {\n \t      case CONST_INT:\n-\t\tfprintf (file, \"%d+%s\", INTVAL (y), XSTR (x, 0));\n+\t\tfprintf (file, \"%d+%s\", INTVAL (y) + addr_inc, XSTR (x, 0));\n \t\tbreak;\n \t      case REG:\n \t\tfprintf (file, \"%s,r%d ;P_O_A sym + reg\",\n@@ -735,6 +682,8 @@ print_operand_address (file, addr)\n     case LABEL_REF:\n     case SYMBOL_REF:\n       fprintf (file, \"%s\", XSTR (addr, 0));\n+      if (addr_inc)\n+\tfprintf (file, \"+%d\", addr_inc);\n       break;\n     case MEM:\n       fprintf (file, \"[memUFO:\");\n@@ -753,5 +702,6 @@ print_operand_address (file, addr)\n \t       (int) GET_CODE (addr), INTVAL (addr));\n       break;\n     }\n+  addr_inc = 0;\n }\n "}]}