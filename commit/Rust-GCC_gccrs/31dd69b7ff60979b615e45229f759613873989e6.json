{"sha": "31dd69b7ff60979b615e45229f759613873989e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkZDY5YjdmZjYwOTc5YjYxNWU0NTIyOWY3NTk2MTM4NzM5ODllNg==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2018-06-22T10:04:14Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-06-22T10:04:14Z"}, "message": "Update OpenACC testcases\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/deviceptr-4.c: New file.\n\t* c-c++-common/goacc/kernels-counter-var-redundant-load.c:\n\tLikewise.\n\t* c-c++-common/goacc/kernels-loop-data-2.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-data-enter-exit-2.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-data-enter-exit.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-data-update.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-data.c: Likewise.\n\t* c-c++-common/goacc/kernels-parallel-loop-data-enter-exit.c:\n\tLikewise.\n\t* c-c++-common/goacc/parallel-reduction.c: Likewise.\n\t* c-c++-common/goacc/private-reduction-1.c: Likewise.\n\t* gfortran.dg/goacc/kernels-parallel-loop-data-enter-exit.f95:\n\tLikewise.\n\t* gfortran.dg/goacc/modules.f95: Likewise.\n\t* gfortran.dg/goacc/routine-8.f90: Likewise.\n\t* gfortran.dg/goacc/routine-level-of-parallelism-1.f90: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Don't force \"-O2\".\n\t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Update.\n\t* testsuite/libgomp.oacc-c-c++-common/host_data-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/mode-transitions.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/data-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/data-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-c++/non-scalar-data.C: New file.\n\t* testsuite/libgomp.oacc-c-c++-common/declare-3.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/enter-data.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-enter-exit-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-enter-exit.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-update.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-parallel-loop-data-enter-exit.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-6.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-reduction-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-loop-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-loop-1.h: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-loop-2.h: Likewise.\n\t* testsuite/libgomp.oacc-fortran/cublas-fixed.h: Likewise.\n\t* testsuite/libgomp.oacc-fortran/dummy-array.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/host_data-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/host_data-3.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/host_data-4.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-acc-loop-reduction-2.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-acc-loop-reduction.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-collapse-3.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-collapse-4.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-independent.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-loop-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-map-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-parallel-loop-data-enter-exit.f95:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-2.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-3.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-6.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-2.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-2.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-3.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-4.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-5.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-6.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-7.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-reduction-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/lib-12.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/lib-13.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/lib-14.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/lib-15.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-loop-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reference-reductions.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/vector-routine.f90: Likewise.\n\nCo-Authored-By: James Norris <jnorris@codesourcery.com>\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r261884", "tree": {"sha": "d3f7ad7604a2aa1dc7c92c08dba3aa31c5e791e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3f7ad7604a2aa1dc7c92c08dba3aa31c5e791e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31dd69b7ff60979b615e45229f759613873989e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31dd69b7ff60979b615e45229f759613873989e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31dd69b7ff60979b615e45229f759613873989e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31dd69b7ff60979b615e45229f759613873989e6/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebbb116851bd0b43e6c86cd719b7a70684991d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebbb116851bd0b43e6c86cd719b7a70684991d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebbb116851bd0b43e6c86cd719b7a70684991d66"}], "stats": {"total": 4769, "additions": 4712, "deletions": 57}, "files": [{"sha": "655a4405b417d8817af7cb871f618bc459214cd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -1,3 +1,26 @@\n+2018-06-22  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n+\n+\t* c-c++-common/goacc/deviceptr-4.c: New file.\n+\t* c-c++-common/goacc/kernels-counter-var-redundant-load.c:\n+\tLikewise.\n+\t* c-c++-common/goacc/kernels-loop-data-2.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-data-enter-exit-2.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-data-enter-exit.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-data-update.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-data.c: Likewise.\n+\t* c-c++-common/goacc/kernels-parallel-loop-data-enter-exit.c:\n+\tLikewise.\n+\t* c-c++-common/goacc/parallel-reduction.c: Likewise.\n+\t* c-c++-common/goacc/private-reduction-1.c: Likewise.\n+\t* gfortran.dg/goacc/kernels-parallel-loop-data-enter-exit.f95:\n+\tLikewise.\n+\t* gfortran.dg/goacc/modules.f95: Likewise.\n+\t* gfortran.dg/goacc/routine-8.f90: Likewise.\n+\t* gfortran.dg/goacc/routine-level-of-parallelism-1.f90: Likewise.\n+\n 2018-06-21  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* gcc.target/powerpc/pack02.c: Use __ibm128 instead of long double"}, {"sha": "db1b91633a6f8e66d0d551e81a817f6ca466d341", "filename": "gcc/testsuite/c-c++-common/goacc/deviceptr-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-4.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-additional-options \"-fdump-tree-gimple\" } */\n+\n+void\n+subr (int *a)\n+{\n+#pragma acc data deviceptr (a)\n+#pragma acc parallel\n+  a[0] += 1.0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"#pragma omp target oacc_parallel.*map\\\\(tofrom:a\" 1 \"gimple\" } } */"}, {"sha": "030425475495080975ea4ed8bd2b76d0beb8cc3d", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-counter-var-redundant-load.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-var-redundant-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-var-redundant-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-var-redundant-load.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-dom3\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+COUNTERTYPE\n+foo (unsigned int *c)\n+{\n+  COUNTERTYPE ii;\n+\n+#pragma acc kernels copyout (c[0:N])\n+  {\n+    for (ii = 0; ii < N; ii++)\n+      c[ii] = 1;\n+  }\n+\n+  return ii;\n+}\n+\n+/* We're expecting:\n+\n+   .omp_data_i_10 = &.omp_data_arr.3;\n+   _11 = .omp_data_i_10->ii;\n+   *_11 = 0;\n+   _15 = .omp_data_i_10->c;\n+   c.1_16 = *_15;\n+\n+   Check that there's only one load from anonymous ssa-name (which we assume to\n+   be the one to read c), and that there's no such load for ii.  */\n+\n+/* { dg-final { scan-tree-dump-times \"(?n)\\\\*_\\[0-9\\]\\[0-9\\]*;$\" 1 \"dom3\" } } */"}, {"sha": "71800217991a2907e4293ccb3d90589052150480", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-data-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,68 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc data copyout (a[0:N])\n+  {\n+#pragma acc kernels present (a[0:N])\n+    {\n+      for (COUNTERTYPE i = 0; i < N; i++)\n+\ta[i] = i * 2;\n+    }\n+  }\n+\n+#pragma acc data copyout (b[0:N])\n+  {\n+#pragma acc kernels present (b[0:N])\n+    {\n+      for (COUNTERTYPE i = 0; i < N; i++)\n+\tb[i] = i * 4;\n+    }\n+  }\n+\n+#pragma acc data copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  {\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+    {\n+      for (COUNTERTYPE ii = 0; ii < N; ii++)\n+\tc[ii] = a[ii] + b[ii];\n+    }\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only three loops are analyzed, and that all can be\n+   parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.1\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.2\" 1 \"optimized\" } } */"}, {"sha": "0c9f83312408d69dcfafa89f76fb4c11984c0bb7", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-data-enter-exit-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-enter-exit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-enter-exit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-enter-exit-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc enter data create (a[0:N])\n+#pragma acc kernels present (a[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+#pragma acc exit data copyout (a[0:N])\n+\n+#pragma acc enter data create (b[0:N])\n+#pragma acc kernels present (b[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+#pragma acc exit data copyout (b[0:N])\n+\n+\n+#pragma acc enter data copyin (a[0:N], b[0:N]) create (c[0:N])\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+#pragma acc exit data copyout (c[0:N])\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only three loops are analyzed, and that all can be\n+   parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.1\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.2\" 1 \"optimized\" } } */"}, {"sha": "0bd21b68d317fc446cc7ebe81edde8aa8a877fab", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-data-enter-exit.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-enter-exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-enter-exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-enter-exit.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc enter data create (a[0:N], b[0:N], c[0:N])\n+\n+#pragma acc kernels present (a[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+\n+#pragma acc kernels present (b[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+#pragma acc exit data copyout (a[0:N], c[0:N])\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only three loops are analyzed, and that all can be\n+   parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.1\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.2\" 1 \"optimized\" } } */"}, {"sha": "dd5a84146a8e6172d84c8fd969041dee2043d7d0", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-data-update.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data-update.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc enter data create (a[0:N], b[0:N], c[0:N])\n+\n+#pragma acc kernels present (a[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+\n+#pragma acc update device (b[0:N])\n+\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+#pragma acc exit data copyout (a[0:N], c[0:N])\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only two loops are analyzed, and that both can be\n+   parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 2 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.1\" 1 \"optimized\" } } */"}, {"sha": "a658182de904f2db0b91eb554e4c85c16b71cb25", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-data.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-data.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc data copyout (a[0:N], b[0:N], c[0:N])\n+  {\n+#pragma acc kernels present (a[0:N])\n+    {\n+      for (COUNTERTYPE i = 0; i < N; i++)\n+\ta[i] = i * 2;\n+    }\n+\n+#pragma acc kernels present (b[0:N])\n+    {\n+      for (COUNTERTYPE i = 0; i < N; i++)\n+\tb[i] = i * 4;\n+    }\n+\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+    {\n+      for (COUNTERTYPE ii = 0; ii < N; ii++)\n+\tc[ii] = a[ii] + b[ii];\n+    }\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only three loops are analyzed, and that all can be\n+   parallelized.  */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.1\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.2\" 1 \"optimized\" } } */"}, {"sha": "81b0fee5a44c123bd832704e32a1452ab41c94f6", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-parallel-loop-data-enter-exit.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-parallel-loop-data-enter-exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-parallel-loop-data-enter-exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-parallel-loop-data-enter-exit.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc enter data create (a[0:N], b[0:N], c[0:N])\n+\n+#pragma acc kernels present (a[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+\n+#pragma acc parallel present (b[0:N])\n+  {\n+#pragma acc loop\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+#pragma acc exit data copyout (a[0:N], b[0:N], c[0:N])\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+\n+/* Check that only two loops are analyzed, and that both can be\n+   parallelized.  */\n+// FIXME: OpenACC kernels stopped working with the firstprivate subarray\n+// changes.\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 2 \"parloops1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" { xfail *-*-* } } } */\n+\n+/* Check that the loop has been split off into a function.  */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.1\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.2\" 1 \"optimized\" } } */"}, {"sha": "d7cc9470127aa5ddbeaa9516ed2b51ff641eeea5", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-reduction.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-reduction.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,17 @@\n+int\n+main ()\n+{\n+  int sum = 0;\n+  int dummy = 0;\n+\n+#pragma acc data copy (dummy)\n+  {\n+#pragma acc parallel num_gangs (10) copy (sum) reduction (+:sum)\n+    {\n+      int v = 5;\n+      sum += 10 + v;\n+    }\n+  }\n+\n+  return sum;\n+}"}, {"sha": "d4e399531f6b2c5a9f8bc0f57df496e049f9a54f", "filename": "gcc/testsuite/c-c++-common/goacc/private-reduction-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivate-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivate-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fprivate-reduction-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,12 @@\n+int\n+reduction ()\n+{\n+  int i, r;\n+\n+  #pragma acc parallel\n+  #pragma acc loop private (r) reduction (+:r)\n+  for (i = 0; i < 100; i++)\n+    r += 10;\n+\n+  return r;\n+}"}, {"sha": "48c20b999423a9dc4645885cefbca1336af9a87b", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-parallel-loop-data-enter-exit.f95", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-parallel-loop-data-enter-exit.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-parallel-loop-data-enter-exit.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-parallel-loop-data-enter-exit.f95?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,48 @@\n+! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n+! { dg-additional-options \"-fdump-tree-optimized\" }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  !$acc enter data create (a(0:n-1), b(0:n-1), c(0:n-1))\n+\n+  !$acc kernels present (a(0:n-1))\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+  !$acc end kernels\n+\n+  !$acc parallel present (b(0:n-1))\n+  !$acc loop\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+  !$acc end parallel\n+\n+  !$acc kernels present (a(0:n-1), b(0:n-1), c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+\n+  !$acc exit data copyout (a(0:n-1), b(0:n-1), c(0:n-1))\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main\n+\n+! Check that only three loops are analyzed, and that all can be parallelized.\n+! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops1\" { xfail *-*-* } } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 2 \"parloops1\" { xfail *-*-* } } }\n+! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" { xfail *-*-* } } }\n+\n+! Check that the loop has been split off into a function.\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n+! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }"}, {"sha": "19a2abed8a72cd6a514f311c429a94263b058e2a", "filename": "gcc/testsuite/gfortran.dg/goacc/modules.f95", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmodules.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmodules.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmodules.f95?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,55 @@\n+! { dg-do compile } \n+\n+MODULE reduction_test\n+\n+CONTAINS\n+\n+SUBROUTINE reduction_kernel(x_min,x_max,y_min,y_max,arr,sum)\n+\n+  IMPLICIT NONE\n+\n+  INTEGER      :: x_min,x_max,y_min,y_max\n+  REAL(KIND=8), DIMENSION(x_min-2:x_max+2,y_min-2:y_max+2) :: arr\n+  REAL(KIND=8) :: sum\n+\n+  INTEGER      :: j,k\n+\n+  sum=0.0\n+\n+!$ACC DATA PRESENT(arr) COPY(sum)\n+!$ACC PARALLEL LOOP REDUCTION(+ : sum)\n+  DO k=y_min,y_max\n+    DO j=x_min,x_max\n+      sum=sum*arr(j,k)\n+    ENDDO\n+  ENDDO\n+!$ACC END PARALLEL LOOP\n+!$ACC END DATA\n+\n+END SUBROUTINE reduction_kernel\n+\n+END MODULE reduction_test\n+\n+program main\n+    use reduction_test\n+\n+    integer :: x_min,x_max,y_min,y_max\n+    real(kind=8), dimension(1:10,1:10) :: arr\n+    real(kind=8) :: sum\n+\n+    x_min = 5\n+    x_max = 6\n+    y_min = 5\n+    y_max = 6\n+\n+    arr(:,:) = 1.0\n+\n+    sum = 1.0\n+\n+    !$acc data copy(arr)\n+\n+    call field_summary_kernel(x_min,x_max,y_min,y_max,arr,sum)\n+\n+    !$acc end data\n+\n+end program"}, {"sha": "c90391538854f6f29a7749661bad1d3c7d64a7cd", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-8.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-8.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,32 @@\n+! Test ACC ROUTINE inside an interface block.\n+\n+program main\n+  interface\n+     function s_1 (a)\n+       integer a\n+       !$acc routine\n+     end function s_1\n+  end interface\n+\n+  interface\n+     function s_2 (a)\n+       integer a\n+       !$acc routine seq\n+     end function s_2\n+  end interface\n+\n+  interface\n+     function s_3 (a)\n+       integer a\n+       !$acc routine (s_3) ! { dg-error \"Only the ..ACC ROUTINE form without list is allowed in interface block\" }\n+     end function s_3\n+  end interface\n+\n+  interface\n+     function s_4 (a)\n+       integer a\n+         !$acc routine (s_4) seq ! { dg-error \"Only the ..ACC ROUTINE form without list is allowed in interface block\" }\n+     end function s_4\n+  end interface\n+end program main\n+"}, {"sha": "75dd1b01f6f87a4b1f8c69bb1d5e33b249388bd5", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-level-of-parallelism-1.f90", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,72 @@\n+! Test various aspects of clauses specifying compatible levels of\n+! parallelism with the OpenACC routine directive.  The Fortran counterpart is\n+! c-c++-common/goacc/routine-level-of-parallelism-2.c\n+\n+subroutine g_1\n+  !$acc routine gang\n+end subroutine g_1\n+\n+subroutine s_1_2a\n+  !$acc routine\n+end subroutine s_1_2a\n+\n+subroutine s_1_2b\n+  !$acc routine seq\n+end subroutine s_1_2b\n+\n+subroutine s_1_2c\n+  !$acc routine (s_1_2c)\n+end subroutine s_1_2c\n+\n+subroutine s_1_2d\n+  !$acc routine (s_1_2d) seq\n+end subroutine s_1_2d\n+\n+module s_2\n+contains\n+  subroutine s_2_1a\n+    !$acc routine\n+  end subroutine s_2_1a\n+\n+  subroutine s_2_1b\n+    !$acc routine seq\n+  end subroutine s_2_1b\n+\n+  subroutine s_2_1c\n+    !$acc routine (s_2_1c)\n+  end subroutine s_2_1c\n+\n+  subroutine s_2_1d\n+    !$acc routine (s_2_1d) seq\n+  end subroutine s_2_1d\n+end module s_2\n+\n+subroutine test\n+  external g_1, w_1, v_1\n+  external s_1_1, s_1_2\n+\n+  interface\n+     function s_3_1a (a)\n+       integer a\n+       !$acc routine\n+     end function s_3_1a\n+  end interface\n+\n+  interface\n+     function s_3_1b (a)\n+       integer a\n+       !$acc routine seq\n+     end function s_3_1b\n+  end interface\n+\n+  !$acc routine(g_1) gang\n+\n+  !$acc routine(w_1) worker\n+\n+  !$acc routine(v_1) worker\n+\n+  ! Also test the implicit seq clause.\n+\n+  !$acc routine (s_1_1) seq\n+\n+end subroutine test"}, {"sha": "d827739485195cd1a2c78eeb8456742ac98ac0b9", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -1,3 +1,128 @@\n+2018-06-22  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Don't force \"-O2\".\n+\t* testsuite/libgomp.oacc-c-c++-common/data-2.c: Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/mode-transitions.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/data-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/data-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-c++/non-scalar-data.C: New file.\n+\t* testsuite/libgomp.oacc-c-c++-common/declare-3.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/enter-data.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-enter-exit-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-enter-exit.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-update.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-data.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-parallel-loop-data-enter-exit.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-6.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-reduction-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-loop-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-loop-1.h: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-loop-2.h: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/cublas-fixed.h: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/dummy-array.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/host_data-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/host_data-3.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/host_data-4.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-acc-loop-reduction-2.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-acc-loop-reduction.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-collapse-3.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-collapse-4.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-independent.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-loop-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-map-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-parallel-loop-data-enter-exit.f95:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-1.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-2.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-3.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-6.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-1.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-2.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-1.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-2.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-3.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-4.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-5.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-6.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-7.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-reduction-1.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-12.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-13.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-14.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-15.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-loop-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reference-reductions.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/vector-routine.f90: Likewise.\n+\n 2018-06-20  Chung-Lin Tang <cltang@codesourcery.com>\n \t    Thomas Schwinge <thomas@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "8e4b296382ba04a2dbfc264ab856e06ea1a0b7ca", "filename": "libgomp/testsuite/libgomp.oacc-c++/non-scalar-data.C", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fnon-scalar-data.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fnon-scalar-data.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fnon-scalar-data.C?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,110 @@\n+// Ensure that a non-scalar dummy arguments which are implicitly used inside\n+// offloaded regions are properly mapped using present_or_copy semantics.\n+\n+// { dg-xfail-if \"TODO\" { *-*-* } }\n+// { dg-excess-errors \"ICE\" }\n+\n+#include <cassert>\n+\n+const int n = 100;\n+\n+struct data {\n+  int v;\n+};\n+\n+void\n+kernels_present (data &d, int &x)\n+{\n+#pragma acc kernels present (d, x) default (none)\n+  {\n+    d.v = x;\n+  }\n+}\n+\n+void\n+parallel_present (data &d, int &x)\n+{\n+#pragma acc parallel present (d, x) default (none)\n+  {\n+    d.v = x;\n+  }\n+}\n+\n+void\n+kernels_implicit (data &d, int &x)\n+{\n+#pragma acc kernels\n+  {\n+    d.v = x;\n+  }\n+}\n+\n+void\n+parallel_implicit (data &d, int &x)\n+{\n+#pragma acc parallel\n+  {\n+    d.v = x;\n+  }\n+}\n+\n+void\n+reference_data (data &d, int &x)\n+{\n+#pragma acc data copy(d, x)\n+  {\n+    kernels_present (d, x);\n+\n+#pragma acc update host(d)\n+    assert (d.v == x);\n+\n+    x = 200;\n+#pragma acc update device(x)\n+    \n+    parallel_present (d, x);\n+  }\n+\n+  assert (d.v == x);\n+\n+  x = 300;\n+  kernels_implicit (d, x);\n+  assert (d.v == x);\n+\n+  x = 400;\n+  parallel_implicit (d, x);\n+  assert (d.v == x);\n+}\n+\n+int\n+main ()\n+{\n+  data d;\n+  int x = 100;\n+\n+#pragma acc data copy(d, x)\n+  {\n+    kernels_present (d, x);\n+\n+#pragma acc update host(d)\n+    assert (d.v == x);\n+\n+    x = 200;\n+#pragma acc update device(x)\n+    \n+    parallel_present (d, x);\n+  }\n+\n+  assert (d.v == x);\n+\n+  x = 300;\n+  kernels_implicit (d, x);\n+  assert (d.v == x);\n+\n+  x = 400;\n+  parallel_implicit (d, x);\n+  assert (d.v == x);\n+\n+  reference_data (d, x);\n+\n+  return 0;\n+}"}, {"sha": "0c6abe69dc17d6d4e16743fba899c89b0287179a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/data-2.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdata-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -1,6 +1,7 @@\n /* Test 'acc enter/exit data' regions.  */\n \n /* { dg-do run } */\n+/* { dg-xfail-run-if \"TODO\" { openacc_nvidia_accel_selected } } */\n \n #include <stdlib.h>\n \n@@ -33,6 +34,32 @@ main (int argc, char **argv)\n     b[i] = a[i];\n \n #pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) wait async\n+#pragma acc wait\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != 3.0)\n+\tabort ();\n+\n+      if (b[i] != 3.0)\n+\tabort ();\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 3.0;\n+      b[i] = 0.0;\n+    }\n+\n+#pragma acc enter data copyin (a[0:N]) async \n+#pragma acc enter data copyin (b[0:N]) async wait\n+#pragma acc enter data copyin (N) async wait\n+#pragma acc parallel async wait\n+#pragma acc loop\n+  for (i = 0; i < N; i++)\n+    b[i] = a[i];\n+\n+#pragma acc exit data copyout (a[0:N]) copyout (b[0:N]) delete (N) wait async\n #pragma acc wait\n \n   for (i = 0; i < N; i++)"}, {"sha": "c3a2187631232c980e58075487cf632f02aefb8e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-3.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-3.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+float *b;\n+#pragma acc declare deviceptr (b)\n+\n+#pragma acc routine\n+float *\n+subr2 (void)\n+{\n+  return b;\n+}\n+\n+float\n+subr1 (float a)\n+{\n+  float b;\n+#pragma acc declare present_or_copy (b)\n+  float c;\n+#pragma acc declare present_or_copyin (c)\n+  float d;\n+#pragma acc declare present_or_create (d)\n+  float e;\n+#pragma acc declare present_or_copyout (e)\n+\n+#pragma acc parallel copy (a)\n+  {\n+    b = a;\n+    c = b;\n+    d = c;\n+    e = d;\n+    a = e;\n+  }\n+\n+  return a;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  float a;\n+  float *c;\n+\n+  a = 2.0;\n+\n+  a = subr1 (a);\n+\n+  if (a != 2.0)\n+    abort ();\n+\n+  b = (float *) acc_malloc (sizeof (float));\n+\n+  c = subr2 ();\n+\n+  if (b != c)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "0f566c9d844605d6aa57dd7a8671605276d264a8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/enter-data.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fenter-data.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,23 @@\n+/* This test verifies that the present data clauses to acc enter data\n+   don't cause duplicate mapping failures at runtime.  */\n+\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+  int a;\n+\n+#pragma acc enter data copyin (a)\n+#pragma acc enter data pcopyin (a)\n+#pragma acc enter data pcreate (a)\n+#pragma acc exit data delete (a)\n+\n+#pragma acc enter data create (a)\n+#pragma acc enter data pcreate (a)\n+#pragma acc exit data delete (a)\n+\n+  return 0;\n+}"}, {"sha": "21d2139af272cb0e4428a1bc698eeedb2fda5caa", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/host_data-1.c", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fhost_data-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -1,33 +1,35 @@\n /* { dg-do run { target openacc_nvidia_accel_selected } } */\n-/* { dg-additional-options \"-lcuda -lcublas -lcudart\" } */\n+/* { dg-additional-options \"-lm -lcuda -lcublas -lcudart -Wall -Wextra\" } */\n \n #include <stdlib.h>\n+#include <math.h>\n #include <openacc.h>\n #include <cuda.h>\n #include <cuda_runtime_api.h>\n #include <cublas_v2.h>\n \n+#pragma acc routine\n void\n-saxpy_host (int n, float a, float *x, float *y)\n+saxpy (int n, float a, float *x, float *y)\n {\n   int i;\n \n   for (i = 0; i < n; i++)\n     y[i] = y[i] + a * x[i];\n }\n \n-#pragma acc routine\n void\n-saxpy_target (int n, float a, float *x, float *y)\n+validate_results (int n, float *a, float *b)\n {\n   int i;\n \n   for (i = 0; i < n; i++)\n-    y[i] = y[i] + a * x[i];\n+    if (fabs (a[i] - b[i]) > .00001)\n+      abort ();\n }\n \n int\n-main(int argc, char **argv)\n+main()\n {\n #define N 8\n   int i;\n@@ -42,7 +44,7 @@ main(int argc, char **argv)\n       y[i] = y_ref[i] = 3.0;\n     }\n \n-  saxpy_host (N, a, x_ref, y_ref);\n+  saxpy (N, a, x_ref, y_ref);\n \n   cublasCreate (&h);\n \n@@ -54,11 +56,7 @@ main(int argc, char **argv)\n     }\n   }\n \n-  for (i = 0; i < N; i++)\n-    {\n-      if (y[i] != y_ref[i])\n-        abort ();\n-    }\n+  validate_results (N, y, y_ref);\n \n #pragma acc data create (x[0:N]) copyout (y[0:N])\n   {\n@@ -74,11 +72,7 @@ main(int argc, char **argv)\n \n   cublasDestroy (h);\n \n-  for (i = 0; i < N; i++)\n-    {\n-      if (y[i] != y_ref[i])\n-        abort ();\n-    }\n+  validate_results (N, y, y_ref);\n \n   for (i = 0; i < N; i++)\n     y[i] = 3.0;\n@@ -87,14 +81,24 @@ main(int argc, char **argv)\n #pragma acc data copyin (x[0:N]) copyin (a) copy (y[0:N])\n   {\n #pragma acc parallel present (x[0:N]) pcopy (y[0:N]) present (a)\n-    saxpy_target (N, a, x, y);\n+    saxpy (N, a, x, y);\n   }\n \n+  validate_results (N, y, y_ref);\n+\n+  /* Exercise host_data with data transferred with acc enter data.  */\n+\n   for (i = 0; i < N; i++)\n-    {\n-      if (y[i] != y_ref[i])\n-        abort ();\n-    }\n+    y[i] = 3.0;\n+\n+#pragma acc enter data copyin (x, a, y)\n+#pragma acc parallel present (x[0:N]) pcopy (y[0:N]) present (a)\n+  {\n+    saxpy (N, a, x, y);\n+  }\n+#pragma acc exit data delete (x, a) copyout (y)\n+\n+  validate_results (N, y, y_ref);\n \n   return 0;\n }"}, {"sha": "607c35018df2b70d08ae65fdc26c9b848e4615de", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,53 @@\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc data copyout (a[0:N])\n+  {\n+#pragma acc kernels present (a[0:N])\n+    {\n+      for (COUNTERTYPE i = 0; i < N; i++)\n+\ta[i] = i * 2;\n+    }\n+  }\n+\n+#pragma acc data copyout (b[0:N])\n+  {\n+#pragma acc kernels present (b[0:N])\n+    {\n+      for (COUNTERTYPE i = 0; i < N; i++)\n+\tb[i] = i * 4;\n+    }\n+  }\n+\n+#pragma acc data copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+  {\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+    {\n+      for (COUNTERTYPE ii = 0; ii < N; ii++)\n+\tc[ii] = a[ii] + b[ii];\n+    }\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}"}, {"sha": "8b9dd5f815a68c555183d0b111c2ef0bbb8f00b8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-enter-exit-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-enter-exit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-enter-exit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-enter-exit-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,51 @@\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc enter data create (a[0:N])\n+#pragma acc kernels present (a[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+#pragma acc exit data copyout (a[0:N])\n+\n+#pragma acc enter data create (b[0:N])\n+#pragma acc kernels present (b[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+#pragma acc exit data copyout (b[0:N])\n+\n+\n+#pragma acc enter data copyin (a[0:N], b[0:N]) create (c[0:N])\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+#pragma acc exit data copyout (c[0:N])\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}"}, {"sha": "5d5da6fcc01dcc30c0f268468078ff1ce424963e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-enter-exit.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-enter-exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-enter-exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-enter-exit.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,48 @@\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc enter data create (a[0:N], b[0:N], c[0:N])\n+\n+#pragma acc kernels present (a[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+\n+#pragma acc kernels present (b[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+#pragma acc exit data copyout (a[0:N], b[0:N], c[0:N])\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}"}, {"sha": "c111c8f56e7a99d8b27df83d04ebc778d5dd14a4", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-data-update.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-update.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-update.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data-update.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,50 @@\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc enter data create (a[0:N], b[0:N], c[0:N])\n+\n+#pragma acc kernels present (a[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+\n+#pragma acc update device (b[0:N])\n+\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+#pragma acc exit data copyout (a[0:N], c[0:N])\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}\n+"}, {"sha": "947bcdac4525df5c9a23ec44c28ad18973054d74", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-data.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-data.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,47 @@\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc data copyout (a[0:N], b[0:N], c[0:N])\n+  {\n+#pragma acc kernels present (a[0:N])\n+    {\n+      for (COUNTERTYPE i = 0; i < N; i++)\n+\ta[i] = i * 2;\n+    }\n+\n+#pragma acc kernels present (b[0:N])\n+    {\n+      for (COUNTERTYPE i = 0; i < N; i++)\n+\tb[i] = i * 4;\n+    }\n+\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+    {\n+      for (COUNTERTYPE ii = 0; ii < N; ii++)\n+\tc[ii] = a[ii] + b[ii];\n+    }\n+  }\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}"}, {"sha": "ebcc6e14d9ae66426ae99c3812cb6265115b6ece", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-parallel-loop-data-enter-exit.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-parallel-loop-data-enter-exit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-parallel-loop-data-enter-exit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-parallel-loop-data-enter-exit.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,49 @@\n+#include <stdlib.h>\n+\n+#define N (1024 * 512)\n+#define COUNTERTYPE unsigned int\n+\n+int\n+main (void)\n+{\n+  unsigned int *__restrict a;\n+  unsigned int *__restrict b;\n+  unsigned int *__restrict c;\n+\n+  a = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  b = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+  c = (unsigned int *__restrict)malloc (N * sizeof (unsigned int));\n+\n+#pragma acc enter data create (a[0:N], b[0:N], c[0:N])\n+\n+#pragma acc kernels present (a[0:N])\n+  {\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      a[i] = i * 2;\n+  }\n+\n+#pragma acc parallel present (b[0:N])\n+  {\n+#pragma acc loop\n+    for (COUNTERTYPE i = 0; i < N; i++)\n+      b[i] = i * 4;\n+  }\n+\n+#pragma acc kernels present (a[0:N], b[0:N], c[0:N])\n+  {\n+    for (COUNTERTYPE ii = 0; ii < N; ii++)\n+      c[ii] = a[ii] + b[ii];\n+  }\n+\n+#pragma acc exit data copyout (a[0:N], b[0:N], c[0:N])\n+\n+  for (COUNTERTYPE i = 0; i < N; i++)\n+    if (c[i] != a[i] + b[i])\n+      abort ();\n+\n+  free (a);\n+  free (b);\n+  free (c);\n+\n+  return 0;\n+}"}, {"sha": "bcbe28a67788b2b54a2d8af8368c2ea0ccb589e5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,54 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared in a local scope, broadcasting\n+   to vector-partitioned mode.  Back-to-back worker loops.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+\t#pragma acc loop worker(num:32)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    int x = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t  }\n+\n+\t#pragma acc loop worker(num:32)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    int x = i | j * 5;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "a944486fac377f267497950e6cd44b9549c51612", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,49 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared in a local scope, broadcasting\n+   to vector-partitioned mode.  Successive vector loops.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    int x = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t    \n+\t    x = i | j * 5;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "ba0b44dc5bef353a09115160e159432011a1664d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-3.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,55 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared in a local scope, broadcasting\n+   to vector-partitioned mode.  Aggregate worker variable.  */\n+\n+typedef struct\n+{\n+  int x, y;\n+} vec2;\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    vec2 pt;\n+\t    \n+\t    pt.x = i ^ j * 3;\n+\t    pt.y = i | j * 5;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt.x * k;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "7189d2a99cd0303336d773f21e41370290c0f89e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-4.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,58 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared in a local scope, broadcasting\n+   to vector-partitioned mode.  Addressable worker variable.  */\n+\n+typedef struct\n+{\n+  int x, y;\n+} vec2;\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    vec2 pt, *ptp;\n+\t    \n+\t    ptp = &pt;\n+\t    \n+\t    pt.x = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += ptp->x * k;\n+\n+\t    ptp->y = i | j * 5;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "854ad7e9b3b680606634972f67d5078c1ccd8c6b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-local-worker-5.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,51 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared in a local scope, broadcasting\n+   to vector-partitioned mode.  Array worker variable.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    int pt[2];\n+\t    \n+\t    pt[0] = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt[0] * k;\n+\n+\t    pt[1] = i | j * 5;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt[1] * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "5bc90c2367bcbfe2b62726c7e537782c35461955", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,27 @@\n+#include <assert.h>\n+\n+/* Test of gang-private variables declared on loop directive.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32];\n+\n+  for (i = 0; i < 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    #pragma acc loop gang(num:32) private(x)\n+    for (i = 0; i < 32; i++)\n+      {\n+\tx = i * 2;\n+\tarr[i] += x;\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    assert (arr[i] == i * 3);\n+\n+  return 0;\n+}"}, {"sha": "3eb11670e36f85c9c44ff0b939c67960e7c0ae6c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,31 @@\n+#include <assert.h>\n+\n+/* Test of gang-private variables declared on loop directive, with broadcasting\n+   to partitioned workers.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32];\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    #pragma acc loop gang(num:32) private(x)\n+    for (i = 0; i < 32; i++)\n+      {\n+\tx = i * 2;\n+\n+\t#pragma acc loop worker(num:32)\n+\tfor (int j = 0; j < 32; j++)\n+\t  arr[i * 32 + j] += x;\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    assert (arr[i] == i + (i / 32) * 2);\n+\n+  return 0;\n+}"}, {"sha": "86b9a7179e1964a636068545b19910593cd9d658", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-3.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,31 @@\n+#include <assert.h>\n+\n+/* Test of gang-private variables declared on loop directive, with broadcasting\n+   to partitioned vectors.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32];\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    #pragma acc loop gang(num:32) private(x)\n+    for (i = 0; i < 32; i++)\n+      {\n+\tx = i * 2;\n+\n+\t#pragma acc loop vector(length:32)\n+\tfor (int j = 0; j < 32; j++)\n+\t  arr[i * 32 + j] += x;\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    assert (arr[i] == i + (i / 32) * 2);\n+\n+  return 0;\n+}"}, {"sha": "4174248ee4e5089dd2eeea0366adb48b611e42d8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-4.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,35 @@\n+#include <assert.h>\n+\n+/* Test of gang-private addressable variable declared on loop directive, with\n+   broadcasting to partitioned workers.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32];\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    #pragma acc loop gang(num:32) private(x)\n+    for (i = 0; i < 32; i++)\n+      {\n+        int *p = &x;\n+\n+\tx = i * 2;\n+\n+\t#pragma acc loop worker(num:32)\n+\tfor (int j = 0; j < 32; j++)\n+\t  arr[i * 32 + j] += x;\n+\n+\t(*p)--;\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    assert (arr[i] == i + (i / 32) * 2);\n+\n+  return 0;\n+}"}, {"sha": "b160eaa604dcd5e7cd2382a90e41817ae8ecaf25", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-5.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-5.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,32 @@\n+#include <assert.h>\n+\n+/* Test of gang-private array variable declared on loop directive, with\n+   broadcasting to partitioned workers.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x[8], i, arr[32 * 32];\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    #pragma acc loop gang(num:32) private(x)\n+    for (i = 0; i < 32; i++)\n+      {\n+        for (int j = 0; j < 8; j++)\n+\t  x[j] = j * 2;\n+\n+\t#pragma acc loop worker(num:32)\n+\tfor (int j = 0; j < 32; j++)\n+\t  arr[i * 32 + j] += x[j % 8];\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    assert (arr[i] == i + (i % 8) * 2);\n+\n+  return 0;\n+}"}, {"sha": "88ab245b0ce85b3c89ebaaf05a9f47de61c72e11", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-gang-6.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,40 @@\n+#include <assert.h>\n+\n+/* Test of gang-private aggregate variable declared on loop directive, with\n+   broadcasting to partitioned workers.  */\n+\n+typedef struct {\n+  int x, y, z;\n+  int attr[13];\n+} vec3;\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int i, arr[32 * 32];\n+  vec3 pt;\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    #pragma acc loop gang private(pt)\n+    for (i = 0; i < 32; i++)\n+      {\n+        pt.x = i;\n+\tpt.y = i * 2;\n+\tpt.z = i * 4;\n+\tpt.attr[5] = i * 6;\n+\n+\t#pragma acc loop worker\n+\tfor (int j = 0; j < 32; j++)\n+\t  arr[i * 32 + j] += pt.x + pt.y + pt.z + pt.attr[5];\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    assert (arr[i] == i + (i / 32) * 13);\n+\n+  return 0;\n+}"}, {"sha": "df4add11df44df33db73efe85611d1daadbc56aa", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,51 @@\n+#include <assert.h>\n+\n+/* Test of vector-private variables declared on loop directive.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x, i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\n+\t    #pragma acc loop vector(length:32) private(x)\n+\t    for (k = 0; k < 32; k++)\n+\t      {\n+\t\tx = i ^ j * 3;\n+\t\tarr[i * 1024 + j * 32 + k] += x * k;\n+\t      }\n+\n+\t    #pragma acc loop vector(length:32) private(x)\n+\t    for (k = 0; k < 32; k++)\n+\t      {\n+\t\tx = i | j * 5;\n+\t\tarr[i * 1024 + j * 32 + k] += x * k;\n+\t      }\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "53c56b2d36228d41d47649f789713fd5d4e613cd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-vector-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,46 @@\n+#include <assert.h>\n+\n+/* Test of vector-private variables declared on loop directive. Array type.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int pt[2], i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\n+\t    #pragma acc loop vector(length:32) private(pt)\n+\t    for (k = 0; k < 32; k++)\n+\t      {\n+\t        pt[0] = i ^ j * 3;\n+\t\tpt[1] = i | j * 5;\n+\t\tarr[i * 1024 + j * 32 + k] += pt[0] * k;\n+\t\tarr[i * 1024 + j * 32 + k] += pt[1] * k;\n+\t      }\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "95db2f8912e41829e9fb92ccd2cedd624b7cc026", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,36 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared on a loop directive.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32];\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32) private(x)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    x = i ^ j * 3;\n+\t    /* Try to ensure 'x' accesses doesn't get optimized into a\n+\t       temporary.  */\n+\t    __asm__ __volatile__ (\"\");\n+\t    arr[i * 32 + j] += x;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    assert (arr[i] == i + ((i / 32) ^ (i % 32) * 3));\n+\n+  return 0;\n+}"}, {"sha": "ceaa3ee9ecd0cbb88cd909ca92b207167f19510f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-2.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,43 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared on a loop directive, broadcasting\n+   to vector-partitioned mode.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32) private(x)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    x = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "193a1d1063b371d1e4ece2ec1de3bc224da9976d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-3.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,54 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared on a loop directive, broadcasting\n+   to vector-partitioned mode.  Back-to-back worker loops.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32) private(x)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    x = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t  }\n+\n+\t#pragma acc loop worker(num:32) private(x)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    x = i | j * 5;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "4320cd81e69a787ae8b12339b857e8ea142616d8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-4.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,49 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared on a loop directive, broadcasting\n+   to vector-partitioned mode.  Successive vector loops.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32) private(x)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    x = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t    \n+\t    x = i | j * 5;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "80992eed0f857fc6513aff5aece56c9836f099a8", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-5.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,51 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared on a loop directive, broadcasting\n+   to vector-partitioned mode.  Addressable worker variable.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int x = 5, i, arr[32 * 32 * 32];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32) private(x)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    int *p = &x;\n+\t    \n+\t    x = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t    \n+\t    *p = i | j * 5;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += x * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "005ba60a3415d86a95caa989fbb371d4ece74f10", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-6.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,55 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared on a loop directive, broadcasting\n+   to vector-partitioned mode.  Aggregate worker variable.  */\n+\n+typedef struct\n+{\n+  int x, y;\n+} vec2;\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int i, arr[32 * 32 * 32];\n+  vec2 pt;\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        #pragma acc loop worker(num:32) private(pt)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    \n+\t    pt.x = i ^ j * 3;\n+\t    pt.y = i | j * 5;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt.x * k;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt.y * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "8d367fb00e04a7ef32bbcc577d5106fe3e064ef1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-private-vars-loop-worker-7.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,54 @@\n+#include <assert.h>\n+\n+/* Test of worker-private variables declared on loop directive, broadcasting\n+   to vector-partitioned mode.  Array worker variable.  */\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  int i, arr[32 * 32 * 32];\n+  int pt[2];\n+\n+  for (i = 0; i < 32 * 32 * 32; i++)\n+    arr[i] = i;\n+\n+  /* \"pt\" is treated as \"present_or_copy\" on the kernels directive because it\n+     is an array variable.  */\n+  #pragma acc kernels copy(arr)\n+  {\n+    int j;\n+\n+    #pragma acc loop gang(num:32)\n+    for (i = 0; i < 32; i++)\n+      {\n+        /* But here, it is made private per-worker.  */\n+        #pragma acc loop worker(num:32) private(pt)\n+\tfor (j = 0; j < 32; j++)\n+\t  {\n+\t    int k;\n+\t    \n+\t    pt[0] = i ^ j * 3;\n+\n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt[0] * k;\n+\n+\t    pt[1] = i | j * 5;\n+\t    \n+\t    #pragma acc loop vector(length:32)\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[i * 1024 + j * 32 + k] += pt[1] * k;\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    for (int j = 0; j < 32; j++)\n+      for (int k = 0; k < 32; k++)\n+        {\n+\t  int idx = i * 1024 + j * 32 + k;\n+          assert (arr[idx] == idx + (i ^ j * 3) * k + (i | j * 5) * k);\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "95f1b77986c5d4220ac5e03b0c33761dc33db2ac", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-reduction-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-reduction-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,24 @@\n+/* Verify that a simple, explicit acc loop reduction works inside\n+ a kernels region.  */\n+\n+#include <stdlib.h>\n+\n+#define N 100\n+\n+int\n+main ()\n+{\n+  int i, red = 0;\n+\n+#pragma acc kernels\n+  {\n+#pragma acc loop reduction (+:red)\n+  for (i = 0; i < N; i++)\n+    red++;\n+  }\n+\n+  if (red != N)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "71d3969f7b630effc425d5c04689a347d4197a17", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-wv-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -1,6 +1,3 @@\n-/* { dg-do run } */\n-/* { dg-additional-options \"-O2\" } */\n-\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>"}, {"sha": "4474c127992655f5fcfd6ae707748f593b3e3205", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/mode-transitions.c", "status": "modified", "additions": 270, "deletions": 0, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fmode-transitions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fmode-transitions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fmode-transitions.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -74,6 +74,57 @@ void t2()\n }\n \n \n+/* Test conditional vector-partitioned loops.  */\n+\n+void t3()\n+{\n+  int n[32], arr[1024], i;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = 0;\n+\n+  for (i = 0; i < 32; i++)\n+    n[i] = 0;\n+\n+  #pragma acc parallel copy(n, arr) \\\n+\t\t       num_gangs(32) num_workers(1) vector_length(32)\n+  {\n+    int j, k;\n+\n+    #pragma acc loop gang(static:*)\n+    for (j = 0; j < 32; j++)\n+      n[j]++;\n+\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+\tif ((j % 2) == 0)\n+\t  {\n+\t    #pragma acc loop vector\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[j * 32 + k]++;\n+\t  }\n+\telse\n+\t  {\n+\t    #pragma acc loop vector\n+\t    for (k = 0; k < 32; k++)\n+\t      arr[j * 32 + k]--;\n+\t  }\n+      }\n+\n+    #pragma acc loop gang(static:*)\n+    for (j = 0; j < 32; j++)\n+      n[j]++;\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    assert (n[i] == 2);\n+\n+  for (i = 0; i < 1024; i++)\n+    assert (arr[i] == ((i % 64) < 32) ? 1 : -1);\n+}\n+\n+\n /* Test conditions inside vector-partitioned loops.  */\n \n void t4()\n@@ -156,6 +207,79 @@ void t5()\n }\n \n \n+/* Test switch containing vector-partitioned loops inside gang-partitioned\n+   loops.  */\n+\n+void t6()\n+{\n+  int n[32], arr[1024], i;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = 0;\n+\n+  for (i = 0; i < 32; i++)\n+    n[i] = i % 5;\n+\n+  #pragma acc parallel copy(n, arr) \\\n+\t\t       num_gangs(32) num_workers(1) vector_length(32)\n+  {\n+    int j, k;\n+\n+    #pragma acc loop gang(static:*)\n+    for (j = 0; j < 32; j++)\n+      n[j]++;\n+\n+    #pragma acc loop gang(static:*)\n+    for (j = 0; j < 32; j++)\n+      switch (n[j])\n+\t{\n+\tcase 1:\n+\t  #pragma acc loop vector\n+\t  for (k = 0; k < 32; k++)\n+\t    arr[j * 32 + k] += 1;\n+\t  break;\n+\n+\tcase 2:\n+\t  #pragma acc loop vector\n+\t  for (k = 0; k < 32; k++)\n+\t    arr[j * 32 + k] += 2;\n+\t  break;\n+\n+\tcase 3:\n+\t  #pragma acc loop vector\n+\t  for (k = 0; k < 32; k++)\n+\t    arr[j * 32 + k] += 3;\n+\t  break;\n+\n+\tcase 4:\n+\t  #pragma acc loop vector\n+\t  for (k = 0; k < 32; k++)\n+\t    arr[j * 32 + k] += 4;\n+\t  break;\n+\n+\tcase 5:\n+\t  #pragma acc loop vector\n+\t  for (k = 0; k < 32; k++)\n+\t    arr[j * 32 + k] += 5;\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+    #pragma acc loop gang(static:*)\n+    for (j = 0; j < 32; j++)\n+      n[j]++;\n+  }\n+\n+  for (i = 0; i < 32; i++)\n+    assert (n[i] == (i % 5) + 2);\n+\n+  for (i = 0; i < 1024; i++)\n+    assert (arr[i] == ((i / 32) % 5) + 1);\n+}\n+\n+\n /* Test trivial operation of vector-single mode.  */\n \n void t7()\n@@ -381,6 +505,100 @@ void t13()\n }\n \n \n+/* Test condition in worker-partitioned mode.  */\n+\n+void t14()\n+{\n+  int arr[32 * 32 * 8], i;\n+\n+  for (i = 0; i < 32 * 32 * 8; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel copy(arr) \\\n+\t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  {\n+    int j;\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+\tint k;\n+\t#pragma acc loop worker\n+\tfor (k = 0; k < 8; k++)\n+\t  {\n+\t    int m;\n+\t    if ((k % 2) == 0)\n+\t      {\n+\t\t#pragma acc loop vector\n+\t\tfor (m = 0; m < 32; m++)\n+\t\t  arr[j * 32 * 8 + k * 32 + m]++;\n+\t      }\n+\t    else\n+\t      {\n+\t\t#pragma acc loop vector\n+\t\tfor (m = 0; m < 32; m++)\n+\t\t  arr[j * 32 * 8 + k * 32 + m] += 2;\n+\t      }\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32 * 8; i++)\n+    assert (arr[i] == i + ((i / 32) % 2) + 1);\n+}\n+\n+\n+/* Test switch in worker-partitioned mode.  */\n+\n+void t15()\n+{\n+  int arr[32 * 32 * 8], i;\n+\n+  for (i = 0; i < 32 * 32 * 8; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel copy(arr) \\\n+\t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  {\n+    int j;\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+\tint k;\n+\t#pragma acc loop worker\n+\tfor (k = 0; k < 8; k++)\n+\t  {\n+\t    int m;\n+\t    switch ((j * 32 + k) % 3)\n+\t    {\n+\t    case 0:\n+\t      #pragma acc loop vector\n+\t      for (m = 0; m < 32; m++)\n+\t\tarr[j * 32 * 8 + k * 32 + m]++;\n+\t      break;\n+\n+\t    case 1:\n+\t      #pragma acc loop vector\n+\t      for (m = 0; m < 32; m++)\n+\t\tarr[j * 32 * 8 + k * 32 + m] += 2;\n+\t      break;\n+\n+\t    case 2:\n+\t      #pragma acc loop vector\n+\t      for (m = 0; m < 32; m++)\n+\t\tarr[j * 32 * 8 + k * 32 + m] += 3;\n+\t      break;\n+\n+\t    default: ;\n+\t    }\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32 * 8; i++)\n+    assert (arr[i] == i + ((i / 32) % 3) + 1);\n+}\n+\n+\n /* Test worker-single/worker-partitioned transitions.  */\n \n void t16()\n@@ -790,6 +1008,53 @@ void t25()\n }\n \n \n+/* Test multiple conditional vector-partitioned loops in worker-single\n+   mode.  */\n+\n+void t26()\n+{\n+  int arr[32 * 32], i;\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel copy(arr) \\\n+\t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  {\n+    int j;\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+\tint k;\n+\tif ((j % 3) == 0)\n+\t  {\n+\t    #pragma acc loop vector\n+\t    for (k = 0; k < 32; k++)\n+\t      {\n+\t\t#pragma acc atomic\n+\t\tarr[j * 32 + k] += 3;\n+\t      }\n+\t  }\n+\telse if ((j % 3) == 1)\n+\t  {\n+\t    #pragma acc loop vector\n+\t    for (k = 0; k < 32; k++)\n+\t      {\n+\t\t#pragma acc atomic\n+\t\tarr[j * 32 + k] += 7;\n+\t      }\n+\t  }\n+      }\n+  }\n+\n+  for (i = 0; i < 32 * 32; i++)\n+    {\n+      int j = (i / 32) % 3;\n+      assert (arr[i] == i + ((j == 0) ? 3 : (j == 1) ? 7 : 0));\n+    }\n+}\n+\n+\n /* Test worker-single, vector-partitioned, gang-redundant mode.  */\n \n #define ACTUAL_GANGS 8\n@@ -869,15 +1134,19 @@ int main()\n {\n   t1();\n   t2();\n+  t3();\n   t4();\n   t5();\n+  t6();\n   t7();\n   t8();\n   t9();\n   t10();\n   t11();\n   t12();\n   t13();\n+  t14();\n+  t15();\n   t16();\n   t17();\n   t18();\n@@ -888,6 +1157,7 @@ int main()\n   t23();\n   t24();\n   t25();\n+  t26();\n   t27();\n   t28();\n "}, {"sha": "4bc71415688bc0c36a2e3ee347d129a818785ff2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-loop-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-1.c?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+#define PK parallel\n+#define M(x, y, z) O(x, y, z)\n+#define O(x, y, z) x ## _ ## y ## _ ## z\n+\n+#define F\n+#define G none\n+#define L\n+#include \"parallel-loop-1.h\"\n+#undef L\n+#undef F\n+#undef G\n+\n+#define F num_gangs (10)\n+#define G gangs\n+#define L gang\n+#include \"parallel-loop-1.h\"\n+#undef L\n+#undef F\n+#undef G\n+\n+int\n+main ()\n+{\n+  if (test_none_none ()\n+      || test_none_auto ()\n+      || test_none_independent ()\n+      || test_none_seq ()\n+      || test_gangs_none ()\n+      || test_gangs_auto ()\n+      || test_gangs_independent ()\n+      || test_gangs_seq ())\n+    abort ();\n+  return 0;\n+}"}, {"sha": "fd83dd4ada59cc730a52d4ef4d68106da11991e1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-loop-1.h", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-1.h?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,20 @@\n+#define S\n+#define N(x) M(x, G, none)\n+#include \"parallel-loop-2.h\"\n+#undef S\n+#undef N\n+#define S auto\n+#define N(x) M(x, G, auto)\n+#include \"parallel-loop-2.h\"\n+#undef S\n+#undef N\n+#define S independent\n+#define N(x) M(x, G, independent)\n+#include \"parallel-loop-2.h\"\n+#undef S\n+#undef N\n+#define S seq\n+#define N(x) M(x, G, seq)\n+#include \"parallel-loop-2.h\"\n+#undef S\n+#undef N"}, {"sha": "5691b7e845f2e41b91b1ee53838f21237ef904dc", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-loop-2.h", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-loop-2.h?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,280 @@\n+#ifndef VARS\n+#define VARS\n+int a[1500];\n+float b[10][15][10];\n+#pragma acc routine\n+__attribute__((noreturn)) void\n+noreturn (void)\n+{\n+  for (;;);\n+}\n+#endif\n+#ifndef SC\n+#define SC\n+#endif\n+\n+__attribute__((noinline, noclone)) void\n+N(f0) (void)\n+{\n+  int i;\n+#pragma acc PK loop L F\n+  for (i = 0; i < 1500; i++)\n+    a[i] += 2;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f1) (void)\n+{\n+#pragma acc PK loop L F\n+  for (unsigned int i = __INT_MAX__; i < 3000U + __INT_MAX__; i += 2)\n+    a[(i - __INT_MAX__) >> 1] -= 2;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f2) (void)\n+{\n+  unsigned long long i;\n+#pragma acc PK loop L F\n+  for (i = __LONG_LONG_MAX__ + 4500ULL - 27;\n+       i > __LONG_LONG_MAX__ - 27ULL; i -= 3)\n+    a[(i + 26LL - __LONG_LONG_MAX__) / 3] -= 4;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f3) (long long n1, long long n2, long long s3)\n+{\n+#pragma acc PK loop L F\n+  for (long long i = n1 + 23; i > n2 - 25; i -= s3)\n+    a[i + 48] += 7;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f4) (void)\n+{\n+  unsigned int i;\n+#pragma acc PK loop L F\n+  for (i = 30; i < 20; i += 2)\n+    a[i] += 10;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f5) (int n11, int n12, int n21, int n22, int n31, int n32,\n+       int s1, int s2, int s3)\n+{\n+  SC int v1, v2, v3;\n+#pragma acc PK loop L F\n+  for (v1 = n11; v1 < n12; v1 += s1)\n+#pragma acc loop S\n+    for (v2 = n21; v2 < n22; v2 += s2)\n+      for (v3 = n31; v3 < n32; v3 += s3)\n+\tb[v1][v2][v3] += 2.5;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f6) (int n11, int n12, int n21, int n22, long long n31, long long n32,\n+       int s1, int s2, long long int s3)\n+{\n+  SC int v1, v2;\n+  SC long long v3;\n+#pragma acc PK loop L F\n+  for (v1 = n11; v1 > n12; v1 += s1)\n+#pragma acc loop S\n+    for (v2 = n21; v2 > n22; v2 += s2)\n+      for (v3 = n31; v3 > n32; v3 += s3)\n+\tb[v1][v2 / 2][v3] -= 4.5;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f7) (void)\n+{\n+  SC unsigned int v1, v3;\n+  SC unsigned long long v2;\n+#pragma acc PK loop L F\n+  for (v1 = 0; v1 < 20; v1 += 2)\n+#pragma acc loop S\n+    for (v2 = __LONG_LONG_MAX__ + 16ULL;\n+\t v2 > __LONG_LONG_MAX__ - 29ULL; v2 -= 3)\n+      for (v3 = 10; v3 > 0; v3--)\n+\tb[v1 >> 1][(v2 - __LONG_LONG_MAX__ + 64) / 3 - 12][v3 - 1] += 5.5;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f8) (void)\n+{\n+  SC long long v1, v2, v3;\n+#pragma acc PK loop L F\n+  for (v1 = 0; v1 < 20; v1 += 2)\n+#pragma acc loop S\n+    for (v2 = 30; v2 < 20; v2++)\n+      for (v3 = 10; v3 < 0; v3--)\n+\tb[v1][v2][v3] += 5.5;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f9) (void)\n+{\n+  int i;\n+#pragma acc PK loop L F\n+  for (i = 20; i < 10; i++)\n+    {\n+      a[i] += 2;\n+      noreturn ();\n+      a[i] -= 4;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f10) (void)\n+{\n+  SC int i;\n+#pragma acc PK loop L F\n+  for (i = 0; i < 10; i++)\n+#pragma acc loop S\n+    for (int j = 10; j < 8; j++)\n+      for (long k = -10; k < 10; k++)\n+\t{\n+\t  b[i][j][k] += 4;\n+\t  noreturn ();\n+\t  b[i][j][k] -= 8;\n+\t}\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f11) (int n)\n+{\n+  int i;\n+#pragma acc PK loop L F\n+  for (i = 20; i < n; i++)\n+    {\n+      a[i] += 8;\n+      noreturn ();\n+      a[i] -= 16;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f12) (int n)\n+{\n+  SC int i;\n+#pragma acc PK loop L F\n+  for (i = 0; i < 10; i++)\n+#pragma acc loop S\n+    for (int j = n; j < 8; j++)\n+      for (long k = -10; k < 10; k++)\n+\t{\n+\t  b[i][j][k] += 16;\n+\t  noreturn ();\n+\t  b[i][j][k] -= 32;\n+\t}\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f13) (void)\n+{\n+  int *i;\n+#pragma acc PK loop L F\n+  for (i = a; i < &a[1500]; i++)\n+    i[0] += 2;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+N(f14) (void)\n+{\n+  SC float *i;\n+#pragma acc PK loop L F\n+  for (i = &b[0][0][0]; i < &b[0][0][10]; i++)\n+#pragma acc loop S\n+    for (float *j = &b[0][15][0]; j > &b[0][0][0]; j -= 10)\n+      for (float *k = &b[0][0][10]; k > &b[0][0][0]; --k)\n+\tb[i - &b[0][0][0]][(j - &b[0][0][0]) / 10 - 1][(k - &b[0][0][0]) - 1]\n+\t  -= 3.5;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+N(test) (void)\n+{\n+  int i, j, k;\n+  for (i = 0; i < 1500; i++)\n+    a[i] = i - 25;\n+  N(f0) ();\n+  for (i = 0; i < 1500; i++)\n+    if (a[i] != i - 23)\n+      return 1;\n+  N(f1) ();\n+  for (i = 0; i < 1500; i++)\n+    if (a[i] != i - 25)\n+      return 1;\n+  N(f2) ();\n+  for (i = 0; i < 1500; i++)\n+    if (a[i] != i - 29)\n+      return 1;\n+  N(f3) (1500LL - 1 - 23 - 48, -1LL + 25 - 48, 1LL);\n+  for (i = 0; i < 1500; i++)\n+    if (a[i] != i - 22)\n+      return 1;\n+  N(f3) (1500LL - 1 - 23 - 48, 1500LL - 1, 7LL);\n+  for (i = 0; i < 1500; i++)\n+    if (a[i] != i - 22)\n+      return 1;\n+  N(f4) ();\n+  for (i = 0; i < 1500; i++)\n+    if (a[i] != i - 22)\n+      return 1;\n+  for (i = 0; i < 10; i++)\n+    for (j = 0; j < 15; j++)\n+      for (k = 0; k < 10; k++)\n+\tb[i][j][k] = i - 2.5 + 1.5 * j - 1.5 * k;\n+  N(f5) (0, 10, 0, 15, 0, 10, 1, 1, 1);\n+  for (i = 0; i < 10; i++)\n+    for (j = 0; j < 15; j++)\n+      for (k = 0; k < 10; k++)\n+\tif (b[i][j][k] != i + 1.5 * j - 1.5 * k)\n+\t  return 1;\n+  N(f5) (0, 10, 30, 15, 0, 10, 4, 5, 6);\n+  for (i = 0; i < 10; i++)\n+    for (j = 0; j < 15; j++)\n+      for (k = 0; k < 10; k++)\n+\tif (b[i][j][k] != i + 1.5 * j - 1.5 * k)\n+\t  return 1;\n+  N(f6) (9, -1, 29, 0, 9, -1, -1, -2, -1);\n+  for (i = 0; i < 10; i++)\n+    for (j = 0; j < 15; j++)\n+      for (k = 0; k < 10; k++)\n+\tif (b[i][j][k] != i - 4.5 + 1.5 * j - 1.5 * k)\n+\t  return 1;\n+  N(f7) ();\n+  for (i = 0; i < 10; i++)\n+    for (j = 0; j < 15; j++)\n+      for (k = 0; k < 10; k++)\n+\tif (b[i][j][k] != i + 1.0 + 1.5 * j - 1.5 * k)\n+\t  return 1;\n+  N(f8) ();\n+  for (i = 0; i < 10; i++)\n+    for (j = 0; j < 15; j++)\n+      for (k = 0; k < 10; k++)\n+\tif (b[i][j][k] != i + 1.0 + 1.5 * j - 1.5 * k)\n+\t  return 1;\n+  N(f9) ();\n+  N(f10) ();\n+  N(f11) (10);\n+  N(f12) (12);\n+  for (i = 0; i < 1500; i++)\n+    if (a[i] != i - 22)\n+      return 1;\n+  for (i = 0; i < 10; i++)\n+    for (j = 0; j < 15; j++)\n+      for (k = 0; k < 10; k++)\n+\tif (b[i][j][k] != i + 1.0 + 1.5 * j - 1.5 * k)\n+\t  return 1;\n+  N(f13) ();\n+  N(f14) ();\n+  for (i = 0; i < 1500; i++)\n+    if (a[i] != i - 20)\n+      return 1;\n+  for (i = 0; i < 10; i++)\n+    for (j = 0; j < 15; j++)\n+      for (k = 0; k < 10; k++)\n+\tif (b[i][j][k] != i - 2.5 + 1.5 * j - 1.5 * k)\n+\t  return 1;\n+  return 0;\n+}"}, {"sha": "4a5f61ae560bc3b50bc022a9a1c27f44fe8958de", "filename": "libgomp/testsuite/libgomp.oacc-fortran/cublas-fixed.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcublas-fixed.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcublas-fixed.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcublas-fixed.h?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,16 @@\n+! CUDA BLAS interface binding for SAXPY.\n+      \n+      use iso_c_binding\n+      interface\n+        subroutine cublassaxpy(N, alpha, x, incx, y, incy)\n+     1    bind(c, name=\"cublasSaxpy\")\n+          use iso_c_binding\n+          integer(kind=c_int), value :: N\n+          real(kind=c_float), value :: alpha\n+          type(*), dimension(*) :: x\n+          integer(kind=c_int), value :: incx\n+          type(*), dimension(*) :: y\n+          integer(kind=c_int), value :: incy\n+        end subroutine cublassaxpy\n+      end interface\n+"}, {"sha": "bf323b3f54057edd2ff6d76d3aed1d7a9972ef77", "filename": "libgomp/testsuite/libgomp.oacc-fortran/data-1.f90", "status": "modified", "additions": 199, "deletions": 32, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -1,45 +1,212 @@\n ! { dg-do run }\n+! { dg-additional-options \"-cpp\" }\n \n-program test\n-  integer, parameter :: N = 8\n-  real, allocatable :: a(:), b(:)\n+function is_mapped (n) result (rc)\n+  use openacc\n \n-  allocate (a(N))\n-  allocate (b(N))\n+  integer, intent (in) :: n\n+  logical rc\n \n-  a(:) = 3.0\n-  b(:) = 0.0\n+#if ACC_MEM_SHARED\n+  integer i\n \n-  !$acc enter data copyin (a(1:N), b(1:N))\n+  rc = .TRUE.\n+  i = n\n+#else\n+  rc = acc_is_present (n, sizeof (n))\n+#endif\n \n-  !$acc parallel\n-  do i = 1, n\n-    b(i) = a (i)\n-  end do\n-  !$acc end parallel\n+end function is_mapped\n \n-  !$acc exit data copyout (a(1:N), b(1:N))\n+program main\n+  integer i, j\n+  logical is_mapped\n \n-  do i = 1, n\n-    if (a(i) .ne. 3.0) STOP 1\n-    if (b(i) .ne. 3.0) STOP 2\n-  end do\n+  i = -1\n+  j = -2\n \n-  a(:) = 5.0\n-  b(:) = 1.0\n+  !$acc data copyin (i, j)\n+    if (is_mapped (i) .eqv. .FALSE.) call abort\n+    if (is_mapped (j) .eqv. .FALSE.) call abort\n \n-  !$acc enter data copyin (a(1:N), b(1:N))\n+    if (i .ne. -1 .or. j .ne. -2) call abort\n \n-  !$acc parallel\n-  do i = 1, n\n-    b(i) = a (i)\n-  end do\n-  !$acc end parallel\n+    i = 2\n+    j = 1\n \n-  !$acc exit data copyout (a(1:N), b(1:N))\n+    if (i .ne. 2 .or. j .ne. 1) call abort\n+  !$acc end data\n \n-  do i = 1, n\n-    if (a(i) .ne. 5.0) STOP 3\n-    if (b(i) .ne. 5.0) STOP 4\n-  end do\n-end program test\n+  if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data copyout (i, j)\n+    if (is_mapped (i) .eqv. .FALSE.) call abort\n+    if (is_mapped (j) .eqv. .FALSE.) call abort\n+\n+    if (i .ne. -1 .or. j .ne. -2) call abort\n+\n+    i = 2\n+    j = 1\n+\n+    if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+    !$acc parallel present (i, j)\n+      i = 4\n+      j = 2\n+    !$acc end parallel\n+  !$acc end data\n+\n+  if (i .ne. 4 .or. j .ne. 2) call abort\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data create (i, j)\n+    if (is_mapped (i) .eqv. .FALSE.) call abort\n+    if (is_mapped (j) .eqv. .FALSE.) call abort\n+\n+    if (i .ne. -1 .or. j .ne. -2) call abort\n+\n+    i = 2\n+    j = 1\n+\n+    if (i .ne. 2 .or. j .ne. 1) call abort\n+  !$acc end data\n+\n+  if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data present_or_copyin (i, j)\n+    if (is_mapped (i) .eqv. .FALSE.) call abort\n+    if (is_mapped (j) .eqv. .FALSE.) call abort\n+\n+    if (i .ne. -1 .or. j .ne. -2) call abort\n+\n+    i = 2\n+    j = 1\n+\n+    if (i .ne. 2 .or. j .ne. 1) call abort\n+  !$acc end data\n+\n+  if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data present_or_copyout (i, j)\n+    if (is_mapped (i) .eqv. .FALSE.) call abort\n+    if (is_mapped (j) .eqv. .FALSE.) call abort\n+\n+    if (i .ne. -1 .or. j .ne. -2) call abort\n+\n+    i = 2\n+    j = 1\n+\n+    if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+    !$acc parallel present (i, j)\n+      i = 4\n+      j = 2\n+    !$acc end parallel\n+  !$acc end data\n+\n+  if (i .ne. 4 .or. j .ne. 2) call abort\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data present_or_copy (i, j)\n+    if (is_mapped (i) .eqv. .FALSE.) call abort\n+    if (is_mapped (j) .eqv. .FALSE.) call abort\n+\n+    if (i .ne. -1 .or. j .ne. -2) call abort\n+\n+    i = 2\n+    j = 1\n+\n+    if (i .ne. 2 .or. j .ne. 1) call abort\n+  !$acc end data\n+\n+#if ACC_MEM_SHARED\n+  if (i .ne. 2 .or. j .ne. 1) call abort\n+#else\n+  if (i .ne. -1 .or. j .ne. -2) call abort\n+#endif\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data present_or_create (i, j)\n+    if (is_mapped (i) .eqv. .FALSE.) call abort\n+    if (is_mapped (j) .eqv. .FALSE.) call abort\n+\n+    i = 2\n+    j = 1\n+\n+    if (i .ne. 2 .or. j .ne. 1) call abort\n+  !$acc end data\n+\n+  if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data copyin (i, j)\n+    !$acc data present (i, j)\n+      if (is_mapped (i) .eqv. .FALSE.) call abort\n+      if (is_mapped (j) .eqv. .FALSE.) call abort\n+\n+      if (i .ne. -1 .or. j .ne. -2) call abort\n+\n+      i = 2\n+      j = 1\n+\n+      if (i .ne. 2 .or. j .ne. 1) call abort\n+    !$acc end data\n+  !$acc end data\n+\n+  if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data copyin (i, j)\n+    !$acc data present (i, j)\n+      if (is_mapped (i) .eqv. .FALSE.) call abort\n+      if (is_mapped (j) .eqv. .FALSE.) call abort\n+\n+      if (i .ne. -1 .or. j .ne. -2) call abort\n+\n+      i = 2\n+      j = 1\n+\n+      if (i .ne. 2 .or. j .ne. 1) call abort\n+    !$acc end data\n+  !$acc end data\n+\n+  if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+  i = -1\n+  j = -2\n+\n+  !$acc data\n+#if !ACC_MEM_SHARED\n+    if (is_mapped (i) .eqv. .TRUE.) call abort\n+    if (is_mapped (j) .eqv. .TRUE.) call abort\n+#endif\n+    if (i .ne. -1 .or. j .ne. -2) call abort\n+\n+    i = 2\n+    j = 1\n+\n+    if (i .ne. 2 .or. j .ne. 1) call abort\n+  !$acc end data\n+\n+  if (i .ne. 2 .or. j .ne. 1) call abort\n+\n+end program main"}, {"sha": "83a540070e6b66af90c313beee35b6f654de3f1a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/data-2.f90", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdata-2.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -1,8 +1,14 @@\n ! { dg-do run }\n \n program test\n+  use openacc\n   integer, parameter :: N = 8\n   real, allocatable :: a(:,:), b(:,:)\n+  real, allocatable :: c(:), d(:)\n+  integer i, j\n+\n+  i = 0\n+  j = 0\n \n   allocate (a(N,N))\n   allocate (b(N,N))\n@@ -28,4 +34,48 @@ program test\n       if (b(j,i) .ne. 3.0) STOP 2\n     end do\n   end do\n+\n+  allocate (c(N))\n+  allocate (d(N))\n+\n+  c(:) = 3.0\n+  d(:) = 0.0\n+\n+  !$acc enter data copyin (c(1:N)) create (d(1:N)) async\n+  !$acc wait\n+  \n+  !$acc parallel \n+    do i = 1, N\n+      d(i) = c(i) + 1\n+    end do\n+  !$acc end parallel\n+\n+  !$acc exit data copyout (c(1:N), d(1:N)) async\n+  !$acc wait\n+\n+  do i = 1, N\n+    if (d(i) .ne. 4.0) call abort\n+  end do\n+\n+  c(:) = 3.0\n+  d(:) = 0.0\n+\n+  !$acc enter data copyin (c(1:N)) async\n+  !$acc enter data create (d(1:N)) wait\n+  !$acc wait\n+\n+  !$acc parallel \n+    do i = 1, N\n+      d(i) = c(i) + 1\n+    end do\n+  !$acc end parallel\n+  \n+  !$acc exit data copyout (d(1:N)) async\n+  !$acc exit data async\n+  !$acc wait\n+\n+  do i = 1, N\n+    if (d(i) .ne. 4.0) call abort\n+  end do\n+\n end program test"}, {"sha": "e95563cd4060bfe6fa5a473518508e6e60371767", "filename": "libgomp/testsuite/libgomp.oacc-fortran/dummy-array.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdummy-array.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdummy-array.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdummy-array.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,28 @@\n+! Ensure that dummy arrays are transferred to the accelerator\n+! via an implicit pcopy.\n+\n+! { dg-do run } \n+\n+program main\n+  integer, parameter :: n = 1000\n+  integer :: a(n)\n+  integer :: i\n+\n+  a(:) = -1\n+\n+  call dummy_array (a, n)\n+  \n+  do i = 1, n\n+     if (a(i) .ne. i) call abort\n+  end do\n+end program main\n+\n+subroutine dummy_array (a, n)\n+  integer a(n)\n+\n+  !$acc parallel loop num_gangs (100) gang\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end parallel loop\n+end subroutine"}, {"sha": "ff0921863f6259f58952f49ae742ea7f06ceb64f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/host_data-2.f90", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-2.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,98 @@\n+! Test host_data interoperability with CUDA blas.  This test was\n+! derived from libgomp.oacc-c-c++-common/host_data-1.c.\n+\n+! { dg-do run { target openacc_nvidia_accel_selected } }\n+! { dg-additional-options \"-lcublas -Wall -Wextra\" }\n+\n+program test\n+  implicit none\n+\n+  integer, parameter :: N = 10\n+  integer :: i\n+  real*4 :: x_ref(N), y_ref(N), x(N), y(N), a\n+  \n+  interface\n+     subroutine cublassaxpy(N, alpha, x, incx, y, incy) bind(c, name=\"cublasSaxpy\")\n+       use iso_c_binding\n+       integer(kind=c_int), value :: N\n+       real(kind=c_float), value :: alpha\n+       type(*), dimension(*) :: x\n+       integer(kind=c_int), value :: incx\n+       type(*), dimension(*) :: y\n+       integer(kind=c_int), value :: incy\n+     end subroutine cublassaxpy\n+  end interface\n+\n+  a = 2.0\n+\n+  do i = 1, N\n+     x(i) = 4.0 * i\n+     y(i) = 3.0\n+     x_ref(i) = x(i)\n+     y_ref(i) = y(i)\n+  end do\n+\n+  call saxpy (N, a, x_ref, y_ref)\n+\n+  !$acc data copyin (x) copy (y)\n+  !$acc host_data use_device (x, y)\n+  call cublassaxpy(N, a, x, 1, y, 1)\n+  !$acc end host_data\n+  !$acc end data\n+\n+  call validate_results (N, y, y_ref)\n+\n+  !$acc data create (x) copyout (y)\n+  !$acc parallel loop\n+  do i = 1, N\n+     y(i) = 3.0\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc host_data use_device (x, y)\n+  call cublassaxpy(N, a, x, 1, y, 1)\n+  !$acc end host_data\n+  !$acc end data\n+\n+  call validate_results (N, y, y_ref)\n+\n+  y(:) = 3.0\n+\n+  !$acc data copyin (x) copyin (a) copy (y)\n+  !$acc parallel present (x) pcopy (y) present (a)\n+  call saxpy (N, a, x, y)\n+  !$acc end parallel\n+  !$acc end data\n+\n+  call validate_results (N, y, y_ref)\n+\n+  y(:) = 3.0\n+\n+  !$acc enter data copyin (x, a, y)\n+  !$acc parallel present (x) pcopy (y) present (a)\n+  call saxpy (N, a, x, y)\n+  !$acc end parallel\n+  !$acc exit data delete (x, a) copyout (y)\n+\n+  call validate_results (N, y, y_ref)\n+end program test\n+\n+subroutine saxpy (nn, aa, xx, yy)\n+  integer :: nn\n+  real*4 :: aa, xx(nn), yy(nn)\n+  integer i\n+  !$acc routine\n+\n+  do i = 1, nn\n+    yy(i) = yy(i) + aa * xx(i)\n+  end do\n+end subroutine saxpy\n+\n+subroutine validate_results (n, a, b)\n+  integer :: n\n+  real*4 :: a(n), b(n)\n+\n+  do i = 1, N\n+     if (abs(a(i) - b(i)) > 0.0001) call abort\n+  end do\n+end subroutine validate_results"}, {"sha": "05ed949ee5cba22eb9dc8da38d625011a1238e63", "filename": "libgomp/testsuite/libgomp.oacc-fortran/host_data-3.f", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-3.f?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,85 @@\n+! Fixed-mode host_data interaction with CUDA BLAS.\n+\n+! { dg-do run { target openacc_nvidia_accel_selected } }\n+! { dg-additional-options \"-lcublas -Wall -Wextra\" }\n+\n+      include \"cublas-fixed.h\"\n+\n+      integer, parameter :: N = 10\n+      integer :: i\n+      real*4 :: x_ref(N), y_ref(N), x(N), y(N), a\n+\n+      a = 2.0\n+\n+      do i = 1, N\n+         x(i) = 4.0 * i\n+         y(i) = 3.0\n+         x_ref(i) = x(i)\n+         y_ref(i) = y(i)\n+      end do\n+\n+      call saxpy (N, a, x_ref, y_ref)\n+  \n+!$acc data copyin (x) copy (y)\n+!$acc host_data use_device (x, y)\n+      call cublassaxpy(N, a, x, 1, y, 1)\n+!$acc end host_data\n+!$acc end data\n+\n+      call validate_results (N, y, y_ref)\n+\n+!$acc data create (x) copyout (y)\n+!$acc parallel loop\n+      do i = 1, N\n+         y(i) = 3.0\n+      end do\n+!$acc end parallel loop\n+\n+!$acc host_data use_device (x, y)\n+      call cublassaxpy(N, a, x, 1, y, 1)\n+!$acc end host_data\n+!$acc end data\n+\n+      call validate_results (N, y, y_ref)\n+\n+      y(:) = 3.0\n+  \n+!$acc data copyin (x) copyin (a) copy (y)\n+!$acc parallel present (x) pcopy (y) present (a)\n+      call saxpy (N, a, x, y)\n+!$acc end parallel\n+!$acc end data\n+\n+      call validate_results (N, y, y_ref)\n+\n+      y(:) = 3.0\n+  \n+!$acc enter data copyin (x, a, y)\n+!$acc parallel present (x) pcopy (y) present (a)\n+      call saxpy (N, a, x, y)\n+!$acc end parallel\n+!$acc exit data delete (x, a) copyout (y)\n+\n+      call validate_results (N, y, y_ref)\n+      end\n+\n+      subroutine saxpy (nn, aa, xx, yy)\n+      integer :: nn\n+      real*4 :: aa, xx(nn), yy(nn)\n+      integer i\n+!$acc routine\n+\n+      do i = 1, nn\n+         yy(i) = yy(i) + aa * xx(i)\n+      end do\n+      end subroutine saxpy\n+\n+      subroutine validate_results (n, a, b)\n+      integer :: n\n+      real*4 :: a(n), b(n)\n+\n+      do i = 1, N\n+         if (abs(a(i) - b(i)) > 0.0001) call abort\n+      end do\n+      end subroutine validate_results\n+"}, {"sha": "6e379b5485bed5d721484015cd7f714a8ce0ee72", "filename": "libgomp/testsuite/libgomp.oacc-fortran/host_data-4.f90", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fhost_data-4.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,101 @@\n+! Test host_data interoperability with CUDA blas using modules.\n+\n+! { dg-do run { target openacc_nvidia_accel_selected } }\n+! { dg-additional-options \"-lcublas -Wall -Wextra\" }\n+\n+module cublas\n+  interface\n+     subroutine cublassaxpy(N, alpha, x, incx, y, incy) bind(c, name=\"cublasSaxpy\")\n+       use iso_c_binding\n+       integer(kind=c_int), value :: N\n+       real(kind=c_float), value :: alpha\n+       type(*), dimension(*) :: x\n+       integer(kind=c_int), value :: incx\n+       type(*), dimension(*) :: y\n+       integer(kind=c_int), value :: incy\n+     end subroutine cublassaxpy\n+  end interface\n+\n+contains\n+  subroutine saxpy (nn, aa, xx, yy)\n+    integer :: nn\n+    real*4 :: aa, xx(nn), yy(nn)\n+    integer i\n+    !$acc routine\n+\n+    do i = 1, nn\n+       yy(i) = yy(i) + aa * xx(i)\n+    end do\n+  end subroutine saxpy\n+\n+  subroutine validate_results (n, a, b)\n+    integer :: n\n+    real*4 :: a(n), b(n)\n+\n+    do i = 1, N\n+       if (abs(a(i) - b(i)) > 0.0001) call abort\n+    end do\n+  end subroutine validate_results\n+end module cublas\n+\n+program test\n+  use cublas\n+  implicit none\n+\n+  integer, parameter :: N = 10\n+  integer :: i\n+  real*4 :: x_ref(N), y_ref(N), x(N), y(N), a\n+\n+  a = 2.0\n+\n+  do i = 1, N\n+     x(i) = 4.0 * i\n+     y(i) = 3.0\n+     x_ref(i) = x(i)\n+     y_ref(i) = y(i)\n+  end do\n+\n+  call saxpy (N, a, x_ref, y_ref)\n+\n+  !$acc data copyin (x) copy (y)\n+  !$acc host_data use_device (x, y)\n+  call cublassaxpy(N, a, x, 1, y, 1)\n+  !$acc end host_data\n+  !$acc end data\n+\n+  call validate_results (N, y, y_ref)\n+\n+  !$acc data create (x) copyout (y)\n+  !$acc parallel loop\n+  do i = 1, N\n+     y(i) = 3.0\n+  end do\n+  !$acc end parallel loop\n+\n+  !$acc host_data use_device (x, y)\n+  call cublassaxpy(N, a, x, 1, y, 1)\n+  !$acc end host_data\n+  !$acc end data\n+\n+  call validate_results (N, y, y_ref)\n+\n+  y(:) = 3.0\n+\n+  !$acc data copyin (x) copyin (a) copy (y)\n+  !$acc parallel present (x) pcopy (y) present (a)\n+  call saxpy (N, a, x, y)\n+  !$acc end parallel\n+  !$acc end data\n+\n+  call validate_results (N, y, y_ref)\n+\n+  y(:) = 3.0\n+\n+  !$acc enter data copyin (x, a, y)\n+  !$acc parallel present (x) pcopy (y) present (a)\n+  call saxpy (N, a, x, y)\n+  !$acc end parallel\n+  !$acc exit data delete (x, a) copyout (y)\n+\n+  call validate_results (N, y, y_ref)\n+end program test"}, {"sha": "fdf9409bde4d3acb85037013d19f0bce0c20b168", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-acc-loop-reduction-2.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-acc-loop-reduction-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-acc-loop-reduction-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-acc-loop-reduction-2.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,26 @@\n+program foo\n+\n+  IMPLICIT NONE\n+  INTEGER :: vol = 0\n+\n+  call bar (vol)\n+\n+  if (vol .ne. 4) call abort\n+end program foo\n+\n+subroutine bar(vol)\n+  IMPLICIT NONE\n+\n+  INTEGER :: vol\n+  INTEGER :: j,k\n+\n+  !$ACC KERNELS\n+  !$ACC LOOP REDUCTION(+:vol)\n+  DO k=1,2\n+     !$ACC LOOP REDUCTION(+:vol)\n+     DO j=1,2\n+\tvol = vol + 1\n+     ENDDO\n+  ENDDO\n+  !$ACC END KERNELS\n+end subroutine bar"}, {"sha": "912a22b5153bd69a99ab3613173a0bcf9c318abe", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-acc-loop-reduction.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-acc-loop-reduction.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-acc-loop-reduction.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-acc-loop-reduction.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,21 @@\n+program foo\n+  IMPLICIT NONE\n+  INTEGER :: vol = 0\n+\n+  call bar (vol)\n+\n+  if (vol .ne. 2) call abort\n+end program foo\n+\n+subroutine bar(vol)\n+  IMPLICIT NONE\n+  INTEGER :: vol\n+  INTEGER :: j\n+\n+  !$ACC KERNELS\n+  !$ACC LOOP REDUCTION(+:vol)\n+  DO j=1,2\n+     vol = vol + 1\n+  ENDDO\n+  !$ACC END KERNELS\n+end subroutine bar"}, {"sha": "4ef99cd3475221368ca06b148c7421692976fe33", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-collapse-3.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-collapse-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-collapse-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-collapse-3.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,30 @@\n+! Test the collapse clause inside a kernels region.\n+\n+! { dg-do run }\n+\n+program collapse3\n+  integer :: a(3,3,3), k, kk, kkk, l, ll, lll\n+  !$acc kernels\n+  !$acc loop collapse(3)\n+    do 115 k=1,3\n+dokk: do kk=1,3\n+        do kkk=1,3\n+          a(k,kk,kkk) = 1\n+        enddo\n+      enddo dokk\n+115   continue\n+  !$acc end kernels\n+  if (any(a(1:3,1:3,1:3).ne.1)) call abort\n+\n+  !$acc kernels\n+  !$acc loop collapse(3)\n+dol: do 120 l=1,3\n+doll: do ll=1,3\n+        do lll=1,3\n+          a(l,ll,lll) = 2\n+        enddo\n+      enddo doll\n+120 end do dol\n+  !$acc end kernels\n+  if (any(a(1:3,1:3,1:3).ne.2)) call abort\n+end program collapse3"}, {"sha": "db382a7deb68f308349ed752ce0e63b60364d647", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-collapse-4.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-collapse-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-collapse-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-collapse-4.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,41 @@\n+! Test the collapse and reduction loop clauses inside a kernels region.\n+\n+! { dg-do run }\n+\n+program collapse4\n+  integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+  logical :: l, r\n+  l = .false.\n+  r = .false.\n+  a(:, :, :) = 0\n+  b(:, :, :) = 0\n+  !$acc kernels\n+  !$acc loop collapse (3) reduction (.or.:l)\n+    do i = 2, 6\n+      do j = -2, 4\n+        do k = 13, 18\n+          l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          l = l.or.k.lt.13.or.k.gt.18\n+          if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+  !$acc end kernels\n+  do i = 2, 6\n+    do j = -2, 4\n+      do k = 13, 18\n+        r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+        r = r.or.k.lt.13.or.k.gt.18\n+        if (.not.l) b(i, j, k) = b(i, j, k) + 1\n+      end do\n+    end do\n+  end do\n+  if (l .neqv. r) call abort\n+  do i = 2, 6\n+    do j = -2, 4\n+      do k = 13, 18\n+         if (a(i, j, k) .ne. b(i, j, k)) call abort\n+      end do\n+    end do\n+  end do\n+end program collapse4"}, {"sha": "a881fbbe5cca2a6bad080832fe74efc76ae41e49", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-independent.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-independent.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-independent.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-independent.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+! { dg-additional-options \"-cpp\" }\n+\n+#define N (1024 * 512)\n+\n+subroutine foo (a,  b,  c)\n+  integer, parameter :: n = N\n+  integer, dimension (n) :: a\n+  integer, dimension (n) :: b\n+  integer, dimension (n) :: c\n+  integer i, ii\n+\n+  do i = 1, n\n+    a(i) = i * 2;\n+  end do\n+\n+  do i = 1, n\n+    b(i) = i * 4;\n+  end do\n+\n+  !$acc kernels copyin (a(1:n), b(1:n)) copyout (c(1:n))\n+    !$acc loop independent\n+    do ii = 1, n\n+      c(ii) = a(ii) + b(ii)\n+    end do\n+  !$acc end kernels\n+\n+  do i = 1, n\n+    if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end subroutine\n+\n+program main\n+  integer, parameter :: n = N\n+  integer :: a(n)\n+  integer :: b(n)\n+  integer :: c(n)\n+\n+  call foo (a, b, c)\n+\n+end program main"}, {"sha": "edcdc56ec1c96cf0a0351d13b2cfb2be488d5719", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-loop-1.f90", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,66 @@\n+! Exercise the auto, independent, seq and tile loop clauses inside\n+! kernels regions. \n+\n+! { dg-do run }\n+\n+program loops\n+  integer, parameter     :: n = 20\n+  integer                :: i, a(n), b(n)\n+\n+  a(:) = 0\n+  b(:) = 0\n+\n+  ! COPY\n+\n+  !$acc kernels copy (a)\n+  !$acc loop auto\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  do i = 1, n\n+     b(i) = i\n+  end do\n+\n+  call check (a, b, n)\n+\n+  ! COPYOUT\n+\n+  a(:) = 0\n+\n+  !$acc kernels copyout (a)\n+  !$acc loop independent\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  do i = 1, n\n+     if (a(i) .ne. b(i)) call abort\n+  end do\n+  call check (a, b, n)\n+\n+  ! COPYIN\n+\n+  a(:) = 0\n+\n+  !$acc kernels copyout (a) copyin (b)\n+  !$acc loop seq\n+  do i = 1, n\n+     a(i) = b(i)\n+  end do\n+  !$acc end kernels\n+\n+  call check (a, b, n)\n+\n+end program loops\n+\n+subroutine check (a, b, n)\n+  integer :: n, a(n), b(n)\n+  integer :: i\n+\n+  do i = 1, n\n+     if (a(i) .ne. b(i)) call abort\n+  end do\n+end subroutine check"}, {"sha": "704ff622854ad970f7150207f663012a1b8c3024", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-map-1.f90", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-map-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-map-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-map-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,116 @@\n+! Test the copy, copyin, copyout, pcopy, pcopyin, pcopyout, and pcreate\n+! clauses on kernels constructs.\n+\n+! { dg-do run }\n+\n+program map\n+  integer, parameter     :: n = 20, c = 10\n+  integer                :: i, a(n), b(n), d(n)\n+\n+  a(:) = 0\n+  b(:) = 0\n+\n+  ! COPY\n+\n+  !$acc kernels copy (a)\n+  !$acc loop\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  do i = 1, n\n+     b(i) = i\n+  end do\n+\n+  call check (a, b, n)\n+\n+  ! COPYOUT\n+\n+  a(:) = 0\n+\n+  !$acc kernels copyout (a)\n+  !$acc loop\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  do i = 1, n\n+     if (a(i) .ne. b(i)) call abort\n+  end do\n+  call check (a, b, n)\n+\n+  ! COPYIN\n+\n+  a(:) = 0\n+\n+  !$acc kernels copyout (a) copyin (b)\n+  !$acc loop\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  call check (a, b, n)\n+\n+  ! PRESENT_OR_COPY\n+\n+  !$acc kernels pcopy (a)\n+  !$acc loop\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  call check (a, b, n)\n+\n+  ! PRESENT_OR_COPYOUT\n+\n+  a(:) = 0\n+\n+  !$acc kernels pcopyout (a)\n+  !$acc loop\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  call check (a, b, n)\n+\n+  ! PRESENT_OR_COPYIN\n+\n+  a(:) = 0\n+\n+  !$acc kernels pcopyout (a) pcopyin (b)\n+  !$acc loop\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end kernels\n+\n+  call check (a, b, n)\n+\n+  ! PRESENT_OR_CREATE\n+\n+  a(:) = 0\n+\n+  !$acc kernels pcopyout (a) pcreate (d)\n+  !$acc loop\n+  do i = 1, n\n+     d(i) = i\n+     a(i) = d(i)\n+  end do\n+  !$acc end kernels\n+\n+  call check (a, b, n)\n+end program map\n+\n+subroutine check (a, b, n)\n+  integer :: n, a(n), b(n)\n+  integer :: i\n+\n+  do i = 1, n\n+     if (a(i) .ne. b(i)) call abort\n+  end do\n+end subroutine check"}, {"sha": "fe1088c0d04cb792acf6171897676ace217938df", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-parallel-loop-data-enter-exit.f95", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-parallel-loop-data-enter-exit.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-parallel-loop-data-enter-exit.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-parallel-loop-data-enter-exit.f95?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+\n+program main\n+  implicit none\n+  integer, parameter         :: n = 1024\n+  integer, dimension (0:n-1) :: a, b, c\n+  integer                    :: i, ii\n+\n+  !$acc enter data create (a(0:n-1), b(0:n-1), c(0:n-1))\n+\n+  !$acc kernels present (a(0:n-1))\n+  do i = 0, n - 1\n+     a(i) = i * 2\n+  end do\n+  !$acc end kernels\n+\n+  !$acc parallel present (b(0:n-1))\n+  !$acc loop\n+  do i = 0, n -1\n+     b(i) = i * 4\n+  end do\n+  !$acc end parallel\n+\n+  !$acc kernels present (a(0:n-1), b(0:n-1), c(0:n-1))\n+  do ii = 0, n - 1\n+     c(ii) = a(ii) + b(ii)\n+  end do\n+  !$acc end kernels\n+\n+  !$acc exit data copyout (a(0:n-1), b(0:n-1), c(0:n-1))\n+\n+  do i = 0, n - 1\n+     if (c(i) .ne. a(i) + b(i)) call abort\n+  end do\n+\n+end program main"}, {"sha": "5119fabadaff644514f3f344ae38ea899de059a2", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-1.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,23 @@\n+! Test of gang-private variables declared on loop directive.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: x, i, arr(32)\n+\n+  do i = 1, 32\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32) private(x)\n+  do i = 1, 32\n+     x = i * 2;\n+     arr(i) = arr(i) + x;\n+  end do\n+  !$acc end kernels\n+\n+  do i = 1, 32\n+     if (arr(i) .ne. i * 3) call abort\n+  end do\n+end program main"}, {"sha": "5e46287497d81d7063085f0c9c7b44748c4bbe60", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-2.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-2.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,28 @@\n+! Test of gang-private variables declared on loop directive, with broadcasting\n+! to partitioned workers.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: x, i, j, arr(0:32*32)\n+\n+  do i = 0, 32*32 -1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32) private(x)\n+  do i = 0, 31\n+     x = i * 2;\n+\n+     !$acc loop worker(num:32)\n+     do j = 0, 31\n+        arr(i * 32 + j) = arr(i * 32 + j) + x;\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 * 32 - 1\n+     if (arr(i) .ne. i + (i / 32) * 2) call abort\n+  end do\n+end program main"}, {"sha": "5cc3378f4592d545fab08a3250858f2292173431", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-3.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-3.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,28 @@\n+! Test of gang-private variables declared on loop directive, with broadcasting\n+! to partitioned vectors.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: x, i, j, arr(0:32*32)\n+\n+  do i = 0, 32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32) private(x)\n+  do i = 0, 31\n+     x = i * 2;\n+\n+     !$acc loop vector(length:32)\n+     do j = 0, 31\n+        arr(i * 32 + j) = arr(i * 32 + j) + x;\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 * 32 - 1\n+     if (arr(i) .ne. i + (i / 32) * 2) call abort\n+  end do\n+end program main"}, {"sha": "1e41555aa1ca322f80fc29eb443ac72ad38b6caa", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-6.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-gang-6.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,36 @@\n+! Test of gang-private addressable variable declared on loop directive, with\n+! broadcasting to partitioned workers.\n+\n+! { dg-do run }\n+\n+program main\n+  type vec3\n+     integer x, y, z, attr(13)\n+  end type vec3\n+\n+  integer x, i, j, arr(0:32*32)\n+  type(vec3) pt\n+  \n+  do i = 0, 32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32) private(pt)\n+  do i = 0, 31\n+     pt%x = i\n+     pt%y = i * 2\n+     pt%z = i * 4\n+     pt%attr(5) = i * 6\n+\n+     !$acc loop vector(length:32)\n+     do j = 0, 31\n+        arr(i * 32 + j) = arr(i * 32 + j) + pt%x + pt%y + pt%z + pt%attr(5);\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 * 32 - 1\n+     if (arr(i) .ne. i + (i / 32) * 13) call abort\n+  end do\n+end program main"}, {"sha": "3efd9fe473bba4dd4802ec3b2784221632d4a41a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-1.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,41 @@\n+! Test of vector-private variables declared on loop directive.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: x, i, j, k, idx, arr(0:32*32*32)\n+\n+  do i = 0, 32*32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32)\n+  do i = 0, 31\n+     !$acc loop worker(num:8)\n+     do j = 0, 31\n+        !$acc loop vector(length:32) private(x)\n+        do k = 0, 31\n+           x = ieor(i, j * 3)\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+        !$acc loop vector(length:32) private(x)\n+        do k = 0, 31\n+           x = ior(i, j * 5)\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 - 1\n+     do j = 0, 32 -1\n+        do k = 0, 32 - 1\n+           idx = i * 1024 + j * 32 + k\n+           if (arr(idx) .ne. idx + ieor(i, j * 3) * k + ior(i, j * 5) * k) then\n+              call abort\n+           end if\n+        end do\n+     end do\n+  end do\n+end program main"}, {"sha": "1cf3b9818ef127f392b16cc51786053fe79ba0c3", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-2.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-vector-2.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,38 @@\n+! Test of vector-private variables declared on loop directive. Array type.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: i, j, k, idx, arr(0:32*32*32), pt(2)\n+\n+  do i = 0, 32*32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32)\n+  do i = 0, 31\n+     !$acc loop worker(num:8)\n+     do j = 0, 31\n+        !$acc loop vector(length:32) private(x, pt)\n+        do k = 0, 31\n+           pt(1) = ieor(i, j * 3)\n+           pt(2) = ior(i, j * 5)\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt(1) * k\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt(2) * k\n+        end do\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 - 1\n+     do j = 0, 32 -1\n+        do k = 0, 32 - 1\n+           idx = i * 1024 + j * 32 + k\n+           if (arr(idx) .ne. idx + ieor(i, j * 3) * k + ior(i, j * 5) * k) then\n+              call abort\n+           end if\n+        end do\n+     end do\n+  end do\n+end program main"}, {"sha": "55e98e05c032b3060a3e85c9e37213bb9a08a91b", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,27 @@\n+! Test of worker-private variables declared on a loop directive.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: x, i, j, arr(0:32*32)\n+  common x\n+\n+  do i = 0, 32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32) private(x)\n+  do i = 0, 31\n+     !$acc loop worker(num:8) private(x)\n+     do j = 0, 31\n+        x = ieor(i, j * 3)\n+        arr(i * 32 + j) = arr(i * 32 + j) + x\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 * 32 - 1\n+     if (arr(i) .ne. i + ieor(i / 32, mod(i, 32) * 3)) call abort\n+  end do\n+end program main"}, {"sha": "7924e7f13a62004898ce40ae2f8206a5564095cd", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-2.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-2.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,36 @@\n+! Test of worker-private variables declared on a loop directive, broadcasting\n+! to vector-partitioned mode.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: x, i, j, k, idx, arr(0:32*32*32)\n+\n+  do i = 0, 32*32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32)\n+  do i = 0, 31\n+     !$acc loop worker(num:8) private(x)\n+     do j = 0, 31\n+        x = ieor(i, j * 3)\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 - 1\n+     do j = 0, 32 -1\n+        do k = 0, 32 - 1\n+           idx = i * 1024 + j * 32 + k\n+           if (arr(idx) .ne. idx + ieor(i, j * 3) * k) call abort\n+        end do\n+     end do\n+  end do\n+end program main"}, {"sha": "598c6fd7226f2c20d121c21e831e26c41f221881", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-3.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-3.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,48 @@\n+! Test of worker-private variables declared on a loop directive, broadcasting\n+! to vector-partitioned mode.  Back-to-back worker loops.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: x, i, j, k, idx, arr(0:32*32*32)\n+\n+  do i = 0, 32*32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32)\n+  do i = 0, 31\n+     !$acc loop worker(num:8) private(x)\n+     do j = 0, 31\n+        x = ieor(i, j * 3)\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+     end do\n+\n+     !$acc loop worker(num:8) private(x)\n+     do j = 0, 31\n+        x = ior(i, j * 5)\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 - 1\n+     do j = 0, 32 -1\n+        do k = 0, 32 - 1\n+           idx = i * 1024 + j * 32 + k\n+           if (arr(idx) .ne. idx + ieor(i, j * 3) * k + ior(i, j * 5) * k) then\n+              call abort\n+           end if\n+        end do\n+     end do\n+  end do\n+end program main"}, {"sha": "8512d7c3966c9a2f0837040e78dd1045510790d1", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-4.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-4.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,45 @@\n+! Test of worker-private variables declared on a loop directive, broadcasting\n+! to vector-partitioned mode.  Successive vector loops.  */\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: x, i, j, k, idx, arr(0:32*32*32)\n+\n+  do i = 0, 32*32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32)\n+  do i = 0, 31\n+     !$acc loop worker(num:8) private(x)\n+     do j = 0, 31\n+        x = ieor(i, j * 3)\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+\n+        x = ior(i, j * 5)\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 - 1\n+     do j = 0, 32 -1\n+        do k = 0, 32 - 1\n+           idx = i * 1024 + j * 32 + k\n+           if (arr(idx) .ne. idx + ieor(i, j * 3) * k + ior(i, j * 5) * k) then\n+              call abort\n+           end if\n+        end do\n+     end do\n+  end do\n+end program main"}, {"sha": "c3ebf7445789da81a922e32997be94e1d3d0cecf", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-5.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-5.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,48 @@\n+! Test of worker-private variables declared on a loop directive, broadcasting\n+! to vector-partitioned mode.  Addressable worker variable.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: i, j, k, idx, arr(0:32*32*32)\n+  integer, target :: x\n+  integer, pointer :: p\n+\n+  do i = 0, 32*32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32)\n+  do i = 0, 31\n+     !$acc loop worker(num:8) private(x, p)\n+     do j = 0, 31\n+        p => x\n+        x = ieor(i, j * 3)\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+\n+        p = ior(i, j * 5)\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + x * k\n+        end do\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 - 1\n+     do j = 0, 32 -1\n+        do k = 0, 32 - 1\n+           idx = i * 1024 + j * 32 + k\n+           if (arr(idx) .ne. idx + ieor(i, j * 3) * k + ior(i, j * 5) * k) then\n+              call abort\n+           end if\n+        end do\n+     end do\n+  end do\n+end program main"}, {"sha": "2a8a590589506ee1acc42e06700ccba391bd0d0c", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-6.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-6.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,49 @@\n+! Test of worker-private variables declared on a loop directive, broadcasting\n+! to vector-partitioned mode.  Aggregate worker variable.\n+\n+! { dg-do run }\n+\n+program main\n+  type vec2\n+     integer x, y\n+  end type vec2\n+  \n+  integer :: i, j, k, idx, arr(0:32*32*32)\n+  type(vec2) :: pt\n+  \n+  do i = 0, 32*32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32)\n+  do i = 0, 31\n+     !$acc loop worker(num:8) private(pt)\n+     do j = 0, 31\n+        pt%x = ieor(i, j * 3)\n+        pt%y = ior(i, j * 5)\n+        \n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt%x * k\n+        end do\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt%y * k\n+        end do\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 - 1\n+     do j = 0, 32 -1\n+        do k = 0, 32 - 1\n+           idx = i * 1024 + j * 32 + k\n+           if (arr(idx) .ne. idx + ieor(i, j * 3) * k + ior(i, j * 5) * k) then\n+              call abort\n+           end if\n+        end do\n+     end do\n+  end do\n+end program main"}, {"sha": "7dd1d3da7becf9b3b5939b420811c8b446c7fb97", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-7.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-private-vars-loop-worker-7.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,44 @@\n+! Test of worker-private variables declared on loop directive, broadcasting\n+! to vector-partitioned mode.  Array worker variable.\n+\n+! { dg-do run }\n+\n+program main\n+  integer :: i, j, k, idx, arr(0:32*32*32), pt(2)\n+\n+  do i = 0, 32*32*32-1\n+     arr(i) = i\n+  end do\n+\n+  !$acc kernels copy(arr)\n+  !$acc loop gang(num:32)\n+  do i = 0, 31\n+     !$acc loop worker(num:8) private(pt)\n+     do j = 0, 31\n+        pt(1) = ieor(i, j * 3)\n+        pt(2) = ior(i, j * 5)\n+        \n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt(1) * k\n+        end do\n+\n+        !$acc loop vector(length:32)\n+        do k = 0, 31\n+           arr(i * 1024 + j * 32 + k) = arr(i * 1024 + j * 32 + k) + pt(2) * k\n+        end do\n+     end do\n+  end do\n+  !$acc end kernels\n+\n+  do i = 0, 32 - 1\n+     do j = 0, 32 -1\n+        do k = 0, 32 - 1\n+           idx = i * 1024 + j * 32 + k\n+           if (arr(idx) .ne. idx + ieor(i, j * 3) * k + ior(i, j * 5) * k) then\n+              call abort\n+           end if\n+        end do\n+     end do\n+  end do\n+end program main"}, {"sha": "c7a52ed98f6e6cacb6a586f9b4f95e83dbe5c21d", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-reduction-1.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-reduction-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,19 @@\n+! Test a simple acc loop reduction inside a kernels region. \n+\n+! { dg-do run }\n+\n+program reduction\n+  integer, parameter     :: n = 20\n+  integer                :: i, red\n+\n+  red = 0\n+\n+  !$acc kernels\n+  !$acc loop reduction (+:red)\n+  do i = 1, n\n+     red = red + 1\n+  end do\n+  !$acc end kernels\n+\n+  if (red .ne. n) call abort\n+end program reduction"}, {"sha": "e307dfde374d798d4ab7882d6775c9ac8fc6659f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/lib-12.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-12.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+! { dg-xfail-run-if \"TODO\" { openacc_nvidia_accel_selected } { \"-O0\" \"-O1\" } { \"\" } }\n+\n+program main\n+  use openacc\n+  implicit none\n+\n+  integer :: i, j, n\n+\n+  j = 0\n+  n = 1000000\n+\n+  !$acc parallel async (0) copy (j)\n+    do i = 1, 1000000\n+      j = j + 1\n+    end do\n+  !$acc end parallel\n+\n+  call acc_wait_async (0, 1)\n+\n+  if (acc_async_test (0) .neqv. .TRUE.) call abort\n+\n+  if (acc_async_test (1) .neqv. .TRUE.) call abort\n+\n+  call acc_wait (1)\n+\n+end program"}, {"sha": "6d713b1cd95dcc8cfdf950115f5ae34a0801b488", "filename": "libgomp/testsuite/libgomp.oacc-fortran/lib-13.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-13.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+! { dg-xfail-run-if \"TODO\" { openacc_nvidia_accel_selected } { \"-O0\" \"-O1\" } { \"\" } }\n+\n+program main\n+  use openacc\n+  implicit none\n+\n+  integer :: i, j\n+  integer, parameter :: N = 1000000\n+  integer, parameter :: nprocs = 2\n+  integer :: k(nprocs)\n+\n+  k(:) = 0\n+\n+  !$acc data copy (k(1:nprocs))\n+    do j = 1, nprocs\n+      !$acc parallel async (j)\n+        do i = 1, N\n+          k(j) = k(j) + 1\n+        end do\n+      !$acc end parallel\n+    end do\n+  !$acc end data\n+\n+  if (acc_async_test (1) .neqv. .TRUE.) call abort\n+  if (acc_async_test (2) .neqv. .TRUE.) call abort\n+\n+  call acc_wait_all_async (nprocs + 1)\n+\n+  if (acc_async_test (nprocs + 1) .neqv. .TRUE.) call abort\n+\n+  call acc_wait_all ()\n+\n+end program"}, {"sha": "eb0206ccce1e0902cb421868e5f066a4a7ff49ec", "filename": "libgomp/testsuite/libgomp.oacc-fortran/lib-14.f90", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-14.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,82 @@\n+! Exercise the data movement runtime library functions on non-shared memory\n+! targets.\n+\n+! { dg-do run { target openacc_nvidia_accel_selected } }\n+\n+program main\n+  use openacc\n+  implicit none\n+\n+  integer, parameter :: N = 256\n+  integer, allocatable :: h(:)\n+  integer :: i\n+\n+  allocate (h(N))\n+\n+  do i = 1, N\n+    h(i) = i\n+  end do \n+\n+  call acc_present_or_copyin (h)\n+\n+  if (acc_is_present (h) .neqv. .TRUE.) call abort\n+\n+  call acc_copyout (h)\n+\n+  if (acc_is_present (h) .neqv. .FALSE.) call abort\n+\n+  do i = 1, N\n+    if (h(i) /= i) call abort\n+  end do\n+\n+  do i = 1, N\n+    h(i) = i + i\n+  end do \n+\n+  call acc_pcopyin (h, sizeof (h))\n+\n+  if (acc_is_present (h) .neqv. .TRUE.) call abort\n+\n+  call acc_copyout (h)\n+\n+  if (acc_is_present (h) .neqv. .FALSE.) call abort\n+\n+  do i = 1, N\n+    if (h(i) /= i + i) call abort\n+  end do\n+\n+  call acc_create (h)\n+\n+  if (acc_is_present (h) .neqv. .TRUE.) call abort\n+\n+  !$acc parallel loop\n+    do i = 1, N\n+      h(i) = i\n+    end do\n+  !$end acc parallel\n+\n+  call acc_copyout (h)\n+\n+  if (acc_is_present (h) .neqv. .FALSE.) call abort\n+\n+  do i = 1, N\n+    if (h(i) /= i) call abort\n+  end do\n+\n+  call acc_present_or_create (h, sizeof (h))\n+\n+  if (acc_is_present (h) .neqv. .TRUE.) call abort\n+\n+  call acc_delete (h)\n+\n+  if (acc_is_present (h) .neqv. .FALSE.) call abort\n+\n+  call acc_pcreate (h)\n+\n+  if (acc_is_present (h) .neqv. .TRUE.) call abort\n+\n+  call acc_delete (h)\n+\n+  if (acc_is_present (h) .neqv. .FALSE.) call abort\n+\n+end program"}, {"sha": "3a834dbb22a1539935207085be41f5399934f3fb", "filename": "libgomp/testsuite/libgomp.oacc-fortran/lib-15.f90", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Flib-15.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do run }\n+! { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } }\n+\n+program main\n+  use openacc\n+  implicit none\n+\n+  integer, parameter :: N = 256\n+  integer, allocatable :: h(:)\n+  integer :: i\n+\n+  allocate (h(N))\n+\n+  do i = 1, N\n+    h(i) = i\n+  end do \n+\n+  call acc_copyin (h)\n+\n+  do i = 1, N\n+    h(i) = i + i\n+  end do \n+\n+  call acc_update_device (h, sizeof (h))\n+\n+  if (acc_is_present (h) .neqv. .TRUE.) call abort\n+\n+  h(:) = 0\n+\n+  call acc_copyout (h, sizeof (h))\n+\n+  do i = 1, N\n+    if (h(i) /= i + i) call abort\n+  end do \n+\n+  call acc_copyin (h, sizeof (h))\n+\n+  h(:) = 0\n+\n+  call acc_update_self (h, sizeof (h))\n+  \n+  if (acc_is_present (h) .neqv. .TRUE.) call abort\n+\n+  do i = 1, N\n+    if (h(i) /= i + i) call abort\n+  end do \n+\n+  call acc_delete (h)\n+\n+  if (acc_is_present (h) .neqv. .FALSE.) call abort\n+  \n+end program"}, {"sha": "754b833a4ba722d517e4a4db41d56716030cafcc", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-loop-1.f90", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-loop-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-loop-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-loop-1.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,77 @@\n+! Exercise the auto, independent, seq and tile loop clauses inside\n+! parallel regions. \n+\n+! { dg-do run }\n+\n+program loops\n+  integer, parameter     :: n = 20, c = 10\n+  integer                :: i, a(n), b(n)\n+\n+  a(:) = 0\n+  b(:) = 0\n+\n+  ! COPY\n+\n+  !$acc parallel copy (a)\n+  !$acc loop auto\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end parallel\n+\n+  do i = 1, n\n+     b(i) = i\n+  end do\n+\n+  call check (a, b, n)\n+\n+  ! COPYOUT\n+\n+  a(:) = 0\n+\n+  !$acc parallel copyout (a)\n+  !$acc loop independent\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end parallel\n+\n+  do i = 1, n\n+     if (a(i) .ne. b(i)) call abort\n+  end do\n+  call check (a, b, n)\n+\n+  ! COPYIN\n+\n+  a(:) = 0\n+\n+  !$acc parallel copyout (a) copyin (b)\n+  !$acc loop seq\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end parallel\n+\n+  call check (a, b, n)\n+\n+  ! PRESENT_OR_COPY\n+\n+  !$acc parallel pcopy (a)\n+  !$acc loop tile (*)\n+  do i = 1, n\n+     a(i) = i\n+  end do\n+  !$acc end parallel\n+\n+  call check (a, b, n)\n+\n+end program loops\n+\n+subroutine check (a, b, n)\n+  integer :: n, a(n), b(n)\n+  integer :: i\n+\n+  do i = 1, n\n+     if (a(i) .ne. b(i)) call abort\n+  end do\n+end subroutine check"}, {"sha": "a684d07977cde8614941cf6c2553a74b567f22dc", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reference-reductions.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freference-reductions.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freference-reductions.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freference-reductions.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,38 @@\n+! Test reductions on dummy arguments inside modules.\n+\n+! { dg-do run }\n+\n+module prm\n+  implicit none\n+\n+contains\n+\n+subroutine param_reduction(var)\n+  implicit none\n+  integer(kind=8) :: var\n+  integer      :: j,k\n+\n+!$acc parallel copy(var)\n+!$acc loop reduction(+ : var) gang\n+ do k=1,10\n+!$acc loop vector reduction(+ : var)\n+    do j=1,100\n+     var = var + 1.0\n+    enddo\n+ enddo\n+!$acc end parallel\n+end subroutine param_reduction\n+\n+end module prm\n+\n+program test\n+  use prm\n+  implicit none\n+\n+  integer(8) :: r\n+\n+  r=10.0\n+  call param_reduction (r)\n+\n+  if (r .ne. 1010) call abort ()\n+end program test"}, {"sha": "1edcee48677e2b9633c2d7e2124d0def66d40a57", "filename": "libgomp/testsuite/libgomp.oacc-fortran/vector-routine.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fvector-routine.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31dd69b7ff60979b615e45229f759613873989e6/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fvector-routine.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fvector-routine.f90?ref=31dd69b7ff60979b615e45229f759613873989e6", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+\n+module param\n+  integer, parameter :: N = 32\n+end module param\n+\n+program main\n+  use param\n+  integer :: i\n+  integer :: a(N)\n+\n+  do i = 1, N\n+    a(i) = i\n+  end do\n+\n+  !$acc parallel copy (a)\n+  !$acc loop worker\n+    do i = 1, N\n+      call vector (a)\n+    end do\n+  !$acc end parallel\n+\n+  do i = 1, N\n+    if (a(i) .ne. 0) call abort\n+  end do\n+\n+contains\n+\n+  subroutine vector (a)\n+  !$acc routine vector\n+  integer, intent (inout) :: a(N)\n+  integer :: i\n+\n+  !$acc loop vector\n+  do i = 1, N\n+    a(i) = a(i) - a(i) \n+  end do\n+\n+end subroutine vector\n+\n+end program main"}]}