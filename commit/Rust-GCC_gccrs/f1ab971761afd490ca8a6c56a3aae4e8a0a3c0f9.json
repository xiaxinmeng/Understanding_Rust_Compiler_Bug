{"sha": "f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhYjk3MTc2MWFmZDQ5MGNhOGE2YzU2YTNhYWU0ZThhMGEzYzBmOQ==", "commit": {"author": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-06-10T14:02:56Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-06-10T14:02:56Z"}, "message": "Reverting previous commit.\n\nFrom-SVN: r211410", "tree": {"sha": "1dd9bda94d83845278115317ffa852bd1a4e5ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dd9bda94d83845278115317ffa852bd1a4e5ec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9/comments", "author": null, "committer": null, "parents": [{"sha": "c7f65aae9e5e6a0d0a82148278a9341e1769376e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f65aae9e5e6a0d0a82148278a9341e1769376e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f65aae9e5e6a0d0a82148278a9341e1769376e"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "00f23b4cb17f47ff7e1bc2a8803ca4932d88df92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9", "patch": "@@ -1,8 +1,3 @@\n-2014-06-10  Jiong Wang  <jiong.wang@arm.com>\n-\n-\t* config/aarch64/aarch64.c (aarch64_save_or_restore_fprs)\n-\t(aarch64_save_or_restore_callee_save_registers): Fix layout.\n-\n 2014-06-10  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_save_or_restore_fprs): Fix"}, {"sha": "e7f455bb7c1cea4ee37f43c66664f91cea50acd4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9", "patch": "@@ -1917,6 +1917,7 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n   rtx (*gen_mem_ref)(enum machine_mode, rtx)\n     = (frame_pointer_needed)? gen_frame_mem : gen_rtx_MEM;\n \n+\n   for (regno = V0_REGNUM; regno <= V31_REGNUM; regno++)\n     {\n       if (aarch64_register_saved_on_entry (regno))\n@@ -1934,12 +1935,10 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t    {\n \t      /* Empty loop.  */\n \t    }\n-\n \t  if (regno2 <= V31_REGNUM &&\n \t      aarch64_register_saved_on_entry (regno2))\n \t    {\n \t      rtx mem2;\n-\n \t      /* Next highest register to be saved.  */\n \t      mem2 = gen_mem_ref (DFmode,\n \t\t\t\t  plus_constant\n@@ -1965,10 +1964,10 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t\t\t\tgen_rtx_REG (DFmode, regno2));\n \t\t}\n \n-\t      /* The first part of a frame-related parallel insn is\n-\t\t always assumed to be relevant to the frame\n-\t\t calculations; subsequent parts, are only\n-\t\t frame-related if explicitly marked.  */\n+\t\t  /* The first part of a frame-related parallel insn\n+\t\t     is always assumed to be relevant to the frame\n+\t\t     calculations; subsequent parts, are only\n+\t\t     frame-related if explicitly marked.  */\n \t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 1)) = 1;\n \t      regno = regno2;\n \t      start_offset += increment * 2;\n@@ -1988,14 +1987,15 @@ aarch64_save_or_restore_fprs (int start_offset, int increment,\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n     }\n+\n }\n \n \n /* offset from the stack pointer of where the saves and\n    restore's have to happen.  */\n static void\n-aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n-\t\t\t\t\t       bool restore)\n+aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT offset,\n+\t\t\t\t\t    bool restore)\n {\n   rtx insn;\n   rtx base_rtx = stack_pointer_rtx;\n@@ -2027,7 +2027,6 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n \t      aarch64_register_saved_on_entry (regno2))\n \t    {\n \t      rtx mem2;\n-\n \t      /* Next highest register to be saved.  */\n \t      mem2 = gen_mem_ref (Pmode,\n \t\t\t\t  plus_constant\n@@ -2051,11 +2050,12 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n \t\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DImode, regno2));\n \t\t}\n \n-\t      /* The first part of a frame-related parallel insn is\n-\t\t always assumed to be relevant to the frame\n-\t\t calculations; subsequent parts, are only\n-\t\t frame-related if explicitly marked.  */\n-\t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, 1)) = 1;\n+\t\t  /* The first part of a frame-related parallel insn\n+\t\t     is always assumed to be relevant to the frame\n+\t\t     calculations; subsequent parts, are only\n+\t\t     frame-related if explicitly marked.  */\n+\t      RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0,\n+\t\t\t\t\t    1)) = 1;\n \t      regno = regno2;\n \t      start_offset += increment * 2;\n \t    }\n@@ -2075,6 +2075,7 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n     }\n \n   aarch64_save_or_restore_fprs (start_offset, increment, restore, base_rtx);\n+\n }\n \n /* AArch64 stack frames generated by this compiler look like:"}]}