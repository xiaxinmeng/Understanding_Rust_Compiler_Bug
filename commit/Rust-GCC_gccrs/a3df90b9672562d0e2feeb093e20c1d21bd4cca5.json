{"sha": "a3df90b9672562d0e2feeb093e20c1d21bd4cca5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkZjkwYjk2NzI1NjJkMGUyZmVlYjA5M2UyMGMxZDIxYmQ0Y2NhNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-02-02T09:23:30Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2019-02-02T09:23:30Z"}, "message": "re PR fortran/88393 ([OOP] Segfault with type-bound assignment)\n\n2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/88393\n\t* trans-expr.c (gfc_conv_procedure_call): For derived entities,\n\tpassed in parentheses to class formals, invert the order of\n\tcopying allocatable components to taking the _data of the\n\tclass expression.\n\n2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/88393\n\t* gfortran.dg/alloc_comp_assign_16.f03 : New test.\n\nFrom-SVN: r268474", "tree": {"sha": "ba47a20a3b4104c8f850b90fc2e9af997666aebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba47a20a3b4104c8f850b90fc2e9af997666aebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3df90b9672562d0e2feeb093e20c1d21bd4cca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3df90b9672562d0e2feeb093e20c1d21bd4cca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3df90b9672562d0e2feeb093e20c1d21bd4cca5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/comments", "author": null, "committer": null, "parents": [{"sha": "da46c08e8b857d8ffc2332689e19c5277d25e7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da46c08e8b857d8ffc2332689e19c5277d25e7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da46c08e8b857d8ffc2332689e19c5277d25e7fd"}], "stats": {"total": 70, "additions": 60, "deletions": 10}, "files": [{"sha": "ce6df90aa775c67b4af73617d523858ae3521fc8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a3df90b9672562d0e2feeb093e20c1d21bd4cca5", "patch": "@@ -1,3 +1,11 @@\n+2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/88393\n+\t* trans-expr.c (gfc_conv_procedure_call): For derived entities,\n+\tpassed in parentheses to class formals, invert the order of\n+\tcopying allocatable components to taking the _data of the\n+\tclass expression.\n+\n 2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/88980"}, {"sha": "e7c75913bfe3382361adb0b01e4661cad3153715", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=a3df90b9672562d0e2feeb093e20c1d21bd4cca5", "patch": "@@ -6042,6 +6042,16 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      break;\n \t    }\n \n+\t  if (e->ts.type == BT_DERIVED && fsym && fsym->ts.type == BT_CLASS)\n+\t    {\n+\t      /* The derived type is passed to gfc_deallocate_alloc_comp.\n+\t\t Therefore, class actuals can be handled correctly but derived\n+\t\t types passed to class formals need the _data component.  */\n+\t      tmp = gfc_class_data_get (tmp);\n+\t      if (!CLASS_DATA (fsym)->attr.dimension)\n+\t\ttmp = build_fold_indirect_ref_loc (input_location, tmp);\n+\t    }\n+\n \t  if (e->expr_type == EXPR_OP\n \t\t&& e->value.op.op == INTRINSIC_PARENTHESES\n \t\t&& e->value.op.op1->expr_type == EXPR_VARIABLE)\n@@ -6053,16 +6063,6 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      gfc_add_expr_to_block (&se->post, local_tmp);\n \t    }\n \n-\t  if (e->ts.type == BT_DERIVED && fsym && fsym->ts.type == BT_CLASS)\n-\t    {\n-\t      /* The derived type is passed to gfc_deallocate_alloc_comp.\n-\t\t Therefore, class actuals can handled correctly but derived\n-\t\t types passed to class formals need the _data component.  */\n-\t      tmp = gfc_class_data_get (tmp);\n-\t      if (!CLASS_DATA (fsym)->attr.dimension)\n-\t\ttmp = build_fold_indirect_ref_loc (input_location, tmp);\n-\t    }\n-\n \t  if (!finalized && !e->must_finalize)\n \t    {\n \t      if ((e->ts.type == BT_CLASS"}, {"sha": "727dc4bf43b3b728e6f69828649067b776a87a83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3df90b9672562d0e2feeb093e20c1d21bd4cca5", "patch": "@@ -1,3 +1,8 @@\n+2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/88393\n+\t* gfortran.dg/alloc_comp_assign_16.f03 : New test.\n+\n 2019-02-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/88980"}, {"sha": "892ea172e204e9277c4a9d090812ecb057fd8bd2", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_16.f03", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3df90b9672562d0e2feeb093e20c1d21bd4cca5/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_16.f03?ref=a3df90b9672562d0e2feeb093e20c1d21bd4cca5", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR88393 in which a segfault occurred as indicated.\n+!\n+! Contributed by Janus Weil  <janus@gcc.gnu.org>\n+!\n+module m\n+   implicit none\n+   type :: t\n+      character(len=:), allocatable :: cs\n+   contains\n+      procedure :: ass\n+      generic :: assignment(=) => ass\n+   end type\n+contains\n+   subroutine ass(a, b)\n+      class(t), intent(inout) :: a\n+      class(t), intent(in)    :: b\n+      a%cs = b%cs\n+      print *, \"ass\"\n+   end subroutine\n+end module\n+\n+program p\n+   use m\n+   implicit none\n+   type :: t2\n+      type(t) :: c\n+   end type\n+   type(t2), dimension(1:2) :: arr\n+   arr(1)%c%cs = \"abcd\"\n+   arr(2)%c = arr(1)%c  ! Segfault here.\n+   print *, \"done\", arr(2)%c%cs, arr(2)%c%cs\n+! Make sure with valgrind that there are no memory leaks.\n+   deallocate (arr(1)%c%cs)\n+   deallocate (arr(2)%c%cs)\n+end"}]}