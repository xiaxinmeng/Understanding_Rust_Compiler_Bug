{"sha": "ac96e9068ce7dcaca992fde7f1551ffe8837b723", "node_id": "C_kwDOANBUbNoAKGFjOTZlOTA2OGNlN2RjYWNhOTkyZmRlN2YxNTUxZmZlODgzN2I3MjM", "commit": {"author": {"name": "Jiawei", "email": "jiawei@iscas.ac.cn", "date": "2022-10-20T09:32:33Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-10-27T03:17:29Z"}, "message": "RISC-V: Target support for z*inx extension.\n\nSupport 'TARGET_ZFINX' with float instruction pattern and builtin function.\nReuse 'TARGET_HADR_FLOAT',  'TARGET_DOUBLE_FLOAT' and 'TARGET_ZHINX' patterns.\n\ngcc/ChangeLog:\n\n\t* config/riscv/iterators.md (TARGET_ZFINX):New target.\n\t(TARGET_ZDINX): Ditto.\n\t(TARGET_ZHINX): Ditto.\n\t* config/riscv/riscv-builtins.cc (AVAIL): Ditto.\n\t(riscv_atomic_assign_expand_fenv): Ditto.\n\t* config/riscv/riscv-c.cc (riscv_cpu_cpp_builtins): Ditto.\n\t* config/riscv/riscv.md: Ditto.", "tree": {"sha": "d4ded6505d0add885b06ecdf65320967fc4e5f65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ded6505d0add885b06ecdf65320967fc4e5f65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac96e9068ce7dcaca992fde7f1551ffe8837b723", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac96e9068ce7dcaca992fde7f1551ffe8837b723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac96e9068ce7dcaca992fde7f1551ffe8837b723", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac96e9068ce7dcaca992fde7f1551ffe8837b723/comments", "author": {"login": "pz9115", "id": 43362020, "node_id": "MDQ6VXNlcjQzMzYyMDIw", "avatar_url": "https://avatars.githubusercontent.com/u/43362020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pz9115", "html_url": "https://github.com/pz9115", "followers_url": "https://api.github.com/users/pz9115/followers", "following_url": "https://api.github.com/users/pz9115/following{/other_user}", "gists_url": "https://api.github.com/users/pz9115/gists{/gist_id}", "starred_url": "https://api.github.com/users/pz9115/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pz9115/subscriptions", "organizations_url": "https://api.github.com/users/pz9115/orgs", "repos_url": "https://api.github.com/users/pz9115/repos", "events_url": "https://api.github.com/users/pz9115/events{/privacy}", "received_events_url": "https://api.github.com/users/pz9115/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09335728d3f9bc177eac2f7dff79715e0aa67c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09335728d3f9bc177eac2f7dff79715e0aa67c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09335728d3f9bc177eac2f7dff79715e0aa67c9"}], "stats": {"total": 90, "additions": 46, "deletions": 44}, "files": [{"sha": "50380ecfac96b149966b65afddfb32cc0982ca3f", "filename": "gcc/config/riscv/iterators.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac96e9068ce7dcaca992fde7f1551ffe8837b723/gcc%2Fconfig%2Friscv%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac96e9068ce7dcaca992fde7f1551ffe8837b723/gcc%2Fconfig%2Friscv%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fiterators.md?ref=ac96e9068ce7dcaca992fde7f1551ffe8837b723", "patch": "@@ -59,9 +59,9 @@\n (define_mode_iterator ANYI [QI HI SI (DI \"TARGET_64BIT\")])\n \n ;; Iterator for hardware-supported floating-point modes.\n-(define_mode_iterator ANYF [(SF \"TARGET_HARD_FLOAT\")\n-\t\t\t    (DF \"TARGET_DOUBLE_FLOAT\")\n-\t\t\t    (HF \"TARGET_ZFH\")])\n+(define_mode_iterator ANYF [(SF \"TARGET_HARD_FLOAT || TARGET_ZFINX\")\n+\t\t\t    (DF \"TARGET_DOUBLE_FLOAT || TARGET_ZDINX\")\n+\t\t\t    (HF \"TARGET_ZFH || TARGET_ZHINX\")])\n \n ;; Iterator for floating-point modes that can be loaded into X registers.\n (define_mode_iterator SOFTF [SF (DF \"TARGET_64BIT\") (HF \"TARGET_ZFHMIN\")])"}, {"sha": "021f6c6b69a6500ee126d81a7c5f2f86022eba6f", "filename": "gcc/config/riscv/riscv-builtins.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac96e9068ce7dcaca992fde7f1551ffe8837b723/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac96e9068ce7dcaca992fde7f1551ffe8837b723/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-builtins.cc?ref=ac96e9068ce7dcaca992fde7f1551ffe8837b723", "patch": "@@ -87,7 +87,7 @@ struct riscv_builtin_description {\n   unsigned int (*avail) (void);\n };\n \n-AVAIL (hard_float, TARGET_HARD_FLOAT)\n+AVAIL (hard_float, TARGET_HARD_FLOAT || TARGET_ZFINX)\n \n \n AVAIL (clean32, TARGET_ZICBOM && !TARGET_64BIT)\n@@ -342,7 +342,7 @@ riscv_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n void\n riscv_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n {\n-  if (!TARGET_HARD_FLOAT)\n+  if (!(TARGET_HARD_FLOAT || TARGET_ZFINX))\n     return;\n \n   tree frflags = GET_BUILTIN_DECL (CODE_FOR_riscv_frflags);"}, {"sha": "826ae0067bb8c5e19c74191520aff96042f777b7", "filename": "gcc/config/riscv/riscv-c.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac96e9068ce7dcaca992fde7f1551ffe8837b723/gcc%2Fconfig%2Friscv%2Friscv-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac96e9068ce7dcaca992fde7f1551ffe8837b723/gcc%2Fconfig%2Friscv%2Friscv-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-c.cc?ref=ac96e9068ce7dcaca992fde7f1551ffe8837b723", "patch": "@@ -61,7 +61,7 @@ riscv_cpu_cpp_builtins (cpp_reader *pfile)\n   if (TARGET_HARD_FLOAT)\n     builtin_define_with_int_value (\"__riscv_flen\", UNITS_PER_FP_REG * 8);\n \n-  if (TARGET_HARD_FLOAT && TARGET_FDIV)\n+  if ((TARGET_HARD_FLOAT || TARGET_ZFINX) && TARGET_FDIV)\n     {\n       builtin_define (\"__riscv_fdiv\");\n       builtin_define (\"__riscv_fsqrt\");"}, {"sha": "798f7370a08fe9c5907758d07cb3f97171e4ca70", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac96e9068ce7dcaca992fde7f1551ffe8837b723/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac96e9068ce7dcaca992fde7f1551ffe8837b723/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=ac96e9068ce7dcaca992fde7f1551ffe8837b723", "patch": "@@ -441,7 +441,7 @@\n   [(set (match_operand:ANYF            0 \"register_operand\" \"=f\")\n \t(plus:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n \t\t   (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fadd.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -572,7 +572,7 @@\n   [(set (match_operand:ANYF             0 \"register_operand\" \"=f\")\n \t(minus:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n \t\t    (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fsub.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -742,7 +742,7 @@\n   [(set (match_operand:ANYF               0 \"register_operand\" \"=f\")\n \t(mult:ANYF (match_operand:ANYF    1 \"register_operand\" \" f\")\n \t\t      (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT  || TARGET_ZFINX\"\n   \"fmul.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1049,7 +1049,7 @@\n   [(set (match_operand:ANYF           0 \"register_operand\" \"=f\")\n \t(div:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n \t\t  (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FDIV\"\n+  \"(TARGET_HARD_FLOAT || TARGET_ZFINX) && TARGET_FDIV\"\n   \"fdiv.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1064,7 +1064,7 @@\n (define_insn \"sqrt<mode>2\"\n   [(set (match_operand:ANYF            0 \"register_operand\" \"=f\")\n \t(sqrt:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT && TARGET_FDIV\"\n+  \"(TARGET_HARD_FLOAT || TARGET_ZFINX) && TARGET_FDIV\"\n {\n     return \"fsqrt.<fmt>\\t%0,%1\";\n }\n@@ -1079,7 +1079,7 @@\n \t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n \t\t  (match_operand:ANYF 2 \"register_operand\" \" f\")\n \t\t  (match_operand:ANYF 3 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fmadd.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1090,7 +1090,7 @@\n \t(fma:ANYF (match_operand:ANYF           1 \"register_operand\" \" f\")\n \t\t  (match_operand:ANYF           2 \"register_operand\" \" f\")\n \t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \" f\"))))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT  || TARGET_ZFINX\"\n   \"fmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1102,7 +1102,7 @@\n \t    (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\"))\n \t    (match_operand:ANYF           2 \"register_operand\" \" f\")\n \t    (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \" f\"))))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT  || TARGET_ZFINX\"\n   \"fnmadd.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1114,7 +1114,7 @@\n \t    (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\"))\n \t    (match_operand:ANYF           2 \"register_operand\" \" f\")\n \t    (match_operand:ANYF           3 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fnmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1127,7 +1127,7 @@\n \t\t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\"))\n \t\t(match_operand:ANYF           2 \"register_operand\" \" f\")\n \t\t(neg:ANYF (match_operand:ANYF 3 \"register_operand\" \" f\")))))]\n-  \"TARGET_HARD_FLOAT && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+  \"(TARGET_HARD_FLOAT || TARGET_ZFINX) && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"fmadd.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1140,7 +1140,7 @@\n \t\t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\"))\n \t\t(match_operand:ANYF           2 \"register_operand\" \" f\")\n \t\t(match_operand:ANYF           3 \"register_operand\" \" f\"))))]\n-  \"TARGET_HARD_FLOAT && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+  \"(TARGET_HARD_FLOAT || TARGET_ZFINX) && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"fmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1153,7 +1153,7 @@\n \t\t(match_operand:ANYF 1 \"register_operand\" \" f\")\n \t\t(match_operand:ANYF 2 \"register_operand\" \" f\")\n \t\t(match_operand:ANYF 3 \"register_operand\" \" f\"))))]\n-  \"TARGET_HARD_FLOAT && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+  \"(TARGET_HARD_FLOAT || TARGET_ZFINX) && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"fnmadd.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1166,7 +1166,7 @@\n \t\t(match_operand:ANYF           1 \"register_operand\" \" f\")\n \t\t(match_operand:ANYF           2 \"register_operand\" \" f\")\n \t\t(neg:ANYF (match_operand:ANYF 3 \"register_operand\" \" f\")))))]\n-  \"TARGET_HARD_FLOAT && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n+  \"(TARGET_HARD_FLOAT || TARGET_ZFINX) && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"fnmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1181,7 +1181,7 @@\n (define_insn \"abs<mode>2\"\n   [(set (match_operand:ANYF           0 \"register_operand\" \"=f\")\n \t(abs:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fabs.<fmt>\\t%0,%1\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1191,15 +1191,15 @@\n \t(unspec:ANYF [(match_operand:ANYF 1 \"register_operand\" \" f\")\n \t\t      (match_operand:ANYF 2 \"register_operand\" \" f\")]\n \t\t     UNSPEC_COPYSIGN))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fsgnj.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"neg<mode>2\"\n   [(set (match_operand:ANYF           0 \"register_operand\" \"=f\")\n \t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fneg.<fmt>\\t%0,%1\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1216,7 +1216,7 @@\n \t(unspec:ANYF [(use (match_operand:ANYF 1 \"register_operand\" \" f\"))\n \t\t      (use (match_operand:ANYF 2 \"register_operand\" \" f\"))]\n \t\t     UNSPEC_FMIN))]\n-  \"TARGET_HARD_FLOAT && !HONOR_SNANS (<MODE>mode)\"\n+  \"(TARGET_HARD_FLOAT || TARGET_ZFINX) && !HONOR_SNANS (<MODE>mode)\"\n   \"fmin.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1226,7 +1226,7 @@\n \t(unspec:ANYF [(use (match_operand:ANYF 1 \"register_operand\" \" f\"))\n \t\t      (use (match_operand:ANYF 2 \"register_operand\" \" f\"))]\n \t\t     UNSPEC_FMAX))]\n-  \"TARGET_HARD_FLOAT && !HONOR_SNANS (<MODE>mode)\"\n+  \"(TARGET_HARD_FLOAT || TARGET_ZFINX) && !HONOR_SNANS (<MODE>mode)\"\n   \"fmax.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1235,7 +1235,7 @@\n   [(set (match_operand:ANYF            0 \"register_operand\" \"=f\")\n \t(smin:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n \t\t   (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fmin.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1244,7 +1244,7 @@\n   [(set (match_operand:ANYF            0 \"register_operand\" \"=f\")\n \t(smax:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n \t\t   (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fmax.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -1305,7 +1305,7 @@\n   [(set (match_operand:SF     0 \"register_operand\" \"=f\")\n \t(float_truncate:SF\n \t    (match_operand:DF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_DOUBLE_FLOAT || TARGET_ZDINX\"\n   \"fcvt.s.d\\t%0,%1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"SF\")])\n@@ -1314,7 +1314,7 @@\n   [(set (match_operand:HF     0 \"register_operand\" \"=f\")\n        (float_truncate:HF\n            (match_operand:SF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_ZFHMIN\"\n+  \"TARGET_ZFHMIN || TARGET_ZHINXMIN\"\n   \"fcvt.h.s\\t%0,%1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"HF\")])\n@@ -1323,7 +1323,8 @@\n   [(set (match_operand:HF     0 \"register_operand\" \"=f\")\n        (float_truncate:HF\n            (match_operand:DF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_ZFHMIN && TARGET_DOUBLE_FLOAT\"\n+  \"(TARGET_ZFHMIN && TARGET_DOUBLE_FLOAT) ||\n+   (TARGET_ZHINXMIN && TARGET_ZDINX)\"\n   \"fcvt.h.d\\t%0,%1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"HF\")])\n@@ -1449,7 +1450,7 @@\n   [(set (match_operand:SF     0 \"register_operand\" \"=f\")\n        (float_extend:SF\n            (match_operand:HF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_ZFHMIN\"\n+  \"TARGET_ZFHMIN || TARGET_ZHINXMIN\"\n   \"fcvt.s.h\\t%0,%1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"SF\")])\n@@ -1458,7 +1459,7 @@\n   [(set (match_operand:DF     0 \"register_operand\" \"=f\")\n \t(float_extend:DF\n \t    (match_operand:SF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_DOUBLE_FLOAT || TARGET_ZDINX\"\n   \"fcvt.d.s\\t%0,%1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"DF\")])\n@@ -1467,7 +1468,8 @@\n   [(set (match_operand:DF     0 \"register_operand\" \"=f\")\n        (float_extend:DF\n            (match_operand:HF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_ZFHMIN && TARGET_DOUBLE_FLOAT\"\n+  \"(TARGET_ZFHMIN && TARGET_DOUBLE_FLOAT) ||\n+   (TARGET_ZHINXMIN && TARGET_ZDINX)\"\n   \"fcvt.d.h\\t%0,%1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"DF\")])\n@@ -1513,7 +1515,7 @@\n   [(set (match_operand:GPR      0 \"register_operand\" \"=r\")\n \t(fix:GPR\n \t    (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fcvt.<GPR:ifmt>.<ANYF:fmt> %0,%1,rtz\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n@@ -1522,7 +1524,7 @@\n   [(set (match_operand:GPR      0 \"register_operand\" \"=r\")\n \t(unsigned_fix:GPR\n \t    (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT  || TARGET_ZFINX\"\n   \"fcvt.<GPR:ifmt>u.<ANYF:fmt> %0,%1,rtz\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n@@ -1531,7 +1533,7 @@\n   [(set (match_operand:ANYF    0 \"register_operand\" \"= f\")\n \t(float:ANYF\n \t    (match_operand:GPR 1 \"reg_or_0_operand\" \" rJ\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fcvt.<ANYF:fmt>.<GPR:ifmt>\\t%0,%z1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n@@ -1540,7 +1542,7 @@\n   [(set (match_operand:ANYF    0 \"register_operand\" \"= f\")\n \t(unsigned_float:ANYF\n \t    (match_operand:GPR 1 \"reg_or_0_operand\" \" rJ\")))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fcvt.<ANYF:fmt>.<GPR:ifmt>u\\t%0,%z1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n@@ -1550,7 +1552,7 @@\n \t(unspec:GPR\n \t    [(match_operand:ANYF 1 \"register_operand\" \" f\")]\n \t    RINT))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fcvt.<GPR:ifmt>.<ANYF:fmt> %0,%1,<rint_rm>\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n@@ -2278,7 +2280,7 @@\n \t\t\t(match_operand:ANYF 2 \"register_operand\")])\n \t\t      (label_ref (match_operand 3 \"\"))\n \t\t      (pc)))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n {\n   riscv_expand_conditional_branch (operands[3], GET_CODE (operands[0]),\n \t\t\t\t   operands[1], operands[2]);\n@@ -2367,7 +2369,7 @@\n \t(match_operator:SI 1 \"fp_scc_comparison\"\n \t     [(match_operand:ANYF 2 \"register_operand\")\n \t      (match_operand:ANYF 3 \"register_operand\")]))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n {\n   riscv_expand_float_scc (operands[0], GET_CODE (operands[1]), operands[2],\n \t\t\t  operands[3]);\n@@ -2379,7 +2381,7 @@\n \t (match_operator:X 1 \"fp_native_comparison\"\n \t     [(match_operand:ANYF 2 \"register_operand\" \" f\")\n \t      (match_operand:ANYF 3 \"register_operand\" \" f\")]))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"f%C1.<fmt>\\t%0,%2,%3\"\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n@@ -2389,7 +2391,7 @@\n \t (unspec:X [(match_operand:ANYF 1 \"register_operand\")\n \t\t    (match_operand:ANYF 2 \"register_operand\")]\n \t\t   QUIET_COMPARISON))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n {\n   rtx op0 = operands[0];\n   rtx op1 = operands[1];\n@@ -2809,19 +2811,19 @@\n (define_insn \"riscv_frflags\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec_volatile [(const_int 0)] UNSPECV_FRFLAGS))]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"frflags\\t%0\")\n \n (define_insn \"riscv_fsflags\"\n   [(unspec_volatile [(match_operand:SI 0 \"csr_operand\" \"rK\")] UNSPECV_FSFLAGS)]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"fsflags\\t%0\")\n \n (define_insn \"*riscv_fsnvsnan<mode>2\"\n   [(unspec_volatile [(match_operand:ANYF 0 \"register_operand\" \"f\")\n \t\t     (match_operand:ANYF 1 \"register_operand\" \"f\")]\n \t\t    UNSPECV_FSNVSNAN)]\n-  \"TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT || TARGET_ZFINX\"\n   \"feq.<fmt>\\tzero,%0,%1\"\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"<UNITMODE>\")])"}]}