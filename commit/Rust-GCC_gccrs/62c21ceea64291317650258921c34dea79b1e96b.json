{"sha": "62c21ceea64291317650258921c34dea79b1e96b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJjMjFjZWVhNjQyOTEzMTc2NTAyNTg5MjFjMzRkZWE3OWIxZTk2Yg==", "commit": {"author": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-09-05T21:17:47Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-09-05T21:17:47Z"}, "message": "PR c++/87109, wrong overload with ref-qualifiers.\n\n\t* call.c (build_user_type_conversion_1): Use NULL instead of 0.  Bail\n\tout if performing the maybe-rvalue overload resolution and a conversion\n\tfunction is getting called.\n\n\t* g++.dg/cpp0x/ref-qual19.C: New test.\n\nFrom-SVN: r264132", "tree": {"sha": "fd16f085a85e12e1a1f4de48c05682914012a593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd16f085a85e12e1a1f4de48c05682914012a593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62c21ceea64291317650258921c34dea79b1e96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c21ceea64291317650258921c34dea79b1e96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c21ceea64291317650258921c34dea79b1e96b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c21ceea64291317650258921c34dea79b1e96b/comments", "author": null, "committer": null, "parents": [{"sha": "f6b95f78f8048e2fe726b6caf91d606f36f4d8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b95f78f8048e2fe726b6caf91d606f36f4d8c4"}], "stats": {"total": 139, "additions": 137, "deletions": 2}, "files": [{"sha": "b4ec9f4b449500d323d903620ce2e73254cd87b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c21ceea64291317650258921c34dea79b1e96b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c21ceea64291317650258921c34dea79b1e96b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62c21ceea64291317650258921c34dea79b1e96b", "patch": "@@ -1,4 +1,11 @@\n-2018-09-05   P\u00e1draig Brady p@draigbrady.com\n+2018-09-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87109, wrong overload with ref-qualifiers.\n+\t* call.c (build_user_type_conversion_1): Use NULL instead of 0.  Bail\n+\tout if performing the maybe-rvalue overload resolution and a conversion\n+\tfunction is getting called.\n+\n+2018-09-05  P\u00e1draig Brady  <p@draigbrady.com>\n \n \tPR c++/87185\n \t* lambda.c (prune_lambda_captures): Protect against const_vars.get"}, {"sha": "942b2c204be32facab649dcc1a689b6c1e1223de", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c21ceea64291317650258921c34dea79b1e96b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c21ceea64291317650258921c34dea79b1e96b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=62c21ceea64291317650258921c34dea79b1e96b", "patch": "@@ -3971,7 +3971,7 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags,\n     }\n \n   cand = tourney (candidates, complain);\n-  if (cand == 0)\n+  if (cand == NULL)\n     {\n       if (complain & tf_error)\n \t{\n@@ -4014,6 +4014,12 @@ build_user_type_conversion_1 (tree totype, tree expr, int flags,\n   if (cand->viable == -1)\n     conv->bad_p = true;\n \n+  /* We're performing the maybe-rvalue overload resolution and\n+     a conversion function is in play.  This isn't going to work\n+     because we would not end up with a suitable constructor.  */\n+  if ((flags & LOOKUP_PREFER_RVALUE) && !DECL_CONSTRUCTOR_P (cand->fn))\n+    return NULL;\n+\n   /* Remember that this was a list-initialization.  */\n   if (flags & LOOKUP_NO_NARROWING)\n     conv->check_narrowing = true;"}, {"sha": "a736ccf999a2aafd2c12eeb893db81ed6299f94b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c21ceea64291317650258921c34dea79b1e96b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c21ceea64291317650258921c34dea79b1e96b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62c21ceea64291317650258921c34dea79b1e96b", "patch": "@@ -1,3 +1,8 @@\n+2018-09-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87109, wrong overload with ref-qualifiers.\n+\t* g++.dg/cpp0x/ref-qual19.C: New test.\n+\n 2018-09-05  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \tPR testsuite/52665"}, {"sha": "8494b83e5b087c9d65014aa189115ec5af6a2204", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-qual19.C", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c21ceea64291317650258921c34dea79b1e96b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c21ceea64291317650258921c34dea79b1e96b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual19.C?ref=62c21ceea64291317650258921c34dea79b1e96b", "patch": "@@ -0,0 +1,117 @@\n+// PR c++/87109\n+// { dg-do run { target c++11 } }\n+\n+#include <utility>\n+\n+struct C { int i; };\n+struct D { int i; };\n+\n+struct A {\n+  int j;\n+  operator C() & { return { 1 }; }\n+  operator C() && { return { 2 }; }\n+};\n+\n+struct B : public A {\n+  operator D() & { return { 3 }; }\n+  operator D() && { return { 4 }; }\n+};\n+\n+C\n+f (A a)\n+{\n+  return a;\n+}\n+\n+C\n+f2 (A a)\n+{\n+  return std::move (a);\n+}\n+\n+C\n+f3 ()\n+{\n+  A a;\n+  return a;\n+}\n+\n+C\n+f4 ()\n+{\n+  A a;\n+  return std::move (a);\n+}\n+\n+C\n+f5 ()\n+{\n+  return A();\n+}\n+\n+D\n+f6 (B b)\n+{\n+  return b;\n+}\n+\n+D\n+f7 (B b)\n+{\n+  return std::move (b);\n+}\n+\n+D\n+f8 ()\n+{\n+  B b;\n+  return b;\n+}\n+\n+D\n+f9 ()\n+{\n+  B b;\n+  return std::move (b);\n+}\n+\n+D\n+f10 ()\n+{\n+  return B();\n+}\n+\n+int\n+main ()\n+{\n+  C c1 = f (A());\n+  if (c1.i != 1)\n+    __builtin_abort ();\n+  C c2 = f2 (A());\n+  if (c2.i != 2)\n+    __builtin_abort ();\n+  C c3 = f3 ();\n+  if (c3.i != 1)\n+    __builtin_abort ();\n+  C c4 = f4 ();\n+  if (c4.i != 2)\n+    __builtin_abort ();\n+  C c5 = f5 ();\n+  if (c5.i != 2)\n+    __builtin_abort ();\n+  D c6 = f6 (B());\n+  if (c6.i != 3)\n+    __builtin_abort ();\n+  D c7 = f7 (B());\n+  if (c7.i != 4)\n+    __builtin_abort ();\n+  D c8 = f8 ();\n+  if (c8.i != 3)\n+    __builtin_abort ();\n+  D c9 = f9 ();\n+  if (c9.i != 4)\n+    __builtin_abort ();\n+  D c10 = f10 ();\n+  if (c10.i != 4)\n+    __builtin_abort ();\n+}"}]}