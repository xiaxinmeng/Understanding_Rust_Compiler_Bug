{"sha": "688a7a07d762cd331c6240593eb23d012c61f1b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4YTdhMDdkNzYyY2QzMzFjNjI0MDU5M2ViMjNkMDEyYzYxZjFiMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-26T17:55:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-26T17:55:23Z"}, "message": "stl_algo.h (partition_copy): Add in C++0x mode.\n\n2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (partition_copy): Add in C++0x mode.\n\t* include/bits/algorithmfwd.h: Add.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n\t* testsuite/25_algorithms/partition_copy/1.cc: New.\n\t* testsuite/25_algorithms/partition_copy/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/partition_copy/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/partition_copy/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\nFrom-SVN: r137152", "tree": {"sha": "1c4caf3fd38193fd4ed6f52a12b82e0bb8121180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c4caf3fd38193fd4ed6f52a12b82e0bb8121180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/688a7a07d762cd331c6240593eb23d012c61f1b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688a7a07d762cd331c6240593eb23d012c61f1b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688a7a07d762cd331c6240593eb23d012c61f1b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688a7a07d762cd331c6240593eb23d012c61f1b0/comments", "author": null, "committer": null, "parents": [{"sha": "99e782246cdb210e6c6a0b5a58803e108bb1472e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e782246cdb210e6c6a0b5a58803e108bb1472e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e782246cdb210e6c6a0b5a58803e108bb1472e"}], "stats": {"total": 392, "additions": 377, "deletions": 15}, "files": [{"sha": "87331b9b56e2ada7d8abf0d8abaa627c4785317d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=688a7a07d762cd331c6240593eb23d012c61f1b0", "patch": "@@ -1,3 +1,15 @@\n+2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (partition_copy): Add in C++0x mode.\n+\t* include/bits/algorithmfwd.h: Add.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n+\t* testsuite/25_algorithms/partition_copy/1.cc: New.\n+\t* testsuite/25_algorithms/partition_copy/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/partition_copy/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/partition_copy/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\n 2008-06-26  Chris Fairles  <chris.fairles@gmail.com>\n \n         * testsuite/20_util/unique_ptr/cons/pointer_array.cc: New."}, {"sha": "fa4e72cd412c53213ce9233acfaac58c089316ac", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=688a7a07d762cd331c6240593eb23d012c61f1b0", "patch": "@@ -25,9 +25,12 @@\n \n /*\n   adjacent_find\n+  all_of (C++0x)\n+  any_of (C++0x)\n   binary_search\n   copy\n   copy_backward\n+  copy_if (C++0x)\n   count\n   count_if\n   equal\n@@ -38,6 +41,7 @@\n   find_end\n   find_first_of\n   find_if\n+  find_if_not (C++0x)\n   for_each\n   generate\n   generate_n\n@@ -60,10 +64,12 @@\n   minmax_element (C++0x)\n   mismatch\n   next_permutation\n+  none_of (C++0x)\n   nth_element\n   partial_sort\n   partial_sort_copy\n   partition\n+  partition_copy (C++0x)\n   pop_heap\n   prev_permutation\n   push_heap\n@@ -111,6 +117,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // adjacent_find\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    all_of(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    any_of(_IIter, _IIter, _Predicate);\n+#endif\n+\n   template<typename _FIter, typename _Tp>\n     bool \n     binary_search(_FIter, _FIter, const _Tp&);\n@@ -127,6 +143,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _BIter2\n     copy_backward(_BIter1, _BIter1, _BIter2);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _IIter, typename _OIter, typename _Predicate>\n+    _OIter\n+    copy_if(_IIter, _IIter, _OIter, _Predicate);\n+#endif\n+\n   // count\n   // count_if\n \n@@ -165,28 +187,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // find_first_of\n   // find_if\n-  // for_each\n-  // generate\n-  // generate_n\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  template<typename _IIter, typename _Predicate>\n-    bool\n-    all_of(_IIter, _IIter, _Predicate);\n-\n-  template<typename _IIter, typename _Predicate>\n-    bool\n-    any_of(_IIter, _IIter, _Predicate);\n-\n-  template<typename _IIter, typename _Predicate>\n-    bool\n-    none_of(_IIter, _IIter, _Predicate);\n-\n   template<typename _IIter, typename _Predicate>\n     _IIter\n     find_if_not(_IIter, _IIter, _Predicate);\n #endif\n \n+  // for_each\n+  // generate\n+  // generate_n\n+\n   template<typename _IIter1, typename _IIter2>\n     bool \n     includes(_IIter1, _IIter1, _IIter2, _IIter2);\n@@ -306,6 +317,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     bool \n     next_permutation(_BIter, _BIter, _Compare);\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _IIter, typename _Predicate>\n+    bool\n+    none_of(_IIter, _IIter, _Predicate);\n+#endif\n+\n   // nth_element\n   // partial_sort\n \n@@ -317,6 +334,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     _RAIter\n     partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);\n \n+  // partition\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename _IIter, typename _OIter1,\n+\t   typename _OIter2, typename _Predicate>\n+    pair<_OIter1, _OIter2>\n+    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);\n+#endif\n+\n   template<typename _RAIter>\n     void \n     pop_heap(_RAIter, _RAIter);"}, {"sha": "43b0582db74b434c8eefcc46f4254ecd82f7fa79", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=688a7a07d762cd331c6240593eb23d012c61f1b0", "patch": "@@ -911,6 +911,52 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  }\n       return __result;\n     }\n+\n+  /**\n+   *  @brief Copy the elements of a sequence to separate output sequences\n+   *         depending on the truth value of a predicate.\n+   *  @param  first   An input iterator.\n+   *  @param  last    An input iterator.\n+   *  @param  out_true   An output iterator.\n+   *  @param  out_false  An output iterator.\n+   *  @param  pred    A predicate.\n+   *  @return   A pair designating the ends of the resulting sequences.\n+   *\n+   *  Copies each element in the range @p [first,last) for which\n+   *  @p pred returns true to the range beginning at @p out_true\n+   *  and each element for which @p pred returns false to @p out_false.\n+  */\n+  template<typename _InputIterator, typename _OutputIterator1,\n+\t   typename _OutputIterator2, typename _Predicate>\n+    pair<_OutputIterator1, _OutputIterator2>\n+    partition_copy(_InputIterator __first, _InputIterator __last,\n+\t\t   _OutputIterator1 __out_true, _OutputIterator2 __out_false,\n+\t\t   _Predicate __pred)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator1,\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator2,\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n+\t    typename iterator_traits<_InputIterator>::value_type>)\n+      __glibcxx_requires_valid_range(__first, __last);\n+      \n+      for (; __first != __last; ++__first)\n+\tif (__pred(*__first))\n+\t  {\n+\t    *__out_true = *__first;\n+\t    ++__out_true;\n+\t  }\n+\telse\n+\t  {\n+\t    *__out_false = *__first;\n+\t    ++__out_false;\n+\t  }\n+\n+      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);\n+    }\n #endif\n \n   /**"}, {"sha": "c52c779c1edf55fb0d2194f51ff7072b0bbf29f6", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=688a7a07d762cd331c6240593eb23d012c61f1b0", "patch": "@@ -208,6 +208,11 @@ namespace std\n   template<typename _IIter, typename _OIter, typename _Predicate>\n     _OIter \n     copy_if(_IIter, _IIter, _OIter, _Predicate);\n+\n+  template<typename _IIter, typename _OIter1,\n+\t   typename _OIter2, typename _Predicate>\n+    pair<_OIter1, _OIter2>\n+    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);\n #endif\n \n   template<typename _FIter>"}, {"sha": "94fbf885b0af497c12c166edcd9fb1136d839837", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/1.cc", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2F1.cc?ref=688a7a07d762cd331c6240593eb23d012c61f1b0", "patch": "@@ -0,0 +1,107 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer; \n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+int array[] = {0, 5, 2, 1, 3, 4};\n+\n+bool\n+pred(int i)\n+{ return i > 2; }\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int true_out[1] = { -1 };\n+  int false_out[1] = { -1 };\n+  Icontainer in_con(array, array);\n+  Ocontainer true_out_con(true_out, true_out);\n+  Ocontainer false_out_con(false_out, false_out);\n+\n+  std::pair<output_iterator_wrapper<int>, output_iterator_wrapper<int> > res =\n+    std::partition_copy(in_con.begin(), in_con.end(), \n+\t\t\ttrue_out_con.begin(), false_out_con.begin(), pred);\n+  \n+  VERIFY( res.first.ptr == true_out );\n+  VERIFY( res.second.ptr == false_out );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int true_out[1] = { -1 };\n+  int false_out[1] = { -1 };\n+  Icontainer in_con(array, array + 2);\n+  Ocontainer true_out_con(true_out, true_out + 1);\n+  Ocontainer false_out_con(false_out, false_out + 1);\n+\n+  std::pair<output_iterator_wrapper<int>, output_iterator_wrapper<int> > res =\n+    std::partition_copy(in_con.begin(), in_con.end(), \n+\t\t\ttrue_out_con.begin(), false_out_con.begin(), pred);\n+\n+  VERIFY( res.first.ptr == true_out + 1 );\n+  VERIFY( res.second.ptr == false_out + 1 );\n+  VERIFY( true_out[0] == 5 );\n+  VERIFY( false_out[0] == 0 );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  int true_out[3] = { -1, -1, -1 };\n+  int false_out[3] = { -1, -1, -1 };\n+  Icontainer in_con(array, array + 6);\n+  Ocontainer true_out_con(true_out, true_out + 3);\n+  Ocontainer false_out_con(false_out, false_out + 3);\n+\n+  std::pair<output_iterator_wrapper<int>, output_iterator_wrapper<int> > res =\n+    std::partition_copy(in_con.begin(), in_con.end(), \n+\t\t\ttrue_out_con.begin(), false_out_con.begin(), pred);\n+\n+  VERIFY( res.first.ptr == true_out + 3 );\n+  VERIFY( res.second.ptr == false_out + 3 );\n+  VERIFY( true_out[0] == 5 && true_out[1] == 3 && true_out[2] == 4 );\n+  VERIFY( false_out[0] == 0 && false_out[1] == 2 && false_out[2] == 1 );\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  return 0;\n+}"}, {"sha": "bbcd692ae03dd889aad02c247a4c4240688d49be", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/check_type.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fcheck_type.cc?ref=688a7a07d762cd331c6240593eb23d012c61f1b0", "patch": "@@ -0,0 +1,71 @@\n+// 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct X { };\n+\n+struct Z1\n+{\n+  Z1&\n+  operator=(const X&)\n+  { return *this; }\n+};\n+\n+struct Z2\n+{\n+  Z2&\n+  operator=(const X&)\n+  { return *this; }\n+};\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+std::pair<output_iterator_wrapper<Z1>, output_iterator_wrapper<Z2> >\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end,\n+      output_iterator_wrapper<Z1>& true_output,\n+      output_iterator_wrapper<Z2>& false_output)\n+{ return std::partition_copy(begin, end, true_output, false_output,\n+\t\t\t     pred_function); }\n+\n+std::pair<output_iterator_wrapper<Z1>, output_iterator_wrapper<Z2> >\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end,\n+      output_iterator_wrapper<Z1>& true_output,\n+      output_iterator_wrapper<Z2>& false_output)\n+{ return std::partition_copy(begin, end, true_output, false_output,\n+\t\t\t     pred_obj()); }"}, {"sha": "d4cb99adbcbdfdcc7b1284aff33fc365fe381851", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=688a7a07d762cd331c6240593eb23d012c61f1b0", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template pair<iterator_type, iterator_type>\n+    partition_copy(iterator_type, iterator_type,\n+\t\t   iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "5d396eb02c10bae07e44babb1fe776c044fb148a", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688a7a07d762cd331c6240593eb23d012c61f1b0/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=688a7a07d762cd331c6240593eb23d012c61f1b0", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template pair<iterator_type, iterator_type>\n+    partition_copy(iterator_type, iterator_type, \n+\t\t   iterator_type, iterator_type, predicate_type);\n+} "}]}