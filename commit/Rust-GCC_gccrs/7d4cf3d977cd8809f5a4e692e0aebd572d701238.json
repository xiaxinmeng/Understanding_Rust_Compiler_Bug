{"sha": "7d4cf3d977cd8809f5a4e692e0aebd572d701238", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q0Y2YzZDk3N2NkODgwOWY1YTRlNjkyZTBhZWJkNTcyZDcwMTIzOA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2008-05-17T22:28:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-05-17T22:28:51Z"}, "message": "intrinsic.texi: Correct description of GET_COMMAND_ARGUMENT and GET_ENVIRONMENT_VARIABLE...\n\n2008-05-16  Tobias Burnus  <burnus@net-b.de>\n\n        * intrinsic.texi: Correct description of GET_COMMAND_ARGUMENT\n        and GET_ENVIRONMENT_VARIABLE; fix keyword= name for GETENV,\n        GETLOG, GMTIME, HOSTNM, IRAND, ITIME, KILL.\n        Move LOG_GAMMA after LOG10.\n\nFrom-SVN: r135482", "tree": {"sha": "8aced7d11541eba5df5f6fed7624fbbf690565a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aced7d11541eba5df5f6fed7624fbbf690565a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d4cf3d977cd8809f5a4e692e0aebd572d701238", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4cf3d977cd8809f5a4e692e0aebd572d701238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4cf3d977cd8809f5a4e692e0aebd572d701238", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4cf3d977cd8809f5a4e692e0aebd572d701238/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51407486c46cd3c666f9c4e420368ef9e6992c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51407486c46cd3c666f9c4e420368ef9e6992c4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51407486c46cd3c666f9c4e420368ef9e6992c4a"}], "stats": {"total": 225, "additions": 124, "deletions": 101}, "files": [{"sha": "38cdafc6eaa343085e3c28d9bd1b9baaa4296682", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4cf3d977cd8809f5a4e692e0aebd572d701238/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4cf3d977cd8809f5a4e692e0aebd572d701238/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7d4cf3d977cd8809f5a4e692e0aebd572d701238", "patch": "@@ -1,3 +1,10 @@\n+2008-05-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* intrinsic.texi: Correct description of GET_COMMAND_ARGUMENT\n+\tand GET_ENVIRONMENT_VARIABLE; fix keyword= name for GETENV,\n+\tGETLOG, GMTIME, HOSTNM, IRAND, ITIME, KILL.\n+\tMove LOG_GAMMA after LOG10.\n+\n 2008-05-16  Tobias Burnus  <burnus@net-b.de>\n \n \t* intrinsic.c (add_functions): Change FLUSH(C) to FLUSH(UNIT)."}, {"sha": "e8f98dfa469962fe5c4a14ea1bb4641d6a985945", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 117, "deletions": 101, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d4cf3d977cd8809f5a4e692e0aebd572d701238/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d4cf3d977cd8809f5a4e692e0aebd572d701238/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=7d4cf3d977cd8809f5a4e692e0aebd572d701238", "patch": "@@ -4788,7 +4788,7 @@ END PROGRAM\n \n @table @asis\n @item @emph{Description}:\n-Retrieve the @var{N}th argument that was passed on the\n+Retrieve the @var{NUMBER}-th argument that was passed on the\n command line when the containing program was invoked.\n \n @item @emph{Standard}:\n@@ -4798,21 +4798,26 @@ Fortran 2003 and later\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GET_COMMAND_ARGUMENT(N, ARG)}\n+@code{CALL GET_COMMAND_ARGUMENT(NUMBER [, VALUE, LENGTH, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{N}   @tab Shall be of type @code{INTEGER(4)}, @math{@var{N} \\geq 0}\n-@item @var{ARG} @tab Shall be of type @code{CHARACTER}. \n+@item @var{NUMBER} @tab Shall be a scalar of type @code{INTEGER(4)}, @math{@var{N} \\geq 0}.\n+@item @var{VALUE}  @tab (Option) Shall be a scalar of type @code{CHARACTER(1)}. \n+@item @var{LENGTH} @tab (Option) Shall be a scalar of type @code{INTEGER(4)}. \n+@item @var{STATUS} @tab (Option) Shall be a scalar of type @code{INTEGER(4)}. \n @end multitable\n \n @item @emph{Return value}:\n-After @code{GET_COMMAND_ARGUMENT} returns, the @var{ARG} argument holds the \n-@var{N}th command line argument. If @var{ARG} can not hold the argument, it is \n-truncated to fit the length of @var{ARG}. If there are less than @var{N}\n-arguments specified at the command line, @var{ARG} will be filled with blanks. \n-If @math{@var{N} = 0}, @var{ARG} is set to the name of the program (on systems\n-that support this feature).\n+After @code{GET_COMMAND_ARGUMENT} returns, the @var{VALUE} argument holds the \n+@var{NUMBER}-th command line argument. If @var{VALUE} can not hold the argument, it is \n+truncated to fit the length of @var{VALUE}. If there are less than @var{NUMBER}\n+arguments specified at the command line, @var{VALUE} will be filled with blanks. \n+If @math{@var{NUMBER} = 0}, @var{VALUE} is set to the name of the program (on systems\n+that support this feature). The @var{LENGTH} argument contains the length of the\n+@var{NUMBER}-th command line argument. If the argument retrival fails, @var{STATUS}\n+is a positiv number; if @var{VALUE} contains a truncated command line argument,\n+@var{STATUS} is -1; and otherwise the @var{STATUS} is zero.\n \n @item @emph{Example}:\n @smallexample\n@@ -4856,11 +4861,11 @@ GNU extension\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL GETCWD(CWD [, STATUS])}\n+@code{CALL GETCWD(C [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{CWD}    @tab The type shall be @code{CHARACTER}.\n+@item @var{C}      @tab The type shall be @code{CHARACTER}.\n @item @var{STATUS} @tab (Optional) status flag. Returns 0 on success, \n                         a system specific and nonzero error code otherwise.\n @end multitable\n@@ -4887,7 +4892,7 @@ END PROGRAM\n \n @table @asis\n @item @emph{Description}:\n-Get the @var{VALUE} of the environmental variable @var{ENVVAR}.\n+Get the @var{VALUE} of the environmental variable @var{NAME}.\n \n This intrinsic routine is provided for backwards compatibility with \n GNU Fortran 77.  In new code, programmers should consider the use of \n@@ -4901,17 +4906,17 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GETENV(ENVVAR, VALUE)}\n+@code{CALL GETENV(NAME, VALUE)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{ENVVAR} @tab Shall be of type @code{CHARACTER}. \n+@item @var{NAME}   @tab Shall be of type @code{CHARACTER}. \n @item @var{VALUE}  @tab Shall be of type @code{CHARACTER}. \n @end multitable\n \n @item @emph{Return value}:\n-Stores the value of @var{ENVVAR} in @var{VALUE}. If @var{VALUE} is \n-not large enough to hold the data, it is truncated. If @var{ENVVAR}\n+Stores the value of @var{NAME} in @var{VALUE}. If @var{VALUE} is \n+not large enough to hold the data, it is truncated. If @var{NAME}\n is not set, @var{VALUE} will be filled with blanks.\n \n @item @emph{Example}:\n@@ -4936,7 +4941,7 @@ END PROGRAM\n \n @table @asis\n @item @emph{Description}:\n-Get the @var{VALUE} of the environmental variable @var{ENVVAR}.\n+Get the @var{VALUE} of the environmental variable @var{NAME}.\n \n @item @emph{Standard}:\n Fortran 2003 and later\n@@ -4945,18 +4950,29 @@ Fortran 2003 and later\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GET_ENVIRONMENT_VARIABLE(ENVVAR, VALUE)}\n+@code{CALL GET_ENVIRONMENT_VARIABLE(NAME[, VALUE, LENGTH, STATUS, TRIM_NAME)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{ENVVAR} @tab Shall be of type @code{CHARACTER}. \n-@item @var{VALUE}  @tab Shall be of type @code{CHARACTER}. \n+@item @var{NAME}      @tab Shall be a scalar of type @code{CHARACTER(1)}. \n+@item @var{VALUE}     @tab Shall be a scalar of type @code{CHARACTER(1)}. \n+@item @var{LENGTH}    @tab Shall be a scalar of type @code{INTEGER(4)}. \n+@item @var{STATUS}    @tab Shall be a scalar of type @code{INTEGER(4)}. \n+@item @var{TRIM_NAME} @tab Shall be a scalar of type @code{LOGICAL(4)}. \n @end multitable\n \n @item @emph{Return value}:\n-Stores the value of @var{ENVVAR} in @var{VALUE}. If @var{VALUE} is \n-not large enough to hold the data, it is truncated. If @var{ENVVAR}\n-is not set, @var{VALUE} will be filled with blanks.\n+Stores the value of @var{NAME} in @var{VALUE}. If @var{VALUE} is \n+not large enough to hold the data, it is truncated. If @var{NAME}\n+is not set, @var{VALUE} will be filled with blanks. Argument @var{LENGTH}\n+contains the length needed for storing the environment variable @var{NAME}\n+or zero if it is not present. @var{STATUS} is -1 if @var{VALUE} is present\n+but too short for the environment variable; it is 1 if the environment\n+variable does not exist and 2 if the processor does not support environment\n+variables; in all other cases @var{STATUS} is zero. If @var{TRIM_NAME} is\n+present with the value @code{.FALSE.}, the trailing blanks in @var{NAME}\n+are significant; otherwise they are not part of the environment variable\n+name.\n \n @item @emph{Example}:\n @smallexample\n@@ -5019,11 +5035,11 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GETLOG(LOGIN)}\n+@code{CALL GETLOG(C)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{LOGIN} @tab Shall be of type @code{CHARACTER}.\n+@item @var{C} @tab Shall be of type @code{CHARACTER}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -5126,8 +5142,8 @@ See @code{GETPID} for an example.\n \n @table @asis\n @item @emph{Description}:\n-Given a system time value @var{STIME} (as provided by the @code{TIME8()}\n-intrinsic), fills @var{TARRAY} with values extracted from it appropriate\n+Given a system time value @var{TIME} (as provided by the @code{TIME8()}\n+intrinsic), fills @var{VALUES} with values extracted from it appropriate\n to the UTC time zone (Universal Coordinated Time, also known in some\n countries as GMT, Greenwich Mean Time), using @code{gmtime(3)}.\n \n@@ -5138,19 +5154,19 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL GMTIME(STIME, TARRAY)}\n+@code{CALL GMTIME(TIME, VALUES)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{STIME}  @tab An @code{INTEGER} scalar expression\n+@item @var{TIME}   @tab An @code{INTEGER} scalar expression\n                         corresponding to a system time, with \n \t\t\t@code{INTENT(IN)}.\n-@item @var{TARRAY} @tab A default @code{INTEGER} array with 9 elements,\n+@item @var{VALUES} @tab A default @code{INTEGER} array with 9 elements,\n                         with @code{INTENT(OUT)}.\n @end multitable\n \n @item @emph{Return value}:\n-The elements of @var{TARRAY} are assigned as follows:\n+The elements of @var{VALUES} are assigned as follows:\n @enumerate\n @item Seconds after the minute, range 0--59 or 0--61 to allow for leap\n       seconds\n@@ -5193,13 +5209,13 @@ Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n-@item @code{CALL HOSTNM(NAME[, STATUS])}\n+@item @code{CALL HOSTNM(C [, STATUS])}\n @item @code{STATUS = HOSTNM(NAME)}\n @end multitable\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{NAME}    @tab Shall of type @code{CHARACTER}.\n+@item @var{C }      @tab Shall of type @code{CHARACTER}.\n @item @var{STATUS}  @tab (Optional) status flag of type @code{INTEGER}.\n                          Returns 0 on success, or a system specific error\n                          code otherwise.\n@@ -5269,7 +5285,7 @@ Fortran 2008 and later\n Elemental function\n \n @item @emph{Syntax}:\n-@code{RESULT = HYPOT(X,Y)}\n+@code{RESULT = HYPOT(X, Y)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n@@ -5498,7 +5514,7 @@ Elemental function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{I} @tab The type shall be @code{INTEGER}.\n+@item @var{I}   @tab The type shall be @code{INTEGER}.\n @item @var{POS} @tab The type shall be @code{INTEGER}.\n @item @var{LEN} @tab The type shall be @code{INTEGER}.\n @end multitable\n@@ -5640,11 +5656,11 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL IDATE(TARRAY)}\n+@code{CALL IDATE(VALUES)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{TARRAY} @tab The type shall be @code{INTEGER, DIMENSION(3)} and\n+@item @var{VALUES} @tab The type shall be @code{INTEGER, DIMENSION(3)} and\n the kind shall be the default integer kind.\n @end multitable\n \n@@ -5985,11 +6001,11 @@ GNU extension\n Function\n \n @item @emph{Syntax}:\n-@code{RESULT = IRAND(FLAG)}\n+@code{RESULT = IRAND(I)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{FLAG} @tab Shall be a scalar @code{INTEGER} of kind 4.\n+@item @var{I} @tab Shall be a scalar @code{INTEGER} of kind 4.\n @end multitable\n \n @item @emph{Return value}:\n@@ -6276,9 +6292,9 @@ end program test_nan\n \n @table @asis\n @item @emph{Description}:\n-@code{IDATE(TARRAY)} Fills @var{TARRAY} with the numerical values at the  \n+@code{IDATE(VALUES)} Fills @var{VALUES} with the numerical values at the  \n current local time. The hour (in the range 1-24), minute (in the range 1-60), \n-and seconds (in the range 1-60) appear in elements 1, 2, and 3 of @var{TARRAY}, \n+and seconds (in the range 1-60) appear in elements 1, 2, and 3 of @var{VALUES}, \n respectively.\n \n @item @emph{Standard}:\n@@ -6288,11 +6304,11 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n-@code{CALL ITIME(TARRAY)}\n+@code{CALL ITIME(VALUES)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{TARRAY} @tab The type shall be @code{INTEGER, DIMENSION(3)}\n+@item @var{VALUES} @tab The type shall be @code{INTEGER, DIMENSION(3)}\n and the kind shall be the default integer kind.\n @end multitable\n \n@@ -6331,13 +6347,13 @@ only one form can be used in any given program unit.\n Subroutine, function\n \n @item @emph{Syntax}:\n-@code{CALL KILL(PID, SIGNAL [, STATUS])}\n+@code{CALL KILL(C, VALUE [, STATUS])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{PID} @tab Shall be a scalar @code{INTEGER}, with\n+@item @var{C} @tab Shall be a scalar @code{INTEGER}, with\n @code{INTENT(IN)}\n-@item @var{SIGNAL} @tab Shall be a scalar @code{INTEGER}, with\n+@item @var{VALUE} @tab Shall be a scalar @code{INTEGER}, with\n @code{INTENT(IN)}\n @item @var{STATUS} @tab (Optional) status flag of type @code{INTEGER(4)} or\n                         @code{INTEGER(8)}. Returns 0 on success, or a\n@@ -6513,60 +6529,6 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n \n \n \n-@node LOG_GAMMA\n-@section @code{LOG_GAMMA} --- Logarithm of the Gamma function\n-@fnindex LOG_GAMMA\n-@fnindex LGAMMA\n-@fnindex ALGAMA\n-@fnindex DLGAMA\n-@cindex Gamma function, logarithm of\n-\n-@table @asis\n-@item @emph{Description}:\n-@code{LOG_GAMMA(X)} computes the natural logarithm of the absolute value\n-of the Gamma (@math{\\Gamma}) function.\n-\n-@item @emph{Standard}:\n-Fortran 2008 and later\n-\n-@item @emph{Class}:\n-Elemental function\n-\n-@item @emph{Syntax}:\n-@code{X = LOG_GAMMA(X)}\n-\n-@item @emph{Arguments}:\n-@multitable @columnfractions .15 .70\n-@item @var{X} @tab Shall be of type @code{REAL} and neither zero\n-nor a negative integer.\n-@end multitable\n-\n-@item @emph{Return value}:\n-The return value is of type @code{REAL} of the same kind as @var{X}.\n-\n-@item @emph{Example}:\n-@smallexample\n-program test_log_gamma\n-  real :: x = 1.0\n-  x = lgamma(x) ! returns 0.0\n-end program test_log_gamma\n-@end smallexample\n-\n-@item @emph{Specific names}:\n-@multitable @columnfractions .20 .20 .20 .25\n-@item Name             @tab Argument         @tab Return type       @tab Standard\n-@item @code{LGAMMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{ALGAMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{DLGAMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU Extension\n-@end multitable\n-\n-@item @emph{See also}:\n-Gamma function: @ref{GAMMA}\n-\n-@end table\n-\n-\n-\n @node LGE\n @section @code{LGE} --- Lexical greater than or equal\n @fnindex LGE\n@@ -6975,6 +6937,60 @@ end program test_log10\n \n \n \n+@node LOG_GAMMA\n+@section @code{LOG_GAMMA} --- Logarithm of the Gamma function\n+@fnindex LOG_GAMMA\n+@fnindex LGAMMA\n+@fnindex ALGAMA\n+@fnindex DLGAMA\n+@cindex Gamma function, logarithm of\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{LOG_GAMMA(X)} computes the natural logarithm of the absolute value\n+of the Gamma (@math{\\Gamma}) function.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Elemental function\n+\n+@item @emph{Syntax}:\n+@code{X = LOG_GAMMA(X)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{X} @tab Shall be of type @code{REAL} and neither zero\n+nor a negative integer.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The return value is of type @code{REAL} of the same kind as @var{X}.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_log_gamma\n+  real :: x = 1.0\n+  x = lgamma(x) ! returns 0.0\n+end program test_log_gamma\n+@end smallexample\n+\n+@item @emph{Specific names}:\n+@multitable @columnfractions .20 .20 .20 .25\n+@item Name             @tab Argument         @tab Return type       @tab Standard\n+@item @code{LGAMMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n+@item @code{ALGAMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n+@item @code{DLGAMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU Extension\n+@end multitable\n+\n+@item @emph{See also}:\n+Gamma function: @ref{GAMMA}\n+\n+@end table\n+\n+\n+\n @node LOGICAL\n @section @code{LOGICAL} --- Convert to logical type\n @fnindex LOGICAL"}]}