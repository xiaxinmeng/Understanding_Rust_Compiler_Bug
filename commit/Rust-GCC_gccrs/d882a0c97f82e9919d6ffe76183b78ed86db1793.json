{"sha": "d882a0c97f82e9919d6ffe76183b78ed86db1793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg4MmEwYzk3ZjgyZTk5MTlkNmZmZTc2MTgzYjc4ZWQ4NmRiMTc5Mw==", "commit": {"author": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-01T07:40:49Z"}, "committer": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-07-02T13:12:39Z"}, "message": "detect unused struct field.", "tree": {"sha": "0a47a64c3df8feba4f52686bcc72a139f598a446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a47a64c3df8feba4f52686bcc72a139f598a446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d882a0c97f82e9919d6ffe76183b78ed86db1793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d882a0c97f82e9919d6ffe76183b78ed86db1793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d882a0c97f82e9919d6ffe76183b78ed86db1793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d882a0c97f82e9919d6ffe76183b78ed86db1793/comments", "author": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7b87f9dd9223da0f3994be5bef5ea9458ebdff"}], "stats": {"total": 270, "additions": 207, "deletions": 63}, "files": [{"sha": "af871a5147a21f2f4235dba297a27bb9241ff0af", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 117, "deletions": 50, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -92,89 +92,156 @@ void\n MarkLive::visit (HIR::PathInExpression &expr)\n {\n   expr.iterate_path_segments ([&] (HIR::PathExprSegment &seg) -> bool {\n-    NodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n-    NodeId ref_node_id = UNKNOWN_NODEID;\n-    HirId ref;\n-    if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n-      {\n-\tResolver::Definition def;\n-\tif (!resolver->lookup_definition (ref_node_id, &def))\n-\t  {\n-\t    rust_error_at (seg.get_locus (),\n-\t\t\t   \"unknown reference for resolved name\");\n-\t    return false;\n-\t  }\n-\tref_node_id = def.parent;\n-      }\n-    else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n-      {\n-\treturn false;\n-      }\n-\n-    if (!mappings->lookup_node_to_hir (seg.get_mappings ().get_crate_num (),\n-\t\t\t\t       ref_node_id, &ref))\n-      {\n-\trust_error_at (seg.get_locus (), \"reverse lookup failure\");\n-\treturn false;\n-      }\n-    if (scannedSymbols.find (ref) == scannedSymbols.end ())\n-      {\n-\tworklist.push_back (ref);\n-      }\n-    liveSymbols.emplace (ref);\n-    return true;\n+    return visit_path_segment (seg);\n   });\n }\n \n void\n-MarkLive::visit (HIR::IdentifierExpr &expr)\n+MarkLive::visit (HIR::MethodCallExpr &expr)\n {\n+  expr.get_receiver ()->accept_vis (*this);\n+  visit_path_segment (expr.get_method_name ());\n+  expr.iterate_params ([&] (HIR::Expr *param) -> bool {\n+    param->accept_vis (*this);\n+    return true;\n+  });\n+\n   NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n+  NodeId ref_node_id = UNKNOWN_NODEID;\n+  find_ref_node_id (ast_node_id, ref_node_id, expr.get_locus (),\n+\t\t    expr.as_string ());\n \n-  // then lookup the reference_node_id\n+  // node back to HIR\n+  HirId ref;\n+  node_id_to_hir_id (expr.get_mappings ().get_crate_num (), ref_node_id, ref,\n+\t\t     expr.get_locus ());\n+  mark_hir_id (ref);\n+}\n+\n+bool\n+MarkLive::visit_path_segment (HIR::PathExprSegment seg)\n+{\n+  NodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n   NodeId ref_node_id = UNKNOWN_NODEID;\n   if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n-      // these ref_node_ids will resolve to a pattern declaration but we are\n-      // interested in the definition that this refers to get the parent id\n       Resolver::Definition def;\n       if (!resolver->lookup_definition (ref_node_id, &def))\n \t{\n-\t  rust_error_at (expr.get_locus (),\n+\t  rust_error_at (seg.get_locus (),\n \t\t\t \"unknown reference for resolved name\");\n-\t  return;\n+\t  return false;\n \t}\n       ref_node_id = def.parent;\n     }\n   else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n     {\n-      rust_error_at (expr.get_locus (),\n-\t\t     \"Failed to lookup type reference for node: %s\",\n-\t\t     expr.as_string ().c_str ());\n-      return;\n+      return false;\n     }\n+  HirId ref;\n+  node_id_to_hir_id (seg.get_mappings ().get_crate_num (), ref_node_id, ref,\n+\t\t     seg.get_locus ());\n+  mark_hir_id (ref);\n+  return true;\n+}\n \n-  if (ref_node_id == UNKNOWN_NODEID)\n+void\n+MarkLive::visit (HIR::FieldAccessExpr &expr)\n+{\n+  // visit receiver at first\n+  expr.get_receiver_expr ()->accept_vis (*this);\n+\n+  // resolve the receiver back to ADT type\n+  TyTy::BaseType *receiver = nullptr;\n+  if (!tyctx->lookup_type (\n+\texpr.get_receiver_expr ()->get_mappings ().get_hirid (), &receiver))\n+    {\n+      rust_error_at (expr.get_receiver_expr ()->get_locus_slow (),\n+\t\t     \"unresolved type for receiver\");\n+    }\n+  rust_assert (receiver->get_kind () == TyTy::TypeKind::ADT);\n+  TyTy::ADTType *adt = static_cast<TyTy::ADTType *> (receiver);\n+\n+  // get the field index\n+  size_t index = 0;\n+  adt->get_field (expr.get_field_name (), &index);\n+  if (index >= adt->num_fields ())\n     {\n-      rust_error_at (expr.get_locus (), \"unresolved node: %s\",\n-\t\t     expr.as_string ().c_str ());\n+      rust_error_at (expr.get_receiver_expr ()->get_locus_slow (),\n+\t\t     \"cannot access struct %s by index: %ld\",\n+\t\t     adt->get_name ().c_str (), index);\n       return;\n     }\n+  // get the field hir id\n+  HirId field_id = adt->get_field (index)->get_ref ();\n+  mark_hir_id (field_id);\n+}\n+\n+void\n+MarkLive::visit (HIR::TupleIndexExpr &expr)\n+{\n+  // TODO: unused tuple field detection\n+  expr.get_tuple_expr ()->accept_vis (*this);\n+}\n+\n+void\n+MarkLive::visit (HIR::IdentifierExpr &expr)\n+{\n+  NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n+  NodeId ref_node_id = UNKNOWN_NODEID;\n+  find_ref_node_id (ast_node_id, ref_node_id, expr.get_locus (),\n+\t\t    expr.as_string ());\n \n   // node back to HIR\n   HirId ref;\n-  if (!mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t     ref_node_id, &ref))\n+  node_id_to_hir_id (expr.get_mappings ().get_crate_num (), ref_node_id, ref,\n+\t\t     expr.get_locus ());\n+  mark_hir_id (ref);\n+}\n+\n+void\n+MarkLive::mark_hir_id (HirId id)\n+{\n+  if (scannedSymbols.find (id) == scannedSymbols.end ())\n+    {\n+      worklist.push_back (id);\n+    }\n+  liveSymbols.emplace (id);\n+}\n+\n+void\n+MarkLive::find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id,\n+\t\t\t    Location locus, const std::string &node_name)\n+{\n+  if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {\n-      rust_error_at (expr.get_locus (), \"reverse lookup failure\");\n+      // these ref_node_ids will resolve to a pattern declaration but we are\n+      // interested in the definition that this refers to get the parent id\n+      Resolver::Definition def;\n+      if (!resolver->lookup_definition (ref_node_id, &def))\n+\t{\n+\t  rust_error_at (locus, \"unknown reference for resolved name\");\n+\t  return;\n+\t}\n+      ref_node_id = def.parent;\n+    }\n+  else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n+    {\n+      rust_error_at (locus, \"Failed to lookup type reference for node: %s\",\n+\t\t     node_name.c_str ());\n       return;\n     }\n+}\n \n-  if (scannedSymbols.find (ref) == scannedSymbols.end ())\n+void\n+MarkLive::node_id_to_hir_id (CrateNum crateNum, NodeId ref_node_id, HirId &ref,\n+\t\t\t     Location locus)\n+{\n+  if (!mappings->lookup_node_to_hir (crateNum, ref_node_id, &ref))\n     {\n-      worklist.push_back (ref);\n+      rust_error_at (locus, \"reverse lookup failure\");\n+      return;\n     }\n-  liveSymbols.emplace (ref);\n }\n \n } // namespace Analysis"}, {"sha": "72274d0b58683585fc9ad1fcaed075c8174c2194", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -38,6 +38,9 @@ class MarkLive : public MarkLiveBase\n \n   void visit (HIR::PathInExpression &expr) override;\n   void visit (HIR::IdentifierExpr &expr) override;\n+  void visit (HIR::FieldAccessExpr &expr) override;\n+  void visit (HIR::TupleIndexExpr &expr) override;\n+  void visit (HIR::MethodCallExpr &expr) override;\n \n   void visit (HIR::BorrowExpr &expr) override\n   {\n@@ -156,6 +159,10 @@ class MarkLive : public MarkLiveBase\n   void visit (HIR::CallExpr &expr) override\n   {\n     expr.get_fnexpr ()->accept_vis (*this);\n+    expr.iterate_params ([&] (HIR::Expr *expr) -> bool {\n+      expr->accept_vis (*this);\n+      return true;\n+    });\n   }\n \n   void visit (HIR::ArithmeticOrLogicalExpr &expr) override\n@@ -226,9 +233,17 @@ class MarkLive : public MarkLiveBase\n   std::set<HirId> scannedSymbols;\n   Analysis::Mappings *mappings;\n   Resolver::Resolver *resolver;\n+  Resolver::TypeCheckContext *tyctx;\n   MarkLive (std::vector<HirId> worklist)\n     : worklist (worklist), mappings (Analysis::Mappings::get ()),\n-      resolver (Resolver::Resolver::get ()){};\n+      resolver (Resolver::Resolver::get ()),\n+      tyctx (Resolver::TypeCheckContext::get ()){};\n+\n+  void mark_hir_id (HirId);\n+  bool visit_path_segment (HIR::PathExprSegment);\n+  void find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id,\n+\t\t\t Location locus, const std::string &node_name);\n+  void node_id_to_hir_id (CrateNum, NodeId, HirId &, Location);\n };\n \n } // namespace Analysis"}, {"sha": "ad48a476be8421164bea2fdee831b1c864490349", "filename": "gcc/rust/lint/rust-lint-scan-deadcode.h", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -46,15 +46,37 @@ class ScanDeadcode : public MarkLiveBase\n   void visit (HIR::Function &function) override\n   {\n     HirId hirId = function.get_mappings ().get_hirid ();\n-    warning (hirId, function.get_locus (), \"function\",\n-\t     function.get_function_name (), \"used\");\n+    if (should_warn (hirId))\n+      {\n+\trust_warning_at (function.get_locus (), 0, \"%s is never %s: %<%s%>\",\n+\t\t\t \"function\", \"used\",\n+\t\t\t function.get_function_name ().c_str ());\n+      }\n   }\n \n   void visit (HIR::StructStruct &stct) override\n   {\n     HirId hirId = stct.get_mappings ().get_hirid ();\n-    warning (hirId, stct.get_locus (), \"struct\", stct.get_identifier (),\n-\t     \"constructed\");\n+    if (should_warn (hirId))\n+      {\n+\trust_warning_at (stct.get_locus (), 0, \"%s is never %s: %<%s%>\",\n+\t\t\t \"struct\", \"constructed\",\n+\t\t\t stct.get_identifier ().c_str ());\n+      }\n+    else\n+      {\n+\t// only warn the unused fields when in unwarned struct.\n+\tstct.iterate ([&] (HIR::StructField &field) -> bool {\n+\t  HirId field_hir_id = field.get_mappings ().get_hirid ();\n+\t  if (should_warn (field_hir_id))\n+\t    {\n+\t      rust_warning_at (field.get_locus (), 0, \"%s is never %s: %<%s%>\",\n+\t\t\t       \"field\", \"read\",\n+\t\t\t       field.get_field_name ().c_str ());\n+\t    }\n+\t  return true;\n+\t});\n+      }\n   }\n \n private:\n@@ -64,15 +86,11 @@ class ScanDeadcode : public MarkLiveBase\n   ScanDeadcode (std::set<HirId> &live_symbols)\n     : live_symbols (live_symbols), resolver (Resolver::Resolver::get ()){};\n \n-  void warning (HirId hirId, Location loc, const std::string &span,\n-\t\tconst std::string &name, const std::string &participle) const\n+  bool should_warn (HirId hirId)\n   {\n-    if (live_symbols.find (hirId) == live_symbols.end ())\n-      {\n-\trust_warning_at (loc, 0, \"%s is never %s: %<%s%>\", span.c_str (),\n-\t\t\t participle.c_str (), name.c_str ());\n-\treturn;\n-      }\n+    // TODO: There are more condition to check if should warn, i.e visibility,\n+    // attributes.\n+    return live_symbols.find (hirId) == live_symbols.end ();\n   }\n };\n "}, {"sha": "9256df5f728ae64a13736e1450de9b84d76fd612", "filename": "gcc/testsuite/rust/compile/torture/forward_decl_3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -5,5 +5,7 @@ fn main() {\n \n struct Foo {\n     one: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     two: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "8473d49587ba6d504b675c08433779d64135984b", "filename": "gcc/testsuite/rust/compile/torture/generics10.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics10.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -3,6 +3,7 @@ struct Foo<T>(T);\n struct Bar<T> {\n     a: Foo<T>,\n     b: bool,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn test<T>(a: Bar<T>) -> Foo<T> {"}, {"sha": "e924ab4671f6c76cc2832292f5609560dd544a73", "filename": "gcc/testsuite/rust/compile/torture/generics13.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,5 +1,6 @@\n struct Foo<A> {\n     a: A,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n struct GenericStruct<T> {"}, {"sha": "0d2e39020fbeab545c2b6e598227480ef3ecd1b8", "filename": "gcc/testsuite/rust/compile/torture/generics14.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,5 +1,6 @@\n struct Foo<A> {\n     a: A,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n impl Foo<isize> {"}, {"sha": "915cc49c68b8fc5be4e95796babdbdada749d485", "filename": "gcc/testsuite/rust/compile/torture/generics4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics4.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo<T> {\n     a: T,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: bool,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn test<T>(a: T) -> Foo<T> {"}, {"sha": "5456b6dcb9703d76040ef497296a367c9d049bd4", "filename": "gcc/testsuite/rust/compile/torture/generics6.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics6.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -3,6 +3,7 @@ struct Foo<T>(T);\n struct Bar<T> {\n     a: Foo<T>,\n     b: bool,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "e8e5ca69c3d697dc68dd8a195a5eb9f2f8987648", "filename": "gcc/testsuite/rust/compile/torture/generics7.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics7.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -3,6 +3,7 @@ struct Foo<T>(T);\n struct Bar {\n     a: Foo<i32>,\n     b: bool,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "22ce19f704d2d5b709809016abd0daf6c7c0b932", "filename": "gcc/testsuite/rust/compile/torture/impl_block3.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block3.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Point {\n     x: f64,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     y: f64,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n impl Point {\n@@ -15,7 +17,9 @@ impl Point {\n \n struct Rectangle {\n     p1: Point,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     p2: Point,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n impl Rectangle {"}, {"sha": "a8e384dabeaae01367f95fee929dbaa2016027ea", "filename": "gcc/testsuite/rust/compile/torture/methods1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods1.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,7 @@\n struct Point {\n     x: f64,\n     y: f64,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n impl Point {"}, {"sha": "d63211bdf8aac4d2aea13c0f459787b1fc3a1479", "filename": "gcc/testsuite/rust/compile/torture/methods2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods2.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,7 @@\n struct Point {\n     x: f64,\n     y: f64,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n impl Point {"}, {"sha": "55426f4fcf7db943b32c6678e501231850f9260d", "filename": "gcc/testsuite/rust/compile/torture/methods3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmethods3.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,7 @@\n struct Point {\n     x: f64,\n     y: f64,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n impl Point {"}, {"sha": "2bd5eadd4c496b9c10c0a2ee9361b0a914837e5b", "filename": "gcc/testsuite/rust/compile/torture/nested_struct1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnested_struct1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnested_struct1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fnested_struct1.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,11 +1,13 @@\n struct Point {\n     x: f64,\n     y: f64,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n struct Rectangle {\n     p1: Point,\n     p2: Point,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "39dc61aaea2a644d7982604e9a06bd46a1b8c867", "filename": "gcc/testsuite/rust/compile/torture/struct_base_init_1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_base_init_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_base_init_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_base_init_1.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo {\n     a: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn foo() -> Foo {"}, {"sha": "1926f73b21de6fa727ec78bee99906aedb7e1b1c", "filename": "gcc/testsuite/rust/compile/torture/struct_init.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo {\n     one: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     two: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "1398f8e7b86d215da582d0452818df171e92bd61", "filename": "gcc/testsuite/rust/compile/torture/struct_init_3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_3.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo {\n     a: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "d4b2de8f2a82b4a635c8eaa542f251cbc2b9c7d2", "filename": "gcc/testsuite/rust/compile/torture/struct_init_4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_4.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo {\n     a: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "e7f9d1607a8f09169b55c28cf04fe0c0540c33b0", "filename": "gcc/testsuite/rust/compile/torture/struct_init_5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_5.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo {\n     a: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "9a6241a5f4fe7f0902e58008999cf734c44a3b3a", "filename": "gcc/testsuite/rust/compile/torture/struct_init_6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_6.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo {\n     a: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "a73d642b0b5ec9a691fd4ccf365f8cf764ecfb2b", "filename": "gcc/testsuite/rust/compile/torture/struct_init_7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_7.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo {\n     a: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: f32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "3fee7282bdebbe26285ff1316d1465184381a17c", "filename": "gcc/testsuite/rust/compile/torture/type_infer1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftype_infer1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftype_infer1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftype_infer1.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,8 @@\n struct Foo {\n     one: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     two: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn test(x: i32) -> i32 {"}, {"sha": "2c2602a161f89369a9ef61892639cceaf617d2a9", "filename": "gcc/testsuite/rust/compile/torture/type_infer5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftype_infer5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftype_infer5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftype_infer5.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -1,6 +1,7 @@\n struct Foo {\n     a: i32,\n     b: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "429b3039da4399bcd7c87f45b8c4fcc2dd2fd611", "filename": "gcc/testsuite/rust/compile/torture/unused_struct_field.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct_field.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d882a0c97f82e9919d6ffe76183b78ed86db1793/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct_field.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct_field.rs?ref=d882a0c97f82e9919d6ffe76183b78ed86db1793", "patch": "@@ -0,0 +1,9 @@\n+struct Foo {\n+    one: i32,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    two: i32\n+}\n+fn main() {\n+    let _a = Foo {one: 1, two: 2};\n+    let _b = _a.two;\n+}\n\\ No newline at end of file"}]}