{"sha": "e49de265efb67ef2e21cb5ca623b5de264a492b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5ZGUyNjVlZmI2N2VmMmUyMWNiNWNhNjIzYjVkZTI2NGE0OTJiNw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2016-07-04T10:46:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-04T10:46:47Z"}, "message": "sem_eval.adb (Decompose_Expr): Set 'out' parameters Kind and Cons to valid values, to avoid use of uninit vars.\n\n2016-07-04  Bob Duff  <duff@adacore.com>\n\n\t* sem_eval.adb (Decompose_Expr): Set 'out' parameters\n\tKind and Cons to valid values, to avoid use of uninit vars.\n\t(Extract_Length): Reorder the check to make it clearer that\n\twe're depending on BOTH Ent1 and Ent2 to be Present.\n\t* sem_aggr.adb (Resolve_Aggregate): Remove dead code.\n\t(Check_Misspelled_Component): Remove exit statement, because\n\tit's covered by the 'while' condition.\n\t* checks.adb (Apply_Selected_Range_Checks): Remove useless\n\tcondition \"or else not Checks_On\".\n\t(Selected_Range_Checks):\n\tInitialize Known_LB and Known_HB to False, because they are\n\ttested unconditionally; avoid use of uninit vars.\n\t* frontend.adb (Frontend): Removed useless condition\n\t\"Operating_Mode = Check_Semantics and then\", and added an Assert\n\tto clarify why it was useless.\n\t* prep.adb (Preprocess): Remove redundant condition. Add an\n\tassertion.\n\t* sem_ch10.adb (Analyze_Proper_Body): Moved redundant condition\n\t\"Original_Operating_Mode = Generate_Code\" to an Assert.\n\t(Process_Spec_Clauses, Process_Body_Clauses): Change parameters\n\tfrom 'in out' to 'out', and don't initialize actuals.\n\t* sem_ch12.adb (Is_In_Main_Unit): Removed useless condition\n\t\"Unum = Main_Unit or else\".\n\t(Save_Global_Descendant): Moved\n\tredundant condition \"D = Union_Id (No_List)\" to an Assert.\n\t* sem_ch4.adb (Check_Misspelled_Selector): Remove exit\n\tstatement, because it's covered by the 'while' condition.\n\t(Analyze_Case_Expression): Initialize Wrong_Alt to Empty,\n\tbecause it looks like it is used uninitialized otherwise.\n\t* sem_ch6.adb (Check_Return_Subtype_Indication): Moved redundant\n\tcondition \"not R_Type_Is_Anon_Access\" to an Assert.\n\t* sem_elim.adb (Line_Num_Match): Moved redundant condition\n\t\"Sloc_Trace (Idx) = '['\" to an Assert.\n\t* sem_util.adb (Compile_Time_Constraint_Error): Change \"J\" to\n\t\"J - 1\". This code is trying to replace \"?\" with \"<\", but not if\n\tthe \"?\" is quoted, as in \"'?\", so we want to check the PREVIOUS\n\tcharacter for '''.\n\t* snames.adb-tmpl (Is_Pragma_Name): Remove useless condition\n\t\"or else N = Name_Relative_Deadline\". It's useless because\n\tName_Relative_Deadline is in the range First_Pragma_Name\n\t.. Last_Pragma_Name.\n\t* treepr.adb (Visit_Node): Moved redundant condition \"D =\n\tUnion_Id (No_List)\" to an Assert.\n\t* sem_ch3.adb (Derive_Subprogram, Derive_Subprograms): Change\n\tparameters from 'in out' to 'out'.\n\t* errout.adb (Error_Msg_Internal): Replace redundant test with Assert.\n\t* inline.adb (Add_Inlined_Body): Code cleanup.\n\nFrom-SVN: r237972", "tree": {"sha": "59e829af6b49ae06a0922d9d543a16ee1dd5aa6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e829af6b49ae06a0922d9d543a16ee1dd5aa6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e49de265efb67ef2e21cb5ca623b5de264a492b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49de265efb67ef2e21cb5ca623b5de264a492b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49de265efb67ef2e21cb5ca623b5de264a492b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49de265efb67ef2e21cb5ca623b5de264a492b7/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "890975e3443c1977ff636a265d0ad82408e898aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890975e3443c1977ff636a265d0ad82408e898aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/890975e3443c1977ff636a265d0ad82408e898aa"}], "stats": {"total": 201, "additions": 118, "deletions": 83}, "files": [{"sha": "ffdbb4a9610f87f20e05baf6569276078e7687f2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -1,3 +1,53 @@\n+2016-07-04  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_eval.adb (Decompose_Expr): Set 'out' parameters\n+\tKind and Cons to valid values, to avoid use of uninit vars.\n+\t(Extract_Length): Reorder the check to make it clearer that\n+\twe're depending on BOTH Ent1 and Ent2 to be Present.\n+\t* sem_aggr.adb (Resolve_Aggregate): Remove dead code.\n+\t(Check_Misspelled_Component): Remove exit statement, because\n+\tit's covered by the 'while' condition.\n+\t* checks.adb (Apply_Selected_Range_Checks): Remove useless\n+\tcondition \"or else not Checks_On\".\n+\t(Selected_Range_Checks):\n+\tInitialize Known_LB and Known_HB to False, because they are\n+\ttested unconditionally; avoid use of uninit vars.\n+\t* frontend.adb (Frontend): Removed useless condition\n+\t\"Operating_Mode = Check_Semantics and then\", and added an Assert\n+\tto clarify why it was useless.\n+\t* prep.adb (Preprocess): Remove redundant condition. Add an\n+\tassertion.\n+\t* sem_ch10.adb (Analyze_Proper_Body): Moved redundant condition\n+\t\"Original_Operating_Mode = Generate_Code\" to an Assert.\n+\t(Process_Spec_Clauses, Process_Body_Clauses): Change parameters\n+\tfrom 'in out' to 'out', and don't initialize actuals.\n+\t* sem_ch12.adb (Is_In_Main_Unit): Removed useless condition\n+\t\"Unum = Main_Unit or else\".\n+\t(Save_Global_Descendant): Moved\n+\tredundant condition \"D = Union_Id (No_List)\" to an Assert.\n+\t* sem_ch4.adb (Check_Misspelled_Selector): Remove exit\n+\tstatement, because it's covered by the 'while' condition.\n+\t(Analyze_Case_Expression): Initialize Wrong_Alt to Empty,\n+\tbecause it looks like it is used uninitialized otherwise.\n+\t* sem_ch6.adb (Check_Return_Subtype_Indication): Moved redundant\n+\tcondition \"not R_Type_Is_Anon_Access\" to an Assert.\n+\t* sem_elim.adb (Line_Num_Match): Moved redundant condition\n+\t\"Sloc_Trace (Idx) = '['\" to an Assert.\n+\t* sem_util.adb (Compile_Time_Constraint_Error): Change \"J\" to\n+\t\"J - 1\". This code is trying to replace \"?\" with \"<\", but not if\n+\tthe \"?\" is quoted, as in \"'?\", so we want to check the PREVIOUS\n+\tcharacter for '''.\n+\t* snames.adb-tmpl (Is_Pragma_Name): Remove useless condition\n+\t\"or else N = Name_Relative_Deadline\". It's useless because\n+\tName_Relative_Deadline is in the range First_Pragma_Name\n+\t.. Last_Pragma_Name.\n+\t* treepr.adb (Visit_Node): Moved redundant condition \"D =\n+\tUnion_Id (No_List)\" to an Assert.\n+\t* sem_ch3.adb (Derive_Subprogram, Derive_Subprograms): Change\n+\tparameters from 'in out' to 'out'.\n+\t* errout.adb (Error_Msg_Internal): Replace redundant test with Assert.\n+\t* inline.adb (Add_Inlined_Body): Code cleanup.\n+\n 2016-07-04  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* g-sercom-mingw.adb, sem_ch6.adb: Minor reformatting."}, {"sha": "d91d64b0ffb68523656be9e36d7a5442e332cc0f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -3243,9 +3243,7 @@ package body Checks is\n             --  on, then we want to delete the check, since it is not needed.\n             --  We do this by replacing the if statement by a null statement\n \n-            --  Why are we even generating checks if checks are turned off ???\n-\n-            elsif Do_Static or else not Checks_On then\n+            elsif Do_Static then\n                Remove_Warning_Messages (R_Cno);\n                Rewrite (R_Cno, Make_Null_Statement (Loc));\n             end if;\n@@ -9650,8 +9648,8 @@ package body Checks is\n \n             LB         : Node_Id := Low_Bound (Ck_Node);\n             HB         : Node_Id := High_Bound (Ck_Node);\n-            Known_LB   : Boolean;\n-            Known_HB   : Boolean;\n+            Known_LB   : Boolean := False;\n+            Known_HB   : Boolean := False;\n \n             Null_Range     : Boolean;\n             Out_Of_Range_L : Boolean;\n@@ -9673,9 +9671,6 @@ package body Checks is\n                then\n                   LB := T_LB;\n                   Known_LB := True;\n-\n-               else\n-                  Known_LB := False;\n                end if;\n \n                --  Likewise for the high bound\n@@ -9688,8 +9683,6 @@ package body Checks is\n                then\n                   HB := T_HB;\n                   Known_HB := True;\n-               else\n-                  Known_HB := False;\n                end if;\n             end if;\n "}, {"sha": "0b5de5c8d35d97d0b5f12b7808e3dd5cae4fdab5", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -1082,8 +1082,7 @@ package body Errout is\n             end loop;\n          end if;\n \n-         --  Now we insert the new message in the error chain. The insertion\n-         --  point for the message is after Prev_Msg and before Next_Msg.\n+         --  Now we insert the new message in the error chain.\n \n          --  The possible insertion point for the new message is after Prev_Msg\n          --  and before Next_Msg. However, this is where we do a special check\n@@ -1101,7 +1100,7 @@ package body Errout is\n            and then not All_Errors_Mode\n          then\n             --  Don't delete unconditional messages and at this stage, don't\n-            --  delete continuation lines (we attempted to delete those earlier\n+            --  delete continuation lines; we attempted to delete those earlier\n             --  if the parent message was deleted.\n \n             if not Errors.Table (Cur_Msg).Uncond\n@@ -1125,10 +1124,8 @@ package body Errout is\n                   --  All tests passed, delete the message by simply returning\n                   --  without any further processing.\n \n-                  if not Continuation then\n-                     Last_Killed := True;\n-                  end if;\n-\n+                  pragma Assert (not Continuation);\n+                  Last_Killed := True;\n                   return;\n                end if;\n             end if;"}, {"sha": "16f2a25061d0538f46589a09b3caac54c327d00b", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -410,9 +410,12 @@ begin\n \n          --  Comment needed for ASIS mode test and GNATprove mode test???\n \n+         pragma Assert\n+           (Operating_Mode = Generate_Code\n+              or else Operating_Mode = Check_Semantics);\n+\n          if Operating_Mode = Generate_Code\n-           or else (Operating_Mode = Check_Semantics\n-                     and then (ASIS_Mode or GNATprove_Mode))\n+           or else (ASIS_Mode or GNATprove_Mode)\n          then\n             Instantiate_Bodies;\n          end if;"}, {"sha": "1be03ae87adf3a4821c29eef6d935dd3883c594f", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -459,11 +459,12 @@ package body Inline is\n             --  Do not inline it either if it is in the main unit.\n             --  Extend the -gnatn2 processing to -gnatn1 for Inline_Always\n             --  calls if the back-end takes care of inlining the call.\n+            --  Note that Level in Inline_Package | Inline_Call here.\n \n-            elsif (Level = Inline_Package\n-                    or else (Level = Inline_Call\n-                              and then Has_Pragma_Inline_Always (E)\n-                              and then Back_End_Inlining))\n+            elsif ((Level = Inline_Call\n+                      and then Has_Pragma_Inline_Always (E)\n+                      and then Back_End_Inlining)\n+                    or else Level = Inline_Package)\n               and then not Is_Inlined (Pack)\n               and then not Is_Internal (E)\n               and then not In_Main_Unit_Or_Subunit (Pack)"}, {"sha": "6f401ede478845db42d296824c09002aca3ed7bf", "filename": "gcc/ada/prep.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprep.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1562,14 +1562,12 @@ package body Prep is\n          --  so we have to deduct Start_Of_Processing from the token pointer.\n \n          if Token = Tok_End_Of_Line then\n-            if (Sinput.Source (Token_Ptr) = ASCII.CR\n-                  and then Sinput.Source (Token_Ptr + 1) = ASCII.LF)\n-              or else\n-               (Sinput.Source (Token_Ptr) = ASCII.CR\n-                  and then Sinput.Source (Token_Ptr + 1) = ASCII.LF)\n+            if Sinput.Source (Token_Ptr) = ASCII.CR\n+              and then Sinput.Source (Token_Ptr + 1) = ASCII.LF\n             then\n                Start_Of_Processing := Token_Ptr + 2;\n             else\n+               pragma Assert (Sinput.Source (Token_Ptr) = ASCII.LF);\n                Start_Of_Processing := Token_Ptr + 1;\n             end if;\n          end if;"}, {"sha": "4f24ab294989f910dd8da756e4bceff581c9df63", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -647,9 +647,9 @@ package body Sem_Aggr is\n \n    begin\n       --  All the components of List are matched against Component and a count\n-      --  is maintained of possible misspellings. When at the end of the the\n+      --  is maintained of possible misspellings. When at the end of the\n       --  analysis there are one or two (not more) possible misspellings,\n-      --  these misspellings will be suggested as possible correction.\n+      --  these misspellings will be suggested as possible corrections.\n \n       Component_Elmt := First_Elmt (Elements);\n       while Nr_Of_Suggestions <= Max_Suggestions\n@@ -664,7 +664,7 @@ package body Sem_Aggr is\n             case Nr_Of_Suggestions is\n                when 1      => Suggestion_1 := Node (Component_Elmt);\n                when 2      => Suggestion_2 := Node (Component_Elmt);\n-               when others => exit;\n+               when others => null;\n             end case;\n          end if;\n \n@@ -1094,18 +1094,6 @@ package body Sem_Aggr is\n                     Index_Constr   => First_Index (Typ),\n                     Component_Typ  => Component_Type (Typ),\n                     Others_Allowed => True);\n-\n-            elsif not Expander_Active\n-              and then Pkind = N_Assignment_Statement\n-            then\n-               Aggr_Resolved :=\n-                 Resolve_Array_Aggregate\n-                   (N,\n-                    Index          => First_Index (Aggr_Typ),\n-                    Index_Constr   => First_Index (Typ),\n-                    Component_Typ  => Component_Type (Typ),\n-                    Others_Allowed => True);\n-\n             else\n                Aggr_Resolved :=\n                  Resolve_Array_Aggregate"}, {"sha": "86dbad06f52222a0e21e856a7bb284ae8fa15b7b", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -269,8 +269,8 @@ package body Sem_Ch10 is\n          procedure Process_Body_Clauses\n           (Context_List      : List_Id;\n            Clause            : Node_Id;\n-           Used              : in out Boolean;\n-           Used_Type_Or_Elab : in out Boolean);\n+           Used              : out Boolean;\n+           Used_Type_Or_Elab : out Boolean);\n          --  Examine the context clauses of a package body, trying to match the\n          --  name entity of Clause with any list element. If the match occurs\n          --  on a use package clause set Used to True, for a use type clause or\n@@ -279,8 +279,8 @@ package body Sem_Ch10 is\n          procedure Process_Spec_Clauses\n           (Context_List : List_Id;\n            Clause       : Node_Id;\n-           Used         : in out Boolean;\n-           Withed       : in out Boolean;\n+           Used         : out Boolean;\n+           Withed       : out Boolean;\n            Exit_On_Self : Boolean := False);\n          --  Examine the context clauses of a package spec, trying to match\n          --  the name entity of Clause with any list element. If the match\n@@ -298,8 +298,8 @@ package body Sem_Ch10 is\n          procedure Process_Body_Clauses\n           (Context_List      : List_Id;\n            Clause            : Node_Id;\n-           Used              : in out Boolean;\n-           Used_Type_Or_Elab : in out Boolean)\n+           Used              : out Boolean;\n+           Used_Type_Or_Elab : out Boolean)\n          is\n             Nam_Ent   : constant Entity_Id := Entity (Name (Clause));\n             Cont_Item : Node_Id;\n@@ -419,8 +419,8 @@ package body Sem_Ch10 is\n          procedure Process_Spec_Clauses\n           (Context_List : List_Id;\n            Clause       : Node_Id;\n-           Used         : in out Boolean;\n-           Withed       : in out Boolean;\n+           Used         : out Boolean;\n+           Withed       : out Boolean;\n            Exit_On_Self : Boolean := False)\n          is\n             Nam_Ent   : constant Entity_Id := Entity (Name (Clause));\n@@ -515,10 +515,10 @@ package body Sem_Ch10 is\n \n                if Present (Spec_Context_Items) then\n                   declare\n-                     Used_In_Body      : Boolean := False;\n-                     Used_In_Spec      : Boolean := False;\n-                     Used_Type_Or_Elab : Boolean := False;\n-                     Withed_In_Spec    : Boolean := False;\n+                     Used_In_Body      : Boolean;\n+                     Used_In_Spec      : Boolean;\n+                     Used_Type_Or_Elab : Boolean;\n+                     Withed_In_Spec    : Boolean;\n \n                   begin\n                      Process_Spec_Clauses\n@@ -1834,9 +1834,8 @@ package body Sem_Ch10 is\n             --  Give message if we did not get the unit Emit warning even if\n             --  missing subunit is not within main unit, to simplify debugging.\n \n-            if Original_Operating_Mode = Generate_Code\n-              and then Unum = No_Unit\n-            then\n+            pragma Assert (Original_Operating_Mode = Generate_Code);\n+            if Unum = No_Unit then\n                Error_Msg_Unit_1 := Subunit_Name;\n                Error_Msg_File_1 :=\n                  Get_File_Name (Subunit_Name, Subunit => True);"}, {"sha": "02fe1023745432af192d6dc83f1cd40054d17437", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -12855,8 +12855,7 @@ package body Sem_Ch12 is\n       --  or in the declaration of the main unit, which in this last case must\n       --  be a body.\n \n-      return Unum = Main_Unit\n-        or else Current_Unit = Cunit (Main_Unit)\n+      return Current_Unit = Cunit (Main_Unit)\n         or else Current_Unit = Library_Unit (Cunit (Main_Unit))\n         or else (Present (Library_Unit (Current_Unit))\n                   and then Is_In_Main_Unit (Library_Unit (Current_Unit)));\n@@ -14575,7 +14574,10 @@ package body Sem_Ch12 is\n             end if;\n \n          elsif D in List_Range then\n-            if D = Union_Id (No_List) or else Is_Empty_List (List_Id (D)) then\n+            pragma Assert (D /= Union_Id (No_List));\n+            --  Because No_List = Empty, which is in Node_Range above\n+\n+            if Is_Empty_List (List_Id (D)) then\n                null;\n \n             else"}, {"sha": "f18551c46d33bd328c1b45f68592d5341d9c556b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -14501,7 +14501,7 @@ package body Sem_Ch3 is\n    -----------------------\n \n    procedure Derive_Subprogram\n-     (New_Subp     : in out Entity_Id;\n+     (New_Subp     : out Entity_Id;\n       Parent_Subp  : Entity_Id;\n       Derived_Type : Entity_Id;\n       Parent_Type  : Entity_Id;\n@@ -15082,7 +15082,7 @@ package body Sem_Ch3 is\n       --  the list of primitives of Derived_Type exactly in the same order.\n \n       procedure Derive_Interface_Subprogram\n-        (New_Subp    : in out Entity_Id;\n+        (New_Subp    : out Entity_Id;\n          Subp        : Entity_Id;\n          Actual_Subp : Entity_Id);\n       --  Derive New_Subp from the ultimate alias of the parent subprogram Subp\n@@ -15168,7 +15168,7 @@ package body Sem_Ch3 is\n       ---------------------------------\n \n       procedure Derive_Interface_Subprogram\n-        (New_Subp    : in out Entity_Id;\n+        (New_Subp    : out Entity_Id;\n          Subp        : Entity_Id;\n          Actual_Subp : Entity_Id)\n       is"}, {"sha": "9f4c6cf05e4c22fa39b42025e709b31fa796a2d5", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -120,7 +120,7 @@ package Sem_Ch3 is\n    --  expressions because the constructor (if any) is on the C++ side.\n \n    procedure Derive_Subprogram\n-     (New_Subp     : in out Entity_Id;\n+     (New_Subp     : out Entity_Id;\n       Parent_Subp  : Entity_Id;\n       Derived_Type : Entity_Id;\n       Parent_Type  : Entity_Id;"}, {"sha": "30ef4919bbba1b13137ba83e9d18744a87fcac40", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -1490,7 +1490,7 @@ package body Sem_Ch4 is\n       Others_Present : Boolean;\n       --  Indicates if Others was present\n \n-      Wrong_Alt : Node_Id;\n+      Wrong_Alt : Node_Id := Empty;\n       --  For error reporting\n \n    --  Start of processing for Analyze_Case_Expression\n@@ -5696,7 +5696,7 @@ package body Sem_Ch4 is\n                case Nr_Of_Suggestions is\n                   when 1      => Suggestion_1 := Comp;\n                   when 2      => Suggestion_2 := Comp;\n-                  when others => exit;\n+                  when others => null;\n                end case;\n             end if;\n          end if;"}, {"sha": "a91d62e5ce91c71fab20232c9cb1f89da22c389e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -774,9 +774,8 @@ package body Sem_Ch6 is\n          --  If the return object is of an anonymous access type, then report\n          --  an error if the function's result type is not also anonymous.\n \n-         elsif R_Stm_Type_Is_Anon_Access\n-           and then not R_Type_Is_Anon_Access\n-         then\n+         elsif R_Stm_Type_Is_Anon_Access then\n+            pragma Assert (not R_Type_Is_Anon_Access);\n             Error_Msg_N (\"anonymous access not allowed for function with \"\n                          & \"named access result\", Subtype_Ind);\n "}, {"sha": "f61a41ce388a96c83498d71d7e62bd8b8395fda8", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -599,9 +599,8 @@ package body Sem_Elim is\n                               Idx := Idx + 1;\n                            end loop;\n \n-                           if Idx <= Last and then\n-                             Sloc_Trace (Idx) = '['\n-                           then\n+                           if Idx <= Last then\n+                              pragma Assert (Sloc_Trace (Idx) = '[');\n                               Idx := Idx + 1;\n                               Idx := Skip_Spaces;\n                            else"}, {"sha": "6ce93639b89a8376e9a684017a3cdf2d3402e4e6", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -3224,6 +3224,11 @@ package body Sem_Eval is\n                   begin\n                      Ent := Empty;\n \n+                     --  Ignored values:\n+\n+                     Kind := '?';\n+                     Cons := No_Uint;\n+\n                      if Nkind (Expr) = N_Op_Add\n                        and then Compile_Time_Known_Value (Right_Opnd (Expr))\n                      then\n@@ -3311,8 +3316,8 @@ package body Sem_Eval is\n                     (Original_Node (Type_High_Bound (T)), Ent2, Kind2, Cons2);\n \n                   if Present (Ent1)\n-                    and then Kind1 = Kind2\n                     and then Ent1 = Ent2\n+                    and then Kind1 = Kind2\n                   then\n                      Len := Cons2 - Cons1 + 1;\n                   else"}, {"sha": "fd6421cad579624e0d88e4a61a7d86112358ca53", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -4865,7 +4865,7 @@ package body Sem_Util is\n          Msgl := Msg'Length;\n \n          for J in 1 .. Msgl loop\n-            if Msg (J) = '?' and then (J = 1 or else Msg (J) /= ''') then\n+            if Msg (J) = '?' and then (J = 1 or else Msg (J - 1) /= ''') then\n                Msgc (J) := '<';\n             else\n                Msgc (J) := Msg (J);"}, {"sha": "6b6c598bf83149efaef91485c2eb2b2ee0c0771c", "filename": "gcc/ada/snames.adb-tmpl", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -455,7 +455,6 @@ package body Snames is\n         or else N = Name_Interface\n         or else N = Name_Interrupt_Priority\n         or else N = Name_Lock_Free\n-        or else N = Name_Relative_Deadline\n         or else N = Name_Priority\n         or else N = Name_Storage_Size\n         or else N = Name_Storage_Unit;"}, {"sha": "27662dd3fca07946d19fccc7026e79c50d0a7c41", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49de265efb67ef2e21cb5ca623b5de264a492b7/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=e49de265efb67ef2e21cb5ca623b5de264a492b7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1998,8 +1998,10 @@ package body Treepr is\n \n             --  Don't bother with a missing list, empty list or error list\n \n-            if D = Union_Id (No_List)\n-              or else D = Union_Id (Error_List)\n+            pragma Assert (D /= Union_Id (No_List));\n+            --  Because No_List = Empty, which is in Node_Range above\n+\n+            if D = Union_Id (Error_List)\n               or else Is_Empty_List (List_Id (D))\n             then\n                return;"}]}