{"sha": "b794e321c163674e83fa0b8f7a7aa1b4359c918c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc5NGUzMjFjMTYzNjc0ZTgzZmEwYjhmN2E3YWExYjQzNTljOTE4Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-08-29T14:08:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-08-29T14:08:50Z"}, "message": "re PR c++/23099 (ICE in build_simple_base_path, at cp/class.c:460)\n\n\tPR c++/23099\n\t* cp-tree.h (saved_scope): Add skip_evaluation.\n\t* decl.c (start_decl): Use DECL_INITIALIZED_IN_CLASS_P, not\n\tDECL_INITIAL, to determine whether or not a static data member was\n\tinitialized in the class-specifier.\n\t(cp_finish_decl): Add comment.\n\t* init.c (integral_constant_value): Subtitute into the\n\tinitializers for static data members in\ttemplates.\n\t* name-lookup.c (push_to_top_level): Save skip_evaluation.\n\t(pop_from_top_level): Restore it.\n\t* pt.c (instantiate_class_template): Do not substitute into the\n\tintializers of static data members when instantiating a class.\n\t(regenerate_decl_from_template): Simplify.\n\t(instantiate_decl): Tidy.  Substitute into the initializer for a\n\tstatic data member even when the definition of the data member is\n\tnot available.\n\n\tPR c++/23099\n\t* g++.dg/init/member1.C: Make sure erroneous static data member\n\tdefinitions are required.\n\t* g++.dg/template/static13.C: New test.\n\t* g++.dg/template/static14.C: Likewise.\n\nFrom-SVN: r103604", "tree": {"sha": "a365e22cb324c02aefb465f5f8efd813b9e48964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a365e22cb324c02aefb465f5f8efd813b9e48964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b794e321c163674e83fa0b8f7a7aa1b4359c918c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b794e321c163674e83fa0b8f7a7aa1b4359c918c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b794e321c163674e83fa0b8f7a7aa1b4359c918c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b794e321c163674e83fa0b8f7a7aa1b4359c918c/comments", "author": null, "committer": null, "parents": [{"sha": "3a6ebcdceed08428c1d47a1f30119bbab87cbd8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a6ebcdceed08428c1d47a1f30119bbab87cbd8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a6ebcdceed08428c1d47a1f30119bbab87cbd8d"}], "stats": {"total": 176, "additions": 134, "deletions": 42}, "files": [{"sha": "40513367888f6e5b1bcc3571ea452f822e67cce8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -1,3 +1,22 @@\n+2005-08-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23099\n+\t* cp-tree.h (saved_scope): Add skip_evaluation.\n+\t* decl.c (start_decl): Use DECL_INITIALIZED_IN_CLASS_P, not\n+\tDECL_INITIAL, to determine whether or not a static data member was\n+\tinitialized in the class-specifier.\n+\t(cp_finish_decl): Add comment.\n+\t* init.c (integral_constant_value): Subtitute into the\n+\tinitializers for static data members in\ttemplates.\n+\t* name-lookup.c (push_to_top_level): Save skip_evaluation.\n+\t(pop_from_top_level): Restore it.\n+\t* pt.c (instantiate_class_template): Do not substitute into the\n+\tintializers of static data members when instantiating a class.\n+\t(regenerate_decl_from_template): Simplify.\n+\t(instantiate_decl): Tidy.  Substitute into the initializer for a\n+\tstatic data member even when the definition of the data member is\n+\tnot available.\n+\n 2005-08-26  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/19004"}, {"sha": "e8d5fe7704984cb3d0267504b5f5bb5d4e615096", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -655,6 +655,7 @@ struct saved_scope GTY(())\n   int x_processing_specialization;\n   bool x_processing_explicit_instantiation;\n   int need_pop_function_context;\n+  bool skip_evaluation;\n \n   struct stmt_tree_s x_stmt_tree;\n "}, {"sha": "a32be093c74e17c3f1fc6bfacf49d8f66b89b07d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -3716,7 +3716,8 @@ start_decl (const cp_declarator *declarator,\n \t\t declaration will have DECL_EXTERNAL set, but will have an\n \t\t initialization.  Thus, duplicate_decls won't warn\n \t\t about this situation, and so we check here.  */\n-\t      if (DECL_INITIAL (decl) && DECL_INITIAL (field))\n+\t      if (DECL_INITIAL (decl) \n+\t\t  && DECL_INITIALIZED_IN_CLASS_P (field))\n \t\terror (\"duplicate initialization of %qD\", decl);\n \t      if (duplicate_decls (decl, field))\n \t\tdecl = field;\n@@ -4921,10 +4922,20 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n \t\t     \"initialized\", decl);\n \t      init = NULL_TREE;\n \t    }\n+\n+\t  /* Check that the initializer for a static data member was a\n+\t     constant.  Althouh we check in the parser that the\n+\t     initializer is an integral constant expression, we do not\n+\t     simplify division-by-zero at the point at which it\n+\t     occurs.  Therefore, in:\n+\n+\t       struct S { static const int i = 7 / 0; };\n+\t       \n+\t     we issue an error at this point.  It would\n+\t     probably be better to forbid division by zero in\n+\t     integral constant expressions.  */\n \t  if (DECL_EXTERNAL (decl) && init)\n \t    {\n-\t      /* The static data member cannot be initialized by a\n-\t\t non-constant when being declared.  */\n \t      error (\"%qD cannot be initialized by a non-constant expression\"\n \t\t     \" when being declared\", decl);\n \t      DECL_INITIALIZED_IN_CLASS_P (decl) = 0;"}, {"sha": "8a8dc782ca3f0059fa9341173de196e139de7a3e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -1572,12 +1572,25 @@ integral_constant_value (tree decl)\n \t      /* And so are variables with a 'const' type -- unless they\n \t\t are also 'volatile'.  */\n \t      && CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (decl))\n-\t      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)))\n-\t && DECL_INITIAL (decl)\n-\t && DECL_INITIAL (decl) != error_mark_node\n-\t && TREE_TYPE (DECL_INITIAL (decl))\n-\t && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (DECL_INITIAL (decl))))\n-    decl = DECL_INITIAL (decl);\n+\t      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))))\n+    {\n+      tree init;\n+      /* If DECL is a static data member in a template class, we must\n+\t instantiate it here.  The initializer for the static data\n+\t member is not processed until needed; we need it now.  */ \n+      mark_used (decl);\n+      init = DECL_INITIAL (decl);\n+      /* If we are currently processing a template, the\n+\t initializer for a static data member may not be dependent,\n+\t but it is not folded until instantiation time.  */\n+      if (init)\n+\tinit = fold_non_dependent_expr (init);\n+      if (!(init || init == error_mark_node)\n+\t  || !TREE_TYPE (init)\n+\t  || !INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (init)))\n+\tbreak;\n+      decl = init;\n+    }\n   return decl;\n }\n "}, {"sha": "7270a9dd11245809adbf1728a5d4d02bcf155fb9", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -4872,12 +4872,14 @@ push_to_top_level (void)\n   s->bindings = b;\n   s->need_pop_function_context = need_pop;\n   s->function_decl = current_function_decl;\n+  s->skip_evaluation = skip_evaluation;\n \n   scope_chain = s;\n   current_function_decl = NULL_TREE;\n   current_lang_base = VEC_alloc (tree, gc, 10);\n   current_lang_name = lang_name_cplusplus;\n   current_namespace = global_namespace;\n+  skip_evaluation = 0;\n   timevar_pop (TV_NAME_LOOKUP);\n }\n \n@@ -4909,6 +4911,7 @@ pop_from_top_level (void)\n   if (s->need_pop_function_context)\n     pop_function_context_from (NULL_TREE);\n   current_function_decl = s->function_decl;\n+  skip_evaluation = s->skip_evaluation;\n   timevar_pop (TV_NAME_LOOKUP);\n }\n "}, {"sha": "773d86508915786907176850ca5d03a8365333e8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -5699,17 +5699,22 @@ instantiate_class_template (tree type)\n \t\t    --processing_template_decl;\n \t\t  if (TREE_CODE (r) == VAR_DECL)\n \t\t    {\n-\t\t      tree init;\n-\n-\t\t      if (DECL_INITIALIZED_IN_CLASS_P (r))\n-\t\t\tinit = tsubst_expr (DECL_INITIAL (t), args,\n-\t\t\t\t\t    tf_error | tf_warning, NULL_TREE);\n-\t\t      else\n-\t\t\tinit = NULL_TREE;\n-\n-\t\t      finish_static_data_member_decl\n-\t\t\t(r, init, /*asmspec_tree=*/NULL_TREE, /*flags=*/0);\n-\n+\t\t      /* In [temp.inst]:\n+\n+\t\t\t   [t]he initialization (and any associated\n+\t\t\t   side-effects) of a static data member does\n+\t\t\t   not occur unless the static data member is\n+\t\t\t   itself used in a way that requires the\n+\t\t\t   definition of the static data member to\n+\t\t\t   exist.  \n+\n+\t\t\t Therefore, we do not substitute into the\n+\t\t         initialized for the static data member here.  */\n+\t\t      finish_static_data_member_decl \n+\t\t\t(r, \n+\t\t\t /*init=*/NULL_TREE, \n+\t\t\t /*asmspec_tree=*/NULL_TREE, \n+\t\t\t /*flags=*/0);\n \t\t      if (DECL_INITIALIZED_IN_CLASS_P (r))\n \t\t\tcheck_static_variable_definition (r, TREE_TYPE (r));\n \t\t    }\n@@ -11278,13 +11283,9 @@ regenerate_decl_from_template (tree decl, tree tmpl)\n \tDECL_INLINE (decl) = 1;\n     }\n   else if (TREE_CODE (decl) == VAR_DECL)\n-    {\n-      if (!DECL_INITIALIZED_IN_CLASS_P (decl)\n-\t  && DECL_INITIAL (code_pattern))\n-\tDECL_INITIAL (decl) =\n-\t  tsubst_expr (DECL_INITIAL (code_pattern), args,\n-\t\t       tf_error, DECL_TI_TEMPLATE (decl));\n-    }\n+    DECL_INITIAL (decl) =\n+      tsubst_expr (DECL_INITIAL (code_pattern), args,\n+\t\t   tf_error, DECL_TI_TEMPLATE (decl));\n   else\n     gcc_unreachable ();\n \n@@ -11367,7 +11368,7 @@ instantiate_decl (tree d, int defer_ok,\n   tree code_pattern;\n   tree spec;\n   tree gen_tmpl;\n-  int pattern_defined;\n+  bool pattern_defined;\n   int need_push;\n   location_t saved_loc = input_location;\n \n@@ -11415,9 +11416,6 @@ instantiate_decl (tree d, int defer_ok,\n \n   timevar_push (TV_PARSE);\n \n-  /* We may be in the middle of deferred access check.  Disable it now.  */\n-  push_deferring_access_checks (dk_no_deferred);\n-\n   /* Set TD to the template whose DECL_TEMPLATE_RESULT is the pattern\n      for the instantiation.  */\n   td = template_for_substitution (d);\n@@ -11437,6 +11435,10 @@ instantiate_decl (tree d, int defer_ok,\n     pattern_defined = (DECL_SAVED_TREE (code_pattern) != NULL_TREE);\n   else\n     pattern_defined = ! DECL_IN_AGGR_P (code_pattern);\n+\n+  /* We may be in the middle of deferred access check.  Disable it now.  */\n+  push_deferring_access_checks (dk_no_deferred);\n+\n   /* Unless an explicit instantiation directive has already determined\n      the linkage of D, remember that a definition is available for\n      this entity.  */\n@@ -11486,12 +11488,6 @@ instantiate_decl (tree d, int defer_ok,\n       pop_access_scope (d);\n     }\n \n-  /* We should have set up DECL_INITIAL in instantiate_class_template\n-     for in-class definitions of static data members.  */\n-  gcc_assert (!(TREE_CODE (d) == VAR_DECL\n-\t\t&& DECL_INITIALIZED_IN_CLASS_P (d)\n-\t\t&& DECL_INITIAL (d) == NULL_TREE));\n-\n   /* Do not instantiate templates that we know will be defined\n      elsewhere.  */\n   if (DECL_INTERFACE_KNOWN (d)\n@@ -11504,6 +11500,20 @@ instantiate_decl (tree d, int defer_ok,\n      because it's used by add_pending_template.  */\n   else if (! pattern_defined || defer_ok)\n     {\n+      /* The definition of the static data member is now required so\n+\t we must substitute the initializer.  */\n+      if (TREE_CODE (d) == VAR_DECL\n+\t  && !DECL_INITIAL (d) \n+\t  && DECL_INITIAL (code_pattern))\n+\t{\n+\t  push_nested_class (DECL_CONTEXT (d));\n+\t  DECL_INITIAL (d)\n+\t    = tsubst_expr (DECL_INITIAL (code_pattern), \n+\t\t\t   args,\n+\t\t\t   tf_error | tf_warning, NULL_TREE);\n+\t  pop_nested_class ();\n+\t}\n+\n       input_location = saved_loc;\n \n       if (at_eof && !pattern_defined\n@@ -11570,10 +11580,7 @@ instantiate_decl (tree d, int defer_ok,\n \n       /* Enter the scope of D so that access-checking works correctly.  */\n       push_nested_class (DECL_CONTEXT (d));\n-      cp_finish_decl (d,\n-\t\t      (!DECL_INITIALIZED_IN_CLASS_P (d)\n-\t\t       ? DECL_INITIAL (d) : NULL_TREE),\n-\t\t      NULL_TREE, 0);\n+      cp_finish_decl (d, DECL_INITIAL (d), NULL_TREE, 0);\n       pop_nested_class ();\n     }\n   else if (TREE_CODE (d) == FUNCTION_DECL)"}, {"sha": "c896f3244964a566ae2318be1c9059748f2a9e69", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -1,3 +1,11 @@\n+2005-08-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/23099\n+\t* g++.dg/init/member1.C: Make sure erroneous static data member\n+\tdefinitions are required.\n+\t* g++.dg/template/static13.C: New test.\n+\t* g++.dg/template/static14.C: Likewise.\n+\n 2005-08-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/pr23575.c: Use -msse2 instead of"}, {"sha": "aededf23e7b72043720c50a5c6e307538b6d3dda", "filename": "gcc/testsuite/g++.dg/init/member1.C", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmember1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmember1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fmember1.C?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -11,8 +11,11 @@ template<int> struct B {};\n template<typename T> struct C\n {\n   static const int i = A<T>::i;  // { dg-error \"incomplete\" }\n-  static const int j = i;      // { dg-error \"initialized by a non-const\" }\n+  static const int j = i;\n   B<j> b;  // { dg-error \"not a valid template arg\" }\n };\n \n C<int> c;\n+\n+int i = C<int>::i;\n+int j = C<int>::j;"}, {"sha": "c43f5554739a9376c5f10feb4f4a7a4386c78dbc", "filename": "gcc/testsuite/g++.dg/template/static13.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic13.C?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/23099\n+\n+struct Base {\n+  int x;\n+};\n+\n+template <typename T>\n+struct A {\n+  static const int N = sizeof(static_cast<Base*>(T()));\n+};\n+\n+struct Derived : Base {\n+  A<Derived*> a;\n+};"}, {"sha": "5bc0e731ac34665b994362f61db24ca6c960ddca", "filename": "gcc/testsuite/g++.dg/template/static14.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b794e321c163674e83fa0b8f7a7aa1b4359c918c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic14.C?ref=b794e321c163674e83fa0b8f7a7aa1b4359c918c", "patch": "@@ -0,0 +1,13 @@\n+struct Base {\n+  int x;\n+};\n+\n+template <typename T>\n+struct A {\n+  static const int N = sizeof(static_cast<Base*>(T()));\n+  int a[N];\n+};\n+\n+struct Derived : Base {\n+  A<Derived*> a;\n+};"}]}