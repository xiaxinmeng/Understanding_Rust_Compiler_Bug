{"sha": "fb623df5013441f0486591bb9c811d30946608c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI2MjNkZjUwMTM0NDFmMDQ4NjU5MWJiOWM4MTFkMzA5NDY2MDhjNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-08T14:49:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-08T14:49:18Z"}, "message": "(MASK_*, TARGET_*): Add target masks and tests.\n\n(TARGET_SWITCHES): Add target switches for various architectures and mnemonics\noptions.\n(TARGET_OPTIONS): Add cpu type as special target option.\n(OVERRIDE_OPTIONS): Call rs6000_override_options to decipher.\n\nFrom-SVN: r5282", "tree": {"sha": "70458fbdb061e72cb1ce0ebd0a77c8c1f6dc64f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70458fbdb061e72cb1ce0ebd0a77c8c1f6dc64f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb623df5013441f0486591bb9c811d30946608c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb623df5013441f0486591bb9c811d30946608c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb623df5013441f0486591bb9c811d30946608c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb623df5013441f0486591bb9c811d30946608c4/comments", "author": null, "committer": null, "parents": [{"sha": "8348547afcc43bea152a4890d85b3132ba6bfb3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8348547afcc43bea152a4890d85b3132ba6bfb3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8348547afcc43bea152a4890d85b3132ba6bfb3c"}], "stats": {"total": 117, "additions": 93, "deletions": 24}, "files": [{"sha": "e7e2062161fa01a4ef1ebbd06caa1b1bc48b0f2a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 93, "deletions": 24, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb623df5013441f0486591bb9c811d30946608c4/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb623df5013441f0486591bb9c811d30946608c4/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=fb623df5013441f0486591bb9c811d30946608c4", "patch": "@@ -63,40 +63,116 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Don't turn -B into -L if the argument specifies a relative file name.  */\n #define RELATIVE_PREFIX_NOT_LINKDIR\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n+/* Architecture type.  */\n \n-/* Flag to disable putting fp constants in the TOC; can be turned on when\n-   the TOC overflows.  */\n+extern int target_flags;\n+\n+/* Use POWER architecture instructions and MQ register.  */\n+#define MASK_POWER\t\t0x01\n+\n+/* Use PowerPC architecture instructions.  */\n+#define MASK_POWERPC\t\t0x02\n \n-#define TARGET_NO_FP_IN_TOC  (target_flags & 1)\n+/* Use PowerPC-64 architecture instructions.  */\n+#define MASK_POWERPC64\t\t0x04\n \n-/* Flag to output only one TOC entry per module.  Normally linking fails if\n+/* Use revised mnemonic names defined for PowerPC architecture.  */\n+#define MASK_NEW_MNEMONICS\t0x08\n+\n+/* Disable placing fp constants in the TOC; can be turned on when the\n+   TOC overflows.  */\n+#define MASK_NO_FP_IN_TOC\t0x10\n+\n+/* Output only one TOC entry per module.  Normally linking fails if\n    there are more than 16K unique variables/constants in an executable.  With\n    this option, linking fails only if there are more than 16K modules, or\n    if there are more than 16K unique variables/constant in a single module.\n \n    This is at the cost of having 2 extra loads and one extra store per\n    function, and one less allocatable register.  */\n+#define MASK_MINIMAL_TOC\t0x20\n \n-#define TARGET_MINIMAL_TOC (target_flags & 2)\n+#define TARGET_POWER\t\t\t(target_flags & MASK_POWER)\n+#define TARGET_POWERPC\t\t\t(target_flags & MASK_POWERPC)\n+#define TARGET_POWERPC64\t\t(target_flags & MASK_POWERPC64)\n+#define TARGET_NEW_MNEMONICS\t\t(target_flags & MASK_NEW_MNEMONICS)\n+#define TARGET_NO_FP_IN_TOC\t\t(target_flags & MASK_NO_FP_IN_TOC)\n+#define TARGET_MINIMAL_TOC\t\t(target_flags & MASK_MINIMAL_TOC)\n \n-extern int target_flags;\n+/* Run-time compilation parameters selecting different hardware subsets.\n \n-/* Macro to define tables used to set the flags.\n+   Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES\t\t\\\n-  {{\"normal-toc\", - (1|2)},\t\\\n-   {\"no-fp-in-toc\", 1},\t\\\n-   {\"minimal-toc\", 2},\t\t\\\n-   { \"\", TARGET_DEFAULT}}\n-\n-#define TARGET_DEFAULT 0\n-\n-/* On the RS/6000, we turn on various flags if optimization is selected.  */\n+#define TARGET_SWITCHES\t\t\t\t\t\t\\\n+ {{\"power\",\t\tMASK_POWER},\t\t\t\t\\\n+  {\"no-power\",\t\t- MASK_POWER},\t\t\t\t\\\n+  {\"powerpc\",\t\tMASK_POWERPC},\t\t\t\t\\\n+  {\"no-powerpc\",\t- (MASK_POWERPC | MASK_POWERPC64)},\t\\\n+  {\"powerpc64\",\t\tMASK_POWERPC | MASK_POWERPC64},\t\t\\\n+  {\"no-powerpc64\",\t-MASK_POWERPC64},\t\t\t\\\n+  {\"new-mnemonics\",\tMASK_NEW_MNEMONICS},\t\t\t\\\n+  {\"old-mnemonics\",\t-MASK_NEW_MNEMONICS},\t\t\t\\\n+  {\"normal-toc\",\t- (MASK_NO_FP_IN_TOC | MASK_MINIMAL_TOC)}, \\\n+  {\"fp-in-toc\",\t\t- MASK_NO_FP_IN_TOC},\t\t\t\\\n+  {\"no-fp-in-toc\",\tMASK_NO_FP_IN_TOC},\t\t\t\\\n+  {\"minimal-toc\",\tMASK_MINIMAL_TOC},\t\t\t\\\n+  {\"no-minimal-toc\",\t- MASK_MINIMAL_TOC},\t\t\t\\\n+  {\"\",\t\t\tTARGET_DEFAULT}}\n+\n+#define TARGET_DEFAULT MASK_POWER\n+\n+/* Processor type.  */\n+enum processor_type\n+ {PROCESSOR_RIOS,\n+  PROCESSOR_RIOS2,\n+  PROCESSOR_PPC601,\n+  PROCESSOR_PPC603,\n+  PROCESSOR_PPC604,\n+  PROCESSOR_PPC620};\n+\n+extern enum processor_type rs6000_cpu;\n+\n+/* Recast the processor type to the cpu attribute.  */\n+#define rs6000_cpu_attr ((enum attr_cpu)rs6000_cpu)\n+\n+/* Define the default processor.  This is overridden by other tm.h files.  */\n+#define PROCESSOR_DEFAULT PROCESSOR_RIOS\n+\n+/* This macro is similar to `TARGET_SWITCHES' but defines names of\n+   command options that have values.  Its definition is an\n+   initializer with a subgrouping for each command option.\n+\n+   Each subgrouping contains a string constant, that defines the\n+   fixed part of the option name, and the address of a variable.\n+   The variable, type `char *', is set to the variable part of the\n+   given option if the fixed part matches.  The actual option name\n+   is made by appending `-m' to the specified name.\n+\n+   Here is an example which defines `-mshort-data-NUMBER'.  If the\n+   given option is `-mshort-data-512', the variable `m88k_short_data'\n+   will be set to the string `\"512\"'.\n+\n+\textern char *m88k_short_data;\n+\t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n+\n+#define TARGET_OPTIONS\t\t\\\n+{ {\"cpu=\", &rs6000_cpu_string}}\n+\n+extern char *rs6000_cpu_string;\n+\n+/* Sometimes certain combinations of command options do not make sense\n+   on a particular target machine.  You can define a macro\n+   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n+   defined, is executed once just after all the command options have\n+   been parsed.\n+\n+   On the RS/6000 this is used to define the target cpu type.  */\n+\n+#define OVERRIDE_OPTIONS rs6000_override_options ()\n \n #define OPTIMIZATION_OPTIONS(LEVEL)\t\\\n {\t\t\t\t\t\\\n@@ -106,13 +182,6 @@ extern int target_flags;\n       flag_omit_frame_pointer = 1;\t\\\n     }\t\t\t\t\t\\\n }\n-\n-/* Define this to modify the options specified by the user.  */\n-\n-#define OVERRIDE_OPTIONS\t\t\\\n-{\t\t\t\t\t\\\n-   profile_block_flag = 0;\t\t\\\n-}\n \f\n /* target machine storage layout */\n "}]}