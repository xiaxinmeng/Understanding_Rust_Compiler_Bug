{"sha": "c39373da4911f9246dec9b50011ed2aa9247c2c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM5MzczZGE0OTExZjkyNDZkZWM5YjUwMDExZWQyYWE5MjQ3YzJjMQ==", "commit": {"author": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-05-13T23:22:13Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-05-13T23:22:13Z"}, "message": "re PR fortran/15314 (ICE caused by array initializer in derived type definition)\n\n\tPR fortran/15314\n\t* gfortran.fortran-torture/execute/der_init_s.f90: New test.\n\nFrom-SVN: r81818", "tree": {"sha": "defda8dbed3925b82febb0f106ee66bfb41d35b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/defda8dbed3925b82febb0f106ee66bfb41d35b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c39373da4911f9246dec9b50011ed2aa9247c2c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39373da4911f9246dec9b50011ed2aa9247c2c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39373da4911f9246dec9b50011ed2aa9247c2c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39373da4911f9246dec9b50011ed2aa9247c2c1/comments", "author": null, "committer": null, "parents": [{"sha": "6b9bee8ee6bd4925078813d6d0b198b2d19f3853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9bee8ee6bd4925078813d6d0b198b2d19f3853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9bee8ee6bd4925078813d6d0b198b2d19f3853"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "8939fc452d35cb9847e6ad1ecee4b020a1035333", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39373da4911f9246dec9b50011ed2aa9247c2c1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39373da4911f9246dec9b50011ed2aa9247c2c1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c39373da4911f9246dec9b50011ed2aa9247c2c1", "patch": "@@ -1,4 +1,4 @@\n-2004-05-13  Paul Brook  <paul@codesourcery.com>\n+2004-05-13  Victor Leikehman  <lei@haifasphere.co.il>\n \n \tPR fortran/15314\n \t* trans-expr.c (gfc_conv_structure): Use field type, not expr type."}, {"sha": "4ac96daa5626b400bee4602f61eac8d88087dcbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39373da4911f9246dec9b50011ed2aa9247c2c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39373da4911f9246dec9b50011ed2aa9247c2c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c39373da4911f9246dec9b50011ed2aa9247c2c1", "patch": "@@ -1,3 +1,8 @@\n+2004-05-13  Paul Brook  <paul@codesourcery.com>\n+\n+\tPR fortran/15314\n+\t* gfortran.fortran-torture/execute/der_init_s.f90: New test.\n+\n 2004-05-13  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/uninit-H.c: Test for __PPC__ and __ppc__"}, {"sha": "d0448a55b67b0a57b70ced1faccb6a4cf34dc0e7", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/der_init_2.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39373da4911f9246dec9b50011ed2aa9247c2c1/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_init_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39373da4911f9246dec9b50011ed2aa9247c2c1/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_init_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fder_init_2.f90?ref=c39373da4911f9246dec9b50011ed2aa9247c2c1", "patch": "@@ -0,0 +1,15 @@\n+! PR 15314\n+! We were looking at the type of the initialization expression, not the type\n+! of the field.\n+program der_init_2\n+  implicit none\n+  type foo\n+    integer :: a(3) = 42\n+    integer :: b = 123\n+  end type\n+\n+  type (foo) :: v\n+\n+  if ((v%b .ne. 123) .or. any (v%a .ne. 42)) call abort ();\n+end program\n+"}]}