{"sha": "b190f239060ec7ac9cb71d1c75303bf730cd6773", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE5MGYyMzkwNjBlYzdhYzljYjcxZDFjNzUzMDNiZjczMGNkNjc3Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-05-21T14:27:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-05-21T14:27:46Z"}, "message": "c-parse.in (fndef): Set DECL_SOURCE_LINE and FILE earlier.\n\n\t* c-parse.in (fndef): Set DECL_SOURCE_LINE and FILE earlier.\n\t(nested_function): Likewise.\n\t(notype_nested_function): Likewise.\ncp:\n\t* pt.c (register_specialization): Update the decl's location,\n\tif necessary.\n\t(check_explicit_specialization): Likewise.\n\nFrom-SVN: r67063", "tree": {"sha": "8b4db981fce7368eec77eb662d5ca0d416cfc72a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b4db981fce7368eec77eb662d5ca0d416cfc72a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b190f239060ec7ac9cb71d1c75303bf730cd6773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b190f239060ec7ac9cb71d1c75303bf730cd6773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b190f239060ec7ac9cb71d1c75303bf730cd6773", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b190f239060ec7ac9cb71d1c75303bf730cd6773/comments", "author": null, "committer": null, "parents": [{"sha": "278566a23524383e61cfdd0b1e346ac55790975d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278566a23524383e61cfdd0b1e346ac55790975d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278566a23524383e61cfdd0b1e346ac55790975d"}], "stats": {"total": 83, "additions": 54, "deletions": 29}, "files": [{"sha": "fe46e5a5d791cd76f915d31b89d51f80d61ff288", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b190f239060ec7ac9cb71d1c75303bf730cd6773/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b190f239060ec7ac9cb71d1c75303bf730cd6773/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b190f239060ec7ac9cb71d1c75303bf730cd6773", "patch": "@@ -1,3 +1,9 @@\n+2003-05-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-parse.in (fndef): Set DECL_SOURCE_LINE and FILE earlier.\n+\t(nested_function): Likewise.\n+\t(notype_nested_function): Likewise.\n+\n 2003-05-21  Nick Clifton  <nickc@redhat.com>\n \n \t* config/stormy16/stormy-abi: Update overflow type for"}, {"sha": "477ae629fe70a8d9ffdb5e3bf64a405f36965aed", "filename": "gcc/c-parse.in", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b190f239060ec7ac9cb71d1c75303bf730cd6773/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b190f239060ec7ac9cb71d1c75303bf730cd6773/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=b190f239060ec7ac9cb71d1c75303bf730cd6773", "patch": "@@ -434,12 +434,12 @@ fndef:\n \t\t\t\t\tall_prefix_attributes))\n \t\t    YYERROR1;\n \t\t}\n-\t  old_style_parm_decls\n-\t\t{ store_parm_decls (); }\n-\t  save_filename save_lineno compstmt_or_error\n-\t\t{ DECL_SOURCE_FILE (current_function_decl) = $7;\n-\t\t  DECL_SOURCE_LINE (current_function_decl) = $8;\n-\t\t  finish_function (0, 1);\n+\t  old_style_parm_decls  save_filename save_lineno\n+\t\t{ DECL_SOURCE_FILE (current_function_decl) = $6;\n+\t\t  DECL_SOURCE_LINE (current_function_decl) = $7;\n+\t\t  store_parm_decls (); }\n+\t compstmt_or_error\n+\t\t{ finish_function (0, 1);\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_ts setspecs declarator error\n \t\t{ POP_DECLSPEC_STACK; }\n@@ -448,12 +448,12 @@ fndef:\n \t\t\t\t\tall_prefix_attributes))\n \t\t    YYERROR1;\n \t\t}\n-\t  old_style_parm_decls\n-\t\t{ store_parm_decls (); }\n-\t  save_filename save_lineno compstmt_or_error\n-\t\t{ DECL_SOURCE_FILE (current_function_decl) = $7;\n-\t\t  DECL_SOURCE_LINE (current_function_decl) = $8;\n-\t\t  finish_function (0, 1);\n+\t  old_style_parm_decls save_filename save_lineno\n+\t\t{ DECL_SOURCE_FILE (current_function_decl) = $6;\n+\t\t  DECL_SOURCE_LINE (current_function_decl) = $7;\n+\t\t  store_parm_decls (); }\n+\t  compstmt_or_error\n+\t\t{ finish_function (0, 1);\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_nots setspecs notype_declarator error\n \t\t{ POP_DECLSPEC_STACK; }\n@@ -462,12 +462,12 @@ fndef:\n \t\t\t\t\tall_prefix_attributes))\n \t\t    YYERROR1;\n \t\t}\n-\t  old_style_parm_decls\n-\t\t{ store_parm_decls (); }\n-\t  save_filename save_lineno compstmt_or_error\n-\t\t{ DECL_SOURCE_FILE (current_function_decl) = $6;\n-\t\t  DECL_SOURCE_LINE (current_function_decl) = $7;\n-\t\t  finish_function (0, 1);\n+\t  old_style_parm_decls save_filename save_lineno\n+\t\t{ DECL_SOURCE_FILE (current_function_decl) = $5;\n+\t\t  DECL_SOURCE_LINE (current_function_decl) = $6;\n+\t\t  store_parm_decls (); }\n+\t  compstmt_or_error\n+\t\t{ finish_function (0, 1);\n \t\t  POP_DECLSPEC_STACK; }\n \t| setspecs notype_declarator error\n \t\t{ POP_DECLSPEC_STACK; }\n@@ -1593,18 +1593,19 @@ nested_function:\n \t\t    }\n \t\t  parsing_iso_function_signature = false; /* Don't warn about nested functions.  */\n \t\t}\n-\t   old_style_parm_decls\n-\t\t{ store_parm_decls (); }\n+\t   old_style_parm_decls save_filename save_lineno\n+\t\t{ tree decl = current_function_decl;\n+\t\t  DECL_SOURCE_FILE (decl) = $4;\n+\t\t  DECL_SOURCE_LINE (decl) = $5;\n+\t\t  store_parm_decls (); }\n /* This used to use compstmt_or_error.\n    That caused a bug with input `f(g) int g {}',\n    where the use of YYERROR1 above caused an error\n    which then was handled by compstmt_or_error.\n    There followed a repeated execution of that same rule,\n    which called YYERROR1 again, and so on.  */\n-\t  save_filename save_lineno compstmt\n+\t  compstmt\n \t\t{ tree decl = current_function_decl;\n-\t\t  DECL_SOURCE_FILE (decl) = $5;\n-\t\t  DECL_SOURCE_LINE (decl) = $6;\n \t\t  finish_function (1, 1);\n \t\t  pop_function_context ();\n \t\t  add_decl_stmt (decl); }\n@@ -1624,18 +1625,19 @@ notype_nested_function:\n \t\t    }\n \t\t  parsing_iso_function_signature = false; /* Don't warn about nested functions.  */\n \t\t}\n-\t  old_style_parm_decls\n-\t\t{ store_parm_decls (); }\n+\t  old_style_parm_decls save_filename save_lineno\n+\t\t{ tree decl = current_function_decl;\n+\t\t  DECL_SOURCE_FILE (decl) = $4;\n+\t\t  DECL_SOURCE_LINE (decl) = $5;\n+\t\t  store_parm_decls (); }\n /* This used to use compstmt_or_error.\n    That caused a bug with input `f(g) int g {}',\n    where the use of YYERROR1 above caused an error\n    which then was handled by compstmt_or_error.\n    There followed a repeated execution of that same rule,\n    which called YYERROR1 again, and so on.  */\n-\t  save_filename save_lineno compstmt\n+\t  compstmt\n \t\t{ tree decl = current_function_decl;\n-\t\t  DECL_SOURCE_FILE (decl) = $5;\n-\t\t  DECL_SOURCE_LINE (decl) = $6;\n \t\t  finish_function (1, 1);\n \t\t  pop_function_context ();\n \t\t  add_decl_stmt (decl); }"}, {"sha": "d0e90519821411b6f362a120bd72cd97b4942b55", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b190f239060ec7ac9cb71d1c75303bf730cd6773/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b190f239060ec7ac9cb71d1c75303bf730cd6773/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b190f239060ec7ac9cb71d1c75303bf730cd6773", "patch": "@@ -1,3 +1,9 @@\n+2003-05-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* pt.c (register_specialization): Update the decl's location,\n+\tif necessary.\n+\t(check_explicit_specialization): Likewise.\n+\n 2003-05-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* error.c (dump_expr): Use HOST_WIDE_INT_PRINT_DOUBLE_HEX."}, {"sha": "c86a1573c437cd034784b7930400aeafef7747c3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b190f239060ec7ac9cb71d1c75303bf730cd6773/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b190f239060ec7ac9cb71d1c75303bf730cd6773/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b190f239060ec7ac9cb71d1c75303bf730cd6773", "patch": "@@ -1041,7 +1041,12 @@ register_specialization (spec, tmpl, args)\n \t\t}\n \t      else if (DECL_TEMPLATE_SPECIALIZATION (fn))\n \t\t{\n-\t\t  duplicate_decls (spec, fn);\n+\t\t  if (!duplicate_decls (spec, fn) && DECL_INITIAL (spec))\n+\t\t    /* Dup decl failed, but this is a new\n+\t\t       definition. Set the line number so any errors\n+\t\t       match this new definition. */\n+\t\t    DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (spec);\n+\t\t  \n \t\t  return fn;\n \t\t}\n \t    }\n@@ -1851,6 +1856,12 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t    {\n \t      SET_DECL_TEMPLATE_SPECIALIZATION (tmpl);\n \t      DECL_INITIAL (DECL_TEMPLATE_RESULT (tmpl)) = NULL_TREE;\n+\t      if (have_def)\n+\t\t{\n+\t\t  DECL_SOURCE_LOCATION (tmpl) = DECL_SOURCE_LOCATION (decl);\n+\t\t  DECL_SOURCE_LOCATION (DECL_TEMPLATE_RESULT (tmpl))\n+\t\t    = DECL_SOURCE_LOCATION (decl);\n+\t\t}\n \t      return tmpl;\n \t    }\n "}]}