{"sha": "2fe5d6c32a959c4a2958459a70effa03dab51e0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlNWQ2YzMyYTk1OWM0YTI5NTg0NTlhNzBlZmZhMDNkYWI1MWUwZA==", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-08-09T15:14:46Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2021-09-06T14:18:34Z"}, "message": "module: Add load_items() function", "tree": {"sha": "ffd763bfb6eb4a9da51d38cc1ff47d0ec61b4f76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd763bfb6eb4a9da51d38cc1ff47d0ec61b4f76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe5d6c32a959c4a2958459a70effa03dab51e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe5d6c32a959c4a2958459a70effa03dab51e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe5d6c32a959c4a2958459a70effa03dab51e0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe5d6c32a959c4a2958459a70effa03dab51e0d/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f69bf1369826e52919d4342cc5f89b1f10aa64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6f69bf1369826e52919d4342cc5f89b1f10aa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6f69bf1369826e52919d4342cc5f89b1f10aa64"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "888a834d2c00dcd88636441586724e562d1dfe99", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5d6c32a959c4a2958459a70effa03dab51e0d/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5d6c32a959c4a2958459a70effa03dab51e0d/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=2fe5d6c32a959c4a2958459a70effa03dab51e0d", "patch": "@@ -24,6 +24,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rust-diagnostics.h\"\n #include \"rust-ast-visitor.h\"\n #include \"rust-session-manager.h\"\n+#include \"rust-lex.h\"\n+#include \"rust-parse.h\"\n #include \"operator.h\"\n \n /* Compilation unit used for various AST-related functions that would make\n@@ -4082,6 +4084,37 @@ Module::get_filename ()\n \t\t\t: current_directory_name + expected_dir_path;\n }\n \n+void\n+Module::load_items ()\n+{\n+  std::string mod_file = get_filename ();\n+\n+  // We will already have errored out appropriately in the get_filename ()\n+  // method\n+  if (mod_file.empty ())\n+    return;\n+\n+  RAIIFile file_wrap (mod_file.c_str ());\n+  Linemap *linemap = Session::get_instance ().linemap;\n+\n+  if (file_wrap.get_raw () == nullptr)\n+    rust_fatal_error (Location (), \"cannot open module file %s: %m\",\n+\t\t      mod_file.c_str ());\n+\n+  rust_debug (\"Attempting to parse file %s\", mod_file.c_str ());\n+\n+  Lexer lex (mod_file.c_str (), std::move (file_wrap), linemap);\n+  Parser<Lexer> parser (std::move (lex));\n+\n+  auto items = parser.parse_items ();\n+\n+  for (const auto &error : parser.get_errors ())\n+    error.emit_error ();\n+\n+  items = std::move(items);\n+  kind = ModuleKind::LOADED;\n+}\n+\n void\n Attribute::parse_attr_to_meta_item ()\n {"}, {"sha": "112ca282cb44386a56daa65970435284d5eb9a5c", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5d6c32a959c4a2958459a70effa03dab51e0d/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5d6c32a959c4a2958459a70effa03dab51e0d/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=2fe5d6c32a959c4a2958459a70effa03dab51e0d", "patch": "@@ -1053,6 +1053,8 @@ class Module : public VisItem\n \n   // Search for the filename associated with an external module\n   std::string get_filename ();\n+  // Load the items contained in an external module\n+  void load_items ();\n \n   void accept_vis (ASTVisitor &vis) override;\n "}]}