{"sha": "47ad4138968382305b6f563c8745356c653dc9b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhZDQxMzg5NjgzODIzMDViNmY1NjNjODc0NTM1NmM2NTNkYzliNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2001-10-06T23:11:27Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-10-06T23:11:27Z"}, "message": "cpplex.c (enum spell_type): Add SPELL_NUMBER.\n\n\t* cpplex.c (enum spell_type): Add SPELL_NUMBER.\n\t(cpp_token_len, cpp_spell_token, cpp_output_token,\n\t_cpp_equiv_tokens): Handle it.\n\t* cpplib.h (TTYPE_TABLE): Use SPELL_NUMBER for CPP_NUMBER and\n\tCPP_COMMENT, SPELL_NONE for CPP_PADDING and CPP_EOF.\n\t* cppexp.c (_cpp_parse_expr): Use the correct operator code in\n\terror messages.\n\nFrom-SVN: r46052", "tree": {"sha": "18e0a81db62c23158e5b9bb4e1bc8f943923ea29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18e0a81db62c23158e5b9bb4e1bc8f943923ea29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47ad4138968382305b6f563c8745356c653dc9b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ad4138968382305b6f563c8745356c653dc9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47ad4138968382305b6f563c8745356c653dc9b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47ad4138968382305b6f563c8745356c653dc9b4/comments", "author": null, "committer": null, "parents": [{"sha": "7fb56130c433ad5492234da98506fe00dfbd00d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb56130c433ad5492234da98506fe00dfbd00d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb56130c433ad5492234da98506fe00dfbd00d4"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "f898b269842d92b9805411493881255e1fbbfdb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ad4138968382305b6f563c8745356c653dc9b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ad4138968382305b6f563c8745356c653dc9b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47ad4138968382305b6f563c8745356c653dc9b4", "patch": "@@ -1,3 +1,13 @@\n+2001-10-06  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cpplex.c (enum spell_type): Add SPELL_NUMBER.\n+\t(cpp_token_len, cpp_spell_token, cpp_output_token,\n+\t_cpp_equiv_tokens): Handle it.\n+\t* cpplib.h (TTYPE_TABLE): Use SPELL_NUMBER for CPP_NUMBER and\n+\tCPP_COMMENT, SPELL_NONE for CPP_PADDING and CPP_EOF.\n+\t* cppexp.c (_cpp_parse_expr): Use the correct operator code in\n+\terror messages.\n+\n Sat Oct  6 07:42:39 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* gcc.c (default_compilers): Remove .ada."}, {"sha": "e2ed7de4b8d896327d6d3408be167f8996854f5a", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ad4138968382305b6f563c8745356c653dc9b4/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ad4138968382305b6f563c8745356c653dc9b4/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=47ad4138968382305b6f563c8745356c653dc9b4", "patch": "@@ -819,13 +819,13 @@ _cpp_parse_expr (pfile)\n \t{\n \t  if (top->flags & HAVE_VALUE)\n \t    SYNTAX_ERROR2 (\"missing binary operator before '%s'\",\n-\t\t\t   op_as_text (pfile, top->op));\n+\t\t\t   op_as_text (pfile, op.op));\n \t}\n       else\n \t{\n \t  if (!(top->flags & HAVE_VALUE))\n \t    SYNTAX_ERROR2 (\"operator '%s' has no left operand\",\n-\t\t\t   op_as_text (pfile, top->op));\n+\t\t\t   op_as_text (pfile, op.op));\n \t}\n \n       /* Check for and handle stack overflow.  */"}, {"sha": "02bf7c6648660801825c876a2c29491300f86f3d", "filename": "gcc/cpplex.c", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ad4138968382305b6f563c8745356c653dc9b4/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ad4138968382305b6f563c8745356c653dc9b4/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=47ad4138968382305b6f563c8745356c653dc9b4", "patch": "@@ -58,6 +58,7 @@ enum spell_type\n   SPELL_OPERATOR = 0,\n   SPELL_CHAR,\n   SPELL_IDENT,\n+  SPELL_NUMBER,\n   SPELL_STRING,\n   SPELL_NONE\n };\n@@ -1412,10 +1413,11 @@ cpp_token_len (token)\n   switch (TOKEN_SPELL (token))\n     {\n     default:\t\tlen = 0;\t\t\t\tbreak;\n+    case SPELL_NUMBER:\n     case SPELL_STRING:\tlen = token->val.str.len;\t\tbreak;\n     case SPELL_IDENT:\tlen = NODE_LEN (token->val.node);\tbreak;\n     }\n-  /* 1 for whitespace, 4 for comment delimeters.  */\n+  /* 1 for whitespace, 4 for comment delimiters.  */\n   return len + 5;\n }\n \n@@ -1449,12 +1451,21 @@ cpp_spell_token (pfile, token, buffer)\n       }\n       break;\n \n+    case SPELL_CHAR:\n+      *buffer++ = token->val.c;\n+      break;\n+\n+    spell_ident:\n     case SPELL_IDENT:\n-      spell_ident:\n       memcpy (buffer, NODE_NAME (token->val.node), NODE_LEN (token->val.node));\n       buffer += NODE_LEN (token->val.node);\n       break;\n \n+    case SPELL_NUMBER:\n+      memcpy (buffer, token->val.str.text, token->val.str.len);\n+      buffer += token->val.str.len;\n+      break;\n+\n     case SPELL_STRING:\n       {\n \tint left, right, tag;\n@@ -1465,20 +1476,18 @@ cpp_spell_token (pfile, token, buffer)\n \t  case CPP_CHAR:\tleft = '\\''; right = '\\''; tag = '\\0'; break;\n     \t  case CPP_WCHAR:\tleft = '\\''; right = '\\''; tag = 'L';  break;\n \t  case CPP_HEADER_NAME:\tleft = '<';  right = '>';  tag = '\\0'; break;\n-\t  default:\t\tleft = '\\0'; right = '\\0'; tag = '\\0'; break;\n+\t  default:\n+\t    cpp_ice (pfile, \"unknown string token %s\\n\", TOKEN_NAME (token));\n+\t    return buffer;\n \t  }\n \tif (tag) *buffer++ = tag;\n-\tif (left) *buffer++ = left;\n+\t*buffer++ = left;\n \tmemcpy (buffer, token->val.str.text, token->val.str.len);\n \tbuffer += token->val.str.len;\n-\tif (right) *buffer++ = right;\n+\t*buffer++ = right;\n       }\n       break;\n \n-    case SPELL_CHAR:\n-      *buffer++ = token->val.c;\n-      break;\n-\n     case SPELL_NONE:\n       cpp_ice (pfile, \"Unspellable token %s\", TOKEN_NAME (token));\n       break;\n@@ -1541,11 +1550,19 @@ cpp_output_token (token, fp)\n       }\n       break;\n \n+    case SPELL_CHAR:\n+      putc (token->val.c, fp);\n+      break;\n+\n     spell_ident:\n     case SPELL_IDENT:\n       fwrite (NODE_NAME (token->val.node), 1, NODE_LEN (token->val.node), fp);\n     break;\n \n+    case SPELL_NUMBER:\n+      fwrite (token->val.str.text, 1, token->val.str.len, fp);\n+      break;\n+\n     case SPELL_STRING:\n       {\n \tint left, right, tag;\n@@ -1556,19 +1573,17 @@ cpp_output_token (token, fp)\n \t  case CPP_CHAR:\tleft = '\\''; right = '\\''; tag = '\\0'; break;\n     \t  case CPP_WCHAR:\tleft = '\\''; right = '\\''; tag = 'L';  break;\n \t  case CPP_HEADER_NAME:\tleft = '<';  right = '>';  tag = '\\0'; break;\n-\t  default:\t\tleft = '\\0'; right = '\\0'; tag = '\\0'; break;\n+\t  default:\n+\t    fprintf (stderr, \"impossible STRING token %s\\n\", TOKEN_NAME (token));\n+\t    return;\n \t  }\n \tif (tag) putc (tag, fp);\n-\tif (left) putc (left, fp);\n+\tputc (left, fp);\n \tfwrite (token->val.str.text, 1, token->val.str.len, fp);\n-\tif (right) putc (right, fp);\n+\tputc (right, fp);\n       }\n       break;\n \n-    case SPELL_CHAR:\n-      putc (token->val.c, fp);\n-      break;\n-\n     case SPELL_NONE:\n       /* An error, most probably.  */\n       break;\n@@ -1592,6 +1607,7 @@ _cpp_equiv_tokens (a, b)\n \treturn (a->type != CPP_MACRO_ARG || a->val.arg_no == b->val.arg_no);\n       case SPELL_IDENT:\n \treturn a->val.node == b->val.node;\n+      case SPELL_NUMBER:\n       case SPELL_STRING:\n \treturn (a->val.str.len == b->val.str.len\n \t\t&& !memcmp (a->val.str.text, b->val.str.text,"}, {"sha": "b258c72674633b1d3460a877c2014d68a05394cb", "filename": "gcc/cpplib.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47ad4138968382305b6f563c8745356c653dc9b4/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47ad4138968382305b6f563c8745356c653dc9b4/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=47ad4138968382305b6f563c8745356c653dc9b4", "patch": "@@ -122,7 +122,7 @@ struct file_name_map_list;\n   OP(CPP_ATSIGN,\t\"@\")  /* used in Objective C */ \\\n \\\n   TK(CPP_NAME,\t\tSPELL_IDENT)\t/* word */\t\t\t\\\n-  TK(CPP_NUMBER,\tSPELL_STRING)\t/* 34_be+ta  */\t\t\t\\\n+  TK(CPP_NUMBER,\tSPELL_NUMBER)\t/* 34_be+ta  */\t\t\t\\\n \\\n   TK(CPP_CHAR,\t\tSPELL_STRING)\t/* 'char' */\t\t\t\\\n   TK(CPP_WCHAR,\t\tSPELL_STRING)\t/* L'char' */\t\t\t\\\n@@ -132,10 +132,11 @@ struct file_name_map_list;\n   TK(CPP_WSTRING,\tSPELL_STRING)\t/* L\"string\" */\t\t\t\\\n   TK(CPP_HEADER_NAME,\tSPELL_STRING)\t/* <stdio.h> in #include */\t\\\n \\\n-  TK(CPP_COMMENT,\tSPELL_STRING)\t/* Only if output comments.  */ \\\n+  TK(CPP_COMMENT,\tSPELL_NUMBER)\t/* Only if output comments.  */ \\\n+                                        /* SPELL_NUMBER happens to DTRT.  */ \\\n   TK(CPP_MACRO_ARG,\tSPELL_NONE)\t/* Macro argument.  */\t\t\\\n-  OP(CPP_PADDING,\t\"\")\t\t/* Whitespace for cpp0.  */\t\\\n-  OP(CPP_EOF,\t\t\"EOL\")\t\t/* End of line or file.  */\n+  TK(CPP_PADDING,\tSPELL_NONE)\t/* Whitespace for cpp0.  */\t\\\n+  TK(CPP_EOF,\t\tSPELL_NONE)\t/* End of line or file.  */\n \n #define OP(e, s) e,\n #define TK(e, s) e,"}]}