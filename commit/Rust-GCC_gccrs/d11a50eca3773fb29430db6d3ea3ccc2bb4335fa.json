{"sha": "d11a50eca3773fb29430db6d3ea3ccc2bb4335fa", "node_id": "C_kwDOANBUbNoAKGQxMWE1MGVjYTM3NzNmYjI5NDMwZGI2ZDNlYTNjY2MyYmI0MzM1ZmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-07T11:58:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-07T11:58:32Z"}, "message": "Merge #798\n\n798: Add missing const folding r=philberty a=philberty\n\nAdd some more missing constant-folding operations\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "6d459b779636d255a9539fd42508263f8836452d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d459b779636d255a9539fd42508263f8836452d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d11a50eca3773fb29430db6d3ea3ccc2bb4335fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhh79oCRBK7hj4Ov3rIwAAVpoIAHdAUWGMoYBbKQvv0frzmtWW\nk43haD+tLH0obkSaSXxJGQn6TUnuwr5dm2YfJrgucJ7mkG9nckDqB2qroJBaAEtn\nLx1GkHnuMQYDQDIo1pdKLWVlRLEfr60yuuccFp+rm7foRw3JLRfnEb01VNO/5PtB\nl0O+iwdbNJA1NhggwMRxwhsYpx4Z2tkxSWHpBFe+3r6FUo4TOO15Zm0s+2QeNtUD\nL8JlDXXJgL5g08JilbbTd+IXgsIW42O6whqsm1XIP+JlUW4MU+NYmOYXov4TXF7z\nlr58w3x4KxseR11k1BAgl4p1G/r40baAhgue2D5lZy4ozn4N1c4GIaGH8dtvTCg=\n=AiUg\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d459b779636d255a9539fd42508263f8836452d\nparent 57b10aef62e8759afc413df8882fcd4fb5f098bf\nparent bc858da45c3c0b445d57ed9f3bf9d2122076171e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636286312 +0000\ncommitter GitHub <noreply@github.com> 1636286312 +0000\n\nMerge #798\n\n798: Add missing const folding r=philberty a=philberty\n\nAdd some more missing constant-folding operations\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11a50eca3773fb29430db6d3ea3ccc2bb4335fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d11a50eca3773fb29430db6d3ea3ccc2bb4335fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11a50eca3773fb29430db6d3ea3ccc2bb4335fa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b10aef62e8759afc413df8882fcd4fb5f098bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b10aef62e8759afc413df8882fcd4fb5f098bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b10aef62e8759afc413df8882fcd4fb5f098bf"}, {"sha": "bc858da45c3c0b445d57ed9f3bf9d2122076171e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc858da45c3c0b445d57ed9f3bf9d2122076171e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc858da45c3c0b445d57ed9f3bf9d2122076171e"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "b3a53ebaf74a512118b3bd3aadadf7f57f503ad4", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11a50eca3773fb29430db6d3ea3ccc2bb4335fa/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11a50eca3773fb29430db6d3ea3ccc2bb4335fa/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=d11a50eca3773fb29430db6d3ea3ccc2bb4335fa", "patch": "@@ -47,9 +47,33 @@ class ConstFoldType : public TyTy::TyVisitor\n     translated = backend->array_type (element_ty, type.get_capacity ());\n   }\n \n-  void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ReferenceType &type) override\n+  {\n+    Btype *base_compiled_type = ConstFoldType::fold (type.get_base (), backend);\n+    if (type.is_mutable ())\n+      {\n+\ttranslated = backend->reference_type (base_compiled_type);\n+      }\n+    else\n+      {\n+\tauto base = backend->immutable_type (base_compiled_type);\n+\ttranslated = backend->reference_type (base);\n+      }\n+  }\n \n-  void visit (TyTy::PointerType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PointerType &type) override\n+  {\n+    Btype *base_compiled_type = ConstFoldType::fold (type.get_base (), backend);\n+    if (type.is_mutable ())\n+      {\n+\ttranslated = backend->pointer_type (base_compiled_type);\n+      }\n+    else\n+      {\n+\tauto base = backend->immutable_type (base_compiled_type);\n+\ttranslated = backend->pointer_type (base);\n+      }\n+  }\n \n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n \n@@ -436,6 +460,38 @@ class ConstFoldExpr : public ConstFoldBase\n \t\t\t\t\t\t\t  expr.get_locus ());\n   }\n \n+  void visit (HIR::BorrowExpr &expr) override\n+  {\n+    Bexpression *main_expr = ConstFoldExpr::fold (expr.get_expr ().get ());\n+\n+    folded\n+      = ctx->get_backend ()->address_expression (main_expr, expr.get_locus ());\n+  }\n+\n+  void visit (HIR::DereferenceExpr &expr) override\n+  {\n+    Bexpression *main_expr = ConstFoldExpr::fold (expr.get_expr ().get ());\n+\n+    TyTy::BaseType *tyty = nullptr;\n+    if (!tyctx->lookup_type (expr.get_mappings ().get_hirid (), &tyty))\n+      {\n+\trust_fatal_error (expr.get_locus (),\n+\t\t\t  \"did not resolve type for this TupleExpr\");\n+\treturn;\n+      }\n+\n+    Btype *expected_type = ConstFoldType::fold (tyty, ctx->get_backend ());\n+    bool known_valid = true;\n+    folded = ctx->get_backend ()->indirect_expression (expected_type, main_expr,\n+\t\t\t\t\t\t       known_valid,\n+\t\t\t\t\t\t       expr.get_locus ());\n+  }\n+\n+  void visit (HIR::GroupedExpr &expr) override\n+  {\n+    folded = ConstFoldExpr::fold (expr.get_expr_in_parens ().get ());\n+  }\n+\n private:\n   ConstFoldExpr ()\n     : ConstFoldBase (), folded (ctx->get_backend ()->error_expression ())"}]}