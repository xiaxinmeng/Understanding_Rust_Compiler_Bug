{"sha": "7b4cae1b530c88b2e723c5cf621ceb5cb97183b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I0Y2FlMWI1MzBjODhiMmU3MjNjNWNmNjIxY2ViNWNiOTcxODNiNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-14T13:53:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-14T13:53:35Z"}, "message": "tree-ssa-forwprop.c (simplify_gimple_switch): Enhance check for which sign-changes we allow when...\n\n2014-04-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (simplify_gimple_switch): Enhance\n\tcheck for which sign-changes we allow when forwarding\n\ta converted value into a switch.\n\n\t* g++.dg/tree-ssa/forwprop-switch.C: New testcase.\n\nFrom-SVN: r209372", "tree": {"sha": "879cbb3e2f547759d82534d22cd3800c96ceb24c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/879cbb3e2f547759d82534d22cd3800c96ceb24c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4116e7d0e0cd33503b5968808ef6e6edc987d816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4116e7d0e0cd33503b5968808ef6e6edc987d816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4116e7d0e0cd33503b5968808ef6e6edc987d816"}], "stats": {"total": 89, "additions": 59, "deletions": 30}, "files": [{"sha": "724c5f532a0bac657c6c7317980be2a49935af6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b4cae1b530c88b2e723c5cf621ceb5cb97183b5", "patch": "@@ -1,3 +1,9 @@\n+2014-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (simplify_gimple_switch): Enhance\n+\tcheck for which sign-changes we allow when forwarding\n+\ta converted value into a switch.\n+\n 2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* stor-layout.c (place_field): Finalize non-constant offset for the"}, {"sha": "0a741fb0b68cfd5dabc32ac1dfd69f696601170c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b4cae1b530c88b2e723c5cf621ceb5cb97183b5", "patch": "@@ -1,3 +1,7 @@\n+2014-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/tree-ssa/forwprop-switch.C: New testcase.\n+\n 2014-04-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/lto/pr55113_0.c: Skip on i?86-*-solaris2.1[0-1]*."}, {"sha": "c3f12ac45ae65d57b21e314dff6cfcf73e770312", "filename": "gcc/testsuite/g++.dg/tree-ssa/forwprop-switch.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fforwprop-switch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fforwprop-switch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fforwprop-switch.C?ref=7b4cae1b530c88b2e723c5cf621ceb5cb97183b5", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-O -fdump-tree-cddce1\" }\n+\n+enum Scale  { E1, E2, E3, E4, E5, E6, E7, E8 };\n+\n+int Test(Scale s)\n+{ \n+  switch(s)\n+    {\n+      case E1: return 12;\n+      case E2: return 17;\n+      case E3: return 22;\n+      case E4: return 42;\n+      default:  break;\n+    }\n+  return 0;\n+}\n+\n+// tree forwprop should have eliminated the (int) s cast for the\n+// switch value and directly switch on the 's' parameter\n+\n+// { dg-final { scan-tree-dump-not \"\\\\\\(int\\\\\\)\" \"cddce1\" } }\n+// { dg-final { scan-tree-dump \"switch \\\\\\(s_.\\\\\\(D\\\\\\)\\\\\\)\" \"cddce1\" } }\n+// { dg-final { cleanup-tree-dump \"cddce1\" } }"}, {"sha": "b6bedfea6d7f6d39d2a517538656ddf386817029", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b4cae1b530c88b2e723c5cf621ceb5cb97183b5/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=7b4cae1b530c88b2e723c5cf621ceb5cb97183b5", "patch": "@@ -1356,43 +1356,38 @@ simplify_gimple_switch_label_vec (gimple stmt, tree index_type)\n static bool\n simplify_gimple_switch (gimple stmt)\n {\n-  tree cond = gimple_switch_index (stmt);\n-  tree def, to, ti;\n-  gimple def_stmt;\n-\n   /* The optimization that we really care about is removing unnecessary\n      casts.  That will let us do much better in propagating the inferred\n      constant at the switch target.  */\n+  tree cond = gimple_switch_index (stmt);\n   if (TREE_CODE (cond) == SSA_NAME)\n     {\n-      def_stmt = SSA_NAME_DEF_STMT (cond);\n-      if (is_gimple_assign (def_stmt))\n+      gimple def_stmt = SSA_NAME_DEF_STMT (cond);\n+      if (gimple_assign_cast_p (def_stmt))\n \t{\n-\t  if (gimple_assign_rhs_code (def_stmt) == NOP_EXPR)\n-\t    {\n-\t      int need_precision;\n-\t      bool fail;\n-\n-\t      def = gimple_assign_rhs1 (def_stmt);\n-\n-\t      to = TREE_TYPE (cond);\n-\t      ti = TREE_TYPE (def);\n-\n-\t      /* If we have an extension that preserves value, then we\n-\t\t can copy the source value into the switch.  */\n-\n-\t      need_precision = TYPE_PRECISION (ti);\n-\t      fail = false;\n-\t      if (! INTEGRAL_TYPE_P (ti))\n-\t\tfail = true;\n-\t      else if (TYPE_UNSIGNED (to) && !TYPE_UNSIGNED (ti))\n-\t\tfail = true;\n-\t      else if (!TYPE_UNSIGNED (to) && TYPE_UNSIGNED (ti))\n-\t\tneed_precision += 1;\n-\t      if (TYPE_PRECISION (to) < need_precision)\n-\t\tfail = true;\n+\t  tree def = gimple_assign_rhs1 (def_stmt);\n+\t  if (TREE_CODE (def) != SSA_NAME)\n+\t    return false;\n \n-\t      if (!fail)\n+\t  /* If we have an extension or sign-change that preserves the\n+\t     values we check against then we can copy the source value into\n+\t     the switch.  */\n+\t  tree ti = TREE_TYPE (def);\n+\t  if (INTEGRAL_TYPE_P (ti)\n+\t      && TYPE_PRECISION (ti) <= TYPE_PRECISION (TREE_TYPE (cond)))\n+\t    {\n+\t      size_t n = gimple_switch_num_labels (stmt);\n+\t      tree min = NULL_TREE, max = NULL_TREE;\n+\t      if (n > 1)\n+\t\t{\n+\t\t  min = CASE_LOW (gimple_switch_label (stmt, 1));\n+\t\t  if (CASE_HIGH (gimple_switch_label (stmt, n - 1)))\n+\t\t    max = CASE_HIGH (gimple_switch_label (stmt, n - 1));\n+\t\t  else\n+\t\t    max = CASE_LOW (gimple_switch_label (stmt, n - 1));\n+\t\t}\n+\t      if ((!min || int_fits_type_p (min, ti))\n+\t\t  && (!max || int_fits_type_p (max, ti)))\n \t\t{\n \t\t  gimple_switch_set_index (stmt, def);\n \t\t  simplify_gimple_switch_label_vec (stmt, ti);"}]}