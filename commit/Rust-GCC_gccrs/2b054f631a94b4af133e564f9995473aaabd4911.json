{"sha": "2b054f631a94b4af133e564f9995473aaabd4911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIwNTRmNjMxYTk0YjRhZjEzM2U1NjRmOTk5NTQ3M2FhYWJkNDkxMQ==", "commit": {"author": {"name": "Daniel Frey", "email": "d.frey@gmx.de", "date": "2010-01-26T13:33:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-26T13:33:06Z"}, "message": "functional: Use enable_if instead of __enable_if throughout, do not include ext/type_traits.h.\n\n2010-01-26  Daniel Frey  <d.frey@gmx.de>\n\n\t* include/std/functional: Use enable_if instead of __enable_if\n\tthroughout, do not include ext/type_traits.h.\n\t(is_placeholder, is_bind_expression): Use integral_constant.\n\nFrom-SVN: r156246", "tree": {"sha": "4c62d2fc3e5b5d6646ef9814fa0edcc637d56e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c62d2fc3e5b5d6646ef9814fa0edcc637d56e81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b054f631a94b4af133e564f9995473aaabd4911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b054f631a94b4af133e564f9995473aaabd4911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b054f631a94b4af133e564f9995473aaabd4911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b054f631a94b4af133e564f9995473aaabd4911/comments", "author": {"login": "d-frey", "id": 3956325, "node_id": "MDQ6VXNlcjM5NTYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3956325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/d-frey", "html_url": "https://github.com/d-frey", "followers_url": "https://api.github.com/users/d-frey/followers", "following_url": "https://api.github.com/users/d-frey/following{/other_user}", "gists_url": "https://api.github.com/users/d-frey/gists{/gist_id}", "starred_url": "https://api.github.com/users/d-frey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/d-frey/subscriptions", "organizations_url": "https://api.github.com/users/d-frey/orgs", "repos_url": "https://api.github.com/users/d-frey/repos", "events_url": "https://api.github.com/users/d-frey/events{/privacy}", "received_events_url": "https://api.github.com/users/d-frey/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0f66eea4fd4bafb915a6435ba1f3063d0757bbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f66eea4fd4bafb915a6435ba1f3063d0757bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f66eea4fd4bafb915a6435ba1f3063d0757bbe"}], "stats": {"total": 56, "additions": 23, "deletions": 33}, "files": [{"sha": "a0d319720f82437fdf9a406d931fca7d9e0e24e2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b054f631a94b4af133e564f9995473aaabd4911/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b054f631a94b4af133e564f9995473aaabd4911/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2b054f631a94b4af133e564f9995473aaabd4911", "patch": "@@ -1,3 +1,9 @@\n+2010-01-26  Daniel Frey  <d.frey@gmx.de>\n+\n+\t* include/std/functional: Use enable_if instead of __enable_if\n+\tthroughout, do not include ext/type_traits.h.\n+\t(is_placeholder, is_bind_expression): Use integral_constant.\n+\n 2010-01-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/util/testsuite_common_types.h (has_bitwise_operators):"}, {"sha": "29b19f67d0f8aab0e0b8b31a8322e53d32f13523", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 17, "deletions": 33, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b054f631a94b4af133e564f9995473aaabd4911/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b054f631a94b4af133e564f9995473aaabd4911/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=2b054f631a94b4af133e564f9995473aaabd4911", "patch": "@@ -56,7 +56,6 @@\n #include <tuple>\n #include <type_traits>\n #include <bits/functional_hash.h>\n-#include <ext/type_traits.h>\n \n namespace std\n {\n@@ -234,12 +233,12 @@ namespace std\n    */\n   template<typename _Functor, typename... _Args>\n     inline\n-    typename __gnu_cxx::__enable_if<\n+    typename enable_if<\n              (!is_member_pointer<_Functor>::value\n               && !is_function<_Functor>::value\n               && !is_function<typename remove_pointer<_Functor>::type>::value),\n              typename result_of<_Functor(_Args...)>::type\n-           >::__type\n+           >::type\n     __invoke(_Functor& __f, _Args&&... __args)\n     {\n       return __f(std::forward<_Args>(__args)...);\n@@ -248,11 +247,11 @@ namespace std\n   // To pick up function references (that will become function pointers)\n   template<typename _Functor, typename... _Args>\n     inline\n-    typename __gnu_cxx::__enable_if<\n+    typename enable_if<\n              (is_pointer<_Functor>::value\n               && is_function<typename remove_pointer<_Functor>::type>::value),\n              typename result_of<_Functor(_Args...)>::type\n-           >::__type\n+           >::type\n     __invoke(_Functor __f, _Args&&... __args)\n     {\n       return __f(std::forward<_Args>(__args)...);\n@@ -769,21 +768,16 @@ namespace std\n    */\n   template<typename _Tp>\n     struct is_bind_expression\n-    { static const bool value = false; };\n-\n-  template<typename _Tp>\n-    const bool is_bind_expression<_Tp>::value;\n+    : public false_type { };\n \n   /**\n    *  @brief Determines if the given type _Tp is a placeholder in a\n    *  bind() expression and, if so, which placeholder it is. [TR1 3.6.2]\n    */\n   template<typename _Tp>\n     struct is_placeholder\n-    { static const int value = 0; };\n-\n-  template<typename _Tp>\n-    const int is_placeholder<_Tp>::value;\n+    : public integral_constant<int, 0>\n+    { };\n \n   /// The type of placeholder objects defined by libstdc++.\n   template<int _Num> struct _Placeholder { };\n@@ -837,10 +831,8 @@ namespace std\n    */\n   template<int _Num>\n     struct is_placeholder<_Placeholder<_Num> >\n-    { static const int value = _Num; };\n-\n-  template<int _Num>\n-    const int is_placeholder<_Placeholder<_Num> >::value;\n+    : public integral_constant<int, _Num>\n+    { };\n \n   /**\n    * Stores a tuple of indices. Used by bind() to extract the elements\n@@ -1346,18 +1338,12 @@ namespace std\n   /// Class template _Bind is always a bind expression.\n   template<typename _Signature>\n     struct is_bind_expression<_Bind<_Signature> >\n-    { static const bool value = true; };\n-\n-  template<typename _Signature>\n-    const bool is_bind_expression<_Bind<_Signature> >::value;\n+    : public true_type { };\n \n   /// Class template _Bind_result is always a bind expression.\n   template<typename _Result, typename _Signature>\n     struct is_bind_expression<_Bind_result<_Result, _Signature> >\n-    { static const bool value = true; };\n-\n-  template<typename _Result, typename _Signature>\n-    const bool is_bind_expression<_Bind_result<_Result, _Signature> >::value;\n+    : public true_type { };\n \n   /// bind\n   template<typename _Functor, typename... _ArgTypes>\n@@ -1850,8 +1836,8 @@ namespace std\n        */\n       template<typename _Functor>\n         function(_Functor __f,\n-                 typename __gnu_cxx::__enable_if<\n-                           !is_integral<_Functor>::value, _Useless>::__type\n+                 typename enable_if<\n+                           !is_integral<_Functor>::value, _Useless>::type\n                    = _Useless());\n \n       /**\n@@ -1927,8 +1913,7 @@ namespace std\n        *  reference_wrapper<F>, this function will not throw.\n        */\n       template<typename _Functor>\n-        typename __gnu_cxx::__enable_if<!is_integral<_Functor>::value,\n-\t                                function&>::__type\n+        typename enable_if<!is_integral<_Functor>::value, function&>::type\n \toperator=(_Functor&& __f)\n \t{\n \t  function(std::forward<_Functor>(__f)).swap(*this);\n@@ -1937,8 +1922,7 @@ namespace std\n \n       /// @overload\n       template<typename _Functor>\n-        typename __gnu_cxx::__enable_if<!is_integral<_Functor>::value,\n-\t                                function&>::__type\n+        typename enable_if<!is_integral<_Functor>::value, function&>::type\n \toperator=(reference_wrapper<_Functor> __f)\n \t{\n \t  function(__f).swap(*this);\n@@ -2059,8 +2043,8 @@ namespace std\n     template<typename _Functor>\n       function<_Res(_ArgTypes...)>::\n       function(_Functor __f,\n-\t       typename __gnu_cxx::__enable_if<\n-                       !is_integral<_Functor>::value, _Useless>::__type)\n+\t       typename enable_if<\n+\t                !is_integral<_Functor>::value, _Useless>::type)\n       : _Function_base()\n       {\n \ttypedef _Function_handler<_Signature_type, _Functor> _My_handler;"}]}