{"sha": "2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlZTI4ZGQ0MWZmMmIyYmM3MzIyM2FhYTE4ZDAyZTUzMjliMjE5Zg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-10T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-10T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "93fd7ee462611aa40c7b51327983600f50bb3a2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93fd7ee462611aa40c7b51327983600f50bb3a2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/comments", "author": null, "committer": null, "parents": [{"sha": "04126e46eb2d829d7b4149d394b667e878912cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04126e46eb2d829d7b4149d394b667e878912cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04126e46eb2d829d7b4149d394b667e878912cc8"}], "stats": {"total": 419, "additions": 418, "deletions": 1}, "files": [{"sha": "b6e6275b83c46ead08bf6678154bd4cf4dcee7e3", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1,3 +1,12 @@\n+2020-11-09  Pat Bernardi  <bernardi@adacore.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n+2020-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config-ml.in (multi-do, multi-clean): Add @ to silence recipes.\n+\tRemove FIXME comments.\n+\n 2020-11-06  Martin Uecker  <muecker@gwdg.de>\n \n \t* MAINTAINERS: Update my email address."}, {"sha": "75092451216dd95ed36d81839387e77c40271572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1,3 +1,125 @@\n+2020-11-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_split_move): Recognize vadd2 instructions.\n+\t* config/arc/arc.md (movdi_insn): Update pattern to use vadd2\n+\tinstructions.\n+\t(movdf_insn): Likewise.\n+\t(maddhisi4): New pattern.\n+\t(umaddhisi4): Likewise.\n+\t* config/arc/simdext.md (mov<mode>_int): Update pattern to use\n+\tvadd2.\n+\t(sdot_prodv4hi): New pattern.\n+\t(udot_prodv4hi): Likewise.\n+\t(arc_vec_<V_US>mac_hi_v4hi): Update/renamed to\n+\tarc_vec_<V_US>mac_v2hiv2si.\n+\t(arc_vec_<V_US>mac_v2hiv2si_zero): New pattern.\n+\t* config/arc/constraints.md (Ral): Accumulator register\n+\tconstraint.\n+\n+2020-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* function-tests.c (test_ranges): Call range_op_tests.\n+\t* range-op.cc (build_range3): Move to value-range.cc.\n+\t(range3_tests): Same.\n+\t(int_range_max_tests): Same.\n+\t(multi_precision_range_tests): Same.\n+\t(range_tests): Same.\n+\t(operator_tests): Split up...\n+\t(range_op_tests): Split up...\n+\t(range_op_cast_tests): ...here.\n+\t(range_op_lshift_tests): ...here.\n+\t(range_op_rshift_tests): ...here.\n+\t(range_op_bitwise_and_tests): ...here.\n+\t* selftest.h (range_op_tests): New.\n+\t* value-range.cc (build_range3): New.\n+\t(range_tests_irange3): New.\n+\t(range_tests_int_range_max): New.\n+\t(range_tests_legacy): New.\n+\t(range_tests_misc): New.\n+\t(range_tests): New.\n+\n+2020-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97761\n+\t* tree-vect-slp.c (vect_bb_slp_mark_live_stmts): Remove\n+\tpremature end of DFS walk.\n+\n+2020-11-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (irange::swap_out_of_order_endpoints): Rewrite\n+\tinto static function.\n+\t(irange::set): Cleanup redundant manipulations.\n+\t* value-range.h (irange::normalize_min_max): Modify object\n+\tin-place instead of modifying arguments.\n+\n+2020-11-09  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_expand_fcmla_builtin): Do not alter force_reg returned\n+\tregister.\n+\n+2020-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97753\n+\t* tree-vect-loop.c (vectorizable_induction): Fill vec_steps\n+\twhen CSEing inside the group.\n+\n+2020-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97746\n+\t* tree-vect-patterns.c (vect_determine_precisions): First walk PHIs.\n+\n+2020-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (get_representative_for): CSE VN_INFO calls.\n+\t(create_expression_by_pieces): Likewise.\n+\t(insert_into_preds_of_block): Likewsie.\n+\t(do_pre_regular_insertion): Likewsie.\n+\t* tree-ssa-sccvn.c (eliminate_dom_walker::eliminate_insert):\n+\tLikewise.\n+\t(eliminate_dom_walker::eliminate_stmt): Likewise.\n+\n+2020-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97765\n+\t* tree-ssa-pre.c (bb_bitmap_sets::phi_translate_table): Add.\n+\t(PHI_TRANS_TABLE): New macro.\n+\t(phi_translate_table): Remove.\n+\t(expr_pred_trans_d::pred): Remove.\n+\t(expr_pred_trans_d::hash): Simplify.\n+\t(expr_pred_trans_d::equal): Likewise.\n+\t(phi_trans_add): Adjust.\n+\t(phi_translate): Likewise.  Remove hash-table expansion\n+\tdetection and optimization.\n+\t(phi_translate_set): Allocate PHI_TRANS_TABLE here.\n+\t(init_pre): Adjsust.\n+\t(fini_pre): Free PHI_TRANS_TABLE.\n+\n+2020-11-09  Lili Cui  <lili.cui@intel.com>\n+\n+\tPR target/97685\n+\t* config/i386/i386.h:\n+\t(PTA_BROADWELL): Delete PTA_PRFCHW.\n+\t(PTA_SILVERMONT): Add PTA_PRFCHW.\n+\t(PTA_KNL): Add PTA_PREFETCHWT1.\n+\t(PTA_TREMONT): Add PTA_MOVDIRI, PTA_MOVDIR64B, PTA_CLDEMOTE and PTA_WAITPKG.\n+\t* doc/invoke.texi: Delete PREFETCHW for broadwell, skylake, knl, knm,\n+\tskylake-avx512, cannonlake, icelake-client, icelake-server, cascadelake,\n+\tcooperlake, tigerlake and sapphirerapids.\n+\tAdd PREFETCHW for silvermont, goldmont, goldmont-plus and tremont.\n+\tAdd XSAVEC and XSAVES for goldmont, goldmont-plus and tremont.\n+\tAdd MOVDIRI, MOVDIR64B, CLDEMOTE and WAITPKG for tremont.\n+\tAdd KEYLOCKER and HREST for alderlake.\n+\tAdd AMX-BF16, AMX-TILE, AMX-INT8 and UINTR for sapphirerapids.\n+\tAdd KEYLOCKER for tigerlake.\n+\n+2020-11-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR rtl-optimization/97705\n+\t* ira.c (ira): Refactor some regstat free/init/compute invocation\n+\tinto lambda function regstat_recompute_for_max_regno, and call it\n+\twhen max_regno increases as remove_scratches succeeds.\n+\n 2020-11-08  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_mangle_decl_assembler_name): Change"}, {"sha": "2cca29cf6c69489db5db2e7ead92a2f72e9af35b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1 +1 @@\n-20201109\n+20201110"}, {"sha": "d2ad0581ba1043ec397365f3169bc3188bc34733", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1,3 +1,30 @@\n+2020-11-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 1914\n+\t* c-common.c (attribute_fallthrough_p): Tweak the warning\n+\tmessage.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* c-pragma.c (handle_pragma_diagnostic): Split the\n+\tunknown-option -Wpragmas diagnostic into a warning and a\n+\tsubsequent note containing a spelling suggestion.  Avoid\n+\tcomputing the suggestion if -Wpragmas warnings are being\n+\tsuppressed.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR testsuite/97117\n+\t* c-indentation.c (get_visual_column): Remove location_t\n+\tparameter.  Move the column-tracking diagnostic code from here\n+\tto ...\n+\t(should_warn_for_misleading_indentation): ... here, before the\n+\tearly exit for when the loci are not all distinct.  Don't pass a\n+\tlocation_t argument to get_visual_column.\n+\t(assert_get_visual_column_succeeds): Don't pass a location_t\n+\targument to get_visual_column.\n+\t(assert_get_visual_column_fails): Likewise.\n+\n 2020-11-08  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* c-common.h (OBJC_IS_PATTR_KEYWORD): Add class to the list"}, {"sha": "9c36b80f9d388108a9a596cd44f784cdb5b7bc79", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1,3 +1,99 @@\n+2020-11-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 1914\n+\t* parser.c (cp_parser_check_std_attribute): Return bool.  Add a\n+\tlocation_t parameter.  Return true if the attribute wasn't duplicated.\n+\tGive a warning instead of an error.  Check more attributes.\n+\t(cp_parser_std_attribute_list): Don't add duplicated attributes to\n+\tthe list.  Pass location to cp_parser_check_std_attribute.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (norm_info::norm_info): Initialize orig_decl.\n+\t(norm_info::orig_decl): New data member.\n+\t(normalize_atom): When caching an atom for the first time,\n+\tcompute a list of template parameters used in the targets of the\n+\tparameter mapping and store it in the TREE_TYPE of the mapping.\n+\t(get_normalized_constraints_from_decl): Set current_function_decl\n+\tappropriately when normalizing.  As an optimization, don't\n+\tset up a push_nested_class_guard when decl has no constraints.\n+\t(sat_hasher::hash): Use this list to hash only the template\n+\targuments that are relevant to the atom.\n+\t(satisfy_atom): Use this list to compare only the template\n+\targuments that are relevant to the atom.\n+\t* pt.c (keep_template_parm): Do a sanity check on the parameter's\n+\tindex when flag_checking.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h (ATOMIC_CONSTR_MAP_INSTANTIATED_P): Define this flag\n+\tfor ATOMIC_CONSTRs.\n+\t* constraint.cc (sat_hasher::hash): Use hash_atomic_constraint\n+\tif the flag is set, otherwise keep using a pointer hash.\n+\t(sat_hasher::equal): Return false if the flag's setting differs\n+\ton two atoms.  Call atomic_constraints_identical_p if the flag\n+\tis set, otherwise keep using a pointer equality test.\n+\t(satisfy_atom): After instantiating the parameter mapping, form\n+\tanother ATOMIC_CONSTR using the instantiated mapping and query\n+\tthe cache again.  Cache the satisfaction value of both atoms.\n+\t(diagnose_atomic_constraint): Simplify now that the supplied\n+\tatom has an instantiated mapping.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (atom_cache): Define this deletable hash_table.\n+\t(normalize_atom): Use it to cache ATOMIC_CONSTRs when not\n+\tgenerating diagnostics.\n+\t(sat_hasher::hash): Use htab_hash_pointer instead of\n+\thash_atomic_constraint.\n+\t(sat_hasher::equal): Test for pointer equality instead of\n+\tatomic_constraints_identical_p.\n+\t* cp-tree.h (struct atom_hasher): Moved and renamed from ...\n+\t* logic.cc (struct constraint_hash): ... here.\n+\t(clause::m_set): Adjust accordingly.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/93907\n+\t* constraint.cc (tsubst_parameter_mapping): Also canonicalize\n+\tthe type arguments of a TYPE_ARGUMENT_PACk.\n+\n+2020-11-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (tsubst): Replace *_ARGUMENT_PACK code with\n+\ta call to tsubst_argument_pack.\n+\n+2020-11-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* class.c (handle_using_decl): Add an iloc_sentinel.\n+\n+2020-11-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97762\n+\t* parser.c (warn_about_ambiguous_parse): Handle the case when\n+\tthere is no type in the decl-specifiers.\n+\n+2020-11-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (LOOKUP_FOUND_P): Add ENUMERAL_TYPE.\n+\t* name-lookup.c (class name_lookup): Add comments.\n+\t(name_lookup::adl_namespace_only): Replace with ...\n+\t(name_lookup::adl_class_fns): ... this and ...\n+\t(name_lookup::adl_namespace_fns): ... this.\n+\t(name_lookup::adl_namespace): Deal with inline nests here.\n+\t(name_lookup::adl_class): Complete the type here.\n+\t(name_lookup::adl_type): Call broken-out enum ..\n+\t(name_lookup::adl_enum): New.  No need to call the namespace adl\n+\tif it is class-scope.\n+\t(name_lookup::search_adl): Iterate over collected scopes here.\n+\n+2020-11-09  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (lookup_qualified_name): Expose an overload of a\n+\tsingleton with known type.\n+\t(lookup_name_1): Just check the overload's type to expose it.\n+\t* parser.c (cp_parser_lookup_name): Do not do that check here.\n+\n 2020-11-08  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* parser.c (cp_parser_objc_at_property_declaration): Handle"}, {"sha": "f5c6066dc629cbb7b9e9389ba2e53872295ce302", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1,3 +1,10 @@\n+2020-11-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/90111\n+\t* parse.c (case_decl): Move ST_OACC_ROUTINE and ST_OACC_DECLARE to ...\n+\t(case_omp_decl): ... here.\n+\t(verify_st_order): Update comment.\n+\n 2020-11-06  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* openmp.c (oacc_is_parallel, resolve_oacc_params_in_parallel):"}, {"sha": "7f89efa6d9f0c27ba30fd397c0177ad6c7ea9385", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1,3 +1,69 @@\n+2020-11-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 1914\n+\t* c-c++-common/attr-fallthrough-2.c: Adjust dg-warning.\n+\t* g++.dg/cpp0x/fallthrough2.C: Likewise.\n+\t* g++.dg/cpp0x/gen-attrs-60.C: Turn dg-error into dg-warning.\n+\t* g++.dg/cpp1y/attr-deprecated-2.C: Likewise.\n+\t* g++.dg/cpp2a/attr-likely2.C: Adjust dg-warning.\n+\t* g++.dg/cpp2a/nodiscard-once.C: Turn dg-error into dg-warning.\n+\t* g++.dg/cpp0x/gen-attrs-72.C: New test.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-decltype2.C: New file.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/93907\n+\t* g++.dg/cpp2a/concepts-using3.C: New test, based off of\n+\tconcepts-using2.C.\n+\n+2020-11-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/lookup/using26.C: Adjust location.\n+\t* g++.old-deja/g++.other/using1.C: Adjust location.\n+\n+2020-11-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97762\n+\t* g++.dg/warn/Wvexing-parse8.C: New test.\n+\n+2020-11-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* gcc.dg/pragma-diag-6.c: Adjust expected diagnostics\n+\taccordingly.\n+\n+2020-11-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/90111\n+\t* gfortran.dg/goacc/specification-part.f90: New test.\n+\n+2020-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97761\n+\t* gfortran.dg/vect/pr97761.f90: New testcase.\n+\n+2020-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97753\n+\t* gcc.dg/vect/pr97753.c: New testcase.\n+\n+2020-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97746\n+\t* gcc.dg/vect/bb-slp-pr97746.c: New testcase.\n+\n+2020-11-09  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/simd/vld1_lane_bf16_1.c: Require target to\n+\tsupport and add -mfloat-abi=hard flag.\n+\t* gcc.target/arm/simd/vld1_lane_bf16_indices_1.c: Likewise.\n+\t* gcc.target/arm/simd/vld1q_lane_bf16_indices_1.c: Likewise.\n+\t* gcc.target/arm/simd/vst1_lane_bf16_1.c: Likewise.\n+\t* gcc.target/arm/simd/vst1_lane_bf16_indices_1.c: Likewise.\n+\t* gcc.target/arm/simd/vstq1_lane_bf16_indices_1.c: Likewise.\n+\n 2020-11-08  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* obj-c++.dg/property/at-property-4.mm: Test handling class"}, {"sha": "642b959987363edd76f3eeee73b8287231956928", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1,3 +1,7 @@\n+2020-11-09  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* pex-win32.c (pex_win32_exec_child): Initialize orig_err.\n+\n 2020-10-06  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/97290"}, {"sha": "2441dfc0259fa817692b45dcd25cc66a680217d0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bee28dd41ff2b2bc73223aaa18d02e5329b219f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2bee28dd41ff2b2bc73223aaa18d02e5329b219f", "patch": "@@ -1,3 +1,89 @@\n+2020-11-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/array: Remove.\n+\t* include/Makefile.am: Remove <debug/array>.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/functional: Adapt.\n+\t* include/std/array: Move to _GLIBCXX_INLINE_VERSION namespace.\n+\t* include/std/functional: Adapt.\n+\t* include/std/span: Adapt.\n+\t* testsuite/23_containers/array/debug/back1_neg.cc:\n+\tRemove dg-require-debug-mode. Add -D_GLIBCXX_ASSERTIONS option.\n+\t* testsuite/23_containers/array/debug/back2_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/front1_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/front2_neg.cc: Likewise.\n+\t* testsuite/23_containers/array/debug/square_brackets_operator1_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/debug/square_brackets_operator2_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/element_access/60497.cc\n+\t* testsuite/23_containers/array/tuple_interface/get_debug_neg.cc:\n+\tRemove.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_debug_neg.cc\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element_neg.cc\n+\n+2020-11-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/assertions.h (__glibcxx_requires_non_empty_range):\n+\tRemove __builtin_expect.\n+\t(__glibcxx_requires_subscript): Likewise.\n+\t(__glibcxx_requires_nonempty): Likewise.\n+\t* include/debug/formatter.h (__check_singular): Add C++11 constexpr\n+\tqualification.\n+\t* include/debug/helper_functions.h (__check_singular): Likewise. Skip\n+\tcheck if constant evaluated.\n+\t(__valid_range): Do not skip check if constant evaluated.\n+\t* include/debug/macros.h (_GLIBCXX_DEBUG_VERIFY_COND_AT): Add\n+\t__builtin_expect.\n+\t(_GLIBCXX_DEBUG_VERIFY_AT_F): Use __glibcxx_assert_1.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/back_constexpr_neg.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/constexpr.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/constexpr_neg.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/front_back_constexpr.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/front_constexpr_neg.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/back_constexpr_neg.cc:\n+\tNew test.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/constexpr.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/constexpr_neg.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/front_constexpr_neg.cc:\n+\tNew test.\n+\t* testsuite/25_algorithms/lower_bound/debug/constexpr_partitioned_neg.cc: New test.\n+\t* testsuite/25_algorithms/lower_bound/debug/constexpr_partitioned_pred_neg.cc: New test.\n+\t* testsuite/25_algorithms/lower_bound/debug/constexpr_valid_range_neg.cc: New test.\n+\t* testsuite/25_algorithms/lower_bound/debug/partitioned_neg.cc: New test.\n+\t* testsuite/25_algorithms/lower_bound/debug/partitioned_pred_neg.cc: New test.\n+\t* testsuite/25_algorithms/upper_bound/debug/constexpr_partitioned_neg.cc: New test.\n+\t* testsuite/25_algorithms/upper_bound/debug/constexpr_partitioned_pred_neg.cc: New test.\n+\t* testsuite/25_algorithms/upper_bound/debug/constexpr_valid_range_neg.cc: New test.\n+\t* testsuite/25_algorithms/upper_bound/debug/partitioned_neg.cc: New test.\n+\t* testsuite/25_algorithms/upper_bound/debug/partitioned_pred_neg.cc: New test.\n+\n+2020-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/uniform_int_dist.h (__detail::_Power_of_2):\n+\tDocument that true result for zero is intentional.\n+\n+2020-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/bit (__popcount): Remove redundant check for zero.\n+\n+2020-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97729\n+\t* libsupc++/exception_ptr.h (exception_ptr::exception_ptr())\n+\t(exception_ptr::exception_ptr(const exception_ptr&))\n+\t(exception_ptr::~exception_ptr()): Remove 'always_inline'\n+\tattributes. Use 'inline' unconditionally.\n+\n+2020-11-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97758\n+\t* include/bits/std_function.h [!__cpp_rtti]: Include <typeinfo>.\n+\n 2020-11-07  Liu Hao  <lh_mouse@126.com>\n \n \t* libsupc++/cxxabi.h: (__cxa_atexit): mark with _GLIBCXX_CDTOR_CALLABI"}]}