{"sha": "9250444b59bb08bd5939c4af410eb153153baef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1MDQ0NGI1OWJiMDhiZDU5MzljNGFmNDEwZWIxNTMxNTNiYWVmOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-12-07T23:18:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-12-07T23:18:29Z"}, "message": "re PR target/63668 (-mstd-struct-return fails for non-leaf functions)\n\n\tPR target/63668\n\t* doc/invoke.texi (SPARC options): Document -mstd-struct-return.\n\t* config/sparc/sparc.c (sparc_struct_value_rtx): Minor tweaks.\n\t* config/sparc/sparc.h (CALL_REALLY_USED_REGISTERS): Define.\n\t* config/sparc/sparc.opt (mstd-struct-return): Accept negative form.\n\nFrom-SVN: r231387", "tree": {"sha": "5d9f8cdcf5e2b3092a1f3216fffbffdc3ab45619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d9f8cdcf5e2b3092a1f3216fffbffdc3ab45619"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9250444b59bb08bd5939c4af410eb153153baef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9250444b59bb08bd5939c4af410eb153153baef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9250444b59bb08bd5939c4af410eb153153baef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9250444b59bb08bd5939c4af410eb153153baef9/comments", "author": null, "committer": null, "parents": [{"sha": "7c010e27a9e9d975ff265264ae515f7dc9feebd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c010e27a9e9d975ff265264ae515f7dc9feebd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c010e27a9e9d975ff265264ae515f7dc9feebd6"}], "stats": {"total": 105, "additions": 92, "deletions": 13}, "files": [{"sha": "f6f3ff5723192b60e0c75f2f3eb171e1f1c47f5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9250444b59bb08bd5939c4af410eb153153baef9", "patch": "@@ -1,3 +1,11 @@\n+2015-12-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/63668\n+\t* doc/invoke.texi (SPARC options): Document -mstd-struct-return.\n+\t* config/sparc/sparc.c (sparc_struct_value_rtx): Minor tweaks.\n+\t* config/sparc/sparc.h (CALL_REALLY_USED_REGISTERS): Define.\n+\t* config/sparc/sparc.opt (mstd-struct-return): Accept negative.\n+\n 2015-12-07  Steve Ellcey  <sellcey@imgtec.com>\n \n \t* reorg.c (optimize_skip): Do not put frame related instructions\n@@ -14,7 +22,7 @@\n \n 2015-12-07  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* fold-const.c (operand_equal_p): Drp flag_strict_aliasing check.\n+\t* fold-const.c (operand_equal_p): Drop flag_strict_aliasing check.\n \n 2015-12-07  Nathan Sidwell  <nathan@acm.org>\n "}, {"sha": "55ddacf511eefe48d53fb7f724bfdc08bb09c8d4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9250444b59bb08bd5939c4af410eb153153baef9", "patch": "@@ -7199,17 +7199,16 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n \t  && TYPE_SIZE_UNIT (TREE_TYPE (fndecl))\n \t  && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (fndecl))) == INTEGER_CST)\n \t{\n-\t  /* We must check and adjust the return address, as it is\n-\t     optional as to whether the return object is really\n-\t     provided.  */\n-\t  rtx ret_reg = gen_rtx_REG (Pmode, 31);\n+\t  /* We must check and adjust the return address, as it is optional\n+\t     as to whether the return object is really provided.  */\n+\t  rtx ret_reg = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n \t  rtx scratch = gen_reg_rtx (SImode);\n \t  rtx_code_label *endlab = gen_label_rtx ();\n \n-\t  /* Calculate the return object size */\n+\t  /* Calculate the return object size.  */\n \t  tree size = TYPE_SIZE_UNIT (TREE_TYPE (fndecl));\n \t  rtx size_rtx = GEN_INT (TREE_INT_CST_LOW (size) & 0xfff);\n-\t  /* Construct a temporary return value */\n+\t  /* Construct a temporary return value.  */\n \t  rtx temp_val\n \t    = assign_stack_local (Pmode, TREE_INT_CST_LOW (size), 0);\n \n@@ -7221,13 +7220,13 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n \t  emit_move_insn (scratch, gen_rtx_MEM (SImode,\n \t\t\t\t\t\tplus_constant (Pmode,\n \t\t\t\t\t\t\t       ret_reg, 8)));\n-\t  /* Assume the size is valid and pre-adjust */\n+\t  /* Assume the size is valid and pre-adjust.  */\n \t  emit_insn (gen_add3_insn (ret_reg, ret_reg, GEN_INT (4)));\n \t  emit_cmp_and_jump_insns (scratch, size_rtx, EQ, const0_rtx, SImode,\n \t\t\t\t   0, endlab);\n \t  emit_insn (gen_sub3_insn (ret_reg, ret_reg, GEN_INT (4)));\n \t  /* Write the address of the memory pointed to by temp_val into\n-\t     the memory pointed to by mem */\n+\t     the memory pointed to by mem.  */\n \t  emit_move_insn (mem, XEXP (temp_val, 0));\n \t  emit_label (endlab);\n \t}"}, {"sha": "d599418c0885ca1a0812fbc044e52932fbe9cdf3", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=9250444b59bb08bd5939c4af410eb153153baef9", "patch": "@@ -696,6 +696,31 @@ extern enum cmodel sparc_cmodel;\n \t\t\t\t\\\n   1, 1, 1, 1, 1, 1, 1}\n \n+/* 1 for registers not available across function calls.\n+   Unlike the above, this need not include the FIXED_REGISTERS, but any\n+   registers that can be used without being saved.\n+   The latter must include the registers where values are returned\n+   and the register where structure-value addresses are passed.\n+   Aside from that, you can include as many other registers as you like.  */\n+\n+#define CALL_REALLY_USED_REGISTERS  \\\n+ {1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+  0, 0, 0, 0, 0, 0, 0, 0,\t\\\n+\t\t\t\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+\t\t\t\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1,\t\\\n+\t\t\t\t\\\n+  1, 1, 1, 1, 1, 1, 1}\n+\n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n    This is ordinarily the length in words of a value of mode MODE"}, {"sha": "a50ba05ace4c9fc53f65d1fc3c936fb96e55d4e8", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=9250444b59bb08bd5939c4af410eb153153baef9", "patch": "@@ -203,7 +203,7 @@ Target RejectNegative Joined Var(sparc_debug_string)\n Enable debug output.\n \n mstd-struct-return\n-Target Report RejectNegative Var(sparc_std_struct_return)\n+Target Report Var(sparc_std_struct_return)\n Enable strict 32-bit psABI struct return checking.\n \n mfix-at697f"}, {"sha": "9a30a2f769e6b675630f6f8779d3e004edbd3e64", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9250444b59bb08bd5939c4af410eb153153baef9", "patch": "@@ -1022,6 +1022,7 @@ See RS/6000 and PowerPC Options.\n -mfpu  -mno-fpu  -mhard-float  -msoft-float @gol\n -mhard-quad-float  -msoft-quad-float @gol\n -mstack-bias  -mno-stack-bias @gol\n+-mstd-struct-return  -mno-std-struct-return @gol\n -munaligned-doubles  -mno-unaligned-doubles @gol\n -muser-mode  -mno-user-mode @gol\n -mv8plus  -mno-v8plus  -mvis  -mno-vis @gol\n@@ -21586,10 +21587,10 @@ Do not generate code that can only run in supervisor mode.  This is relevant\n only for the @code{casa} instruction emitted for the LEON3 processor.  This\n is the default.\n \n-@item -mno-faster-structs\n-@itemx -mfaster-structs\n-@opindex mno-faster-structs\n+@item -mfaster-structs\n+@itemx -mno-faster-structs\n @opindex mfaster-structs\n+@opindex mno-faster-structs\n With @option{-mfaster-structs}, the compiler assumes that structures\n should have 8-byte alignment.  This enables the use of pairs of\n @code{ldd} and @code{std} instructions for copies in structure\n@@ -21599,6 +21600,17 @@ ABI@.  Thus, it's intended only for use on targets where the developer\n acknowledges that their resulting code is not directly in line with\n the rules of the ABI@.\n \n+@item -mstd-struct-return\n+@itemx -mno-std-struct-return\n+@opindex mstd-struct-return\n+@opindex mno-std-struct-return\n+With @option{-mstd-struct-return}, the compiler generates checking code\n+in functions returning structures or unions that detect size mismatches\n+between the two sides of function calls, as per the 32-bit ABI@.\n+\n+The default is @option{-mno-std-struct-return}.  This option has no effect\n+in 64-bit mode.\n+\n @item -mcpu=@var{cpu_type}\n @opindex mcpu\n Set the instruction set, register set, and instruction scheduling parameters"}, {"sha": "fec47e137fb80f3dd690fa4cfde080a68f7d4123", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9250444b59bb08bd5939c4af410eb153153baef9", "patch": "@@ -1,3 +1,9 @@\n+2015-12-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/struct-ret-check.c: Rename to...\n+\t* gcc.target/sparc/struct-ret-check-1.c: ...this.\n+\t* gcc.target/sparc/struct-ret-check-2.c: New test.\n+\n 2015-12-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/68760"}, {"sha": "00307fe2978e4b240dc5d56f30ff59bf3df4175b", "filename": "gcc/testsuite/gcc.target/sparc/struct-ret-check-1.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check-1.c?ref=9250444b59bb08bd5939c4af410eb153153baef9", "previous_filename": "gcc/testsuite/gcc.target/sparc/struct-ret-check.c"}, {"sha": "2b815345ab9ea055d0ba638fc5845b6583404213", "filename": "gcc/testsuite/gcc.target/sparc/struct-ret-check-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9250444b59bb08bd5939c4af410eb153153baef9/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check-2.c?ref=9250444b59bb08bd5939c4af410eb153153baef9", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O -mstd-struct-return\" } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+extern void abort (void);\n+\n+struct S { int x, y, z; };\n+\n+extern void bar (struct S *s) __attribute__ ((noinline, noclone));\n+\n+void bar (struct S *s)\n+{\n+  s->x++;\n+}\n+\n+struct S foo (void)\n+{\n+  struct S s = { 0, 2, 3 };\n+  bar (&s);\n+  return s;\n+}\n+\n+int main (void)\n+{\n+  struct S s = foo ();\n+  if (s.x != 1)\n+    abort ();\n+  return 0;\n+}"}]}