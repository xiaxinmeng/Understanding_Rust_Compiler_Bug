{"sha": "37c74e2816535f654390781de97cc01206b0ff31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdjNzRlMjgxNjUzNWY2NTQzOTA3ODFkZTk3Y2MwMTIwNmIwZmYzMQ==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-07-24T14:39:54Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-07-24T14:39:54Z"}, "message": "Reimplment matcher using Depth-first search(backtracking).\n\n2013-07-24  Tim Shen  <timshen91@gmail.com>\n\n\tReimplment matcher using Depth-first search(backtracking).\n\tPR libstdc++/53622\n\tPR libstdc++/57173\n\t* include/bits/regex.h: regex_match() and regex_search().\n\t* include/bits/regex_cursor.h: Fix _M_set_pos().\n\t* include/bits/regex_grep_matcher.h: add _M_dfs_match().\n\t* include/bits/regex_grep_matcher.tcc: Implement it.\n\t* testsuite/28_regex/algorithms/regex_match/extended/string_group_01.cc:\n\tNew.\n\t* testsuite/28_regex/algorithms/regex_match/extended/string_group_02.cc:\n\tNew.\n\t* testsuite/28_regex/algorithms/regex_search/basic/string_01.cc:\n\tRemove xfail.\n\nFrom-SVN: r201213", "tree": {"sha": "a4d363f2143c17d31818485bc16cce2febbdee66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4d363f2143c17d31818485bc16cce2febbdee66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37c74e2816535f654390781de97cc01206b0ff31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c74e2816535f654390781de97cc01206b0ff31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c74e2816535f654390781de97cc01206b0ff31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c74e2816535f654390781de97cc01206b0ff31/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0f0119244f33d11ad8caf6a028a67bbb2878f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f0119244f33d11ad8caf6a028a67bbb2878f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f0119244f33d11ad8caf6a028a67bbb2878f9e"}], "stats": {"total": 202, "additions": 193, "deletions": 9}, "files": [{"sha": "45dc9452afbbdac5aa208cf649e90d8f4db1f687", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=37c74e2816535f654390781de97cc01206b0ff31", "patch": "@@ -1,3 +1,19 @@\n+2013-07-24  Tim Shen  <timshen91@gmail.com>\n+\n+\tReimplment matcher using Depth-first search(backtracking).\n+\tPR libstdc++/53622\n+\tPR libstdc++/57173\n+\t* include/bits/regex.h: regex_match() and regex_search().\n+\t* include/bits/regex_cursor.h: Fix _M_set_pos().\n+\t* include/bits/regex_grep_matcher.h: add _M_dfs_match().\n+\t* include/bits/regex_grep_matcher.tcc: Implement it.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/string_group_01.cc:\n+\tNew.\n+\t* testsuite/28_regex/algorithms/regex_match/extended/string_group_02.cc:\n+\tNew.\n+\t* testsuite/28_regex/algorithms/regex_search/basic/string_01.cc:\n+\tRemove xfail.\n+\n 2013-07-23  Tim Shen  <timshen91@gmail.com>\n \n \tImplement regex_iterator and regex_token_iterator."}, {"sha": "64a1807033bc6b2d74f3e633ad1369c3657419e7", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=37c74e2816535f654390781de97cc01206b0ff31", "patch": "@@ -2185,8 +2185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __detail::_SpecializedCursor<_Bi_iter> __cs(__s, __e);\n       __detail::_SpecializedResults<_Bi_iter, _Alloc> __r(__sz, __cs, __m);\n       __detail::_Grep_matcher __matcher(__cs, __r, __a, __flags);\n-      __matcher._M_match();\n-      return __m[0].matched;\n+      return __matcher._M_dfs_match();\n     }\n \n   /**\n@@ -2338,8 +2337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         {\n           __detail::_SpecializedCursor<_Bi_iter> __curs(__cur, __last);\n           __detail::_Grep_matcher __matcher(__curs, __r, __a, __flags);\n-          __matcher._M_search_from_first();\n-          if (__m[0].matched)\n+          if (__matcher._M_dfs_search_from_first())\n             {\n               __r._M_set_range(__m.size(),\n                                __detail::_SpecializedCursor<_Bi_iter>"}, {"sha": "444d07ae2631ca588e2af83ecd04306c3e111171", "filename": "libstdc++-v3/include/bits/regex_cursor.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_cursor.h?ref=37c74e2816535f654390781de97cc01206b0ff31", "patch": "@@ -45,6 +45,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     virtual ~_PatternCursor() { };\n     virtual void _M_next() = 0;\n+    virtual void _M_prev() = 0;\n     virtual bool _M_at_end() const = 0;\n   };\n \n@@ -66,6 +67,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_next()\n       { ++_M_c; }\n \n+      void\n+      _M_prev()\n+      { --_M_c; }\n+\n       _FwdIterT\n       _M_pos() const\n       { return _M_c; }"}, {"sha": "c402c780f1cb4235ead0eb1f10f3a9321bf164a5", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h?ref=37c74e2816535f654390781de97cc01206b0ff31", "patch": "@@ -107,7 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__j == 0)\n \t_M_results.at(__i).first = __c._M_pos();\n       else\n-\t_M_results.at(__i).second = __c._M_pos()+1;\n+        _M_results.at(__i).second = __c._M_pos();\n     }\n \n   /// A stack of states used in evaluating the NFA.\n@@ -127,9 +127,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_pattern(__p), _M_results(__r)\n     { }\n \n-    void _M_match();\n+    void\n+    _M_match();\n+\n+    void\n+    _M_search_from_first();\n \n-    void _M_search_from_first();\n+    bool\n+    _M_dfs_match()\n+    { return _M_dfs<true>(_M_nfa->_M_start()); }\n+\n+    bool\n+    _M_dfs_search_from_first()\n+    { return _M_dfs<false>(_M_nfa->_M_start()); }\n \n   private:\n     _StateSet\n@@ -141,6 +151,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _StateSet\n     _M_e_closure(_StateStack& __stack, const _StateSet& __s);\n \n+    template<bool __match_mode>\n+      bool\n+      _M_dfs(_StateIdT __i);\n+\n     const std::shared_ptr<_Nfa>        _M_nfa;\n     _PatternCursor&                    _M_pattern;\n     _Results&                          _M_results;"}, {"sha": "46b9817488889a427973064ef4e14609d1a77c65", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.tcc", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc?ref=37c74e2816535f654390781de97cc01206b0ff31", "patch": "@@ -103,6 +103,56 @@ namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  // _M_dfs() take a state, along with current string cursor(_M_pattern),\n+  // trying to match current state with current character.\n+  // Only _S_opcode_match will consume a character.\n+  // TODO: This is too slow. Try to compile the NFA to a DFA.\n+  template<bool __match_mode>\n+    bool _Grep_matcher::\n+    _M_dfs(_StateIdT __i)\n+    {\n+      if (__i == _S_invalid_state_id)\n+        // This is not that certain. Need deeper investigate.\n+        return false;\n+      const auto& __state = (*_M_nfa)[__i];\n+      bool __ret = false;\n+      switch (__state._M_opcode)\n+        {\n+        case _S_opcode_alternative:\n+          // Greedy mode by default. For non-greedy mode,\n+          // swap _M_alt and _M_next.\n+          __ret = _M_dfs<__match_mode>(__state._M_alt)\n+            || _M_dfs<__match_mode>(__state._M_next);\n+          break;\n+        case _S_opcode_subexpr_begin:\n+          __state._M_tagger(_M_pattern, _M_results);\n+          __ret = _M_dfs<__match_mode>(__state._M_next);\n+          break;\n+        case _S_opcode_subexpr_end:\n+          __state._M_tagger(_M_pattern, _M_results);\n+          __ret = _M_dfs<__match_mode>(__state._M_next);\n+          _M_results._M_set_matched(__state._M_subexpr, __ret);\n+          break;\n+        case _S_opcode_match:\n+          if (!_M_pattern._M_at_end() && __state._M_matches(_M_pattern))\n+            {\n+              _M_pattern._M_next();\n+              __ret = _M_dfs<__match_mode>(__state._M_next);\n+              _M_pattern._M_prev();\n+            }\n+          break;\n+        case _S_opcode_accept:\n+          if (__match_mode)\n+            __ret = _M_pattern._M_at_end();\n+          else\n+            __ret = true;\n+          break;\n+        default:\n+          _GLIBCXX_DEBUG_ASSERT( false );\n+        }\n+      return __ret;\n+    }\n+\n   inline void _Grep_matcher::\n   _M_match()\n   {"}, {"sha": "383ed054a9073095fab3c9a0c710e877d3f1f3e8", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/53622.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2F53622.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2F53622.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2F53622.cc?ref=37c74e2816535f654390781de97cc01206b0ff31", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+//\n+// 2013-07-23  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.2 regex_match\n+// Tests Extended grouping against a std::string target.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/53622\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::regex  re(\"zxcv/(one.*)abc\", std::regex::extended);\n+  std::string target(\"zxcv/onetwoabc\");\n+  std::smatch m;\n+\n+  VERIFY( std::regex_search(target, m, re) );\n+  VERIFY( m.size() == 2 );\n+  VERIFY( m[0].matched == true );\n+  VERIFY( std::string(m[0].first, m[0].second) == \"zxcv/onetwoabc\" );\n+  VERIFY( m[1].matched == true );\n+  VERIFY( std::string(m[1].first, m[1].second) == \"onetwo\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3031c43d188bb392da6de4d2399b9f45ad78ceb5", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/57173.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2F57173.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2F57173.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2F57173.cc?ref=37c74e2816535f654390781de97cc01206b0ff31", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+//\n+// 2013-07-23  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.3 regex_search\n+// Tests Extended against a std::string target.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+#include <iostream>\n+\n+// libstdc++/57173\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::regex  re(\"/asdf(/.*)\", std::regex::extended);\n+  std::string target(\"/asdf/qwerty\");\n+  std::smatch m;\n+\n+  VERIFY( std::regex_match(target, m, re) );\n+  VERIFY( m.size() == 2 );\n+  VERIFY( std::string(m[1].first, m[1].second) == \"/qwerty\");\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ee487f1983663ec65bc75a41b74a220dd9844e33", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/basic/string_01.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37c74e2816535f654390781de97cc01206b0ff31/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc?ref=37c74e2816535f654390781de97cc01206b0ff31", "patch": "@@ -1,5 +1,4 @@\n // { dg-options \"-std=gnu++11\" }\n-// { dg-do run { xfail *-*-* } }\n \n //\n // 2013-07-17  Tim Shen <timshen91@gmail.com>\n@@ -32,7 +31,7 @@ test01()\n {\n   bool test __attribute__((unused)) = true;\n \n-  std::regex  re(\"as(df)\", std::regex::basic);\n+  std::regex  re(\"as\\\\(df\\\\)\", std::regex::basic);\n   std::string target(\"xxasdfyy\");\n   std::smatch m;\n "}]}