{"sha": "2dd484ed8ede94cd8940bbdfd8fa3d41c812430c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkNDg0ZWQ4ZWRlOTRjZDg5NDBiYmRmZDhmYTNkNDFjODEyNDMwYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-19T23:24:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-19T23:24:20Z"}, "message": "(force_to_mode): Don't allow sign-extension of constants when we are\nnarrowing things in an IOR or XOR.\n\nFrom-SVN: r6117", "tree": {"sha": "4dd7347c0739a0c602c80e2dc6f3e44902b18b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dd7347c0739a0c602c80e2dc6f3e44902b18b27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dd484ed8ede94cd8940bbdfd8fa3d41c812430c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd484ed8ede94cd8940bbdfd8fa3d41c812430c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd484ed8ede94cd8940bbdfd8fa3d41c812430c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd484ed8ede94cd8940bbdfd8fa3d41c812430c/comments", "author": null, "committer": null, "parents": [{"sha": "35fc1624acabf68663c05b029b75763bff8fd6ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35fc1624acabf68663c05b029b75763bff8fd6ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35fc1624acabf68663c05b029b75763bff8fd6ab"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "86be74a60b85fb1506e127c032723dde9bd99ad4", "filename": "gcc/combine.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd484ed8ede94cd8940bbdfd8fa3d41c812430c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd484ed8ede94cd8940bbdfd8fa3d41c812430c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2dd484ed8ede94cd8940bbdfd8fa3d41c812430c", "patch": "@@ -5790,6 +5790,14 @@ force_to_mode (x, mode, mask, reg)\n       op1 = gen_lowpart_for_combine (op_mode, force_to_mode (XEXP (x, 1),\n \t\t\t\t\t\t\t     mode, mask, reg));\n \n+      /* If OP1 is a CONST_INT and X is an IOR or XOR, clear bits outside\n+\t MASK since OP1 might have been sign-extended but we never want\n+\t to turn on extra bits, since combine might have previously relied\n+\t on them being off.  */\n+      if (GET_CODE (op1) == CONST_INT && (code == IOR || code == XOR)\n+\t  && (INTVAL (op1) & mask) != 0)\n+\top1 = GEN_INT (INTVAL (op1) & mask);\n+\t \n       if (op_mode != GET_MODE (x) || op0 != XEXP (x, 0) || op1 != XEXP (x, 1))\n \tx = gen_binary (code, op_mode, op0, op1);\n       break;"}]}