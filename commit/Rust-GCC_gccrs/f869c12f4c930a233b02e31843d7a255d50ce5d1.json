{"sha": "f869c12f4c930a233b02e31843d7a255d50ce5d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg2OWMxMmY0YzkzMGEyMzNiMDJlMzE4NDNkN2EyNTVkNTBjZTVkMQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-09T10:58:06Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-09T10:58:06Z"}, "message": "[PATCH PR target/67366 2/2] [gimple-fold.c] Support movmisalign optabs in gimple-fold.c\n\nThis patch by Richard allows for movmisalign optabs to be supported\nin gimple-fold.c. This caused a bit of pain in the testsuite with strlenopt-8.c\nin conjunction with the ARM support for movmisalign_optabs as the test\nwas coded up to do different things depending on whether the target\nsupported misaligned access or not. However now with unaligned access\nbeing allowed for different levels of the architecture in the arm backend,\nthe concept of the helper function non_strict_align mapping identically\nto the definition of STRICT_ALIGNMENT disappears.\n\nAdjusted thusly for ARM. The testsuite/lib changes were tested with an\narm-none-eabi multilib that included architecture variants that did not\nsupport unaligned access and architecture variants that did.\n\nThe testing matrix for this patch was:\n\n1. x86_64 bootstrap and regression test - no regressions.\n2. armhf bootstrap and regression test - no regressions.\n3. arm-none-eabi cross build and regression test for\n\n{-marm/-march=armv7-a/-mfpu=vfpv3-d16/-mfloat-abi=softfp}\n{-mthumb/-march=armv8-a/-mfpu=crypto-neon-fp-armv8/-mfloat-abi=hard}\n{-marm/-mcpu=arm7tdmi/-mfloat-abi=soft}\n{-mthumb/-mcpu=arm7tdmi/-mfloat-abi=soft}\n\nwith no regressions.\n\nOk to apply ?\n\n2015-10-09  Richard Biener  <rguenth@suse.de>\n\n\tPR target/67366\n\t* gimple-fold.c (optabs-query.h): Include\n\t(gimple_fold_builtin_memory_op): Allow unaligned stores\n\twhen movmisalign_optabs are available.\n\n2015-10-09  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR target/67366\n\t* lib/target-supports.exp (check_effective_target_non_strict_align):\n\tAdjust for arm*-*-*.\n\t* gcc.target/arm/pr67366.c: New test.\n\nFrom-SVN: r228644", "tree": {"sha": "28e427e367439d44f5e2009524bd7c9f75a8d3b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28e427e367439d44f5e2009524bd7c9f75a8d3b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f869c12f4c930a233b02e31843d7a255d50ce5d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f869c12f4c930a233b02e31843d7a255d50ce5d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f869c12f4c930a233b02e31843d7a255d50ce5d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f869c12f4c930a233b02e31843d7a255d50ce5d1/comments", "author": null, "committer": null, "parents": [{"sha": "a46b23e136f56e1bb44065d260b49c24b656bd8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46b23e136f56e1bb44065d260b49c24b656bd8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46b23e136f56e1bb44065d260b49c24b656bd8b"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "514bb313b4d853c9c6b3a3bcb10209ef683cd81e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f869c12f4c930a233b02e31843d7a255d50ce5d1", "patch": "@@ -1,3 +1,10 @@\n+2015-10-09  Richard Biener  <rguenth@suse.de>\n+\n+\tPR target/67366\n+\t* gimple-fold.c (optabs-query.h): Include\n+\t(gimple_fold_builtin_memory_op): Allow unaligned stores\n+\twhen movmisalign_optabs are available.\n+\n 2015-10-09  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n         PR target/67366"}, {"sha": "17a23d65f39249cfea1d02a3e8bf5ca7c9acd447", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=f869c12f4c930a233b02e31843d7a255d50ce5d1", "patch": "@@ -63,6 +63,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-eh.h\"\n #include \"gimple-match.h\"\n #include \"gomp-constants.h\"\n+#include \"optabs-query.h\"\n+\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from.\n@@ -709,7 +711,9 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t\t  /* If the destination pointer is not aligned we must be able\n \t\t     to emit an unaligned store.  */\n \t\t  && (dest_align >= GET_MODE_ALIGNMENT (TYPE_MODE (type))\n-\t\t      || !SLOW_UNALIGNED_ACCESS (TYPE_MODE (type), dest_align)))\n+\t\t      || !SLOW_UNALIGNED_ACCESS (TYPE_MODE (type), dest_align)\n+\t\t      || (optab_handler (movmisalign_optab, TYPE_MODE (type))\n+\t\t\t  != CODE_FOR_nothing)))\n \t\t{\n \t\t  tree srctype = type;\n \t\t  tree desttype = type;\n@@ -721,7 +725,10 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t\t    srcmem = tem;\n \t\t  else if (src_align < GET_MODE_ALIGNMENT (TYPE_MODE (type))\n \t\t\t   && SLOW_UNALIGNED_ACCESS (TYPE_MODE (type),\n-\t\t\t\t\t\t     src_align))\n+\t\t\t\t\t\t     src_align)\n+\t\t\t   && (optab_handler (movmisalign_optab,\n+\t\t\t\t\t      TYPE_MODE (type))\n+\t\t\t       == CODE_FOR_nothing))\n \t\t    srcmem = NULL_TREE;\n \t\t  if (srcmem)\n \t\t    {"}, {"sha": "d7eba156ccb54e4e5d7673f16bb9d4b4543fbf28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f869c12f4c930a233b02e31843d7a255d50ce5d1", "patch": "@@ -1,3 +1,10 @@\n+2015-10-09  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/67366\n+\t* lib/target-supports.exp (check_effective_target_non_strict_align):\n+\tAdjust for arm*-*-*.\n+\t* gcc.target/arm/pr67366.c: New test.\n+\n 2015-10-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/67891"}, {"sha": "1e8b6727003cd86d0c7a2a3fb3c2026a363b2cf0", "filename": "gcc/testsuite/gcc.target/arm/pr67366.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr67366.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr67366.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr67366.c?ref=f869c12f4c930a233b02e31843d7a255d50ce5d1", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_unaligned } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned int u32;\n+u32\n+read32 (const void* ptr)\n+{\n+  u32 v;\n+  __builtin_memcpy (&v, ptr, sizeof(v));\n+  return v;\n+}\n+\n+/* { dg-final { scan-assembler \"@ unaligned\" } } */"}, {"sha": "4d5b0a3df61ee427df18af681f9d7a954f148bc4", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f869c12f4c930a233b02e31843d7a255d50ce5d1/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=f869c12f4c930a233b02e31843d7a255d50ce5d1", "patch": "@@ -6262,6 +6262,15 @@ proc check_vect_support_and_set_flags { } {\n # Return 1 if the target does *not* require strict alignment.\n \n proc check_effective_target_non_strict_align {} {\n+\n+    # On ARM, the default is to use STRICT_ALIGNMENT, but there\n+    # are interfaces defined for misaligned access and thus\n+    # depending on the architecture levels unaligned access is\n+    # available.\n+    if [istarget \"arm*-*-*\"] {\n+\treturn [check_effective_target_arm_unaligned]\n+    }\n+\n     return [check_no_compiler_messages non_strict_align assembly {\n \tchar *y;\n \ttypedef char __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) c;"}]}