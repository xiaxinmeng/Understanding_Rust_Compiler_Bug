{"sha": "48784b0065c309540e324db75ee429cb1357b6f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3ODRiMDA2NWMzMDk1NDBlMzI0ZGI3NWVlNDI5Y2IxMzU3YjZmOA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-04-17T18:58:08Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-04-17T18:58:08Z"}, "message": "rs6000-protos.h (rs6000_builtin_is_supported_p): New prototype.\n\ngcc/ChangeLog:\n\n2018-04-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/rs6000-protos.h (rs6000_builtin_is_supported_p):\n\tNew prototype.\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n\tAdd note to error message to explain internal mapping of overloaded\n\tbuilt-in function name to non-overloaded built-in function name.\n\t* config/rs6000/rs6000.c (rs6000_builtin_is_supported_p): New\n\tfunction.\n\ngcc/testsuite/ChangeLog:\n\n2018-04-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/bfp/scalar-extract-sig-5.c: Simplify to\n\tprevent cascading of errors and change expected error message.\n\t* gcc.target/powerpc/bfp/scalar-test-neg-4.c: Restrict this test\n\tto 64-bit targets.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-8.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-9.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-test-data-class-10.c: Likewise.\n\t* gcc.target/powerpc/bfp/scalar-insert-exp-11.c: Change expected\n\terror message.\n\t* gcc.target/powerpc/bfp/scalar-extract-exp-5.c: Likewise.\n\nFrom-SVN: r259442", "tree": {"sha": "053dfd8d86ddef4bc618165cb58500490c4e7ef5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/053dfd8d86ddef4bc618165cb58500490c4e7ef5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48784b0065c309540e324db75ee429cb1357b6f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48784b0065c309540e324db75ee429cb1357b6f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48784b0065c309540e324db75ee429cb1357b6f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48784b0065c309540e324db75ee429cb1357b6f8/comments", "author": null, "committer": null, "parents": [{"sha": "63d6cbd1ff94e61809d84efab9794c18337b2568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d6cbd1ff94e61809d84efab9794c18337b2568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d6cbd1ff94e61809d84efab9794c18337b2568"}], "stats": {"total": 112, "additions": 100, "deletions": 12}, "files": [{"sha": "a136e541e13f576531bcbd5d87ccfd2db7a5ec54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -1,3 +1,13 @@\n+2018-04-17  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_builtin_is_supported_p):\n+\tNew prototype.\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tAdd note to error message to explain internal mapping of overloaded\n+\tbuilt-in function name to non-overloaded built-in function name.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_is_supported_p): New\n+\tfunction.\n+\n 2018-04-17  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/85424"}, {"sha": "8ed22011b1800236765dfa683b59ed138277e965", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -6894,6 +6894,8 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \n   {\n     bool unsupported_builtin = false;\n+    enum rs6000_builtins overloaded_code;\n+    tree result = NULL;\n     for (desc = altivec_overloaded_builtins;\n \t desc->code && desc->code != fcode; desc++)\n       continue;\n@@ -6906,7 +6908,6 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n        discrimination between the desired forms of the function.  */\n     if (fcode == P6_OV_BUILTIN_CMPB)\n       {\n-\tint overloaded_code;\n \tmachine_mode arg1_mode = TYPE_MODE (types[0]);\n \tmachine_mode arg2_mode = TYPE_MODE (types[1]);\n \n@@ -6941,14 +6942,20 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t    && rs6000_builtin_type_compatible (types[1], desc->op2))\n \t  {\n \t    if (rs6000_builtin_decls[desc->overloaded_code] != NULL_TREE)\n-\t      return altivec_build_resolved_builtin (args, n, desc);\n+\t      {\n+\t\tresult = altivec_build_resolved_builtin (args, n, desc);\n+\t\t/* overloaded_code is set above */\n+\t\tif (!rs6000_builtin_is_supported_p (overloaded_code))\n+\t\t  unsupported_builtin = true;\n+\t\telse\n+\t\t  return result;\n+\t      }\n \t    else\n \t      unsupported_builtin = true;\n \t  }\n       }\n     else if (fcode == P9V_BUILTIN_VEC_VSIEDP)\n       {\n-\tint overloaded_code;\n \tmachine_mode arg1_mode = TYPE_MODE (types[0]);\n \n \tif (nargs != 2)\n@@ -6983,12 +6990,20 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \twhile (desc->code && desc->code == fcode\n \t       && desc->overloaded_code != overloaded_code)\n \t  desc++;\n+\n \tif (desc->code && (desc->code == fcode)\n \t    && rs6000_builtin_type_compatible (types[0], desc->op1)\n \t    && rs6000_builtin_type_compatible (types[1], desc->op2))\n \t  {\n \t    if (rs6000_builtin_decls[desc->overloaded_code] != NULL_TREE)\n-\t      return altivec_build_resolved_builtin (args, n, desc);\n+\t      {\n+\t\tresult = altivec_build_resolved_builtin (args, n, desc);\n+\t\t/* overloaded_code is set above.  */\n+\t\tif (!rs6000_builtin_is_supported_p (overloaded_code))\n+\t\t  unsupported_builtin = true;\n+\t\telse\n+\t\t  return result;\n+\t      }\n \t    else\n \t      unsupported_builtin = true;\n \t  }\n@@ -7007,7 +7022,18 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t\t    || rs6000_builtin_type_compatible (types[2], desc->op3)))\n \t      {\n \t\tif (rs6000_builtin_decls[desc->overloaded_code] != NULL_TREE)\n-\t\t  return altivec_build_resolved_builtin (args, n, desc);\n+\t\t  {\n+\t\t    result = altivec_build_resolved_builtin (args, n, desc);\n+\t\t    if (!rs6000_builtin_is_supported_p (desc->overloaded_code))\n+\t\t      {\n+\t\t\t/* Allow loop to continue in case a different\n+\t\t\t   definition is supported.  */\n+\t\t\toverloaded_code = desc->overloaded_code;\n+\t\t\tunsupported_builtin = true;\n+\t\t      }\n+\t\t    else\n+\t\t      return result;\n+\t\t  }\n \t\telse\n \t\t  unsupported_builtin = true;\n \t      }\n@@ -7017,9 +7043,23 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n     if (unsupported_builtin)\n       {\n \tconst char *name = rs6000_overloaded_builtin_name (fcode);\n-\terror (\"builtin function %qs not supported in this compiler \"\n-\t       \"configuration\", name);\n-\treturn error_mark_node;\n+\tif (result != NULL)\n+\t  {\n+\t    const char *internal_name\n+\t      = rs6000_overloaded_builtin_name (overloaded_code);\n+\t    /* An error message making reference to the name of the\n+\t       non-overloaded function has already been issued.  Add\n+\t       clarification of the previous message.  */\n+\t    rich_location richloc (line_table, input_location);\n+\t    inform (&richloc, \"builtin %qs requires builtin %qs\",\n+\t\t    name, internal_name);\n+\t  }\n+\telse\n+\t  error (\"builtin function %qs not supported in this compiler \"\n+\t\t \"configuration\", name);\n+\t/* If an error-representing  result tree was returned from\n+\t   altivec_build_resolved_builtin above, use it.  */\n+\treturn (result != NULL) ? result : error_mark_node;\n       }\n   }\n  bad:"}, {"sha": "d22486037532c38b313a9ac951d1a0c336f66f7f", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -212,6 +212,7 @@ extern void rs6000_sibcall_aix (rtx, rtx, rtx, rtx);\n extern void rs6000_aix_asm_output_dwarf_table_ref (char *);\n extern void get_ppc476_thunk_name (char name[32]);\n extern bool rs6000_overloaded_builtin_p (enum rs6000_builtins);\n+extern bool rs6000_builtin_is_supported_p (enum rs6000_builtins);\n extern const char *rs6000_overloaded_builtin_name (enum rs6000_builtins);\n extern int rs6000_store_data_bypass_p (rtx_insn *, rtx_insn *);\n extern HOST_WIDE_INT rs6000_builtin_mask_calculate (void);"}, {"sha": "fd11407367e6474dbae51e7891466925cc0367eb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -15905,6 +15905,18 @@ paired_expand_predicate_builtin (enum insn_code icode, tree exp, rtx target)\n   return target;\n }\n \n+/* Check whether a builtin function is supported in this target\n+   configuration.  */\n+bool\n+rs6000_builtin_is_supported_p (enum rs6000_builtins fncode)\n+{\n+  HOST_WIDE_INT fnmask = rs6000_builtin_info[fncode].mask;\n+  if ((fnmask & rs6000_builtin_mask) != fnmask)\n+    return false;\n+  else\n+    return true;\n+}\n+\n /* Raise an error message for a builtin function that is called without the\n    appropriate target options being set.  */\n "}, {"sha": "b07c42a75d070c1192cb3dbab055ec11fba8a2b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -1,3 +1,16 @@\n+2018-04-13  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/bfp/scalar-extract-sig-5.c: Simplify to\n+\tprevent cascading of errors and change expected error message.\n+\t* gcc.target/powerpc/bfp/scalar-test-neg-4.c: Restrict this test\n+\tto 64-bit targets.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-8.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-9.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-10.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-insert-exp-11.c: Change expected\n+\terror message.\n+\t* gcc.target/powerpc/bfp/scalar-extract-exp-5.c: Likewise.\n+\n 2018-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85430"}, {"sha": "0f9f952a971ca5a09e238f9c9a01fc22d26f4a43", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-extract-exp-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-exp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-exp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-exp-5.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -15,7 +15,7 @@ get_exponent (__ieee128 *p)\n {\n   __ieee128 source = *p;\n \n-  return scalar_extract_exp (source);\t/* { dg-error \"builtin function '__builtin_vec_scalar_extract_exp' not supported in this compiler configuration\" } */\n+  return scalar_extract_exp (source);\t/* { dg-error \"requires ISA 3.0 IEEE 128-bit floating point\" } */\n }\n \n "}, {"sha": "e2f091b88bae32462964bb3e30c6110a5f9a6157", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-extract-sig-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-sig-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-sig-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-extract-sig-5.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -8,10 +8,10 @@\n    error because the builtin requires 64 bits.  */\n #include <altivec.h>\n \n-unsigned __int128 /* { dg-error \"'__int128' is not supported on this target\" } */\n+unsigned long long int\n get_significand (__ieee128 *p)\n {\n   __ieee128 source = *p;\n \n-  return __builtin_vec_scalar_extract_sig (source); /* { dg-error \"builtin function '__builtin_vec_scalar_extract_sig' not supported in this compiler configuration\" } */\n+  return (long long int) __builtin_vec_scalar_extract_sig (source); /* { dg-error \"requires ISA 3.0 IEEE 128-bit floating point\" } */\n }"}, {"sha": "8c8255ac5c053dd12ed58093a52d158dce242558", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-insert-exp-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-insert-exp-11.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -17,5 +17,5 @@ insert_exponent (__ieee128 *significand_p,\n   __ieee128 significand = *significand_p;\n   unsigned long long int exponent = *exponent_p;\n \n-  return scalar_insert_exp (significand, exponent); /* { dg-error \"builtin function '__builtin_vec_scalar_insert_exp' not supported in this compiler configuration\" } */\n+  return scalar_insert_exp (significand, exponent); /* { dg-error \"requires ISA 3.0 IEEE 128-bit floating point\" } */\n }"}, {"sha": "c125988eaabc0ec7ab0547ccc35d891285fbf766", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-10.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-10.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -1,5 +1,8 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* Require 64-bit target to select expected error message below.  32-bit\n+   target produces different error message.  */\n+/* { dg-require-effective-target lp64 } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mcpu=power9\" } */\n "}, {"sha": "e7cf68e74648ffea2d076898265669ebe00afe14", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-8.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-8.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mcpu=power9\" } */\n \n@@ -11,6 +12,8 @@ test_data_class (__ieee128 *p)\n {\n   __ieee128 source = *p;\n \n+  /* IEEE 128-bit floating point operations are only supported\n+     on 64-bit targets.  */\n   return scalar_test_data_class (source, 3);\n }\n "}, {"sha": "27e62bd8fef3e54a67758a7b883896039db73939", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-data-class-9.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-data-class-9.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mcpu=power9\" } */\n \n@@ -11,6 +12,8 @@ test_data_class (__ieee128 *p)\n {\n   __ieee128 source = *p;\n \n+  /* IEEE 128-bit floating point operations are only supported\n+     on 64-bit targets.  */\n   return scalar_test_data_class (source, 256);\t/* { dg-error \"argument 2 must be a 7-bit unsigned literal\" } */\n }\n "}, {"sha": "535bf60ae6ecd3d38c71752a5fee10be4719fe39", "filename": "gcc/testsuite/gcc.target/powerpc/bfp/scalar-test-neg-4.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48784b0065c309540e324db75ee429cb1357b6f8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbfp%2Fscalar-test-neg-4.c?ref=48784b0065c309540e324db75ee429cb1357b6f8", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target lp64 } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-options \"-mcpu=power9\" } */\n \n@@ -11,6 +12,8 @@ test_neg (__ieee128 *p)\n {\n   __ieee128 source = *p;\n \n+  /* IEEE 128-bit floating point operations are only supported\n+     on 64-bit targets.  */\n   return scalar_test_neg (source);\n }\n "}]}