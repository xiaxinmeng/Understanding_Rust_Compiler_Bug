{"sha": "8aa46dd2d5808a951afee6c6322615225f298d6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFhNDZkZDJkNTgwOGE5NTFhZmVlNmM2MzIyNjE1MjI1ZjI5OGQ2YQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-08-09T15:01:49Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-08-09T15:01:49Z"}, "message": "re PR tree-optimization/72772 (Missed SCEV after pass reordering@236440)\n\n\tPR tree-optimization/72772\n\t* tree-ssa-loop-niter.h (simplify_using_initial_conditions): Delete\n\tparameter STOP.\n\t* tree-ssa-loop-niter.c (tree_simplify_using_condition_1): Delete\n\tparameter STOP and update calls.  Move expand_simple_operations\n\tfunction call from here...\n\t(simplify_using_initial_conditions): ...to here.  Delete parameter\n\tSTOP.\n\t(tree_simplify_using_condition): Delete parameter STOP.\n\t* tree-scalar-evolution.c (simple_iv_with_niters): Update call to\n\tsimplify_using_initial_conditions.\n\nFrom-SVN: r239290", "tree": {"sha": "6cd5c3604c5e81b7542cdeeee6648cae43c955ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cd5c3604c5e81b7542cdeeee6648cae43c955ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aa46dd2d5808a951afee6c6322615225f298d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa46dd2d5808a951afee6c6322615225f298d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa46dd2d5808a951afee6c6322615225f298d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa46dd2d5808a951afee6c6322615225f298d6a/comments", "author": null, "committer": null, "parents": [{"sha": "f4fce1837cb18401b714379b7b18ede89b9d4fe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4fce1837cb18401b714379b7b18ede89b9d4fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4fce1837cb18401b714379b7b18ede89b9d4fe5"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "8fdba0258454235dbfbccaacdc24fe51e2d6c546", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa46dd2d5808a951afee6c6322615225f298d6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa46dd2d5808a951afee6c6322615225f298d6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8aa46dd2d5808a951afee6c6322615225f298d6a", "patch": "@@ -1,3 +1,17 @@\n+2016-08-09  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/72772\n+\t* tree-ssa-loop-niter.h (simplify_using_initial_conditions): Delete\n+\tparameter STOP.\n+\t* tree-ssa-loop-niter.c (tree_simplify_using_condition_1): Delete\n+\tparameter STOP and update calls.  Move expand_simple_operations\n+\tfunction call from here...\n+\t(simplify_using_initial_conditions): ...to here.  Delete parameter\n+\tSTOP.\n+\t(tree_simplify_using_condition): Delete parameter STOP.\n+\t* tree-scalar-evolution.c (simple_iv_with_niters): Update call to\n+\tsimplify_using_initial_conditions.\n+\n 2016-08-09  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \tPR c/65345"}, {"sha": "b8bfe512c23cb5cf44efd1d65ef7ca65b4c32f23", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa46dd2d5808a951afee6c6322615225f298d6a/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa46dd2d5808a951afee6c6322615225f298d6a/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=8aa46dd2d5808a951afee6c6322615225f298d6a", "patch": "@@ -3484,7 +3484,7 @@ simple_iv_with_niters (struct loop *wrto_loop, struct loop *use_loop,\n \t\t       bool allow_nonconstant_step)\n {\n   enum tree_code code;\n-  tree type, ev, base, e, stop;\n+  tree type, ev, base, e;\n   wide_int extreme;\n   bool folded_casts, overflow;\n \n@@ -3601,8 +3601,7 @@ simple_iv_with_niters (struct loop *wrto_loop, struct loop *use_loop,\n     return true;\n   e = fold_build2 (code, boolean_type_node, base,\n \t\t   wide_int_to_tree (type, extreme));\n-  stop = (TREE_CODE (base) == SSA_NAME) ? base : NULL;\n-  e = simplify_using_initial_conditions (use_loop, e, stop);\n+  e = simplify_using_initial_conditions (use_loop, e);\n   if (!integer_zerop (e))\n     return true;\n "}, {"sha": "a34672afd24aea019a25b44805602af20da668d5", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa46dd2d5808a951afee6c6322615225f298d6a/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa46dd2d5808a951afee6c6322615225f298d6a/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=8aa46dd2d5808a951afee6c6322615225f298d6a", "patch": "@@ -1939,10 +1939,10 @@ expand_simple_operations (tree expr, tree stop)\n    expression (or EXPR unchanged, if no simplification was possible).  */\n \n static tree\n-tree_simplify_using_condition_1 (tree cond, tree expr, tree stop)\n+tree_simplify_using_condition_1 (tree cond, tree expr)\n {\n   bool changed;\n-  tree e, te, e0, e1, e2, notcond;\n+  tree e, e0, e1, e2, notcond;\n   enum tree_code code = TREE_CODE (expr);\n \n   if (code == INTEGER_CST)\n@@ -1954,17 +1954,17 @@ tree_simplify_using_condition_1 (tree cond, tree expr, tree stop)\n     {\n       changed = false;\n \n-      e0 = tree_simplify_using_condition_1 (cond, TREE_OPERAND (expr, 0), stop);\n+      e0 = tree_simplify_using_condition_1 (cond, TREE_OPERAND (expr, 0));\n       if (TREE_OPERAND (expr, 0) != e0)\n \tchanged = true;\n \n-      e1 = tree_simplify_using_condition_1 (cond, TREE_OPERAND (expr, 1), stop);\n+      e1 = tree_simplify_using_condition_1 (cond, TREE_OPERAND (expr, 1));\n       if (TREE_OPERAND (expr, 1) != e1)\n \tchanged = true;\n \n       if (code == COND_EXPR)\n \t{\n-\t  e2 = tree_simplify_using_condition_1 (cond, TREE_OPERAND (expr, 2), stop);\n+\t  e2 = tree_simplify_using_condition_1 (cond, TREE_OPERAND (expr, 2));\n \t  if (TREE_OPERAND (expr, 2) != e2)\n \t    changed = true;\n \t}\n@@ -2027,16 +2027,14 @@ tree_simplify_using_condition_1 (tree cond, tree expr, tree stop)\n \treturn boolean_true_node;\n     }\n \n-  te = expand_simple_operations (expr, stop);\n-\n   /* Check whether COND ==> EXPR.  */\n   notcond = invert_truthvalue (cond);\n-  e = fold_binary (TRUTH_OR_EXPR, boolean_type_node, notcond, te);\n+  e = fold_binary (TRUTH_OR_EXPR, boolean_type_node, notcond, expr);\n   if (e && integer_nonzerop (e))\n     return e;\n \n   /* Check whether COND ==> not EXPR.  */\n-  e = fold_binary (TRUTH_AND_EXPR, boolean_type_node, cond, te);\n+  e = fold_binary (TRUTH_AND_EXPR, boolean_type_node, cond, expr);\n   if (e && integer_zerop (e))\n     return e;\n \n@@ -2051,29 +2049,31 @@ tree_simplify_using_condition_1 (tree cond, tree expr, tree stop)\n    the loop do not cause us to fail.  */\n \n static tree\n-tree_simplify_using_condition (tree cond, tree expr, tree stop)\n+tree_simplify_using_condition (tree cond, tree expr)\n {\n-  cond = expand_simple_operations (cond, stop);\n+  cond = expand_simple_operations (cond);\n \n-  return tree_simplify_using_condition_1 (cond, expr, stop);\n+  return tree_simplify_using_condition_1 (cond, expr);\n }\n \n /* Tries to simplify EXPR using the conditions on entry to LOOP.\n    Returns the simplified expression (or EXPR unchanged, if no\n    simplification was possible).  */\n \n tree\n-simplify_using_initial_conditions (struct loop *loop, tree expr, tree stop)\n+simplify_using_initial_conditions (struct loop *loop, tree expr)\n {\n   edge e;\n   basic_block bb;\n   gimple *stmt;\n-  tree cond;\n+  tree cond, expanded, backup;\n   int cnt = 0;\n \n   if (TREE_CODE (expr) == INTEGER_CST)\n     return expr;\n \n+  backup = expanded = expand_simple_operations (expr);\n+\n   /* Limit walking the dominators to avoid quadraticness in\n      the number of BBs times the number of loops in degenerate\n      cases.  */\n@@ -2095,15 +2095,17 @@ simplify_using_initial_conditions (struct loop *loop, tree expr, tree stop)\n \t\t\t  gimple_cond_rhs (stmt));\n       if (e->flags & EDGE_FALSE_VALUE)\n \tcond = invert_truthvalue (cond);\n-      expr = tree_simplify_using_condition (cond, expr, stop);\n+      expanded = tree_simplify_using_condition (cond, expanded);\n       /* Break if EXPR is simplified to const values.  */\n-      if (expr && (integer_zerop (expr) || integer_nonzerop (expr)))\n-\tbreak;\n+      if (expanded\n+\t  && (integer_zerop (expanded) || integer_nonzerop (expanded)))\n+\treturn expanded;\n \n       ++cnt;\n     }\n \n-  return expr;\n+  /* Return the original expression if no simplification is done.  */\n+  return operand_equal_p (backup, expanded, 0) ? expr : expanded;\n }\n \n /* Tries to simplify EXPR using the evolutions of the loop invariants\n@@ -4209,8 +4211,6 @@ loop_exits_before_overflow (tree base, tree step,\n      constant step because otherwise we don't have the information.  */\n   if (TREE_CODE (step) == INTEGER_CST)\n     {\n-      tree stop = (TREE_CODE (base) == SSA_NAME) ? base : NULL;\n-\n       for (civ = loop->control_ivs; civ; civ = civ->next)\n \t{\n \t  enum tree_code code;\n@@ -4268,7 +4268,7 @@ loop_exits_before_overflow (tree base, tree step,\n \t\t}\n \t      extreme = fold_build2 (MINUS_EXPR, type, extreme, step);\n \t      e = fold_build2 (code, boolean_type_node, base, extreme);\n-\t      e = simplify_using_initial_conditions (loop, e, stop);\n+\t      e = simplify_using_initial_conditions (loop, e);\n \t      if (integer_zerop (e))\n \t\treturn true;\n \t    }"}, {"sha": "e6eebd9528362ed6eb22137a1b47a4f39c62ea95", "filename": "gcc/tree-ssa-loop-niter.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aa46dd2d5808a951afee6c6322615225f298d6a/gcc%2Ftree-ssa-loop-niter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aa46dd2d5808a951afee6c6322615225f298d6a/gcc%2Ftree-ssa-loop-niter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.h?ref=8aa46dd2d5808a951afee6c6322615225f298d6a", "patch": "@@ -21,8 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_TREE_SSA_LOOP_NITER_H\n \n extern tree expand_simple_operations (tree, tree = NULL);\n-extern tree simplify_using_initial_conditions (struct loop *,\n-\t\t\t\t\t       tree, tree = NULL);\n+extern tree simplify_using_initial_conditions (struct loop *, tree);\n extern bool loop_only_exit_p (const struct loop *, const_edge);\n extern bool number_of_iterations_exit (struct loop *, edge,\n \t\t\t\t       struct tree_niter_desc *niter, bool,"}]}