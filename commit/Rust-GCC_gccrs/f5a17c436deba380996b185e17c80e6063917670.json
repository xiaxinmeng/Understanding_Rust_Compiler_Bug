{"sha": "f5a17c436deba380996b185e17c80e6063917670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhMTdjNDM2ZGViYTM4MDk5NmIxODVlMTdjODBlNjA2MzkxNzY3MA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-04-24T16:19:36Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-04-24T16:19:36Z"}, "message": "simplify-rtx.c (simplify_binary_operation_1, case AND): Result is zero if no overlap in nonzero bits between the operands.\n\n\t* simplify-rtx.c (simplify_binary_operation_1, case AND): Result is\n\tzero if no overlap in nonzero bits between the operands.\n\nFrom-SVN: r146738", "tree": {"sha": "b034cf35f9cf26b923ad93cd826a4344a685366e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b034cf35f9cf26b923ad93cd826a4344a685366e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5a17c436deba380996b185e17c80e6063917670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a17c436deba380996b185e17c80e6063917670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5a17c436deba380996b185e17c80e6063917670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5a17c436deba380996b185e17c80e6063917670/comments", "author": null, "committer": null, "parents": [{"sha": "c91f9cd48c872994b2e8bedbd2e27c488a75bacb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91f9cd48c872994b2e8bedbd2e27c488a75bacb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91f9cd48c872994b2e8bedbd2e27c488a75bacb"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "a48db46dcd5db9fca964b32f25636dc404c02cd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a17c436deba380996b185e17c80e6063917670/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a17c436deba380996b185e17c80e6063917670/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5a17c436deba380996b185e17c80e6063917670", "patch": "@@ -1,3 +1,8 @@\n+2009-04-24  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* simplify-rtx.c (simplify_binary_operation_1, case AND): Result is\n+\tzero if no overlap in nonzero bits between the operands.\n+\n 2009-04-24  Ian Lance Taylor  <iant@google.com>\n \n \t* combine.c (record_value_for_reg): Change 0 to VOIDmode, twice."}, {"sha": "e2b1673a8dd2454ee5bfabc55fda58dea3e9b91d", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5a17c436deba380996b185e17c80e6063917670/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5a17c436deba380996b185e17c80e6063917670/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=f5a17c436deba380996b185e17c80e6063917670", "patch": "@@ -2304,17 +2304,22 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n     case AND:\n       if (trueop1 == CONST0_RTX (mode) && ! side_effects_p (op0))\n \treturn trueop1;\n-      if (GET_CODE (trueop1) == CONST_INT\n-\t  && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+      if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n \t{\n \t  HOST_WIDE_INT nzop0 = nonzero_bits (trueop0, mode);\n-\t  HOST_WIDE_INT val1 = INTVAL (trueop1);\n-\t  /* If we are turning off bits already known off in OP0, we need\n-\t     not do an AND.  */\n-\t  if ((nzop0 & ~val1) == 0)\n-\t    return op0;\n+\t  HOST_WIDE_INT nzop1;\n+\t  if (GET_CODE (trueop1) == CONST_INT)\n+\t    {\n+\t      HOST_WIDE_INT val1 = INTVAL (trueop1);\n+\t      /* If we are turning off bits already known off in OP0, we need\n+\t\t not do an AND.  */\n+\t      if ((nzop0 & ~val1) == 0)\n+\t\treturn op0;\n+\t    }\n+\t  nzop1 = nonzero_bits (trueop1, mode);\n \t  /* If we are clearing all the nonzero bits, the result is zero.  */\n-\t  if ((val1 & nzop0) == 0 && !side_effects_p (op0))\n+\t  if ((nzop1 & nzop0) == 0\n+\t      && !side_effects_p (op0) && !side_effects_p (op1))\n \t    return CONST0_RTX (mode);\n \t}\n       if (rtx_equal_p (trueop0, trueop1) && ! side_effects_p (op0)"}]}