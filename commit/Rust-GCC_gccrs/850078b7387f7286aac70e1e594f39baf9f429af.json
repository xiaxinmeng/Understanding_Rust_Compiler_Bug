{"sha": "850078b7387f7286aac70e1e594f39baf9f429af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUwMDc4YjczODdmNzI4NmFhYzcwZTFlNTk0ZjM5YmFmOWY0MjlhZg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2018-06-08T15:42:24Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2018-06-08T15:42:24Z"}, "message": "* config/rs6000/rs6000.c (rs6000_passes_ieee128): Protect with #if TARGET_ELF.\n\nFrom-SVN: r261336", "tree": {"sha": "171226aca4228c2bbae47cef586d29eeccbcc19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/171226aca4228c2bbae47cef586d29eeccbcc19e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/850078b7387f7286aac70e1e594f39baf9f429af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850078b7387f7286aac70e1e594f39baf9f429af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850078b7387f7286aac70e1e594f39baf9f429af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850078b7387f7286aac70e1e594f39baf9f429af/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3fe528079de91a446ccbed06fe629cac5e34d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fe528079de91a446ccbed06fe629cac5e34d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3fe528079de91a446ccbed06fe629cac5e34d15"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "cd3769fcf77c52b1a90ed8d52398a91b31b37d4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850078b7387f7286aac70e1e594f39baf9f429af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850078b7387f7286aac70e1e594f39baf9f429af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=850078b7387f7286aac70e1e594f39baf9f429af", "patch": "@@ -1,3 +1,8 @@\n+2018-06-08  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_passes_ieee128): Protect with #if\n+\tTARGET_ELF. \n+\n 2018-06-08  Martin Liska  <mliska@suse.cz>\n \n \t* tree-cfg.h (debug_function): Fix argument type to match"}, {"sha": "4c447d442728c796342138a9bdceadb53e2f1e2a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/850078b7387f7286aac70e1e594f39baf9f429af/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/850078b7387f7286aac70e1e594f39baf9f429af/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=850078b7387f7286aac70e1e594f39baf9f429af", "patch": "@@ -197,12 +197,14 @@ int dot_symbols;\n    of this machine mode.  */\n scalar_int_mode rs6000_pmode;\n \n+#if TARGET_ELF\n /* Note whether IEEE 128-bit floating point was passed or returned, either as\n    the __float128/_Float128 explicit type, or when long double is IEEE 128-bit\n    floating point.  We changed the default C++ mangling for these types and we\n    may want to generate a weak alias of the old mangling (U10__float128) to the\n    new mangling (u9__ieee128).  */\n static bool rs6000_passes_ieee128;\n+#endif\n \n /* Generate the manged name (i.e. U10__float128) used in GCC 8.1, and not the\n    name used in current releases (i.e. u9__ieee128).  */"}]}