{"sha": "17bc3848e065c0980523e1a1592f2f03b24b4f1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiYzM4NDhlMDY1YzA5ODA1MjNlMWExNTkyZjJmMDNiMjRiNGYxYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-24T11:56:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-24T13:04:02Z"}, "message": "libstdc++: Implement LWG 2762 for std::unique_ptr::operator*\n\nThe LWG issue proposes to add a conditional noexcept-specifier to\nstd::unique_ptr's dereference operator. The issue is currently in\nTentatively Ready status, but even if it isn't voted into the draft, we\ncan do it as a conforming extensions. This commit also adds a similar\nnoexcept-specifier to operator[] for the unique_ptr<T[], D> partial\nspecialization.\n\nAlso ensure that all dereference operators for shared_ptr are noexcept,\nand adds tests for the std::optional accessors modified by the issue,\nwhich were already noexcept in our implementation.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/shared_ptr_base.h (__shared_ptr_access::operator[]):\n\tAdd noexcept.\n\t* include/bits/unique_ptr.h (unique_ptr::operator*): Add\n\tconditional noexcept as per LWG 2762.\n\t* testsuite/20_util/shared_ptr/observers/array.cc: Check that\n\tdereferencing cannot throw.\n\t* testsuite/20_util/shared_ptr/observers/get.cc: Likewise.\n\t* testsuite/20_util/optional/observers/lwg2762.cc: New test.\n\t* testsuite/20_util/unique_ptr/lwg2762.cc: New test.", "tree": {"sha": "0149b4f6b118bc81b9423c4f634c74b678f7d430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0149b4f6b118bc81b9423c4f634c74b678f7d430"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17bc3848e065c0980523e1a1592f2f03b24b4f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17bc3848e065c0980523e1a1592f2f03b24b4f1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17bc3848e065c0980523e1a1592f2f03b24b4f1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17bc3848e065c0980523e1a1592f2f03b24b4f1c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a21dc9d1529b8a8071e36b22b6e8492fc2ce7d5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21dc9d1529b8a8071e36b22b6e8492fc2ce7d5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21dc9d1529b8a8071e36b22b6e8492fc2ce7d5a"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "5be935d174d75a62a59c54a7f7de86bfb51626c1", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=17bc3848e065c0980523e1a1592f2f03b24b4f1c", "patch": "@@ -1035,7 +1035,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       element_type&\n-      operator[](ptrdiff_t __i) const\n+      operator[](ptrdiff_t __i) const noexcept\n       {\n \t__glibcxx_assert(_M_get() != nullptr);\n \t__glibcxx_assert(!extent<_Tp>::value || __i < extent<_Tp>::value);"}, {"sha": "1781fe1564959d1343b4322e6e2b0eb54aeaf55d", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=17bc3848e065c0980523e1a1592f2f03b24b4f1c", "patch": "@@ -402,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// Dereference the stored pointer.\n       typename add_lvalue_reference<element_type>::type\n-      operator*() const\n+      operator*() const noexcept(noexcept(*std::declval<pointer>()))\n       {\n \t__glibcxx_assert(get() != pointer());\n \treturn *get();\n@@ -655,6 +655,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Access an element of owned array.\n       typename std::add_lvalue_reference<element_type>::type\n       operator[](size_t __i) const\n+      noexcept(noexcept(std::declval<pointer>()[std::declval<size_t&>()]))\n       {\n \t__glibcxx_assert(get() != pointer());\n \treturn get()[__i];"}, {"sha": "a0cf0bc19a03497c130a7eae9c0389b1fb5066e5", "filename": "libstdc++-v3/testsuite/20_util/optional/observers/lwg2762.cc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fobservers%2Flwg2762.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fobservers%2Flwg2762.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fobservers%2Flwg2762.cc?ref=17bc3848e065c0980523e1a1592f2f03b24b4f1c", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target c++17 }  }\n+\n+// LWG 2762 adds noexcept to operator-> and operator*\n+#include <optional>\n+\n+struct S\n+{\n+  void can_throw();\n+  void cannot_throw() noexcept;\n+};\n+\n+static_assert( ! noexcept(std::declval<std::optional<S>&>()->can_throw()) );\n+static_assert( noexcept(std::declval<std::optional<S>&>()->cannot_throw()) );\n+\n+static_assert( noexcept(std::declval<std::optional<S>&>().operator->()) );\n+static_assert( noexcept(std::declval<std::optional<int>&>().operator->()) );\n+\n+static_assert( noexcept(*std::declval<std::optional<int>&>()) );\n+static_assert( noexcept(*std::declval<const std::optional<int>&>()) );\n+static_assert( noexcept(*std::declval<std::optional<int>&&>()) );\n+static_assert( noexcept(*std::declval<const std::optional<int>&&>()) );"}, {"sha": "7fd6c01f9c47f5cd0114f3760ffe4e54c450e320", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/observers/array.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Farray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Farray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Farray.cc?ref=17bc3848e065c0980523e1a1592f2f03b24b4f1c", "patch": "@@ -34,6 +34,7 @@ test01()\n   A * const a = new A[2];\n   const std::shared_ptr<A[2]> p(a);\n   VERIFY( p.get() == a );\n+  static_assert( noexcept(p.get()), \"non-throwing\" );\n }\n \n // get\n@@ -43,6 +44,7 @@ test02()\n   A * const a = new A[2];\n   const std::shared_ptr<A[]> p(a);\n   VERIFY( p.get() == a );\n+  static_assert( noexcept(p.get()), \"non-throwing\" );\n }\n \n // operator[]\n@@ -52,6 +54,7 @@ test03()\n   A * const a = new A[2];\n   const std::shared_ptr<A[2]> p(a);\n   VERIFY( &p[0] == a );\n+  static_assert( noexcept(p[0]), \"non-throwing\" );\n }\n \n // operator[]\n@@ -61,6 +64,7 @@ test04()\n   A * const a = new A[2];\n   const std::shared_ptr<A[]> p(a);\n   VERIFY( &p[0] == a );\n+  static_assert( noexcept(p[0]), \"non-throwing\" );\n }\n \n int"}, {"sha": "6f2cb9fee83bce44104429a03bffa4def39091dc", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/observers/get.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fobservers%2Fget.cc?ref=17bc3848e065c0980523e1a1592f2f03b24b4f1c", "patch": "@@ -37,6 +37,7 @@ test01()\n   A * const a = new A;\n   const std::shared_ptr<A> p(a);\n   VERIFY( p.get() == a );\n+  static_assert( noexcept(p.get()), \"non-throwing\" );\n }\n \n // operator*\n@@ -46,6 +47,7 @@ test02()\n   A * const a = new A;\n   const std::shared_ptr<A> p(a);\n   VERIFY( &*p == a );\n+  static_assert( noexcept(*p), \"non-throwing\" );\n }\n \n // operator->\n@@ -55,6 +57,7 @@ test03()\n   A * const a = new A;\n   const std::shared_ptr<A> p(a);\n   VERIFY( &p->i == &a->i );\n+  static_assert( noexcept(p->i), \"non-throwing\" );\n }\n \n void\n@@ -67,7 +70,7 @@ test04()\n #endif\n }\n \n-int \n+int\n main()\n {\n   test01();"}, {"sha": "3cc2ea6b87d364e1112b4940df4c8a58c157ce79", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/lwg2762.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Flwg2762.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17bc3848e065c0980523e1a1592f2f03b24b4f1c/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Flwg2762.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Flwg2762.cc?ref=17bc3848e065c0980523e1a1592f2f03b24b4f1c", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile { target c++11 } }\n+#include <memory>\n+\n+// 2762. unique_ptr operator*() should be noexcept\n+static_assert( noexcept(*std::declval<std::unique_ptr<long>>()), \"LWG 2762\" );\n+\n+template<bool B>\n+struct deleter\n+{\n+  struct pointer\n+  {\n+    int& operator*() && noexcept(B);  // this is used by unique_ptr\n+    int& operator*() const& = delete; // this should not be\n+\n+    int& operator[](std::size_t) && noexcept(B); // this is used by unique_ptr\n+    int& operator[](std::size_t) const& = delete; // should not be used\n+    int& operator[](int) && = delete; // should not be used\n+    int& operator[](double) && = delete; // should not be used\n+\n+    int* operator->() noexcept(false); // noexcept here doesn't affect anything\n+\n+    // Needed for NullablePointer requirements\n+    pointer(int* = nullptr);\n+    bool operator==(const pointer&) const noexcept;\n+    bool operator!=(const pointer&) const noexcept;\n+  };\n+\n+  void operator()(pointer) const noexcept { }\n+};\n+\n+template<typename T, bool Nothrow>\n+  using UPtr = std::unique_ptr<T, deleter<Nothrow>>;\n+\n+// noexcept-specifier depends on the pointer type\n+static_assert( noexcept(*std::declval<UPtr<int, true>&>()), \"\" );\n+static_assert( ! noexcept(*std::declval<UPtr<int, false>&>()), \"\" );\n+\n+// This has always been required, even in C++11.\n+static_assert( noexcept(std::declval<UPtr<int, false>&>().operator->()), \"\" );\n+\n+// This is not required by the standard\n+static_assert( noexcept(std::declval<UPtr<int[], true>&>()[0]), \"\" );\n+static_assert( ! noexcept(std::declval<UPtr<int[], false>&>()[0]), \"\" );"}]}