{"sha": "33848bb0281d0be603c0391342284273c123ae4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4NDhiYjAyODFkMGJlNjAzYzAzOTEzNDIyODQyNzNjMTIzYWU0YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-12-15T09:51:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-12-15T09:51:24Z"}, "message": "cp-tree.h (make_aggr_type): Declare.\n\n        * cp-tree.h (make_aggr_type): Declare.\n        * lex.c (cp_make_lang_type): Don't SET_IS_AGGR_TYPE.\n        (make_aggr_type): New.\n\n        * decl.c (build_typename_type, init_decl_processing): Use it.\n        (build_ptrmemfunc_type, xref_tag): Likewise.\n        * except.c (call_eh_info): Likewise.\n        * init.c (init_init_processing): Likewise.\n        * pt.c (process_template_parm, lookup_template_class): Likewise.\n        * rtti.c (expand_class_desc): Likewise.\n        * semantics.c (begin_class_definition, finish_typeof): Likewise.\n        * tree.c (copy_template_template_parm): Likewise.\n\nFrom-SVN: r30951", "tree": {"sha": "e0d46b266ec8217256cf1b264723ecf411125c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0d46b266ec8217256cf1b264723ecf411125c5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33848bb0281d0be603c0391342284273c123ae4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33848bb0281d0be603c0391342284273c123ae4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33848bb0281d0be603c0391342284273c123ae4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33848bb0281d0be603c0391342284273c123ae4a/comments", "author": null, "committer": null, "parents": [{"sha": "6ff7fb95722130e00e6ac16d45b53c3618ea9c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff7fb95722130e00e6ac16d45b53c3618ea9c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff7fb95722130e00e6ac16d45b53c3618ea9c7c"}], "stats": {"total": 120, "additions": 73, "deletions": 47}, "files": [{"sha": "949e64a0183c88c308dd01d18dad367e63d1242a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 42, "deletions": 27, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -1,3 +1,18 @@\n+1999-12-15  Richard Henderson  <rth@cygnus.com>\n+\n+\t* cp-tree.h (make_aggr_type): Declare.\n+\t* lex.c (cp_make_lang_type): Don't SET_IS_AGGR_TYPE.\n+\t(make_aggr_type): New.\n+\n+\t* decl.c (build_typename_type, init_decl_processing): Use it.\n+\t(build_ptrmemfunc_type, xref_tag): Likewise.\n+\t* except.c (call_eh_info): Likewise.\n+\t* init.c (init_init_processing): Likewise.\n+\t* pt.c (process_template_parm, lookup_template_class): Likewise.\n+\t* rtti.c (expand_class_desc): Likewise.\n+\t* semantics.c (begin_class_definition, finish_typeof): Likewise.\n+\t* tree.c (copy_template_template_parm): Likewise.\n+\n 1999-12-15  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* cp-tree.def (TEMPLATE_PARM_INDEX): Calculate size using\n@@ -176,7 +191,7 @@\n \t(generate_ctor_or_dtor_function): Adjust accordingly.\n \t\n 1999-11-24  Geoffrey Keating  <geoffk@cygnus.com>\n-            Greg McGary  <gkm@gnu.org>\n+\t    Greg McGary  <gkm@gnu.org>\n \n \t* decl.c (duplicate_decls): Merge\n  \tDECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT,\n@@ -585,7 +600,7 @@ Thu Nov 11 12:42:11 MST 1999\tDiego Novillo <dnovillo@cygnus.com>\n \t* pt.c (tsubst_enum): Adjust according to build_enumerator changes.\n \t\n Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n-                          Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\t                  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cp-tree.h: Test `GCC_VERSION', not `HAVE_GCC_VERSION'.\n \n@@ -696,8 +711,8 @@ Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n \n 1999-11-02  Scott Snyder  <snyder@fnal.gov>\n \n-        * decl2.c (build_expr_from_tree): Handle REALPART_EXPR and\n-        IMAGPART_EXPR.\n+\t* decl2.c (build_expr_from_tree): Handle REALPART_EXPR and\n+\tIMAGPART_EXPR.\n \t* pt.c (tsubst_copy): Likewise.\n \n 1999-11-01  Jason Merrill  <jason@yorick.cygnus.com>\n@@ -934,9 +949,9 @@ Wed Oct 13 22:01:35 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n 1999-10-7   Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n-        * cp-tree.h (cp_make_lake_type): Renamed from make_lang_type.\n-        * lex.c (cp_make_lake_type): Likewise.\n-        * tree.c (init_tree): Init make_lang_type_fn.\n+\t* cp-tree.h (cp_make_lake_type): Renamed from make_lang_type.\n+\t* lex.c (cp_make_lake_type): Likewise.\n+\t* tree.c (init_tree): Init make_lang_type_fn.\n \t\n 1999-10-07  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -1241,19 +1256,19 @@ Thu Sep 30 00:13:27 1999  Dirk Zoller  <duz@rtsffm.com>\n \t\n 1999-09-28  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n-        * pt.c (most_general_template): Adjust declaration.\n+\t* pt.c (most_general_template): Adjust declaration.\n \n-        * cp-tree.h: (most_general_template): Declare.\n+\t* cp-tree.h: (most_general_template): Declare.\n \n-        * error.c (dump_template_value): Rename to ...\n-        (dump_template_argument): This.\n-        (dump_template_argument_list): New function.\n-        (dump_type): Use it.\n-        (dump_template_parameter): New function.\n-        (dump_template_decl): Use it.\n-        (dump_template_bindings): New function.\n-        (dump_function_decl): Use it. Pretty print function template\n-        instantiations.\n+\t* error.c (dump_template_value): Rename to ...\n+\t(dump_template_argument): This.\n+\t(dump_template_argument_list): New function.\n+\t(dump_type): Use it.\n+\t(dump_template_parameter): New function.\n+\t(dump_template_decl): Use it.\n+\t(dump_template_bindings): New function.\n+\t(dump_function_decl): Use it. Pretty print function template\n+\tinstantiations.\n \n 1999-09-28  Nathan Sidwell  <nathan@acm.org>\n \n@@ -1654,7 +1669,7 @@ Mon Sep 20 10:49:05 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n 1999-09-17  Mark Mitchell  <mark@codesourcery.com>\n \n-        Turn on function-at-a-time processing.  \n+\tTurn on function-at-a-time processing.  \n \t* cp-tree.h (doing_semantic_analysis_p): New macro.\n \t(SF_DEFAULT): Define to zero, not SF_EXPAND.\n \t(start_handler_parms): Change prototype.\n@@ -2475,8 +2490,8 @@ Fri Sep 10 10:32:32 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \t(init_search_processing): Use vptr_identifier.\n \t\n 1999-09-05  Richard Henderson  <rth@cygnus.com>\n-            Bernd Schmidt <bernds@cygnus.co.uk>\n-            Mark Mitchell  <mark@codesourcery.com>\n+\t    Bernd Schmidt <bernds@cygnus.co.uk>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in (parse.o): Depend on ggc.h.\n \t(decl2.o): Depend on ggc.h.\n@@ -3033,7 +3048,7 @@ Mon Aug 23 22:17:20 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n \t* typeck.c (common_type): Use same_type_p, not pointer equality,\n \tto compare types.\n \n-        * cp-tree.h (build_lang_field_decl): Remove.\n+\t* cp-tree.h (build_lang_field_decl): Remove.\n \t* class.c (build_vtable): Replace calls to build_lang_field_decl\n \twith build_lang_decl.\n \t(prepare_fresh_vtable): Likewise.\n@@ -3489,7 +3504,7 @@ Mon Aug 23 22:17:20 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n \n 1999-08-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n-        * lex.c (lang_identify): Likewise.\n+\t* lex.c (lang_identify): Likewise.\n \n 1999-08-09  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n@@ -4079,10 +4094,10 @@ Tue Jul 20 11:24:19 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n Sat Jul 17 23:51:30 1999  Jeffrey A Law  (law@cygnus.com)\n \n-        * Makefile.in (INTERFACE): Bump to 2.\n+\t* Makefile.in (INTERFACE): Bump to 2.\n \n 1999-07-17  Alexandre Oliva  <oliva@dcc.unicamp.br>\n-        \n+\t\n \t* typeck2.c (my_friendly_abort): Updated URL with bug reporting\n \tinstructions to gcc.gnu.org.  Removed e-mail address.\n \n@@ -4206,7 +4221,7 @@ Wed Jul  7 01:26:47 1999  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n 1999-06-28  Richard Henderson  <rth@cygnus.com>\n \n-        * decl.c (cp_finish_decl): Fix typo in cp_warning_at call.\n+\t* decl.c (cp_finish_decl): Fix typo in cp_warning_at call.\n \n 1999-06-28  Jason Merrill  <jason@yorick.cygnus.com>\n \n@@ -4466,7 +4481,7 @@ Wed Jul  7 01:26:47 1999  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \tresult in a valid non-type template argument.\n \n 1999-05-21  Mark Mitchell  <mark@codesourcery.com>\n-            Nathan Sidwell  <nathan@acm.org>\n+\t    Nathan Sidwell  <nathan@acm.org>\n \t\n \t* Make-lang.in (cc1plus): Make it depend on gxx.gperf.\n \t* cp-tree.h: Fix typo in documentation on pointers-to-members."}, {"sha": "9e341be6b47eb51c70c435eaebd1971cc17eb0fb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -3743,6 +3743,7 @@ extern tree build_lang_decl\t\t\tPROTO((enum tree_code, tree, tree));\n extern void retrofit_lang_decl\t\t\tPROTO((tree));\n extern void copy_lang_decl\t\t\tPROTO((tree));\n extern tree cp_make_lang_type\t\t\tPROTO((enum tree_code));\n+extern tree make_aggr_type\t\t\tPROTO((enum tree_code));\n extern void dump_time_statistics\t\tPROTO((void));\n extern void compiler_error\t\t\tPVPROTO((const char *, ...))\n   ATTRIBUTE_PRINTF_1;"}, {"sha": "5af732b3017a382d7b4a3a4d1e1e49d37db0a933", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -5225,7 +5225,7 @@ build_typename_type (context, name, fullname, base_type)\n     }\n \n   /* Build the TYPENAME_TYPE.  */\n-  t = make_lang_type (TYPENAME_TYPE);\n+  t = make_aggr_type (TYPENAME_TYPE);\n   TYPE_CONTEXT (t) = FROB_CONTEXT (context);\n   TYPENAME_TYPE_FULLNAME (t) = fullname;\n   TREE_TYPE (t) = base_type;\n@@ -6163,7 +6163,7 @@ init_decl_processing ()\n \n   /* This is just some anonymous class type.  Nobody should ever\n      need to look inside this envelope.  */\n-  class_star_type_node = build_pointer_type (make_lang_type (RECORD_TYPE));\n+  class_star_type_node = build_pointer_type (make_aggr_type (RECORD_TYPE));\n \n   if (flag_huge_objects)\n     delta_type_node = long_integer_type_node;\n@@ -6234,7 +6234,7 @@ init_decl_processing ()\n     }\n   else\n     {\n-      vtable_entry_type = make_lang_type (RECORD_TYPE);\n+      vtable_entry_type = make_aggr_type (RECORD_TYPE);\n       fields[0] = build_lang_decl (FIELD_DECL, delta_identifier,\n \t\t\t\t   delta_type_node);\n       fields[1] = build_lang_decl (FIELD_DECL, index_identifier,\n@@ -8615,15 +8615,15 @@ build_ptrmemfunc_type (type)\n     unqualified_variant \n       = build_ptrmemfunc_type (TYPE_MAIN_VARIANT (type));\n \n-  u = make_lang_type (UNION_TYPE);\n+  u = make_aggr_type (UNION_TYPE);\n   SET_IS_AGGR_TYPE (u, 0);\n   fields[0] = build_lang_decl (FIELD_DECL, pfn_identifier, type);\n   fields[1] = build_lang_decl (FIELD_DECL, delta2_identifier,\n \t\t\t       delta_type_node);\n   finish_builtin_type (u, \"__ptrmemfunc_type\", fields, 1, ptr_type_node);\n   TYPE_NAME (u) = NULL_TREE;\n \n-  t = make_lang_type (RECORD_TYPE);\n+  t = make_aggr_type (RECORD_TYPE);\n \n   /* Let the front-end know this is a pointer to member function...  */\n   TYPE_PTRMEMFUNC_FLAG (t) = 1;\n@@ -12121,7 +12121,7 @@ xref_tag (code_type_node, name, globalize)\n \t{\n \t  struct binding_level *old_b = class_binding_level;\n \n-\t  ref = make_lang_type (code);\n+\t  ref = make_aggr_type (code);\n \t  TYPE_CONTEXT (ref) = context;\n \n #ifdef NONNESTED_CLASSES"}, {"sha": "7e41d2e9dea7b8b30bc13cba30bcee4d4de29c26", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -195,7 +195,7 @@ call_eh_info ()\n \n       /* struct cp_eh_info.  This must match exception.cc.  Note that this\n \t type is not pushed anywhere.  */\n-      t1= make_lang_type (RECORD_TYPE);\n+      t1= make_aggr_type (RECORD_TYPE);\n       fields[0] = build_lang_decl (FIELD_DECL, \n                     get_identifier (\"handler_label\"), ptr_type_node);\n       fields[1] = build_lang_decl (FIELD_DECL, \n@@ -209,7 +209,7 @@ call_eh_info ()\n       finish_builtin_type (t1, \"eh_context\", fields, 3, ptr_type_node);\n       t1 = build_pointer_type (t1);\n \n-      t1= make_lang_type (RECORD_TYPE);\n+      t1= make_aggr_type (RECORD_TYPE);\n       fields[0] = build_lang_decl (FIELD_DECL, \n                     get_identifier (\"match_function\"), ptr_type_node);\n       fields[1] = build_lang_decl (FIELD_DECL, \n@@ -219,7 +219,7 @@ call_eh_info ()\n       /* N.B.: The fourth field LEN is expected to be\n \t the number of fields - 1, not the total number of fields.  */\n       finish_builtin_type (t1, \"__eh_info\", fields, 2, ptr_type_node);\n-      t = make_lang_type (RECORD_TYPE);\n+      t = make_aggr_type (RECORD_TYPE);\n       fields[0] = build_lang_decl (FIELD_DECL, \n \t\t\t\t   get_identifier (\"eh_info\"), t1);\n       fields[1] = build_lang_decl (FIELD_DECL, get_identifier (\"value\"),"}, {"sha": "e841feeacb9ad0b89f2fe1b430890dd036c40f5c", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -62,7 +62,7 @@ void init_init_processing ()\n \n   /* Define the structure that holds header information for\n      arrays allocated via operator new.  */\n-  BI_header_type = make_lang_type (RECORD_TYPE);\n+  BI_header_type = make_aggr_type (RECORD_TYPE);\n   nelts_identifier = get_identifier (\"nelts\");\n   fields[0] = build_lang_decl (FIELD_DECL, nelts_identifier, sizetype);\n "}, {"sha": "e72d01c4eff16708de136b9c0299193d6be010fb", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -4784,8 +4784,6 @@ cp_make_lang_type (code)\n     {\n       struct lang_type *pi;\n \n-      SET_IS_AGGR_TYPE (t, 1);\n-\n       pi = (struct lang_type *) ggc_alloc (sizeof (struct lang_type));\n       bzero ((char *) pi, (int) sizeof (struct lang_type));\n \n@@ -4819,6 +4817,18 @@ cp_make_lang_type (code)\n   return t;\n }\n \n+tree\n+make_aggr_type (code)\n+     enum tree_code code;\n+{\n+  tree t = cp_make_lang_type (code);\n+\n+  if (IS_AGGR_TYPE_CODE (code))\n+    SET_IS_AGGR_TYPE (t, 1);\n+\n+  return t;\n+}\n+\n void\n dump_time_statistics ()\n {"}, {"sha": "48d0c7b022d731521176f00648a85378ad84bce8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -1793,7 +1793,7 @@ process_template_parm (list, next)\n       \n       if (parm && TREE_CODE (parm) == TEMPLATE_DECL)\n \t{\n-\t  t = make_lang_type (TEMPLATE_TEMPLATE_PARM);\n+\t  t = make_aggr_type (TEMPLATE_TEMPLATE_PARM);\n \t  /* This is for distinguishing between real templates and template \n \t     template parameters */\n \t  TREE_TYPE (parm) = t;\n@@ -1802,7 +1802,7 @@ process_template_parm (list, next)\n \t}\n       else\n \t{\n-\t  t = make_lang_type (TEMPLATE_TYPE_PARM);\n+\t  t = make_aggr_type (TEMPLATE_TYPE_PARM);\n \t  /* parm is either IDENTIFIER_NODE or NULL_TREE */\n \t  decl = build_decl (TYPE_DECL, parm, t);\n \t}\n@@ -3904,7 +3904,7 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \t}\n       else\n \t{\n-\t  t = make_lang_type (TREE_CODE (template_type));\n+\t  t = make_aggr_type (TREE_CODE (template_type));\n \t  CLASSTYPE_DECLARED_CLASS (t) \n \t    = CLASSTYPE_DECLARED_CLASS (template_type);\n \t  CLASSTYPE_GOT_SEMICOLON (t) = 1;"}, {"sha": "6776d11670c7282d979bc923c7ab084a9542b103", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -811,7 +811,7 @@ expand_class_desc (tdecl, type)\n \n       /* A reasonably close approximation of __class_type_info::base_info */\n \n-      base_info_type_node = make_lang_type (RECORD_TYPE);\n+      base_info_type_node = make_aggr_type (RECORD_TYPE);\n \n       /* Actually const __user_type_info * */\n       fields [0] = build_lang_decl"}, {"sha": "339726fe7ed52d483af7c98a10a309b7501038e4", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -1815,7 +1815,7 @@ begin_class_definition (t)\n   if (t == error_mark_node\n       || ! IS_AGGR_TYPE (t))\n     {\n-      t = make_lang_type (RECORD_TYPE);\n+      t = make_aggr_type (RECORD_TYPE);\n       pushtag (make_anon_name (), t, 0);\n     }\n \n@@ -1880,7 +1880,7 @@ begin_class_definition (t)\n   \n   if (TYPE_BEING_DEFINED (t))\n     {\n-      t = make_lang_type (TREE_CODE (t));\n+      t = make_aggr_type (TREE_CODE (t));\n       pushtag (TYPE_IDENTIFIER (t), t, 0);\n     }\n   maybe_process_partial_specialization (t);\n@@ -2223,7 +2223,7 @@ finish_typeof (expr)\n     {\n       tree t;\n \n-      t = make_lang_type (TYPEOF_TYPE);\n+      t = make_aggr_type (TYPEOF_TYPE);\n       TYPE_FIELDS (t) = expr;\n \n       return t;"}, {"sha": "37c947d82267747f45332d905942c0f1471d42eb", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33848bb0281d0be603c0391342284273c123ae4a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=33848bb0281d0be603c0391342284273c123ae4a", "patch": "@@ -1560,7 +1560,7 @@ copy_template_template_parm (t)\n   tree template = TYPE_NAME (t);\n   tree t2;\n \n-  t2 = make_lang_type (TEMPLATE_TEMPLATE_PARM);\n+  t2 = make_aggr_type (TEMPLATE_TEMPLATE_PARM);\n   template = copy_node (template);\n   copy_lang_decl (template);\n "}]}