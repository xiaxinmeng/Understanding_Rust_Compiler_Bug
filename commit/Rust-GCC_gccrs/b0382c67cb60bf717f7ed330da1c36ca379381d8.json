{"sha": "b0382c67cb60bf717f7ed330da1c36ca379381d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzODJjNjdjYjYwYmY3MTdmN2VkMzMwZGExYzM2Y2EzNzkzODFkOA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-08-04T20:37:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-08-04T20:37:38Z"}, "message": "tree-cfg.c (tree_duplicate_bb): Mark duplicated definitions.\n\n\n\t* tree-cfg.c (tree_duplicate_bb): Mark duplicated definitions.\n\t* tree-flow.h (rewrite_ssa_into_ssa): Declaration changed.\n\t* tree-into-ssa.c (rewrite_ssa_into_ssa): Use new interface to\n\tmanipulate the duplicated ssa names.\n\t* tree-ssanames.c (ssa_names_to_rewrite): New variable.\n\t(marked_for_rewrite_p, any_marked_for_rewrite_p, mark_for_rewrite,\n\tunmark_all_for_rewrite, marked_ssa_names, release_ssa_name_force):\n\tNew functions.\n\t(release_ssa_name): Do not release ssa names that may have multiple\n\tdefinitions.\n\t* tree.h (release_ssa_name_force, mark_for_rewrite,\n\tunmark_all_for_rewrite, marked_for_rewrite_p, any_marked_for_rewrite_p,\n\tmarked_ssa_names): Declare.\n\t* tree-ssa-loop-ch.c (mark_defs_for_rewrite): Remove.\n\t(duplicate_blocks): Remove call to mark_defs_for_rewrite.\n\tUpdate call to rewrite_ssa_into_ssa.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r85572", "tree": {"sha": "23b173bffe56f19ee8231be3aae5255ddc05cbc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23b173bffe56f19ee8231be3aae5255ddc05cbc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0382c67cb60bf717f7ed330da1c36ca379381d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0382c67cb60bf717f7ed330da1c36ca379381d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0382c67cb60bf717f7ed330da1c36ca379381d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0382c67cb60bf717f7ed330da1c36ca379381d8/comments", "author": null, "committer": null, "parents": [{"sha": "63c5b4952ee1141038f756fc5a44511296ad7f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c5b4952ee1141038f756fc5a44511296ad7f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c5b4952ee1141038f756fc5a44511296ad7f8e"}], "stats": {"total": 205, "additions": 134, "deletions": 71}, "files": [{"sha": "e62fdf50fc678659a361864aca153c397b543f01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0382c67cb60bf717f7ed330da1c36ca379381d8", "patch": "@@ -1,3 +1,23 @@\n+2004-08-04  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\t* tree-cfg.c (tree_duplicate_bb): Mark duplicated definitions.\n+\t* tree-flow.h (rewrite_ssa_into_ssa): Declaration changed.\n+\t* tree-into-ssa.c (rewrite_ssa_into_ssa): Use new interface to\n+\tmanipulate the duplicated ssa names.\n+\t* tree-ssanames.c (ssa_names_to_rewrite): New variable.\n+\t(marked_for_rewrite_p, any_marked_for_rewrite_p, mark_for_rewrite,\n+\tunmark_all_for_rewrite, marked_ssa_names, release_ssa_name_force):\n+\tNew functions.\n+\t(release_ssa_name): Do not release ssa names that may have multiple\n+\tdefinitions.\n+\t* tree.h (release_ssa_name_force, mark_for_rewrite,\n+\tunmark_all_for_rewrite, marked_for_rewrite_p, any_marked_for_rewrite_p,\n+\tmarked_ssa_names): Declare.\n+\t* tree-ssa-loop-ch.c (mark_defs_for_rewrite): Remove.\n+\t(duplicate_blocks): Remove call to mark_defs_for_rewrite.\n+\tUpdate call to rewrite_ssa_into_ssa.\n+\n 2004-08-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* defaults.h (TARGET_DECLSPEC): New macro."}, {"sha": "576531610eb9d78baa8858f7f7c2704a2c689310", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=b0382c67cb60bf717f7ed330da1c36ca379381d8", "patch": "@@ -4297,8 +4297,19 @@ tree_duplicate_bb (basic_block bb)\n {\n   basic_block new_bb;\n   block_stmt_iterator bsi, bsi_tgt;\n+  tree phi;\n+  def_optype defs;\n+  v_may_def_optype v_may_defs;\n+  v_must_def_optype v_must_defs;\n+  unsigned j;\n \n   new_bb = create_empty_bb (EXIT_BLOCK_PTR->prev_bb);\n+\n+  for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+    {\n+      mark_for_rewrite (PHI_RESULT (phi));\n+    }\n+\n   bsi_tgt = bsi_start (new_bb);\n   for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n     {\n@@ -4308,6 +4319,21 @@ tree_duplicate_bb (basic_block bb)\n       if (TREE_CODE (stmt) == LABEL_EXPR)\n \tcontinue;\n \n+      /* Record the definitions.  */\n+      get_stmt_operands (stmt);\n+\n+      defs = STMT_DEF_OPS (stmt);\n+      for (j = 0; j < NUM_DEFS (defs); j++)\n+\tmark_for_rewrite (DEF_OP (defs, j));\n+\n+      v_may_defs = STMT_V_MAY_DEF_OPS (stmt);\n+      for (j = 0; j < NUM_V_MAY_DEFS (v_may_defs); j++)\n+\tmark_for_rewrite (V_MAY_DEF_RESULT (v_may_defs, j));\n+\n+      v_must_defs = STMT_V_MUST_DEF_OPS (stmt);\n+      for (j = 0; j < NUM_V_MUST_DEFS (v_must_defs); j++)\n+\tmark_for_rewrite (V_MUST_DEF_OP (v_must_defs, j));\n+\n       copy = unshare_expr (stmt);\n \n       /* Copy also the virtual operands.  */"}, {"sha": "0a979ef02cea01da10c2cca698aa07849fbcc1b8", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=b0382c67cb60bf717f7ed330da1c36ca379381d8", "patch": "@@ -581,7 +581,7 @@ extern void kill_redundant_phi_nodes (void);\n \n /* In tree-into-ssa.c  */\n extern void rewrite_into_ssa (bool);\n-extern void rewrite_ssa_into_ssa (bitmap);\n+extern void rewrite_ssa_into_ssa (void);\n \n void compute_global_livein (bitmap, bitmap);\n tree duplicate_ssa_name (tree, tree);"}, {"sha": "edeeab5f1bf93a512b7c4a3ec86e8cff6008c2df", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=b0382c67cb60bf717f7ed330da1c36ca379381d8", "patch": "@@ -1740,11 +1740,11 @@ rewrite_into_ssa (bool all)\n   timevar_pop (TV_TREE_SSA_OTHER);\n }\n \n-/* The ssa names in NAMES_TO_RENAME may have more than one definition;\n+/* The marked ssa names may have more than one definition;\n    add phi nodes and rewrite them to fix this.  */\n \n void\n-rewrite_ssa_into_ssa (bitmap names_to_rename)\n+rewrite_ssa_into_ssa (void)\n {\n   bitmap *dfs;\n   basic_block bb;\n@@ -1753,9 +1753,11 @@ rewrite_ssa_into_ssa (bitmap names_to_rename)\n   unsigned i;\n   sbitmap snames_to_rename;\n   tree name;\n+  bitmap to_rename;\n   \n-  if (bitmap_first_set_bit (names_to_rename) < 0)\n+  if (!any_marked_for_rewrite_p ())\n     return;\n+  to_rename = marked_ssa_names ();\n \n   timevar_push (TV_TREE_SSA_OTHER);\n \n@@ -1800,7 +1802,7 @@ rewrite_ssa_into_ssa (bitmap names_to_rename)\n \n   snames_to_rename = sbitmap_alloc (num_ssa_names);\n   sbitmap_zero (snames_to_rename);\n-  EXECUTE_IF_SET_IN_BITMAP (names_to_rename, 0, i,\n+  EXECUTE_IF_SET_IN_BITMAP (to_rename, 0, i,\n \t\t\t    SET_BIT (snames_to_rename, i));\n \n   mark_def_sites_global_data.kills = sbitmap_alloc (num_ssa_names);\n@@ -1826,7 +1828,7 @@ rewrite_ssa_into_ssa (bitmap names_to_rename)\n     set_current_def (ssa_name (i), NULL_TREE);\n \n   /* Insert PHI nodes at dominance frontiers of definition blocks.  */\n-  insert_phi_nodes (dfs, names_to_rename);\n+  insert_phi_nodes (dfs, to_rename);\n \n   /* Rewrite all the basic blocks in the program.  */\n   timevar_push (TV_TREE_SSA_REWRITE_BLOCKS);\n@@ -1855,8 +1857,9 @@ rewrite_ssa_into_ssa (bitmap names_to_rename)\n   /* Finalize the dominator walker.  */\n   fini_walk_dominator_tree (&walk_data);\n \n-  EXECUTE_IF_SET_IN_BITMAP (names_to_rename, 0, i,\n-      release_ssa_name (ssa_name (i)));\n+  unmark_all_for_rewrite ();\n+\n+  EXECUTE_IF_SET_IN_BITMAP (to_rename, 0, i, release_ssa_name (ssa_name (i)));\n \n   sbitmap_free (snames_to_rename);\n \n@@ -1886,6 +1889,7 @@ rewrite_ssa_into_ssa (bitmap names_to_rename)\n       SSA_NAME_AUX (name) = NULL;\n     }\n \n+  BITMAP_XFREE (to_rename);\n   timevar_pop (TV_TREE_SSA_OTHER);\n }\n "}, {"sha": "f10ec75e1cc395895bd07a7282ab783d264ea218", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 1, "deletions": 62, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=b0382c67cb60bf717f7ed330da1c36ca379381d8", "patch": "@@ -99,54 +99,6 @@ should_duplicate_loop_header_p (basic_block header, struct loop *loop,\n   return true;\n }\n \n-/* Marks variables defined in basic block BB for rewriting.  */\n-\n-static void\n-mark_defs_for_rewrite (basic_block bb)\n-{\n-  tree stmt, var;\n-  block_stmt_iterator bsi;\n-  stmt_ann_t ann;\n-  def_optype defs;\n-  v_may_def_optype v_may_defs;\n-  v_must_def_optype v_must_defs;\n-  unsigned i;\n-\n-  for (stmt = phi_nodes (bb); stmt; stmt = TREE_CHAIN (stmt))\n-    {\n-      var = PHI_RESULT (stmt);\n-      bitmap_set_bit (vars_to_rename, SSA_NAME_VERSION (var));\n-    }\n-\n-  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-    {\n-      stmt = bsi_stmt (bsi);\n-      get_stmt_operands (stmt);\n-      ann = stmt_ann (stmt);\n-\n-      defs = DEF_OPS (ann);\n-      for (i = 0; i < NUM_DEFS (defs); i++)\n-\t{\n-\t  var = DEF_OP (defs, i);\n-\t  bitmap_set_bit (vars_to_rename, SSA_NAME_VERSION (var));\n-\t}\n-\n-      v_may_defs = V_MAY_DEF_OPS (ann);\n-      for (i = 0; i < NUM_V_MAY_DEFS (v_may_defs); i++)\n-\t{\n-\t  var = V_MAY_DEF_RESULT (v_may_defs, i);\n-\t  bitmap_set_bit (vars_to_rename, SSA_NAME_VERSION (var));\n-\t}\n-\n-      v_must_defs = V_MUST_DEF_OPS (ann);\n-      for (i = 0; i < NUM_V_MUST_DEFS (v_must_defs); i++)\n-\t{\n-\t  var = V_MUST_DEF_OP (v_must_defs, i);\n-\t  bitmap_set_bit (vars_to_rename, SSA_NAME_VERSION (var));\n-\t}\n-    }\n-}\n-\n /* Duplicates destinations of edges in BBS_TO_DUPLICATE.  */\n \n static void\n@@ -161,18 +113,6 @@ duplicate_blocks (varray_type bbs_to_duplicate)\n      up-to-date.  */\n   free_dominance_info (CDI_DOMINATORS);\n \n-  for (i = 0; i < VARRAY_ACTIVE_SIZE (bbs_to_duplicate); i++)\n-    {\n-      preheader_edge = VARRAY_GENERIC_PTR_NOGC (bbs_to_duplicate, i);\n-      header = preheader_edge->dest;\n-\n-      /* It is sufficient to rewrite the definitions, since the uses of\n-\t the operands defined outside of the duplicated basic block are\n-\t still valid (every basic block that dominates the original block\n-\t also dominates the duplicate).  */\n-      mark_defs_for_rewrite (header);\n-    }\n-\n   for (i = 0; i < VARRAY_ACTIVE_SIZE (bbs_to_duplicate); i++)\n     {\n       preheader_edge = VARRAY_GENERIC_PTR_NOGC (bbs_to_duplicate, i);\n@@ -210,8 +150,7 @@ duplicate_blocks (varray_type bbs_to_duplicate)\n \n   calculate_dominance_info (CDI_DOMINATORS);\n \n-  rewrite_ssa_into_ssa (vars_to_rename);\n-  bitmap_clear (vars_to_rename);\n+  rewrite_ssa_into_ssa ();\n }\n \n /* Checks whether LOOP is a do-while style loop.  */"}, {"sha": "94c14538b1630e416be095e3198f1d807410929c", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=b0382c67cb60bf717f7ed330da1c36ca379381d8", "patch": "@@ -60,7 +60,10 @@ Boston, MA 02111-1307, USA.  */\n    \n /* Array of all SSA_NAMEs used in the function.  */\n varray_type ssa_names;\n-                                                                                \n+\n+/* Bitmap of ssa names marked for rewriting.  */\n+bitmap ssa_names_to_rewrite;\n+\n /* Free list of SSA_NAMEs.  This list is wiped at the end of each function\n    after we leave SSA form.  */\n static GTY (()) tree free_ssanames;\n@@ -74,6 +77,64 @@ unsigned int ssa_name_nodes_reused;\n unsigned int ssa_name_nodes_created;\n #endif\n \n+/* Returns true if ssa name VAR is marked for rewrite.  */\n+\n+bool\n+marked_for_rewrite_p (tree var)\n+{\n+  if (ssa_names_to_rewrite\n+      && bitmap_bit_p (ssa_names_to_rewrite, SSA_NAME_VERSION (var)))\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Returns true if any ssa name is marked for rewrite.  */\n+\n+bool\n+any_marked_for_rewrite_p (void)\n+{\n+  if (!ssa_names_to_rewrite)\n+    return false;\n+\n+  return bitmap_first_set_bit (ssa_names_to_rewrite) != -1;\n+}\n+\n+/* Mark ssa name VAR for rewriting.  */\n+\n+void\n+mark_for_rewrite (tree var)\n+{\n+  if (!ssa_names_to_rewrite)\n+    ssa_names_to_rewrite = BITMAP_XMALLOC ();\n+\n+  bitmap_set_bit (ssa_names_to_rewrite, SSA_NAME_VERSION (var));\n+}\n+\n+/* Unmark all ssa names marked for rewrite.  */\n+\n+void\n+unmark_all_for_rewrite (void)\n+{\n+  if (!ssa_names_to_rewrite)\n+    return;\n+\n+  bitmap_clear (ssa_names_to_rewrite);\n+}\n+\n+/* Return the bitmap of ssa names to rewrite.  Copy the bitmap,\n+   so that the optimizers cannot access internals directly  */\n+\n+bitmap\n+marked_ssa_names (void)\n+{\n+  bitmap ret = BITMAP_XMALLOC ();\n+  if (ssa_names_to_rewrite)\n+    bitmap_copy (ret, ssa_names_to_rewrite);\n+\n+  return ret;\n+}\n+\n /* Initialize management of SSA_NAMEs.  */\n \n void\n@@ -182,6 +243,12 @@ release_ssa_name (tree var)\n   if (var == var_ann (SSA_NAME_VAR (var))->default_def)\n     return;\n \n+  /* If the ssa name is marked for rewriting, it may have multiple definitions,\n+     but we may happen to remove just one of them.  So do not remove the\n+     ssa name now.  */\n+  if (marked_for_rewrite_p (var))\n+    return;\n+\n   /* release_ssa_name can be called multiple times on a single SSA_NAME.\n      However, it should only end up on our free list one time.   We\n      keep a status bit in the SSA_NAME node itself to indicate it has"}, {"sha": "64fde7454158551e53dd49ff289a6f9b4b27563a", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0382c67cb60bf717f7ed330da1c36ca379381d8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b0382c67cb60bf717f7ed330da1c36ca379381d8", "patch": "@@ -2658,6 +2658,13 @@ extern void replace_ssa_name_symbol (tree, tree);\n extern void ssanames_print_statistics (void);\n #endif\n \n+extern void mark_for_rewrite (tree);\n+extern void unmark_all_for_rewrite (void);\n+extern bool marked_for_rewrite_p (tree);\n+extern bool any_marked_for_rewrite_p (void);\n+extern struct bitmap_head_def *marked_ssa_names (void);\n+\n+\n /* Return the (unique) IDENTIFIER_NODE node for a given name.\n    The name is supplied as a char *.  */\n "}]}