{"sha": "6ea531707a876cf6f27e374c535d94a9b5e71a41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhNTMxNzA3YTg3NmNmNmYyN2UzNzRjNTM1ZDk0YTliNWU3MWE0MQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-27T00:04:14Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-27T00:04:14Z"}, "message": "re PR target/6422 (libjava failures on sparc-linux)\n\n2002-04-25  David S. Miller  <davem@redhat.com>\n\n\tPR target/6422\n\t* include/dwarf2-signal.h (MAKE_THROW_FRAME for sparc*): Set\n\tprogram counter to next program counter minus 8.  Update\n\tcomments in this macro to explain why.\n\nFrom-SVN: r52820", "tree": {"sha": "8bed0913f39b308ccc8db5c01cfe920e5e291d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bed0913f39b308ccc8db5c01cfe920e5e291d46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ea531707a876cf6f27e374c535d94a9b5e71a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea531707a876cf6f27e374c535d94a9b5e71a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea531707a876cf6f27e374c535d94a9b5e71a41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea531707a876cf6f27e374c535d94a9b5e71a41/comments", "author": null, "committer": null, "parents": [{"sha": "51ccaeb90434ec16fb5756987b2d7381c1477417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ccaeb90434ec16fb5756987b2d7381c1477417", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ccaeb90434ec16fb5756987b2d7381c1477417"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "2cbcf4e166d6cd8af22a396d5244e010725a6f08", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea531707a876cf6f27e374c535d94a9b5e71a41/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea531707a876cf6f27e374c535d94a9b5e71a41/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6ea531707a876cf6f27e374c535d94a9b5e71a41", "patch": "@@ -1,3 +1,10 @@\n+2002-04-25  David S. Miller  <davem@redhat.com>\n+\n+\tPR target/6422\n+\t* include/dwarf2-signal.h (MAKE_THROW_FRAME for sparc*): Set\n+\tprogram counter to next program counter minus 8.  Update\n+\tcomments in this macro to explain why.\n+\n 2002-04-26  Tom Tromey  <tromey@redhat.com>\n \n \t* verify.cc (construct_primitive_array_type) [void_type]: New"}, {"sha": "b7530b2cbf3fa393ca6e553c7b7d690e051b4a58", "filename": "libjava/include/dwarf2-signal.h", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea531707a876cf6f27e374c535d94a9b5e71a41/libjava%2Finclude%2Fdwarf2-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea531707a876cf6f27e374c535d94a9b5e71a41/libjava%2Finclude%2Fdwarf2-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdwarf2-signal.h?ref=6ea531707a876cf6f27e374c535d94a9b5e71a41", "patch": "@@ -67,11 +67,15 @@ while (0)\n do\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   /* Sparc-32 leaves PC pointing at a faulting instruction\t\t\\\n-   always.  So we adjust the saved PC to point to the following\t\t\\\n-   instruction; this is what the handler in libgcc expects.  */\t\t\\\n-  /* Note that we are lying to the unwinder here, which expects the\t\\\n-   faulting pc, not pc+1.  But we claim the unwind information can't\t\\\n-   be changed by such a ld or st instruction, so it doesn't matter. */\t\\\n+   always.\t\t\t\t\t\t\t\t\\\n+   We advance the PC one instruction past the exception causing PC.\t\\\n+   This is done because FDEs are found with \"context->ra - 1\" in the\t\\\n+   unwinder.\t\t\t\t\t\t\t\t\\\n+   Also, the dwarf2 unwind machinery is going to add 8 to the\t\t\\\n+   PC it uses on Sparc.  So we adjust the PC here.  We do it here\t\\\n+   because we run once for such an exception, however the Sparc specific\\\n+   unwind can run multiple times for the same exception and it would\t\\\n+   adjust the PC more than once resulting in a bogus value.  */\t\t\\\n   struct sig_regs {\t\t\t\t\t\t\t\\\n     unsigned int psr, pc, npc, y, u_regs[16];\t\t\t\t\\\n   } *regp;\t\t\t\t\t\t\t\t\\\n@@ -83,27 +87,29 @@ do\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     /* mov __NR_rt_sigaction, %g1; New signal stack layout */\t\t\\\n     regp = (struct sig_regs *) (_sip + 1);\t\t\t\t\\\n-  regp->pc = regp->npc;\t\t\t\t\t\t\t\\\n-  regp->npc += 4;\t\t\t\t\t\t\t\\\n+  regp->pc = ((regp->pc + 4) - 8);\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n while (0)\n #else\n #define MAKE_THROW_FRAME(_exception)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   /* Sparc-64 leaves PC pointing at a faulting instruction\t\t\\\n-   always.  So we adjust the saved PC to point to the following\t\t\\\n-   instruction; this is what the handler in libgcc expects.  */\t\t\\\n-  /* Note that we are lying to the unwinder here, which expects the\t\\\n-   faulting pc, not pc+1.  But we claim the unwind information can't\t\\\n-   be changed by such a ld or st instruction, so it doesn't matter. */\t\\\n+   always.\t\t\t\t\t\t\t\t\\\n+   We advance the PC one instruction past the exception causing PC.\t\\\n+   This is done because FDEs are found with \"context->ra - 1\" in the\t\\\n+   unwinder.\t\t\t\t\t\t\t\t\\\n+   Also, the dwarf2 unwind machinery is going to add 8 to the\t\t\\\n+   PC it uses on Sparc.  So we adjust the PC here.  We do it here\t\\\n+   because we run once for such an exception, however the Sparc specific\\\n+   unwind can run multiple times for the same exception and it would\t\\\n+   adjust the PC more than once resulting in a bogus value.  */\t\t\\\n   struct pt_regs {\t\t\t\t\t\t\t\\\n     unsigned long u_regs[16];\t\t\t\t\t\t\\\n     unsigned long tstate, tpc, tnpc;\t\t\t\t\t\\\n     unsigned int y, fprs;\t\t\t\t\t\t\\\n   } *regp = (struct pt_regs *) (_sip + 1);\t\t\t\t\\\n-  regp->tpc = regp->tnpc;\t\t\t\t\t\t\\\n-  regp->tnpc += 4;\t\t\t\t\t\t\t\\\n+  regp->tpc = ((regp->tpc + 4) - 8);\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n while (0)\n #endif"}]}