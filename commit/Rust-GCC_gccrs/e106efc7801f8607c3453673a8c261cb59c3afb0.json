{"sha": "e106efc7801f8607c3453673a8c261cb59c3afb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwNmVmYzc4MDFmODYwN2MzNDUzNjczYThjMjYxY2I1OWMzYWZiMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-03-15T11:09:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-03-15T11:09:09Z"}, "message": "re PR tree-optimization/41490 (tree-ssa-sink does not really work)\n\n2011-03-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/41490\n\t* tree-ssa-dce.c (propagate_necessity): Handle returns without\n\tvalue but with VUSE.\n\t* tree-ssa-operands.c (parse_ssa_operands): Add a VUSE on all\n\treturn statements.\n\t* tree-ssa-sink.c (statement_sink_location): Fix store sinking.\n\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Handle virtual PHIs.\n\t* tree-tailcall.c (find_tail_calls): Ignore returns.\n\n\t* gcc.dg/tree-ssa/ssa-sink-6.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-sink-7.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-sink-8.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-sink-9.c: Likewise.\n\t* g++.dg/tree-ssa/pr33604.C: Adjust.\n\nFrom-SVN: r170984", "tree": {"sha": "676bfe35c1401333a3e6069eaf9dfdb1c6b71af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/676bfe35c1401333a3e6069eaf9dfdb1c6b71af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e106efc7801f8607c3453673a8c261cb59c3afb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e106efc7801f8607c3453673a8c261cb59c3afb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e106efc7801f8607c3453673a8c261cb59c3afb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e106efc7801f8607c3453673a8c261cb59c3afb0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17dea42fc45256b06cb19bc36b18e77fdc0f20a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17dea42fc45256b06cb19bc36b18e77fdc0f20a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17dea42fc45256b06cb19bc36b18e77fdc0f20a6"}], "stats": {"total": 256, "additions": 203, "deletions": 53}, "files": [{"sha": "3c55339f4245393766ef3911e21688913b2775b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -1,3 +1,14 @@\n+2011-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41490\n+\t* tree-ssa-dce.c (propagate_necessity): Handle returns without\n+\tvalue but with VUSE.\n+\t* tree-ssa-operands.c (parse_ssa_operands): Add a VUSE on all\n+\treturn statements.\n+\t* tree-ssa-sink.c (statement_sink_location): Fix store sinking.\n+\t* tree-ssa-phiopt.c (tree_ssa_phiopt_worker): Handle virtual PHIs.\n+\t* tree-tailcall.c (find_tail_calls): Ignore returns.\n+\n 2011-03-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/48031"}, {"sha": "2db72ee2a5d50faa1ff39e39b72cc5bea6e4de15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -1,3 +1,12 @@\n+2011-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/41490\n+\t* gcc.dg/tree-ssa/ssa-sink-6.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-sink-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-sink-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-sink-9.c: Likewise.\n+\t* g++.dg/tree-ssa/pr33604.C: Adjust.\n+\n 2011-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/47917"}, {"sha": "039b3be02a4e4edb43c4117d704c3dcd1ba2cfbc", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr33604.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33604.C?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -42,7 +42,8 @@ int main(int argc, char *argv[])\n    yielding\n      D.2137.lhs.m ={v} &I;\n    so that SRA can promote all locals to registers and we end up\n-   referencing a single virtual operand at abort () after optimization.  */\n+   referencing two virtual operands at abort () and the return\n+   after optimization.  */\n \n-/* { dg-final { scan-tree-dump-times \".MEM_\\[0-9\\]*\\\\\\(D\\\\\\)\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \".MEM_\\[0-9\\]*\\\\\\(D\\\\\\)\" 2 \"optimized\" } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "70e48121ee6c07c7090e6c783d9b878a7d28252c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-6.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-sink\" } */\n+\n+int foo(int *a, int r)\n+{\n+  int ret = 0;\n+  *a = 1;\n+  if (r == 3)\n+    *a = 5;\n+  else\n+    ret = r + 20;\n+  return ret;\n+}\n+\n+/* *a = 1 should be sunk to the else block.  */\n+\n+/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink\" } } */\n+/* { dg-final { cleanup-tree-dump \"sink\" } } */"}, {"sha": "ffee03368c59241ea79e1cf9d582ebed25b2c458", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-7.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-sink\" } */\n+\n+int foo(int *a, int r, short *b)\n+{\n+  int ret = 0;\n+  *a = 1;\n+  if (r == 3)\n+    *a = 5;\n+  else\n+    ret = r + 20;\n+  *b = 9;\n+  return ret;\n+}\n+\n+/* *a = 1 should be sunk to the else block.  */\n+\n+/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink\" } } */\n+/* { dg-final { cleanup-tree-dump \"sink\" } } */"}, {"sha": "4a575a7a485e4de197d8d8cbd9a6f06785dc2759", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-8.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-8.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-sink\" } */\n+\n+int foo(int *a, int r, short *b)\n+{\n+  int ret = 0;\n+  *a = 1;\n+  switch (r)\n+    {\n+      case 3:\n+\t  *a = 5;\n+\t  break;\n+      case 4:\n+      case 5:\n+\t  *a = 9;\n+\t  ret = r + 25;\n+\t  break;\n+      default:\n+\t  ret = r + 20;\n+    }\n+  *b = 9;\n+  return ret;\n+}\n+\n+/* *a = 1 should be sunk into the default case.  */\n+\n+/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink\" } } */\n+/* { dg-final { cleanup-tree-dump \"sink\" } } */"}, {"sha": "1a6e2b8d974df1f9b4fb03a1383bf7411dc25b4c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-sink-9.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-sink-9.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-sink\" } */\n+\n+int foo(int *a, int r, int *b)\n+{\n+  int ret = 0;\n+  *a = 1;\n+  if (r == 3)\n+    {\n+      *a = 5;\n+      *b = 3;\n+    }\n+  return ret;\n+}\n+\n+/* *a = 1 should be sunk to the else block.  */\n+\n+/* { dg-final { scan-tree-dump-times \"Sinking\" 1 \"sink\" } } */\n+/* { dg-final { cleanup-tree-dump \"sink\" } } */"}, {"sha": "ce2d41bff31535dfc6bedb0bf3ffc83948fc265e", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -869,7 +869,8 @@ propagate_necessity (struct edge_list *el)\n \t    {\n \t      tree rhs = gimple_return_retval (stmt);\n \t      /* A return statement may perform a load.  */\n-\t      if (TREE_CODE (rhs) != SSA_NAME\n+\t      if (rhs\n+\t\t  && TREE_CODE (rhs) != SSA_NAME\n \t\t  && !is_gimple_min_invariant (rhs))\n \t\t{\n \t\t  if (!ref_may_be_aliased (rhs))"}, {"sha": "7e2600d6e6d005bc63b0fbd13531cb4d4af0afd5", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -1065,6 +1065,9 @@ parse_ssa_operands (gimple stmt)\n       /* Add call-clobbered operands, if needed.  */\n       if (code == GIMPLE_CALL)\n \tmaybe_add_call_vops (stmt);\n+\n+      if (code == GIMPLE_RETURN)\n+\tappend_vuse (gimple_vop (cfun));\n     }\n }\n "}, {"sha": "e5ff6837abf8de9e3a5699f6e3ed800628f879c4", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -311,14 +311,26 @@ tree_ssa_phiopt_worker (bool do_store_elim)\n       else\n \t{\n \t  gimple_seq phis = phi_nodes (bb2);\n+\t  gimple_stmt_iterator gsi;\n \n-\t  /* Check to make sure that there is only one PHI node.\n+\t  /* Check to make sure that there is only one non-virtual PHI node.\n \t     TODO: we could do it with more than one iff the other PHI nodes\n \t     have the same elements for these two edges.  */\n-\t  if (! gimple_seq_singleton_p (phis))\n+\t  phi = NULL;\n+\t  for (gsi = gsi_start (phis); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t    {\n+\t      if (!is_gimple_reg (gimple_phi_result (gsi_stmt (gsi))))\n+\t\tcontinue;\n+\t      if (phi)\n+\t\t{\n+\t\t  phi = NULL;\n+\t\t  break;\n+\t\t}\n+\t      phi = gsi_stmt (gsi);\n+\t    }\n+\t  if (!phi)\n \t    continue;\n \n-\t  phi = gsi_stmt (gsi_start (phis));\n \t  arg0 = gimple_phi_arg_def (phi, e1->dest_idx);\n \t  arg1 = gimple_phi_arg_def (phi, e2->dest_idx);\n "}, {"sha": "c3119ba5a70367acda940d0a868884cffa401a46", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 72, "deletions": 45, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -268,32 +268,24 @@ statement_sink_location (gimple stmt, basic_block frombb,\n \t\t\t gimple_stmt_iterator *togsi)\n {\n   gimple use;\n-  tree def;\n   use_operand_p one_use = NULL_USE_OPERAND_P;\n   basic_block sinkbb;\n   use_operand_p use_p;\n   def_operand_p def_p;\n   ssa_op_iter iter;\n   imm_use_iterator imm_iter;\n \n-  FOR_EACH_SSA_TREE_OPERAND (def, stmt, iter, SSA_OP_ALL_DEFS)\n-    {\n-      FOR_EACH_IMM_USE_FAST (one_use, imm_iter, def)\n-\t{\n-\t  if (is_gimple_debug (USE_STMT (one_use)))\n-\t    continue;\n-\n-\t  break;\n-\t}\n-      if (one_use != NULL_USE_OPERAND_P)\n-        break;\n-    }\n+  /* We only can sink assignments.  */\n+  if (!is_gimple_assign (stmt))\n+    return false;\n \n-  /* Return if there are no immediate uses of this stmt.  */\n-  if (one_use == NULL_USE_OPERAND_P)\n+  /* We only can sink stmts with a single definition.  */\n+  def_p = single_ssa_def_operand (stmt, SSA_OP_ALL_DEFS);\n+  if (def_p == NULL_DEF_OPERAND_P)\n     return false;\n \n-  if (gimple_code (stmt) != GIMPLE_ASSIGN)\n+  /* Return if there are no immediate uses of this stmt.  */\n+  if (has_zero_uses (DEF_FROM_PTR (def_p)))\n     return false;\n \n   /* There are a few classes of things we can't or don't move, some because we\n@@ -323,20 +315,14 @@ statement_sink_location (gimple stmt, basic_block frombb,\n   */\n   if (stmt_ends_bb_p (stmt)\n       || gimple_has_side_effects (stmt)\n-      || is_hidden_global_store (stmt)\n       || gimple_has_volatile_ops (stmt)\n-      || gimple_vuse (stmt)\n+      || (gimple_vuse (stmt) && !gimple_vdef (stmt))\n       || (cfun->has_local_explicit_reg_vars\n \t  && TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt))) == BLKmode))\n     return false;\n \n-  FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, iter, SSA_OP_ALL_DEFS)\n-    {\n-      tree def = DEF_FROM_PTR (def_p);\n-      if (is_global_var (SSA_NAME_VAR (def))\n-\t  || SSA_NAME_OCCURS_IN_ABNORMAL_PHI (def))\n-\treturn false;\n-    }\n+  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (DEF_FROM_PTR (def_p)))\n+    return false;\n \n   FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_ALL_USES)\n     {\n@@ -345,11 +331,40 @@ statement_sink_location (gimple stmt, basic_block frombb,\n \treturn false;\n     }\n \n+  use = NULL;\n+\n+  /* If stmt is a store the one and only use needs to be the VOP\n+     merging PHI node.  */\n+  if (gimple_vdef (stmt))\n+    {\n+      FOR_EACH_IMM_USE_FAST (use_p, imm_iter, DEF_FROM_PTR (def_p))\n+\t{\n+\t  gimple use_stmt = USE_STMT (use_p);\n+\n+\t  /* A killing definition is not a use.  */\n+\t  if (gimple_assign_single_p (use_stmt)\n+\t      && gimple_vdef (use_stmt)\n+\t      && operand_equal_p (gimple_assign_lhs (stmt),\n+\t\t\t\t  gimple_assign_lhs (use_stmt), 0))\n+\t    continue;\n+\n+\t  if (gimple_code (use_stmt) != GIMPLE_PHI)\n+\t    return false;\n+\n+\t  if (use\n+\t      && use != use_stmt)\n+\t    return false;\n+\n+\t  use = use_stmt;\n+\t}\n+      if (!use)\n+\treturn false;\n+    }\n   /* If all the immediate uses are not in the same place, find the nearest\n      common dominator of all the immediate uses.  For PHI nodes, we have to\n      find the nearest common dominator of all of the predecessor blocks, since\n      that is where insertion would have to take place.  */\n-  if (!all_immediate_uses_same_place (stmt))\n+  else if (!all_immediate_uses_same_place (stmt))\n     {\n       bool debug_stmts = false;\n       basic_block commondom = nearest_common_dominator_of_uses (stmt,\n@@ -387,31 +402,35 @@ statement_sink_location (gimple stmt, basic_block frombb,\n \n       return true;\n     }\n-\n-  use = USE_STMT (one_use);\n-  if (gimple_code (use) != GIMPLE_PHI)\n+  else\n     {\n-      sinkbb = gimple_bb (use);\n-      if (sinkbb == frombb || sinkbb->loop_depth > frombb->loop_depth\n-\t  || sinkbb->loop_father != frombb->loop_father)\n-\treturn false;\n+      FOR_EACH_IMM_USE_FAST (one_use, imm_iter, DEF_FROM_PTR (def_p))\n+\t{\n+\t  if (is_gimple_debug (USE_STMT (one_use)))\n+\t    continue;\n+\t  break;\n+\t}\n+      use = USE_STMT (one_use);\n \n-      /* Move the expression to a post dominator can't reduce the number of\n-         executions.  */\n-      if (dominated_by_p (CDI_POST_DOMINATORS, frombb, sinkbb))\n-        return false;\n+      if (gimple_code (use) != GIMPLE_PHI)\n+\t{\n+\t  sinkbb = gimple_bb (use);\n+\t  if (sinkbb == frombb || sinkbb->loop_depth > frombb->loop_depth\n+\t      || sinkbb->loop_father != frombb->loop_father)\n+\t    return false;\n \n-      *togsi = gsi_for_stmt (use);\n+\t  /* Move the expression to a post dominator can't reduce the number of\n+\t     executions.  */\n+\t  if (dominated_by_p (CDI_POST_DOMINATORS, frombb, sinkbb))\n+\t    return false;\n \n-      return true;\n-    }\n+\t  *togsi = gsi_for_stmt (use);\n \n-  /* Note that at this point, all uses must be in the same statement, so it\n-     doesn't matter which def op we choose, pick the first one.  */\n-  FOR_EACH_SSA_TREE_OPERAND (def, stmt, iter, SSA_OP_ALL_DEFS)\n-    break;\n+\t  return true;\n+\t}\n+    }\n \n-  sinkbb = find_bb_for_arg (use, def);\n+  sinkbb = find_bb_for_arg (use, DEF_FROM_PTR (def_p));\n   if (!sinkbb)\n     return false;\n \n@@ -486,6 +505,14 @@ sink_code_in_bb (basic_block bb)\n \t\t   bb->index, (gsi_bb (togsi))->index);\n \t}\n \n+      /* Prepare for VOP update.  */\n+      if (gimple_vdef (stmt))\n+\t{\n+\t  unlink_stmt_vdef (stmt);\n+\t  gimple_set_vdef (stmt, gimple_vop (cfun));\n+\t  mark_sym_for_renaming (gimple_vop (cfun));\n+\t}\n+\n       /* If this is the end of the basic block, we need to insert at the end\n          of the basic block.  */\n       if (gsi_end_p (togsi))"}, {"sha": "c94d6ca824bcd5e171bd723b030983b2c12e15ad", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106efc7801f8607c3453673a8c261cb59c3afb0/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=e106efc7801f8607c3453673a8c261cb59c3afb0", "patch": "@@ -399,8 +399,10 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n     {\n       stmt = gsi_stmt (gsi);\n \n-      /* Ignore labels.  */\n-      if (gimple_code (stmt) == GIMPLE_LABEL || is_gimple_debug (stmt))\n+      /* Ignore labels, returns and debug stmts.  */\n+      if (gimple_code (stmt) == GIMPLE_LABEL\n+\t  || gimple_code (stmt) == GIMPLE_RETURN\n+\t  || is_gimple_debug (stmt))\n \tcontinue;\n \n       /* Check for a call.  */"}]}