{"sha": "6a6360148aac759fe9fffbbf57e914d281509d72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE2MzYwMTQ4YWFjNzU5ZmU5ZmZmYmJmNTdlOTE0ZDI4MTUwOWQ3Mg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-10-30T19:03:14Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-10-30T19:03:14Z"}, "message": "Share code from fold_array_ctor_reference with fold.\n\n        * gimple-fold.c (fold_array_ctor_reference): Move searching code to:\n        * fold-const.c (get_array_ctor_element_at_index): New.\n        (fold): Remove binary-search through CONSTRUCTOR, call previous.\n\n        * fold-const.h (get_array_ctor_element_at_index): New.\n\nFrom-SVN: r229605", "tree": {"sha": "048ba4fc557bff29b1270bd479190d404999156b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/048ba4fc557bff29b1270bd479190d404999156b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a6360148aac759fe9fffbbf57e914d281509d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6360148aac759fe9fffbbf57e914d281509d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a6360148aac759fe9fffbbf57e914d281509d72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a6360148aac759fe9fffbbf57e914d281509d72/comments", "author": null, "committer": null, "parents": [{"sha": "3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1661a9b93fe8000faa6ab4b721a96ffb48d525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b1661a9b93fe8000faa6ab4b721a96ffb48d525"}], "stats": {"total": 152, "additions": 83, "deletions": 69}, "files": [{"sha": "ee6a34ff94d288b0316087e0bc91ef2d57a682b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6360148aac759fe9fffbbf57e914d281509d72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6360148aac759fe9fffbbf57e914d281509d72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a6360148aac759fe9fffbbf57e914d281509d72", "patch": "@@ -1,3 +1,11 @@\n+2015-10-30  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gimple-fold.c (fold_array_ctor_reference): Move searching code to:\n+\t* fold-const.c (get_array_ctor_element_at_index): New.\n+\t(fold): Remove binary-search through CONSTRUCTOR, call previous.\n+\n+\t* fold-const.h (get_array_ctor_element_at_index): New.\n+\n 2015-10-30  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \t* Makefile.in (OBJS): Add multiple_target.o."}, {"sha": "b9168f331ed534afb02f02af7f946179a01b85da", "filename": "gcc/fold-const.c", "status": "modified", "additions": 71, "deletions": 25, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6360148aac759fe9fffbbf57e914d281509d72/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6360148aac759fe9fffbbf57e914d281509d72/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6a6360148aac759fe9fffbbf57e914d281509d72", "patch": "@@ -11845,6 +11845,73 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n     } /* switch (code) */\n }\n \n+/* Gets the element ACCESS_INDEX from CTOR, which must be a CONSTRUCTOR\n+   of an array (or vector).  */\n+\n+tree\n+get_array_ctor_element_at_index (tree ctor, offset_int access_index)\n+{\n+  tree index_type = NULL_TREE;\n+  offset_int low_bound = 0;\n+\n+  if (TREE_CODE (TREE_TYPE (ctor)) == ARRAY_TYPE)\n+  {\n+    tree domain_type = TYPE_DOMAIN (TREE_TYPE (ctor));\n+    if (domain_type && TYPE_MIN_VALUE (domain_type))\n+    {\n+      /* Static constructors for variably sized objects makes no sense.  */\n+      gcc_assert (TREE_CODE (TYPE_MIN_VALUE (domain_type)) == INTEGER_CST);\n+      index_type = TREE_TYPE (TYPE_MIN_VALUE (domain_type));\n+      low_bound = wi::to_offset (TYPE_MIN_VALUE (domain_type));\n+    }\n+  }\n+\n+  if (index_type)\n+    access_index = wi::ext (access_index, TYPE_PRECISION (index_type),\n+\t\t\t    TYPE_SIGN (index_type));\n+\n+  offset_int index = low_bound - 1;\n+  if (index_type)\n+    index = wi::ext (index, TYPE_PRECISION (index_type),\n+\t\t     TYPE_SIGN (index_type));\n+\n+  offset_int max_index;\n+  unsigned HOST_WIDE_INT cnt;\n+  tree cfield, cval;\n+\n+  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), cnt, cfield, cval)\n+  {\n+    /* Array constructor might explicitely set index, or specify range\n+     * or leave index NULL meaning that it is next index after previous\n+     * one.  */\n+    if (cfield)\n+    {\n+      if (TREE_CODE (cfield) == INTEGER_CST)\n+\tmax_index = index = wi::to_offset (cfield);\n+      else\n+      {\n+\tgcc_assert (TREE_CODE (cfield) == RANGE_EXPR);\n+\tindex = wi::to_offset (TREE_OPERAND (cfield, 0));\n+\tmax_index = wi::to_offset (TREE_OPERAND (cfield, 1));\n+      }\n+    }\n+    else\n+    {\n+      index += 1;\n+      if (index_type)\n+\tindex = wi::ext (index, TYPE_PRECISION (index_type),\n+\t\t\t TYPE_SIGN (index_type));\n+\tmax_index = index;\n+    }\n+\n+    /* Do we have match?  */\n+    if (wi::cmpu (access_index, index) >= 0\n+\t&& wi::cmpu (access_index, max_index) <= 0)\n+      return cval;\n+  }\n+  return NULL_TREE;\n+}\n+\n /* Perform constant folding and related simplification of EXPR.\n    The related simplifications include x*1 => x, x*0 => 0, etc.,\n    and application of the associative law.\n@@ -11921,31 +11988,10 @@ fold (tree expr)\n \t    && TREE_CODE (op0) == CONSTRUCTOR\n \t    && ! type_contains_placeholder_p (TREE_TYPE (op0)))\n \t  {\n-\t    vec<constructor_elt, va_gc> *elts = CONSTRUCTOR_ELTS (op0);\n-\t    unsigned HOST_WIDE_INT end = vec_safe_length (elts);\n-\t    unsigned HOST_WIDE_INT begin = 0;\n-\n-\t    /* Find a matching index by means of a binary search.  */\n-\t    while (begin != end)\n-\t      {\n-\t\tunsigned HOST_WIDE_INT middle = (begin + end) / 2;\n-\t\ttree index = (*elts)[middle].index;\n-\n-\t\tif (TREE_CODE (index) == INTEGER_CST\n-\t\t    && tree_int_cst_lt (index, op1))\n-\t\t  begin = middle + 1;\n-\t\telse if (TREE_CODE (index) == INTEGER_CST\n-\t\t\t && tree_int_cst_lt (op1, index))\n-\t\t  end = middle;\n-\t\telse if (TREE_CODE (index) == RANGE_EXPR\n-\t\t\t && tree_int_cst_lt (TREE_OPERAND (index, 1), op1))\n-\t\t  begin = middle + 1;\n-\t\telse if (TREE_CODE (index) == RANGE_EXPR\n-\t\t\t && tree_int_cst_lt (op1, TREE_OPERAND (index, 0)))\n-\t\t  end = middle;\n-\t\telse\n-\t\t  return (*elts)[middle].value;\n-\t      }\n+\t    tree val = get_array_ctor_element_at_index (op0,\n+\t\t\t\t\t\t\twi::to_offset (op1));\n+\t    if (val)\n+\t      return val;\n \t  }\n \n \treturn t;"}, {"sha": "97d18cf0e22a31f70131c3d29f940e925e4e6f64", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6360148aac759fe9fffbbf57e914d281509d72/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6360148aac759fe9fffbbf57e914d281509d72/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=6a6360148aac759fe9fffbbf57e914d281509d72", "patch": "@@ -73,6 +73,7 @@ extern tree fold_build_call_array_loc (location_t, tree, tree, int, tree *);\n #define fold_build_call_array_initializer(T1,T2,N,T4)\\\n    fold_build_call_array_initializer_loc (UNKNOWN_LOCATION, T1, T2, N, T4)\n extern tree fold_build_call_array_initializer_loc (location_t, tree, tree, int, tree *);\n+extern tree get_array_ctor_element_at_index (tree, offset_int);\n extern bool fold_convertible_p (const_tree, const_tree);\n #define fold_convert(T1,T2)\\\n    fold_convert_loc (UNKNOWN_LOCATION, T1, T2)"}, {"sha": "c9b9593c23a4273d0e2e47c9782b598ec31c1b0f", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 3, "deletions": 44, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a6360148aac759fe9fffbbf57e914d281509d72/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a6360148aac759fe9fffbbf57e914d281509d72/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=6a6360148aac759fe9fffbbf57e914d281509d72", "patch": "@@ -5301,13 +5301,10 @@ fold_array_ctor_reference (tree type, tree ctor,\n \t\t\t   unsigned HOST_WIDE_INT size,\n \t\t\t   tree from_decl)\n {\n-  unsigned HOST_WIDE_INT cnt;\n-  tree cfield, cval;\n   offset_int low_bound;\n   offset_int elt_size;\n-  offset_int index, max_index;\n   offset_int access_index;\n-  tree domain_type = NULL_TREE, index_type = NULL_TREE;\n+  tree domain_type = NULL_TREE;\n   HOST_WIDE_INT inner_offset;\n \n   /* Compute low bound and elt size.  */\n@@ -5317,7 +5314,6 @@ fold_array_ctor_reference (tree type, tree ctor,\n     {\n       /* Static constructors for variably sized objects makes no sense.  */\n       gcc_assert (TREE_CODE (TYPE_MIN_VALUE (domain_type)) == INTEGER_CST);\n-      index_type = TREE_TYPE (TYPE_MIN_VALUE (domain_type));\n       low_bound = wi::to_offset (TYPE_MIN_VALUE (domain_type));\n     }\n   else\n@@ -5339,9 +5335,6 @@ fold_array_ctor_reference (tree type, tree ctor,\n   access_index = wi::udiv_trunc (offset_int (offset / BITS_PER_UNIT),\n \t\t\t\t elt_size);\n   access_index += low_bound;\n-  if (index_type)\n-    access_index = wi::ext (access_index, TYPE_PRECISION (index_type),\n-\t\t\t    TYPE_SIGN (index_type));\n \n   /* And offset within the access.  */\n   inner_offset = offset % (elt_size.to_uhwi () * BITS_PER_UNIT);\n@@ -5350,43 +5343,9 @@ fold_array_ctor_reference (tree type, tree ctor,\n      care to fold accesses spanning multiple array indexes.  */\n   if (inner_offset + size > elt_size.to_uhwi () * BITS_PER_UNIT)\n     return NULL_TREE;\n+  if (tree val = get_array_ctor_element_at_index (ctor, access_index))\n+    return fold_ctor_reference (type, val, inner_offset, size, from_decl);\n \n-  index = low_bound - 1;\n-  if (index_type)\n-    index = wi::ext (index, TYPE_PRECISION (index_type),\n-\t\t     TYPE_SIGN (index_type));\n-\n-  FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), cnt, cfield, cval)\n-    {\n-      /* Array constructor might explicitely set index, or specify range\n-\t or leave index NULL meaning that it is next index after previous\n-\t one.  */\n-      if (cfield)\n-\t{\n-\t  if (TREE_CODE (cfield) == INTEGER_CST)\n-\t    max_index = index = wi::to_offset (cfield);\n-\t  else\n-\t    {\n-\t      gcc_assert (TREE_CODE (cfield) == RANGE_EXPR);\n-\t      index = wi::to_offset (TREE_OPERAND (cfield, 0));\n-\t      max_index = wi::to_offset (TREE_OPERAND (cfield, 1));\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  index += 1;\n-\t  if (index_type)\n-\t    index = wi::ext (index, TYPE_PRECISION (index_type),\n-\t\t\t     TYPE_SIGN (index_type));\n-\t  max_index = index;\n-\t}\n-\n-      /* Do we have match?  */\n-      if (wi::cmpu (access_index, index) >= 0\n-\t  && wi::cmpu (access_index, max_index) <= 0)\n-\treturn fold_ctor_reference (type, cval, inner_offset, size,\n-\t\t\t\t    from_decl);\n-    }\n   /* When memory is not explicitely mentioned in constructor,\n      it is 0 (or out of range).  */\n   return build_zero_cst (type);"}]}