{"sha": "f719a85deb51efd40101c6fcdc46c3bf7b73f0b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxOWE4NWRlYjUxZWZkNDAxMDFjNmZjZGM0NmMzYmY3YjczZjBiNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-14T12:05:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-14T12:05:18Z"}, "message": "Modify all patterns which handle stores to memory to also check current_function_varargs and current_function_stdarg.\n\nModify all patterns which handle stores to memory to also check\ncurrent_function_varargs and current_function_stdarg.  q\n\nFrom-SVN: r10125", "tree": {"sha": "0a989b8a38adc5b3945fce260d7b4d488d5d3ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a989b8a38adc5b3945fce260d7b4d488d5d3ca1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f719a85deb51efd40101c6fcdc46c3bf7b73f0b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f719a85deb51efd40101c6fcdc46c3bf7b73f0b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f719a85deb51efd40101c6fcdc46c3bf7b73f0b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f719a85deb51efd40101c6fcdc46c3bf7b73f0b5/comments", "author": null, "committer": null, "parents": [{"sha": "ca00d1e070c7b360dbe30356cd3f793e95351716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca00d1e070c7b360dbe30356cd3f793e95351716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca00d1e070c7b360dbe30356cd3f793e95351716"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "a458aadd01f32f790175358af886637a8f601881", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f719a85deb51efd40101c6fcdc46c3bf7b73f0b5/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f719a85deb51efd40101c6fcdc46c3bf7b73f0b5/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=f719a85deb51efd40101c6fcdc46c3bf7b73f0b5", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for Intel 80960 chip for GNU C compiler\n-;;   Copyright (C) 1992 Free Software Foundation, Inc.\n+;;   Copyright (C) 1992, 1995 Free Software Foundation, Inc.\n ;;   Contributed by Steven McGeady, Intel Corp.\n ;;   Additional work by Glenn Colon-Bonet, Jonathan Shapiro, Andy Wilson\n ;;   Converted to GCC 2.0 by Jim Wilson and Michael Tiemann, Cygnus Support.\n@@ -554,16 +554,19 @@\n ;; the calling convention is defined so that the arg pointer when it is not\n ;; overwise being used is zero.  Thus, we can handle store zero to memory\n ;; by storing an unused arg pointer.  The arg pointer will be unused if\n-;; current_function_args_size is zero.  This value of this variable is not\n-;; valid until after all rtl generation is complete, including function\n-;; inlining (because a function that doesn't need an arg pointer may be\n-;; inlined into a function that does need an arg pointer), so we must also\n-;; check that rtx_equal_function_value_matters is zero.\n+;; current_function_args_size is zero and this is not a stdarg/varargs\n+;; function.  This value of the former variable is not valid until after\n+;; all rtl generation is complete, including function inlining (because a\n+;; function that doesn't need an arg pointer may be inlined into a function\n+;; that does need an arg pointer), so we must also check that\n+;; rtx_equal_function_value_matters is zero.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:SI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n   \"(current_function_args_size == 0\n+    && current_function_varargs == 0\n+    && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode)\n@@ -598,6 +601,8 @@\n   [(set (match_operand:SI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:SI 1 \"general_operand\" \"dI,i,m,d\"))]\n   \"(current_function_args_size != 0\n+    || current_function_varargs != 0\n+    || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -643,6 +648,8 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:HI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n   \"(current_function_args_size == 0\n+    && current_function_varargs == 0\n+    && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode)\n@@ -678,6 +685,8 @@\n   [(set (match_operand:HI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:HI 1 \"general_operand\" \"dI,i,m,d\"))]\n   \"(current_function_args_size != 0\n+    || current_function_varargs != 0\n+    || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode))\"\n@@ -720,6 +729,8 @@\n   [(set (match_operand:QI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:QI 1 \"general_operand\" \"dI,i,m,dJ\"))]\n   \"(current_function_args_size == 0\n+    && current_function_varargs == 0\n+    && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode)\n@@ -755,6 +766,8 @@\n   [(set (match_operand:QI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:QI 1 \"general_operand\" \"dI,i,m,d\"))]\n   \"(current_function_args_size != 0\n+    || current_function_varargs != 0\n+    || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], QImode)\n        || register_operand (operands[1], QImode))\"\n@@ -797,6 +810,8 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"=d,d,d,m,o\")\n \t(match_operand:DI 1 \"general_operand\" \"dI,i,m,d,J\"))]\n   \"(current_function_args_size == 0\n+    && current_function_varargs == 0\n+    && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode)\n@@ -825,6 +840,8 @@\n   [(set (match_operand:DI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:DI 1 \"general_operand\" \"dI,i,m,d\"))]\n   \"(current_function_args_size != 0\n+    || current_function_varargs != 0\n+    || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\"\n@@ -859,6 +876,8 @@\n   [(set (match_operand:TI 0 \"general_operand\" \"=d,d,d,m,o\")\n \t(match_operand:TI 1 \"general_operand\" \"dI,i,m,d,J\"))]\n   \"(current_function_args_size == 0\n+    && current_function_varargs == 0\n+    && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], TImode)\n        || register_operand (operands[1], TImode)\n@@ -889,6 +908,8 @@\n   [(set (match_operand:TI 0 \"general_operand\" \"=d,d,d,m\")\n \t(match_operand:TI 1 \"general_operand\" \"dI,i,m,d\"))]\n   \"(current_function_args_size != 0\n+    || current_function_varargs != 0\n+    || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], TImode)\n        || register_operand (operands[1], TImode))\"\n@@ -977,6 +998,8 @@\n   [(set (match_operand:DF 0 \"general_operand\" \"=r,*f,d,d,m,o\")\n \t(match_operand:DF 1 \"fpmove_src_operand\" \"r,GH,F,m,d,G\"))]\n   \"(current_function_args_size == 0\n+    && current_function_varargs == 0\n+    && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode)\n@@ -1009,6 +1032,8 @@\n   [(set (match_operand:DF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:DF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n   \"(current_function_args_size != 0\n+    || current_function_varargs != 0\n+    || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode))\"\n@@ -1047,6 +1072,8 @@\n   [(set (match_operand:SF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:SF 1 \"fpmove_src_operand\" \"r,GH,F,m,dG\"))]\n   \"(current_function_args_size == 0\n+    && current_function_varargs == 0\n+    && current_function_stdarg == 0\n     && rtx_equal_function_value_matters == 0)\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode)\n@@ -1078,6 +1105,8 @@\n   [(set (match_operand:SF 0 \"general_operand\" \"=r,*f,d,d,m\")\n \t(match_operand:SF 1 \"fpmove_src_operand\" \"r,GH,F,m,d\"))]\n   \"(current_function_args_size != 0\n+    || current_function_varargs != 0\n+    || current_function_stdarg != 0\n     || rtx_equal_function_value_matters != 0)\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode))\""}]}