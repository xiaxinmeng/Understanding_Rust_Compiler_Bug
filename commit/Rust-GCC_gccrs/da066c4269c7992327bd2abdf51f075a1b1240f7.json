{"sha": "da066c4269c7992327bd2abdf51f075a1b1240f7", "node_id": "C_kwDOANBUbNoAKGRhMDY2YzQyNjljNzk5MjMyN2JkMmFiZGY1MWYwNzVhMWIxMjQwZjc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-04-12T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-04-12T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "278e56a35a19e20c0cae4a45dd2ae76584e25e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/278e56a35a19e20c0cae4a45dd2ae76584e25e34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da066c4269c7992327bd2abdf51f075a1b1240f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da066c4269c7992327bd2abdf51f075a1b1240f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da066c4269c7992327bd2abdf51f075a1b1240f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da066c4269c7992327bd2abdf51f075a1b1240f7/comments", "author": null, "committer": null, "parents": [{"sha": "d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74c4c6a1b4956b5cd9b2a770bb7261836fa1289"}], "stats": {"total": 193, "additions": 192, "deletions": 1}, "files": [{"sha": "7edfcb64c0bbcbb9d66b8a06ed50fb40b63cb0d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da066c4269c7992327bd2abdf51f075a1b1240f7", "patch": "@@ -1,3 +1,67 @@\n+2022-04-11  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/104894\n+\t* config/rs6000/rs6000.cc (rs6000_sibcall_aix): Handle pcrel sibcalls\n+\tto longcall functions.\n+\n+2022-04-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* ipa-free-lang-data.cc (free_lang_data_in_decl): Fix typos.\n+\n+2022-04-11  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/105213\n+\tPR target/103623\n+\t* config/rs6000/rs6000.md (unpack<mode>_nodm): Add m,r,i alternative.\n+\n+2022-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105218\n+\t* tree-ssa-phiopt.cc (value_replacement): If middle_bb has\n+\tmore than one predecessor or phi's bb more than 2 predecessors,\n+\treset phi result uses instead of adding a debug temp.\n+\n+2022-04-11  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/104853\n+\t* config.gcc: Pass -misa-spec to arch-canonicalize and\n+\tmultilib-generator.\n+\t* config/riscv/arch-canonicalize: Adding -misa-spec option.\n+\t(SUPPORTED_ISA_SPEC): New.\n+\t(arch_canonicalize): New argument `isa_spec`.\n+\tHandle multiple ISA spec versions.\n+\t* config/riscv/multilib-generator: Adding -misa-spec option.\n+\n+2022-04-11  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/arch-canonicalize: Add TODO item.\n+\t(IMPLIED_EXT): Sync.\n+\t(arch_canonicalize): Checking until no change.\n+\n+2022-04-11  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/105197\n+\t* tree-vect-stmts.cc (vectorizable_condition): Prevent cond swap when\n+\tnot masked.\n+\n+2022-04-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100370\n+\t* pointer-query.cc (compute_objsize_r) [POINTER_PLUS_EXPR]: Require\n+\tderef == -1.\n+\n+2022-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104639\n+\t* tree-ssa-phiopt.cc: Include tree-ssa-propagate.h.\n+\t(value_replacement): Optimize (x != cst1 ? x : cst2) != cst3\n+\tinto x != cst3.\n+\n+2022-04-11  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/bfin/bfin.md (rol_one): Fix pattern to indicate the\n+\tsign bit of the source ends up in CC.\n+\n 2022-04-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/103376"}, {"sha": "abfb32ab33cf8997f86e9f775651d7e1117bedd6", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=da066c4269c7992327bd2abdf51f075a1b1240f7", "patch": "@@ -1 +1 @@\n-20220411\n+20220412"}, {"sha": "c04ca532f384b77817321c2873a650c4377415ae", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=da066c4269c7992327bd2abdf51f075a1b1240f7", "patch": "@@ -1,3 +1,10 @@\n+2022-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105186\n+\t* c-common.cc (c_common_nodes_and_builtins): After registering __int%d\n+\tand __int%d__ builtin types, initialize corresponding ridpointers\n+\tentry.\n+\n 2022-03-30  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/101030"}, {"sha": "5eddfdcd3987341c4356f0be67189c90badaecc6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da066c4269c7992327bd2abdf51f075a1b1240f7", "patch": "@@ -1,3 +1,23 @@\n+2022-04-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98249\n+\t* call.cc (build_operator_new_call): Just look in ::.\n+\n+2022-04-11  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* constexpr.cc (cxx_eval_call_expression): Disregard dtor\n+\tresult.\n+\n+2022-04-11  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* semantics.cc (set_cleanup_locs): Propagate locus to call\n+\twrapped in cast-to-void.\n+\n+2022-04-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100370\n+\t* init.cc (warn_placement_new_too_small): Check deref.\n+\n 2022-04-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/105191"}, {"sha": "2a401d4587362300c859b8b660f8de95ecf77eee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da066c4269c7992327bd2abdf51f075a1b1240f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da066c4269c7992327bd2abdf51f075a1b1240f7", "patch": "@@ -1,3 +1,55 @@\n+2022-04-11  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR target/104894\n+\t* gcc.target/powerpc/pr104894.c: New test.\n+\t* gcc.target/powerpc/pr104894-2.c: New test.\n+\n+2022-04-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98249\n+\t* g++.dg/lookup/new3.C: New test.\n+\n+2022-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105218\n+\t* gcc.dg/pr105218.c: New test.\n+\n+2022-04-11  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR target/104253\n+\t* gcc.target/powerpc/pr104253.c: Add missing dg- before\n+\trequire-effective-target.  Prune warning about -mfloat128\n+\tpossibly not being fully supported.\n+\n+2022-04-11  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR target/105197\n+\t* gcc.target/aarch64/sve/pr105197-1.c: New test.\n+\t* gcc.target/aarch64/sve/pr105197-2.c: New test.\n+\n+2022-04-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100370\n+\t* g++.dg/warn/Wplacement-new-size-11.C: New test.\n+\n+2022-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104639\n+\t* gcc.dg/tree-ssa/pr104639-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr104639-2.c: New test.\n+\n+2022-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105186\n+\t* c-c++-common/pr105186.c: New test.\n+\n+2022-04-11  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR testsuite/103196\n+\t* gcc.target/powerpc/p9-vec-length-epil-7.c: Add option\n+\t-fdisable-tree-cunroll.\n+\t* gcc.target/powerpc/p9-vec-length-full-7.c: Likewise.\n+\n 2022-04-10  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/105184"}, {"sha": "f0299ad027bdf73d8022c71ec2bfbfd34baee03e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da066c4269c7992327bd2abdf51f075a1b1240f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da066c4269c7992327bd2abdf51f075a1b1240f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=da066c4269c7992327bd2abdf51f075a1b1240f7", "patch": "@@ -1,3 +1,51 @@\n+2022-04-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stacktrace (basic_stacktrace::_Impl::_M_allocate):\n+\tChange [[unlikely]] attribute to [[likely]].\n+\n+2022-04-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105031\n+\t* include/std/stacktrace (basic_stacktrace::basic_stacktrace):\n+\tFix allocator usage in constructors.\n+\t(basic_stacktrace::operator=(const basic_stacktrace&)): Do not\n+\ttry to reallocate using const allocator.\n+\t(basic_stacktrace::operator=(basic_stacktrace&&)): Fix\n+\tif-constexpr with non-constant condition. Do not allocate new\n+\tstorage if allocator propagates. Do not set _M_size if\n+\tallocation fails.\n+\t(basic_stacktrace::swap(basic_stacktrace&)): Fix typo. Add\n+\tassertion that non-propagating allocators are equal.\n+\t* testsuite/19_diagnostics/stacktrace/stacktrace.cc: New test.\n+\n+2022-04-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stacktrace (basic_stacktrace::current): Duplicate\n+\timplementation into each overload. Add noinline attribute and\n+\tskip current frame.\n+\t(basic_stacktrace::max_size()): Call _Impl::_S_max_size.\n+\t(basic_stacktrace::_S_curr_cb()): New function defining lambda.\n+\t(basic_stacktrace::_Impl::_S_max_size): New function defining\n+\tmaximum size in terms of allocator and size_type.\n+\t(basic_stacktrace::_Impl::_M_allocate): Check against\n+\tmax_size().\n+\t* testsuite/19_diagnostics/stacktrace/entry.cc: Call function\n+\tfor non-constexpr checks. Check line number is correct.\n+\n+2022-04-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/stacktrace/entry.cc: Moved to...\n+\t* testsuite/19_diagnostics/stacktrace/entry.cc: ...here.\n+\t* testsuite/20_util/stacktrace/synopsis.cc: Moved to...\n+\t* testsuite/19_diagnostics/stacktrace/synopsis.cc: ...here.\n+\t* testsuite/20_util/stacktrace/version.cc: Moved to...\n+\t* testsuite/19_diagnostics/stacktrace/version.cc: ...here.\n+\n+2022-04-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/bits/fs_path.h (path): Define special\n+\tmembers after path::_Cmpt is complete.\n+\n 2022-04-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/105153"}]}