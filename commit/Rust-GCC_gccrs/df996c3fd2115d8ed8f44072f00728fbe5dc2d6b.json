{"sha": "df996c3fd2115d8ed8f44072f00728fbe5dc2d6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5OTZjM2ZkMjExNWQ4ZWQ4ZjQ0MDcyZjAwNzI4ZmJlNWRjMmQ2Yg==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-12-02T15:12:44Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-12-02T15:12:44Z"}, "message": "Use atomic load/store to access static backtrace state pointer\n\nAs the static backtrace state pointer can be accessed from multiple\nthreads, use atomics to access it.\n\nRegtested on x86_64-pc-linux-gnu.\n\nlibgfortran/ChangeLog:\n\n2018-12-02  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/88137\n\t* runtime/backtrace.c (show_backtrace): Use atomic load/store to\n\taccess the static lbstate pointer.\n\nFrom-SVN: r266724", "tree": {"sha": "5b41da21c104545478a484a60a3e2e5c11ef379c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b41da21c104545478a484a60a3e2e5c11ef379c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df996c3fd2115d8ed8f44072f00728fbe5dc2d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df996c3fd2115d8ed8f44072f00728fbe5dc2d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df996c3fd2115d8ed8f44072f00728fbe5dc2d6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df996c3fd2115d8ed8f44072f00728fbe5dc2d6b/comments", "author": null, "committer": null, "parents": [{"sha": "4a82df9a389506e2a34aa22d9a751c2be834e238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a82df9a389506e2a34aa22d9a751c2be834e238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a82df9a389506e2a34aa22d9a751c2be834e238"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "42dbc8034430067ee4f63bd8719924845cbf7978", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df996c3fd2115d8ed8f44072f00728fbe5dc2d6b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df996c3fd2115d8ed8f44072f00728fbe5dc2d6b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=df996c3fd2115d8ed8f44072f00728fbe5dc2d6b", "patch": "@@ -1,3 +1,9 @@\n+2018-12-02  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/88137\n+\t* runtime/backtrace.c (show_backtrace): Use atomic load/store to\n+\taccess the static lbstate pointer.\n+\n 2018-11-30  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/88137"}, {"sha": "93ea14af19d985aa0cb1e8c6a19bc05726ebc517", "filename": "libgfortran/runtime/backtrace.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df996c3fd2115d8ed8f44072f00728fbe5dc2d6b/libgfortran%2Fruntime%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df996c3fd2115d8ed8f44072f00728fbe5dc2d6b/libgfortran%2Fruntime%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbacktrace.c?ref=df996c3fd2115d8ed8f44072f00728fbe5dc2d6b", "patch": "@@ -149,15 +149,20 @@ show_backtrace (bool in_signal_handler)\n   /* Note that libbacktrace allows the state to be accessed from\n      multiple threads, so we don't need to use a TLS variable for the\n      state here.  */\n-  static struct backtrace_state *lbstate;\n+  static struct backtrace_state *lbstate_saved;\n+  struct backtrace_state *lbstate;\n   struct mystate state = { 0, false, in_signal_handler };\n \n+  lbstate = __atomic_load_n (&lbstate_saved, __ATOMIC_RELAXED);\n   if (!lbstate)\n-    lbstate = backtrace_create_state (NULL, __gthread_active_p (),\n-\t\t\t\t      error_callback, NULL);\n-\n-  if (lbstate == NULL)\n-    return;\n+    {\n+      lbstate = backtrace_create_state (NULL, __gthread_active_p (),\n+\t\t\t\t\terror_callback, NULL);\n+      if (lbstate)\n+\t__atomic_store_n (&lbstate_saved, lbstate, __ATOMIC_RELAXED);\n+      else\n+\treturn;\n+    }\n \n   if (!BACKTRACE_SUPPORTED || (in_signal_handler && BACKTRACE_USES_MALLOC))\n     {"}]}