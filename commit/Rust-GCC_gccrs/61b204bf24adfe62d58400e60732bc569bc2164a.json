{"sha": "61b204bf24adfe62d58400e60732bc569bc2164a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFiMjA0YmYyNGFkZmU2MmQ1ODQwMGU2MDczMmJjNTY5YmMyMTY0YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-09-16T23:04:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-09-16T23:04:10Z"}, "message": "decl.c (grokdeclarator): Use declspecs->locations and declarator->id_loc in a few error messages.\n\n/cp\n2019-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokdeclarator): Use declspecs->locations and\n\tdeclarator->id_loc in a few error messages.\n\t* pt.c (finish_member_template_decl): Use DECL_SOURCE_LOCATION.\n\t(push_template_decl_real): Likewise.\n\n/testsuite\n2019-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/ext/int128-6.C: New.\n\t* c-c++-common/pr68107.c: Test location(s).\n\t* g++.dg/other/large-size-array.C: Likewise.\n\t* g++.dg/template/dtor2.C: Likewise.\n\t* g++.dg/template/error9.C: Likewise.\n\t* g++.dg/tls/diag-2.C: Likewise.\n\t* g++.dg/tls/diag-4.C: Likewise.\n\t* g++.dg/tls/diag-5.C: Likewise.\n\t* g++.old-deja/g++.pt/memtemp71.C: Likewise.\n\nFrom-SVN: r275759", "tree": {"sha": "ea1077703877a85ebba600225a35d7f3769dfcd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea1077703877a85ebba600225a35d7f3769dfcd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61b204bf24adfe62d58400e60732bc569bc2164a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b204bf24adfe62d58400e60732bc569bc2164a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b204bf24adfe62d58400e60732bc569bc2164a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b204bf24adfe62d58400e60732bc569bc2164a/comments", "author": null, "committer": null, "parents": [{"sha": "b3a77aa6ffa0186a966ad53360aa1485c783800a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a77aa6ffa0186a966ad53360aa1485c783800a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a77aa6ffa0186a966ad53360aa1485c783800a"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "efa1686b2a0acde8b43096652988424bfdcb3021", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -1,3 +1,10 @@\n+2019-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokdeclarator): Use declspecs->locations and\n+\tdeclarator->id_loc in a few error messages.\n+\t* pt.c (finish_member_template_decl): Use DECL_SOURCE_LOCATION.\n+\t(push_template_decl_real): Likewise.\n+\n 2019-09-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/30277 - int-width bit-field promotion."}, {"sha": "b753796609a33cd8958655d757ef7a1688f1b87c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -10948,14 +10948,15 @@ grokdeclarator (const cp_declarator *declarator,\n     {\n       if (! int_n_enabled_p[declspecs->int_n_idx])\n \t{\n-\t  error (\"%<__int%d%> is not supported by this target\",\n-\t\t int_n_data[declspecs->int_n_idx].bitsize);\n+\t  error_at (declspecs->locations[ds_type_spec],\n+\t\t    \"%<__int%d%> is not supported by this target\",\n+\t\t    int_n_data[declspecs->int_n_idx].bitsize);\n \t  explicit_intN = false;\n \t}\n       /* Don't pedwarn if the alternate \"__intN__\" form has been used instead\n \t of \"__intN\".  */\n       else if (!int_n_alt && pedantic && ! in_system_header_at (input_location))\n-\tpedwarn (input_location, OPT_Wpedantic,\n+\tpedwarn (declspecs->locations[ds_type_spec], OPT_Wpedantic,\n \t\t \"ISO C++ does not support %<__int%d%> for %qs\",\n \t\t int_n_data[declspecs->int_n_idx].bitsize, name);\n     }\n@@ -11330,7 +11331,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t   && storage_class != sc_static)\n \t  || typedef_p))\n     {\n-      error (\"multiple storage classes in declaration of %qs\", name);\n+      location_t loc\n+\t= min_location (declspecs->locations[ds_thread],\n+\t\t\tdeclspecs->locations[ds_storage_class]);\n+      error_at (loc, \"multiple storage classes in declaration of %qs\", name);\n       thread_p = false;\n     }\n   if (decl_context != NORMAL\n@@ -11489,7 +11493,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t  type = create_array_type_for_decl (dname, type,\n \t\t\t\t\t     declarator->u.array.bounds,\n \t\t\t\t\t     declarator->id_loc);\n-\t  if (!valid_array_size_p (input_location, type, dname))\n+\t  if (!valid_array_size_p (dname\n+\t\t\t\t   ? declarator->id_loc : input_location,\n+\t\t\t\t   type, dname))\n \t    type = error_mark_node;\n \n \t  if (declarator->std_attributes)"}, {"sha": "4b3993cdedafd9eedbb3c6d3dc1eb207230d7fa9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -298,7 +298,8 @@ finish_member_template_decl (tree decl)\n       return NULL_TREE;\n     }\n   else if (TREE_CODE (decl) == FIELD_DECL)\n-    error (\"data member %qD cannot be a member template\", decl);\n+    error_at (DECL_SOURCE_LOCATION (decl),\n+\t      \"data member %qD cannot be a member template\", decl);\n   else if (DECL_TEMPLATE_INFO (decl))\n     {\n       if (!DECL_TEMPLATE_SPECIALIZATION (decl))\n@@ -310,7 +311,8 @@ finish_member_template_decl (tree decl)\n \treturn decl;\n     }\n   else\n-    error (\"invalid member template declaration %qD\", decl);\n+    error_at (DECL_SOURCE_LOCATION (decl),\n+\t      \"invalid member template declaration %qD\", decl);\n \n   return error_mark_node;\n }\n@@ -5515,7 +5517,8 @@ push_template_decl_real (tree decl, bool is_friend)\n \t      /* [temp.mem]\n \n \t\t A destructor shall not be a member template.  */\n-\t      error (\"destructor %qD declared as member template\", decl);\n+\t      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t\"destructor %qD declared as member template\", decl);\n \t      return error_mark_node;\n \t    }\n \t  if (IDENTIFIER_NEWDEL_OP_P (DECL_NAME (decl))"}, {"sha": "f705dc463512098465fd06b90230a7435b10e917", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -1,3 +1,15 @@\n+2019-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/ext/int128-6.C: New.\n+\t* c-c++-common/pr68107.c: Test location(s).\n+\t* g++.dg/other/large-size-array.C: Likewise.\n+\t* g++.dg/template/dtor2.C: Likewise.\n+\t* g++.dg/template/error9.C: Likewise.\n+\t* g++.dg/tls/diag-2.C: Likewise.\n+\t* g++.dg/tls/diag-4.C: Likewise.\n+\t* g++.dg/tls/diag-5.C: Likewise.\n+\t* g++.old-deja/g++.pt/memtemp71.C: Likewise.\n+\n 2019-09-16  Li Jia He  <helijia@linux.ibm.com>\n \t    Qi Feng  <ffengqi@linux.ibm.com>\n "}, {"sha": "b9f9afec92a615c2404e670db40fc8130686a2ae", "filename": "gcc/testsuite/c-c++-common/pr68107.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -3,34 +3,34 @@\n \n #define N ((__SIZE_MAX__ / sizeof (int)) / 2 + 1)\n \n-typedef int (*T1)[N]; /* { dg-error \"exceeds maximum object size\" } */\n+typedef int (*T1)[N]; /* { dg-error \"15:exceeds maximum object size\" } */\n typedef int (*T2)[N - 1];\n-typedef int (*T3)[N][N]; /* { dg-error \"exceeds maximum object size\" } */\n-typedef int (*T4)[N - 1][N - 1]; /* { dg-error \"exceeds maximum object size\" } */\n-typedef int (**T5)[N]; /* { dg-error \"exceeds maximum object size\" } */\n+typedef int (*T3)[N][N]; /* { dg-error \"15:exceeds maximum object size\" } */\n+typedef int (*T4)[N - 1][N - 1]; /* { dg-error \"15:exceeds maximum object size\" } */\n+typedef int (**T5)[N]; /* { dg-error \"16:exceeds maximum object size\" } */\n \n struct S {\n-  int (*q1)[N]; /* { dg-error \"exceeds maximum object size\" } */\n+  int (*q1)[N]; /* { dg-error \"9:exceeds maximum object size\" } */\n   int (*q2)[N - 1];\n-  int (*q3)[N][N]; /* { dg-error \"exceeds maximum object size\" } */\n-  int (*q4)[N - 1][N - 1]; /* { dg-error \"exceeds maximum object size\" } */\n-  int (**q5)[N]; /* { dg-error \"exceeds maximum object size\" } */\n+  int (*q3)[N][N]; /* { dg-error \"9:exceeds maximum object size\" } */\n+  int (*q4)[N - 1][N - 1]; /* { dg-error \"9:exceeds maximum object size\" } */\n+  int (**q5)[N]; /* { dg-error \"10:exceeds maximum object size\" } */\n };\n \n-void fn1 (int (*p1)[N]); /* { dg-error \"exceeds maximum object size\" } */\n+void fn1 (int (*p1)[N]); /* { dg-error \"17:exceeds maximum object size\" } */\n void fn2 (int (*p1)[N - 1]);\n-void fn3 (int (*p3)[N][N]); /* { dg-error \"exceeds maximum object size\" } */\n-void fn4 (int (*p4)[N - 1][N - 1]); /* { dg-error \"exceeds maximum object size\" } */\n-void fn5 (int (**p5)[N]); /* { dg-error \"exceeds maximum object size\" } */\n+void fn3 (int (*p3)[N][N]); /* { dg-error \"17:exceeds maximum object size\" } */\n+void fn4 (int (*p4)[N - 1][N - 1]); /* { dg-error \"17:exceeds maximum object size\" } */\n+void fn5 (int (**p5)[N]); /* { dg-error \"18:exceeds maximum object size\" } */\n \n void\n fn (void)\n {\n-  int (*n1)[N]; /* { dg-error \"exceeds maximum object size\" } */\n+  int (*n1)[N]; /* { dg-error \"9:exceeds maximum object size\" } */\n   int (*n2)[N - 1];\n-  int (*n3)[N][N]; /* { dg-error \"exceeds maximum object size\" } */\n-  int (*n4)[N - 1][N - 1]; /* { dg-error \"exceeds maximum object size\" } */\n-  int (**n5)[N]; /* { dg-error \"exceeds maximum object size\" } */\n+  int (*n3)[N][N]; /* { dg-error \"9:exceeds maximum object size\" } */\n+  int (*n4)[N - 1][N - 1]; /* { dg-error \"9:exceeds maximum object size\" } */\n+  int (**n5)[N]; /* { dg-error \"10:exceeds maximum object size\" } */\n \n   sizeof (int (*)[N]); /* { dg-error \"exceeds maximum object size\" } */\n   sizeof (int [N]); /* { dg-error \"exceeds maximum object size\" } */"}, {"sha": "a475b01ddc6b132fd0865f42cac3a9d07b28d231", "filename": "gcc/testsuite/g++.dg/ext/int128-6.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fint128-6.C?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do compile { target int128 } }\n+\n+__int128 i __attribute__((unused));  // { dg-error \"1:ISO C\\\\+\\\\+ does not support\" }\n+\n+unsigned __int128 ui __attribute__((unused));  // { dg-error \"10:ISO C\\\\+\\\\+ does not support\" }"}, {"sha": "15a33f902f475ca218e27e01adbde017917fa040", "filename": "gcc/testsuite/g++.dg/other/large-size-array.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -20,7 +20,7 @@ sub (int *a)\n int\n main (void)\n {\n-  int a[DIM][DIM];  /* { dg-error \"exceeds maximum object size\" } */\n+  int a[DIM][DIM];  /* { dg-error \"7:exceeds maximum object size\" } */\n   return sub (&a[0][0]);  /* { dg-error \"declared\" } */\n }\n "}, {"sha": "d8b6b4f5cb1ab9e431039b30e0282224c1b65c03", "filename": "gcc/testsuite/g++.dg/template/dtor2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdtor2.C?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -1,7 +1,7 @@\n struct Foo\n {\n     template <int i>\n-    ~Foo() {} // { dg-error \"\" }\n+    ~Foo() {} // { dg-error \"5:destructor .Foo::~Foo\\\\\\(\\\\\\).\" }\n };\n \n int main()"}, {"sha": "65e3d91aef42135762b62fb7d37bbd00765d2716", "filename": "gcc/testsuite/g++.dg/template/error9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror9.C?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -3,5 +3,5 @@\n struct Foo\n {\n     template <int i>\n-    ~Foo(); // { dg-error \"\" }\n+    ~Foo(); // { dg-error \"5:destructor .Foo::~Foo\\\\\\(\\\\\\).\" }\n };"}, {"sha": "3e8f422b41d13f420538b0169179b70a191f0d3f", "filename": "gcc/testsuite/g++.dg/tls/diag-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -4,14 +4,14 @@\n __thread extern int g1;\t\t/* { dg-error \"'__thread' before 'extern'\" } */\n __thread static int g2;\t\t/* { dg-error \"'__thread' before 'static'\" } */\n __thread __thread int g3;\t/* { dg-error \"duplicate '__thread'\" } */\n-typedef __thread int g4;\t/* { dg-error \"multiple storage classes\" } */\n+typedef __thread int g4;\t/* { dg-error \"9:multiple storage classes\" } */\n \n void foo()\n {\n   __thread int l1;\t\t/* { dg-error \"3:function-scope .l1. implicitly auto and declared '__thread'\" } */\n-  auto __thread int l2;\t\t/* { dg-error \"multiple storage classes|data types\" } */\n+  auto __thread int l2;\t\t/* { dg-error \"3:multiple storage classes|data types\" } */\n   __thread extern int l3;\t/* { dg-error \"'__thread' before 'extern'\" } */\n-  register __thread int l4;\t/* { dg-error \"multiple storage classes\" } */\n+  register __thread int l4;\t/* { dg-error \"3:multiple storage classes\" } */\n }\t\t\t\t/* { dg-error \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } .-1 } */\n \n __thread void f1 ();\t\t/* { dg-error \"1:storage class .__thread. invalid for function\" } */"}, {"sha": "24e28c9575c77d3e4a99fa21168b627788732a99", "filename": "gcc/testsuite/g++.dg/tls/diag-4.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-4.C?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -1,10 +1,10 @@\n /* Invalid __thread specifiers.  */\n /* { dg-require-effective-target tls } */\n \n-__thread typedef int g4;\t/* { dg-error \"multiple storage classes\" } */\n+__thread typedef int g4;\t/* { dg-error \"1:multiple storage classes\" } */\n \n void foo()\n {\n-  __thread auto int l2;\t\t/* { dg-error \"multiple storage classes|data types\" } */\n-  __thread register int l4;\t/* { dg-error \"multiple storage classes\" } */\n+  __thread auto int l2;\t\t/* { dg-error \"3:multiple storage classes|data types\" } */\n+  __thread register int l4;\t/* { dg-error \"3:multiple storage classes\" } */\n }\t\t\t\t/* { dg-error \"ISO C\\\\+\\\\+17 does not allow 'register' storage class specifier\" \"\" { target c++17 } .-1 } */"}, {"sha": "f94e68c6d7e60280d03a6b276c1a6eda619ea2d4", "filename": "gcc/testsuite/g++.dg/tls/diag-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-5.C?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -2,4 +2,4 @@\n // Invalid __thread specifiers.\n // { dg-require-effective-target tls }\n \n-struct A { __thread register int i; }; // { dg-error \"multiple storage classes|storage class specified\" }\n+struct A { __thread register int i; }; // { dg-error \"12:multiple storage classes|storage class specified\" }"}, {"sha": "91cfac0032c1e5adb86fd7c8803adb7babd174db", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp71.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp71.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b204bf24adfe62d58400e60732bc569bc2164a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp71.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp71.C?ref=61b204bf24adfe62d58400e60732bc569bc2164a", "patch": "@@ -2,5 +2,5 @@\n \n class A\n {\n-  template<class T>T epsilon; // { dg-error \"\" } invalid member template\n+  template<class T>T epsilon; // { dg-error \"22:data member .epsilon. cannot be a member template\" }\n };"}]}