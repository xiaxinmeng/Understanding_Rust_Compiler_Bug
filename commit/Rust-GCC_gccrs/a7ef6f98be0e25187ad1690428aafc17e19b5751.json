{"sha": "a7ef6f98be0e25187ad1690428aafc17e19b5751", "node_id": "C_kwDOANBUbNoAKGE3ZWY2Zjk4YmUwZTI1MTg3YWQxNjkwNDI4YWFmYzE3ZTE5YjU3NTE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-16T15:57:17Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-17T14:56:18Z"}, "message": "macros: Allow macro calls in trait implementations\n\nJust like inherent implementation blocks, trait implementation blocks\n(`impl Trait for Type`) can also contain macro invocations.", "tree": {"sha": "7fb389c42bf54536a486bd5713ef64f9623a2d82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fb389c42bf54536a486bd5713ef64f9623a2d82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7ef6f98be0e25187ad1690428aafc17e19b5751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ef6f98be0e25187ad1690428aafc17e19b5751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ef6f98be0e25187ad1690428aafc17e19b5751", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ef6f98be0e25187ad1690428aafc17e19b5751/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "935b561e7fb6471773e2a7e860011b76702cd563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935b561e7fb6471773e2a7e860011b76702cd563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935b561e7fb6471773e2a7e860011b76702cd563"}], "stats": {"total": 79, "additions": 75, "deletions": 4}, "files": [{"sha": "a22c2d1ad1d88bdc32f674f2919cbfaf7ed08fc6", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=a7ef6f98be0e25187ad1690428aafc17e19b5751", "patch": "@@ -1514,6 +1514,7 @@ class SingleASTNode\n     EXTERN,\n     TRAIT,\n     IMPL,\n+    TRAIT_IMPL,\n   };\n \n private:\n@@ -1526,6 +1527,7 @@ class SingleASTNode\n   std::unique_ptr<ExternalItem> external_item;\n   std::unique_ptr<TraitItem> trait_item;\n   std::unique_ptr<InherentImplItem> impl_item;\n+  std::unique_ptr<TraitImplItem> trait_impl_item;\n \n public:\n   SingleASTNode (std::unique_ptr<Expr> expr)\n@@ -1552,6 +1554,10 @@ class SingleASTNode\n     : kind (IMPL), impl_item (std::move (item))\n   {}\n \n+  SingleASTNode (std::unique_ptr<TraitImplItem> trait_impl_item)\n+    : kind (TRAIT_IMPL), trait_impl_item (std::move (trait_impl_item))\n+  {}\n+\n   SingleASTNode (SingleASTNode const &other)\n   {\n     kind = other.kind;\n@@ -1580,6 +1586,10 @@ class SingleASTNode\n       case IMPL:\n \timpl_item = other.impl_item->clone_inherent_impl_item ();\n \tbreak;\n+\n+      case TRAIT_IMPL:\n+\ttrait_impl_item = other.trait_impl_item->clone_trait_impl_item ();\n+\tbreak;\n       }\n   }\n \n@@ -1611,6 +1621,10 @@ class SingleASTNode\n       case IMPL:\n \timpl_item = other.impl_item->clone_inherent_impl_item ();\n \tbreak;\n+\n+      case TRAIT_IMPL:\n+\ttrait_impl_item = other.trait_impl_item->clone_trait_impl_item ();\n+\tbreak;\n       }\n     return *this;\n   }\n@@ -1679,6 +1693,12 @@ class SingleASTNode\n     return std::move (impl_item);\n   }\n \n+  std::unique_ptr<TraitImplItem> take_trait_impl_item ()\n+  {\n+    rust_assert (!is_error ());\n+    return std::move (trait_impl_item);\n+  }\n+\n   void accept_vis (ASTVisitor &vis)\n   {\n     switch (kind)\n@@ -1706,6 +1726,10 @@ class SingleASTNode\n       case IMPL:\n \timpl_item->accept_vis (vis);\n \tbreak;\n+\n+      case TRAIT_IMPL:\n+\ttrait_impl_item->accept_vis (vis);\n+\tbreak;\n       }\n   }\n \n@@ -1725,6 +1749,8 @@ class SingleASTNode\n \treturn trait_item == nullptr;\n       case IMPL:\n \treturn impl_item == nullptr;\n+      case TRAIT_IMPL:\n+\treturn trait_impl_item == nullptr;\n       }\n \n     gcc_unreachable ();\n@@ -1747,6 +1773,8 @@ class SingleASTNode\n \treturn \"Trait Item: \" + trait_item->as_string ();\n       case IMPL:\n \treturn \"Impl Item: \" + impl_item->as_string ();\n+      case TRAIT_IMPL:\n+\treturn \"Trait Impl Item: \" + impl_item->as_string ();\n       }\n \n     gcc_unreachable ();"}, {"sha": "3de660897ca71f1cefaec5d349054280724e7d1f", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=a7ef6f98be0e25187ad1690428aafc17e19b5751", "patch": "@@ -2549,8 +2549,12 @@ AttrVisitor::visit (AST::TraitImpl &impl)\n   if (impl.has_where_clause ())\n     expand_where_clause (impl.get_where_clause ());\n \n-  // strip trait impl items if required\n-  expand_pointer_allow_strip (impl.get_impl_items ());\n+  std::function<std::unique_ptr<AST::TraitImplItem> (AST::SingleASTNode)>\n+    extractor\n+    = [] (AST::SingleASTNode node) { return node.take_trait_impl_item (); };\n+\n+  expand_macro_children (MacroExpander::TRAIT_IMPL, impl.get_impl_items (),\n+\t\t\t extractor);\n }\n void\n AttrVisitor::visit (AST::ExternalStaticItem &item)"}, {"sha": "3bdb8c685e666fafcf3fc32a1abbaa58fb8c0997", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=a7ef6f98be0e25187ad1690428aafc17e19b5751", "patch": "@@ -859,6 +859,22 @@ transcribe_many_impl_items (Parser<MacroInvocLexer> &parser, TokenId &delimiter)\n   });\n }\n \n+/**\n+ * Transcribe 0 or more trait impl items from a macro invocation\n+ *\n+ * @param parser Parser to extract items from\n+ * @param delimiter Id of the token on which parsing should stop\n+ */\n+static std::vector<AST::SingleASTNode>\n+transcribe_many_trait_impl_items (Parser<MacroInvocLexer> &parser,\n+\t\t\t\t  TokenId &delimiter)\n+{\n+  return parse_many (parser, delimiter, [&parser] () {\n+    auto item = parser.parse_trait_impl_item ();\n+    return AST::SingleASTNode (std::move (item));\n+  });\n+}\n+\n /**\n  * Transcribe 0 or more statements from a macro invocation\n  *\n@@ -932,6 +948,9 @@ transcribe_context (MacroExpander::ContextType ctx,\n     case MacroExpander::ContextType::IMPL:\n       return transcribe_many_impl_items (parser, last_token_id);\n       break;\n+    case MacroExpander::ContextType::TRAIT_IMPL:\n+      return transcribe_many_trait_impl_items (parser, last_token_id);\n+      break;\n     case MacroExpander::ContextType::EXTERN:\n       return transcribe_many_ext (parser, last_token_id);\n       break;"}, {"sha": "f08525fd4e8a3540ddb6b3dac582a079f277d530", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=a7ef6f98be0e25187ad1690428aafc17e19b5751", "patch": "@@ -187,9 +187,10 @@ struct MacroExpander\n   {\n     ITEM,\n     BLOCK,\n+    EXTERN,\n     TRAIT,\n     IMPL,\n-    EXTERN,\n+    TRAIT_IMPL,\n   };\n \n   ExpansionCfg cfg;"}, {"sha": "588061629e9265e1be29cbe04cd3181793b2cfd5", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=a7ef6f98be0e25187ad1690428aafc17e19b5751", "patch": "@@ -138,6 +138,7 @@ template <typename ManagedTokenSource> class Parser\n   std::unique_ptr<AST::ExternalItem> parse_external_item ();\n   std::unique_ptr<AST::TraitItem> parse_trait_item ();\n   std::unique_ptr<AST::InherentImplItem> parse_inherent_impl_item ();\n+  std::unique_ptr<AST::TraitImplItem> parse_trait_impl_item ();\n   AST::PathInExpression parse_path_in_expression ();\n   std::vector<std::unique_ptr<AST::LifetimeParam> > parse_lifetime_params ();\n   AST::Visibility parse_visibility ();\n@@ -298,7 +299,6 @@ template <typename ManagedTokenSource> class Parser\n   std::unique_ptr<AST::InherentImplItem>\n   parse_inherent_impl_function_or_method (AST::Visibility vis,\n \t\t\t\t\t  AST::AttrVec outer_attrs);\n-  std::unique_ptr<AST::TraitImplItem> parse_trait_impl_item ();\n   std::unique_ptr<AST::TraitImplItem>\n   parse_trait_impl_function_or_method (AST::Visibility vis,\n \t\t\t\t       AST::AttrVec outer_attrs);"}, {"sha": "846352d048742a802b71ba47613dafdf04022d57", "filename": "gcc/testsuite/rust/execute/torture/macros23.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros23.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7ef6f98be0e25187ad1690428aafc17e19b5751/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros23.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros23.rs?ref=a7ef6f98be0e25187ad1690428aafc17e19b5751", "patch": "@@ -0,0 +1,19 @@\n+trait Valuable {\n+    const VALUE: i32;\n+}\n+\n+struct Something;\n+\n+macro_rules! implement {\n+    () => {\n+        const VALUE: i32 = 18;\n+    };\n+}\n+\n+impl Valuable for Something {\n+    implement!();\n+}\n+\n+fn main() -> i32 {\n+    Something::VALUE - 18\n+}"}]}