{"sha": "12c574caf6f0766266813fef7be8a2367a9d0700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJjNTc0Y2FmNmYwNzY2MjY2ODEzZmVmN2JlOGEyMzY3YTlkMDcwMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-12-05T15:46:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-12-05T15:46:30Z"}, "message": "re PR c++/51404 ([c++0x] [4.7 Regression] ICE with invalid use of auto)\n\n/cp\n2011-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51404\n\t* typeck2.c (build_functional_cast): Early return error_mark_node\n\tfor invalid uses of 'auto'.\n\t* parser.c (cp_parser_direct_declarator): When\n\tcp_parser_constant_expression returns error do not produce further\n\tdiagnostic for the bound.\n\n/testsuite\n2011-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51404\n\t* g++.dg/cpp0x/auto28.C: New.\n\nFrom-SVN: r182011", "tree": {"sha": "292616bb2c39f1b2c5daf646dd779ba4a6719c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/292616bb2c39f1b2c5daf646dd779ba4a6719c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12c574caf6f0766266813fef7be8a2367a9d0700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c574caf6f0766266813fef7be8a2367a9d0700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c574caf6f0766266813fef7be8a2367a9d0700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c574caf6f0766266813fef7be8a2367a9d0700/comments", "author": null, "committer": null, "parents": [{"sha": "546d314cf6a6bc23a151fa63143b23907c20bc0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/546d314cf6a6bc23a151fa63143b23907c20bc0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/546d314cf6a6bc23a151fa63143b23907c20bc0d"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "fcd44f072deb93882027c267d10f957a7174dece", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=12c574caf6f0766266813fef7be8a2367a9d0700", "patch": "@@ -1,3 +1,12 @@\n+2011-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51404\n+\t* typeck2.c (build_functional_cast): Early return error_mark_node\n+\tfor invalid uses of 'auto'.\n+\t* parser.c (cp_parser_direct_declarator): When\n+\tcp_parser_constant_expression returns error do not produce further\n+\tdiagnostic for the bound.\n+\n 2011-12-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51313"}, {"sha": "69f1eabb940eeecd5bc390bb57439179083cdda0", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=12c574caf6f0766266813fef7be8a2367a9d0700", "patch": "@@ -16055,18 +16055,20 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t\t\t\t &non_constant_p);\n \t      if (!non_constant_p)\n \t\t/* OK */;\n-\t      /* Normally, the array bound must be an integral constant\n-\t\t expression.  However, as an extension, we allow VLAs\n-\t\t in function scopes as long as they aren't part of a\n-\t\t parameter declaration.  */\n+\t      else if (error_operand_p (bounds))\n+\t\t/* Already gave an error.  */;\n \t      else if (!parser->in_function_body\n \t\t       || current_binding_level->kind == sk_function_parms)\n \t\t{\n+\t\t  /* Normally, the array bound must be an integral constant\n+\t\t     expression.  However, as an extension, we allow VLAs\n+\t\t     in function scopes as long as they aren't part of a\n+\t\t     parameter declaration.  */\n \t\t  cp_parser_error (parser,\n \t\t\t\t   \"array bound is not an integer constant\");\n \t\t  bounds = error_mark_node;\n \t\t}\n-\t      else if (processing_template_decl && !error_operand_p (bounds))\n+\t      else if (processing_template_decl)\n \t\t{\n \t\t  /* Remember this wasn't a constant-expression.  */\n \t\t  bounds = build_nop (TREE_TYPE (bounds), bounds);"}, {"sha": "2db3248d02824b4d28251f9882a62e2a55caa9a5", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=12c574caf6f0766266813fef7be8a2367a9d0700", "patch": "@@ -1653,7 +1653,7 @@ build_functional_cast (tree exp, tree parms, tsubst_flags_t complain)\n     {\n       if (complain & tf_error)\n \terror (\"invalid use of %<auto%>\");\n-      type = error_mark_node;\n+      return error_mark_node;\n     }\n \n   if (processing_template_decl)"}, {"sha": "31aa738768d293cc8f2169afc673fddbcdc90f27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=12c574caf6f0766266813fef7be8a2367a9d0700", "patch": "@@ -1,3 +1,8 @@\n+2011-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51404\n+\t* g++.dg/cpp0x/auto28.C: New.\n+\n 2011-12-05  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \n \t* gcc.dg/torture/vec-cvt-1.c (FLTTEST): Call rand instead of random."}, {"sha": "8d250166a8c34625473a78e0b8a1c4debc24e5fc", "filename": "gcc/testsuite/g++.dg/cpp0x/auto28.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12c574caf6f0766266813fef7be8a2367a9d0700/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto28.C?ref=12c574caf6f0766266813fef7be8a2367a9d0700", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/51404\n+// { dg-options -std=c++0x }\n+\n+int i = auto().x;  // { dg-error \"invalid use of\" }"}]}