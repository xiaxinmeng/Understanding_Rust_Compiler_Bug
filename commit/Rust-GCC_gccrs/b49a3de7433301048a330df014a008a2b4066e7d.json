{"sha": "b49a3de7433301048a330df014a008a2b4066e7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ5YTNkZTc0MzMzMDEwNDhhMzMwZGYwMTRhMDA4YTJiNDA2NmU3ZA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-06-12T15:21:12Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-06-12T15:21:12Z"}, "message": "trans-expr.c (gfc_conv_variable): POINTER results don't need f2c calling conventions.\n\nfortran/\n\t* trans-expr.c (gfc_conv_variable): POINTER results don't need f2c\n\tcalling conventions.  Look at sym instead of sym->result.\n\t* trans-types.c (gfc_sym_type): Remove workaround for frontend bug.\n\tRemove condition which is always false with workaround removed.\n\t(gfc_return_by_reference): Always look at sym, never at sym->result.\ntestsuite/\n\t* gfortran.dg/f2c_7.f90: New test.\n\nFrom-SVN: r100857", "tree": {"sha": "bc5470fb3f7a556ac4c9073c27d737c7be8be269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc5470fb3f7a556ac4c9073c27d737c7be8be269"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b49a3de7433301048a330df014a008a2b4066e7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49a3de7433301048a330df014a008a2b4066e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49a3de7433301048a330df014a008a2b4066e7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49a3de7433301048a330df014a008a2b4066e7d/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607fb860424ca6579ade785b50e7052ad50c0cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607fb860424ca6579ade785b50e7052ad50c0cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607fb860424ca6579ade785b50e7052ad50c0cd5"}], "stats": {"total": 91, "additions": 74, "deletions": 17}, "files": [{"sha": "a63f475606951304580847862ae42e8d7ecf0ff4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b49a3de7433301048a330df014a008a2b4066e7d", "patch": "@@ -1,3 +1,11 @@\n+2005-06-11  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* trans-expr.c (gfc_conv_variable): POINTER results don't need f2c\n+\tcalling conventions.  Look at sym instead of sym->result.\n+\t* trans-types.c (gfc_sym_type): Remove workaround for frontend bug.\n+\tRemove condition which is always false with workaround removed.\n+\t(gfc_return_by_reference): Always look at sym, never at sym->result.\n+\n 2005-06-11  Steven G. Kargl  <kargls@comcast.net>\n         \n \tPR fortran/17792"}, {"sha": "ee6de7ee46a7227985cb990bb61127696d8acb00", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b49a3de7433301048a330df014a008a2b4066e7d", "patch": "@@ -379,7 +379,7 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n           /* Dereference scalar hidden result.  */\n \t  if (gfc_option.flag_f2c && sym->ts.type == BT_COMPLEX\n \t      && (sym->attr.function || sym->attr.result)\n-\t      && !sym->attr.dimension)\n+\t      && !sym->attr.dimension && !sym->attr.pointer)\n \t    se->expr = gfc_build_indirect_ref (se->expr);\n \n           /* Dereference non-character pointer variables. \n@@ -1315,9 +1315,6 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n   se->expr = build3 (CALL_EXPR, TREE_TYPE (fntype), se->expr,\n \t\t     arglist, NULL_TREE);\n \n-  if (sym->result)\n-    sym = sym->result;\n-\n   /* If we have a pointer function, but we don't want a pointer, e.g.\n      something like\n         x = f()"}, {"sha": "c550eec0584f3b120f04c48693aadbf1851704d1", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=b49a3de7433301048a330df014a008a2b4066e7d", "patch": "@@ -1268,11 +1268,6 @@ gfc_sym_type (gfc_symbol * sym)\n \treturn TREE_TYPE (sym->backend_decl);\n     }\n \n-  /* The frontend doesn't set all the attributes for a function with an\n-     explicit result value, so we use that instead when present.  */\n-  if (sym->attr.function && sym->result)\n-    sym = sym->result;\n-\n   type = gfc_typenode_for_spec (&sym->ts);\n   if (gfc_option.flag_f2c\n       && sym->attr.function\n@@ -1299,7 +1294,7 @@ gfc_sym_type (gfc_symbol * sym)\n \t  /* If this is a character argument of unknown length, just use the\n \t     base type.  */\n \t  if (sym->ts.type != BT_CHARACTER\n-\t      || !(sym->attr.dummy || sym->attr.function || sym->attr.result)\n+\t      || !(sym->attr.dummy || sym->attr.function)\n \t      || sym->ts.cl->backend_decl)\n \t    {\n \t      type = gfc_get_nodesc_array_type (type, sym->as,\n@@ -1467,17 +1462,13 @@ gfc_get_derived_type (gfc_symbol * derived)\n int\n gfc_return_by_reference (gfc_symbol * sym)\n {\n-  gfc_symbol *result;\n-\n   if (!sym->attr.function)\n     return 0;\n \n-  result = sym->result ? sym->result : sym;\n-\n-  if (result->attr.dimension)\n+  if (sym->attr.dimension)\n     return 1;\n \n-  if (result->ts.type == BT_CHARACTER)\n+  if (sym->ts.type == BT_CHARACTER)\n     return 1;\n \n   /* Possibly return complex numbers by reference for g77 compatibility.\n@@ -1486,7 +1477,7 @@ gfc_return_by_reference (gfc_symbol * sym)\n      require an explicit interface, as no compatibility problems can\n      arise there.  */\n   if (gfc_option.flag_f2c\n-      && result->ts.type == BT_COMPLEX\n+      && sym->ts.type == BT_COMPLEX\n       && !sym->attr.intrinsic && !sym->attr.always_explicit)\n     return 1;\n   "}, {"sha": "929900e1188aacb49baddee3dc7b849901762c39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b49a3de7433301048a330df014a008a2b4066e7d", "patch": "@@ -1,3 +1,7 @@\n+2005-06-12  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.dg/f2c_7.f90: New test.\n+\n 2005-06-12  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* gcc.dg/pr14796-1.c: New."}, {"sha": "848dcc5a3c890b1da614be105b91f650424867e0", "filename": "gcc/testsuite/gfortran.dg/f2c_7.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49a3de7433301048a330df014a008a2b4066e7d/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_7.f90?ref=b49a3de7433301048a330df014a008a2b4066e7d", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+! { dg-options \"-ff2c -O\" }\n+! Verifies that array results work with -ff2c\n+! try all permutations of result clause in function yes/no\n+!                     and result clause in interface yes/no\n+! this is not possible in Fortran 77, but this exercises a previously\n+! buggy codepath\n+function c() result (r)\n+  complex :: r(5)\n+  r = 0.\n+end function c\n+\n+function d()\n+  complex :: d(5)\n+  d = 1.\n+end function d\n+\n+subroutine test_without_result\n+interface\n+   function c\n+     complex :: c(5)\n+   end function c\n+end interface\n+interface\n+   function d\n+     complex :: d(5)\n+   end function d\n+end interface\n+complex z(5)\n+z = c()\n+if (any(z /= 0.)) call abort ()\n+z = d()\n+if (any(z /= 1.)) call abort ()\n+end subroutine test_without_result\n+\n+subroutine test_with_result\n+interface\n+   function c result(r)\n+     complex :: r(5)\n+   end function c\n+end interface\n+interface\n+   function d result(r)\n+     complex :: r(5)\n+   end function d\n+end interface\n+complex z(5)\n+z = c()\n+if (any(z /= 0.)) call abort ()\n+z = d()\n+if (any(z /= 1.)) call abort ()\n+end subroutine test_with_result\n+\n+call test_without_result\n+call test_with_result\n+end\n+  "}]}