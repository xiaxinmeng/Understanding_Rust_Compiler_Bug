{"sha": "0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmYWY4M2ZkMmQ2MWQ5Y2M3MjY0ODlmNTllNGVhZmQ0ZWYyMWE5Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-10-12T22:41:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-10-12T22:41:57Z"}, "message": "Makefile.in (LOOSE_WARN): Delete.\n\ngnattools/\n\t* Makefile.in (LOOSE_WARN): Delete.\n\t(GCC_WARN_CFLAGS): Set to -W -Wall.\n\t(TOOLS_FLAGS_TO_PASS_1): Delete.\n\t(TOOLS_FLAGS_TO_PASS_1re): Rename into...\n\t(TOOLS_FLAGS_TO_PASS_RE): ...this.\n\t(gnattools-native): Use TOOLS_FLAGS_TO_PASS_NATIVE.\n\t(regnattools): Use TOOLS_FLAGS_TO_PASS_RE.\nlibada/\n\t* Makefile.in (LOOSE_WARN): Delete.\n\t(GCC_WARN_CFLAGS): Likewise.\n\t(WARN_CFLAGS): Likewise.\n\t(GNATLIBFLAGS): Add -nostdinc.\n\t(GNATLIBCFLAGS_FOR_C): Add -W -Wall.\n \t(LIBADA_FLAGS_TO_PASS): Remove WARN_CFLAGS.\n\t* configure.ac (warn_cflags): Delete.\n\t* configure: Regenerate.\ngcc/ada/\n\t* sem_util.adb (Denotes_Same_Prefix): Fix fatal warning.\n\t* gcc-interface/Make-lang.in (WARN_ADAFLAGS): New.\n\t(ALL_ADAFLAGS): Include WARN_ADAFLAGS.\n\t(ADA_FLAGS_TO_PASS): Likewise.\n\t(COMMON_FLAGS_TO_PASS): New.\n\t(ADA_TOOLS_FLAGS_TO_PASS): Use COMMON_FLAGS_TO_PASS.  In the regular\n\tnative case, also use FLAGS_TO_PASS and ADA_FLAGS_TO_PASS.\n\t(gnatlib): Use COMMON_FLAGS_TO_PASS.\n\t(ada.install-common): Likewise.\n\t(install-gnatlib): Likewise.\n\t(install-gnatlib-obj): Likewise.\n\t(gnattools): Use ADA_TOOLS_FLAGS_TO_PASS for gnattools1 as well.\n\t(gnat-cross): Delete.\n\t(gnatboot): Likewise.\n\t(gnatboot2): Likewise.\n\t(gnatboot3): Likewise.\n\t(gnatstage1): Likewise.\n\t(gnatstage2): Likewise.\n\t* gcc-interface/Makefile.in (SOME_ADAFLAGS): Likewise.\n\t(MOST_ADAFLAGS): Likewise.\n\t(LOOSE_CFLAGS): Likewise.\n \t(gnat-cross): Likewise.\n\t(GNATLIBFLAGS): Add -W -Wall.\n\t(GNATLIBCFLAGS_FOR_C): Likewise.\n\t* gcc-interface/lang.opt: Remove C-specific warnings.  Add doc lines.\n\t* gcc-interface/misc.c (gnat_handle_option): Remove obsolete cases.\n\nFrom-SVN: r179878", "tree": {"sha": "63660533540813c80404d5a1a36119e8489cf53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63660533540813c80404d5a1a36119e8489cf53b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/comments", "author": null, "committer": null, "parents": [{"sha": "53778c2d881a648f1aad62e7a9b5e7d0d3fd59d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53778c2d881a648f1aad62e7a9b5e7d0d3fd59d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53778c2d881a648f1aad62e7a9b5e7d0d3fd59d2"}], "stats": {"total": 275, "additions": 97, "deletions": 178}, "files": [{"sha": "c995c9743a7db482d8cb386baa01214ca05447fc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -1,3 +1,32 @@\n+2011-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Denotes_Same_Prefix): Fix fatal warning.\n+\t* gcc-interface/Make-lang.in (WARN_ADAFLAGS): New.\n+\t(ALL_ADAFLAGS): Include WARN_ADAFLAGS.\n+\t(ADA_FLAGS_TO_PASS): Likewise.\n+\t(COMMON_FLAGS_TO_PASS): New.\n+\t(ADA_TOOLS_FLAGS_TO_PASS): Use COMMON_FLAGS_TO_PASS.  In the regular\n+\tnative case, also use FLAGS_TO_PASS and ADA_FLAGS_TO_PASS.\n+\t(gnatlib): Use COMMON_FLAGS_TO_PASS.\n+\t(ada.install-common): Likewise.\n+\t(install-gnatlib): Likewise.\n+\t(install-gnatlib-obj): Likewise.\n+\t(gnattools): Use ADA_TOOLS_FLAGS_TO_PASS for gnattools1 as well.\n+\t(gnat-cross): Delete.\n+\t(gnatboot): Likewise.\n+\t(gnatboot2): Likewise.\n+\t(gnatboot3): Likewise.\n+\t(gnatstage1): Likewise.\n+\t(gnatstage2): Likewise.\n+\t* gcc-interface/Makefile.in (SOME_ADAFLAGS): Likewise.\n+\t(MOST_ADAFLAGS): Likewise.\n+\t(LOOSE_CFLAGS): Likewise.\n+\t(gnat-cross): Likewise.\n+\t(GNATLIBFLAGS): Add -W -Wall.\n+\t(GNATLIBCFLAGS_FOR_C): Likewise.\n+\t* gcc-interface/lang.opt: Remove C-specific warnings.  Add doc lines.\n+\t* gcc-interface/misc.c (gnat_handle_option): Remove obsolete cases.\n+\n 2011-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Attribute_to_gnu): Use remove_conversions."}, {"sha": "a3ec5d3bcc12447f1c255e4590675b468ad88798", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 19, "deletions": 68, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -46,6 +46,7 @@ RMDIR = rm -rf\n \n # Extra flags to pass to recursive makes.\n COMMON_ADAFLAGS= -gnatpg -gnata\n+WARN_ADAFLAGS= -W -Wall\n BOOT_ADAFLAGS= $(COMMON_ADAFLAGS)\n \n ifeq ($(CROSS),)\n@@ -56,17 +57,19 @@ else\n ADAFLAGS= $(COMMON_ADAFLAGS)\n endif\n \n-ALL_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(ADAFLAGS)\n+ALL_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(ADAFLAGS) $(WARN_ADAFLAGS)\n FORCE_DEBUG_ADAFLAGS = -g\n ADA_CFLAGS =\n ADA_INCLUDES = -nostdinc -I- -I. -Iada -I$(srcdir)/ada -I$(srcdir)/ada/gcc-interface\n ADA_INCLUDE_DIR = $(libsubdir)/adainclude\n ADA_RTL_OBJ_DIR = $(libsubdir)/adalib\n+# We do not want the WARN_CFLAGS of the compiler in Ada as it is for C/C++.\n+COMMON_FLAGS_TO_PASS = $(filter-out -pedantic -W%, $(FLAGS_TO_PASS))\n ADA_FLAGS_TO_PASS = \\\n \t\"ADA_FOR_BUILD=$(ADA_FOR_BUILD)\"\t\\\n \t\"ADA_INCLUDE_DIR=$(ADA_INCLUDE_DIR)\"\t\\\n \t\"ADA_RTL_OBJ_DIR=$(ADA_RTL_OBJ_DIR)\"\t\\\n-\t\"ADAFLAGS=$(ADAFLAGS)\"\t\t\t\\\n+\t\"ADAFLAGS=$(ADAFLAGS) $(WARN_ADAFLAGS)\"\t\\\n \t\"ADA_FOR_TARGET=$(ADA_FOR_TARGET)\"\t\\\n \t\"INSTALL=$(INSTALL)\" \t\t\t\\\n \t\"INSTALL_DATA=$(INSTALL_DATA)\"\t\t\\\n@@ -99,14 +102,12 @@ ifeq ($(build), $(host))\n     # This is a regular native. So use the compiler from our current build\n     # tree.\n     ADA_TOOLS_FLAGS_TO_PASS=\\\n-        \"CC=../../xgcc -B../../\"\t\\\n-        \"CFLAGS=$(CFLAGS)\"\t\t\\\n-\t\"exeext=$(exeext)\"              \\\n-        \"ADAFLAGS=$(ADAFLAGS)\"\t\t\\\n-        \"ADA_INCLUDES=-I../rts\"\t\t\\\n-\t\"GNATMAKE=../../gnatmake\"\t\\\n-\t\"GNATLINK=../../gnatlink\"\t\\\n-\t\"GNATBIND=../../gnatbind\"\n+        CC=\"../../xgcc -B../../\" \\\n+        $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \\\n+        ADA_INCLUDES=\"-I- -I../rts\" \\\n+        GNATMAKE=\"../../gnatmake\" \\\n+        GNATLINK=\"../../gnatlink\" \\\n+        GNATBIND=\"../../gnatbind\"\n   else\n     # This is a regular cross compiler. Use the native compiler to compile\n     # the tools.\n@@ -117,7 +118,7 @@ ifeq ($(build), $(host))\n \n     ADA_TOOLS_FLAGS_TO_PASS=\\\n         CC=\"$(CC)\" \\\n-        $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \\\n+        $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \\\n         ADA_INCLUDES=\"-I$(RTS_DIR)../adainclude -I$(RTS_DIR)\" \\\n         GNATMAKE=\"gnatmake\" \\\n         GNATBIND=\"gnatbind\" \\\n@@ -139,7 +140,7 @@ else\n     # built runtime.\n     ADA_TOOLS_FLAGS_TO_PASS=\\\n         CC=\"$(CC)\" \\\n-        $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS)  \\\n+        $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS)  \\\n         ADA_INCLUDES=\"-I../rts\"                \\\n         GNATMAKE=\"$(GNATMAKE_FOR_HOST)\"      \\\n         GNATBIND=\"$(GNATBIND_FOR_HOST)\"      \\\n@@ -151,7 +152,7 @@ else\n     RTS_DIR:=$(strip $(subst \\,/,$(shell $(GNATLS_FOR_HOST) -v | grep adalib )))\n     ADA_TOOLS_FLAGS_TO_PASS=\\\n         CC=\"$(CC)\" \\\n-        $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS)  \\\n+        $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS)  \\\n         ADA_INCLUDES=\"-I$(RTS_DIR)../adainclude -I$(RTS_DIR)\" \\\n         GNATMAKE=\"$(GNATMAKE_FOR_HOST)\"      \\\n         GNATBIND=\"$(GNATBIND_FOR_HOST)\"      \\\n@@ -547,9 +548,7 @@ gnatbind$(exeext): ada/b_gnatb.o $(CONFIG_H) $(GNATBIND_OBJS) ggc-none.o libcomm\n \n # use target-gcc target-gnatmake target-gnatbind target-gnatlink\n gnattools: $(GCC_PARTS) $(CONFIG_H) prefix.o force\n-\t$(MAKE) -C ada $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) \\\n-\t  ADA_INCLUDES=\"-I- -I../rts\"\\\n-\t  CC=\"../../xgcc -B../../\" GNATBIND=\"../../gnatbind\"  gnattools1\n+\t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools1\n \t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools2\n \n regnattools:\n@@ -566,7 +565,7 @@ canadian-gnattools: force\n \t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools2\n \n gnatlib gnatlib-sjlj gnatlib-zcx gnatlib-shared: ada/s-oscons.ads force\n-\t$(MAKE) -C ada $(FLAGS_TO_PASS)  \\\n+\t$(MAKE) -C ada $(COMMON_FLAGS_TO_PASS)  \\\n \t   GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n \t   GNATLIBCFLAGS=\"$(GNATLIBCFLAGS)\" \\\n \t   TARGET_LIBGCC2_CFLAGS=\"$(TARGET_LIBGCC2_CFLAGS)\" \\\n@@ -578,11 +577,6 @@ gnatlib gnatlib-sjlj gnatlib-zcx gnatlib-shared: ada/s-oscons.ads force\n # use only for native compiler\n gnatlib_and_tools: gnatlib gnattools\n \n-# use cross-gcc\n-gnat-cross: force\n-\tmake $(GNAT1_ADA_OBJS) CC=\"gcc -B../stage1/\" CFLAGS=\"-S -gnatp\" \\\n-\t\t$(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) HOST_CFLAGS= HOST_CC=cc\n-\f\n # Build hooks:\n \n ada.all.cross:\n@@ -966,14 +960,14 @@ ada.install-common:\n #\n \t-if [ -f gnat1$(exeext) ] ; \\\n \tthen \\\n-\t  $(MAKE) $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) install-gnatlib; \\\n+\t  $(MAKE) $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) install-gnatlib; \\\n \tfi\n \n install-gnatlib:\n-\t$(MAKE) -C ada $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) install-gnatlib$(LIBGNAT_TARGET)\n+\t$(MAKE) -C ada $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) install-gnatlib$(LIBGNAT_TARGET)\n \n install-gnatlib-obj:\n-\t$(MAKE) -C ada $(FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) install-gnatlib-obj\n+\t$(MAKE) -C ada $(COMMON_FLAGS_TO_PASS) $(ADA_FLAGS_TO_PASS) install-gnatlib-obj\n \n ada.install-man:\n ada.install-plugin:\n@@ -1129,50 +1123,7 @@ $(check_acats_targets): check-acats%:\n \texport testdir; cd $(ACATSDIR)$* && $(SHELL) $${testdir}/run_acats $$chapters\n \n .PHONY: check-acats $(check_acats_targets)\n-\n \f\n-# Bootstrapping targets for just GNAT - use the same stage directories\n-gnatboot: force\n-\t-$(RM) gnatboot3\n-\t$(MAKE) gnat1$(exeext) gnatbind$(exeext) CC=\"$(CC)\" \\\n-\t\tCFLAGS=\"$(CFLAGS)\"\n-\t$(MAKE) gnatboot2 BOOT_CFLAGS=\"$(BOOT_CFLAGS)\" \\\n-\t                  BOOT_ADAFLAGS=\"$(BOOT_ADAFLAGS)\" \\\n-\t                  LDFLAGS=\"$(BOOT_LDFLAGS)\"\n-\n-gnatboot2: force\n-\t$(MAKE) gnatstage1\n-\t$(MAKE) gnat1$(exeext) gnatbind$(exeext)  CC=\"gcc -B../stage1/\"\\\n-\t\t\t\tCFLAGS=\"$(BOOT_CFLAGS)\" \\\n-\t        \t\tADAFLAGS=\"$(BOOT_ADAFLAGS)\"\\\n-\t\t\t\tLDFLAGS=\"$(BOOT_LDFLAGS)\" \\\n-\t\t\t\tGNATBIND=\"../stage1/gnatbind\"\n-\t$(MAKE) gnatboot3 BOOT_CFLAGS=\"$(BOOT_CFLAGS)\" \\\n-\t\t\t    BOOT_ADAFLAGS=\"$(BOOT_ADAFLAGS)\" \\\n-\t\t\t    LDFLAGS=\"$(BOOT_LDFLAGS)\"\n-\n-gnatboot3:\n-\t$(MAKE) gnatstage2\n-\t$(MAKE) gnat1$(exeext) gnatbind$(exeext)  CC=\"gcc -B../stage2/\"\\\n-\t\t\t\tCFLAGS=\"$(BOOT_CFLAGS)\" \\\n-\t        \t\tADAFLAGS=\"$(BOOT_ADAFLAGS)\"\\\n-\t\t\t\tLDFLAGS=\"$(BOOT_LDFLAGS)\" \\\n-\t\t\t\tGNATBIND=\"../stage2/gnatbind\"\n-\n-gnatstage1: force\n-\t-$(MKDIR) stage1\n-\t-$(MKDIR) stage1/ada\n-\t-$(MV) gnat1$(exeext) gnatbind$(exeext) stage1\n-\t-$(MV) ada/*$(objext) ada/*.ali stage1/ada\n-\t-$(MV) ada/stamp-* stage1/ada\n-\n-gnatstage2: force\n-\t-$(MKDIR) stage2\n-\t-$(MKDIR) stage2/ada\n-\t-$(MV) gnat1$(exeext) gnatbind$(exeext) stage2\n-\t-$(MV) ada/*$(objext) ada/*.ali stage2/ada\n-\t-$(MV) ada/stamp-* stage2/ada\n-\n # Compiling object files from source files.\n \n # Note that dependencies on obstack.h are not written"}, {"sha": "df62a2cc4aa3e585cc22a828ee32e97346231f60", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -105,20 +105,18 @@ TEXI2PDF = texi2pdf\n GNATBIND_FLAGS = -static -x\n ADA_CFLAGS =\n ADAFLAGS = -W -Wall -gnatpg -gnata\n-SOME_ADAFLAGS =-gnata\n FORCE_DEBUG_ADAFLAGS = -g\n-NO_SIBLING_ADAFLAGS=-fno-optimize-sibling-calls\n-NO_REORDER_ADAFLAGS=-fno-toplevel-reorder\n-GNATLIBFLAGS = -gnatpg -nostdinc\n+NO_SIBLING_ADAFLAGS = -fno-optimize-sibling-calls\n+NO_REORDER_ADAFLAGS = -fno-toplevel-reorder\n+GNATLIBFLAGS = -W -Wall -gnatpg -nostdinc\n GNATLIBCFLAGS = -g -O2\n PICFLAG_FOR_TARGET = @PICFLAG_FOR_TARGET@\n # Pretend that _Unwind_GetIPInfo is available for the target by default.  This\n # should be autodetected during the configuration of libada and passed down to\n # here, but we need something for --disable-libada and hope for the best.\n-GNATLIBCFLAGS_FOR_C = $(GNATLIBCFLAGS) $(PICFLAG_FOR_TARGET) -fexceptions \\\n-\t-DIN_RTS -DHAVE_GETIPINFO\n+GNATLIBCFLAGS_FOR_C = -W -Wall $(GNATLIBCFLAGS) $(PICFLAG_FOR_TARGET) \\\n+\t-fexceptions -DIN_RTS -DHAVE_GETIPINFO\n ALL_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(ADAFLAGS)\n-MOST_ADAFLAGS = $(CFLAGS) $(ADA_CFLAGS) $(SOME_ADAFLAGS)\n THREAD_KIND = native\n THREADSLIB =\n GMEM_LIB =\n@@ -231,8 +229,7 @@ all.indirect: Makefile ../gnat1$(exeext)\n INTERNAL_CFLAGS = @CROSS@ -DIN_GCC\n \n # This is the variable actually used when we compile.\n-LOOSE_CFLAGS = `echo $(CFLAGS) $(WARN2_CFLAGS)|sed -e 's/-pedantic//g' -e 's/-Wtraditional//g'`\n-ALL_CFLAGS = $(INTERNAL_CFLAGS) $(T_CFLAGS) $(LOOSE_CFLAGS)\n+ALL_CFLAGS = $(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS)\n \n # Likewise.\n ALL_CPPFLAGS = $(CPPFLAGS)\n@@ -2736,10 +2733,6 @@ gnatlib-zcx:\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n \t     PICFLAG_FOR_TARGET=\"$(PICFLAG_FOR_TARGET)\" gnatlib\n \n-# .s files for cross-building\n-gnat-cross: force\n-\tmake $(GNAT1_ADA_OBJS) CC=\"gcc -B../stage1/\" CFLAGS=\"-S -gnatp\"\n-\n # Compiling object files from source files.\n \n # Note that dependencies on obstack.h are not written"}, {"sha": "48392352ebdf2f666cce7d8e80112d892d34eb61", "filename": "gcc/ada/gcc-interface/lang.opt", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fgcc-interface%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fgcc-interface%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Flang.opt?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -48,66 +48,35 @@ Ada AdaWhy Alias(nostdlib)\n \n I\n Ada AdaWhy Joined Separate\n-; Documented for C\n+-I <dir>.\tAdd <dir> to the end of the main source path\n \n Wall\n Ada AdaWhy\n-; Documented for C\n-\n-Wmissing-prototypes\n-Ada AdaWhy\n-; Documented for C\n-\n-Wstrict-prototypes\n-Ada AdaWhy\n-; Documented for C\n-\n-Wwrite-strings\n-Ada AdaWhy\n-; Documented for C\n-\n-Wlong-long\n-Ada AdaWhy\n-; Documented for C\n-\n-Wvariadic-macros\n-Ada AdaWhy\n-; Documented for C\n-\n-Wold-style-definition\n-Ada AdaWhy\n-; Documented for C\n-\n-Wmissing-format-attribute\n-Ada AdaWhy\n-; Documented for C\n-\n-Woverlength-strings\n-Ada AdaWhy\n-; Documented for C\n+Enable most warning messages\n \n k8\n Driver\n+Synonym of -gnatk8\n \n nostdinc\n Ada AdaWhy RejectNegative\n-; Don't look for source files\n+Do not look for source files in standard path\n \n nostdlib\n Ada AdaWhy\n-; Don't look for object files\n+Do not look for object files in standard path\n \n fRTS=\n Ada AdaWhy Joined RejectNegative\n-; Selects the runtime\n+Select the runtime\n \n gant\n Ada AdaWhy Joined Undocumented\n-; Catches typos\n+Catch typos\n \n gnatO\n Ada AdaWhy Separate\n-; Sets name of output ALI file (internal switch)\n+Set name of output ALI file (internal switch)\n \n gnat\n Ada AdaWhy Joined"}, {"sha": "a2de256b1dc12625e93b14f244eafc4890bc2a40", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -124,17 +124,6 @@ gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n       warn_maybe_uninitialized = value;\n       break;\n \n-    case OPT_Wmissing_prototypes:\n-    case OPT_Wstrict_prototypes:\n-    case OPT_Wwrite_strings:\n-    case OPT_Wlong_long:\n-    case OPT_Wvariadic_macros:\n-    case OPT_Wold_style_definition:\n-    case OPT_Wmissing_format_attribute:\n-    case OPT_Woverlength_strings:\n-      /* These are used in the GCC Makefile.  */\n-      break;\n-\n     case OPT_gant:\n       warning (0, \"%<-gnat%> misspelled as %<-gant%>\");\n "}, {"sha": "381d9a50a57c6e217e3281bc173152d4e52d0cdc", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -2739,7 +2739,7 @@ package body Sem_Util is\n          end if;\n \n       elsif Is_Entity_Name (A2) then\n-         return Denotes_Same_Prefix (A2, A1);\n+         return Denotes_Same_Prefix (A1 => A2, A2 => A1);\n \n       elsif Nkind_In (A1, N_Selected_Component, N_Indexed_Component, N_Slice)\n               and then"}, {"sha": "e9a7a8be14e2e4ae35c6b7eeb96ea7316af9d7f9", "filename": "gnattools/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gnattools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gnattools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FChangeLog?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -1,3 +1,13 @@\n+2011-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.in (LOOSE_WARN): Delete.\n+\t(GCC_WARN_CFLAGS): Set to -W -Wall.\n+\t(TOOLS_FLAGS_TO_PASS_1): Delete.\n+\t(TOOLS_FLAGS_TO_PASS_1re): Rename into...\n+\t(TOOLS_FLAGS_TO_PASS_RE): ...this.\n+\t(gnattools-native): Use TOOLS_FLAGS_TO_PASS_NATIVE.\n+\t(regnattools): Use TOOLS_FLAGS_TO_PASS_RE.\n+\n 2011-07-07  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/39150"}, {"sha": "794d374e75e47af773b32846ea01f8cd688f5ffd", "filename": "gnattools/Makefile.in", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gnattools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/gnattools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FMakefile.in?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -44,8 +44,7 @@ PWD_COMMAND = $${PWDCMD-pwd}\n \n # The tedious process of getting CFLAGS right.\n CFLAGS=-g\n-LOOSE_WARN = -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\n-GCC_WARN_CFLAGS = $(LOOSE_WARN)\n+GCC_WARN_CFLAGS = -W -Wall\n WARN_CFLAGS = @warn_cflags@\n \n ADA_CFLAGS=@ADA_CFLAGS@\n@@ -64,8 +63,8 @@ INCLUDES_FOR_SUBDIR = -I. -I.. -I../.. -I$(fsrcdir)/ada -I$(fsrcdir)/config \\\n \t-I$(fsrcdir)/../include -I$(fsrcdir)\n ADA_INCLUDES_FOR_SUBDIR = -I. -I$(fsrcdir)/ada\n \n-# Variables for gnattools1, native\n-TOOLS_FLAGS_TO_PASS_1= \\\n+# Variables for gnattools, native\n+TOOLS_FLAGS_TO_PASS_NATIVE= \\\n \t\"CC=../../xgcc -B../../\" \\\n \t\"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)\" \\\n \t\"LDFLAGS=$(LDFLAGS)\" \\\n@@ -76,11 +75,13 @@ TOOLS_FLAGS_TO_PASS_1= \\\n \t\"exeext=$(exeext)\" \\\n \t\"fsrcdir=$(fsrcdir)\" \\\n \t\"srcdir=$(fsrcdir)\" \\\n+\t\"GNATMAKE=../../gnatmake\" \\\n+\t\"GNATLINK=../../gnatlink\" \\\n \t\"GNATBIND=../../gnatbind\" \\\n \t\"TOOLSCASE=native\"\n \n # Variables for regnattools\n-TOOLS_FLAGS_TO_PASS_1re= \\\n+TOOLS_FLAGS_TO_PASS_RE= \\\n \t\"CC=../../xgcc -B../../\" \\\n \t\"CFLAGS=$(CFLAGS)\" \\\n \t\"ADAFLAGS=$(ADAFLAGS)\" \\\n@@ -93,24 +94,7 @@ TOOLS_FLAGS_TO_PASS_1re= \\\n \t\"GNATMAKE=../../gnatmake\" \\\n \t\"GNATLINK=../../gnatlink\" \\\n \t\"GNATBIND=../../gnatbind\" \\\n-\t\"TOOLSCASE=cross\" \\\n-\t\"INCLUDES=\"\n-\n-# Variables for gnattools2, native\n-TOOLS_FLAGS_TO_PASS_NATIVE= \\\n-\t\"CC=../../xgcc -B../../\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"ADAFLAGS=$(ADAFLAGS)\" \\\n-\t\"ADA_CFLAGS=$(ADA_CFLAGS)\" \\\n-\t\"INCLUDES=$(INCLUDES_FOR_SUBDIR)\" \\\n-\t\"ADA_INCLUDES=-I../rts $(ADA_INCLUDES_FOR_SUBDIR)\" \\\n-\t\"exeext=$(exeext)\" \\\n-\t\"fsrcdir=$(fsrcdir)\" \\\n-\t\"srcdir=$(fsrcdir)\" \\\n-\t\"GNATMAKE=../../gnatmake\" \\\n-\t\"GNATLINK=../../gnatlink\" \\\n-\t\"GNATBIND=../../gnatbind\" \\\n-\t\"TOOLSCASE=native\"\n+\t\"TOOLSCASE=cross\"\n \n # Variables for gnattools, cross\n TOOLS_FLAGS_TO_PASS_CROSS= \\\n@@ -177,7 +161,7 @@ $(GCC_DIR)/stamp-tools:\n gnattools-native: $(GCC_DIR)/stamp-tools $(GCC_DIR)/stamp-gnatlib-rts\n \t# gnattools1\n \t$(MAKE) -C $(GCC_DIR)/ada/tools -f ../Makefile \\\n-\t  $(TOOLS_FLAGS_TO_PASS_1) \\\n+\t  $(TOOLS_FLAGS_TO_PASS_NATIVE) \\\n \t  ../../gnatmake$(exeext) ../../gnatlink$(exeext)\n \t# gnattools2\n \t$(MAKE) -C $(GCC_DIR)/ada/tools -f ../Makefile \\\n@@ -189,7 +173,7 @@ gnattools-native: $(GCC_DIR)/stamp-tools $(GCC_DIR)/stamp-gnatlib-rts\n regnattools: $(GCC_DIR)/stamp-gnatlib-rts\n \t# gnattools1-re\n \t$(MAKE) -C $(GCC_DIR)/ada/tools -f ../Makefile \\\n-\t  $(TOOLS_FLAGS_TO_PASS_1re) \\\n+\t  $(TOOLS_FLAGS_TO_PASS_RE) INCLUDES=\"\" \\\n \t  gnatmake-re gnatlink-re\n \t# gnattools2\n \t$(MAKE) -C $(GCC_DIR)/ada/tools -f ../Makefile \\"}, {"sha": "fbcff77405165c524fda9d21b9d12b865a422d57", "filename": "libada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/libada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/libada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FChangeLog?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -1,3 +1,14 @@\n+2011-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.in (LOOSE_WARN): Delete.\n+\t(GCC_WARN_CFLAGS): Likewise.\n+\t(WARN_CFLAGS): Likewise.\n+\t(GNATLIBFLAGS): Add -nostdinc.\n+\t(GNATLIBCFLAGS_FOR_C): Add -W -Wall.\n+\t(LIBADA_FLAGS_TO_PASS): Remove WARN_CFLAGS.\n+\t* configure.ac (warn_cflags): Delete.\n+\t* configure: Regenerate.\n+\n 2011-08-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* configure.ac: Include ../config/picflag.m4."}, {"sha": "86aff529dbd0e60a60d961318750eea95984e410", "filename": "libada/Makefile.in", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/libada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/libada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FMakefile.in?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -45,21 +45,17 @@ AWK=@AWK@\n \n # Variables for the user (or the top level) to override.\n objext=.o\n-GNATLIBFLAGS= -W -Wall -gnatpg\n THREAD_KIND=native\n TRACE=no\n LDFLAGS=\n \n # The tedious process of getting CFLAGS right.\n CFLAGS=-g\n-LOOSE_WARN = -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes\n-GCC_WARN_CFLAGS = $(LOOSE_WARN)\n-WARN_CFLAGS = @warn_cflags@\n-\n PICFLAG = @PICFLAG@\n+GNATLIBFLAGS= -W -Wall -gnatpg -nostdinc\n GNATLIBCFLAGS= -g -O2\n-GNATLIBCFLAGS_FOR_C = $(GNATLIBCFLAGS) $(PICFLAG) -fexceptions \\\n-\t-DIN_RTS @have_getipinfo@\n+GNATLIBCFLAGS_FOR_C = -W -Wall $(GNATLIBCFLAGS) $(PICFLAG) \\\n+\t-fexceptions -DIN_RTS @have_getipinfo@\n \n host_subdir = @host_subdir@\n GCC_DIR=$(MULTIBUILDTOP)../../$(host_subdir)/gcc\n@@ -91,7 +87,7 @@ LIBADA_FLAGS_TO_PASS = \\\n         \"exeext=.exeext.should.not.be.used \" \\\n \t'CC=the.host.compiler.should.not.be.needed' \\\n \t\"GCC_FOR_TARGET=$(CC)\" \\\n-        \"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)\"\n+        \"CFLAGS=$(CFLAGS)\"\n \n # Rules to build gnatlib.\n .PHONY: gnatlib gnatlib-plain gnatlib-sjlj gnatlib-zcx gnatlib-shared oscons"}, {"sha": "1e0ceefc86a4e08a2cd76608983c1ebaf958299f", "filename": "libada/configure", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/libada%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/libada%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2Fconfigure?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -553,7 +553,6 @@ PACKAGE_URL=\n ac_unique_file=\"Makefile.in\"\n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n-warn_cflags\n have_getipinfo\n default_gnatlib_target\n LN_S\n@@ -3007,12 +3006,6 @@ if test x$have_unwind_getipinfo = xyes; then\n fi\n \n \n-warn_cflags=\n-if test \"x$GCC\" = \"xyes\"; then\n-  warn_cflags='$(GCC_WARN_CFLAGS)'\n-fi\n-\n-\n # Output: create a Makefile.\n ac_config_files=\"$ac_config_files Makefile\"\n "}, {"sha": "1e3760cbe4c83f6557a7c824d6560d05e22fdc61", "filename": "libada/configure.ac", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/libada%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c/libada%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2Fconfigure.ac?ref=0cfaf83fd2d61d9cc726489f59e4eafd4ef21a9c", "patch": "@@ -144,12 +144,6 @@ if test x$have_unwind_getipinfo = xyes; then\n fi\n AC_SUBST(have_getipinfo)\n \n-warn_cflags=\n-if test \"x$GCC\" = \"xyes\"; then\n-  warn_cflags='$(GCC_WARN_CFLAGS)'\n-fi\n-AC_SUBST(warn_cflags)\n-\n # Output: create a Makefile.\n AC_CONFIG_FILES([Makefile])\n "}]}