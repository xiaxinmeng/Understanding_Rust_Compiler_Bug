{"sha": "7fcb93431ef18a31c9af142f77faa176bbd9b3dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjYjkzNDMxZWYxOGEzMWM5YWYxNDJmNzdmYWExNzZiYmQ5YjNkYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-04-20T13:48:45Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-04-20T13:48:45Z"}, "message": "c++: Expr pack expansion equality [pr94454]\n\nWe were not comparing expression pack expansions correctly. We could\nconsider distinct expansions equal and creating two, apparently equal,\nspecializations that would sometimes collide.  cp_tree_operand_length\nsays a pack has 1 operand (for mangling), whereas it actually has 3,\nbut only two of which are significant for equality.  We must special\ncase that in cp_tree_equal.  That new code matches the hasher and the\ntype_pack_expansion case in structural_comp_types.\n\n\t* tree.c (cp_tree_equal): [TEMPLATE_ID_EXPR, default] Refactor.\n\t[EXPR_PACK_EXPANSION]: Add.", "tree": {"sha": "6e60d0d04b86933e0888c8deb3f85db1669e7546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e60d0d04b86933e0888c8deb3f85db1669e7546"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fcb93431ef18a31c9af142f77faa176bbd9b3dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcb93431ef18a31c9af142f77faa176bbd9b3dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcb93431ef18a31c9af142f77faa176bbd9b3dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcb93431ef18a31c9af142f77faa176bbd9b3dc/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa576f2a860c8287cac6bbe6d37f5f37448bf06a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa576f2a860c8287cac6bbe6d37f5f37448bf06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa576f2a860c8287cac6bbe6d37f5f37448bf06a"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "49db85d1c1ae04db1c206c45bb45a883763bfdb3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcb93431ef18a31c9af142f77faa176bbd9b3dc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcb93431ef18a31c9af142f77faa176bbd9b3dc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7fcb93431ef18a31c9af142f77faa176bbd9b3dc", "patch": "@@ -1,5 +1,9 @@\n 2020-04-20  Nathan Sidwell  <nathan@acm.org>\n \n+\tPR 94454 - Expr pack expansion equality\n+\t* tree.c (cp_tree_equal): [TEMPLATE_ID_EXPR, default] Refactor.\n+\t[EXPR_PACK_EXPANSION]: Add.\n+\n \tPR c++/94454 Template Argument Hashing\n \t* pt.c (iterative_hash_template_arg): Strip nodes as\n \ttemplate_args_equal does."}, {"sha": "092a2fab35679f17aae03aacc7a53edfbfb7cf45", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fcb93431ef18a31c9af142f77faa176bbd9b3dc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fcb93431ef18a31c9af142f77faa176bbd9b3dc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=7fcb93431ef18a31c9af142f77faa176bbd9b3dc", "patch": "@@ -3771,8 +3771,11 @@ cp_tree_equal (tree t1, tree t2)\n \t\t\t      TREE_TYPE (TEMPLATE_PARM_DECL (t2))));\n \n     case TEMPLATE_ID_EXPR:\n-      return (cp_tree_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0))\n-\t      && cp_tree_equal (TREE_OPERAND (t1, 1), TREE_OPERAND (t2, 1)));\n+      if (!cp_tree_equal (TREE_OPERAND (t1, 0), TREE_OPERAND (t2, 0)))\n+\treturn false;\n+      if (!comp_template_args (TREE_OPERAND (t1, 1), TREE_OPERAND (t2, 1)))\n+\treturn false;\n+      return true;\n \n     case CONSTRAINT_INFO:\n       return cp_tree_equal (CI_ASSOCIATED_CONSTRAINTS (t1),\n@@ -3902,6 +3905,15 @@ cp_tree_equal (tree t1, tree t2)\n \treturn true;\n       }\n \n+    case EXPR_PACK_EXPANSION:\n+      if (!cp_tree_equal (PACK_EXPANSION_PATTERN (t1),\n+\t\t\t  PACK_EXPANSION_PATTERN (t2)))\n+\treturn false;\n+      if (!comp_template_args (PACK_EXPANSION_EXTRA_ARGS (t1),\n+\t\t\t       PACK_EXPANSION_EXTRA_ARGS (t2)))\n+\treturn false;\n+      return true;\n+\n     default:\n       break;\n     }\n@@ -3916,14 +3928,12 @@ cp_tree_equal (tree t1, tree t2)\n     case tcc_reference:\n     case tcc_statement:\n       {\n-\tint i, n;\n-\n-\tn = cp_tree_operand_length (t1);\n+\tint n = cp_tree_operand_length (t1);\n \tif (TREE_CODE_CLASS (code1) == tcc_vl_exp\n \t    && n != TREE_OPERAND_LENGTH (t2))\n \t  return false;\n \n-\tfor (i = 0; i < n; ++i)\n+\tfor (int i = 0; i < n; ++i)\n \t  if (!cp_tree_equal (TREE_OPERAND (t1, i), TREE_OPERAND (t2, i)))\n \t    return false;\n \n@@ -3932,9 +3942,11 @@ cp_tree_equal (tree t1, tree t2)\n \n     case tcc_type:\n       return same_type_p (t1, t2);\n+\n     default:\n       gcc_unreachable ();\n     }\n+\n   /* We can get here with --disable-checking.  */\n   return false;\n }"}]}