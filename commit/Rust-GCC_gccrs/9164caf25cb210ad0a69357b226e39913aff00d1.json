{"sha": "9164caf25cb210ad0a69357b226e39913aff00d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE2NGNhZjI1Y2IyMTBhZDBhNjkzNTdiMjI2ZTM5OTEzYWZmMDBkMQ==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-09-07T19:41:45Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-09-07T19:42:30Z"}, "message": "PR fortran/96711 - ICE with NINT() for integer(16) result\n\nWhen rounding a real to the nearest integer, temporarily convert the real\nargument to a longer real kind when the result is of type/kind integer(16).\n\ngcc/fortran/ChangeLog:\n\n\t* trans-intrinsic.c (build_round_expr): Use temporary with\n\tappropriate kind for conversion before rounding to nearest\n\tinteger when the result precision is 128 bits.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/pr96711.f90: New test.", "tree": {"sha": "0c4cd26a76ccc318b9cccc08b07be4916cf82cc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c4cd26a76ccc318b9cccc08b07be4916cf82cc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9164caf25cb210ad0a69357b226e39913aff00d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9164caf25cb210ad0a69357b226e39913aff00d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9164caf25cb210ad0a69357b226e39913aff00d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9164caf25cb210ad0a69357b226e39913aff00d1/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6001db79c477b03eacc7e7049560921fb54b7845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6001db79c477b03eacc7e7049560921fb54b7845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6001db79c477b03eacc7e7049560921fb54b7845"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "32fe9886c5785fac6295bec0f80427c719383dad", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9164caf25cb210ad0a69357b226e39913aff00d1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9164caf25cb210ad0a69357b226e39913aff00d1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=9164caf25cb210ad0a69357b226e39913aff00d1", "patch": "@@ -395,11 +395,24 @@ build_round_expr (tree arg, tree restype)\n     fn = builtin_decl_for_precision (BUILT_IN_LROUND, argprec);\n   else if (resprec <= LONG_LONG_TYPE_SIZE)\n     fn = builtin_decl_for_precision (BUILT_IN_LLROUND, argprec);\n+  else if (resprec >= argprec && resprec == 128)\n+    {\n+      /* Search for a real kind suitable as temporary for conversion.  */\n+      int kind = -1;\n+      for (int i = 0; kind < 0 && gfc_real_kinds[i].kind != 0; i++)\n+\tif (gfc_real_kinds[i].mode_precision >= resprec)\n+\t  kind = gfc_real_kinds[i].kind;\n+      if (kind < 0)\n+\tgfc_internal_error (\"Could not find real kind with at least %d bits\",\n+\t\t\t    resprec);\n+      arg = fold_convert (gfc_float128_type_node, arg);\n+      fn = gfc_builtin_decl_for_float_kind (BUILT_IN_ROUND, kind);\n+    }\n   else\n     gcc_unreachable ();\n \n-  return fold_convert (restype, build_call_expr_loc (input_location,\n-\t\t\t\t\t\t fn, 1, arg));\n+  return convert (restype, build_call_expr_loc (input_location,\n+\t\t\t\t\t\tfn, 1, arg));\n }\n \n "}, {"sha": "3761a8ea41613e6f4f88414968c12be5c39b3644", "filename": "gcc/testsuite/gfortran.dg/pr96711.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9164caf25cb210ad0a69357b226e39913aff00d1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96711.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9164caf25cb210ad0a69357b226e39913aff00d1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96711.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96711.f90?ref=9164caf25cb210ad0a69357b226e39913aff00d1", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-require-effective-target fortran_integer_16 }\n+! { dg-require-effective-target fortran_real_16 }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+! { dg-final { scan-tree-dump-times \"_gfortran_stop_numeric\" 2 \"original\" } }\n+!\n+! PR fortran/96711 - ICE on NINT() Function\n+\n+program p\n+  implicit none\n+  real(8)                :: x\n+  real(16)               :: y\n+  integer(16), parameter :: k1 = nint (2 / epsilon (x), kind(k1))\n+  integer(16), parameter :: k2 = nint (2 / epsilon (y), kind(k2))\n+  integer(16), parameter :: m1 = 9007199254740992_16                    !2**53\n+  integer(16), parameter :: m2 = 10384593717069655257060992658440192_16 !2**113\n+  integer(16), volatile  :: m\n+  x = 2 / epsilon (x)\n+  y = 2 / epsilon (y)\n+  m = nint (x, kind(m))\n+! print *, m\n+  if (k1 /= m1) stop 1\n+  if (m  /= m1) stop 2\n+  m = nint (y, kind(m))\n+! print *, m\n+  if (k2 /= m2) stop 3\n+  if (m  /= m2) stop 4\n+end program"}]}