{"sha": "a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwMGI0YTlmMThmZDYyMTNkZTUxZjQyNTllZTlhOGNlN2VlZmRiYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-04T22:30:32Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-04T22:30:32Z"}, "message": "c++: Avoid unnecessary copying in cp_fold [PR94038]\n\nWhen folding a CALL_EXPR, we can avoid copying it until folding changes\none of its arguments.  And when folding a TREE_VEC, we can avoid using\nan intermediate releasing_vec by copying the TREE_VEC as soon as folding\nchanges one of its arguments, like we do in the CALL_EXPR case.\n\nIncidentally, the CALL_EXPR change also fixes the testcase in PR94038.\nThe reason is that the call to maybe_constant_value from cp_fold on\nthe call 'bar<int>()' now reuses the result of the earlier call to\nmaybe_constant_value from fold_for_warn, via the cv_cache.  This earlier\ncall passes uid_sensitive=true, whereas the call from cp_fold passes\nuid_sensitive=false, and so by reusing the cached result of the earlier\ncall we now avoid instantiating bar<int> at all.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94038\n\t* cp-gimplify.c (cp_fold) <case CALL_EXPR>: Move some variable\n\tdeclarations closer to their uses.  Copy the CALL_EXPR only\n\twhen one of its arguments has changed.\n\t<case TREE_VEC>: Instead of first collecting the folded\n\targuments into a releasing_vec, just make a copy of the TREE_VEC\n\tas soon as folding changes one of its arguments.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94038\n\t* g++.dg/warn/pr94038.C: New test.", "tree": {"sha": "174acbc7d42a694b31c00c910aeeb73cf9bcdb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/174acbc7d42a694b31c00c910aeeb73cf9bcdb52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/comments", "author": null, "committer": null, "parents": [{"sha": "1405ed433443c7df22364ef8c6574bbf9b10b61a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1405ed433443c7df22364ef8c6574bbf9b10b61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1405ed433443c7df22364ef8c6574bbf9b10b61a"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "a3ae5efba0163fb6d006309019fcd1b869d3fa52", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb", "patch": "@@ -1,3 +1,13 @@\n+2020-05-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94038\n+\t* cp-gimplify.c (cp_fold) <case CALL_EXPR>: Move some variable\n+\tdeclarations closer to their uses.  Copy the CALL_EXPR only\n+\twhen one of its arguments has changed.\n+\t<case TREE_VEC>: Instead of first collecting the folded\n+\targuments into a releasing_vec, just make a copy of the TREE_VEC\n+\tas soon as folding changes one of its arguments.\n+\n 2020-05-04  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* coroutines.cc (morph_fn_to_coro): Mark the coro.gro variable"}, {"sha": "fc26a85f43aa00eda4f13799c9f0f4dae3f45e88", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb", "patch": "@@ -2744,7 +2744,7 @@ cp_fold (tree x)\n \n     case CALL_EXPR:\n       {\n-\tint i, m, sv = optimize, nw = sv, changed = 0;\n+\tint sv = optimize, nw = sv;\n \ttree callee = get_callee_fndecl (x);\n \n \t/* Some built-in function calls will be evaluated at compile-time in\n@@ -2770,10 +2770,9 @@ cp_fold (tree x)\n \t    break;\n \t  }\n \n-\tx = copy_node (x);\n-\n-\tm = call_expr_nargs (x);\n-\tfor (i = 0; i < m; i++)\n+\tbool changed = false;\n+\tint m = call_expr_nargs (x);\n+\tfor (int i = 0; i < m; i++)\n \t  {\n \t    r = cp_fold (CALL_EXPR_ARG (x, i));\n \t    if (r != CALL_EXPR_ARG (x, i))\n@@ -2783,9 +2782,11 @@ cp_fold (tree x)\n \t\t    x = error_mark_node;\n \t\t    break;\n \t\t  }\n-\t\tchanged = 1;\n+\t\tif (!changed)\n+\t\t  x = copy_node (x);\n+\t\tCALL_EXPR_ARG (x, i) = r;\n+\t\tchanged = true;\n \t      }\n-\t    CALL_EXPR_ARG (x, i) = r;\n \t  }\n \tif (x == error_mark_node)\n \t  break;\n@@ -2825,8 +2826,6 @@ cp_fold (tree x)\n \t    break;\n \t  }\n \n-\tif (!changed)\n-\t  x = org_x;\n \tbreak;\n       }\n \n@@ -2865,24 +2864,18 @@ cp_fold (tree x)\n     case TREE_VEC:\n       {\n \tbool changed = false;\n-\treleasing_vec vec;\n-\tint i, n = TREE_VEC_LENGTH (x);\n-\tvec_safe_reserve (vec, n);\n+\tint n = TREE_VEC_LENGTH (x);\n \n-\tfor (i = 0; i < n; i++)\n+\tfor (int i = 0; i < n; i++)\n \t  {\n \t    tree op = cp_fold (TREE_VEC_ELT (x, i));\n-\t    vec->quick_push (op);\n \t    if (op != TREE_VEC_ELT (x, i))\n-\t      changed = true;\n-\t  }\n-\n-\tif (changed)\n-\t  {\n-\t    r = copy_node (x);\n-\t    for (i = 0; i < n; i++)\n-\t      TREE_VEC_ELT (r, i) = (*vec)[i];\n-\t    x = r;\n+\t      {\n+\t\tif (!changed)\n+\t\t  x = copy_node (x);\n+\t\tTREE_VEC_ELT (x, i) = op;\n+\t\tchanged = true;\n+\t      }\n \t  }\n       }\n "}, {"sha": "09f89951042f0ee8e4506274162320c81bd6780f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb", "patch": "@@ -1,3 +1,8 @@\n+2020-05-04  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94038\n+\t* g++.dg/warn/pr94038.C: New test.\n+\n 2020-05-04  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/94941"}, {"sha": "4edfae72d994e03312cd14c6ff7141fe4b1f41d7", "filename": "gcc/testsuite/g++.dg/warn/pr94038.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr94038.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr94038.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr94038.C?ref=a700b4a9f18fd6213de51f4259ee9a8ce7eefdbb", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/94038\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-O -Wall\" }\n+\n+template<typename T>\n+constexpr int\n+foo()\n+{\n+  static_assert(T(1) == 0, \"\");\n+  return 0;\n+}\n+\n+template<typename T>\n+constexpr int\n+bar()\n+{\n+  return foo<T>();\n+}\n+\n+constexpr int\n+baz(int a)\n+{\n+  return a;\n+}\n+\n+static_assert(decltype(baz(bar<int>())){} == 0, \"\");"}]}