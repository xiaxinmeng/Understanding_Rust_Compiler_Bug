{"sha": "488d283713843caec66bb4978540ebf4fe61e119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg4ZDI4MzcxMzg0M2NhZWM2NmJiNDk3ODU0MGViZjRmZTYxZTExOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-19T17:38:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-19T17:38:18Z"}, "message": "stl_algo.h (for_each): Implement resolution of DR 1110.\n\n2010-02-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (for_each): Implement resolution of DR 1110.\n\t* testsuite/25_algorithms/for_each/1.cc: New.\n\nFrom-SVN: r156900", "tree": {"sha": "bf1999d579815bce2031e96026874e6d5f5e539f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf1999d579815bce2031e96026874e6d5f5e539f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/488d283713843caec66bb4978540ebf4fe61e119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488d283713843caec66bb4978540ebf4fe61e119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/488d283713843caec66bb4978540ebf4fe61e119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/488d283713843caec66bb4978540ebf4fe61e119/comments", "author": null, "committer": null, "parents": [{"sha": "c7da0354531098a6827b42b00689e92ef61053cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7da0354531098a6827b42b00689e92ef61053cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7da0354531098a6827b42b00689e92ef61053cd"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "e85c5383a7a756a18387e997cbc6039ea064c481", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488d283713843caec66bb4978540ebf4fe61e119/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488d283713843caec66bb4978540ebf4fe61e119/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=488d283713843caec66bb4978540ebf4fe61e119", "patch": "@@ -1,3 +1,8 @@\n+2010-02-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (for_each): Implement resolution of DR 1110.\n+\t* testsuite/25_algorithms/for_each/1.cc: New.\n+\n 2010-02-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/shared_ptr_base.h (__weak_ptr): Remove deleted"}, {"sha": "60caa43620661f4995a021212c223c7e3460d668", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488d283713843caec66bb4978540ebf4fe61e119/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488d283713843caec66bb4978540ebf4fe61e119/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=488d283713843caec66bb4978540ebf4fe61e119", "patch": "@@ -4191,7 +4191,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n    *  @param  first  An input iterator.\n    *  @param  last   An input iterator.\n    *  @param  f      A unary function object.\n-   *  @return   @p f.\n+   *  @return   @p f (std::move(@p f) in C++0x).\n    *\n    *  Applies the function object @p f to each element in the range\n    *  @p [first,last).  @p f must not modify the order of the sequence.\n@@ -4206,7 +4206,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       __glibcxx_requires_valid_range(__first, __last);\n       for (; __first != __last; ++__first)\n \t__f(*__first);\n-      return __f;\n+      return _GLIBCXX_MOVE(__f);\n     }\n \n   /**"}, {"sha": "4cfd3e89f3045e63b14185bbbc03b9740c6c8898", "filename": "libstdc++-v3/testsuite/25_algorithms/for_each/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/488d283713843caec66bb4978540ebf4fe61e119/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/488d283713843caec66bb4978540ebf4fe61e119/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffor_each%2F1.cc?ref=488d283713843caec66bb4978540ebf4fe61e119", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2010-02-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// XXX FIXME:  parallel-mode should deal correctly with moveable-only types\n+// per C++0x, at minimum smoothly fall back to serial.\n+#undef _GLIBCXX_PARALLEL\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+struct Function\n+{\n+  Function() : tot(0) { }\n+  Function(Function&& f) : tot(f.tot) { f.tot = 0; }\n+\n+  Function(const Function&) = delete;\n+\n+  void operator()(int num)\n+  { tot += num; }\n+\n+  int get() { return tot; }\n+\n+private:\n+  int tot;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using __gnu_test::test_container;\n+  using __gnu_test::input_iterator_wrapper;\n+\n+  typedef test_container<int, input_iterator_wrapper> Container;\n+\n+  int array[5] = { 1, 2, 3, 4, 5 };\n+  Container con(array, array + 5);\n+\n+  Function f;\n+  Function f_res = std::for_each(con.begin(), con.end(), std::move(f));\n+\n+  VERIFY( f_res.get() == 15 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}