{"sha": "bf9c83fe7692e68ee11f1a0b72e34c57c044898d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5YzgzZmU3NjkyZTY4ZWUxMWYxYTBiNzJlMzRjNTdjMDQ0ODk4ZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-02-06T14:31:56Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-02-06T14:31:56Z"}, "message": "Fix irix6 stdarg failure when last named arg has FP type.\n\n\t* function.c (assign_parms): New variable named_arg, with value\n\tdepending on STRICT_ARGUMENT_NAMING.  Use instead of ! last_named.\n\nFrom-SVN: r17695", "tree": {"sha": "db0957b782b9c8bb27b05fe69bfadbe6ad2a8a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db0957b782b9c8bb27b05fe69bfadbe6ad2a8a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf9c83fe7692e68ee11f1a0b72e34c57c044898d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9c83fe7692e68ee11f1a0b72e34c57c044898d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9c83fe7692e68ee11f1a0b72e34c57c044898d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/comments", "author": null, "committer": null, "parents": [{"sha": "09e4daf5d21651569283f2321509eb1811fca0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e4daf5d21651569283f2321509eb1811fca0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e4daf5d21651569283f2321509eb1811fca0c1"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "b134080651b7bc74c90baeac8d987ce9187521fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf9c83fe7692e68ee11f1a0b72e34c57c044898d", "patch": "@@ -1,3 +1,8 @@\n+Fri Feb  6 14:20:16 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* function.c (assign_parms): New variable named_arg, with value\n+\tdepending on STRICT_ARGUMENT_NAMING.  Use instead of ! last_named.\n+\n Fri Feb  6 14:34:28 1998  Gavin Koch  <gavin@cygnus.com>\n \n \t* mips/t-r3900: New - same as t-ecoff but eliminate "}, {"sha": "d78d08a41bbdd025faae3d04917be209fb960aef", "filename": "gcc/function.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=bf9c83fe7692e68ee11f1a0b72e34c57c044898d", "patch": "@@ -3632,10 +3632,18 @@ assign_parms (fndecl, second_time)\n       tree nominal_type = TREE_TYPE (parm);\n \n       /* Set LAST_NAMED if this is last named arg before some\n-\t anonymous args.  We treat it as if it were anonymous too.  */\n+\t anonymous args.  */\n       int last_named = ((TREE_CHAIN (parm) == 0\n \t\t\t || DECL_NAME (TREE_CHAIN (parm)) == 0)\n \t\t\t&& (stdarg || current_function_varargs));\n+      /* Set NAMED_ARG if this arg should be treated as a named arg.  For\n+\t most machines, if this is a varargs/stdarg function, then we treat\n+\t the last named arg as if it were anonymous too.  */\n+#ifdef STRICT_ARGUMENT_NAMING\n+      int named_arg = 1;\n+#else\n+      int named_arg = ! last_name;\n+#endif\n \n       if (TREE_TYPE (parm) == error_mark_node\n \t  /* This can happen after weird syntax errors\n@@ -3684,7 +3692,7 @@ assign_parms (fndecl, second_time)\n \t  || TREE_ADDRESSABLE (passed_type)\n #ifdef FUNCTION_ARG_PASS_BY_REFERENCE\n \t  || FUNCTION_ARG_PASS_BY_REFERENCE (args_so_far, passed_mode,\n-\t\t\t\t\t      passed_type, ! last_named)\n+\t\t\t\t\t      passed_type, named_arg)\n #endif\n \t  )\n \t{\n@@ -3704,10 +3712,10 @@ assign_parms (fndecl, second_time)\n \t 0 means it arrives on the stack.  */\n #ifdef FUNCTION_INCOMING_ARG\n       entry_parm = FUNCTION_INCOMING_ARG (args_so_far, promoted_mode,\n-\t\t\t\t\t  passed_type, ! last_named);\n+\t\t\t\t\t  passed_type, named_arg);\n #else\n       entry_parm = FUNCTION_ARG (args_so_far, promoted_mode,\n-\t\t\t\t passed_type, ! last_named);\n+\t\t\t\t passed_type, named_arg);\n #endif\n \n       if (entry_parm == 0)\n@@ -3753,12 +3761,12 @@ assign_parms (fndecl, second_time)\n #ifdef FUNCTION_INCOMING_ARG\n \t\t\t   FUNCTION_INCOMING_ARG (args_so_far, promoted_mode,\n \t\t\t\t\t\t  passed_type,\n-\t\t\t\t\t\t  (! last_named\n+\t\t\t\t\t\t  (named_arg\n \t\t\t\t\t\t   || varargs_setup)) != 0,\n #else\n \t\t\t   FUNCTION_ARG (args_so_far, promoted_mode,\n \t\t\t\t\t passed_type,\n-\t\t\t\t\t ! last_named || varargs_setup) != 0,\n+\t\t\t\t\t named_arg || varargs_setup) != 0,\n #endif\n #endif\n \t\t\t   fndecl, &stack_args_size, &stack_offset, &arg_size);\n@@ -3799,7 +3807,7 @@ assign_parms (fndecl, second_time)\n       if (entry_parm)\n \t{\n \t  int nregs = FUNCTION_ARG_PARTIAL_NREGS (args_so_far, promoted_mode,\n-\t\t\t\t\t\t  passed_type, ! last_named);\n+\t\t\t\t\t\t  passed_type, named_arg);\n \n \t  if (nregs > 0)\n \t    {\n@@ -3864,7 +3872,7 @@ assign_parms (fndecl, second_time)\n       /* Update info on where next arg arrives in registers.  */\n \n       FUNCTION_ARG_ADVANCE (args_so_far, promoted_mode,\n-\t\t\t    passed_type, ! last_named);\n+\t\t\t    passed_type, named_arg);\n \n       /* If this is our second time through, we are done with this parm.  */\n       if (second_time)\n@@ -4106,7 +4114,7 @@ assign_parms (fndecl, second_time)\n \t\t   && FUNCTION_ARG_CALLEE_COPIES (args_so_far,\n \t\t\t\t\t\t  TYPE_MODE (DECL_ARG_TYPE (parm)),\n \t\t\t\t\t\t  DECL_ARG_TYPE (parm),\n-\t\t\t\t\t\t  ! last_named)\n+\t\t\t\t\t\t  named_arg)\n \t\t   && ! TREE_ADDRESSABLE (DECL_ARG_TYPE (parm)))\n \t    {\n \t      rtx copy;"}, {"sha": "1715579f6fd42c84cee13984d731f7739975a82f", "filename": "gcc/testsuite/gcc.c-torture/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2FChangeLog?ref=bf9c83fe7692e68ee11f1a0b72e34c57c044898d", "patch": "@@ -1,3 +1,7 @@\n+Fri Feb  6 14:30:48 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* execute/980205.c: New test.\n+\n Mon Dec  8 23:55:26 1997  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* noncompile/noncompile.exp (921102-1.c): Fixed comment."}, {"sha": "da15d3c4dd7408a830e23d9612e6525d020a6ef9", "filename": "gcc/testsuite/gcc.c-torture/execute/980205.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980205.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9c83fe7692e68ee11f1a0b72e34c57c044898d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980205.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980205.c?ref=bf9c83fe7692e68ee11f1a0b72e34c57c044898d", "patch": "@@ -0,0 +1,20 @@\n+#include <stdarg.h>\n+\n+void fdouble (double one, ...)\n+{\n+  double value;\n+  va_list ap;\n+\n+  va_start (ap, one);\n+  value = va_arg (ap, double);\n+  va_end (ap);\n+\n+  if (one != 1.0 || value != 2.0)\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  fdouble (1.0, 2.0);\n+  exit (0);\n+}"}]}