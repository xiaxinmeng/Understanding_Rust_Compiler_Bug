{"sha": "0621cf3c78ee4e26cdb44bdfcb40677028280d5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyMWNmM2M3OGVlNGUyNmNkYjQ0YmRmY2I0MDY3NzAyODI4MGQ1ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@linux.vnet.ibm.com", "date": "2014-02-07T14:52:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-02-07T14:52:13Z"}, "message": "s390.c (s390_restore_gprs_from_fprs): Add REG_CFA_RESTORE notes to each restore.\n\ngcc/\n\t* config/s390/s390.c (s390_restore_gprs_from_fprs): Add REG_CFA_RESTORE\n\tnotes to each restore.  Also add REG_CFA_DEF_CFA when restoring %r15.\n\t(s390_optimize_prologue): Don't clear RTX_FRAME_RELATED_P.  Update the\n\tREG_CFA_RESTORE list when deciding not to restore a register.\n\nFrom-SVN: r207604", "tree": {"sha": "5601d0e463dad5b901a98f46316a40dd7c805ac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5601d0e463dad5b901a98f46316a40dd7c805ac9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0621cf3c78ee4e26cdb44bdfcb40677028280d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0621cf3c78ee4e26cdb44bdfcb40677028280d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0621cf3c78ee4e26cdb44bdfcb40677028280d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0621cf3c78ee4e26cdb44bdfcb40677028280d5d/comments", "author": null, "committer": null, "parents": [{"sha": "4099494d5eeec55b73dd256894e2c1bd6efcf936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4099494d5eeec55b73dd256894e2c1bd6efcf936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4099494d5eeec55b73dd256894e2c1bd6efcf936"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "0d0f8871548980705fae26a63380eae7bda1eb96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621cf3c78ee4e26cdb44bdfcb40677028280d5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621cf3c78ee4e26cdb44bdfcb40677028280d5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0621cf3c78ee4e26cdb44bdfcb40677028280d5d", "patch": "@@ -1,3 +1,10 @@\n+2014-02-07  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_restore_gprs_from_fprs): Add REG_CFA_RESTORE\n+\tnotes to each restore.  Also add REG_CFA_DEF_CFA when restoring %r15.\n+\t(s390_optimize_prologue): Don't clear RTX_FRAME_RELATED_P.  Update the\n+\tREG_CFA_RESTORE list when deciding not to restore a register.\n+\n 2014-02-07  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c: Include tree-pass.h and context.h."}, {"sha": "2d6f8d0be7dee5e2b2e55a5cfbae3da0437e635b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0621cf3c78ee4e26cdb44bdfcb40677028280d5d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0621cf3c78ee4e26cdb44bdfcb40677028280d5d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=0621cf3c78ee4e26cdb44bdfcb40677028280d5d", "patch": "@@ -8610,11 +8610,11 @@ s390_restore_gprs_from_fprs (void)\n \t    emit_move_insn (gen_rtx_REG (DImode, i),\n \t\t\t    gen_rtx_REG (DImode, cfun_gpr_save_slot (i)));\n \t  df_set_regs_ever_live (i, true);\n-\t  /* The frame related flag is only required on the save\n-\t     operations.  We nevertheless set it also for the restore\n-\t     in order to recognize these instructions in\n-\t     s390_optimize_prologue.  The flag will then be\n-\t     deleted.  */\n+\t  add_reg_note (insn, REG_CFA_RESTORE, gen_rtx_REG (DImode, i));\n+\t  if (i == STACK_POINTER_REGNUM)\n+\t    add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\t  plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t STACK_POINTER_OFFSET));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n     }\n@@ -10854,12 +10854,6 @@ s390_optimize_prologue (void)\n \t      || call_really_used_regs[gpr_regno])\n \t    continue;\n \n-\t  /* For restores we have to revert the frame related flag\n-\t     since no debug info is supposed to be generated for\n-\t     these.  */\n-\t  if (dest_regno == gpr_regno)\n-\t    RTX_FRAME_RELATED_P (insn) = 0;\n-\n \t  /* It must not happen that what we once saved in an FPR now\n \t     needs a stack slot.  */\n \t  gcc_assert (cfun_gpr_save_slot (gpr_regno) != -1);\n@@ -10942,8 +10936,6 @@ s390_optimize_prologue (void)\n \t  if (GET_CODE (base) != REG || off < 0)\n \t    continue;\n \n-\t  RTX_FRAME_RELATED_P (insn) = 0;\n-\n \t  if (cfun_frame_layout.first_restore_gpr != -1\n \t      && (cfun_frame_layout.first_restore_gpr < first\n \t\t  || cfun_frame_layout.last_restore_gpr > last))\n@@ -10961,8 +10953,19 @@ s390_optimize_prologue (void)\n \t\t\t\t\t      - first) * UNITS_PER_LONG,\n \t\t\t\t       cfun_frame_layout.first_restore_gpr,\n \t\t\t\t       cfun_frame_layout.last_restore_gpr);\n-\t      RTX_FRAME_RELATED_P (new_insn) = 0;\n+\n+\t      /* Remove REG_CFA_RESTOREs for registers that we no\n+\t\t longer need to save.  */\n+\t      REG_NOTES (new_insn) = REG_NOTES (insn);\n+\t      for (rtx *ptr = &REG_NOTES (new_insn); *ptr; )\n+\t\tif (REG_NOTE_KIND (*ptr) == REG_CFA_RESTORE\n+\t\t    && ((int) REGNO (XEXP (*ptr, 0))\n+\t\t\t< cfun_frame_layout.first_restore_gpr))\n+\t\t  *ptr = XEXP (*ptr, 1);\n+\t\telse\n+\t\t  ptr = &XEXP (*ptr, 1);\n \t      new_insn = emit_insn_before (new_insn, insn);\n+\t      RTX_FRAME_RELATED_P (new_insn) = 1;\n \t      INSN_ADDRESSES_NEW (new_insn, -1);\n \t    }\n \n@@ -10984,8 +10987,6 @@ s390_optimize_prologue (void)\n \t  if (GET_CODE (base) != REG || off < 0)\n \t    continue;\n \n-\t  RTX_FRAME_RELATED_P (insn) = 0;\n-\n \t  if (REGNO (base) != STACK_POINTER_REGNUM\n \t      && REGNO (base) != HARD_FRAME_POINTER_REGNUM)\n \t    continue;"}]}