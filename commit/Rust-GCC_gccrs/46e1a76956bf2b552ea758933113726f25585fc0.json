{"sha": "46e1a76956bf2b552ea758933113726f25585fc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlMWE3Njk1NmJmMmI1NTJlYTc1ODkzMzExMzcyNmYyNTU4NWZjMA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2012-03-14T17:58:35Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2012-03-14T17:58:35Z"}, "message": "Remove non-GAS non-ELF support in alpha backend\n\n\t* config/alpha/alpha.c [HAVE_STAMP_H]: Remove.\n\t(alpha_file_start) [MS_STAMP]: Remove.\n\n\t* config/alpha/elf.h (TARGET_GAS): Remove.\n\t* config/alpha/freebsd.h (TARGET_DEFAULT): Remove.\n\t* config/alpha/linux.h (TARGET_DEFAULT): Remove.\n\t* config/alpha/netbsd.h (TARGET_DEFAULT): Remove.\n\t* config/alpha/vms.h (TARGET_DEFAULT): Remove.\n\t* config.gcc (alpha*-*-linux*): Remove target_cpu_default.\n\t(alpha*-*-freebsd*): Likewise.\n\t(alpha*-*-netbsd*): Likewise.\n\t(alpha*-*-openbsd*): Likewise.\n\t(alpha*-*-*): Remove target_cpu_default2.\n\t* config/alpha/alpha.c (alpha_output_filename): Remove !TARGET_GAS\n\thandling.\n\t* config/alpha/alpha.h (TARGET_AS_CAN_SUBTRACT_LABELS): Remove.\n\t(TARGET_AS_SLASH_BEFORE_SUFFIX): Remove.\n\t* config/alpha/alpha.c (print_operand): Always assume\n\tTARGET_AS_SLASH_BEFORE_SUFFIX.\n\t* config/alpha/alpha.md (\"*builtin_setjmp_receiver_er_sl_1\"):\n\tRemove TARGET_AS_CAN_SUBTRACT_LABELS.\n\t(\"*builtin_setjmp_receiver_er_1\"): Remove.\n\t* config/alpha/alpha.opt (malpha-as): Remove.\n\t(mgas): Ignore.\n\t* doc/invoke.texi (Option Summary, DEC Alpha Options): Remove\n\t-malpha-as, -mgas.\n\tRemove DEC Unix reference.\n\n\t* config/alpha/alpha.h (OBJECT_FORMAT_COFF): Remove.\n\t(EXTENDED_COFF): Remove.\n\t* config/alpha/elf.h (OBJECT_FORMAT_COFF): Don't undef.\n\t(EXTENDED_COFF): Don't undef.\n\t* config/alpha/alpha.c (alpha_file_start): Always assume\n\tOBJECT_FORMAT_ELF.\n\tDon't set targetm.asm_file_start_file_directive.\n\t[!OBJECT_FORMAT_ELF]: Remove.\n\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Remove.\n\n\t* config/alpha/alpha.h (SDB_DEBUGGING_INFO): Remove.\n\t(DBX_DEBUGGING_INFO): Remove.\n\t(MIPS_DEBUGGING_INFO): Remove.\n\t(PREFERRED_DEBUGGING_TYPE): Remove.\n\t(DBX_OUTPUT_SOURCE_LINE): Remove.\n\t(SDB_OUTPUT_SOURCE_LINE): Remove.\n\t(DBX_CONTIN_LENGTH): Remove.\n\t(NO_DBX_FUNCTION_END): Remove.\n\t(ASM_STABS_OP): Remove.\n\t(ASM_STABN_OP): Remove.\n\t(ASM_STABD_OP): Remove.\n\t(SDB_ALLOW_FORWARD_REFERENCES): Remove.\n\t(SDB_ALLOW_UNKNOWN_REFERENCES): Remove.\n\t(PUT_SDB_DEF): Remove.\n\t(PUT_SDB_PLAIN_DEF): Remove.\n\t(PUT_SDB_TYPE): Remove.\n\t(sdb_label_count): Remove.\n\t(PUT_SDB_BLOCK_START): Remove.\n\t(PUT_SDB_BLOCK_END): Remove.\n\t(PUT_SDB_FUNCTION_START): Remove.\n\t(PUT_SDB_FUNCTION_END): Remove.\n\t(PUT_SDB_EPILOGUE_END): Remove.\n\t* config/alpha/elf.h (SDB_DEBUGGING_INFO): Don't undef.\n\t(MIPS_DEBUGGING_INFO): Don't undef.\n\t(DBX_DEBUGGING_INFO): Don't undef.\n\t* config/alpha/vms.h (SDB_DEBUGGING_INFO): Don't undef.\n\t(MIPS_DEBUGGING_INFO): Don't undef.\n\t(DBX_DEBUGGING_INFO): Don't undef.\n\t* config/alpha/freebsd.h (DBX_CONTIN_CHAR): Remove.\n\t* config/alpha/alpha.c (alpha_option_override): Remove SDB_DEBUG\n\thandling.\n\t(alpha_start_function): Likewise.\n\t(sdb_label_count): Remove.\n\t(alpha_output_filename): Remove DBX_DEBUG handling.\n\t(alpha_file_start): Likewise.\n\nFrom-SVN: r185394", "tree": {"sha": "5566134b7f4595dec17e1ceefb39ddf56e98922b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5566134b7f4595dec17e1ceefb39ddf56e98922b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46e1a76956bf2b552ea758933113726f25585fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e1a76956bf2b552ea758933113726f25585fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e1a76956bf2b552ea758933113726f25585fc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e1a76956bf2b552ea758933113726f25585fc0/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7888f2660ec77865927a6c2e2f48ca357e610d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7888f2660ec77865927a6c2e2f48ca357e610d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7888f2660ec77865927a6c2e2f48ca357e610d34"}], "stats": {"total": 340, "additions": 94, "deletions": 246}, "files": [{"sha": "118a291872c8a529893fdb81f4e810474c2a7e58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -1,3 +1,79 @@\n+2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/alpha/alpha.c [HAVE_STAMP_H]: Remove.\n+\t(alpha_file_start) [MS_STAMP]: Remove.\n+\n+\t* config/alpha/elf.h (TARGET_GAS): Remove.\n+\t* config/alpha/freebsd.h (TARGET_DEFAULT): Remove.\n+\t* config/alpha/linux.h (TARGET_DEFAULT): Remove.\n+\t* config/alpha/netbsd.h (TARGET_DEFAULT): Remove.\n+\t* config/alpha/vms.h (TARGET_DEFAULT): Remove.\n+\t* config.gcc (alpha*-*-linux*): Remove target_cpu_default.\n+\t(alpha*-*-freebsd*): Likewise.\n+\t(alpha*-*-netbsd*): Likewise.\n+\t(alpha*-*-openbsd*): Likewise.\n+\t(alpha*-*-*): Remove target_cpu_default2.\n+\t* config/alpha/alpha.c (alpha_output_filename): Remove !TARGET_GAS\n+\thandling.\n+\t* config/alpha/alpha.h (TARGET_AS_CAN_SUBTRACT_LABELS): Remove.\n+\t(TARGET_AS_SLASH_BEFORE_SUFFIX): Remove.\n+\t* config/alpha/alpha.c (print_operand): Always assume\n+\tTARGET_AS_SLASH_BEFORE_SUFFIX.\n+\t* config/alpha/alpha.md (\"*builtin_setjmp_receiver_er_sl_1\"):\n+\tRemove TARGET_AS_CAN_SUBTRACT_LABELS.\n+\t(\"*builtin_setjmp_receiver_er_1\"): Remove.\n+\t* config/alpha/alpha.opt (malpha-as): Remove.\n+\t(mgas): Ignore.\n+\t* doc/invoke.texi (Option Summary, DEC Alpha Options): Remove\n+\t-malpha-as, -mgas.\n+\tRemove DEC Unix reference.\n+\n+\t* config/alpha/alpha.h (OBJECT_FORMAT_COFF): Remove.\n+\t(EXTENDED_COFF): Remove.\n+\t* config/alpha/elf.h (OBJECT_FORMAT_COFF): Don't undef.\n+\t(EXTENDED_COFF): Don't undef.\n+\t* config/alpha/alpha.c (alpha_file_start): Always assume\n+\tOBJECT_FORMAT_ELF.\n+\tDon't set targetm.asm_file_start_file_directive.\n+\t[!OBJECT_FORMAT_ELF]: Remove.\n+\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Remove.\n+\n+\t* config/alpha/alpha.h (SDB_DEBUGGING_INFO): Remove.\n+\t(DBX_DEBUGGING_INFO): Remove.\n+\t(MIPS_DEBUGGING_INFO): Remove.\n+\t(PREFERRED_DEBUGGING_TYPE): Remove.\n+\t(DBX_OUTPUT_SOURCE_LINE): Remove.\n+\t(SDB_OUTPUT_SOURCE_LINE): Remove.\n+\t(DBX_CONTIN_LENGTH): Remove.\n+\t(NO_DBX_FUNCTION_END): Remove.\n+\t(ASM_STABS_OP): Remove.\n+\t(ASM_STABN_OP): Remove.\n+\t(ASM_STABD_OP): Remove.\n+\t(SDB_ALLOW_FORWARD_REFERENCES): Remove.\n+\t(SDB_ALLOW_UNKNOWN_REFERENCES): Remove.\n+\t(PUT_SDB_DEF): Remove.\n+\t(PUT_SDB_PLAIN_DEF): Remove.\n+\t(PUT_SDB_TYPE): Remove.\n+\t(sdb_label_count): Remove.\n+\t(PUT_SDB_BLOCK_START): Remove.\n+\t(PUT_SDB_BLOCK_END): Remove.\n+\t(PUT_SDB_FUNCTION_START): Remove.\n+\t(PUT_SDB_FUNCTION_END): Remove.\n+\t(PUT_SDB_EPILOGUE_END): Remove.\n+\t* config/alpha/elf.h (SDB_DEBUGGING_INFO): Don't undef.\n+\t(MIPS_DEBUGGING_INFO): Don't undef.\n+\t(DBX_DEBUGGING_INFO): Don't undef.\n+\t* config/alpha/vms.h (SDB_DEBUGGING_INFO): Don't undef.\n+\t(MIPS_DEBUGGING_INFO): Don't undef.\n+\t(DBX_DEBUGGING_INFO): Don't undef.\n+\t* config/alpha/freebsd.h (DBX_CONTIN_CHAR): Remove.\n+\t* config/alpha/alpha.c (alpha_option_override): Remove SDB_DEBUG\n+\thandling.\n+\t(alpha_start_function): Likewise.\n+\t(sdb_label_count): Remove.\n+\t(alpha_output_filename): Remove DBX_DEBUG handling.\n+\t(alpha_file_start): Likewise.\n+\n 2012-03-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config.gcc (enable_obsolete): Remove *-*-solaris2.8*."}, {"sha": "ebeb5e6d67e47d1778b27870cc409e006cac367d", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -761,25 +761,21 @@ case ${target} in\n alpha*-*-linux*)\n \ttm_file=\"${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h glibc-stdint.h\"\n \textra_options=\"${extra_options} alpha/elf.opt\"\n-\ttarget_cpu_default=\"MASK_GAS\"\n \t;;\n alpha*-*-freebsd*)\n \ttm_file=\"${tm_file} ${fbsd_tm_file} alpha/elf.h alpha/freebsd.h\"\n \textra_options=\"${extra_options} alpha/elf.opt\"\n-\ttarget_cpu_default=\"MASK_GAS\"\n \t;;\n alpha*-*-netbsd*)\n \ttm_file=\"${tm_file} netbsd.h alpha/elf.h netbsd-elf.h alpha/netbsd.h\"\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt \\\n \t\t       alpha/elf.opt\"\n-\ttarget_cpu_default=\"MASK_GAS\"\n \t;;\n alpha*-*-openbsd*)\n \ttm_defines=\"${tm_defines} OBSD_HAS_DECLARE_FUNCTION_NAME OBSD_HAS_DECLARE_FUNCTION_SIZE OBSD_HAS_DECLARE_OBJECT\"\n \ttm_file=\"alpha/alpha.h alpha/elf.h openbsd.h openbsd-stdint.h alpha/openbsd.h openbsd-libpthread.h\"\n \textra_options=\"${extra_options} openbsd.opt alpha/elf.opt\"\n \t# default x-alpha is only appropriate for dec-osf.\n-\ttarget_cpu_default=\"MASK_GAS\"\n \t;;\n alpha*-dec-*vms*)\n \ttm_file=\"${tm_file} vms/vms.h alpha/vms.h\"\n@@ -3407,13 +3403,6 @@ esac\n # Set some miscellaneous flags for particular targets.\n target_cpu_default2=\n case ${target} in\n-\talpha*-*-*)\n-\t\tif test x$gas = xyes\n-\t\tthen\n-\t\t\ttarget_cpu_default2=\"MASK_GAS\"\n-\t\tfi\n-\t\t;;\n-\n \tarm*-*-*)\n \t\tif test x$target_cpu_cname = x\n \t\tthen"}, {"sha": "46c620b93295a0325fcebca2afc4eac4e39a9939", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 7, "deletions": 66, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -428,9 +428,8 @@ alpha_option_override (void)\n     target_flags &= ~MASK_SMALL_DATA;\n \n   /* Align labels and loops for optimal branching.  */\n-  /* ??? Kludge these by not doing anything if we don't optimize and also if\n-     we are writing ECOFF symbols to work around a bug in DEC's assembler.  */\n-  if (optimize > 0 && write_symbols != SDB_DEBUG)\n+  /* ??? Kludge these by not doing anything if we don't optimize.  */\n+  if (optimize > 0)\n     {\n       if (align_loops <= 0)\n \talign_loops = 16;\n@@ -4988,8 +4987,7 @@ print_operand (FILE *file, rtx x, int code)\n \tconst char *round = get_round_mode_suffix ();\n \n \tif (trap || round)\n-\t  fprintf (file, (TARGET_AS_SLASH_BEFORE_SUFFIX ? \"/%s%s\" : \"%s%s\"),\n-\t\t   (trap ? trap : \"\"), (round ? round : \"\"));\n+\t  fprintf (file, \"/%s%s\", (trap ? trap : \"\"), (round ? round : \"\"));\n \tbreak;\n       }\n \n@@ -7889,27 +7887,6 @@ alpha_start_function (FILE *file, const char *fnname,\n \n   alpha_sa_mask (&imask, &fmask);\n \n-  /* Ecoff can handle multiple .file directives, so put out file and lineno.\n-     We have to do that before the .ent directive as we cannot switch\n-     files within procedures with native ecoff because line numbers are\n-     linked to procedure descriptors.\n-     Outputting the lineno helps debugging of one line functions as they\n-     would otherwise get no line number at all. Please note that we would\n-     like to put out last_linenum from final.c, but it is not accessible.  */\n-\n-  if (write_symbols == SDB_DEBUG)\n-    {\n-#ifdef ASM_OUTPUT_SOURCE_FILENAME\n-      ASM_OUTPUT_SOURCE_FILENAME (file,\n-\t\t\t\t  DECL_SOURCE_FILE (current_function_decl));\n-#endif\n-#ifdef SDB_OUTPUT_SOURCE_LINE\n-      if (debug_info_level != DINFO_LEVEL_TERSE)\n-        SDB_OUTPUT_SOURCE_LINE (file,\n-\t\t\t\tDECL_SOURCE_LINE (current_function_decl));\n-#endif\n-    }\n-\n   /* Issue function start and label.  */\n   if (TARGET_ABI_OPEN_VMS || !flag_inhibit_size_directive)\n     {\n@@ -8388,11 +8365,6 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n #include \"gstab.h\"\n \n-/* Count the number of sdb related labels are generated (to find block\n-   start and end boundaries).  */\n-\n-int sdb_label_count = 0;\n-\n /* Name of the file containing the current function.  */\n \n static const char *current_function_file = \"\";\n@@ -8417,25 +8389,14 @@ alpha_output_filename (FILE *stream, const char *name)\n       fprintf (stream, \"\\t.file\\t%d \", num_source_filenames);\n       output_quoted_string (stream, name);\n       fprintf (stream, \"\\n\");\n-      if (!TARGET_GAS && write_symbols == DBX_DEBUG)\n-\tfprintf (stream, \"\\t#@stabs\\n\");\n     }\n \n-  else if (write_symbols == DBX_DEBUG)\n-    /* dbxout.c will emit an appropriate .stabs directive.  */\n-    return;\n-\n   else if (name != current_function_file\n \t   && strcmp (name, current_function_file) != 0)\n     {\n-      if (inside_function && ! TARGET_GAS)\n-\tfprintf (stream, \"\\t#.file\\t%d \", num_source_filenames);\n-      else\n-\t{\n-\t  ++num_source_filenames;\n-\t  current_function_file = name;\n-\t  fprintf (stream, \"\\t.file\\t%d \", num_source_filenames);\n-\t}\n+      ++num_source_filenames;\n+      current_function_file = name;\n+      fprintf (stream, \"\\t.file\\t%d \", num_source_filenames);\n \n       output_quoted_string (stream, name);\n       fprintf (stream, \"\\n\");\n@@ -9374,24 +9335,10 @@ alpha_reorg (void)\n     }\n }\n \f\n-#ifdef HAVE_STAMP_H\n-#include <stamp.h>\n-#endif\n-\n static void\n alpha_file_start (void)\n {\n-#ifdef OBJECT_FORMAT_ELF\n-  /* If emitting dwarf2 debug information, we cannot generate a .file\n-     directive to start the file, as it will conflict with dwarf2out\n-     file numbers.  So it's only useful when emitting mdebug output.  */\n-  targetm.asm_file_start_file_directive = (write_symbols == DBX_DEBUG);\n-#endif\n-\n   default_file_start ();\n-#ifdef MS_STAMP\n-  fprintf (asm_out_file, \"\\t.verstamp %d %d\\n\", MS_STAMP, LS_STAMP);\n-#endif\n \n   fputs (\"\\t.set noreorder\\n\", asm_out_file);\n   fputs (\"\\t.set volatile\\n\", asm_out_file);\n@@ -9418,7 +9365,6 @@ alpha_file_start (void)\n     }\n }\n \n-#ifdef OBJECT_FORMAT_ELF\n /* Since we don't have a .dynbss section, we should not allow global\n    relocations in the .rodata section.  */\n \n@@ -9458,7 +9404,6 @@ alpha_elf_section_type_flags (tree decl, const char *name, int reloc)\n   flags |= default_section_type_flags (decl, name, reloc);\n   return flags;\n }\n-#endif /* OBJECT_FORMAT_ELF */\n \f\n /* Structure to collect function names for final output in link section.  */\n /* Note that items marked with GTY can't be ifdef'ed out.  */\n@@ -9741,7 +9686,7 @@ alpha_conditional_register_usage (void)\n \n /* Default unaligned ops are provided for ELF systems.  To get unaligned\n    data for non-ELF systems, we have to turn off auto alignment.  */\n-#if !defined (OBJECT_FORMAT_ELF) || TARGET_ABI_OPEN_VMS\n+#if TARGET_ABI_OPEN_VMS\n #undef TARGET_ASM_UNALIGNED_HI_OP\n #define TARGET_ASM_UNALIGNED_HI_OP \"\\t.align 0\\n\\t.word\\t\"\n #undef TARGET_ASM_UNALIGNED_SI_OP\n@@ -9750,14 +9695,12 @@ alpha_conditional_register_usage (void)\n #define TARGET_ASM_UNALIGNED_DI_OP \"\\t.align 0\\n\\t.quad\\t\"\n #endif\n \n-#ifdef OBJECT_FORMAT_ELF\n #undef  TARGET_ASM_RELOC_RW_MASK\n #define TARGET_ASM_RELOC_RW_MASK  alpha_elf_reloc_rw_mask\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define\tTARGET_ASM_SELECT_RTX_SECTION  alpha_elf_select_rtx_section\n #undef  TARGET_SECTION_TYPE_FLAGS\n #define TARGET_SECTION_TYPE_FLAGS  alpha_elf_section_type_flags\n-#endif\n \n #undef TARGET_ASM_FUNCTION_END_PROLOGUE\n #define TARGET_ASM_FUNCTION_END_PROLOGUE alpha_output_function_end_prologue\n@@ -9770,8 +9713,6 @@ alpha_conditional_register_usage (void)\n \n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START alpha_file_start\n-#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n-#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST alpha_adjust_cost"}, {"sha": "01ca3c248399e2843a258b6eddc98f199d10b024", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -146,12 +146,6 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define TARGET_ABI_OPEN_VMS\t0\n #define TARGET_ABI_OSF\t\t(!TARGET_ABI_OPEN_VMS)\n \n-#ifndef TARGET_AS_CAN_SUBTRACT_LABELS\n-#define TARGET_AS_CAN_SUBTRACT_LABELS TARGET_GAS\n-#endif\n-#ifndef TARGET_AS_SLASH_BEFORE_SUFFIX\n-#define TARGET_AS_SLASH_BEFORE_SUFFIX TARGET_GAS\n-#endif\n #ifndef TARGET_CAN_FAULT_IN_PROLOGUE\n #define TARGET_CAN_FAULT_IN_PROLOGUE 0\n #endif\n@@ -1154,24 +1148,11 @@ do {\t\t\t\t\t\t\\\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) \\\n   print_operand_address((FILE), (ADDR))\n \f\n-/* Tell collect that the object format is ECOFF.  */\n-#define OBJECT_FORMAT_COFF\n-#define EXTENDED_COFF\n-\n /* If we use NM, pass -g to it so it only lists globals.  */\n #define NM_FLAGS \"-pg\"\n \n /* Definitions for debugging.  */\n \n-#define SDB_DEBUGGING_INFO 1\t\t/* generate info for mips-tfile */\n-#define DBX_DEBUGGING_INFO 1\t\t/* generate embedded stabs */\n-#define MIPS_DEBUGGING_INFO 1\t\t/* MIPS specific debugging info */\n-\n-#ifndef PREFERRED_DEBUGGING_TYPE\t/* assume SDB_DEBUGGING_INFO */\n-#define PREFERRED_DEBUGGING_TYPE  SDB_DEBUG\n-#endif\n-\n-\n /* Correct the offset of automatic variables and arguments.  Note that\n    the Alpha debug format wants all automatic variables and arguments\n    to be in terms of two different offsets from the virtual frame pointer,\n@@ -1191,99 +1172,11 @@ extern long alpha_auto_offset;\n   ((GET_CODE (X) == PLUS ? INTVAL (XEXP (X, 1)) : 0) + alpha_auto_offset)\n #define DEBUGGER_ARG_OFFSET(OFFSET, X) (OFFSET + alpha_arg_offset)\n \n-/* mips-tfile doesn't understand .stabd directives.  */\n-#define DBX_OUTPUT_SOURCE_LINE(STREAM, LINE, COUNTER) do {\t\\\n-  dbxout_begin_stabn_sline (LINE);\t\t\t\t\\\n-  dbxout_stab_value_internal_label (\"LM\", &COUNTER);\t\t\\\n-} while (0)\n-\n-/* We want to use MIPS-style .loc directives for SDB line numbers.  */\n-extern int num_source_filenames;\n-#define SDB_OUTPUT_SOURCE_LINE(STREAM, LINE)\t\\\n-  fprintf (STREAM, \"\\t.loc\\t%d %d\\n\", num_source_filenames, LINE)\n-\n #define ASM_OUTPUT_SOURCE_FILENAME(STREAM, NAME)\t\t\t\\\n   alpha_output_filename (STREAM, NAME)\n \n-/* mips-tfile.c limits us to strings of one page.  We must underestimate this\n-   number, because the real length runs past this up to the next\n-   continuation point.  This is really a dbxout.c bug.  */\n-#define DBX_CONTIN_LENGTH 3000\n-\n /* By default, turn on GDB extensions.  */\n #define DEFAULT_GDB_EXTENSIONS 1\n \n-/* Stabs-in-ECOFF can't handle dbxout_function_end().  */\n-#define NO_DBX_FUNCTION_END 1\n-\n-/* If we are smuggling stabs through the ALPHA ECOFF object\n-   format, put a comment in front of the .stab<x> operation so\n-   that the ALPHA assembler does not choke.  The mips-tfile program\n-   will correctly put the stab into the object file.  */\n-\n-#define ASM_STABS_OP\t((TARGET_GAS) ? \"\\t.stabs\\t\" : \" #.stabs\\t\")\n-#define ASM_STABN_OP\t((TARGET_GAS) ? \"\\t.stabn\\t\" : \" #.stabn\\t\")\n-#define ASM_STABD_OP\t((TARGET_GAS) ? \"\\t.stabd\\t\" : \" #.stabd\\t\")\n-\n-/* Forward references to tags are allowed.  */\n-#define SDB_ALLOW_FORWARD_REFERENCES\n-\n-/* Unknown tags are also allowed.  */\n-#define SDB_ALLOW_UNKNOWN_REFERENCES\n-\n-#define PUT_SDB_DEF(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  fprintf (asm_out_file, \"\\t%s.def\\t\",\t\t\t\\\n-\t   (TARGET_GAS) ? \"\" : \"#\");\t\t\t\\\n-  ASM_OUTPUT_LABELREF (asm_out_file, a); \t\t\\\n-  fputc (';', asm_out_file);\t\t\t\t\\\n-} while (0)\n-\n-#define PUT_SDB_PLAIN_DEF(a)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  fprintf (asm_out_file, \"\\t%s.def\\t.%s;\",\t\t\\\n-\t   (TARGET_GAS) ? \"\" : \"#\", (a));\t\t\\\n-} while (0)\n-\n-#define PUT_SDB_TYPE(a)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  fprintf (asm_out_file, \"\\t.type\\t0x%x;\", (a));\t\\\n-} while (0)\n-\n-/* For block start and end, we create labels, so that\n-   later we can figure out where the correct offset is.\n-   The normal .ent/.end serve well enough for functions,\n-   so those are just commented out.  */\n-\n-extern int sdb_label_count;\t\t/* block start/end next label # */\n-\n-#define PUT_SDB_BLOCK_START(LINE)\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  fprintf (asm_out_file,\t\t\t\t\\\n-\t   \"$Lb%d:\\n\\t%s.begin\\t$Lb%d\\t%d\\n\",\t\t\\\n-\t   sdb_label_count,\t\t\t\t\\\n-\t   (TARGET_GAS) ? \"\" : \"#\",\t\t\t\\\n-\t   sdb_label_count,\t\t\t\t\\\n-\t   (LINE));\t\t\t\t\t\\\n-  sdb_label_count++;\t\t\t\t\t\\\n-} while (0)\n-\n-#define PUT_SDB_BLOCK_END(LINE)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  fprintf (asm_out_file,\t\t\t\t\\\n-\t   \"$Le%d:\\n\\t%s.bend\\t$Le%d\\t%d\\n\",\t\t\\\n-\t   sdb_label_count,\t\t\t\t\\\n-\t   (TARGET_GAS) ? \"\" : \"#\",\t\t\t\\\n-\t   sdb_label_count,\t\t\t\t\\\n-\t   (LINE));\t\t\t\t\t\\\n-  sdb_label_count++;\t\t\t\t\t\\\n-} while (0)\n-\n-#define PUT_SDB_FUNCTION_START(LINE)\n-\n-#define PUT_SDB_FUNCTION_END(LINE)\n-\n-#define PUT_SDB_EPILOGUE_END(NAME) ((void)(NAME))\n-\n /* The system headers under Alpha systems are generally C++-aware.  */\n #define NO_IMPLICIT_EXTERN_C"}, {"sha": "d090634bb4d6c4632c292444063c359f84b2a1e5", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -5855,15 +5855,9 @@\n \n (define_insn \"*builtin_setjmp_receiver_er_sl_1\"\n   [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPECV_SETJMPR_ER)]\n-  \"TARGET_ABI_OSF && TARGET_EXPLICIT_RELOCS && TARGET_AS_CAN_SUBTRACT_LABELS\"\n+  \"TARGET_ABI_OSF && TARGET_EXPLICIT_RELOCS\"\n   \"lda $27,$LSJ%=-%l0($27)\\n$LSJ%=:\")\n   \n-(define_insn \"*builtin_setjmp_receiver_er_1\"\n-  [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPECV_SETJMPR_ER)]\n-  \"TARGET_ABI_OSF && TARGET_EXPLICIT_RELOCS\"\n-  \"br $27,$LSJ%=\\n$LSJ%=:\"\n-  [(set_attr \"type\" \"ibr\")])\n-\n ;; When flag_reorder_blocks_and_partition is in effect, compiler puts\n ;; exception landing pads in a cold section.  To prevent inter-section offset\n ;; calculation, a jump to original landing pad is emitted in the place of the"}, {"sha": "1ebfa5e43ae7ecab27cc61bba0a587d403a2a8f9", "filename": "gcc/config/alpha/alpha.opt", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Falpha.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Falpha.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.opt?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -1,6 +1,6 @@\n ; Options for the DEC Alpha port of the compiler\n ;\n-; Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2012 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -27,12 +27,8 @@ Target Report Mask(FPREGS)\n Use fp registers\n \n mgas\n-Target RejectNegative Mask(GAS)\n-Assume GAS\n-\n-malpha-as\n-Target RejectNegative InverseMask(GAS)\n-Do not assume GAS\n+Target Ignore\n+Does nothing. Preserved for backward compatibility.\n \n mieee-conformant\n Target RejectNegative Mask(IEEE_CONFORMANT)"}, {"sha": "2e165ec932ce5d3bda8a6826d4ddc982b49beecb", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha w/ELF.\n    Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2007, 2008,\n-   2009, 2010 Free Software Foundation, Inc.\n+   2009, 2010, 2012 Free Software Foundation, Inc.\n    Contributed by Richard Henderson (rth@tamu.edu).\n \n This file is part of GCC.\n@@ -19,15 +19,8 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#undef OBJECT_FORMAT_COFF\n-#undef EXTENDED_COFF\n #define OBJECT_FORMAT_ELF\n \n-/* ??? Move all SDB stuff from alpha.h to osf.h.  */\n-#undef SDB_DEBUGGING_INFO\n-#undef MIPS_DEBUGGING_INFO\n-#undef DBX_DEBUGGING_INFO\n-\n #define DWARF2_DEBUGGING_INFO 1\n \n #undef  PREFERRED_DEBUGGING_TYPE\n@@ -372,10 +365,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  STRING_ASM_OP\n #define STRING_ASM_OP\t\"\\t.string\\t\"\n \n-/* GAS is the only Alpha/ELF assembler.  */\n-#undef  TARGET_GAS\n-#define TARGET_GAS\t(1)\n-\n /* Provide a STARTFILE_SPEC appropriate for ELF.  Here we add the\n    (even more) magical crtbegin.o file which provides part of the\n    support for getting C++ file-scope static object constructed"}, {"sha": "659b27b4d9a33bd89211d6e952b06a783590c507", "filename": "gcc/config/alpha/freebsd.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ffreebsd.h?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for DEC Alpha/AXP running FreeBSD using the ELF format\n-   Copyright (C) 2000, 2002, 2004, 2005, 2007, 2010, 2011\n+   Copyright (C) 2000, 2002, 2004, 2005, 2007, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by David E. O'Brien <obrien@FreeBSD.org> and BSDi.\n \n@@ -56,21 +56,12 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_ELF\t1\n \n-#undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT\t(MASK_FPREGS | MASK_GAS)\n-\n #undef HAS_INIT_SECTION\n \n /* Show that we need a GP when profiling.  */\n #undef  TARGET_PROFILING_NEEDS_GP\n #define TARGET_PROFILING_NEEDS_GP 1\n \n-/* This is the char to use for continuation (in case we need to turn\n-   continuation back on).  */\n-\n-#undef  DBX_CONTIN_CHAR\n-#define DBX_CONTIN_CHAR\t'?'\n-\n /* Don't default to pcc-struct-return, we want to retain compatibility with\n    older FreeBSD releases AND pcc-struct-return may not be reentrant.  */\n "}, {"sha": "88568743cb0ff4479cd0464756eaf3919f1f74f8", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for Alpha Linux-based GNU systems.\n    Copyright (C) 1996, 1997, 1998, 2002, 2003, 2004, 2005, 2006, 2007, 2009,\n-   2010, 2011 Free Software Foundation, Inc.\n+   2010, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Richard Henderson.\n \n This file is part of GCC.\n@@ -20,9 +20,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS)\n-\n #define TARGET_OS_CPP_BUILTINS()\t\t\t\t\\\n     do {\t\t\t\t\t\t\t\\\n \tbuiltin_define (\"__gnu_linux__\");\t\t\t\\"}, {"sha": "352bb5336afc34462ada34ce22a5cdad5517cee5", "filename": "gcc/config/alpha/netbsd.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fnetbsd.h?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for Alpha NetBSD systems.\n-   Copyright (C) 1998, 2002, 2003, 2004, 2005, 2007, 2011\n+   Copyright (C) 1998, 2002, 2003, 2004, 2005, 2007, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -19,9 +19,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS)\n-\n #define TARGET_OS_CPP_BUILTINS()\t\t\\\n     do {\t\t\t\t\t\\\n \tNETBSD_OS_CPP_BUILTINS_ELF();\t\t\\"}, {"sha": "d99457741d15a0161fba0ebc58c064852935e7e3", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -1,6 +1,6 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n    Copyright (C) 1996, 1997, 1998, 2000, 2001, 2002, 2004, 2005, 2007, 2008,\n-   2009, 2010, 2011\n+   2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -43,9 +43,6 @@ along with GCC; see the file COPYING3.  If not see\n         builtin_define (\"__IEEE_FLOAT\");\t\\\n     } while (0)\n \n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_FPREGS | MASK_GAS)\n-\n #define VMS_DEBUG_MAIN_POINTER \"TRANSFER$BREAK$GO\"\n \n #undef PCC_STATIC_STRUCT_RETURN\n@@ -204,10 +201,6 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n #define TARGET_ASM_CONSTRUCTOR  vms_asm_out_constructor\n #define TARGET_ASM_DESTRUCTOR   vms_asm_out_destructor\n \n-#undef SDB_DEBUGGING_INFO\n-#undef MIPS_DEBUGGING_INFO\n-#undef DBX_DEBUGGING_INFO\n-\n #define DWARF2_DEBUGGING_INFO 1\n #define VMS_DEBUGGING_INFO 1\n "}, {"sha": "94bfd239c04ed9805e90a26d548bfebb42f700e9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e1a76956bf2b552ea758933113726f25585fc0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=46e1a76956bf2b552ea758933113726f25585fc0", "patch": "@@ -558,7 +558,7 @@ Objective-C and Objective-C++ Dialects}.\n -mkernel -mone-byte-bool}\n \n @emph{DEC Alpha Options}\n-@gccoptlist{-mno-fp-regs  -msoft-float  -malpha-as  -mgas @gol\n+@gccoptlist{-mno-fp-regs  -msoft-float @gol\n -mieee  -mieee-with-inexact  -mieee-conformant @gol\n -mfp-trap-mode=@var{mode}  -mfp-rounding-mode=@var{mode} @gol\n -mtrap-precision=@var{mode}  -mbuild-constants @gol\n@@ -12212,8 +12212,7 @@ This option marks the generated code as IEEE conformant.  You must not\n use this option unless you also specify @option{-mtrap-precision=i} and either\n @option{-mfp-trap-mode=su} or @option{-mfp-trap-mode=sui}.  Its only effect\n is to emit the line @samp{.eflag 48} in the function prologue of the\n-generated assembly file.  Under DEC Unix, this has the effect that\n-IEEE-conformant math library routines will be linked in.\n+generated assembly file.\n \n @item -mbuild-constants\n @opindex mbuild-constants\n@@ -12229,13 +12228,6 @@ You would typically use this option to build a shared library dynamic\n loader.  Itself a shared library, it must relocate itself in memory\n before it can find the variables and constants in its own data segment.\n \n-@item -malpha-as\n-@itemx -mgas\n-@opindex malpha-as\n-@opindex mgas\n-Select whether to generate code to be assembled by the vendor-supplied\n-assembler (@option{-malpha-as}) or by the GNU assembler @option{-mgas}.\n-\n @item -mbwx\n @itemx -mno-bwx\n @itemx -mcix"}]}