{"sha": "44ae7a002c23ff0ab884350b5f05876ece985387", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRhZTdhMDAyYzIzZmYwYWI4ODQzNTBiNWYwNTg3NmVjZTk4NTM4Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-06-20T08:07:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-06-20T08:07:37Z"}, "message": "[4/n] PR85694: Remove redundant calls to types_compatible_p\n\ntree-vect-patterns.c checked that operands to primitive arithmetic ops\nare compatible with each other and with the result.  The checks date\nback years and have long been redundant with verify_gimple_stmt.\n\n2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Remove\n\tredundant check that the types of a PLUS_EXPR or MULT_EXPR agree.\n\t(vect_recog_sad_pattern): Likewise PLUS_EXPR, ABS_EXPR and MINUS_EXPR.\n\t(vect_recog_widen_mult_pattern): Likewise MULT_EXPR.\n\t(vect_recog_widen_sum_pattern): Likewise PLUS_EXPR.\n\nFrom-SVN: r261787", "tree": {"sha": "e2828bf542a88058b47b46e3fe745a3d77498481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2828bf542a88058b47b46e3fe745a3d77498481"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44ae7a002c23ff0ab884350b5f05876ece985387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ae7a002c23ff0ab884350b5f05876ece985387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ae7a002c23ff0ab884350b5f05876ece985387", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ae7a002c23ff0ab884350b5f05876ece985387/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed7b8123fab1de4d6da98774262c123f6d1226f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7b8123fab1de4d6da98774262c123f6d1226f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7b8123fab1de4d6da98774262c123f6d1226f9"}], "stats": {"total": 28, "additions": 8, "deletions": 20}, "files": [{"sha": "af31f511a3f83d92da659c3eb0dd03cd2f0afda6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ae7a002c23ff0ab884350b5f05876ece985387/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ae7a002c23ff0ab884350b5f05876ece985387/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=44ae7a002c23ff0ab884350b5f05876ece985387", "patch": "@@ -1,3 +1,11 @@\n+2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Remove\n+\tredundant check that the types of a PLUS_EXPR or MULT_EXPR agree.\n+\t(vect_recog_sad_pattern): Likewise PLUS_EXPR, ABS_EXPR and MINUS_EXPR.\n+\t(vect_recog_widen_mult_pattern): Likewise MULT_EXPR.\n+\t(vect_recog_widen_sum_pattern): Likewise PLUS_EXPR.\n+\n 2018-06-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-stmts.c (vectorizable_call): Make sure that we"}, {"sha": "2387a8e1053b0433a4c557bec3347e401b593c17", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ae7a002c23ff0ab884350b5f05876ece985387/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ae7a002c23ff0ab884350b5f05876ece985387/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=44ae7a002c23ff0ab884350b5f05876ece985387", "patch": "@@ -358,9 +358,6 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_in,\n \treturn NULL;\n       oprnd0 = gimple_assign_rhs1 (last_stmt);\n       oprnd1 = gimple_assign_rhs2 (last_stmt);\n-      if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n-\t  || !types_compatible_p (TREE_TYPE (oprnd1), type))\n-        return NULL;\n       stmt = last_stmt;\n \n       if (type_conversion_p (oprnd0, stmt, true, &half_type, &def_stmt,\n@@ -421,9 +418,6 @@ vect_recog_dot_prod_pattern (vec<gimple *> *stmts, tree *type_in,\n \n       oprnd0 = gimple_assign_rhs1 (stmt);\n       oprnd1 = gimple_assign_rhs2 (stmt);\n-      if (!types_compatible_p (TREE_TYPE (oprnd0), prod_type)\n-          || !types_compatible_p (TREE_TYPE (oprnd1), prod_type))\n-        return NULL;\n       if (!type_conversion_p (oprnd0, stmt, true, &half_type0, &def_stmt,\n \t\t\t      &promotion)\n \t  || !promotion)\n@@ -578,9 +572,6 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n \treturn NULL;\n       plus_oprnd0 = gimple_assign_rhs1 (last_stmt);\n       plus_oprnd1 = gimple_assign_rhs2 (last_stmt);\n-      if (!types_compatible_p (TREE_TYPE (plus_oprnd0), sum_type)\n-\t  || !types_compatible_p (TREE_TYPE (plus_oprnd1), sum_type))\n-        return NULL;\n \n       /* The type conversion could be promotion, demotion,\n          or just signed -> unsigned.  */\n@@ -620,8 +611,6 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n     return NULL;\n \n   tree abs_oprnd = gimple_assign_rhs1 (abs_stmt);\n-  if (!types_compatible_p (TREE_TYPE (abs_oprnd), abs_type))\n-    return NULL;\n   if (TYPE_UNSIGNED (abs_type))\n     return NULL;\n \n@@ -655,9 +644,6 @@ vect_recog_sad_pattern (vec<gimple *> *stmts, tree *type_in,\n   tree minus_oprnd0 = gimple_assign_rhs1 (diff_stmt);\n   tree minus_oprnd1 = gimple_assign_rhs2 (diff_stmt);\n \n-  if (!types_compatible_p (TREE_TYPE (minus_oprnd0), abs_type)\n-      || !types_compatible_p (TREE_TYPE (minus_oprnd1), abs_type))\n-    return NULL;\n   if (!type_conversion_p (minus_oprnd0, diff_stmt, false,\n                           &half_type0, &def_stmt, &promotion)\n       || !promotion)\n@@ -862,9 +848,6 @@ vect_recog_widen_mult_pattern (vec<gimple *> *stmts,\n \n   oprnd0 = gimple_assign_rhs1 (last_stmt);\n   oprnd1 = gimple_assign_rhs2 (last_stmt);\n-  if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n-      || !types_compatible_p (TREE_TYPE (oprnd1), type))\n-    return NULL;\n \n   /* Check argument 0.  */\n   if (!type_conversion_p (oprnd0, last_stmt, false, &half_type0, &def_stmt0,\n@@ -1264,9 +1247,6 @@ vect_recog_widen_sum_pattern (vec<gimple *> *stmts, tree *type_in,\n \n   oprnd0 = gimple_assign_rhs1 (last_stmt);\n   oprnd1 = gimple_assign_rhs2 (last_stmt);\n-  if (!types_compatible_p (TREE_TYPE (oprnd0), type)\n-      || !types_compatible_p (TREE_TYPE (oprnd1), type))\n-    return NULL;\n \n   /* So far so good.  Since last_stmt was detected as a (summation) reduction,\n      we know that oprnd1 is the reduction variable (defined by a loop-header"}]}