{"sha": "50a9145ce3ba5fad804d4f3fc77946c7ef79fc33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBhOTE0NWNlM2JhNWZhZDgwNGQ0ZjNmYzc3OTQ2YzdlZjc5ZmMzMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-18T22:01:56Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-03-18T22:01:56Z"}, "message": "current_function_prototype_line): New variables.\n\n(current_function_prototype_file,\ncurrent_function_prototype_line): New variables.\n(start_function): Set them.\n(store_parm_decls): Use them for error and warning messages.\n\nFrom-SVN: r3782", "tree": {"sha": "9629fc6a8dc65ac2d9c2a5d89447f677be867449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9629fc6a8dc65ac2d9c2a5d89447f677be867449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50a9145ce3ba5fad804d4f3fc77946c7ef79fc33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a9145ce3ba5fad804d4f3fc77946c7ef79fc33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a9145ce3ba5fad804d4f3fc77946c7ef79fc33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a9145ce3ba5fad804d4f3fc77946c7ef79fc33/comments", "author": null, "committer": null, "parents": [{"sha": "3e3f5658134438dcfb4ed65f19204cc52faeec16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e3f5658134438dcfb4ed65f19204cc52faeec16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e3f5658134438dcfb4ed65f19204cc52faeec16"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "49d5ba3df421661104be45b032496af558b6d8ea", "filename": "gcc/c-decl.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50a9145ce3ba5fad804d4f3fc77946c7ef79fc33/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50a9145ce3ba5fad804d4f3fc77946c7ef79fc33/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=50a9145ce3ba5fad804d4f3fc77946c7ef79fc33", "patch": "@@ -235,6 +235,11 @@ static tree current_function_parms;\n /* Similar, for last_function_parm_tags.  */\n static tree current_function_parm_tags;\n \n+/* Similar, for the file and line that the prototype came from if this is\n+   an old-style definition.  */\n+static char *current_function_prototype_file;\n+static int current_function_prototype_line;\n+\n /* A list (chain of TREE_LIST nodes) of all LABEL_DECLs in the function\n    that have names.  Here so we can clear out their names' definitions\n    at the end of the function.  */\n@@ -5555,7 +5560,11 @@ start_function (declspecs, declarator, nested)\n       && (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (decl1)))\n \t  == TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (old_decl))))\n       && TYPE_ARG_TYPES (TREE_TYPE (decl1)) == 0)\n-    TREE_TYPE (decl1) = TREE_TYPE (old_decl);\n+    {\n+      TREE_TYPE (decl1) = TREE_TYPE (old_decl);\n+      current_function_prototype_file = DECL_SOURCE_FILE (old_decl);\n+      current_function_prototype_line = DECL_SOURCE_LINE (old_decl);\n+    }\n \n   /* Optionally warn of old-fashioned def with no previous prototype.  */\n   if (warn_strict_prototypes\n@@ -5922,6 +5931,9 @@ store_parm_decls ()\n \t\t  || TYPE_MAIN_VARIANT (TREE_VALUE (type)) == void_type_node)\n \t\t{\n \t\t  error (\"number of arguments doesn't match prototype\");\n+\t\t  error_with_file_and_line (current_function_prototype_file,\n+\t\t\t\t\t    current_function_prototype_line,\n+\t\t\t\t\t    \"prototype declaration\");\n \t\t  break;\n \t\t}\n \t      /* Type for passing arg must be consistent\n@@ -5944,16 +5956,27 @@ store_parm_decls ()\n \t\t\tDECL_ARG_TYPE (parm) = integer_type_node;\n #endif\n \t\t      if (pedantic)\n-\t\t\tpedwarn (\"promoted argument `%s' doesn't match prototype\",\n-\t\t\t\t IDENTIFIER_POINTER (DECL_NAME (parm)));\n+\t\t\t{\n+\t\t\t  warning (\"promoted argument `%s' doesn't match prototype\",\n+\t\t\t\t   IDENTIFIER_POINTER (DECL_NAME (parm)));\n+\t\t\t  warning_with_file_and_line\n+\t\t\t    (current_function_prototype_file,\n+\t\t\t     current_function_prototype_line,\n+\t\t\t     \"prototype declaration\");\n+\t\t\t}\n \t\t    }\n \t\t  /* If -traditional, allow `int' argument to match\n \t\t     `unsigned' prototype.  */\n \t\t  else if (! (flag_traditional\n \t\t\t      && TYPE_MAIN_VARIANT (TREE_TYPE (parm)) == integer_type_node\n \t\t\t      && TYPE_MAIN_VARIANT (TREE_VALUE (type)) == unsigned_type_node))\n-\t\t    error (\"argument `%s' doesn't match prototype\",\n-\t\t\t   IDENTIFIER_POINTER (DECL_NAME (parm)));\n+\t\t    {\n+\t\t      error (\"argument `%s' doesn't match prototype\",\n+\t\t\t     IDENTIFIER_POINTER (DECL_NAME (parm)));\n+\t\t      error_with_file_and_line (current_function_prototype_file,\n+\t\t\t\t\t\tcurrent_function_prototype_line,\n+\t\t\t\t\t\t\"prototype declaration\");\n+\t\t    }\n \t\t}\n \t    }\n \t  TYPE_ACTUAL_ARG_TYPES (TREE_TYPE (fndecl)) = 0;"}]}