{"sha": "92f6864c060a2051cd5e13c527aaaf8e5e377a9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmNjg2NGMwNjBhMjA1MWNkNWUxM2M1MjdhYWFmOGU1ZTM3N2E5ZQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2003-09-04T23:03:50Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2003-09-04T23:03:50Z"}, "message": "builtins.c (apply_args_size): Guard against a NULL cfun.\n\n* builtins.c (apply_args_size): Guard against a NULL cfun.\n(expand_builtin_apply_args_1): Likewise.\n(expand_builtin_apply_args_1): Likewise.\n(expand_builtin_apply): Likewise.\n\nFrom-SVN: r71095", "tree": {"sha": "7dc61157497f53d5f447813963c6e1bc1df6e6b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dc61157497f53d5f447813963c6e1bc1df6e6b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92f6864c060a2051cd5e13c527aaaf8e5e377a9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f6864c060a2051cd5e13c527aaaf8e5e377a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f6864c060a2051cd5e13c527aaaf8e5e377a9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f6864c060a2051cd5e13c527aaaf8e5e377a9e/comments", "author": null, "committer": null, "parents": [{"sha": "dc94d89ef7d5caddb1168053f688e69cdedbc7ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc94d89ef7d5caddb1168053f688e69cdedbc7ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc94d89ef7d5caddb1168053f688e69cdedbc7ee"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "7d2b73a5cba74b3b57244f566a8e7d8c5199d120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f6864c060a2051cd5e13c527aaaf8e5e377a9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f6864c060a2051cd5e13c527aaaf8e5e377a9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92f6864c060a2051cd5e13c527aaaf8e5e377a9e", "patch": "@@ -1,3 +1,10 @@\n+2003-09-04  DJ Delorie  <dj@redhat.com>\n+\n+\t* builtins.c (apply_args_size): Guard against a NULL cfun.\n+\t(expand_builtin_apply_args_1): Likewise.\n+\t(expand_builtin_apply_args_1): Likewise.\n+\t(expand_builtin_apply): Likewise.\n+\n 2003-09-04  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* configure.in (gcc_cv_as_ix86_cmov_sun_syntax): Check if"}, {"sha": "290fac49e8c6fa3eb3ea14c96e066ecf12f2e5ba", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f6864c060a2051cd5e13c527aaaf8e5e377a9e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f6864c060a2051cd5e13c527aaaf8e5e377a9e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=92f6864c060a2051cd5e13c527aaaf8e5e377a9e", "patch": "@@ -941,7 +941,7 @@ apply_args_size (void)\n \n       /* The second value is the structure value address unless this is\n \t passed as an \"invisible\" first argument.  */\n-      if (targetm.calls.struct_value_rtx (TREE_TYPE (cfun->decl), 0))\n+      if (targetm.calls.struct_value_rtx (cfun ? TREE_TYPE (cfun->decl) : 0, 0))\n \tsize += GET_MODE_SIZE (Pmode);\n \n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n@@ -1116,15 +1116,15 @@ expand_builtin_apply_args_1 (void)\n   rtx registers;\n   int size, align, regno;\n   enum machine_mode mode;\n-  rtx struct_incoming_value = targetm.calls.struct_value_rtx (TREE_TYPE (cfun->decl), 1);\n+  rtx struct_incoming_value = targetm.calls.struct_value_rtx (cfun ? TREE_TYPE (cfun->decl) : 0, 1);\n \n   /* Create a block where the arg-pointer, structure value address,\n      and argument registers can be saved.  */\n   registers = assign_stack_local (BLKmode, apply_args_size (), -1);\n \n   /* Walk past the arg-pointer and structure value address.  */\n   size = GET_MODE_SIZE (Pmode);\n-  if (targetm.calls.struct_value_rtx (TREE_TYPE (cfun->decl), 0))\n+  if (targetm.calls.struct_value_rtx (cfun ? TREE_TYPE (cfun->decl) : 0, 0))\n     size += GET_MODE_SIZE (Pmode);\n \n   /* Save each register used in calling a function to the block.  */\n@@ -1211,7 +1211,7 @@ expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n   rtx incoming_args, result, reg, dest, src, call_insn;\n   rtx old_stack_level = 0;\n   rtx call_fusage = 0;\n-  rtx struct_value = targetm.calls.struct_value_rtx (TREE_TYPE (cfun->decl), 0);\n+  rtx struct_value = targetm.calls.struct_value_rtx (cfun ? TREE_TYPE (cfun->decl) : 0, 0);\n \n #ifdef POINTERS_EXTEND_UNSIGNED\n   if (GET_MODE (arguments) != Pmode)"}]}