{"sha": "4d595e43423f86afa558ee8238d37c64ad6b475e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ1OTVlNDM0MjNmODZhZmE1NThlZTgyMzhkMzdjNjRhZDZiNDc1ZQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-11-11T16:16:41Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-11-11T16:16:41Z"}, "message": "pa.h (TRAMPOLINE_TEMPLATE): Fix flushing of cache lines when generating 64-bit code.\n\n\t* pa.h (TRAMPOLINE_TEMPLATE): Fix flushing of cache lines when\n\tgenerating 64-bit code.\n\nFrom-SVN: r73451", "tree": {"sha": "a7167580cbc3185eda9d5ef583b08b32e173d98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7167580cbc3185eda9d5ef583b08b32e173d98c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d595e43423f86afa558ee8238d37c64ad6b475e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d595e43423f86afa558ee8238d37c64ad6b475e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d595e43423f86afa558ee8238d37c64ad6b475e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d595e43423f86afa558ee8238d37c64ad6b475e/comments", "author": null, "committer": null, "parents": [{"sha": "5237cd77c28ff1bcfddc6ef7029038bd747bea4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5237cd77c28ff1bcfddc6ef7029038bd747bea4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5237cd77c28ff1bcfddc6ef7029038bd747bea4c"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "b7fa48078ef4b6529354e9733b72904cbb6bb017", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d595e43423f86afa558ee8238d37c64ad6b475e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d595e43423f86afa558ee8238d37c64ad6b475e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d595e43423f86afa558ee8238d37c64ad6b475e", "patch": "@@ -1,3 +1,8 @@\n+2003-11-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.h (TRAMPOLINE_TEMPLATE): Fix flushing of cache lines when\n+\tgenerating 64-bit code.\n+\n 2003-11-10  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (legitimate_lo_sum_address_p): Remove"}, {"sha": "ab15e79d87c4a0825b22965d65f3e7727ebe1f8a", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d595e43423f86afa558ee8238d37c64ad6b475e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d595e43423f86afa558ee8238d37c64ad6b475e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=4d595e43423f86afa558ee8238d37c64ad6b475e", "patch": "@@ -993,7 +993,7 @@ extern int may_call_alloca;\n \n #define TRAMPOLINE_TEMPLATE(FILE) \t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (! TARGET_64BIT)\t\t\t\t\t\t\t\\\n+    if (!TARGET_64BIT)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tfputs (\"\\tldw\t36(%r22),%r21\\n\", FILE);\t\t\t\\\n \tfputs (\"\\tbb,>=,n\t%r21,30,.+16\\n\", FILE);\t\t\t\\\n@@ -1052,7 +1052,7 @@ extern int may_call_alloca;\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  if (! TARGET_64BIT)\t\t\t\t\t\t\t\\\n+  if (!TARGET_64BIT)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rtx start_addr, end_addr;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -1070,9 +1070,9 @@ extern int may_call_alloca;\n       start_addr = force_reg (Pmode, (TRAMP));\t\t\t\t\\\n       end_addr = force_reg (Pmode, plus_constant ((TRAMP), 32));\t\\\n       emit_insn (gen_dcacheflush (start_addr, end_addr));\t\t\\\n-      end_addr = force_reg (Pmode, plus_constant (start_addr, 32));\t\\\n       emit_insn (gen_icacheflush (start_addr, end_addr, start_addr,\t\\\n-\t\t\t\t  gen_reg_rtx (Pmode), gen_reg_rtx (Pmode)));\\\n+\t\t\t\t  gen_reg_rtx (Pmode),\t\t\t\\\n+\t\t\t\t  gen_reg_rtx (Pmode)));\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n@@ -1090,13 +1090,14 @@ extern int may_call_alloca;\n       start_addr = memory_address (Pmode, plus_constant ((TRAMP), 24));\t\\\n       emit_move_insn (gen_rtx_MEM (Pmode, start_addr), end_addr);\t\\\n       /* fdc and fic only use registers for the address to flush,\t\\\n-\t they do not accept integer displacements.  */ \t\t\t\\\n+\t they do not accept integer displacements.   PA 2.0 cache\t\\\n+\t lines are 64 bytes.  */\t\t \t\t\t\\\n       start_addr = force_reg (Pmode, (TRAMP));\t\t\t\t\\\n-      end_addr = force_reg (Pmode, plus_constant ((TRAMP), 32));\t\\\n+      end_addr = force_reg (Pmode, plus_constant ((TRAMP), 64));\t\\\n       emit_insn (gen_dcacheflush (start_addr, end_addr));\t\t\\\n-      end_addr = force_reg (Pmode, plus_constant (start_addr, 32));\t\\\n       emit_insn (gen_icacheflush (start_addr, end_addr, start_addr,\t\\\n-\t\t\t\t  gen_reg_rtx (Pmode), gen_reg_rtx (Pmode)));\\\n+\t\t\t\t  gen_reg_rtx (Pmode),\t\t\t\\\n+\t\t\t\t  gen_reg_rtx (Pmode)));\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n "}]}