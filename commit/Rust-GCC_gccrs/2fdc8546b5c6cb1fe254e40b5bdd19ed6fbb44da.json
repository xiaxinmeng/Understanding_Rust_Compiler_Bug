{"sha": "2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "node_id": "C_kwDOANBUbNoAKDJmZGM4NTQ2YjVjNmNiMWZlMjU0ZTQwYjViZGQxOWVkNmZiYjQ0ZGE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-16T19:50:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-16T19:50:07Z"}, "message": "analyzer: add src_region param to region_model::check_for_poison [PR106479]\n\nPR analyzer/106479 notes that we don't always show the region-creation\nevent for a memmove from an uninitialized stack region.  This occurs\nwhen using kf_memcpy_memmove.  Fix by passing a src_region hint to\nregion_model::check_for_poison.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106479\n\t* kf.cc (kf_memcpy_memmove::impl_call_pre): Pass in source region\n\tto region_model::check_for_poison.\n\t* region-model-asm.cc (region_model::on_asm_stmt): Pass NULL\n\tregion to region_model::check_for_poison.\n\t* region-model.cc (region_model::check_for_poison): Add\n\t\"src_region\" param, and pass it to poisoned_value_diagnostic.\n\t(region_model::on_assignment): Pass NULL region to\n\tregion_model::check_for_poison.\n\t(region_model::get_rvalue): Likewise.\n\t* region-model.h (region_model::check_for_poison): Add\n\t\"src_region\" param.\n\t* sm-fd.cc (fd_state_machine::on_accept): Pass in source region\n\tto region_model::check_for_poison.\n\t* varargs.cc (kf_va_copy::impl_call_pre): Pass NULL region to\n\tregion_model::check_for_poison.\n\t(kf_va_arg::impl_call_pre): Pass in source region to\n\tregion_model::check_for_poison.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106479\n\t* gcc.dg/analyzer/pr104308.c (test_memmove_within_uninit): Remove\n\txfail on region creation event.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "dc31813c43d561b063205cf603ef91cb7ccae08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc31813c43d561b063205cf603ef91cb7ccae08b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b50fe16a3b2214c418ecc5febc0bb21bc17912b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50fe16a3b2214c418ecc5febc0bb21bc17912b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50fe16a3b2214c418ecc5febc0bb21bc17912b7"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "6088bfc72c089c7e753d1746d99c35b92980e8d9", "filename": "gcc/analyzer/kf.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fkf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fkf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fkf.cc?ref=2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "patch": "@@ -288,7 +288,7 @@ kf_memcpy_memmove::impl_call_pre (const call_details &cd) const\n   const svalue *src_contents_sval\n     = model->get_store_value (sized_src_reg, cd.get_ctxt ());\n   model->check_for_poison (src_contents_sval, cd.get_arg_tree (1),\n-\t\t\t   cd.get_ctxt ());\n+\t\t\t   sized_src_reg, cd.get_ctxt ());\n   model->set_value (sized_dest_reg, src_contents_sval, cd.get_ctxt ());\n }\n "}, {"sha": "ac32c6f06f7f6ddf2b1128746f2cc91acf69f91b", "filename": "gcc/analyzer/region-model-asm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fregion-model-asm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fregion-model-asm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-asm.cc?ref=2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "patch": "@@ -226,7 +226,7 @@ region_model::on_asm_stmt (const gasm *stmt, region_model_context *ctxt)\n \n       tree src_expr = input_tvec[i];\n       const svalue *src_sval = get_rvalue (src_expr, ctxt);\n-      check_for_poison (src_sval, src_expr, ctxt);\n+      check_for_poison (src_sval, src_expr, NULL, ctxt);\n       input_svals.quick_push (src_sval);\n       reachable_regs.handle_sval (src_sval);\n "}, {"sha": "55064400a08b83f6e04661036032f8ae24ab3e47", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "patch": "@@ -1004,11 +1004,13 @@ due_to_ifn_deferred_init_p (const gassign *assign_stmt)\n \n /* Check for SVAL being poisoned, adding a warning to CTXT.\n    Return SVAL, or, if a warning is added, another value, to avoid\n-   repeatedly complaining about the same poisoned value in followup code.  */\n+   repeatedly complaining about the same poisoned value in followup code.\n+   SRC_REGION is a hint about where SVAL came from, and can be NULL.  */\n \n const svalue *\n region_model::check_for_poison (const svalue *sval,\n \t\t\t\ttree expr,\n+\t\t\t\tconst region *src_region,\n \t\t\t\tregion_model_context *ctxt) const\n {\n   if (!ctxt)\n@@ -1046,8 +1048,7 @@ region_model::check_for_poison (const svalue *sval,\n \t the tree other than via the def stmts, using\n \t fixup_tree_for_diagnostic.  */\n       tree diag_arg = fixup_tree_for_diagnostic (expr);\n-      const region *src_region = NULL;\n-      if (pkind == POISON_KIND_UNINIT)\n+      if (src_region == NULL && pkind == POISON_KIND_UNINIT)\n \tsrc_region = get_region_for_poisoned_expr (expr);\n       if (ctxt->warn (make_unique<poisoned_value_diagnostic> (diag_arg,\n \t\t\t\t\t\t\t      pkind,\n@@ -1100,7 +1101,7 @@ region_model::on_assignment (const gassign *assign, region_model_context *ctxt)\n   if (const svalue *sval = get_gassign_result (assign, ctxt))\n     {\n       tree expr = get_diagnostic_tree_for_gassign (assign);\n-      check_for_poison (sval, expr, ctxt);\n+      check_for_poison (sval, expr, NULL, ctxt);\n       set_value (lhs_reg, sval, ctxt);\n       return;\n     }\n@@ -2227,7 +2228,7 @@ region_model::get_rvalue (path_var pv, region_model_context *ctxt) const\n \n   assert_compat_types (result_sval->get_type (), TREE_TYPE (pv.m_tree));\n \n-  result_sval = check_for_poison (result_sval, pv.m_tree, ctxt);\n+  result_sval = check_for_poison (result_sval, pv.m_tree, NULL, ctxt);\n \n   return result_sval;\n }"}, {"sha": "e8767e5ed41bde32c6e3ff835e27a0c1870cab08", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "patch": "@@ -485,6 +485,7 @@ class region_model\n \n   const svalue *check_for_poison (const svalue *sval,\n \t\t\t\t  tree expr,\n+\t\t\t\t  const region *src_region,\n \t\t\t\t  region_model_context *ctxt) const;\n \n   void check_region_for_write (const region *dest_reg,"}, {"sha": "03bcdfa60b446d0f558dbeed062b3eccb1b11ee6", "filename": "gcc/analyzer/sm-fd.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fsm-fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fsm-fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.cc?ref=2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "patch": "@@ -1992,6 +1992,7 @@ fd_state_machine::on_accept (const call_details &cd,\n \t\t\t\t  build_int_cst (TREE_TYPE (len_ptr), 0));\n       old_len_sval = model->check_for_poison (old_len_sval,\n \t\t\t\t\t      star_len_ptr,\n+\t\t\t\t\t      len_reg,\n \t\t\t\t\t      cd.get_ctxt ());\n       if (successful)\n \t{"}, {"sha": "5414f233ab15b6e291ed916063daaa2fd0cf3f76", "filename": "gcc/analyzer/varargs.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fvarargs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Fanalyzer%2Fvarargs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fvarargs.cc?ref=2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "patch": "@@ -723,6 +723,7 @@ kf_va_copy::impl_call_pre (const call_details &cd) const\n   in_va_list\n     = model->check_for_poison (in_va_list,\n \t\t\t       get_va_list_diag_arg (cd.get_arg_tree (1)),\n+\t\t\t       NULL,\n \t\t\t       cd.get_ctxt ());\n \n   const region *out_dst_reg\n@@ -1004,7 +1005,7 @@ kf_va_arg::impl_call_pre (const call_details &cd) const\n     ap_sval = cast;\n \n   tree va_list_tree = get_va_list_diag_arg (cd.get_arg_tree (0));\n-  ap_sval = model->check_for_poison (ap_sval, va_list_tree, ctxt);\n+  ap_sval = model->check_for_poison (ap_sval, va_list_tree, ap_reg, ctxt);\n \n   if (const region *impl_reg = ap_sval->maybe_get_region ())\n     {"}, {"sha": "a3a0cbb731776b26e2ba9447baa7c39f80821a57", "filename": "gcc/testsuite/gcc.dg/analyzer/pr104308.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr104308.c?ref=2fdc8546b5c6cb1fe254e40b5bdd19ed6fbb44da", "patch": "@@ -6,7 +6,7 @@\n \n int test_memmove_within_uninit (void)\n {\n-  char s[5]; /* { dg-message \"region created on stack here\" \"\" { xfail riscv*-*-* } } */\n+  char s[5]; /* { dg-message \"region created on stack here\" } */\n   memmove(s, s + 1, 2); /* { dg-warning \"use of uninitialized value\" } */\n   return 0;\n }"}]}