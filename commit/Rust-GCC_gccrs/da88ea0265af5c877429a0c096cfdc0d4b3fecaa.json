{"sha": "da88ea0265af5c877429a0c096cfdc0d4b3fecaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4OGVhMDI2NWFmNWM4Nzc0MjlhMGMwOTZjZmRjMGQ0YjNmZWNhYQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-12-07T14:01:59Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-12-07T14:01:59Z"}, "message": "[Patch PR78561 PowerPC] Revert to old behaviour for counting constant pools\n\ngcc/\n\n\tPR rtl-optimization/78561\n\t* config/rs6000/rs6000.c (rs6000_reg_live_or_pic_offset_p) Use\n\tconstant_pool_empty_p in place of get_pool_size_upper_bound.\n\t(rs6000_stack_info): Likewise.\n\t(rs6000_emit_prologue): Likewise.\n\t(rs6000_elf_declare_function_name): Likewise.\n\t(rs6000_set_up_by_prologue): Likewise.\n\t(rs6000_can_eliminate): Likewise.\n\t* output.h (get_pool_size_upper_bound): Delete.\n\t(constant_pool_empty_p): New.\n\t* varasm.c (get_pool_size_upper_bound): Delete\n\t(constant_pool_empty_p): New.\n\nFrom-SVN: r243345", "tree": {"sha": "624f3840e340fb87117f70858530e01dbb84bc36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/624f3840e340fb87117f70858530e01dbb84bc36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da88ea0265af5c877429a0c096cfdc0d4b3fecaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da88ea0265af5c877429a0c096cfdc0d4b3fecaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da88ea0265af5c877429a0c096cfdc0d4b3fecaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "716c5aced1f3e998df4a5d78eba4e090a332acee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/716c5aced1f3e998df4a5d78eba4e090a332acee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/716c5aced1f3e998df4a5d78eba4e090a332acee"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "fbe5bbedc954dc5ad770729e4f849175cdc6f2d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da88ea0265af5c877429a0c096cfdc0d4b3fecaa", "patch": "@@ -1,3 +1,18 @@\n+2016-12-07  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR rtl-optimization/78561\n+\t* config/rs6000/rs6000.c (rs6000_reg_live_or_pic_offset_p) Use\n+\tconstant_pool_empty_p in place of get_pool_size_upper_bound.\n+\t(rs6000_stack_info): Likewise.\n+\t(rs6000_emit_prologue): Likewise.\n+\t(rs6000_elf_declare_function_name): Likewise.\n+\t(rs6000_set_up_by_prologue): Likewise.\n+\t(rs6000_can_eliminate): Likewise.\n+\t* output.h (get_pool_size_upper_bound): Delete.\n+\t(constant_pool_empty_p): New.\n+\t* varasm.c (get_pool_size_upper_bound): Delete\n+\t(constant_pool_empty_p): New.\n+\n 2016-12-07  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/78691"}, {"sha": "b75a290da6aa14830b4db50661050a7b341faf11", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=da88ea0265af5c877429a0c096cfdc0d4b3fecaa", "patch": "@@ -25460,7 +25460,7 @@ rs6000_reg_live_or_pic_offset_p (int reg)\n       if (TARGET_TOC && TARGET_MINIMAL_TOC\n \t  && (crtl->calls_eh_return\n \t      || df_regs_ever_live_p (reg)\n-\t      || get_pool_size_upper_bound ()))\n+\t      || !constant_pool_empty_p ()))\n \treturn true;\n \n       if ((DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_DARWIN)\n@@ -26266,7 +26266,7 @@ rs6000_stack_info (void)\n #ifdef TARGET_RELOCATABLE\n       || (DEFAULT_ABI == ABI_V4\n \t  && (TARGET_RELOCATABLE || flag_pic > 1)\n-\t  && get_pool_size_upper_bound () != 0)\n+\t  && !constant_pool_empty_p ())\n #endif\n       || rs6000_ra_ever_killed ())\n     info->lr_save_p = 1;\n@@ -28044,7 +28044,7 @@ rs6000_emit_prologue (void)\n \n       /* With -mminimal-toc we may generate an extra use of r2 below.  */\n       if (TARGET_TOC && TARGET_MINIMAL_TOC\n-\t  && get_pool_size_upper_bound () != 0)\n+\t  && !constant_pool_empty_p ())\n \tcfun->machine->r2_setup_needed = true;\n     }\n \n@@ -28900,7 +28900,7 @@ rs6000_emit_prologue (void)\n   /* If we are using RS6000_PIC_OFFSET_TABLE_REGNUM, we need to set it up.  */\n   if (!TARGET_SINGLE_PIC_BASE\n       && ((TARGET_TOC && TARGET_MINIMAL_TOC\n-\t   && get_pool_size_upper_bound () != 0)\n+\t   && !constant_pool_empty_p ())\n \t  || (DEFAULT_ABI == ABI_V4\n \t      && (flag_pic == 1 || (flag_pic && TARGET_SECURE_PLT))\n \t      && df_regs_ever_live_p (RS6000_PIC_OFFSET_TABLE_REGNUM))))\n@@ -34967,7 +34967,7 @@ rs6000_elf_declare_function_name (FILE *file, const char *name, tree decl)\n   if (DEFAULT_ABI == ABI_V4\n       && (TARGET_RELOCATABLE || flag_pic > 1)\n       && !TARGET_SECURE_PLT\n-      && (get_pool_size_upper_bound () != 0 || crtl->profile)\n+      && (!constant_pool_empty_p () || crtl->profile)\n       && uses_TOC ())\n     {\n       char buf[256];\n@@ -37453,7 +37453,7 @@ rs6000_can_eliminate (const int from, const int to)\n \t  ? ! frame_pointer_needed\n \t  : from == RS6000_PIC_OFFSET_TABLE_REGNUM\n \t    ? ! TARGET_MINIMAL_TOC || TARGET_NO_TOC\n-\t\t|| get_pool_size_upper_bound () == 0\n+\t\t|| constant_pool_empty_p ()\n \t    : true);\n }\n \n@@ -38990,7 +38990,7 @@ rs6000_set_up_by_prologue (struct hard_reg_set_container *set)\n   if (!TARGET_SINGLE_PIC_BASE\n       && TARGET_TOC\n       && TARGET_MINIMAL_TOC\n-      && get_pool_size_upper_bound () != 0)\n+      && !constant_pool_empty_p ())\n     add_to_hard_reg_set (&set->set, Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n   if (cfun->machine->split_stack_argp_used)\n     add_to_hard_reg_set (&set->set, Pmode, 12);"}, {"sha": "6c993817700f7f504bf52c5ff742024b29bce1b4", "filename": "gcc/output.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=da88ea0265af5c877429a0c096cfdc0d4b3fecaa", "patch": "@@ -287,11 +287,10 @@ extern void assemble_real (REAL_VALUE_TYPE, machine_mode, unsigned,\n /* Write the address of the entity given by SYMBOL to SEC.  */\n extern void assemble_addr_to_section (rtx, section *);\n \n-/* Return the maximum size of the constant pool.  This may be larger\n-   than the final size of the constant pool, as entries may be added to\n-   the constant pool which become unreferenced, or otherwise not need\n-   output by the time we actually emit the pool.  */\n-extern int get_pool_size_upper_bound (void);\n+/* Return TRUE if and only if the constant pool has no entries.  Note\n+   that even entries we might end up choosing not to emit are counted\n+   here, so there is the potential for missed optimizations.  */\n+extern bool constant_pool_empty_p (void);\n \n extern rtx_insn *peephole (rtx_insn *);\n "}, {"sha": "5b158472fc6804b80f1eaaa8dfe2bcf07402062e", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da88ea0265af5c877429a0c096cfdc0d4b3fecaa/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=da88ea0265af5c877429a0c096cfdc0d4b3fecaa", "patch": "@@ -3808,12 +3808,14 @@ get_pool_mode (const_rtx addr)\n   return SYMBOL_REF_CONSTANT (addr)->mode;\n }\n \n-/* Return the size of the constant pool.  */\n+/* Return TRUE if and only if the constant pool has no entries.  Note\n+   that even entries we might end up choosing not to emit are counted\n+   here, so there is the potential for missed optimizations.  */\n \n-int\n-get_pool_size_upper_bound (void)\n+bool\n+constant_pool_empty_p (void)\n {\n-  return crtl->varasm.pool->offset;\n+  return crtl->varasm.pool->first == NULL;\n }\n \f\n /* Worker function for output_constant_pool_1.  Emit assembly for X"}]}