{"sha": "30362998612b17c3e016d0fc8f0b3b2ead666927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAzNjI5OTg2MTJiMTdjM2UwMTZkMGZjOGYwYjNiMmVhZDY2NjkyNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-09-16T22:50:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-16T22:50:28Z"}, "message": "Implement filesystem::canonical() without realpath\n\n\tPR libstdc++/67173\n\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check _XOPEN_VERSION\n\tand PATH_MAX for _GLIBCXX_USE_REALPATH.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* src/filesystem/ops.cc: (canonical) [!_GLIBCXX_USE_REALPATH]: Add\n\talternative implementation.\n\t* testsuite/experimental/filesystem/operations/canonical.cc: New.\n\t* testsuite/experimental/filesystem/operations/exists.cc: Add more\n\ttests.\n\t* testsuite/experimental/filesystem/operations/absolute.cc: Add test\n\tvariables.\n\t* testsuite/experimental/filesystem/operations/copy.cc: Likewise.\n\t* testsuite/experimental/filesystem/operations/current_path.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/operations/file_size.cc: Likewise.\n\t* testsuite/experimental/filesystem/operations/status.cc: Likewise.\n\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n\tLikewise.\n\nFrom-SVN: r227836", "tree": {"sha": "3efd38e818c1d151333d9c0bfb7b3869ca9cec23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3efd38e818c1d151333d9c0bfb7b3869ca9cec23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30362998612b17c3e016d0fc8f0b3b2ead666927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30362998612b17c3e016d0fc8f0b3b2ead666927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30362998612b17c3e016d0fc8f0b3b2ead666927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30362998612b17c3e016d0fc8f0b3b2ead666927/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec39494ac756ee9525371d2225f55f18200d8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec39494ac756ee9525371d2225f55f18200d8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec39494ac756ee9525371d2225f55f18200d8e0"}], "stats": {"total": 288, "additions": 262, "deletions": 26}, "files": [{"sha": "b8c11843632c54d5ce4df6f6de4bc0bffcc5283f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -1,3 +1,25 @@\n+2015-09-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/67173\n+\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check _XOPEN_VERSION\n+\tand PATH_MAX for _GLIBCXX_USE_REALPATH.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/filesystem/ops.cc: (canonical) [!_GLIBCXX_USE_REALPATH]: Add\n+\talternative implementation.\n+\t* testsuite/experimental/filesystem/operations/canonical.cc: New.\n+\t* testsuite/experimental/filesystem/operations/exists.cc: Add more\n+\ttests.\n+\t* testsuite/experimental/filesystem/operations/absolute.cc: Add test\n+\tvariables.\n+\t* testsuite/experimental/filesystem/operations/copy.cc: Likewise.\n+\t* testsuite/experimental/filesystem/operations/current_path.cc:\n+\tLikewise.\n+\t* testsuite/experimental/filesystem/operations/file_size.cc: Likewise.\n+\t* testsuite/experimental/filesystem/operations/status.cc: Likewise.\n+\t* testsuite/experimental/filesystem/operations/temp_directory_path.cc:\n+\tLikewise.\n+\n 2015-09-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/67173"}, {"sha": "c133c25407b535cbb6eeda9cfb59b7e16a177de1", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -3947,13 +3947,24 @@ dnl\n   AC_MSG_CHECKING([for realpath])\n   AC_CACHE_VAL(glibcxx_cv_realpath, [dnl\n     GCC_TRY_COMPILE_OR_LINK(\n-      [#include <stdlib.h>],\n-      [char *tmp = realpath((const char*)NULL, (char*)NULL);],\n+      [\n+       #include <stdlib.h>\n+       #include <unistd.h>\n+      ],\n+      [\n+       #if _XOPEN_VERSION < 500\n+       #error\n+       #elif _XOPEN_VERSION >= 700 || defined(PATH_MAX)\n+       char *tmp = realpath((const char*)NULL, (char*)NULL);\n+       #else\n+       #error\n+       #endif\n+      ],\n       [glibcxx_cv_realpath=yes],\n       [glibcxx_cv_realpath=no])\n   ])\n   if test $glibcxx_cv_realpath = yes; then\n-    AC_DEFINE(_GLIBCXX_USE_REALPATH, 1, [Define if realpath is available in <stdlib.h>.])\n+    AC_DEFINE(_GLIBCXX_USE_REALPATH, 1, [Define if usable realpath is available in <stdlib.h>.])\n   fi\n   AC_MSG_RESULT($glibcxx_cv_realpath)\n dnl"}, {"sha": "58eef93f5ec093c226f7ef51227af40189c9333d", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -883,7 +883,7 @@\n    of TR1 (Chapter 5.1). */\n #undef _GLIBCXX_USE_RANDOM_TR1\n \n-/* Define if realpath is available in <stdlib.h>. */\n+/* Define if usable realpath is available in <stdlib.h>. */\n #undef _GLIBCXX_USE_REALPATH\n \n /* Defined if sched_yield is available. */"}, {"sha": "dea0a2d3506f4a05d908277db8bb0970b9154e08", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -79178,11 +79178,22 @@ else\n       if test x$gcc_no_link = xyes; then\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-#include <stdlib.h>\n+\n+       #include <stdlib.h>\n+       #include <unistd.h>\n+\n int\n main ()\n {\n-char *tmp = realpath((const char*)NULL, (char*)NULL);\n+\n+       #if _XOPEN_VERSION < 500\n+       #error\n+       #elif _XOPEN_VERSION >= 700 || defined(PATH_MAX)\n+       char *tmp = realpath((const char*)NULL, (char*)NULL);\n+       #else\n+       #error\n+       #endif\n+\n   ;\n   return 0;\n }\n@@ -79199,11 +79210,22 @@ else\n fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-#include <stdlib.h>\n+\n+       #include <stdlib.h>\n+       #include <unistd.h>\n+\n int\n main ()\n {\n-char *tmp = realpath((const char*)NULL, (char*)NULL);\n+\n+       #if _XOPEN_VERSION < 500\n+       #error\n+       #elif _XOPEN_VERSION >= 700 || defined(PATH_MAX)\n+       char *tmp = realpath((const char*)NULL, (char*)NULL);\n+       #else\n+       #error\n+       #endif\n+\n   ;\n   return 0;\n }"}, {"sha": "b5c8eb9e11184b96b6f83b47f84dcb140f3fe9a1", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 87, "deletions": 12, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -96,23 +96,98 @@ namespace\n fs::path\n fs::canonical(const path& p, const path& base, error_code& ec)\n {\n-  path can;\n+  const path pa = absolute(p, base);\n+  path result;\n #ifdef _GLIBCXX_USE_REALPATH\n-  char* buffer = nullptr;\n-#if defined(__SunOS_5_10) && defined(PATH_MAX)\n-  buffer = (char*)::malloc(PATH_MAX);\n-#endif\n-  if (char_ptr rp = char_ptr{::realpath(absolute(p, base).c_str(), buffer)})\n+  char_ptr buf{ nullptr };\n+# if _XOPEN_VERSION < 700\n+  // Not safe to call realpath(path, NULL)\n+  buf.reset( (char*)::malloc(PATH_MAX) );\n+# endif\n+  if (char* rp = ::realpath(pa.c_str(), buf.get()))\n     {\n-      can.assign(rp.get());\n+      if (buf == nullptr)\n+\tbuf.reset(rp);\n+      result.assign(rp);\n       ec.clear();\n+      return result;\n+    }\n+  if (errno != ENAMETOOLONG)\n+    {\n+      ec.assign(errno, std::generic_category());\n+      return result;\n     }\n-  else\n-    ec.assign(errno, std::generic_category());\n-#else\n-  ec = std::make_error_code(std::errc::not_supported);\n #endif\n-  return can;\n+\n+  auto fail = [&ec, &result](int e) mutable {\n+      if (!ec.value())\n+\tec.assign(e, std::generic_category());\n+      result.clear();\n+  };\n+\n+  if (!exists(pa, ec))\n+    {\n+      fail(ENOENT);\n+      return result;\n+    }\n+  // else we can assume no unresolvable symlink loops\n+\n+  result = pa.root_path();\n+\n+  deque<path> cmpts;\n+  for (auto& f : pa.relative_path())\n+    cmpts.push_back(f);\n+\n+  while (!cmpts.empty())\n+    {\n+      path f = std::move(cmpts.front());\n+      cmpts.pop_front();\n+\n+      if (f.compare(\".\") == 0)\n+\t{\n+\t  if (!is_directory(result, ec))\n+\t    {\n+\t      fail(ENOTDIR);\n+\t      break;\n+\t    }\n+\t}\n+      else if (f.compare(\"..\") == 0)\n+\t{\n+\t  auto parent = result.parent_path();\n+\t  if (parent.empty())\n+\t    result = pa.root_path();\n+\t  else\n+\t    result.swap(parent);\n+\t}\n+      else\n+\t{\n+\t  result /= f;\n+\n+\t  if (is_symlink(result, ec))\n+\t    {\n+\t      path link = read_symlink(result, ec);\n+\t      if (!ec.value())\n+\t\t{\n+\t\t  if (link.is_absolute())\n+\t\t    {\n+\t\t      result = link.root_path();\n+\t\t      link = link.relative_path();\n+\t\t    }\n+\t\t  else\n+\t\t    result.remove_filename();\n+\n+\t\t  cmpts.insert(cmpts.begin(), link.begin(), link.end());\n+\t\t}\n+\t    }\n+\n+\t  if (ec.value() || !exists(result, ec))\n+\t    {\n+\t      fail(ENOENT);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+  return result;\n }\n \n fs::path"}, {"sha": "f7507f5772698481829122662ae80163f29e81b8", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/absolute.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fabsolute.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fabsolute.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fabsolute.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -29,13 +29,17 @@ using std::experimental::filesystem::path;\n void\n test01()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   for (const path& p : __gnu_test::test_paths)\n     VERIFY( absolute(p).is_absolute() );\n }\n \n void\n test02()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   path p1(\"/\");\n   VERIFY( absolute(p1) == p1 );\n   VERIFY( absolute(p1, \"/bar\") == p1 );"}, {"sha": "d752febf44aa94d86ef0a48aed89999f0bf20b1c", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/canonical.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcanonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcanonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcanonical.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11 -lstdc++fs\" }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  std::error_code ec;\n+  auto p = __gnu_test::nonexistent_path();\n+  canonical( p, ec );\n+  VERIFY( ec );\n+\n+  p = fs::current_path();\n+  canonical( p, ec );\n+  VERIFY( !ec );\n+\n+  p = \"/\";\n+  p = canonical( p, ec );\n+  VERIFY( p == \"/\" );\n+  VERIFY( !ec );\n+\n+  p = \"/.\";\n+  p = canonical( p, ec );\n+  VERIFY( p == \"/\" );\n+  VERIFY( !ec );\n+\n+  p = \"/..\";\n+  p = canonical( p, ec );\n+  VERIFY( p == \"/\" );\n+  VERIFY( !ec );\n+\n+  p = \"/../.././.\";\n+  p = canonical( p, ec );\n+  VERIFY( p == \"/\" );\n+  VERIFY( !ec );\n+\n+  p = \"/dev/stdin\";\n+  if (exists(p))\n+    {\n+      auto p2 = canonical(p);\n+      if (is_symlink(p))\n+        VERIFY( p != p2 );\n+      else\n+        VERIFY( p == p2 );\n+      VERIFY( canonical(p2) == p2 );\n+    }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "35d49f0f7f7b037cc39086e0e82bf93f610a8cbf", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/copy.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -29,13 +29,17 @@ using std::experimental::filesystem::path;\n void\n test01()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   for (const path& p : __gnu_test::test_paths)\n     VERIFY( absolute(p).is_absolute() );\n }\n \n void\n test02()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   path p1(\"/\");\n   VERIFY( absolute(p1) == p1 );\n   VERIFY( absolute(p1, \"/bar\") == p1 );"}, {"sha": "81ade73ab5690fd185523e29b95dbbe5f2f582d8", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/current_path.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcurrent_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcurrent_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcurrent_path.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -29,6 +29,8 @@ namespace fs = std::experimental::filesystem;\n void\n test01()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   fs::path dot(\".\");\n   fs::path cwd = fs::current_path();\n   std::error_code ec;\n@@ -39,6 +41,8 @@ test01()\n void\n test02()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   auto oldwd = fs::current_path();\n   auto tmpdir = fs::temp_directory_path();\n   current_path(tmpdir);"}, {"sha": "dba4a6f5a55b0ba2a607696de11f78dab4982993", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/exists.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fexists.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -20,32 +20,37 @@\n \n #include <experimental/filesystem>\n #include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n \n using std::experimental::filesystem::path;\n \n void\n test01()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   VERIFY( exists(path{\"/\"}) );\n   VERIFY( exists(path{\"/.\"}) );\n   VERIFY( exists(path{\".\"}) );\n+  VERIFY( exists(path{\"..\"}) );\n+  VERIFY( exists(std::experimental::filesystem::current_path()) );\n }\n \n void\n test02()\n {\n-  path rel{\"xXxXx\"};\n-  while (exists(rel))\n-    rel /= \"x\";\n+  bool test __attribute__((unused)) = false;\n+\n+  path rel = __gnu_test::nonexistent_path();\n   VERIFY( !exists(rel) );\n }\n \n void\n test03()\n {\n-  path abs{\"/xXxXx\"};\n-  while (exists(abs))\n-    abs /= \"x\";\n+  bool test __attribute__((unused)) = false;\n+\n+  path abs = absolute(__gnu_test::nonexistent_path());\n   VERIFY( !exists(abs) );\n }\n "}, {"sha": "7603064d46a7bc75a235307f9e90f1620dc4c4f6", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/file_size.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ffile_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ffile_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ffile_size.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -27,6 +27,8 @@ namespace fs = std::experimental::filesystem;\n void\n test01()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   std::error_code ec;\n   size_t size = fs::file_size(\".\", ec);\n   VERIFY( ec == std::errc::is_a_directory );\n@@ -45,6 +47,8 @@ test01()\n void\n test02()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   fs::path p = __gnu_test::nonexistent_path();\n \n   std::error_code ec;"}, {"sha": "0f1730d82fcff4ce5e480f626de3f13b9cffb180", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/status.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fstatus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fstatus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fstatus.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -27,6 +27,8 @@ namespace fs = std::experimental::filesystem;\n void\n test01()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   std::error_code ec;\n   fs::file_status st1 = fs::status(\".\", ec);\n   VERIFY( !ec );\n@@ -39,6 +41,8 @@ test01()\n void\n test02()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   fs::path p = __gnu_test::nonexistent_path();\n \n   std::error_code ec;"}, {"sha": "bd9b6adf3e0ba79034b4099a9310db4845dabe76", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30362998612b17c3e016d0fc8f0b3b2ead666927/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=30362998612b17c3e016d0fc8f0b3b2ead666927", "patch": "@@ -37,6 +37,8 @@ namespace fs = std::experimental::filesystem;\n void\n test01()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   clean_env();\n \n   if (!fs::exists(\"/tmp\"))\n@@ -53,6 +55,8 @@ test01()\n void\n test02()\n {\n+  bool test __attribute__((unused)) = false;\n+\n   clean_env();\n \n   if (::setenv(\"TMPDIR\", __gnu_test::nonexistent_path().string().c_str(), 1))"}]}