{"sha": "942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQyZGY3MzkwZmI2NGUyNmJiN2VkNmFjNThlZTk5MTFiZTRlYTVjYg==", "commit": {"author": {"name": "Rong Xu", "email": "xur@google.com", "date": "2013-10-03T17:13:50Z"}, "committer": {"name": "Rong Xu", "email": "xur@gcc.gnu.org", "date": "2013-10-03T17:13:50Z"}, "message": "predict.c (tree_predict_by_opcode): Get the probability for builtin_expect from param builtin_expect_probability.\n\n        * predict.c (tree_predict_by_opcode): Get the probability\n        for builtin_expect from param builtin_expect_probability.\n        * params.def (BUILTIN_EXPECT_PROBABILITY): New parameter.\n        * predict.def (PRED_BUILTIN_EXPECT_RELAXED): Fix comments.\n        * doc/invoke.texi: Add documentation for builtin-expect-probability.\n        * gcc.target/i386/cold-attribute-2.c: Fix the test by using original\n        probability.\n        * gcc.dg/tree-ssa/ipa-split-5.c: Ditto.\n        * gcc.dg/tree-ssa/ipa-split-6.c: Ditto.\n\n--This li (t)ene, and those below, will be ignored--\n\nM    gcc/params.def\nM    gcc/predict.def\nM    gcc/ChangeLog\nM    gcc/testsuite/gcc.dg/tree-ssa/ipa-split-5.c\nM    gcc/testsuite/gcc.dg/tree-ssa/ipa-split-6.c\nM    gcc/testsuite/gcc.target/i386/cold-attribute-2.c\nM    gcc/predict.c\nM    gcc/doc/invoke.texi\n\nFrom-SVN: r203167", "tree": {"sha": "48352394b524e6a8198bc62633939861961f8a7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48352394b524e6a8198bc62633939861961f8a7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/comments", "author": {"login": "xur-llvm", "id": 59886942, "node_id": "MDQ6VXNlcjU5ODg2OTQy", "avatar_url": "https://avatars.githubusercontent.com/u/59886942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xur-llvm", "html_url": "https://github.com/xur-llvm", "followers_url": "https://api.github.com/users/xur-llvm/followers", "following_url": "https://api.github.com/users/xur-llvm/following{/other_user}", "gists_url": "https://api.github.com/users/xur-llvm/gists{/gist_id}", "starred_url": "https://api.github.com/users/xur-llvm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xur-llvm/subscriptions", "organizations_url": "https://api.github.com/users/xur-llvm/orgs", "repos_url": "https://api.github.com/users/xur-llvm/repos", "events_url": "https://api.github.com/users/xur-llvm/events{/privacy}", "received_events_url": "https://api.github.com/users/xur-llvm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ef7251f6cd9e228cafa3473929ff55c9cb56928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef7251f6cd9e228cafa3473929ff55c9cb56928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef7251f6cd9e228cafa3473929ff55c9cb56928"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "c5ffb64ff05e91171e566df8f8155f0054875468", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "patch": "@@ -1,3 +1,15 @@\n+2013-10-03  Rong Xu  <xur@google.com>\n+\n+        * predict.c (tree_predict_by_opcode): Get the probability\n+        for builtin_expect from param builtin_expect_probability.\n+        * params.def (BUILTIN_EXPECT_PROBABILITY): New parameter.\n+        * predict.def (PRED_BUILTIN_EXPECT_RELAXED): Fix comments.\n+        * doc/invoke.texi: Add documentation for builtin-expect-probability.\n+        * gcc.target/i386/cold-attribute-2.c: Fix the test by using original\n+        probability.\n+        * gcc.dg/tree-ssa/ipa-split-5.c: Ditto.\n+        * gcc.dg/tree-ssa/ipa-split-6.c: Ditto.\n+\n 2013-10-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/19476"}, {"sha": "0f32c24f15fd4e50538a141f85648de5ccf91212", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "patch": "@@ -9491,6 +9491,11 @@ The known number of iterations is predicted correctly, while\n the unknown number of iterations average to roughly 10.  This means that the\n loop without bounds appears artificially cold relative to the other one.\n \n+@item builtin-expect-probability\n+Control the probability of the expression having the specified value. This\n+parameter takes a percentage (i.e. 0 ... 100) as input.\n+The default probability of 90 is obtained empirically.\n+\n @item align-threshold\n \n Select fraction of the maximal frequency of executions of a basic block in"}, {"sha": "ff9ba9a8abcc6dc2148e498464aabd56096f7f0e", "filename": "gcc/params.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "patch": "@@ -398,6 +398,19 @@ DEFPARAM(PARAM_MAX_PREDICTED_ITERATIONS,\n \t \"max-predicted-iterations\",\n \t \"The maximum number of loop iterations we predict statically\",\n \t 100, 0, 0)\n+\n+/* This parameter controls the probability of builtin_expect. The default\n+   value is 90%. This empirical value is obtained through the weighted\n+   probability of FDO counters (with the FDO count value as the weight)\n+   in some real world programs:  \n+   (1) Google performance test benchmarks: the probability is 0.9081.\n+   (2) Linux 3.3 kernel running Google search workload: the probability\n+   is 0.8717.  */\n+\n+DEFPARAM(BUILTIN_EXPECT_PROBABILITY,\n+\t \"builtin-expect-probability\",\n+\t \"Set the estimated probability in percentage for builtin expect. The default value is 90% probability.\",\n+\t 90, 0, 100)\n DEFPARAM(TRACER_DYNAMIC_COVERAGE_FEEDBACK,\n \t \"tracer-dynamic-coverage-feedback\",\n \t \"The percentage of function, weighted by execution frequency, that must be covered by trace formation. Used when profile feedback is available\","}, {"sha": "e6a4095acd151c3e8a149b961ba9693f42dc2d16", "filename": "gcc/predict.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "patch": "@@ -2000,11 +2000,12 @@ tree_predict_by_opcode (basic_block bb)\n   BITMAP_FREE (visited);\n   if (val)\n     {\n+      int percent = PARAM_VALUE (BUILTIN_EXPECT_PROBABILITY);\n+\n+      gcc_assert (percent >= 0 && percent <= 100);\n       if (integer_zerop (val))\n-\tpredict_edge_def (then_edge, PRED_BUILTIN_EXPECT, NOT_TAKEN);\n-      else\n-\tpredict_edge_def (then_edge, PRED_BUILTIN_EXPECT, TAKEN);\n-      return;\n+        percent = 100 - percent;\n+      predict_edge (then_edge, PRED_BUILTIN_EXPECT, HITRATE (percent));\n     }\n   /* Try \"pointer heuristic.\"\n      A comparison ptr == 0 is predicted as false."}, {"sha": "f8dba66e8718a7c1a409249306a56c230b11f085", "filename": "gcc/predict.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "patch": "@@ -57,7 +57,10 @@ DEF_PREDICTOR (PRED_UNCONDITIONAL, \"unconditional jump\", PROB_ALWAYS,\n DEF_PREDICTOR (PRED_LOOP_ITERATIONS, \"loop iterations\", PROB_ALWAYS,\n \t       PRED_FLAG_FIRST_MATCH)\n \n-/* Hints dropped by user via __builtin_expect feature.  */\n+/* Hints dropped by user via __builtin_expect feature.  Note: the\n+   probability of PROB_VERY_LIKELY is now overwritten by param\n+   builtin_expect_probability with a default value of HITRATE(90).\n+   Refer to param.def for details.  */\n DEF_PREDICTOR (PRED_BUILTIN_EXPECT, \"__builtin_expect\", PROB_VERY_LIKELY,\n \t       PRED_FLAG_FIRST_MATCH)\n "}, {"sha": "8fc1244e1ad6fc5aed4677183afe62dc6c39e3d8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-split-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c?ref=942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target nonpic } } */\n-/* { dg-options \"-O3 -fdump-tree-fnsplit -fdump-tree-optimized\" } */\n+/* { dg-options \"-O3 -fdump-tree-fnsplit -fdump-tree-optimized --param=builtin-expect-probability=100\" } */\n \n struct a {int a,b;};\n struct a make_me_big (int a);"}, {"sha": "fcdf79d7027adb71e4d03b700af46ce308eb56bd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-split-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-6.c?ref=942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/52019 */\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fno-tree-sra -fdump-tree-fnsplit -fdump-tree-optimized\" } */\n+/* { dg-options \"-O3 -fno-tree-sra -fdump-tree-fnsplit -fdump-tree-optimized --param=builtin-expect-probability=100\" } */\n \n #include \"ipa-split-5.c\"\n "}, {"sha": "4b61b9d56d8f01d1aa675d8f5d5ddd0d7f7420c0", "filename": "gcc/testsuite/gcc.target/i386/cold-attribute-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-attribute-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/942df7390fb64e26bb7ed6ac58ee9911be4ea5cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-attribute-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcold-attribute-2.c?ref=942df7390fb64e26bb7ed6ac58ee9911be4ea5cb", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 --param=builtin-expect-probability=100\" } */\n #include <string.h>\n t(int c)\n {"}]}