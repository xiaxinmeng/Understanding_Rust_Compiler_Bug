{"sha": "6e1c9715b3142bc09e313c0d4b196694ab7ae153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxYzk3MTViMzE0MmJjMDllMzEzYzBkNGIxOTY2OTRhYjdhZTE1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-06T20:54:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-06T20:55:50Z"}, "message": "libstdc++: Cleanup whitespace and type trait usage in <optional>\n\nThis makes the formatting in <optional> consistent and also removes\nredundant && tokens from template arguments for traits like\nis_constructible and is_convertible.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/optional (_Optional_payload_base, _Optional_base)\n\t(optional, __optional_hash_call_base): Adjust whitespace and\n\tother formatting. Remove redundant && tokens on template\n\targuments to type traits.", "tree": {"sha": "f858d1d3d611cd88503deb0f2cf3553077fb1b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f858d1d3d611cd88503deb0f2cf3553077fb1b23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e1c9715b3142bc09e313c0d4b196694ab7ae153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1c9715b3142bc09e313c0d4b196694ab7ae153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1c9715b3142bc09e313c0d4b196694ab7ae153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1c9715b3142bc09e313c0d4b196694ab7ae153/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcfe4681f9be68f96f0610f30356510ff518806b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfe4681f9be68f96f0610f30356510ff518806b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfe4681f9be68f96f0610f30356510ff518806b"}], "stats": {"total": 209, "additions": 107, "deletions": 102}, "files": [{"sha": "f9f42efe09ce2deff3ec22ed435cbb6b91e4504a", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 107, "deletions": 102, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1c9715b3142bc09e313c0d4b196694ab7ae153/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1c9715b3142bc09e313c0d4b196694ab7ae153/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=6e1c9715b3142bc09e313c0d4b196694ab7ae153", "patch": "@@ -163,9 +163,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr void\n       _M_copy_assign(const _Optional_payload_base& __other)\n       {\n-        if (this->_M_engaged && __other._M_engaged)\n-          this->_M_get() = __other._M_get();\n-        else\n+\tif (this->_M_engaged && __other._M_engaged)\n+\t  this->_M_get() = __other._M_get();\n+\telse\n \t  {\n \t    if (__other._M_engaged)\n \t      this->_M_construct(__other._M_get());\n@@ -211,7 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    { }\n \n \t  _Empty_byte _M_empty;\n-          _Up _M_value;\n+\t  _Up _M_value;\n \t};\n \n       template<typename _Up>\n@@ -235,22 +235,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  ~_Storage() { }\n \n \t  _Empty_byte _M_empty;\n-          _Up _M_value;\n+\t  _Up _M_value;\n \t};\n \n       _Storage<_Stored_type> _M_payload;\n \n       bool _M_engaged = false;\n \n       template<typename... _Args>\n-        void\n-        _M_construct(_Args&&... __args)\n-        noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)\n-        {\n-          ::new ((void *) std::__addressof(this->_M_payload))\n-            _Stored_type(std::forward<_Args>(__args)...);\n-          this->_M_engaged = true;\n-        }\n+\tvoid\n+\t_M_construct(_Args&&... __args)\n+\tnoexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)\n+\t{\n+\t  ::new ((void *) std::__addressof(this->_M_payload))\n+\t    _Stored_type(std::forward<_Args>(__args)...);\n+\t  this->_M_engaged = true;\n+\t}\n \n       constexpr void\n       _M_destroy() noexcept\n@@ -471,39 +471,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   bool = is_trivially_copy_constructible_v<_Tp>,\n \t   bool = is_trivially_move_constructible_v<_Tp>>\n     struct _Optional_base\n-      : _Optional_base_impl<_Tp, _Optional_base<_Tp>>\n+    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>\n     {\n       // Constructors for disengaged optionals.\n       constexpr _Optional_base() = default;\n \n       // Constructors for engaged optionals.\n       template<typename... _Args,\n-\t       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>\n-        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n-        : _M_payload(in_place,\n-\t\t     std::forward<_Args>(__args)...) { }\n+\t       enable_if_t<is_constructible_v<_Tp, _Args...>, bool> = false>\n+\tconstexpr explicit\n+\t_Optional_base(in_place_t, _Args&&... __args)\n+\t: _M_payload(in_place, std::forward<_Args>(__args)...)\n+\t{ }\n \n       template<typename _Up, typename... _Args,\n-               enable_if_t<is_constructible_v<_Tp,\n+\t       enable_if_t<is_constructible_v<_Tp,\n \t\t\t\t\t      initializer_list<_Up>&,\n-\t\t\t\t\t      _Args&&...>, bool> = false>\n-        constexpr explicit _Optional_base(in_place_t,\n-                                          initializer_list<_Up> __il,\n-                                          _Args&&... __args)\n-        : _M_payload(in_place,\n-\t\t     __il, std::forward<_Args>(__args)...)\n-        { }\n+\t\t\t\t\t      _Args...>, bool> = false>\n+\tconstexpr explicit\n+\t_Optional_base(in_place_t,\n+\t\t       initializer_list<_Up> __il,\n+\t\t       _Args&&... __args)\n+\t: _M_payload(in_place, __il, std::forward<_Args>(__args)...)\n+\t{ }\n \n       // Copy and move constructors.\n-      constexpr _Optional_base(const _Optional_base& __other)\n-\t: _M_payload(__other._M_payload._M_engaged,\n-\t\t     __other._M_payload)\n+      constexpr\n+      _Optional_base(const _Optional_base& __other)\n+      : _M_payload(__other._M_payload._M_engaged, __other._M_payload)\n       { }\n \n-      constexpr _Optional_base(_Optional_base&& __other)\n+      constexpr\n+      _Optional_base(_Optional_base&& __other)\n       noexcept(is_nothrow_move_constructible_v<_Tp>)\n-\t: _M_payload(__other._M_payload._M_engaged,\n-\t\t     std::move(__other._M_payload))\n+      : _M_payload(__other._M_payload._M_engaged,\n+\t\t   std::move(__other._M_payload))\n       { }\n \n       // Assignment operators.\n@@ -515,33 +517,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct _Optional_base<_Tp, false, true>\n-      : _Optional_base_impl<_Tp, _Optional_base<_Tp>>\n+    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>\n     {\n       // Constructors for disengaged optionals.\n       constexpr _Optional_base() = default;\n \n       // Constructors for engaged optionals.\n       template<typename... _Args,\n-\t       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>\n-        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n-        : _M_payload(in_place,\n-\t\t     std::forward<_Args>(__args)...) { }\n+\t       enable_if_t<is_constructible_v<_Tp, _Args...>, bool> = false>\n+\tconstexpr explicit\n+\t_Optional_base(in_place_t, _Args&&... __args)\n+\t: _M_payload(in_place, std::forward<_Args>(__args)...)\n+\t{ }\n \n       template<typename _Up, typename... _Args,\n-               enable_if_t<is_constructible_v<_Tp,\n+\t       enable_if_t<is_constructible_v<_Tp,\n \t\t\t\t\t      initializer_list<_Up>&,\n-\t\t\t\t\t      _Args&&...>, bool> = false>\n-        constexpr explicit _Optional_base(in_place_t,\n-                                          initializer_list<_Up> __il,\n-                                          _Args&&... __args)\n-        : _M_payload(in_place,\n-\t\t     __il, std::forward<_Args>(__args)...)\n-        { }\n+\t\t\t\t\t      _Args...>, bool> = false>\n+\tconstexpr explicit\n+\t_Optional_base(in_place_t,\n+\t\t       initializer_list<_Up> __il,\n+\t\t       _Args... __args)\n+\t: _M_payload(in_place, __il, std::forward<_Args>(__args)...)\n+\t{ }\n \n       // Copy and move constructors.\n       constexpr _Optional_base(const _Optional_base& __other)\n-\t: _M_payload(__other._M_payload._M_engaged,\n-\t\t     __other._M_payload)\n+      : _M_payload(__other._M_payload._M_engaged, __other._M_payload)\n       { }\n \n       constexpr _Optional_base(_Optional_base&& __other) = default;\n@@ -555,36 +557,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct _Optional_base<_Tp, true, false>\n-      : _Optional_base_impl<_Tp, _Optional_base<_Tp>>\n+    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>\n     {\n       // Constructors for disengaged optionals.\n       constexpr _Optional_base() = default;\n \n       // Constructors for engaged optionals.\n       template<typename... _Args,\n-\t       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>\n-        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n-        : _M_payload(in_place,\n-\t\t     std::forward<_Args>(__args)...) { }\n+\t       enable_if_t<is_constructible_v<_Tp, _Args...>, bool> = false>\n+\tconstexpr explicit\n+\t_Optional_base(in_place_t, _Args&&... __args)\n+\t: _M_payload(in_place, std::forward<_Args>(__args)...)\n+\t{ }\n \n       template<typename _Up, typename... _Args,\n-               enable_if_t<is_constructible_v<_Tp,\n+\t       enable_if_t<is_constructible_v<_Tp,\n \t\t\t\t\t      initializer_list<_Up>&,\n-\t\t\t\t\t      _Args&&...>, bool> = false>\n-        constexpr explicit _Optional_base(in_place_t,\n-                                          initializer_list<_Up> __il,\n-                                          _Args&&... __args)\n-        : _M_payload(in_place,\n-\t\t     __il, std::forward<_Args>(__args)...)\n-        { }\n+\t\t\t\t\t      _Args...>, bool> = false>\n+\tconstexpr explicit\n+\t_Optional_base(in_place_t,\n+\t\t       initializer_list<_Up> __il,\n+\t\t       _Args&&... __args)\n+\t: _M_payload(in_place, __il, std::forward<_Args>(__args)...)\n+\t{ }\n \n       // Copy and move constructors.\n       constexpr _Optional_base(const _Optional_base& __other) = default;\n \n-      constexpr _Optional_base(_Optional_base&& __other)\n+      constexpr\n+      _Optional_base(_Optional_base&& __other)\n       noexcept(is_nothrow_move_constructible_v<_Tp>)\n-\t: _M_payload(__other._M_payload._M_engaged,\n-\t\t     std::move(__other._M_payload))\n+      : _M_payload(__other._M_payload._M_engaged,\n+\t\t   std::move(__other._M_payload))\n       { }\n \n       // Assignment operators.\n@@ -596,28 +600,29 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp>\n     struct _Optional_base<_Tp, true, true>\n-      : _Optional_base_impl<_Tp, _Optional_base<_Tp>>\n+    : _Optional_base_impl<_Tp, _Optional_base<_Tp>>\n     {\n       // Constructors for disengaged optionals.\n       constexpr _Optional_base() = default;\n \n       // Constructors for engaged optionals.\n       template<typename... _Args,\n-\t       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>\n-        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n-        : _M_payload(in_place,\n-\t\t     std::forward<_Args>(__args)...) { }\n+\t       enable_if_t<is_constructible_v<_Tp, _Args...>, bool> = false>\n+\tconstexpr explicit\n+\t_Optional_base(in_place_t, _Args&&... __args)\n+\t: _M_payload(in_place, std::forward<_Args>(__args)...)\n+\t{ }\n \n       template<typename _Up, typename... _Args,\n-               enable_if_t<is_constructible_v<_Tp,\n+\t       enable_if_t<is_constructible_v<_Tp,\n \t\t\t\t\t      initializer_list<_Up>&,\n-\t\t\t\t\t      _Args&&...>, bool> = false>\n-        constexpr explicit _Optional_base(in_place_t,\n-                                          initializer_list<_Up> __il,\n-                                          _Args&&... __args)\n-        : _M_payload(in_place,\n-\t\t     __il, std::forward<_Args>(__args)...)\n-        { }\n+\t\t\t\t\t      _Args...>, bool> = false>\n+\tconstexpr explicit\n+\t_Optional_base(in_place_t,\n+\t\t       initializer_list<_Up> __il,\n+\t\t       _Args&&... __args)\n+\t: _M_payload(in_place, __il, std::forward<_Args>(__args)...)\n+\t{ }\n \n       // Copy and move constructors.\n       constexpr _Optional_base(const _Optional_base& __other) = default;\n@@ -694,21 +699,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Converting constructors for engaged optionals.\n       template<typename _Up = _Tp,\n \t       _Requires<__not_self<_Up>, __not_tag<_Up>,\n-\t\t\t is_constructible<_Tp, _Up&&>,\n-\t\t\t is_convertible<_Up&&, _Tp>> = true>\n+\t\t\t is_constructible<_Tp, _Up>,\n+\t\t\t is_convertible<_Up, _Tp>> = true>\n \tconstexpr\n \toptional(_Up&& __t)\n \tnoexcept(is_nothrow_constructible_v<_Tp, _Up>)\n \t: _Base(std::in_place, std::forward<_Up>(__t)) { }\n \n       template<typename _Up = _Tp,\n \t       _Requires<__not_self<_Up>, __not_tag<_Up>,\n-\t\t\t is_constructible<_Tp, _Up&&>,\n-\t\t\t __not_<is_convertible<_Up&&, _Tp>>> = false>\n+\t\t\t is_constructible<_Tp, _Up>,\n+\t\t\t __not_<is_convertible<_Up, _Tp>>> = false>\n \texplicit constexpr\n \toptional(_Up&& __t)\n \tnoexcept(is_nothrow_constructible_v<_Tp, _Up>)\n-        : _Base(std::in_place, std::forward<_Up>(__t)) { }\n+\t: _Base(std::in_place, std::forward<_Up>(__t)) { }\n \n       template<typename _Up,\n \t       _Requires<__not_<is_same<_Tp, _Up>>,\n@@ -736,11 +741,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    emplace(*__t);\n \t}\n \n-      template <typename _Up,\n-\t\t_Requires<__not_<is_same<_Tp, _Up>>,\n-\t\t\t  is_constructible<_Tp, _Up&&>,\n-\t\t\t  is_convertible<_Up&&, _Tp>,\n-\t\t\t  __not_<__converts_from_optional<_Tp, _Up>>> = true>\n+      template<typename _Up,\n+\t       _Requires<__not_<is_same<_Tp, _Up>>,\n+\t\t\t is_constructible<_Tp, _Up>,\n+\t\t\t is_convertible<_Up, _Tp>,\n+\t\t\t __not_<__converts_from_optional<_Tp, _Up>>> = true>\n \tconstexpr\n \toptional(optional<_Up>&& __t)\n \tnoexcept(is_nothrow_constructible_v<_Tp, _Up>)\n@@ -749,11 +754,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    emplace(std::move(*__t));\n \t}\n \n-      template <typename _Up,\n-\t\t_Requires<__not_<is_same<_Tp, _Up>>,\n-\t\t\t  is_constructible<_Tp, _Up&&>,\n-\t\t\t  __not_<is_convertible<_Up&&, _Tp>>,\n-\t\t\t  __not_<__converts_from_optional<_Tp, _Up>>> = false>\n+      template<typename _Up,\n+\t       _Requires<__not_<is_same<_Tp, _Up>>,\n+\t\t\t is_constructible<_Tp, _Up>,\n+\t\t\t __not_<is_convertible<_Up, _Tp>>,\n+\t\t\t __not_<__converts_from_optional<_Tp, _Up>>> = false>\n \texplicit constexpr\n \toptional(optional<_Up>&& __t)\n \tnoexcept(is_nothrow_constructible_v<_Tp, _Up>)\n@@ -763,7 +768,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename... _Args,\n-\t       _Requires<is_constructible<_Tp, _Args&&...>> = false>\n+\t       _Requires<is_constructible<_Tp, _Args...>> = false>\n \texplicit constexpr\n \toptional(in_place_t, _Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n@@ -772,7 +777,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Up, typename... _Args,\n \t       _Requires<is_constructible<_Tp,\n \t\t\t\t\t  initializer_list<_Up>&,\n-\t\t\t\t\t  _Args&&...>> = false>\n+\t\t\t\t\t  _Args...>> = false>\n \texplicit constexpr\n \toptional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Tp, initializer_list<_Up>&,\n@@ -833,7 +838,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Up>\n-        enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,\n+\tenable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,\n \t\t\t    is_constructible<_Tp, _Up>,\n \t\t\t    is_assignable<_Tp&, _Up>,\n \t\t\t    __not_<__converts_from_optional<_Tp, _Up>>,\n@@ -859,7 +864,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename... _Args>\n-\tenable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>\n+\tenable_if_t<is_constructible_v<_Tp, _Args...>, _Tp&>\n \templace(_Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Tp, _Args...>)\n \t{\n@@ -869,8 +874,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Up, typename... _Args>\n-\tenable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,\n-\t\t\t\t       _Args&&...>, _Tp&>\n+\tenable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>,\n+\t\t    _Tp&>\n \templace(initializer_list<_Up> __il, _Args&&... __args)\n \tnoexcept(is_nothrow_constructible_v<_Tp, initializer_list<_Up>&,\n \t\t\t\t\t    _Args...>)\n@@ -1246,17 +1251,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Hash.\n \n   template<typename _Tp, typename _Up = remove_const_t<_Tp>,\n-           bool = __poison_hash<_Up>::__enable_hash_call>\n+\t   bool = __poison_hash<_Up>::__enable_hash_call>\n     struct __optional_hash_call_base\n     {\n       size_t\n       operator()(const optional<_Tp>& __t) const\n       noexcept(noexcept(hash<_Up>{}(*__t)))\n       {\n-        // We pick an arbitrary hash for disengaged optionals which hopefully\n-        // usual values of _Tp won't typically hash to.\n-        constexpr size_t __magic_disengaged_hash = static_cast<size_t>(-3333);\n-        return __t ? hash<_Up>{}(*__t) : __magic_disengaged_hash;\n+\t// We pick an arbitrary hash for disengaged optionals which hopefully\n+\t// usual values of _Tp won't typically hash to.\n+\tconstexpr size_t __magic_disengaged_hash = static_cast<size_t>(-3333);\n+\treturn __t ? hash<_Up>{}(*__t) : __magic_disengaged_hash;\n       }\n     };\n "}]}