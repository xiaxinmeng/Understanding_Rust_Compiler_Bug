{"sha": "383f9b34d1ec7a7adf7d83c64c9c31daccdf5505", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgzZjliMzRkMWVjN2E3YWRmN2Q4M2M2NGM5YzMxZGFjY2RmNTUwNQ==", "commit": {"author": {"name": "Tejas Belagod", "email": "tejas.belagod@arm.com", "date": "2013-01-07T15:39:53Z"}, "committer": {"name": "Tejas Belagod", "email": "belagod@gcc.gnu.org", "date": "2013-01-07T15:39:53Z"}, "message": "arm_neon.h (vmovn_high_is16, [...]): Fix source operand number and update copyright.\n\n2013-01-07  Tejas Belagod  <tejas.belagod@arm.com>\n\n        * config/aarch64/arm_neon.h (vmovn_high_is16, vmovn_high_s32,\n        vmovn_high_s64, vmovn_high_u16, vmovn_high_u32, vmovn_high_u64,\n        vqmovn_high_s16, vqmovn_high_s32, vqmovn_high_s64, vqmovn_high_u16,\n        vqmovn_high_u32, vqmovn_high_u64, vqmovun_high_s16, vqmovun_high_s32,\n        vqmovun_high_s64): Fix source operand number and update copyright.\n\nFrom-SVN: r194977", "tree": {"sha": "8f743b845bff3da35f5ad6ce680c763b54bd5b98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f743b845bff3da35f5ad6ce680c763b54bd5b98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/383f9b34d1ec7a7adf7d83c64c9c31daccdf5505", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383f9b34d1ec7a7adf7d83c64c9c31daccdf5505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/383f9b34d1ec7a7adf7d83c64c9c31daccdf5505", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/383f9b34d1ec7a7adf7d83c64c9c31daccdf5505/comments", "author": {"login": "tejas-belagod-arm", "id": 92718852, "node_id": "U_kgDOBYbHBA", "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tejas-belagod-arm", "html_url": "https://github.com/tejas-belagod-arm", "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers", "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}", "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions", "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs", "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos", "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3626621a07bd682cb31ea832d2034776dde4e780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3626621a07bd682cb31ea832d2034776dde4e780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3626621a07bd682cb31ea832d2034776dde4e780"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "856265a842d215a49ba6c6bbedb77d120efd0535", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/383f9b34d1ec7a7adf7d83c64c9c31daccdf5505/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/383f9b34d1ec7a7adf7d83c64c9c31daccdf5505/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=383f9b34d1ec7a7adf7d83c64c9c31daccdf5505", "patch": "@@ -1,3 +1,11 @@\n+2013-01-07  Tejas Belagod  <tejas.belagod@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vmovn_high_is16, vmovn_high_s32,\n+\tvmovn_high_s64, vmovn_high_u16, vmovn_high_u32, vmovn_high_u64,\n+\tvqmovn_high_s16, vqmovn_high_s32, vqmovn_high_s64, vqmovn_high_u16,\n+\tvqmovn_high_u32, vqmovn_high_u64, vqmovun_high_s16, vqmovun_high_s32,\n+\tvqmovun_high_s64): Fix source operand number and update copyright.\n+\n 2013-01-07  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/55890"}, {"sha": "5a72029363d641197f67219028ce2813b0b96633", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/383f9b34d1ec7a7adf7d83c64c9c31daccdf5505/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/383f9b34d1ec7a7adf7d83c64c9c31daccdf5505/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=383f9b34d1ec7a7adf7d83c64c9c31daccdf5505", "patch": "@@ -1,6 +1,6 @@\n /* ARM NEON intrinsics include file.\n \n-   Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n+   Copyright (C) 2011-2013 Free Software Foundation, Inc.\n    Contributed by ARM Ltd.\n \n    This file is part of GCC.\n@@ -11647,7 +11647,7 @@ __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vmovn_high_s16 (int8x8_t a, int16x8_t b)\n {\n   int8x16_t result = vcombine_s8 (a, vcreate_s8 (UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.16b,%2.8h\"\n+  __asm__ (\"xtn2 %0.16b,%1.8h\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -11658,7 +11658,7 @@ __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vmovn_high_s32 (int16x4_t a, int32x4_t b)\n {\n   int16x8_t result = vcombine_s16 (a, vcreate_s16 (UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.8h,%2.4s\"\n+  __asm__ (\"xtn2 %0.8h,%1.4s\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -11669,7 +11669,7 @@ __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vmovn_high_s64 (int32x2_t a, int64x2_t b)\n {\n   int32x4_t result = vcombine_s32 (a, vcreate_s32 (UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.4s,%2.2d\"\n+  __asm__ (\"xtn2 %0.4s,%1.2d\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -11680,7 +11680,7 @@ __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vmovn_high_u16 (uint8x8_t a, uint16x8_t b)\n {\n   uint8x16_t result = vcombine_u8 (a, vcreate_u8 (UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.16b,%2.8h\"\n+  __asm__ (\"xtn2 %0.16b,%1.8h\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -11691,7 +11691,7 @@ __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vmovn_high_u32 (uint16x4_t a, uint32x4_t b)\n {\n   uint16x8_t result = vcombine_u16 (a, vcreate_u16 (UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.8h,%2.4s\"\n+  __asm__ (\"xtn2 %0.8h,%1.4s\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -11702,7 +11702,7 @@ __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vmovn_high_u64 (uint32x2_t a, uint64x2_t b)\n {\n   uint32x4_t result = vcombine_u32 (a, vcreate_u32 (UINT64_C (0x0)));\n-  __asm__ (\"xtn2 %0.4s,%2.2d\"\n+  __asm__ (\"xtn2 %0.4s,%1.2d\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14121,7 +14121,7 @@ __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vqmovn_high_s16 (int8x8_t a, int16x8_t b)\n {\n   int8x16_t result = vcombine_s8 (a, vcreate_s8 (UINT64_C (0x0)));\n-  __asm__ (\"sqxtn2 %0.16b, %2.8h\"\n+  __asm__ (\"sqxtn2 %0.16b, %1.8h\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14132,7 +14132,7 @@ __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vqmovn_high_s32 (int16x4_t a, int32x4_t b)\n {\n   int16x8_t result = vcombine_s16 (a, vcreate_s16 (UINT64_C (0x0)));\n-  __asm__ (\"sqxtn2 %0.8h, %2.4s\"\n+  __asm__ (\"sqxtn2 %0.8h, %1.4s\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14143,7 +14143,7 @@ __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vqmovn_high_s64 (int32x2_t a, int64x2_t b)\n {\n   int32x4_t result = vcombine_s32 (a, vcreate_s32 (UINT64_C (0x0)));\n-  __asm__ (\"sqxtn2 %0.4s, %2.2d\"\n+  __asm__ (\"sqxtn2 %0.4s, %1.2d\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14154,7 +14154,7 @@ __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vqmovn_high_u16 (uint8x8_t a, uint16x8_t b)\n {\n   uint8x16_t result = vcombine_u8 (a, vcreate_u8 (UINT64_C (0x0)));\n-  __asm__ (\"uqxtn2 %0.16b, %2.8h\"\n+  __asm__ (\"uqxtn2 %0.16b, %1.8h\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14165,7 +14165,7 @@ __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vqmovn_high_u32 (uint16x4_t a, uint32x4_t b)\n {\n   uint16x8_t result = vcombine_u16 (a, vcreate_u16 (UINT64_C (0x0)));\n-  __asm__ (\"uqxtn2 %0.8h, %2.4s\"\n+  __asm__ (\"uqxtn2 %0.8h, %1.4s\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14176,7 +14176,7 @@ __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vqmovn_high_u64 (uint32x2_t a, uint64x2_t b)\n {\n   uint32x4_t result = vcombine_u32 (a, vcreate_u32 (UINT64_C (0x0)));\n-  __asm__ (\"uqxtn2 %0.4s, %2.2d\"\n+  __asm__ (\"uqxtn2 %0.4s, %1.2d\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14187,7 +14187,7 @@ __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vqmovun_high_s16 (uint8x8_t a, int16x8_t b)\n {\n   uint8x16_t result = vcombine_u8 (a, vcreate_u8 (UINT64_C (0x0)));\n-  __asm__ (\"sqxtun2 %0.16b, %2.8h\"\n+  __asm__ (\"sqxtun2 %0.16b, %1.8h\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14198,7 +14198,7 @@ __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vqmovun_high_s32 (uint16x4_t a, int32x4_t b)\n {\n   uint16x8_t result = vcombine_u16 (a, vcreate_u16 (UINT64_C (0x0)));\n-  __asm__ (\"sqxtun2 %0.8h, %2.4s\"\n+  __asm__ (\"sqxtun2 %0.8h, %1.4s\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);\n@@ -14209,7 +14209,7 @@ __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vqmovun_high_s64 (uint32x2_t a, int64x2_t b)\n {\n   uint32x4_t result = vcombine_u32 (a, vcreate_u32 (UINT64_C (0x0)));\n-  __asm__ (\"sqxtun2 %0.4s, %2.2d\"\n+  __asm__ (\"sqxtun2 %0.4s, %1.2d\"\n            : \"+w\"(result)\n            : \"w\"(b)\n            : /* No clobbers */);"}]}