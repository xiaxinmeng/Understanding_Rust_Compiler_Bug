{"sha": "2ef59b981131e0fd8ef2c2b1c4862d490210390a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmNTliOTgxMTMxZTBmZDhlZjJjMmIxYzQ4NjJkNDkwMjEwMzkwYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-01-21T03:38:32Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-01-21T03:38:32Z"}, "message": "PR c/52291 - __sync_fetch_and_add and friends poorly specified for pointer\n\nPR c/52291 - __sync_fetch_and_add and friends poorly specified for pointer\n    types\n\n2016-01-20  Martin Sebor  <msebor@redhat.com>\n\n\t* extend.texi (__sync Builtins): Clarify the semantics of\n\t__sync_fetch_and_OP built-ins on pointers.\n\t(__atomic Builtins): Same.\n\nFrom-SVN: r232662", "tree": {"sha": "66227da772822c14fec8c7455d333c9ef41df4b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66227da772822c14fec8c7455d333c9ef41df4b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ef59b981131e0fd8ef2c2b1c4862d490210390a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef59b981131e0fd8ef2c2b1c4862d490210390a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef59b981131e0fd8ef2c2b1c4862d490210390a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef59b981131e0fd8ef2c2b1c4862d490210390a/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa28f32bbc18ca8a8c1dcc7bfd49db63e09af539"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "36a210a699a90d38fbdb9ab631ed0413bc3f70c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef59b981131e0fd8ef2c2b1c4862d490210390a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef59b981131e0fd8ef2c2b1c4862d490210390a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ef59b981131e0fd8ef2c2b1c4862d490210390a", "patch": "@@ -1,3 +1,10 @@\n+2016-01-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/52291\n+\t* extend.texi (__sync Builtins): Clarify the semantics of\n+\t__sync_fetch_and_OP built-ins on pointers.\n+\t(__atomic Builtins): Same.\n+\n 2016-01-21  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "e11ce4d3e5a26bc5fc9917cac1c2b06078241840", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef59b981131e0fd8ef2c2b1c4862d490210390a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef59b981131e0fd8ef2c2b1c4862d490210390a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2ef59b981131e0fd8ef2c2b1c4862d490210390a", "patch": "@@ -9262,8 +9262,11 @@ work on multiple types.\n \n The definition given in the Intel documentation allows only for the use of\n the types @code{int}, @code{long}, @code{long long} or their unsigned\n-counterparts.  GCC allows any integral scalar or pointer type that is\n-1, 2, 4 or 8 bytes in length.\n+counterparts.  GCC allows any scalar type that is 1, 2, 4 or 8 bytes in\n+size other than the C type @code{_Bool} or the C++ type @code{bool}.\n+Operations on pointer arguments are performed as if the operands were\n+of the @code{uintptr_t} type.  That is, they are not scaled by the size\n+of the type to which the pointer points.\n \n These functions are implemented in terms of the @samp{__atomic}\n builtins (@pxref{__atomic Builtins}).  They should not be used for new\n@@ -9309,7 +9312,11 @@ accessible variables should be protected.\n @findex __sync_fetch_and_xor\n @findex __sync_fetch_and_nand\n These built-in functions perform the operation suggested by the name, and\n-returns the value that had previously been in memory.  That is,\n+returns the value that had previously been in memory.  That is, operations\n+on integer operands have the following semantics.  Operations on pointer\n+arguments are performed as if the operands were of the @code{uintptr_t}\n+type.  That is, they are not scaled by the size of the type to which\n+the pointer points.\n \n @smallexample\n @{ tmp = *ptr; *ptr @var{op}= value; return tmp; @}\n@@ -9335,7 +9342,9 @@ as @code{*ptr = ~(tmp & value)} instead of @code{*ptr = ~tmp & value}.\n @findex __sync_xor_and_fetch\n @findex __sync_nand_and_fetch\n These built-in functions perform the operation suggested by the name, and\n-return the new value.  That is,\n+return the new value.  That is, operations on integer operands have\n+the following semantics.  Operations on pointer operands are performed as\n+if the operand's type were @code{uintptr_t}.\n \n @smallexample\n @{ *ptr @var{op}= value; return *ptr; @}\n@@ -9592,7 +9601,9 @@ pointer.\n @deftypefnx {Built-in Function} @var{type} __atomic_or_fetch (@var{type} *ptr, @var{type} val, int memorder)\n @deftypefnx {Built-in Function} @var{type} __atomic_nand_fetch (@var{type} *ptr, @var{type} val, int memorder)\n These built-in functions perform the operation suggested by the name, and\n-return the result of the operation.  That is,\n+return the result of the operation.  Operations on pointer arguments are\n+performed as if the operands were of the @code{uintptr_t} type.  That is,\n+they are not scaled by the size of the type to which the pointer points.\n \n @smallexample\n @{ *ptr @var{op}= val; return *ptr; @}\n@@ -9610,7 +9621,10 @@ type.  It must not be a Boolean type.  All memory orders are valid.\n @deftypefnx {Built-in Function} @var{type} __atomic_fetch_or (@var{type} *ptr, @var{type} val, int memorder)\n @deftypefnx {Built-in Function} @var{type} __atomic_fetch_nand (@var{type} *ptr, @var{type} val, int memorder)\n These built-in functions perform the operation suggested by the name, and\n-return the value that had previously been in @code{*@var{ptr}}.  That is,\n+return the value that had previously been in @code{*@var{ptr}}.  Operations\n+on pointer arguments are performed as if the operands were of\n+the @code{uintptr_t} type.  That is, they are not scaled by the size of\n+the type to which the pointer points.\n \n @smallexample\n @{ tmp = *ptr; *ptr @var{op}= val; return tmp; @}"}]}