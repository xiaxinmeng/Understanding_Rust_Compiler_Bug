{"sha": "53ce1d5ac9106bc7427f14c285d782c1023124ec", "node_id": "C_kwDOANBUbNoAKDUzY2UxZDVhYzkxMDZiYzc0MjdmMTRjMjg1ZDc4MmMxMDIzMTI0ZWM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-20T17:03:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-20T17:03:41Z"}, "message": "Add ExprStmt::ExprStmtType WITH_BLOCK and WITHOUT_BLOCK to allow switching", "tree": {"sha": "9a02918c29fd4ebfba57afc3556d74943551c98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a02918c29fd4ebfba57afc3556d74943551c98c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53ce1d5ac9106bc7427f14c285d782c1023124ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ce1d5ac9106bc7427f14c285d782c1023124ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ce1d5ac9106bc7427f14c285d782c1023124ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ce1d5ac9106bc7427f14c285d782c1023124ec/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eaec8530371eb736717ec02daad6c252332c159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eaec8530371eb736717ec02daad6c252332c159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eaec8530371eb736717ec02daad6c252332c159"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "9d95c3e27e8814fd9c973f523486ccc436c1a4ad", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ce1d5ac9106bc7427f14c285d782c1023124ec/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ce1d5ac9106bc7427f14c285d782c1023124ec/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=53ce1d5ac9106bc7427f14c285d782c1023124ec", "patch": "@@ -183,15 +183,23 @@ class LetStmt : public Stmt\n  * expression) */\n class ExprStmt : public Stmt\n {\n-  // TODO: add any useful virtual functions\n+public:\n+  enum ExprStmtType\n+  {\n+    WITH_BLOCK,\n+    WITHOUT_BLOCK\n+  };\n \n+protected:\n   Location locus;\n \n public:\n   Location get_locus () const override final { return locus; }\n \n   bool is_item () const override final { return false; }\n \n+  virtual ExprStmtType get_type () const = 0;\n+\n protected:\n   ExprStmt (Location locus) : locus (locus) {}\n };\n@@ -261,6 +269,11 @@ class ExprStmtWithoutBlock : public ExprStmt\n     return expr;\n   }\n \n+  ExprStmtType get_type () const override\n+  {\n+    return ExprStmtType::WITHOUT_BLOCK;\n+  };\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -328,6 +341,8 @@ class ExprStmtWithBlock : public ExprStmt\n \n   bool is_semicolon_followed () const { return semicolon_followed; }\n \n+  ExprStmtType get_type () const override { return ExprStmtType::WITH_BLOCK; };\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}]}