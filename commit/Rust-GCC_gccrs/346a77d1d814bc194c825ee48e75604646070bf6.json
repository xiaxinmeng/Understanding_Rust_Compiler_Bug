{"sha": "346a77d1d814bc194c825ee48e75604646070bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2YTc3ZDFkODE0YmMxOTRjODI1ZWU0OGU3NTYwNDY0NjA3MGJmNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-03-27T21:55:13Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-03-27T21:55:13Z"}, "message": "gfortran.h (enum init_local_real.): Add GFC_INIT_REAL_SNAN.\n\n2009-03-27  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.h (enum init_local_real.): Add GFC_INIT_REAL_SNAN.\n        (gfc_expr): Add is_snan.\n        * trans-const.c (gfc_conv_mpfr_to_tree): Support SNaN.\n        (gfc_conv_constant_to_tree): Update call to gfc_conv_mpfr_to_tree.\n        * trans-const.h (gfc_conv_mpfr_to_tree): Update prototype.\n        * resolve.c (build_default_init_expr): Update call.\n        * target-memory.c (encode_float): Ditto.\n        * trans-intrinsic.c\n        * (gfc_conv_intrinsic_aint,gfc_conv_intrinsic_mod,\n\nFrom-SVN: r145129", "tree": {"sha": "beaf8e8d8e61c21748269df6c2b92982034929d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beaf8e8d8e61c21748269df6c2b92982034929d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/346a77d1d814bc194c825ee48e75604646070bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346a77d1d814bc194c825ee48e75604646070bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346a77d1d814bc194c825ee48e75604646070bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346a77d1d814bc194c825ee48e75604646070bf6/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68599f330b29e9f1b0fd5bb1578741a5e663688d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68599f330b29e9f1b0fd5bb1578741a5e663688d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68599f330b29e9f1b0fd5bb1578741a5e663688d"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "77142877f66a3b403c1d29de2937509a7dd7a9f9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -1,3 +1,14 @@\n+2009-03-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (enum init_local_real.): Add GFC_INIT_REAL_SNAN.\n+\t(gfc_expr): Add is_snan.\n+\t* trans-const.c (gfc_conv_mpfr_to_tree): Support SNaN.\n+\t(gfc_conv_constant_to_tree): Update call to gfc_conv_mpfr_to_tree.\n+\t* trans-const.h (gfc_conv_mpfr_to_tree): Update prototype.\n+\t* resolve.c (build_default_init_expr): Update call.\n+\t* target-memory.c (encode_float): Ditto.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_aint,gfc_conv_intrinsic_mod,\n+\n 2009-03-18  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* lang.opt: Unify help texts for -I, -Wconversion, -d, -fopenmp,"}, {"sha": "a5b4fc6f0bed6f895e8d2cd114df40dfcb3e0be0", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -527,6 +527,7 @@ typedef enum\n   GFC_INIT_REAL_OFF = 0,\n   GFC_INIT_REAL_ZERO,\n   GFC_INIT_REAL_NAN,\n+  GFC_INIT_REAL_SNAN,\n   GFC_INIT_REAL_INF,\n   GFC_INIT_REAL_NEG_INF\n }\n@@ -1547,8 +1548,10 @@ typedef struct gfc_expr\n   locus where;\n \n   /* True if the expression is a call to a function that returns an array,\n-     and if we have decided not to allocate temporary data for that array.  */\n-  unsigned int inline_noncopying_intrinsic : 1, is_boz : 1;\n+     and if we have decided not to allocate temporary data for that array.\n+     is_boz is true if the integer is regarded as BOZ bitpatten and is_snan\n+     denotes a signalling not-a-number.  */\n+  unsigned int inline_noncopying_intrinsic : 1, is_boz : 1, is_snan : 1;\n \n   /* Sometimes, when an error has been emitted, it is necessary to prevent\n       it from recurring.  */"}, {"sha": "8138464a4f40cada50aca7160ca23021dbbf9974", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -169,7 +169,7 @@ and warnings}.\n -fmax-stack-var-size=@var{n} @gol\n -fpack-derived  -frepack-arrays  -fshort-enums  -fexternal-blas @gol\n -fblas-matmul-limit=@var{n} -frecursive -finit-local-zero @gol\n--finit-integer=@var{n} -finit-real=@var{<zero|inf|-inf|nan>} @gol\n+-finit-integer=@var{n} -finit-real=@var{<zero|inf|-inf|nan|snan>} @gol\n -finit-logical=@var{<true|false>} -finit-character=@var{n} -fno-align-commons}\n @end table\n \n@@ -1303,7 +1303,7 @@ on the stack. This flag cannot be used together with\n \n @item -finit-local-zero\n @item -finit-integer=@var{n}\n-@item -finit-real=@var{<zero|inf|-inf|nan>} \n+@item -finit-real=@var{<zero|inf|-inf|nan|snan>} \n @item -finit-logical=@var{<true|false>}\n @item -finit-character=@var{n}\n @opindex @code{finit-local-zero}\n@@ -1317,7 +1317,7 @@ variables to zero, @code{LOGICAL} variables to false, and\n @code{CHARACTER} variables to a string of null bytes.  Finer-grained\n initialization options are provided by the\n @option{-finit-integer=@var{n}},\n-@option{-finit-real=@var{<zero|inf|-inf|nan>}} (which also initializes\n+@option{-finit-real=@var{<zero|inf|-inf|nan|snan>}} (which also initializes\n the real and imaginary parts of local @code{COMPLEX} variables),\n @option{-finit-logical=@var{<true|false>}}, and\n @option{-finit-character=@var{n}} (where @var{n} is an ASCII character\n@@ -1327,7 +1327,10 @@ type variables, nor do they initialize variables that appear in an\n future releases).\n \n Note that the @option{-finit-real=nan} option initializes @code{REAL}\n-and @code{COMPLEX} variables with a quiet NaN.\n+and @code{COMPLEX} variables with a quiet NaN. For a signalling NaN\n+use @option{-finit-real=snan}; note, however, that compile-time\n+optimizations may convert them into quiet NaN and that trapping\n+needs to be enabled (e.g. via @option{-ffpe-trap}).\n \n @item -falign-commons\n @opindex @code{falign-commons}"}, {"sha": "d48bf24cdad8535b75e15ce79c64d1a7a4138003", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -718,6 +718,8 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n \tgfc_option.flag_init_real = GFC_INIT_REAL_ZERO;\n       else if (!strcasecmp (arg, \"nan\"))\n \tgfc_option.flag_init_real = GFC_INIT_REAL_NAN;\n+      else if (!strcasecmp (arg, \"snan\"))\n+\tgfc_option.flag_init_real = GFC_INIT_REAL_SNAN;\n       else if (!strcasecmp (arg, \"inf\"))\n \tgfc_option.flag_init_real = GFC_INIT_REAL_INF;\n       else if (!strcasecmp (arg, \"-inf\"))"}, {"sha": "e887fb13a6f5884bdc0ea0e35599fa7947f0708c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -7357,6 +7357,9 @@ build_default_init_expr (gfc_symbol *sym)\n       mpfr_init (init_expr->value.real);\n       switch (gfc_option.flag_init_real)\n \t{\n+\tcase GFC_INIT_REAL_SNAN:\n+\t  init_expr->is_snan = 1;\n+\t  /* Fall through.  */\n \tcase GFC_INIT_REAL_NAN:\n \t  mpfr_set_nan (init_expr->value.real);\n \t  break;\n@@ -7385,6 +7388,9 @@ build_default_init_expr (gfc_symbol *sym)\n       mpfr_init (init_expr->value.complex.i);\n       switch (gfc_option.flag_init_real)\n \t{\n+\tcase GFC_INIT_REAL_SNAN:\n+\t  init_expr->is_snan = 1;\n+\t  /* Fall through.  */\n \tcase GFC_INIT_REAL_NAN:\n \t  mpfr_set_nan (init_expr->value.complex.r);\n \t  mpfr_set_nan (init_expr->value.complex.i);"}, {"sha": "07d5e1943554e0f549b0b0df7d35eda3d9e9a176", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -158,7 +158,7 @@ encode_integer (int kind, mpz_t integer, unsigned char *buffer,\n static int\n encode_float (int kind, mpfr_t real, unsigned char *buffer, size_t buffer_size)\n {\n-  return native_encode_expr (gfc_conv_mpfr_to_tree (real, kind), buffer,\n+  return native_encode_expr (gfc_conv_mpfr_to_tree (real, kind, 0), buffer,\n \t\t\t     buffer_size);\n }\n "}, {"sha": "569aa7ec15e2850a04ab238c6ad4f4c7839a9ad4", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -218,7 +218,7 @@ gfc_conv_tree_to_mpz (mpz_t i, tree source)\n /* Converts a real constant into backend form.  */\n \n tree\n-gfc_conv_mpfr_to_tree (mpfr_t f, int kind)\n+gfc_conv_mpfr_to_tree (mpfr_t f, int kind, int is_snan)\n {\n   tree type;\n   int n;\n@@ -228,7 +228,11 @@ gfc_conv_mpfr_to_tree (mpfr_t f, int kind)\n   gcc_assert (gfc_real_kinds[n].radix == 2);\n \n   type = gfc_get_real_type (kind);\n-  real_from_mpfr (&real, f, type, GFC_RND_MODE);\n+  if (mpfr_nan_p (f) && is_snan)\n+     real_from_string (&real, \"SNaN\");\n+  else\n+    real_from_mpfr (&real, f, type, GFC_RND_MODE);\n+\n   return build_real (type, real);\n }\n \n@@ -277,7 +281,7 @@ gfc_conv_constant_to_tree (gfc_expr * expr)\n \t\t\t    gfc_build_string_const (expr->representation.length,\n \t\t\t\t\t\t    expr->representation.string));\n       else\n-\treturn gfc_conv_mpfr_to_tree (expr->value.real, expr->ts.kind);\n+\treturn gfc_conv_mpfr_to_tree (expr->value.real, expr->ts.kind, expr->is_snan);\n \n     case BT_LOGICAL:\n       if (expr->representation.string)\n@@ -304,9 +308,9 @@ gfc_conv_constant_to_tree (gfc_expr * expr)\n       else\n \t{\n \t  tree real = gfc_conv_mpfr_to_tree (expr->value.complex.r,\n-\t\t\t\t\t  expr->ts.kind);\n+\t\t\t\t\t  expr->ts.kind, expr->is_snan);\n \t  tree imag = gfc_conv_mpfr_to_tree (expr->value.complex.i,\n-\t\t\t\t\t  expr->ts.kind);\n+\t\t\t\t\t  expr->ts.kind, expr->is_snan);\n \n \t  return build_complex (gfc_typenode_for_spec (&expr->ts),\n \t\t\t\treal, imag);"}, {"sha": "6cc71c5faad8ebab91e290a14ed53d4354c524ae", "filename": "gcc/fortran/trans-const.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Ftrans-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Ftrans-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.h?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -24,7 +24,7 @@ tree gfc_conv_mpz_to_tree (mpz_t, int);\n void gfc_conv_tree_to_mpz (mpz_t, tree);\n \n /* Converts between REAL_CST and MPFR floating-point representations.  */\n-tree gfc_conv_mpfr_to_tree (mpfr_t, int);\n+tree gfc_conv_mpfr_to_tree (mpfr_t, int, int);\n void gfc_conv_tree_to_mpfr (mpfr_ptr, tree);\n \n /* Build a tree for a constant.  Must be an EXPR_CONSTANT gfc_expr."}, {"sha": "b63f193370d29aff9adbe10713b86e8b09a7ff1b", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346a77d1d814bc194c825ee48e75604646070bf6/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=346a77d1d814bc194c825ee48e75604646070bf6", "patch": "@@ -488,11 +488,11 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n   mpfr_init (huge);\n   n = gfc_validate_kind (BT_INTEGER, kind, false);\n   mpfr_set_z (huge, gfc_integer_kinds[n].huge, GFC_RND_MODE);\n-  tmp = gfc_conv_mpfr_to_tree (huge, kind);\n+  tmp = gfc_conv_mpfr_to_tree (huge, kind, 0);\n   cond = fold_build2 (LT_EXPR, boolean_type_node, arg[0], tmp);\n \n   mpfr_neg (huge, huge, GFC_RND_MODE);\n-  tmp = gfc_conv_mpfr_to_tree (huge, kind);\n+  tmp = gfc_conv_mpfr_to_tree (huge, kind, 0);\n   tmp = fold_build2 (GT_EXPR, boolean_type_node, arg[0], tmp);\n   cond = fold_build2 (TRUTH_AND_EXPR, boolean_type_node, cond, tmp);\n   itype = gfc_get_int_type (kind);\n@@ -1197,11 +1197,11 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n \t  ikind = gfc_max_integer_kind;\n \t}\n       mpfr_set_z (huge, gfc_integer_kinds[n].huge, GFC_RND_MODE);\n-      test = gfc_conv_mpfr_to_tree (huge, expr->ts.kind);\n+      test = gfc_conv_mpfr_to_tree (huge, expr->ts.kind, 0);\n       test2 = fold_build2 (LT_EXPR, boolean_type_node, tmp, test);\n \n       mpfr_neg (huge, huge, GFC_RND_MODE);\n-      test = gfc_conv_mpfr_to_tree (huge, expr->ts.kind);\n+      test = gfc_conv_mpfr_to_tree (huge, expr->ts.kind, 0);\n       test = fold_build2 (GT_EXPR, boolean_type_node, tmp, test);\n       test2 = fold_build2 (TRUTH_AND_EXPR, boolean_type_node, test, test2);\n \n@@ -2163,7 +2163,8 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, int op)\n   switch (arrayexpr->ts.type)\n     {\n     case BT_REAL:\n-      tmp = gfc_conv_mpfr_to_tree (gfc_real_kinds[n].huge, arrayexpr->ts.kind);\n+      tmp = gfc_conv_mpfr_to_tree (gfc_real_kinds[n].huge,\n+\t\t\t\t   arrayexpr->ts.kind, 0);\n       break;\n \n     case BT_INTEGER:\n@@ -2342,7 +2343,7 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, int op)\n   switch (expr->ts.type)\n     {\n     case BT_REAL:\n-      tmp = gfc_conv_mpfr_to_tree (gfc_real_kinds[n].huge, expr->ts.kind);\n+      tmp = gfc_conv_mpfr_to_tree (gfc_real_kinds[n].huge, expr->ts.kind, 0);\n       break;\n \n     case BT_INTEGER:\n@@ -3199,7 +3200,7 @@ gfc_conv_intrinsic_spacing (gfc_se * se, gfc_expr * expr)\n   k = gfc_validate_kind (BT_REAL, expr->ts.kind, false);\n   prec = build_int_cst (NULL_TREE, gfc_real_kinds[k].digits);\n   emin = build_int_cst (NULL_TREE, gfc_real_kinds[k].min_exponent - 1);\n-  tiny = gfc_conv_mpfr_to_tree (gfc_real_kinds[k].tiny, expr->ts.kind);\n+  tiny = gfc_conv_mpfr_to_tree (gfc_real_kinds[k].tiny, expr->ts.kind, 0);\n \n   switch (expr->ts.kind)\n     {"}]}