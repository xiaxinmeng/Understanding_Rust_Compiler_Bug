{"sha": "63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNjNWQ5MWFhZThjN2ExZThkZGU5YzU1MDAzNjZhZDc4ZWVkNGIzZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-09-18T19:53:36Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-09-18T19:53:36Z"}, "message": "* javax/naming/InitialContext.java: Reindented.\n\nFrom-SVN: r71535", "tree": {"sha": "374fcddca39583f634e003edd0ae4b5225115a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/374fcddca39583f634e003edd0ae4b5225115a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e/comments", "author": null, "committer": null, "parents": [{"sha": "1eeae5c1cd181f088021ade241b3ad956d8cd650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eeae5c1cd181f088021ade241b3ad956d8cd650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eeae5c1cd181f088021ade241b3ad956d8cd650"}], "stats": {"total": 284, "additions": 147, "deletions": 137}, "files": [{"sha": "ceddff9b5035091900c68112fa5d96c0fd927e05", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e", "patch": "@@ -1,3 +1,7 @@\n+2003-09-18  Tom Tromey  <tromey@redhat.com>\n+\n+\t* javax/naming/InitialContext.java: Reindented.\n+\n 2003-09-18  Dalibor Topic <robilad@kaffe.org>,\n \t    Helmer Kraemer <hkraemer@freenet.de>\n "}, {"sha": "715f30ad5cd75f2357bc03a08d223b73927a644e", "filename": "libjava/javax/naming/InitialContext.java", "status": "modified", "additions": 143, "deletions": 137, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e/libjava%2Fjavax%2Fnaming%2FInitialContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e/libjava%2Fjavax%2Fnaming%2FInitialContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fnaming%2FInitialContext.java?ref=63c5d91aae8c7a1e8dde9c5500366ad78eed4b3e", "patch": "@@ -1,5 +1,5 @@\n /* InitialContext.java --\n-   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -57,170 +57,176 @@ public class InitialContext implements Context\n   \n   public InitialContext (Hashtable environment)\n     throws NamingException\n-    {\n-      init (environment);\n-    }\n+  {\n+    init (environment);\n+  }\n   \n   protected InitialContext (boolean lazy)\n     throws NamingException\n-    {\n-      if (! lazy)\n-\tinit (null);\n-    }\n+  {\n+    if (! lazy)\n+      init (null);\n+  }\n   \n   public InitialContext ()\n     throws NamingException\n-    {\n-      init (null);\n-    }\n+  {\n+    init (null);\n+  }\n  \n   /** @since 1.3 */\n   protected void init (Hashtable environment)\n     throws NamingException\n-    {\n-      // FIXME: Is this enough?\n-      final String[] properties = {\n-\tContext.DNS_URL,\n-\tContext.INITIAL_CONTEXT_FACTORY,\n-\tContext.OBJECT_FACTORIES,\n-\tContext.PROVIDER_URL,\n-\tContext.STATE_FACTORIES,\n-\tContext.URL_PKG_PREFIXES,\n-      };\n+  {\n+    // FIXME: Is this enough?\n+    final String[] properties = {\n+      Context.DNS_URL,\n+      Context.INITIAL_CONTEXT_FACTORY,\n+      Context.OBJECT_FACTORIES,\n+      Context.PROVIDER_URL,\n+      Context.STATE_FACTORIES,\n+      Context.URL_PKG_PREFIXES,\n+    };\n       \n-      // Create myProps, cloning environment if needed.\n-      if (environment != null)\n-\tmyProps = (Hashtable) environment.clone ();\n-      else\n-\tmyProps = new Hashtable ();\n+    // Create myProps, cloning environment if needed.\n+    if (environment != null)\n+      myProps = (Hashtable) environment.clone ();\n+    else\n+      myProps = new Hashtable ();\n       \n-      Applet napplet = (Applet) myProps.get (Context.APPLET);\n+    Applet napplet = (Applet) myProps.get (Context.APPLET);\n       \n-      for (int i = properties.length - 1; i >= 0; i--)\n-\t{\n-\t  Object o = myProps.get (properties[i]);\n+    for (int i = properties.length - 1; i >= 0; i--)\n+      {\n+\tObject o = myProps.get (properties[i]);\n \t  \n-\t  if (o == null)\n-\t    {\n-\t      if (napplet != null)\n-\t\to = napplet.getParameter (properties[i]);\n-\t      if (o == null)\n-\t\to = System.getProperty (properties[i]);\n-\t      if (o != null)\n-\t\tmyProps.put (properties[i], o);\n-\t    }\n-\t}\n-      \n-      try\n-\t{\n-\t    Enumeration ep = Thread.currentThread().getContextClassLoader().getResources(\"jndi.naming\");\n-\t    while (ep.hasMoreElements ())\n-\t\t{\n-\t\t    URL url = (URL) ep.nextElement ();\n-\t\t    Properties p = new Properties ();\n+\tif (o == null)\n+\t  {\n+\t    if (napplet != null)\n+\t      o = napplet.getParameter (properties[i]);\n+\t    if (o == null)\n+\t      o = System.getProperty (properties[i]);\n+\t    if (o != null)\n+\t      myProps.put (properties[i], o);\n+\t  }\n+      }\n+\n+    try\n+      {\n+\tEnumeration ep = Thread.currentThread().getContextClassLoader().getResources(\"jndi.naming\");\n+\twhile (ep.hasMoreElements ())\n+\t  {\n+\t    URL url = (URL) ep.nextElement ();\n+\t    Properties p = new Properties ();\n \t\t    \n-\t\t    try {\n-\t\t\tInputStream is = url.openStream ();\n-\t\t\tp.load (is);\n-\t\t\tis.close ();\n-\t\t    } catch (IOException e) {}\n-\n-\t\t    merge (myProps, p);\n-\t\t}\n-\t}\n-      catch (IOException e) {}\n-\n-      String home = System.getProperty(\"gnu.classpath.home.url\");\n-      if (home != null)\n-\t{\n-\t  String url = home + \"/jndi.properties\";\n-\t  Properties p = new Properties ();\n+\t    try\n+\t      {\n+\t\tInputStream is = url.openStream ();\n+\t\tp.load (is);\n+\t\tis.close ();\n+\t      }\n+\t    catch (IOException e)\n+\t      {\n+\t      }\n+\n+\t    merge (myProps, p);\n+\t  }\n+      }\n+    catch (IOException e)\n+      {\n+      }\n+\n+    String home = System.getProperty(\"gnu.classpath.home.url\");\n+    if (home != null)\n+      {\n+\tString url = home + \"/jndi.properties\";\n+\tProperties p = new Properties ();\n \t\n-\t  try\n-\t    {\n-\t      InputStream is = new URL(url).openStream();\n-\t      p.load (is);\n-\t      is.close ();\n-\t    }\n-\t  catch (IOException e)\n-\t    {\n-\t      // Ignore.\n-\t    }\n-\n-\t  merge (myProps, p);\n-\t}\n-    }\n+\ttry\n+\t  {\n+\t    InputStream is = new URL(url).openStream();\n+\t    p.load (is);\n+\t    is.close ();\n+\t  }\n+\tcatch (IOException e)\n+\t  {\n+\t    // Ignore.\n+\t  }\n+\n+\tmerge (myProps, p);\n+      }\n+  }\n \n   // FIXME: Is this enough?\n   private static final String[] colon_list = \n-  {\n-    Context.OBJECT_FACTORIES,\n-    Context.URL_PKG_PREFIXES,\n-    Context.STATE_FACTORIES\n-  };\n+    {\n+      Context.OBJECT_FACTORIES,\n+      Context.URL_PKG_PREFIXES,\n+      Context.STATE_FACTORIES\n+    };\n \n   private static void merge (Hashtable h1, Hashtable h2)\n-    {\n-      Enumeration e2 = h2.keys();\n+  {\n+    Enumeration e2 = h2.keys();\n     \n-      while (e2.hasMoreElements())\n-\t{\n-\t  String key2 = (String) e2.nextElement();\n-\t  Object value1 = h1.get(key2);\n-\t  if (value1 == null)\n-\t    h1.put(key2, h2.get(key2));\n-\t  else if (key2.compareTo(colon_list[0]) == 0\n-\t\t   || key2.compareTo(colon_list[1]) == 0\n-\t\t   || key2.compareTo(colon_list[2]) == 0\n-\t\t   || key2.compareTo(colon_list[3]) == 0)\n-\t    {\n-\t      String value2 = (String) h2.get(key2);\n-\t      h1.put(key2, (String) value1 + \":\" + value2);\n-\t    }\n-\t}\n-    }\n+    while (e2.hasMoreElements())\n+      {\n+\tString key2 = (String) e2.nextElement();\n+\tObject value1 = h1.get(key2);\n+\tif (value1 == null)\n+\t  h1.put(key2, h2.get(key2));\n+\telse if (key2.compareTo(colon_list[0]) == 0\n+\t\t || key2.compareTo(colon_list[1]) == 0\n+\t\t || key2.compareTo(colon_list[2]) == 0\n+\t\t || key2.compareTo(colon_list[3]) == 0)\n+\t  {\n+\t    String value2 = (String) h2.get(key2);\n+\t    h1.put(key2, (String) value1 + \":\" + value2);\n+\t  }\n+      }\n+  }\n \n   protected Context getDefaultInitCtx () throws NamingException\n-    {\n-      if (! gotDefault)\n-\t{\n-\t  defaultInitCtx = NamingManager.getInitialContext (myProps);\n-\t  gotDefault = true;\n-\t}\n-      return defaultInitCtx;\n-    }\n+  {\n+    if (! gotDefault)\n+      {\n+\tdefaultInitCtx = NamingManager.getInitialContext (myProps);\n+\tgotDefault = true;\n+      }\n+    return defaultInitCtx;\n+  }\n \n \n   protected Context getURLOrDefaultInitCtx (Name name) \n-      throws NamingException\n-    {\n-      if (name.size () > 0)\n-\t  return getURLOrDefaultInitCtx (name.get (0));\n-      else\n-\t  return getDefaultInitCtx ();\n-    }\n+    throws NamingException\n+  {\n+    if (name.size () > 0)\n+      return getURLOrDefaultInitCtx (name.get (0));\n+    else\n+      return getDefaultInitCtx ();\n+  }\n \n   protected Context getURLOrDefaultInitCtx (String name) \n-      throws NamingException\n-    {\n-      String scheme = null;\n-\n-      if (NamingManager.hasInitialContextFactoryBuilder())\n-\treturn getDefaultInitCtx();\n-      int colon = name.indexOf(':');\n-      int slash = name.indexOf('/');\n-      if (colon > 0 && (slash == -1 || colon < slash))\n-\tscheme = name.substring(0, colon);\n-      if (scheme != null) \n-\t{\n-\t  Context context = \n-\t      NamingManager.getURLContext(scheme, myProps);\n-\t  if (context != null)\n-\t    return context;\n-\t}\n-\t\n+    throws NamingException\n+  {\n+    String scheme = null;\n+\n+    if (NamingManager.hasInitialContextFactoryBuilder())\n       return getDefaultInitCtx();\n-    }\n+    int colon = name.indexOf(':');\n+    int slash = name.indexOf('/');\n+    if (colon > 0 && (slash == -1 || colon < slash))\n+      scheme = name.substring(0, colon);\n+    if (scheme != null) \n+      {\n+\tContext context = \n+\t  NamingManager.getURLContext(scheme, myProps);\n+\tif (context != null)\n+\t  return context;\n+      }\n+\t\n+    return getDefaultInitCtx();\n+  }\n \n   public void bind (Name name, Object obj) throws NamingException\n   {\n@@ -338,13 +344,13 @@ public Name composeName (Name name, Name prefix) throws NamingException\n   }\n \n   public String composeName (String name, \n-                           String prefix) throws NamingException\n+\t\t\t     String prefix) throws NamingException\n   {\n     return getURLOrDefaultInitCtx (name).composeName (name, prefix);\n   }\n \n   public Object addToEnvironment (String propName, \n-                                Object propVal) throws NamingException\n+\t\t\t\t  Object propVal) throws NamingException\n   {\n     return myProps.put (propName, propVal);\n   }"}]}