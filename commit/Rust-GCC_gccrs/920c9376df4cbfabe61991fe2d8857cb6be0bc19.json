{"sha": "920c9376df4cbfabe61991fe2d8857cb6be0bc19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIwYzkzNzZkZjRjYmZhYmU2MTk5MWZlMmQ4ODU3Y2I2YmUwYmMxOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:48:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:48:10Z"}, "message": "s-tataat.adb, [...]: Replace calls to Defer/Undefer_Abortion by Defer/Undefer_Abort.\n\n\t* s-tataat.adb, a-tasatt.adb:\n\tReplace calls to Defer/Undefer_Abortion by Defer/Undefer_Abort.\n\n\t* s-tasini.ads, s-tasini.adb (Defer_Abortion, Undefer_Abortion): Moved\n\tthese procedures to body, and renamed Abort_Defer, Abort_Undefer.\n\t(Get_Exc_Stack_Addr, Set_Exc_Stack_Addr): Removed, no\n\tlonger used.\n\nFrom-SVN: r103851", "tree": {"sha": "f7462b20707db57d024d78ae3b2dcb8b3cdeb188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7462b20707db57d024d78ae3b2dcb8b3cdeb188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/920c9376df4cbfabe61991fe2d8857cb6be0bc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920c9376df4cbfabe61991fe2d8857cb6be0bc19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920c9376df4cbfabe61991fe2d8857cb6be0bc19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920c9376df4cbfabe61991fe2d8857cb6be0bc19/comments", "author": null, "committer": null, "parents": [{"sha": "10b93b2ef042757e76a53294442789b22c39599e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b93b2ef042757e76a53294442789b22c39599e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b93b2ef042757e76a53294442789b22c39599e"}], "stats": {"total": 146, "additions": 59, "deletions": 87}, "files": [{"sha": "5afab9eca4c9cc5e0c434d1d9f056091d25f992d", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920c9376df4cbfabe61991fe2d8857cb6be0bc19/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920c9376df4cbfabe61991fe2d8857cb6be0bc19/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=920c9376df4cbfabe61991fe2d8857cb6be0bc19", "patch": "@@ -419,17 +419,18 @@ package body Ada.Task_Attributes is\n \n       else\n          declare\n-            P : Access_Node := To_Access_Node (TT.Indirect_Attributes);\n-            W : Access_Wrapper;\n+            P       : Access_Node := To_Access_Node (TT.Indirect_Attributes);\n+            W       : Access_Wrapper;\n+            Self_Id : constant Task_Id := POP.Self;\n \n          begin\n-            Defer_Abortion;\n+            Defer_Abort (Self_Id);\n             POP.Lock_RTS;\n \n             while P /= null loop\n                if P.Instance = Access_Instance'(Local'Unchecked_Access) then\n                   POP.Unlock_RTS;\n-                  Undefer_Abortion;\n+                  Undefer_Abort (Self_Id);\n                   return To_Access_Wrapper (P.Wrapper).Value'Access;\n                end if;\n \n@@ -450,13 +451,13 @@ package body Ada.Task_Attributes is\n             P.Next := To_Access_Node (TT.Indirect_Attributes);\n             TT.Indirect_Attributes := To_Access_Address (P);\n             POP.Unlock_RTS;\n-            Undefer_Abortion;\n+            Undefer_Abort (Self_Id);\n             return W.Value'Access;\n \n          exception\n             when others =>\n                POP.Unlock_RTS;\n-               Undefer_Abortion;\n+               Undefer_Abort (Self_Id);\n                raise;\n          end;\n       end if;\n@@ -496,10 +497,12 @@ package body Ada.Task_Attributes is\n          Set_Value (Initial_Value, T);\n       else\n          declare\n-            P, Q : Access_Node;\n-            W    : Access_Wrapper;\n+            P, Q    : Access_Node;\n+            W       : Access_Wrapper;\n+            Self_Id : constant Task_Id := POP.Self;\n+\n          begin\n-            Defer_Abortion;\n+            Defer_Abort (Self_Id);\n             POP.Lock_RTS;\n             Q := To_Access_Node (TT.Indirect_Attributes);\n \n@@ -514,7 +517,7 @@ package body Ada.Task_Attributes is\n                   W := To_Access_Wrapper (Q.Wrapper);\n                   Free (W);\n                   POP.Unlock_RTS;\n-                  Undefer_Abortion;\n+                  Undefer_Abort (Self_Id);\n                   return;\n                end if;\n \n@@ -523,12 +526,12 @@ package body Ada.Task_Attributes is\n             end loop;\n \n             POP.Unlock_RTS;\n-            Undefer_Abortion;\n+            Undefer_Abort (Self_Id);\n \n          exception\n             when others =>\n                POP.Unlock_RTS;\n-               Undefer_Abortion;\n+               Undefer_Abort (Self_Id);\n                raise;\n          end;\n       end if;\n@@ -581,19 +584,20 @@ package body Ada.Task_Attributes is\n       --  Not directly addressed\n \n       declare\n-         P : Access_Node := To_Access_Node (TT.Indirect_Attributes);\n-         W : Access_Wrapper;\n+         P       : Access_Node := To_Access_Node (TT.Indirect_Attributes);\n+         W       : Access_Wrapper;\n+         Self_Id : constant Task_Id := POP.Self;\n \n       begin\n-         Defer_Abortion;\n+         Defer_Abort (Self_Id);\n          POP.Lock_RTS;\n \n          while P /= null loop\n \n             if P.Instance = Access_Instance'(Local'Unchecked_Access) then\n                To_Access_Wrapper (P.Wrapper).Value := Val;\n                POP.Unlock_RTS;\n-               Undefer_Abortion;\n+               Undefer_Abort (Self_Id);\n                return;\n             end if;\n \n@@ -613,12 +617,12 @@ package body Ada.Task_Attributes is\n          TT.Indirect_Attributes := To_Access_Address (P);\n \n          POP.Unlock_RTS;\n-         Undefer_Abortion;\n+         Undefer_Abort (Self_Id);\n \n       exception\n          when others =>\n             POP.Unlock_RTS;\n-            Undefer_Abortion;\n+            Undefer_Abort (Self_Id);\n             raise;\n       end;\n \n@@ -669,33 +673,34 @@ package body Ada.Task_Attributes is\n       --  Not directly addressed\n \n       declare\n-         P      : Access_Node;\n-         Result : Attribute;\n+         P       : Access_Node;\n+         Result  : Attribute;\n+         Self_Id : constant Task_Id := POP.Self;\n \n       begin\n-         Defer_Abortion;\n+         Defer_Abort (Self_Id);\n          POP.Lock_RTS;\n          P := To_Access_Node (TT.Indirect_Attributes);\n \n          while P /= null loop\n             if P.Instance = Access_Instance'(Local'Unchecked_Access) then\n                Result := To_Access_Wrapper (P.Wrapper).Value;\n                POP.Unlock_RTS;\n-               Undefer_Abortion;\n+               Undefer_Abort (Self_Id);\n                return Result;\n             end if;\n \n             P := P.Next;\n          end loop;\n \n          POP.Unlock_RTS;\n-         Undefer_Abortion;\n+         Undefer_Abort (Self_Id);\n          return Initial_Value;\n \n       exception\n          when others =>\n             POP.Unlock_RTS;\n-            Undefer_Abortion;\n+            Undefer_Abort (Self_Id);\n             raise;\n       end;\n \n@@ -720,8 +725,9 @@ begin\n \n    declare\n       Two_To_J : Direct_Index_Vector;\n+      Self_Id  : constant Task_Id := POP.Self;\n    begin\n-      Defer_Abortion;\n+      Defer_Abort (Self_Id);\n \n       --  Need protection for updating links to per-task initialization and\n       --  finalization routines, in case some task is being created or\n@@ -798,6 +804,6 @@ begin\n       end if;\n \n       POP.Unlock_RTS;\n-      Undefer_Abortion;\n+      Undefer_Abort (Self_Id);\n    end;\n end Ada.Task_Attributes;"}, {"sha": "3aff42725cc7c0b852fff687871576f39f8fb0ed", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 20, "deletions": 48, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920c9376df4cbfabe61991fe2d8857cb6be0bc19/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920c9376df4cbfabe61991fe2d8857cb6be0bc19/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=920c9376df4cbfabe61991fe2d8857cb6be0bc19", "patch": "@@ -43,10 +43,6 @@ pragma Polling (Off);\n with Ada.Exceptions;\n --  Used for Exception_Occurrence_Access\n \n-with System.Tasking;\n-pragma Elaborate_All (System.Tasking);\n---  Ensure that the first step initializations have been performed\n-\n with System.Task_Primitives;\n --  Used for Lock\n \n@@ -94,6 +90,12 @@ package body System.Tasking.Initialization is\n    -- Tasking versions of some services needed by non-tasking programs --\n    ----------------------------------------------------------------------\n \n+   procedure Abort_Defer;\n+   --  NON-INLINE versions without Self_ID for soft links\n+\n+   procedure Abort_Undefer;\n+   --  NON-INLINE versions without Self_ID for soft links\n+\n    procedure Task_Lock;\n    --  Locks out other tasks. Preceding a section of code by Task_Lock and\n    --  following it by Task_Unlock creates a critical region. This is used\n@@ -107,13 +109,6 @@ package body System.Tasking.Initialization is\n    --  all nested locks must be released before other tasks competing for the\n    --  tasking lock are released.\n \n-   function  Get_Exc_Stack_Addr return Address;\n-   --  Get the exception stack for the current task\n-\n-   procedure Set_Exc_Stack_Addr (Self_ID : Address; Addr : Address);\n-   --  Self_ID is the Task_Id of the task that gets the exception stack.\n-   --  For Self_ID = Null_Address, the current task gets the exception stack.\n-\n    function Get_Stack_Info return Stack_Checking.Stack_Access;\n    --  Get access to the current task's Stack_Info\n \n@@ -237,21 +232,20 @@ package body System.Tasking.Initialization is\n       Self_ID.Deferral_Level := Self_ID.Deferral_Level + 1;\n    end Defer_Abort_Nestable;\n \n-   --------------------\n-   -- Defer_Abortion --\n-   --------------------\n+   -----------------\n+   -- Abort_Defer --\n+   -----------------\n \n-   procedure Defer_Abortion is\n+   procedure Abort_Defer is\n       Self_ID : Task_Id;\n-\n    begin\n       if No_Abort and then not Dynamic_Priority_Support then\n          return;\n       end if;\n \n       Self_ID := STPO.Self;\n       Self_ID.Deferral_Level := Self_ID.Deferral_Level + 1;\n-   end Defer_Abortion;\n+   end Abort_Defer;\n \n    -----------------------\n    -- Do_Pending_Action --\n@@ -346,8 +340,9 @@ package body System.Tasking.Initialization is\n \n    procedure Init_RTS is\n       Self_Id : Task_Id;\n-\n    begin\n+      Tasking.Initialize;\n+\n       --  Terminate run time (regular vs restricted) specific initialization\n       --  of the environment task.\n \n@@ -381,21 +376,17 @@ package body System.Tasking.Initialization is\n       --  the tasking version of the soft links can be used.\n \n       if not No_Abort or else Dynamic_Priority_Support then\n-         SSL.Abort_Defer   := Defer_Abortion'Access;\n-         SSL.Abort_Undefer := Undefer_Abortion'Access;\n+         SSL.Abort_Defer   := Abort_Defer'Access;\n+         SSL.Abort_Undefer := Abort_Undefer'Access;\n       end if;\n \n       SSL.Update_Exception   := Update_Exception'Access;\n       SSL.Lock_Task          := Task_Lock'Access;\n       SSL.Unlock_Task        := Task_Unlock'Access;\n-      SSL.Get_Exc_Stack_Addr := Get_Exc_Stack_Addr'Access;\n-      SSL.Set_Exc_Stack_Addr := Set_Exc_Stack_Addr'Access;\n       SSL.Check_Abort_Status := Check_Abort_Status'Access;\n       SSL.Get_Stack_Info     := Get_Stack_Info'Access;\n       SSL.Task_Name          := Task_Name'Access;\n \n-      SSL.Set_Exc_Stack_Addr (Null_Address, SSL.Get_Exc_Stack_Addr_NT);\n-\n       --  Initialize the tasking soft links (if not done yet) that are common\n       --  to the full and the restricted run times.\n \n@@ -757,16 +748,12 @@ package body System.Tasking.Initialization is\n       end if;\n    end Undefer_Abort_Nestable;\n \n-   ----------------------\n-   -- Undefer_Abortion --\n-   ----------------------\n-\n-   --  Phase out RTS-internal use of Undefer_Abortion to reduce overhead due\n-   --  to multiple calls to Self.\n+   -------------------\n+   -- Abort_Undefer --\n+   -------------------\n \n-   procedure Undefer_Abortion is\n+   procedure Abort_Undefer is\n       Self_ID : Task_Id;\n-\n    begin\n       if No_Abort and then not Dynamic_Priority_Support then\n          return;\n@@ -800,7 +787,7 @@ package body System.Tasking.Initialization is\n             Do_Pending_Action (Self_ID);\n          end if;\n       end if;\n-   end Undefer_Abortion;\n+   end Abort_Undefer;\n \n    ----------------------\n    -- Update_Exception --\n@@ -908,26 +895,11 @@ package body System.Tasking.Initialization is\n    -- Soft-Link Bodies --\n    ----------------------\n \n-   function Get_Exc_Stack_Addr return Address is\n-   begin\n-      return STPO.Self.Common.Compiler_Data.Exc_Stack_Addr;\n-   end Get_Exc_Stack_Addr;\n-\n    function Get_Stack_Info return Stack_Checking.Stack_Access is\n    begin\n       return STPO.Self.Common.Compiler_Data.Pri_Stack_Info'Access;\n    end Get_Stack_Info;\n \n-   procedure Set_Exc_Stack_Addr (Self_ID : Address; Addr : Address) is\n-      Me : Task_Id := To_Task_Id (Self_ID);\n-   begin\n-      if Me = Null_Task then\n-         Me := STPO.Self;\n-      end if;\n-\n-      Me.Common.Compiler_Data.Exc_Stack_Addr := Addr;\n-   end Set_Exc_Stack_Addr;\n-\n    -----------------------\n    -- Soft-Link Dummies --\n    -----------------------"}, {"sha": "bacde3c19d5bb395ff1411437c821c375af17b6d", "filename": "gcc/ada/s-tasini.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920c9376df4cbfabe61991fe2d8857cb6be0bc19/gcc%2Fada%2Fs-tasini.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920c9376df4cbfabe61991fe2d8857cb6be0bc19/gcc%2Fada%2Fs-tasini.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.ads?ref=920c9376df4cbfabe61991fe2d8857cb6be0bc19", "patch": "@@ -120,14 +120,6 @@ package System.Tasking.Initialization is\n    procedure Undefer_Abort_Nestable (Self_ID : Task_Id);\n    pragma Inline (Undefer_Abort_Nestable);\n \n-   --  NON-INLINE versions without Self_ID for code generated by the\n-   --  expander and for soft links\n-\n-   procedure Defer_Abortion;\n-   procedure Undefer_Abortion;\n-\n-   --  Try to phase out all uses of the above versions ???\n-\n    procedure Do_Pending_Action (Self_ID : Task_Id);\n    --  Only call with no locks, and when Self_ID.Pending_Action = True Perform\n    --  necessary pending actions (e.g. abort, priority change). This procedure"}, {"sha": "528de085c9022532702b7b29688342cd7ce856b5", "filename": "gcc/ada/s-tataat.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920c9376df4cbfabe61991fe2d8857cb6be0bc19/gcc%2Fada%2Fs-tataat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920c9376df4cbfabe61991fe2d8857cb6be0bc19/gcc%2Fada%2Fs-tataat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.adb?ref=920c9376df4cbfabe61991fe2d8857cb6be0bc19", "patch": "@@ -61,9 +61,10 @@ package body System.Tasking.Task_Attributes is\n \n    procedure Finalize (X : in out Instance) is\n       Q, To_Be_Freed : Access_Node;\n+      Self_Id        : constant Task_Id := Self;\n \n    begin\n-      Defer_Abortion;\n+      Defer_Abort (Self_Id);\n       Lock_RTS;\n \n       --  Remove this instantiation from the list of all instantiations.\n@@ -142,7 +143,7 @@ package body System.Tasking.Task_Attributes is\n          X.Deallocate.all (Q);\n       end loop;\n \n-      Undefer_Abortion;\n+      Undefer_Abort (Self_Id);\n \n    exception\n       when others =>\n@@ -186,10 +187,11 @@ package body System.Tasking.Task_Attributes is\n    --  This is to be called by System.Tasking.Stages.Create_Task\n \n    procedure Initialize_Attributes (T : Task_Id) is\n-      P : Access_Instance;\n+      P       : Access_Instance;\n+      Self_Id : constant Task_Id := Self;\n \n    begin\n-      Defer_Abortion;\n+      Defer_Abort (Self_Id);\n       Lock_RTS;\n \n       --  Initialize all the direct-access attributes of this task\n@@ -207,7 +209,7 @@ package body System.Tasking.Task_Attributes is\n       end loop;\n \n       Unlock_RTS;\n-      Undefer_Abortion;\n+      Undefer_Abort (Self_Id);\n \n    exception\n       when others =>"}]}