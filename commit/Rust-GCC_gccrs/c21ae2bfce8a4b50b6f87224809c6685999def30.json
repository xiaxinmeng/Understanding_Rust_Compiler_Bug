{"sha": "c21ae2bfce8a4b50b6f87224809c6685999def30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxYWUyYmZjZThhNGI1MGI2Zjg3MjI0ODA5YzY2ODU5OTlkZWYzMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-07-02T20:34:27Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-07-02T20:34:27Z"}, "message": "Object1.h: Correct Line endings.\n\n\n\t* objc-obj-c++-shared/Object1.h: Correct Line endings.\n\nFrom-SVN: r161743", "tree": {"sha": "9d894bbccfbc25bc511076abc98afbe44faa8adb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d894bbccfbc25bc511076abc98afbe44faa8adb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21ae2bfce8a4b50b6f87224809c6685999def30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21ae2bfce8a4b50b6f87224809c6685999def30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21ae2bfce8a4b50b6f87224809c6685999def30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21ae2bfce8a4b50b6f87224809c6685999def30/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "416f380b0de93075cdf0e968ad76f1c102db5dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/416f380b0de93075cdf0e968ad76f1c102db5dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/416f380b0de93075cdf0e968ad76f1c102db5dd7"}], "stats": {"total": 155, "additions": 154, "deletions": 1}, "files": [{"sha": "a6c252c07d7b60468a7b76c5db9c7a4320eced9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21ae2bfce8a4b50b6f87224809c6685999def30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21ae2bfce8a4b50b6f87224809c6685999def30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c21ae2bfce8a4b50b6f87224809c6685999def30", "patch": "@@ -1,3 +1,7 @@\n+2010-07-02  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc-obj-c++-shared/Object1.h: Correct Line endings.\n+\n 2010-07-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/44780"}, {"sha": "324b6807cf3f7cb457a8abbdbafe85e4399623f9", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.h", "status": "modified", "additions": 150, "deletions": 1, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21ae2bfce8a4b50b6f87224809c6685999def30/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21ae2bfce8a4b50b6f87224809c6685999def30/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.h?ref=c21ae2bfce8a4b50b6f87224809c6685999def30", "patch": "@@ -1 +1,150 @@\n-/* Object definition taken from <objc/Object.h>\r */\r#ifndef _OBJC_OBJECT1_H_\r#define _OBJC_OBJECT1_H_\r\r#undef DO_NEXT_M64_OBJECT_IMPLEMENTATION\r\r#ifndef __NEXT_RUNTIME__\r#  include <objc/Object.h>\r#else\r#  include \"next-abi.h\"\r#  ifndef NEXT_OBJC_USE_NEW_INTERFACE\r/* We are on a next system, or version, that is happy to compile V0 ABI */\r#    include <objc/Object.h>\r#  else\r#    if (NEXT_OBJC_ABI_VERSION==0)\r/* We are on a system that has V0 ABI implementation in libobjc.dylib.\r * However, we need to use the new accessors and pretend that the \r * structures are opaque to avoid 'deprecated' warnings\r */\r#      include <objc/Object.h>\r#    else\r/* We are on a system that includes a V2 ABI Object in libobjc.dylib.\r*/\r#      ifdef __OBJC2__\r/* ... and we have a V2 ABI compiler ..  */\r#        include <objc/Object.h>\r#      else\r/* We can't access the Object definition in libobjc.dylib because\r * we can't yet generate OBJC2 code.\r *\r * So we'll roll our own Object - purely for the sake of compile\r * checks - the code is unlikely to run...\r*/\r#        ifndef _OBJC_OBJECT_H_\r#        define _OBJC_OBJECT_H_\r\r#include <stdarg.h>\r#import <objc/objc-runtime.h>\r\r/* This is a cut-down Object with only the methods currently required\r   by the testsuite declared.\r   \r   For those executables that require an implementation (to link) this\r   can be provided in a given test by placing:\r   #include \"path/to/objc-c++shared/Object1-implementation.h\"\r   at the end of the source for the test.\r*/\r\r@interface Object \r{\r\tClass isa; /* A pointer to the instance's class structure */\r}\r+ initialize;\r- init;\r\r+ new;\r+ free;\r- free;\r+ alloc;\r//- copy;\r//+ allocFromZone:(void *)zone;\r//- copyFromZone:(void *)zone;\r//- (void *)zone;\r\r+ class;\r//+ superclass;\r//+ (const char *) name;\r- class;\r- superclass;\r- (const char *) name;\r\r//- self;\r//- (unsigned int) hash;\r//-(BOOL) isEqual:anObject;\r\r/* Testing inheritance relationships */\r\r//- (BOOL) isKindOf: aClassObject;\r//- (BOOL) isMemberOf: aClassObject;\r//- (BOOL) isKindOfClassNamed: (const char *)aClassName;\r//- (BOOL) isMemberOfClassNamed: (const char *)aClassName;\r\r/* Testing class functionality */\r\r//+ (BOOL) instancesRespondTo:(SEL)aSelector;\r//- (BOOL) respondsTo:(SEL)aSelector;\r\r/* Testing protocol conformance */\r\r- (BOOL) conformsTo: (Protocol *)aProtocolObject;\r//+ (BOOL) conformsTo: (Protocol *)aProtocolObject;\r\r/* Obtaining method descriptors from protocols */\r\r//- (struct objc_method_description *) descriptionForMethod:(SEL)aSel;\r//+ (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel;\r\r/* Obtaining method handles */\r\r//- (IMP) methodFor:(SEL)aSelector;\r//+ (IMP) instanceMethodFor:(SEL)aSelector;\r\r/* Sending messages determined at run time */\r\r//- perform:(SEL)aSelector;\r//- perform:(SEL)aSelector with:anObject;\r//- perform:(SEL)aSelector with:object1 with:object2;\r\r/* Posing */\r\r//+ poseAs: aClassObject;\r\r/* Enforcing intentions */\r \r//- subclassResponsibility:(SEL)aSelector;\r//- notImplemented:(SEL)aSelector;\r\r/* Error handling */\r\r//- doesNotRecognize:(SEL)aSelector;\r//- error:(const char *)aString, ...;\r\r/* Debugging */\r\r//- (void) printForDebugger:(void *)stream;\r\r/* Archiving */\r\r//- awake;\r//- write:(void *)stream;\r//- read:(void *)stream;\r//+ (int) version;\r//+ setVersion: (int) aVersion;\r\r/* Forwarding */\r\r//- forward: (SEL)sel : (marg_list)args;\r//- performv: (SEL)sel : (marg_list)args;\r\r@end\r\r#define DO_NEXT_M64_OBJECT_IMPLEMENTATION\r\r#        endif /* _OBJC_OBJECT_H_ */\r#      endif /* __OBJC2__ */\r#      endif /* ABI=0 */\r#    endif /* NEXT_OBJC_USE_NEW_INTERFACE */\r#   endif /* __NEXT_RUNTIME__ */\r#endif /* _OBJC_OBJECT1_H_ */\r\n\\ No newline at end of file\n+/* Object definition taken from <objc/Object.h>\n+ */\n+#ifndef _OBJC_OBJECT1_H_\n+#define _OBJC_OBJECT1_H_\n+\n+#undef DO_NEXT_M64_OBJECT_IMPLEMENTATION\n+\n+#ifndef __NEXT_RUNTIME__\n+#  include <objc/Object.h>\n+#else\n+#  include \"next-abi.h\"\n+#  ifndef NEXT_OBJC_USE_NEW_INTERFACE\n+/* We are on a next system, or version, that is happy to compile V0 ABI */\n+#    include <objc/Object.h>\n+#  else\n+#    if (NEXT_OBJC_ABI_VERSION==0)\n+/* We are on a system that has V0 ABI implementation in libobjc.dylib.\n+ * However, we need to use the new accessors and pretend that the \n+ * structures are opaque to avoid 'deprecated' warnings\n+ */\n+#      include <objc/Object.h>\n+#    else\n+/* We are on a system that includes a V2 ABI Object in libobjc.dylib.\n+*/\n+#      ifdef __OBJC2__\n+/* ... and we have a V2 ABI compiler ..  */\n+#        include <objc/Object.h>\n+#      else\n+/* We can't access the Object definition in libobjc.dylib because\n+ * we can't yet generate OBJC2 code.\n+ *\n+ * So we'll roll our own Object - purely for the sake of compile\n+ * checks - the code is unlikely to run...\n+*/\n+#        ifndef _OBJC_OBJECT_H_\n+#        define _OBJC_OBJECT_H_\n+\n+#include <stdarg.h>\n+#import <objc/objc-runtime.h>\n+\n+/* This is a cut-down Object with only the methods currently required\n+   by the testsuite declared.\n+   \n+   For those executables that require an implementation (to link) this\n+   can be provided in a given test by placing:\n+   #include \"path/to/objc-c++shared/Object1-implementation.h\"\n+   at the end of the source for the test.\n+*/\n+\n+@interface Object \n+{\n+\tClass isa; /* A pointer to the instance's class structure */\n+}\n++ initialize;\n+- init;\n+\n++ new;\n++ free;\n+- free;\n++ alloc;\n+//- copy;\n+//+ allocFromZone:(void *)zone;\n+//- copyFromZone:(void *)zone;\n+//- (void *)zone;\n+\n++ class;\n+//+ superclass;\n+//+ (const char *) name;\n+- class;\n+- superclass;\n+- (const char *) name;\n+\n+//- self;\n+//- (unsigned int) hash;\n+//-(BOOL) isEqual:anObject;\n+\n+/* Testing inheritance relationships */\n+\n+//- (BOOL) isKindOf: aClassObject;\n+//- (BOOL) isMemberOf: aClassObject;\n+//- (BOOL) isKindOfClassNamed: (const char *)aClassName;\n+//- (BOOL) isMemberOfClassNamed: (const char *)aClassName;\n+\n+/* Testing class functionality */\n+\n+//+ (BOOL) instancesRespondTo:(SEL)aSelector;\n+//- (BOOL) respondsTo:(SEL)aSelector;\n+\n+/* Testing protocol conformance */\n+\n+- (BOOL) conformsTo: (Protocol *)aProtocolObject;\n+//+ (BOOL) conformsTo: (Protocol *)aProtocolObject;\n+\n+/* Obtaining method descriptors from protocols */\n+\n+//- (struct objc_method_description *) descriptionForMethod:(SEL)aSel;\n+//+ (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel;\n+\n+/* Obtaining method handles */\n+\n+//- (IMP) methodFor:(SEL)aSelector;\n+//+ (IMP) instanceMethodFor:(SEL)aSelector;\n+\n+/* Sending messages determined at run time */\n+\n+//- perform:(SEL)aSelector;\n+//- perform:(SEL)aSelector with:anObject;\n+//- perform:(SEL)aSelector with:object1 with:object2;\n+\n+/* Posing */\n+\n+//+ poseAs: aClassObject;\n+\n+/* Enforcing intentions */\n+ \n+//- subclassResponsibility:(SEL)aSelector;\n+//- notImplemented:(SEL)aSelector;\n+\n+/* Error handling */\n+\n+//- doesNotRecognize:(SEL)aSelector;\n+//- error:(const char *)aString, ...;\n+\n+/* Debugging */\n+\n+//- (void) printForDebugger:(void *)stream;\n+\n+/* Archiving */\n+\n+//- awake;\n+//- write:(void *)stream;\n+//- read:(void *)stream;\n+//+ (int) version;\n+//+ setVersion: (int) aVersion;\n+\n+/* Forwarding */\n+\n+//- forward: (SEL)sel : (marg_list)args;\n+//- performv: (SEL)sel : (marg_list)args;\n+\n+@end\n+\n+#define DO_NEXT_M64_OBJECT_IMPLEMENTATION\n+\n+#        endif /* _OBJC_OBJECT_H_ */\n+#      endif /* __OBJC2__ */\n+#      endif /* ABI=0 */\n+#    endif /* NEXT_OBJC_USE_NEW_INTERFACE */\n+#   endif /* __NEXT_RUNTIME__ */\n+#endif /* _OBJC_OBJECT1_H_ */"}]}