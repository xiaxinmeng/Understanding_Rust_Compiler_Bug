{"sha": "d7f9440126bb66732dced069c6cc61ea136c1f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmOTQ0MDEyNmJiNjY3MzJkY2VkMDY5YzZjYzYxZWExMzZjMWY1Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:55:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:55:51Z"}, "message": "[multiple changes]\n\n2009-04-20  Bob Duff  <duff@adacore.com>\n\n\t* rtsfind.adb: Minor comment fix\n\n2009-04-20  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_aggr.adb: Minor reformatting\n\tMinor code reorganization (use Nkind_In)\n\n\t* g-socket.adb: Minor reformatting\n\n\t* g-socket.ads: Minor comment fix\n\n\t* s-auxdec.ads: Minor comment and organization update.\n\n\t* s-auxdec-vms_64.ads: Minor comment and organization update.\n\n\t* sem_ch10.adb: Minor addition of ??? comment\n\n\t* sem_disp.adb: Minor reformatting\n\nFrom-SVN: r146375", "tree": {"sha": "d3d43f7a558b700ce77e85a82786d8e77509880d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3d43f7a558b700ce77e85a82786d8e77509880d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f9440126bb66732dced069c6cc61ea136c1f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f9440126bb66732dced069c6cc61ea136c1f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f9440126bb66732dced069c6cc61ea136c1f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f9440126bb66732dced069c6cc61ea136c1f57/comments", "author": null, "committer": null, "parents": [{"sha": "f8b86c2d808dadbb9143adacc1b0c162dbf58e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b86c2d808dadbb9143adacc1b0c162dbf58e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b86c2d808dadbb9143adacc1b0c162dbf58e1a"}], "stats": {"total": 120, "additions": 69, "deletions": 51}, "files": [{"sha": "ef790b22cf7ab9d67c379b4e795f80a9e074586a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -1,3 +1,24 @@\n+2009-04-20  Bob Duff  <duff@adacore.com>\n+\n+\t* rtsfind.adb: Minor comment fix\n+\n+2009-04-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_aggr.adb: Minor reformatting\n+\tMinor code reorganization (use Nkind_In)\n+\n+\t* g-socket.adb: Minor reformatting\n+\n+\t* g-socket.ads: Minor comment fix\n+\n+\t* s-auxdec.ads: Minor comment and organization update.\n+\n+\t* s-auxdec-vms_64.ads: Minor comment and organization update.\n+\n+\t* sem_ch10.adb: Minor addition of ??? comment\n+\n+\t* sem_disp.adb: Minor reformatting\n+\n 2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* inline.adb (Add_Inlined_Subprogram): Do not place on the back-end"}, {"sha": "9200165b844d8fb28f671f7b0d60aa8f7e00b23b", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -1069,16 +1069,14 @@ package body Exp_Aggr is\n          --  default initialized components (otherwise Expr_Q is not present).\n \n          if Present (Expr_Q)\n-           and then (Nkind (Expr_Q) = N_Aggregate\n-                     or else Nkind (Expr_Q) = N_Extension_Aggregate)\n+           and then Nkind_In (Expr_Q, N_Aggregate, N_Extension_Aggregate)\n          then\n-            --  At this stage the Expression may not have been\n-            --  analyzed yet because the array aggregate code has not\n-            --  been updated to use the Expansion_Delayed flag and\n-            --  avoid analysis altogether to solve the same problem\n-            --  (see Resolve_Aggr_Expr). So let us do the analysis of\n-            --  non-array aggregates now in order to get the value of\n-            --  Expansion_Delayed flag for the inner aggregate ???\n+            --  At this stage the Expression may not have been analyzed yet\n+            --  because the array aggregate code has not been updated to use\n+            --  the Expansion_Delayed flag and avoid analysis altogether to\n+            --  solve the same problem (see Resolve_Aggr_Expr). So let us do\n+            --  the analysis of non-array aggregates now in order to get the\n+            --  value of Expansion_Delayed flag for the inner aggregate ???\n \n             if Present (Comp_Type) and then not Is_Array_Type (Comp_Type) then\n                Analyze_And_Resolve (Expr_Q, Comp_Type);\n@@ -2551,10 +2549,8 @@ package body Exp_Aggr is\n             --  of one such.\n \n             elsif Is_Limited_Type (Etype (A))\n-              and then (Nkind (Unqualify (A)) = N_Aggregate\n-                          or else\n-                        Nkind (Unqualify (A)) = N_Extension_Aggregate)\n-              and then Nkind (Unqualify (A)) /= N_Explicit_Dereference\n+              and then Nkind_In (Unqualify (A), N_Aggregate,\n+                                                N_Extension_Aggregate)\n             then\n                Ancestor_Is_Expression := True;\n \n@@ -2589,8 +2585,8 @@ package body Exp_Aggr is\n                --  If the ancestor part is an aggregate, force its full\n                --  expansion, which was delayed.\n \n-               if Nkind (Unqualify (A)) = N_Aggregate\n-                 or else Nkind (Unqualify (A)) = N_Extension_Aggregate\n+               if Nkind_In (Unqualify (A), N_Aggregate,\n+                                           N_Extension_Aggregate)\n                then\n                   Set_Analyzed (A, False);\n                   Set_Analyzed (Expression (A), False);\n@@ -3495,7 +3491,7 @@ package body Exp_Aggr is\n            (Is_Inherently_Limited_Type (Typ)\n              and then\n                (Nkind (Parent (Parent_Node)) = N_Extended_Return_Statement\n-                  or else Nkind (Parent_Node) = N_Simple_Return_Statement))\n+                 or else Nkind (Parent_Node) = N_Simple_Return_Statement))\n       then\n          Set_Expansion_Delayed (N);\n          return;\n@@ -3691,7 +3687,7 @@ package body Exp_Aggr is\n                   if Nkind (Elmt) = N_Aggregate\n                     and then Present (Next_Index (Ix))\n                     and then\n-                         not Flatten (Elmt, Next_Index (Ix), Next_Index (Ixb))\n+                      not Flatten (Elmt, Next_Index (Ix), Next_Index (Ixb))\n                   then\n                      return False;\n                   end if;\n@@ -5022,8 +5018,8 @@ package body Exp_Aggr is\n       else\n          Maybe_In_Place_OK :=\n           (Nkind (Parent (N)) = N_Assignment_Statement\n-             and then Comes_From_Source (N)\n-             and then In_Place_Assign_OK)\n+            and then Comes_From_Source (N)\n+            and then In_Place_Assign_OK)\n \n           or else\n             (Nkind (Parent (Parent (N))) = N_Allocator\n@@ -5389,8 +5385,8 @@ package body Exp_Aggr is\n       --  an atomic move for it.\n \n       if Is_Atomic (Typ)\n-        and then (Nkind (Parent (N)) = N_Object_Declaration\n-                    or else Nkind (Parent (N)) = N_Assignment_Statement)\n+        and then Nkind_In (Parent (N), N_Object_Declaration,\n+                                       N_Assignment_Statement)\n         and then Comes_From_Source (Parent (N))\n       then\n          Expand_Atomic_Aggregate (N, Typ);\n@@ -5777,8 +5773,7 @@ package body Exp_Aggr is\n       C     : Node_Id;\n       Expr  : Node_Id;\n    begin\n-      pragma Assert (Nkind (N) = N_Aggregate\n-         or else Nkind (N) = N_Extension_Aggregate);\n+      pragma Assert (Nkind_In (N, N_Aggregate, N_Extension_Aggregate));\n \n       if No (Comps) then\n          return False;\n@@ -5806,8 +5801,8 @@ package body Exp_Aggr is\n          Expr := Expression (C);\n \n          if Present (Expr)\n-           and then (Nkind (Expr) = N_Aggregate\n-                     or else Nkind (Expr) = N_Extension_Aggregate)\n+           and then\n+             Nkind_In (Expr, N_Aggregate, N_Extension_Aggregate)\n            and then Has_Default_Init_Comps (Expr)\n          then\n             return True;\n@@ -6423,8 +6418,8 @@ package body Exp_Aggr is\n                return False;\n \n             else\n-               --  The aggregate is static if all components are literals, or\n-               --  else all its components are static aggregates for the\n+               --  The aggregate is static if all components are literals,\n+               --  or else all its components are static aggregates for the\n                --  component type. We also limit the size of a static aggregate\n                --  to prevent runaway static expressions.\n "}, {"sha": "5ddbd42f737c7b6348cf81a53f2df1bffa30b7fd", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -1690,6 +1690,7 @@ package body GNAT.Sockets is\n       if EAGAIN /= EWOULDBLOCK and then Error_Value = EAGAIN then\n          return Resource_Temporarily_Unavailable;\n       end if;\n+\n       pragma Warnings (On);\n \n       case Error_Value is"}, {"sha": "8de8f02fe7eb2e870f0b7c248ec2a815b8417271", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -1083,7 +1083,7 @@ package GNAT.Sockets is\n       E_Socket_Set : in out Socket_Set_Type;\n       Status       : out Selector_Status;\n       Timeout      : Selector_Duration := Forever);\n-   --  This refined version of Check_Selector allows to watch for exception\n+   --  This refined version of Check_Selector allows watching for exception\n    --  events (i.e. notifications of out-of-band transmission and reception).\n    --  As above, all of R_Socket_Set, W_Socket_Set and E_Socket_Set must be\n    --  different objects."}, {"sha": "fbe6d4547efd27e32a463cdf5c29735bf231ef34", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -720,9 +720,9 @@ package body Rtsfind is\n \n          --  If the RTS Unit *does* depend on the current unit, for instance,\n          --  when you are compiling System, then you had better have finished\n-         --  analyzing the part of System that is depended on before you try\n-         --  to load the RTS Unit. This means having the System ordered in an\n-         --  appropriate manner.\n+         --  analyzing the part of System that is depended on before you try to\n+         --  load the RTS Unit. This means having the code in System ordered in\n+         --  an appropriate manner.\n \n          Set_Analyzed (Cunit (Current_Sem_Unit), True);\n "}, {"sha": "3213e18a6427194f61cb3ff0766442ffc676c2d8", "filename": "gcc/ada/s-auxdec-vms_64.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fs-auxdec-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fs-auxdec-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms_64.ads?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -63,22 +63,22 @@ package System.Aux_DEC is\n    type Integer_8  is range -2 **  (8 - 1) .. +2 **  (8 - 1) - 1;\n    for Integer_8'Size  use  8;\n \n-   type Integer_8_Array is array (Integer range <>) of Integer_8;\n-\n    type Integer_16 is range -2 ** (16 - 1) .. +2 ** (16 - 1) - 1;\n    for Integer_16'Size use 16;\n \n-   type Integer_16_Array is array (Integer range <>) of Integer_16;\n-\n    type Integer_32 is range -2 ** (32 - 1) .. +2 ** (32 - 1) - 1;\n    for Integer_32'Size use 32;\n \n-   type Integer_32_Array is array (Integer range <>) of Integer_32;\n-\n    type Integer_64 is range -2 ** (64 - 1) .. +2 ** (64 - 1) - 1;\n    for Integer_64'Size use 64;\n \n+   type Integer_8_Array  is array (Integer range <>) of Integer_8;\n+   type Integer_16_Array is array (Integer range <>) of Integer_16;\n+   type Integer_32_Array is array (Integer range <>) of Integer_32;\n    type Integer_64_Array is array (Integer range <>) of Integer_64;\n+   --  These array types are not in all versions of DEC System, and in fact it\n+   --  is not quite clear why they are in some and not others, but since they\n+   --  definitely appear in some versions, we include them unconditionally.\n \n    type Largest_Integer is range Min_Int .. Max_Int;\n "}, {"sha": "4b56bafffc4fd90fa83266df907729d79fddffa1", "filename": "gcc/ada/s-auxdec.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fs-auxdec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fs-auxdec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec.ads?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -53,22 +53,22 @@ package System.Aux_DEC is\n    type Integer_8  is range -2 **  (8 - 1) .. +2 **  (8 - 1) - 1;\n    for Integer_8'Size  use  8;\n \n-   type Integer_8_Array is array (Integer range <>) of Integer_8;\n-\n    type Integer_16 is range -2 ** (16 - 1) .. +2 ** (16 - 1) - 1;\n    for Integer_16'Size use 16;\n \n-   type Integer_16_Array is array (Integer range <>) of Integer_16;\n-\n    type Integer_32 is range -2 ** (32 - 1) .. +2 ** (32 - 1) - 1;\n    for Integer_32'Size use 32;\n \n-   type Integer_32_Array is array (Integer range <>) of Integer_32;\n-\n    type Integer_64 is range -2 ** (64 - 1) .. +2 ** (64 - 1) - 1;\n    for Integer_64'Size use 64;\n \n+   type Integer_8_Array  is array (Integer range <>) of Integer_8;\n+   type Integer_16_Array is array (Integer range <>) of Integer_16;\n+   type Integer_32_Array is array (Integer range <>) of Integer_32;\n    type Integer_64_Array is array (Integer range <>) of Integer_64;\n+   --  These array types are not in all versions of DEC System, and in fact it\n+   --  is not quite clear why they are in some and not others, but since they\n+   --  definitely appear in some versions, we include them unconditionally.\n \n    type Largest_Integer is range Min_Int .. Max_Int;\n "}, {"sha": "17f907492ee93c6769d5e0bdbcc378fc90db0921", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -774,6 +774,8 @@ package body Sem_Ch10 is\n             Version_Update (N, Lib_Unit);\n          end if;\n \n+         --  Comment needed here ???\n+\n          if Nkind (Defining_Unit_Name (Specification (Unit_Node))) =\n                                              N_Defining_Program_Unit_Name\n          then"}, {"sha": "44ec9c332538191a79edd6acb08e3d1e4232b036", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f9440126bb66732dced069c6cc61ea136c1f57/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=d7f9440126bb66732dced069c6cc61ea136c1f57", "patch": "@@ -739,8 +739,8 @@ package body Sem_Disp is\n          then\n             pragma Assert\n              ((Ekind (Subp) = E_Function\n-                 and then Is_Dispatching_Operation (Old_Subp)\n-                 and then Is_Null_Extension (Base_Type (Etype (Subp))))\n+                and then Is_Dispatching_Operation (Old_Subp)\n+                and then Is_Null_Extension (Base_Type (Etype (Subp))))\n                or else Get_TSS_Name (Subp) = TSS_Stream_Read\n                or else Get_TSS_Name (Subp) = TSS_Stream_Write);\n \n@@ -769,12 +769,11 @@ package body Sem_Disp is\n             null;\n \n          --  If the type is already frozen, the overriding is not allowed\n-         --  except when Old_Subp is not a dispatching operation (which\n-         --  can occur when Old_Subp was inherited by an untagged type).\n-         --  However, a body with no previous spec freezes the type \"after\"\n-         --  its declaration, and therefore is a legal overriding (unless\n-         --  the type has already been frozen). Only the first such body\n-         --  is legal.\n+         --  except when Old_Subp is not a dispatching operation (which can\n+         --  occur when Old_Subp was inherited by an untagged type). However,\n+         --  a body with no previous spec freezes the type \"after\" its\n+         --  declaration, and therefore is a legal overriding (unless the type\n+         --  has already been frozen). Only the first such body is legal.\n \n          elsif Present (Old_Subp)\n            and then Is_Dispatching_Operation (Old_Subp)"}]}