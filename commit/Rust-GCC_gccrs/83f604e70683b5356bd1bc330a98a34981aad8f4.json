{"sha": "83f604e70683b5356bd1bc330a98a34981aad8f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmNjA0ZTcwNjgzYjUzNTZiZDFiYzMzMGE5OGEzNDk4MWFhZDhmNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-10T20:14:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2020-01-10T20:14:31Z"}, "message": "testsuite: add dg-enable-nn-line-numbers\n\nThis patch adds support for obscuring the line numbers printed in the\nleft-hand margin when printing the source code, converting them to \"NN\",\ne.g from:\n\n  7111 |   if (!(flags & 0x0001)) {\n       |      ^\n       |      |\n       |      (1) following 'true' branch...\n  7112 |\n\nto:\n\n   NN  |   if (!(flags & 0x0001)) {\n       |      ^\n       |      |\n       |      (1) following 'true' branch...\n   NN  |\n\nThis is useful in followup patches e.g. when testing how interprocedural\npaths are printed using multiline.exp, to avoid depending on precise line\nnumbers.\n\ngcc/testsuite/ChangeLog:\n\t* lib/gcc-dg.exp (cleanup-after-saved-dg-test): Reset global\n\tnn_line_numbers_enabled.\n\t* lib/multiline.exp (nn_line_numbers_enabled): New global.\n\t(dg-enable-nn-line-numbers): New proc.\n\t(maybe-handle-nn-line-numbers): New proc.\n\t* lib/prune.exp (prune_gcc_output): Call maybe-handle-nn-line-numbers.\n\nFrom-SVN: r280134", "tree": {"sha": "9343ba6eddf8566aaf230ae6c527f3e138b3ca07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9343ba6eddf8566aaf230ae6c527f3e138b3ca07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83f604e70683b5356bd1bc330a98a34981aad8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f604e70683b5356bd1bc330a98a34981aad8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f604e70683b5356bd1bc330a98a34981aad8f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f604e70683b5356bd1bc330a98a34981aad8f4/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60257913f864a5b9f70fbd45ff267cb703075497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60257913f864a5b9f70fbd45ff267cb703075497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60257913f864a5b9f70fbd45ff267cb703075497"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "a7a10c906f60a9bb66fd47319deb5d15d3c3bd05", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f604e70683b5356bd1bc330a98a34981aad8f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f604e70683b5356bd1bc330a98a34981aad8f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83f604e70683b5356bd1bc330a98a34981aad8f4", "patch": "@@ -1,3 +1,12 @@\n+2020-01-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* lib/gcc-dg.exp (cleanup-after-saved-dg-test): Reset global\n+\tnn_line_numbers_enabled.\n+\t* lib/multiline.exp (nn_line_numbers_enabled): New global.\n+\t(dg-enable-nn-line-numbers): New proc.\n+\t(maybe-handle-nn-line-numbers): New proc.\n+\t* lib/prune.exp (prune_gcc_output): Call maybe-handle-nn-line-numbers.\n+\n 2020-01-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR inline-asm/93207"}, {"sha": "cccd3ce4742cde28bdfd14e038d222b64be441f8", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f604e70683b5356bd1bc330a98a34981aad8f4/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f604e70683b5356bd1bc330a98a34981aad8f4/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=83f604e70683b5356bd1bc330a98a34981aad8f4", "patch": "@@ -940,6 +940,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tglobal set_compiler_env_var\n \tglobal saved_compiler_env_var\n \tglobal keep_saved_temps_suffixes\n+\tglobal nn_line_numbers_enabled\n \tglobal multiline_expected_outputs\n \tglobal freeform_regexps\n \tglobal save_linenr_varnames\n@@ -967,6 +968,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tif [info exists testname_with_flags] {\n \t    unset testname_with_flags\n \t}\n+\tset nn_line_numbers_enabled 0\n \tset multiline_expected_outputs []\n \tset freeform_regexps []\n "}, {"sha": "627ad68817f3cf964aaee2deccbdfd4a0663f909", "filename": "gcc/testsuite/lib/multiline.exp", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f604e70683b5356bd1bc330a98a34981aad8f4/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f604e70683b5356bd1bc330a98a34981aad8f4/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmultiline.exp?ref=83f604e70683b5356bd1bc330a98a34981aad8f4", "patch": "@@ -60,6 +60,9 @@ set _multiline_last_beginning_line -1\n # This is cleared at the end of each test by gcc-dg.exp's wrapper for dg-test.\n set multiline_expected_outputs []\n \n+# Was dg-enable-nn-line-numbers called?\n+set nn_line_numbers_enabled 0\n+\n ############################################################################\n # Exported functions.\n ############################################################################\n@@ -177,6 +180,91 @@ proc handle-multiline-outputs { text } {\n     return $text\n }\n \n+# DejaGnu directive to enable post-processing the line numbers printed in\n+# the left-hand margin when printing the source code, converting them to\n+# \"NN\", e.g from:\n+#\n+#    100 |   if (flag)\n+#        |      ^\n+#        |      |\n+#        |      (1) following 'true' branch...\n+#    101 |     {\n+#    102 |       foo ();\n+#        |       ^\n+#        |       |\n+#        |       (2) ...to here\n+#\n+# to:\n+#\n+#     NN |   if (flag)\n+#        |      ^\n+#        |      |\n+#        |      (1) following 'true' branch...\n+#     NN |     {\n+#     NN |       foo ();\n+#        |       ^\n+#        |       |\n+#        |       (2) ...to here\n+#\n+# This is useful e.g. when testing how interprocedural paths are printed\n+# via dg-begin/end-multiline-output, to avoid depending on precise line\n+# numbers.\n+\n+proc dg-enable-nn-line-numbers { args } {\n+    verbose \"dg-nn-line-numbers: args: $args\" 2\n+    global nn_line_numbers_enabled\n+    set nn_line_numbers_enabled 1\n+}\n+\n+# Hook to be called by prune.exp's prune_gcc_output to convert such line\n+# numbers to \"NN\" form.\n+#\n+# Match substrings of the form:\n+#  \"   25 |\"\n+# and convert them to:\n+#  \"   NN |\"\n+#\n+# It returns a copy of its input, with the above changes.\n+\n+proc maybe-handle-nn-line-numbers { text } {\n+    global testname_with_flags\n+\n+    verbose \"maybe-handle-nn-line-numbers\" 3\n+\n+    global nn_line_numbers_enabled\n+    if { [expr {!$nn_line_numbers_enabled}] } {\n+\tverbose \"nn_line_numbers_enabled false; bailing out\" 3\n+\treturn $text\n+    }\n+    \n+    verbose \"maybe-handle-nn-line-numbers: text before: ${text}\" 4\n+\n+    # dg.exp's dg-test trims leading whitespace from the output\n+    # in this line:\n+    #   set comp_output [string trimleft $comp_output]\n+    # so we can't rely on the exact leading whitespace for the\n+    # first line in the output.\n+    # Match initial input lines that start like:\n+    #  \"25 |\"\n+    # and convert them to:\n+    #  \"   NN |\"\n+    set rexp2 {(^[0-9]+ \\|)}\n+    set count_a [regsub -all $rexp2 $text \"   NN |\" text]\n+    verbose \"maybe-handle-nn-line-numbers: count_a: $count_a\" 4\n+    \n+    # Match lines that start like:\n+    #  \"   25 |\"\n+    # and convert them to:\n+    #  \"   NN |\"\n+    set rexp {([ ]+[0-9]+ \\|)}\n+    set count_b [regsub -all $rexp $text \"   NN |\" text]\n+    verbose \"maybe-handle-nn-line-numbers: count_b: $count_b\" 4\n+\n+    verbose \"maybe-handle-nn-line-numbers: text after: ${text}\" 4\n+\n+    return $text\n+}\n+\n ############################################################################\n # Internal functions\n ############################################################################"}, {"sha": "60402208c375c572766a8adce0def3cf4b400fe5", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83f604e70683b5356bd1bc330a98a34981aad8f4/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83f604e70683b5356bd1bc330a98a34981aad8f4/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=83f604e70683b5356bd1bc330a98a34981aad8f4", "patch": "@@ -74,6 +74,10 @@ proc prune_gcc_output { text } {\n     # Ignore harmless warnings from Xcode 4.0.\n     regsub -all \"(^|\\n)\\[^\\n\\]*ld: warning: could not create compact unwind for\\[^\\n\\]*\" $text \"\" text\n \n+    # If dg-enable-nn-line-numbers was provided, then obscure source-margin\n+    # line numbers by converting them to \"NN\" form.\n+    set text [maybe-handle-nn-line-numbers $text]\n+    \n     # Call into multiline.exp to handle any multiline output directives.\n     set text [handle-multiline-outputs $text]\n "}]}