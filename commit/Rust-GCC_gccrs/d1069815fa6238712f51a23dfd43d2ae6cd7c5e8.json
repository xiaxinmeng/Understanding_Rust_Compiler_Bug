{"sha": "d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "node_id": "C_kwDOANBUbNoAKGQxMDY5ODE1ZmE2MjM4NzEyZjUxYTIzZGZkNDNkMmFlNmNkN2M1ZTg", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-09-30T12:41:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-09-30T12:41:09Z"}, "message": "Add catch for recusive type queries\n\nWhen we have a type query where by generic substitution occurs we can hit\nthe case where we need to Probe the bounds of the substited item to\ndetermine whether the the bounds are compatible this can cause us to\nend up querying the same type recursively.\n\nFixes #1550", "tree": {"sha": "0589da7b5ad57afa7743056e05a94404ad9364ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0589da7b5ad57afa7743056e05a94404ad9364ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b1ba11b0b2f873b85dfc7643fe778e974e874b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b1ba11b0b2f873b85dfc7643fe778e974e874b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b1ba11b0b2f873b85dfc7643fe778e974e874b8"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "8107ef5a092d71eca35a03e5f3f16f8f2de1dc0d", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "patch": "@@ -495,14 +495,20 @@ TypeCheckBase::resolve_generic_params (\n bool\n TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n {\n+  if (context->query_in_progress (reference))\n+    return false;\n+\n   if (context->lookup_type (reference, result))\n     return true;\n \n+  context->insert_query (reference);\n+\n   HIR::Item *item = mappings->lookup_hir_item (reference);\n   if (item != nullptr)\n     {\n       rust_debug_loc (item->get_locus (), \"resolved item {%u} to\", reference);\n       *result = TypeCheckItem::Resolve (*item);\n+      context->query_completed (reference);\n       return true;\n     }\n \n@@ -520,6 +526,7 @@ TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n \t\t      reference);\n \n       *result = TypeCheckItem::ResolveImplItem (*impl_block, *impl_item);\n+      context->query_completed (reference);\n       return true;\n     }\n \n@@ -530,6 +537,7 @@ TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n   if (found_impl_block_type)\n     {\n       *result = TypeCheckItem::ResolveImplBlockSelf (*impl_block_by_type);\n+      context->query_completed (reference);\n       return true;\n     }\n \n@@ -544,13 +552,15 @@ TypeCheckBase::query_type (HirId reference, TyTy::BaseType **result)\n       rust_assert (block != nullptr);\n \n       *result = TypeCheckTopLevelExternItem::Resolve (extern_item, *block);\n+      context->query_completed (reference);\n       return true;\n     }\n \n   // more?\n   Location possible_locus = mappings->lookup_location (reference);\n   rust_debug_loc (possible_locus, \"query system failed to resolve: [%u]\",\n \t\t  reference);\n+  context->query_completed (reference);\n \n   return false;\n }"}, {"sha": "f85585bccf63ed73c08a6c9df61d71b9c67156f9", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "patch": "@@ -372,6 +372,15 @@ class TypeCheckContext\n     return true;\n   }\n \n+  void insert_query (HirId id) { querys_in_progress.insert (id); }\n+\n+  void query_completed (HirId id) { querys_in_progress.erase (id); }\n+\n+  bool query_in_progress (HirId id) const\n+  {\n+    return querys_in_progress.find (id) != querys_in_progress.end ();\n+  }\n+\n private:\n   TypeCheckContext ();\n \n@@ -406,6 +415,9 @@ class TypeCheckContext\n \n   // predicates\n   std::map<HirId, TyTy::TypeBoundPredicate> predicates;\n+\n+  // query context lookups\n+  std::set<HirId> querys_in_progress;\n };\n \n class TypeResolution"}, {"sha": "d7647b75f7a21b3dc79b0fc176330082c9eab682", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1069815fa6238712f51a23dfd43d2ae6cd7c5e8/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=d1069815fa6238712f51a23dfd43d2ae6cd7c5e8", "patch": "@@ -34,8 +34,9 @@ TypeBoundsProbe::scan ()\n       if (!impl->has_trait_ref ())\n \treturn true;\n \n-      TyTy::BaseType *impl_type = TypeCheckItem::ResolveImplBlockSelf (*impl);\n-      if (impl_type->get_kind () == TyTy::TypeKind::ERROR)\n+      HirId impl_ty_id = impl->get_type ()->get_mappings ().get_hirid ();\n+      TyTy::BaseType *impl_type = nullptr;\n+      if (!query_type (impl_ty_id, &impl_type))\n \treturn true;\n \n       if (!receiver->can_eq (impl_type, false))"}]}