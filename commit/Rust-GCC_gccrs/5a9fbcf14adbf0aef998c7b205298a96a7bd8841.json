{"sha": "5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE5ZmJjZjE0YWRiZjBhZWY5OThjN2IyMDUyOThhOTZhN2JkODg0MQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2011-11-01T02:09:00Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2011-11-01T02:09:00Z"}, "message": "re PR debug/50869 (ice in vt_expand_var_loc_chain)\n\nPR debug/50869\n* cselib.c (cfa_base_preserved_regno): Initialize.\n(cselib_expand_value_rtx_1): Don't expand it.\n* var-tracking.c (vt_expand_var_loc_chain): Initialize depth.\nCheck it's only zero if result is NULL.\n\nFrom-SVN: r180725", "tree": {"sha": "312250e8d8088ea8f413facab65cc217f6170c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/312250e8d8088ea8f413facab65cc217f6170c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a9fbcf14adbf0aef998c7b205298a96a7bd8841/comments", "author": null, "committer": null, "parents": [{"sha": "03e0010d71efedb4a5a9718a68fc4ffdd9e24f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e0010d71efedb4a5a9718a68fc4ffdd9e24f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03e0010d71efedb4a5a9718a68fc4ffdd9e24f5b"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "d5f725b4b5eab9d70192bd43296015d2e24fab0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9fbcf14adbf0aef998c7b205298a96a7bd8841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9fbcf14adbf0aef998c7b205298a96a7bd8841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "patch": "@@ -1,3 +1,11 @@\n+2011-11-01  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/50869\n+\t* cselib.c (cfa_base_preserved_regno): Initialize.\n+\t(cselib_expand_value_rtx_1): Don't expand it.\n+\t* var-tracking.c (vt_expand_var_loc_chain): Initialize depth.\n+\tCheck it's only zero if result is NULL.\n+\n 2011-11-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/sse.md (fixuns_trunc<mode><sseintvecmodelower>2): New"}, {"sha": "ef397db8d1c3796e93fb62762e8c724ed866b8a5", "filename": "gcc/cselib.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9fbcf14adbf0aef998c7b205298a96a7bd8841/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9fbcf14adbf0aef998c7b205298a96a7bd8841/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "patch": "@@ -185,7 +185,7 @@ static cselib_val dummy_val;\n    that is constant through the whole function and should never be\n    eliminated.  */\n static cselib_val *cfa_base_preserved_val;\n-static unsigned int cfa_base_preserved_regno;\n+static unsigned int cfa_base_preserved_regno = INVALID_REGNUM;\n \n /* Used to list all values that contain memory reference.\n    May or may not contain the useless values - the list is compacted\n@@ -1451,7 +1451,7 @@ cselib_expand_value_rtx_1 (rtx orig, struct expand_value_data *evd,\n \t  if (GET_MODE (l->elt->val_rtx) == GET_MODE (orig))\n \t    {\n \t      rtx result;\n-\t      int regno = REGNO (orig);\n+\t      unsigned regno = REGNO (orig);\n \n \t      /* The only thing that we are not willing to do (this\n \t\t is requirement of dse and if others potential uses\n@@ -1471,7 +1471,8 @@ cselib_expand_value_rtx_1 (rtx orig, struct expand_value_data *evd,\n \t\t make the frame assumptions.  */\n \t      if (regno == STACK_POINTER_REGNUM\n \t\t  || regno == FRAME_POINTER_REGNUM\n-\t\t  || regno == HARD_FRAME_POINTER_REGNUM)\n+\t\t  || regno == HARD_FRAME_POINTER_REGNUM\n+\t\t  || regno == cfa_base_preserved_regno)\n \t\treturn orig;\n \n \t      bitmap_set_bit (evd->regs_active, regno);"}, {"sha": "11d4efdcdc25db027f9c92eebb1b9d872afab780", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a9fbcf14adbf0aef998c7b205298a96a7bd8841/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a9fbcf14adbf0aef998c7b205298a96a7bd8841/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=5a9fbcf14adbf0aef998c7b205298a96a7bd8841", "patch": "@@ -7764,7 +7764,7 @@ vt_expand_var_loc_chain (variable var, bitmap regs, void *data, bool *pendrecp)\n   bool pending_recursion;\n   rtx loc_from = NULL;\n   struct elt_loc_list *cloc = NULL;\n-  int depth, saved_depth = elcd->depth;\n+  int depth = 0, saved_depth = elcd->depth;\n \n   /* Clear all backlinks pointing at this, so that we're not notified\n      while we're active.  */\n@@ -7842,6 +7842,8 @@ vt_expand_var_loc_chain (variable var, bitmap regs, void *data, bool *pendrecp)\n   VAR_LOC_FROM (var) = loc_from;\n   VAR_LOC_DEPTH (var) = depth;\n \n+  gcc_checking_assert (!depth == !result);\n+\n   elcd->depth = update_depth (saved_depth, depth);\n \n   /* Indicate whether any of the dependencies are pending recursion"}]}