{"sha": "2999dd1780b2f85394f71982085dbe149c69e9ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5OWRkMTc4MGIyZjg1Mzk0ZjcxOTgyMDg1ZGJlMTQ5YzY5ZTlhYg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-11-11T20:31:06Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2005-11-11T20:31:06Z"}, "message": "re PR libfortran/24719 (Nonadvancing read does not read more than 1 line)\n\n2005-11-11  Jerry DeLisle <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/24719\n\tgfortran.dg/read_noadvance.f90: New test.\n\t\n\tPR libgfortran/24699\n\tgfortran.dg/fmt_t_2.f90: New test.\n\t\n\tPR libgfortran/24785\n\tgfortran.dg/read_x_eor.f90: New test.\n\t\n\tPR libgfortran/24584\n\tgfortran.dg/namelist_empty.f90: Rename test.\n\n\tPR libgfortran/24489\n\tgfortran/read_eor.f90: Rename test.\n\nFrom-SVN: r106798", "tree": {"sha": "e07fc2da72f4f3152840086a7eeeaca104c34dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e07fc2da72f4f3152840086a7eeeaca104c34dcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2999dd1780b2f85394f71982085dbe149c69e9ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2999dd1780b2f85394f71982085dbe149c69e9ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2999dd1780b2f85394f71982085dbe149c69e9ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2999dd1780b2f85394f71982085dbe149c69e9ab/comments", "author": null, "committer": null, "parents": [{"sha": "740f04ef02924eef0ca9d5dfd028caee84b5466e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740f04ef02924eef0ca9d5dfd028caee84b5466e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/740f04ef02924eef0ca9d5dfd028caee84b5466e"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "c2b869481df6872f32136de20750b98230661bcf", "filename": "gcc/testsuite/gfortran.dg/fmt_t_2.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_t_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_t_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_t_2.f90?ref=2999dd1780b2f85394f71982085dbe149c69e9ab", "patch": "@@ -0,0 +1,27 @@\n+! { dg-options \"\" }\n+! { dg-do run }\n+! pr24699, handle end-of-record on READ with T format\n+! test contributed by Jerry DeLisle <jvdelisle@gcc.gnu.org>\n+      character*132 :: foost1, foost2, foost3\n+      open (11, status=\"scratch\", action=\"readwrite\")\n+      write(11, '(a)') \"ab cdefghijkl mnop qrst\"\n+      write(11, '(a)') \"123456789 123456789 123456789\"\n+      write(11, '(a)') \"  Now is the time for all good.\"\n+      rewind(11)\n+      \n+      read (11, '(a040,t1,040a)', end = 999)  foost1 , foost2\n+      if (foost1.ne.foost2) call abort()\n+\n+      read (11, '(a032,t2,a032t3,a032)', end = 999)  foost1 , foost2, foost3\n+      if (foost1(1:32).ne.\"123456789 123456789 123456789   \") call abort()\n+      if (foost2(1:32).ne.\"23456789 123456789 123456789    \") call abort()\n+      if (foost3(1:32).ne.\"3456789 123456789 123456789     \") call abort()\n+         \n+      read (11, '(a017,t1,a0017)', end = 999)  foost1 , foost2\n+      if (foost1.ne.foost2) call abort()\n+      if (foost2(1:17).ne.\"  Now is the time \") call abort()\n+      goto 1000\n+ 999  call abort()\n+ 1000 continue\n+      close(11)\n+      end"}, {"sha": "12e72ae7e4da952483b450632102c2cf3e0cf17f", "filename": "gcc/testsuite/gfortran.dg/namelist_empty.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_empty.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_empty.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_empty.f90?ref=2999dd1780b2f85394f71982085dbe149c69e9ab", "patch": "@@ -0,0 +1,17 @@\n+! pr24584, segfault on namelist reading an empty string\n+! Contributed by Jerry DeLisle  <jvdelisle@verizon.net> \n+      implicit none \n+      character*20   temp\n+      character(len=10) var\n+      namelist /input/ var\n+      var = 'Howdy'\n+      open(unit=7, status=\"scratch\")\n+      temp = '   var='''''  ! var='' in the file\n+      write(7,'(A6)') '&INPUT'\n+      write(7,'(A10)') temp\n+      write(7,'(A1)') '/'\n+      rewind(7)\n+      read(7,NML=input)\n+      close(7)\n+      if (var.ne.'') call abort\n+      end"}, {"sha": "f3327550297791c9167f36de2315ad9afbc50e11", "filename": "gcc/testsuite/gfortran.dg/read_eor.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_eor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_eor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_eor.f90?ref=2999dd1780b2f85394f71982085dbe149c69e9ab", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do run }\n+! PR24489 Assure that read does not go past the end of record. The width of\n+! the format specifier is 8, but the internal unit record length is 4 so only\n+! the first 4 characters should be read.\n+! Contributed by Jerry DeLisle <jvdelisle@verizon.net>.\n+program pr24489\n+  character*4, dimension(8) :: abuf = (/\"0123\",\"4567\",\"89AB\",\"CDEF\", &\n+                                        \"0123\",\"4567\",\"89AB\",\"CDEF\"/)\n+  character*4, dimension(2,4) :: buf\n+  character*8 :: a\n+  equivalence (buf,abuf)\n+  read(buf, '(a8)') a\n+  if (a.ne.'0123') call abort()\n+end program pr24489"}, {"sha": "e55763ad8bbaae96e13c9f938217cf4c7853c794", "filename": "gcc/testsuite/gfortran.dg/read_noadvance.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_noadvance.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_noadvance.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_noadvance.f90?ref=2999dd1780b2f85394f71982085dbe149c69e9ab", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+! pr24719, non-advancing read should read more than one line\n+! test contributed by jerry delisle <jvdelisle@gcc.gnu.org>\n+      implicit none\n+      character(1) :: chr\n+      character(20) :: correct = 'foo: bar 123abc'\n+      integer :: i\n+      open(unit = 11, status = \"scratch\", action=\"readwrite\")\n+      write(11,'(a)') \"foo: bar\"\n+      write(11,'(a)') \"123abc\"\n+      rewind(11)\n+      i = 0\n+      do\n+        i = i + 1\n+10      read(unit = 11, fmt = '(a)', advance = 'no', end = 99, eor = 11) chr\n+        if (chr.ne.correct(i:i)) call abort()\n+        cycle\n+11      continue\n+      end do\n+99    close(11)\n+      end"}, {"sha": "064835a8b2879bf848e117c8548d1c0f94542e25", "filename": "gcc/testsuite/gfortran.dg/read_x_eor.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_x_eor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2999dd1780b2f85394f71982085dbe149c69e9ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_x_eor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fread_x_eor.f90?ref=2999dd1780b2f85394f71982085dbe149c69e9ab", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do run }\n+! ( dg-output \"^\" }\n+!\n+! Test fix for pr24785 - EOR used to scrub the 2X.\n+! Reduced from PR example submitted by Harald Anlauf <anlauf@gmx.de>\n+!\n+     program x_with_advance_bug\n+     write (*,'(A,2X)',  advance=\"no\") \"<\"\n+     write (*,'(A)') \">\" ! { dg-output \"<  >\" }\n+     end"}]}