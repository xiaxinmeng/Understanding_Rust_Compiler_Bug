{"sha": "0617753f4a5bda865efe66192841c40abdab8c2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYxNzc1M2Y0YTViZGE4NjVlZmU2NjE5Mjg0MWM0MGFiZGFiOGMyZQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-12-11T11:11:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:11:11Z"}, "message": "[Ada] Crash on generic instantiation in ignored Ghost context\n\nThe following patch corrects the freezing of entities to properly\npreserve all freeze nodes in case of recursive freezing when the context\nis ignored Ghost, and the construct frozen is non-Ghost.\n\n2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* freeze.adb (Add_To_Result): Move the ignored Ghost-specific\n\thandling of freeze nodes to...\n\t(Freeze_Entity): ...here. This ensures that the freeze nodes of\n\tconstructs that have recursive freezing are preserved when the\n\tcontext is ignored Ghost, and the top level construct being\n\tfrozen is non-Ghost.\n\ngcc/testsuite/\n\n\t* gnat.dg/ghost3.adb, gnat.dg/ghost3.ads: New testcase.\n\nFrom-SVN: r267001", "tree": {"sha": "a849beae01291bb03fd29af6c8adc8103ffad47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a849beae01291bb03fd29af6c8adc8103ffad47e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0617753f4a5bda865efe66192841c40abdab8c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0617753f4a5bda865efe66192841c40abdab8c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0617753f4a5bda865efe66192841c40abdab8c2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0617753f4a5bda865efe66192841c40abdab8c2e/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62ebfa527237ba42c9d93032dc008e82d482d271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ebfa527237ba42c9d93032dc008e82d482d271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ebfa527237ba42c9d93032dc008e82d482d271"}], "stats": {"total": 104, "additions": 69, "deletions": 35}, "files": [{"sha": "b10768b354dd39f9bd8295ab6b85a34a4cd2eb05", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0617753f4a5bda865efe66192841c40abdab8c2e", "patch": "@@ -1,3 +1,12 @@\n+2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Add_To_Result): Move the ignored Ghost-specific\n+\thandling of freeze nodes to...\n+\t(Freeze_Entity): ...here. This ensures that the freeze nodes of\n+\tconstructs that have recursive freezing are preserved when the\n+\tcontext is ignored Ghost, and the top level construct being\n+\tfrozen is non-Ghost.\n+\n 2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* uintp.ads, uintp.adb (UI_From_Integral): New generic function,"}, {"sha": "dc3e54cca287fc8fd640d5533d64827f1fd65509", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=0617753f4a5bda865efe66192841c40abdab8c2e", "patch": "@@ -2241,29 +2241,7 @@ package body Freeze is\n \n       procedure Add_To_Result (Fnod : Node_Id) is\n       begin\n-         --  The Ghost mode of the enclosing context is ignored, while the\n-         --  entity being frozen is living. Insert the freezing action prior\n-         --  to the start of the enclosing ignored Ghost region. As a result\n-         --  the freezeing action will be preserved when the ignored Ghost\n-         --  context is eliminated. The insertion must take place even when\n-         --  the context is a spec expression, otherwise \"Handling of Default\n-         --  and Per-Object Expressions\" will suppress the insertion, and the\n-         --  freeze node will be dropped on the floor.\n-\n-         if Saved_GM = Ignore\n-           and then Ghost_Mode /= Ignore\n-           and then Present (Ignored_Ghost_Region)\n-         then\n-            Insert_Action\n-              (Assoc_Node   => Ignored_Ghost_Region,\n-               Ins_Action   => Fnod,\n-               Spec_Expr_OK => True);\n-\n-         --  Otherwise add the freezing action to the result list\n-\n-         else\n-            Append_New_To (Result, Fnod);\n-         end if;\n+         Append_New_To (Result, Fnod);\n       end Add_To_Result;\n \n       ----------------------------\n@@ -5301,6 +5279,7 @@ package body Freeze is\n \n       if Is_Itype (E) and then Is_Record_Type (Scope (E)) then\n          Test_E := Scope (E);\n+\n       elsif Is_Itype (E) and then Present (Underlying_Type (Scope (E)))\n         and then Is_Record_Type (Underlying_Type (Scope (E)))\n       then\n@@ -5582,8 +5561,8 @@ package body Freeze is\n          --  Here for other than a subprogram or type\n \n          else\n-            --  If entity has a type, and it is not a generic unit, then\n-            --  freeze it first (RM 13.14(10)).\n+            --  If entity has a type, and it is not a generic unit, then freeze\n+            --  it first (RM 13.14(10)).\n \n             if Present (Etype (E))\n               and then Ekind (E) /= E_Generic_Function\n@@ -5603,7 +5582,7 @@ package body Freeze is\n                  and then Has_Delayed_Aspects (E)\n                then\n                   Set_Has_Delayed_Aspects (E, False);\n-                  Set_Has_Delayed_Freeze (E, False);\n+                  Set_Has_Delayed_Freeze  (E, False);\n                   Set_Freeze_Node (E, Empty);\n                end if;\n             end if;\n@@ -6916,18 +6895,35 @@ package body Freeze is\n \n       Check_Debug_Info_Needed (E);\n \n-      --  Special handling for subprograms\n+      --  If subprogram has address clause then reset Is_Public flag, since we\n+      --  do not want the backend to generate external references.\n \n-      if Is_Subprogram (E) then\n+      if Is_Subprogram (E)\n+        and then Present (Address_Clause (E))\n+        and then not Is_Library_Level_Entity (E)\n+      then\n+         Set_Is_Public (E, False);\n+      end if;\n \n-         --  If subprogram has address clause then reset Is_Public flag, since\n-         --  we do not want the backend to generate external references.\n+      --  The Ghost mode of the enclosing context is ignored, while the\n+      --  entity being frozen is living. Insert the freezing action prior\n+      --  to the start of the enclosing ignored Ghost region. As a result\n+      --  the freezeing action will be preserved when the ignored Ghost\n+      --  context is eliminated. The insertion must take place even when\n+      --  the context is a spec expression, otherwise \"Handling of Default\n+      --  and Per-Object Expressions\" will suppress the insertion, and the\n+      --  freeze node will be dropped on the floor.\n+\n+      if Saved_GM = Ignore\n+        and then Ghost_Mode /= Ignore\n+        and then Present (Ignored_Ghost_Region)\n+      then\n+         Insert_Actions\n+           (Assoc_Node   => Ignored_Ghost_Region,\n+            Ins_Actions  => Result,\n+            Spec_Expr_OK => True);\n \n-         if Present (Address_Clause (E))\n-           and then not Is_Library_Level_Entity (E)\n-         then\n-            Set_Is_Public (E, False);\n-         end if;\n+         Result := No_List;\n       end if;\n \n    <<Leave>>"}, {"sha": "bdc7eb443608f56805754dffceeba228ce13dcf1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0617753f4a5bda865efe66192841c40abdab8c2e", "patch": "@@ -1,3 +1,7 @@\n+2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/ghost3.adb, gnat.dg/ghost3.ads: New testcase.\n+\n 2018-12-11  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/bip_cu.adb, gnat.dg/bip_cu_constructor.adb,"}, {"sha": "f2ef753174866e024e1a4c8cf2b94fc472ec4ebf", "filename": "gcc/testsuite/gnat.dg/ghost3.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Ftestsuite%2Fgnat.dg%2Fghost3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Ftestsuite%2Fgnat.dg%2Fghost3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fghost3.adb?ref=0617753f4a5bda865efe66192841c40abdab8c2e", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Ghost3 is\n+   procedure Dummy is null;\n+end Ghost3;"}, {"sha": "8d7ec828d44d0d4e838b691281a86ba28682478a", "filename": "gcc/testsuite/gnat.dg/ghost3.ads", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Ftestsuite%2Fgnat.dg%2Fghost3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617753f4a5bda865efe66192841c40abdab8c2e/gcc%2Ftestsuite%2Fgnat.dg%2Fghost3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fghost3.ads?ref=0617753f4a5bda865efe66192841c40abdab8c2e", "patch": "@@ -0,0 +1,20 @@\n+package Ghost3 is\n+   type Small_Int is new Natural range 0 .. 5;\n+   type Large_Int is new Natural range 0 .. 5000;\n+\n+   type Rec_Typ is record\n+      Comp_1 : Small_Int;\n+      Comp_2 : Large_Int;\n+   end record;\n+\n+   generic\n+      type Any_Typ;\n+   package Gen is\n+   end Gen;\n+\n+   package Freezer with Ghost is\n+      package Inst is new Gen (Rec_Typ);\n+   end Freezer;\n+\n+   procedure Dummy;\n+end Ghost3;"}]}