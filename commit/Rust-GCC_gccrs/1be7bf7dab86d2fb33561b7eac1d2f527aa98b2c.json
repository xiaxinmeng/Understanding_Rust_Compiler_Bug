{"sha": "1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJlN2JmN2RhYjg2ZDJmYjMzNTYxYjdlYWMxZDJmNTI3YWE5OGIyYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-11T15:23:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-11T15:27:40Z"}, "message": "objc++: Always pop scope with method definitions [PR97015]\n\nSyntax errors in method definition lists could leave us in a function\nscope.  My recent change for block scope externs didn't like that.\nThis reimplements the parsing loop to finish the method definition we\nstarted.  AFAICT the original code was attempting to provide some\nerror recovery.  Also while there, simply do the token peeking at the\ntop of the loop, rather than at the two(!) ends.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_objc_method_definition_list): Reimplement\n\tloop, make sure we pop scope.\n\tgcc/testsuite/\n\t* obj-c++.dg/syntax-error-9.mm: Adjust expected errors.", "tree": {"sha": "dd4900b73b3e973c7c08212277fe0077a635f1e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd4900b73b3e973c7c08212277fe0077a635f1e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13144466f11036585389a0dc5826bf23d53d5616", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13144466f11036585389a0dc5826bf23d53d5616", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13144466f11036585389a0dc5826bf23d53d5616"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "fba3fcc0c4c44bfd7b75a3f995f35a48358ecffe", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c", "patch": "@@ -32980,44 +32980,42 @@ cp_parser_objc_method_prototype_list (cp_parser* parser)\n static void\n cp_parser_objc_method_definition_list (cp_parser* parser)\n {\n-  cp_token *token = cp_lexer_peek_token (parser->lexer);\n-\n-  while (token->keyword != RID_AT_END && token->type != CPP_EOF)\n+  for (;;)\n     {\n-      tree meth;\n+      cp_token *token = cp_lexer_peek_token (parser->lexer);\n \n-      if (token->type == CPP_PLUS || token->type == CPP_MINUS)\n+      if (token->keyword == RID_AT_END)\n \t{\n-\t  cp_token *ptk;\n-\t  tree sig, attribute;\n-\t  bool is_class_method;\n-\t  if (token->type == CPP_PLUS)\n-\t    is_class_method = true;\n-\t  else\n-\t    is_class_method = false;\n+\t  cp_lexer_consume_token (parser->lexer);  /* Eat '@end'.  */\n+\t  break;\n+\t}\n+      else if (token->type == CPP_EOF)\n+\t{\n+\t  cp_parser_error (parser, \"expected %<@end%>\");\n+\t  break;\n+\t}\n+      else if (token->type == CPP_PLUS || token->type == CPP_MINUS)\n+\t{\n+\t  bool is_class_method = token->type == CPP_PLUS;\n+\n \t  push_deferring_access_checks (dk_deferred);\n-\t  sig = cp_parser_objc_method_signature (parser, &attribute);\n+\t  tree attribute;\n+\t  tree sig = cp_parser_objc_method_signature (parser, &attribute);\n \t  if (sig == error_mark_node)\n+\t    cp_parser_skip_to_end_of_block_or_statement (parser);\n+\t  else\n \t    {\n-\t      cp_parser_skip_to_end_of_block_or_statement (parser);\n-\t      token = cp_lexer_peek_token (parser->lexer);\n-\t      continue;\n-\t    }\n-\t  objc_start_method_definition (is_class_method, sig, attribute,\n-\t\t\t\t\tNULL_TREE);\n+\t      objc_start_method_definition (is_class_method, sig,\n+\t\t\t\t\t    attribute, NULL_TREE);\n \n-\t  /* For historical reasons, we accept an optional semicolon.  */\n-\t  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n-\t    cp_lexer_consume_token (parser->lexer);\n+\t      /* For historical reasons, we accept an optional semicolon.  */\n+\t      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n+\t\tcp_lexer_consume_token (parser->lexer);\n \n-\t  ptk = cp_lexer_peek_token (parser->lexer);\n-\t  if (!(ptk->type == CPP_PLUS || ptk->type == CPP_MINUS\n-\t\t|| ptk->type == CPP_EOF || ptk->keyword == RID_AT_END))\n-\t    {\n \t      perform_deferred_access_checks (tf_warning_or_error);\n \t      stop_deferring_access_checks ();\n-\t      meth = cp_parser_function_definition_after_declarator (parser,\n-\t\t\t\t\t\t\t\t     false);\n+\t      tree meth\n+\t\t= cp_parser_function_definition_after_declarator (parser, false);\n \t      pop_deferring_access_checks ();\n \t      objc_finish_method_definition (meth);\n \t    }\n@@ -33037,15 +33035,8 @@ cp_parser_objc_method_definition_list (cp_parser* parser)\n       else\n \t/* Allow for interspersed non-ObjC++ code.  */\n \tcp_parser_objc_interstitial_code (parser);\n-\n-      token = cp_lexer_peek_token (parser->lexer);\n     }\n \n-  if (token->type != CPP_EOF)\n-    cp_lexer_consume_token (parser->lexer);  /* Eat '@end'.  */\n-  else\n-    cp_parser_error (parser, \"expected %<@end%>\");\n-\n   objc_finish_implementation ();\n }\n "}, {"sha": "1876c32dd20d6a3c520323600b205712d5485463", "filename": "gcc/testsuite/obj-c++.dg/syntax-error-9.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-9.mm?ref=1be7bf7dab86d2fb33561b7eac1d2f527aa98b2c", "patch": "@@ -1,3 +1,3 @@\n @implementation SaturnDoc /* { dg-warning \"cannot find interface declaration\" } */\n - read: (void*)aStream ggg /* { dg-error \"expected .:. at end of input\" } */\n-/* { dg-error \"-:expected ..end. at end of input\" \"\" { target *-*-* } .+1 } */\n+/* { dg-error \"-:expected ..*. at end of input\" \"\" { target *-*-* } .+1 } */"}]}