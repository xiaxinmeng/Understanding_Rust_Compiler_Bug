{"sha": "efec4f2a560b7b903f74ae8dbe98716f8e39587d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlYzRmMmE1NjBiN2I5MDNmNzRhZThkYmU5ODcxNmY4ZTM5NTg3ZA==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2009-04-20T08:45:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:45:04Z"}, "message": "g-socket.ads (Abort_Selector): Clarify documentation.\n\n2009-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* g-socket.ads (Abort_Selector): Clarify documentation.\n\nFrom-SVN: r146373", "tree": {"sha": "fc382a702dfc09387fc38d42da9d862f5d47a3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc382a702dfc09387fc38d42da9d862f5d47a3e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efec4f2a560b7b903f74ae8dbe98716f8e39587d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efec4f2a560b7b903f74ae8dbe98716f8e39587d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efec4f2a560b7b903f74ae8dbe98716f8e39587d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efec4f2a560b7b903f74ae8dbe98716f8e39587d/comments", "author": null, "committer": null, "parents": [{"sha": "162f2c72380dca95a060f4cf47ae3522fd213f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162f2c72380dca95a060f4cf47ae3522fd213f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162f2c72380dca95a060f4cf47ae3522fd213f53"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "ce73813cf748bd9e3332a2bc665dab1391cefc74", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efec4f2a560b7b903f74ae8dbe98716f8e39587d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efec4f2a560b7b903f74ae8dbe98716f8e39587d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=efec4f2a560b7b903f74ae8dbe98716f8e39587d", "patch": "@@ -1,3 +1,7 @@\n+2009-04-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-socket.ads (Abort_Selector): Clarify documentation.\n+\n 2009-04-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* opt.ads (Inspector_Mode): Update documentation of this flag."}, {"sha": "882a31a82310993cdb554400c1c8c7cc4a65f5db", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efec4f2a560b7b903f74ae8dbe98716f8e39587d/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efec4f2a560b7b903f74ae8dbe98716f8e39587d/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=efec4f2a560b7b903f74ae8dbe98716f8e39587d", "patch": "@@ -1038,13 +1038,15 @@ package GNAT.Sockets is\n    --  that it does not watch for exception events. Note that on some\n    --  platforms it is kept process blocking on purpose. The timeout parameter\n    --  allows the user to have the behaviour he wants. Abort_Selector allows\n-   --  to abort safely a Check_Selector that is blocked forever. A special\n-   --  file descriptor is opened by Create_Selector and included in each call\n-   --  to Check_Selector. Abort_Selector causes an event to occur on this\n-   --  descriptor in order to unblock Check_Selector. The user must call\n-   --  Close_Selector to discard this special file. A reason to abort a select\n-   --  operation is typically to add a socket in one of the socket sets when\n-   --  the timeout is set to forever.\n+   --  to safely abort a blocked Check_Selector call. A special socket\n+   --  is opened by Create_Selector and included in each call to\n+   --  Check_Selector. Abort_Selector causes an event to occur on this\n+   --  descriptor in order to unblock Check_Selector. Note that each call to\n+   --  Abort_Selector will cause exactly one call to Check_Selector to return\n+   --  with Aborted status. The special socket created by Create_Selector is\n+   --  closed when Close_Selector is called.\n+   --  A typical case where it is useful to abort a Check_Selector operation is\n+   --  the situation where a change to the monitored sockets set must be made.\n \n    procedure Create_Selector (Selector : out Selector_Type);\n    --  Create a new selector"}]}