{"sha": "13c32c1984f5857ccce2aeb00ce34343e5a26954", "node_id": "C_kwDOANBUbNoAKDEzYzMyYzE5ODRmNTg1N2NjY2UyYWViMDBjZTM0MzQzZTVhMjY5NTQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-13T13:43:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-13T13:43:34Z"}, "message": "c++: Treat alignas align_expr and aligned attribute's operand as manifestly constant evaluation [PR105233]\n\nThe following testcase fails, because we only constant evaluate the\nalignas argument as non-manifestly constant-evaluated and as\n__builtin_is_constant_evaluated appears, we make it non-constant\n(the reason is that we often try to evaluate some expression without\nmanifestly_const_eval perhaps even multiple times before actually\nevaluating it with manifestly_const_eval (e.g. when folding for warnings\nand in many other places), and we don't want __builtin_is_constant_evaluated\nto evaluate to false in those cases, because we could get a different\nresult from when we actually evaluate it with manifestly_const_eval\nset).\nNow, for alignas the standard seems to be clear, it says the\nargument is constant-expression, which means we should\nmanifestly-constant-eval it.\nAttributes are a fuzzy area, they are extensions and various attributes\ntake e.g. identifiers, or string literals etc. as arguments.\n\nEither we can just treat alignas as manifestly-const-eval, for that\nwe'd need some way how to differentiate between alignas and gnu::aligned\nor aligned attribute.\n\nAnother possibility is what the patch below implements, treat\nboth alignas and gnu::aligned and aligned attribute's argument as\nmanifestly-const-eval and not do that for other attributes.\n\nAnother is to go through all attributes and figure out for which\nsuch treatment is useful (e.g. those that expect INTEGER_CST as argument),\nand either add a new column in the attribute table or have another table\nin the C++ FE to find out which attribute needs that.\n\nAnother is do that for all the attribute arguments that are EXPR_P\nand see what breaks (bet that it could be quite risky this late in\nGCC 12 cycle and especially for backporting).\n\n2022-04-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105233\n\t* decl2.cc (cp_check_const_attributes): For aligned attribute\n\tpass manifestly_const_eval=true to fold_non_dependent_expr.\n\n\t* g++.dg/cpp2a/is-constant-evaluated13.C: New test.", "tree": {"sha": "7b56ee580f8b155feb72512353933e83facced47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b56ee580f8b155feb72512353933e83facced47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13c32c1984f5857ccce2aeb00ce34343e5a26954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c32c1984f5857ccce2aeb00ce34343e5a26954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c32c1984f5857ccce2aeb00ce34343e5a26954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c32c1984f5857ccce2aeb00ce34343e5a26954/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd61ee6fde5fcf1d503b679bb9b5e0a0ba7a515d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd61ee6fde5fcf1d503b679bb9b5e0a0ba7a515d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd61ee6fde5fcf1d503b679bb9b5e0a0ba7a515d"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "d2b29208ed5c5da1331252ba93ba0fd44be90af3", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c32c1984f5857ccce2aeb00ce34343e5a26954/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c32c1984f5857ccce2aeb00ce34343e5a26954/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=13c32c1984f5857ccce2aeb00ce34343e5a26954", "patch": "@@ -1534,12 +1534,19 @@ cp_check_const_attributes (tree attributes)\n   for (attr = attributes; attr; attr = TREE_CHAIN (attr))\n     {\n       tree arg;\n+      /* As we implement alignas using gnu::aligned attribute and\n+\t alignas argument is a constant expression, force manifestly\n+\t constant evaluation of aligned attribute argument.  */\n+      bool manifestly_const_eval\n+\t= is_attribute_p (\"aligned\", get_attribute_name (attr));\n       for (arg = TREE_VALUE (attr); arg && TREE_CODE (arg) == TREE_LIST;\n \t   arg = TREE_CHAIN (arg))\n \t{\n \t  tree expr = TREE_VALUE (arg);\n \t  if (EXPR_P (expr))\n-\t    TREE_VALUE (arg) = fold_non_dependent_expr (expr);\n+\t    TREE_VALUE (arg)\n+\t      = fold_non_dependent_expr (expr, tf_warning_or_error,\n+\t\t\t\t\t manifestly_const_eval);\n \t}\n     }\n }"}, {"sha": "4a8af29b0861b8a6a368c6ed11f12ab64b735a8e", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated13.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c32c1984f5857ccce2aeb00ce34343e5a26954/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c32c1984f5857ccce2aeb00ce34343e5a26954/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated13.C?ref=13c32c1984f5857ccce2aeb00ce34343e5a26954", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/105233\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T>\n+constexpr T\n+foo (T x) noexcept\n+{\n+  bool a = __builtin_is_constant_evaluated ();\n+  T b = 4 * alignof (int);\n+  return x < b ? b : x;\n+}\n+\n+template <typename T>\n+struct A { T a, b, c; };\n+\n+template <typename T>\n+struct alignas (foo (sizeof (A<T>))) B { A<T> d; };\n+\n+B<int> e;"}]}