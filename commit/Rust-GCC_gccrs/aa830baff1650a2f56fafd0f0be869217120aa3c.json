{"sha": "aa830baff1650a2f56fafd0f0be869217120aa3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE4MzBiYWZmMTY1MGEyZjU2ZmFmZDBmMGJlODY5MjE3MTIwYWEzYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-13T21:16:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-13T21:16:37Z"}, "message": "(size_int): NUMBER is unsigned so don't test for negative.\n\n(optimize_bit_field_compare, all_ones_mask_p): Add missing last arg to\nforce_fit_type call.\n\nFrom-SVN: r4138", "tree": {"sha": "123da0c1fc4d6c139549761d568815496d84cc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/123da0c1fc4d6c139549761d568815496d84cc21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa830baff1650a2f56fafd0f0be869217120aa3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa830baff1650a2f56fafd0f0be869217120aa3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa830baff1650a2f56fafd0f0be869217120aa3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa830baff1650a2f56fafd0f0be869217120aa3c/comments", "author": null, "committer": null, "parents": [{"sha": "bece5e07ad2c356a5932024996d1489c686976d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bece5e07ad2c356a5932024996d1489c686976d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bece5e07ad2c356a5932024996d1489c686976d8"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d40e9c8253aa945fa3287a5ee84e604c695dcd09", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa830baff1650a2f56fafd0f0be869217120aa3c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa830baff1650a2f56fafd0f0be869217120aa3c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=aa830baff1650a2f56fafd0f0be869217120aa3c", "patch": "@@ -1437,10 +1437,10 @@ size_int (number)\n   /* Type-size nodes already made for small sizes.  */\n   static tree size_table[2*HOST_BITS_PER_WIDE_INT + 1];\n \n-  if (number >= 0 && number < 2*HOST_BITS_PER_WIDE_INT + 1\n+  if (number < 2*HOST_BITS_PER_WIDE_INT + 1\n       && size_table[number] != 0)\n     return size_table[number];\n-  if (number >= 0 && number < 2*HOST_BITS_PER_WIDE_INT + 1)\n+  if (number < 2*HOST_BITS_PER_WIDE_INT + 1)\n     {\n       push_obstacks_nochange ();\n       /* Make this a permanent node.  */\n@@ -2309,7 +2309,7 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n   /* Make the mask to be used against the extracted field.  */\n   mask = build_int_2 (~0, ~0);\n   TREE_TYPE (mask) = unsigned_type;\n-  force_fit_type (mask);\n+  force_fit_type (mask, 0);\n   mask = convert (unsigned_type, mask);\n   mask = const_binop (LSHIFT_EXPR, mask, size_int (lnbitsize - lbitsize), 0);\n   mask = const_binop (RSHIFT_EXPR, mask,\n@@ -2471,7 +2471,7 @@ all_ones_mask_p (mask, size)\n \n   tmask = build_int_2 (~0, ~0);\n   TREE_TYPE (tmask) = signed_type (type);\n-  force_fit_type (tmask);\n+  force_fit_type (tmask, 0);\n   return\n     operand_equal_p (mask, \n \t\t     const_binop (RSHIFT_EXPR,"}]}