{"sha": "afb8da7faa9dfe5a0d94ed45a373d74c076784ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZiOGRhN2ZhYTlkZmU1YTBkOTRlZDQ1YTM3M2Q3NGMwNzY3ODRhYg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-31T00:33:19Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-31T00:33:19Z"}, "message": "libstdc++: Don't initialize from *this inside some views [PR97600]\n\nThis works around a subtle issue where instantiating the begin()/end()\nmember of some views (as part of return type deduction) inadvertently\nrequires computing the satisfaction value of range<foo_view>.\n\nThis is problematic because the constraint range<foo_view> requires the\nbegin()/end() member to be callable.  But it's not callable until we've\ndeduced its return type, so evaluation of range<foo_view> yields false\nat this point.  And if after both members are instantiated (and their\nreturn types deduced) we evaluate range<foo_view> again, this time it\nwill yield true since the begin()/end() members are now both callable.\nThis makes the program ill-formed according to [temp.constr.atomic]/3:\n\n  If, at different points in the program, the satisfaction result is\n  different for identical atomic constraints and template arguments, the\n  program is ill-formed, no diagnostic required.\n\nThe views affected by this issue are those whose begin()/end() member\nhas a placeholder return type and that member initializes an _Iterator\nor _Sentinel object from a reference to *this.  The second condition is\nrelevant because it means explicit conversion functions are considered\nduring overload resolution (as per [over.match.copy], I think), and\ntherefore it causes g++ to check the constraints of the conversion\nfunction view_interface<foo_view>::operator bool().  And this conversion\nfunction's constraints indirectly require range<foo_view>.\n\nThis issue is observable on trunk only with basic_istream_view (as in\nthe testcase in the PR).  But a pending patch that makes g++ memoize\nconstraint satisfaction values indefinitely (it currently invalidates\nthe satisfaction cache on various events) causes many existing tests for\nthe other affected views to fail, because range<foo_view> then remains\nfalse for the whole compilation.\n\nThis patch works around this issue by adjusting the constructors of the\n_Iterator and _Sentinel types of the affected views to take their\nfoo_view argument by pointer instead of by reference, so that g++ no\nlonger considers explicit conversion functions when resolving the\ndirect-initialization inside these views' begin()/end() members.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97600\n\t* include/std/ranges (basic_istream_view::begin): Initialize\n\t_Iterator from 'this' instead of '*this'.\n\t(basic_istream_view::_Iterator::_Iterator): Adjust constructor\n\taccordingly.\n\t(filter_view::_Iterator::_Iterator): Take a filter_view*\n\targument instead of a filter_view& argument.\n\t(filter_view::_Sentinel::_Sentinel): Likewise.\n\t(filter_view::begin): Initialize _Iterator from 'this' instead\n\tof '*this'.\n\t(filter_view::end): Likewise.\n\t(transform_view::_Iterator::_Iterator): Take a _Parent* instead\n\tof a _Parent&.\n\t(filter_view::_Iterator::operator+): Adjust accordingly.\n\t(filter_view::_Iterator::operator-): Likewise.\n\t(filter_view::begin): Initialize _Iterator from 'this' instead\n\tof '*this'.\n\t(filter_view::end): Likewise.\n\t(join_view::_Iterator): Take a _Parent* instead of a _Parent&.\n\t(join_view::_Sentinel): Likewise.\n\t(join_view::begin): Initialize _Iterator from 'this' instead of\n\t'*this'.\n\t(join_view::end): Initialize _Sentinel from 'this' instead of\n\t'*this'.\n\t(split_view::_OuterIter): Take a _Parent& instead of a _Parent*.\n\t(split_view::begin): Initialize _OuterIter from 'this' instead\n\tof '*this'.\n\t(split_view::end): Likewise.\n\t* testsuite/std/ranges/97600.cc: New test.", "tree": {"sha": "1838a684be02275242b26ab1ebcd41c37d4b90a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1838a684be02275242b26ab1ebcd41c37d4b90a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afb8da7faa9dfe5a0d94ed45a373d74c076784ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb8da7faa9dfe5a0d94ed45a373d74c076784ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb8da7faa9dfe5a0d94ed45a373d74c076784ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb8da7faa9dfe5a0d94ed45a373d74c076784ab/comments", "author": null, "committer": null, "parents": [{"sha": "39bf4f14fc75e14aafc4ba8a53a34775f29b743a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39bf4f14fc75e14aafc4ba8a53a34775f29b743a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39bf4f14fc75e14aafc4ba8a53a34775f29b743a"}], "stats": {"total": 110, "additions": 71, "deletions": 39}, "files": [{"sha": "14d2a11f7fb67b39d8c774bd4945a8db05f6b85e", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb8da7faa9dfe5a0d94ed45a373d74c076784ab/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb8da7faa9dfe5a0d94ed45a373d74c076784ab/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=afb8da7faa9dfe5a0d94ed45a373d74c076784ab", "patch": "@@ -636,7 +636,7 @@ namespace views\n       {\n \tif (_M_stream != nullptr)\n \t  *_M_stream >> _M_object;\n-\treturn _Iterator{*this};\n+\treturn _Iterator{this};\n       }\n \n       constexpr default_sentinel_t\n@@ -657,8 +657,8 @@ namespace views\n \t_Iterator() = default;\n \n \tconstexpr explicit\n-\t_Iterator(basic_istream_view& __parent) noexcept\n-\t  : _M_parent(std::__addressof(__parent))\n+\t_Iterator(basic_istream_view* __parent) noexcept\n+\t  : _M_parent(__parent)\n \t{ }\n \n \t_Iterator(const _Iterator&) = delete;\n@@ -1147,9 +1147,9 @@ namespace views\n \t_Iterator() = default;\n \n \tconstexpr\n-\t_Iterator(filter_view& __parent, _Vp_iter __current)\n+\t_Iterator(filter_view* __parent, _Vp_iter __current)\n \t  : _M_current(std::move(__current)),\n-\t    _M_parent(std::__addressof(__parent))\n+\t    _M_parent(__parent)\n \t{ }\n \n \tconstexpr _Vp_iter\n@@ -1239,8 +1239,8 @@ namespace views\n \t_Sentinel() = default;\n \n \tconstexpr explicit\n-\t_Sentinel(filter_view& __parent)\n-\t  : _M_end(ranges::end(__parent._M_base))\n+\t_Sentinel(filter_view* __parent)\n+\t  : _M_end(ranges::end(__parent->_M_base))\n \t{ }\n \n \tconstexpr sentinel_t<_Vp>\n@@ -1280,23 +1280,23 @@ namespace views\n       begin()\n       {\n \tif (_M_cached_begin._M_has_value())\n-\t  return {*this, _M_cached_begin._M_get(_M_base)};\n+\t  return {this, _M_cached_begin._M_get(_M_base)};\n \n \t__glibcxx_assert(_M_pred.has_value());\n \tauto __it = __detail::find_if(ranges::begin(_M_base),\n \t\t\t\t      ranges::end(_M_base),\n \t\t\t\t      std::ref(*_M_pred));\n \t_M_cached_begin._M_set(_M_base, __it);\n-\treturn {*this, std::move(__it)};\n+\treturn {this, std::move(__it)};\n       }\n \n       constexpr auto\n       end()\n       {\n \tif constexpr (common_range<_Vp>)\n-\t  return _Iterator{*this, ranges::end(_M_base)};\n+\t  return _Iterator{this, ranges::end(_M_base)};\n \telse\n-\t  return _Sentinel{*this};\n+\t  return _Sentinel{this};\n       }\n     };\n \n@@ -1375,9 +1375,9 @@ namespace views\n \t  _Iterator() = default;\n \n \t  constexpr\n-\t  _Iterator(_Parent& __parent, _Base_iter __current)\n+\t  _Iterator(_Parent* __parent, _Base_iter __current)\n \t    : _M_current(std::move(__current)),\n-\t      _M_parent(std::__addressof(__parent))\n+\t      _M_parent(__parent)\n \t  { }\n \n \t  constexpr\n@@ -1490,17 +1490,17 @@ namespace views\n \t  friend constexpr _Iterator\n \t  operator+(_Iterator __i, difference_type __n)\n \t    requires random_access_range<_Base>\n-\t  { return {*__i._M_parent, __i._M_current + __n}; }\n+\t  { return {__i._M_parent, __i._M_current + __n}; }\n \n \t  friend constexpr _Iterator\n \t  operator+(difference_type __n, _Iterator __i)\n \t    requires random_access_range<_Base>\n-\t  { return {*__i._M_parent, __i._M_current + __n}; }\n+\t  { return {__i._M_parent, __i._M_current + __n}; }\n \n \t  friend constexpr _Iterator\n \t  operator-(_Iterator __i, difference_type __n)\n \t    requires random_access_range<_Base>\n-\t  { return {*__i._M_parent, __i._M_current - __n}; }\n+\t  { return {__i._M_parent, __i._M_current - __n}; }\n \n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 3483. transform_view::iterator's difference is overconstrained\n@@ -1611,21 +1611,21 @@ namespace views\n \n       constexpr _Iterator<false>\n       begin()\n-      { return _Iterator<false>{*this, ranges::begin(_M_base)}; }\n+      { return _Iterator<false>{this, ranges::begin(_M_base)}; }\n \n       constexpr _Iterator<true>\n       begin() const\n \trequires range<const _Vp>\n \t  && regular_invocable<const _Fp&, range_reference_t<const _Vp>>\n-      { return _Iterator<true>{*this, ranges::begin(_M_base)}; }\n+      { return _Iterator<true>{this, ranges::begin(_M_base)}; }\n \n       constexpr _Sentinel<false>\n       end()\n       { return _Sentinel<false>{ranges::end(_M_base)}; }\n \n       constexpr _Iterator<false>\n       end() requires common_range<_Vp>\n-      { return _Iterator<false>{*this, ranges::end(_M_base)}; }\n+      { return _Iterator<false>{this, ranges::end(_M_base)}; }\n \n       constexpr _Sentinel<true>\n       end() const\n@@ -1637,7 +1637,7 @@ namespace views\n       end() const\n \trequires common_range<const _Vp>\n \t  && regular_invocable<const _Fp&, range_reference_t<const _Vp>>\n-      { return _Iterator<true>{*this, ranges::end(_M_base)}; }\n+      { return _Iterator<true>{this, ranges::end(_M_base)}; }\n \n       constexpr auto\n       size() requires sized_range<_Vp>\n@@ -2193,9 +2193,9 @@ namespace views\n \t  _Iterator() = default;\n \n \t  constexpr\n-\t  _Iterator(_Parent& __parent, _Outer_iter __outer)\n+\t  _Iterator(_Parent* __parent, _Outer_iter __outer)\n \t    : _M_outer(std::move(__outer)),\n-\t      _M_parent(std::__addressof(__parent))\n+\t      _M_parent(__parent)\n \t  { _M_satisfy(); }\n \n \t  constexpr\n@@ -2315,8 +2315,8 @@ namespace views\n \t  _Sentinel() = default;\n \n \t  constexpr explicit\n-\t  _Sentinel(_Parent& __parent)\n-\t    : _M_end(ranges::end(__parent._M_base))\n+\t  _Sentinel(_Parent* __parent)\n+\t    : _M_end(ranges::end(__parent->_M_base))\n \t  { }\n \n \t  constexpr\n@@ -2363,15 +2363,15 @@ namespace views\n \tconstexpr bool __use_const\n \t  = (__detail::__simple_view<_Vp>\n \t     && is_reference_v<range_reference_t<_Vp>>);\n-\treturn _Iterator<__use_const>{*this, ranges::begin(_M_base)};\n+\treturn _Iterator<__use_const>{this, ranges::begin(_M_base)};\n       }\n \n       constexpr auto\n       begin() const\n \trequires input_range<const _Vp>\n \t  && is_reference_v<range_reference_t<const _Vp>>\n       {\n-\treturn _Iterator<true>{*this, ranges::begin(_M_base)};\n+\treturn _Iterator<true>{this, ranges::begin(_M_base)};\n       }\n \n       constexpr auto\n@@ -2380,10 +2380,10 @@ namespace views\n \tif constexpr (forward_range<_Vp> && is_reference_v<_InnerRange>\n \t\t      && forward_range<_InnerRange>\n \t\t      && common_range<_Vp> && common_range<_InnerRange>)\n-\t  return _Iterator<__detail::__simple_view<_Vp>>{*this,\n+\t  return _Iterator<__detail::__simple_view<_Vp>>{this,\n \t\t\t\t\t\t\t ranges::end(_M_base)};\n \telse\n-\t  return _Sentinel<__detail::__simple_view<_Vp>>{*this};\n+\t  return _Sentinel<__detail::__simple_view<_Vp>>{this};\n       }\n \n       constexpr auto\n@@ -2396,9 +2396,9 @@ namespace views\n \t\t      && forward_range<range_reference_t<const _Vp>>\n \t\t      && common_range<const _Vp>\n \t\t      && common_range<range_reference_t<const _Vp>>)\n-\t  return _Iterator<true>{*this, ranges::end(_M_base)};\n+\t  return _Iterator<true>{this, ranges::end(_M_base)};\n \telse\n-\t  return _Sentinel<true>{*this};\n+\t  return _Sentinel<true>{this};\n       }\n     };\n \n@@ -2517,14 +2517,14 @@ namespace views\n \t  _OuterIter() = default;\n \n \t  constexpr explicit\n-\t  _OuterIter(_Parent& __parent) requires (!forward_range<_Base>)\n-\t    : _M_parent(std::__addressof(__parent))\n+\t  _OuterIter(_Parent* __parent) requires (!forward_range<_Base>)\n+\t    : _M_parent(__parent)\n \t  { }\n \n \t  constexpr\n-\t  _OuterIter(_Parent& __parent, iterator_t<_Base> __current)\n+\t  _OuterIter(_Parent* __parent, iterator_t<_Base> __current)\n \t    requires forward_range<_Base>\n-\t    : _M_parent(std::__addressof(__parent)),\n+\t    : _M_parent(__parent),\n \t      _M_current(std::move(__current))\n \t  { }\n \n@@ -2749,25 +2749,25 @@ namespace views\n       {\n \tif constexpr (forward_range<_Vp>)\n \t  return _OuterIter<__detail::__simple_view<_Vp>>{\n-\t      *this, ranges::begin(_M_base)};\n+\t      this, ranges::begin(_M_base)};\n \telse\n \t  {\n \t    _M_current = ranges::begin(_M_base);\n-\t    return _OuterIter<false>{*this};\n+\t    return _OuterIter<false>{this};\n \t  }\n       }\n \n       constexpr auto\n       begin() const requires forward_range<_Vp> && forward_range<const _Vp>\n       {\n-\treturn _OuterIter<true>{*this, ranges::begin(_M_base)};\n+\treturn _OuterIter<true>{this, ranges::begin(_M_base)};\n       }\n \n       constexpr auto\n       end() requires forward_range<_Vp> && common_range<_Vp>\n       {\n \treturn _OuterIter<__detail::__simple_view<_Vp>>{\n-\t    *this, ranges::end(_M_base)};\n+\t    this, ranges::end(_M_base)};\n       }\n \n       constexpr auto\n@@ -2776,7 +2776,7 @@ namespace views\n \tif constexpr (forward_range<_Vp>\n \t\t      && forward_range<const _Vp>\n \t\t      && common_range<const _Vp>)\n-\t  return _OuterIter<true>{*this, ranges::end(_M_base)};\n+\t  return _OuterIter<true>{this, ranges::end(_M_base)};\n \telse\n \t  return default_sentinel;\n       }"}, {"sha": "d992318259d5689d8cc197468f183b8eb03ca849", "filename": "libstdc++-v3/testsuite/std/ranges/97600.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afb8da7faa9dfe5a0d94ed45a373d74c076784ab/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2F97600.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afb8da7faa9dfe5a0d94ed45a373d74c076784ab/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2F97600.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2F97600.cc?ref=afb8da7faa9dfe5a0d94ed45a373d74c076784ab", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// PR libstdc++/97600\n+\n+#include <sstream>\n+#include <ranges>\n+\n+void\n+test01()\n+{\n+  std::ranges::basic_istream_view<int, char, std::char_traits<char>> v;\n+  v.begin();\n+  static_assert(std::ranges::range<decltype(v)>);\n+}"}]}