{"sha": "c27b5c621add2e8fb6b902db970f1567f98702e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI3YjVjNjIxYWRkMmU4ZmI2YjkwMmRiOTcwZjE1NjdmOTg3MDJlNQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-02T21:34:42Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-02T21:34:42Z"}, "message": "(simplify_relational_operation): Don't simplify A-B for\ncompare of A and B when the compare is unsigned.\n\nFrom-SVN: r9296", "tree": {"sha": "0b0d136390a8eedbd3118eb72d8370c894773cbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b0d136390a8eedbd3118eb72d8370c894773cbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c27b5c621add2e8fb6b902db970f1567f98702e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27b5c621add2e8fb6b902db970f1567f98702e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27b5c621add2e8fb6b902db970f1567f98702e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27b5c621add2e8fb6b902db970f1567f98702e5/comments", "author": null, "committer": null, "parents": [{"sha": "e3124505ece242bb964c02b325395e5831c3975e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3124505ece242bb964c02b325395e5831c3975e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3124505ece242bb964c02b325395e5831c3975e"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "7a0aba82ef121391d2841ca80fdd68355acab543", "filename": "gcc/cse.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c27b5c621add2e8fb6b902db970f1567f98702e5/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c27b5c621add2e8fb6b902db970f1567f98702e5/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c27b5c621add2e8fb6b902db970f1567f98702e5", "patch": "@@ -4378,20 +4378,16 @@ simplify_relational_operation (code, mode, op0, op1)\n      a register or a CONST_INT, this can't help; testing for these cases will\n      prevent infinite recursion here and speed things up.\n \n-     If CODE is an unsigned comparison, we can only do this if A - B is a\n-     constant integer, and then we have to compare that integer with zero as a\n-     signed comparison.  Note that this will give the incorrect result from\n-     comparisons that overflow.  Since these are undefined, this is probably\n-     OK.  If it causes a problem, we can check for A or B being an address\n-     (fp + const or SYMBOL_REF) and only do it in that case.  */\n+     If CODE is an unsigned comparison, then we can never do this optimization,\n+     because it gives an incorrect result if the subtraction wraps around zero.\n+     ANSI C defines unsigned operations such that they never overflow, and\n+     thus such cases can not be ignored.  */\n \n   if (INTEGRAL_MODE_P (mode) && op1 != const0_rtx\n       && ! ((GET_CODE (op0) == REG || GET_CODE (op0) == CONST_INT)\n \t    && (GET_CODE (op1) == REG || GET_CODE (op1) == CONST_INT))\n       && 0 != (tem = simplify_binary_operation (MINUS, mode, op0, op1))\n-      && (GET_CODE (tem) == CONST_INT\n-\t  || (code != GTU && code != GEU &&\n-\t      code != LTU && code != LEU)))\n+      && code != GTU && code != GEU && code != LTU && code != LEU)\n     return simplify_relational_operation (signed_condition (code),\n \t\t\t\t\t  mode, tem, const0_rtx);\n "}]}