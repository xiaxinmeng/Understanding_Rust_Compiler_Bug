{"sha": "b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYyNjgwMTZiZjQ2ZGQ2MzIyN2RjYmI3M2QxM2MzMGEzYjRiOWQyYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-25T19:20:58Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-26T12:46:59Z"}, "message": "optabs: Don't use scalar conversions for vectors [PR93843]\n\nIn this PR we had a conversion between two integer vectors that\nboth had scalar integer modes.  We then tried to implement the\nconversion using the scalar optab for those modes, instead of\ndoing the conversion elementwise.\n\nI wondered about letting through scalar modes for single-element\nvectors, but I don't have any evidence that that's useful/necessary,\nso it seemed better to keep things simple.\n\n2020-02-26  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR middle-end/93843\n\t* optabs-tree.c (supportable_convert_operation): Reject types with\n\tscalar modes.\n\ngcc/testsuite/\n\tPR middle-end/93843\n\t* gcc.dg/vect/pr93843-1.c: New test.\n\t* gcc.dg/vect/pr93843-2.c: Likewise.", "tree": {"sha": "6d54c20e191f38ffdf3b5bb4d5976ca8bf4d1307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d54c20e191f38ffdf3b5bb4d5976ca8bf4d1307"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67fa274cd635ec3c8af635294b67f09e45e3c56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67fa274cd635ec3c8af635294b67f09e45e3c56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67fa274cd635ec3c8af635294b67f09e45e3c56a"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "c5b1eccb7d6c4f9b285fb076d1a5ddf3534151a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "patch": "@@ -1,3 +1,9 @@\n+2020-02-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/93843\n+\t* optabs-tree.c (supportable_convert_operation): Reject types with\n+\tscalar modes.\n+\n 2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (ANALYZER_OBJS): Add analyzer/bar-chart.o."}, {"sha": "badd30bfda8dcf385a7c05f31ccba4834dabc825", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "patch": "@@ -284,9 +284,14 @@ supportable_convert_operation (enum tree_code code,\n   machine_mode m1,m2;\n   bool truncp;\n \n+  gcc_assert (VECTOR_TYPE_P (vectype_out) && VECTOR_TYPE_P (vectype_in));\n+\n   m1 = TYPE_MODE (vectype_out);\n   m2 = TYPE_MODE (vectype_in);\n \n+  if (!VECTOR_MODE_P (m1) || !VECTOR_MODE_P (m2))\n+    return false;\n+\n   /* First check if we can done conversion directly.  */\n   if ((code == FIX_TRUNC_EXPR\n        && can_fix_p (m1,m2,TYPE_UNSIGNED (vectype_out), &truncp)"}, {"sha": "aa5d41e5559307a8c348b7d081a10414f1f8111f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "patch": "@@ -1,3 +1,9 @@\n+2020-02-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR middle-end/93843\n+\t* gcc.dg/vect/pr93843-1.c: New test.\n+\t* gcc.dg/vect/pr93843-2.c: Likewise.\n+\n 2020-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/93820"}, {"sha": "23a79ca4c96389efc73f7a880ea12c671ff89666", "filename": "gcc/testsuite/gcc.dg/vect/pr93843-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93843-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93843-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93843-1.c?ref=b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "patch": "@@ -0,0 +1,21 @@\n+char a;\n+struct S { short b, c; } d;\n+\n+__attribute__((noipa)) void\n+foo (int x)\n+{\n+  if (x != 4)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  short *g = &d.c, *h = &d.b;\n+  char e = 4 - a;\n+  int f;\n+  *h = *g = e;\n+  for (f = 0; f < 2; f++)\n+    foo (d.c);\n+  return 0;\n+}"}, {"sha": "5fae3e5be1761890da8b620d24516409f1ac3047", "filename": "gcc/testsuite/gcc.dg/vect/pr93843-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93843-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6268016bf46dd63227dcbb73d13c30a3b4b9d2a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93843-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr93843-2.c?ref=b6268016bf46dd63227dcbb73d13c30a3b4b9d2a", "patch": "@@ -0,0 +1,11 @@\n+char in[2] = {2, 2};\n+short out[2] = {};\n+\n+int\n+main()\n+{\n+  for (int i = 0; i < 2; ++i)\n+    out[i] = in[i];\n+  asm(\"\":::\"memory\");\n+  if (out[0] != 2) __builtin_abort();\n+}"}]}