{"sha": "c67624232a1cb16a99497605dde681eee711dbbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY3NjI0MjMyYTFjYjE2YTk5NDk3NjA1ZGRlNjgxZWVlNzExZGJiZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-10-31T18:56:05Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-10-31T18:56:05Z"}, "message": "builtins.def (DEF_FLOATN_BUILTIN): Change most _Float<N> and _Float<N>X built-in functions so that the variant...\n\n2017-10-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* builtins.def (DEF_FLOATN_BUILTIN): Change most _Float<N> and\n\t_Float<N>X built-in functions so that the variant without the\n\t\"__builtin_\" prefix is only enabled for the GNU C and Objective C\n\tlanguages when they are in non-strict ANSI/ISO mode.\n\t(DEF_EXT_LIB_FLOATN_NX_BUILTINS): Likewise.\n\t* target.def (floatn_builtin_p): Add a target hook to control\n\twhether _Float<N> and _Float<N>X built-in functions without the\n\t\"__builtin_\" prefix are enabled, and return true for C and\n\tObjective C in the default hook.  Include langhooks.h in\n\ttarghooks.c.\n\t* targhooks.h (default_floatn_builtin_p): Likewise.\n\t* targhooks.c (default_floatn_builtin_p): Likewise.\n\t* doc/tm.texi.in (TARGET_FLOATN_BUILTIN_P): Document the\n\tfloatn_builtin_p target hook.\n\t* doc/tm.texi (TARGET_FLOATN_BUILTIN_P): Likewise.\n\nFrom-SVN: r254277", "tree": {"sha": "ba35a870ef34fc78dab1cf19295e5566bcebb694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba35a870ef34fc78dab1cf19295e5566bcebb694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c67624232a1cb16a99497605dde681eee711dbbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67624232a1cb16a99497605dde681eee711dbbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67624232a1cb16a99497605dde681eee711dbbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67624232a1cb16a99497605dde681eee711dbbd/comments", "author": null, "committer": null, "parents": [{"sha": "6ff16d19d26a41cd7abb01e858529fae54de746a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff16d19d26a41cd7abb01e858529fae54de746a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff16d19d26a41cd7abb01e858529fae54de746a"}], "stats": {"total": 99, "additions": 87, "deletions": 12}, "files": [{"sha": "0c059e5e9ff91af6493d447f5984de6242e51d41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c67624232a1cb16a99497605dde681eee711dbbd", "patch": "@@ -1,3 +1,21 @@\n+2017-10-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* builtins.def (DEF_FLOATN_BUILTIN): Change most _Float<N> and\n+\t_Float<N>X built-in functions so that the variant without the\n+\t\"__builtin_\" prefix is only enabled for the GNU C and Objective C\n+\tlanguages when they are in non-strict ANSI/ISO mode.\n+\t(DEF_EXT_LIB_FLOATN_NX_BUILTINS): Likewise.\n+\t* target.def (floatn_builtin_p): Add a target hook to control\n+\twhether _Float<N> and _Float<N>X built-in functions without the\n+\t\"__builtin_\" prefix are enabled, and return true for C and\n+\tObjective C in the default hook.  Include langhooks.h in\n+\ttarghooks.c.\n+\t* targhooks.h (default_floatn_builtin_p): Likewise.\n+\t* targhooks.c (default_floatn_builtin_p): Likewise.\n+\t* doc/tm.texi.in (TARGET_FLOATN_BUILTIN_P): Document the\n+\tfloatn_builtin_p target hook.\n+\t* doc/tm.texi (TARGET_FLOATN_BUILTIN_P): Likewise.\n+\n 2017-10-31  Matthew Fortune  <matthew.fortune@imgtec.com>\n             Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "26118f1766bb51649ae8c9121ba801fb4ce08b6a", "filename": "gcc/builtins.def", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=c67624232a1cb16a99497605dde681eee711dbbd", "patch": "@@ -130,18 +130,26 @@ along with GCC; see the file COPYING3.  If not see\n \n /* A set of GCC builtins for _FloatN and _FloatNx types.  TYPE_MACRO is called\n    with an argument such as FLOAT32 to produce the enum value for the type.  If\n-   we are being fully conformant we ignore the version of these builtins that\n-   does not being with __builtin_.  */\n+   we are compiling for the C language with GNU extensions, we enable the name\n+   without the __builtin_ prefix as well as the name with the __builtin_\n+   prefix.  C++ does not enable these names by default because they don't have\n+   the _Float<N> and _Float<N>X keywords, and a class based library should use\n+   the __builtin_ names.  */\n+#undef DEF_FLOATN_BUILTIN\n+#define DEF_FLOATN_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+\t       targetm.floatn_builtin_p ((int) ENUM), true, true, ATTRS, \\\n+\t       false, true)\n #undef DEF_EXT_LIB_FLOATN_NX_BUILTINS\n-#define DEF_EXT_LIB_FLOATN_NX_BUILTINS(ENUM, NAME, TYPE_MACRO, ATTRS)\t\t\\\n-  DEF_EXT_LIB_BUILTIN (ENUM ## F16, NAME \"f16\", TYPE_MACRO (FLOAT16), ATTRS) \\\n-  DEF_EXT_LIB_BUILTIN (ENUM ## F32, NAME \"f32\", TYPE_MACRO (FLOAT32), ATTRS) \\\n-  DEF_EXT_LIB_BUILTIN (ENUM ## F64, NAME \"f64\", TYPE_MACRO (FLOAT64), ATTRS) \\\n-  DEF_EXT_LIB_BUILTIN (ENUM ## F128, NAME \"f128\", TYPE_MACRO (FLOAT128), ATTRS)\\\n-  DEF_EXT_LIB_BUILTIN (ENUM ## F32X, NAME \"f32x\", TYPE_MACRO (FLOAT32X), ATTRS)\\\n-  DEF_EXT_LIB_BUILTIN (ENUM ## F64X, NAME \"f64x\", TYPE_MACRO (FLOAT64X), ATTRS)\\\n-  DEF_EXT_LIB_BUILTIN (ENUM ## F128X, NAME \"f128x\", TYPE_MACRO (FLOAT128X), \\\n-\t\t\tATTRS)\n+#define DEF_EXT_LIB_FLOATN_NX_BUILTINS(ENUM, NAME, TYPE_MACRO, ATTRS)\t\\\n+  DEF_FLOATN_BUILTIN (ENUM ## F16, NAME \"f16\", TYPE_MACRO (FLOAT16), ATTRS) \\\n+  DEF_FLOATN_BUILTIN (ENUM ## F32, NAME \"f32\", TYPE_MACRO (FLOAT32), ATTRS) \\\n+  DEF_FLOATN_BUILTIN (ENUM ## F64, NAME \"f64\", TYPE_MACRO (FLOAT64), ATTRS) \\\n+  DEF_FLOATN_BUILTIN (ENUM ## F128, NAME \"f128\", TYPE_MACRO (FLOAT128), ATTRS) \\\n+  DEF_FLOATN_BUILTIN (ENUM ## F32X, NAME \"f32x\", TYPE_MACRO (FLOAT32X), ATTRS) \\\n+  DEF_FLOATN_BUILTIN (ENUM ## F64X, NAME \"f64x\", TYPE_MACRO (FLOAT64X), ATTRS) \\\n+  DEF_FLOATN_BUILTIN (ENUM ## F128X, NAME \"f128x\", TYPE_MACRO (FLOAT128X), \\\n+\t\t      ATTRS)\n \n /* Like DEF_LIB_BUILTIN, except that the function is only a part of\n    the standard in C94 or above.  */"}, {"sha": "cba3fa62990becd977df59c7c7478b0edd1ffb26", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c67624232a1cb16a99497605dde681eee711dbbd", "patch": "@@ -4284,6 +4284,17 @@ ISO/IEC TS 18661-3:2015; that is, @var{n} is one of 32, 64, 128, or,\n if @var{extended} is false, 16 or greater than 128 and a multiple of 32.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_FLOATN_BUILTIN_P (int @var{func})\n+Define this to return true if the @code{_Float@var{n}} and\n+@code{_Float@var{n}x} built-in functions should implicitly enable the\n+built-in function without the @code{__builtin_} prefix in addition to the\n+normal built-in function with the @code{__builtin_} prefix.  The default is\n+to only enable built-in functions without the @code{__builtin_} prefix for\n+the GNU C langauge.  In strict ANSI/ISO mode, the built-in function without\n+the @code{__builtin_} prefix is not enabled.  The argument @code{FUNC} is the\n+@code{enum built_in_function} id of the function to be enabled.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P (machine_mode @var{mode})\n Define this to return nonzero for machine modes for which the port has\n small register classes.  If this target hook returns nonzero for a given"}, {"sha": "e7d4ada290f49c5980eede3c6481fe04610f5d2c", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c67624232a1cb16a99497605dde681eee711dbbd", "patch": "@@ -3326,6 +3326,8 @@ stack.\n \n @hook TARGET_FLOATN_MODE\n \n+@hook TARGET_FLOATN_BUILTIN_P\n+\n @hook TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P\n \n @node Scalar Return"}, {"sha": "65a415e0f6f09537b1190480e18fea3b67c823cc", "filename": "gcc/target.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=c67624232a1cb16a99497605dde681eee711dbbd", "patch": "@@ -3458,6 +3458,19 @@ if @var{extended} is false, 16 or greater than 128 and a multiple of 32.\",\n  opt_scalar_float_mode, (int n, bool extended),\n  default_floatn_mode)\n \n+DEFHOOK\n+(floatn_builtin_p,\n+  \"Define this to return true if the @code{_Float@var{n}} and\\n\\\n+@code{_Float@var{n}x} built-in functions should implicitly enable the\\n\\\n+built-in function without the @code{__builtin_} prefix in addition to the\\n\\\n+normal built-in function with the @code{__builtin_} prefix.  The default is\\n\\\n+to only enable built-in functions without the @code{__builtin_} prefix for\\n\\\n+the GNU C langauge.  In strict ANSI/ISO mode, the built-in function without\\n\\\n+the @code{__builtin_} prefix is not enabled.  The argument @code{FUNC} is the\\n\\\n+@code{enum built_in_function} id of the function to be enabled.\",\n+ bool, (int func),\n+ default_floatn_builtin_p)\n+\n /* Compute cost of moving data from a register of class FROM to one of\n    TO, using MODE.  */\n DEFHOOK"}, {"sha": "b545bbb8e5b7ed16c2ad04e84ad193d12fd2f690", "filename": "gcc/targhooks.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=c67624232a1cb16a99497605dde681eee711dbbd", "patch": "@@ -81,7 +81,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"predict.h\"\n #include \"params.h\"\n #include \"real.h\"\n-\n+#include \"langhooks.h\"\n \n bool\n default_legitimate_address_p (machine_mode mode ATTRIBUTE_UNUSED,\n@@ -563,6 +563,28 @@ default_floatn_mode (int n, bool extended)\n   return opt_scalar_float_mode ();\n }\n \n+/* Define this to return true if the _Floatn and _Floatnx built-in functions\n+   should implicitly enable the built-in function without the __builtin_ prefix\n+   in addition to the normal built-in function with the __builtin_ prefix.  The\n+   default is to only enable built-in functions without the __builtin_ prefix\n+   for the GNU C langauge.  The argument FUNC is the enum builtin_in_function\n+   id of the function to be enabled.  */\n+\n+bool\n+default_floatn_builtin_p (int func ATTRIBUTE_UNUSED)\n+{\n+  static bool first_time_p = true;\n+  static bool c_or_objective_c;\n+\n+  if (first_time_p)\n+    {\n+      first_time_p = false;\n+      c_or_objective_c = lang_GNU_C () || lang_GNU_OBJC ();\n+    }\n+\n+  return c_or_objective_c;\n+}\n+\n /* Make some target macros useable by target-independent code.  */\n bool\n targhook_words_big_endian (void)"}, {"sha": "86862048c287aff1b95e6917dce820ecc4a1f14e", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67624232a1cb16a99497605dde681eee711dbbd/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=c67624232a1cb16a99497605dde681eee711dbbd", "patch": "@@ -75,6 +75,7 @@ extern tree default_mangle_assembler_name (const char *);\n extern bool default_scalar_mode_supported_p (scalar_mode);\n extern bool default_libgcc_floating_mode_supported_p (scalar_float_mode);\n extern opt_scalar_float_mode default_floatn_mode (int, bool);\n+extern bool default_floatn_builtin_p (int);\n extern bool targhook_words_big_endian (void);\n extern bool targhook_float_words_big_endian (void);\n extern bool default_float_exceptions_rounding_supported_p (void);"}]}