{"sha": "33bdeb67480c8e551270c9f93be79750c0afbebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiZGViNjc0ODBjOGU1NTEyNzBjOWY5M2JlNzk3NTBjMGFmYmViZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-08-24T11:57:29Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "1998-08-24T11:57:29Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r21944", "tree": {"sha": "4071b6f304fd71222a3fc9d3c3dc4fe5627cd4ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4071b6f304fd71222a3fc9d3c3dc4fe5627cd4ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33bdeb67480c8e551270c9f93be79750c0afbebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33bdeb67480c8e551270c9f93be79750c0afbebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33bdeb67480c8e551270c9f93be79750c0afbebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33bdeb67480c8e551270c9f93be79750c0afbebd/comments", "author": null, "committer": null, "parents": [{"sha": "2450bb7d4d5a5ee5958d6f21d936032d32a875a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2450bb7d4d5a5ee5958d6f21d936032d32a875a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2450bb7d4d5a5ee5958d6f21d936032d32a875a1"}], "stats": {"total": 209, "additions": 209, "deletions": 0}, "files": [{"sha": "44e8ad879377866454f9515c0994317764f91f78", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/tem03.C", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33bdeb67480c8e551270c9f93be79750c0afbebd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33bdeb67480c8e551270c9f93be79750c0afbebd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftem03.C?ref=33bdeb67480c8e551270c9f93be79750c0afbebd", "patch": "@@ -0,0 +1,209 @@\n+// Build don't link:\n+// 980808-980824 bkoz\n+// template parameter redeclaration bugs\n+\n+// 14.1 Template parameters\n+// p 13\n+// The scope of a template-parameter extens from its point of\n+// declartion until the end of its template. In particular, a\n+// template-parameter can be used in the declaration of subsequent\n+// template-parameters and their default arguments. \n+\n+// 14.6.1 Locally declared names\n+// p 4\n+// A template-parameter shall not be redeclared within its scope\n+// (including nested scopes). A template-parameter shall not have the\n+// sname name as the template name.\n+\n+\n+// 01 \n+// declared friend template\n+template <class T4>// ERROR - .*\n+class Xone {\n+protected:\n+  T4* next;\n+  T4* prev;\n+  T4 value;\n+public:\n+  Xone(): next(0), prev(0), value(1999){}\n+  Xone(T4 init): value(init) {}\n+\n+  // these are ok:\n+  // can also do template-decl and then can ditch the foward-declaration\n+  // template <class T5> friend bool isequal (Xone<T5>& lhs, Xone<T5>& rhs);\n+  // this is not ok:\n+  template <class T4> friend bool isequal (Xone<T4>& lhs, Xone<T4>& rhs);// ERROR - .*\n+};\n+\n+\n+// 02\n+// nested template class\n+template <class T6>// ERROR - .*\n+class Xtwo {\n+protected:\n+  T6* next;\n+  T6* prev;\n+  T6 value;\n+public:\n+  Xtwo(): next(0), prev(0), value(1999){}\n+  Xtwo(T6 init): value(init) {}\n+\n+  template <class T6> class nested {// ERROR - .*\n+    T6 value;\n+  public:\n+    nested(): value( T6(0)) {}\n+  };\n+};\n+\n+\n+// 03\n+// member templates\n+template <class T8>// ERROR - .*\n+class Xthree {\n+protected:\n+  T8* next;\n+  T8* prev;\n+  T8 value;\n+public:\n+  Xthree(): next(0), prev(0), value(1999){}\n+  Xthree(T8 init): value(init) {}\n+\n+  template <class T8> T8 comp_ge(T8 test) {// ERROR - .*\n+    T8 local_value;\n+    if (local_value > value) \n+      return local_value;\n+    else\n+      return value;\n+  }\n+};\n+\n+\n+// 04\n+// local names (14.6.1 p 4)\n+template <class T10, int i> class Xfour {// ERROR - .*\n+  int T10; // ERROR - .*\n+  void f(){\n+    char T10; // ERROR - .*\n+  }\n+};\n+\n+\n+// 05\n+// using different tempate-parms for out-of-line defs\n+template <class T12, int i> class Xfive {\n+  void f();\n+};\n+\n+template <class T13, int i> void Xfive<T13,i>::f() {// ERROR - .*\n+  int T13; // ERROR - .*\n+  int T12; //should be ok\n+}\n+\n+\n+// 06\n+// multiple names at the same level\n+template <class T14, class T14> class Xsix { // ERROR - .*\n+private:\n+public:\n+  void f();\n+};\n+\n+\n+// 07\n+// multiple names, one in template parameter one in class-name\n+template <class T12> class T12; // ERROR - .*\n+\n+\n+// 08 \n+// with multiple template params, and second (third) one is redeclared\n+template <class T16, int i, class T161> class Xseven { // ERROR - .*\n+private:\n+  char T161; // ERROR - .*\n+public:\n+  template <class U>\n+  friend bool fooy(U u);\n+\n+  template <class T161> // ERROR - .*\n+  friend bool foo(T161 u)\n+    {\n+      Xseven<T161, 5, int> obj;\n+      return (obj.inst == u.inst);\n+    }\n+\n+};\n+\n+\n+// 09 \n+// check for correct scoping of member templates\n+template <class T>\n+struct S1\n+{\n+  template <class U>\n+  void f(U u)\n+    {\n+      S1<U> s2u(u);\n+      s2u.g();\n+    }\n+\n+  template <class U> //ok\n+  void f2(U u)\n+    {\n+      S1<U> s2u(u);\n+      s2u.g();\n+    }\n+\n+};\n+\n+\n+// 10 \n+// check for non-type parameters, should still be able to redeclare?\n+// local names (14.6.1 p 4)\n+template <class T18, int i> class Xten {// ERROR - .*\n+  float i; // ERROR - .*\n+};\n+\n+\n+// 11 \n+// declared friend template, non-type parameters\n+template <long l>// ERROR - .*\n+class Xeleven {\n+public:\n+  template <long l> friend bool isequal (Xeleven<5> lhs, Xeleven<5> rhs);  // ERROR - .*\n+};\n+\n+\n+\n+// 12\n+// nested template class, non-type parameters\n+template <long l>// ERROR - .*\n+class Xtwelve {\n+public:\n+  template <long l> class nested {// ERROR - .\n+    long value;\n+  public:\n+    nested(): value(0) {}\n+  };\n+};\n+\n+\n+// 13\n+// member templates, non-type parameters\n+template <long l>// ERROR - .*\n+class Xthirteen {\n+  template <long l> long comp_ge(long test) {// ERROR - .\n+    long local_value;\n+    if (local_value > value) \n+      return local_value;\n+    else\n+      return value;\n+  }\n+};\n+\n+\n+\n+\n+\n+\n+\n+\n+"}]}