{"sha": "82030d51017323c5706d58d8c8626324ece007e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIwMzBkNTEwMTczMjNjNTcwNmQ1OGQ4Yzg2MjYzMjRlY2UwMDdlNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-27T21:36:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-27T21:36:03Z"}, "message": "libstdc++: Make std::chrono::duration use reduced ratio for period\n\nThis implements the changes from P0548 \"common_type and duration\". That\nwas a change for C++17, but as it corrects some issues introduced by DRs\nI'm also treating it as a DR and changing it for all modes from C++11\nup.\n\nThe main change is that duration<R,P>::period no longer denotes P, but\nrather P::type, the reduced ratio. The unary operator+ and operator-\nmembers of duration should now return a duration using that reduced\nratio.\n\nThe requirement that common_type<T>::type is the same type as\ncommon_type<T, T>::type (rather than simply T) was already implemented\nfor PR 89102.\n\nThe standard says that duration::operator+() and duration::operator-()\nshould return common_type_t<duration>, but that seems unnecessarily\nexpensive to compute. This change just uses duration<rep, period> which\nis the same type, so we don't need to instantiate common_type.\n\nAs an optimization, this also adds partial specializations of\ncommon_type for two durations of the same type, a single duration, two\ntime_points of the same type, and a single time_point. These\nspecializations avoid instantiating other specializations of common_type\nand one or both of __duration_common_type or __timepoint_common_type for\nthe cases where the answer is trivial to obtain.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono (__duration_common_type): Ensure the\n\treduced ratio is used. Remove unused partial specialization\n\tusing __failure_type.\n\t(common_type): Pass reduced ratios to __duration_common_type.\n\tAdd partial specializations for simple cases involving a single\n\tduration or time_point type.\n\t(duration::period): Use reduced ratio.\n\t(duration::operator+(), duration::operator-()): Return duration\n\ttype using the reduced ratio.\n\t* testsuite/20_util/duration/requirements/typedefs_neg2.cc:\n\tAdjust expected errors.\n\t* testsuite/20_util/duration/requirements/reduced_period.cc: New test.", "tree": {"sha": "f548641c5b319e05a8b55b3a5f21c0e8d75457b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f548641c5b319e05a8b55b3a5f21c0e8d75457b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82030d51017323c5706d58d8c8626324ece007e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82030d51017323c5706d58d8c8626324ece007e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82030d51017323c5706d58d8c8626324ece007e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82030d51017323c5706d58d8c8626324ece007e4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a55fdb1e763e252bca2c872d0ae7670d1fc720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a55fdb1e763e252bca2c872d0ae7670d1fc720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a55fdb1e763e252bca2c872d0ae7670d1fc720"}], "stats": {"total": 179, "additions": 168, "deletions": 11}, "files": [{"sha": "fb251848da8f99306ca12e3ea8c72216b80ff0c6", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82030d51017323c5706d58d8c8626324ece007e4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82030d51017323c5706d58d8c8626324ece007e4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=82030d51017323c5706d58d8c8626324ece007e4", "patch": "@@ -94,23 +94,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t(_Period1::den / __gcd_den::value) * _Period2::den>;\n \n     public:\n-      using type = chrono::duration<__cr, __r>;\n+      using type = chrono::duration<__cr, typename __r::type>;\n     };\n \n-  template<typename _Period1, typename _Period2>\n-    struct __duration_common_type<__failure_type, _Period1, _Period2>\n-    { typedef __failure_type type; };\n-\n   /// @endcond\n \n   /// Specialization of common_type for chrono::duration types.\n   /// @relates duration\n   template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>\n     struct common_type<chrono::duration<_Rep1, _Period1>,\n \t\t       chrono::duration<_Rep2, _Period2>>\n-    : __duration_common_type<common_type<_Rep1, _Rep2>, _Period1, _Period2>\n+    : __duration_common_type<common_type<_Rep1, _Rep2>,\n+\t\t\t     typename _Period1::type,\n+\t\t\t     typename _Period2::type>\n     { };\n \n+  /// Specialization of common_type for two identical chrono::duration types.\n+  /// @relates duration\n+  template<typename _Rep, typename _Period>\n+    struct common_type<chrono::duration<_Rep, _Period>,\n+\t\t       chrono::duration<_Rep, _Period>>\n+    { using type = chrono::duration<_Rep, typename _Period::type>; };\n+\n+  /// Specialization of common_type for one chrono::duration type.\n+  /// @relates duration\n+  template<typename _Rep, typename _Period>\n+    struct common_type<chrono::duration<_Rep, _Period>>\n+    { using type = chrono::duration<_Rep, typename _Period::type>; };\n+\n   // 20.11.4.3 specialization of common_type (for time_point, sfinae-friendly)\n \n   /// @cond undocumented\n@@ -135,6 +146,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : __timepoint_common_type<common_type<_Duration1, _Duration2>, _Clock>\n     { };\n \n+  /// Specialization of common_type for two identical chrono::time_point types.\n+  /// @relates time_point\n+  template<typename _Clock, typename _Duration>\n+    struct common_type<chrono::time_point<_Clock, _Duration>,\n+\t\t       chrono::time_point<_Clock, _Duration>>\n+    { using type = chrono::time_point<_Clock, _Duration>; };\n+\n+  /// Specialization of common_type for one chrono::time_point type.\n+  /// @relates time_point\n+  template<typename _Clock, typename _Duration>\n+    struct common_type<chrono::time_point<_Clock, _Duration>>\n+    { using type = chrono::time_point<_Clock, _Duration>; };\n+\n   // @} group chrono\n \n   namespace chrono\n@@ -401,8 +425,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       public:\n \n-\ttypedef _Rep\t\t\t\t\t\trep;\n-\ttypedef _Period \t\t\t\t\tperiod;\n+\tusing rep = _Rep;\n+\tusing period = typename _Period::type;\n \n \tstatic_assert(!__is_duration<_Rep>::value, \"rep cannot be a duration\");\n \tstatic_assert(__is_ratio<_Period>::value,\n@@ -438,11 +462,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ return __r; }\n \n \t// 20.11.5.3 arithmetic\n-\tconstexpr duration\n+\n+\tconstexpr duration<rep, period>\n \toperator+() const\n \t{ return *this; }\n \n-\tconstexpr duration\n+\tconstexpr duration<rep, period>\n \toperator-() const\n \t{ return duration(-__r); }\n "}, {"sha": "9eb38a0e56facc604b94d251719ea90f2f84a080", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/reduced_period.cc", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82030d51017323c5706d58d8c8626324ece007e4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82030d51017323c5706d58d8c8626324ece007e4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Freduced_period.cc?ref=82030d51017323c5706d58d8c8626324ece007e4", "patch": "@@ -0,0 +1,131 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// Test the changes introduced by P0548R1 \"common_type and duration\".\n+// Specifically, duration<R,P>::period should be the reduced ratio,\n+// and common_type<D1, D2>::type should be a duration using the\n+// reduced ratio.\n+\n+#include <chrono>\n+\n+using std::chrono::duration;\n+using std::ratio;\n+using std::common_type;\n+using std::is_same;\n+\n+void\n+test01()\n+{\n+  using D1 = duration<int, ratio<10, 10>>;\n+  static_assert( is_same<D1::period, ratio<1, 1>>::value,\n+      \"duration<R, P>::period is P::type, not P\" );\n+\n+  using C1 = common_type<D1>::type;\n+  static_assert( is_same<C1, duration<int, D1::period>>::value,\n+      \"common_type_t<duration<R, P1> is duration<R, P1::type>\");\n+  static_assert( is_same<common_type<D1, D1>::type, C1>::value,\n+      \"common_type_t<D1, D1> is common_type_t<D1>\" );\n+  static_assert( is_same<common_type<D1, D1, D1>::type, C1>::value,\n+      \"common_type_t<D1, D1, D1> is common_type_t<D1>\" );\n+\n+  using D2 = duration<int, ratio<30, 15>>;\n+  static_assert( is_same<D2::period, ratio<2, 1>>::value,\n+      \"duration<R, P2>::period is P2::type, not P2\" );\n+\n+  using C2 = common_type<D2>::type;\n+  static_assert( is_same<C2, duration<int, D2::period>>::value,\n+      \"common_type_t<duration<R, P2> is duration<R, P2::type>\");\n+  static_assert( is_same<common_type<D2, D2>::type, C2>::value,\n+      \"common_type_t<D2, D2> is common_type_t<D2>\" );\n+  static_assert( is_same<common_type<D2, D2, D2>::type, C2>::value,\n+      \"common_type_t<D2, D2, D2> is common_type_t<D2>\" );\n+\n+  using D3 = duration<int, ratio<4, 12>>;\n+  static_assert( is_same<D3::period, ratio<1, 3>>::value,\n+      \"duration<R, P3>::period is P3::type, not P3\" );\n+\n+  using C3 = common_type<D3>::type;\n+  static_assert( is_same<C3, duration<int, D3::period>>::value,\n+      \"common_type_t<duration<R, P3> is duration<R, P3::type>\");\n+  static_assert( is_same<common_type<D3, D3>::type, C3>::value,\n+      \"common_type_t<D3, D3> is common_type_t<D3>\" );\n+  static_assert( is_same<common_type<D3, D3, D3>::type, C3>::value,\n+      \"common_type_t<D3, D3, D3> is common_type_t<D3>\" );\n+\n+  using C12 = common_type<D1, D2>::type;\n+  static_assert( is_same<C12, C1>::value,\n+      \"common_type_t<D1, D2> uses the right period\" );\n+  using C21 = common_type<D2, D1>::type;\n+  static_assert( is_same<C21, C12>::value,\n+      \"common_type_t<D1, D2> is common_type_t<D2, D1>\" );\n+\n+  using C13 = common_type<D1, D3>::type;\n+  static_assert( is_same<C13, C3>::value,\n+      \"common_type_t<D1, D3> uses the right period\" );\n+  using C31 = common_type<D3, D1>::type;\n+  static_assert( is_same<C31, C13>::value,\n+      \"common_type_t<D1, D3> is common_type_t<D3, D1>\" );\n+\n+  using C23 = common_type<D2, D3>::type;\n+  static_assert( is_same<C23, C3>::value,\n+      \"common_type_t<D2, D3> uses the right period\" );\n+  using C32 = common_type<D3, D2>::type;\n+  static_assert( is_same<C32, C23>::value,\n+      \"common_type_t<D2, D3> is common_type_t<D3, D2>\" );\n+\n+  using C123 = common_type<D1, D2, D3>::type;\n+  static_assert( is_same<C123, C3>::value,\n+      \"common_type of three durations uses the right period\" );\n+  using C132 = common_type<D1, D3, D2>::type;\n+  static_assert( is_same<C132, C123>::value, \"order doesn't matter\" );\n+  using C312 = common_type<D3, D1, D2>::type;\n+  static_assert( is_same<C312, C123>::value, \"order doesn't matter\" );\n+  using C321 = common_type<D3, D2, D1>::type;\n+  static_assert( is_same<C321, C123>::value, \"order doesn't matter\" );\n+\n+  using C = common_type<duration<short, ratio<1, 3>>,\n+\t\t\tduration<unsigned, ratio<1, 2>>>::type;\n+  static_assert( is_same<C, duration<common_type<short, unsigned>::type,\n+\t\t\t\t     ratio<1, 6>>>::value, \"\" );\n+}\n+\n+void\n+test02()\n+{\n+  using D1 = duration<int, ratio<10, 10>>;\n+  D1 d1;\n+  static_assert( is_same<decltype(+d1), common_type<D1>::type>::value,\n+      \"unary + returns the reduced duration\" );\n+  static_assert( is_same<decltype(-d1), common_type<D1>::type>::value,\n+      \"unary - returns the reduced duration\" );\n+\n+  using D2 = duration<int, ratio<30, 15>>;\n+  D2 d2;\n+  static_assert( is_same<decltype(+d2), common_type<D2>::type>::value,\n+      \"unary + returns the reduced duration\" );\n+  static_assert( is_same<decltype(-d2), common_type<D2>::type>::value,\n+      \"unary - returns the reduced duration\" );\n+\n+  using D3 = duration<int, ratio<4, 12>>;\n+  D3 d3;\n+  static_assert( is_same<decltype(+d3), common_type<D3>::type>::value,\n+      \"unary + returns the reduced duration\" );\n+  static_assert( is_same<decltype(-d3), common_type<D3>::type>::value,\n+      \"unary - returns the reduced duration\" );\n+}"}, {"sha": "02dab73b0eb004d0369b4b6f61bfe81743b43a68", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/typedefs_neg2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82030d51017323c5706d58d8c8626324ece007e4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82030d51017323c5706d58d8c8626324ece007e4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Ftypedefs_neg2.cc?ref=82030d51017323c5706d58d8c8626324ece007e4", "patch": "@@ -31,4 +31,5 @@ void test01()\n }\n \n // { dg-error \"must be a specialization of ratio\" \"\" { target *-*-* } 0 }\n-// { dg-prune-output \"not a member\" }\n+// { dg-prune-output \"'num' is not a member of 'int'\" }\n+// { dg-prune-output \"'int' is not a class, struct, or union type\" }"}]}