{"sha": "2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzMGY4N2Y3NTY0NGJiNWZmM2U4ZjQyZDQ5MjJiZWY5OTUxMWI0YQ==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2016-05-06T17:37:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-05-06T17:37:55Z"}, "message": "escape: Add skeleton for gc analysis.\n\n    \n    Introduces a skeleton replacement escape analysis\n    which contains four different phases extracted from the escape\n    analysis implementation in gc/esc.go.  Also introduces the\n    Escape_context each phase uses to make decisions.\n    \n    Reviewed-on: https://go-review.googlesource.com/18220\n\nFrom-SVN: r235982", "tree": {"sha": "1255e8b4256fd282635b211389232f6921649732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1255e8b4256fd282635b211389232f6921649732"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/comments", "author": null, "committer": null, "parents": [{"sha": "a89f917b6714d53e3fb4ba6ae67f71e75d20b907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89f917b6714d53e3fb4ba6ae67f71e75d20b907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89f917b6714d53e3fb4ba6ae67f71e75d20b907"}], "stats": {"total": 183, "additions": 182, "deletions": 1}, "files": [{"sha": "e486a305a0160e7dcdc6a5e380f2803eef0f1b8d", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "patch": "@@ -1,3 +1,8 @@\n+2016-05-06  Chris Manghane  <cmang@google.com>\n+\n+\t* Make-lang.in (GO_OBJS): Add go/escape.o (based on an entirely\n+\tnew escape.cc).\n+\n 2016-04-29  Chris Manghane  <cmang@google.com>\n \n \t* Make-lang.in (GO_OBJS): Remove go/dataflow.o, go/escape.o."}, {"sha": "d5b2a776776fac13593ade9b6b241f0afa4d1fc7", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "patch": "@@ -50,6 +50,7 @@ go-warn = $(STRICT_WARN)\n \n GO_OBJS = \\\n \tgo/ast-dump.o \\\n+\tgo/escape.o \\\n \tgo/export.o \\\n \tgo/expressions.o \\\n \tgo/go-backend.o \\"}, {"sha": "d925f37948d462276c317f96e4f1ccd3bd66a166", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "patch": "@@ -1,4 +1,4 @@\n-46b108136c0d102f181f0cc7c398e3db8c4d08a3\n+33f1d1d151721305ba37f3e23652d21310f868af\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "51084c21b0e2ac74b33116e7394b49782150e1df", "filename": "gcc/go/gofrontend/escape.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "patch": "@@ -0,0 +1,95 @@\n+// escape.cc -- Go escape analysis (based on Go compiler algorithm).\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#include \"gogo.h\"\n+#include \"escape.h\"\n+\n+// Analyze the program flow for escape information.\n+\n+void\n+Gogo::analyze_escape()\n+{\n+  // Discover strongly connected groups of functions to analyze for escape\n+  // information in this package.\n+  this->discover_analysis_sets();\n+\n+  for (std::vector<Analysis_set>::iterator p = this->analysis_sets_.begin();\n+       p != this->analysis_sets_.end();\n+       ++p)\n+    {\n+      std::vector<Named_object*> stack = p->first;\n+      Escape_context* context = new Escape_context(p->second);\n+\n+      // Analyze the flow of each function; build the connection graph.\n+      // This is the assign phase.\n+      for (std::vector<Named_object*>::reverse_iterator fn = stack.rbegin();\n+           fn != stack.rend();\n+           ++fn)\n+\t{\n+\t  context->set_current_function(*fn);\n+\t  this->assign_connectivity(context, *fn);\n+\t}\n+\n+      // TODO(cmang): Introduce escape node.\n+      // Propagate levels across each dst.  This is the flood phase.\n+      // std::vector<Node*> dsts = context->dsts();\n+      // for (std::vector<Node*>::iterator n = dsts.begin();\n+      //      n != dsts.end();\n+      //      ++n)\n+      //   this->propagate_escape(context, *n);\n+\n+      // Tag each exported function's parameters with escape information.\n+      for (std::vector<Named_object*>::iterator fn = stack.begin();\n+           fn != stack.end();\n+           ++fn)\n+        this->tag_function(context, *fn);\n+\n+      delete context;\n+    }\n+}\n+\n+// Discover strongly connected groups of functions to analyze.\n+\n+void\n+Gogo::discover_analysis_sets()\n+{\n+  // TODO(cmang): Implement Analysis_set discovery traversal.\n+  // Escape_analysis_discover(this);\n+  // this->traverse(&ead);\n+}\n+\n+// Build a connectivity graph between nodes in the function being analyzed.\n+\n+void\n+Gogo::assign_connectivity(Escape_context*, Named_object*)\n+{\n+  // TODO(cmang): Model the flow analysis of input parameters and results for a\n+  // function.\n+  // TODO(cmang): Analyze the current function's body.\n+}\n+\n+// Propagate escape information across the nodes modeled in this Analysis_set,\n+// TODO(cmang): Introduce escape analysis node.\n+\n+void\n+Gogo::propagate_escape(Escape_context*)\n+{\n+  // TODO(cmang): Do a breadth-first traversal of a node's upstream, adjusting\n+  // the Level appropriately.\n+}\n+\n+\n+// Tag each top-level function with escape information that will be used to\n+// retain analysis results across imports.\n+\n+void\n+Gogo::tag_function(Escape_context*, Named_object*)\n+{\n+  // TODO(cmang): Create escape information notes for each input and output\n+  // parameter in a given function.\n+  // Escape_analysis_tag eat(context, fn);\n+  // this->traverse(&eat);\n+}"}, {"sha": "c83037338b8cc639c91ec4c6028453b6923929bb", "filename": "gcc/go/gofrontend/escape.h", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2Fgofrontend%2Fescape.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2Fgofrontend%2Fescape.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.h?ref=2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "patch": "@@ -0,0 +1,44 @@\n+// escape.h -- Go escape analysis (based on Go compiler algorithm).\n+\n+// Copyright 2016 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#ifndef GO_ESCAPE_H\n+#define GO_ESCAPE_H\n+\n+class Named_object;\n+\n+// The escape context for a set of functions being analyzed.\n+\n+class Escape_context\n+{\n+ public:\n+  Escape_context(bool recursive)\n+    : current_function_(NULL), recursive_(recursive)\n+  { }\n+\n+  // Return the current function being analyzed.\n+  Named_object*\n+  current_function() const\n+  { return this->current_function_; }\n+\n+  // Change the function being analyzed.\n+  void\n+  set_current_function(Named_object* fn)\n+  { this->current_function_ = fn; }\n+\n+  // Return true if this is the context for a mutually recursive set of functions.\n+  bool\n+  recursive() const\n+  { return this->recursive_; }\n+\n+ private:\n+  // The current function being analyzed.\n+  Named_object* current_function_;\n+  // Return whether this is the context for a recursive function or a group of mutually\n+  // recursive functions.\n+  bool recursive_;\n+};\n+\n+#endif // !defined(GO_ESCAPE_H)"}, {"sha": "b7a2e566a2f2a2390bc89f9703b0be7d3842acbd", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a30f87f75644bb5ff3e8f42d4922bef99511b4a/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=2a30f87f75644bb5ff3e8f42d4922bef99511b4a", "patch": "@@ -50,6 +50,7 @@ class Bblock;\n class Bvariable;\n class Blabel;\n class Bfunction;\n+class Escape_context;\n \n // This file declares the basic classes used to hold the internal\n // representation of Go which is built by the parser.\n@@ -345,6 +346,16 @@ class Gogo\n   add_label_reference(const std::string&, Location,\n \t\t      bool issue_goto_errors);\n \n+  // An analysis set is a list of functions paired with a boolean that indicates\n+  // whether the list of functions are recursive.\n+  typedef std::pair<std::vector<Named_object*>, bool> Analysis_set;\n+\n+  // Add a GROUP of possibly RECURSIVE functions to the Analysis_set for this\n+  // package.\n+  void\n+  add_analysis_set(const std::vector<Named_object*>& group, bool recursive)\n+  { this->analysis_sets_.push_back(std::make_pair(group, recursive)); }\n+\n   // Return a snapshot of the current binding state.\n   Bindings_snapshot*\n   bindings_snapshot(Location);\n@@ -544,6 +555,28 @@ class Gogo\n   void\n   check_return_statements();\n \n+  // Analyze the program flow for escape information.\n+  void\n+  analyze_escape();\n+\n+  // Discover the groups of possibly recursive functions in this package.\n+  void\n+  discover_analysis_sets();\n+\n+  // Build a connectivity graph between the objects in each analyzed function.\n+  void\n+  assign_connectivity(Escape_context*, Named_object*);\n+\n+  // Traverse the objects in the connecitivty graph from the sink, adjusting the\n+  // escape levels of each object.\n+  void\n+  propagate_escape(Escape_context*);\n+\n+  // Add notes about the escape level of a function's input and output\n+  // parameters for exporting and importing top level functions. \n+  void\n+  tag_function(Escape_context*, Named_object*);\n+\n   // Do all exports.\n   void\n   do_exports();\n@@ -762,6 +795,9 @@ class Gogo\n   bool specific_type_functions_are_written_;\n   // Whether named types have been converted.\n   bool named_types_are_converted_;\n+  // A list containing groups of possibly mutually recursive functions to be\n+  // considered during escape analysis.\n+  std::vector<Analysis_set> analysis_sets_;\n };\n \n // A block of statements."}]}