{"sha": "6e4a660f122aa663077ebc4250597a40904a0720", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0YTY2MGYxMjJhYTY2MzA3N2ViYzQyNTA1OTdhNDA5MDRhMDcyMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-31T16:54:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-31T16:54:49Z"}, "message": "revert: condition_variable (condition_variable_any:: wait<>(_Lock&)): Provide definition.\n\n2010-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tRevert last changes. Also revert, among the previous changes:\n\t* include/std/condition_variable (condition_variable_any::\n\twait<>(_Lock&)): Provide definition.\n\nFrom-SVN: r156403", "tree": {"sha": "f8bff3035c94f5f24e0a2ef4637b8a3a190cb565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8bff3035c94f5f24e0a2ef4637b8a3a190cb565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e4a660f122aa663077ebc4250597a40904a0720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4a660f122aa663077ebc4250597a40904a0720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4a660f122aa663077ebc4250597a40904a0720", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4a660f122aa663077ebc4250597a40904a0720/comments", "author": null, "committer": null, "parents": [{"sha": "b0a69d2062d2e866c74d47d6b7e44ded0eee9826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a69d2062d2e866c74d47d6b7e44ded0eee9826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a69d2062d2e866c74d47d6b7e44ded0eee9826"}], "stats": {"total": 122, "additions": 10, "deletions": 112}, "files": [{"sha": "1c579a003f0bf54fa1b394d91186d9dbc0ee69fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4a660f122aa663077ebc4250597a40904a0720/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4a660f122aa663077ebc4250597a40904a0720/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e4a660f122aa663077ebc4250597a40904a0720", "patch": "@@ -1,3 +1,9 @@\n+2010-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tRevert last changes. Also revert, among the previous changes:\n+\t* include/std/condition_variable (condition_variable_any::\n+\twait<>(_Lock&)): Provide definition.\n+\n 2010-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/condition_variable (condition_variable_any::"}, {"sha": "d59fdd4e9a70cf70d95fcaba8f4892dff8fd9b7d", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 2, "deletions": 49, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4a660f122aa663077ebc4250597a40904a0720/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4a660f122aa663077ebc4250597a40904a0720/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=6e4a660f122aa663077ebc4250597a40904a0720", "patch": "@@ -165,7 +165,6 @@ namespace std\n   // Like above, only mutex may not have try_lock.\n   class condition_variable_any\n   {\n-    typedef chrono::system_clock\t__clock_t;\n     typedef __gthread_cond_t\t\t__native_type;\n     __native_type\t\t\t_M_cond;\n \n@@ -186,13 +185,7 @@ namespace std\n \n     template<typename _Lock>\n       void\n-      wait(_Lock& __lock)\n-      {\n-\tint __e = __gthread_cond_wait(&_M_cond,\n-\t\t\t\t      __lock.mutex()->native_handle());\n-\tif (__e)\n-\t  __throw_system_error(__e);\n-      }\n+      wait(_Lock& __lock);\n \n     template<typename _Lock, typename _Predicate>\n       void\n@@ -202,25 +195,10 @@ namespace std\n \t  wait(__lock);\n       }\n \n-    template<typename _Lock, typename _Duration>\n-      cv_status\n-      wait_until(_Lock& __lock,\n-\t\t const chrono::time_point<__clock_t, _Duration>& __atime)\n-      { return __wait_until_impl(__lock, __atime); }\n-\n     template<typename _Lock, typename _Clock, typename _Duration>\n       cv_status\n       wait_until(_Lock& __lock,\n-\t\t const chrono::time_point<_Clock, _Duration>& __atime)\n-      {\n-\t// DR 887 - Sync unknown clock to known clock.\n-\tconst typename _Clock::time_point __c_entry = _Clock::now();\n-\tconst __clock_t::time_point __s_entry = __clock_t::now();\n-\tconst chrono::nanoseconds __delta = __atime - __c_entry;\n-\tconst __clock_t::time_point __s_atime = __s_entry + __delta;\n-\n-\treturn __wait_until_impl(__lock, __s_atime);\n-      }\n+\t\t const chrono::time_point<_Clock, _Duration>& __atime);\n \n     template<typename _Lock, typename _Clock,\n \t     typename _Duration, typename _Predicate>\n@@ -248,31 +226,6 @@ namespace std\n     native_handle_type\n     native_handle()\n     { return &_M_cond; }\n-\n-  private:\n-    template<typename _Lock, typename _Clock, typename _Duration>\n-      cv_status\n-      __wait_until_impl(_Lock& __lock,\n-\t\t\tconst chrono::time_point<_Clock, _Duration>& __atime)\n-      {\n-\tchrono::time_point<__clock_t, chrono::seconds> __s =\n-\t  chrono::time_point_cast<chrono::seconds>(__atime);\n-\n-\tchrono::nanoseconds __ns =\n-\t  chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n-\n-\t__gthread_time_t __ts =\n-\t  {\n-\t    static_cast<std::time_t>(__s.time_since_epoch().count()),\n-\t    static_cast<long>(__ns.count())\n-\t  };\n-\n-\t__gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),\n-\t\t\t\t &__ts);\n-\n-\treturn (_Clock::now() < __atime\n-\t\t? cv_status::no_timeout : cv_status::timeout);\n-      }\n   };\n \n   // @} group condition_variables"}, {"sha": "5e3e30231b4710db5124f480353c68b4e56710f4", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4a660f122aa663077ebc4250597a40904a0720/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4a660f122aa663077ebc4250597a40904a0720/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=6e4a660f122aa663077ebc4250597a40904a0720", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }"}, {"sha": "2b61c1b9621afcbf285ea00a5f99be796182ec46", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4a660f122aa663077ebc4250597a40904a0720/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4a660f122aa663077ebc4250597a40904a0720/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=6e4a660f122aa663077ebc4250597a40904a0720", "patch": "@@ -31,4 +31,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 177 }"}, {"sha": "2cb21ed49c753fa7bdf5d66424fdac94661d2ba4", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/2.cc", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a69d2062d2e866c74d47d6b7e44ded0eee9826/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a69d2062d2e866c74d47d6b7e44ded0eee9826/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc?ref=b0a69d2062d2e866c74d47d6b7e44ded0eee9826", "patch": "@@ -1,61 +0,0 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n-// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n-// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n-// { dg-require-cstdint \"\" }\n-// { dg-require-gthreads \"\" }\n-\n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <chrono>\n-#include <condition_variable>\n-#include <system_error>\n-#include <testsuite_hooks.h>\n-\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  try \n-    {\n-      std::chrono::microseconds ms(500);\n-      std::condition_variable_any c1;\n-      std::mutex m;\n-      std::unique_lock<std::mutex> l(m);\n-\n-      auto then = std::chrono::monotonic_clock::now();\n-      std::cv_status result = c1.wait_until(l, then + ms);\n-      VERIFY( result == std::cv_status::timeout );\n-      VERIFY( (std::chrono::monotonic_clock::now() - then) >= ms );\n-      VERIFY( l.owns_lock() );\n-    }\n-  catch (const std::system_error& e)\n-    {\n-      VERIFY( false );\n-    }\n-  catch (...)\n-    {\n-      VERIFY( false );\n-    }\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}]}