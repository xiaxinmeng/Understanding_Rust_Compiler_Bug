{"sha": "9dba4b5565efd56bcfadecc173ed66947492153e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRiYTRiNTU2NWVmZDU2YmNmYWRlY2MxNzNlZDY2OTQ3NDkyMTUzZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-04-14T18:10:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-04-14T18:10:27Z"}, "message": "tree.h (TYPE_IDENTIFIER): Declare.\n\n2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* tree.h (TYPE_IDENTIFIER): Declare.\n\t* tree.c (subrange_type_for_debug_p): Use it.\n\t* godump.c (go_format_type): Likewise.\n\t* dwarf2out.c (is_cxx_auto, modified_type_die,\n\tgen_type_die_with_usage, gen_type_die_with_usage): Likewise.\n\t* dbxout.c (dbxout_type, dbxout_symbol): Likewise.\n\n/cp\n2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cp-tree.h (TYPE_IDENTIFIER): Remove declaration.\n      \t    \n/objcp\n2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* objcp-decl.h (OBJC_TYPE_NAME, OBJC_SET_TYPE_NAME): Use\n\tTYPE_IDENTIFIER.\n\n/ada\n2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity, components_to_record):\n\tUse TYPE_IDENTIFIER.\n\t* gcc-interface/utils.c (make_aligning_type, maybe_pad_type,\n\tfinish_record_type, rest_of_record_type_compilation): Likewise.\n\nFrom-SVN: r209390", "tree": {"sha": "69e44b94b1e113ea11da33d2c74ff5fbcc37315b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69e44b94b1e113ea11da33d2c74ff5fbcc37315b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dba4b5565efd56bcfadecc173ed66947492153e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dba4b5565efd56bcfadecc173ed66947492153e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dba4b5565efd56bcfadecc173ed66947492153e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dba4b5565efd56bcfadecc173ed66947492153e/comments", "author": null, "committer": null, "parents": [{"sha": "006202e8c05177e883ff174d56834cafc43c8165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006202e8c05177e883ff174d56834cafc43c8165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006202e8c05177e883ff174d56834cafc43c8165"}], "stats": {"total": 156, "additions": 62, "deletions": 94}, "files": [{"sha": "f2c127c97bb4ac9b45c05071957812fd37f7695b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -1,3 +1,12 @@\n+2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* tree.h (TYPE_IDENTIFIER): Declare.\n+\t* tree.c (subrange_type_for_debug_p): Use it.\n+\t* godump.c (go_format_type): Likewise.\n+\t* dwarf2out.c (is_cxx_auto, modified_type_die,\n+\tgen_type_die_with_usage, gen_type_die_with_usage): Likewise.\n+\t* dbxout.c (dbxout_type, dbxout_symbol): Likewise.\n+\n 2014-04-14  Jan Hubicka   <hubicka@ucw.cz>\n \n \tPR lto/60820"}, {"sha": "76ff91a9d6ceec67d2cc4d2209a2acb9bd8f076d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -1,3 +1,10 @@\n+2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity, components_to_record):\n+\tUse TYPE_IDENTIFIER.\n+\t* gcc-interface/utils.c (make_aligning_type, maybe_pad_type,\n+\tfinish_record_type, rest_of_record_type_compilation): Likewise.\n+\n 2014-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* snames.ads-tmpl (Name_Ivdep): New pragma-related name."}, {"sha": "f3f3d6d44ebd5fc4d88676d95df2677b8b901068", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -2671,10 +2671,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      for (index = ndim - 1; index >= 0; index--)\n \t\t{\n \t\t  tree gnu_index = TYPE_INDEX_TYPE (gnu_index_types[index]);\n-\t\t  tree gnu_index_name = TYPE_NAME (gnu_index);\n-\n-\t\t  if (TREE_CODE (gnu_index_name) == TYPE_DECL)\n-\t\t    gnu_index_name = DECL_NAME (gnu_index_name);\n+\t\t  tree gnu_index_name = TYPE_IDENTIFIER (gnu_index);\n \n \t\t  /* Make sure to reference the types themselves, and not just\n \t\t     their names, as the debugger may fall back on them.  */\n@@ -3652,12 +3649,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      if (debug_info_p)\n \t\t{\n \t\t  tree gnu_subtype_marker = make_node (RECORD_TYPE);\n-\t\t  tree gnu_unpad_base_name = TYPE_NAME (gnu_unpad_base_type);\n+\t\t  tree gnu_unpad_base_name\n+\t\t    = TYPE_IDENTIFIER (gnu_unpad_base_type);\n \t\t  tree gnu_size_unit = TYPE_SIZE_UNIT (gnu_type);\n \n-\t\t  if (TREE_CODE (gnu_unpad_base_name) == TYPE_DECL)\n-\t\t    gnu_unpad_base_name = DECL_NAME (gnu_unpad_base_name);\n-\n \t\t  TYPE_NAME (gnu_subtype_marker)\n \t\t    = create_concat_name (gnat_entity, \"XVS\");\n \t\t  finish_record_type (gnu_subtype_marker,\n@@ -4976,11 +4971,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t   false, !gnu_decl, definition, false);\n \n       if (TYPE_IS_PADDING_P (gnu_type))\n-\t{\n-\t  gnu_entity_name = TYPE_NAME (gnu_type);\n-\t  if (TREE_CODE (gnu_entity_name) == TYPE_DECL)\n-\t    gnu_entity_name = DECL_NAME (gnu_entity_name);\n-\t}\n+\tgnu_entity_name = TYPE_IDENTIFIER (gnu_type);\n \n       /* Now set the RM size of the type.  We cannot do it before padding\n \t because we need to accept arbitrary RM sizes on integral types.  */\n@@ -7035,7 +7026,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n     {\n       Node_Id gnat_discr = Name (variant_part), variant;\n       tree gnu_discr = gnat_to_gnu (gnat_discr);\n-      tree gnu_name = TYPE_NAME (gnu_record_type);\n+      tree gnu_name = TYPE_IDENTIFIER (gnu_record_type);\n       tree gnu_var_name\n \t= concat_name (get_identifier (Get_Name_String (Chars (gnat_discr))),\n \t\t       \"XVN\");\n@@ -7047,9 +7038,6 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n       unsigned int variants_align = 0;\n       unsigned int i;\n \n-      if (TREE_CODE (gnu_name) == TYPE_DECL)\n-\tgnu_name = DECL_NAME (gnu_name);\n-\n       gnu_union_name\n \t= concat_name (gnu_name, IDENTIFIER_POINTER (gnu_var_name));\n "}, {"sha": "44877b6d7670c3e807521c53fb23739bb0894037", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -706,10 +706,8 @@ make_aligning_type (tree type, unsigned int align, tree size,\n   tree vblock_addr_st = size_binop (PLUS_EXPR, record_addr_st, room_st);\n   tree voffset_st, pos, field;\n \n-  tree name = TYPE_NAME (type);\n+  tree name = TYPE_IDENTIFIER (type);\n \n-  if (TREE_CODE (name) == TYPE_DECL)\n-    name = DECL_NAME (name);\n   name = concat_name (name, \"ALIGN\");\n   TYPE_NAME (record_type) = name;\n \n@@ -1203,14 +1201,8 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n \t   && DECL_IGNORED_P (TYPE_NAME (type))))\n     {\n       tree marker = make_node (RECORD_TYPE);\n-      tree name = TYPE_NAME (record);\n-      tree orig_name = TYPE_NAME (type);\n-\n-      if (TREE_CODE (name) == TYPE_DECL)\n-\tname = DECL_NAME (name);\n-\n-      if (TREE_CODE (orig_name) == TYPE_DECL)\n-\torig_name = DECL_NAME (orig_name);\n+      tree name = TYPE_IDENTIFIER (record);\n+      tree orig_name = TYPE_IDENTIFIER (type);\n \n       TYPE_NAME (marker) = concat_name (name, \"XVS\");\n       finish_record_type (marker,\n@@ -1419,7 +1411,7 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n \t\t    bool debug_info_p)\n {\n   enum tree_code code = TREE_CODE (record_type);\n-  tree name = TYPE_NAME (record_type);\n+  tree name = TYPE_IDENTIFIER (record_type);\n   tree ada_size = bitsize_zero_node;\n   tree size = bitsize_zero_node;\n   bool had_size = TYPE_SIZE (record_type) != 0;\n@@ -1431,8 +1423,6 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n \n   /* Always attach the TYPE_STUB_DECL for a record type.  It is required to\n      generate debug info and have a parallel type.  */\n-  if (name && TREE_CODE (name) == TYPE_DECL)\n-    name = DECL_NAME (name);\n   TYPE_STUB_DECL (record_type) = create_type_stub_decl (name, record_type);\n \n   /* Globally initialize the record first.  If this is a rep'ed record,\n@@ -1692,13 +1682,10 @@ rest_of_record_type_compilation (tree record_type)\n       tree new_record_type\n \t= make_node (TREE_CODE (record_type) == QUAL_UNION_TYPE\n \t\t     ? UNION_TYPE : TREE_CODE (record_type));\n-      tree orig_name = TYPE_NAME (record_type), new_name;\n+      tree orig_name = TYPE_IDENTIFIER (record_type), new_name;\n       tree last_pos = bitsize_zero_node;\n       tree old_field, prev_old_field = NULL_TREE;\n \n-      if (TREE_CODE (orig_name) == TYPE_DECL)\n-\torig_name = DECL_NAME (orig_name);\n-\n       new_name\n \t= concat_name (orig_name, TREE_CODE (record_type) == QUAL_UNION_TYPE\n \t\t\t\t  ? \"XVU\" : \"XVE\");"}, {"sha": "9510587f77c6a814a76ed2cf6f3a3c4f149cf616", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -1,3 +1,7 @@\n+2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* cp-tree.h (TYPE_IDENTIFIER): Remove declaration.\n+\n 2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* pt.c (mark_template_parm): Use template_parm_level_and_index."}, {"sha": "f459e55bc84f991c0af45655be47063f353a93fb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -1252,7 +1252,6 @@ extern bool statement_code_p[MAX_TREE_CODES];\n enum languages { lang_c, lang_cplusplus, lang_java };\n \n /* Macros to make error reporting functions' lives easier.  */\n-#define TYPE_IDENTIFIER(NODE) (DECL_NAME (TYPE_NAME (NODE)))\n #define TYPE_LINKAGE_IDENTIFIER(NODE) \\\n   (TYPE_IDENTIFIER (TYPE_MAIN_VARIANT (NODE)))\n #define TYPE_NAME_STRING(NODE) (IDENTIFIER_POINTER (TYPE_IDENTIFIER (NODE)))"}, {"sha": "5fbbdf6853b1f97643600ced17b4746c3b5e5f61", "filename": "gcc/dbxout.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -2159,12 +2159,12 @@ dbxout_type (tree type, int full)\n \t       another type's definition; instead, output an xref\n \t       and let the definition come when the name is defined.  */\n \t    stabstr_S ((TREE_CODE (type) == RECORD_TYPE) ? \"xs\" : \"xu\");\n-\t    if (TYPE_NAME (type) != 0\n-\t\t/* The C frontend creates for anonymous variable length\n-\t\t   records/unions TYPE_NAME with DECL_NAME NULL.  */\n-\t\t&& (TREE_CODE (TYPE_NAME (type)) != TYPE_DECL\n-\t\t    || DECL_NAME (TYPE_NAME (type))))\n-\t      dbxout_type_name (type);\n+\t    if (TYPE_IDENTIFIER (type))\n+\t      {\n+\t\t/* Note that the C frontend creates for anonymous variable\n+\t\t   length records/unions TYPE_NAME with DECL_NAME NULL.  */\n+\t\tdbxout_type_name (type);\n+\t      }\n \t    else\n \t      {\n \t\tstabstr_S (\"$$\");\n@@ -2800,9 +2800,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t\t   DBX format, and it confuses some tools such as objdump.  */\n \t\t&& tree_fits_uhwi_p (TYPE_SIZE (type)))\n \t      {\n-\t\ttree name = TYPE_NAME (type);\n-\t\tif (TREE_CODE (name) == TYPE_DECL)\n-\t\t  name = DECL_NAME (name);\n+\t\ttree name = TYPE_IDENTIFIER (type);\n \n \t\tdbxout_begin_complex_stabs ();\n \t\tstabstr_I (name);\n@@ -2859,9 +2857,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t       This is what represents `struct foo' with no typedef.  */\n \t    /* In C++, the name of a type is the corresponding typedef.\n \t       In C, it is an IDENTIFIER_NODE.  */\n-\t    tree name = TYPE_NAME (type);\n-\t    if (TREE_CODE (name) == TYPE_DECL)\n-\t      name = DECL_NAME (name);\n+\t    tree name = TYPE_IDENTIFIER (type);\n \n \t    dbxout_begin_complex_stabs ();\n \t    stabstr_I (name);"}, {"sha": "721f761803424e123091e0a63c85a552863b8d21", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -10230,9 +10230,7 @@ is_cxx_auto (tree type)\n {\n   if (is_cxx ())\n     {\n-      tree name = TYPE_NAME (type);\n-      if (TREE_CODE (name) == TYPE_DECL)\n-\tname = DECL_NAME (name);\n+      tree name = TYPE_IDENTIFIER (type);\n       if (name == get_identifier (\"auto\")\n \t  || name == get_identifier (\"decltype(auto)\"))\n \treturn true;\n@@ -10509,10 +10507,7 @@ modified_type_die (tree type, int is_const_type, int is_volatile_type,\n   /* This probably indicates a bug.  */\n   else if (mod_type_die && mod_type_die->die_tag == DW_TAG_base_type)\n     {\n-      name = TYPE_NAME (type);\n-      if (name\n-\t  && TREE_CODE (name) == TYPE_DECL)\n-\tname = DECL_NAME (name);\n+      name = TYPE_IDENTIFIER (type);\n       add_name_attribute (mod_type_die,\n \t\t\t  name ? IDENTIFIER_POINTER (name) : \"__unknown__\");\n     }\n@@ -19856,10 +19851,9 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n         dw_die_ref type_die = lookup_type_die (type);\n         if (type_die == NULL)\n           {\n-\t    tree name = TYPE_NAME (type);\n-\t    if (TREE_CODE (name) == TYPE_DECL)\n-\t      name = DECL_NAME (name);\n-            type_die = new_die (DW_TAG_unspecified_type, comp_unit_die (), type);\n+\t    tree name = TYPE_IDENTIFIER (type);\n+            type_die = new_die (DW_TAG_unspecified_type, comp_unit_die (),\n+\t\t\t\ttype);\n             add_name_attribute (type_die, IDENTIFIER_POINTER (name));\n             equate_type_number_to_die (type, type_die);\n           }\n@@ -19869,9 +19863,7 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n     default:\n       if (is_cxx_auto (type))\n \t{\n-\t  tree name = TYPE_NAME (type);\n-\t  if (TREE_CODE (name) == TYPE_DECL)\n-\t    name = DECL_NAME (name);\n+\t  tree name = TYPE_IDENTIFIER (type);\n \t  dw_die_ref *die = (name == get_identifier (\"auto\")\n \t\t\t     ? &auto_die : &decltype_auto_die);\n \t  if (!*die)"}, {"sha": "6d6b819bea3140a9773a399263aaa51086d12a04", "filename": "gcc/godump.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -577,9 +577,7 @@ go_format_type (struct godump_container *container, tree type,\n       tree name;\n       void **slot;\n \n-      name = TYPE_NAME (type);\n-      if (TREE_CODE (name) == TYPE_DECL)\n-\tname = DECL_NAME (name);\n+      name = TYPE_IDENTIFIER (type);\n \n       slot = htab_find_slot (container->invalid_hash, IDENTIFIER_POINTER (name),\n \t\t\t     NO_INSERT);\n@@ -684,9 +682,7 @@ go_format_type (struct godump_container *container, tree type,\n \t  tree name;\n \t  void **slot;\n \n-\t  name = TYPE_NAME (TREE_TYPE (type));\n-\t  if (TREE_CODE (name) == TYPE_DECL)\n-\t    name = DECL_NAME (name);\n+\t  name = TYPE_IDENTIFIER (TREE_TYPE (type));\n \n \t  slot = htab_find_slot (container->invalid_hash,\n \t\t\t\t IDENTIFIER_POINTER (name), NO_INSERT);\n@@ -805,9 +801,7 @@ go_format_type (struct godump_container *container, tree type,\n \t\t    tree name;\n \t\t    void **slot;\n \n-\t\t    name = TYPE_NAME (TREE_TYPE (field));\n-\t\t    if (TREE_CODE (name) == TYPE_DECL)\n-\t\t      name = DECL_NAME (name);\n+\t\t    name = TYPE_IDENTIFIER (TREE_TYPE (field));\n \n \t\t    slot = htab_find_slot (container->invalid_hash,\n \t\t\t\t\t   IDENTIFIER_POINTER (name),"}, {"sha": "63b37304887adac95d8a40a681cd8b1bc55554bc", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -1,3 +1,8 @@\n+2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* objcp-decl.h (OBJC_TYPE_NAME, OBJC_SET_TYPE_NAME): Use\n+\tTYPE_IDENTIFIER.\n+\n 2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "652f9933895d5d15393c4c15fed287b549a68851", "filename": "gcc/objcp/objcp-decl.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fobjcp%2Fobjcp-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Fobjcp%2Fobjcp-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-decl.h?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -55,16 +55,9 @@ extern tree objcp_end_compound_stmt (tree, int);\n \tobjcp_end_compound_stmt (stmt, flags)\n \n #undef OBJC_TYPE_NAME\n-#define OBJC_TYPE_NAME(type) \\\n-  (TYPE_NAME (type) && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL \\\n-   ? DECL_NAME (TYPE_NAME (type)) \\\n-   : TYPE_NAME (type))\n+#define OBJC_TYPE_NAME(type) (TYPE_IDENTIFIER (type))\n #undef OBJC_SET_TYPE_NAME\n-#define OBJC_SET_TYPE_NAME(type, name) \\\n-  if(TYPE_NAME (type) && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL) \\\n-    DECL_NAME (TYPE_NAME (type)) = name; \\\n-  else \\\n-    TYPE_NAME (type) = name;\n+#define OBJC_SET_TYPE_NAME(type, name) (TYPE_IDENTIFIER (type) = (name))\n \n #undef TYPE_OBJC_INFO\n #define TYPE_OBJC_INFO(TYPE) LANG_TYPE_CLASS_CHECK (TYPE)->objc_info"}, {"sha": "f42a0b7d889caef8af450d3f29719daff9f775b7", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -7796,20 +7796,9 @@ subrange_type_for_debug_p (const_tree type, tree *lowval, tree *highval)\n        || TREE_CODE (base_type) == BOOLEAN_TYPE)\n       && int_size_in_bytes (type) == int_size_in_bytes (base_type)\n       && tree_int_cst_equal (low, TYPE_MIN_VALUE (base_type))\n-      && tree_int_cst_equal (high, TYPE_MAX_VALUE (base_type)))\n-    {\n-      tree type_name = TYPE_NAME (type);\n-      tree base_type_name = TYPE_NAME (base_type);\n-\n-      if (type_name && TREE_CODE (type_name) == TYPE_DECL)\n-\ttype_name = DECL_NAME (type_name);\n-\n-      if (base_type_name && TREE_CODE (base_type_name) == TYPE_DECL)\n-\tbase_type_name = DECL_NAME (base_type_name);\n-\n-      if (type_name == base_type_name)\n-\treturn false;\n-    }\n+      && tree_int_cst_equal (high, TYPE_MAX_VALUE (base_type))\n+      && TYPE_IDENTIFIER (type) == TYPE_IDENTIFIER (base_type))\n+    return false;\n \n   if (lowval)\n     *lowval = low;"}, {"sha": "2f8f85ff93cc0ca0f2d6467ee5e255277e1ab4c3", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dba4b5565efd56bcfadecc173ed66947492153e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9dba4b5565efd56bcfadecc173ed66947492153e", "patch": "@@ -1906,6 +1906,11 @@ extern void protected_set_expr_location (tree, location_t);\n    It is an IDENTIFIER_NODE.  */\n #define DECL_NAME(NODE) (DECL_MINIMAL_CHECK (NODE)->decl_minimal.name)\n \n+/* The IDENTIFIER_NODE associated with the TYPE_NAME field.  */\n+#define TYPE_IDENTIFIER(NODE) \\\n+  (TYPE_NAME (NODE) && DECL_P (TYPE_NAME (NODE)) \\\n+   ? DECL_NAME (TYPE_NAME (NODE)) : TYPE_NAME (NODE))\n+\n /* Every ..._DECL node gets a unique number.  */\n #define DECL_UID(NODE) (DECL_MINIMAL_CHECK (NODE)->decl_minimal.uid)\n "}]}