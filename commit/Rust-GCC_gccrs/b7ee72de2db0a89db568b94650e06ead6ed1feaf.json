{"sha": "b7ee72de2db0a89db568b94650e06ead6ed1feaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlZTcyZGUyZGIwYTg5ZGI1NjhiOTQ2NTBlMDZlYWQ2ZWQxZmVhZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-05-24T16:37:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-05-24T16:37:42Z"}, "message": "re PR libstdc++/24704 (__gnu_cxx::__exchange_and_add is called even for single threaded applications)\n\n2006-05-24  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/24704\n\t* include/bits/atomicity.h (__exchange_and_add_single,\n\t__atomic_add_single): New, single thread versions of the atomic\n\tfunctions.\n\t(__exchange_and_add_dispatch, __atomic_add_dispatch): New,\n\tdepending on __GTHREADS and __gthread_active_p() dispatch either\n\tto the above or to the existing atomic functions.\n\t* include/ext/pool_allocator.h: Update callers.\n\t* include/ext/rc_string_base.h: Likewise.\n\t* include/bits/locale_classes.h: Likewise.\n\t* include/bits/basic_string.h: Likewise.\n\t* include/bits/ios_base.h: Likewise.\n\t* include/tr1/boost_shared_ptr.h: Likewise.\n\t* src/ios.cc: Likewise.\n\t* src/locale.cc: Likewise.\n\t* src/ios_init.cc: Likewise.\n\nFrom-SVN: r114044", "tree": {"sha": "b8b2c3c4ae586040aae8bf0603bd2720d6524ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8b2c3c4ae586040aae8bf0603bd2720d6524ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7ee72de2db0a89db568b94650e06ead6ed1feaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ee72de2db0a89db568b94650e06ead6ed1feaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7ee72de2db0a89db568b94650e06ead6ed1feaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7ee72de2db0a89db568b94650e06ead6ed1feaf/comments", "author": null, "committer": null, "parents": [{"sha": "cc07b2dbebe3a752b1d01e6f62d8a2e71abb5c4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc07b2dbebe3a752b1d01e6f62d8a2e71abb5c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc07b2dbebe3a752b1d01e6f62d8a2e71abb5c4e"}], "stats": {"total": 125, "additions": 98, "deletions": 27}, "files": [{"sha": "21e4f00c03a163bd1c6abb7d77c4a34f8f46d045", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -1,3 +1,22 @@\n+2006-05-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/24704\n+\t* include/bits/atomicity.h (__exchange_and_add_single,\n+\t__atomic_add_single): New, single thread versions of the atomic\n+\tfunctions.\n+\t(__exchange_and_add_dispatch, __atomic_add_dispatch): New,\n+\tdepending on __GTHREADS and __gthread_active_p() dispatch either\n+\tto the above or to the existing atomic functions.\n+\t* include/ext/pool_allocator.h: Update callers.\n+\t* include/ext/rc_string_base.h: Likewise.\n+\t* include/bits/locale_classes.h: Likewise.\n+\t* include/bits/basic_string.h: Likewise.\n+\t* include/bits/ios_base.h: Likewise.\n+\t* include/tr1/boost_shared_ptr.h: Likewise.\n+\t* src/ios.cc: Likewise.\n+\t* src/locale.cc: Likewise.\n+\t* src/ios_init.cc: Likewise.\n+\n 2006-05-23  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/testsuite_shared.cc: Fix --enable-threads=single build."}, {"sha": "53ab6fad7034525d49eb809c06a6f8001987033d", "filename": "libstdc++-v3/include/bits/atomicity.h", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomicity.h?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -1,6 +1,6 @@\n // Low-level functions for atomic operations -*- C++ -*-\n \n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -36,18 +36,67 @@\n #define _GLIBCXX_ATOMICITY_H\t1\n \n #include <bits/c++config.h>\n+#include <bits/gthr.h>\n #include <bits/atomic_word.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n-  _Atomic_word \n+  _Atomic_word\n   __attribute__ ((__unused__))\n   __exchange_and_add(volatile _Atomic_word* __mem, int __val);\n \n   void\n   __attribute__ ((__unused__))\n   __atomic_add(volatile _Atomic_word* __mem, int __val);\n \n+  static inline _Atomic_word\n+  __exchange_and_add_single(volatile _Atomic_word* __mem, int __val)\n+  {\n+    _Atomic_word __result = *__mem;\n+    *__mem += __val;\n+    return __result;\n+  }\n+\n+  static inline void\n+  __atomic_add_single(volatile _Atomic_word* __mem, int __val)\n+  { *__mem += __val; }\n+\n+  static inline _Atomic_word\n+  __attribute__ ((__unused__))\n+  __exchange_and_add_dispatch(volatile _Atomic_word* __mem, int __val)\n+  {\n+#ifdef __GTHREADS\n+\n+    if (__gthread_active_p())\n+      return __exchange_and_add(__mem, __val);\n+    else\n+      return __exchange_and_add_single(__mem, __val);\n+\n+#else\n+\n+    return __exchange_and_add_single(__mem, __val);\n+\n+#endif\n+  }\n+\n+  static inline void\n+  __attribute__ ((__unused__))\n+  __atomic_add_dispatch(volatile _Atomic_word* __mem, int __val)\n+  {\n+#ifdef __GTHREADS\n+\n+    if (__gthread_active_p())\n+      __atomic_add(__mem, __val);\n+    else\n+      __atomic_add_single(__mem, __val);\n+\n+#else\n+\n+    __atomic_add_single(__mem, __val);\n+\n+#endif\n+  }\n+\n _GLIBCXX_END_NAMESPACE\n \n /* Even if the CPU doesn't need a memory barrier, we need to ensure that"}, {"sha": "4a703ce2b1076f9d23ccd58b14ed091797dbd590", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -1,6 +1,6 @@\n // Components for manipulating sequences of characters -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -232,7 +232,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n #endif\n-\t    if (__gnu_cxx::__exchange_and_add(&this->_M_refcount, -1) <= 0)\n+\t    if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,\n+\t\t\t\t\t\t       -1) <= 0)\n \t      _M_destroy(__a);\n \t}  // XXX MT\n \n@@ -245,7 +246,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #ifndef _GLIBCXX_FULLY_DYNAMIC_STRING\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n #endif\n-            __gnu_cxx::__atomic_add(&this->_M_refcount, 1);\n+            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);\n \t  return _M_refdata();\n \t}  // XXX MT\n "}, {"sha": "dbaa74d87c05b97ad0f2206d8268d81be9c6370a", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -476,12 +476,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }\n \n       void\n-      _M_add_reference() { __gnu_cxx::__atomic_add(&_M_refcount, 1); }\n+      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }\n \n       // 0 => OK to delete.\n       int\n       _M_remove_reference() \n-      { return __gnu_cxx::__exchange_and_add(&_M_refcount, -1); }\n+      { return __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1); }\n     };\n \n      _Callback_list*\t_M_callbacks;"}, {"sha": "ab5efb7466fde796ac242734ab8d9e7206ee3754", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -400,12 +400,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   private:\n     inline void\n     _M_add_reference() const throw()\n-    { __gnu_cxx::__atomic_add(&_M_refcount, 1); }\n+    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }\n \n     inline void\n     _M_remove_reference() const throw()\n     {\n-      if (__gnu_cxx::__exchange_and_add(&_M_refcount, -1) == 1)\n+      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)\n \t{\n \t  try\n \t    { delete this; }\n@@ -505,12 +505,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n     inline void\n     _M_add_reference() throw()\n-    { __gnu_cxx::__atomic_add(&_M_refcount, 1); }\n+    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }\n \n     inline void\n     _M_remove_reference() throw()\n     {\n-      if (__gnu_cxx::__exchange_and_add(&_M_refcount, -1) == 1)\n+      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)\n \t{\n \t  try\n \t    { delete this; }"}, {"sha": "d12831018ce9f4fa5be05def0d7b5042f83b7c7d", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -206,9 +206,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  if (_S_force_new == 0)\n \t    {\n \t      if (std::getenv(\"GLIBCXX_FORCE_NEW\"))\n-\t\t__atomic_add(&_S_force_new, 1);\n+\t\t__atomic_add_dispatch(&_S_force_new, 1);\n \t      else\n-\t\t__atomic_add(&_S_force_new, -1);\n+\t\t__atomic_add_dispatch(&_S_force_new, -1);\n \t    }\n \n \t  const size_t __bytes = __n * sizeof(_Tp);\t      "}, {"sha": "c8bb9f3edcaed86880eb8445e981cd06e66440a2", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -1,6 +1,6 @@\n // Reference-counted versatile string base -*- C++ -*-\n \n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -134,7 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t_CharT*\n \t_M_refcopy() throw()\n \t{\n-\t  __atomic_add(&_M_info._M_refcount, 1);\n+\t  __atomic_add_dispatch(&_M_info._M_refcount, 1);\n \t  return _M_refdata();\n \t}  // XXX MT\n \t\n@@ -202,7 +202,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       void\n       _M_dispose()\n       {\n-\tif (__exchange_and_add(&_M_rep()->_M_info._M_refcount, -1) <= 0)\n+\tif (__exchange_and_add_dispatch(&_M_rep()->_M_info._M_refcount,\n+\t\t\t\t\t-1) <= 0)\n \t  _M_rep()->_M_destroy(_M_get_allocator());\n       }  // XXX MT\n "}, {"sha": "27f0e7a101e89275b037e1e48c64dad43ebe9877", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -130,14 +130,14 @@ class _Sp_counted_base\n   void\n   add_ref_copy()\n   {\n-    __gnu_cxx::__atomic_add(&_M_use_count, 1);\n+    __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1);\n   }\n \n   void\n   add_ref_lock()\n   {\n     __gnu_cxx::lock lock(_M_mutex);\n-    if (__gnu_cxx::__exchange_and_add(&_M_use_count, 1) == 0)\n+    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)\n       {\n \t_M_use_count = 0;\n \t__throw_bad_weak_ptr();\n@@ -147,28 +147,28 @@ class _Sp_counted_base\n   void\n   release() // nothrow\n   {\n-    if (__gnu_cxx::__exchange_and_add(&_M_use_count, -1) == 1)\n+    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)\n       {\n \tdispose();\n #ifdef __GTHREADS\t\n \t_GLIBCXX_READ_MEM_BARRIER;\n \t_GLIBCXX_WRITE_MEM_BARRIER;\n #endif\n-\tif (__gnu_cxx::__exchange_and_add(&_M_weak_count, -1) == 1)\n+\tif (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)\n \t  destroy();\n       }\n   }\n \n   void\n   weak_add_ref() // nothrow\n   {\n-    __gnu_cxx::__atomic_add(&_M_weak_count, 1);\n+    __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1);\n   }\n \n   void\n   weak_release() // nothrow\n   {\n-    if (__gnu_cxx::__exchange_and_add(&_M_weak_count, -1) == 1)\n+    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)\n       {\n #ifdef __GTHREADS\n \t_GLIBCXX_READ_MEM_BARRIER;"}, {"sha": "e22c681e905faead8962b804e9d5e18320a87f09", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -107,7 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     // Implementation note: Initialize top to zero to ensure that\n     // initialization occurs before main() is started.\n     static _Atomic_word _S_top = 0; \n-    return __gnu_cxx::__exchange_and_add(&_S_top, 1) + 4;\n+    return __gnu_cxx::__exchange_and_add_dispatch(&_S_top, 1) + 4;\n   }\n \n   void "}, {"sha": "680efddaabfbad96c4af2a41d5a580b897eb9c0c", "filename": "libstdc++-v3/src/ios_init.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios_init.cc?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -82,7 +82,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   ios_base::Init::Init()\n   {\n-    if (__gnu_cxx::__exchange_and_add(&_S_refcount, 1) == 0)\n+    if (__gnu_cxx::__exchange_and_add_dispatch(&_S_refcount, 1) == 0)\n       {\n \t// Standard streams default to synced with \"C\" operations.\n \t_S_synced_with_stdio = true;\n@@ -121,13 +121,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t// streams are not re-initialized with uses of ios_base::Init\n \t// besides <iostream> static object, ie just using <ios> with\n \t// ios_base::Init objects.\n-\t__gnu_cxx::__atomic_add(&_S_refcount, 1);\n+\t__gnu_cxx::__atomic_add_dispatch(&_S_refcount, 1);\n       }\n   }\n \n   ios_base::Init::~Init()\n   {\n-    if (__gnu_cxx::__exchange_and_add(&_S_refcount, -1) == 2)\n+    if (__gnu_cxx::__exchange_and_add_dispatch(&_S_refcount, -1) == 2)\n       {\n \t// Catch any exceptions thrown by basic_ostream::flush()\n \ttry"}, {"sha": "22d8ab0a6753dcc103fd040e771eede868618972", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7ee72de2db0a89db568b94650e06ead6ed1feaf/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=b7ee72de2db0a89db568b94650e06ead6ed1feaf", "patch": "@@ -433,7 +433,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_index = 1 + f->_M_id();\n \telse\n #endif\n-\t  _M_index = 1 + __gnu_cxx::__exchange_and_add(&_S_refcount, 1);\n+\t  _M_index = 1 + __gnu_cxx::__exchange_and_add_dispatch(&_S_refcount,\n+\t\t\t\t\t\t\t\t1);\n       }\n     return _M_index - 1;\n   }"}]}