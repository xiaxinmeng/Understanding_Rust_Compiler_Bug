{"sha": "47b0bb9450e673280dfbf74444588f5bb561ef3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdiMGJiOTQ1MGU2NzMyODBkZmJmNzQ0NDQ1ODhmNWJiNTYxZWYzZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T21:50:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T21:50:55Z"}, "message": "(find_cross_jump, get_label_{before,after}): Change from USE and\nCLOBBER insns to using CALL_INSN_FUNCTION_USAGE.\n\nFrom-SVN: r7245", "tree": {"sha": "e1209b67f56fd42aa71e49d0c3f8c2c1f7db7eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1209b67f56fd42aa71e49d0c3f8c2c1f7db7eb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47b0bb9450e673280dfbf74444588f5bb561ef3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b0bb9450e673280dfbf74444588f5bb561ef3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47b0bb9450e673280dfbf74444588f5bb561ef3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b0bb9450e673280dfbf74444588f5bb561ef3d/comments", "author": null, "committer": null, "parents": [{"sha": "5fa7422be7e6328e3e1b2471660a0ef80210a37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa7422be7e6328e3e1b2471660a0ef80210a37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa7422be7e6328e3e1b2471660a0ef80210a37c"}], "stats": {"total": 85, "additions": 38, "deletions": 47}, "files": [{"sha": "7277bd8d605e0c2ceefea9f85409f658dbbac16a", "filename": "gcc/jump.c", "status": "modified", "additions": 38, "deletions": 47, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b0bb9450e673280dfbf74444588f5bb561ef3d/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b0bb9450e673280dfbf74444588f5bb561ef3d/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=47b0bb9450e673280dfbf74444588f5bb561ef3d", "patch": "@@ -2276,11 +2276,48 @@ find_cross_jump (e1, e2, minimum, f1, f2)\n       p2 = PATTERN (i2);\n \t\n #ifdef STACK_REGS\n+      if (GET_CODE (i1) == CALL_INSN)\n+\t{\n+\t  /* Compare register usage information for the stack registers.\n+\t     Two CALL_INSNs are only equal if they receive the same\n+\t     (amount of) stack registers as parameters.  If we don't\n+\t     check this the two CALL_INSNs might be merged leaving\n+\t     reg-stack.c with mismatching numbers of stack registers\n+\t     in the same basic block.  */\n+\n+\t  register rtx link, op;\n+\t  HARD_REG_SET i1_regset, i2_regset;\n+\n+\t  CLEAR_HARD_REG_SET (i1_regset);\n+\t  CLEAR_HARD_REG_SET (i2_regset);\n+\n+\t  for (link = CALL_INSN_FUNCTION_USAGE (i1);\n+\t       link;\n+\t       link = XEXP (link, 1))\n+\t    if (GET_CODE (op = XEXP (link, 0)) == USE\n+\t\t&& STACK_REG_P (SET_DEST (op)))\n+\t      SET_HARD_REG_BIT (i1_regset, REGNO (SET_DEST (op)));\n+\n+\t  for (link = CALL_INSN_FUNCTION_USAGE (i2);\n+\t       link;\n+\t       link = XEXP (link, 1))\n+\t    if (GET_CODE (op = XEXP (link, 0)) == USE\n+\t\t&& STACK_REG_P (SET_DEST (op)))\n+\t      SET_HARD_REG_BIT (i2_regset, REGNO (SET_DEST (op)));\n+\n+\t  GO_IF_HARD_REG_EQUAL (i1_regset, i2_regset, usedmatch);\n+\n+\t  lose = 1;\n+\n+\tusedmatch:\n+\t  ;\n+\t}\n+\n       /* If cross_jump_death_matters is not 0, the insn's mode\n \t indicates whether or not the insn contains any stack-like\n \t regs. */\n \n-      if (cross_jump_death_matters && GET_MODE (i1) == QImode)\n+      if (!lose && cross_jump_death_matters && GET_MODE (i1) == QImode)\n \t{\n \t  /* If register stack conversion has already been done, then\n \t     death notes must also be compared before it is certain that\n@@ -2374,33 +2411,6 @@ find_cross_jump (e1, e2, minimum, f1, f2)\n \t}\n     }\n \n-  /* We have to be careful that we do not cross-jump into the middle of\n-     USE-CALL_INSN-CLOBBER sequence.  This sequence is used instead of\n-     putting the USE and CLOBBERs inside the CALL_INSN.  The delay slot\n-     scheduler needs to know what registers are used and modified by the\n-     CALL_INSN and needs the adjacent USE and CLOBBERs to do so.\n-\n-     ??? At some point we should probably change this so that these are\n-     part of the CALL_INSN.  The way we are doing it now is a kludge that\n-     is now causing trouble.  */\n-\n-  if (last1 != 0 && GET_CODE (last1) == CALL_INSN\n-      && (prev1 = prev_nonnote_insn (last1))\n-      && GET_CODE (prev1) == INSN\n-      && GET_CODE (PATTERN (prev1)) == USE)\n-    {\n-      /* Remove this CALL_INSN from the range we can cross-jump.  */\n-      last1 = next_real_insn (last1);\n-      last2 = next_real_insn (last2);\n-\n-      minimum++;\n-    }\n-\n-  /* Skip past CLOBBERS since they may be right after a CALL_INSN.  It\n-     isn't worth checking for the CALL_INSN.  */\n-  while (last1 != 0 && GET_CODE (PATTERN (last1)) == CLOBBER)\n-    last1 = next_real_insn (last1), last2 = next_real_insn (last2);\n-\n   if (minimum <= 0 && last1 != 0 && last1 != e1)\n     *f1 = last1, *f2 = last2;\n }\n@@ -2471,15 +2481,6 @@ get_label_before (insn)\n     {\n       rtx prev = PREV_INSN (insn);\n \n-      /* Don't put a label between a CALL_INSN and USE insns that precede\n-\t it.  */\n-\n-      if (GET_CODE (insn) == CALL_INSN\n-\t  || (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE\n-\t      && GET_CODE (XVECEXP (PATTERN (insn), 0, 0)) == CALL_INSN))\n-\twhile (GET_CODE (prev) == INSN && GET_CODE (PATTERN (prev)) == USE)\n-\t  prev = PREV_INSN (prev);\n-\n       label = gen_label_rtx ();\n       emit_label_after (label, prev);\n       LABEL_NUSES (label) = 0;\n@@ -2501,16 +2502,6 @@ get_label_after (insn)\n \n   if (label == 0 || GET_CODE (label) != CODE_LABEL)\n     {\n-      /* Don't put a label between a CALL_INSN and CLOBBER insns\n-\t following it. */\n-\n-      if (GET_CODE (insn) == CALL_INSN\n-\t  || (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE\n-\t      && GET_CODE (XVECEXP (PATTERN (insn), 0, 0)) == CALL_INSN))\n-\twhile (GET_CODE (NEXT_INSN (insn)) == INSN\n-\t       && GET_CODE (PATTERN (NEXT_INSN (insn))) == CLOBBER)\n-\t  insn = NEXT_INSN (insn);\n-\n       label = gen_label_rtx ();\n       emit_label_after (label, insn);\n       LABEL_NUSES (label) = 0;"}]}