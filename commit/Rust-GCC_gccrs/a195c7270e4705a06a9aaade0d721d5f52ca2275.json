{"sha": "a195c7270e4705a06a9aaade0d721d5f52ca2275", "node_id": "C_kwDOANBUbNoAKGExOTVjNzI3MGU0NzA1YTA2YTlhYWFkZTBkNzIxZDVmNTJjYTIyNzU", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2021-11-03T12:51:41Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2021-11-03T13:46:05Z"}, "message": "AArch64: Improve GOT addressing\n\nImprove GOT addressing by treating the instructions as a pair.  This reduces\nregister pressure and improves code quality significantly.  SPECINT2017\nimproves by 0.6% with -fPIC and codesize is 0.73% smaller.  Perlbench has\n0.9% smaller codesize, 1.5% fewer executed instructions and is 1.8% faster\non Neoverse N1.\n\nChangeLog:\n2021-11-02  Wilco Dijkstra  <wdijkstr@arm.com>\n\n\t* config/aarch64/aarch64.md (movsi): Add alternative for GOT accesses.\n\t(movdi): Likewise.\n\t(ldr_got_small_<mode>): Remove pattern.\n\t(ldr_got_small_sidi): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Keep\n\tGOT accesses as moves.\n\t(aarch64_print_operand): Correctly print got_lo12 in L specifier.\n\t(aarch64_mov_operand_p): Make GOT accesses valid move operands.\n\t* config/aarch64/constraints.md: Add new constraint Usw for GOT access.", "tree": {"sha": "abb0b6a8fb3ee012a7af5f3cdcb2cad0f044f30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abb0b6a8fb3ee012a7af5f3cdcb2cad0f044f30d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a195c7270e4705a06a9aaade0d721d5f52ca2275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a195c7270e4705a06a9aaade0d721d5f52ca2275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a195c7270e4705a06a9aaade0d721d5f52ca2275", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a195c7270e4705a06a9aaade0d721d5f52ca2275/comments", "author": null, "committer": null, "parents": [{"sha": "4096eb50d108a9ccef134f2e891c751b1cc9f6b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4096eb50d108a9ccef134f2e891c751b1cc9f6b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4096eb50d108a9ccef134f2e891c751b1cc9f6b2"}], "stats": {"total": 105, "additions": 30, "deletions": 75}, "files": [{"sha": "08f43aebe33509ec2223a06b139030357e02ce32", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 42, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a195c7270e4705a06a9aaade0d721d5f52ca2275/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a195c7270e4705a06a9aaade0d721d5f52ca2275/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a195c7270e4705a06a9aaade0d721d5f52ca2275", "patch": "@@ -3754,47 +3754,8 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n       }\n \n     case SYMBOL_SMALL_GOT_4G:\n-      {\n-\t/* In ILP32, the mode of dest can be either SImode or DImode,\n-\t   while the got entry is always of SImode size.  The mode of\n-\t   dest depends on how dest is used: if dest is assigned to a\n-\t   pointer (e.g. in the memory), it has SImode; it may have\n-\t   DImode if dest is dereferenced to access the memeory.\n-\t   This is why we have to handle three different ldr_got_small\n-\t   patterns here (two patterns for ILP32).  */\n-\n-\trtx insn;\n-\trtx mem;\n-\trtx tmp_reg = dest;\n-\tmachine_mode mode = GET_MODE (dest);\n-\n-\tif (can_create_pseudo_p ())\n-\t  tmp_reg = gen_reg_rtx (mode);\n-\n-\temit_move_insn (tmp_reg, gen_rtx_HIGH (mode, imm));\n-\tif (mode == ptr_mode)\n-\t  {\n-\t    if (mode == DImode)\n-\t      insn = gen_ldr_got_small_di (dest, tmp_reg, imm);\n-\t    else\n-\t      insn = gen_ldr_got_small_si (dest, tmp_reg, imm);\n-\n-\t    mem = XVECEXP (SET_SRC (insn), 0, 0);\n-\t  }\n-\telse\n-\t  {\n-\t    gcc_assert (mode == Pmode);\n-\n-\t    insn = gen_ldr_got_small_sidi (dest, tmp_reg, imm);\n-\t    mem = XVECEXP (XEXP (SET_SRC (insn), 0), 0, 0);\n-\t  }\n-\n-\tgcc_assert (MEM_P (mem));\n-\tMEM_READONLY_P (mem) = 1;\n-\tMEM_NOTRAP_P (mem) = 1;\n-\temit_insn (insn);\n-\treturn;\n-      }\n+      emit_insn (gen_rtx_SET (dest, imm));\n+      return;\n \n     case SYMBOL_SMALL_TLSGD:\n       {\n@@ -11156,7 +11117,7 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       switch (aarch64_classify_symbolic_expression (x))\n \t{\n \tcase SYMBOL_SMALL_GOT_4G:\n-\t  asm_fprintf (asm_out_file, \":lo12:\");\n+\t  asm_fprintf (asm_out_file, \":got_lo12:\");\n \t  break;\n \n \tcase SYMBOL_SMALL_TLSGD:\n@@ -20264,6 +20225,11 @@ aarch64_mov_operand_p (rtx x, machine_mode mode)\n       return aarch64_simd_valid_immediate (x, NULL);\n     }\n \n+  /* GOT accesses are valid moves.  */\n+  if (SYMBOL_REF_P (x)\n+      && aarch64_classify_symbolic_expression (x) == SYMBOL_SMALL_GOT_4G)\n+    return true;\n+\n   x = strip_salt (x);\n   if (SYMBOL_REF_P (x) && mode == DImode && CONSTANT_ADDRESS_P (x))\n     return true;"}, {"sha": "4035e061706793849c68ae09bcb2e4b9580ab7b6", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a195c7270e4705a06a9aaade0d721d5f52ca2275/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a195c7270e4705a06a9aaade0d721d5f52ca2275/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a195c7270e4705a06a9aaade0d721d5f52ca2275", "patch": "@@ -1262,8 +1262,8 @@\n )\n \n (define_insn_and_split \"*movsi_aarch64\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r, r,w, m, m,  r,  r, w,r,w, w\")\n-\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,Usv,m,m,rZ,w,Usa,Ush,rZ,w,w,Ds\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r, r,w, m, m,  r,  r,  r, w,r,w, w\")\n+\t(match_operand:SI 1 \"aarch64_mov_operand\"  \" r,r,k,M,n,Usv,m,m,rZ,w,Usw,Usa,Ush,rZ,w,w,Ds\"))]\n   \"(register_operand (operands[0], SImode)\n     || aarch64_reg_or_zero (operands[1], SImode))\"\n   \"@\n@@ -1277,6 +1277,7 @@\n    ldr\\\\t%s0, %1\n    str\\\\t%w1, %0\n    str\\\\t%s1, %0\n+   adrp\\\\t%x0, %A1\\;ldr\\\\t%w0, [%x0, %L1]\n    adr\\\\t%x0, %c1\n    adrp\\\\t%x0, %A1\n    fmov\\\\t%s0, %w1\n@@ -1292,13 +1293,15 @@\n     }\"\n   ;; The \"mov_imm\" type for CNT is just a placeholder.\n   [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,mov_imm,load_4,\n-\t\t    load_4,store_4,store_4,adr,adr,f_mcr,f_mrc,fmov,neon_move\")\n-   (set_attr \"arch\" \"*,*,*,*,*,sve,*,fp,*,fp,*,*,fp,fp,fp,simd\")]\n+\t\t    load_4,store_4,store_4,load_4,adr,adr,f_mcr,f_mrc,fmov,neon_move\")\n+   (set_attr \"arch\"   \"*,*,*,*,*,sve,*,fp,*,fp,*,*,*,fp,fp,fp,simd\")\n+   (set_attr \"length\" \"4,4,4,4,*,  4,4, 4,4, 4,8,4,4, 4, 4, 4,   4\")\n+]\n )\n \n (define_insn_and_split \"*movdi_aarch64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,r, r,w, m,m,  r,  r, w,r,w, w\")\n-\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,M,n,Usv,m,m,rZ,w,Usa,Ush,rZ,w,w,Dd\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,r, r,w, m,m,   r,  r,  r, w,r,w, w\")\n+\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,M,n,Usv,m,m,rZ,w,Usw,Usa,Ush,rZ,w,w,Dd\"))]\n   \"(register_operand (operands[0], DImode)\n     || aarch64_reg_or_zero (operands[1], DImode))\"\n   \"@\n@@ -1313,13 +1316,14 @@\n    ldr\\\\t%d0, %1\n    str\\\\t%x1, %0\n    str\\\\t%d1, %0\n+   * return TARGET_ILP32 ? \\\"adrp\\\\t%0, %A1\\;ldr\\\\t%w0, [%0, %L1]\\\" : \\\"adrp\\\\t%0, %A1\\;ldr\\\\t%0, [%0, %L1]\\\";\n    adr\\\\t%x0, %c1\n    adrp\\\\t%x0, %A1\n    fmov\\\\t%d0, %x1\n    fmov\\\\t%x0, %d1\n    fmov\\\\t%d0, %d1\n    * return aarch64_output_scalar_simd_mov_immediate (operands[1], DImode);\"\n-   \"(CONST_INT_P (operands[1]) && !aarch64_move_imm (INTVAL (operands[1]), DImode))\n+   \"CONST_INT_P (operands[1]) && !aarch64_move_imm (INTVAL (operands[1]), DImode)\n     && REG_P (operands[0]) && GP_REGNUM_P (REGNO (operands[0]))\"\n    [(const_int 0)]\n    \"{\n@@ -1328,9 +1332,10 @@\n     }\"\n   ;; The \"mov_imm\" type for CNTD is just a placeholder.\n   [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,mov_imm,mov_imm,\n-\t\t     load_8,load_8,store_8,store_8,adr,adr,f_mcr,f_mrc,fmov,\n-\t\t     neon_move\")\n-   (set_attr \"arch\" \"*,*,*,*,*,*,sve,*,fp,*,fp,*,*,fp,fp,fp,simd\")]\n+\t\t     load_8,load_8,store_8,store_8,load_8,adr,adr,f_mcr,f_mrc,\n+\t\t     fmov,neon_move\")\n+   (set_attr \"arch\"   \"*,*,*,*,*,*,sve,*,fp,*,fp,*,*,*,fp,fp,fp,simd\")\n+   (set_attr \"length\" \"4,4,4,4,4,*,  4,4, 4,4, 4,8,4,4, 4, 4, 4,   4\")]\n )\n \n (define_insn \"insv_imm<mode>\"\n@@ -6706,29 +6711,6 @@\n   [(set_attr \"type\" \"alu_imm\")]\n )\n \n-(define_insn \"ldr_got_small_<mode>\"\n-  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n-\t(unspec:PTR [(mem:PTR (lo_sum:PTR\n-\t\t\t      (match_operand:PTR 1 \"register_operand\" \"r\")\n-\t\t\t      (match_operand:PTR 2 \"aarch64_valid_symref\" \"S\")))]\n-\t\t    UNSPEC_GOTSMALLPIC))]\n-  \"\"\n-  \"ldr\\\\t%<w>0, [%1, #:got_lo12:%c2]\"\n-  [(set_attr \"type\" \"load_<ldst_sz>\")]\n-)\n-\n-(define_insn \"ldr_got_small_sidi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t (unspec:SI [(mem:SI (lo_sum:DI\n-\t\t\t     (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t     (match_operand:DI 2 \"aarch64_valid_symref\" \"S\")))]\n-\t\t    UNSPEC_GOTSMALLPIC)))]\n-  \"TARGET_ILP32\"\n-  \"ldr\\\\t%w0, [%1, #:got_lo12:%c2]\"\n-  [(set_attr \"type\" \"load_4\")]\n-)\n-\n (define_insn \"ldr_got_small_28k_<mode>\"\n   [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n \t(unspec:PTR [(mem:PTR (lo_sum:PTR"}, {"sha": "87c0e5fe2a9cefdfe6fc4f6e51ab8947a00775ef", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a195c7270e4705a06a9aaade0d721d5f52ca2275/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a195c7270e4705a06a9aaade0d721d5f52ca2275/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=a195c7270e4705a06a9aaade0d721d5f52ca2275", "patch": "@@ -152,6 +152,13 @@\n        (match_test \"aarch64_symbolic_address_p (op)\")\n        (match_test \"aarch64_mov_operand_p (op, GET_MODE (op))\")))\n \n+(define_constraint \"Usw\"\n+  \"@internal\n+   A constraint that matches a small GOT access.\"\n+  (and (match_code \"symbol_ref\")\n+       (match_test \"aarch64_classify_symbolic_expression (op)\n+\t\t     == SYMBOL_SMALL_GOT_4G\")))\n+\n (define_constraint \"Uss\"\n   \"@internal\n   A constraint that matches an immediate shift constant in SImode.\""}]}