{"sha": "2fbb1ada27b196744d19e94bc3284dc99a13f0f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZiYjFhZGEyN2IxOTY3NDRkMTllOTRiYzMyODRkYzk5YTEzZjBmMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-08T22:29:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-08T22:29:20Z"}, "message": "(FORCED_LABELS): New field; other fields adjusted.\n\n(gen_inline_header_rtx): New parm FORCED_LABELS.\n\nFrom-SVN: r9135", "tree": {"sha": "356422efa635abd8e7ad7a14d9e535495b797614", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356422efa635abd8e7ad7a14d9e535495b797614"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fbb1ada27b196744d19e94bc3284dc99a13f0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbb1ada27b196744d19e94bc3284dc99a13f0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fbb1ada27b196744d19e94bc3284dc99a13f0f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fbb1ada27b196744d19e94bc3284dc99a13f0f0/comments", "author": null, "committer": null, "parents": [{"sha": "1129c9f83e1cf2f6b4a05097fa8997a2cef35fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1129c9f83e1cf2f6b4a05097fa8997a2cef35fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1129c9f83e1cf2f6b4a05097fa8997a2cef35fa1"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "b95c133e24b2af61b98309ccbc5ed0d6faece8b9", "filename": "gcc/rtl.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fbb1ada27b196744d19e94bc3284dc99a13f0f0/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fbb1ada27b196744d19e94bc3284dc99a13f0f0/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2fbb1ada27b196744d19e94bc3284dc99a13f0f0", "patch": "@@ -1,5 +1,5 @@\n /* Register Transfer Language (RTL) definitions for GNU C-Compiler\n-   Copyright (C) 1987, 1991, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 91, 92, 93, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -596,6 +596,7 @@ extern char *note_insn_name[];\n    FUNCTION_ARGS_SIZE is the size of the argument block in the stack.\n    POPS_ARGS is the number of bytes of input arguments popped by the function\n    STACK_SLOT_LIST is the list of stack slots.\n+   FORCED_LABELS is the list of labels whose address was taken.\n    FUNCTION_FLAGS are where single-bit flags are saved.\n    OUTGOING_ARGS_SIZE is the size of the largest outgoing stack parameter list.\n    ORIGINAL_ARG_VECTOR is a vector of the original DECL_RTX values\n@@ -616,10 +617,11 @@ extern char *note_insn_name[];\n #define FUNCTION_ARGS_SIZE(RTX) ((RTX)->fld[8].rtint)\n #define POPS_ARGS(RTX) ((RTX)->fld[9].rtint)\n #define STACK_SLOT_LIST(RTX) ((RTX)->fld[10].rtx)\n-#define FUNCTION_FLAGS(RTX) ((RTX)->fld[11].rtint)\n-#define OUTGOING_ARGS_SIZE(RTX) ((RTX)->fld[12].rtint)\n-#define ORIGINAL_ARG_VECTOR(RTX) ((RTX)->fld[13].rtvec)\n-#define ORIGINAL_DECL_INITIAL(RTX) ((RTX)->fld[14].rtx)\n+#define FORCED_LABELS(RTX) ((RTX)->fld[11].rtx)\n+#define FUNCTION_FLAGS(RTX) ((RTX)->fld[12].rtint)\n+#define OUTGOING_ARGS_SIZE(RTX) ((RTX)->fld[13].rtint)\n+#define ORIGINAL_ARG_VECTOR(RTX) ((RTX)->fld[14].rtvec)\n+#define ORIGINAL_DECL_INITIAL(RTX) ((RTX)->fld[15].rtx)\n \n /* In FUNCTION_FLAGS we save some variables computed when emitting the code\n    for the function and which must be `or'ed into the current flag values when\n@@ -715,7 +717,9 @@ extern rtx replace_rtx\t\t\tPROTO((rtx, rtx, rtx));\n extern rtvec gen_rtvec_v\t\tPROTO((int, rtx *));\n extern rtx gen_reg_rtx\t\t\tPROTO((enum machine_mode));\n extern rtx gen_label_rtx\t\tPROTO((void));\n-extern rtx gen_inline_header_rtx\tPROTO((rtx, rtx, int, int, int, int, int, int, rtx, int, int, rtvec, rtx));\n+extern rtx gen_inline_header_rtx\tPROTO((rtx, rtx, int, int, int, int,\n+\t\t\t\t\t       int, int, rtx, rtx, int, int,\n+\t\t\t\t\t       rtvec, rtx));\n extern rtx gen_lowpart_common\t\tPROTO((enum machine_mode, rtx));\n extern rtx gen_lowpart\t\t\tPROTO((enum machine_mode, rtx));\n extern rtx gen_lowpart_if_possible\tPROTO((enum machine_mode, rtx));"}]}