{"sha": "5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmZGI3ZDg4OTNlMjRiOTRkMzlhMGMyZjVmYTUzODBjN2M3OTQ2Mw==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-10-23T12:13:49Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-10-23T12:13:49Z"}, "message": "re PR tree-optimization/50819 (missed SLP vectorization)\n\n\n        PR tree-optimization/50819\n        * tree-vectorizer.h (vect_analyze_data_ref_dependences): Remove\n        the last argument.\n        * tree-vect-loop.c (vect_analyze_loop_2): Update call to\n        vect_analyze_data_ref_dependences.\n        * tree-vect-data-refs.c (vect_analyze_data_ref_dependence):\n        Remove the last argument.  Check load-after-store dependence\n        for unknown dependencies in basic blocks.\n        (vect_analyze_data_ref_dependences): Update call to\n        vect_analyze_data_ref_dependences.\n        * tree-vect-patterns.c (vect_recog_widen_shift_pattern): Fix\n        typo.\n        * tree-vect-slp.c (vect_bb_vectorizable_with_dependencies):\n        Remove.\n        (vect_slp_analyze_bb_1): Update call to\n        vect_analyze_data_ref_dependences.  Don't call\n        vect_bb_vectorizable_with_dependencies.\n\nFrom-SVN: r180334", "tree": {"sha": "819bbf0d382a16d3881ea1c2cb0ed7c144a1f6f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/819bbf0d382a16d3881ea1c2cb0ed7c144a1f6f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/comments", "author": null, "committer": null, "parents": [{"sha": "b0ed0a6f21fc892dc54ac4f96b9cdeb396748603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ed0a6f21fc892dc54ac4f96b9cdeb396748603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ed0a6f21fc892dc54ac4f96b9cdeb396748603"}], "stats": {"total": 161, "additions": 98, "deletions": 63}, "files": [{"sha": "fac9fa920cc2f903838ca8aabf3165d2de747898", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -1,3 +1,21 @@\n+2011-10-23  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/50819\n+\t* tree-vectorizer.h (vect_analyze_data_ref_dependences): Remove\n+\tthe last argument.\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Update call to\n+\tvect_analyze_data_ref_dependences.\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): Remove\n+\tthe last argument.  Check load-after-store dependence for unknown\n+\tdependencies in basic blocks.\n+\t(vect_analyze_data_ref_dependences): Update call to\n+\tvect_analyze_data_ref_dependences.\n+\t* tree-vect-patterns.c (vect_recog_widen_shift_pattern): Fix typo.\n+\t* tree-vect-slp.c (vect_bb_vectorizable_with_dependencies): Remove.\n+\t(vect_slp_analyze_bb_1): Update call to\n+\tvect_analyze_data_ref_dependences.  Don't call\n+\tvect_bb_vectorizable_with_dependencies.\n+\n 2011-10-22  David S. Miller  <davem@davemloft.net>\n \n \t* config/sparc/sparc.h (SECONDARY_INPUT_RELOAD_CLASS,"}, {"sha": "16b6f6f5c543bd6dc4477e941ddea9a6f8e49072", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -1,3 +1,9 @@\n+2011-10-23  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/50819\n+\t* g++.dg/vect/vect.exp: Set target dependent flags for slp-* tests.\n+\t* g++.dg/vect/slp-pr50819.cc: New test.\n+\n 2011-10-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/45385"}, {"sha": "402218bc5b798172febe9d7ea51dc0b85b20732e", "filename": "gcc/testsuite/g++.dg/vect/slp-pr50819.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr50819.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr50819.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fslp-pr50819.cc?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+\n+typedef float Value;\n+\n+struct LorentzVector\n+{\n+\n+  LorentzVector(Value x=0, Value  y=0, Value  z=0, Value  t=0) :\n+theX(x),theY(y),theZ(z),theT(t){}\n+  LorentzVector & operator+=(const LorentzVector & a) {\n+    theX += a.theX;\n+    theY += a.theY;\n+    theZ += a.theZ;\n+    theT += a.theT;\n+    return *this;\n+  }\n+\n+  Value theX;\n+  Value theY;\n+  Value theZ;\n+  Value theT;\n+}  __attribute__ ((aligned(16)));\n+\n+inline LorentzVector\n+operator+(LorentzVector const & a, LorentzVector const & b) {\n+  return\n+LorentzVector(a.theX+b.theX,a.theY+b.theY,a.theZ+b.theZ,a.theT+b.theT);\n+}\n+\n+inline LorentzVector\n+operator*(LorentzVector const & a, Value s) {\n+    return LorentzVector(a.theX*s,a.theY*s,a.theZ*s,a.theT*s);\n+}\n+\n+inline LorentzVector\n+operator*(Value s, LorentzVector const & a) {\n+  return a*s;\n+}\n+\n+\n+void sum1(LorentzVector & res, Value s, LorentzVector const & v1, LorentzVector\n+const & v2) {\n+  res += s*(v1+v2);\n+}\n+\n+void sum2(LorentzVector & res, Value s, LorentzVector const & v1, LorentzVector\n+const & v2) {\n+  res = res + s*(v1+v2);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized using SLP\" 2 \"slp\" } } */\n+/* { dg-final { cleanup-tree-dump \"slp\" } } */"}, {"sha": "76bd99a98627b1d1ac35fe9965e3697974472b3e", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -42,19 +42,18 @@ set DEFAULT_VECTCFLAGS \"\"\n # These flags are used for all targets.\n lappend DEFAULT_VECTCFLAGS \"-O2\" \"-ftree-vectorize\" \"-fno-vect-cost-model\"\n \n-set VECT_SLP_CFLAGS $DEFAULT_VECTCFLAGS\n-\n-lappend DEFAULT_VECTCFLAGS \"-fdump-tree-vect-details\"\n-lappend VECT_SLP_CFLAGS \"-fdump-tree-slp-details\"\n-\n-\n # Skip these tests for targets that do not support generating vector\n # code.  Set additional target-dependent vector flags, which can be\n # overridden by using dg-options in individual tests.\n if ![check_vect_support_and_set_flags] {\n     return\n }\n \n+set VECT_SLP_CFLAGS $DEFAULT_VECTCFLAGS\n+\n+lappend DEFAULT_VECTCFLAGS \"-fdump-tree-vect-details\"\n+lappend VECT_SLP_CFLAGS \"-fdump-tree-slp-details\"\n+\n # Initialize `dg'.\n dg-init\n "}, {"sha": "3634e5ecd5be31921f2fa16d9d9c640acd2658e8", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -555,8 +555,7 @@ vect_mark_for_runtime_alias_test (ddr_p ddr, loop_vec_info loop_vinfo)\n \n static bool\n vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n-                                  loop_vec_info loop_vinfo, int *max_vf,\n-                                  bool *data_dependence_in_bb)\n+                                  loop_vec_info loop_vinfo, int *max_vf)\n {\n   unsigned int i;\n   struct loop *loop = NULL;\n@@ -587,6 +586,8 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \n   if (DDR_ARE_DEPENDENT (ddr) == chrec_dont_know)\n     {\n+      gimple earlier_stmt;\n+\n       if (loop_vinfo)\n         {\n           if (vect_print_dump_info (REPORT_DR_DETAILS))\n@@ -624,10 +625,11 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n       if (DR_IS_WRITE (dra) && DR_IS_WRITE (drb))\n         return true;\n \n-      /* We deal with read-write dependencies in basic blocks later (by\n-         verifying that all the loads in the basic block are before all the\n-         stores).  */\n-      *data_dependence_in_bb = true;\n+      /* Check that it's not a load-after-store dependence.  */\n+      earlier_stmt = get_earlier_stmt (DR_STMT (dra), DR_STMT (drb));\n+      if (DR_IS_WRITE (STMT_VINFO_DATA_REF (vinfo_for_stmt (earlier_stmt))))\n+        return true;\n+\n       return false;\n     }\n \n@@ -753,8 +755,7 @@ vect_analyze_data_ref_dependence (struct data_dependence_relation *ddr,\n \n bool\n vect_analyze_data_ref_dependences (loop_vec_info loop_vinfo,\n-                                   bb_vec_info bb_vinfo, int *max_vf,\n-                                   bool *data_dependence_in_bb)\n+                                   bb_vec_info bb_vinfo, int *max_vf)\n {\n   unsigned int i;\n   VEC (ddr_p, heap) *ddrs = NULL;\n@@ -769,8 +770,7 @@ vect_analyze_data_ref_dependences (loop_vec_info loop_vinfo,\n     ddrs = BB_VINFO_DDRS (bb_vinfo);\n \n   FOR_EACH_VEC_ELT (ddr_p, ddrs, i, ddr)\n-    if (vect_analyze_data_ref_dependence (ddr, loop_vinfo, max_vf,\n-\t\t\t\t\t  data_dependence_in_bb))\n+    if (vect_analyze_data_ref_dependence (ddr, loop_vinfo, max_vf))\n       return false;\n \n   return true;"}, {"sha": "3ef407e71219fe2c493946bab5e49a03285ad5f6", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -1473,7 +1473,7 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo, bool slp)\n static bool\n vect_analyze_loop_2 (loop_vec_info loop_vinfo)\n {\n-  bool ok, dummy, slp = false;\n+  bool ok, slp = false;\n   int max_vf = MAX_VECTORIZATION_FACTOR;\n   int min_vf = 2;\n \n@@ -1514,7 +1514,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo)\n      the dependences.\n      FORNOW: fail at the first data dependence that we encounter.  */\n \n-  ok = vect_analyze_data_ref_dependences (loop_vinfo, NULL, &max_vf, &dummy);\n+  ok = vect_analyze_data_ref_dependences (loop_vinfo, NULL, &max_vf);\n   if (!ok\n       || max_vf < min_vf)\n     {"}, {"sha": "94e28016681f336184186f70c5ec30ab6e4f1f02", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -1225,7 +1225,7 @@ vect_recog_over_widening_pattern (VEC (gimple, heap) **stmts,\n \n   where type 'TYPE' is at least double the size of type 'type'.\n \n-  Also detect unsgigned cases:\n+  Also detect unsigned cases:\n \n   unsigned type a_t;\n   unsigned TYPE u_res_T;"}, {"sha": "f75817b985f5677ded9f203b783606639be4ad30", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 43, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -1706,43 +1706,6 @@ vect_slp_analyze_operations (bb_vec_info bb_vinfo)\n   return true;\n }\n \n-/* Check if loads and stores are mixed in the basic block (in that\n-   case if we are not sure that the accesses differ, we can't vectorize the\n-   basic block).  Also return FALSE in case that there is statement marked as\n-   not vectorizable.  */\n-\n-static bool\n-vect_bb_vectorizable_with_dependencies (bb_vec_info bb_vinfo)\n-{\n-  basic_block bb = BB_VINFO_BB (bb_vinfo);\n-  gimple_stmt_iterator si;\n-  bool detected_store = false;\n-  gimple stmt;\n-  struct data_reference *dr;\n-\n-  for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n-    {\n-      stmt = gsi_stmt (si);\n-\n-      /* We can't allow not analyzed statements, since they may contain data\n-         accesses.  */ \n-      if (!STMT_VINFO_VECTORIZABLE (vinfo_for_stmt (stmt)))\n-        return false;\n-\n-      if (!STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt)))\n-        continue;\n-\n-      dr = STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt));\n-      if (DR_IS_READ (dr) && detected_store)\n-        return false;\n-\n-      if (!DR_IS_READ (dr))\n-        detected_store = true;\n-    }\n-\n-  return true;\n-}\n-\n /* Check if vectorization of the basic block is profitable.  */\n \n static bool\n@@ -1823,7 +1786,6 @@ vect_slp_analyze_bb_1 (basic_block bb)\n   int i;\n   int min_vf = 2;\n   int max_vf = MAX_VECTORIZATION_FACTOR;\n-  bool data_dependence_in_bb = false;\n \n   bb_vinfo = new_bb_vec_info (bb);\n   if (!bb_vinfo)\n@@ -1850,11 +1812,8 @@ vect_slp_analyze_bb_1 (basic_block bb)\n       return NULL;\n     }\n \n-   if (!vect_analyze_data_ref_dependences (NULL, bb_vinfo, &max_vf, \n-                                           &data_dependence_in_bb)\n-       || min_vf > max_vf\n-       || (data_dependence_in_bb \n-           && !vect_bb_vectorizable_with_dependencies (bb_vinfo)))\n+   if (!vect_analyze_data_ref_dependences (NULL, bb_vinfo, &max_vf)\n+       || min_vf > max_vf)\n      {\n        if (vect_print_dump_info (REPORT_UNVECTORIZED_LOCATIONS))\n \t fprintf (vect_dump, \"not vectorized: unhandled data dependence \""}, {"sha": "b0142e2ba7fc39f07ff9fcb4d68509da3f3761f0", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=5bfdb7d8893e24b94d39a0c2f5fa5380c7c79463", "patch": "@@ -832,7 +832,7 @@ extern enum dr_alignment_support vect_supportable_dr_alignment\n extern tree vect_get_smallest_scalar_type (gimple, HOST_WIDE_INT *,\n                                            HOST_WIDE_INT *);\n extern bool vect_analyze_data_ref_dependences (loop_vec_info, bb_vec_info,\n-\t\t\t\t\t       int *, bool *);\n+\t\t\t\t\t       int *);\n extern bool vect_enhance_data_refs_alignment (loop_vec_info);\n extern bool vect_analyze_data_refs_alignment (loop_vec_info, bb_vec_info);\n extern bool vect_verify_datarefs_alignment (loop_vec_info, bb_vec_info);"}]}