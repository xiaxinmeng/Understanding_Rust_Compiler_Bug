{"sha": "7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MyODBjNzJhMzIwMGNlMTg0MzRhM2JmNGM5MzE4YzZlM2U0NDdlZg==", "commit": {"author": {"name": "Hariharan Sandanagobalane", "email": "hariharan@picochip.com", "date": "2008-12-29T10:31:14Z"}, "committer": {"name": "Hariharan Sandanagobalane", "email": "hariharans@gcc.gnu.org", "date": "2008-12-29T10:31:14Z"}, "message": "fprintf.x: Disable test for freestanding targets.\n\n        * gcc.c-torture/execute/builtins/fprintf.x: Disable test for\n        freestanding targets.\n        * gcc.c-torture/execute/pr37573.x: Disable test for 16-bit targets.\n        * gcc.c-torture/execute/20081117-1.x: Disable test for 16-bit targets.\n        * gcc.c-torture/compile/limits-stringlit.c: Disable test for picochip.\n        * gcc.dg/array-quals-1.c: Disable test for picochip.\n        * lib/target-supports.exp: Add support for freestanding ports and \n        disable picochip for profiling tests.\n\nFrom-SVN: r142948", "tree": {"sha": "ca75f7c0eb56afa8cddea89b63b6968085a6f574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca75f7c0eb56afa8cddea89b63b6968085a6f574"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/comments", "author": null, "committer": null, "parents": [{"sha": "d41d8140d20c35dc151157621f4200452f07da29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d41d8140d20c35dc151157621f4200452f07da29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d41d8140d20c35dc151157621f4200452f07da29"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "e89e5b68e940ff5c212c2f3d65ef76ea160550c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "patch": "@@ -1,3 +1,14 @@\n+2008-12-15  Hariharan Sandanagobalane <hariharan@picochip.com>\n+\n+\t* gcc.c-torture/execute/builtins/fprintf.x: Disable test for\n+\tfreestanding targets.\n+\t* gcc.c-torture/execute/pr37573.x: Disable test for 16-bit targets.\n+\t* gcc.c-torture/execute/20081117-1.x: Disable test for 16-bit targets.\n+\t* gcc.c-torture/compile/limits-stringlit.c: Disable test for picochip.\n+\t* gcc.dg/array-quals-1.c: Disable test for picochip.\n+\t* lib/target-supports.exp: Add support for freestanding ports and\n+\tdisable picochip for profiling tests.\n+\n 2008-12-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/38637"}, {"sha": "10f8714414fea954192dca2c95161e9e900b416b", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-fndefn.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-fndefn.c?ref=7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-skip-if \"too complex for avr\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"too complex for avr and picochip\" { picochip-*-* avr-*-* } { \"*\" } { \"\" } } */\n #define LIM1(x) x##0, x##1, x##2, x##3, x##4, x##5, x##6, x##7, x##8, x##9,\n #define LIM2(x) LIM1(x##0) LIM1(x##1) LIM1(x##2) LIM1(x##3) LIM1(x##4) \\\n \t\tLIM1(x##5) LIM1(x##6) LIM1(x##7) LIM1(x##8) LIM1(x##9)"}, {"sha": "c24ad4b57939b9f6339ef8ec7bfed701f5415b0a", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-stringlit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-stringlit.c?ref=7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-skip-if \"Array too big\" { \"avr-*-*\" } { \"*\" } { \"\" } } */ \n+/* { dg-skip-if \"Array too big\" { avr-*-* picochip-*-* } { \"*\" } { \"\" } } */ \n \n #define STR2 \"012345678901234567890123456789012345678901234567890123456789\\\n 0123456789012345678901234567890123456789\""}, {"sha": "7378270cdb00d1815c876e8fa1216ef730be997b", "filename": "gcc/testsuite/gcc.c-torture/execute/20081117-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20081117-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20081117-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20081117-1.x?ref=7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+        return 1\n+}\n+\n+return 0"}, {"sha": "c8fdaf5b2547360a93e3081feeb9d28ea3e7cfad", "filename": "gcc/testsuite/gcc.c-torture/execute/builtins/fprintf.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbuiltins%2Ffprintf.x?ref=7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_freestanding] } {\n+        return 1; \n+}\n+\n+return 0;"}, {"sha": "7378270cdb00d1815c876e8fa1216ef730be997b", "filename": "gcc/testsuite/gcc.c-torture/execute/pr37573.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37573.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37573.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr37573.x?ref=7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [check_effective_target_int16] } {\n+        return 1\n+}\n+\n+return 0"}, {"sha": "f01db686b45e9aac2569f9f508dec22c0bd65db5", "filename": "gcc/testsuite/gcc.dg/array-quals-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c?ref=7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "patch": "@@ -4,7 +4,7 @@\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n /* The MMIX port always switches to the .data section at the end of a file.  */\n-/* { dg-final { scan-assembler-not \"\\\\.data(?!\\\\.rel\\\\.ro)\" { xfail powerpc*-*-aix* mmix-*-* x86_64-*-mingw* avr-*-*} } } */\n+/* { dg-final { scan-assembler-not \"\\\\.data(?!\\\\.rel\\\\.ro)\" { xfail powerpc*-*-aix* mmix-*-* x86_64-*-mingw* picochip--*-* avr-*-*} } } */\n static const int a[2] = { 1, 2 };\n const int a1[2] = { 1, 2 };\n typedef const int ci;"}, {"sha": "79e77f237d8b8e09a4d60573f79fa9689ee7bb6f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c280c72a3200ce18434a3bf4c9318c6e3e447ef/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7c280c72a3200ce18434a3bf4c9318c6e3e447ef", "patch": "@@ -452,11 +452,6 @@ proc check_profiling_available { test_what } {\n \treturn 0\n     }\n \n-    # At present, there is no profiling support on NetWare.\n-    if { [istarget *-*-netware*] } {\n-\treturn 0\n-    }\n-\n     # uClibc does not have gcrt1.o.\n     if { [check_effective_target_uclibc]\n \t && ([lindex $test_what 1] == \"-p\"\n@@ -470,6 +465,8 @@ proc check_profiling_available { test_what } {\n \t# missing other needed machinery.\n \tif { [istarget mmix-*-*]\n \t     || [istarget arm*-*-eabi*]\n+\t     || [istarget picochip-*-*]\n+\t     || [istarget *-*-netware*]\n \t     || [istarget arm*-*-elf]\n \t     || [istarget arm*-*-symbianelf*]\n \t     || [istarget avr-*-*]\n@@ -496,6 +493,17 @@ proc check_profiling_available { test_what } {\n     return $profiling_available_saved\n }\n \n+# Check to see if a target is \"freestanding\". This is as per the definition\n+# in Section 4 of C99 standard. Effectively, it is a target which supports no\n+# extra headers or libraries other than what is considered essential.\n+proc check_effective_target_freestanding { } {\n+    if { [istarget picochip-*-*] } then {\n+        return 1\n+    } else {\n+        return 0\n+    }\n+}\n+\n # Return 1 if target has packed layout of structure members by\n # default, 0 otherwise.  Note that this is slightly different than\n # whether the target has \"natural alignment\": both attributes may be"}]}