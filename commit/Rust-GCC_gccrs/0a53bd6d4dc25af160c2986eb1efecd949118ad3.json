{"sha": "0a53bd6d4dc25af160c2986eb1efecd949118ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE1M2JkNmQ0ZGMyNWFmMTYwYzI5ODZlYjFlZmVjZDk0OTExOGFkMw==", "commit": {"author": {"name": "David Wohlferd", "email": "dw@LimeGreenSocks.com", "date": "2015-09-28T16:45:31Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-09-28T16:45:31Z"}, "message": "extend.texi (Asm Labels): Break out text for data vs functions.\n\n2015-09-28  David Wohlferd  <dw@LimeGreenSocks.com>\n\n         * doc/extend.texi (Asm Labels): Break out text for data vs\n\t functions.\n\nFrom-SVN: r228212", "tree": {"sha": "3809452aabd9fb20d10e6ee6de455d0db711dae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3809452aabd9fb20d10e6ee6de455d0db711dae9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a53bd6d4dc25af160c2986eb1efecd949118ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a53bd6d4dc25af160c2986eb1efecd949118ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a53bd6d4dc25af160c2986eb1efecd949118ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a53bd6d4dc25af160c2986eb1efecd949118ad3/comments", "author": null, "committer": null, "parents": [{"sha": "2876a13f6c35a63bee3cf99c297299248075f423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2876a13f6c35a63bee3cf99c297299248075f423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2876a13f6c35a63bee3cf99c297299248075f423"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "f55f53d8ad2724d2b20c74f175819c22582b1db9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a53bd6d4dc25af160c2986eb1efecd949118ad3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a53bd6d4dc25af160c2986eb1efecd949118ad3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a53bd6d4dc25af160c2986eb1efecd949118ad3", "patch": "@@ -1,3 +1,8 @@\n+2015-09-28  David Wohlferd  <dw@LimeGreenSocks.com>\n+\n+         * doc/extend.texi (Asm Labels): Break out text for data vs\n+\t functions.\n+\n 2015-09-28  Jiong Wang  <jiong.wang@arm.com>\n \n \tRevert:"}, {"sha": "8406945f7ae73af5f0e2a607aac64a32eef5cf7b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a53bd6d4dc25af160c2986eb1efecd949118ad3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a53bd6d4dc25af160c2986eb1efecd949118ad3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0a53bd6d4dc25af160c2986eb1efecd949118ad3", "patch": "@@ -8367,7 +8367,13 @@ asm (\"fyl2xp1\" : \"=t\" (result) : \"0\" (x), \"u\" (y) : \"st(1)\");\n \n You can specify the name to be used in the assembler code for a C\n function or variable by writing the @code{asm} (or @code{__asm__})\n-keyword after the declarator as follows:\n+keyword after the declarator.\n+It is up to you to make sure that the assembler names you choose do not\n+conflict with any other assembler symbols, or reference registers.\n+\n+@subsubheading Assembler names for data:\n+\n+This sample shows how to specify the assembler name for data:\n \n @smallexample\n int foo asm (\"myfoo\") = 2;\n@@ -8379,33 +8385,30 @@ the assembler code should be @samp{myfoo} rather than the usual\n @samp{_foo}.\n \n On systems where an underscore is normally prepended to the name of a C\n-function or variable, this feature allows you to define names for the\n+variable, this feature allows you to define names for the\n linker that do not start with an underscore.\n \n-It does not make sense to use this feature with a non-static local\n-variable since such variables do not have assembler names.  If you are\n-trying to put the variable in a particular register, see @ref{Explicit\n-Reg Vars}.  GCC presently accepts such code with a warning, but will\n-probably be changed to issue an error, rather than a warning, in the\n-future.\n+GCC does not support using this feature with a non-static local variable \n+since such variables do not have assembler names.  If you are\n+trying to put the variable in a particular register, see \n+@ref{Explicit Reg Vars}.\n \n-You cannot use @code{asm} in this way in a function @emph{definition}; but\n-you can get the same effect by writing a declaration for the function\n-before its definition and putting @code{asm} there, like this:\n+@subsubheading Assembler names for functions:\n \n-@smallexample\n-extern func () asm (\"FUNC\");\n+To specify the assembler name for functions, write a declaration for the \n+function before its definition and put @code{asm} there, like this:\n \n-func (x, y)\n-     int x, y;\n-/* @r{@dots{}} */\n+@smallexample\n+int func (int x, int y) asm (\"MYFUNC\");\n+     \n+int func (int x, int y)\n+@{\n+   /* @r{@dots{}} */\n @end smallexample\n \n-It is up to you to make sure that the assembler names you choose do not\n-conflict with any other assembler symbols.  Also, you must not use a\n-register name; that would produce completely invalid assembler code.  GCC\n-does not as yet have the ability to store static variables in registers.\n-Perhaps that will be added.\n+@noindent\n+This specifies that the name to be used for the function @code{func} in\n+the assembler code should be @code{MYFUNC}.\n \n @node Explicit Reg Vars\n @subsection Variables in Specified Registers"}]}