{"sha": "0c85534d6f996d7ef5430c77b0e508ddc6f130ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4NTUzNGQ2Zjk5NmQ3ZWY1NDMwYzc3YjBlNTA4ZGRjNmYxMzBlZg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2017-04-25T09:36:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:36:51Z"}, "message": "sem_ch3.adb (Check_Entry_Contract): Call Preanalyze_Spec_Expression so that resolution takes place as well.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Check_Entry_Contract): Call\n\tPreanalyze_Spec_Expression so that resolution takes place as well.\n\t* sem_util.adb (Check_Internal_Protected_Use): Reject properly\n\tinternal calls that appear in preconditions of protected\n\toperations, in default values for same, and in contract guards\n\tfor contract cases in SPARK.\n\nFrom-SVN: r247163", "tree": {"sha": "1a2b69773387c9206b6169b34e7149f69b81be06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2b69773387c9206b6169b34e7149f69b81be06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c85534d6f996d7ef5430c77b0e508ddc6f130ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c85534d6f996d7ef5430c77b0e508ddc6f130ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c85534d6f996d7ef5430c77b0e508ddc6f130ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c85534d6f996d7ef5430c77b0e508ddc6f130ef/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be3416c681291e5a3f6e68d311c958fb05bc7f41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3416c681291e5a3f6e68d311c958fb05bc7f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3416c681291e5a3f6e68d311c958fb05bc7f41"}], "stats": {"total": 111, "additions": 93, "deletions": 18}, "files": [{"sha": "b856420480a1fc0a2b0b26f291a1f3687196b8bc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c85534d6f996d7ef5430c77b0e508ddc6f130ef/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c85534d6f996d7ef5430c77b0e508ddc6f130ef/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0c85534d6f996d7ef5430c77b0e508ddc6f130ef", "patch": "@@ -1,3 +1,12 @@\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Entry_Contract): Call\n+\tPreanalyze_Spec_Expression so that resolution takes place as well.\n+\t* sem_util.adb (Check_Internal_Protected_Use): Reject properly\n+\tinternal calls that appear in preconditions of protected\n+\toperations, in default values for same, and in contract guards\n+\tfor contract cases in SPARK.\n+\n 2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* a-numaux.ads: Fix description of a-numaux-darwin"}, {"sha": "26e531dd7f8e1ed4e11f68e8e0d259bb4eea560b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c85534d6f996d7ef5430c77b0e508ddc6f130ef/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c85534d6f996d7ef5430c77b0e508ddc6f130ef/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0c85534d6f996d7ef5430c77b0e508ddc6f130ef", "patch": "@@ -2326,9 +2326,7 @@ package body Sem_Ch3 is\n                            (First (Pragma_Argument_Associations (ASN))));\n                      Set_Parent (Exp, ASN);\n \n-                     --  ??? why not Preanalyze_Assert_Expression\n-\n-                     Preanalyze (Exp);\n+                     Preanalyze_Assert_Expression (Exp, Standard_Boolean);\n                   end if;\n \n                   ASN := Next_Pragma (ASN);"}, {"sha": "f9477ab8564b46423befddb8e6fafa2c13aafe8d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 83, "deletions": 15, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c85534d6f996d7ef5430c77b0e508ddc6f130ef/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c85534d6f996d7ef5430c77b0e508ddc6f130ef/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0c85534d6f996d7ef5430c77b0e508ddc6f130ef", "patch": "@@ -2834,10 +2834,12 @@ package body Sem_Util is\n       Prot : Entity_Id;\n \n    begin\n+      Prot := Empty;\n+\n       S := Current_Scope;\n       while Present (S) loop\n          if S = Standard_Standard then\n-            return;\n+            exit;\n \n          elsif Ekind (S) = E_Function\n            and then Ekind (Scope (S)) = E_Protected_Type\n@@ -2849,28 +2851,30 @@ package body Sem_Util is\n          S := Scope (S);\n       end loop;\n \n-      if Scope (Nam) = Prot and then Ekind (Nam) /= E_Function then\n-\n+      if Present (Prot)\n+        and then Scope (Nam) = Prot\n+        and then Ekind (Nam) /= E_Function\n+      then\n          --  An indirect function call (e.g. a callback within a protected\n          --  function body) is not statically illegal. If the access type is\n          --  anonymous and is the type of an access parameter, the scope of Nam\n          --  will be the protected type, but it is not a protected operation.\n \n          if Ekind (Nam) = E_Subprogram_Type\n-           and then\n-             Nkind (Associated_Node_For_Itype (Nam)) = N_Function_Specification\n+           and then Nkind (Associated_Node_For_Itype (Nam)) =\n+                      N_Function_Specification\n          then\n             null;\n \n          elsif Nkind (N) = N_Subprogram_Renaming_Declaration then\n             Error_Msg_N\n-              (\"within protected function cannot use protected \"\n-               & \"procedure in renaming or as generic actual\", N);\n+              (\"within protected function cannot use protected procedure in \"\n+               & \"renaming or as generic actual\", N);\n \n          elsif Nkind (N) = N_Attribute_Reference then\n             Error_Msg_N\n-              (\"within protected function cannot take access of \"\n-               & \" protected procedure\", N);\n+              (\"within protected function cannot take access of protected \"\n+               & \"procedure\", N);\n \n          else\n             Error_Msg_N\n@@ -2879,6 +2883,67 @@ package body Sem_Util is\n               (\"\\cannot call operation that may modify it\", N);\n          end if;\n       end if;\n+\n+      --  Verify that an internal call does not appear within a precondition\n+      --  of a protected operation. This implements AI12-0166.\n+      --  The precondition aspect has been rewritten as a pragma Precondition\n+      --  and we check whether the scope of the called subprogram is the same\n+      --  as that of the entity to which the aspect applies.\n+\n+      if Convention (Nam) = Convention_Protected then\n+         declare\n+            P : Node_Id;\n+\n+         begin\n+            P := Parent (N);\n+            while Present (P) loop\n+               if Nkind (P) = N_Pragma\n+                 and then Chars (Pragma_Identifier (P)) = Name_Precondition\n+                 and then From_Aspect_Specification (P)\n+                 and then\n+                   Scope (Entity (Corresponding_Aspect (P))) = Scope (Nam)\n+               then\n+                  Error_Msg_N\n+                    (\"internal call cannot appear in precondition of \"\n+                     & \"protected operation\", N);\n+                  return;\n+\n+               elsif Nkind (P) = N_Pragma\n+                 and then Chars (Pragma_Identifier (P)) = Name_Contract_Cases\n+               then\n+                  --  Check whether call is in a case guard. It is legal in a\n+                  --  consequence.\n+\n+                  P := N;\n+                  while Present (P) loop\n+                     if Nkind (Parent (P)) = N_Component_Association\n+                       and then P /= Expression (Parent (P))\n+                     then\n+                        Error_Msg_N\n+                          (\"internal call cannot appear in case guard in a \"\n+                           & \"contract case\", N);\n+                     end if;\n+\n+                     P := Parent (P);\n+                  end loop;\n+\n+                  return;\n+\n+               elsif Nkind (P) = N_Parameter_Specification\n+                 and then Scope (Current_Scope) = Scope (Nam)\n+                 and then Nkind_In (Parent (P), N_Entry_Declaration,\n+                                                N_Subprogram_Declaration)\n+               then\n+                  Error_Msg_N\n+                    (\"internal call cannot appear in default for formal of \"\n+                     & \"protected operation\", N);\n+                  return;\n+               end if;\n+\n+               P := Parent (P);\n+            end loop;\n+         end;\n+      end if;\n    end Check_Internal_Protected_Use;\n \n    ---------------------------------------\n@@ -20648,21 +20713,24 @@ package body Sem_Util is\n       --  correct Current_Source_File.\n \n       Result : constant Boolean :=\n-        Get_Name_Table_Boolean3 (Prag_Name)\n-          and then not Is_Internal_File_Name (File_Name (Current_Source_File));\n+                 Get_Name_Table_Boolean3 (Prag_Name)\n+                   and then not Is_Internal_File_Name\n+                                  (File_Name (Current_Source_File));\n    begin\n       return Result;\n    end Should_Ignore_Pragma_Par;\n \n-   --------------------------\n+   ------------------------------\n    -- Should_Ignore_Pragma_Sem --\n-   --------------------------\n+   ------------------------------\n \n    function Should_Ignore_Pragma_Sem (N : Node_Id) return Boolean is\n       pragma Assert (Compiler_State = Analyzing);\n       Prag_Name : constant Name_Id := Pragma_Name (N);\n-      Result : constant Boolean :=\n-        Get_Name_Table_Boolean3 (Prag_Name) and then not In_Internal_Unit (N);\n+      Result    : constant Boolean :=\n+                    Get_Name_Table_Boolean3 (Prag_Name)\n+                      and then not In_Internal_Unit (N);\n+\n    begin\n       return Result;\n    end Should_Ignore_Pragma_Sem;"}]}