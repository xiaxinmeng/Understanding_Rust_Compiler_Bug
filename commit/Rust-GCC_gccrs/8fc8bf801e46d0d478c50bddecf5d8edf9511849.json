{"sha": "8fc8bf801e46d0d478c50bddecf5d8edf9511849", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjOGJmODAxZTQ2ZDBkNDc4YzUwYmRkZWNmNWQ4ZWRmOTUxMTg0OQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-25T17:06:59Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-04-25T17:07:16Z"}, "message": "Enable Intel CET in liblto_plugin.so on Intel CET enabled host\n\nSince ld is Intel CET enabled on Intel CET enabled host, dlopen fails on\nliblto_plugin.so if it isn't Intel CET enabled.  Add GCC_CET_HOST_FLAGS\nto cet.m4, use it in libiberty and lto-plugin to always enable Intel\nCET in liblto_plugin.so on Intel CET enabled host.\n\nOn Linux/x86 host, enable Intel CET by default if assembler and compiler\nsupport Intel CET so that the generated liblto_plugin.so can be used on\nboth CET and non-CET machines.  It is an error to disable Intel CET in\nliblto_plugin.so on Intel CET enabled host.\n\nconfig/\n\n\tPR bootstrap/94739\n\t* cet.m4 (GCC_CET_HOST_FLAGS): New.\n\nlibiberty/\n\n\tPR bootstrap/94739\n\t* Makefile.in (COMPILE.c): Add @CET_HOST_FLAGS@.\n\t(configure_deps): Add $(srcdir)/../config/cet.m4 and\n\t$(srcdir)/../config/enable.m4.\n\t* aclocal.m4: Include ../config/cet.m4 and ../config/enable.m4.\n\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n\tAC_SUBST(CET_HOST_FLAGS).\n\t* configure: Regenerated.\n\nlto-plugin/\n\n\tPR bootstrap/94739\n\t* Makefile.am (AM_CFLAGS): Add $(CET_HOST_FLAGS).\n\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n\tAC_SUBST(CET_HOST_FLAGS).\n\t* Makefile.in: Regenerated.\n\t* aclocal.m4: Likewise.\n\t* configure: Likewise.", "tree": {"sha": "264541c8d248fc5cf9585868948d00834ce54757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/264541c8d248fc5cf9585868948d00834ce54757"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc8bf801e46d0d478c50bddecf5d8edf9511849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc8bf801e46d0d478c50bddecf5d8edf9511849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc8bf801e46d0d478c50bddecf5d8edf9511849", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc8bf801e46d0d478c50bddecf5d8edf9511849/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf3f7b309ffdd888fdd85048ac9b4bcdc2713a45"}], "stats": {"total": 436, "additions": 431, "deletions": 5}, "files": [{"sha": "bd650f59b36407af8e3fba489bd1e61f7d2bd446", "filename": "config/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -1,3 +1,8 @@\n+2020-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* cet.m4 (GCC_CET_HOST_FLAGS): New.\n+\n 2020-04-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libfortran/94694"}, {"sha": "8b9e01fd492beac573394a5a6773cdc573600f39", "filename": "config/cet.m4", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/config%2Fcet.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/config%2Fcet.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fcet.m4?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -48,3 +48,97 @@ else\n   AC_MSG_RESULT([no])\n fi\n ])\n+\n+dnl\n+dnl GCC_CET_HOST_FLAGS\n+dnl    (SHELL-CODE_HANDLER)\n+dnl\n+AC_DEFUN([GCC_CET_HOST_FLAGS],[dnl\n+GCC_ENABLE(cet, auto, ,[enable Intel CET in host libraries],\n+\t   permit yes|no|auto)\n+AC_MSG_CHECKING([for CET support])\n+\n+case \"$host\" in\n+  i[[34567]]86-*-linux* | x86_64-*-linux*)\n+    may_have_cet=yes\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -fcf-protection\"\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tAC_COMPILE_IFELSE(\n+\t [AC_LANG_PROGRAM(\n+\t  [],\n+\t  [\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\t  ])],\n+\t [enable_cet=yes],\n+\t [enable_cet=no])\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tAC_COMPILE_IFELSE(\n+\t [AC_LANG_PROGRAM(\n+\t  [],\n+\t  [asm (\"setssbsy\");])],\n+\t [],\n+\t [AC_MSG_ERROR([assembler with CET support is required for --enable-cet])])\n+\t;;\n+    esac\n+    CFLAGS=\"$save_CFLAGS\"\n+    ;;\n+  *)\n+    may_have_cet=no\n+    enable_cet=no\n+    ;;\n+esac\n+\n+if test x$may_have_cet = xyes; then\n+  save_LDFLAGS=\"$LDFLAGS\"\n+  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+  AC_TRY_RUN([\n+static void\n+foo (void)\n+{\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+xxx (void (*f) (void))\n+{\n+  f ();\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  xxx (foo);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}\n+  ],\n+  [have_cet=no],\n+  [have_cet=yes])\n+  LDFLAGS=\"$save_LDFLAGS\"\n+  if test x$enable_cet = xno -a x$have_cet = xyes; then\n+    AC_MSG_ERROR([Intel CET must be enabled on Intel CET enabled host])\n+  fi\n+fi\n+if test x$enable_cet = xyes; then\n+  $1=\"-fcf-protection\"\n+  AC_MSG_RESULT([yes])\n+else\n+  AC_MSG_RESULT([no])\n+fi\n+])"}, {"sha": "0c26d455caf3069d69fd9baf68696c530a735ab6", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -1,3 +1,14 @@\n+2020-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* Makefile.in (COMPILE.c): Add @CET_HOST_FLAGS@.\n+\t(configure_deps): Add $(srcdir)/../config/cet.m4 and\n+\t$(srcdir)/../config/enable.m4.\n+\t* aclocal.m4: Include ../config/cet.m4 and ../config/enable.m4.\n+\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n+\tAC_SUBST(CET_HOST_FLAGS).\n+\t* configure: Regenerated.\n+\n 2020-03-05  Egeyar Bagcioglu  <egeyar.bagcioglu@oracle.com>\n \n \t* simple-object.c (handle_lto_debug_sections): Name"}, {"sha": "d6b302e02fd907ecf042ae309d5ed0b7922937f0", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -112,7 +112,8 @@ installcheck: installcheck-subdir\n INCDIR=$(srcdir)/$(MULTISRCTOP)../include\n \n COMPILE.c = $(CC) -c @DEFS@ $(CFLAGS) $(CPPFLAGS) -I. -I$(INCDIR) \\\n-               $(HDEFINES) @ac_libiberty_warn_cflags@ -D_GNU_SOURCE\n+               $(HDEFINES) @ac_libiberty_warn_cflags@ -D_GNU_SOURCE \\\n+               @CET_HOST_FLAGS@\n \n # Just to make sure we don't use a built-in rule with VPATH\n .c.$(objext):\n@@ -481,6 +482,8 @@ config.status: $(srcdir)/configure\n AUTOCONF = autoconf\n configure_deps = $(srcdir)/aclocal.m4 \\\n \t$(srcdir)/../config/acx.m4 \\\n+\t$(srcdir)/../config/cet.m4 \\\n+\t$(srcdir)/../config/enable.m4 \\\n \t$(srcdir)/../config/no-executables.m4 \\\n \t$(srcdir)/../config/override.m4 \\\n \t$(srcdir)/../config/picflag.m4 \\"}, {"sha": "34c0a5bab627b1503318a5091dda8291040280e4", "filename": "libiberty/aclocal.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Faclocal.m4?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -1,4 +1,6 @@\n sinclude(../config/acx.m4)\n+sinclude(../config/cet.m4)\n+sinclude(../config/enable.m4)\n sinclude(../config/no-executables.m4)\n sinclude(../config/override.m4)\n sinclude(../config/picflag.m4)"}, {"sha": "2b52ce86c89dabdfad9c0da8612e53c5fbb5da02", "filename": "libiberty/configure", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -626,6 +626,7 @@ pexecute\n target_header_dir\n CHECK\n LIBOBJS\n+CET_HOST_FLAGS\n NOASANFLAG\n PICFLAG\n INSTALL_DATA\n@@ -710,6 +711,7 @@ enable_maintainer_mode\n enable_multilib\n enable_install_libiberty\n enable_largefile\n+enable_cet\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1337,6 +1339,7 @@ Optional Features:\n   --enable-multilib       build many library versions (default)\n   --enable-install-libiberty       Install headers and library for end users\n   --disable-largefile     omit support for large files\n+  --enable-cet            enable Intel CET in host libraries [default=auto]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -5264,6 +5267,148 @@ case \" ${CFLAGS} \" in\n esac\n \n \n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|auto) ;;\n+       *) as_fn_error $? \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=auto\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for CET support\" >&5\n+$as_echo_n \"checking for CET support... \" >&6; }\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    may_have_cet=yes\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -fcf-protection\"\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    CFLAGS=\"$save_CFLAGS\"\n+    ;;\n+  *)\n+    may_have_cet=no\n+    enable_cet=no\n+    ;;\n+esac\n+\n+if test x$may_have_cet = xyes; then\n+  save_LDFLAGS=\"$LDFLAGS\"\n+  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+  if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+static void\n+foo (void)\n+{\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+xxx (void (*f) (void))\n+{\n+  f ();\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  xxx (foo);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_cet=no\n+else\n+  have_cet=yes\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+  LDFLAGS=\"$save_LDFLAGS\"\n+  if test x$enable_cet = xno -a x$have_cet = xyes; then\n+    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+  fi\n+fi\n+if test x$enable_cet = xyes; then\n+  CET_HOST_FLAGS=\"-fcf-protection\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+\n+\n echo \"# Warning: this fragment is automatically generated\" > temp-frag\n \n if [ -n \"${frag}\" ] && [ -f \"${frag}\" ]; then"}, {"sha": "4e2599c14a89bafcb8c7e523b9ce5b3d60b8c0f6", "filename": "libiberty/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -243,6 +243,9 @@ case \" ${CFLAGS} \" in\n esac\n AC_SUBST(NOASANFLAG)\n \n+GCC_CET_HOST_FLAGS(CET_HOST_FLAGS)\n+AC_SUBST(CET_HOST_FLAGS)\n+\n echo \"# Warning: this fragment is automatically generated\" > temp-frag\n \n if [[ -n \"${frag}\" ]] && [[ -f \"${frag}\" ]]; then"}, {"sha": "d5f7ef0329cc84ad4ecb0bf1f5374f11213f26f7", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -1,3 +1,13 @@\n+2020-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* Makefile.am (AM_CFLAGS): Add $(CET_HOST_FLAGS).\n+\t* configure.ac: Add GCC_CET_HOST_FLAGS(CET_HOST_FLAGS) and\n+\tAC_SUBST(CET_HOST_FLAGS).\n+\t* Makefile.in: Regenerated.\n+\t* aclocal.m4: Likewise.\n+\t* configure: Likewise.\n+\n 2020-03-19  Martin Liska  <mliska@suse.cz>\n \n \t* lto-plugin.c (LTO_SECTION_PREFIX): Rename to ..."}, {"sha": "ba5882df7a7272f65219191c82ecd78ab4d3725e", "filename": "lto-plugin/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.am?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -8,7 +8,7 @@ target_noncanonical := @target_noncanonical@\n libexecsubdir := $(libexecdir)/gcc/$(real_target_noncanonical)/$(gcc_version)$(accel_dir_suffix)\n \n AM_CPPFLAGS = -I$(top_srcdir)/../include $(DEFS)\n-AM_CFLAGS = @ac_lto_plugin_warn_cflags@\n+AM_CFLAGS = @ac_lto_plugin_warn_cflags@ $(CET_HOST_FLAGS)\n AM_LDFLAGS = @ac_lto_plugin_ldflags@\n AM_LIBTOOLFLAGS = --tag=disable-static\n override CFLAGS := $(filter-out -fsanitize=address,$(CFLAGS))"}, {"sha": "7da7cd26dbff9c21e0757926162d5615ef48479c", "filename": "lto-plugin/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.in?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -92,7 +92,9 @@ target_triplet = @target@\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/cet.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/lthostflags.m4 \\\n \t$(top_srcdir)/../config/override.m4 \\\n@@ -216,6 +218,7 @@ AUTOMAKE = @AUTOMAKE@\n AWK = @AWK@\n CC = @CC@\n CCDEPMODE = @CCDEPMODE@\n+CET_HOST_FLAGS = @CET_HOST_FLAGS@\n CFLAGS = @CFLAGS@\n CPP = @CPP@\n CPPFLAGS = @CPPFLAGS@\n@@ -340,7 +343,7 @@ AUTOMAKE_OPTIONS = no-dependencies\n gcc_version := $(shell @get_gcc_base_ver@ $(top_srcdir)/../gcc/BASE-VER)\n libexecsubdir := $(libexecdir)/gcc/$(real_target_noncanonical)/$(gcc_version)$(accel_dir_suffix)\n AM_CPPFLAGS = -I$(top_srcdir)/../include $(DEFS)\n-AM_CFLAGS = @ac_lto_plugin_warn_cflags@\n+AM_CFLAGS = @ac_lto_plugin_warn_cflags@ $(CET_HOST_FLAGS)\n AM_LDFLAGS = @ac_lto_plugin_ldflags@\n AM_LIBTOOLFLAGS = --tag=disable-static\n libexecsub_LTLIBRARIES = liblto_plugin.la"}, {"sha": "f1fc28d4f13e8896e4885516bd31dc77a7c27cfb", "filename": "lto-plugin/aclocal.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Faclocal.m4?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -1168,7 +1168,9 @@ AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n m4_include([../config/acx.m4])\n+m4_include([../config/cet.m4])\n m4_include([../config/depstand.m4])\n+m4_include([../config/enable.m4])\n m4_include([../config/lead-dot.m4])\n m4_include([../config/lthostflags.m4])\n m4_include([../config/override.m4])"}, {"sha": "e55b35ecf3859b991d2643da5b9caf39efbe78b3", "filename": "lto-plugin/configure", "status": "modified", "additions": 147, "deletions": 2, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -654,6 +654,7 @@ get_gcc_base_ver\n real_target_noncanonical\n accel_dir_suffix\n gcc_build_dir\n+CET_HOST_FLAGS\n ac_lto_plugin_ldflags\n ac_lto_plugin_warn_cflags\n EGREP\n@@ -770,6 +771,7 @@ enable_maintainer_mode\n with_libiberty\n enable_dependency_tracking\n enable_largefile\n+enable_cet\n with_gcc_major_version_only\n enable_shared\n enable_static\n@@ -1416,6 +1418,7 @@ Optional Features:\n   --disable-dependency-tracking\n                           speeds up one-time build\n   --disable-largefile     omit support for large files\n+  --enable-cet            enable Intel CET in host libraries [default=auto]\n   --enable-shared[=PKGS]  build shared libraries [default=yes]\n   --enable-static[=PKGS]  build static libraries [default=yes]\n   --enable-fast-install[=PKGS]\n@@ -5660,6 +5663,148 @@ if test \"x$have_static_libgcc\" = xyes; then\n fi\n \n \n+ # Check whether --enable-cet was given.\n+if test \"${enable_cet+set}\" = set; then :\n+  enableval=$enable_cet;\n+      case \"$enableval\" in\n+       yes|no|auto) ;;\n+       *) as_fn_error $? \"Unknown argument to enable/disable cet\" \"$LINENO\" 5 ;;\n+                          esac\n+\n+else\n+  enable_cet=auto\n+fi\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for CET support\" >&5\n+$as_echo_n \"checking for CET support... \" >&6; }\n+\n+case \"$host\" in\n+  i[34567]86-*-linux* | x86_64-*-linux*)\n+    may_have_cet=yes\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -fcf-protection\"\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  enable_cet=yes\n+else\n+  enable_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm (\"setssbsy\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  as_fn_error $? \"assembler with CET support is required for --enable-cet\" \"$LINENO\" 5\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\t;;\n+    esac\n+    CFLAGS=\"$save_CFLAGS\"\n+    ;;\n+  *)\n+    may_have_cet=no\n+    enable_cet=no\n+    ;;\n+esac\n+\n+if test x$may_have_cet = xyes; then\n+  save_LDFLAGS=\"$LDFLAGS\"\n+  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+  if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error $? \"cannot run test program while cross compiling\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+static void\n+foo (void)\n+{\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+xxx (void (*f) (void))\n+{\n+  f ();\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  xxx (foo);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  have_cet=no\n+else\n+  have_cet=yes\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+  LDFLAGS=\"$save_LDFLAGS\"\n+  if test x$enable_cet = xno -a x$have_cet = xyes; then\n+    as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n+  fi\n+fi\n+if test x$enable_cet = xyes; then\n+  CET_HOST_FLAGS=\"-fcf-protection\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+\n+\n if test x\"$host_subdir\" = x.; then\n    gcc_build_dir=../gcc\n else\n@@ -11771,7 +11916,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11774 \"configure\"\n+#line 11919 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11877,7 +12022,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11880 \"configure\"\n+#line 12025 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "7e6f729e9dc4cf530ab1255100136708dea5ec95", "filename": "lto-plugin/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc8bf801e46d0d478c50bddecf5d8edf9511849/lto-plugin%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Fconfigure.ac?ref=8fc8bf801e46d0d478c50bddecf5d8edf9511849", "patch": "@@ -27,6 +27,9 @@ if test \"x$have_static_libgcc\" = xyes; then\n fi\n AC_SUBST(ac_lto_plugin_ldflags)\n \n+GCC_CET_HOST_FLAGS(CET_HOST_FLAGS)\n+AC_SUBST(CET_HOST_FLAGS)\n+\n if test x\"$host_subdir\" = x.; then\n    gcc_build_dir=../gcc\n else"}]}