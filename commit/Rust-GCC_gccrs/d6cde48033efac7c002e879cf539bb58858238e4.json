{"sha": "d6cde48033efac7c002e879cf539bb58858238e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjZGU0ODAzM2VmYWM3YzAwMmU4NzljZjUzOWJiNTg4NTgyMzhlNA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2005-08-26T17:17:05Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2005-08-26T17:17:05Z"}, "message": "stor-layout.c (finalize_type_size): Restore behaviour for non-aggregate types to the status quo ante of the patch...\n\n\t* stor-layout.c (finalize_type_size): Restore behaviour for\n\tnon-aggregate types to the status quo ante of the patch for\n\tpr 23467.  Document why it matters.\n\nFrom-SVN: r103527", "tree": {"sha": "1db0d7938aeda753d59d74176301b3e9bb5e91ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1db0d7938aeda753d59d74176301b3e9bb5e91ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6cde48033efac7c002e879cf539bb58858238e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cde48033efac7c002e879cf539bb58858238e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cde48033efac7c002e879cf539bb58858238e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cde48033efac7c002e879cf539bb58858238e4/comments", "author": null, "committer": null, "parents": [{"sha": "39627fed8943ef5ed4ecb7e5f4e68de5ade221ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39627fed8943ef5ed4ecb7e5f4e68de5ade221ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39627fed8943ef5ed4ecb7e5f4e68de5ade221ad"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "8d90f9c0a59b5cd5970e880c342e4afa23620883", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cde48033efac7c002e879cf539bb58858238e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cde48033efac7c002e879cf539bb58858238e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6cde48033efac7c002e879cf539bb58858238e4", "patch": "@@ -1,3 +1,9 @@\n+2005-08-26  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* stor-layout.c (finalize_type_size): Restore behaviour for\n+\tnon-aggregate types to the status quo ante of the patch for\n+\tpr 23467.  Document why it matters.\n+\n 2005-08-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/23506"}, {"sha": "810585585678655359a6014e3ec4cf01df06c3a3", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cde48033efac7c002e879cf539bb58858238e4/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cde48033efac7c002e879cf539bb58858238e4/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=d6cde48033efac7c002e879cf539bb58858238e4", "patch": "@@ -1399,23 +1399,23 @@ finalize_type_size (tree type)\n   /* Normally, use the alignment corresponding to the mode chosen.\n      However, where strict alignment is not required, avoid\n      over-aligning structures, since most compilers do not do this\n-     alignment.  */\n+     alignment.  Also, we must avoid overriding a larger alignment\n+     requirement coming from a user alignment of one of the fields.  */\n+  /* ??? The non-aggregate code is also needed to reduce the alignment\n+     of java types with alignment less than 16 bits.  The problem stems\n+     from java/decl.c using char_type_node for the 16 bit character type,\n+     while tree.c:make_node uses it as the type of the smallest addressable\n+     unit to initialize the alignment of all types.  */\n+  unsigned mode_align = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n \n   if (TYPE_MODE (type) != BLKmode && TYPE_MODE (type) != VOIDmode\n-      && (STRICT_ALIGNMENT\n+      && ((STRICT_ALIGNMENT && mode_align >= TYPE_ALIGN (type))\n \t  || (TREE_CODE (type) != RECORD_TYPE && TREE_CODE (type) != UNION_TYPE\n \t      && TREE_CODE (type) != QUAL_UNION_TYPE\n \t      && TREE_CODE (type) != ARRAY_TYPE)))\n     {\n-      unsigned mode_align = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n-\n-      /* Don't override a larger alignment requirement coming from a user\n-\t alignment of one of the fields.  */\n-      if (mode_align >= TYPE_ALIGN (type))\n-\t{\n-\t  TYPE_ALIGN (type) = mode_align;\n-\t  TYPE_USER_ALIGN (type) = 0;\n-\t}\n+      TYPE_ALIGN (type) = mode_align;\n+      TYPE_USER_ALIGN (type) = 0;\n     }\n \n   /* Do machine-dependent extra alignment.  */"}]}