{"sha": "8d4bcc35d641d8e4a034a9bdabdd24f16245d10d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ0YmNjMzVkNjQxZDhlNGEwMzRhOWJkYWJkZDI0ZjE2MjQ1ZDEwZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-01T22:44:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-01T22:44:35Z"}, "message": "re PR c++/47851 ([C++0x] Incorrect decltype result for conditional operator)\n\n\tPR c++/47851\n\t* call.c (standard_conversion): Provide requested cv-quals on\n\tclass rvalue conversion.\n\nFrom-SVN: r170601", "tree": {"sha": "8535c3bcfdf6cc6350aaef2bd598bcf81c004680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8535c3bcfdf6cc6350aaef2bd598bcf81c004680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faa9e9bfcaf52cd6194a1bf8f8b905a511b6e1e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa9e9bfcaf52cd6194a1bf8f8b905a511b6e1e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa9e9bfcaf52cd6194a1bf8f8b905a511b6e1e1"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "1a522e7a9797834adffef9890caa445e8eabfc85", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d4bcc35d641d8e4a034a9bdabdd24f16245d10d", "patch": "@@ -1,5 +1,9 @@\n 2011-03-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/47851\n+\t* call.c (standard_conversion): Provide requested cv-quals on\n+\tclass rvalue conversion.\n+\n \tPR c++/46282\n \t* decl2.c (grokbitfield): Handle type-dependent width.\n "}, {"sha": "a297f5313e375ac42865fc0ec5413e40a4f62643", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=8d4bcc35d641d8e4a034a9bdabdd24f16245d10d", "patch": "@@ -850,13 +850,15 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n   enum tree_code fcode, tcode;\n   conversion *conv;\n   bool fromref = false;\n+  tree qualified_to;\n \n   to = non_reference (to);\n   if (TREE_CODE (from) == REFERENCE_TYPE)\n     {\n       fromref = true;\n       from = TREE_TYPE (from);\n     }\n+  qualified_to = to;\n   to = strip_top_quals (to);\n   from = strip_top_quals (from);\n \n@@ -918,7 +920,11 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n     }\n \n   if (same_type_p (from, to))\n-    return conv;\n+    {\n+      if (CLASS_TYPE_P (to) && conv->kind == ck_rvalue)\n+\tconv->type = qualified_to;\n+      return conv;\n+    }\n \n   /* [conv.ptr]\n      A null pointer constant can be converted to a pointer type; ... A"}, {"sha": "55408593ed3215f63acfc178ed0f1146f3b6dcbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d4bcc35d641d8e4a034a9bdabdd24f16245d10d", "patch": "@@ -1,5 +1,7 @@\n 2011-03-01  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/decltype25.C: New.\n+\n \t* g++.dg/cpp0x/regress/bitfield-err1.C: New.\n \n 2011-03-01  Richard Guenther  <rguenther@suse.de>"}, {"sha": "c9559f1511a09f3611a560a836ab8ebae25bb0d2", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype25.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d4bcc35d641d8e4a034a9bdabdd24f16245d10d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype25.C?ref=8d4bcc35d641d8e4a034a9bdabdd24f16245d10d", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/47851\n+// { dg-options -std=c++0x }\n+\n+struct Type {\n+  void display_type();\n+  void display_type() const { }\n+};\n+\n+typedef Type const ConstType;\n+\n+struct ConvertibleToType {\n+    operator Type&() { return *reinterpret_cast<Type*>(this); }\n+};\n+\n+int main ()\n+{\n+  // Both lines should call the const variant.\n+  (true ? ConvertibleToType() : ConstType()).display_type();\n+  decltype((true ? ConvertibleToType() : ConstType()))().display_type();\n+}"}]}