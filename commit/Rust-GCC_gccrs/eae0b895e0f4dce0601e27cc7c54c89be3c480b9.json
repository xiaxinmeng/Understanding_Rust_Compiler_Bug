{"sha": "eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlMGI4OTVlMGY0ZGNlMDYwMWUyN2NjN2M1NGM4OWJlM2M0ODBiOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-12-08T12:08:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-12-08T12:08:14Z"}, "message": "PR71856 try to fix Parallel Mode assertions again\n\n\tPR libstdc++/71856\n\t* doc/xml/manual/using.xml: Document macro.\n\t* include/bits/c++config [_GLIBCXX_DEBUG || _GLIBCXX_PARALLEL]\n\t(__glibcxx_assert): Rename to __glibcxx_assert_impl.\n\t[_GLIBCXX_DEBUG] (__glibcxx_assert): Expand to __glibcxx_assert_impl.\n\t* include/parallel/base.h [_GLIBCXX_PARALLEL_ASSERTIONS]\n\t(_GLIBCXX_PARALLEL_ASSERT): Expand to __glibcxx_assert_impl.\n\t[!_GLIBCXX_PARALLEL_ASSERTIONS] (_GLIBCXX_PARALLEL_ASSERT): Define as\n\tempty.\n\t* testsuite/25_algorithms/headers/algorithm/\n\tparallel_algorithm_assert2.cc: New test.\n\nFrom-SVN: r243434", "tree": {"sha": "332cd6649ed19bd9f26c4dc860b47ab03c916a14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332cd6649ed19bd9f26c4dc860b47ab03c916a14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66110738f0003a5434ffbd7e18a54ea898981efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66110738f0003a5434ffbd7e18a54ea898981efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66110738f0003a5434ffbd7e18a54ea898981efc"}], "stats": {"total": 92, "additions": 87, "deletions": 5}, "files": [{"sha": "42b02a072ff1e164e3bd21a7e44021c9c34b2afb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "patch": "@@ -1,3 +1,17 @@\n+2016-12-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/71856\n+\t* doc/xml/manual/using.xml: Document macro.\n+\t* include/bits/c++config [_GLIBCXX_DEBUG || _GLIBCXX_PARALLEL]\n+\t(__glibcxx_assert): Rename to __glibcxx_assert_impl.\n+\t[_GLIBCXX_DEBUG] (__glibcxx_assert): Expand to __glibcxx_assert_impl.\n+\t* include/parallel/base.h [_GLIBCXX_PARALLEL_ASSERTIONS]\n+\t(_GLIBCXX_PARALLEL_ASSERT): Expand to __glibcxx_assert_impl.\n+\t[!_GLIBCXX_PARALLEL_ASSERTIONS] (_GLIBCXX_PARALLEL_ASSERT): Define as\n+\tempty.\n+\t* testsuite/25_algorithms/headers/algorithm/\n+\tparallel_algorithm_assert2.cc: New test.\n+\n 2016-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/util/testsuite_new_operators.h: Include testsuite_hooks.h."}, {"sha": "c06ce16bba460072b3406a45b9bb55e40c1eccb6", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "patch": "@@ -948,6 +948,15 @@ g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n \tmode</link>.\n       </para>\n     </listitem></varlistentry>\n+    <varlistentry><term><code>_GLIBCXX_PARALLEL_ASSERTIONS</code></term>\n+    <listitem>\n+      <para>Undefined by default, but when any parallel mode header is included\n+      this macro will be defined to a non-zero value if\n+      <code>_GLIBCXX_ASSERTIONS</code> has a non-zero value, otherwise to zero.\n+      When defined to a non-zero value, it enables extra error checking and\n+      assertions in the parallel mode.\n+      </para>\n+    </listitem></varlistentry>\n \n     <varlistentry><term><code>_GLIBCXX_PROFILE</code></term>\n     <listitem>"}, {"sha": "39e55f42b5434eb20d38b1e0934c3d108c0e9410", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "patch": "@@ -434,9 +434,8 @@ namespace std\n #endif\n \n // Assert.\n-#if !defined(_GLIBCXX_ASSERTIONS) && !defined(_GLIBCXX_PARALLEL)\n-# define __glibcxx_assert(_Condition)\n-#else\n+#if defined(_GLIBCXX_ASSERTIONS) \\\n+  || defined(_GLIBCXX_PARALLEL) || defined(_GLIBCXX_PARALLEL_ASSERTIONS)\n namespace std\n {\n   // Avoid the use of assert, because we're trying to keep the <cassert>\n@@ -450,7 +449,7 @@ namespace std\n     __builtin_abort();\n   }\n }\n-#define __glibcxx_assert(_Condition)\t\t\t\t   \t \\\n+#define __glibcxx_assert_impl(_Condition)\t\t\t\t \\\n   do \t\t\t\t\t\t\t\t\t \\\n   {\t\t\t\t\t\t\t      \t\t \\\n     if (! (_Condition))                                                  \\\n@@ -459,6 +458,12 @@ namespace std\n   } while (false)\n #endif\n \n+#if defined(_GLIBCXX_ASSERTIONS)\n+# define __glibcxx_assert(_Condition) __glibcxx_assert_impl(_Condition)\n+#else\n+# define __glibcxx_assert(_Condition)\n+#endif\n+\n // Macros for race detectors.\n // _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) and\n // _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) should be used to explain"}, {"sha": "721c42d259152cd01a5d18ae14b9be08099aa39d", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "patch": "@@ -419,7 +419,11 @@ namespace __gnu_parallel\n \t}\n     }\n \n-#define _GLIBCXX_PARALLEL_ASSERT(_Condition) __glibcxx_assert(_Condition)\n+#if _GLIBCXX_PARALLEL_ASSERTIONS && defined(__glibcxx_assert_impl)\n+#define _GLIBCXX_PARALLEL_ASSERT(_Condition) __glibcxx_assert_impl(_Condition)\n+#else\n+#define _GLIBCXX_PARALLEL_ASSERT(_Condition)\n+#endif\n \n } //namespace __gnu_parallel\n "}, {"sha": "c40985e63775a3391d017039ffb8918b8b88411d", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/parallel_algorithm_assert2.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_assert2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae0b895e0f4dce0601e27cc7c54c89be3c480b9/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_assert2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fparallel_algorithm_assert2.cc?ref=eae0b895e0f4dce0601e27cc7c54c89be3c480b9", "patch": "@@ -0,0 +1,50 @@\n+// { dg-require-parallel-mode \"\" }\n+// { dg-options \"-fopenmp -D_GLIBCXX_PARALLEL\" { target *-*-* } }\n+// { dg-do run }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#undef _GLIBCXX_DEBUG\n+#undef _GLIBCXX_ASSERTIONS\n+#undef _GLIBCXX_PARALLEL_ASSERTIONS\n+#define _GLIBCXX_PARALLEL_ASSERTIONS 1\n+#include <parallel/algorithm>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  // This should not be enabled without _GLIBCXX_ASSERTIONS:\n+  __glibcxx_assert(false);\n+}\n+\n+void\n+test02()\n+{\n+  bool result = false;\n+\n+  // This should be enabled by _GLIBCXX_PARALLEL_ASSERTIONS:\n+  _GLIBCXX_PARALLEL_ASSERT(result = true);\n+  VERIFY(result);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}