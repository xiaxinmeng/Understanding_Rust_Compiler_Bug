{"sha": "df375b0321f9a5360fd04435ee5832c253aa4175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzNzViMDMyMWY5YTUzNjBmZDA0NDM1ZWU1ODMyYzI1M2FhNDE3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-23T11:37:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-23T11:37:29Z"}, "message": "re PR middle-end/91283 (gcc.dg/torture/c99-contract-1.c FAILs)\n\n\tPR middle-end/91283\n\t* common.opt (fexcess-precision=): Add Optimization flag.  Use\n\tflag_excess_precision variable instead of\n\tflag_excess_precision_cmdline.\n\t* flags.h (class target_flag_state): Remove x_flag_excess_precision\n\tmember.\n\t(flag_excess_precision): Don't define.\n\t* langhooks.c (lhd_post_options): Set flag_excess_precision instead of\n\tflag_excess_precision_cmdline.  Remove comment.\n\t* opts.c (set_fast_math_flags): Use frontend_set_flag_excess_precision\n\tand x_flag_excess_precision instead of\n\tfrontend_set_flag_excess_precision_cmdline and\n\tx_flag_excess_precision_cmdline.\n\t(fast_math_flags_set_p): Use x_flag_excess_precision instead of\n\tx_flag_excess_precision_cmdline.\n\t* toplev.c (init_excess_precision): Remove.\n\t(lang_dependent_init_target): Don't call it.\nada/\n\t* gcc-interface/misc.c (gnat_post_options): Set flag_excess_precision\n\tinstead of flag_excess_precision_cmdline.\nbrig/\n\t* brig-lang.c (brig_langhook_post_options): Set flag_excess_precision\n\tinstead of flag_excess_precision_cmdline.\nc-family/\n\t* c-common.c (c_ts18661_flt_eval_method): Use flag_excess_precision\n\tinstead of flag_excess_precision_cmdline.\n\t* c-cppbuiltin.c (c_cpp_flt_eval_method_iec_559): Likewise.\n\t* c-opts.c (c_common_post_options): Likewise.\nd/\n\t* d-lang.cc (d_post_options): Set flag_excess_precision instead of\n\tflag_excess_precision_cmdline.\nfortran/\n\t* options.c (gfc_post_options): Set flag_excess_precision instead of\n\tflag_excess_precision_cmdline.  Remove comment.\ngo/\n\t* go-lang.c (go_langhook_post_options): Set flag_excess_precision\n\tinstead of flag_excess_precision_cmdline.\nlto/\n\t* lto-lang.c (lto_post_options): Set flag_excess_precision instead of\n\tflag_excess_precision_cmdline.  Remove comment.\n\nFrom-SVN: r274850", "tree": {"sha": "e93a027408faacfc6ec67b5f8767cad3774480cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e93a027408faacfc6ec67b5f8767cad3774480cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df375b0321f9a5360fd04435ee5832c253aa4175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df375b0321f9a5360fd04435ee5832c253aa4175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df375b0321f9a5360fd04435ee5832c253aa4175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df375b0321f9a5360fd04435ee5832c253aa4175/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19566bdda5762ddc769fc848dcad5e1e4abf8d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19566bdda5762ddc769fc848dcad5e1e4abf8d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19566bdda5762ddc769fc848dcad5e1e4abf8d0d"}], "stats": {"total": 139, "additions": 88, "deletions": 51}, "files": [{"sha": "62aebf25ddce0d40784526318344dbad5d15ffee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1,3 +1,23 @@\n+2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91283\n+\t* common.opt (fexcess-precision=): Add Optimization flag.  Use\n+\tflag_excess_precision variable instead of\n+\tflag_excess_precision_cmdline.\n+\t* flags.h (class target_flag_state): Remove x_flag_excess_precision\n+\tmember.\n+\t(flag_excess_precision): Don't define.\n+\t* langhooks.c (lhd_post_options): Set flag_excess_precision instead of\n+\tflag_excess_precision_cmdline.  Remove comment.\n+\t* opts.c (set_fast_math_flags): Use frontend_set_flag_excess_precision\n+\tand x_flag_excess_precision instead of\n+\tfrontend_set_flag_excess_precision_cmdline and\n+\tx_flag_excess_precision_cmdline.\n+\t(fast_math_flags_set_p): Use x_flag_excess_precision instead of\n+\tx_flag_excess_precision_cmdline.\n+\t* toplev.c (init_excess_precision): Remove.\n+\t(lang_dependent_init_target): Don't call it.\n+\n 2019-08-23  Martin Liska  <mliska@suse.cz>\n \n \t* lto-wrapper.c (run_gcc): When setting jobserver"}, {"sha": "b5c0b1ff2d77857ca365b08c15e20242ab6d91fd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1,3 +1,9 @@\n+2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91283\n+\t* gcc-interface/misc.c (gnat_post_options): Set flag_excess_precision\n+\tinstead of flag_excess_precision_cmdline.\n+\n 2019-08-21  Vadim Godunko  <godunko@adacore.com>\n \n \t* libgnat/g-expect.adb (Expect_Internal): Attempt to read"}, {"sha": "a576b7e5a0160b0388fac24da920dc1d8a0d993f", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -256,9 +256,9 @@ static bool\n gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n {\n   /* Excess precision other than \"fast\" requires front-end support.  */\n-  if (flag_excess_precision_cmdline == EXCESS_PRECISION_STANDARD)\n+  if (flag_excess_precision == EXCESS_PRECISION_STANDARD)\n     sorry (\"%<-fexcess-precision=standard%> for Ada\");\n-  flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n+  flag_excess_precision = EXCESS_PRECISION_FAST;\n \n   /* No psABI change warnings for Ada.  */\n   warn_psabi = 0;"}, {"sha": "462cbab05af536c4beaa5282807740e73f8cd19c", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1,3 +1,9 @@\n+2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91283\n+\t* brig-lang.c (brig_langhook_post_options): Set flag_excess_precision\n+\tinstead of flag_excess_precision_cmdline.\n+\n 2019-06-25  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* brig-lang.c (brig_build_c_type_nodes): Accept \"__intN__\""}, {"sha": "96c6c572e94a6be308535126acf7a5a5dee0f366", "filename": "gcc/brig/brig-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fbrig%2Fbrig-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fbrig%2Fbrig-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrig-lang.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -166,8 +166,8 @@ brig_langhook_handle_option\n static bool\n brig_langhook_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n {\n-  if (flag_excess_precision_cmdline == EXCESS_PRECISION_DEFAULT)\n-    flag_excess_precision_cmdline = EXCESS_PRECISION_STANDARD;\n+  if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n+    flag_excess_precision = EXCESS_PRECISION_STANDARD;\n \n   /* gccbrig casts pointers around like crazy, TBAA might produce broken\n      code if not disabling it by default.  Some PRM conformance tests such"}, {"sha": "b8920f1c18dac287df5349f84486e5fe4f63b71b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1,3 +1,11 @@\n+2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91283\n+\t* c-common.c (c_ts18661_flt_eval_method): Use flag_excess_precision\n+\tinstead of flag_excess_precision_cmdline.\n+\t* c-cppbuiltin.c (c_cpp_flt_eval_method_iec_559): Likewise.\n+\t* c-opts.c (c_common_post_options): Likewise.\n+\n 2019-08-22  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/91490"}, {"sha": "d516deaf24cc83a5b0294927323762232495a0c0", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -8345,7 +8345,7 @@ c_ts18661_flt_eval_method (void)\n     = targetm.c.excess_precision (EXCESS_PRECISION_TYPE_IMPLICIT);\n \n   enum excess_precision_type flag_type\n-    = (flag_excess_precision_cmdline == EXCESS_PRECISION_STANDARD\n+    = (flag_excess_precision == EXCESS_PRECISION_STANDARD\n        ? EXCESS_PRECISION_TYPE_STANDARD\n        : EXCESS_PRECISION_TYPE_FAST);\n "}, {"sha": "6006e95b0684f35ff5a4aa73f1616377b2bb1034", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -746,7 +746,7 @@ static bool\n c_cpp_flt_eval_method_iec_559 (void)\n {\n   enum excess_precision_type front_end_ept\n-    = (flag_excess_precision_cmdline == EXCESS_PRECISION_STANDARD\n+    = (flag_excess_precision == EXCESS_PRECISION_STANDARD\n        ? EXCESS_PRECISION_TYPE_STANDARD\n        : EXCESS_PRECISION_TYPE_FAST);\n "}, {"sha": "da783e4990c54120cb5097fbb0f1d8c77de28f27", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -800,14 +800,13 @@ c_common_post_options (const char **pfilename)\n      support.  */\n   if (c_dialect_cxx ())\n     {\n-      if (flag_excess_precision_cmdline == EXCESS_PRECISION_STANDARD)\n+      if (flag_excess_precision == EXCESS_PRECISION_STANDARD)\n \tsorry (\"%<-fexcess-precision=standard%> for C++\");\n-      flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n+      flag_excess_precision = EXCESS_PRECISION_FAST;\n     }\n-  else if (flag_excess_precision_cmdline == EXCESS_PRECISION_DEFAULT)\n-    flag_excess_precision_cmdline = (flag_iso\n-\t\t\t\t     ? EXCESS_PRECISION_STANDARD\n-\t\t\t\t     : EXCESS_PRECISION_FAST);\n+  else if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n+    flag_excess_precision = (flag_iso ? EXCESS_PRECISION_STANDARD\n+\t\t\t\t      : EXCESS_PRECISION_FAST);\n \n   /* ISO C restricts floating-point expression contraction to within\n      source-language expressions (-ffp-contract=on, currently an alias"}, {"sha": "f2214ed93ad857775e092d8baf61ffc2aabff7b7", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1399,7 +1399,7 @@ Common Report Var(flag_expensive_optimizations) Optimization\n Perform a number of minor, expensive optimizations.\n \n fexcess-precision=\n-Common Joined RejectNegative Enum(excess_precision) Var(flag_excess_precision_cmdline) Init(EXCESS_PRECISION_DEFAULT) SetByCombined\n+Common Joined RejectNegative Enum(excess_precision) Var(flag_excess_precision) Init(EXCESS_PRECISION_DEFAULT) Optimization SetByCombined\n -fexcess-precision=[fast|standard]\tSpecify handling of excess floating-point precision.\n \n Enum"}, {"sha": "1013c08d12b9cd5960d19819613caacdc14d90c2", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1,3 +1,9 @@\n+2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91283\n+\t* d-lang.cc (d_post_options): Set flag_excess_precision instead of\n+\tflag_excess_precision_cmdline.\n+\n 2019-08-20  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/88722"}, {"sha": "5cdb896323334fca0bdc5f9159b1bc4bea158ece", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -772,8 +772,8 @@ d_post_options (const char ** fn)\n   if (global_options_set.x_flag_max_errors)\n     global.errorLimit = flag_max_errors;\n \n-  if (flag_excess_precision_cmdline == EXCESS_PRECISION_DEFAULT)\n-    flag_excess_precision_cmdline = EXCESS_PRECISION_STANDARD;\n+  if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n+    flag_excess_precision = EXCESS_PRECISION_STANDARD;\n \n   if (global.params.useUnitTests)\n     global.params.useAssert = true;"}, {"sha": "5bf9b49c2b60f78ca6103c36d1357f623c649808", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -51,9 +51,6 @@ class target_flag_state\n   align_flags x_align_jumps;\n   align_flags x_align_labels;\n   align_flags x_align_functions;\n-\n-  /* The excess precision currently in effect.  */\n-  enum excess_precision x_flag_excess_precision;\n };\n \n extern class target_flag_state default_target_flag_state;\n@@ -68,12 +65,6 @@ extern class target_flag_state *this_target_flag_state;\n #define align_labels\t (this_target_flag_state->x_align_labels)\n #define align_functions\t (this_target_flag_state->x_align_functions)\n \n-/* String representaions of the above options are available in\n-   const char *str_align_foo.  NULL if not set.  */\n-\n-#define flag_excess_precision \\\n-  (this_target_flag_state->x_flag_excess_precision)\n-\n /* Returns TRUE if generated code should match ABI version N or\n    greater is in use.  */\n "}, {"sha": "e454bd264d92ea33cbc6f15e5861f38301aad238", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1,3 +1,9 @@\n+2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91283\n+\t* options.c (gfc_post_options): Set flag_excess_precision instead of\n+\tflag_excess_precision_cmdline.  Remove comment.\n+\n 2019-08-23  Mark Eggleston  <mark.eggleston@codethink.com>\n \n \t* intrinsics.text: Removed empty sections. The order of "}, {"sha": "771c10e4985d00b5d0c3abcfb510a73e9737035d", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -264,9 +264,9 @@ gfc_post_options (const char **pfilename)\n \n   /* Excess precision other than \"fast\" requires front-end\n      support.  */\n-  if (flag_excess_precision_cmdline == EXCESS_PRECISION_STANDARD)\n+  if (flag_excess_precision == EXCESS_PRECISION_STANDARD)\n     sorry (\"%<-fexcess-precision=standard%> for Fortran\");\n-  flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n+  flag_excess_precision = EXCESS_PRECISION_FAST;\n \n   /* Fortran allows associative math - but we cannot reassociate if\n      we want traps or signed zeros. Cf. also flag_protect_parens.  */"}, {"sha": "47400e25a45ba900c8a2dc1576b896b832031c6b", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1,3 +1,9 @@\n+2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91283\n+\t* go-lang.c (go_langhook_post_options): Set flag_excess_precision\n+\tinstead of flag_excess_precision_cmdline.\n+\n 2019-07-02  Cherry Zhang  <cherryyz@google.com>\n \n \t* go-gcc.cc (Gcc_backend::Gcc_backend): Define __builtin_memset."}, {"sha": "a6bda936ed7675ffb10428eff58e81b1099d2388", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -293,8 +293,8 @@ go_langhook_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n     go_add_search_path (dir);\n   go_search_dirs.release ();\n \n-  if (flag_excess_precision_cmdline == EXCESS_PRECISION_DEFAULT)\n-    flag_excess_precision_cmdline = EXCESS_PRECISION_STANDARD;\n+  if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n+    flag_excess_precision = EXCESS_PRECISION_STANDARD;\n \n   /* Tail call optimizations can confuse uses of runtime.Callers.  */\n   if (!global_options_set.x_flag_optimize_sibling_calls)"}, {"sha": "89fb5bc3ad80b8922a0e7bbead5fde2a23022371", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -97,7 +97,7 @@ lhd_post_options (const char ** ARG_UNUSED (pfilename))\n {\n   /* Excess precision other than \"fast\" requires front-end\n      support.  */\n-  flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n+  flag_excess_precision = EXCESS_PRECISION_FAST;\n   return false;\n }\n "}, {"sha": "4e68fbf28548afc1fa46cabbeb464d7ed7487b0c", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1,3 +1,9 @@\n+2019-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/91283\n+\t* lto-lang.c (lto_post_options): Set flag_excess_precision instead of\n+\tflag_excess_precision_cmdline.  Remove comment.\n+\n 2019-08-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR middle-end/91421"}, {"sha": "414eaf2075addaa3692fa3ebac32d3f935190a57", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -927,7 +927,8 @@ lto_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n \n   /* Excess precision other than \"fast\" requires front-end\n      support.  */\n-  flag_excess_precision_cmdline = EXCESS_PRECISION_FAST;\n+  if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n+    flag_excess_precision = EXCESS_PRECISION_FAST;\n \n   /* When partitioning, we can tear appart STRING_CSTs uses from the same\n      TU into multiple partitions.  Without constant merging the constants"}, {"sha": "1417dba8e4ca1eac5730ad8a15cc3dde20e38bf9", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -2971,9 +2971,8 @@ set_fast_math_flags (struct gcc_options *opts, int set)\n     opts->x_flag_errno_math = !set;\n   if (set)\n     {\n-      if (opts->frontend_set_flag_excess_precision_cmdline\n-\t  == EXCESS_PRECISION_DEFAULT)\n-\topts->x_flag_excess_precision_cmdline\n+      if (opts->frontend_set_flag_excess_precision == EXCESS_PRECISION_DEFAULT)\n+\topts->x_flag_excess_precision\n \t  = set ? EXCESS_PRECISION_FAST : EXCESS_PRECISION_DEFAULT;\n       if (!opts->frontend_set_flag_signaling_nans)\n \topts->x_flag_signaling_nans = 0;\n@@ -3008,8 +3007,7 @@ fast_math_flags_set_p (const struct gcc_options *opts)\n \t  && opts->x_flag_finite_math_only\n \t  && !opts->x_flag_signed_zeros\n \t  && !opts->x_flag_errno_math\n-\t  && opts->x_flag_excess_precision_cmdline\n-\t     == EXCESS_PRECISION_FAST);\n+\t  && opts->x_flag_excess_precision == EXCESS_PRECISION_FAST);\n }\n \n /* Return true iff flags are set as if -ffast-math but using the flags stored"}, {"sha": "d741a66f3857a60bcdb6f5c1b60e781ff311aad4", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df375b0321f9a5360fd04435ee5832c253aa4175/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=df375b0321f9a5360fd04435ee5832c253aa4175", "patch": "@@ -1841,27 +1841,11 @@ backend_init (void)\n   init_regs ();\n }\n \n-/* Initialize excess precision settings.\n-\n-   We have no need to modify anything here, just keep track of what the\n-   user requested.  We'll figure out any appropriate relaxations\n-   later.  */\n-\n-static void\n-init_excess_precision (void)\n-{\n-  gcc_assert (flag_excess_precision_cmdline != EXCESS_PRECISION_DEFAULT);\n-  flag_excess_precision = flag_excess_precision_cmdline;\n-}\n-\n /* Initialize things that are both lang-dependent and target-dependent.\n    This function can be called more than once if target parameters change.  */\n static void\n lang_dependent_init_target (void)\n {\n-  /* This determines excess precision settings.  */\n-  init_excess_precision ();\n-\n   /* This creates various _DECL nodes, so needs to be called after the\n      front end is initialized.  It also depends on the HAVE_xxx macros\n      generated from the target machine description.  */"}]}