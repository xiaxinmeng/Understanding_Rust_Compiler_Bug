{"sha": "b9ebf6c330e24e886e7ce148e8c680c3e06c24dc", "node_id": "C_kwDOANBUbNoAKGI5ZWJmNmMzMzBlMjRlODg2ZTdjZTE0OGU4YzY4MGMzZTA2YzI0ZGM", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2022-02-01T12:33:55Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2022-02-01T12:33:55Z"}, "message": "PR101260 regcprop: Add mode change check for copy reg\n\nWhen propagating a multi-word register into an access with a smaller\nmode the can_change_mode backend hook is already consulted for the\noriginal register.  This however is also required for the intermediate\ncopy in copy_regno which might use a different register class.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/101260\n\t* regcprop.cc (maybe_mode_change): Invoke mode_change_ok also for\n\tcopy_regno.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/101260\n\t* gcc.target/s390/pr101260.c: New testcase.", "tree": {"sha": "f6b556457693e957cc91da690a52f24662dea7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b556457693e957cc91da690a52f24662dea7d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34afa19d29c5bf0b0f504e4d0aca4e9a8bc82c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34afa19d29c5bf0b0f504e4d0aca4e9a8bc82c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34afa19d29c5bf0b0f504e4d0aca4e9a8bc82c5c"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "8e966f2b5acf518674cef57006727bff5b77c481", "filename": "gcc/regcprop.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc/gcc%2Fregcprop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc/gcc%2Fregcprop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.cc?ref=b9ebf6c330e24e886e7ce148e8c680c3e06c24dc", "patch": "@@ -426,7 +426,8 @@ maybe_mode_change (machine_mode orig_mode, machine_mode copy_mode,\n \n   if (orig_mode == new_mode)\n     return gen_raw_REG (new_mode, regno);\n-  else if (mode_change_ok (orig_mode, new_mode, regno))\n+  else if (mode_change_ok (orig_mode, new_mode, regno)\n+\t   && mode_change_ok (copy_mode, new_mode, copy_regno))\n     {\n       int copy_nregs = hard_regno_nregs (copy_regno, copy_mode);\n       int use_nregs = hard_regno_nregs (copy_regno, new_mode);"}, {"sha": "d7571aaa5e9d4bfd99fba48d0d5fefc1111528be", "filename": "gcc/testsuite/gcc.target/s390/pr101260.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr101260.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9ebf6c330e24e886e7ce148e8c680c3e06c24dc/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr101260.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr101260.c?ref=b9ebf6c330e24e886e7ce148e8c680c3e06c24dc", "patch": "@@ -0,0 +1,63 @@\n+/* PR rtl-optimization/101260 */\n+/* { dg-do run { target s390_useable_hw } } */\n+/* { dg-options \"-O1 -march=z14\" } */\n+\n+/* This used to fail with commit: 5dc1390b41d */\n+\n+struct a\n+{\n+  unsigned b:7;\n+  int c;\n+  int d;\n+  short e;\n+} p, *q = &p;\n+int f, g, h, i, r, s;\n+static short j[8][1][6] = { };\n+\n+char k[7];\n+short l, m;\n+int *n;\n+int **o = &n;\n+void\n+t ()\n+{\n+  for (; f;)\n+    ;\n+}\n+\n+static struct a\n+u (int x)\n+{\n+  struct a a = { 4, 8, 5, 4 };\n+  for (; i <= 6; i++)\n+    {\n+      struct a v = { };\n+      for (; l; l++)\n+\th = 0;\n+      for (; h >= 0; h--)\n+\t{\n+\t  j[i];\n+\t  struct a *w = &p;\n+\t  s = 0;\n+\t  for (; s < 3; s++)\n+\t    {\n+\t      r ^= x;\n+\t      m = j[i][g][h] == (k[g] = g);\n+\t      *w = v;\n+\t    }\n+\t  r = 2;\n+\t  for (; r; r--)\n+\t    *o = &r;\n+\t}\n+    }\n+  t ();\n+  return a;\n+}\n+\n+int\n+main ()\n+{\n+  *q = u (636);\n+  if (p.b != 4)\n+    __builtin_abort ();\n+}"}]}