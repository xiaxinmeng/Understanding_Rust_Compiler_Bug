{"sha": "3922658a2b5ccb2ca2ee19b4d757358bc7ae193b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkyMjY1OGEyYjVjY2IyY2EyZWUxOWI0ZDc1NzM1OGJjN2FlMTkzYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-09T08:26:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-09T08:26:45Z"}, "message": "tree.h (unsave_expr_now): Remove.\n\n2013-04-09  Richard Biener  <rguenther@suse.de>\n\n\t* tree.h (unsave_expr_now): Remove.\n\t* tree-inline.c (mark_local_for_remap_r): Remove.\n\t(unsave_expr_1): Likewise.\n\t(unsave_r): Likewise.\n\t(unsave_expr_now): Likewise.\n\t* tree-ssa-copy.c (replace_exp_1): Use unshare_expr.\n\t(propagate_tree_value): Likewise.\n\nFrom-SVN: r197620", "tree": {"sha": "9b1db49fe5feed259ac50f8a472a6cc007528ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b1db49fe5feed259ac50f8a472a6cc007528ad7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a197c8680b75e1a874872832e28557a3de82d2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a197c8680b75e1a874872832e28557a3de82d2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a197c8680b75e1a874872832e28557a3de82d2c"}], "stats": {"total": 149, "additions": 12, "deletions": 137}, "files": [{"sha": "39fca53ca29a2d8517163f8ff216d0fc182bfd0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3922658a2b5ccb2ca2ee19b4d757358bc7ae193b", "patch": "@@ -1,3 +1,13 @@\n+2013-04-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree.h (unsave_expr_now): Remove.\n+\t* tree-inline.c (mark_local_for_remap_r): Remove.\n+\t(unsave_expr_1): Likewise.\n+\t(unsave_r): Likewise.\n+\t(unsave_expr_now): Likewise.\n+\t* tree-ssa-copy.c (replace_exp_1): Use unshare_expr.\n+\t(propagate_tree_value): Likewise.\n+\n 2013-04-08  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* doc/rtl.texi (sequence): Rewrite documentation to match the"}, {"sha": "b94ba10ee0b15b49b225d58eeab4c02d8b50aa12", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 134, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3922658a2b5ccb2ca2ee19b4d757358bc7ae193b", "patch": "@@ -114,9 +114,6 @@ eni_weights eni_time_weights;\n static tree declare_return_variable (copy_body_data *, tree, tree, basic_block);\n static void remap_block (tree *, copy_body_data *);\n static void copy_bind_expr (tree *, int *, copy_body_data *);\n-static tree mark_local_for_remap_r (tree *, int *, void *);\n-static void unsave_expr_1 (tree);\n-static tree unsave_r (tree *, int *, void *);\n static void declare_inline_vars (tree, tree);\n static void remap_save_expr (tree *, void *, int *);\n static void prepend_lexical_block (tree current_block, tree new_block);\n@@ -4473,137 +4470,6 @@ remap_save_expr (tree *tp, void *st_, int *walk_subtrees)\n   *tp = t;\n }\n \n-/* Called via walk_tree.  If *TP points to a DECL_STMT for a local label,\n-   copies the declaration and enters it in the splay_tree in DATA (which is\n-   really an `copy_body_data *').  */\n-\n-static tree\n-mark_local_for_remap_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-\t\t\tvoid *data)\n-{\n-  copy_body_data *id = (copy_body_data *) data;\n-\n-  /* Don't walk into types.  */\n-  if (TYPE_P (*tp))\n-    *walk_subtrees = 0;\n-\n-  else if (TREE_CODE (*tp) == LABEL_EXPR)\n-    {\n-      tree decl = TREE_OPERAND (*tp, 0);\n-\n-      /* Copy the decl and remember the copy.  */\n-      insert_decl_map (id, decl, id->copy_decl (decl, id));\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-/* Perform any modifications to EXPR required when it is unsaved.  Does\n-   not recurse into EXPR's subtrees.  */\n-\n-static void\n-unsave_expr_1 (tree expr)\n-{\n-  switch (TREE_CODE (expr))\n-    {\n-    case TARGET_EXPR:\n-      /* Don't mess with a TARGET_EXPR that hasn't been expanded.\n-         It's OK for this to happen if it was part of a subtree that\n-         isn't immediately expanded, such as operand 2 of another\n-         TARGET_EXPR.  */\n-      if (TREE_OPERAND (expr, 1))\n-\tbreak;\n-\n-      TREE_OPERAND (expr, 1) = TREE_OPERAND (expr, 3);\n-      TREE_OPERAND (expr, 3) = NULL_TREE;\n-      break;\n-\n-    default:\n-      break;\n-    }\n-}\n-\n-/* Called via walk_tree when an expression is unsaved.  Using the\n-   splay_tree pointed to by ST (which is really a `splay_tree'),\n-   remaps all local declarations to appropriate replacements.  */\n-\n-static tree\n-unsave_r (tree *tp, int *walk_subtrees, void *data)\n-{\n-  copy_body_data *id = (copy_body_data *) data;\n-  struct pointer_map_t *st = id->decl_map;\n-  tree *n;\n-\n-  /* Only a local declaration (variable or label).  */\n-  if ((TREE_CODE (*tp) == VAR_DECL && !TREE_STATIC (*tp))\n-      || TREE_CODE (*tp) == LABEL_DECL)\n-    {\n-      /* Lookup the declaration.  */\n-      n = (tree *) pointer_map_contains (st, *tp);\n-\n-      /* If it's there, remap it.  */\n-      if (n)\n-\t*tp = *n;\n-    }\n-\n-  else if (TREE_CODE (*tp) == STATEMENT_LIST)\n-    gcc_unreachable ();\n-  else if (TREE_CODE (*tp) == BIND_EXPR)\n-    copy_bind_expr (tp, walk_subtrees, id);\n-  else if (TREE_CODE (*tp) == SAVE_EXPR\n-\t   || TREE_CODE (*tp) == TARGET_EXPR)\n-    remap_save_expr (tp, st, walk_subtrees);\n-  else\n-    {\n-      copy_tree_r (tp, walk_subtrees, NULL);\n-\n-      /* Do whatever unsaving is required.  */\n-      unsave_expr_1 (*tp);\n-    }\n-\n-  /* Keep iterating.  */\n-  return NULL_TREE;\n-}\n-\n-/* Copies everything in EXPR and replaces variables, labels\n-   and SAVE_EXPRs local to EXPR.  */\n-\n-tree\n-unsave_expr_now (tree expr)\n-{\n-  copy_body_data id;\n-\n-  /* There's nothing to do for NULL_TREE.  */\n-  if (expr == 0)\n-    return expr;\n-\n-  /* Set up ID.  */\n-  memset (&id, 0, sizeof (id));\n-  id.src_fn = current_function_decl;\n-  id.dst_fn = current_function_decl;\n-  id.decl_map = pointer_map_create ();\n-  id.debug_map = NULL;\n-\n-  id.copy_decl = copy_decl_no_change;\n-  id.transform_call_graph_edges = CB_CGE_DUPLICATE;\n-  id.transform_new_cfg = false;\n-  id.transform_return_to_modify = false;\n-  id.transform_lang_insert_block = NULL;\n-\n-  /* Walk the tree once to find local labels.  */\n-  walk_tree_without_duplicates (&expr, mark_local_for_remap_r, &id);\n-\n-  /* Walk the tree again, copying, remapping, and unsaving.  */\n-  walk_tree (&expr, unsave_r, &id, NULL);\n-\n-  /* Clean up.  */\n-  pointer_map_destroy (id.decl_map);\n-  if (id.debug_map)\n-    pointer_map_destroy (id.debug_map);\n-\n-  return expr;\n-}\n-\n /* Called via walk_gimple_seq.  If *GSIP points to a GIMPLE_LABEL for a local\n    label, copies the declaration and enters it in the splay_tree in DATA (which\n    is really a 'copy_body_data *'.  */"}, {"sha": "1514745dda5a9c09f99747a6c80105bd6448a994", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=3922658a2b5ccb2ca2ee19b4d757358bc7ae193b", "patch": "@@ -163,7 +163,7 @@ replace_exp_1 (use_operand_p op_p, tree val,\n   if (TREE_CODE (val) == SSA_NAME)\n     SET_USE (op_p, val);\n   else\n-    SET_USE (op_p, unsave_expr_now (val));\n+    SET_USE (op_p, unshare_expr (val));\n }\n \n \n@@ -214,7 +214,7 @@ propagate_tree_value (tree *op_p, tree val)\n   if (TREE_CODE (val) == SSA_NAME)\n     *op_p = val;\n   else\n-    *op_p = unsave_expr_now (val);\n+    *op_p = unshare_expr (val);\n }\n \n "}, {"sha": "f30361a6b09f777f64f9add5cc3ad283c39ef388", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3922658a2b5ccb2ca2ee19b4d757358bc7ae193b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3922658a2b5ccb2ca2ee19b4d757358bc7ae193b", "patch": "@@ -6018,7 +6018,6 @@ extern void indent_to (FILE *, int);\n extern bool debug_find_tree (tree, tree);\n /* This is in tree-inline.c since the routine uses\n    data structures from the inliner.  */\n-extern tree unsave_expr_now (tree);\n extern tree build_duplicate_type (tree);\n \n /* In calls.c */"}]}