{"sha": "f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllZWFkMWY4OTUzODY5ZmNmZDhiZTdiMGU1OGFmZjUwZmJlMWZkNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-05-17T15:55:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-17T15:55:51Z"}, "message": "re PR c++/53371 (rvalue reference type as exception-declaration)\n\n/cp\n2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53371\n\t* except.c (is_admissible_throw_operand): Rename to\n\tis_admissible_throw_operand_or_catch_parameter and handle\n\tcatch parameter too.\n\t(expand_start_catch_block): Use it.\n\t(build_throw): Adjust.\n\n/testsuite\n2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/53371\n\t* g++.dg/cpp0x/catch1.C: New.\n\nFrom-SVN: r187630", "tree": {"sha": "9367aeb410690c46507d07fb1ea823ff0e5b0670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9367aeb410690c46507d07fb1ea823ff0e5b0670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/comments", "author": null, "committer": null, "parents": [{"sha": "d7faa110dd439f6406a35661e1c24a3100da1471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7faa110dd439f6406a35661e1c24a3100da1471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7faa110dd439f6406a35661e1c24a3100da1471"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "98fb081217eff641d679ceadfc14db2090ad5f97", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5", "patch": "@@ -1,3 +1,12 @@\n+2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53371\n+\t* except.c (is_admissible_throw_operand): Rename to\n+\tis_admissible_throw_operand_or_catch_parameter and handle\n+\tcatch parameter too.\n+\t(expand_start_catch_block): Use it.\n+\t(build_throw): Adjust.\n+\n 2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44516"}, {"sha": "f4af7806fe12be28b22d6f348c2753ae278ef427", "filename": "gcc/cp/except.c", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5", "patch": "@@ -46,7 +46,7 @@ static void initialize_handler_parm (tree, tree);\n static tree do_allocate_exception (tree);\n static tree wrap_cleanups_r (tree *, int *, void *);\n static int complete_ptr_ref_or_void_ptr_p (tree, tree);\n-static bool is_admissible_throw_operand (tree);\n+static bool is_admissible_throw_operand_or_catch_parameter (tree, bool);\n static int can_convert_eh (tree, tree);\n \n /* Sets up all the global eh stuff that needs to be initialized at the\n@@ -485,12 +485,13 @@ expand_start_catch_block (tree decl)\n   if (! doing_eh ())\n     return NULL_TREE;\n \n-  /* Make sure this declaration is reasonable.  */\n-  if (decl && !complete_ptr_ref_or_void_ptr_p (TREE_TYPE (decl), NULL_TREE))\n-    decl = error_mark_node;\n-\n   if (decl)\n-    type = prepare_eh_type (TREE_TYPE (decl));\n+    {\n+      if (!is_admissible_throw_operand_or_catch_parameter (decl, false))\n+\tdecl = error_mark_node;\n+\n+      type = prepare_eh_type (TREE_TYPE (decl));\n+    }\n   else\n     type = NULL_TREE;\n \n@@ -720,7 +721,7 @@ build_throw (tree exp)\n \n   if (exp != NULL_TREE)\n     {\n-      if (!is_admissible_throw_operand (exp))\n+      if (!is_admissible_throw_operand_or_catch_parameter (exp, true))\n \treturn error_mark_node;\n     }\n \n@@ -944,14 +945,21 @@ complete_ptr_ref_or_void_ptr_p (tree type, tree from)\n   return 1;\n }\n \n-/* Return truth-value if EXPRESSION is admissible in throw-expression,\n-   i.e. if it is not of incomplete type or a pointer/reference to such\n-   a type or of an abstract class type.  */\n+/* If IS_THROW is true return truth-value if T is an expression admissible\n+   in throw-expression, i.e. if it is not of incomplete type or a pointer/\n+   reference to such a type or of an abstract class type.\n+   If IS_THROW is false, likewise for a catch parameter, same requirements\n+   for its type plus rvalue reference type is also not admissible.  */\n \n static bool\n-is_admissible_throw_operand (tree expr)\n+is_admissible_throw_operand_or_catch_parameter (tree t, bool is_throw)\n {\n-  tree type = TREE_TYPE (expr);\n+  tree expr = is_throw ? t : NULL_TREE;\n+  tree type = TREE_TYPE (t);\n+\n+  /* C++11 [except.handle] The exception-declaration shall not denote\n+     an incomplete type, an abstract class type, or an rvalue reference \n+     type.  */\n \n   /* 15.1/4 [...] The type of the throw-expression shall not be an\n \t    incomplete type, or a pointer or a reference to an incomplete\n@@ -968,8 +976,20 @@ is_admissible_throw_operand (tree expr)\n \t    conversion.  */\n   else if (CLASS_TYPE_P (type) && CLASSTYPE_PURE_VIRTUALS (type))\n     {\n-      error (\"expression %qE of abstract class type %qT cannot \"\n-\t     \"be used in throw-expression\", expr, type);\n+      if (is_throw)\n+\terror (\"expression %qE of abstract class type %qT cannot \"\n+\t       \"be used in throw-expression\", expr, type);\n+      else\n+\terror (\"cannot declare catch parameter to be of abstract \"\n+\t       \"class type %qT\", type);\n+      return false;\n+    }\n+  else if (!is_throw\n+\t   && TREE_CODE (type) == REFERENCE_TYPE\n+\t   && TYPE_REF_IS_RVALUE (type))\n+    {\n+      error (\"cannot declare catch parameter to be of rvalue \"\n+\t     \"reference type %qT\", type);\n       return false;\n     }\n "}, {"sha": "2eb3d5b155023d3f799a11f45be7e0bf3605da87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5", "patch": "@@ -1,3 +1,8 @@\n+2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/53371\n+\t* g++.dg/cpp0x/catch1.C: New.\n+\n 2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44516"}, {"sha": "81778ea780764364cae5ba5255f3482f6b6f959d", "filename": "gcc/testsuite/g++.dg/cpp0x/catch1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcatch1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcatch1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcatch1.C?ref=f9eead1f8953869fcfd8be7b0e58aff50fbe1fd5", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/53371\n+// { dg-do compile { target c++11 } }\n+\n+struct Abs\n+{\n+  virtual void a() = 0;\n+};\n+\n+void foo()\n+{\n+  try {\n+  } catch (Abs) { }   // { dg-error \"abstract class type\" }\n+\n+  try {\n+  } catch (int&&) { } // { dg-error \"rvalue reference type\" }\n+}"}]}