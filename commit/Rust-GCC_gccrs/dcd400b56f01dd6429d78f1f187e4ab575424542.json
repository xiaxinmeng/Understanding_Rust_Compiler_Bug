{"sha": "dcd400b56f01dd6429d78f1f187e4ab575424542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkNDAwYjU2ZjAxZGQ2NDI5ZDc4ZjFmMTg3ZTRhYjU3NTQyNDU0Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-09-22T15:54:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-09-22T15:54:52Z"}, "message": "type_traits (add_reference): Robustify vs reference to void.\n\n2006-09-22  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits (add_reference): Robustify vs\n\treference to void.\n\t* testsuite/tr1/4_metaprogramming/reference_modifications/\n\tadd_reference.cc: Add test.\n\n\t* include/tr1/memory: include <tr1/type_traits>.\n\t* include/tr1/boost_shared_ptr.h (__shared_ptr<>::operator*):\n\tUse add_reference instead.\n\t* testsuite/tr1/2_general_utilities/memory/enable_shared_from_this/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/tr1/2_general_utilities/memory/shared_ptr/\n\texplicit_instantiation/1.cc: Likewise.\n\t* testsuite/tr1/2_general_utilities/memory/weak_ptr/\n\texplicit_instantiation/1.cc: Likewise.\n\n\t* testsuite/util/testsuite_tr1.h: Tweak; avoid empty enum.\n\n\t* include/tr1/type_traits_fwd.h: Spelling fix.\n\n\t* include/tr1/boost_shared_ptr.h: Obvious stylistic fixes.\n\nFrom-SVN: r117147", "tree": {"sha": "195a39ba1b024db0e8371c78fd2a6aef9fd98119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195a39ba1b024db0e8371c78fd2a6aef9fd98119"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcd400b56f01dd6429d78f1f187e4ab575424542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd400b56f01dd6429d78f1f187e4ab575424542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd400b56f01dd6429d78f1f187e4ab575424542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd400b56f01dd6429d78f1f187e4ab575424542/comments", "author": null, "committer": null, "parents": [{"sha": "79f802f532f0c531de64e388bb70fe909e0f21d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79f802f532f0c531de64e388bb70fe909e0f21d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79f802f532f0c531de64e388bb70fe909e0f21d0"}], "stats": {"total": 222, "additions": 165, "deletions": 57}, "files": [{"sha": "425349e0fc3fe4786301ad0e3a1dbb475ed401da", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -1,3 +1,26 @@\n+2006-09-22  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits (add_reference): Robustify vs\n+\treference to void.\n+\t* testsuite/tr1/4_metaprogramming/reference_modifications/\n+\tadd_reference.cc: Add test.\n+\n+\t* include/tr1/memory: include <tr1/type_traits>.\n+\t* include/tr1/boost_shared_ptr.h (__shared_ptr<>::operator*):\n+\tUse add_reference instead.\n+\t* testsuite/tr1/2_general_utilities/memory/enable_shared_from_this/\n+\texplicit_instantiation/1.cc: New.\n+\t* testsuite/tr1/2_general_utilities/memory/shared_ptr/\n+\texplicit_instantiation/1.cc: Likewise.\n+\t* testsuite/tr1/2_general_utilities/memory/weak_ptr/\n+\texplicit_instantiation/1.cc: Likewise.\n+\n+\t* testsuite/util/testsuite_tr1.h: Tweak; avoid empty enum.\n+\n+\t* include/tr1/type_traits_fwd.h: Spelling fix.\n+\n+\t* include/tr1/boost_shared_ptr.h: Obvious stylistic fixes.\n+\n 2006-09-22  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/boost_shared_ptr.h: Trivial formatting fixes."}, {"sha": "4a6dca261a2c022637566890ef5efbd58b00fddf", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 26, "deletions": 45, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -90,8 +90,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef _Tp* argument_type;\n \n       void\n-      operator()(_Tp* p) const\n-      { delete p; }\n+      operator()(_Tp* __p) const\n+      { delete __p; }\n     };\n \n   // Empty helper class except when the template argument is _S_mutex.\n@@ -451,26 +451,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   struct __dynamic_cast_tag { };\n   struct __polymorphic_cast_tag { };\n \n-  template<class _Tp>\n-    struct __shared_ptr_reference\n-    { typedef _Tp& __type; };\n-\n-  template<>\n-    struct __shared_ptr_reference<void>\n-    { typedef void __type; };\n-\n-  template<>\n-    struct __shared_ptr_reference<void const>\n-    { typedef void __type; };\n-\n-  template<>\n-    struct __shared_ptr_reference<void volatile>\n-    { typedef void __type; };\n-\n-  template<>\n-    struct __shared_ptr_reference<void const volatile>\n-    { typedef void __type; };\n-\n \n   // Support for enable_shared_from_this.\n \n@@ -497,8 +477,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   template<typename _Tp, _Lock_policy _Lp>\n     class __shared_ptr\n     {\n-      typedef typename __shared_ptr_reference<_Tp>::__type _Reference;\n-\n     public:\n       typedef _Tp   element_type;\n       \n@@ -589,7 +567,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  // delete r.release() well-formed\n \t  _Tp1 * __tmp = __r.get();\n \t  _M_refcount = shared_count<_Lp>(__r);\n-\t  __enable_shared_from_this_helper( _M_refcount, __tmp, __tmp );\n+\t  __enable_shared_from_this_helper(_M_refcount, __tmp, __tmp );\n \t}\n \n       template<typename _Tp1>\n@@ -648,8 +626,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n         reset(_Tp1 * __p, _Deleter __d)\n         { __shared_ptr(__p, __d).swap(*this); }\n \n-      // Error to instantiate if _Tp is [cv-qual] void.\n-      _Reference\n+      // Allow instantiation when _Tp is [cv-qual] void.\n+      typename add_reference<_Tp>::type\n       operator*() const // never throws\n       {\n \t_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);\n@@ -806,33 +784,33 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       // It is not possible to avoid spurious access violations since\n       // in multithreaded programs r._M_ptr may be invalidated at any point.\n       template<typename _Tp1>\n-        __weak_ptr(const __weak_ptr<_Tp1, _Lp>& r)\n-\t: _M_refcount(r._M_refcount) // never throws\n+        __weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r)\n+\t: _M_refcount(__r._M_refcount) // never throws\n         {\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n-\t    _M_ptr = r.lock().get();\n+\t    _M_ptr = __r.lock().get();\n \t}\n \n       template<typename _Tp1>\n-        __weak_ptr(const __shared_ptr<_Tp1, _Lp>& r)\n-\t: _M_ptr(r._M_ptr), _M_refcount(r._M_refcount) // never throws\n+        __weak_ptr(const __shared_ptr<_Tp1, _Lp>& __r)\n+\t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount) // never throws\n         { __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>) }\n \n       template<typename _Tp1>\n         __weak_ptr&\n-        operator=(const __weak_ptr<_Tp1, _Lp>& r) // never throws\n+        operator=(const __weak_ptr<_Tp1, _Lp>& __r) // never throws\n         {\n-\t  _M_ptr = r.lock().get();\n-\t  _M_refcount = r._M_refcount;\n+\t  _M_ptr = __r.lock().get();\n+\t  _M_refcount = __r._M_refcount;\n \t  return *this;\n \t}\n       \n       template<typename _Tp1>\n         __weak_ptr&\n-        operator=(const __shared_ptr<_Tp1, _Lp>& r) // never throws\n+        operator=(const __shared_ptr<_Tp1, _Lp>& __r) // never throws\n         {\n-\t  _M_ptr = r._M_ptr;\n-\t  _M_refcount = r._M_refcount;\n+\t  _M_ptr = __r._M_ptr;\n+\t  _M_refcount = __r._M_refcount;\n \t  return *this;\n \t}\n \n@@ -975,27 +953,30 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     class weak_ptr : public __weak_ptr<_Tp>\n     {\n     public:\n-      weak_ptr() : __weak_ptr<_Tp>() { }\n+      weak_ptr()\n+      : __weak_ptr<_Tp>() { }\n       \n       template<typename _Tp1>\n-        weak_ptr(const __weak_ptr<_Tp1>& r) : __weak_ptr<_Tp>(r) { }\n+        weak_ptr(const __weak_ptr<_Tp1>& __r)\n+\t: __weak_ptr<_Tp>(__r) { }\n     \n       template<typename _Tp1>\n-        weak_ptr(const __shared_ptr<_Tp1>& r) : __weak_ptr<_Tp>(r) { }\n+        weak_ptr(const __shared_ptr<_Tp1>& __r)\n+\t: __weak_ptr<_Tp>(__r) { }\n \n       template<typename _Tp1>\n         weak_ptr&\n-        operator=(const weak_ptr<_Tp1>& r) // never throws\n+        operator=(const weak_ptr<_Tp1>& __r) // never throws\n         {\n-\t  this->__weak_ptr<_Tp>::operator=(r);\n+\t  this->__weak_ptr<_Tp>::operator=(__r);\n \t  return *this;\n \t}\n \n       template<typename _Tp1>\n         weak_ptr&\n-        operator=(const shared_ptr<_Tp1>& r) // never throws\n+        operator=(const shared_ptr<_Tp1>& __r) // never throws\n         {\n-\t  this->__weak_ptr<_Tp>::operator=(r);\n+\t  this->__weak_ptr<_Tp>::operator=(__r);\n \t  return *this;\n \t}\n     };"}, {"sha": "94a04777a1e5b2c48d8e4f18ebf3b0a4b092685b", "filename": "libstdc++-v3/include/tr1/memory", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -44,6 +44,7 @@\n #include <ext/concurrence.h>\n #include <bits/functexcept.h>\n #include <debug/debug.h>\n+#include <tr1/type_traits>  // tr1::add_reference\n \n #include <tr1/boost_shared_ptr.h>\n "}, {"sha": "ccbfc6061340501ba3e740ddab2bb83336921a6b", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -278,7 +278,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t\t      remove_all_extents<_Tp>::type>::value)>\n     { };\n \n-  // N.B. Without compiler support we cannot tell union from class types,\n+  // NB: Without compiler support we cannot tell union from class types,\n   // and is_empty and is_polymorphic don't work at all with the former. \n   template<typename _Tp, bool = !__is_union_or_class<_Tp>::value>\n     struct __is_empty_helper\n@@ -563,16 +563,23 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   template<typename _Tp>\n     struct remove_reference<_Tp&>\n     { typedef _Tp     type; };\n-  \n-  template<typename _Tp>\n-    struct add_reference\n+\n+  // NB: Careful with reference to void.\n+  template<typename _Tp, bool = (is_void<_Tp>::value\n+\t\t\t\t || is_reference<_Tp>::value)>\n+    struct __add_reference_helper\n     { typedef _Tp&    type; };\n \n   template<typename _Tp>\n-    struct add_reference<_Tp&>\n-    { typedef _Tp&    type; };\n+    struct __add_reference_helper<_Tp, true>\n+    { typedef _Tp     type; };\n+\n+  template<typename _Tp>\n+    struct add_reference\n+    : public __add_reference_helper<_Tp>\n+    { };\n \n-  /// @brief  array modififications [4.7.3].\n+  /// @brief  array modifications [4.7.3].\n   template<typename _Tp>\n     struct remove_extent\n     { typedef _Tp     type; };"}, {"sha": "f2130b05ff2a1dcccca384b3ed8b435c3b5c85b8", "filename": "libstdc++-v3/include/tr1/type_traits_fwd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -1,6 +1,6 @@\n // TR1 type_traits -*- C++ -*-\n \n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -202,7 +202,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   template<typename _Tp>\n     struct add_reference;\n \n-  /// @brief  array modififications [4.7.3].\n+  /// @brief  array modifications [4.7.3].\n   template<typename _Tp>\n     struct remove_extent;\n "}, {"sha": "b497ebb0a4ac394f9c2fb45bff0d186dc82c5ca0", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/enable_shared_from_this/explicit_instantiation/1.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fexplicit_instantiation%2F1.cc?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// TR1 2.2.5 Template class enable_shared_from_this [tr.util.smartptr.enab]\n+\n+#include <tr1/memory>\n+#include <testsuite_tr1.h>\n+\n+// { dg-do compile }\n+\n+using namespace __gnu_test;\n+using std::tr1::enable_shared_from_this;\n+template class enable_shared_from_this<int>;\n+template class enable_shared_from_this<void>;\n+template class enable_shared_from_this<ClassType>;\n+template class enable_shared_from_this<IncompleteClass>;"}, {"sha": "015e22ec79b479d1e277a853dad0cfd845c6ce98", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/shared_ptr/explicit_instantiation/1.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fexplicit_instantiation%2F1.cc?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// TR1 2.2.2 Template class shared_ptr [tr.util.smartptr.shared]\n+\n+#include <tr1/memory>\n+#include <testsuite_tr1.h>\n+\n+// { dg-do compile }\n+\n+using namespace __gnu_test;\n+using std::tr1::shared_ptr;\n+template class shared_ptr<int>;\n+template class shared_ptr<void>;\n+template class shared_ptr<ClassType>;\n+template class shared_ptr<IncompleteClass>;"}, {"sha": "6c22459dab6e4db86325769a1a0c1816d99ceb0b", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/weak_ptr/explicit_instantiation/1.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fweak_ptr%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fweak_ptr%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fweak_ptr%2Fexplicit_instantiation%2F1.cc?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -0,0 +1,31 @@\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// TR1 2.2.4 Template class weak_ptr [tr.util.smartptr.weak]\n+\n+#include <tr1/memory>\n+#include <testsuite_tr1.h>\n+\n+// { dg-do compile }\n+\n+using namespace __gnu_test;\n+using std::tr1::weak_ptr;\n+template class weak_ptr<int>;\n+template class weak_ptr<void>;\n+template class weak_ptr<ClassType>;\n+template class weak_ptr<IncompleteClass>;"}, {"sha": "29ad8c3d994152d3acaf854b8ae2e08c71170a51", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/reference_modifications/add_reference.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fadd_reference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fadd_reference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Freference_modifications%2Fadd_reference.cc?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -1,6 +1,6 @@\n // 2004-12-08  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,6 +37,9 @@ void test01()\n   VERIFY( (is_same<add_reference<int*>::type, int*&>::value) );\n   VERIFY( (is_same<add_reference<ClassType&>::type, ClassType&>::value) );\n   VERIFY( (is_same<add_reference<ClassType>::type, ClassType&>::value) );\n+\n+  VERIFY( (is_same<add_reference<void>::type, void>::value) );\n+  VERIFY( (is_same<add_reference<const void>::type, const void>::value) );  \n }\n \n int main()"}, {"sha": "b48f1a36b4118ddd4df9120e6af22de674cb66de", "filename": "libstdc++-v3/testsuite/util/testsuite_tr1.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcd400b56f01dd6429d78f1f187e4ab575424542/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_tr1.h?ref=dcd400b56f01dd6429d78f1f187e4ab575424542", "patch": "@@ -95,7 +95,7 @@ namespace __gnu_test\n \n   class DerivedType : public ClassType { };\n \n-  enum EnumType { };\n+  enum EnumType { e0 };\n \n   struct ConvType\n   { operator int() const; };\n@@ -181,7 +181,7 @@ namespace __gnu_test\n \n   // For use in 8_c_compatibility.\n   template<typename R, typename T>\n-    typename __gnu_cxx::__enable_if<std::tr1::is_same<R, T>::value, \n+    typename __gnu_cxx::__enable_if<std::__are_same<R, T>::__value, \n \t\t\t\t    bool>::__type\n     check_ret_type(T)\n     { return true; }"}]}