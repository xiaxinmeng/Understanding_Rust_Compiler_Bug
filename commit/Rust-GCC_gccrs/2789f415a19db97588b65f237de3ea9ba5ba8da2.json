{"sha": "2789f415a19db97588b65f237de3ea9ba5ba8da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4OWY0MTVhMTlkYjk3NTg4YjY1ZjIzN2RlM2VhOWJhNWJhOGRhMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-21T00:05:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-21T00:05:03Z"}, "message": "char_traits.h: Use noexcept throughout.\n\n2011-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/char_traits.h: Use noexcept throughout.\n\t* include/std/typeindex: Likewise.\n\n\t* include/std/tuple (_Tuple_impl<>_Tuple_impl(_Tuple_impl&&)): Use\n\tnoexcept; adjust callers.\n\t* include/bits/stl_pair.h (pair<>::pair(pair<>&&)): Use noexcept.\n\t* testsuite/20_util/tuple/cons/noexcept_move_construct.cc: New.\n\t* testsuite/20_util/pair/cons/noexcept_move_construct.cc: Likewise.\n\t* testsuite/20_util/pair/noexcept_swap.cc: Likewise.\n\t* testsuite/20_util/pair/noexcept_move_assign.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-warning\n\tline numbers.\n\nFrom-SVN: r173986", "tree": {"sha": "86c7c965f23f3734503384e7957b5e55c45ff13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86c7c965f23f3734503384e7957b5e55c45ff13a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2789f415a19db97588b65f237de3ea9ba5ba8da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2789f415a19db97588b65f237de3ea9ba5ba8da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2789f415a19db97588b65f237de3ea9ba5ba8da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2789f415a19db97588b65f237de3ea9ba5ba8da2/comments", "author": null, "committer": null, "parents": [{"sha": "fa07d25b40bce1e4959a40a2753f1911e2b06431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa07d25b40bce1e4959a40a2753f1911e2b06431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa07d25b40bce1e4959a40a2753f1911e2b06431"}], "stats": {"total": 385, "additions": 311, "deletions": 74}, "files": [{"sha": "113acf56e86a3b7c3c86aa0ee3cde75b767d0001", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -1,3 +1,18 @@\n+2011-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/char_traits.h: Use noexcept throughout.\n+\t* include/std/typeindex: Likewise.\n+\n+\t* include/std/tuple (_Tuple_impl<>_Tuple_impl(_Tuple_impl&&)): Use\n+\tnoexcept; adjust callers.\n+\t* include/bits/stl_pair.h (pair<>::pair(pair<>&&)): Use noexcept.\n+\t* testsuite/20_util/tuple/cons/noexcept_move_construct.cc: New.\n+\t* testsuite/20_util/pair/cons/noexcept_move_construct.cc: Likewise.\n+\t* testsuite/20_util/pair/noexcept_swap.cc: Likewise.\n+\t* testsuite/20_util/pair/noexcept_move_assign.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-warning\n+\tline numbers.\n+\n 2011-05-20  Jason Merrill  <jason@redhat.com>\n \n \t* include/ext/pb_ds/assoc_container.hpp: Explicitly qualify calls to"}, {"sha": "2024a3332297b4f8b55e940be2c20d97d0918ea9", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -1,7 +1,7 @@\n // Character Traits for use by standard string and iostream -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -241,15 +241,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef mbstate_t         state_type;\n \n       static void\n-      assign(char_type& __c1, const char_type& __c2)\n+      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { __c1 = __c2; }\n \n       static _GLIBCXX_CONSTEXPR bool\n-      eq(const char_type& __c1, const char_type& __c2)\n+      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 == __c2; }\n \n       static _GLIBCXX_CONSTEXPR bool\n-      lt(const char_type& __c1, const char_type& __c2)\n+      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 < __c2; }\n \n       static int\n@@ -277,25 +277,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }\n \n       static _GLIBCXX_CONSTEXPR char_type\n-      to_char_type(const int_type& __c)\n+      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT\n       { return static_cast<char_type>(__c); }\n \n       // To keep both the byte 0xff and the eof symbol 0xffffffff\n       // from ending up as 0xffffffff.\n       static _GLIBCXX_CONSTEXPR int_type\n-      to_int_type(const char_type& __c)\n+      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT\n       { return static_cast<int_type>(static_cast<unsigned char>(__c)); }\n \n       static _GLIBCXX_CONSTEXPR bool\n-      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 == __c2; }\n \n       static _GLIBCXX_CONSTEXPR int_type\n-      eof()\n+      eof() _GLIBCXX_NOEXCEPT\n       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }\n \n       static _GLIBCXX_CONSTEXPR int_type\n-      not_eof(const int_type& __c)\n+      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT\n       { return (__c == eof()) ? 0 : __c; }\n   };\n \n@@ -312,15 +312,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef mbstate_t         state_type;\n \n       static void\n-      assign(char_type& __c1, const char_type& __c2)\n+      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { __c1 = __c2; }\n \n       static _GLIBCXX_CONSTEXPR bool\n-      eq(const char_type& __c1, const char_type& __c2)\n+      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 == __c2; }\n \n       static _GLIBCXX_CONSTEXPR bool\n-      lt(const char_type& __c1, const char_type& __c2)\n+      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 < __c2; }\n \n       static int\n@@ -348,23 +348,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return wmemset(__s, __a, __n); }\n \n       static _GLIBCXX_CONSTEXPR char_type\n-      to_char_type(const int_type& __c)\n+      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT\n       { return char_type(__c); }\n \n       static _GLIBCXX_CONSTEXPR int_type\n-      to_int_type(const char_type& __c)\n+      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT\n       { return int_type(__c); }\n \n       static _GLIBCXX_CONSTEXPR bool\n-      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT\n       { return __c1 == __c2; }\n \n       static _GLIBCXX_CONSTEXPR int_type\n-      eof()\n+      eof() _GLIBCXX_NOEXCEPT\n       { return static_cast<int_type>(WEOF); }\n \n       static _GLIBCXX_CONSTEXPR int_type\n-      not_eof(const int_type& __c)\n+      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n   };\n #endif //_GLIBCXX_USE_WCHAR_T\n@@ -391,15 +391,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef mbstate_t         state_type;\n \n       static void\n-      assign(char_type& __c1, const char_type& __c2)\n+      assign(char_type& __c1, const char_type& __c2) noexcept\n       { __c1 = __c2; }\n \n-      static _GLIBCXX_CONSTEXPR bool\n-      eq(const char_type& __c1, const char_type& __c2)\n+      static constexpr bool\n+      eq(const char_type& __c1, const char_type& __c2) noexcept\n       { return __c1 == __c2; }\n \n-      static _GLIBCXX_CONSTEXPR bool\n-      lt(const char_type& __c1, const char_type& __c2)\n+      static constexpr bool\n+      lt(const char_type& __c1, const char_type& __c2) noexcept\n       { return __c1 < __c2; }\n \n       static int\n@@ -453,24 +453,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __s;\n       }\n \n-      static _GLIBCXX_CONSTEXPR char_type\n-      to_char_type(const int_type& __c)\n+      static constexpr char_type\n+      to_char_type(const int_type& __c) noexcept\n       { return char_type(__c); }\n \n-      static _GLIBCXX_CONSTEXPR int_type\n-      to_int_type(const char_type& __c)\n+      static constexpr int_type\n+      to_int_type(const char_type& __c) noexcept\n       { return int_type(__c); }\n \n-      static _GLIBCXX_CONSTEXPR bool\n-      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      static constexpr bool\n+      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept\n       { return __c1 == __c2; }\n \n-      static _GLIBCXX_CONSTEXPR int_type\n-      eof()\n+      static constexpr int_type\n+      eof() noexcept\n       { return static_cast<int_type>(-1); }\n \n-      static _GLIBCXX_CONSTEXPR int_type\n-      not_eof(const int_type& __c)\n+      static constexpr int_type\n+      not_eof(const int_type& __c) noexcept\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n     };\n \n@@ -484,15 +484,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef mbstate_t         state_type;\n \n       static void\n-      assign(char_type& __c1, const char_type& __c2)\n+      assign(char_type& __c1, const char_type& __c2) noexcept\n       { __c1 = __c2; }\n \n-      static _GLIBCXX_CONSTEXPR bool\n-      eq(const char_type& __c1, const char_type& __c2)\n+      static constexpr bool\n+      eq(const char_type& __c1, const char_type& __c2) noexcept\n       { return __c1 == __c2; }\n \n-      static _GLIBCXX_CONSTEXPR bool\n-      lt(const char_type& __c1, const char_type& __c2)\n+      static constexpr bool\n+      lt(const char_type& __c1, const char_type& __c2) noexcept\n       { return __c1 < __c2; }\n \n       static int\n@@ -546,24 +546,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __s;\n       }\n \n-      static _GLIBCXX_CONSTEXPR char_type\n-      to_char_type(const int_type& __c)\n+      static constexpr char_type\n+      to_char_type(const int_type& __c) noexcept\n       { return char_type(__c); }\n \n-      static _GLIBCXX_CONSTEXPR int_type\n-      to_int_type(const char_type& __c)\n+      static constexpr int_type\n+      to_int_type(const char_type& __c) noexcept\n       { return int_type(__c); }\n \n-      static _GLIBCXX_CONSTEXPR bool\n-      eq_int_type(const int_type& __c1, const int_type& __c2)\n+      static constexpr bool\n+      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept\n       { return __c1 == __c2; }\n \n-      static _GLIBCXX_CONSTEXPR int_type\n-      eof()\n+      static constexpr int_type\n+      eof() noexcept\n       { return static_cast<int_type>(-1); }\n \n-      static _GLIBCXX_CONSTEXPR int_type\n-      not_eof(const int_type& __c)\n+      static constexpr int_type\n+      not_eof(const int_type& __c) noexcept\n       { return eq_int_type(__c, eof()) ? 0 : __c; }\n     };\n "}, {"sha": "fbb475b513296b1e989c41b4413181d7e9a6b259", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -112,7 +112,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       constexpr pair(const pair&) = default;\n \n-      // Implicit.\n+      // Implicit?!? Breaks containers!!!\n       // pair(pair&&) = default;\n \n       // DR 811.\n@@ -134,6 +134,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<class _U1, class _U2>\n \tpair(pair<_U1, _U2>&& __p)\n+\tnoexcept(std::is_nothrow_constructible<_T1, _U1&&>::value\n+\t\t && std::is_nothrow_constructible<_T2, _U2&&>::value)\n \t: first(std::forward<_U1>(__p.first)),\n \t  second(std::forward<_U2>(__p.second)) { }\n \n@@ -153,8 +155,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       pair&\n       operator=(pair&& __p)\n-      noexcept(is_nothrow_move_assignable<_T1>::value\n-\t       && is_nothrow_move_assignable<_T2>::value)\n+      noexcept(std::is_nothrow_move_assignable<_T1>::value\n+\t       && std::is_nothrow_move_assignable<_T2>::value)\n       {\n \tfirst = std::move(__p.first);\n \tsecond = std::move(__p.second);"}, {"sha": "fee94e26e52cf83e80e38da652ef3f57216fda18", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -169,6 +169,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Tuple_impl(const _Tuple_impl&) = default;\n \n       _Tuple_impl(_Tuple_impl&& __in)\n+      noexcept(std::is_nothrow_move_constructible<_Head>::value\n+\t       && std::is_nothrow_move_constructible<_Inherited>::value)\n       : _Inherited(std::move(__in._M_tail())), \n \t_Base(std::forward<_Head>(__in._M_head())) { }\n \n@@ -191,8 +193,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Tuple_impl&\n       operator=(_Tuple_impl&& __in)\n-      noexcept(is_nothrow_move_assignable<_Head>::value\n-\t       && is_nothrow_move_assignable<_Inherited>::value)\n+      noexcept(std::is_nothrow_move_assignable<_Head>::value\n+\t       && std::is_nothrow_move_assignable<_Inherited>::value)\n       {\n \t_M_head() = std::forward<_Head>(__in._M_head());\n \t_M_tail() = std::move(__in._M_tail());\n@@ -252,9 +254,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Inherited(std::forward<_UElements>(__elements)...) {\t}\n \n       constexpr tuple(const tuple&) = default;\n-\n-      tuple(tuple&& __in)\n-      : _Inherited(static_cast<_Inherited&&>(__in)) { }\n+      tuple(tuple&&) = default;\n \n       template<typename... _UElements, typename = typename\n \t       std::enable_if<sizeof...(_UElements)\n@@ -278,7 +278,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n-      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n+      noexcept(std::is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;\n@@ -337,9 +337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }\n \n       constexpr tuple(const tuple&) = default;\n-\n-      tuple(tuple&& __in)\n-      : _Inherited(static_cast<_Inherited&&>(__in)) { }\n+      tuple(tuple&&) = default;\n \n       template<typename _U1, typename _U2>\n         tuple(const tuple<_U1, _U2>& __in)\n@@ -367,7 +365,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n-      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n+      noexcept(std::is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;\n@@ -434,9 +432,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _Inherited(std::forward<_U1>(__a1)) { }\n \n       constexpr tuple(const tuple&) = default;\n-\n-      tuple(tuple&& __in)\n-      : _Inherited(static_cast<_Inherited&&>(__in)) { }\n+      tuple(tuple&&) = default;\n \n       template<typename _U1>\n         tuple(const tuple<_U1>& __in)\n@@ -455,7 +451,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n-      noexcept(is_nothrow_move_assignable<_Inherited>::value)\n+      noexcept(std::is_nothrow_move_assignable<_Inherited>::value)\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;"}, {"sha": "a92c2969b972882704b2f96efc8024858b0066c7", "filename": "libstdc++-v3/include/std/typeindex", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -1,6 +1,6 @@\n // C++0x typeindex -*- C++ -*-\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -48,31 +48,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   struct type_index\n   {\n-    type_index(const type_info& __rhs)\n+    type_index(const type_info& __rhs) noexcept\n     : _M_target(&__rhs) { }\n \n     bool\n-    operator==(const type_index& __rhs) const\n+    operator==(const type_index& __rhs) const noexcept\n     { return *_M_target == *__rhs._M_target; }\n \n     bool\n-    operator!=(const type_index& __rhs) const\n+    operator!=(const type_index& __rhs) const noexcept\n     { return *_M_target != *__rhs._M_target; }\n \n     bool\n-    operator<(const type_index& __rhs) const\n+    operator<(const type_index& __rhs) const noexcept\n     { return _M_target->before(*__rhs._M_target); }\n \n     bool\n-    operator<=(const type_index& __rhs) const\n+    operator<=(const type_index& __rhs) const noexcept\n     { return !__rhs._M_target->before(*_M_target); }\n \n     bool\n-    operator>(const type_index& __rhs) const\n+    operator>(const type_index& __rhs) const noexcept\n     { return __rhs._M_target->before(*_M_target); }\n \n     bool\n-    operator>=(const type_index& __rhs) const\n+    operator>=(const type_index& __rhs) const noexcept\n     { return !_M_target->before(*__rhs._M_target); }\n \n     size_t"}, {"sha": "911bb92e7f6d0f682e7080ba7943b25790e67495", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/noexcept_move_construct.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2Fnoexcept_move_construct.cc?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+typedef std::pair<int, int>                                 tt1;\n+typedef std::pair<int, double>                              tt2;\n+typedef std::pair<NoexceptMoveConsClass,\n+\t\t  NoexceptMoveConsClass>                    tt3;\n+typedef std::pair<ExceptMoveConsClass, ExceptMoveConsClass> tt4;\n+typedef std::pair<ExceptMoveConsClass, double>              tt5;\n+typedef std::pair<NoexceptMoveConsClass,\n+\t\t  ExceptMoveConsClass>                      tt6;\n+\n+static_assert(std::is_nothrow_move_constructible<tt1>::value, \"Error\");\n+static_assert(std::is_nothrow_move_constructible<tt2>::value, \"Error\");\n+static_assert(std::is_nothrow_move_constructible<tt3>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt4>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt5>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt6>::value, \"Error\");"}, {"sha": "ee8edca55144976eba287d204e189d728562613d", "filename": "libstdc++-v3/testsuite/20_util/pair/noexcept_move_assign.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fnoexcept_move_assign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fnoexcept_move_assign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fnoexcept_move_assign.cc?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+typedef std::pair<int, int>                                     tt1;\n+typedef std::pair<int, double>                                  tt2;\n+typedef std::pair<NoexceptMoveAssignClass,\n+\t\t  NoexceptMoveAssignClass>                      tt3;\n+typedef std::pair<ExceptMoveAssignClass, ExceptMoveAssignClass> tt4;\n+typedef std::pair<ExceptMoveAssignClass, double>                tt5;\n+typedef std::pair<NoexceptMoveAssignClass,\n+\t\t  ExceptMoveAssignClass>                        tt6;\n+\n+static_assert(std::is_nothrow_move_assignable<tt1>::value, \"Error\");\n+static_assert(std::is_nothrow_move_assignable<tt2>::value, \"Error\");\n+static_assert(std::is_nothrow_move_assignable<tt3>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt4>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt5>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_assignable<tt6>::value, \"Error\");"}, {"sha": "e82b6163104b6301416882feec8366a03bf40fdc", "filename": "libstdc++-v3/testsuite/20_util/pair/noexcept_swap.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fnoexcept_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fnoexcept_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fnoexcept_swap.cc?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -0,0 +1,81 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+typedef std::pair<int, int>                                   tt1;\n+typedef std::pair<int, double>                                tt2;\n+typedef std::pair<short, NoexceptMoveAssignClass>             tt4;\n+typedef std::pair<ExceptMoveAssignClass, double>              tt6;\n+typedef std::pair<int, ExceptMoveConsClass>                   tt9;\n+typedef std::pair<ExceptMoveAssignClass, short>               tt10;\n+typedef std::pair<short, NoexceptMoveConsClass>               tt11;\n+typedef std::pair<NoexceptMoveConsClass,\n+\t\t  NoexceptMoveConsClass>                      tt12;\n+typedef std::pair<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t  NoexceptMoveConsNoexceptMoveAssignClass>    tt13;\n+typedef std::pair<ExceptMoveConsNoexceptMoveAssignClass,\n+\t\t  ExceptMoveConsNoexceptMoveAssignClass>      tt14;\n+typedef std::pair<NoexceptMoveConsExceptMoveAssignClass,\n+\t\t  NoexceptMoveConsExceptMoveAssignClass>      tt15;\n+typedef std::pair<ExceptMoveConsExceptMoveAssignClass,\n+\t\t  ExceptMoveConsExceptMoveAssignClass>        tt16;\n+typedef std::pair<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t  double>                                     tt17;\n+typedef std::pair<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t  NoexceptMoveConsNoexceptMoveAssignClass>    tt19;\n+typedef std::pair<NoexceptMoveConsNoexceptMoveAssignClass,\n+\t\t  ExceptMoveConsNoexceptMoveAssignClass>      tt21;\n+\n+static_assert(noexcept(std::declval<tt1&>().swap(std::declval<tt1&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt2&>().swap(std::declval<tt2&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt4&>().swap(std::declval<tt4&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt6&>().swap(std::declval<tt6&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt9&>().swap(std::declval<tt9&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt10&>().swap(std::declval<tt10&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt11&>().swap(std::declval<tt11&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt12&>().swap(std::declval<tt12&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt13&>().swap(std::declval<tt13&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt14&>().swap(std::declval<tt14&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt15&>().swap(std::declval<tt15&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt16&>().swap(std::declval<tt16&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt17&>().swap(std::declval<tt17&>())),\n+\t      \"Error\");\n+static_assert(noexcept(std::declval<tt19&>().swap(std::declval<tt19&>())),\n+\t      \"Error\");\n+static_assert(!noexcept(std::declval<tt21&>().swap(std::declval<tt21&>())),\n+\t      \"Error\");"}, {"sha": "801b5fad62331cc675347a8a874d830489751ae3", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/noexcept_move_construct.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnoexcept_move_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnoexcept_move_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2Fnoexcept_move_construct.cc?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -0,0 +1,59 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+#include <testsuite_tr1.h>\n+\n+using namespace __gnu_test;\n+\n+typedef std::tuple<int>                                      tt1;\n+typedef std::tuple<int, double>                              tt2;\n+typedef std::tuple<short, double, int>                       tt3;\n+typedef std::tuple<short, NoexceptMoveConsClass, double>     tt4;\n+typedef std::tuple<NoexceptMoveConsClass,\n+\t\t   NoexceptMoveConsClass, double>            tt5;\n+typedef std::tuple<NoexceptMoveConsClass,\n+\t\t   NoexceptMoveConsClass,\n+\t\t   NoexceptMoveConsClass>                    tt6;\n+typedef std::tuple<ExceptMoveConsClass>                      tt7;\n+typedef std::tuple<ExceptMoveConsClass, double>              tt8;\n+typedef std::tuple<short, double, ExceptMoveConsClass>       tt9;\n+typedef std::tuple<ExceptMoveConsClass, double,\n+\t\t   ExceptMoveConsClass>                      tt10;\n+typedef std::tuple<NoexceptMoveConsClass,\n+\t\t   ExceptMoveConsClass>                      tt11;\n+typedef std::tuple<int,\n+\t\t   NoexceptMoveConsClass,\n+\t\t   ExceptMoveConsClass>                      tt12;\n+\n+static_assert(std::is_nothrow_move_constructible<tt1>::value, \"Error\");\n+static_assert(std::is_nothrow_move_constructible<tt2>::value, \"Error\");\n+static_assert(std::is_nothrow_move_constructible<tt3>::value, \"Error\");\n+static_assert(std::is_nothrow_move_constructible<tt4>::value, \"Error\");\n+static_assert(std::is_nothrow_move_constructible<tt5>::value, \"Error\");\n+static_assert(std::is_nothrow_move_constructible<tt6>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt7>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt8>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt9>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt10>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt11>::value, \"Error\");\n+static_assert(!std::is_nothrow_move_constructible<tt12>::value, \"Error\");"}, {"sha": "9db39d2b44553800eced870f61498f7292d36fb6", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2789f415a19db97588b65f237de3ea9ba5ba8da2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=2789f415a19db97588b65f237de3ea9ba5ba8da2", "patch": "@@ -51,9 +51,9 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 469 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 637 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 633 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }\n // { dg-warning \"note\" \"\" { target *-*-* } 292 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 212 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 214 }"}]}