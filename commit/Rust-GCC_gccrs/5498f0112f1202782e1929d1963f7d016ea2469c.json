{"sha": "5498f0112f1202782e1929d1963f7d016ea2469c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ5OGYwMTEyZjEyMDI3ODJlMTkyOWQxOTYzZjdkMDE2ZWEyNDY5Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-06-07T16:46:23Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-06-07T16:46:23Z"}, "message": "common.opt (fira-verbose): Use Var.\n\n\t* common.opt (fira-verbose): Use Var.\n\t(fpcc-struct-return): Use Init instead of VarExists.\n\t* defaults.h (DEFAULT_PCC_STRUCT_RETURN): Move definition from\n\ttoplev.c.\n\t* flags.h (flag_signed_char, flag_short_enums,\n\tflag_pcc_struct_return, flag_ira_verbose,\n\tflag_detailed_statistics, flag_remove_unreachable_functions):\n\tRemove.\n\t* toplev.c (flag_detailed_statistics, flag_signed_char,\n\tflag_short_enums, flag_pcc_struct_return, flag_ira_verbose):\n\tRemove.\n\t(DEFAULT_PCC_STRUCT_RETURN): Move definition to defaults.h.\n\t* toplev.h (flag_crossjumping, flag_if_conversion,\n\tflag_if_conversion2, flag_keep_static_consts, flag_peel_loops,\n\tflag_rerun_cse_after_loop, flag_thread_jumps, flag_tracer,\n\tflag_unroll_loops, flag_unroll_all_loops, flag_unswitch_loops,\n\tflag_cprop_registers, time_report, flag_ira_loop_pressure,\n\tflag_ira_coalesce, flag_ira_move_spills,\n\tflag_ira_share_save_slots, flag_ira_share_spill_slots): Remove.\n\nc-family:\n\t* c-common.c (flag_preprocess_only, flag_undef, flag_no_builtin,\n\tflag_no_nonansi_builtin, flag_short_double, flag_short_wchar,\n\tflag_lax_vector_conversions, flag_ms_extensions, flag_no_asm,\n\tflag_signed_bitfields, warn_strict_null_sentinel,\n\tflag_nil_receivers, flag_zero_link, flag_replace_objc_classes,\n\tflag_gen_declaration, flag_no_gnu_keywords,\n\tflag_implement_inlines, flag_implicit_templates,\n\tflag_implicit_inline_templates, flag_optional_diags,\n\tflag_elide_constructors, flag_default_inline, flag_rtti,\n\tflag_conserve_space, flag_access_control, flag_check_new,\n\tflag_new_for_scope, flag_weak, flag_working_directory,\n\tflag_use_cxa_atexit, flag_use_cxa_get_exception_ptr,\n\tflag_enforce_eh_specs, flag_threadsafe_statics,\n\tflag_pretty_templates): Remove.\n\t* c-common.h (flag_preprocess_only, flag_nil_receivers,\n\tflag_objc_exceptions, flag_objc_sjlj_exceptions, flag_zero_link,\n\tflag_replace_objc_classes, flag_undef, flag_no_builtin,\n\tflag_no_nonansi_builtin, flag_short_double, flag_short_wchar,\n\tflag_lax_vector_conversions, flag_ms_extensions, flag_no_asm,\n\tflag_const_strings, flag_signed_bitfields, flag_gen_declaration,\n\tflag_no_gnu_keywords, flag_implement_inlines,\n\tflag_implicit_templates, flag_implicit_inline_templates,\n\tflag_optional_diags, flag_elide_constructors, flag_default_inline,\n\tflag_rtti, flag_conserve_space, flag_access_control,\n\tflag_check_new, flag_new_for_scope, flag_weak,\n\tflag_working_directory, flag_use_cxa_atexit,\n\tflag_use_cxa_get_exception_ptr, flag_enforce_eh_specs,\n\tflag_threadsafe_statics, flag_pretty_templates,\n\twarn_strict_null_sentinel): Remove.\n\t* c.opt (E, Wstrict-null-sentinel, faccess-control, fasm,\n\tfbuiltin, fcheck-new, fconserve-space, felide-constructors,\n\tfenforce-eh-specs, ffor-scope, fgnu-keywords, fimplement-inlines,\n\tfimplicit-inline-templates, fimplicit-templates,\n\tflax-vector-conversions, fms-extensions, fnil-receivers,\n\tfnonansi-builtins, fpretty-templates, freplace-objc-classes,\n\tfrtti, fshort-double, fshort-enums, fshort-wchar,\n\tfsigned-bitfields, fsigned-char, fstats, fthreadsafe-statics,\n\tfunsigned-bitfields, funsigned-char, fuse-cxa-atexit,\n\tfuse-cxa-get-exception-ptr, fweak, fworking-directory, fzero-link,\n\tgen-decls, undef): Use Var.\n\t(fdefault-inline, foptional-diags): Document as doing nothing.\n\t* c-opts.c (c_common_handle_option): Remove cases for options now\n\tusing Var.  Mark ignored options as such.\n\nfortran:\n\t* lang.opt (fshort-enums): Define using Var and VarExists.\n\t* options.c (gfc_handle_option): Don't set flag_short_enums here.\n\nlto:\n\t* lto-lang.c (flag_no_builtin, flag_no_nonansi_builtin): Remove.\n\t(lto_handle_option): Don't set flag_signed_char here.\n\nFrom-SVN: r160384", "tree": {"sha": "a31a33d86ad9aee9da47e034ee713c62de8fd078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31a33d86ad9aee9da47e034ee713c62de8fd078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5498f0112f1202782e1929d1963f7d016ea2469c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5498f0112f1202782e1929d1963f7d016ea2469c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5498f0112f1202782e1929d1963f7d016ea2469c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5498f0112f1202782e1929d1963f7d016ea2469c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f96023b59971790496a7b35077b89ac4d69f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f96023b59971790496a7b35077b89ac4d69f4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f96023b59971790496a7b35077b89ac4d69f4d"}], "stats": {"total": 759, "additions": 132, "deletions": 627}, "files": [{"sha": "8565d929c7de7bf78520f5361cb4b7343e231771", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -1,3 +1,25 @@\n+2010-06-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (fira-verbose): Use Var.\n+\t(fpcc-struct-return): Use Init instead of VarExists.\n+\t* defaults.h (DEFAULT_PCC_STRUCT_RETURN): Move definition from\n+\ttoplev.c.\n+\t* flags.h (flag_signed_char, flag_short_enums,\n+\tflag_pcc_struct_return, flag_ira_verbose,\n+\tflag_detailed_statistics, flag_remove_unreachable_functions):\n+\tRemove.\n+\t* toplev.c (flag_detailed_statistics, flag_signed_char,\n+\tflag_short_enums, flag_pcc_struct_return, flag_ira_verbose):\n+\tRemove.\n+\t(DEFAULT_PCC_STRUCT_RETURN): Move definition to defaults.h.\n+\t* toplev.h (flag_crossjumping, flag_if_conversion,\n+\tflag_if_conversion2, flag_keep_static_consts, flag_peel_loops,\n+\tflag_rerun_cse_after_loop, flag_thread_jumps, flag_tracer,\n+\tflag_unroll_loops, flag_unroll_all_loops, flag_unswitch_loops,\n+\tflag_cprop_registers, time_report, flag_ira_loop_pressure,\n+\tflag_ira_coalesce, flag_ira_move_spills,\n+\tflag_ira_share_save_slots, flag_ira_share_spill_slots): Remove.\n+\n 2010-06-07  Jan Hubicka  <jh@suse.cz>\n \n \t* df-problems.c (df_lr_problem_data): Add lr_bitmaps."}, {"sha": "d0b51567eae5fbe5a248fffece43e8f05a8b1510", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -1,3 +1,49 @@\n+2010-06-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (flag_preprocess_only, flag_undef, flag_no_builtin,\n+\tflag_no_nonansi_builtin, flag_short_double, flag_short_wchar,\n+\tflag_lax_vector_conversions, flag_ms_extensions, flag_no_asm,\n+\tflag_signed_bitfields, warn_strict_null_sentinel,\n+\tflag_nil_receivers, flag_zero_link, flag_replace_objc_classes,\n+\tflag_gen_declaration, flag_no_gnu_keywords,\n+\tflag_implement_inlines, flag_implicit_templates,\n+\tflag_implicit_inline_templates, flag_optional_diags,\n+\tflag_elide_constructors, flag_default_inline, flag_rtti,\n+\tflag_conserve_space, flag_access_control, flag_check_new,\n+\tflag_new_for_scope, flag_weak, flag_working_directory,\n+\tflag_use_cxa_atexit, flag_use_cxa_get_exception_ptr,\n+\tflag_enforce_eh_specs, flag_threadsafe_statics,\n+\tflag_pretty_templates): Remove.\n+\t* c-common.h (flag_preprocess_only, flag_nil_receivers,\n+\tflag_objc_exceptions, flag_objc_sjlj_exceptions, flag_zero_link,\n+\tflag_replace_objc_classes, flag_undef, flag_no_builtin,\n+\tflag_no_nonansi_builtin, flag_short_double, flag_short_wchar,\n+\tflag_lax_vector_conversions, flag_ms_extensions, flag_no_asm,\n+\tflag_const_strings, flag_signed_bitfields, flag_gen_declaration,\n+\tflag_no_gnu_keywords, flag_implement_inlines,\n+\tflag_implicit_templates, flag_implicit_inline_templates,\n+\tflag_optional_diags, flag_elide_constructors, flag_default_inline,\n+\tflag_rtti, flag_conserve_space, flag_access_control,\n+\tflag_check_new, flag_new_for_scope, flag_weak,\n+\tflag_working_directory, flag_use_cxa_atexit,\n+\tflag_use_cxa_get_exception_ptr, flag_enforce_eh_specs,\n+\tflag_threadsafe_statics, flag_pretty_templates,\n+\twarn_strict_null_sentinel): Remove.\n+\t* c.opt (E, Wstrict-null-sentinel, faccess-control, fasm,\n+\tfbuiltin, fcheck-new, fconserve-space, felide-constructors,\n+\tfenforce-eh-specs, ffor-scope, fgnu-keywords, fimplement-inlines,\n+\tfimplicit-inline-templates, fimplicit-templates,\n+\tflax-vector-conversions, fms-extensions, fnil-receivers,\n+\tfnonansi-builtins, fpretty-templates, freplace-objc-classes,\n+\tfrtti, fshort-double, fshort-enums, fshort-wchar,\n+\tfsigned-bitfields, fsigned-char, fstats, fthreadsafe-statics,\n+\tfunsigned-bitfields, funsigned-char, fuse-cxa-atexit,\n+\tfuse-cxa-get-exception-ptr, fweak, fworking-directory, fzero-link,\n+\tgen-decls, undef): Use Var.\n+\t(fdefault-inline, foptional-diags): Document as doing nothing.\n+\t* c-opts.c (c_common_handle_option): Remove cases for options now\n+\tusing Var.  Mark ignored options as such.\n+\n 2010-06-05  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* c-common.c: Moved to here from parent directory. "}, {"sha": "c3fa8e654dc5ec18c758a7dc796aaa1123c56f0f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -169,10 +169,6 @@ tree c_global_trees[CTI_MAX];\n \f\n /* Switches common to the C front ends.  */\n \n-/* Nonzero if preprocessing only.  */\n-\n-int flag_preprocess_only;\n-\n /* Nonzero means don't output line number information.  */\n \n char flag_no_line_commands;\n@@ -203,42 +199,6 @@ const char *pch_file;\n    user's namespace.  */\n int flag_iso;\n \n-/* Nonzero if -undef was given.  It suppresses target built-in macros\n-   and assertions.  */\n-int flag_undef;\n-\n-/* Nonzero means don't recognize the non-ANSI builtin functions.  */\n-\n-int flag_no_builtin;\n-\n-/* Nonzero means don't recognize the non-ANSI builtin functions.\n-   -ansi sets this.  */\n-\n-int flag_no_nonansi_builtin;\n-\n-/* Nonzero means give `double' the same size as `float'.  */\n-\n-int flag_short_double;\n-\n-/* Nonzero means give `wchar_t' the same size as `short'.  */\n-\n-int flag_short_wchar;\n-\n-/* Nonzero means allow implicit conversions between vectors with\n-   differing numbers of subparts and/or differing element types.  */\n-int flag_lax_vector_conversions;\n-\n-/* Nonzero means allow Microsoft extensions without warnings or errors.  */\n-int flag_ms_extensions;\n-\n-/* Nonzero means don't recognize the keyword `asm'.  */\n-\n-int flag_no_asm;\n-\n-/* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n-\n-int flag_signed_bitfields = 1;\n-\n /* Warn about #pragma directives that are not recognized.  */\n \n int warn_unknown_pragmas; /* Tri state variable.  */\n@@ -248,27 +208,6 @@ int warn_unknown_pragmas; /* Tri state variable.  */\n \n int warn_format;\n \n-/* Warn about using __null (as NULL in C++) as sentinel.  For code compiled\n-   with GCC this doesn't matter as __null is guaranteed to have the right\n-   size.  */\n-\n-int warn_strict_null_sentinel;\n-\n-/* Zero means that faster, ...NonNil variants of objc_msgSend...\n-   calls will be used in ObjC; passing nil receivers to such calls\n-   will most likely result in crashes.  */\n-int flag_nil_receivers = 1;\n-\n-/* Nonzero means that code generation will be altered to support\n-   \"zero-link\" execution.  This currently affects ObjC only, but may\n-   affect other languages in the future.  */\n-int flag_zero_link = 0;\n-\n-/* Nonzero means emit an '__OBJC, __image_info' for the current translation\n-   unit.  It will inform the ObjC runtime that class definition(s) herein\n-   contained are to replace one(s) previously loaded.  */\n-int flag_replace_objc_classes = 0;\n-\n /* C/ObjC language option variables.  */\n \n \n@@ -297,11 +236,6 @@ int flag_hosted = 1;\n /* ObjC language option variables.  */\n \n \n-/* Open and close the file for outputting class declarations, if\n-   requested (ObjC).  */\n-\n-int flag_gen_declaration;\n-\n /* Tells the compiler that this is a special run.  Do not perform any\n    compiling, instead we are to test some platform dependent features\n    and output a C header file with appropriate definitions.  */\n@@ -316,119 +250,15 @@ const char *constant_string_class_name;\n /* C++ language option variables.  */\n \n \n-/* Nonzero means don't recognize any extension keywords.  */\n-\n-int flag_no_gnu_keywords;\n-\n-/* Nonzero means do emit exported implementations of functions even if\n-   they can be inlined.  */\n-\n-int flag_implement_inlines = 1;\n-\n-/* Nonzero means that implicit instantiations will be emitted if needed.  */\n-\n-int flag_implicit_templates = 1;\n-\n-/* Nonzero means that implicit instantiations of inline templates will be\n-   emitted if needed, even if instantiations of non-inline templates\n-   aren't.  */\n-\n-int flag_implicit_inline_templates = 1;\n-\n /* Nonzero means generate separate instantiation control files and\n    juggle them at link time.  */\n \n int flag_use_repository;\n \n-/* Nonzero if we want to issue diagnostics that the standard says are not\n-   required.  */\n-\n-int flag_optional_diags = 1;\n-\n-/* Nonzero means we should attempt to elide constructors when possible.  */\n-\n-int flag_elide_constructors = 1;\n-\n-/* Nonzero means that member functions defined in class scope are\n-   inline by default.  */\n-\n-int flag_default_inline = 1;\n-\n-/* Controls whether compiler generates 'type descriptor' that give\n-   run-time type information.  */\n-\n-int flag_rtti = 1;\n-\n-/* Nonzero if we want to conserve space in the .o files.  We do this\n-   by putting uninitialized data and runtime initialized data into\n-   .common instead of .data at the expense of not flagging multiple\n-   definitions.  */\n-\n-int flag_conserve_space;\n-\n-/* Nonzero if we want to obey access control semantics.  */\n-\n-int flag_access_control = 1;\n-\n-/* Nonzero if we want to check the return value of new and avoid calling\n-   constructors if it is a null pointer.  */\n-\n-int flag_check_new;\n-\n /* The C++ dialect being used. C++98 is the default.  */\n \n enum cxx_dialect cxx_dialect = cxx98;\n \n-/* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n-   initialization variables.\n-   0: Old rules, set by -fno-for-scope.\n-   2: New ISO rules, set by -ffor-scope.\n-   1: Try to implement new ISO rules, but with backup compatibility\n-   (and warnings).  This is the default, for now.  */\n-\n-int flag_new_for_scope = 1;\n-\n-/* Nonzero if we want to emit defined symbols with common-like linkage as\n-   weak symbols where possible, in order to conform to C++ semantics.\n-   Otherwise, emit them as local symbols.  */\n-\n-int flag_weak = 1;\n-\n-/* 0 means we want the preprocessor to not emit line directives for\n-   the current working directory.  1 means we want it to do it.  -1\n-   means we should decide depending on whether debugging information\n-   is being emitted or not.  */\n-\n-int flag_working_directory = -1;\n-\n-/* Nonzero to use __cxa_atexit, rather than atexit, to register\n-   destructors for local statics and global objects.  '2' means it has been\n-   set nonzero as a default, not by a command-line flag.  */\n-\n-int flag_use_cxa_atexit = DEFAULT_USE_CXA_ATEXIT;\n-\n-/* Nonzero to use __cxa_get_exception_ptr in C++ exception-handling\n-   code.  '2' means it has not been set explicitly on the command line.  */\n-\n-int flag_use_cxa_get_exception_ptr = 2;\n-\n-/* Nonzero means to implement standard semantics for exception\n-   specifications, calling unexpected if an exception is thrown that\n-   doesn't match the specification.  Zero means to treat them as\n-   assertions and optimize accordingly, but not check them.  */\n-\n-int flag_enforce_eh_specs = 1;\n-\n-/* Nonzero means to generate thread-safe code for initializing local\n-   statics.  */\n-\n-int flag_threadsafe_statics = 1;\n-\n-/* Nonzero if we want to pretty-print template specializations as the\n-   template signature followed by the arguments.  */\n-\n-int flag_pretty_templates = 1;\n-\n /* Maximum template instantiation depth.  This limit exists to limit the\n    time it takes to notice infinite template instantiations; the default\n    value of 1024 is likely to be in the next C++ standard.  */"}, {"sha": "c6701b8bb073d57c84f1a500aac8403e5188c079", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 182, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -480,32 +480,6 @@ extern bool has_c_linkage (const_tree decl);\n \f\n /* Switches common to the C front ends.  */\n \n-/* Nonzero if prepreprocessing only.  */\n-\n-extern int flag_preprocess_only;\n-\n-/* Zero means that faster, ...NonNil variants of objc_msgSend...\n-   calls will be used in ObjC; passing nil receivers to such calls\n-   will most likely result in crashes.  */\n-extern int flag_nil_receivers;\n-\n-/* Nonzero means that we will allow new ObjC exception syntax (@throw,\n-   @try, etc.) in source code.  */\n-extern int flag_objc_exceptions;\n-\n-/* Nonzero means that we generate NeXT setjmp based exceptions.  */\n-extern int flag_objc_sjlj_exceptions;\n-\n-/* Nonzero means that code generation will be altered to support\n-   \"zero-link\" execution.  This currently affects ObjC only, but may\n-   affect other languages in the future.  */\n-extern int flag_zero_link;\n-\n-/* Nonzero means emit an '__OBJC, __image_info' for the current translation\n-   unit.  It will inform the ObjC runtime that class definition(s) herein\n-   contained are to replace one(s) previously loaded.  */\n-extern int flag_replace_objc_classes;\n-\n /* Nonzero means don't output line number information.  */\n \n extern char flag_no_line_commands;\n@@ -538,48 +512,6 @@ extern const char *pch_file;\n \n extern int flag_iso;\n \n-/* Nonzero if -undef was given.  It suppresses target built-in macros\n-   and assertions.  */\n-\n-extern int flag_undef;\n-\n-/* Nonzero means don't recognize the non-ANSI builtin functions.  */\n-\n-extern int flag_no_builtin;\n-\n-/* Nonzero means don't recognize the non-ANSI builtin functions.\n-   -ansi sets this.  */\n-\n-extern int flag_no_nonansi_builtin;\n-\n-/* Nonzero means give `double' the same size as `float'.  */\n-\n-extern int flag_short_double;\n-\n-/* Nonzero means give `wchar_t' the same size as `short'.  */\n-\n-extern int flag_short_wchar;\n-\n-/* Nonzero means allow implicit conversions between vectors with\n-   differing numbers of subparts and/or differing element types.  */\n-extern int flag_lax_vector_conversions;\n-\n-/* Nonzero means allow Microsoft extensions without warnings or errors.  */\n-extern int flag_ms_extensions;\n-\n-/* Nonzero means don't recognize the keyword `asm'.  */\n-\n-extern int flag_no_asm;\n-\n-/* Nonzero means give string constants the type `const char *', as mandated\n-   by the standard.  */\n-\n-extern int flag_const_strings;\n-\n-/* Nonzero means to treat bitfields as signed unless they say `unsigned'.  */\n-\n-extern int flag_signed_bitfields;\n-\n /* Warn about #pragma directives that are not recognized.  */\n \n extern int warn_unknown_pragmas; /* Tri state variable.  */\n@@ -617,11 +549,6 @@ extern int flag_hosted;\n /* ObjC language option variables.  */\n \n \n-/* Open and close the file for outputting class declarations, if\n-   requested (ObjC).  */\n-\n-extern int flag_gen_declaration;\n-\n /* Tells the compiler that this is a special run.  Do not perform any\n    compiling, instead we are to test some platform dependent features\n    and output a C header file with appropriate definitions.  */\n@@ -636,65 +563,11 @@ extern const char *constant_string_class_name;\n /* C++ language option variables.  */\n \n \n-/* Nonzero means don't recognize any extension keywords.  */\n-\n-extern int flag_no_gnu_keywords;\n-\n-/* Nonzero means do emit exported implementations of functions even if\n-   they can be inlined.  */\n-\n-extern int flag_implement_inlines;\n-\n-/* Nonzero means that implicit instantiations will be emitted if needed.  */\n-\n-extern int flag_implicit_templates;\n-\n-/* Nonzero means that implicit instantiations of inline templates will be\n-   emitted if needed, even if instantiations of non-inline templates\n-   aren't.  */\n-\n-extern int flag_implicit_inline_templates;\n-\n /* Nonzero means generate separate instantiation control files and\n    juggle them at link time.  */\n \n extern int flag_use_repository;\n \n-/* Nonzero if we want to issue diagnostics that the standard says are not\n-   required.  */\n-\n-extern int flag_optional_diags;\n-\n-/* Nonzero means we should attempt to elide constructors when possible.  */\n-\n-extern int flag_elide_constructors;\n-\n-/* Nonzero means that member functions defined in class scope are\n-   inline by default.  */\n-\n-extern int flag_default_inline;\n-\n-/* Controls whether compiler generates 'type descriptor' that give\n-   run-time type information.  */\n-\n-extern int flag_rtti;\n-\n-/* Nonzero if we want to conserve space in the .o files.  We do this\n-   by putting uninitialized data and runtime initialized data into\n-   .common instead of .data at the expense of not flagging multiple\n-   definitions.  */\n-\n-extern int flag_conserve_space;\n-\n-/* Nonzero if we want to obey access control semantics.  */\n-\n-extern int flag_access_control;\n-\n-/* Nonzero if we want to check the return value of new and avoid calling\n-   constructors if it is a null pointer.  */\n-\n-extern int flag_check_new;\n-\n /* The supported C++ dialects.  */\n \n enum cxx_dialect {\n@@ -708,61 +581,6 @@ enum cxx_dialect {\n /* The C++ dialect being used. C++98 is the default.  */\n extern enum cxx_dialect cxx_dialect;\n \n-/* Nonzero if we want the new ISO rules for pushing a new scope for `for'\n-   initialization variables.\n-   0: Old rules, set by -fno-for-scope.\n-   2: New ISO rules, set by -ffor-scope.\n-   1: Try to implement new ISO rules, but with backup compatibility\n-   (and warnings).  This is the default, for now.  */\n-\n-extern int flag_new_for_scope;\n-\n-/* Nonzero if we want to emit defined symbols with common-like linkage as\n-   weak symbols where possible, in order to conform to C++ semantics.\n-   Otherwise, emit them as local symbols.  */\n-\n-extern int flag_weak;\n-\n-/* 0 means we want the preprocessor to not emit line directives for\n-   the current working directory.  1 means we want it to do it.  -1\n-   means we should decide depending on whether debugging information\n-   is being emitted or not.  */\n-\n-extern int flag_working_directory;\n-\n-/* Nonzero to use __cxa_atexit, rather than atexit, to register\n-   destructors for local statics and global objects.  */\n-\n-extern int flag_use_cxa_atexit;\n-\n-/* Nonzero to use __cxa_get_exception_ptr in the C++ exception-handling\n-   logic.  */\n-\n-extern int flag_use_cxa_get_exception_ptr;\n-\n-/* Nonzero means to implement standard semantics for exception\n-   specifications, calling unexpected if an exception is thrown that\n-   doesn't match the specification.  Zero means to treat them as\n-   assertions and optimize accordingly, but not check them.  */\n-\n-extern int flag_enforce_eh_specs;\n-\n-/* Nonzero (the default) means to generate thread-safe code for\n-   initializing local statics.  */\n-\n-extern int flag_threadsafe_statics;\n-\n-/* Nonzero if we want to pretty-print template specializations as the\n-   template signature followed by the arguments.  */\n-\n-extern int flag_pretty_templates;\n-\n-/* Warn about using __null (as NULL in C++) as sentinel.  For code compiled\n-   with GCC this doesn't matter as __null is guaranteed to have the right\n-   size.  */\n-\n-extern int warn_strict_null_sentinel;\n-\n /* Maximum template instantiation depth.  This limit is rather\n    arbitrary, but it exists to limit the time it takes to notice\n    infinite template instantiations.  */"}, {"sha": "a48dea1e68ddf113ec332c1f2f81031c6ebd7bfc", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 2, "deletions": 150, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -395,10 +395,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       defer_opt (code, arg);\n       break;\n \n-    case OPT_E:\n-      flag_preprocess_only = 1;\n-      break;\n-\n     case OPT_H:\n       cpp_opts->print_include_names = 1;\n       break;\n@@ -462,10 +458,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       flag_no_line_commands = 1;\n       break;\n \n-    case OPT_fworking_directory:\n-      flag_working_directory = value;\n-      break;\n-\n     case OPT_U:\n       defer_opt (code, arg);\n       break;\n@@ -613,10 +605,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       warn_return_type = value;\n       break;\n \n-    case OPT_Wstrict_null_sentinel:\n-      warn_strict_null_sentinel = value;\n-      break;\n-\n     case OPT_Wtraditional:\n       cpp_opts->warn_traditional = value;\n       break;\n@@ -692,18 +680,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       warning (0, \"switch %qs is no longer supported\", option->opt_text);\n       break;\n \n-    case OPT_faccess_control:\n-      flag_access_control = value;\n-      break;\n-\n-    case OPT_fasm:\n-      flag_no_asm = !value;\n-      break;\n-\n-    case OPT_fbuiltin:\n-      flag_no_builtin = !value;\n-      break;\n-\n     case OPT_fbuiltin_:\n       if (value)\n \tresult = 0;\n@@ -727,70 +703,18 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       flag_no_builtin = !value;\n       break;\n \n-    case OPT_fshort_double:\n-      flag_short_double = value;\n-      break;\n-\n-    case OPT_fshort_enums:\n-      flag_short_enums = value;\n-      break;\n-\n-    case OPT_fshort_wchar:\n-      flag_short_wchar = value;\n-      break;\n-\n-    case OPT_fsigned_bitfields:\n-      flag_signed_bitfields = value;\n-      break;\n-\n-    case OPT_fsigned_char:\n-      flag_signed_char = value;\n-      break;\n-\n-    case OPT_funsigned_bitfields:\n-      flag_signed_bitfields = !value;\n-      break;\n-\n-    case OPT_funsigned_char:\n-      flag_signed_char = !value;\n-      break;\n-\n-    case OPT_fcheck_new:\n-      flag_check_new = value;\n-      break;\n-\n-    case OPT_fconserve_space:\n-      flag_conserve_space = value;\n-      break;\n-\n     case OPT_fconstant_string_class_:\n       constant_string_class_name = arg;\n       break;\n \n     case OPT_fdefault_inline:\n-      flag_default_inline = value;\n-      break;\n-\n-    case OPT_felide_constructors:\n-      flag_elide_constructors = value;\n-      break;\n-\n-    case OPT_fenforce_eh_specs:\n-      flag_enforce_eh_specs = value;\n+      /* Ignore.  */\n       break;\n \n     case OPT_fextended_identifiers:\n       cpp_opts->extended_identifiers = value;\n       break;\n \n-    case OPT_ffor_scope:\n-      flag_new_for_scope = value;\n-      break;\n-\n-    case OPT_fgnu_keywords:\n-      flag_no_gnu_keywords = !value;\n-      break;\n-\n     case OPT_fgnu_runtime:\n       flag_next_runtime = !value;\n       break;\n@@ -800,44 +724,16 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       flag_exceptions = value;\n       break;\n \n-    case OPT_fimplement_inlines:\n-      flag_implement_inlines = value;\n-      break;\n-\n-    case OPT_fimplicit_inline_templates:\n-      flag_implicit_inline_templates = value;\n-      break;\n-\n-    case OPT_fimplicit_templates:\n-      flag_implicit_templates = value;\n-      break;\n-\n-    case OPT_flax_vector_conversions:\n-      flag_lax_vector_conversions = value;\n-      break;\n-\n-    case OPT_fms_extensions:\n-      flag_ms_extensions = value;\n-      break;\n-\n     case OPT_fnext_runtime:\n       flag_next_runtime = value;\n       break;\n \n-    case OPT_fnil_receivers:\n-      flag_nil_receivers = value;\n-      break;\n-\n-    case OPT_fnonansi_builtins:\n-      flag_no_nonansi_builtin = !value;\n-      break;\n-\n     case OPT_foperator_names:\n       cpp_opts->operator_names = value;\n       break;\n \n     case OPT_foptional_diags:\n-      flag_optional_diags = value;\n+      /* Ignore.  */\n       break;\n \n     case OPT_fpch_deps:\n@@ -857,28 +753,16 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->preprocessed = value;\n       break;\n \n-    case OPT_freplace_objc_classes:\n-      flag_replace_objc_classes = value;\n-      break;\n-\n     case OPT_frepo:\n       flag_use_repository = value;\n       if (value)\n \tflag_implicit_templates = 0;\n       break;\n \n-    case OPT_frtti:\n-      flag_rtti = value;\n-      break;\n-\n     case OPT_fshow_column:\n       cpp_opts->show_column = value;\n       break;\n \n-    case OPT_fstats:\n-      flag_detailed_statistics = value;\n-      break;\n-\n     case OPT_ftabstop_:\n       /* It is documented that we silently ignore silly values.  */\n       if (value >= 1 && value <= 100)\n@@ -903,38 +787,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       max_tinst_depth = value;\n       break;\n \n-    case OPT_fuse_cxa_atexit:\n-      flag_use_cxa_atexit = value;\n-      break;\n-\n-    case OPT_fuse_cxa_get_exception_ptr:\n-      flag_use_cxa_get_exception_ptr = value;\n-      break;\n-\n     case OPT_fvisibility_inlines_hidden:\n       visibility_options.inlines_hidden = value;\n       break;\n \n-    case OPT_fweak:\n-      flag_weak = value;\n-      break;\n-\n-    case OPT_fthreadsafe_statics:\n-      flag_threadsafe_statics = value;\n-      break;\n-\n-    case OPT_fpretty_templates:\n-      flag_pretty_templates = value;\n-      break;\n-\n-    case OPT_fzero_link:\n-      flag_zero_link = value;\n-      break;\n-\n-    case OPT_gen_decls:\n-      flag_gen_declaration = 1;\n-      break;\n-\n     case OPT_femit_struct_debug_baseonly:\n       set_struct_debug_option (\"base\");\n       break;\n@@ -1094,10 +950,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->traditional = 1;\n       break;\n \n-    case OPT_undef:\n-      flag_undef = 1;\n-      break;\n-\n     case OPT_v:\n       verbose = true;\n       break;"}, {"sha": "5122e1a80ef28f76cee776c192edbf6612d3f916", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -54,7 +54,7 @@ C ObjC C++ ObjC++ Joined Separate\n -D<macro>[=<val>]\tDefine a <macro> with <val> as its value.  If just <macro> is given, <val> is taken to be 1\n \n E\n-C ObjC C++ ObjC++ Undocumented\n+C ObjC C++ ObjC++ Undocumented Var(flag_preprocess_only)\n \n F\n C ObjC C++ ObjC++ Joined Separate\n@@ -438,7 +438,7 @@ C++ ObjC++ Var(warn_sign_promo) Warning\n Warn when overload promotes from unsigned to signed\n \n Wstrict-null-sentinel\n-C++ ObjC++ Warning\n+C++ ObjC++ Warning Var(warn_strict_null_sentinel)\n Warn about uncasted NULL used as sentinel\n \n Wstrict-prototypes\n@@ -526,7 +526,7 @@ C ObjC C++ ObjC++ Joined\n ; Documented in common.opt.  FIXME - what about -dI, -dD, -dN and -dD?\n \n faccess-control\n-C++ ObjC++\n+C++ ObjC++ Var(flag_access_control) Init(1)\n Enforce class member access control semantics\n \n fall-virtual\n@@ -537,26 +537,26 @@ C++ ObjC++\n Change when template instances are emitted\n \n fasm\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(flag_no_asm, 0)\n Recognize the \\\"asm\\\" keyword\n \n fbuiltin\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(flag_no_builtin, 0)\n Recognize built-in functions\n \n fbuiltin-\n C ObjC C++ ObjC++ Joined\n \n fcheck-new\n-C++ ObjC++\n+C++ ObjC++ Var(flag_check_new)\n Check the return value of new\n \n fcond-mismatch\n C ObjC C++ ObjC++\n Allow the arguments of the '?' operator to have different types\n \n fconserve-space\n-C++ ObjC++\n+C++ ObjC++ Var(flag_conserve_space)\n Reduce the size of object files\n \n fconstant-string-class=\n@@ -569,7 +569,7 @@ C++ ObjC++ Var(flag_deduce_init_list) Init(1)\n \n fdefault-inline\n C++ ObjC++\n-Inline member functions by default\n+Does nothing.  Preserved for backward compatibility.\n \n fdirectives-only\n C ObjC C++ ObjC++\n@@ -580,10 +580,10 @@ C ObjC C++ ObjC++\n Permit '$' as an identifier character\n \n felide-constructors\n-C++ ObjC++\n+C++ ObjC++ Var(flag_elide_constructors) Init(1)\n \n fenforce-eh-specs\n-C++ ObjC++\n+C++ ObjC++ Var(flag_enforce_eh_specs) Init(1)\n Generate code to check exception specifications\n \n fenum-int-equiv\n@@ -606,15 +606,15 @@ fexternal-templates\n C++ ObjC++\n \n ffor-scope\n-C++ ObjC++\n+C++ ObjC++ Var(flag_new_for_scope) Init(1)\n Scope of for-init-statement variables is local to the loop\n \n ffreestanding\n C ObjC C++ ObjC++\n Do not assume that standard C libraries and \\\"main\\\" exist\n \n fgnu-keywords\n-C++ ObjC++\n+C++ ObjC++ Var(flag_no_gnu_keywords, 0)\n Recognize GNU-defined keywords\n \n fgnu-runtime\n@@ -643,15 +643,15 @@ C++ ObjC++\n Enable support for huge objects\n \n fimplement-inlines\n-C++ ObjC++\n+C++ ObjC++ Var(flag_implement_inlines) Init(1)\n Export functions even if they can be inlined\n \n fimplicit-inline-templates\n-C++ ObjC++\n+C++ ObjC++ Var(flag_implicit_inline_templates) Init(1)\n Emit implicit instantiations of inline templates\n \n fimplicit-templates\n-C++ ObjC++\n+C++ ObjC++ Var(flag_implicit_templates) Init(1)\n Emit implicit instantiations of templates\n \n ffriend-injection\n@@ -662,11 +662,11 @@ flabels-ok\n C++ ObjC++\n \n flax-vector-conversions\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(flag_lax_vector_conversions)\n Allow implicit conversions between vectors with differing numbers of subparts and/or differing element types.\n \n fms-extensions\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(flag_ms_extensions)\n Don't warn about uses of Microsoft extensions\n \n fname-mangling-version-\n@@ -680,11 +680,11 @@ ObjC ObjC++\n Generate code for NeXT (Apple Mac OS X) runtime environment\n \n fnil-receivers\n-ObjC ObjC++\n+ObjC ObjC++ Var(flag_nil_receivers) Init(1)\n Assume that receivers of Objective-C messages may be nil\n \n fnonansi-builtins\n-C++ ObjC++\n+C++ ObjC++ Var(flag_no_nonansi_builtin, 0)\n \n fnonnull-objects\n C++ ObjC++\n@@ -728,7 +728,7 @@ Recognize C++ keywords like \\\"compl\\\" and \\\"xor\\\"\n \n foptional-diags\n C++ ObjC++\n-Enable optional diagnostics\n+Does nothing.  Preserved for backward compatibility.\n \n fpch-deps\n C ObjC C++ ObjC++\n@@ -746,46 +746,46 @@ C ObjC C++ ObjC++\n Treat the input file as already preprocessed\n \n fpretty-templates\n-C++ ObjC++\n+C++ ObjC++ Var(flag_pretty_templates) Init(1)\n -fno-pretty-templates Do not pretty-print template specializations as the template signature followed by the arguments\n \n freplace-objc-classes\n-ObjC ObjC++\n+ObjC ObjC++ Var(flag_replace_objc_classes)\n Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime\n \n frepo\n C++ ObjC++\n Enable automatic template instantiation\n \n frtti\n-C++ ObjC++ Optimization\n+C++ ObjC++ Optimization Var(flag_rtti) Init(1)\n Generate run time type descriptor information\n \n fshort-double\n-C ObjC C++ ObjC++ Optimization\n+C ObjC C++ ObjC++ Optimization Var(flag_short_double)\n Use the same size for double as for float\n \n fshort-enums\n-C ObjC C++ ObjC++ Optimization\n+C ObjC C++ ObjC++ Optimization Var(flag_short_enums)\n Use the narrowest integer type possible for enumeration types\n \n fshort-wchar\n-C ObjC C++ ObjC++ Optimization\n+C ObjC C++ ObjC++ Optimization Var(flag_short_wchar)\n Force the underlying type for \\\"wchar_t\\\" to be \\\"unsigned short\\\"\n \n fsigned-bitfields\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(flag_signed_bitfields) Init(1)\n When \\\"signed\\\" or \\\"unsigned\\\" is not given make the bitfield signed\n \n fsigned-char\n-C ObjC C++ ObjC++ LTO\n+C ObjC C++ ObjC++ LTO Var(flag_signed_char)\n Make \\\"char\\\" signed by default\n \n fsquangle\n C++ ObjC++\n \n fstats\n-C++ ObjC++\n+C++ ObjC++ Var(flag_detailed_statistics)\n Display statistics accumulated during compilation\n \n fstrict-enums\n@@ -810,23 +810,23 @@ fthis-is-variable\n C++ ObjC++\n \n fthreadsafe-statics\n-C++ ObjC++ Optimization\n+C++ ObjC++ Optimization Var(flag_threadsafe_statics) Init(1)\n -fno-threadsafe-statics\tDo not generate thread-safe code for initializing local statics\n \n funsigned-bitfields\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(flag_signed_bitfields, 0) VarExists\n When \\\"signed\\\" or \\\"unsigned\\\" is not given make the bitfield unsigned\n \n funsigned-char\n-C ObjC C++ ObjC++ LTO\n+C ObjC C++ ObjC++ LTO Var(flag_signed_char, 0) VarExists\n Make \\\"char\\\" unsigned by default\n \n fuse-cxa-atexit\n-C++ ObjC++\n+C++ ObjC++ Var(flag_use_cxa_atexit) Init(DEFAULT_USE_CXA_ATEXIT)\n Use __cxa_atexit to register destructors\n \n fuse-cxa-get-exception-ptr\n-C++ ObjC++\n+C++ ObjC++ Var(flag_use_cxa_get_exception_ptr) Init(2)\n Use __cxa_get_exception_ptr in exception handling\n \n fvisibility-inlines-hidden\n@@ -846,27 +846,27 @@ C++ ObjC++\n Implement vtables using thunks\n \n fweak\n-C++ ObjC++\n+C++ ObjC++ Var(flag_weak) Init(1)\n Emit common-like symbols as weak symbols\n \n fwide-exec-charset=\n C ObjC C++ ObjC++ Joined RejectNegative\n -fwide-exec-charset=<cset>\tConvert all wide strings and character constants to character set <cset>\n \n fworking-directory\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(flag_working_directory) Init(-1)\n Generate a #line directive pointing at the current working directory\n \n fxref\n C++ ObjC++\n Emit cross referencing information\n \n fzero-link\n-ObjC ObjC++\n+ObjC ObjC++ Var(flag_zero_link)\n Generate lazy class lookup (via objc_getClass()) for use in Zero-Link mode\n \n gen-decls\n-ObjC ObjC++\n+ObjC ObjC++ Var(flag_gen_declaration)\n Dump declarations to a .decl file\n \n femit-struct-debug-baseonly\n@@ -1046,7 +1046,7 @@ C ObjC C++ ObjC++\n -trigraphs\tSupport ISO C trigraphs\n \n undef\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Var(flag_undef)\n Do not predefine system-specific and GCC-specific macros\n \n v"}, {"sha": "a7b0e7371074165f06f0778351cd2067c52663a7", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -757,7 +757,7 @@ Common Report Var(flag_ira_share_spill_slots) Init(1)\n Share stack slots for spilled pseudo-registers.\n \n fira-verbose=\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined UInteger Var(flag_ira_verbose) Init(5)\n -fira-verbose=<number>\tControl IRA's level of diagnostic messages.\n \n fivopts\n@@ -893,7 +893,7 @@ Common RejectNegative Joined UInteger Optimization\n -fpack-struct=<number>\tSet initial maximum structure member alignment\n \n fpcc-struct-return\n-Common Report Var(flag_pcc_struct_return,1) VarExists\n+Common Report Var(flag_pcc_struct_return,1) Init(DEFAULT_PCC_STRUCT_RETURN)\n Return small aggregates in memory, not registers\n \n fpeel-loops"}, {"sha": "bbfb52fe14c81d36ed47b09de5f06b2511f937a1", "filename": "gcc/defaults.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -1169,6 +1169,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define MAX_FIXED_MODE_SIZE GET_MODE_BITSIZE (DImode)\n #endif\n \n+/* Nonzero if structures and unions should be returned in memory.\n+\n+   This should only be defined if compatibility with another compiler or\n+   with an ABI is needed, because it results in slower code.  */\n+\n+#ifndef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n+#endif\n \n #ifdef GCC_INSN_FLAGS_H\n /* Dependent default target macro definitions"}, {"sha": "5e87c09788201b896527ef5e4126c0dbadb8d85b", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -150,19 +150,6 @@ extern int flag_print_asm_name;\n \f\n /* Now the symbols that are set with `-f' switches.  */\n \n-/* Nonzero means `char' should be signed.  */\n-\n-extern int flag_signed_char;\n-\n-/* Nonzero means give an enum type only as many bytes as it needs.  A value\n-   of 2 means it has not yet been initialized.  */\n-\n-extern int flag_short_enums;\n-\n-/* Nonzero for -fpcc-struct-return: return values the same way PCC does.  */\n-\n-extern int flag_pcc_struct_return;\n-\n /* 0 means straightforward implementation of complex divide acceptable.\n    1 means wide ranges of inputs must work for complex divide.\n    2 means C99-like requirements for complex multiply and divide.  */\n@@ -234,8 +221,6 @@ enum ira_region\n \n extern enum ira_region flag_ira_region;\n \n-extern unsigned int flag_ira_verbose;\n-\n /* The options for excess precision.  */\n enum excess_precision\n {\n@@ -291,14 +276,6 @@ enum graph_dump_types\n };\n extern enum graph_dump_types graph_dump_format;\n \n-/* Nonzero means to collect statistics which might be expensive\n-   and to print them when we are done.  */\n-extern int flag_detailed_statistics;\n-\n-/* Nonzero means that we defer emitting functions until they are actually\n-   used.  */\n-extern int flag_remove_unreachable_functions;\n-\n /* Nonzero if we should track variables.  */\n extern int flag_var_tracking;\n "}, {"sha": "4194ee1a4e3780890267b046acebff257ac31f85", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -1,3 +1,8 @@\n+2010-06-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.opt (fshort-enums): Define using Var and VarExists.\n+\t* options.c (gfc_handle_option): Don't set flag_short_enums here.\n+\n 2010-06-05  Paul Thomas  <pault@gcc.gnu.org>\n \t    Janus Weil  <janus@gcc.gnu.org>\n "}, {"sha": "eb286f6cabe8a0b2cf2e9f2cfa8e8ba8bda3fb0d", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -369,7 +369,7 @@ Fortran\n Append a second underscore if the name already contains an underscore\n \n fshort-enums\n-Fortran\n+Fortran Var(flag_short_enums) VarExists\n ; Documented in C\n \n fsign-zero"}, {"sha": "2e4f5c190d683ce4a7a0870cb0028780707b9ee2", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -902,7 +902,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_fshort_enums:\n-      flag_short_enums = 1;\n+      /* Handled in language-independent code.  */\n       break;\n \n     case OPT_fconvert_little_endian:"}, {"sha": "bfa31dcb338ad8268e2c4c8a36504ea4bb6397f0", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -1,3 +1,8 @@\n+2010-06-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lto-lang.c (flag_no_builtin, flag_no_nonansi_builtin): Remove.\n+\t(lto_handle_option): Don't set flag_signed_char here.\n+\n 2010-06-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/41584"}, {"sha": "636b62aec585a8ac61f8e78079750ccdf41d0fb6", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -1,5 +1,5 @@\n /* Language-dependent hooks for LTO.\n-   Copyright 2009 Free Software Foundation, Inc.\n+   Copyright 2009, 2010 Free Software Foundation, Inc.\n    Contributed by CodeSourcery, Inc.\n \n This file is part of GCC.\n@@ -154,8 +154,6 @@ static GTY(()) tree uintmax_type_node;\n static GTY(()) tree signed_size_type_node;\n \n /* Flags needed to process builtins.def.  */\n-int flag_no_builtin;\n-int flag_no_nonansi_builtin;\n int flag_isoc94;\n int flag_isoc99;\n \n@@ -632,14 +630,6 @@ lto_handle_option (size_t scode, const char *arg,\n       warn_psabi = value;\n       break;\n \n-    case OPT_fsigned_char:\n-      flag_signed_char = value;\n-      break;\n-\n-    case OPT_funsigned_char:\n-      flag_signed_char = !value;\n-      break;\n-\n     default:\n       break;\n     }"}, {"sha": "e25bad0c2f74e7343312c4c5c9ec7dabdf6e3479", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -208,10 +208,6 @@ tree current_function_decl;\n    if none.  */\n const char * current_function_func_begin_label;\n \n-/* Nonzero means to collect statistics which might be expensive\n-   and to print them when we are done.  */\n-int flag_detailed_statistics = 0;\n-\n /* A random sequence of characters, unless overridden by user.  */\n static const char *flag_random_seed;\n \n@@ -222,28 +218,6 @@ unsigned local_tick;\n \n /* -f flags.  */\n \n-/* Nonzero means `char' should be signed.  */\n-\n-int flag_signed_char;\n-\n-/* Nonzero means give an enum type only as many bytes as it needs.  A value\n-   of 2 means it has not yet been initialized.  */\n-\n-int flag_short_enums;\n-\n-/* Nonzero if structures and unions should be returned in memory.\n-\n-   This should only be defined if compatibility with another compiler or\n-   with an ABI is needed, because it results in slower code.  */\n-\n-#ifndef DEFAULT_PCC_STRUCT_RETURN\n-#define DEFAULT_PCC_STRUCT_RETURN 1\n-#endif\n-\n-/* Nonzero for -fpcc-struct-return: return values the same way PCC does.  */\n-\n-int flag_pcc_struct_return = DEFAULT_PCC_STRUCT_RETURN;\n-\n /* 0 means straightforward implementation of complex divide acceptable.\n    1 means wide ranges of inputs must work for complex divide.\n    2 means C99-like requirements for complex multiply and divide.  */\n@@ -281,10 +255,6 @@ enum tls_model flag_tls_default = TLS_MODEL_GLOBAL_DYNAMIC;\n enum ira_algorithm flag_ira_algorithm = IRA_ALGORITHM_CB;\n enum ira_region flag_ira_region = IRA_REGION_MIXED;\n \n-/* Set the default value for -fira-verbose.  */\n-\n-unsigned int flag_ira_verbose = 5;\n-\n /* Set the default for excess precision.  */\n \n enum excess_precision flag_excess_precision_cmdline = EXCESS_PRECISION_DEFAULT;"}, {"sha": "0afe33f1d35496ffd1f587edbede80e8c4203bfd", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5498f0112f1202782e1929d1963f7d016ea2469c/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=5498f0112f1202782e1929d1963f7d016ea2469c", "patch": "@@ -94,25 +94,7 @@ extern bool exit_after_options;\n extern bool user_defined_section_attribute;\n \n /* See toplev.c.  */\n-extern int flag_crossjumping;\n-extern int flag_if_conversion;\n-extern int flag_if_conversion2;\n-extern int flag_keep_static_consts;\n-extern int flag_peel_loops;\n extern int flag_rerun_cse_after_global_opts;\n-extern int flag_rerun_cse_after_loop;\n-extern int flag_thread_jumps;\n-extern int flag_tracer;\n-extern int flag_unroll_loops;\n-extern int flag_unroll_all_loops;\n-extern int flag_unswitch_loops;\n-extern int flag_cprop_registers;\n-extern int time_report;\n-extern int flag_ira_loop_pressure;\n-extern int flag_ira_coalesce;\n-extern int flag_ira_move_spills;\n-extern int flag_ira_share_save_slots;\n-extern int flag_ira_share_spill_slots;\n \n /* Things to do with target switches.  */\n extern void print_version (FILE *, const char *);"}]}