{"sha": "8f1032c16a6e30d789be20320b1f8c443833fadd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYxMDMyYzE2YTZlMzBkNzg5YmUyMDMyMGIxZjhjNDQzODMzZmFkZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-01-03T21:31:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-01-03T21:31:39Z"}, "message": "configure.ac: Check for sys/ipc.h and sys/sem.h.\n\n\t* configure.ac: Check for sys/ipc.h and sys/sem.h.\n\t* config.h.in: Regenerated.\n\t* configure: Likewise.\n\t* testsuite/testsuite_hooks.cc (_GLIBCXX_SYSV_SEM): Conditionally\n\tdefine.\n\t(sys/types.h): Include.\n\t(sys/ipc.h): Likewise.\n\t(sys/sem.h): Likewise.\n\t(__gnu_test::semun): New type.\n\t(__gnu_test::semaphore::sempaphore): New function.\n\t(__gnu_test::semaphore::~semaphore): Likewise.\n\t(__gnu_test::semaphore::wait): Likewise.\n\t(__gnu_test::semaphore::signal): Likewise.\n\t* testsuite/testsuite_hooks.h (__gnu_test::semaphore): New class.\n\t* testsuite/27_io/basic_filebuf/close/char/4789.cc: Use\n\tsemaphores, not sleep.\n\t* testsuite/27_io/basic_filebuf/close/char/9964.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/imbue/char/13171-2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/imbue/char/13582-2.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_filebuf/open/char/9507.cc: Likewise.\n\t* testsuite/27_io/basic_filebuf/underflow/char/10097.cc: Likewise.\n\t* testsuite/27_io/objects/char/7.cc: Likewise.\n\t* testsuite/27_io/objects/char/9661-1.cc: Likewise.\n\t* testsuite/27_io/objects/wchar_t/7.cc: Likewise.\n\t* testsuite/27_io/objects/wchar_t/9961-1.cc: Likewise.\n\nFrom-SVN: r92865", "tree": {"sha": "3aca3089ec0badd4d6d9996913625adab37fd01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aca3089ec0badd4d6d9996913625adab37fd01b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f1032c16a6e30d789be20320b1f8c443833fadd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1032c16a6e30d789be20320b1f8c443833fadd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f1032c16a6e30d789be20320b1f8c443833fadd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f1032c16a6e30d789be20320b1f8c443833fadd/comments", "author": null, "committer": null, "parents": [{"sha": "e6abef61404d0a466798cbcafc0d1a30e08628ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6abef61404d0a466798cbcafc0d1a30e08628ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6abef61404d0a466798cbcafc0d1a30e08628ab"}], "stats": {"total": 246, "additions": 208, "deletions": 38}, "files": [{"sha": "77a917b78ed76e6b63b70925c37cd2578e8f652a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -1,3 +1,33 @@\n+2005-01-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* configure.ac: Check for sys/ipc.h and sys/sem.h. \n+\t* config.h.in: Regenerated.\n+\t* configure: Likewise.\n+\t* testsuite/testsuite_hooks.cc (_GLIBCXX_SYSV_SEM): Conditionally\n+\tdefine.\n+\t(sys/types.h): Include.\n+\t(sys/ipc.h): Likewise.\n+\t(sys/sem.h): Likewise.\n+\t(__gnu_test::semun): New type.\n+\t(__gnu_test::semaphore::sempaphore): New function.\n+\t(__gnu_test::semaphore::~semaphore): Likewise.\n+\t(__gnu_test::semaphore::wait): Likewise.\n+\t(__gnu_test::semaphore::signal): Likewise.\n+\t* testsuite/testsuite_hooks.h (__gnu_test::semaphore): New class.\n+\t* testsuite/27_io/basic_filebuf/close/char/4789.cc: Use\n+\tsemaphores, not sleep.\n+\t* testsuite/27_io/basic_filebuf/close/char/9964.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/imbue/char/13171-2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/imbue/char/13582-2.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_filebuf/open/char/9507.cc: Likewise.\n+\t* testsuite/27_io/basic_filebuf/underflow/char/10097.cc: Likewise.\n+\t* testsuite/27_io/objects/char/7.cc: Likewise.\n+\t* testsuite/27_io/objects/char/9661-1.cc: Likewise.\n+\t* testsuite/27_io/objects/wchar_t/7.cc: Likewise.\n+\t* testsuite/27_io/objects/wchar_t/9961-1.cc: Likewise.\n+\n 2005-01-03  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/istream.tcc (ignore(streamsize), ignore(streamsize,"}, {"sha": "86c110648726d122b6bbe18f17b1727ba6e10f90", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -506,6 +506,9 @@\n /* Define to 1 if you have the <sys/ioctl.h> header file. */\n #undef HAVE_SYS_IOCTL_H\n \n+/* Define to 1 if you have the <sys/ipc.h> header file. */\n+#undef HAVE_SYS_IPC_H\n+\n /* Define to 1 if you have the <sys/isa_defs.h> header file. */\n #undef HAVE_SYS_ISA_DEFS_H\n \n@@ -518,6 +521,9 @@\n /* Define to 1 if you have the <sys/resource.h> header file. */\n #undef HAVE_SYS_RESOURCE_H\n \n+/* Define to 1 if you have the <sys/sem.h> header file. */\n+#undef HAVE_SYS_SEM_H\n+\n /* Define to 1 if you have the <sys/stat.h> header file. */\n #undef HAVE_SYS_STAT_H\n "}, {"sha": "77c8d2c4fa05c15f631380e4cba249c24bc11f62", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -7927,9 +7927,11 @@ if $GLIBCXX_IS_NATIVE; then\n \n \n \n+\n+\n for ac_header in nan.h ieeefp.h endian.h sys/isa_defs.h machine/endian.h \\\n   machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h gconv.h \\\n-  sys/types.h\n+  sys/types.h sys/ipc.h sys/sem.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then"}, {"sha": "5d0a54f9c4cf2b2f8f4c7a80054025fdb00b999f", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -117,7 +117,7 @@ if $GLIBCXX_IS_NATIVE; then\n   # Check for available headers.\n   AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h machine/endian.h \\\n   machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h gconv.h \\\n-  sys/types.h])\n+  sys/types.h sys/ipc.h sys/sem.h])\n \n   GLIBCXX_CHECK_COMPILER_FEATURES\n   GLIBCXX_CHECK_LINKER_FEATURES"}, {"sha": "1d251174099a3cd9129d79dfbac6dd252f907b27", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/4879.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F4879.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -41,6 +41,8 @@ test_04()\n \n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_fifo1\";\n+  semaphore s1, s2;\n+\n   signal(SIGPIPE, SIG_IGN);\n   \n   unlink(name);\n@@ -60,13 +62,15 @@ test_04()\n   else if (fval == 0)\n     {\n       std::ifstream ifs(name);\n-      sleep(1);\n+      s1.wait ();\n       ifs.close();\n+      s2.signal ();\n       exit(0);\n     }\n \n   std::ofstream ofs(name);\n-  sleep(2);\n+  s1.signal ();\n+  s2.wait ();\n   ofs.put('t');\n \n   /*"}, {"sha": "57f6de9c5ee61b7d8355884013198d101cffac74", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/close/char/9964.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fclose%2Fchar%2F9964.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -37,6 +37,7 @@ void test_07()\n   using namespace std;\n   using namespace __gnu_test;\n   bool test __attribute__((unused)) = true;\n+  semaphore s1, s2;\n \n   const char* name = \"tmp_fifo3\";\n \n@@ -52,18 +53,18 @@ void test_07()\n     {\n       filebuf fbin;\n       fbin.open(name, ios_base::in);\n-      sleep(2);\n+      s1.wait ();\n       fbin.close();\n+      s2.signal ();\n       exit(0);\n     }\n   \n   filebuf fb;\n-  sleep(1);\n   filebuf* ret = fb.open(name, ios_base::in | ios_base::out);\n   VERIFY( ret != NULL );\n   VERIFY( fb.is_open() );\n-\n-  sleep(3);\n+  s1.signal ();\n+  s2.wait ();\n   fb.sputc('a');\n \n   ret = fb.close();"}, {"sha": "ec2d321bbf5d023265da79b0533dda8f1ad28d35", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/char/13171-2.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13171-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13171-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13171-2.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -39,6 +39,7 @@ void test01()\n   const char* name = \"tmp_fifo_13171-2\";\n   unlink(name);\n   try_mkfifo(name, S_IRWXU);\n+  semaphore s1, s2;\n   \n   int child = fork();\n   if (child == 0)\n@@ -47,20 +48,22 @@ void test01()\n       fb.open(name, ios_base::out);\n       fb.sputc('S');\n       fb.pubsync();\n-      sleep(2);\n+      s1.signal ();\n+      s2.wait ();\n       fb.close();\n       exit(0);\n     }\n \n   filebuf fb;\n   fb.pubimbue(loc_fr);\n   fb.open(name, ios_base::in);\n-  sleep(1);\n+  s1.wait ();\n   VERIFY( fb.is_open() );\n   fb.pubimbue(loc_en);\n   filebuf::int_type c = fb.sgetc();\n   fb.close();\n   VERIFY( c == 'S' );\n+  s2.signal ();\n }\n \n int main()"}, {"sha": "07f6529de4aa1912906574520c636889f380fe6a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/char/13582-2.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13582-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13582-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fchar%2F13582-2.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -42,22 +42,20 @@ void test01()\n   const char* name = \"tmp_fifo_13582-2\";\n   unlink(name);\n   try_mkfifo(name, S_IRWXU);\n-  \n+\n   int child = fork();\n   if (child == 0)\n     {\n       filebuf fbout;\n       fbout.open(name, ios_base::out);\n       fbout.sputn(\"12345\", 5);\n       fbout.pubsync();\n-      sleep(2);\n       fbout.close();\n       exit(0);\n     }\n \n   filebuf fbin;\n   fbin.open(name, ios_base::in);\n-  sleep(1);\n   filebuf::int_type n = fbin.sbumpc();\n   VERIFY( n == '1' );\n   fbin.pubimbue(loc_en);"}, {"sha": "a87bf8ffd60fb8ee1016c0703ce6feffb8ee5cca", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/imbue/wchar_t/14975-2.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fimbue%2Fwchar_t%2F14975-2.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -42,26 +42,28 @@ void test01()\n \n   unlink(name);  \n   try_mkfifo(name, S_IRWXU);\n-  \n+  semaphore s1;\n+\n   int child = fork();\n   VERIFY( child != -1 );\n \n   if (child == 0)\n     {\n-      filebuf fbin;\n-      fbin.open(name, ios_base::in);\n-      sleep(2);\n+      {\n+\tfilebuf fbin;\n+\tfbin.open(name, ios_base::in);\n+      }\n+      s1.signal ();\n       exit(0);\n     }\n   \n   wfilebuf fb;\n   fb.pubimbue(loc_us);\n-  sleep(1);\n   wfilebuf* ret = fb.open(name, ios_base::out);\n   VERIFY( ret != NULL );\n   VERIFY( fb.is_open() );\n \n-  sleep(3);\n+  s1.wait ();\n \n   try\n     {"}, {"sha": "7c5aeab5d87e357c952a29eeb8bd1282c025dfa0", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/open/char/9507.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fopen%2Fchar%2F9507.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -37,30 +37,33 @@ void test_06()\n   using namespace __gnu_test;\n   bool test __attribute__((unused)) = true;\n   const char* name = \"tmp_fifo2\";\n+  semaphore s1, s2;\n \n   signal(SIGPIPE, SIG_IGN);\n \n   unlink(name);\n   try_mkfifo(name, S_IRWXU);\n-\t\n+  \n   if (!fork())\n     {\n       std::filebuf fbuf;\n       fbuf.open(name, std::ios_base::in);\n       fbuf.sgetc();\n-      sleep(2);\n+      s1.signal ();\n       fbuf.close();\n+      s2.wait ();\n       exit(0);\n     }\n \n   std::filebuf fbuf;\n-  sleep(1);\n   std::filebuf* r = fbuf.open(name,\n \t\t\t      std::ios_base::in \n \t\t\t      | std::ios_base::out\n \t\t\t      | std::ios_base::ate);\n+  s1.wait ();\n   VERIFY( !fbuf.is_open() );\n   VERIFY( r == NULL );\n+  s2.signal ();\n }\n \n int"}, {"sha": "3bbff078f8e91c2e19e285729363211484eb148c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/underflow/char/10097.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Funderflow%2Fchar%2F10097.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -58,6 +58,7 @@ void test16()\n       VERIFY( false );\n     }\n   \n+  semaphore s1;\n   int fval = fork();\n   if (fval == -1)\n     {\n@@ -71,14 +72,13 @@ void test16()\n       VERIFY ( fbout.is_open() );\n       fbout.sputn(\"0123456789\", 10);\n       fbout.pubsync();\n-      sleep(2);\n+      s1.wait ();\n       fbout.close();\n       exit(0);\n     }\n \n   UnderBuf fb;\n   fb.open(name, ios_base::in);\n-  sleep(1);\n   \n   fb.sgetc();\n   streamsize n = fb.pub_showmanyc();\n@@ -94,6 +94,7 @@ void test16()\n     }\n \n   fb.close();\n+  s1.signal ();\n }\n \n int main() "}, {"sha": "609415882b6be76df141322f716e87debafe8b29", "filename": "libstdc++-v3/testsuite/27_io/objects/char/7.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F7.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -42,26 +42,26 @@ void test07()\n \n   unlink(name);  \n   try_mkfifo(name, S_IRWXU);\n-  \n+  semaphore s1;\n+\n   int child = fork();\n   VERIFY( child != -1 );\n \n   if (child == 0)\n     {\n       filebuf fbout;\n-      sleep(1);\n       fbout.open(name, ios_base::in|ios_base::out);\n+      s1.wait ();\n       VERIFY ( fbout.is_open() );\n       cout.rdbuf(&fbout);\n       fbout.sputc('a');\n-      sleep(2);\n       // NB: fbout is *not* destroyed here!\n       exit(0);\n     }\n   \n   filebuf fbin;\n   fbin.open(name, ios_base::in);\n-  sleep(2);\n+  s1.signal ();\n   filebuf::int_type c = fbin.sbumpc();\n   VERIFY( c != filebuf::traits_type::eof() );\n   VERIFY( c == filebuf::traits_type::to_int_type('a') );"}, {"sha": "9530328afc9aeff78ab86dacfbeae8320f72b604", "filename": "libstdc++-v3/testsuite/27_io/objects/char/9661-1.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fchar%2F9661-1.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -43,24 +43,25 @@ void test01()\n \n   unlink(name);  \n   try_mkfifo(name, S_IRWXU);\n+  semaphore s1, s2;\n   \n   int child = fork();\n   VERIFY( child != -1 );\n \n   if (child == 0)\n     {\n-      sleep(1);\n       FILE* file = fopen(name, \"r+\");\n       VERIFY (file != NULL);\n       fputs(\"Whatever\\n\", file);\n       fflush(file);\n-      sleep(2);\n+      s1.signal ();\n+      s2.wait ();\n       fclose(file);\n       exit(0);\n     }\n   \n   freopen(name, \"r\", stdin);\n-  sleep(2);\n+  s1.wait ();\n \n   int c1 = fgetc(stdin);\n   VERIFY( c1 != EOF );\n@@ -78,6 +79,7 @@ void test01()\n   int c5 = cin.rdbuf()->sgetc();\n   VERIFY( c5 != EOF );\n   VERIFY( c5 == c4 );\n+  s2.signal ();\n }\n \n int main()"}, {"sha": "ee7aac6ec1661ba779e0f4f67ff6d1c809e3b636", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/7.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F7.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -42,25 +42,25 @@ void test07()\n \n   unlink(name);  \n   try_mkfifo(name, S_IRWXU);\n+  semaphore s1;\n   \n   int child = fork();\n   VERIFY( child != -1 );\n \n   if (child == 0)\n     {\n       wfilebuf fbout;\n-      sleep(1);\n       fbout.open(name, ios_base::out);\n+      s1.wait();\n       wcout.rdbuf(&fbout);\n       fbout.sputc(L'a');\n-      sleep(2);\n       // NB: fbout is *not* destroyed here!\n       exit(0);\n     }\n   \n   wfilebuf fbin;\n   fbin.open(name, ios_base::in);\n-  sleep(2);\n+  s1.signal ();\n   wfilebuf::int_type c = fbin.sbumpc();\n   VERIFY( c != wfilebuf::traits_type::eof() );\n   VERIFY( c == wfilebuf::traits_type::to_int_type(L'a') );"}, {"sha": "f944ef2524aa21c5e6f27b33300e70a4086be188", "filename": "libstdc++-v3/testsuite/27_io/objects/wchar_t/9661-1.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fobjects%2Fwchar_t%2F9661-1.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -43,23 +43,24 @@ void test01()\n \n   unlink(name);  \n   try_mkfifo(name, S_IRWXU);\n-  \n+  semaphore s1, s2;\n+\n   int child = fork();\n   VERIFY( child != -1 );\n \n   if (child == 0)\n     {\n-      sleep(1);\n       FILE* file = fopen(name, \"w\");\n       fputs(\"Whatever\\n\", file);\n       fflush(file);\n-      sleep(2);\n+      s1.signal ();\n+      s2.wait ();\n       fclose(file);\n       exit(0);\n     }\n   \n   freopen(name, \"r\", stdin);\n-  sleep(2);\n+  s1.wait ();\n \n   wint_t c1 = fgetwc(stdin);\n   VERIFY( c1 != WEOF );\n@@ -77,6 +78,7 @@ void test01()\n   wint_t c5 = wcin.rdbuf()->sgetc();\n   VERIFY( c5 != WEOF );\n   VERIFY( c5 == c4 );\n+  s2.signal ();\n }\n \n int main()"}, {"sha": "e4cf7fdd7a7085dfdbf00ce58564f561335912a7", "filename": "libstdc++-v3/testsuite/testsuite_hooks.cc", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.cc?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -42,6 +42,20 @@\n #include <locale>\n #include <cxxabi.h>\n \n+// If we have <sys/types.h>, <sys/ipc.h>, and <sys/sem.h>, then assume\n+// that System V semaphores are available.\n+#if defined(_GLIBCXX_HAVE_SYS_TYPES_H)\t\t\\\n+    && defined(_GLIBCXX_HAVE_SYS_IPC_H)\t\t\\\n+    && defined(_GLIBCXX_HAVE_SYS_SEM_H)\n+#define _GLIBCXX_SYSV_SEM\n+#endif\n+\n+#ifdef _GLIBCXX_SYSV_SEM\n+#include <sys/types.h>\n+#include <sys/ipc.h>\n+#include <sys/sem.h>\n+#endif\n+\n namespace __gnu_test\n {\n #ifdef _GLIBCXX_RES_LIMITS\n@@ -252,6 +266,84 @@ namespace __gnu_test\n   unsigned int assignment_operator::throw_on_ = 0;\n   unsigned int destructor::_M_count = 0;\n   int copy_tracker::next_id_ = 0;\n+\n+#ifdef _GLIBCXX_SYSV_SEM\n+  // This union is not declared in system headers.  Instead, it must\n+  // be defined by user programs.\n+  union semun \n+  {\n+    int val;\n+    struct semid_ds *buf;\n+    unsigned short *array;\n+  };\n+#endif\n+\n+  semaphore::semaphore ()\n+  {\n+#ifdef _GLIBCXX_SYSV_SEM\n+    // Remeber the PID for the process that created the semaphore set\n+    // so that only one process will destroy the set.\n+    pid_ = getpid();\n+\n+    // GLIBC does not define SEM_R and SEM_A.\n+#ifndef SEM_R\n+#define SEM_R 0400\n+#endif\n+    \n+#ifndef SEM_A\n+#define SEM_A 0200\n+#endif\n+\n+    // Get a semaphore set with one semaphore.\n+    sem_set_ = semget (IPC_PRIVATE, 1, SEM_R | SEM_A);\n+    if (sem_set_ == -1)\n+      throw std::runtime_error (\"could not obtain semaphore set\");\n+\n+    // Initialize the semaphore.\n+    union semun val;\n+    val.val = 0;\n+    if (semctl (sem_set_, 0, SETVAL, val) == -1)\n+      throw std::runtime_error (\"could not initialize semaphore\");\n+#else\n+    // There are no semaphores on this system.  We have no way to mark\n+    // a test as \"unsupported\" at runtime, so we just exit, pretending\n+    // that the test passed.\n+    exit (0);\n+#endif\n+  }\n+\n+  semaphore::~semaphore ()\n+  {\n+#ifdef _GLIBCXX_SYSV_SEM\n+    union semun val;\n+    // Destroy the semaphore set only in the process that created it. \n+    if (pid_ == getpid ())\n+      semctl (sem_set_, 0, IPC_RMID, val);\n+#endif\n+  }\n+\n+  void\n+  semaphore::signal ()\n+  {\n+#ifdef _GLIBCXX_SYSV_SEM\n+    struct sembuf op[1] = {\n+      { 0, 1, 0 }\n+    };\n+    if (semop (sem_set_, op, 1) == -1)\n+      throw std::runtime_error (\"could not signal semaphore\");\n+#endif\n+  }\n+\n+  void\n+  semaphore::wait() {\n+#ifdef _GLIBCXX_SYSV_SEM\n+    struct sembuf op[1] = {\n+      { 0, -1, SEM_UNDO }\n+    };\n+    if (semop (sem_set_, op, 1) == -1)\n+      throw std::runtime_error (\"could not wait for semaphore\");\n+#endif    \n+  }\n }; // namespace __gnu_test\n \n namespace std"}, {"sha": "79495fbd357caba0d86f5eb9734f6f6773436e24", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f1032c16a6e30d789be20320b1f8c443833fadd/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=8f1032c16a6e30d789be20320b1f8c443833fadd", "patch": "@@ -380,6 +380,30 @@ namespace __gnu_test\n \treturn it == end ? v.end() : it;\n       }\n     };\n+\n+  // A binary semaphore for use across multiple processes.\n+  class semaphore \n+  {\n+  public:\n+    // Creates a binary semaphore.  The semaphore is initially in the\n+    // unsignaled state. \n+    semaphore ();\n+\n+    // Destroy the semaphore.\n+    ~semaphore();\n+\n+    // Signal the semaphore.  If there are processes blocked in\n+    // \"wait\", exactly one will be permitted to proceed.\n+    void signal ();\n+\n+    // Wait until the semaphore is signaled.\n+    void wait ();\n+\n+  private:\n+    int sem_set_;\n+\n+    pid_t pid_;\n+  };\n } // namespace __gnu_test\n \n namespace std"}]}