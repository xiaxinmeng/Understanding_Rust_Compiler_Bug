{"sha": "338976c2341aa9e89007338976546b9d907619db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4OTc2YzIzNDFhYTllODkwMDczMzg5NzY1NDZiOWQ5MDc2MTlkYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-10-08T16:14:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-10-08T16:14:03Z"}, "message": "cp-tree.h (SIMPLE_TARGET_EXPR_P): New.\n\n\t* cp-tree.h (SIMPLE_TARGET_EXPR_P): New.\n\t* init.c (get_nsdmi): Use it.\n\t* typeck2.c (massage_init_elt): Use it.\n\nFrom-SVN: r228606", "tree": {"sha": "f6a4b1292bd20695b9f926869a24c5093a5ff86b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a4b1292bd20695b9f926869a24c5093a5ff86b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/338976c2341aa9e89007338976546b9d907619db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338976c2341aa9e89007338976546b9d907619db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338976c2341aa9e89007338976546b9d907619db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338976c2341aa9e89007338976546b9d907619db/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "afd7acb2c95fd081d7fc2a7052325bdc2d309157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd7acb2c95fd081d7fc2a7052325bdc2d309157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd7acb2c95fd081d7fc2a7052325bdc2d309157"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "e89fd0229334505e3850eb1949fe1224614f4347", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338976c2341aa9e89007338976546b9d907619db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338976c2341aa9e89007338976546b9d907619db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=338976c2341aa9e89007338976546b9d907619db", "patch": "@@ -1,3 +1,9 @@\n+2015-10-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (SIMPLE_TARGET_EXPR_P): New.\n+\t* init.c (get_nsdmi): Use it.\n+\t* typeck2.c (massage_init_elt): Use it.\n+\n 2015-10-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67557"}, {"sha": "f650c76c902e0e3993530ef0e1573a5c73fce5c8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338976c2341aa9e89007338976546b9d907619db/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338976c2341aa9e89007338976546b9d907619db/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=338976c2341aa9e89007338976546b9d907619db", "patch": "@@ -4490,6 +4490,12 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define TARGET_EXPR_DIRECT_INIT_P(NODE) \\\n   TREE_LANG_FLAG_2 (TARGET_EXPR_CHECK (NODE))\n \n+/* True if NODE is a TARGET_EXPR that just expresses a copy of its INITIAL; if\n+   the initializer has void type, it's doing something more complicated.  */\n+#define SIMPLE_TARGET_EXPR_P(NODE)\t\t\t\t\\\n+  (TREE_CODE (NODE) == TARGET_EXPR\t\t\t\t\\\n+   && !VOID_TYPE_P (TREE_TYPE (TARGET_EXPR_INITIAL (NODE))))\n+\n /* True if EXPR expresses direct-initialization of a TYPE.  */\n #define DIRECT_INIT_EXPR_P(TYPE,EXPR)\t\t\t\t\t\\\n   (TREE_CODE (EXPR) == TARGET_EXPR && TREE_LANG_FLAG_2 (EXPR)\t\t\\"}, {"sha": "57a640683519d4d93e9c1338a8009492a15f2564", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338976c2341aa9e89007338976546b9d907619db/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338976c2341aa9e89007338976546b9d907619db/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=338976c2341aa9e89007338976546b9d907619db", "patch": "@@ -588,8 +588,7 @@ get_nsdmi (tree member, bool in_ctor)\n \t}\n       /* Strip redundant TARGET_EXPR so we don't need to remap it, and\n \t so the aggregate init code below will see a CONSTRUCTOR.  */\n-      if (init && TREE_CODE (init) == TARGET_EXPR\n-\t  && !VOID_TYPE_P (TREE_TYPE (TARGET_EXPR_INITIAL (init))))\n+      if (init && SIMPLE_TARGET_EXPR_P (init))\n \tinit = TARGET_EXPR_INITIAL (init);\n       init = break_out_target_exprs (init);\n     }"}, {"sha": "2c9143e63a2960cff3838360200b1082eb4f4d23", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338976c2341aa9e89007338976546b9d907619db/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338976c2341aa9e89007338976546b9d907619db/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=338976c2341aa9e89007338976546b9d907619db", "patch": "@@ -1208,8 +1208,7 @@ massage_init_elt (tree type, tree init, tsubst_flags_t complain)\n {\n   init = digest_init_r (type, init, true, LOOKUP_IMPLICIT, complain);\n   /* Strip a simple TARGET_EXPR when we know this is an initializer.  */\n-  if (TREE_CODE (init) == TARGET_EXPR\n-      && !VOID_TYPE_P (TREE_TYPE (TARGET_EXPR_INITIAL (init))))\n+  if (SIMPLE_TARGET_EXPR_P (init))\n     init = TARGET_EXPR_INITIAL (init);\n   /* When we defer constant folding within a statement, we may want to\n      defer this folding as well.  */"}]}