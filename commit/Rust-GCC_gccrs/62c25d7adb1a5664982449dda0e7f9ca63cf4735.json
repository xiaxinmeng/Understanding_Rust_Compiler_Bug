{"sha": "62c25d7adb1a5664982449dda0e7f9ca63cf4735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJjMjVkN2FkYjFhNTY2NDk4MjQ0OWRkYTBlN2Y5Y2E2M2NmNDczNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-09T20:31:59Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-10T17:54:12Z"}, "message": "c++: make __is_constructible work with paren-init of aggrs [PR94149]\n\nIn C++20 this is well-formed:\n\n  using T = int[2];\n  T t(1, 2);\n\nwhich means that std::is_constructible_v<int[2], int, int> should be true.\nBut constructible_expr immediately returned the error_mark_node when it\nsaw a list with more than one element.  To give accurate results in\nC++20, we have to try initializing the aggregate from a parenthesized list of\nvalues.\n\nTo not repeat the same mistake as in c++/93790, if there's only one\nelement, I'm trying {} only when () didn't succeed.  is_constructible5.C\nverifies this.\n\nIn paren-init24.C std::is_nothrow_constructible_v doesn't work due to\n error: invalid 'static_cast' from type 'int' to type 'int [1]'\nand\n error: functional cast to array type 'int [2]'\n\nThis needs to be fixed in libstdc++.\n\n\tPR c++/94149\n\t* method.c (constructible_expr): In C++20, try using parenthesized\n\tinitialization of aggregates to determine the result of\n\t__is_constructible.\n\n\t* g++.dg/cpp2a/paren-init24.C: New test.\n\t* g++.dg/cpp2a/paren-init25.C: New test.\n\t* g++.dg/ext/is_constructible5.C: New test.", "tree": {"sha": "1886e04120a6fcb60d364bedc5960ee16d1bc451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1886e04120a6fcb60d364bedc5960ee16d1bc451"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62c25d7adb1a5664982449dda0e7f9ca63cf4735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c25d7adb1a5664982449dda0e7f9ca63cf4735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c25d7adb1a5664982449dda0e7f9ca63cf4735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c25d7adb1a5664982449dda0e7f9ca63cf4735/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e26bd694c790b7c8f68c6736b2683c60a8fcbcfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26bd694c790b7c8f68c6736b2683c60a8fcbcfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26bd694c790b7c8f68c6736b2683c60a8fcbcfe"}], "stats": {"total": 123, "additions": 120, "deletions": 3}, "files": [{"sha": "b619593aa23cf4a0a5d155f2d1c9ae6c1d0c81fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62c25d7adb1a5664982449dda0e7f9ca63cf4735", "patch": "@@ -1,3 +1,10 @@\n+2020-04-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94149\n+\t* method.c (constructible_expr): In C++20, try using parenthesized\n+\tinitialization of aggregates to determine the result of\n+\t__is_constructible.\n+\n 2020-04-10  Bin Cheng  <bin.cheng@linux.alibaba.com>\n \n \t* coroutines.cc (co_await_expander): Simplify."}, {"sha": "2fb0de288a2843b28de3d5fd293ce576d4f2f582", "filename": "gcc/cp/method.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=62c25d7adb1a5664982449dda0e7f9ca63cf4735", "patch": "@@ -1799,12 +1799,48 @@ constructible_expr (tree to, tree from)\n     {\n       if (from == NULL_TREE)\n \treturn build_value_init (strip_array_types (to), tf_none);\n-      else if (TREE_CHAIN (from))\n-\treturn error_mark_node; // too many initializers\n-      from = build_stub_object (TREE_VALUE (from));\n+      const int len = list_length (from);\n+      if (len > 1)\n+\t{\n+\t  if (cxx_dialect < cxx2a)\n+\t    /* Too many initializers.  */\n+\t    return error_mark_node;\n+\n+\t  /* In C++20 this is well-formed:\n+\t       using T = int[2];\n+\t       T t(1, 2);\n+\t     which means that std::is_constructible_v<int[2], int, int>\n+\t     should be true.  */\n+\t  vec<constructor_elt, va_gc> *v;\n+\t  vec_alloc (v, len);\n+\t  for (tree t = from; t; t = TREE_CHAIN (t))\n+\t    {\n+\t      tree stub = build_stub_object (TREE_VALUE (t));\n+\t      constructor_elt elt = { NULL_TREE, stub };\n+\t      v->quick_push (elt);\n+\t    }\n+\t  from = build_constructor (init_list_type_node, v);\n+\t  CONSTRUCTOR_IS_DIRECT_INIT (from) = true;\n+\t  CONSTRUCTOR_IS_PAREN_INIT (from) = true;\n+\t}\n+      else\n+\tfrom = build_stub_object (TREE_VALUE (from));\n       expr = perform_direct_initialization_if_possible (to, from,\n \t\t\t\t\t\t\t/*cast*/false,\n \t\t\t\t\t\t\ttf_none);\n+      /* If t(e) didn't work, maybe t{e} will.  */\n+      if (expr == NULL_TREE\n+\t  && len == 1\n+\t  && cxx_dialect >= cxx2a)\n+\t{\n+\t  from = build_constructor_single (init_list_type_node, NULL_TREE,\n+\t\t\t\t\t   from);\n+\t  CONSTRUCTOR_IS_DIRECT_INIT (from) = true;\n+\t  CONSTRUCTOR_IS_PAREN_INIT (from) = true;\n+\t  expr = perform_direct_initialization_if_possible (to, from,\n+\t\t\t\t\t\t\t    /*cast*/false,\n+\t\t\t\t\t\t\t    tf_none);\n+\t}\n     }\n   return expr;\n }"}, {"sha": "2a3b1c2325d778c7e1adad643e4fc239749fae1a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62c25d7adb1a5664982449dda0e7f9ca63cf4735", "patch": "@@ -1,3 +1,10 @@\n+2020-04-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94149\n+\t* g++.dg/cpp2a/paren-init24.C: New test.\n+\t* g++.dg/cpp2a/paren-init25.C: New test.\n+\t* g++.dg/ext/is_constructible5.C: New test.\n+\n 2020-04-10  Fritz Reese  <foreese@gcc.gnu.org>\n \n \t* gfortran.dg/asynchronous_5.f03: Fix typo in testcase and add"}, {"sha": "a636a28ee6dfb5cb2f1234322c2c4e9955e1c731", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init24.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init24.C?ref=62c25d7adb1a5664982449dda0e7f9ca63cf4735", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/94149 - make __is_constructible work with paren-init of aggrs.\n+// { dg-do compile { target c++2a } }\n+\n+#include <type_traits>\n+\n+int main()\n+{\n+  using T = int[1];\n+  T t(1);\n+\n+  static_assert(__is_constructible(T, int));\n+  static_assert(!__is_constructible(T, int, int));\n+  static_assert(std::is_constructible_v<T, int>);\n+  //FIXME: libstdc++ problem?\n+  //static_assert(std::is_nothrow_constructible_v<T, int>);\n+\n+  using T2 = int[2];\n+  T2 t2(1);\n+  T2 t3(1, 2);\n+\n+  static_assert(__is_constructible(T2, int));\n+  static_assert(__is_constructible(T2, int, int));\n+  static_assert(std::is_constructible_v<T2, int, int>);\n+  // FIXME libstdc++ problem?\n+  //static_assert(std::is_nothrow_constructible_v<T2, int, int>);\n+}"}, {"sha": "53855a9ef9ead0ccb63a6c18c1ea3d2bc264f52e", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init25.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init25.C?ref=62c25d7adb1a5664982449dda0e7f9ca63cf4735", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/94149 - make __is_constructible work with paren-init of aggrs.\n+// { dg-do compile { target c++2a } }\n+\n+struct nonaggr {\n+  nonaggr() {}\n+  int i;\n+  int j;\n+};\n+\n+struct aggr {\n+  int i;\n+  int j;\n+};\n+\n+static_assert(__is_constructible(aggr, int, int));\n+static_assert(__is_constructible(aggr, int));\n+static_assert(!__is_constructible(nonaggr, int, int));\n+\n+using T = aggr[2];\n+static_assert(__is_constructible(T, aggr));\n+static_assert(__is_constructible(T, aggr, aggr));\n+\n+using N = nonaggr[2];\n+static_assert(__is_constructible(N, nonaggr));\n+static_assert(__is_constructible(N, nonaggr, nonaggr));"}, {"sha": "93062aba8cd711e940ec1116cf3f0e6fe7841b8e", "filename": "gcc/testsuite/g++.dg/ext/is_constructible5.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62c25d7adb1a5664982449dda0e7f9ca63cf4735/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_constructible5.C?ref=62c25d7adb1a5664982449dda0e7f9ca63cf4735", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/94149 - make __is_constructible work with paren-init of aggrs.\n+// { dg-do compile { target c++11 } }\n+\n+struct S { };\n+\n+struct W {\n+  S& r;\n+  W(S& r_) : r(r_) {}\n+  operator S&() { return r; }\n+};\n+\n+S s;\n+W w(s);\n+S& s2(w);\n+\n+static_assert(__is_constructible(S&, W), \"\");"}]}