{"sha": "1c01e9df92a901c69981316978aab8a8124705ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwMWU5ZGY5MmE5MDFjNjk5ODEzMTY5NzhhYWI4YTgxMjQ3MDVmZg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-10-13T18:45:45Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-10-13T18:45:45Z"}, "message": "(loop_optimize): Verify that max_uid_for_loop is still larger than the uid of any insn.\n\n(loop_optimize): Verify that max_uid_for_loop is still\n\tlarger than the uid of any insn.  Increase the number of exit\n\tblocks from 4 to 32 per loop.\n\t(find_and_verify_loops): Stop trying to relocate exit blocks when\n\tallocating a new label would exceed max_uid_for_loop.\n\nFrom-SVN: r2440", "tree": {"sha": "3e9962eea5cd46a4da629d222756d0e544c9d1dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e9962eea5cd46a4da629d222756d0e544c9d1dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c01e9df92a901c69981316978aab8a8124705ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c01e9df92a901c69981316978aab8a8124705ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c01e9df92a901c69981316978aab8a8124705ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c01e9df92a901c69981316978aab8a8124705ff/comments", "author": null, "committer": null, "parents": [{"sha": "2988e8a39e50f3acb58b82c8bca8f06b5d2562a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2988e8a39e50f3acb58b82c8bca8f06b5d2562a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2988e8a39e50f3acb58b82c8bca8f06b5d2562a9"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "232b88290d1fd05eed00d15d3fd4f1b4e51dea17", "filename": "gcc/loop.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c01e9df92a901c69981316978aab8a8124705ff/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c01e9df92a901c69981316978aab8a8124705ff/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=1c01e9df92a901c69981316978aab8a8124705ff", "patch": "@@ -361,7 +361,7 @@ loop_optimize (f, dumpfile)\n \n   /* Get size to use for tables indexed by uids.\n      Leave some space for labels allocated by find_and_verify_loops.  */\n-  max_uid_for_loop = get_max_uid () + 1 + max_loop_num * 4;\n+  max_uid_for_loop = get_max_uid () + 1 + max_loop_num * 32;\n \n   uid_luid = (int *) alloca (max_uid_for_loop * sizeof (int));\n   uid_loop_num = (int *) alloca (max_uid_for_loop * sizeof (int));\n@@ -386,6 +386,10 @@ loop_optimize (f, dumpfile)\n      function.  */\n   reg_scan (f, max_reg_num (), 1);\n \n+  /* See if we went too far.  */\n+  if (get_max_uid () > max_uid_for_loop)\n+    abort ();\n+\n   /* Compute the mapping from uids to luids.\n      LUIDs are numbers assigned to insns, like uids,\n      except that luids increase monotonically through the code.\n@@ -2240,7 +2244,8 @@ find_and_verify_loops (f)\n \t    && (GET_CODE (PATTERN (insn)) == RETURN\n \t\t|| (simplejump_p (insn)\n \t\t    && (uid_loop_num[INSN_UID (JUMP_LABEL (insn))]\n-\t\t\t!= this_loop_num))))\n+\t\t\t!= this_loop_num)))\n+\t    && get_max_uid () < max_uid_for_loop)\n \t  {\n \t    rtx p;\n \t    rtx our_next = next_real_insn (insn);\n@@ -2299,8 +2304,7 @@ find_and_verify_loops (f)\n \n \t\t    /* Verify that uid_loop_num is large enough and that\n \t\t       we can invert P. */\n-\t\t   if (INSN_UID (new_label) < max_uid_for_loop\n-\t\t       && invert_jump (p, new_label))\n+\t\t   if (invert_jump (p, new_label))\n \t\t     {\n \t\t       rtx q, r;\n "}]}