{"sha": "974e8240c083ce4942a7310da42e2d9260af125c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0ZTgyNDBjMDgzY2U0OTQyYTczMTBkYTQyZTJkOTI2MGFmMTI1Yw==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2018-03-27T14:06:20Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2018-03-27T14:06:20Z"}, "message": "[Patch ARM] Fix PR target/81863\n\nThis has been in my patch stack for quite some time. The problem here\nwas that we weren't handling arm_word_relocations in\narm_valid_symbolic_address and is the surest fix for this\nfor GCC8 and GCC7.\n\nRegression tested on arm-none-linux-gnueabihf . Applying to\ntrunk and backporting to GCC-7 in a day or so.\n\nregards\nRamana\n\n2018-03-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR target/81863\n\t* config/arm/arm.c (arm_valid_symbolic_address): Handle arm_word_relocations\n\n\n2018-03-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR target/81863\n\t* gcc.target/arm/pr81863.c: New test.\n\nFrom-SVN: r258886", "tree": {"sha": "fbd420d13acd21bd7ac469f17000c0c45d88232c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbd420d13acd21bd7ac469f17000c0c45d88232c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974e8240c083ce4942a7310da42e2d9260af125c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974e8240c083ce4942a7310da42e2d9260af125c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974e8240c083ce4942a7310da42e2d9260af125c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974e8240c083ce4942a7310da42e2d9260af125c/comments", "author": null, "committer": null, "parents": [{"sha": "59d2d2383485fb0febdcab9f06bbb3526eeab106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d2d2383485fb0febdcab9f06bbb3526eeab106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d2d2383485fb0febdcab9f06bbb3526eeab106"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "ff3afb208c518ff334db547c11c2d1c5923b04f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e8240c083ce4942a7310da42e2d9260af125c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e8240c083ce4942a7310da42e2d9260af125c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=974e8240c083ce4942a7310da42e2d9260af125c", "patch": "@@ -1,3 +1,8 @@\n+2018-03-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/81863\n+\t* config/arm/arm.c (arm_valid_symbolic_address): Handle arm_word_relocations\n+\n 2018-03-27  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR target/85056\n@@ -6,7 +11,7 @@\n \n 2018-03-27  Richard Biener  <rguenther@suse.de>\n \n-\tPR middle-ed/84067\n+\tPR middle-end/84067\n \t* match.pd ((A * C) +- (B * C) -> (A+-B) * C): Guard with\n \texplicit single_use checks.\n "}, {"sha": "08120c6272b5c558e60016c2bd8901b274a45af8", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e8240c083ce4942a7310da42e2d9260af125c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e8240c083ce4942a7310da42e2d9260af125c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=974e8240c083ce4942a7310da42e2d9260af125c", "patch": "@@ -29787,6 +29787,9 @@ arm_valid_symbolic_address_p (rtx addr)\n   rtx xop0, xop1 = NULL_RTX;\n   rtx tmp = addr;\n \n+  if (target_word_relocations)\n+    return false;\n+\n   if (GET_CODE (tmp) == SYMBOL_REF || GET_CODE (tmp) == LABEL_REF)\n     return true;\n "}, {"sha": "1b566b808c7294dea7934a85c4e7c79d45705e42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e8240c083ce4942a7310da42e2d9260af125c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e8240c083ce4942a7310da42e2d9260af125c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=974e8240c083ce4942a7310da42e2d9260af125c", "patch": "@@ -1,3 +1,8 @@\n+2018-03-27  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/81863\n+\t* gcc.target/arm/pr81863.c: New test.\n+\n 2018-03-27  Cesar Philippidis  <cesar@codesourcery.com>\n \n \tPR target/85056"}, {"sha": "63b1ed66b2c736c8dc9436d8251cf72c5d31adb3", "filename": "gcc/testsuite/gcc.target/arm/pr81863.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974e8240c083ce4942a7310da42e2d9260af125c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr81863.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974e8240c083ce4942a7310da42e2d9260af125c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr81863.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr81863.c?ref=974e8240c083ce4942a7310da42e2d9260af125c", "patch": "@@ -0,0 +1,44 @@\n+/* testsuite/gcc.target/arm/pr48183.c */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mword-relocations -march=armv7-a -marm\" } */\n+/* { dg-final { scan-assembler-not \"\\[\\\\t \\]+movw\" } } */\n+\n+int a, d, f;\n+long b;\n+struct ww_class {\n+  int stamp;\n+} c;\n+struct stress {\n+  int locks;\n+  int nlocks;\n+};\n+void *e;\n+int atomic_add_return_relaxed(int *p1) {\n+  __builtin_prefetch(p1);\n+  return a;\n+}\n+void atomic_long_inc_return_relaxed(int *p1) {\n+  int *v = p1;\n+  atomic_add_return_relaxed(v);\n+}\n+void ww_acquire_init(struct ww_class *p1) {\n+  atomic_long_inc_return_relaxed(&p1->stamp);\n+}\n+void ww_mutex_lock();\n+int *get_random_order();\n+void stress_inorder_work() {\n+  struct stress *g = e;\n+  int h = g->nlocks;\n+  int *i = &g->locks, *j = get_random_order();\n+  do {\n+    int n;\n+    ww_acquire_init(&c);\n+  retry:\n+    for (n = 0; n < h; n++)\n+      ww_mutex_lock(i[j[n]]);\n+    f = n;\n+    if (d)\n+      goto retry;\n+  } while (b);\n+}\n+"}]}