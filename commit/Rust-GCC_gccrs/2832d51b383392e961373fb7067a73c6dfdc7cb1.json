{"sha": "2832d51b383392e961373fb7067a73c6dfdc7cb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgzMmQ1MWIzODMzOTJlOTYxMzczZmI3MDY3YTczYzZkZmRjN2NiMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-22T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-05-22T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "8ce5b68dc67016e432dc7309d1b97d727a0930da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ce5b68dc67016e432dc7309d1b97d727a0930da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2832d51b383392e961373fb7067a73c6dfdc7cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2832d51b383392e961373fb7067a73c6dfdc7cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2832d51b383392e961373fb7067a73c6dfdc7cb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2832d51b383392e961373fb7067a73c6dfdc7cb1/comments", "author": null, "committer": null, "parents": [{"sha": "842a05518982a130c8087d9ad6bdc457bec184e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842a05518982a130c8087d9ad6bdc457bec184e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842a05518982a130c8087d9ad6bdc457bec184e3"}], "stats": {"total": 584, "additions": 583, "deletions": 1}, "files": [{"sha": "5f671e8d25fb74feb054689e651cf849c9035c73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,245 @@\n+2021-05-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/genfusion.pl (gen_addadd): New function.\n+\t* config/rs6000/fusion.md: Regenerate file.\n+\t* config/rs6000/rs6000-cpus.def: Add\n+\tOPTION_MASK_P10_FUSION_2ADD to masks.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal):\n+\tHandle default value of OPTION_MASK_P10_FUSION_2ADD.\n+\t* config/rs6000/rs6000.opt: Add -mpower10-fusion-2add.\n+\n+2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* tree.h (OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET): Define.\n+\t* gimplify.c (enum gimplify_omp_var_data): Fix up\n+\tGOVD_MAP_HAS_ATTACHMENTS value, add GOVD_FIRSTPRIVATE_IMPLICIT.\n+\t(omp_lastprivate_for_combined_outer_constructs): If combined target\n+\thas GOVD_FIRSTPRIVATE_IMPLICIT set for the decl, change it to\n+\tGOVD_MAP | GOVD_SEEN.\n+\t(gimplify_scan_omp_clauses): Set GOVD_FIRSTPRIVATE_IMPLICIT for\n+\tfirstprivate clauses with OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT.\n+\t(gimplify_adjust_omp_clauses): For firstprivate clauses with\n+\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT either clear that bit and\n+\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET too, or remove it and\n+\tlet it be replaced by implicit map clause.\n+\n+2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* gimplify.c (omp_lastprivate_for_combined_outer_constructs): New\n+\tfunction.\n+\t(gimplify_scan_omp_clauses) <case OMP_CLAUSE_LASTPRIVATE>: Use it.\n+\t(gimplify_omp_for): Likewise.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* omp-low.c (oacc_privatization_candidate_p): Reject 'static',\n+\t'external' in blocks.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* flag-types.h (enum openacc_privatization): New.\n+\t* params.opt (-param=openacc-privatization): New.\n+\t* doc/invoke.texi (openacc-privatization): Document it.\n+\t* omp-general.h (get_openacc_privatization_dump_flags): New\n+\tfunction.\n+\t* omp-low.c (oacc_privatization_candidate_p): Add diagnostics.\n+\t* omp-offload.c (execute_oacc_device_lower)\n+\t<IFN_UNIQUE_OACC_PRIVATE>: Re-work diagnostics.\n+\t* target.def (goacc.adjust_private_decl): Add 'location_t'\n+\tparameter.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/gcn/gcn-protos.h (gcn_goacc_adjust_private_decl): Adjust.\n+\t* config/gcn/gcn-tree.c (gcn_goacc_adjust_private_decl): Likewise.\n+\t* config/nvptx/nvptx.c (nvptx_goacc_adjust_private_decl):\n+\tLikewise.  Preserve it for...\n+\t(nvptx_goacc_expand_var_decl): ... use here.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* doc/sourcebuild.texi (Other attributes): Document '__OPTIMIZE__'\n+\tDejaGnu selector.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* omp-low.c (oacc_privatization_candidate_p): New function.\n+\t(oacc_privatization_scan_clause_chain)\n+\t(oacc_privatization_scan_decl_chain): Use it.  Also\n+\t'gcc_checking_assert' that we're not seeing duplicates.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* omp-offload.c (execute_oacc_device_lower): Skip processing if no\n+\twork to be done.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* omp-offload.c (execute_oacc_device_lower): Explain.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* omp-offload.c (execute_oacc_device_lower)\n+\t<IFN_UNIQUE_OACC_PRIVATE>: Diagnose and handle for 'level == -1'\n+\tcase, too.\n+\t* internal-fn.c (expand_UNIQUE): Don't expect\n+\t'IFN_UNIQUE_OACC_PRIVATE'.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* omp-low.c (lower_omp_for): Don't evaluate OpenMP 'for' clauses.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* config/nvptx/nvptx.c (nvptx_goacc_adjust_private_decl)\n+\t(nvptx_goacc_expand_var_decl): Tighten.\n+\n+2021-05-21  Julian Brown  <julian@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* doc/tm.texi.in (TARGET_GOACC_EXPAND_VAR_DECL)\n+\t(TARGET_GOACC_ADJUST_PRIVATE_DECL): Add documentation hooks.\n+\t* doc/tm.texi: Regenerate.\n+\t* expr.c (expand_expr_real_1): Expand decls using the\n+\texpand_var_decl OpenACC hook if defined.\n+\t* internal-fn.c (expand_UNIQUE): Handle IFN_UNIQUE_OACC_PRIVATE.\n+\t* internal-fn.h (IFN_UNIQUE_CODES): Add OACC_PRIVATE.\n+\t* omp-low.c (omp_context): Add oacc_privatization_candidates\n+\tfield.\n+\t(lower_oacc_reductions): Add PRIVATE_MARKER parameter.  Insert\n+\tbefore fork.\n+\t(lower_oacc_head_tail): Add PRIVATE_MARKER parameter.  Modify\n+\tprivate marker's gimple call arguments, and pass it to\n+\tlower_oacc_reductions.\n+\t(oacc_privatization_scan_clause_chain)\n+\t(oacc_privatization_scan_decl_chain, lower_oacc_private_marker):\n+\tNew functions.\n+\t(lower_omp_for, lower_omp_target, lower_omp_1): Use these.\n+\t* omp-offload.c (convert.h): Include.\n+\t(oacc_loop_xform_head_tail): Treat private-variable markers like\n+\tfork/join when transforming head/tail sequences.\n+\t(struct var_decl_rewrite_info): Add struct.\n+\t(oacc_rewrite_var_decl, is_sync_builtin_call): New functions.\n+\t(execute_oacc_device_lower): Support rewriting gang-private\n+\tvariables using target hook, and fix up addr_expr and var_decl\n+\tnodes afterwards.\n+\t* target.def (adjust_private_decl, expand_var_decl): New hooks.\n+\t* config/gcn/gcn-protos.h (gcn_goacc_adjust_gangprivate_decl):\n+\tRename to...\n+\t(gcn_goacc_adjust_private_decl): ...this.\n+\t* config/gcn/gcn-tree.c (gcn_goacc_adjust_gangprivate_decl):\n+\tRename to...\n+\t(gcn_goacc_adjust_private_decl): ...this. Add LEVEL parameter.\n+\t* config/gcn/gcn.c (TARGET_GOACC_ADJUST_GANGPRIVATE_DECL): Rename\n+\tdefinition using gcn_goacc_adjust_gangprivate_decl...\n+\t(TARGET_GOACC_ADJUST_PRIVATE_DECL): ...to this, using\n+\tgcn_goacc_adjust_private_decl.\n+\t* config/nvptx/nvptx.c (tree-pretty-print.h): Include.\n+\t(gang_private_shared_size): New global variable.\n+\t(gang_private_shared_align): Likewise.\n+\t(gang_private_shared_sym): Likewise.\n+\t(gang_private_shared_hmap): Likewise.\n+\t(nvptx_option_override): Initialize these.\n+\t(nvptx_file_end): Output gang_private_shared_sym.\n+\t(nvptx_goacc_adjust_private_decl, nvptx_goacc_expand_var_decl):\n+\tNew functions.\n+\t(nvptx_set_current_function): Clear gang_private_shared_hmap.\n+\t(TARGET_GOACC_ADJUST_PRIVATE_DECL): Define hook.\n+\t(TARGET_GOACC_EXPAND_VAR_DECL): Likewise.\n+\n+2021-05-21  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386-modes.def (MAX_BITSIZE_MODE_ANY_INT): Removed.\n+\n+2021-05-21  Richard Biener  <rguenther@suse.de>\n+\t    H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/90773\n+\t* expr.c (expand_constructor): Elide expand_constructor if\n+\tmove by pieces is preferred.\n+\n+2021-05-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_call_properties):\n+\tTake a flag and mode value as arguments.\n+\t(aarch64_modifies_global_state_p): Likewise.\n+\t(aarch64_reads_global_state_p): Likewise.\n+\t(aarch64_could_trap_p): Likewise.\n+\t(aarch64_get_attributes): Likewise.\n+\t(aarch64_init_simd_builtins): Adjust callsite of above.\n+\t(aarch64_init_fcmla_laneq_builtins): Use aarch64_get_attributes to get\n+\tfunction attributes to apply to builtins.\n+\t(aarch64_init_crc32_builtins): Likewise.\n+\t(aarch64_init_builtin_rsqrt): Likewise.\n+\n+2021-05-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (define_attr \"type\"): Add types for fusion.\n+\t* config/rs6000/genfusion.pl (gen_ld_cmpi_p10): Use new fusion types.\n+\t(gen_2logical): Use new fusion types.\n+\t* config/rs6000/fusion.md: Regenerate.\n+\n+2021-05-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/i386-expand.c (ix86_expand_sse_movcc):\n+\tHandle V4QI and V2HI modes.\n+\t(ix86_expand_sse_movcc): Ditto.\n+\t* config/i386/mmx.md (*<sat_plusminus:insn><VI_32:mode>3):\n+\tNew instruction pattern.\n+\t(*eq<VI_32:mode>3): Ditto.\n+\t(*gt<VI_32:mode>3): Ditto.\n+\t(*xop_pcmov_<VI_32:mode>): Ditto.\n+\t(mmx_pblendvb32): Ditto.\n+\t(mmx_pblendvb64): Rename from mmx_pblendvb.\n+\t(vec_cmp<VI_32:mode><VI_32:mode>): New expander.\n+\t(vec_cmpu<VI_32:mode><VI_32:mode>): Ditto.\n+\t(vcond<VI_32:mode><VI_32:mode>): Ditto.\n+\t(vcondu<VI_32:mode><VI_32:mode>): Ditto.\n+\t(vcond_mask_<VI_32:mode><VI_32:mode>): Ditto.\n+\n+2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94589\n+\t* tree-ssa-phiopt.c (spaceship_replacement): For integral rhs1 and\n+\trhs2, treat x <= 4 equivalently to x < 5 etc.  In cmp1 and cmp2 (if\n+\tnot the same as cmp3) treat <= the same as < and >= the same as >.\n+\tDon't require that cond2_phi_edge is true edge, instead take\n+\tfalse/true edges into account based on cmp1/cmp2 comparison kinds.\n+\n+2021-05-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* config/i386/mmx.md (SMAXMIN_MMXMODEI): New mode iterator.\n+\t(<smaxmin:code><SMAXMIN_MMXMODEI:mode>3): Macroize expander\n+\tfrom <smaxmin:code>v4hi3> and <smaxmin:code><MMXMODE14:mode>3\n+\tusing SMAXMIN_MMXMODEI mode iterator.\n+\t(*<smaxmin:code>v4qi3): New insn pattern.\n+\t(*<smaxmin:code>v2hi3): Ditto.\n+\t(SMAXMIN_VI_32): New mode iterator.\n+\t(<smaxmin:code><SMAXMIN_VI_32>mode3): New expander.\n+\t(UMAXMIN_MMXMODEI): New mode iterator.\n+\t(<umaxmin:code><UMAXMIN_MMXMODEI:mode>3): Macroize expander\n+\tfrom <umaxmin:code>v8qi3> and <umaxmin:code><MMXMODE24:mode>3\n+\tusing UMAXMIN_MMXMODEI mode iterator.\n+\t(*<umaxmin:code>v4qi3): New insn pattern.\n+\t(*<umaxmin:code>v2hi3): Ditto.\n+\t(UMAXMIN_VI_32): New mode iterator.\n+\t(<umaxmin:code><UMAXMIN_VI_32>mode3): New expander.\n+\t(abs<VI_32:mode>2): New insn pattern.\n+\t(ssse3_abs<MMXMODEI:mode>2, abs<MMXMODEI:mode>2): Move from ...\n+\t* config/i386/sse.md: ... here.\n+\n 2021-05-20  Clement Chigot  <clement.chigot@atos.net>\n \t    David Edelsohn  <dje.gcc@gmail.com>\n "}, {"sha": "d128d2a267a5db8d50312222bfd390a98defa9bb", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1 +1 @@\n-20210521\n+20210522"}, {"sha": "b5ba17778eb4d485629a8b951b55fb9f3c890ac2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,82 @@\n+2021-05-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gcc-interface/trans.c (Raise_Error_to_gnu): Add an assertion.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (gnat_pushdecl): Fix typo in comment.\n+\t* gcc-interface/utils2.c (build_simple_component_ref): Build NULL_EXPR\n+\tif the offset of the field has overflowed.\n+\t(build_component_ref): Add gigi checking assertion that the reference\n+\thas been built and replace the discriminant check by a Program_Error.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Named_Integer>: Do\n+\tnot pass default value in call to create_var_decl.\n+\t<E_Variable>: Likewise.\n+\t<E_Record_Subtype>: Both pass true for const_flag and false for\n+\tconst_decl_allowed_p in call to create_var_decl.\n+\tSmall tweaks in the generic record type case.\n+\t(elaborate_expression): Rename need_debug into need_for_debug and\n+\tadjust throughout.\n+\t(elaborate_expression_1): Likewise.  Pass Needs_Debug_Info instead\n+\tof need_for_debug in call to create_var_decl.\n+\t(elaborate_expression_2): Likewise.\n+\t* gcc-interface/utils.c (maybe_pad_type): Pass false for\n+\tconst_decl_allowed_p in call to create_var_decl.\n+\n+2021-05-21  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Replace ? with ??.\n+\t(gnat_to_gnu_param): Likewise.\n+\t(gnat_to_gnu_subprog_type): Likewise.\n+\t(warn_on_field_placement): Likewise.\n+\t(intrin_arglists_compatible_p): Likewise.\n+\t* gcc-interface/trans.c (Pragma_to_gnu): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\t(validate_unchecked_conversion): Likewise.\n+\t* gcc-interface/utils.c (maybe_pad_type): Likewise.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Process\n+\tthe implementation type of a packed type implemented specially.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_subprog_type): Always translate\n+\tthe Is_Pure flag into the \"pure\" attribute of GNU C.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Call_to_gnu): Restrict previous change\n+\tto bitfields whose size is not equal to the type size.\n+\t(gnat_to_gnu): Likewise.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Call_to_gnu): Minor tweaks.\n+\t(gnat_to_gnu_external): Likewise.\n+\t(Raise_Error_to_gnu): Return an empty statement list if there is a\n+\tcondition and it is always false.\n+\t(gnat_to_gnu): Do not check for elaboration code a priori during the\n+\ttranslation but a posteriori instead.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Simple_Return_Statement>:\n+\tPut a SLOC on the assignment from the return value to the return\n+\tobject in the copy-in/copy-out case.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Replace\n+\tCEIL_DIV_EXPR with EXACT_DIV_EXPR.\n+\t* gcc-interface/misc.c (gnat_type_max_size): Likewise.\n+\t* gcc-interface/utils.c (maybe_pad_type): Likewise.\n+\t(finish_record_type): Likewise.  And always compute the unit size.\n+\n 2021-05-14  Martin Liska  <mliska@suse.cz>\n \n \t* doc/Makefile: Add gnat-style target."}, {"sha": "43d4c5e0f536aca57134f2330cd48d4d40d946ad", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,10 @@\n+2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* c-omp.c (c_omp_split_clauses): Set OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT\n+\ton firstprivate clause copy going to target construct, and for\n+\ttarget simd set also OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET bit.\n+\n 2021-05-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* c.opt (Wc++11-extensions, Wc++14-extensions)"}, {"sha": "778053948c7dc2d9702e39872682867bcba2ee6c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,11 @@\n+2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* c-typeck.c (c_finish_omp_clauses): Move firstprivate clauses with\n+\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT to the end of the chain.  Don't error\n+\tif a decl is mentioned both in map clause and in such firstprivate\n+\tclause unless OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET is also set.\n+\n 2021-05-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/99928"}, {"sha": "2eb793e2aeb7d7ab43cceac32d371c32da5df852", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,11 @@\n+2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* semantics.c (finish_omp_clauses): Move firstprivate clauses with\n+\tOMP_CLAUSE_FIRSTPRIVATE_IMPLICIT to the end of the chain.  Don't error\n+\tif a decl is mentioned both in map clause and in such firstprivate\n+\tclause unless OMP_CLAUSE_FIRSTPRIVATE_IMPLICIT_TARGET is also set.\n+\n 2021-05-20  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (reference_binding): Check for designator."}, {"sha": "f7b97fa4deff1c299958181948280eab8ec0d1ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,75 @@\n+2021-05-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/fusion-p10-addadd.c: New file.\n+\n+2021-05-21  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/fusion-p10-ldcmpi.c: New file.\n+\t* gcc.target/powerpc/fusion-p10-2logical.c: New file.\n+\n+2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* c-c++-common/gomp/pr99928-3.c: Remove all xfails.\n+\t* c-c++-common/gomp/pr99928-15.c: New test.\n+\n+2021-05-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/99928\n+\t* c-c++-common/gomp/pr99928-6.c: Remove all xfails.\n+\t* c-c++-common/gomp/pr99928-13.c: New test.\n+\t* c-c++-common/gomp/pr99928-14.c: New test.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* c-c++-common/goacc/privatization-1-compute-loop.c: Update.\n+\t* c-c++-common/goacc/privatization-1-compute.c: Likewise.\n+\t* c-c++-common/goacc/privatization-1-routine_gang-loop.c:\n+\tLikewise.\n+\t* c-c++-common/goacc/privatization-1-routine_gang.c: Likewise.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* c-c++-common/goacc/privatization-1-compute-loop.c: New file.\n+\t* c-c++-common/goacc/privatization-1-compute.c: Likewise.\n+\t* c-c++-common/goacc/privatization-1-routine_gang-loop.c:\n+\tLikewise.\n+\t* c-c++-common/goacc/privatization-1-routine_gang.c: Likewise.\n+\t* gfortran.dg/goacc/privatization-1-compute-loop.f90: Likewise.\n+\t* gfortran.dg/goacc/privatization-1-compute.f90: Likewise.\n+\t* gfortran.dg/goacc/privatization-1-routine_gang-loop.f90:\n+\tLikewise.\n+\t* gfortran.dg/goacc/privatization-1-routine_gang.f90: Likewise.\n+\t* c-c++-common/goacc-gomp/nesting-1.c: Update.\n+\t* c-c++-common/goacc/private-reduction-1.c: Likewise.\n+\t* gfortran.dg/goacc/private-3.f95: Likewise.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_effective_target___OPTIMIZE__):\n+\tNew proc.\n+\t* gcc.c-torture/compile/ssa-unused-1.c: New file.\n+\n+2021-05-21  Richard Biener  <rguenther@suse.de>\n+\t    H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/pr90773-24.c: New test.\n+\t* gcc.target/i386/pr90773-25.c: Likewise.\n+\n+2021-05-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\t* g++.target/i386/pr100637-1b.C: New test.\n+\t* g++.target/i386/pr100637-1w.C: Ditto.\n+\t* gcc.target/i386/pr100637-2b.c: Ditto.\n+\t* gcc.target/i386/pr100637-2w.c: Ditto.\n+\n+2021-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/derived_type7.adb, gnat.dg/derived_type7.ads: New test.\n+\n 2021-05-20  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp2a/desig19.C: New test."}, {"sha": "6b6b8526378c072fa9c4dd05f8ce54bbd77056dc", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,146 @@\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* testsuite/libgomp.oacc-c-c++-common/static-variable-1.c: Update.\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* testsuite/libgomp.oacc-fortran/private-atomic-1-vector.f90: New\n+\tfile.\n+\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: Update.\n+\t* testsuite/libgomp.oacc-c-c++-common/host_data-7.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-local-worker-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-gang-6.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-vector-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-2.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-3.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-4.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-5.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-6.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/kernels-private-vars-loop-worker-7.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-g-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-g-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-gwv-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-g-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-gwv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-v-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-red-wv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-v-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-wv-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/private-atomic-1-gang.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/private-atomic-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/private-variables.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/routine-4.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/static-variable-1.c:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-3.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/declare-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/host_data-5.F90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/if-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-1.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-2.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-3.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-gang-6.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-1.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-vector-2.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-1.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-2.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-3.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-4.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-5.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-6.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/kernels-private-vars-loop-worker-7.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/optional-private.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/private-atomic-1-gang.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/private-atomic-1-worker.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/private-variables.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/routine-7.f90: Likewise.\n+\n+2021-05-21  Julian Brown  <julian@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/90115\n+\t* testsuite/libgomp.oacc-c-c++-common/private-atomic-1-gang.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-fortran/private-atomic-1-gang.f90:\n+\tLikewise.\n+\t* testsuite/libgomp.oacc-fortran/private-atomic-1-worker.f90:\n+\tLikewise.\n+\n+2021-05-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: Don't skip\n+\tfor nvptx offloading.\n+\n+2021-05-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/privatized-ref-2.f90: New.\n+\n 2021-05-19  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR target/83812"}, {"sha": "87be850b4245ebbf4354c1da096e2e7c729dedbc", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,11 @@\n+2021-05-21  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR sanitizer/100379\n+\t* sanitizer_common/sanitizer_common_interceptors_ioctl.inc: Cherry-pick\n+\tllvm-project revision f7c5351552387bd43f6ca3631016d7f0dfe0f135.\n+\t* sanitizer_common/sanitizer_platform_limits_posix.cpp: Likewise.\n+\t* sanitizer_common/sanitizer_platform_limits_posix.h: Likewise.\n+\n 2021-05-13  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* LOCAL_PATCHES: Add Darwin patch for __builtin_os_log_format."}, {"sha": "947b35df7c7fce635e09b41ab8d8123ad89aa7ff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2832d51b383392e961373fb7067a73c6dfdc7cb1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2832d51b383392e961373fb7067a73c6dfdc7cb1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2832d51b383392e961373fb7067a73c6dfdc7cb1", "patch": "@@ -1,3 +1,18 @@\n+2021-05-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100606\n+\t* include/std/ranges (drop_while_view::begin): Assert the\n+\tprecondition added by LWG 3490.\n+\n+2021-05-21  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/100690\n+\t* include/std/ranges (iota_view::_Sentinel::_M_distance_from):\n+\tSplit out this member function from ...\n+\t(iota_view::_Sentinel::operator-): ... here, for sake of access\n+\tcontrol.\n+\t* testsuite/std/ranges/iota/iota_view.cc (test05): New test.\n+\n 2021-05-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/random.tcc (__representable_as_double)"}]}