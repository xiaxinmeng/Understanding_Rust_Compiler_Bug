{"sha": "c936fd32559244c7c71137a743a22cb8af9edac8", "node_id": "C_kwDOANBUbNoAKGM5MzZmZDMyNTU5MjQ0YzdjNzExMzdhNzQzYTIyY2I4YWY5ZWRhYzg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-05T15:59:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-05T15:59:54Z"}, "message": "Merge #1217\n\n1217: Fix size used in unsized adjustments r=philberty a=philberty\n\nWhen we coerce from an array to a slice we take the full capacity of the\r\narray as the size to the FatPtr slice object but this was off by one. This\r\nThe TYPE_MAX_VALUE is not the correct method of accessing this but instead\r\nit needs to take into account other values to get the correct HOST_WIDE_INT\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "ddb5eb411683a12aa9996566605566f4a5c6b3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddb5eb411683a12aa9996566605566f4a5c6b3a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c936fd32559244c7c71137a743a22cb8af9edac8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJic/R6CRBK7hj4Ov3rIwAAwjYIAGvAEAZLIOCGtzSmCVDx7hOb\nr5zfiVlNmHG2jnJTTjbNzzrwEt58CzZzMAEwu0mNo3ezUZ1L7ixRv1O4a1HZKKcu\np5TjNV3whgpR1ydEe4aUCFB3t/uq/odGlKf6x9mNkv1ckXaxMIJnB2+eb2EfL8ux\n0APjT4XMlEO0IeKMQAHfu1JCL5+VVjuV9PW8S3k6S4jAc7fTVdlfv74VU+PjkqNV\nXnYqMc86B97FBoe/VszC+tWLa1PCdMDI4V/4HFHcSGs5ZzxAUEoWRjDsZk0ztNjl\n7f1smC/SoncyiZtxVL0D1wlcS1Vbd23XtMBhMZgU/EiN29GLS925uncOU8LpzWg=\n=jyVV\n-----END PGP SIGNATURE-----\n", "payload": "tree ddb5eb411683a12aa9996566605566f4a5c6b3a6\nparent af031b081fcd26f9fcb3e4a561f5a3d98158e163\nparent f5bceb679420b999aa63c1b34dd0e0075cf9c5fd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1651766394 +0000\ncommitter GitHub <noreply@github.com> 1651766394 +0000\n\nMerge #1217\n\n1217: Fix size used in unsized adjustments r=philberty a=philberty\n\nWhen we coerce from an array to a slice we take the full capacity of the\r\narray as the size to the FatPtr slice object but this was off by one. This\r\nThe TYPE_MAX_VALUE is not the correct method of accessing this but instead\r\nit needs to take into account other values to get the correct HOST_WIDE_INT\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c936fd32559244c7c71137a743a22cb8af9edac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c936fd32559244c7c71137a743a22cb8af9edac8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c936fd32559244c7c71137a743a22cb8af9edac8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af031b081fcd26f9fcb3e4a561f5a3d98158e163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af031b081fcd26f9fcb3e4a561f5a3d98158e163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af031b081fcd26f9fcb3e4a561f5a3d98158e163"}, {"sha": "f5bceb679420b999aa63c1b34dd0e0075cf9c5fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5bceb679420b999aa63c1b34dd0e0075cf9c5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5bceb679420b999aa63c1b34dd0e0075cf9c5fd"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "1cf4e3d549904e634cc21f547a30911e3f4d6520", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c936fd32559244c7c71137a743a22cb8af9edac8/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c936fd32559244c7c71137a743a22cb8af9edac8/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=c936fd32559244c7c71137a743a22cb8af9edac8", "patch": "@@ -1348,7 +1348,13 @@ HIRCompileBase::resolve_unsized_adjustment (Resolver::Adjustment &adjustment,\n \n   // fetch the size from the domain\n   tree domain = TYPE_DOMAIN (expr_type);\n-  tree size = TYPE_MAX_VALUE (domain);\n+  unsigned HOST_WIDE_INT array_size\n+    = wi::ext (wi::to_offset (TYPE_MAX_VALUE (domain))\n+\t\t - wi::to_offset (TYPE_MIN_VALUE (domain)) + 1,\n+\t       TYPE_PRECISION (TREE_TYPE (domain)),\n+\t       TYPE_SIGN (TREE_TYPE (domain)))\n+\t.to_uhwi ();\n+  tree size = build_int_cst (size_type_node, array_size);\n \n   return ctx->get_backend ()->constructor_expression (fat_pointer, false,\n \t\t\t\t\t\t      {data, size}, -1, locus);"}]}