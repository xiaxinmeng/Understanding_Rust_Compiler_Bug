{"sha": "12584362013f275d27340d78253339eef6f5d5c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI1ODQzNjIwMTNmMjc1ZDI3MzQwZDc4MjUzMzM5ZWVmNmY1ZDVjOQ==", "commit": {"author": {"name": "Han Shen", "email": "shenhan@gcc.gnu.org", "date": "2013-05-07T23:33:40Z"}, "committer": {"name": "Han Shen", "email": "shenhan@gcc.gnu.org", "date": "2013-05-07T23:33:40Z"}, "message": "2013-05-07  Han Shen  <shenhan@google.com>\n\n    Added 2 missing files that should be included in the previous\n    submitted patch trunk@r198699.\n\nFrom-SVN: r198700", "tree": {"sha": "62c64dab614f012514aeb5391bf96d49223c2b95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c64dab614f012514aeb5391bf96d49223c2b95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12584362013f275d27340d78253339eef6f5d5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12584362013f275d27340d78253339eef6f5d5c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12584362013f275d27340d78253339eef6f5d5c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12584362013f275d27340d78253339eef6f5d5c9/comments", "author": null, "committer": null, "parents": [{"sha": "f6bc1c4a12af78d96c951547d9693e6e805162da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bc1c4a12af78d96c951547d9693e6e805162da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bc1c4a12af78d96c951547d9693e6e805162da"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "a4f0f8163103ae107cabc293954c15b7794b816c", "filename": "gcc/testsuite/g++.dg/fstack-protector-strong.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12584362013f275d27340d78253339eef6f5d5c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffstack-protector-strong.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12584362013f275d27340d78253339eef6f5d5c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffstack-protector-strong.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ffstack-protector-strong.C?ref=12584362013f275d27340d78253339eef6f5d5c9", "patch": "@@ -0,0 +1,35 @@\n+/* Test that stack protection is done on chosen functions. */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fstack-protector-strong\" } */\n+\n+class A\n+{\n+public:\n+  A() {}\n+  ~A() {}\n+  void method();\n+  int state;\n+};\n+\n+/* Frame address exposed to A::method via \"this\". */\n+int\n+foo1 ()\n+{\n+  A a;\n+  a.method ();\n+  return a.state;\n+}\n+\n+/* Possible destroying foo2's stack via &a. */\n+int\n+global_func (A& a);\n+\n+/* Frame address exposed to global_func. */\n+int foo2 ()\n+{\n+  A a;\n+  return global_func (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 2 } } */"}, {"sha": "c5a52e59a0d1fbb2c53bd8b3e902dbc13e66336a", "filename": "gcc/testsuite/gcc.dg/fstack-protector-strong.c", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12584362013f275d27340d78253339eef6f5d5c9/gcc%2Ftestsuite%2Fgcc.dg%2Ffstack-protector-strong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12584362013f275d27340d78253339eef6f5d5c9/gcc%2Ftestsuite%2Fgcc.dg%2Ffstack-protector-strong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffstack-protector-strong.c?ref=12584362013f275d27340d78253339eef6f5d5c9", "patch": "@@ -0,0 +1,135 @@\n+/* Test that stack protection is done on chosen functions. */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* rs6000-*-* s390x-*-* } } */\n+/* { dg-options \"-O2 -fstack-protector-strong\" } */\n+\n+#include<string.h>\n+#include<stdlib.h>\n+\n+extern int g0;\n+extern int* pg0;\n+int\n+goo (int *);\n+int\n+hoo (int);\n+\n+/* Function frame address escaped function call. */\n+int\n+foo1 ()\n+{\n+  int i;\n+  return goo (&i);\n+}\n+\n+struct ArrayStruct\n+{\n+  int a;\n+  int array[10];\n+};\n+\n+struct AA\n+{\n+  int b;\n+  struct ArrayStruct as;\n+};\n+\n+/* Function frame contains array. */\n+int\n+foo2 ()\n+{\n+  struct AA aa;\n+  int i;\n+  for (i = 0; i < 10; ++i)\n+    {\n+      aa.as.array[i] = i * (i-1) + i / 2;\n+    }\n+  return aa.as.array[5];\n+}\n+\n+/* Address computation based on a function frame address. */\n+int\n+foo3 ()\n+{\n+  int a;\n+  int *p;\n+  p = &a + 5;\n+  return goo (p);\n+}\n+\n+/* Address cast based on a function frame address. */\n+int\n+foo4 ()\n+{\n+  int a;\n+  return goo (g0 << 2 ? (int *)(3 * (long)(void *)(&a)) : 0);\n+}\n+\n+/* Address cast based on a local array. */\n+int\n+foo5 ()\n+{\n+  short array[10];\n+  return goo ((int *)(array + 5));\n+}\n+\n+struct BB\n+{\n+  int one;\n+  int two;\n+  int three;\n+};\n+\n+/* Address computaton based on a function frame address.*/\n+int\n+foo6 ()\n+{\n+  struct BB bb;\n+  return goo (&bb.one + sizeof(int));\n+}\n+\n+/* Function frame address escaped via global variable. */\n+int\n+foo7 ()\n+{\n+  int a;\n+  pg0 = &a;\n+  goo (pg0);\n+  return *pg0;\n+}\n+\n+/* Check that this covers -fstack-protector. */\n+int\n+foo8 ()\n+{\n+  char base[100];\n+  memcpy ((void *)base, (const void *)pg0, 105);\n+  return (int)(base[32]);\n+}\n+\n+/* Check that this covers -fstack-protector. */\n+int\n+foo9 ()\n+{\n+  char* p = alloca (100);\n+  return goo ((int *)(p + 50));\n+}\n+\n+int\n+global2 (struct BB* pbb);\n+\n+/* Address taken on struct. */\n+int\n+foo10 ()\n+{\n+  struct BB bb;\n+  int i;\n+  bb.one = global2 (&bb);\n+  for (i = 0; i < 10; ++i)\n+    {\n+      bb.two = bb.one + bb.two;\n+      bb.three = bb.one + bb.two + bb.three;\n+    }\n+  return bb.three;\n+}\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 10 } } */"}]}