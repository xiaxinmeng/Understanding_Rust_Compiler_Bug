{"sha": "46c895ac0b9468a53f08e1875b13aca83227ec5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjODk1YWMwYjk0NjhhNTNmMDhlMTg3NWIxM2FjYTgzMjI3ZWM1ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-01-02T13:55:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-01-02T13:55:23Z"}, "message": "re PR c++/3716 (Template parameters that are pointers to member functions)\n\ncp:\n\tPR c++/3716\n\t* pt.c (tsubst_aggr_type): Move pmf handling into tsubst.\n\t(tsubst, case POINTER_TYPE): Handle pmfs here.\n\t(tsubst, case OFFSET_TYPE): Check it is not an offset to\n\treference. If it is offset to FUNCTION_TYPE, create a METHOD_TYPE.\ntestsuite:\n\t* g++.dg/template/ptrmem1.C: New test.\n\t* g++.dg/template/ptrmem2.C: New test.\n\nFrom-SVN: r48471", "tree": {"sha": "1e7c6a62af4480d37032a64370d64099ab6fab12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e7c6a62af4480d37032a64370d64099ab6fab12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46c895ac0b9468a53f08e1875b13aca83227ec5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c895ac0b9468a53f08e1875b13aca83227ec5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c895ac0b9468a53f08e1875b13aca83227ec5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c895ac0b9468a53f08e1875b13aca83227ec5d/comments", "author": null, "committer": null, "parents": [{"sha": "833aa4c4149ce0fa84968a03fe51a13575381d79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833aa4c4149ce0fa84968a03fe51a13575381d79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833aa4c4149ce0fa84968a03fe51a13575381d79"}], "stats": {"total": 101, "additions": 91, "deletions": 10}, "files": [{"sha": "c259242293482044b535644c633caabbe669217e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=46c895ac0b9468a53f08e1875b13aca83227ec5d", "patch": "@@ -1,3 +1,11 @@\n+2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/3716\n+\t* pt.c (tsubst_aggr_type): Move pmf handling into tsubst.\n+\t(tsubst, case POINTER_TYPE): Handle pmfs here.\n+\t(tsubst, case OFFSET_TYPE): Check it is not an offset to\n+\treference. If it is offset to FUNCTION_TYPE, create a METHOD_TYPE.\n+\n 2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/35"}, {"sha": "a60cacfded71c50d754bbdce487d94effe30805c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=46c895ac0b9468a53f08e1875b13aca83227ec5d", "patch": "@@ -5452,12 +5452,7 @@ tsubst_aggr_type (t, args, complain, in_decl, entering_scope)\n     {\n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (t))\n-\t{\n-\t  tree r = build_ptrmemfunc_type\n-\t    (tsubst (TYPE_PTRMEMFUNC_FN_TYPE (t), args, complain, in_decl));\n-\t  return cp_build_qualified_type_real (r, TYPE_QUALS (t),\n-\t\t\t\t\t       complain);\n-\t}\n+\treturn tsubst (TYPE_PTRMEMFUNC_FN_TYPE (t), args, complain, in_decl);\n \n       /* else fall through */\n     case ENUMERAL_TYPE:\n@@ -6150,7 +6145,7 @@ tsubst_function_type (t, args, complain, in_decl)\n   /* The TYPE_CONTEXT is not used for function/method types.  */\n   my_friendly_assert (TYPE_CONTEXT (t) == NULL_TREE, 0);\n \n-  /* Substitue the return type.  */\n+  /* Substitute the return type.  */\n   return_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n   if (return_type == error_mark_node)\n     return error_mark_node;\n@@ -6565,7 +6560,7 @@ tsubst (t, args, complain, in_decl)\n       {\n \tenum tree_code code;\n \n-\tif (type == TREE_TYPE (t))\n+\tif (type == TREE_TYPE (t) && TREE_CODE (type) != METHOD_TYPE)\n \t  return t;\n \n \tcode = TREE_CODE (t);\n@@ -6604,7 +6599,11 @@ tsubst (t, args, complain, in_decl)\n \t    return error_mark_node;\n \t  }\n \telse if (code == POINTER_TYPE)\n-\t  r = build_pointer_type (type);\n+\t  {\n+\t    r = build_pointer_type (type);\n+\t    if (TREE_CODE (type) == METHOD_TYPE)\n+\t      r = build_ptrmemfunc_type (r);\n+\t  }\n \telse\n \t  r = build_reference_type (type);\n \tr = cp_build_qualified_type_real (r, TYPE_QUALS (t), complain);\n@@ -6632,7 +6631,30 @@ tsubst (t, args, complain, in_decl)\n \t\t\tr);\n \t    return error_mark_node;\n \t  }\n-\treturn build_offset_type (r, type);\n+\tif (TREE_CODE (type) == REFERENCE_TYPE)\n+\t  {\n+\t    if (complain)\n+\t      error (\"creating pointer to member reference type `%T'\", type);\n+\t    \n+\t    return error_mark_node;\n+\t  }\n+\tmy_friendly_assert (TREE_CODE (type) != METHOD_TYPE, 20011231);\n+\tif (TREE_CODE (type) == FUNCTION_TYPE)\n+\t  /* This is really a method type. The cv qualifiers of the\n+\t     this pointer should _not_ be determined by the cv\n+\t     qualifiers of the class type.  They should be held\n+\t     somewhere in the FUNCTION_TYPE, but we don't do that at\n+\t     the moment.  Consider\n+\t        typedef void (Func) () const;\n+\n+\t\ttemplate <typename T1> void Foo (Func T1::*);\n+\n+\t      */\n+\t  return build_cplus_method_type (TYPE_MAIN_VARIANT (r),\n+\t\t\t\t\t  TREE_TYPE (type),\n+\t\t\t\t\t  TYPE_ARG_TYPES (type));\n+\telse\n+\t  return build_offset_type (r, type);\n       }\n     case FUNCTION_TYPE:\n     case METHOD_TYPE:"}, {"sha": "cdd244e48bc089422274a423125249ee5919237b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46c895ac0b9468a53f08e1875b13aca83227ec5d", "patch": "@@ -1,5 +1,8 @@\n 2002-01-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* g++.dg/template/ptrmem1.C: New test.\n+\t* g++.dg/template/ptrmem2.C: New test.\n+\n \t* g++.dg/template/ntp.C: New test.\n \n \t* g++.dg/other/component1.C: New test."}, {"sha": "ebd6a201a97d0becbade2c61415456fc953ceafc", "filename": "gcc/testsuite/g++.dg/template/ptrmem1.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem1.C?ref=46c895ac0b9468a53f08e1875b13aca83227ec5d", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 31 Dec 2001 <nathan@codesourcery.com>\n+\n+// PR 3716 tsubsting a pointer to member function did not create a\n+// pointer to member function.\n+\n+template <class C, class T, T C::*M>\n+struct Closure\n+{\n+  T operator() (C & c) const { return (c.*M); }\n+};\n+\n+template <class C, class T, T (C::* M)()>\n+struct Closure<C, T (), M>\n+{\n+  T operator()(C & c) const { return (c.*M)(); }\n+};\n+\n+struct A\n+{\n+  int get();\n+};\n+  \n+static Closure<A, int (), & A::get> get_closure;\n+\n+\n+void Foo ()\n+{\n+  A a;\n+  get_closure (a);\n+}"}, {"sha": "23a4ad9380b4cb012c02189d33d3f716b177df6f", "filename": "gcc/testsuite/g++.dg/template/ptrmem2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c895ac0b9468a53f08e1875b13aca83227ec5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem2.C?ref=46c895ac0b9468a53f08e1875b13aca83227ec5d", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 31 Dec 2001 <nathan@codesourcery.com>\n+\n+// We'd tsubst a pointer to member reference\n+\n+struct A {};\n+\n+template <typename T> T A::* Foo ();\n+\n+void Baz ()\n+{\n+  Foo <int &> (); // { dg-error \"no matching function\" \"\" }\n+}"}]}