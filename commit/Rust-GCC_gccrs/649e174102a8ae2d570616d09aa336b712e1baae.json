{"sha": "649e174102a8ae2d570616d09aa336b712e1baae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ5ZTE3NDEwMmE4YWUyZDU3MDYxNmQwOWFhMzM2YjcxMmUxYmFhZQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-02T00:58:45Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-02T00:58:45Z"}, "message": "PR middle-end/92721 - checking ICE on attribute access redeclaration\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/92721\n\t* c-attribs.c (append_access_attrs): Correctly handle attribute.\n\t(handle_access_attribute): Same.\n\ngcc/ChangeLog:\n\n\tPR c++/92721\n\t* calls.c (init_attr_rdwr_indices): Correctly handle attribute.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/92721\n\tg++.dg/ext/attr-access.C: New test.", "tree": {"sha": "0a9d51cdfc11c504a79a9f42d59f35f97847f62e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9d51cdfc11c504a79a9f42d59f35f97847f62e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/649e174102a8ae2d570616d09aa336b712e1baae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e174102a8ae2d570616d09aa336b712e1baae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649e174102a8ae2d570616d09aa336b712e1baae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649e174102a8ae2d570616d09aa336b712e1baae/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726e292d410fc29812a95eb6d88a2ceb82d9080d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/726e292d410fc29812a95eb6d88a2ceb82d9080d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/726e292d410fc29812a95eb6d88a2ceb82d9080d"}], "stats": {"total": 151, "additions": 149, "deletions": 2}, "files": [{"sha": "74a8b691ac9600c4e2697f6d4af5c5e7e359c4a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=649e174102a8ae2d570616d09aa336b712e1baae", "patch": "@@ -1,3 +1,8 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/92721\n+\t* calls.c (init_attr_rdwr_indices): Correctly handle attribute.\n+\n 2020-03-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/93829"}, {"sha": "434bac6408da27c846931b5bd3335623667bc5c6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=649e174102a8ae2d570616d09aa336b712e1baae", "patch": "@@ -1,3 +1,9 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/92721\n+\t* c-attribs.c (append_access_attrs): Correctly handle attribute.\n+\t(handle_access_attribute): Same.\n+\n 2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/93858"}, {"sha": "9abf81d02481010de0eba15eaba22d63344209ab", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=649e174102a8ae2d570616d09aa336b712e1baae", "patch": "@@ -3845,6 +3845,10 @@ append_access_attrs (tree t, tree attrs, const char *attrstr,\n \n   if (tree acs = lookup_attribute (\"access\", attrs))\n     {\n+      /* The TREE_VALUE of an attribute is a TREE_LIST whose TREE_VALUE\n+\t is the attribute argument's value.  */\n+      acs = TREE_VALUE (acs);\n+      gcc_assert (TREE_CODE (acs) == TREE_LIST);\n       acs = TREE_VALUE (acs);\n       gcc_assert (TREE_CODE (acs) == STRING_CST);\n \n@@ -3971,11 +3975,20 @@ handle_access_attribute (tree *node, tree name, tree args,\n       return NULL_TREE;\n     }\n \n+  tree access_mode = TREE_VALUE (args);\n+  if (TREE_CODE (access_mode) == STRING_CST)\n+    {\n+      /* This must be a recursive call to handle the condensed internal\n+\t form of the attribute (see below).  Since all validation has\n+\t been done simply return here, accepting the attribute as is.  */\n+      *no_add_attrs = false;\n+      return NULL_TREE;\n+    }\n+\n   /* Set to true when the access mode has the form of a function call\n      as in 'attribute (read_only (1, 2))'.  That's an easy mistake to\n      make and so worth a special diagnostic.  */\n   bool funcall = false;\n-  tree access_mode = TREE_VALUE (args);\n   if (TREE_CODE (access_mode) == CALL_EXPR)\n     {\n       access_mode = CALL_EXPR_FN (access_mode);\n@@ -4170,6 +4183,7 @@ handle_access_attribute (tree *node, tree name, tree args,\n   /* Replace any existing access attribute specification with\n      the concatenation above.  */\n   attrs = remove_attribute (IDENTIFIER_POINTER (name), attrs);\n+  new_attrs = tree_cons (NULL_TREE, new_attrs, NULL_TREE);\n   new_attrs = tree_cons (name, new_attrs, attrs);\n \n   if (node[1])\n@@ -4182,11 +4196,14 @@ handle_access_attribute (tree *node, tree name, tree args,\n \treturn NULL_TREE;\n \n       attrs = remove_attribute (IDENTIFIER_POINTER (name), attrs);\n+      new_attrs = tree_cons (NULL_TREE, new_attrs, NULL_TREE);\n       new_attrs = tree_cons (name, new_attrs, attrs);\n       TYPE_ATTRIBUTES (TREE_TYPE (node[1])) = new_attrs;\n     }\n \n-  TYPE_ATTRIBUTES (*node) = new_attrs;\n+  /* Recursively call self to \"replace\" the documented/external form\n+     of the attribute with the condensend internal form.  */\n+  decl_attributes (node, new_attrs, flags);\n   return NULL_TREE;\n }\n "}, {"sha": "4c3a8f3c215d58918c07f3bd146692f946282d8b", "filename": "gcc/calls.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=649e174102a8ae2d570616d09aa336b712e1baae", "patch": "@@ -1891,8 +1891,13 @@ init_attr_rdwr_indices (rdwr_map *rwm, tree fntype)\n   if (!access)\n     return;\n \n+  /* The TREE_VALUE of an attribute is a TREE_LIST whose TREE_VALUE\n+     is the attribute argument's value.  */\n   tree mode = TREE_VALUE (access);\n+  gcc_assert (TREE_CODE (mode) == TREE_LIST);\n+  mode = TREE_VALUE (mode);\n   gcc_assert (TREE_CODE (mode) == STRING_CST);\n+\n   const char *modestr = TREE_STRING_POINTER (mode);\n   for (const char *m = modestr; *m; )\n     {"}, {"sha": "5c43024244558b7a59e812250e260b7142f22ef3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=649e174102a8ae2d570616d09aa336b712e1baae", "patch": "@@ -1,3 +1,8 @@\n+2020-03-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/92721\n+\tg++.dg/ext/attr-access.C: New test.\n+\n 2020-03-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/93926"}, {"sha": "fcb54cd8861b4fc7d277e0aac4b8067d0032b33a", "filename": "gcc/testsuite/g++.dg/ext/attr-access.C", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-access.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649e174102a8ae2d570616d09aa336b712e1baae/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-access.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-access.C?ref=649e174102a8ae2d570616d09aa336b712e1baae", "patch": "@@ -0,0 +1,109 @@\n+/* PR middle-end/92721 - checking ICE on attribute access redeclaration\n+   Test to verify the handling of attribute access combining multiple\n+   declarations of the same function.\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wall -ftrack-macro-expansion=0\" } */\n+\n+#define RO(...)  __attribute__ ((access (read_only, __VA_ARGS__)))\n+#define RW(...)  __attribute__ ((access (read_write, __VA_ARGS__)))\n+#define WO(...)  __attribute__ ((access (write_only, __VA_ARGS__)))\n+\n+typedef __INT32_TYPE__ int32_t;\n+\n+void RO (1) RO (1) rop1_ror2 (const int32_t*, const int32_t&);\n+void RO (1) RO (2) rop1_ror2 (const int32_t*, const int32_t&);\n+void RO (2) RO (1) rop1_ror2 (const int32_t*, const int32_t&);\n+void RO (2) RO (2) rop1_ror2 (const int32_t*, const int32_t&);\n+\n+void RW (1) RW (1) rdwrp1_rdwrr2 (int32_t*, int32_t&);\n+void RW (1) RW (2) rdwrp1_rdwrr2 (int32_t*, int32_t&);\n+void RW (2) RW (1) rdwrp1_rdwrr2 (int32_t*, int32_t&);\n+void RW (2) RW (2) rdwrp1_rdwrr2 (int32_t*, int32_t&);\n+\n+void WO (1) WO (1) wop1_wor2 (int32_t*, int32_t&);\n+void WO (1) WO (2) wop1_wor2 (int32_t*, int32_t&);\n+void WO (2) WO (1) wop1_wor2 (int32_t*, int32_t&);\n+void WO (2) WO (2) wop1_wor2 (int32_t*, int32_t&);\n+\n+\n+// Verify that everything works even with no optimization.\n+\n+void call_rop1_ror2_O0 (void)\n+{\n+  const int32_t x[1] = { };\n+\n+  rop1_ror2 (x, x[0]);\n+  rop1_ror2 (x, x[1]);            // { dg-warning \"reading 4 bytes from a region of size 0\" }\n+  rop1_ror2 (x + 1, x[0]);        // { dg-warning \"reading 4 bytes from a region of size 0\" }\n+}\n+\n+void call_rdwrp1_rdwrr2_O0 (void)\n+{\n+  int32_t x[1];\n+\n+  rdwrp1_rdwrr2 (x, x[0]);\n+  rdwrp1_rdwrr2 (x, x[1]);        // { dg-warning \"writing 4 bytes into a region of size 0\" }\n+  rdwrp1_rdwrr2 (x + 1, x[0]);    // { dg-warning \"writing 4 bytes into a region of size 0\" }\n+}\n+\n+void call_wop1_wor2_O0 (void)\n+{\n+  int32_t x[1];\n+\n+  wop1_wor2 (x, x[0]);\n+  wop1_wor2 (x, x[1]);            // { dg-warning \"writing 4 bytes into a region of size 0\" }\n+  wop1_wor2 (x + 1, x[0]);        // { dg-warning \"writing 4 bytes into a region of size 0\" }\n+}\n+\n+\n+// Verify that everything still works with -O1.\n+\n+#pragma GCC optimize \"1\"\n+\n+void call_rop1_ror2_O1 (void)\n+{\n+  const int32_t x[1] = { 1 };\n+  const int32_t *p0 = x, &r0 = x[0];\n+  const int32_t *p1 = (const int32_t*)((const char*)p0 + 1);\n+  const int32_t &r2 = *(const int32_t*)((const char*)p1 + 1);\n+\n+  rop1_ror2 (x, x[0]);\n+  rop1_ror2 (x, x[1]);            // { dg-warning \"reading 4 bytes from a region of size 0\" }\n+  rop1_ror2 (x + 1, x[0]);        // { dg-warning \"reading 4 bytes from a region of size 0\" }\n+\n+  rop1_ror2 (p0, r0);\n+  rop1_ror2 (p0, r2);             // { dg-warning \"reading 4 bytes from a region of size 2\" }\n+  rop1_ror2 (p1, r0);             // { dg-warning \"reading 4 bytes from a region of size 3\" }\n+}\n+\n+void call_rdwrp1_rdwrr2_O1 (void)\n+{\n+  int32_t x[1];\n+  int32_t *p0 = x, &r0 = x[0];\n+  int32_t *p1 = (int32_t*)((char*)p0 + 1);\n+  int32_t &r2 = *(int32_t*)((char*)p1 + 1);\n+\n+  rdwrp1_rdwrr2 (x, x[0]);\n+  rdwrp1_rdwrr2 (x, x[1]);        // { dg-warning \"writing 4 bytes into a region of size 0\" }\n+  rdwrp1_rdwrr2 (x + 1, x[0]);    // { dg-warning \"writing 4 bytes into a region of size 0\" }\n+\n+  rdwrp1_rdwrr2 (p0, r0);\n+  rdwrp1_rdwrr2 (p0, r2);         // { dg-warning \"writing 4 bytes into a region of size 2\" }\n+  rdwrp1_rdwrr2 (p1, r0);         // { dg-warning \"writing 4 bytes into a region of size 3\" }\n+}\n+\n+void call_wop1_wor2_O1 (void)\n+{\n+  int32_t x[1];\n+  int32_t *p0 = x, &r0 = x[0];\n+  int32_t *p1 = (int32_t*)((char*)p0 + 1);\n+  int32_t &r2 = *(int32_t*)((char*)p1 + 1);\n+\n+  wop1_wor2 (x, x[0]);\n+  wop1_wor2 (x, x[1]);            // { dg-warning \"writing 4 bytes into a region of size 0\" }\n+  wop1_wor2 (x + 1, x[0]);        // { dg-warning \"writing 4 bytes into a region of size 0\" }\n+\n+  wop1_wor2 (p0, r0);\n+  wop1_wor2 (p0, r2);             // { dg-warning \"writing 4 bytes into a region of size 2\" }\n+  wop1_wor2 (p1, r0);             // { dg-warning \"writing 4 bytes into a region of size 3\" }\n+}"}]}