{"sha": "3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UxNGNkMzAxYzYzZjExYjhlZTViNzA1NTUzM2M3Yjc0NWFjOWFlMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-12-24T22:20:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-12-24T22:20:14Z"}, "message": "re PR c++/7964 (ICE in build_base_path)\n\ncp:\n\tPR C++/7964\n\t* cp-tree.h (resolve_scoped_fn_name): Prototype.\n\t* call.c (resolve_scoped_fn_name): New function. Deal with\n\tmore template expansion. Broken out of ...\n\t* parse.y (parse_finish_call_expr): ... here. Call it.\n\t* decl2.c (build_expr_from_tree, CALL_EXPR): Use\n\tresolve_scoped_fn_name and build_call_from_tree.\ntestsuite:\n\t* g++.dg/lookup/scoped3.C: New test.\n\nFrom-SVN: r60483", "tree": {"sha": "50e134b5d0d63ecf9502274ffa30654188d1e851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50e134b5d0d63ecf9502274ffa30654188d1e851"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/comments", "author": null, "committer": null, "parents": [{"sha": "b9201622aed326ee95c8023c8bc697d8adf443ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9201622aed326ee95c8023c8bc697d8adf443ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9201622aed326ee95c8023c8bc697d8adf443ff"}], "stats": {"total": 172, "additions": 110, "deletions": 62}, "files": [{"sha": "3f4c1d0319bb848b93b8b587a8ca5d049bbfd8b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "patch": "@@ -1,5 +1,13 @@\n 2002-12-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR C++/7964\n+\t* cp-tree.h (resolve_scoped_fn_name): Prototype.\n+\t* call.c (resolve_scoped_fn_name): New function. Deal with\n+\tmore template expansion. Broken out of ...\n+\t* parse.y (parse_finish_call_expr): ... here. Call it.\n+\t* decl2.c (build_expr_from_tree, CALL_EXPR): Use\n+\tresolve_scoped_fn_name and build_call_from_tree.\n+\n \tPR c++/9053\n \t* decl.c (duplicate_decls): Templates may be disambiguated by\n \treturn type."}, {"sha": "088cc1e46e5ff08116457d56e30d06f0444bad28", "filename": "gcc/cp/call.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "patch": "@@ -2597,6 +2597,69 @@ build_user_type_conversion (tree totype, tree expr, int flags)\n   return NULL_TREE;\n }\n \n+/* Find the possibly overloaded set of functions corresponding to a\n+   call of the form SCOPE::NAME (...). NAME might be a\n+   TEMPLATE_ID_EXPR, OVERLOAD, _DECL, IDENTIFIER_NODE or LOOKUP_EXPR. */\n+\n+tree\n+resolve_scoped_fn_name (tree scope, tree name)\n+{\n+  tree fn;\n+  tree template_args = NULL_TREE;\n+  bool is_template_id = TREE_CODE (name) == TEMPLATE_ID_EXPR;\n+  \n+  if (is_template_id)\n+    {\n+      template_args = TREE_OPERAND (name, 1);\n+      name = TREE_OPERAND (name, 0);\n+    }\n+  if (TREE_CODE (name) == OVERLOAD)\n+    name = DECL_NAME (get_first_fn (name));\n+  else if (TREE_CODE (name) == LOOKUP_EXPR)\n+    name = TREE_OPERAND (name, 0);\n+  \n+  if (TREE_CODE (scope) == NAMESPACE_DECL)\n+    fn = lookup_namespace_name (scope, name);\n+  else\n+    {\n+      if (!TYPE_BEING_DEFINED (scope)\n+\t  && !COMPLETE_TYPE_P (complete_type (scope)))\n+\t{\n+\t  error (\"incomplete type '%T' cannot be used to name a scope\",\n+\t\t scope);\n+\t  return error_mark_node;\n+\t}\n+      \n+      if (BASELINK_P (name))\n+\tfn = name;\n+      else\n+\tfn = lookup_member (scope, name, /*protect=*/1, /*prefer_type=*/0);\n+      if (fn && current_class_type)\n+\tfn = (adjust_result_of_qualified_name_lookup \n+\t      (fn, scope, current_class_type));\n+    }\n+  \n+  if (!fn)\n+    {\n+      error (\"'%D' has no member named '%E'\", scope, name);\n+      return error_mark_node;\n+    }\n+  if (is_template_id)\n+    {\n+      tree fns = fn;\n+\n+      if (BASELINK_P (fn))\n+\tfns = BASELINK_FUNCTIONS (fns);\n+      fns = build_nt (TEMPLATE_ID_EXPR, fns, template_args);\n+      if (BASELINK_P (fn))\n+\tBASELINK_FUNCTIONS (fn) = fns;\n+      else\n+\tfn = fns;\n+    }\n+  \n+  return fn;\n+}\n+\n /* Do any initial processing on the arguments to a function call.  */\n \n static tree"}, {"sha": "b805f976419d73f7a3372ac156eae0866e1c562e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "patch": "@@ -3547,6 +3547,7 @@ extern tree build_method_call (tree, tree, tree, tree, int);\n extern bool null_ptr_cst_p (tree);\n extern bool sufficient_parms_p (tree);\n extern tree type_decays_to (tree);\n+extern tree resolve_scoped_fn_name (tree, tree);\n extern tree build_user_type_conversion (tree, tree, int);\n extern tree build_new_function_call (tree, tree);\n extern tree build_new_method_call (tree, tree, tree, tree, int);"}, {"sha": "3d717e8475b94cbea1e70eb03a0ec0be0085d012", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "patch": "@@ -3241,16 +3241,18 @@ build_expr_from_tree (t)\n \t{\n \t  tree ref = TREE_OPERAND (t, 0);\n \t  tree name = TREE_OPERAND (ref, 1);\n+\t  tree fn, scope, args;\n \t  \n \t  if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n \t    name = build_nt (TEMPLATE_ID_EXPR,\n \t                     TREE_OPERAND (name, 0),\n \t                     build_expr_from_tree (TREE_OPERAND (name, 1)));\n-\t    \n-\t  return build_member_call\n-\t    (build_expr_from_tree (TREE_OPERAND (ref, 0)),\n-\t     name,\n-\t     build_expr_from_tree (TREE_OPERAND (t, 1)));\n+\n+\t  scope = build_expr_from_tree (TREE_OPERAND (ref, 0));\n+\t  args = build_expr_from_tree (TREE_OPERAND (t, 1));\n+\t  fn = resolve_scoped_fn_name (scope, name);\n+\t  \n+\t  return build_call_from_tree (fn, args, 1);\n \t}\n       else\n \t{"}, {"sha": "d1f9f4d68b4725e17521a9d2974edc4851bcab5b", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 5, "deletions": 56, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "patch": "@@ -4115,79 +4115,28 @@ static tree\n parse_finish_call_expr (tree fn, tree args, int koenig)\n {\n   bool disallow_virtual;\n-  tree template_args;\n-  tree template_id;\n-  tree f;\n \n   if (TREE_CODE (fn) == OFFSET_REF)\n     return build_offset_ref_call_from_tree (fn, args);\n \n   if (TREE_CODE (fn) == SCOPE_REF)\n     {\n-      tree scope;\n-      tree name;\n-\n-      scope = TREE_OPERAND (fn, 0);\n-      name = TREE_OPERAND (fn, 1);\n+      tree scope = TREE_OPERAND (fn, 0);\n+      tree name = TREE_OPERAND (fn, 1);\n \n       if (scope == error_mark_node || name == error_mark_node)\n \treturn error_mark_node;\n       if (!processing_template_decl)\n-\t{\n-\t  if (TREE_CODE (scope) == NAMESPACE_DECL)\n-\t    fn = lookup_namespace_name (scope, name);\n-\t  else\n-\t    {\n-\t      if (!COMPLETE_TYPE_P (scope) && !TYPE_BEING_DEFINED (scope))\n-\t\t{\n-\t\t  error (\"incomplete type '%T' cannot be used to name a scope\",\n-\t\t\t scope);\n-\t\t  return error_mark_node;\n-\t\t}\n-\t      else if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n-\t\t{\n-\t\t  template_id = name;\n-\t\t  template_args = TREE_OPERAND (name, 1);\n-\t\t  name = TREE_OPERAND (name, 0);\n-\t\t}\n-\t      else \n-\t        {\n-\t\t  template_id = NULL_TREE;\n-\t\t  template_args = NULL_TREE;\n-\t\t}\n-\n-\t      if (BASELINK_P (name))\n-\t\tfn = name;\n-\t      else \n-\t\t{\n-\t\t  if (TREE_CODE (name) == OVERLOAD)\n-\t\t    name = DECL_NAME (get_first_fn (name));\n-\t\t  fn = lookup_member (scope, name, /*protect=*/1, \n-\t\t\t\t      /*prefer_type=*/0);\n-\t\t  if (!fn)\n-\t\t    {\n-\t\t      error (\"'%D' has no member named '%E'\", scope, name);\n-\t\t      return error_mark_node;\n-\t\t    }\n-\t\t  \n-\t\t  if (BASELINK_P (fn) && template_id)\n-\t\t    BASELINK_FUNCTIONS (fn) \n-\t\t      = build_nt (TEMPLATE_ID_EXPR,\n-\t\t\t\t  BASELINK_FUNCTIONS (fn),\n-\t\t\t\t  template_args);\n-\t\t}\n-\t      if (current_class_type)\n-\t\tfn = (adjust_result_of_qualified_name_lookup \n-\t\t      (fn, scope, current_class_type));\n-\t    }\n-\t}\n+\tfn = resolve_scoped_fn_name (scope, name);\n       disallow_virtual = true;\n     }\n   else\n     disallow_virtual = false;\n \n   if (koenig && TREE_CODE (fn) == IDENTIFIER_NODE)\n     {\n+      tree f;\n+      \n       /* Do the Koenig lookup.  */\n       fn = do_identifier (fn, 2, args);\n       /* If name lookup didn't find any matching declarations, we've"}, {"sha": "8196168626b8bc36083b2c0e573f16e186463e56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "patch": "@@ -1,5 +1,7 @@\n 2002-12-24  Nathan Sidwell  <nathan@codesourcery.com>\n-\n+\t\n+\t* g++.dg/lookup/scoped3.C: New test.\n+\t\n \t* g++.dg/lookup/decl1.C: New test.\n \t* g++.dg/lookup/decl2.C: New test.\n "}, {"sha": "992f1d1280939da35959ac314dcad448c964380e", "filename": "gcc/testsuite/g++.dg/lookup/scoped3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e14cd301c63f11b8ee5b7055533c7b745ac9ae1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped3.C?ref=3e14cd301c63f11b8ee5b7055533c7b745ac9ae1", "patch": "@@ -0,0 +1,23 @@\n+\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 24 Dec 2002 <nathan@codesourcery.com>\n+\n+// PR 7964. ICE with scoped method call\n+\n+struct A {\n+  virtual void ostr() const;\n+};\n+\n+class B : public virtual A {};\n+\n+template<typename T>\n+struct C : public B\n+{\n+  void ostr() const\n+  {    B::ostr();  }\n+};\n+\n+\n+template C<int>;"}]}