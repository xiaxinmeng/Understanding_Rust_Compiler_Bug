{"sha": "fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyMmMyMGQ1YWU5ZGY1NGE1Zjk2ZjRmNzJkYjcyYTJjNGM4ZTJjNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-06-30T19:27:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-06-30T19:27:19Z"}, "message": "PR jit/66628: add gcc_jit_context_add_command_line_option\n\ngcc/jit/ChangeLog:\n\tPR jit/66628\n\t* docs/cp/topics/contexts.rst (Additional command-line options):\n\tNew section.\n\t* docs/topics/compatibility.rst: New file.\n\t* docs/topics/contexts.rst (Additional command-line options): New\n\tsection.\n\t* docs/topics/index.rst: Add compatibility.rst.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-playback.c (make_fake_args): Add call to\n\tappend_command_line_options.\n\t* jit-recording.c: Within namespace gcc::jit...\n\t(recording::context::~context): Free the optnames within\n\tm_command_line_options.\n\t(recording::context::set_bool_option): Likewise.\n\t(recording::context::add_command_line_option): New method.\n\t(recording::context::append_command_line_options): New method.\n\t(recording::context::dump_reproducer_to_file): Add command-line\n\toptions.\n\t* jit-recording.h: Within namespace gcc::jit...\n\t(recording::context::add_command_line_option): New method.\n\t(recording::context::append_command_line_options): New method.\n\t(recording::context::m_command_line_options): New field.\n\t* libgccjit++.h (gccjit::context::add_command_line_option): New\n\tmethod.\n\t* libgccjit.c (gcc_jit_context_add_command_line_option): New API\n\tentrypoint.\n\t* libgccjit.h (gcc_jit_context_add_command_line_option): New API\n\tentrypoint.\n\t(LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option): New\n\tmacro.\n\t* libgccjit.map: Put existing symbols within LIBGCCJIT_ABI_0; add\n\tLIBGCCJIT_ABI_1 and gcc_jit_context_add_command_line_option.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/66628\n\t* jit.dg/all-non-failing-tests.h: Add note about\n\ttest-extra-options.c.\n\t* jit.dg/test-extra-options.c: New testcase.\n\nFrom-SVN: r225205", "tree": {"sha": "216dcfe8525aa7d749c5a1c65ca69a8493f4dfac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/216dcfe8525aa7d749c5a1c65ca69a8493f4dfac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6314e15e0c5671e71f4511011a125aab3cc3d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6314e15e0c5671e71f4511011a125aab3cc3d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6314e15e0c5671e71f4511011a125aab3cc3d6a"}], "stats": {"total": 1441, "additions": 1047, "deletions": 394}, "files": [{"sha": "b4b66346693a318940b7f03d2e94dd243fed7f89", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -1,3 +1,38 @@\n+2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66628\n+\t* docs/cp/topics/contexts.rst (Additional command-line options):\n+\tNew section.\n+\t* docs/topics/compatibility.rst: New file.\n+\t* docs/topics/contexts.rst (Additional command-line options): New\n+\tsection.\n+\t* docs/topics/index.rst: Add compatibility.rst.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-playback.c (make_fake_args): Add call to\n+\tappend_command_line_options.\n+\t* jit-recording.c: Within namespace gcc::jit...\n+\t(recording::context::~context): Free the optnames within\n+\tm_command_line_options.\n+\t(recording::context::set_bool_option): Likewise.\n+\t(recording::context::add_command_line_option): New method.\n+\t(recording::context::append_command_line_options): New method.\n+\t(recording::context::dump_reproducer_to_file): Add command-line\n+\toptions.\n+\t* jit-recording.h: Within namespace gcc::jit...\n+\t(recording::context::add_command_line_option): New method.\n+\t(recording::context::append_command_line_options): New method.\n+\t(recording::context::m_command_line_options): New field.\n+\t* libgccjit++.h (gccjit::context::add_command_line_option): New\n+\tmethod.\n+\t* libgccjit.c (gcc_jit_context_add_command_line_option): New API\n+\tentrypoint.\n+\t* libgccjit.h (gcc_jit_context_add_command_line_option): New API\n+\tentrypoint.\n+\t(LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option): New\n+\tmacro.\n+\t* libgccjit.map: Put existing symbols within LIBGCCJIT_ABI_0; add\n+\tLIBGCCJIT_ABI_1 and gcc_jit_context_add_command_line_option.\n+\n 2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit-recording.c"}, {"sha": "3bc69afe78c76074a2f38e1f62309b0044141c10", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 607, "deletions": 393, "changes": 1000, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7"}, {"sha": "b26a29d0e5245880310eb8f25a7026fb8517d5dc", "filename": "gcc/jit/docs/cp/topics/contexts.rst", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -196,3 +196,22 @@ Integer options\n   This is a thin wrapper around the C API\n   :c:func:`gcc_jit_context_set_int_option`; the options have the same\n   meaning.\n+\n+Additional command-line options\n+*******************************\n+\n+.. function:: void \\\n+              gccjit::context::add_command_line_option (const char *optname)\n+\n+   Add an arbitrary gcc command-line option to the context for use\n+   when compiling.\n+\n+   This is a thin wrapper around the C API\n+   :c:func:`gcc_jit_context_add_command_line_option`.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_1`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option"}, {"sha": "dff1d0b7424f89546fccda764171800efd75f7e5", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -0,0 +1,90 @@\n+.. Copyright (C) 2015 Free Software Foundation, Inc.\n+   Originally contributed by David Malcolm <dmalcolm@redhat.com>\n+\n+   This is free software: you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation, either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see\n+   <http://www.gnu.org/licenses/>.\n+\n+.. default-domain:: c\n+\n+ABI and API compatibility\n+=========================\n+\n+The libgccjit developers strive for ABI and API backward-compatibility:\n+programs built against libgccjit.so stand a good chance of running\n+without recompilation against newer versions of libgccjit.so, and\n+ought to recompile without modification against newer versions of\n+libgccjit.h.\n+\n+.. note:: The libgccjit++.h C++ API is more experimental, and less\n+          locked-down at this time.\n+\n+API compatibility is achieved by extending the API rather than changing\n+it.  For ABI compatiblity, we avoid bumping the SONAME, and instead use\n+symbol versioning to tag each symbol, so that a binary linked against\n+libgccjit.so is tagged according to the symbols that it uses.\n+\n+For example, :func:`gcc_jit_context_add_command_line_option` was added in\n+``LIBGCCJIT_ABI_1``.  If a client program uses it, this can be detected\n+from metadata by using ``objdump``:\n+\n+.. code-block:: bash\n+\n+   $ objdump -p testsuite/jit/test-extra-options.c.exe | tail -n 8\n+\n+   Version References:\n+     required from libgccjit.so.0:\n+       0x00824161 0x00 04 LIBGCCJIT_ABI_1\n+       0x00824160 0x00 03 LIBGCCJIT_ABI_0\n+     required from libc.so.6:\n+       0x09691a75 0x00 02 GLIBC_2.2.5\n+\n+You can see the symbol tags provided by libgccjit.so using ``objdump``:\n+\n+.. code-block:: bash\n+\n+   $ objdump -p libgccjit.so | less\n+   [...snip...]\n+   Version definitions:\n+   1 0x01 0x0ff81f20 libgccjit.so.0\n+   2 0x00 0x00824160 LIBGCCJIT_ABI_0\n+   3 0x00 0x00824161 LIBGCCJIT_ABI_1\n+           LIBGCCJIT_ABI_0\n+   [...snip...]\n+\n+ABI symbol tags\n+***************\n+\n+The initial release of libgccjit (in gcc 5.1) did not use symbol versioning.\n+\n+Newer releases use the following tags.\n+\n+.. _LIBGCCJIT_ABI_0:\n+\n+``LIBGCCJIT_ABI_0``\n+-------------------\n+\n+All entrypoints in the initial release of libgccjit are tagged with\n+``LIBGCCJIT_ABI_0``, to signify the transition to symbol versioning.\n+\n+Binaries built against older copies of ``libgccjit.so`` should\n+continue to work, with this being handled transparently by the linker\n+(see `this post\n+<https://gcc.gnu.org/ml/gcc-patches/2015-06/msg02126.html>`_)\n+\n+.. _LIBGCCJIT_ABI_1:\n+\n+``LIBGCCJIT_ABI_1``\n+-------------------\n+``LIBGCCJIT_ABI_1`` covers the addition of\n+:func:`gcc_jit_context_add_command_line_option`"}, {"sha": "b0f4fb87eee3f17ad9e310ab0cd8651e0d5170f7", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -462,3 +462,39 @@ Integer options\n      -O0 through -O3.\n \n      The default value is 0 (unoptimized).\n+\n+Additional command-line options\n+*******************************\n+\n+.. function:: void gcc_jit_context_add_command_line_option (gcc_jit_context *ctxt,\\\n+                                                            const char *optname)\n+\n+   Add an arbitrary gcc command-line option to the context, for use\n+   by :func:`gcc_jit_context_compile` and\n+   :func:`gcc_jit_context_compile_to_file`.\n+\n+   The parameter ``optname`` must be non-NULL.  The underlying buffer is\n+   copied, so that it does not need to outlive the call.\n+\n+   Extra options added by `gcc_jit_context_add_command_line_option` are\n+   applied *after* the regular options above, potentially overriding them.\n+   Options from parent contexts are inherited by child contexts; options\n+   from the parent are applied *before* those from the child.\n+\n+   For example:\n+\n+   .. code-block:: c\n+\n+      gcc_jit_context_add_command_line_option (ctxt, \"-ffast-math\");\n+      gcc_jit_context_add_command_line_option (ctxt, \"-fverbose-asm\");\n+\n+   Note that only some options are likely to be meaningful; there is no\n+   \"frontend\" within libgccjit, so typically only those affecting\n+   optimization and code-generation are likely to be useful.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_1`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option"}, {"sha": "76b3d0b9b535532a81232dbfe07ab7dc8152e1d2", "filename": "gcc/jit/docs/topics/index.rst", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2Ftopics%2Findex.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fdocs%2Ftopics%2Findex.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Findex.rst?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -28,3 +28,4 @@ Topic Reference\n    functions.rst\n    locations.rst\n    compilation.rst\n+   compatibility.rst"}, {"sha": "9d7f8d66a0798502bdfe679dd8002173d3294a8a", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -2139,6 +2139,10 @@ make_fake_args (vec <char *> *argvec,\n       }\n   }\n \n+  /* Add any user-provided extra options, starting with any from\n+     parent contexts.  */\n+  m_recording_ctxt->append_command_line_options (argvec);\n+\n #undef ADD_ARG\n #undef ADD_ARG_TAKE_OWNERSHIP\n }"}, {"sha": "3d7d5712c5d6b3e1a1d9524ec3d5b080982937a9", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -517,6 +517,10 @@ recording::context::~context ()\n   for (i = 0; i < GCC_JIT_NUM_STR_OPTIONS; ++i)\n     free (m_str_options[i]);\n \n+  char *optname;\n+  FOR_EACH_VEC_ELT (m_command_line_options, i, optname)\n+    free (optname);\n+\n   if (m_builtins_manager)\n     delete m_builtins_manager;\n \n@@ -1137,6 +1141,33 @@ recording::context::set_bool_option (enum gcc_jit_bool_option opt,\n   log_bool_option (opt);\n }\n \n+/* Add the given optname to this context's list of extra options.\n+\n+   Implements the post-error-checking part of\n+   gcc_jit_context_add_command_line_option.  */\n+\n+void\n+recording::context::add_command_line_option (const char *optname)\n+{\n+  m_command_line_options.safe_push (xstrdup (optname));\n+}\n+\n+/* Add any user-provided extra options, starting with any from\n+   parent contexts.\n+   Called by playback::context::make_fake_args.  */\n+\n+void\n+recording::context::append_command_line_options (vec <char *> *argvec)\n+{\n+  if (m_parent_ctxt)\n+    m_parent_ctxt->append_command_line_options (argvec);\n+\n+  int i;\n+  char *optname;\n+  FOR_EACH_VEC_ELT (m_command_line_options, i, optname)\n+    argvec->safe_push (xstrdup (optname));\n+}\n+\n /* Add the given dumpname/out_ptr pair to this context's list of requested\n    dumps.\n \n@@ -1593,6 +1624,17 @@ recording::context::dump_reproducer_to_file (const char *path)\n \t\t bool_option_reproducer_strings[opt_idx],\n \t\t m_bool_options[opt_idx]);\n \n+      if (!m_command_line_options.is_empty ())\n+\t{\n+\t  int i;\n+\t  char *optname;\n+\t  r.write (\"  /* User-provided command-line options.  */\\n\");\n+\t  FOR_EACH_VEC_ELT (m_command_line_options, i, optname)\n+\t    r.write (\"  gcc_jit_context_add_command_line_option (%s, \\\"%s\\\");\\n\",\n+\t\t     r.get_identifier (contexts[ctxt_idx]),\n+\t\t     optname);\n+\t}\n+\n       if (m_requested_dumps.length ())\n \t{\n \t  r.write (\"  /* Requested dumps.  */\\n\");"}, {"sha": "8cd2289b34eb82ed51c39ec563437ee1f12f2f2e", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -195,6 +195,12 @@ class context : public log_user\n   set_bool_option (enum gcc_jit_bool_option opt,\n \t\t   int value);\n \n+  void\n+  add_command_line_option (const char *optname);\n+\n+  void\n+  append_command_line_options (vec <char *> *argvec);\n+\n   void\n   enable_dump (const char *dumpname,\n \t       char **out_ptr);\n@@ -281,6 +287,7 @@ class context : public log_user\n   char *m_str_options[GCC_JIT_NUM_STR_OPTIONS];\n   int m_int_options[GCC_JIT_NUM_INT_OPTIONS];\n   bool m_bool_options[GCC_JIT_NUM_BOOL_OPTIONS];\n+  auto_vec <char *> m_command_line_options;\n \n   /* Dumpfiles that were requested via gcc_jit_context_enable_dump.  */\n   auto_vec<requested_dump> m_requested_dumps;"}, {"sha": "a5353cafd40e5747bb1712c306683affdd1affdd", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -120,6 +120,8 @@ namespace gccjit\n     void set_bool_option (enum gcc_jit_bool_option opt,\n \t\t\t  int value);\n \n+    void add_command_line_option (const char *optname);\n+\n     location\n     new_location (const std::string &filename,\n \t\t  int line,\n@@ -603,6 +605,12 @@ context::set_bool_option (enum gcc_jit_bool_option opt,\n \n }\n \n+inline void\n+context::add_command_line_option (const char *optname)\n+{\n+  gcc_jit_context_add_command_line_option (m_inner_ctxt, optname);\n+}\n+\n inline location\n context::new_location (const std::string &filename,\n \t\t       int line,"}, {"sha": "44791abdfc4471e628189a8dfbae5e68a56ca524", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -2182,6 +2182,25 @@ gcc_jit_context_set_bool_option (gcc_jit_context *ctxt,\n   ctxt->set_bool_option (opt, value);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::context::add_command_line_option method in\n+   jit-recording.c.  */\n+\n+void\n+gcc_jit_context_add_command_line_option (gcc_jit_context *ctxt,\n+\t\t\t\t\t const char *optname)\n+{\n+  RETURN_IF_FAIL (ctxt, NULL, NULL, \"NULL context\");\n+  JIT_LOG_FUNC (ctxt->get_logger ());\n+  RETURN_IF_FAIL (optname, ctxt, NULL, \"NULL optname\");\n+  if (ctxt->get_logger ())\n+    ctxt->get_logger ()->log (\"optname: %s\", optname);\n+\n+  ctxt->add_command_line_option (optname);\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "8b906e75d29ff7f8014381c388aea5c9d3c21129", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -243,6 +243,29 @@ gcc_jit_context_set_bool_option (gcc_jit_context *ctxt,\n \t\t\t\t enum gcc_jit_bool_option opt,\n \t\t\t\t int value);\n \n+/* Add an arbitrary gcc command-line option to the context.\n+   The context takes a copy of the string, so the\n+   (const char *) optname is not needed anymore after the call\n+   returns.\n+\n+   Note that only some options are likely to be meaningful; there is no\n+   \"frontend\" within libgccjit, so typically only those affecting\n+   optimization and code-generation are likely to be useful.\n+\n+   This entrypoint was added in LIBGCCJIT_ABI_1; you can test for\n+   its presence using\n+   #ifdef LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option\n+*/\n+\n+extern void\n+gcc_jit_context_add_command_line_option (gcc_jit_context *ctxt,\n+\t\t\t\t\t const char *optname);\n+\n+/* Pre-canned feature-test macro for detecting the presence of\n+   gcc_jit_context_add_command_line_option within libgccjit.h.  */\n+\n+#define LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option\n+\n /* Compile the context to in-memory machine code.\n \n    This can be called more that once on a given context,"}, {"sha": "a42bc74d07d00ad993c35aa8e42b4fc315610299", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -17,6 +17,9 @@\n # You should have received a copy of the GNU General Public License\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.  */\n+\n+# The initial release of the library.\n+LIBGCCJIT_ABI_0\n {\n   global:\n     # Keep this list sorted alphabetically:\n@@ -104,4 +107,10 @@\n     gcc_jit_type_get_volatile;\n \n   local: *;\n-};\n\\ No newline at end of file\n+};\n+\n+# Add support for adding arbitrary command-line options (PR jit/66628).\n+LIBGCCJIT_ABI_1 {\n+  global:\n+    gcc_jit_context_add_command_line_option;\n+} LIBGCCJIT_ABI_0;"}, {"sha": "e8544998776b532729faddba066df21e719f5727", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -1,3 +1,10 @@\n+2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66628\n+\t* jit.dg/all-non-failing-tests.h: Add note about\n+\ttest-extra-options.c.\n+\t* jit.dg/test-extra-options.c: New testcase.\n+\n 2015-06-30  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR debug/66691"}, {"sha": "a54041ff23b4ec97020f634c363bccaa7da490d8", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -95,6 +95,9 @@\n #undef create_code\n #undef verify_code\n \n+/* test-extra-options.c: We don't use this one, since the extra options\n+   affect the whole context.  */\n+\n /* test-factorial.c */\n #define create_code create_code_factorial\n #define verify_code verify_code_factorial"}, {"sha": "37398349fed79d4dbfcd291813dd56c591f72891", "filename": "gcc/testsuite/jit.dg/test-extra-options.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Ftestsuite%2Fjit.dg%2Ftest-extra-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7/gcc%2Ftestsuite%2Fjit.dg%2Ftest-extra-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-extra-options.c?ref=fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "patch": "@@ -0,0 +1,136 @@\n+/* Testcase for gcc_jit_context_add_command_line_option (PR jit/66628).  */\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+#ifndef LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option\n+#error LIBGCCJIT_HAVE_gcc_jit_context_add_command_line_option was not defined\n+#endif\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_context_add_command_line_option (ctxt, \"-ffast-math\");\n+  gcc_jit_context_add_command_line_option (ctxt, \"-fverbose-asm\");\n+\n+  /* Let's try to inject the equivalent of:\n+\n+\tdouble\n+\tmy_dot_product (int n, double *a, double *b)\n+\t{\n+\t  double result = 0.;\n+\t  for (int i = 0; i < n; i++)\n+\t    result += a[i] * b[i];\n+\t  return result\n+\t}\n+\n+     and see what the optimizer can do.  */\n+  gcc_jit_type *val_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_DOUBLE);\n+  gcc_jit_type *ptr_type = gcc_jit_type_get_pointer (val_type);\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+\n+  gcc_jit_type *return_type = val_type;\n+  gcc_jit_param *param_n =\n+    gcc_jit_context_new_param (ctxt, NULL, int_type, \"n\");\n+  gcc_jit_param *param_a =\n+    gcc_jit_context_new_param (ctxt, NULL, ptr_type, \"a\");\n+  gcc_jit_param *param_b =\n+    gcc_jit_context_new_param (ctxt, NULL, ptr_type, \"b\");\n+  gcc_jit_param *params[3] = {param_n, param_a, param_b};\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  return_type,\n+\t\t\t\t  \"my_dot_product\",\n+\t\t\t\t  3, params, 0);\n+\n+  gcc_jit_block *initial = gcc_jit_function_new_block (func, \"initial\");\n+  gcc_jit_block *loop_test = gcc_jit_function_new_block (func, \"loop_test\");\n+  gcc_jit_block *loop_body = gcc_jit_function_new_block (func, \"loop_body\");\n+  gcc_jit_block *final = gcc_jit_function_new_block (func, \"final\");\n+\n+  /* Build: \"double result = 0.;\" */\n+  gcc_jit_lvalue *result =\n+    gcc_jit_function_new_local (func, NULL, val_type, \"result\");\n+\n+  gcc_jit_block_add_assignment (initial, NULL,\n+    result, gcc_jit_context_zero (ctxt, val_type));\n+\n+  /* Build: \"for (int i = 0; i < n; i++)\" */\n+  gcc_jit_lvalue *i =\n+    gcc_jit_function_new_local (func, NULL, int_type, \"i\");\n+  gcc_jit_block_add_assignment (initial, NULL,\n+    i, gcc_jit_context_zero (ctxt, int_type));\n+\n+  gcc_jit_block_end_with_jump (initial, NULL, loop_test);\n+\n+  gcc_jit_block_end_with_conditional (\n+    loop_test, NULL,\n+\n+    /* (i < n) */\n+    gcc_jit_context_new_comparison (\n+      ctxt, NULL,\n+      GCC_JIT_COMPARISON_LT,\n+      gcc_jit_lvalue_as_rvalue (i),\n+      gcc_jit_param_as_rvalue (param_n)),\n+\n+    loop_body,\n+    final);\n+\n+  /* Build: \"result += a[i] * b[i];\" */\n+  gcc_jit_block_add_assignment_op (\n+    loop_body, NULL,\n+    result,\n+    GCC_JIT_BINARY_OP_PLUS,\n+    gcc_jit_context_new_binary_op (\n+      ctxt, NULL,\n+      GCC_JIT_BINARY_OP_MULT,\n+      val_type,\n+      gcc_jit_lvalue_as_rvalue (\n+\tgcc_jit_context_new_array_access (\n+          ctxt, NULL,\n+\t  gcc_jit_param_as_rvalue (param_a),\n+\t  gcc_jit_lvalue_as_rvalue (i))),\n+      gcc_jit_lvalue_as_rvalue (\n+\tgcc_jit_context_new_array_access (\n+          ctxt, NULL,\n+\t  gcc_jit_param_as_rvalue (param_b),\n+\t  gcc_jit_lvalue_as_rvalue (i)))));\n+\n+  /* Build: \"i++\" */\n+  gcc_jit_block_add_assignment_op (\n+    loop_body, NULL,\n+    i,\n+    GCC_JIT_BINARY_OP_PLUS,\n+    gcc_jit_context_one (ctxt, int_type));\n+\n+  gcc_jit_block_end_with_jump (loop_body, NULL, loop_test);\n+\n+  /* Build: \"return result;\" */\n+  gcc_jit_block_end_with_return (\n+    final,\n+    NULL,\n+    gcc_jit_lvalue_as_rvalue (result));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef double (*my_dot_product_fn_type) (int n, double *a, double *b);\n+  CHECK_NON_NULL (result);\n+\n+  my_dot_product_fn_type my_dot_product =\n+    (my_dot_product_fn_type)gcc_jit_result_get_code (result,\n+\t\t\t\t\t\t     \"my_dot_product\");\n+  CHECK_NON_NULL (my_dot_product);\n+  double test_array[] = {1., 2., 3., 4., 5., 6., 7., 8., 9., 10.};\n+  double val = my_dot_product (10, test_array, test_array);\n+  note (\"my_dot_product returned: %f\", val);\n+  CHECK_VALUE (val, 385.0);\n+}"}]}