{"sha": "f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU2NzdiMTU2MGM0ZDI5ZGQ1OTc5ZGJmN2RhNDMxOTVmN2UxMWRjMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-10-12T10:12:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-10-12T10:12:09Z"}, "message": "codecvt_specializations.h: Change #ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS to a comment.\n\n2003-10-12  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h:\n\tChange #ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS to a comment.\n\t* include/bits/basic_string.tcc: Likewise.\n\t* include/bits/ios_base.h: Likewise.\n\t* include/bits/istream.tcc: Likewise.\n\t* include/bits/locale_facets.tcc: Likewise.\n\t* include/bits/ostream.tcc: Likewise.\n\t* include/bits/stl_function.h: Likewise.\n\t* include/bits/stl_multiset.h: Likewise.\n\t* include/bits/stl_pair.h: Likewise.\n\t* include/bits/stl_set.h: Likewise.\n\t* include/bits/streambuf_iterator.h\n\t* include/std/std_iosfwd.h: Likewise.\n\t* include/std/std_istream.h: Likewise.\n\t* include/std/std_sstream.h: Likewise.\n\t* include/std/std_streambuf.h: Likewise.\n\t* src/ios.cc: Likewise.\n\t* include/bits/c++config:\n\tComment out #define _GLIBCXX_RESOLVE_LIB_DEFECTS 1.\n\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Tweak a\n\tdg-error directive due to removal of a blank line.\n\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Likewise.\n\nFrom-SVN: r72392", "tree": {"sha": "41b52d3d4f93410db79eb0ebfe0efa16fb7614e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41b52d3d4f93410db79eb0ebfe0efa16fb7614e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/comments", "author": null, "committer": null, "parents": [{"sha": "de006bbd1813747bf3dca98a3629c12d8f4c00e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de006bbd1813747bf3dca98a3629c12d8f4c00e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de006bbd1813747bf3dca98a3629c12d8f4c00e7"}], "stats": {"total": 225, "additions": 95, "deletions": 130}, "files": [{"sha": "594caaa7a9b7abf533b3fea58137d871b0951ee6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -1,3 +1,28 @@\n+2003-10-12  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h:\n+\tChange #ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS to a comment.\n+\t* include/bits/basic_string.tcc: Likewise.\n+\t* include/bits/ios_base.h: Likewise.\n+\t* include/bits/istream.tcc: Likewise.\n+\t* include/bits/locale_facets.tcc: Likewise.\n+\t* include/bits/ostream.tcc: Likewise.\n+\t* include/bits/stl_function.h: Likewise.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\t* include/bits/stl_pair.h: Likewise.\n+\t* include/bits/stl_set.h: Likewise.\n+\t* include/bits/streambuf_iterator.h\n+\t* include/std/std_iosfwd.h: Likewise.\n+\t* include/std/std_istream.h: Likewise.\n+\t* include/std/std_sstream.h: Likewise.\n+\t* include/std/std_streambuf.h: Likewise.\n+\t* src/ios.cc: Likewise.\n+\t* include/bits/c++config:\n+\tComment out #define _GLIBCXX_RESOLVE_LIB_DEFECTS 1.\n+\t* testsuite/27_io/ios_base/cons/assign_neg.cc: Tweak a\n+\tdg-error directive due to removal of a blank line.\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Likewise.\n+\n 2003-10-12  Andreas Tobler  <a.tobler@schweiz.ch>\n \t    Paolo Carlini  <pcarlini@unitus.it>\n "}, {"sha": "93d0e5acc357944a433c3f7c3da2ab304ffa6b7a", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/codecvt_specializations.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -453,11 +453,11 @@\n \t      const extern_type* __end, size_t __max) const\n     { return std::min(__max, static_cast<size_t>(__end - __from)); }\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 74.  Garbled text for codecvt::do_max_length\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 74.  Garbled text for codecvt::do_max_length\n   template<typename _InternT, typename _ExternT>\n     int \n     codecvt<_InternT, _ExternT, __enc_traits>::\n     do_max_length() const throw()\n     { return 1; }\n-#endif\n+"}, {"sha": "ecd8f71c45e42a6502c3fb78313a35636e310b5e", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -502,12 +502,9 @@ namespace std\n     _S_create(size_t __capacity, const _Alloc& __alloc)\n     {\n       typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 83.  String::npos vs. string::max_size()\n       if (__capacity > _S_max_size)\n-#else\n-      if (__capacity == npos)\n-#endif\n \t__throw_length_error(\"basic_string::_S_create\");\n \n       // NB: Need an array of char_type[__capacity], plus a"}, {"sha": "7a35dde921899b288078e88147b2770347b90cab", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -55,7 +55,7 @@\n //#define _GLIBCXX_DEPRECATED 1\n \n // Use corrected code from the committee library group's issues list.\n-#define _GLIBCXX_RESOLVE_LIB_DEFECTS 1\n+//#define _GLIBCXX_RESOLVE_LIB_DEFECTS 1\n \n // The remainder of the prewritten config is automatic; all the\n // user hooks are listed above."}, {"sha": "5455dd26f19512f317a6ed734c148c1cc46836be", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -164,8 +164,8 @@ namespace std\n     class failure : public exception\n     {\n     public:\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      //48.  Use of non-existent exception constructor\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 48.  Use of non-existent exception constructor\n       explicit \n       failure(const string& __str) throw();\n \n@@ -179,7 +179,6 @@ namespace std\n       \n     private:\n       string _M_msg;\n-#endif\n     };\n \n     // 27.4.2.1.2  Type ios_base::fmtflags\n@@ -738,14 +737,13 @@ namespace std\n   protected:\n     ios_base();\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  //50.  Copy constructor and assignment operator of ios_base\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 50.  Copy constructor and assignment operator of ios_base\n   private:\n     ios_base(const ios_base&);\n \n     ios_base& \n     operator=(const ios_base&);\n-#endif\n   };\n  \n   // [27.4.5.1] fmtflags manipulators"}, {"sha": "1ae7cba126ff542c1af86917ef4035ab6463e4ca", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -62,11 +62,10 @@ namespace std\n \t\t\t\ttraits_type::to_char_type(__c)))\n \t\t  __c = __sb->snextc();\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-//195.  Should basic_istream::sentry's constructor ever set eofbit? \n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 195. Should basic_istream::sentry's constructor ever set eofbit? \n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__in.setstate(ios_base::eofbit);\n-#endif\n \t    }\n \t}\n \n@@ -147,15 +146,14 @@ namespace std\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __l);\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 118. basic_istream uses nonexistent num_get member functions.\n \t      if (!(__err & ios_base::failbit)\n \t\t  && (numeric_limits<short>::min() <= __l \n \t\t      && __l <= numeric_limits<short>::max()))\n \t\t__n = __l;\n \t      else\n                 __err |= ios_base::failbit;\n-#endif\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -211,15 +209,14 @@ namespace std\n \t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __l);\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 118. basic_istream uses nonexistent num_get member functions.\n \t      if (!(__err & ios_base::failbit)\n \t\t  && (numeric_limits<int>::min() <= __l \n \t\t      && __l <= numeric_limits<int>::max()))\n \t\t__n = __l;\n \t      else\n                 __err |= ios_base::failbit;\n-#endif\n \t      this->setstate(__err);\n \t    }\n \t  catch(...)\n@@ -844,10 +841,9 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     putback(char_type __c)\n     {\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 60. What is a formatted input function?\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 60. What is a formatted input function?\n       _M_gcount = 0;\n-#endif\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n@@ -876,10 +872,9 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     unget(void)\n     {\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 60. What is a formatted input function?\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 60. What is a formatted input function?\n       _M_gcount = 0;\n-#endif\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n@@ -957,14 +952,13 @@ namespace std\n       // DR60.  Do not change _M_gcount.\n       if (!this->fail())\n \t{\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 136.  seekp, seekg setting wrong streams?\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 136.  seekp, seekg setting wrong streams?\n \t  pos_type __err = this->rdbuf()->pubseekpos(__pos, ios_base::in);\n \n-// 129. Need error indication from seekp() and seekg()\n+\t  // 129. Need error indication from seekp() and seekg()\n \t  if (__err == pos_type(off_type(-1)))\n \t    this->setstate(ios_base::failbit);\n-#endif\n \t}\n       return *this;\n     }\n@@ -977,15 +971,14 @@ namespace std\n       // DR60.  Do not change _M_gcount.\n       if (!this->fail())\n \t{\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 136.  seekp, seekg setting wrong streams?\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 136.  seekp, seekg setting wrong streams?\n \t  pos_type __err = this->rdbuf()->pubseekoff(__off, __dir, \n \t\t\t\t\t\t     ios_base::in);\n \n-// 129. Need error indication from seekp() and seekg()\n+\t  // 129. Need error indication from seekp() and seekg()\n \t  if (__err == pos_type(off_type(-1)))\n \t    this->setstate(ios_base::failbit);\n-#endif\n \t}\n       return *this;\n     }\n@@ -1052,10 +1045,9 @@ namespace std\n \t      if (_Traits::eq_int_type(__c, __eof))\n \t\t__in.setstate(ios_base::eofbit);\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-//68.  Extractors for char* should store null at end\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 68.  Extractors for char* should store null at end\n \t      *__s = char_type();\n-#endif\n \t      __in.width(0);\n \t    }\n \t  catch(...)\n@@ -1136,11 +1128,10 @@ namespace std\n \t    __in.setstate(ios_base::eofbit);\n \t  __in.width(0);\n \t}\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-//211.  operator>>(istream&, string&) doesn't set failbit\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 211.  operator>>(istream&, string&) doesn't set failbit\n       if (!__extracted)\n \t__in.setstate (ios_base::failbit);\n-#endif\n       return __in;\n     }\n "}, {"sha": "ad965bab207a065f9d2f6b1fa6c57b8cc51a27e5", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -409,8 +409,8 @@ namespace std\n       return __beg;\n     }\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  //17.  Bad bool parsing\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 17.  Bad bool parsing\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n@@ -479,7 +479,6 @@ namespace std\n         }\n       return __beg;\n     }\n-#endif\n \n   template<typename _CharT, typename _InIter>\n     _InIter\n@@ -863,8 +862,8 @@ namespace std\n     _M_group_float(const string& __grouping, _CharT __sep, const _CharT* __p, \n \t\t   _CharT* __new, _CharT* __cs, int& __len) const\n     {\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      //282. What types does numpunct grouping refer to?\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 282. What types does numpunct grouping refer to?\n       // Add grouping, if necessary. \n       _CharT* __p2;\n       const int __declen = __p ? __p - __cs : __len;\n@@ -880,7 +879,6 @@ namespace std\n \t  __newlen += __len - __declen;\n \t}    \n       __len = __newlen;\n-#endif\n     }\n \n   // The following code uses snprintf (or sprintf(), when"}, {"sha": "df63364522b0bad1137aad7f9a2271c81028a71c", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -428,14 +428,13 @@ namespace std\n     {\n       if (!this->fail())\n \t{\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 136.  seekp, seekg setting wrong streams?\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 136.  seekp, seekg setting wrong streams?\n \t  pos_type __err = this->rdbuf()->pubseekpos(__pos, ios_base::out);\n \n-// 129. Need error indication from seekp() and seekg()\n+\t  // 129. Need error indication from seekp() and seekg()\n \t  if (__err == pos_type(off_type(-1)))\n \t    this->setstate(ios_base::failbit);\n-#endif\n \t}\n       return *this;\n     }\n@@ -447,15 +446,14 @@ namespace std\n     {\n       if (!this->fail())\n \t{\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 136.  seekp, seekg setting wrong streams?\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 136.  seekp, seekg setting wrong streams?\n \t  pos_type __err = this->rdbuf()->pubseekoff(__off, __d, \n \t\t\t\t\t\t     ios_base::out);\n \n-// 129. Need error indication from seekp() and seekg()\n+\t  // 129. Need error indication from seekp() and seekg()\n \t  if (__err == pos_type(off_type(-1)))\n \t    this->setstate(ios_base::failbit);\n-#endif\n \t}\n       return *this;\n     }\n@@ -576,11 +574,10 @@ namespace std\n     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)\n     {\n       typedef basic_ostream<_CharT, _Traits> __ostream_type;\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 167.  Improper use of traits_type::length()\n-// Note that this is only in 'Review' status.\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 167.  Improper use of traits_type::length()\n+      // Note that this is only in 'Review' status.\n       typedef char_traits<char>\t\t     __traits_type;\n-#endif\n       typename __ostream_type::sentry __cerb(__out);\n       if (__cerb && __s)\n \t{\n@@ -672,9 +669,8 @@ namespace std\n \t  const streamsize __w = __out.width();\n \t  streamsize __len = static_cast<streamsize>(__str.size());\n \t  const _CharT* __s = __str.data();\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 25. String operator<< uses width() value wrong\n-#endif\n \t  if (__w > __len)\n \t    {\n \t      _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)"}, {"sha": "556104c714d48476c6fa71f593b2fcd5be5c8206", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -361,13 +361,12 @@ class binder1st\n   operator()(const typename _Operation::second_argument_type& __x) const {\n     return op(value, __x); \n   }\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  //109.  Missing binders for non-const sequence elements\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 109.  Missing binders for non-const sequence elements\n   typename _Operation::result_type\n   operator()(typename _Operation::second_argument_type& __x) const {\n     return op(value, __x); \n   }\n-#endif\n };\n \n /// One of the @link s20_3_6_binder binder functors@endlink.\n@@ -395,13 +394,12 @@ class binder2nd\n   operator()(const typename _Operation::first_argument_type& __x) const {\n     return op(__x, value); \n   }\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  //109.  Missing binders for non-const sequence elements\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 109.  Missing binders for non-const sequence elements\n   typename _Operation::result_type\n   operator()(typename _Operation::first_argument_type& __x) const {\n     return op(__x, value); \n   }\n-#endif\n };\n \n /// One of the @link s20_3_6_binder binder functors@endlink."}, {"sha": "49d8c4ea4f7d1bc17e75745ec5b0d03c5b2fe23a", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -183,8 +183,8 @@ class multiset\n \n   size_type count(const key_type& __x) const { return _M_t.count(__x); }\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-//214.  set::find() missing const overload\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 214.  set::find() missing const overload\n   iterator find(const key_type& __x) { return _M_t.find(__x); }\n   const_iterator find(const key_type& __x) const { return _M_t.find(__x); }\n   iterator lower_bound(const key_type& __x) {\n@@ -205,18 +205,6 @@ class multiset\n   pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {\n     return _M_t.equal_range(__x);\n   }\n-#else\n-  iterator find(const key_type& __x) const { return _M_t.find(__x); }\n-  iterator lower_bound(const key_type& __x) const {\n-    return _M_t.lower_bound(__x);\n-  }\n-  iterator upper_bound(const key_type& __x) const {\n-    return _M_t.upper_bound(__x); \n-  }\n-  pair<iterator,iterator> equal_range(const key_type& __x) const {\n-    return _M_t.equal_range(__x);\n-  }\n-#endif\n \n   template <class _K1, class _C1, class _A1>\n   friend bool operator== (const multiset<_K1,_C1,_A1>&,"}, {"sha": "6b08b93d584d3d7af17741fe51c110567253b0aa", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -72,14 +72,12 @@ struct pair {\n \n   _T1 first;                 ///< @c first is a copy of the first object\n   _T2 second;                ///< @c second is a copy of the second object\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-//265.  std::pair::pair() effects overly restrictive\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 265.  std::pair::pair() effects overly restrictive\n   /** The default constructor creates @c first and @c second using their\n    *  respective default constructors.  */\n   pair() : first(), second() {}\n-#else\n-  pair() : first(_T1()), second(_T2()) {}\n-#endif\n+\n   /** Two objects may be passed to a @c pair constructor to be copied.  */\n   pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}\n \n@@ -138,12 +136,9 @@ inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {\n  *  the LWG by default.\n */\n template <class _T1, class _T2>\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-//181.  make_pair() unintended behavior\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// 181.  make_pair() unintended behavior\n inline pair<_T1, _T2> make_pair(_T1 __x, _T2 __y)\n-#else\n-inline pair<_T1, _T2> make_pair(const _T1& __x, const _T2& __y)\n-#endif\n {\n   return pair<_T1, _T2>(__x, __y);\n }"}, {"sha": "fa8c6cfb707bb72dfa36e3a07eabfdcaad97d7a9", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -182,8 +182,8 @@ class set\n     return _M_t.find(__x) == _M_t.end() ? 0 : 1;\n   }\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-//214.  set::find() missing const overload\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 214.  set::find() missing const overload\n   iterator find(const key_type& __x) { return _M_t.find(__x); }\n   const_iterator find(const key_type& __x) const { return _M_t.find(__x); }\n   iterator lower_bound(const key_type& __x) {\n@@ -204,18 +204,6 @@ class set\n   pair<const_iterator,const_iterator> equal_range(const key_type& __x) const {\n     return _M_t.equal_range(__x);\n   }\n-#else\n-  iterator find(const key_type& __x) const { return _M_t.find(__x); }\n-  iterator lower_bound(const key_type& __x) const {\n-    return _M_t.lower_bound(__x);\n-  }\n-  iterator upper_bound(const key_type& __x) const {\n-    return _M_t.upper_bound(__x); \n-  }\n-  pair<iterator,iterator> equal_range(const key_type& __x) const {\n-    return _M_t.equal_range(__x);\n-  }\n-#endif\n \n   template <class _K1, class _C1, class _A1>\n   friend bool operator== (const set<_K1,_C1,_A1>&, const set<_K1,_C1,_A1>&);"}, {"sha": "51d8384b54d9dbe53a873a8866fc018ed81d2b09", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -109,7 +109,7 @@ namespace std\n \treturn __old; \n       }\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 110 istreambuf_iterator::equal not const\n       // NB: there is also number 111 (NAD, Future) pending on this function.\n       bool \n@@ -120,7 +120,6 @@ namespace std\n \tbool __beof = traits_type::eq_int_type(__b._M_get(), __eof);\n \treturn (__thiseof && __beof || (!__thiseof && !__beof));\n       }\n-#endif\n \n     private:\n       int_type "}, {"sha": "71288b5b4045a67e5c3f6ef85c6e5eb154ee1fb9", "filename": "libstdc++-v3/include/std/std_iosfwd.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -100,10 +100,9 @@ namespace std\n   template<typename _CharT, typename _Traits = char_traits<_CharT> >\n     class ostreambuf_iterator;\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // Not included.   (??? Apparently no LWG number?)\n   class ios_base; \n-#endif\n \n   /** \n    *  @defgroup s27_2_iosfwd I/O Forward Declarations"}, {"sha": "f22b503d6c68c8a636b88744aa0a7d0a00366432", "filename": "libstdc++-v3/include/std/std_istream.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_istream.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -705,15 +705,14 @@ namespace std\n       public basic_ostream<_CharT, _Traits>\n     {\n     public:\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 271. basic_iostream missing typedefs\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 271. basic_iostream missing typedefs\n       // Types (inherited):\n       typedef _CharT                     \t\tchar_type;\n       typedef typename _Traits::int_type \t\tint_type;\n       typedef typename _Traits::pos_type \t\tpos_type;\n       typedef typename _Traits::off_type \t\toff_type;\n       typedef _Traits                    \t\ttraits_type;\n-#endif\n \n       // Non-standard Types:\n       typedef basic_istream<_CharT, _Traits>\t\t__istream_type;"}, {"sha": "a2ffcef0ca549e78d14ac3b363a8853be0b17292", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -65,10 +65,9 @@ namespace std\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n       typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 251. basic_stringbuf missing allocator_type\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 251. basic_stringbuf missing allocator_type\n       typedef _Alloc\t\t\t\t       \tallocator_type;\n-#endif\n       typedef typename traits_type::int_type \t\tint_type;\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n@@ -304,10 +303,9 @@ namespace std\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n       typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 251. basic_stringbuf missing allocator_type\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 251. basic_stringbuf missing allocator_type\n       typedef _Alloc\t\t\t\t       \tallocator_type;\n-#endif\n       typedef typename traits_type::int_type \t\tint_type;\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n@@ -423,10 +421,9 @@ namespace std\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n       typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 251. basic_stringbuf missing allocator_type\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 251. basic_stringbuf missing allocator_type\n       typedef _Alloc\t\t\t\t       \tallocator_type;\n-#endif\n       typedef typename traits_type::int_type \t\tint_type;\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n@@ -542,10 +539,9 @@ namespace std\n       // Types:\n       typedef _CharT \t\t\t\t\tchar_type;\n       typedef _Traits \t\t\t\t\ttraits_type;\n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n-// 251. basic_stringbuf missing allocator_type\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 251. basic_stringbuf missing allocator_type\n       typedef _Alloc\t\t\t\t       \tallocator_type;\n-#endif\n       typedef typename traits_type::int_type \t\tint_type;\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;"}, {"sha": "e8a4992e21dc2347e58a212014de494853acdfab", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -764,14 +764,13 @@ namespace std\n       }\n #endif\n \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // Side effect of DR 50. \n     private:\n       basic_streambuf(const __streambuf_type&) { }; \n \n       __streambuf_type& \n       operator=(const __streambuf_type&) { return *this; };\n-#endif\n     };\n } // namespace std\n "}, {"sha": "616f4f5b196a086be062ec6a116b75d9340e4124", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -338,10 +338,9 @@ namespace std\n   bool \n   ios_base::sync_with_stdio(bool __sync)\n   { \n-#ifdef _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // 49.  Underspecification of ios_base::sync_with_stdio\n     bool __ret = ios_base::Init::_S_synced_with_stdio;\n-#endif\n \n     // Turn off sync with C FILE* for cin, cout, cerr, clog iff\n     // currently synchronized."}, {"sha": "ae7ba3c87fb5e63199b9aceb72332d2a27126660", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fassign_neg.cc?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -41,5 +41,5 @@ void test01()\n   io1 = io2;\n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 747 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 746 } \n // { dg-error \"operator=\" \"\" { target *-*-* } 0 } "}, {"sha": "9dfde27d710a6d5acb383634af4584789c262150", "filename": "libstdc++-v3/testsuite/27_io/ios_base/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5677b1560c4d29dd5979dbf7da43195f7e11dc1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fcons%2Fcopy_neg.cc?ref=f5677b1560c4d29dd5979dbf7da43195f7e11dc1", "patch": "@@ -41,5 +41,5 @@ void test02()\n   test_base io2 = io1; \n }\n // { dg-error \"within this context\" \"\" { target *-*-* } 41 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 744 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 743 } \n // { dg-error \"copy constructor\" \"\" { target *-*-* } 0 } "}]}