{"sha": "33d13fac08a9400ab517ad8ef4e7e323210bf5f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNkMTNmYWMwOGE5NDAwYWI1MTdhZDhlZjRlN2UzMjMyMTBiZjVmMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-19T18:25:55Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-19T18:25:55Z"}, "message": "fold-const.c (negate_expr): Move the handling of constants ...\n\n\t* fold-const.c (negate_expr): Move the handling of constants\n\t...\n\t(fold_negate_const): ... here.\n\nFrom-SVN: r79693", "tree": {"sha": "1d1a071246b1440ca2ed9d43c059c1d70aee9516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d1a071246b1440ca2ed9d43c059c1d70aee9516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33d13fac08a9400ab517ad8ef4e7e323210bf5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d13fac08a9400ab517ad8ef4e7e323210bf5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d13fac08a9400ab517ad8ef4e7e323210bf5f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d13fac08a9400ab517ad8ef4e7e323210bf5f2/comments", "author": null, "committer": null, "parents": [{"sha": "165c9b0468d5386d22855dd5f70340dad2aa8f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165c9b0468d5386d22855dd5f70340dad2aa8f78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165c9b0468d5386d22855dd5f70340dad2aa8f78"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "9a089167505a6acd91c5c0e82b15f4b63fee7308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d13fac08a9400ab517ad8ef4e7e323210bf5f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d13fac08a9400ab517ad8ef4e7e323210bf5f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33d13fac08a9400ab517ad8ef4e7e323210bf5f2", "patch": "@@ -1,3 +1,9 @@\n+2004-03-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* fold-const.c (negate_expr): Move the handling of constants\n+\t...\n+\t(fold_negate_const): ... here.\n+\n 2004-03-19  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* langhooks-def.h (LANG_HOOKS_HASH_TYPES): New macro and hook."}, {"sha": "26cba6723a68f46bf0604982c5d8e7292d5fcb5f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d13fac08a9400ab517ad8ef4e7e323210bf5f2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d13fac08a9400ab517ad8ef4e7e323210bf5f2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=33d13fac08a9400ab517ad8ef4e7e323210bf5f2", "patch": "@@ -113,6 +113,8 @@ static tree fold_inf_compare (enum tree_code, tree, tree, tree);\n static bool reorder_operands_p (tree, tree);\n static bool tree_swap_operands_p (tree, tree, bool);\n \n+static tree fold_negate_const (tree, tree);\n+\n /* The following constants represent a bit based encoding of GCC's\n    comparison operators.  This encoding simplifies transformations\n    on relational comparison operators, such as AND and OR.  */\n@@ -956,28 +958,15 @@ negate_expr (tree t)\n   switch (TREE_CODE (t))\n     {\n     case INTEGER_CST:\n-      {\n-\tunsigned HOST_WIDE_INT low;\n-\tHOST_WIDE_INT high;\n-\tint overflow = neg_double (TREE_INT_CST_LOW (t),\n-\t\t\t\t   TREE_INT_CST_HIGH (t),\n-\t\t\t\t   &low, &high);\n-\ttem = build_int_2 (low, high);\n-\tTREE_TYPE (tem) = type;\n-\tTREE_OVERFLOW (tem)\n-\t  = (TREE_OVERFLOW (t)\n-\t     | force_fit_type (tem, overflow && !TREE_UNSIGNED (type)));\n-\tTREE_CONSTANT_OVERFLOW (tem)\n-\t  = TREE_OVERFLOW (tem) | TREE_CONSTANT_OVERFLOW (t);\n-      }\n+      tem = fold_negate_const (t, type);\n       if (! TREE_OVERFLOW (tem)\n \t  || TREE_UNSIGNED (type)\n \t  || ! flag_trapv)\n \treturn tem;\n       break;\n \n     case REAL_CST:\n-      tem = build_real (type, REAL_VALUE_NEGATE (TREE_REAL_CST (t)));\n+      tem = fold_negate_const (t, type);\n       /* Two's complement FP formats, such as c4x, may overflow.  */\n       if (! TREE_OVERFLOW (tem) || ! flag_trapping_math)\n \treturn fold_convert (type, tem);\n@@ -9049,4 +9038,39 @@ rtl_expr_nonnegative_p (rtx r)\n     }\n }\n \n+/* Return the tree for neg (ARG0) when ARG0 is known to be either\n+   an integer constant or real constant.\n+\n+   TYPE is the type of the result.  */\n+\n+static tree\n+fold_negate_const (tree arg0, tree type)\n+{\n+  tree t = NULL_TREE;\n+\n+  if (TREE_CODE (arg0) == INTEGER_CST)\n+    {\n+      unsigned HOST_WIDE_INT low;\n+      HOST_WIDE_INT high;\n+      int overflow = neg_double (TREE_INT_CST_LOW (arg0),\n+\t\t\t\t TREE_INT_CST_HIGH (arg0),\n+\t\t\t\t &low, &high);\n+      t = build_int_2 (low, high);\n+      TREE_TYPE (t) = type;\n+      TREE_OVERFLOW (t)\n+\t= (TREE_OVERFLOW (arg0)\n+\t   | force_fit_type (t, overflow && !TREE_UNSIGNED (type)));\n+      TREE_CONSTANT_OVERFLOW (t)\n+\t= TREE_OVERFLOW (t) | TREE_CONSTANT_OVERFLOW (arg0);\n+    }\n+  else if (TREE_CODE (arg0) == REAL_CST)\n+    t = build_real (type, REAL_VALUE_NEGATE (TREE_REAL_CST (arg0)));\n+#ifdef ENABLE_CHECKING\n+  else\n+    abort ();\n+#endif\n+    \n+  return t;\n+}\n+\n #include \"gt-fold-const.h\""}]}