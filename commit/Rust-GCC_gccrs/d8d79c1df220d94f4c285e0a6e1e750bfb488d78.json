{"sha": "d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkNzljMWRmMjIwZDk0ZjRjMjg1ZTBhNmUxZTc1MGJmYjQ4OGQ3OA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-12-19T18:30:18Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-12-19T18:30:18Z"}, "message": "neon-docgen.ml: Add crypto intrinsics documentation.\n\n2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/neon-docgen.ml: Add crypto intrinsics documentation.\n\t* doc/arm-neon-intrinsics.texi: Regenerate.\n\nFrom-SVN: r206132", "tree": {"sha": "a9f4b937b5fbe8937f3373512258684323d93dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9f4b937b5fbe8937f3373512258684323d93dd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d79c1df220d94f4c285e0a6e1e750bfb488d78/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed4bcdba7c19299844f11c15da6f93116b0b180f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4bcdba7c19299844f11c15da6f93116b0b180f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4bcdba7c19299844f11c15da6f93116b0b180f"}], "stats": {"total": 1124, "additions": 906, "deletions": 218}, "files": [{"sha": "bc32092b8cd2231caeecb0af4ddc0efd43aefddf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d79c1df220d94f4c285e0a6e1e750bfb488d78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d79c1df220d94f4c285e0a6e1e750bfb488d78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "patch": "@@ -1,3 +1,8 @@\n+2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/neon-docgen.ml: Add crypto intrinsics documentation.\n+\t* doc/arm-neon-intrinsics.texi: Regenerate.\n+\n 2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/neon-testgen.ml (effective_target): Handle \"CRYPTO\"."}, {"sha": "66d21cf1139ff6b3559c73d79529f06b8dc77228", "filename": "gcc/config/arm/neon-docgen.ml", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d79c1df220d94f4c285e0a6e1e750bfb488d78/gcc%2Fconfig%2Farm%2Fneon-docgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d79c1df220d94f4c285e0a6e1e750bfb488d78/gcc%2Fconfig%2Farm%2Fneon-docgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-docgen.ml?ref=d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "patch": "@@ -329,6 +329,77 @@ let gnu_header chan =\n   \"@c This file is generated automatically using gcc/config/arm/neon-docgen.ml\";\n   \"@c Please do not edit manually.\"]\n \n+let crypto_doc =\n+\"\n+@itemize @bullet\n+@item poly128_t vldrq_p128(poly128_t const *)\n+@end itemize\n+\n+@itemize @bullet\n+@item void vstrq_p128(poly128_t *, poly128_t)\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32_t vsha1h_u32 (uint32_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1h.32 @var{q0}, @var{q1}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1cq_u32 (uint32x4_t, uint32_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1c.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1pq_u32 (uint32x4_t, uint32_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1p.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1mq_u32 (uint32x4_t, uint32_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1m.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1su0q_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1su0.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1su1q_u32 (uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1su1.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha256hq_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha256h.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+ \n+@itemize @bullet\n+@item uint32x4_t vsha256h2q_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha256h2.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+ \n+@itemize @bullet\n+@item uint32x4_t vsha256su0q_u32 (uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha256su0.32 @var{q0}, @var{q1}}\n+@end itemize\n+ \n+@itemize @bullet\n+@item uint32x4_t vsha256su1q_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha256su1.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item poly128_t vmull_p64 (poly64_t a, poly64_t b)\n+@*@emph{Form of expected instruction(s):} @code{vmull.p64 @var{q0}, @var{d1}, @var{d2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item poly128_t vmull_high_p64 (poly64x2_t a, poly64x2_t b)\n+@*@emph{Form of expected instruction(s):} @code{vmull.p64 @var{q0}, @var{d1}, @var{d2}}\n+@end itemize\n+\"\n+\n (* Program entry point.  *)\n let _ =\n   if Array.length Sys.argv <> 2 then\n@@ -339,6 +410,7 @@ let _ =\n       let chan = open_out file in\n         gnu_header chan;\n         List.iter (document_group chan) intrinsic_groups;\n+        Printf.fprintf chan \"%s\\n\" crypto_doc;\n         close_out chan\n     with Sys_error sys ->\n       failwith (\"Could not create output file \" ^ file ^ \": \" ^ sys)"}, {"sha": "610892d64630a8f24239e67d1d1b42731f95d3b2", "filename": "gcc/doc/arm-neon-intrinsics.texi", "status": "modified", "additions": 829, "deletions": 218, "changes": 1047, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d79c1df220d94f4c285e0a6e1e750bfb488d78/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d79c1df220d94f4c285e0a6e1e750bfb488d78/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Farm-neon-intrinsics.texi?ref=d8d79c1df220d94f4c285e0a6e1e750bfb488d78", "patch": "@@ -4078,6 +4078,12 @@\n \n @subsubsection Vector shift right and insert\n \n+@itemize @bullet\n+@item poly64x1_t vsri_n_p64 (poly64x1_t, poly64x1_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vsri.64 @var{d0}, @var{d0}, #@var{0}}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x2_t vsri_n_u32 (uint32x2_t, uint32x2_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vsri.32 @var{d0}, @var{d0}, #@var{0}}\n@@ -4138,6 +4144,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vsriq_n_p64 (poly64x2_t, poly64x2_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vsri.64 @var{q0}, @var{q0}, #@var{0}}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x4_t vsriq_n_u32 (uint32x4_t, uint32x4_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vsri.32 @var{q0}, @var{q0}, #@var{0}}\n@@ -4202,6 +4214,12 @@\n \n @subsubsection Vector shift left and insert\n \n+@itemize @bullet\n+@item poly64x1_t vsli_n_p64 (poly64x1_t, poly64x1_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vsli.64 @var{d0}, @var{d0}, #@var{0}}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x2_t vsli_n_u32 (uint32x2_t, uint32x2_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vsli.32 @var{d0}, @var{d0}, #@var{0}}\n@@ -4262,6 +4280,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vsliq_n_p64 (poly64x2_t, poly64x2_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vsli.64 @var{q0}, @var{q0}, #@var{0}}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x4_t vsliq_n_u32 (uint32x4_t, uint32x4_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vsli.32 @var{q0}, @var{q0}, #@var{0}}\n@@ -5070,6 +5094,11 @@\n \n @subsubsection Create vector from literal bit pattern\n \n+@itemize @bullet\n+@item poly64x1_t vcreate_p64 (uint64_t)\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x2_t vcreate_u32 (uint64_t)\n @end itemize\n@@ -5183,6 +5212,11 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1_t vdup_n_p64 (poly64_t)\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1_t vdup_n_u64 (uint64_t)\n @end itemize\n@@ -5193,6 +5227,11 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vdupq_n_p64 (poly64_t)\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x4_t vdupq_n_u32 (uint32_t)\n @*@emph{Form of expected instruction(s):} @code{vdup.32 @var{q0}, @var{r0}}\n@@ -5439,6 +5478,11 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1_t vdup_lane_p64 (poly64x1_t, const int)\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1_t vdup_lane_u64 (uint64x1_t, const int)\n @end itemize\n@@ -5503,6 +5547,11 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vdupq_lane_p64 (poly64x1_t, const int)\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x2_t vdupq_lane_u64 (uint64x1_t, const int)\n @end itemize\n@@ -5517,6 +5566,11 @@\n \n @subsubsection Combining vectors\n \n+@itemize @bullet\n+@item poly64x2_t vcombine_p64 (poly64x1_t, poly64x1_t)\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x4_t vcombine_u32 (uint32x2_t, uint32x2_t)\n @end itemize\n@@ -5576,6 +5630,11 @@\n \n @subsubsection Splitting vectors\n \n+@itemize @bullet\n+@item poly64x1_t vget_high_p64 (poly64x2_t)\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x2_t vget_high_u32 (uint32x4_t)\n @end itemize\n@@ -5685,6 +5744,11 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1_t vget_low_p64 (poly64x2_t)\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1_t vget_low_u64 (uint64x2_t)\n @end itemize\n@@ -6817,6 +6881,12 @@\n \n @subsubsection Vector extract\n \n+@itemize @bullet\n+@item poly64x1_t vext_p64 (poly64x1_t, poly64x1_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vext.64 @var{d0}, @var{d0}, @var{d0}, #@var{0}}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x2_t vext_u32 (uint32x2_t, uint32x2_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vext.32 @var{d0}, @var{d0}, @var{d0}, #@var{0}}\n@@ -6883,6 +6953,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vextq_p64 (poly64x2_t, poly64x2_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vext.64 @var{q0}, @var{q0}, @var{q0}, #@var{0}}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x4_t vextq_u32 (uint32x4_t, uint32x4_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vext.32 @var{q0}, @var{q0}, @var{q0}, #@var{0}}\n@@ -7173,6 +7249,12 @@\n \n @subsubsection Bit selection\n \n+@itemize @bullet\n+@item poly64x1_t vbsl_p64 (uint64x1_t, poly64x1_t, poly64x1_t)\n+@*@emph{Form of expected instruction(s):} @code{vbsl @var{d0}, @var{d0}, @var{d0}} @emph{or} @code{vbit @var{d0}, @var{d0}, @var{d0}} @emph{or} @code{vbif @var{d0}, @var{d0}, @var{d0}}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x2_t vbsl_u32 (uint32x2_t, uint32x2_t, uint32x2_t)\n @*@emph{Form of expected instruction(s):} @code{vbsl @var{d0}, @var{d0}, @var{d0}} @emph{or} @code{vbit @var{d0}, @var{d0}, @var{d0}} @emph{or} @code{vbif @var{d0}, @var{d0}, @var{d0}}\n@@ -7239,6 +7321,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vbslq_p64 (uint64x2_t, poly64x2_t, poly64x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vbsl @var{q0}, @var{q0}, @var{q0}} @emph{or} @code{vbit @var{q0}, @var{q0}, @var{q0}} @emph{or} @code{vbif @var{q0}, @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x4_t vbslq_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n @*@emph{Form of expected instruction(s):} @code{vbsl @var{q0}, @var{q0}, @var{q0}} @emph{or} @code{vbit @var{q0}, @var{q0}, @var{q0}} @emph{or} @code{vbif @var{q0}, @var{q0}, @var{q0}}\n@@ -7645,6 +7733,12 @@\n \n @subsubsection Element/structure loads, VLD1 variants\n \n+@itemize @bullet\n+@item poly64x1_t vld1_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x2_t vld1_u32 (const uint32_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.32 @{@var{d0}@}, [@var{r0}]}\n@@ -7711,6 +7805,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vld1q_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint32x4_t vld1q_u32 (const uint32_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.32 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n@@ -7831,6 +7931,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1_t vld1_lane_p64 (const poly64_t *, poly64x1_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1_t vld1_lane_u64 (const uint64_t *, uint64x1_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n@@ -7897,6 +8003,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vld1q_lane_p64 (const poly64_t *, poly64x2_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x2_t vld1q_lane_u64 (const uint64_t *, uint64x2_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n@@ -7963,6 +8075,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1_t vld1_dup_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1_t vld1_dup_u64 (const uint64_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n@@ -8029,6 +8147,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x2_t vld1q_dup_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x2_t vld1q_dup_u64 (const uint64_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n@@ -8045,6 +8169,12 @@\n \n @subsubsection Element/structure stores, VST1 variants\n \n+@itemize @bullet\n+@item void vst1_p64 (poly64_t *, poly64x1_t)\n+@*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item void vst1_u32 (uint32_t *, uint32x2_t)\n @*@emph{Form of expected instruction(s):} @code{vst1.32 @{@var{d0}@}, [@var{r0}]}\n@@ -8111,6 +8241,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item void vst1q_p64 (poly64_t *, poly64x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item void vst1q_u32 (uint32_t *, uint32x4_t)\n @*@emph{Form of expected instruction(s):} @code{vst1.32 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n@@ -8231,6 +8367,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item void vst1_lane_p64 (poly64_t *, poly64x1_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item void vst1_lane_s64 (int64_t *, int64x1_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}@}, [@var{r0}]}\n@@ -8297,6 +8439,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item void vst1q_lane_p64 (poly64_t *, poly64x2_t, const int)\n+@*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item void vst1q_lane_s64 (int64_t *, int64x2_t, const int)\n @*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}@}, [@var{r0}]}\n@@ -8367,6 +8515,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1x2_t vld2_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1x2_t vld2_u64 (const uint64_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n@@ -8577,6 +8731,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1x2_t vld2_dup_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1x2_t vld2_dup_u64 (const uint64_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n@@ -8647,6 +8807,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item void vst2_p64 (poly64_t *, poly64x1x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item void vst2_u64 (uint64_t *, uint64x1x2_t)\n @*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n@@ -8861,6 +9027,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1x3_t vld3_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}, @var{d2}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1x3_t vld3_u64 (const uint64_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}, @var{d2}@}, [@var{r0}]}\n@@ -9071,6 +9243,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1x3_t vld3_dup_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}, @var{d2}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1x3_t vld3_dup_u64 (const uint64_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}, @var{d2}@}, [@var{r0}]}\n@@ -9141,6 +9319,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item void vst3_p64 (poly64_t *, poly64x1x3_t)\n+@*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}, @var{d1}, @var{d2}, @var{d3}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item void vst3_u64 (uint64_t *, uint64x1x3_t)\n @*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}, @var{d1}, @var{d2}, @var{d3}@}, [@var{r0}]}\n@@ -9355,6 +9539,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1x4_t vld4_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}, @var{d2}, @var{d3}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1x4_t vld4_u64 (const uint64_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}, @var{d2}, @var{d3}@}, [@var{r0}]}\n@@ -9565,6 +9755,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item poly64x1x4_t vld4_dup_p64 (const poly64_t *)\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}, @var{d2}, @var{d3}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item uint64x1x4_t vld4_dup_u64 (const uint64_t *)\n @*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}, @var{d2}, @var{d3}@}, [@var{r0}]}\n@@ -9635,6 +9831,12 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item void vst4_p64 (poly64_t *, poly64x1x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}, @var{d1}, @var{d2}, @var{d3}@}, [@var{r0}]}\n+@end itemize\n+\n+\n @itemize @bullet\n @item void vst4_u64 (uint64_t *, uint64x1x4_t)\n @*@emph{Form of expected instruction(s):} @code{vst1.64 @{@var{d0}, @var{d1}, @var{d2}, @var{d3}@}, [@var{r0}]}\n@@ -10286,27 +10488,27 @@\n @subsubsection Reinterpret casts\n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_u32 (uint32x2_t)\n+@item poly8x8_t vreinterpret_p8_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_u16 (uint16x4_t)\n+@item poly8x8_t vreinterpret_p8_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_u8 (uint8x8_t)\n+@item poly8x8_t vreinterpret_p8_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_s32 (int32x2_t)\n+@item poly8x8_t vreinterpret_p8_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_s16 (int16x4_t)\n+@item poly8x8_t vreinterpret_p8_u64 (uint64x1_t)\n @end itemize\n \n \n@@ -10316,1067 +10518,1352 @@\n \n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_u64 (uint64x1_t)\n+@item poly8x8_t vreinterpret_p8_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_s64 (int64x1_t)\n+@item poly8x8_t vreinterpret_p8_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_f32 (float32x2_t)\n+@item poly8x8_t vreinterpret_p8_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8_t vreinterpret_p8_p16 (poly16x4_t)\n+@item poly8x8_t vreinterpret_p8_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_u32 (uint32x4_t)\n+@item poly8x8_t vreinterpret_p8_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_u16 (uint16x8_t)\n+@item poly16x4_t vreinterpret_p16_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_u8 (uint8x16_t)\n+@item poly16x4_t vreinterpret_p16_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_s32 (int32x4_t)\n+@item poly16x4_t vreinterpret_p16_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_s16 (int16x8_t)\n+@item poly16x4_t vreinterpret_p16_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_s8 (int8x16_t)\n+@item poly16x4_t vreinterpret_p16_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_u64 (uint64x2_t)\n+@item poly16x4_t vreinterpret_p16_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_s64 (int64x2_t)\n+@item poly16x4_t vreinterpret_p16_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_f32 (float32x4_t)\n+@item poly16x4_t vreinterpret_p16_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x16_t vreinterpretq_p8_p16 (poly16x8_t)\n+@item poly16x4_t vreinterpret_p16_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_u32 (uint32x2_t)\n+@item poly16x4_t vreinterpret_p16_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_u16 (uint16x4_t)\n+@item poly16x4_t vreinterpret_p16_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_u8 (uint8x8_t)\n+@item float32x2_t vreinterpret_f32_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_s32 (int32x2_t)\n+@item float32x2_t vreinterpret_f32_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_s16 (int16x4_t)\n+@item float32x2_t vreinterpret_f32_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_s8 (int8x8_t)\n+@item float32x2_t vreinterpret_f32_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_u64 (uint64x1_t)\n+@item float32x2_t vreinterpret_f32_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_s64 (int64x1_t)\n+@item float32x2_t vreinterpret_f32_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_f32 (float32x2_t)\n+@item float32x2_t vreinterpret_f32_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vreinterpret_p16_p8 (poly8x8_t)\n+@item float32x2_t vreinterpret_f32_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_u32 (uint32x4_t)\n+@item float32x2_t vreinterpret_f32_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_u16 (uint16x8_t)\n+@item float32x2_t vreinterpret_f32_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_u8 (uint8x16_t)\n+@item float32x2_t vreinterpret_f32_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_s32 (int32x4_t)\n+@item poly64x1_t vreinterpret_p64_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_s16 (int16x8_t)\n+@item poly64x1_t vreinterpret_p64_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_s8 (int8x16_t)\n+@item poly64x1_t vreinterpret_p64_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_u64 (uint64x2_t)\n+@item poly64x1_t vreinterpret_p64_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_s64 (int64x2_t)\n+@item poly64x1_t vreinterpret_p64_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_f32 (float32x4_t)\n+@item poly64x1_t vreinterpret_p64_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x8_t vreinterpretq_p16_p8 (poly8x16_t)\n+@item poly64x1_t vreinterpret_p64_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_u32 (uint32x2_t)\n+@item poly64x1_t vreinterpret_p64_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_u16 (uint16x4_t)\n+@item poly64x1_t vreinterpret_p64_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_u8 (uint8x8_t)\n+@item poly64x1_t vreinterpret_p64_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_s32 (int32x2_t)\n+@item poly64x1_t vreinterpret_p64_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_s16 (int16x4_t)\n+@item int64x1_t vreinterpret_s64_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_s8 (int8x8_t)\n+@item int64x1_t vreinterpret_s64_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_u64 (uint64x1_t)\n+@item int64x1_t vreinterpret_s64_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_s64 (int64x1_t)\n+@item int64x1_t vreinterpret_s64_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_p16 (poly16x4_t)\n+@item int64x1_t vreinterpret_s64_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vreinterpret_f32_p8 (poly8x8_t)\n+@item int64x1_t vreinterpret_s64_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_u32 (uint32x4_t)\n+@item int64x1_t vreinterpret_s64_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_u16 (uint16x8_t)\n+@item int64x1_t vreinterpret_s64_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_u8 (uint8x16_t)\n+@item int64x1_t vreinterpret_s64_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_s32 (int32x4_t)\n+@item int64x1_t vreinterpret_s64_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_s16 (int16x8_t)\n+@item int64x1_t vreinterpret_s64_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_s8 (int8x16_t)\n+@item uint64x1_t vreinterpret_u64_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_u64 (uint64x2_t)\n+@item uint64x1_t vreinterpret_u64_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_s64 (int64x2_t)\n+@item uint64x1_t vreinterpret_u64_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_p16 (poly16x8_t)\n+@item uint64x1_t vreinterpret_u64_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item float32x4_t vreinterpretq_f32_p8 (poly8x16_t)\n+@item uint64x1_t vreinterpret_u64_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_u32 (uint32x2_t)\n+@item uint64x1_t vreinterpret_u64_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_u16 (uint16x4_t)\n+@item uint64x1_t vreinterpret_u64_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_u8 (uint8x8_t)\n+@item uint64x1_t vreinterpret_u64_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_s32 (int32x2_t)\n+@item uint64x1_t vreinterpret_u64_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_s16 (int16x4_t)\n+@item uint64x1_t vreinterpret_u64_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_s8 (int8x8_t)\n+@item uint64x1_t vreinterpret_u64_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_u64 (uint64x1_t)\n+@item int8x8_t vreinterpret_s8_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_f32 (float32x2_t)\n+@item int8x8_t vreinterpret_s8_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_p16 (poly16x4_t)\n+@item int8x8_t vreinterpret_s8_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vreinterpret_s64_p8 (poly8x8_t)\n+@item int8x8_t vreinterpret_s8_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_u32 (uint32x4_t)\n+@item int8x8_t vreinterpret_s8_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_u16 (uint16x8_t)\n+@item int8x8_t vreinterpret_s8_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_u8 (uint8x16_t)\n+@item int8x8_t vreinterpret_s8_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_s32 (int32x4_t)\n+@item int8x8_t vreinterpret_s8_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_s16 (int16x8_t)\n+@item int8x8_t vreinterpret_s8_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_s8 (int8x16_t)\n+@item int8x8_t vreinterpret_s8_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_u64 (uint64x2_t)\n+@item int8x8_t vreinterpret_s8_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_f32 (float32x4_t)\n+@item int16x4_t vreinterpret_s16_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_p16 (poly16x8_t)\n+@item int16x4_t vreinterpret_s16_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int64x2_t vreinterpretq_s64_p8 (poly8x16_t)\n+@item int16x4_t vreinterpret_s16_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_u32 (uint32x2_t)\n+@item int16x4_t vreinterpret_s16_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_u16 (uint16x4_t)\n+@item int16x4_t vreinterpret_s16_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_u8 (uint8x8_t)\n+@item int16x4_t vreinterpret_s16_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_s32 (int32x2_t)\n+@item int16x4_t vreinterpret_s16_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_s16 (int16x4_t)\n+@item int16x4_t vreinterpret_s16_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_s8 (int8x8_t)\n+@item int16x4_t vreinterpret_s16_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_s64 (int64x1_t)\n+@item int16x4_t vreinterpret_s16_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_f32 (float32x2_t)\n+@item int16x4_t vreinterpret_s16_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_p16 (poly16x4_t)\n+@item int32x2_t vreinterpret_s32_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x1_t vreinterpret_u64_p8 (poly8x8_t)\n+@item int32x2_t vreinterpret_s32_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_u32 (uint32x4_t)\n+@item int32x2_t vreinterpret_s32_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_u16 (uint16x8_t)\n+@item int32x2_t vreinterpret_s32_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_u8 (uint8x16_t)\n+@item int32x2_t vreinterpret_s32_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_s32 (int32x4_t)\n+@item int32x2_t vreinterpret_s32_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_s16 (int16x8_t)\n+@item int32x2_t vreinterpret_s32_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_s8 (int8x16_t)\n+@item int32x2_t vreinterpret_s32_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_s64 (int64x2_t)\n+@item int32x2_t vreinterpret_s32_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_f32 (float32x4_t)\n+@item int32x2_t vreinterpret_s32_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_p16 (poly16x8_t)\n+@item int32x2_t vreinterpret_s32_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint64x2_t vreinterpretq_u64_p8 (poly8x16_t)\n+@item uint8x8_t vreinterpret_u8_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_u32 (uint32x2_t)\n+@item uint8x8_t vreinterpret_u8_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_u16 (uint16x4_t)\n+@item uint8x8_t vreinterpret_u8_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_u8 (uint8x8_t)\n+@item uint8x8_t vreinterpret_u8_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_s32 (int32x2_t)\n+@item uint8x8_t vreinterpret_u8_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_s16 (int16x4_t)\n+@item uint8x8_t vreinterpret_u8_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_u64 (uint64x1_t)\n+@item uint8x8_t vreinterpret_u8_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_s64 (int64x1_t)\n+@item uint8x8_t vreinterpret_u8_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_f32 (float32x2_t)\n+@item uint8x8_t vreinterpret_u8_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_p16 (poly16x4_t)\n+@item uint8x8_t vreinterpret_u8_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8_t vreinterpret_s8_p8 (poly8x8_t)\n+@item uint8x8_t vreinterpret_u8_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_u32 (uint32x4_t)\n+@item uint16x4_t vreinterpret_u16_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_u16 (uint16x8_t)\n+@item uint16x4_t vreinterpret_u16_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_u8 (uint8x16_t)\n+@item uint16x4_t vreinterpret_u16_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_s32 (int32x4_t)\n+@item uint16x4_t vreinterpret_u16_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_s16 (int16x8_t)\n+@item uint16x4_t vreinterpret_u16_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_u64 (uint64x2_t)\n+@item uint16x4_t vreinterpret_u16_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_s64 (int64x2_t)\n+@item uint16x4_t vreinterpret_u16_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_f32 (float32x4_t)\n+@item uint16x4_t vreinterpret_u16_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_p16 (poly16x8_t)\n+@item uint16x4_t vreinterpret_u16_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int8x16_t vreinterpretq_s8_p8 (poly8x16_t)\n+@item uint16x4_t vreinterpret_u16_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_u32 (uint32x2_t)\n+@item uint16x4_t vreinterpret_u16_u32 (uint32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_u16 (uint16x4_t)\n+@item uint32x2_t vreinterpret_u32_p8 (poly8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_u8 (uint8x8_t)\n+@item uint32x2_t vreinterpret_u32_p16 (poly16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_s32 (int32x2_t)\n+@item uint32x2_t vreinterpret_u32_f32 (float32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_s8 (int8x8_t)\n+@item uint32x2_t vreinterpret_u32_p64 (poly64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_u64 (uint64x1_t)\n+@item uint32x2_t vreinterpret_u32_s64 (int64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_s64 (int64x1_t)\n+@item uint32x2_t vreinterpret_u32_u64 (uint64x1_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_f32 (float32x2_t)\n+@item uint32x2_t vreinterpret_u32_s8 (int8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_p16 (poly16x4_t)\n+@item uint32x2_t vreinterpret_u32_s16 (int16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4_t vreinterpret_s16_p8 (poly8x8_t)\n+@item uint32x2_t vreinterpret_u32_s32 (int32x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_u32 (uint32x4_t)\n+@item uint32x2_t vreinterpret_u32_u8 (uint8x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_u16 (uint16x8_t)\n+@item uint32x2_t vreinterpret_u32_u16 (uint16x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_u8 (uint8x16_t)\n+@item poly8x16_t vreinterpretq_p8_p16 (poly16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_s32 (int32x4_t)\n+@item poly8x16_t vreinterpretq_p8_f32 (float32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_s8 (int8x16_t)\n+@item poly8x16_t vreinterpretq_p8_p64 (poly64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_u64 (uint64x2_t)\n+@item poly8x16_t vreinterpretq_p8_p128 (poly128_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_s64 (int64x2_t)\n+@item poly8x16_t vreinterpretq_p8_s64 (int64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_f32 (float32x4_t)\n+@item poly8x16_t vreinterpretq_p8_u64 (uint64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_p16 (poly16x8_t)\n+@item poly8x16_t vreinterpretq_p8_s8 (int8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int16x8_t vreinterpretq_s16_p8 (poly8x16_t)\n+@item poly8x16_t vreinterpretq_p8_s16 (int16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_u32 (uint32x2_t)\n+@item poly8x16_t vreinterpretq_p8_s32 (int32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_u16 (uint16x4_t)\n+@item poly8x16_t vreinterpretq_p8_u8 (uint8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_u8 (uint8x8_t)\n+@item poly8x16_t vreinterpretq_p8_u16 (uint16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_s16 (int16x4_t)\n+@item poly8x16_t vreinterpretq_p8_u32 (uint32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_s8 (int8x8_t)\n+@item poly16x8_t vreinterpretq_p16_p8 (poly8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_u64 (uint64x1_t)\n+@item poly16x8_t vreinterpretq_p16_f32 (float32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_s64 (int64x1_t)\n+@item poly16x8_t vreinterpretq_p16_p64 (poly64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_f32 (float32x2_t)\n+@item poly16x8_t vreinterpretq_p16_p128 (poly128_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_p16 (poly16x4_t)\n+@item poly16x8_t vreinterpretq_p16_s64 (int64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x2_t vreinterpret_s32_p8 (poly8x8_t)\n+@item poly16x8_t vreinterpretq_p16_u64 (uint64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_u32 (uint32x4_t)\n+@item poly16x8_t vreinterpretq_p16_s8 (int8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_u16 (uint16x8_t)\n+@item poly16x8_t vreinterpretq_p16_s16 (int16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_u8 (uint8x16_t)\n+@item poly16x8_t vreinterpretq_p16_s32 (int32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_s16 (int16x8_t)\n+@item poly16x8_t vreinterpretq_p16_u8 (uint8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_s8 (int8x16_t)\n+@item poly16x8_t vreinterpretq_p16_u16 (uint16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_u64 (uint64x2_t)\n+@item poly16x8_t vreinterpretq_p16_u32 (uint32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_s64 (int64x2_t)\n+@item float32x4_t vreinterpretq_f32_p8 (poly8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_f32 (float32x4_t)\n+@item float32x4_t vreinterpretq_f32_p16 (poly16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_p16 (poly16x8_t)\n+@item float32x4_t vreinterpretq_f32_p64 (poly64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item int32x4_t vreinterpretq_s32_p8 (poly8x16_t)\n+@item float32x4_t vreinterpretq_f32_p128 (poly128_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_u32 (uint32x2_t)\n+@item float32x4_t vreinterpretq_f32_s64 (int64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_u16 (uint16x4_t)\n+@item float32x4_t vreinterpretq_f32_u64 (uint64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_s32 (int32x2_t)\n+@item float32x4_t vreinterpretq_f32_s8 (int8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_s16 (int16x4_t)\n+@item float32x4_t vreinterpretq_f32_s16 (int16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_s8 (int8x8_t)\n+@item float32x4_t vreinterpretq_f32_s32 (int32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_u64 (uint64x1_t)\n+@item float32x4_t vreinterpretq_f32_u8 (uint8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_s64 (int64x1_t)\n+@item float32x4_t vreinterpretq_f32_u16 (uint16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_f32 (float32x2_t)\n+@item float32x4_t vreinterpretq_f32_u32 (uint32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_p16 (poly16x4_t)\n+@item poly64x2_t vreinterpretq_p64_p8 (poly8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x8_t vreinterpret_u8_p8 (poly8x8_t)\n+@item poly64x2_t vreinterpretq_p64_p16 (poly16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_u32 (uint32x4_t)\n+@item poly64x2_t vreinterpretq_p64_f32 (float32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_u16 (uint16x8_t)\n+@item poly64x2_t vreinterpretq_p64_p128 (poly128_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_s32 (int32x4_t)\n+@item poly64x2_t vreinterpretq_p64_s64 (int64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_s16 (int16x8_t)\n+@item poly64x2_t vreinterpretq_p64_u64 (uint64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_s8 (int8x16_t)\n+@item poly64x2_t vreinterpretq_p64_s8 (int8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_u64 (uint64x2_t)\n+@item poly64x2_t vreinterpretq_p64_s16 (int16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_s64 (int64x2_t)\n+@item poly64x2_t vreinterpretq_p64_s32 (int32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_f32 (float32x4_t)\n+@item poly64x2_t vreinterpretq_p64_u8 (uint8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_p16 (poly16x8_t)\n+@item poly64x2_t vreinterpretq_p64_u16 (uint16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint8x16_t vreinterpretq_u8_p8 (poly8x16_t)\n+@item poly64x2_t vreinterpretq_p64_u32 (uint32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_u32 (uint32x2_t)\n+@item poly128_t vreinterpretq_p128_p8 (poly8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_u8 (uint8x8_t)\n+@item poly128_t vreinterpretq_p128_p16 (poly16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_s32 (int32x2_t)\n+@item poly128_t vreinterpretq_p128_f32 (float32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_s16 (int16x4_t)\n+@item poly128_t vreinterpretq_p128_p64 (poly64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_s8 (int8x8_t)\n+@item poly128_t vreinterpretq_p128_s64 (int64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_u64 (uint64x1_t)\n+@item poly128_t vreinterpretq_p128_u64 (uint64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_s64 (int64x1_t)\n+@item poly128_t vreinterpretq_p128_s8 (int8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_f32 (float32x2_t)\n+@item poly128_t vreinterpretq_p128_s16 (int16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_p16 (poly16x4_t)\n+@item poly128_t vreinterpretq_p128_s32 (int32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x4_t vreinterpret_u16_p8 (poly8x8_t)\n+@item poly128_t vreinterpretq_p128_u8 (uint8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_u32 (uint32x4_t)\n+@item poly128_t vreinterpretq_p128_u16 (uint16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_u8 (uint8x16_t)\n+@item poly128_t vreinterpretq_p128_u32 (uint32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_s32 (int32x4_t)\n+@item int64x2_t vreinterpretq_s64_p8 (poly8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_s16 (int16x8_t)\n+@item int64x2_t vreinterpretq_s64_p16 (poly16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_s8 (int8x16_t)\n+@item int64x2_t vreinterpretq_s64_f32 (float32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_u64 (uint64x2_t)\n+@item int64x2_t vreinterpretq_s64_p64 (poly64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_s64 (int64x2_t)\n+@item int64x2_t vreinterpretq_s64_p128 (poly128_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_f32 (float32x4_t)\n+@item int64x2_t vreinterpretq_s64_u64 (uint64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_p16 (poly16x8_t)\n+@item int64x2_t vreinterpretq_s64_s8 (int8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint16x8_t vreinterpretq_u16_p8 (poly8x16_t)\n+@item int64x2_t vreinterpretq_s64_s16 (int16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_u16 (uint16x4_t)\n+@item int64x2_t vreinterpretq_s64_s32 (int32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_u8 (uint8x8_t)\n+@item int64x2_t vreinterpretq_s64_u8 (uint8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_s32 (int32x2_t)\n+@item int64x2_t vreinterpretq_s64_u16 (uint16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_s16 (int16x4_t)\n+@item int64x2_t vreinterpretq_s64_u32 (uint32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_s8 (int8x8_t)\n+@item uint64x2_t vreinterpretq_u64_p8 (poly8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_u64 (uint64x1_t)\n+@item uint64x2_t vreinterpretq_u64_p16 (poly16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_s64 (int64x1_t)\n+@item uint64x2_t vreinterpretq_u64_f32 (float32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_f32 (float32x2_t)\n+@item uint64x2_t vreinterpretq_u64_p64 (poly64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_p16 (poly16x4_t)\n+@item uint64x2_t vreinterpretq_u64_p128 (poly128_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x2_t vreinterpret_u32_p8 (poly8x8_t)\n+@item uint64x2_t vreinterpretq_u64_s64 (int64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_u16 (uint16x8_t)\n+@item uint64x2_t vreinterpretq_u64_s8 (int8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_u8 (uint8x16_t)\n+@item uint64x2_t vreinterpretq_u64_s16 (int16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_s32 (int32x4_t)\n+@item uint64x2_t vreinterpretq_u64_s32 (int32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_s16 (int16x8_t)\n+@item uint64x2_t vreinterpretq_u64_u8 (uint8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_s8 (int8x16_t)\n+@item uint64x2_t vreinterpretq_u64_u16 (uint16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_u64 (uint64x2_t)\n+@item uint64x2_t vreinterpretq_u64_u32 (uint32x4_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_s64 (int64x2_t)\n+@item int8x16_t vreinterpretq_s8_p8 (poly8x16_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_f32 (float32x4_t)\n+@item int8x16_t vreinterpretq_s8_p16 (poly16x8_t)\n @end itemize\n \n \n @itemize @bullet\n-@item uint32x4_t vreinterpretq_u32_p16 (poly16x8_t)\n+@item int8x16_t vreinterpretq_s8_f32 (float32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_p64 (poly64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_p128 (poly128_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_s64 (int64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_u64 (uint64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_s16 (int16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_s32 (int32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_u8 (uint8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_u16 (uint16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int8x16_t vreinterpretq_s8_u32 (uint32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_p8 (poly8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_p16 (poly16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_f32 (float32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_p64 (poly64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_p128 (poly128_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_s64 (int64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_u64 (uint64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_s8 (int8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_s32 (int32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_u8 (uint8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_u16 (uint16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int16x8_t vreinterpretq_s16_u32 (uint32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_p8 (poly8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_p16 (poly16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_f32 (float32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_p64 (poly64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_p128 (poly128_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_s64 (int64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_u64 (uint64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_s8 (int8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_s16 (int16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_u8 (uint8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_u16 (uint16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item int32x4_t vreinterpretq_s32_u32 (uint32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_p8 (poly8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_p16 (poly16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_f32 (float32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_p64 (poly64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_p128 (poly128_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_s64 (int64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_u64 (uint64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_s8 (int8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_s16 (int16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_s32 (int32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_u16 (uint16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint8x16_t vreinterpretq_u8_u32 (uint32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_p8 (poly8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_p16 (poly16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_f32 (float32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_p64 (poly64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_p128 (poly128_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_s64 (int64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_u64 (uint64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_s8 (int8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_s16 (int16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_s32 (int32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_u8 (uint8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint16x8_t vreinterpretq_u16_u32 (uint32x4_t)\n @end itemize\n \n \n@@ -11385,5 +11872,129 @@\n @end itemize\n \n \n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_p16 (poly16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_f32 (float32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_p64 (poly64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_p128 (poly128_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_s64 (int64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_u64 (uint64x2_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_s8 (int8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_s16 (int16x8_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_s32 (int32x4_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_u8 (uint8x16_t)\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32x4_t vreinterpretq_u32_u16 (uint16x8_t)\n+@end itemize\n+\n+\n+\n+\n+\n+@itemize @bullet\n+@item poly128_t vldrq_p128(poly128_t const *)\n+@end itemize\n+\n+@itemize @bullet\n+@item void vstrq_p128(poly128_t *, poly128_t)\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32_t vsha1h_u32 (uint32_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1h.32 @var{q0}, @var{q1}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1cq_u32 (uint32x4_t, uint32_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1c.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1pq_u32 (uint32x4_t, uint32_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1p.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n \n+@itemize @bullet\n+@item uint32x4_t vsha1mq_u32 (uint32x4_t, uint32_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1m.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1su0q_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1su0.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha1su1q_u32 (uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha1su1.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32x4_t vsha256hq_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha256h.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+ \n+@itemize @bullet\n+@item uint32x4_t vsha256h2q_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha256h2.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+ \n+@itemize @bullet\n+@item uint32x4_t vsha256su0q_u32 (uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha256su0.32 @var{q0}, @var{q1}}\n+@end itemize\n+ \n+@itemize @bullet\n+@item uint32x4_t vsha256su1q_u32 (uint32x4_t, uint32x4_t, uint32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{sha256su1.32 @var{q0}, @var{q1}, @var{q2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item poly128_t vmull_p64 (poly64_t a, poly64_t b)\n+@*@emph{Form of expected instruction(s):} @code{vmull.p64 @var{q0}, @var{d1}, @var{d2}}\n+@end itemize\n+\n+@itemize @bullet\n+@item poly128_t vmull_high_p64 (poly64x2_t a, poly64x2_t b)\n+@*@emph{Form of expected instruction(s):} @code{vmull.p64 @var{q0}, @var{d1}, @var{d2}}\n+@end itemize\n "}]}