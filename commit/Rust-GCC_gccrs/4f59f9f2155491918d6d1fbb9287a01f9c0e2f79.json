{"sha": "4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY1OWY5ZjIxNTU0OTE5MThkNmQxZmJiOTI4N2EwMWY5YzBlMmY3OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-10-12T13:59:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-12T13:59:10Z"}, "message": "rs6000.h (RS6000_ALIGN): Implement using ROUND_UP macro.\n\n\t* config/rs6000/rs6000.h (RS6000_ALIGN): Implement using\n\tROUND_UP macro.\n\t* config/rs6000/rs6000.c (rs6000_darwin64_record_arg_advance_flush):\n\tUse ROUND_UP and ROUND_DOWN macros where applicable.\n\t(rs6000_darwin64_record_arg_flush): Ditto.\n\t(rs6000_function_arg): Use ROUND_UP to calculate align_words.\n\t(rs6000_emit_probe_stack_range): Use ROUND_DOWN to calculate\n\trounded_size.\n\n\t* config/aarch/aarch64.h (AARCH64_ROUND_UP): Remove.\n\t(AARCH64_ROUND_DOWN): Ditto.\n\t* config/aarch64/aarch64.c: Use ROUND_UP instead of AARCH64_ROUND_UP.\n\nFrom-SVN: r228715", "tree": {"sha": "c93bd6890b5404d0f56c7eb600ba7227f0339dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93bd6890b5404d0f56c7eb600ba7227f0339dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73fb742dc21731162383dffb76f98e70d75af450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fb742dc21731162383dffb76f98e70d75af450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fb742dc21731162383dffb76f98e70d75af450"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "f9389f80cb8921b383890a71628cdfa60a3d0529", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "patch": "@@ -1,3 +1,20 @@\n+2015-10-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/rs6000/rs6000.h (RS6000_ALIGN): Implement using\n+\tROUND_UP macro.\n+\t* config/rs6000/rs6000.c (rs6000_darwin64_record_arg_advance_flush):\n+\tUse ROUND_UP and ROUND_DOWN macros where applicable.\n+\t(rs6000_darwin64_record_arg_flush): Ditto.\n+\t(rs6000_function_arg): Use ROUND_UP to calculate align_words.\n+\t(rs6000_emit_probe_stack_range): Use ROUND_DOWN to calculate\n+\trounded_size.\n+\n+2015-10-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/aarch/aarch64.h (AARCH64_ROUND_UP): Remove.\n+\t(AARCH64_ROUND_DOWN): Ditto.\n+\t* config/aarch64/aarch64.c: Use ROUND_UP instead of AARCH64_ROUND_UP.\n+\n 2015-10-12  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/67783"}, {"sha": "5130e379c6b0d3facd66f62a7c197698afec93db", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "patch": "@@ -1860,8 +1860,8 @@ aarch64_layout_arg (cumulative_args_t pcum_v, machine_mode mode,\n \n   /* Size in bytes, rounded to the nearest multiple of 8 bytes.  */\n   size\n-    = AARCH64_ROUND_UP (type ? int_size_in_bytes (type) : GET_MODE_SIZE (mode),\n-\t\t\tUNITS_PER_WORD);\n+    = ROUND_UP (type ? int_size_in_bytes (type) : GET_MODE_SIZE (mode),\n+\t\tUNITS_PER_WORD);\n \n   allocate_ncrn = (type) ? !(FLOAT_TYPE_P (type)) : !FLOAT_MODE_P (mode);\n   allocate_nvrn = aarch64_vfp_is_call_candidate (pcum_v,\n@@ -1969,8 +1969,8 @@ aarch64_layout_arg (cumulative_args_t pcum_v, machine_mode mode,\n on_stack:\n   pcum->aapcs_stack_words = size / UNITS_PER_WORD;\n   if (aarch64_function_arg_alignment (mode, type) == 16 * BITS_PER_UNIT)\n-    pcum->aapcs_stack_size = AARCH64_ROUND_UP (pcum->aapcs_stack_size,\n-\t\t\t\t\t       16 / UNITS_PER_WORD);\n+    pcum->aapcs_stack_size = ROUND_UP (pcum->aapcs_stack_size,\n+\t\t\t\t       16 / UNITS_PER_WORD);\n   return;\n }\n \n@@ -2237,21 +2237,21 @@ aarch64_layout_frame (void)\n       }\n \n   cfun->machine->frame.padding0 =\n-    (AARCH64_ROUND_UP (offset, STACK_BOUNDARY / BITS_PER_UNIT) - offset);\n-  offset = AARCH64_ROUND_UP (offset, STACK_BOUNDARY / BITS_PER_UNIT);\n+    (ROUND_UP (offset, STACK_BOUNDARY / BITS_PER_UNIT) - offset);\n+  offset = ROUND_UP (offset, STACK_BOUNDARY / BITS_PER_UNIT);\n \n   cfun->machine->frame.saved_regs_size = offset;\n \n   cfun->machine->frame.hard_fp_offset\n-    = AARCH64_ROUND_UP (cfun->machine->frame.saved_varargs_size\n-\t\t\t+ get_frame_size ()\n-\t\t\t+ cfun->machine->frame.saved_regs_size,\n-\t\t\tSTACK_BOUNDARY / BITS_PER_UNIT);\n+    = ROUND_UP (cfun->machine->frame.saved_varargs_size\n+\t\t+ get_frame_size ()\n+\t\t+ cfun->machine->frame.saved_regs_size,\n+\t\tSTACK_BOUNDARY / BITS_PER_UNIT);\n \n   cfun->machine->frame.frame_size\n-    = AARCH64_ROUND_UP (cfun->machine->frame.hard_fp_offset\n-\t\t\t+ crtl->outgoing_args_size,\n-\t\t\tSTACK_BOUNDARY / BITS_PER_UNIT);\n+    = ROUND_UP (cfun->machine->frame.hard_fp_offset\n+\t\t+ crtl->outgoing_args_size,\n+\t\tSTACK_BOUNDARY / BITS_PER_UNIT);\n \n   cfun->machine->frame.laid_out = true;\n }\n@@ -9024,8 +9024,8 @@ aarch64_expand_builtin_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n      This address is gr_save_area_bytes below GRTOP, rounded\n      down to the next 16-byte boundary.  */\n   t = make_tree (TREE_TYPE (vrtop), virtual_incoming_args_rtx);\n-  vr_offset = AARCH64_ROUND_UP (gr_save_area_size,\n-\t\t\t     STACK_BOUNDARY / BITS_PER_UNIT);\n+  vr_offset = ROUND_UP (gr_save_area_size,\n+\t\t\tSTACK_BOUNDARY / BITS_PER_UNIT);\n \n   if (vr_offset)\n     t = fold_build_pointer_plus_hwi (t, -vr_offset);\n@@ -9118,7 +9118,7 @@ aarch64_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n \t\t      unshare_expr (valist), f_grtop, NULL_TREE);\n       f_off = build3 (COMPONENT_REF, TREE_TYPE (f_groff),\n \t\t      unshare_expr (valist), f_groff, NULL_TREE);\n-      rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n+      rsize = ROUND_UP (size, UNITS_PER_WORD);\n       nregs = rsize / UNITS_PER_WORD;\n \n       if (align > 8)\n@@ -9357,8 +9357,8 @@ aarch64_setup_incoming_varargs (cumulative_args_t cum_v, machine_mode mode,\n \t  /* Set OFF to the offset from virtual_incoming_args_rtx of\n \t     the first vector register.  The VR save area lies below\n \t     the GR one, and is aligned to 16 bytes.  */\n-\t  off = -AARCH64_ROUND_UP (gr_saved * UNITS_PER_WORD,\n-\t\t\t\t   STACK_BOUNDARY / BITS_PER_UNIT);\n+\t  off = -ROUND_UP (gr_saved * UNITS_PER_WORD,\n+\t\t\t   STACK_BOUNDARY / BITS_PER_UNIT);\n \t  off -= vr_saved * UNITS_PER_VREG;\n \n \t  for (i = local_cum.aapcs_nvrn; i < NUM_FP_ARG_REGS; ++i)\n@@ -9377,8 +9377,8 @@ aarch64_setup_incoming_varargs (cumulative_args_t cum_v, machine_mode mode,\n   /* We don't save the size into *PRETEND_SIZE because we want to avoid\n      any complication of having crtl->args.pretend_args_size changed.  */\n   cfun->machine->frame.saved_varargs_size\n-    = (AARCH64_ROUND_UP (gr_saved * UNITS_PER_WORD,\n-\t\t      STACK_BOUNDARY / BITS_PER_UNIT)\n+    = (ROUND_UP (gr_saved * UNITS_PER_WORD,\n+\t\t STACK_BOUNDARY / BITS_PER_UNIT)\n        + vr_saved * UNITS_PER_VREG);\n }\n "}, {"sha": "b041a1e38d068c0a7d2448077efc84eda655779f", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "patch": "@@ -513,12 +513,6 @@ extern enum aarch64_processor aarch64_tune;\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-#define AARCH64_ROUND_UP(X, ALIGNMENT) \\\n-  (((X) + ((ALIGNMENT) - 1)) & ~((ALIGNMENT) - 1))\n-\n-#define AARCH64_ROUND_DOWN(X, ALIGNMENT) \\\n-  ((X) & ~((ALIGNMENT) - 1))\n-\n #ifdef HOST_WIDE_INT\n struct GTY (()) aarch64_frame\n {"}, {"sha": "f4d957ecbd8d8b304bd959b15d0e5d82ad61734c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "patch": "@@ -9790,12 +9790,12 @@ rs6000_darwin64_record_arg_advance_flush (CUMULATIVE_ARGS *cum,\n \t     e.g., in packed structs when there are 3 bytes to load.\n \t     Back intoffset back to the beginning of the word in this\n \t     case.  */\n-\t  intoffset = intoffset & -BITS_PER_WORD;\n+\t  intoffset = ROUND_DOWN (intoffset, BITS_PER_WORD);\n \t}\n     }\n \n-  startbit = intoffset & -BITS_PER_WORD;\n-  endbit = (bitpos + BITS_PER_WORD - 1) & -BITS_PER_WORD;\n+  startbit = ROUND_DOWN (intoffset, BITS_PER_WORD);\n+  endbit = ROUND_UP (bitpos, BITS_PER_WORD);\n   intregs = (endbit - startbit) / BITS_PER_WORD;\n   cum->words += intregs;\n   /* words should be unsigned. */\n@@ -10255,15 +10255,15 @@ rs6000_darwin64_record_arg_flush (CUMULATIVE_ARGS *cum,\n \t     e.g., in packed structs when there are 3 bytes to load.\n \t     Back intoffset back to the beginning of the word in this\n \t     case.  */\n-\t intoffset = intoffset & -BITS_PER_WORD;\n-\t mode = word_mode;\n+\t  intoffset = ROUND_DOWN (intoffset, BITS_PER_WORD);\n+\t  mode = word_mode;\n \t}\n     }\n   else\n     mode = word_mode;\n \n-  startbit = intoffset & -BITS_PER_WORD;\n-  endbit = (bitpos + BITS_PER_WORD - 1) & -BITS_PER_WORD;\n+  startbit = ROUND_DOWN (intoffset, BITS_PER_WORD);\n+  endbit = ROUND_UP (bitpos, BITS_PER_WORD);\n   intregs = (endbit - startbit) / BITS_PER_WORD;\n   this_regno = cum->words + intoffset / BITS_PER_WORD;\n \n@@ -10622,7 +10622,7 @@ rs6000_function_arg (cumulative_args_t cum_v, machine_mode mode,\n \t save area?  */\n       if (TARGET_64BIT && ! cum->prototype)\n \t{\n-\t  int align_words = (cum->words + 1) & ~1;\n+\t  int align_words = ROUND_UP (cum->words, 2);\n \t  k = rs6000_psave_function_arg (mode, type, align_words, rvec);\n \t}\n \n@@ -23336,7 +23336,7 @@ rs6000_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */\n \n-      rounded_size = size & -PROBE_INTERVAL;\n+      rounded_size = ROUND_DOWN (size, PROBE_INTERVAL);\n \n \n       /* Step 2: compute initial and final value of the loop counter.  */"}, {"sha": "95768228946aba31299f1b80bc1b127fc995bfb8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f59f9f2155491918d6d1fbb9287a01f9c0e2f79/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4f59f9f2155491918d6d1fbb9287a01f9c0e2f79", "patch": "@@ -1615,7 +1615,7 @@ extern enum reg_class rs6000_constraints[RS6000_CONSTRAINT_MAX];\n   ((DEFAULT_ABI == ABI_ELFv2 ? 12 : 20) << (TARGET_64BIT ? 1 : 0))\n \n /* Align an address */\n-#define RS6000_ALIGN(n,a) (((n) + (a) - 1) & ~((a) - 1))\n+#define RS6000_ALIGN(n,a) ROUND_UP ((n), (a))\n \n /* Offset within stack frame to start allocating local variables at.\n    If FRAME_GROWS_DOWNWARD, this is the offset to the END of the"}]}