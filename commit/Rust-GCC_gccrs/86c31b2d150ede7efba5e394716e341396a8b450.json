{"sha": "86c31b2d150ede7efba5e394716e341396a8b450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZjMzFiMmQxNTBlZGU3ZWZiYTVlMzk0NzE2ZTM0MTM5NmE4YjQ1MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-24T07:51:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-24T07:51:12Z"}, "message": "(push_reload): Fix NULL arg in last change.\n\n(push_reload): When IN is a subreg of a multiword reg\nthat uses a funny number of registers, and SUBREG_WORD is nonzero,\nand IN must match an output, reload both the reg and the subreg.\n\nFrom-SVN: r4556", "tree": {"sha": "aa9a246bf0f71d538854ec00e7f679cdb4b95c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa9a246bf0f71d538854ec00e7f679cdb4b95c7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86c31b2d150ede7efba5e394716e341396a8b450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c31b2d150ede7efba5e394716e341396a8b450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c31b2d150ede7efba5e394716e341396a8b450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c31b2d150ede7efba5e394716e341396a8b450/comments", "author": null, "committer": null, "parents": [{"sha": "8908158db387544f2bf19409617455766be8511f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8908158db387544f2bf19409617455766be8511f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8908158db387544f2bf19409617455766be8511f"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "08a21c677ff9dffa9335bb7bbbe78571ed9cf3ec", "filename": "gcc/reload.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86c31b2d150ede7efba5e394716e341396a8b450/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86c31b2d150ede7efba5e394716e341396a8b450/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=86c31b2d150ede7efba5e394716e341396a8b450", "patch": "@@ -616,9 +616,12 @@ push_reload (in, out, inloc, outloc, class,\n      really reload just the inside expression in its own mode.\n      If we have (SUBREG:M1 (REG:M2 ...) ...) with M1 wider than M2 and the\n      register is a pseudo, this will become the same as the above case.\n-     Do the same for (SUBREG:M1 (REG:M2 ...) ...) for a hard register R where\n+     Similar issue for (SUBREG:M1 (REG:M2 ...) ...) for a hard register R where\n      either M1 is not valid for R or M2 is wider than a word but we only\n      need one word to store an M2-sized quantity in R.\n+     (However, if OUT is nonzero, we need to reload the reg *and*\n+     the subreg, so do nothing here, and let following statement handle it.)\n+\n      Note that the case of (SUBREG (CONST_INT...)...) is handled elsewhere;\n      we can't handle it here because CONST_INT does not indicate a mode.\n \n@@ -635,8 +638,10 @@ push_reload (in, out, inloc, outloc, class,\n \t      && REGNO (SUBREG_REG (in)) >= FIRST_PSEUDO_REGISTER\n \t      && (GET_MODE_SIZE (inmode)\n \t\t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (in)))))\n-\t  || (GET_CODE (SUBREG_REG (in)) == REG\n-\t      && REGNO (SUBREG_REG (in)) < FIRST_PSEUDO_REGISTER\n+\t  || (REGNO (SUBREG_REG (in)) < FIRST_PSEUDO_REGISTER\n+\t      /* The case where out is nonzero\n+\t\t is handled differently in the following statement.  */\n+\t      && (out == 0 || SUBREG_WORD (in) == 0)\n \t      && (! HARD_REGNO_MODE_OK (REGNO (SUBREG_REG (in)), inmode)\n \t\t  || (GET_MODE_SIZE (inmode) <= UNITS_PER_WORD\n \t\t      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (in)))\n@@ -667,6 +672,30 @@ push_reload (in, out, inloc, outloc, class,\n       inmode = GET_MODE (in);\n     }\n \n+  /* Similar issue for (SUBREG:M1 (REG:M2 ...) ...) for a hard register R where\n+     either M1 is not valid for R or M2 is wider than a word but we only\n+     need one word to store an M2-sized quantity in R.\n+\n+     However, we must reload the inner reg *as well as* the subreg in\n+     that case.  */\n+\n+  if (in != 0 && GET_CODE (in) == SUBREG\n+      && GET_CODE (SUBREG_REG (in)) == REG\n+      && REGNO (SUBREG_REG (in)) < FIRST_PSEUDO_REGISTER\n+      && (! HARD_REGNO_MODE_OK (REGNO (SUBREG_REG (in)), inmode)\n+\t  || (GET_MODE_SIZE (inmode) <= UNITS_PER_WORD\n+\t      && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (in)))\n+\t\t  > UNITS_PER_WORD)\n+\t      && ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (in)))\n+\t\t   / UNITS_PER_WORD)\n+\t\t  != HARD_REGNO_NREGS (REGNO (SUBREG_REG (in)),\n+\t\t\t\t       GET_MODE (SUBREG_REG (in)))))))\n+    {\n+      push_reload (SUBREG_REG (in), NULL_RTX, &SUBREG_REG (in), NULL_PTR,\n+\t\t   GENERAL_REGS, VOIDmode, VOIDmode, 0, 0, opnum, type);\n+    }\n+\n+\n   /* Similarly for paradoxical and problematical SUBREGs on the output.\n      Note that there is no reason we need worry about the previous value\n      of SUBREG_REG (out); even if wider than out,"}]}