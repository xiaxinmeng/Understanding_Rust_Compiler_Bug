{"sha": "e323628e6b731fb82978bcd5f0d337a0e434b1d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyMzYyOGU2YjczMWZiODI5NzhiY2Q1ZjBkMzM3YTBlNDM0YjFkOA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:51:47Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:51:47Z"}, "message": "vclz.c: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vclz.c: New file.\n\nFrom-SVN: r216655", "tree": {"sha": "51d825ef6f6371eb2122d176dc6d5a386b5e9d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d825ef6f6371eb2122d176dc6d5a386b5e9d56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e323628e6b731fb82978bcd5f0d337a0e434b1d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e323628e6b731fb82978bcd5f0d337a0e434b1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e323628e6b731fb82978bcd5f0d337a0e434b1d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e323628e6b731fb82978bcd5f0d337a0e434b1d8/comments", "author": null, "committer": null, "parents": [{"sha": "fd731cf95b47cab2fbafafd33463fdb26b173198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd731cf95b47cab2fbafafd33463fdb26b173198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd731cf95b47cab2fbafafd33463fdb26b173198"}], "stats": {"total": 198, "additions": 198, "deletions": 0}, "files": [{"sha": "545865362c6f4fe8cedef5f97156f241e375df0d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e323628e6b731fb82978bcd5f0d337a0e434b1d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e323628e6b731fb82978bcd5f0d337a0e434b1d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e323628e6b731fb82978bcd5f0d337a0e434b1d8", "patch": "@@ -1,3 +1,7 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vclz.c: New file.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vbsl.c: New file."}, {"sha": "ad28d2dd8219756a0202aff570eccc3cacc16003", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vclz.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e323628e6b731fb82978bcd5f0d337a0e434b1d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclz.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e323628e6b731fb82978bcd5f0d337a0e434b1d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclz.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclz.c?ref=e323628e6b731fb82978bcd5f0d337a0e434b1d8", "patch": "@@ -0,0 +1,194 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x3, 0x3, 0x3, 0x3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x11, 0x11 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x5, 0x5 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2,\n+\t\t\t\t\t0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x3, 0x3, 0x3, 0x3 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3,\n+\t\t\t\t\t 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xd, 0xd, 0xd, 0xd,\n+\t\t\t\t\t 0xd, 0xd, 0xd, 0xd };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x1f, 0x1f, 0x1f, 0x1f };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+\n+/* Expected results with input=0.  */\n+VECT_VAR_DECL(expected_with_0,int,8,8) [] = { 0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t      0x8, 0x8, 0x8, 0x8 };\n+VECT_VAR_DECL(expected_with_0,int,16,4) [] = { 0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_with_0,int,32,2) [] = { 0x20, 0x20 };\n+VECT_VAR_DECL(expected_with_0,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_with_0,uint,8,8) [] = { 0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t       0x8, 0x8, 0x8, 0x8 };\n+VECT_VAR_DECL(expected_with_0,uint,16,4) [] = { 0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_with_0,uint,32,2) [] = { 0x20, 0x20 };\n+VECT_VAR_DECL(expected_with_0,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected_with_0,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_with_0,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected_with_0,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected_with_0,int,8,16) [] = { 0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t       0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t       0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t       0x8, 0x8, 0x8, 0x8 };\n+VECT_VAR_DECL(expected_with_0,int,16,8) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t       0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_with_0,int,32,4) [] = { 0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_with_0,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t       0x3333333333333333 };\n+VECT_VAR_DECL(expected_with_0,uint,8,16) [] = { 0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t\t0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t\t0x8, 0x8, 0x8, 0x8,\n+\t\t\t\t\t\t0x8, 0x8, 0x8, 0x8 };\n+VECT_VAR_DECL(expected_with_0,uint,16,8) [] = { 0x10, 0x10, 0x10, 0x10,\n+\t\t\t\t\t\t0x10, 0x10, 0x10, 0x10 };\n+VECT_VAR_DECL(expected_with_0,uint,32,4) [] = { 0x20, 0x20, 0x20, 0x20 };\n+VECT_VAR_DECL(expected_with_0,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected_with_0,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected_with_0,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t\t0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected_with_0,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t\t  0x33333333, 0x33333333 };\n+\n+#define INSN_NAME vclz\n+#define TEST_MSG \"VCLZ/VCLZQ\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN_NAME)\n+{\n+  /* Basic test: y=vclz(x), then store the result.  */\n+#define TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_UNARY_OP(INSN, Q, T1, T2, W, N)\t\\\n+  TEST_UNARY_OP1(INSN, Q, T1, T2, W, N)\t\t\\\n+\n+  /* No need for 64 bits variants */\n+  DECL_VARIABLE(vector, int, 8, 8);\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, uint, 8, 8);\n+  DECL_VARIABLE(vector, uint, 16, 4);\n+  DECL_VARIABLE(vector, uint, 32, 2);\n+  DECL_VARIABLE(vector, int, 8, 16);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, uint, 8, 16);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 8, 16);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+  DECL_VARIABLE(vector_res, uint, 8, 16);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with arbitrary values.  */\n+  VDUP(vector, , int, s, 8, 8, 0x84);\n+  VDUP(vector, , int, s, 16, 4, 0x1234);\n+  VDUP(vector, , int, s, 32, 2, 0x5678);\n+  VDUP(vector, , uint, u, 8, 8, 0x34);\n+  VDUP(vector, , uint, u, 16, 4, 0x8234);\n+  VDUP(vector, , uint, u, 32, 2, 0x7654321);\n+  VDUP(vector, q, int, s, 8, 16, 0x34);\n+  VDUP(vector, q, int, s, 16, 8, 0x1234);\n+  VDUP(vector, q, int, s, 32, 4, 0x12345678);\n+  VDUP(vector, q, uint, u, 8, 16, 0x13);\n+  VDUP(vector, q, uint, u, 16, 8, 0x4);\n+  VDUP(vector, q, uint, u, 32, 4, 0x1);\n+\n+  /* Apply a unary operator named INSN_NAME.  */\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 32, 4);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 32, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+\n+  /* Test with zero as input.  */\n+  VDUP(vector, , int, s, 8, 8, 0);\n+  VDUP(vector, , int, s, 16, 4, 0);\n+  VDUP(vector, , int, s, 32, 2, 0);\n+  VDUP(vector, , uint, u, 8, 8, 0);\n+  VDUP(vector, , uint, u, 16, 4, 0);\n+  VDUP(vector, , uint, u, 32, 2, 0);\n+  VDUP(vector, q, int, s, 8, 16, 0);\n+  VDUP(vector, q, int, s, 16, 8, 0);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, uint, u, 8, 16, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0);\n+  VDUP(vector, q, uint, u, 32, 4, 0);\n+\n+  /* Apply a unary operator named INSN_NAME.  */\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , int, s, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 8, 8);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, , uint, u, 32, 2);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, int, s, 32, 4);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 8, 16);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 16, 8);\n+  TEST_UNARY_OP(INSN_NAME, q, uint, u, 32, 4);\n+\n+  CHECK_RESULTS_NAMED (TEST_MSG, expected_with_0, \" (input=0)\");\n+}\n+\n+int main (void)\n+{\n+  exec_vclz ();\n+  return 0;\n+}"}]}