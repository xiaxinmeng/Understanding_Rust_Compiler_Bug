{"sha": "d1615643e511bab93bdf275303aab9468505bc79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2MTU2NDNlNTExYmFiOTNiZGYyNzUzMDNhYWI5NDY4NTA1YmM3OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-30T13:23:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-30T13:23:42Z"}, "message": "basic_string.tcc (_Rep::_S_create): Never allocate a string bigger than max_size()...\n\n2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (_Rep::_S_create):\n\tNever allocate a string bigger than max_size(); always keep\n\t__capacity and __size in sync to avoid memory leaks at\n\tdeallocation time.\n\nFrom-SVN: r76955", "tree": {"sha": "2e503ee03b3527329af5598d5b7ce79ff5af683d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e503ee03b3527329af5598d5b7ce79ff5af683d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1615643e511bab93bdf275303aab9468505bc79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1615643e511bab93bdf275303aab9468505bc79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1615643e511bab93bdf275303aab9468505bc79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1615643e511bab93bdf275303aab9468505bc79/comments", "author": null, "committer": null, "parents": [{"sha": "1e0f41c9d2779b52fa385510c4c3375be596f1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e0f41c9d2779b52fa385510c4c3375be596f1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e0f41c9d2779b52fa385510c4c3375be596f1ff"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "0273958d79ecb006c2069f3edc3b0ce49dbacf8f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1615643e511bab93bdf275303aab9468505bc79/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1615643e511bab93bdf275303aab9468505bc79/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d1615643e511bab93bdf275303aab9468505bc79", "patch": "@@ -1,3 +1,10 @@\n+2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (_Rep::_S_create):\n+\tNever allocate a string bigger than max_size(); always keep\n+\t__capacity and __size in sync to avoid memory leaks at\n+\tdeallocation time.\n+\n 2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.tcc (_S_construct(_InIterator,"}, {"sha": "e35b305cdeb12bee159785489a8e4721db14079b", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1615643e511bab93bdf275303aab9468505bc79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1615643e511bab93bdf275303aab9468505bc79/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=d1615643e511bab93bdf275303aab9468505bc79", "patch": "@@ -520,15 +520,18 @@ namespace std\n \t\t\t\t     - (__size + __malloc_header_size)\n \t\t\t\t     % __pagesize);\n \t  __capacity += __extra / sizeof(_CharT);\n-\t  __size += __extra;\n+\t  // Never allocate a string bigger than _S_max_size.\n+\t  if (__capacity > _S_max_size)\n+\t    __capacity = _S_max_size;\n+\t  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n \t}\n       else if (__size > __subpagesize)\n \t{\n \t  const size_type __extra = (__subpagesize\n \t\t\t\t     - (__size + __malloc_header_size)\n \t\t\t\t     % __subpagesize);\n \t  __capacity += __extra / sizeof(_CharT);\n-\t  __size += __extra;\n+\t  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);\n \t}\n \n       // NB: Might throw, but no worries about a leak, mate: _Rep()"}]}