{"sha": "295dde9412f6285b8580a3b3e202e9073dcf2d58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk1ZGRlOTQxMmY2Mjg1Yjg1ODBhM2IzZTIwMmU5MDczZGNmMmQ1OA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:47:49Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:47:49Z"}, "message": "vabal.c: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vabal.c: New file.\n\nFrom-SVN: r216648", "tree": {"sha": "124d1c01921eaf70d7d61e9e5ca8246a6dc7978b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/124d1c01921eaf70d7d61e9e5ca8246a6dc7978b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/295dde9412f6285b8580a3b3e202e9073dcf2d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295dde9412f6285b8580a3b3e202e9073dcf2d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/295dde9412f6285b8580a3b3e202e9073dcf2d58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295dde9412f6285b8580a3b3e202e9073dcf2d58/comments", "author": null, "committer": null, "parents": [{"sha": "f59574a1c443ab5a1d06da4b09ed6d4677a7158a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59574a1c443ab5a1d06da4b09ed6d4677a7158a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59574a1c443ab5a1d06da4b09ed6d4677a7158a"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "e466cd2e56c30e599f9e86dec37d4a6fe1d2bfa1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295dde9412f6285b8580a3b3e202e9073dcf2d58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295dde9412f6285b8580a3b3e202e9073dcf2d58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=295dde9412f6285b8580a3b3e202e9073dcf2d58", "patch": "@@ -1,3 +1,7 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vabal.c: New file.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/binary_sat_op.inc: New"}, {"sha": "cd310623463fd41f51ec8df739698ba61374f0cf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vabal.c", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295dde9412f6285b8580a3b3e202e9073dcf2d58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295dde9412f6285b8580a3b3e202e9073dcf2d58/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabal.c?ref=295dde9412f6285b8580a3b3e202e9073dcf2d58", "patch": "@@ -0,0 +1,161 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t       0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x33333333, 0x33333333 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff6, 0xfff7, 0xfff8, 0xfff9,\n+\t\t\t\t\t0xfffa, 0xfffb, 0xfffc, 0xfffd };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x16, 0x17, 0x18, 0x19 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x20, 0x21 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0x53, 0x54, 0x55, 0x56,\n+\t\t\t\t\t 0x57, 0x58, 0x59, 0x5a };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0x907, 0x908, 0x909, 0x90a };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffe7,\n+\t\t\t\t\t 0xffffffe8 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x33333333, 0x33333333,\n+\t\t\t\t\t   0x33333333, 0x33333333 };\n+\n+/* Expected results for cases with input values chosen to test\n+   possible intermediate overflow.  */\n+VECT_VAR_DECL(expected2,int,16,8) [] = { 0xef, 0xf0, 0xf1, 0xf2,\n+\t\t\t\t\t 0xf3, 0xf4, 0xf5, 0xf6 };\n+VECT_VAR_DECL(expected2,int,32,4) [] = { 0xffef, 0xfff0, 0xfff1, 0xfff2 };\n+VECT_VAR_DECL(expected2,int,64,2) [] = { 0xffffffef, 0xfffffff0 };\n+VECT_VAR_DECL(expected2,uint,16,8) [] = { 0xee, 0xef, 0xf0, 0xf1,\n+\t\t\t\t\t  0xf2, 0xf3, 0xf4, 0xf5 };\n+VECT_VAR_DECL(expected2,uint,32,4) [] = { 0xffe2, 0xffe3, 0xffe4, 0xffe5 };\n+VECT_VAR_DECL(expected2,uint,64,2) [] = { 0xffffffe7, 0xffffffe8 };\n+\n+#define TEST_MSG \"VABAL\"\n+void exec_vabal (void)\n+{\n+  /* Basic test: v4=vabal(v1,v2,v3), then store the result.  */\n+#define TEST_VABAL(T1, T2, W, W2, N)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W2, N) =\t\t\t\t\t\\\n+    vabal_##T2##W(VECT_VAR(vector1, T1, W2, N),\t\t\t\t\\\n+\t\t  VECT_VAR(vector2, T1, W, N),\t\t\t\t\\\n+\t\t  VECT_VAR(vector3, T1, W, N));\t\t\t\t\\\n+  vst1q_##T2##W2(VECT_VAR(result, T1, W2, N), VECT_VAR(vector_res, T1, W2, N))\n+\n+#define DECL_VABAL_VAR_LONG(VAR)\t\t\\\n+  DECL_VARIABLE(VAR, int, 16, 8);\t\t\\\n+  DECL_VARIABLE(VAR, int, 32, 4);\t\t\\\n+  DECL_VARIABLE(VAR, int, 64, 2);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 16, 8);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 32, 4);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 64, 2)\n+\n+#define DECL_VABAL_VAR_SHORT(VAR)\t\t\\\n+  DECL_VARIABLE(VAR, int, 8, 8);\t\t\\\n+  DECL_VARIABLE(VAR, int, 16, 4);\t\t\\\n+  DECL_VARIABLE(VAR, int, 32, 2);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 8, 8);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 16, 4);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 32, 2)\n+\n+  DECL_VABAL_VAR_LONG(vector1);\n+  DECL_VABAL_VAR_SHORT(vector2);\n+  DECL_VABAL_VAR_SHORT(vector3);\n+  DECL_VABAL_VAR_LONG(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector1\" from \"buffer\".  */\n+  VLOAD(vector1, buffer, q, int, s, 16, 8);\n+  VLOAD(vector1, buffer, q, int, s, 32, 4);\n+  VLOAD(vector1, buffer, q, int, s, 64, 2);\n+  VLOAD(vector1, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector1, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector1, buffer, q, uint, u, 64, 2);\n+\n+\n+  /* Choose init value arbitrarily.  */\n+  VDUP(vector2, , int, s, 8, 8, 1);\n+  VDUP(vector2, , int, s, 16, 4, -13);\n+  VDUP(vector2, , int, s, 32, 2, 8);\n+  VDUP(vector2, , uint, u, 8, 8, 1);\n+  VDUP(vector2, , uint, u, 16, 4, 13);\n+  VDUP(vector2, , uint, u, 32, 2, 8);\n+\n+  /* Choose init value arbitrarily.  */\n+  VDUP(vector3, , int, s, 8, 8, -5);\n+  VDUP(vector3, , int, s, 16, 4, 25);\n+  VDUP(vector3, , int, s, 32, 2, -40);\n+  VDUP(vector3, , uint, u, 8, 8, 100);\n+  VDUP(vector3, , uint, u, 16, 4, 2340);\n+  VDUP(vector3, , uint, u, 32, 2, 0xffffffff);\n+\n+  /* Execute the tests.  */\n+  TEST_VABAL(int, s, 8, 16, 8);\n+  TEST_VABAL(int, s, 16, 32, 4);\n+  TEST_VABAL(int, s, 32, 64, 2);\n+  TEST_VABAL(uint, u, 8, 16, 8);\n+  TEST_VABAL(uint, u, 16, 32, 4);\n+  TEST_VABAL(uint, u, 32, 64, 2);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+\n+  /* Use values that could lead to overflow intermediate\n+   * calculations.  */\n+  VDUP(vector2, , int, s, 8, 8, 0x80);\n+  VDUP(vector2, , int, s, 16, 4, 0x8000);\n+  VDUP(vector2, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector2, , uint, u, 8, 8, 1);\n+  VDUP(vector2, , uint, u, 16, 4, 13);\n+  VDUP(vector2, , uint, u, 32, 2, 8);\n+\n+  VDUP(vector3, , int, s, 8, 8, 0x7f);\n+  VDUP(vector3, , int, s, 16, 4, 0x7fff);\n+  VDUP(vector3, , int, s, 32, 2, 0x7fffffff);\n+  VDUP(vector3, , uint, u, 8, 8, 0xff);\n+  VDUP(vector3, , uint, u, 16, 4, 0xffff);\n+  VDUP(vector3, , uint, u, 32, 2, 0xffffffff);\n+\n+  TEST_VABAL(int, s, 8, 16, 8);\n+  TEST_VABAL(int, s, 16, 32, 4);\n+  TEST_VABAL(int, s, 32, 64, 2);\n+  TEST_VABAL(uint, u, 8, 16, 8);\n+  TEST_VABAL(uint, u, 16, 32, 4);\n+  TEST_VABAL(uint, u, 32, 64, 2);\n+\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected2, \" test intermediate overflow\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected2, \" test intermediate overflow\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected2, \" test intermediate overflow\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected2, \" test intermediate overflow\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected2, \" test intermediate overflow\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected2, \" test intermediate overflow\");\n+}\n+\n+int main (void)\n+{\n+  exec_vabal ();\n+  return 0;\n+}"}]}