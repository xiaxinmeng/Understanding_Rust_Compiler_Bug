{"sha": "266f44a91c0c9705d3d18e82d7c5bab32927a18f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY2ZjQ0YTkxYzBjOTcwNWQzZDE4ZTgyZDdjNWJhYjMyOTI3YTE4Zg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-17T17:10:34Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-05-17T17:10:47Z"}, "message": "x86: Allow V1TI vector register pushes\n\nAdd V1TI vector register push and split it after reload to a sequence\nof:\n\n(set (reg:P SP_REG) (plus:P SP_REG) (const_int -8)))\n(set (match_dup 0) (match_dup 1))\n\nso that STV pass can convert TI mode integer push to V1TI vector register\npush.  Rename has_non_address_hard_reg to pseudo_reg_set, combine calls\nof single_set and has_non_address_hard_reg to pseudo_reg_set, to ignore\npseudo register push.\n\nRemove c-c++-common/dfp/func-vararg-mixed-2.c since it is compiled with\n-mpreferred-stack-boundary=2 and leads to segfault:\n\nDump of assembler code for function __bid_nesd2:\n   0x08049210 <+0>:\tendbr32\n   0x08049214 <+4>:\tpush   %esi\n   0x08049215 <+5>:\tpush   %ebx\n   0x08049216 <+6>:\tcall   0x8049130 <__x86.get_pc_thunk.bx>\n   0x0804921b <+11>:\tadd    $0x8de5,%ebx\n   0x08049221 <+17>:\tsub    $0x20,%esp\n   0x08049224 <+20>:\tmov    0x30(%esp),%esi\n   0x08049228 <+24>:\tpushl  0x2c(%esp)\n   0x0804922c <+28>:\tcall   0x804e600 <__bid32_to_bid64>\n   0x08049231 <+33>:\tmov    %esi,(%esp)\n   0x08049234 <+36>:\tmovd   %edx,%xmm1\n   0x08049238 <+40>:\tmovd   %eax,%xmm0\n   0x0804923c <+44>:\tpunpckldq %xmm1,%xmm0\n=> 0x08049240 <+48>:\tmovaps %xmm0,0x10(%esp)\n   0x08049245 <+53>:\tcall   0x804e600 <__bid32_to_bid64>\n   0x0804924a <+58>:\tpush   %edx\n   0x0804924b <+59>:\tpush   %eax\n   0x0804924c <+60>:\tpushl  0x1c(%esp)\n   0x08049250 <+64>:\tpushl  0x1c(%esp)\n   0x08049254 <+68>:\tcall   0x804b260 <__bid64_quiet_not_equal>\n   0x08049259 <+73>:\tadd    $0x34,%esp\n   0x0804925c <+76>:\tpop    %ebx\n   0x0804925d <+77>:\tpop    %esi\n   0x0804925e <+78>:\tret\n\nwhen libgcc is compiled with -msse2.  According to GCC manual:\n\n'-mpreferred-stack-boundary=NUM'\n     Attempt to keep the stack boundary aligned to a 2 raised to NUM\n     byte boundary.  If '-mpreferred-stack-boundary' is not specified,\n     the default is 4 (16 bytes or 128-bits).\n\n     *Warning:* If you use this switch, then you must build all modules\n     with the same value, including any libraries.  This includes the\n     system libraries and startup modules.\n\nc-c++-common/dfp/func-vararg-mixed-2.c, which was added by\n\ncommit 3b2488ca6ece182f2136a20ee5fa0bb92f935b0f\nAuthor: H.J. Lu <hongjiu.lu@intel.com>\nDate:   Wed Jul 30 19:24:02 2008 +0000\n\n    func-vararg-alternate-d128-2.c: New.\n\n    2008-07-30  H.J. Lu  <hongjiu.lu@intel.com>\n                Joey Ye  <joey.ye@intel.com>\n\n            * gcc.dg/dfp/func-vararg-alternate-d128-2.c: New.\n            * gcc.dg/dfp/func-vararg-mixed-2.c: Likewise.\n\nisn't expected to work with libgcc.\n\ngcc/\n\n\tPR target/95021\n\t* config/i386/i386-features.c (has_non_address_hard_reg):\n\tRenamed to ...\n\t(pseudo_reg_set): This.  Return the SET expression.  Ignore\n\tpseudo register push.\n\t(general_scalar_to_vector_candidate_p): Combine single_set and\n\thas_non_address_hard_reg calls to pseudo_reg_set.\n\t(timode_scalar_to_vector_candidate_p): Likewise.\n\t* config/i386/i386.md (*pushv1ti2): New pattern.\n\ngcc/testsuite/\n\n\tPR target/95021\n\t* c-c++-common/dfp/func-vararg-mixed-2.c: Removed.\n\t* gcc.target/i386/pr95021-1.c: New test.\n\t* gcc.target/i386/pr95021-2.c: Likewise.\n\t* gcc.target/i386/pr95021-3.c: Likewise.\n\t* gcc.target/i386/pr95021-4.c: Likewise.\n\t* gcc.target/i386/pr95021-5.c: Likewise.", "tree": {"sha": "72cc99ca50210fc6d3b553685c3ac646667c909a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72cc99ca50210fc6d3b553685c3ac646667c909a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/266f44a91c0c9705d3d18e82d7c5bab32927a18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266f44a91c0c9705d3d18e82d7c5bab32927a18f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/266f44a91c0c9705d3d18e82d7c5bab32927a18f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266f44a91c0c9705d3d18e82d7c5bab32927a18f/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e977a5df5bae2bce6e3e95456f5da0dbfdd02934"}], "stats": {"total": 324, "additions": 203, "deletions": 121}, "files": [{"sha": "f03b996ab9e4e8eedcfe784998f17d128cbf713c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -1,3 +1,15 @@\n+2020-05-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/95021\n+\t* config/i386/i386-features.c (has_non_address_hard_reg):\n+\tRenamed to ...\n+\t(pseudo_reg_set): This.  Return the SET expression.  Ignore\n+\tpseudo register push.\n+\t(general_scalar_to_vector_candidate_p): Combine single_set and\n+\thas_non_address_hard_reg calls to pseudo_reg_set.\n+\t(timode_scalar_to_vector_candidate_p): Likewise.\n+\t* config/i386/i386.md (*pushv1ti2): New pattern.\n+\n 2020-05-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \tRevert:"}, {"sha": "b9b764c092af95884777644e50ef7086f97ba915", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -1253,25 +1253,36 @@ scalar_chain::convert ()\n   return converted_insns;\n }\n \n-/* Return 1 if INSN uses or defines a hard register.\n-   Hard register uses in a memory address are ignored.\n-   Clobbers and flags definitions are ignored.  */\n+/* Return the SET expression if INSN doesn't reference hard register.\n+   Return NULL if INSN uses or defines a hard register, excluding\n+   pseudo register pushes, hard register uses in a memory address,\n+   clobbers and flags definitions.  */\n \n-static bool\n-has_non_address_hard_reg (rtx_insn *insn)\n+static rtx\n+pseudo_reg_set (rtx_insn *insn)\n {\n+  rtx set = single_set (insn);\n+  if (!set)\n+    return NULL;\n+\n+  /* Check pseudo register push first. */\n+  if (REG_P (SET_SRC (set))\n+      && !HARD_REGISTER_P (SET_SRC (set))\n+      && push_operand (SET_DEST (set), GET_MODE (SET_DEST (set))))\n+    return set;\n+\n   df_ref ref;\n   FOR_EACH_INSN_DEF (ref, insn)\n     if (HARD_REGISTER_P (DF_REF_REAL_REG (ref))\n \t&& !DF_REF_FLAGS_IS_SET (ref, DF_REF_MUST_CLOBBER)\n \t&& DF_REF_REGNO (ref) != FLAGS_REG)\n-      return true;\n+      return NULL;\n \n   FOR_EACH_INSN_USE (ref, insn)\n     if (!DF_REF_REG_MEM_P (ref) && HARD_REGISTER_P (DF_REF_REAL_REG (ref)))\n-      return true;\n+      return NULL;\n \n-  return false;\n+  return set;\n }\n \n /* Check if comparison INSN may be transformed\n@@ -1345,14 +1356,11 @@ convertible_comparison_p (rtx_insn *insn, enum machine_mode mode)\n static bool\n general_scalar_to_vector_candidate_p (rtx_insn *insn, enum machine_mode mode)\n {\n-  rtx def_set = single_set (insn);\n+  rtx def_set = pseudo_reg_set (insn);\n \n   if (!def_set)\n     return false;\n \n-  if (has_non_address_hard_reg (insn))\n-    return false;\n-\n   rtx src = SET_SRC (def_set);\n   rtx dst = SET_DEST (def_set);\n \n@@ -1442,14 +1450,11 @@ general_scalar_to_vector_candidate_p (rtx_insn *insn, enum machine_mode mode)\n static bool\n timode_scalar_to_vector_candidate_p (rtx_insn *insn)\n {\n-  rtx def_set = single_set (insn);\n+  rtx def_set = pseudo_reg_set (insn);\n \n   if (!def_set)\n     return false;\n \n-  if (has_non_address_hard_reg (insn))\n-    return false;\n-\n   rtx src = SET_SRC (def_set);\n   rtx dst = SET_DEST (def_set);\n "}, {"sha": "9fd32f28bf334df352d7b766d55f35c8751d9a7e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -1674,6 +1674,22 @@\n \f\n ;; Push/pop instructions.\n \n+(define_insn_and_split \"*pushv1ti2\"\n+  [(set (match_operand:V1TI 0 \"push_operand\" \"=<\")\n+\t(match_operand:V1TI 1 \"register_operand\" \"v\"))]\n+  \"TARGET_64BIT && TARGET_STV\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n+   (set (match_dup 0) (match_dup 1))]\n+{\n+  operands[2] = GEN_INT (-PUSH_ROUNDING (GET_MODE_SIZE (V1TImode)));\n+  /* Preserve memory attributes. */\n+  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"*push<mode>2\"\n   [(set (match_operand:DWI 0 \"push_operand\" \"=<,<\")\n \t(match_operand:DWI 1 \"general_no_elim_operand\" \"riF*o,*v\"))]"}, {"sha": "54fbdb08b66b37cf13ba57efb878fc7da64fd579", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -1,3 +1,13 @@\n+2020-05-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/95021\n+\t* c-c++-common/dfp/func-vararg-mixed-2.c: Removed.\n+\t* gcc.target/i386/pr95021-1.c: New test.\n+\t* gcc.target/i386/pr95021-2.c: Likewise.\n+\t* gcc.target/i386/pr95021-3.c: Likewise.\n+\t* gcc.target/i386/pr95021-4.c: Likewise.\n+\t* gcc.target/i386/pr95021-5.c: Likewise.\n+\n 2020-05-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/strncmp-1.c: New test."}, {"sha": "02cafb016d10cc43dc17c8ff8372738cf194300b", "filename": "gcc/testsuite/c-c++-common/dfp/func-vararg-mixed-2.c", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Ffunc-vararg-mixed-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e977a5df5bae2bce6e3e95456f5da0dbfdd02934/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Ffunc-vararg-mixed-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fdfp%2Ffunc-vararg-mixed-2.c?ref=e977a5df5bae2bce6e3e95456f5da0dbfdd02934", "patch": "@@ -1,105 +0,0 @@\n-/* { dg-do run { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n-/* { dg-options \"-mpreferred-stack-boundary=2\" } */\n-\n-/* C99 6.5.2.2 Function calls.\n-   Test passing varargs of the combination of decimal float types and\n-   other types.  */\n-\n-#include <stdarg.h>\n-#include \"dfp-dbg.h\"\n-\n-/* Supposing the list of varying number of arguments is:\n-   unsigned int, _Decimal128, double, _Decimal32, _Decimal64.  */\n-\n-static _Decimal32\n-vararg_d32 (unsigned arg, ...)\n-{\n-  va_list ap;\n-  _Decimal32 result;\n-\n-  va_start (ap, arg);\n-\n-  va_arg (ap, unsigned int);\n-  va_arg (ap, _Decimal128);\n-  va_arg (ap, double);\n-  result = va_arg (ap, _Decimal32);\n-\n-  va_end (ap);\n-  return result;\n-}\n-\n-static _Decimal32\n-vararg_d64 (unsigned arg, ...)\n-{\n-  va_list ap;\n-  _Decimal64 result;\n-\n-  va_start (ap, arg);\n-\n-  va_arg (ap, unsigned int);\n-  va_arg (ap, _Decimal128);\n-  va_arg (ap, double);\n-  va_arg (ap, _Decimal32);\n-  result = va_arg (ap, _Decimal64);\n-\n-  va_end (ap);\n-  return result;\n-}\n-\n-static _Decimal128\n-vararg_d128 (unsigned arg, ...)\n-{\n-  va_list ap;\n-  _Decimal128 result;\n-\n-  va_start (ap, arg);\n-\n-  va_arg (ap, unsigned int);\n-  result = va_arg (ap, _Decimal128);\n-\n-  va_end (ap);\n-  return result;\n-}\n-\n-static unsigned int\n-vararg_int (unsigned arg, ...)\n-{\n-  va_list ap;\n-  unsigned int result;\n-\n-  va_start (ap, arg);\n-\n-  result = va_arg (ap, unsigned int);\n-\n-  va_end (ap);\n-  return result;\n-}\n-\n-static double\n-vararg_double (unsigned arg, ...)\n-{\n-  va_list ap;\n-  float result;\n-\n-  va_start (ap, arg);\n-\n-  va_arg (ap, unsigned int);\n-  va_arg (ap, _Decimal128);\n-  result = va_arg (ap, double);\n-\n-  va_end (ap);\n-  return result;\n-}\n-\n-\n-int\n-main ()\n-{\n-  if (vararg_d32 (3, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 3.0df) FAILURE\n-  if (vararg_d64 (4, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 4.0dd) FAILURE\n-  if (vararg_d128 (1, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 1.0dl) FAILURE\n-  if (vararg_int (0, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 0) FAILURE\n-  if (vararg_double (2, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 2.0) FAILURE\n-\n-  FINISH\n-}"}, {"sha": "a0b9a262a87564a327b06c0215fd08804e779720", "filename": "gcc/testsuite/gcc.target/i386/pr95021-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-1.c?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -msse2 -mstv -W\" } */\n+/* { dg-final { scan-assembler \"movq\\[ \\t\\]%xmm\\[0-9\\]+, \\\\(%esp\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"psrlq\" } } */\n+\n+#include <setjmp.h>\n+\n+extern jmp_buf buf;\n+\n+extern long long *target_p;\n+extern long long *c;\n+\n+extern void foo (long long);\n+\n+__attribute__ ((noclone, noinline))\n+void\n+bar (void)\n+{\n+  if (setjmp (buf))\n+    {\n+      long long target = *target_p;\n+      *c = target;\n+      foo (target);\n+    }\n+  else\n+    foo (0);\n+}"}, {"sha": "53247e52784da3deefa68d1b0fe6c69992ec1fec", "filename": "gcc/testsuite/gcc.target/i386/pr95021-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-2.c?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target ia32 } } */\n+/* { dg-require-effective-target sse2_runtime } */\n+/* { dg-options \"-O2 -msse2 -mstv -W\" } */\n+\n+#include <stdlib.h>\n+#include \"pr95021-1.c\"\n+\n+jmp_buf buf;\n+\n+long long *target_p;\n+long long *c;\n+\n+int count;\n+\n+__attribute__ ((noclone, noinline))\n+void\n+foo (long long x)\n+{\n+  if (x != *c)\n+    abort ();\n+  if (!count)\n+    {\n+      count++;\n+      longjmp (buf, 1);\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  long long val = 30;\n+  long long local = 0;\n+  target_p = &val;\n+  c = &local;\n+  bar ();\n+  if (val != local)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "1748161a77c90787f302d191a6297f9ecca0aca5", "filename": "gcc/testsuite/gcc.target/i386/pr95021-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-3.c?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -msse2 -mstv -mregparm=3 -W\" } */\n+/* { dg-final { scan-assembler \"movq\\[ \\t\\]+\\[^\\n\\]*, %xmm\" } } */\n+\n+#include \"pr95021-1.c\""}, {"sha": "d5bb28cc01aa4921422e834b5dad370a0ac1f751", "filename": "gcc/testsuite/gcc.target/i386/pr95021-4.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-4.c?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2 -mstv -W\" } */\n+/* { dg-final { scan-assembler \"(movaps|vmovdqa)\\[ \\t\\]%xmm\\[0-9\\]+, \\\\(%rsp\\\\)\" } } */\n+\n+#include <setjmp.h>\n+\n+extern jmp_buf buf;\n+\n+extern __int128 *target_p;\n+__int128 *c;\n+\n+extern int count;\n+\n+extern void foo (__int128, __int128, __int128, __int128);\n+\n+__attribute__ ((noclone, noinline))\n+void\n+bar (void)\n+{\n+  if (setjmp (buf))\n+    {\n+      __int128 target = *target_p;\n+      *c = target;\n+      foo (0xbadbeef1, 0x2badbeef, 0xbad3beef, target);\n+    }\n+  else\n+    foo (0xbadbeef1, 0x2badbeef, 0xbad3beef, 0);\n+}"}, {"sha": "d8658095bc8b6c0f117d01675976005c2ed9818e", "filename": "gcc/testsuite/gcc.target/i386/pr95021-5.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/266f44a91c0c9705d3d18e82d7c5bab32927a18f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95021-5.c?ref=266f44a91c0c9705d3d18e82d7c5bab32927a18f", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run { target int128 } } */\n+/* { dg-require-effective-target sse2_runtime } */\n+/* { dg-options \"-O2 -msse2 -mstv -W\" } */\n+\n+#include <stdlib.h>\n+#include \"pr95021-4.c\"\n+\n+jmp_buf buf;\n+\n+__int128 *target_p;\n+__int128 *c;\n+\n+int count;\n+\n+__attribute__ ((noclone, noinline))\n+void\n+foo (__int128 i1, __int128 i2, __int128 i3, __int128 x)\n+{\n+  if (i1 != 0xbadbeef1)\n+    abort ();\n+  if (i2 != 0x2badbeef)\n+    abort ();\n+  if (i3 != 0xbad3beef)\n+    abort ();\n+  if (x != *c)\n+    abort ();\n+  if (!count)\n+    {\n+      count++;\n+      longjmp (buf, 1);\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  __int128 val = 30;\n+  __int128 local = 0;\n+  target_p = &val;\n+  c = &local;\n+  bar ();\n+  if (val != local)\n+    abort ();\n+  return 0;\n+}"}]}