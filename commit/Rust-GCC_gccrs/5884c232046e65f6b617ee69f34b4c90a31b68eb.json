{"sha": "5884c232046e65f6b617ee69f34b4c90a31b68eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg4NGMyMzIwNDZlNjVmNmI2MTdlZTY5ZjM0YjRjOTBhMzFiNjhlYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T08:17:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-08T08:17:14Z"}, "message": "[multiple changes]\n\n2013-07-08  Robert Dewar  <dewar@adacore.com>\n\n\t* rtsfind.adb: Minor comment fix.\n\n2013-07-08  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch4.adb (Check_Ghost_Subprogram_Call): Do not check the placement\n\tof a Ghost function call when the enclosing context is being\n\tpreanalyzed.\n\n2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Inlined_Call, Process_Formals): If the\n\texpression in a return statement is a numeric literal, qualify\n\tit with the return type for proper resolution.\n\nFrom-SVN: r200772", "tree": {"sha": "262cecab20751245724b41e9418de2b1e18d13b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/262cecab20751245724b41e9418de2b1e18d13b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5884c232046e65f6b617ee69f34b4c90a31b68eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5884c232046e65f6b617ee69f34b4c90a31b68eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5884c232046e65f6b617ee69f34b4c90a31b68eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5884c232046e65f6b617ee69f34b4c90a31b68eb/comments", "author": null, "committer": null, "parents": [{"sha": "2cbac6c692b9a68e9fedaa193ae756eea8ac23c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cbac6c692b9a68e9fedaa193ae756eea8ac23c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cbac6c692b9a68e9fedaa193ae756eea8ac23c5"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "b5089150855021845c71ecbc9dd7d6d147670866", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5884c232046e65f6b617ee69f34b4c90a31b68eb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5884c232046e65f6b617ee69f34b4c90a31b68eb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5884c232046e65f6b617ee69f34b4c90a31b68eb", "patch": "@@ -1,3 +1,19 @@\n+2013-07-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* rtsfind.adb: Minor comment fix.\n+\n+2013-07-08  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch4.adb (Check_Ghost_Subprogram_Call): Do not check the placement\n+\tof a Ghost function call when the enclosing context is being\n+\tpreanalyzed.\n+\n+2013-07-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Inlined_Call, Process_Formals): If the\n+\texpression in a return statement is a numeric literal, qualify\n+\tit with the return type for proper resolution.\n+\n 2013-07-08  Robert Dewar  <dewar@adacore.com>\n \n \t* sem.ads: Minor comment updates."}, {"sha": "d48544fdadae6d03e1e87bad571d3bbd69e40dc9", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5884c232046e65f6b617ee69f34b4c90a31b68eb/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5884c232046e65f6b617ee69f34b4c90a31b68eb/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5884c232046e65f6b617ee69f34b4c90a31b68eb", "patch": "@@ -4680,7 +4680,8 @@ package body Exp_Ch6 is\n \n       function Process_Formals (N : Node_Id) return Traverse_Result;\n       --  Replace occurrence of a formal with the corresponding actual, or the\n-      --  thunk generated for it.\n+      --  thunk generated for it. Replace a return statement with an assignment\n+      --  to the target of the call, with appropriate conversions if needed.\n \n       function Process_Sloc (Nod : Node_Id) return Traverse_Result;\n       --  If the call being expanded is that of an internal subprogram, set the\n@@ -4808,9 +4809,14 @@ package body Exp_Ch6 is\n                --  errors, e.g. when the expression is a numeric literal and\n                --  the context is private. If the expression is an aggregate,\n                --  use a qualified expression, because an aggregate is not a\n-               --  legal argument of a conversion.\n+               --  legal argument of a conversion. Ditto for numeric literals,\n+               --  which must be resolved to a specific type.\n \n-               if Nkind_In (Expression (N), N_Aggregate, N_Null) then\n+               if Nkind_In (Expression (N), N_Aggregate,\n+                                            N_Null,\n+                                            N_Real_Literal,\n+                                            N_Integer_Literal)\n+               then\n                   Ret :=\n                     Make_Qualified_Expression (Sloc (N),\n                       Subtype_Mark => New_Occurrence_Of (Ret_Type, Sloc (N)),"}, {"sha": "22abb9a581f9c9e9e75b3ead1bc956431b9c3e7d", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5884c232046e65f6b617ee69f34b4c90a31b68eb/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5884c232046e65f6b617ee69f34b4c90a31b68eb/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=5884c232046e65f6b617ee69f34b4c90a31b68eb", "patch": "@@ -839,8 +839,8 @@ package body Rtsfind is\n          return;\n       end if;\n \n-      --  Add the with_clause, if not already in the context of the current\n-      --  compilation unit.\n+      --  Add the with_clause, if we have not already added an implicit with\n+      --  for this unit to the current compilation unit.\n \n       declare\n          LibUnit : constant Node_Id := Unit (Cunit (U.Unum));"}, {"sha": "a03c46552be56e5417ae141ab91ca1abe1f983c6", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5884c232046e65f6b617ee69f34b4c90a31b68eb/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5884c232046e65f6b617ee69f34b4c90a31b68eb/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=5884c232046e65f6b617ee69f34b4c90a31b68eb", "patch": "@@ -881,12 +881,24 @@ package body Sem_Ch4 is\n          S : Entity_Id;\n \n       begin\n+         --  Do not perform the check while preanalyzing the enclosing context\n+         --  because the call is not in its final place. Premature attempts to\n+         --  verify the placement lead to bogus errors.\n+\n+         if In_Spec_Expression then\n+            return;\n+\n          --  The ghost subprogram appears inside an assertion expression\n+         --  which is one of the allowed cases.\n \n-         if In_Assertion_Expression (N) then\n+         elsif In_Assertion_Expression (N) then\n             return;\n \n+         --  Otherwise see if it inside another ghost subprogram\n+\n          else\n+            --  Loop to climb scopes\n+\n             S := Current_Scope;\n             while Present (S) and then S /= Standard_Standard loop\n \n@@ -898,11 +910,14 @@ package body Sem_Ch4 is\n \n                S := Scope (S);\n             end loop;\n-         end if;\n \n-         Error_Msg_N\n-           (\"call to ghost subprogram must appear in assertion expression or \"\n-            & \"another ghost subprogram\", N);\n+            --  If we fall through the loop it was not within another\n+            --  ghost subprogram, so we have bad placement.\n+\n+            Error_Msg_N\n+              (\"call to ghost subprogram must appear in assertion expression \"\n+               & \"or another ghost subprogram\", N);\n+         end if;\n       end Check_Ghost_Subprogram_Call;\n \n       --------------------------------------------------"}]}