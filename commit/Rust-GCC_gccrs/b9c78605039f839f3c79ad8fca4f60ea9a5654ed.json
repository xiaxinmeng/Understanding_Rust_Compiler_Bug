{"sha": "b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "node_id": "C_kwDOANBUbNoAKGI5Yzc4NjA1MDM5ZjgzOWYzYzc5YWQ4ZmNhNGY2MGVhOWE1NjU0ZWQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-02-14T09:18:07Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2023-02-14T09:18:07Z"}, "message": "vect: Make partial trapping ops use predication [PR96373]\n\nPR96373 points out that a predicated SVE loop currently converts\ntrapping unconditional ops into unpredicated vector ops.  Doing\nthe operation on inactive lanes can then raise an exception.\n\nAs discussed in the PR trail, we aren't 100% consistent about\nwhether we preserve traps or not.  But the direction of travel\nis clearly to improve that rather than live with it.  This patch\ntries to do that for the SVE case.\n\nDoing this regresses gcc.target/aarch64/sve/fabd_1.c.  I've added\n-fno-trapping-math for now and filed PR108571 to track it.\nA similar problem applies to fsubr_1.c.\n\nI think this is likely to regress Power 10, since conditional\noperations are only available for masked loops.  I think we'll\nneed to add -fno-trapping-math to any affected testcases,\nbut I don't have a Power 10 system to test on.\n\ngcc/\n\tPR tree-optimization/96373\n\t* tree-vect-stmts.cc (vectorizable_operation): Predicate trapping\n\toperations on the loop mask.  Reject partial vectors if this isn't\n\tpossible.\n\ngcc/testsuite/\n\tPR tree-optimization/96373\n\tPR tree-optimization/108571\n\t* gcc.target/aarch64/sve/fabd_1.c: Add -fno-trapping-math.\n\t* gcc.target/aarch64/sve/fsubr_1.c: Likewise.\n\t* gcc.target/aarch64/sve/fmul_1.c: Expect predicate ops.\n\t* gcc.target/aarch64/sve/fp_arith_1.c: Likewise.", "tree": {"sha": "0be016027af538a69102c1df401c67b21290c7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0be016027af538a69102c1df401c67b21290c7ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5a1198065dc078f8099db628da7b06a2666f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5a1198065dc078f8099db628da7b06a2666f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5a1198065dc078f8099db628da7b06a2666f34"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "30bde6f0df792207ae25855a06fbc8bbfad51d19", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fabd_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffabd_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffabd_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffabd_1.c?ref=b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O3 --save-temps\" } */\n+/* { dg-options \"-O3 --save-temps -fno-trapping-math\" } */\n \n #define N 16\n "}, {"sha": "0245a8c1422518101e0ac221f95dcec997ee9b17", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmul_1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmul_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmul_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmul_1.c?ref=b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "patch": "@@ -27,20 +27,20 @@ DO_ARITH_OPS (_Float16, *, mul)\n DO_ARITH_OPS (float, *, mul)\n DO_ARITH_OPS (double, *, mul)\n \n-/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n /* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0.5\\n} 1 } } */\n-/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2} } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2.0\\n} 1 } } */\n /* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5} } } */\n /* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #-} } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 4 } } */\n /* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0.5\\n} 1 } } */\n-/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2} } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2.0\\n} 1 } } */\n /* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5} } } */\n /* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #-} } } */\n \n-/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 4 } } */\n /* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0.5\\n} 1 } } */\n-/* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2} } } */\n+/* { dg-final { scan-assembler-times {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2.0\\n} 1 } } */\n /* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #5} } } */\n /* { dg-final { scan-assembler-not   {\\tfmul\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #-} } } */"}, {"sha": "419d6e1b5ec5e5180735ac17e756e13735858232", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fp_arith_1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffp_arith_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffp_arith_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffp_arith_1.c?ref=b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "patch": "@@ -34,37 +34,37 @@ DO_ARITH_OPS (double, -, minus)\n \n /* No specific count because it's valid to use fadd or fsub for the\n    out-of-range constants.  */\n-/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n /* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1.0\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0.5\\n} 2 } } */\n /* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2} } } */\n /* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #-} } } */\n \n-/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1.0\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0.5\\n} 2 } } */\n /* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #2} } } */\n /* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #-} } } */\n \n-/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n /* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1.0\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0.5\\n} 2 } } */\n /* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2} } } */\n /* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #-} } } */\n \n-/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1.0\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0.5\\n} 2 } } */\n /* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #2} } } */\n /* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #-} } } */\n \n-/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n /* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1.0\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0.5\\n} 2 } } */\n /* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2} } } */\n /* { dg-final { scan-assembler-not   {\\tfadd\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #-} } } */\n \n-/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1.0\\n} 2 } } */\n /* { dg-final { scan-assembler-times {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0.5\\n} 2 } } */\n /* { dg-final { scan-assembler-not   {\\tfsub\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #2} } } */"}, {"sha": "012cf6e9e5d245791cbe74f036a780aba417e43c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fsubr_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsubr_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsubr_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffsubr_1.c?ref=b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O3 --save-temps\" } */\n+/* { dg-options \"-O3 --save-temps -fno-trapping-math\" } */\n \n #define DO_IMMEDIATE_OPS(VALUE, TYPE, NAME)\t\t\t\\\n void vsubrarithimm_##NAME##_##TYPE (TYPE *dst, int count)\t\\"}, {"sha": "df6239a1c61c7213ad3c1468723bc1adf70bc02c", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9c78605039f839f3c79ad8fca4f60ea9a5654ed/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=b9c78605039f839f3c79ad8fca4f60ea9a5654ed", "patch": "@@ -6332,6 +6332,7 @@ vectorizable_operation (vec_info *vinfo,\n   int reduc_idx = STMT_VINFO_REDUC_IDX (stmt_info);\n   vec_loop_masks *masks = (loop_vinfo ? &LOOP_VINFO_MASKS (loop_vinfo) : NULL);\n   internal_fn cond_fn = get_conditional_internal_fn (code);\n+  bool could_trap = gimple_could_trap_p (stmt);\n \n   if (!vec_stmt) /* transformation not required.  */\n     {\n@@ -6340,7 +6341,7 @@ vectorizable_operation (vec_info *vinfo,\n \t keeping the inactive lanes as-is.  */\n       if (loop_vinfo\n \t  && LOOP_VINFO_CAN_USE_PARTIAL_VECTORS_P (loop_vinfo)\n-\t  && reduc_idx >= 0)\n+\t  && (could_trap || reduc_idx >= 0))\n \t{\n \t  if (cond_fn == IFN_LAST\n \t      || !direct_internal_fn_supported_p (cond_fn, vectype,\n@@ -6483,16 +6484,31 @@ vectorizable_operation (vec_info *vinfo,\n       vop1 = ((op_type == binary_op || op_type == ternary_op)\n \t      ? vec_oprnds1[i] : NULL_TREE);\n       vop2 = ((op_type == ternary_op) ? vec_oprnds2[i] : NULL_TREE);\n-      if (masked_loop_p && reduc_idx >= 0)\n+      if (masked_loop_p && (reduc_idx >= 0 || could_trap))\n \t{\n-\t  /* Perform the operation on active elements only and take\n-\t     inactive elements from the reduction chain input.  */\n-\t  gcc_assert (!vop2);\n-\t  vop2 = reduc_idx == 1 ? vop1 : vop0;\n \t  tree mask = vect_get_loop_mask (gsi, masks, vec_num * ncopies,\n \t\t\t\t\t  vectype, i);\n-\t  gcall *call = gimple_build_call_internal (cond_fn, 4, mask,\n-\t\t\t\t\t\t    vop0, vop1, vop2);\n+\t  auto_vec<tree> vops (5);\n+\t  vops.quick_push (mask);\n+\t  vops.quick_push (vop0);\n+\t  if (vop1)\n+\t    vops.quick_push (vop1);\n+\t  if (vop2)\n+\t    vops.quick_push (vop2);\n+\t  if (reduc_idx >= 0)\n+\t    {\n+\t      /* Perform the operation on active elements only and take\n+\t\t inactive elements from the reduction chain input.  */\n+\t      gcc_assert (!vop2);\n+\t      vops.quick_push (reduc_idx == 1 ? vop1 : vop0);\n+\t    }\n+\t  else\n+\t    {\n+\t      auto else_value = targetm.preferred_else_value\n+\t\t(cond_fn, vectype, vops.length () - 1, &vops[1]);\n+\t      vops.quick_push (else_value);\n+\t    }\n+\t  gcall *call = gimple_build_call_internal_vec (cond_fn, vops);\n \t  new_temp = make_ssa_name (vec_dest, call);\n \t  gimple_call_set_lhs (call, new_temp);\n \t  gimple_call_set_nothrow (call, true);"}]}