{"sha": "30925d946aa6b2bf93cc9f090ca517f3622df1ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA5MjVkOTQ2YWE2YjJiZjkzY2M5ZjA5MGNhNTE3ZjM2MjJkZjFmZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2011-02-15T18:36:44Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2011-02-15T18:36:44Z"}, "message": "re PR debug/47106 (-fcompare-debug failure (length) with  -fpartial-inlining -flto -fconserve-stack)\n\nPR debug/47106\nPR debug/47402\n* tree-inline.h (estimated_stack_frame_size): Take cgraph node\nrather than decl.\n* cfgexpand.c (estimated_stack_frame_size): Likewise.\n* ipa-inline.c (compute_inline_parameters): Adjust.\n\nFrom-SVN: r170187", "tree": {"sha": "9313ad3b545e7a4daed208b127cfbe5ded452723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9313ad3b545e7a4daed208b127cfbe5ded452723"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30925d946aa6b2bf93cc9f090ca517f3622df1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30925d946aa6b2bf93cc9f090ca517f3622df1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30925d946aa6b2bf93cc9f090ca517f3622df1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30925d946aa6b2bf93cc9f090ca517f3622df1ff/comments", "author": null, "committer": null, "parents": [{"sha": "1b9a784a8988c08979949b85fcf9746574a72ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b9a784a8988c08979949b85fcf9746574a72ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b9a784a8988c08979949b85fcf9746574a72ae0"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "eae0e16c1bd4b01a895c97dcc6b53e6407ac3a44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30925d946aa6b2bf93cc9f090ca517f3622df1ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30925d946aa6b2bf93cc9f090ca517f3622df1ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30925d946aa6b2bf93cc9f090ca517f3622df1ff", "patch": "@@ -1,3 +1,12 @@\n+2011-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/47106\n+\tPR debug/47402\n+\t* tree-inline.h (estimated_stack_frame_size): Take cgraph node\n+\trather than decl.\n+\t* cfgexpand.c (estimated_stack_frame_size): Likewise.\n+\t* ipa-inline.c (compute_inline_parameters): Adjust.\n+\n 2011-02-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/47106"}, {"sha": "4772fea1ebb528b48f7972e11aae815751927d83", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30925d946aa6b2bf93cc9f090ca517f3622df1ff/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30925d946aa6b2bf93cc9f090ca517f3622df1ff/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=30925d946aa6b2bf93cc9f090ca517f3622df1ff", "patch": "@@ -1366,24 +1366,25 @@ fini_vars_expansion (void)\n   stack_vars_alloc = stack_vars_num = 0;\n }\n \n-/* Make a fair guess for the size of the stack frame of the decl\n-   passed.  This doesn't have to be exact, the result is only used\n-   in the inline heuristics.  So we don't want to run the full stack\n-   var packing algorithm (which is quadratic in the number of stack\n-   vars).  Instead, we calculate the total size of all stack vars.\n-   This turns out to be a pretty fair estimate -- packing of stack\n-   vars doesn't happen very often.  */\n+/* Make a fair guess for the size of the stack frame of the function\n+   in NODE.  This doesn't have to be exact, the result is only used in\n+   the inline heuristics.  So we don't want to run the full stack var\n+   packing algorithm (which is quadratic in the number of stack vars).\n+   Instead, we calculate the total size of all stack vars.  This turns\n+   out to be a pretty fair estimate -- packing of stack vars doesn't\n+   happen very often.  */\n \n HOST_WIDE_INT\n-estimated_stack_frame_size (tree decl)\n+estimated_stack_frame_size (struct cgraph_node *node)\n {\n   HOST_WIDE_INT size = 0;\n   size_t i;\n   tree var, outer_block = DECL_INITIAL (current_function_decl);\n   unsigned ix;\n   tree old_cur_fun_decl = current_function_decl;\n-  current_function_decl = decl;\n-  push_cfun (DECL_STRUCT_FUNCTION (decl));\n+\n+  current_function_decl = node->decl;\n+  push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n \n   init_vars_expansion ();\n "}, {"sha": "595d4765da636f9dd4ac5d6af3eeb599c0eee1db", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30925d946aa6b2bf93cc9f090ca517f3622df1ff/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30925d946aa6b2bf93cc9f090ca517f3622df1ff/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=30925d946aa6b2bf93cc9f090ca517f3622df1ff", "patch": "@@ -1982,9 +1982,8 @@ compute_inline_parameters (struct cgraph_node *node)\n \n   gcc_assert (!node->global.inlined_to);\n \n-  /* Estimate the stack size for the function.  But not at -O0\n-     because estimated_stack_frame_size is a quadratic problem.  */\n-  self_stack_size = optimize ? estimated_stack_frame_size (node->decl) : 0;\n+  /* Estimate the stack size for the function if we're optimizing.  */\n+  self_stack_size = optimize ? estimated_stack_frame_size (node) : 0;\n   inline_summary (node)->estimated_self_stack_size = self_stack_size;\n   node->global.estimated_stack_size = self_stack_size;\n   node->global.stack_frame_offset = 0;"}, {"sha": "66cc33484107e2bc240b70f2087b84404ff6cf04", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30925d946aa6b2bf93cc9f090ca517f3622df1ff/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30925d946aa6b2bf93cc9f090ca517f3622df1ff/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=30925d946aa6b2bf93cc9f090ca517f3622df1ff", "patch": "@@ -188,6 +188,6 @@ extern tree remap_decl (tree decl, copy_body_data *id);\n extern tree remap_type (tree type, copy_body_data *id);\n extern gimple_seq copy_gimple_seq_and_replace_locals (gimple_seq seq);\n \n-extern HOST_WIDE_INT estimated_stack_frame_size (tree);\n+extern HOST_WIDE_INT estimated_stack_frame_size (struct cgraph_node *);\n \n #endif /* GCC_TREE_INLINE_H */"}]}