{"sha": "2615502971ca11c15f1949c03d93ccfe1ce54f55", "node_id": "C_kwDOANBUbNoAKDI2MTU1MDI5NzFjYTExYzE1ZjE5NDljMDNkOTNjY2ZlMWNlNTRmNTU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-26T09:03:17Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-26T11:07:04Z"}, "message": "Handle non constant ranges in irange pretty printer.\n\nTechnically iranges only exist in constant form, but we allow symbolic\nones before arriving in the ranger, so legacy VRP can work.  This fixes the\nICE when attempting to print symbolic iranges in the pretty printer.\n\nFor consistency's sake, I have made sure irange::get_nonzero_bits does\nnot similarly ICE on a symbolic range, even though no one should be\nquerying nonzero bits on such a range.  This should all melt away\nwhen legacy disappears, because all these methods are slated for\nremoval (min, max, kind, symbolic_p, constant_p, etc).\n\nFinally, Richi suggested using pp_wide_int in the pretty printer\ninstead of going through trees.  I've adapted a test, since\ndump_generic_node seems to work slightly different.\n\n\tPR tree-optimization/106444\n\ngcc/ChangeLog:\n\n\t* value-range-pretty-print.cc (vrange_printer::visit): Handle\n\tlegacy ranges.\n\t(vrange_printer::print_irange_bound): Work on wide_int's.\n\t* value-range-pretty-print.h (print_irange_bound): Same.\n\t* value-range.cc (irange::get_nonzero_bits): Handle legacy ranges.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/evrp4.c: Adjust.", "tree": {"sha": "bc3e7a35f2b321061a5d1a836da510ac87d7ffd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc3e7a35f2b321061a5d1a836da510ac87d7ffd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2615502971ca11c15f1949c03d93ccfe1ce54f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2615502971ca11c15f1949c03d93ccfe1ce54f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2615502971ca11c15f1949c03d93ccfe1ce54f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2615502971ca11c15f1949c03d93ccfe1ce54f55/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67248ad043b366d30e97cb6c192593057e798805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67248ad043b366d30e97cb6c192593057e798805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67248ad043b366d30e97cb6c192593057e798805"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "895109fdadd8815de91472141b9a6d74b896b2ea", "filename": "gcc/testsuite/gcc.dg/tree-ssa/evrp4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2615502971ca11c15f1949c03d93ccfe1ce54f55/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2615502971ca11c15f1949c03d93ccfe1ce54f55/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fevrp4.c?ref=2615502971ca11c15f1949c03d93ccfe1ce54f55", "patch": "@@ -17,4 +17,4 @@ int bar (struct st *s)\n   foo (&s->a);\n }\n \n-/* { dg-final { scan-tree-dump \"\\\\\\[1B, \\\\+INF\\\\\\]\" \"evrp\" } } */\n+/* { dg-final { scan-tree-dump \"\\\\\\[1, \\\\+INF\\\\\\]\" \"evrp\" } } */"}, {"sha": "cbf50d3d854cb333ca1ca162d82de7b909d3d343", "filename": "gcc/value-range-pretty-print.cc", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2615502971ca11c15f1949c03d93ccfe1ce54f55/gcc%2Fvalue-range-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2615502971ca11c15f1949c03d93ccfe1ce54f55/gcc%2Fvalue-range-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-pretty-print.cc?ref=2615502971ca11c15f1949c03d93ccfe1ce54f55", "patch": "@@ -63,38 +63,45 @@ vrange_printer::visit (const irange &r) const\n       pp_string (pp, \"VARYING\");\n       return;\n     }\n- for (unsigned i = 0; i < r.num_pairs (); ++i)\n+  // Handle legacy symbolics.\n+  if (!r.constant_p ())\n     {\n-      tree lb = wide_int_to_tree (r.type (), r.lower_bound (i));\n-      tree ub = wide_int_to_tree (r.type (), r.upper_bound (i));\n+      if (r.kind () == VR_ANTI_RANGE)\n+\tpp_character (pp, '~');\n       pp_character (pp, '[');\n-      print_irange_bound (lb);\n+      dump_generic_node (pp, r.min (), 0, TDF_NONE, false);\n       pp_string (pp, \", \");\n-      print_irange_bound (ub);\n+      dump_generic_node (pp, r.max (), 0, TDF_NONE, false);\n+      pp_character (pp, ']');\n+      print_irange_bitmasks (r);\n+      return;\n+    }\n+  for (unsigned i = 0; i < r.num_pairs (); ++i)\n+    {\n+      pp_character (pp, '[');\n+      print_irange_bound (r.lower_bound (i), r.type ());\n+      pp_string (pp, \", \");\n+      print_irange_bound (r.upper_bound (i), r.type ());\n       pp_character (pp, ']');\n     }\n  print_irange_bitmasks (r);\n }\n \n void\n-vrange_printer::print_irange_bound (tree bound) const\n+vrange_printer::print_irange_bound (const wide_int &bound, tree type) const\n {\n-  tree type = TREE_TYPE (bound);\n   wide_int type_min = wi::min_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n   wide_int type_max = wi::max_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n \n   if (INTEGRAL_TYPE_P (type)\n       && !TYPE_UNSIGNED (type)\n-      && TREE_CODE (bound) == INTEGER_CST\n-      && wi::to_wide (bound) == type_min\n+      && bound == type_min\n       && TYPE_PRECISION (type) != 1)\n     pp_string (pp, \"-INF\");\n-  else if (TREE_CODE (bound) == INTEGER_CST\n-\t   && wi::to_wide (bound) == type_max\n-\t   && TYPE_PRECISION (type) != 1)\n+  else if (bound == type_max && TYPE_PRECISION (type) != 1)\n     pp_string (pp, \"+INF\");\n   else\n-    dump_generic_node (pp, bound, 0, TDF_NONE, false);\n+    pp_wide_int (pp, bound, TYPE_SIGN (type));\n }\n \n void"}, {"sha": "ad06c93c04473957de9741764caa84d2f2948b32", "filename": "gcc/value-range-pretty-print.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2615502971ca11c15f1949c03d93ccfe1ce54f55/gcc%2Fvalue-range-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2615502971ca11c15f1949c03d93ccfe1ce54f55/gcc%2Fvalue-range-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range-pretty-print.h?ref=2615502971ca11c15f1949c03d93ccfe1ce54f55", "patch": "@@ -29,7 +29,7 @@ class vrange_printer : public vrange_visitor\n   void visit (const irange &) const override;\n   void visit (const frange &) const override;\n private:\n-  void print_irange_bound (tree bound) const;\n+  void print_irange_bound (const wide_int &w, tree type) const;\n   void print_irange_bitmasks (const irange &) const;\n   void print_frange_prop (const char *str, const fp_prop &) const;\n "}, {"sha": "2923f4f5a0eefc69c85a705a882b27f7e34931a1", "filename": "gcc/value-range.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2615502971ca11c15f1949c03d93ccfe1ce54f55/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2615502971ca11c15f1949c03d93ccfe1ce54f55/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=2615502971ca11c15f1949c03d93ccfe1ce54f55", "patch": "@@ -2593,6 +2593,14 @@ irange::get_nonzero_bits () const\n {\n   gcc_checking_assert (!undefined_p ());\n \n+  // In case anyone in the legacy world queries us.\n+  if (!constant_p ())\n+    {\n+      if (m_nonzero_mask)\n+\treturn wi::to_wide (m_nonzero_mask);\n+      return wi::shwi (-1, TYPE_PRECISION (type ()));\n+    }\n+\n   // Calculate the nonzero bits inherent in the range.\n   wide_int min = lower_bound ();\n   wide_int max = upper_bound ();"}]}