{"sha": "c8d6f9e7e5f7cc755dbcaa74021002d8c593543b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhkNmY5ZTdlNWY3Y2M3NTVkYmNhYTc0MDIxMDAyZDhjNTkzNTQzYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2007-10-28T11:37:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-10-28T11:37:50Z"}, "message": "mips.md: Add combiner patterns for DImode extensions of HImode and QImode truncations.\n\ngcc/\n\t* config/mips/mips.md: Add combiner patterns for DImode extensions\n\tof HImode and QImode truncations.  Reformat HImode <- QImode pattern\n\tfor consistency.\n\nFrom-SVN: r129695", "tree": {"sha": "54a19ff7511e2d7c5dc951694e90fddf64b8d607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a19ff7511e2d7c5dc951694e90fddf64b8d607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b/comments", "author": null, "committer": null, "parents": [{"sha": "9a4a025a01f27acc76bb275cf5972c3f0ad493a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4a025a01f27acc76bb275cf5972c3f0ad493a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4a025a01f27acc76bb275cf5972c3f0ad493a6"}], "stats": {"total": 75, "additions": 43, "deletions": 32}, "files": [{"sha": "9e772d65055106363c42079cb04162ad40208168", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8d6f9e7e5f7cc755dbcaa74021002d8c593543b", "patch": "@@ -1,3 +1,9 @@\n+2007-10-28  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\t* config/mips/mips.md: Add combiner patterns for DImode extensions\n+\tof HImode and QImode truncations.  Reformat HImode <- QImode pattern\n+\tfor consistency.\n+\n 2007-10-28  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR target/33895"}, {"sha": "18879ec2e5564cdfb88bc002794d59dfaa675860", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d6f9e7e5f7cc755dbcaa74021002d8c593543b/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c8d6f9e7e5f7cc755dbcaa74021002d8c593543b", "patch": "@@ -2366,68 +2366,73 @@\n    (set_attr \"mode\" \"SI\")])\n \n \n-;; Combiner patterns for truncate/sign_extend combinations.  They use\n-;; the shift/truncate patterns above.\n+;; Combiner patterns for truncate/sign_extend combinations.  The SI versions\n+;; use the shift/truncate patterns above.\n \n-(define_insn_and_split \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(sign_extend:SI\n-\t    (truncate:HI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+(define_insn_and_split \"*extenddi_truncate<mode>\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(sign_extend:DI\n+\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(ashift:DI (match_dup 1)\n-\t\t   (const_int 48)))\n+\t\t   (match_dup 3)))\n    (set (match_dup 0)\n-\t(truncate:SI (ashiftrt:DI (match_dup 2)\n-\t\t\t\t  (const_int 48))))]\n-  { operands[2] = gen_lowpart (DImode, operands[0]); })\n+\t(ashiftrt:DI (match_dup 2)\n+\t\t     (match_dup 3)))]\n+{\n+  operands[2] = gen_lowpart (DImode, operands[0]);\n+  operands[3] = GEN_INT (BITS_PER_WORD - GET_MODE_BITSIZE (<MODE>mode));\n+})\n \n-(define_insn_and_split \"\"\n+(define_insn_and_split \"*extendsi_truncate<mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(sign_extend:SI\n-\t    (truncate:QI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+\t    (truncate:SHORT (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n \t(ashift:DI (match_dup 1)\n-\t\t   (const_int 56)))\n+\t\t   (match_dup 3)))\n    (set (match_dup 0)\n \t(truncate:SI (ashiftrt:DI (match_dup 2)\n-\t\t\t\t  (const_int 56))))]\n-  { operands[2] = gen_lowpart (DImode, operands[0]); })\n-\n+\t\t\t\t  (match_dup 3))))]\n+{\n+  operands[2] = gen_lowpart (DImode, operands[0]);\n+  operands[3] = GEN_INT (BITS_PER_WORD - GET_MODE_BITSIZE (<MODE>mode));\n+})\n \n ;; Combiner patterns to optimize truncate/zero_extend combinations.\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (zero_extend:SI (truncate:HI\n-                         (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+(define_insn \"*zero_extend<mode>_trunchi\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (zero_extend:GPR\n+\t    (truncate:HI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"andi\\t%0,%1,0xffff\"\n-  [(set_attr \"type\"     \"logical\")\n-   (set_attr \"mode\"     \"SI\")])\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (zero_extend:SI (truncate:QI\n-                         (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+(define_insn \"*zero_extend<mode>_truncqi\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (zero_extend:GPR\n+\t    (truncate:QI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"andi\\t%0,%1,0xff\"\n-  [(set_attr \"type\"     \"logical\")\n-   (set_attr \"mode\"     \"SI\")])\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-        (zero_extend:HI (truncate:QI\n-                         (match_operand:DI 1 \"register_operand\" \"d\"))))]\n+        (zero_extend:HI\n+\t    (truncate:QI (match_operand:DI 1 \"register_operand\" \"d\"))))]\n   \"TARGET_64BIT && !TARGET_MIPS16\"\n   \"andi\\t%0,%1,0xff\"\n-  [(set_attr \"type\"     \"logical\")\n-   (set_attr \"mode\"     \"HI\")])\n+  [(set_attr \"type\" \"logical\")\n+   (set_attr \"mode\" \"HI\")])\n \f\n ;;\n ;;  ...................."}]}