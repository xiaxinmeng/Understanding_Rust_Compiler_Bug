{"sha": "847e8c74ac442743a3066f23c93e529b2b92043c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3ZThjNzRhYzQ0Mjc0M2EzMDY2ZjIzYzkzZTUyOWIyYjkyMDQzYw==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2003-02-03T10:38:36Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2003-02-03T10:38:36Z"}, "message": "re PR libstdc++/9234 (unary minus for valarrays broken)\n\n\tPR libstdc++/9234\n\t* include/bits/valarray_before.h (_UnBase::operator[]): Apply unary\n\toperator.\n\n\t* include/bits/valarray_before.h (__not_equal_to): Use != instead of ==.\n\n\t* testsuite/26_numerics/valarray_operators.cc: New test.\n\nFrom-SVN: r62309", "tree": {"sha": "5424f53e82014b703997cda77e502af22bc53d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5424f53e82014b703997cda77e502af22bc53d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/847e8c74ac442743a3066f23c93e529b2b92043c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847e8c74ac442743a3066f23c93e529b2b92043c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847e8c74ac442743a3066f23c93e529b2b92043c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847e8c74ac442743a3066f23c93e529b2b92043c/comments", "author": null, "committer": null, "parents": [{"sha": "ca777b88c821f9fa149bca17ff09fa9b1668d024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca777b88c821f9fa149bca17ff09fa9b1668d024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca777b88c821f9fa149bca17ff09fa9b1668d024"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "386b44e9b530c0203089b10ac60e3d834c8bf44c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e8c74ac442743a3066f23c93e529b2b92043c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e8c74ac442743a3066f23c93e529b2b92043c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=847e8c74ac442743a3066f23c93e529b2b92043c", "patch": "@@ -1,3 +1,13 @@\n+2003-02-03  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR libstdc++/9234\n+\t* include/bits/valarray_before.h (_UnBase::operator[]): Apply unary\n+\toperator.\n+\n+\t* include/bits/valarray_before.h (__not_equal_to): Use != instead of ==.\n+\n+\t* testsuite/26_numerics/valarray_operators.cc: New test.\n+\n 2003-02-01  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/html/faq/index.html:  Correct link to libg++ information."}, {"sha": "7a0b677d0230ac7a913e20e0c3c5c3c6d23e0000", "filename": "libstdc++-v3/include/bits/valarray_before.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e8c74ac442743a3066f23c93e529b2b92043c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e8c74ac442743a3066f23c93e529b2b92043c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h?ref=847e8c74ac442743a3066f23c93e529b2b92043c", "patch": "@@ -270,7 +270,7 @@ namespace std\n   {\n     template<typename _Tp>\n       bool operator()(const _Tp& __x, const _Tp& __y) const\n-      { return __x == __y; }\n+      { return __x != __y; }\n   };\n \n   struct __less\n@@ -459,7 +459,7 @@ namespace std\n       _UnBase(const _Arg& __e) : _M_expr(__e) {}\n \n       value_type operator[](size_t __i) const\n-      { return _M_expr[__i]; }\n+      { return _Oper()(_M_expr[__i]); }\n \n       size_t size() const { return _M_expr.size(); }\n "}, {"sha": "5753e47167233fb5451a0672470571ad1935bcee", "filename": "libstdc++-v3/testsuite/26_numerics/valarray_operators.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847e8c74ac442743a3066f23c93e529b2b92043c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847e8c74ac442743a3066f23c93e529b2b92043c/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_operators.cc?ref=847e8c74ac442743a3066f23c93e529b2b92043c", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run }\n+// 2003-02-03  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+void test01() // check unary operators\n+{\n+  std::valarray<int> u(1);\n+  u[0]=1;\n+\n+  VERIFY( (+u)[0] == +1 );\n+  VERIFY( (-u)[0] == -1 );\n+  VERIFY( (!u)[0] == !1 );\n+  VERIFY( (~u)[0] == ~1 );\n+}\n+\n+void test02() // check binary operators\n+{\n+  std::valarray<int> u(1), v(1);\n+  u[0]=1;\n+  v[0]=3;\n+\n+  VERIFY( (u+ v)[0] == (1+ 3) );\n+  VERIFY( (u- v)[0] == (1- 3) );\n+  VERIFY( (u* v)[0] == (1* 3) );\n+  VERIFY( (u/ v)[0] == (1/ 3) );\n+  VERIFY( (u% v)[0] == (1% 3) );\n+  VERIFY( (u^ v)[0] == (1^ 3) );\n+  VERIFY( (u& v)[0] == (1& 3) );\n+  VERIFY( (u| v)[0] == (1| 3) );\n+  VERIFY( (u<<v)[0] == (1<<3) );\n+  VERIFY( (u>>v)[0] == (1>>3) );\n+  VERIFY( (u&&v)[0] == (1&&3) );\n+  VERIFY( (u||v)[0] == (1||3) );\n+  VERIFY( (u==v)[0] == (1==3) );\n+  VERIFY( (u!=v)[0] == (1!=3) );\n+  VERIFY( (u< v)[0] == (1< 3) );\n+  VERIFY( (u> v)[0] == (1> 3) );\n+  VERIFY( (u<=v)[0] == (1<=3) );\n+  VERIFY( (u>=v)[0] == (1>=3) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}