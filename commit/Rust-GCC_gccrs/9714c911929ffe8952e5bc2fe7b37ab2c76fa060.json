{"sha": "9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxNGM5MTE5MjlmZmU4OTUyZTViYzJmZTdiMzdhYjJjNzZmYTA2MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-05-22T13:18:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-05-22T13:18:15Z"}, "message": "revert: invoke.texi (-msselibm): Document.\n\n2006-05-22  Richard Guenther  <rguenther@suse.de>\n \n \tRevert\n \t2006-01-31  Richard Guenther  <rguenther@suse.de>\n \n \t* doc/invoke.texi (-msselibm): Document.\n \t* target.h (expand_library_builtin): New target hook.\n \t* builtins.c (expand_builtin): Use expand_library_builtin.\n \t(default_expand_library_builtin): New function.\n \t* gcc.c (LINK_GCC_MATH_SPEC): Define.\n \t(LINK_COMMAND_SPEC): Handle %(link_gcc_math).\n \t(link_gcc_math_spec): Declare.\n \t(static_specs): Add link_gcc_math_spec.\n \t* expr.h (default_expand_library_builtin): Declare.\n \t* target-def.h (TARGET_EXPAND_LIBRARY_BUILTIN): Define.\n \t(TARGET_INITIALIZER): Add TARGET_EXPAND_LIBRARY_BUILTIN.\n \t* config/i386/i386.h: Provide LINK_GCC_MATH_SPEC.\n \t* config/i386/i386.opt (msselibm): New target option.\n \t* config/i386/i386.c (ix86_builtin_function_variants): New array.\n \t(ix86_init_sse_abi_builtins): New function.\n \t(ix86_expand_library_builtin): Likewise.\n \t(TARGET_EXPAND_LIBRARY_BUILTIN): Define.\n \t(override_options): Handle error conditions wrt -msselibm.\n \t(ix86_builtins): Add function codes for SSE2 ABI builtins.\n \t(ix86_init_builtins): Call ix86_init_sse_abi_builtins.\n \t* doc/extend.texi (__builtin_sse2_*): Document new target specific\n \tbuiltins.\n \n \t* gcc.target/i386/sselibm-1.c: New testcase.\n \t* gcc.target/i386/sselibm-2.c: Likewise.\n \t* gcc.target/i386/sselibm-3.c: Likewise.\n \t* gcc.target/i386/sselibm-4.c: Likewise.\n \t* gcc.target/i386/sselibm-5.c: Likewise.\n\nFrom-SVN: r113977", "tree": {"sha": "e249aa3414e8468db763c6c821475a39e5297ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e249aa3414e8468db763c6c821475a39e5297ee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "694fea202c39e93f438c9f700e1dae4aa99028de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694fea202c39e93f438c9f700e1dae4aa99028de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694fea202c39e93f438c9f700e1dae4aa99028de"}], "stats": {"total": 332, "additions": 41, "deletions": 291}, "files": [{"sha": "f2595b06524f018cee43a22392f327b78f600e84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -1,3 +1,31 @@\n+2006-05-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tRevert\n+\t2006-01-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (-msselibm): Document.\n+\t* target.h (expand_library_builtin): New target hook.\n+\t* builtins.c (expand_builtin): Use expand_library_builtin.\n+\t(default_expand_library_builtin): New function.\n+\t* gcc.c (LINK_GCC_MATH_SPEC): Define.\n+\t(LINK_COMMAND_SPEC): Handle %(link_gcc_math).\n+\t(link_gcc_math_spec): Declare.\n+\t(static_specs): Add link_gcc_math_spec.\n+\t* expr.h (default_expand_library_builtin): Declare.\n+\t* target-def.h (TARGET_EXPAND_LIBRARY_BUILTIN): Define.\n+\t(TARGET_INITIALIZER): Add TARGET_EXPAND_LIBRARY_BUILTIN.\n+\t* config/i386/i386.h: Provide LINK_GCC_MATH_SPEC.\n+\t* config/i386/i386.opt (msselibm): New target option.\n+\t* config/i386/i386.c (ix86_builtin_function_variants): New array.\n+\t(ix86_init_sse_abi_builtins): New function.\n+\t(ix86_expand_library_builtin): Likewise.\n+\t(TARGET_EXPAND_LIBRARY_BUILTIN): Define.\n+\t(override_options): Handle error conditions wrt -msselibm.\n+\t(ix86_builtins): Add function codes for SSE2 ABI builtins.\n+\t(ix86_init_builtins): Call ix86_init_sse_abi_builtins.\n+\t* doc/extend.texi (__builtin_sse2_*): Document new target specific\n+\tbuiltins.\n+\n 2006-05-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c/27420"}, {"sha": "b9d94ebcda97390068c80e32167ad95b64d21ac4", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -5598,14 +5598,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     return targetm.expand_builtin (exp, target, subtarget, mode, ignore);\n-  else\n-    {\n-      /* Try expanding the builtin via the generic target hook.  */\n-      rtx tmp = targetm.expand_library_builtin (exp, target, subtarget,\n-\t\t\t\t\t\tmode, ignore);\n-      if (tmp != NULL_RTX)\n-\treturn tmp;\n-    }\n \n   /* When not optimizing, generate calls to library functions for a certain\n      set of builtins.  */\n@@ -8959,18 +8951,6 @@ default_expand_builtin (tree exp ATTRIBUTE_UNUSED,\n   return NULL_RTX;\n }\n \n-/* Default target-specific library builtin expander that does nothing.  */\n-\n-rtx\n-default_expand_library_builtin (tree exp ATTRIBUTE_UNUSED,\n-\t\t\trtx target ATTRIBUTE_UNUSED,\n-\t\t\trtx subtarget ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\tint ignore ATTRIBUTE_UNUSED)\n-{\n-  return NULL_RTX;\n-}\n-\n /* Returns true is EXP represents data that would potentially reside\n    in a readonly section.  */\n "}, {"sha": "d1f087c9d153a95811539985be0ca4e2ce45e0c8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -1067,9 +1067,6 @@ int ix86_section_threshold = 65536;\n /* Prefix built by ASM_GENERATE_INTERNAL_LABEL.  */\n char internal_label_prefix[16];\n int internal_label_prefix_len;\n-\n-/* Table for BUILT_IN_NORMAL to BUILT_IN_MD mapping.  */\n-static GTY(()) tree ix86_builtin_function_variants[(int) END_BUILTINS];\n \f\n static bool ix86_handle_option (size_t, const char *, int);\n static void output_pic_addr_const (FILE *, rtx, int);\n@@ -1104,7 +1101,6 @@ static int ix86_issue_rate (void);\n static int ix86_adjust_cost (rtx, rtx, rtx, int);\n static int ia32_multipass_dfa_lookahead (void);\n static void ix86_init_mmx_sse_builtins (void);\n-static void ix86_init_sse_abi_builtins (void);\n static rtx x86_this_parameter (tree);\n static void x86_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t HOST_WIDE_INT, tree);\n@@ -1162,7 +1158,6 @@ static bool ix86_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    tree, bool);\n static void ix86_init_builtins (void);\n static rtx ix86_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n-static rtx ix86_expand_library_builtin (tree, rtx, rtx, enum machine_mode, int);\n static const char *ix86_mangle_fundamental_type (tree);\n static tree ix86_stack_protect_fail (void);\n static rtx ix86_internal_arg_pointer (void);\n@@ -1227,8 +1222,6 @@ static section *x86_64_elf_select_section (tree decl, int reloc,\n #define TARGET_INIT_BUILTINS ix86_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN ix86_expand_builtin\n-#undef TARGET_EXPAND_LIBRARY_BUILTIN\n-#define TARGET_EXPAND_LIBRARY_BUILTIN ix86_expand_library_builtin\n \n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ix86_output_function_epilogue\n@@ -1920,16 +1913,6 @@ override_options (void)\n       && ! TARGET_SSE)\n     error (\"-msseregparm used without SSE enabled\");\n \n-  /* Accept -msselibm only if at least SSE support is enabled.  */\n-  if (TARGET_SSELIBM\n-      && ! TARGET_SSE2)\n-    error (\"-msselibm used without SSE2 enabled\");\n-\n-  /* Ignore -msselibm on 64bit targets.  */\n-  if (TARGET_SSELIBM\n-      && TARGET_64BIT)\n-    error (\"-msselibm used on a 64bit target\");\n-\n   ix86_fpmath = TARGET_FPMATH_DEFAULT;\n \n   if (ix86_fpmath_string != 0)\n@@ -14378,28 +14361,6 @@ enum ix86_builtins\n   IX86_BUILTIN_VEC_SET_V8HI,\n   IX86_BUILTIN_VEC_SET_V4HI,\n \n-  /* SSE2 ABI functions.  */\n-  IX86_BUILTIN_SSE2_ACOS,\n-  IX86_BUILTIN_SSE2_ACOSF,\n-  IX86_BUILTIN_SSE2_ASIN,\n-  IX86_BUILTIN_SSE2_ASINF,\n-  IX86_BUILTIN_SSE2_ATAN,\n-  IX86_BUILTIN_SSE2_ATANF,\n-  IX86_BUILTIN_SSE2_ATAN2,\n-  IX86_BUILTIN_SSE2_ATAN2F,\n-  IX86_BUILTIN_SSE2_COS,\n-  IX86_BUILTIN_SSE2_COSF,\n-  IX86_BUILTIN_SSE2_EXP,\n-  IX86_BUILTIN_SSE2_EXPF,\n-  IX86_BUILTIN_SSE2_LOG10,\n-  IX86_BUILTIN_SSE2_LOG10F,\n-  IX86_BUILTIN_SSE2_LOG,\n-  IX86_BUILTIN_SSE2_LOGF,\n-  IX86_BUILTIN_SSE2_SIN,\n-  IX86_BUILTIN_SSE2_SINF,\n-  IX86_BUILTIN_SSE2_TAN,\n-  IX86_BUILTIN_SSE2_TANF,\n-\n   IX86_BUILTIN_MAX\n };\n \n@@ -14781,8 +14742,6 @@ ix86_init_builtins (void)\n {\n   if (TARGET_MMX)\n     ix86_init_mmx_sse_builtins ();\n-  if (TARGET_SSE2)\n-    ix86_init_sse_abi_builtins ();\n }\n \n /* Set up all the MMX/SSE builtins.  This is not called if TARGET_MMX\n@@ -15422,52 +15381,6 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_vec_set_v4hi\",\n \t       ftype, IX86_BUILTIN_VEC_SET_V4HI);\n }\n-#undef def_builtin\n-\n-/* Set up all the SSE ABI builtins that we may use to override\n-   the normal builtins.  */\n-static void\n-ix86_init_sse_abi_builtins (void)\n-{\n-  tree flt, flt2;\n-\n-  /* Bail out in case the template definitions are not available.  */\n-  if (! built_in_decls [BUILT_IN_SIN]\n-      || ! built_in_decls [BUILT_IN_SINF]\n-      || ! built_in_decls [BUILT_IN_ATAN2]\n-      || ! built_in_decls [BUILT_IN_ATAN2F])\n-    return;\n-\n-  /* Build the function types as variants of the existing ones.  */\n-  flt = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_SINF]));\n-  TYPE_ATTRIBUTES (flt)\n-    = tree_cons (get_identifier (\"sseregparm\"),\n-                 NULL_TREE, TYPE_ATTRIBUTES (flt));\n-  flt2 = build_variant_type_copy (TREE_TYPE (built_in_decls [BUILT_IN_ATAN2F]));\n-  TYPE_ATTRIBUTES (flt2)\n-    = tree_cons (get_identifier (\"sseregparm\"),\n-                 NULL_TREE, TYPE_ATTRIBUTES (flt2));\n-\n-#define def_builtin(capname, name, type) \\\n-  ix86_builtin_function_variants [BUILT_IN_ ## capname]\t\t\t\\\n-    = lang_hooks.builtin_function (\"__builtin_sse2_\" # name, type,\t\\\n-\t\t\t\t   IX86_BUILTIN_SSE2_ ## capname,\t\\\n-\t\t\t\t   BUILT_IN_NORMAL,\t\t\t\\\n-\t\t\t\t   \"__libm_sse2_\" # name, NULL_TREE)\n- \n-  def_builtin (ACOSF, acosf, flt);\n-  def_builtin (ASINF, asinf, flt);\n-  def_builtin (ATANF, atanf, flt);\n-  def_builtin (ATAN2F, atan2f, flt2);\n-  def_builtin (COSF, cosf, flt);\n-  def_builtin (EXPF, expf, flt);\n-  def_builtin (LOG10F, log10f, flt);\n-  def_builtin (LOGF, logf, flt);\n-  def_builtin (SINF, sinf, flt);\n-  def_builtin (TANF, tanf, flt);\n-\n-#undef def_builtin\n-}\n \n /* Errors in the source file can cause expand_expr to return const0_rtx\n    where we expect a vector.  To avoid crashing, use one of the vector\n@@ -16302,39 +16215,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   gcc_unreachable ();\n }\n \n-/* Expand an expression EXP that calls a built-in library function,\n-   with result going to TARGET if that's convenient\n-   (and in mode MODE if that's convenient).\n-   SUBTARGET may be used as the target for computing one of EXP's operands.\n-   IGNORE is nonzero if the value is to be ignored.  */\n-\n-static rtx\n-ix86_expand_library_builtin (tree exp, rtx target,\n-\t\t\t     rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t     int ignore)\n-{\n-  enum built_in_function fncode;\n-  tree fndecl, newfn, call;\n-\n-  /* Try expanding builtin math functions to the SSE2 ABI variants.  */\n-  if (!TARGET_SSELIBM)\n-      return NULL_RTX;\n-\n-  fncode = builtin_mathfn_code (exp);\n-  if (!ix86_builtin_function_variants [(int)fncode])\n-    return NULL_RTX;\n-\n-  fndecl = get_callee_fndecl (exp);\n-  if (DECL_RTL_SET_P (fndecl))\n-    return NULL_RTX;\n-\n-  /* Build the redirected call and expand it.  */\n-  newfn = ix86_builtin_function_variants [(int)fncode];\n-  call = build_function_call_expr (newfn, TREE_OPERAND (exp, 1));\n-  return expand_call (call, target, ignore);\n-}\n-\n /* Store OPERAND to the memory after reload is completed.  This means\n    that we can't easily use assign_stack_local.  */\n rtx"}, {"sha": "df1ba2472b676136cecbcec7e7e5e6ce6daffa71", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -513,8 +513,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define EXTRA_SPECS\t\t\t\t\t\t\t\\\n   { \"cc1_cpu\",  CC1_CPU_SPEC },\t\t\t\t\t\t\\\n   SUBTARGET_EXTRA_SPECS\n-\n-#define LINK_GCC_MATH_SPEC \"%{msselibm:-lgcc-math}\"\n \f\n /* target machine storage layout */\n "}, {"sha": "2922f5d2fe0aec5ca1b59f887fa6d4a35182903e", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -201,10 +201,6 @@ msseregparm\n Target RejectNegative Mask(SSEREGPARM)\n Use SSE register passing conventions for SF and DF mode\n \n-msselibm\n-Target Mask(SSELIBM)\n-Use SSE2 ABI libgcc-math routines if using SSE math\n-\n mstackrealign\n Target Report Var(ix86_force_align_arg_pointer)\n Realign stack in prologue"}, {"sha": "08e94434eded57ec5c5ada573884bbe9cb41a396", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -6856,35 +6856,6 @@ v2sf __builtin_ia32_pswapdsf (v2sf)\n v2si __builtin_ia32_pswapdsi (v2si)\n @end smallexample\n \n-The following built-in functions are available when @option{-msse2}\n-is used.  All of them generate calls to an SSE2 ABI IEEE754 math intrinsic\n-that is part of the name.  Rather than using these directly you may\n-want them automatically substituted for calls to the regular intrinsics\n-using the @option{-msselibm}.\n-\n-@smallexample\n-double __builtin_sse2_acos (double)\n-float __builtin_sse2_acosf (float)\n-double __builtin_sse2_asin (double)\n-float __builtin_sse2_asinf (float)\n-double __builtin_sse2_atan (double)\n-float __builtin_sse2_atanf (float)\n-double __builtin_sse2_atan2 (double, double)\n-float __builtin_sse2_atan2f (float, float)\n-double __builtin_sse2_cos (double)\n-float __builtin_sse2_cosf (float)\n-double __builtin_sse2_exp (double)\n-float __builtin_sse2_expf (float)\n-double __builtin_sse2_log10 (double)\n-float __builtin_sse2_log10f (float)\n-double __builtin_sse2_log (double)\n-float __builtin_sse2_logf (float)\n-double __builtin_sse2_sin (double)\n-float __builtin_sse2_sinf (float)\n-double __builtin_sse2_tan (double)\n-float __builtin_sse2_tanf (float)\n-@end smallexample\n-\n @node MIPS DSP Built-in Functions\n @subsection MIPS DSP Built-in Functions\n "}, {"sha": "c8f5b35743d8af5bc8d9377bd4b7c26d2463fa74", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -533,7 +533,7 @@ Objective-C and Objective-C++ Dialects}.\n -mno-fp-ret-in-387  -msoft-float  -msvr3-shlib @gol\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num} @gol\n--mmmx  -msse  -msse2 -msse3 -m3dnow -msselibm @gol\n+-mmmx  -msse  -msse2 -msse3 -m3dnow @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n@@ -9538,12 +9538,6 @@ supported architecture, using the appropriate flags.  In particular,\n the file containing the CPU detection code should be compiled without\n these options.\n \n-@item -msselibm\n-@opindex msselibm\n-Use special versions of certain libm routines that come with an SSE\n-ABI and an SSE implementation.  Useful together with @option{-mfpmath=sse}\n-to avoid moving values between SSE registers and the x87 FP stack.\n-\n @item -mpush-args\n @itemx -mno-push-args\n @opindex mpush-args"}, {"sha": "42b98937a824ee84edcc2e5673a943f9b7c929ff", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -338,7 +338,6 @@ extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern tree std_build_builtin_va_list (void);\n extern void std_expand_builtin_va_start (tree, rtx);\n extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n-extern rtx default_expand_library_builtin (tree, rtx, rtx, enum machine_mode, int);\n extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);\n extern rtx expand_builtin_saveregs (void);"}, {"sha": "380f16561bff737c2f01bfde071203edec481d33", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -682,10 +682,6 @@ proper position among the other output files.  */\n #endif\n #endif\n \n-#ifndef LINK_GCC_MATH_SPEC\n-#define LINK_GCC_MATH_SPEC \"\"\n-#endif\n-\n #ifndef LINK_PIE_SPEC\n #ifdef HAVE_LD_PIE\n #define LINK_PIE_SPEC \"%{pie:-pie} \"\n@@ -708,7 +704,7 @@ proper position among the other output files.  */\n     %{static:} %{L*} %(mfwrap) %(link_libgcc) %o\\\n     %{fopenmp:%:include(libgomp.spec)%(link_gomp)} %(mflib)\\\n     %{fprofile-arcs|fprofile-generate|coverage:-lgcov}\\\n-    %{!nostdlib:%{!nodefaultlibs:%(link_gcc_math) %(link_ssp) %(link_gcc_c_sequence)}}\\\n+    %{!nostdlib:%{!nodefaultlibs:%(link_ssp) %(link_gcc_c_sequence)}}\\\n     %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}\"\n #endif\n \n@@ -739,7 +735,6 @@ static const char *cc1_spec = CC1_SPEC;\n static const char *cc1plus_spec = CC1PLUS_SPEC;\n static const char *link_gcc_c_sequence_spec = LINK_GCC_C_SEQUENCE_SPEC;\n static const char *link_ssp_spec = LINK_SSP_SPEC;\n-static const char *link_gcc_math_spec = LINK_GCC_MATH_SPEC;\n static const char *asm_spec = ASM_SPEC;\n static const char *asm_final_spec = ASM_FINAL_SPEC;\n static const char *link_spec = LINK_SPEC;\n@@ -1547,7 +1542,6 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"cc1plus\",\t\t\t&cc1plus_spec),\n   INIT_STATIC_SPEC (\"link_gcc_c_sequence\",\t&link_gcc_c_sequence_spec),\n   INIT_STATIC_SPEC (\"link_ssp\",\t\t\t&link_ssp_spec),\n-  INIT_STATIC_SPEC (\"link_gcc_math\",\t\t&link_gcc_math_spec),\n   INIT_STATIC_SPEC (\"endfile\",\t\t\t&endfile_spec),\n   INIT_STATIC_SPEC (\"link\",\t\t\t&link_spec),\n   INIT_STATIC_SPEC (\"lib\",\t\t\t&lib_spec),"}, {"sha": "ff2ce03969a2b4a013cbc46e7f7f96ce2fe34a2f", "filename": "gcc/target-def.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -348,7 +348,6 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n /* In builtins.c.  */\n #define TARGET_INIT_BUILTINS hook_void_void\n #define TARGET_EXPAND_BUILTIN default_expand_builtin\n-#define TARGET_EXPAND_LIBRARY_BUILTIN default_expand_library_builtin\n #define TARGET_RESOLVE_OVERLOADED_BUILTIN NULL\n #define TARGET_FOLD_BUILTIN hook_tree_tree_tree_bool_null\n \n@@ -619,7 +618,6 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_NARROW_VOLATILE_BITFIELD,\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n-  TARGET_EXPAND_LIBRARY_BUILTIN,\t\t\\\n   TARGET_RESOLVE_OVERLOADED_BUILTIN,\t\t\\\n   TARGET_FOLD_BUILTIN,\t\t\t\t\\\n   TARGET_MANGLE_FUNDAMENTAL_TYPE,\t\t\\"}, {"sha": "c18fd62b0e64d6abf5e2fdcf31b9d89a48f3dcd6", "filename": "gcc/target.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -430,10 +430,6 @@ struct gcc_target\n   rtx (* expand_builtin) (tree exp, rtx target, rtx subtarget,\n \t\t\t  enum machine_mode mode, int ignore);\n \n-  /* Expand a target-specific library builtin.  */\n-  rtx (* expand_library_builtin) (tree exp, rtx target, rtx subtarget,\n-\t\t\t  enum machine_mode mode, int ignore);\n-\n   /* Select a replacement for a target-specific builtin.  This is done\n      *before* regular type checking, and so allows the target to implement\n      a crude form of function overloading.  The result is a complete"}, {"sha": "a341aadbb951b83c84ecd4eeb2dabb7867dee330", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9714c911929ffe8952e5bc2fe7b37ab2c76fa060/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9714c911929ffe8952e5bc2fe7b37ab2c76fa060", "patch": "@@ -1,3 +1,14 @@\n+2006-05-22  Richard Guenther  <rguenther@suse.de>\n+\n+\tRevert\n+\t2006-01-31  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/sselibm-1.c: New testcase.\n+\t* gcc.target/i386/sselibm-2.c: Likewise.\n+\t* gcc.target/i386/sselibm-3.c: Likewise.\n+\t* gcc.target/i386/sselibm-4.c: Likewise.\n+\t* gcc.target/i386/sselibm-5.c: Likewise.\n+\n 2006-05-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c/27420"}, {"sha": "82f553ba9468e744fd754d561e0e51ab6fdaab28", "filename": "gcc/testsuite/gcc.target/i386/sselibm-1.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-1.c?ref=694fea202c39e93f438c9f700e1dae4aa99028de", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-msse2 -mfpmath=sse\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-float sinf(float);\n-\n-float foo(float x)\n-{\n-  return sinf(x);\n-}\n-\n-/* { dg-final { scan-assembler-not \"__libm_sse2_sinf\" } } */"}, {"sha": "9c479b65c7ffa3bd3f196d1e4ad2dcff503cb6d6", "filename": "gcc/testsuite/gcc.target/i386/sselibm-2.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-2.c?ref=694fea202c39e93f438c9f700e1dae4aa99028de", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-msse2 -mfpmath=sse -msselibm\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-float sinf(float);\n-\n-float foo(float x)\n-{\n-  return sinf(x);\n-}\n-\n-/* { dg-final { scan-assembler \"__libm_sse2_sinf\" } } */"}, {"sha": "eaa8d8fcf4528400deda6b173b083ab36e63ae4e", "filename": "gcc/testsuite/gcc.target/i386/sselibm-3.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-3.c?ref=694fea202c39e93f438c9f700e1dae4aa99028de", "patch": "@@ -1,19 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-float sinf(float);\n-float (*mysin)(float) = sinf;\n-\n-float f1(float x)\n-{\n-  return sinf(x);\n-}\n-\n-float f2(float x)\n-{\n-  /* Verify we do not expand the following call to __libm_sse2_sinf.  */\n-  return (*mysin)(x);\n-}\n-\n-/* { dg-final { scan-assembler-times \"__libm_sse2_sinf\" 1 } } */"}, {"sha": "152672a6103205d95daafbfb10d871b226628c6c", "filename": "gcc/testsuite/gcc.target/i386/sselibm-4.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-4.c?ref=694fea202c39e93f438c9f700e1dae4aa99028de", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-extern float acosf(float);\n-extern float asinf(float);\n-extern float atanf(float);\n-extern float atan2f(float, float);\n-extern float cosf(float);\n-extern float expf(float);\n-extern float log10f(float);\n-extern float logf(float);\n-extern float sinf(float);\n-extern float tanf(float);\n-\n-float foof(float x)\n-{\n-  return acosf(x) + asinf(x) + atanf(x) + atan2f(x, x) + cosf(x) + expf(x)\n-\t+ log10f(x) + logf(x) + sinf(x) + tanf(x);\n-}\n-\n-/* { dg-final { scan-assembler-times \"__libm_sse2\" 10 } } */"}, {"sha": "b7e4690f774255700159489d538e8b0a6112cc79", "filename": "gcc/testsuite/gcc.target/i386/sselibm-5.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694fea202c39e93f438c9f700e1dae4aa99028de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsselibm-5.c?ref=694fea202c39e93f438c9f700e1dae4aa99028de", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O1 -msse2 -mfpmath=sse -msselibm\" } */\n-/* { dg-require-effective-target ilp32 } */\n-\n-extern float acosf(float);\n-extern float asinf(float);\n-extern float atanf(float);\n-extern float atan2f(float, float);\n-extern float cosf(float);\n-extern float expf(float);\n-extern float log10f(float);\n-extern float logf(float);\n-extern float sinf(float);\n-extern float tanf(float);\n-\n-float foof(float x)\n-{\n-  return __builtin_sse2_acosf(x)\n-\t+ __builtin_sse2_asinf(x)\n-\t+ __builtin_sse2_atanf(x)\n-\t+ __builtin_sse2_atan2f(x, x)\n-\t+ __builtin_sse2_cosf(x)\n-\t+ __builtin_sse2_expf(x)\n-\t+ __builtin_sse2_log10f(x)\n-\t+ __builtin_sse2_logf(x)\n-\t+ __builtin_sse2_sinf(x)\n-\t+ __builtin_sse2_tanf(x);\n-}\n-\n-/* { dg-final { scan-assembler-times \"__libm_sse2\" 10 } } */"}]}