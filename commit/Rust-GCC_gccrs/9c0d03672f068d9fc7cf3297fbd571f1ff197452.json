{"sha": "9c0d03672f068d9fc7cf3297fbd571f1ff197452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwZDAzNjcyZjA2OGQ5ZmM3Y2YzMjk3ZmJkNTcxZjFmZjE5NzQ1Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-02-03T23:55:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-02-03T23:55:27Z"}, "message": "cvt.c (ocp_convert): Obtain the constant values from constant decls even if...\n\n\t* cvt.c (ocp_convert): Obtain the constant values from constant\n\tdecls even if the destination type is the same as the type of the\n\tdecl.\n\t* decl2.c (finish_file): Make sure that static inlines with\n\tdefinitions are not marked DECL_EXTERNAL before returning.\n\nFrom-SVN: r17653", "tree": {"sha": "0c9d2a5e3fd8e4ba0ab743c17c155a9eda0f0241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c9d2a5e3fd8e4ba0ab743c17c155a9eda0f0241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0d03672f068d9fc7cf3297fbd571f1ff197452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0d03672f068d9fc7cf3297fbd571f1ff197452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0d03672f068d9fc7cf3297fbd571f1ff197452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0d03672f068d9fc7cf3297fbd571f1ff197452/comments", "author": null, "committer": null, "parents": [{"sha": "cf7761053226ab90efadc907da7a1ce3664b33a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf7761053226ab90efadc907da7a1ce3664b33a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf7761053226ab90efadc907da7a1ce3664b33a0"}], "stats": {"total": 36, "additions": 32, "deletions": 4}, "files": [{"sha": "d7086dcb1660dc60f2ea8c76df8dd92a24d6e504", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0d03672f068d9fc7cf3297fbd571f1ff197452/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0d03672f068d9fc7cf3297fbd571f1ff197452/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c0d03672f068d9fc7cf3297fbd571f1ff197452", "patch": "@@ -1,3 +1,12 @@\n+Tue Feb  3 23:50:52 1998  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* cvt.c (ocp_convert): Obtain the constant values from constant\n+\tdecls even if the destination type is the same as the type of the\n+\tdecl. \n+\n+\t* decl2.c (finish_file): Make sure that static inlines with\n+\tdefinitions are not marked DECL_EXTERNAL before returning.\n+\n Tue Feb  3 22:43:42 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c: Lose arg_looking_for_template."}, {"sha": "0fdce85726dd29411f93eeaa558824da16192b2d", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0d03672f068d9fc7cf3297fbd571f1ff197452/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0d03672f068d9fc7cf3297fbd571f1ff197452/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=9c0d03672f068d9fc7cf3297fbd571f1ff197452", "patch": "@@ -982,6 +982,9 @@ ocp_convert (type, expr, convtype, flags)\n       || TREE_TYPE (e) == error_mark_node)\n     return error_mark_node;\n \n+  if (TREE_READONLY_DECL_P (e))\n+    e = decl_constant_value (e);\n+\n   if (IS_AGGR_TYPE (type) && (convtype & CONV_FORCE_TEMP))\n     /* We need a new temporary; don't take this shortcut.  */;\n   else if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (TREE_TYPE (e)))\n@@ -1015,9 +1018,6 @@ ocp_convert (type, expr, convtype, flags)\n   if (TREE_CODE (e) == OFFSET_REF)\n     e = resolve_offset_ref (e);\n \n-  if (TREE_READONLY_DECL_P (e))\n-    e = decl_constant_value (e);\n-\n   if (INTEGRAL_CODE_P (code))\n     {\n       tree intype = TREE_TYPE (e);\n@@ -1186,7 +1186,7 @@ ocp_convert (type, expr, convtype, flags)\n     }\n \n   /* If TYPE or TREE_TYPE (E) is not on the permanent_obstack,\n-     then the it won't be hashed and hence compare as not equal,\n+     then it won't be hashed and hence compare as not equal,\n      even when it is.  */\n   if (code == ARRAY_TYPE\n       && TREE_TYPE (TREE_TYPE (e)) == TREE_TYPE (type)"}, {"sha": "c9e11f49e61906c58fe3f5fd7bd35b068bba23e9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0d03672f068d9fc7cf3297fbd571f1ff197452/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0d03672f068d9fc7cf3297fbd571f1ff197452/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9c0d03672f068d9fc7cf3297fbd571f1ff197452", "patch": "@@ -3286,6 +3286,25 @@ finish_file ()\n \t      p = &TREE_CHAIN (*p);\n \t  }\n       }\n+\n+    /* It's possible that some of the remaining inlines will still be\n+       needed.  For example, a static inline whose address is used in\n+       the initializer for a file-scope static variable will be\n+       needed.  Code in compile_file will handle this, but we mustn't\n+       pretend that there are no definitions for the inlines, or it\n+       won't be able to.\n+\n+       FIXME: This won't catch member functions.  We should really\n+       unify this stuff with the compile_file stuff.  */\n+    for (vars = saved_inlines; vars != NULL_TREE; vars = TREE_CHAIN (vars))\n+      {\n+\ttree decl = TREE_VALUE (vars);\n+\n+\tif (DECL_NOT_REALLY_EXTERN (decl)\n+\t    && !DECL_COMDAT (decl)\n+\t    && DECL_INITIAL (decl) != NULL_TREE)\n+\t  DECL_EXTERNAL (decl) = 0;\n+      }\n   }\n \n   /* Now delete from the chain of variables all virtual function tables."}]}