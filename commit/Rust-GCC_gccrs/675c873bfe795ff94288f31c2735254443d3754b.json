{"sha": "675c873bfe795ff94288f31c2735254443d3754b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc1Yzg3M2JmZTc5NWZmOTQyODhmMzFjMjczNTI1NDQ0M2QzNzU0Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-12T10:00:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-12T10:00:13Z"}, "message": "expr.c (categorize_ctor_elements_1): Properly count sub-elements of non-constant aggregate elements.\n\n\t* expr.c (categorize_ctor_elements_1): Properly count sub-elements of\n\tnon-constant aggregate elements.\n\n\t* gimplify.c (gimplify_init_constructor): Do not pre-evaluate if this\n\tis a real initialization.\n\nFrom-SVN: r158219", "tree": {"sha": "47f2f8e659d1353465936d33a9982cdbaddb3f3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47f2f8e659d1353465936d33a9982cdbaddb3f3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/675c873bfe795ff94288f31c2735254443d3754b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675c873bfe795ff94288f31c2735254443d3754b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/675c873bfe795ff94288f31c2735254443d3754b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675c873bfe795ff94288f31c2735254443d3754b/comments", "author": null, "committer": null, "parents": [{"sha": "3fc20697523443ed885f701923160ea22a19be62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc20697523443ed885f701923160ea22a19be62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc20697523443ed885f701923160ea22a19be62"}], "stats": {"total": 96, "additions": 85, "deletions": 11}, "files": [{"sha": "0d4284cca788445ab4187fd32fdcd3c5335cb5d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675c873bfe795ff94288f31c2735254443d3754b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675c873bfe795ff94288f31c2735254443d3754b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=675c873bfe795ff94288f31c2735254443d3754b", "patch": "@@ -1,3 +1,11 @@\n+2010-04-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (categorize_ctor_elements_1): Properly count sub-elements of\n+\tnon-constant aggregate elements.\n+\n+\t* gimplify.c (gimplify_init_constructor): Do not pre-evaluate if this\n+\tis a real initialization.\n+\n 2010-04-12  Shujing Zhao  <pearly.zhao@oracle.com>\n \n \tPR c/36774"}, {"sha": "930ee98a438a04a0d62dae8ea8239fb894e8847b", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=675c873bfe795ff94288f31c2735254443d3754b", "patch": "@@ -4861,9 +4861,8 @@ categorize_ctor_elements_1 (const_tree ctor, HOST_WIDE_INT *p_nz_elts,\n \n   FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (ctor), idx, purpose, value)\n     {\n-      HOST_WIDE_INT mult;\n+      HOST_WIDE_INT mult = 1;\n \n-      mult = 1;\n       if (TREE_CODE (purpose) == RANGE_EXPR)\n \t{\n \t  tree lo_index = TREE_OPERAND (purpose, 0);\n@@ -4925,12 +4924,17 @@ categorize_ctor_elements_1 (const_tree ctor, HOST_WIDE_INT *p_nz_elts,\n \t  break;\n \n \tdefault:\n-\t  nz_elts += mult;\n-\t  elt_count += mult;\n+\t  {\n+\t    HOST_WIDE_INT tc = count_type_elements (TREE_TYPE (value), true);\n+\t    if (tc < 1)\n+\t      tc = 1;\n+\t    nz_elts += mult * tc;\n+\t    elt_count += mult * tc;\n \n-\t  if (const_from_elts_p && const_p)\n-\t    const_p = initializer_constant_valid_p (value, TREE_TYPE (value))\n-\t\t      != NULL_TREE;\n+\t    if (const_from_elts_p && const_p)\n+\t      const_p = initializer_constant_valid_p (value, TREE_TYPE (value))\n+\t\t\t!= NULL_TREE;\n+\t  }\n \t  break;\n \t}\n     }"}, {"sha": "a9eed84669fb1674fff162992ec3f75af13b5606", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=675c873bfe795ff94288f31c2735254443d3754b", "patch": "@@ -3793,10 +3793,10 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tif (notify_temp_creation)\n \t  return GS_OK;\n \n-\t/* If there are nonzero elements, pre-evaluate to capture elements\n-\t   overlapping with the lhs into temporaries.  We must do this before\n-\t   clearing to fetch the values before they are zeroed-out.  */\n-\tif (num_nonzero_elements > 0)\n+\t/* If there are nonzero elements and if needed, pre-evaluate to capture\n+\t   elements overlapping with the lhs into temporaries.  We must do this\n+\t   before clearing to fetch the values before they are zeroed-out.  */\n+\tif (num_nonzero_elements > 0 && TREE_CODE (*expr_p) != INIT_EXPR)\n \t  {\n \t    preeval_data.lhs_base_decl = get_base_address (object);\n \t    if (!DECL_P (preeval_data.lhs_base_decl))"}, {"sha": "1af06733c4774b6b76b4d4718af12958f1f85dff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=675c873bfe795ff94288f31c2735254443d3754b", "patch": "@@ -1,3 +1,9 @@\n+2010-04-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/aggr13.adb: New test.\n+\t* gnat.dg/aggr14.adb: Likewise.\n+\t* gnat.dg/aggr14_pkg.ad[sb]: New helper.\n+\n 2010-04-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/43611"}, {"sha": "add223c0bf149f1fcfc34c9037129d52c8350a9f", "filename": "gcc/testsuite/gnat.dg/aggr13.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2Fgnat.dg%2Faggr13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2Fgnat.dg%2Faggr13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr13.adb?ref=675c873bfe795ff94288f31c2735254443d3754b", "patch": "@@ -0,0 +1,23 @@\n+-- { dg-do compile }\n+-- { dg-options \"-fdump-tree-gimple\" }\n+\n+procedure Aggr13 is\n+\n+   type A is array (Integer range 1 .. 3) of Short_Short_Integer;\n+\n+   X : A := (1, 2, 3);\n+\n+   function F return A is\n+   begin\n+      if X /= (1, 2, 3) then\n+        raise Program_Error;\n+      end if;\n+      return (1, 1, 1);\n+   end;\n+\n+begin\n+  X := F;\n+end;\n+\n+-- { dg-final { scan-tree-dump-not \"= {}\" \"gimple\" } }\n+-- { dg-final { cleanup-tree-dump \"gimple\" } }"}, {"sha": "46f5af42a0dd52cca849f1c27a75852e7f609fa5", "filename": "gcc/testsuite/gnat.dg/aggr14.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14.adb?ref=675c873bfe795ff94288f31c2735254443d3754b", "patch": "@@ -0,0 +1,8 @@\n+-- { dg-do run }\n+\n+with Aggr14_Pkg; use Aggr14_Pkg;\n+\n+procedure Aggr14 is\n+begin\n+  Proc;\n+end;"}, {"sha": "ce129601d85ec81fce05f8ef373a95476b50b98f", "filename": "gcc/testsuite/gnat.dg/aggr14_pkg.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14_pkg.adb?ref=675c873bfe795ff94288f31c2735254443d3754b", "patch": "@@ -0,0 +1,16 @@\n+package body Aggr14_Pkg  is\n+\n+   function F return A is\n+   begin\n+      if X /= (1, 2, 3) then\n+        raise Program_Error;\n+      end if;\n+      return (1, 1, 1);\n+   end;\n+\n+   procedure Proc is\n+   begin\n+    X := F;\n+  end;\n+\n+end Aggr14_Pkg;"}, {"sha": "874e309493a17dc4b2e47e751247e3769cd1da69", "filename": "gcc/testsuite/gnat.dg/aggr14_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675c873bfe795ff94288f31c2735254443d3754b/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr14_pkg.ads?ref=675c873bfe795ff94288f31c2735254443d3754b", "patch": "@@ -0,0 +1,9 @@\n+package Aggr14_Pkg is\n+\n+  type A is array (Integer range 1 .. 3) of Short_Short_Integer;\n+\n+   X : A := (1, 2, 3);\n+\n+  procedure Proc;\n+\n+end Aggr14_Pkg;"}]}