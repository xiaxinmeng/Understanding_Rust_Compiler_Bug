{"sha": "9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE4NjM1MjNiNDNlZTBkZGJmYmJiNGNlODJlZGM1NzdiNmYzNzJkZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-03T13:59:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-03T13:59:20Z"}, "message": "nvptx-protos.h (npvptx_section_from_addr_space): Delete.\n\n\tgcc/\n\t* config/nvptx/nvptx-protos.h (npvptx_section_from_addr_space):\tDelete.\n\t* config/nvptx/nvptx.c (enum nvptx_data_area): New.\n\t(SYMBOL_DATA_AREA, SET_SYMBOL_DATA_AREA): New defines.\n\t(nvptx_option_override): Set data ares for worker vars.\n\t(nvptx_addr_space_from_sym): Delete.\n\t(nvptx_encode_section_info): New.\n\t(section_for_sym, section_for_decl): New.\n\t(nvptx_maybe_convert_symbolic_operand): Get data area from symbol\n\tflags,\n\t(nvptx_section_from_addr_space): Delete.\n\t(nvptx_section_for_decl): Delete.\n\t(nvptx_output_aligned, nvptx_declare_object_name,\n\tnvptx_assemble_undefined_decl): Use section_for_decl, remove\n\tunnecessary checks.\n\t(nvptx_print_operand): Add 'D', adjust 'A'.\n\t(nvptx_expand_worker_addr): Adjust unspec generation.\n\t(TARGET_ENCODE_SECTION_INFO): Override.\n\t* config/nvptx/nvptx.h (ADDR_SPACE_GLOBAL, ADDR_SPACE_SHARED,\n\tADDR_SPACE_CONST, ADDR_SPACE_LOCAL, ADDR_SPACE_PARAM): Delete.\n\t* config/nvptx/nvptx.md (UNSPEC_FROM_GLOBAL, UNSPEC_FROM_LOCAL,\n\tUNSPEC_FROM_PARAM, UNSPEC_FROM_SHARED, UNSPEC_FROM_CONST,\n\tUNSPEC_TO_GLOBAL, UNSPEC_TO_LOCAL, UNSPEC_TO_PARAM,\n\tUNSPEC_TO_SHARED, UNSPEC_TO_CONST): Delete.\n\t(UNSPEC_TO_GENERIC): New.\n\t(nvptx_register_or_symbolic_operand): Delete.\n\t(cvt_code, cvt_name, cvt_str): Delete.\n\t(convaddr_<cvt_name><mode> [P]): Delete.\n\t(convaddr_<mode> [P]): New.\n\n\tgcc/testsuite/\n\t* gcc.target/nvptx/decl.c: New.\n\t* gcc.target/nvptx/uninit-decl.c: Robustify regexps.\n\nFrom-SVN: r231227", "tree": {"sha": "0951f6510ae62c2394a1cc63ef91733e9f959559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0951f6510ae62c2394a1cc63ef91733e9f959559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1986d6791c18e5d9d527eb5acec1f326085a0ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1986d6791c18e5d9d527eb5acec1f326085a0ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1986d6791c18e5d9d527eb5acec1f326085a0ca7"}], "stats": {"total": 357, "additions": 173, "deletions": 184}, "files": [{"sha": "8f5017efa1a48b83d3bcb4b2f4e2c34b95cacf50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "patch": "@@ -1,3 +1,34 @@\n+2015-12-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx-protos.h (npvptx_section_from_addr_space):\tDelete.\n+\t* config/nvptx/nvptx.c (enum nvptx_data_area): New.\n+\t(SYMBOL_DATA_AREA, SET_SYMBOL_DATA_AREA): New defines.\n+\t(nvptx_option_override): Set data ares for worker vars.\n+\t(nvptx_addr_space_from_sym): Delete.\n+\t(nvptx_encode_section_info): New.\n+\t(section_for_sym, section_for_decl): New.\n+\t(nvptx_maybe_convert_symbolic_operand): Get data area from symbol\n+\tflags,\n+\t(nvptx_section_from_addr_space): Delete.\n+\t(nvptx_section_for_decl): Delete.\n+\t(nvptx_output_aligned, nvptx_declare_object_name,\n+\tnvptx_assemble_undefined_decl): Use section_for_decl, remove\n+\tunnecessary checks.\n+\t(nvptx_print_operand): Add 'D', adjust 'A'.\n+\t(nvptx_expand_worker_addr): Adjust unspec generation.\n+\t(TARGET_ENCODE_SECTION_INFO): Override.\n+\t* config/nvptx/nvptx.h (ADDR_SPACE_GLOBAL, ADDR_SPACE_SHARED,\n+\tADDR_SPACE_CONST, ADDR_SPACE_LOCAL, ADDR_SPACE_PARAM): Delete.\n+\t* config/nvptx/nvptx.md (UNSPEC_FROM_GLOBAL, UNSPEC_FROM_LOCAL,\n+\tUNSPEC_FROM_PARAM, UNSPEC_FROM_SHARED, UNSPEC_FROM_CONST,\n+\tUNSPEC_TO_GLOBAL, UNSPEC_TO_LOCAL, UNSPEC_TO_PARAM,\n+\tUNSPEC_TO_SHARED, UNSPEC_TO_CONST): Delete.\n+\t(UNSPEC_TO_GENERIC): New.\n+\t(nvptx_register_or_symbolic_operand): Delete.\n+\t(cvt_code, cvt_name, cvt_str): Delete.\n+\t(convaddr_<cvt_name><mode> [P]): Delete.\n+\t(convaddr_<mode> [P]): New.\n+\n 2015-12-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/68624"}, {"sha": "7e0c296e3f05cfc9f445f267909228c4a2e94b12", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "patch": "@@ -41,7 +41,6 @@ extern const char *nvptx_ptx_type_from_mode (machine_mode, bool);\n extern const char *nvptx_output_mov_insn (rtx, rtx);\n extern const char *nvptx_output_call_insn (rtx_insn *, rtx, rtx);\n extern const char *nvptx_output_return (void);\n-extern const char *nvptx_section_from_addr_space (addr_space_t);\n extern bool nvptx_hard_regno_mode_ok (int, machine_mode);\n extern rtx nvptx_maybe_convert_symbolic_operand (rtx);\n #endif"}, {"sha": "a036f30f51e8fc618e736433ae32aab63831606c", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 110, "deletions": 115, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "patch": "@@ -80,6 +80,25 @@ enum nvptx_shuffle_kind\n   SHUFFLE_MAX\n };\n \n+/* The various PTX memory areas an object might reside in.  */\n+enum nvptx_data_area\n+{\n+  DATA_AREA_GENERIC,\n+  DATA_AREA_GLOBAL,\n+  DATA_AREA_SHARED,\n+  DATA_AREA_LOCAL,\n+  DATA_AREA_CONST,\n+  DATA_AREA_PARAM,\n+  DATA_AREA_MAX\n+};\n+\n+/*  We record the data area in the target symbol flags.  */\n+#define SYMBOL_DATA_AREA(SYM) \\\n+  (nvptx_data_area)((SYMBOL_REF_FLAGS (SYM) >> SYMBOL_FLAG_MACH_DEP_SHIFT) \\\n+\t\t    & 7)\n+#define SET_SYMBOL_DATA_AREA(SYM,AREA) \\\n+  (SYMBOL_REF_FLAGS (SYM) |= (AREA) << SYMBOL_FLAG_MACH_DEP_SHIFT)\n+\n /* Record the function decls we've written, and the libfuncs and function\n    decls corresponding to them.  */\n static std::stringstream func_decls;\n@@ -154,9 +173,11 @@ nvptx_option_override (void)\n     = hash_table<declared_libfunc_hasher>::create_ggc (17);\n \n   worker_bcast_sym = gen_rtx_SYMBOL_REF (Pmode, worker_bcast_name);\n+  SET_SYMBOL_DATA_AREA (worker_bcast_sym, DATA_AREA_SHARED);\n   worker_bcast_align = GET_MODE_ALIGNMENT (SImode) / BITS_PER_UNIT;\n \n   worker_red_sym = gen_rtx_SYMBOL_REF (Pmode, worker_red_name);\n+  SET_SYMBOL_DATA_AREA (worker_red_sym, DATA_AREA_SHARED);\n   worker_red_align = GET_MODE_ALIGNMENT (SImode) / BITS_PER_UNIT;\n }\n \n@@ -194,22 +215,49 @@ nvptx_ptx_type_from_mode (machine_mode mode, bool promote)\n     }\n }\n \n-/* Determine the address space to use for SYMBOL_REF SYM.  */\n+/* Encode the PTX data area that DECL (which might not actually be a\n+   _DECL) should reside in.  */\n \n-static addr_space_t\n-nvptx_addr_space_from_sym (rtx sym)\n+static void\n+nvptx_encode_section_info (tree decl, rtx rtl, int first)\n {\n-  tree decl = SYMBOL_REF_DECL (sym);\n-  if (decl == NULL_TREE || TREE_CODE (decl) == FUNCTION_DECL)\n-    return ADDR_SPACE_GENERIC;\n+  default_encode_section_info (decl, rtl, first);\n+  if (first && MEM_P (rtl))\n+    {\n+      nvptx_data_area area = DATA_AREA_GENERIC;\n \n-  bool is_const = (CONSTANT_CLASS_P (decl)\n-\t\t   || TREE_CODE (decl) == CONST_DECL\n-\t\t   || TREE_READONLY (decl));\n-  if (is_const)\n-    return ADDR_SPACE_CONST;\n+      if (TREE_CONSTANT (decl))\n+\tarea = DATA_AREA_CONST;\n+      else if (TREE_CODE (decl) == VAR_DECL)\n+\t/* TODO: This would be a good place to check for a .shared or\n+\t   other section name.  */\n+\tarea = TREE_READONLY (decl) ? DATA_AREA_CONST : DATA_AREA_GLOBAL;\n \n-  return ADDR_SPACE_GLOBAL;\n+      SET_SYMBOL_DATA_AREA (XEXP (rtl, 0), area);\n+    }\n+}\n+\n+/* Return the PTX name of the data area in which SYM should be\n+   placed.  The symbol must have already been processed by\n+   nvptx_encode_seciton_info, or equivalent.  */\n+\n+static const char *\n+section_for_sym (rtx sym)\n+{\n+  nvptx_data_area area = SYMBOL_DATA_AREA (sym);\n+  /* Same order as nvptx_data_area enum.  */\n+  static char const *const areas[] =\n+    {\"\", \".global\", \".shared\", \".local\", \".const\", \".param\"};\n+\n+  return areas[area];\n+}\n+\n+/* Similarly for a decl.  */\n+\n+static const char *\n+section_for_decl (const_tree decl)\n+{\n+  return section_for_sym (XEXP (DECL_RTL (CONST_CAST (tree, decl)), 0));\n }\n \n /* Check NAME for special function names and redirect them by returning a\n@@ -1395,21 +1443,15 @@ nvptx_maybe_convert_symbolic_operand (rtx op)\n     return op;\n \n   nvptx_maybe_record_fnsym (sym);\n-  \n-  addr_space_t as = nvptx_addr_space_from_sym (sym);\n-  if (as == ADDR_SPACE_GENERIC)\n-    return op;\n \n-  enum unspec code;\n-  code = (as == ADDR_SPACE_GLOBAL ? UNSPEC_FROM_GLOBAL\n-\t  : as == ADDR_SPACE_LOCAL ? UNSPEC_FROM_LOCAL\n-\t  : as == ADDR_SPACE_SHARED ? UNSPEC_FROM_SHARED\n-\t  : as == ADDR_SPACE_CONST ? UNSPEC_FROM_CONST\n-\t  : UNSPEC_FROM_PARAM);\n+  nvptx_data_area area = SYMBOL_DATA_AREA (sym);\n+  if (area == DATA_AREA_GENERIC)\n+    return op;\n \n   rtx dest = gen_reg_rtx (Pmode);\n   emit_insn (gen_rtx_SET (dest,\n-\t\t\t  gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op), code)));\n+\t\t\t  gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op),\n+\t\t\t\t\t  UNSPEC_TO_GENERIC)));\n   return dest;\n }\n \f\n@@ -1451,45 +1493,6 @@ nvptx_hard_regno_mode_ok (int regno, machine_mode mode)\n     return true;\n   return mode == cfun->machine->ret_reg_mode;\n }\n-\f\n-/* Convert an address space AS to the corresponding ptx string.  */\n-\n-const char *\n-nvptx_section_from_addr_space (addr_space_t as)\n-{\n-  switch (as)\n-    {\n-    case ADDR_SPACE_CONST:\n-      return \".const\";\n-\n-    case ADDR_SPACE_GLOBAL:\n-      return \".global\";\n-\n-    case ADDR_SPACE_SHARED:\n-      return \".shared\";\n-\n-    case ADDR_SPACE_GENERIC:\n-      return \"\";\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n-\n-/* Determine whether DECL goes into .const or .global.  */\n-\n-const char *\n-nvptx_section_for_decl (const_tree decl)\n-{\n-  bool is_const = (CONSTANT_CLASS_P (decl)\n-\t\t   || TREE_CODE (decl) == CONST_DECL\n-\t\t   || TREE_READONLY (decl));\n-  if (is_const)\n-    return \".const\";\n-\n-  return \".global\";\n-}\n-\n \f\n /* Machinery to output constant initializers.  When beginning an initializer,\n    we decide on a chunk size (which is visible in ptx in the type used), and\n@@ -1693,11 +1696,10 @@ nvptx_output_aligned_decl (FILE *file, const char *name,\n \n   /* If this is public, it is common.  The nearest thing we have to\n      common is weak.  */\n-  if (TREE_PUBLIC (decl))\n-    fprintf (file, \".weak \");\n-\n-  const char *sec = nvptx_section_for_decl (decl);\n-  fprintf (file, \"%s.align %d .b8 \", sec, align / BITS_PER_UNIT);\n+  fprintf (file, \"\\t%s%s .align %d .b8 \",\n+\t   TREE_PUBLIC (decl) ? \".weak \" : \"\",\n+\t   section_for_decl (decl),\n+\t   align / BITS_PER_UNIT);\n   assemble_name (file, name);\n   if (size > 0)\n     fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", size);\n@@ -1729,27 +1731,24 @@ nvptx_asm_declare_constant_name (FILE *file, const char *name,\n void\n nvptx_declare_object_name (FILE *file, const char *name, const_tree decl)\n {\n-  if (decl && DECL_SIZE (decl))\n-    {\n-      tree type = TREE_TYPE (decl);\n-      unsigned HOST_WIDE_INT size;\n-\n-      init_output_initializer (file, name, type, TREE_PUBLIC (decl));\n-      size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n-      const char *section = nvptx_section_for_decl (decl);\n-      fprintf (file, \"\\t%s%s .align %d .u%d \",\n-\t       !TREE_PUBLIC (decl) ? \"\"\n-\t       : DECL_WEAK (decl) ? \".weak\" : \".visible\",\n-\t       section, DECL_ALIGN (decl) / BITS_PER_UNIT,\n-\t       decl_chunk_size * BITS_PER_UNIT);\n-      assemble_name (file, name);\n-      if (size > 0)\n-\tfprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC \"]\",\n-\t\t (size + decl_chunk_size - 1) / decl_chunk_size);\n-      else\n-\tobject_finished = true;\n-      object_size = size;\n-    }\n+  tree type = TREE_TYPE (decl);\n+\n+  init_output_initializer (file, name, type, TREE_PUBLIC (decl));\n+  fprintf (file, \"\\t%s%s .align %d .u%d \",\n+\t   !TREE_PUBLIC (decl) ? \"\"\n+\t   : DECL_WEAK (decl) ? \".weak \" : \".visible \",\n+\t   section_for_decl (decl),\n+\t   DECL_ALIGN (decl) / BITS_PER_UNIT,\n+\t   decl_chunk_size * BITS_PER_UNIT);\n+  assemble_name (file, name);\n+\n+  unsigned HOST_WIDE_INT size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n+  if (size > 0)\n+    fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC \"]\",\n+\t     (size + decl_chunk_size - 1) / decl_chunk_size);\n+  else\n+    object_finished = true;\n+  object_size = size;\n }\n \n /* Implement TARGET_ASM_GLOBALIZE_LABEL by doing nothing.  */\n@@ -1765,18 +1764,15 @@ nvptx_globalize_label (FILE *, const char *)\n static void\n nvptx_assemble_undefined_decl (FILE *file, const char *name, const_tree decl)\n {\n-  if (TREE_CODE (decl) != VAR_DECL)\n-    return;\n-\n   write_var_marker (file, false, TREE_PUBLIC (decl), name);\n \n-  const char *section = nvptx_section_for_decl (decl);\n-  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n-  fprintf (file, \".extern %s .b8 \", section);\n+  fprintf (file, \"\\t.extern %s .b8 \", section_for_decl (decl));\n   assemble_name_raw (file, name);\n+\n+  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n   if (size > 0)\n     fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", size);\n-  fprintf (file, \";\\n\\n\");\n+  fprintf (file, \";\\n\");\n }\n \n /* Output a pattern for a move instruction.  */\n@@ -1957,8 +1953,9 @@ nvptx_print_operand_address (FILE *file, machine_mode mode, rtx addr)\n         unconditional one.\n    # -- print a rounding mode for the instruction\n \n-   A -- print an address space identifier for a MEM\n+   A -- print a data area for a MEM\n    c -- print an opcode suffix for a comparison operator, including a type code\n+   D -- print a data area for a MEM operand\n    S -- print a shuffle kind specified by CONST_INT\n    t -- print a type opcode suffix, promoting QImode to 32 bits\n    T -- print a type size in bits\n@@ -1993,20 +1990,17 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n   switch (code)\n     {\n     case 'A':\n-      {\n-\taddr_space_t as = ADDR_SPACE_GENERIC;\n-\trtx sym = XEXP (x, 0);\n-\n-\tif (GET_CODE (sym) == CONST)\n-\t  sym = XEXP (sym, 0);\n-\tif (GET_CODE (sym) == PLUS)\n-\t  sym = XEXP (sym, 0);\n+      x = XEXP (x, 0);\n+      /* FALLTHROUGH.  */\n \n-\tif (GET_CODE (sym) == SYMBOL_REF)\n-\t  as = nvptx_addr_space_from_sym (sym);\n+    case 'D':\n+      if (GET_CODE (x) == CONST)\n+\tx = XEXP (x, 0);\n+      if (GET_CODE (x) == PLUS)\n+\tx = XEXP (x, 0);\n \n-\tfputs (nvptx_section_from_addr_space (as), file);\n-      }\n+      if (GET_CODE (x) == SYMBOL_REF)\n+\tfputs (section_for_sym (x), file);\n       break;\n \n     case 't':\n@@ -4022,15 +4016,14 @@ nvptx_expand_worker_addr (tree exp, rtx target,\n   if (size + offset > worker_red_size)\n     worker_red_size = size + offset;\n \n-  emit_insn (gen_rtx_SET (target, worker_red_sym));\n-\n+  rtx addr = worker_red_sym;\n   if (offset)\n-    emit_insn (gen_rtx_SET (target,\n-\t\t\t    gen_rtx_PLUS (Pmode, target, GEN_INT (offset))));\n+    {\n+      addr = gen_rtx_PLUS (Pmode, addr, GEN_INT (offset));\n+      addr = gen_rtx_CONST (Pmode, addr);\n+    }\n \n-  emit_insn (gen_rtx_SET (target,\n-\t\t\t  gen_rtx_UNSPEC (Pmode, gen_rtvec (1, target),\n-\t\t\t\t\t  UNSPEC_FROM_SHARED)));\n+  emit_move_insn (target, addr);\n \n   return target;\n }\n@@ -4895,6 +4888,8 @@ nvptx_goacc_reduction (gcall *call)\n #undef TARGET_NO_REGISTER_ALLOCATION\n #define TARGET_NO_REGISTER_ALLOCATION true\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO nvptx_encode_section_info\n #undef TARGET_RECORD_OFFLOAD_SYMBOL\n #define TARGET_RECORD_OFFLOAD_SYMBOL nvptx_record_offload_symbol\n "}, {"sha": "66906e74fde51163095f21eb30593f288517b5b3", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "patch": "@@ -141,13 +141,6 @@ enum reg_class\n       (MODE) = SImode;\t\t\t\t\t\\\n     }\n \n-/* Address spaces.  */\n-#define ADDR_SPACE_GLOBAL 1\n-#define ADDR_SPACE_SHARED 3\n-#define ADDR_SPACE_CONST 4\n-#define ADDR_SPACE_LOCAL 5\n-#define ADDR_SPACE_PARAM 101\n-\n /* Stack and Calling.  */\n \n #define STARTING_FRAME_OFFSET 0"}, {"sha": "b0da63e389ada561c112d5cc984950dba1369255", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 6, "deletions": 59, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "patch": "@@ -20,16 +20,7 @@\n \n (define_c_enum \"unspec\" [\n    UNSPEC_ARG_REG\n-   UNSPEC_FROM_GLOBAL\n-   UNSPEC_FROM_LOCAL\n-   UNSPEC_FROM_PARAM\n-   UNSPEC_FROM_SHARED\n-   UNSPEC_FROM_CONST\n-   UNSPEC_TO_GLOBAL\n-   UNSPEC_TO_LOCAL\n-   UNSPEC_TO_PARAM\n-   UNSPEC_TO_SHARED\n-   UNSPEC_TO_CONST\n+   UNSPEC_TO_GENERIC\n \n    UNSPEC_COPYSIGN\n    UNSPEC_LOG2\n@@ -100,20 +91,6 @@\n (define_predicate \"symbolic_operand\"\n   (match_code \"symbol_ref,const\"))\n \n-;; Allow registers or symbolic constants.  We can allow frame, arg or stack\n-;; pointers here since they are actually symbolic constants.\n-(define_predicate \"nvptx_register_or_symbolic_operand\"\n-  (match_code \"reg,subreg,symbol_ref,const\")\n-{\n-  if (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op)))\n-    return false;\n-  if (GET_CODE (op) == SUBREG)\n-    return false;\n-  if (CONSTANT_P (op))\n-    return true;\n-  return register_operand (op, mode);\n-})\n-\n ;; Registers or constants for normal instructions.  Does not allow symbolic\n ;; constants.\n (define_predicate \"nvptx_nonmemory_operand\"\n@@ -399,43 +376,13 @@\n    %.\\\\tst%A0.u%T0\\\\t%0, %1;\"\n   [(set_attr \"subregs_ok\" \"true\")])\n \n-;; Pointer address space conversions\n-\n-(define_int_iterator cvt_code\n-  [UNSPEC_FROM_GLOBAL\n-   UNSPEC_FROM_LOCAL\n-   UNSPEC_FROM_SHARED\n-   UNSPEC_FROM_CONST\n-   UNSPEC_TO_GLOBAL\n-   UNSPEC_TO_LOCAL\n-   UNSPEC_TO_SHARED\n-   UNSPEC_TO_CONST])\n-\n-(define_int_attr cvt_name\n-  [(UNSPEC_FROM_GLOBAL \"from_global\")\n-   (UNSPEC_FROM_LOCAL \"from_local\")\n-   (UNSPEC_FROM_SHARED \"from_shared\")\n-   (UNSPEC_FROM_CONST \"from_const\")\n-   (UNSPEC_TO_GLOBAL \"to_global\")\n-   (UNSPEC_TO_LOCAL \"to_local\")\n-   (UNSPEC_TO_SHARED \"to_shared\")\n-   (UNSPEC_TO_CONST \"to_const\")])\n-\n-(define_int_attr cvt_str\n-  [(UNSPEC_FROM_GLOBAL \".global\")\n-   (UNSPEC_FROM_LOCAL \".local\")\n-   (UNSPEC_FROM_SHARED \".shared\")\n-   (UNSPEC_FROM_CONST \".const\")\n-   (UNSPEC_TO_GLOBAL \".to.global\")\n-   (UNSPEC_TO_LOCAL \".to.local\")\n-   (UNSPEC_TO_SHARED \".to.shared\")\n-   (UNSPEC_TO_CONST \".to.const\")])\n-\n-(define_insn \"convaddr_<cvt_name><mode>\"\n+;; Pointer address space conversion\n+(define_insn \"convaddr_<mode>\"\n   [(set (match_operand:P 0 \"nvptx_register_operand\" \"=R\")\n-\t(unspec:P [(match_operand:P 1 \"nvptx_register_or_symbolic_operand\" \"Rs\")] cvt_code))]\n+\t(unspec:P [(match_operand:P 1 \"symbolic_operand\" \"s\")]\n+                  UNSPEC_TO_GENERIC))]\n   \"\"\n-  \"%.\\\\tcvta<cvt_str>%t0\\\\t%0, %1;\")\n+  \"%.\\\\tcvta%D1%t0\\\\t%0, %1;\")\n \n ;; Integer arithmetic\n "}, {"sha": "4dd7f3d21900992b6aeab8c42d4e137fdc0834f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "patch": "@@ -1,3 +1,8 @@\n+2015-12-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.target/nvptx/decl.c: New.\n+\t* gcc.target/nvptx/uninit-decl.c: Robustify regexps.\n+\n 2015-12-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR rtl-optimization/68624"}, {"sha": "094cdb03fe0acc8a074ce860a9ad8938599ccaac", "filename": "gcc/testsuite/gcc.target/nvptx/decl.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl.c?ref=9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "patch": "@@ -0,0 +1,19 @@\n+\n+static const int __attribute__ ((used)) cst_local = 4;\n+static int __attribute__ ((used)) glob_local = 5;\n+const int __attribute__ ((used)) cst_export = 4;\n+int __attribute__ ((used)) glob_export = 5;\n+extern const int cst_import;\n+extern int glob_import;\n+\n+int Foo ()\n+{\n+  return cst_import + glob_import;\n+}\n+\n+/* { dg-final { scan-assembler \"\\[\\r\\n\\]\\[\\t \\]*.visible .global \\[^,\\r\\n\\]*glob_export\" } } */\n+/* { dg-final { scan-assembler \"\\[\\r\\n\\]\\[\\t \\]*.visible .const \\[^,\\r\\n\\]*cst_export\" } } */\n+/* { dg-final { scan-assembler \"\\[\\r\\n\\]\\[\\t \\]*.global \\[^,\\r\\n\\]*glob_local\" } } */\n+/* { dg-final { scan-assembler \"\\[\\r\\n\\]\\[\\t \\]*.const \\[^,\\r\\n\\]*cst_local\" } } */\n+/* { dg-final { scan-assembler \"\\[\\r\\n\\]\\[\\t \\]*.extern .global \\[^,\\r\\n\\]*glob_import\" } } */\n+/* { dg-final { scan-assembler \"\\[\\r\\n\\]\\[\\t \\]*.extern .const \\[^,\\r\\n\\]*cst_import\" } } */"}, {"sha": "65c44f5b0f7ddc37926c55b86fa35b379efd92e0", "filename": "gcc/testsuite/gcc.target/nvptx/uninit-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funinit-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a863523b43ee0ddbfbbb4ce82edc577b6f372de/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funinit-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Funinit-decl.c?ref=9a863523b43ee0ddbfbbb4ce82edc577b6f372de", "patch": "@@ -3,5 +3,5 @@\n int __attribute__ ((used)) common;\n static int __attribute__ ((used)) local;\n \n-/* { dg-final { scan-assembler \".weak .global\\[^,\\n\\r\\]*common\" } } */\n-/* { dg-final { scan-assembler \"\\[\\n\\r\\].global\\[^,\\n\\r\\]*local\" } } */\n+/* { dg-final { scan-assembler \"\\[\\n\\r\\]\\[\\t \\]*.weak .global\\[^,\\n\\r\\]*common\" } } */\n+/* { dg-final { scan-assembler \"\\[\\n\\r\\]\\[\\t \\]*.global\\[^,\\n\\r\\]*local\" } } */"}]}