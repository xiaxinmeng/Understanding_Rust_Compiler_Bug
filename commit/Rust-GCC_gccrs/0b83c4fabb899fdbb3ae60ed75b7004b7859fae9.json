{"sha": "0b83c4fabb899fdbb3ae60ed75b7004b7859fae9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4M2M0ZmFiYjg5OWZkYmIzYWU2MGVkNzViNzAwNGI3ODU5ZmFlOQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-02-29T17:22:55Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-05-10T21:01:41Z"}, "message": "libstdc++ Enhance thread safety of debug mode iterators\n\nAvoids race condition when checking for an iterator to be singular or\nto be comparable to another iterator.\n\n\t* src/c++/debug.cc\n\t(_Safe_sequence_base::_M_attach_single): Set attached iterator\n\tsequence pointer and version.\n\t(_Safe_sequence_base::_M_detach_single): Reset detached iterator.\n\t(_Safe_iterator_base::_M_attach): Remove attached iterator sequence\n\tpointer and version asignments.\n\t(_Safe_iterator_base::_M_attach_single): Likewise.\n\t(_Safe_iterator_base::_M_detach_single): Remove detached iterator\n\treset.\n\t(_Safe_iterator_base::_M_singular): Use atomic load to access parent\n\tsequence.\n\t(_Safe_iterator_base::_M_can_compare): Likewise.\n\t(_Safe_iterator_base::_M_get_mutex): Likewise.\n\t(_Safe_local_iterator_base::_M_attach): Remove attached iterator container\n\tpointer and version assignments.\n\t(_Safe_local_iterator_base::_M_attach_single): Likewise.\n\t(_Safe_unordered_container_base::_M_attach_local_single):\n\tSet attached iterator container pointer and version.\n\t(_Safe_unordered_container_base::_M_detach_local_single): Reset detached\n\titerator.", "tree": {"sha": "caa0c24850710ec8e67b8088d17a1ab7b147d179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caa0c24850710ec8e67b8088d17a1ab7b147d179"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b83c4fabb899fdbb3ae60ed75b7004b7859fae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b83c4fabb899fdbb3ae60ed75b7004b7859fae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b83c4fabb899fdbb3ae60ed75b7004b7859fae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b83c4fabb899fdbb3ae60ed75b7004b7859fae9/comments", "author": null, "committer": null, "parents": [{"sha": "92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ed82367e7ccf5e031e9cb7c653c14a2d64ca89"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "8fb6b86474b27645b51b90fd93f92a7fe4908018", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b83c4fabb899fdbb3ae60ed75b7004b7859fae9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b83c4fabb899fdbb3ae60ed75b7004b7859fae9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b83c4fabb899fdbb3ae60ed75b7004b7859fae9", "patch": "@@ -1,3 +1,26 @@\n+2020-05-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* src/c++/debug.cc\n+\t(_Safe_sequence_base::_M_attach_single): Set attached iterator\n+\tsequence pointer and version.\n+\t(_Safe_sequence_base::_M_detach_single): Reset detached iterator.\n+\t(_Safe_iterator_base::_M_attach): Remove attached iterator sequence\n+\tpointer and version asignments.\n+\t(_Safe_iterator_base::_M_attach_single): Likewise.\n+\t(_Safe_iterator_base::_M_detach_single): Remove detached iterator\n+\treset.\n+\t(_Safe_iterator_base::_M_singular): Use atomic load to access parent\n+\tsequence.\n+\t(_Safe_iterator_base::_M_can_compare): Likewise.\n+\t(_Safe_iterator_base::_M_get_mutex): Likewise.\n+\t(_Safe_local_iterator_base::_M_attach): Remove attached iterator container\n+\tpointer and version assignments.\n+\t(_Safe_local_iterator_base::_M_attach_single): Likewise.\n+\t(_Safe_unordered_container_base::_M_attach_local_single):Set attached\n+\titerator container pointer and version.\n+\t(_Safe_unordered_container_base::_M_detach_local_single): Reset detached\n+\titerator.\n+\n 2020-05-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94971 (partial)"}, {"sha": "032e0b50b91af8fde0332c4f251f3ea63f2cdefb", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b83c4fabb899fdbb3ae60ed75b7004b7859fae9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b83c4fabb899fdbb3ae60ed75b7004b7859fae9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=0b83c4fabb899fdbb3ae60ed75b7004b7859fae9", "patch": "@@ -318,6 +318,8 @@ namespace __gnu_debug\n   _Safe_sequence_base::\n   _M_attach_single(_Safe_iterator_base* __it, bool __constant) throw ()\n   {\n+    __it->_M_sequence = this;\n+    __it->_M_version = _M_version;\n     _Safe_iterator_base*& __its =\n       __constant ? _M_const_iterators : _M_iterators;\n     __it->_M_next = __its;\n@@ -345,6 +347,7 @@ namespace __gnu_debug\n       _M_const_iterators = __it->_M_next;\n     if (_M_iterators == __it)\n       _M_iterators = __it->_M_next;\n+    __it->_M_reset();\n   }\n \n   void\n@@ -355,11 +358,7 @@ namespace __gnu_debug\n \n     // Attach to the new sequence (if there is one)\n     if (__seq)\n-      {\n-\t_M_sequence = __seq;\n-\t_M_version = _M_sequence->_M_version;\n-\t_M_sequence->_M_attach(this, __constant);\n-      }\n+      __seq->_M_attach(this, __constant);\n   }\n \n   void\n@@ -370,11 +369,7 @@ namespace __gnu_debug\n \n     // Attach to the new sequence (if there is one)\n     if (__seq)\n-      {\n-\t_M_sequence = __seq;\n-\t_M_version = _M_sequence->_M_version;\n-\t_M_sequence->_M_attach_single(this, __constant);\n-      }\n+      __seq->_M_attach_single(this, __constant);\n   }\n \n   void\n@@ -400,10 +395,7 @@ namespace __gnu_debug\n   _M_detach_single() throw ()\n   {\n     if (_M_sequence)\n-      {\n-\t_M_sequence->_M_detach_single(this);\n-\t_M_reset();\n-      }\n+      _M_sequence->_M_detach_single(this);\n   }\n \n   void\n@@ -419,20 +411,32 @@ namespace __gnu_debug\n   bool\n   _Safe_iterator_base::\n   _M_singular() const throw ()\n-  { return !_M_sequence || _M_version != _M_sequence->_M_version; }\n+  {\n+    auto seq = __atomic_load_n(&_M_sequence, __ATOMIC_ACQUIRE);\n+    return !seq || _M_version != seq->_M_version;\n+  }\n \n   bool\n   _Safe_iterator_base::\n   _M_can_compare(const _Safe_iterator_base& __x) const throw ()\n   {\n-    return (!_M_singular()\n-\t    && !__x._M_singular() && _M_sequence == __x._M_sequence);\n+    auto seq = __atomic_load_n(&_M_sequence, __ATOMIC_ACQUIRE);\n+    if (seq && _M_version == seq->_M_version)\n+      {\n+\tauto xseq = __atomic_load_n(&__x._M_sequence, __ATOMIC_ACQUIRE);\n+\treturn xseq && __x._M_version == xseq->_M_version && seq == xseq;\n+      }\n+\n+    return false;\n   }\n \n   __gnu_cxx::__mutex&\n   _Safe_iterator_base::\n   _M_get_mutex() throw ()\n-  { return _M_sequence->_M_get_mutex(); }\n+  {\n+    auto seq = __atomic_load_n(&_M_sequence, __ATOMIC_ACQUIRE);\n+    return get_safe_base_mutex(seq);\n+  }\n \n   _Safe_unordered_container_base*\n   _Safe_local_iterator_base::\n@@ -447,11 +451,8 @@ namespace __gnu_debug\n \n     // Attach to the new container (if there is one)\n     if (__cont)\n-      {\n-\t_M_sequence = __cont;\n-\t_M_version = _M_sequence->_M_version;\n-\t_M_get_container()->_M_attach_local(this, __constant);\n-      }\n+      static_cast<_Safe_unordered_container_base*>(__cont)\n+\t->_M_attach_local(this, __constant);\n   }\n \n   void\n@@ -462,11 +463,8 @@ namespace __gnu_debug\n \n     // Attach to the new container (if there is one)\n     if (__cont)\n-      {\n-\t_M_sequence = __cont;\n-\t_M_version = _M_sequence->_M_version;\n-\t_M_get_container()->_M_attach_local_single(this, __constant);\n-      }\n+      static_cast<_Safe_unordered_container_base*>(__cont)\n+\t->_M_attach_local_single(this, __constant);\n   }\n \n   void\n@@ -526,6 +524,8 @@ namespace __gnu_debug\n   _Safe_unordered_container_base::\n   _M_attach_local_single(_Safe_iterator_base* __it, bool __constant) throw ()\n   {\n+    __it->_M_sequence = this;\n+    __it->_M_version = _M_version;\n     _Safe_iterator_base*& __its =\n       __constant ? _M_const_local_iterators : _M_local_iterators;\n     __it->_M_next = __its;\n@@ -553,6 +553,7 @@ namespace __gnu_debug\n       _M_const_local_iterators = __it->_M_next;\n     if (_M_local_iterators == __it)\n       _M_local_iterators = __it->_M_next;\n+    __it->_M_reset();\n   }\n }\n "}]}