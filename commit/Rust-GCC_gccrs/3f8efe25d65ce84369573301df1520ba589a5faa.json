{"sha": "3f8efe25d65ce84369573301df1520ba589a5faa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4ZWZlMjVkNjVjZTg0MzY5NTczMzAxZGYxNTIwYmE1ODlhNWZhYQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-05-30T19:34:36Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-05-30T19:34:36Z"}, "message": "Remove gen_cell_microcode, warn_cell_microcode\n\n-mno-gen-cell-microcode is a pain to handle correctly: it causes\ndifferent code generation for some very basic patterns, even patterns\nspecific to that option.  It also requires marking up many patterns,\nwhich is a pain when adding new patterns or modifying existing ones\n(first non-trivial step is finding the Cell BE manual!)\n\n-mwarn-cell-microcode is very expensive, even more so after my recent\nfix for PR43763; and it used to ICE for seven years before that fix.\n\nThis patch removes both these command line options (it leaves the\npositive form of -mgen-cell-microcode, doing nothing, for\ncompatibility).\n\nWhere cc_reg_not_micro_cr0_operand was used, we now get the regular\ncc_reg_not_cr0_operand.\n\nOne testcase used -mgen-cell-microcode and one its negation; both\nare adjusted.\n\n\n\t* config/rs6000/predicates.md (cc_reg_not_micro_cr0_operand): Delete.\n\t(lwa_operand): Delete rs6000_gen_cell_microcode test.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Delete\n\trs6000_gen_cell_microcode code.\n\t(rs6000_final_prescan_insn): Delete.\n\t(rs6000_opt_vars): Delete the \"gen-cell-microcode\" and\n\t\"warn-cell-microcode\" entries.\n\t* config/rs6000/rs6000.h (FINAL_PRESCAN_INSN): Delete.\n\t* config/rs6000/rs6000.md: Delete rs6000_gen_cell_microcode tests\n\tthroughout.  Change cc_reg_not_micro_cr0_operand to\n\tcc_reg_not_cr0_operand throughout.\n\t(*extendhi<mode>2_noload): Delete.\n\t* config/rs6000/rs6000.opt (mgen-cell-microcode): Replace by stub.\n\t(mwarn-cell-microcode): Delete.\n\t* doc/invoke.texi (RS/6000 and PowerPC Options): Delete\n\t-mgen-cell-microcode and -mwarn-cell-microcode.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/shift-dot.c: Delete -mgen-cell-microcode from\n\tdg-options.\n\t* gfortran.dg/pr80107.f: Delete testcase.\n\nFrom-SVN: r248695", "tree": {"sha": "11bcf7b0fcbd86d62f4ba7146eacf2a53c11407b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11bcf7b0fcbd86d62f4ba7146eacf2a53c11407b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8efe25d65ce84369573301df1520ba589a5faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8efe25d65ce84369573301df1520ba589a5faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8efe25d65ce84369573301df1520ba589a5faa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8efe25d65ce84369573301df1520ba589a5faa/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98c28dd4ba5bc2fe9141f44aeed7d59a07012018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c28dd4ba5bc2fe9141f44aeed7d59a07012018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c28dd4ba5bc2fe9141f44aeed7d59a07012018"}], "stats": {"total": 249, "additions": 79, "deletions": 170}, "files": [{"sha": "168e6734a305aac837ea92a0b1a1a0d861d13591", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -1,3 +1,22 @@\n+2017-05-30  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/predicates.md (cc_reg_not_micro_cr0_operand): Delete.\n+\t(lwa_operand): Delete rs6000_gen_cell_microcode test.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Delete\n+\trs6000_gen_cell_microcode code.\n+\t(rs6000_final_prescan_insn): Delete.\n+\t(rs6000_opt_vars): Delete the \"gen-cell-microcode\" and\n+\t\"warn-cell-microcode\" entries.\n+\t* config/rs6000/rs6000.h (FINAL_PRESCAN_INSN): Delete.\n+\t* config/rs6000/rs6000.md: Delete rs6000_gen_cell_microcode tests\n+\tthroughout.  Change cc_reg_not_micro_cr0_operand to\n+\tcc_reg_not_cr0_operand throughout.\n+\t(*extendhi<mode>2_noload): Delete.\n+\t* config/rs6000/rs6000.opt (mgen-cell-microcode): Replace by stub.\n+\t(mwarn-cell-microcode): Delete.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Delete\n+\t-mgen-cell-microcode and -mwarn-cell-microcode.\n+\n 2017-05-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/80833"}, {"sha": "7a74d592bd0a4464c46c50c44cff97fbbb8d26ec", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -530,25 +530,6 @@\n   return CR_REGNO_NOT_CR0_P (REGNO (op));\n })\n \n-;; Return 1 if op is a register that is a condition register field and if generating microcode, not cr0.\n-(define_predicate \"cc_reg_not_micro_cr0_operand\"\n-  (match_operand 0 \"register_operand\")\n-{\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-\n-  if (!REG_P (op))\n-    return 0;\n-\n-  if (REGNO (op) > LAST_VIRTUAL_REGISTER)\n-    return 1;\n-\n-  if (rs6000_gen_cell_microcode)\n-    return CR_REGNO_NOT_CR0_P (REGNO (op));\n-  else\n-    return CR_REGNO_P (REGNO (op));\n-})\n-\n ;; Return 1 if op is a constant integer valid for D field\n ;; or non-special register register.\n (define_predicate \"reg_or_short_operand\"\n@@ -1069,8 +1050,6 @@\n     return true;\n   if (!memory_operand (inner, mode))\n     return false;\n-  if (!rs6000_gen_cell_microcode)\n-    return false;\n \n   addr = XEXP (inner, 0);\n   if (GET_CODE (addr) == PRE_INC"}, {"sha": "fcdb8ac91287fc9fe6242bb325dfe8211ea1695a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 48, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -4260,16 +4260,9 @@ rs6000_option_override_internal (bool global_init_p)\n \terror (\"SPE not supported in this target\");\n     }\n \n-  /* Disable Cell microcode if we are optimizing for the Cell\n-     and not optimizing for size.  */\n-  if (rs6000_gen_cell_microcode == -1)\n-    rs6000_gen_cell_microcode = !(rs6000_cpu == PROCESSOR_CELL\n-                                  && !optimize_size);\n-\n-  /* If we are optimizing big endian systems for space and it's OK to\n-     use instructions that would be microcoded on the Cell, use the\n-     load/store multiple and string instructions.  */\n-  if (BYTES_BIG_ENDIAN && optimize_size && rs6000_gen_cell_microcode)\n+  /* If we are optimizing big endian systems for space, use the load/store\n+     multiple and string instructions.  */\n+  if (BYTES_BIG_ENDIAN && optimize_size)\n     rs6000_isa_flags |= ~rs6000_isa_flags_explicit & (OPTION_MASK_MULTIPLE\n \t\t\t\t\t\t      | OPTION_MASK_STRING);\n \n@@ -39295,38 +39288,6 @@ rs6000_stack_protect_fail (void)\n \t : default_external_stack_protect_fail ();\n }\n \n-void\n-rs6000_final_prescan_insn (rtx_insn *insn, rtx *operand ATTRIBUTE_UNUSED,\n-\t\t\t   int num_operands ATTRIBUTE_UNUSED)\n-{\n-  if (rs6000_warn_cell_microcode)\n-    {\n-      const char *temp;\n-      int insn_code_number = recog_memoized (insn);\n-      location_t location = INSN_LOCATION (insn);\n-\n-      /* Punt on insns we cannot recognize.  */\n-      if (insn_code_number < 0)\n-\treturn;\n-\n-      /* get_insn_template can modify recog_data, so save and restore it.  */\n-      struct recog_data_d recog_data_save = recog_data;\n-      for (int i = 0; i < recog_data.n_operands; i++)\n-\trecog_data.operand[i] = copy_rtx (recog_data.operand[i]);\n-      temp = get_insn_template (insn_code_number, insn);\n-      recog_data = recog_data_save;\n-\n-      if (get_attr_cell_micro (insn) == CELL_MICRO_ALWAYS)\n-\twarning_at (location, OPT_mwarn_cell_microcode,\n-\t\t    \"emitting microcode insn %s\\t[%s] #%d\",\n-\t\t    temp, insn_data[INSN_CODE (insn)].name, INSN_UID (insn)); \n-      else if (get_attr_cell_micro (insn) == CELL_MICRO_CONDITIONAL)\n-\twarning_at (location, OPT_mwarn_cell_microcode,\n-\t\t    \"emitting conditional microcode insn %s\\t[%s] #%d\",\n-\t\t    temp, insn_data[INSN_CODE (insn)].name, INSN_UID (insn));\n-    }\n-}\n-\n /* Implement the TARGET_ASAN_SHADOW_OFFSET hook.  */\n \n #if TARGET_ELF\n@@ -39499,12 +39460,6 @@ static struct rs6000_opt_var const rs6000_opt_vars[] =\n   { \"sched-epilog\",\n     offsetof (struct gcc_options, x_TARGET_SCHED_PROLOG),\n     offsetof (struct cl_target_option, x_TARGET_SCHED_PROLOG), },\n-  { \"gen-cell-microcode\",\n-    offsetof (struct gcc_options, x_rs6000_gen_cell_microcode),\n-    offsetof (struct cl_target_option, x_rs6000_gen_cell_microcode), },\n-  { \"warn-cell-microcode\",\n-    offsetof (struct gcc_options, x_rs6000_warn_cell_microcode),\n-    offsetof (struct cl_target_option, x_rs6000_warn_cell_microcode), },\n };\n \n /* Inner function to handle attribute((target(\"...\"))) and #pragma GCC target"}, {"sha": "479f9fbc2229fdbe39b92f84ff32b2adea79ab9e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -2157,12 +2157,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n /* #define LEGITIMATE_PIC_OPERAND_P (X) */\n \f\n-/* Define this if some processing needs to be done immediately before\n-   emitting code for an insn.  */\n-\n-#define FINAL_PRESCAN_INSN(INSN,OPERANDS,NOPERANDS) \\\n-  rs6000_final_prescan_insn (INSN, OPERANDS, NOPERANDS)\n-\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode"}, {"sha": "d8c890c59796a774a8f7bacef5b8185e349f0579", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 48, "deletions": 72, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -726,7 +726,7 @@\n \t(compare:CC (zero_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:EXTQI 0 \"=r,r\"))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    andi. %0,%1,0xff\n    #\"\n@@ -747,7 +747,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:EXTQI (match_dup 1)))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    andi. %0,%1,0xff\n    #\"\n@@ -779,7 +779,7 @@\n \t(compare:CC (zero_extend:EXTHI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:EXTHI 0 \"=r,r\"))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    andi. %0,%1,0xffff\n    #\"\n@@ -800,7 +800,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:EXTHI (match_dup 1)))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    andi. %0,%1,0xffff\n    #\"\n@@ -835,7 +835,7 @@\n \t(compare:CC (zero_extend:EXTSI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:EXTSI 0 \"=r,r\"))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    rldicl. %0,%1,0,32\n    #\"\n@@ -856,7 +856,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:EXTSI (match_dup 1)))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    rldicl. %0,%1,0,32\n    #\"\n@@ -886,7 +886,7 @@\n \t(compare:CC (sign_extend:EXTQI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:EXTQI 0 \"=r,r\"))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    extsb. %0,%1\n    #\"\n@@ -907,7 +907,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:EXTQI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:EXTQI (match_dup 1)))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    extsb. %0,%1\n    #\"\n@@ -932,7 +932,7 @@\n (define_insn \"*extendhi<mode>2\"\n   [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r,?*wK,?*wK\")\n \t(sign_extend:EXTHI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r,Z,wK\")))]\n-  \"rs6000_gen_cell_microcode || TARGET_VSX_SMALL_INTEGER\"\n+  \"\"\n   \"@\n    lha%U1%X1 %0,%1\n    extsh %0,%1\n@@ -955,19 +955,12 @@\n   operands[2] = gen_rtx_REG (HImode, REGNO (operands[1]));\n })\n \n-(define_insn \"*extendhi<mode>2_noload\"\n-  [(set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r\")\n-        (sign_extend:EXTHI (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"!rs6000_gen_cell_microcode\"\n-  \"extsh %0,%1\"\n-  [(set_attr \"type\" \"exts\")])\n-\n (define_insn_and_split \"*extendhi<mode>2_dot\"\n   [(set (match_operand:CC 2 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (sign_extend:EXTHI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:EXTHI 0 \"=r,r\"))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    extsh. %0,%1\n    #\"\n@@ -988,7 +981,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:EXTHI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:EXTHI (match_dup 1)))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    extsh. %0,%1\n    #\"\n@@ -1052,7 +1045,7 @@\n \t(compare:CC (sign_extend:EXTSI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:EXTSI 0 \"=r,r\"))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    extsw. %0,%1\n    #\"\n@@ -1073,7 +1066,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:EXTSI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:EXTSI (match_dup 1)))]\n-  \"rs6000_gen_cell_microcode\"\n+  \"\"\n   \"@\n    extsw. %0,%1\n    #\"\n@@ -1941,7 +1934,7 @@\n \t(compare:CC (not:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    not. %0,%1\n    #\"\n@@ -1962,7 +1955,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(not:GPR (match_dup 1)))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    not. %0,%1\n    #\"\n@@ -2849,7 +2842,7 @@\n \t\t\t      (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    mull<wd>. %0,%1,%2\n    #\"\n@@ -2874,7 +2867,7 @@\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(mult:GPR (match_dup 1)\n \t\t  (match_dup 2)))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    mull<wd>. %0,%1,%2\n    #\"\n@@ -3220,8 +3213,7 @@\n \t  DONE;\n \t}\n \n-      if (logical_const_operand (operands[2], <MODE>mode)\n-\t  && rs6000_gen_cell_microcode)\n+      if (logical_const_operand (operands[2], <MODE>mode))\n \t{\n \t  emit_insn (gen_and<mode>3_imm (operands[0], operands[1], operands[2]));\n \t  DONE;\n@@ -3243,8 +3235,7 @@\n \t(and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"%r\")\n \t\t (match_operand:GPR 2 \"logical_const_operand\" \"n\")))\n    (clobber (match_scratch:CC 3 \"=x\"))]\n-  \"rs6000_gen_cell_microcode\n-   && !rs6000_is_valid_and_mask (operands[2], <MODE>mode)\"\n+  \"!rs6000_is_valid_and_mask (operands[2], <MODE>mode)\"\n   \"andi%e2. %0,%1,%u2\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"dot\" \"yes\")])\n@@ -3257,7 +3248,6 @@\n    (clobber (match_scratch:GPR 0 \"=r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,x\"))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && !rs6000_is_valid_and_mask (operands[2], <MODE>mode)\"\n   \"@\n    andi%e2. %0,%1,%u2\n@@ -3285,7 +3275,6 @@\n \t\t (match_dup 2)))\n    (clobber (match_scratch:CC 4 \"=X,x\"))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && !rs6000_is_valid_and_mask (operands[2], <MODE>mode)\"\n   \"@\n    andi%e2. %0,%1,%u2\n@@ -3310,7 +3299,6 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && rs6000_is_valid_and_mask (operands[2], <MODE>mode)\"\n   \"@\n    andi%e2. %0,%1,%u2\n@@ -3336,7 +3324,6 @@\n \t(and:GPR (match_dup 1)\n \t\t (match_dup 2)))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && rs6000_is_valid_and_mask (operands[2], <MODE>mode)\"\n   \"@\n    andi%e2. %0,%1,%u2\n@@ -3366,8 +3353,7 @@\n \t\t\t\t   << INTVAL (operands[4])),\n \t\t\t  DImode)\n    && (<MODE>mode == Pmode\n-       || (UINTVAL (operands[2]) << INTVAL (operands[4])) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\"\n+       || (UINTVAL (operands[2]) << INTVAL (operands[4])) <= 0x7fffffff)\"\n {\n   operands[2] = GEN_INT (UINTVAL (operands[2]) << INTVAL (operands[4]));\n   return \"andi%e2. %0,%1,%u2\";\n@@ -3393,7 +3379,6 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && !logical_const_operand (operands[2], <MODE>mode)\n    && rs6000_is_valid_and_mask (operands[2], <MODE>mode)\"\n {\n@@ -3423,7 +3408,6 @@\n \t(and:GPR (match_dup 1)\n \t\t (match_dup 2)))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && !logical_const_operand (operands[2], <MODE>mode)\n    && rs6000_is_valid_and_mask (operands[2], <MODE>mode)\"\n {\n@@ -3451,8 +3435,7 @@\n \t\t (match_operand:GPR 2 \"const_int_operand\" \"n\")))]\n   \"rs6000_is_valid_2insn_and (operands[2], <MODE>mode)\n    && !(rs6000_is_valid_and_mask (operands[2], <MODE>mode)\n-\t|| (logical_const_operand (operands[2], <MODE>mode)\n-\t    && rs6000_gen_cell_microcode))\"\n+\t|| logical_const_operand (operands[2], <MODE>mode))\"\n   \"#\"\n   \"&& 1\"\n   [(pc)]\n@@ -3470,11 +3453,9 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && rs6000_is_valid_2insn_and (operands[2], <MODE>mode)\n    && !(rs6000_is_valid_and_mask (operands[2], <MODE>mode)\n-\t|| (logical_const_operand (operands[2], <MODE>mode)\n-\t    && rs6000_gen_cell_microcode))\"\n+\t|| logical_const_operand (operands[2], <MODE>mode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(pc)]\n@@ -3495,11 +3476,9 @@\n \t(and:GPR (match_dup 1)\n \t\t (match_dup 2)))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && rs6000_is_valid_2insn_and (operands[2], <MODE>mode)\n    && !(rs6000_is_valid_and_mask (operands[2], <MODE>mode)\n-\t|| (logical_const_operand (operands[2], <MODE>mode)\n-\t    && rs6000_gen_cell_microcode))\"\n+\t|| logical_const_operand (operands[2], <MODE>mode))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(pc)]\n@@ -3592,7 +3571,7 @@\n \t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\")])\n \t (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    %q3. %0,%1,%2\n    #\"\n@@ -3615,7 +3594,7 @@\n \t (const_int 0)))\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(match_dup 3))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    %q3. %0,%1,%2\n    #\"\n@@ -3647,7 +3626,7 @@\n \t  (match_operand:GPR 1 \"gpc_reg_operand\" \"r,r\")])\n \t (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    %q3. %0,%1,%2\n    #\"\n@@ -3670,7 +3649,7 @@\n \t (const_int 0)))\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(match_dup 3))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    %q3. %0,%1,%2\n    #\"\n@@ -3702,7 +3681,7 @@\n \t  (not:GPR (match_operand:GPR 2 \"gpc_reg_operand\" \"r,r\"))])\n \t (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    %q3. %0,%1,%2\n    #\"\n@@ -3725,7 +3704,7 @@\n \t (const_int 0)))\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(match_dup 3))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    %q3. %0,%1,%2\n    #\"\n@@ -3775,7 +3754,6 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[3]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && rs6000_is_valid_shift_mask (operands[3], operands[4], <MODE>mode)\"\n {\n   if (which_alternative == 0)\n@@ -3808,7 +3786,6 @@\n \t(and:GPR (match_dup 4)\n \t\t (match_dup 3)))]\n   \"(<MODE>mode == Pmode || UINTVAL (operands[3]) <= 0x7fffffff)\n-   && rs6000_gen_cell_microcode\n    && rs6000_is_valid_shift_mask (operands[3], operands[4], <MODE>mode)\"\n {\n   if (which_alternative == 0)\n@@ -4065,7 +4042,7 @@\n \t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    rotl<wd>%I2. %0,%1,%<hH>2\n    #\"\n@@ -4090,7 +4067,7 @@\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(rotate:GPR (match_dup 1)\n \t\t    (match_dup 2)))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    rotl<wd>%I2. %0,%1,%<hH>2\n    #\"\n@@ -4133,7 +4110,7 @@\n \t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    sl<wd>%I2. %0,%1,%<hH>2\n    #\"\n@@ -4158,7 +4135,7 @@\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ashift:GPR (match_dup 1)\n \t\t    (match_dup 2)))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    sl<wd>%I2. %0,%1,%<hH>2\n    #\"\n@@ -4322,7 +4299,7 @@\n \t\t\t\t  (match_operand:SI 2 \"reg_or_cint_operand\" \"rn,rn\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    sr<wd>%I2. %0,%1,%<hH>2\n    #\"\n@@ -4347,7 +4324,7 @@\n    (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n \t(lshiftrt:GPR (match_dup 1)\n \t\t      (match_dup 2)))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    sr<wd>%I2. %0,%1,%<hH>2\n    #\"\n@@ -4393,7 +4370,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:GPR 0 \"=r,r\"))\n    (clobber (reg:GPR CA_REGNO))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    sra<wd>%I2. %0,%1,%<hH>2\n    #\"\n@@ -4420,7 +4397,7 @@\n \t(ashiftrt:GPR (match_dup 1)\n \t\t      (match_dup 2)))\n    (clobber (reg:GPR CA_REGNO))]\n-  \"<MODE>mode == Pmode && rs6000_gen_cell_microcode\"\n+  \"<MODE>mode == Pmode\"\n   \"@\n    sra<wd>%I2. %0,%1,%<hH>2\n    #\"\n@@ -7061,10 +7038,10 @@\n    (set_attr \"length\" \"4,4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (match_operand:P 1 \"gpc_reg_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\")\n+\t(compare:CC (match_operand:P 1 \"gpc_reg_operand\")\n \t\t    (const_int 0)))\n-   (set (match_operand:P 0 \"gpc_reg_operand\" \"\") (match_dup 1))]\n+   (set (match_operand:P 0 \"gpc_reg_operand\") (match_dup 1))]\n   \"reload_completed\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2)\n@@ -9610,8 +9587,7 @@\n \t\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\n-   && !avoiding_indexed_address_p (DImode)\"\n+  \"TARGET_POWERPC64 && !avoiding_indexed_address_p (DImode)\"\n   \"lwaux %3,%0,%2\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"sign_extend\" \"yes\")\n@@ -9692,9 +9668,9 @@\n \t\t\t  (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE && rs6000_gen_cell_microcode\n-   && (!avoiding_indexed_address_p (SImode)\n-       || !gpc_reg_operand (operands[2], SImode))\"\n+  \"TARGET_UPDATE\n+   && !(avoiding_indexed_address_p (SImode)\n+\t&& gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lhaux %3,%0,%2\n    lhau %3,%2(%0)\"\n@@ -12300,14 +12276,14 @@\n    (set_attr \"length\" \"8,16\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\")\n \t(compare:CC\n \t (ashift:SI (match_operator:SI 1 \"scc_comparison_operator\"\n-\t\t\t\t       [(match_operand 2 \"cc_reg_operand\" \"\")\n+\t\t\t\t       [(match_operand 2 \"cc_reg_operand\")\n \t\t\t\t\t(const_int 0)])\n-\t\t    (match_operand:SI 3 \"const_int_operand\" \"\"))\n+\t\t    (match_operand:SI 3 \"const_int_operand\"))\n \t (const_int 0)))\n-   (set (match_operand:SI 4 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:SI 4 \"gpc_reg_operand\")\n \t(ashift:SI (match_op_dup 1 [(match_dup 2) (const_int 0)])\n \t\t   (match_dup 3)))]\n   \"reload_completed\""}, {"sha": "fdac5c733fc04fdb31e81b74874370e4f0dacab3", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -441,13 +441,9 @@ mlongcall\n Target Report Var(rs6000_default_long_calls) Save\n Avoid all range limits on call instructions.\n \n+; This option existed in the past, but now is always on.\n mgen-cell-microcode\n-Target Report Var(rs6000_gen_cell_microcode) Init(-1) Save\n-Generate Cell microcode.\n-\n-mwarn-cell-microcode\n-Target Var(rs6000_warn_cell_microcode) Init(0) Warning Save\n-Warn when a Cell microcoded instruction is emitted.\n+Target RejectNegative Undocumented Ignore\n \n mwarn-altivec-long\n Target Var(rs6000_warn_altivec_long) Init(1) Save"}, {"sha": "612bd12a1bda24be5c266ad460ecfc86015fb455", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -1023,7 +1023,6 @@ See RS/6000 and PowerPC Options.\n -mspe  -mno-spe @gol\n -mspe=yes  -mspe=no @gol\n -mpaired @gol\n--mgen-cell-microcode  -mwarn-cell-microcode @gol\n -mvrsave  -mno-vrsave @gol\n -mmulhw  -mno-mulhw @gol\n -mdlmzb  -mno-dlmzb @gol\n@@ -21281,15 +21280,6 @@ corresponding to the endianness for the target.\n @opindex mno-vrsave\n Generate VRSAVE instructions when generating AltiVec code.\n \n-@item -mgen-cell-microcode\n-@opindex mgen-cell-microcode\n-Generate Cell microcode instructions.\n-\n-@item -mwarn-cell-microcode\n-@opindex mwarn-cell-microcode\n-Warn when a Cell microcode instruction is emitted.  An example\n-of a Cell microcode instruction is a variable shift.\n-\n @item -msecure-plt\n @opindex msecure-plt\n Generate code that allows @command{ld} and @command{ld.so}"}, {"sha": "ee302e4b455914959b61a3f74ba19c5c20d876a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -1,3 +1,9 @@\n+2017-05-30  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/shift-dot.c: Delete -mgen-cell-microcode from\n+\tdg-options.\n+\t* gfortran.dg/pr80107.f: Delete testcase.\n+\n 2017-05-30  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/80833"}, {"sha": "726b7a9ebada173cc7659aa27ff89e92f77677aa", "filename": "gcc/testsuite/gcc.target/powerpc/shift-dot.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fshift-dot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8efe25d65ce84369573301df1520ba589a5faa/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fshift-dot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fshift-dot.c?ref=3f8efe25d65ce84369573301df1520ba589a5faa", "patch": "@@ -1,7 +1,7 @@\n /* Check that record-form instructions are used.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mgen-cell-microcode\" } */\n+/* { dg-options \"-O2\" } */\n \n /* { dg-final { scan-assembler-times {\\mrotl[wd]\\.} 2 } } */\n /* { dg-final { scan-assembler-times {\\msl[wd]\\.} 2 } } */"}, {"sha": "541fba8cd9547cee1a2e1f8d83cfb73a4ad6fd4c", "filename": "gcc/testsuite/gfortran.dg/pr80107.f", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c28dd4ba5bc2fe9141f44aeed7d59a07012018/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr80107.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c28dd4ba5bc2fe9141f44aeed7d59a07012018/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr80107.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr80107.f?ref=98c28dd4ba5bc2fe9141f44aeed7d59a07012018", "patch": "@@ -1,6 +0,0 @@\n-! { dg-do compile { target { powerpc*-*-* } } }\n-! { dg-options \"-O0 -mpower9-dform-vector -mno-gen-cell-microcode\" }\n-\n-      integer(kind=2) j, j2, ja\n-      call c_c(CMPLX(j),(1.,0.),'CMPLX(integer(2))')\n-      end"}]}