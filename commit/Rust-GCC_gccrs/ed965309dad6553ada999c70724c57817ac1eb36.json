{"sha": "ed965309dad6553ada999c70724c57817ac1eb36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5NjUzMDlkYWQ2NTUzYWRhOTk5YzcwNzI0YzU3ODE3YWMxZWIzNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-02-23T08:58:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-02-23T08:58:22Z"}, "message": "[multiple changes]\n\n2006-02-23  Jakub Jelinek  <jakub@redhat.com>\n\n\t* configure.ac: Add --with{,out}-long-double-128 configure option.\n\t(TARGET_DEFAULT_LONG_DOUBLE_128): New test.\n\t* configure: Rebuilt.\n\t* config.in: Rebuilt.\n\t* doc/install.texi (Options specification): Document\n\t--with-long-double-128.\n\n\t* config/rs6000/linux.h [TARGET_DEFAULT_LONG_DOUBLE_128]\n\t(RS6000_DEFAULT_LONG_DOUBLE_SIZE): Define to 128.\n\t* config/rs6000/linux64.h [TARGET_DEFAULT_LONG_DOUBLE_128]\n\t(RS6000_DEFAULT_LONG_DOUBLE_SIZE): Define to 128.\n\n2006-02-23  Aldy Hernandez  <aldyh@redhat.com>\n\n\t* config/s390/s390.c (override_options): Handle\n\tTARGET_DEFAULT_LONG_DOUBLE_128.\n\n\t* config/alpha/alpha.c (override_options): Handle\n\tTARGET_DEFAULT_LONG_DOUBLE_128.\n\n\t* config/sparc/sparc.c (sparc_override_options): Handle\n\tTARGET_DEFAULT_LONG_DOUBLE_128.\n\nFrom-SVN: r111381", "tree": {"sha": "88bb99ad558cf709fbf8381f220ed61566198f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88bb99ad558cf709fbf8381f220ed61566198f97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed965309dad6553ada999c70724c57817ac1eb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed965309dad6553ada999c70724c57817ac1eb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed965309dad6553ada999c70724c57817ac1eb36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed965309dad6553ada999c70724c57817ac1eb36/comments", "author": null, "committer": null, "parents": [{"sha": "29b1a829ad808af23cf04ddded483b3c42fe37b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b1a829ad808af23cf04ddded483b3c42fe37b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b1a829ad808af23cf04ddded483b3c42fe37b4"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "2b327b91115b2ccfb4f3de3f15a70442612a780d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -1,3 +1,28 @@\n+2006-02-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Add --with{,out}-long-double-128 configure option.\n+\t(TARGET_DEFAULT_LONG_DOUBLE_128): New test.\n+\t* configure: Rebuilt.\n+\t* config.in: Rebuilt.\n+\t* doc/install.texi (Options specification): Document\n+\t--with-long-double-128.\n+\n+\t* config/rs6000/linux.h [TARGET_DEFAULT_LONG_DOUBLE_128]\n+\t(RS6000_DEFAULT_LONG_DOUBLE_SIZE): Define to 128.\n+\t* config/rs6000/linux64.h [TARGET_DEFAULT_LONG_DOUBLE_128]\n+\t(RS6000_DEFAULT_LONG_DOUBLE_SIZE): Define to 128.\n+\n+2006-02-23  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/s390/s390.c (override_options): Handle\n+\tTARGET_DEFAULT_LONG_DOUBLE_128.\n+\n+\t* config/alpha/alpha.c (override_options): Handle\n+\tTARGET_DEFAULT_LONG_DOUBLE_128.\n+\n+\t* config/sparc/sparc.c (sparc_override_options): Handle\n+\tTARGET_DEFAULT_LONG_DOUBLE_128.\n+\n 2006-02-22  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* Makefile.in (stmp-fixinc): Use real-$(INSTALL_HEADERS_DIR)."}, {"sha": "98e34388dff952ff6df81223bab73de559e451c2", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -1283,6 +1283,12 @@\n #endif\n \n \n+/* Define if TFmode long double should be the default */\n+#ifndef USED_FOR_TARGET\n+#undef TARGET_DEFAULT_LONG_DOUBLE_128\n+#endif\n+\n+\n /* Define if your target C library provides stack protector support */\n #ifndef USED_FOR_TARGET\n #undef TARGET_LIBC_PROVIDES_SSP"}, {"sha": "14d54388e6085badfbfbf46f725bb4e16d9de2bc", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -516,6 +516,11 @@ override_options (void)\n       REAL_MODE_FORMAT (DFmode) = &vax_g_format;\n       REAL_MODE_FORMAT (TFmode) = NULL;\n     }\n+\n+#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n+  if (!(target_flags_explicit & MASK_LONG_DOUBLE_128))\n+    target_flags |= MASK_LONG_DOUBLE_128;\n+#endif\n }\n \f\n /* Returns 1 if VALUE is a mask that contains full bytes of zero or ones.  */"}, {"sha": "3df356fca1aaf3908524046dba09568321f170c0", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -120,3 +120,8 @@\n #endif\n \n #define POWERPC_LINUX\n+\n+/* ppc linux has 128-bit long double support in glibc 2.4 and later.  */\n+#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n+#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 128\n+#endif"}, {"sha": "26f74967929695c06697c9579f3988e906b24c5e", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -584,3 +584,8 @@ while (0)\n #endif\n \n #define POWERPC_LINUX\n+\n+/* ppc{32,64} linux has 128-bit long double support in glibc 2.4 and later.  */\n+#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n+#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 128\n+#endif"}, {"sha": "2ebe8ac009fa881423860165dbf44eea98059060", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -1415,6 +1415,11 @@ override_options (void)\n     }\n   else if (s390_stack_guard)\n     error (\"-mstack-guard implies use of -mstack-size\"); \n+\n+#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n+  if (!(target_flags_explicit & MASK_LONG_DOUBLE_128))\n+    target_flags |= MASK_LONG_DOUBLE_128;\n+#endif\n }\n \n /* Map for smallest class containing reg regno.  */"}, {"sha": "f44c6d0ad19333c39f94eb85c7b893dc56a1ea70", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -791,6 +791,11 @@ sparc_override_options (void)\n       sparc_costs = &ultrasparc3_costs;\n       break;\n     };\n+\n+#ifdef TARGET_DEFAULT_LONG_DOUBLE_128\n+  if (!(target_flags_explicit & MASK_LONG_DOUBLE_128))\n+    target_flags |= MASK_LONG_DOUBLE_128;\n+#endif\n }\n \f\n #ifdef SUBTARGET_ATTRIBUTE_TABLE"}, {"sha": "b07c28610cf394c01793868b4ca6169f65f2787a", "filename": "gcc/configure", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -932,6 +932,7 @@ Optional Packages:\n   --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib\n   --without-libiconv-prefix     don't search for libiconv in includedir and libdir\n   --with-system-libunwind use installed libunwind\n+  --with-long-double-128  Use 128-bit long double by default.\n   --with-gc={page,zone}   choose the garbage collection mechanism to use\n                           with the compiler\n   --with-system-zlib      use installed libz\n@@ -7612,7 +7613,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7615: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7616: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[4-9]*)\n@@ -15675,6 +15676,46 @@ _ACEOF\n \n fi\n \n+# Check if TFmode long double should be used by default or not.\n+# Some glibc targets used DFmode long double, but with glibc 2.4\n+# and later they can use TFmode.\n+case \"$target\" in\n+  powerpc*-*-*gnu* | \\\n+  sparc*-*-linux* | \\\n+  s390*-*-linux* | \\\n+  alpha*-*-linux*)\n+\n+# Check whether --with-long-double-128 or --without-long-double-128 was given.\n+if test \"${with_long_double_128+set}\" = set; then\n+  withval=\"$with_long_double_128\"\n+  gcc_cv_target_ldbl128=\"$with_long_double_128\"\n+else\n+  gcc_cv_target_ldbl128=no\n+      if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n+\tif test \"x$with_sysroot\" = x; then\n+\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n+\telif test \"x$with_sysroot\" = xyes; then\n+\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n+\telse\n+\t  glibc_header_dir=\"${with_sysroot}/usr/include\"\n+\tfi\n+      else\n+\tglibc_header_dir=/usr/include\n+      fi\n+      grep '^ \t*#[ \t]*define[ \t][ \t]*__LONG_DOUBLE_MATH_OPTIONAL' \\\n+        $glibc_header_dir/bits/wordsize.h > /dev/null 2>&1 \\\n+      && gcc_cv_target_ldbl128=yes\n+fi;\n+    ;;\n+esac\n+if test x$gcc_cv_target_ldbl128 = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define TARGET_DEFAULT_LONG_DOUBLE_128 1\n+_ACEOF\n+\n+fi\n+\n # Find out what GC implementation we want, or may, use.\n \n # Check whether --with-gc or --without-gc was given."}, {"sha": "1b8feabd60de317b99a736233c42b01f34eef364", "filename": "gcc/configure.ac", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -3176,6 +3176,39 @@ if test x$gcc_cv_libc_provides_ssp = xyes; then\n \t    [Define if your target C library provides stack protector support])\n fi\n \n+# Check if TFmode long double should be used by default or not.\n+# Some glibc targets used DFmode long double, but with glibc 2.4\n+# and later they can use TFmode.\n+case \"$target\" in\n+  powerpc*-*-*gnu* | \\\n+  sparc*-*-linux* | \\\n+  s390*-*-linux* | \\\n+  alpha*-*-linux*)\n+    AC_ARG_WITH(long-double-128,\n+[  --with-long-double-128  Use 128-bit long double by default.],\n+      gcc_cv_target_ldbl128=\"$with_long_double_128\",\n+      [gcc_cv_target_ldbl128=no\n+      if test x$host != x$target || test \"x$TARGET_SYSTEM_ROOT\" != x; then\n+\tif test \"x$with_sysroot\" = x; then\n+\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-include\"\n+\telif test \"x$with_sysroot\" = xyes; then\n+\t  glibc_header_dir=\"${exec_prefix}/${target_noncanonical}/sys-root/usr/include\"\n+\telse\n+\t  glibc_header_dir=\"${with_sysroot}/usr/include\"\n+\tfi\n+      else\n+\tglibc_header_dir=/usr/include\n+      fi\n+      grep '^[ \t]*#[ \t]*define[ \t][ \t]*__LONG_DOUBLE_MATH_OPTIONAL' \\\n+        $glibc_header_dir/bits/wordsize.h > /dev/null 2>&1 \\\n+      && gcc_cv_target_ldbl128=yes])\n+    ;;\n+esac\n+if test x$gcc_cv_target_ldbl128 = xyes; then\n+  AC_DEFINE(TARGET_DEFAULT_LONG_DOUBLE_128, 1,\n+\t    [Define if TFmode long double should be the default])\n+fi\n+\n # Find out what GC implementation we want, or may, use.\n AC_ARG_WITH(gc,\n [  --with-gc={page,zone}   choose the garbage collection mechanism to use"}, {"sha": "11da1c809762fc32e3038ddf7418769a9788d85c", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed965309dad6553ada999c70724c57817ac1eb36/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=ed965309dad6553ada999c70724c57817ac1eb36", "patch": "@@ -1259,6 +1259,14 @@ extension.  This is enabled by default only on PowerPC GNU/Linux\n systems.  Other systems may also support it, but require the user to\n specifically enable it.\n \n+@item --with-long-double-128\n+Specify if @code{long double} type should be 128-bit by default on selected\n+GNU/Linux architectures.  If using @code{--without-long-double-128},\n+@code{long double} will be by default 64-bit, the same as @code{double} type.\n+When neither of these configure options are used, the default will be\n+128-bit @code{long double} when built against GNU C Library 2.4 and later,\n+64-bit @code{long double} otherwise.\n+\n @end table\n \n @subheading Cross-Compiler-Specific Options"}]}