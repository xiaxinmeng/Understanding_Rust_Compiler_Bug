{"sha": "c64de75f40ec7f27630860a2950da995fff3771a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY0ZGU3NWY0MGVjN2YyNzYzMDg2MGEyOTUwZGE5OTVmZmYzNzcxYQ==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-06-29T21:01:29Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2005-06-29T21:01:29Z"}, "message": "darwin.c (machopic_select_section): constant ObjC string objects now always have type \"__builtin_ObjCString\".\n\n[gcc/ChangeLog]\n2005-06-29  Ziemowit Laski  <zlaski@apple.com>\n\n        * config/darwin.c (machopic_select_section): constant ObjC string\n        objects now always have type \"__builtin_ObjCString\".\n\n[gcc/objc/ChangeLog]\n2005-06-29  Ziemowit Laski  <zlaski@apple.com>\n\n        * objc-act.c (objc_build_internal_const_str_type): New function.\n        (check_string_class_template): Use objc_get_class_ivars() instead\n        of TYPE_FIELDS() to retrieve ivar list.\n        (AT_LEAST_AS_LARGE_AS): Check the size of each field's type rather\n        than the field itself.\n        (objc_build_string_object): Synthesize a \"__builtin_ObjCString\"\n        type and use it to lay out compile-time string objects.\n        * objc-act.h (OCTI_INTERNAL_CNST_STR_TYPE, internal_const_str_type):\n        New.\n\n[gcc/testsuite/ChangeLog]\n2005-06-29  Ziemowit Laski  <zlaski@apple.com>\n\n        * obj-c++.dg/const-str-1[0-1].mm: New.\n        * objc.dg/const-str-1[0-1].m: New.\n\nFrom-SVN: r101437", "tree": {"sha": "6eb42b09d8fffee909d4e2a323a1040fbd7da55c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb42b09d8fffee909d4e2a323a1040fbd7da55c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c64de75f40ec7f27630860a2950da995fff3771a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64de75f40ec7f27630860a2950da995fff3771a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64de75f40ec7f27630860a2950da995fff3771a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64de75f40ec7f27630860a2950da995fff3771a/comments", "author": null, "committer": null, "parents": [{"sha": "d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5dfe0b8c26fbe6a76765713dc3c37aea01d9b26"}], "stats": {"total": 191, "additions": 176, "deletions": 15}, "files": [{"sha": "ed408afbd1a1e72b74ff0326f83087e4c6e57c50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -1,3 +1,8 @@\n+2005-06-29  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* config/darwin.c (machopic_select_section): constant ObjC string\n+\tobjects now always have type \"__builtin_ObjCString\".\n+\n 2005-06-29  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (vec_shl_<VEC>, vec_shr_<VEC>): New."}, {"sha": "cac61e403c9ac12b5e022d3517eaeaf82cac775f", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -1048,10 +1048,14 @@ machopic_select_section (tree exp, int reloc,\n       tree name = TYPE_NAME (TREE_TYPE (exp));\n       if (TREE_CODE (name) == TYPE_DECL)\n \tname = DECL_NAME (name);\n-      if (!strcmp (IDENTIFIER_POINTER (name), \"NSConstantString\"))\n-\tobjc_constant_string_object_section ();\n-      else if (!strcmp (IDENTIFIER_POINTER (name), \"NXConstantString\"))\n-\tobjc_string_object_section ();\n+\n+      if (!strcmp (IDENTIFIER_POINTER (name), \"__builtin_ObjCString\"))\n+\t{\n+\t  if (flag_next_runtime)\n+\t    objc_constant_string_object_section ();\n+\t  else\n+\t    objc_string_object_section ();\n+\t}\n       else\n \tbase_function ();\n     }"}, {"sha": "a11966ea7afe75e4f5e107bc178b7aa3d8294f4d", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -1,3 +1,15 @@\n+2005-06-29  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc-act.c (objc_build_internal_const_str_type): New function.\n+\t(check_string_class_template): Use objc_get_class_ivars() instead\n+\tof TYPE_FIELDS() to retrieve ivar list.\n+\t(AT_LEAST_AS_LARGE_AS): Check the size of each field's type rather\n+\tthan the field itself.\n+\t(objc_build_string_object): Synthesize a \"__builtin_ObjCString\"\n+\ttype and use it to lay out compile-time string objects.\n+\t* objc-act.h (OCTI_INTERNAL_CNST_STR_TYPE, internal_const_str_type):\n+\tNew.\n+\n 2005-06-28  Paul Brook  <paul@codesourcery.com>\n \n \t* objc-act.c (objc_init_exceptions): Call"}, {"sha": "b522b8ddba63565704b6f6631e6475e684960f55", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -814,9 +814,9 @@ objc_build_struct (tree name, tree fields, tree super_name)\n \t     && TREE_CODE (TREE_CHAIN (field)) == FIELD_DECL)\n \tfield = TREE_CHAIN (field);\n \n-      /* For ObjC ABI purposes, the \"packed\" size of a base class is\n-\t the the sum of the offset and the size (in bits) of the last\n-\t field in the class.  */\n+      /* For ObjC ABI purposes, the \"packed\" size of a base class is the\n+\t the sum of the offset and the size (in bits) of the last field\n+\t in the class.  */\n       DECL_SIZE (base)\n \t= (field && TREE_CODE (field) == FIELD_DECL\n \t   ? size_binop (PLUS_EXPR, \n@@ -1707,11 +1707,11 @@ synth_module_prologue (void)\n static int\n check_string_class_template (void)\n {\n-  tree field_decl = TYPE_FIELDS (constant_string_type);\n+  tree field_decl = objc_get_class_ivars (constant_string_id);\n \n #define AT_LEAST_AS_LARGE_AS(F, T) \\\n   (F && TREE_CODE (F) == FIELD_DECL \\\n-     && (TREE_INT_CST_LOW (DECL_SIZE (F)) \\\n+     && (TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (F))) \\\n \t >= TREE_INT_CST_LOW (TYPE_SIZE (T))))\n \n   if (!AT_LEAST_AS_LARGE_AS (field_decl, ptr_type_node))\n@@ -1730,6 +1730,27 @@ check_string_class_template (void)\n /* Avoid calling `check_string_class_template ()' more than once.  */\n static GTY(()) int string_layout_checked;\n \n+/* Construct an internal string layout to be used as a template for\n+   creating NSConstantString/NXConstantString instances.  */\n+\n+static tree\n+objc_build_internal_const_str_type (void)\n+{\n+  tree type = (*lang_hooks.types.make_type) (RECORD_TYPE);\n+  tree fields = build_decl (FIELD_DECL, NULL_TREE, ptr_type_node);\n+  tree field = build_decl (FIELD_DECL, NULL_TREE, ptr_type_node);\n+\n+  TREE_CHAIN (field) = fields; fields = field;\n+  field = build_decl (FIELD_DECL, NULL_TREE, unsigned_type_node);\n+  TREE_CHAIN (field) = fields; fields = field;\n+  /* NB: The finish_builtin_struct() routine expects FIELD_DECLs in\n+     reverse order!  */\n+  finish_builtin_struct (type, \"__builtin_ObjCString\",\n+\t\t\t fields, NULL_TREE);\n+\n+  return type;\n+}\n+\n /* Custom build_string which sets TREE_TYPE!  */\n \n static tree\n@@ -1802,6 +1823,7 @@ objc_build_string_object (tree string)\n     {\n       string_layout_checked = -1;\n       constant_string_class = lookup_interface (constant_string_id);\n+      internal_const_str_type = objc_build_internal_const_str_type ();\n \n       if (!constant_string_class\n \t  || !(constant_string_type\n@@ -1838,9 +1860,9 @@ objc_build_string_object (tree string)\n       *loc = desc = ggc_alloc (sizeof (*desc));\n       desc->literal = string;\n \n-      /* GNU:    & ((NXConstantString) { NULL, string, length })  */\n-      /* NeXT:   & ((NSConstantString) { isa, string, length })   */\n-      fields = TYPE_FIELDS (constant_string_type);\n+      /* GNU:    (NXConstantString *) & ((__builtin_ObjCString) { NULL, string, length })  */\n+      /* NeXT:   (NSConstantString *) & ((__builtin_ObjCString) { isa, string, length })   */\n+      fields = TYPE_FIELDS (internal_const_str_type);\n       initlist\n \t= build_tree_list (fields,\n \t\t\t   flag_next_runtime\n@@ -1852,13 +1874,13 @@ objc_build_string_object (tree string)\n       fields = TREE_CHAIN (fields);\n       initlist = tree_cons (fields, build_int_cst (NULL_TREE, length),\n  \t\t\t    initlist);\n-      constructor = objc_build_constructor (constant_string_type,\n+      constructor = objc_build_constructor (internal_const_str_type,\n \t\t\t\t\t    nreverse (initlist));\n       TREE_INVARIANT (constructor) = true;\n \n       if (!flag_next_runtime)\n \tconstructor\n-\t  = objc_add_static_instance (constructor, constant_string_type);\n+\t  = objc_add_static_instance (constructor, internal_const_str_type);\n       else\n         {\n \t  var = build_decl (CONST_DECL, NULL, TREE_TYPE (constructor));\n@@ -1870,7 +1892,8 @@ objc_build_string_object (tree string)\n       desc->constructor = constructor;\n     }\n \n-  addr = build_unary_op (ADDR_EXPR, desc->constructor, 1);\n+  addr = convert (build_pointer_type (constant_string_type),\n+\t\t  build_unary_op (ADDR_EXPR, desc->constructor, 1));\n \n   return addr;\n }"}, {"sha": "dc62862673a58012289123f6b4a2744b56b3065b", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -263,6 +263,7 @@ enum objc_tree_index\n     OCTI_CNST_STR_TYPE,\n     OCTI_CNST_STR_GLOB_ID,\n     OCTI_STRING_CLASS_DECL,\n+    OCTI_INTERNAL_CNST_STR_TYPE,\n     OCTI_SUPER_DECL,\n     OCTI_UMSG_NONNIL_DECL,\n     OCTI_UMSG_NONNIL_STRET_DECL,\n@@ -450,6 +451,7 @@ extern GTY(()) tree objc_global_trees[OCTI_MAX];\n #define constant_string_global_id\t\t\\\n \t\t\t\tobjc_global_trees[OCTI_CNST_STR_GLOB_ID]\n #define string_class_decl\tobjc_global_trees[OCTI_STRING_CLASS_DECL]\n+#define internal_const_str_type\tobjc_global_trees[OCTI_INTERNAL_CNST_STR_TYPE]\n #define UOBJC_SUPER_decl\tobjc_global_trees[OCTI_SUPER_DECL]\n \n #endif /* GCC_OBJC_ACT_H */"}, {"sha": "0ba3b14ba23e55fd84e56a74b950d1dc113bb016", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -1,3 +1,8 @@\n+2005-06-29  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* obj-c++.dg/const-str-1[0-1].mm: New.\n+\t* objc.dg/const-str-1[0-1].m: New.\n+\n 2005-05-29  Richard Henderson  <rth@redhat.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_no_int_max):"}, {"sha": "4efe044c13e35dac87b42ef0048382cf4d355d20", "filename": "gcc/testsuite/obj-c++.dg/const-str-10.mm", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-10.mm?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -0,0 +1,28 @@\n+/* Test if ObjC constant string layout is checked properly, regardless of how\n+   constant string classes get derived.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-options \"-fnext-runtime\" } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#include <objc/Object.h>\n+\n+@interface NSString: Object\n+@end\n+\n+@interface NSSimpleCString : NSString {\n+@protected\n+    char *bytes;\n+    unsigned int numBytes;\n+}\n+@end\n+    \n+@interface NSConstantString : NSSimpleCString\n+@end\n+\n+extern struct objc_class _NSConstantStringClassReference;\n+\n+const NSConstantString *appKey = @\"MyApp\";\n+\n+/* { dg-final { scan-assembler \".section __OBJC, __cstring_object\" } } */\n+/* { dg-final { scan-assembler \".long\\t__NSConstantStringClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" } } */"}, {"sha": "3b7ec7ad51f5c38aa82e87dd36ee2cbc3e0d63f1", "filename": "gcc/testsuite/obj-c++.dg/const-str-11.mm", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fconst-str-11.mm?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -0,0 +1,27 @@\n+/* Test if ObjC constant string layout is checked properly, regardless of how\n+   constant string classes get derived.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-options \"-fnext-runtime -fconstant-string-class=XStr\" } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#include <objc/Object.h>\n+\n+@interface XString: Object {\n+@protected\n+    char *bytes;\n+}\n+@end\n+\n+@interface XStr : XString {\n+@public\n+    unsigned int len;\n+}\n+@end\n+\n+extern struct objc_class _XStrClassReference;\n+\n+const XStr *appKey = @\"MyApp\";\n+\n+/* { dg-final { scan-assembler \".section __OBJC, __cstring_object\" } } */\n+/* { dg-final { scan-assembler \".long\\t__XStrClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" } } */"}, {"sha": "4efe044c13e35dac87b42ef0048382cf4d355d20", "filename": "gcc/testsuite/objc.dg/const-str-10.m", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-10.m?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -0,0 +1,28 @@\n+/* Test if ObjC constant string layout is checked properly, regardless of how\n+   constant string classes get derived.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-options \"-fnext-runtime\" } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#include <objc/Object.h>\n+\n+@interface NSString: Object\n+@end\n+\n+@interface NSSimpleCString : NSString {\n+@protected\n+    char *bytes;\n+    unsigned int numBytes;\n+}\n+@end\n+    \n+@interface NSConstantString : NSSimpleCString\n+@end\n+\n+extern struct objc_class _NSConstantStringClassReference;\n+\n+const NSConstantString *appKey = @\"MyApp\";\n+\n+/* { dg-final { scan-assembler \".section __OBJC, __cstring_object\" } } */\n+/* { dg-final { scan-assembler \".long\\t__NSConstantStringClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" } } */"}, {"sha": "3b7ec7ad51f5c38aa82e87dd36ee2cbc3e0d63f1", "filename": "gcc/testsuite/objc.dg/const-str-11.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c64de75f40ec7f27630860a2950da995fff3771a/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-11.m?ref=c64de75f40ec7f27630860a2950da995fff3771a", "patch": "@@ -0,0 +1,27 @@\n+/* Test if ObjC constant string layout is checked properly, regardless of how\n+   constant string classes get derived.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-options \"-fnext-runtime -fconstant-string-class=XStr\" } */\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#include <objc/Object.h>\n+\n+@interface XString: Object {\n+@protected\n+    char *bytes;\n+}\n+@end\n+\n+@interface XStr : XString {\n+@public\n+    unsigned int len;\n+}\n+@end\n+\n+extern struct objc_class _XStrClassReference;\n+\n+const XStr *appKey = @\"MyApp\";\n+\n+/* { dg-final { scan-assembler \".section __OBJC, __cstring_object\" } } */\n+/* { dg-final { scan-assembler \".long\\t__XStrClassReference\\n\\t.long\\t.*\\n\\t.long\\t5\\n\\t.data\" } } */"}]}