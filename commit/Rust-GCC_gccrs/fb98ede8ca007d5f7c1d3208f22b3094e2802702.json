{"sha": "fb98ede8ca007d5f7c1d3208f22b3094e2802702", "node_id": "C_kwDOANBUbNoAKGZiOThlZGU4Y2EwMDdkNWY3YzFkMzIwOGYyMmIzMDk0ZTI4MDI3MDI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-21T00:16:46Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-21T00:16:46Z"}, "message": "Daily bump.", "tree": {"sha": "b3452de5842cbdbfdb3c9d6251c9e70651d8c4f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3452de5842cbdbfdb3c9d6251c9e70651d8c4f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb98ede8ca007d5f7c1d3208f22b3094e2802702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb98ede8ca007d5f7c1d3208f22b3094e2802702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb98ede8ca007d5f7c1d3208f22b3094e2802702", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb98ede8ca007d5f7c1d3208f22b3094e2802702/comments", "author": null, "committer": null, "parents": [{"sha": "a16a5460447eaaff0b4468064e4d7b1cc8fc42eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16a5460447eaaff0b4468064e4d7b1cc8fc42eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a16a5460447eaaff0b4468064e4d7b1cc8fc42eb"}], "stats": {"total": 646, "additions": 645, "deletions": 1}, "files": [{"sha": "ffd82a174af24d32050cff8a9fb99cd56830ca0d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,8 @@\n+2022-11-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Temporarily disable\n+\tcheck_line.start.\n+\n 2022-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc-changelog/git_update_version.py: Add"}, {"sha": "89e674917394ab6491e702dcd53746d8d571efe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,122 @@\n+2022-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107183\n+\t* reg-stack.cc (next_flags_user): Add DEBUG_SEEN argument.\n+\tIf >= 0 and a DEBUG_INSN would be otherwise returned, set\n+\tDEBUG_SEEN to 1 and ignore it.\n+\t(swap_rtx_condition): Add DEBUG_SEEN argument.  In >= 0\n+\tmode only set DEBUG_SEEN to 1 if problematic DEBUG_ISNSs\n+\twere seen and revert all changes on success in that case.\n+\tDon't try to recog_memoized DEBUG_INSNs.\n+\t(compare_for_stack_reg): Adjust swap_rtx_condition caller.\n+\tIf it returns true and debug_seen is 1, call swap_rtx_condition\n+\tagain with debug_seen -1.\n+\n+2022-11-20  Jeff Law  <jlaw@ventanamicro.com>\n+\n+\tPR other/104044\n+\t* config/mn10300/mn10300.cc (mn10300_print_operand): Remove\n+\textraneous semicolon.\n+\t* config/nvptx/nvptx.cc (nvptx_goacc_reduction_fini): Likewise.\n+\n+2022-11-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR middle-end/14840\n+\t* tree-core.h (tree_code_type): Constexprify\n+\tby including all-tree.def.\n+\t(tree_code_length): Likewise.\n+\t* tree.cc (tree_code_type): Remove.\n+\t(tree_code_length): Remove.\n+\n+2022-11-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.h (STARTFILE_SPEC): Fix 'crt0.o' for\n+\t'-mmainkernel'.\n+\n+2022-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\t    LIU Hao  <lh_mouse@126.com>\n+\n+\t* system.h [INCLUDE_MUTEX]: Include header for std::mutex.\n+\n+2022-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107628\n+\t* config/i386/i386-protos.h (ix86_expand_fast_convert_bf_to_sf):\n+\tDeclare.\n+\t* config/i386/i386-expand.cc (ix86_expand_fast_convert_bf_to_sf): New\n+\tfunction.\n+\t* config/i386/i386.md (cbranchbf4, cstorebf4): Use it.\n+\n+2022-11-19  Jeff Chapman II  <jchapman@lock3software.com>\n+\t    Andrew Sutton   <asutton@lock3software.com>\n+\t    Andrew Marmaduke  <amarmaduke@lock3software.com>\n+\t    Michael Lopez  <mlopez@lock3software.com>\n+\t    Jason Merrill   <jason@redhat.com>\n+\n+\t* doc/invoke.texi: Document contracts flags.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md (*minmax): Additional pattern for\n+\t  min/max against constants that are extension-invariant.\n+\t* config/riscv/iterators.md (minmax_optab): Add an iterator\n+\t  that has only min and max rtl.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md\n+\t(*branch<X:mode>_mask_twobits_equals_singlebit):\n+\tHandle \"if ((a & T) == C)\" using Zbs, when T has 2 bits set and C\n+\thas one\tof these tow bits set.\n+\t* config/riscv/predicates.md (const_twobits_not_arith_operand):\n+\tNew predicate.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md (*<or_optab>i<mode>_extrabit):\n+\tNew pattern for binvi+binvi/xori and bseti+bseti/ori\n+\t(*andi<mode>_extrabit): New pattern for bclri+bclri/andi\n+\t* config/riscv/iterators.md (any_or): Match or and ior\n+\t* config/riscv/predicates.md (const_twobits_operand):\n+\tNew predicate.\n+\t(uimm_extra_bit_operand): New predicate.\n+\t(uimm_extra_bit_or_twobits): New predicate.\n+\t(not_uimm_extra_bit_operand): New predicate.\n+\t(not_uimm_extra_bit_or_nottwobits): New predicate.\n+\t* config/riscv/riscv.h (UIMM_EXTRA_BIT_OPERAND):\n+\tHelper for the uimm_extra_bit_operand and\n+\tnot_uimm_extra_bit_operand predicates.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md: Handle corner-cases for combine\n+\twhen chaining slli(.uw)? + addw\n+\t* config/riscv/riscv-protos.h (riscv_shamt_matches_mask_p):\n+\tDefine prototype.\n+\t* config/riscv/riscv.cc (riscv_shamt_matches_mask_p):\n+\tHelper for evaluating the relationship between two operands.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md: Add a define_split to optimize\n+\t  slliw + addiw + divw into sh[123]add + divw.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/predicates.md (shifted_const_arith_operand): New predicate.\n+\t(uimm_extra_bit_operand): New predicate.\n+\t* config/riscv/riscv.md (*branch<ANYI:mode>_shiftedarith_equals_zero):\n+\tNew pattern.\n+\t(*branch<ANYI:mode>_shiftedmask_equals_zero): New pattern.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/bitmanip.md (*bsetidisi): New pattern.\n+\n+2022-11-18  Richard Purdie  <richard.purdie@linuxfoundation.org>\n+\n+\t* doc/invoke.texi: Document prefix-maps don't affect directives.\n+\n 2022-11-18  Andrew Pinski  <apinski@marvell.com>\n \n \tPR middle-end/107705"}, {"sha": "b4f44f494dc3497eb2caa7d4c1d4e4272f866185", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1 +1 @@\n-20221118\n+20221121"}, {"sha": "48a4392f3b0d0ec5d91c194c74e605ba3b42e7c4", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,92 @@\n+2022-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107582\n+\t* engine.cc (dynamic_call_info_t::update_model): Update the model\n+\tby pushing or pop a frame, rather than by clobbering it with the\n+\tmodel from the exploded_node's state.\n+\n+2022-11-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.cc (is_pipe_call_p): Delete.\n+\t* analyzer.h (is_pipe_call_p): Delete.\n+\t* region-model-impl-calls.cc (call_details::get_location): New.\n+\t(class kf_analyzer_break): New, adapted from\n+\tregion_model::on_stmt_pre.\n+\t(region_model::impl_call_analyzer_describe): Convert to...\n+\t(class kf_analyzer_describe): ...this.\n+\t(region_model::impl_call_analyzer_dump_capacity): Convert to...\n+\t(class kf_analyzer_dump_capacity): ...this.\n+\t(region_model::impl_call_analyzer_dump_escaped): Convert to...\n+\t(class kf_analyzer_dump_escaped): ...this.\n+\t(class kf_analyzer_dump_exploded_nodes): New.\n+\t(region_model::impl_call_analyzer_dump_named_constant): Convert\n+\tto...\n+\t(class kf_analyzer_dump_named_constant): ...this.\n+\t(class dump_path_diagnostic): Move here from region-model.cc.\n+\t(class kf_analyzer_dump_path) New, adapted from\n+\tregion_model::on_stmt_pre.\n+\t(class kf_analyzer_dump_region_model): Likewise.\n+\t(region_model::impl_call_analyzer_eval): Convert to...\n+\t(class kf_analyzer_eval): ...this.\n+\t(region_model::impl_call_analyzer_get_unknown_ptr): Convert to...\n+\t(class kf_analyzer_get_unknown_ptr): ...this.\n+\t(class known_function_accept): Rename to...\n+\t(class kf_accept): ...this.\n+\t(class known_function_bind): Rename to...\n+\t(class kf_bind): ...this.\n+\t(class known_function_connect): Rename to...\n+\t(class kf_connect): ...this.\n+\t(region_model::impl_call_errno_location): Convert to...\n+\t(class kf_errno_location): ...this.\n+\t(class known_function_listen): Rename to...\n+\t(class kf_listen): ...this.\n+\t(region_model::impl_call_pipe): Convert to...\n+\t(class kf_pipe): ...this.\n+\t(region_model::impl_call_putenv): Convert to...\n+\t(class kf_putenv): ...this.\n+\t(region_model::impl_call_operator_new): Convert to...\n+\t(class kf_operator_new): ...this.\n+\t(region_model::impl_call_operator_delete): Convert to...\n+\t(class kf_operator_delete): ...this.\n+\t(class known_function_socket): Rename to...\n+\t(class kf_socket): ...this.\n+\t(register_known_functions): Rename param to KFM.  Break out\n+\texisting known functions into a \"POSIX\" section, and add \"pipe\",\n+\t\"pipe2\", and \"putenv\".  Add debugging functions\n+\t\"__analyzer_break\", \"__analyzer_describe\",\n+\t\"__analyzer_dump_capacity\", \"__analyzer_dump_escaped\",\n+\t\"__analyzer_dump_exploded_nodes\",\n+\t\"__analyzer_dump_named_constant\", \"__analyzer_dump_path\",\n+\t\"__analyzer_dump_region_model\", \"__analyzer_eval\",\n+\t\"__analyzer_get_unknown_ptr\".  Add C++ support functions\n+\t\"operator new\", \"operator new []\", \"operator delete\", and\n+\t\"operator delete []\".\n+\t* region-model.cc (class dump_path_diagnostic): Move to\n+\tregion-model-impl-calls.cc.\n+\t(region_model::on_stmt_pre): Eliminate special-casing of\n+\t\"__analyzer_describe\", \"__analyzer_dump_capacity\",\n+\t\"__analyzer_dump_escaped\", \"__analyzer_dump_named_constant\",\n+\t\"__analyzer_dump_path\", \"__analyzer_dump_region_model\",\n+\t\"__analyzer_eval\", \"__analyzer_break\",\n+\t\"__analyzer_dump_exploded_nodes\", \"__analyzer_get_unknown_ptr\",\n+\t\"__errno_location\", \"pipe\", \"pipe2\", \"putenv\", \"operator new\",\n+\t\"operator new []\", \"operator delete\", \"operator delete []\"\n+\t\"pipe\" and \"pipe2\", handling them instead via the known_functions\n+\tmechanism.\n+\t* region-model.h (call_details::get_location): New decl.\n+\t(region_model::impl_call_analyzer_describe): Delete decl.\n+\t(region_model::impl_call_analyzer_dump_capacity): Delete decl.\n+\t(region_model::impl_call_analyzer_dump_escaped): Delete decl.\n+\t(region_model::impl_call_analyzer_dump_named_constant): Delete decl.\n+\t(region_model::impl_call_analyzer_eval): Delete decl.\n+\t(region_model::impl_call_analyzer_get_unknown_ptr): Delete decl.\n+\t(region_model::impl_call_errno_location): Delete decl.\n+\t(region_model::impl_call_pipe): Delete decl.\n+\t(region_model::impl_call_putenv): Delete decl.\n+\t(region_model::impl_call_operator_new): Delete decl.\n+\t(region_model::impl_call_operator_delete): Delete decl.\n+\t* sm-fd.cc: Update comments.\n+\n 2022-11-16  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/107711"}, {"sha": "b34115b8223ac55e66e6d6344b61edfdd8b53acc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,18 @@\n+2022-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Bump __cpp_constexpr\n+\tvalue from 202207L to 202211L.\n+\n+2022-11-19  Jeff Chapman II  <jchapman@lock3software.com>\n+\t    Andrew Sutton   <asutton@lock3software.com>\n+\t    Andrew Marmaduke  <amarmaduke@lock3software.com>\n+\t    Michael Lopez  <mlopez@lock3software.com>\n+\t    Jason Merrill   <jason@redhat.com>\n+\n+\t* c.opt: Add contracts flags.\n+\t* c-cppbuiltin.cc (c_cpp_builtins): Add contracts feature-test\n+\tmacros.\n+\n 2022-11-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106649"}, {"sha": "956563898acd487ec2c29cff4436af0bf44d5ac1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,122 @@\n+2022-11-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (struct norm_entry): Define.\n+\t(struct norm_hasher): Define.\n+\t(norm_cache): Define.\n+\t(normalize_concept_check): Add function comment.  Cache the\n+\tthe normal form of the substituted concept-id.  Canonicalize\n+\tgeneric arguments as NULL_TREE.  Don't coerce arguments unless\n+\tthey were substituted.\n+\t(normalize_concept_definition): Simplify.  Use norm_cache\n+\tinstead of normalized_map.\n+\n+2022-11-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.cc (coerce_template_parms): Salvage part of the function\n+\tcomment from c_innermost_t_p.  Handle parms being a full\n+\ttemplate parameter list.\n+\t(coerce_innermost_template_parms): Remove.\n+\t(lookup_template_class): Use c_t_p instead of c_innermost_t_p.\n+\t(finish_template_variable): Likewise.\n+\t(tsubst_decl): Likewise.\n+\t(instantiate_alias_template): Likewise.\n+\n+2022-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* constexpr.cc (cxx_eval_constant_expression): Implement C++23\n+\tP2647R1 - Permitting static constexpr variables in constexpr functions.\n+\tAllow DECL_EXPRs of decl_constant_var_p static or thread_local vars.\n+\t(potential_constant_expression_1): Similarly, except use\n+\tdecl_maybe_constant_var_p instead of decl_constant_var_p if\n+\tprocessing_template_decl.\n+\n+2022-11-19  Jeff Chapman II  <jchapman@lock3software.com>\n+\t    Andrew Sutton   <asutton@lock3software.com>\n+\t    Andrew Marmaduke  <amarmaduke@lock3software.com>\n+\t    Michael Lopez  <mlopez@lock3software.com>\n+\t    Jason Merrill   <jason@redhat.com>\n+\n+\t* cp-tree.h (enum cp_tree_index): Add\n+\tCPTI_PSEUDO_CONTRACT_VIOLATION.\n+\t(pseudo_contract_violation_type): New macro.\n+\t(struct saved_scope): Add x_processing_contract_condition.\n+\t(processing_contract_condition): New macro.\n+\t(comparing_override_contracts): New variable decl.\n+\t(find_contract): New inline.\n+\t(set_decl_contracts): New inline.\n+\t(get_contract_semantic): New inline.\n+\t(set_contract_semantic): New inline.\n+\t* constexpr.cc (cxx_eval_assert): Split out from...\n+\t(cxx_eval_internal_function): ...here.\n+\t(cxx_eval_constant_expression): Use it for contracts.\n+\t(potential_constant_expression_1): Handle contracts.\n+\t* cp-gimplify.cc (cp_genericize_r): Handle contracts.\n+\t* cp-objcp-common.cc (cp_tree_size): Handle contracts.\n+\t(cp_common_init_ts): Handle contracts.\n+\t(cp_handle_option): Handle contracts.\n+\t* decl.cc (duplicate_decls): Handle contracts.\n+\t(check_tag_decl): Check for bogus contracts.\n+\t(start_decl): Check flag_contracts.\n+\t(grokfndecl): Call rebuild_postconditions.\n+\t(grokdeclarator): Handle contract attributes.\n+\t(start_preparsed_function): Call start_function_contracts.\n+\t(finish_function): Call finish_function_contracts.\n+\t* decl2.cc (cp_check_const_attributes): Skip contracts.\n+\t(comdat_linkage): Handle outlined contracts.\n+\t* error.cc (dump_type): Handle null TYPE_IDENTIFIER.\n+\t* g++spec.cc (EXPERIMENTAL): New macro.\n+\t(lang_specific_driver): Add -lstdc++exp if -fcontracts.\n+\t* mangle.cc (write_encoding): Handle outlined contracts.\n+\t* module.cc (trees_out::fn_parms_init): Handle outlined contracts.\n+\t(trees_in::fn_parms_init): Likewise.\n+\t(check_mergeable_decl): Likewise.\n+\t(module_state_config::get_dialect): Record -fcontracts.\n+\t* parser.h (struct cp_unparsed_functions_entry): Add contracts.\n+\t* parser.cc (unparsed_contracts): New macro.\n+\t(push_unparsed_function_queues): Adjust.\n+\t(contract_attribute_p): New.\n+\t(cp_parser_statement): Check contracts.\n+\t(cp_parser_decl_specifier_seq): Handle contracts.\n+\t(cp_parser_skip_to_closing_square_bracket): Split out...\n+\t(cp_parser_skip_up_to_closing_square_bracket): ...this fn.\n+\t(cp_parser_class_specifier): Do contract late parsing.\n+\t(cp_parser_class_head): Check contracts.\n+\t(cp_parser_contract_role): New.\n+\t(cp_parser_contract_mode_opt): New.\n+\t(find_error, contains_error_p): New.\n+\t(cp_parser_contract_attribute_spec): New.\n+\t(cp_parser_late_contract_condition): New.\n+\t(cp_parser_std_attribute_spec): Handle contracts.\n+\t(cp_parser_save_default_args): Also save contracts.\n+\t* pt.cc (register_parameter_specializations): No longer static.\n+\t(register_local_identity): New.\n+\t(check_explicit_specialization): Call remove_contract_attributes.\n+\t(tsubst_contract, tsubst_contract_attribute): New.\n+\t(tsubst_contract_attributes): New.\n+\t(tsubst_attribute): Add comment.\n+\t(tsubst_copy): Also allow parm when processing_contract_condition.\n+\t(tsubst_expr): Handle contracts.\n+\t(regenerate_decl_from_template): Handle contracts.\n+\t* search.cc (check_final_overrider): Compare contracts.\n+\t* semantics.cc (set_cleanup_locs): Skip POSTCONDITION_STMT.\n+\t(finish_non_static_data_member): Check contracts.\n+\t(finish_this_expr): Check contracts.\n+\t(process_outer_var_ref): Handle contracts.\n+\t(finish_id_expression_1): Handle contracts.\n+\t(apply_deduced_return_type): Adjust contracts.\n+\t* tree.cc (handle_contract_attribute): New.\n+\t(get_innermost_component, is_this_expression): New.\n+\t(comparing_this_references): New.\n+\t(equivalent_member_references): New.\n+\t(cp_tree_equal): Check it.\n+\t* typeck.cc (check_return_expr): Apply contracts.\n+\t* Make-lang.in: Add contracts.o.\n+\t* config-lang.in: Add contracts.cc.\n+\t* cp-tree.def (ASSERTION_STMT, PRECONDITION_STMT)\n+\t(POSTCONDITION_STMT): New.\n+\t* contracts.h: New file.\n+\t* contracts.cc: New file.\n+\n 2022-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.cc (grokdeclarator): Implement"}, {"sha": "2366ce125fee2289761b50da7699fb347cefe560", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,9 @@\n+2022-11-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107576\n+\t* interface.cc (gfc_procedure_use): Reject NULL as actual argument\n+\twhen there is no explicit procedure interface.\n+\n 2022-11-17  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \tPR fortran/99884"}, {"sha": "a46e4a2c459fa57d77fa4b1edc2c55f41a478a70", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,28 @@\n+2022-11-20  Jeff Law  <jlaw@ventanamicro.com>\n+\n+\tPR other/104044\n+\t* jit-playback.cc (playback::lvale::mark_addressable): Remove\n+\textraeous semicolon\n+\n+2022-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\t    LIU Hao  <lh_mouse@126.com>\n+\n+\t* jit-playback.cc (playback::context::scoped_lock): Define RAII\n+\tlock type.\n+\t(playback::context::compile): Use scoped_lock to acquire mutex\n+\tfor the active playback context.\n+\t(jit_mutex): Change to std::mutex.\n+\t(playback::context::acquire_mutex): Rename to ...\n+\t(playback::context::lock): ... this.\n+\t(playback::context::release_mutex): Rename to ...\n+\t(playback::context::unlock): ... this.\n+\t* jit-playback.h (playback::context): Rename members and declare\n+\tscoped_lock.\n+\t* jit-recording.cc (INCLUDE_PTHREAD_H): Remove unused define.\n+\t* libgccjit.cc (version_mutex): Change to std::mutex.\n+\t(struct jit_version_info): Use std::lock_guard to acquire and\n+\trelease mutex.\n+\n 2022-11-14  Martin Liska  <mliska@suse.cz>\n \n \tRevert:"}, {"sha": "13ef929ae3f0bb05e242ab77370a06f456ee047e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,207 @@\n+2022-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107183\n+\t* gcc.dg/ubsan/pr107183.c: New test.\n+\n+2022-11-20  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* gcc.dg/pr96542.c: Avoid falsely matching DECL_UIDs with\n+\tthe number 254 in them.\n+\n+2022-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107628\n+\t* gcc.target/i386/pr107628.c: New test.\n+\n+2022-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp23/constexpr-nonlit17.C: New test.\n+\t* g++.dg/cpp23/constexpr-nonlit18.C: New test.\n+\t* g++.dg/cpp23/feat-cxx2b.C: Adjust expected __cpp_constexpr\n+\tvalue.\n+\t* g++.dg/ext/stmtexpr19.C: Don't expect an error.\n+\t* g++.dg/ext/stmtexpr25.C: New test.\n+\n+2022-11-19  Jeff Chapman II  <jchapman@lock3software.com>\n+\t    Andrew Sutton   <asutton@lock3software.com>\n+\t    Andrew Marmaduke  <amarmaduke@lock3software.com>\n+\t    Michael Lopez  <mlopez@lock3software.com>\n+\t    Jason Merrill   <jason@redhat.com>\n+\n+\t* g++.dg/modules/modules.exp: Pass dg-options to link command.\n+\t* lib/g++.exp: Add -L for libstdc++exp.a.\n+\t* g++.dg/contracts/backtrace_handler/assert_fail.cpp: New test.\n+\t* g++.dg/contracts/backtrace_handler/handle_contract_violation.cpp: New test.\n+\t* g++.dg/contracts/contracts-access1.C: New test.\n+\t* g++.dg/contracts/contracts-assume1.C: New test.\n+\t* g++.dg/contracts/contracts-assume2.C: New test.\n+\t* g++.dg/contracts/contracts-assume3.C: New test.\n+\t* g++.dg/contracts/contracts-assume4.C: New test.\n+\t* g++.dg/contracts/contracts-assume5.C: New test.\n+\t* g++.dg/contracts/contracts-assume6.C: New test.\n+\t* g++.dg/contracts/contracts-comdat1.C: New test.\n+\t* g++.dg/contracts/contracts-config1.C: New test.\n+\t* g++.dg/contracts/contracts-constexpr1.C: New test.\n+\t* g++.dg/contracts/contracts-constexpr2.C: New test.\n+\t* g++.dg/contracts/contracts-constexpr3.C: New test.\n+\t* g++.dg/contracts/contracts-conversion1.C: New test.\n+\t* g++.dg/contracts/contracts-ctor-dtor1.C: New test.\n+\t* g++.dg/contracts/contracts-ctor-dtor2.C: New test.\n+\t* g++.dg/contracts/contracts-cv1.C: New test.\n+\t* g++.dg/contracts/contracts-deduced1.C: New test.\n+\t* g++.dg/contracts/contracts-deduced2.C: New test.\n+\t* g++.dg/contracts/contracts-friend1.C: New test.\n+\t* g++.dg/contracts/contracts-ft1.C: New test.\n+\t* g++.dg/contracts/contracts-ignore1.C: New test.\n+\t* g++.dg/contracts/contracts-ignore2.C: New test.\n+\t* g++.dg/contracts/contracts-large-return.C: New test.\n+\t* g++.dg/contracts/contracts-multiline1.C: New test.\n+\t* g++.dg/contracts/contracts-multiple-inheritance1.C: New test.\n+\t* g++.dg/contracts/contracts-multiple-inheritance2.C: New test.\n+\t* g++.dg/contracts/contracts-nested-class1.C: New test.\n+\t* g++.dg/contracts/contracts-nested-class2.C: New test.\n+\t* g++.dg/contracts/contracts-nocopy1.C: New test.\n+\t* g++.dg/contracts/contracts-override.C: New test.\n+\t* g++.dg/contracts/contracts-post1.C: New test.\n+\t* g++.dg/contracts/contracts-post2.C: New test.\n+\t* g++.dg/contracts/contracts-post3.C: New test.\n+\t* g++.dg/contracts/contracts-post4.C: New test.\n+\t* g++.dg/contracts/contracts-post5.C: New test.\n+\t* g++.dg/contracts/contracts-post6.C: New test.\n+\t* g++.dg/contracts/contracts-pre1.C: New test.\n+\t* g++.dg/contracts/contracts-pre10.C: New test.\n+\t* g++.dg/contracts/contracts-pre2.C: New test.\n+\t* g++.dg/contracts/contracts-pre2a1.C: New test.\n+\t* g++.dg/contracts/contracts-pre2a2.C: New test.\n+\t* g++.dg/contracts/contracts-pre3.C: New test.\n+\t* g++.dg/contracts/contracts-pre4.C: New test.\n+\t* g++.dg/contracts/contracts-pre5.C: New test.\n+\t* g++.dg/contracts/contracts-pre6.C: New test.\n+\t* g++.dg/contracts/contracts-pre7.C: New test.\n+\t* g++.dg/contracts/contracts-pre9.C: New test.\n+\t* g++.dg/contracts/contracts-redecl1.C: New test.\n+\t* g++.dg/contracts/contracts-redecl2.C: New test.\n+\t* g++.dg/contracts/contracts-redecl3.C: New test.\n+\t* g++.dg/contracts/contracts-redecl4.C: New test.\n+\t* g++.dg/contracts/contracts-redecl5.C: New test.\n+\t* g++.dg/contracts/contracts-redecl6.C: New test.\n+\t* g++.dg/contracts/contracts-redecl7.C: New test.\n+\t* g++.dg/contracts/contracts-redecl8.C: New test.\n+\t* g++.dg/contracts/contracts-tmpl-attr1.C: New test.\n+\t* g++.dg/contracts/contracts-tmpl-spec1.C: New test.\n+\t* g++.dg/contracts/contracts-tmpl-spec2.C: New test.\n+\t* g++.dg/contracts/contracts-tmpl-spec3.C: New test.\n+\t* g++.dg/contracts/contracts1.C: New test.\n+\t* g++.dg/contracts/contracts10.C: New test.\n+\t* g++.dg/contracts/contracts11.C: New test.\n+\t* g++.dg/contracts/contracts12.C: New test.\n+\t* g++.dg/contracts/contracts13.C: New test.\n+\t* g++.dg/contracts/contracts14.C: New test.\n+\t* g++.dg/contracts/contracts15.C: New test.\n+\t* g++.dg/contracts/contracts16.C: New test.\n+\t* g++.dg/contracts/contracts17.C: New test.\n+\t* g++.dg/contracts/contracts18.C: New test.\n+\t* g++.dg/contracts/contracts19.C: New test.\n+\t* g++.dg/contracts/contracts2.C: New test.\n+\t* g++.dg/contracts/contracts20.C: New test.\n+\t* g++.dg/contracts/contracts22.C: New test.\n+\t* g++.dg/contracts/contracts24.C: New test.\n+\t* g++.dg/contracts/contracts25.C: New test.\n+\t* g++.dg/contracts/contracts3.C: New test.\n+\t* g++.dg/contracts/contracts35.C: New test.\n+\t* g++.dg/contracts/contracts4.C: New test.\n+\t* g++.dg/contracts/contracts5.C: New test.\n+\t* g++.dg/contracts/contracts6.C: New test.\n+\t* g++.dg/contracts/contracts7.C: New test.\n+\t* g++.dg/contracts/contracts8.C: New test.\n+\t* g++.dg/contracts/contracts9.C: New test.\n+\t* g++.dg/modules/contracts-1_a.C: New test.\n+\t* g++.dg/modules/contracts-1_b.C: New test.\n+\t* g++.dg/modules/contracts-2_a.C: New test.\n+\t* g++.dg/modules/contracts-2_b.C: New test.\n+\t* g++.dg/modules/contracts-2_c.C: New test.\n+\t* g++.dg/modules/contracts-3_a.C: New test.\n+\t* g++.dg/modules/contracts-3_b.C: New test.\n+\t* g++.dg/modules/contracts-4_a.C: New test.\n+\t* g++.dg/modules/contracts-4_b.C: New test.\n+\t* g++.dg/modules/contracts-4_c.C: New test.\n+\t* g++.dg/modules/contracts-4_d.C: New test.\n+\t* g++.dg/modules/contracts-tpl-friend-1_a.C: New test.\n+\t* g++.dg/modules/contracts-tpl-friend-1_b.C: New test.\n+\t* g++.dg/contracts/backtrace_handler/Makefile: New test.\n+\t* g++.dg/contracts/backtrace_handler/README: New test.\n+\t* g++.dg/contracts/backtrace_handler/example_out.txt: New test.\n+\t* g++.dg/contracts/backtrace_handler/example_pretty.txt: New test.\n+\t* g++.dg/contracts/backtrace_handler/prettytrace.sh: New test.\n+\t* g++.dg/contracts/except_preload_handler/Makefile: New test.\n+\t* g++.dg/contracts/except_preload_handler/README: New test.\n+\t* g++.dg/contracts/except_preload_handler/assert_fail.cpp: New test.\n+\t* g++.dg/contracts/except_preload_handler/handle_contract_violation.cpp: New test.\n+\t* g++.dg/contracts/noexcept_preload_handler/Makefile: New test.\n+\t* g++.dg/contracts/noexcept_preload_handler/README: New test.\n+\t* g++.dg/contracts/noexcept_preload_handler/assert_fail.cpp: New test.\n+\t* g++.dg/contracts/noexcept_preload_handler/handle_contract_violation.cpp: New test.\n+\t* g++.dg/contracts/preload_handler/Makefile: New test.\n+\t* g++.dg/contracts/preload_handler/README: New test.\n+\t* g++.dg/contracts/preload_handler/assert_fail.cpp: New test.\n+\t* g++.dg/contracts/preload_handler/handle_contract_violation.cpp: New test.\n+\t* g++.dg/contracts/preload_nocontinue_handler/Makefile: New test.\n+\t* g++.dg/contracts/preload_nocontinue_handler/README: New test.\n+\t* g++.dg/contracts/preload_nocontinue_handler/assert_fail.cpp: New test.\n+\t* g++.dg/contracts/preload_nocontinue_handler/handle_contract_violation.cpp: New test.\n+\t* g++.dg/contracts/preload_nocontinue_handler/nocontinue.cpp: New test.\n+\n+2022-11-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107582\n+\t* gcc.dg/analyzer/feasibility-4.c: New test.\n+\t* gcc.dg/analyzer/feasibility-pr107582-1.c: New test.\n+\t* gcc.dg/analyzer/feasibility-pr107582-2.c: New test.\n+\n+2022-11-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/analyzer-debugging-fns-1.c: New test.\n+\t* gcc.dg/analyzer/attr-const-3.c: Increase the\n+\t\"analyzer-max-svalue-depth\" from 0 to 4 to ensure that\n+\t\"__analyzer_eval\" is recognized.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zbb-min-max-02.c: New test.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zbs-if_then_else-01.c: New test.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zbs-bclri.c: Rename\n+\t* gcc.target/riscv/zbs-bclri-01.c: Renamed from above.\n+\t* gcc.target/riscv/zbs-bclri-02.c: New test.\n+\t* gcc.target/riscv/zbs-binvi.c: New test.\n+\t* gcc.target/riscv/zbs-bseti.c: New test.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zba-shNadd-04.c: New test.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zba-shNadd-05.c: New test.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/branch-1.c: New test.\n+\n+2022-11-18  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/zbs-bseti-02.c: New test.\n+\n+2022-11-18  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/107576\n+\t* gfortran.dg/null_actual_3.f90: New test.\n+\n 2022-11-18  Andrew Pinski  <apinski@marvell.com>\n \n \t* gcc.dg/redecl-22.c: New test."}, {"sha": "9236b4407037e9fd3a5a38789f52ee0352f96fd4", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,14 @@\n+2022-11-19  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\tPR preprocessor/107691\n+\t* configure.ac: Add valgrind header checks.\n+\t* configure: Regenerate.\n+\n+2022-11-18  Richard Purdie  <richard.purdie@linuxfoundation.org>\n+\n+\t* macro.cc (_cpp_builtin_macro_text): Don't remap filenames within\n+\tdirectives.\n+\n 2022-11-05  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/55971"}, {"sha": "4e7419ccd7580229b8d303758596b52e1a99f82c", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,16 @@\n+2022-11-19  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/gcn/libgomp-gcn.h: New file; contains\n+\tstruct output, declared previously in plugin-gcn.c.\n+\t* config/gcn/target.c: Include it.\n+\t(GOMP_ADDITIONAL_ICVS): Declare as extern var.\n+\t(GOMP_target_ext): Handle reverse offload.\n+\t* plugin/plugin-gcn.c: Include libgomp-gcn.h.\n+\t(struct kernargs): Replace struct def by the one\n+\tfrom libgomp-gcn.h for output_data.\n+\t(process_reverse_offload): New.\n+\t(console_output): Call it.\n+\n 2022-11-16  Tobias Burnus  <tobias@codesourcery.com>\n \t    Andrew Stubbs  <ams@codesourcery.com>\n "}, {"sha": "f6d5b77f8f04a3c099061b1e256fd2df771a8c40", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98ede8ca007d5f7c1d3208f22b3094e2802702/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98ede8ca007d5f7c1d3208f22b3094e2802702/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb98ede8ca007d5f7c1d3208f22b3094e2802702", "patch": "@@ -1,3 +1,41 @@\n+2022-11-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/std/format: Add std qualification on isxdigit calls.\n+\n+2022-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/range_access.h: Add always_inline attribute to\n+\ttrivial functions.\n+\n+2022-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/format: Fix -Wsign-compare warnings.\n+\n+2022-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ptr_traits.h (pointer_traits::pointer_to): Rename\n+\tparameter.\n+\n+2022-11-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107649\n+\t* include/std/complex (__complex_proj): Fix requires-clause.\n+\n+2022-11-19  Jeff Chapman II  <jchapman@lock3software.com>\n+\t    Andrew Marmaduke  <amarmaduke@lock3software.com>\n+\t    Jason Merrill   <jason@redhat.com>\n+\n+\t* acinclude.m4 (glibcxx_SUBDIRS): Add src/experimental.\n+\t* include/Makefile.am (experimental_headers): Add contract.\n+\t* include/Makefile.in: Regenerate.\n+\t* src/Makefile.am (SUBDIRS): Add experimental.\n+\t* src/Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* src/experimental/contract.cc: New file.\n+\t* src/experimental/Makefile.am: New file.\n+\t* src/experimental/Makefile.in: New file.\n+\t* include/experimental/contract: New file.\n+\n 2022-11-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/107720"}]}