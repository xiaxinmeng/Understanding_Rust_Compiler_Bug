{"sha": "3c4e7c50811511bb73db16d2838262e0355020ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M0ZTdjNTA4MTE1MTFiYjczZGIxNmQyODM4MjYyZTAzNTUwMjBjZQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@merlin.codesourcery.com", "date": "2001-11-01T11:00:57Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-11-01T11:00:57Z"}, "message": "std_complex.h (_Norm_helper): New class template.\n\n       * include/bits/std_complex.h (_Norm_helper): New class template.\n       (norm): Tweak.\n\nFrom-SVN: r46690", "tree": {"sha": "f5f15b1cbc246e5f797a5ca59135a14aa87f1ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5f15b1cbc246e5f797a5ca59135a14aa87f1ce8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c4e7c50811511bb73db16d2838262e0355020ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4e7c50811511bb73db16d2838262e0355020ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4e7c50811511bb73db16d2838262e0355020ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4e7c50811511bb73db16d2838262e0355020ce/comments", "author": null, "committer": null, "parents": [{"sha": "9199347f9a503b2a80c9ea2e74763f5d10f040bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9199347f9a503b2a80c9ea2e74763f5d10f040bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9199347f9a503b2a80c9ea2e74763f5d10f040bd"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "cafd3a0ef9233172be92a6cf7da58213c6d51a4b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4e7c50811511bb73db16d2838262e0355020ce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4e7c50811511bb73db16d2838262e0355020ce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3c4e7c50811511bb73db16d2838262e0355020ce", "patch": "@@ -1,3 +1,8 @@\n+2001-11-01  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+\t* include/bits/std_complex.h (_Norm_helper): New class template.\n+\t(norm): Tweak.\n+\n 2001-10-31  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tlibstdc++/4749"}, {"sha": "fcd8c4db2fdd099391eb85fdee2e2029bd673648", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4e7c50811511bb73db16d2838262e0355020ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4e7c50811511bb73db16d2838262e0355020ce/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=3c4e7c50811511bb73db16d2838262e0355020ce", "patch": "@@ -40,6 +40,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n+#include <bits/cpp_type_traits.h>\n #include <bits/std_cmath.h>\n #include <bits/std_sstream.h>\n \n@@ -417,12 +418,39 @@ namespace std\n     arg(const complex<_Tp>& __z)\n     { return atan2(__z.imag(), __z.real()); }\n \n+  // 26.2.7/5: norm(__z) returns the squared magintude of __z.\n+  //     As defined, norm() is -not- a norm is the common mathematical\n+  //     sens used in numerics.  The helper class _Norm_helper<> tries to\n+  //     distinguish between builtin floating point and the rest, so as\n+  //     to deliver an answer as close as possible to the real value.\n+  template<bool>\n+    struct _Norm_helper\n+    {\n+      template<typename _Tp>\n+        static inline _Tp _S_do_it(const complex<_Tp>& __z)\n+        {\n+          const _Tp __x = __z.real();\n+          const _Tp __y = __z.imag();\n+          return __x * __x + __y * __y;\n+        }\n+    };\n+\n+  template<>\n+    struct _Norm_helper<true>\n+    {\n+      template<typename _Tp>\n+        static inline _Tp _S_do_it(const complex<_Tp>& __z)\n+        {\n+          _Tp __res = abs(__z);\n+          return __res * __res;\n+        }\n+    };\n+  \n   template<typename _Tp>\n     inline _Tp\n     norm(const complex<_Tp>& __z)\n     {\n-      _Tp __res = abs(__z);\n-      return __res * __res;\n+      return _Norm_helper<__is_floating<_Tp>::_M_type>::_S_do_it(__z);\n     }\n \n   template<typename _Tp>"}]}