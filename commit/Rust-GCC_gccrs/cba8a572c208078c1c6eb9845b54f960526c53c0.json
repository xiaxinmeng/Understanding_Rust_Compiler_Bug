{"sha": "cba8a572c208078c1c6eb9845b54f960526c53c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JhOGE1NzJjMjA4MDc4YzFjNmViOTg0NWI1NGY5NjA1MjZjNTNjMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-27T22:35:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-27T22:35:10Z"}, "message": "re PR go/89172 (FAIL: runtime/pprof)\n\n\tPR go/89172\n    internal/cpu, runtime, runtime/pprof: handle function descriptors\n    \n    When using PPC64 ELF ABI v1 a function address is not a PC, but is the\n    address of a function descriptor.  The first field in the function\n    descriptor is the actual PC (see\n    http://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html#FUNC-DES).\n    The libbacktrace library knows about this, and libgo uses actual PC\n    values consistently except for the helper function funcPC that appears\n    in both runtime and runtime/pprof.\n    \n    This patch fixes funcPC by recording, in the internal/cpu package,\n    whether function descriptors are being used.  We have to check for\n    function descriptors using a C compiler check, because GCC can be\n    configured using --with-abi to select the ELF ABI to use.\n    \n    Fixes https://gcc.gnu.org/PR89172\n    \n    Reviewed-on: https://go-review.googlesource.com/c/162978\n\nFrom-SVN: r269266", "tree": {"sha": "2533982aacf337307ee72ee82ae77f3cb01fbd58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2533982aacf337307ee72ee82ae77f3cb01fbd58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cba8a572c208078c1c6eb9845b54f960526c53c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba8a572c208078c1c6eb9845b54f960526c53c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cba8a572c208078c1c6eb9845b54f960526c53c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cba8a572c208078c1c6eb9845b54f960526c53c0/comments", "author": null, "committer": null, "parents": [{"sha": "e6df04c105464436e700013e1f665ebf0f94c9f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6df04c105464436e700013e1f665ebf0f94c9f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6df04c105464436e700013e1f665ebf0f94c9f2"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "749e523e7df5754c9f0007677fc882f16f9bc1d0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba8a572c208078c1c6eb9845b54f960526c53c0/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba8a572c208078c1c6eb9845b54f960526c53c0/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=cba8a572c208078c1c6eb9845b54f960526c53c0", "patch": "@@ -1,4 +1,4 @@\n-c9581de3804f94c5a74ce14befce5c57368722b9\n+74533ed435a1a77e6f9ec8f6cf5db1695c2568e8\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "aeaa203ce5a3518745c61ab8fa2e1f0e9c58911d", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=cba8a572c208078c1c6eb9845b54f960526c53c0", "patch": "@@ -539,6 +539,7 @@ s-cpu: Makefile\n \trm -f cpugen.go.tmp\n \techo \"package cpu\" > cpugen.go.tmp\n \techo \"const CacheLinePadSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) cachelinesize`\" >> cpugen.go.tmp\n+\techo \"const FunctionDescriptors = $(FUNCTION_DESCRIPTORS)\" >> cpugen.go.tmp\n \t$(SHELL) $(srcdir)/mvifdiff.sh cpugen.go.tmp cpugen.go\n \t$(STAMP) $@\n "}, {"sha": "7f398918c57f7b00fbe9b36781e617b6ef39d2b4", "filename": "libgo/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=cba8a572c208078c1c6eb9845b54f960526c53c0", "patch": "@@ -397,6 +397,7 @@ ECHO_T = @ECHO_T@\n EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n FGREP = @FGREP@\n+FUNCTION_DESCRIPTORS = @FUNCTION_DESCRIPTORS@\n GOARCH = @GOARCH@\n GOC = @GOC@\n GOFLAGS = @GOFLAGS@\n@@ -2635,6 +2636,7 @@ s-cpu: Makefile\n \trm -f cpugen.go.tmp\n \techo \"package cpu\" > cpugen.go.tmp\n \techo \"const CacheLinePadSize = `$(SHELL) $(srcdir)/goarch.sh $(GOARCH) cachelinesize`\" >> cpugen.go.tmp\n+\techo \"const FunctionDescriptors = $(FUNCTION_DESCRIPTORS)\" >> cpugen.go.tmp\n \t$(SHELL) $(srcdir)/mvifdiff.sh cpugen.go.tmp cpugen.go\n \t$(STAMP) $@\n "}, {"sha": "06b68b0f4169de012d7b4c347d14cd0ccdf181aa", "filename": "libgo/configure", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=cba8a572c208078c1c6eb9845b54f960526c53c0", "patch": "@@ -661,6 +661,7 @@ GO_SYSCALL_OS_ARCH_FILE\n GO_SYSCALL_OS_FILE\n GO_LIBCALL_OS_ARCH_FILE\n GO_LIBCALL_OS_FILE\n+FUNCTION_DESCRIPTORS\n ALLGOARCHFAMILY\n ALLGOARCH\n GOARCH\n@@ -11343,7 +11344,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11346 \"configure\"\n+#line 11347 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11449,7 +11450,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11452 \"configure\"\n+#line 11453 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14088,6 +14089,27 @@ esac\n \n \n \n+FUNCTION_DESCRIPTORS=false\n+case ${host} in\n+  rs6000*-*-* | powerpc*-*-*)\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#if _CALL_ELF == 1\n+#error descriptors\n+#endif\n+\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  FUNCTION_DESCRIPTORS=false\n+else\n+  FUNCTION_DESCRIPTORS=true\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+    ;;\n+esac\n+\n+\n GO_LIBCALL_OS_FILE=\n GO_LIBCALL_OS_ARCH_FILE=\n GO_SYSCALL_OS_FILE="}, {"sha": "03c07fe88381bac0c894e8865f0244c7a7bdcc8f", "filename": "libgo/configure.ac", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=cba8a572c208078c1c6eb9845b54f960526c53c0", "patch": "@@ -353,6 +353,20 @@ AC_SUBST(GOARCH)\n AC_SUBST(ALLGOARCH)\n AC_SUBST(ALLGOARCHFAMILY)\n \n+FUNCTION_DESCRIPTORS=false\n+case ${host} in\n+  rs6000*-*-* | powerpc*-*-*)\n+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n+#if _CALL_ELF == 1\n+#error descriptors\n+#endif\n+])],\n+\t[FUNCTION_DESCRIPTORS=false],\n+\t[FUNCTION_DESCRIPTORS=true])\n+    ;;\n+esac\n+AC_SUBST(FUNCTION_DESCRIPTORS)\n+\n dnl Some files are only present when needed for specific architectures.\n GO_LIBCALL_OS_FILE=\n GO_LIBCALL_OS_ARCH_FILE="}, {"sha": "27cd09e7870f20761a7aeb461f185bcb33e52fa1", "filename": "libgo/go/runtime/pprof/proto.go", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Fgo%2Fruntime%2Fpprof%2Fproto.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Fgo%2Fruntime%2Fpprof%2Fproto.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpprof%2Fproto.go?ref=cba8a572c208078c1c6eb9845b54f960526c53c0", "patch": "@@ -8,6 +8,7 @@ import (\n \t\"bytes\"\n \t\"compress/gzip\"\n \t\"fmt\"\n+\tinternalcpu \"internal/cpu\"\n \t\"io\"\n \t\"io/ioutil\"\n \t\"runtime\"\n@@ -28,7 +29,14 @@ func funcPC(f interface{}) uintptr {\n \t\tdata unsafe.Pointer\n \t}\n \ti := (*iface)(unsafe.Pointer(&f))\n-\treturn **(**uintptr)(i.data)\n+\tr := **(**uintptr)(i.data)\n+\tif internalcpu.FunctionDescriptors {\n+\t\t// With PPC64 ELF ABI v1 function descriptors the\n+\t\t// function address is a pointer to a struct whose\n+\t\t// first field is the actual PC.\n+\t\tr = *(*uintptr)(unsafe.Pointer(r))\n+\t}\n+\treturn r\n }\n \n // A profileBuilder writes a profile incrementally from a"}, {"sha": "0e6c9e19b09746a56b102db62626ac8e54885b03", "filename": "libgo/go/runtime/proc.go", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Fgo%2Fruntime%2Fproc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Fgo%2Fruntime%2Fproc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fproc.go?ref=cba8a572c208078c1c6eb9845b54f960526c53c0", "patch": "@@ -446,7 +446,14 @@ func releaseSudog(s *sudog) {\n //go:nosplit\n func funcPC(f interface{}) uintptr {\n \ti := (*iface)(unsafe.Pointer(&f))\n-\treturn **(**uintptr)(i.data)\n+\tr := **(**uintptr)(i.data)\n+\tif cpu.FunctionDescriptors {\n+\t\t// With PPC64 ELF ABI v1 function descriptors the\n+\t\t// function address is a pointer to a struct whose\n+\t\t// first field is the actual PC.\n+\t\tr = *(*uintptr)(unsafe.Pointer(r))\n+\t}\n+\treturn r\n }\n \n func lockedOSThread() bool {"}, {"sha": "130758927053c631e16f096767e3734bd3d6ca5c", "filename": "libgo/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cba8a572c208078c1c6eb9845b54f960526c53c0/libgo%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2FMakefile.in?ref=cba8a572c208078c1c6eb9845b54f960526c53c0", "patch": "@@ -157,6 +157,7 @@ ECHO_T = @ECHO_T@\n EGREP = @EGREP@\n EXEEXT = @EXEEXT@\n FGREP = @FGREP@\n+FUNCTION_DESCRIPTORS = @FUNCTION_DESCRIPTORS@\n GOARCH = @GOARCH@\n GOC = @GOC@\n GOFLAGS = @GOFLAGS@"}]}