{"sha": "8697be17fe6fed0abb0461cbe5f311377006e954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5N2JlMTdmZTZmZWQwYWJiMDQ2MWNiZTVmMzExMzc3MDA2ZTk1NA==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2013-03-28T14:46:31Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2013-03-28T14:46:31Z"}, "message": "genmodes.c (emit_max_int): New function.\n\n2013-03-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n   \t* genmodes.c (emit_max_int): New function.\n\t(emit_insn_modes_h): Added call to emit_max_function.\n\t* doc/rtl.texi (MAX_BITSIZE_MODE_ANY_INT, MAX_BITSIZE_MODE_ANY_MODE): Added doc.\t\n\t* machmode.def: Fixed comment.\n\nFrom-SVN: r197200", "tree": {"sha": "2a5527a5207957c4911401b0159d8b32ff08f528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a5527a5207957c4911401b0159d8b32ff08f528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8697be17fe6fed0abb0461cbe5f311377006e954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8697be17fe6fed0abb0461cbe5f311377006e954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8697be17fe6fed0abb0461cbe5f311377006e954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8697be17fe6fed0abb0461cbe5f311377006e954/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4c73eedf336e26c042bd873e4b49e394a81b4b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c73eedf336e26c042bd873e4b49e394a81b4b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c73eedf336e26c042bd873e4b49e394a81b4b0"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "84245d54a5721915f3d0e5eab6955162615ddf4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8697be17fe6fed0abb0461cbe5f311377006e954/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8697be17fe6fed0abb0461cbe5f311377006e954/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8697be17fe6fed0abb0461cbe5f311377006e954", "patch": "@@ -1,6 +1,12 @@\n 2013-03-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-\t* combine.c (try_combine): Removed useless assert. \n+   \t* genmodes.c (emit_max_int): New function.\n+\t(emit_insn_modes_h): Added call to emit_max_function.\n+\t* doc/rtl.texi (MAX_BITSIZE_MODE_ANY_INT, MAX_BITSIZE_MODE_ANY_MODE): Added doc.\n+\t* machmode.def: Fixed comment.\n+2013-03-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* combine.c (try_combine): Removed useless assert.\n \t* cselib.c (rtx_equal_for_cselib_1): Removed unnecessary parens.\n \n 2013-03-28  Marek Polacek  <polacek@redhat.com>"}, {"sha": "d82c72c723e04d952aae331f66bd5b1f41008f7e", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8697be17fe6fed0abb0461cbe5f311377006e954/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8697be17fe6fed0abb0461cbe5f311377006e954/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=8697be17fe6fed0abb0461cbe5f311377006e954", "patch": "@@ -1456,6 +1456,20 @@ Returns the number of units contained in a mode, i.e.,\n Returns the narrowest mode in mode class @var{c}.\n @end table\n \n+The following 4 variables are defined on every target.   They can be\n+used to allocate buffers that are guaranteed to be large enough to\n+hold any value that can be represented on the target.   \n+\n+@table @code\n+@findex MAX_BITSIZE_MODE_ANY_INT\n+@item MAX_BITSIZE_MODE_ANY_INT\n+The maximum of MAX_BITSIZE_MODE_INT and MAX_BITSIZE_MODE_PARTIAL_INT.\n+\n+@findex MAX_BITSIZE_MODE_ANY_MODE\n+@item MAX_BITSIZE_MODE_ANY_MODE\n+The bitsize of the largest mode on the target.   \n+@end table\n+\n @findex byte_mode\n @findex word_mode\n The global variables @code{byte_mode} and @code{word_mode} contain modes"}, {"sha": "dc384833871b748a8d37bc106efc7d911e1c0125", "filename": "gcc/genmodes.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8697be17fe6fed0abb0461cbe5f311377006e954/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8697be17fe6fed0abb0461cbe5f311377006e954/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=8697be17fe6fed0abb0461cbe5f311377006e954", "patch": "@@ -848,6 +848,36 @@ calc_wider_mode (void)\n \n #define print_closer() puts (\"};\")\n \n+/* Compute the max bitsize of some of the classes of integers.  It may\n+   be that there are needs for the other integer classes, and this\n+   code is easy to extend.  */\n+static void\n+emit_max_int (void)\n+{\n+  unsigned int max, mmax;\n+  struct mode_data *i;\n+  int j;\n+\n+  puts (\"\");\n+  for (max = 1, i = modes[MODE_INT]; i; i = i->next)\n+    if (max < i->bytesize)\n+\tmax = i->bytesize;\n+  mmax = max;\n+  for (max = 1, i = modes[MODE_PARTIAL_INT]; i; i = i->next)\n+    if (max < i->bytesize)\n+\tmax = i->bytesize;\n+  if (max > mmax)\n+    mmax = max;\n+  printf (\"#define MAX_BITSIZE_MODE_ANY_INT %d*BITS_PER_UNIT\\n\", mmax);\n+\n+  mmax = 0;\n+  for (j = 0; j < MAX_MODE_CLASS; j++)\n+    for (i = modes[j]; i; i = i->next)\n+      if (mmax < i->bytesize)\n+\tmmax = i->bytesize;\n+  printf (\"#define MAX_BITSIZE_MODE_ANY_MODE %d*BITS_PER_UNIT\\n\", mmax);\n+}\n+\n static void\n emit_insn_modes_h (void)\n {\n@@ -912,6 +942,7 @@ enum machine_mode\\n{\");\n #endif\n   printf (\"#define CONST_MODE_IBIT%s\\n\", adj_ibit ? \"\" : \" const\");\n   printf (\"#define CONST_MODE_FBIT%s\\n\", adj_fbit ? \"\" : \" const\");\n+  emit_max_int ();\n   puts (\"\\\n \\n\\\n #endif /* insn-modes.h */\");"}, {"sha": "1062f186e8aab98c44324ce13be76dbde38272a7", "filename": "gcc/machmode.def", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8697be17fe6fed0abb0461cbe5f311377006e954/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8697be17fe6fed0abb0461cbe5f311377006e954/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=8697be17fe6fed0abb0461cbe5f311377006e954", "patch": "@@ -179,8 +179,11 @@ RANDOM_MODE (BLK);\n FRACTIONAL_INT_MODE (BI, 1, 1);\n \n /* Basic integer modes.  We go up to TI in generic code (128 bits).\n-   The name OI is reserved for a 256-bit type (needed by some back ends).\n-   FIXME TI shouldn't be generically available either.  */\n+   TImode is needed here because the some front ends now genericly\n+   support __int128.  If the front ends decide to generically support\n+   larger types, then corresponding modes must be added here.  The\n+   name OI is reserved for a 256-bit type (needed by some back ends).\n+    */\n INT_MODE (QI, 1);\n INT_MODE (HI, 2);\n INT_MODE (SI, 4);"}]}