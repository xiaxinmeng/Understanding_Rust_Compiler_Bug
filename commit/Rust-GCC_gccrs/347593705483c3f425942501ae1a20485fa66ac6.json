{"sha": "347593705483c3f425942501ae1a20485fa66ac6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3NTkzNzA1NDgzYzNmNDI1OTQyNTAxYWUxYTIwNDg1ZmE2NmFjNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-10-25T15:00:35Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-10-25T15:00:35Z"}, "message": "Fix names of various macro parameters in tree.h\n\n\t* tree.h (EXCEPTIONAL_CLASS_P): Rename parameter from \"CODE\"\n\tto \"NODE\", since this works on a \"tree\", not an\n\t\"enum tree_code\".\n\t(CONSTANT_CLASS_P): Likewise.\n\t(TYPE_P): Likewise.\n\t(DECL_P): Likewise.\n\t(INDIRECT_REF_P): Likewise.\n\t(REFERENCE_CLASS_P): Likewise.\n\t(COMPARISON_CLASS_P): Likewise.\n\t(UNARY_CLASS_P): Likewise.\n\t(BINARY_CLASS_P): Likewise.\n\t(STATEMENT_CLASS_P): Likewise.\n\t(VL_EXP_CLASS_P): Likewise.\n\t(EXPRESSION_CLASS_P): Likewise.\n\t(IS_TYPE_OR_DECL_P): Likewise.\n\nFrom-SVN: r204070", "tree": {"sha": "4f2c8583a055761a98b54ccda7cb92ea91ddf2f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f2c8583a055761a98b54ccda7cb92ea91ddf2f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/347593705483c3f425942501ae1a20485fa66ac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347593705483c3f425942501ae1a20485fa66ac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347593705483c3f425942501ae1a20485fa66ac6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347593705483c3f425942501ae1a20485fa66ac6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c24d86bcb276c28e7bbd9a852bb816728aab34f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24d86bcb276c28e7bbd9a852bb816728aab34f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24d86bcb276c28e7bbd9a852bb816728aab34f9"}], "stats": {"total": 96, "additions": 57, "deletions": 39}, "files": [{"sha": "dccf076f223f36b5ed0be5dc048a62f6ccbf8617", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347593705483c3f425942501ae1a20485fa66ac6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347593705483c3f425942501ae1a20485fa66ac6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=347593705483c3f425942501ae1a20485fa66ac6", "patch": "@@ -1,3 +1,21 @@\n+2013-10-25  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* tree.h (EXCEPTIONAL_CLASS_P): Rename parameter from \"CODE\"\n+\tto \"NODE\", since this works on a \"tree\", not an\n+\t\"enum tree_code\".\n+\t(CONSTANT_CLASS_P): Likewise.\n+\t(TYPE_P): Likewise.\n+\t(DECL_P): Likewise.\n+\t(INDIRECT_REF_P): Likewise.\n+\t(REFERENCE_CLASS_P): Likewise.\n+\t(COMPARISON_CLASS_P): Likewise.\n+\t(UNARY_CLASS_P): Likewise.\n+\t(BINARY_CLASS_P): Likewise.\n+\t(STATEMENT_CLASS_P): Likewise.\n+\t(VL_EXP_CLASS_P): Likewise.\n+\t(EXPRESSION_CLASS_P): Likewise.\n+\t(IS_TYPE_OR_DECL_P): Likewise.\n+\n 2013-10-25  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* tree-ssa-alias.c (ao_ref_init_from_ptr_and_size): Look for an"}, {"sha": "ab1d0ab21537cfae7be39f0a69a1742bd72ea354", "filename": "gcc/tree.h", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347593705483c3f425942501ae1a20485fa66ac6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347593705483c3f425942501ae1a20485fa66ac6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=347593705483c3f425942501ae1a20485fa66ac6", "patch": "@@ -90,25 +90,25 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TREE_CODE_CLASS(CODE)\ttree_code_type[(int) (CODE)]\n \n-/* Nonzero if CODE represents an exceptional code.  */\n+/* Nonzero if NODE represents an exceptional code.  */\n \n-#define EXCEPTIONAL_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_exceptional)\n+#define EXCEPTIONAL_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_exceptional)\n \n-/* Nonzero if CODE represents a constant.  */\n+/* Nonzero if NODE represents a constant.  */\n \n-#define CONSTANT_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_constant)\n+#define CONSTANT_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_constant)\n \n-/* Nonzero if CODE represents a type.  */\n+/* Nonzero if NODE represents a type.  */\n \n-#define TYPE_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_type)\n+#define TYPE_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_type)\n \n-/* Nonzero if CODE represents a declaration.  */\n+/* Nonzero if NODE represents a declaration.  */\n \n-#define DECL_P(CODE)\\\n-        (TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_declaration)\n+#define DECL_P(NODE)\\\n+        (TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_declaration)\n \n /* True if NODE designates a variable declaration.  */\n #define VAR_P(NODE) \\\n@@ -119,52 +119,52 @@ along with GCC; see the file COPYING3.  If not see\n #define VAR_OR_FUNCTION_DECL_P(DECL)\\\n   (TREE_CODE (DECL) == VAR_DECL || TREE_CODE (DECL) == FUNCTION_DECL)\n \n-/* Nonzero if CODE represents a INDIRECT_REF.  Keep these checks in\n+/* Nonzero if NODE represents a INDIRECT_REF.  Keep these checks in\n    ascending code order.  */\n \n-#define INDIRECT_REF_P(CODE)\\\n-  (TREE_CODE (CODE) == INDIRECT_REF)\n+#define INDIRECT_REF_P(NODE)\\\n+  (TREE_CODE (NODE) == INDIRECT_REF)\n \n-/* Nonzero if CODE represents a reference.  */\n+/* Nonzero if NODE represents a reference.  */\n \n-#define REFERENCE_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_reference)\n+#define REFERENCE_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_reference)\n \n-/* Nonzero if CODE represents a comparison.  */\n+/* Nonzero if NODE represents a comparison.  */\n \n-#define COMPARISON_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_comparison)\n+#define COMPARISON_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_comparison)\n \n-/* Nonzero if CODE represents a unary arithmetic expression.  */\n+/* Nonzero if NODE represents a unary arithmetic expression.  */\n \n-#define UNARY_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_unary)\n+#define UNARY_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_unary)\n \n-/* Nonzero if CODE represents a binary arithmetic expression.  */\n+/* Nonzero if NODE represents a binary arithmetic expression.  */\n \n-#define BINARY_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_binary)\n+#define BINARY_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_binary)\n \n-/* Nonzero if CODE represents a statement expression.  */\n+/* Nonzero if NODE represents a statement expression.  */\n \n-#define STATEMENT_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_statement)\n+#define STATEMENT_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_statement)\n \n-/* Nonzero if CODE represents a function call-like expression with a\n+/* Nonzero if NODE represents a function call-like expression with a\n    variable-length operand vector.  */\n \n-#define VL_EXP_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_vl_exp)\n+#define VL_EXP_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_vl_exp)\n \n-/* Nonzero if CODE represents any other expression.  */\n+/* Nonzero if NODE represents any other expression.  */\n \n-#define EXPRESSION_CLASS_P(CODE)\\\n-\t(TREE_CODE_CLASS (TREE_CODE (CODE)) == tcc_expression)\n+#define EXPRESSION_CLASS_P(NODE)\\\n+\t(TREE_CODE_CLASS (TREE_CODE (NODE)) == tcc_expression)\n \n-/* Returns nonzero iff CODE represents a type or declaration.  */\n+/* Returns nonzero iff NODE represents a type or declaration.  */\n \n-#define IS_TYPE_OR_DECL_P(CODE)\\\n-\t(TYPE_P (CODE) || DECL_P (CODE))\n+#define IS_TYPE_OR_DECL_P(NODE)\\\n+\t(TYPE_P (NODE) || DECL_P (NODE))\n \n /* Returns nonzero iff CLASS is the tree-code class of an\n    expression.  */"}]}