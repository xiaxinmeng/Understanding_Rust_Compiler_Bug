{"sha": "2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "node_id": "C_kwDOANBUbNoAKDJiZTZmNmQ0OTgwZDBjYTU0YzRmNTkzYTQ2ZmY4MmVmMjI4YTkyOGQ", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-20T16:20:43Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-12T01:26:14Z"}, "message": "rs6000: Support SSE4.1 \"min\" and \"max\" intrinsics\n\nFunction signatures and decorations match gcc/config/i386/smmintrin.h.\n\nAlso, copy tests for _mm_min_epi8, _mm_min_epu16, _mm_min_epi32,\n_mm_min_epu32, _mm_max_epi8, _mm_max_epu16, _mm_max_epi32, _mm_max_epu32\nfrom gcc/testsuite/gcc.target/i386.\n\nsse4_1-pmaxsb.c and sse4_1-pminsb.c were modified from using\n\"char\" types to \"signed char\" types, because the default is unsigned on\npowerpc.\n\n2021-10-11  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_min_epi8, _mm_min_epu16,\n\t_mm_min_epi32, _mm_min_epu32, _mm_max_epi8, _mm_max_epu16,\n\t_mm_max_epi32, _mm_max_epu32): New.\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-pmaxsb.c: Copy from gcc.target/i386.\n\t* gcc.target/powerpc/sse4_1-pmaxsd.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmaxud.c: Same.\n\t* gcc.target/powerpc/sse4_1-pmaxuw.c: Same.\n\t* gcc.target/powerpc/sse4_1-pminsb.c: Same.\n\t* gcc.target/powerpc/sse4_1-pminsd.c: Same.\n\t* gcc.target/powerpc/sse4_1-pminud.c: Same.\n\t* gcc.target/powerpc/sse4_1-pminuw.c: Same.", "tree": {"sha": "654551a71e7a749527677701474f4fce04304cdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/654551a71e7a749527677701474f4fce04304cdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "732d7638479295546db3ee4da00a08faef97232d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/732d7638479295546db3ee4da00a08faef97232d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/732d7638479295546db3ee4da00a08faef97232d"}], "stats": {"total": 428, "additions": 428, "deletions": 0}, "files": [{"sha": "af782079cbcb9f466ede47775e0c61b3ba186cde", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -296,6 +296,62 @@ _mm_floor_ss (__m128 __A, __m128 __B)\n   return __r;\n }\n \n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_epi8 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_min ((__v16qi)__X, (__v16qi)__Y);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_epu16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_min ((__v8hu)__X, (__v8hu)__Y);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_min ((__v4si)__X, (__v4si)__Y);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_min_epu32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_min ((__v4su)__X, (__v4su)__Y);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_epi8 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_max ((__v16qi)__X, (__v16qi)__Y);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_epu16 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_max ((__v8hu)__X, (__v8hu)__Y);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_epi32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_max ((__v4si)__X, (__v4si)__Y);\n+}\n+\n+extern __inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_max_epu32 (__m128i __X, __m128i __Y)\n+{\n+  return (__m128i) vec_max ((__v4su)__X, (__v4su)__Y);\n+}\n+\n /* Return horizontal packed word minimum and its index in bits [15:0]\n    and bits [18:16] respectively.  */\n __inline __m128i"}, {"sha": "33f168b712ea1c1b0c607ab7b23e4f22059f3081", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmaxsb.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxsb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxsb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxsb.c?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 1024\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 16];\n+      signed char i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  signed char max;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 16)\n+    dst.x[i / 16] = _mm_max_epi8 (src1.x[i / 16], src2.x[i / 16]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      max = src1.i[i] <= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (max != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "60b342587ddbaccfae710e6c8f06bbe2074ea6c0", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmaxsd.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxsd.c?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  int max;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_max_epi32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      max = src1.i[i] <= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (max != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "a6e9ffa711e1fc49bc2c63cc73b4c3e4e97779d4", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmaxud.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxud.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxud.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxud.c?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned int i[NUM];\n+    } dst, src1, src2;\n+  int i;\n+  unsigned int max;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i;\n+      src2.i[i] = i + 20;\n+      if ((i % 4))\n+\tsrc2.i[i] |= 0x80000000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_max_epu32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      max = src1.i[i] <= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (max != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "826db1efe1f56fbc6670dabcb895767d8828a8f8", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pmaxuw.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pmaxuw.c?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 8];\n+      unsigned short i[NUM];\n+    } dst, src1, src2;\n+  int i;\n+  unsigned short max;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i;\n+      src2.i[i] = i + 20;\n+      if ((i % 8))\n+\tsrc2.i[i] |= 0x8000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    dst.x[i / 8] = _mm_max_epu16 (src1.x[i / 8], src2.x[i / 8]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      max = src1.i[i] <= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (max != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "74a395882e7952e03a6b68a94df5416ff40d084b", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pminsb.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminsb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminsb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminsb.c?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 1024\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 16];\n+      signed char i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  signed char min;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 16)\n+    dst.x[i / 16] = _mm_min_epi8 (src1.x[i / 16], src2.x[i / 16]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      min = src1.i[i] >= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (min != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "36aab228fcf36c052b894bc6828a9f631b9bdf25", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pminsd.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminsd.c?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      int i[NUM];\n+    } dst, src1, src2;\n+  int i, sign = 1;\n+  int min;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i * sign;\n+      src2.i[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_min_epi32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      min = src1.i[i] >= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (min != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "972e15124ca9542e75775efee76c455642261fcf", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pminud.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminud.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminud.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminud.c?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 4];\n+      unsigned int i[NUM];\n+    } dst, src1, src2;\n+  int i;\n+  unsigned int min;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i;\n+      src2.i[i] = i + 20;\n+      if ((i % 4))\n+\tsrc2.i[i] |= 0x80000000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 4)\n+    dst.x[i / 4] = _mm_min_epu32 (src1.x[i / 4], src2.x[i / 4]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      min = src1.i[i] >= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (min != dst.i[i])\n+\tabort ();\n+    }\n+}"}, {"sha": "4fe7d3aabf5c126855ed12dd0375066802bcdb4c", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-pminuw.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be6f6d4980d0ca54c4f593a46ff82ef228a928d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-pminuw.c?ref=2be6f6d4980d0ca54c4f593a46ff82ef228a928d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+\n+#define NUM 64\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128i x[NUM / 8];\n+      unsigned short i[NUM];\n+    } dst, src1, src2;\n+  int i;\n+  unsigned short min;\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src1.i[i] = i * i;\n+      src2.i[i] = i + 20;\n+      if ((i % 8))\n+\tsrc2.i[i] |= 0x8000;\n+    }\n+\n+  for (i = 0; i < NUM; i += 8)\n+    dst.x[i / 8] = _mm_min_epu16 (src1.x[i / 8], src2.x[i / 8]);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      min = src1.i[i] >= src2.i[i] ? src2.i[i] : src1.i[i];\n+      if (min != dst.i[i])\n+\tabort ();\n+    }\n+}"}]}