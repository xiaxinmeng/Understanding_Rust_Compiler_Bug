{"sha": "74faa9834a9ad208e34f67b08c854c20b0fcfe92", "node_id": "C_kwDOANBUbNoAKDc0ZmFhOTgzNGE5YWQyMDhlMzRmNjdiMDhjODU0YzIwYjBmY2ZlOTI", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-20T01:37:54Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-20T08:06:18Z"}, "message": "Fix tree-optimization/103220: Another missing folding of (type) X op CST where type is a nop convert\n\nThe problem here is that int_fits_type_p will return false if we just\nchange the sign of things like -2 (or 254) so we should accept the case\nwhere we just change the sign (and not the precision) of the type.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\n\tPR tree-optimization/103220\n\ngcc/ChangeLog:\n\n\t* match.pd ((type) X bitop CST): Don't check if CST\n\tfits into the type if only the sign changes.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/pr103220-1.c: New test.\n\t* gcc.dg/tree-ssa/pr103220-2.c: New test.\n\t* gcc.dg/pr25530.c: Update test to check for\n\t4294967294 in the case -2 is not matched.", "tree": {"sha": "adac44730f5fd3e571332b64031b94f110168b8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adac44730f5fd3e571332b64031b94f110168b8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74faa9834a9ad208e34f67b08c854c20b0fcfe92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74faa9834a9ad208e34f67b08c854c20b0fcfe92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74faa9834a9ad208e34f67b08c854c20b0fcfe92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74faa9834a9ad208e34f67b08c854c20b0fcfe92/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e4a361e79a459947540920db645f3d7fa7221a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e4a361e79a459947540920db645f3d7fa7221a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e4a361e79a459947540920db645f3d7fa7221a"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "f059b477f58389453d3ae83acb68d1d4ddea1371", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74faa9834a9ad208e34f67b08c854c20b0fcfe92/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74faa9834a9ad208e34f67b08c854c20b0fcfe92/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=74faa9834a9ad208e34f67b08c854c20b0fcfe92", "patch": "@@ -1607,7 +1607,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (bitop (convert@2 @0) (convert?@3 @1))\n   (if (((TREE_CODE (@1) == INTEGER_CST\n \t && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n-\t && int_fits_type_p (@1, TREE_TYPE (@0)))\n+\t && (int_fits_type_p (@1, TREE_TYPE (@0))\n+\t     || tree_nop_conversion_p (TREE_TYPE (@0), type)))\n \t|| types_match (@0, @1))\n        /* ???  This transform conflicts with fold-const.c doing\n \t  Convert (T)(x & c) into (T)x & (T)c, if c is an integer"}, {"sha": "771b36b9c2908af6ca91e6553b7c9e40e8e11b7a", "filename": "gcc/testsuite/gcc.dg/pr25530.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74faa9834a9ad208e34f67b08c854c20b0fcfe92/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25530.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74faa9834a9ad208e34f67b08c854c20b0fcfe92/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25530.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr25530.c?ref=74faa9834a9ad208e34f67b08c854c20b0fcfe92", "patch": "@@ -8,4 +8,4 @@ f (unsigned t)\n   return (t / 2) * 2;\n }\n \n-/* { dg-final { scan-tree-dump \"\\& -2\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"\\& -2|4294967294\" \"optimized\" } } */"}, {"sha": "f2ef3f1d93cc31942c07ebcde3881adca91b9087", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr103220-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74faa9834a9ad208e34f67b08c854c20b0fcfe92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103220-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74faa9834a9ad208e34f67b08c854c20b0fcfe92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103220-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103220-1.c?ref=74faa9834a9ad208e34f67b08c854c20b0fcfe92", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+unsigned char f(unsigned char a)\n+{\n+  signed char d = (signed char) a;\n+  signed char e = d & ~1;\n+  unsigned char t = e;\n+  t &= ~2;\n+  return t;\n+}\n+/* The above should reduce down to just & 252 rather than keping\n+   the two &s there. */\n+/* { dg-final { scan-tree-dump-times \"& 252\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"& -2\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"& 253\" 0 \"optimized\"} } */"}, {"sha": "25d7412a0958cf0a78c8885daea2ca3e0ebe2014", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr103220-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74faa9834a9ad208e34f67b08c854c20b0fcfe92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103220-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74faa9834a9ad208e34f67b08c854c20b0fcfe92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103220-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103220-2.c?ref=74faa9834a9ad208e34f67b08c854c20b0fcfe92", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+signed char f(unsigned char a)\n+{\n+  unsigned char b = a & 127;\n+  signed char c = (signed char) b;\n+  signed char d = (signed char) a;\n+  signed char e = d & -128;\n+  signed char h = c | e;\n+  return h;\n+}\n+/* The above should reduce down to just return with a cast.\n+   removing the two &s there and |'s. */\n+/* { dg-final { scan-tree-dump-times \"& 127\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"& -128\" 0 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\| \" 0 \"optimized\"} } */"}]}