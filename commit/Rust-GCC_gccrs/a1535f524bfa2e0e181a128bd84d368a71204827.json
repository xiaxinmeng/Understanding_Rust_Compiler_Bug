{"sha": "a1535f524bfa2e0e181a128bd84d368a71204827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1MzVmNTI0YmZhMmUwZTE4MWExMjhiZDg0ZDM2OGE3MTIwNDgyNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-02-18T23:11:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-02-18T23:11:26Z"}, "message": "re PR c++/60225 ([c++11] ICE initializing constexpr array)\n\n/cp\n2014-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60225\n\t* semantics.c (ensure_literal_type_for_constexpr_object): Use\n\tstrip_array_types.\n\n/testsuite\n2014-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60225\n\t* g++.dg/cpp0x/constexpr-ice10.C: New.\n\n/cp\n2014-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60215\n\t* semantics.c (cxx_eval_constant_expression, [COMPONENT_REF]):\n\tDuring error recovery allow_non_constant may be false.\n\n/testsuite\n2014-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/60215\n\t* g++.dg/cpp0x/pr60215.C: New.\n\nFrom-SVN: r207858", "tree": {"sha": "9f4ef84692df0bd1b9bdeb11ae77d2d9903e20aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f4ef84692df0bd1b9bdeb11ae77d2d9903e20aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1535f524bfa2e0e181a128bd84d368a71204827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1535f524bfa2e0e181a128bd84d368a71204827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1535f524bfa2e0e181a128bd84d368a71204827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1535f524bfa2e0e181a128bd84d368a71204827/comments", "author": null, "committer": null, "parents": [{"sha": "75e9d9a0fadca1fb57f3f28357ac5d0c2ee54e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e9d9a0fadca1fb57f3f28357ac5d0c2ee54e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e9d9a0fadca1fb57f3f28357ac5d0c2ee54e58"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "878ba4a2829ebe1b21185b9411c52875ffbe8a82", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a1535f524bfa2e0e181a128bd84d368a71204827", "patch": "@@ -1,3 +1,15 @@\n+2014-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60225\n+\t* semantics.c (ensure_literal_type_for_constexpr_object): Use\n+\tstrip_array_types.\n+\n+2014-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60215\n+\t* semantics.c (cxx_eval_constant_expression, [COMPONENT_REF]):\n+\tDuring error recovery allow_non_constant may be false.\n+\n 2014-02-18  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/60190"}, {"sha": "eb1c44ee1f3ec9e5e4ac58621f8b7ba75643050e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a1535f524bfa2e0e181a128bd84d368a71204827", "patch": "@@ -7380,7 +7380,8 @@ ensure_literal_type_for_constexpr_object (tree decl)\n   if (VAR_P (decl) && DECL_DECLARED_CONSTEXPR_P (decl)\n       && !processing_template_decl)\n     {\n-      if (CLASS_TYPE_P (type) && !COMPLETE_TYPE_P (complete_type (type)))\n+      tree stype = strip_array_types (type);\n+      if (CLASS_TYPE_P (stype) && !COMPLETE_TYPE_P (complete_type (stype)))\n \t/* Don't complain here, we'll complain about incompleteness\n \t   when we try to initialize the variable.  */;\n       else if (!literal_type_p (type))\n@@ -9676,7 +9677,7 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n \t     build_non_dependent_expr,  because any expression that\n \t     calls or takes the address of the function will have\n \t     pulled a FUNCTION_DECL out of the COMPONENT_REF.  */\n-\t  gcc_checking_assert (allow_non_constant);\n+\t  gcc_checking_assert (allow_non_constant || errorcount);\n \t  *non_constant_p = true;\n \t  return t;\n \t}"}, {"sha": "6ca256022a5e36ee409c393d07d7f1766846b42e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1535f524bfa2e0e181a128bd84d368a71204827", "patch": "@@ -1,3 +1,13 @@\n+2014-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60225\n+\t* g++.dg/cpp0x/constexpr-ice10.C: New.\n+\n+2014-02-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/60215\n+\t* g++.dg/cpp0x/pr60215.C: New.\n+\n 2014-02-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/49397"}, {"sha": "f6fc80cdc7034b524519debe7f9200740b58ff4d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice10.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice10.C?ref=a1535f524bfa2e0e181a128bd84d368a71204827", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/60225\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  constexpr A() {}\n+  static constexpr A a[2] = {};  // { dg-error \"incomplete\" }\n+};"}, {"sha": "29700174192379cc2130fbe17600a474f65d0f74", "filename": "gcc/testsuite/g++.dg/cpp0x/pr60215.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60215.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1535f524bfa2e0e181a128bd84d368a71204827/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60215.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr60215.C?ref=a1535f524bfa2e0e181a128bd84d368a71204827", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/60215\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  void foo();\n+  int i : foo;  // { dg-error \"width\" }\n+};"}]}