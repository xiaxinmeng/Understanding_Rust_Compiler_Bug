{"sha": "6fb94d67f1a3e77462a922341dc75c05e00524d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiOTRkNjdmMWEzZTc3NDYyYTkyMjM0MWRjNzVjMDVlMDA1MjRkNg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-16T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-16T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "48a30e56442bf9422aaf4c9a58ef93ffa1fa5042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48a30e56442bf9422aaf4c9a58ef93ffa1fa5042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fb94d67f1a3e77462a922341dc75c05e00524d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb94d67f1a3e77462a922341dc75c05e00524d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb94d67f1a3e77462a922341dc75c05e00524d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb94d67f1a3e77462a922341dc75c05e00524d6/comments", "author": null, "committer": null, "parents": [{"sha": "f8d6596c791562442c5bdb9656b6ba7c830c3e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d6596c791562442c5bdb9656b6ba7c830c3e62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d6596c791562442c5bdb9656b6ba7c830c3e62"}], "stats": {"total": 490, "additions": 489, "deletions": 1}, "files": [{"sha": "fa6f22d8b6b8021748c20d2e1682c043be578ba9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fb94d67f1a3e77462a922341dc75c05e00524d6", "patch": "@@ -1,3 +1,86 @@\n+2020-06-15  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gimplify.c (gimplify_init_constructor) <AGGREGATE_TYPE>: Declare\n+\tnew ENSURE_SINGLE_ACCESS constant and move variables down.  If it is\n+\ttrue and all elements are zero, then always clear.  Return GS_ERROR\n+\tif a temporary would be created for it and NOTIFY_TEMP_CREATION set.\n+\t(gimplify_modify_expr_rhs) <VAR_DECL>: If the target is volatile but\n+\tthe type is aggregate non-addressable, ask gimplify_init_constructor\n+\twhether it can generate a single access to the target.\n+\n+2020-06-15  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* tree-sra.c (propagate_subaccesses_from_rhs): When a non-scalar\n+\taccess on the LHS is replaced with a scalar access, propagate the\n+\tTYPE_REVERSE_STORAGE_ORDER flag of the type of the original access.\n+\n+2020-06-15  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/xtensa.c (TARGET_HAVE_TLS): Remove\n+\tTARGET_THREADPTR reference.\n+\t(xtensa_tls_symbol_p, xtensa_tls_referenced_p): Use\n+\ttargetm.have_tls instead of TARGET_HAVE_TLS.\n+\t(xtensa_option_override): Set targetm.have_tls to false in\n+\tconfigurations without THREADPTR.\n+\n+2020-06-15  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/elf.h (ASM_SPEC, LINK_SPEC): Pass ABI switch to\n+\tassembler/linker.\n+\t* config/xtensa/linux.h (ASM_SPEC, LINK_SPEC): Ditto.\n+\t* config/xtensa/uclinux.h (ASM_SPEC, LINK_SPEC): Ditto.\n+\t* config/xtensa/xtensa.c (xtensa_option_override): Initialize\n+\txtensa_windowed_abi if needed.\n+\t* config/xtensa/xtensa.h (TARGET_WINDOWED_ABI_DEFAULT): New\n+\tmacro.\n+\t(TARGET_WINDOWED_ABI): Redefine to xtensa_windowed_abi.\n+\t* config/xtensa/xtensa.opt (xtensa_windowed_abi): New target\n+\toption variable.\n+\t(mabi=call0, mabi=windowed): New options.\n+\t* doc/invoke.texi: Document new -mabi= Xtensa-specific options.\n+\n+2020-06-15  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/xtensa.c (xtensa_can_eliminate): New function.\n+\t(TARGET_CAN_ELIMINATE): New macro.\n+\t* config/xtensa/xtensa.h\n+\t(XTENSA_WINDOWED_HARD_FRAME_POINTER_REGNUM)\n+\t(XTENSA_CALL0_HARD_FRAME_POINTER_REGNUM): New macros.\n+\t(HARD_FRAME_POINTER_REGNUM): Define using\n+\tXTENSA_*_HARD_FRAME_POINTER_REGNUM.\n+\t(ELIMINABLE_REGS): Replace lines with HARD_FRAME_POINTER_REGNUM\n+\tby lines with XTENSA_WINDOWED_HARD_FRAME_POINTER_REGNUM and\n+\tXTENSA_CALL0_HARD_FRAME_POINTER_REGNUM.\n+\n+2020-06-15  Felix Yang  <felix.yang@huawei.com>\n+\n+\t* tree-vect-data-refs.c (vect_verify_datarefs_alignment): Rename\n+\tparameter to loop_vinfo and update uses.  Use LOOP_VINFO_DATAREFS\n+\twhen possible.\n+\t(vect_analyze_data_refs_alignment): Likewise, and use LOOP_VINFO_DDRS\n+\twhen possible.\n+\t* tree-vect-loop.c (vect_dissolve_slp_only_groups): Use\n+\tLOOP_VINFO_DATAREFS when possible.\n+\t(update_epilogue_loop_vinfo): Likewise.\n+\n+2020-06-15  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/riscv.c (riscv_gen_gpr_save_insn): Change type to\n+\tunsigned for i.\n+\t(riscv_gpr_save_operation_p): Change type to unsigned for i and\n+\tlen.\n+\n+2020-06-15   Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\tPR target/95488\n+\t* config/i386/i386-expand.c (ix86_expand_vecmul_qihi): New\n+\tfunction.\n+\t* config/i386/i386-protos.h (ix86_expand_vecmul_qihi): Declare.\n+\t* config/i386/sse.md (mul<mode>3): Drop mask_name since\n+\tthere's no real simd int8 multiplication instruction with\n+\tmask. Also optimize it under TARGET_AVX512BW.\n+\t(mulv8qi3): New expander.\n+\n 2020-06-12  Marco Elver  <elver@google.com>\n \n \t* gimplify.c (gimplify_function_tree): Optimize and do not emit"}, {"sha": "3ca7808b314d66dc7e34c8eaa201c550ba1d4ac7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6fb94d67f1a3e77462a922341dc75c05e00524d6", "patch": "@@ -1 +1 @@\n-20200615\n+20200616"}, {"sha": "3b6735aa1e727c2c587f5592675ced98a686f913", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 351, "deletions": 0, "changes": 351, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6fb94d67f1a3e77462a922341dc75c05e00524d6", "patch": "@@ -1,3 +1,354 @@\n+2020-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_eval.ads (Predicates_Match): Fix description.\n+\t* sem_eval.adb (Predicates_Match): Rewrite.\n+\n+2020-06-15  Ed Falis  <falis@adacore.com>\n+\n+\t* Makefile.rtl: Change name of hie/g-io__vxworks-ppc-cert.adb.\n+\n+2020-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Premature_Usage): Add support for subtype\n+\treferences and replace set of if-then-else by a case statement.\n+\n+2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_In_Decl_Part,\n+\tAnalyze_Global_In_Decl_Part): Bring back task discriminants for\n+\tanalysis of the Global/Depends contracts; add comments.\n+\n+2020-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Return_Applies_To): Document special usage for E_Block.\n+\t* einfo.adb (Write_Field8_Name): Write it for E_Block too.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Remove implementation of\n+\tthe check prescribed by AI05-0073.\n+\t* exp_ch6.adb (Apply_CW_Accessibility_Check): New procedure to apply\n+\tthe check prescribed by AI95-344 extracted from...\n+\t(Expand_N_Extended_Return_Statement): Apply the check prescribed by\n+\tAI95-344 to the expression, if present.  Suppress only access checks\n+\twhen analyzing the rewritten result.\n+\t(Expand_Simple_Function_Return): ...here.  Rename local variable.\n+\tCall Apply_CW_Accessibility_Check to apply the check prescribed by\n+\tAI95-344, but do not do it for the simple return statement generated\n+\tby the expansion of an extended return statement.  Apply the check\n+\tprescribed by AI05-0073 to all functions returning anonymous access\n+\ttype designating a specific tagged type, but not if the expression\n+\twas null or tag checks are suppressed for the type, and use Not In\n+\toperator rather than comparing the tags explicitly.\n+\t* sem.adb (Analyze): Handle all Suppress values.\n+\t* sem_ch6.adb (Analyze_Function_Return): Do not explicitly apply\n+\tpredicate checks in the case of an extended return statement.\n+\tDo not apply an implicit conversion to the anonymous access result\n+\ttype in the case of the simple return statement generated by the\n+\texpansion of an extended return statement.\n+\t(New_Overloaded_Entity): Small comment tweak.\n+\t* treepr.adb (Print_Node): Fix typo in flag string.\n+\n+2020-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_put_image.ads, exp_put_image.adb\n+\t(Image_Should_Call_Put_Image): New function to determine whether\n+\tthe call to Put_Image should be generated.\n+\t(Build_Image_Call): New procedure to generate the call to\n+\tPut_Image.\n+\t* exp_imgv.adb (Expand_Image_Attribute): Use underlying types to\n+\tbypass privacy (only in Ada 2020). If\n+\tImage_Should_Call_Put_Image is True (which happens only in Ada\n+\t2020), then call Build_Image_Call.\n+\t* rtsfind.ads, rtsfind.adb: Add the necessary declarations in\n+\tAda.Strings.Text_Output.Buffers.\n+\t* sem_attr.adb (Check_Image_Type): Enable the Ada 2020 case.\n+\t* libgnat/a-stoufo.ads, libgnat/a-stoufo.adb: Use the less\n+\trestrictive type that allows newline characters.\n+\n+2020-06-15  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch9.ads (Build_Master_Declaration): Add commas.\n+\t* exp_ch9.adb (Build_Master_Entity): Spelling fix (\"build\" =>\n+\t\"built\").\n+\t(Build_Task_Activation_Call): Fix word order.\n+\n+2020-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.ads (Big_Positive, Big_Natural): Fix\n+\tpredicate.\n+\n+2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): Fix\n+\tdealing with scopes on subprogram bodies that act as specs.\n+\t* sem_util.adb (Has_Relaxed_Initialization): Fix trivial\n+\tmistake.\n+\n+2020-06-15  Javier Miranda  <miranda@adacore.com>\n+\n+\t* restrict.ads (Set_Global_No_Tasking, Global_No_Tasking): New\n+\tsubprograms.\n+\t* restrict.adb (Set_Global_No_Tasking, Global_No_Tasking): New\n+\tsubprograms.\n+\t* sem_ch3.adb (Access_Definition): Do not skip building masters\n+\tsince they may be required for BIP calls.\n+\t(Analyze_Subtype_Declaration): Propagate attribute\n+\tIs_Limited_Record in class-wide subtypes and subtypes with\n+\tcloned subtype attribute; propagate attribute\n+\tIs_Limited_Interface.\n+\t* sem_ch6.adb (Check_Anonymous_Return): Do not skip building\n+\tmasters since they may be required for BIP calls. Use\n+\tBuild_Master_Declaration to declare the _master variable.\n+\t(Create_Extra_Formals): Add decoration of Has_Master_Entity when\n+\tthe _master formal is added.\n+\t* exp_ch3.adb (Init_Formals): Adding formal to decorate it with\n+\tattribute Has_Master_Entity when the _master formal is added.\n+\t(Build_Master): Do not skip building masters since they may be\n+\trequired for BIP calls.\n+\t(Expand_N_Object_Declaration): Ensure activation chain and\n+\tmaster entity for objects initialized with BIP function calls.\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tAdding support to detect and save restriction No_Tasking when\n+\tset in the run-time package System or in a global configuration\n+\tpragmas file.\n+\t* sem_util.adb (Current_Entity_In_Scope): Overload this\n+\tsubprogram to allow searching for an entity by its Name.\n+\t* sem_util.ads (Current_Entity_In_Scope): Update comment.\n+\t* exp_ch4.adb (Expand_N_Allocator): Do not skip building masters\n+\tsince they may be required for BIP calls.\n+\t* exp_ch6.ads (Might_Have_Tasks): New subprogram.\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Allocator): Add\n+\tsupport for BIP calls returning objects that may have tasks.\n+\t(Make_Build_In_Place_Call_In_Allocator): Build the activation\n+\tchain if the result might have tasks.\n+\t(Make_Build_In_Place_Iface_Call_In_Allocator): Build the class\n+\twide master for the result type.\n+\t(Might_Have_Tasks): New subprogram.\n+\t(Needs_BIP_Task_Actuals): Returns False when restriction\n+\tNo_Tasking is globally set.\n+\t* exp_ch9.ads (Build_Master_Declaration): New subprogram.\n+\t* exp_ch9.adb (Build_Activation_Chain_Entity): No action\n+\tperformed when restriction No_Tasking is globally set.\n+\t(Build_Class_Wide_Master): No action performed when restriction\n+\tNo_Tasking is globally set; use Build_Master_Declaration to\n+\tdeclare the _master variable.\n+\t(Build_Master_Declaration): New subprogram.\n+\t(Build_Master_Entity): No action performed when restriction\n+\tNo_Tasking is globally set; added support to handle transient\n+\tscopes and _finalizer routines.\n+\t(Build_Master_Renaming): No action performed when restriction\n+\tNo_Tasking is globally set.\n+\t(Build_Task_Activation_Call): Skip generating the call when\n+\tthe chain is an ignored ghost entity.\n+\t(Find_Master_Scope): Generalize the code that detects transient\n+\tscopes with master entity.\n+\t* einfo.ads (Has_Nested_Subprogram): Minor comment reformatting.\n+\n+2020-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Protect against previous\n+\terrors.\n+\t* sem_ch13.adb (Analyze_Aspect_Default_Value): Remove redundant\n+\terror checking, handling in Analyze_Aspect_Specifications.\n+\t(Analyze_Aspect_Specifications): Refine error messages on\n+\tDefault_[Component_]Value.\n+\t(Check_Aspect_Too_Late): New procedure.\n+\t(Rep_Item_Too_Late.Is_Derived_Type_With_Constraint): Remove,\n+\tdead code.\n+\t* aspects.ads (Is_Representation_Aspect): Default_Value is a\n+\trepresentation aspect.\n+\n+2020-06-15  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-wichha.ads, libgnat/a-wichha.adb,\n+\tlibgnat/a-wichun.ads, libgnat/a-wichun.adb (Is_Basic, To_Basic):\n+\tNew.\n+\t* libgnat/s-utf_32.ads, libgnat/s-utf_32.adb (Is_UTF_32_Basic,\n+\tTo_UTF_32_Basic, Decomposition_Search): New subprograms.\n+\t(Unicode_Decomposition): New table.\n+\n+2020-06-15  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb (Add_Call_By_Copy_Code): In the case of a view\n+\tconversion passed to a scalar out-mode parameter where the\n+\tformal has Default_Value set, declare the copy temp with the\n+\tbase type of the formal's subtype and initialize the copy temp\n+\twith the actual's value.\n+\n+2020-06-15  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Case_Expression): Set default value for\n+\tTarget to silence potential warnings.\n+\t(Expand_N_If_Expression): Add calculation to check when the if\n+\texpression is used directly in the context of an actual of an\n+\tanonymous access type and add a special path to force expansion\n+\tof the if expression in this case.\n+\t* exp_ch6.adb (Expand_Branch): Generate an assignment to the\n+\tlevel temporary for a given branch.\n+\t(Expand_Call_Helper): Add expansion to allow for creating a\n+\ttemporary to store associated accessiblity levels on each branch\n+\tof the conditional expression.  Also perform expansion of\n+\tfunction calls into expressions with actions, and fixup\n+\treferences to N with Call_Node.\n+\t(Insert_Level_Assign): Move through nested conditional\n+\texpressions to each branch.\n+\t* sem_util.ads, sem_util.adb (Is_Anonymous_Access_Actual): Added\n+\tto detect when to force expansion of if expressions.\n+\n+2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_In_Decl_Part,\n+\tAnalyze_Global_In_Decl_Part): Do not install task discriminants\n+\tfor analysis of the Global/Depends contracts.\n+\n+2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* contracts.adb (Analyze_Object_Contract): Do not expect\n+\tGlobal/Depends on single protected units.\n+\n+2020-06-15  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_res.adb (Valid_Conversion): Add missing condition to\n+\ttrigger proper static accessiblity failiures when the target\n+\ttype is an anonymous access.\n+\n+2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Replace repeated Ekind with\n+\tEkind_In.\n+\n+2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb, sem_util.adb: Remove excessive parents,\n+\tespecially since they don't make the code any easier to read.\n+\n+2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* aspects.ads (Aspect_Id): Add Aspect_Relaxed_Initialization.\n+\t(Implementation_Defined_Aspect): Add new aspect.\n+\t(Aspect_Argument): Add new aspect with Optional_Expression\n+\targument.\n+\t(Is_Representation_Aspect): Add new aspect as a\n+\tnon-representation one.\n+\t(Aspect_Names): Add name for the new aspect.\n+\t(Aspect_Delay): Add new aspect as a non-delayed one.\n+\t* sem_ch3.adb: Minor reformatting.\n+\t* einfo.ads, einfo.adb (Is_Relaxed_Initialization_State): New\n+\tquery; reuses existing code for querying abstract state options.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): For now ignore\n+\tattribute 'Initialized.\n+\t* sem_attr.adb (Analyze_Attribute_Old_Result): Allow attribute\n+\t'Result to be used in the aspect Relaxed_Initialization\n+\texpression.\n+\t(Analyze_Attribute): Analyze attribute 'Initialized; based on\n+\texisting code for attribute 'Valid_Scalars.\n+\t(Eval_Attribute): Do not expect attribute 'Initialized, just\n+\tlike attribute 'Valid_Scalars is not expected.\n+\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): New\n+\troutine.\n+\t(Analyze_Aspect_Specifications): Analyze new aspect in a\n+\tdedicated routine.\n+\t(Check_Aspect_At_Freeze_Point): Do not expect new aspect.\n+\t* sem_prag.adb (Analyze_Abstract_State): Support option\n+\tRelaxed_Initialization on abstract states.\n+\t* sem_util.ads, sem_util.adb (Has_Relaxed_Initialization): New\n+\tquery for the GNATprove backend.\n+\t* snames.ads-tmpl (Snames): Add Name_Ids for the new aspect and\n+\tattribute; add an Attribute_Id for the new attribute.\n+\n+2020-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_put_image.adb, libgnat/s-putima.adb, libgnat/s-putima.ads,\n+\trtsfind.ads: Enable Put_Image if Is_Access_Subprogram_Type (Typ).\n+\tRemove comment saying it's disabled in that case.  Rename\n+\tPut_Image_Access_Prot to be Put_Image_Access_Prot_Subp to\n+\tclarify that we're talking about access-to-subprogram, not\n+\taccess-to-protected-object.\n+\n+2020-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_attr.adb (Check_Image_Type): New procedure for checking\n+\tthe type, depending on language version. Disable the Ada 2020\n+\tsupport until the corresponding expander work is done.\n+\t(Analyze_Image_Attribute): Call Check_Image_Type.  Rearrange the\n+\tcode to be simplier and more logical.  When P_Type is modified,\n+\tmodify P_Base_Type accordingly.\n+\t* sem_util.adb (Is_Object_Image): Do not return False if the\n+\tprefix is a type. X'Image should be considered an image of an\n+\tobject iff X is an object (albeit illegal pre-2020 if\n+\tnonscalar).\n+\n+2020-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-putima.ads, libgnat/s-putima.adb\n+\t(Put_Image_Access_Subp, Put_Image_Access_Prot): New procedures\n+\tfor printing access-to-subprogram objects.  Remove an explicit\n+\t\" \", because Put_Image includes the annoying leading blank.\n+\t* rtsfind.ads: Add new procedures in s-putima.\n+\t* exp_put_image.adb: Call new procedures as appropriate.\n+\n+2020-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Allow private types.\n+\tPut_Image generates Image for numeric types, and private types\n+\twhose full type is numeric. This requires the Conversion_OK flag\n+\tfor integer and floating-point types. For fixed point, we need\n+\tthe extra conversion.\n+\t* exp_put_image.adb (Build_Elementary_Put_Image_Call): Remove\n+\tspecial handling of real types.\n+\t(Enable_Put_Image): Enable for reals.\n+\n+2020-06-15  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_attr.adb (Put_Image): Use underlying type for strings.\n+\tRemove unchecked union processing.\n+\t* exp_put_image.adb (Tagged_Put_Image_Enabled): Use -gnatd_z to\n+\tenable default Put_Image for tagged types.  This allows testing\n+\tthat feature.\n+\t(Build_String_Put_Image_Call): Set Conversion_OK flag.\n+\t(Make_Component_List_Attributes): Remove unchecked union\n+\tprocessing.\n+\t(Enable_Put_Image): Disable for unchecked unions.  Enable for\n+\tnonscalar types (which were mistakenly disabled in earlier\n+\tchanges).\n+\t* debug.adb: Document -gnatd_z switch.\n+\t* libgnat/s-putima.adb (Put_Image_String, Put_Image_Wide_String,\n+\tPut_Image_Wide_Wide_String): Double double-quote characters.\n+\tForget about special handling of control characters for now --\n+\tthat's rare enough to not be a priority, and it's not clear what\n+\tthe right thing to do is anyway.\n+\t* namet.adb: Minor: Improve debugger-friendliness.\n+\t* sinfo.ads: Minor: Add \"???\" comment.\n+\n+2020-06-15  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Renaming_Declaration): Remove.\n+\n+2020-06-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expression): When traversing the tree\n+\tlooking for the proper insertion point for the freeze node of an\n+\tentity that is declared in an outer scope, set the candidate\n+\tsubprogram body node properly.  Previous code has an off-by-one\n+\terror.\n+\n+2020-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Has_Same_Storage>:\n+\tDo not do superfluous work.  Add the condition (X'Size /= 0) on\n+\tboth paths and turn binary AND into short-circuit AND THEN.\n+\n+2020-06-15  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): In the Loop_Entry case,\n+\treplace a call to Statically_Denotes_Object with a call to\n+\tStatically_Names_Object and clean up the preceding comment.\n+\n+2020-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Set_Membership): Remove local variable.\n+\tIn the non-overloaded case, call Intersect_Types on the left\n+\toperand and the first alternative to get the resolution type.\n+\tBut test the subtype of the left operand to give the warning.\n+\n 2020-06-12  Steve Baird  <baird@adacore.com>\n \n \t* sem_res.adb (Valid_Conversion): The simpler cases of"}, {"sha": "fc624d7668bc24e1673e24e09e5acbdcf5230697", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=6fb94d67f1a3e77462a922341dc75c05e00524d6", "patch": "@@ -1,3 +1,9 @@\n+2020-06-16  Nicolas B\u00e9rtolo  <nicolasbertolo@gmail.com>\n+\n+\t* Make-lang.in: Always define version, minor and release\n+\tnumbers. Create the Windows shared library as\n+\tlibgccjit-$(LIBGCCJIT_VERSION_NUM).dll.\n+\n 2020-06-03  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/95306"}, {"sha": "641b65dbfc7d8b8c62ebb5fd7d8a3c40fa641736", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb94d67f1a3e77462a922341dc75c05e00524d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fb94d67f1a3e77462a922341dc75c05e00524d6", "patch": "@@ -1,3 +1,28 @@\n+2020-06-15  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gnat.dg/aggr30.ads, gnat.dg/aggr30.adb: New test.\n+\n+2020-06-15  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n+\n+\t* gnat.dg/opt85.ads, gnat.dg/opt85.adb: New test.\n+\n+2020-06-15  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* gcc.target/xtensa/mabi-call0.c: New test.\n+\t* gcc.target/xtensa/mabi-windowed.c: New test.\n+\n+2020-06-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* lib/brig.exp (brig_target_compile): Strip hsail extension when\n+\tgnerating the name of the binary brig file.\n+\n+2020-06-15   Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-pr95488-1.c: New test.\n+\t* gcc.target/i386/avx512bw-pr95488-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr95488-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-pr95488-2.c: Ditto.\n+\n 2020-06-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95088"}, {"sha": "63167c353bf9a91bd9864523963e2456fa180a06", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb94d67f1a3e77462a922341dc75c05e00524d6/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb94d67f1a3e77462a922341dc75c05e00524d6/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6fb94d67f1a3e77462a922341dc75c05e00524d6", "patch": "@@ -1,3 +1,9 @@\n+2020-06-15  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Use AC_COMPILE_IFELSE instead of manual\n+\tpreprocessor invocation to check for __XTENSA_CALL0_ABI__.\n+\n 2020-06-09  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/95494"}, {"sha": "0ca1b1b39b9ed405d069df24fdde42f31c798287", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb94d67f1a3e77462a922341dc75c05e00524d6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb94d67f1a3e77462a922341dc75c05e00524d6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6fb94d67f1a3e77462a922341dc75c05e00524d6", "patch": "@@ -1,3 +1,20 @@\n+2020-06-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/char_traits.h (__cpp_lib_constexpr_char_traits):\n+\tUpdate value for C++20.\n+\t* include/std/version (__cpp_lib_constexpr_char_traits): Likewise.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++17.cc:\n+\tUpdate expected value.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc:\n+\tLikewise.\n+\n+2020-06-15  Paul Keir  <paul.keir@uws.ac.uk>\n+\n+\t* include/bits/char_traits.h (char_traits::move): constexpr move with\n+\toverlap was using copy_backward incorrectly.\n+\t* testsuite/21_strings/char_traits/requirements/constexpr_functions_c++20.cc:\n+\tNew test.\n+\n 2020-06-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/29_atomics/atomic_flag/clear/1.cc: Also test clear()"}]}