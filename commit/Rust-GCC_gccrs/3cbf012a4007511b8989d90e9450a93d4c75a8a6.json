{"sha": "3cbf012a4007511b8989d90e9450a93d4c75a8a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NiZjAxMmE0MDA3NTExYjg5ODlkOTBlOTQ1MGE5M2Q0Yzc1YThhNg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-03-14T15:08:54Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-03-14T15:08:54Z"}, "message": "LRA: identify biggest access mode for hard_regs and use it in split_reg\n\n\tPR target/70083\n\t* lra-lives.c (process_bb_lives): Also update biggest mode for hard\n\tregs.\n\t(lra_create_live_ranges_1): initialize hard register biggest_mode to\n\tVOIDmode.\n\t* lra-constraints.c (split_reg): For hard regs, try to find the\n\tbiggest single-register mode used in the function.\n\ntestsuite/\n\tPR target/70083\n\t* gcc.dg/torture/pr70083.c: New test.\n\t* gcc.target/i386/pr70083.c: New test.\n\nFrom-SVN: r234184", "tree": {"sha": "fa0721d7527c8d8af0cd822d4a28519e071f5320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa0721d7527c8d8af0cd822d4a28519e071f5320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cbf012a4007511b8989d90e9450a93d4c75a8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbf012a4007511b8989d90e9450a93d4c75a8a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cbf012a4007511b8989d90e9450a93d4c75a8a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cbf012a4007511b8989d90e9450a93d4c75a8a6/comments", "author": null, "committer": null, "parents": [{"sha": "a9fee7cdc3c62d0e51730b6a9814909c557d3070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fee7cdc3c62d0e51730b6a9814909c557d3070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fee7cdc3c62d0e51730b6a9814909c557d3070"}], "stats": {"total": 94, "additions": 79, "deletions": 15}, "files": [{"sha": "ac8b40dae68a09243f719d6998744cdc9edbf3f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cbf012a4007511b8989d90e9450a93d4c75a8a6", "patch": "@@ -1,3 +1,13 @@\n+2016-03-14  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR target/70083\n+\t* lra-lives.c (process_bb_lives): Also update biggest mode for hard\n+\tregs.\n+\t(lra_create_live_ranges_1): initialize hard register biggest_mode to\n+\tVOIDmode.\n+\t* lra-constraints.c (split_reg): For hard regs, try to find the\n+\tbiggest single-register mode used in the function.\n+\n 2016-03-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56365"}, {"sha": "171ed657c85fea876a2a94163aa8acdecdf5b708", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=3cbf012a4007511b8989d90e9450a93d4c75a8a6", "patch": "@@ -4972,40 +4972,48 @@ split_reg (bool before_p, int original_regno, rtx_insn *insn,\n   rtx_insn *restore, *save;\n   bool after_p;\n   bool call_save_p;\n+  machine_mode mode;\n \n   if (original_regno < FIRST_PSEUDO_REGISTER)\n     {\n       rclass = ira_allocno_class_translate[REGNO_REG_CLASS (original_regno)];\n       hard_regno = original_regno;\n       call_save_p = false;\n       nregs = 1;\n+      mode = lra_reg_info[hard_regno].biggest_mode;\n+      machine_mode reg_rtx_mode = GET_MODE (regno_reg_rtx[hard_regno]);\n+      if (GET_MODE_SIZE (mode) > GET_MODE_SIZE (reg_rtx_mode))\n+\t{\n+\t  original_reg = regno_reg_rtx[hard_regno];\n+\t  mode = reg_rtx_mode;\n+\t}\n+      else\n+\toriginal_reg = gen_rtx_REG (mode, hard_regno);\n     }\n   else\n     {\n+      mode = PSEUDO_REGNO_MODE (original_regno);\n       hard_regno = reg_renumber[original_regno];\n-      nregs = hard_regno_nregs[hard_regno][PSEUDO_REGNO_MODE (original_regno)];\n+      nregs = hard_regno_nregs[hard_regno][mode];\n       rclass = lra_get_allocno_class (original_regno);\n       original_reg = regno_reg_rtx[original_regno];\n       call_save_p = need_for_call_save_p (original_regno);\n     }\n-  original_reg = regno_reg_rtx[original_regno];\n   lra_assert (hard_regno >= 0);\n   if (lra_dump_file != NULL)\n     fprintf (lra_dump_file,\n \t     \"\t  ((((((((((((((((((((((((((((((((((((((((((((((((\\n\");\n+\t  \n   if (call_save_p)\n     {\n-      machine_mode mode = GET_MODE (original_reg);\n-\n       mode = HARD_REGNO_CALLER_SAVE_MODE (hard_regno,\n \t\t\t\t\t  hard_regno_nregs[hard_regno][mode],\n \t\t\t\t\t  mode);\n       new_reg = lra_create_new_reg (mode, NULL_RTX, NO_REGS, \"save\");\n     }\n   else\n     {\n-      rclass = choose_split_class (rclass, hard_regno,\n-\t\t\t\t   GET_MODE (original_reg));\n+      rclass = choose_split_class (rclass, hard_regno, mode);\n       if (rclass == NO_REGS)\n \t{\n \t  if (lra_dump_file != NULL)\n@@ -5023,8 +5031,7 @@ split_reg (bool before_p, int original_regno, rtx_insn *insn,\n \t    }\n \t  return false;\n \t}\n-      new_reg = lra_create_new_reg (GET_MODE (original_reg), original_reg,\n-\t\t\t\t    rclass, \"split\");\n+      new_reg = lra_create_new_reg (mode, original_reg, rclass, \"split\");\n       reg_renumber[REGNO (new_reg)] = hard_regno;\n     }\n   save = emit_spill_move (true, new_reg, original_reg);"}, {"sha": "8811198cfd31b98facd42ef862493e90d325e27d", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=3cbf012a4007511b8989d90e9450a93d4c75a8a6", "patch": "@@ -700,12 +700,13 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n \n       /* Update max ref width and hard reg usage.  */\n       for (reg = curr_id->regs; reg != NULL; reg = reg->next)\n-\tif (reg->regno >= FIRST_PSEUDO_REGISTER\n-\t    && (GET_MODE_SIZE (reg->biggest_mode)\n-\t\t> GET_MODE_SIZE (lra_reg_info[reg->regno].biggest_mode)))\n-\t  lra_reg_info[reg->regno].biggest_mode = reg->biggest_mode;\n-\telse if (reg->regno < FIRST_PSEUDO_REGISTER)\n-\t  lra_hard_reg_usage[reg->regno] += freq;\n+\t{\n+\t  if (GET_MODE_SIZE (reg->biggest_mode)\n+\t      > GET_MODE_SIZE (lra_reg_info[reg->regno].biggest_mode))\n+\t    lra_reg_info[reg->regno].biggest_mode = reg->biggest_mode;\n+\t  if (reg->regno < FIRST_PSEUDO_REGISTER)\n+\t    lra_hard_reg_usage[reg->regno] += freq;\n+\t}\n \n       call_p = CALL_P (curr_insn);\n       src_regno = (set != NULL_RTX && REG_P (SET_SRC (set))\n@@ -1208,7 +1209,7 @@ lra_create_live_ranges_1 (bool all_p, bool dead_insn_p)\n \t conservative because of recent transformation.  Here in this\n \t file we recalculate it again as it costs practically\n \t nothing.  */\n-      if (regno_reg_rtx[i] != NULL_RTX)\n+      if (i >= FIRST_PSEUDO_REGISTER && regno_reg_rtx[i] != NULL_RTX)\n \tlra_reg_info[i].biggest_mode = GET_MODE (regno_reg_rtx[i]);\n       else\n \tlra_reg_info[i].biggest_mode = VOIDmode;"}, {"sha": "b2fdd0b23832383c910e57a8bf8e1b19f0c4b8fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cbf012a4007511b8989d90e9450a93d4c75a8a6", "patch": "@@ -1,3 +1,9 @@\n+2016-03-14  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR target/70083\n+\t* gcc.dg/torture/pr70083.c: New test.\n+\t* gcc.target/i386/pr70083.c: New test.\n+\n 2016-03-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56365"}, {"sha": "7f047a5b044703b46c68477a24ee1bb38f3e474a", "filename": "gcc/testsuite/gcc.dg/torture/pr70083.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70083.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70083.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr70083.c?ref=3cbf012a4007511b8989d90e9450a93d4c75a8a6", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-psabi\" } */\n+\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef int v8si __attribute__ ((vector_size (32)));\n+typedef long long v4di __attribute__ ((vector_size (32)));\n+\n+int\n+foo(int u32_0, int u64_0, int u64_1, v16hi v32u16_0, v8si v32u32_0, v4di v32u64_0, v16hi v32u16_1, v8si v32u32_1, v4di v32u64_1)\n+{\n+  v32u32_1 %= (v8si) v32u16_1 | 1;\n+  v32u64_1[1] |= ((1));\n+  v32u16_0 /= (v16hi){~u64_1, 1, 0xb56c, 0xd279, 0x26b6, 0x74d9, 0xf764, 0, 0, -v32u16_1[6]} | 1;\n+  v32u16_1 ^= (v16hi){0xc98d, 1, 0x8c71, u32_0, 0x5366, 0, ~v32u64_1[1]} & 31;\n+  v32u32_0 -= (v8si)~v32u64_1;\n+  v32u32_1[2] |= 0x1f;\n+  v32u16_0 %= (v16hi){2, 0xffff, u32_0, 1, v32u64_0[1], u32_0 };\n+  v32u32_1 /= (v8si){0x1e7390, v32u16_0[12], ~v32u16_1[2], -u64_0};\n+  return v32u16_0[4] + v32u16_0[5] + v32u32_0[5] + v32u32_1[6] + v32u64_1[3];\n+}"}, {"sha": "cfce62047b64fa727f5eb7c2875f4b69756e13e0", "filename": "gcc/testsuite/gcc.target/i386/pr70083.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70083.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cbf012a4007511b8989d90e9450a93d4c75a8a6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70083.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70083.c?ref=3cbf012a4007511b8989d90e9450a93d4c75a8a6", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-psabi -O2 -fno-dce -fschedule-insns -fno-sched-critical-path-heuristic -mavx512dq --param=max-cse-insns=1\" } */\n+\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef int v8si __attribute__ ((vector_size (32)));\n+typedef long long v4di __attribute__ ((vector_size (32)));\n+\n+int\n+foo(int u32_0, int u64_0, int u64_1, v16hi v32u16_0, v8si v32u32_0, v4di v32u64_0, v16hi v32u16_1, v8si v32u32_1, v4di v32u64_1)\n+{\n+  v32u32_1 %= (v8si) v32u16_1 | 1;\n+  v32u64_1[1] |= ((1));\n+  v32u16_0 /= (v16hi){~u64_1, 1, 0xb56c, 0xd279, 0x26b6, 0x74d9, 0xf764, 0, 0, -v32u16_1[6]} | 1;\n+  v32u16_1 ^= (v16hi){0xc98d, 1, 0x8c71, u32_0, 0x5366, 0, ~v32u64_1[1]} & 31;\n+  v32u32_0 -= (v8si)~v32u64_1;\n+  v32u32_1[2] |= 0x1f;\n+  v32u16_0 %= (v16hi){2, 0xffff, u32_0, 1, v32u64_0[1], u32_0 };\n+  v32u32_1 /= (v8si){0x1e7390, v32u16_0[12], ~v32u16_1[2], -u64_0};\n+  return v32u16_0[4] + v32u16_0[5] + v32u32_0[5] + v32u32_1[6] + v32u64_1[3];\n+}"}]}