{"sha": "5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFjMjBjMWE4MzFmNjAzZDVlNDZlM2UyOTM4ZjBiYmY2YzhiMDQyMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-12-13T23:49:28Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-12-13T23:49:28Z"}, "message": "re PR rtl-optimization/18928 (ice on valid code with -O2 -fPIC)\n\n\n\tPR rtl-optimization/18928\n\t* simplify_rtx.c (plus_minus_operand_p): New function to encode\n\tthe test for suitable operands for calls to simplify_plus_minus.\n\tOnly allow (CONST (PLUS x y)) if both x and y are CONSTANT_P.\n\t(simplify_binary_operation): Use plus_minus_operand_p.\n\n\t* gcc.dg/pr18928-1.c: New test case.\n\nFrom-SVN: r92109", "tree": {"sha": "610abc1c82d439c98e13f70c11d153d2004220e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/610abc1c82d439c98e13f70c11d153d2004220e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/comments", "author": null, "committer": null, "parents": [{"sha": "04482133da7cc90eb44c16e1abe6223e2014fc1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04482133da7cc90eb44c16e1abe6223e2014fc1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04482133da7cc90eb44c16e1abe6223e2014fc1e"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "52699a02f7dafbfd07f822dcaa88c9c8fb59450e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423", "patch": "@@ -1,3 +1,11 @@\n+2004-12-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/18928\n+\t* simplify_rtx.c (plus_minus_operand_p): New function to encode\n+\tthe test for suitable operands for calls to simplify_plus_minus.\n+\tOnly allow (CONST (PLUS x y)) if both x and y are CONSTANT_P.\n+\t(simplify_binary_operation): Use plus_minus_operand_p.\n+\n 2004-12-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-opt/16951"}, {"sha": "3685bbf8d2c954631fea45ad95bea3cdec0dc594", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423", "patch": "@@ -50,6 +50,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n  ((((HOST_WIDE_INT) low) < 0) ? ((HOST_WIDE_INT) -1) : ((HOST_WIDE_INT) 0))\n \n static rtx neg_const_int (enum machine_mode, rtx);\n+static bool plus_minus_operand_p (rtx);\n static int simplify_plus_minus_op_data_cmp (const void *, const void *);\n static rtx simplify_plus_minus (enum rtx_code, enum machine_mode, rtx,\n \t\t\t\trtx, int);\n@@ -1567,12 +1568,8 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     and subtle programs can break if operations are associated.  */\n \n \t  if (INTEGRAL_MODE_P (mode)\n-\t      && (GET_CODE (op0) == PLUS || GET_CODE (op0) == MINUS\n-\t\t  || GET_CODE (op1) == PLUS || GET_CODE (op1) == MINUS\n-\t\t  || (GET_CODE (op0) == CONST\n-\t\t      && GET_CODE (XEXP (op0, 0)) == PLUS)\n-\t\t  || (GET_CODE (op1) == CONST\n-\t\t      && GET_CODE (XEXP (op1, 0)) == PLUS))\n+\t      && (plus_minus_operand_p (op0)\n+\t\t  || plus_minus_operand_p (op1))\n \t      && (tem = simplify_plus_minus (code, mode, op0, op1, 0)) != 0)\n \t    return tem;\n \n@@ -1724,12 +1721,8 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     and subtle programs can break if operations are associated.  */\n \n \t  if (INTEGRAL_MODE_P (mode)\n-\t      && (GET_CODE (op0) == PLUS || GET_CODE (op0) == MINUS\n-\t\t  || GET_CODE (op1) == PLUS || GET_CODE (op1) == MINUS\n-\t\t  || (GET_CODE (op0) == CONST\n-\t\t      && GET_CODE (XEXP (op0, 0)) == PLUS)\n-\t\t  || (GET_CODE (op1) == CONST\n-\t\t      && GET_CODE (XEXP (op1, 0)) == PLUS))\n+\t      && (plus_minus_operand_p (op0)\n+\t\t  || plus_minus_operand_p (op1))\n \t      && (tem = simplify_plus_minus (code, mode, op0, op1, 0)) != 0)\n \t    return tem;\n \n@@ -2677,6 +2670,18 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n   return result;\n }\n \n+/* Check whether an operand is suitable for calling simplify_plus_minus.  */\n+static bool\n+plus_minus_operand_p (rtx x)\n+{\n+  return GET_CODE (x) == PLUS\n+         || GET_CODE (x) == MINUS\n+\t || (GET_CODE (x) == CONST\n+\t     && GET_CODE (XEXP (x, 0)) == PLUS\n+\t     && CONSTANT_P (XEXP (XEXP (x, 0), 0))\n+\t     && CONSTANT_P (XEXP (XEXP (x, 0), 1)));\n+}\n+\n /* Like simplify_binary_operation except used for relational operators.\n    MODE is the mode of the result. If MODE is VOIDmode, both operands must\n    not also be VOIDmode."}, {"sha": "636869b050f723a914684a0d50af2018f83b8d3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423", "patch": "@@ -1,3 +1,8 @@\n+2004-12-13  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/18928\n+\t* gcc.dg/pr18928-1.c: New test case.\n+\n 2004-12-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR tree-opt/16951"}, {"sha": "3a0107deefa4354b970008ed9d06722139acdb01", "filename": "gcc/testsuite/gcc.dg/pr18928-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18928-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18928-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr18928-1.c?ref=5ac20c1a831f603d5e46e3e2938f0bbf6c8b0423", "patch": "@@ -0,0 +1,20 @@\n+/* PR rtl-optimization/18928 */\n+/* { dg-do compile { target i?86-*-linux* } } */\n+/* { dg-options \"-O2 -fPIC\" } */\n+\n+const char *toHex( unsigned short u )\n+{\n+  static char hexVal[5];\n+  int i = 3;\n+  while ( i >= 0 ) {\n+    unsigned short hex = (u & 0x000f);\n+    if ( hex < 0x0a )\n+      hexVal[i] = '0'+hex;\n+    else\n+      hexVal[i] = 'A'+(hex-0x0a);\n+    i--;\n+  }\n+  hexVal[4] = '\\0';\n+  return hexVal;\n+}\n+"}]}