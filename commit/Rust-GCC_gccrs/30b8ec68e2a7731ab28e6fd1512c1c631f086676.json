{"sha": "30b8ec68e2a7731ab28e6fd1512c1c631f086676", "node_id": "C_kwDOANBUbNoAKDMwYjhlYzY4ZTJhNzczMWFiMjhlNmZkMTUxMmMxYzYzMWYwODY2NzY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-05T11:25:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-05T12:22:31Z"}, "message": "libstdc++: Add xfail to pretty printer tests that fail in C++20\n\nFor some reason the type printer for std::string doesn't work in C++20\nmode, so std::basic_string<char, char_traits<char>, allocator<char> is\nprinted out in full rather than being shown as std::string. It's\nprobably related to the fact that the extern template declarations are\ndisabled for C++20, but I don't know why that affects GDB.\n\nFor now I'm just marking the relevant tests as XFAIL. That requires\nadding support for target selectors to individual GDB directives such as\nnote-test and whatis-regexp-test.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/lib/gdb-test.exp: Add target selector support to the\n\tdg-final directives.\n\t* testsuite/libstdc++-prettyprinters/80276.cc: Add xfail for\n\tC++20.\n\t* testsuite/libstdc++-prettyprinters/libfundts.cc: Likewise.\n\t* testsuite/libstdc++-prettyprinters/prettyprinters.exp: Tweak\n\tcomment.", "tree": {"sha": "1a132abfe6b009b98a96cc32eb3497e5f1d7b04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a132abfe6b009b98a96cc32eb3497e5f1d7b04f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30b8ec68e2a7731ab28e6fd1512c1c631f086676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b8ec68e2a7731ab28e6fd1512c1c631f086676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b8ec68e2a7731ab28e6fd1512c1c631f086676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b8ec68e2a7731ab28e6fd1512c1c631f086676/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44d9d55c6d0e3a1e26427662d30f350a80282634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d9d55c6d0e3a1e26427662d30f350a80282634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d9d55c6d0e3a1e26427662d30f350a80282634"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "db0fc2f02809697d4aba27d992e562aae86ed02c", "filename": "libstdc++-v3/testsuite/lib/gdb-test.exp", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8ec68e2a7731ab28e6fd1512c1c631f086676/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8ec68e2a7731ab28e6fd1512c1c631f086676/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp?ref=30b8ec68e2a7731ab28e6fd1512c1c631f086676", "patch": "@@ -50,40 +50,48 @@ proc get_line_number {filename marker} {\n     return $gdb_markers($filename,$marker)\n }\n \n-# Make note of a gdb test.  A test consists of a variable name and an\n-# expected result.\n-proc note-test {var result} {\n+proc register_gdb_test {var result kind rexp selector} {\n     global gdb_tests\n \n-    lappend gdb_tests $var $result print 0\n+    set xfail 0\n+    if {[string length $selector] > 0} {\n+\tswitch [dg-process-target $selector] {\n+\t    \"N\" { return }\n+\t    \"S\" { }\n+\t    \"P\" { }\n+\t    \"F\" { set xfail 1 }\n+\t}\n+    }\n+\n+    lappend gdb_tests $var $result $kind $rexp $xfail\n+}\n+\n+# Make note of a gdb test.  A test consists of a variable name and an\n+# expected result, and an optional target selector.\n+proc note-test {var result {selector {}}} {\n+    register_gdb_test $var $result print 0 $selector\n }\n \n # A test that uses a regular expression.  This is like note-test, but\n # the result is a regular expression that is matched against the\n # output.\n-proc regexp-test {var result} {\n-    global gdb_tests\n-\n-    lappend gdb_tests $var $result print 1\n+proc regexp-test {var result {selector {}}} {\n+    register_gdb_test $var $result print 1 $selector\n }\n \n # A test of 'whatis'.  This tests a type rather than a variable.\n-proc whatis-test {var result} {\n-    global gdb_tests\n-\n-    lappend gdb_tests $var $result whatis 0\n+proc whatis-test {var result {selector {}}} {\n+    register_gdb_test $var $result whatis 0 $selector\n }\n \n # A test of 'whatis' that uses a regular expression. This tests a type rather\n # than a variable.\n-proc whatis-regexp-test {var result} {\n-    global gdb_tests\n-\n-    lappend gdb_tests $var $result whatis 1\n+proc whatis-regexp-test {var result {selector {}}} {\n+    register_gdb_test $var $result whatis 1 $selector\n }\n \n # Utility for testing variable values using gdb, invoked via dg-final.\n-# Tests all tests indicated by note-test and regexp-test.\n+# Tests all tests indicated by note-test, whatis-test, and the regexp versions.\n #\n # Argument 0 is the marker on which to put a breakpoint\n # Argument 2 handles expected failures and the like\n@@ -144,14 +152,15 @@ proc gdb-test { marker {selector {}} {load_xmethods 0} } {\n     puts $fd \"info share\"\n \n     set count 0\n-    foreach {var result kind rexp} $gdb_tests {\n+    foreach {var result kind rexp xfail} $gdb_tests {\n \tincr count\n \tset gdb_var($count) $var\n \tset gdb_expected($count) $result\n \tif {$kind == \"whatis\"} {\n \t    if {$do_whatis_tests} {\n \t\tset gdb_is_type($count) 1\n \t\tset gdb_is_regexp($count) $rexp\n+\t\tset gdb_is_xfail($count) $xfail\n \t\tset gdb_command($count) \"whatis $var\"\n \t    } else {\n \t        unsupported \"$testname\"\n@@ -161,6 +170,7 @@ proc gdb-test { marker {selector {}} {load_xmethods 0} } {\n \t} else {\n \t    set gdb_is_type($count) 0\n \t    set gdb_is_regexp($count) $rexp\n+\t    set gdb_is_xfail($count) $xfail\n \t    set gdb_command($count) \"print $var\"\n \t}\n \tputs $fd $gdb_command($count)\n@@ -198,11 +208,20 @@ proc gdb-test { marker {selector {}} {load_xmethods 0} } {\n \t    }\n \n \t    if {$match} {\n-\t\tpass \"$testname $gdb_command($test_counter)\"\n+\t\tif {$gdb_is_xfail($test_counter)} {\n+\t\t    xpass \"$testname $gdb_command($test_counter)\"\n+\t\t    verbose \" matched =>$first<=\"\n+\t\t} else {\n+\t\t    pass \"$testname $gdb_command($test_counter)\"\n+\t\t}\n \t    } else {\n-\t\tfail \"$testname $gdb_command($test_counter)\"\n-\t\tverbose \"     got =>$first<=\"\n-\t\tverbose \"expected =>$gdb_expected($test_counter)<=\"\n+\t\tif {$gdb_is_xfail($test_counter)} {\n+\t\t    xfail \"$testname $gdb_command($test_counter)\"\n+\t\t} else {\n+\t\t    fail \"$testname $gdb_command($test_counter)\"\n+\t\t    verbose \"     got =>$first<=\"\n+\t\t    verbose \"expected =>$gdb_expected($test_counter)<=\"\n+\t\t}\n \t    }\n \n \t    if {$test_counter == $count} {"}, {"sha": "00255c9ebca24027d868df1cb87fb712a580a585", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/80276.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8ec68e2a7731ab28e6fd1512c1c631f086676/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8ec68e2a7731ab28e6fd1512c1c631f086676/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2F80276.cc?ref=30b8ec68e2a7731ab28e6fd1512c1c631f086676", "patch": "@@ -46,7 +46,7 @@ main()\n   // { dg-final { whatis-regexp-test p1 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?vector<int>\\\\*>>>\" } }\n   // { dg-final { whatis-regexp-test p2 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?set<int>\\\\*>>\\\\\\[\\\\\\]>\" } }\n   // { dg-final { whatis-regexp-test p3 \"std::unique_ptr<std::(__debug::)?set<std::unique_ptr<std::(__debug::)?vector<int>\\\\*>>\\\\\\[10\\\\\\]>\" } }\n-  // { dg-final { whatis-regexp-test p4 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?list<std::string>\\\\\\[\\\\\\]>>\\\\\\[99\\\\\\]>\" } }\n+  // { dg-final { whatis-regexp-test p4 \"std::unique_ptr<std::(__debug::)?vector<std::unique_ptr<std::(__debug::)?list<std::string>\\\\\\[\\\\\\]>>\\\\\\[99\\\\\\]>\" { xfail c++20 } } }\n \n   placeholder(&p1);\t\t// Mark SPOT\n   placeholder(&p2);"}, {"sha": "af948e02365e3259e1590d593d54d211b7f46a2e", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/libfundts.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8ec68e2a7731ab28e6fd1512c1c631f086676/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8ec68e2a7731ab28e6fd1512c1c631f086676/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Flibfundts.cc?ref=30b8ec68e2a7731ab28e6fd1512c1c631f086676", "patch": "@@ -50,7 +50,7 @@ main()\n   om = std::map<int, double>{ {1, 2.}, {3, 4.}, {5, 6.} };\n // { dg-final { regexp-test om {std::experimental::optional<std::(__debug::)?map<int, double>> containing std::(__debug::)?map with 3 elements = {\\[1\\] = 2, \\[3\\] = 4, \\[5\\] = 6}} } }\n   optional<std::string> os{ \"stringy\" };\n-// { dg-final { note-test os {std::experimental::optional<std::string> = {[contained value] = \"stringy\"}} } }\n+// { dg-final { note-test os {std::experimental::optional<std::string> = {[contained value] = \"stringy\"}} { xfail c++20 } } }\n \n   any a;\n // { dg-final { note-test a {std::experimental::any [no contained value]} } }\n@@ -61,7 +61,7 @@ main()\n   any ap = (void*)nullptr;\n // { dg-final { note-test ap {std::experimental::any containing void * = {[contained value] = 0x0}} } }\n   any as = *os;\n-// { dg-final { note-test as {std::experimental::any containing std::string = {[contained value] = \"stringy\"}} } }\n+// { dg-final { note-test as {std::experimental::any containing std::string = {[contained value] = \"stringy\"}} { xfail c++20 } } }\n   any as2(\"stringiest\");\n // { dg-final { regexp-test as2 {std::experimental::any containing const char \\* = {\\[contained value\\] = 0x[[:xdigit:]]+ \"stringiest\"}} } }\n   any am = *om;"}, {"sha": "96686b268bcca5dcc1d91a871fe69fb982d2315e", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/prettyprinters.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b8ec68e2a7731ab28e6fd1512c1c631f086676/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fprettyprinters.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b8ec68e2a7731ab28e6fd1512c1c631f086676/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fprettyprinters.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fprettyprinters.exp?ref=30b8ec68e2a7731ab28e6fd1512c1c631f086676", "patch": "@@ -49,7 +49,7 @@ gdb-dg-runtest [lsort [glob $srcdir/$subdir/*.cc]] \\\n \n if { [check_effective_target_lto] } {\n   append cxxflags \" -flto\"\n-  # work around sourceware.org 20882\n+  # Work around linker bug https://sourceware.org/PR20882\n   regsub {^(.*)-Wl,--gc-sections(.*)$} $cxxldflags {\\1\\2} cxxldflags\n   gdb-dg-runtest [lsort [glob $srcdir/$subdir/*.cc]] \\\n     \"\" \"$DEFAULT_CXXFLAGS -flto $PCH_CXXFLAGS\""}]}