{"sha": "3af8a0a8101a69866dad7f8a3e2d687040838260", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmOGEwYTgxMDFhNjk4NjZkYWQ3ZjhhM2UyZDY4NzA0MDgzODI2MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-03T16:32:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-03T16:32:17Z"}, "message": "escape: Stack allocate non-escaping expressions.\n\n    \n    Stack allocate expressions that the analysis tracked and determined\n    did not escape.\n    \n    Reviewed-on: https://go-review.googlesource.com/22377\n\nFrom-SVN: r239083", "tree": {"sha": "9077206ae7a7ad737453d252c89fd7742f09cd64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9077206ae7a7ad737453d252c89fd7742f09cd64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af8a0a8101a69866dad7f8a3e2d687040838260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af8a0a8101a69866dad7f8a3e2d687040838260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af8a0a8101a69866dad7f8a3e2d687040838260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af8a0a8101a69866dad7f8a3e2d687040838260/comments", "author": null, "committer": null, "parents": [{"sha": "612a6ffe0ea3b27a5f8180a8d0844593a791568c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612a6ffe0ea3b27a5f8180a8d0844593a791568c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612a6ffe0ea3b27a5f8180a8d0844593a791568c"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "5009c891e8aed16d76aa2093125154db22f3a669", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af8a0a8101a69866dad7f8a3e2d687040838260/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af8a0a8101a69866dad7f8a3e2d687040838260/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3af8a0a8101a69866dad7f8a3e2d687040838260", "patch": "@@ -1,4 +1,4 @@\n-89a0b3a04f80df388242166b8835f12e82ceb194\n+7d6c53910e52b7db2a77c1c1c3bc2c170283a1fa\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "ff2893f960c154f840a86b53b7c7b6a574849579", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af8a0a8101a69866dad7f8a3e2d687040838260/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af8a0a8101a69866dad7f8a3e2d687040838260/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3af8a0a8101a69866dad7f8a3e2d687040838260", "patch": "@@ -252,7 +252,9 @@ Expression::convert_type_to_interface(Type* lhs_type, Expression* rhs,\n   else\n     {\n       // We are assigning a non-pointer value to the interface; the\n-      // interface gets a copy of the value in the heap.\n+      // interface gets a copy of the value in the heap if it escapes.\n+      // TODO(cmang): Associate escape state state of RHS with newly\n+      // created OBJ.\n       obj = Expression::make_heap_expression(rhs, location);\n     }\n \n@@ -729,6 +731,13 @@ Var_expression::do_address_taken(bool escapes)\n       else\n \tgo_unreachable();\n     }\n+\n+  if (this->variable_->is_variable()\n+      && this->variable_->var_value()->is_in_heap())\n+    {\n+      Node::make_node(this)->set_encoding(Node::ESCAPE_HEAP);\n+      Node::make_node(this->variable_)->set_encoding(Node::ESCAPE_HEAP);\n+    }\n }\n \n // Get the backend representation for a reference to a variable.\n@@ -831,6 +840,10 @@ Enclosed_var_expression::do_address_taken(bool escapes)\n       else\n \tgo_unreachable();\n     }\n+\n+  if (this->variable_->is_variable()\n+      && this->variable_->var_value()->is_in_heap())\n+    Node::make_node(this->variable_)->set_encoding(Node::ESCAPE_HEAP);\n }\n \n // Ast dump for enclosed variable expression.\n@@ -3769,9 +3782,18 @@ Unary_expression::do_flatten(Gogo* gogo, Named_object*,\n       // value does not escape.  If this->escapes_ is true, we may be\n       // able to set it to false if taking the address of a variable\n       // that does not escape.\n-      if (this->escapes_ && this->expr_->var_expression() != NULL)\n+      Node* n = Node::make_node(this);\n+      if ((n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n+\tthis->escapes_ = false;\n+\n+      Named_object* var = NULL;\n+      if (this->expr_->var_expression() != NULL)\n+\tvar = this->expr_->var_expression()->named_object();\n+      else if (this->expr_->enclosed_var_expression() != NULL)\n+\tvar = this->expr_->enclosed_var_expression()->variable();\n+\n+      if (this->escapes_ && var != NULL)\n \t{\n-\t  Named_object* var = this->expr_->var_expression()->named_object();\n \t  if (var->is_variable())\n \t    this->escapes_ = var->var_value()->escapes();\n \t  if (var->is_result_variable())\n@@ -11658,7 +11680,9 @@ Allocation_expression::do_get_backend(Translate_context* context)\n   Gogo* gogo = context->gogo();\n   Location loc = this->location();\n \n-  if (this->allocate_on_stack_)\n+  Node* n = Node::make_node(this);\n+  if (this->allocate_on_stack_\n+      || (n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n     {\n       int64_t size;\n       bool ok = this->type_->backend_type_size(gogo, &size);\n@@ -12344,7 +12368,15 @@ Slice_construction_expression::do_get_backend(Translate_context* context)\n       space->unary_expression()->set_is_slice_init();\n     }\n   else\n-    space = Expression::make_heap_expression(array_val, loc);\n+    {\n+      space = Expression::make_heap_expression(array_val, loc);\n+      Node* n = Node::make_node(this);\n+      if ((n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n+\t{\n+\t  n = Node::make_node(space);\n+\t  n->set_encoding(Node::ESCAPE_NONE);\n+\t}\n+    }\n \n   // Build a constructor for the slice.\n \n@@ -13417,8 +13449,12 @@ Heap_expression::do_get_backend(Translate_context* context)\n   Location loc = this->location();\n   Gogo* gogo = context->gogo();\n   Btype* btype = this->type()->get_backend(gogo);\n-  Bexpression* space = Expression::make_allocation(this->expr_->type(),\n-\t\t\t\t\t\t   loc)->get_backend(context);\n+\n+  Expression* alloc = Expression::make_allocation(this->expr_->type(), loc);\n+  Node* n = Node::make_node(this);\n+  if ((n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n+    alloc->allocation_expression()->set_allocate_on_stack();\n+  Bexpression* space = alloc->get_backend(context);\n \n   Bstatement* decl;\n   Named_object* fn = context->function();"}]}