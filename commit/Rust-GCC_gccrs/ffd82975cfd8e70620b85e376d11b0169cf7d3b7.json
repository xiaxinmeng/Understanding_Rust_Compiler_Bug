{"sha": "ffd82975cfd8e70620b85e376d11b0169cf7d3b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZkODI5NzVjZmQ4ZTcwNjIwYjg1ZTM3NmQxMWIwMTY5Y2Y3ZDNiNw==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@gmail.com", "date": "2007-07-21T17:59:39Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2007-07-21T17:59:39Z"}, "message": "re PR fortran/32823 (internal compiler error: in gfc_trans_assignment_1)\n\n        PR fortran/32823\n        * trans-intrinsic.c (gfc_conv_intrinsic_int): Evaluate all\n        arguments passed, not just the first one. Adjust code to refer\n        to \"args[0]\" instead of \"arg\" as a result.\n\n        * gfortran.dg/int_2.f90: New test.\n\nFrom-SVN: r126810", "tree": {"sha": "f11e36af4903dff7483270fdca24458ec6221d96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f11e36af4903dff7483270fdca24458ec6221d96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffd82975cfd8e70620b85e376d11b0169cf7d3b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd82975cfd8e70620b85e376d11b0169cf7d3b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd82975cfd8e70620b85e376d11b0169cf7d3b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/comments", "author": {"login": "lee-m", "id": 1028098, "node_id": "MDQ6VXNlcjEwMjgwOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1028098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lee-m", "html_url": "https://github.com/lee-m", "followers_url": "https://api.github.com/users/lee-m/followers", "following_url": "https://api.github.com/users/lee-m/following{/other_user}", "gists_url": "https://api.github.com/users/lee-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/lee-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lee-m/subscriptions", "organizations_url": "https://api.github.com/users/lee-m/orgs", "repos_url": "https://api.github.com/users/lee-m/repos", "events_url": "https://api.github.com/users/lee-m/events{/privacy}", "received_events_url": "https://api.github.com/users/lee-m/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c7471ff79b86d7a8992c641b3f93f2cc37ee059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c7471ff79b86d7a8992c641b3f93f2cc37ee059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c7471ff79b86d7a8992c641b3f93f2cc37ee059"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "575e1e947f3fa51b1353d8bf1a75770db78757e3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ffd82975cfd8e70620b85e376d11b0169cf7d3b7", "patch": "@@ -1,3 +1,10 @@\n+2007-07-21  Lee Millward  <lee.millward@gmail.com>\n+\n+\tPR fortran/32823\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_int): Evaluate all\n+\targuments passed, not just the first one. Adjust code to \n+\trefer to \"args[0]\" instead of \"arg\" as a result.\n+\t\n 2007-07-19  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/32600"}, {"sha": "02a64e53193cc4e7417c623c1218420a670078fc", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=ffd82975cfd8e70620b85e376d11b0169cf7d3b7", "patch": "@@ -479,32 +479,37 @@ static void\n gfc_conv_intrinsic_int (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n {\n   tree type;\n-  tree arg;\n+  tree *args;\n+  int nargs;\n \n-  /* Evaluate the argument.  */\n+  nargs = gfc_intrinsic_argument_list_length (expr);\n+  args = alloca (sizeof (tree) * nargs);\n+\n+  /* Evaluate the argument, we process all arguments even though we only \n+     use the first one for code generation purposes.  */\n   type = gfc_typenode_for_spec (&expr->ts);\n   gcc_assert (expr->value.function.actual->expr);\n-  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  gfc_conv_intrinsic_function_args (se, expr, args, nargs);\n \n-  if (TREE_CODE (TREE_TYPE (arg)) == INTEGER_TYPE)\n+  if (TREE_CODE (TREE_TYPE (args[0])) == INTEGER_TYPE)\n     {\n       /* Conversion to a different integer kind.  */\n-      se->expr = convert (type, arg);\n+      se->expr = convert (type, args[0]);\n     }\n   else\n     {\n       /* Conversion from complex to non-complex involves taking the real\n          component of the value.  */\n-      if (TREE_CODE (TREE_TYPE (arg)) == COMPLEX_TYPE\n+      if (TREE_CODE (TREE_TYPE (args[0])) == COMPLEX_TYPE\n \t  && expr->ts.type != BT_COMPLEX)\n \t{\n \t  tree artype;\n \n-\t  artype = TREE_TYPE (TREE_TYPE (arg));\n-\t  arg = build1 (REALPART_EXPR, artype, arg);\n+\t  artype = TREE_TYPE (TREE_TYPE (args[0]));\n+\t  args[0] = build1 (REALPART_EXPR, artype, args[0]);\n \t}\n \n-      se->expr = build_fix_expr (&se->pre, arg, type, op);\n+      se->expr = build_fix_expr (&se->pre, args[0], type, op);\n     }\n }\n "}, {"sha": "d4816ec5f8916982e18445fe68d1e5ff388bc83d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffd82975cfd8e70620b85e376d11b0169cf7d3b7", "patch": "@@ -1,3 +1,8 @@\n+2007-07-21  Lee Millward  <lee.millward@gmail.com>\n+\n+\tPR fortran/32823\n+\t* gfortran.dg/int_2.f90: New test.\n+\t\n 2007-07-21  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \t* gcc.dg/inline-23.c: Use pointer sized type for cast from pointer."}, {"sha": "b9a3ec43d4cfab98a9bcac945897cab196a126f8", "filename": "gcc/testsuite/gfortran.dg/int_2.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd82975cfd8e70620b85e376d11b0169cf7d3b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fint_2.f90?ref=ffd82975cfd8e70620b85e376d11b0169cf7d3b7", "patch": "@@ -0,0 +1,28 @@\n+! PR fortran/32823\n+! { dg-do compile }\n+! { dg-final { cleanup-modules \"token_module\" } }\n+\n+module token_module\n+\n+      integer,     parameter :: INT8  = SELECTED_INT_KIND(16)\n+      integer,     parameter :: REAL8 = SELECTED_REAL_KIND(12)\n+\n+contains\n+      subroutine token_allreduce_i8_v(dowhat, array, result, length)\n+\n+\n+        character(*),  intent(in)    :: dowhat\n+        integer,       intent(in)    :: length\n+        integer(INT8), intent(in)    :: array(*)\n+        integer(INT8), intent(inout) :: result(*)\n+\n+\n+        real(REAL8) :: copy_r8(length), result_r8(length)\n+\n+\n+          result(1:length) = int(result_r8(1:length), INT8)\n+\n+\n+      end subroutine token_allreduce_i8_v\n+\n+end module token_module"}]}