{"sha": "eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIxNDBiYTAzMzRjZDlkN2ZkMGJmNWEyNGNlZjZjNmFiMTBlZWYyZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-01T01:08:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-01T01:08:47Z"}, "message": "ipa-inline.c (can_inline_edge_p): Match opt_for_fn on inline target; also match flag_ipa_devirt.\n\n\t* ipa-inline.c (can_inline_edge_p): Match opt_for_fn on inline\n\ttarget; also match flag_ipa_devirt.\n\nFrom-SVN: r221084", "tree": {"sha": "51121cc6d400b1b17903180803092d7e81e9140c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51121cc6d400b1b17903180803092d7e81e9140c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e/comments", "author": null, "committer": null, "parents": [{"sha": "d46db9123ac6e938d4b135295243e9b8c04196bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46db9123ac6e938d4b135295243e9b8c04196bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46db9123ac6e938d4b135295243e9b8c04196bb"}], "stats": {"total": 75, "additions": 44, "deletions": 31}, "files": [{"sha": "ee6f7fe7fd9a8e5983c9fcd144621b3525145b0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e", "patch": "@@ -1,5 +1,9 @@\n-2015-03-01  Martin Liska  <mliska@suse.cz>\n+2015-02-28  Jan Hubicka  <hubicka@ucw.cz>\n \n+\t* ipa-inline.c (can_inline_edge_p): Match opt_for_fn on inline\n+\ttarget; also match flag_ipa_devirt.\n+\n+2015-03-01  Martin Liska  <mliska@suse.cz>\n \t    Jan Hubicka   <hubicka@ucw.cz>\n \n \t* ipa-icf-gimple.c (func_checker::compare_variable_decl):"}, {"sha": "db77d12e85fe441fe74458d6ec4c368e59b9fff9", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=eb140ba0334cd9d7fd0bf5a24cef6c6ab10eef2e", "patch": "@@ -310,7 +310,7 @@ sanitize_attrs_match_for_inline_p (const_tree caller, const_tree callee)\n \n static bool\n can_inline_edge_p (struct cgraph_edge *e, bool report,\n-\t\t   bool disregard_limits = false)\n+\t\t   bool disregard_limits = false, bool early = false)\n {\n   bool inlinable = true;\n   enum availability avail;\n@@ -409,39 +409,48 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n \t Not even for always_inline declared functions.  */\n       /* Strictly speaking only when the callee contains signed integer\n          math where overflow is undefined.  */\n-      if ((opt_for_fn (e->caller->decl, flag_strict_overflow)\n-\t   != opt_for_fn (e->caller->decl, flag_strict_overflow))\n-\t  || (opt_for_fn (e->caller->decl, flag_wrapv)\n-\t      != opt_for_fn (e->caller->decl, flag_wrapv))\n-\t  || (opt_for_fn (e->caller->decl, flag_trapv)\n-\t      != opt_for_fn (e->caller->decl, flag_trapv))\n+      if ((opt_for_fn (caller->decl, flag_strict_overflow)\n+\t   != opt_for_fn (caller->decl, flag_strict_overflow))\n+\t  || (opt_for_fn (caller->decl, flag_wrapv)\n+\t      != opt_for_fn (caller->decl, flag_wrapv))\n+\t  || (opt_for_fn (caller->decl, flag_trapv)\n+\t      != opt_for_fn (caller->decl, flag_trapv))\n \t  /* Strictly speaking only when the callee contains memory\n \t     accesses that are not using alias-set zero anyway.  */\n-\t  || (opt_for_fn (e->caller->decl, flag_strict_aliasing)\n-\t      != opt_for_fn (e->caller->decl, flag_strict_aliasing))\n+\t  || (opt_for_fn (caller->decl, flag_strict_aliasing)\n+\t      != opt_for_fn (caller->decl, flag_strict_aliasing))\n \t  /* Strictly speaking only when the callee uses FP math.  */\n-\t  || (opt_for_fn (e->caller->decl, flag_rounding_math)\n-\t      != opt_for_fn (e->caller->decl, flag_rounding_math))\n-\t  || (opt_for_fn (e->caller->decl, flag_trapping_math)\n-\t      != opt_for_fn (e->caller->decl, flag_trapping_math))\n-\t  || (opt_for_fn (e->caller->decl, flag_unsafe_math_optimizations)\n-\t      != opt_for_fn (e->caller->decl, flag_unsafe_math_optimizations))\n-\t  || (opt_for_fn (e->caller->decl, flag_finite_math_only)\n-\t      != opt_for_fn (e->caller->decl, flag_finite_math_only))\n-\t  || (opt_for_fn (e->caller->decl, flag_signaling_nans)\n-\t      != opt_for_fn (e->caller->decl, flag_signaling_nans))\n-\t  || (opt_for_fn (e->caller->decl, flag_cx_limited_range)\n-\t      != opt_for_fn (e->caller->decl, flag_cx_limited_range))\n-\t  || (opt_for_fn (e->caller->decl, flag_signed_zeros)\n-\t      != opt_for_fn (e->caller->decl, flag_signed_zeros))\n-\t  || (opt_for_fn (e->caller->decl, flag_associative_math)\n-\t      != opt_for_fn (e->caller->decl, flag_associative_math))\n-\t  || (opt_for_fn (e->caller->decl, flag_reciprocal_math)\n-\t      != opt_for_fn (e->caller->decl, flag_reciprocal_math))\n+\t  || (opt_for_fn (caller->decl, flag_rounding_math)\n+\t      != opt_for_fn (caller->decl, flag_rounding_math))\n+\t  || (opt_for_fn (caller->decl, flag_trapping_math)\n+\t      != opt_for_fn (caller->decl, flag_trapping_math))\n+\t  || (opt_for_fn (caller->decl, flag_unsafe_math_optimizations)\n+\t      != opt_for_fn (caller->decl, flag_unsafe_math_optimizations))\n+\t  || (opt_for_fn (caller->decl, flag_finite_math_only)\n+\t      != opt_for_fn (caller->decl, flag_finite_math_only))\n+\t  || (opt_for_fn (caller->decl, flag_signaling_nans)\n+\t      != opt_for_fn (caller->decl, flag_signaling_nans))\n+\t  || (opt_for_fn (caller->decl, flag_cx_limited_range)\n+\t      != opt_for_fn (caller->decl, flag_cx_limited_range))\n+\t  || (opt_for_fn (caller->decl, flag_signed_zeros)\n+\t      != opt_for_fn (caller->decl, flag_signed_zeros))\n+\t  || (opt_for_fn (caller->decl, flag_associative_math)\n+\t      != opt_for_fn (caller->decl, flag_associative_math))\n+\t  || (opt_for_fn (caller->decl, flag_reciprocal_math)\n+\t      != opt_for_fn (caller->decl, flag_reciprocal_math))\n \t  /* Strictly speaking only when the callee contains function\n \t     calls that may end up setting errno.  */\n-\t  || (opt_for_fn (e->caller->decl, flag_errno_math)\n-\t      != opt_for_fn (e->caller->decl, flag_errno_math)))\n+\t  || (opt_for_fn (caller->decl, flag_errno_math)\n+\t      != opt_for_fn (caller->decl, flag_errno_math))\n+\t  /* When devirtualization is diabled for callee, it is not safe\n+\t     to inline it as we possibly mangled the type info.\n+\t     Allow early inlining of always inlines.  */\n+\t  || (opt_for_fn (caller->decl, flag_devirtualize)\n+\t      && !opt_for_fn (callee->decl, flag_devirtualize)\n+\t      && (!early\n+\t\t  || (!DECL_DISREGARD_INLINE_LIMITS (callee->decl)\n+\t\t      || !lookup_attribute (\"always_inline\",\n+\t\t\t\t            DECL_ATTRIBUTES (callee->decl))))))\n \t{\n \t  e->inline_failed = CIF_OPTIMIZATION_MISMATCH;\n \t  inlinable = false;\n@@ -532,7 +541,7 @@ can_early_inline_edge_p (struct cgraph_edge *e)\n \tfprintf (dump_file, \"  edge not inlinable: not in SSA form\\n\");\n       return false;\n     }\n-  if (!can_inline_edge_p (e, true))\n+  if (!can_inline_edge_p (e, true, false, true))\n     return false;\n   return true;\n }"}]}