{"sha": "ac871ee12ae7743e20bf25e4470449211b45f47f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4NzFlZTEyYWU3NzQzZTIwYmYyNWU0NDcwNDQ5MjExYjQ1ZjQ3Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-06-04T15:32:08Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-06-04T15:32:08Z"}, "message": "dg-pch.exp: New file.\n\n\t* lib/dg-pch.exp: New file.\n\t* g++.dg/pch/pch.exp: Use dg-pch.exp.\n\t* gcc.dg/pch/pch.exp: Likewise.\n\nFrom-SVN: r67443", "tree": {"sha": "c91460945cebb538608da36464b2343f5e517132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c91460945cebb538608da36464b2343f5e517132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac871ee12ae7743e20bf25e4470449211b45f47f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac871ee12ae7743e20bf25e4470449211b45f47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac871ee12ae7743e20bf25e4470449211b45f47f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac871ee12ae7743e20bf25e4470449211b45f47f/comments", "author": null, "committer": null, "parents": [{"sha": "9739c90c8dd255fbc0a47814454b70f270f09aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9739c90c8dd255fbc0a47814454b70f270f09aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9739c90c8dd255fbc0a47814454b70f270f09aad"}], "stats": {"total": 196, "additions": 86, "deletions": 110}, "files": [{"sha": "57c0f71b4b2cd46e72719d260c7425939d696b4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac871ee12ae7743e20bf25e4470449211b45f47f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac871ee12ae7743e20bf25e4470449211b45f47f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac871ee12ae7743e20bf25e4470449211b45f47f", "patch": "@@ -1,3 +1,9 @@\n+2003-06-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* lib/dg-pch.exp: New file.\n+\t* g++.dg/pch/pch.exp: Use dg-pch.exp.\n+\t* gcc.dg/pch/pch.exp: Likewise.\n+\n 2003-06-04  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/builtins-2.c: Add tests for tan(atan(x))."}, {"sha": "8d2848548f8a8dc6308d617fe825ca7ba6a99d3f", "filename": "gcc/testsuite/g++.dg/pch/pch.exp", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac871ee12ae7743e20bf25e4470449211b45f47f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac871ee12ae7743e20bf25e4470449211b45f47f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpch%2Fpch.exp?ref=ac871ee12ae7743e20bf25e4470449211b45f47f", "patch": "@@ -19,6 +19,7 @@\n \n # Load support procs.\n load_lib \"g++-dg.exp\"\n+load_lib dg-pch.exp\n \n # Initialize `dg'.\n dg-init\n@@ -27,63 +28,9 @@ set old_dg_do_what_default \"${dg-do-what-default}\"\n \n # Main loop.\n foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n-    global runtests dg-do-what-default\n-\n-    # If we're only testing specific files and this isn't one of them, skip it.\n-    if ![runtest_file_p $runtests $test] {\n-\tcontinue\n-    }\n-    set nshort \"$subdir/[file tail $test]\"\n-    set bname \"[file rootname [file tail $test]]\"\n-\n-    catch { file delete \"$bname.H.gch\" }\n-    catch { file delete \"$bname.s\" }\n-    catch { file delete \"$bname.s-gch\" }\n-\n     # We don't try to use the loop-optimizing options, since they are highly\n     # unlikely to make any difference to PCH.\n-    foreach flags { \"-g\" \"-O2 -g\" \"-O2\" } {\n-\tverbose \"Testing $nshort, $flags\" 1\n-\n-\t# For the header files, the default is to precompile.\n-\tset dg-do-what-default precompile\n-\tcatch { file delete \"$bname.H\" }\n-\tfile copy \"[file rootname $test].Hs\" \"$bname.H\"\n-\tdg-test -keep-output \"$bname.H\" $flags \"\"\n-\n-\t# For the rest, the default is to compile to .s.\n-\tset dg-do-what-default compile\n-\n-\tif { [ file exists \"$bname.H.gch\" ] } {\n-\t    # Ensure that the PCH file is used, not the original header.\n-\t    file delete \"$bname.H\"\n-\n-\t    dg-test -keep-output $test $flags \"-I.\"\n-\t    file delete \"$bname.H.gch\"\n-\t    if { [ file exists \"$bname.s\" ] } {\n-\t\tfile rename \"$bname.s\" \"$bname.s-gch\"\n-\t\tfile copy \"[file rootname $test].Hs\" \"$bname.H\"\n-\t\tdg-test -keep-output $test $flags \"-I.\"\n-\t\tset tmp [ diff \"$bname.s\" \"$bname.s-gch\" ]\n-\t\tif { $tmp == 0 } {\n-\t\t    untested \"$nshort $flags assembly comparison\"\n-\t\t} elseif { $tmp == 1 } {\n-\t\t    pass \"$nshort $flags assembly comparison\"\n-\t\t} else {\n-\t\t    fail \"$nshort $flags assembly comparison\"\n-\t\t}\n-\t\tfile delete \"$bname.H\"\n-\t\tfile delete \"$bname.s\"\n-\t\tfile delete \"$bname.s-gch\"\n-\t    } else {\n-\t\tuntested \"$nshort $flags assembly comparison\"\n-\t    }\n-\n-\t} else {\n-\t    untested \"$nshort $flags\"\n-\t    untested \"$nshort $flags assembly comparison\"\n-\t}\n-    }\n+    dg-pch $subdir $test [list \"-g\" \"-O2 -g\" \"-O2\"] \".H\"\n }\n \n set dg-do-what-default \"$old_dg_do_what_default\""}, {"sha": "8ed26ba7ef7db0e20f2797fec2600d97eabbd177", "filename": "gcc/testsuite/gcc.dg/pch/pch.exp", "status": "modified", "additions": 3, "deletions": 55, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac871ee12ae7743e20bf25e4470449211b45f47f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac871ee12ae7743e20bf25e4470449211b45f47f/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpch%2Fpch.exp?ref=ac871ee12ae7743e20bf25e4470449211b45f47f", "patch": "@@ -19,6 +19,7 @@\n \n # Load support procs.\n load_lib gcc-dg.exp\n+load_lib dg-pch.exp\n \n # Initialize `dg'.\n dg-init\n@@ -27,66 +28,13 @@ set old_dg_do_what_default \"${dg-do-what-default}\"\n \n # Main loop.\n foreach test [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n-    global runtests torture_without_loops dg-do-what-default\n-\n-    # If we're only testing specific files and this isn't one of them, skip it.\n-    if ![runtest_file_p $runtests $test] {\n-\tcontinue\n-    }\n-    set nshort \"$subdir/[file tail $test]\"\n-    set bname \"[file rootname [file tail $test]]\"\n-\n-    catch { file delete \"$bname.h.gch\" }\n-    catch { file delete \"$bname.s\" }\n-    catch { file delete \"$bname.s-gch\" }\n+    global torture_without_loops\n \n     # We don't try to use the loop-optimizing options, since they are highly\n     # unlikely to make any difference to PCH.  However, we do want to\n     # add -O0 -g, since users who want PCH usually want debugging and quick\n     # compiles.\n-    set pch_torture [concat [list {-O0 -g}] $torture_without_loops]\n-    foreach flags $pch_torture {\n-\tverbose \"Testing $nshort, $flags\" 1\n-\n-\t# For the header files, the default is to precompile.\n-\tset dg-do-what-default precompile\n-\tcatch { file delete \"$bname.h\" }\n-\tfile copy \"[file rootname $test].hs\" \"$bname.h\"\n-\tdg-test -keep-output \"$bname.h\" $flags \"\"\n-\n-\t# For the rest, the default is to compile to .s.\n-\tset dg-do-what-default compile\n-\n-\tif { [ file exists \"$bname.h.gch\" ] } {\n-\t    # Ensure that the PCH file is used, not the original header.\n-\t    file delete \"$bname.h\"\n-\n-\t    dg-test -keep-output $test $flags \"-I.\"\n-\t    file delete \"$bname.h.gch\"\n-\t    if { [ file exists \"$bname.s\" ] } {\n-\t\tfile rename \"$bname.s\" \"$bname.s-gch\"\n-\t\tfile copy \"[file rootname $test].hs\" \"$bname.h\"\n-\t\tdg-test -keep-output $test $flags \"-I.\"\n-\t\tset tmp [ diff \"$bname.s\" \"$bname.s-gch\" ]\n-\t\tif { $tmp == 0 } {\n-\t\t    untested \"$nshort $flags assembly comparison\"\n-\t\t} elseif { $tmp == 1 } {\n-\t\t    pass \"$nshort $flags assembly comparison\"\n-\t\t} else {\n-\t\t    fail \"$nshort $flags assembly comparison\"\n-\t\t}\n-\t\tfile delete \"$bname.h\"\n-\t\tfile delete \"$bname.s\"\n-\t\tfile delete \"$bname.s-gch\"\n-\t    } else {\n-\t\tuntested \"$nshort $flags assembly comparison\"\n-\t    }\n-\n-\t} else {\n-\t    untested \"$nshort $flags\"\n-\t    untested \"$nshort $flags assembly comparison\"\n-\t}\n-    }\n+    dg-pch $subdir $test [concat [list {-O0 -g}] $torture_without_loops] \".h\"\n }\n \n set dg-do-what-default \"$old_dg_do_what_default\""}, {"sha": "e41c59d6b4ae0883446640cf3ef96fd911e363de", "filename": "gcc/testsuite/lib/dg-pch.exp", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac871ee12ae7743e20bf25e4470449211b45f47f/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac871ee12ae7743e20bf25e4470449211b45f47f/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fdg-pch.exp?ref=ac871ee12ae7743e20bf25e4470449211b45f47f", "patch": "@@ -0,0 +1,75 @@\n+#   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+proc dg-pch { subdir test options suffix } {\n+    global runtests dg-do-what-default\n+\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $test] {\n+\tcontinue\n+    }\n+    set nshort \"$subdir/[file tail $test]\"\n+    set bname \"[file rootname [file tail $nshort]]\"\n+\n+    catch { file delete \"$bname$suffix.gch\" }\n+    catch { file delete \"$bname.s\" }\n+    catch { file delete \"$bname.s-gch\" }\n+\n+    # We don't try to use the loop-optimizing options, since they are highly\n+    # unlikely to make any difference to PCH.\n+    foreach flags $options {\n+\tverbose \"Testing $nshort, $flags\" 1\n+\n+\t# For the header files, the default is to precompile.\n+\tset dg-do-what-default precompile\n+\tcatch { file delete \"$bname$suffix\" }\n+\tfile copy \"[file rootname $test]${suffix}s\" \"$bname$suffix\"\n+\tdg-test -keep-output \"$bname$suffix\" $flags \"\"\n+\n+\t# For the rest, the default is to compile to .s.\n+\tset dg-do-what-default compile\n+\n+\tif { [ file exists \"$bname$suffix.gch\" ] } {\n+\t    # Ensure that the PCH file is used, not the original header.\n+\t    file delete \"$bname$suffix\"\n+\n+\t    dg-test -keep-output $test $flags \"-I.\"\n+\t    file delete \"$bname$suffix.gch\"\n+\t    if { [ file exists \"$bname.s\" ] } {\n+\t\tfile rename \"$bname.s\" \"$bname.s-gch\"\n+\t\tfile copy \"[file rootname $test]${suffix}s\" \"$bname$suffix\"\n+\t\tdg-test -keep-output $test $flags \"-I.\"\n+\t\tset tmp [ diff \"$bname.s\" \"$bname.s-gch\" ]\n+\t\tif { $tmp == 0 } {\n+\t\t    untested \"$nshort $flags assembly comparison\"\n+\t\t} elseif { $tmp == 1 } {\n+\t\t    pass \"$nshort $flags assembly comparison\"\n+\t\t} else {\n+\t\t    fail \"$nshort $flags assembly comparison\"\n+\t\t}\n+\t\tfile delete \"$bname$suffix\"\n+\t\tfile delete \"$bname.s\"\n+\t\tfile delete \"$bname.s-gch\"\n+\t    } else {\n+\t\tuntested \"$nshort $flags assembly comparison\"\n+\t    }\n+\n+\t} else {\n+\t    untested \"$nshort $flags\"\n+\t    untested \"$nshort $flags assembly comparison\"\n+\t}\n+    }\n+}"}]}