{"sha": "0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5OGQ4MDY4NjU3ZDRkMWFhNjE1ODU5OTNhMGEzZTVlZjZiZTJjOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-09-09T18:56:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-09-09T18:56:00Z"}, "message": "binary_search.cc: Move...\n\n2007-09-09  Benjamin Kosnik  <bkoz@redhat.com>\n\t\n\t* testsuite/25_algorithms/binary_search.cc: Move...\n\t* testsuite/25_algorithms/binary_search/2.cc: ...here.\n\n\t* testsuite/25_algorithms/sort.cc: Move...\t\n\t* testsuite/25_algorithms/sort/1.cc: ...here.\n\t* testsuite/25_algorithms/partial_sort_copy/2.cc: ...here.\n\t* testsuite/25_algorithms/nth_element/3.cc: ...here.\n\t* testsuite/25_algorithms/partial_sort/2.cc: ...here.\n\t* testsuite/25_algorithms/stable_sort/2.cc: ...here.\n\n\t* testsuite/25_algorithms/min_max.cc: Move...\n\t* testsuite/25_algorithms/min/1.cc: ...here.\n\t* testsuite/25_algorithms/min/2.cc: ...here.\n\t* testsuite/25_algorithms/max/1.cc: ...here.\n\t* testsuite/25_algorithms/max/2.cc: ...here.\n\nFrom-SVN: r128303", "tree": {"sha": "b74db5a6e5f2d85c5ea0f88c4b2ad8360763fad5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b74db5a6e5f2d85c5ea0f88c4b2ad8360763fad5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/comments", "author": null, "committer": null, "parents": [{"sha": "278b0f63a1a1dd1a877209248142193dbad5464d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278b0f63a1a1dd1a877209248142193dbad5464d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278b0f63a1a1dd1a877209248142193dbad5464d"}], "stats": {"total": 700, "additions": 543, "deletions": 157}, "files": [{"sha": "bbb848c05408f1992c4fe71240c832e23b86a418", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -1,3 +1,21 @@\n+2007-09-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\t* testsuite/25_algorithms/binary_search.cc: Move...\n+\t* testsuite/25_algorithms/binary_search/2.cc: ...here.\n+\n+\t* testsuite/25_algorithms/sort.cc: Move...\t\n+\t* testsuite/25_algorithms/sort/1.cc: ...here.\n+\t* testsuite/25_algorithms/partial_sort_copy/2.cc: ...here.\n+\t* testsuite/25_algorithms/nth_element/3.cc: ...here.\n+\t* testsuite/25_algorithms/partial_sort/2.cc: ...here.\n+\t* testsuite/25_algorithms/stable_sort/2.cc: ...here.\n+\n+\t* testsuite/25_algorithms/min_max.cc: Move...\n+\t* testsuite/25_algorithms/min/1.cc: ...here.\n+\t* testsuite/25_algorithms/min/2.cc: ...here.\n+\t* testsuite/25_algorithms/max/1.cc: ...here.\n+\t* testsuite/25_algorithms/max/2.cc: ...here.\n+\n 2007-09-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* testsuite/lib/libstdc++.exp (v3-build-support): Specify output"}, {"sha": "66567f23afd89281df9323670f5c8891f2586bb8", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/2.cc", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F2.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -29,7 +29,6 @@ const int N = sizeof(A) / sizeof(int);\n \n // A comparison, equalivalent to std::greater<int> without the\n // dependency on <functional>.\n-\n struct gt\n {\n     bool", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/binary_search.cc"}, {"sha": "78db439ae36e50df689cf9fd3e188668c23b076f", "filename": "libstdc++-v3/testsuite/25_algorithms/max/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F1.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -0,0 +1,44 @@\n+// 2000-03-29 sss/bkoz\n+\n+// Copyright (C) 2000, 2003, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const int& x = std::max(1, 2);\n+  const int& y = std::max(4, 3);\n+  VERIFY( x == 2 );\n+  VERIFY( y == 4 );\n+\n+  const int& xc = std::max(1, 2, std::greater<int>());\n+  const int& yc = std::max(4, 3, std::greater<int>());\n+  VERIFY( xc == 1 );\n+  VERIFY( yc == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2be6b8f6f86ce531dd1da70d267d0ae9515fda14", "filename": "libstdc++-v3/testsuite/25_algorithms/max/2.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2F2.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -0,0 +1,78 @@\n+// 2000-03-29 sss/bkoz\n+\n+// Copyright (C) 2000, 2003, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+template<typename T> \n+  struct A { static const T a; };\n+\n+template<typename T>\n+const T A<T>::a = T(3);\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( 3 == std::max(A<int>::a, 2) );\n+  VERIFY( 4 == std::max(A<int>::a, 4) );\n+\n+  VERIFY( 3u == std::max(A<unsigned int>::a, 2u) );\n+  VERIFY( 4u == std::max(A<unsigned int>::a, 4u) );\n+\n+  VERIFY( 3l == std::max(A<long>::a, 2l) );\n+  VERIFY( 4l == std::max(A<long>::a, 4l) );\n+\n+  VERIFY( 3ul == std::max(A<unsigned long>::a, 2ul) );\n+  VERIFY( 4ul == std::max(A<unsigned long>::a, 4ul) );\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  VERIFY( 3ll == std::max(A<long long>::a, 2ll) );\n+  VERIFY( 4ll == std::max(A<long long>::a, 4ll) );\n+\n+  VERIFY( 3ull == std::max(A<unsigned long long>::a, 2ull) );\n+  VERIFY( 4ull == std::max(A<unsigned long long>::a, 4ull) );\n+#endif\n+\n+  VERIFY( short(3) == std::max(A<short>::a, short(2)) );\n+  VERIFY( short(4) == std::max(A<short>::a, short(4)) );\n+\n+  VERIFY( (unsigned short)3 == std::max(A<unsigned short>::a, (unsigned short)2) );\n+  VERIFY( (unsigned short)4 == std::max(A<unsigned short>::a, (unsigned short)4) );\n+\n+  VERIFY( (char)3 == std::max(A<char>::a, (char)2) );\n+  VERIFY( (char)4 == std::max(A<char>::a, (char)4) );\n+\n+  VERIFY( (signed char)3 == std::max(A<signed char>::a, (signed char)2) );\n+  VERIFY( (signed char)4 == std::max(A<signed char>::a, (signed char)4) );\n+\n+  VERIFY( (unsigned char)3 == std::max(A<unsigned char>::a, (unsigned char)2) );\n+  VERIFY( (unsigned char)4 == std::max(A<unsigned char>::a, (unsigned char)4) );\n+\n+  VERIFY( (wchar_t)3 == std::max(A<wchar_t>::a, (wchar_t)2) );\n+  VERIFY( (wchar_t)4 == std::max(A<wchar_t>::a, (wchar_t)4) );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "7ff539dc124cc9a720cb6f29d1af4b9d764bae81", "filename": "libstdc++-v3/testsuite/25_algorithms/min/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F1.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -0,0 +1,44 @@\n+// 2000-03-29 sss/bkoz\n+\n+// Copyright (C) 2000, 2003, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const int& z = std::min(1, 2);\n+  const int& w = std::min(4, 3);\n+  VERIFY( z == 1 );\n+  VERIFY( w == 3 );\n+\n+  const int& zc = std::min(1, 2, std::greater<int>());\n+  const int& wc = std::min(4, 3, std::greater<int>());\n+  VERIFY( zc == 2 );\n+  VERIFY( wc == 4 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "864462d08251a3ba68c6b76319d776ad6f7f9901", "filename": "libstdc++-v3/testsuite/25_algorithms/min/2.cc", "status": "renamed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2F2.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -22,31 +22,6 @@\n #include <functional>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  const int& x = std::max(1, 2);\n-  const int& y = std::max(4, 3);\n-  VERIFY( x == 2 );\n-  VERIFY( y == 4 );\n-\n-  const int& xc = std::max(1, 2, std::greater<int>());\n-  const int& yc = std::max(4, 3, std::greater<int>());\n-  VERIFY( xc == 1 );\n-  VERIFY( yc == 3 );\n-\n-  const int& z = std::min(1, 2);\n-  const int& w = std::min(4, 3);\n-  VERIFY( z == 1 );\n-  VERIFY( w == 3 );\n-\n-  const int& zc = std::min(1, 2, std::greater<int>());\n-  const int& wc = std::min(4, 3, std::greater<int>());\n-  VERIFY( zc == 2 );\n-  VERIFY( wc == 4 );\n-}\n-\n template<typename T> \n   struct A { static const T a; };\n \n@@ -103,50 +78,10 @@ void test02()\n \n   VERIFY( (long double)2 == std::min(A<long double>::a, (long double)2) );\n   VERIFY( (long double)3 == std::min(A<long double>::a, (long double)4) );\n-\n-\n-  VERIFY( 3 == std::max(A<int>::a, 2) );\n-  VERIFY( 4 == std::max(A<int>::a, 4) );\n-\n-  VERIFY( 3u == std::max(A<unsigned int>::a, 2u) );\n-  VERIFY( 4u == std::max(A<unsigned int>::a, 4u) );\n-\n-  VERIFY( 3l == std::max(A<long>::a, 2l) );\n-  VERIFY( 4l == std::max(A<long>::a, 4l) );\n-\n-  VERIFY( 3ul == std::max(A<unsigned long>::a, 2ul) );\n-  VERIFY( 4ul == std::max(A<unsigned long>::a, 4ul) );\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  VERIFY( 3ll == std::max(A<long long>::a, 2ll) );\n-  VERIFY( 4ll == std::max(A<long long>::a, 4ll) );\n-\n-  VERIFY( 3ull == std::max(A<unsigned long long>::a, 2ull) );\n-  VERIFY( 4ull == std::max(A<unsigned long long>::a, 4ull) );\n-#endif\n-\n-  VERIFY( short(3) == std::max(A<short>::a, short(2)) );\n-  VERIFY( short(4) == std::max(A<short>::a, short(4)) );\n-\n-  VERIFY( (unsigned short)3 == std::max(A<unsigned short>::a, (unsigned short)2) );\n-  VERIFY( (unsigned short)4 == std::max(A<unsigned short>::a, (unsigned short)4) );\n-\n-  VERIFY( (char)3 == std::max(A<char>::a, (char)2) );\n-  VERIFY( (char)4 == std::max(A<char>::a, (char)4) );\n-\n-  VERIFY( (signed char)3 == std::max(A<signed char>::a, (signed char)2) );\n-  VERIFY( (signed char)4 == std::max(A<signed char>::a, (signed char)4) );\n-\n-  VERIFY( (unsigned char)3 == std::max(A<unsigned char>::a, (unsigned char)2) );\n-  VERIFY( (unsigned char)4 == std::max(A<unsigned char>::a, (unsigned char)4) );\n-\n-  VERIFY( (wchar_t)3 == std::max(A<wchar_t>::a, (wchar_t)2) );\n-  VERIFY( (wchar_t)4 == std::max(A<wchar_t>::a, (wchar_t)4) );\n }\n \n int main()\n {\n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/min_max.cc"}, {"sha": "f1f94bb3c5a047ec7bc0baa6e1930b0f98d57beb", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/3.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F3.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.1 algorithms, sort()\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n+const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n+const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n+const int N = sizeof(A) / sizeof(int);\n+const int logN = 3; // ln(N) rounded up\n+const int P = 7;\n+\n+// comparison predicate for stable_sort: order by rightmost digit\n+struct CompLast\n+{\n+  bool\n+  operator()(const int x, const int y)\n+  { return x % 10 < y % 10; }\n+};\n+\n+// This functor has the equivalent functionality of std::geater<>,\n+// but there is no dependency on <functional> and it also tracks the\n+// number of invocations since creation.\n+class Gt\n+{\n+public:\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  \n+  bool\n+  operator()(const int& x, const int& y)\n+  {\n+    ++itsCount;\n+    return x > y; \n+  }\n+\n+private:\n+    static int itsCount;\n+};\n+\n+int Gt::itsCount = 0;\n+\n+// 25.3.2 nth_element()\n+void\n+test05()\n+{\n+    using std::nth_element;\n+\n+    int s1[N];\n+    std::copy(B, B + N, s1);\n+    VERIFY(std::equal(s1, s1 + N, B));\n+\n+    int* pn = s1 + (N / 2) - 1;\n+    nth_element(s1, pn, s1 + N);\n+    for (const int* i = pn; i < s1 + N; ++i) VERIFY(!(*i < *pn));\n+\n+    CompLast pred;\n+    nth_element(s1, pn, s1 + N, pred);\n+    for (const int* i = pn; i < s1 + N; ++i) VERIFY(!pred(*i, *pn));\n+}\n+\n+int\n+main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "b60a03e7fddc5941ada35d90a2a44fd5ce8ecfb3", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/2.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F2.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.1 algorithms, sort()\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n+const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n+const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n+const int N = sizeof(A) / sizeof(int);\n+const int logN = 3; // ln(N) rounded up\n+const int P = 7;\n+\n+// comparison predicate for stable_sort: order by rightmost digit\n+struct CompLast\n+{\n+  bool\n+  operator()(const int x, const int y)\n+  { return x % 10 < y % 10; }\n+};\n+\n+// This functor has the equivalent functionality of std::geater<>,\n+// but there is no dependency on <functional> and it also tracks the\n+// number of invocations since creation.\n+class Gt\n+{\n+public:\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  \n+  bool\n+  operator()(const int& x, const int& y)\n+  {\n+    ++itsCount;\n+    return x > y; \n+  }\n+\n+private:\n+    static int itsCount;\n+};\n+\n+int Gt::itsCount = 0;\n+\n+// 25.3.1.3 partial_sort()\n+void\n+test03()\n+{\n+    int s1[N];\n+    std::copy(B, B + N, s1);\n+    VERIFY(std::equal(s1, s1 + N, B));\n+\n+    std::partial_sort(s1, s1 + P, s1 + N);\n+    VERIFY(std::equal(s1, s1 + P, A));\n+\n+    Gt gt;\n+    gt.reset();\n+    std::partial_sort(s1, s1 + P, s1 + N, gt);\n+    VERIFY(std::equal(s1, s1 + P, C));\n+}\n+\n+int\n+main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "e21ace07ee2d1d7f80d5ccefee745708241e0863", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/2.cc", "status": "renamed", "additions": 12, "deletions": 91, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F2.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -33,9 +33,9 @@ const int P = 7;\n // comparison predicate for stable_sort: order by rightmost digit\n struct CompLast\n {\n-    bool\n-    operator()(const int x, const int y)\n-    { return x % 10 < y % 10; }\n+  bool\n+  operator()(const int x, const int y)\n+  { return x % 10 < y % 10; }\n };\n \n // This functor has the equivalent functionality of std::geater<>,\n@@ -44,15 +44,15 @@ struct CompLast\n class Gt\n {\n public:\n-    static int count() { return itsCount; }\n-    static void reset() { itsCount = 0; }\n-\n-    bool\n-    operator()(const int& x, const int& y)\n-    {\n-        ++itsCount;\n-        return x > y; \n-    }\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  \n+  bool\n+  operator()(const int& x, const int& y)\n+  {\n+    ++itsCount;\n+    return x > y; \n+  }\n \n private:\n     static int itsCount;\n@@ -61,61 +61,6 @@ class Gt\n int Gt::itsCount = 0;\n \n \n-// 25.3.1.1 sort()\n-void\n-test01()\n-{\n-    int s1[N];\n-    std::copy(B, B + N, s1);\n-    VERIFY(std::equal(s1, s1 + N, B));\n-\n-    std::sort(s1, s1 + N);\n-    VERIFY(std::equal(s1, s1 + N, A));\n-\n-    Gt gt;\n-    gt.reset();\n-    std::sort(s1, s1 + N, gt);\n-    VERIFY(std::equal(s1, s1 + N, C));\n-}\n-\n-// 25.3.1.2 stable_sort()\n-void\n-test02()\n-{\n-    int s1[N];\n-    std::copy(A, A + N, s1);\n-    VERIFY(std::equal(s1, s1 + N, A));\n-\n-    std::stable_sort(s1, s1 + N, CompLast());\n-    VERIFY(std::equal(s1, s1 + N, B));\n-\n-    std::stable_sort(s1, s1 + N);\n-    VERIFY(std::equal(s1, s1 + N, A));\n-\n-    Gt gt;\n-    gt.reset();\n-    std::stable_sort(s1, s1 + N, gt);\n-    VERIFY(std::equal(s1, s1 + N, C));\n-    VERIFY(gt.count() <= N * logN * logN);\n-}\n-\n-// 25.3.1.3 partial_sort()\n-void\n-test03()\n-{\n-    int s1[N];\n-    std::copy(B, B + N, s1);\n-    VERIFY(std::equal(s1, s1 + N, B));\n-\n-    std::partial_sort(s1, s1 + P, s1 + N);\n-    VERIFY(std::equal(s1, s1 + P, A));\n-\n-    Gt gt;\n-    gt.reset();\n-    std::partial_sort(s1, s1 + P, s1 + N, gt);\n-    VERIFY(std::equal(s1, s1 + P, C));\n-}\n-\n // 25.3.1.4 partial_sort_copy()\n void\n test04()\n@@ -139,33 +84,9 @@ test04()\n     VERIFY(std::equal(s2, partial_sort_copy(s1, s1 + N, s2, s2 + 2*N), A));\n }\n \n-// 25.3.2 nth_element()\n-void\n-test05()\n-{\n-    using std::nth_element;\n-\n-    int s1[N];\n-    std::copy(B, B + N, s1);\n-    VERIFY(std::equal(s1, s1 + N, B));\n-\n-    int* pn = s1 + (N / 2) - 1;\n-    nth_element(s1, pn, s1 + N);\n-    for (const int* i = pn; i < s1 + N; ++i) VERIFY(!(*i < *pn));\n-\n-    CompLast pred;\n-    nth_element(s1, pn, s1 + N, pred);\n-    for (const int* i = pn; i < s1 + N; ++i) VERIFY(!pred(*i, *pn));\n-}\n-\n int\n main()\n {\n-  test01();\n-  test02();\n-  test03();\n   test04();\n-  test05();\n-  \n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/sort.cc"}, {"sha": "c28db2b87b467d8ddafbcf9b4bbe702e6f392784", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/1.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F1.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.1 algorithms, sort()\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n+const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n+const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n+const int N = sizeof(A) / sizeof(int);\n+const int logN = 3; // ln(N) rounded up\n+const int P = 7;\n+\n+// comparison predicate for stable_sort: order by rightmost digit\n+struct CompLast\n+{\n+  bool\n+  operator()(const int x, const int y)\n+  { return x % 10 < y % 10; }\n+};\n+\n+// This functor has the equivalent functionality of std::geater<>,\n+// but there is no dependency on <functional> and it also tracks the\n+// number of invocations since creation.\n+class Gt\n+{\n+public:\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  \n+  bool\n+  operator()(const int& x, const int& y)\n+  {\n+    ++itsCount;\n+    return x > y; \n+  }\n+\n+private:\n+    static int itsCount;\n+};\n+\n+int Gt::itsCount = 0;\n+\n+\n+// 25.3.1.1 sort()\n+void\n+test01()\n+{\n+    int s1[N];\n+    std::copy(B, B + N, s1);\n+    VERIFY(std::equal(s1, s1 + N, B));\n+\n+    std::sort(s1, s1 + N);\n+    VERIFY(std::equal(s1, s1 + N, A));\n+\n+    Gt gt;\n+    gt.reset();\n+    std::sort(s1, s1 + N, gt);\n+    VERIFY(std::equal(s1, s1 + N, C));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3d8299a75a1e3a25af898939d5a02bebe89a27d2", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/2.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0098d8068657d4d1aa61585993a0a3e5ef6be2c8/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F2.cc?ref=0098d8068657d4d1aa61585993a0a3e5ef6be2c8", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 25.3.1 algorithms, sort()\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+const int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n+const int B[] = {10, 20, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19};\n+const int C[] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n+const int N = sizeof(A) / sizeof(int);\n+const int logN = 3; // ln(N) rounded up\n+const int P = 7;\n+\n+// comparison predicate for stable_sort: order by rightmost digit\n+struct CompLast\n+{\n+  bool\n+  operator()(const int x, const int y)\n+  { return x % 10 < y % 10; }\n+};\n+\n+// This functor has the equivalent functionality of std::geater<>,\n+// but there is no dependency on <functional> and it also tracks the\n+// number of invocations since creation.\n+class Gt\n+{\n+public:\n+  static int count() { return itsCount; }\n+  static void reset() { itsCount = 0; }\n+  \n+  bool\n+  operator()(const int& x, const int& y)\n+  {\n+    ++itsCount;\n+    return x > y; \n+  }\n+\n+private:\n+    static int itsCount;\n+};\n+\n+int Gt::itsCount = 0;\n+\n+// 25.3.1.2 stable_sort()\n+void\n+test02()\n+{\n+    int s1[N];\n+    std::copy(A, A + N, s1);\n+    VERIFY(std::equal(s1, s1 + N, A));\n+\n+    std::stable_sort(s1, s1 + N, CompLast());\n+    VERIFY(std::equal(s1, s1 + N, B));\n+\n+    std::stable_sort(s1, s1 + N);\n+    VERIFY(std::equal(s1, s1 + N, A));\n+\n+    Gt gt;\n+    gt.reset();\n+    std::stable_sort(s1, s1 + N, gt);\n+    VERIFY(std::equal(s1, s1 + N, C));\n+    VERIFY(gt.count() <= N * logN * logN);\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+  return 0;\n+}"}]}