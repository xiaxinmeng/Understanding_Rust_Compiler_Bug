{"sha": "42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjNmIzY2FkZDc3ODI5NzYzYjJhMTQ4NGM1Y2ZhNTBhOTUyNGIxZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-01-15T15:02:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-01-15T15:02:11Z"}, "message": "re PR tree-optimization/61743 (Complete unroll is not happened for loops with short upper bound)\n\n2015-01-15  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61743\n\t* tree-ssa-pre.c (insert_into_preds_of_block): Preserve range\n\tinformation on PHIs for some simple cases.\n\n\t* gcc.dg/tree-ssa/pr61743-1.c: New testcase.\n\t* gcc.dg/tree-ssa/pr61743-2.c: Likewise.\n\nFrom-SVN: r219662", "tree": {"sha": "52b26abff657f8b34fcdc7839ec71998826959cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b26abff657f8b34fcdc7839ec71998826959cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd3246ea5820971a463d8d46d94ddd7128ab0282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd3246ea5820971a463d8d46d94ddd7128ab0282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd3246ea5820971a463d8d46d94ddd7128ab0282"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "da62dae337cf9ca044d12d1ebc2640cc395263fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "patch": "@@ -1,3 +1,9 @@\n+2015-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61743\n+\t* tree-ssa-pre.c (insert_into_preds_of_block): Preserve range\n+\tinformation on PHIs for some simple cases.\n+\n 2015-01-15  Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n \n \t* config/arm/arm.md (generic_sched): Specify xgene1 in 'no' list."}, {"sha": "8a5cf7e1c6f7d0f8caaefe1fc2d609f196e1c22c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "patch": "@@ -1,3 +1,9 @@\n+2015-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61743\n+\t* gcc.dg/tree-ssa/pr61743-1.c: New testcase.\n+\t* gcc.dg/tree-ssa/pr61743-2.c: Likewise.\n+\n 2015-01-15 Renlin Li <renlin.li@arm.com>\n \n \t* gcc.target/aarch64/volatileloadpair-1.c: Correct dg-options."}, {"sha": "de09daa28a8a83671de8edc744fd629af1b14305", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61743-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-1.c?ref=42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O3 -funroll-loops -fdump-tree-cunroll-details\" } */\r\n+\r\n+#define N 8\r\n+#define M 14\r\n+typedef unsigned char e_u8;\r\n+e_u8 x[256];\r\n+#define MAX(a,b) ((a)>=(b)?(a):(b))\r\n+#define btype int\r\n+\r\n+static inline void bar1(e_u8 a[4][N], e_u8 b[4][N], btype n)\r\n+{\r\n+  int i, j;\r\n+\r\n+  for(i = 0; i < 4; i++)\r\n+    for(j = 0; j < n; j++)\r\n+      a[i][j] ^= b[i][j];\r\n+}\r\n+\r\n+static inline void bar2(e_u8 a[4][N], e_u8 b[256], btype n)\r\n+{\r\n+  int i, j;\r\n+\r\n+  for(i = 0; i < 4; i++)\r\n+    for(j = 0; j < n; j++)\r\n+      a[i][j] = b[a[i][j]] ;\r\n+}\r\n+\r\n+int foo1 (e_u8 a[4][N], int b1, int b2, e_u8 b[M+1][4][N])\r\n+{\r\n+  btype n;\r\n+  int r, m;\r\n+\r\n+  switch (b2) {\r\n+    case 128: n = 4; break;\r\n+    case 192: n = 6; break;\r\n+    case 256: n = 8; break;\r\n+    default : return (-2);\r\n+  }\r\n+  switch (MAX(b1,b2)) {\r\n+    case 128: m = 10; break;\r\n+    case 192: m = 12; break;\r\n+    case 256: m = 14; break;\r\n+    default : return (-3);\r\n+  }\r\n+  bar1(a,b[m],n);\r\n+  bar2(a,x,n);\r\n+  return 0;\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump-times \"loop with 4 iterations completely unrolled\" 2 \"cunroll\" } } */\r\n+/* { dg-final { scan-tree-dump-times \"loop with 8 iterations completely unrolled\" 2 \"cunroll\" } } */\r\n+/* { dg-final { cleanup-tree-dump \"cunroll\" } } */\r"}, {"sha": "c8a43914d1265f72e1b39581f423e6be93d9bc68", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61743-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61743-2.c?ref=42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\r\n+/* { dg-options \"-O3 -funroll-loops -fdump-tree-cunroll-details\" } */\r\n+\r\n+#define N 8\r\n+#define M 14\r\n+typedef unsigned char e_u8;\r\n+e_u8 x[256];\r\n+#define MAX(a,b) ((a)>=(b)?(a):(b))\r\n+#define btype e_u8\r\n+\r\n+static inline void bar1(e_u8 a[4][N], e_u8 b[4][N], btype n)\r\n+{\r\n+  int i, j;\r\n+\r\n+  for(i = 0; i < 4; i++)\r\n+    for(j = 0; j < n; j++)\r\n+      a[i][j] ^= b[i][j];\r\n+}\r\n+\r\n+static inline void bar2(e_u8 a[4][N], e_u8 b[256], btype n)\r\n+{\r\n+  int i, j;\r\n+\r\n+  for(i = 0; i < 4; i++)\r\n+    for(j = 0; j < n; j++)\r\n+      a[i][j] = b[a[i][j]] ;\r\n+}\r\n+\r\n+int foo1 (e_u8 a[4][N], int b1, int b2, e_u8 b[M+1][4][N])\r\n+{\r\n+  btype n;\r\n+  int r, m;\r\n+\r\n+  switch (b2) {\r\n+    case 128: n = 4; break;\r\n+    case 192: n = 6; break;\r\n+    case 256: n = 8; break;\r\n+    default : return (-2);\r\n+  }\r\n+  switch (MAX(b1,b2)) {\r\n+    case 128: m = 10; break;\r\n+    case 192: m = 12; break;\r\n+    case 256: m = 14; break;\r\n+    default : return (-3);\r\n+  }\r\n+  bar1(a,b[m],n);\r\n+  bar2(a,x,n);\r\n+  return 0;\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump-times \"loop with 4 iterations completely unrolled\" 2 \"cunroll\" } } */\r\n+/* { dg-final { scan-tree-dump-times \"loop with 8 iterations completely unrolled\" 2 \"cunroll\" } } */\r\n+/* { dg-final { cleanup-tree-dump \"cunroll\" } } */\r"}, {"sha": "32cd74dd3bbbd5031a80254750dc8f6d7226619c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42c6b3cadd77829763b2a1484c5cfa50a9524b1f/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=42c6b3cadd77829763b2a1484c5cfa50a9524b1f", "patch": "@@ -3184,6 +3184,33 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n   bitmap_insert_into_set (NEW_SETS (block),\n \t\t\t  newphi);\n \n+  /* If we insert a PHI node for a conversion of another PHI node\n+     in the same basic-block try to preserve range information.\n+     This is important so that followup loop passes receive optimal\n+     number of iteration analysis results.  See PR61743.  */\n+  if (expr->kind == NARY\n+      && CONVERT_EXPR_CODE_P (expr->u.nary->opcode)\n+      && TREE_CODE (expr->u.nary->op[0]) == SSA_NAME\n+      && gimple_bb (SSA_NAME_DEF_STMT (expr->u.nary->op[0])) == block\n+      && INTEGRAL_TYPE_P (type)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (expr->u.nary->op[0]))\n+      && (TYPE_PRECISION (type)\n+\t  >= TYPE_PRECISION (TREE_TYPE (expr->u.nary->op[0])))\n+      && SSA_NAME_RANGE_INFO (expr->u.nary->op[0]))\n+    {\n+      wide_int min, max;\n+      if (get_range_info (expr->u.nary->op[0], &min, &max) == VR_RANGE\n+\t  && !wi::neg_p (min, SIGNED)\n+\t  && !wi::neg_p (max, SIGNED))\n+\t/* Just handle extension and sign-changes of all-positive ranges.  */\n+\tset_range_info (temp,\n+\t\t\tSSA_NAME_RANGE_TYPE (expr->u.nary->op[0]),\n+\t\t\twide_int_storage::from (min, TYPE_PRECISION (type),\n+\t\t\t\t\t\tTYPE_SIGN (type)),\n+\t\t\twide_int_storage::from (max, TYPE_PRECISION (type),\n+\t\t\t\t\t\tTYPE_SIGN (type)));\n+    }\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \"Created phi \");"}]}