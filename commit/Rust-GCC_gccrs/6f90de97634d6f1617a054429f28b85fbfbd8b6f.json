{"sha": "6f90de97634d6f1617a054429f28b85fbfbd8b6f", "node_id": "C_kwDOANBUbNoAKDZmOTBkZTk3NjM0ZDZmMTYxN2EwNTQ0MjlmMjhiODVmYmZiZDhiNmY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-17T21:26:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-17T21:32:18Z"}, "message": "c++: constant, array, lambda, template [PR108975]\n\nWhen a lambda refers to a constant local variable in the enclosing scope, we\ntentatively capture it, but if we end up pulling out its constant value, we\ngo back at the end of the lambda and prune any unneeded captures.  Here\nwhile parsing the template we decided that the dim capture was unneeded,\nbecause we folded it away, but then we brought back the use in the template\ntrees that try to preserve the source representation with added type info.\nSo then when we tried to instantiate that use, we couldn't find what it was\ntrying to use, and crashed.\n\nFixed by not trying to prune when parsing a template; we'll prune at\ninstantiation time.\n\n\tPR c++/108975\n\ngcc/cp/ChangeLog:\n\n\t* lambda.cc (prune_lambda_captures): Don't bother in a template.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/lambda/lambda-const11.C: New test.", "tree": {"sha": "503d3e66d00b0bec944ed672d5e022f64fadded5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/503d3e66d00b0bec944ed672d5e022f64fadded5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f90de97634d6f1617a054429f28b85fbfbd8b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f90de97634d6f1617a054429f28b85fbfbd8b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f90de97634d6f1617a054429f28b85fbfbd8b6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f90de97634d6f1617a054429f28b85fbfbd8b6f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "890043314a7f405081990ea9d0cb577dd44f883f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890043314a7f405081990ea9d0cb577dd44f883f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/890043314a7f405081990ea9d0cb577dd44f883f"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "9925209b2ed07901ec847c32c6e85445f71305ca", "filename": "gcc/cp/lambda.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f90de97634d6f1617a054429f28b85fbfbd8b6f/gcc%2Fcp%2Flambda.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f90de97634d6f1617a054429f28b85fbfbd8b6f/gcc%2Fcp%2Flambda.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.cc?ref=6f90de97634d6f1617a054429f28b85fbfbd8b6f", "patch": "@@ -1760,6 +1760,9 @@ prune_lambda_captures (tree body)\n   if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lam) == CPLD_NONE)\n     /* No default captures, and we don't prune explicit captures.  */\n     return;\n+  /* Don't bother pruning in a template, we'll prune at instantiation time.  */\n+  if (dependent_type_p (TREE_TYPE (lam)))\n+    return;\n \n   hash_map<tree,tree*> const_vars;\n "}, {"sha": "26af75bf1321552ab593e55b4738eef762dca4f2", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-const11.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f90de97634d6f1617a054429f28b85fbfbd8b6f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f90de97634d6f1617a054429f28b85fbfbd8b6f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const11.C?ref=6f90de97634d6f1617a054429f28b85fbfbd8b6f", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/108975\n+// { dg-do compile { target c++11 } }\n+\n+template<class T>\n+void f() {\n+  constexpr int dim = 1;\n+  auto l = [&] {\n+    int n[dim * 1];\n+  };\n+  // In f<int>, we shouldn't actually capture dim.\n+  static_assert (sizeof(l) == 1, \"\");\n+}\n+\n+template void f<int>();"}]}