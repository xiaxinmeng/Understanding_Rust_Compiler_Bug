{"sha": "0949f72302592c9daf2a114fd89a858383ddf7ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk0OWY3MjMwMjU5MmM5ZGFmMmExMTRmZDg5YTg1ODM4M2RkZjdhZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-01-12T09:47:23Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-12T09:47:23Z"}, "message": "typeck.c (build_c_cast): Do template processing earlier.\n\ncp:\n\t* typeck.c (build_c_cast): Do template processing earlier.\n\tAlways pedwarn on array casts.\ntestsuite:\n\t* g++.old-deja/g++.pt/cast2.C: New test.\n\nFrom-SVN: r38941", "tree": {"sha": "56369d2fb59c7704a269bb4e343988f82dce1b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56369d2fb59c7704a269bb4e343988f82dce1b9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0949f72302592c9daf2a114fd89a858383ddf7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0949f72302592c9daf2a114fd89a858383ddf7ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0949f72302592c9daf2a114fd89a858383ddf7ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0949f72302592c9daf2a114fd89a858383ddf7ad/comments", "author": null, "committer": null, "parents": [{"sha": "159227d5a8e33dc7c560298b4fc7be9f2bbe2c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159227d5a8e33dc7c560298b4fc7be9f2bbe2c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159227d5a8e33dc7c560298b4fc7be9f2bbe2c73"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "fd6caefbe81013ff415829cd2f1a359b8a521308", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0949f72302592c9daf2a114fd89a858383ddf7ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0949f72302592c9daf2a114fd89a858383ddf7ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0949f72302592c9daf2a114fd89a858383ddf7ad", "patch": "@@ -1,3 +1,8 @@\n+2001-01-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* typeck.c (build_c_cast): Do template processing earlier.\n+\tAlways pedwarn on array casts.\n+\n 2001-01-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* friend.c (make_friend_class): Make sure a templated class is"}, {"sha": "6a05ef9dd657a2762c8cba7dbfd072616c80028c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0949f72302592c9daf2a114fd89a858383ddf7ad/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0949f72302592c9daf2a114fd89a858383ddf7ad/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0949f72302592c9daf2a114fd89a858383ddf7ad", "patch": "@@ -5349,6 +5349,13 @@ build_c_cast (type, expr)\n   if (type == error_mark_node || expr == error_mark_node)\n     return error_mark_node;\n \n+  if (processing_template_decl)\n+    {\n+      tree t = build_min (CAST_EXPR, type,\n+\t\t\t  tree_cons (NULL_TREE, value, NULL_TREE));\n+      return t;\n+    }\n+\n   /* build_c_cast puts on a NOP_EXPR to make the result not an lvalue.\n      Strip such NOP_EXPRs if VALUE is being used in non-lvalue context.  */\n   if (TREE_CODE (type) != REFERENCE_TYPE\n@@ -5365,13 +5372,12 @@ build_c_cast (type, expr)\n \t NIHCL uses it. It is not valid ISO C++ however.  */\n       if (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE)\n \t{\n-\t  if (pedantic)\n-\t    pedwarn (\"ISO C++ forbids casting to an array type\");\n+\t  cp_pedwarn (\"ISO C++ forbids casting to an array type `%T'\", type);\n \t  type = build_pointer_type (TREE_TYPE (type));\n \t}\n       else\n \t{\n-\t  error (\"ISO C++ forbids casting to an array type\");\n+\t  cp_error (\"ISO C++ forbids casting to an array type `%T'\", type);\n \t  return error_mark_node;\n \t}\n     }\n@@ -5383,13 +5389,6 @@ build_c_cast (type, expr)\n       return error_mark_node;\n     }\n \n-  if (processing_template_decl)\n-    {\n-      tree t = build_min (CAST_EXPR, type,\n-\t\t\t  tree_cons (NULL_TREE, value, NULL_TREE));\n-      return t;\n-    }\n-\n   if (TREE_CODE (type) == VOID_TYPE)\n     {\n       /* Conversion to void does not cause any of the normal function to"}, {"sha": "31a45bf17b43d51317c877942b38d65a1009315b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0949f72302592c9daf2a114fd89a858383ddf7ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0949f72302592c9daf2a114fd89a858383ddf7ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0949f72302592c9daf2a114fd89a858383ddf7ad", "patch": "@@ -1,3 +1,7 @@\n+2001-01-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/cast2.C: New test.\n+\n 2001-01-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/friend47.C: New test."}, {"sha": "fb0a260dac4b74cc73bbcde73be191be007c795b", "filename": "gcc/testsuite/g++.old-deja/g++.pt/cast2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0949f72302592c9daf2a114fd89a858383ddf7ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0949f72302592c9daf2a114fd89a858383ddf7ad/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcast2.C?ref=0949f72302592c9daf2a114fd89a858383ddf7ad", "patch": "@@ -0,0 +1,32 @@\n+// Build don't link:\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 10 Jan 2001 <nathan@codesourcery.com>\n+\n+// Bug 1588. We ICE'd on reparsing an absdcl as a cast inside a template\n+// function.\n+\n+class A {\n+public:\n+ template <class T> void f(void *CLUTp);\n+};\n+\n+template <class T> void A::f(void *CLUTp)\n+{\n+    void *CLUT;\n+\n+    CLUT = (unsigned char [3][256])CLUTp; // ERROR - cast to array\n+\n+    return;\n+}\n+\n+\n+int main()\n+{\n+\tA myobj;\n+\tunsigned char t[3][256];\n+\n+\tmyobj.f<unsigned char>(t);\n+\t\t\n+\treturn 0;\n+}"}]}