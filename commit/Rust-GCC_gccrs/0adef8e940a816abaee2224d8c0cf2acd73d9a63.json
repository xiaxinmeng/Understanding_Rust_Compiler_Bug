{"sha": "0adef8e940a816abaee2224d8c0cf2acd73d9a63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFkZWY4ZTk0MGE4MTZhYmFlZTIyMjRkOGMwY2YyYWNkNzNkOWE2Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-08-07T17:02:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-08-07T17:02:43Z"}, "message": "re PR tree-optimization/40999 (ICE in extract_component, at tree-complex.c:625)\n\n2009-08-07  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/40999\n\t* tree-ssa-ccp.c (get_symbol_constant_value): Handle CONST_DECLs.\n\t(maybe_fold_reference): Lookup constant initializers.\n\t(fold_gimple_assign): Likewise.\n\n\t* gfortran.dg/pr40999.f: New testcase.\n\nFrom-SVN: r150572", "tree": {"sha": "c12c6c473ae4311d839b3b503f10c0d0d6515be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c12c6c473ae4311d839b3b503f10c0d0d6515be6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0adef8e940a816abaee2224d8c0cf2acd73d9a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0adef8e940a816abaee2224d8c0cf2acd73d9a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0adef8e940a816abaee2224d8c0cf2acd73d9a63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0adef8e940a816abaee2224d8c0cf2acd73d9a63/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7553122861e1a5d694adbefbbbbfe2a479f91171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7553122861e1a5d694adbefbbbbfe2a479f91171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7553122861e1a5d694adbefbbbbfe2a479f91171"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "3a43fe3dd8e5836c9abe8fccf908a47c005dffcf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adef8e940a816abaee2224d8c0cf2acd73d9a63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adef8e940a816abaee2224d8c0cf2acd73d9a63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0adef8e940a816abaee2224d8c0cf2acd73d9a63", "patch": "@@ -1,3 +1,10 @@\n+2009-08-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40999\n+\t* tree-ssa-ccp.c (get_symbol_constant_value): Handle CONST_DECLs.\n+\t(maybe_fold_reference): Lookup constant initializers.\n+\t(fold_gimple_assign): Likewise.\n+\n 2009-08-07  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa.c (useless_type_conversion_p_1): Only for types"}, {"sha": "cbaf780b5f893ec5229db5429b3d7447a0d7d9fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adef8e940a816abaee2224d8c0cf2acd73d9a63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adef8e940a816abaee2224d8c0cf2acd73d9a63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0adef8e940a816abaee2224d8c0cf2acd73d9a63", "patch": "@@ -1,3 +1,8 @@\n+2009-08-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40999\n+\t* gfortran.dg/pr40999.f: New testcase.\n+\n 2009-08-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/tree-prof/partition1.C: New test."}, {"sha": "0d93069c5928e9676d87d150c59bacf9db7e3849", "filename": "gcc/testsuite/gfortran.dg/pr40999.f", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adef8e940a816abaee2224d8c0cf2acd73d9a63/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adef8e940a816abaee2224d8c0cf2acd73d9a63/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr40999.f?ref=0adef8e940a816abaee2224d8c0cf2acd73d9a63", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -fwhole-file\" }\n+\n+      SUBROUTINE ZLARFG( ALPHA )\n+        ALPHA = ZLADIV( DCMPLX( 1.0D+0 ) )\n+      END\n+      COMPLEX*16 FUNCTION ZLADIV( X )\n+        COMPLEX*16         X\n+        CALL DLADIV( DBLE( X ), DIMAG( X ) )\n+      END\n+"}, {"sha": "f39d272964bbc96f3f970c4e8528e4b0307d7f28", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0adef8e940a816abaee2224d8c0cf2acd73d9a63/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0adef8e940a816abaee2224d8c0cf2acd73d9a63/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=0adef8e940a816abaee2224d8c0cf2acd73d9a63", "patch": "@@ -276,7 +276,8 @@ tree\n get_symbol_constant_value (tree sym)\n {\n   if (TREE_STATIC (sym)\n-      && TREE_READONLY (sym))\n+      && (TREE_READONLY (sym)\n+\t  || TREE_CODE (sym) == CONST_DECL))\n     {\n       tree val = DECL_INITIAL (sym);\n       if (val)\n@@ -288,7 +289,11 @@ get_symbol_constant_value (tree sym)\n \t\t{\n \t\t  tree base = get_base_address (TREE_OPERAND (val, 0));\n \t\t  if (base && TREE_CODE (base) == VAR_DECL)\n-\t\t    add_referenced_var (base);\n+\t\t    {\n+\t\t      TREE_ADDRESSABLE (base) = 1;\n+\t\t      if (gimple_referenced_vars (cfun))\n+\t\t\tadd_referenced_var (base);\n+\t\t    }\n \t\t}\n \t      return val;\n \t    }\n@@ -2337,6 +2342,19 @@ maybe_fold_reference (tree expr, bool is_lhs)\n \t  return expr;\n \t}\n     }\n+  else if (!is_lhs\n+\t   && DECL_P (*t))\n+    {\n+      tree tem = get_symbol_constant_value (*t);\n+      if (tem)\n+\t{\n+\t  *t = tem;\n+\t  tem = maybe_fold_reference (expr, is_lhs);\n+\t  if (tem)\n+\t    return tem;\n+\t  return expr;\n+\t}\n+    }\n \n   return NULL_TREE;\n }\n@@ -2739,6 +2757,9 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \t\t\t\t\t   CONSTRUCTOR_ELTS (rhs));\n \t  }\n \n+\telse if (DECL_P (rhs))\n+\t  return get_symbol_constant_value (rhs);\n+\n         /* If we couldn't fold the RHS, hand over to the generic\n            fold routines.  */\n         if (result == NULL_TREE)"}]}