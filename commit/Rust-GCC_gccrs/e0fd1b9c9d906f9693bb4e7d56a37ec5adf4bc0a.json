{"sha": "e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmZDFiOWM5ZDkwNmY5NjkzYmI0ZTdkNTZhMzdlYzVhZGY0YmMwYQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-01-31T13:28:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-05T12:17:39Z"}, "message": "[Ada] Put_Image attribute\n\n2020-06-05  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb, exp_ch11.adb, exp_imgv.adb, exp_tss.ads,\n\tpar-ch4.adb, sem_attr.adb, sem_util.ads: Misc cleanup.", "tree": {"sha": "d942f40348b3f37595b185d4dd2dbee0cbf3215a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d942f40348b3f37595b185d4dd2dbee0cbf3215a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c80e3c3adde1f96d9f5070eccf1184a97ce2cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3c80e3c3adde1f96d9f5070eccf1184a97ce2cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3c80e3c3adde1f96d9f5070eccf1184a97ce2cd"}], "stats": {"total": 63, "additions": 21, "deletions": 42}, "files": [{"sha": "1545b5f44c1b5b7a79017aa0ac20b10f4d33bc3c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "patch": "@@ -3732,8 +3732,6 @@ package body Exp_Attr is\n       -- Image --\n       -----------\n \n-      --  Image attribute is handled in separate unit Exp_Imgv\n-\n       when Attribute_Image =>\n \n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n@@ -3743,7 +3741,7 @@ package body Exp_Attr is\n             return;\n          end if;\n \n-         Expand_Image_Attribute (N);\n+         Exp_Imgv.Expand_Image_Attribute (N);\n \n       ---------\n       -- Img --\n@@ -3752,7 +3750,7 @@ package body Exp_Attr is\n       --  X'Img is expanded to typ'Image (X), where typ is the type of X\n \n       when Attribute_Img =>\n-         Expand_Image_Attribute (N);\n+         Exp_Imgv.Expand_Image_Attribute (N);\n \n       -----------\n       -- Input --\n@@ -7243,8 +7241,6 @@ package body Exp_Attr is\n       -- Value --\n       -----------\n \n-      --  Value attribute is handled in separate unit Exp_Imgv\n-\n       when Attribute_Value =>\n          Exp_Imgv.Expand_Value_Attribute (N);\n \n@@ -7264,8 +7260,6 @@ package body Exp_Attr is\n       -- Wide_Image --\n       ----------------\n \n-      --  Wide_Image attribute is handled in separate unit Exp_Imgv\n-\n       when Attribute_Wide_Image =>\n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n@@ -7280,8 +7274,6 @@ package body Exp_Attr is\n       -- Wide_Wide_Image --\n       ---------------------\n \n-      --  Wide_Wide_Image attribute is handled in separate unit Exp_Imgv\n-\n       when Attribute_Wide_Wide_Image =>\n          --  Leave attribute unexpanded in CodePeer mode: the gnat2scil\n          --  back-end knows how to handle this attribute directly.\n@@ -7374,26 +7366,20 @@ package body Exp_Attr is\n       -- Wide_Wide_Width --\n       ---------------------\n \n-      --  Wide_Wide_Width attribute is handled in separate unit Exp_Imgv\n-\n       when Attribute_Wide_Wide_Width =>\n          Exp_Imgv.Expand_Width_Attribute (N, Wide_Wide);\n \n       ----------------\n       -- Wide_Width --\n       ----------------\n \n-      --  Wide_Width attribute is handled in separate unit Exp_Imgv\n-\n       when Attribute_Wide_Width =>\n          Exp_Imgv.Expand_Width_Attribute (N, Wide);\n \n       -----------\n       -- Width --\n       -----------\n \n-      --  Width attribute is handled in separate unit Exp_Imgv\n-\n       when Attribute_Width =>\n          Exp_Imgv.Expand_Width_Attribute (N, Normal);\n "}, {"sha": "acc53b19b1af9a4368bd994e6eec01ab4451f3e7", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "patch": "@@ -1505,7 +1505,7 @@ package body Exp_Ch11 is\n              Actions     => New_List (\n                Make_Simple_Return_Statement (Loc,\n                  Expression => New_Occurrence_Of (Standard_False, Loc))),\n-              Expression => RCE));\n+               Expression => RCE));\n \n       else\n          Rewrite (N,\n@@ -1514,7 +1514,7 @@ package body Exp_Ch11 is\n                Make_Raise_Statement (Loc,\n                  Name       => Name (N),\n                  Expression => Expression (N))),\n-              Expression => RCE));\n+               Expression => RCE));\n       end if;\n \n       Analyze_And_Resolve (N, Typ);"}, {"sha": "4f2a67f583811d8d8e7354e4a783ae8eb6598f40", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "patch": "@@ -58,7 +58,7 @@ package body Exp_Imgv is\n       Pref      : Entity_Id;\n       Attr_Name : Name_Id;\n       Str_Typ   : Entity_Id);\n-   --  AI12-00124: Rewrite attribute 'Image when it is applied to an object\n+   --  AI12-0124: Rewrite attribute 'Image when it is applied to an object\n    --  reference as an attribute applied to a type. N denotes the node to be\n    --  rewritten, Pref denotes the prefix of the 'Image attribute, and Name\n    --  and Str_Typ specify which specific string type and 'Image attribute to\n@@ -263,7 +263,7 @@ package body Exp_Imgv is\n    --      tv = Long_Long_Integer?(Expr) [convert with no scaling]\n    --      pm = typ'Scale (typ = subtype of expression)\n \n-   --  For enumeration types other than those declared packages Standard\n+   --  For enumeration types other than those declared in package Standard\n    --  or System, Snn, Pnn, are expanded as above, but the call looks like:\n \n    --    Image_Enumeration_NN (rt'Pos (X), Snn, Pnn, typS, typI'Address)\n@@ -474,23 +474,24 @@ package body Exp_Imgv is\n       if Is_Object_Image (Pref) then\n          Rewrite_Object_Image (N, Pref, Name_Image, Standard_String);\n          return;\n+      end if;\n+\n+      Ptyp := Entity (Pref);\n+      Rtyp := Root_Type (Ptyp);\n \n       --  Enable speed-optimized expansion of user-defined enumeration types\n       --  if we are compiling with optimizations enabled and enumeration type\n       --  literals are generated. Otherwise the call will be expanded into a\n       --  call to the runtime library.\n \n-      elsif Optimization_Level > 0\n+      if Optimization_Level > 0\n         and then not Global_Discard_Names\n-        and then Is_User_Defined_Enumeration_Type (Root_Type (Entity (Pref)))\n+        and then Is_User_Defined_Enumeration_Type (Rtyp)\n       then\n          Expand_User_Defined_Enumeration_Image;\n          return;\n       end if;\n \n-      Ptyp := Entity (Pref);\n-      Rtyp := Root_Type (Ptyp);\n-\n       --  Build declarations of Snn and Pnn to be inserted\n \n       Ins_List := New_List ("}, {"sha": "59234ff8d6f98dafc6f4d952439998d7e1cb8d7d", "filename": "gcc/ada/exp_tss.ads", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fexp_tss.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fexp_tss.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.ads?ref=e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "patch": "@@ -170,12 +170,9 @@ package Exp_Tss is\n    --  be explicitly frozen, so the N_Freeze_Entity node always exists).\n \n    function TSS (Typ : Entity_Id; Nam : TSS_Name_Type) return Entity_Id;\n-   --  Finds the TSS with the given name associated with the given type\n-   --  If no such TSS exists, then Empty is returned;\n-\n    function TSS (Typ : Entity_Id; Nam : Name_Id) return Entity_Id;\n-   --  Finds the TSS with the given name associated with the given type. If\n-   --  no such TSS exists, then Empty is returned.\n+   --  Finds the TSS with the given name associated with the given type.\n+   --  If no such TSS exists, then Empty is returned.\n \n    function Same_TSS (E1, E2 : Entity_Id) return Boolean;\n    --  Returns True if E1 and E2 are the same kind of TSS, even if the names"}, {"sha": "63e9790b96eb0b18cbbc11cba68ecf2e4eb4979a", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "patch": "@@ -51,7 +51,7 @@ package body Ch4 is\n    --  or a type. For those attributes, a left parenthesis after the attribute\n    --  should not be analyzed as the beginning of a parameters list because it\n    --  may denote a slice operation (X'Img (1 .. 2)) or a type conversion\n-   --  (X'Class (Y)). The Ada 2012 attribute 'Old is in this category.\n+   --  (X'Class (Y)).\n \n    --  Note: Loop_Entry is in this list because, although it can take an\n    --  optional argument (the loop name), we can't distinguish that at parse"}, {"sha": "5e6ad38030c2ee834a8a080bfe0890b716f65b12", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "patch": "@@ -1430,12 +1430,12 @@ package body Sem_Attr is\n       begin\n          Check_SPARK_05_Restriction_On_Attribute;\n \n-         --  AI12-00124: The ARG has adopted the GNAT semantics of 'Img for\n+         --  AI12-0124: The ARG has adopted the GNAT semantics of 'Img for\n          --  scalar types, so that the prefix can be an object, a named value,\n-         --  or a type, and there is no need for an argument in this case.\n+         --  or a type. If the prefix is an object, there is no argument.\n \n          if Attr_Id = Attribute_Img\n-           or else (Ada_Version > Ada_2005 and then Is_Object_Image (P))\n+           or else (Ada_Version >= Ada_2012 and then Is_Object_Image (P))\n          then\n             Check_E0;\n             Set_Etype (N, Str_Typ);\n@@ -1465,7 +1465,7 @@ package body Sem_Attr is\n               or else not Is_Type (Entity (P))\n               or else not Is_Scalar_Type (P_Type)\n             then\n-               if Ada_Version > Ada_2005 then\n+               if Ada_Version >= Ada_2012 then\n                   Error_Attr_P\n                     (\"prefix of % attribute must be a scalar type or a scalar \"\n                      & \"object name\");"}, {"sha": "391711c7d01f45ffc076f24a0211abf66f5a1564", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=e0fd1b9c9d906f9693bb4e7d56a37ec5adf4bc0a", "patch": "@@ -1836,13 +1836,8 @@ package Sem_Util is\n    --  null component list.\n \n    function Is_Object_Image (Prefix : Node_Id) return Boolean;\n-   --  Returns True if an 'Image, 'Wide_Image, or 'Wide_Wide_Image attribute\n-   --  is applied to a given object or named value prefix (see below).\n-\n-   --  AI12-00124: The ARG has adopted the GNAT semantics of 'Img for scalar\n-   --  types, so that the prefix of any 'Image attribute can be an object, a\n-   --  named value, or a type, and there is no need for an argument in the\n-   --  case it is an object reference.\n+   --  Returns True if an 'Img, 'Image, 'Wide_Image, or 'Wide_Wide_Image\n+   --  attribute is applied to an object.\n \n    function Is_Object_Reference (N : Node_Id) return Boolean;\n    --  Determines if the tree referenced by N represents an object. Both"}]}