{"sha": "dad94b3aca12f25cd2b3f6c32b7e55d69c8c4ad6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkOTRiM2FjYTEyZjI1Y2QyYjNmNmMzMmI3ZTU1ZDY5YzhjNGFkNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-09T10:56:01Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:18Z"}, "message": "[Ada] Fix spurious error on derived private type with predicate\n\n2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch4.adb (Common_Type): Go to Underlying_Full_View, if any.", "tree": {"sha": "614286d9ac2c0641e1e3afaf0e11a075c37403f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/614286d9ac2c0641e1e3afaf0e11a075c37403f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dad94b3aca12f25cd2b3f6c32b7e55d69c8c4ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad94b3aca12f25cd2b3f6c32b7e55d69c8c4ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad94b3aca12f25cd2b3f6c32b7e55d69c8c4ad6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad94b3aca12f25cd2b3f6c32b7e55d69c8c4ad6/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb6dc6f301e444c3644fc209c786c7edb9bb238d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6dc6f301e444c3644fc209c786c7edb9bb238d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6dc6f301e444c3644fc209c786c7edb9bb238d"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "bc841c0c6f8ca76f0ab7627069d9f78cba81c8e6", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad94b3aca12f25cd2b3f6c32b7e55d69c8c4ad6/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad94b3aca12f25cd2b3f6c32b7e55d69c8c4ad6/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=dad94b3aca12f25cd2b3f6c32b7e55d69c8c4ad6", "patch": "@@ -3291,20 +3291,30 @@ package body Sem_Ch4 is\n          T2 : Entity_Id) return Boolean\n       is\n          function Common_Type (T : Entity_Id) return Entity_Id;\n-         --  Find non-private full view if any, without going to ancestor type\n-         --  (as opposed to Underlying_Type).\n+         --  Find non-private underlying full view if any, without going to\n+         --  ancestor type (as opposed to Underlying_Type).\n \n          -----------------\n          -- Common_Type --\n          -----------------\n \n          function Common_Type (T : Entity_Id) return Entity_Id is\n+            CT : Entity_Id;\n+\n          begin\n-            if Is_Private_Type (T) and then Present (Full_View (T)) then\n-               return Base_Type (Full_View (T));\n-            else\n-               return Base_Type (T);\n+            CT := T;\n+\n+            if Is_Private_Type (CT) and then Present (Full_View (CT)) then\n+               CT := Full_View (CT);\n             end if;\n+\n+            if Is_Private_Type (CT)\n+              and then Present (Underlying_Full_View (CT))\n+            then\n+               CT := Underlying_Full_View (CT);\n+            end if;\n+\n+            return Base_Type (CT);\n          end Common_Type;\n \n       --  Start of processing for Compatible_Types_In_Predicate"}]}