{"sha": "09962a4aa380c5c8297cee5be122c0b4b849a623", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk5NjJhNGFhMzgwYzVjODI5N2NlZTViZTEyMmMwYjRiODQ5YTYyMw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-25T16:54:32Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-25T16:54:32Z"}, "message": "[AArch64] Describe the 'BSL' RTL pattern more accurately.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_simd_bsl<mode>_internal): Rewrite RTL to not use UNSPEC_BSL.\n\t(aarch64_simd_bsl<mode>): Likewise.\n\t* config/aarch64/iterators.md (unspec): Remove UNSPEC_BSL.\n\nFrom-SVN: r198316", "tree": {"sha": "25841cc681c060abefdaf84da1065667d2f51476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25841cc681c060abefdaf84da1065667d2f51476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09962a4aa380c5c8297cee5be122c0b4b849a623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09962a4aa380c5c8297cee5be122c0b4b849a623", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09962a4aa380c5c8297cee5be122c0b4b849a623", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09962a4aa380c5c8297cee5be122c0b4b849a623/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cd123ed43ea4e51f23a044dfb781cf937250cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd123ed43ea4e51f23a044dfb781cf937250cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd123ed43ea4e51f23a044dfb781cf937250cf8"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "6985a051f24e03a829cce0d99e67d791e9e0c16e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09962a4aa380c5c8297cee5be122c0b4b849a623/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09962a4aa380c5c8297cee5be122c0b4b849a623/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09962a4aa380c5c8297cee5be122c0b4b849a623", "patch": "@@ -1,3 +1,10 @@\n+2013-04-25  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_simd_bsl<mode>_internal): Rewrite RTL to not use UNSPEC_BSL.\n+\t(aarch64_simd_bsl<mode>): Likewise.\n+\t* config/aarch64/iterators.md (unspec): Remove UNSPEC_BSL.\n+\n 2013-04-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/57066"}, {"sha": "5862d2641327ea4adf3d37fe4bd8746931ff9c4e", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09962a4aa380c5c8297cee5be122c0b4b849a623/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09962a4aa380c5c8297cee5be122c0b4b849a623/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=09962a4aa380c5c8297cee5be122c0b4b849a623", "patch": "@@ -1509,21 +1509,33 @@\n    (set_attr \"simd_mode\" \"V2SI\")]\n )\n \n-;; vbsl_* intrinsics may compile to any of bsl/bif/bit depending on register\n-;; allocation.  For an intrinsic of form:\n-;;   vD = bsl_* (vS, vN, vM)\n+;; aarch64_simd_bsl may compile to any of bsl/bif/bit depending on register\n+;; allocation.\n+;; Operand 1 is the mask, operands 2 and 3 are the bitfields from which\n+;; to select.\n+;;\n+;; Thus our BSL is of the form:\n+;;   op0 = bsl (mask, op2, op3)\n ;; We can use any of:\n-;;   bsl vS, vN, vM  (if D = S)\n-;;   bit vD, vN, vS  (if D = M, so 1-bits in vS choose bits from vN, else vM)\n-;;   bif vD, vM, vS  (if D = N, so 0-bits in vS choose bits from vM, else vN)\n+;;\n+;;   if (op0 = mask)\n+;;     bsl mask, op1, op2\n+;;   if (op0 = op1) (so 1-bits in mask choose bits from op2, else op0)\n+;;     bit op0, op2, mask\n+;;   if (op0 = op2) (so 0-bits in mask choose bits from op1, else op0)\n+;;     bif op0, op1, mask\n \n (define_insn \"aarch64_simd_bsl<mode>_internal\"\n   [(set (match_operand:VALL 0 \"register_operand\"\t\t\"=w,w,w\")\n-\t(unspec:VALL\n-\t [(match_operand:<V_cmp_result> 1 \"register_operand\"\t\" 0,w,w\")\n-\t  (match_operand:VALL 2 \"register_operand\"\t\t\" w,w,0\")\n-\t  (match_operand:VALL 3 \"register_operand\"\t\t\" w,0,w\")]\n-\t UNSPEC_BSL))]\n+\t(ior:VALL\n+\t   (and:VALL\n+\t     (match_operand:<V_cmp_result> 1 \"register_operand\"\t\" 0,w,w\")\n+\t     (match_operand:VALL 2 \"register_operand\"\t\t\" w,w,0\"))\n+\t   (and:VALL\n+\t     (not:<V_cmp_result>\n+\t\t(match_dup:<V_cmp_result> 1))\n+\t     (match_operand:VALL 3 \"register_operand\"\t\t\" w,0,w\"))\n+\t))]\n   \"TARGET_SIMD\"\n   \"@\n   bsl\\\\t%0.<Vbtype>, %2.<Vbtype>, %3.<Vbtype>\n@@ -1532,15 +1544,17 @@\n )\n \n (define_expand \"aarch64_simd_bsl<mode>\"\n-  [(set (match_operand:VALL 0 \"register_operand\")\n-\t(unspec:VALL [(match_operand:<V_cmp_result> 1 \"register_operand\")\n-\t\t      (match_operand:VALL 2 \"register_operand\")\n-\t\t      (match_operand:VALL 3 \"register_operand\")]\n-\t\t     UNSPEC_BSL))]\n-  \"TARGET_SIMD\"\n+  [(match_operand:VALL 0 \"register_operand\")\n+   (match_operand:<V_cmp_result> 1 \"register_operand\")\n+   (match_operand:VALL 2 \"register_operand\")\n+   (match_operand:VALL 3 \"register_operand\")]\n+ \"TARGET_SIMD\"\n {\n   /* We can't alias operands together if they have different modes.  */\n   operands[1] = gen_lowpart (<V_cmp_result>mode, operands[1]);\n+  emit_insn (gen_aarch64_simd_bsl<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t\t  operands[2], operands[3]));\n+  DONE;\n })\n \n (define_expand \"aarch64_vcond_internal<mode>\""}, {"sha": "58a2a9ed4581bdcc75e55590731d152ccdcd5f5b", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09962a4aa380c5c8297cee5be122c0b4b849a623/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09962a4aa380c5c8297cee5be122c0b4b849a623/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=09962a4aa380c5c8297cee5be122c0b4b849a623", "patch": "@@ -230,7 +230,6 @@\n     UNSPEC_CMTST\t; Used in aarch64-simd.md.\n     UNSPEC_FMAX\t\t; Used in aarch64-simd.md.\n     UNSPEC_FMIN\t\t; Used in aarch64-simd.md.\n-    UNSPEC_BSL\t\t; Used in aarch64-simd.md.\n     UNSPEC_TBL\t\t; Used in vector permute patterns.\n     UNSPEC_CONCAT\t; Used in vector permute patterns.\n     UNSPEC_ZIP1\t\t; Used in vector permute patterns."}]}