{"sha": "b01e2f88ef92c331a9df908212f7ec5ecd537908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxZTJmODhlZjkyYzMzMWE5ZGY5MDgyMTJmN2VjNWVjZDUzNzkwOA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-01-20T20:12:44Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-01-20T20:12:44Z"}, "message": "dependency.c (gfc_full_array_ref_p): Check that ref->next is NULL, i.e.\n\n\n\t* dependency.c (gfc_full_array_ref_p): Check that ref->next is NULL,\n\ti.e. that the ARRAY_REF doesn't mention components.\n\t* trans-array.c (gfc_constant_array_constructor_p): Export external\n\tfunction renamed from constant_array_constructor_p.\n\t(gfc_build_constant_array_constructor): Export.\n\t(gfc_trans_array_constructor): Update call to the renamed function\n\tconstant_array_constructor_p.\n\t* trans-array.h (gfc_constant_array_constructor_p): Prototype here.\n\t(gfc_build_constant_array_constructor): Likewise.\n\t* trans-expr.c (gfc_build_memcpy_call): New helper function split\n\tout from gfc_trans_array_copy.\n\t(gfc_trans_array_copy): Use gfc_build_memcpy_call.\n\t(gfc_trans_array_constructor_copy): New function to optimize\n\tassigning an entire array from a constant array constructor.\n\t(gfc_trans_assignment): Call gfc_trans_array_constructor_copy\n\twhen appropriate.\n\n\t* gfortran.dg/array_memcpy_3.f90: New test case.\n\t* gfortran.dg/vect/vect-5.f90: Update vectorized loop count.\n\nFrom-SVN: r121010", "tree": {"sha": "6d196f924038576c22983777c23d934bf69cf070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d196f924038576c22983777c23d934bf69cf070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b01e2f88ef92c331a9df908212f7ec5ecd537908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01e2f88ef92c331a9df908212f7ec5ecd537908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01e2f88ef92c331a9df908212f7ec5ecd537908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01e2f88ef92c331a9df908212f7ec5ecd537908/comments", "author": null, "committer": null, "parents": [{"sha": "0eadc0917ab47b272102e3f337045c7fe8437a38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eadc0917ab47b272102e3f337045c7fe8437a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eadc0917ab47b272102e3f337045c7fe8437a38"}], "stats": {"total": 159, "additions": 137, "deletions": 22}, "files": [{"sha": "f13d6f894ec582c314673b52f7f1d02d5cf8cdf1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b01e2f88ef92c331a9df908212f7ec5ecd537908", "patch": "@@ -1,3 +1,22 @@\n+2007-01-20  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* dependency.c (gfc_full_array_ref_p): Check that ref->next is NULL,\n+\ti.e. that the ARRAY_REF doesn't mention components.\n+\t* trans-array.c (gfc_constant_array_constructor_p): Export external\n+\tfunction renamed from constant_array_constructor_p.\n+\t(gfc_build_constant_array_constructor): Export.\n+\t(gfc_trans_array_constructor): Update call to the renamed function\n+\tconstant_array_constructor_p.\n+\t* trans-array.h (gfc_constant_array_constructor_p): Prototype here.\n+\t(gfc_build_constant_array_constructor): Likewise.\n+\t* trans-expr.c (gfc_build_memcpy_call): New helper function split\n+\tout from gfc_trans_array_copy.\n+\t(gfc_trans_array_copy): Use gfc_build_memcpy_call.\n+\t(gfc_trans_array_constructor_copy): New function to optimize\n+\tassigning an entire array from a constant array constructor.\n+\t(gfc_trans_assignment): Call gfc_trans_array_constructor_copy\n+\twhen appropriate.\n+\n 2007-01-20  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_sign): New branchless"}, {"sha": "26314e2035cc004a35afbaeb37db355e5b410a18", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=b01e2f88ef92c331a9df908212f7ec5ecd537908", "patch": "@@ -1109,6 +1109,8 @@ gfc_full_array_ref_p (gfc_ref *ref)\n     return true;\n   if (ref->u.ar.type != AR_SECTION)\n     return false;\n+  if (ref->next)\n+    return false;\n \n   for (i = 0; i < ref->u.ar.dimen; i++)\n     {"}, {"sha": "00a9a1435e4a71de2e11ab389bca344811fed49a", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=b01e2f88ef92c331a9df908212f7ec5ecd537908", "patch": "@@ -1467,8 +1467,8 @@ get_array_ctor_strlen (gfc_constructor * c, tree * len)\n    elements, and if so returns the number of those elements, otherwise\n    return zero.  Note, an empty or NULL array constructor returns zero.  */\n \n-static unsigned HOST_WIDE_INT\n-constant_array_constructor_p (gfc_constructor * c)\n+unsigned HOST_WIDE_INT\n+gfc_constant_array_constructor_p (gfc_constructor * c)\n {\n   unsigned HOST_WIDE_INT nelem = 0;\n \n@@ -1489,7 +1489,7 @@ constant_array_constructor_p (gfc_constructor * c)\n    and the tree type of it's elements, TYPE, return a static constant\n    variable that is compile-time initialized.  */\n \n-static tree\n+tree\n gfc_build_constant_array_constructor (gfc_expr * expr, tree type)\n {\n   tree tmptype, list, init, tmp;\n@@ -1633,7 +1633,7 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n       && INTEGER_CST_P (loop->from[0])\n       && INTEGER_CST_P (loop->to[0]))\n     {\n-      unsigned HOST_WIDE_INT nelem = constant_array_constructor_p (c);\n+      unsigned HOST_WIDE_INT nelem = gfc_constant_array_constructor_p (c);\n       if (nelem > 0)\n \t{\n \t  tree diff = fold_build2 (MINUS_EXPR, gfc_array_index_type,"}, {"sha": "278ea1eda3bfca4552fefadd530954dcdab2ed7d", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=b01e2f88ef92c331a9df908212f7ec5ecd537908", "patch": "@@ -133,3 +133,7 @@ tree gfc_conv_descriptor_ubound (tree, tree);\n /* Add pre-loop scalarization code for intrinsic functions which require\n    special handling.  */\n void gfc_add_intrinsic_ss_code (gfc_loopinfo *, gfc_ss *);\n+\n+/* Functions for constant array constructor processing.  */\n+unsigned HOST_WIDE_INT gfc_constant_array_constructor_p (gfc_constructor *);\n+tree gfc_build_constant_array_constructor (gfc_expr *, tree);"}, {"sha": "2dc78b6cc737f776a0ed3e434c511ce70f0770f1", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 87, "deletions": 17, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b01e2f88ef92c331a9df908212f7ec5ecd537908", "patch": "@@ -3579,6 +3579,37 @@ gfc_trans_zero_assign (gfc_expr * expr)\n   return fold_convert (void_type_node, tmp);\n }\n \n+\n+/* Helper for gfc_trans_array_copy and gfc_trans_array_constructor_copy\n+   that constructs the call to __builtin_memcpy.  */\n+\n+static tree\n+gfc_build_memcpy_call (tree dst, tree src, tree len)\n+{\n+  tree tmp, args;\n+\n+  /* Convert arguments to the correct types.  */\n+  if (!POINTER_TYPE_P (TREE_TYPE (dst)))\n+    dst = gfc_build_addr_expr (pvoid_type_node, dst);\n+  else\n+    dst = fold_convert (pvoid_type_node, dst);\n+\n+  if (!POINTER_TYPE_P (TREE_TYPE (src)))\n+    src = gfc_build_addr_expr (pvoid_type_node, src);\n+  else\n+    src = fold_convert (pvoid_type_node, src);\n+\n+  len = fold_convert (size_type_node, len);\n+\n+  /* Construct call to __builtin_memcpy.  */\n+  args = build_tree_list (NULL_TREE, len);\n+  args = tree_cons (NULL_TREE, src, args);\n+  args = tree_cons (NULL_TREE, dst, args);\n+  tmp = build_function_call_expr (built_in_decls[BUILT_IN_MEMCPY], args);\n+  return fold_convert (void_type_node, tmp);\n+}\n+\n+\n /* Try to efficiently translate dst(:) = src(:).  Return NULL if this\n    can't be done.  EXPR1 is the destination/lhs and EXPR2 is the\n    source/rhs, both are gfc_full_array_ref_p which have been checked for\n@@ -3589,7 +3620,6 @@ gfc_trans_array_copy (gfc_expr * expr1, gfc_expr * expr2)\n {\n   tree dst, dlen, dtype;\n   tree src, slen, stype;\n-  tree tmp, args;\n \n   dst = gfc_get_symbol_decl (expr1->symtree->n.sym);\n   src = gfc_get_symbol_decl (expr2->symtree->n.sym);\n@@ -3622,25 +3652,53 @@ gfc_trans_array_copy (gfc_expr * expr1, gfc_expr * expr2)\n   if (!tree_int_cst_equal (slen, dlen))\n     return NULL_TREE;\n \n-  /* Convert arguments to the correct types.  */\n-  if (!POINTER_TYPE_P (TREE_TYPE (dst)))\n-    dst = gfc_build_addr_expr (pvoid_type_node, dst);\n-  else\n-    dst = fold_convert (pvoid_type_node, dst);\n+  return gfc_build_memcpy_call (dst, src, dlen);\n+}\n \n-  if (!POINTER_TYPE_P (TREE_TYPE (src)))\n-    src = gfc_build_addr_expr (pvoid_type_node, src);\n-  else\n-    src = fold_convert (pvoid_type_node, src);\n \n-  dlen = fold_convert (size_type_node, dlen);\n+/* Try to efficiently translate array(:) = (/ ... /).  Return NULL if\n+   this can't be done.  EXPR1 is the destination/lhs for which\n+   gfc_full_array_ref_p is true, and EXPR2 is the source/rhs.  */\n \n-  /* Construct call to __builtin_memcpy.  */\n-  args = build_tree_list (NULL_TREE, dlen);\n-  args = tree_cons (NULL_TREE, src, args);\n-  args = tree_cons (NULL_TREE, dst, args);\n-  tmp = build_function_call_expr (built_in_decls[BUILT_IN_MEMCPY], args);\n-  return fold_convert (void_type_node, tmp);\n+static tree\n+gfc_trans_array_constructor_copy (gfc_expr * expr1, gfc_expr * expr2)\n+{\n+  unsigned HOST_WIDE_INT nelem;\n+  tree dst, dtype;\n+  tree src, stype;\n+  tree len;\n+\n+  nelem = gfc_constant_array_constructor_p (expr2->value.constructor);\n+  if (nelem == 0)\n+    return NULL_TREE;\n+\n+  dst = gfc_get_symbol_decl (expr1->symtree->n.sym);\n+  dtype = TREE_TYPE (dst);\n+  if (POINTER_TYPE_P (dtype))\n+    dtype = TREE_TYPE (dtype);\n+  if (!GFC_ARRAY_TYPE_P (dtype))\n+    return NULL_TREE;\n+\n+  /* Determine the lengths of the array.  */\n+  len = GFC_TYPE_ARRAY_SIZE (dtype);\n+  if (!len || TREE_CODE (len) != INTEGER_CST)\n+    return NULL_TREE;\n+\n+  /* Confirm that the constructor is the same size.  */\n+  if (compare_tree_int (len, nelem) != 0)\n+    return NULL_TREE;\n+\n+  len = fold_build2 (MULT_EXPR, gfc_array_index_type, len,\n+\t\t     TYPE_SIZE_UNIT (gfc_get_element_type (dtype)));\n+\n+  stype = gfc_typenode_for_spec (&expr2->ts);\n+  src = gfc_build_constant_array_constructor (expr2, stype);\n+\n+  stype = TREE_TYPE (src);\n+  if (POINTER_TYPE_P (stype))\n+    stype = TREE_TYPE (stype);\n+\n+  return gfc_build_memcpy_call (dst, src, len);\n }\n \n \n@@ -3870,6 +3928,18 @@ gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n         return tmp;\n     }\n \n+  /* Special case initializing an array from a constant array constructor.  */\n+  if (expr1->expr_type == EXPR_VARIABLE\n+      && copyable_array_p (expr1)\n+      && gfc_full_array_ref_p (expr1->ref)\n+      && expr2->expr_type == EXPR_ARRAY\n+      && gfc_compare_types (&expr1->ts, &expr2->ts))\n+    {\n+      tmp = gfc_trans_array_constructor_copy (expr1, expr2);\n+      if (tmp)\n+\treturn tmp;\n+    }\n+\n   /* Fallback to the scalarizer to generate explicit loops.  */\n   return gfc_trans_assignment_1 (expr1, expr2, init_flag);\n }"}, {"sha": "07d2e5f5fc10aa653282af78ef81e1c2804972b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b01e2f88ef92c331a9df908212f7ec5ecd537908", "patch": "@@ -1,3 +1,8 @@\n+2007-01-20  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/array_memcpy_3.f90: New test case.\n+\t* gfortran.dg/vect/vect-5.f90: Update vectorized loop count.\n+\n 2007-01-20  Roger Sayle  <roger@eyesopen.com>\n \t    Brooks Moses  <brooks.moses@codesourcery.com>\n \t    Francois-Xavier Coudert  <coudert@clipper.ens.fr>"}, {"sha": "05915877b159bd08d671c3224cdee25de5aee106", "filename": "gcc/testsuite/gfortran.dg/array_memcpy_3.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memcpy_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memcpy_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memcpy_3.f90?ref=b01e2f88ef92c331a9df908212f7ec5ecd537908", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+\n+subroutine foo(x)\n+  integer :: x(4)\n+  x(:) = (/ 3, 1, 4, 1 /)\n+end subroutine\n+\n+subroutine bar(x)\n+  integer :: x(4)\n+  x = (/ 3, 1, 4, 1 /)\n+end subroutine\n+\n+! { dg-final { scan-tree-dump-times \"memcpy\" 2 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "d657656ea1c490aaebf53ec35a0eb6e47e967011", "filename": "gcc/testsuite/gfortran.dg/vect/vect-5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01e2f88ef92c331a9df908212f7ec5ecd537908/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90?ref=b01e2f88ef92c331a9df908212f7ec5ecd537908", "patch": "@@ -35,7 +35,7 @@ program main\n         stop\n         end\n \n-! { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  } }\n+! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  } }\n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" { xfail { vect_no_align } } } }\n ! { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 1 \"vect\" { xfail { vect_no_align } } } }\n ! { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning.\" 3 \"vect\" { target { ilp32 && vect_no_align } } } }"}]}