{"sha": "1a7630623b2bff751688f7a3a30efb8d254e83c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3NjMwNjIzYjJiZmY3NTE2ODhmN2EzYTMwZWZiOGQyNTRlODNjMQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-01-02T22:30:43Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-01-02T22:30:43Z"}, "message": "call.c (convert_like_real): Check complain.\n\n2014-01-02  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/cp/\n\t* call.c (convert_like_real): Check complain.\ngcc/testsuite/\n\t* g++.dg/cpp0x/initlist-explicit-sfinae.C: New file.\n\nFrom-SVN: r206302", "tree": {"sha": "6b4ed11d3b069db745826d311eee00c9ab22b99f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b4ed11d3b069db745826d311eee00c9ab22b99f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a7630623b2bff751688f7a3a30efb8d254e83c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7630623b2bff751688f7a3a30efb8d254e83c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a7630623b2bff751688f7a3a30efb8d254e83c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a7630623b2bff751688f7a3a30efb8d254e83c1/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa118a03c4d04ce703f4b77f1d845d611ffecf50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa118a03c4d04ce703f4b77f1d845d611ffecf50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa118a03c4d04ce703f4b77f1d845d611ffecf50"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "97e2d74c32b0320cb3a01d7484c70296f820ed9b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7630623b2bff751688f7a3a30efb8d254e83c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7630623b2bff751688f7a3a30efb8d254e83c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a7630623b2bff751688f7a3a30efb8d254e83c1", "patch": "@@ -1,3 +1,7 @@\n+2014-01-02  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* call.c (convert_like_real): Check complain.\n+\n 2014-01-02  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/59378"}, {"sha": "bff987140574bf01ab20d1e515f1dd85b653812c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7630623b2bff751688f7a3a30efb8d254e83c1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7630623b2bff751688f7a3a30efb8d254e83c1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1a7630623b2bff751688f7a3a30efb8d254e83c1", "patch": "@@ -5934,6 +5934,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    && !(BRACE_ENCLOSED_INITIALIZER_P (expr)\n \t\t && CONSTRUCTOR_IS_DIRECT_INIT (expr)))\n \t  {\n+\t    if (!(complain & tf_error))\n+\t      return error_mark_node;\n \t    error (\"converting to %qT from initializer list would use \"\n \t\t   \"explicit constructor %qD\", totype, convfn);\n \t  }"}, {"sha": "12036de0e9884c1a0d907fe3d50ac7ded4d5430a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7630623b2bff751688f7a3a30efb8d254e83c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7630623b2bff751688f7a3a30efb8d254e83c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a7630623b2bff751688f7a3a30efb8d254e83c1", "patch": "@@ -1,3 +1,7 @@\n+2014-01-02  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* g++.dg/cpp0x/initlist-explicit-sfinae.C: New file.\n+\n 2014-01-02  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/59378"}, {"sha": "a2ced71a75ecdc95a93be21b8d0c193934315ad4", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-explicit-sfinae.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a7630623b2bff751688f7a3a30efb8d254e83c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit-sfinae.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a7630623b2bff751688f7a3a30efb8d254e83c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit-sfinae.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-explicit-sfinae.C?ref=1a7630623b2bff751688f7a3a30efb8d254e83c1", "patch": "@@ -0,0 +1,47 @@\n+// { dg-do compile }\n+// { dg-options -std=c++11 }\n+template<typename _Tp>\n+_Tp&& declval() noexcept;\n+\n+template<bool b>\n+struct bt {\n+    static constexpr bool value = b;\n+};\n+\n+template <typename To_, typename... From_>\n+class my_is_convertible_many {\n+  private:\n+    template <typename To>\n+      struct indirector {\n+\tindirector(To);\n+      };\n+\n+    template <typename To, typename... From>\n+      struct tag {};\n+\n+    template <typename To, typename... From>\n+      static auto test(tag<To, From...>)\n+      -> decltype(indirector<To>({declval<From>()...}), bt<true>());\n+    static auto test(...)\n+      -> bt<false>;\n+\n+  public:\n+    static constexpr bool value = decltype(test(tag<To_, From_...>()))::value;\n+};\n+\n+struct A {};\n+struct B {};\n+struct C {};\n+\n+struct Test {\n+  Test(A, A);\n+  //Test(B, B);\n+  explicit Test(C, C);\n+}; \n+\n+int main() {    \n+  static_assert(my_is_convertible_many<Test, A, A>::value,\"\"); // true, correct\n+  static_assert(!my_is_convertible_many<Test, B, B>::value,\"\"); // false, correct\n+  static_assert(!my_is_convertible_many<Test, C, C>::value,\"\"); // error\n+  return 0;\n+}"}]}