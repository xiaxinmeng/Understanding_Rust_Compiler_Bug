{"sha": "917db97b023775f3031e99040ed9d058ffdcbd21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3ZGI5N2IwMjM3NzVmMzAzMWU5OTA0MGVkOWQwNThmZmRjYmQyMQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2008-06-25T01:36:58Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2008-06-25T01:36:58Z"}, "message": "invoke.texi (Optimize Options): Add anchor for the type-punning blurb.\n\n\t* doc/invoke.texi (Optimize Options) <fstrict-aliasing>: Add\n\tanchor for the type-punning blurb.  Cross-reference \"Structures\n\tunions enumerations and bit-fields implementation\".  Provide a\n\tcast-through-pointer example.  Make final sentence self-contained.\n\t* doc/implement-c.texi (Structures unions enumerations and\n\tbit-fields implementation): Cross-reference the type-punning blurb\n\tin the -fstrict-aliasing documentation.\n\nFrom-SVN: r137095", "tree": {"sha": "23bb4c272723918d0263fd3f7f67da2986a41d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23bb4c272723918d0263fd3f7f67da2986a41d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/917db97b023775f3031e99040ed9d058ffdcbd21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917db97b023775f3031e99040ed9d058ffdcbd21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917db97b023775f3031e99040ed9d058ffdcbd21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917db97b023775f3031e99040ed9d058ffdcbd21/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9af5483ab3f3459aeecabb4207170eb6d4ebb79f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af5483ab3f3459aeecabb4207170eb6d4ebb79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af5483ab3f3459aeecabb4207170eb6d4ebb79f"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "90b7966ca6a1e6b384555a7e8be214191d9fe575", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917db97b023775f3031e99040ed9d058ffdcbd21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917db97b023775f3031e99040ed9d058ffdcbd21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=917db97b023775f3031e99040ed9d058ffdcbd21", "patch": "@@ -1,3 +1,13 @@\n+2008-06-25  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* doc/invoke.texi (Optimize Options) <fstrict-aliasing>: Add\n+\tanchor for the type-punning blurb.  Cross-reference \"Structures\n+\tunions enumerations and bit-fields implementation\".  Provide a\n+\tcast-through-pointer example.  Make final sentence self-contained.\n+\t* doc/implement-c.texi (Structures unions enumerations and\n+\tbit-fields implementation): Cross-reference the type-punning blurb\n+\tin the -fstrict-aliasing documentation.\n+\n 2008-06-24  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR middle-end/36594"}, {"sha": "6a1b59b7e85c9b9abdf2a2ddebeb576506c53960", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917db97b023775f3031e99040ed9d058ffdcbd21/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917db97b023775f3031e99040ed9d058ffdcbd21/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=917db97b023775f3031e99040ed9d058ffdcbd21", "patch": "@@ -433,8 +433,8 @@ used to determine if a function has not been inlined and why not.\n different type (C90 6.3.2.3).}\n \n The relevant bytes of the representation of the object are treated as\n-an object of the type used for the access.  This may be a trap\n-representation.\n+an object of the type used for the access.  @xref{Type-punning}.  This\n+may be a trap representation.\n \n @item\n @cite{Whether a ``plain'' @code{int} bit-field is treated as a"}, {"sha": "f69f0019decfdbf680ef26a91273361e7ddcdab0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917db97b023775f3031e99040ed9d058ffdcbd21/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917db97b023775f3031e99040ed9d058ffdcbd21/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=917db97b023775f3031e99040ed9d058ffdcbd21", "patch": "@@ -6146,7 +6146,7 @@ example, an @code{unsigned int} can alias an @code{int}, but not a\n @code{void*} or a @code{double}.  A character type may alias any other\n type.\n \n-Pay special attention to code like this:\n+@anchor{Type-punning}Pay special attention to code like this:\n @smallexample\n union a_union @{\n   int i;\n@@ -6163,7 +6163,8 @@ The practice of reading from a different union member than the one most\n recently written to (called ``type-punning'') is common.  Even with\n @option{-fstrict-aliasing}, type-punning is allowed, provided the memory\n is accessed through the union type.  So, the code above will work as\n-expected.  However, this code might not:\n+expected.  @xref{Structures unions enumerations and bit-fields\n+implementation}.  However, this code might not:\n @smallexample\n int f() @{\n   a_union t;\n@@ -6174,7 +6175,18 @@ int f() @{\n @}\n @end smallexample\n \n-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n+Similarly, access by taking the address, casting the resulting pointer\n+and dereferencing the result has undefined behavior, even if the cast\n+uses a union type, e.g.:\n+@smallexample\n+int f() @{\n+  double d = 3.0;\n+  return ((union a_union *) &d)->i;\n+@}\n+@end smallexample\n+\n+The @option{-fstrict-aliasing} option is enabled at levels\n+@option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fstrict-overflow\n @opindex fstrict-overflow"}]}