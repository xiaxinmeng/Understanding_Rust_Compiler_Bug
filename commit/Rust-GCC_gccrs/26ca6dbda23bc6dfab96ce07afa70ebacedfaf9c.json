{"sha": "26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZjYTZkYmRhMjNiYzZkZmFiOTZjZTA3YWZhNzBlYmFjZWRmYWY5Yw==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2021-05-22T11:27:42Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2021-05-22T11:27:42Z"}, "message": "Steve Kargl  <kargl@gcc.gnu.org>\n\nPR fortran/98301 - random_init() is broken\n\nCorrect implementation of random_init() when -fcoarray=lib is given.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/98301\n\t* trans-decl.c (gfc_build_builtin_function_decls): Move decl.\n\t* trans-intrinsic.c (conv_intrinsic_random_init): Use bool for\n\tlib-call of caf_random_init instead of logical (4-byte).\n\t* trans.h: Add tree var for random_init.\n\nlibgfortran/ChangeLog:\n\n\tPR fortran/98301\n\t* caf/libcaf.h (_gfortran_caf_random_init): New function.\n\t* caf/single.c (_gfortran_caf_random_init): New function.\n\t* gfortran.map: Added fndecl.\n\t* intrinsics/random_init.f90: Implement random_init.", "tree": {"sha": "992eca69f9e2e4007a4c324df7aca1893a3f488a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/992eca69f9e2e4007a4c324df7aca1893a3f488a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/comments", "author": null, "committer": null, "parents": [{"sha": "3050a1a18276d7cdd8946e34cc1344e30efb7030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3050a1a18276d7cdd8946e34cc1344e30efb7030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3050a1a18276d7cdd8946e34cc1344e30efb7030"}], "stats": {"total": 176, "additions": 106, "deletions": 70}, "files": [{"sha": "c32bd05bb1b0c4b8ec66bfb8029f4cdf7a9c6cdf", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "patch": "@@ -170,6 +170,7 @@ tree gfor_fndecl_co_min;\n tree gfor_fndecl_co_reduce;\n tree gfor_fndecl_co_sum;\n tree gfor_fndecl_caf_is_present;\n+tree gfor_fndecl_caf_random_init;\n \n \n /* Math functions.  Many other math functions are handled in\n@@ -233,7 +234,7 @@ tree gfor_fndecl_cgemm;\n tree gfor_fndecl_zgemm;\n \n /* RANDOM_INIT function.  */\n-tree gfor_fndecl_random_init;\n+tree gfor_fndecl_random_init;      /* libgfortran, 1 image only.  */\n \n static void\n gfc_add_decl_to_parent_function (tree decl)\n@@ -3516,6 +3517,8 @@ gfc_build_intrinsic_function_decls (void)\n \tvoid_type_node, 3, gfc_logical4_type_node, gfc_logical4_type_node,\n \tgfc_int4_type_node);\n \n+ // gfor_fndecl_caf_rand_init is defined in the lib-coarray section below.\n+\n   gfor_fndecl_sc_kind = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"selected_char_kind\")), \". . R \",\n \tgfc_int4_type_node, 2, gfc_charlen_type_node, pchar_type_node);\n@@ -4081,6 +4084,10 @@ gfc_build_builtin_function_decls (void)\n \tget_identifier (PREFIX(\"caf_is_present\")), \". r . r \",\n \tinteger_type_node, 3, pvoid_type_node, integer_type_node,\n \tpvoid_type_node);\n+\n+      gfor_fndecl_caf_random_init = gfc_build_library_function_decl (\n+\t    get_identifier (PREFIX(\"caf_random_init\")),\n+\t    void_type_node, 2, logical_type_node, logical_type_node);\n     }\n \n   gfc_build_intrinsic_function_decls ();"}, {"sha": "db9248c0043f252570a862fb99f9891c0c29f2f7", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "patch": "@@ -3827,38 +3827,43 @@ conv_intrinsic_random_init (gfc_code *code)\n {\n   stmtblock_t block;\n   gfc_se se;\n-  tree arg1, arg2, arg3, tmp;\n-  tree logical4_type_node = gfc_get_logical_type (4);\n+  tree arg1, arg2, tmp;\n+  /* On none coarray == lib compiles use LOGICAL(4) else regular LOGICAL.  */\n+  tree used_bool_type_node = flag_coarray == GFC_FCOARRAY_LIB\n+\t\t\t     ? logical_type_node\n+\t\t\t     : gfc_get_logical_type (4);\n \n   /* Make the function call.  */\n   gfc_init_block (&block);\n   gfc_init_se (&se, NULL);\n \n-  /* Convert REPEATABLE to a LOGICAL(4) entity.  */\n+  /* Convert REPEATABLE to the desired LOGICAL entity.  */\n   gfc_conv_expr (&se, code->ext.actual->expr);\n   gfc_add_block_to_block (&block, &se.pre);\n-  arg1 = fold_convert (logical4_type_node, gfc_evaluate_now (se.expr, &block));\n+  arg1 = fold_convert (used_bool_type_node, gfc_evaluate_now (se.expr, &block));\n   gfc_add_block_to_block (&block, &se.post);\n \n-  /* Convert IMAGE_DISTINCT to a LOGICAL(4) entity.  */\n+  /* Convert IMAGE_DISTINCT to the desired LOGICAL entity.  */\n   gfc_conv_expr (&se, code->ext.actual->next->expr);\n   gfc_add_block_to_block (&block, &se.pre);\n-  arg2 = fold_convert (logical4_type_node, gfc_evaluate_now (se.expr, &block));\n+  arg2 = fold_convert (used_bool_type_node, gfc_evaluate_now (se.expr, &block));\n   gfc_add_block_to_block (&block, &se.post);\n \n-  /* Create the hidden argument.  For non-coarray codes and -fcoarray=single,\n-     simply set this to 0.  For -fcoarray=lib, generate a call to\n-     THIS_IMAGE() without arguments.  */\n-  arg3 = build_int_cst (gfc_get_int_type (4), 0);\n   if (flag_coarray == GFC_FCOARRAY_LIB)\n     {\n-      arg3 = build_call_expr_loc (input_location, gfor_fndecl_caf_this_image,\n-\t\t\t\t  1, arg3);\n-      se.expr = fold_convert (gfc_get_int_type (4), arg3);\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_random_init,\n+\t\t\t\t 2, arg1, arg2);\n+    }\n+  else\n+    {\n+      /* The ABI for libgfortran needs to be maintained, so a hidden\n+\t argument must be include if code is compiled with -fcoarray=single\n+\t or without the option.  Set to 0.  */\n+      tree arg3 = build_int_cst (gfc_get_int_type (4), 0);\n+      tmp = build_call_expr_loc (input_location, gfor_fndecl_random_init,\n+\t\t\t\t 3, arg1, arg2, arg3);\n     }\n \n-  tmp = build_call_expr_loc (input_location, gfor_fndecl_random_init, 3,\n-\t\t\t     arg1, arg2, arg3);\n   gfc_add_expr_to_block (&block, tmp);\n \n   return gfc_finish_block (&block);"}, {"sha": "69d3fdcfdacba5a05701d9e0e8c4e1f8aabd7427", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "patch": "@@ -969,6 +969,7 @@ extern GTY(()) tree gfor_fndecl_ieee_procedure_exit;\n \n /* RANDOM_INIT.  */\n extern GTY(()) tree gfor_fndecl_random_init;\n+extern GTY(()) tree gfor_fndecl_caf_random_init;\n \n /* True if node is an integer constant.  */\n #define INTEGER_CST_P(node) (TREE_CODE(node) == INTEGER_CST)"}, {"sha": "c66d0379042ff0e3e559df3731f0f391b8c13ce1", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "patch": "@@ -261,4 +261,6 @@ void _gfortran_caf_stopped_images (gfc_descriptor_t *,\n \n int _gfortran_caf_is_present (caf_token_t, int, caf_reference_t *);\n \n+void _gfortran_caf_random_init (bool, bool);\n+\n #endif  /* LIBCAF_H  */"}, {"sha": "fc8e3b3b94af1c1af3c8912eeec1c805e19e36aa", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "patch": "@@ -3135,3 +3135,13 @@ _gfortran_caf_is_present (caf_token_t token,\n     }\n   return memptr != NULL;\n }\n+\n+/* Reference the libraries implementation.  */\n+extern void _gfortran_random_init (int32_t, int32_t, int32_t);\n+\n+void _gfortran_caf_random_init (bool repeatable, bool image_distinct)\n+{\n+  /* In a single image implementation always forward to the gfortran\n+     routine.  */\n+  _gfortran_random_init (repeatable, image_distinct, 1);\n+}"}, {"sha": "32579831a651f1deecc880bda149185d2081e3f0", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "patch": "@@ -1629,3 +1629,8 @@ GFORTRAN_10.2 {\n   _gfortran_mfindloc1_c10;\n   _gfortran_sfindloc1_c10;\n } GFORTRAN_10;\n+\n+GFORTRAN_12 {\n+  global:\n+  _gfortran_caf_random_init;\n+} GFORTRAN_10.2;"}, {"sha": "1200225e182118faaa622226b7c31b59363aa97f", "filename": "libgfortran/intrinsics/random_init.f90", "status": "modified", "additions": 60, "deletions": 54, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/libgfortran%2Fintrinsics%2Frandom_init.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c/libgfortran%2Fintrinsics%2Frandom_init.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom_init.f90?ref=26ca6dbda23bc6dfab96ce07afa70ebacedfaf9c", "patch": "@@ -1,94 +1,100 @@\n ! Copyright (C) 2018-2021 Free Software Foundation, Inc.\n ! Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n-! \n+!\n ! This file is part of the GNU Fortran runtime library (libgfortran).\n-! \n+!\n ! Libgfortran is free software; you can redistribute it and/or\n ! modify it under the terms of the GNU General Public\n ! License as published by the Free Software Foundation; either\n ! version 3 of the License, or (at your option) any later version.\n-! \n+!\n ! Libgfortran is distributed in the hope that it will be useful,\n ! but WITHOUT ANY WARRANTY; without even the implied warranty of\n ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n ! GNU General Public License for more details.\n-! \n+!\n ! Under Section 7 of GPL version 3, you are granted additional\n ! permissions described in the GCC Runtime Library Exception, version\n ! 3.1, as published by the Free Software Foundation.\n-! \n+!\n ! You should have received a copy of the GNU General Public License and\n ! a copy of the GCC Runtime Library Exception along with this program;\n ! see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n ! <http://www.gnu.org/licenses/>.\n !\n-!\n ! WARNING:  This file should never be compiled with an option that changes\n ! default logical kind from 4 to some other value or changes default integer\n-! kind from from 4 to some other value.\n-!\n-!\n-! There are four combinations of repeatable and image_distinct.  If a program\n-! is compiled without the -fcoarray= option or with -fcoarray=single, then\n-! execution of the compiled executable does not use image_distinct as it is\n-! irrelevant (although required).  The behavior is as follows:\n-!\n-! call random_init(.true., .true.)\n+! kind from 4 to some other value.\n !\n-! The sequence of random numbers is repeatable within an instance of program\n-! execution.  That is, calls to random_init(.true., .true.) during the\n-! execution will reset the sequence of RN to the same sequence.  If the\n-! program is compiled with -fcoarray=lib and multiple images are instantiated,\n-! then each image accesses a repeatable distinct sequence of random numbers.\n-! There are no guarantees that multiple execution of the program will access\n-! the same sequence.\n+! There are four combinations of repeatable and image_distinct.  The\n+! language below is from the F2018 standard (actually, J3/18-007r1).\n !\n-! call random_init(.false., .false.)\n-! call random_init(.false., .true.)\n+! This routine is only used for non-coarray programs or with programs\n+! compiled with -fcoarray=single.  Use of -fcoarray=lib or -fcoarray=shared\n+! requires different routines due to the need for communication between\n+! images under case(iv).\n !\n-! The sequence of random numbers is determined from process-dependent seeds.\n-! On each execution of the executable, different seeds will be used.  For\n-! -fcoarray=lib and multiple instantiated images, each image will use\n-! process-dependent seeds.  In other words, the two calls have identical\n-! behavior.\n+! Technically, neither image_distinct nor image_num are now needed.  The\n+! interface to _gfortran_random_init() is maintained for libgfortran ABI.\n+! Note, the Fortran standard requires the image_distinct argument, so\n+! it will always have a valid value, and the frontend generates an value\n+! of 0 for image_num.\n !\n-! call random_init(.true., .false.)\n-! \n-! For a program compiled without the -fcoarray= option or with\n-! -fcoarray=single, a single image is instantiated when the executable is\n-! run.  If the executable causes multiple images to be instantiated, then\n-! image_distinct=.false. in one image cannot affect the sequence of random\n-! numbers in another image.  As gfortran gives each image its own independent\n-! PRNG, this condition is automatically satisfied.\n-!\n-impure subroutine _gfortran_random_init(repeatable, image_distinct, hidden) \n+impure subroutine _gfortran_random_init(repeatable, image_distinct, image_num) \n \n    implicit none\n \n    logical, value, intent(in) :: repeatable\n    logical, value, intent(in) :: image_distinct\n-   integer, value, intent(in) :: hidden\n+   integer, value, intent(in) :: image_num\n \n    logical, save :: once = .true.\n-   integer :: nseed\n+   integer :: nseed, lcg_seed\n    integer, save, allocatable :: seed(:)\n \n-   if (once) then\n-      once = .false.\n-      call random_seed(size=nseed)\n-      allocate(seed(nseed))\n-      call random_seed(get=seed)\n+   if (repeatable) then\n+      if (once) then\n+         once = .false.\n+         call random_seed(size=nseed)\n+         allocate(seed(nseed))\n+         lcg_seed = 57911963\n+         call _gfortran_lcg(seed)\n+      end if\n+      call random_seed(put=seed)\n+   else\n+      call random_seed()\n       !\n-      ! To guarantee that seed is distinct on multiple images, add the hidden\n-      ! argument (which is the image index).\n+      ! This cannot happen; but, prevent gfortran complaining about\n+      ! unused variables.\n       !\n-      if (image_distinct) seed = seed + hidden\n+      if (image_num > 2) then\n+         block\n+            use iso_fortran_env, only : error_unit\n+            write(error_unit, '(A)') 'whoops: random_init(.false., .false.)'\n+            if (image_distinct) error stop image_num + 1\n+            error stop image_num\n+         end block\n+      end if\n    end if\n \n-   if (repeatable) then\n-      call random_seed(put=seed);\n-   else\n-      call random_seed();\n-   end if\n+   contains\n+      !\n+      ! SK Park and KW Miller, ``Random number generators: good ones are hard\n+      ! to find,'' Comm. ACM, 31(10), 1192--1201, (1988).\n+      !\n+      ! Implementation of a prime modulus multiplicative linear congruential\n+      ! generator, which avoids overflow and provides the full period.\n+      !\n+      impure elemental subroutine _gfortran_lcg(i)\n+         implicit none\n+         integer, intent(out) :: i\n+         integer, parameter :: a = 16807     ! Multiplier\n+         integer, parameter :: m = huge(a)   ! Modulus\n+         integer, parameter :: q = 127773    ! Quotient to avoid overflow\n+         integer, parameter :: r = 2836      ! Remainder to avoid overflow\n+         lcg_seed = a * mod(lcg_seed, q) - r * (lcg_seed / q)\n+         if (lcg_seed <= 0) lcg_seed = lcg_seed + m\n+         i = lcg_seed\n+      end subroutine _gfortran_lcg\n \n end subroutine _gfortran_random_init"}]}