{"sha": "f091ee191c503faa298df9410159b90cf3bde03a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5MWVlMTkxYzUwM2ZhYTI5OGRmOTQxMDE1OWI5MGNmM2JkZTAzYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-11-17T18:09:36Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-11-17T18:09:36Z"}, "message": "PR c++/68308 - [6 Regression] ICE: tree check: expected integer_cst,\n\nhave var_decl in decompose, at tree.h:5105\n\ngcc/\n    * cp/init.c (build_new_1): Check for expression constness\n    the right way.\n\ntestsuite/\n    * g++.dg/init/new46.C: New test.\n\nFrom-SVN: r230468", "tree": {"sha": "f201bfa497ee26f1b8f351e7779452fa6aef18b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f201bfa497ee26f1b8f351e7779452fa6aef18b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f091ee191c503faa298df9410159b90cf3bde03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f091ee191c503faa298df9410159b90cf3bde03a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f091ee191c503faa298df9410159b90cf3bde03a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f091ee191c503faa298df9410159b90cf3bde03a/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54e484eb15aa193578144cb1b22532a2f0f28b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e484eb15aa193578144cb1b22532a2f0f28b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e484eb15aa193578144cb1b22532a2f0f28b2f"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "747dea3bc26534d56937ac233a0d0a8b8e6f52ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f091ee191c503faa298df9410159b90cf3bde03a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f091ee191c503faa298df9410159b90cf3bde03a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f091ee191c503faa298df9410159b90cf3bde03a", "patch": "@@ -1,3 +1,9 @@\n+2015-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/68308\n+\t* cp/init.c (build_new_1): Check for expression constness\n+\tthe right way.\n+\n 2015-11-17  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR target/56036"}, {"sha": "5ecf9fb1cad492c64ec3a9e04fcde072340991f2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f091ee191c503faa298df9410159b90cf3bde03a/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f091ee191c503faa298df9410159b90cf3bde03a/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=f091ee191c503faa298df9410159b90cf3bde03a", "patch": "@@ -2715,7 +2715,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \n       size = size_binop (MULT_EXPR, size, fold_convert (sizetype, nelts));\n \n-      if (TREE_CONSTANT (outer_nelts))\n+      if (INTEGER_CST == TREE_CODE (outer_nelts))\n \t{\n \t  if (tree_int_cst_lt (max_outer_nelts_tree, outer_nelts))\n \t    {\n@@ -3330,7 +3330,8 @@ build_new (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t non-class type and its value before converting to std::size_t is\n \t less than zero. ... If the expression is a constant expression,\n \t the program is ill-fomed.  */\n-      if (TREE_CONSTANT (cst_nelts) && tree_int_cst_sgn (cst_nelts) == -1)\n+      if (INTEGER_CST == TREE_CODE (cst_nelts)\n+\t  && tree_int_cst_sgn (cst_nelts) == -1)\n \t{\n \t  if (complain & tf_error)\n \t    error (\"size of array is negative\");"}, {"sha": "69adb07627eb2d82e4851ab186050353f77f7f58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f091ee191c503faa298df9410159b90cf3bde03a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f091ee191c503faa298df9410159b90cf3bde03a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f091ee191c503faa298df9410159b90cf3bde03a", "patch": "@@ -1,3 +1,8 @@\n+2015-11-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/68308\n+\t* g++.dg/init/new46.C: New test.\n+\n 2015-11-17  Dominique d'Humieres <dominiq@lps.ens.fr>\n \n \tPR fortran/65751"}, {"sha": "9fd747e98d29417af715a1c2c51e683e0ade2b98", "filename": "gcc/testsuite/g++.dg/init/new46.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f091ee191c503faa298df9410159b90cf3bde03a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f091ee191c503faa298df9410159b90cf3bde03a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew46.C?ref=f091ee191c503faa298df9410159b90cf3bde03a", "patch": "@@ -0,0 +1,65 @@\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+// Test for c++/68308 - [6 Regression] ICE: tree check: expected integer_cst,\n+//                      have var_decl in decompose, at tree.h:5105\n+\n+typedef __typeof__ (sizeof 0) size_t;\n+\n+// Not defined, only referenced in templates that aren't expected\n+// to be instantiated to make sure they really aren't to verify\n+// verify c++/68308.\n+template <class T> void inst_check ();\n+\n+// Not instantiated (must not be diagnosed).\n+template <class T>\n+char* fn1_x () {\n+    const size_t a = sizeof (T);\n+    return inst_check<T>() ? new char [a] : 0;\n+}\n+\n+// Not instantiated (must not be diagnosed).\n+template <size_t N>\n+char* fn2_1_x () {\n+    return inst_check<char [N]>() ? new char [N] : 0;\n+}\n+\n+template <size_t N>\n+char* fn2_1 () {\n+    return new char [N];\n+}\n+\n+// Not instantiated (must not be diagnosed).\n+template <size_t M, size_t N>\n+char* fn2_2_x () {\n+    return inst_check<char [M][N]>() ? new char [M][N] : 0;\n+}\n+\n+template <size_t M, size_t N>\n+char* fn2_2 () {\n+    return new char [M][N];   // { dg-error \"size of array is too large\" }\n+}\n+\n+// Not instantiated (must not be diagnosed).\n+template <class T>\n+T* fn3_x () {\n+    const size_t a = sizeof (T);\n+    return inst_check<T>() ? new T [a] : 0;\n+}\n+\n+template <class T>\n+T* fn3 () {\n+    const size_t a = sizeof (T);\n+    return new T [a];         // { dg-error \"size of array is too large\" }\n+}\n+\n+\n+struct S { char a [__SIZE_MAX__ / 8]; };\n+\n+void foo ()\n+{\n+    fn2_1<1>();\n+    fn2_1<__SIZE_MAX__ / 4>();\n+    fn2_2<__SIZE_MAX__ / 4, 4>();\n+    fn3<S>();\n+}"}]}