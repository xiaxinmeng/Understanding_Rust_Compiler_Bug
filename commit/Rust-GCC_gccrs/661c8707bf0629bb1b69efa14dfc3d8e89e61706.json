{"sha": "661c8707bf0629bb1b69efa14dfc3d8e89e61706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxYzg3MDdiZjA2MjliYjFiNjllZmExNGRmYzNkOGU4OWU2MTcwNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-07-09T09:26:47Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-07-09T09:26:47Z"}, "message": "Check int_size_in_bytes in ix86_return_in_memory\n\nix86_return_in_memory should check negative return from int_size_in_bytes,\nsimilar to other ports.\n\ngcc/\n\n\tPR target/66817\n\t* config/i386/i386.c (ix86_return_in_memory): Return true\n\tif int_size_in_bytes returns negative for IA MCU.\n\ngcc/testsuite/\n\n\tPR target/66817\n\t* gcc.target/i386/pr66817.c: New test.\n\nFrom-SVN: r225605", "tree": {"sha": "ea2202259edd7a19acc779240272eeb8e92f407e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea2202259edd7a19acc779240272eeb8e92f407e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/661c8707bf0629bb1b69efa14dfc3d8e89e61706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661c8707bf0629bb1b69efa14dfc3d8e89e61706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/661c8707bf0629bb1b69efa14dfc3d8e89e61706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/661c8707bf0629bb1b69efa14dfc3d8e89e61706/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca87c493f78fc19c4196e28cfe137add40bf2932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca87c493f78fc19c4196e28cfe137add40bf2932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca87c493f78fc19c4196e28cfe137add40bf2932"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "78cc6f945532f0b3bb629fe2d5276e92fea1bf0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661c8707bf0629bb1b69efa14dfc3d8e89e61706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661c8707bf0629bb1b69efa14dfc3d8e89e61706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=661c8707bf0629bb1b69efa14dfc3d8e89e61706", "patch": "@@ -1,3 +1,9 @@\n+2015-07-09  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66817\n+\t* config/i386/i386.c (ix86_return_in_memory): Return true\n+\tif int_size_in_bytes returns negative for IA MCU.\n+\n 2015-07-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/66718"}, {"sha": "54ee6f3d4fdf9d622d9bc8363b9a49cf75301b32", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661c8707bf0629bb1b69efa14dfc3d8e89e61706/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661c8707bf0629bb1b69efa14dfc3d8e89e61706/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=661c8707bf0629bb1b69efa14dfc3d8e89e61706", "patch": "@@ -8682,7 +8682,7 @@ ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n       /* Intel MCU psABI returns scalars and aggregates no larger than 8\n \t bytes in registers.  */\n       if (TARGET_IAMCU)\n-\treturn VECTOR_MODE_P (mode) || size > 8;\n+\treturn VECTOR_MODE_P (mode) || size < 0 || size > 8;\n \n       if (mode == BLKmode)\n \treturn true;"}, {"sha": "42b6203162324284a370bd54e1270f4a5b908192", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661c8707bf0629bb1b69efa14dfc3d8e89e61706/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661c8707bf0629bb1b69efa14dfc3d8e89e61706/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=661c8707bf0629bb1b69efa14dfc3d8e89e61706", "patch": "@@ -1,3 +1,8 @@\n+2015-07-09  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/66817\n+\t* gcc.target/i386/pr66817.c: New test.\n+\n 2015-07-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/66718"}, {"sha": "7ec18b74d1c01a0c5259746ff64da524622a1d65", "filename": "gcc/testsuite/gcc.target/i386/pr66817.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/661c8707bf0629bb1b69efa14dfc3d8e89e61706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66817.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/661c8707bf0629bb1b69efa14dfc3d8e89e61706/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66817.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66817.c?ref=661c8707bf0629bb1b69efa14dfc3d8e89e61706", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mno-sse -mno-mmx -miamcu\" } */\n+\n+extern void abort (void);\n+int\n+main (int argc, char **argv)\n+{\n+  int size = 10;\n+  typedef struct\n+    {\n+      char val[size];\n+    }\n+  block;\n+  block a, b;\n+  block __attribute__((noinline))\n+  retframe_block ()\n+    {\n+      return *(block *) &b;\n+    }\n+  b.val[0] = 1;\n+  b.val[9] = 2;\n+  a=retframe_block ();\n+  if (a.val[0] != 1\n+      || a.val[9] != 2)\n+    abort ();\n+  return 0;\n+}"}]}