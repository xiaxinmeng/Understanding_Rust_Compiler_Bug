{"sha": "065d214ce4129853330cb0c992b981830c950909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY1ZDIxNGNlNDEyOTg1MzMzMGNiMGM5OTJiOTgxODMwYzk1MDkwOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-02-14T11:25:19Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-02-14T11:25:19Z"}, "message": "re PR c/64768 (internal compiler error: tree check: expected tree that contains \u2018decl with RTL\u2019 structure, have \u2018field_decl\u2019 in set_decl_rtl, at emit-rtl.c:1274)\n\n\tPR c/64768\n\t* c-decl.c (grokdeclarator): Set the range of a flexible array member\n\tdeclared through a typedef name.\n\n\t* gcc.dg/array-11.c: New test.\n\t* gcc.dg/array-12.c: New test.\n\t* gcc.dg/array-13.c: New test.\n\t* gcc.dg/array-14.c: New test.\n\t* gcc.dg/c99-flex-array-typedef-1.c: New test.\n\t* gcc.dg/c99-flex-array-typedef-2.c: New test.\n\t* gcc.dg/c99-flex-array-typedef-3.c: New test.\n\t* gcc.dg/c99-flex-array-typedef-5.c: New test.\n\t* gcc.dg/c99-flex-array-typedef-7.c: New test.\n\t* gcc.dg/c99-flex-array-typedef-8.c: New test.\n\nFrom-SVN: r220708", "tree": {"sha": "577ba5fb4fedac8f082c3b7d52e8e3fe27c2e462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577ba5fb4fedac8f082c3b7d52e8e3fe27c2e462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/065d214ce4129853330cb0c992b981830c950909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065d214ce4129853330cb0c992b981830c950909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/065d214ce4129853330cb0c992b981830c950909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/065d214ce4129853330cb0c992b981830c950909/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "952e216e5a092b5072894b3889f18bc5f76dcf72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952e216e5a092b5072894b3889f18bc5f76dcf72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952e216e5a092b5072894b3889f18bc5f76dcf72"}], "stats": {"total": 205, "additions": 205, "deletions": 0}, "files": [{"sha": "0bb5dc70600b851f029d17f0fa29e5d39f28ee32", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -1,3 +1,9 @@\n+2015-02-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64768\n+\t* c-decl.c (grokdeclarator): Set the range of a flexible array member\n+\tdeclared through a typedef name.\n+\n 2015-02-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/65050"}, {"sha": "8eeee9c53de29646bb0e61f0d5fb993d2e82959a", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -6515,6 +6515,19 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      error_at (loc, \"unnamed field has incomplete type\");\n \t    type = error_mark_node;\n \t  }\n+\telse if (TREE_CODE (type) == ARRAY_TYPE\n+\t\t && TYPE_DOMAIN (type) == NULL_TREE)\n+\t  {\n+\t    /* We have a flexible array member through a typedef.\n+\t       Set suitable range.  Whether this is a correct position\n+\t       for a flexible array member will be determined elsewhere.  */\n+\t    if (!in_system_header_at (input_location))\n+\t      pedwarn_c90 (loc, OPT_Wpedantic, \"ISO C90 does not \"\n+\t\t\t   \"support flexible array members\");\n+\t    type = build_distinct_type_copy (TYPE_MAIN_VARIANT (type));\n+\t    TYPE_DOMAIN (type) = build_range_type (sizetype, size_zero_node,\n+\t\t\t\t\t\t   NULL_TREE);\n+\t  }\n \ttype = c_build_qualified_type (type, type_quals);\n \tdecl = build_decl (declarator->id_loc,\n \t\t\t   FIELD_DECL, declarator->u.id, type);"}, {"sha": "f58cfcc1272b5b3d1051792be90b41dd197c0cf9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -1,3 +1,17 @@\n+2015-02-14  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/64768\n+\t* gcc.dg/array-11.c: New test.\n+\t* gcc.dg/array-12.c: New test.\n+\t* gcc.dg/array-13.c: New test.\n+\t* gcc.dg/array-14.c: New test.\n+\t* gcc.dg/c99-flex-array-typedef-1.c: New test.\n+\t* gcc.dg/c99-flex-array-typedef-2.c: New test.\n+\t* gcc.dg/c99-flex-array-typedef-3.c: New test.\n+\t* gcc.dg/c99-flex-array-typedef-5.c: New test.\n+\t* gcc.dg/c99-flex-array-typedef-7.c: New test.\n+\t* gcc.dg/c99-flex-array-typedef-8.c: New test.\n+\n 2015-02-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60894"}, {"sha": "dbf38ae8ca950c87f1b899ca22b68cbfe16ec231", "filename": "gcc/testsuite/gcc.dg/array-11.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Farray-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Farray-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-11.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Verify that we can't do things to get ourselves in trouble\n+   with GCC's initialized flexible array member extension.  */\n+\n+typedef int T[];\n+struct f { int w; T x; };\n+struct g { struct f f; };\n+struct g g1 = { { 0, { } } };\n+struct g g2 = { { 0, { 1 } } }; /* { dg-error \"nested context\" \"nested\" } */\n+\t\t\t\t/* { dg-message \"near init\" \"near\" { target *-*-* } 11 } */\n+struct h { int x[0]; int y; };\n+struct h h1 = { { 0 }, 1 }; /* { dg-warning \"excess elements\" \"excess\" } */\n+\t\t\t    /* { dg-message \"near init\" \"before end\" { target *-*-* } 14 } */"}, {"sha": "b3beed57d9e07470a65842fbdcc802713c4fe6cc", "filename": "gcc/testsuite/gcc.dg/array-12.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Farray-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Farray-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-12.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* ISO C99 flexible array members don't have a size.  GCC's zero-length\n+   array extension does.  */\n+\n+typedef int T0[0];\n+typedef int T[];\n+struct f { int w; T0 x; } f;\n+struct g { int w; T x; } g;\n+\n+char test_gcc[sizeof (f.x) ? -1 : 1];\n+char test_iso[sizeof (g.x) ? -1 : 1]; /* { dg-error \"incomplete type\" \"iso\" } */"}, {"sha": "8335b7a186afe1e0de89676bb32e9f9177bb659e", "filename": "gcc/testsuite/gcc.dg/array-13.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Farray-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Farray-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-13.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+/* Verify that GCC's initialized flexible array member extension\n+   works properly.  */\n+\n+extern void abort(void);\n+extern void exit(int);\n+\n+typedef int T[];\n+typedef int T0[0];\n+\n+struct f { int w; T x; };\n+struct g { int w; T0 x; };\n+\n+static struct f f = { 4, { 0, 1, 2, 3 } };\n+static int junk1[] = { -1, -1, -1, -1 };\n+static struct g g = { 4, { 0, 1, 2, 3 } }; /* { dg-warning \"(excess elements)|(near initialization)\" \"\" } */\n+static int junk2[] = { -1, -1, -1, -1 };\n+\n+int main()\n+{\n+  int i;\n+  for (i = 0; i < f.w; ++i)\n+    if (f.x[i] != i)\n+      abort ();\n+  exit(0);\n+}"}, {"sha": "cb2a347fbbefd4ceb9393101bed9fe495148f853", "filename": "gcc/testsuite/gcc.dg/array-14.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Farray-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Farray-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-14.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+/* Verify that GCC forbids non-static initialization of\n+   flexible array members. */\n+\n+typedef char T[];\n+struct str { int len; T s; };\n+\n+struct str a = { 2, \"a\" };\n+\n+void foo()\n+{\n+  static struct str b = { 2, \"b\" };\n+  struct str c = { 2, \"c\" }; /* { dg-error \"(non-static)|(near initialization)\" } */\n+  struct str d = (struct str) { 2, \"d\" }; /* { dg-error \"(non-static)|(near initialization)\" } */\n+  struct str e = (struct str) { d.len, \"e\" }; /* { dg-error \"(non-static)|(initialization)\" } */\n+}"}, {"sha": "93f91f816a86e67eb4d67eaadb91b4c04f0ebf4c", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-typedef-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-1.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,9 @@\n+/* Test for invalid uses of flexible array members.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+typedef int A[];\n+struct s1 { A x; }; /* { dg-error \"empty struct\" \"empty\" } */\n+struct s2 { int :1; A x; }; /* { dg-error \"empty struct\" \"empty\" } */\n+struct s3 { A x; int y; }; /* { dg-error \"not at end\" \"not at end\" } */\n+struct s4 { int x; A y; };"}, {"sha": "f869f75c2bdd4c8f313653696873300df6815df7", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-typedef-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-2.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,17 @@\n+/* Test for invalid uses of flexible array members.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+typedef char A[];\n+\n+struct S {\n+   int n;\n+   A a;\n+};\n+\n+void\n+foo (void)\n+{\n+  struct S s;\n+  s.a = \"abc\";  /* { dg-error \"invalid use of flexible array member\" } */\n+}"}, {"sha": "11db886118185e9f21bdc8f9bad60bccc75781f5", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-typedef-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-3.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,32 @@\n+/* Test for flexible array members.  Test for where structures with\n+   such members may not occur.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+typedef int T[];\n+struct flex { int a; T b; };\n+union rf1 { struct flex a; int b; };\n+union rf2 { int a; struct flex b; };\n+union rf3 { int a; union rf1 b; };\n+union rf4 { union rf2 a; int b; };\n+\n+/* The above structure and unions may not be members of structures or\n+   elements of arrays (6.7.2.1#2).  */\n+\n+struct t0 { struct flex a; }; /* { dg-error \"invalid use of structure\" } */\n+struct t1 { union rf1 a; }; /* { dg-error \"invalid use of structure\" } */\n+struct t2 { union rf2 a; }; /* { dg-error \"invalid use of structure\" } */\n+struct t3 { union rf3 a; }; /* { dg-error \"invalid use of structure\" } */\n+struct t4 { union rf4 a; }; /* { dg-error \"invalid use of structure\" } */\n+\n+void f0 (struct flex[]); /* { dg-error \"invalid use of structure\" } */\n+void f1 (union rf1[]); /* { dg-error \"invalid use of structure\" } */\n+void f2 (union rf2[]); /* { dg-error \"invalid use of structure\" } */\n+void f3 (union rf3[]); /* { dg-error \"invalid use of structure\" } */\n+void f4 (union rf4[]); /* { dg-error \"invalid use of structure\" } */\n+\n+struct flex a0[1]; /* { dg-error \"invalid use of structure\" } */\n+union rf1 a1[1]; /* { dg-error \"invalid use of structure\" } */\n+union rf2 a2[1]; /* { dg-error \"invalid use of structure\" } */\n+union rf3 a3[1]; /* { dg-error \"invalid use of structure\" } */\n+union rf4 a4[1]; /* { dg-error \"invalid use of structure\" } */"}, {"sha": "2d1fbe1c13084eca3830c9181e42a3d6f2150b48", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-typedef-5.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-5.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,6 @@\n+/* Test for flexible array members: not permitted in unions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+typedef char T[];\n+union u { int a; T b; }; /* { dg-error \"flexible array member in union\" } */"}, {"sha": "8b954db4e0c53c380b158ce1459d93552be55d4a", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-typedef-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-7.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,18 @@\n+/* Initialization of a flexible array member with a string constant\n+   must be diagnosed.  PR 37481.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+typedef char T[];\n+struct s { int a; T b; };\n+\n+struct s a = { 0, \"\" }; /* { dg-error \"initialization of a flexible array member\" } */\n+/* { dg-message \"near init\" \"near init\" { target *-*-* } 9 } */\n+struct s b = { 0, { 0 } }; /* { dg-error \"initialization of a flexible array member\" } */\n+/* { dg-message \"near init\" \"near init\" { target *-*-* } 11 } */\n+struct s c = { 0, { } }; /* { dg-error \"ISO C forbids empty initializer braces\" } */\n+struct s d = { .b = \"\" }; /* { dg-error \"initialization of a flexible array member\" } */\n+/* { dg-message \"near init\" \"near init\" { target *-*-* } 14 } */\n+struct s e = { .b = { 0 } }; /* { dg-error \"initialization of a flexible array member\" } */\n+/* { dg-message \"near init\" \"near init\" { target *-*-* } 16 } */\n+struct s f = { .b = { } }; /* { dg-error \"ISO C forbids empty initializer braces\" } */"}, {"sha": "26c4a23428ca8941d0d71648c2e76fe5a3857e62", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-typedef-8.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/065d214ce4129853330cb0c992b981830c950909/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-typedef-8.c?ref=065d214ce4129853330cb0c992b981830c950909", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef char T[];\n+struct foo { int x; T y; };\n+struct bar { struct foo f; };\n+struct baz { struct bar b; };\n+\n+struct foo a1 = { 1, \"abc\" };\n+struct foo a2 = { 1, { \"abc\" } };\n+struct foo b1[] = { { 1, \"abc\" } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct foo b2[] = { { 1, { \"abc\" } } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct bar c1[] = { { { 1, \"abc\" } } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct bar c2[] = { { { 1, { \"abc\" } } } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct baz d1[] = { { { { 1, \"abc\" } } } }; /* { dg-error \"initialization of flexible array member\" } */\n+struct baz d2[] = { { { { 1, { \"abc\" } } } } }; /* { dg-error \"initialization of flexible array member\" } */"}]}