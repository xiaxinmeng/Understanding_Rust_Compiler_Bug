{"sha": "934790cc6719ae6f0d6a7f408cedba1acab9f93d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM0NzkwY2M2NzE5YWU2ZjBkNmE3ZjQwOGNlZGJhMWFjYWI5ZjkzZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-04-25T19:03:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-04-25T19:03:41Z"}, "message": "c-common.def (EXPR_STMT): Remove, moved to C++ frontend.\n\n./\t* c-common.def (EXPR_STMT): Remove, moved to C++ frontend.\n\t* c-common.h (EXPR_STMT_EXPR): Don't define.\n\t(c_common_stmt_codes): Don't define.\n\t* c-dump.c (c_dump_tree): Remove EXPR_STMT case.\n\t* c-gimplify.c (gimplify_expr_stmt): Remove.\n\t(c_gimplify_expr): Remove EXPR_STMT case.\n\t* c-objc-common.c (c_objc_common_init): Remove stmt_codes and call\n\tto INIT_STATEMENT_CODES.\n\t* c-pretty-print.c (pp_c_statement): Just call dump_generic_node.\ncp/\n\t* cp-tree.def: Add EXPR_STMT.\n\t* cp-tree.h (cp_stmt_codes): Add EXPR_STMT.\n\t(EXPR_STMT_EXPR): Define.\n\t* cp-gimplify.c: Include \"flags.h\".\n\t(gimplify_expr_stmt): New static function.\n\t(cp_gimplify_expr): Handle EXPR_STMT.\n\t* cxx-pretty-print.c (pp_cxx_statement): Use pp_cxx_expression\n\trather than pp_expression.\n\t(pp_cxx_statement): Handle EXPR_STMT.\n\t* dump.c (cp_dump_tree): Handle EXPR_STMT.\n\t* lex.c (cxx_init): Don't use c_common_stmt_codes in stmt_codes\n\tinitializer.\n\nFrom-SVN: r98731", "tree": {"sha": "04c6f7b2baf3f9d03ae1167e9d3db012d53a4e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c6f7b2baf3f9d03ae1167e9d3db012d53a4e00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/934790cc6719ae6f0d6a7f408cedba1acab9f93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934790cc6719ae6f0d6a7f408cedba1acab9f93d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/934790cc6719ae6f0d6a7f408cedba1acab9f93d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/934790cc6719ae6f0d6a7f408cedba1acab9f93d/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eca5a6a939732c946f3ade566ae1dd4f3def37c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca5a6a939732c946f3ade566ae1dd4f3def37c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca5a6a939732c946f3ade566ae1dd4f3def37c3"}], "stats": {"total": 210, "additions": 102, "deletions": 108}, "files": [{"sha": "d99ba07d345e961983412eb588f0e8ee2fbec111", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -1,3 +1,15 @@\n+2005-04-25  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* c-common.def (EXPR_STMT): Remove, moved to C++ frontend.\n+\t* c-common.h (EXPR_STMT_EXPR): Don't define.\n+\t(c_common_stmt_codes): Don't define.\n+\t* c-dump.c (c_dump_tree): Remove EXPR_STMT case.\n+\t* c-gimplify.c (gimplify_expr_stmt): Remove.\n+\t(c_gimplify_expr): Remove EXPR_STMT case.\n+\t* c-objc-common.c (c_objc_common_init): Remove stmt_codes and call\n+\tto INIT_STATEMENT_CODES.\n+\t* c-pretty-print.c (pp_c_statement): Just call dump_generic_node.\n+\n 2005-04-25  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-cfg.c (tree_duplicate_bb): Duplicate EH region too."}, {"sha": "bd6269409d2ef004f836b372f8a8b6a64bbb6c43", "filename": "gcc/c-common.def", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -1,5 +1,5 @@\n /* This file contains the definitions and documentation for the\n-   additional tree codes used in the GNU C++ compiler (see tree.def\n+   additional tree codes used in the GNU C compiler (see tree.def\n    for the standard codes).\n    Copyright (C) 1987, 1988, 1990, 1993, 1997, 1998,\n    1999, 2000, 2001, 2004, 2005 Free Software Foundation, Inc.\n@@ -22,12 +22,8 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n-/* Tree nodes relevant to both C and C++. These were originally in\n-cp-tree.def in the cp subdir.  */\n-\n-/* Used to represent an expression statement.  Use `EXPR_STMT_EXPR' to\n-   obtain the expression.  */\n-DEFTREECODE (EXPR_STMT, \"expr_stmt\", tcc_expression, 1)\n+/* Tree nodes used in the C frontend.  These are also shared with the\n+   C++ and Objective C frontends.  */\n \n /* A COMPOUND_LITERAL_EXPR represents a C99 compound literal.  The\n    COMPOUND_LITERAL_EXPR_DECL_STMT is the a DECL_STMT containing the decl"}, {"sha": "5c9330b3c90ac3a602255621739bb3a4ed1183de", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -708,10 +708,6 @@ extern void finish_file\t(void);\n #define STATEMENT_LIST_HAS_LABEL(NODE) \\\n   TREE_LANG_FLAG_3 (STATEMENT_LIST_CHECK (NODE))\n \n-/* EXPR_STMT accessor. This gives the expression associated with an\n-   expression statement.  */\n-#define EXPR_STMT_EXPR(NODE)    TREE_OPERAND (EXPR_STMT_CHECK (NODE), 0)\n-\n /* COMPOUND_LITERAL_EXPR accessors.  */\n #define COMPOUND_LITERAL_EXPR_DECL_STMT(NODE)\t\t\\\n   TREE_OPERAND (COMPOUND_LITERAL_EXPR_CHECK (NODE), 0)\n@@ -728,9 +724,6 @@ enum c_tree_code {\n \n #undef DEFTREECODE\n \n-#define c_common_stmt_codes\t\t\t\t\\\n-   EXPR_STMT\n-\n /* TRUE if a code represents a statement.  The front end init\n    langhook should take care of initialization of this array.  */\n extern bool statement_code_p[MAX_TREE_CODES];"}, {"sha": "a308ec98fb1d62730fcb30fb1c82625b8650718e", "filename": "gcc/c-dump.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -54,11 +54,6 @@ c_dump_tree (void *dump_info, tree t)\n \tdump_string (di, \"bitfield\");\n       break;\n \n-    case EXPR_STMT:\n-      dump_stmt (di, t);\n-      dump_child (\"expr\", EXPR_STMT_EXPR (t));\n-      break;\n-\n     default:\n       break;\n     }"}, {"sha": "a82c4a6562bbe2c0393e90bc7b25a28f9a0f7cd9", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 3, "deletions": 51, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -173,56 +173,11 @@ c_build_bind_expr (tree block, tree body)\n   return bind;\n }\n \n-/*  Gimplify an EXPR_STMT node.\n-\n-    STMT is the statement node.\n-\n-    PRE_P points to the list where side effects that must happen before\n-\tSTMT should be stored.\n-\n-    POST_P points to the list where side effects that must happen after\n-\tSTMT should be stored.  */\n-\n-static enum gimplify_status\n-gimplify_expr_stmt (tree *stmt_p)\n-{\n-  tree stmt = EXPR_STMT_EXPR (*stmt_p);\n-\n-  if (stmt == error_mark_node)\n-    stmt = NULL;\n-\n-  /* Gimplification of a statement expression will nullify the\n-     statement if all its side effects are moved to *PRE_P and *POST_P.\n-\n-     In this case we will not want to emit the gimplified statement.\n-     However, we may still want to emit a warning, so we do that before\n-     gimplification.  */\n-  if (stmt && (extra_warnings || warn_unused_value))\n-    {\n-      if (!TREE_SIDE_EFFECTS (stmt))\n-\t{\n-\t  if (!IS_EMPTY_STMT (stmt)\n-\t      && !VOID_TYPE_P (TREE_TYPE (stmt))\n-\t      && !TREE_NO_WARNING (stmt))\n-\t    warning (0, \"statement with no effect\");\n-\t}\n-      else if (warn_unused_value)\n-\twarn_if_unused_value (stmt, input_location);\n-    }\n-\n-  if (stmt == NULL_TREE)\n-    stmt = alloc_stmt_list ();\n-\n-  *stmt_p = stmt;\n-\n-  return GS_OK;\n-}\n-\n /* Gimplification of expression trees.  */\n \n-/* Gimplify a C99 compound literal expression.  This just means adding the\n-   DECL_EXPR before the current EXPR_STMT and using its anonymous decl\n-   instead.  */\n+/* Gimplify a C99 compound literal expression.  This just means adding\n+   the DECL_EXPR before the current statement and using its anonymous\n+   decl instead.  */\n \n static enum gimplify_status\n gimplify_compound_literal_expr (tree *expr_p, tree *pre_p)\n@@ -266,9 +221,6 @@ c_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p ATTRIBUTE_UNUSED)\n     case COMPOUND_LITERAL_EXPR:\n       return gimplify_compound_literal_expr (expr_p, pre_p);\n \n-    case EXPR_STMT:\n-      return gimplify_expr_stmt (expr_p);\n-\n     default:\n       return GS_UNHANDLED;\n     }"}, {"sha": "0dc8f55ddfcb242d642883ff60cf159746aaed9e", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -124,12 +124,6 @@ c_warn_unused_global_decl (tree decl)\n bool\n c_objc_common_init (void)\n {\n-  static const enum tree_code stmt_codes[] = {\n-    c_common_stmt_codes\n-  };\n-\n-  INIT_STATEMENT_CODES (stmt_codes);\n-\n   c_init_decl_processing ();\n \n   if (c_common_init () == false)"}, {"sha": "699977a08c3a546d16d4b4eec3c2c7467ec758e3", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -1910,40 +1910,16 @@ pp_c_expression (c_pretty_printer *pp, tree e)\n \f\n /* Statements.  */\n \n-/* statement:\n-      labeled-statement\n-      compound-statement\n-      expression-statement\n-      selection-statement\n-      iteration-statement\n-      jump-statement   */\n-\n void\n pp_c_statement (c_pretty_printer *pp, tree stmt)\n {\n-  enum tree_code code;\n-\n   if (stmt == NULL)\n     return;\n \n   if (pp_needs_newline (pp))\n     pp_newline_and_indent (pp, 0);\n \n-  code = TREE_CODE (stmt);\n-  switch (code)\n-    {\n-      /* expression-statement:\n-            expression(opt) ;  */\n-    case EXPR_STMT:\n-      pp_expression (pp, EXPR_STMT_EXPR (stmt));\n-      pp_c_semicolon (pp);\n-      pp_needs_newline (pp) = true;\n-      break;\n-\n-    default:\n-      dump_generic_node (pp_base (pp), stmt, pp_indentation (pp), 0, true);\n-      break;\n-    }\n+  dump_generic_node (pp_base (pp), stmt, pp_indentation (pp), 0, true);\n }\n \n \f"}, {"sha": "09677e8f645bd56c5cdb538bb344ba00a0f98d8f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -1,3 +1,18 @@\n+2005-04-25  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* cp-tree.def: Add EXPR_STMT.\n+\t* cp-tree.h (cp_stmt_codes): Add EXPR_STMT.\n+\t(EXPR_STMT_EXPR): Define.\n+\t* cp-gimplify.c: Include \"flags.h\".\n+\t(gimplify_expr_stmt): New static function.\n+\t(cp_gimplify_expr): Handle EXPR_STMT.\n+\t* cxx-pretty-print.c (pp_cxx_statement): Use pp_cxx_expression\n+\trather than pp_expression.\n+\t(pp_cxx_statement): Handle EXPR_STMT.\n+\t* dump.c (cp_dump_tree): Handle EXPR_STMT.\n+\t* lex.c (cxx_init): Don't use c_common_stmt_codes in stmt_codes\n+\tinitializer.\n+\n 2005-04-25  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR C++/21188"}, {"sha": "fc8c1af2d21422c986f2c9289a4ab1a7c7a666c9", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-gimple.h\"\n #include \"hashtab.h\"\n #include \"pointer-set.h\"\n+#include \"flags.h\"\n \n /* Local declarations.  */\n \n@@ -338,6 +339,41 @@ gimplify_switch_stmt (tree *stmt_p)\n   *stmt_p = finish_bc_block (bc_break, break_block, *stmt_p);\n }\n \n+/*  Gimplify an EXPR_STMT node.  */\n+\n+static void\n+gimplify_expr_stmt (tree *stmt_p)\n+{\n+  tree stmt = EXPR_STMT_EXPR (*stmt_p);\n+\n+  if (stmt == error_mark_node)\n+    stmt = NULL;\n+\n+  /* Gimplification of a statement expression will nullify the\n+     statement if all its side effects are moved to *PRE_P and *POST_P.\n+\n+     In this case we will not want to emit the gimplified statement.\n+     However, we may still want to emit a warning, so we do that before\n+     gimplification.  */\n+  if (stmt && (extra_warnings || warn_unused_value))\n+    {\n+      if (!TREE_SIDE_EFFECTS (stmt))\n+\t{\n+\t  if (!IS_EMPTY_STMT (stmt)\n+\t      && !VOID_TYPE_P (TREE_TYPE (stmt))\n+\t      && !TREE_NO_WARNING (stmt))\n+\t    warning (0, \"statement with no effect\");\n+\t}\n+      else if (warn_unused_value)\n+\twarn_if_unused_value (stmt, input_location);\n+    }\n+\n+  if (stmt == NULL_TREE)\n+    stmt = alloc_stmt_list ();\n+\n+  *stmt_p = stmt;\n+}\n+\n /* Gimplify initialization from an AGGR_INIT_EXPR.  */\n \n static void\n@@ -516,6 +552,11 @@ cp_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       ret = GS_ALL_DONE;\n       break;\n \n+    case EXPR_STMT:\n+      gimplify_expr_stmt (expr_p);\n+      ret = GS_OK;\n+      break;\n+\n     default:\n       ret = c_gimplify_expr (expr_p, pre_p, post_p);\n       break;"}, {"sha": "705517a2e4a88a9a22a558e1deed1c6f103b19fe", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -305,6 +305,10 @@ DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", tcc_statement, 0)\n    SWITCH_STMT_COND, SWITCH_STMT_BODY and SWITCH_STMT_TYPE, respectively.  */\n DEFTREECODE (SWITCH_STMT, \"switch_stmt\", tcc_statement, 3)\n \n+/* Used to represent an expression statement.  Use `EXPR_STMT_EXPR' to\n+   obtain the expression.  */\n+DEFTREECODE (EXPR_STMT, \"expr_stmt\", tcc_expression, 1)\n+\n DEFTREECODE (TAG_DEFN, \"tag_defn\", tcc_expression, 0)\n \n /* Template instantiation level node."}, {"sha": "05b28dde06fd6a4b59541418380ce16db6283e31", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -852,7 +852,7 @@ enum cplus_tree_code {\n    EH_SPEC_BLOCK,\tUSING_STMT,\tTAG_DEFN,\t\\\n    IF_STMT,\t\tCLEANUP_STMT,\tFOR_STMT,\t\\\n    WHILE_STMT,\t\tDO_STMT,\tBREAK_STMT,\t\\\n-   CONTINUE_STMT,\tSWITCH_STMT\n+   CONTINUE_STMT,\tSWITCH_STMT,\tEXPR_STMT\n enum languages { lang_c, lang_cplusplus, lang_java };\n \n /* Macros to make error reporting functions' lives easier.  */\n@@ -2949,6 +2949,10 @@ struct lang_decl GTY(())\n /* STMT_EXPR accessor.  */\n #define STMT_EXPR_STMT(NODE)    TREE_OPERAND (STMT_EXPR_CHECK (NODE), 0)\n \n+/* EXPR_STMT accessor. This gives the expression associated with an\n+   expression statement.  */\n+#define EXPR_STMT_EXPR(NODE)    TREE_OPERAND (EXPR_STMT_CHECK (NODE), 0)\n+\n /* An enumeration of the kind of tags that C++ accepts.  */\n enum tag_types {\n   none_type = 0, /* Not a tag type.  */"}, {"sha": "0ad1e9a4025799be82577da38b1c348449223283", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -1587,7 +1587,7 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_cxx_identifier (pp, \"switch\");\n       pp_space (pp);\n       pp_cxx_left_paren (pp);\n-      pp_expression (pp, SWITCH_STMT_COND (t));\n+      pp_cxx_expression (pp, SWITCH_STMT_COND (t));\n       pp_cxx_right_paren (pp);\n       pp_indentation (pp) += 3;\n       pp_needs_newline (pp) = true;\n@@ -1604,7 +1604,7 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_cxx_identifier (pp, \"while\");\n       pp_space (pp);\n       pp_cxx_left_paren (pp);\n-      pp_expression (pp, WHILE_COND (t));\n+      pp_cxx_expression (pp, WHILE_COND (t));\n       pp_cxx_right_paren (pp);\n       pp_newline_and_indent (pp, 3);\n       pp_cxx_statement (pp, WHILE_BODY (t));\n@@ -1620,7 +1620,7 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_cxx_identifier (pp, \"while\");\n       pp_space (pp);\n       pp_cxx_left_paren (pp);\n-      pp_expression (pp, DO_COND (t));\n+      pp_cxx_expression (pp, DO_COND (t));\n       pp_cxx_right_paren (pp);\n       pp_cxx_semicolon (pp);\n       pp_needs_newline (pp) = true;\n@@ -1637,12 +1637,12 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_needs_newline (pp) = false;\n       pp_cxx_whitespace (pp);\n       if (FOR_COND (t))\n-\tpp_expression (pp, FOR_COND (t));\n+\tpp_cxx_expression (pp, FOR_COND (t));\n       pp_cxx_semicolon (pp);\n       pp_needs_newline (pp) = false;\n       pp_cxx_whitespace (pp);\n       if (FOR_EXPR (t))\n-\tpp_expression (pp, FOR_EXPR (t));\n+\tpp_cxx_expression (pp, FOR_EXPR (t));\n       pp_cxx_right_paren (pp);\n       pp_newline_and_indent (pp, 3);\n       pp_cxx_statement (pp, FOR_BODY (t));\n@@ -1661,6 +1661,14 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_needs_newline (pp) = true;\n       break;\n \n+      /* expression-statement:\n+            expression(opt) ;  */\n+    case EXPR_STMT:\n+      pp_cxx_expression (pp, EXPR_STMT_EXPR (t));\n+      pp_cxx_semicolon (pp);\n+      pp_needs_newline (pp) = true;\n+      break;\n+\n     case CLEANUP_STMT:\n       pp_cxx_identifier (pp, \"try\");\n       pp_newline_and_indent (pp, 2);"}, {"sha": "6b93045e02f0ff2cafab06dc0d0f0da15ff766bb", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -459,6 +459,11 @@ cp_dump_tree (void* dump_info, tree t)\n       dump_child (\"stmt\", STMT_EXPR_STMT (t));\n       break;\n \n+    case EXPR_STMT:\n+      dump_stmt (di, t);\n+      dump_child (\"expr\", EXPR_STMT_EXPR (t));\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "c5f21d1b195c11ed5e306c5201d843ff60f04f60", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/934790cc6719ae6f0d6a7f408cedba1acab9f93d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=934790cc6719ae6f0d6a7f408cedba1acab9f93d", "patch": "@@ -320,7 +320,6 @@ bool\n cxx_init (void)\n {\n   static const enum tree_code stmt_codes[] = {\n-    c_common_stmt_codes,\n     cp_stmt_codes\n   };\n "}]}