{"sha": "503e4b87f21d69aa28c8c0d9eedd08b66b273dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAzZTRiODdmMjFkNjlhYTI4YzhjMGQ5ZWVkZDA4YjY2YjI3M2RjOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-29T16:59:21Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-29T16:59:21Z"}, "message": "(movxf): Add pattern for soft-float moves.\n\nFrom-SVN: r4275", "tree": {"sha": "97dbb6ef2c3f986192706d27a8b6d88555074168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97dbb6ef2c3f986192706d27a8b6d88555074168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/503e4b87f21d69aa28c8c0d9eedd08b66b273dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/503e4b87f21d69aa28c8c0d9eedd08b66b273dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/503e4b87f21d69aa28c8c0d9eedd08b66b273dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/503e4b87f21d69aa28c8c0d9eedd08b66b273dc9/comments", "author": null, "committer": null, "parents": [{"sha": "2505bc9700f24c9e1478c19822fd82c0f5c6f9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2505bc9700f24c9e1478c19822fd82c0f5c6f9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2505bc9700f24c9e1478c19822fd82c0f5c6f9e9"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "77daee4a74668091028356935437e522e7bcd3c9", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/503e4b87f21d69aa28c8c0d9eedd08b66b273dc9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/503e4b87f21d69aa28c8c0d9eedd08b66b273dc9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=503e4b87f21d69aa28c8c0d9eedd08b66b273dc9", "patch": "@@ -1091,7 +1091,7 @@\n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:XF 1 \"general_operand\" \"\"))]\n-  \"TARGET_68881\"\n+  \"\"\n   \"\n {\n   if (CONSTANT_P (operands[1]))\n@@ -1140,6 +1140,47 @@\n }\n \")\n \n+(define_insn \"\"\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=rm,&rf,&rof<>\")\n+\t(match_operand:XF 1 \"nonimmediate_operand\" \"rf,m,rof<>\"))]\n+  \"! TARGET_68881\"\n+  \"*\n+{\n+  if (FP_REG_P (operands[0]))\n+    {\n+      if (FP_REG_P (operands[1]))\n+\treturn \\\"fmove%.x %1,%0\\\";\n+      if (REG_P (operands[1]))\n+\t{\n+\t  rtx xoperands[2];\n+\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 2);\n+\t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n+\t  xoperands[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\t  output_asm_insn (\\\"move%.l %1,%-\\\", xoperands);\n+\t  output_asm_insn (\\\"move%.l %1,%-\\\", operands);\n+\t  return \\\"fmove%.x %+,%0\\\";\n+\t}\n+      if (GET_CODE (operands[1]) == CONST_DOUBLE)\n+        return \\\"fmove%.x %1,%0\\\";\n+      return \\\"fmove%.x %f1,%0\\\";\n+    }\n+  if (FP_REG_P (operands[1]))\n+    {\n+      if (REG_P (operands[0]))\n+        {\n+          output_asm_insn (\\\"fmove%.x %f1,%-\\;move%.l %+,%0\\\", operands);\n+          operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+          output_asm_insn (\\\"move%.l %+,%0\\\", operands);\n+          operands[0] = gen_rtx (REG, SImode, REGNO (operands[0]) + 1);\n+          return \\\"move%.l %+,%0\\\";\n+        }\n+      else\n+        return \\\"fmove%.x %f1,%0\\\";\n+    }\n+  return output_move_double (operands);\n+}\n+\")\n+\n ;; movdi can apply to fp regs in some cases\n (define_insn \"movdi\"\n   ;; Let's see if it really still needs to handle fp regs, and, if so, why."}]}