{"sha": "e6bf23cce3ed63800f4545cd9a79e3500b24625c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiZjIzY2NlM2VkNjM4MDBmNDU0NWNkOWE3OWUzNTAwYjI0NjI1Yw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2018-09-18T02:42:15Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2018-09-18T02:42:15Z"}, "message": "Handle a library implementation of ffs calling __builtin_ffs.\n\n\t* config/mmix/mmix.c (TARGET_INIT_LIBFUNCS): Override with...\n\t(mmix_init_libfuncs): New function: make __builtin_ffs expand\n\tto __ffsdi2.\n\nFrom-SVN: r264381", "tree": {"sha": "9c85bb7202d16e81503188651bb329d62cd6ff69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c85bb7202d16e81503188651bb329d62cd6ff69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6bf23cce3ed63800f4545cd9a79e3500b24625c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bf23cce3ed63800f4545cd9a79e3500b24625c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6bf23cce3ed63800f4545cd9a79e3500b24625c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6bf23cce3ed63800f4545cd9a79e3500b24625c/comments", "author": null, "committer": null, "parents": [{"sha": "18b0a76251a256f8b26af7ade7d9a0b346958af0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b0a76251a256f8b26af7ade7d9a0b346958af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b0a76251a256f8b26af7ade7d9a0b346958af0"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "ce995fac71f1a28552640f695066315e651a5dae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bf23cce3ed63800f4545cd9a79e3500b24625c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bf23cce3ed63800f4545cd9a79e3500b24625c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6bf23cce3ed63800f4545cd9a79e3500b24625c", "patch": "@@ -1,3 +1,10 @@\n+2018-09-18  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\tHandle a library implementation of ffs calling __builtin_ffs.\n+\t* config/mmix/mmix.c (TARGET_INIT_LIBFUNCS): Override with...\n+\t(mmix_init_libfuncs): New function: make __builtin_ffs expand\n+\tto __ffsdi2.\n+\n 2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-show-locus.c (class layout_range): Add field"}, {"sha": "0225f806fb5da5817b72f969504a6e34edac734d", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6bf23cce3ed63800f4545cd9a79e3500b24625c/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6bf23cce3ed63800f4545cd9a79e3500b24625c/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=e6bf23cce3ed63800f4545cd9a79e3500b24625c", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"memmodel.h\"\n #include \"tm_p.h\"\n #include \"insn-config.h\"\n+#include \"optabs.h\"\n #include \"regs.h\"\n #include \"emit-rtl.h\"\n #include \"recog.h\"\n@@ -140,6 +141,7 @@ static void mmix_setup_incoming_varargs\n   (cumulative_args_t, machine_mode, tree, int *, int);\n static void mmix_file_start (void);\n static void mmix_file_end (void);\n+static void mmix_init_libfuncs (void);\n static bool mmix_rtx_costs (rtx, machine_mode, int, int, int *, bool);\n static int mmix_register_move_cost (machine_mode,\n \t\t\t\t    reg_class_t, reg_class_t);\n@@ -221,6 +223,9 @@ static HOST_WIDE_INT mmix_starting_frame_offset (void);\n #undef TARGET_ASM_OUTPUT_SOURCE_FILENAME\n #define TARGET_ASM_OUTPUT_SOURCE_FILENAME mmix_asm_output_source_filename\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS mmix_init_libfuncs\n+\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE mmix_conditional_register_usage\n \n@@ -1308,6 +1313,20 @@ mmix_asm_output_source_filename (FILE *stream, const char *name)\n   fprintf (stream, \"\\n\");\n }\n \n+/* Unfortunately, by default __builtin_ffs is expanded to ffs for\n+   targets where INT_TYPE_SIZE < BITS_PER_WORD.  That together with\n+   newlib since 2017-07-04 implementing ffs as __builtin_ffs leads to\n+   (newlib) ffs recursively calling itself.  But, because of argument\n+   promotion, and with ffs we're counting from the least bit, the\n+   libgcc equivalent for ffsl works equally well for int arguments, so\n+   just use that.  */\n+\n+static void\n+mmix_init_libfuncs (void)\n+{\n+  set_optab_libfunc (ffs_optab, SImode, \"__ffsdi2\");\n+}\n+\n /* OUTPUT_QUOTED_STRING.  */\n \n void"}]}