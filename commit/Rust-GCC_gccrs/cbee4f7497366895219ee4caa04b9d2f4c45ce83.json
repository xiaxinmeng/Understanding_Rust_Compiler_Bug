{"sha": "cbee4f7497366895219ee4caa04b9d2f4c45ce83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JlZTRmNzQ5NzM2Njg5NTIxOWVlNGNhYTA0YjlkMmY0YzQ1Y2U4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T09:58:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T09:58:37Z"}, "message": "[multiple changes]\n\n2014-02-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Subprogram_Contract, Append_Enabled_Item):\n\tTake into account the Split_PPC flag to ensure that conjuncts\n\tin a composite postcondition aspect are tested in source order.\n\n2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Generic_Subprogram_Body): Flag illegal\n\tuse of SPARK_Mode.\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Flag\n\tillegal use of SPARK_Mode.\n\t(Instantiate_Subprogram_Body): Flag illegal use of SPARK_Mode.\n\t* sem_prag.adb (Analyze_Pragma): Code reformatting.\n\t* sem_util.adb Add with and use clause for Aspects.\n\t(Check_SPARK_Mode_In_Generic): New routine.\n\t* sem_util.ads (Check_SPARK_Mode_In_Generic): New routine.\n\n2014-02-06  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-calend.adb (Formatting_Operations.Split): Ensure that\n\tTime_Error is raised for invalid time values.\n\nFrom-SVN: r207536", "tree": {"sha": "7a23f0eca034c65b3cd8a21c3e824a881db3440c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a23f0eca034c65b3cd8a21c3e824a881db3440c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbee4f7497366895219ee4caa04b9d2f4c45ce83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbee4f7497366895219ee4caa04b9d2f4c45ce83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbee4f7497366895219ee4caa04b9d2f4c45ce83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbee4f7497366895219ee4caa04b9d2f4c45ce83/comments", "author": null, "committer": null, "parents": [{"sha": "e2ef0ff683ddbb3dceb0888e2ba294ddda55da53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ef0ff683ddbb3dceb0888e2ba294ddda55da53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ef0ff683ddbb3dceb0888e2ba294ddda55da53"}], "stats": {"total": 92, "additions": 83, "deletions": 9}, "files": [{"sha": "3a866ca8035dbf8625ab8dcdbefd6a5381a2db13", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cbee4f7497366895219ee4caa04b9d2f4c45ce83", "patch": "@@ -1,3 +1,26 @@\n+2014-02-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Subprogram_Contract, Append_Enabled_Item):\n+\tTake into account the Split_PPC flag to ensure that conjuncts\n+\tin a composite postcondition aspect are tested in source order.\n+\n+2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Generic_Subprogram_Body): Flag illegal\n+\tuse of SPARK_Mode.\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration): Flag\n+\tillegal use of SPARK_Mode.\n+\t(Instantiate_Subprogram_Body): Flag illegal use of SPARK_Mode.\n+\t* sem_prag.adb (Analyze_Pragma): Code reformatting.\n+\t* sem_util.adb Add with and use clause for Aspects.\n+\t(Check_SPARK_Mode_In_Generic): New routine.\n+\t* sem_util.ads (Check_SPARK_Mode_In_Generic): New routine.\n+\n+2014-02-06  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-calend.adb (Formatting_Operations.Split): Ensure that\n+\tTime_Error is raised for invalid time values.\n+\n 2014-02-06  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma): Rewrite as a null statement"}, {"sha": "0043a91e9fe17bff381954f173293dc3b30afe01", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=cbee4f7497366895219ee4caa04b9d2f4c45ce83", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1384,6 +1384,10 @@ package body Ada.Calendar is\n          Hour_Seconds := Day_Seconds mod 3_600;\n          Minute       := Hour_Seconds / 60;\n          Second       := Hour_Seconds mod 60;\n+\n+      exception\n+         when Constraint_Error =>\n+            raise Time_Error;\n       end Split;\n \n       -------------"}, {"sha": "52cc9c8d1ee2ee22aef6ec09b7e3dec22df8e6c0", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=cbee4f7497366895219ee4caa04b9d2f4c45ce83", "patch": "@@ -8887,7 +8887,18 @@ package body Exp_Ch6 is\n                List := New_List;\n             end if;\n \n-            Append (Item, List);\n+            --  If the pragma is a conjunct in a composite postcondition, it\n+            --  has been processed in reverse order. In the postcondition body\n+            --  if must appear before the others.\n+\n+            if Nkind (Item) = N_Pragma\n+              and then From_Aspect_Specification (Item)\n+              and then Split_PPC (Item)\n+            then\n+               Prepend (Item, List);\n+            else\n+               Append (Item, List);\n+            end if;\n          end if;\n       end Append_Enabled_Item;\n "}, {"sha": "e8784e5b784e6d65909a166e889f493e141cb935", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=cbee4f7497366895219ee4caa04b9d2f4c45ce83", "patch": "@@ -3118,6 +3118,8 @@ package body Sem_Ch12 is\n       Set_Parent_Spec (New_N, Save_Parent);\n       Rewrite (N, New_N);\n \n+      Check_SPARK_Mode_In_Generic (N);\n+\n       --  The aspect specifications are not attached to the tree, and must\n       --  be copied and attached to the generic copy explicitly.\n "}, {"sha": "07117d6dd34084f2044badd8ba3d338451e37d7b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=cbee4f7497366895219ee4caa04b9d2f4c45ce83", "patch": "@@ -1193,6 +1193,8 @@ package body Sem_Ch6 is\n             end loop;\n          end;\n \n+         Check_SPARK_Mode_In_Generic (N);\n+\n          Set_SPARK_Pragma (Body_Id, SPARK_Mode_Pragma);\n          Set_SPARK_Pragma_Inherited (Body_Id, True);\n "}, {"sha": "98e674f5433c20125ac6890896fd6329c69ed9e0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cbee4f7497366895219ee4caa04b9d2f4c45ce83", "patch": "@@ -19217,10 +19217,6 @@ package body Sem_Prag is\n             Check_No_Identifiers;\n             Check_At_Most_N_Arguments (1);\n \n-            if Inside_A_Generic then\n-               Error_Pragma (\"incorrect placement of pragma% in a generic\");\n-            end if;\n-\n             --  Check the legality of the mode (no argument = ON)\n \n             if Arg_Count = 1 then\n@@ -19233,9 +19229,15 @@ package body Sem_Prag is\n             Mode_Id := Get_SPARK_Mode_Type (Mode);\n             Context := Parent (N);\n \n+            --  Packages and subprograms declared in a generic unit cannot be\n+            --  subject to the pragma.\n+\n+            if Inside_A_Generic then\n+               Error_Pragma (\"incorrect placement of pragma% in a generic\");\n+\n             --  The pragma appears in a configuration pragmas file\n \n-            if No (Context) then\n+            elsif No (Context) then\n                Check_Valid_Configuration_Pragma;\n \n                if Present (SPARK_Mode_Pragma) then\n@@ -19258,8 +19260,7 @@ package body Sem_Prag is\n                            and then Nkind (Unit (Library_Unit (Context))) in\n                                                         N_Generic_Declaration)\n                then\n-                  Error_Pragma\n-                    (\"incorrect placement of pragma% in a generic unit\");\n+                  Error_Pragma (\"incorrect placement of pragma% in a generic\");\n                end if;\n \n                SPARK_Mode_Pragma := N;"}, {"sha": "a2501cadbffc504cd83069f410676e6a83ee2d50", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cbee4f7497366895219ee4caa04b9d2f4c45ce83", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Casing;   use Casing;\n with Checks;   use Checks;\n@@ -2699,6 +2700,31 @@ package body Sem_Util is\n       end if;\n    end Check_Result_And_Post_State;\n \n+   ---------------------------------\n+   -- Check_SPARK_Mode_In_Generic --\n+   ---------------------------------\n+\n+   procedure Check_SPARK_Mode_In_Generic (N : Node_Id) is\n+      Aspect : Node_Id;\n+\n+   begin\n+      --  Try to find aspect SPARK_Mode and flag it as illegal\n+\n+      if Has_Aspects (N) then\n+         Aspect := First (Aspect_Specifications (N));\n+         while Present (Aspect) loop\n+            if Get_Aspect_Id (Aspect) = Aspect_SPARK_Mode then\n+               Error_Msg_Name_1 := Name_SPARK_Mode;\n+               Error_Msg_N\n+                 (\"incorrect placement of aspect % on a generic\", Aspect);\n+               exit;\n+            end if;\n+\n+            Next (Aspect);\n+         end loop;\n+      end if;\n+   end Check_SPARK_Mode_In_Generic;\n+\n    ------------------------------\n    -- Check_Unprotected_Access --\n    ------------------------------"}, {"sha": "15232b953288dba23af0b12ca7eedc82c4e69c9a", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbee4f7497366895219ee4caa04b9d2f4c45ce83/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=cbee4f7497366895219ee4caa04b9d2f4c45ce83", "patch": "@@ -62,6 +62,7 @@ package Sem_Util is\n    --    Precondition\n    --    Refined_Depends\n    --    Refined_Global\n+   --    Refined_Post\n    --    Refined_States\n    --    Test_Case\n \n@@ -289,6 +290,10 @@ package Sem_Util is\n    --  and post-state. Prag is a [refined] postcondition or a contract-cases\n    --  pragma. Result_Seen is set when the pragma mentions attribute 'Result.\n \n+   procedure Check_SPARK_Mode_In_Generic (N : Node_Id);\n+   --  Given a generic package [body] or a generic subprogram [body], inspect\n+   --  the aspect specifications (if any) and flag SPARK_Mode as illegal.\n+\n    procedure Check_Unprotected_Access\n      (Context : Node_Id;\n       Expr    : Node_Id);"}]}