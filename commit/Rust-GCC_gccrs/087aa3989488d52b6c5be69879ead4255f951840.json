{"sha": "087aa3989488d52b6c5be69879ead4255f951840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3YWEzOTg5NDg4ZDUyYjZjNWJlNjk4NzllYWQ0MjU1Zjk1MTg0MA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-12-22T06:57:17Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-12-22T06:57:17Z"}, "message": "Warning fixes:\n\n        * argv.c (buildargv): Cast the result of alloca in assignment.\n        * choose-temp.c: Include stdlib.h.\n        * cplus-dem.c (demangle_arm_pt): Remove unused prototype.\n        (snarf_numeric_literal): Constify first parameter.\n        (code_for_qualifier): Avoid a gcc extension, make the parameter an\n        int, not a char.\n        (demangle_qualifier): Likewise.\n        (demangle_signature): Cast the argument of a ctype function to\n        unsigned char.\n        (arm_pt): Add parens around assignment used as truth value.\n        (demangle_arm_hp_template): Constify variable `args'.\n        (do_hpacc_template_const_value): Cast the argument of a ctype\n        function to unsigned char.\n        (do_hpacc_template_literal): Remove unused variable `i'.\n        (snarf_numeric_literal): Constify parameter `args'.\n        Cast the argument of a ctype function to unsigned char.\n        * floatformat.c (floatformat_to_double): Add explicit braces to\n        avoid ambiguous `else'.\n        * fnmatch.c (fnmatch): Change type of variables `c', `c1',\n        `cstart' and `cend' to unsigned char.  Cast the argument of macro\n        `FOLD', which uses ctype functions, to unsigned char.\n        * objalloc.c (free): Add prototype.\n\nFrom-SVN: r24392", "tree": {"sha": "3469ef763250330165a80bdbf1c8e2d35e50ea42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3469ef763250330165a80bdbf1c8e2d35e50ea42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/087aa3989488d52b6c5be69879ead4255f951840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/087aa3989488d52b6c5be69879ead4255f951840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/087aa3989488d52b6c5be69879ead4255f951840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/087aa3989488d52b6c5be69879ead4255f951840/comments", "author": null, "committer": null, "parents": [{"sha": "4510c86d24c903d9aafd2cd5fd76d3838c4f6494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4510c86d24c903d9aafd2cd5fd76d3838c4f6494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4510c86d24c903d9aafd2cd5fd76d3838c4f6494"}], "stats": {"total": 91, "additions": 62, "deletions": 29}, "files": [{"sha": "63d9ee82ddf02ce606a4261fff4890bb8db1d0b8", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=087aa3989488d52b6c5be69879ead4255f951840", "patch": "@@ -1,3 +1,33 @@\n+Tue Dec 22 09:43:35 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* argv.c (buildargv): Cast the result of alloca in assignment.\n+\n+\t* choose-temp.c: Include stdlib.h.\n+\t\n+\t* cplus-dem.c (demangle_arm_pt): Remove unused prototype.\n+  \t(snarf_numeric_literal): Constify first parameter.\n+  \t(code_for_qualifier): Avoid a gcc extension, make the parameter an\n+ \tint, not a char.\n+\t(demangle_qualifier): Likewise.\n+\t(demangle_signature): Cast the argument of a ctype function to\n+\tunsigned char.\n+\t(arm_pt): Add parens around assignment used as truth value.\n+\t(demangle_arm_hp_template): Constify variable `args'.\n+\t(do_hpacc_template_const_value): Cast the argument of a ctype\n+\tfunction to unsigned char.\n+\t(do_hpacc_template_literal): Remove unused variable `i'.\n+\t(snarf_numeric_literal): Constify parameter `args'.\n+\tCast the argument of a ctype function to unsigned char.\n+\n+\t* floatformat.c (floatformat_to_double): Add explicit braces to\n+ \tavoid ambiguous `else'.\n+\t\n+\t* fnmatch.c (fnmatch): Change type of variables `c', `c1',\n+ \t`cstart' and `cend' to unsigned char.  Cast the argument of macro\n+ \t`FOLD', which uses ctype functions, to unsigned char.\n+\n+\t* objalloc.c (free): Add prototype.\n+\n Sun Dec 20 16:03:46 1998  Hans-Peter Nilsson  <hp@axis.se>\n \n \t* Makefile.in (CFILES): Fix typo: splay-tree.c, not splay-tree.o"}, {"sha": "85c17e930eef7f6ad9f38324b14a605f6cace923", "filename": "libiberty/argv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=087aa3989488d52b6c5be69879ead4255f951840", "patch": "@@ -225,7 +225,7 @@ char *input;\n \n   if (input != NULL)\n     {\n-      copybuf = alloca (strlen (input) + 1);\n+      copybuf = (char *) alloca (strlen (input) + 1);\n       /* Is a do{}while to always execute the loop once.  Always return an\n \t argv, even for null strings.  See NOTES above, test case below. */\n       do"}, {"sha": "49c738691550b14a1856c8119242b38fcd66bc7a", "filename": "libiberty/choose-temp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Fchoose-temp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Fchoose-temp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fchoose-temp.c?ref=087aa3989488d52b6c5be69879ead4255f951840", "patch": "@@ -31,6 +31,9 @@ Boston, MA 02111-1307, USA.  */\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #ifdef HAVE_SYS_FILE_H\n #include <sys/file.h>   /* May get R_OK, etc. on some systems.  */\n #endif"}, {"sha": "eda561608a7f7aa95e829a3277fd743e75fd4478", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=087aa3989488d52b6c5be69879ead4255f951840", "patch": "@@ -285,9 +285,6 @@ static int\n arm_pt PARAMS ((struct work_stuff *, const char *, int, const char **,\n \t\tconst char **));\n \n-static void\n-demangle_arm_pt PARAMS ((struct work_stuff *, const char **, int, string *));\n-\n static int\n demangle_class_name PARAMS ((struct work_stuff *, const char **, string *));\n \n@@ -402,7 +399,7 @@ static int\n do_hpacc_template_literal PARAMS ((struct work_stuff *, const char **, string *));\n \n static int \n-snarf_numeric_literal PARAMS ((char **, string *));\n+snarf_numeric_literal PARAMS ((const char **, string *));\n \n /* There is a TYPE_QUAL value for each type qualifier.  They can be\n    combined by bitwise-or to form the complete set of qualifiers for a\n@@ -414,13 +411,13 @@ snarf_numeric_literal PARAMS ((char **, string *));\n #define TYPE_QUAL_RESTRICT 0x4\n \n static int \n-code_for_qualifier PARAMS ((char));\n+code_for_qualifier PARAMS ((int));\n \n static const char*\n qualifier_string PARAMS ((int));\n \n static const char*\n-demangle_qualifier PARAMS ((char));\n+demangle_qualifier PARAMS ((int));\n \n /*  Translate count to integer, consuming tokens in the process.\n     Conversion terminates on the first non-digit character.\n@@ -483,7 +480,7 @@ consume_count_with_underscores (mangled)\n \n static int\n code_for_qualifier (c)\n-     char c;\n+  int c;\n {\n   switch (c) \n     {\n@@ -551,7 +548,7 @@ qualifier_string (type_quals)\n \n static const char*\n demangle_qualifier (c)\n-     char c;\n+  int c;\n {\n   return qualifier_string (code_for_qualifier (c));\n }\n@@ -1130,7 +1127,7 @@ demangle_signature (work, mangled, declp)\n             if (HP_DEMANGLING)\n               {\n                 (*mangled)++;\n-                while (**mangled && isdigit (**mangled))\n+                while (**mangled && isdigit ((unsigned char)**mangled))\n                   (*mangled)++;\n               }\n             else\n@@ -1768,7 +1765,7 @@ arm_pt (work, mangled, n, anchor, args)\n               return 1;\n             }\n         }\n-      else if (*anchor = mystrstr (mangled, \"__S\"))\n+      else if ((*anchor = mystrstr (mangled, \"__S\")))\n         {\n  \t  int len;\n  \t  *args = *anchor + 3;\n@@ -1792,7 +1789,7 @@ demangle_arm_hp_template (work, mangled, n, declp)\n      string *declp;\n {\n   const char *p;\n-  char *args;\n+  const char *args;\n   const char *e = *mangled + n;\n   string arg;\n \n@@ -3356,12 +3353,12 @@ do_hpacc_template_const_value (work, mangled, result)\n     }\n \n   /* We have to be looking at an integer now */\n-  if (!(isdigit (**mangled)))\n+  if (!(isdigit ((unsigned char)**mangled)))\n     return 0;\n \n   /* We only deal with integral values for template\n      parameters -- so it's OK to look only for digits */\n-  while (isdigit (**mangled))\n+  while (isdigit ((unsigned char)**mangled))\n     {\n       char_str[0] = **mangled;\n       string_append (result, char_str);\n@@ -3387,7 +3384,6 @@ do_hpacc_template_literal (work, mangled, result)\n      string *result;\n {\n   int literal_len = 0;\n-  int i;\n   char * recurse;\n   char * recurse_dem;\n   \n@@ -3429,7 +3425,7 @@ do_hpacc_template_literal (work, mangled, result)\n \n static int\n snarf_numeric_literal (args, arg)\n-     char ** args;\n+     const char ** args;\n      string * arg;\n {\n   if (**args == '-')\n@@ -3441,10 +3437,10 @@ snarf_numeric_literal (args, arg)\n   else if (**args == '+')\n     (*args)++;\n   \n-  if (!isdigit (**args))\n+  if (!isdigit ((unsigned char)**args))\n     return 0;\n \n-  while (isdigit (**args))\n+  while (isdigit ((unsigned char)**args))\n     {\n       char_str[0] = **args;\n       string_append (arg, char_str);"}, {"sha": "c4f21e4ce892430239111c854a74af700026fc78", "filename": "libiberty/floatformat.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Ffloatformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Ffloatformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffloatformat.c?ref=087aa3989488d52b6c5be69879ead4255f951840", "patch": "@@ -192,10 +192,12 @@ floatformat_to_double (fmt, from, to)\n      increment the exponent by one to account for the integer bit.  */\n \n   if (!special_exponent)\n-    if (fmt->intbit == floatformat_intbit_no)\n-      dto = ldexp (1.0, exponent);\n-    else\n-      exponent++;\n+    {\n+      if (fmt->intbit == floatformat_intbit_no)\n+\tdto = ldexp (1.0, exponent);\n+      else\n+\texponent++;\n+    }\n \n   while (mant_bits_left > 0)\n     {"}, {"sha": "453caced72febae564324622b5d535d0737c71ea", "filename": "libiberty/fnmatch.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Ffnmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Ffnmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffnmatch.c?ref=087aa3989488d52b6c5be69879ead4255f951840", "patch": "@@ -71,7 +71,7 @@ fnmatch (pattern, string, flags)\n      int flags;\n {\n   register const char *p = pattern, *n = string;\n-  register char c;\n+  register unsigned char c;\n \n /* Note that this evalutes C many times.  */\n #define FOLD(c)\t((flags & FNM_CASEFOLD) && isupper (c) ? tolower (c) : (c))\n@@ -98,7 +98,7 @@ fnmatch (pattern, string, flags)\n \t      c = *p++;\n \t      c = FOLD (c);\n \t    }\n-\t  if (FOLD (*n) != c)\n+\t  if (FOLD ((unsigned char)*n) != c)\n \t    return FNM_NOMATCH;\n \t  break;\n \n@@ -116,10 +116,10 @@ fnmatch (pattern, string, flags)\n \t    return 0;\n \n \t  {\n-\t    char c1 = (!(flags & FNM_NOESCAPE) && c == '\\\\') ? *p : c;\n+\t    unsigned char c1 = (!(flags & FNM_NOESCAPE) && c == '\\\\') ? *p : c;\n \t    c1 = FOLD (c1);\n \t    for (--p; *n != '\\0'; ++n)\n-\t      if ((c == '[' || FOLD (*n) == c1) &&\n+\t      if ((c == '[' || FOLD ((unsigned char)*n) == c1) &&\n \t\t  fnmatch (p, n, flags & ~FNM_PERIOD) == 0)\n \t\treturn 0;\n \t    return FNM_NOMATCH;\n@@ -144,7 +144,7 @@ fnmatch (pattern, string, flags)\n \t    c = *p++;\n \t    for (;;)\n \t      {\n-\t\tregister char cstart = c, cend = c;\n+\t\tregister unsigned char cstart = c, cend = c;\n \n \t\tif (!(flags & FNM_NOESCAPE) && c == '\\\\')\n \t\t  cstart = cend = *p++;\n@@ -174,7 +174,8 @@ fnmatch (pattern, string, flags)\n \t\t    c = *p++;\n \t\t  }\n \n-\t\tif (FOLD (*n) >= cstart && FOLD (*n) <= cend)\n+\t\tif (FOLD ((unsigned char)*n) >= cstart\n+\t\t    && FOLD ((unsigned char)*n) <= cend)\n \t\t  goto matched;\n \n \t\tif (c == ']')\n@@ -203,7 +204,7 @@ fnmatch (pattern, string, flags)\n \t  break;\n \n \tdefault:\n-\t  if (c != FOLD (*n))\n+\t  if (c != FOLD ((unsigned char)*n))\n \t    return FNM_NOMATCH;\n \t}\n "}, {"sha": "3474b6a50f511ce3730f0a5381b4a64afb242ab6", "filename": "libiberty/objalloc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Fobjalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/087aa3989488d52b6c5be69879ead4255f951840/libiberty%2Fobjalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fobjalloc.c?ref=087aa3989488d52b6c5be69879ead4255f951840", "patch": "@@ -34,6 +34,7 @@ Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* For systems with larger pointers than ints, this must be declared.  */\n extern PTR malloc PARAMS ((size_t));\n+extern void free PARAMS ((PTR));\n #endif\n \n /* These routines allocate space for an object.  Freeing allocated"}]}