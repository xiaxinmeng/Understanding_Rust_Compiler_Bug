{"sha": "59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhYjkyZDI5MThhN2U3ZWU5MTRiZjg2Y2ZmNWJjYmFiYjY4ZDliOQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-06-23T19:14:11Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-06-23T19:14:11Z"}, "message": "config.gcc (avr-*-rtems*, avr-*-*): Set extra_gcc_objs and extra_objs.\n\n\t* config.gcc (avr-*-rtems*, avr-*-*): Set extra_gcc_objs and\n\textra_objs.\n\t* config/avr/avr.c (avr_current_device): New variable.\n\t(avr_arch_types, avr_mcu_types): Move to avr-deveces.c.\n\t(avr_arch, mcu_type_s): Move to avr.h.\n\t* config/avr/avr.h (base_arch_s). Add reserved2, arch_name and\n\tdefault_data_section_start fields.\n\t(avr_arch): Moved from avr.c.\n\t(mcu_type_s): Moved from avr.c. Add short_sp, data_section_start and\n\tlibrary_name fields.\n\t(avr_current_device, avr_mcu_types, avr_arch_types,\n\tavr_device_to_arch, avr_device_to_data_start,\n\tavr_device_to_startfiles, avr_device_to_devicelib): Declare.\n\t(EXTRA_SPEC_FUNCTIONS): Define.\n\t(LINK_SPEC): Remove device name to '-m ...' and '-Tdata ...' linker\n\toptions mapping. Use device_to_arch and device_to_data_start insted.\n\t(STARTFILE_SPEC): Use device_to_startfile instead of crt_binutils.\n\t(CRT_BINUTILS_SPECS, EXTRA_SPECS): Remove.\n\t* config/avr/t-avr (driver-avr.o, avr-devices.o): New rules.\n\t* config/avr/driver-avr.c: New file.\n\t* config/avr/avr-devices.c: New file.\n\nFrom-SVN: r148868", "tree": {"sha": "32802b739934030c58f3589d23ed35b2f3eaede3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32802b739934030c58f3589d23ed35b2f3eaede3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/comments", "author": null, "committer": null, "parents": [{"sha": "33436e29779504361151f07a6a75970d03b5fe4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33436e29779504361151f07a6a75970d03b5fe4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33436e29779504361151f07a6a75970d03b5fe4c"}], "stats": {"total": 847, "additions": 418, "deletions": 429}, "files": [{"sha": "4c20942c251f8db7d4c8e9b8506762330ba947a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "patch": "@@ -1,3 +1,27 @@\n+2009-06-23  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config.gcc (avr-*-rtems*, avr-*-*): Set extra_gcc_objs and\n+\textra_objs.\n+\t* config/avr/avr.c (avr_current_device): New variable.\n+\t(avr_arch_types, avr_mcu_types): Move to avr-deveces.c.\n+\t(avr_arch, mcu_type_s): Move to avr.h.\n+\t* config/avr/avr.h (base_arch_s). Add reserved2, arch_name and\n+\tdefault_data_section_start fields.\n+\t(avr_arch): Moved from avr.c.\n+\t(mcu_type_s): Moved from avr.c. Add short_sp, data_section_start and\n+\tlibrary_name fields.\n+\t(avr_current_device, avr_mcu_types, avr_arch_types,\n+\tavr_device_to_arch, avr_device_to_data_start,\n+\tavr_device_to_startfiles, avr_device_to_devicelib): Declare.\n+\t(EXTRA_SPEC_FUNCTIONS): Define.\n+\t(LINK_SPEC): Remove device name to '-m ...' and '-Tdata ...' linker\n+\toptions mapping. Use device_to_arch and device_to_data_start insted.\n+\t(STARTFILE_SPEC): Use device_to_startfile instead of crt_binutils.\n+\t(CRT_BINUTILS_SPECS, EXTRA_SPECS): Remove.\n+\t* config/avr/t-avr (driver-avr.o, avr-devices.o): New rules.\n+\t* config/avr/driver-avr.c: New file.\n+\t* config/avr/avr-devices.c: New file.\n+\n 2009-06-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* var-tracking.c (unshare_variable): Force initialized to"}, {"sha": "19afd1cfde0bf669e039ff93c02d39090462cad5", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "patch": "@@ -802,10 +802,14 @@ arm-*-pe*)\n avr-*-rtems*)\n \ttm_file=\"avr/avr.h dbxelf.h avr/rtems.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"avr/t-avr t-rtems avr/t-rtems\"\n+\textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n+\textra_objs=\"avr-devices.o\"\n \t;;\n avr-*-*)\n \ttm_file=\"avr/avr.h dbxelf.h newlib-stdint.h\"\n \tuse_gcc_stdint=wrap\n+\textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n+\textra_objs=\"avr-devices.o\"\n \t;;\n bfin*-elf*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h newlib-stdint.h bfin/elf.h\""}, {"sha": "f422b4e78769fa37fb14262c5fabd595ecb57a62", "filename": "gcc/config/avr/avr-devices.c", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Favr-devices.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Favr-devices.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-devices.c?ref=59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "patch": "@@ -0,0 +1,199 @@\n+/* Copyright (C) 2009\n+   Free Software Foundation, Inc.\n+   Contributed by Anatoly Sokolov (aesok@post.ru)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+   \n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+\n+/* List of all known AVR MCU architectyres.  */\n+\n+const struct base_arch_s avr_arch_types[] = {\n+  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, NULL,               \"avr2\" },  /* unknown device specified */\n+  { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, \"__AVR_ARCH__=1\",   \"avr1\" },\n+  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x0060, \"__AVR_ARCH__=2\",   \"avr2\" },\n+  { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0x0060, \"__AVR_ARCH__=25\",  \"avr25\" },\n+  { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0x0060, \"__AVR_ARCH__=3\",   \"avr3\" },\n+  { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0x0060, \"__AVR_ARCH__=31\",  \"avr31\" },\n+  { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0x0060, \"__AVR_ARCH__=35\",  \"avr35\" },\n+  { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0x0060, \"__AVR_ARCH__=4\",   \"avr4\" },\n+  { 0, 1, 1, 1, 0, 0, 0, 0, 0, 0x0060, \"__AVR_ARCH__=5\",   \"avr5\" },\n+  { 0, 1, 1, 1, 1, 1, 0, 0, 0, 0x0060, \"__AVR_ARCH__=51\",  \"avr51\" },\n+  { 0, 1, 1, 1, 1, 1, 1, 0, 0, 0x0060, \"__AVR_ARCH__=6\",   \"avr6\" }\n+};\n+\n+/* List of all known AVR MCU types - if updated, it has to be kept\n+   in sync in several places (FIXME: is there a better way?):\n+    - here;\n+    - t-avr (MULTILIB_MATCHES);\n+    - gas/config/tc-avr.c;\n+    - avr-libc.  */\n+\n+const struct mcu_type_s avr_mcu_types[] = {\n+    /* Classic, <= 8K.  */\n+  { \"avr2\",                 ARCH_AVR2, NULL,                        0, 0x0060, \"s8515\" },\n+  { \"at90s2313\",            ARCH_AVR2, \"__AVR_AT90S2313__\",         1, 0x0060, \"s2313\" },\n+  { \"at90s2323\",            ARCH_AVR2, \"__AVR_AT90S2323__\",         1, 0x0060, \"s2323\" },\n+  { \"at90s2333\",            ARCH_AVR2, \"__AVR_AT90S2333__\",         1, 0x0060, \"s2333\" },\n+  { \"at90s2343\",            ARCH_AVR2, \"__AVR_AT90S2343__\",         1, 0x0060, \"s2343\" },\n+  { \"attiny22\",             ARCH_AVR2, \"__AVR_ATtiny22__\",          1, 0x0060, \"tn22\" },\n+  { \"attiny26\",             ARCH_AVR2, \"__AVR_ATtiny26__\",          1, 0x0060, \"tn26\" },\n+  { \"at90s4414\",            ARCH_AVR2, \"__AVR_AT90S4414__\",         0, 0x0060, \"s4414\" },\n+  { \"at90s4433\",            ARCH_AVR2, \"__AVR_AT90S4433__\",         1, 0x0060, \"s4433\" },\n+  { \"at90s4434\",            ARCH_AVR2, \"__AVR_AT90S4434__\",         0, 0x0060, \"s4434\" },\n+  { \"at90s8515\",            ARCH_AVR2, \"__AVR_AT90S8515__\",         0, 0x0060, \"s8515\" },\n+  { \"at90c8534\",            ARCH_AVR2, \"__AVR_AT90C8534__\",         0, 0x0060, \"c8534\" },\n+  { \"at90s8535\",            ARCH_AVR2, \"__AVR_AT90S8535__\",         0, 0x0060, \"s8535\" },\n+    /* Classic + MOVW, <= 8K.  */\n+  { \"avr25\",                ARCH_AVR25, NULL,                       0, 0x0060, \"tn85\" },\n+  { \"ata6289\",              ARCH_AVR25, \"__AVR_ATA6289__\",          0, 0x0100, \"a6289\" },\n+  { \"attiny13\",             ARCH_AVR25, \"__AVR_ATtiny13__\",         1, 0x0060, \"tn13\" },\n+  { \"attiny13a\",            ARCH_AVR25, \"__AVR_ATtiny13A__\",        1, 0x0060, \"tn13a\" },\n+  { \"attiny2313\",           ARCH_AVR25, \"__AVR_ATtiny2313__\",       1, 0x0060, \"tn2313\" },\n+  { \"attiny24\",             ARCH_AVR25, \"__AVR_ATtiny24__\",         1, 0x0060, \"tn24\" },\n+  { \"attiny44\",             ARCH_AVR25, \"__AVR_ATtiny44__\",         0, 0x0060, \"tn44\" },\n+  { \"attiny84\",             ARCH_AVR25, \"__AVR_ATtiny84__\",         0, 0x0060, \"tn84\" },\n+  { \"attiny25\",             ARCH_AVR25, \"__AVR_ATtiny25__\",         1, 0x0060, \"tn25\" },\n+  { \"attiny45\",             ARCH_AVR25, \"__AVR_ATtiny45__\",         0, 0x0060, \"tn45\" },\n+  { \"attiny85\",             ARCH_AVR25, \"__AVR_ATtiny85__\",         0, 0x0060, \"tn85\" },\n+  { \"attiny261\",            ARCH_AVR25, \"__AVR_ATtiny261__\",        1, 0x0060, \"tn261\" },\n+  { \"attiny461\",            ARCH_AVR25, \"__AVR_ATtiny461__\",        0, 0x0060, \"tn461\" },\n+  { \"attiny861\",            ARCH_AVR25, \"__AVR_ATtiny861__\",        0, 0x0060, \"tn861\" },\n+  { \"attiny43u\",            ARCH_AVR25, \"__AVR_ATtiny43U__\",        0, 0x0060, \"tn43u\" },\n+  { \"attiny87\",             ARCH_AVR25, \"__AVR_ATtiny87__\",         0, 0x0100, \"tn87\" },\n+  { \"attiny48\",             ARCH_AVR25, \"__AVR_ATtiny48__\",         0, 0x0100, \"tn48\" },\n+  { \"attiny88\",             ARCH_AVR25, \"__AVR_ATtiny88__\",         0, 0x0100, \"tn88\" },\n+  { \"at86rf401\",            ARCH_AVR25, \"__AVR_AT86RF401__\",        1, 0x0060, \"86401\" },\n+    /* Classic, > 8K, <= 64K.  */\n+  { \"avr3\",                 ARCH_AVR3, NULL,                        0, 0x0060, \"43355\" },\n+  { \"at43usb355\",           ARCH_AVR3, \"__AVR_AT43USB355__\",        0, 0x0060, \"43355\" },\n+  { \"at76c711\",             ARCH_AVR3, \"__AVR_AT76C711__\",          0, 0x0060, \"76711\" },\n+    /* Classic, == 128K.  */\n+  { \"avr31\",                ARCH_AVR31, NULL,                       0, 0x0060, \"m103\" },\n+  { \"atmega103\",            ARCH_AVR31, \"__AVR_ATmega103__\",        0, 0x0060, \"m103\" },\n+  { \"at43usb320\",           ARCH_AVR31, \"__AVR_AT43USB320__\",       0, 0x0060, \"43320\" },\n+    /* Classic + MOVW + JMP/CALL.  */\n+  { \"avr35\",                ARCH_AVR35, NULL,                       0, 0x0100, \"usb162\" },\n+  { \"at90usb82\",            ARCH_AVR35, \"__AVR_AT90USB82__\",        0, 0x0100, \"usb82\" },\n+  { \"at90usb162\",           ARCH_AVR35, \"__AVR_AT90USB162__\",       0, 0x0100, \"usb162\" },\n+  { \"attiny167\",            ARCH_AVR35, \"__AVR_ATtiny167__\",        0, 0x0100, \"tn167\" },\n+  { \"attiny327\",            ARCH_AVR35, \"__AVR_ATtiny327__\",        0, 0x0100, \"tn327\" },\n+    /* Enhanced, <= 8K.  */\n+  { \"avr4\",                 ARCH_AVR4, NULL,                        0, 0x0060, \"m8\" },\n+  { \"atmega8\",              ARCH_AVR4, \"__AVR_ATmega8__\",           0, 0x0060, \"m8\" },\n+  { \"atmega48\",             ARCH_AVR4, \"__AVR_ATmega48__\",          0, 0x0100, \"m48\" },\n+  { \"atmega48p\",            ARCH_AVR4, \"__AVR_ATmega48P__\",         0, 0x0100, \"m48p\" },\n+  { \"atmega88\",             ARCH_AVR4, \"__AVR_ATmega88__\",          0, 0x0100, \"m88\" },\n+  { \"atmega88p\",            ARCH_AVR4, \"__AVR_ATmega88P__\",         0, 0x0100, \"m88p\" },\n+  { \"atmega8515\",           ARCH_AVR4, \"__AVR_ATmega8515__\",        0, 0x0060, \"m8515\" },\n+  { \"atmega8535\",           ARCH_AVR4, \"__AVR_ATmega8535__\",        0, 0x0060, \"m8535\" },\n+  { \"atmega8c1\",            ARCH_AVR4, \"__AVR_ATmega8C1__\",         0, 0x0100, \"m8c1\" },\n+  { \"atmega8m1\",            ARCH_AVR4, \"__AVR_ATmega8M1__\",         0, 0x0100, \"m8m1\" },\n+  { \"atmega8hva\",           ARCH_AVR4, \"__AVR_ATmega8HVA__\",        0, 0x0100, \"m8hva\" },\n+  { \"atmega4hvd\",           ARCH_AVR4, \"__AVR_ATmega4HVD__\",        0, 0x0100, \"m4hvd\" },\n+  { \"atmega8hvd\",           ARCH_AVR4, \"__AVR_ATmega8HVD__\",        0, 0x0100, \"m8hvd\" },\n+  { \"at90pwm1\",             ARCH_AVR4, \"__AVR_AT90PWM1__\",          0, 0x0100, \"90pwm1\" },\n+  { \"at90pwm2\",             ARCH_AVR4, \"__AVR_AT90PWM2__\",          0, 0x0100, \"90pwm2\" },\n+  { \"at90pwm2b\",            ARCH_AVR4, \"__AVR_AT90PWM2B__\",         0, 0x0100, \"90pwm2b\" },\n+  { \"at90pwm3\",             ARCH_AVR4, \"__AVR_AT90PWM3__\",          0, 0x0100, \"90pwm3\" },\n+  { \"at90pwm3b\",            ARCH_AVR4, \"__AVR_AT90PWM3B__\",         0, 0x0100, \"90pwm3b\" },\n+  { \"at90pwm81\",            ARCH_AVR4, \"__AVR_AT90PWM81__\",         0, 0x0100, \"90pwm81\" },\n+    /* Enhanced, > 8K, <= 64K.  */\n+  { \"avr5\",                 ARCH_AVR5, NULL,                        0, 0x0060, \"m16\" },\n+  { \"atmega16\",             ARCH_AVR5, \"__AVR_ATmega16__\",          0, 0x0060, \"m16\" },\n+  { \"atmega161\",            ARCH_AVR5, \"__AVR_ATmega161__\",         0, 0x0060, \"m161\" },\n+  { \"atmega162\",            ARCH_AVR5, \"__AVR_ATmega162__\",         0, 0x0100, \"m162\" },\n+  { \"atmega163\",            ARCH_AVR5, \"__AVR_ATmega163__\",         0, 0x0060, \"m163\" },\n+  { \"atmega164p\",           ARCH_AVR5, \"__AVR_ATmega164P__\",        0, 0x0100, \"m164p\" },\n+  { \"atmega165\",            ARCH_AVR5, \"__AVR_ATmega165__\",         0, 0x0100, \"m165\" },\n+  { \"atmega165p\",           ARCH_AVR5, \"__AVR_ATmega165P__\",        0, 0x0100, \"m165p\" },\n+  { \"atmega168\",            ARCH_AVR5, \"__AVR_ATmega168__\",         0, 0x0100, \"m168\" },\n+  { \"atmega168p\",           ARCH_AVR5, \"__AVR_ATmega168P__\",        0, 0x0100, \"m168p\" },\n+  { \"atmega169\",            ARCH_AVR5, \"__AVR_ATmega169__\",         0, 0x0100, \"m169\" },\n+  { \"atmega169p\",           ARCH_AVR5, \"__AVR_ATmega169P__\",        0, 0x0100, \"m169p\" },\n+  { \"atmega32\",             ARCH_AVR5, \"__AVR_ATmega32__\",          0, 0x0060, \"m32\" },\n+  { \"atmega323\",            ARCH_AVR5, \"__AVR_ATmega323__\",         0, 0x0060, \"m323\" },\n+  { \"atmega324p\",           ARCH_AVR5, \"__AVR_ATmega324P__\",        0, 0x0100, \"m324p\" },\n+  { \"atmega325\",            ARCH_AVR5, \"__AVR_ATmega325__\",         0, 0x0100, \"m325\" },\n+  { \"atmega325p\",           ARCH_AVR5, \"__AVR_ATmega325P__\",        0, 0x0100, \"m325p\" },\n+  { \"atmega3250\",           ARCH_AVR5, \"__AVR_ATmega3250__\",        0, 0x0100, \"m3250\" },\n+  { \"atmega3250p\",          ARCH_AVR5, \"__AVR_ATmega3250P__\",       0, 0x0100, \"m3250p\" },\n+  { \"atmega328p\",           ARCH_AVR5, \"__AVR_ATmega328P__\",        0, 0x0100, \"m328p\" },\n+  { \"atmega329\",            ARCH_AVR5, \"__AVR_ATmega329__\",         0, 0x0100, \"m329\" },\n+  { \"atmega329p\",           ARCH_AVR5, \"__AVR_ATmega329P__\",        0, 0x0100, \"m329p\" },\n+  { \"atmega3290\",           ARCH_AVR5, \"__AVR_ATmega3290__\",        0, 0x0100, \"m3290\" },\n+  { \"atmega3290p\",          ARCH_AVR5, \"__AVR_ATmega3290P__\",       0, 0x0100, \"m3290p\" },\n+  { \"atmega406\",            ARCH_AVR5, \"__AVR_ATmega406__\",         0, 0x0100, \"m406\" },\n+  { \"atmega64\",             ARCH_AVR5, \"__AVR_ATmega64__\",          0, 0x0100, \"m64\" },\n+  { \"atmega640\",            ARCH_AVR5, \"__AVR_ATmega640__\",         0, 0x0200, \"m640\" },\n+  { \"atmega644\",            ARCH_AVR5, \"__AVR_ATmega644__\",         0, 0x0100, \"m644\" },\n+  { \"atmega644p\",           ARCH_AVR5, \"__AVR_ATmega644P__\",        0, 0x0100, \"m644p\" },\n+  { \"atmega645\",            ARCH_AVR5, \"__AVR_ATmega645__\",         0, 0x0100, \"m645\" },\n+  { \"atmega6450\",           ARCH_AVR5, \"__AVR_ATmega6450__\",        0, 0x0100, \"m6450\" },\n+  { \"atmega649\",            ARCH_AVR5, \"__AVR_ATmega649__\",         0, 0x0100, \"m649\" },\n+  { \"atmega6490\",           ARCH_AVR5, \"__AVR_ATmega6490__\",        0, 0x0100, \"m6490\" },\n+  { \"atmega16hva\",          ARCH_AVR5, \"__AVR_ATmega16HVA__\",       0, 0x0100, \"m16hva\" },\n+  { \"atmega16hvb\",          ARCH_AVR5, \"__AVR_ATmega16HVB__\",       0, 0x0100, \"m16hvb\" },\n+  { \"atmega32hvb\",          ARCH_AVR5, \"__AVR_ATmega32HVB__\",       0, 0x0100, \"m23hvb\" },\n+  { \"at90can32\",            ARCH_AVR5, \"__AVR_AT90CAN32__\",         0, 0x0100, \"can32\" },\n+  { \"at90can64\",            ARCH_AVR5, \"__AVR_AT90CAN64__\",         0, 0x0100, \"can64\" },\n+  { \"at90pwm216\",           ARCH_AVR5, \"__AVR_AT90PWM216__\",        0, 0x0100, \"90pwm216\" },\n+  { \"at90pwm316\",           ARCH_AVR5, \"__AVR_AT90PWM316__\",        0, 0x0100, \"90pwm316\" },\n+  { \"atmega16c1\",           ARCH_AVR5, \"__AVR_ATmega16C1__\",        0, 0x0100, \"m16c1\" },\n+  { \"atmega32c1\",           ARCH_AVR5, \"__AVR_ATmega32C1__\",        0, 0x0100, \"m32c1\" },\n+  { \"atmega64c1\",           ARCH_AVR5, \"__AVR_ATmega64C1__\",        0, 0x0100, \"m64c1\" },\n+  { \"atmega16m1\",           ARCH_AVR5, \"__AVR_ATmega16M1__\",        0, 0x0100, \"m16m1\" },\n+  { \"atmega32m1\",           ARCH_AVR5, \"__AVR_ATmega32M1__\",        0, 0x0100, \"m32m1\" },\n+  { \"atmega64m1\",           ARCH_AVR5, \"__AVR_ATmega64M1__\",        0, 0x0100, \"m64m1\" },\n+  { \"atmega16u4\",           ARCH_AVR5, \"__AVR_ATmega16U4__\",        0, 0x0100, \"m16u4\" },\n+  { \"atmega32u4\",           ARCH_AVR5, \"__AVR_ATmega32U4__\",        0, 0x0100, \"m32u4\" },\n+  { \"atmega32u6\",           ARCH_AVR5, \"__AVR_ATmega32U6__\",        0, 0x0100, \"m32u6\" },\n+  { \"at90scr100\",           ARCH_AVR5, \"__AVR_AT90SCR100__\",        0, 0x0100, \"90scr100\" },\n+  { \"at90usb646\",           ARCH_AVR5, \"__AVR_AT90USB646__\",        0, 0x0100, \"usb646\" },\n+  { \"at90usb647\",           ARCH_AVR5, \"__AVR_AT90USB647__\",        0, 0x0100, \"usb647\" },\n+  { \"at94k\",                ARCH_AVR5, \"__AVR_AT94K__\",             0, 0x0060, \"at94k\" },\n+    /* Enhanced, == 128K.  */\n+  { \"avr51\",                ARCH_AVR51, NULL,                       0, 0x0100, \"m128\" },\n+  { \"atmega128\",            ARCH_AVR51, \"__AVR_ATmega128__\",        0, 0x0100, \"m128\" },\n+  { \"atmega1280\",           ARCH_AVR51, \"__AVR_ATmega1280__\",       0, 0x0200, \"m1280\" },\n+  { \"atmega1281\",           ARCH_AVR51, \"__AVR_ATmega1281__\",       0, 0x0200, \"m1281\" },\n+  { \"atmega1284p\",          ARCH_AVR51, \"__AVR_ATmega1284P__\",      0, 0x0100, \"m1284p\" },\n+  { \"atmega128rfa1\",        ARCH_AVR51, \"__AVR_ATmega128RFA1__\",    0, 0x0200, \"m128rfa1\" },\n+  { \"at90can128\",           ARCH_AVR51, \"__AVR_AT90CAN128__\",       0, 0x0100, \"can128\" },\n+  { \"at90usb1286\",          ARCH_AVR51, \"__AVR_AT90USB1286__\",      0, 0x0100, \"usb1286\" },\n+  { \"at90usb1287\",          ARCH_AVR51, \"__AVR_AT90USB1287__\",      0, 0x0100, \"usb1286\" },\n+  { \"m3000f\",               ARCH_AVR51, \"__AVR_M3000F__\",           0, 0x1000, \"m3000f\" },\n+  { \"m3000s\",               ARCH_AVR51, \"__AVR_M3000S__\",           0, 0x1000, \"m3000f\" },\n+  { \"m3001b\",               ARCH_AVR51, \"__AVR_M3001B__\",           0, 0x1000, \"m3000f\" },\n+    /* 3-Byte PC.  */\n+  { \"avr6\",                 ARCH_AVR6, NULL,                        0, 0x0200, \"m2561\" },\n+  { \"atmega2560\",           ARCH_AVR6, \"__AVR_ATmega2560__\",        0, 0x0200, \"m2561\" },\n+  { \"atmega2561\",           ARCH_AVR6, \"__AVR_ATmega2561__\",        0, 0x0200, \"m2561\" },\n+    /* Assembler only.  */\n+  { \"avr1\",                 ARCH_AVR1, NULL,                        0, 0x0060, \"s1200\" },\n+  { \"at90s1200\",            ARCH_AVR1, \"__AVR_AT90S1200__\",         0, 0x0060, \"s1200\" },\n+  { \"attiny11\",             ARCH_AVR1, \"__AVR_ATtiny11__\",          0, 0x0060, \"tn11\" },\n+  { \"attiny12\",             ARCH_AVR1, \"__AVR_ATtiny12__\",          0, 0x0060, \"tn12\" },\n+  { \"attiny15\",             ARCH_AVR1, \"__AVR_ATtiny15__\",          0, 0x0060, \"tn15\" },\n+  { \"attiny28\",             ARCH_AVR1, \"__AVR_ATtiny28__\",          0, 0x0060, \"tn28\" },\n+    /* End of list.  */\n+  { NULL,                   ARCH_UNKNOWN, NULL,                     0,      0, NULL }\n+};\n+"}, {"sha": "cd51f884c62ea1433110838de147d7f407d343c2", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 197, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "patch": "@@ -112,204 +112,10 @@ const char *avr_extra_arch_macro;\n /* Current architecture.  */\n const struct base_arch_s *avr_current_arch;\n \n-section *progmem_section;\n-\n-static const struct base_arch_s avr_arch_types[] = {\n-  { 1, 0, 0, 0, 0, 0, 0, 0, NULL },  /* unknown device specified */\n-  { 1, 0, 0, 0, 0, 0, 0, 0, \"__AVR_ARCH__=1\"   },\n-  { 0, 0, 0, 0, 0, 0, 0, 0, \"__AVR_ARCH__=2\"   },\n-  { 0, 0, 0, 1, 0, 0, 0, 0, \"__AVR_ARCH__=25\"  },\n-  { 0, 0, 1, 0, 0, 0, 0, 0, \"__AVR_ARCH__=3\"   },\n-  { 0, 0, 1, 0, 1, 0, 0, 0, \"__AVR_ARCH__=31\"  },\n-  { 0, 0, 1, 1, 0, 0, 0, 0, \"__AVR_ARCH__=35\"  },\n-  { 0, 1, 0, 1, 0, 0, 0, 0, \"__AVR_ARCH__=4\"   },\n-  { 0, 1, 1, 1, 0, 0, 0, 0, \"__AVR_ARCH__=5\"   },\n-  { 0, 1, 1, 1, 1, 1, 0, 0, \"__AVR_ARCH__=51\"  },\n-  { 0, 1, 1, 1, 1, 1, 1, 0, \"__AVR_ARCH__=6\"   }\n-};\n+/* Current device.  */\n+const struct mcu_type_s *avr_current_device;\n \n-/* These names are used as the index into the avr_arch_types[] table \n-   above.  */\n-\n-enum avr_arch\n-{\n-  ARCH_UNKNOWN,\n-  ARCH_AVR1,\n-  ARCH_AVR2,\n-  ARCH_AVR25,\n-  ARCH_AVR3,\n-  ARCH_AVR31,\n-  ARCH_AVR35,\n-  ARCH_AVR4,\n-  ARCH_AVR5,\n-  ARCH_AVR51,\n-  ARCH_AVR6\n-};\n-\n-struct mcu_type_s {\n-  const char *const name;\n-  int arch;  /* index in avr_arch_types[] */\n-  /* Must lie outside user's namespace.  NULL == no macro.  */\n-  const char *const macro;\n-};\n-\n-/* List of all known AVR MCU types - if updated, it has to be kept\n-   in sync in several places (FIXME: is there a better way?):\n-    - here\n-    - avr.h (CPP_SPEC, LINK_SPEC, CRT_BINUTILS_SPECS)\n-    - t-avr (MULTILIB_MATCHES)\n-    - gas/config/tc-avr.c\n-    - avr-libc  */\n-\n-static const struct mcu_type_s avr_mcu_types[] = {\n-    /* Classic, <= 8K.  */\n-  { \"avr2\",         ARCH_AVR2, NULL },\n-  { \"at90s2313\",    ARCH_AVR2, \"__AVR_AT90S2313__\" },\n-  { \"at90s2323\",    ARCH_AVR2, \"__AVR_AT90S2323__\" },\n-  { \"at90s2333\",    ARCH_AVR2, \"__AVR_AT90S2333__\" },\n-  { \"at90s2343\",    ARCH_AVR2, \"__AVR_AT90S2343__\" },\n-  { \"attiny22\",     ARCH_AVR2, \"__AVR_ATtiny22__\" },\n-  { \"attiny26\",     ARCH_AVR2, \"__AVR_ATtiny26__\" },\n-  { \"at90s4414\",    ARCH_AVR2, \"__AVR_AT90S4414__\" },\n-  { \"at90s4433\",    ARCH_AVR2, \"__AVR_AT90S4433__\" },\n-  { \"at90s4434\",    ARCH_AVR2, \"__AVR_AT90S4434__\" },\n-  { \"at90s8515\",    ARCH_AVR2, \"__AVR_AT90S8515__\" },\n-  { \"at90c8534\",    ARCH_AVR2, \"__AVR_AT90C8534__\" },\n-  { \"at90s8535\",    ARCH_AVR2, \"__AVR_AT90S8535__\" },\n-    /* Classic + MOVW, <= 8K.  */\n-  { \"avr25\",        ARCH_AVR25, NULL },\n-  { \"ata6289\",      ARCH_AVR25, \"__AVR_ATA6289__\" },\n-  { \"attiny13\",     ARCH_AVR25, \"__AVR_ATtiny13__\" },\n-  { \"attiny13a\",    ARCH_AVR25, \"__AVR_ATtiny13A__\" },\n-  { \"attiny2313\",   ARCH_AVR25, \"__AVR_ATtiny2313__\" },\n-  { \"attiny24\",     ARCH_AVR25, \"__AVR_ATtiny24__\" },\n-  { \"attiny44\",     ARCH_AVR25, \"__AVR_ATtiny44__\" },\n-  { \"attiny84\",     ARCH_AVR25, \"__AVR_ATtiny84__\" },\n-  { \"attiny25\",     ARCH_AVR25, \"__AVR_ATtiny25__\" },\n-  { \"attiny45\",     ARCH_AVR25, \"__AVR_ATtiny45__\" },\n-  { \"attiny85\",     ARCH_AVR25, \"__AVR_ATtiny85__\" },\n-  { \"attiny261\",    ARCH_AVR25, \"__AVR_ATtiny261__\" },\n-  { \"attiny461\",    ARCH_AVR25, \"__AVR_ATtiny461__\" },\n-  { \"attiny861\",    ARCH_AVR25, \"__AVR_ATtiny861__\" },\n-  { \"attiny43u\",    ARCH_AVR25, \"__AVR_ATtiny43U__\" },\n-  { \"attiny87\",     ARCH_AVR25, \"__AVR_ATtiny87__\" },\n-  { \"attiny48\",     ARCH_AVR25, \"__AVR_ATtiny48__\" },\n-  { \"attiny88\",     ARCH_AVR25, \"__AVR_ATtiny88__\" },\n-  { \"at86rf401\",    ARCH_AVR25, \"__AVR_AT86RF401__\" },\n-    /* Classic, > 8K, <= 64K.  */\n-  { \"avr3\",         ARCH_AVR3, NULL },\n-  { \"at43usb355\",   ARCH_AVR3, \"__AVR_AT43USB355__\" },\n-  { \"at76c711\",     ARCH_AVR3, \"__AVR_AT76C711__\" },\n-    /* Classic, == 128K.  */\n-  { \"avr31\",        ARCH_AVR31, NULL },\n-  { \"atmega103\",    ARCH_AVR31, \"__AVR_ATmega103__\" },\n-  { \"at43usb320\",   ARCH_AVR31, \"__AVR_AT43USB320__\" },\n-    /* Classic + MOVW + JMP/CALL.  */\n-  { \"avr35\",        ARCH_AVR35, NULL },\n-  { \"at90usb82\",    ARCH_AVR35, \"__AVR_AT90USB82__\" },\n-  { \"at90usb162\",   ARCH_AVR35, \"__AVR_AT90USB162__\" },\n-  { \"attiny167\",    ARCH_AVR35, \"__AVR_ATtiny167__\" },\n-  { \"attiny327\",    ARCH_AVR35, \"__AVR_ATtiny327__\" },\n-    /* Enhanced, <= 8K.  */\n-  { \"avr4\",         ARCH_AVR4, NULL },\n-  { \"atmega8\",      ARCH_AVR4, \"__AVR_ATmega8__\" },\n-  { \"atmega48\",     ARCH_AVR4, \"__AVR_ATmega48__\" },\n-  { \"atmega48p\",    ARCH_AVR4, \"__AVR_ATmega48P__\" },\n-  { \"atmega88\",     ARCH_AVR4, \"__AVR_ATmega88__\" },\n-  { \"atmega88p\",    ARCH_AVR4, \"__AVR_ATmega88P__\" },\n-  { \"atmega8515\",   ARCH_AVR4, \"__AVR_ATmega8515__\" },\n-  { \"atmega8535\",   ARCH_AVR4, \"__AVR_ATmega8535__\" },\n-  { \"atmega8hva\",   ARCH_AVR4, \"__AVR_ATmega8HVA__\" },\n-  { \"atmega4hvd\",   ARCH_AVR4, \"__AVR_ATmega4HVD__\" },\n-  { \"atmega8hvd\",   ARCH_AVR4, \"__AVR_ATmega8HVD__\" },\n-  { \"atmega8c1\",    ARCH_AVR4, \"__AVR_ATmega8C1__\" },\n-  { \"atmega8m1\",    ARCH_AVR4, \"__AVR_ATmega8M1__\" },\n-  { \"at90pwm1\",     ARCH_AVR4, \"__AVR_AT90PWM1__\" },\n-  { \"at90pwm2\",     ARCH_AVR4, \"__AVR_AT90PWM2__\" },\n-  { \"at90pwm2b\",    ARCH_AVR4, \"__AVR_AT90PWM2B__\" },\n-  { \"at90pwm3\",     ARCH_AVR4, \"__AVR_AT90PWM3__\" },\n-  { \"at90pwm3b\",    ARCH_AVR4, \"__AVR_AT90PWM3B__\" },\n-  { \"at90pwm81\",    ARCH_AVR4, \"__AVR_AT90PWM81__\" },\n-    /* Enhanced, > 8K, <= 64K.  */\n-  { \"avr5\",         ARCH_AVR5, NULL },\n-  { \"atmega16\",     ARCH_AVR5, \"__AVR_ATmega16__\" },\n-  { \"atmega161\",    ARCH_AVR5, \"__AVR_ATmega161__\" },\n-  { \"atmega162\",    ARCH_AVR5, \"__AVR_ATmega162__\" },\n-  { \"atmega163\",    ARCH_AVR5, \"__AVR_ATmega163__\" },\n-  { \"atmega164p\",   ARCH_AVR5, \"__AVR_ATmega164P__\" },\n-  { \"atmega165\",    ARCH_AVR5, \"__AVR_ATmega165__\" },\n-  { \"atmega165p\",   ARCH_AVR5, \"__AVR_ATmega165P__\" },\n-  { \"atmega168\",    ARCH_AVR5, \"__AVR_ATmega168__\" },\n-  { \"atmega168p\",   ARCH_AVR5, \"__AVR_ATmega168P__\" },\n-  { \"atmega169\",    ARCH_AVR5, \"__AVR_ATmega169__\" },\n-  { \"atmega169p\",   ARCH_AVR5, \"__AVR_ATmega169P__\" },\n-  { \"atmega32\",     ARCH_AVR5, \"__AVR_ATmega32__\" },\n-  { \"atmega323\",    ARCH_AVR5, \"__AVR_ATmega323__\" },\n-  { \"atmega324p\",   ARCH_AVR5, \"__AVR_ATmega324P__\" },\n-  { \"atmega325\",    ARCH_AVR5, \"__AVR_ATmega325__\" },\n-  { \"atmega325p\",   ARCH_AVR5, \"__AVR_ATmega325P__\" },\n-  { \"atmega3250\",   ARCH_AVR5, \"__AVR_ATmega3250__\" },\n-  { \"atmega3250p\",  ARCH_AVR5, \"__AVR_ATmega3250P__\" },\n-  { \"atmega328p\",   ARCH_AVR5, \"__AVR_ATmega328P__\" },\n-  { \"atmega329\",    ARCH_AVR5, \"__AVR_ATmega329__\" },\n-  { \"atmega329p\",   ARCH_AVR5, \"__AVR_ATmega329P__\" },\n-  { \"atmega3290\",   ARCH_AVR5, \"__AVR_ATmega3290__\" },\n-  { \"atmega3290p\",  ARCH_AVR5, \"__AVR_ATmega3290P__\" },\n-  { \"atmega406\",    ARCH_AVR5, \"__AVR_ATmega406__\" },\n-  { \"atmega64\",     ARCH_AVR5, \"__AVR_ATmega64__\" },\n-  { \"atmega640\",    ARCH_AVR5, \"__AVR_ATmega640__\" },\n-  { \"atmega644\",    ARCH_AVR5, \"__AVR_ATmega644__\" },\n-  { \"atmega644p\",   ARCH_AVR5, \"__AVR_ATmega644P__\" },\n-  { \"atmega645\",    ARCH_AVR5, \"__AVR_ATmega645__\" },\n-  { \"atmega6450\",   ARCH_AVR5, \"__AVR_ATmega6450__\" },\n-  { \"atmega649\",    ARCH_AVR5, \"__AVR_ATmega649__\" },\n-  { \"atmega6490\",   ARCH_AVR5, \"__AVR_ATmega6490__\" },\n-  { \"atmega16hva\",  ARCH_AVR5, \"__AVR_ATmega16HVA__\" },\n-  { \"atmega16hvb\",  ARCH_AVR5, \"__AVR_ATmega16HVB__\" },\n-  { \"atmega32hvb\",  ARCH_AVR5, \"__AVR_ATmega32HVB__\" },\n-  { \"at90can32\",    ARCH_AVR5, \"__AVR_AT90CAN32__\" },\n-  { \"at90can64\",    ARCH_AVR5, \"__AVR_AT90CAN64__\" },\n-  { \"at90pwm216\",   ARCH_AVR5, \"__AVR_AT90PWM216__\" },\n-  { \"at90pwm316\",   ARCH_AVR5, \"__AVR_AT90PWM316__\" },\n-  { \"atmega16c1\",   ARCH_AVR5, \"__AVR_ATmega16C1__\" },\n-  { \"atmega32c1\",   ARCH_AVR5, \"__AVR_ATmega32C1__\" },\n-  { \"atmega64c1\",   ARCH_AVR5, \"__AVR_ATmega64C1__\" },\n-  { \"atmega16m1\",   ARCH_AVR5, \"__AVR_ATmega16M1__\" },\n-  { \"atmega32m1\",   ARCH_AVR5, \"__AVR_ATmega32M1__\" },\n-  { \"atmega64m1\",   ARCH_AVR5, \"__AVR_ATmega64M1__\" },\n-  { \"atmega16u4\",   ARCH_AVR5, \"__AVR_ATmega16U4__\" },\n-  { \"atmega32u4\",   ARCH_AVR5, \"__AVR_ATmega32U4__\" },\n-  { \"atmega32u6\",   ARCH_AVR5, \"__AVR_ATmega32U6__\" },\n-  { \"at90scr100\",   ARCH_AVR5, \"__AVR_AT90SCR100__\" },\n-  { \"at90usb646\",   ARCH_AVR5, \"__AVR_AT90USB646__\" },\n-  { \"at90usb647\",   ARCH_AVR5, \"__AVR_AT90USB647__\" },\n-  { \"at94k\",        ARCH_AVR5, \"__AVR_AT94K__\" },\n-    /* Enhanced, == 128K.  */\n-  { \"avr51\",        ARCH_AVR51, NULL },\n-  { \"atmega128\",    ARCH_AVR51, \"__AVR_ATmega128__\" },\n-  { \"atmega1280\",   ARCH_AVR51, \"__AVR_ATmega1280__\" },\n-  { \"atmega1281\",   ARCH_AVR51, \"__AVR_ATmega1281__\" },\n-  { \"atmega1284p\",  ARCH_AVR51, \"__AVR_ATmega1284P__\" },\n-  { \"atmega128rfa1\",  ARCH_AVR51, \"__AVR_ATmega128RFA1__\" },\n-  { \"at90can128\",   ARCH_AVR51, \"__AVR_AT90CAN128__\" },\n-  { \"at90usb1286\",  ARCH_AVR51, \"__AVR_AT90USB1286__\" },\n-  { \"at90usb1287\",  ARCH_AVR51, \"__AVR_AT90USB1287__\" },\n-  { \"m3000f\",       ARCH_AVR51, \"__AVR_M3000F__\" },\n-  { \"m3000s\",       ARCH_AVR51, \"__AVR_M3000S__\" },\n-  { \"m3001b\",       ARCH_AVR51, \"__AVR_M3001B__\" },\n-    /* 3-Byte PC.  */\n-  { \"avr6\",         ARCH_AVR6, NULL },\n-  { \"atmega2560\",   ARCH_AVR6, \"__AVR_ATmega2560__\" },\n-  { \"atmega2561\",   ARCH_AVR6, \"__AVR_ATmega2561__\" },\n-    /* Assembler only.  */\n-  { \"avr1\",         ARCH_AVR1, NULL },\n-  { \"at90s1200\",    ARCH_AVR1, \"__AVR_AT90S1200__\" },\n-  { \"attiny11\",     ARCH_AVR1, \"__AVR_ATtiny11__\" },\n-  { \"attiny12\",     ARCH_AVR1, \"__AVR_ATtiny12__\" },\n-  { \"attiny15\",     ARCH_AVR1, \"__AVR_ATtiny15__\" },\n-  { \"attiny28\",     ARCH_AVR1, \"__AVR_ATtiny28__\" },\n-  { NULL,           ARCH_UNKNOWN, NULL }\n-};\n+section *progmem_section;\n \n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "31a7cac0ecce20884b0b07f796c557c423c016ea", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 65, "deletions": 232, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "patch": "@@ -44,13 +44,63 @@ struct base_arch_s {\n   /* Core have 'EICALL' and 'EIJMP' instructions.  */\n   int have_eijmp_eicall;\n \n-  /* Reserved. */\n+  /* Reserved for xmega architecture.  */\n   int reserved;\n+\n+  /* Reserved for xmega architecture.  */\n+  int reserved2;\n+  \n+  /* Default start of data section address for architecture.  */\n+  int default_data_section_start;\n+\n+  const char *const macro;\n+  \n+  /* Architecture name.  */\n+  const char *const arch_name;  \n+};\n+\n+/* These names are used as the index into the avr_arch_types[] table \n+   above.  */\n+\n+enum avr_arch\n+{\n+  ARCH_UNKNOWN,\n+  ARCH_AVR1,\n+  ARCH_AVR2,\n+  ARCH_AVR25,\n+  ARCH_AVR3,\n+  ARCH_AVR31,\n+  ARCH_AVR35,\n+  ARCH_AVR4,\n+  ARCH_AVR5,\n+  ARCH_AVR51,\n+  ARCH_AVR6\n+};\n+\n+struct mcu_type_s {\n+  /* Device name.  */\n+  const char *const name;\n+  \n+  /* Index in avr_arch_types[].  */\n+  int arch; \n   \n+  /* Must lie outside user's namespace.  NULL == no macro.  */\n   const char *const macro;\n+  \n+  /* Stack pointer have 8 bits width.  */\n+  int short_sp;\n+  \n+  /* Start of data section.  */\n+  int data_section_start;\n+  \n+  /* Name of device library.  */\n+  const char *const library_name; \n };\n \n extern const struct base_arch_s *avr_current_arch;\n+extern const struct mcu_type_s *avr_current_device;\n+extern const struct mcu_type_s avr_mcu_types[];\n+extern const struct base_arch_s avr_arch_types[];\n \n #define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n@@ -756,6 +806,17 @@ fprintf (STREAM, \"\\t.skip %lu,0\\n\", (unsigned long)(N))\n #define ADJUST_INSN_LENGTH(INSN, LENGTH) (LENGTH =\\\n \t\t\t\t\t  adjust_insn_length (INSN, LENGTH))\n \n+extern const char *avr_device_to_arch (int argc, const char **argv);\n+extern const char *avr_device_to_data_start (int argc, const char **argv);\n+extern const char *avr_device_to_startfiles (int argc, const char **argv);\n+extern const char *avr_device_to_devicelib (int argc, const char **argv);\n+\n+#define EXTRA_SPEC_FUNCTIONS \\\n+  { \"device_to_arch\", avr_device_to_arch }, \\\n+  { \"device_to_data_start\", avr_device_to_data_start }, \\\n+  { \"device_to_startfile\", avr_device_to_startfiles }, \\\n+  { \"device_to_devicelib\", avr_device_to_devicelib },\n+\n #define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n \n #define CC1_SPEC \"%{profile:-p}\"\n@@ -778,106 +839,8 @@ mmcu=*:-mmcu=%*}\"\n                              %{mmcu=atmega64*|\\\n                                mmcu=at90can64*|\\\n                                mmcu=at90usb64*:--pmem-wrap-around=64k}}}\\\n-%{!mmcu*: -m avr2}\\\n-%{mmcu=at90s1200|\\\n-  mmcu=attiny11|\\\n-  mmcu=attiny12|\\\n-  mmcu=attiny15|\\\n-  mmcu=attiny28: -m avr1}\\\n-%{mmcu=attiny22|\\\n-  mmcu=attiny26|\\\n-  mmcu=at90s2*|\\\n-  mmcu=at90s4*|\\\n-  mmcu=at90s8*|\\\n-  mmcu=at90c8*|\\\n-  mmcu=at86rf401|\\\n-  mmcu=ata6289|\\\n-  mmcu=attiny13*|\\\n-  mmcu=attiny2313|\\\n-  mmcu=attiny24|\\\n-  mmcu=attiny25|\\\n-  mmcu=attiny261|\\\n-  mmcu=attiny4*|\\\n-  mmcu=attiny8*: -m avr2}\\\n-%{mmcu=atmega103|\\\n-  mmcu=at43*|\\\n-  mmcu=at76*|\\\n-  mmcu=at90usb82|\\\n-  mmcu=at90usb162|\\\n-  mmcu=attiny16*|\\\n-  mmcu=attiny32*: -m avr3}\\\n-%{mmcu=atmega8*|\\\n-  mmcu=atmega4*|\\\n-  mmcu=at90pwm1|\\\n-  mmcu=at90pwm2|\\\n-  mmcu=at90pwm2b|\\\n-  mmcu=at90pwm3|\\\n-  mmcu=at90pwm3b|\\\n-  mmcu=at90pwm81: -m avr4}\\\n-%{mmcu=atmega16*|\\\n-  mmcu=atmega32*|\\\n-  mmcu=atmega406|\\\n-  mmcu=atmega64*|\\\n-  mmcu=atmega128*|\\\n-  mmcu=at90can*|\\\n-  mmcu=at90pwm216|\\\n-  mmcu=at90pwm316|\\\n-  mmcu=at90scr100|\\\n-  mmcu=at90usb64*|\\\n-  mmcu=at90usb128*|\\\n-  mmcu=at94k|\\\n-  mmcu=m3000*|\\\n-  mmcu=m3001*: -m avr5}\\\n-%{mmcu=atmega256*:-m avr6}\\\n-%{mmcu=atmega324*|\\\n-  mmcu=atmega325*|\\\n-  mmcu=atmega328p|\\\n-  mmcu=atmega329*|\\\n-  mmcu=atmega406|\\\n-  mmcu=atmega48*|\\\n-  mmcu=atmega88*|\\\n-  mmcu=atmega64|\\\n-  mmcu=atmega644*|\\\n-  mmcu=atmega645*|\\\n-  mmcu=atmega649*|\\\n-  mmcu=atmega128|\\\n-  mmcu=atmega1284p|\\\n-  mmcu=atmega162|\\\n-  mmcu=atmega164*|\\\n-  mmcu=atmega165*|\\\n-  mmcu=atmega168*|\\\n-  mmcu=atmega169*|\\\n-  mmcu=atmega4hv*|\\\n-  mmcu=atmega8hv*|\\\n-  mmcu=atmega16hv*|\\\n-  mmcu=atmega32hv*|\\\n-  mmcu=attiny48|\\\n-  mmcu=attiny88|\\\n-  mmcu=attiny87|\\\n-  mmcu=attiny167|\\\n-  mmcu=attiny327|\\\n-  mmcu=at90can*|\\\n-  mmcu=at90pwm*|\\\n-  mmcu=atmega8c1|\\\n-  mmcu=atmega16c1|\\\n-  mmcu=atmega32c1|\\\n-  mmcu=atmega64c1|\\\n-  mmcu=atmega8m1|\\\n-  mmcu=atmega16m1|\\\n-  mmcu=atmega32m1|\\\n-  mmcu=atmega64m1|\\\n-  mmcu=atmega16u4|\\\n-  mmcu=atmega32u*|\\\n-  mmcu=at90scr100|\\\n-  mmcu=ata6289|\\\n-  mmcu=at90usb*: -Tdata 0x800100}\\\n-%{mmcu=atmega640|\\\n-  mmcu=atmega1280|\\\n-  mmcu=atmega1281|\\\n-  mmcu=atmega256*|\\\n-  mmcu=atmega128rfa1: -Tdata 0x800200}\\\n-%{mmcu=m3000*|\\\n-  mmcu=m3001*: -Tdata 0x801000}\"\n+%:device_to_arch(%{mmcu=*:%*})\\\n+%:device_to_data_start(%{mmcu=*:%*})\"\n \n #define LIB_SPEC \\\n   \"%{!mmcu=at90s1*:%{!mmcu=attiny11:%{!mmcu=attiny12:%{!mmcu=attiny15:%{!mmcu=attiny28: -lc }}}}}\"\n@@ -888,140 +851,10 @@ mmcu=*:-mmcu=%*}\"\n #define LIBGCC_SPEC \\\n   \"%{!mmcu=at90s1*:%{!mmcu=attiny11:%{!mmcu=attiny12:%{!mmcu=attiny15:%{!mmcu=attiny28: -lgcc }}}}}\"\n \n-#define STARTFILE_SPEC \"%(crt_binutils)\"\n+#define STARTFILE_SPEC \"%:device_to_startfile(%{mmcu=*:%*})\"\n \n #define ENDFILE_SPEC \"\"\n \n-#define CRT_BINUTILS_SPECS \"\\\n-%{mmcu=at90s1200|mmcu=avr1:crts1200.o%s} \\\n-%{mmcu=attiny11:crttn11.o%s} \\\n-%{mmcu=attiny12:crttn12.o%s} \\\n-%{mmcu=attiny15:crttn15.o%s} \\\n-%{mmcu=attiny28:crttn28.o%s} \\\n-%{!mmcu*|mmcu=at90s8515|mmcu=avr2:crts8515.o%s} \\\n-%{mmcu=at90s2313:crts2313.o%s} \\\n-%{mmcu=at90s2323:crts2323.o%s} \\\n-%{mmcu=at90s2333:crts2333.o%s} \\\n-%{mmcu=at90s2343:crts2343.o%s} \\\n-%{mmcu=attiny22:crttn22.o%s} \\\n-%{mmcu=attiny26:crttn26.o%s} \\\n-%{mmcu=at90s4433:crts4433.o%s} \\\n-%{mmcu=at90s4414:crts4414.o%s} \\\n-%{mmcu=at90s4434:crts4434.o%s} \\\n-%{mmcu=at90c8534:crtc8534.o%s} \\\n-%{mmcu=at90s8535:crts8535.o%s} \\\n-%{mmcu=at86rf401:crt86401.o%s} \\\n-%{mmcu=attiny13:crttn13.o%s} \\\n-%{mmcu=attiny13a:crttn13a.o%s} \\\n-%{mmcu=attiny2313|mmcu=avr25:crttn2313.o%s} \\\n-%{mmcu=attiny24:crttn24.o%s} \\\n-%{mmcu=attiny44:crttn44.o%s} \\\n-%{mmcu=attiny84:crttn84.o%s} \\\n-%{mmcu=attiny25:crttn25.o%s} \\\n-%{mmcu=attiny45:crttn45.o%s} \\\n-%{mmcu=attiny85:crttn85.o%s} \\\n-%{mmcu=attiny261:crttn261.o%s} \\\n-%{mmcu=attiny461:crttn461.o%s} \\\n-%{mmcu=attiny861:crttn861.o%s} \\\n-%{mmcu=attiny43u:crttn43u.o%s} \\\n-%{mmcu=attiny87:crttn87.o%s} \\\n-%{mmcu=attiny48:crttn48.o%s} \\\n-%{mmcu=attiny88:crttn88.o%s} \\\n-%{mmcu=ata6289:crta6289.o%s} \\\n-%{mmcu=at43usb355|mmcu=avr3:crt43355.o%s} \\\n-%{mmcu=at76c711:crt76711.o%s} \\\n-%{mmcu=atmega103|mmcu=avr31:crtm103.o%s} \\\n-%{mmcu=at43usb320:crt43320.o%s} \\\n-%{mmcu=at90usb162|mmcu=avr35:crtusb162.o%s} \\\n-%{mmcu=at90usb82:crtusb82.o%s} \\\n-%{mmcu=attiny167:crttn167.o%s} \\\n-%{mmcu=attiny327:crttn327.o%s} \\\n-%{mmcu=atmega8|mmcu=avr4:crtm8.o%s} \\\n-%{mmcu=atmega48:crtm48.o%s} \\\n-%{mmcu=atmega48p:crtm48p.o%s} \\\n-%{mmcu=atmega88:crtm88.o%s} \\\n-%{mmcu=atmega88p:crtm88p.o%s} \\\n-%{mmcu=atmega8515:crtm8515.o%s} \\\n-%{mmcu=atmega8535:crtm8535.o%s} \\\n-%{mmcu=atmega8c1:crtm8c1.o%s} \\\n-%{mmcu=atmega8m1:crtm8m1.o%s} \\\n-%{mmcu=at90pwm1:crt90pwm1.o%s} \\\n-%{mmcu=at90pwm2:crt90pwm2.o%s} \\\n-%{mmcu=at90pwm2b:crt90pwm2b.o%s} \\\n-%{mmcu=at90pwm3:crt90pwm3.o%s} \\\n-%{mmcu=at90pwm3b:crt90pwm3b.o%s} \\\n-%{mmcu=at90pwm81:crt90pwm81.o%s} \\\n-%{mmcu=atmega16:crtm16.o%s} \\\n-%{mmcu=atmega161|mmcu=avr5:crtm161.o%s} \\\n-%{mmcu=atmega162:crtm162.o%s} \\\n-%{mmcu=atmega163:crtm163.o%s} \\\n-%{mmcu=atmega164p:crtm164p.o%s} \\\n-%{mmcu=atmega165:crtm165.o%s} \\\n-%{mmcu=atmega165p:crtm165p.o%s} \\\n-%{mmcu=atmega168:crtm168.o%s} \\\n-%{mmcu=atmega168p:crtm168p.o%s} \\\n-%{mmcu=atmega169:crtm169.o%s} \\\n-%{mmcu=atmega169p:crtm169p.o%s} \\\n-%{mmcu=atmega32:crtm32.o%s} \\\n-%{mmcu=atmega323:crtm323.o%s} \\\n-%{mmcu=atmega324p:crtm324p.o%s} \\\n-%{mmcu=atmega325:crtm325.o%s} \\\n-%{mmcu=atmega325p:crtm325p.o%s} \\\n-%{mmcu=atmega3250:crtm3250.o%s} \\\n-%{mmcu=atmega3250p:crtm3250p.o%s} \\\n-%{mmcu=atmega328p:crtm328p.o%s} \\\n-%{mmcu=atmega329:crtm329.o%s} \\\n-%{mmcu=atmega329p:crtm329p.o%s} \\\n-%{mmcu=atmega3290:crtm3290.o%s} \\\n-%{mmcu=atmega3290p:crtm3290p.o%s} \\\n-%{mmcu=atmega406:crtm406.o%s} \\\n-%{mmcu=atmega64:crtm64.o%s} \\\n-%{mmcu=atmega640:crtm640.o%s} \\\n-%{mmcu=atmega644:crtm644.o%s} \\\n-%{mmcu=atmega644p:crtm644p.o%s} \\\n-%{mmcu=atmega645:crtm645.o%s} \\\n-%{mmcu=atmega6450:crtm6450.o%s} \\\n-%{mmcu=atmega649:crtm649.o%s} \\\n-%{mmcu=atmega6490:crtm6490.o%s} \\\n-%{mmcu=atmega8hva:crtm8hva.o%s} \\\n-%{mmcu=atmega16hva:crtm16hva.o%s} \\\n-%{mmcu=atmega16hvb:crtm16hvb.o%s} \\\n-%{mmcu=atmega32hvb:crtm32hvb.o%s} \\\n-%{mmcu=atmega4hvd:crtm4hvd.o%s} \\\n-%{mmcu=atmega8hvd:crtm8hvd.o%s} \\\n-%{mmcu=at90can32:crtcan32.o%s} \\\n-%{mmcu=at90can64:crtcan64.o%s} \\\n-%{mmcu=at90pwm216:crt90pwm216.o%s} \\\n-%{mmcu=at90pwm316:crt90pwm316.o%s} \\\n-%{mmcu=atmega16c1:crtm16c1.o%s} \\\n-%{mmcu=atmega32c1:crtm32c1.o%s} \\\n-%{mmcu=atmega64c1:crtm64c1.o%s} \\\n-%{mmcu=atmega16m1:crtm16m1.o%s} \\\n-%{mmcu=atmega32m1:crtm32m1.o%s} \\\n-%{mmcu=atmega64m1:crtm64m1.o%s} \\\n-%{mmcu=atmega16u4:crtm16u4.o%s} \\\n-%{mmcu=atmega32u4:crtm32u4.o%s} \\\n-%{mmcu=atmega32u6:crtm32u6.o%s} \\\n-%{mmcu=at90scr100:crt90scr100.o%s} \\\n-%{mmcu=at90usb646:crtusb646.o%s} \\\n-%{mmcu=at90usb647:crtusb647.o%s} \\\n-%{mmcu=at94k:crtat94k.o%s} \\\n-%{mmcu=atmega128|mmcu=avr51:crtm128.o%s} \\\n-%{mmcu=atmega1280:crtm1280.o%s} \\\n-%{mmcu=atmega1281:crtm1281.o%s} \\\n-%{mmcu=atmega1284p:crtm1284p.o%s} \\\n-%{mmcu=at90can128:crtcan128.o%s} \\\n-%{mmcu=atmega128rfa1:crtm128rfa1.o%s} \\\n-%{mmcu=at90usb1286:crtusb1286.o%s} \\\n-%{mmcu=at90usb1287:crtusb1287.o%s} \\\n-%{mmcu=m3000f:crtm3000f.o%s} \\\n-%{mmcu=m3000s:crtm3000s.o%s} \\\n-%{mmcu=m3001b:crtm3001b.o%s} \\\n-%{mmcu=atmega2560|mmcu=avr6:crtm2560.o%s} \\\n-%{mmcu=atmega2561:crtm2561.o%s}\"\n-\n-#define EXTRA_SPECS {\"crt_binutils\", CRT_BINUTILS_SPECS},\n-\n /* This is the default without any -mmcu=* option (AT90S*).  */\n #define MULTILIB_DEFAULTS { \"mmcu=avr2\" }\n "}, {"sha": "218c406b102e208be08602ccbff04e2eac1cefc1", "filename": "gcc/config/avr/driver-avr.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fdriver-avr.c?ref=59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "patch": "@@ -0,0 +1,115 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Contributed by Anatoly Sokolov <aesok@post.ru>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include <stdlib.h>\n+\n+/* Current architecture.  */\n+const struct base_arch_s *avr_current_arch = NULL;\n+\n+/* Current device.  */\n+const struct mcu_type_s *avr_current_device = NULL;\n+\n+/* Initialize avr_current_arch and avr_current_device variables.  */\n+\n+static void\n+avr_set_current_device (const char *name)\n+{\n+ \n+ if (NULL != avr_current_arch)\n+   return;\n+ \n+  for (avr_current_device = avr_mcu_types; avr_current_device->name;\n+       avr_current_device++)\n+    {\n+      if (strcmp (avr_current_device->name, name) == 0)\n+        break;\n+    }\n+\n+  avr_current_arch = &avr_arch_types[avr_current_device->arch];\n+}\n+\n+/* Returns command line parameters that describe the device architecture.  */\n+\n+const char *\n+avr_device_to_arch (int argc, const char **argv)\n+{\n+  if (0 == argc)\n+    return;\n+\n+  avr_set_current_device (argv[0]);\n+\n+  return concat (\"-m \", avr_current_arch->arch_name, NULL);\n+}\n+\n+/* Returns command line parameters that describe start of date section.  */\n+\n+const char *\n+avr_device_to_data_start (int argc, const char **argv)\n+{\n+  unsigned long data_section_start;\n+  char data_section_start_str[16];\n+\n+  if (0 == argc)\n+    return;  \n+\n+  avr_set_current_device (argv[0]);\n+  \n+  if (avr_current_device->data_section_start \n+      == avr_current_arch->default_data_section_start)\n+    return NULL;\n+    \n+  data_section_start = 0x800000 + avr_current_device->data_section_start;\n+  \n+  snprintf (data_section_start_str, sizeof(data_section_start_str) - 1,\n+            \"0x%lX\", data_section_start);\n+  \n+  return concat (\"-Tdata \", data_section_start_str, NULL);    \n+}\n+\n+/* Returns command line parameters that describe the device startfile.  */\n+\n+const char *\n+avr_device_to_startfiles (int argc, const char **argv)\n+{\n+  if (0 == argc)\n+    return;\n+\n+  avr_set_current_device (argv[0]);\n+\n+  return concat (\"crt\", avr_current_device->library_name, \".o%s\", NULL);\n+}\n+\n+/* Returns command line parameters that describe the device library.  */\n+\n+const char *\n+avr_device_to_devicelib (int argc, const char **argv)\n+{\n+  if (0 == argc)\n+    return;\n+\n+  avr_set_current_device (argv[0]);\n+\n+  return concat (\"-l\", avr_current_device->library_name, NULL);\n+}\n+"}, {"sha": "c27118e22d46a1b305f0a4ff38d719c7c55cea3f", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=59ab92d2918a7e7ee914bf86cff5bcbabb68d9b9", "patch": "@@ -17,6 +17,14 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+driver-avr.o: $(srcdir)/config/avr/driver-avr.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n+avr-devices.o: $(srcdir)/config/avr/avr-devices.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n+\n LIB1ASMSRC = avr/libgcc.S\n LIB1ASMFUNCS = \\\n \t_mulqi3 \\"}]}