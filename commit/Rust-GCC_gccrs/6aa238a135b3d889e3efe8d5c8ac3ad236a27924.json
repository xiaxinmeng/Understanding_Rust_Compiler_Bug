{"sha": "6aa238a135b3d889e3efe8d5c8ac3ad236a27924", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhMjM4YTEzNWIzZDg4OWUzZWZlOGQ1YzhhYzNhZDIzNmEyNzkyNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-01-30T03:04:14Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-30T03:04:14Z"}, "message": "PR middle-end/88956 - ICE: Floating point exception on a memcpy from\n\nPR middle-end/88956 - ICE: Floating point exception on a memcpy from\na zero-length constant array\n\ngcc/ChangeLog:\n\n\tPR c/88956\n\t* gimple-fold.c (fold_array_ctor_reference): Avoid zero-length arrays.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/88956\n\t* gcc.dg/Warray-bounds-39.c: New test.\n\nFrom-SVN: r268378", "tree": {"sha": "7957ace73cf42e859e1cd02afe93c3e5e019c3fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7957ace73cf42e859e1cd02afe93c3e5e019c3fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa238a135b3d889e3efe8d5c8ac3ad236a27924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa238a135b3d889e3efe8d5c8ac3ad236a27924", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa238a135b3d889e3efe8d5c8ac3ad236a27924", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "538a530848375deb14495fae5a5ccf5ae5daedba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538a530848375deb14495fae5a5ccf5ae5daedba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/538a530848375deb14495fae5a5ccf5ae5daedba"}], "stats": {"total": 176, "additions": 168, "deletions": 8}, "files": [{"sha": "d040d970d5f69d97f043ce7a43f7e77f1ffd3458", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6aa238a135b3d889e3efe8d5c8ac3ad236a27924", "patch": "@@ -1,3 +1,8 @@\n+2019-01-29  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/88956\n+\t* gimple-fold.c (fold_array_ctor_reference): Avoid zero-length arrays.\n+\n 2019-01-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/66676"}, {"sha": "7ef5004f5f9d3d98de2ab87a350ed2b04088fc8d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=6aa238a135b3d889e3efe8d5c8ac3ad236a27924", "patch": "@@ -6702,25 +6702,27 @@ fold_array_ctor_reference (tree type, tree ctor,\n     domain_type = TYPE_DOMAIN (TREE_TYPE (ctor));\n   if (domain_type && TYPE_MIN_VALUE (domain_type))\n     {\n-      /* Static constructors for variably sized objects makes no sense.  */\n+      /* Static constructors for variably sized objects make no sense.  */\n       if (TREE_CODE (TYPE_MIN_VALUE (domain_type)) != INTEGER_CST)\n \treturn NULL_TREE;\n       low_bound = wi::to_offset (TYPE_MIN_VALUE (domain_type));\n     }\n   else\n     low_bound = 0;\n-  /* Static constructors for variably sized objects makes no sense.  */\n+  /* Static constructors for variably sized objects make no sense.  */\n   if (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ctor)))) != INTEGER_CST)\n     return NULL_TREE;\n   elt_size = wi::to_offset (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ctor))));\n \n   /* When TYPE is non-null, verify that it specifies a constant-sized\n-     accessed not larger than size of array element.  */\n-  if (type\n-      && (!TYPE_SIZE_UNIT (type)\n-\t  || TREE_CODE (TYPE_SIZE_UNIT (type)) != INTEGER_CST\n-\t  || elt_size < wi::to_offset (TYPE_SIZE_UNIT (type))\n-\t  || elt_size == 0))\n+     accessed not larger than size of array element.  Avoid division\n+     by zero below when ELT_SIZE is zero, such as with the result of\n+     an initializer for a zero-length array or an empty struct.  */\n+  if (elt_size == 0\n+      || (type\n+\t  && (!TYPE_SIZE_UNIT (type)\n+\t      || TREE_CODE (TYPE_SIZE_UNIT (type)) != INTEGER_CST\n+\t      || elt_size < wi::to_offset (TYPE_SIZE_UNIT (type)))))\n     return NULL_TREE;\n \n   /* Compute the array index we look for.  */"}, {"sha": "b7566db4a3c4b14f260486ad14e59863a2ffc3c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6aa238a135b3d889e3efe8d5c8ac3ad236a27924", "patch": "@@ -1,3 +1,8 @@\n+2019-01-29  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/88956\n+\t* gcc.dg/Warray-bounds-39.c: New test.\n+\n 2019-01-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR testsuite/89110"}, {"sha": "6a441c73e01ce3a462caa3611ea03c8ebda8e303", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-39.c", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa238a135b3d889e3efe8d5c8ac3ad236a27924/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-39.c?ref=6aa238a135b3d889e3efe8d5c8ac3ad236a27924", "patch": "@@ -0,0 +1,148 @@\n+/* PR middle-end/88956 - ICE: Floating point exception on a memcpy from\n+   an zero-length constant array\n+   Verify both that memory and string calls with a zero-length array\n+   don't cause an ICE, and also that they emit warnings.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" }  */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern void* memcpy (void*, const void*, size_t);\n+extern void* memmove (void*, const void*, size_t);\n+extern char* strcpy (char*, const char*);\n+extern char* strncpy (char*, const char*, size_t);\n+\n+const char s0[0] = { };\n+const char s0_0[0][0] = { };\n+const char s0_1[0][1] = { };\n+const char s1_0[1][0] = { };\n+\n+char d[4];\n+\n+void* test_memcpy_s0_1 (void *d)\n+{\n+  return memcpy (d, s0, 1);       /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_s0_2 (void *d)\n+{\n+  return memcpy (d, s0, 2);       /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_s0_0_1 (void *d)\n+{\n+  return memcpy (d, s0_0, 1);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_s0_0_2 (void *d)\n+{\n+  return memcpy (d, s0_0, 2);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+\n+void* test_memcpy_s0_1_1 (void *d)\n+{\n+  return memcpy (d, s0_1, 1);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_s0_1_2 (void *d)\n+{\n+  return memcpy (d, s0_1, 2);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+\n+void* test_memcpy_s1_0_1 (void *d)\n+{\n+  return memcpy (d, s1_0, 1);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_s1_0_2 (void *d)\n+{\n+  return memcpy (d, s1_0, 2);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+\n+void* test_memmove_s0_1 (void *d)\n+{\n+  return memmove (d, s0, 1);      /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memmove_s0_2 (void *d)\n+{\n+  return memmove (d, s0, 2);      /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memmove_s0_0_1 (void *d)\n+{\n+  return memmove (d, s0_0, 1);    /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memmove_s0_0_2 (void *d)\n+{\n+  return memmove (d, s0_0, 2);    /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+\n+struct Empty { };\n+const struct Empty e = { };\n+const struct Empty e0[0] = { };\n+const struct Empty e0_0[0][0] = { };\n+const struct Empty e0_1[0][1] = { };\n+const struct Empty e1_0[1][0] = { };\n+\n+void* test_memcpy_e_1 (void *d)\n+{\n+  return memcpy (d, &e, 1);       /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_e0_1 (void *d)\n+{\n+  return memcpy (d, e0, 1);       /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_e0_0_1 (void *d)\n+{\n+  return memcpy (d, e0_0, 1);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_e0_1_1 (void *d)\n+{\n+  return memcpy (d, e0_1, 1);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+void* test_memcpy_e1_0_1 (void *d)\n+{\n+  return memcpy (d, e1_0, 1);     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}\n+\n+\n+char* test_strcpy_s0 (char *d)\n+{\n+  return strcpy (d, s0);          /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr88991\" { xfail *-*-* } } */\n+}\n+\n+char* test_strcpy_s0_0 (char *d)\n+{\n+  return strcpy (d, s0_0[0]);     /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr88991\" { xfail *-*-* } } */\n+}\n+\n+\n+char* test_strncpy_s0_1 (char *d)\n+{\n+  return strncpy (d, s0, 1);    /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr88991\" { xfail *-*-* } } */\n+}\n+\n+char* test_strncpy_s0_2 (char *d)\n+{\n+  return strncpy (d, s0, 2);    /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr88991\" { xfail *-*-* } } */\n+}\n+\n+char* test_strncpy_s0_0_1 (char *d)\n+{\n+  return strncpy (d, s0_0[0], 1); /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr88991\" { xfail *-*-* } } */\n+}\n+\n+char* test_strncpy_s0_0_2 (char *d)\n+{\n+  return strncpy (d, s0_0[0], 2); /* { dg-warning \"\\\\\\[-Warray-bounds\" \"pr88991\" { xfail *-*-* } } */\n+}"}]}