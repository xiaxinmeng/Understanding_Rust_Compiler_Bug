{"sha": "ac631cbe7021105c7fb8438deaeef66fe544b9aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2MzFjYmU3MDIxMTA1YzdmYjg0MzhkZWFlZWY2NmZlNTQ0YjlhYQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2016-07-29T16:40:55Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2016-07-29T16:40:55Z"}, "message": "libiberty.h (MAX_ALLOCA_SIZE): New macro.\n\ninclude/\n\t* libiberty.h (MAX_ALLOCA_SIZE): New macro.\n\nlibiberty/\n\t* make-relative-prefix.c (make_relative_prefix_1): Fall back to\n\tmalloc if alloca argument is greater than MAX_ALLOCA_SIZE.\n\nFrom-SVN: r238880", "tree": {"sha": "3d4145b4bb447027e2ff796ee99f67e8c5f563b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d4145b4bb447027e2ff796ee99f67e8c5f563b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac631cbe7021105c7fb8438deaeef66fe544b9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac631cbe7021105c7fb8438deaeef66fe544b9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac631cbe7021105c7fb8438deaeef66fe544b9aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac631cbe7021105c7fb8438deaeef66fe544b9aa/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d51553e083cbed3f5c334573adc999654fb26df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51553e083cbed3f5c334573adc999654fb26df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51553e083cbed3f5c334573adc999654fb26df2"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "06be0281e26c051eadc0742e5a6fe4de191179b8", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac631cbe7021105c7fb8438deaeef66fe544b9aa/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac631cbe7021105c7fb8438deaeef66fe544b9aa/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=ac631cbe7021105c7fb8438deaeef66fe544b9aa", "patch": "@@ -1,3 +1,7 @@\n+2016-07-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* libiberty.h (MAX_ALLOCA_SIZE): New macro.\n+\n 2016-05-26  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* gomp-constants.h (GOMP_VERSION): Increment to 1, add comment to"}, {"sha": "605ff56abd8fc873fd824541b8c8f3b7d60aa8b9", "filename": "include/libiberty.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac631cbe7021105c7fb8438deaeef66fe544b9aa/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac631cbe7021105c7fb8438deaeef66fe544b9aa/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=ac631cbe7021105c7fb8438deaeef66fe544b9aa", "patch": "@@ -397,6 +397,17 @@ extern void hex_init (void);\n /* Save files used for communication between processes.  */\n #define PEX_SAVE_TEMPS\t\t0x4\n \n+/* Max number of alloca bytes per call before we must switch to malloc.\n+\n+   ?? Swiped from gnulib's regex_internal.h header.  Is this actually\n+   the case?  This number seems arbitrary, though sane.\n+\n+   The OS usually guarantees only one guard page at the bottom of the stack,\n+   and a page size can be as small as 4096 bytes.  So we cannot safely\n+   allocate anything larger than 4096 bytes.  Also care for the possibility\n+   of a few compiler-allocated temporary stack slots.  */\n+#define MAX_ALLOCA_SIZE\t4032\n+\n /* Prepare to execute one or more programs, with standard output of\n    each program fed to standard input of the next.\n    FLAGS\tAs above."}, {"sha": "a2e49a12cea89a649dec87508325a8fc296eef99", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac631cbe7021105c7fb8438deaeef66fe544b9aa/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac631cbe7021105c7fb8438deaeef66fe544b9aa/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=ac631cbe7021105c7fb8438deaeef66fe544b9aa", "patch": "@@ -1,3 +1,8 @@\n+2016-07-29  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* make-relative-prefix.c (make_relative_prefix_1): Fall back to\n+\tmalloc if alloca argument is greater than MAX_ALLOCA_SIZE.\n+\n 2016-07-15  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (cplus_demangle_operators): Add f[lrLR]."}, {"sha": "fa813998be3e97052a5215d1f411586161f64ebc", "filename": "libiberty/make-relative-prefix.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac631cbe7021105c7fb8438deaeef66fe544b9aa/libiberty%2Fmake-relative-prefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac631cbe7021105c7fb8438deaeef66fe544b9aa/libiberty%2Fmake-relative-prefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmake-relative-prefix.c?ref=ac631cbe7021105c7fb8438deaeef66fe544b9aa", "patch": "@@ -233,6 +233,7 @@ make_relative_prefix_1 (const char *progname, const char *bin_prefix,\n   int i, n, common;\n   int needed_len;\n   char *ret = NULL, *ptr, *full_progname;\n+  char *alloc_ptr = NULL;\n \n   if (progname == NULL || bin_prefix == NULL || prefix == NULL)\n     return NULL;\n@@ -256,7 +257,10 @@ make_relative_prefix_1 (const char *progname, const char *bin_prefix,\n #ifdef HAVE_HOST_EXECUTABLE_SUFFIX\n \t  len += strlen (HOST_EXECUTABLE_SUFFIX);\n #endif\n-\t  nstore = (char *) alloca (len);\n+\t  if (len < MAX_ALLOCA_SIZE)\n+\t    nstore = (char *) alloca (len);\n+\t  else\n+\t    alloc_ptr = nstore = (char *) malloc (len);\n \n \t  startp = endp = temp;\n \t  while (1)\n@@ -312,12 +316,12 @@ make_relative_prefix_1 (const char *progname, const char *bin_prefix,\n   else\n     full_progname = strdup (progname);\n   if (full_progname == NULL)\n-    return NULL;\n+    goto bailout;\n \n   prog_dirs = split_directories (full_progname, &prog_num);\n   free (full_progname);\n   if (prog_dirs == NULL)\n-    return NULL;\n+    goto bailout;\n \n   bin_dirs = split_directories (bin_prefix, &bin_num);\n   if (bin_dirs == NULL)\n@@ -395,6 +399,7 @@ make_relative_prefix_1 (const char *progname, const char *bin_prefix,\n   free_split_directories (prog_dirs);\n   free_split_directories (bin_dirs);\n   free_split_directories (prefix_dirs);\n+  free (alloc_ptr);\n \n   return ret;\n }"}]}