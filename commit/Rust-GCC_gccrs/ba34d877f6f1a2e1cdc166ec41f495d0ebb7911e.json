{"sha": "ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEzNGQ4NzdmNmYxYTJlMWNkYzE2NmVjNDFmNDk1ZDBlYmI3OTExZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-05-24T20:26:54Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-05-24T20:26:54Z"}, "message": "simplify-rtx.c: Rename macro SIGN_EXTEND to HWI_SIGN_EXTEND.\n\n\t* simplify-rtx.c: Rename macro SIGN_EXTEND to HWI_SIGN_EXTEND.\n\tAll callers changed.\n\nFrom-SVN: r34141", "tree": {"sha": "2570ac2eb8af44c60f8fc26f092b9df2f2af7a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2570ac2eb8af44c60f8fc26f092b9df2f2af7a55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e/comments", "author": null, "committer": null, "parents": [{"sha": "ea4da9dbcc377df89d21eafa6e0e40f3e176d099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4da9dbcc377df89d21eafa6e0e40f3e176d099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4da9dbcc377df89d21eafa6e0e40f3e176d099"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "a832f3e2108fab2b2be07f294469e6716306fb56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e", "patch": "@@ -1,3 +1,8 @@\n+2000-05-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* simplify-rtx.c: Rename macro SIGN_EXTEND to HWI_SIGN_EXTEND.\n+\tAll callers changed.\n+\n 2000-05-24  Alexandre Oliva  <aoliva@cygnus.com>\n \n \t* expr.c (expand_assignment, store_expr, expand_expr,"}, {"sha": "4a7a3a67861818da2cb602db9f89d75c593e80a0", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=ba34d877f6f1a2e1cdc166ec41f495d0ebb7911e", "patch": "@@ -96,7 +96,7 @@ Boston, MA 02111-1307, USA.  */\n    unsigned wide int, the high value a signed wide int.  We\n    occasionally need to sign extend from low to high as if low were a\n    signed wide int.  */\n-#define SIGN_EXTEND(low) \\\n+#define HWI_SIGN_EXTEND(low) \\\n  ((((HOST_WIDE_INT) low) < 0) ? ((HOST_WIDE_INT) -1) : ((HOST_WIDE_INT) 0))\n \n static rtx simplify_plus_minus\t\tPARAMS ((enum rtx_code,\n@@ -252,7 +252,7 @@ simplify_unary_operation (code, mode, op, op_mode)\n       REAL_VALUE_TYPE d;\n \n       if (GET_CODE (op) == CONST_INT)\n-\tlv = INTVAL (op), hv = SIGN_EXTEND (lv);\n+\tlv = INTVAL (op), hv = HWI_SIGN_EXTEND (lv);\n       else\n \tlv = CONST_DOUBLE_LOW (op),  hv = CONST_DOUBLE_HIGH (op);\n \n@@ -285,7 +285,7 @@ simplify_unary_operation (code, mode, op, op_mode)\n       REAL_VALUE_TYPE d;\n \n       if (GET_CODE (op) == CONST_INT)\n-\tlv = INTVAL (op), hv = SIGN_EXTEND (lv);\n+\tlv = INTVAL (op), hv = HWI_SIGN_EXTEND (lv);\n       else\n \tlv = CONST_DOUBLE_LOW (op),  hv = CONST_DOUBLE_HIGH (op);\n \n@@ -411,7 +411,7 @@ simplify_unary_operation (code, mode, op, op_mode)\n       if (GET_CODE (op) == CONST_DOUBLE)\n \tl1 = CONST_DOUBLE_LOW (op), h1 = CONST_DOUBLE_HIGH (op);\n       else\n-\tl1 = INTVAL (op), h1 = SIGN_EXTEND (l1);\n+\tl1 = INTVAL (op), h1 = HWI_SIGN_EXTEND (l1);\n \n       switch (code)\n \t{\n@@ -465,7 +465,7 @@ simplify_unary_operation (code, mode, op, op_mode)\n \t\t\t    << (GET_MODE_BITSIZE (op_mode) - 1))) != 0)\n \t\tlv -= (HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (op_mode);\n \n-\t      hv = SIGN_EXTEND (lv);\n+\t      hv = HWI_SIGN_EXTEND (lv);\n \t    }\n \t  break;\n \n@@ -722,12 +722,12 @@ simplify_binary_operation (code, mode, op0, op1)\n       if (GET_CODE (op0) == CONST_DOUBLE)\n \tl1 = CONST_DOUBLE_LOW (op0), h1 = CONST_DOUBLE_HIGH (op0);\n       else\n-\tl1 = INTVAL (op0), h1 = SIGN_EXTEND (l1);\n+\tl1 = INTVAL (op0), h1 = HWI_SIGN_EXTEND (l1);\n \n       if (GET_CODE (op1) == CONST_DOUBLE)\n \tl2 = CONST_DOUBLE_LOW (op1), h2 = CONST_DOUBLE_HIGH (op1);\n       else\n-\tl2 = INTVAL (op1), h2 = SIGN_EXTEND (l2);\n+\tl2 = INTVAL (op1), h2 = HWI_SIGN_EXTEND (l2);\n \n       switch (code)\n \t{\n@@ -1760,7 +1760,7 @@ simplify_relational_operation (code, mode, op0, op1)\n       else\n \t{\n \t  l0u = l0s = INTVAL (op0);\n-\t  h0u = h0s = SIGN_EXTEND (l0s);\n+\t  h0u = h0s = HWI_SIGN_EXTEND (l0s);\n \t}\n \t  \n       if (GET_CODE (op1) == CONST_DOUBLE)\n@@ -1771,13 +1771,13 @@ simplify_relational_operation (code, mode, op0, op1)\n       else\n \t{\n \t  l1u = l1s = INTVAL (op1);\n-\t  h1u = h1s = SIGN_EXTEND (l1s);\n+\t  h1u = h1s = HWI_SIGN_EXTEND (l1s);\n \t}\n \n       /* If WIDTH is nonzero and smaller than HOST_BITS_PER_WIDE_INT,\n \t we have to sign or zero-extend the values.  */\n       if (width != 0 && width <= HOST_BITS_PER_WIDE_INT)\n-\th0u = h1u = 0, h0s = SIGN_EXTEND (l0s), h1s = SIGN_EXTEND (l1s);\n+\th0u = h1u = 0, h0s = HWI_SIGN_EXTEND (l0s), h1s = HWI_SIGN_EXTEND (l1s);\n \n       if (width != 0 && width < HOST_BITS_PER_WIDE_INT)\n \t{"}]}