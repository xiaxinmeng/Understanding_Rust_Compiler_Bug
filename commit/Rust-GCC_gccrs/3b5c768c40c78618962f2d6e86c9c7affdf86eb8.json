{"sha": "3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1Yzc2OGM0MGM3ODYxODk2MmYyZDZlODZjOWM3YWZmZGY4NmViOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-30T13:11:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-30T13:11:01Z"}, "message": "call.c (build_new_method_call_1): Use constructo_name to get ctor name.\n\n\t* call.c (build_new_method_call_1): Use constructo_name to get\n\tctor name.  Move argument processing earlier to merge cdtor\n\thandling blocks.\n\t* decl.c (grokfndecl): Cdtors have special names.\n\t* method.c (implicitly_declare_fn): Likewise. Simplify flag setting.\n\t* pt.c (check_explicit_specialization): Cdtor name is already\n\tspecial.\n\t* search.c (class_method_index_for_fn): Likewise.\n\n\t* g++.dg/plugin/decl-plugin-test.C: Expect special ctor name.\n\nFrom-SVN: r249838", "tree": {"sha": "a9683d93df9f154a3ec979e2bb90a898310ff3a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9683d93df9f154a3ec979e2bb90a898310ff3a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "274c15162b9b023b8569fa39481ad1a0b7ed0070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274c15162b9b023b8569fa39481ad1a0b7ed0070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/274c15162b9b023b8569fa39481ad1a0b7ed0070"}], "stats": {"total": 91, "additions": 49, "deletions": 42}, "files": [{"sha": "c54cb2407e43c167649319c9412c26091548df1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "patch": "@@ -1,5 +1,14 @@\n 2017-06-30  Nathan Sidwell  <nathan@acm.org>\n \n+\t* call.c (build_new_method_call_1): Use constructo_name to get\n+\tctor name.  Move argument processing earlier to merge cdtor\n+\thandling blocks.\n+\t* decl.c (grokfndecl): Cdtors have special names.\n+\t* method.c (implicitly_declare_fn): Likewise. Simplify flag setting.\n+\t* pt.c (check_explicit_specialization): Cdtor name is already\n+\tspecial.\n+\t* search.c (class_method_index_for_fn): Likewise.\n+\n \tPR c++/81229\n \t* name-lookup.c (do_pushdecl): Reset IDENTIFIER_TYPE when finding\n \ta matching TYPE_DECL."}, {"sha": "fac6b6c16ac2cbfe9c0730b44def2c2f005c999e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "patch": "@@ -8994,6 +8994,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n       if (! (complain & tf_error))\n \treturn error_mark_node;\n \n+      name = constructor_name (basetype);\n       if (permerror (input_location,\n \t\t     \"cannot call constructor %<%T::%D%> directly\",\n \t\t     basetype, name))\n@@ -9004,6 +9005,19 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n       return call;\n     }\n \n+  /* Process the argument list.  */\n+  if (args != NULL && *args != NULL)\n+    {\n+      *args = resolve_args (*args, complain);\n+      if (*args == NULL)\n+\treturn error_mark_node;\n+    }\n+\n+  /* Consider the object argument to be used even if we end up selecting a\n+     static member function.  */\n+  instance = mark_type_use (instance);\n+\n+\n   /* Figure out whether to skip the first argument for the error\n      message we will display to users if an error occurs.  We don't\n      want to display any compiler-generated arguments.  The \"this\"\n@@ -9013,44 +9027,27 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n   skip_first_for_error = false;\n   if (IDENTIFIER_CDTOR_P (name))\n     {\n-      /* Callers should explicitly indicate whether they want to construct\n+      /* Callers should explicitly indicate whether they want to ctor\n \t the complete object or just the part without virtual bases.  */\n       gcc_assert (name != ctor_identifier);\n-      /* Similarly for destructors.  */\n-      gcc_assert (name != dtor_identifier);\n+\n       /* Remove the VTT pointer, if present.  */\n       if ((name == base_ctor_identifier || name == base_dtor_identifier)\n \t  && CLASSTYPE_VBASECLASSES (basetype))\n \tskip_first_for_error = true;\n-    }\n \n-  /* Process the argument list.  */\n-  if (args != NULL && *args != NULL)\n-    {\n-      *args = resolve_args (*args, complain);\n-      if (*args == NULL)\n-\treturn error_mark_node;\n-    }\n-\n-  /* Consider the object argument to be used even if we end up selecting a\n-     static member function.  */\n-  instance = mark_type_use (instance);\n-\n-  /* It's OK to call destructors and constructors on cv-qualified objects.\n-     Therefore, convert the INSTANCE to the unqualified type, if\n-     necessary.  */\n-  if (DECL_DESTRUCTOR_P (fn)\n-      || DECL_CONSTRUCTOR_P (fn))\n-    {\n+      /* It's OK to call destructors and constructors on cv-qualified\n+\t objects.  Therefore, convert the INSTANCE to the unqualified\n+\t type, if necessary.  */\n       if (!same_type_p (basetype, TREE_TYPE (instance)))\n \t{\n \t  instance = build_this (instance);\n \t  instance = build_nop (build_pointer_type (basetype), instance);\n \t  instance = build_fold_indirect_ref (instance);\n \t}\n     }\n-  if (DECL_DESTRUCTOR_P (fn))\n-    name = complete_dtor_identifier;\n+  else\n+    gcc_assert (!DECL_DESTRUCTOR_P (fn) && !DECL_CONSTRUCTOR_P (fn));\n \n   /* For the overload resolution we need to find the actual `this`\n      that would be captured if the call turns out to be to a"}, {"sha": "abb6cc4fabfc1319d2686a2b41a56d76c160b3d3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "patch": "@@ -8518,9 +8518,11 @@ grokfndecl (tree ctype,\n     case sfk_copy_constructor:\n     case sfk_move_constructor:\n       DECL_CONSTRUCTOR_P (decl) = 1;\n+      DECL_NAME (decl) = ctor_identifier;\n       break;\n     case sfk_destructor:\n       DECL_DESTRUCTOR_P (decl) = 1;\n+      DECL_NAME (decl) = dtor_identifier;\n       break;\n     default:\n       break;"}, {"sha": "0646b08e577d8d571c860db0b0b2fe6399b2b690", "filename": "gcc/cp/method.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "patch": "@@ -1968,12 +1968,12 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n     {\n     case sfk_destructor:\n       /* Destructor.  */\n-      name = constructor_name (type);\n+      name = dtor_identifier;\n       break;\n \n     case sfk_constructor:\n       /* Default constructor.  */\n-      name = constructor_name (type);\n+      name = ctor_identifier;\n       break;\n \n     case sfk_copy_constructor:\n@@ -1989,7 +1989,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n \t  name = cp_assignment_operator_id (NOP_EXPR);\n \t}\n       else\n-\tname = constructor_name (type);\n+\tname = ctor_identifier;\n \n       if (kind == sfk_inheriting_constructor)\n \tparameter_types = inherited_parms;\n@@ -2053,13 +2053,14 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n   fn = build_lang_decl (FUNCTION_DECL, name, fn_type);\n   if (kind != sfk_inheriting_constructor)\n     DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (TYPE_NAME (type));\n-  if (kind == sfk_constructor || kind == sfk_copy_constructor\n-      || kind == sfk_move_constructor || kind == sfk_inheriting_constructor)\n-    DECL_CONSTRUCTOR_P (fn) = 1;\n-  else if (kind == sfk_destructor)\n-    DECL_DESTRUCTOR_P (fn) = 1;\n-  else\n+\n+  if (!IDENTIFIER_CDTOR_P (name))\n+    /* Assignment operator.  */\n     SET_OVERLOADED_OPERATOR_CODE (fn, NOP_EXPR);\n+  else if (IDENTIFIER_CTOR_P (name))\n+    DECL_CONSTRUCTOR_P (fn) = true;\n+  else\n+    DECL_DESTRUCTOR_P (fn) = true;\n \n   SET_DECL_ALIGN (fn, MINIMUM_METHOD_BOUNDARY);\n "}, {"sha": "79b55b5937666403c9e0c3ad96113dbcbf8828e3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "patch": "@@ -2881,9 +2881,8 @@ check_explicit_specialization (tree declarator,\n \n \t  if (constructor_name_p (name, ctype))\n \t    {\n-\t      int is_constructor = DECL_CONSTRUCTOR_P (decl);\n-\n-\t      if (is_constructor ? !TYPE_HAS_USER_CONSTRUCTOR (ctype)\n+\t      if (DECL_CONSTRUCTOR_P (decl)\n+\t\t  ? !TYPE_HAS_USER_CONSTRUCTOR (ctype)\n \t\t  : !CLASSTYPE_DESTRUCTOR (ctype))\n \t\t{\n \t\t  /* From [temp.expl.spec]:\n@@ -2898,7 +2897,7 @@ check_explicit_specialization (tree declarator,\n \t\t  return error_mark_node;\n \t\t}\n \n-\t      name = is_constructor ? ctor_identifier : dtor_identifier;\n+\t      name = DECL_NAME (decl);\n \t    }\n \n \t  if (!DECL_CONV_FN_P (decl))"}, {"sha": "9d8a629118f38d9636f7243feb0e75d700b24457", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "patch": "@@ -1713,10 +1713,7 @@ class_method_index_for_fn (tree class_type, tree function)\n {\n   gcc_assert (DECL_DECLARES_FUNCTION_P (function));\n \n-  return lookup_fnfields_1 (class_type,\n-\t\t\t    DECL_CONSTRUCTOR_P (function) ? ctor_identifier :\n-\t\t\t    DECL_DESTRUCTOR_P (function) ? dtor_identifier :\n-\t\t\t    DECL_NAME (function));\n+  return lookup_fnfields_1 (class_type, DECL_NAME (function));\n }\n \n "}, {"sha": "30c087edb09ed02cbd54d07c58fc577d63db28c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "patch": "@@ -1,5 +1,7 @@\n 2017-06-30  Nathan Sidwell  <nathan@acm.org>\n \n+\t* g++.dg/plugin/decl-plugin-test.C: Expect special ctor name.\n+\n \tPR c++/81229\n \t* g++.dg/lookup/pr81229.C: New.\n "}, {"sha": "e6bd746892cfcfd4e074d3500b8820bfbed33118", "filename": "gcc/testsuite/g++.dg/plugin/decl-plugin-test.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdecl-plugin-test.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5c768c40c78618962f2d6e86c9c7affdf86eb8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdecl-plugin-test.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdecl-plugin-test.C?ref=3b5c768c40c78618962f2d6e86c9c7affdf86eb8", "patch": "@@ -17,7 +17,7 @@ class test_class {\n   int class_field1; // { dg-warning \"Decl Field class_field1\" }\n   int class_field2; // { dg-warning \"Decl Field class_field2\" }\n \n-  test_class() // { dg-warning \"Decl Function test_class\" }\n+  test_class() // { dg-warning \"Decl Function __ct\" }\n     : class_field1(0), class_field2(0)\n   {}\n "}]}