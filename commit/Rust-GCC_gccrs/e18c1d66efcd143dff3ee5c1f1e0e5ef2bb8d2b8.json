{"sha": "e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4YzFkNjZlZmNkMTQzZGZmM2VlNWMxZjFlMGU1ZWYyYmI4ZDJiOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-12-03T11:55:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-12-03T11:55:14Z"}, "message": "re PR tree-optimization/14541 ([tree-ssa] built-in math functions are not fully optimized at tree level)\n\n2014-12-03  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/14541\n\t* builtins.c (fold_builtin_logarithm): Implement simplifications ...\n\t* match.pd: ... here as patterns.\n\nFrom-SVN: r218308", "tree": {"sha": "6eb190ae25299211a11c103cdbd2ca77fb8c7dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb190ae25299211a11c103cdbd2ca77fb8c7dbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e43187ab4967a561fb908664a315ecc927fe7bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e43187ab4967a561fb908664a315ecc927fe7bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e43187ab4967a561fb908664a315ecc927fe7bc1"}], "stats": {"total": 200, "additions": 103, "deletions": 97}, "files": [{"sha": "75b935b2e4b6892d64a2f518036b6000d4dde764", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8", "patch": "@@ -1,3 +1,9 @@\n+2014-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/14541\n+\t* builtins.c (fold_builtin_logarithm): Implement simplifications ...\n+\t* match.pd: ... here as patterns.\n+\n 2014-12-03  Prachi Godbole  <prachi.godbole@imgtec.com>\n \n \t* config/mips/p5600.md (define_automaton, define_cpu_unit): Replace"}, {"sha": "b9dd664c9c2e18f16fcfff7e1e1b5a6b7cddf874", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 97, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8", "patch": "@@ -8375,99 +8375,6 @@ fold_builtin_bswap (tree fndecl, tree arg)\n   return NULL_TREE;\n }\n \n-/* A subroutine of fold_builtin to fold the various logarithmic\n-   functions.  Return NULL_TREE if no simplification can me made.\n-   FUNC is the corresponding MPFR logarithm function.  */\n-\n-static tree\n-fold_builtin_logarithm (location_t loc, tree fndecl, tree arg,\n-\t\t\tint (*func)(mpfr_ptr, mpfr_srcptr, mp_rnd_t))\n-{\n-  if (validate_arg (arg, REAL_TYPE))\n-    {\n-      tree type = TREE_TYPE (TREE_TYPE (fndecl));\n-      tree res;\n-      const enum built_in_function fcode = builtin_mathfn_code (arg);\n-\n-      /* Calculate the result when the argument is a constant.  */\n-      if ((res = do_mpfr_arg1 (arg, type, func, &dconst0, NULL, false)))\n-\treturn res;\n-\n-      /* Special case, optimize logN(expN(x)) = x.  */\n-      if (flag_unsafe_math_optimizations\n-\t  && ((func == mpfr_log\n-\t       && (fcode == BUILT_IN_EXP\n-\t\t   || fcode == BUILT_IN_EXPF\n-\t\t   || fcode == BUILT_IN_EXPL))\n-\t      || (func == mpfr_log2\n-\t\t  && (fcode == BUILT_IN_EXP2\n-\t\t      || fcode == BUILT_IN_EXP2F\n-\t\t      || fcode == BUILT_IN_EXP2L))\n-\t      || (func == mpfr_log10 && (BUILTIN_EXP10_P (fcode)))))\n-\treturn fold_convert_loc (loc, type, CALL_EXPR_ARG (arg, 0));\n-\n-      /* Optimize logN(func()) for various exponential functions.  We\n-\t want to determine the value \"x\" and the power \"exponent\" in\n-\t order to transform logN(x**exponent) into exponent*logN(x).  */\n-      if (flag_unsafe_math_optimizations)\n-\t{\n-\t  tree exponent = 0, x = 0;\n-\n-\t  switch (fcode)\n-\t  {\n-\t  CASE_FLT_FN (BUILT_IN_EXP):\n-\t    /* Prepare to do logN(exp(exponent) -> exponent*logN(e).  */\n-\t    x = build_real (type, real_value_truncate (TYPE_MODE (type),\n-                                                       dconst_e ()));\n-\t    exponent = CALL_EXPR_ARG (arg, 0);\n-\t    break;\n-\t  CASE_FLT_FN (BUILT_IN_EXP2):\n-\t    /* Prepare to do logN(exp2(exponent) -> exponent*logN(2).  */\n-\t    x = build_real (type, dconst2);\n-\t    exponent = CALL_EXPR_ARG (arg, 0);\n-\t    break;\n-\t  CASE_FLT_FN (BUILT_IN_EXP10):\n-\t  CASE_FLT_FN (BUILT_IN_POW10):\n-\t    /* Prepare to do logN(exp10(exponent) -> exponent*logN(10).  */\n-\t    {\n-\t      REAL_VALUE_TYPE dconst10;\n-\t      real_from_integer (&dconst10, VOIDmode, 10, SIGNED);\n-\t      x = build_real (type, dconst10);\n-\t    }\n-\t    exponent = CALL_EXPR_ARG (arg, 0);\n-\t    break;\n-\t  CASE_FLT_FN (BUILT_IN_SQRT):\n-\t    /* Prepare to do logN(sqrt(x) -> 0.5*logN(x).  */\n-\t    x = CALL_EXPR_ARG (arg, 0);\n-\t    exponent = build_real (type, dconsthalf);\n-\t    break;\n-\t  CASE_FLT_FN (BUILT_IN_CBRT):\n-\t    /* Prepare to do logN(cbrt(x) -> (1/3)*logN(x).  */\n-\t    x = CALL_EXPR_ARG (arg, 0);\n-\t    exponent = build_real (type, real_value_truncate (TYPE_MODE (type),\n-\t\t\t\t\t\t\t      dconst_third ()));\n-\t    break;\n-\t  CASE_FLT_FN (BUILT_IN_POW):\n-\t    /* Prepare to do logN(pow(x,exponent) -> exponent*logN(x).  */\n-\t    x = CALL_EXPR_ARG (arg, 0);\n-\t    exponent = CALL_EXPR_ARG (arg, 1);\n-\t    break;\n-\t  default:\n-\t    break;\n-\t  }\n-\n-\t  /* Now perform the optimization.  */\n-\t  if (x && exponent)\n-\t    {\n-\t      tree logfn = build_call_expr_loc (loc, fndecl, 1, x);\n-\t      return fold_build2_loc (loc, MULT_EXPR, type, exponent, logfn);\n-\t    }\n-\t}\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Fold a builtin function call to hypot, hypotf, or hypotl.  Return\n    NULL_TREE if no simplification can be made.  */\n \n@@ -10226,16 +10133,22 @@ fold_builtin_1 (location_t loc, tree fndecl, tree arg0, bool ignore)\n     CASE_FLT_FN (BUILT_IN_EXPM1):\n       if (validate_arg (arg0, REAL_TYPE))\n \treturn do_mpfr_arg1 (arg0, type, mpfr_expm1, NULL, NULL, 0);\n-    break;\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_LOG):\n-    return fold_builtin_logarithm (loc, fndecl, arg0, mpfr_log);\n+      if (validate_arg (arg0, REAL_TYPE))\n+        return do_mpfr_arg1 (arg0, type, mpfr_log, &dconst0, NULL, false);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_LOG2):\n-      return fold_builtin_logarithm (loc, fndecl, arg0, mpfr_log2);\n+      if (validate_arg (arg0, REAL_TYPE))\n+        return do_mpfr_arg1 (arg0, type, mpfr_log2, &dconst0, NULL, false);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_LOG10):\n-      return fold_builtin_logarithm (loc, fndecl, arg0, mpfr_log10);\n+      if (validate_arg (arg0, REAL_TYPE))\n+        return do_mpfr_arg1 (arg0, type, mpfr_log10, &dconst0, NULL, false);\n+      break;\n \n     CASE_FLT_FN (BUILT_IN_LOG1P):\n       if (validate_arg (arg0, REAL_TYPE))"}, {"sha": "4bee62ef91c788897b7fd3aaa631c52ac3bf3410", "filename": "gcc/match.pd", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e18c1d66efcd143dff3ee5c1f1e0e5ef2bb8d2b8", "patch": "@@ -918,3 +918,90 @@ along with GCC; see the file COPYING3.  If not see\n     (icmp @0 @1))\n    (if (ic == ncmp)\n     (ncmp @0 @1)))))\n+\n+\n+/* Simplification of math builtins.  */\n+\n+(define_operator_list LOG BUILT_IN_LOGF BUILT_IN_LOG BUILT_IN_LOGL)\n+(define_operator_list EXP BUILT_IN_EXPF BUILT_IN_EXP BUILT_IN_EXPL)\n+(define_operator_list LOG2 BUILT_IN_LOG2F BUILT_IN_LOG2 BUILT_IN_LOG2L)\n+(define_operator_list EXP2 BUILT_IN_EXP2F BUILT_IN_EXP2 BUILT_IN_EXP2L)\n+(define_operator_list LOG10 BUILT_IN_LOG10F BUILT_IN_LOG10 BUILT_IN_LOG10L)\n+(define_operator_list EXP10 BUILT_IN_EXP10F BUILT_IN_EXP10 BUILT_IN_EXP10L)\n+(define_operator_list POW BUILT_IN_POWF BUILT_IN_POW BUILT_IN_POWL)\n+(define_operator_list POW10 BUILT_IN_POW10F BUILT_IN_POW10 BUILT_IN_POW10L)\n+(define_operator_list SQRT BUILT_IN_SQRTF BUILT_IN_SQRT BUILT_IN_SQRTL)\n+(define_operator_list CBRT BUILT_IN_CBRTF BUILT_IN_CBRT BUILT_IN_CBRTL)\n+\n+\n+/* fold_builtin_logarithm */\n+(if (flag_unsafe_math_optimizations)\n+ /* Special case, optimize logN(expN(x)) = x.  */\n+ (for logs (LOG LOG2 LOG10)\n+      exps (EXP EXP2 EXP10)\n+  (simplify\n+   (logs (exps @0))\n+    @0))\n+ /* Optimize logN(func()) for various exponential functions.  We\n+    want to determine the value \"x\" and the power \"exponent\" in\n+    order to transform logN(x**exponent) into exponent*logN(x).  */\n+ (for logs (LOG LOG LOG LOG\n+            LOG2 LOG2 LOG2 LOG2\n+\t    LOG10 LOG10 LOG10 LOG10)\n+      exps (EXP EXP2 EXP10 POW10)\n+  (simplify\n+   (logs (exps @0))\n+   (with {\n+     tree x;\n+     switch (exps)\n+       {\n+       CASE_FLT_FN (BUILT_IN_EXP):\n+         /* Prepare to do logN(exp(exponent) -> exponent*logN(e).  */\n+\t x = build_real (type, real_value_truncate (TYPE_MODE (type),\n+\t\t\t\t\t\t    dconst_e ()));\n+         break;\n+       CASE_FLT_FN (BUILT_IN_EXP2):\n+         /* Prepare to do logN(exp2(exponent) -> exponent*logN(2).  */\n+         x = build_real (type, dconst2);\n+         break;\n+       CASE_FLT_FN (BUILT_IN_EXP10):\n+       CASE_FLT_FN (BUILT_IN_POW10):\n+\t /* Prepare to do logN(exp10(exponent) -> exponent*logN(10).  */\n+\t {\n+\t   REAL_VALUE_TYPE dconst10;\n+\t   real_from_integer (&dconst10, VOIDmode, 10, SIGNED);\n+\t   x = build_real (type, dconst10);\n+\t }\n+         break;\n+       }\n+     }\n+    (mult (logs { x; }) @0))))\n+ (for logs (LOG LOG\n+            LOG2 LOG2\n+\t    LOG10 LOG10)\n+      exps (SQRT CBRT)\n+  (simplify\n+   (logs (exps @0))\n+   (with {\n+     tree x;\n+     switch (exps)\n+       {\n+       CASE_FLT_FN (BUILT_IN_SQRT):\n+\t /* Prepare to do logN(sqrt(x) -> 0.5*logN(x).  */\n+\t x = build_real (type, dconsthalf);\n+         break;\n+       CASE_FLT_FN (BUILT_IN_CBRT):\n+\t /* Prepare to do logN(cbrt(x) -> (1/3)*logN(x).  */\n+         x = build_real (type, real_value_truncate (TYPE_MODE (type),\n+\t\t\t\t\t\t    dconst_third ()));\n+         break;\n+       }\n+     }\n+    (mult { x; } (logs @0)))))\n+ /* logN(pow(x,exponent) -> exponent*logN(x).  */\n+ (for logs (LOG LOG2 LOG10)\n+      pows (POW)\n+  (simplify\n+   (logs (pows @0 @1))\n+   (mult @1 (logs @0)))))\n+"}]}