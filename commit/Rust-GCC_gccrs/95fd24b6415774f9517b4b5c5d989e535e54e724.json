{"sha": "95fd24b6415774f9517b4b5c5d989e535e54e724", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmZDI0YjY0MTU3NzRmOTUxN2I0YjVjNWQ5ODllNTM1ZTU0ZTcyNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-01-11T15:50:50Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-01-11T15:50:50Z"}, "message": "tree.h (TREE_CONSTANT_OVERFLOW): Obsolete.\n\n\n\t* tree.h (TREE_CONSTANT_OVERFLOW): Obsolete.  For the time being,\n\ttreat TREE_CONSTANT_OVERFLOW as a synonym of TREE_OVERFLOW.\n\nFrom-SVN: r120677", "tree": {"sha": "14f7a108fe83a6356a14bbeec16049d1862af610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f7a108fe83a6356a14bbeec16049d1862af610"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95fd24b6415774f9517b4b5c5d989e535e54e724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fd24b6415774f9517b4b5c5d989e535e54e724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fd24b6415774f9517b4b5c5d989e535e54e724", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fd24b6415774f9517b4b5c5d989e535e54e724/comments", "author": null, "committer": null, "parents": [{"sha": "6311165e6da1b3c3df30bc65acf25b33c8e49120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6311165e6da1b3c3df30bc65acf25b33c8e49120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6311165e6da1b3c3df30bc65acf25b33c8e49120"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "90cafb8325e6b374799fa8789854949e15ad862e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fd24b6415774f9517b4b5c5d989e535e54e724/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fd24b6415774f9517b4b5c5d989e535e54e724/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95fd24b6415774f9517b4b5c5d989e535e54e724", "patch": "@@ -1,3 +1,8 @@\n+2007-01-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.h (TREE_CONSTANT_OVERFLOW): Obsolete.  For the time being,\n+\ttreat TREE_CONSTANT_OVERFLOW as a synonym of TREE_OVERFLOW.\n+\n 2007-01-11  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure.ac (strict1_warn): Rename to strict_warn."}, {"sha": "6ba24abb71fcedf5cc9c7a0318d53c65824887c2", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95fd24b6415774f9517b4b5c5d989e535e54e724/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95fd24b6415774f9517b4b5c5d989e535e54e724/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=95fd24b6415774f9517b4b5c5d989e535e54e724", "patch": "@@ -426,8 +426,6 @@ struct gimple_stmt GTY(())\n            VAR_DECL, FUNCTION_DECL, CONSTRUCTOR, ADDR_EXPR\n        BINFO_VIRTUAL_P in\n            TREE_BINFO\n-       TREE_CONSTANT_OVERFLOW in\n-           INTEGER_CST, REAL_CST, COMPLEX_CST, VECTOR_CST\n        TREE_SYMBOL_REFERENCED in\n            IDENTIFIER_NODE\n        CLEANUP_EH_ONLY in\n@@ -1133,12 +1131,6 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n    emitted.  */\n #define TREE_NO_WARNING(NODE) ((NODE)->base.nowarning_flag)\n \n-/* In an INTEGER_CST, REAL_CST, COMPLEX_CST, or VECTOR_CST this means\n-   there was an overflow in folding.  This is distinct from\n-   TREE_OVERFLOW because ANSI C requires a diagnostic when overflows\n-   occur in constant expressions.  */\n-#define TREE_CONSTANT_OVERFLOW(NODE) (CST_CHECK (NODE)->base.static_flag)\n-\n /* In an IDENTIFIER_NODE, this means that assemble_name was called with\n    this string as an argument.  */\n #define TREE_SYMBOL_REFERENCED(NODE) \\\n@@ -1150,12 +1142,13 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n   (PTR_OR_REF_CHECK (NODE)->base.static_flag)\n \n /* In an INTEGER_CST, REAL_CST, COMPLEX_CST, or VECTOR_CST, this means\n-   there was an overflow in folding, and no warning has been issued\n-   for this subexpression.  TREE_OVERFLOW implies TREE_CONSTANT_OVERFLOW,\n-   but not vice versa.  */\n+   there was an overflow in folding.  */\n \n #define TREE_OVERFLOW(NODE) (CST_CHECK (NODE)->base.public_flag)\n \n+/* ??? This is an obsolete synonym for TREE_OVERFLOW.  */\n+#define TREE_CONSTANT_OVERFLOW(NODE) TREE_OVERFLOW(NODE)\n+\n /* TREE_OVERFLOW can only be true for EXPR of CONSTANT_CLASS_P.  */\n \n #define TREE_OVERFLOW_P(EXPR) \\"}]}