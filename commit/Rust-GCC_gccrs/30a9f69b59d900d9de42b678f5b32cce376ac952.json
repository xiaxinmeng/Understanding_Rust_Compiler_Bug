{"sha": "30a9f69b59d900d9de42b678f5b32cce376ac952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhOWY2OWI1OWQ5MDBkOWRlNDJiNjc4ZjViMzJjY2UzNzZhYzk1Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-05-04T00:14:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-05-04T00:14:47Z"}, "message": "* tree.c (verify_type): Check various uses of TYPE_MINVAL.\n\nFrom-SVN: r222753", "tree": {"sha": "15d2430a21047548a2e7e0b8fdeedbbd20495b46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d2430a21047548a2e7e0b8fdeedbbd20495b46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a9f69b59d900d9de42b678f5b32cce376ac952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a9f69b59d900d9de42b678f5b32cce376ac952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a9f69b59d900d9de42b678f5b32cce376ac952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a9f69b59d900d9de42b678f5b32cce376ac952/comments", "author": null, "committer": null, "parents": [{"sha": "90c19438a26683180babe6fd8007b5567cf914d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90c19438a26683180babe6fd8007b5567cf914d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90c19438a26683180babe6fd8007b5567cf914d3"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "38ed17754f7f773fc88d8e06ea607ced9c22c62f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a9f69b59d900d9de42b678f5b32cce376ac952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a9f69b59d900d9de42b678f5b32cce376ac952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30a9f69b59d900d9de42b678f5b32cce376ac952", "patch": "@@ -1,3 +1,7 @@\n+2015-05-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (verify_type): Check various uses of TYPE_MINVAL.\n+\n 2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* tree-outof-ssa.c (emit_partition_copy): Return rtx_insn *."}, {"sha": "b9bf35dfa76c6e6b89e8e4a503f1ac95f7498a4a", "filename": "gcc/tree.c", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a9f69b59d900d9de42b678f5b32cce376ac952/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a9f69b59d900d9de42b678f5b32cce376ac952/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=30a9f69b59d900d9de42b678f5b32cce376ac952", "patch": "@@ -12584,15 +12584,60 @@ verify_type (const_tree t)\n     }\n   else if (t != mv && !verify_type_variant (t, mv))\n     error_found = true;\n-  /* FIXME: C FE uses TYPE_VFIELD to record C_TYPE_INCOMPLETE_VARS\n-     and danagle the pointer from time to time.  */\n-  if (RECORD_OR_UNION_TYPE_P (t) && TYPE_VFIELD (t)\n-      && TREE_CODE (TYPE_VFIELD (t)) != FIELD_DECL\n-      && TREE_CODE (TYPE_VFIELD (t)) != TREE_LIST)\n+\n+  /* Check various uses of TYPE_MINVAL.  */\n+  if (RECORD_OR_UNION_TYPE_P (t))\n+    {\n+      /* FIXME: C FE uses TYPE_VFIELD to record C_TYPE_INCOMPLETE_VARS\n+\t and danagle the pointer from time to time.  */\n+      if (TYPE_VFIELD (t)\n+\t  && TREE_CODE (TYPE_VFIELD (t)) != FIELD_DECL\n+\t  && TREE_CODE (TYPE_VFIELD (t)) != TREE_LIST)\n+\t{\n+\t  error (\"TYPE_VFIELD is not FIELD_DECL nor TREE_LIST\");\n+\t  debug_tree (TYPE_VFIELD (t));\n+\t  error_found = true;\n+\t}\n+    }\n+  else if (TREE_CODE (t) == POINTER_TYPE)\n+    {\n+      if (TYPE_NEXT_PTR_TO (t)\n+\t  && TREE_CODE (TYPE_NEXT_PTR_TO (t)) != POINTER_TYPE)\n+\t{\n+\t  error (\"TYPE_NEXT_PTR_TO is not POINTER_TYPE\");\n+\t  debug_tree (TYPE_NEXT_PTR_TO (t));\n+\t  error_found = true;\n+\t}\n+    }\n+  else if (TREE_CODE (t) == REFERENCE_TYPE)\n     {\n-      error (\"TYPE_VFIELD is not FIELD_DECL nor TREE_LIST\");\n-      debug_tree (TYPE_VFIELD (t));\n+      if (TYPE_NEXT_REF_TO (t)\n+\t  && TREE_CODE (TYPE_NEXT_REF_TO (t)) != REFERENCE_TYPE)\n+\t{\n+\t  error (\"TYPE_NEXT_REF_TO is not REFERENCE_TYPE\");\n+\t  debug_tree (TYPE_NEXT_REF_TO (t));\n+\t  error_found = true;\n+\t}\n+    }\n+  else if (INTEGRAL_TYPE_P (t) || TREE_CODE (t) == REAL_TYPE || TREE_CODE (t) == FIXED_POINT_TYPE)\n+    {\n+      if (!TYPE_MIN_VALUE (t))\n+\t;\n+      else if (!TREE_CONSTANT (TYPE_MIN_VALUE (t)))\n+        {\n+\t  error (\"TYPE_MIN_VALUE is not constant\");\n+\t  debug_tree (TYPE_MIN_VALUE (t));\n+\t  error_found = true;\n+        }\n+    }\n+  else if (TYPE_MINVAL (t))\n+    {\n+      error (\"TYPE_MINVAL non-NULL\");\n+      debug_tree (TYPE_MINVAL (t));\n+      error_found = true;\n     }\n+\n+\n   if (error_found)\n     {\n       debug_tree (const_cast <tree> (t));"}]}