{"sha": "b662a90d414f4c717997dcb25a1b8fe137439a10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2MmE5MGQ0MTRmNGM3MTc5OTdkY2IyNWExYjhmZTEzNzQzOWExMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-27T19:20:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-27T19:20:28Z"}, "message": "(fix_argv): New function.\n\n(pexecute): Win32 but not Cygwin32 needs its arguments fixed.\nAdd underscore to cwait function call.\n\nFrom-SVN: r14338", "tree": {"sha": "08594f160695b9b488ad4560ce0491a2478cbb94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08594f160695b9b488ad4560ce0491a2478cbb94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b662a90d414f4c717997dcb25a1b8fe137439a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b662a90d414f4c717997dcb25a1b8fe137439a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b662a90d414f4c717997dcb25a1b8fe137439a10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b662a90d414f4c717997dcb25a1b8fe137439a10/comments", "author": null, "committer": null, "parents": [{"sha": "84d02eb4aaad7dd1ad516e5120e7f3a3a08119b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d02eb4aaad7dd1ad516e5120e7f3a3a08119b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d02eb4aaad7dd1ad516e5120e7f3a3a08119b9"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "db43a2efde4b04ddc5d1622d566a405aa34fa585", "filename": "gcc/pexecute.c", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b662a90d414f4c717997dcb25a1b8fe137439a10/gcc%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b662a90d414f4c717997dcb25a1b8fe137439a10/gcc%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpexecute.c?ref=b662a90d414f4c717997dcb25a1b8fe137439a10", "patch": "@@ -217,12 +217,49 @@ pwait (pid, status, flags)\n \n #endif /* MSDOS */\n \n-#if defined (_WIN32)\n+#if defined (_WIN32) && !defined (__CYGWIN32__)\n \n #include <process.h>\n extern int _spawnv ();\n extern int _spawnvp ();\n \n+/* This is a kludge to get around the Microsoft C spawn functions' propensity\n+   to remove the outermost set of double quotes from all arguments.  */\n+\n+const char * const *\n+fix_argv (argvec)\n+     char **argvec;\n+{\n+  int i;\n+\n+  for (i = 1; argvec[i] != 0; i++)\n+    {\n+      int len, j;\n+      char *temp, *newtemp;\n+\n+      temp = argvec[i];\n+      len = strlen (temp);\n+      for (j = 0; j < len; j++)\n+        {\n+          if (temp[j] == '\"')\n+            {\n+              newtemp = xmalloc (len + 2);\n+              strncpy (newtemp, temp, j);\n+              newtemp [j] = '\\\\';\n+              strncpy (&newtemp [j+1], &temp [j], len-j);\n+              newtemp [len+1] = 0;\n+              temp = newtemp;\n+              len++;\n+              j++;\n+            }\n+        }\n+\n+        argvec[i] = temp;\n+      }\n+\n+  return (const char * const *) argvec;\n+}\n+\n int\n pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n      const char *program;\n@@ -236,7 +273,8 @@ pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)\n \n   if ((flags & PEXECUTE_ONE) != PEXECUTE_ONE)\n     abort ();\n-  pid = (flags & PEXECUTE_SEARCH ? _spawnvp : _spawnv) (_P_NOWAIT, program, argv);\n+  pid = (flags & PEXECUTE_SEARCH ? _spawnvp : _spawnv)\n+    (_P_NOWAIT, program, fix_argv(argv));\n   if (pid == -1)\n     {\n       *errmsg_fmt = install_error_msg;\n@@ -254,7 +292,7 @@ pwait (pid, status, flags)\n {\n   /* ??? Here's an opportunity to canonicalize the values in STATUS.\n      Needed?  */\n-  return cwait (status, pid, WAIT_CHILD);\n+  return _cwait (status, pid, WAIT_CHILD);\n }\n \n #endif /* _WIN32 */\n@@ -440,7 +478,7 @@ pfinish ()\n \n /* include for Unix-like environments but not for Dos-like environments */\n #if ! defined (__MSDOS__) && ! defined (OS2) && ! defined (MPW) \\\n-    && ! defined (_WIN32)\n+    && (defined (__CYGWIN32__) || ! defined (_WIN32))\n \n #ifdef VMS\n #define vfork() (decc$$alloc_vfork_blocks() >= 0 ? \\"}]}