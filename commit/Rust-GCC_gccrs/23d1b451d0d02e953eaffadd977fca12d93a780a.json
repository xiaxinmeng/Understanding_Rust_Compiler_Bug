{"sha": "23d1b451d0d02e953eaffadd977fca12d93a780a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkMWI0NTFkMGQwMmU5NTNlYWZmYWRkOTc3ZmNhMTJkOTNhNzgwYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-03-30T14:13:21Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-03-30T14:13:21Z"}, "message": "re PR fortran/35740 (a = conjg(transpose(a)) still gives wrong  results, see bug 31994)\n\n2008-03-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/35740\n\t* resolve.c (resolve_function, resolve_call): If the procedure\n\tis elemental do not look for noncopying intrinsics.\n\n2008-03-30  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/35740\n\t* gfortran.dg/transpose_conjg_1.f90: New test.\n\nFrom-SVN: r133729", "tree": {"sha": "8f0884dece35871bb051f9f530a2d76428819a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f0884dece35871bb051f9f530a2d76428819a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23d1b451d0d02e953eaffadd977fca12d93a780a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d1b451d0d02e953eaffadd977fca12d93a780a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d1b451d0d02e953eaffadd977fca12d93a780a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d1b451d0d02e953eaffadd977fca12d93a780a/comments", "author": null, "committer": null, "parents": [{"sha": "05c7cda337326260ae501788eaf0c6b65f30beaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c7cda337326260ae501788eaf0c6b65f30beaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c7cda337326260ae501788eaf0c6b65f30beaf"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "b56aa730e68e5a55b195f87bad0595dfba22e5e7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1b451d0d02e953eaffadd977fca12d93a780a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1b451d0d02e953eaffadd977fca12d93a780a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=23d1b451d0d02e953eaffadd977fca12d93a780a", "patch": "@@ -1,3 +1,9 @@\n+2008-03-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/35740\n+\t* resolve.c (resolve_function, resolve_call): If the procedure\n+\tis elemental do not look for noncopying intrinsics.\n+\n 2008-03-29  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/35698"}, {"sha": "af9ef55ce41412fa3197b3bc0245848a16061974", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1b451d0d02e953eaffadd977fca12d93a780a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1b451d0d02e953eaffadd977fca12d93a780a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=23d1b451d0d02e953eaffadd977fca12d93a780a", "patch": "@@ -2374,7 +2374,12 @@ resolve_function (gfc_expr *expr)\n       gfc_expr_set_symbols_referenced (expr->ts.cl->length);\n     }\n \n-  if (t == SUCCESS)\n+  if (t == SUCCESS\n+\t&& !((expr->value.function.esym\n+\t\t&& expr->value.function.esym->attr.elemental)\n+\t\t\t||\n+\t     (expr->value.function.isym\n+\t\t&& expr->value.function.isym->elemental)))\n     find_noncopying_intrinsics (expr->value.function.esym,\n \t\t\t\texpr->value.function.actual);\n \n@@ -2845,7 +2850,7 @@ resolve_call (gfc_code *c)\n   if (resolve_elemental_actual (NULL, c) == FAILURE)\n     return FAILURE;\n \n-  if (t == SUCCESS)\n+  if (t == SUCCESS && !(c->resolved_sym && c->resolved_sym->attr.elemental))\n     find_noncopying_intrinsics (c->resolved_sym, c->ext.actual);\n   return t;\n }"}, {"sha": "5b61aee553625563c2ee5b1218ada7dc21e02e03", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1b451d0d02e953eaffadd977fca12d93a780a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1b451d0d02e953eaffadd977fca12d93a780a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23d1b451d0d02e953eaffadd977fca12d93a780a", "patch": "@@ -1,3 +1,8 @@\n+2008-03-30  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/35740\n+\t* gfortran.dg/transpose_conjg_1.f90: New test.\n+\n 2008-03-29  Laurent GUERBY  <laurent@guerby.net>\n \n \t* gnat.dg/socket2.adb: Remove since identical to socket1.adb."}, {"sha": "3b28827b38ab2f5aca9ae73cac1e4a37b7fcdedc", "filename": "gcc/testsuite/gfortran.dg/transpose_conjg_1.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d1b451d0d02e953eaffadd977fca12d93a780a/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_conjg_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d1b451d0d02e953eaffadd977fca12d93a780a/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_conjg_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftranspose_conjg_1.f90?ref=23d1b451d0d02e953eaffadd977fca12d93a780a", "patch": "@@ -0,0 +1,37 @@\n+!  { dg-do run }\n+!  Tests the fix for PR35740, where the trick of interchanging the descriptor\n+!  dimensions to implement TRANSPOSE did not work if it is an argument of\n+!  an elemental function - eg. CONJG.  The fix forces a library call for such\n+!  cases.  During the diagnosis of the PR, it was found that the scalarizer was\n+!  completely thrown if the argument of TRANSPOSE was a non-variable\n+!  expression; eg a + c below.  This is also fixed by the library call.\n+!\n+!  Contributed by Dominik Muth <dominik.muth@gmx.de>\n+!\n+program main\n+  implicit none\n+  complex, dimension(2,2) :: a,b,c,d\n+  a(1,1) = (1.,1.)\n+  a(2,1) = (2.,2.)\n+  a(1,2) = (3.,3.)\n+  a(2,2) = (4.,4.)\n+!\n+  b = a\n+  b = conjg(transpose(b))\n+  d = a\n+  d = transpose(conjg(d))\n+  if (any (b /= d)) call abort ()\n+!\n+  d = matmul (b,  a )\n+  if (any (d /= matmul (transpose(conjg(a)), a))) call abort ()\n+  if (any (d /= matmul (conjg(transpose(a)), a))) call abort ()\n+!\n+  c = (0.0,1.0)\n+  b = conjg(transpose(a + c))\n+  d = transpose(conjg(a + c))\n+  if (any (b /= d)) call abort ()\n+!\n+  d = matmul (b,  a + c)\n+  if (any (d /= matmul (transpose(conjg(a + c)), a + c))) call abort ()\n+  if (any (d /= matmul (conjg(transpose(a + c)), a + c))) call abort ()\n+ END program main"}]}