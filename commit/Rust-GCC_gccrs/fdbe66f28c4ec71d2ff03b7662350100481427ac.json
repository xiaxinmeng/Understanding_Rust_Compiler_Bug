{"sha": "fdbe66f28c4ec71d2ff03b7662350100481427ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRiZTY2ZjI4YzRlYzcxZDJmZjAzYjc2NjIzNTAxMDA0ODE0MjdhYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-06-08T05:05:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-06-08T05:05:45Z"}, "message": "re PR debug/21889 (Native Solaris assembler cannot grok DTP-relative debug symbols)\n\n\tPR target/21889\n\t* target.h (gcc_target) <asm_out>: New field output_dwarf_dtprel.\n\t* target-def.h (TARGET_ASM_OUTPUT_DWARF_DTPREL): New macro.\n\t(TARGET_ASM_OUT): Add it.\n\t* doc/tm.texi (Debugging Info): Document it.\n\t* dwarf2out.c (output_loc_operands) <INTERNAL_DW_OP_tls_addr>:\n\tTest it instead of ASM_OUTPUT_DWARF_DTPREL.\n\t(loc_descriptor_from_tree_1) <VAR_DECL>: Likewise.\n\t* system.h: Poison ASM_OUTPUT_DWARF_DTPREL.\n\t* config/frv/frv-protos.h (frv_output_dwarf_dtprel): Delete.\n\t* config/frv/frv.c (frv_output_dwarf_dtprel): Make static and unused.\n\t(gen_inlined_tls_plt): Remove unused variable MEM.\n\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to frv_output_dwarf_dtprel.\n\t* config/frv/frv.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n\t* config/i386/i386-protos.h (i386_output_dwarf_dtprel): Delete.\n\t* config/i386/i386.c (i386_output_dwarf_dtprel): Make static and\n\tunused.\n\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to i386_output_dwarf_dtprel.\n\t* config/i386/i386.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n\t* config/ia64/ia64-protos.h (ia64_output_dwarf_dtprel): Delete.\n\t* config/ia64/ia64.c (ia64_output_dwarf_dtprel): Make static and\n\tunused.\n\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to ia64_output_dwarf_dtprel.\n\t* config/ia64/ia64.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n\t* config/rs6000/rs6000-protos.h (rs6000_output_dwarf_dtprel): Delete.\n\t* config/rs6000/rs6000.c (rs6000_output_dwarf_dtprel): Make static and\n\tunused.\n\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to rs6000_output_dwarf_dtprel\n\t* config/rs6000/rs6000.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n\t* config/s390/s390-protos.h (s390_output_dwarf_dtprel): Delete.\n\t* config/s390/s390.c (s390_output_dwarf_dtprel): Make static and\n\tunused.\n\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to s390_output_dwarf_dtprel.\n\t* config/s390/s390.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n\t* config/sparc/sol2-gas.h (TARGET_SUN_TLS): Define to 0.\n\t(TARGET_GNU_TLS): Define to 1.\n\t* config/sparc/sparc-protos.h (sparc_output_dwarf_dtprel): Delete.\n\t* config/sparc/sparc.c (sparc_output_dwarf_dtprel): Make static and\n\tunused.\n\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to sparc_output_dwarf_dtprel\n\tif TARGET_GNU_TLS only.\n\t* config/sparc/sparc.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n\n\t* config.gcc (sparc64-*-solaris2*): Include tm-dwarf2.h last.\n\t(sparc-*-solaris2*): Likewise on Solaris 7 and up.\n\nFrom-SVN: r100742", "tree": {"sha": "d1ccb29c7e71fb530eaba0082fe695a30a47cf07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1ccb29c7e71fb530eaba0082fe695a30a47cf07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdbe66f28c4ec71d2ff03b7662350100481427ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdbe66f28c4ec71d2ff03b7662350100481427ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdbe66f28c4ec71d2ff03b7662350100481427ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdbe66f28c4ec71d2ff03b7662350100481427ac/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4280a26f3218f1be4066a045cc25f6f22fab90a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4280a26f3218f1be4066a045cc25f6f22fab90a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4280a26f3218f1be4066a045cc25f6f22fab90a6"}], "stats": {"total": 229, "additions": 149, "deletions": 80}, "files": [{"sha": "246e3daaabe30cff0b6da222f95b4ea42308cedc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -1,3 +1,51 @@\n+2005-06-08  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/21889\n+\t* target.h (gcc_target) <asm_out>: New field output_dwarf_dtprel.\n+\t* target-def.h (TARGET_ASM_OUTPUT_DWARF_DTPREL): New macro.\n+\t(TARGET_ASM_OUT): Add it.\n+\t* doc/tm.texi (Debugging Info): Document it.\n+\t* dwarf2out.c (output_loc_operands) <INTERNAL_DW_OP_tls_addr>:\n+\tTest it instead of ASM_OUTPUT_DWARF_DTPREL.\n+\t(loc_descriptor_from_tree_1) <VAR_DECL>: Likewise.\n+\t* system.h: Poison ASM_OUTPUT_DWARF_DTPREL.\n+\t* config/frv/frv-protos.h (frv_output_dwarf_dtprel): Delete.\n+\t* config/frv/frv.c (frv_output_dwarf_dtprel): Make static and unused.\n+\t(gen_inlined_tls_plt): Remove unused variable MEM.\n+\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to frv_output_dwarf_dtprel.\n+\t* config/frv/frv.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n+\t* config/i386/i386-protos.h (i386_output_dwarf_dtprel): Delete.\n+\t* config/i386/i386.c (i386_output_dwarf_dtprel): Make static and\n+\tunused.\n+\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to i386_output_dwarf_dtprel.\n+\t* config/i386/i386.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n+\t* config/ia64/ia64-protos.h (ia64_output_dwarf_dtprel): Delete.\n+\t* config/ia64/ia64.c (ia64_output_dwarf_dtprel): Make static and\n+\tunused.\n+\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to ia64_output_dwarf_dtprel.\n+\t* config/ia64/ia64.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n+\t* config/rs6000/rs6000-protos.h (rs6000_output_dwarf_dtprel): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_output_dwarf_dtprel): Make static and\n+\tunused.\n+\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to rs6000_output_dwarf_dtprel\n+\t* config/rs6000/rs6000.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n+\t* config/s390/s390-protos.h (s390_output_dwarf_dtprel): Delete.\n+\t* config/s390/s390.c (s390_output_dwarf_dtprel): Make static and\n+\tunused.\n+\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to s390_output_dwarf_dtprel.\n+\t* config/s390/s390.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n+\t* config/sparc/sol2-gas.h (TARGET_SUN_TLS): Define to 0.\n+\t(TARGET_GNU_TLS): Define to 1.\n+\t* config/sparc/sparc-protos.h (sparc_output_dwarf_dtprel): Delete.\n+\t* config/sparc/sparc.c (sparc_output_dwarf_dtprel): Make static and\n+\tunused.\n+\t(TARGET_ASM_OUTPUT_DWARF_DTPREL): Define to sparc_output_dwarf_dtprel\n+\tif TARGET_GNU_TLS only.\n+\t* config/sparc/sparc.h (ASM_OUTPUT_DWARF_DTPREL): Delete.\n+\n+\t* config.gcc (sparc64-*-solaris2*): Include tm-dwarf2.h last.\n+\t(sparc-*-solaris2*): Likewise on Solaris 7 and up.\n+\n 2005-06-07  Dale Johannesen  <dalej@apple.com>\n \n \t* config/i386/i386.md (movqi_1):  Fix case where source"}, {"sha": "6cf2c8cf79729706fe88a7291dcb818c7d20ed9f", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -2021,13 +2021,14 @@ sparc-*-rtems*)\n \textra_parts=\"crti.o crtn.o crtbegin.o crtend.o\"\n \t;;\n sparc64-*-solaris2* | sparcv9-*-solaris2*)\n-\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/sol2-64.h sparc/sol2-bi.h tm-dwarf2.h\"\n+\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h svr4.h sparc/sysv4.h sol2.h sparc/sol2.h sparc/sol2-64.h sparc/sol2-bi.h\"\n \tif test x$gnu_ld = xyes; then\n \t\ttm_file=\"${tm_file} sparc/sol2-gld.h sparc/sol2-gld-bi.h\"\n \tfi\n \tif test x$gas = xyes; then\n \t\ttm_file=\"${tm_file} sparc/sol2-gas.h sparc/sol2-gas-bi.h\"\n \tfi\n+\ttm_file=\"${tm_file} tm-dwarf2.h\"\n \ttmake_file=\"t-sol2 sparc/t-sol2 sparc/t-sol2-64 sparc/t-crtfm\"\n \tif test x$gnu_ld = xyes; then\n \t\ttmake_file=\"$tmake_file t-slibgcc-elf-ver\"\n@@ -2071,13 +2072,14 @@ sparc-*-solaris2*)\n \t\tfi\n \t\t;;\n \t*-*-solaris2.[789] | *-*-solaris2.1[0-9]*)\n-\t\ttm_file=\"sparc/biarch64.h ${tm_file} sparc/sol2-bi.h tm-dwarf2.h\"\n+\t\ttm_file=\"sparc/biarch64.h ${tm_file} sparc/sol2-bi.h\"\n \t\tif test x$gnu_ld = xyes; then\n \t\t\ttm_file=\"${tm_file} sparc/sol2-gld-bi.h\"\n \t\tfi\n \t\tif test x$gas = xyes; then\n \t\t\ttm_file=\"${tm_file} sparc/sol2-gas-bi.h\"\n \t\tfi\n+\t\ttm_file=\"${tm_file} tm-dwarf2.h\"\n \t\ttmake_file=\"$tmake_file sparc/t-sol2-64\"\n \t\tneed_64bit_hwint=yes\n \t\t;;"}, {"sha": "a6f6dc480d5f6163af825e292ff09fe875b35bd1", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -204,7 +204,6 @@ extern int accg_operand\t\t\t(rtx, enum machine_mode);\n extern rtx frv_matching_accg_for_acc\t(rtx);\n extern void frv_expand_fdpic_call\t(rtx *, bool, bool);\n extern rtx frv_gen_GPsym2reg\t\t(rtx, rtx);\n-extern void frv_output_dwarf_dtprel\t(FILE *, int, rtx);\n extern int frv_legitimate_memory_operand (rtx, enum machine_mode, int);\n \n /* Information about a relocation unspec.  SYMBOL is the relocation symbol"}, {"sha": "b54c085858dea85f6cb92759f4e38b525d28407b", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -353,6 +353,8 @@ static rtx frv_struct_value_rtx\t\t\t(tree, int);\n static bool frv_must_pass_in_stack (enum machine_mode mode, tree type);\n static int frv_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, bool);\n+static void frv_output_dwarf_dtprel\t\t(FILE *, int, rtx)\n+  ATTRIBUTE_UNUSED;\n \f\n /* Allow us to easily change the default for -malloc-cc.  */\n #ifndef DEFAULT_NO_ALLOC_CC\n@@ -426,6 +428,11 @@ static int frv_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #undef TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG frv_reorg\n \n+#if HAVE_AS_TLS\n+#undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n+#define TARGET_ASM_OUTPUT_DWARF_DTPREL frv_output_dwarf_dtprel\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #define FRV_SYMBOL_REF_TLS_P(RTX) \\\n@@ -3415,7 +3422,7 @@ frv_legitimate_address_p (enum machine_mode mode,\n static rtx\n gen_inlined_tls_plt (rtx addr)\n {\n-  rtx mem, retval, dest;\n+  rtx retval, dest;\n   rtx picreg = get_hard_reg_initial_val (Pmode, FDPIC_REG);\n \n \n@@ -9098,10 +9105,10 @@ frv_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n \n #define TLS_BIAS (2048 - 16)\n \n-/* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n-void\n+static void\n frv_output_dwarf_dtprel (FILE *file, int size, rtx x)\n {\n   gcc_assert (size == 4);"}, {"sha": "6f2c22d861a9a51abbc7b2a7daa38b1792a672cb", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -2361,13 +2361,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   assemble_name (STREAM, LABEL);\t\t\t\t\t\\\n } while (0)\n \n-#if HAVE_AS_TLS\n-/* Emit a dtp-relative reference to a TLS variable.  */\n-\n-#define ASM_OUTPUT_DWARF_DTPREL(FILE, SIZE, X) \\\n-  frv_output_dwarf_dtprel ((FILE), (SIZE), (X))\n-#endif\n-\n /* Whether to emit the gas specific dwarf2 line number support.  */\n #define DWARF2_ASM_LINE_DEBUG_INFO (TARGET_DEBUG_LOC)\n \f"}, {"sha": "142eb5ab1debcf5ebaca6737e8c755255558d46a", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -120,8 +120,6 @@ extern const char *output_387_reg_move (rtx, rtx*);\n extern const char *output_fix_trunc (rtx, rtx*, int);\n extern const char *output_fp_compare (rtx, rtx*, int, int);\n \n-extern void i386_output_dwarf_dtprel (FILE*, int, rtx);\n-\n extern void ix86_expand_clear (rtx);\n extern void ix86_expand_move (enum machine_mode, rtx[]);\n extern void ix86_expand_vector_move (enum machine_mode, rtx[]);"}, {"sha": "80170f90de87f6e315dd23ea0a9615aa3fedb2ec", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -866,6 +866,8 @@ static int ix86_address_cost (rtx);\n static bool ix86_cannot_force_const_mem (rtx);\n static rtx ix86_delegitimize_address (rtx);\n \n+static void i386_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n+\n struct builtin_description;\n static rtx ix86_expand_sse_comi (const struct builtin_description *,\n \t\t\t\t tree, rtx);\n@@ -1061,6 +1063,11 @@ static void init_ext_80387_constants (void);\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P ix86_vector_mode_supported_p\n \n+#ifdef HAVE_AS_TLS\n+#undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n+#define TARGET_ASM_OUTPUT_DWARF_DTPREL i386_output_dwarf_dtprel\n+#endif\n+\n #ifdef SUBTARGET_INSERT_ATTRIBUTES\n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES SUBTARGET_INSERT_ATTRIBUTES\n@@ -6107,10 +6114,10 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n     }\n }\n \n-/* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n-void\n+static void\n i386_output_dwarf_dtprel (FILE *file, int size, rtx x)\n {\n   fputs (ASM_LONG, file);"}, {"sha": "c9c4cfc84268aca832cfa8f138829ae2fb970c8c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -2071,13 +2071,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define JUMP_TABLES_IN_TEXT_SECTION \\\n   (!TARGET_64BIT && flag_pic && !HAVE_AS_GOTOFF_IN_DATA)\n \n-/* Emit a dtp-relative reference to a TLS variable.  */\n-\n-#ifdef HAVE_AS_TLS\n-#define ASM_OUTPUT_DWARF_DTPREL(FILE, SIZE, X) \\\n-  i386_output_dwarf_dtprel (FILE, SIZE, X)\n-#endif\n-\n /* Switch to init or fini section via SECTION_OP, emit a call to FUNC,\n    and switch back.  For x86 we do this only to save a few bytes that\n    would otherwise be unused in the text section.  */"}, {"sha": "31b854ce475cfadbd8f9090426eeb74174577f8f", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -68,7 +68,6 @@ extern void ia64_print_operand (FILE *, rtx, int);\n extern enum reg_class ia64_preferred_reload_class (rtx, enum reg_class);\n extern enum reg_class ia64_secondary_reload_class (enum reg_class,\n \t\t\t\t\t\t   enum machine_mode, rtx);\n-extern void ia64_output_dwarf_dtprel (FILE*, int, rtx);\n extern void process_for_unwind_directive (FILE *, rtx);\n extern const char *get_bundle_name (int);\n #endif /* RTX_CODE */"}, {"sha": "ca4723e006fdf3882b750f232383b245d20191e7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -232,6 +232,8 @@ static void ia64_file_start (void);\n \n static void ia64_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t     unsigned HOST_WIDE_INT);\n+static void ia64_output_dwarf_dtprel (FILE *, int, rtx)\n+     ATTRIBUTE_UNUSED;\n static void ia64_rwreloc_select_section (tree, int, unsigned HOST_WIDE_INT)\n      ATTRIBUTE_UNUSED;\n static void ia64_rwreloc_unique_section (tree, int)\n@@ -369,6 +371,11 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef  TARGET_SECTION_TYPE_FLAGS\n #define TARGET_SECTION_TYPE_FLAGS  ia64_section_type_flags\n \n+#ifdef HAVE_AS_TLS\n+#undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n+#define TARGET_ASM_OUTPUT_DWARF_DTPREL ia64_output_dwarf_dtprel\n+#endif\n+\n /* ??? ABI doesn't allow us to define this.  */\n #if 0\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n@@ -4151,10 +4158,10 @@ ia64_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n     }\n }\n \n-/* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n-void\n+static void\n ia64_output_dwarf_dtprel (FILE *file, int size, rtx x)\n {\n   gcc_assert (size == 8);"}, {"sha": "3bef0d3a93700ebd80ae087d45cd346a3923a660", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -1733,13 +1733,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   { \"loc79\", LOC_REG (79) }, \t\t\t\t\t\t\\\n }\n \n-/* Emit a dtp-relative reference to a TLS variable.  */\n-\n-#ifdef HAVE_AS_TLS\n-#define ASM_OUTPUT_DWARF_DTPREL(FILE, SIZE, X) \\\n-  ia64_output_dwarf_dtprel (FILE, SIZE, X)\n-#endif\n-\n /* A C compound statement to output to stdio stream STREAM the assembler syntax\n    for an instruction operand X.  X is an RTL expression.  */\n "}, {"sha": "c67f559ef7281ae1095394eebdb6d10aa4661136", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -153,7 +153,6 @@ extern int rs6000_register_move_cost (enum machine_mode,\n \t\t\t\t      enum reg_class, enum reg_class);\n extern int rs6000_memory_move_cost (enum machine_mode, enum reg_class, int);\n extern bool rs6000_tls_referenced_p (rtx);\n-extern void rs6000_output_dwarf_dtprel (FILE*, int, rtx);\n extern int rs6000_hard_regno_nregs (int, enum machine_mode);\n extern void rs6000_conditional_register_usage (void);\n "}, {"sha": "7bee8c0eb3c5c28d9e8a82f84d7de3c49502e78c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -683,6 +683,7 @@ int easy_vector_constant (rtx, enum machine_mode);\n static bool rs6000_is_opaque_type (tree);\n static rtx rs6000_dwarf_register_span (rtx);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n+static void rs6000_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static rtx rs6000_tls_get_addr (void);\n static rtx rs6000_got_sym (void);\n static int rs6000_tls_symbol_ref_1 (rtx *, void *);\n@@ -982,6 +983,11 @@ static const char alt_reg_names[][8] =\n #undef TARGET_RELAXED_ORDERING\n #define TARGET_RELAXED_ORDERING true\n \n+#ifdef HAVE_AS_TLS\n+#undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n+#define TARGET_ASM_OUTPUT_DWARF_DTPREL rs6000_output_dwarf_dtprel\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n \n@@ -2730,10 +2736,10 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n     return NULL_RTX;\n }\n \n-/* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n-void\n+static void\n rs6000_output_dwarf_dtprel (FILE *file, int size, rtx x)\n {\n   switch (size)"}, {"sha": "39474ac050e0954f1bbc91eda76573e12bcbb553", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -150,13 +150,6 @@\n \n #define TARGET_32BIT\t\t(! TARGET_64BIT)\n \n-/* Emit a dtp-relative reference to a TLS variable.  */\n-\n-#ifdef HAVE_AS_TLS\n-#define ASM_OUTPUT_DWARF_DTPREL(FILE, SIZE, X) \\\n-  rs6000_output_dwarf_dtprel (FILE, SIZE, X)\n-#endif\n-\n #ifndef HAVE_AS_TLS\n #define HAVE_AS_TLS 0\n #endif"}, {"sha": "1d470a24a3909cce1fa7f10953675d8f9b7d7e9d", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -88,7 +88,6 @@ extern void s390_output_pool_entry (rtx, enum machine_mode, unsigned int);\n extern void s390_trampoline_template (FILE *);\n extern void s390_initialize_trampoline (rtx, rtx, rtx);\n extern rtx s390_gen_rtx_const_DI (int, int);\n-extern void s390_output_dwarf_dtprel (FILE*, int, rtx);\n extern int s390_agen_dep_p (rtx, rtx);\n extern rtx s390_load_got (void);\n extern void s390_emit_tpf_eh_return (rtx);"}, {"sha": "5b82a8e92b3e480ea1e0d4932edfa7e1901ef4bb", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -3561,10 +3561,12 @@ s390_expand_addcc (enum rtx_code cmp_code, rtx cmp_op0, rtx cmp_op1,\n }\n \n \n-/* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n-void\n+static void s390_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n+\n+static void\n s390_output_dwarf_dtprel (FILE *file, int size, rtx x)\n {\n   switch (size)\n@@ -8285,6 +8287,11 @@ s390_reorg (void)\n #undef TARGET_INSN_VALID_WITHIN_DOLOOP\n #define TARGET_INSN_VALID_WITHIN_DOLOOP hook_bool_rtx_true\n \n+#ifdef HAVE_AS_TLS\n+#undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n+#define TARGET_ASM_OUTPUT_DWARF_DTPREL s390_output_dwarf_dtprel\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "1141d3b2e969cc6ab59840e232fb327ffffcfad9", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -918,13 +918,6 @@ extern int flag_pic;\n   \"%ap\",  \"%cc\",  \"%fp\",  \"%rp\",  \"%a0\",  \"%a1\"\t\t\t\t\\\n }\n \n-/* Emit a dtp-relative reference to a TLS variable.  */\n-\n-#ifdef HAVE_AS_TLS\n-#define ASM_OUTPUT_DWARF_DTPREL(FILE, SIZE, X) \\\n-  s390_output_dwarf_dtprel (FILE, SIZE, X)\n-#endif\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.  */\n #define PRINT_OPERAND(FILE, X, CODE) print_operand (FILE, X, CODE)\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)"}, {"sha": "942e39de8a457fadadab0f8256ceefa68325a116", "filename": "gcc/config/sparc/sol2-gas.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsol2-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsol2-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-gas.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -3,3 +3,11 @@\n \n /* Undefine this so that BNSYM/ENSYM pairs are emitted by STABS+.  */\n #undef NO_DBX_BNSYM_ENSYM\n+\n+/* Use GNU extensions to TLS support.  */\n+#ifdef HAVE_AS_TLS\n+#undef TARGET_SUN_TLS\n+#undef TARGET_GNU_TLS\n+#define TARGET_SUN_TLS 0\n+#define TARGET_GNU_TLS 1\n+#endif"}, {"sha": "9b548c2d34cfd35da358564892de0e9c154f5b53", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -72,7 +72,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef  ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n-  sprintf ((LABEL), \"*.L%s%ld\", (PREFIX), (long)(NUM))\n+  sprintf ((LABEL), \"*.L%s%lu\", (PREFIX), (unsigned long)(NUM))\n \n /* The native TLS-enabled assembler requires the directive #tls_object\n    to be put on objects in TLS sections (as of v7.1).  This is not"}, {"sha": "c743f55c000328ce07aa5246d5a1412028e51980", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -114,7 +114,6 @@ extern int v9_regcmp_p (enum rtx_code);\n extern int sparc_check_64 (rtx, rtx);\n extern rtx gen_df_reg (rtx, int);\n extern int sparc_extra_constraint_check (rtx, int, int);\n-extern void sparc_output_dwarf_dtprel (FILE*, int, rtx);\n #endif /* RTX_CODE */\n \n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "314895536db689157839f2a6fc7c963a910ae0cb", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -363,6 +363,7 @@ static bool sparc_pass_by_reference (CUMULATIVE_ARGS *,\n static int sparc_arg_partial_bytes (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree, bool);\n static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n+static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n const struct attribute_spec sparc_attribute_table[];\n@@ -437,10 +438,11 @@ static bool fpu_option_set = false;\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN sparc_expand_builtin\n \n-#ifdef HAVE_AS_TLS\n+#if TARGET_TLS\n #undef TARGET_HAVE_TLS\n #define TARGET_HAVE_TLS true\n #endif\n+\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM sparc_cannot_force_const_mem\n \n@@ -512,6 +514,11 @@ static bool fpu_option_set = false;\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION sparc_handle_option\n \n+#if TARGET_GNU_TLS\n+#undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n+#define TARGET_ASM_OUTPUT_DWARF_DTPREL sparc_output_dwarf_dtprel\n+#endif\n+\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END sparc_file_end\n \n@@ -8451,10 +8458,10 @@ sparc_dwarf_handle_frame_unspec (const char *label,\n   dwarf2out_window_save (label);\n }\n \n-/* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n+/* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n \n-void\n+static void\n sparc_output_dwarf_dtprel (FILE *file, int size, rtx x)\n {\n   switch (size)\n@@ -8472,8 +8479,10 @@ sparc_output_dwarf_dtprel (FILE *file, int size, rtx x)\n   fputs (\")\", file);\n }\n \n-static\n-void sparc_file_end (void)\n+/* Do whatever processing is required at the end of a file.  */\n+\n+static void\n+sparc_file_end (void)\n {\n   /* If we haven't emitted the special PIC helper function, do so now.  */\n   if (pic_helper_symbol_name[0] && !pic_helper_emitted_p)"}, {"sha": "73a64ca9463968bdf007f80684473a3e7bc8e36c", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -2349,13 +2349,6 @@ extern int sparc_indent_opcode;\n       }\t\t\t\t\t\\\n   } while (0)\n \n-/* Emit a dtp-relative reference to a TLS variable.  */\n-\n-#ifdef HAVE_AS_TLS\n-#define ASM_OUTPUT_DWARF_DTPREL(FILE, SIZE, X) \\\n-  sparc_output_dwarf_dtprel (FILE, SIZE, X)\n-#endif\n-\n #define SPARC_SYMBOL_REF_TLS_P(RTX) \\\n   (GET_CODE (RTX) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (RTX) != 0)\n \n@@ -2447,11 +2440,14 @@ extern int sparc_indent_opcode;\n     }\t\t\t\t\t\t\t\t\\\n }\n \n+/* TLS support defaulting to original Sun flavor.  GNU extensions\n+   must be activated in separate configuration files.  */\n #ifdef HAVE_AS_TLS\n #define TARGET_TLS 1\n #else\n #define TARGET_TLS 0\n #endif\n+\n #define TARGET_SUN_TLS TARGET_TLS\n #define TARGET_GNU_TLS 0\n "}, {"sha": "427a23ed5802b750cf753413012bb2b277442442", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -8140,6 +8140,11 @@ A C statement to issue assembly directives that create a self-relative\n reference to the given label, using an integer of the given size.\n @end defmac\n \n+@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_DWARF_DTPREL (FILE *@var{FILE}, int @var{size}, rtx @var{x})\n+If defined, this target hook is a function which outputs a DTP-relative\n+reference to the given TLS symbol of the specified size.\n+@end deftypefn\n+\n @defmac PUT_SDB_@dots{}\n Define these macros to override the assembler syntax for the special\n SDB assembler directives.  See @file{sdbout.c} for a list of these"}, {"sha": "bbd2b32bc5a45d48048632760f420a9feec607a8", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -3284,13 +3284,15 @@ output_loc_operands (dw_loc_descr_ref loc)\n       break;\n \n     case INTERNAL_DW_OP_tls_addr:\n-#ifdef ASM_OUTPUT_DWARF_DTPREL\n-      ASM_OUTPUT_DWARF_DTPREL (asm_out_file, DWARF2_ADDR_SIZE,\n-\t\t\t       val1->v.val_addr);\n-      fputc ('\\n', asm_out_file);\n-#else\n-      gcc_unreachable ();\n-#endif\n+      if (targetm.asm_out.output_dwarf_dtprel)\n+\t{\n+\t  targetm.asm_out.output_dwarf_dtprel (asm_out_file,\n+\t\t\t\t\t       DWARF2_ADDR_SIZE,\n+\t\t\t\t\t       val1->v.val_addr);\n+\t  fputc ('\\n', asm_out_file);\n+\t}\n+      else\n+\tgcc_unreachable ();\n       break;\n \n     default:\n@@ -8954,10 +8956,9 @@ loc_descriptor_from_tree_1 (tree loc, int want_address)\n \t{\n \t  rtx rtl;\n \n-#ifndef ASM_OUTPUT_DWARF_DTPREL\n \t  /* If this is not defined, we have no way to emit the data.  */\n-\t  return 0;\n-#endif\n+\t  if (!targetm.asm_out.output_dwarf_dtprel)\n+\t    return 0;\n \n \t  /* The way DW_OP_GNU_push_tls_address is specified, we can only\n \t     look up addresses of objects in the current module.  */"}, {"sha": "9969356b3addc925e46606e51e201a341c2ee1b9", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -692,7 +692,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tHANDLE_PRAGMA_REDEFINE_EXTNAME HANDLE_PRAGMA_EXTERN_PREFIX\t\\\n \tMUST_PASS_IN_STACK FUNCTION_ARG_PASS_BY_REFERENCE               \\\n         VECTOR_MODE_SUPPORTED_P TARGET_SUPPORTS_HIDDEN \t\t\t\\\n-\tFUNCTION_ARG_PARTIAL_NREGS\n+\tFUNCTION_ARG_PARTIAL_NREGS ASM_OUTPUT_DWARF_DTPREL\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "7d71aeafc4c1f9c7af2010148c8bc9ceec4fea61", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -191,6 +191,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_ASM_MARK_DECL_PRESERVED hook_void_constcharptr\n #endif\n \n+#ifndef TARGET_ASM_OUTPUT_DWARF_DTPREL\n+#define TARGET_ASM_OUTPUT_DWARF_DTPREL NULL\n+#endif\n+\n #define TARGET_ASM_ALIGNED_INT_OP\t\t\t\t\\\n \t\t       {TARGET_ASM_ALIGNED_HI_OP,\t\t\\\n \t\t\tTARGET_ASM_ALIGNED_SI_OP,\t\t\\\n@@ -232,7 +236,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n                         TARGET_ASM_FILE_START,                  \\\n                         TARGET_ASM_FILE_END,\t\t\t\\\n \t\t\tTARGET_ASM_EXTERNAL_LIBCALL,            \\\n-                        TARGET_ASM_MARK_DECL_PRESERVED}\n+                        TARGET_ASM_MARK_DECL_PRESERVED,\t\t\\\n+\t\t\tTARGET_ASM_OUTPUT_DWARF_DTPREL}\n \n /* Scheduler hooks.  All of these default to null pointers, which\n    haifa-sched.c looks for and handles.  */"}, {"sha": "0cdd82d034da40ba4f906c892bc9a3808d98a824", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbe66f28c4ec71d2ff03b7662350100481427ac/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=fdbe66f28c4ec71d2ff03b7662350100481427ac", "patch": "@@ -180,6 +180,9 @@ struct gcc_target\n \tlinker to not dead code strip this symbol.  */\n     void (*mark_decl_preserved) (const char *);\n \n+    /* Output a DTP-relative reference to a TLS symbol.  */\n+    void (*output_dwarf_dtprel) (FILE *file, int size, rtx x);\n+\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}]}