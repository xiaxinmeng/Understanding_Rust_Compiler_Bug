{"sha": "57e6d9be77b9865aa27ed97d90d700969062108b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlNmQ5YmU3N2I5ODY1YWEyN2VkOTdkOTBkNzAwOTY5MDYyMTA4Yg==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2015-06-12T09:49:41Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-06-12T09:49:41Z"}, "message": "Use atomics in guard.cc.\n\nThis provides proper definitions for _GLIBCXX_READ_MEM_BARRIER and\n_GLIBCXX_WRITE_MEM_BARRIER, rewrites the guards in terms of proper\natomic extensions and removes internal uses of\n_GLIBCXX_READ_MEM_BARRIER and _GLIBCXX_WRITE_MEM_BARRIER and replaces\nthem with equivalent atomics.\n\n2015-06-12  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR target/66200\n\tPR c++/66192\n\t* * config/cpu/generic/atomic_word.h (_GLIBCXX_READ_MEM_BARRIER): Define\n        (_GLIBCXX_WRITE_MEM_BARRIER): Likewise\n        * include/bits/shared_ptr_base.h: Use ACQ_REL barrier.\n        * include/ext/atomicity.h: Likewise.\n        * include/tr1/shared_ptr.h: Likewise.\n        * libsupc++/guard.cc (__test_and_acquire): Rewrite with atomics.\n        Update comment.\n        (__set_and_release): Likewise.\n        * testsuite/20_util/shared_ptr/cons/43820_neg.cc (test01): Adjust for\n\tline numbers.\n        * testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n        * testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc:\n\tLikewise.\n\nFrom-SVN: r224411", "tree": {"sha": "d887583d8ab96846a95ce8ef8d868305bb6c9962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d887583d8ab96846a95ce8ef8d868305bb6c9962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57e6d9be77b9865aa27ed97d90d700969062108b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e6d9be77b9865aa27ed97d90d700969062108b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e6d9be77b9865aa27ed97d90d700969062108b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e6d9be77b9865aa27ed97d90d700969062108b/comments", "author": null, "committer": null, "parents": [{"sha": "40ad260d6c729000531186ed0ae7f572f11052b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ad260d6c729000531186ed0ae7f572f11052b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ad260d6c729000531186ed0ae7f572f11052b6"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "444d24e068e18b95cffa7e06ca3309a5a5cda43e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -1,3 +1,21 @@\n+2015-06-12  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/66200\n+\tPR c++/66192\n+\t* * config/cpu/generic/atomic_word.h (_GLIBCXX_READ_MEM_BARRIER): Define\n+        (_GLIBCXX_WRITE_MEM_BARRIER): Likewise\n+        * include/bits/shared_ptr_base.h: Use ACQ_REL barrier.\n+        * include/ext/atomicity.h: Likewise.\n+        * include/tr1/shared_ptr.h: Likewise.\n+        * libsupc++/guard.cc (__test_and_acquire): Rewrite with atomics.\n+        Update comment.\n+        (__set_and_release): Likewise.\n+        * testsuite/20_util/shared_ptr/cons/43820_neg.cc (test01): Adjust for\n+\tline numbers.\n+        * testsuite/20_util/shared_ptr/cons/void_neg.cc: Likewise.\n+        * testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc:\n+\tLikewise.\n+\n 2015-06-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/tuple (__is_tuple_like_impl): Disambiguate array in"}, {"sha": "ccf1e5a5ab167653fadf411b61155dc61ee03dff", "filename": "libstdc++-v3/config/cpu/generic/atomic_word.h", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fgeneric%2Fatomic_word.h?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -31,17 +31,10 @@\n \n typedef int _Atomic_word;\n \n-// Define these two macros using the appropriate memory barrier for the target.\n-// The commented out versions below are the defaults.\n-// See ia64/atomic_word.h for an alternative approach.\n-\n-// This one prevents loads from being hoisted across the barrier;\n-// in other words, this is a Load-Load acquire barrier.\n-// This is necessary iff TARGET_RELAXED_ORDERING is defined in tm.h.  \n-// #define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n-\n-// This one prevents stores from being sunk across the barrier; in other\n-// words, a Store-Store release barrier.\n-// #define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n+\n+// This is a memory order acquire fence.\n+#define _GLIBCXX_READ_MEM_BARRIER __atomic_thread_fence (__ATOMIC_ACQUIRE)\n+// This is a memory order release fence.\n+#define _GLIBCXX_WRITE_MEM_BARRIER __atomic_thread_fence (__ATOMIC_RELEASE)\n \n #endif "}, {"sha": "aec10fecdbf52a013bca57546d6ee9fca13cc989", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -154,8 +154,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    // See http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html\n \t    if (_Mutex_base<_Lp>::_S_need_barriers)\n \t      {\n-\t        _GLIBCXX_READ_MEM_BARRIER;\n-\t        _GLIBCXX_WRITE_MEM_BARRIER;\n+\t\t__atomic_thread_fence (__ATOMIC_ACQ_REL);\n \t      }\n \n             // Be race-detector-friendly.  For more info see bits/c++config.\n@@ -185,8 +184,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      {\n \t        // See _M_release(),\n \t        // destroy() must observe results of dispose()\n-\t        _GLIBCXX_READ_MEM_BARRIER;\n-\t        _GLIBCXX_WRITE_MEM_BARRIER;\n+\t\t__atomic_thread_fence (__ATOMIC_ACQ_REL);\n \t      }\n \t    _M_destroy();\n \t  }"}, {"sha": "6d32cc48b4ad16f8d137d4c35efcdf14c1137629", "filename": "libstdc++-v3/include/ext/atomicity.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fatomicity.h?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -108,10 +108,10 @@ _GLIBCXX_END_NAMESPACE_VERSION\n // that the compiler doesn't reorder memory accesses across the\n // barriers.\n #ifndef _GLIBCXX_READ_MEM_BARRIER\n-#define _GLIBCXX_READ_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n+#define _GLIBCXX_READ_MEM_BARRIER __atomic_thread_fence (__ATOMIC_ACQUIRE)\n #endif\n #ifndef _GLIBCXX_WRITE_MEM_BARRIER\n-#define _GLIBCXX_WRITE_MEM_BARRIER __asm __volatile (\"\":::\"memory\")\n+#define _GLIBCXX_WRITE_MEM_BARRIER __atomic_thread_fence (__ATOMIC_RELEASE)\n #endif\n \n #endif "}, {"sha": "a1c7d720307aefe279eec425baf36727070e72e5", "filename": "libstdc++-v3/include/tr1/shared_ptr.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fshared_ptr.h?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -145,8 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    // See http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html\n \t    if (_Mutex_base<_Lp>::_S_need_barriers)\n \t      {\n-\t        _GLIBCXX_READ_MEM_BARRIER;\n-\t        _GLIBCXX_WRITE_MEM_BARRIER;\n+\t\t__atomic_thread_fence (__ATOMIC_ACQ_REL);\n \t      }\n \n             // Be race-detector-friendly.  For more info see bits/c++config.\n@@ -176,8 +175,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      {\n \t        // See _M_release(),\n \t        // destroy() must observe results of dispose()\n-\t        _GLIBCXX_READ_MEM_BARRIER;\n-\t        _GLIBCXX_WRITE_MEM_BARRIER;\n+\t\t__atomic_thread_fence (__ATOMIC_ACQ_REL);\n \t      }\n \t    _M_destroy();\n \t  }"}, {"sha": "4a2cfe938a9d0dc3e1c1c4cc44b42a576ede041e", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -107,22 +107,31 @@ namespace\n # endif\n \n # ifndef _GLIBCXX_GUARD_TEST_AND_ACQUIRE\n+\n+// Test the guard variable with a memory load with\n+// acquire semantics.\n+\n inline bool\n __test_and_acquire (__cxxabiv1::__guard *g)\n {\n-  bool b = _GLIBCXX_GUARD_TEST (g);\n-  _GLIBCXX_READ_MEM_BARRIER;\n-  return b;\n+  unsigned char __c;\n+  unsigned char *__p = reinterpret_cast<unsigned char *>(g);\n+  __atomic_load (__p, &__c,  __ATOMIC_ACQUIRE);\n+  return _GLIBCXX_GUARD_TEST(&__c);\n }\n #  define _GLIBCXX_GUARD_TEST_AND_ACQUIRE(G) __test_and_acquire (G)\n # endif\n \n # ifndef _GLIBCXX_GUARD_SET_AND_RELEASE\n+\n+// Set the guard variable to 1 with memory order release semantics.\n+\n inline void\n __set_and_release (__cxxabiv1::__guard *g)\n {\n-  _GLIBCXX_WRITE_MEM_BARRIER;\n-  _GLIBCXX_GUARD_SET (g);\n+  unsigned char *__p = reinterpret_cast<unsigned char *>(g);\n+  unsigned char val = 1;\n+  __atomic_store (__p, &val, __ATOMIC_RELEASE);\n }\n #  define _GLIBCXX_GUARD_SET_AND_RELEASE(G) __set_and_release (G)\n # endif"}, {"sha": "fdfb7d93a72966d12a0aff11d6e8b5efca15cfaa", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -32,7 +32,7 @@ void test01()\n {\n   X* px = 0;\n   std::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 891 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 889 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 307 }"}, {"sha": "10074c149fa8a268e233ef0252d8479557b677c4", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -25,5 +25,5 @@\n void test01()\n {\n   std::shared_ptr<void> p((void*)nullptr);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 890 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 888 }\n }"}, {"sha": "3f44eb7292d3363377a80c485c42c0d1f96fcd0e", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/shared_ptr/cons/43820_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e6d9be77b9865aa27ed97d90d700969062108b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fshared_ptr%2Fcons%2F43820_neg.cc?ref=57e6d9be77b9865aa27ed97d90d700969062108b", "patch": "@@ -32,8 +32,8 @@ void test01()\n {\n   X* px = 0;\n   std::tr1::shared_ptr<X> p1(px);   // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 556 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 554 }\n \n   std::tr1::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 595 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 593 }\n }"}]}