{"sha": "914a3b8c0eec767f0c634442d84b977ef5d5bdc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE0YTNiOGMwZWVjNzY3ZjBjNjM0NDQyZDg0Yjk3N2VmNWQ1YmRjMw==", "commit": {"author": {"name": "Dmitri Makarov", "email": "dim@wrs.com", "date": "2000-02-11T22:39:49Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-02-11T22:39:49Z"}, "message": "Minor formatting tidyups.\n\nFrom-SVN: r31936", "tree": {"sha": "d6065b49ce8669dbe1435a99e781e357c1ff12d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6065b49ce8669dbe1435a99e781e357c1ff12d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/914a3b8c0eec767f0c634442d84b977ef5d5bdc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914a3b8c0eec767f0c634442d84b977ef5d5bdc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914a3b8c0eec767f0c634442d84b977ef5d5bdc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/comments", "author": null, "committer": null, "parents": [{"sha": "90e7678cd53b837759f9b0ecfbbd9b1cc33827dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e7678cd53b837759f9b0ecfbbd9b1cc33827dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e7678cd53b837759f9b0ecfbbd9b1cc33827dc"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "8799dbaa6753b7880fef655dcb31b9785d0baa7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=914a3b8c0eec767f0c634442d84b977ef5d5bdc3", "patch": "@@ -1,3 +1,46 @@\n+2000-02-07  Dmitri Makarov  <dim@wrs.com> & Bernd Schmidt <bernds@redhat.com>\n+\n+\t* config/arm/arm.c (arm_init_cumulative_args); New function:\n+\tInitlaise the CUMULATIE_ARGS strcuture for a function\n+\tdefintion. \n+\t(arm_function_arg): New function: Determine where to place a\n+\tfunction's argument.  Also handles deciding the function's\n+\tcall cookie.\n+\t(current_file_function_operand): New function: Return true if\n+\tthe symbol is a function which has already been compiled.\n+\t(arm_is_long_call_p): New function: Return true if the\n+\tindicated function should be called via a long call.\n+\t(arm_valid_type_attribute_p): New function: Return true if the\n+\tattribute is a valid, arm specific, attribute.\n+\t(arm_comp_type_attribute): New function: Return true if the\n+\ttwo types have compatable, arm specific, attributes.\n+\n+\t* config/arm/arm.h (CUMULATIVE_ARGS): Redefine to be a\n+        structure.\n+\t(FUNCTION_ARG): Redefine to call arm_function_arg.\n+\t(FUNCTION_ARG_PARTIAL_NREGS): Redefine to use correct\n+        structure field.\n+\t(INIT_CUMULATIVE_ARGS): Redefine to call\n+        arm_init_cumulative_args.\n+\t(FUNCTION_ARG_ADVANCE): Redefine to use correct structure\n+        field. \n+\t(SETUP_INCOMING_VARARGS): Redefine to use correct structure \n+        field. \n+\t(ARM_MARK_NEARBY_FUNCTION): New macro: Mark already compiled\n+        functions.\n+\t(ENCODE_SECTION): Add call to ARM_MARK_NEARBY_FUNCTION.\n+\t(VALID_MACHINE_TYPE_ATTRIBUTE): Define.\n+\t(COMP_TYPE_ATTRIBUTES): Define.\n+\n+\t* config/arm/arm.md (call): Call arm_is_long_call_p to decide\n+        if a long call is needed.\n+\t(call_value): Call arm_is_long_call_p to decide if a long call\n+        is needed.\n+\t(call_symbol): Call arm_is_long_call_p to decide if a long call\n+        is needed.\n+\n+\t* config/arm/arm-protos.h: Add prototype for arm_is_long_call_p.\n+\n 2000-02-11  Denis Chertykov  <denisc@overta.ru>\n \n \t* README.AVR: New file with information about the avr ports."}, {"sha": "9a5df7101480069ea5ecf876317033b7102c11f0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=914a3b8c0eec767f0c634442d84b977ef5d5bdc3", "patch": "@@ -1,5 +1,5 @@\n /* Output routines for GCC for ARM.\n-   Copyright (C) 1991, 93-99, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com).\n@@ -1134,7 +1134,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       /* See if two shifts will do 2 or more insn's worth of work.  */\n       if (clear_sign_bit_copies >= 16 && clear_sign_bit_copies < 24)\n \t{\n-\t  HOST_WIDE_INT shift_mask = ((0xffffffffUL \n+\t  HOST_WIDE_INT shift_mask = ((0xffffffffUL\n \t\t\t\t       << (32 - clear_sign_bit_copies))\n \t\t\t\t      & 0xffffffffUL);\n \n@@ -1536,14 +1536,16 @@ arm_function_arg (pcum, mode, type, named)\n }\n \n \f\n-/* Return 1 if the operand is a SYMBOL_REF for a function known to be in\n-   this file.  */\n+/* Return 1 if the operand is a SYMBOL_REF for a function\n+   known to be defined in the current compilation unit.  */\n static int\n current_file_function_operand (sym_ref)\n   rtx sym_ref;\n {\n-  return (SYMBOL_REF_FLAG (sym_ref)\n-\t  || sym_ref == XEXP (DECL_RTL (current_function_decl), 0));\n+  /* XXX FIXME - we need some way to determine if SYMREF has already been\n+     compiled.  We wanted to used SYMBOL_REF_FLAG but this is already in use\n+     by the constant pool generation code.  */\n+  return sym_ref == XEXP (DECL_RTL (current_function_decl), 0);\n }\n \n /* Return non-zero if a 32 bit \"long call\" should be generated for this\n@@ -6141,7 +6143,7 @@ output_func_epilogue (frame_size)\n   if (use_return_insn (FALSE) && return_used_this_function\n       && (frame_size + current_function_outgoing_args_size) != 0\n       && ! (frame_pointer_needed && TARGET_APCS))\n-\tabort ();\n+    abort ();\n \n   /* Reset the ARM-specific per-function variables.  */\n   current_function_anonymous_args = 0;\n@@ -6827,7 +6829,7 @@ arm_final_prescan_insn (insn)\n \n \t    case CALL_INSN:\n \t      /* If using 32-bit addresses the cc is not preserved over\n-\t\t calls */\n+\t\t calls.  */\n \t      if (TARGET_APCS_32)\n \t\t{\n \t\t  /* Succeed if the following insn is the target label,\n@@ -6858,7 +6860,7 @@ arm_final_prescan_insn (insn)\n       \t      /* If this is an unconditional branch to the same label, succeed.\n \t\t If it is to another label, do nothing.  If it is conditional,\n \t\t fail.  */\n-\t      /* XXX Probably, the tests for SET and the PC are unnecessary. */\n+\t      /* XXX Probably, the tests for SET and the PC are unnecessary.  */\n \n \t      scanbody = PATTERN (this_insn);\n \t      if (GET_CODE (scanbody) == SET"}, {"sha": "1a27a74159b70e9edb7a77aa070191dad7ee3b5b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=914a3b8c0eec767f0c634442d84b977ef5d5bdc3", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for ARM.\n-   Copyright (C) 1991, 93, 94, 05, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com)\n@@ -242,7 +242,10 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n   { \"subtarget_cpp_spec\",\tSUBTARGET_CPP_SPEC },           \\\n   SUBTARGET_EXTRA_SPECS\n \n+#ifndef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\n+#endif\n+\n #ifndef SUBTARGET_CPP_SPEC\n #define SUBTARGET_CPP_SPEC      \"\"\n #endif\n@@ -486,7 +489,7 @@ extern int arm_is_6_or_7;\n \n /* The frame pointer register used in gcc has nothing to do with debugging;\n    that is controlled by the APCS-FRAME option.  */\n-/* Not fully implemented yet */\n+/* Not fully implemented yet.  */\n /* #define CAN_DEBUG_WITHOUT_FP 1 */\n \n #define TARGET_MEM_FUNCTIONS 1"}, {"sha": "b1e1f34d3026f3c63f85d439efebecbaee89f107", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/914a3b8c0eec767f0c634442d84b977ef5d5bdc3/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=914a3b8c0eec767f0c634442d84b977ef5d5bdc3", "patch": "@@ -2935,6 +2935,7 @@\n \t\t\t   : preserve_subexpressions_p ()));\n       DONE;\n     }\n+    \n   if (flag_pic\n       && (CONSTANT_P (operands[1])\n \t || symbol_mentioned_p (operands[1])"}]}