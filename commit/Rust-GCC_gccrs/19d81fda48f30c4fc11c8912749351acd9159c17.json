{"sha": "19d81fda48f30c4fc11c8912749351acd9159c17", "node_id": "C_kwDOANBUbNoAKDE5ZDgxZmRhNDhmMzBjNGZjMTFjODkxMjc0OTM1MWFjZDkxNTljMTc", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-12-13T05:17:13Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2022-01-11T09:20:43Z"}, "message": "rs6000: powerpc suboptimal boolean test of contiguous bits [PR102239]\n\nAdd specialized version to combine two instructions from\n\n 9: {r123:CC=cmp(r124:DI&0x600000000,0);clobber scratch;}\n       REG_DEAD r124:DI\n 10: pc={(r123:CC==0)?L15:pc}\n      REG_DEAD r123:CC\n\nto:\n\n 10: {pc={(r123:DI&0x600000000==0)?L15:pc};clobber scratch;clobber %0:CC;}\n\nthen split2 will split it to one rotate dot instruction (to save one\nrotate back instruction) as shifted result doesn't matter when comparing\nto 0 in CCEQmode.\n\nBootstrapped and regression tested pass on Power 8/9/10.\n\ngcc/ChangeLog:\n\n\tPR target/102239\n\t* config/rs6000/rs6000-protos.h (rs6000_is_valid_rotate_dot_mask): New\n\tdeclare.\n\t* config/rs6000/rs6000.c (rs6000_is_valid_rotate_dot_mask): New\n\tfunction.\n\t* config/rs6000/rs6000.md (*branch_anddi3_dot): New.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/102239\n\t* gcc.target/powerpc/pr102239.c: New test.", "tree": {"sha": "3715827fd18e96c63b6f582684880e9a7de4d183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3715827fd18e96c63b6f582684880e9a7de4d183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19d81fda48f30c4fc11c8912749351acd9159c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d81fda48f30c4fc11c8912749351acd9159c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d81fda48f30c4fc11c8912749351acd9159c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d81fda48f30c4fc11c8912749351acd9159c17/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e86086bd33134467cc9c2a75327d1238dc71df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e86086bd33134467cc9c2a75327d1238dc71df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e86086bd33134467cc9c2a75327d1238dc71df9"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "1d1c89cd40615d186900cd626b50dd63eced1f44", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d81fda48f30c4fc11c8912749351acd9159c17/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d81fda48f30c4fc11c8912749351acd9159c17/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=19d81fda48f30c4fc11c8912749351acd9159c17", "patch": "@@ -73,6 +73,7 @@ extern int expand_block_move (rtx[], bool);\n extern bool expand_block_compare (rtx[]);\n extern bool expand_strn_compare (rtx[], int);\n extern bool rs6000_is_valid_mask (rtx, int *, int *, machine_mode);\n+extern bool rs6000_is_valid_rotate_dot_mask (rtx mask, machine_mode mode);\n extern bool rs6000_is_valid_and_mask (rtx, machine_mode);\n extern bool rs6000_is_valid_shift_mask (rtx, rtx, machine_mode);\n extern bool rs6000_is_valid_insert_mask (rtx, rtx, machine_mode);"}, {"sha": "e7b5b2c5a7d678350cc47e42a95c3fb9eb631ac9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d81fda48f30c4fc11c8912749351acd9159c17/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d81fda48f30c4fc11c8912749351acd9159c17/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=19d81fda48f30c4fc11c8912749351acd9159c17", "patch": "@@ -11394,6 +11394,13 @@ rs6000_is_valid_mask (rtx mask, int *b, int *e, machine_mode mode)\n   return true;\n }\n \n+bool\n+rs6000_is_valid_rotate_dot_mask (rtx mask, machine_mode mode)\n+{\n+  int nb, ne;\n+  return rs6000_is_valid_mask (mask, &nb, &ne, mode) && nb >= ne && ne > 0;\n+}\n+\n /* Return whether MASK (a CONST_INT) is a valid mask for any rlwinm, rldicl,\n    or rldicr instruction, to implement an AND with it in mode MODE.  */\n "}, {"sha": "6f74075f58d87da54aeec0a5b1dbfd55ed58804e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d81fda48f30c4fc11c8912749351acd9159c17/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d81fda48f30c4fc11c8912749351acd9159c17/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=19d81fda48f30c4fc11c8912749351acd9159c17", "patch": "@@ -3767,6 +3767,44 @@\n    (set_attr \"dot\" \"yes\")\n    (set_attr \"length\" \"8,12\")])\n \n+(define_insn_and_split \"*branch_anddi3_dot\"\n+ [(set (pc)\n+    (if_then_else (eq (and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t      (match_operand:DI 2 \"const_int_operand\" \"n,n\"))\n+\t\t      (const_int 0))\n+\t\t  (label_ref (match_operand 3 \"\"))\n+\t\t  (pc)))\n+  (clobber (match_scratch:DI 0 \"=r,r\"))\n+  (clobber (reg:CC CR0_REGNO))]\n+  \"rs6000_is_valid_rotate_dot_mask (operands[2], DImode)\n+  && TARGET_POWERPC64\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(pc)]\n+{\n+   int nb, ne;\n+   if (rs6000_is_valid_mask (operands[2], &nb, &ne, DImode)\n+       && nb >= ne\n+       && ne > 0)\n+     {\n+\tunsigned HOST_WIDE_INT val = INTVAL (operands[2]);\n+\tint shift = 63 - nb;\n+\trtx tmp = gen_rtx_ASHIFT (DImode, operands[1], GEN_INT (shift));\n+\ttmp = gen_rtx_AND (DImode, tmp, GEN_INT (val << shift));\n+\trtx cr0 = gen_rtx_REG (CCmode, CR0_REGNO);\n+\trs6000_emit_dot_insn (operands[0], tmp, 1, cr0);\n+\trtx loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands[3]);\n+\trtx cond = gen_rtx_EQ (CCEQmode, cr0, const0_rtx);\n+\trtx ite = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, loc_ref, pc_rtx);\n+\temit_jump_insn (gen_rtx_SET (pc_rtx, ite));\n+\tDONE;\n+     }\n+   else\n+     FAIL;\n+}\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"dot\" \"yes\")\n+   (set_attr \"length\" \"8,12\")])\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:SDI 0 \"gpc_reg_operand\")"}, {"sha": "2ff72b7decaa6f0017c530f9a8cad3cdb7c2aab0", "filename": "gcc/testsuite/gcc.target/powerpc/pr102239.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19d81fda48f30c4fc11c8912749351acd9159c17/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102239.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19d81fda48f30c4fc11c8912749351acd9159c17/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102239.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr102239.c?ref=19d81fda48f30c4fc11c8912749351acd9159c17", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+\n+void foo(long arg)\n+{\n+  if (arg & ((1UL << 33) | (1UL << 34)))\n+    asm volatile(\"# if\");\n+  else\n+    asm volatile(\"# else\");\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mrldicr\\.} 1 } } */"}]}