{"sha": "9fc9573f9a5e9432e53c7de93985cfbd267f0309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjOTU3M2Y5YTVlOTQzMmU1M2M3ZGU5Mzk4NWNmYmQyNjdmMDMwOQ==", "commit": {"author": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2020-11-19T10:39:38Z"}, "committer": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2020-11-19T11:49:59Z"}, "message": "[2/3] [vect] Add widening add, subtract patterns\n\nAdd widening add, subtract patterns to tree-vect-patterns. Update the\nwidened code of patterns that detect PLUS_EXPR to also detect\nWIDEN_PLUS_EXPR. These patterns take 2 vectors with N elements of size\nS and perform an add/subtract on the elements, storing the results as N\nelements of size 2*S (in 2 result vectors). This is implemented in the\naarch64 backend as addl,addl2 and subl,subl2 respectively. Add aarch64\ntests for patterns.\n\ngcc/ChangeLog:\n\t* doc/generic.texi: Document new widen_plus/minus_lo/hi tree codes.\n\t* doc/md.texi: Document new widenening add/subtract hi/lo optabs.\n\t* expr.c (expand_expr_real_2): Add widen_add, widen_subtract cases.\n\t* optabs-tree.c (optab_for_tree_code): Add case for widening optabs.\n\t* optabs.def (OPTAB_D): Define vectorized widen add, subtracts.\n\t* tree-cfg.c (verify_gimple_assign_binary): Add case for widening adds,\n\tsubtracts.\n\t* tree-inline.c (estimate_operator_cost): Add case for widening adds,\n\tsubtracts.\n\t* tree-vect-generic.c (expand_vector_operations_1): Add case for\n\twidening adds, subtracts\n\t* tree-vect-patterns.c (vect_recog_widen_add_pattern): New recog\n\tpattern.\n\t(vect_recog_widen_sub_pattern): New recog pattern.\n\t(vect_recog_average_pattern): Update widened add code.\n\t(vect_recog_average_pattern): Update widened add code.\n\t* tree-vect-stmts.c (vectorizable_conversion): Add case for widened add,\n\tsubtract.\n\t(supportable_widening_operation): Add case for widened add, subtract.\n\t* tree.def\n\t(WIDEN_PLUS_EXPR): New tree code.\n\t(WIDEN_MINUS_EXPR): New tree code.\n\t(VEC_WIDEN_ADD_HI_EXPR): New tree code.\n\t(VEC_WIDEN_PLUS_LO_EXPR): New tree code.\n\t(VEC_WIDEN_MINUS_HI_EXPR): New tree code.\n\t(VEC_WIDEN_MINUS_LO_EXPR): New tree code.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vect-widen-add.c: New test.\n\t* gcc.target/aarch64/vect-widen-sub.c: New test.", "tree": {"sha": "036540bd548fffd4f3330fdd8e35940b1acda558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/036540bd548fffd4f3330fdd8e35940b1acda558"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc9573f9a5e9432e53c7de93985cfbd267f0309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc9573f9a5e9432e53c7de93985cfbd267f0309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc9573f9a5e9432e53c7de93985cfbd267f0309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc9573f9a5e9432e53c7de93985cfbd267f0309/comments", "author": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec46904edfec162f32b8b411301374afc8f5fcb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec46904edfec162f32b8b411301374afc8f5fcb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec46904edfec162f32b8b411301374afc8f5fcb5"}], "stats": {"total": 335, "additions": 331, "deletions": 4}, "files": [{"sha": "9791f8b675a84be2c37b6f18b5c1313302ea55e3", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -1798,6 +1798,10 @@ a value from @code{enum annot_expr_kind}, the third is an @code{INTEGER_CST}.\n @tindex VEC_RSHIFT_EXPR\n @tindex VEC_WIDEN_MULT_HI_EXPR\n @tindex VEC_WIDEN_MULT_LO_EXPR\n+@tindex VEC_WIDEN_PLUS_HI_EXPR\n+@tindex VEC_WIDEN_PLUS_LO_EXPR\n+@tindex VEC_WIDEN_MINUS_HI_EXPR\n+@tindex VEC_WIDEN_MINUS_LO_EXPR\n @tindex VEC_UNPACK_HI_EXPR\n @tindex VEC_UNPACK_LO_EXPR\n @tindex VEC_UNPACK_FLOAT_HI_EXPR\n@@ -1844,6 +1848,33 @@ vector of @code{N/2} products. In the case of @code{VEC_WIDEN_MULT_LO_EXPR} the\n low @code{N/2} elements of the two vector are multiplied to produce the\n vector of @code{N/2} products.\n \n+@item VEC_WIDEN_PLUS_HI_EXPR\n+@itemx VEC_WIDEN_PLUS_LO_EXPR\n+These nodes represent widening vector addition of the high and low parts of\n+the two input vectors, respectively.  Their operands are vectors that contain\n+the same number of elements (@code{N}) of the same integral type. The result\n+is a vector that contains half as many elements, of an integral type whose size\n+is twice as wide.  In the case of @code{VEC_WIDEN_PLUS_HI_EXPR} the high\n+@code{N/2} elements of the two vectors are added to produce the vector of\n+@code{N/2} products.  In the case of @code{VEC_WIDEN_PLUS_LO_EXPR} the low\n+@code{N/2} elements of the two vectors are added to produce the vector of\n+@code{N/2} products.\n+\n+@item VEC_WIDEN_MINUS_HI_EXPR\n+@itemx VEC_WIDEN_MINUS_LO_EXPR\n+These nodes represent widening vector subtraction of the high and low parts of\n+the two input vectors, respectively.  Their operands are vectors that contain\n+the same number of elements (@code{N}) of the same integral type. The high/low\n+elements of the second vector are subtracted from the high/low elements of the\n+first. The result is a vector that contains half as many elements, of an\n+integral type whose size is twice as wide.  In the case of\n+@code{VEC_WIDEN_MINUS_HI_EXPR} the high @code{N/2} elements of the second\n+vector are subtracted from the high @code{N/2} of the first to produce the\n+vector of @code{N/2} products.  In the case of\n+@code{VEC_WIDEN_MINUS_LO_EXPR} the low @code{N/2} elements of the second\n+vector are subtracted from the low @code{N/2} of the first to produce the\n+vector of @code{N/2} products.\n+\n @item VEC_UNPACK_HI_EXPR\n @itemx VEC_UNPACK_LO_EXPR\n These nodes represent unpacking of the high and low parts of the input vector,"}, {"sha": "da8c9a283dd42e2b3078ed5f370a37180ee0b538", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -5626,6 +5626,28 @@ with N signed/unsigned elements of size S@.  Operand 2 is a constant.  Shift\n the high/low elements of operand 1, and put the N/2 results of size 2*S in the\n output vector (operand 0).\n \n+@cindex @code{vec_widen_saddl_hi_@var{m}} instruction pattern\n+@cindex @code{vec_widen_saddl_lo_@var{m}} instruction pattern\n+@cindex @code{vec_widen_uaddl_hi_@var{m}} instruction pattern\n+@cindex @code{vec_widen_uaddl_lo_@var{m}} instruction pattern\n+@item @samp{vec_widen_uaddl_hi_@var{m}}, @samp{vec_widen_uaddl_lo_@var{m}}\n+@itemx @samp{vec_widen_saddl_hi_@var{m}}, @samp{vec_widen_saddl_lo_@var{m}}\n+Signed/Unsigned widening add long.  Operands 1 and 2 are vectors with N\n+signed/unsigned elements of size S@.  Add the high/low elements of 1 and 2\n+together, widen the resulting elements and put the N/2 results of size 2*S in\n+the output vector (operand 0).\n+\n+@cindex @code{vec_widen_ssubl_hi_@var{m}} instruction pattern\n+@cindex @code{vec_widen_ssubl_lo_@var{m}} instruction pattern\n+@cindex @code{vec_widen_usubl_hi_@var{m}} instruction pattern\n+@cindex @code{vec_widen_usubl_lo_@var{m}} instruction pattern\n+@item @samp{vec_widen_usubl_hi_@var{m}}, @samp{vec_widen_usubl_lo_@var{m}}\n+@itemx @samp{vec_widen_ssubl_hi_@var{m}}, @samp{vec_widen_ssubl_lo_@var{m}}\n+Signed/Unsigned widening subtract long.  Operands 1 and 2 are vectors with N\n+signed/unsigned elements of size S@.  Subtract the high/low elements of 2 from\n+1 and widen the resulting elements. Put the N/2 results of size 2*S in the\n+output vector (operand 0).\n+\n @cindex @code{mulhisi3} instruction pattern\n @item @samp{mulhisi3}\n Multiply operands 1 and 2, which have mode @code{HImode}, and store"}, {"sha": "83aa63c41b57c676ea5c3449152bed91d10fae64", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -9034,6 +9034,8 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t\t\t\t  target, unsignedp);\n       return target;\n \n+    case WIDEN_PLUS_EXPR:\n+    case WIDEN_MINUS_EXPR:\n     case WIDEN_MULT_EXPR:\n       /* If first operand is constant, swap them.\n \t Thus the following special case checks need only\n@@ -9754,6 +9756,10 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \treturn temp;\n       }\n \n+    case VEC_WIDEN_PLUS_HI_EXPR:\n+    case VEC_WIDEN_PLUS_LO_EXPR:\n+    case VEC_WIDEN_MINUS_HI_EXPR:\n+    case VEC_WIDEN_MINUS_LO_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n     case VEC_WIDEN_MULT_EVEN_EXPR:"}, {"sha": "b797d018c84e2f55a683b786f855b018c2549d24", "filename": "gcc/optabs-tree.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Foptabs-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Foptabs-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-tree.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -170,6 +170,22 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n       return (TYPE_UNSIGNED (type)\n \t      ? vec_widen_ushiftl_lo_optab : vec_widen_sshiftl_lo_optab);\n \n+    case VEC_WIDEN_PLUS_LO_EXPR:\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_uaddl_lo_optab : vec_widen_saddl_lo_optab);\n+\n+    case VEC_WIDEN_PLUS_HI_EXPR:\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_uaddl_hi_optab : vec_widen_saddl_hi_optab);\n+\n+    case VEC_WIDEN_MINUS_LO_EXPR:\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_usubl_lo_optab : vec_widen_ssubl_lo_optab);\n+\n+    case VEC_WIDEN_MINUS_HI_EXPR:\n+      return (TYPE_UNSIGNED (type)\n+\t      ? vec_widen_usubl_hi_optab : vec_widen_ssubl_hi_optab);\n+\n     case VEC_UNPACK_HI_EXPR:\n       return (TYPE_UNSIGNED (type)\n \t      ? vec_unpacku_hi_optab : vec_unpacks_hi_optab);"}, {"sha": "5607f51e6b4b775a92d1d8ffcd3e9b53e9270d6c", "filename": "gcc/optabs.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Foptabs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Foptabs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.def?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -383,6 +383,10 @@ OPTAB_D (vec_widen_smult_even_optab, \"vec_widen_smult_even_$a\")\n OPTAB_D (vec_widen_smult_hi_optab, \"vec_widen_smult_hi_$a\")\n OPTAB_D (vec_widen_smult_lo_optab, \"vec_widen_smult_lo_$a\")\n OPTAB_D (vec_widen_smult_odd_optab, \"vec_widen_smult_odd_$a\")\n+OPTAB_D (vec_widen_ssubl_hi_optab, \"vec_widen_ssubl_hi_$a\")\n+OPTAB_D (vec_widen_ssubl_lo_optab, \"vec_widen_ssubl_lo_$a\")\n+OPTAB_D (vec_widen_saddl_hi_optab, \"vec_widen_saddl_hi_$a\")\n+OPTAB_D (vec_widen_saddl_lo_optab, \"vec_widen_saddl_lo_$a\")\n OPTAB_D (vec_widen_sshiftl_hi_optab, \"vec_widen_sshiftl_hi_$a\")\n OPTAB_D (vec_widen_sshiftl_lo_optab, \"vec_widen_sshiftl_lo_$a\")\n OPTAB_D (vec_widen_umult_even_optab, \"vec_widen_umult_even_$a\")\n@@ -391,6 +395,10 @@ OPTAB_D (vec_widen_umult_lo_optab, \"vec_widen_umult_lo_$a\")\n OPTAB_D (vec_widen_umult_odd_optab, \"vec_widen_umult_odd_$a\")\n OPTAB_D (vec_widen_ushiftl_hi_optab, \"vec_widen_ushiftl_hi_$a\")\n OPTAB_D (vec_widen_ushiftl_lo_optab, \"vec_widen_ushiftl_lo_$a\")\n+OPTAB_D (vec_widen_usubl_hi_optab, \"vec_widen_usubl_hi_$a\")\n+OPTAB_D (vec_widen_usubl_lo_optab, \"vec_widen_usubl_lo_$a\")\n+OPTAB_D (vec_widen_uaddl_hi_optab, \"vec_widen_uaddl_hi_$a\")\n+OPTAB_D (vec_widen_uaddl_lo_optab, \"vec_widen_uaddl_lo_$a\")\n \n OPTAB_D (sync_add_optab, \"sync_add$I$a\")\n OPTAB_D (sync_and_optab, \"sync_and$I$a\")"}, {"sha": "220bd9352a4c7acd2e3713e441d74898d3e92b30", "filename": "gcc/testsuite/gcc.target/aarch64/vect-widen-add.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-add.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-add.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-add.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps\" } */\n+#include <stdint.h>\n+#include <string.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+#define ARR_SIZE 1024\n+\n+/* Should produce an uaddl */\n+void uadd_opt (uint32_t *foo, uint16_t *a, uint16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   + b[i];\n+        foo[i+1] = a[i+1] + b[i+1];\n+        foo[i+2] = a[i+2] + b[i+2];\n+        foo[i+3] = a[i+3] + b[i+3];\n+    }\n+}\n+\n+__attribute__((optimize (0)))\n+void uadd_nonopt (uint32_t *foo, uint16_t *a, uint16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   + b[i];\n+        foo[i+1] = a[i+1] + b[i+1];\n+        foo[i+2] = a[i+2] + b[i+2];\n+        foo[i+3] = a[i+3] + b[i+3];\n+    }\n+}\n+\n+/* Should produce an saddl */\n+void sadd_opt (int32_t *foo, int16_t *a, int16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   + b[i];\n+        foo[i+1] = a[i+1] + b[i+1];\n+        foo[i+2] = a[i+2] + b[i+2];\n+        foo[i+3] = a[i+3] + b[i+3];\n+    }\n+}\n+\n+__attribute__((optimize (0)))\n+void sadd_nonopt (int32_t *foo, int16_t *a, int16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   + b[i];\n+        foo[i+1] = a[i+1] + b[i+1];\n+        foo[i+2] = a[i+2] + b[i+2];\n+        foo[i+3] = a[i+3] + b[i+3];\n+    }\n+}\n+\n+\n+void __attribute__((optimize (0)))\n+init(uint16_t *a, uint16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE;i++)\n+    {\n+      a[i] = i;\n+      b[i] = 2*i;\n+    }\n+}\n+\n+int __attribute__((optimize (0)))\n+main()\n+{\n+    uint32_t foo_arr[ARR_SIZE];\n+    uint32_t bar_arr[ARR_SIZE];\n+    uint16_t a[ARR_SIZE];\n+    uint16_t b[ARR_SIZE];\n+\n+    init(a, b);\n+    uadd_opt(foo_arr, a, b);\n+    uadd_nonopt(bar_arr, a, b);\n+    if (memcmp(foo_arr, bar_arr, ARR_SIZE) != 0)\n+      return 1;\n+    sadd_opt((int32_t*) foo_arr, (int16_t*) a, (int16_t*) b);\n+    sadd_nonopt((int32_t*) bar_arr, (int16_t*) a, (int16_t*) b);\n+    if (memcmp(foo_arr, bar_arr, ARR_SIZE) != 0)\n+      return 1;\n+    return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuaddl\\t} 1} } */\n+/* { dg-final { scan-assembler-times {\\tuaddl2\\t} 1} } */\n+/* { dg-final { scan-assembler-times {\\tsaddl\\t} 1} } */\n+/* { dg-final { scan-assembler-times {\\tsaddl2\\t} 1} } */"}, {"sha": "a2bed63affbd091977df95a126da1f5b8c1d41d2", "filename": "gcc/testsuite/gcc.target/aarch64/vect-widen-sub.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-sub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-sub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-widen-sub.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -save-temps\" } */\n+#include <stdint.h>\n+#include <string.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+#define ARR_SIZE 1024\n+\n+/* Should produce an usubl */\n+void usub_opt (uint32_t *foo, uint16_t *a, uint16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   - b[i];\n+        foo[i+1] = a[i+1] - b[i+1];\n+        foo[i+2] = a[i+2] - b[i+2];\n+        foo[i+3] = a[i+3] - b[i+3];\n+    }\n+}\n+\n+__attribute__((optimize (0)))\n+void usub_nonopt (uint32_t *foo, uint16_t *a, uint16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   - b[i];\n+        foo[i+1] = a[i+1] - b[i+1];\n+        foo[i+2] = a[i+2] - b[i+2];\n+        foo[i+3] = a[i+3] - b[i+3];\n+    }\n+}\n+\n+/* Should produce an ssubl */\n+void ssub_opt (int32_t *foo, int16_t *a, int16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   - b[i];\n+        foo[i+1] = a[i+1] - b[i+1];\n+        foo[i+2] = a[i+2] - b[i+2];\n+        foo[i+3] = a[i+3] - b[i+3];\n+    }\n+}\n+\n+__attribute__((optimize (0)))\n+void ssub_nonopt (int32_t *foo, int16_t *a, int16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE - 3;i=i+4)\n+    {\n+        foo[i]   = a[i]   - b[i];\n+        foo[i+1] = a[i+1] - b[i+1];\n+        foo[i+2] = a[i+2] - b[i+2];\n+        foo[i+3] = a[i+3] - b[i+3];\n+    }\n+}\n+\n+\n+void __attribute__((optimize (0)))\n+init(uint16_t *a, uint16_t *b)\n+{\n+    for( int i = 0; i < ARR_SIZE;i++)\n+    {\n+      a[i] = i;\n+      b[i] = 2*i;\n+    }\n+}\n+\n+int __attribute__((optimize (0)))\n+main()\n+{\n+    uint32_t foo_arr[ARR_SIZE];\n+    uint32_t bar_arr[ARR_SIZE];\n+    uint16_t a[ARR_SIZE];\n+    uint16_t b[ARR_SIZE];\n+\n+    init(a, b);\n+    usub_opt(foo_arr, a, b);\n+    usub_nonopt(bar_arr, a, b);\n+    if (memcmp(foo_arr, bar_arr, ARR_SIZE) != 0)\n+      return 1;\n+    ssub_opt((int32_t*) foo_arr, (int16_t*) a, (int16_t*) b);\n+    ssub_nonopt((int32_t*) bar_arr, (int16_t*) a, (int16_t*) b);\n+    if (memcmp(foo_arr, bar_arr, ARR_SIZE) != 0)\n+      return 1;\n+    return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tusubl\\t} 1} } */\n+/* { dg-final { scan-assembler-times {\\tusubl2\\t} 1} } */\n+/* { dg-final { scan-assembler-times {\\tssubl\\t} 1} } */\n+/* { dg-final { scan-assembler-times {\\tssubl2\\t} 1} } */"}, {"sha": "aaf390bda42648f226f3c3d592b61d736851c0ea", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -3885,6 +3885,8 @@ verify_gimple_assign_binary (gassign *stmt)\n         return false;\n       }\n \n+    case WIDEN_PLUS_EXPR:\n+    case WIDEN_MINUS_EXPR:\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n       {\n@@ -4005,6 +4007,10 @@ verify_gimple_assign_binary (gassign *stmt)\n         return false;\n       }\n \n+    case VEC_WIDEN_MINUS_HI_EXPR:\n+    case VEC_WIDEN_MINUS_LO_EXPR:\n+    case VEC_WIDEN_PLUS_HI_EXPR:\n+    case VEC_WIDEN_PLUS_LO_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n     case VEC_WIDEN_MULT_EVEN_EXPR:"}, {"sha": "d9814bd10d39f006894a115568acc742820fed38", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -4224,6 +4224,8 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n \n     case REALIGN_LOAD_EXPR:\n \n+    case WIDEN_PLUS_EXPR:\n+    case WIDEN_MINUS_EXPR:\n     case WIDEN_SUM_EXPR:\n     case WIDEN_MULT_EXPR:\n     case DOT_PROD_EXPR:\n@@ -4232,6 +4234,10 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n     case WIDEN_MULT_MINUS_EXPR:\n     case WIDEN_LSHIFT_EXPR:\n \n+    case VEC_WIDEN_PLUS_HI_EXPR:\n+    case VEC_WIDEN_PLUS_LO_EXPR:\n+    case VEC_WIDEN_MINUS_HI_EXPR:\n+    case VEC_WIDEN_MINUS_LO_EXPR:\n     case VEC_WIDEN_MULT_HI_EXPR:\n     case VEC_WIDEN_MULT_LO_EXPR:\n     case VEC_WIDEN_MULT_EVEN_EXPR:"}, {"sha": "23bc1cb04b795769d69cb7f58e4aed27e577f44a", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -2118,6 +2118,10 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi,\n      arguments, not the widened result.  VEC_UNPACK_FLOAT_*_EXPR is\n      calculated in the same way above.  */\n   if (code == WIDEN_SUM_EXPR\n+      || code == VEC_WIDEN_PLUS_HI_EXPR\n+      || code == VEC_WIDEN_PLUS_LO_EXPR\n+      || code == VEC_WIDEN_MINUS_HI_EXPR\n+      || code == VEC_WIDEN_MINUS_LO_EXPR\n       || code == VEC_WIDEN_MULT_HI_EXPR\n       || code == VEC_WIDEN_MULT_LO_EXPR\n       || code == VEC_WIDEN_MULT_EVEN_EXPR"}, {"sha": "f2ce75aac3ebf39a5a6001c5cc33cf94a2942486", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -1148,7 +1148,7 @@ vect_recog_sad_pattern (vec_info *vinfo,\n   /* FORNOW.  Can continue analyzing the def-use chain when this stmt in a phi\n      inside the loop (in case we are analyzing an outer-loop).  */\n   vect_unpromoted_value unprom[2];\n-  if (!vect_widened_op_tree (vinfo, diff_stmt_vinfo, MINUS_EXPR, MINUS_EXPR,\n+  if (!vect_widened_op_tree (vinfo, diff_stmt_vinfo, MINUS_EXPR, WIDEN_MINUS_EXPR,\n \t\t\t     false, 2, unprom, &half_type))\n     return NULL;\n \n@@ -1262,6 +1262,29 @@ vect_recog_widen_mult_pattern (vec_info *vinfo, stmt_vec_info last_stmt_info,\n \t\t\t\t      \"vect_recog_widen_mult_pattern\");\n }\n \n+/* Try to detect addition on widened inputs, converting PLUS_EXPR\n+   to WIDEN_PLUS_EXPR.  See vect_recog_widen_op_pattern for details.  */\n+\n+static gimple *\n+vect_recog_widen_plus_pattern (vec_info *vinfo, stmt_vec_info last_stmt_info,\n+\t\t\t       tree *type_out)\n+{\n+  return vect_recog_widen_op_pattern (vinfo, last_stmt_info, type_out,\n+\t\t\t\t      PLUS_EXPR, WIDEN_PLUS_EXPR, false,\n+\t\t\t\t      \"vect_recog_widen_plus_pattern\");\n+}\n+\n+/* Try to detect subtraction on widened inputs, converting MINUS_EXPR\n+   to WIDEN_MINUS_EXPR.  See vect_recog_widen_op_pattern for details.  */\n+static gimple *\n+vect_recog_widen_minus_pattern (vec_info *vinfo, stmt_vec_info last_stmt_info,\n+\t\t\t       tree *type_out)\n+{\n+  return vect_recog_widen_op_pattern (vinfo, last_stmt_info, type_out,\n+\t\t\t\t      MINUS_EXPR, WIDEN_MINUS_EXPR, false,\n+\t\t\t\t      \"vect_recog_widen_minus_pattern\");\n+}\n+\n /* Function vect_recog_pow_pattern\n \n    Try to find the following pattern:\n@@ -1978,7 +2001,7 @@ vect_recog_average_pattern (vec_info *vinfo,\n   vect_unpromoted_value unprom[3];\n   tree new_type;\n   unsigned int nops = vect_widened_op_tree (vinfo, plus_stmt_info, PLUS_EXPR,\n-\t\t\t\t\t    PLUS_EXPR, false, 3,\n+\t\t\t\t\t    WIDEN_PLUS_EXPR, false, 3,\n \t\t\t\t\t    unprom, &new_type);\n   if (nops == 0)\n     return NULL;\n@@ -5249,7 +5272,9 @@ static vect_recog_func vect_vect_recog_func_ptrs[] = {\n      of mask conversion that are needed for gather and scatter\n      internal functions.  */\n   { vect_recog_gather_scatter_pattern, \"gather_scatter\" },\n-  { vect_recog_mask_conversion_pattern, \"mask_conversion\" }\n+  { vect_recog_mask_conversion_pattern, \"mask_conversion\" },\n+  { vect_recog_widen_plus_pattern, \"widen_plus\" },\n+  { vect_recog_widen_minus_pattern, \"widen_minus\" },\n };\n \n const unsigned int NUM_PATTERNS = ARRAY_SIZE (vect_vect_recog_func_ptrs);"}, {"sha": "f88f07a62df9f4906ac8b74b69b5f1955c69656b", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -4571,6 +4571,8 @@ vectorizable_conversion (vec_info *vinfo,\n   if (!CONVERT_EXPR_CODE_P (code)\n       && code != FIX_TRUNC_EXPR\n       && code != FLOAT_EXPR\n+      && code != WIDEN_PLUS_EXPR\n+      && code != WIDEN_MINUS_EXPR\n       && code != WIDEN_MULT_EXPR\n       && code != WIDEN_LSHIFT_EXPR)\n     return false;\n@@ -4616,7 +4618,8 @@ vectorizable_conversion (vec_info *vinfo,\n \n   if (op_type == binary_op)\n     {\n-      gcc_assert (code == WIDEN_MULT_EXPR || code == WIDEN_LSHIFT_EXPR);\n+      gcc_assert (code == WIDEN_MULT_EXPR || code == WIDEN_LSHIFT_EXPR\n+\t\t  || code == WIDEN_PLUS_EXPR || code == WIDEN_MINUS_EXPR);\n \n       op1 = gimple_assign_rhs2 (stmt);\n       tree vectype1_in;\n@@ -11535,6 +11538,16 @@ supportable_widening_operation (vec_info *vinfo,\n       c2 = VEC_WIDEN_LSHIFT_HI_EXPR;\n       break;\n \n+    case WIDEN_PLUS_EXPR:\n+      c1 = VEC_WIDEN_PLUS_LO_EXPR;\n+      c2 = VEC_WIDEN_PLUS_HI_EXPR;\n+      break;\n+\n+    case WIDEN_MINUS_EXPR:\n+      c1 = VEC_WIDEN_MINUS_LO_EXPR;\n+      c2 = VEC_WIDEN_MINUS_HI_EXPR;\n+      break;\n+\n     CASE_CONVERT:\n       c1 = VEC_UNPACK_LO_EXPR;\n       c2 = VEC_UNPACK_HI_EXPR;"}, {"sha": "11f5a984bbd60d121cf000dbe506e16b08edcc42", "filename": "gcc/tree.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc9573f9a5e9432e53c7de93985cfbd267f0309/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=9fc9573f9a5e9432e53c7de93985cfbd267f0309", "patch": "@@ -1365,6 +1365,8 @@ DEFTREECODE (WIDEN_MULT_MINUS_EXPR, \"widen_mult_minus_expr\", tcc_expression, 3)\n    the first argument from type t1 to type t2, and then shifting it\n    by the second argument.  */\n DEFTREECODE (WIDEN_LSHIFT_EXPR, \"widen_lshift_expr\", tcc_binary, 2)\n+DEFTREECODE (WIDEN_PLUS_EXPR, \"widen_plus_expr\", tcc_binary, 2)\n+DEFTREECODE (WIDEN_MINUS_EXPR, \"widen_minus_expr\", tcc_binary, 2)\n \n /* Widening vector multiplication.\n    The two operands are vectors with N elements of size S. Multiplying the\n@@ -1429,6 +1431,10 @@ DEFTREECODE (VEC_PACK_FLOAT_EXPR, \"vec_pack_float_expr\", tcc_binary, 2)\n  */\n DEFTREECODE (VEC_WIDEN_LSHIFT_HI_EXPR, \"widen_lshift_hi_expr\", tcc_binary, 2)\n DEFTREECODE (VEC_WIDEN_LSHIFT_LO_EXPR, \"widen_lshift_lo_expr\", tcc_binary, 2)\n+DEFTREECODE (VEC_WIDEN_PLUS_HI_EXPR, \"widen_plus_hi_expr\", tcc_binary, 2)\n+DEFTREECODE (VEC_WIDEN_PLUS_LO_EXPR, \"widen_plus_lo_expr\", tcc_binary, 2)\n+DEFTREECODE (VEC_WIDEN_MINUS_HI_EXPR, \"widen_minus_hi_expr\", tcc_binary, 2)\n+DEFTREECODE (VEC_WIDEN_MINUS_LO_EXPR, \"widen_minus_lo_expr\", tcc_binary, 2)\n \n /* PREDICT_EXPR.  Specify hint for branch prediction.  The\n    PREDICT_EXPR_PREDICTOR specify predictor and PREDICT_EXPR_OUTCOME the"}]}