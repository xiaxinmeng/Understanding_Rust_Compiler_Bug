{"sha": "37aa45a21d9ad2be602b8a98b682e861350a4959", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhYTQ1YTIxZDlhZDJiZTYwMmI4YTk4YjY4MmU4NjEzNTBhNDk1OQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-09-22T03:04:36Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-22T03:04:36Z"}, "message": "loop.c (loop_number): Delete function.\n\n        * loop.c (loop_number): Delete function.  Change all references\n        to use uid_loop_num array.\n        * loop.h (loop_number): Delete declaration.\n        * unroll.c (unroll_loop): Change \"loop_number\" references to\n        use uid_loop_num instead.\nStill cleaning up haifa.\n\nFrom-SVN: r15623", "tree": {"sha": "3adbfebe7de732307dd76907d3520b7db3124dde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3adbfebe7de732307dd76907d3520b7db3124dde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37aa45a21d9ad2be602b8a98b682e861350a4959", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37aa45a21d9ad2be602b8a98b682e861350a4959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37aa45a21d9ad2be602b8a98b682e861350a4959", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37aa45a21d9ad2be602b8a98b682e861350a4959/comments", "author": null, "committer": null, "parents": [{"sha": "b47404d1372066ecf9ee41c2ccc693e1bd0af3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47404d1372066ecf9ee41c2ccc693e1bd0af3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47404d1372066ecf9ee41c2ccc693e1bd0af3f2"}], "stats": {"total": 37, "additions": 11, "deletions": 26}, "files": [{"sha": "5707f37ed88362e1a73783779b375ac1d8f49a54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37aa45a21d9ad2be602b8a98b682e861350a4959/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37aa45a21d9ad2be602b8a98b682e861350a4959/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37aa45a21d9ad2be602b8a98b682e861350a4959", "patch": "@@ -1,5 +1,11 @@\n Sun Sep 21 17:45:45 1997  Jeffrey A Law  (law@cygnus.com)\n \n+\t* loop.c (loop_number): Delete function.  Change all references\n+\tto use uid_loop_num array.\n+\t* loop.h (loop_number): Delete declaration.\n+\t* unroll.c (unroll_loop): Change \"loop_number\" references to\n+\tuse uid_loop_num instead.\n+\n \t* loop.c (loop_unroll_factor): Move outside #ifdef HAIFA\n \tconditional.\n \t(loop_unroll_iter): Remove unused variable and all references."}, {"sha": "37dd01193924d42d4fc568991a8aa2a7e477f506", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37aa45a21d9ad2be602b8a98b682e861350a4959/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37aa45a21d9ad2be602b8a98b682e861350a4959/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=37aa45a21d9ad2be602b8a98b682e861350a4959", "patch": "@@ -327,9 +327,6 @@ static void insert_bct ();\n \n /* Auxiliary function that inserts the bct pattern into the loop */\n static void instrument_loop_bct ();\n-\n-\n-int loop_number ();\n #endif  /* HAIFA */\n \n /* Indirect_jump_in_function is computed once per function.  */\n@@ -7066,7 +7063,7 @@ void analyze_loop_iterations (loop_start, loop_end)\n   enum machine_mode original_mode;\n \n   /* find the number of the loop */\n-  int loop_num = loop_number (loop_start, loop_end);\n+  int loop_num = uid_loop_num [INSN_UID (loop_start)];\n \n   /* we change our mind only when we are sure that loop will be instrumented */\n   loop_can_insert_bct[loop_num] = 0;\n@@ -7257,7 +7254,7 @@ insert_bct (loop_start, loop_end)\n      machine has */\n   enum machine_mode loop_var_mode = SImode;\n \n-  int loop_num = loop_number (loop_start, loop_end);\n+  int loop_num = uid_loop_num [INSN_UID (loop_start)];\n \n   /* get loop-variables. No need to check that these are valid - already\n      checked in analyze_loop_iterations ().  */\n@@ -7569,23 +7566,6 @@ instrument_loop_bct (loop_start, loop_end, loop_num_iterations)\n \n #endif /* HAVE_decrement_and_branch_on_count */\n }\n-\n-/* calculate the uid of the given loop */\n-int\n-loop_number (loop_start, loop_end)\n-     rtx loop_start, loop_end;\n-{\n-  int loop_num = -1;\n-\n-  /* assume that this insn contains the LOOP_START\n-     note, so it will not be changed by the loop unrolling */\n-  loop_num = uid_loop_num[INSN_UID (loop_start)];\n-  /* sanity check - should never happen */\n-  if (loop_num == -1)\n-    abort ();\n-\n-  return loop_num;\n-}\n #endif\t/* HAIFA */\n \n /* Scan the function and determine whether it has indirect (computed) jumps."}, {"sha": "8a92a321185a29824f65ae5f4558b7c57051dad7", "filename": "gcc/loop.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37aa45a21d9ad2be602b8a98b682e861350a4959/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37aa45a21d9ad2be602b8a98b682e861350a4959/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=37aa45a21d9ad2be602b8a98b682e861350a4959", "patch": "@@ -187,6 +187,5 @@ extern int *loop_unroll_factor;\n /* variables for interaction between unroll.c and loop.c, for\n    the insertion of branch-on-count instruction. */\n extern rtx *loop_start_value;\n-extern int loop_number();\n #endif  /* HAIFA */\n "}, {"sha": "0c298751685acf727243555739d171233a0f0157", "filename": "gcc/unroll.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37aa45a21d9ad2be602b8a98b682e861350a4959/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37aa45a21d9ad2be602b8a98b682e861350a4959/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=37aa45a21d9ad2be602b8a98b682e861350a4959", "patch": "@@ -1098,7 +1098,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n #ifdef HAIFA\n \t  /* Fix the initial value for the loop as needed.  */\n \t  if (loop_n_iterations <= 0)\n-\t    loop_start_value [loop_number (loop_start, loop_end)]\n+\t    loop_start_value [uid_loop_num [INSN_UID (loop_start)]]\n \t      = initial_value;\n #endif\n \t}\n@@ -1117,9 +1117,9 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \n   /* Keep track of the unroll factor for each loop.  */\n   if (unroll_type == UNROLL_COMPLETELY)\n-    loop_unroll_factor [loop_number (loop_start, loop_end)] = -1;\n+    loop_unroll_factor [uid_loop_num [INSN_UID (loop_start)]] = -1;\n   else\n-    loop_unroll_factor [loop_number (loop_start, loop_end)] = unroll_number;\n+    loop_unroll_factor [uid_loop_num [INSN_UID (loop_start)]] = unroll_number;\n \n \n   /* For each biv and giv, determine whether it can be safely split into"}]}