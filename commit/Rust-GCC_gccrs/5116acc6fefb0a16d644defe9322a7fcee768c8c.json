{"sha": "5116acc6fefb0a16d644defe9322a7fcee768c8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExNmFjYzZmZWZiMGExNmQ2NDRkZWZlOTMyMmE3ZmNlZTc2OGM4Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-13T05:04:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-13T05:04:46Z"}, "message": "re PR bootstrap/44048 (building without C++ enabled fails)\n\n\tPR bootstrap/44048\n\tPR target/44099\ngcc/cp:\n\t* cp-tree.def (NULLPTR_TYPE): Remove.\n\t* cp-tree.h (NULLPTR_TYPE_P): New.\n\t(SCALAR_TYPE_P): Use it.\n\t(nullptr_type_node): New.\n\t(cp_tree_index): Add CPTI_NULLPTR_TYPE.\n\t* decl.c (cxx_init_decl_processing): Call record_builtin_type on\n\tnullptr_type_node.\n\t* cvt.c (ocp_convert): Use NULLPTR_TYPE_P instead of NULLPTR_TYPE.\n\t* cxx-pretty-print.c (pp_cxx_constant): Likewise.\n\t* error.c (dump_type, dump_type_prefix, dump_type_suffix): Likewise.\n\t* mangle.c (write_type): Likewise.\n\t* name-lookup.c (arg_assoc_type): Likewise.\n\t* typeck.c (build_reinterpret_cast_1): Likewise.\n\t* rtti.c (typeinfo_in_lib_p): Likewise.\n\t(emit_support_tinfos): Remove local nullptr_type_node.\ngcc:\n\t* dbxout.c (dbxout_type): Remove NULLPTR_TYPE handling.\n\t* sdbout.c (plain_type_1): Likewise.\n\t* dwarf2out.c (is_base_type): Likewise.\n\t(gen_type_die_with_usage): Likewise.  Generate\n\tDW_TAG_unspecified_type for any LANG_TYPE.\n\nFrom-SVN: r159350", "tree": {"sha": "572a495193f31f2ec341afb86e711e1dd2c80197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/572a495193f31f2ec341afb86e711e1dd2c80197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5116acc6fefb0a16d644defe9322a7fcee768c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116acc6fefb0a16d644defe9322a7fcee768c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5116acc6fefb0a16d644defe9322a7fcee768c8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5116acc6fefb0a16d644defe9322a7fcee768c8c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbfc8363a378a676d5ab71fc44edf0b8f681ffa0"}], "stats": {"total": 139, "additions": 85, "deletions": 54}, "files": [{"sha": "0decfd807e3c5f4f4ed4875b923a2b19e057d9cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -1,3 +1,13 @@\n+2010-05-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR bootstrap/44048\n+\tPR target/44099\n+\t* dbxout.c (dbxout_type): Remove NULLPTR_TYPE handling.\n+\t* sdbout.c (plain_type_1): Likewise.\n+\t* dwarf2out.c (is_base_type): Likewise.\n+\t(gen_type_die_with_usage): Likewise.  Generate\n+\tDW_TAG_unspecified_type for any LANG_TYPE.\n+\n 2010-05-12  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphbuild.c (build_cgraph_edges, rebuild_cgraph_edges): Build"}, {"sha": "5be74a357d1ec5ab87ec8aae2b0e098dbac4cc90", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -1,5 +1,23 @@\n 2010-05-12  Jason Merrill  <jason@redhat.com>\n \n+\tPR bootstrap/44048\n+\tPR target/44099\n+\t* cp-tree.def (NULLPTR_TYPE): Remove.\n+\t* cp-tree.h (NULLPTR_TYPE_P): New.\n+\t(SCALAR_TYPE_P): Use it.\n+\t(nullptr_type_node): New.\n+\t(cp_tree_index): Add CPTI_NULLPTR_TYPE.\n+\t* decl.c (cxx_init_decl_processing): Call record_builtin_type on\n+\tnullptr_type_node.\n+\t* cvt.c (ocp_convert): Use NULLPTR_TYPE_P instead of NULLPTR_TYPE.\n+\t* cxx-pretty-print.c (pp_cxx_constant): Likewise.\n+\t* error.c (dump_type, dump_type_prefix, dump_type_suffix): Likewise.\n+\t* mangle.c (write_type): Likewise.\n+\t* name-lookup.c (arg_assoc_type): Likewise.\n+\t* typeck.c (build_reinterpret_cast_1): Likewise.\n+\t* rtti.c (typeinfo_in_lib_p): Likewise.\n+\t(emit_support_tinfos): Remove local nullptr_type_node.\n+\n \t* cp-tree.h (UNKNOWN_TYPE): Remove.\n \t* decl.c (cxx_init_decl_processing): Use LANG_TYPE instead.\n \t* error.c (dumy_type, dump_type_prefix, dump_type_suffix): Likewise."}, {"sha": "0f62059f42ea740de1dfe84956d43c7aac5b32e4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -464,7 +464,7 @@ null_ptr_cst_p (tree t)\n      an rvalue of type std::nullptr_t. */\n   t = integral_constant_value (t);\n   if (t == null_node\n-      || TREE_CODE (TREE_TYPE (t)) == NULLPTR_TYPE)\n+      || NULLPTR_TYPE_P (TREE_TYPE (t)))\n     return true;\n   if (CP_INTEGRAL_TYPE_P (TREE_TYPE (t)) && integer_zerop (t))\n     {\n@@ -783,7 +783,7 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n      null pointer constant of integral type can be converted to an\n      rvalue of type std::nullptr_t. */\n   if ((tcode == POINTER_TYPE || TYPE_PTR_TO_MEMBER_P (to)\n-       || tcode == NULLPTR_TYPE)\n+       || NULLPTR_TYPE_P (to))\n       && expr && null_ptr_cst_p (expr))\n     conv = build_conv (ck_std, to, conv);\n   else if ((tcode == INTEGER_TYPE && fcode == POINTER_TYPE)\n@@ -924,14 +924,14 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t  || UNSCOPED_ENUM_P (from)\n \t  || fcode == POINTER_TYPE\n \t  || TYPE_PTR_TO_MEMBER_P (from)\n-\t  || fcode == NULLPTR_TYPE)\n+\t  || NULLPTR_TYPE_P (from))\n \t{\n \t  conv = build_conv (ck_std, to, conv);\n \t  if (fcode == POINTER_TYPE\n \t      || TYPE_PTRMEM_P (from)\n \t      || (TYPE_PTRMEMFUNC_P (from)\n \t\t  && conv->rank < cr_pbool)\n-              || fcode == NULLPTR_TYPE)\n+\t      || NULLPTR_TYPE_P (from))\n \t    conv->rank = cr_pbool;\n \t  return conv;\n \t}\n@@ -5209,7 +5209,7 @@ convert_arg_to_ellipsis (tree arg)\n \t  < TYPE_PRECISION (double_type_node))\n       && !DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (arg))))\n     arg = convert_to_real (double_type_node, arg);\n-  else if (TREE_CODE (TREE_TYPE (arg)) == NULLPTR_TYPE)\n+  else if (NULLPTR_TYPE_P (TREE_TYPE (arg)))\n     arg = null_pointer_node;\n   else if (INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (arg)))\n     arg = perform_integral_promotions (arg);"}, {"sha": "c71f94caa619df38a10f73177e41c7663270d63a", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -449,9 +449,6 @@ DEFTREECODE (DECLTYPE_TYPE, \"decltype_type\", tcc_type, 0)\n    instantiation time.  */\n DEFTREECODE (TEMPLATE_INFO, \"template_info\", tcc_exceptional, 0)\n \n-/* The type of a nullptr expression. This is a C++0x extension. */\n-DEFTREECODE (NULLPTR_TYPE, \"decltype(nullptr)\", tcc_type, 0)\n-\n /*\n Local variables:\n mode:c"}, {"sha": "02e81ebd0f20f595f884bce53ac0a15cbfedd627", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -776,6 +776,7 @@ enum cp_tree_index\n     CPTI_KEYED_CLASSES,\n \n     CPTI_NULLPTR,\n+    CPTI_NULLPTR_TYPE,\n \n     CPTI_MAX\n };\n@@ -812,6 +813,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define global_delete_fndecl\t\tcp_global_trees[CPTI_GLOBAL_DELETE_FNDECL]\n #define current_aggr\t\t\tcp_global_trees[CPTI_AGGR_TAG]\n #define nullptr_node\t\t\tcp_global_trees[CPTI_NULLPTR]\n+#define nullptr_type_node\t\tcp_global_trees[CPTI_NULLPTR_TYPE]\n \n /* We cache these tree nodes so as to call get_identifier less\n    frequently.  */\n@@ -3002,6 +3004,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    || TREE_CODE (TYPE) == REAL_TYPE \\\n    || TREE_CODE (TYPE) == COMPLEX_TYPE)\n \n+/* True iff TYPE is cv decltype(nullptr).  */\n+#define NULLPTR_TYPE_P(TYPE)\t\t\t\t\\\n+  (TREE_CODE (TYPE) == LANG_TYPE\t\t\t\\\n+   && TYPE_MAIN_VARIANT (TYPE) == nullptr_type_node)\n+\n /* [basic.types]\n \n    Arithmetic types, enumeration types, pointer types,\n@@ -3015,7 +3022,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    || ARITHMETIC_TYPE_P (TYPE)\t\t\t\\\n    || TYPE_PTR_P (TYPE)\t\t\t\t\\\n    || TYPE_PTRMEMFUNC_P (TYPE)                  \\\n-   || TREE_CODE (TYPE) == NULLPTR_TYPE)\n+   || NULLPTR_TYPE_P (TYPE))\n \n /* Determines whether this type is a C++0x scoped enumeration\n    type. Scoped enumerations types are introduced via \"enum class\" or"}, {"sha": "646610a94bf158c74e83d37091372a0a720a3269", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -704,7 +704,7 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n \n       return fold_if_not_in_template (convert_to_integer (type, e));\n     }\n-  if (code == NULLPTR_TYPE && e && null_ptr_cst_p (e))\n+  if (NULLPTR_TYPE_P (type) && e && null_ptr_cst_p (e))\n     return nullptr_node;\n   if (POINTER_TYPE_P (type) || TYPE_PTR_TO_MEMBER_P (type))\n     return fold_if_not_in_template (cp_convert_to_pointer (type, e));"}, {"sha": "02c512a012df6c404c13592f827bc8ebf67b540e", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -340,7 +340,7 @@ pp_cxx_constant (cxx_pretty_printer *pp, tree t)\n       break;\n \n     case INTEGER_CST:\n-      if (TREE_CODE (TREE_TYPE (t)) == NULLPTR_TYPE)\n+      if (NULLPTR_TYPE_P (TREE_TYPE (t)))\n \t{\n \t  pp_string (pp, \"nullptr\");\n \t  break;"}, {"sha": "11fac713b3fd895088de3ee03a16d82dad4043d8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -3527,16 +3527,15 @@ cxx_init_decl_processing (void)\n     global_delete_fndecl = push_cp_library_fn (DELETE_EXPR, deltype);\n     push_cp_library_fn (VEC_DELETE_EXPR, deltype);\n \n-    {\n-      tree nullptr_type_node = make_node (NULLPTR_TYPE);\n-      TYPE_SIZE (nullptr_type_node) = bitsize_int (GET_MODE_BITSIZE (ptr_mode));\n-      TYPE_SIZE_UNIT (nullptr_type_node) = size_int (GET_MODE_SIZE (ptr_mode));\n-      TYPE_UNSIGNED (nullptr_type_node) = 1;\n-      TYPE_PRECISION (nullptr_type_node) = GET_MODE_BITSIZE (ptr_mode);\n-      SET_TYPE_MODE (nullptr_type_node, Pmode);\n-      nullptr_node = make_node (INTEGER_CST);\n-      TREE_TYPE (nullptr_node) = nullptr_type_node;\n-    }\n+    nullptr_type_node = make_node (LANG_TYPE);\n+    TYPE_SIZE (nullptr_type_node) = bitsize_int (GET_MODE_BITSIZE (ptr_mode));\n+    TYPE_SIZE_UNIT (nullptr_type_node) = size_int (GET_MODE_SIZE (ptr_mode));\n+    TYPE_UNSIGNED (nullptr_type_node) = 1;\n+    TYPE_PRECISION (nullptr_type_node) = GET_MODE_BITSIZE (ptr_mode);\n+    SET_TYPE_MODE (nullptr_type_node, Pmode);\n+    record_builtin_type (RID_MAX, \"decltype(nullptr)\", nullptr_type_node);\n+    nullptr_node = make_node (INTEGER_CST);\n+    TREE_TYPE (nullptr_node) = nullptr_type_node;\n   }\n \n   abort_fndecl"}, {"sha": "b77a94c4ba8d64f0a54fab7dffaa841ad889e8ab", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -339,7 +339,10 @@ dump_type (tree t, int flags)\n       else if (t == unknown_type_node)\n \tpp_string (cxx_pp, M_(\"<unresolved overloaded function type>\"));\n       else\n-\tgcc_unreachable ();\n+\t{\n+\t  pp_cxx_cv_qualifier_seq (cxx_pp, t);\n+\t  pp_cxx_tree_identifier (cxx_pp, TYPE_IDENTIFIER (t));\n+\t}\n       break;\n \n     case TREE_LIST:\n@@ -477,10 +480,6 @@ dump_type (tree t, int flags)\n       pp_cxx_right_paren (cxx_pp);\n       break;\n \n-    case NULLPTR_TYPE:\n-      pp_string (cxx_pp, \"std::nullptr_t\");\n-      break;\n-\n     default:\n       pp_unsupported_tree (cxx_pp, t);\n       /* Fall through to error.  */\n@@ -709,7 +708,6 @@ dump_type_prefix (tree t, int flags)\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n-    case NULLPTR_TYPE:\n       dump_type (t, flags);\n       pp_base (cxx_pp)->padding = pp_before;\n       break;\n@@ -812,7 +810,6 @@ dump_type_suffix (tree t, int flags)\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n-    case NULLPTR_TYPE:\n       break;\n \n     default:"}, {"sha": "5108950625feba33545059874f9442e4ea8054c6", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -1933,14 +1933,18 @@ write_type (tree type)\n               write_char ('E');\n               break;\n \n-\t    case NULLPTR_TYPE:\n-              write_string (\"Dn\");\n-              break;\n-\n \t    case TYPEOF_TYPE:\n \t      sorry (\"mangling typeof, use decltype instead\");\n \t      break;\n \n+\t    case LANG_TYPE:\n+\t      if (NULLPTR_TYPE_P (type))\n+\t\t{\n+\t\t  write_string (\"Dn\");\n+\t\t  break;\n+\t\t}\n+\t      /* else fall through.  */\n+\n \t    default:\n \t      gcc_unreachable ();\n \t    }"}, {"sha": "88a3e39507d791a78a4d262bddf9bb3b9bda7d5b", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -4859,7 +4859,6 @@ arg_assoc_type (struct arg_lookup *k, tree type)\n     case BOOLEAN_TYPE:\n     case FIXED_POINT_TYPE:\n     case DECLTYPE_TYPE:\n-    case NULLPTR_TYPE:\n       return false;\n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (type))\n@@ -4891,6 +4890,7 @@ arg_assoc_type (struct arg_lookup *k, tree type)\n       return false;\n     case LANG_TYPE:\n       gcc_assert (type == unknown_type_node\n+\t\t  || NULLPTR_TYPE_P (type)\n \t\t  || type == init_list_type_node);\n       return false;\n     case TYPE_PACK_EXPANSION:"}, {"sha": "4eb2ba74c06db5bbe0890ef50d290e2f7ebfc44e", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -1046,9 +1046,13 @@ typeinfo_in_lib_p (tree type)\n     case BOOLEAN_TYPE:\n     case REAL_TYPE:\n     case VOID_TYPE:\n-    case NULLPTR_TYPE:\n       return true;\n \n+    case LANG_TYPE:\n+      if (NULLPTR_TYPE_P (type))\n+\treturn true;\n+      /* else fall through.  */\n+\n     default:\n       return false;\n     }\n@@ -1454,7 +1458,6 @@ emit_support_tinfos (void)\n {\n   /* Dummy static variable so we can put nullptr in the array; it will be\n      set before we actually start to walk the array.  */\n-  static tree nullptr_type_node;\n   static tree *const fundamentals[] =\n   {\n     &void_type_node,\n@@ -1484,7 +1487,6 @@ emit_support_tinfos (void)\n   if (!dtor || DECL_EXTERNAL (dtor))\n     return;\n   doing_runtime = 1;\n-  nullptr_type_node = TREE_TYPE (nullptr_node);\n   for (ix = 0; fundamentals[ix]; ix++)\n     {\n       tree bltn = *fundamentals[ix];"}, {"sha": "0ff857360c03ab46d6541081239dd52190ca3baf", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -6028,7 +6028,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n      an integral type; the conversion has the same meaning and\n      validity as a conversion of (void*)0 to the integral type.  */\n   if (CP_INTEGRAL_TYPE_P (type)\n-      && (TYPE_PTR_P (intype) || TREE_CODE (intype) == NULLPTR_TYPE))\n+      && (TYPE_PTR_P (intype) || NULLPTR_TYPE_P (intype)))\n     {\n       if (TYPE_PRECISION (type) < TYPE_PRECISION (intype))\n         {\n@@ -6038,7 +6038,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n           else\n             return error_mark_node;\n         }\n-      if (TREE_CODE (intype) == NULLPTR_TYPE)\n+      if (NULLPTR_TYPE_P (intype))\n         return build_int_cst (type, 0);\n     }\n   /* [expr.reinterpret.cast]"}, {"sha": "a314e7b4430dca73c70faee7f9757422948124c1", "filename": "gcc/dbxout.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -1867,7 +1867,6 @@ dbxout_type (tree type, int full)\n     {\n     case VOID_TYPE:\n     case LANG_TYPE:\n-    case NULLPTR_TYPE:\n       /* For a void type, just define it as itself; i.e., \"5=5\".\n \t This makes us consider it defined\n \t without saying what it is.  The debugger will make it"}, {"sha": "2e8ed393e5f9a7b5d5193f863498c01111b2cb01", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -12104,7 +12104,6 @@ is_base_type (tree type)\n     case ENUMERAL_TYPE:\n     case FUNCTION_TYPE:\n     case METHOD_TYPE:\n-    case NULLPTR_TYPE:\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n     case OFFSET_TYPE:\n@@ -19186,18 +19185,6 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n \t when appropriate.  */\n       return;\n \n-    case NULLPTR_TYPE:\n-      {\n-        dw_die_ref type_die = lookup_type_die (type);\n-        if (type_die == NULL)\n-          {\n-            type_die = new_die (DW_TAG_unspecified_type, comp_unit_die, type);\n-            add_name_attribute (type_die, \"decltype(nullptr)\");\n-            equate_type_number_to_die (type, type_die);\n-          }\n-      }\n-      return;\n-\n     case VOID_TYPE:\n     case INTEGER_TYPE:\n     case REAL_TYPE:\n@@ -19208,7 +19195,19 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n       break;\n \n     case LANG_TYPE:\n-      /* No Dwarf representation currently defined.  */\n+      /* Just use DW_TAG_unspecified_type.  */\n+      {\n+        dw_die_ref type_die = lookup_type_die (type);\n+        if (type_die == NULL)\n+          {\n+\t    tree name = TYPE_NAME (type);\n+\t    if (TREE_CODE (name) == TYPE_DECL)\n+\t      name = DECL_NAME (name);\n+            type_die = new_die (DW_TAG_unspecified_type, comp_unit_die, type);\n+            add_name_attribute (type_die, IDENTIFIER_POINTER (name));\n+            equate_type_number_to_die (type, type_die);\n+          }\n+      }\n       break;\n \n     default:"}, {"sha": "87a00b4a61e1a102e279e4578b3dd9c383576acb", "filename": "gcc/sdbout.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5116acc6fefb0a16d644defe9322a7fcee768c8c/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=5116acc6fefb0a16d644defe9322a7fcee768c8c", "patch": "@@ -493,7 +493,6 @@ plain_type_1 (tree type, int level)\n   switch (TREE_CODE (type))\n     {\n     case VOID_TYPE:\n-    case NULLPTR_TYPE:\n       return T_VOID;\n     case BOOLEAN_TYPE:\n     case INTEGER_TYPE:"}]}