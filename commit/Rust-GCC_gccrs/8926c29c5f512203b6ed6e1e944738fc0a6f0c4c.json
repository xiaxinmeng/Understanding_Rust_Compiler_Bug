{"sha": "8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyNmMyOWM1ZjUxMjIwM2I2ZWQ2ZTFlOTQ0NzM4ZmMwYTZmMGM0Yw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-04-22T18:07:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-05T13:09:08Z"}, "message": "[Ada] Refactoring related to Returns_By_Ref\n\ngcc/ada/\n\n\t* sem_util.ads, sem_util.adb (Compute_Returns_By_Ref): New\n\tprocedure to compute Returns_By_Ref, to avoid some code\n\tduplication. This will likely change soon, so it's good to have\n\tthe code in one place.\n\t(CW_Or_Has_Controlled_Part): Move here from Exp_Ch7, because\n\tit's called by Compute_Returns_By_Ref, and this is a better\n\tplace for it anyway.\n\t(Needs_Finalization): Fix comment to be vague instead of wrong.\n\t* exp_ch6.adb (Expand_N_Subprogram_Body, Freeze_Subprogram):\n\tCall Compute_Returns_By_Ref.\n\t* sem_ch6.adb (Check_Delayed_Subprogram): Call\n\tCompute_Returns_By_Ref.\n\t* exp_ch7.ads, exp_ch7.adb (CW_Or_Has_Controlled_Part): Move to\n\tSem_Util.\n\t(Has_New_Controlled_Component): Remove unused function.", "tree": {"sha": "6d5c57bcf19efc82644a8d2ae64ddb0f3463a413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d5c57bcf19efc82644a8d2ae64ddb0f3463a413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767f9cb1f81bdeb55a7b5fbbccb3c057f37e2fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767f9cb1f81bdeb55a7b5fbbccb3c057f37e2fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767f9cb1f81bdeb55a7b5fbbccb3c057f37e2fae"}], "stats": {"total": 129, "additions": 39, "deletions": 90}, "files": [{"sha": "3542411f4009ae1570ef46d6e398841ec924a2bc", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "patch": "@@ -6431,18 +6431,7 @@ package body Exp_Ch6 is\n       --  Returns_By_Ref flag is normally set when the subprogram is frozen but\n       --  subprograms with no specs are not frozen.\n \n-      declare\n-         Typ  : constant Entity_Id := Etype (Spec_Id);\n-         Utyp : constant Entity_Id := Underlying_Type (Typ);\n-\n-      begin\n-         if Is_Limited_View (Typ) then\n-            Set_Returns_By_Ref (Spec_Id);\n-\n-         elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n-            Set_Returns_By_Ref (Spec_Id);\n-         end if;\n-      end;\n+      Compute_Returns_By_Ref (Spec_Id);\n \n       --  For a procedure, we add a return for all possible syntactic ends of\n       --  the subprogram.\n@@ -7851,18 +7840,7 @@ package body Exp_Ch6 is\n       --  of the normal semantic analysis of the spec since the underlying\n       --  returned type may not be known yet (for private types).\n \n-      declare\n-         Typ  : constant Entity_Id := Etype (Subp);\n-         Utyp : constant Entity_Id := Underlying_Type (Typ);\n-\n-      begin\n-         if Is_Limited_View (Typ) then\n-            Set_Returns_By_Ref (Subp);\n-\n-         elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n-            Set_Returns_By_Ref (Subp);\n-         end if;\n-      end;\n+      Compute_Returns_By_Ref (Subp);\n \n       --  Wnen freezing a null procedure, analyze its delayed aspects now\n       --  because we may not have reached the end of the declarative list when"}, {"sha": "469c9fbfb88fa469a13c5403e3d076d1e41ad240", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "patch": "@@ -5118,15 +5118,6 @@ package body Exp_Ch7 is\n       end if;\n    end Convert_View;\n \n-   -------------------------------\n-   -- CW_Or_Has_Controlled_Part --\n-   -------------------------------\n-\n-   function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean is\n-   begin\n-      return Is_Class_Wide_Type (T) or else Needs_Finalization (T);\n-   end CW_Or_Has_Controlled_Part;\n-\n    ------------------------\n    -- Enclosing_Function --\n    ------------------------\n@@ -6130,37 +6121,6 @@ package body Exp_Ch7 is\n       return Empty;\n    end Find_Transient_Context;\n \n-   ----------------------------------\n-   -- Has_New_Controlled_Component --\n-   ----------------------------------\n-\n-   function Has_New_Controlled_Component (E : Entity_Id) return Boolean is\n-      Comp : Entity_Id;\n-\n-   begin\n-      if not Is_Tagged_Type (E) then\n-         return Has_Controlled_Component (E);\n-      elsif not Is_Derived_Type (E) then\n-         return Has_Controlled_Component (E);\n-      end if;\n-\n-      Comp := First_Component (E);\n-      while Present (Comp) loop\n-         if Chars (Comp) = Name_uParent then\n-            null;\n-\n-         elsif Scope (Original_Record_Component (Comp)) = E\n-           and then Needs_Finalization (Etype (Comp))\n-         then\n-            return True;\n-         end if;\n-\n-         Next_Component (Comp);\n-      end loop;\n-\n-      return False;\n-   end Has_New_Controlled_Component;\n-\n    ---------------------------------\n    -- Has_Simple_Protected_Object --\n    ---------------------------------"}, {"sha": "ef1bf675c267e74ef21cf15acad18a57f377301c", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "patch": "@@ -153,17 +153,6 @@ package Exp_Ch7 is\n    --  triggered by an abort, E_Id denotes the defining identifier of a local\n    --  exception occurrence, Raised_Id is the entity of a local boolean flag.\n \n-   function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean;\n-   --  True if T is a class-wide type, or if it has controlled parts (\"part\"\n-   --  means T or any of its subcomponents). Same as Needs_Finalization, except\n-   --  when pragma Restrictions (No_Finalization) applies, in which case we\n-   --  know that class-wide objects do not contain controlled parts.\n-\n-   function Has_New_Controlled_Component (E : Entity_Id) return Boolean;\n-   --  E is a type entity. Give the same result as Has_Controlled_Component\n-   --  except for tagged extensions where the result is True only if the\n-   --  latest extension contains a controlled component.\n-\n    function Make_Adjust_Call\n      (Obj_Ref   : Node_Id;\n       Typ       : Entity_Id;"}, {"sha": "ffab332f82d597445898010b7866457cd7abf771", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "patch": "@@ -36,7 +36,6 @@ with Errout;         use Errout;\n with Expander;       use Expander;\n with Exp_Ch3;        use Exp_Ch3;\n with Exp_Ch6;        use Exp_Ch6;\n-with Exp_Ch7;        use Exp_Ch7;\n with Exp_Ch9;        use Exp_Ch9;\n with Exp_Dbug;       use Exp_Dbug;\n with Exp_Tss;        use Exp_Tss;\n@@ -6748,18 +6747,7 @@ package body Sem_Ch6 is\n       --  may not be known yet (for private types).\n \n       if not Has_Delayed_Freeze (Designator) and then Expander_Active then\n-         declare\n-            Typ  : constant Entity_Id := Etype (Designator);\n-            Utyp : constant Entity_Id := Underlying_Type (Typ);\n-\n-         begin\n-            if Is_Limited_View (Typ) then\n-               Set_Returns_By_Ref (Designator);\n-\n-            elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n-               Set_Returns_By_Ref (Designator);\n-            end if;\n-         end;\n+         Compute_Returns_By_Ref (Designator);\n       end if;\n    end Check_Delayed_Subprogram;\n "}, {"sha": "e7e0c8443016fa17c8b0eaa47297588f03b934b4", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "patch": "@@ -6672,6 +6672,23 @@ package body Sem_Util is\n       return N;\n    end Compile_Time_Constraint_Error;\n \n+   ----------------------------\n+   -- Compute_Returns_By_Ref --\n+   ----------------------------\n+\n+   procedure Compute_Returns_By_Ref (Func : Entity_Id) is\n+      Typ  : constant Entity_Id := Etype (Func);\n+      Utyp : constant Entity_Id := Underlying_Type (Typ);\n+\n+   begin\n+      if Is_Limited_View (Typ) then\n+         Set_Returns_By_Ref (Func);\n+\n+      elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n+         Set_Returns_By_Ref (Func);\n+      end if;\n+   end Compute_Returns_By_Ref;\n+\n    --------------------------------\n    -- Collect_Types_In_Hierarchy --\n    --------------------------------\n@@ -7072,6 +7089,15 @@ package body Sem_Util is\n       end if;\n    end Current_Subprogram;\n \n+   -------------------------------\n+   -- CW_Or_Has_Controlled_Part --\n+   -------------------------------\n+\n+   function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean is\n+   begin\n+      return Is_Class_Wide_Type (T) or else Needs_Finalization (T);\n+   end CW_Or_Has_Controlled_Part;\n+\n    -------------------------------\n    -- Deepest_Type_Access_Level --\n    -------------------------------"}, {"sha": "9f15f4406138e7e1ab6884432618a7db6b184bf9", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8926c29c5f512203b6ed6e1e944738fc0a6f0c4c/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=8926c29c5f512203b6ed6e1e944738fc0a6f0c4c", "patch": "@@ -582,6 +582,9 @@ package Sem_Util is\n    --  emitted immediately after the main message (and before output of any\n    --  message indicating that Constraint_Error will be raised).\n \n+   procedure Compute_Returns_By_Ref (Func : Entity_Id);\n+   --  Set the Returns_By_Ref flag on Func if appropriate\n+\n    generic\n       with function Predicate (Typ : Entity_Id) return Boolean;\n    function Collect_Types_In_Hierarchy\n@@ -653,6 +656,12 @@ package Sem_Util is\n    --  Current_Scope is returned. The returned value is Empty if this is called\n    --  from a library package which is not within any subprogram.\n \n+   function CW_Or_Has_Controlled_Part (T : Entity_Id) return Boolean;\n+   --  True if T is a class-wide type, or if it has controlled parts (\"part\"\n+   --  means T or any of its subcomponents). Same as Needs_Finalization, except\n+   --  when pragma Restrictions (No_Finalization) applies, in which case we\n+   --  know that class-wide objects do not contain controlled parts.\n+\n    function Deepest_Type_Access_Level (Typ : Entity_Id) return Uint;\n    --  Same as Type_Access_Level, except that if the type is the type of an Ada\n    --  2012 stand-alone object of an anonymous access type, then return the\n@@ -2556,8 +2565,7 @@ package Sem_Util is\n    --  entity E. If no such instance exits, return Empty.\n \n    function Needs_Finalization (Typ : Entity_Id) return Boolean;\n-   --  Determine whether type Typ is controlled and thus requires finalization\n-   --  actions.\n+   --  True if Typ requires finalization actions\n \n    function Needs_One_Actual (E : Entity_Id) return Boolean;\n    --  Returns True if a function has defaults for all but its first formal,"}]}