{"sha": "d9ac3a0784f6a82efa87185a888773e1df27e3ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhYzNhMDc4NGY2YTgyZWZhODcxODVhODg4NzczZTFkZjI3ZTNiYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-10-29T21:21:57Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-10-29T21:21:57Z"}, "message": "Add -specs support\n\nFrom-SVN: r13075", "tree": {"sha": "fa87f0beef110dde3e629e7422d6fec1e43afe1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa87f0beef110dde3e629e7422d6fec1e43afe1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9ac3a0784f6a82efa87185a888773e1df27e3ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ac3a0784f6a82efa87185a888773e1df27e3ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ac3a0784f6a82efa87185a888773e1df27e3ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ac3a0784f6a82efa87185a888773e1df27e3ba/comments", "author": null, "committer": null, "parents": [{"sha": "47a22692778c44f0847bf2e7016feb2e56a1a9b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a22692778c44f0847bf2e7016feb2e56a1a9b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a22692778c44f0847bf2e7016feb2e56a1a9b8"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "8d502136321d33f3d97e8dd1a2511c84d4ef8816", "filename": "gcc/gcc.c", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ac3a0784f6a82efa87185a888773e1df27e3ba/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ac3a0784f6a82efa87185a888773e1df27e3ba/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=d9ac3a0784f6a82efa87185a888773e1df27e3ba", "patch": "@@ -513,6 +513,13 @@ static char *multilib_defaults_raw[] = MULTILIB_DEFAULTS;\n static struct { char *name, *spec; } extra_specs[] = { EXTRA_SPECS };\n #endif\n \n+struct user_specs {\n+  struct user_specs *next;\n+  char *filename;\n+};\n+\n+static struct user_specs *user_specs_head, *user_specs_tail;\n+\n /* This defines which switch letters take arguments.  */\n \n #define DEFAULT_SWITCH_TAKES_ARG(CHAR)      \\\n@@ -533,7 +540,7 @@ static struct { char *name, *spec; } extra_specs[] = { EXTRA_SPECS };\n   || !strcmp (STR, \"imacros\") || !strcmp (STR, \"aux-info\") \\\n   || !strcmp (STR, \"idirafter\") || !strcmp (STR, \"iprefix\") \\\n   || !strcmp (STR, \"iwithprefix\") || !strcmp (STR, \"iwithprefixbefore\") \\\n-  || !strcmp (STR, \"isystem\"))\n+  || !strcmp (STR, \"isystem\") || !strcmp (STR, \"specs\"))\n \n #ifndef WORD_SWITCH_TAKES_ARG\n #define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n@@ -815,6 +822,7 @@ struct option_map option_map[] =\n    {\"--save-temps\", \"-save-temps\", 0},\n    {\"--shared\", \"-shared\", 0},\n    {\"--silent\", \"-q\", 0},\n+   {\"--specs\", \"-specs=\", \"aj\"},\n    {\"--static\", \"-static\", 0},\n    {\"--symbolic\", \"-symbolic\", 0},\n    {\"--target\", \"-b\", \"a\"},\n@@ -2438,6 +2446,36 @@ process_command (argc, argv)\n \t  save_temps_flag = 1;\n \t  n_switches++;\n \t}\n+      else if (strcmp (argv[i], \"-specs\") == 0)\n+\t{\n+\t  struct user_specs *user = (struct user_specs *)\n+\t    xmalloc (sizeof (struct user_specs));\n+\t  if (++i >= argc)\n+\t    fatal (\"argument to `-specs' is missing\");\n+\n+\t  user->next = (struct user_specs *)0;\n+\t  user->filename = argv[i];\n+\t  if (user_specs_tail)\n+\t    user_specs_tail->next = user;\n+\t  else\n+\t    user_specs_head = user;\n+\t  user_specs_tail = user;\n+\t}\n+      else if (strncmp (argv[i], \"-specs=\", 7) == 0)\n+\t{\n+\t  struct user_specs *user = (struct user_specs *)\n+\t    xmalloc (sizeof (struct user_specs));\n+\t  if (strlen (argv[i]) == 7)\n+\t    fatal (\"argument to `-specs=' is missing\");\n+\n+\t  user->next = (struct user_specs *)0;\n+\t  user->filename = argv[i]+7;\n+\t  if (user_specs_tail)\n+\t    user_specs_tail->next = user;\n+\t  else\n+\t    user_specs_head = user;\n+\t  user_specs_tail = user;\n+\t}\n       else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n \t  register char *p = &argv[i][1];\n@@ -2688,6 +2726,10 @@ process_command (argc, argv)\n \t  infiles[n_infiles].language = 0;\n \t  infiles[n_infiles++].name = argv[i];\n \t}\n+      else if (strcmp (argv[i], \"-specs\") == 0)\n+\ti++;\n+      else if (strncmp (argv[i], \"-specs=\", 7) == 0)\n+\t;\n       else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n \t  register char *p = &argv[i][1];\n@@ -4076,6 +4118,7 @@ main (argc, argv)\n   char *explicit_link_files;\n   char *specs_file;\n   char *p;\n+  struct user_specs *uptr;\n \n   p = argv[0] + strlen (argv[0]);\n   while (p != argv[0] && p[-1] != '/' && p[-1] != DIR_SEPARATOR) --p;\n@@ -4188,6 +4231,14 @@ main (argc, argv)\n     }\n #endif\n \n+  /* Process any user specified specs in the order given on the command\n+     line.  */\n+  for (uptr = user_specs_head; uptr; uptr = uptr->next)\n+    {\n+      char *filename = find_a_file (&startfile_prefixes, uptr->filename, R_OK);\n+      read_specs (filename ? filename : uptr->filename);\n+    }\n+\n   /* If not cross-compiling, look for startfiles in the standard places.  */\n   /* The fact that these are done here, after reading the specs file,\n      means that it cannot be found in these directories."}]}