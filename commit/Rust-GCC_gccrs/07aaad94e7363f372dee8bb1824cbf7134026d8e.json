{"sha": "07aaad94e7363f372dee8bb1824cbf7134026d8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhYWFkOTRlNzM2M2YzNzJkZWU4YmIxODI0Y2JmNzEzNDAyNmQ4ZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@freesoft.cz", "date": "1999-12-17T00:47:46Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "1999-12-17T00:47:46Z"}, "message": "regmove.c (copy_src_to_dest): Remove loop_depth parameter.\n\n\t* regmove.c (copy_src_to_dest): Remove loop_depth parameter.\n\t(optimize_reg_copy_1): Remove REG_N_REFS updating code.\n\t(optimize_reg_copy_2, copy_src_to_dest, fixup_match_2): Likewise.\n\t(regmove_optimize, fixup_match_1): Likewise.\n\nFrom-SVN: r30986", "tree": {"sha": "872192db42d49c6cd4ff58b4d509542eb93412a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/872192db42d49c6cd4ff58b4d509542eb93412a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07aaad94e7363f372dee8bb1824cbf7134026d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07aaad94e7363f372dee8bb1824cbf7134026d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07aaad94e7363f372dee8bb1824cbf7134026d8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07aaad94e7363f372dee8bb1824cbf7134026d8e/comments", "author": null, "committer": null, "parents": [{"sha": "e9e808584efc60a8d2de1327cc2217b33dae4b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e808584efc60a8d2de1327cc2217b33dae4b32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e808584efc60a8d2de1327cc2217b33dae4b32"}], "stats": {"total": 60, "additions": 16, "deletions": 44}, "files": [{"sha": "891b4968de4f9598c646854bc76a8ca12ccaf0bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aaad94e7363f372dee8bb1824cbf7134026d8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aaad94e7363f372dee8bb1824cbf7134026d8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07aaad94e7363f372dee8bb1824cbf7134026d8e", "patch": "@@ -1,5 +1,10 @@\n Fri Dec 17 01:32:38 MET 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n+\t* regmove.c (copy_src_to_dest): Remove loop_depth parameter.\n+\t(optimize_reg_copy_1): Remove REG_N_REFS updating code.\n+\t(optimize_reg_copy_2, copy_src_to_dest, fixup_match_2): Likewise.\n+\t(regmove_optimize, fixup_match_1): Likewise.\n+\n \t* i386.md (HI to SImode promoting splitters): Rewrite.\n \t(pushsf mem peep2): New.\n \t(testhi to andhi peep2): Remove."}, {"sha": "8b2bc0b57c1bb3088efab1963cf9098ede5a355f", "filename": "gcc/regmove.c", "status": "modified", "additions": 11, "deletions": 44, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07aaad94e7363f372dee8bb1824cbf7134026d8e/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07aaad94e7363f372dee8bb1824cbf7134026d8e/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=07aaad94e7363f372dee8bb1824cbf7134026d8e", "patch": "@@ -403,10 +403,7 @@ optimize_reg_copy_1 (insn, dest, src)\n \n   for (p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n     {\n-      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN\n-\t  || (GET_CODE (p) == NOTE\n-\t      && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n-\t\t  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN)\n \tbreak;\n \n       /* ??? We can't scan past the end of a basic block without updating\n@@ -591,10 +588,7 @@ optimize_reg_copy_2 (insn, dest, src)\n \n   for (p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n     {\n-      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN\n-\t  || (GET_CODE (p) == NOTE\n-\t      && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n-\t\t  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN)\n \tbreak;\n \n       /* ??? We can't scan past the end of a basic block without updating\n@@ -668,10 +662,7 @@ optimize_reg_copy_3 (insn, dest, src)\n     return;\n   for (p = PREV_INSN (insn); p && ! reg_set_p (src_reg, p); p = PREV_INSN (p))\n     {\n-      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN\n-\t  || (GET_CODE (p) == NOTE\n-\t      && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n-\t\t  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN)\n \treturn;\n \n       /* ??? We can't scan past the end of a basic block without updating\n@@ -949,10 +940,7 @@ fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n       rtx pset;\n \n       if (GET_CODE (p) == CODE_LABEL\n-          || GET_CODE (p) == JUMP_INSN\n-          || (GET_CODE (p) == NOTE\n-              && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n-                  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+          || GET_CODE (p) == JUMP_INSN)\n         break;\n \n       /* ??? We can't scan past the end of a basic block without updating\n@@ -1000,10 +988,7 @@ fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n \t      for (p = PREV_INSN (insn); p; p = PREV_INSN (p))\n \t\t{\n \t\t  if (GET_CODE (p) == CODE_LABEL\n-\t\t      || GET_CODE (p) == JUMP_INSN\n-\t\t      || (GET_CODE (p) == NOTE\n-\t\t\t  && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n-\t\t\t      || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+\t\t      || GET_CODE (p) == JUMP_INSN)\n \t\t    break;\n \t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \t\t    continue;\n@@ -1017,10 +1002,7 @@ fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n \t      for (p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n \t\t{\n \t\t  if (GET_CODE (p) == CODE_LABEL\n-\t\t      || GET_CODE (p) == JUMP_INSN\n-\t\t      || (GET_CODE (p) == NOTE\n-\t\t\t  && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n-\t\t\t      || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+\t\t      || GET_CODE (p) == JUMP_INSN)\n \t\t    break;\n \t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n \t\t    continue;\n@@ -1388,10 +1370,7 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t\t  rtx pset;\n \n \t\t  if (GET_CODE (p) == CODE_LABEL\n-\t\t      || GET_CODE (p) == JUMP_INSN\n-\t\t      || (GET_CODE (p) == NOTE\n-\t\t\t  && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n-\t\t\t      || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+\t\t      || GET_CODE (p) == JUMP_INSN)\n \t\t    break;\n \n \t\t  /* ??? We can't scan past the end of a basic block without\n@@ -1678,10 +1657,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \n   for (length = s_length = 0, p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n     {\n-      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN\n-\t  || (GET_CODE (p) == NOTE\n-\t      && (NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_BEG\n-\t\t  || NOTE_LINE_NUMBER (p) == NOTE_INSN_LOOP_END)))\n+      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN)\n \tbreak;\n \n       /* ??? We can't scan past the end of a basic block without updating\n@@ -1727,10 +1703,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t\tbreak;\n \t      for (q = p; q; q = NEXT_INSN (q))\n \t\t{\n-\t\t  if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN\n-\t\t      || (GET_CODE (q) == NOTE\n-\t\t\t  && (NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_BEG\n-\t\t\t      || NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_END)))\n+\t\t  if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN)\n \t\t    {\n \t\t      q = 0;\n \t\t      break;\n@@ -1906,10 +1879,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t{\n \t  for (q = PREV_INSN (insn); q; q = PREV_INSN(q))\n \t    {\n-\t      if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN\n-\t\t  || (GET_CODE (q) == NOTE\n-\t\t      && (NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_BEG\n-\t\t\t  || NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_END)))\n+\t      if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN)\n \t\t{\n \t\t  q = 0;\n \t\t  break;\n@@ -1981,10 +1951,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n       inc_dest = post_inc_set ? SET_DEST (post_inc_set) : src;\n       for (q = post_inc; (q = NEXT_INSN (q)); )\n \t{\n-\t  if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN\n-\t      || (GET_CODE (q) == NOTE\n-\t\t  && (NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_BEG\n-\t\t      || NOTE_LINE_NUMBER (q) == NOTE_INSN_LOOP_END)))\n+\t  if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN)\n \t    break;\n \n \t  /* ??? We can't scan past the end of a basic block without updating"}]}