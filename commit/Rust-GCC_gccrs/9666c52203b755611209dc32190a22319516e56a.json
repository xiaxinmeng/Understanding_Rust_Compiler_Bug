{"sha": "9666c52203b755611209dc32190a22319516e56a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2NmM1MjIwM2I3NTU2MTEyMDlkYzMyMTkwYTIyMzE5NTE2ZTU2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-09T20:17:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-09T20:17:40Z"}, "message": "affinity-fmt.c: Include inttypes.h if HAVE_INTTYPES_H.\n\n\t* affinity-fmt.c: Include inttypes.h if HAVE_INTTYPES_H.\n\t(gomp_display_affinity): Use __builtin_choose_expr to handle\n\tproperly handle argument having integral, or pointer or some other\n\ttype.  If inttypes.h is available and PRIx64 is defined, use PRIx64\n\twith uint64_t type instead of %llx and unsigned long long.\n\nFrom-SVN: r265985", "tree": {"sha": "1370d120e16846f9701579bc47f8290563d87579", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1370d120e16846f9701579bc47f8290563d87579"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9666c52203b755611209dc32190a22319516e56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9666c52203b755611209dc32190a22319516e56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9666c52203b755611209dc32190a22319516e56a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9666c52203b755611209dc32190a22319516e56a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "213fd71709e40dbcf601f765e80a56b1c624e4a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213fd71709e40dbcf601f765e80a56b1c624e4a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213fd71709e40dbcf601f765e80a56b1c624e4a8"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "0b5d2e30d058ce6823157a6660a9e9c67b65c25d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9666c52203b755611209dc32190a22319516e56a/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9666c52203b755611209dc32190a22319516e56a/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=9666c52203b755611209dc32190a22319516e56a", "patch": "@@ -1,5 +1,11 @@\n 2018-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* affinity-fmt.c: Include inttypes.h if HAVE_INTTYPES_H.\n+\t(gomp_display_affinity): Use __builtin_choose_expr to handle\n+\tproperly handle argument having integral, or pointer or some other\n+\ttype.  If inttypes.h is available and PRIx64 is defined, use PRIx64\n+\twith uint64_t type instead of %llx and unsigned long long.\n+\n \t* testsuite/libgomp.c-c++-common/task-reduction-13.c: New test.\n \t* testsuite/libgomp.c-c++-common/task-reduction-14.c: New test.\n "}, {"sha": "9e5c5f754eb490682a832b232b9924e0337225e8", "filename": "libgomp/affinity-fmt.c", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9666c52203b755611209dc32190a22319516e56a/libgomp%2Faffinity-fmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9666c52203b755611209dc32190a22319516e56a/libgomp%2Faffinity-fmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Faffinity-fmt.c?ref=9666c52203b755611209dc32190a22319516e56a", "patch": "@@ -30,6 +30,9 @@\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n+#ifdef HAVE_INTTYPES_H\n+# include <inttypes.h>  /* For PRIx64.  */\n+#endif\n #ifdef HAVE_UNAME\n #include <sys/utsname.h>\n #endif\n@@ -356,37 +359,42 @@ gomp_display_affinity (char *buffer, size_t size,\n \t  goto do_int;\n \tcase 'i':\n #if defined(LIBGOMP_USE_PTHREADS) && defined(__GNUC__)\n-\t  /* Handle integral pthread_t.  */\n-\t  if (__builtin_classify_type (handle) == 1)\n-\t    {\n-\t      char buf[3 * (sizeof (handle) + sizeof (int)) + 4];\n-\n-\t      if (sizeof (handle) == sizeof (long))\n-\t\tsprintf (buf, \"0x%lx\", (long) handle);\n-\t      else if (sizeof (handle) == sizeof (long long))\n-\t\tsprintf (buf, \"0x%llx\", (long long) handle);\n-\t      else\n-\t\tsprintf (buf, \"0x%x\", (int) handle);\n-\t      gomp_display_num (buffer, size, &ret, zero, right, sz, buf);\n-\t      break;\n-\t    }\n-\t  /* And pointer pthread_t.  */\n-\t  else if (__builtin_classify_type (handle) == 5)\n-\t    {\n-\t      char buf[3 * (sizeof (uintptr_t) + sizeof (int)) + 4];\n+\t  {\n+\t    char buf[3 * (sizeof (handle) + sizeof (uintptr_t) + sizeof (int))\n+\t\t     + 4];\n+\t    /* This macro returns expr unmodified for integral or pointer\n+\t       types and 0 for anything else (e.g. aggregates).  */\n+#define gomp_nonaggregate(expr) \\\n+  __builtin_choose_expr (__builtin_classify_type (expr) == 1\t\t    \\\n+\t\t\t || __builtin_classify_type (expr) == 5, expr, 0)\n+\t    /* This macro returns expr unmodified for integral types,\n+\t       (uintptr_t) (expr) for pointer types and 0 for anything else\n+\t       (e.g. aggregates).  */\n+#define gomp_integral(expr) \\\n+  __builtin_choose_expr (__builtin_classify_type (expr) == 5,\t\t    \\\n+\t\t\t (uintptr_t) gomp_nonaggregate (expr),\t\t    \\\n+\t\t\t gomp_nonaggregate (expr))\n \n-\t      if (sizeof (uintptr_t) == sizeof (long))\n-\t\tsprintf (buf, \"0x%lx\", (long) (uintptr_t) handle);\n-\t      else if (sizeof (uintptr_t) == sizeof (long long))\n-\t\tsprintf (buf, \"0x%llx\", (long long) (uintptr_t) handle);\n-\t      else\n-\t\tsprintf (buf, \"0x%x\", (int) (uintptr_t) handle);\n-\t      gomp_display_num (buffer, size, &ret, zero, right, sz, buf);\n-\t      break;\n-\t    }\n+\t    if (sizeof (gomp_integral (handle)) == sizeof (unsigned long))\n+\t      sprintf (buf, \"0x%lx\", (unsigned long) gomp_integral (handle));\n+#if defined (HAVE_INTTYPES_H) && defined (PRIx64)\n+\t    else if (sizeof (gomp_integral (handle)) == sizeof (uint64_t))\n+\t      sprintf (buf, \"0x%\" PRIx64, (uint64_t) gomp_integral (handle));\n+#else\n+\t    else if (sizeof (gomp_integral (handle))\n+\t\t     == sizeof (unsigned long long))\n+\t      sprintf (buf, \"0x%llx\",\n+\t\t       (unsigned long long) gomp_integral (handle));\n #endif\n+\t    else\n+\t      sprintf (buf, \"0x%x\", (unsigned int) gomp_integral (handle));\n+\t    gomp_display_num (buffer, size, &ret, zero, right, sz, buf);\n+\t    break;\n+\t  }\n+#else\n \t  val = 0;\n \t  goto do_int;\n+#endif\n \tcase 'A':\n \t  if (sz == (size_t) -1)\n \t    gomp_display_affinity_place (buffer, size, &ret,"}]}