{"sha": "f3df0b3cde2476f77059e4c3a704ab1960fa883a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNkZjBiM2NkZTI0NzZmNzcwNTllNGMzYTcwNGFiMTk2MGZhODgzYQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-01-11T11:23:43Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-01-11T11:23:43Z"}, "message": "Reduce the size of variant, it doesn't need an index of type size_t internally.\n\nReduce the size of variant, it doesn't need an index of\ntype size_t internally.\n* include/std/variant (parse_numbers.h): New include.\n(__select_index): New.\n(_Variant_storage<false, _Types...>::_M_reset_impl): Use\n_index_type for comparison with variant_npos.\n(_Variant_storage<false, _Types...>::__index_type): New.\n(_Variant_storage<false, _Types...>::_M_index): Change the\ntype from size_t to __index_type.\n(_Variant_storage<true, _Types...>::__index_type): New.\n(_Variant_storage<true, _Types...>::_M_index): Change the\ntype from size_t to __index_type.\n(_Variant_base::_M_valid): Use _Storage::__index_type\nfor comparison with variant_npos.\n(variant::index): Use _Base::_Storage::__index_type\nfor comparison with variant_npos.\n* testsuite/20_util/variant/index_type.cc: New.\n\nFrom-SVN: r244309", "tree": {"sha": "8e92072dbc8ee05ff40976301839998c89081a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e92072dbc8ee05ff40976301839998c89081a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3df0b3cde2476f77059e4c3a704ab1960fa883a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3df0b3cde2476f77059e4c3a704ab1960fa883a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3df0b3cde2476f77059e4c3a704ab1960fa883a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3df0b3cde2476f77059e4c3a704ab1960fa883a/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51020892466d37f71ee13137bdadcbb32545c55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51020892466d37f71ee13137bdadcbb32545c55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51020892466d37f71ee13137bdadcbb32545c55d"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "82e6ef60f770ae8258137d295a5f3d008bb2e259", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3df0b3cde2476f77059e4c3a704ab1960fa883a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3df0b3cde2476f77059e4c3a704ab1960fa883a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f3df0b3cde2476f77059e4c3a704ab1960fa883a", "patch": "@@ -1,3 +1,23 @@\n+2017-01-11  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tReduce the size of variant, it doesn't need an index of\n+\ttype size_t internally.\n+\t* include/std/variant (parse_numbers.h): New include.\n+\t(__select_index): New.\n+\t(_Variant_storage<false, _Types...>::_M_reset_impl): Use\n+\t_index_type for comparison with variant_npos.\n+\t(_Variant_storage<false, _Types...>::__index_type): New.\n+\t(_Variant_storage<false, _Types...>::_M_index): Change the\n+\ttype from size_t to __index_type.\n+\t(_Variant_storage<true, _Types...>::__index_type): New.\n+\t(_Variant_storage<true, _Types...>::_M_index): Change the\n+\ttype from size_t to __index_type.\n+\t(_Variant_base::_M_valid): Use _Storage::__index_type\n+\tfor comparison with variant_npos.\n+\t(variant::index): Use _Base::_Storage::__index_type\n+\tfor comparison with variant_npos.\n+\t* testsuite/20_util/variant/index_type.cc: New.\n+\n 2017-01-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/18_support/exception_ptr/60612-unexpected.cc: Adjust"}, {"sha": "6404fceb02bbabd3862ee9e47016089b92d661a6", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3df0b3cde2476f77059e4c3a704ab1960fa883a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3df0b3cde2476f77059e4c3a704ab1960fa883a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=f3df0b3cde2476f77059e4c3a704ab1960fa883a", "patch": "@@ -43,6 +43,7 @@\n #include <bits/functional_hash.h>\n #include <bits/invoke.h>\n #include <ext/aligned_buffer.h>\n+#include <bits/parse_numbers.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -314,6 +315,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<bool __trivially_destructible, typename... _Types>\n     struct _Variant_storage;\n \n+  template <typename... _Types>\n+  using __select_index =\n+    typename __select_int::_Select_int_base<sizeof...(_Types)+1,\n+\t\t\t\t\t    unsigned char,\n+\t\t\t\t\t    unsigned short>\n+    ::type::value_type;\n+\n   template<typename... _Types>\n     struct _Variant_storage<false, _Types...>\n     {\n@@ -332,7 +340,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<size_t... __indices>\n \tconstexpr void _M_reset_impl(std::index_sequence<__indices...>)\n \t{\n-\t  if (_M_index != variant_npos)\n+\t  if (_M_index != __index_type(variant_npos))\n \t    _S_vtable<__indices...>[_M_index](*this);\n \t}\n \n@@ -346,7 +354,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { _M_reset(); }\n \n       _Variadic_union<_Types...> _M_u;\n-      size_t _M_index;\n+      using __index_type = __select_index<_Types...>;\n+      __index_type _M_index;\n     };\n \n   template<typename... _Types>\n@@ -364,7 +373,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { _M_index = variant_npos; }\n \n       _Variadic_union<_Types...> _M_u;\n-      size_t _M_index;\n+      using __index_type = __select_index<_Types...>;\n+      __index_type _M_index;\n     };\n \n   // Helps SFINAE on special member functions. Otherwise it can live in variant\n@@ -487,7 +497,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr bool\n       _M_valid() const noexcept\n-      { return this->_M_index != variant_npos; }\n+      {\n+\treturn this->_M_index !=\n+\t  typename _Storage::__index_type(variant_npos);\n+      }\n     };\n \n   // For how many times does _Tp appear in _Tuple?\n@@ -1086,7 +1099,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return !this->_M_valid(); }\n \n       constexpr size_t index() const noexcept\n-      { return this->_M_index; }\n+      {\n+\tif (this->_M_index ==\n+\t    typename _Base::_Storage::__index_type(variant_npos))\n+\t  return variant_npos;\n+\treturn this->_M_index;\n+      }\n \n       void\n       swap(variant& __rhs)"}, {"sha": "e6d3dda40697489f57a547122f389fcb0c1be016", "filename": "libstdc++-v3/testsuite/20_util/variant/index_type.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3df0b3cde2476f77059e4c3a704ab1960fa883a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Findex_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3df0b3cde2476f77059e4c3a704ab1960fa883a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Findex_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Findex_type.cc?ref=f3df0b3cde2476f77059e4c3a704ab1960fa883a", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target x86_64-*-* powerpc*-*-* } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <variant>\n+\n+static_assert(sizeof(std::variant<signed char, unsigned char>)\n+\t      < sizeof(size_t));"}]}