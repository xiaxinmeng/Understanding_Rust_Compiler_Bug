{"sha": "84fbffb2c2ca27cf8368808a467a06734fae8ce0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmYmZmYjJjMmNhMjdjZjgzNjg4MDhhNDY3YTA2NzM0ZmFlOGNlMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-10-14T01:36:18Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-10-14T01:36:18Z"}, "message": "fixed-bit.c, [...]: Fix comment typos.\n\n\t* config/fixed-bit.c, config/i386/cpuid.h, config/i386/i386.c,\n\tconfig/i386/i386.md, config/i386/sse.md, function.c, jump.c,\n\tmodulo-sched.c, ra-conflict.c, toplev.c, tree-eh.c, tree-sra.c,\n\ttree-ssa-dse.c, tree-vect-analyze.c, tree-vect-patterns.c,\n\ttree-vect-transform.c: Fix comment typos.\n\t* doc/extend.texi: Fix a typo.\n\nFrom-SVN: r129291", "tree": {"sha": "fa292910ee8ad254d6fd20ee30ba53fae74d9ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa292910ee8ad254d6fd20ee30ba53fae74d9ab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84fbffb2c2ca27cf8368808a467a06734fae8ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fbffb2c2ca27cf8368808a467a06734fae8ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84fbffb2c2ca27cf8368808a467a06734fae8ce0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fbffb2c2ca27cf8368808a467a06734fae8ce0/comments", "author": null, "committer": null, "parents": [{"sha": "d06a846ba9cfffdd2ddbe36a1db7bf47b67a3c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06a846ba9cfffdd2ddbe36a1db7bf47b67a3c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06a846ba9cfffdd2ddbe36a1db7bf47b67a3c13"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "d02559e359e65804c8d83658528b23864363ead2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -1,3 +1,12 @@\n+2007-10-14  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/fixed-bit.c, config/i386/cpuid.h, config/i386/i386.c,\n+\tconfig/i386/i386.md, config/i386/sse.md, function.c, jump.c,\n+\tmodulo-sched.c, ra-conflict.c, toplev.c, tree-eh.c, tree-sra.c,\n+\ttree-ssa-dse.c, tree-vect-analyze.c, tree-vect-patterns.c,\n+\ttree-vect-transform.c: Fix comment typos.\n+\t* doc/extend.texi: Fix a typo.\n+\n 2007-10-13  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/aix53.h: New file."}, {"sha": "fc0e948ba25143e34369b63229e7ebd38ca2af63", "filename": "gcc/config/fixed-bit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Ffixed-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Ffixed-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffixed-bit.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -465,7 +465,7 @@ FIXED_DIVHELPER (FIXED_C_TYPE a, FIXED_C_TYPE b, word_type satp)\n   r = pos_a >> (FIXED_WIDTH - FBITS);\n #endif\n \n-  /* Unsigned divide r by pos_b to quo_r.  The remanider is in mod.  */\n+  /* Unsigned divide r by pos_b to quo_r.  The remainder is in mod.  */\n   quo_r = (UINT_C_TYPE)r / (UINT_C_TYPE)pos_b;\n   mod = (UINT_C_TYPE)r % (UINT_C_TYPE)pos_b;\n   quo_s = 0;"}, {"sha": "f272b67e6d214d8dfcbe2d0d52d49a59f4809f32", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -117,7 +117,7 @@ __get_cpuid_max (unsigned int __ext, unsigned int *__sig)\n /* Return cpuid data for requested cpuid level, as found in returned\n    eax, ebx, ecx and edx registers.  The function checks if cpuid is\n    supported and returns 1 for valid cpuid information or 0 for\n-   unsupported cpuid level.  All pointers are requred to be non-null.  */\n+   unsupported cpuid level.  All pointers are required to be non-null.  */\n \n static __inline int\n __get_cpuid (unsigned int __level,"}, {"sha": "4bf61de1f9dc2c314b1fe03e6552b9073c38b3d1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -1429,7 +1429,7 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n      replacement is long decoded, so this split helps here as well.  */\n   m_K6,\n \n-  /* X86_TUNE_USE_VECTOR_CONVERTS: Preffer vector packed SSE conversion\n+  /* X86_TUNE_USE_VECTOR_CONVERTS: Prefer vector packed SSE conversion\n      from integer to FP. */\n   m_AMDFAM10,\n };\n@@ -13442,8 +13442,8 @@ ix86_expand_sse4_unpack (rtx operands[2], bool unsigned_p, bool high_p)\n #define PPERM_REV_INV\t0x60\t\t/* bit reverse & invert src */\n #define PPERM_ZERO\t0x80\t\t/* all 0's */\n #define PPERM_ONES\t0xa0\t\t/* all 1's */\n-#define PPERM_SIGN\t0xc0\t\t/* propigate sign bit */\n-#define PPERM_INV_SIGN\t0xe0\t\t/* invert & propigate sign */\n+#define PPERM_SIGN\t0xc0\t\t/* propagate sign bit */\n+#define PPERM_INV_SIGN\t0xe0\t\t/* invert & propagate sign */\n \n #define PPERM_SRC1\t0x00\t\t/* use first source byte */\n #define PPERM_SRC2\t0x10\t\t/* use second source byte */\n@@ -24879,7 +24879,7 @@ ix86_expand_round (rtx operand0, rtx operand1)\n /* Validate whether a SSE5 instruction is valid or not.\n    OPERANDS is the array of operands.\n    NUM is the number of operands.\n-   USES_OC0 is true if the instruction uses OC0 and provides 4 varients.\n+   USES_OC0 is true if the instruction uses OC0 and provides 4 variants.\n    NUM_MEMORY is the maximum number of memory operands to accept.  */\n bool ix86_sse5_valid_op_p (rtx operands[], rtx insn, int num, bool uses_oc0, int num_memory)\n {\n@@ -24960,7 +24960,7 @@ bool ix86_sse5_valid_op_p (rtx operands[], rtx insn, int num, bool uses_oc0, int\n   else if (num == 4 && num_memory == 2)\n     {\n       /* If there are two memory operations, we can load one of the memory ops\n-\t into the destination register.  This is for optimizating the\n+\t into the destination register.  This is for optimizing the\n \t multiply/add ops, which the combiner has optimized both the multiply\n \t and the add insns to have a memory operation.  We have to be careful\n \t that the destination doesn't overlap with the inputs.  */"}, {"sha": "ec2787f096c568ffc8dc2651100a08d53f982f15", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -207,7 +207,7 @@\n    (UNSPECV_PROLOGUE_USE\t14)\n   ])\n \n-;; Constants to represent pcomtrue/pcomfalse varients\n+;; Constants to represent pcomtrue/pcomfalse variants\n (define_constants\n   [(PCOM_FALSE\t\t\t0)\n    (PCOM_TRUE\t\t\t1)\n@@ -4840,7 +4840,7 @@\n      }\n    /* Offload operand of cvtsi2ss and cvtsi2sd into memory for\n       !TARGET_INTER_UNIT_CONVERSIONS\n-      It is neccesary for the patterns to not accept nonemmory operands\n+      It is necessary for the patterns to not accept nonmemory operands\n       as we would optimize out later.  */\n    else if (!TARGET_INTER_UNIT_CONVERSIONS\n \t    && TARGET_SSE_MATH && SSE_FLOAT_MODE_P (GET_MODE (operands[0]))"}, {"sha": "6acaf9396bbddd4e5148a9e644b63034a7c26609", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -7749,7 +7749,7 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; SSE5 parallel integer mutliply/add instructions for the intrinisics\n+;; SSE5 parallel integer multiply/add instructions for the intrinisics\n (define_insn \"sse5_pmacsswd\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x,x\")\n \t(ss_plus:V4SI"}, {"sha": "82df683bd9ed6ad2a02f9ac54e3b87c3b75d85a2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -8143,7 +8143,7 @@ v2di __builtin_ia32_pshlq (v2di, v2di)\n v8hi __builtin_ia32_pshlw (v8hi, v8hi)\n @end smallexample\n \n-The following builtin-in functions are avaialble when @option{-msse5}\n+The following builtin-in functions are available when @option{-msse5}\n is used.  The second argument must be an integer constant and generate\n the machine instruction that is part of the name with the @samp{_imm}\n suffix removed."}, {"sha": "05bbd64204c2730a727c94511b28ad7bc9ffd865", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -5702,7 +5702,7 @@ match_asm_constraints_1 (rtx insn, rtx *p_sets, int noutputs)\n \n \t   asm (\"\" : \"=r\" (output), \"=m\" (input) : \"0\" (input))\n \n-\t Here 'input' is used in two occurences as input (once for the\n+\t Here 'input' is used in two occurrences as input (once for the\n \t input operand, once for the address in the second output operand).\n \t If we would replace only the occurence of the input operand (to\n \t make the matching) we would be left with this:\n@@ -5714,7 +5714,7 @@ match_asm_constraints_1 (rtx insn, rtx *p_sets, int noutputs)\n \t value, but different pseudos) where we formerly had only one.\n \t With more complicated asms this might lead to reload failures\n \t which wouldn't have happen without this pass.  So, iterate over\n-\t all operands and replace all occurences of the register used.  */\n+\t all operands and replace all occurrences of the register used.  */\n       for (j = 0; j < noutputs; j++)\n \tif (!rtx_equal_p (SET_DEST (p_sets[j]), input)\n \t    && reg_overlap_mentioned_p (input, SET_DEST (p_sets[j])))"}, {"sha": "e17f148862029a5da7466345f65eb6ed6df69b62", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -975,7 +975,7 @@ mark_jump_label (rtx x, rtx insn, int in_mem)\n \t\t     (insn != NULL && x == PATTERN (insn) && JUMP_P (insn)));\n }\n \n-/* Worker function for mark_jump_label.  IN_MEM is TRUE when X occurrs\n+/* Worker function for mark_jump_label.  IN_MEM is TRUE when X occurs\n    within a (MEM ...).  IS_TARGET is TRUE when X is to be treated as a\n    jump-target; when the JUMP_LABEL field of INSN should be set or a\n    REG_LABEL_TARGET note should be added, not a REG_LABEL_OPERAND"}, {"sha": "8e62c35f42bbce3dc9dcd1de58607e71b553a7e1", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -1760,7 +1760,7 @@ ps_insert_empty_row (partial_schedule_ptr ps, int split_row,\n \n /* Given U_NODE which is the node that failed to be scheduled; LOW and\n    UP which are the boundaries of it's scheduling window; compute using\n-   SCHED_NODES and II a row in the partial schedule that can be splitted\n+   SCHED_NODES and II a row in the partial schedule that can be split\n    which will separate a critical predecessor from a critical successor\n    thereby expanding the window, and return it.  */\n static int"}, {"sha": "bc93b8918173184f56ffe6dd13807b8478d22302", "filename": "gcc/ra-conflict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fra-conflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Fra-conflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-conflict.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -1086,7 +1086,7 @@ global_conflicts (void)\n \t\t}\n \n \t      /* Early clobbers, by definition, need to not only\n-\t\t clobber the registers that are live accross the insn\n+\t\t clobber the registers that are live across the insn\n \t\t but need to clobber the registers that die within the\n \t\t insn.  The clobbering for registers live across the\n \t\t insn is handled above.  */ "}, {"sha": "944f1993100d4a7ba0b4e381951cd5f6a6f8bc4a", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -2152,7 +2152,7 @@ lang_dependent_init (const char *name)\n void\n target_reinit (void)\n {\n-  /* Reinitialise RTL backend.  */\n+  /* Reinitialize RTL backend.  */\n   backend_init_target ();\n \n   /* Reinitialize lang-dependent parts.  */"}, {"sha": "1924353f7b1fcf1b14936d39cfa61615b5c2704b", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -2173,7 +2173,7 @@ optimize_double_finally (tree one, tree two)\n }\n \n /* Perform EH refactoring optimizations that are simpler to do when code\n-   flow has been lowered but EH structurs haven't.  */\n+   flow has been lowered but EH structures haven't.  */\n \n static void\n refactor_eh_r (tree t)"}, {"sha": "7060d541eaf4b0ba4126f06ad1f4774fb2094e20", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -2876,7 +2876,7 @@ struct bitfield_overlap_info\n };\n \n /* Return true if a BIT_FIELD_REF<(FLD->parent), BLEN, BPOS>\n-   expression (refereced as BF below) accesses any of the bits in FLD,\n+   expression (referenced as BF below) accesses any of the bits in FLD,\n    false if it doesn't.  If DATA is non-null, its field_len and\n    field_pos are filled in such that BIT_FIELD_REF<(FLD->parent),\n    field_len, field_pos> (referenced as BFLD below) represents the"}, {"sha": "3435fa3038215055b9c0f654b486c77728cec4be", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -653,7 +653,7 @@ execute_simple_dse (void)\n \tbitmap_ior_into (variables_loaded,\n \t\t\t LOADED_SYMS (bsi_stmt (bsi)));\n \n-  /* Look for statements writting into the write only variables.\n+  /* Look for statements writing into the write only variables.\n      And try to remove them.  */\n \n   FOR_EACH_BB (bb)"}, {"sha": "7825aab6e09262ccacddac98d8dfd86b32f1bcd8", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -2279,7 +2279,7 @@ vect_analyze_group_access (struct data_reference *dr)\n \n \n /* Analyze the access pattern of the data-reference DR.\n-   In case of non-consecutive accesse call vect_analyze_group_access() to\n+   In case of non-consecutive accesses call vect_analyze_group_access() to\n    analyze groups of strided accesses.  */\n \n static bool"}, {"sha": "24a0e5de5ace09c95ee4fd9e1e61f5a94d7b544c", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -545,7 +545,7 @@ vect_recog_pow_pattern (tree last_stmt, tree *type_in, tree *type_out)\n    stmts that constitute the pattern. In this case it will be:\n         WIDEN_SUM <x_t, sum_0>\n \n-   Note: The widneing-sum idiom is a widening reduction pattern that is \n+   Note: The widening-sum idiom is a widening reduction pattern that is \n \t vectorized without preserving all the intermediate results. It\n          produces only N/2 (widened) results (by summing up pairs of \n \t intermediate results) rather than all N results.  Therefore, we "}, {"sha": "c718e0742127284762526bcc17542349d737cedf", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84fbffb2c2ca27cf8368808a467a06734fae8ce0/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=84fbffb2c2ca27cf8368808a467a06734fae8ce0", "patch": "@@ -1381,7 +1381,7 @@ vect_get_constant_vectors (slp_tree slp_node, VEC(tree,heap) **vec_oprnds,\n }\n \n \n-/* Get vectorized defintions from SLP_NODE that contains corresponding\n+/* Get vectorized definitions from SLP_NODE that contains corresponding\n    vectorized def-stmts.  */\n  \n static void"}]}