{"sha": "460d53f816fe30093653cb22ef0feeb4bddc0895", "node_id": "C_kwDOANBUbNoAKDQ2MGQ1M2Y4MTZmZTMwMDkzNjUzY2IyMmVmMGZlZWI0YmRkYzA4OTU", "commit": {"author": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-12-21T03:02:50Z"}, "committer": {"name": "Xionghu Luo", "email": "luoxhu@linux.ibm.com", "date": "2021-12-21T03:02:50Z"}, "message": "rs6000: Replace UNSPECS with ss_plus/us_plus and ss_minus/us_minus\n\nThese four UNSPECS seems could be replaced with native RTL.\n\nFor\n\"(set (reg:SI VSCR_REGNO) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))\":\n\nQuoted David's explanation:\n\n\"The design came from the early implementation of Altivec:\n\nhttps://gcc.gnu.org/pipermail/gcc-patches/2002-May/077409.html\n\nIf one later checks for saturation (reads VSCR), one needs a\ncorresponding SET of the value.  It's set in an architecture-specific\nmanner that isn't described to GCC, but it's set, not just clobbered\nand in an undefined state.\n\nThe RTL does not describe that VSCR is set to the value 0.  The\n(const_int 0) is not the value set.  You can think of the (const_int\n0) as a dummy RTL argument to the VSCR UNSPEC.  UNSPEC requires at\nleast one argument and the pattern doesn't try to express the\nargument, so it uses a dummy RTL constant.  It's part of a PARALLEL\nand the plus or minus already expresses the data dependency of the\npattern on the input operands.\"\n\ngcc/ChangeLog:\n\n2021-12-21  Xionghu Luo  <luoxhu@linux.ibm.com>\n\n\t* config/rs6000/altivec.md (altivec_vaddu<VI_char>s): Replace\n\tUNSPEC_VADDU with us_plus.\n\t(altivec_vadds<VI_char>s): Replace UNSPEC_VADDS with ss_plus.\n\t(altivec_vsubu<VI_char>s): Replace UNSPEC_VSUBU with us_minus.\n\t(altivec_vsubs<VI_char>s): Replace UNSPEC_VSUBS with ss_minus.\n\t(altivec_abss_<mode>): Likewise.", "tree": {"sha": "a8bd971c4f6179ee7c798cc12ec7011d5317c2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8bd971c4f6179ee7c798cc12ec7011d5317c2b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/460d53f816fe30093653cb22ef0feeb4bddc0895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460d53f816fe30093653cb22ef0feeb4bddc0895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460d53f816fe30093653cb22ef0feeb4bddc0895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460d53f816fe30093653cb22ef0feeb4bddc0895/comments", "author": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xionghul", "id": 4607154, "node_id": "MDQ6VXNlcjQ2MDcxNTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4607154?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xionghul", "html_url": "https://github.com/xionghul", "followers_url": "https://api.github.com/users/xionghul/followers", "following_url": "https://api.github.com/users/xionghul/following{/other_user}", "gists_url": "https://api.github.com/users/xionghul/gists{/gist_id}", "starred_url": "https://api.github.com/users/xionghul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xionghul/subscriptions", "organizations_url": "https://api.github.com/users/xionghul/orgs", "repos_url": "https://api.github.com/users/xionghul/repos", "events_url": "https://api.github.com/users/xionghul/events{/privacy}", "received_events_url": "https://api.github.com/users/xionghul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7631a4d1de0e7105be5de29766454270b9820448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7631a4d1de0e7105be5de29766454270b9820448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7631a4d1de0e7105be5de29766454270b9820448"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "c2312cc1e0f7ad6d853df95d856cb0828413780d", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460d53f816fe30093653cb22ef0feeb4bddc0895/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460d53f816fe30093653cb22ef0feeb4bddc0895/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=460d53f816fe30093653cb22ef0feeb4bddc0895", "patch": "@@ -29,8 +29,6 @@\n    UNSPEC_VMHADDSHS\n    UNSPEC_VMHRADDSHS\n    UNSPEC_VADDCUW\n-   UNSPEC_VADDU\n-   UNSPEC_VADDS\n    UNSPEC_VAVGU\n    UNSPEC_VAVGS\n    UNSPEC_VMULEUB\n@@ -61,8 +59,6 @@\n    UNSPEC_VSR\n    UNSPEC_VSRO\n    UNSPEC_VSUBCUW\n-   UNSPEC_VSUBU\n-   UNSPEC_VSUBS\n    UNSPEC_VSUM4UBS\n    UNSPEC_VSUM4S\n    UNSPEC_VSUM2SWS\n@@ -517,19 +513,17 @@\n \n (define_insn \"altivec_vaddu<VI_char>s\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (unspec:VI [(match_operand:VI 1 \"register_operand\" \"v\")\n-\t\t    (match_operand:VI 2 \"register_operand\" \"v\")]\n-\t\t   UNSPEC_VADDU))\n+        (us_plus:VI (match_operand:VI 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VI 2 \"register_operand\" \"v\")))\n    (set (reg:SI VSCR_REGNO) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n   \"<VI_unit>\"\n   \"vaddu<VI_char>s %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"altivec_vadds<VI_char>s\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (unspec:VI [(match_operand:VI 1 \"register_operand\" \"v\")\n-                    (match_operand:VI 2 \"register_operand\" \"v\")]\n-\t\t   UNSPEC_VADDS))\n+        (ss_plus:VI (match_operand:VI 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:VI 2 \"register_operand\" \"v\")))\n    (set (reg:SI VSCR_REGNO) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n   \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"vadds<VI_char>s %0,%1,%2\"\n@@ -563,19 +557,17 @@\n \n (define_insn \"altivec_vsubu<VI_char>s\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (unspec:VI [(match_operand:VI 1 \"register_operand\" \"v\")\n-                    (match_operand:VI 2 \"register_operand\" \"v\")]\n-\t\t   UNSPEC_VSUBU))\n+        (us_minus:VI (match_operand:VI 1 \"register_operand\" \"v\")\n+\t\t     (match_operand:VI 2 \"register_operand\" \"v\")))\n    (set (reg:SI VSCR_REGNO) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n   \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"vsubu<VI_char>s %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"altivec_vsubs<VI_char>s\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-        (unspec:VI [(match_operand:VI 1 \"register_operand\" \"v\")\n-                    (match_operand:VI 2 \"register_operand\" \"v\")]\n-\t\t   UNSPEC_VSUBS))\n+        (ss_minus:VI (match_operand:VI 1 \"register_operand\" \"v\")\n+\t\t     (match_operand:VI 2 \"register_operand\" \"v\")))\n    (set (reg:SI VSCR_REGNO) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n   \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"vsubs<VI_char>s %0,%1,%2\"\n@@ -3480,9 +3472,8 @@\n (define_expand \"altivec_abss_<mode>\"\n   [(set (match_dup 2) (vec_duplicate:VI (const_int 0)))\n    (parallel [(set (match_dup 3)\n-\t\t   (unspec:VI [(match_dup 2)\n-\t\t\t       (match_operand:VI 1 \"register_operand\" \"v\")]\n-\t\t\t      UNSPEC_VSUBS))\n+\t\t   (ss_minus:VI (match_dup 2)\n+\t\t\t\t(match_operand:VI 1 \"register_operand\" \"v\")))\n \t      (set (reg:SI VSCR_REGNO)\n \t\t   (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))])\n    (set (match_operand:VI 0 \"register_operand\" \"=v\")"}]}