{"sha": "ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzNzhiYmVlN2VmNWZkYzlhODNhYzU2YzNmZWQ3ZDdjM2I1ZWU5Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-04-06T02:17:39Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-04-06T02:17:39Z"}, "message": "h8300.c (single_one_operand): Use GET_MODE_MASK.\n\n\t* config/h8300/h8300.c (single_one_operand): Use GET_MODE_MASK.\n\t(single_zero_operand): Likewise.\n\nFrom-SVN: r65291", "tree": {"sha": "f408bf59c19d0109cc818456489e52e1960612af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f408bf59c19d0109cc818456489e52e1960612af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f/comments", "author": null, "committer": null, "parents": [{"sha": "73205f20af3a66aeb6babd84bd98e605054473c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73205f20af3a66aeb6babd84bd98e605054473c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73205f20af3a66aeb6babd84bd98e605054473c9"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "c3381f07b6ff1fd664cd9dfc93652a73bc6cda30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f", "patch": "@@ -1,3 +1,8 @@\n+2003-04-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (single_one_operand): Use GET_MODE_MASK.\n+\t(single_zero_operand): Likewise.\n+\n 2003-04-05  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* Makefile.in (df.o):  Depend on alloc-pool.h, not obstack.h."}, {"sha": "a54055eca15cb219a911105deb2681d6e473afb5", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=ef378bbee7ef5fdc9a83ac56c3fed7d7c3b5ee9f", "patch": "@@ -757,13 +757,7 @@ single_one_operand (operand, mode)\n     {\n       /* We really need to do this masking because 0x80 in QImode is\n \t represented as -128 for example.  */\n-      unsigned HOST_WIDE_INT mask =\n-\t(GET_MODE_BITSIZE (mode) < HOST_BITS_PER_WIDE_INT)\n-\t? ((unsigned HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (mode)) - 1\n-\t: ~(unsigned HOST_WIDE_INT) 0;\n-      unsigned HOST_WIDE_INT value = INTVAL (operand);\n-\n-      if (exact_log2 (value & mask) >= 0)\n+      if (exact_log2 (INTVAL (operand) & GET_MODE_MASK (mode)) >= 0)\n \treturn 1;\n     }\n \n@@ -782,13 +776,7 @@ single_zero_operand (operand, mode)\n     {\n       /* We really need to do this masking because 0x80 in QImode is\n \t represented as -128 for example.  */\n-      unsigned HOST_WIDE_INT mask =\n-\t(GET_MODE_BITSIZE (mode) < HOST_BITS_PER_WIDE_INT)\n-\t? ((unsigned HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (mode)) - 1\n-\t: ~(unsigned HOST_WIDE_INT) 0;\n-      unsigned HOST_WIDE_INT value = INTVAL (operand);\n-\n-      if (exact_log2 (~value & mask) >= 0)\n+      if (exact_log2 (~INTVAL (operand) & GET_MODE_MASK (mode)) >= 0)\n \treturn 1;\n     }\n "}]}