{"sha": "93fd8bf764b64c5914090779633b1209c2422dc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNmZDhiZjc2NGI2NGM1OTE0MDkwNzc5NjMzYjEyMDljMjQyMmRjNg==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-04-02T07:20:26Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-04-02T07:20:26Z"}, "message": "2000-04-02  Neil Booth  <NeilB@earthling.net>\n\n\t* gcc.dg/cpp-cond.c  New tests.\n\t* gcc.dg/cpp-ifparen.c New tests.  Amend existing tests to make\n\taccidental success less likely.\n\t* gcc.dg/cpp-missingop.c  New tests.\n\t* gcc.dg/cpp-missingparen.c  New tests.\n\t* gcc.dg/cpp-shift.c  New tests.\n\t* gcc.dg/cpp-shortcircuit.c  New tests.\n\t* gcc.dg/cpp-unary.c  New tests.\n\nFrom-SVN: r32862", "tree": {"sha": "228a192c230fc915aaf2f31d51441ea5986e9db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/228a192c230fc915aaf2f31d51441ea5986e9db6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93fd8bf764b64c5914090779633b1209c2422dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93fd8bf764b64c5914090779633b1209c2422dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93fd8bf764b64c5914090779633b1209c2422dc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93fd8bf764b64c5914090779633b1209c2422dc6/comments", "author": null, "committer": null, "parents": [{"sha": "8dd2076d8ab463ce4342ad1e3ee8b31238ef53a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd2076d8ab463ce4342ad1e3ee8b31238ef53a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dd2076d8ab463ce4342ad1e3ee8b31238ef53a8"}], "stats": {"total": 174, "additions": 170, "deletions": 4}, "files": [{"sha": "2bb0cbada3fe49bd8c7c2c77721db8f9794b48ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93fd8bf764b64c5914090779633b1209c2422dc6", "patch": "@@ -1,3 +1,14 @@\n+2000-04-02  Neil Booth  <NeilB@earthling.net>\n+\n+\t* gcc.dg/cpp-cond.c  New tests.\n+\t* gcc.dg/cpp-ifparen.c New tests.  Amend existing tests to make\n+\taccidental success less likely.\n+\t* gcc.dg/cpp-missingop.c  New tests.\n+\t* gcc.dg/cpp-missingparen.c  New tests.\n+\t* gcc.dg/cpp-shift.c  New tests.\n+\t* gcc.dg/cpp-shortcircuit.c  New tests.\n+\t* gcc.dg/cpp-unary.c  New tests.\n+\n Wed Mar 29 13:44:23 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/compile/20000329-1.c: New test."}, {"sha": "e2af375215497369fb63c4e5d079d3bc9318b094", "filename": "gcc/testsuite/gcc.dg/cpp-cond.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-cond.c?ref=93fd8bf764b64c5914090779633b1209c2422dc6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do preprocess } */\n+\n+/* Test the ? : opearator, for precedence and both true and false.  */\n+\n+#if  1 ? 1 ? 2 : 0 : 0\n+#error OK\t/* { dg-error \"OK\" \"nested ? :\" } */\n+#endif\n+\n+#if  ((0) ? (1) ? (2) : (3) : (4) ? (5): (6)) == 5\n+#error OK\t/* { dg-error \"OK\" \"nested ? : with parens\" } */\n+#endif\n+\n+"}, {"sha": "98da88bfdc36a78488ccd1ed1c00741afe287713", "filename": "gcc/testsuite/gcc.dg/cpp-ifparen.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-ifparen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-ifparen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-ifparen.c?ref=93fd8bf764b64c5914090779633b1209c2422dc6", "patch": "@@ -1,9 +1,29 @@\n /* { dg-do preprocess } */\n \n-#if 2048 < (16 * (40) + 192)\n-#error\t\t\t/* { dg-bogus \"error\" \"with paren\" } */\n+/* These now use \"!=\" rather than \"<\" to increase chance of failure.  */\n+#if 16 * (1) + 4 != 20\n+#error\t\t/* { dg-bogus \"error\" \"with paren\" } */\n #endif\n \n-#if 2048 < (16 * 40 + 192)\n-#error\t\t\t/* { dg-bogus \"error\" \"without paren\" } */\n+#if 16 * 1 + 4 != 20\n+#error\t\t/* { dg-bogus \"error\" \"without paren\" } */\n+#endif\n+\n+#if ()\t        /* { dg-error \"expression between\" \"empty paren\" } */\n+#endif\n+\n+#if (1) == 1\n+#error\t\t/* { dg-error \"error\" \"simple parens no. 1\" } */\n+#endif\n+\n+#if (2)\n+#error\t\t/* { dg-error \"error\" \"simple parens no. 2\" } */\n+#endif\n+\n+#if 3 == (3)\n+#error\t\t/* { dg-error \"error\" \"simple parens no. 3\" } */\n+#endif\n+\n+#if (((-1) + 8)) == ((+2) * ((3)) - -1)\n+#error\t\t/* { dg-error \"error\" \"nested parentheses\" } */\n #endif"}, {"sha": "286896c74174c11df1e4e23e410b31f51205292a", "filename": "gcc/testsuite/gcc.dg/cpp-missingop.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-missingop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-missingop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-missingop.c?ref=93fd8bf764b64c5914090779633b1209c2422dc6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do preprocess } */\n+\n+/* Various illegal expressions with missing components.  */\n+\n+#if\t\t/* { dg-error \"no expression\" \"empty #if\" } */\n+#endif\n+\n+#if ~\t\t/* { dg-error \"no right op\" \"no unary operand\" } */\n+#endif\n+\n+#if 3 + * 6 + 4  /* { dg-error \"no left op\" \"no left operand\" } */\n+#endif\n+\n+#if 2 ~2\t/* { dg-error \"missing bin\" \"no binary operator\" } */\n+#endif\n+\n+#if 1 + 2 (3)   /* { dg-error \"missing bin\" \"immediate then open paren\" } */\n+#endif\n+\n+#if (2) 4 * 2  /* { dg-error \"missing bin\" \"close paren then immediate\" } */\n+#endif"}, {"sha": "bd2b53bc0372d9311559d223e37f72fdf221d148", "filename": "gcc/testsuite/gcc.dg/cpp-missingparen.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-missingparen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-missingparen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-missingparen.c?ref=93fd8bf764b64c5914090779633b1209c2422dc6", "patch": "@@ -0,0 +1,27 @@\n+/* Test various combinations of missing parentheses give the correct\n+   missing parenthesis message.  */\n+\n+/* { dg-do preprocess } */\n+\n+#if (1\n+#endif\n+\n+#if 2 * (3 + 4\n+#endif\n+\n+#if (2))\n+#endif\n+\n+#if )\n+#endif\n+\n+#if 4)\n+#endif\n+\n+/* { dg-error \"missing '\\\\)'\" \"missing ')' no. 1\"  { target *-*-* } 6 } */\n+/* { dg-error \"missing '\\\\)'\" \"missing ')' no. 2\"  { target *-*-* } 9 } */\n+/* { dg-error \"missing '\\\\('\" \"missing '(' no. 1\"  { target *-*-* } 12 } */\n+/* { dg-error \"missing '\\\\('\" \"missing '(' no. 2\"  { target *-*-* } 15 } */\n+/* { dg-error \"missing '\\\\('\" \"missing '(' no. 3\"  { target *-*-* } 18 } */\n+\n+"}, {"sha": "cbcb37fa090e068dbc28fc8b56d054f4076916ee", "filename": "gcc/testsuite/gcc.dg/cpp-shift.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-shift.c?ref=93fd8bf764b64c5914090779633b1209c2422dc6", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do preprocess } */\n+\n+/* Test shift operators.  */\n+\n+#if 1 << 4 != 16\n+#error\t\t/* { dg-bogus \"error\" \"<< +ve shift\" } */\n+#endif\n+\n+#if 19 >> 2 != 4\n+#error\t\t/* { dg-bogus \"error\" \">> +ve shift\" } */\n+#endif\n+\n+#if 17 << -2 != 17 >> 2\n+#error\t\t/* { dg-bogus \"error\" \"<< -ve shift\" } */\n+#endif\n+\n+#if 25 >> -2 != 25 << 2\n+#error\t\t/* { dg-bogus \"error\" \">> -ve shift\" } */\n+#endif\n+"}, {"sha": "d0c4647e7df6c64c03e08cea66c1b1b583b831d9", "filename": "gcc/testsuite/gcc.dg/cpp-shortcircuit.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-shortcircuit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-shortcircuit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-shortcircuit.c?ref=93fd8bf764b64c5914090779633b1209c2422dc6", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do preprocess } */\n+\n+/* Test that all operators correctly short circuit.  */\n+\n+#if (2 || 3 / 0) != 1\n+#error\t\t/* { dg-bogus \"error\" \"|| short circuit\" } */\n+#endif\n+\n+#if 0 && 3 / 0\n+#error\t\t/* { dg-bogus \"error\" \"&& short circuit\" } */\n+#endif\n+\n+#if 1 ? 0 : 3 / 0\n+#error\t\t/* { dg-bogus \"error\" \"? : right short circuit\" } */\n+#endif\n+\n+#if 0 ? 3 / 0 : 2\n+#else\n+#error\t\t/* { dg-bogus \"error\" \"? : left short circuit\" } */\n+#endif\n+\n+#if -1 ? 0 && 3 / 0 : 3 / 0 + 5 == 5\n+#error\t\t/* { dg-bogus \"error\" \"nested short circuiting\" } */\n+#endif"}, {"sha": "03758aacf30ad21465afd135347990b885fcb081", "filename": "gcc/testsuite/gcc.dg/cpp-unary.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93fd8bf764b64c5914090779633b1209c2422dc6/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp-unary.c?ref=93fd8bf764b64c5914090779633b1209c2422dc6", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do preprocess } */\n+\n+/* Test the various unary operators.  */\n+\n+#if 1 + + + 1   /* allow multiple unary sign operators :) */\n+#endif\n+\n+#if 8 - +3 != +4 + +1\n+#error\t\t/* { dg-bogus \"error\" \"unary +\" } */\n+#endif\n+\n+#if -2 - -1 != -1\n+#error\t\t/* { dg-bogus \"error\" \"unary -\" } */\n+#endif\n+\n+#if ~0 != -1\n+#error\t\t/* { dg-bogus \"error\" \"unary ~\" } */\n+#endif\n+\n+#if !0 && (!1 == 0) && !!1 != 1\n+#error\t\t/* { dg-bogus \"error\" \"unary !\" } */\n+#endif\n+\n+#if ~~8 != 8\n+#error\t\t/* { dg-bogus \"error\" \"double unary ~\" } */\n+#endif\n+\n+#if 5 + +!-4 != 5\n+#error\t\t/* { dg-bogus \"error\" \"compound unary +, !, -\" } */\n+#endif"}]}