{"sha": "b25b35c4ca7edf62118660048d5a7672653644f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1YjM1YzRjYTdlZGY2MjExODY2MDA0OGQ1YTc2NzI2NTM2NDRmNA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-11-03T10:36:35Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-11-03T10:36:35Z"}, "message": "re PR tree-optimization/63666 (FAIL: gcc.dg/vect/pr45752.c (internal compiler error))\n\n2014-11-03  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR tree-optimization/63666\n\t* fold-const.c: Include \"optabs.h\".\n\t(fold_ternary_loc) <VEC_PERM_EXPR>: Avoid canonicalizing a\n\tcan_vec_perm_p permutation to one that is not.\n\nFrom-SVN: r217033", "tree": {"sha": "7670d3794926bbfd749928ce3dc942b7d5e44ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7670d3794926bbfd749928ce3dc942b7d5e44ef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b25b35c4ca7edf62118660048d5a7672653644f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25b35c4ca7edf62118660048d5a7672653644f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25b35c4ca7edf62118660048d5a7672653644f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25b35c4ca7edf62118660048d5a7672653644f4/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "f31c42b9395ee1bc5c3b3397c0c35580673639e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25b35c4ca7edf62118660048d5a7672653644f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25b35c4ca7edf62118660048d5a7672653644f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b25b35c4ca7edf62118660048d5a7672653644f4", "patch": "@@ -1,3 +1,10 @@\n+2014-11-03  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR tree-optimization/63666\n+\t* fold-const.c: Include \"optabs.h\".\n+\t(fold_ternary_loc) <VEC_PERM_EXPR>: Avoid canonicalizing a\n+\tcan_vec_perm_p permutation to one that is not.\n+\n 2014-11-03  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n \n \t* ifcvt.c (noce_try_store_flag_mask): Check rtx cost."}, {"sha": "78d51829bfe20b8308aaf53bb9c824f9cc9b17ff", "filename": "gcc/fold-const.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25b35c4ca7edf62118660048d5a7672653644f4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25b35c4ca7edf62118660048d5a7672653644f4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b25b35c4ca7edf62118660048d5a7672653644f4", "patch": "@@ -82,6 +82,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"generic-match.h\"\n+#include \"optabs.h\"\n \n /* Nonzero if we are folding constants inside an initializer; zero\n    otherwise.  */\n@@ -14196,16 +14197,19 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n     case VEC_PERM_EXPR:\n       if (TREE_CODE (arg2) == VECTOR_CST)\n \t{\n-\t  unsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i, mask;\n-\t  unsigned char *sel = XALLOCAVEC (unsigned char, nelts);\n+\t  unsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i, mask, mask2;\n+\t  unsigned char *sel = XALLOCAVEC (unsigned char, 2 * nelts);\n+\t  unsigned char *sel2 = sel + nelts;\n \t  bool need_mask_canon = false;\n+\t  bool need_mask_canon2 = false;\n \t  bool all_in_vec0 = true;\n \t  bool all_in_vec1 = true;\n \t  bool maybe_identity = true;\n \t  bool single_arg = (op0 == op1);\n \t  bool changed = false;\n \n-\t  mask = single_arg ? (nelts - 1) : (2 * nelts - 1);\n+\t  mask2 = 2 * nelts - 1;\n+\t  mask = single_arg ? (nelts - 1) : mask2;\n \t  gcc_assert (nelts == VECTOR_CST_NELTS (arg2));\n \t  for (i = 0; i < nelts; i++)\n \t    {\n@@ -14216,13 +14220,10 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t      /* Make sure that the perm value is in an acceptable\n \t\t range.  */\n \t      wide_int t = val;\n-\t      if (wi::gtu_p (t, mask))\n-\t\t{\n-\t\t  need_mask_canon = true;\n-\t\t  sel[i] = t.to_uhwi () & mask;\n-\t\t}\n-\t      else\n-\t\tsel[i] = t.to_uhwi ();\n+\t      need_mask_canon |= wi::gtu_p (t, mask);\n+\t      need_mask_canon2 |= wi::gtu_p (t, mask2);\n+\t      sel[i] = t.to_uhwi () & mask;\n+\t      sel2[i] = t.to_uhwi () & mask2;\n \n \t      if (sel[i] < nelts)\n \t\tall_in_vec1 = false;\n@@ -14264,6 +14265,17 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t  if (op0 == op1 && !single_arg)\n \t    changed = true;\n \n+\t  /* Some targets are deficient and fail to expand a single\n+\t     argument permutation while still allowing an equivalent\n+\t     2-argument version.  */\n+\t  if (need_mask_canon && arg2 == op2\n+\t      && !can_vec_perm_p (TYPE_MODE (type), false, sel)\n+\t      && can_vec_perm_p (TYPE_MODE (type), false, sel2))\n+\t    {\n+\t      need_mask_canon = need_mask_canon2;\n+\t      sel = sel2;\n+\t    }\n+\n \t  if (need_mask_canon && arg2 == op2)\n \t    {\n \t      tree *tsel = XALLOCAVEC (tree, nelts);"}]}