{"sha": "f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU3ZGI0MDliYzBhM2RhOWVjNmU1OWNlNzI2ODE2MTJmN2ZlNzRhZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-02-26T19:45:51Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-02-26T19:45:51Z"}, "message": "2004-02-26  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/FileLockImpl.java\n\t(finalize): Made protected.\n\t* java/nio/channels/FileChannel.java\n\t(MapMode.READ_ONLY): Made final.\n\t(MapMode.READ_WRITE): Made final.\n\t(MapMode.PRIVATE): Made final.\n\t* java/nio/channels/SocketChannel.java\n\t(open): Simplified code.\n\t* java/nio/channels/spi/AbstractSelectableChannel.java\n\t(registered): Unused, removed.\n\t(keyFor): Check channel is open, only locate key\n\tand not add a new one.\n\t(register): Don't delete attachments.\n\nFrom-SVN: r78519", "tree": {"sha": "566784ef027ee453be4ea8900e4de4c2bd1167bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/566784ef027ee453be4ea8900e4de4c2bd1167bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/comments", "author": null, "committer": null, "parents": [{"sha": "135d78c60003ce8be95b69199c95c2abf755072c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135d78c60003ce8be95b69199c95c2abf755072c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135d78c60003ce8be95b69199c95c2abf755072c"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "7be2aebebb00735685158e96088fe23e7df136a8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "patch": "@@ -1,3 +1,19 @@\n+2004-02-26  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/FileLockImpl.java\n+\t(finalize): Made protected.\n+\t* java/nio/channels/FileChannel.java\n+\t(MapMode.READ_ONLY): Made final.\n+\t(MapMode.READ_WRITE): Made final.\n+\t(MapMode.PRIVATE): Made final.\n+\t* java/nio/channels/SocketChannel.java\n+\t(open): Simplified code.\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java\n+\t(registered): Unused, removed.\n+\t(keyFor): Check channel is open, only locate key\n+\tand not add a new one.\n+\t(register): Don't delete attachments.\n+\n 2004-02-26  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/awt/ComponentDataBlitOp.java"}, {"sha": "eff3320770f4fdc01a40d6d65296d852bc549251", "filename": "libjava/gnu/java/nio/FileLockImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFileLockImpl.java?ref=f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "patch": "@@ -68,7 +68,7 @@ public FileLockImpl (FileDescriptor fd, FileChannel channel, long position,\n     this.fd = fd;\n   }\n \n-  public void finalize()\n+  protected void finalize()\n   {\n     try\n       {"}, {"sha": "6604e99744e3d0d6f87280c329f24ea4bc95762f", "filename": "libjava/java/nio/channels/FileChannel.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FFileChannel.java?ref=f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "patch": "@@ -53,9 +53,9 @@ public abstract class FileChannel extends AbstractInterruptibleChannel\n   {\n     int m;\n \n-    public static MapMode READ_ONLY  = new MapMode(0);\n-    public static MapMode READ_WRITE = new MapMode(1);\n-    public static MapMode PRIVATE    = new MapMode(2);\n+    public static final MapMode READ_ONLY  = new MapMode(0);\n+    public static final MapMode READ_WRITE = new MapMode(1);\n+    public static final MapMode PRIVATE    = new MapMode(2);\n \n     /**\n      * Initializes the MapMode."}, {"sha": "93633002e513d648a5a8298ecc8d8e7fdfd94374", "filename": "libjava/java/nio/channels/SocketChannel.java", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FSocketChannel.java?ref=f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "patch": "@@ -87,11 +87,7 @@ public static SocketChannel open () throws IOException\n   public static SocketChannel open (SocketAddress remote) throws IOException\n   {\n     SocketChannel ch = open ();\n-\t\n-    if (ch.connect (remote))\n-      {\n-      }\n-    \n+    ch.connect(remote);\n     return ch;\n   }\n     "}, {"sha": "0a872bc7bc857cdf360f07f15bda6b83c73d1389", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f57db409bc0a3da9ec6e59ce72681612f7fe74ae/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=f57db409bc0a3da9ec6e59ce72681612f7fe74ae", "patch": "@@ -48,7 +48,6 @@\n \n public abstract class AbstractSelectableChannel extends SelectableChannel\n {\n-  private int registered;\n   private boolean blocking = true;\n   private Object LOCK = new Object();\n   private SelectorProvider provider;\n@@ -135,9 +134,15 @@ public final boolean isRegistered()\n    */\n   public final SelectionKey keyFor(Selector selector)\n   {\n+    if (! isOpen())\n+      return null;\n+    \n     try\n       {\n-        return register (selector, 0, null);\n+        synchronized(blockingLock())\n+\t  {\n+\t    return locate (selector);\n+\t  }\n       }\n     catch (Exception e)\n       {\n@@ -196,7 +201,8 @@ public final SelectionKey register (Selector selin, int ops, Object att)\n \n         if (key != null)\n           {\n-            key.attach (att);\n+\t    if (att != null)\n+\t      key.attach (att);\n           }\n         else\n           {"}]}