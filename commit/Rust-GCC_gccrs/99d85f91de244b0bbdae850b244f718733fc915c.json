{"sha": "99d85f91de244b0bbdae850b244f718733fc915c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlkODVmOTFkZTI0NGIwYmJkYWU4NTBiMjQ0ZjcxODczM2ZjOTE1Yw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-11-14T10:00:49Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-11-14T10:00:49Z"}, "message": "[AArch64] [-mtune cleanup 4/5] Remove \"example-1\", \"example-2\" tuning options.\n\ngcc/\n\t* config/aarch64/aarch64-cores.def (example-1): Remove.\n\t(example-2): Likewise.\n\t* config/aarch64/aarch64-tune.md: Regenerate.\n\t* config/aarch64/aarch64.md: Do not include \"large.md\" or \"small.md\".\n\t(generic_sched): Remove \"large\", \"small\".\n\t* config/aarch64/large.md: Delete.\n\t* config/aarch64/small.md: Delete.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/cpu-diagnostics-2.c: Change \"-mcpu=\"\n\tto \"cortex-a53\".\n\t* gcc.target/aarch64/cpu-diagnostics-3.c: Change \"-mcpu=\"\n\tto \"cortex-a53\".\n\nFrom-SVN: r204784", "tree": {"sha": "919e3351d243c988729bef233181f4403f411ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/919e3351d243c988729bef233181f4403f411ce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99d85f91de244b0bbdae850b244f718733fc915c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d85f91de244b0bbdae850b244f718733fc915c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99d85f91de244b0bbdae850b244f718733fc915c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d85f91de244b0bbdae850b244f718733fc915c/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1763249f27bf95ffd54f1f3d9f3adfa659e79ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1763249f27bf95ffd54f1f3d9f3adfa659e79ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1763249f27bf95ffd54f1f3d9f3adfa659e79ccb"}], "stats": {"total": 628, "additions": 21, "deletions": 607}, "files": [{"sha": "4197f6fbde1f9828bfd0c6c4b210fcfe2210ed65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99d85f91de244b0bbdae850b244f718733fc915c", "patch": "@@ -1,3 +1,13 @@\n+2013-11-14  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-cores.def (example-1): Remove.\n+\t(example-2): Likewise.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* config/aarch64/aarch64.md: Do not include \"large.md\" or \"small.md\".\n+\t(generic_sched): Remove \"large\", \"small\".\n+\t* config/aarch64/large.md: Delete.\n+\t* config/aarch64/small.md: Delete.\n+\n 2013-11-14  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-cores.def (cortex-a57): Tune for cortexa15."}, {"sha": "51c1ff803b0ad82ca8d1f313ad6628a0ce728726", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=99d85f91de244b0bbdae850b244f718733fc915c", "patch": "@@ -36,5 +36,3 @@\n \n AARCH64_CORE(\"cortex-a53\",\t  cortexa53,\t     8,  AARCH64_FL_FPSIMD,    generic)\n AARCH64_CORE(\"cortex-a57\",\t  cortexa15,\t     8,  AARCH64_FL_FPSIMD,    generic)\n-AARCH64_CORE(\"example-1\",\t      large,\t     8,  AARCH64_FL_FPSIMD,    generic)\n-AARCH64_CORE(\"example-2\",\t      small,\t     8,  AARCH64_FL_FPSIMD,    generic)"}, {"sha": "84081d1ba57e306398e4449e55bf4c4dadf2e391", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=99d85f91de244b0bbdae850b244f718733fc915c", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa53,cortexa15,large,small\"\n+\t\"cortexa53,cortexa15\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "5f35344154a65480cd520b1e5743d82bc6e56be9", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=99d85f91de244b0bbdae850b244f718733fc915c", "patch": "@@ -312,13 +312,11 @@\n \n (define_attr \"generic_sched\" \"yes,no\"\n   (const (if_then_else\n-          (eq_attr \"tune\" \"large,small,cortexa53,cortexa15\")\n+          (eq_attr \"tune\" \"cortexa53,cortexa15\")\n           (const_string \"no\")\n           (const_string \"yes\"))))\n \n ;; Scheduling\n-(include \"large.md\")\n-(include \"small.md\")\n (include \"../arm/cortex-a53.md\")\n (include \"../arm/cortex-a15.md\")\n "}, {"sha": "4316cc7dfafff8a2a2e48e581a1bb06d5c9f866b", "filename": "gcc/config/aarch64/large.md", "status": "removed", "additions": 0, "deletions": 312, "changes": 312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1763249f27bf95ffd54f1f3d9f3adfa659e79ccb/gcc%2Fconfig%2Faarch64%2Flarge.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1763249f27bf95ffd54f1f3d9f3adfa659e79ccb/gcc%2Fconfig%2Faarch64%2Flarge.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Flarge.md?ref=1763249f27bf95ffd54f1f3d9f3adfa659e79ccb", "patch": "@@ -1,312 +0,0 @@\n-;; Copyright (C) 2012-2013 Free Software Foundation, Inc.\n-;;\n-;; Contributed by ARM Ltd.\n-;;\n-;; This file is part of GCC.\n-;;\n-;; GCC is free software; you can redistribute it and/or modify it\n-;; under the terms of the GNU General Public License as published by\n-;; the Free Software Foundation; either version 3, or (at your option)\n-;; any later version.\n-;;\n-;; GCC is distributed in the hope that it will be useful, but\n-;; WITHOUT ANY WARRANTY; without even the implied warranty of\n-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-;; General Public License for more details.\n-;;\n-;; You should have received a copy of the GNU General Public License\n-;; along with GCC; see the file COPYING3.  If not see\n-;; <http://www.gnu.org/licenses/>.\n-\n-;; In the absence of any ARMv8-A implementations, two examples derived\n-;; from ARM's most recent ARMv7-A cores (Cortex-A7 and Cortex-A15) are\n-;; included by way of example.  This is a temporary measure.\n-\n-;; Example pipeline description for an example 'large' core\n-;; implementing AArch64\n-\n-;;-------------------------------------------------------\n-;; General Description\n-;;-------------------------------------------------------\n-\n-(define_automaton \"large_cpu\")\n-\n-;; The core is modelled as a triple issue pipeline that has\n-;; the following dispatch units.\n-;; 1. Two pipelines for simple integer operations: int1, int2\n-;; 2. Two pipelines for SIMD and FP data-processing operations: fpsimd1, fpsimd2\n-;; 3. One pipeline for branch operations: br\n-;; 4. One pipeline for integer multiply and divide operations: multdiv\n-;; 5. Two pipelines for load and store operations: ls1, ls2\n-;;\n-;; We can issue into three pipelines per-cycle.\n-;;\n-;; We assume that where we have unit pairs xxx1 is always filled before xxx2.\n-\n-;;-------------------------------------------------------\n-;; CPU Units and Reservations\n-;;-------------------------------------------------------\n-\n-;; The three issue units\n-(define_cpu_unit \"large_cpu_unit_i1, large_cpu_unit_i2, large_cpu_unit_i3\" \"large_cpu\")\n-\n-(define_reservation \"large_cpu_resv_i1\"\n-\t\t    \"(large_cpu_unit_i1 | large_cpu_unit_i2 | large_cpu_unit_i3)\")\n-\n-(define_reservation \"large_cpu_resv_i2\"\n-\t\t    \"((large_cpu_unit_i1 + large_cpu_unit_i2) | (large_cpu_unit_i2 + large_cpu_unit_i3))\")\n-\n-(define_reservation \"large_cpu_resv_i3\"\n-\t\t    \"(large_cpu_unit_i1 + large_cpu_unit_i2 + large_cpu_unit_i3)\")\n-\n-(final_presence_set \"large_cpu_unit_i2\" \"large_cpu_unit_i1\")\n-(final_presence_set \"large_cpu_unit_i3\" \"large_cpu_unit_i2\")\n-\n-;; The main dispatch units\n-(define_cpu_unit \"large_cpu_unit_int1, large_cpu_unit_int2\" \"large_cpu\")\n-(define_cpu_unit \"large_cpu_unit_fpsimd1, large_cpu_unit_fpsimd2\" \"large_cpu\")\n-(define_cpu_unit \"large_cpu_unit_ls1, large_cpu_unit_ls2\" \"large_cpu\")\n-(define_cpu_unit \"large_cpu_unit_br\" \"large_cpu\")\n-(define_cpu_unit \"large_cpu_unit_multdiv\" \"large_cpu\")\n-\n-(define_reservation \"large_cpu_resv_ls\" \"(large_cpu_unit_ls1 | large_cpu_unit_ls2)\")\n-\n-;; The extended load-store pipeline\n-(define_cpu_unit \"large_cpu_unit_load, large_cpu_unit_store\" \"large_cpu\")\n-\n-;; The extended ALU pipeline\n-(define_cpu_unit \"large_cpu_unit_int1_alu, large_cpu_unit_int2_alu\" \"large_cpu\")\n-(define_cpu_unit \"large_cpu_unit_int1_shf, large_cpu_unit_int2_shf\" \"large_cpu\")\n-(define_cpu_unit \"large_cpu_unit_int1_sat, large_cpu_unit_int2_sat\" \"large_cpu\")\n-\n-\n-;;-------------------------------------------------------\n-;; Simple ALU Instructions\n-;;-------------------------------------------------------\n-\n-;; Simple ALU operations without shift\n-(define_insn_reservation \"large_cpu_alu\" 2\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"adc,alu,alu_ext\"))\n-  \"large_cpu_resv_i1, \\\n-   (large_cpu_unit_int1, large_cpu_unit_int1_alu) |\\\n-     (large_cpu_unit_int2, large_cpu_unit_int2_alu)\")\n-\n-(define_insn_reservation \"large_cpu_logic\" 2\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"logic,logic_imm\"))\n-  \"large_cpu_resv_i1, \\\n-   (large_cpu_unit_int1, large_cpu_unit_int1_alu) |\\\n-     (large_cpu_unit_int2, large_cpu_unit_int2_alu)\")\n-\n-(define_insn_reservation \"large_cpu_shift\" 2\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"shift,shift_imm\"))\n-  \"large_cpu_resv_i1, \\\n-   (large_cpu_unit_int1, large_cpu_unit_int1_shf) |\\\n-     (large_cpu_unit_int2, large_cpu_unit_int2_shf)\")\n-\n-;; Simple ALU operations with immediate shift\n-(define_insn_reservation \"large_cpu_alu_shift\" 3\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"alu_shift\"))\n-  \"large_cpu_resv_i1, \\\n-   (large_cpu_unit_int1,\n-     large_cpu_unit_int1 + large_cpu_unit_int1_shf, large_cpu_unit_int1_alu) | \\\n-   (large_cpu_unit_int2,\n-     large_cpu_unit_int2 + large_cpu_unit_int2_shf, large_cpu_unit_int2_alu)\")\n-\n-(define_insn_reservation \"large_cpu_logic_shift\" 3\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"logic_shift\"))\n-  \"large_cpu_resv_i1, \\\n-   (large_cpu_unit_int1, large_cpu_unit_int1_alu) |\\\n-     (large_cpu_unit_int2, large_cpu_unit_int2_alu)\")\n-\n-\n-;;-------------------------------------------------------\n-;; Multiplication/Division\n-;;-------------------------------------------------------\n-\n-;; Simple multiplication\n-(define_insn_reservation \"large_cpu_mult_single\" 3\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"mult,madd\") (eq_attr \"mode\" \"SI\")))\n-  \"large_cpu_resv_i1, large_cpu_unit_multdiv\")\n-\n-(define_insn_reservation \"large_cpu_mult_double\" 4\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"mult,madd\") (eq_attr \"mode\" \"DI\")))\n-  \"large_cpu_resv_i1, large_cpu_unit_multdiv\")\n-\n-;; 64-bit multiplication\n-(define_insn_reservation \"large_cpu_mull\" 4\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"mull,mulh,maddl\"))\n-  \"large_cpu_resv_i1, large_cpu_unit_multdiv * 2\")\n-\n-;; Division\n-(define_insn_reservation \"large_cpu_udiv_single\" 9\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"udiv\") (eq_attr \"mode\" \"SI\")))\n-  \"large_cpu_resv_i1, large_cpu_unit_multdiv\")\n-\n-(define_insn_reservation \"large_cpu_udiv_double\" 18\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"udiv\") (eq_attr \"mode\" \"DI\")))\n-  \"large_cpu_resv_i1, large_cpu_unit_multdiv\")\n-\n-(define_insn_reservation \"large_cpu_sdiv_single\" 10\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"sdiv\") (eq_attr \"mode\" \"SI\")))\n-  \"large_cpu_resv_i1, large_cpu_unit_multdiv\")\n-\n-(define_insn_reservation \"large_cpu_sdiv_double\" 20\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"sdiv\") (eq_attr \"mode\" \"DI\")))\n-  \"large_cpu_resv_i1, large_cpu_unit_multdiv\")\n-\n-\n-;;-------------------------------------------------------\n-;; Branches\n-;;-------------------------------------------------------\n-\n-;; Branches take one issue slot.\n-;; No latency as there is no result\n-(define_insn_reservation \"large_cpu_branch\" 0\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"branch\"))\n-  \"large_cpu_resv_i1, large_cpu_unit_br\")\n-\n-\n-;; Calls take up all issue slots, and form a block in the\n-;; pipeline.  The result however is available the next cycle.\n-;; Addition of new units requires this to be updated.\n-(define_insn_reservation \"large_cpu_call\" 1\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"call\"))\n-  \"large_cpu_resv_i3 | large_cpu_resv_i2, \\\n-   large_cpu_unit_int1 + large_cpu_unit_int2 + large_cpu_unit_br + \\\n-     large_cpu_unit_multdiv + large_cpu_unit_fpsimd1 + large_cpu_unit_fpsimd2 + \\\n-     large_cpu_unit_ls1 + large_cpu_unit_ls2,\\\n-   large_cpu_unit_int1_alu + large_cpu_unit_int1_shf + large_cpu_unit_int1_sat + \\\n-     large_cpu_unit_int2_alu + large_cpu_unit_int2_shf + \\\n-     large_cpu_unit_int2_sat + large_cpu_unit_load + large_cpu_unit_store\")\n-\n-\n-;;-------------------------------------------------------\n-;; Load/Store Instructions\n-;;-------------------------------------------------------\n-\n-;; Loads of up to two words.\n-(define_insn_reservation \"large_cpu_load1\" 4\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"load_acq,load1,load2\"))\n-  \"large_cpu_resv_i1, large_cpu_resv_ls, large_cpu_unit_load, nothing\")\n-\n-;; Stores of up to two words.\n-(define_insn_reservation \"large_cpu_store1\" 0\n-  (and (eq_attr \"tune\" \"large\") (eq_attr \"v8type\" \"store_rel,store1,store2\"))\n-  \"large_cpu_resv_i1, large_cpu_resv_ls, large_cpu_unit_store\")\n-\n-\n-;;-------------------------------------------------------\n-;; Floating-point arithmetic.\n-;;-------------------------------------------------------\n-\n-(define_insn_reservation \"large_cpu_fpalu\" 4\n-  (and (eq_attr \"tune\" \"large\")\n-       (eq_attr \"v8type\" \"ffarith,fadd,fccmp,fcvt,fcmp\"))\n-  \"large_cpu_resv_i1 + large_cpu_unit_fpsimd1\")\n-\n-(define_insn_reservation \"large_cpu_fconst\" 3\n-  (and (eq_attr \"tune\" \"large\")\n-       (eq_attr \"v8type\" \"fconst\"))\n-  \"large_cpu_resv_i1 + large_cpu_unit_fpsimd1\")\n-\n-(define_insn_reservation \"large_cpu_fpmuls\" 4\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"fmul,fmadd\") (eq_attr \"mode\" \"SF\")))\n-  \"large_cpu_resv_i1 + large_cpu_unit_fpsimd1\")\n-\n-(define_insn_reservation \"large_cpu_fpmuld\" 7\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"fmul,fmadd\") (eq_attr \"mode\" \"DF\")))\n-  \"large_cpu_resv_i1 + large_cpu_unit_fpsimd1, large_cpu_unit_fpsimd1 * 2,\\\n-   large_cpu_resv_i1 + large_cpu_unit_fpsimd1\")\n-\n-\n-;;-------------------------------------------------------\n-;; Floating-point Division\n-;;-------------------------------------------------------\n-\n-;; Single-precision divide takes 14 cycles to complete, and this\n-;; includes the time taken for the special instruction used to collect the\n-;; result to travel down the multiply pipeline.\n-\n-(define_insn_reservation \"large_cpu_fdivs\" 14\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"fdiv,fsqrt\") (eq_attr \"mode\" \"SF\")))\n-  \"large_cpu_resv_i1, large_cpu_unit_fpsimd1 * 13\")\n-\n-(define_insn_reservation \"large_cpu_fdivd\" 29\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"fdiv,fsqrt\") (eq_attr \"mode\" \"DF\")))\n-  \"large_cpu_resv_i1, large_cpu_unit_fpsimd1 * 28\")\n-\n-\n-\n-;;-------------------------------------------------------\n-;; Floating-point Transfers\n-;;-------------------------------------------------------\n-\n-(define_insn_reservation \"large_cpu_i2f\" 4\n-  (and (eq_attr \"tune\" \"large\")\n-       (eq_attr \"v8type\" \"fmovi2f\"))\n-  \"large_cpu_resv_i1\")\n-\n-(define_insn_reservation \"large_cpu_f2i\" 2\n-  (and (eq_attr \"tune\" \"large\")\n-       (eq_attr \"v8type\" \"fmovf2i\"))\n-  \"large_cpu_resv_i1\")\n-\n-\n-;;-------------------------------------------------------\n-;; Floating-point Load/Store\n-;;-------------------------------------------------------\n-\n-(define_insn_reservation \"large_cpu_floads\" 4\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"fpsimd_load,fpsimd_load2\") (eq_attr \"mode\" \"SF\")))\n-  \"large_cpu_resv_i1\")\n-\n-(define_insn_reservation \"large_cpu_floadd\" 5\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"fpsimd_load,fpsimd_load2\") (eq_attr \"mode\" \"DF\")))\n-  \"large_cpu_resv_i1 + large_cpu_unit_br, large_cpu_resv_i1\")\n-\n-(define_insn_reservation \"large_cpu_fstores\" 0\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"fpsimd_store,fpsimd_store2\") (eq_attr \"mode\" \"SF\")))\n-  \"large_cpu_resv_i1\")\n-\n-(define_insn_reservation \"large_cpu_fstored\" 0\n-  (and (eq_attr \"tune\" \"large\")\n-       (and (eq_attr \"v8type\" \"fpsimd_store,fpsimd_store2\") (eq_attr \"mode\" \"DF\")))\n-  \"large_cpu_resv_i1 + large_cpu_unit_br, large_cpu_resv_i1\")\n-\n-\n-;;-------------------------------------------------------\n-;; Bypasses\n-;;-------------------------------------------------------\n-\n-(define_bypass 1 \"large_cpu_alu, large_cpu_logic, large_cpu_shift\"\n-  \"large_cpu_alu, large_cpu_alu_shift, large_cpu_logic, large_cpu_logic_shift, large_cpu_shift\")\n-\n-(define_bypass 2 \"large_cpu_alu_shift, large_cpu_logic_shift\"\n-  \"large_cpu_alu, large_cpu_alu_shift, large_cpu_logic, large_cpu_logic_shift, large_cpu_shift\")\n-\n-(define_bypass 1 \"large_cpu_alu, large_cpu_logic, large_cpu_shift\" \"large_cpu_load1\")\n-\n-(define_bypass 2 \"large_cpu_alu_shift, large_cpu_logic_shift\" \"large_cpu_load1\")\n-\n-(define_bypass 2 \"large_cpu_floads\"\n-                 \"large_cpu_fpalu, large_cpu_fpmuld,\\\n-\t\t  large_cpu_fdivs, large_cpu_fdivd,\\\n-\t\t  large_cpu_f2i\")\n-\n-(define_bypass 3 \"large_cpu_floadd\"\n-                 \"large_cpu_fpalu, large_cpu_fpmuld,\\\n-\t\t  large_cpu_fdivs, large_cpu_fdivd,\\\n-\t\t  large_cpu_f2i\")"}, {"sha": "a19083ccff27932befc645e7c71b6fcc4b6b94ef", "filename": "gcc/config/aarch64/small.md", "status": "removed", "additions": 0, "deletions": 287, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1763249f27bf95ffd54f1f3d9f3adfa659e79ccb/gcc%2Fconfig%2Faarch64%2Fsmall.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1763249f27bf95ffd54f1f3d9f3adfa659e79ccb/gcc%2Fconfig%2Faarch64%2Fsmall.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fsmall.md?ref=1763249f27bf95ffd54f1f3d9f3adfa659e79ccb", "patch": "@@ -1,287 +0,0 @@\n-;; Copyright (C) 2012-2013 Free Software Foundation, Inc.\n-;;\n-;; Contributed by ARM Ltd.\n-;;\n-;; This file is part of GCC.\n-;;\n-;; GCC is free software; you can redistribute it and/or modify it\n-;; under the terms of the GNU General Public License as published by\n-;; the Free Software Foundation; either version 3, or (at your option)\n-;; any later version.\n-;;\n-;; GCC is distributed in the hope that it will be useful, but\n-;; WITHOUT ANY WARRANTY; without even the implied warranty of\n-;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-;; General Public License for more details.\n-;;\n-;; You should have received a copy of the GNU General Public License\n-;; along with GCC; see the file COPYING3.  If not see\n-;; <http://www.gnu.org/licenses/>.\n-\n-;; In the absence of any ARMv8-A implementations, two examples derived\n-;; from ARM's most recent ARMv7-A cores (Cortex-A7 and Cortex-A15) are\n-;; included by way of example.  This is a temporary measure.\n-\n-;; Example pipeline description for an example 'small' core\n-;; implementing AArch64\n-\n-;;-------------------------------------------------------\n-;; General Description\n-;;-------------------------------------------------------\n-\n-(define_automaton \"small_cpu\")\n-\n-;; The core is modelled as a single issue pipeline with the following\n-;; dispatch units.\n-;; 1. One pipeline for simple intructions.\n-;; 2. One pipeline for branch intructions.\n-;;\n-;; There are five pipeline stages.\n-;; The decode/issue stages operate the same for all instructions.\n-;; Instructions always advance one stage per cycle in order.\n-;; Only branch instructions may dual-issue with other instructions, except\n-;; when those instructions take multiple cycles to issue.\n-\n-\n-;;-------------------------------------------------------\n-;; CPU Units and Reservations\n-;;-------------------------------------------------------\n-\n-(define_cpu_unit \"small_cpu_unit_i\" \"small_cpu\")\n-(define_cpu_unit \"small_cpu_unit_br\" \"small_cpu\")\n-\n-;; Pseudo-unit for blocking the multiply pipeline when a double-precision\n-;; multiply is in progress.\n-(define_cpu_unit \"small_cpu_unit_fpmul_pipe\" \"small_cpu\")\n-\n-;; The floating-point add pipeline, used to model the usage\n-;; of the add pipeline by fp alu instructions.\n-(define_cpu_unit \"small_cpu_unit_fpadd_pipe\" \"small_cpu\")\n-\n-;; Floating-point division pipeline (long latency, out-of-order completion).\n-(define_cpu_unit \"small_cpu_unit_fpdiv\" \"small_cpu\")\n-\n-\n-;;-------------------------------------------------------\n-;; Simple ALU Instructions\n-;;-------------------------------------------------------\n-\n-;; Simple ALU operations without shift\n-(define_insn_reservation \"small_cpu_alu\" 2\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"adc,alu,alu_ext\"))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_logic\" 2\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"logic,logic_imm\"))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_shift\" 2\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"shift,shift_imm\"))\n-  \"small_cpu_unit_i\")\n-\n-;; Simple ALU operations with immediate shift\n-(define_insn_reservation \"small_cpu_alu_shift\" 2\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"alu_shift\"))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_logic_shift\" 2\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"logic_shift\"))\n-  \"small_cpu_unit_i\")\n-\n-\n-;;-------------------------------------------------------\n-;; Multiplication/Division\n-;;-------------------------------------------------------\n-\n-;; Simple multiplication\n-(define_insn_reservation \"small_cpu_mult_single\" 2\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"mult,madd\") (eq_attr \"mode\" \"SI\")))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_mult_double\" 3\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"mult,madd\") (eq_attr \"mode\" \"DI\")))\n-  \"small_cpu_unit_i\")\n-\n-;; 64-bit multiplication\n-(define_insn_reservation \"small_cpu_mull\" 3\n-  (and (eq_attr \"tune\" \"small\") (eq_attr \"v8type\" \"mull,mulh,maddl\"))\n-  \"small_cpu_unit_i * 2\")\n-\n-;; Division\n-(define_insn_reservation \"small_cpu_udiv_single\" 5\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"udiv\") (eq_attr \"mode\" \"SI\")))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_udiv_double\" 10\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"udiv\") (eq_attr \"mode\" \"DI\")))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_sdiv_single\" 6\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"sdiv\") (eq_attr \"mode\" \"SI\")))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_sdiv_double\" 12\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"sdiv\") (eq_attr \"mode\" \"DI\")))\n-  \"small_cpu_unit_i\")\n-\n-\n-;;-------------------------------------------------------\n-;; Load/Store Instructions\n-;;-------------------------------------------------------\n-\n-(define_insn_reservation \"small_cpu_load1\" 2\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"load_acq,load1\"))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_store1\" 0\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"store_rel,store1\"))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_load2\" 3\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"load2\"))\n-  \"small_cpu_unit_i + small_cpu_unit_br, small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_store2\" 0\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"store2\"))\n-  \"small_cpu_unit_i + small_cpu_unit_br, small_cpu_unit_i\")\n-\n-\n-;;-------------------------------------------------------\n-;; Branches\n-;;-------------------------------------------------------\n-\n-;; Direct branches are the only instructions that can dual-issue.\n-;; The latency here represents when the branch actually takes place.\n-\n-(define_insn_reservation \"small_cpu_unit_br\" 3\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"branch,call\"))\n-  \"small_cpu_unit_br\")\n-\n-\n-;;-------------------------------------------------------\n-;; Floating-point arithmetic.\n-;;-------------------------------------------------------\n-\n-(define_insn_reservation \"small_cpu_fpalu\" 4\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"ffarith,fadd,fccmp,fcvt,fcmp\"))\n-  \"small_cpu_unit_i + small_cpu_unit_fpadd_pipe\")\n-\n-(define_insn_reservation \"small_cpu_fconst\" 3\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"fconst\"))\n-  \"small_cpu_unit_i + small_cpu_unit_fpadd_pipe\")\n-\n-(define_insn_reservation \"small_cpu_fpmuls\" 4\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"fmul\") (eq_attr \"mode\" \"SF\")))\n-  \"small_cpu_unit_i + small_cpu_unit_fpmul_pipe\")\n-\n-(define_insn_reservation \"small_cpu_fpmuld\" 7\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"fmul\") (eq_attr \"mode\" \"DF\")))\n-  \"small_cpu_unit_i + small_cpu_unit_fpmul_pipe, small_cpu_unit_fpmul_pipe * 2,\\\n-   small_cpu_unit_i + small_cpu_unit_fpmul_pipe\")\n-\n-\n-;;-------------------------------------------------------\n-;; Floating-point Division\n-;;-------------------------------------------------------\n-\n-;; Single-precision divide takes 14 cycles to complete, and this\n-;; includes the time taken for the special instruction used to collect the\n-;; result to travel down the multiply pipeline.\n-\n-(define_insn_reservation \"small_cpu_fdivs\" 14\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"fdiv,fsqrt\") (eq_attr \"mode\" \"SF\")))\n-  \"small_cpu_unit_i, small_cpu_unit_fpdiv * 13\")\n-\n-(define_insn_reservation \"small_cpu_fdivd\" 29\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"fdiv,fsqrt\") (eq_attr \"mode\" \"DF\")))\n-  \"small_cpu_unit_i, small_cpu_unit_fpdiv * 28\")\n-\n-\n-;;-------------------------------------------------------\n-;; Floating-point Transfers\n-;;-------------------------------------------------------\n-\n-(define_insn_reservation \"small_cpu_i2f\" 4\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"fmovi2f\"))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_f2i\" 2\n-  (and (eq_attr \"tune\" \"small\")\n-       (eq_attr \"v8type\" \"fmovf2i\"))\n-  \"small_cpu_unit_i\")\n-\n-\n-;;-------------------------------------------------------\n-;; Floating-point Load/Store\n-;;-------------------------------------------------------\n-\n-(define_insn_reservation \"small_cpu_floads\" 4\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"fpsimd_load\") (eq_attr \"mode\" \"SF\")))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_floadd\" 5\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"fpsimd_load\") (eq_attr \"mode\" \"DF\")))\n-  \"small_cpu_unit_i + small_cpu_unit_br, small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_fstores\" 0\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"fpsimd_store\") (eq_attr \"mode\" \"SF\")))\n-  \"small_cpu_unit_i\")\n-\n-(define_insn_reservation \"small_cpu_fstored\" 0\n-  (and (eq_attr \"tune\" \"small\")\n-       (and (eq_attr \"v8type\" \"fpsimd_store\") (eq_attr \"mode\" \"DF\")))\n-  \"small_cpu_unit_i + small_cpu_unit_br, small_cpu_unit_i\")\n-\n-\n-;;-------------------------------------------------------\n-;; Bypasses\n-;;-------------------------------------------------------\n-\n-;; Forwarding path for unshifted operands.\n-\n-(define_bypass 1 \"small_cpu_alu, small_cpu_alu_shift\" \n-  \"small_cpu_alu, small_cpu_alu_shift, small_cpu_logic, small_cpu_logic_shift, small_cpu_shift\")\n-\n-(define_bypass 1 \"small_cpu_logic, small_cpu_logic_shift\" \n-  \"small_cpu_alu, small_cpu_alu_shift, small_cpu_logic, small_cpu_logic_shift, small_cpu_shift\")\n-\n-(define_bypass 1 \"small_cpu_shift\" \n-  \"small_cpu_alu, small_cpu_alu_shift, small_cpu_logic, small_cpu_logic_shift, small_cpu_shift\")\n-\n-;; Load-to-use for floating-point values has a penalty of one cycle.\n-\n-(define_bypass 2 \"small_cpu_floads\"\n-                 \"small_cpu_fpalu, small_cpu_fpmuld,\\\n-\t\t  small_cpu_fdivs, small_cpu_fdivd,\\\n-\t\t  small_cpu_f2i\")\n-\n-(define_bypass 3 \"small_cpu_floadd\"\n-                 \"small_cpu_fpalu, small_cpu_fpmuld,\\\n-\t\t  small_cpu_fdivs, small_cpu_fdivd,\\\n-\t\t  small_cpu_f2i\")"}, {"sha": "3f82acf47804c7c91349cb1f7a4e3985b5d9d32c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99d85f91de244b0bbdae850b244f718733fc915c", "patch": "@@ -1,3 +1,10 @@\n+2013-11-14  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/cpu-diagnostics-2.c: Change \"-mcpu=\"\n+\tto \"cortex-a53\".\n+\t* gcc.target/aarch64/cpu-diagnostics-3.c: Change \"-mcpu=\"\n+\tto \"cortex-a53\".\n+\n 2013-11-14  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc.dg/atomic/c11-atomic-exec-4.c: Define _XOPEN_SOURCE=600 on"}, {"sha": "2ca006598ff84cf0b92f229e72f83750d4c5e91f", "filename": "gcc/testsuite/gcc.target/aarch64/cpu-diagnostics-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-2.c?ref=99d85f91de244b0bbdae850b244f718733fc915c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-error \"missing\" \"\" {target \"aarch64*-*-*\" } } */\n-/* { dg-options \"-O2 -mcpu=example-1+no\" } */\n+/* { dg-options \"-O2 -mcpu=cortex-a53+no\" } */\n \n void f ()\n {"}, {"sha": "155def0515522b4ae5ffc071231079a59a805989", "filename": "gcc/testsuite/gcc.target/aarch64/cpu-diagnostics-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99d85f91de244b0bbdae850b244f718733fc915c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpu-diagnostics-3.c?ref=99d85f91de244b0bbdae850b244f718733fc915c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-error \"unknown\" \"\" {target \"aarch64*-*-*\" } } */\n-/* { dg-options \"-O2 -mcpu=example-1+dummy\" } */\n+/* { dg-options \"-O2 -mcpu=cortex-a53+dummy\" } */\n \n void f ()\n {"}]}