{"sha": "0c58f841a52644c9845b3c136f3264e6a728ba76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM1OGY4NDFhNTI2NDRjOTg0NWIzYzEzNmYzMjY0ZTZhNzI4YmE3Ng==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2004-10-14T23:15:29Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2004-10-14T23:15:29Z"}, "message": "Speed up walk_tree by introducing a special-purpose hash table.\n\n\t* pointer-set.c: New file, special-purpose hash table.\n\t* pointer-set.h: New file.\n\t* tree.h (struct pointer_set_t): Declare as opaque type.\n\t(tree_walk): Last argument is pointer_set_t* now.\n\t* tree-inline.c (WALK_SUBTREE): Convert from htab to pset.\n\t(walk_type_fields):\n\t(walk_tree): Convert from htab_t to pointer_set_t for keeping\n\ttrack of which nodes have already been visited.\n\t(walk_tree_without_duplicates): Convert from htab_t to pointer_set_t.\n\t* cgraphunit.c (cgraph_create_edges): Likewise.\n\t(cgraph_characterize_statics_local): Likewise.\n\t* tree-dfa.c (collect_dfa_stats): Likewise.\n\t* langhooks-def.h (lhd_tree_inlining_walk_subtrees): Last arg is\n\tpointer_set_t* now.\n\t* langhooks.c (lhd_tree_inlining_walk_subtrees): Likewise.\n\t* langhooks.h (struct lang_hooks_for_tree_inlining): Last arg type\n\tof walk_subtrees is pointer_set_t* now.\n\t* Makefile.in (OBJS-common): add pointer-set.o\n\t(tree-inline.o): Depends on pointer-set.h\n\t(tree-dfa.o): Likewise\n\t(cgraphunit.o): Likewise\n\t* cp/Make-lang.in (pt.o): depends on pointer-set.h\n\t* cp/cp-tree.h (cp_walk_subtrees): Last argument is pointer_set_t* now.\n\t* cp/pt.c (struct pair_fn_data): Use pointer_set_t, not htab_t\n\t(for_each_template_parm): Convert from htab_t to pointer_set_t.\n\t* cp/tree.c (cp_walk_subtrees): Last argument is pointer_set_t* now.\n\t* java/lang.c (java_tree_inlining_walk_subtrees): Last arg is struct\n\tpointer_set_t* now.\n\nFrom-SVN: r89062", "tree": {"sha": "13188816247ecd269d6b10ee75c260da51a89ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13188816247ecd269d6b10ee75c260da51a89ff6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c58f841a52644c9845b3c136f3264e6a728ba76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c58f841a52644c9845b3c136f3264e6a728ba76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c58f841a52644c9845b3c136f3264e6a728ba76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c58f841a52644c9845b3c136f3264e6a728ba76/comments", "author": null, "committer": null, "parents": [{"sha": "5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d1b2a1e421e770aba056e6b1405ed0eb29d29eb"}], "stats": {"total": 353, "additions": 296, "deletions": 57}, "files": [{"sha": "55ba888699433dee631095430a1a7f175d84381f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -1,3 +1,27 @@\n+2004-10-14  Matt Austern  <austern@apple.com>\n+\n+\t* pointer-set.c: New file, special-purpose hash table.\n+\t* pointer-set.h: New file.\n+\t* tree.h (struct pointer_set_t): Declare as opaque type.\n+\t(tree_walk): Last argument is pointer_set_t* now.\n+\t* tree-inline.c (WALK_SUBTREE): Convert from htab to pset.\n+\t(walk_type_fields): \n+\t(walk_tree): Convert from htab_t to pointer_set_t for keeping\n+\ttrack of which nodes have already been visited.\n+\t(walk_tree_without_duplicates): Convert from htab_t to pointer_set_t.\n+\t* cgraphunit.c (cgraph_create_edges): Likewise.\n+\t(cgraph_characterize_statics_local): Likewise.\n+\t* tree-dfa.c (collect_dfa_stats): Likewise.\n+\t* langhooks-def.h (lhd_tree_inlining_walk_subtrees): Last arg is\n+\tpointer_set_t* now.\n+\t* langhooks.c (lhd_tree_inlining_walk_subtrees): Likewise.\n+\t* langhooks.h (struct lang_hooks_for_tree_inlining): Last arg type\n+\tof walk_subtrees is pointer_set_t* now.\n+\t* Makefile.in (OBJS-common): add pointer-set.o\n+\t(tree-inline.o): Depends on pointer-set.h\n+\t(tree-dfa.o): Likewise\n+\t(cgraphunit.o): Likewise\n+\t\n 2004-10-14  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/darwin.h (ASM_SPEC): Delete."}, {"sha": "432ce8fe01078bb20b3ed948359a9fb06e18e358", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -914,7 +914,7 @@ OBJS-common = \\\n  params.o postreload.o postreload-gcse.o predict.o\t\t\t   \\\n  insn-preds.o integrate.o intl.o jump.o langhooks.o lcm.o lists.o \t   \\\n  local-alloc.o loop.o modulo-sched.o optabs.o options.o opts.o\t\t   \\\n- params.o postreload.o postreload-gcse.o predict.o\t\t\t   \\\n+ params.o pointer-set.o postreload.o postreload-gcse.o predict.o \t   \\\n  print-rtl.o print-tree.o value-prof.o var-tracking.o\t\t\t   \\\n  profile.o ra.o ra-build.o ra-colorize.o ra-debug.o ra-rewrite.o\t   \\\n  real.o recog.o reg-stack.o regclass.o regmove.o regrename.o\t\t   \\\n@@ -1592,7 +1592,7 @@ tree-inline.o : tree-inline.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) $(RTL_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h insn-config.h \\\n    $(INTEGRATE_H) $(VARRAY_H) $(HASHTAB_H) $(SPLAY_TREE_H) toplev.h \\\n    langhooks.h $(C_COMMON_H) tree-inline.h $(CGRAPH_H) intl.h function.h \\\n-   $(TREE_GIMPLE_H)\n+   pointer-set.h $(TREE_GIMPLE_H)\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(GGC_H) langhooks.h real.h\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -1686,7 +1686,7 @@ tree-iterator.o : tree-iterator.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n    coretypes.h $(GGC_H) tree-iterator.h tree-gimple.h gt-tree-iterator.h\n tree-dfa.o : tree-dfa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) output.h diagnostic.h \\\n-   errors.h tree-inline.h $(HASHTAB_H) $(FLAGS_H) function.h $(TIMEVAR_H) \\\n+   errors.h tree-inline.h $(HASHTAB_H) pointer-set.h $(FLAGS_H) function.h $(TIMEVAR_H) \\\n    convert.h $(TM_H) coretypes.h langhooks.h \\\n    $(TREE_DUMP_H) tree-pass.h params.h $(CGRAPH_H)\n tree-ssa-operands.o : tree-ssa-operands.c $(TREE_FLOW_H) $(CONFIG_H) \\\n@@ -1923,7 +1923,7 @@ cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    output.h intl.h\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    langhooks.h tree-inline.h toplev.h $(FLAGS_H) $(GGC_H)  $(TARGET_H) $(CGRAPH_H) intl.h \\\n-   function.h $(TREE_GIMPLE_H) $(TREE_FLOW_H)\n+   pointer-set.h function.h $(TREE_GIMPLE_H) $(TREE_FLOW_H)\n coverage.o : coverage.c gcov-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) function.h \\\n    toplev.h $(GGC_H) $(TARGET_H) langhooks.h $(COVERAGE_H) libfuncs.h \\\n@@ -2172,6 +2172,7 @@ lambda-code.o: lambda-code.c $(LAMBDA_H) $(GGC_H) $(SYSTEM_H) $(CONFIG_H) \\\n    $(TREE_FLOW_H) $(TREE_DUMP_H) $(TIMEVAR_H) cfgloop.h \\\n    $(TREE_DATA_REF_H) $(SCEV_H)\n params.o : params.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(PARAMS_H) toplev.h\n+pointer-set.o: pointer-set.c pointer-set.h $(CONFIG_H) $(SYSTEM_H)\n hooks.o: hooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(HOOKS_H)\n pretty-print.o: $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(PRETTY_PRINT_H) \\\n    $(TREE_H)"}, {"sha": "e942aada193e8f096ee914d716fa7e12215571fb", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -186,7 +186,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-flow.h\"\n #include \"tree-inline.h\"\n #include \"langhooks.h\"\n-#include \"hashtab.h\"\n+#include \"pointer-set.h\"\n #include \"toplev.h\"\n #include \"flags.h\"\n #include \"ggc.h\"\n@@ -223,7 +223,7 @@ static int overall_insns;\n    walk_tree_without_duplicates doesn't guarantee each node is visited\n    once because it gets a new htab upon each recursive call from\n    record_calls_1.  */\n-static htab_t visited_nodes;\n+static struct pointer_set_t *visited_nodes;\n \n static FILE *cgraph_dump_file;\n \n@@ -698,10 +698,9 @@ cgraph_create_edges (struct cgraph_node *node, tree body)\n {\n   /* The nodes we're interested in are never shared, so walk\n      the tree ignoring duplicates.  */\n-  visited_nodes = htab_create (37, htab_hash_pointer,\n-\t\t\t\t    htab_eq_pointer, NULL);\n+  visited_nodes = pointer_set_create ();\n   walk_tree (&body, record_call_1, node, visited_nodes);\n-  htab_delete (visited_nodes);\n+  pointer_set_destroy (visited_nodes);\n   visited_nodes = NULL;\n }\n \n@@ -2288,8 +2287,7 @@ cgraph_characterize_statics_local (struct cgraph_node *fn)\n \n   /* The nodes we're interested in are never shared, so walk\n      the tree ignoring duplicates.  */\n-  visited_nodes = htab_create (37, htab_hash_pointer,\n-\t\t\t       htab_eq_pointer, NULL);\n+  visited_nodes = pointer_set_create ();\n   \n   /* FIXME -- PROFILE-RESTRUCTURE: Remove creation of _decl_uid vars.  */\n   l->statics_read_by_decl_uid = BITMAP_GGC_ALLOC ();\n@@ -2299,7 +2297,7 @@ cgraph_characterize_statics_local (struct cgraph_node *fn)\n     fprintf (cgraph_dump_file, \"\\n local analysis of %s\", cgraph_node_name (fn));\n   \n   walk_tree (&DECL_SAVED_TREE (decl), scan_for_static_refs, fn, visited_nodes);\n-  htab_delete (visited_nodes);\n+  pointer_set_destroy (visited_nodes);\n   visited_nodes = NULL;\n }\n "}, {"sha": "bb8678e774adb3fefb782208d739b4c5a2031b15", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -1,3 +1,11 @@\n+2004-10-14  Matt Austern  <austern@apple.com>\n+\n+\t* Make-lang.in (pt.o): depends on pointer-set.h\n+\t* cp-tree.h (cp_walk_subtrees): Last argument is pointer_set_t* now.\n+\t* pt.c (struct pair_fn_data): Use pointer_set_t, not htab_t\n+\t(for_each_template_parm): Convert from htab_t to pointer_set_t.\n+\t* tree.c (cp_walk_subtrees): Last argument is pointer_set_t* now.\n+\t\n 2004-10-13  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/17661"}, {"sha": "891d27120afdd51aa17026b7bc1050a8c07dbfe8", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -260,7 +260,7 @@ cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) flags.h $(RTL_H) except.h toplev.\n cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(RTL_H) flags.h $(EXPR_H) toplev.h \\\n   except.h $(TM_P_H)\n cp/pt.o: cp/pt.c $(CXX_TREE_H) $(TM_H) cp/decl.h \\\n-  toplev.h $(RTL_H) except.h tree-inline.h gt-cp-pt.h\n+  toplev.h $(RTL_H) except.h tree-inline.h pointer-set.h gt-cp-pt.h\n cp/error.o: cp/error.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n   flags.h real.h $(LANGHOOKS_DEF_H) $(CXX_PRETTY_PRINT_H)\n cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h diagnostic.h \\"}, {"sha": "2350ab0d60f22b93c3f1923e72994d57c357956f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -4215,7 +4215,7 @@ extern void verify_stmt_tree                    (tree);\n extern tree find_tree                           (tree, tree);\n extern linkage_kind decl_linkage                (tree);\n extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n-\t\t\t\t      void*, void*);\n+\t\t\t\t      void*, struct pointer_set_t*);\n extern int cp_cannot_inline_tree_fn (tree*);\n extern tree cp_add_pending_fn_decls (void*,tree);\n extern int cp_is_overload_p (tree);"}, {"sha": "18e3c0a057dd0d23b5153d6ea6c01fa38b85b2a4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm.h\"\n #include \"obstack.h\"\n #include \"tree.h\"\n+#include \"pointer-set.h\"\n #include \"flags.h\"\n #include \"cp-tree.h\"\n #include \"tree-inline.h\"\n@@ -113,7 +114,8 @@ static tree convert_nontype_argument (tree, tree);\n static tree convert_template_argument (tree, tree, tree,\n \t\t\t\t       tsubst_flags_t, int, tree);\n static tree get_bindings_overload (tree, tree, tree);\n-static int for_each_template_parm (tree, tree_fn_t, void*, htab_t);\n+static int for_each_template_parm (tree, tree_fn_t, void*,\n+\t\t\t\t   struct pointer_set_t*);\n static tree build_template_parm_index (int, int, int, tree, tree);\n static int inline_needs_template_parms (tree);\n static void push_inline_template_parms_recursive (tree, int);\n@@ -4683,7 +4685,7 @@ struct pair_fn_data\n {\n   tree_fn_t fn;\n   void *data;\n-  htab_t visited;\n+  struct pointer_set_t *visited;\n };\n \n /* Called from for_each_template_parm via walk_tree.  */\n@@ -4865,7 +4867,8 @@ for_each_template_parm_r (tree *tp, int *walk_subtrees, void *d)\n    considered to be the function which always returns 1.  */\n \n static int\n-for_each_template_parm (tree t, tree_fn_t fn, void* data, htab_t visited)\n+for_each_template_parm (tree t, tree_fn_t fn, void* data,\n+\t\t\tstruct pointer_set_t *visited)\n {\n   struct pair_fn_data pfd;\n   int result;\n@@ -4882,16 +4885,18 @@ for_each_template_parm (tree t, tree_fn_t fn, void* data, htab_t visited)\n   if (visited)\n     pfd.visited = visited;\n   else\n-    pfd.visited = htab_create (37, htab_hash_pointer, htab_eq_pointer, \n-\t\t\t       NULL);\n+    pfd.visited = pointer_set_create ();\n   result = walk_tree (&t, \n \t\t      for_each_template_parm_r, \n \t\t      &pfd,\n \t\t      pfd.visited) != NULL_TREE;\n \n   /* Clean up.  */\n   if (!visited)\n-    htab_delete (pfd.visited);\n+    {\n+      pointer_set_destroy (pfd.visited);\n+      pfd.visited = 0;\n+    }\n \n   return result;\n }"}, {"sha": "134da23ffd5aa6e7f1df9c56b8c54069634a8785", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -1929,7 +1929,7 @@ cp_build_type_attribute_variant (tree type, tree attributes)\n \n tree\n cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n-\t\t  void *data, void *htab)\n+\t\t  void *data, struct pointer_set_t *pset)\n {\n   enum tree_code code = TREE_CODE (*tp);\n   location_t save_locus;\n@@ -1938,7 +1938,7 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n #define WALK_SUBTREE(NODE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      result = walk_tree (&(NODE), func, data, htab);\t\\\n+      result = walk_tree (&(NODE), func, data, pset);\t\\\n       if (result) goto out;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "126041a0ffa7f6c5fced5b578b0964cd8eb2dd9a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -1,3 +1,8 @@\n+2004-10-14  Matt Austern  <austern@apple.com>\n+\n+\t* lang.c (java_tree_inlining_walk_subtrees): Last arg is struct\n+\tpointer_set_t* now.\n+\t\n 2004-10-13  Tom Tromey  <tromey@redhat.com>\n \n \tPR java/15578:"}, {"sha": "eae51a2a6897c99c2893153d2712339eb7d8dd7c", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -58,7 +58,7 @@ static void put_decl_string (const char *, int);\n static void put_decl_node (tree);\n static void java_print_error_function (diagnostic_context *, const char *);\n static tree java_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n-\t\t\t\t\t      void *, void *);\n+\t\t\t\t\t      void *, struct pointer_set_t *);\n static int merge_init_test_initialization (void * *, void *);\n static int inline_init_test_initialization (void * *, void *);\n static bool java_can_use_bit_fields_p (void);\n@@ -706,15 +706,15 @@ java_tree_inlining_walk_subtrees (tree *tp ATTRIBUTE_UNUSED,\n \t\t\t\t  int *subtrees ATTRIBUTE_UNUSED,\n \t\t\t\t  walk_tree_fn func ATTRIBUTE_UNUSED,\n \t\t\t\t  void *data ATTRIBUTE_UNUSED,\n-\t\t\t\t  void *htab ATTRIBUTE_UNUSED)\n+\t\t\t\t  struct pointer_set_t *pset ATTRIBUTE_UNUSED)\n {\n   enum tree_code code;\n   tree result;\n \n #define WALK_SUBTREE(NODE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      result = walk_tree (&(NODE), func, data, htab);\t\\\n+      result = walk_tree (&(NODE), func, data, pset);\t\\\n       if (result)\t\t\t\t\t\\\n \treturn result;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\"}, {"sha": "d036d84d48181afd0004ccd5c40ad2411c7259ce", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -73,7 +73,7 @@ extern size_t lhd_tree_size (enum tree_code);\n \n /* Declarations of default tree inlining hooks.  */\n extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n-\t\t\t\t\t     void *, void *);\n+\t\t\t\t\t     void *, struct pointer_set_t*);\n extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);\n extern int lhd_tree_inlining_disregard_inline_limits (tree);\n extern tree lhd_tree_inlining_add_pending_fn_decls (void *, tree);"}, {"sha": "0cf31be78067d727acf35eada568ff8502ba064e", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -298,7 +298,7 @@ lhd_tree_inlining_walk_subtrees (tree *tp ATTRIBUTE_UNUSED,\n \t\t\t\t int *subtrees ATTRIBUTE_UNUSED,\n \t\t\t\t walk_tree_fn func ATTRIBUTE_UNUSED,\n \t\t\t\t void *data ATTRIBUTE_UNUSED,\n-\t\t\t\t void *htab ATTRIBUTE_UNUSED)\n+\t\t\t\t struct pointer_set_t *pset ATTRIBUTE_UNUSED)\n {\n   return NULL_TREE;\n }"}, {"sha": "f57f14821ec92e9221a6ea9a836788ff882119ad", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -35,7 +35,7 @@ struct lang_hooks_for_tree_inlining\n {\n   tree (*walk_subtrees) (tree *, int *,\n \t\t\t tree (*) (tree *, int *, void *),\n-\t\t\t void *, void *);\n+\t\t\t void *, struct pointer_set_t*);\n   int (*cannot_inline_tree_fn) (tree *);\n   int (*disregard_inline_limits) (tree);\n   tree (*add_pending_fn_decls) (void *, tree);"}, {"sha": "510ae430d30f835c5ba156998a47680795fcfac1", "filename": "gcc/pointer-set.c", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fpointer-set.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fpointer-set.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-set.c?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -0,0 +1,167 @@\n+/* Set operations on pointers\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"pointer-set.h\"\n+\n+/* A pointer sets is represented as a simple open-addressing hash\n+   table.  Simplifications: The hash code is based on the value of the\n+   pointer, not what it points to.  The number of buckets is always a\n+   power of 2.  Null pointers are a reserved value.  Deletion is not\n+   supported.  There is no mechanism for user control of hash\n+   function, equality comparison, initial size, or resizing policy.\n+*/\n+\n+struct pointer_set_t\n+{\n+  size_t log_slots;\n+  size_t n_slots;\t\t/* n_slots = 2^log_slots */\n+  size_t n_elements;\n+\n+  void **slots;\n+};\n+\n+/* Use the multiplicative method, as described in Knuth 6.4, to obtain\n+   a hash code for P in the range [0, MAX).  MAX == 2^LOGMAX.\n+\n+   Summary of this method: Multiply p by some number A that's\n+   relatively prime to 2^sizeof(size_t).  The result is two words.\n+   Discard the most significant word, and return the most significant\n+   N bits of the least significant word.  As suggested by Knuth, our\n+   choice for A is the integer part of 2^32 / phi, where phi is the\n+   golden ratio.\n+\n+   We don't need to do anything special for full-width multiplication\n+   because we're only interested in the least significant word of the\n+   product, and unsigned arithmetic in C is modulo the word size. */\n+\n+static inline size_t\n+hash1 (const void *p, unsigned long max, unsigned long logmax)\n+{\n+  const unsigned long A = 0x9e3779b9u;\n+  const unsigned long shift = sizeof(unsigned long) * CHAR_BIT - logmax;\n+\n+  return ((A * (unsigned long) p) >> shift) & (max - 1);\n+}\n+\n+/* Allocate an empty pointer set. */\n+struct pointer_set_t *\n+pointer_set_create (void)\n+{\n+  struct pointer_set_t *result = XNEW (struct pointer_set_t);\n+\n+  result->n_elements = 0;\n+  result->log_slots = 8;\n+  result->n_slots = (size_t) 1 << result->log_slots;\n+\n+  result->slots = XCNEWVEC (void *, result->n_slots);\n+  return result;\n+}\n+\n+/* Reclaims all memory associated with PSET. */\n+void pointer_set_destroy (struct pointer_set_t *pset)\n+{\n+  XDELETEVEC (pset->slots);\n+  XDELETE (pset);\n+}\n+\n+/* Returns nonzero if PSET contains P.  P must be nonnull.\n+\n+   Collisions are resolved by linear probing.  More complicated\n+   collision management schemes are only useful when the load factor\n+   significatly exceeds 0.5, and we never let that happen. */\n+int\n+pointer_set_contains (struct pointer_set_t *pset, void *p)\n+{\n+  size_t n = hash1 (p, pset->n_slots, pset->log_slots);\n+\n+  while (true)\n+    {\n+      if (pset->slots[n] == p)\n+\treturn 1;\n+      else if (pset->slots[n] == 0)\n+\treturn 0;\n+      else\n+\t{\n+\t  ++n;\n+\t  if (n == pset->n_slots)\n+\t    n = 0;\n+\t}\n+    }\n+}\n+\n+/* Subroutine of pointer_set_insert.  Inserts P into an empty\n+   element of SLOTS, an array of length N_SLOTS.  Returns nonzero\n+   if P was already present in N_SLOTS. */\n+static int\n+insert_aux (void *p, void **slots, size_t n_slots, size_t log_slots)\n+{\n+  size_t n = hash1 (p, n_slots, log_slots);\n+  while (true)\n+    {\n+      if (slots[n] == p)\n+\treturn 1;\n+      else if (slots[n] == 0)\n+\t{\n+\t  slots[n] = p;\n+\t  return 0;\n+\t}\n+      else\n+\t{\n+\t  ++n;\n+\t  if (n == n_slots)\n+\t    n = 0;\n+\t}\n+    }\n+}\n+\n+/* Inserts P into PSET if it wasn't already there.  Returns nonzero\n+   if it was already there. P must be nonnull. */\n+int\n+pointer_set_insert (struct pointer_set_t *pset, void *p)\n+{\n+  if (insert_aux (p, pset->slots, pset->n_slots, pset->log_slots))\n+    return 1;\n+      \n+  /* We've inserted a new element.  Expand the table if necessary to keep\n+     the load factor small. */\n+  ++pset->n_elements;\n+  if (pset->n_elements > pset->n_slots / 4)\n+    {\n+      size_t new_log_slots = pset->log_slots + 1;\n+      size_t new_n_slots = pset->n_slots * 2;\n+      void **new_slots = XCNEWVEC (void *, new_n_slots);\n+      size_t i;\n+\n+      for (i = 0; i < pset->n_slots; ++i)\n+\t{\n+\t  if (pset->slots[i])\n+\t    insert_aux (pset->slots[i], new_slots, new_n_slots, new_log_slots);\n+\t}\n+\n+      XDELETEVEC (pset->slots);\n+      pset->n_slots = new_n_slots;\n+      pset->log_slots = new_log_slots;\n+      pset->slots = new_slots;\n+    }\n+\n+  return 0;\n+}"}, {"sha": "65ac9ee4724977aa6aa99bef8630e7b8839961af", "filename": "gcc/pointer-set.h", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fpointer-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Fpointer-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-set.h?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -0,0 +1,32 @@\n+/* Set operations on pointers\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+#ifndef POINTER_SET_H\n+#define POINTER_SET_H\n+\n+struct pointer_set_t;\n+\n+struct pointer_set_t *pointer_set_create (void);\n+void pointer_set_destroy (struct pointer_set_t *pset);\n+\n+int pointer_set_contains (struct pointer_set_t *pset, void *p);\n+int pointer_set_insert (struct pointer_set_t *pset, void *p);\n+\n+#endif  /* POINTER_SET_H  */"}, {"sha": "aa156c245dd581bfacb1224f66cb6cfec94740be", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"hashtab.h\"\n+#include \"pointer-set.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"tm_p.h\"\n@@ -759,7 +760,7 @@ debug_dfa_stats (void)\n static void\n collect_dfa_stats (struct dfa_stats_d *dfa_stats_p)\n {\n-  htab_t htab;\n+  struct pointer_set_t *pset;\n   basic_block bb;\n   block_stmt_iterator i;\n \n@@ -769,13 +770,13 @@ collect_dfa_stats (struct dfa_stats_d *dfa_stats_p)\n \n   /* Walk all the trees in the function counting references.  Start at\n      basic block 0, but don't stop at block boundaries.  */\n-  htab = htab_create (30, htab_hash_pointer, htab_eq_pointer, NULL);\n+  pset = pointer_set_create ();\n \n   for (i = bsi_start (BASIC_BLOCK (0)); !bsi_end_p (i); bsi_next (&i))\n     walk_tree (bsi_stmt_ptr (i), collect_dfa_stats_r, (void *) dfa_stats_p,\n-\t       (void *) htab);\n+\t       pset);\n \n-  htab_delete (htab);\n+  pointer_set_destroy (pset);\n \n   FOR_EACH_BB (bb)\n     {"}, {"sha": "0e2f85a7e8a8cb306d85dfefa55dae7e67f5c4bc", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -35,6 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"integrate.h\"\n #include \"varray.h\"\n #include \"hashtab.h\"\n+#include \"pointer-set.h\"\n #include \"splay-tree.h\"\n #include \"langhooks.h\"\n #include \"cgraph.h\"\n@@ -1877,7 +1878,7 @@ save_body (tree fn, tree *arg_copy, tree *sc_copy)\n #define WALK_SUBTREE(NODE)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      result = walk_tree (&(NODE), func, data, htab);\t\\\n+      result = walk_tree (&(NODE), func, data, pset);\t\\\n       if (result)\t\t\t\t\t\\\n \treturn result;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n@@ -1888,7 +1889,8 @@ save_body (tree fn, tree *arg_copy, tree *sc_copy)\n    value are as for walk_tree.  */\n \n static tree\n-walk_type_fields (tree type, walk_tree_fn func, void *data, void *htab)\n+walk_type_fields (tree type, walk_tree_fn func, void *data,\n+\t\t  struct pointer_set_t *pset)\n {\n   tree result = NULL_TREE;\n \n@@ -1906,7 +1908,7 @@ walk_type_fields (tree type, walk_tree_fn func, void *data, void *htab)\n       if (POINTER_TYPE_P (TREE_TYPE (type))\n \t  && POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (type)))\n \t  && POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (TREE_TYPE (type))))\n-\t  && !htab)\n+\t  && !pset)\n \t{\n \t  result = walk_tree_without_duplicates (&TREE_TYPE (type),\n \t\t\t\t\t\t func, data);\n@@ -1971,13 +1973,12 @@ walk_type_fields (tree type, walk_tree_fn func, void *data, void *htab)\n /* Apply FUNC to all the sub-trees of TP in a pre-order traversal.  FUNC is\n    called with the DATA and the address of each sub-tree.  If FUNC returns a\n    non-NULL value, the traversal is aborted, and the value returned by FUNC\n-   is returned.  If HTAB is non-NULL it is used to record the nodes visited,\n+   is returned.  If PSET is non-NULL it is used to record the nodes visited,\n    and to avoid visiting a node more than once.  */\n \n tree\n-walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n+walk_tree (tree *tp, walk_tree_fn func, void *data, struct pointer_set_t *pset)\n {\n-  htab_t htab = (htab_t) htab_;\n   enum tree_code code;\n   int walk_subtrees;\n   tree result;\n@@ -1995,17 +1996,10 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n   if (!*tp)\n     return NULL_TREE;\n \n-  if (htab)\n-    {\n-      void **slot;\n-\n-      /* Don't walk the same tree twice, if the user has requested\n-         that we avoid doing so.  */\n-      slot = htab_find_slot (htab, *tp, INSERT);\n-      if (*slot)\n-\treturn NULL_TREE;\n-      *slot = *tp;\n-    }\n+  /* Don't walk the same tree twice, if the user has requested\n+     that we avoid doing so.  */\n+  if (pset && pointer_set_insert (pset, *tp))\n+    return NULL_TREE;\n \n   /* Call the function.  */\n   walk_subtrees = 1;\n@@ -2029,7 +2023,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n     }\n \n   result = lang_hooks.tree_inlining.walk_subtrees (tp, &walk_subtrees, func,\n-\t\t\t\t\t\t   data, htab);\n+\t\t\t\t\t\t   data, pset);\n   if (result || ! walk_subtrees)\n     return result;\n \n@@ -2053,7 +2047,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n       if (result || !walk_subtrees)\n \treturn NULL_TREE;\n \n-      result = walk_type_fields (*type_p, func, data, htab_);\n+      result = walk_type_fields (*type_p, func, data, pset);\n       if (result)\n \treturn result;\n \n@@ -2124,7 +2118,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n   /* If this is a type, walk the needed fields in the type.  */\n   else if (TYPE_P (*tp))\n     {\n-      result = walk_type_fields (*tp, func, data, htab_);\n+      result = walk_type_fields (*tp, func, data, pset);\n       if (result)\n \treturn result;\n     }\n@@ -2227,11 +2221,11 @@ tree\n walk_tree_without_duplicates (tree *tp, walk_tree_fn func, void *data)\n {\n   tree result;\n-  htab_t htab;\n+  struct pointer_set_t *pset;\n \n-  htab = htab_create (37, htab_hash_pointer, htab_eq_pointer, NULL);\n-  result = walk_tree (tp, func, data, htab);\n-  htab_delete (htab);\n+  pset = pointer_set_create ();\n+  result = walk_tree (tp, func, data, pset);\n+  pointer_set_destroy (pset);\n   return result;\n }\n "}, {"sha": "15cd061a6a030981fbf11153eeeac2cbad24e901", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c58f841a52644c9845b3c136f3264e6a728ba76/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0c58f841a52644c9845b3c136f3264e6a728ba76", "patch": "@@ -3790,10 +3790,14 @@ extern void dwarf2out_return_reg (const char *, unsigned);\n \n /* In tree-inline.c  */\n \n+/* The type of a set of already-visited pointers.  Functions for creating\n+   and manipulating it are declared in pointer-set.h */\n+struct pointer_set_t;\n+\n /* The type of a callback function for walking over tree structure.  */\n \n typedef tree (*walk_tree_fn) (tree *, int *, void *);\n-extern tree walk_tree (tree*, walk_tree_fn, void*, void*);\n+extern tree walk_tree (tree*, walk_tree_fn, void*, struct pointer_set_t*);\n extern tree walk_tree_without_duplicates (tree*, walk_tree_fn, void*);\n \n /* In tree-dump.c */"}]}