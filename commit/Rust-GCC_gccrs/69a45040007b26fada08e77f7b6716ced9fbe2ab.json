{"sha": "69a45040007b26fada08e77f7b6716ced9fbe2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlhNDUwNDAwMDdiMjZmYWRhMDhlNzdmN2I2NzE2Y2VkOWZiZTJhYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-27T19:20:02Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-27T19:20:02Z"}, "message": "iq2000-protos.h: Remove the prototype for iq2000_setup_incoming_varargs.\n\n\t* config/iq2000/iq2000-protos.h: Remove the prototype for\n\tiq2000_setup_incoming_varargs.\n\t* config/iq2000/iq2000.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n\t(iq2000_return_in_memory): Likewise.\n\t(iq2000_setup_incoming_varargs): Make it static.  Receive the\n\tfirst argument by reference.\n\t* config/iq2000/iq2000.h (PROMOTE_FUNCTION_ARGS): Remove.\n\t(PROMOTE_FUNCTION_RETURN): Likewise.\n\t(PROMOTE_PROTOTYPES): Likewise.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\t(SETUP_INCOMING_VARARGS): Likewise.\n\t(STRICT_ARGUMENT_NAMING): Likewise.\n\nFrom-SVN: r76739", "tree": {"sha": "5c84bbb15a4cd91879a1f8646df1611fb706556f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c84bbb15a4cd91879a1f8646df1611fb706556f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69a45040007b26fada08e77f7b6716ced9fbe2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a45040007b26fada08e77f7b6716ced9fbe2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a45040007b26fada08e77f7b6716ced9fbe2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a45040007b26fada08e77f7b6716ced9fbe2ab/comments", "author": null, "committer": null, "parents": [{"sha": "9cdfc8e7e2a919864bbca6a0196617a0d50e3987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cdfc8e7e2a919864bbca6a0196617a0d50e3987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cdfc8e7e2a919864bbca6a0196617a0d50e3987"}], "stats": {"total": 100, "additions": 66, "deletions": 34}, "files": [{"sha": "190a2ed246bf6040a50b08984394ff0300ce9ca9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a45040007b26fada08e77f7b6716ced9fbe2ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a45040007b26fada08e77f7b6716ced9fbe2ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69a45040007b26fada08e77f7b6716ced9fbe2ab", "patch": "@@ -1,3 +1,25 @@\n+2004-01-27  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/iq2000/iq2000-protos.h: Remove the prototype for\n+\tiq2000_setup_incoming_varargs.\n+\t* config/iq2000/iq2000.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n+\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n+\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n+\t(iq2000_return_in_memory): Likewise.\n+\t(iq2000_setup_incoming_varargs): Make it static.  Receive the\n+\tfirst argument by reference.\n+\t* config/iq2000/iq2000.h (PROMOTE_FUNCTION_ARGS): Remove.\n+\t(PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(PROMOTE_PROTOTYPES): Likewise.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\t(STRUCT_VALUE): Likewise.\n+\t(SETUP_INCOMING_VARARGS): Likewise.\n+\t(STRICT_ARGUMENT_NAMING): Likewise.\n+\n 2004-01-24  James A. Morrison  <ja2morri@uwaterloo.ca>\n \n         * fixinc/fixinc.c (test_test): Initialize res."}, {"sha": "dadcc232dde08ebf33de866fe48c38469ab5f121", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a45040007b26fada08e77f7b6716ced9fbe2ab/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a45040007b26fada08e77f7b6716ced9fbe2ab/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=69a45040007b26fada08e77f7b6716ced9fbe2ab", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for iq2000.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -38,7 +38,6 @@ extern int              iq2000_can_use_return_insn (void);\n extern int              function_arg_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern int              iq2000_adjust_insn_length (rtx, int);\n extern char *           iq2000_output_conditional_branch (rtx, rtx *, int, int, int, int);\n-extern void             iq2000_setup_incoming_varargs (CUMULATIVE_ARGS, int, tree, int*, int);\n extern void             print_operand_address (FILE *, rtx);\n extern void             print_operand (FILE *, rtx, int);\n "}, {"sha": "59fcc6c1fcbdab44e4b9fb7d4b1297799c97f702", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a45040007b26fada08e77f7b6716ced9fbe2ab/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a45040007b26fada08e77f7b6716ced9fbe2ab/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=69a45040007b26fada08e77f7b6716ced9fbe2ab", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on Vitesse IQ2000 processors\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -163,9 +163,14 @@ static struct machine_function* iq2000_init_machine_status (void);\n static void iq2000_select_rtx_section (enum machine_mode, rtx, unsigned HOST_WIDE_INT);\n static void iq2000_init_builtins      (void);\n static rtx  iq2000_expand_builtin     (tree, rtx, rtx, enum machine_mode, int);\n+static bool iq2000_return_in_memory   (tree, tree);\n+static void iq2000_setup_incoming_varargs (CUMULATIVE_ARGS *,\n+\t\t\t\t\t   enum machine_mode, tree, int *,\n+\t\t\t\t\t   int);\n static bool iq2000_rtx_costs          (rtx, int, int, int *);\n static int  iq2000_address_cost       (rtx);\n static void iq2000_select_section     (tree, int, unsigned HOST_WIDE_INT);\n+static bool iq2000_return_in_memory   (tree, tree);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -180,6 +185,23 @@ static void iq2000_select_section     (tree, int, unsigned HOST_WIDE_INT);\n #undef  TARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION\tiq2000_select_section\n \n+#undef  TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS\thook_bool_tree_true\n+#undef  TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN\thook_bool_tree_true\n+#undef  TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES\thook_bool_tree_true\n+\n+#undef  TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX\t\thook_rtx_tree_int_null\n+#undef  TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY\t\tiq2000_return_in_memory\n+\n+#undef  TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS\tiq2000_setup_incoming_varargs\n+#undef  TARGET_STRICT_ARGUMENT_NAMING\n+#define TARGET_STRICT_ARGUMENT_NAMING\thook_bool_CUMULATIVE_ARGS_true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return 1 if OP can be used as an operand where a register or 16 bit unsigned\n@@ -2642,8 +2664,8 @@ iq2000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n   enum machine_mode mode = TYPE_MODE (valtype);\n   int unsignedp = TREE_UNSIGNED (valtype);\n \n-  /* Since we define PROMOTE_FUNCTION_RETURN, we must promote the mode\n-     just as PROMOTE_MODE does.  */\n+  /* Since we define TARGET_PROMOTE_FUNCTION_RETURN that returns true,\n+     we must promote the mode just as PROMOTE_MODE does.  */\n   mode = promote_mode (valtype, mode, &unsignedp, 1);\n \n   return gen_rtx_REG (mode, reg);\n@@ -3262,20 +3284,28 @@ iq2000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   return NULL_RTX;\n }\n \f\n-void\n-iq2000_setup_incoming_varargs (CUMULATIVE_ARGS cum, int mode ATTRIBUTE_UNUSED,\n+static bool\n+iq2000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return ((int_size_in_bytes (type) > (2 * UNITS_PER_WORD))\n+\t  || (int_size_in_bytes (type) == -1));\n+}\n+\n+static void\n+iq2000_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n+\t\t\t       enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t       tree type ATTRIBUTE_UNUSED, int * pretend_size,\n \t\t\t       int no_rtl)\n {\n-  unsigned int iq2000_off = (! (cum).last_arg_fp); \n-  unsigned int iq2000_fp_off = ((cum).last_arg_fp); \n+  unsigned int iq2000_off = ! cum->last_arg_fp; \n+  unsigned int iq2000_fp_off = cum->last_arg_fp; \n \n-  if (((cum).arg_words < MAX_ARGS_IN_REGISTERS - iq2000_off))\n+  if ((cum->arg_words < MAX_ARGS_IN_REGISTERS - iq2000_off))\n     {\n       int iq2000_save_gp_regs \n-\t= MAX_ARGS_IN_REGISTERS - (cum).arg_words - iq2000_off; \n+\t= MAX_ARGS_IN_REGISTERS - cum->arg_words - iq2000_off; \n       int iq2000_save_fp_regs \n-        = (MAX_ARGS_IN_REGISTERS - (cum).fp_arg_words - iq2000_fp_off); \n+        = (MAX_ARGS_IN_REGISTERS - cum->fp_arg_words - iq2000_fp_off); \n \n       if (iq2000_save_gp_regs < 0) \n \tiq2000_save_gp_regs = 0; \n@@ -3287,15 +3317,15 @@ iq2000_setup_incoming_varargs (CUMULATIVE_ARGS cum, int mode ATTRIBUTE_UNUSED,\n \n       if (! (no_rtl)) \n \t{\n-\t  if ((cum).arg_words < MAX_ARGS_IN_REGISTERS - iq2000_off) \n+\t  if (cum->arg_words < MAX_ARGS_IN_REGISTERS - iq2000_off) \n \t    {\n \t      rtx ptr, mem; \n \t      ptr = plus_constant (virtual_incoming_args_rtx, \n \t\t\t\t   - (iq2000_save_gp_regs \n \t\t\t\t      * UNITS_PER_WORD)); \n \t      mem = gen_rtx_MEM (BLKmode, ptr); \n \t      move_block_from_reg \n-\t\t((cum).arg_words + GP_ARG_FIRST + iq2000_off, \n+\t\t(cum->arg_words + GP_ARG_FIRST + iq2000_off, \n \t\t mem, \n \t\t iq2000_save_gp_regs);\n \t    } "}, {"sha": "3d04c0e59b8e587b2feaf4ccfd52480e1e838d14", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69a45040007b26fada08e77f7b6716ced9fbe2ab/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69a45040007b26fada08e77f7b6716ced9fbe2ab/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=69a45040007b26fada08e77f7b6716ced9fbe2ab", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.  \n    Vitesse IQ2000 processors\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -155,10 +155,6 @@ extern int\ttarget_flags;\n       && GET_MODE_SIZE (MODE) < 4)\t\t\\\n     (MODE) = SImode;\n \n-#define PROMOTE_FUNCTION_ARGS\n-\n-#define PROMOTE_FUNCTION_RETURN\n-\n #define PARM_BOUNDARY 32\n \n #define STACK_BOUNDARY 64\n@@ -427,8 +423,6 @@ enum reg_class\n \f\n /* Passing Function Arguments on the Stack.  */\n \n-#define PROMOTE_PROTOTYPES 1\n-\n /* #define PUSH_ROUNDING(BYTES) 0 */\n \n #define ACCUMULATE_OUTGOING_ARGS 1\n@@ -520,15 +514,7 @@ typedef struct iq2000_args\n \f\n /* How Large Values are Returned.  */\n \n-#define RETURN_IN_MEMORY(TYPE)\t\t\t\t\t\t \\\n-  (((int_size_in_bytes (TYPE)\t\t\t\t\t\t \\\n-       > (2 * UNITS_PER_WORD)) \t\t\t\t\t\t \\\n-      || (int_size_in_bytes (TYPE) == -1)))\n-\n #define DEFAULT_PCC_STRUCT_RETURN 0\n-\n-#define STRUCT_VALUE 0\n-\n \f\n /* Function Entry and Exit.  */\n \n@@ -557,11 +543,6 @@ typedef struct iq2000_args\n \f\n /* Implementing the Varargs Macros.  */\n \n-#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n-  iq2000_setup_incoming_varargs (CUM,MODE,TYPE,&PRETEND_SIZE,NO_RTL);\n-\n-#define STRICT_ARGUMENT_NAMING  1\n-\n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   iq2000_va_start (valist, nextarg)\n "}]}