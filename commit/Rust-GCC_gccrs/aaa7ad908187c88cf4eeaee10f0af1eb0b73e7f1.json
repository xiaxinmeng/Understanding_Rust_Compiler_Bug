{"sha": "aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhN2FkOTA4MTg3Yzg4Y2Y0ZWVhZWUxMGYwYWYxZWIwYjczZTdmMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-19T12:12:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-19T12:12:21Z"}, "message": "Makefile.in (tree-ssa-forwprop.o): Depend on gimple-pretty-print.h.\n\n2011-07-19  Richard Guenther  <rguenther@suse.de>\n\n\t* Makefile.in (tree-ssa-forwprop.o): Depend on gimple-pretty-print.h.\n\t* tree-ssa-forwprop.c: Include gimple-pretty-print.h.\n\t(forward_propagate_comparison): Simplify, remove obsolete code.\n\nFrom-SVN: r176445", "tree": {"sha": "2b8d0c4a400cf0628705ec87333cef91854f59d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b8d0c4a400cf0628705ec87333cef91854f59d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1/comments", "author": null, "committer": null, "parents": [{"sha": "530206482667dd180acc4ca1e339389308f0736b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530206482667dd180acc4ca1e339389308f0736b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530206482667dd180acc4ca1e339389308f0736b"}], "stats": {"total": 130, "additions": 50, "deletions": 80}, "files": [{"sha": "d924fb66cd69d5d4dc76258895f8e891047ebfbc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1", "patch": "@@ -2420,7 +2420,8 @@ tree-ssa-dse.o : tree-ssa-dse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n tree-ssa-forwprop.o : tree-ssa-forwprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(TREE_DUMP_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n-   langhooks.h $(FLAGS_H) $(GIMPLE_H) tree-pretty-print.h $(EXPR_H)\n+   langhooks.h $(FLAGS_H) $(GIMPLE_H) tree-pretty-print.h \\\n+   gimple-pretty-print.h $(EXPR_H)\n tree-ssa-phiprop.o : tree-ssa-phiprop.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(TM_P_H) $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(TREE_DUMP_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\"}, {"sha": "1bbee72b53d7db02ab5b13602ed999257b3c63c7", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 48, "deletions": 79, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=aaa7ad908187c88cf4eeaee10f0af1eb0b73e7f1", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm_p.h\"\n #include \"basic-block.h\"\n #include \"timevar.h\"\n-#include \"tree-pretty-print.h\"\n+#include \"gimple-pretty-print.h\"\n #include \"tree-flow.h\"\n #include \"tree-pass.h\"\n #include \"tree-dump.h\"\n@@ -1109,6 +1109,9 @@ forward_propagate_comparison (gimple stmt)\n   tree name = gimple_assign_lhs (stmt);\n   gimple use_stmt;\n   tree tmp = NULL_TREE;\n+  gimple_stmt_iterator gsi;\n+  enum tree_code code;\n+  tree lhs;\n \n   /* Don't propagate ssa names that occur in abnormal phis.  */\n   if ((TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n@@ -1119,93 +1122,59 @@ forward_propagate_comparison (gimple stmt)\n \n   /* Do not un-cse comparisons.  But propagate through copies.  */\n   use_stmt = get_prop_dest_stmt (name, &name);\n-  if (!use_stmt)\n+  if (!use_stmt\n+      || !is_gimple_assign (use_stmt))\n     return false;\n \n-  /* Conversion of the condition result to another integral type.  */\n-  if (is_gimple_assign (use_stmt)\n-      && (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (use_stmt))\n-\t  || TREE_CODE_CLASS (gimple_assign_rhs_code (use_stmt))\n-\t     == tcc_comparison\n-          || gimple_assign_rhs_code (use_stmt) == BIT_NOT_EXPR\n-\t  || gimple_assign_rhs_code (use_stmt) == BIT_XOR_EXPR)\n-      && INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_lhs (use_stmt))))\n-    {\n-      tree lhs = gimple_assign_lhs (use_stmt);\n-\n-      /* We can propagate the condition into a conversion.  */\n-      if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (use_stmt)))\n-\t{\n-\t  /* Avoid using fold here as that may create a COND_EXPR with\n-\t     non-boolean condition as canonical form.  */\n-\t  tmp = build2 (gimple_assign_rhs_code (stmt), TREE_TYPE (lhs),\n-                        gimple_assign_rhs1 (stmt), gimple_assign_rhs2 (stmt));\n-\t}\n-      /* We can propagate the condition into X op CST where op\n-\t is EQ_EXPR or NE_EXPR and CST is either one or zero.  */\n-      else if (TREE_CODE_CLASS (gimple_assign_rhs_code (use_stmt))\n-              == tcc_comparison\n-             && TREE_CODE (gimple_assign_rhs1 (use_stmt)) == SSA_NAME\n-             && TREE_CODE (gimple_assign_rhs2 (use_stmt)) == INTEGER_CST)\n-      {\n-        enum tree_code code = gimple_assign_rhs_code (use_stmt);\n-        tree cst = gimple_assign_rhs2 (use_stmt);\n-\ttree cond;\n-\n-\tcond = build2 (gimple_assign_rhs_code (stmt),\n-\t\t       TREE_TYPE (cst),\n-\t\t       gimple_assign_rhs1 (stmt),\n-\t\t       gimple_assign_rhs2 (stmt));\n-\n-        tmp = combine_cond_expr_cond (gimple_location (use_stmt),\n-\t\t\t\t      code, TREE_TYPE (lhs),\n-\t\t\t\t      cond, cst, false);\n-        if (tmp == NULL_TREE)\n-          return false;\n-      }\n-      /* We can propagate the condition into a statement that\n-\t computes the logical negation of the comparison result.  */\n-      else if ((gimple_assign_rhs_code (use_stmt) == BIT_NOT_EXPR\n-\t\t&& TYPE_PRECISION (TREE_TYPE (lhs)) == 1)\n-\t       || (gimple_assign_rhs_code (use_stmt) == BIT_XOR_EXPR\n-\t\t   && integer_onep (gimple_assign_rhs2 (use_stmt))))\n-\t{\n-\t  tree type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n-\t  bool nans = HONOR_NANS (TYPE_MODE (type));\n-\t  enum tree_code code;\n-\t  code = invert_tree_comparison (gimple_assign_rhs_code (stmt), nans);\n-\t  if (code == ERROR_MARK)\n-\t    return false;\n+  code = gimple_assign_rhs_code (use_stmt);\n+  lhs = gimple_assign_lhs (use_stmt);\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n+    return false;\n \n-\t  tmp = build2 (code, TREE_TYPE (lhs), gimple_assign_rhs1 (stmt),\n-                        gimple_assign_rhs2 (stmt));\n-\t}\n-      else\n+  /* We can propagate the condition into a conversion.  */\n+  if (CONVERT_EXPR_CODE_P (code))\n+    {\n+      /* Avoid using fold here as that may create a COND_EXPR with\n+\t non-boolean condition as canonical form.  */\n+      tmp = build2 (gimple_assign_rhs_code (stmt), TREE_TYPE (lhs),\n+\t\t    gimple_assign_rhs1 (stmt), gimple_assign_rhs2 (stmt));\n+    }\n+  /* We can propagate the condition into a statement that\n+     computes the logical negation of the comparison result.  */\n+  else if ((code == BIT_NOT_EXPR\n+\t    && TYPE_PRECISION (TREE_TYPE (lhs)) == 1)\n+\t   || (code == BIT_XOR_EXPR\n+\t       && integer_onep (gimple_assign_rhs2 (use_stmt))))\n+    {\n+      tree type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n+      bool nans = HONOR_NANS (TYPE_MODE (type));\n+      enum tree_code inv_code;\n+      inv_code = invert_tree_comparison (gimple_assign_rhs_code (stmt), nans);\n+      if (inv_code == ERROR_MARK)\n \treturn false;\n \n-      {\n-\tgimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n-\tgimple_assign_set_rhs_from_tree (&gsi, unshare_expr (tmp));\n-\tuse_stmt = gsi_stmt (gsi);\n-\tupdate_stmt (use_stmt);\n-      }\n+      tmp = build2 (inv_code, TREE_TYPE (lhs), gimple_assign_rhs1 (stmt),\n+\t\t    gimple_assign_rhs2 (stmt));\n+    }\n+  else\n+    return false;\n \n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  tree old_rhs = rhs_to_tree (TREE_TYPE (gimple_assign_lhs (stmt)),\n-                                      stmt);\n-\t  fprintf (dump_file, \"  Replaced '\");\n-\t  print_generic_expr (dump_file, old_rhs, dump_flags);\n-\t  fprintf (dump_file, \"' with '\");\n-\t  print_generic_expr (dump_file, tmp, dump_flags);\n-\t  fprintf (dump_file, \"'\\n\");\n-\t}\n+  gsi = gsi_for_stmt (use_stmt);\n+  gimple_assign_set_rhs_from_tree (&gsi, unshare_expr (tmp));\n+  use_stmt = gsi_stmt (gsi);\n+  update_stmt (use_stmt);\n \n-      /* Remove defining statements.  */\n-      return remove_prop_source_from_use (name);\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      fprintf (dump_file, \"  Replaced '\");\n+      print_gimple_expr (dump_file, stmt, 0, dump_flags);\n+      fprintf (dump_file, \"' with '\");\n+      print_gimple_expr (dump_file, use_stmt, 0, dump_flags);\n+      fprintf (dump_file, \"'\\n\");\n     }\n \n-  return false;\n+  /* Remove defining statements.  */\n+  return remove_prop_source_from_use (name);\n }\n \n "}]}