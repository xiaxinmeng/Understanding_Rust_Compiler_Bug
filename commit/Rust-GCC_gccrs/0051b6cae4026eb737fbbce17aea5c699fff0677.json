{"sha": "0051b6cae4026eb737fbbce17aea5c699fff0677", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1MWI2Y2FlNDAyNmViNzM3ZmJiY2UxN2FlYTVjNjk5ZmZmMDY3Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-12T02:42:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-12T02:42:41Z"}, "message": "combine.c (simplify_shift_const): Move SHIFT_COUNT_TRUNCATED simplification above out of range check.\n\n        * combine.c (simplify_shift_const): Move SHIFT_COUNT_TRUNCATED\n        simplification above out of range check.\n\nFrom-SVN: r47912", "tree": {"sha": "6a5218ac1eee7341319aa13211ef5f0e8cf3a7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a5218ac1eee7341319aa13211ef5f0e8cf3a7b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0051b6cae4026eb737fbbce17aea5c699fff0677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0051b6cae4026eb737fbbce17aea5c699fff0677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0051b6cae4026eb737fbbce17aea5c699fff0677", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0051b6cae4026eb737fbbce17aea5c699fff0677/comments", "author": null, "committer": null, "parents": [{"sha": "f3bfd09c28cee0b618ada98a97c864c242f46421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bfd09c28cee0b618ada98a97c864c242f46421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bfd09c28cee0b618ada98a97c864c242f46421"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "981bcc30aa5d164d000d0106b2471df921d2bfaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0051b6cae4026eb737fbbce17aea5c699fff0677/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0051b6cae4026eb737fbbce17aea5c699fff0677/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0051b6cae4026eb737fbbce17aea5c699fff0677", "patch": "@@ -1,3 +1,8 @@\n+2001-12-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* combine.c (simplify_shift_const): Move SHIFT_COUNT_TRUNCATED\n+\tsimplification above out of range check.\n+\n 2001-12-11  Dan Nicolaescu  <dann@ics.uci.edu>\n \n \t* config/sparc/sparc.md (prefetch): New."}, {"sha": "4a58e7194cde065b8e94315eb55b4c6d20c285c8", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0051b6cae4026eb737fbbce17aea5c699fff0677/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0051b6cae4026eb737fbbce17aea5c699fff0677/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0051b6cae4026eb737fbbce17aea5c699fff0677", "patch": "@@ -8811,15 +8811,14 @@ merge_outer_ops (pop0, pconst0, op1, const1, mode, pcomp_p)\n    are ASHIFTRT and ROTATE, which are always done in their original mode,  */\n \n static rtx\n-simplify_shift_const (x, code, result_mode, varop, input_count)\n+simplify_shift_const (x, code, result_mode, varop, orig_count)\n      rtx x;\n      enum rtx_code code;\n      enum machine_mode result_mode;\n      rtx varop;\n-     int input_count;\n+     int orig_count;\n {\n   enum rtx_code orig_code = code;\n-  int orig_count = input_count;\n   unsigned int count;\n   int signed_count;\n   enum machine_mode mode = result_mode;\n@@ -8833,26 +8832,26 @@ simplify_shift_const (x, code, result_mode, varop, input_count)\n   int complement_p = 0;\n   rtx new;\n \n+  /* Make sure and truncate the \"natural\" shift on the way in.  We don't\n+     want to do this inside the loop as it makes it more difficult to\n+     combine shifts.  */\n+#ifdef SHIFT_COUNT_TRUNCATED\n+  if (SHIFT_COUNT_TRUNCATED)\n+    orig_count &= GET_MODE_BITSIZE (mode) - 1;\n+#endif\n+\n   /* If we were given an invalid count, don't do anything except exactly\n      what was requested.  */\n \n-  if (input_count < 0 || input_count >= (int) GET_MODE_BITSIZE (mode))\n+  if (orig_count < 0 || orig_count >= (int) GET_MODE_BITSIZE (mode))\n     {\n       if (x)\n \treturn x;\n \n-      return gen_rtx_fmt_ee (code, mode, varop, GEN_INT (input_count));\n+      return gen_rtx_fmt_ee (code, mode, varop, GEN_INT (orig_count));\n     }\n \n-  count = input_count;\n-\n-  /* Make sure and truncate the \"natural\" shift on the way in.  We don't\n-     want to do this inside the loop as it makes it more difficult to\n-     combine shifts.  */\n-#ifdef SHIFT_COUNT_TRUNCATED\n-  if (SHIFT_COUNT_TRUNCATED)\n-    count %= GET_MODE_BITSIZE (mode);\n-#endif\n+  count = orig_count;\n \n   /* Unless one of the branches of the `if' in this loop does a `continue',\n      we will `break' the loop after the `if'.  */"}]}