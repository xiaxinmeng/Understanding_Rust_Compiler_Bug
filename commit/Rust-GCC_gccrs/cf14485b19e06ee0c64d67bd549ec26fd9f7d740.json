{"sha": "cf14485b19e06ee0c64d67bd549ec26fd9f7d740", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YxNDQ4NWIxOWUwNmVlMGM2NGQ2N2JkNTQ5ZWMyNmZkOWY3ZDc0MA==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-12-17T10:38:37Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-12-17T10:38:37Z"}, "message": "avr.c (out_set_stack_ptr): Update comment.\n\n\t* config/avr/avr.c (out_set_stack_ptr): Update comment.\n\t(print_operand): Add support for %~ and %o.\n\nFrom-SVN: r38326", "tree": {"sha": "90370fef4c9fa07ec552d6545a5cc39fd49373d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90370fef4c9fa07ec552d6545a5cc39fd49373d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf14485b19e06ee0c64d67bd549ec26fd9f7d740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf14485b19e06ee0c64d67bd549ec26fd9f7d740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf14485b19e06ee0c64d67bd549ec26fd9f7d740", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf14485b19e06ee0c64d67bd549ec26fd9f7d740/comments", "author": null, "committer": null, "parents": [{"sha": "4984a8d3e5642a0a20316bfed0dac91ea309210f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4984a8d3e5642a0a20316bfed0dac91ea309210f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4984a8d3e5642a0a20316bfed0dac91ea309210f"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "f29af44a9704c5723482aed4e59fdc247ff0c1c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf14485b19e06ee0c64d67bd549ec26fd9f7d740/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf14485b19e06ee0c64d67bd549ec26fd9f7d740/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf14485b19e06ee0c64d67bd549ec26fd9f7d740", "patch": "@@ -1,3 +1,8 @@\n+2000-12-12  Marek Michalkiewicz  <marekm@linux.org.pl>\n+\n+\t* config/avr/avr.c (out_set_stack_ptr): Update comment.\n+\t(print_operand): Add support for %~ and %o.\n+\n 2000-12-17 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n \t* c4x.h: Add ASM_OUTPUT_DEF definition for bounded pointer code."}, {"sha": "2903509f9046bab20a8458ac2a8043be60167de6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf14485b19e06ee0c64d67bd549ec26fd9f7d740/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf14485b19e06ee0c64d67bd549ec26fd9f7d740/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=cf14485b19e06ee0c64d67bd549ec26fd9f7d740", "patch": "@@ -505,8 +505,8 @@ out_set_stack_ptr (file, before, after)\n     }\n \n   /* Set/restore the I flag now - interrupts will be really enabled only\n-     after the next instruction starts.  This was not clearly documented.\n-     XXX - verify this on the new devices with enhanced AVR core.  */\n+     after the next instruction.  This is not clearly documented, but\n+     believed to be true for all AVR devices.  */\n   if (do_save)\n     {\n       fprintf (file, AS2 (out, __SREG__, __tmp_reg__) CR_TAB);\n@@ -1003,10 +1003,15 @@ print_operand (file, x, code)\n   if (code >= 'A' && code <= 'D')\n     abcd = code - 'A';\n \n-  if (REG_P (x))\n+  if (code == '~')\n+    {\n+      if (!AVR_MEGA)\n+\tfputc ('r', file);\n+    }\n+  else if (REG_P (x))\n     {\n       if (x == zero_reg_rtx)\n-\tfprintf (file,\"__zero_reg__\");\n+\tfprintf (file, \"__zero_reg__\");\n       else\n \tfprintf (file, reg_names[true_regnum (x) + abcd]);\n     }\n@@ -1022,6 +1027,13 @@ print_operand (file, x, code)\n \t  output_address (addr);\n \t  fprintf (file, \")+%d\", abcd);\n \t}\n+      else if (code == 'o')\n+\t{\n+\t  if (GET_CODE (addr) != PLUS)\n+\t    fatal_insn (\"Bad address, not (reg+disp):\", addr);\n+\n+\t  print_operand (file, XEXP (addr, 1), 0);\n+\t}\n       else if (GET_CODE (addr) == PLUS)\n \t{\n \t  print_operand_address (file, XEXP (addr,0));"}]}