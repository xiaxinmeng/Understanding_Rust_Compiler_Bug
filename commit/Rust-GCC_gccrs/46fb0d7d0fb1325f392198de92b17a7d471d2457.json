{"sha": "46fb0d7d0fb1325f392198de92b17a7d471d2457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmYjBkN2QwZmIxMzI1ZjM5MjE5OGRlOTJiMTdhN2Q0NzFkMjQ1Nw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-09-25T14:37:13Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-09-25T14:37:13Z"}, "message": "Fix nightly testing i386-coff libstdc++ build failure.\n\n\t* sdbout.c (sdbout_one_type): Don't look at TYPE_BINFO field of enums.\n\nFrom-SVN: r22592", "tree": {"sha": "5db63bc9feaeb83a783e203c848ec4ff823b477e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5db63bc9feaeb83a783e203c848ec4ff823b477e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fb0d7d0fb1325f392198de92b17a7d471d2457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fb0d7d0fb1325f392198de92b17a7d471d2457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fb0d7d0fb1325f392198de92b17a7d471d2457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fb0d7d0fb1325f392198de92b17a7d471d2457/comments", "author": null, "committer": null, "parents": [{"sha": "913d8e132065f31b1594add678621d6b3b573d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913d8e132065f31b1594add678621d6b3b573d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913d8e132065f31b1594add678621d6b3b573d51"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "1972e4c356843c832140b1f3e13039d8ecd36268", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb0d7d0fb1325f392198de92b17a7d471d2457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb0d7d0fb1325f392198de92b17a7d471d2457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46fb0d7d0fb1325f392198de92b17a7d471d2457", "patch": "@@ -1,3 +1,7 @@\n+Fri Sep 25 14:18:33 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* sdbout.c (sdbout_one_type): Don't look at TYPE_BINFO field of enums.\n+\n Fri Sep 25 19:30:19 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.c (gen_shl_sext): Fix case 5."}, {"sha": "1823155cea5a9b048b56f0b78630fc620f5e0b5a", "filename": "gcc/sdbout.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fb0d7d0fb1325f392198de92b17a7d471d2457/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fb0d7d0fb1325f392198de92b17a7d471d2457/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=46fb0d7d0fb1325f392198de92b17a7d471d2457", "patch": "@@ -1206,34 +1206,41 @@ sdbout_one_type (type)\n \n \t/* Print out the base class information with fields\n \t   named after the types they hold.  */\n-\tif (TYPE_BINFO (type)\n-\t    && TYPE_BINFO_BASETYPES (type))\n-\t  n_baseclasses = TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES (type));\n-\tfor (i = 0; i < n_baseclasses; i++)\n+\t/* This is only relevent to aggregate types.  TYPE_BINFO is used\n+\t   for other purposes in an ENUMERAL_TYPE, so we must exclude that\n+\t   case.  */\n+\tif (TREE_CODE (type) != ENUMERAL_TYPE)\n \t  {\n-\t    tree child = TREE_VEC_ELT (BINFO_BASETYPES (TYPE_BINFO (type)), i);\n-\t    tree child_type = BINFO_TYPE (child);\n-\t    tree child_type_name;\n-\t    if (TYPE_NAME (child_type) == 0)\n-\t      continue;\n-\t    if (TREE_CODE (TYPE_NAME (child_type)) == IDENTIFIER_NODE)\n-\t      child_type_name = TYPE_NAME (child_type);\n-\t    else if (TREE_CODE (TYPE_NAME (child_type)) == TYPE_DECL)\n+\t    if (TYPE_BINFO (type)\n+\t\t&& TYPE_BINFO_BASETYPES (type))\n+\t      n_baseclasses = TREE_VEC_LENGTH (TYPE_BINFO_BASETYPES (type));\n+\t    for (i = 0; i < n_baseclasses; i++)\n \t      {\n-\t\tchild_type_name = DECL_NAME (TYPE_NAME (child_type));\n-\t\tif (child_type_name && template_name_p (child_type_name))\n-\t\t  child_type_name\n-\t\t    = DECL_ASSEMBLER_NAME (TYPE_NAME (child_type));\n-\t      }\n-\t    else\n-\t      continue;\n+\t\ttree child = TREE_VEC_ELT (BINFO_BASETYPES (TYPE_BINFO (type)),\n+\t\t\t\t\t   i);\n+\t\ttree child_type = BINFO_TYPE (child);\n+\t\ttree child_type_name;\n+\t\tif (TYPE_NAME (child_type) == 0)\n+\t\t  continue;\n+\t\tif (TREE_CODE (TYPE_NAME (child_type)) == IDENTIFIER_NODE)\n+\t\t  child_type_name = TYPE_NAME (child_type);\n+\t\telse if (TREE_CODE (TYPE_NAME (child_type)) == TYPE_DECL)\n+\t\t  {\n+\t\t    child_type_name = DECL_NAME (TYPE_NAME (child_type));\n+\t\t    if (child_type_name && template_name_p (child_type_name))\n+\t\t      child_type_name\n+\t\t\t= DECL_ASSEMBLER_NAME (TYPE_NAME (child_type));\n+\t\t  }\n+\t\telse\n+\t\t  continue;\n \n-\t    CONTIN;\n-\t    PUT_SDB_DEF (IDENTIFIER_POINTER (child_type_name));\n-\t    PUT_SDB_INT_VAL (TREE_INT_CST_LOW (BINFO_OFFSET (child)));\n-\t    PUT_SDB_SCL (member_scl);\n-\t    sdbout_type (BINFO_TYPE (child));\n-\t    PUT_SDB_ENDEF;\n+\t\tCONTIN;\n+\t\tPUT_SDB_DEF (IDENTIFIER_POINTER (child_type_name));\n+\t\tPUT_SDB_INT_VAL (TREE_INT_CST_LOW (BINFO_OFFSET (child)));\n+\t\tPUT_SDB_SCL (member_scl);\n+\t\tsdbout_type (BINFO_TYPE (child));\n+\t\tPUT_SDB_ENDEF;\n+\t      }\n \t  }\n \n \t/* output the individual fields */"}]}