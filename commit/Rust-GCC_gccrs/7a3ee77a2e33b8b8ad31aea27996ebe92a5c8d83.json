{"sha": "7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "node_id": "C_kwDOANBUbNoAKDdhM2VlNzdhMmUzM2I4YjhhZDMxYWVhMjc5OTZlYmU5MmE1YzhkODM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-25T12:21:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-25T12:21:54Z"}, "message": "c: Improve build_component_ref diagnostics [PR91134]\n\nOn the following testcase (the first dg-error line) we emit a weird\ndiagnostics and even fixit on pointerpointer->member\nwhere pointerpointer is pointer to pointer to struct and we say\n'pointerpointer' is a pointer; did you mean to use '->'?\nThe first part is indeed true, but suggesting -> when the code already\ndoes use -> is confusing.\nThe following patch adjusts callers so that they tell it if it is from\n. parsing or from -> parsing and in the latter case suggests to dereference\nthe left operand instead by adding (* before it and ) after it (before ->).\nOr would a suggestion to add [0] before -> be better?\n\n2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/91134\ngcc/c/\n\t* c-tree.h (build_component_ref): Add ARROW_LOC location_t argument.\n\t* c-typeck.cc (build_component_ref): Likewise.  If DATUM is\n\tINDIRECT_REF and ARROW_LOC isn't UNKNOWN_LOCATION, print a different\n\tdiagnostic and fixit hint if DATUM has pointer type.\n\t* c-parser.cc (c_parser_postfix_expression,\n\tc_parser_omp_variable_list): Adjust build_component_ref callers.\n\t* gimple-parser.cc (c_parser_gimple_postfix_expression_after_primary):\n\tLikewise.\ngcc/objc/\n\t* objc-act.cc (objc_build_component_ref): Adjust build_component_ref\n\tcaller.\ngcc/testsuite/\n\t* gcc.dg/pr91134.c: New test.", "tree": {"sha": "605b310deb982f78fb3357e14585ed24b83c02d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/605b310deb982f78fb3357e14585ed24b83c02d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329417d775102803e0321b95ba932a64870ba677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329417d775102803e0321b95ba932a64870ba677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329417d775102803e0321b95ba932a64870ba677"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "aa24b431769f70ac2845369332198ec095778dc9", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "patch": "@@ -9235,8 +9235,9 @@ c_parser_postfix_expression (c_parser *parser)\n \t    if (c_parser_next_token_is (parser, CPP_NAME))\n \t      {\n \t\tc_token *comp_tok = c_parser_peek_token (parser);\n-\t\toffsetof_ref = build_component_ref\n-\t\t  (loc, offsetof_ref, comp_tok->value, comp_tok->location);\n+\t\toffsetof_ref\n+\t\t  = build_component_ref (loc, offsetof_ref, comp_tok->value,\n+\t\t\t\t\t comp_tok->location, UNKNOWN_LOCATION);\n \t\tc_parser_consume_token (parser);\n \t\twhile (c_parser_next_token_is (parser, CPP_DOT)\n \t\t       || c_parser_next_token_is (parser,\n@@ -9263,9 +9264,11 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t    break;\n \t\t\t  }\n \t\t\tc_token *comp_tok = c_parser_peek_token (parser);\n-\t\t\toffsetof_ref = build_component_ref\n-\t\t\t  (loc, offsetof_ref, comp_tok->value,\n-\t\t\t   comp_tok->location);\n+\t\t\toffsetof_ref\n+\t\t\t  = build_component_ref (loc, offsetof_ref,\n+\t\t\t\t\t\t comp_tok->value,\n+\t\t\t\t\t\t comp_tok->location,\n+\t\t\t\t\t\t UNKNOWN_LOCATION);\n \t\t\tc_parser_consume_token (parser);\n \t\t      }\n \t\t    else\n@@ -10612,7 +10615,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  finish = c_parser_peek_token (parser)->get_finish ();\n \t  c_parser_consume_token (parser);\n \t  expr.value = build_component_ref (op_loc, expr.value, ident,\n-\t\t\t\t\t    comp_loc);\n+\t\t\t\t\t    comp_loc, UNKNOWN_LOCATION);\n \t  set_c_expr_source_range (&expr, start, finish);\n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) != COMPONENT_REF)\n@@ -10652,7 +10655,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t    build_indirect_ref (op_loc,\n \t\t\t\t\t\t\t\texpr.value,\n \t\t\t\t\t\t\t\tRO_ARROW),\n-\t\t\t\t\t    ident, comp_loc);\n+\t\t\t\t\t    ident, comp_loc,\n+\t\t\t\t\t    expr.get_location ());\n \t  set_c_expr_source_range (&expr, start, finish);\n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) != COMPONENT_REF)\n@@ -13171,6 +13175,7 @@ c_parser_omp_variable_list (c_parser *parser,\n \t\t\t && c_parser_next_token_is (parser, CPP_DEREF)))\n \t\t{\n \t\t  location_t op_loc = c_parser_peek_token (parser)->location;\n+\t\t  location_t arrow_loc = UNKNOWN_LOCATION;\n \t\t  if (c_parser_next_token_is (parser, CPP_DEREF))\n \t\t    {\n \t\t      c_expr t_expr;\n@@ -13181,6 +13186,7 @@ c_parser_omp_variable_list (c_parser *parser,\n \t\t      t_expr = convert_lvalue_to_rvalue (op_loc, t_expr,\n \t\t\t\t\t\t\t true, false);\n \t\t      t = build_indirect_ref (op_loc, t_expr.value, RO_ARROW);\n+\t\t      arrow_loc = t_expr.get_location ();\n \t\t    }\n \t\t  c_parser_consume_token (parser);\n \t\t  if (!c_parser_next_token_is (parser, CPP_NAME))\n@@ -13194,7 +13200,8 @@ c_parser_omp_variable_list (c_parser *parser,\n \t\t  tree ident = comp_tok->value;\n \t\t  location_t comp_loc = comp_tok->location;\n \t\t  c_parser_consume_token (parser);\n-\t\t  t = build_component_ref (op_loc, t, ident, comp_loc);\n+\t\t  t = build_component_ref (op_loc, t, ident, comp_loc,\n+\t\t\t\t\t   arrow_loc);\n \t\t}\n \t      /* FALLTHROUGH  */\n \t    case OMP_CLAUSE_AFFINITY:"}, {"sha": "3b322ad741a9c211eda3280735ef03eaf435eda2", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "patch": "@@ -699,7 +699,8 @@ extern struct c_expr convert_lvalue_to_rvalue (location_t, struct c_expr,\n extern tree decl_constant_value_1 (tree, bool);\n extern void mark_exp_read (tree);\n extern tree composite_type (tree, tree);\n-extern tree build_component_ref (location_t, tree, tree, location_t);\n+extern tree build_component_ref (location_t, tree, tree, location_t,\n+\t\t\t\t location_t);\n extern tree build_array_ref (location_t, tree, tree);\n extern tree build_external_ref (location_t, tree, bool, tree *);\n extern void pop_maybe_used (bool);"}, {"sha": "6b05eddfdf45c615d3de48fa73fb41ded28f1486", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "patch": "@@ -2457,11 +2457,12 @@ should_suggest_deref_p (tree datum_type)\n /* Make an expression to refer to the COMPONENT field of structure or\n    union value DATUM.  COMPONENT is an IDENTIFIER_NODE.  LOC is the\n    location of the COMPONENT_REF.  COMPONENT_LOC is the location\n-   of COMPONENT.  */\n+   of COMPONENT.  ARROW_LOC is the location of the first -> operand if\n+   it is from -> operator.  */\n \n tree\n build_component_ref (location_t loc, tree datum, tree component,\n-\t\t     location_t component_loc)\n+\t\t     location_t component_loc, location_t arrow_loc)\n {\n   tree type = TREE_TYPE (datum);\n   enum tree_code code = TREE_CODE (type);\n@@ -2577,11 +2578,23 @@ build_component_ref (location_t loc, tree datum, tree component,\n       /* Special-case the error message for \"ptr.field\" for the case\n \t where the user has confused \".\" vs \"->\".  */\n       rich_location richloc (line_table, loc);\n-      /* \"loc\" should be the \".\" token.  */\n-      richloc.add_fixit_replace (\"->\");\n-      error_at (&richloc,\n-\t\t\"%qE is a pointer; did you mean to use %<->%>?\",\n-\t\tdatum);\n+      if (TREE_CODE (datum) == INDIRECT_REF && arrow_loc != UNKNOWN_LOCATION)\n+\t{\n+\t  richloc.add_fixit_insert_before (arrow_loc, \"(*\");\n+\t  richloc.add_fixit_insert_after (arrow_loc, \")\");\n+\t  error_at (&richloc,\n+\t\t    \"%qE is a pointer to pointer; did you mean to dereference \"\n+\t\t    \"it before applying %<->%> to it?\",\n+\t\t    TREE_OPERAND (datum, 0));\n+\t}\n+      else\n+\t{\n+\t  /* \"loc\" should be the \".\" token.  */\n+\t  richloc.add_fixit_replace (\"->\");\n+\t  error_at (&richloc,\n+\t\t    \"%qE is a pointer; did you mean to use %<->%>?\",\n+\t\t    datum);\n+\t}\n       return error_mark_node;\n     }\n   else if (code != ERROR_MARK)"}, {"sha": "b909eac498d60b313dd1e628ee532d0f3771f768", "filename": "gcc/c/gimple-parser.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fc%2Fgimple-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fc%2Fgimple-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.cc?ref=7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "patch": "@@ -1800,7 +1800,7 @@ c_parser_gimple_postfix_expression_after_primary (gimple_parser &parser,\n \t    finish = c_parser_peek_token (parser)->get_finish ();\n \t    c_parser_consume_token (parser);\n \t    expr.value = build_component_ref (op_loc, expr.value, ident,\n-\t\t\t\t\t      comp_loc);\n+\t\t\t\t\t      comp_loc, UNKNOWN_LOCATION);\n \t    set_c_expr_source_range (&expr, start, finish);\n \t    expr.original_code = ERROR_MARK;\n \t    if (TREE_CODE (expr.value) != COMPONENT_REF)\n@@ -1848,7 +1848,8 @@ c_parser_gimple_postfix_expression_after_primary (gimple_parser &parser,\n \t    expr.value = build_component_ref (op_loc,\n \t\t\t\t\t      build_simple_mem_ref_loc\n \t\t\t\t\t        (op_loc, expr.value),\n-\t\t\t\t\t      ident, comp_loc);\n+\t\t\t\t\t      ident, comp_loc,\n+\t\t\t\t\t      expr.get_location ());\n \t    set_c_expr_source_range (&expr, start, finish);\n \t    expr.original_code = ERROR_MARK;\n \t    if (TREE_CODE (expr.value) != COMPONENT_REF)"}, {"sha": "10591bb75f1ea6d7b9f4199f7ac25b3562eae7c9", "filename": "gcc/objc/objc-act.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fobjc%2Fobjc-act.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Fobjc%2Fobjc-act.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.cc?ref=7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "patch": "@@ -2812,7 +2812,7 @@ objc_build_component_ref (tree datum, tree component)\n                                           tf_warning_or_error);\n #else\n   return build_component_ref (input_location, datum, component,\n-\t\t\t      UNKNOWN_LOCATION);\n+\t\t\t      UNKNOWN_LOCATION, UNKNOWN_LOCATION);\n #endif\n }\n "}, {"sha": "8844f4284715ac1cc4d9c0e98471000b2c4c7afa", "filename": "gcc/testsuite/gcc.dg/pr91134.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91134.c?ref=7a3ee77a2e33b8b8ad31aea27996ebe92a5c8d83", "patch": "@@ -0,0 +1,32 @@\n+/* PR c/91134 */\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+struct X { int member; } x;\n+struct Y { struct X **x; } y;\n+\n+int\n+foo (void)\n+{\n+  struct X *pointer = &x;\n+  struct Y *yp = &y;\n+  struct X **pointerpointer = &pointer;\n+  int i = *pointerpointer->member;\t/* { dg-error \"'pointerpointer' is a pointer to pointer; did you mean to dereference it before applying '->' to it\\\\\\?\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   int i = *pointerpointer->member;\n+                          ^~\n+            (*            )\n+   { dg-end-multiline-output \"\" } */\n+  int j = pointer.member;\t\t/* { dg-error \"'pointer' is a pointer; did you mean to use '->'\\\\\\?\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   int j = pointer.member;\n+                  ^\n+                  ->\n+   { dg-end-multiline-output \"\" } */\n+  int k = yp->x->member;\t\t/* { dg-error \"'yp->x' is a pointer to pointer; did you mean to dereference it before applying '->' to it\\\\\\?\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   int k = yp->x->member;\n+                ^~\n+           (*   )\n+   { dg-end-multiline-output \"\" } */\n+  return i + j + k;\n+}"}]}