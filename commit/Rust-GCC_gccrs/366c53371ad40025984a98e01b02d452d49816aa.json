{"sha": "366c53371ad40025984a98e01b02d452d49816aa", "node_id": "C_kwDOANBUbNoAKDM2NmM1MzM3MWFkNDAwMjU5ODRhOThlMDFiMDJkNDUyZDQ5ODE2YWE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-07T08:47:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-07T08:47:19Z"}, "message": "Merge #991\n\n991: Match and expand macro separators properly r=CohenArthur a=CohenArthur\n\nMore nice recursive macros:\r\n```rust\r\nmacro_rules! add {\r\n    ($e:expr | $($es:expr) | *) => {\r\n        $e + add!($($es) | *)\r\n    };\r\n    ($e:expr) => {\r\n        $e\r\n    };\r\n}\r\n\r\nadd!(1 | 2 | 3 | 4 | 5 | 6);\r\n```\r\nCloses #968\r\n\r\nThis PR needs #986 to be merged first, as it depends on it for the test cases. You can skip reviewing the first two commits which are just from #986 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "c43d12ae5fa1058e4a944682720a5100c9111eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c43d12ae5fa1058e4a944682720a5100c9111eb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/366c53371ad40025984a98e01b02d452d49816aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJcaXCRBK7hj4Ov3rIwAAVkoIACa4Ws+aJ/FrdL9351nZHPP0\nlu+w0MOBEKsToRhNKaAK+TltuVLJ37vHi7emPYVL4R3wQLIEpNsgQ8G4RxiRgOYU\nn/iklhXN6UjFdjZ4oB0SHuY5iOfthle54dUto/VomFzjy2x5KT5wFBjHB0Srdonw\nOyJGYYYm8JVhjB5z3W3GoVgkwvoblgRcHOUxlmTtDMGD9TQ66mF8zNEssXYDCvOi\nQk+tglt78mbPMjlU21os2laMM3QrLJkBfpHM7cB4+CE1zzrCb6EgUEolIu5X27jK\n+aZh2zeBRdLDJCsq5rZrfq3R1IpN32lWmp/j71bHbgI9As94dnKjNmyHhyuKbOQ=\n=h40a\n-----END PGP SIGNATURE-----\n", "payload": "tree c43d12ae5fa1058e4a944682720a5100c9111eb9\nparent b82408fd6a17762fcb6fc7b5efe9307a3e59f8b7\nparent 0c7e16e1258b67ba8efa1b019802bee4d802d4a5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646642839 +0000\ncommitter GitHub <noreply@github.com> 1646642839 +0000\n\nMerge #991\n\n991: Match and expand macro separators properly r=CohenArthur a=CohenArthur\n\nMore nice recursive macros:\r\n```rust\r\nmacro_rules! add {\r\n    ($e:expr | $($es:expr) | *) => {\r\n        $e + add!($($es) | *)\r\n    };\r\n    ($e:expr) => {\r\n        $e\r\n    };\r\n}\r\n\r\nadd!(1 | 2 | 3 | 4 | 5 | 6);\r\n```\r\nCloses #968\r\n\r\nThis PR needs #986 to be merged first, as it depends on it for the test cases. You can skip reviewing the first two commits which are just from #986 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366c53371ad40025984a98e01b02d452d49816aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366c53371ad40025984a98e01b02d452d49816aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366c53371ad40025984a98e01b02d452d49816aa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b82408fd6a17762fcb6fc7b5efe9307a3e59f8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b82408fd6a17762fcb6fc7b5efe9307a3e59f8b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b82408fd6a17762fcb6fc7b5efe9307a3e59f8b7"}, {"sha": "0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7e16e1258b67ba8efa1b019802bee4d802d4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7e16e1258b67ba8efa1b019802bee4d802d4a5"}], "stats": {"total": 124, "additions": 103, "deletions": 21}, "files": [{"sha": "d625ad2d0dbf61b32b2d9bae8414a1d7e37ff593", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -206,6 +206,7 @@ class MacroMatchRepetition : public MacroMatch\n   }\n \n   MacroRepOp get_op () const { return op; }\n+  const std::unique_ptr<MacroRepSep> &get_sep () const { return sep; }\n   std::vector<std::unique_ptr<MacroMatch> > &get_matches () { return matches; }\n \n protected:"}, {"sha": "b15e7836227a8fad32a04acb2b1ffaa34071d356", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -3598,12 +3598,13 @@ MacroExpander::match_token (Parser<MacroInvocLexer> &parser, AST::Token &token)\n }\n \n bool\n-MacroExpander::match_n_matches (\n-  Parser<MacroInvocLexer> &parser,\n-  std::vector<std::unique_ptr<AST::MacroMatch>> &matches, size_t &match_amount,\n-  size_t lo_bound, size_t hi_bound)\n+MacroExpander::match_n_matches (Parser<MacroInvocLexer> &parser,\n+\t\t\t\tAST::MacroMatchRepetition &rep,\n+\t\t\t\tsize_t &match_amount, size_t lo_bound,\n+\t\t\t\tsize_t hi_bound)\n {\n   match_amount = 0;\n+  auto &matches = rep.get_matches ();\n \n   const MacroInvocLexer &source = parser.get_token_source ();\n   while (true)\n@@ -3614,6 +3615,12 @@ MacroExpander::match_n_matches (\n       if (t_id == RIGHT_PAREN || t_id == RIGHT_SQUARE || t_id == RIGHT_CURLY)\n \tbreak;\n \n+      // Skip parsing a separator on the first match, otherwise consume it.\n+      // If it isn't present, this is an error\n+      if (rep.has_sep () && match_amount > 0)\n+\tif (!match_token (parser, *rep.get_sep ()))\n+\t  break;\n+\n       bool valid_current_match = false;\n       for (auto &match : matches)\n \t{\n@@ -3688,17 +3695,17 @@ MacroExpander::match_repetition (Parser<MacroInvocLexer> &parser,\n     case AST::MacroMatchRepetition::MacroRepOp::ANY:\n       lo_str = \"0\";\n       hi_str = \"+inf\";\n-      res = match_n_matches (parser, rep.get_matches (), match_amount);\n+      res = match_n_matches (parser, rep, match_amount);\n       break;\n     case AST::MacroMatchRepetition::MacroRepOp::ONE_OR_MORE:\n       lo_str = \"1\";\n       hi_str = \"+inf\";\n-      res = match_n_matches (parser, rep.get_matches (), match_amount, 1);\n+      res = match_n_matches (parser, rep, match_amount, 1);\n       break;\n     case AST::MacroMatchRepetition::MacroRepOp::ZERO_OR_ONE:\n       lo_str = \"0\";\n       hi_str = \"1\";\n-      res = match_n_matches (parser, rep.get_matches (), match_amount, 0, 1);\n+      res = match_n_matches (parser, rep, match_amount, 0, 1);\n       break;\n     default:\n       gcc_unreachable ();"}, {"sha": "88d0e6e8496234dc9022e64a61b7872d33dad75c", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -192,7 +192,7 @@ struct MacroExpander\n    * Match any amount of matches\n    *\n    * @param parser Parser to use for matching\n-   * @param matches All consecutive matches to identify\n+   * @param rep Repetition to try and match\n    * @param match_amount Reference in which to store the ammount of succesful\n    * and valid matches\n    *\n@@ -209,9 +209,8 @@ struct MacroExpander\n    * otherwise\n    */\n   bool match_n_matches (Parser<MacroInvocLexer> &parser,\n-\t\t\tstd::vector<std::unique_ptr<AST::MacroMatch>> &matches,\n-\t\t\tsize_t &match_amount, size_t lo_bound = 0,\n-\t\t\tsize_t hi_bound = 0);\n+\t\t\tAST::MacroMatchRepetition &rep, size_t &match_amount,\n+\t\t\tsize_t lo_bound = 0, size_t hi_bound = 0);\n \n   void push_context (ContextType t) { context.push_back (t); }\n "}, {"sha": "f9f2005b72bb1a13528b673dbe73b829c0e84720", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -33,7 +33,9 @@ SubstituteCtx::substitute_metavar (std::unique_ptr<AST::Token> &metavar)\n }\n \n std::vector<std::unique_ptr<AST::Token>>\n-SubstituteCtx::substitute_repetition (size_t pattern_start, size_t pattern_end)\n+SubstituteCtx::substitute_repetition (\n+  size_t pattern_start, size_t pattern_end,\n+  std::unique_ptr<AST::Token> separator_token)\n {\n   rust_assert (pattern_end < macro.size ());\n \n@@ -117,6 +119,11 @@ SubstituteCtx::substitute_repetition (size_t pattern_start, size_t pattern_end)\n       auto substitute_context = SubstituteCtx (input, new_macro, sub_map);\n       auto new_tokens = substitute_context.substitute_tokens ();\n \n+      // Skip the first repetition, but add the separator to the expanded\n+      // tokens if it is present\n+      if (i != 0 && separator_token)\n+\texpanded.emplace_back (separator_token->clone_token ());\n+\n       for (auto &new_token : new_tokens)\n \texpanded.emplace_back (new_token->clone_token ());\n     }\n@@ -127,6 +134,13 @@ SubstituteCtx::substitute_repetition (size_t pattern_start, size_t pattern_end)\n   return expanded;\n }\n \n+static bool\n+is_rep_op (std::unique_ptr<AST::Token> &tok)\n+{\n+  auto id = tok->get_id ();\n+  return id == QUESTION_MARK || id == ASTERISK || id == PLUS;\n+}\n+\n std::pair<std::vector<std::unique_ptr<AST::Token>>, size_t>\n SubstituteCtx::substitute_token (size_t token_idx)\n {\n@@ -148,20 +162,34 @@ SubstituteCtx::substitute_token (size_t token_idx)\n \t     pattern_end++)\n \t  ;\n \n+\tstd::unique_ptr<AST::Token> separator_token = nullptr;\n+\t// FIXME: Can this go out of bounds?\n+\tauto &post_pattern_token = macro.at (pattern_end + 1);\n+\tif (!is_rep_op (post_pattern_token))\n+\t  separator_token = post_pattern_token->clone_token ();\n+\n+\t// Amount of tokens to skip\n+\tauto to_skip = 0;\n+\t// Parentheses\n+\tto_skip += 2;\n+\t// Repetition operator\n+\tto_skip += 1;\n+\t// Separator\n+\tif (separator_token)\n+\t  to_skip += 1;\n+\n \t// FIXME: This skips whitespaces... Is that okay??\n-\t// FIXME: Is there any existing parsing function that allows us to parse\n-\t// a macro pattern?\n+\t// FIXME: Is there any existing parsing function that allows us to\n+\t// parse a macro pattern?\n \n \t// FIXME: Add error handling in the case we haven't found a matching\n \t// closing delimiter\n \n \t// FIXME: We need to parse the repetition token now\n \n-\treturn {\n-\t  substitute_repetition (pattern_start, pattern_end),\n-\t  // + 2 for the opening and closing parentheses which are mandatory\n-\t  // + 1 for the repetitor (+, *, ?)\n-\t  pattern_end - pattern_start + 3};\n+\treturn {substitute_repetition (pattern_start, pattern_end,\n+\t\t\t\t       std::move (separator_token)),\n+\t\tpattern_end - pattern_start + to_skip};\n       }\n       // TODO: We need to check if the $ was alone. In that case, do\n       // not error out: Simply act as if there was an empty identifier"}, {"sha": "ed83926c32ce77ffaf4ffd3723e197892c8607ad", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.h?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -49,12 +49,14 @@ class SubstituteCtx\n    * Substitute a macro repetition by its given fragments\n    *\n    * @param pattern_start Start index of the pattern tokens\n-   * @param pattern_end Index  Amount of tokens in the pattern\n+   * @param pattern_end End index of the patterns tokens\n+   * @param separator Optional separator to include when expanding tokens\n    *\n    * @return A vector containing the repeated pattern\n    */\n   std::vector<std::unique_ptr<AST::Token>>\n-  substitute_repetition (size_t pattern_start, size_t pattern_end);\n+  substitute_repetition (size_t pattern_start, size_t pattern_end,\n+\t\t\t std::unique_ptr<AST::Token> separator);\n \n   /**\n    * Substitute a given token by its appropriate representation"}, {"sha": "9a59089b1e4fe20dabf311eb418c1fb25e8b3363", "filename": "gcc/testsuite/rust/compile/macro9.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -0,0 +1,17 @@\n+macro_rules! add {\n+    ($e:expr, $($es:expr),*) => {\n+        $e + add!($($es),*)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15 2 9); // { dg-error \"Failed to match any rule within macro\" }\n+    let b = add!(15);\n+    let b = add!(15 14); // { dg-error \"Failed to match any rule within macro\" }\n+    let b = add!(15, 14,); // { dg-error \"Failed to match any rule within macro\" }\n+\n+    0\n+}"}, {"sha": "4732545410eebdc651c8727c4c904061fc3b64b9", "filename": "gcc/testsuite/rust/execute/torture/macros19.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros19.rs?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! add {\n+    ($e:expr, $($es:expr),*) => {\n+        $e + add!($($es),*)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15, 2, 9); // 26\n+\n+    a - 26\n+}"}, {"sha": "fc116d089c4a66255f38b6ead075f595a9e9c2f8", "filename": "gcc/testsuite/rust/execute/torture/macros20.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros20.rs?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! add {\n+    ($e:expr big_tok $($es:expr) big_tok *) => {\n+        $e + add!($($es) big_tok *)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15 big_tok 2 big_tok 9); // 26\n+\n+    a - 26\n+}"}]}