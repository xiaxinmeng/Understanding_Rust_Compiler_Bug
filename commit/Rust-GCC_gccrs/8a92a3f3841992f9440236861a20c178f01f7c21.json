{"sha": "8a92a3f3841992f9440236861a20c178f01f7c21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5MmEzZjM4NDE5OTJmOTQ0MDIzNjg2MWEyMGMxNzhmMDFmN2MyMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:18:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:18:12Z"}, "message": "[56/77] Use the more specific type when two modes are known to be equal\n\nThis patch adjusts a couple of cases in which we had established\nthat two modes were equal and happened to be using the one with the\nmore general type instead of the one with the more specific type.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* expr.c (expand_expr_real_2): Use word_mode instead of innermode\n\twhen the two are known to be equal.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251508", "tree": {"sha": "7a7523fce5837628244b032776c67c2f45ea3996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a7523fce5837628244b032776c67c2f45ea3996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a92a3f3841992f9440236861a20c178f01f7c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a92a3f3841992f9440236861a20c178f01f7c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a92a3f3841992f9440236861a20c178f01f7c21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a92a3f3841992f9440236861a20c178f01f7c21/comments", "author": null, "committer": null, "parents": [{"sha": "40c4ef22a7b4b70c64d5ce09d9fc5fba60b49420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c4ef22a7b4b70c64d5ce09d9fc5fba60b49420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c4ef22a7b4b70c64d5ce09d9fc5fba60b49420"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "15f951f78ba3380e59a86a4db55a7d5fbea9de40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a92a3f3841992f9440236861a20c178f01f7c21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a92a3f3841992f9440236861a20c178f01f7c21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a92a3f3841992f9440236861a20c178f01f7c21", "patch": "@@ -1,3 +1,10 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.c (expand_expr_real_2): Use word_mode instead of innermode\n+\twhen the two are known to be equal.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "cdebba35daa2339e4f255783f7588aca3bfe42d1", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a92a3f3841992f9440236861a20c178f01f7c21/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a92a3f3841992f9440236861a20c178f01f7c21/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8a92a3f3841992f9440236861a20c178f01f7c21", "patch": "@@ -8679,7 +8679,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t  rtx htem, hipart;\n \t\t  op0 = expand_normal (treeop0);\n \t\t  if (TREE_CODE (treeop1) == INTEGER_CST)\n-\t\t    op1 = convert_modes (innermode, mode,\n+\t\t    op1 = convert_modes (word_mode, mode,\n \t\t\t\t\t expand_normal (treeop1),\n \t\t\t\t\t TYPE_UNSIGNED (TREE_TYPE (treeop1)));\n \t\t  else\n@@ -8690,8 +8690,8 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t    goto widen_mult_const;\n \t\t  temp = expand_binop (mode, other_optab, op0, op1, target,\n \t\t\t\t       unsignedp, OPTAB_LIB_WIDEN);\n-\t\t  hipart = gen_highpart (innermode, temp);\n-\t\t  htem = expand_mult_highpart_adjust (innermode, hipart,\n+\t\t  hipart = gen_highpart (word_mode, temp);\n+\t\t  htem = expand_mult_highpart_adjust (word_mode, hipart,\n \t\t\t\t\t\t      op0, op1, hipart,\n \t\t\t\t\t\t      zextend_p);\n \t\t  if (htem != hipart)"}]}