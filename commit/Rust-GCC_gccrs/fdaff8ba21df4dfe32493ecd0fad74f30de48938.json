{"sha": "fdaff8ba21df4dfe32493ecd0fad74f30de48938", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhZmY4YmEyMWRmNGRmZTMyNDkzZWNkMGZhZDc0ZjMwZGU0ODkzOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T10:31:38Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T10:31:38Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r504", "tree": {"sha": "dd96ed77d5eef22b33b8c2326232c26b3cc368dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd96ed77d5eef22b33b8c2326232c26b3cc368dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdaff8ba21df4dfe32493ecd0fad74f30de48938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdaff8ba21df4dfe32493ecd0fad74f30de48938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdaff8ba21df4dfe32493ecd0fad74f30de48938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdaff8ba21df4dfe32493ecd0fad74f30de48938/comments", "author": null, "committer": null, "parents": [{"sha": "0fb59cdfcd306172be4114453201ded931107ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb59cdfcd306172be4114453201ded931107ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb59cdfcd306172be4114453201ded931107ac1"}], "stats": {"total": 134, "additions": 77, "deletions": 57}, "files": [{"sha": "43fce99cb7f8080ce133febbaf7dda472e293334", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=fdaff8ba21df4dfe32493ecd0fad74f30de48938", "patch": "@@ -283,10 +283,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   output_file_directive ((FILE), main_input_filename))\n \n #undef TEXT_SECTION_ASM_OP\n-#define TEXT_SECTION_ASM_OP \"\\ttext\"\n+#define TEXT_SECTION_ASM_OP \"text\"\n \n #undef DATA_SECTION_ASM_OP\n-#define DATA_SECTION_ASM_OP \"\\tdata\"\n+#define DATA_SECTION_ASM_OP \"data\"\n \n /* This says how to output an assembler line to define a global common symbol.\n    We use SIZE rather than ROUNDED, as this is what the native cc does.  */"}, {"sha": "6d5494fe95a16c2c30638fcad27ce2b272fce62f", "filename": "gcc/config/m88k/dgux.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Fm88k%2Fdgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Fm88k%2Fdgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fdgux.h?ref=fdaff8ba21df4dfe32493ecd0fad74f30de48938", "patch": "@@ -78,7 +78,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define ASM_SPEC \"\\\n %{V} %{v:%{!V:-V}} %{pipe: - %{msvr4:%{mversion-03.00:-KV3}}}\\\n %{!mlegend:%{mstandard:-Wc,off}}\\\n-%{mlegend:-Wc,-fix-bb,-h\\\"gcc-1.96.3\\\",-s\\\"%i\\\"\\\n+%{mlegend:-Wc,-fix-bb,-h\\\"gcc-1.96.5\\\",-s\\\"%i\\\"\\\n %{traditional:,-lc}%{!traditional:,-lansi-c}\\\n %{mstandard:,-keep-std}\\\n %{mkeep-coff:,-keep-coff}\\\n@@ -150,20 +150,20 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef WCHAR_TYPE\n #undef WCHAR_TYPE_SIZE\n \n-/* Override svr4.h and m88k.h except when compling crtstuff.c.  */\n+/* Override svr4.h and m88k.h except when compiling crtstuff.c.  */\n #if !defined (CRT_BEGIN) && !defined (CRT_END)\n #if 0 /* The SVR4 init method doesn't yet work.  */\n #undef\tINIT_SECTION_ASM_OP\n #define INIT_SECTION_ASM_OP (VERSION_0300_SYNTAX\t\t\\\n-\t\t\t     ? \"\\tsection\\t .init,\\\"xa\\\"\\n\"\t\\\n-\t\t\t     : \"\\tsection\\t .init,\\\"x\\\"\\n\")\n+\t\t\t     ? \"section\\t .init,\\\"xa\\\"\"\t\\\n+\t\t\t     : \"section\\t .init,\\\"x\\\"\")\n #endif\n #undef\tCTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP (VERSION_0300_SYNTAX\t\t\\\n-\t\t\t      ? \"\\tsection\\t .ctors,\\\"aw\\\"\\n\"\t\\\n-\t\t\t      : \"\\tsection\\t .ctors,\\\"d\\\"\\n\")\n+\t\t\t      ? \"section\\t .ctors,\\\"aw\\\"\"\t\\\n+\t\t\t      : \"section\\t .ctors,\\\"d\\\"\")\n #undef\tDTORS_SECTION_ASM_OP\n #define DTORS_SECTION_ASM_OP (VERSION_0300_SYNTAX\t\t\\\n-\t\t\t      ? \"\\tsection\\t .dtors,\\\"aw\\\"\\n\"\t\\\n-\t\t\t      : \"\\tsection\\t .dtors,\\\"d\\\"\\n\")\n+\t\t\t      ? \"section\\t .dtors,\\\"aw\\\"\"\t\\\n+\t\t\t      : \"section\\t .dtors,\\\"d\\\"\")\n #endif /* crtstuff.c */"}, {"sha": "1e7e093dd500e80f795e493956a4e7709c47d426", "filename": "gcc/config/m88k/sysv4.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Fm88k%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Fm88k%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fsysv4.h?ref=fdaff8ba21df4dfe32493ecd0fad74f30de48938", "patch": "@@ -57,10 +57,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* Override svr4.h and m88k.h.  */\n #undef\tINIT_SECTION_ASM_OP\n-#define INIT_SECTION_ASM_OP \"\\tsection\\t.init,\\\"xa\\\",#progbits\\n\"\n+#define INIT_SECTION_ASM_OP \"section\\t.init,\\\"xa\\\",#progbits\"\n #undef\tCTORS_SECTION_ASM_OP\n-#define CTORS_SECTION_ASM_OP\t\"\\tsection\\t.ctors,\\\"a\\\",#progbits\\n\"\n+#define CTORS_SECTION_ASM_OP\t\"section\\t.ctors,\\\"a\\\",#progbits\"\n #undef\tDTORS_SECTION_ASM_OP\n-#define DTORS_SECTION_ASM_OP\t\"\\tsection\\t.dtors,\\\"a\\\",#progbits\\n\"\n+#define DTORS_SECTION_ASM_OP\t\"section\\t.dtors,\\\"a\\\",#progbits\"\n \n "}, {"sha": "3de640fd4d676ca869364d78e3b14e99791780c2", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=fdaff8ba21df4dfe32493ecd0fad74f30de48938", "patch": "@@ -1339,11 +1339,11 @@ struct rt_cargs {int gregs, fregs; };\n \n /* Output before instructions and read-only data.  */\n \n-#define TEXT_SECTION_ASM_OP \"\\t.text\"\n+#define TEXT_SECTION_ASM_OP \".text\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \"\\t.data\"\n+#define DATA_SECTION_ASM_OP \".data\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */"}, {"sha": "0ef35579e24395cc3c719820dfde3ca3587a6b18", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 62, "deletions": 42, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdaff8ba21df4dfe32493ecd0fad74f30de48938/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=fdaff8ba21df4dfe32493ecd0fad74f30de48938", "patch": "@@ -30,8 +30,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION ;\n \n-/* Tell the assembler to assume that all undefined names are external.  Don't\n-   do this until the fixed IBM assembler is more generally available.  */\n+/* Tell the assembler to assume that all undefined names are external.\n+\n+   Don't do this until the fixed IBM assembler is more generally available.\n+   When this becomes permanently defined, the ASM_OUTPUT_EXTERNAL,\n+   ASM_OUTPUT_EXTERNAL_LIBCALL, and RS6000_OUTPUT_BASENAME macros will no\n+   longer be needed.  */\n \n /* #define ASM_SPEC \"-u\" */\n \n@@ -116,7 +120,7 @@ extern int target_flags;\n    instructions for them.  Might as well be consistent with bits and bytes. */\n #define WORDS_BIG_ENDIAN 1\n \n-/* number of bits in an addressible storage unit */\n+/* number of bits in an addressable storage unit */\n #define BITS_PER_UNIT 8\n \n /* Width in bits of a \"word\", which is the contents of a machine register.\n@@ -170,9 +174,9 @@ extern int target_flags;\n    && TYPE_MODE (TREE_TYPE (TYPE)) == QImode\t\\\n    && (ALIGN) < BITS_PER_WORD ? BITS_PER_WORD : (ALIGN))\n \n-/* Define this if move instructions will actually fail to work\n+/* Non-zero if move instructions will actually fail to work\n    when given unaligned data.  */\n-/* #define STRICT_ALIGNMENT */\n+#define STRICT_ALIGNMENT 0\n \f\n /* Standard register usage.  */\n \n@@ -1143,25 +1147,16 @@ struct rs6000_args {int words, fregno, nargs_prototype; };\n /* Define if normal loads of shorter-than-word items from memory clears\n    the rest of the bigs in the register.  */\n #define BYTE_LOADS_ZERO_EXTEND\n+\f\n+/* The RS/6000 uses the XCOFF format.  */\n \n-/* We can't support any debugging info on the RS/6000 since it has its\n-   own format.  */\n-/* #define DBX_DEBUGGING_INFO  */\n-/* #define SDB_DEBUGGING_INFO  */\n+#define XCOFF_DEBUGGING_INFO\n \n /* We don't have GAS for the RS/6000 yet, so don't write out special\n    .stabs in cc1plus.  */\n    \n #define FASCIST_ASSEMBLER\n \n-/* Do not break .stabs pseudos into continuations.  */\n-#define DBX_CONTIN_LENGTH 0\n-\n-/* Don't try to use the `x' type-cross-reference character in DBX data.\n-   Also has the consequence of putting each struct, union or enum\n-   into a separate .stabs, containing only cross-refs to the others.  */\n-#define DBX_NO_XREFS\n-\n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n@@ -1286,19 +1281,24 @@ extern int rs6000_trunc_used;\n    On the RS/6000, we want to go into the TOC section so at least one\n    .toc will be emitted.\n \n-   Also initialize the section names for the RS/6000 at this point.  */\n+   Also initialize the section names for the RS/6000 at this point.\n+\n+   Also, in order to output proper .bs/.es pairs, we need at least one static\n+   [RW] section emitted.  */\n \n #define ASM_FILE_START(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  rs6000_gen_section_name (&rs6000_bss_section_name,\t\t\\\n+  rs6000_gen_section_name (&xcoff_bss_section_name,\t\t\\\n \t\t\t   main_input_filename, \".bss_\");\t\\\n-  rs6000_gen_section_name (&rs6000_private_data_section_name,\t\\\n+  rs6000_gen_section_name (&xcoff_private_data_section_name,\t\\\n \t\t\t   main_input_filename, \".rw_\");\t\\\n-  rs6000_gen_section_name (&rs6000_read_only_section_name,\t\\\n+  rs6000_gen_section_name (&xcoff_read_only_section_name,\t\\\n \t\t\t   main_input_filename, \".ro_\");\t\\\n \t\t\t\t\t\t\t\t\\\n   toc_section ();\t\t\t\t\t\t\\\n   bss_section ();\t\t\t\t\t\t\\\n+  if (write_symbols != NO_DEBUG)\t\t\t\t\\\n+    private_data_section ();\t\t\t\t\t\\\n }\n \n /* Output at end of assembler file.\n@@ -1313,13 +1313,6 @@ extern int rs6000_trunc_used;\n   fprintf (FILE, \"\\t.long _section_.text\\n\");\t\t\t\\\n }\n \n-/* Names of bss and data sections.  These should be unique names for each\n-   compilation unit.  */\n-\n-extern char *rs6000_bss_section_name;\n-extern char *rs6000_private_data_section_name;\n-extern char *rs6000_read_only_section_name;\n-\n /* We define this to prevent the name mangler from putting dollar signs into\n    function names.  */\n \n@@ -1331,6 +1324,10 @@ extern char *rs6000_read_only_section_name;\n \n #define DOLLARS_IN_IDENTIFIERS 0\n \n+/* Implicit library calls should use memcpy, not bcopy, etc.  */\n+\n+#define TARGET_MEM_FUNCTIONS\n+\n /* Define the extra sections we need.  We define three: one is the read-only\n    data section which is used for constants.  This is a csect whose name is\n    derived from the name of the input file.  The second is for initialized\n@@ -1357,8 +1354,8 @@ read_only_data_section ()\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   if (in_section != read_only_data)\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.csect\\t%s[RO]\\n\",\t\\\n-\t       rs6000_read_only_section_name);\t\t\\\n+      fprintf (asm_out_file, \"\\t.csect %s[RO]\\n\",\t\\\n+\t       xcoff_read_only_section_name);\t\t\\\n       in_section = read_only_data;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\\\n@@ -1369,7 +1366,7 @@ private_data_section ()\t\t\t\t\t\\\n   if (in_section != private_data)\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n       fprintf (asm_out_file, \"\\t.csect %s[RW]\\n\",\t\\\n-\t       rs6000_private_data_section_name);\t\\\n+\t       xcoff_private_data_section_name);\t\\\n \t\t\t\t\t\t\t\\\n       in_section = private_data;\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n@@ -1380,8 +1377,8 @@ read_only_private_data_section ()\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   if (in_section != read_only_private_data)\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.csect\\t%s[RO]\\n\",\t\\\n-\t       rs6000_private_data_section_name);\t\\\n+      fprintf (asm_out_file, \"\\t.csect %s[RO]\\n\",\t\\\n+\t       xcoff_private_data_section_name);\t\\\n       in_section = read_only_private_data;\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\\\n@@ -1400,8 +1397,8 @@ bss_section ()\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   if (in_section != bss)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"\\t.csect\\t%s[BS]\\n\",\t\\\n-\t       rs6000_bss_section_name);\t\t\\\n+      fprintf (asm_out_file, \"\\t.csect %s[BS]\\n\",\t\\\n+\t       xcoff_bss_section_name);\t\t\\\n       in_section = bss;\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\\\n@@ -1414,12 +1411,20 @@ bss_section ()\t\t\t\t\t\t\\\n    `text_section' call previously done.  We do have to go back to that\n    csect, however.  */\n \n+/* ??? What do the 16 and 044 in the .function line really mean?  */\n+\n #define ASM_DECLARE_FUNCTION_NAME(FILE,NAME,DECL)\t\t\\\n { if (TREE_PUBLIC (DECL))\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"\\t.globl .\");\t\t\t\t\\\n       RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\\\n-      fprintf (FILE,\"\\n\");\t\t\t\t\t\\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else if (write_symbols == XCOFF_DEBUG)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.lglobl .\");\t\t\t\t\\\n+      RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.csect \");\t\t\t\t\t\\\n   RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\t\\\n@@ -1428,10 +1433,23 @@ bss_section ()\t\t\t\t\t\t\\\n   fprintf (FILE, \":\\n\");\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.long .\");\t\t\t\t\t\\\n   RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\t\\\n-  fprintf (FILE, \", TOC[tc0], 0\\n\");\t\t\t\\\n+  fprintf (FILE, \", TOC[tc0], 0\\n\");\t\t\t\t\\\n   fprintf (FILE, \"\\t.csect [PR]\\n.\");\t\t\t\t\\\n   RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\t\\\n   fprintf (FILE, \":\\n\");\t\t\t\t\t\\\n+  if (write_symbols == XCOFF_DEBUG)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      dbxout_symbol (DECL, 0);\t\t\t\t\t\\\n+      fprintf (FILE, \"\\t.function .\");\t\t\t\t\\\n+      RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\\\n+      fprintf (FILE, \",.\");\t\t\t\t\t\\\n+      RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\\\n+      fprintf (FILE, \",16,044,L..end_\");\t\t\t\\\n+      RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\\\n+      fprintf (FILE, \"-.\");\t\t\t\t\t\\\n+      RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\\\n+      fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n }\n \n /* Return non-zero if this entry is to be written into the constant pool\n@@ -1566,11 +1584,11 @@ bss_section ()\t\t\t\t\t\t\\\n \n /* Output before instructions.  */\n \n-#define TEXT_SECTION_ASM_OP \"\\t.csect [PR]\"\n+#define TEXT_SECTION_ASM_OP \".csect [PR]\"\n \n /* Output before writable data.  */\n \n-#define DATA_SECTION_ASM_OP \"\\t.csect .data[RW]\"\n+#define DATA_SECTION_ASM_OP \".csect .data[RW]\"\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n@@ -1732,17 +1750,19 @@ bss_section ()\t\t\t\t\t\t\\\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\\\n-  do { fputs (\".comm \", (FILE));\t\t\t\\\n+  do { bss_section ();\t\t\t\t\t\\\n+       fputs (\".comm \", (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n        fprintf ((FILE), \",%d\\n\", (SIZE)); } while (0)\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE,ROUNDED)\t\\\n-  do { fputs (\".lcomm \", (FILE));\t\t\t\\\n+  do { bss_section ();\t\t\t\t\t\\\n+       fputs (\".lcomm \", (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fprintf ((FILE), \",%d,%s\\n\", (SIZE), rs6000_bss_section_name); \\\n+       fprintf ((FILE), \",%d,%s\\n\", (SIZE), xcoff_bss_section_name); \\\n      } while (0)\n \n /* Store in OUTPUT a string (made with alloca) containing"}]}