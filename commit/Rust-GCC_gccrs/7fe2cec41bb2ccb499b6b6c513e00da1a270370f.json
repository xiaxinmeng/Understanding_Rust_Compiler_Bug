{"sha": "7fe2cec41bb2ccb499b6b6c513e00da1a270370f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlMmNlYzQxYmIyY2NiNDk5YjZiNmM1MTNlMDBkYTFhMjcwMzcwZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-24T12:12:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-25T07:05:48Z"}, "message": "debug/96690 - mangle symbols eventually used by late dwarf output\n\nThe following makes sure to, at early debug generation time, mangle\nsymbols we eventually end up outputting during late finish.\n\n2020-08-24  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/96690\n\t* dwarf2out.c (reference_to_unused): Make FUNCTION_DECL\n\tprocessing more consistent with respect to\n\tsymtab->global_info_ready.\n\t(tree_add_const_value_attribute): Unconditionally call\n\trtl_for_decl_init to do all mangling early but throw\n\taway the result if early_dwarf.\n\n\t* g++.dg/lto/pr96690_0.C: New testcase.", "tree": {"sha": "a3df54dbc1712e0ceccad89cf9700bc5d81448f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3df54dbc1712e0ceccad89cf9700bc5d81448f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fe2cec41bb2ccb499b6b6c513e00da1a270370f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe2cec41bb2ccb499b6b6c513e00da1a270370f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fe2cec41bb2ccb499b6b6c513e00da1a270370f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fe2cec41bb2ccb499b6b6c513e00da1a270370f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "108477875f01798eecd7780207396b8c44930ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108477875f01798eecd7780207396b8c44930ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108477875f01798eecd7780207396b8c44930ae9"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "6b03ff85f9905bb79aa180576a48c5af451722f6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe2cec41bb2ccb499b6b6c513e00da1a270370f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe2cec41bb2ccb499b6b6c513e00da1a270370f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7fe2cec41bb2ccb499b6b6c513e00da1a270370f", "patch": "@@ -19756,7 +19756,7 @@ reference_to_unused (tree * tp, int * walk_subtrees,\n   /* ???  The C++ FE emits debug information for using decls, so\n      putting gcc_unreachable here falls over.  See PR31899.  For now\n      be conservative.  */\n-  else if (!symtab->global_info_ready && VAR_OR_FUNCTION_DECL_P (*tp))\n+  else if (!symtab->global_info_ready && VAR_P (*tp))\n     return *tp;\n   else if (VAR_P (*tp))\n     {\n@@ -19771,7 +19771,7 @@ reference_to_unused (tree * tp, int * walk_subtrees,\n          optimizing and gimplifying the CU by now.\n \t So if *TP has no call graph node associated\n \t to it, it means *TP will not be emitted.  */\n-      if (!cgraph_node::get (*tp))\n+      if (!symtab->global_info_ready || !cgraph_node::get (*tp))\n \treturn *tp;\n     }\n   else if (TREE_CODE (*tp) == STRING_CST && !TREE_ASM_WRITTEN (*tp))\n@@ -20295,12 +20295,11 @@ tree_add_const_value_attribute (dw_die_ref die, tree t)\n \t  return true;\n \t}\n     }\n-  if (! early_dwarf)\n-    {\n-      rtl = rtl_for_decl_init (init, type);\n-      if (rtl)\n-\treturn add_const_value_attribute (die, rtl);\n-    }\n+  /* Generate the RTL even if early_dwarf to force mangling of all refered to\n+     symbols.  */\n+  rtl = rtl_for_decl_init (init, type);\n+  if (rtl && !early_dwarf)\n+    return add_const_value_attribute (die, rtl);\n   /* If the host and target are sane, try harder.  */\n   if (CHAR_BIT == 8 && BITS_PER_UNIT == 8\n       && initializer_constant_valid_p (init, type))"}, {"sha": "c49327720fc481fe522c9428ee0ba49a44f538d5", "filename": "gcc/testsuite/g++.dg/lto/pr96690_0.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fe2cec41bb2ccb499b6b6c513e00da1a270370f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr96690_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fe2cec41bb2ccb499b6b6c513e00da1a270370f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr96690_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr96690_0.C?ref=7fe2cec41bb2ccb499b6b6c513e00da1a270370f", "patch": "@@ -0,0 +1,17 @@\n+// { dg-lto-do assemble }\n+// { dg-lto-options { { -flto -ffat-lto-objects -g } } }\n+struct A { A (int); };\n+template <class T> class B { T f; };\n+unsigned char *foo (int *, bool *, const int &);\n+template <typename, unsigned char *F (int *, bool *, const int &)> struct C {};\n+struct D { B<C<unsigned char, foo> > d; };\n+struct E { D e; };\n+struct F {};\n+struct G { static int bar (A, F, E, int); };\n+\n+void\n+baz ()\n+{\n+  F f;\n+  G::bar (0, f, E (), 0);\n+}"}]}