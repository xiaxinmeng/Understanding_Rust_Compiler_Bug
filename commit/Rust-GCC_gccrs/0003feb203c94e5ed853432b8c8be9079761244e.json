{"sha": "0003feb203c94e5ed853432b8c8be9079761244e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwM2ZlYjIwM2M5NGU1ZWQ4NTM0MzJiOGM4YmU5MDc5NzYxMjQ0ZQ==", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@cygnus.com", "date": "1999-01-21T11:20:09Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-01-21T11:20:09Z"}, "message": "varasm.c (output_constant_pool): Use floor_log2 instead of exact_log2 for ASM_OUTPUT_ALIGN.\n\nThu Jan 21 14:13:31 1999  Vladimir N. Makarov  <vmakarov@cygnus.com>\n        * varasm.c (output_constant_pool): Use floor_log2 instead of\n\texact_log2 for ASM_OUTPUT_ALIGN.\n\t* stor-layout.c (layout_type): Do machine-dependent extra alignment.\n\t* emit-rtl.c (operand_subword): Handle case when a subword outside\n\tthe operand.\n\t* tm.texi (ROUND_TYPE_{SIZE,ALIGN}): More accurate descriptions of\n\tthe macros.\n\nFrom-SVN: r24800", "tree": {"sha": "f114752156844ccab9b23e5e93c21da5cfb7268f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f114752156844ccab9b23e5e93c21da5cfb7268f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0003feb203c94e5ed853432b8c8be9079761244e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0003feb203c94e5ed853432b8c8be9079761244e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0003feb203c94e5ed853432b8c8be9079761244e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0003feb203c94e5ed853432b8c8be9079761244e/comments", "author": null, "committer": null, "parents": [{"sha": "7fcbfb22d5ed702003945f2b4662ccf30e99a8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcbfb22d5ed702003945f2b4662ccf30e99a8a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcbfb22d5ed702003945f2b4662ccf30e99a8a3"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "9bc917bafcba37dea5654ce756a685b110f8c4fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0003feb203c94e5ed853432b8c8be9079761244e", "patch": "@@ -1,3 +1,16 @@\n+Thu Jan 21 14:13:31 1999  Vladimir N. Makarov  <vmakarov@cygnus.com>\n+\n+        * varasm.c (output_constant_pool): Use floor_log2 instead of\n+\texact_log2 for ASM_OUTPUT_ALIGN.\n+\n+\t* stor-layout.c (layout_type): Do machine-dependent extra alignment.\n+\n+\t* emit-rtl.c (operand_subword): Handle case when a subword outside\n+\tthe operand.\n+\n+\t* tm.texi (ROUND_TYPE_{SIZE,ALIGN}): More accurate descriptions of\n+\tthe macros.\n+\n Thu Jan 21 01:59:30 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* cse.c (fold_rtx): Revert 29 Dec change."}, {"sha": "22fdaf692dbee2e76b02b8c293c966b863c5ad6e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=0003feb203c94e5ed853432b8c8be9079761244e", "patch": "@@ -1136,12 +1136,16 @@ operand_subword (op, i, validate_address, mode)\n   if (mode == VOIDmode)\n     abort ();\n \n-  /* If OP is narrower than a word or if we want a word outside OP, fail.  */\n+  /* If OP is narrower than a word, fail. */\n   if (mode != BLKmode\n-      && (GET_MODE_SIZE (mode) < UNITS_PER_WORD\n-\t  || (i + 1) * UNITS_PER_WORD > GET_MODE_SIZE (mode)))\n+      && (GET_MODE_SIZE (mode) < UNITS_PER_WORD))\n     return 0;\n \n+  /* If we want a word outside OP, return zero. */\n+  if (mode != BLKmode\n+      && (i + 1) * UNITS_PER_WORD > GET_MODE_SIZE (mode))\n+    return const0_rtx;\n+\n   /* If OP is already an integer word, return it.  */\n   if (GET_MODE_CLASS (mode) == MODE_INT\n       && GET_MODE_SIZE (mode) == UNITS_PER_WORD)"}, {"sha": "a712664843feda314ef5dae8ce1a1e14b7002edb", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=0003feb203c94e5ed853432b8c8be9079761244e", "patch": "@@ -1085,6 +1085,18 @@ layout_type (type)\n \t      && TREE_CODE (type) != ARRAY_TYPE)))\n     TYPE_ALIGN (type) = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n \n+  /* Do machine-dependent extra alignment.  */\n+#ifdef ROUND_TYPE_ALIGN\n+  TYPE_ALIGN (type)\n+    = ROUND_TYPE_ALIGN (type, TYPE_ALIGN (type), BITS_PER_UNIT);\n+#endif\n+\n+#ifdef ROUND_TYPE_SIZE\n+  if (TYPE_SIZE (type) != 0)\n+    TYPE_SIZE (type)\n+      = ROUND_TYPE_SIZE (type, TYPE_SIZE (type), TYPE_ALIGN (type));\n+#endif\n+\n   /* Evaluate nonconstant size only once, either now or as soon as safe.  */\n   if (TYPE_SIZE (type) != 0 && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n     TYPE_SIZE (type) = variable_size (TYPE_SIZE (type));"}, {"sha": "cba1b66813388dda980d7b4eeee96adad57a0ece", "filename": "gcc/tm.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=0003feb203c94e5ed853432b8c8be9079761244e", "patch": "@@ -966,18 +966,18 @@ Like PCC_BITFIELD_TYPE_MATTERS except that its effect is limited to\n aligning a bitfield within the structure.\n \n @findex ROUND_TYPE_SIZE\n-@item ROUND_TYPE_SIZE (@var{struct}, @var{size}, @var{align})\n-Define this macro as an expression for the overall size of a structure\n-(given by @var{struct} as a tree node) when the size computed from the\n-fields is @var{size} and the alignment is @var{align}.\n+@item ROUND_TYPE_SIZE (@var{type}, @var{computed}, @var{specified})\n+Define this macro as an expression for the overall size of a type\n+(given by @var{type} as a tree node) when the size computed in the\n+usual way is @var{computed} and the alignment is @var{specified}.\n \n-The default is to round @var{size} up to a multiple of @var{align}.\n+The default is to round @var{computed} up to a multiple of @var{specified}.\n \n @findex ROUND_TYPE_ALIGN\n-@item ROUND_TYPE_ALIGN (@var{struct}, @var{computed}, @var{specified})\n-Define this macro as an expression for the alignment of a structure\n-(given by @var{struct} as a tree node) if the alignment computed in the\n-usual way is @var{computed} and the alignment explicitly specified was\n+@item ROUND_TYPE_ALIGN (@var{type}, @var{computed}, @var{specified})\n+Define this macro as an expression for the alignment of a type (given\n+by @var{type} as a tree node) if the alignment computed in the usual\n+way is @var{computed} and the alignment explicitly specified was\n @var{specified}.\n \n The default is to use @var{specified} if it is larger; otherwise, use"}, {"sha": "9fad6eb3993285c9280a776bebe061ca8873fe36", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0003feb203c94e5ed853432b8c8be9079761244e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=0003feb203c94e5ed853432b8c8be9079761244e", "patch": "@@ -3634,7 +3634,7 @@ output_constant_pool (fnname, fndecl)\n #endif\n \n       if (pool->align > 1)\n-\tASM_OUTPUT_ALIGN (asm_out_file, exact_log2 (pool->align));\n+\tASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (pool->align));\n \n       /* Output the label.  */\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LC\", pool->labelno);"}]}