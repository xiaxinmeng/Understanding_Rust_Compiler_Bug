{"sha": "3815f967f9fa3655ee4e9cdc44d6292e09f411de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxNWY5NjdmOWZhMzY1NWVlNGU5Y2RjNDRkNjI5MmUwOWY0MTFkZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:38:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-08T09:38:48Z"}, "message": "[multiple changes]\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* s-trasym.ads (Hexa_Traceback): If\n\tSuppress_Hex is True, print \"...\" instead of a hexadecimal\n\taddress.\n\t* s-trasym.adb: Ignore No_Hex in this version.\n\tMisc cleanup.\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* debug.adb: Minor reformatting.\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* a-cbdlli.adb, a-cohama.adb, a-cohase.adb (Copy): Rewrite the\n\tcode so it doesn't trigger an \"uninit var\" warning.\n\n2017-09-08  Nicolas Roche  <roche@adacore.com>\n\n\t* s-hibaen.ads: Remove obsolete file.\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-locale.ads: Add comment explaining the state of this package.\n\n2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_util.adb (Is_CCT_Instance): Allow calls in the context\n\tof packages.\n\t* sem_prag.ads, sem_prag.adb (Find_Related_Declaration_Or_Body):\n\tallow calls in the context of package spec (for pragma\n\tInitializes) and bodies (for pragma Refined_State).\n\n2017-09-08  Bob Duff  <duff@adacore.com>\n\n\t* checks.adb (Insert_Valid_Check): Copy the Do_Range_Check flag to the\n\tnew Exp.\n\nFrom-SVN: r251875", "tree": {"sha": "7019b196e6d5c8513a426a8b9ba493eb506f4f11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7019b196e6d5c8513a426a8b9ba493eb506f4f11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3815f967f9fa3655ee4e9cdc44d6292e09f411de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3815f967f9fa3655ee4e9cdc44d6292e09f411de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3815f967f9fa3655ee4e9cdc44d6292e09f411de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3815f967f9fa3655ee4e9cdc44d6292e09f411de/comments", "author": null, "committer": null, "parents": [{"sha": "a481c9b40f0de76bf9e86b9aba7c1fe66cd7add0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a481c9b40f0de76bf9e86b9aba7c1fe66cd7add0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a481c9b40f0de76bf9e86b9aba7c1fe66cd7add0"}], "stats": {"total": 567, "additions": 313, "deletions": 254}, "files": [{"sha": "5a87f681dc95482ba5599b2646b05f631352be8f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -1,3 +1,48 @@\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+PR ada/80888\n+\t* a-textio.adb, a-witeio.adb, a-ztexio.adb (Set_WCEM): Use\n+\tDefault_WCEM by default (i.e. if the encoding is not specified\n+\tby the Form string).\n+\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* s-trasym.ads (Hexa_Traceback): If\n+\tSuppress_Hex is True, print \"...\" instead of a hexadecimal\n+\taddress.\n+\t* s-trasym.adb: Ignore No_Hex in this version.\n+\tMisc cleanup.\n+\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* debug.adb: Minor reformatting.\n+\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* a-cbdlli.adb, a-cohama.adb, a-cohase.adb (Copy): Rewrite the\n+\tcode so it doesn't trigger an \"uninit var\" warning.\n+\n+2017-09-08  Nicolas Roche  <roche@adacore.com>\n+\n+\t* s-hibaen.ads: Remove obsolete file.\n+\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-locale.ads: Add comment explaining the state of this package.\n+\n+2017-09-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.adb (Is_CCT_Instance): Allow calls in the context\n+\tof packages.\n+\t* sem_prag.ads, sem_prag.adb (Find_Related_Declaration_Or_Body):\n+\tallow calls in the context of package spec (for pragma\n+\tInitializes) and bodies (for pragma Refined_State).\n+\n+2017-09-08  Bob Duff  <duff@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): Copy the Do_Range_Check flag to the\n+\tnew Exp.\n+\n 2017-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* debug.adb (dA): Adjust comment."}, {"sha": "b19fc3c293e213288aad16c3273ef1b4ed829d7a", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -329,12 +329,15 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       C : Count_Type;\n \n    begin\n-      if Capacity = 0 then\n+      if Capacity < Source.Length then\n+         if Checks and then Capacity /= 0 then\n+            raise Capacity_Error\n+              with \"Requested capacity is less than Source length\";\n+         end if;\n+\n          C := Source.Length;\n-      elsif Capacity >= Source.Length then\n+      else\n          C := Capacity;\n-      elsif Checks then\n-         raise Capacity_Error with \"Capacity value too small\";\n       end if;\n \n       return Target : List (Capacity => C) do\n@@ -1014,7 +1017,7 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n    is\n       New_Item : Element_Type;\n       pragma Unmodified (New_Item);\n-      --  OK to reference, see below\n+      --  OK to reference, see below. Needed to suppress front end warning.\n \n    begin\n       --  There is no explicit element provided, but in an instance the element\n@@ -1023,7 +1026,9 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       --  initialization, so insert the specified number of possibly\n       --  initialized elements at the given position.\n \n+      pragma Warnings (Off); -- Needed to suppress back end warning\n       Insert (Container, Before, New_Item, Position, Count);\n+      pragma Warnings (On);\n    end Insert;\n \n    ---------------------"}, {"sha": "4ead9255307b073a9751b6da282da006113b05ed", "filename": "gcc/ada/a-cohama.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -263,15 +263,15 @@ package body Ada.Containers.Hashed_Maps is\n       C : Count_Type;\n \n    begin\n-      if Capacity = 0 then\n-         C := Source.Length;\n+      if Capacity < Source.Length then\n+         if Checks and then Capacity /= 0 then\n+            raise Capacity_Error\n+              with \"Requested capacity is less than Source length\";\n+         end if;\n \n-      elsif Capacity >= Source.Length then\n+         C := Source.Length;\n+      else\n          C := Capacity;\n-\n-      elsif Checks then\n-         raise Capacity_Error\n-           with \"Requested capacity is less than Source length\";\n       end if;\n \n       return Target : Map do"}, {"sha": "3056f547ee6b0b28b2b12afd57d2d7f0c34b2bb3", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -248,15 +248,15 @@ package body Ada.Containers.Hashed_Sets is\n       C : Count_Type;\n \n    begin\n-      if Capacity = 0 then\n-         C := Source.Length;\n+      if Capacity < Source.Length then\n+         if Checks and then Capacity /= 0 then\n+            raise Capacity_Error\n+              with \"Requested capacity is less than Source length\";\n+         end if;\n \n-      elsif Capacity >= Source.Length then\n+         C := Source.Length;\n+      else\n          C := Capacity;\n-\n-      elsif Checks then\n-         raise Capacity_Error\n-           with \"Requested capacity is less than Source length\";\n       end if;\n \n       return Target : Set do"}, {"sha": "605ce20c013252889bb61579863d396fa63c0d5f", "filename": "gcc/ada/a-locale.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-locale.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-locale.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-locale.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2010-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT.  In accordance with the copyright of that document, you can freely --\n@@ -15,6 +15,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Note that this package is currently not implemented on any platform and\n+--  functions Language and Country will always return\n+--  Language_Unknown/Country_Unknown.\n+\n package Ada.Locales is\n    pragma Preelaborate (Locales);\n    pragma Remote_Types (Locales);"}, {"sha": "0f24f5a5fc74b0c1afb94b69dee19efd835d36b4", "filename": "gcc/ada/a-strfix.adb", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-strfix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-strfix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strfix.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -627,47 +627,61 @@ package body Ada.Strings.Fixed is\n      (Source : String;\n       Side   : Trim_End) return String\n    is\n-      Low, High : Integer;\n-\n    begin\n-      Low := Index_Non_Blank (Source, Forward);\n-\n-      --  All blanks case\n-\n-      if Low = 0 then\n-         return \"\";\n-\n-      --  At least one non-blank\n+      case Side is\n+         when Strings.Left =>\n+            declare\n+               Low : constant Natural := Index_Non_Blank (Source, Forward);\n+            begin\n+               --  All blanks case\n \n-      else\n-         High := Index_Non_Blank (Source, Backward);\n+               if Low = 0 then\n+                  return \"\";\n+               end if;\n \n-         case Side is\n-            when Strings.Left =>\n                declare\n                   subtype Result_Type is String (1 .. Source'Last - Low + 1);\n-\n                begin\n                   return Result_Type (Source (Low .. Source'Last));\n                end;\n+            end;\n+\n+         when Strings.Right =>\n+            declare\n+               High : constant Natural := Index_Non_Blank (Source, Backward);\n+            begin\n+               --  All blanks case\n+\n+               if High = 0 then\n+                  return \"\";\n+               end if;\n \n-            when Strings.Right =>\n                declare\n                   subtype Result_Type is String (1 .. High - Source'First + 1);\n-\n                begin\n                   return Result_Type (Source (Source'First .. High));\n                end;\n+            end;\n+\n+         when Strings.Both =>\n+            declare\n+               Low : constant Natural := Index_Non_Blank (Source, Forward);\n+            begin\n+               --  All blanks case\n+\n+               if Low = 0 then\n+                  return \"\";\n+               end if;\n \n-            when Strings.Both =>\n                declare\n+                  High : constant Natural :=\n+                    Index_Non_Blank (Source, Backward);\n                   subtype Result_Type is String (1 .. High - Low + 1);\n-\n                begin\n                   return Result_Type (Source (Low .. High));\n                end;\n-         end case;\n-      end if;\n+            end;\n+      end case;\n    end Trim;\n \n    procedure Trim"}, {"sha": "380444aff3ab9d943301c9686f96fa33ced9d025", "filename": "gcc/ada/a-strsea.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-strsea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-strsea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strsea.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,10 +31,10 @@\n \n --  This package contains the search functions from Ada.Strings.Fixed. They\n --  are separated out because they are shared by Ada.Strings.Bounded and\n---  Ada.Strings.Unbounded, and we don't want to drag other irrelevant stuff\n---  from Ada.Strings.Fixed when using the other two packages. We make this\n---  a private package, since user programs should access these subprograms\n---  via one of the standard string packages.\n+--  Ada.Strings.Unbounded, and we don't want to drag in other irrelevant stuff\n+--  from Ada.Strings.Fixed when using the other two packages. We make this a\n+--  private package, since user programs should access these subprograms via\n+--  one of the standard string packages.\n \n with Ada.Strings.Maps;\n "}, {"sha": "66d9cb2be380915b2c466bf7e1ac14116bec74b5", "filename": "gcc/ada/a-stwise.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-stwise.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-stwise.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwise.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,10 +31,10 @@\n \n --  This package contains the search functions from Ada.Strings.Wide_Fixed.\n --  They are separated out because they are shared by Ada.Strings.Wide_Bounded\n---  and Ada.Strings.Wide_Unbounded, and we don't want to drag other irrelevant\n---  stuff from Ada.Strings.Wide_Fixed when using the other two packages. We\n---  make this a private package, since user programs should access these\n---  subprograms via one of the standard string packages.\n+--  and Ada.Strings.Wide_Unbounded, and we don't want to drag in other\n+--  irrelevant stuff from Ada.Strings.Wide_Fixed when using the other two\n+--  packages. We make this a private package, since user programs should\n+--  access these subprograms via one of the standard string packages.\n \n with Ada.Strings.Wide_Maps;\n "}, {"sha": "1875af78af311218dd6c96a54bc1908f43386926", "filename": "gcc/ada/a-stzsea.ads", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-stzsea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fa-stzsea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzsea.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,11 +31,10 @@\n \n --  This package contains search functions from Ada.Strings.Wide_Wide_Fixed.\n --  They are separated because Ada.Strings.Wide_Wide_Bounded shares these\n---  search functions with Ada.Strings.Wide_Wide_Unbounded, and we don't want\n---  to drag other irrelevant stuff from Ada.Strings.Wide_Wide_Fixed when using\n---  the other two packages. We make this a private package, since user\n---  programs should access these subprograms via one of the standard string\n---  packages.\n+--  search functions with Ada.Strings.Wide_Wide_Unbounded, and we don't want to\n+--  drag in other irrelevant stuff from Ada.Strings.Wide_Wide_Fixed when using\n+--  the other two packages. We make this a private package, since user programs\n+--  should access these subprograms via one of the standard string packages.\n \n with Ada.Strings.Wide_Wide_Maps;\n "}, {"sha": "dd076be3acf2b882ef740dc58274d25e49f63e2b", "filename": "gcc/ada/binde.adb", "status": "modified", "additions": 51, "deletions": 41, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fbinde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fbinde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinde.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -282,6 +282,9 @@ package body Binde is\n    Num_Chosen : Nat;\n    --  Number of units chosen in the elaboration order so far\n \n+   Diagnose_Elaboration_Problem_Called : Boolean := False;\n+   --  True if Diagnose_Elaboration_Problem was called. Used in an assertion.\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -429,9 +432,9 @@ package body Binde is\n \n       procedure Find_Elab_Order (Elab_Order : out Unit_Id_Table);\n \n-      Illegal_Elab_All : Boolean := False;\n-      --  Set true if Find_Elab_Order found an illegal pragma Elaborate_All\n-      --  (explicit or implicit).\n+      Elab_Cycle_Found : Boolean := False;\n+      --  Set True if Find_Elab_Order found a cycle (usually an illegal pragma\n+      --  Elaborate_All, explicit or implicit).\n \n       function SCC (U : Unit_Id) return Unit_Id;\n       --  The root of the strongly connected component containing U\n@@ -1027,22 +1030,23 @@ package body Binde is\n \n       if No_Pred = Chosen then\n          No_Pred := UNR.Table (Chosen).Nextnp;\n-\n       else\n-         --  Note that we just ignore the situation where it does not\n-         --  appear in the No_Pred list, this happens in calls from the\n-         --  Diagnose_Elaboration_Problem routine, where cycles are being\n-         --  removed arbitrarily from the graph.\n-\n          U := No_Pred;\n          while U /= No_Unit_Id loop\n             if UNR.Table (U).Nextnp = Chosen then\n                UNR.Table (U).Nextnp := UNR.Table (Chosen).Nextnp;\n-               exit;\n+               goto Done_Removal;\n             end if;\n \n             U := UNR.Table (U).Nextnp;\n          end loop;\n+\n+         --  Here if we didn't find it on the No_Pred list. This can happen\n+         --  only in calls from the Diagnose_Elaboration_Problem routine,\n+         --  where cycles are being removed arbitrarily from the graph.\n+\n+         pragma Assert (Errors_Detected > 0);\n+         <<Done_Removal>> null;\n       end if;\n \n       --  For all successors, decrement the number of predecessors, and if it\n@@ -1268,6 +1272,7 @@ package body Binde is\n    --  Start of processing for Diagnose_Elaboration_Problem\n \n    begin\n+      Diagnose_Elaboration_Problem_Called := True;\n       Set_Standard_Error;\n \n       --  Output state of things if debug flag N set\n@@ -1279,10 +1284,8 @@ package body Binde is\n          begin\n             Write_Eol;\n             Write_Eol;\n-            Write_Str (\"Diagnose_Elaboration_Problem called\");\n-            Write_Eol;\n-            Write_Str (\"List of remaining unchosen units and predecessors\");\n-            Write_Eol;\n+            Write_Line (\"Diagnose_Elaboration_Problem called\");\n+            Write_Line (\"List of remaining unchosen units and predecessors\");\n \n             for U in Units.First .. Units.Last loop\n                if UNR.Table (U).Elab_Position = 0 then\n@@ -1294,17 +1297,14 @@ package body Binde is\n                   Write_Unit_Name (Units.Table (U).Uname);\n                   Write_Str (\" (Num_Pred = \");\n                   Write_Int (NP);\n-                  Write_Char (')');\n-                  Write_Eol;\n+                  Write_Line (\")\");\n \n                   if NP = 0 then\n                      if Units.Table (U).Elaborate_Body then\n-                        Write_Str\n+                        Write_Line\n                           (\"    (not chosen because of Elaborate_Body)\");\n-                        Write_Eol;\n                      else\n-                        Write_Str (\"  ****************** why not chosen?\");\n-                        Write_Eol;\n+                        Write_Line (\"  ****************** why not chosen?\");\n                      end if;\n                   end if;\n \n@@ -1329,8 +1329,7 @@ package body Binde is\n                   end loop;\n \n                   if NP /= 0 then\n-                     Write_Str (\"  **************** Num_Pred value wrong!\");\n-                     Write_Eol;\n+                     Write_Line (\"  **************** Num_Pred value wrong!\");\n                   end if;\n                end if;\n             end loop;\n@@ -1635,7 +1634,7 @@ package body Binde is\n         or Pessimistic_Elab_Order\n         or Debug_Flag_Old\n         or Debug_Flag_Older\n-        or Illegal_Elab_All\n+        or Elab_Cycle_Found\n       then\n          if Debug_Flag_V then\n             Write_Line (\"Doing old...\");\n@@ -1646,6 +1645,9 @@ package body Binde is\n          Elab_Old.Find_Elab_Order (Old_Elab_Order);\n       end if;\n \n+      pragma Assert (Elab_Cycle_Found <= -- implies\n+                       Diagnose_Elaboration_Problem_Called);\n+\n       declare\n          Old_Order : Unit_Id_Array renames\n                        Old_Elab_Order.Table (1 .. Last (Old_Elab_Order));\n@@ -2386,8 +2388,7 @@ package body Binde is\n \n       if not Zero_Formatting then\n          Write_Eol;\n-         Write_Str (\"REFERENCED SOURCES\");\n-         Write_Eol;\n+         Write_Line (\"REFERENCED SOURCES\");\n       end if;\n \n       for J in reverse Order'Range loop\n@@ -2406,8 +2407,7 @@ package body Binde is\n                Write_Str (\"   \");\n             end if;\n \n-            Write_Str (Get_Name_String (Source));\n-            Write_Eol;\n+            Write_Line (Get_Name_String (Source));\n          end if;\n       end loop;\n \n@@ -2430,8 +2430,7 @@ package body Binde is\n                Write_Str (\"   \");\n             end if;\n \n-            Write_Str (Get_Name_String (Source));\n-            Write_Eol;\n+            Write_Line (Get_Name_String (Source));\n          end if;\n       end loop;\n \n@@ -2448,8 +2447,7 @@ package body Binde is\n    begin\n       if not Zero_Formatting then\n          Write_Eol;\n-         Write_Str (\"                 ELABORATION ORDER DEPENDENCIES\");\n-         Write_Eol;\n+         Write_Line (\"                 ELABORATION ORDER DEPENDENCIES\");\n          Write_Eol;\n       end if;\n \n@@ -2535,8 +2533,7 @@ package body Binde is\n    begin\n       if Title /= \"\" then\n          Write_Eol;\n-         Write_Str (Title);\n-         Write_Eol;\n+         Write_Line (Title);\n       end if;\n \n       for J in Order'Range loop\n@@ -2751,8 +2748,7 @@ package body Binde is\n                Write_Unit_Name (Units.Table (Root).Uname);\n                Write_Str (\" -- \");\n                Write_Int (Nodes'Length);\n-               Write_Str (\" units:\");\n-               Write_Eol;\n+               Write_Line (\" units:\");\n \n                for J in Nodes'Range loop\n                   Write_Str (\"   \");\n@@ -2901,12 +2897,12 @@ package body Binde is\n                        or else Withs.Table (W).Elab_All_Desirable\n                      then\n                         if SCC (U) = SCC (Withed_Unit) then\n-                           Illegal_Elab_All := True; -- ????\n+                           Elab_Cycle_Found := True; -- ???\n \n                            --  We could probably give better error messages\n                            --  than Elab_Old here, but for now, to avoid\n                            --  disruption, we don't give any error here.\n-                           --  Instead, we set the Illegal_Elab_All flag above,\n+                           --  Instead, we set the Elab_Cycle_Found flag above,\n                            --  and then run the Elab_Old algorithm to issue the\n                            --  error message. Ideally, we would like to print\n                            --  multiple errors rather than stopping after the\n@@ -2958,6 +2954,9 @@ package body Binde is\n          --  nodes have been chosen.\n \n          Outer : loop\n+            if Debug_Flag_N then\n+               Write_Line (\"Outer loop\");\n+            end if;\n \n             --  If there are no nodes with predecessors, then either we are\n             --  done, as indicated by Num_Left being set to zero, or we have\n@@ -3003,17 +3002,29 @@ package body Binde is\n                  and then Better_Choice (U, Best_So_Far)\n                then\n                   if Debug_Flag_N then\n-                     Write_Str (\"    tentatively chosen (best so far)\");\n-                     Write_Eol;\n+                     Write_Line (\"    tentatively chosen (best so far)\");\n                   end if;\n \n                   Best_So_Far := U;\n+               else\n+                  if Debug_Flag_N then\n+                     Write_Line (\"    SCC not ready\");\n+                  end if;\n                end if;\n \n                U := UNR.Table (U).Nextnp;\n                exit No_Pred_Search when U = No_Unit_Id;\n             end loop No_Pred_Search;\n \n+            --  If there are no units on the No_Pred list whose SCC is ready,\n+            --  there must be a cycle. Defer to Elab_Old to print an error\n+            --  message.\n+\n+            if Best_So_Far = No_Unit_Id then\n+               Elab_Cycle_Found := True;\n+               return;\n+            end if;\n+\n             --  Choose the best candidate found\n \n             Choose (Elab_Order, Best_So_Far, \" [Best_So_Far]\");\n@@ -3200,8 +3211,7 @@ package body Binde is\n \n                if Better_Choice (U, Best_So_Far) then\n                   if Debug_Flag_N then\n-                     Write_Str (\"    tentatively chosen (best so far)\");\n-                     Write_Eol;\n+                     Write_Line (\"    tentatively chosen (best so far)\");\n                   end if;\n \n                   Best_So_Far := U;"}, {"sha": "8dd7a3907c6aca3cd6d6cf6a9c65e95e281990b5", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -7401,10 +7401,16 @@ package body Checks is\n               Suppress => Validity_Check);\n \n             Set_Validated_Object (Var_Id, New_Copy_Tree (Exp));\n-\n             Rewrite (Exp, New_Occurrence_Of (Var_Id, Loc));\n             PV := New_Occurrence_Of (Var_Id, Loc);\n \n+            --  Copy the Do_Range_Check flag over to the new Exp, so it doesn't\n+            --  get lost. Floating point types are handled elsewhere.\n+\n+            if not Is_Floating_Point_Type (Typ) then\n+               Set_Do_Range_Check (Exp, Do_Range_Check (Original_Node (Exp)));\n+            end if;\n+\n          --  Otherwise the expression does not denote a variable. Force its\n          --  evaluation by capturing its value in a constant. Generate:\n "}, {"sha": "6b740ff5cef6a645811016861c16fec1cabae87a", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -608,7 +608,7 @@ package body Debug is\n    --       calls a procedure in another package, the static elaboration\n    --       machinery adds an implicit Elaborate_All on the other package. This\n    --       switch disables the addition of the implicit pragma in such cases.\n-   --\n+\n    --  d.z  Restore previous front-end support for Inline_Always. In default\n    --       mode, for targets that use the GCC back end, Inline_Always is\n    --       handled by the back end. Use of this switch restores the previous"}, {"sha": "69ae9285e378f2265dc51e164b25ef66b6172f01", "filename": "gcc/ada/g-except.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fg-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fg-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-except.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2010, AdaCore                     --\n+--                     Copyright (C) 2000-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,9 +57,9 @@ package GNAT.Exceptions is\n    --  which has the same effect as passing a pointer.\n \n    --  This type is not private because keeping it by reference would require\n-   --  defining it in a way (e.g a tagged type) that would drag other run time\n-   --  files, which is unwanted in the case of e.g ravenscar where we want to\n-   --  minimize the number of run time files needed by default.\n+   --  defining it in a way (e.g. using a tagged type) that would drag in other\n+   --  run-time files, which is unwanted in the case of e.g. Ravenscar where we\n+   --  want to minimize the number of run-time files needed by default.\n \n    CE : constant Exception_Type;  -- Constraint_Error\n    PE : constant Exception_Type;  -- Program_Error"}, {"sha": "e18fa246f8822b9025fd247266bb4f808eed95fd", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -328,6 +328,9 @@ package body Lib.Load is\n \n          if Main_Source_File /= No_Source_File then\n             Version := Source_Checksum (Main_Source_File);\n+         else\n+            Error_Msg_File_1 := Fname;\n+            Error_Msg (\"file{ not found\", Load_Msg_Sloc);\n          end if;\n \n          Units.Table (Main_Unit) :="}, {"sha": "f210112deb30bdc9f72c3aef89b5291cbb18ad1a", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -738,6 +738,19 @@ package body SPARK_Specific is\n \n               and then Get_Scope_Num (Ref.Ent_Scope) /= No_Scope\n               and then Get_Scope_Num (Ref.Ref_Scope) /= No_Scope\n+\n+              --  Discard references to loop parameters introduced within\n+              --  expression functions, as they give two references: one from\n+              --  the analysis of the expression function itself and one from\n+              --  the analysis of the expanded body. We don't lose any globals\n+              --  by discarding them, because such loop parameters can only be\n+              --  accessed locally from within the expression function body.\n+\n+              and then not\n+                (Ekind (Ref.Ent) = E_Loop_Parameter\n+                  and then Scope_Within\n+                             (Ref.Ent, Unique_Entity (Ref.Ref_Scope))\n+                  and then Is_Expression_Function (Ref.Ref_Scope))\n             then\n                Nrefs         := Nrefs + 1;\n                Rnums (Nrefs) := Index;"}, {"sha": "e5ea7b028437fb4c7a347c0c11fa9b82bcbe4c2f", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -854,7 +854,6 @@ package body Repinfo is\n    ----------------------\n \n    procedure List_Record_Info (Ent : Entity_Id; Bytes_Big_Endian : Boolean) is\n-\n       procedure Compute_Max_Length\n         (Ent                : Entity_Id;\n          Starting_Position  : Uint := Uint_0;\n@@ -882,7 +881,7 @@ package body Repinfo is\n          Starting_First_Bit : Uint := Uint_0;\n          Prefix_Length      : Natural := 0)\n       is\n-         Comp  : Entity_Id;\n+         Comp : Entity_Id;\n \n       begin\n          Comp := First_Component_Or_Discriminant (Ent);\n@@ -905,7 +904,9 @@ package body Repinfo is\n                Fbit : Uint;\n                Spos : Uint;\n                Sbit : Uint;\n+\n                Name_Length : Natural;\n+\n             begin\n                Get_Decoded_Name_String (Chars (Comp));\n                Name_Length := Prefix_Length + Name_Len;\n@@ -936,6 +937,7 @@ package body Repinfo is\n \n                   Spos := Starting_Position  + Npos;\n                   Sbit := Starting_First_Bit + Fbit;\n+\n                   if Sbit >= SSU then\n                      Spos := Spos + 1;\n                      Sbit := Sbit - SSU;\n@@ -974,7 +976,7 @@ package body Repinfo is\n          Starting_First_Bit : Uint := Uint_0;\n          Prefix             : String := \"\")\n       is\n-         Comp  : Entity_Id;\n+         Comp : Entity_Id;\n \n       begin\n          Comp := First_Component_Or_Discriminant (Ent);\n@@ -1014,12 +1016,15 @@ package body Repinfo is\n                then\n                   Spos := Starting_Position  + Npos;\n                   Sbit := Starting_First_Bit + Fbit;\n+\n                   if Sbit >= SSU then\n                      Spos := Spos + 1;\n                      Sbit := Sbit - SSU;\n                   end if;\n+\n                   List_Record_Layout (Ctyp,\n                     Spos, Sbit, Prefix & Name_Buffer (1 .. Name_Len) & \".\");\n+\n                   goto Continue;\n                end if;\n \n@@ -1036,9 +1041,11 @@ package body Repinfo is\n                if Known_Static_Normalized_Position (Comp) then\n                   Spos := Starting_Position  + Npos;\n                   Sbit := Starting_First_Bit + Fbit;\n+\n                   if Sbit >= SSU then\n                      Spos := Spos + 1;\n                   end if;\n+\n                   UI_Image (Spos);\n                   Spaces (Max_Spos_Length - UI_Image_Length);\n                   Write_Str (UI_Image_Buffer (1 .. UI_Image_Length));\n@@ -1048,28 +1055,33 @@ package body Repinfo is\n                then\n                   Spaces (Max_Spos_Length - 2);\n                   Write_Str (\"bit offset\");\n+\n                   if Starting_Position /= Uint_0\n                     or else Starting_First_Bit /= Uint_0\n                   then\n                      Write_Char (' ');\n                      UI_Write (Starting_Position * SSU + Starting_First_Bit);\n                      Write_Str (\" +\");\n                   end if;\n+\n                   Write_Val (Bofs, Paren => True);\n                   Write_Str (\" size in bits = \");\n                   Write_Val (Esiz, Paren => True);\n                   Write_Eol;\n+\n                   goto Continue;\n \n                elsif Known_Normalized_Position (Comp)\n                  and then List_Representation_Info = 3\n                then\n                   Spaces (Max_Spos_Length - 2);\n+\n                   if Starting_Position /= Uint_0 then\n                      Write_Char (' ');\n                      UI_Write (Starting_Position);\n                      Write_Str (\" +\");\n                   end if;\n+\n                   Write_Val (Npos);\n \n                else\n@@ -1089,9 +1101,11 @@ package body Repinfo is\n \n                Write_Str (\" range  \");\n                Sbit := Starting_First_Bit + Fbit;\n+\n                if Sbit >= SSU then\n                   Sbit := Sbit - SSU;\n                end if;\n+\n                UI_Write (Sbit);\n                Write_Str (\" .. \");\n \n@@ -1158,6 +1172,8 @@ package body Repinfo is\n          end loop;\n       end List_Record_Layout;\n \n+   --  Start of processing for List_Record_Info\n+\n    begin\n       Blank_Line;\n       List_Type_Info (Ent);"}, {"sha": "fb8c2c8aaad0ec801d7509a6f35843eca3eddd50", "filename": "gcc/ada/s-hibaen.ads", "status": "removed", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a481c9b40f0de76bf9e86b9aba7c1fe66cd7add0/gcc%2Fada%2Fs-hibaen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a481c9b40f0de76bf9e86b9aba7c1fe66cd7add0/gcc%2Fada%2Fs-hibaen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-hibaen.ads?ref=a481c9b40f0de76bf9e86b9aba7c1fe66cd7add0", "patch": "@@ -1,99 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---                  S Y S T E M . H I E _ B A C K _ E N D                   --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---          Copyright (C) 2001-2009, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package provides an interface used in HI-E mode to determine\n---  whether or not the back end can handle certain constructs in a manner\n---  that is consistent with certification requirements.\n-\n---  The approach is to define entities which may or may not be present in\n---  a HI-E configured library. If the entity is present then the compiler\n---  operating in HI-E mode will allow the corresponding operation. If the\n---  entity is not present, the corresponding construct will be flagged as\n---  not permitted in High Integrity mode.\n-\n---  The default version of this unit delivered with the HI-E compiler is\n---  configured in a manner appropriate for the target, but it is possible\n---  to reconfigure the run-time to change the settings as required.\n-\n---  This unit is not used and never accessed by the compiler unless it is\n---  operating in HI-E mode, so the settings are irrelevant. However, we\n---  do include a standard version with all entities present in the standard\n---  run-time for use when pragma No_Run_Time is specified.\n-\n-package System.HIE_Back_End is\n-\n-   type Dummy is null record;\n-   pragma Suppress_Initialization (Dummy);\n-   --  This is the type used for the entities below. No properties of this\n-   --  type are ever referenced, and in particular, the entities are defined\n-   --  as variables, but their values are never referenced\n-\n-   HIE_64_Bit_Divides : Dummy;\n-   --  This entity controls whether the front end allows 64-bit integer\n-   --  divide operations, including the case where division of 32-bit\n-   --  fixed-point operands requires 64-bit arithmetic. This can safely\n-   --  be set as High_Integrity on 64-bit machines which provide this\n-   --  operation as a native instruction, but on most 32-bit machines\n-   --  a run time call (e.g. to __divdi3 in gcclib) is required. If a\n-   --  certifiable version of this routine is available, then setting\n-   --  this entity to High_Integrity with a pragma will cause appropriate\n-   --  calls to be generated, allowing 64-bit integer division operations.\n-\n-   HIE_Long_Shifts : Dummy;\n-   --  This entity controls whether the front end allows generation of\n-   --  long shift instructions, i.e. shifts that operate on 64-bit values.\n-   --  Such shifts are required for the implementation of fixed-point\n-   --  types longer than 32 bits. This can safely be set as High_Integrity\n-   --  on 64-bit machines that provide this operation at the hardware level,\n-   --  but on some 32-bit machines a run time call is required. If there\n-   --  is a certifiable version available of the relevant run-time routines,\n-   --  then setting this entity to High_Integrity with a pragma will cause\n-   --  appropriate calls to be generated, allowing the declaration and use\n-   --  of fixed-point types longer than 32 bits.\n-\n-   HIE_Aggregates : Dummy;\n-   --  In the general case, the use of aggregates may generate calls\n-   --  to run-time routines in the C library, including memset, memcpy,\n-   --  memmove, and bcopy. This entity can be set to High_Integrity with\n-   --  a pragma if certifiable versions of all these routines are available,\n-   --  in which case aggregates are permitted in HI-E mode. Otherwise the\n-   --  HI-E compiler will reject any use of aggregates.\n-\n-   HIE_Composite_Assignments : Dummy;\n-   --  The assignment of composite objects other than small records and\n-   --  arrays whose size is 64-bits or less and is set by an explicit\n-   --  size clause may generate calls to memcpy, memmove, and bcopy.\n-   --  If certifiable versions of all these routines are available, then\n-   --  this entity may be set to High_Integrity using a pragma, in which\n-   --  case such assignments are permitted. Otherwise the HI-E compiler\n-   --  will reject any such composite assignments.\n-\n-end System.HIE_Back_End;"}, {"sha": "946d21d6f711260fdac3ebe14396092eb8e412a2", "filename": "gcc/ada/s-purexc.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fs-purexc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fs-purexc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-purexc.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,9 +52,9 @@ package System.Pure_Exceptions is\n    --  which has the same effect as passing a pointer.\n \n    --  This type is not private because keeping it by reference would require\n-   --  defining it in a way (e.g a tagged type) that would drag other run time\n-   --  files, which is unwanted in the case of e.g ravenscar where we want to\n-   --  minimize the number of run time files needed by default.\n+   --  defining it in a way (e.g. using a tagged type) that would drag in other\n+   --  run-time files, which is unwanted in the case of e.g. Ravenscar, where\n+   --  we want to minimize the number of run-time files needed by default.\n \n    CE : constant Exception_Type;  -- Constraint_Error\n    PE : constant Exception_Type;  -- Program_Error"}, {"sha": "070f9a95e3bdf9a02fb5d664edf8aff6c9e8d0ef", "filename": "gcc/ada/s-trasym.adb", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fs-trasym.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fs-trasym.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-trasym.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -42,6 +42,8 @@ with System.Address_Image;\n \n package body System.Traceback.Symbolic is\n \n+   --  Note that Suppress_Hex is ignored in this version of this package.\n+\n    ------------------------\n    -- Symbolic_Traceback --\n    ------------------------\n@@ -63,11 +65,11 @@ package body System.Traceback.Symbolic is\n          begin\n             for J in Traceback'Range loop\n                Img := System.Address_Image (Traceback (J));\n-               Result (Last + 1 .. Last + 2) := \"0x\";\n-               Last := Last + 2;\n+               Result (Last + 1 .. Last + 2)          := \"0x\";\n+               Last                                   := Last + 2;\n                Result (Last + 1 .. Last + Img'Length) := Img;\n-               Last := Last + Img'Length + 1;\n-               Result (Last) := ' ';\n+               Last                                   := Last + Img'Length + 1;\n+               Result (Last)                          := ' ';\n             end loop;\n \n             Result (Last) := ASCII.LF;\n@@ -76,13 +78,28 @@ package body System.Traceback.Symbolic is\n       end if;\n    end Symbolic_Traceback;\n \n+   --  \"No_Hex\" is ignored in this version, because otherwise we have nothing\n+   --  at all to print.\n+\n+   function Symbolic_Traceback_No_Hex\n+     (Traceback : System.Traceback_Entries.Tracebacks_Array) return String is\n+   begin\n+      return Symbolic_Traceback (Traceback);\n+   end Symbolic_Traceback_No_Hex;\n+\n    function Symbolic_Traceback\n      (E : Ada.Exceptions.Exception_Occurrence) return String\n    is\n    begin\n       return Symbolic_Traceback (Ada.Exceptions.Traceback.Tracebacks (E));\n    end Symbolic_Traceback;\n \n+   function Symbolic_Traceback_No_Hex\n+     (E : Ada.Exceptions.Exception_Occurrence) return String is\n+   begin\n+      return Symbolic_Traceback (E);\n+   end Symbolic_Traceback_No_Hex;\n+\n    ------------------\n    -- Enable_Cache --\n    ------------------"}, {"sha": "ba9c89ea6c6891f2b78af47eea9b83548b26508a", "filename": "gcc/ada/s-trasym.ads", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fs-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fs-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-trasym.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -31,37 +31,33 @@\n \n --  Run-time symbolic traceback support\n \n---  The routines provided in this package assume that your application has\n---  been compiled with debugging information turned on, since this information\n---  is used to build a symbolic traceback.\n+--  The routines provided in this package assume that your application has been\n+--  compiled with debugging information turned on, since this information is\n+--  used to build a symbolic traceback.\n \n --  If you want to retrieve tracebacks from exception occurrences, it is also\n --  necessary to invoke the binder with -E switch. Please refer to the gnatbind\n --  documentation for more information.\n \n --  Note that it is also possible (and often recommended) to compute symbolic\n---  traceback outside the program execution, which in addition allows you\n---  to distribute the executable with no debug info:\n+--  traceback outside the program execution, which in addition allows you to\n+--  distribute the executable with no debug info:\n --\n---  - build your executable with debug info\n---  - archive this executable\n---  - strip a copy of the executable and distribute/deploy this version\n---  - at run time, compute absolute traceback (-bargs -E) from your\n---    executable and log it using Ada.Exceptions.Exception_Information\n---  - off line, compute the symbolic traceback using the executable archived\n---    with debug info and addr2line or gdb (using info line *<addr>) on the\n---    absolute addresses logged by your application.\n+--     - build your executable with debug info\n+--     - archive this executable\n+--     - strip a copy of the executable and distribute/deploy this version\n+--     - at run time, compute absolute traceback (-bargs -E) from your\n+--       executable and log it using Ada.Exceptions.Exception_Information\n+--     - off line, compute the symbolic traceback using the executable archived\n+--       with debug info and addr2line or gdb (using info line *<addr>) on the\n+--       absolute addresses logged by your application.\n \n --  In order to retrieve symbolic information, functions in this package will\n --  read on disk all the debug information of the executable file (found via\n --  Argument (0), and looked in the PATH if needed) or shared libraries using\n --  OS facilities, and load them in memory, causing a significant cpu and\n --  memory overhead.\n \n---  On platforms where the full capability is not supported, function\n---  Symbolic_Traceback return a list of addresses expressed as \"0x...\"\n---  separated by line feed.\n-\n pragma Polling (Off);\n --  We must turn polling off for this unit, because otherwise we can get\n --  elaboration circularities when polling is turned on.\n@@ -73,22 +69,30 @@ package System.Traceback.Symbolic is\n \n    function Symbolic_Traceback\n      (Traceback : System.Traceback_Entries.Tracebacks_Array) return String;\n-   --  Build a string containing a symbolic traceback of the given call chain.\n-   --  Note: This procedure may be installed by Set_Trace_Decorator, to get a\n-   --  symbolic traceback on all exceptions raised (see\n+   function Symbolic_Traceback_No_Hex\n+     (Traceback : System.Traceback_Entries.Tracebacks_Array) return String;\n+   --  Build a string containing a symbolic traceback of the given call\n+   --  chain. Note: These procedures may be installed by Set_Trace_Decorator,\n+   --  to get a symbolic traceback on all exceptions raised (see\n    --  System.Exception_Traces).\n \n    function Symbolic_Traceback\n      (E : Ada.Exceptions.Exception_Occurrence) return String;\n+   function Symbolic_Traceback_No_Hex\n+     (E : Ada.Exceptions.Exception_Occurrence) return String;\n    --  Build string containing symbolic traceback of given exception occurrence\n \n+   --  In the above, _No_Hex means do not print any hexadecimal addresses, even\n+   --  if the symbol is not available. This is useful for getting deterministic\n+   --  output from tests.\n+\n    procedure Enable_Cache (Include_Modules : Boolean := False);\n    --  Read symbolic information from binary files and cache them in memory.\n-   --  This will speed up the above functions but will require more memory.\n-   --  If Include_Modules is true, shared modules (or DLL) will also be cached.\n+   --  This will speed up the above functions but will require more memory. If\n+   --  Include_Modules is true, shared modules (or DLL) will also be cached.\n    --  This procedure may do nothing if not supported. The profile of this\n-   --  subprogram may change in the future (new parameters can be added with\n-   --  default value), but backward compatibility for direct calls is\n-   --  supported.\n+   --  subprogram may change in the future (new parameters can be added\n+   --  with default value), but backward compatibility for direct calls\n+   --  is supported.\n \n end System.Traceback.Symbolic;"}, {"sha": "dc98ad55d7d54de6718141c75ad5036df38da433", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -3060,8 +3060,12 @@ package body Sem_Ch6 is\n \n             --  We must duplicate the expression with semantic information to\n             --  inherit the decoration of global entities in generic instances.\n+            --  Set the parent of the new node to be the parent of the original\n+            --  to get the proper context, which is needed for complete error\n+            --  reporting and for semantic analysis.\n \n             Dup_Expr := New_Copy_Tree (Expression (Return_Stmt));\n+            Set_Parent (Dup_Expr, Return_Stmt);\n \n             --  Replace the defining identifier of iterators and loop param\n             --  specifications by a clone to ensure that the cloned expression"}, {"sha": "674c944d8606c16f6e2525f33fd345db414db336", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -28793,7 +28793,8 @@ package body Sem_Prag is\n       Look_For_Body : constant Boolean :=\n                         Nam_In (Prag_Nam, Name_Refined_Depends,\n                                           Name_Refined_Global,\n-                                          Name_Refined_Post);\n+                                          Name_Refined_Post,\n+                                          Name_Refined_State);\n       --  Refinement pragmas must be associated with a subprogram body [stub]\n \n    --  Start of processing for Find_Related_Declaration_Or_Body\n@@ -28892,6 +28893,11 @@ package body Sem_Prag is\n       elsif Nkind (Context) = N_Handled_Sequence_Of_Statements then\n          return Parent (Context);\n \n+      --  The pragma appears inside the declarative part of a package body\n+\n+      elsif Nkind (Context) = N_Package_Body then\n+         return Context;\n+\n       --  The pragma appears inside the declarative part of a subprogram body\n \n       elsif Nkind (Context) = N_Subprogram_Body then\n@@ -28902,6 +28908,11 @@ package body Sem_Prag is\n       elsif Nkind (Context) = N_Task_Body then\n          return Context;\n \n+      --  The pragma appears inside the visible part of a package specification\n+\n+      elsif Nkind (Context) = N_Package_Specification then\n+         return Parent (Context);\n+\n       --  The pragma is a byproduct of aspect expansion, return the related\n       --  context of the original aspect. This case has a lower priority as\n       --  the above circuitry pinpoints precisely the related context."}, {"sha": "ff4a1cba043e282cfb7282252b609c24fc2b9619", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -375,6 +375,7 @@ package Sem_Prag is\n    --    Depends\n    --    Extensions_Visible\n    --    Global\n+   --    Initializes\n    --    Max_Queue_Length\n    --    Post\n    --    Post_Class\n@@ -385,6 +386,7 @@ package Sem_Prag is\n    --    Refined_Depends\n    --    Refined_Global\n    --    Refined_Post\n+   --    Refined_State\n    --    Test_Case\n    --    Volatile_Function\n    --  as well as attributes 'Old and 'Result. Find the declaration of the"}, {"sha": "d8f907658e4b79e3f6efe07c2c68dedffdd6a696", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -8009,8 +8009,8 @@ package body Sem_Res is\n            and then Entity (R) = Standard_True\n            and then\n              ((Is_Entity_Name (L) and then Is_Object (Entity (L)))\n-                or else\n-              Nkind (L) in N_Op)\n+                 or else\n+               Nkind (L) in N_Op)\n          then\n             Error_Msg_N -- CODEFIX\n               (\"?r?comparison with True is redundant!\", N);"}, {"sha": "b03926b37eca709f06fb50b198a78dac643263f8", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -12395,13 +12395,14 @@ package body Sem_Util is\n \n       if Is_Single_Task_Object (Context_Id) then\n          return Scope_Within_Or_Same (Etype (Context_Id), Ref_Id);\n+\n       else\n-         pragma Assert\n-           (Is_Entry (Context_Id)\n-              or else\n-            Ekind_In (Context_Id, E_Function,\n-                                  E_Procedure,\n-                                  E_Task_Type));\n+         pragma Assert (Ekind_In (Context_Id, E_Entry,\n+                                              E_Entry_Family,\n+                                              E_Function,\n+                                              E_Package,\n+                                              E_Procedure,\n+                                              E_Task_Type));\n \n          return Scope_Within_Or_Same (Context_Id, Ref_Id);\n       end if;"}, {"sha": "2d6de5cad41919217cc8370de31259023fd23886", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -2329,9 +2329,7 @@ package Sem_Util is\n    procedure Reset_Analyzed_Flags (N : Node_Id);\n    --  Reset the Analyzed flags in all nodes of the tree whose root is N\n \n-   procedure Restore_SPARK_Mode\n-     (Mode : SPARK_Mode_Type;\n-      Prag : Node_Id);\n+   procedure Restore_SPARK_Mode (Mode : SPARK_Mode_Type; Prag : Node_Id);\n    --  Set the current SPARK_Mode to Mode and SPARK_Mode_Pragma to Prag. This\n    --  routine must be used in tandem with Set_SPARK_Mode.\n "}, {"sha": "e475b82a36056dbc21f36d7857ae600c16892357", "filename": "gcc/ada/style.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fstyle.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3815f967f9fa3655ee4e9cdc44d6292e09f411de/gcc%2Fada%2Fstyle.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.adb?ref=3815f967f9fa3655ee4e9cdc44d6292e09f411de", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -288,6 +288,12 @@ package body Style is\n          if Nkind (N) = N_Subprogram_Body then\n             Error_Msg_NE -- CODEFIX\n               (\"(style) missing OVERRIDING indicator in body of&\", N, E);\n+\n+         elsif Nkind (N) = N_Abstract_Subprogram_Declaration then\n+            Error_Msg_NE -- CODEFIX\n+              (\"(style) missing OVERRIDING indicator in deckaration of&\",\n+                Specification (N), E);\n+\n          else\n             Error_Msg_NE -- CODEFIX\n               (\"(style) missing OVERRIDING indicator in declaration of&\","}]}